HADOOP-16612. Track Azure Blob File System client-perceived latency

Contributed by Jeetesh Mangwani.

This add the ability to track the end-to-end performance of ADLS Gen 2 REST APIs by measuring latency in the Hadoop ABFS driver.
The latency information is sent back to the ADLS Gen 2 REST API endpoints in the subsequent requests.

+import java.time.Instant;
+import org.apache.hadoop.fs.azurebfs.services.AbfsPerfTracker;
+import org.apache.hadoop.fs.azurebfs.services.AbfsPerfInfo;
+  private static final int GET_SET_AGGREGATE_COUNT = 2;
+  private final AbfsPerfTracker abfsPerfTracker;
+    this.abfsPerfTracker = new AbfsPerfTracker(fileSystemName, accountName, this.abfsConfiguration);
+
-      try {
-        client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH);
+      try (AbfsPerfInfo perfInfo = startTracking("getIsNamespaceEnabled", "getAclStatus")) {
+        AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH);
+        perfInfo.registerResult(op.getResult());
+        perfInfo.registerSuccess(true);
-    LOG.debug("getFilesystemProperties for filesystem: {}",
-            client.getFileSystem());
+    try (AbfsPerfInfo perfInfo = startTracking("getFilesystemProperties",
+            "getFilesystemProperties")) {
+      LOG.debug("getFilesystemProperties for filesystem: {}",
+              client.getFileSystem());
-    final Hashtable<String, String> parsedXmsProperties;
+      final Hashtable<String, String> parsedXmsProperties;
-    final AbfsRestOperation op = client.getFilesystemProperties();
-    final String xMsProperties = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PROPERTIES);
+      final AbfsRestOperation op = client.getFilesystemProperties();
+      perfInfo.registerResult(op.getResult());
-    parsedXmsProperties = parseCommaSeparatedXmsProperties(xMsProperties);
+      final String xMsProperties = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PROPERTIES);
-    return parsedXmsProperties;
+      parsedXmsProperties = parseCommaSeparatedXmsProperties(xMsProperties);
+      perfInfo.registerSuccess(true);
+
+      return parsedXmsProperties;
+    }
-    final String commaSeparatedProperties;
-    try {
-      commaSeparatedProperties = convertXmsPropertiesToCommaSeparatedString(properties);
-    } catch (CharacterCodingException ex) {
-      throw new InvalidAbfsRestOperationException(ex);
-    }
+    try (AbfsPerfInfo perfInfo = startTracking("setFilesystemProperties",
+            "setFilesystemProperties")) {
+      final String commaSeparatedProperties;
+      try {
+        commaSeparatedProperties = convertXmsPropertiesToCommaSeparatedString(properties);
+      } catch (CharacterCodingException ex) {
+        throw new InvalidAbfsRestOperationException(ex);
+      }
-    client.setFilesystemProperties(commaSeparatedProperties);
+      final AbfsRestOperation op = client.setFilesystemProperties(commaSeparatedProperties);
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
+    }
-    LOG.debug("getPathStatus for filesystem: {} path: {}",
-            client.getFileSystem(),
-           path);
+    try (AbfsPerfInfo perfInfo = startTracking("getPathStatus", "getPathStatus")){
+      LOG.debug("getPathStatus for filesystem: {} path: {}",
+              client.getFileSystem(),
+              path);
-    final Hashtable<String, String> parsedXmsProperties;
-    final AbfsRestOperation op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
+      final Hashtable<String, String> parsedXmsProperties;
+      final AbfsRestOperation op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
+      perfInfo.registerResult(op.getResult());
-    final String xMsProperties = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PROPERTIES);
+      final String xMsProperties = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PROPERTIES);
-    parsedXmsProperties = parseCommaSeparatedXmsProperties(xMsProperties);
+      parsedXmsProperties = parseCommaSeparatedXmsProperties(xMsProperties);
-    return parsedXmsProperties;
+      perfInfo.registerSuccess(true);
+
+      return parsedXmsProperties;
+    }
-    LOG.debug("setFilesystemProperties for filesystem: {} path: {} with properties: {}",
-            client.getFileSystem(),
-            path,
-            properties);
+    try (AbfsPerfInfo perfInfo = startTracking("setPathProperties", "setPathProperties")){
+      LOG.debug("setFilesystemProperties for filesystem: {} path: {} with properties: {}",
+              client.getFileSystem(),
+              path,
+              properties);
-    final String commaSeparatedProperties;
-    try {
-      commaSeparatedProperties = convertXmsPropertiesToCommaSeparatedString(properties);
-    } catch (CharacterCodingException ex) {
-      throw new InvalidAbfsRestOperationException(ex);
+      final String commaSeparatedProperties;
+      try {
+        commaSeparatedProperties = convertXmsPropertiesToCommaSeparatedString(properties);
+      } catch (CharacterCodingException ex) {
+        throw new InvalidAbfsRestOperationException(ex);
+      }
+      final AbfsRestOperation op = client.setPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), commaSeparatedProperties);
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
-    client.setPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), commaSeparatedProperties);
-    LOG.debug("createFilesystem for filesystem: {}",
-            client.getFileSystem());
+    try (AbfsPerfInfo perfInfo = startTracking("createFilesystem", "createFilesystem")){
+      LOG.debug("createFilesystem for filesystem: {}",
+              client.getFileSystem());
-    client.createFilesystem();
+      final AbfsRestOperation op = client.createFilesystem();
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
+    }
-    LOG.debug("deleteFilesystem for filesystem: {}",
-            client.getFileSystem());
+    try (AbfsPerfInfo perfInfo = startTracking("deleteFilesystem", "deleteFilesystem")) {
+      LOG.debug("deleteFilesystem for filesystem: {}",
+              client.getFileSystem());
-    client.deleteFilesystem();
+      final AbfsRestOperation op = client.deleteFilesystem();
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
+    }
-    boolean isNamespaceEnabled = getIsNamespaceEnabled();
-    LOG.debug("createFile filesystem: {} path: {} overwrite: {} permission: {} umask: {} isNamespaceEnabled: {}",
-            client.getFileSystem(),
-            path,
-            overwrite,
-            permission.toString(),
-            umask.toString(),
-            isNamespaceEnabled);
+    try (AbfsPerfInfo perfInfo = startTracking("createFile", "createPath")) {
+      boolean isNamespaceEnabled = getIsNamespaceEnabled();
+      LOG.debug("createFile filesystem: {} path: {} overwrite: {} permission: {} umask: {} isNamespaceEnabled: {}",
+              client.getFileSystem(),
+              path,
+              overwrite,
+              permission.toString(),
+              umask.toString(),
+              isNamespaceEnabled);
-    client.createPath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), true, overwrite,
-        isNamespaceEnabled ? getOctalNotation(permission) : null,
-        isNamespaceEnabled ? getOctalNotation(umask) : null);
+      final AbfsRestOperation op = client.createPath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), true, overwrite,
+              isNamespaceEnabled ? getOctalNotation(permission) : null,
+              isNamespaceEnabled ? getOctalNotation(umask) : null);
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
-    return new AbfsOutputStream(
-        client,
-        AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
-        0,
-        abfsConfiguration.getWriteBufferSize(),
-        abfsConfiguration.isFlushEnabled(),
-        abfsConfiguration.isOutputStreamFlushDisabled());
+      return new AbfsOutputStream(
+              client,
+              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
+              0,
+              abfsConfiguration.getWriteBufferSize(),
+              abfsConfiguration.isFlushEnabled(),
+              abfsConfiguration.isOutputStreamFlushDisabled());
+    }
-    boolean isNamespaceEnabled = getIsNamespaceEnabled();
-    LOG.debug("createDirectory filesystem: {} path: {} permission: {} umask: {} isNamespaceEnabled: {}",
-            client.getFileSystem(),
-            path,
-            permission,
-            umask,
-            isNamespaceEnabled);
+    try (AbfsPerfInfo perfInfo = startTracking("createDirectory", "createPath")) {
+      boolean isNamespaceEnabled = getIsNamespaceEnabled();
+      LOG.debug("createDirectory filesystem: {} path: {} permission: {} umask: {} isNamespaceEnabled: {}",
+              client.getFileSystem(),
+              path,
+              permission,
+              umask,
+              isNamespaceEnabled);
-    client.createPath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), false, true,
-        isNamespaceEnabled ? getOctalNotation(permission) : null,
-        isNamespaceEnabled ? getOctalNotation(umask) : null);
+      final AbfsRestOperation op = client.createPath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), false, true,
+              isNamespaceEnabled ? getOctalNotation(permission) : null,
+              isNamespaceEnabled ? getOctalNotation(umask) : null);
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
+    }
-    LOG.debug("openFileForRead filesystem: {} path: {}",
-            client.getFileSystem(),
-            path);
+    try (AbfsPerfInfo perfInfo = startTracking("openFileForRead", "getPathStatus")) {
+      LOG.debug("openFileForRead filesystem: {} path: {}",
+              client.getFileSystem(),
+              path);
-    final AbfsRestOperation op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
+      final AbfsRestOperation op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
+      perfInfo.registerResult(op.getResult());
-    final String resourceType = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);
-    final long contentLength = Long.parseLong(op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));
-    final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
+      final String resourceType = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);
+      final long contentLength = Long.parseLong(op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));
+      final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
-    if (parseIsDirectory(resourceType)) {
-      throw new AbfsRestOperationException(
-              AzureServiceErrorCode.PATH_NOT_FOUND.getStatusCode(),
-              AzureServiceErrorCode.PATH_NOT_FOUND.getErrorCode(),
-              "openFileForRead must be used with files and not directories",
-              null);
+      if (parseIsDirectory(resourceType)) {
+        throw new AbfsRestOperationException(
+                AzureServiceErrorCode.PATH_NOT_FOUND.getStatusCode(),
+                AzureServiceErrorCode.PATH_NOT_FOUND.getErrorCode(),
+                "openFileForRead must be used with files and not directories",
+                null);
+      }
+
+      perfInfo.registerSuccess(true);
+
+      // Add statistics for InputStream
+      return new AbfsInputStream(client, statistics,
+              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), contentLength,
+              abfsConfiguration.getReadBufferSize(), abfsConfiguration.getReadAheadQueueDepth(),
+              abfsConfiguration.getTolerateOobAppends(), eTag);
-
-    // Add statistics for InputStream
-    return new AbfsInputStream(client, statistics,
-            AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), contentLength,
-                abfsConfiguration.getReadBufferSize(), abfsConfiguration.getReadAheadQueueDepth(),
-                abfsConfiguration.getTolerateOobAppends(), eTag);
-    LOG.debug("openFileForWrite filesystem: {} path: {} overwrite: {}",
-            client.getFileSystem(),
-            path,
-            overwrite);
+    try (AbfsPerfInfo perfInfo = startTracking("openFileForWrite", "getPathStatus")) {
+      LOG.debug("openFileForWrite filesystem: {} path: {} overwrite: {}",
+              client.getFileSystem(),
+              path,
+              overwrite);
-    final AbfsRestOperation op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
+      final AbfsRestOperation op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
+      perfInfo.registerResult(op.getResult());
-    final String resourceType = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);
-    final Long contentLength = Long.valueOf(op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));
+      final String resourceType = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);
+      final Long contentLength = Long.valueOf(op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));
-    if (parseIsDirectory(resourceType)) {
-      throw new AbfsRestOperationException(
-              AzureServiceErrorCode.PATH_NOT_FOUND.getStatusCode(),
-              AzureServiceErrorCode.PATH_NOT_FOUND.getErrorCode(),
-              "openFileForRead must be used with files and not directories",
-              null);
+      if (parseIsDirectory(resourceType)) {
+        throw new AbfsRestOperationException(
+                AzureServiceErrorCode.PATH_NOT_FOUND.getStatusCode(),
+                AzureServiceErrorCode.PATH_NOT_FOUND.getErrorCode(),
+                "openFileForRead must be used with files and not directories",
+                null);
+      }
+
+      final long offset = overwrite ? 0 : contentLength;
+
+      perfInfo.registerSuccess(true);
+
+      return new AbfsOutputStream(
+              client,
+              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
+              offset,
+              abfsConfiguration.getWriteBufferSize(),
+              abfsConfiguration.isFlushEnabled(),
+              abfsConfiguration.isOutputStreamFlushDisabled());
-
-    final long offset = overwrite ? 0 : contentLength;
-
-    return new AbfsOutputStream(
-        client,
-        AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path),
-        offset,
-        abfsConfiguration.getWriteBufferSize(),
-        abfsConfiguration.isFlushEnabled(),
-        abfsConfiguration.isOutputStreamFlushDisabled());
+    final Instant startAggregate = abfsPerfTracker.getLatencyInstant();
+    long countAggregate = 0;
+    boolean shouldContinue;
-      AbfsRestOperation op = client.renamePath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(source),
-              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(destination), continuation);
-      continuation = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_CONTINUATION);
+      try (AbfsPerfInfo perfInfo = startTracking("rename", "renamePath")) {
+        AbfsRestOperation op = client.renamePath(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(source),
+                AbfsHttpConstants.FORWARD_SLASH + getRelativePath(destination), continuation);
+        perfInfo.registerResult(op.getResult());
+        continuation = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_CONTINUATION);
+        perfInfo.registerSuccess(true);
+        countAggregate++;
+        shouldContinue = continuation != null && !continuation.isEmpty();
-    } while (continuation != null && !continuation.isEmpty());
+        if (!shouldContinue) {
+          perfInfo.registerAggregates(startAggregate, countAggregate);
+        }
+      }
+    } while (shouldContinue);
+    final Instant startAggregate = abfsPerfTracker.getLatencyInstant();
+    long countAggregate = 0;
+    boolean shouldContinue = true;
+
-      AbfsRestOperation op = client.deletePath(
-          AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), recursive, continuation);
-      continuation = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_CONTINUATION);
+      try (AbfsPerfInfo perfInfo = startTracking("delete", "deletePath")) {
+        AbfsRestOperation op = client.deletePath(
+                AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), recursive, continuation);
+        perfInfo.registerResult(op.getResult());
+        continuation = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_CONTINUATION);
+        perfInfo.registerSuccess(true);
+        countAggregate++;
+        shouldContinue = continuation != null && !continuation.isEmpty();
-    } while (continuation != null && !continuation.isEmpty());
+        if (!shouldContinue) {
+          perfInfo.registerAggregates(startAggregate, countAggregate);
+        }
+      }
+    } while (shouldContinue);
-    boolean isNamespaceEnabled = getIsNamespaceEnabled();
-    LOG.debug("getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}",
-            client.getFileSystem(),
-            path,
-            isNamespaceEnabled);
+    try (AbfsPerfInfo perfInfo = startTracking("getFileStatus", "undetermined")) {
+      boolean isNamespaceEnabled = getIsNamespaceEnabled();
+      LOG.debug("getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}",
+              client.getFileSystem(),
+              path,
+              isNamespaceEnabled);
-    final AbfsRestOperation op;
-    if (path.isRoot()) {
-      op = isNamespaceEnabled
-              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)
-              : client.getFilesystemProperties();
-    } else {
-      op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
-    }
+      final AbfsRestOperation op;
+      if (path.isRoot()) {
+        if (isNamespaceEnabled) {
+          perfInfo.registerCallee("getAclStatus");
+          op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH);
+        } else {
+          perfInfo.registerCallee("getFilesystemProperties");
+          op = client.getFilesystemProperties();
+        }
+      } else {
+        perfInfo.registerCallee("getPathStatus");
+        op = client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));
+      }
-    final long blockSize = abfsConfiguration.getAzureBlockSize();
-    final AbfsHttpOperation result = op.getResult();
+      perfInfo.registerResult(op.getResult());
+      final long blockSize = abfsConfiguration.getAzureBlockSize();
+      final AbfsHttpOperation result = op.getResult();
-    final String eTag = result.getResponseHeader(HttpHeaderConfigurations.ETAG);
-    final String lastModified = result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);
-    final String permissions = result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));
-    final boolean hasAcl = AbfsPermission.isExtendedAcl(permissions);
-    final long contentLength;
-    final boolean resourceIsDir;
+      final String eTag = result.getResponseHeader(HttpHeaderConfigurations.ETAG);
+      final String lastModified = result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);
+      final String permissions = result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));
+      final boolean hasAcl = AbfsPermission.isExtendedAcl(permissions);
+      final long contentLength;
+      final boolean resourceIsDir;
-    if (path.isRoot()) {
-      contentLength = 0;
-      resourceIsDir = true;
-    } else {
-      contentLength = parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));
-      resourceIsDir = parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));
-    }
+      if (path.isRoot()) {
+        contentLength = 0;
+        resourceIsDir = true;
+      } else {
+        contentLength = parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));
+        resourceIsDir = parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));
+      }
-    final String transformedOwner = identityTransformer.transformIdentityForGetRequest(
+      final String transformedOwner = identityTransformer.transformIdentityForGetRequest(
-    final String transformedGroup = identityTransformer.transformIdentityForGetRequest(
+      final String transformedGroup = identityTransformer.transformIdentityForGetRequest(
-    return new VersionedFileStatus(
-            transformedOwner,
-            transformedGroup,
-            permissions == null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)
-                    : AbfsPermission.valueOf(permissions),
-            hasAcl,
-            contentLength,
-            resourceIsDir,
-            1,
-            blockSize,
-            parseLastModifiedTime(lastModified),
-            path,
-            eTag);
+      perfInfo.registerSuccess(true);
+
+      return new VersionedFileStatus(
+              transformedOwner,
+              transformedGroup,
+              permissions == null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)
+                      : AbfsPermission.valueOf(permissions),
+              hasAcl,
+              contentLength,
+              resourceIsDir,
+              1,
+              blockSize,
+              parseLastModifiedTime(lastModified),
+              path,
+              eTag);
+    }
+    final Instant startAggregate = abfsPerfTracker.getLatencyInstant();
+    long countAggregate = 0;
+    boolean shouldContinue = true;
+
-      AbfsRestOperation op = client.listPath(relativePath, false, LIST_MAX_RESULTS, continuation);
-      continuation = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_CONTINUATION);
-      ListResultSchema retrievedSchema = op.getResult().getListResultSchema();
-      if (retrievedSchema == null) {
-        throw new AbfsRestOperationException(
-                AzureServiceErrorCode.PATH_NOT_FOUND.getStatusCode(),
-                AzureServiceErrorCode.PATH_NOT_FOUND.getErrorCode(),
-                "listStatusAsync path not found",
-                null, op.getResult());
-      }
-
-      long blockSize = abfsConfiguration.getAzureBlockSize();
-
-      for (ListResultEntrySchema entry : retrievedSchema.paths()) {
-        final String owner = identityTransformer.transformIdentityForGetRequest(entry.owner(), true, userName);
-        final String group = identityTransformer.transformIdentityForGetRequest(entry.group(), false, primaryUserGroup);
-        final FsPermission fsPermission = entry.permissions() == null
-                ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)
-                : AbfsPermission.valueOf(entry.permissions());
-        final boolean hasAcl = AbfsPermission.isExtendedAcl(entry.permissions());
-
-        long lastModifiedMillis = 0;
-        long contentLength = entry.contentLength() == null ? 0 : entry.contentLength();
-        boolean isDirectory = entry.isDirectory() == null ? false : entry.isDirectory();
-        if (entry.lastModified() != null && !entry.lastModified().isEmpty()) {
-          lastModifiedMillis = parseLastModifiedTime(entry.lastModified());
+      try (AbfsPerfInfo perfInfo = startTracking("listStatus", "listPath")) {
+        AbfsRestOperation op = client.listPath(relativePath, false, LIST_MAX_RESULTS, continuation);
+        perfInfo.registerResult(op.getResult());
+        continuation = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_CONTINUATION);
+        ListResultSchema retrievedSchema = op.getResult().getListResultSchema();
+        if (retrievedSchema == null) {
+          throw new AbfsRestOperationException(
+                  AzureServiceErrorCode.PATH_NOT_FOUND.getStatusCode(),
+                  AzureServiceErrorCode.PATH_NOT_FOUND.getErrorCode(),
+                  "listStatusAsync path not found",
+                  null, op.getResult());
-        Path entryPath = new Path(File.separator + entry.name());
-        entryPath = entryPath.makeQualified(this.uri, entryPath);
+        long blockSize = abfsConfiguration.getAzureBlockSize();
-        fileStatuses.add(
-                new VersionedFileStatus(
-                        owner,
-                        group,
-                        fsPermission,
-                        hasAcl,
-                        contentLength,
-                        isDirectory,
-                        1,
-                        blockSize,
-                        lastModifiedMillis,
-                        entryPath,
-                        entry.eTag()));
+        for (ListResultEntrySchema entry : retrievedSchema.paths()) {
+          final String owner = identityTransformer.transformIdentityForGetRequest(entry.owner(), true, userName);
+          final String group = identityTransformer.transformIdentityForGetRequest(entry.group(), false, primaryUserGroup);
+          final FsPermission fsPermission = entry.permissions() == null
+                  ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)
+                  : AbfsPermission.valueOf(entry.permissions());
+          final boolean hasAcl = AbfsPermission.isExtendedAcl(entry.permissions());
+
+          long lastModifiedMillis = 0;
+          long contentLength = entry.contentLength() == null ? 0 : entry.contentLength();
+          boolean isDirectory = entry.isDirectory() == null ? false : entry.isDirectory();
+          if (entry.lastModified() != null && !entry.lastModified().isEmpty()) {
+            lastModifiedMillis = parseLastModifiedTime(entry.lastModified());
+          }
+
+          Path entryPath = new Path(File.separator + entry.name());
+          entryPath = entryPath.makeQualified(this.uri, entryPath);
+
+          fileStatuses.add(
+                  new VersionedFileStatus(
+                          owner,
+                          group,
+                          fsPermission,
+                          hasAcl,
+                          contentLength,
+                          isDirectory,
+                          1,
+                          blockSize,
+                          lastModifiedMillis,
+                          entryPath,
+                          entry.eTag()));
+        }
+
+        perfInfo.registerSuccess(true);
+        countAggregate++;
+        shouldContinue = continuation != null && !continuation.isEmpty();
+
+        if (!shouldContinue) {
+          perfInfo.registerAggregates(startAggregate, countAggregate);
+        }
-
-    } while (continuation != null && !continuation.isEmpty());
+    } while (shouldContinue);
-    LOG.debug(
-            "setOwner filesystem: {} path: {} owner: {} group: {}",
-            client.getFileSystem(),
-            path.toString(),
-            owner,
-            group);
+    try (AbfsPerfInfo perfInfo = startTracking("setOwner", "setOwner")) {
-    final String transformedOwner = identityTransformer.transformUserOrGroupForSetRequest(owner);
-    final String transformedGroup = identityTransformer.transformUserOrGroupForSetRequest(group);
+      LOG.debug(
+              "setOwner filesystem: {} path: {} owner: {} group: {}",
+              client.getFileSystem(),
+              path.toString(),
+              owner,
+              group);
-    client.setOwner(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true), transformedOwner, transformedGroup);
+      final String transformedOwner = identityTransformer.transformUserOrGroupForSetRequest(owner);
+      final String transformedGroup = identityTransformer.transformUserOrGroupForSetRequest(group);
+
+      final AbfsRestOperation op = client.setOwner(
+              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
+              transformedOwner,
+              transformedGroup);
+
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
+    }
-    LOG.debug(
-            "setPermission filesystem: {} path: {} permission: {}",
-            client.getFileSystem(),
-            path.toString(),
-            permission.toString());
-    client.setPermission(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
-            String.format(AbfsHttpConstants.PERMISSION_FORMAT, permission.toOctal()));
+    try (AbfsPerfInfo perfInfo = startTracking("setPermission", "setPermission")) {
+
+      LOG.debug(
+              "setPermission filesystem: {} path: {} permission: {}",
+              client.getFileSystem(),
+              path.toString(),
+              permission.toString());
+
+      final AbfsRestOperation op = client.setPermission(
+              AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
+              String.format(AbfsHttpConstants.PERMISSION_FORMAT, permission.toOctal()));
+
+      perfInfo.registerResult(op.getResult()).registerSuccess(true);
+    }
-    LOG.debug(
-            "modifyAclEntries filesystem: {} path: {} aclSpec: {}",
-            client.getFileSystem(),
-            path.toString(),
-            AclEntry.aclSpecToString(aclSpec));
+    try (AbfsPerfInfo perfInfoGet = startTracking("modifyAclEntries", "getAclStatus")) {
-    identityTransformer.transformAclEntriesForSetRequest(aclSpec);
-    final Map<String, String> modifyAclEntries = AbfsAclHelper.deserializeAclSpec(AclEntry.aclSpecToString(aclSpec));
-    boolean useUpn = AbfsAclHelper.isUpnFormatAclEntries(modifyAclEntries);
+      LOG.debug(
+              "modifyAclEntries filesystem: {} path: {} aclSpec: {}",
+              client.getFileSystem(),
+              path.toString(),
+              AclEntry.aclSpecToString(aclSpec));
-    final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true), useUpn);
-    final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
+      identityTransformer.transformAclEntriesForSetRequest(aclSpec);
+      final Map<String, String> modifyAclEntries = AbfsAclHelper.deserializeAclSpec(AclEntry.aclSpecToString(aclSpec));
+      boolean useUpn = AbfsAclHelper.isUpnFormatAclEntries(modifyAclEntries);
-    final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
+      final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true), useUpn);
+      perfInfoGet.registerResult(op.getResult());
+      final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
-    AbfsAclHelper.modifyAclEntriesInternal(aclEntries, modifyAclEntries);
+      final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
-    client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
-        AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
+      AbfsAclHelper.modifyAclEntriesInternal(aclEntries, modifyAclEntries);
+
+      perfInfoGet.registerSuccess(true).finishTracking();
+
+      try (AbfsPerfInfo perfInfoSet = startTracking("modifyAclEntries", "setAcl")) {
+        final AbfsRestOperation setAclOp
+                = client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
+                AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
+        perfInfoSet.registerResult(setAclOp.getResult())
+                .registerSuccess(true)
+                .registerAggregates(perfInfoGet.getTrackingStart(), GET_SET_AGGREGATE_COUNT);
+      }
+    }
-    LOG.debug(
-            "removeAclEntries filesystem: {} path: {} aclSpec: {}",
-            client.getFileSystem(),
-            path.toString(),
-            AclEntry.aclSpecToString(aclSpec));
+    try (AbfsPerfInfo perfInfoGet = startTracking("removeAclEntries", "getAclStatus")) {
-    identityTransformer.transformAclEntriesForSetRequest(aclSpec);
-    final Map<String, String> removeAclEntries = AbfsAclHelper.deserializeAclSpec(AclEntry.aclSpecToString(aclSpec));
-    boolean isUpnFormat = AbfsAclHelper.isUpnFormatAclEntries(removeAclEntries);
+      LOG.debug(
+              "removeAclEntries filesystem: {} path: {} aclSpec: {}",
+              client.getFileSystem(),
+              path.toString(),
+              AclEntry.aclSpecToString(aclSpec));
-    final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true), isUpnFormat);
-    final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
+      identityTransformer.transformAclEntriesForSetRequest(aclSpec);
+      final Map<String, String> removeAclEntries = AbfsAclHelper.deserializeAclSpec(AclEntry.aclSpecToString(aclSpec));
+      boolean isUpnFormat = AbfsAclHelper.isUpnFormatAclEntries(removeAclEntries);
-    final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
+      final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true), isUpnFormat);
+      perfInfoGet.registerResult(op.getResult());
+      final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
-    AbfsAclHelper.removeAclEntriesInternal(aclEntries, removeAclEntries);
+      final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
-    client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
-            AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
+      AbfsAclHelper.removeAclEntriesInternal(aclEntries, removeAclEntries);
+
+      perfInfoGet.registerSuccess(true).finishTracking();
+
+      try (AbfsPerfInfo perfInfoSet = startTracking("removeAclEntries", "setAcl")) {
+        final AbfsRestOperation setAclOp =
+                client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
+                AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
+        perfInfoSet.registerResult(setAclOp.getResult())
+                .registerSuccess(true)
+                .registerAggregates(perfInfoGet.getTrackingStart(), GET_SET_AGGREGATE_COUNT);
+      }
+    }
-    LOG.debug(
-            "removeDefaultAcl filesystem: {} path: {}",
-            client.getFileSystem(),
-            path.toString());
+    try (AbfsPerfInfo perfInfoGet = startTracking("removeDefaultAcl", "getAclStatus")) {
-    final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true));
-    final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
-    final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
-    final Map<String, String> defaultAclEntries = new HashMap<>();
+      LOG.debug(
+              "removeDefaultAcl filesystem: {} path: {}",
+              client.getFileSystem(),
+              path.toString());
-    for (Map.Entry<String, String> aclEntry : aclEntries.entrySet()) {
-      if (aclEntry.getKey().startsWith("default:")) {
-        defaultAclEntries.put(aclEntry.getKey(), aclEntry.getValue());
+      final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true));
+      perfInfoGet.registerResult(op.getResult());
+      final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
+      final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
+      final Map<String, String> defaultAclEntries = new HashMap<>();
+
+      for (Map.Entry<String, String> aclEntry : aclEntries.entrySet()) {
+        if (aclEntry.getKey().startsWith("default:")) {
+          defaultAclEntries.put(aclEntry.getKey(), aclEntry.getValue());
+        }
+      }
+
+      aclEntries.keySet().removeAll(defaultAclEntries.keySet());
+
+      perfInfoGet.registerSuccess(true).finishTracking();
+
+      try (AbfsPerfInfo perfInfoSet = startTracking("removeDefaultAcl", "setAcl")) {
+        final AbfsRestOperation setAclOp =
+                client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
+                AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
+        perfInfoSet.registerResult(setAclOp.getResult())
+                .registerSuccess(true)
+                .registerAggregates(perfInfoGet.getTrackingStart(), GET_SET_AGGREGATE_COUNT);
-
-    aclEntries.keySet().removeAll(defaultAclEntries.keySet());
-
-    client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
-        AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
-    LOG.debug(
-            "removeAcl filesystem: {} path: {}",
-            client.getFileSystem(),
-            path.toString());
-    final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true));
-    final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
+    try (AbfsPerfInfo perfInfoGet = startTracking("removeAcl", "getAclStatus")){
-    final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
-    final Map<String, String> newAclEntries = new HashMap<>();
+      LOG.debug(
+              "removeAcl filesystem: {} path: {}",
+              client.getFileSystem(),
+              path.toString());
-    newAclEntries.put(AbfsHttpConstants.ACCESS_USER, aclEntries.get(AbfsHttpConstants.ACCESS_USER));
-    newAclEntries.put(AbfsHttpConstants.ACCESS_GROUP, aclEntries.get(AbfsHttpConstants.ACCESS_GROUP));
-    newAclEntries.put(AbfsHttpConstants.ACCESS_OTHER, aclEntries.get(AbfsHttpConstants.ACCESS_OTHER));
+      final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true));
+      perfInfoGet.registerResult(op.getResult());
+      final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
-    client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
-        AbfsAclHelper.serializeAclSpec(newAclEntries), eTag);
+      final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
+      final Map<String, String> newAclEntries = new HashMap<>();
+
+      newAclEntries.put(AbfsHttpConstants.ACCESS_USER, aclEntries.get(AbfsHttpConstants.ACCESS_USER));
+      newAclEntries.put(AbfsHttpConstants.ACCESS_GROUP, aclEntries.get(AbfsHttpConstants.ACCESS_GROUP));
+      newAclEntries.put(AbfsHttpConstants.ACCESS_OTHER, aclEntries.get(AbfsHttpConstants.ACCESS_OTHER));
+
+      perfInfoGet.registerSuccess(true).finishTracking();
+
+      try (AbfsPerfInfo perfInfoSet = startTracking("removeAcl", "setAcl")) {
+        final AbfsRestOperation setAclOp =
+                client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
+                AbfsAclHelper.serializeAclSpec(newAclEntries), eTag);
+        perfInfoSet.registerResult(setAclOp.getResult())
+                .registerSuccess(true)
+                .registerAggregates(perfInfoGet.getTrackingStart(), GET_SET_AGGREGATE_COUNT);
+      }
+    }
-    LOG.debug(
-            "setAcl filesystem: {} path: {} aclspec: {}",
-            client.getFileSystem(),
-            path.toString(),
-            AclEntry.aclSpecToString(aclSpec));
+    try (AbfsPerfInfo perfInfoGet = startTracking("setAcl", "getAclStatus")) {
-    identityTransformer.transformAclEntriesForSetRequest(aclSpec);
-    final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(AclEntry.aclSpecToString(aclSpec));
-    final boolean isUpnFormat = AbfsAclHelper.isUpnFormatAclEntries(aclEntries);
+      LOG.debug(
+              "setAcl filesystem: {} path: {} aclspec: {}",
+              client.getFileSystem(),
+              path.toString(),
+              AclEntry.aclSpecToString(aclSpec));
-    final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true), isUpnFormat);
-    final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
+      identityTransformer.transformAclEntriesForSetRequest(aclSpec);
+      final Map<String, String> aclEntries = AbfsAclHelper.deserializeAclSpec(AclEntry.aclSpecToString(aclSpec));
+      final boolean isUpnFormat = AbfsAclHelper.isUpnFormatAclEntries(aclEntries);
-    final Map<String, String> getAclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
+      final AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true), isUpnFormat);
+      perfInfoGet.registerResult(op.getResult());
+      final String eTag = op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);
-    AbfsAclHelper.setAclEntriesInternal(aclEntries, getAclEntries);
+      final Map<String, String> getAclEntries = AbfsAclHelper.deserializeAclSpec(op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL));
-    client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
-        AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
+      AbfsAclHelper.setAclEntriesInternal(aclEntries, getAclEntries);
+
+      perfInfoGet.registerSuccess(true).finishTracking();
+
+      try (AbfsPerfInfo perfInfoSet = startTracking("setAcl", "setAcl")) {
+        final AbfsRestOperation setAclOp =
+                client.setAcl(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true),
+                AbfsAclHelper.serializeAclSpec(aclEntries), eTag);
+        perfInfoSet.registerResult(setAclOp.getResult())
+                .registerSuccess(true)
+                .registerAggregates(perfInfoGet.getTrackingStart(), GET_SET_AGGREGATE_COUNT);
+      }
+    }
-    LOG.debug(
-            "getAclStatus filesystem: {} path: {}",
-            client.getFileSystem(),
-            path.toString());
-    AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true));
-    AbfsHttpOperation result = op.getResult();
+    try (AbfsPerfInfo perfInfo = startTracking("getAclStatus", "getAclStatus")) {
-    final String transformedOwner = identityTransformer.transformIdentityForGetRequest(
-            result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),
-            true,
-            userName);
-    final String transformedGroup = identityTransformer.transformIdentityForGetRequest(
-            result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),
-            false,
-            primaryUserGroup);
+      LOG.debug(
+              "getAclStatus filesystem: {} path: {}",
+              client.getFileSystem(),
+              path.toString());
-    final String permissions = result.getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);
-    final String aclSpecString = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL);
+      AbfsRestOperation op = client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path, true));
+      AbfsHttpOperation result = op.getResult();
+      perfInfo.registerResult(result);
-    final List<AclEntry> aclEntries = AclEntry.parseAclSpec(AbfsAclHelper.processAclString(aclSpecString), true);
-    identityTransformer.transformAclEntriesForGetRequest(aclEntries, userName, primaryUserGroup);
-    final FsPermission fsPermission = permissions == null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)
-            : AbfsPermission.valueOf(permissions);
+      final String transformedOwner = identityTransformer.transformIdentityForGetRequest(
+              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),
+              true,
+              userName);
+      final String transformedGroup = identityTransformer.transformIdentityForGetRequest(
+              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),
+              false,
+              primaryUserGroup);
-    final AclStatus.Builder aclStatusBuilder = new AclStatus.Builder();
-    aclStatusBuilder.owner(transformedOwner);
-    aclStatusBuilder.group(transformedGroup);
+      final String permissions = result.getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);
+      final String aclSpecString = op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_ACL);
-    aclStatusBuilder.setPermission(fsPermission);
-    aclStatusBuilder.stickyBit(fsPermission.getStickyBit());
-    aclStatusBuilder.addEntries(aclEntries);
-    return aclStatusBuilder.build();
+      final List<AclEntry> aclEntries = AclEntry.parseAclSpec(AbfsAclHelper.processAclString(aclSpecString), true);
+      identityTransformer.transformAclEntriesForGetRequest(aclEntries, userName, primaryUserGroup);
+      final FsPermission fsPermission = permissions == null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)
+              : AbfsPermission.valueOf(permissions);
+
+      final AclStatus.Builder aclStatusBuilder = new AclStatus.Builder();
+      aclStatusBuilder.owner(transformedOwner);
+      aclStatusBuilder.group(transformedGroup);
+
+      aclStatusBuilder.setPermission(fsPermission);
+      aclStatusBuilder.stickyBit(fsPermission.getStickyBit());
+      aclStatusBuilder.addEntries(aclEntries);
+      perfInfo.registerSuccess(true);
+      return aclStatusBuilder.build();
+    }
-    this.client =  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);
+    this.client =  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider, abfsPerfTracker);
+  private AbfsPerfInfo startTracking(String callerName, String calleeName) {
+    return new AbfsPerfInfo(abfsPerfTracker, callerName, calleeName);
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS34 INS42 INS42 INS21 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS60 INS60 INS60 INS60 INS60 INS60 INS54 INS60 INS60 INS60 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS54 INS42 INS43 INS42 INS43 INS42 INS41 INS7 INS58 MOV8 INS58 INS8 INS58 MOV8 INS58 MOV8 INS58 MOV8 INS58 MOV8 INS58 MOV8 INS58 MOV8 INS58 MOV8 INS58 MOV8 INS83 INS43 INS59 INS39 INS59 INS39 INS59 INS8 INS42 INS83 INS43 INS59 INS39 INS59 INS39 INS59 INS8 INS42 INS58 MOV8 INS83 INS43 INS59 INS39 INS59 INS39 INS59 INS8 INS42 INS58 INS8 INS58 INS8 INS58 INS8 INS58 INS8 INS58 INS8 INS58 INS8 INS58 INS8 INS58 INS8 INS42 INS42 INS14 INS22 INS14 INS43 INS59 INS21 INS21 INS43 INS59 MOV60 MOV54 INS60 MOV21 INS43 INS59 INS21 INS21 INS43 INS59 INS60 INS43 INS59 INS60 INS43 INS59 INS60 INS43 INS59 INS60 INS43 INS59 INS60 INS43 INS59 INS21 INS21 INS43 INS59 INS21 INS21 INS42 INS42 INS32 INS42 INS34 INS42 INS54 INS42 INS42 INS32 INS42 INS34 INS42 INS9 INS54 INS43 INS59 INS21 INS21 INS42 INS42 INS32 INS42 INS34 INS42 INS9 INS54 INS43 INS59 MOV21 MOV60 MOV60 INS60 MOV21 INS43 INS59 MOV21 INS60 MOV21 INS43 INS59 MOV21 MOV21 MOV60 MOV60 MOV60 INS21 MOV60 MOV60 MOV21 INS21 INS54 INS43 INS59 MOV21 MOV21 MOV60 MOV60 MOV60 INS21 MOV60 MOV60 MOV21 INS21 INS54 INS43 INS59 MOV21 MOV60 INS21 MOV60 MOV60 MOV60 MOV70 MOV21 INS21 INS54 INS43 INS59 MOV21 MOV60 INS21 MOV60 MOV60 MOV60 MOV21 MOV21 MOV21 INS21 INS54 INS43 INS59 MOV21 MOV21 MOV60 MOV60 MOV60 INS21 MOV60 MOV60 MOV21 INS21 INS54 INS43 INS59 MOV21 MOV60 MOV60 INS21 MOV60 MOV60 MOV60 MOV60 MOV60 MOV21 MOV60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 MOV41 INS43 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS22 INS58 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS58 MOV8 INS42 INS42 INS58 MOV8 INS42 INS42 INS32 INS8 INS32 INS32 INS42 INS42 INS58 MOV8 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS32 INS58 INS8 INS42 INS42 INS32 INS32 INS32 INS58 INS8 INS42 INS42 INS32 INS32 INS32 INS58 INS8 INS42 INS42 INS32 INS32 INS32 INS58 INS8 INS42 INS42 INS32 INS32 INS32 INS58 INS8 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS52 INS42 INS43 INS59 INS60 INS21 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS43 INS59 INS21 INS21 INS21 INS21 INS25 INS43 INS59 INS21 INS21 INS21 INS21 INS25 INS42 INS45 INS45 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS9 INS43 INS59 INS21 INS21 INS21 INS21 INS25 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS9 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS43 INS59 INS60 MOV21 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS43 INS59 INS60 MOV21 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS43 INS59 INS60 MOV21 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS43 INS59 INS60 MOV21 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS43 INS59 INS60 MOV21 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS37 INS7 INS38 INS8 INS42 INS42 INS32 INS32 INS32 INS37 INS7 INS38 INS8 INS42 MOV8 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS37 INS7 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS83 INS43 INS59 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS83 INS43 INS59 INS42 INS45 INS45 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 MOV27 INS42 INS21 UPD42 MOV42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 MOV27 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS45 UPD42 MOV42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 MOV27 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 UPD42 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 MOV32 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS7 INS42 INS42 INS32 INS42 INS42 MOV27 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 MOV27 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS32 UPD42 MOV42 MOV9 UPD42 UPD42 INS32 INS42 INS9 INS42 INS42 INS32 UPD42 MOV42 MOV9 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 MOV32 INS42 INS42 INS45 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS32 INS42 INS42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL16