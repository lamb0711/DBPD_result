YARN-8060.  Added default readiness check for service components.
            Contributed by Billie Rinaldi

+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.naming.Context;
+import javax.naming.NameNotFoundException;
+import javax.naming.NamingException;
+import javax.naming.directory.Attributes;
+import javax.naming.directory.DirContext;
+import javax.naming.directory.InitialDirContext;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Hashtable;
+  private static final Logger LOG =
+      LoggerFactory.getLogger(ServiceRegistryUtils.class);
+
+  /**
+   * Determine whether a DNS lookup exists for a given name. If a DNS server
+   * address is provided, the lookup will be performed against this DNS
+   * server. This option is provided because it may be desirable to perform
+   * the lookup against Registry DNS directly to avoid caching of negative
+   * responses that may be performed by other DNS servers, thereby allowing the
+   * lookup to succeed sooner.
+   *
+   * @param addr host:port dns address, or null
+   * @param name name to look up
+   * @return true if a lookup succeeds for the specified name
+   */
+  public static boolean registryDNSLookupExists(String addr, String
+      name) {
+    if (addr == null) {
+      try {
+        InetAddress.getByName(name);
+        return true;
+      } catch (UnknownHostException e) {
+        return false;
+      }
+    }
+
+    String dnsURI = String.format("dns://%s", addr);
+    Hashtable<String, Object> env = new Hashtable<>();
+    env.put(Context.INITIAL_CONTEXT_FACTORY,
+        "com.sun.jndi.dns.DnsContextFactory");
+    env.put(Context.PROVIDER_URL, dnsURI);
+
+    try {
+      DirContext ictx = new InitialDirContext(env);
+      Attributes attrs = ictx.getAttributes(name, new String[]{"A"});
+
+      if (attrs.size() > 0) {
+        return true;
+      }
+    } catch (NameNotFoundException e) {
+      // this doesn't need to be logged
+    } catch (NamingException e) {
+      LOG.error("Got exception when performing DNS lookup", e);
+    }
+
+    return false;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS21 INS21 INS54 INS41 INS42 INS42 INS57 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS27 INS8 INS43 INS59 INS74 INS59 INS32 INS32 INS8 INS12 INS12 INS9 INS43 INS42 INS33 INS54 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS45 INS42 INS42 INS40 INS42 INS60 INS60 INS25 INS44 INS8 INS44 INS8 INS42 INS8 INS12 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS74 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS42 INS43 INS42 INS21 INS21 INS41 INS44 INS8 INS43 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS34 INS41 INS42 INS42 INS32 INS32 INS9 INS43 INS42 INS41 INS42 INS43 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS9 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS5 INS4 INS43 INS85 INS45 INS42