HADOOP-12210. Collect network usage on the node. Contributed by Robert Grandl

+  /**
+   * Pattern for parsing /proc/net/dev.
+   */
+  private static final String PROCFS_NETFILE = "/proc/net/dev";
+  private static final Pattern PROCFS_NETFILE_FORMAT =
+      Pattern .compile("^[ \t]*([a-zA-Z]+[0-9]*):" +
+               "[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)" +
+               "[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)" +
+               "[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)" +
+               "[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+).*");
+
+
+  private String procfsNetFile;
+  private long numNetBytesRead = 0L; // aggregated bytes read from network
+  private long numNetBytesWritten = 0L; // aggregated bytes written to network
-        JIFFY_LENGTH_IN_MILLIS);
+         PROCFS_NETFILE, JIFFY_LENGTH_IN_MILLIS);
+   * @param procfsNetFile fake file for /proc/net/dev
+                                       String procfsNetFile,
+    this.procfsNetFile = procfsNetFile;
+  /**
+   * Read /proc/net/dev file, parse and calculate amount
+   * of bytes read and written through the network.
+   */
+  private void readProcNetInfoFile() {
+
+    numNetBytesRead = 0L;
+    numNetBytesWritten = 0L;
+
+    // Read "/proc/net/dev" file
+    BufferedReader in;
+    InputStreamReader fReader;
+    try {
+      fReader = new InputStreamReader(
+          new FileInputStream(procfsNetFile), Charset.forName("UTF-8"));
+      in = new BufferedReader(fReader);
+    } catch (FileNotFoundException f) {
+      return;
+    }
+
+    Matcher mat;
+    try {
+      String str = in.readLine();
+      while (str != null) {
+        mat = PROCFS_NETFILE_FORMAT.matcher(str);
+        if (mat.find()) {
+          assert mat.groupCount() >= 16;
+
+          // ignore loopback interfaces
+          if (mat.group(1).equals("lo")) {
+            str = in.readLine();
+            continue;
+          }
+          numNetBytesRead += Long.parseLong(mat.group(2));
+          numNetBytesWritten += Long.parseLong(mat.group(10));
+        }
+        str = in.readLine();
+      }
+    } catch (IOException io) {
+      LOG.warn("Error reading the stream " + io);
+    } finally {
+      // Close the streams
+      try {
+        fReader.close();
+        try {
+          in.close();
+        } catch (IOException i) {
+          LOG.warn("Error closing the stream " + in);
+        }
+      } catch (IOException i) {
+        LOG.warn("Error closing the stream " + fReader);
+      }
+    }
+  }
+
+  /** {@inheritDoc} */
+  @Override
+  public long getNetworkBytesRead() {
+    readProcNetInfoFile();
+    return numNetBytesRead;
+  }
+
+  /** {@inheritDoc} */
+  @Override
+  public long getNetworkBytesWritten() {
+    readProcNetInfoFile();
+    return numNetBytesWritten;
+  }
+
+    System.out.println("Total network read (bytes) : "
+            + plugin.getNetworkBytesRead());
+    System.out.println("Total network written (bytes) : "
+            + plugin.getNetworkBytesWritten());

INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS44 INS29 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS65 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS34 INS65 INS43 INS42 INS21 INS65 INS21 INS21 INS60 INS60 INS54 INS60 INS54 INS65 INS42 INS21 INS41 INS65 INS42 INS21 INS41 INS21 INS21 INS66 INS42 INS42 INS27 INS42 INS42 INS66 INS42 INS7 INS66 INS66 INS7 INS7 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS8 INS12 INS8 INS65 INS66 INS32 INS42 INS65 INS66 INS32 INS42 INS32 INS32 INS45 INS45 INS45 INS45 INS45 INS22 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS42 INS60 INS61 INS44 INS8 INS54 INS42 INS42 INS40 INS42 INS27 INS40 INS42 INS27 INS52 INS42 INS7 INS7 INS43 INS42 INS41 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS8 INS12 INS45 INS32 INS45 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS21 INS42 INS32 INS21 INS54 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS14 INS32 INS43 INS42 INS42 INS42 INS7 INS32 INS8 INS7 INS42 INS42 INS27 INS32 INS8 INS12 INS43 INS42 INS21 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS6 INS25 INS21 INS21 INS42 INS32 INS45 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS8 INS7 INS7 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS27 INS32 INS34 INS32 INS42 INS45 INS21 INS18 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS45 INS42 INS42 INS42