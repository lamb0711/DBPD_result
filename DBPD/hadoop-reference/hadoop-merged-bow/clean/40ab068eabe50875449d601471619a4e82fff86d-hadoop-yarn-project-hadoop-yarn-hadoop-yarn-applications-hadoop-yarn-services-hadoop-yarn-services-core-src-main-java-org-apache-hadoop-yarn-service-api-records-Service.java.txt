YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He

- * An Application resource has the following attributes.
+ * An Service resource has the following attributes.
-@ApiModel(description = "An Application resource has the following attributes.")
+@ApiModel(description = "An Service resource has the following attributes.")
-public class Application extends BaseResource {
+public class Service extends BaseResource {
-  private ApplicationState state = null;
+  private ServiceState state = null;
-   * A unique application name.
+   * A unique service name.
-  public Application name(String name) {
+  public Service name(String name) {
-  @ApiModelProperty(example = "null", required = true, value = "A unique application name.")
+  @ApiModelProperty(example = "null", required = true, value = "A unique service name.")
-   * A unique application id.
+   * A unique service id.
-  public Application id(String id) {
+  public Service id(String id) {
-  @ApiModelProperty(example = "null", value = "A unique application id.")
+  @ApiModelProperty(example = "null", value = "A unique service id.")
-   * Artifact of single-component applications. Mandatory if components
+   * Artifact of single-component services. Mandatory if components
-  public Application artifact(Artifact artifact) {
+  public Service artifact(Artifact artifact) {
-  @ApiModelProperty(example = "null", value = "Artifact of single-component applications. Mandatory if components attribute is not specified.")
+  @ApiModelProperty(example = "null", value = "Artifact of single-component services. Mandatory if components attribute is not specified.")
-   * Resource of single-component applications or the global default for
-   * multi-component applications. Mandatory if it is a single-component
-   * application and if cpus and memory are not specified at the Application
+   * Resource of single-component services or the global default for
+   * multi-component services. Mandatory if it is a single-component
+   * service and if cpus and memory are not specified at the Service
-  public Application resource(Resource resource) {
+  public Service resource(Resource resource) {
-  @ApiModelProperty(example = "null", value = "Resource of single-component applications or the global default for multi-component applications. Mandatory if it is a single-component application and if cpus and memory are not specified at the Application level.")
+  @ApiModelProperty(example = "null", value = "Resource of single-component services or the global default for multi-component services. Mandatory if it is a single-component service and if cpus and memory are not specified at the Service level.")
-   * The custom launch command of an application component (optional). If not
-   * specified for applications with docker images say, it will default to the
+   * The custom launch command of an service component (optional). If not
+   * specified for services with docker images say, it will default to the
-   * application, you can specify this without the need to have a 'components'
+   * service, you can specify this without the need to have a 'components'
-  public Application launchCommand(String launchCommand) {
+  public Service launchCommand(String launchCommand) {
-  @ApiModelProperty(example = "null", value = "The custom launch command of an application component (optional). If not specified for applications with docker images say, it will default to the default start command of the image. If there is a single component in this application, you can specify this without the need to have a 'components' section.")
+  @ApiModelProperty(example = "null", value = "The custom launch command of an service component (optional). If not specified for services with docker images say, it will default to the default start command of the image. If there is a single component in this service, you can specify this without the need to have a 'components' section.")
-   * The time when the application was created, e.g. 2016-03-16T01:01:49.000Z.
+   * The time when the service was created, e.g. 2016-03-16T01:01:49.000Z.
-  public Application launchTime(Date launchTime) {
+  public Service launchTime(Date launchTime) {
-  @ApiModelProperty(example = "null", value = "The time when the application was created, e.g. 2016-03-16T01:01:49.000Z.")
+  @ApiModelProperty(example = "null", value = "The time when the service was created, e.g. 2016-03-16T01:01:49.000Z.")
-   * Number of containers for each app-component in the application. Each
-   * app-component can further override this app-level global default.
+   * Number of containers for each component in the service. Each
+   * component can further override this service-level global default.
-  public Application numberOfContainers(Long numberOfContainers) {
+  public Service numberOfContainers(Long numberOfContainers) {
-  @ApiModelProperty(example = "null", value = "Number of containers for each app-component in the application. Each app-component can further override this app-level global default.")
+  @ApiModelProperty(example = "null", value = "Number of containers for each component in the service. Each component can further override this service-level global default.")
-   * this application (across all components) at the time of request. Note, a
+   * this service (across all components) at the time of request. Note, a
-  public Application numberOfRunningContainers(Long numberOfRunningContainers) {
+  public Service numberOfRunningContainers(Long numberOfRunningContainers) {
-  @ApiModelProperty(example = "null", value = "In get response this provides the total number of running containers for this application (across all components) at the time of request. Note, a subsequent request can return a different number as and when more containers get allocated until it reaches the total number of containers or if a flex request has been made between the two requests.")
+  @ApiModelProperty(example = "null", value = "In get response this provides the total number of running containers for this service (across all components) at the time of request. Note, a subsequent request can return a different number as and when more containers get allocated until it reaches the total number of containers or if a flex request has been made between the two requests.")
-   * Life time (in seconds) of the application from the time it reaches the
+   * Life time (in seconds) of the service from the time it reaches the
-  public Application lifetime(Long lifetime) {
+  public Service lifetime(Long lifetime) {
-  @ApiModelProperty(example = "null", value = "Life time (in seconds) of the application from the time it reaches the RUNNING_BUT_UNREADY state (after which it is automatically destroyed by YARN). For unlimited lifetime do not set a lifetime value.")
+  @ApiModelProperty(example = "null", value = "Life time (in seconds) of the service from the time it reaches the RUNNING_BUT_UNREADY state (after which it is automatically destroyed by YARN). For unlimited lifetime do not set a lifetime value.")
-   * defaults to the default placement policy of the app owner. The design of
+   * defaults to the default placement policy of the service owner. The design of
-   * how policies in conjunction with labels be exposed to application owners.
+   * how policies in conjunction with labels be exposed to service owners.
-  public Application placementPolicy(PlacementPolicy placementPolicy) {
+  public Service placementPolicy(PlacementPolicy placementPolicy) {
-  @ApiModelProperty(example = "null", value = "Advanced scheduling and placement policies (optional). If not specified, it defaults to the default placement policy of the app owner. The design of placement policies are in the works. It is not very clear at this point, how policies in conjunction with labels be exposed to application owners. This is a placeholder for now. The advanced structure of this attribute will be determined by YARN-4902.")
+  @ApiModelProperty(example = "null", value = "Advanced scheduling and placement policies (optional). If not specified, it defaults to the default placement policy of the service owner. The design of placement policies are in the works. It is not very clear at this point, how policies in conjunction with labels be exposed to service owners. This is a placeholder for now. The advanced structure of this attribute will be determined by YARN-4902.")
-   * Components of an application.
+   * Components of an service.
-  public Application components(List<Component> components) {
+  public Service components(List<Component> components) {
-  @ApiModelProperty(example = "null", value = "Components of an application.")
+  @ApiModelProperty(example = "null", value = "Components of an service.")
-   * Config properties of an application. Configurations provided at the
-   * application/global level are available to all the components. Specific
+   * Config properties of an service. Configurations provided at the
+   * service/global level are available to all the components. Specific
-  public Application configuration(Configuration configuration) {
+  public Service configuration(Configuration configuration) {
-  @ApiModelProperty(example = "null", value = "Config properties of an application. Configurations provided at the application/global level are available to all the components. Specific properties can be overridden at the component level.")
+  @ApiModelProperty(example = "null", value = "Config properties of an service. Configurations provided at the service/global level are available to all the components. Specific properties can be overridden at the component level.")
-   * Containers of a started application. Specifying a value for this attribute
+   * Containers of a started service. Specifying a value for this attribute
-   * in the GET response of a started application.
+   * in the GET response of a started service.
-  public Application containers(List<Container> containers) {
+  public Service containers(List<Container> containers) {
-  @ApiModelProperty(example = "null", value = "Containers of a started application. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started application.")
+  @ApiModelProperty(example = "null", value = "Containers of a started service. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started service.")
-   * State of the application. Specifying a value for this attribute for the
+   * State of the service. Specifying a value for this attribute for the
-   * the GET response of a started application.
+   * the GET response of a started service.
-  public Application state(ApplicationState state) {
+  public Service state(ServiceState state) {
-  @ApiModelProperty(example = "null", value = "State of the application. Specifying a value for this attribute for the POST payload raises a validation error. This attribute is available only in the GET response of a started application.")
+  @ApiModelProperty(example = "null", value = "State of the service. Specifying a value for this attribute for the POST payload raises a validation error. This attribute is available only in the GET response of a started service.")
-  public ApplicationState getState() {
+  public ServiceState getState() {
-  public void setState(ApplicationState state) {
+  public void setState(ServiceState state) {
-   * A blob of key-value pairs of quicklinks to be exported for an application.
+   * A blob of key-value pairs of quicklinks to be exported for an service.
-  public Application quicklinks(Map<String, String> quicklinks) {
+  public Service quicklinks(Map<String, String> quicklinks) {
-  @ApiModelProperty(example = "null", value = "A blob of key-value pairs of quicklinks to be exported for an application.")
+  @ApiModelProperty(example = "null", value = "A blob of key-value pairs of quicklinks to be exported for an service.")
-   * The YARN queue that this application should be submitted to.
+   * The YARN queue that this service should be submitted to.
-  public Application queue(String queue) {
+  public Service queue(String queue) {
-  @ApiModelProperty(example = "null", value = "The YARN queue that this application should be submitted to.")
+  @ApiModelProperty(example = "null", value = "The YARN queue that this service should be submitted to.")
-    Application application = (Application) o;
-    return Objects.equals(this.name, application.name);
+    Service service = (Service) o;
+    return Objects.equals(this.name, service.name);
-    sb.append("class Application {\n");
+    sb.append("class Service {\n");

UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD66 UPD45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD66 UPD45 UPD66 UPD45 UPD66 UPD45 UPD66 UPD66 UPD66 UPD45 UPD66 UPD66 UPD66 UPD45 UPD66 UPD45 UPD66 UPD66 UPD45 UPD66 UPD45 UPD66 UPD45 UPD66 UPD66 UPD45 UPD66 UPD45 UPD66 UPD66 UPD45 UPD66 UPD66 UPD45 UPD66 UPD66 UPD42 UPD45 UPD42 UPD66 UPD45 UPD66 UPD45 UPD43 UPD42 UPD42 UPD40 UPD45 UPD43 UPD42