HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)

+import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
+import java.util.HashSet;
+  private DistCpSync distCpSync;
-  protected SimpleCopyListing(Configuration configuration, Credentials credentials,
+  protected SimpleCopyListing(Configuration configuration,
+                              Credentials credentials,
+  protected SimpleCopyListing(Configuration configuration,
+                              Credentials credentials,
+                              DistCpSync distCpSync) {
+    this(configuration, credentials);
+    this.distCpSync = distCpSync;
+  }
+
-    doBuildListing(getWriter(pathToListingFile), options);
+    if(options.shouldUseDiff()) {
+      doBuildListingWithSnapshotDiff(getWriter(pathToListingFile), options);
+    }else {
+      doBuildListing(getWriter(pathToListingFile), options);
+    }
+
+  /**
+   * Get a path with its scheme and authority.
+   */
+  private Path getPathWithSchemeAndAuthority(Path path) throws IOException {
+    FileSystem fs= path.getFileSystem(getConf());
+    String scheme = path.toUri().getScheme();
+    if (scheme == null) {
+      scheme = fs.getUri().getScheme();
+    }
+
+    String authority = path.toUri().getAuthority();
+    if (authority == null) {
+      authority = fs.getUri().getAuthority();
+    }
+
+    return new Path(scheme, authority, path.toUri().getPath());
+  }
+
+  /**
+   * Write a single file/directory to the sequence file.
+   * @throws IOException
+   */
+  private void addToFileListing(SequenceFile.Writer fileListWriter,
+      Path sourceRoot, Path path, DistCpOptions options) throws IOException {
+    sourceRoot = getPathWithSchemeAndAuthority(sourceRoot);
+    path = getPathWithSchemeAndAuthority(path);
+    path = makeQualified(path);
+
+    FileSystem sourceFS = sourceRoot.getFileSystem(getConf());
+    FileStatus fileStatus = sourceFS.getFileStatus(path);
+    final boolean preserveAcls = options.shouldPreserve(FileAttribute.ACL);
+    final boolean preserveXAttrs = options.shouldPreserve(FileAttribute.XATTR);
+    final boolean preserveRawXAttrs = options.shouldPreserveRawXattrs();
+    CopyListingFileStatus fileCopyListingStatus =
+        DistCpUtils.toCopyListingFileStatus(sourceFS, fileStatus,
+            preserveAcls, preserveXAttrs, preserveRawXAttrs);
+
+    writeToFileListingRoot(fileListWriter, fileCopyListingStatus,
+        sourceRoot, options);
+  }
+
+  /**
+   * Build a copy list based on the snapshot diff report.
+   *
+   * Any file/directory changed or created will be in the list. Deleted
+   * files/directories will not be in the list, since they are handled by
+   * {@link org.apache.hadoop.tools.DistCpSync#sync}. An item can be
+   * created/modified and renamed, in which case, the target path is put
+   * into the list.
+   * @throws IOException
+   */
+  @VisibleForTesting
+  public void doBuildListingWithSnapshotDiff(SequenceFile.Writer fileListWriter,
+      DistCpOptions options) throws IOException {
+    ArrayList<DiffInfo> diffList = distCpSync.prepareDiffList();
+    Path sourceRoot = options.getSourcePaths().get(0);
+    FileSystem sourceFS = sourceRoot.getFileSystem(getConf());
+
+    try {
+      for (DiffInfo diff : diffList) {
+        // add snapshot paths prefix
+        diff.target = new Path(options.getSourcePaths().get(0), diff.target);
+        if (diff.getType() == SnapshotDiffReport.DiffType.MODIFY) {
+          addToFileListing(fileListWriter, sourceRoot, diff.target, options);
+        } else if (diff.getType() == SnapshotDiffReport.DiffType.CREATE) {
+          addToFileListing(fileListWriter, sourceRoot, diff.target, options);
+
+          FileStatus sourceStatus = sourceFS.getFileStatus(diff.target);
+          if (sourceStatus.isDirectory()) {
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Adding source dir for traverse: " +
+                  sourceStatus.getPath());
+            }
+
+            HashSet<String> excludeList =
+                distCpSync.getTraverseExcludeList(diff.source,
+                    options.getSourcePaths().get(0));
+
+            ArrayList<FileStatus> sourceDirs = new ArrayList<>();
+            sourceDirs.add(sourceStatus);
+
+            traverseDirectory(fileListWriter, sourceFS, sourceDirs,
+                sourceRoot, options, excludeList);
+          }
+        }
+      }
+      fileListWriter.close();
+      fileListWriter = null;
+    } finally {
+      IOUtils.cleanup(LOG, fileListWriter);
+    }
+  }
+
-                            sourcePathRoot, options);
+                            sourcePathRoot, options, null);
+    private HashSet<String> excludeList;
-    public FileStatusProcessor(FileSystem fileSystem) {
+    public FileStatusProcessor(FileSystem fileSystem,
+                               HashSet<String> excludeList) {
+      this.excludeList = excludeList;
+    }
+
+    /**
+     * Get FileStatuses for a given path.
+     * Exclude the some renamed FileStatuses since they are already handled by
+     * {@link org.apache.hadoop.tools.DistCpSync#sync}.
+     * @return an array of file status
+     */
+    private FileStatus[] getFileStatus(Path path) throws IOException {
+      FileStatus[] fileStatuses = fileSystem.listStatus(path);
+      if (excludeList != null && excludeList.size() > 0) {
+        ArrayList<FileStatus> fileStatusList = new ArrayList<>();
+        for(FileStatus status : fileStatuses) {
+          if (!excludeList.contains(status.getPath().toUri().getPath())) {
+            fileStatusList.add(status);
+          }
+        }
+        fileStatuses = fileStatusList.toArray(
+                new FileStatus[fileStatusList.size()]);
+      }
+      return fileStatuses;
-        result = new WorkReport<FileStatus[]>(
-            fileSystem.listStatus(parent.getPath()), retry, true);
+        result = new WorkReport<FileStatus[]>(getFileStatus(parent.getPath()),
+                retry, true);
-                                 DistCpOptions options)
+                                 DistCpOptions options,
+                                 HashSet<String> excludeList)
-          new FileStatusProcessor(sourcePathRoot.getFileSystem(getConf())));
+          new FileStatusProcessor(sourcePathRoot.getFileSystem(getConf()),
+              excludeList));

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS23 INS31 INS44 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS21 INS25 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS41 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS54 INS83 INS74 INS59 INS44 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS8 MOV8 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS14 INS66 INS42 INS40 INS42 INS42 INS42 INS7 INS7 INS7 INS43 INS59 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS43 INS59 INS32 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS40 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS43 INS43 INS42 INS74 INS42 INS21 INS65 INS65 INS43 INS85 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS22 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS67 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS70 INS21 INS21 INS21 INS42 INS42 INS43 INS43 INS7 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS5 INS59 INS27 INS8 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS7 INS32 INS42 INS7 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS44 INS42 INS8 INS32 INS7 INS32 INS42 INS42 INS22 INS42 INS67 INS43 INS85 INS42 INS32 INS27 INS27 INS60 INS70 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS25 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS52 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS74 INS59 INS44 INS42 INS8 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS7 INS27 INS8 INS25 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS14 INS32 INS40 INS21 INS27 INS8 INS42 INS42 INS74 INS42 INS38 INS8 INS42 INS42 INS3 INS43 INS32 INS40 INS42 INS42 INS32 INS32 INS40 INS21 INS60 INS25 INS43 INS32 INS21 INS5 INS32 UPD42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS33 INS42 INS42 INS42 INS32 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS25 INS60 INS60 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS8 INS74 INS59 INS74 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS74 INS42 INS42 INS27 INS32 INS42 INS34 INS43 INS45 INS32 INS42 INS42 INS42 INS42 INS42 DEL42