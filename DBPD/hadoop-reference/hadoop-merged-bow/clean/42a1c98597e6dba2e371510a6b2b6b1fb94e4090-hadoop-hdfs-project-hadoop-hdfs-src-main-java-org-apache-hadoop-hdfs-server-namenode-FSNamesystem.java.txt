HDFS-11847. Enhance dfsadmin listOpenFiles command to list files blocking datanode decommissioning.

+import org.apache.hadoop.hdfs.protocol.OpenFilesIterator.OpenFilesType;
+import org.apache.hadoop.hdfs.util.LightWeightHashSet;
+   * TODO: HDFS-12969 - to report open files by type.
+   * @param openFilesTypes
-  BatchedListEntries<OpenFileEntry> listOpenFiles(long prevId)
-      throws IOException {
+  BatchedListEntries<OpenFileEntry> listOpenFiles(long prevId,
+      EnumSet<OpenFilesType> openFilesTypes) throws IOException {
-      batchedListEntries = leaseManager.getUnderConstructionFiles(prevId);
+      if(openFilesTypes.contains(OpenFilesType.ALL_OPEN_FILES)) {
+        batchedListEntries = leaseManager.getUnderConstructionFiles(prevId);
+      } else {
+        if(openFilesTypes.contains(OpenFilesType.BLOCKING_DECOMMISSION)) {
+          batchedListEntries = getFilesBlockingDecom(prevId);
+        } else {
+          throw new IllegalArgumentException("Unknown OpenFileType: "
+              + openFilesTypes);
+        }
+      }
+  public BatchedListEntries<OpenFileEntry> getFilesBlockingDecom(long prevId) {
+    assert hasReadLock();
+    final List<OpenFileEntry> openFileEntries = Lists.newArrayList();
+    LightWeightHashSet<Long> openFileIds = new LightWeightHashSet<>();
+    for (DatanodeDescriptor dataNode :
+        blockManager.getDatanodeManager().getDatanodes()) {
+      for (long ucFileId : dataNode.getLeavingServiceStatus().getOpenFiles()) {
+        INode ucFile = getFSDirectory().getInode(ucFileId);
+        if (ucFile == null || ucFileId <= prevId ||
+            openFileIds.contains(ucFileId)) {
+          // probably got deleted or
+          // part of previous batch or
+          // already part of the current batch
+          continue;
+        }
+        Preconditions.checkState(ucFile instanceof INodeFile);
+        openFileIds.add(ucFileId);
+        INodeFile inodeFile = ucFile.asFile();
+        openFileEntries.add(new OpenFileEntry(
+            inodeFile.getId(), inodeFile.getFullPathName(),
+            inodeFile.getFileUnderConstructionFeature().getClientName(),
+            inodeFile.getFileUnderConstructionFeature().getClientMachine()));
+        if (openFileIds.size() >= this.maxListOpenFilesResponses) {
+          return new BatchedListEntries<>(openFileEntries, true);
+        }
+      }
+    }
+    return new BatchedListEntries<>(openFileEntries, false);
+  }
+

INS26 INS26 INS40 INS40 INS31 INS44 INS83 INS74 INS42 INS44 INS8 INS65 INS74 INS42 INS43 INS43 INS39 INS42 INS6 INS60 INS60 INS70 INS41 INS66 INS42 INS43 INS43 INS8 INS42 INS42 INS32 INS83 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS14 INS42 INS42 MOV21 INS25 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS32 INS42 INS70 INS74 INS42 INS9 INS32 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS44 INS32 INS8 INS43 INS42 INS42 INS40 INS25 INS43 INS39 INS42 INS32 INS42 INS60 INS25 INS21 INS21 INS60 INS21 INS25 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS40 INS21 INS53 INS42 INS42 INS32 INS27 INS32 INS18 INS42 INS42 INS62 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS22 INS41 INS7 INS14 INS32 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS52 INS42 INS14 INS42 INS32 INS43 INS27 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS74 INS42 INS9 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42