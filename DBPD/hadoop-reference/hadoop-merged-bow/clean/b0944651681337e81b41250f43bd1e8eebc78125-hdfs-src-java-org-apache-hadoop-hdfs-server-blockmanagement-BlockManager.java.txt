HDFS-2265. Remove unnecessary BlockTokenSecretManager fields/methods from BlockManager.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1158743 13f79535-47bb-0310-9956-ffa450edef68

+  private final DatanodeManager datanodeManager;
+  private final HeartbeatManager heartbeatManager;
+  private final BlockTokenSecretManager blockTokenSecretManager;
+
-  private boolean isBlockTokenEnabled;
-  private long blockKeyUpdateInterval;
-  private long blockTokenLifetime;
-  private BlockTokenSecretManager blockTokenSecretManager;
-
-  /** get the BlockTokenSecretManager */
-  public BlockTokenSecretManager getBlockTokenSecretManager() {
-    return blockTokenSecretManager;
-  }
-  private final DatanodeManager datanodeManager;
-  private final HeartbeatManager heartbeatManager;
-
-    this.isBlockTokenEnabled = conf.getBoolean(
-        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, 
-        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
-    if (isBlockTokenEnabled) {
-      if (isBlockTokenEnabled) {
-        this.blockKeyUpdateInterval = conf.getLong(
-            DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, 
-            DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT) * 60 * 1000L; // 10 hrs
-        this.blockTokenLifetime = conf.getLong(
-            DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, 
-            DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT) * 60 * 1000L; // 10 hrs
-      }
-   
-      blockTokenSecretManager = new BlockTokenSecretManager(true,
-          blockKeyUpdateInterval, blockTokenLifetime);
-    }
-    LOG.info("isBlockTokenEnabled=" + isBlockTokenEnabled
-        + " blockKeyUpdateInterval=" + blockKeyUpdateInterval / (60 * 1000)
-        + " min(s), blockTokenLifetime=" + blockTokenLifetime / (60 * 1000)
-        + " min(s)");
+
+    blockTokenSecretManager = createBlockTokenSecretManager(conf);
+
+  private static BlockTokenSecretManager createBlockTokenSecretManager(
+      final Configuration conf) throws IOException {
+    final boolean isEnabled = conf.getBoolean(
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, 
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
+    LOG.info(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY + "=" + isEnabled);
+
+    if (!isEnabled) {
+      return null;
+    }
+
+    final long updateMin = conf.getLong(
+        DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, 
+        DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT);
+    final long lifetimeMin = conf.getLong(
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, 
+        DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT);
+    LOG.info(DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY
+        + "=" + updateMin + " min(s), "
+        + DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY
+        + "=" + lifetimeMin + " min(s)");
+    return new BlockTokenSecretManager(true,
+        updateMin*60*1000L, lifetimeMin*60*1000L);
+  }
+
+  /** get the BlockTokenSecretManager */
+  BlockTokenSecretManager getBlockTokenSecretManager() {
+    return blockTokenSecretManager;
+  }
+
+  private boolean isBlockTokenEnabled() {
+    return blockTokenSecretManager != null;
+  }
+
+  /** Should the access keys be updated? */
+  boolean shouldUpdateBlockKey(final long updateTime) throws IOException {
+    return isBlockTokenEnabled()? blockTokenSecretManager.updateKeys(updateTime)
+        : false;
+  }
+
-      if (isBlockTokenEnabled && needBlockToken) {
+      if (isBlockTokenEnabled() && needBlockToken) {
-    return isBlockTokenEnabled? blockTokenSecretManager.exportKeys()
+    return isBlockTokenEnabled()? blockTokenSecretManager.exportKeys()
-    if (isBlockTokenEnabled) {
+    if (isBlockTokenEnabled()) {
-    if (isBlockTokenEnabled && nodeinfo.needKeyUpdate) {
+    if (isBlockTokenEnabled() && nodeinfo.needKeyUpdate) {
-
-  /** Should the access keys be updated? */
-  boolean shouldUpdateBlockKey(final long updateTime) throws IOException {
-    final boolean b = isBlockTokenEnabled && blockKeyUpdateInterval < updateTime;
-    if (b) {
-      blockTokenSecretManager.updateKeys();
-    }
-    return b;
-  }
-

MOV23 MOV31 MOV23 MOV23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS8 MOV29 INS39 INS42 MOV44 MOV43 INS8 MOV21 INS42 INS83 INS43 INS42 INS42 INS60 INS21 INS25 INS60 INS60 INS21 INS41 INS41 INS41 INS42 INS83 INS39 INS59 INS32 INS38 INS8 INS83 INS39 INS59 INS83 INS39 INS59 INS32 INS14 INS27 INS16 INS32 INS32 UPD42 MOV42 MOV32 INS42 INS42 INS27 INS42 INS41 UPD42 MOV42 MOV32 UPD42 MOV42 MOV32 INS42 INS42 INS27 MOV43 INS9 INS27 INS27 UPD42 MOV42 INS33 INS32 INS32 INS9 INS32 INS42 INS32 INS42 INS42 INS40 INS45 INS42 INS33 INS40 INS45 INS42 INS45 INS40 INS45 INS42 INS45 INS42 INS34 INS34 INS42 INS34 INS34 INS42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS42 DEL83 DEL39 DEL59 DEL23 DEL83 DEL39 DEL59 DEL23 DEL83 DEL39 DEL59 DEL23 DEL9 DEL42 DEL42 DEL14 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL34 DEL34 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL34 DEL34 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL34 DEL34 DEL27 DEL36 DEL27 DEL27 DEL45 DEL27 DEL42 DEL34 DEL34 DEL27 DEL36 DEL27 DEL27 DEL45 DEL27 DEL32 DEL21 DEL83 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL27 DEL27 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31