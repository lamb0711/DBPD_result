HDFS-14775. Add Timestamp for longest FSN write/read lock held log. Contributed by Chen Zhang.

-import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
+import org.apache.hadoop.util.Time;
-  private final AtomicReference<ReadLockHeldInfo> longestReadLockHeldInfo =
-      new AtomicReference<>(new ReadLockHeldInfo(0, null));
-
-  /**
-   * The stack trace when longest time of the write lock
-   * was held since the last report.
-   */
-  private volatile String longestWriteLockHeldStackTrace;
+  private final AtomicReference<LockHeldInfo> longestReadLockHeldInfo =
+      new AtomicReference<>(new LockHeldInfo(0, 0, null));
+  private LockHeldInfo longestWriteLockHeldInfo = new LockHeldInfo(0, 0, null);
+    final long currentTimeStampNanos = timer.monotonicNowNanos();
-        timer.monotonicNowNanos() - readLockHeldTimeStampNanos.get();
+        currentTimeStampNanos - readLockHeldTimeStampNanos.get();
+    final long currentTimeMs =
+        TimeUnit.NANOSECONDS.toMillis(currentTimeStampNanos);
-      ReadLockHeldInfo localLockHeldInfo;
+      LockHeldInfo localLockHeldInfo;
-              new ReadLockHeldInfo(readLockIntervalMs,
+              new LockHeldInfo(currentTimeMs, readLockIntervalMs,
-      ReadLockHeldInfo lockHeldInfo = longestReadLockHeldInfo
-          .getAndSet(new ReadLockHeldInfo(0, null));
+      LockHeldInfo lockHeldInfo =
+          longestReadLockHeldInfo.getAndSet(new LockHeldInfo(0, 0, null));
-          "\tNumber of suppressed read-lock reports: {}" +
-          "\n\tLongest read-lock held interval: {}ms via {}",
-          numSuppressedWarnings, lockHeldInfo.getIntervalMs(),
-          lockHeldInfo.getStackTrace());
+          "\tNumber of suppressed read-lock reports: {}"
+              + "\n\tLongest read-lock held at {} for {}ms via {}",
+          numSuppressedWarnings, Time.formatTime(lockHeldInfo.getStartTimeMs()),
+          lockHeldInfo.getIntervalMs(), lockHeldInfo.getStackTrace());
-      SummaryStatistics currentStats =
-          writeLockReportLogger.getCurrentStats("write", 0);
-      double currentMaxTime = currentStats != null ? currentStats.getMax() : 0;
-      if (currentMaxTime < writeLockIntervalMs) {
-        longestWriteLockHeldStackTrace =
-            StringUtils.getStackTrace(Thread.currentThread());
+      if (longestWriteLockHeldInfo.getIntervalMs() < writeLockIntervalMs) {
+        longestWriteLockHeldInfo =
+            new LockHeldInfo(currentTimeMs, writeLockIntervalMs,
+                StringUtils.getStackTrace(Thread.currentThread()));
+    LockHeldInfo lockHeldInfo = longestWriteLockHeldInfo;
+    if (logAction.shouldLog()) {
+      longestWriteLockHeldInfo = new LockHeldInfo(0, 0, null);
+    }
+
-          "\tNumber of suppressed write-lock reports: {}" +
-          "\n\tLongest write-lock held interval: {}ms via {} " +
-          "\n\tTotal suppressed write-lock held time: {}",
-          logAction.getCount() - 1, logAction.getStats(0).getMax(),
-          longestWriteLockHeldStackTrace,
-          logAction.getStats(0).getSum() - writeLockIntervalMs);
+          "\tNumber of suppressed write-lock reports: {}"
+              + "\n\tLongest write-lock held at {} for {}ms via {}"
+              + "\n\tTotal suppressed write-lock held time: {}",
+          logAction.getCount() - 1,
+          Time.formatTime(lockHeldInfo.getStartTimeMs()),
+          lockHeldInfo.getIntervalMs(), lockHeldInfo.getStackTrace(),
+          logAction.getStats(0).getSum() - lockHeldInfo.getIntervalMs());
-  private static class ReadLockHeldInfo {
-    /** Read lock held time. */
+  private static class LockHeldInfo {
+    /** Lock held start time. */
+    private Long startTimeMs;
+    /** Lock held time. */
-    /** The stack trace read lock was held. */
+    /** The stack trace lock was held. */
-    ReadLockHeldInfo(long intervalMs, String stackTrace) {
+    LockHeldInfo(long startTimeMs, long intervalMs, String stackTrace) {
+      this.startTimeMs = startTimeMs;
+    public Long getStartTimeMs() {
+      return this.startTimeMs;
+    }
+
-
-    @Override
-    public int hashCode() {
-      return this.intervalMs.hashCode();
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      return obj instanceof ReadLockHeldInfo && ((ReadLockHeldInfo) obj)
-          .getIntervalMs().compareTo(intervalMs) == 0;
-    }

MOV26 UPD40 MOV31 UPD74 UPD43 UPD42 INS23 UPD43 UPD42 UPD42 INS14 INS60 INS60 INS60 INS25 INS29 INS83 INS43 INS59 UPD42 INS44 INS43 INS42 UPD42 INS43 INS34 INS34 INS33 INS83 INS39 INS59 INS83 INS39 INS59 INS43 INS59 INS32 INS8 INS65 INS42 INS42 INS39 INS42 INS21 UPD42 MOV42 UPD43 INS34 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS66 UPD66 UPD66 INS7 INS22 UPD42 INS42 INS40 INS42 INS42 UPD43 UPD43 INS7 INS22 INS42 INS52 INS42 UPD42 UPD42 INS32 INS32 INS42 INS14 INS32 INS32 INS32 INS52 INS42 UPD45 INS42 INS42 INS32 INS42 INS42 INS43 INS34 INS34 INS33 UPD45 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 UPD43 INS34 INS42 INS42 UPD42 INS14 INS42 UPD42 UPD42 INS42 INS42 UPD43 INS42 UPD42 INS43 INS42 INS42 MOV32 UPD42 INS42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL34 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL16 DEL59 DEL60 DEL42 DEL34 DEL32 DEL42 DEL42 DEL78 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL78 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31