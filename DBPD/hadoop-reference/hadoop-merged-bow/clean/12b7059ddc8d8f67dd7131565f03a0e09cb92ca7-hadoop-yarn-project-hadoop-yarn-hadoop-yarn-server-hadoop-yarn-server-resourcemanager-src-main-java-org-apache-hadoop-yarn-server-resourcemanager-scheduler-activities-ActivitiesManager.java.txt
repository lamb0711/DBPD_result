YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.

+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.util.resource.ResourceCalculator;
+  public static final String DIAGNOSTICS_DETAILS_SEPARATOR = "\n";
+  public static final String EMPTY_DIAGNOSTICS = "";
+  private ThreadLocal<DiagnosticsCollectorManager> diagnosticCollectorManager;
+    diagnosticCollectorManager = ThreadLocal.withInitial(
+        () -> new DiagnosticsCollectorManager(
+            new GenericDiagnosticsCollector()));
+      // enable diagnostic collector
+      diagnosticCollectorManager.get().enable();
+        // enable diagnostic collector
+        diagnosticCollectorManager.get().enable();
-      String type) {
+      String type, String allocationRequestId) {
-          state, diagnostic, type);
+          state, diagnostic, type, nodeId, allocationRequestId);
-      String diagnostic, String type) {
+      String diagnostic, String type, NodeId nodeId,
+      String allocationRequestId) {
-          containerId.toString(), priority, state, diagnostic, type);
+          containerId.toString(), priority, state, diagnostic, type, nodeId,
+          allocationRequestId);
+    // disable diagnostic collector
+    diagnosticCollectorManager.get().disable();
+
+  /**
+   * Class to manage the diagnostics collector.
+   */
+  public static class DiagnosticsCollectorManager {
+    private boolean enabled = false;
+    private DiagnosticsCollector gdc;
+
+    public boolean isEnabled() {
+      return enabled;
+    }
+
+    public void enable() {
+      this.enabled = true;
+    }
+
+    public void disable() {
+      this.enabled = false;
+    }
+
+    public DiagnosticsCollectorManager(DiagnosticsCollector gdc) {
+      this.gdc = gdc;
+    }
+
+    public Optional<DiagnosticsCollector> getOptionalDiagnosticsCollector() {
+      if (enabled) {
+        return Optional.of(gdc);
+      } else {
+        return Optional.empty();
+      }
+    }
+  }
+
+  public Optional<DiagnosticsCollector> getOptionalDiagnosticsCollector() {
+    return diagnosticCollectorManager.get().getOptionalDiagnosticsCollector();
+  }
+
+  public String getResourceDiagnostics(ResourceCalculator rc, Resource required,
+      Resource available) {
+    Optional<DiagnosticsCollector> dcOpt = getOptionalDiagnosticsCollector();
+    if (dcOpt.isPresent()) {
+      dcOpt.get().collectResourceDiagnostics(rc, required, available);
+      return getDiagnostics(dcOpt.get());
+    }
+    return EMPTY_DIAGNOSTICS;
+  }
+
+  public static String getDiagnostics(Optional<DiagnosticsCollector> dcOpt) {
+    if (dcOpt != null && dcOpt.isPresent()) {
+      DiagnosticsCollector dc = dcOpt.get();
+      if (dc != null && dc.getDiagnostics() != null) {
+        return getDiagnostics(dc);
+      }
+    }
+    return EMPTY_DIAGNOSTICS;
+  }
+
+  private static String getDiagnostics(DiagnosticsCollector dc) {
+    StringBuilder sb = new StringBuilder();
+    sb.append(", ").append(dc.getDiagnostics());
+    if (dc.getDetails() != null) {
+      sb.append(DIAGNOSTICS_DETAILS_SEPARATOR).append(dc.getDetails());
+    }
+    return sb.toString();
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS55 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS74 INS59 INS44 INS44 INS44 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS65 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS43 INS43 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS74 INS42 INS25 INS41 INS42 INS43 INS42 INS60 INS21 INS25 INS41 INS42 INS42 INS7 INS42 INS42 INS42 INS32 INS66 INS42 INS9 INS42 INS42 INS41 INS21 INS21 INS43 INS42 INS21 INS43 INS43 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS42 INS43 INS43 INS27 INS8 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS32 INS42 INS32 INS21 INS32 INS42 INS42 INS7 INS7 INS42 INS7 INS42 INS42 INS42 INS8 INS8 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS41 INS42 INS42 INS27 INS32 INS60 INS25 INS42 INS42 INS14 INS32 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS86 INS32 INS42 INS42 INS22 INS9 INS22 INS9 INS22 INS42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS33 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS14 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS41 INS42 INS32 INS42 INS32 INS43 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42