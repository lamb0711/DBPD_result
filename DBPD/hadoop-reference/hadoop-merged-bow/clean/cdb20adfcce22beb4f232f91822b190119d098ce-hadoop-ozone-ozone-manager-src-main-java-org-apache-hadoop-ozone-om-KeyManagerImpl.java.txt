HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)


+import java.util.BitSet;
+import com.google.protobuf.ByteString;
-import org.apache.hadoop.fs.CommonConfigurationKeys;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclRights;
-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer;
+import org.apache.hadoop.ozone.security.acl.RequestContext;
+import org.apache.hadoop.ozone.web.utils.OzoneUtils;
+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH;
+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.DIRECTORY_NOT_FOUND;
+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.FILE_NOT_FOUND;
+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INTERNAL_ERROR;
+import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_KMS_PROVIDER;
-          List<OzoneAclRights> rights =
-              new ArrayList<>(a.getRightsList());
-          for (IAccessAuthorizer.ACLType aclType : acl.getAclList()) {
-            rights.add(OzoneAclRights.valueOf(aclType.name()));
-          }
+          BitSet currentAcls = BitSet.valueOf(a.getRights().toByteArray());
+          currentAcls.or(acl.getAclBitSet());
+
-              .addAllRights(rights)
+              .setRights(ByteString.copyFrom(currentAcls.toByteArray()))
-            List<OzoneAclRights> rights =
-                new ArrayList<>(a.getRightsList());
-            for (IAccessAuthorizer.ACLType aclType : acl.getAclList()) {
-              rights.remove(OzoneAclRights.valueOf(aclType.name()));
-            }
+            BitSet currentAcls = BitSet.valueOf(a.getRights().toByteArray());
+            acl.getAclBitSet().xor(currentAcls);
+            currentAcls.and(acl.getAclBitSet());
-                .addAllRights(rights)
+                .setRights(ByteString.copyFrom(currentAcls.toByteArray()))
+   * Check access for given ozoneObject.
+   *
+   * @param ozObject object for which access needs to be checked.
+   * @param context Context object encapsulating all user related information.
+   * @return true if user has access else false.
+   */
+  @Override
+  public boolean checkAccess(OzoneObj ozObject, RequestContext context)
+      throws OMException {
+    Objects.requireNonNull(ozObject);
+    Objects.requireNonNull(context);
+    Objects.requireNonNull(context.getClientUgi());
+
+    String volume = ozObject.getVolumeName();
+    String bucket = ozObject.getBucketName();
+    String keyName = ozObject.getKeyName();
+
+    metadataManager.getLock().acquireLock(BUCKET_LOCK, volume, bucket);
+    try {
+      validateBucket(volume, bucket);
+      String objectKey = metadataManager.getOzoneKey(volume, bucket, keyName);
+      OmKeyInfo keyInfo = metadataManager.getKeyTable().get(objectKey);
+      if (keyInfo == null) {
+        objectKey = OzoneFSUtils.addTrailingSlashIfNeeded(objectKey);
+        keyInfo = metadataManager.getKeyTable().get(objectKey);
+        
+        if(keyInfo == null) {
+          keyInfo = metadataManager.getOpenKeyTable().get(objectKey);
+          if (keyInfo == null) {
+            throw new OMException("Key not found, checkAccess failed. Key:" +
+                objectKey, KEY_NOT_FOUND);
+          }
+        }
+      }
+      boolean hasAccess = OzoneUtils.checkAclRight(keyInfo.getAcls(), context);
+      LOG.debug("user:{} has access rights for key:{} :{} ",
+          context.getClientUgi(), ozObject.getKeyName(), hasAccess);
+      return hasAccess;
+    } catch (IOException ex) {
+      if(ex instanceof OMException) {
+        throw (OMException) ex;
+      }
+      LOG.error("CheckAccess operation failed for key:{}/{}/{}", volume,
+          bucket, keyName, ex);
+      throw new OMException("Check access operation failed for " +
+          "key:" + keyName, ex, INTERNAL_ERROR);
+    } finally {
+      metadataManager.getLock().releaseLock(BUCKET_LOCK, volume, bucket);
+    }
+  }
+
+  /**
-          ResultCodes.FILE_NOT_FOUND);
+          FILE_NOT_FOUND);
-        if (ex.getResult() != ResultCodes.FILE_NOT_FOUND) {
+        if (ex.getResult() != FILE_NOT_FOUND) {
-        if (ex.getResult() != ResultCodes.FILE_NOT_FOUND) {
+        if (ex.getResult() != FILE_NOT_FOUND) {
-        } else if (ex.getResult() == ResultCodes.FILE_NOT_FOUND) {
+        } else if (ex.getResult() == FILE_NOT_FOUND) {
-                ex.getCause(), ResultCodes.DIRECTORY_NOT_FOUND);
+                ex.getCause(), DIRECTORY_NOT_FOUND);
-            CommonConfigurationKeys.HADOOP_SECURITY_KEY_PROVIDER_PATH,
-            OMException.ResultCodes.INVALID_KMS_PROVIDER);
+            HADOOP_SECURITY_KEY_PROVIDER_PATH,
+            INVALID_KMS_PROVIDER);

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 UPD40 INS40 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS60 INS60 INS60 INS21 INS54 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS21 INS60 INS60 INS25 INS60 INS21 INS41 INS44 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS39 INS59 INS32 INS42 INS43 INS42 INS25 INS21 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS25 INS42 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS62 INS8 INS32 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS7 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 MOV25 MOV21 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS11 INS42 INS45 INS45 INS42 UPD27 MOV8 INS25 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS27 INS8 INS43 INS42 INS42 INS42 UPD27 MOV27 MOV8 INS42 UPD42 MOV42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS43 INS32 INS32 INS32 INS42 INS42 INS14 INS32 INS42 UPD42 INS32 UPD42 MOV42 UPD42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS43 INS27 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS45 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL32 DEL14 DEL42 DEL42 DEL32 DEL32 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL32 DEL14 DEL40 DEL43 DEL42 DEL44 DEL32 DEL32 DEL32 DEL21 DEL8 DEL70 DEL40 DEL40 DEL40 DEL40 DEL40 DEL25 DEL40 DEL40