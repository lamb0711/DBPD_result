YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)

+import java.util.Collections;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+  private ReentrantReadWriteLock sortedNodesLock = new ReentrantReadWriteLock();
+  private ReentrantReadWriteLock clusterNodesLock =
+      new ReentrantReadWriteLock();
-      synchronized (sortedNodes) {
+      ReentrantReadWriteLock.WriteLock writeLock = sortedNodesLock.writeLock();
+      writeLock.lock();
+      try {
+      } finally {
+        writeLock.unlock();
-    synchronized (this.clusterNodes) {
-      if (this.clusterNodes.containsKey(removedRMNode.getNodeID())) {
-        this.clusterNodes.remove(removedRMNode.getNodeID());
+    ReentrantReadWriteLock.WriteLock writeLock = clusterNodesLock.writeLock();
+    writeLock.lock();
+    ClusterNode node;
+    try {
+      node = this.clusterNodes.remove(removedRMNode.getNodeID());
+    } finally {
+      writeLock.unlock();
+    }
+    if (LOG.isDebugEnabled()) {
+      if (node != null) {
-    synchronized (this.clusterNodes) {
+    ReentrantReadWriteLock.WriteLock writeLock = clusterNodesLock.writeLock();
+    writeLock.lock();
+    try {
+    } finally {
+      writeLock.unlock();
-    synchronized (this.sortedNodes) {
-      return ((k < this.sortedNodes.size()) && (k >= 0)) ?
+    ReentrantReadWriteLock.ReadLock readLock = sortedNodesLock.readLock();
+    readLock.lock();
+    try {
+      List<NodeId> retVal = ((k < this.sortedNodes.size()) && (k >= 0)) ?
+      return Collections.unmodifiableList(retVal);
+    } finally {
+      readLock.unlock();
-    synchronized (this.clusterNodes) {
+    ReentrantReadWriteLock.ReadLock readLock = clusterNodesLock.readLock();
+    readLock.lock();
+    try {
+    } finally {
+      readLock.unlock();

INS26 INS26 INS40 INS40 INS23 INS23 INS83 INS43 INS59 INS83 INS43 INS59 INS74 INS42 INS42 INS14 INS42 INS42 INS14 INS60 INS21 INS60 INS54 INS25 INS60 INS21 INS54 INS43 INS43 INS60 INS21 INS54 INS60 INS21 INS54 INS43 INS43 INS43 INS59 INS32 INS43 INS59 INS8 INS8 INS32 MOV8 INS43 INS59 INS32 MOV8 INS8 INS42 INS42 INS43 INS59 INS32 MOV8 INS8 INS43 INS59 INS32 MOV8 INS8 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 MOV21 INS21 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS21 INS40 INS42 INS32 INS42 INS42 INS60 INS21 INS40 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS7 INS32 INS27 INS42 INS42 INS32 INS42 INS42 MOV74 INS59 INS32 INS32 INS42 INS42 INS32 INS60 INS21 INS54 INS42 MOV32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 MOV16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 MOV8 INS8 INS40 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 DEL42 DEL51 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL52 DEL42 DEL22 DEL51 DEL52 DEL42 DEL22 DEL51 DEL52 DEL42 DEL22 DEL51 DEL52 DEL42 DEL22 DEL51