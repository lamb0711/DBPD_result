YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.security.token.delegation.DelegationKey;
+import org.apache.hadoop.util.ExitUtil;
+import org.apache.hadoop.yarn.server.resourcemanager.RMContext;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore.RMState;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.Recoverable;
+
+import com.google.common.annotations.VisibleForTesting;
-public class RMDelegationTokenSecretManager
-    extends AbstractDelegationTokenSecretManager<RMDelegationTokenIdentifier> {
+public class RMDelegationTokenSecretManager extends
+    AbstractDelegationTokenSecretManager<RMDelegationTokenIdentifier> implements
+    Recoverable {
+  private static final Log LOG = LogFactory
+      .getLog(RMDelegationTokenSecretManager.class);
+
+  protected final RMContext rmContext;
-                                      long delegationTokenRemoverScanInterval) {
+                                      long delegationTokenRemoverScanInterval,
+                                      RMContext rmContext) {
+    this.rmContext = rmContext;
+
+  @Override
+  protected void storeNewMasterKey(DelegationKey newKey) {
+    try {
+      LOG.info("storing master key with keyID " + newKey.getKeyId());
+      rmContext.getStateStore().storeRMDTMasterKey(newKey);
+    } catch (Exception e) {
+      LOG.error("Error in storing master key with KeyID: " + newKey.getKeyId());
+      ExitUtil.terminate(1, e);
+    }
+  }
+
+  @Override
+  protected void removeStoredMasterKey(DelegationKey key) {
+    try {
+      LOG.info("removing master key with keyID " + key.getKeyId());
+      rmContext.getStateStore().removeRMDTMasterKey(key);
+    } catch (Exception e) {
+      LOG.error("Error in removing master key with KeyID: " + key.getKeyId());
+      ExitUtil.terminate(1, e);
+    }
+  }
+
+  @Override
+  protected void storeNewToken(RMDelegationTokenIdentifier identifier,
+      long renewDate) {
+    try {
+      LOG.info("storing RMDelegation token with sequence number: "
+          + identifier.getSequenceNumber());
+      rmContext.getStateStore().storeRMDelegationTokenAndSequenceNumber(
+        identifier, renewDate, identifier.getSequenceNumber());
+    } catch (Exception e) {
+      LOG.error("Error in storing RMDelegationToken with sequence number: "
+          + identifier.getSequenceNumber());
+      ExitUtil.terminate(1, e);
+    }
+  }
+
+  @Override
+  protected void updateStoredToken(RMDelegationTokenIdentifier id,
+      long renewDate) {
+    try {
+      LOG.info("updating RMDelegation token with sequence number: "
+          + id.getSequenceNumber());
+      rmContext.getStateStore().removeRMDelegationToken(id,
+        delegationTokenSequenceNumber);
+      rmContext.getStateStore().storeRMDelegationTokenAndSequenceNumber(id,
+        renewDate, id.getSequenceNumber());
+    } catch (Exception e) {
+      LOG.error("Error in updating persisted RMDelegationToken with sequence number: "
+            + id.getSequenceNumber());
+      ExitUtil.terminate(1, e);
+    }
+  }
+
+  @Override
+  protected void removeStoredToken(RMDelegationTokenIdentifier ident)
+      throws IOException {
+    try {
+      LOG.info("removing RMDelegation token with sequence number: "
+          + ident.getSequenceNumber());
+      rmContext.getStateStore().removeRMDelegationToken(ident,
+        delegationTokenSequenceNumber);
+    } catch (Exception e) {
+      LOG.error("Error in removing RMDelegationToken with sequence number: "
+          + ident.getSequenceNumber());
+      ExitUtil.terminate(1, e);
+    }
+  }
+
+  @Private
+  @VisibleForTesting
+  public synchronized Set<DelegationKey> getAllMasterKeys() {
+    HashSet<DelegationKey> keySet = new HashSet<DelegationKey>();
+    keySet.addAll(allKeys.values());
+    return keySet;
+  }
+
+  @Private
+  @VisibleForTesting
+  public synchronized Map<RMDelegationTokenIdentifier, Long> getAllTokens() {
+    Map<RMDelegationTokenIdentifier, Long> allTokens =
+        new HashMap<RMDelegationTokenIdentifier, Long>();
+
+    for (Map.Entry<RMDelegationTokenIdentifier,
+        DelegationTokenInformation> entry : currentTokens.entrySet()) {
+      allTokens.put(entry.getKey(), entry.getValue().getRenewDate());
+    }
+    return allTokens;
+  }
+
+  @Private
+  @VisibleForTesting
+  public int getLatestDTSequenceNumber() {
+    return delegationTokenSequenceNumber;
+  }
+
+  @Override
+  public void recover(RMState rmState) throws Exception {
+
+    LOG.info("recovering RMDelegationTokenSecretManager.");
+    // recover RMDTMasterKeys
+    for (DelegationKey dtKey : rmState.getRMDTSecretManagerState()
+      .getMasterKeyState()) {
+      addKey(dtKey);
+    }
+
+    // recover RMDelegationTokens
+    Map<RMDelegationTokenIdentifier, Long> rmDelegationTokens =
+        rmState.getRMDTSecretManagerState().getTokenState();
+    this.delegationTokenSequenceNumber =
+        rmState.getRMDTSecretManagerState().getDTSequenceNumber();
+    for (Map.Entry<RMDelegationTokenIdentifier, Long> entry : rmDelegationTokens
+      .entrySet()) {
+      addPersistedDelegationToken(entry.getKey(), entry.getValue());
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS78 INS83 INS83 INS74 INS42 INS8 INS78 INS78 INS83 INS83 INS74 INS42 INS8 INS78 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS54 INS42 INS43 INS42 INS54 INS42 INS43 INS42 INS39 INS42 INS54 INS42 INS43 INS42 INS39 INS42 INS54 INS42 INS43 INS42 INS42 INS54 INS42 INS42 INS43 INS43 INS60 INS21 INS41 INS42 INS42 INS43 INS43 INS43 INS60 INS70 INS41 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS21 INS70 INS60 INS21 INS70 INS42 INS42 INS57 INS42 INS7 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS42 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS32 INS44 INS32 INS8 INS74 INS59 INS7 INS44 INS32 INS8 INS43 INS22 INS42 INS21 INS21 INS44 INS8 INS21 INS21 INS44 INS8 INS21 INS21 INS44 INS8 INS21 INS21 INS21 INS44 INS8 INS21 INS21 INS44 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS45 INS43 INS42 INS32 INS42 INS21 INS43 INS43 INS43 INS42 INS32 INS22 INS32 INS74 INS42 INS42 INS42 INS21 INS42 INS52 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS32 INS32 INS43 INS42 INS21 INS21 INS32 INS32 INS43 INS42 INS21 INS21 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS32 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS32 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS43 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42