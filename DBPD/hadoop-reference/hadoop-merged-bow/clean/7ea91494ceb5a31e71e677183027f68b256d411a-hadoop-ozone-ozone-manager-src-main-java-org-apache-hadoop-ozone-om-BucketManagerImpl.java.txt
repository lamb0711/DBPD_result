HDDS-1041. Support TDE(Transparent Data Encryption) for Ozone.
Contributed by Xiaoyu Yao.

+import org.apache.hadoop.crypto.CipherSuite;
+import org.apache.hadoop.crypto.CryptoProtocolVersion;
+import org.apache.hadoop.crypto.key.KeyProvider;
+import org.apache.hadoop.crypto.key.KeyProviderCryptoExtension;
+import org.apache.hadoop.fs.CommonConfigurationKeys;
+import org.apache.hadoop.ozone.om.helpers.BucketEncryptionKeyInfo;
+  private final KeyProviderCryptoExtension kmsProvider;
+    this(metadataManager, null);
+  }
+
+  public BucketManagerImpl(OMMetadataManager metadataManager,
+                           KeyProviderCryptoExtension kmsProvider) {
+    this.kmsProvider = kmsProvider;
+  }
+
+  KeyProviderCryptoExtension getKMSProvider() {
+    return kmsProvider;
-
-      OmBucketInfo omBucketInfo = OmBucketInfo.newBuilder()
+      BucketEncryptionKeyInfo bek = bucketInfo.getEncryptionKeyInfo();
+      BucketEncryptionKeyInfo.Builder bekb = null;
+      if (bek != null) {
+        if (kmsProvider == null) {
+          throw new OMException("Invalid KMS provider, check configuration " +
+              CommonConfigurationKeys.HADOOP_SECURITY_KEY_PROVIDER_PATH,
+              OMException.ResultCodes.INVALID_KMS_PROVIDER);
+        }
+        if (bek.getKeyName() == null) {
+          throw new OMException("Bucket encryption key needed.", OMException
+              .ResultCodes.BUCKET_ENCRYPTION_KEY_NOT_FOUND);
+        }
+        // Talk to KMS to retrieve the bucket encryption key info.
+        KeyProvider.Metadata metadata = getKMSProvider().getMetadata(
+            bek.getKeyName());
+        if (metadata == null) {
+          throw new OMException("Bucket encryption key " + bek.getKeyName()
+              + " doesn't exist.",
+              OMException.ResultCodes.BUCKET_ENCRYPTION_KEY_NOT_FOUND);
+        }
+        // If the provider supports pool for EDEKs, this will fill in the pool
+        kmsProvider.warmUpEncryptedKeys(bek.getKeyName());
+        bekb = new BucketEncryptionKeyInfo.Builder()
+            .setKeyName(bek.getKeyName())
+            .setVersion(CryptoProtocolVersion.ENCRYPTION_ZONES)
+            .setSuite(CipherSuite.convert(metadata.getCipher()));
+      }
+      OmBucketInfo.Builder omBucketInfoBuilder = OmBucketInfo.newBuilder()
-          .addAllMetadata(bucketInfo.getMetadata())
-          .build();
-      metadataManager.getBucketTable().put(bucketKey,
-          omBucketInfo);
+          .addAllMetadata(bucketInfo.getMetadata());
+      if (bekb != null) {
+        omBucketInfoBuilder.setBucketEncryptionKey(bekb.build());
+      }
+      metadataManager.getBucketTable().put(bucketKey,
+          omBucketInfoBuilder.build());

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS8 INS83 INS42 INS44 INS44 MOV8 INS43 INS42 INS8 INS42 INS42 INS17 INS43 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS33 INS42 INS42 INS7 INS42 INS22 INS42 INS60 INS60 INS25 INS25 INS52 INS42 INS43 INS59 INS43 INS59 INS27 INS8 UPD43 INS27 INS8 INS42 INS42 INS32 INS40 INS42 INS33 INS42 INS33 INS25 INS25 INS60 INS25 INS21 INS21 INS40 UPD42 MOV32 INS42 INS33 INS21 INS32 INS42 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS7 INS32 UPD42 MOV42 INS42 INS42 INS33 INS53 INS32 INS33 INS53 INS40 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS14 INS32 INS42 INS32 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS27 INS40 INS43 INS45 INS40 INS42 INS42 INS42 INS43 INS27 INS40 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS45 INS40 INS42 INS42 INS45 INS32 INS45 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS40 DEL42 DEL42 DEL32