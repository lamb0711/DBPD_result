HDFS-12775. [READ] Fix reporting of Provided volumes

+import java.util.concurrent.atomic.AtomicLong;
+  /**
+   * Class to keep track of the capacity usage statistics for provided volumes.
+   */
+  public static class ProvidedVolumeDF {
+
+    private AtomicLong used = new AtomicLong();
+
+    public long getSpaceUsed() {
+      return used.get();
+    }
+
+    public void decDfsUsed(long value) {
+      used.addAndGet(-value);
+    }
+
+    public void incDfsUsed(long value) {
+      used.addAndGet(value);
+    }
+
+    public long getCapacity() {
+      return getSpaceUsed();
+    }
+  }
+
+    private ProvidedVolumeDF df;
+    private AtomicLong numOfBlocks = new AtomicLong();
+      this.df = new ProvidedVolumeDF();
+            incrNumBlocks();
+            incDfsUsed(region.getBlock().getNumBytes());
+    private void incrNumBlocks() {
+      numOfBlocks.incrementAndGet();
+    }
+
+
+    public long getNumOfBlocks() {
+      return numOfBlocks.get();
+    }
+
+    long getDfsUsed() throws IOException {
+      return df.getSpaceUsed();
+    }
+
+    void incDfsUsed(long value) {
+      df.incDfsUsed(value);
+    }
-    Class<? extends ProvidedVolumeDF> dfClass =
-        conf.getClass(DFSConfigKeys.DFS_PROVIDER_DF_CLASS,
-            DefaultProvidedVolumeDF.class, ProvidedVolumeDF.class);
-    df = ReflectionUtils.newInstance(dfClass, conf);
+    df = new ProvidedVolumeDF();
-    if (configuredCapacity < 0) {
-      return df.getCapacity();
+    try {
+      // default to whatever is the space used!
+      return getDfsUsed();
+    } catch (IOException e) {
+      LOG.warn("Exception when trying to get capacity of ProvidedVolume: {}",
+          e);
-    return configuredCapacity;
+    return 0L;
-    return df.getSpaceUsed();
+    long dfsUsed = 0;
+    synchronized(getDataset()) {
+      for(ProvidedBlockPoolSlice s : bpSlices.values()) {
+        dfsUsed += s.getDfsUsed();
+      }
+    }
+    return dfsUsed;
-    if (bpSlices.containsKey(bpid)) {
-      return df.getBlockPoolUsed(bpid);
-    } else {
-      throw new IOException("block pool " + bpid + " is not found");
-    }
+    return getProvidedBlockPoolSlice(bpid).getDfsUsed();
-    return df.getAvailable();
+    long remaining = getCapacity() - getDfsUsed();
+    // do not report less than 0 remaining space for PROVIDED storage
+    // to prevent marking it as over capacity on NN
+    if (remaining < 0L) {
+      LOG.warn("Volume {} has less than 0 available space", this);
+      return 0L;
+    }
+    return remaining;
-    return df.getSpaceUsed();
+    return 0L;
+  long getNumBlocks() {
+    long numBlocks = 0;
+    for (ProvidedBlockPoolSlice s : bpSlices.values()) {
+      numBlocks += s.getNumOfBlocks();
+    }
+    return numBlocks;
+  }
+
+  @Override
+  void incDfsUsedAndNumBlocks(String bpid, long value) {
+    throw new UnsupportedOperationException(
+        "ProvidedVolume does not yet support writes");
+  }
+
+  @Override

INS26 MOV31 INS40 INS55 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS23 INS31 INS31 INS31 INS31 INS23 INS23 INS31 INS31 INS31 INS31 MOV78 INS42 INS8 MOV78 INS83 UPD42 MOV43 MOV78 INS39 INS42 MOV44 MOV43 INS8 MOV78 MOV43 INS8 MOV78 INS39 INS42 MOV43 INS8 INS78 UPD42 INS8 INS78 INS39 INS42 INS44 INS44 INS8 INS65 INS83 INS43 INS59 INS83 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS39 INS42 INS43 MOV8 INS39 INS42 INS44 INS8 INS54 INS41 INS60 INS51 INS41 INS41 INS60 INS25 INS41 INS41 INS42 INS60 INS70 INS41 INS42 INS43 INS42 INS39 INS42 INS53 INS66 INS42 INS42 INS14 MOV41 INS39 INS42 INS21 INS39 INS42 INS21 MOV41 INS42 INS42 INS42 INS42 INS14 INS21 INS21 INS41 INS42 INS39 INS42 INS21 INS8 INS12 INS34 INS39 INS59 INS32 INS8 INS42 INS32 INS39 INS59 INS27 INS8 INS42 INS34 INS39 INS59 INS44 INS32 INS8 INS42 INS42 INS14 INS43 INS32 INS32 INS32 INS43 INS7 INS32 INS32 INS32 INS14 INS41 INS44 INS8 INS42 INS34 INS42 INS70 INS32 INS42 INS42 INS27 INS42 INS34 INS21 INS41 INS42 INS34 INS43 INS42 INS42 INS42 INS21 INS43 INS45 INS42 UPD42 UPD42 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS22 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 MOV43 INS42 INS21 INS44 INS32 INS8 INS42 INS42 INS32 INS32 INS32 INS34 INS42 INS7 INS42 INS42 INS52 INS42 MOV43 INS42 INS32 INS43 INS42 MOV42 UPD42 MOV42 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS52 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL57 DEL57 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL34 DEL27 DEL8 DEL25 DEL8 DEL31 DEL42 DEL32 DEL41 DEL8 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL41 DEL8