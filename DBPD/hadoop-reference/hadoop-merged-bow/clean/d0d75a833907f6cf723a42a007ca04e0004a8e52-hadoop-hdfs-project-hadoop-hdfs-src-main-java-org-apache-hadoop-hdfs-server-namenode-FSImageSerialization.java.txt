HDFS-7827. Erasure Coding: support striped blocks in non-protobuf fsimage. Contributed by Hui Zheng.

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStripedUnderConstruction;
+    final boolean isStriped = NameNodeLayoutVersion.supports(
+        NameNodeLayoutVersion.Feature.ERASURE_CODING, imgVersion)
+        && (in.readBoolean());
-    BlockInfoContiguous[] blocks = new BlockInfoContiguous[numBlocks];
-    Block blk = new Block();
-    int i = 0;
-    for (; i < numBlocks-1; i++) {
-      blk.readFields(in);
-      blocks[i] = new BlockInfoContiguous(blk, blockReplication);
+
+    final BlockInfoContiguous[] blocksContiguous;
+    BlockInfoStriped[] blocksStriped = null;
+    if (isStriped) {
+      blocksContiguous = new BlockInfoContiguous[0];
+      blocksStriped = new BlockInfoStriped[numBlocks];
+      int i = 0;
+      for (; i < numBlocks - 1; i++) {
+        short dataBlockNum = in.readShort();
+        short parityBlockNum = in.readShort();
+        blocksStriped[i] = new BlockInfoStriped(new Block(), dataBlockNum,
+            parityBlockNum);
+        blocksStriped[i].readFields(in);
+      }
+      if (numBlocks > 0) {
+        short dataBlockNum = in.readShort();
+        short parityBlockNum = in.readShort();
+        blocksStriped[i] = new BlockInfoStripedUnderConstruction(new Block(),
+            dataBlockNum, parityBlockNum, BlockUCState.UNDER_CONSTRUCTION, null);
+        blocksStriped[i].readFields(in);
+      }
+    } else {
+      blocksContiguous = new BlockInfoContiguous[numBlocks];
+      Block blk = new Block();
+      int i = 0;
+      for (; i < numBlocks-1; i++) {
+        blk.readFields(in);
+        blocksContiguous[i] = new BlockInfoContiguous(blk, blockReplication);
+      }
+      // last block is UNDER_CONSTRUCTION
+      if(numBlocks > 0) {
+        blk.readFields(in);
+        blocksContiguous[i] = new BlockInfoContiguousUnderConstruction(
+                blk, blockReplication, BlockUCState.UNDER_CONSTRUCTION, null);
+      }
-    // last block is UNDER_CONSTRUCTION
-    if(numBlocks > 0) {
-      blk.readFields(in);
-      blocks[i] = new BlockInfoContiguousUnderConstruction(
-        blk, blockReplication, BlockUCState.UNDER_CONSTRUCTION, null);
-    }
+
-    INodeFile file = new INodeFile(inodeId, name, perm, modificationTime,
-        modificationTime, blocks, blockReplication, preferredBlockSize);
+    INodeFile file;
+    if (isStriped) {
+      file = new INodeFile(inodeId, name, perm, modificationTime,
+          modificationTime, blocksContiguous, (short) 0, preferredBlockSize);
+      file.addStripedBlocksFeature();
+      for (int i = 0; i < numBlocks; i++) {
+        file.getStripedBlocksFeature().addBlock(blocksStriped[i]);
+      }
+    } else {
+      file = new INodeFile(inodeId, name, perm, modificationTime,
+          modificationTime, blocksContiguous, blockReplication,
+          preferredBlockSize);
+    }
-
+    // whether the file has striped blocks
+    out.writeBoolean(cons.isWithStripedBlocks());
-   * @param node The node to write
+   * @param file The node to write
-   * @param writeBlock Whether to write block information
+   * @param writeUnderConstruction Whether to write block information
-
+    // whether the file has striped blocks
+    out.writeBoolean(file.isWithStripedBlocks());

INS26 INS26 INS40 INS40 INS60 INS60 INS25 INS60 INS25 INS21 INS21 INS83 INS39 INS59 INS83 INS5 INS5 INS59 INS42 INS8 INS8 MOV43 INS59 INS42 INS8 INS8 INS32 UPD42 UPD42 INS32 INS42 INS27 INS43 INS85 UPD42 INS43 INS85 INS42 INS33 INS21 INS21 INS60 INS24 INS25 INS21 MOV60 MOV60 MOV24 MOV25 MOV42 INS21 INS21 INS24 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS36 INS42 INS42 INS7 INS7 INS39 INS59 INS27 INS37 INS8 INS27 INS8 INS7 INS7 INS32 INS58 INS27 INS37 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS3 INS42 INS3 INS42 INS34 INS42 INS27 INS42 INS60 INS60 INS21 INS21 INS42 INS34 INS60 INS60 INS21 INS21 INS42 MOV3 INS42 INS14 INS42 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS14 INS42 INS42 MOV5 INS34 INS5 INS42 INS42 INS34 INS39 INS59 INS39 INS59 INS7 INS32 INS39 INS59 INS39 INS59 INS7 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS34 INS32 INS43 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 INS43 INS85 INS42 INS32 INS42 INS32 INS2 INS14 INS2 INS42 INS42 INS42 INS32 INS42 INS32 INS2 INS14 INS2 INS42 INS42 INS39 INS34 INS32 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS40 INS33 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 DEL14 DEL59 DEL60