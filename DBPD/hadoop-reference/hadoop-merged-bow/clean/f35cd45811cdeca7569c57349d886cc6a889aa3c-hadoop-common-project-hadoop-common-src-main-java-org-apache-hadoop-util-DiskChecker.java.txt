Merge r1454237 through r1455388 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455390 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.fs.FileStatus;
-import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.util.Shell;
+  private static final long SHELL_TIMEOUT = 10 * 1000;
+
+
+    public DiskErrorException(String msg, Throwable cause) {
+      super(msg, cause);
+    }
-    if (!mkdirsWithExistsCheck(dir))
+    if (!mkdirsWithExistsCheck(dir)) {
-
-    if (!dir.isDirectory())
-      throw new DiskErrorException("Not a directory: "
-                                   + dir.toString());
-
-    if (!dir.canRead())
-      throw new DiskErrorException("Directory is not readable: "
-                                   + dir.toString());
-
-    if (!dir.canWrite())
-      throw new DiskErrorException("Directory is not writable: "
-                                   + dir.toString());
-
-    if (!dir.canExecute())
-      throw new DiskErrorException("Directory is not executable: "
-	  + dir.toString());
+    }
+    checkDirAccess(dir);
+    checkDirAccess(localFS.pathToFile(dir));
+  }
-    FileStatus stat = localFS.getFileStatus(dir);
-    FsPermission actual = stat.getPermission();
-
-    if (!stat.isDirectory())
-      throw new DiskErrorException("not a directory: "+ dir.toString());
-
-    FsAction user = actual.getUserAction();
-    if (!user.implies(FsAction.READ))
-      throw new DiskErrorException("directory is not readable: "
+  /**
+   * Checks that the given file is a directory and that the current running
+   * process can read, write, and execute it.
+   * 
+   * @param dir File to check
+   * @throws DiskErrorException if dir is not a directory, not readable, not
+   *   writable, or not executable
+   */
+  private static void checkDirAccess(File dir) throws DiskErrorException {
+    if (!dir.isDirectory()) {
+      throw new DiskErrorException("Not a directory: "
+    }
-    if (!user.implies(FsAction.WRITE))
-      throw new DiskErrorException("directory is not writable: "
-                                   + dir.toString());
+    if (Shell.WINDOWS) {
+      checkAccessByFileSystemInteraction(dir);
+    } else {
+      checkAccessByFileMethods(dir);
+    }
+  }
-    if (!user.implies(FsAction.EXECUTE))
-      throw new DiskErrorException("directory is not listable: "
+  /**
+   * Checks that the current running process can read, write, and execute the
+   * given directory by using methods of the File object.
+   * 
+   * @param dir File to check
+   * @throws DiskErrorException if dir is not readable, not writable, or not
+   *   executable
+   */
+  private static void checkAccessByFileMethods(File dir)
+      throws DiskErrorException {
+    if (!dir.canRead()) {
+      throw new DiskErrorException("Directory is not readable: "
+    }
+
+    if (!dir.canWrite()) {
+      throw new DiskErrorException("Directory is not writable: "
+                                   + dir.toString());
+    }
+
+    if (!dir.canExecute()) {
+      throw new DiskErrorException("Directory is not executable: "
+                                   + dir.toString());
+    }
+  }
+
+  /**
+   * Checks that the current running process can read, write, and execute the
+   * given directory by attempting each of those operations on the file system.
+   * This method contains several workarounds to known JVM bugs that cause
+   * File.canRead, File.canWrite, and File.canExecute to return incorrect results
+   * on Windows with NTFS ACLs.  See:
+   * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6203387
+   * These bugs are supposed to be fixed in JDK7.
+   * 
+   * @param dir File to check
+   * @throws DiskErrorException if dir is not readable, not writable, or not
+   *   executable
+   */
+  private static void checkAccessByFileSystemInteraction(File dir)
+      throws DiskErrorException {
+    // Make sure we can read the directory by listing it.
+    if (dir.list() == null) {
+      throw new DiskErrorException("Directory is not readable: "
+                                   + dir.toString());
+    }
+
+    // Make sure we can write to the directory by creating a temp file in it.
+    try {
+      File tempFile = File.createTempFile("checkDirAccess", null, dir);
+      if (!tempFile.delete()) {
+        throw new DiskErrorException("Directory is not writable: "
+                                     + dir.toString());
+      }
+    } catch (IOException e) {
+      throw new DiskErrorException("Directory is not writable: "
+                                   + dir.toString(), e);
+    }
+
+    // Make sure the directory is executable by trying to cd into it.  This
+    // launches a separate process.  It does not change the working directory of
+    // the current process.
+    try {
+      String[] cdCmd = new String[] { "cmd", "/C", "cd",
+          dir.getAbsolutePath() };
+      Shell.execCommand(null, cdCmd, SHELL_TIMEOUT);
+    } catch (Shell.ExitCodeException e) {
+      throw new DiskErrorException("Directory is not executable: "
+                                   + dir.toString(), e);
+    } catch (IOException e) {
+      throw new DiskErrorException("Directory is not executable: "
+                                   + dir.toString(), e);
+    }

MOV26 MOV31 UPD40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS31 MOV29 MOV83 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 MOV29 INS83 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 MOV43 INS8 INS29 UPD83 UPD42 INS44 INS43 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS27 INS83 INS42 INS44 INS44 INS8 MOV25 INS21 MOV21 INS21 INS65 INS65 INS65 INS43 INS42 MOV25 INS25 INS65 INS65 INS65 INS43 INS42 INS42 INS65 INS65 INS65 INS43 INS42 INS42 MOV25 INS54 INS54 INS34 INS34 INS43 INS42 INS43 INS42 INS46 INS8 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 MOV42 INS8 INS40 INS8 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS8 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS8 INS12 INS8 INS12 INS12 INS42 INS42 INS42 INS42 MOV53 INS42 INS42 INS42 INS32 MOV53 INS21 INS21 MOV53 MOV53 MOV53 INS32 INS33 INS53 MOV60 MOV25 INS44 INS8 INS60 INS21 INS44 INS8 INS44 INS8 MOV42 UPD42 MOV42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV14 UPD43 INS8 INS43 INS42 MOV53 INS5 INS59 INS32 INS43 INS42 MOV53 INS43 INS42 MOV53 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 UPD42 UPD42 INS53 INS42 INS43 INS85 INS42 INS3 UPD42 MOV42 UPD42 MOV42 INS33 INS42 INS42 INS40 INS42 INS42 UPD45 UPD42 UPD42 INS45 INS33 INS42 UPD42 UPD42 INS14 INS42 INS42 INS5 INS4 INS42 INS42 INS43 INS27 UPD45 INS43 INS85 INS45 INS45 INS45 INS32 UPD45 UPD45 INS42 INS45 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL40 DEL26 DEL32 DEL38 DEL53 DEL40 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL40 DEL32 DEL38 DEL25 DEL40 DEL32 DEL38 DEL25 DEL8 DEL31