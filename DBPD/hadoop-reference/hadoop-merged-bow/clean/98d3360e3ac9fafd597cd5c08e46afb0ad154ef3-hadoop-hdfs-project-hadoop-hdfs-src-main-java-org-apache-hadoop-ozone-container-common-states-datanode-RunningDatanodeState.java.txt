HDFS-11444. Ozone: Fix datanode ID handling in MiniOzoneCluster. Contributed by Weiwei Yang.

-import org.apache.hadoop.hdfs.server.datanode.DataNode;
-import org.apache.hadoop.ozone.OzoneClientUtils;
+import org.apache.hadoop.ozone.container.common.helpers.ContainerUtils;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.UUID;
-    StorageContainerDatanodeProtocolProtos.ContainerNodeIDProto
-        containerIDProto;
-    try (FileInputStream stream = new FileInputStream(idPath.toFile())) {
-      containerIDProto = StorageContainerDatanodeProtocolProtos
-          .ContainerNodeIDProto.parseFrom(stream);
-      return containerIDProto;
+    DatanodeID datanodeID = null;
+    List<DatanodeID> datanodeIDs =
+        ContainerUtils.readDatanodeIDsFrom(idPath.toFile());
+    int containerPort = this.context.getContainerPort();
+    for(DatanodeID dnId : datanodeIDs) {
+      if(dnId.getContainerPort() == containerPort) {
+        datanodeID = dnId;
+        break;
+      }
-  }
-  /**
-   * Create a DatanodeID from the datanode information.
-   *
-   * @return DatanodeID
-   * @throws UnknownHostException
-   */
-  private DatanodeID createDatanodeID() throws UnknownHostException {
-    DatanodeID temp = new DatanodeID(
-        //TODO : Replace this with proper network and kerberos
-        // support code.
-        InetAddress.getLocalHost().getHostAddress(),
-        DataNode.getHostName(conf),
-        UUID.randomUUID().toString(),
-        0, /** XferPort - SCM does not use this port  */
-        0, /** Info port - SCM does not use this port */
-        0, /** Info Secure Port - SCM does not use this port */
-        0); /** IPC port - SCM does not use this port */
-
-    // TODO: make this dynamically discoverable. SCM can hand out this
-    // port number to calling applications. This makes it easy to run multiple
-    // container endpoints on the same machine.
-    temp.setContainerPort(OzoneClientUtils.getContainerPort(conf));
-    return temp;
-  }
-
-  /**
-   * Creates a new ContainerID that persists both DatanodeID and ClusterID.
-   *
-   * @param idPath Path to the id file.
-   * @return ContainerNodeIDProto
-   * @throws UnknownHostException
-   */
-  private StorageContainerDatanodeProtocolProtos.ContainerNodeIDProto
-      createNewContainerID(Path idPath)
-      throws IOException {
-
-    if(!idPath.getParent().toFile().exists() &&
-        !idPath.getParent().toFile().mkdirs()) {
-      LOG.error("Failed to create container ID locations. Path: {}",
-          idPath.getParent());
-      throw new IOException("Unable to create container ID directories.");
-    }
-    StorageContainerDatanodeProtocolProtos.ContainerNodeIDProto
-        containerIDProto = StorageContainerDatanodeProtocolProtos
-        .ContainerNodeIDProto.newBuilder()
-        .setDatanodeID(createDatanodeID().getProtoBufMessage()).build();
-    try (FileOutputStream stream = new FileOutputStream(idPath.toFile())) {
-      stream.write(containerIDProto.toByteArray());
+    if (datanodeID == null) {
+      throw new IOException("No valid datanode ID found from "
+          + idPath.toFile().getAbsolutePath()
+          + " that matches container port "
+          + containerPort);
+    } else {
+      StorageContainerDatanodeProtocolProtos.ContainerNodeIDProto
+          containerIDProto =
+          StorageContainerDatanodeProtocolProtos
+              .ContainerNodeIDProto
+              .newBuilder()
+              .setDatanodeID(datanodeID.getProtoBufMessage())
+              .build();
-    // Not found, let us create a new datanode ID, persist it and return that
-    // info to SCM.
-    try {
-      nodeID = createNewContainerID(Paths.get(dataNodeIDPath));
-      LOG.trace("Created Node ID :", nodeID.getDatanodeID().getDatanodeUuid());
-      return nodeID;
-    } catch (IOException ex) {
-      LOG.error("Creating new node ID failed.", ex);
-    }
+    this.context.setState(DatanodeStateMachine.DatanodeStates.SHUTDOWN);

UPD40 INS31 MOV29 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 MOV21 MOV60 INS60 MOV60 INS70 INS25 MOV21 MOV43 INS74 INS59 INS39 INS44 INS42 INS8 UPD27 MOV27 MOV8 INS8 INS32 UPD42 INS33 INS43 MOV43 UPD42 MOV42 INS32 INS42 INS32 MOV43 INS42 INS25 INS42 INS33 INS53 MOV60 MOV41 INS22 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS22 UPD42 MOV42 INS27 INS8 INS14 INS52 INS42 INS52 INS42 INS32 INS42 INS21 INS10 MOV43 INS27 UPD42 MOV42 MOV42 INS7 INS45 INS32 INS45 INS42 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL34 DEL34 DEL34 DEL34 DEL14 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL32 DEL32 DEL21 DEL45 DEL14 DEL53 DEL32 DEL43 DEL42 DEL43 DEL14 DEL59 DEL58 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL54 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL40 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL58 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54