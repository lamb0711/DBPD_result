YARN-8953. [CSI] CSI driver adaptor module support in NodeManager. Contributed by Weiwei Yang.

+import com.google.common.base.Strings;
+import org.apache.hadoop.net.NetUtils;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.yarn.api.CsiAdaptorProtocol;
+import org.apache.hadoop.yarn.api.protocolrecords.GetPluginInfoRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetPluginInfoResponse;
+import org.apache.hadoop.yarn.client.NMProxy;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.exceptions.YarnException;
+import org.apache.hadoop.yarn.ipc.YarnRPC;
-import org.apache.hadoop.yarn.server.resourcemanager.volume.csi.lifecycle.VolumeImpl;
-import org.apache.hadoop.yarn.server.volume.csi.CsiAdaptorClientProtocol;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
-  private CsiAdaptorClientProtocol adaptorClient;
+  private Map<String, CsiAdaptorProtocol> csiAdaptorMap;
+    this.csiAdaptorMap = new ConcurrentHashMap<>();
-    this.adaptorClient = new CsiAdaptorClient();
+  }
+
+  // Init the CSI adaptor cache according to the configuration.
+  // user only needs to configure a list of adaptor addresses,
+  // this method extracts each address and init an adaptor client,
+  // then proceed with a hand-shake by calling adaptor's getPluginInfo
+  // method to retrieve the driver info. If the driver can be resolved,
+  // it is then added to the cache. Note, we don't allow two drivers
+  // specified with same driver-name even version is different.
+  private void initCsiAdaptorCache(
+      final Map<String, CsiAdaptorProtocol> adaptorMap, Configuration conf)
+      throws IOException, YarnException {
+    LOG.info("Initializing cache for csi-driver-adaptors");
+    String[] addresses =
+        conf.getStrings(YarnConfiguration.NM_CSI_ADAPTOR_ADDRESSES);
+    if (addresses != null && addresses.length > 0) {
+      for (String addr : addresses) {
+        LOG.info("Found csi-driver-adaptor socket address: " + addr);
+        InetSocketAddress address = NetUtils.createSocketAddr(addr);
+        YarnRPC rpc = YarnRPC.create(conf);
+        UserGroupInformation currentUser =
+            UserGroupInformation.getCurrentUser();
+        CsiAdaptorProtocol adaptorClient = NMProxy
+            .createNMProxy(conf, CsiAdaptorProtocol.class, currentUser, rpc,
+                address);
+        // Attempt to resolve the driver by contacting to
+        // the diver's identity service on the given address.
+        // If the call failed, the initialization is also failed
+        // in order running into inconsistent state.
+        LOG.info("Retrieving info from csi-driver-adaptor on address " + addr);
+        GetPluginInfoResponse response =
+            adaptorClient.getPluginInfo(GetPluginInfoRequest.newInstance());
+        if (!Strings.isNullOrEmpty(response.getDriverName())) {
+          String driverName = response.getDriverName();
+          if (adaptorMap.containsKey(driverName)) {
+            throw new YarnException(
+                "Duplicate driver adaptor found," + " driver name: "
+                    + driverName);
+          }
+          adaptorMap.put(driverName, adaptorClient);
+          LOG.info("CSI Adaptor added to the cache, adaptor name: " + driverName
+              + ", driver version: " + response.getVersion());
+        }
+      }
+    }
+  }
+
+  /**
+   * Returns a CsiAdaptorProtocol client by the given driver name,
+   * returns null if no adaptor is found for the driver, that means
+   * the driver has not registered to the volume manager yet enhance not valid.
+   * @param driverName the name of the driver
+   * @return CsiAdaptorProtocol client or null if driver not registered
+   */
+  public CsiAdaptorProtocol getAdaptorByDriverName(String driverName) {
+    return csiAdaptorMap.get(driverName);
+  }
+
+  @VisibleForTesting
+  @Override
+  public void registerCsiDriverAdaptor(String driverName,
+      CsiAdaptorProtocol client) {
+    this.csiAdaptorMap.put(driverName, client);
+    initCsiAdaptorCache(csiAdaptorMap, conf);
-      // add the volume and set the client
-      ((VolumeImpl) volume).setClient(adaptorClient);
-  @VisibleForTesting
-  public void setClient(CsiAdaptorClientProtocol client) {
-    this.adaptorClient = client;
-  }
-

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS74 MOV21 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS78 UPD42 INS44 INS43 INS43 INS43 UPD42 INS83 INS74 INS42 INS43 INS42 INS42 INS42 INS21 INS60 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS42 INS43 INS42 UPD43 INS21 INS42 INS42 UPD42 MOV42 INS43 INS43 INS43 INS42 INS32 INS5 INS59 INS27 INS8 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS85 INS42 INS32 INS27 INS27 INS70 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS74 INS42 INS42 INS42 INS40 INS42 INS33 INS40 INS34 INS44 INS42 INS8 MOV52 UPD42 MOV42 INS43 INS43 INS42 INS21 INS60 INS60 INS60 INS60 INS21 INS60 INS25 UPD42 MOV42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS38 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS60 INS25 INS21 INS21 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS8 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS14 INS45 INS42 INS45 INS32 INS43 INS27 INS42 INS42 INS42 INS45 INS45 INS42 DEL43 DEL43 DEL22 DEL42 DEL7 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21