YARN-6757. Refactor the usage of yarn.nodemanager.linux-container-executor.cgroups.mount-path
(Contributed by Miklos Szegedi via Daniel Templeton)

+import java.util.Arrays;
-import com.google.common.collect.Sets;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.CGroupsHandler;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.ResourceHandlerModule;
-  // package private for testing purposes
+  @VisibleForTesting
-  int nodeVCores;
+  private int nodeVCores;
-            YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,
-            YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);
+            YarnConfiguration
+                .NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,
+            YarnConfiguration
+                .DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);
-      updateCgroup(CONTROLLER_CPU, "", CPU_PERIOD_US, String.valueOf(limits[0]));
-      updateCgroup(CONTROLLER_CPU, "", CPU_QUOTA_US, String.valueOf(limits[1]));
+      updateCgroup(CONTROLLER_CPU, "", CPU_PERIOD_US,
+          String.valueOf(limits[0]));
+      updateCgroup(CONTROLLER_CPU, "", CPU_QUOTA_US,
+          String.valueOf(limits[1]));
-  int[] getOverallLimits(float yarnProcessors) {
-    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessors);
+  int[] getOverallLimits(float yarnProcessorsArg) {
+    return CGroupsCpuResourceHandlerImpl.getOverallLimits(yarnProcessorsArg);
-    if (! new File(path).mkdir()) {
+    if (!new File(path).mkdir()) {
-        if ((str = inl.readLine()) != null) {
+        str = inl.readLine();
+        if (str != null) {
-            String.valueOf(limits[0]));
+              String.valueOf(limits[0]));
-            String.valueOf(limits[1]));
+              String.valueOf(limits[1]));
+    Set<String> validCgroups =
+        CGroupsHandler.CGroupController.getValidCGroups();
-            HashSet<String> value = Sets.newHashSet(options.split(","));
-            ret.put(path, value);
+            Set<String> cgroupList =
+                new HashSet<>(Arrays.asList(options.split(",")));
+            // Collect the valid subsystem names
+            cgroupList.retainAll(validCgroups);
+            ret.put(path, cgroupList);
-    Map<String, Set<String>> parsedMtab = parseMtab();
+    Map<String, Set<String>> parsedMtab = null;
+
+    if (this.cgroupMountPath != null && !this.cgroupMount) {
+      parsedMtab = ResourceHandlerModule.
+          parseConfiguredCGroupPath(this.cgroupMountPath);
+    }
+
+    if (parsedMtab == null) {
+      parsedMtab = parseMtab();
+    }

MOV26 INS26 INS26 UPD40 INS40 INS40 INS78 INS83 INS42 UPD42 INS60 INS25 INS25 INS74 INS59 INS27 INS8 INS27 INS8 UPD42 INS43 INS43 INS42 INS32 INS33 INS27 INS38 INS21 INS42 INS33 INS21 INS42 INS42 INS40 INS42 INS22 INS33 INS22 INS7 INS7 INS21 INS52 INS42 INS52 INS42 INS42 INS32 INS42 MOV32 MOV7 INS42 INS42 INS22 INS42 INS52 INS42 INS21 INS74 INS32 INS43 MOV43 UPD42 INS14 INS42 INS42 INS42 UPD42 INS42 UPD74 MOV74 MOV32 UPD42 UPD42 DEL36