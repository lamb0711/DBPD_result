YARN-4428. Redirect RM page to AHS page when AHS turned on and RM page is not available. Contributed by Chang Li

+import static org.apache.hadoop.yarn.util.StringHelper.pjoin;
+
+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
+import org.apache.hadoop.yarn.server.resourcemanager.RMContext;
+import org.apache.hadoop.yarn.util.Apps;
+import org.apache.hadoop.yarn.util.ConverterUtils;
+import org.apache.hadoop.yarn.webapp.util.WebAppUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+  private static final Logger LOG =
+      LoggerFactory.getLogger(RMWebAppFilter.class);
+  private boolean ahsEnabled;
+  private String ahsPageURLPrefix;
+    ahsEnabled = conf.getBoolean(
+        YarnConfiguration.APPLICATION_HISTORY_ENABLED,
+        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED);
+    ahsPageURLPrefix = pjoin(
+        WebAppUtils.getHttpSchemePrefix(conf) +
+        WebAppUtils.getAHSWebAppURLWithoutScheme(
+            conf), "applicationhistory");
+    } else if (ahsEnabled) {
+      String ahsRedirectUrl = ahsRedirectPath(uri, rmWebApp);
+      if(ahsRedirectUrl != null) {
+        response.setHeader("Location", ahsRedirectUrl);
+        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);
+        return;
+      }
+  private String ahsRedirectPath(String uri, RMWebApp rmWebApp) {
+    // TODO: Commonize URL parsing code. Will be done in YARN-4642.
+    String redirectPath = null;
+    if(uri.contains("/cluster/")) {
+      String[] parts = uri.split("/");
+      if(parts.length > 3) {
+        RMContext context = rmWebApp.getRMContext();
+        String type = parts[2];
+        ApplicationId appId = null;
+        ApplicationAttemptId appAttemptId = null;
+        ContainerId containerId = null;
+        switch(type){
+        case "app":
+          try {
+            appId = Apps.toAppID(parts[3]);
+          } catch (YarnRuntimeException | NumberFormatException e) {
+            LOG.debug("Error parsing {} as an ApplicationId",
+                parts[3], e);
+            return redirectPath;
+          }
+          if(!context.getRMApps().containsKey(appId)) {
+            redirectPath = pjoin(ahsPageURLPrefix, "app", appId);
+          }
+          break;
+        case "appattempt":
+          try{
+            appAttemptId = ConverterUtils.toApplicationAttemptId(parts[3]);
+          } catch (IllegalArgumentException e) {
+            LOG.debug("Error parsing {} as an ApplicationAttemptId",
+                parts[3], e);
+            return redirectPath;
+          }
+          if(!context.getRMApps().containsKey(
+              appAttemptId.getApplicationId())) {
+            redirectPath = pjoin(ahsPageURLPrefix,
+                "appattempt", appAttemptId);
+          }
+          break;
+        case "container":
+          try {
+            containerId = ContainerId.fromString(parts[3]);
+          } catch (IllegalArgumentException e) {
+            LOG.debug("Error parsing {} as an ContainerId",
+                parts[3], e);
+            return redirectPath;
+          }
+          if(!context.getRMApps().containsKey(
+              containerId.getApplicationAttemptId().getApplicationId())) {
+            redirectPath = pjoin(ahsPageURLPrefix,
+                "container", containerId);
+          }
+          break;
+        default:
+          break;
+        }
+      }
+    }
+    return redirectPath;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS57 INS7 INS7 INS25 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS43 INS42 INS32 INS42 INS32 INS42 INS8 INS42 INS42 INS33 INS42 INS42 INS45 INS60 INS25 INS42 INS42 INS42 INS40 INS40 INS42 INS27 INS45 INS60 INS25 INS5 INS59 INS27 INS8 INS32 INS32 INS43 INS59 INS27 INS8 INS43 INS85 INS42 INS32 INS40 INS34 INS60 INS60 INS60 INS60 INS60 INS50 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS42 INS42 INS42 INS45 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS49 INS54 INS25 INS10 INS49 INS54 INS25 INS10 INS49 INS54 INS25 INS10 INS49 INS10 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS45 INS8 INS12 INS38 INS8 INS45 INS8 INS12 INS38 INS8 INS45 INS8 INS12 INS38 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS34 INS21 INS44 INS8 INS32 INS21 INS21 INS44 INS8 INS32 INS21 INS21 INS44 INS8 INS32 INS21 INS7 INS84 INS42 INS21 INS41 INS32 INS42 INS42 INS7 INS7 INS43 INS42 INS21 INS41 INS32 INS42 INS32 INS7 INS7 INS43 INS42 INS21 INS41 INS32 INS42 INS32 INS7 INS42 INS32 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS45 INS2 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS2 INS42 INS42 INS45 INS2 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS2 INS42 INS42 INS45 INS2 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34