HDDS-1148. After allocating container, we are not adding to container DB.



+import org.apache.hadoop.hdds.scm.ScmConfigKeys;
+import java.util.NavigableSet;
+  private final int numContainerPerOwnerInPipeline;
+    this.numContainerPerOwnerInPipeline = conf
+        .getInt(ScmConfigKeys.OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT,
+            ScmConfigKeys.OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT_DEFAULT);
+
-      final ContainerInfo containerInfo; containerInfo = containerStateManager
-          .allocateContainer(pipelineManager, type, replicationFactor, owner);
-      try {
-        final byte[] containerIDBytes = Longs.toByteArray(
-            containerInfo.getContainerID());
-        containerStore.put(containerIDBytes,
-            containerInfo.getProtobuf().toByteArray());
-      } catch (IOException ex) {
-        // If adding to containerStore fails, we should remove the container
-        // from in-memory map.
-        try {
-          containerStateManager.removeContainer(containerInfo.containerID());
-        } catch (ContainerNotFoundException cnfe) {
-          // No need to worry much, everything is going as planned.
-        }
-        throw ex;
-      }
+      final ContainerInfo containerInfo =
+          containerStateManager.allocateContainer(pipelineManager, type,
+              replicationFactor, owner);
+      // Add container to DB.
+      addContainerToDB(containerInfo);
-      return containerStateManager
-          .getMatchingContainer(sizeRequired, owner, pipelineManager,
-              pipeline);
+      NavigableSet<ContainerID> containerIDs =
+          pipelineManager.getContainersInPipeline(pipeline.getId());
+
+      containerIDs = getContainersForOwner(containerIDs, owner);
+      if (containerIDs.size() < numContainerPerOwnerInPipeline) {
+        synchronized (pipeline) {
+          // TODO: #CLUTIL Maybe we can add selection logic inside synchronized
+          // as well
+          containerIDs = getContainersForOwner(
+              pipelineManager.getContainersInPipeline(pipeline.getId()), owner);
+          if (containerIDs.size() < numContainerPerOwnerInPipeline) {
+            ContainerInfo containerInfo =
+                containerStateManager.allocateContainer(pipelineManager, owner,
+                    pipeline);
+            // Add to DB
+            addContainerToDB(containerInfo);
+            containerStateManager.updateLastUsedMap(pipeline.getId(),
+                containerInfo.containerID(), owner);
+            return containerInfo;
+          }
+        }
+      }
+
+      ContainerInfo containerInfo =
+          containerStateManager.getMatchingContainer(sizeRequired, owner,
+              pipeline.getId(), containerIDs);
+      if (containerInfo == null) {
+        synchronized (pipeline) {
+          containerInfo =
+              containerStateManager.allocateContainer(pipelineManager, owner,
+                  pipeline);
+          // Add to DB
+          addContainerToDB(containerInfo);
+        }
+      }
+      containerStateManager.updateLastUsedMap(pipeline.getId(),
+          containerInfo.containerID(), owner);
+      // TODO: #CLUTIL cleanup entries in lastUsedMap
+      return containerInfo;
+   * Add newly allocated container to container DB.
+   * @param containerInfo
+   * @throws IOException
+   */
+  private void addContainerToDB(ContainerInfo containerInfo)
+      throws IOException {
+    try {
+      final byte[] containerIDBytes = Longs.toByteArray(
+          containerInfo.getContainerID());
+      containerStore.put(containerIDBytes,
+          containerInfo.getProtobuf().toByteArray());
+    } catch (IOException ex) {
+      // If adding to containerStore fails, we should remove the container
+      // from in-memory map.
+      try {
+        containerStateManager.removeContainer(containerInfo.containerID());
+      } catch (ContainerNotFoundException cnfe) {
+        // This should not happen, as we are removing after adding in to
+        // container state cmap.
+      }
+      throw ex;
+    }
+  }
+
+  /**
+   * Returns the container ID's matching with specified owner.
+   * @param containerIDs
+   * @param owner
+   * @return NavigableSet<ContainerID>
+   */
+  private NavigableSet<ContainerID> getContainersForOwner(
+      NavigableSet<ContainerID> containerIDs, String owner) {
+    for (ContainerID cid : containerIDs) {
+      try {
+        if (!getContainer(cid).getOwner().equals(owner)) {
+          containerIDs.remove(cid);
+        }
+      } catch (ContainerNotFoundException e) {
+        LOG.error("Could not find container info for container id={} {}", cid,
+            e);
+        containerIDs.remove(cid);
+      }
+    }
+    return containerIDs;
+  }
+
+
+
+  /**

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS44 INS43 MOV8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS43 INS42 INS70 INS41 INS7 INS8 INS66 INS42 INS42 INS42 INS66 INS42 INS42 INS66 INS42 INS42 INS43 INS43 INS42 INS44 INS42 INS8 INS42 INS22 INS32 INS60 INS21 MOV41 INS60 INS21 INS25 INS60 INS25 INS21 INS41 INS42 INS42 INS43 INS42 INS54 INS52 INS42 INS42 INS42 INS40 INS40 INS83 MOV43 INS59 INS32 INS74 INS59 INS7 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS8 INS12 INS42 MOV32 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS32 INS32 INS42 INS51 INS42 INS42 INS32 INS42 INS33 INS51 INS42 INS42 INS32 INS32 INS42 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS42 MOV42 MOV42 MOV42 INS32 INS42 INS42 INS8 INS42 INS42 INS42 INS42 INS38 INS8 INS43 INS42 INS21 INS21 INS42 INS42 INS21 INS25 INS42 INS42 INS21 INS21 INS32 INS21 INS42 INS32 INS32 INS7 INS27 INS8 INS7 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS60 INS21 INS21 INS41 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL41 DEL83 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21