YARN-7146. Many RM unit tests failing with FairScheduler (rkanter)

+import org.apache.hadoop.yarn.server.resourcemanager.RMCriticalThreadUncaughtExceptionHandler;
+  // timeout to join when we stop this service
+  protected final long THREAD_JOIN_TIMEOUT_MS = 1000;
+
+  /**
+   * To enable the update thread, subclasses should set updateInterval to a
+   * positive value during {@link #serviceInit(Configuration)}.
+   */
+  protected long updateInterval = -1L;
+  @VisibleForTesting
+  Thread updateThread;
+  private final Object updateThreadMonitor = new Object();
+
+
+    if (updateInterval > 0) {
+      updateThread = new UpdateThread();
+      updateThread.setName("SchedulerUpdateThread");
+      updateThread.setUncaughtExceptionHandler(
+          new RMCriticalThreadUncaughtExceptionHandler(rmContext));
+      updateThread.setDaemon(true);
+    }
+
+  @Override
+  protected void serviceStart() throws Exception {
+    if (updateThread != null) {
+      updateThread.start();
+    }
+    super.serviceStart();
+  }
+
+  @Override
+  protected void serviceStop() throws Exception {
+    if (updateThread != null) {
+      updateThread.interrupt();
+      updateThread.join(THREAD_JOIN_TIMEOUT_MS);
+    }
+    super.serviceStop();
+  }
+
+
+  /**
+   * Update internal state of the scheduler.  This can be useful for scheduler
+   * implementations that maintain some state that needs to be periodically
+   * updated; for example, metrics or queue resources.  It will be called by the
+   * {@link UpdateThread} every {@link #updateInterval}.  By default, it will
+   * not run; subclasses should set {@link #updateInterval} to a
+   * positive value during {@link #serviceInit(Configuration)} if they want to
+   * enable the thread.
+   */
+  @VisibleForTesting
+  public void update() {
+    // do nothing by default
+  }
+
+  /**
+   * Thread which calls {@link #update()} every
+   * <code>updateInterval</code> milliseconds.
+   */
+  private class UpdateThread extends Thread {
+    @Override
+    public void run() {
+      while (!Thread.currentThread().isInterrupted()) {
+        try {
+          synchronized (updateThreadMonitor) {
+            updateThreadMonitor.wait(updateInterval);
+          }
+          update();
+        } catch (InterruptedException ie) {
+          LOG.warn("Scheduler UpdateThread interrupted. Exiting.");
+          return;
+        } catch (Exception e) {
+          LOG.error("Exception in scheduler UpdateThread", e);
+        }
+      }
+    }
+  }
+
+  /**
+   * Allows {@link UpdateThread} to start processing without waiting till
+   * {@link #updateInterval}.
+   */
+  protected void triggerUpdate() {
+    synchronized (updateThreadMonitor) {
+      updateThreadMonitor.notify();
+    }
+  }

INS26 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS31 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS78 INS43 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS83 INS42 INS43 INS31 INS29 INS83 INS39 INS42 INS8 INS42 INS34 INS65 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS14 INS25 INS42 INS42 INS25 INS21 INS42 INS42 INS25 INS21 INS65 INS42 INS65 INS42 INS78 INS83 INS39 INS42 INS8 INS65 INS51 INS66 INS66 INS65 INS66 INS34 INS43 INS27 INS8 INS27 INS8 INS48 INS27 INS8 INS48 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS61 INS66 INS65 INS66 INS65 INS66 INS42 INS8 INS68 INS42 INS42 INS34 INS21 INS21 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS67 INS67 INS68 INS68 INS38 INS8 INS42 INS67 INS21 INS42 INS69 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS69 INS42 INS32 INS54 INS42 INS32 INS43 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS8 INS12 INS12 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS51 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS8 INS32 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42