HDFS-8838. Erasure Coding: Tolerate datanode failures in DFSStripedOutputStream when the data length is small. Contributed by Tsz Wo Nicholas Sze.

+import java.io.InterruptedIOException;
+import com.google.common.annotations.VisibleForTesting;
+
-    private final MultipleBlockingQueue<T> queue;
+    final MultipleBlockingQueue<T> queue;
-    T poll(final int i) throws IOException {
+    T poll(final int i) throws InterruptedIOException {
-            populate();
-            return queue.poll(i);
+            try {
+              populate();
+              return queue.poll(i);
+            } catch(IOException ioe) {
+              LOG.warn("Failed to populate, " + this, ioe);
+            }
-        try {
-          Thread.sleep(100);
-        } catch(InterruptedException ie) {
-          throw DFSUtil.toInterruptedIOException(
-              "Sleep interrupted during poll", ie);
-        }
+        sleep(100, "poll");
+  private static void sleep(long ms, String op) throws InterruptedIOException {
+    try {
+      Thread.sleep(ms);
+    } catch(InterruptedException ie) {
+      throw DFSUtil.toInterruptedIOException(
+          "Sleep interrupted during " + op, ie);
+    }
+  }
+
-  protected LocatedBlock locateFollowingBlock(final DatanodeInfo[] excludedNodes)
+  int getNumBlockWriteRetry() {
+    return 0;
+  }
+
+  @Override
+  LocatedBlock locateFollowingBlock(final DatanodeInfo[] excludedNodes)
-    final MultipleBlockingQueue<LocatedBlock> followingBlocks
-        = coordinator.getFollowingBlocks();
-    return new ConcurrentPoll<LocatedBlock>(followingBlocks) {
+    return new ConcurrentPoll<LocatedBlock>(coordinator.getFollowingBlocks()) {
-            followingBlocks.offer(i, blocks[i]);
+            queue.offer(i, blocks[i]);
+  @VisibleForTesting
+  LocatedBlock peekFollowingBlock() {
+    return coordinator.getFollowingBlocks().peek(index);
+  }
+
-    final MultipleBlockingQueue<LocatedBlock> newBlocks
-        = coordinator.getNewBlocks();
-    return new ConcurrentPoll<LocatedBlock>(newBlocks) {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("updateBlockForPipeline(), " + this);
+    }
+    return new ConcurrentPoll<LocatedBlock>(coordinator.getNewBlocks()) {
-            newBlocks.offer(i, lb);
+            queue.offer(i, lb);
-            final LocatedBlock lb = coordinator.getFollowingBlocks().peek(i);
-            lb.getBlock().setGenerationStamp(newGS);
+            final MultipleBlockingQueue<LocatedBlock> followingBlocks
+                = coordinator.getFollowingBlocks();
+            synchronized(followingBlocks) {
+              final LocatedBlock lb = followingBlocks.peek(i);
+              if (lb != null) {
+                lb.getBlock().setGenerationStamp(newGS);
+                si.getErrorState().reset();
+                continue;
+              }
+            }
+
+            //streamer i just have polled the block, sleep and retry.
+            sleep(100, "updateBlockForPipeline, " + this);
+            i--;
-    final MultipleBlockingQueue<ExtendedBlock> updateBlocks
-        = coordinator.getUpdateBlocks();
-    return new ConcurrentPoll<ExtendedBlock>(updateBlocks) {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("updatePipeline(newGS=" + newGS + "), " + this);
+    }
+    return new ConcurrentPoll<ExtendedBlock>(coordinator.getUpdateBlocks()) {
+        final MultipleBlockingQueue<LocatedBlock> followingBlocks
+            = coordinator.getFollowingBlocks();
-        final ExtendedBlock updated = callUpdatePipeline(bg, newBG);
-        for (int i = 0; i < NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS; i++) {
-          StripedDataStreamer si = coordinator.getStripedDataStreamer(i);
-          if (si.isFailed()) {
-            continue; // skipping failed data streamer
+
+        final int n = NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS;
+        final DatanodeInfo[] newNodes = new DatanodeInfo[n];
+        final String[] newStorageIDs = new String[n];
+        for (int i = 0; i < n; i++) {
+          final StripedDataStreamer si = coordinator.getStripedDataStreamer(i);
+          DatanodeInfo[] nodes = si.getNodes();
+          String[] storageIDs = si.getStorageIDs();
+          if (nodes == null || storageIDs == null) {
+            synchronized(followingBlocks) {
+              final LocatedBlock lb = followingBlocks.peek(i);
+              if (lb != null) {
+                nodes = lb.getLocations();
+                storageIDs = lb.getStorageIDs();
+              }
+            }
+          if (nodes != null && storageIDs != null) {
+            newNodes[i] = nodes[0];
+            newStorageIDs[i] = storageIDs[0];
+          } else {
+            //streamer i just have polled the block, sleep and retry.
+            sleep(100, "updatePipeline, " + this);
+            i--;
+          }
+        }
+        final ExtendedBlock updated = callUpdatePipeline(bg, newBG, newNodes,
+            newStorageIDs);
+
+        for (int i = 0; i < n; i++) {
+          final StripedDataStreamer si = coordinator.getStripedDataStreamer(i);
-          updateBlocks.offer(i, newBlock(bi, updated.getGenerationStamp()));
+          if (bi != null) {
+            queue.offer(i, newBlock(bi, updated.getGenerationStamp()));
+          } else if (!si.isFailed()) {
+            synchronized(followingBlocks) {
+              final LocatedBlock lb = followingBlocks.peek(i);
+              if (lb != null) {
+                lb.getBlock().setGenerationStamp(newGS);
+                si.getErrorState().reset();
+                continue;
+              }
+            }
+
+            //streamer i just have polled the block, sleep and retry.
+            sleep(100, "updatePipeline, " + this);
+            i--;
+          }
-    return "#" + index + ": failed? " + Boolean.toString(failed).charAt(0)
-        + ", " + super.toString();
+    return "#" + index + ": " + (failed? "failed, ": "") + super.toString();

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS39 INS42 INS8 INS78 MOV43 INS42 MOV8 INS43 INS39 INS42 INS43 INS42 INS42 INS54 INS42 INS41 INS42 INS41 INS25 INS25 INS41 INS42 INS42 INS8 INS12 INS34 MOV32 INS32 INS8 INS32 INS8 INS32 INS21 MOV44 INS8 UPD42 INS42 INS42 INS21 INS42 INS42 INS21 INS14 MOV42 MOV42 UPD45 INS36 MOV21 INS32 INS53 INS32 INS32 MOV32 INS32 MOV74 MOV32 INS1 INS16 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS31 INS42 INS45 INS45 INS45 INS42 INS42 INS27 INS42 INS45 INS52 INS45 INS42 INS45 INS52 MOV78 INS39 INS42 MOV43 INS8 INS8 INS45 INS42 MOV60 MOV60 MOV60 INS60 INS60 INS60 INS24 MOV60 MOV24 INS54 UPD74 INS83 INS39 INS59 INS83 INS5 INS59 INS83 INS5 INS59 INS58 INS27 INS37 INS8 INS8 MOV8 INS12 UPD43 UPD42 INS32 INS42 INS27 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS25 UPD42 MOV42 INS60 MOV60 INS25 INS44 INS8 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS5 INS42 INS42 INS5 INS42 INS42 INS34 INS83 INS43 INS59 INS5 INS59 INS5 INS59 INS27 INS8 INS27 INS8 INS8 INS42 INS42 INS83 INS43 INS59 INS27 MOV8 INS25 MOV43 INS42 INS21 MOV60 INS51 INS21 INS21 INS43 INS85 INS43 INS85 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS27 INS27 INS51 INS27 INS27 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS38 INS8 INS32 INS42 INS8 INS32 INS37 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS8 INS42 INS33 INS42 INS33 INS7 INS7 INS32 INS37 INS42 INS42 INS42 INS32 INS51 INS21 INS21 INS42 INS42 INS27 INS42 UPD42 UPD42 INS60 INS25 INS42 INS34 INS27 INS42 INS60 INS25 INS2 INS2 INS2 INS2 INS42 INS34 INS27 INS42 UPD42 INS42 INS42 INS42 INS8 INS32 INS37 INS45 INS52 INS83 MOV43 INS59 INS27 INS8 INS45 INS52 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS45 INS52 INS60 INS25 INS42 INS34 INS27 INS42 INS42 INS32 INS42 INS33 MOV21 INS21 INS18 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS83 INS43 INS59 INS27 INS8 INS45 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS18 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL8 DEL42 DEL42 DEL45 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL83 DEL42 DEL59 DEL60 DEL83 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL32 DEL41 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL45