Merging r1566042 through r1566364 from trunk.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1566375 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map.Entry;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.SecretManagerSection;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import com.google.protobuf.ByteString;
+
-  
+
+  public static class SecretManagerState {
+    public final SecretManagerSection section;
+    public final List<SecretManagerSection.DelegationKey> keys;
+    public final List<SecretManagerSection.PersistToken> tokens;
+
+    public SecretManagerState(
+        SecretManagerSection s,
+        List<SecretManagerSection.DelegationKey> keys,
+        List<SecretManagerSection.PersistToken> tokens) {
+      this.section = s;
+      this.keys = keys;
+      this.tokens = tokens;
+    }
+  }
+
+  public synchronized void loadSecretManagerState(SecretManagerState state)
+      throws IOException {
+    Preconditions.checkState(!running,
+        "Can't load state from image in a running SecretManager.");
+
+    currentId = state.section.getCurrentId();
+    delegationTokenSequenceNumber = state.section.getTokenSequenceNumber();
+    for (SecretManagerSection.DelegationKey k : state.keys) {
+      addKey(new DelegationKey(k.getId(), k.getExpiryDate(), k.hasKey() ? k
+          .getKey().toByteArray() : null));
+    }
+
+    for (SecretManagerSection.PersistToken t : state.tokens) {
+      DelegationTokenIdentifier id = new DelegationTokenIdentifier(new Text(
+          t.getOwner()), new Text(t.getRenewer()), new Text(t.getRealUser()));
+      id.setIssueDate(t.getIssueDate());
+      id.setMaxDate(t.getMaxDate());
+      id.setSequenceNumber(t.getSequenceNumber());
+      id.setMasterKeyId(t.getMasterKeyId());
+      addPersistedDelegationToken(id, t.getExpiryDate());
+    }
+  }
+
-  
+
+  public synchronized SecretManagerState saveSecretManagerState() {
+    SecretManagerSection s = SecretManagerSection.newBuilder()
+        .setCurrentId(currentId)
+        .setTokenSequenceNumber(delegationTokenSequenceNumber)
+        .setNumKeys(allKeys.size()).setNumTokens(currentTokens.size()).build();
+    ArrayList<SecretManagerSection.DelegationKey> keys = Lists
+        .newArrayListWithCapacity(allKeys.size());
+    ArrayList<SecretManagerSection.PersistToken> tokens = Lists
+        .newArrayListWithCapacity(currentTokens.size());
+
+    for (DelegationKey v : allKeys.values()) {
+      SecretManagerSection.DelegationKey.Builder b = SecretManagerSection.DelegationKey
+          .newBuilder().setId(v.getKeyId()).setExpiryDate(v.getExpiryDate());
+      if (v.getEncodedKey() != null) {
+        b.setKey(ByteString.copyFrom(v.getEncodedKey()));
+      }
+      keys.add(b.build());
+    }
+
+    for (Entry<DelegationTokenIdentifier, DelegationTokenInformation> e : currentTokens
+        .entrySet()) {
+      DelegationTokenIdentifier id = e.getKey();
+      SecretManagerSection.PersistToken.Builder b = SecretManagerSection.PersistToken
+          .newBuilder().setOwner(id.getOwner().toString())
+          .setRenewer(id.getRenewer().toString())
+          .setRealUser(id.getRealUser().toString())
+          .setIssueDate(id.getIssueDate()).setMaxDate(id.getMaxDate())
+          .setSequenceNumber(id.getSequenceNumber())
+          .setMasterKeyId(id.getMasterKeyId())
+          .setExpiryDate(e.getValue().getRenewDate());
+      tokens.add(b.build());
+    }
+
+    return new SecretManagerState(s, keys, tokens);
+  }
+
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS31 INS31 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS43 INS42 INS42 INS21 INS21 INS21 INS70 INS70 INS42 INS60 INS60 INS60 INS70 INS70 INS41 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS21 INS21 INS21 INS42 INS32 INS7 INS7 INS44 INS40 INS8 INS44 INS40 INS8 INS43 INS59 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS44 INS32 INS8 INS14 INS42 INS40 INS42 INS40 INS42 INS43 INS43 INS43 INS43 INS7 INS7 INS7 INS42 INS42 INS38 INS45 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS25 INS21 INS74 INS42 INS42 INS42 INS60 INS60 INS21 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS32 INS40 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS32 INS16 INS43 INS14 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS33 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42