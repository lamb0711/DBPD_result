HDDS-2164 : om.db.checkpoints is getting filling up fast. (#1536)


-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.FileOutputStream;
+import java.io.OutputStream;
+import java.nio.file.Files;
-import java.util.zip.GZIPOutputStream;
+import java.util.stream.Collectors;
-import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
+
+import org.apache.commons.compress.archivers.ArchiveEntry;
+import org.apache.commons.compress.archivers.ArchiveOutputStream;
+import org.apache.commons.compress.compressors.CompressorException;
+import org.apache.commons.compress.compressors.CompressorOutputStream;
+import org.apache.commons.compress.compressors.CompressorStreamFactory;
+import org.apache.hadoop.hdds.utils.db.DBCheckpoint;
-   * Given a source directory, create a tar.gz file from it.
-   *
-   * @param sourcePath the path to the directory to be archived.
-   * @return tar.gz file
+   * Write OM DB Checkpoint to an output stream as a compressed file (tgz).
+   * @param checkpoint checkpoint file
+   * @param destination desination output stream.
-  public static File createTarFile(Path sourcePath) throws IOException {
-    TarArchiveOutputStream tarOs = null;
-    try {
-      String sourceDir = sourcePath.toString();
-      String fileName = sourceDir.concat(".tar.gz");
-      FileOutputStream fileOutputStream = new FileOutputStream(fileName);
-      GZIPOutputStream gzipOutputStream =
-          new GZIPOutputStream(new BufferedOutputStream(fileOutputStream));
-      tarOs = new TarArchiveOutputStream(gzipOutputStream);
-      File folder = new File(sourceDir);
-      File[] filesInDir = folder.listFiles();
-      if (filesInDir != null) {
-        for (File file : filesInDir) {
-          addFilesToArchive(file.getName(), file, tarOs);
+  public static void writeOmDBCheckpointToStream(DBCheckpoint checkpoint,
+                                                 OutputStream destination)
+      throws IOException {
+
+    try (CompressorOutputStream gzippedOut = new CompressorStreamFactory()
+        .createCompressorOutputStream(CompressorStreamFactory.GZIP,
+            destination)) {
+
+      try (ArchiveOutputStream archiveOutputStream =
+               new TarArchiveOutputStream(gzippedOut)) {
+
+        Path checkpointPath = checkpoint.getCheckpointLocation();
+        for (Path path : Files.list(checkpointPath)
+            .collect(Collectors.toList())) {
+          if (path != null) {
+            Path fileName = path.getFileName();
+            if (fileName != null) {
+              includeFile(path.toFile(), fileName.toString(),
+                  archiveOutputStream);
+            }
+          }
-      return new File(fileName);
-    } finally {
-      try {
-        org.apache.hadoop.io.IOUtils.closeStream(tarOs);
-      } catch (Exception e) {
-        LOG.error("Exception encountered when closing " +
-            "TAR file output stream: " + e);
-      }
+    } catch (CompressorException e) {
+      throw new IOException(
+          "Can't compress the checkpoint: " +
+              checkpoint.getCheckpointLocation(), e);
-  private static void addFilesToArchive(String source, File file,
-                                        TarArchiveOutputStream
-                                            tarFileOutputStream)
+  private static void includeFile(File file, String entryName,
+                           ArchiveOutputStream archiveOutputStream)
-    tarFileOutputStream.putArchiveEntry(new TarArchiveEntry(file, source));
-    if (file.isFile()) {
-      FileInputStream fileInputStream = new FileInputStream(file);
-      BufferedInputStream bufferedInputStream =
-          new BufferedInputStream(fileInputStream);
-      IOUtils.copy(bufferedInputStream, tarFileOutputStream);
-      tarFileOutputStream.closeArchiveEntry();
-      fileInputStream.close();
-    } else if (file.isDirectory()) {
-      tarFileOutputStream.closeArchiveEntry();
-      File[] filesInDir = file.listFiles();
-      if (filesInDir != null) {
-        for (File cFile : filesInDir) {
-          addFilesToArchive(cFile.getAbsolutePath(), cFile,
-              tarFileOutputStream);
-        }
-      }
+    ArchiveEntry archiveEntry =
+        archiveOutputStream.createArchiveEntry(file, entryName);
+    archiveOutputStream.putArchiveEntry(archiveEntry);
+    try (FileInputStream fis = new FileInputStream(file)) {
+      IOUtils.copy(fis, archiveOutputStream);
+    archiveOutputStream.closeArchiveEntry();

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 UPD40 INS40 UPD40 INS40 UPD40 UPD40 INS40 MOV44 INS39 INS42 INS44 INS44 INS8 UPD42 UPD65 INS43 INS42 INS43 INS42 MOV54 UPD42 UPD43 UPD42 INS60 INS21 INS54 MOV21 UPD66 UPD42 UPD66 INS42 UPD66 UPD42 MOV42 UPD42 MOV42 INS58 INS8 MOV12 UPD42 INS43 INS59 INS32 INS58 INS8 INS43 INS59 INS54 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 MOV43 MOV59 MOV21 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 INS58 INS8 UPD43 INS53 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS14 UPD42 INS40 INS42 INS43 INS59 MOV60 INS70 UPD42 INS14 UPD42 UPD42 INS43 UPD42 MOV42 UPD42 MOV42 MOV14 MOV43 INS44 INS32 INS8 INS43 INS27 INS42 INS42 UPD42 UPD42 INS32 INS43 INS42 INS32 INS42 INS32 INS25 INS42 UPD45 MOV45 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS33 MOV60 MOV25 INS43 INS8 UPD42 MOV42 UPD42 UPD42 MOV21 UPD42 UPD42 UPD42 INS32 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL43 DEL59 DEL60 DEL43 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL43 DEL42 DEL33 DEL59 DEL60 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL21 DEL32 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL25