HDFS-6997: add more tests for data migration and replicaion.

-  protected BlockPlacementPolicyDefault(Configuration conf, FSClusterStats stats,
-                           NetworkTopology clusterMap, 
-                           Host2NodesMap host2datanodeMap) {
-    initialize(conf, stats, clusterMap, host2datanodeMap);
-  }
-
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Failed to choose with favored nodes (=" + favoredNodes
+            + "), disregard favored nodes hint and retry.", nr);
+      }
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("storageTypes=" + storageTypes);
+    }
-          + totalReplicasExpected + ".";
+          + totalReplicasExpected
+          + " (unavailableStorages=" + unavailableStorages
+          + ", storagePolicy=" + storagePolicy
+          + ", newBlock=" + newBlock + ")";
+
+    final String localRack = localMachine.getNetworkLocation();
-    // choose one from the local rack
-      return chooseRandom(localMachine.getNetworkLocation(), excludedNodes,
+      // choose one from the local rack
+      return chooseRandom(localRack, excludedNodes,
-    } catch (NotEnoughReplicasException e1) {
-      // find the second replica
-      DatanodeDescriptor newLocal=null;
+    } catch (NotEnoughReplicasException e) {
+      // find the next replica and retry with its rack
-          newLocal = nextNode;
-          break;
-        }
-      }
-      if (newLocal != null) {
-        try {
-          return chooseRandom(newLocal.getNetworkLocation(), excludedNodes,
-              blocksize, maxNodesPerRack, results, avoidStaleNodes,
-              storageTypes);
-        } catch(NotEnoughReplicasException e2) {
-          //otherwise randomly choose one from the network
-          return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Failed to choose from local rack (location = " + localRack
+                + "), retry with the rack of the next replica (location = "
+                + nextNode.getNetworkLocation() + ")", e);
+          }
+          return chooseFromNextRack(nextNode, excludedNodes, blocksize,
-      } else {
-        //otherwise randomly choose one from the network
-        return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,
-            maxNodesPerRack, results, avoidStaleNodes, storageTypes);
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Failed to choose from local rack (location = " + localRack
+            + "); the second replica is not found, retry choosing ramdomly", e);
+      }
+      //the second replica is not found, randomly choose one from the network
+      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,
+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);
-    
+
+  private DatanodeStorageInfo chooseFromNextRack(Node next,
+      Set<Node> excludedNodes,
+      long blocksize,
+      int maxNodesPerRack,
+      List<DatanodeStorageInfo> results,
+      boolean avoidStaleNodes,
+      EnumMap<StorageType, Integer> storageTypes) throws NotEnoughReplicasException {
+    final String nextRack = next.getNetworkLocation();
+    try {
+      return chooseRandom(nextRack, excludedNodes, blocksize, maxNodesPerRack,
+          results, avoidStaleNodes, storageTypes);
+    } catch(NotEnoughReplicasException e) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Failed to choose from the next rack (location = " + nextRack
+            + "), retry choosing ramdomly", e);
+      }
+      //otherwise randomly choose one from the network
+      return chooseRandom(NodeBase.ROOT, excludedNodes, blocksize,
+          maxNodesPerRack, results, avoidStaleNodes, storageTypes);
+    }
+  }
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Failed to choose remote rack (location = ~"
+            + localMachine.getNetworkLocation() + "), fallback to local rack", e);
+      }
+        if (LOG.isDebugEnabled()) {
+          builder.append("\nNode ").append(NodeBase.getPath(chosenNode)).append(" [");
+        }
+        if (LOG.isDebugEnabled()) {
+          builder.append("\n]");
+        }
-          detail = builder.append("]").toString();
+          detail = builder.toString();
-        } else detail = "";
+        } else {
+          detail = "";
+        }
-      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-          .append(node).append(": ")
-          .append("Storage ").append(storage)
-          .append("at node ").append(NodeBase.getPath(node))
-          .append(" is not chosen because ")
-          .append(reason);
+          .append("\n  Storage ").append(storage)
+          .append(" is not chosen since ").append(reason).append(".");
-                               StorageType storageType) {
-    if (storage.getStorageType() != storageType) {
-      logNodeIsNotChosen(storage,
-          "storage types do not match, where the expected storage type is "
-              + storageType);
+                               StorageType requiredStorageType) {
+    if (storage.getStorageType() != requiredStorageType) {
+      logNodeIsNotChosen(storage, "storage types do not match,"
+          + " where the required storage type is " + requiredStorageType);
-    final long scheduledSize = blockSize * node.getBlocksScheduled();
-    if (requiredSize > node.getRemaining() - scheduledSize) {
-      logNodeIsNotChosen(storage, "the node does not have enough space ");
+    final long scheduledSize = blockSize * node.getBlocksScheduled(storage.getStorageType());
+    final long remaining = node.getRemaining(storage.getStorageType());
+    if (requiredSize > remaining - scheduledSize) {
+      logNodeIsNotChosen(storage, "the node does not have enough "
+          + storage.getStorageType() + " space"
+          + " (required=" + requiredSize
+          + ", scheduled=" + scheduledSize
+          + ", remaining=" + remaining + ")");
-        logNodeIsNotChosen(storage,
-            "the node is too busy (load:"+nodeLoad+" > "+maxLoad+") ");
+        logNodeIsNotChosen(storage, "the node is too busy (load: " + nodeLoad
+            + " > " + maxLoad + ") ");

MOV31 UPD83 INS43 INS42 INS44 INS44 INS44 MOV43 INS8 INS25 INS60 INS42 UPD43 UPD42 INS74 UPD42 INS39 INS42 INS39 INS42 INS74 INS42 INS39 INS42 INS74 INS42 INS60 INS54 UPD42 INS60 INS32 INS8 INS83 INS43 INS59 UPD42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS83 INS43 INS59 INS8 INS12 INS83 INS39 INS59 INS42 INS42 INS21 INS42 INS42 MOV32 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS41 INS44 MOV8 UPD42 MOV41 INS42 INS32 INS25 INS32 UPD42 INS70 INS25 MOV41 INS42 INS42 INS32 INS43 INS42 INS25 INS25 MOV32 INS42 INS42 INS32 INS42 INS32 INS8 INS42 INS42 INS27 INS42 MOV44 INS42 INS8 INS32 INS8 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS8 INS32 INS8 INS25 INS25 UPD45 INS32 INS42 INS42 INS27 MOV41 INS42 INS42 INS21 INS45 INS42 MOV60 INS25 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS32 INS8 INS32 INS8 INS8 UPD42 UPD45 INS45 UPD42 INS42 INS42 INS45 INS32 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS42 UPD45 MOV27 INS8 INS32 INS32 INS32 INS42 INS42 INS21 INS42 INS42 INS21 MOV21 UPD45 INS42 INS42 INS42 INS42 INS27 INS42 INS25 MOV41 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS42 UPD45 INS45 INS42 INS45 INS32 MOV8 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS32 INS45 INS32 INS42 INS45 INS42 INS42 INS45 INS45 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS32 MOV42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 DEL42 DEL42 DEL7 DEL10 DEL42 DEL32 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL43 DEL42 DEL43 DEL42 DEL32 DEL21 DEL8 DEL42 DEL45 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45