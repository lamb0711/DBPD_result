Merge trunk into HA branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1227775 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
-import org.apache.hadoop.mapreduce.JobID;
-import org.apache.hadoop.mapreduce.TypeConverter;
-import org.apache.hadoop.mapreduce.v2.api.records.JobId;
-  private static final Log LOG = LogFactory.getLog(RMContainerAllocator.class);
+  static final Log LOG = LogFactory.getLog(RMContainerAllocator.class);
-  
+
+  private Thread eventHandlingThread;
+  private volatile boolean stopEventHandling;
+
-  
+
+  BlockingQueue<ContainerAllocatorEvent> eventQueue
+    = new LinkedBlockingQueue<ContainerAllocatorEvent>();
+
+  public void start() {
+    this.eventHandlingThread = new Thread() {
+      @SuppressWarnings("unchecked")
+      @Override
+      public void run() {
+
+        ContainerAllocatorEvent event;
+
+        while (!stopEventHandling && !Thread.currentThread().isInterrupted()) {
+          try {
+            event = RMContainerAllocator.this.eventQueue.take();
+          } catch (InterruptedException e) {
+            LOG.error("Returning, interrupted : " + e);
+            return;
+          }
+
+          try {
+            handleEvent(event);
+          } catch (Throwable t) {
+            LOG.error("Error in handling event type " + event.getType()
+                + " to the ContainreAllocator", t);
+            // Kill the AM
+            eventHandler.handle(new JobEvent(getJob().getID(),
+              JobEventType.INTERNAL_ERROR));
+            return;
+          }
+        }
+      }
+    };
+    this.eventHandlingThread.start();
+    super.start();
+  }
+
+  @Override
+    this.stopEventHandling = true;
+    eventHandlingThread.interrupt();
-  
-  @SuppressWarnings("unchecked")
+
-  public synchronized void handle(ContainerAllocatorEvent event) {
+  public void handle(ContainerAllocatorEvent event) {
+    int qSize = eventQueue.size();
+    if (qSize != 0 && qSize % 1000 == 0) {
+      LOG.info("Size of event-queue in RMContainerAllocator is " + qSize);
+    }
+    int remCapacity = eventQueue.remainingCapacity();
+    if (remCapacity < 1000) {
+      LOG.warn("Very low remaining capacity in the event-queue "
+          + "of RMContainerAllocator: " + remCapacity);
+    }
+    try {
+      eventQueue.put(event);
+    } catch (InterruptedException e) {
+      throw new YarnException(e);
+    }
+  }
+
+  @SuppressWarnings({ "unchecked" })
+  protected synchronized void handleEvent(ContainerAllocatorEvent event) {
-          JobID id = TypeConverter.fromYarn(applicationId);
-          JobId jobId = TypeConverter.toYarn(id);
-          eventHandler.handle(new JobHistoryEvent(jobId, 
+          eventHandler.handle(new JobHistoryEvent(getJob().getID(), 
-          JobID id = TypeConverter.fromYarn(applicationId);
-          JobId jobId = TypeConverter.toYarn(id);
-          eventHandler.handle(new JobHistoryEvent(jobId, 
+          eventHandler.handle(new JobHistoryEvent(getJob().getID(), 

MOV26 MOV26 UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS79 UPD83 UPD42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS54 INS42 INS4 INS42 INS42 INS74 INS7 INS32 INS48 INS7 INS32 INS42 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS8 INS12 INS45 INS43 INS43 INS22 INS14 INS22 INS42 INS42 INS22 INS9 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS32 INS42 INS34 INS21 INS21 INS44 INS8 INS42 INS42 INS52 INS42 INS43 INS1 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS34 INS27 INS34 INS32 INS42 INS42 INS32 INS32 INS43 INS42 INS53 INS42 INS31 INS42 INS34 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS14 MOV79 MOV78 INS83 INS39 INS42 INS8 INS45 INS42 INS45 INS45 INS42 INS43 INS42 INS60 INS61 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS38 INS38 INS54 INS54 INS42 INS32 INS8 INS12 INS8 INS12 INS32 INS32 INS32 INS42 INS21 INS44 INS8 INS21 INS44 INS8 INS32 INS42 INS32 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS41 INS32 INS43 INS42 INS21 INS21 INS41 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS22 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS14 INS52 INS42 INS45 INS42 INS45 INS32 INS45 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42