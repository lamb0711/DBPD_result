HADOOP-14503. Make RollingAverages a mutable metric. Contributed by Hanisha Koneru.

+import com.google.common.annotations.VisibleForTesting;
-public class RollingAverages extends MutableMetric implements Closeable {
+public class MutableRollingAverages extends MutableMetric implements Closeable {
-  private final MutableRatesWithAggregation innerMetrics =
+  private MutableRatesWithAggregation innerMetrics =
-  private static final ScheduledExecutorService SCHEDULER = Executors
+  @VisibleForTesting
+  static final ScheduledExecutorService SCHEDULER = Executors
-          .setNameFormat("RollingAverages-%d").build());
+          .setNameFormat("MutableRollingAverages-%d").build());
-  private final int numWindows;
+  private int numWindows;
-    public SumAndCount(final double sum, final long count) {
+    SumAndCount(final double sum, final long count) {
+  private static final long WINDOW_SIZE_MS_DEFAULT = 300_000;
+  private static final int NUM_WINDOWS_DEFAULT = 36;
+
-   * Constructor of {@link RollingAverages}.
-   * @param windowSizeMs
-   *          The number of milliseconds of each window for which subset
-   *          of samples are gathered to compute the rolling average, A.K.A.
-   *          roll over interval.
-   * @param numWindows
-   *          The number of windows maintained to compute the rolling average.
-   * @param valueName
-   *          of the metric (e.g. "Time", "Latency")
+   * Constructor for {@link MutableRollingAverages}.
+   * @param metricValueName
-  public RollingAverages(
-      final long windowSizeMs,
-      final int numWindows,
-      final String valueName) {
-    String uvName = StringUtils.capitalize(valueName);
-    String lvName = StringUtils.uncapitalize(valueName);
-    avgInfoNameTemplate = "[%s]" + "RollingAvg"+ uvName;
-    avgInfoDescTemplate = "Rolling average "+ lvName +" for "+ "%s";
-    this.numWindows = numWindows;
+  public MutableRollingAverages(String metricValueName) {
+    if (metricValueName == null) {
+      metricValueName = "";
+    }
+    avgInfoNameTemplate = "[%s]" + "RollingAvg" +
+        StringUtils.capitalize(metricValueName);
+    avgInfoDescTemplate = "Rolling average " +
+        StringUtils.uncapitalize(metricValueName) +" for "+ "%s";
+    numWindows = NUM_WINDOWS_DEFAULT;
-        windowSizeMs, windowSizeMs, TimeUnit.MILLISECONDS);
+        WINDOW_SIZE_MS_DEFAULT, WINDOW_SIZE_MS_DEFAULT, TimeUnit.MILLISECONDS);
-   * Constructor of {@link RollingAverages}.
-   * @param windowSizeMs
-   *          The number of seconds of each window for which sub set of samples
-   *          are gathered to compute rolling average, also A.K.A roll over
-   *          interval.
-   * @param numWindows
-   *          The number of windows maintained in the same time to compute the
-   *          average of the rolling averages.
+   * This method is for testing only to replace the scheduledTask.
-  public RollingAverages(
-      final long windowSizeMs,
-      final int numWindows) {
-    this(windowSizeMs, numWindows, "Time");
+  @VisibleForTesting
+  synchronized void replaceScheduledTask(int windows, long interval,
+                                         TimeUnit timeUnit) {
+    numWindows = windows;
+    scheduledTask.cancel(true);
+    scheduledTask = SCHEDULER.scheduleAtFixedRate(new RatesRoller(this),
+        interval, interval, timeUnit);
-    private final RollingAverages parent;
+    private final MutableRollingAverages parent;
-    public RatesRoller(final RollingAverages parent) {
+    RatesRoller(final MutableRollingAverages parent) {
-   * {@link RollingAverages#averages}.
+   * {@link MutableRollingAverages#averages}.
-              return new LinkedBlockingDeque<SumAndCount>(numWindows);
+              return new LinkedBlockingDeque<>(numWindows);

INS26 MOV23 INS40 UPD42 INS23 INS23 INS78 INS83 INS39 MOV59 INS83 INS83 INS83 INS39 INS59 INS83 INS59 UPD42 INS78 INS83 INS39 INS42 INS44 INS44 INS42 INS42 INS34 INS42 INS34 MOV43 UPD42 INS25 UPD65 INS42 UPD42 INS39 INS42 INS43 INS42 INS21 INS21 INS21 UPD43 UPD66 UPD42 INS27 INS8 UPD66 INS42 INS7 INS32 INS7 UPD42 UPD43 UPD42 INS42 INS33 INS21 INS42 UPD42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 UPD42 UPD45 INS7 INS32 INS32 UPD42 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS52 INS42 UPD74 DEL83 DEL83 DEL83 DEL42 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL52 DEL42 DEL22 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL83 DEL42 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL42 DEL45 DEL17 DEL83 DEL42 DEL43