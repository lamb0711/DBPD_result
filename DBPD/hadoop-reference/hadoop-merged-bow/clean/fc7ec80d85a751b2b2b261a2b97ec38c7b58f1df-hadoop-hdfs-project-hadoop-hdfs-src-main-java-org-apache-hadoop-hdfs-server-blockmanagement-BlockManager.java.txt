Merge branch 'HDFS-9806' into trunk

+import org.apache.hadoop.hdfs.server.protocol.StorageReport;
+import org.apache.hadoop.hdfs.server.protocol.VolumeFailureSummary;
+  /** Storages accessible from multiple DNs. */
+  private final ProvidedStorageMap providedStorageMap;
+
+    providedStorageMap = new ProvidedStorageMap(namesystem, this, conf);
+
-    return createLocatedBlock(lastBlock, pos,
+    return createLocatedBlock(null, lastBlock, pos,
-  private List<LocatedBlock> createLocatedBlockList(final BlockInfo[] blocks,
-      final long offset, final long length, final int nrBlocksToReturn,
+  private void createLocatedBlockList(
+      LocatedBlockBuilder locatedBlocks,
+      final BlockInfo[] blocks,
+      final long offset, final long length,
-      return Collections.emptyList();
+      return;
-    List<LocatedBlock> results = new ArrayList<>(blocks.length);
-      results.add(createLocatedBlock(blocks[curBlk], curPos, mode));
+      locatedBlocks.addBlock(
+          createLocatedBlock(locatedBlocks, blocks[curBlk], curPos, mode));
-          && results.size() < nrBlocksToReturn);
-    return results;
+          && !locatedBlocks.isBlockMax());
+    return;
-  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,
+  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,
+      final BlockInfo[] blocks,
-    return createLocatedBlock(blocks[curBlk], curPos, mode);
+    return createLocatedBlock(locatedBlocks, blocks[curBlk], curPos, mode);
-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos,
-    final AccessMode mode) throws IOException {
-    final LocatedBlock lb = createLocatedBlock(blk, pos);
+  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,
+      final BlockInfo blk, final long pos, final AccessMode mode)
+          throws IOException {
+    final LocatedBlock lb = createLocatedBlock(locatedBlocks, blk, pos);
-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)
-      throws IOException {
+  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,
+      final BlockInfo blk, final long pos) throws IOException {
-        return newLocatedBlock(eb, storages, pos, false);
+        return null == locatedBlocks
+            ? newLocatedBlock(eb, storages, pos, false)
+                : locatedBlocks.newLocatedBlock(eb, storages, pos, false);
-    return blockIndices == null ?
-        newLocatedBlock(eb, machines, pos, isCorrupt) :
-        newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);
+    return blockIndices == null
+        ? null == locatedBlocks ? newLocatedBlock(eb, machines, pos, isCorrupt)
+            : locatedBlocks.newLocatedBlock(eb, machines, pos, isCorrupt)
+        : newLocatedStripedBlock(eb, machines, blockIndices, pos, isCorrupt);
-      final List<LocatedBlock> locatedblocks = createLocatedBlockList(
-          blocks, offset, length, Integer.MAX_VALUE, mode);
-      final LocatedBlock lastlb;
-      final boolean isComplete;
+      LocatedBlockBuilder locatedBlocks = providedStorageMap
+          .newLocatedBlocks(Integer.MAX_VALUE)
+          .fileLength(fileSizeExcludeBlocksUnderConstruction)
+          .lastUC(isFileUnderConstruction)
+          .encryption(feInfo)
+          .erasureCoding(ecPolicy);
+
+      createLocatedBlockList(locatedBlocks, blocks, offset, length, mode);
-        lastlb = createLocatedBlock(last, lastPos, mode);
-        isComplete = last.isComplete();
+
+        locatedBlocks
+          .lastBlock(createLocatedBlock(locatedBlocks, last, lastPos, mode))
+          .lastComplete(last.isComplete());
-        lastlb = createLocatedBlock(blocks,
-            fileSizeExcludeBlocksUnderConstruction, mode);
-        isComplete = true;
+        locatedBlocks
+          .lastBlock(createLocatedBlock(locatedBlocks, blocks,
+              fileSizeExcludeBlocksUnderConstruction, mode))
+          .lastComplete(true);
-      LocatedBlocks locations = new LocatedBlocks(
-          fileSizeExcludeBlocksUnderConstruction,
-          isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,
-          ecPolicy);
+      LocatedBlocks locations = locatedBlocks.build();
+    providedStorageMap.removeDatanode(node);
+   * Get the associated {@link DatanodeDescriptor} for the storage.
+   * If the storage is of type PROVIDED, one of the nodes that reported
+   * PROVIDED storage are returned. If not, this is equivalent to
+   * {@code storage.getDatanodeDescriptor()}.
+   * @param storage
+   * @return the associated {@link DatanodeDescriptor}.
+   */
+  private DatanodeDescriptor getDatanodeDescriptorFromStorage(
+      DatanodeStorageInfo storage) {
+    if (storage.getStorageType() == StorageType.PROVIDED) {
+      return providedStorageMap.chooseProvidedDatanode();
+    }
+    return storage.getDatanodeDescriptor();
+  }
+
+  /**
-      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
+      final DatanodeDescriptor node = getDatanodeDescriptorFromStorage(storage);
+        if (storage.getStorageType() == StorageType.PROVIDED) {
+          storage = new DatanodeStorageInfo(node, storage.getStorageID(),
+              storage.getStorageType(), storage.getState());
+        }
+  public long getProvidedCapacity() {
+    return providedStorageMap.getCapacity();
+  }
+
+  public void updateHeartbeat(DatanodeDescriptor node, StorageReport[] reports,
+      long cacheCapacity, long cacheUsed, int xceiverCount, int failedVolumes,
+      VolumeFailureSummary volumeFailureSummary) {
+
+    for (StorageReport report: reports) {
+      providedStorageMap.updateStorage(node, report.getStorage());
+    }
+    node.updateHeartbeat(reports, cacheCapacity, cacheUsed, xceiverCount,
+        failedVolumes, volumeFailureSummary);
+  }
+
-      DatanodeStorageInfo storageInfo = node.getStorageInfo(storage.getStorageID());
+      // Register DN with provided storage, not with storage owned by DN
+      // DN should still have a ref to the DNStorageInfo.
+      DatanodeStorageInfo storageInfo =
+          providedStorageMap.getStorage(node, storage);
-        invalidatedBlocks = processReport(storageInfo, newReport, context);
+        // Block reports for provided storage are not
+        // maintained by DN heartbeats
+        if (!StorageType.PROVIDED.equals(storageInfo.getStorageType())) {
+          invalidatedBlocks = processReport(storageInfo, newReport, context);
+        }
-      
-  private Collection<Block> processReport(
+  Collection<Block> processReport(
-  private void processFirstBlockReport(
+  void processFirstBlockReport(
-      final DatanodeDescriptor cur = storage.getDatanodeDescriptor();
+      if (storage.getStorageType() == StorageType.PROVIDED
+          && storage.getState() == State.NORMAL) {
+        // assume the policy is satisfied for blocks on PROVIDED storage
+        // as long as the storage is in normal state.
+        return true;
+      }
+      final DatanodeDescriptor cur = getDatanodeDescriptorFromStorage(storage);
+
+  @VisibleForTesting
+  public ProvidedStorageMap getProvidedStorageMap() {
+    return providedStorageMap;
+  }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS39 INS42 INS44 INS44 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS41 INS41 INS43 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS70 INS21 INS42 INS42 INS41 INS66 INS7 UPD42 MOV42 INS42 INS42 INS42 INS32 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS27 INS8 MOV32 INS32 INS42 INS43 INS85 INS42 INS44 INS42 INS8 INS32 INS42 INS42 INS14 INS33 INS38 INS42 INS16 INS42 INS42 INS42 INS42 INS66 INS42 INS32 INS40 INS41 INS25 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS43 INS42 INS52 INS42 INS32 INS42 INS27 MOV32 INS32 INS60 INS21 INS60 INS42 INS42 INS32 MOV27 INS8 INS42 INS32 INS8 INS27 INS8 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 MOV43 INS59 INS42 INS42 INS32 MOV25 MOV21 INS42 INS42 INS42 INS32 INS25 INS27 INS27 INS41 INS42 INS16 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS38 MOV8 INS32 INS40 INS32 INS40 INS9 UPD42 UPD42 INS27 MOV32 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS40 INS21 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS32 INS42 MOV32 INS32 INS42 INS9 INS42 INS42 INS7 INS40 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 MOV42 MOV42 MOV42 INS43 INS42 MOV32 INS32 INS32 INS42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL40 DEL14 DEL59 DEL60 DEL32 DEL42 DEL27 DEL42 DEL83 DEL42 DEL43 DEL43 DEL74 DEL40 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL83 DEL83