    HADOOP-8285 Use ProtoBuf for RpcPayLoadHeader (sanjay radia)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329319 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.ipc.RpcPayloadHeader.*;
+import org.apache.hadoop.ipc.protobuf.RpcPayloadHeaderProtos.RpcPayloadHeaderProto;
+import org.apache.hadoop.ipc.protobuf.RpcPayloadHeaderProtos.RpcPayloadOperationProto;
-    final RpcKind rpcKind;      // Rpc EngineKind
+    final RPC.RpcKind rpcKind;      // Rpc EngineKind
-    protected Call(RpcKind rpcKind, Writable param) {
+    protected Call(RPC.RpcKind rpcKind, Writable param) {
-          writeHeader();
+          writeConnectionContext();
-    /* Write the protocol header for each connection
+    /* Write the connection context header for each connection
-    private void writeHeader() throws IOException {
+    private void writeConnectionContext() throws IOException {
+
-          //for serializing the
-          //data to be written
+          // Serializing the data to be written.
+          // Format:
+          // 0) Length of rest below (1 + 2)
+          // 1) PayloadHeader  - is serialized Delimited hence contains length
+          // 2) the Payload - the RpcRequest
+          //
-          d.writeInt(0); // placeholder for data length
-          RpcPayloadHeader header = new RpcPayloadHeader(
-              call.rpcKind, RpcPayloadOperation.RPC_FINAL_PAYLOAD, call.id);
-          header.write(d);
+          RpcPayloadHeaderProto header = ProtoUtil.makeRpcPayloadHeader(
+             call.rpcKind, RpcPayloadOperationProto.RPC_FINAL_PAYLOAD, call.id);
+          header.writeDelimitedTo(d);
-          int dataLength = d.getLength() - 4;
-          data[0] = (byte)((dataLength >>> 24) & 0xff);
-          data[1] = (byte)((dataLength >>> 16) & 0xff);
-          data[2] = (byte)((dataLength >>> 8) & 0xff);
-          data[3] = (byte)(dataLength & 0xff);
-          out.write(data, 0, dataLength + 4);//write the data
+   
+          int totalLength = d.getLength();
+          out.writeInt(totalLength); // Total Length
+          out.write(data, 0, totalLength);//PayloadHeader + RpcRequest
-      super(RpcKind.RPC_WRITABLE, param);
+      super(RPC.RpcKind.RPC_WRITABLE, param);
-   * Same as {@link #call(RpcPayloadHeader.RpcKind, Writable, ConnectionId)}
+   * Same as {@link #call(RPC.RpcKind, Writable, ConnectionId)}
-    return call(RpcKind.RPC_BUILTIN, param, address);
+    return call(RPC.RpcKind.RPC_BUILTIN, param, address);
-   * @deprecated Use {@link #call(RpcPayloadHeader.RpcKind, Writable,
+   * @deprecated Use {@link #call(RPC.RpcKind, Writable,
-  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress address)
+  public Writable call(RPC.RpcKind rpcKind, Writable param, InetSocketAddress address)
-   * @deprecated Use {@link #call(RpcPayloadHeader.RpcKind, Writable, 
+   * @deprecated Use {@link #call(RPC.RpcKind, Writable, 
-  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress addr, 
+  public Writable call(RPC.RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-   * @deprecated Use {@link #call(RpcPayloadHeader.RpcKind, Writable,
+   * @deprecated Use {@link #call(RPC.RpcKind, Writable,
-  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress addr, 
+  public Writable call(RPC.RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-   * Same as {@link #call(RpcPayloadHeader.RpcKind, Writable, InetSocketAddress, 
+   * Same as {@link #call(RPC.RpcKind, Writable, InetSocketAddress, 
-    return call(RpcKind.RPC_BUILTIN, param, remoteId);
+    return call(RPC.RpcKind.RPC_BUILTIN, param, remoteId);
-  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress addr, 
+  public Writable call(RPC.RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-   * Same as {link {@link #call(RpcPayloadHeader.RpcKind, Writable, ConnectionId)}
+   * Same as {link {@link #call(RPC.RpcKind, Writable, ConnectionId)}
-     return call(RpcKind.RPC_BUILTIN, param, remoteId);
+     return call(RPC.RpcKind.RPC_BUILTIN, param, remoteId);
-  public Writable call(RpcKind rpcKind, Writable rpcRequest,
+  public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,

MOV26 INS26 UPD40 INS40 MOV29 MOV29 MOV29 MOV29 UPD43 UPD42 UPD65 INS65 UPD65 UPD43 UPD43 MOV65 UPD43 UPD43 UPD43 INS40 UPD43 UPD66 UPD66 INS66 INS66 INS66 UPD66 UPD66 INS40 UPD66 INS66 UPD66 INS66 INS40 UPD66 MOV66 MOV66 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 INS32 UPD42 UPD42 INS32 UPD42 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS40 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL43 DEL40 DEL40 DEL40 DEL14 DEL34 DEL27 DEL42 DEL34 DEL2 DEL39 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL11 DEL7 DEL42 DEL34 DEL2 DEL39 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL11 DEL7 DEL21 DEL42 DEL34 DEL2 DEL39 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL36 DEL11 DEL7 DEL21 DEL42 DEL34 DEL2 DEL39 DEL42 DEL34 DEL27 DEL36 DEL11 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42