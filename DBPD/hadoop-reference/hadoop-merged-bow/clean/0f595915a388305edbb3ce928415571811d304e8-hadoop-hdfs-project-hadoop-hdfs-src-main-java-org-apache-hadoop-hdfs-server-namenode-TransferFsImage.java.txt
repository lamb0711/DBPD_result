HDFS-3405. Checkpointing should use HTTP POST or PUT instead of GET-GET to send merged fsimages. Contributed by Vinayakumar B.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575457 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.io.OutputStream;
+import java.net.URISyntaxException;
+import java.util.Map;
+import java.util.Map.Entry;
-import javax.servlet.ServletOutputStream;
-import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import org.apache.hadoop.io.IOUtils;
+import org.apache.http.client.utils.URIBuilder;
+  public final static String FILE_LENGTH = "File-Length";
+
+  private final static String CONTENT_TYPE = "Content-Type";
+  private final static String CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding";
+
-    String fileId = GetImageServlet.getParamStringForMostRecentImage();
+    String fileId = ImageServlet.getParamStringForMostRecentImage();
-    String fileid = GetImageServlet.getParamStringForImage(null,
+    String fileid = ImageServlet.getParamStringForImage(null,
-  
+
+  static MD5Hash handleUploadImageRequest(HttpServletRequest request,
+      long imageTxId, Storage dstStorage, InputStream stream,
+      long advertisedSize, DataTransferThrottler throttler) throws IOException {
+
+    String fileName = NNStorage.getCheckpointImageFileName(imageTxId);
+
+    List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName);
+    if (dstFiles.isEmpty()) {
+      throw new IOException("No targets in destination storage!");
+    }
+
+    MD5Hash advertisedDigest = parseMD5Header(request);
+    MD5Hash hash = receiveFile(fileName, dstFiles, dstStorage, true,
+        advertisedSize, advertisedDigest, fileName, stream, throttler);
+    LOG.info("Downloaded file " + dstFiles.get(0).getName() + " size "
+        + dstFiles.get(0).length() + " bytes.");
+    return hash;
+  }
+
-    String fileid = GetImageServlet.getParamStringForLog(
+    String fileid = ImageServlet.getParamStringForLog(
-   * @param myNNAddress the host/port where the local node is running an
-   *                           HTTPServer hosting GetImageServlet
+   * @param conf Configuration
-  public static void uploadImageFromStorage(URL fsName, URL myNNAddress,
-      Storage storage, NameNodeFile nnf, long txid) throws IOException {
+  public static void uploadImageFromStorage(URL fsName, Configuration conf,
+      NNStorage storage, NameNodeFile nnf, long txid) throws IOException {
-    String fileid = GetImageServlet.getParamStringToPutImage(nnf, txid,
-        myNNAddress, storage);
-    // this doesn't directly upload an image, but rather asks the NN
-    // to connect back to the 2NN to download the specified image.
+    URL url = new URL(fsName, ImageServlet.PATH_SPEC);
+    long startTime = Time.monotonicNow();
-      TransferFsImage.getFileClient(fsName, fileid, null, null, false);
-    } catch (HttpGetFailedException e) {
+      uploadImage(url, conf, storage, nnf, txid);
+    } catch (HttpPutFailedException e) {
-    LOG.info("Uploaded image with txid " + txid + " to namenode at " +
-    		fsName);
+    double xferSec = Math.max(
+        ((float) (Time.monotonicNow() - startTime)) / 1000.0, 0.001);
+    LOG.info("Uploaded image with txid " + txid + " to namenode at " + fsName
+        + " in " + xferSec + " seconds");
-  
+  /*
+   * Uploads the imagefile using HTTP PUT method
+   */
+  private static void uploadImage(URL url, Configuration conf,
+      NNStorage storage, NameNodeFile nnf, long txId) throws IOException {
+
+    File imageFile = storage.findImageFile(nnf, txId);
+    if (imageFile == null) {
+      throw new IOException("Could not find image with txid " + txId);
+    }
+
+    HttpURLConnection connection = null;
+    try {
+      URIBuilder uriBuilder = new URIBuilder(url.toURI());
+
+      // write all params for image upload request as query itself.
+      // Request body contains the image to be uploaded.
+      Map<String, String> params = ImageServlet.getParamsForPutImage(storage,
+          txId, imageFile.length(), nnf);
+      for (Entry<String, String> entry : params.entrySet()) {
+        uriBuilder.addParameter(entry.getKey(), entry.getValue());
+      }
+
+      URL urlWithParams = uriBuilder.build().toURL();
+      connection = (HttpURLConnection) connectionFactory.openConnection(
+          urlWithParams, UserGroupInformation.isSecurityEnabled());
+      // Set the request to PUT
+      connection.setRequestMethod("PUT");
+      connection.setDoOutput(true);
+
+      
+      int chunkSize = conf.getInt(
+          DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_KEY,
+          DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_DEFAULT);
+      if (imageFile.length() > chunkSize) {
+        // using chunked streaming mode to support upload of 2GB+ files and to
+        // avoid internal buffering.
+        // this mode should be used only if more than chunkSize data is present
+        // to upload. otherwise upload may not happen sometimes.
+        connection.setChunkedStreamingMode(chunkSize);
+      }
+
+      setTimeout(connection);
+
+      // set headers for verification
+      ImageServlet.setVerificationHeadersForPut(connection, imageFile);
+
+      // Write the file to output stream.
+      writeFileToPutRequest(conf, connection, imageFile);
+
+      int responseCode = connection.getResponseCode();
+      if (responseCode != HttpURLConnection.HTTP_OK) {
+        throw new HttpPutFailedException(connection.getResponseMessage(),
+            responseCode);
+      }
+    } catch (AuthenticationException e) {
+      throw new IOException(e);
+    } catch (URISyntaxException e) {
+      throw new IOException(e);
+    } finally {
+      if (connection != null) {
+        connection.disconnect();
+      }
+    }
+  }
+
+  private static void writeFileToPutRequest(Configuration conf,
+      HttpURLConnection connection, File imageFile)
+      throws FileNotFoundException, IOException {
+    connection.setRequestProperty(CONTENT_TYPE, "application/octet-stream");
+    connection.setRequestProperty(CONTENT_TRANSFER_ENCODING, "binary");
+    OutputStream output = connection.getOutputStream();
+    FileInputStream input = new FileInputStream(imageFile);
+    try {
+      copyFileToStream(output, imageFile, input,
+          ImageServlet.getThrottler(conf));
+    } finally {
+      IOUtils.closeStream(input);
+      IOUtils.closeStream(output);
+    }
+  }
+
-  public static void getFileServer(ServletResponse response, File localfile,
-      FileInputStream infile,
-      DataTransferThrottler throttler) 
+  public static void copyFileToStream(OutputStream out, File localfile,
+      FileInputStream infile, DataTransferThrottler throttler)
-    ServletOutputStream out = null;
-      out = response.getOutputStream();
-    URL url = new URL(infoServer, "/getimage?" + queryString);
+    URL url = new URL(infoServer, ImageServlet.PATH_SPEC + "?" + queryString);
-    long startTime = Time.monotonicNow();
-    if (timeout <= 0) {
-      Configuration conf = new HdfsConfiguration();
-      timeout = conf.getInt(DFSConfigKeys.DFS_IMAGE_TRANSFER_TIMEOUT_KEY,
-          DFSConfigKeys.DFS_IMAGE_TRANSFER_TIMEOUT_DEFAULT);
-    }
-
-    if (timeout > 0) {
-      connection.setConnectTimeout(timeout);
-      connection.setReadTimeout(timeout);
-    }
+    setTimeout(connection);
-    
+    MD5Hash advertisedDigest = parseMD5Header(connection);
+    String fsImageName = connection
+        .getHeaderField(ImageServlet.HADOOP_IMAGE_EDITS_HEADER);
+    InputStream stream = connection.getInputStream();
+
+    return receiveFile(url.toExternalForm(), localPaths, dstStorage,
+        getChecksum, advertisedSize, advertisedDigest, fsImageName, stream,
+        null);
+  }
+
+  private static void setTimeout(HttpURLConnection connection) {
+    if (timeout <= 0) {
+      Configuration conf = new HdfsConfiguration();
+      timeout = conf.getInt(DFSConfigKeys.DFS_IMAGE_TRANSFER_TIMEOUT_KEY,
+          DFSConfigKeys.DFS_IMAGE_TRANSFER_TIMEOUT_DEFAULT);
+      LOG.info("Image Transfer timeout configured to " + timeout
+          + " milliseconds");
+    }
+
+    if (timeout > 0) {
+      connection.setConnectTimeout(timeout);
+      connection.setReadTimeout(timeout);
+    }
+  }
+
+  private static MD5Hash receiveFile(String url, List<File> localPaths,
+      Storage dstStorage, boolean getChecksum, long advertisedSize,
+      MD5Hash advertisedDigest, String fsImageName, InputStream stream,
+      DataTransferThrottler throttler) throws IOException {
+    long startTime = Time.monotonicNow();
-      String fsImageName = connection.getHeaderField(
-          GetImageServlet.HADOOP_IMAGE_EDITS_HEADER);
-    MD5Hash advertisedDigest = parseMD5Header(connection);
-    InputStream stream = connection.getInputStream();
+          if (throttler != null) {
+            throttler.throttle(num);
+          }
-  
+
+  private static MD5Hash parseMD5Header(HttpServletRequest request) {
+    String header = request.getHeader(MD5_HEADER);
+    return (header != null) ? new MD5Hash(header) : null;
+  }
+
+  public static class HttpPutFailedException extends IOException {
+    private static final long serialVersionUID = 1L;
+    private final int responseCode;
+
+    HttpPutFailedException(String msg, int responseCode) throws IOException {
+      super(msg);
+      this.responseCode = responseCode;
+    }
+
+    public int getResponseCode() {
+      return responseCode;
+    }
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 UPD40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 UPD42 INS83 INS83 INS43 INS42 MOV44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 UPD83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS21 INS41 INS43 INS42 UPD43 INS60 INS60 INS60 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS60 INS54 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS60 INS60 INS54 UPD43 UPD42 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS42 MOV60 MOV54 INS21 MOV25 MOV60 MOV60 MOV25 MOV60 INS60 MOV60 INS41 INS43 INS42 MOV25 MOV25 MOV43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS60 INS41 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS8 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS42 MOV43 UPD42 UPD66 INS42 UPD42 MOV43 INS59 INS39 INS59 INS39 MOV59 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS12 INS8 INS42 INS42 INS42 INS32 INS32 INS43 INS59 INS43 INS59 INS8 INS8 UPD42 INS43 INS43 INS42 INS32 MOV43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS16 INS42 INS34 INS42 INS43 INS42 INS39 INS42 INS42 INS46 INS21 INS41 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 MOV42 INS42 INS14 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS33 INS60 INS60 INS70 INS60 INS21 INS21 INS21 INS60 INS25 INS21 INS21 INS21 INS60 INS25 INS44 INS8 INS44 INS8 INS25 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS14 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS32 INS36 INS14 INS33 INS42 INS42 INS7 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 UPD42 INS43 INS42 INS40 INS42 INS42 UPD43 UPD42 UPD42 INS27 INS34 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS43 INS59 INS74 INS59 INS44 INS32 INS8 MOV43 INS59 INS7 INS32 INS32 INS39 INS59 INS27 INS8 INS32 INS32 INS32 INS39 INS59 INS27 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS43 INS42 INS32 INS32 INS32 INS43 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS43 INS42 INS22 INS42 INS43 INS45 INS32 INS42 INS32 INS42 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 INS36 INS34 INS43 INS27 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS11 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS32 INS32 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS53 INS42 INS14 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 UPD45 INS42 INS42 INS27 INS42 INS33 INS42 INS52 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS11 INS42 INS45 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS32 INS32 INS42 INS43 INS32 INS42 INS42 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS39 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS25 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS33 INS21 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 DEL66 DEL42 DEL60 DEL33 DEL33 DEL9 DEL42 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60