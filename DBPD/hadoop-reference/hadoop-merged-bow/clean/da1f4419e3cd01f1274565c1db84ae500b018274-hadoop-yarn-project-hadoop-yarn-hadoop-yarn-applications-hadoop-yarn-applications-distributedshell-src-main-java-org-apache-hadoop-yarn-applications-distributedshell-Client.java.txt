merge the rest of trunk to branch HDFS-4949

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532967 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.ByteBuffer;
-import java.util.EnumSet;
+import org.apache.hadoop.io.DataOutputBuffer;
+import org.apache.hadoop.security.Credentials;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.yarn.api.ApplicationClientProtocol;
-import org.apache.hadoop.yarn.api.ApplicationClientProtocol;
+  // Amt. of virtual core resource to request for to run the App Master
+  private int amVCores = 1;
-  private final String appMasterMainClass =
-      "org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster";
+  private final String appMasterMainClass;
+  // Amt. of virtual cores to request for container in which shell script will be executed
+  private int containerVirtualCores = 1;
-    
+    this(
+      "org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster",
+      conf);
+  }
+
+  Client(String appMasterMainClass, Configuration conf) {
+    this.appMasterMainClass = appMasterMainClass;
+    opts.addOption("master_vcores", true, "Amount of virtual cores to be requested to run the application master");
+    opts.addOption("container_vcores", true, "Amount of virtual cores to be requested to run the shell command");
+
-
+    amVCores = Integer.parseInt(cliParser.getOptionValue("master_vcores", "1"));
+    
+    if (amVCores < 0) {
+      throw new IllegalArgumentException("Invalid virtual cores specified for application master, exiting."
+          + " Specified virtual cores=" + amVCores);
+    }
+    containerVirtualCores = Integer.parseInt(cliParser.getOptionValue("container_vcores", "1"));
-    if (containerMemory < 0 || numContainers < 1) {
-      throw new IllegalArgumentException("Invalid no. of containers or container memory specified, exiting."
+    if (containerMemory < 0 || containerVirtualCores < 0 || numContainers < 1) {
+      throw new IllegalArgumentException("Invalid no. of containers or container memory/vcores specified,"
+          + " exiting."
+          + ", containerVirtualCores=" + containerVirtualCores
+    int maxVCores = appResponse.getMaximumResourceCapability().getVirtualCores();
+    LOG.info("Max virtual cores capabililty of resources in this cluster " + maxVCores);
+    
+    if (amVCores > maxVCores) {
+      LOG.info("AM virtual cores specified above max threshold of cluster. " 
+          + "Using max value." + ", specified=" + amVCores 
+          + ", max=" + maxVCores);
+      amVCores = maxVCores;
+    }
+    
+    vargs.add("--container_vcores " + String.valueOf(containerVirtualCores));
-    // For now, only memory is supported so we set memory requirements
+    // For now, both memory and vcores are supported, so we set memory and 
+    // vcores requirements
+    capability.setVirtualCores(amVCores);
-    // The following are not required for launching an application master 
-    // amContainer.setContainerId(containerId);		
+    // Setup security tokens
+    if (UserGroupInformation.isSecurityEnabled()) {
+      Credentials credentials = new Credentials();
+      String tokenRenewer = conf.get(YarnConfiguration.RM_PRINCIPAL);
+      if (tokenRenewer == null || tokenRenewer.length() == 0) {
+        throw new IOException(
+          "Can't get Master Kerberos principal for the RM to use as renewer");
+      }
+
+      // For now, only getting tokens for the default file-system.
+      final Token<?> tokens[] =
+          fs.addDelegationTokens(tokenRenewer, credentials);
+      if (tokens != null) {
+        for (Token<?> token : tokens) {
+          LOG.info("Got dt for " + fs.getUri() + "; " + token);
+        }
+      }
+      DataOutputBuffer dob = new DataOutputBuffer();
+      credentials.writeTokenStorageToStream(dob);
+      ByteBuffer fsTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());
+      amContainer.setTokens(fsTokens);
+    }

MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 MOV83 INS39 INS59 INS83 MOV83 MOV43 INS59 INS83 INS39 INS59 INS29 INS83 INS42 INS44 MOV43 INS8 INS44 INS42 INS34 MOV42 INS42 INS34 INS43 INS42 INS17 INS43 INS42 INS21 INS21 INS21 INS21 INS25 INS21 INS60 INS21 INS25 INS21 INS21 INS25 INS42 INS45 INS42 INS42 INS7 INS32 INS32 INS7 INS27 INS8 INS7 INS39 INS59 INS32 INS27 INS8 INS32 INS32 INS32 INS8 INS22 INS42 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS9 INS45 INS42 INS32 INS42 INS34 INS53 INS42 INS32 INS27 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS21 INS60 INS21 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS32 MOV27 INS27 INS32 INS42 INS45 INS42 INS32 INS7 INS45 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS83 INS74 INS59 INS27 INS8 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 INS45 INS45 INS43 INS27 INS42 INS42 INS45 INS45 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS27 INS27 INS53 INS43 INS76 INS42 INS85 INS32 INS42 INS33 INS70 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS40 INS42 INS33 INS32 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS43 INS42 INS42 INS32 INS34 INS32 UPD45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS43 INS45 INS74 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS32 INS42 INS42 INS42 INS27 INS45 INS32 INS45 INS42 INS42 INS42 DEL45 DEL59 DEL23 DEL29 DEL83