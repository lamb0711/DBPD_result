HDFS-5932. Ls should display the ACL bit. Contributed by Chris Nauroth.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1567850 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.URI;
+import java.util.Set;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.ipc.RemoteException;
+import org.apache.hadoop.ipc.RpcNoSuchMethodException;
+
+import com.google.common.collect.Sets;
+  private Set<URI> aclNotSupportedFsSet = Sets.newHashSet();
+
-        stat.getPermission(),
+        stat.getPermission() + (hasAcl(item) ? "+" : ""),
+  /**
+   * Calls getAclStatus to determine if the given item has an ACL.  For
+   * compatibility, this method traps errors caused by the RPC method missing
+   * from the server side.  This would happen if the client was connected to an
+   * old NameNode that didn't have the ACL APIs.  This method also traps the
+   * case of the client-side FileSystem not implementing the ACL APIs.
+   * FileSystem instances that do not support ACLs are remembered.  This
+   * prevents the client from sending multiple failing RPC calls during a
+   * recursive ls.
+   *
+   * @param item PathData item to check
+   * @return boolean true if item has an ACL
+   * @throws IOException if there is a failure
+   */
+  private boolean hasAcl(PathData item) throws IOException {
+    FileSystem fs = item.fs;
+    if (aclNotSupportedFsSet.contains(fs.getUri())) {
+      // This FileSystem failed to run the ACL API in an earlier iteration.
+      return false;
+    }
+    try {
+      return !fs.getAclStatus(item.path).getEntries().isEmpty();
+    } catch (RemoteException e) {
+      // If this is a RpcNoSuchMethodException, then the client is connected to
+      // an older NameNode that doesn't support ACLs.  Keep going.
+      IOException e2 = e.unwrapRemoteException(RpcNoSuchMethodException.class);
+      if (!(e2 instanceof RpcNoSuchMethodException)) {
+        throw e;
+      }
+    } catch (IOException e) {
+      // The NameNode supports ACLs, but they are not enabled.  Keep going.
+      String message = e.getMessage();
+      if (message != null && !message.contains("ACLs has been disabled")) {
+        throw e;
+      }
+    } catch (UnsupportedOperationException e) {
+      // The underlying FileSystem doesn't implement ACLs.  Keep going.
+    }
+    // Remember that this FileSystem cannot support ACLs.
+    aclNotSupportedFsSet.add(fs.getUri());
+    return false;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS43 INS43 INS42 INS32 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS25 INS54 INS21 INS41 INS42 INS42 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS8 INS8 INS12 INS12 INS12 INS32 INS9 INS42 INS42 INS40 INS42 INS42 INS32 INS41 INS41 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS9 INS38 INS43 INS42 INS60 INS25 INS43 INS42 INS60 INS25 INS43 INS42 INS42 INS42 MOV32 INS36 INS32 INS42 INS43 INS59 INS38 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS16 INS32 INS42 INS42 INS42 INS32 INS36 INS53 INS42 INS42 INS32 INS27 INS38 INS53 INS32 INS45 INS45 INS32 INS42 INS42 INS42 INS57 INS62 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 MOV42 INS42 INS42 INS40 INS43 INS42 INS43 INS42 INS42 INS45 INS42 INS42