YARN-1510. Make NMClient support change container resources. (Meng Ding via wangda)

+import org.apache.hadoop.yarn.api.records.Resource;
- * class MyCallbackHandler implements NMClientAsync.CallbackHandler {
+ * class MyCallbackHandler extends NMClientAsync.AbstractCallbackHandler {
+
+ *   public void onContainerResourceIncreased(ContainerId containerId,
+ *       Resource resource) {
+ *     [post process after the container resource is increased]
+ *   }
+      AbstractCallbackHandler callbackHandler) {
+    return new NMClientAsyncImpl(callbackHandler);
+  }
+
+  protected NMClientAsync(AbstractCallbackHandler callbackHandler) {
+    this (NMClientAsync.class.getName(), callbackHandler);
+  }
+
+  protected NMClientAsync(
+      String name, AbstractCallbackHandler callbackHandler) {
+    this (name, new NMClientImpl(), callbackHandler);
+  }
+
+  protected NMClientAsync(String name, NMClient client,
+      AbstractCallbackHandler callbackHandler) {
+    super(name);
+    this.setClient(client);
+    this.setCallbackHandler(callbackHandler);
+  }
+
+  /**
+   * @deprecated Use {@link #createNMClientAsync(AbstractCallbackHandler)}
+   *             instead.
+   */
+  @Deprecated
+  public static NMClientAsync createNMClientAsync(
-  
+
+  /**
+   * @deprecated Use {@link #NMClientAsync(AbstractCallbackHandler)}
+   *             instead.
+   */
+  @Deprecated
+  /**
+   * @deprecated Use {@link #NMClientAsync(String, AbstractCallbackHandler)}
+   *             instead.
+   */
+  @Deprecated
+  @Deprecated
+  public abstract void increaseContainerResourceAsync(Container container);
+
+   * The callback abstract class. The callback functions need to be implemented
+   * by {@link NMClientAsync} users. The APIs are called when responses from
+   * <code>NodeManager</code> are available.
+   * </p>
+   *
+   * <p>
+   * Once a callback happens, the users can chose to act on it in blocking or
+   * non-blocking manner. If the action on callback is done in a blocking
+   * manner, some of the threads performing requests on NodeManagers may get
+   * blocked depending on how many threads in the pool are busy.
+   * </p>
+   *
+   * <p>
+   * The implementation of the callback functions should not throw the
+   * unexpected exception. Otherwise, {@link NMClientAsync} will just
+   * catch, log and then ignore it.
+   * </p>
+   */
+  public abstract static class AbstractCallbackHandler
+      implements CallbackHandler {
+    /**
+     * The API is called when <code>NodeManager</code> responds to indicate its
+     * acceptance of the starting container request.
+     *
+     * @param containerId the Id of the container
+     * @param allServiceResponse a Map between the auxiliary service names and
+     *                           their outputs
+     */
+    public abstract void onContainerStarted(ContainerId containerId,
+        Map<String, ByteBuffer> allServiceResponse);
+
+    /**
+     * The API is called when <code>NodeManager</code> responds with the status
+     * of the container.
+     *
+     * @param containerId the Id of the container
+     * @param containerStatus the status of the container
+     */
+    public abstract void onContainerStatusReceived(ContainerId containerId,
+        ContainerStatus containerStatus);
+
+    /**
+     * The API is called when <code>NodeManager</code> responds to indicate the
+     * container is stopped.
+     *
+     * @param containerId the Id of the container
+     */
+    public abstract void onContainerStopped(ContainerId containerId);
+
+    /**
+     * The API is called when an exception is raised in the process of
+     * starting a container.
+     *
+     * @param containerId the Id of the container
+     * @param t the raised exception
+     */
+    public abstract void onStartContainerError(
+        ContainerId containerId, Throwable t);
+
+    /**
+     * The API is called when <code>NodeManager</code> responds to indicate
+     * the container resource has been successfully increased.
+     *
+     * @param containerId the Id of the container
+     * @param resource the target resource of the container
+     */
+    public abstract void onContainerResourceIncreased(
+        ContainerId containerId, Resource resource);
+
+    /**
+     * The API is called when an exception is raised in the process of
+     * querying the status of a container.
+     *
+     * @param containerId the Id of the container
+     * @param t the raised exception
+     */
+    public abstract void onGetContainerStatusError(
+        ContainerId containerId, Throwable t);
+
+    /**
+     * The API is called when an exception is raised in the process of
+     * increasing container resource.
+     *
+     * @param containerId the Id of the container
+     * @param t the raised exception
+     */
+    public abstract void onIncreaseContainerResourceError(
+        ContainerId containerId, Throwable t);
+
+    /**
+     * The API is called when an exception is raised in the process of
+     * stopping a container.
+     *
+     * @param containerId the Id of the container
+     * @param t the raised exception
+     */
+    public abstract void onStopContainerError(
+        ContainerId containerId, Throwable t);
+  }
+
+  /**
+   * @deprecated Use {@link NMClientAsync.AbstractCallbackHandler} instead.
+   *
+   * <p>
+  @Deprecated

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS55 INS44 INS44 INS44 INS83 INS42 INS44 INS44 INS44 INS8 INS29 INS78 INS83 INS83 INS43 INS42 MOV44 INS8 INS29 INS78 INS83 INS42 MOV44 INS8 INS29 INS78 INS83 INS42 INS44 MOV44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS29 INS83 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS66 INS66 INS66 INS66 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS21 INS65 INS42 INS42 INS41 INS65 INS42 INS17 INS65 INS42 INS43 INS42 INS17 INS42 INS43 INS42 INS65 INS42 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 UPD65 INS42 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS66 INS65 INS66 INS14 INS66 INS65 INS66 INS32 INS42 INS66 INS65 INS66 INS42 INS42 INS14 INS42 INS42 INS66 INS66 INS66 MOV65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV65 INS66 INS66 INS66 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS65 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS66 INS65 INS66 INS65 INS65 INS52 INS42 INS42 INS52 INS42 INS42 INS68 INS43 INS42 INS68 INS57 INS42 INS68 INS43 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS43 INS43 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS40 INS42 INS42 INS42 INS69 INS42 INS42 INS69 INS43 INS42 INS69 INS69 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS42 INS42