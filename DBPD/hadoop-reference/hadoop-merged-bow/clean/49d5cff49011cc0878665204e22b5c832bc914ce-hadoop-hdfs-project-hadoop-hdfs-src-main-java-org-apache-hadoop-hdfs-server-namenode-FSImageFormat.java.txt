HDFS-8559. Erasure Coding: fix non-protobuf fsimage for striped blocks. (Jing Zhao via yliu)

-          if (NameNodeLayoutVersion.supports(
-              NameNodeLayoutVersion.Feature.ERASURE_CODING, imgVersion)) {
-            final long maxStripedBlockId = in.readLong();
-            namesystem.getBlockIdManager().setLastAllocatedStripedBlockId(
-                maxStripedBlockId);
-          }
-    final boolean isStriped = NameNodeLayoutVersion.supports(
-            NameNodeLayoutVersion.Feature.ERASURE_CODING, imgVersion)
-            && (in.readBoolean());
-    // TODO: ECSchema can be restored from persisted file (HDFS-7859).
-    final ECSchema schema = isStriped ?
-        ErasureCodingSchemaManager.getSystemDefaultSchema() : null;
-      Block[] blocks;
-      if (isStriped) {
-        blocks = new Block[numBlocks];
-        for (int j = 0; j < numBlocks; j++) {
-          blocks[j] = new BlockInfoStriped(new Block(), schema);
-          blocks[j].readFields(in);
-        }
-      } else {
-        blocks = new BlockInfoContiguous[numBlocks];
-        for (int j = 0; j < numBlocks; j++) {
-          blocks[j] = new BlockInfoContiguous(replication);
-          blocks[j].readFields(in);
-        }
+      Block[] blocks = new BlockInfoContiguous[numBlocks];
+      for (int j = 0; j < numBlocks; j++) {
+        blocks[j] = new BlockInfoContiguous(replication);
+        blocks[j].readFields(in);
-              if (isStriped){
-                BlockInfoStriped lastStripedBlk = (BlockInfoStriped) lastBlk;
-                blocks[blocks.length - 1]
-                        = new BlockInfoStripedUnderConstruction(lastBlk,
-                                lastStripedBlk.getSchema());
-              } else {
-                blocks[blocks.length - 1]
-                        = new BlockInfoContiguousUnderConstruction(lastBlk,
-                                replication);
-              }
+              blocks[blocks.length - 1] =
+                  new BlockInfoContiguousUnderConstruction(lastBlk, replication);
-      INodeFile file;
-      if (isStriped) {
-        file = new INodeFile(inodeId, localName, permissions, modificationTime,
-            atime, new BlockInfoContiguous[0], (short) 0, blockSize);
-        file.addStripedBlocksFeature();
-        for (Block block : blocks) {
-          file.getStripedBlocksFeature().addBlock((BlockInfoStriped) block);
-        }
-      } else {
-        file = new INodeFile(inodeId, localName, permissions,
-            modificationTime, atime, (BlockInfoContiguous[]) blocks,
-            replication, blockSize);
-      }
+      INodeFile file = new INodeFile(inodeId, localName, permissions,
+          modificationTime, atime, (BlockInfoContiguous[]) blocks,
+          replication, blockSize);
-        out.writeLong(sourceNamesystem.getBlockIdManager().getLastAllocatedStripedBlockId());

MOV21 MOV21 MOV21 MOV21 MOV24 MOV25 MOV32 MOV3 MOV21 MOV14 UPD42 MOV21 INS42 MOV21 MOV21 MOV27 MOV60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL36 DEL27 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL39 DEL34 DEL11 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL21 DEL8 DEL70 DEL8 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21