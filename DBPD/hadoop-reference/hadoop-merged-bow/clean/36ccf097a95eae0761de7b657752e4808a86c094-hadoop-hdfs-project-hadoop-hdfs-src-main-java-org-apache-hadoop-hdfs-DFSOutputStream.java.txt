HDFS-7276. Limit the number of byte arrays used by DFSOutputStream and provide a mechanism for recycling arrays.

-import com.google.common.base.Preconditions;
-
+import org.apache.hadoop.crypto.CryptoProtocolVersion;
-import org.apache.hadoop.crypto.CryptoProtocolVersion;
+import org.apache.hadoop.hdfs.util.ByteArrayManager;
+import com.google.common.base.Preconditions;
+  private final ByteArrayManager byteArrayManager;
+  /** Use {@link ByteArrayManager} to create buffer for non-heartbeat packets.*/
+  private Packet createPacket(int packetSize, int chunksPerPkt, long offsetInBlock,
+      long seqno) throws InterruptedIOException {
+    final byte[] buf;
+    final int bufferSize = PacketHeader.PKT_MAX_HEADER_LEN + packetSize;
+
+    try {
+      buf = byteArrayManager.newByteArray(bufferSize);
+    } catch (InterruptedException ie) {
+      final InterruptedIOException iioe = new InterruptedIOException(
+          "seqno=" + seqno);
+      iioe.initCause(ie);
+      throw iioe;
+    }
+
+    return new Packet(buf, chunksPerPkt, offsetInBlock, seqno, getChecksumSize());
+  }
+
+  /**
+   * For heartbeat packets, create buffer directly by new byte[]
+   * since heartbeats should not be blocked.
+   */
+  private Packet createHeartbeatPacket() throws InterruptedIOException {
+    final byte[] buf = new byte[PacketHeader.PKT_MAX_HEADER_LEN];
+    return new Packet(buf, 0, 0, Packet.HEART_BEAT_SEQNO, getChecksumSize());
+  }
+
-    final byte[]  buf;
+    private byte[] buf;
-     * Create a heartbeat packet.
-     */
-    Packet(int checksumSize) {
-      this(0, 0, 0, HEART_BEAT_SEQNO, checksumSize);
-    }
-    
-    /**
-    Packet(int pktSize, int chunksPerPkt, long offsetInBlock, 
-                              long seqno, int checksumSize) {
+    private Packet(byte[] buf, int chunksPerPkt, long offsetInBlock, long seqno,
+        int checksumSize) {
-      
-      buf = new byte[PacketHeader.PKT_MAX_HEADER_LEN + pktSize];
-      
+
+      this.buf = buf;
+
+
+    private void releaseBuffer(ByteArrayManager bam) {
+      bam.release(buf);
+      buf = null;
+    }
-              one = new Packet(getChecksumSize());  // heartbeat packet
+              one = createHeartbeatPacket();
+
+              one.releaseBuffer(byteArrayManager);
+    this.byteArrayManager = dfsClient.getClientContext().getByteArrayManager();
-      currentPacket = new Packet(packetSize, chunksPerPacket, 
-          bytesCurBlock, currentSeqno++, getChecksumSize());
+      currentPacket = createPacket(packetSize, chunksPerPacket, 
+          bytesCurBlock, currentSeqno++);
-        currentPacket = new Packet(0, 0, bytesCurBlock, 
-            currentSeqno++, getChecksumSize());
+        currentPacket = createPacket(0, 0, bytesCurBlock, currentSeqno++);
-            currentPacket = new Packet(packetSize, chunksPerPacket,
-                bytesCurBlock, currentSeqno++, getChecksumSize());
+            currentPacket = createPacket(packetSize, chunksPerPacket,
+                bytesCurBlock, currentSeqno++);
-            currentPacket = new Packet(packetSize, chunksPerPacket,
-                bytesCurBlock, currentSeqno++, getChecksumSize());
+            currentPacket = createPacket(packetSize, chunksPerPacket,
+                bytesCurBlock, currentSeqno++);
-        currentPacket = new Packet(0, 0, bytesCurBlock, currentSeqno++, getChecksumSize());
+        currentPacket = createPacket(0, 0, bytesCurBlock, currentSeqno++);

MOV26 MOV26 INS26 INS40 INS23 INS31 INS31 MOV31 INS83 INS83 INS43 INS59 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 MOV43 INS42 INS43 INS8 INS42 INS42 INS65 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS60 INS54 INS41 INS65 INS42 INS60 INS41 UPD83 INS5 INS59 INS83 INS83 INS39 UPD42 INS21 INS66 INS65 INS66 INS83 MOV5 MOV59 INS83 INS39 INS59 INS8 INS12 INS14 INS66 INS66 INS83 INS5 INS59 INS14 INS39 INS85 INS42 INS5 UPD42 INS43 INS42 INS21 INS21 INS7 INS42 INS42 INS27 INS21 INS44 INS8 MOV43 INS42 INS42 INS42 INS42 MOV32 INS39 INS85 INS42 MOV3 MOV43 INS42 INS34 INS34 INS40 MOV32 INS39 INS85 INS42 INS32 INS7 INS22 INS32 INS40 INS42 INS7 INS43 INS42 INS60 INS21 INS53 INS40 INS22 INS42 INS42 INS42 INS42 INS42 INS33 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS83 INS43 INS59 INS32 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV37 INS43 INS27 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS34 INS34 INS42 MOV37 INS42 INS34 INS34 INS42 MOV37 INS21 MOV42 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 MOV37 INS42 INS42 INS42 INS42 MOV37 UPD42 MOV42 MOV42 DEL40 DEL42 DEL27 DEL39 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL34 DEL34 DEL34 DEL42 DEL42 DEL17 DEL32 DEL14 DEL42 DEL42 DEL42 DEL14 DEL34 DEL34 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL43 DEL34 DEL34 DEL42 DEL42 DEL32 DEL14