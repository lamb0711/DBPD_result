HDFS-12777. [READ] Reduce memory and CPU footprint for PROVIDED volumes.

+import com.google.common.annotations.VisibleForTesting;
+  private Path pathPrefix;
+  private String pathSuffix;
+   *
+   * @param conf the configuration
+   * @param remoteFS reference to the remote filesystem to use for this replica.
+  /**
+   * Constructor.
+   *
+   * @param blockId block id
+   * @param pathPrefix A prefix of the {@link Path} associated with this replica
+   *          on the remote {@link FileSystem}.
+   * @param pathSuffix A suffix of the {@link Path} associated with this replica
+   *          on the remote {@link FileSystem}. Resolving the {@code pathSuffix}
+   *          against the {@code pathPrefix} should provide the exact
+   *          {@link Path} of the data associated with this replica on the
+   *          remote {@link FileSystem}.
+   * @param fileOffset the offset in the remote URI
+   * @param blockLen the length of the block
+   * @param genStamp the generation stamp of the block
+   * @param volume the volume this block belongs to
+   * @param conf the configuration
+   * @param remoteFS reference to the remote filesystem to use for this replica.
+   */
+  public ProvidedReplica(long blockId, Path pathPrefix, String pathSuffix,
+      long fileOffset, long blockLen, long genStamp, FsVolumeSpi volume,
+      Configuration conf, FileSystem remoteFS) {
+    super(volume, blockId, blockLen, genStamp);
+    this.fileURI = null;
+    this.pathPrefix = pathPrefix;
+    this.pathSuffix = pathSuffix;
+    this.fileOffset = fileOffset;
+    this.conf = conf;
+    if (remoteFS != null) {
+      this.remoteFS = remoteFS;
+    } else {
+      LOG.warn(
+          "Creating an reference to the remote FS for provided block " + this);
+      try {
+        this.remoteFS = FileSystem.get(pathPrefix.toUri(), this.conf);
+      } catch (IOException e) {
+        LOG.warn("Failed to obtain filesystem for " + pathPrefix);
+        this.remoteFS = null;
+      }
+    }
+  }
+
+    this.pathPrefix = r.pathPrefix;
+    this.pathSuffix = r.pathSuffix;
-    return this.fileURI;
+    return getRemoteURI();
+  }
+
+  @VisibleForTesting
+  public String getPathSuffix() {
+    return pathSuffix;
+  }
+
+  @VisibleForTesting
+  public Path getPathPrefix() {
+    return pathPrefix;
+  }
+
+  private URI getRemoteURI() {
+    if (fileURI != null) {
+      return fileURI;
+    } else if (pathPrefix == null) {
+      return new Path(pathSuffix).toUri();
+    } else {
+      return new Path(pathPrefix, pathSuffix).toUri();
+    }
-      FSDataInputStream ins = remoteFS.open(new Path(fileURI));
+      FSDataInputStream ins = remoteFS.open(new Path(getRemoteURI()));
-        return remoteFS.exists(new Path(fileURI));
+        return remoteFS.exists(new Path(getRemoteURI()));
-        new FileRegion(this.getBlockId(), new Path(fileURI),
+        new FileRegion(this.getBlockId(), new Path(getRemoteURI()),

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 MOV43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS25 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS27 INS8 INS8 INS7 INS7 INS32 INS42 INS42 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS66 INS66 INS42 INS42 MOV22 INS33 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS33 INS21 INS21 INS54 INS22 INS40 INS22 INS40 INS42 INS42 INS33 INS41 INS27 MOV8 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS32 INS8 INS12 INS52 INS42 INS52 INS42 INS42 INS42 INS33 INS41 INS8 INS22 INS42 INS42 INS42 INS27 INS21 INS44 INS8 MOV42 INS32 INS41 INS32 INS52 INS42 INS45 INS52 INS7 INS43 INS42 INS21 INS21 UPD42 INS14 INS42 INS32 INS42 INS22 INS32 INS42 INS32 INS7 UPD42 INS43 INS42 INS42 INS43 INS32 INS42 INS42 INS14 INS52 INS42 INS42 INS42 INS32 INS22 INS42 INS42 INS27 INS22 INS33 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS52 INS42 INS45 INS42 INS52 INS42 INS42 INS42 DEL42 DEL42 DEL42