HDFS-11180. Intermittent deadlock in NameNode when failover happens.

-  private long txid = 0;
+  // All of the threads which update/increment txid are synchronized,
+  // so make txid volatile instead of AtomicLong.
+  private volatile long txid = 0;
-  private long curSegmentTxId = HdfsServerConstants.INVALID_TXID;
+  private volatile long curSegmentTxId = HdfsServerConstants.INVALID_TXID;
-  
+
+  /**
+   * Return true if the log is currently open in write mode.
+   * This method is not synchronized and must be used only for metrics.
+   * @return true if the log is currently open in write mode, regardless
+   * of whether it actually has an open segment.
+   */
+  boolean isOpenForWriteWithoutLock() {
+    return state == State.IN_SEGMENT ||
+        state == State.BETWEEN_LOG_SEGMENTS;
+  }
+
+   * Return true the state is IN_SEGMENT.
+   * This method is not synchronized and must be used only for metrics.
+   * @return true if the log is open in write mode and has a segment open
+   * ready to take edits.
+   */
+  boolean isSegmentOpenWithoutLock() {
+    return state == State.IN_SEGMENT;
+  }
+
+  /**
-  
+
+  /**
+   * Return the transaction ID of the last transaction written to the log.
+   * This method is not synchronized and must be used only for metrics.
+   * @return The transaction ID of the last transaction written to the log
+   */
+  long getLastWrittenTxIdWithoutLock() {
+    return txid;
+  }
+
-  
+
+  /**
+   * Return the first transaction ID in the current log segment.
+   * This method is not synchronized and must be used only for metrics.
+   * @return The first transaction ID in the current log segment
+   */
+  long getCurSegmentTxIdWithoutLock() {
+    return curSegmentTxId;
+  }
+
-  synchronized List<JournalAndStream> getJournals() {
+  List<JournalAndStream> getJournals() {
+    // The list implementation is CopyOnWriteArrayList,
+    // so we don't need to synchronize this method.
-  synchronized public JournalSet getJournalSet() {
+  public JournalSet getJournalSet() {
-  public synchronized long getTotalSyncCount() {
-    if (editLogStream != null) {
-      return editLogStream.getNumSync();
-    } else {
+  public long getTotalSyncCount() {
+    // Avoid NPE as possible.
+    if (editLogStream == null) {
+    long count = 0;
+    try {
+      count = editLogStream.getNumSync();
+    } catch (NullPointerException ignore) {
+      // This method is used for metrics, so we don't synchronize it.
+      // Therefore NPE can happen even if there is a null check before.
+    }
+    return count;

INS31 INS31 INS31 INS31 INS83 INS83 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS65 INS65 INS41 INS65 INS65 INS41 INS65 INS65 INS41 INS65 INS65 INS41 INS60 INS54 INS41 INS66 INS66 INS66 INS66 INS27 INS66 INS66 INS66 INS66 INS27 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 UPD27 INS39 INS59 MOV8 INS12 INS42 INS27 INS27 INS42 INS40 INS42 INS34 INS21 INS44 INS8 INS42 INS40 INS42 INS40 INS7 INS43 INS42 INS42 MOV32 INS42 DEL83 DEL83 DEL83 DEL41