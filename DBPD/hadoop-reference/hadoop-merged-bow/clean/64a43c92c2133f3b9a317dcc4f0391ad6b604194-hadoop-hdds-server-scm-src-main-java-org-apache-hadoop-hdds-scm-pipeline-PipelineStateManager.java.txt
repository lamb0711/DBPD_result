HDDS-656. Add logic for pipeline report and action processing in new pipeline code. Contributed by Lokesh Jain.

-import org.apache.hadoop.hdds.protocol.proto.HddsProtos;
-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleEvent;
-import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;
-import org.apache.hadoop.hdds.scm.ScmConfigKeys;
+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType;
+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor;
-import org.apache.hadoop.hdds.scm.exceptions.SCMException;
-import org.apache.hadoop.ozone.common.statemachine.InvalidStateTransitionException;
-import org.apache.hadoop.ozone.common.statemachine.StateMachine;
-import org.apache.hadoop.ozone.lease.LeaseManager;
+import org.apache.hadoop.hdds.scm.pipeline.Pipeline.PipelineState;
-import java.util.HashSet;
-import java.util.concurrent.TimeUnit;
-
-import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes.FAILED_TO_CHANGE_PIPELINE_STATE;
-  private final StateMachine<LifeCycleState, LifeCycleEvent> stateMachine;
-  private final LeaseManager<Pipeline> pipelineLeaseManager;
-    Set<LifeCycleState> finalStates = new HashSet<>();
-    long pipelineCreationLeaseTimeout = conf.getTimeDuration(
-        ScmConfigKeys.OZONE_SCM_PIPELINE_CREATION_LEASE_TIMEOUT,
-        ScmConfigKeys.OZONE_SCM_PIPELINE_CREATION_LEASE_TIMEOUT_DEFAULT,
-        TimeUnit.MILLISECONDS);
-    // TODO: Use LeaseManager for creation of pipelines.
-    // Add pipeline initialization logic.
-    this.pipelineLeaseManager = new LeaseManager<>("PipelineCreation",
-        pipelineCreationLeaseTimeout);
-    this.pipelineLeaseManager.start();
-
-    finalStates.add(LifeCycleState.CLOSED);
-    this.stateMachine = new StateMachine<>(LifeCycleState.ALLOCATED,
-        finalStates);
-    initializeStateMachine();
-  }
-
-
-  /*
-   * Event and State Transition Mapping.
-   *
-   * State: ALLOCATED ---------------> CREATING
-   * Event:                CREATE
-   *
-   * State: CREATING  ---------------> OPEN
-   * Event:               CREATED
-   *
-   * State: OPEN      ---------------> CLOSING
-   * Event:               FINALIZE
-   *
-   * State: CLOSING   ---------------> CLOSED
-   * Event:                CLOSE
-   *
-   * State: CREATING  ---------------> CLOSED
-   * Event:               TIMEOUT
-   *
-   *
-   * Container State Flow:
-   *
-   * [ALLOCATED]---->[CREATING]------>[OPEN]-------->[CLOSING]
-   *            (CREATE)     | (CREATED)     (FINALIZE)   |
-   *                         |                            |
-   *                         |                            |
-   *                         |(TIMEOUT)                   |(CLOSE)
-   *                         |                            |
-   *                         +--------> [CLOSED] <--------+
-   */
-
-  /**
-   * Add javadoc.
-   */
-  private void initializeStateMachine() {
-    stateMachine.addTransition(LifeCycleState.ALLOCATED,
-        LifeCycleState.CREATING, LifeCycleEvent.CREATE);
-
-    stateMachine.addTransition(LifeCycleState.CREATING,
-        LifeCycleState.OPEN, LifeCycleEvent.CREATED);
-
-    stateMachine.addTransition(LifeCycleState.OPEN,
-        LifeCycleState.CLOSING, LifeCycleEvent.FINALIZE);
-
-    stateMachine.addTransition(LifeCycleState.CLOSING,
-        LifeCycleState.CLOSED, LifeCycleEvent.CLOSE);
-
-    stateMachine.addTransition(LifeCycleState.CREATING,
-        LifeCycleState.CLOSED, LifeCycleEvent.TIMEOUT);
-  }
-
-  Pipeline updatePipelineState(PipelineID pipelineID, LifeCycleEvent event)
-      throws IOException {
-    Pipeline pipeline = null;
-    try {
-      pipeline = pipelineStateMap.getPipeline(pipelineID);
-      LifeCycleState newState =
-          stateMachine.getNextState(pipeline.getLifeCycleState(), event);
-      return pipelineStateMap.updatePipelineState(pipeline.getID(), newState);
-    } catch (InvalidStateTransitionException ex) {
-      String error = String.format("Failed to update pipeline state %s, "
-              + "reason: invalid state transition from state: %s upon "
-              + "event: %s.", pipeline.getID(), pipeline.getLifeCycleState(),
-          event);
-      LOG.error(error);
-      throw new SCMException(error, FAILED_TO_CHANGE_PIPELINE_STATE);
-    }
-  List<Pipeline> getPipelines(HddsProtos.ReplicationType type) {
-    return pipelineStateMap.getPipelines(type);
+  List<Pipeline> getPipelinesByType(ReplicationType type) {
+    return pipelineStateMap.getPipelinesByType(type);
+  }
+
+  List<Pipeline> getPipelinesByTypeAndFactor(ReplicationType type,
+      ReplicationFactor factor) {
+    return pipelineStateMap.getPipelinesByTypeAndFactor(type, factor);
+  int getNumberOfContainers(PipelineID pipelineID) throws IOException {
+    return pipelineStateMap.getNumberOfContainers(pipelineID);
+  }
+
-  void close() {
-    pipelineLeaseManager.shutdown();
+  Pipeline finalizePipeline(PipelineID pipelineId) throws IOException {
+    Pipeline pipeline = pipelineStateMap.getPipeline(pipelineId);
+    if (!pipeline.isClosed()) {
+      pipeline = pipelineStateMap
+          .updatePipelineState(pipelineId, PipelineState.CLOSED);
+    }
+    return pipeline;
+  }
+
+  Pipeline openPipeline(PipelineID pipelineId) throws IOException {
+    Pipeline pipeline = pipelineStateMap.getPipeline(pipelineId);
+    if (pipeline.isClosed()) {
+      throw new IOException("Closed pipeline can not be opened");
+    }
+    if (pipeline.getPipelineState() == PipelineState.ALLOCATED) {
+      pipeline = pipelineStateMap
+          .updatePipelineState(pipelineId, PipelineState.OPEN);
+    }
+    return pipeline;

MOV26 MOV31 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 MOV42 MOV44 INS8 INS74 INS42 INS44 INS8 MOV74 INS42 INS44 INS44 INS8 UPD39 UPD42 MOV44 MOV43 MOV43 UPD42 MOV42 MOV44 INS43 INS8 MOV43 INS42 INS44 INS43 INS8 MOV21 UPD43 MOV43 UPD43 MOV43 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS41 INS41 UPD43 UPD42 INS42 INS60 INS25 INS41 UPD43 MOV43 UPD42 MOV42 INS42 MOV60 INS25 INS25 INS41 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS32 UPD42 MOV43 INS59 INS38 INS8 INS42 UPD42 UPD43 INS32 INS8 INS27 INS8 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 INS21 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV53 INS32 INS40 INS21 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS7 INS42 INS32 UPD43 INS45 INS42 INS32 MOV42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL40 DEL40 DEL40 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL43 DEL74 DEL45 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL40 DEL42 DEL14 DEL7 DEL21 DEL32 DEL21 DEL8 DEL31 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL44 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL40 DEL43 DEL42 DEL44 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL40 DEL40 DEL40 DEL32 DEL21 DEL42 DEL40 DEL40 DEL40 DEL32 DEL21 DEL42 DEL40 DEL40 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL45 DEL27 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31