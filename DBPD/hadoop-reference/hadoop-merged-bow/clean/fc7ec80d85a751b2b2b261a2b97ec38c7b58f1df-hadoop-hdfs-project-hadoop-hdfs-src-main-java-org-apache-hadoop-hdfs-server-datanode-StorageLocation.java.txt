Merge branch 'HDFS-9806' into trunk

-      try {
-        File uriFile = new File(uri.getPath());
-        String uriStr = uriFile.toURI().normalize().toString();
-        if (uriStr.endsWith("/")) {
-          uriStr = uriStr.substring(0, uriStr.length() - 1);
-        }
-        uri = new URI(uriStr);
-      } catch (URISyntaxException e) {
-        throw new IllegalArgumentException(
-            "URI: " + uri + " is not in the expected format");
-      }
+      uri = normalizeFileURI(uri);
+  public static URI normalizeFileURI(URI uri) {
+    try {
+      File uriFile = new File(uri.getPath());
+      String uriStr = uriFile.toURI().normalize().toString();
+      if (uriStr.endsWith("/")) {
+        uriStr = uriStr.substring(0, uriStr.length() - 1);
+      }
+      return new URI(uriStr);
+    } catch (URISyntaxException e) {
+      throw new IllegalArgumentException(
+              "URI: " + uri + " is not in the expected format");
+    }
+  }
+
+    if (sd.getStorageLocation().getStorageType() == StorageType.PROVIDED &&
+        storageType == StorageType.PROVIDED) {
+      return matchesStorageDirectory(sd);
+    }
+    if (sd.getStorageLocation().getStorageType() == StorageType.PROVIDED ||
+        storageType == StorageType.PROVIDED) {
+      // only one PROVIDED storage directory can exist; so this cannot match!
+      return false;
+    }
+    // both storage directories are local
+    if (storageType == StorageType.PROVIDED) {
+      // skip creation if the storage type is PROVIDED
+      Storage.LOG.info("Skipping creating directory for block pool "
+          + blockPoolID + " for PROVIDED storage location " + this);
+      return;
+    }
-    DiskChecker.checkDir(
-        context.localFileSystem,
-        new Path(baseURI),
-        context.expectedPermission);
+    // assume provided storage locations are always healthy,
+    // and check only for local storages.
+    if (storageType != StorageType.PROVIDED) {
+      DiskChecker.checkDir(
+          context.localFileSystem,
+          new Path(baseURI),
+          context.expectedPermission);
+    }

INS31 INS83 INS42 MOV44 INS44 INS8 UPD83 INS83 INS43 INS42 MOV8 INS8 INS43 INS42 MOV21 INS25 MOV21 INS42 INS25 INS25 INS25 INS25 MOV41 INS42 MOV27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 MOV8 INS21 INS41 INS27 INS27 INS41 INS27 INS27 INS41 INS42 INS40 INS21 INS41 INS42 INS40 INS7 MOV14 INS32 INS40 INS42 INS40 INS32 INS32 INS40 INS42 INS40 INS9 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS52 DEL42 DEL42 DEL7 DEL21 DEL25 DEL8