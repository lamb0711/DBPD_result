YARN-3431. Sub resources of timeline entity needs to be passed to a separate endpoint. Contributed By Zhijie Shen.

(cherry picked from commit fa5cc75245a6dba549620a8b26c7b4a8aed9838e)

+import com.google.common.base.Joiner;
+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import java.util.HashMap;
+import java.util.ArrayList;
+import java.util.Collections;
-import java.util.Map;
+import java.util.List;
-@XmlAccessorType(XmlAccessType.NONE)
-  private Identifier parent;
-  private HashMap<String, Set<String>> children = new HashMap<>();
+  public static final String PARENT_INFO_KEY =
+      TimelineEntity.SYSTEM_INFO_KEY_PREFIX + "PARENT_ENTITY";
+  public static final String CHILDREN_INFO_KEY =
+      TimelineEntity.SYSTEM_INFO_KEY_PREFIX + "CHILDREN_ENTITY";
+
+  HierarchicalTimelineEntity(TimelineEntity entity) {
+    super(entity);
+  }
-  @XmlElement(name = "parent")
-    return parent;
+    Object obj = getInfo().get(PARENT_INFO_KEY);
+    if (obj != null) {
+      if (obj instanceof Identifier) {
+        return (Identifier) obj;
+      } else {
+        throw new YarnRuntimeException(
+            "Parent info is invalid identifier object");
+      }
+    }
+    return null;
-    this.parent = parent;
+    addInfo(PARENT_INFO_KEY, parent);
-    validateParent(type);
-    parent = new Identifier();
-    parent.setType(type);
-    parent.setId(id);
+    setParent(new Identifier(type, id));
-  // required by JAXB
-  @InterfaceAudience.Private
-  // comment out XmlElement here because it cause UnrecognizedPropertyException
-  // TODO we need a better fix
-  //@XmlElement(name = "children")
-  public HashMap<String, Set<String>> getChildrenJAXB() {
-    return children;
-  }
-
-  public Map<String, Set<String>> getChildren() {
-    return children;
-  }
-
-  public void setChildren(Map<String, Set<String>> children) {
-    validateChildren(children);
-    if (children != null && !(children instanceof HashMap)) {
-      this.children = new HashMap<String, Set<String>>(children);
-    } else {
-      this.children = (HashMap) children;
+  public Set<Identifier> getChildren() {
+    Object identifiers = getInfo().get(CHILDREN_INFO_KEY);
+    if (identifiers == null) {
+      return new HashSet<>();
-  }
-
-  public void addChildren(Map<String, Set<String>> children) {
-    validateChildren(children);
-    for (Map.Entry<String, Set<String>> entry : children.entrySet()) {
-      Set<String> ids = this.children.get(entry.getKey());
-      if (ids == null) {
-        ids = new HashSet<>();
-        this.children.put(entry.getKey(), ids);
+    TimelineEntityType thisType = TimelineEntityType.valueOf(getType());
+    if (identifiers instanceof Set<?>) {
+      for (Object identifier : (Set<?>) identifiers) {
+        if (!(identifier instanceof Identifier)) {
+          throw new YarnRuntimeException(
+              "Children info contains invalid identifier object");
+        } else {
+          validateChild((Identifier) identifier, thisType);
+        }
-      ids.addAll(entry.getValue());
+    } else {
+      throw new YarnRuntimeException(
+          "Children info is invalid identifier set");
+    Set<Identifier> children = (Set<Identifier>) identifiers;
+    return children;
+  }
+
+  public void setChildren(Set<Identifier> children) {
+    addInfo(CHILDREN_INFO_KEY, children);
+  }
+
+  public void addChildren(Set<Identifier> children) {
+    TimelineEntityType thisType = TimelineEntityType.valueOf(getType());
+    for (Identifier child : children) {
+      validateChild(child, thisType);
+    }
+    Set<Identifier> existingChildren = getChildren();
+    existingChildren.addAll(children);
+    setChildren(existingChildren);
+  }
+
+  public void addChild(Identifier child) {
+    addChildren(Collections.singleton(child));
-    TimelineEntityType thisType = TimelineEntityType.valueOf(getType());
-    TimelineEntityType childType = TimelineEntityType.valueOf(type);
-    if (thisType.isChild(childType)) {
-      Set<String> ids = children.get(type);
-      if (ids == null) {
-        ids = new HashSet<>();
-        children.put(type, ids);
-      }
-      ids.add(id);
-    } else {
-      throw new IllegalArgumentException(
-          type + " is not the acceptable child of " + this.getType());
-    }
+    addChild(new Identifier(type, id));
-  private void validateChildren(Map<String, Set<String>> children) {
-    TimelineEntityType thisType = TimelineEntityType.valueOf(getType());
-    for (Map.Entry<String, Set<String>> entry : children.entrySet()) {
-      TimelineEntityType childType = TimelineEntityType.valueOf(entry.getKey());
-      if (!thisType.isChild(childType)) {
-        throw new IllegalArgumentException(
-            entry.getKey() + " is not the acceptable child of " +
-                this.getType());
-      }
+  private void validateChild(Identifier child, TimelineEntityType thisType) {
+    TimelineEntityType childType = TimelineEntityType.valueOf(child.getType());
+    if (!thisType.isChild(childType)) {
+      throw new IllegalArgumentException(
+          child.getType() + " is not the acceptable child of " +
+              this.getType());

MOV26 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 UPD83 INS83 INS83 MOV43 UPD83 INS83 INS83 MOV43 INS42 INS44 MOV43 UPD42 INS39 INS42 MOV44 MOV44 INS8 MOV83 UPD74 MOV74 INS42 INS8 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 MOV83 MOV39 MOV42 INS44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS8 UPD42 INS44 INS8 UPD42 INS27 UPD42 INS27 INS43 INS42 INS46 INS60 INS25 INS41 INS21 UPD43 INS60 INS25 MOV60 INS25 INS60 MOV41 UPD74 MOV74 MOV21 UPD74 MOV74 INS42 MOV60 INS70 MOV60 MOV21 MOV21 INS43 INS42 INS21 MOV21 INS43 UPD42 MOV43 INS42 MOV60 MOV25 INS40 INS45 INS40 INS45 INS42 INS42 INS43 INS59 INS27 INS8 INS33 INS32 INS32 UPD42 INS43 INS59 INS27 INS8 INS62 INS8 INS8 UPD74 MOV74 INS59 UPD43 UPD43 INS44 INS42 INS8 UPD74 INS42 INS32 UPD42 MOV42 MOV8 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 INS32 INS42 INS33 INS41 INS42 UPD74 MOV74 INS70 INS53 UPD43 INS42 INS11 UPD42 UPD42 INS42 UPD42 INS43 INS42 INS21 UPD43 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS14 INS32 UPD42 MOV42 UPD42 MOV42 INS62 INS8 INS8 INS43 INS42 INS42 INS32 INS42 INS42 MOV14 INS76 INS44 INS11 INS8 INS14 UPD42 UPD74 MOV74 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS42 INS42 INS42 MOV43 INS41 INS53 UPD42 MOV42 INS42 INS43 INS42 UPD74 MOV74 INS42 MOV25 INS43 INS45 UPD43 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS11 INS14 UPD42 MOV42 INS76 INS38 INS42 UPD42 INS32 MOV43 INS42 INS43 INS45 MOV36 INS53 INS42 INS42 INS42 INS14 INS32 UPD42 UPD43 INS43 INS45 INS42 INS11 INS42 UPD42 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 UPD42 DEL42 DEL40 DEL79 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL45 DEL80 DEL77 DEL83 DEL42 DEL42 DEL41 DEL39 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL7 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL40 DEL78 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL27 DEL38 DEL27 DEL52 DEL42 DEL22 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL11 DEL7 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL52 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL8