YARN-2928: YARN Timeline Service v.2: alpha 1 (sjlee)

For a list of commits and contributors, see the merge branch history.

+import org.apache.hadoop.yarn.server.timelineservice.collector.AppLevelTimelineCollector;
+  private String collectorAddr;
+    .addTransition(RMAppState.NEW, RMAppState.NEW,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
+    .addTransition(RMAppState.NEW_SAVING, RMAppState.NEW_SAVING,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
+    .addTransition(RMAppState.SUBMITTED, RMAppState.SUBMITTED,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
+    .addTransition(RMAppState.ACCEPTED, RMAppState.ACCEPTED,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
+    .addTransition(RMAppState.RUNNING, RMAppState.RUNNING,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
+    .addTransition(RMAppState.FINAL_SAVING, RMAppState.FINAL_SAVING,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
+    .addTransition(RMAppState.FINISHING, RMAppState.FINISHING,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
+    .addTransition(RMAppState.KILLING, RMAppState.KILLING,
+        RMAppEventType.COLLECTOR_UPDATE, new RMAppCollectorUpdateTransition())
-      String applicationType, Set<String> applicationTags, 
+      String applicationType, Set<String> applicationTags,
+    this(applicationId, rmContext, config, name, user, queue, submissionContext,
+      scheduler, masterService, submitTime, applicationType, applicationTags,
+      amReq, -1);
+  }
+
+  public RMAppImpl(ApplicationId applicationId, RMContext rmContext,
+      Configuration config, String name, String user, String queue,
+      ApplicationSubmissionContext submissionContext, YarnScheduler scheduler,
+      ApplicationMasterService masterService, long submitTime,
+      String applicationType, Set<String> applicationTags,
+      ResourceRequest amReq, long startTime) {
-    this.startTime = this.systemClock.getTime();
+    if (startTime <= 0) {
+      this.startTime = this.systemClock.getTime();
+    } else {
+      this.startTime = startTime;
+    }
+  /**
+   * Starts the application level timeline collector for this app. This should
+   * be used only if the timeline service v.2 is enabled.
+   */
+  public void startTimelineCollector() {
+    AppLevelTimelineCollector collector =
+        new AppLevelTimelineCollector(applicationId);
+    rmContext.getRMTimelineCollectorManager().putIfAbsent(
+        applicationId, collector);
+  }
+
+  /**
+   * Stops the application level timeline collector for this app. This should be
+   * used only if the timeline service v.2 is enabled.
+   */
+  public void stopTimelineCollector() {
+    rmContext.getRMTimelineCollectorManager().remove(applicationId);
+  }
+
+  public String getCollectorAddr() {
+    return this.collectorAddr;
+  }
+
+  @Override
+  public void setCollectorAddr(String collectorAddress) {
+    this.collectorAddr = collectorAddress;
+  }
+
+  @Override
+  public void removeCollectorAddr() {
+    this.collectorAddr = null;
+  }
+
+  @Override
+    //TODO recover collector address.
+    //this.collectorAddr = appState.getCollectorAddr();
-
+  }
+  private static final class RMAppCollectorUpdateTransition
+      extends RMAppTransition {
+
+    public void transition(RMAppImpl app, RMAppEvent event) {
+      if (YarnConfiguration.timelineServiceV2Enabled(app.conf)) {
+        LOG.info("Updating collector info for app: " + app.getApplicationId());
+
+        RMAppCollectorUpdateEvent appCollectorUpdateEvent =
+            (RMAppCollectorUpdateEvent) event;
+        // Update collector address
+        app.setCollectorAddr(appCollectorUpdateEvent.getAppCollectorAddr());
+
+        // TODO persistent to RMStateStore for recover
+        // Save to RMStateStore
+      }
+    };
-  
+

INS26 INS40 INS83 INS42 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS83 INS83 INS42 INS43 INS31 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS17 INS39 INS42 INS25 INS65 INS60 INS21 INS65 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS42 INS21 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS27 INS8 INS8 INS66 INS66 INS43 INS59 INS32 INS66 INS66 INS32 INS22 INS42 INS7 INS7 INS43 INS42 INS43 INS42 INS25 INS42 INS42 INS34 INS42 INS34 MOV21 INS21 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS22 INS42 INS22 INS33 INS42 INS42 INS32 INS8 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS21 INS60 INS21 INS22 INS42 INS42 INS32 INS43 INS59 INS32 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS11 INS42 INS42 INS32 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 INS14 INS43 INS32 INS42 INS40 INS40 INS42 MOV32 MOV42 MOV40 MOV40 INS40 INS14 INS43 INS42 INS32 INS42 INS40 INS40 MOV32 MOV42 MOV40 MOV40 INS40 INS14 INS43 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 INS14 INS43 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 INS14 INS43 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 INS14 INS43 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 INS14 INS43 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 INS14 INS43 INS42 DEL83 DEL42