YARN-5576. Allow resource localization while container is running. Contributed by Jian He.

+import java.io.File;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.concurrent.ConcurrentHashMap;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.ResourceSet;
-  private final Map<LocalResourceRequest,List<String>> pendingResources =
-    new HashMap<LocalResourceRequest,List<String>>();
-  private final Map<Path,List<String>> localizedResources =
-    new HashMap<Path,List<String>>();
-  private final List<LocalResourceRequest> publicRsrcs =
-    new ArrayList<LocalResourceRequest>();
-  private final List<LocalResourceRequest> privateRsrcs =
-    new ArrayList<LocalResourceRequest>();
-  private final List<LocalResourceRequest> appRsrcs =
-    new ArrayList<LocalResourceRequest>();
-  private final Map<LocalResourceRequest, Path> resourcesToBeUploaded =
-      new ConcurrentHashMap<LocalResourceRequest, Path>();
-  private final Map<LocalResourceRequest, Boolean> resourcesUploadPolicies =
-      new ConcurrentHashMap<LocalResourceRequest, Boolean>();
+
+  private ResourceSet resourceSet;
+    this.resourceSet = new ResourceSet();
+        ContainerEventType.RESOURCE_LOCALIZED,
+        new ResourceLocalizedWhileRunningTransition())
+    .addTransition(ContainerState.RUNNING, ContainerState.RUNNING,
+        ContainerEventType.RESOURCE_FAILED,
+        new ResourceLocalizationFailedWhileRunningTransition())
+    .addTransition(ContainerState.RUNNING, ContainerState.RUNNING,
-        return localizedResources;
+        return resourceSet.getLocalizedResources();
+  @Override
+  public ResourceSet getResourceSet() {
+    return this.resourceSet;
+  }
+
-    if (isRetryContextSet() && diagnostics.length() > diagnosticsMaxSize) {
+    if (diagnostics.length() > diagnosticsMaxSize) {
-      new HashMap<LocalResourceVisibility, 
-                  Collection<LocalResourceRequest>>();
-    if (!publicRsrcs.isEmpty()) {
-      rsrc.put(LocalResourceVisibility.PUBLIC, publicRsrcs);
-    }
-    if (!privateRsrcs.isEmpty()) {
-      rsrc.put(LocalResourceVisibility.PRIVATE, privateRsrcs);
-    }
-    if (!appRsrcs.isEmpty()) {
-      rsrc.put(LocalResourceVisibility.APPLICATION, appRsrcs);
-    }
+        resourceSet.getAllResourcesByVisibility();
-   * ContainerLocalizationRequest (INIT_CONTAINER_RESOURCES) 
+   * ContainerLocalizationRequest (LOCALIZE_CONTAINER_RESOURCES)
+
-          for (Map.Entry<String,LocalResource> rsrc : cntrRsrc.entrySet()) {
-            try {
-              LocalResourceRequest req =
-                  new LocalResourceRequest(rsrc.getValue());
-              List<String> links = container.pendingResources.get(req);
-              if (links == null) {
-                links = new ArrayList<String>();
-                container.pendingResources.put(req, links);
-              }
-              links.add(rsrc.getKey());
-              storeSharedCacheUploadPolicy(container, req, rsrc.getValue()
-                  .getShouldBeUploadedToSharedCache());
-              switch (rsrc.getValue().getVisibility()) {
-              case PUBLIC:
-                container.publicRsrcs.add(req);
-                break;
-              case PRIVATE:
-                container.privateRsrcs.add(req);
-                break;
-              case APPLICATION:
-                container.appRsrcs.add(req);
-                break;
-              }
-            } catch (URISyntaxException e) {
-              LOG.info("Got exception parsing " + rsrc.getKey()
-                  + " and value " + rsrc.getValue());
-              throw e;
-            }
-          }
+          Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req =
+              container.resourceSet.addResources(ctxt.getLocalResources());
+          container.dispatcher.getEventHandler().handle(
+              new ContainerLocalizationRequestEvent(container, req));
-        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req =
-            new LinkedHashMap<LocalResourceVisibility,
-                        Collection<LocalResourceRequest>>();
-        if (!container.publicRsrcs.isEmpty()) {
-          req.put(LocalResourceVisibility.PUBLIC, container.publicRsrcs);
-        }
-        if (!container.privateRsrcs.isEmpty()) {
-          req.put(LocalResourceVisibility.PRIVATE, container.privateRsrcs);
-        }
-        if (!container.appRsrcs.isEmpty()) {
-          req.put(LocalResourceVisibility.APPLICATION, container.appRsrcs);
-        }
-        
-        container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationRequestEvent(container, req));
-   * Store the resource's shared cache upload policies
-   * Given LocalResourceRequest can be shared across containers in
-   * LocalResourcesTrackerImpl, we preserve the upload policies here.
-   * In addition, it is possible for the application to create several
-   * "identical" LocalResources as part of
-   * ContainerLaunchContext.setLocalResources with different symlinks.
-   * There is a corner case where these "identical" local resources have
-   * different upload policies. For that scenario, upload policy will be set to
-   * true as long as there is at least one LocalResource entry with
-   * upload policy set to true.
-   */
-  private static void storeSharedCacheUploadPolicy(ContainerImpl container,
-      LocalResourceRequest resourceRequest, Boolean uploadPolicy) {
-    Boolean storedUploadPolicy =
-        container.resourcesUploadPolicies.get(resourceRequest);
-    if (storedUploadPolicy == null || (!storedUploadPolicy && uploadPolicy)) {
-      container.resourcesUploadPolicies.put(resourceRequest, uploadPolicy);
-    }
-  }
-
-  /**
-      List<String> syms = container.pendingResources.remove(resourceRequest);
+      List<String> syms =
+          container.resourceSet.resourceLocalized(resourceRequest, location);
-        LOG.warn("Localized unknown resource " + resourceRequest +
-                 " for container " + container.containerId);
-        assert false;
-        // fail container?
+        LOG.info("Localized resource " + resourceRequest +
+            " for container " + container.containerId);
-      container.localizedResources.put(location, syms);
-        container.resourcesToBeUploaded.put(resourceRequest, location);
+        container.resourceSet.getResourcesToBeUploaded()
+            .put(resourceRequest, location);
-      if (!container.pendingResources.isEmpty()) {
+      if (!container.resourceSet.getPendingResources().isEmpty()) {
-            new SharedCacheUploadEvent(container.resourcesToBeUploaded, container
+            new SharedCacheUploadEvent(
+                container.resourceSet.getResourcesToBeUploaded(), container
+   * Resource is localized while the container is running - create symlinks
+   */
+  static class ResourceLocalizedWhileRunningTransition
+      extends ContainerTransition {
+
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      ContainerResourceLocalizedEvent rsrcEvent =
+          (ContainerResourceLocalizedEvent) event;
+      List<String> links = container.resourceSet
+          .resourceLocalized(rsrcEvent.getResource(), rsrcEvent.getLocation());
+      // creating symlinks.
+      for (String link : links) {
+        try {
+          String linkFile = new Path(container.workDir, link).toString();
+          if (new File(linkFile).exists()) {
+            LOG.info("Symlink file already exists: " + linkFile);
+          } else {
+            container.context.getContainerExecutor()
+                .symLink(rsrcEvent.getLocation().toString(), linkFile);
+            LOG.info("Created symlink: " + linkFile + " -> " + rsrcEvent
+                .getLocation());
+          }
+        } catch (IOException e) {
+          String message = String
+              .format("Error when creating symlink %s -> %s", link,
+                  rsrcEvent.getLocation());
+          LOG.error(message, e);
+        }
+      }
+    }
+  }
+
+  /**
+   * Resource localization failed while the container is running.
+   */
+  static class ResourceLocalizationFailedWhileRunningTransition
+      extends ContainerTransition {
+
+    @Override
+    public void transition(ContainerImpl container, ContainerEvent event) {
+      ContainerResourceFailedEvent failedEvent =
+          (ContainerResourceFailedEvent) event;
+      container.resourceSet
+          .resourceLocalizationFailed(failedEvent.getResource());
+      container.addDiagnostics(failedEvent.getDiagnosticMessage());
+    }
+  }
+
+  /**
-      ContainerResourceLocalizedEvent rsrcEvent = (ContainerResourceLocalizedEvent) event;
-      List<String> syms =
-          container.pendingResources.remove(rsrcEvent.getResource());
-      if (null == syms) {
-        LOG.warn("Localized unknown resource " + rsrcEvent.getResource() +
-                 " for container " + container.containerId);
-        assert false;
-        // fail container?
-        return;
-      }
-      container.localizedResources.put(rsrcEvent.getLocation(), syms);
+      ContainerResourceLocalizedEvent rsrcEvent =
+          (ContainerResourceLocalizedEvent) event;
+      container.resourceSet
+          .resourceLocalized(rsrcEvent.getResource(), rsrcEvent.getLocation());
-    return container.resourcesUploadPolicies.get(resource);
+    return container.resourceSet.getResourcesUploadPolicies().get(resource);

MOV26 MOV26 UPD40 UPD40 INS23 INS31 INS55 INS55 MOV83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS29 INS83 INS42 INS43 INS31 INS29 INS83 INS42 INS43 INS31 UPD42 MOV42 INS42 INS21 INS42 UPD42 MOV42 INS41 INS65 UPD42 MOV42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 MOV65 UPD42 MOV42 INS78 INS83 INS39 INS42 MOV44 MOV44 MOV8 INS7 INS22 MOV27 UPD66 INS66 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS70 UPD66 INS42 UPD43 UPD42 INS21 MOV21 MOV21 INS22 INS14 INS32 INS42 INS40 INS40 INS52 INS42 INS32 INS8 MOV74 UPD42 MOV42 UPD42 MOV42 INS43 INS59 MOV74 INS59 INS44 INS42 INS8 UPD42 UPD43 INS32 MOV32 INS32 INS52 INS42 INS43 MOV32 MOV42 MOV40 MOV40 INS40 INS42 INS42 INS42 MOV54 MOV41 UPD42 MOV42 INS42 INS11 UPD42 MOV42 INS32 MOV43 INS42 INS54 UPD42 UPD42 INS11 INS40 INS42 INS32 UPD42 INS42 INS32 UPD40 UPD42 MOV32 UPD40 MOV40 INS42 INS42 UPD40 INS8 MOV12 UPD40 UPD42 INS42 INS32 INS43 INS42 INS40 INS42 MOV32 INS32 INS8 INS12 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD40 INS32 MOV60 MOV21 UPD42 INS32 UPD40 MOV40 INS42 UPD42 MOV42 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS32 INS42 INS40 INS40 MOV32 INS42 INS42 UPD45 UPD40 MOV40 INS42 INS32 MOV43 INS59 INS32 INS8 INS8 INS43 INS42 INS60 INS21 MOV32 MOV42 UPD40 MOV40 UPD40 MOV40 UPD40 MOV40 INS42 INS32 INS40 INS42 UPD42 MOV42 INS32 INS14 INS42 INS21 INS21 INS21 UPD42 MOV42 INS43 INS59 INS32 INS40 UPD40 MOV14 INS40 INS42 INS32 INS14 INS42 INS43 INS42 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD40 UPD40 UPD40 INS42 INS42 MOV43 INS40 INS42 UPD42 MOV42 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS32 UPD40 MOV14 INS45 INS42 INS40 INS42 INS32 INS42 INS45 INS42 INS45 INS32 INS42 INS42 UPD40 UPD40 MOV14 INS42 INS42 INS42 INS42 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 MOV14 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 MOV14 UPD40 UPD40 MOV14 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 INS42 UPD40 UPD40 INS14 UPD40 INS14 INS43 INS43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL43 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL43 DEL43 DEL43 DEL43 DEL74 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL49 DEL40 DEL42 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL40 DEL42 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL40 DEL42 DEL42 DEL32 DEL21 DEL10 DEL50 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL8 DEL54 DEL40 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL40 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL40 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL29 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL9 DEL6 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL33 DEL27 DEL42 DEL38 DEL42 DEL27 DEL36 DEL27 DEL8 DEL25 DEL42 DEL42 DEL45 DEL45 DEL40 DEL27 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL33 DEL42 DEL27 DEL9 DEL6 DEL41 DEL8 DEL25 DEL40 DEL42 DEL42 DEL32 DEL21