YARN-996. REST API support for node resource configuration. Contributed by Inigo Goiri.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.yarn.api.records.ResourceOption;
+import org.apache.hadoop.yarn.server.api.protocolrecords.UpdateNodeResourceRequest;
+import org.apache.hadoop.yarn.server.resourcemanager.AdminService;
+import org.apache.hadoop.yarn.server.resourcemanager.RMContext;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceOptionInfo;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  private static final Log LOG =
-      LogFactory.getLog(RMWebServices.class.getName());
+  private static final Logger LOG =
+      LoggerFactory.getLogger(RMWebServices.class.getName());
+  @POST
+  @Path(RMWSConsts.NODE_RESOURCE)
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Produces({ MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,
+      MediaType.APPLICATION_XML + "; " + JettyUtils.UTF_8 })
+  public ResourceInfo updateNodeResource(
+      @Context HttpServletRequest hsr,
+      @PathParam(RMWSConsts.NODEID) String nodeId,
+      ResourceOptionInfo resourceOption) throws AuthorizationException {
+
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    initForWritableEndpoints(callerUGI, false);
+
+    RMNode rmNode = getRMNode(nodeId);
+    Map<NodeId, ResourceOption> nodeResourceMap =
+        Collections.singletonMap(
+            rmNode.getNodeID(), resourceOption.getResourceOption());
+    UpdateNodeResourceRequest updateRequest =
+        UpdateNodeResourceRequest.newInstance(nodeResourceMap);
+
+    try {
+      RMContext rmContext = this.rm.getRMContext();
+      AdminService admin = rmContext.getRMAdminService();
+      admin.updateNodeResource(updateRequest);
+    } catch (YarnException e) {
+      String message = "Failed to update the node resource " +
+          rmNode.getNodeID() + ".";
+      LOG.error(message, e);
+      throw new YarnRuntimeException(message, e);
+    } catch (IOException e) {
+      LOG.error("Failed to update the node resource {}.",
+          rmNode.getNodeID(), e);
+    }
+
+    return new ResourceInfo(rmNode.getTotalCapability());
+  }
+
+  /**
+   * Get the RMNode in the RM from the node identifier.
+   * @param nodeId Node identifier.
+   * @return The RMNode in the RM.
+   */
+  private RMNode getRMNode(final String nodeId) {
+    if (nodeId == null || nodeId.isEmpty()) {
+      throw new NotFoundException("nodeId, " + nodeId + ", is empty or null");
+    }
+    NodeId nid = NodeId.fromString(nodeId);
+    RMContext rmContext = this.rm.getRMContext();
+    RMNode ni = rmContext.getRMNodes().get(nid);
+    if (ni == null) {
+      ni = rmContext.getInactiveRMNodes().get(nid);
+      if (ni == null) {
+        throw new NotFoundException("nodeId, " + nodeId + ", is not found");
+      }
+    }
+    return ni;
+  }
+

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS31 INS31 UPD43 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 UPD42 INS42 INS42 INS40 INS42 INS4 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS60 INS60 INS54 INS41 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS25 INS60 INS60 INS60 INS25 INS41 UPD42 UPD42 INS40 INS40 INS27 INS27 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS74 INS59 INS43 INS59 INS8 INS12 INS12 INS14 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS40 INS45 INS40 INS40 INS45 INS40 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS21 INS44 INS8 INS44 INS8 INS43 INS32 INS27 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS42 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS32 INS43 INS27 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS22 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS14 INS52 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS45