HDDS-1775. Make OM KeyDeletingService compatible with HA model (#1063)



+import java.util.ArrayList;
+import com.google.protobuf.ServiceException;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMRequest;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.PurgeKeysRequest;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Type;
-import org.apache.hadoop.utils.db.BatchOperation;
-import org.apache.hadoop.utils.db.DBStore;
-import org.apache.hadoop.utils.db.Table;
+
+import org.apache.hadoop.utils.db.BatchOperation;
+import org.apache.hadoop.utils.db.DBStore;
+import org.apache.hadoop.utils.db.Table;
+import org.apache.ratis.protocol.ClientId;
+  private final OzoneManager ozoneManager;
+  private ClientId clientId = ClientId.randomId();
-  public KeyDeletingService(ScmBlockLocationProtocol scmClient,
+  KeyDeletingService(OzoneManager ozoneManager,
+      ScmBlockLocationProtocol scmClient,
+    this.ozoneManager = ozoneManager;
+  private boolean shouldRun() {
+    if (ozoneManager == null) {
+      // OzoneManager can be null for testing
+      return true;
+    }
+    return ozoneManager.isLeader();
+  }
+
+  private boolean isRatisEnabled() {
+    if (ozoneManager == null) {
+      return false;
+    }
+    return ozoneManager.isRatisEnabled();
+  }
+
-      runCount.incrementAndGet();
-      try {
-        long startTime = Time.monotonicNow();
-        List<BlockGroup> keyBlocksList = manager
-            .getPendingDeletionKeys(keyLimitPerTask);
-        if (keyBlocksList != null && keyBlocksList.size() > 0) {
-          List<DeleteBlockGroupResult> results =
-              scmClient.deleteKeyBlocks(keyBlocksList);
-          if (results != null) {
-            int delCount = deleteAllKeys(results);
-            LOG.debug("Number of keys deleted: {}, elapsed time: {}ms",
-                delCount, Time.monotonicNow() - startTime);
-            deletedKeyCount.addAndGet(delCount);
+      // Check if this is the Leader OM. If not leader, no need to execute this
+      // task.
+      if (shouldRun()) {
+        runCount.incrementAndGet();
+        try {
+          long startTime = Time.monotonicNow();
+          List<BlockGroup> keyBlocksList = manager
+              .getPendingDeletionKeys(keyLimitPerTask);
+          if (keyBlocksList != null && keyBlocksList.size() > 0) {
+            List<DeleteBlockGroupResult> results =
+                scmClient.deleteKeyBlocks(keyBlocksList);
+            if (results != null) {
+              int delCount;
+              if (isRatisEnabled()) {
+                delCount = submitPurgeKeysRequest(results);
+              } else {
+                // TODO: Once HA and non-HA paths are merged, we should have
+                //  only one code path here. Purge keys should go through an
+                //  OMRequest model.
+                delCount = deleteAllKeys(results);
+              }
+              LOG.debug("Number of keys deleted: {}, elapsed time: {}ms",
+                  delCount, Time.monotonicNow() - startTime);
+              deletedKeyCount.addAndGet(delCount);
+            }
+        } catch (IOException e) {
+          LOG.error("Error while running delete keys background task. Will " +
+              "retry at next run.", e);
-      } catch (IOException e) {
-        LOG.error("Error while running delete keys background task. Will " +
-            "retry at next run.", e);
-      // By desing, no one cares about the results of this call back.
+      // By design, no one cares about the results of this call back.
+
+    /**
+     * Submits PurgeKeys request for the keys whose blocks have been deleted
+     * by SCM.
+     *
+     * @param results DeleteBlockGroups returned by SCM.
+     * @throws IOException      on Error
+     */
+    public int submitPurgeKeysRequest(List<DeleteBlockGroupResult> results) {
+      List<String> purgeKeysList = new ArrayList<>();
+
+      // Put all keys to be purged in a list
+      int deletedCount = 0;
+      for (DeleteBlockGroupResult result : results) {
+        if (result.isSuccess()) {
+          // Add key to PurgeKeys list.
+          String deletedKey = result.getObjectKey();
+          purgeKeysList.add(deletedKey);
+          LOG.debug("Key {} set to be purged from OM DB", deletedKey);
+          deletedCount++;
+        }
+      }
+
+      PurgeKeysRequest purgeKeysRequest = PurgeKeysRequest.newBuilder()
+          .addAllKeys(purgeKeysList)
+          .build();
+
+      OMRequest omRequest = OMRequest.newBuilder()
+          .setCmdType(Type.PurgeKeys)
+          .setPurgeKeysRequest(purgeKeysRequest)
+          .setClientId(clientId.toString())
+          .build();
+
+      // Submit PurgeKeys request to OM
+      try {
+        ozoneManager.getOmServerProtocol().submitRequest(null, omRequest);
+      } catch (ServiceException e) {
+        LOG.error("PurgeKey request failed. Will retry at next run.");
+        return 0;
+      }
+
+      return deletedCount;
+    }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS31 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS25 INS41 INS25 INS41 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS7 INS27 INS8 INS32 INS27 INS8 INS32 INS25 INS65 INS65 INS65 INS74 INS42 INS60 INS60 INS70 INS60 INS60 INS54 INS41 INS22 INS42 INS42 INS33 INS41 INS42 INS42 INS42 INS33 INS41 INS42 INS42 INS32 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS74 INS59 INS39 INS59 INS44 INS42 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS52 INS42 INS9 INS9 INS42 MOV21 MOV54 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS34 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS74 INS42 INS32 INS8 INS32 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS41 INS43 INS42 INS42 INS60 INS21 INS21 INS21 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS33 INS42 INS42 INS32 INS34 INS42 INS43 INS59 INS32 INS32 INS37 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS25 INS32 INS8 INS8 INS42 INS21 INS21 INS7 INS7 INS42 INS32 INS42 MOV32 INS42 INS42 DEL83