HDDS-183:Integrate Volumeset, ContainerSet and HddsDispatcher. Contributed by Bharat Viswanadham

-package org.apache.hadoop.ozone.container.keyvalue;
+package org.apache.hadoop.ozone.container.common.impl;
-import org.apache.hadoop.ozone.container.common.impl.ContainerData;
+import org.apache.hadoop.hdds.scm.container.common.helpers.StorageContainerException;
+import org.apache.hadoop.ozone.container.keyvalue.KeyValueContainerData;
+import static org.apache.hadoop.ozone.container.keyvalue.KeyValueContainerData.YAML_FIELDS;
+import static org.apache.hadoop.ozone.container.keyvalue.KeyValueContainerData.YAML_TAG;
+
-public final class KeyValueYaml {
+public final class ContainerDataYaml {
-  private KeyValueYaml() {
+  private ContainerDataYaml() {
-  public static void createContainerFile(File containerFile, ContainerData
-      containerData) throws IOException {
+  public static void createContainerFile(ContainerProtos.ContainerType
+                                             containerType, File containerFile,
+                                         ContainerData containerData) throws
+      IOException {
+    Preconditions.checkNotNull(containerType, "containerType cannot be null");
-    Representer representer = new KeyValueContainerDataRepresenter();
-    representer.setPropertyUtils(propertyUtils);
-    representer.addClassTag(
-        KeyValueContainerData.class, new Tag("KeyValueContainerData"));
+    switch(containerType) {
+    case KeyValueContainer:
+      Representer representer = new ContainerDataRepresenter();
+      representer.setPropertyUtils(propertyUtils);
+      representer.addClassTag(KeyValueContainerData.class,
+          KeyValueContainerData.YAML_TAG);
-    Constructor keyValueDataConstructor = new KeyValueDataConstructor();
+      Constructor keyValueDataConstructor = new ContainerDataConstructor();
-    Yaml yaml = new Yaml(keyValueDataConstructor, representer);
-
-    Writer writer = new OutputStreamWriter(new FileOutputStream(containerFile),
-        "UTF-8");
-    yaml.dump(containerData, writer);
-    writer.close();
+      Yaml yaml = new Yaml(keyValueDataConstructor, representer);
+      Writer writer = new OutputStreamWriter(new FileOutputStream(
+          containerFile), "UTF-8");
+      yaml.dump(containerData, writer);
+      writer.close();
+      break;
+    default:
+      throw new StorageContainerException("Unrecognized container Type " +
+          "format " + containerType, ContainerProtos.Result
+          .UNKNOWN_CONTAINER_TYPE);
+    }
-  public static KeyValueContainerData readContainerFile(File containerFile)
+  public static ContainerData readContainerFile(File containerFile)
-    KeyValueContainerData keyValueContainerData;
+    ContainerData containerData;
-      Representer representer = new KeyValueContainerDataRepresenter();
+      Representer representer = new ContainerDataRepresenter();
-      representer.addClassTag(
-          KeyValueContainerData.class, new Tag("KeyValueContainerData"));
-      Constructor keyValueDataConstructor = new KeyValueDataConstructor();
+      Constructor containerDataConstructor = new ContainerDataConstructor();
-      Yaml yaml = new Yaml(keyValueDataConstructor, representer);
+      Yaml yaml = new Yaml(containerDataConstructor, representer);
-      keyValueContainerData = (KeyValueContainerData)
+      containerData = (ContainerData)
-    return keyValueContainerData;
+    return containerData;
-  private static class KeyValueContainerDataRepresenter extends Representer {
+  private static class ContainerDataRepresenter extends Representer {
+
+      // When a new Container type is added, we need to add what fields need
+      // to be filtered here
-          // When a new field needs to be added, it needs to be added here.
-          if (name.equals("containerType") || name.equals("containerId") ||
-              name.equals("layOutVersion") || name.equals("state") ||
-              name.equals("metadata") || name.equals("metadataPath") ||
-              name.equals("chunksPath") || name.equals(
-                  "containerDBType")) {
+          if (YAML_FIELDS.contains(name)) {
-  private static class KeyValueDataConstructor extends Constructor {
-    KeyValueDataConstructor() {
+  private static class ContainerDataConstructor extends Constructor {
+    ContainerDataConstructor() {
-      this.yamlConstructors.put(new Tag("KeyValueContainerData"),
-          new ConstructKeyValueContainerData());
+      // When a new Container type is added, we need to add yamlConstructor
+      // for that
+      this.yamlConstructors.put(YAML_TAG, new ConstructKeyValueContainerData());
-        String type = (String) nodes.get("containerType");
-
-        ContainerProtos.ContainerType containerType = ContainerProtos
-            .ContainerType.KeyValueContainer;
-        if (type.equals("KeyValueContainer")) {
-          containerType = ContainerProtos.ContainerType.KeyValueContainer;
-        }
-        KeyValueContainerData kvData = new KeyValueContainerData(containerType,
-            (long) nodes.get("containerId"), lv);
+        KeyValueContainerData kvData = new KeyValueContainerData((long) nodes
+            .get("containerId"), lv);

INS26 INS26 INS26 UPD40 INS40 UPD40 INS40 INS40 UPD42 UPD42 INS44 UPD43 UPD42 UPD42 MOV43 INS42 INS21 INS50 UPD42 UPD42 INS32 INS42 INS49 INS60 MOV21 INS21 INS60 MOV60 MOV60 MOV21 MOV21 INS10 INS49 INS53 UPD43 UPD42 INS42 INS42 INS42 INS45 INS42 MOV43 MOV59 MOV32 MOV43 MOV59 INS14 UPD42 UPD42 INS40 INS43 INS27 INS40 INS42 UPD43 UPD43 INS42 INS45 INS45 INS42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 DEL42 DEL43 DEL45 DEL14 DEL60 DEL21 DEL60 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL43 DEL45 DEL14 DEL32 DEL21 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL27 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL11 DEL59 DEL60 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL42