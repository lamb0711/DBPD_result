HDFS-4098. Add FileWithSnapshot, INodeFileUnderConstructionWithSnapshot and INodeFileUnderConstructionSnapshot for supporting append to snapshotted files.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1434966 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
+
+  
+  protected INodeFileUnderConstruction(final INodeFile that,
+      final String clientName,
+      final String clientMachine,
+      final DatanodeDescriptor clientNode) {
+    super(that);
+    this.clientName = clientName;
+    this.clientMachine = clientMachine;
+    this.clientNode = clientNode;
+  }
-  String getClientName() {
+  public String getClientName() {
-  String getClientMachine() {
+  public String getClientMachine() {
-  DatanodeDescriptor getClientNode() {
+  public DatanodeDescriptor getClientNode() {
-  //
-  // converts a INodeFileUnderConstruction into a INodeFile
-  // use the modification time as the access time
-  //
-  INodeFile convertToInodeFile(long mtime) {
-    assert allBlocksComplete() : "Can't finalize inode " + this
-      + " since it contains non-complete blocks! Blocks are "
-      + Arrays.asList(getBlocks());
-    //TODO SNAPSHOT: may convert to INodeFileWithLink
+  /**
+   * Converts an INodeFileUnderConstruction to an INodeFile.
+   * The original modification time is used as the access time.
+   * The new modification is the specified mtime.
+   */
+  protected INodeFile toINodeFile(long mtime) {
+    assertAllBlocksComplete();
+
-  /**
-   * @return true if all of the blocks in this file are marked as completed.
-   */
-  private boolean allBlocksComplete() {
-    for (BlockInfo b : getBlocks()) {
-      if (!b.isComplete()) {
-        return false;
-      }
+  /** Assert all blocks are complete. */
+  protected void assertAllBlocksComplete() {
+    final BlockInfo[] blocks = getBlocks();
+    for (int i = 0; i < blocks.length; i++) {
+      Preconditions.checkState(blocks[i].isComplete(), "Failed to finalize"
+          + " %s %s since blocks[%s] is non-complete, where blocks=%s.",
+          getClass().getSimpleName(), this, i, Arrays.asList(getBlocks()));
-    return true;

INS26 INS40 INS31 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS83 INS29 INS83 UPD42 UPD83 UPD39 UPD42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS46 INS21 INS21 INS21 INS65 INS21 UPD65 INS60 INS24 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS66 INS66 INS66 INS32 UPD66 INS83 INS5 INS59 INS58 INS27 INS37 INS8 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 MOV42 MOV43 INS85 INS42 MOV32 INS39 INS59 INS42 INS40 INS42 INS21 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS34 INS32 INS42 INS42 INS32 INS27 INS32 INS52 INS42 MOV32 INS2 MOV42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 DEL32 DEL45 DEL52 DEL45 DEL27 DEL6 DEL42 DEL44 DEL42 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL9 DEL41