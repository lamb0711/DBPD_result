Merge r1426019 through r1432788 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1432796 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.mapreduce.OutputCommitter;
+import org.apache.hadoop.mapreduce.v2.app.commit.CommitterJobAbortEvent;
+import org.apache.hadoop.mapreduce.v2.app.commit.CommitterJobCommitEvent;
+import org.apache.hadoop.mapreduce.v2.app.commit.CommitterJobSetupEvent;
+import org.apache.hadoop.mapreduce.v2.app.job.event.JobAbortCompletedEvent;
+import org.apache.hadoop.mapreduce.v2.app.job.event.JobCommitFailedEvent;
+import org.apache.hadoop.mapreduce.v2.app.job.event.JobSetupFailedEvent;
-  private final OutputCommitter committer;
+
-          .addTransition(JobStateInternal.INITED, JobStateInternal.RUNNING,
+          .addTransition(JobStateInternal.INITED, JobStateInternal.SETUP,
-              
+
+          // Transitions from SETUP state
+          .addTransition(JobStateInternal.SETUP, JobStateInternal.SETUP,
+              JobEventType.JOB_DIAGNOSTIC_UPDATE,
+              DIAGNOSTIC_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.SETUP, JobStateInternal.SETUP,
+              JobEventType.JOB_COUNTER_UPDATE, COUNTER_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.SETUP, JobStateInternal.RUNNING,
+              JobEventType.JOB_SETUP_COMPLETED,
+              new SetupCompletedTransition())
+          .addTransition(JobStateInternal.SETUP, JobStateInternal.FAIL_ABORT,
+              JobEventType.JOB_SETUP_FAILED,
+              new SetupFailedTransition())
+          .addTransition(JobStateInternal.SETUP, JobStateInternal.KILL_ABORT,
+              JobEventType.JOB_KILL,
+              new KilledDuringSetupTransition())
+          .addTransition(JobStateInternal.SETUP, JobStateInternal.ERROR,
+              JobEventType.INTERNAL_ERROR,
+              INTERNAL_ERROR_TRANSITION)
+          // Ignore-able events
+          .addTransition(JobStateInternal.SETUP, JobStateInternal.SETUP,
+              JobEventType.JOB_UPDATED_NODES)
+
-              EnumSet.of(JobStateInternal.RUNNING, JobStateInternal.SUCCEEDED, JobStateInternal.FAILED),
+              EnumSet.of(JobStateInternal.RUNNING,
+                  JobStateInternal.COMMITTING, JobStateInternal.FAIL_ABORT),
-              EnumSet.of(JobStateInternal.RUNNING, JobStateInternal.SUCCEEDED, JobStateInternal.FAILED),
+              EnumSet.of(JobStateInternal.RUNNING,
+                  JobStateInternal.COMMITTING),
-              EnumSet.of(JobStateInternal.KILL_WAIT, JobStateInternal.KILLED),
+              EnumSet.of(JobStateInternal.KILL_WAIT,
+                  JobStateInternal.KILL_ABORT),
+          // Transitions from COMMITTING state
+          .addTransition(JobStateInternal.COMMITTING,
+              JobStateInternal.SUCCEEDED,
+              JobEventType.JOB_COMMIT_COMPLETED,
+              new CommitSucceededTransition())
+          .addTransition(JobStateInternal.COMMITTING,
+              JobStateInternal.FAIL_ABORT,
+              JobEventType.JOB_COMMIT_FAILED,
+              new CommitFailedTransition())
+          .addTransition(JobStateInternal.COMMITTING,
+              JobStateInternal.KILL_ABORT,
+              JobEventType.JOB_KILL,
+              new KilledDuringCommitTransition())
+          .addTransition(JobStateInternal.COMMITTING,
+              JobStateInternal.COMMITTING,
+              JobEventType.JOB_DIAGNOSTIC_UPDATE,
+              DIAGNOSTIC_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.COMMITTING,
+              JobStateInternal.COMMITTING,
+              JobEventType.JOB_COUNTER_UPDATE, COUNTER_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.COMMITTING,
+              JobStateInternal.ERROR, JobEventType.INTERNAL_ERROR,
+              INTERNAL_ERROR_TRANSITION)
+          // Ignore-able events
+          .addTransition(JobStateInternal.COMMITTING,
+              JobStateInternal.COMMITTING,
+              EnumSet.of(JobEventType.JOB_UPDATED_NODES,
+                  JobEventType.JOB_TASK_ATTEMPT_FETCH_FAILURE))
+
+          // Transitions from FAIL_ABORT state
+          .addTransition(JobStateInternal.FAIL_ABORT,
+              JobStateInternal.FAIL_ABORT,
+              JobEventType.JOB_DIAGNOSTIC_UPDATE,
+              DIAGNOSTIC_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.FAIL_ABORT,
+              JobStateInternal.FAIL_ABORT,
+              JobEventType.JOB_COUNTER_UPDATE, COUNTER_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.FAIL_ABORT, JobStateInternal.FAILED,
+              JobEventType.JOB_ABORT_COMPLETED,
+              new JobAbortCompletedTransition())
+          .addTransition(JobStateInternal.FAIL_ABORT, JobStateInternal.KILLED,
+              JobEventType.JOB_KILL,
+              new KilledDuringAbortTransition())
+          .addTransition(JobStateInternal.FAIL_ABORT,
+              JobStateInternal.ERROR, JobEventType.INTERNAL_ERROR,
+              INTERNAL_ERROR_TRANSITION)
+          // Ignore-able events
+          .addTransition(JobStateInternal.FAIL_ABORT,
+              JobStateInternal.FAIL_ABORT,
+              EnumSet.of(JobEventType.JOB_UPDATED_NODES,
+                  JobEventType.JOB_TASK_COMPLETED,
+                  JobEventType.JOB_TASK_ATTEMPT_COMPLETED,
+                  JobEventType.JOB_MAP_TASK_RESCHEDULED,
+                  JobEventType.JOB_TASK_ATTEMPT_FETCH_FAILURE,
+                  JobEventType.JOB_COMMIT_COMPLETED,
+                  JobEventType.JOB_COMMIT_FAILED))
+
+          // Transitions from KILL_ABORT state
+          .addTransition(JobStateInternal.KILL_ABORT,
+              JobStateInternal.KILL_ABORT,
+              JobEventType.JOB_DIAGNOSTIC_UPDATE,
+              DIAGNOSTIC_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.KILL_ABORT,
+              JobStateInternal.KILL_ABORT,
+              JobEventType.JOB_COUNTER_UPDATE, COUNTER_UPDATE_TRANSITION)
+          .addTransition(JobStateInternal.KILL_ABORT, JobStateInternal.KILLED,
+              JobEventType.JOB_ABORT_COMPLETED,
+              new JobAbortCompletedTransition())
+          .addTransition(JobStateInternal.KILL_ABORT, JobStateInternal.KILLED,
+              JobEventType.JOB_KILL,
+              new KilledDuringAbortTransition())
+          .addTransition(JobStateInternal.KILL_ABORT,
+              JobStateInternal.ERROR, JobEventType.INTERNAL_ERROR,
+              INTERNAL_ERROR_TRANSITION)
+          // Ignore-able events
+          .addTransition(JobStateInternal.KILL_ABORT,
+              JobStateInternal.KILL_ABORT,
+              EnumSet.of(JobEventType.JOB_UPDATED_NODES,
+                  JobEventType.JOB_TASK_ATTEMPT_FETCH_FAILURE,
+                  JobEventType.JOB_SETUP_COMPLETED,
+                  JobEventType.JOB_SETUP_FAILED,
+                  JobEventType.JOB_COMMIT_COMPLETED,
+                  JobEventType.JOB_COMMIT_FAILED))
+
-                  JobEventType.JOB_TASK_ATTEMPT_FETCH_FAILURE))
+                  JobEventType.JOB_TASK_ATTEMPT_FETCH_FAILURE,
+                  JobEventType.JOB_SETUP_COMPLETED,
+                  JobEventType.JOB_SETUP_FAILED,
+                  JobEventType.JOB_COMMIT_COMPLETED,
+                  JobEventType.JOB_COMMIT_FAILED,
+                  JobEventType.JOB_ABORT_COMPLETED))
+                  JobEventType.JOB_START,
-                  JobEventType.JOB_TASK_ATTEMPT_FETCH_FAILURE))
+                  JobEventType.JOB_TASK_ATTEMPT_FETCH_FAILURE,
+                  JobEventType.JOB_SETUP_COMPLETED,
+                  JobEventType.JOB_SETUP_FAILED,
+                  JobEventType.JOB_COMMIT_COMPLETED,
+                  JobEventType.JOB_COMMIT_FAILED,
+                  JobEventType.JOB_ABORT_COMPLETED))
+                  JobEventType.JOB_SETUP_COMPLETED,
+                  JobEventType.JOB_SETUP_FAILED,
+                  JobEventType.JOB_COMMIT_COMPLETED,
+                  JobEventType.JOB_COMMIT_FAILED,
+                  JobEventType.JOB_ABORT_COMPLETED,
+  
+  private JobStateInternal forcedState = null;
-      OutputCommitter committer, boolean newApiCommitter, String userName,
-      long appSubmitTime, List<AMInfo> amInfos, AppContext appContext) {
+      boolean newApiCommitter, String userName,
+      long appSubmitTime, List<AMInfo> amInfos, AppContext appContext,
+      JobStateInternal forcedState, String forcedDiagnostic) {
-    this.committer = committer;
+    this.forcedState  = forcedState;
+    if(forcedDiagnostic != null) {
+      this.diagnostics.add(forcedDiagnostic);
+    }
-  // Getter methods that make unit testing easier (package-scoped)
-  OutputCommitter getCommitter() {
-    return this.committer;
-  }
-
-      return getExternalState(getStateMachine().getCurrentState());
+      return getExternalState(getInternalState());
+      if(forcedState != null) {
+        return forcedState;
+      }
-    if (smState == JobStateInternal.KILL_WAIT) {
+    switch (smState) {
+    case KILL_WAIT:
+    case KILL_ABORT:
-    } else {
+    case SETUP:
+    case COMMITTING:
+      return JobState.RUNNING;
+    case FAIL_ABORT:
+      return JobState.FAILED;
+    default:
-  static JobStateInternal checkJobCompleteSuccess(JobImpl job) {
-    // check for Job success
-    if (job.completedTaskCount == job.tasks.size()) {
-      try {
-        // Commit job & do cleanup
-        job.getCommitter().commitJob(job.getJobContext());
-      } catch (IOException e) {
-        LOG.error("Could not do commit for Job", e);
-        job.addDiagnostic("Job commit failed: " + e.getMessage());
-        job.abortJob(org.apache.hadoop.mapreduce.JobStatus.State.FAILED);
-        return job.finished(JobStateInternal.FAILED);
-      }
-      job.logJobHistoryFinishedEvent();
-      return job.finished(JobStateInternal.SUCCEEDED);
+  protected JobStateInternal checkReadyForCommit() {
+    JobStateInternal currentState = getInternalState();
+    if (completedTaskCount == tasks.size()
+        && currentState == JobStateInternal.RUNNING) {
+      eventHandler.handle(new CommitterJobCommitEvent(jobId, getJobContext()));
+      return JobStateInternal.COMMITTING;
-    return null;
+    // return the current state as job not ready to commit yet
+    return getInternalState();
+    long sysCPUSizeForUberSlot =
+        conf.getInt(MRJobConfig.MR_AM_CPU_VCORES,
+            MRJobConfig.DEFAULT_MR_AM_CPU_VCORES);
+
+    boolean smallCpu =
+        (
+            Math.max(
+                conf.getInt(MRJobConfig.MAP_CPU_VCORES, 1), 
+                conf.getInt(MRJobConfig.REDUCE_CPU_VCORES, 1)) < 
+             sysCPUSizeForUberSlot
+        );
-        && smallInput && smallMemory && notChainJob && isValidUberMaxReduces;
+        && smallInput && smallMemory && smallCpu 
+        && notChainJob && isValidUberMaxReduces;
-        // do the setup
-        job.committer.setupJob(job.jobContext);
-        job.setupProgress = 1.0f;
-
-        //TODO XXX Should JobInitedEvent be generated here (instead of in StartTransition)
-
+        job.metrics.endPreparingJob(job);
-        job.abortJob(org.apache.hadoop.mapreduce.JobStatus.State.FAILED);
-        job.metrics.endPreparingJob(job);
-        return job.finished(JobStateInternal.FAILED);
+        job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+            job.jobContext,
+            org.apache.hadoop.mapreduce.JobStatus.State.FAILED));
+        return JobStateInternal.FAILED;
-                job.committer, job.jobToken, job.fsTokens,
+                job.jobToken, job.fsTokens,
-                job.taskAttemptListener, job.committer, job.jobToken,
+                job.taskAttemptListener, job.jobToken,
+  private static class SetupCompletedTransition
+      implements SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      job.setupProgress = 1.0f;
+      job.scheduleTasks(job.mapTasks);  // schedule (i.e., start) the maps
+      job.scheduleTasks(job.reduceTasks);
+
+      // If we have no tasks, just transition to job completed
+      if (job.numReduceTasks == 0 && job.numMapTasks == 0) {
+        job.eventHandler.handle(new JobEvent(job.jobId,
+            JobEventType.JOB_COMPLETED));
+      }
+    }
+  }
+
+  private static class SetupFailedTransition
+      implements SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      job.metrics.endRunningJob(job);
+      job.addDiagnostic("Job setup failed : "
+          + ((JobSetupFailedEvent) event).getMessage());
+      job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+          job.jobContext,
+          org.apache.hadoop.mapreduce.JobStatus.State.FAILED));
+    }
+  }
+
-      job.scheduleTasks(job.mapTasks);  // schedule (i.e., start) the maps
-      job.scheduleTasks(job.reduceTasks);
-             job.isUber()); //Will transition to state running. Currently in INITED
+             job.isUber());
-			// If we have no tasks, just transition to job completed
-      if (job.numReduceTasks == 0 && job.numMapTasks == 0) {
-        job.eventHandler.handle(new JobEvent(job.jobId, JobEventType.JOB_COMPLETED));
-      }
+      job.eventHandler.handle(new CommitterJobSetupEvent(
+              job.jobId, job.jobContext));
-  protected void abortJob(
-      org.apache.hadoop.mapreduce.JobStatus.State finalState) {
-    try {
-      committer.abortJob(jobContext, finalState);
-    } catch (IOException e) {
-      LOG.warn("Could not abortJob", e);
+  private void unsuccessfulFinish(JobStateInternal finalState) {
+      if (finishTime == 0) setFinishTime();
+      cleanupProgress = 1.0f;
+      JobUnsuccessfulCompletionEvent unsuccessfulJobEvent =
+          new JobUnsuccessfulCompletionEvent(oldJobId,
+              finishTime,
+              succeededMapTaskCount,
+              succeededReduceTaskCount,
+              finalState.toString());
+      eventHandler.handle(new JobHistoryEvent(jobId,
+          unsuccessfulJobEvent));
+      finished(finalState);
+  }
+
+  private static class JobAbortCompletedTransition
+  implements SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      JobStateInternal finalState = JobStateInternal.valueOf(
+          ((JobAbortCompletedEvent) event).getFinalState().name());
+      job.unsuccessfulFinish(finalState);
-    if (finishTime == 0) setFinishTime();
-    cleanupProgress = 1.0f;
-    JobUnsuccessfulCompletionEvent unsuccessfulJobEvent =
-      new JobUnsuccessfulCompletionEvent(oldJobId,
-          finishTime,
-          succeededMapTaskCount,
-          succeededReduceTaskCount,
-          finalState.toString());
-    eventHandler.handle(new JobHistoryEvent(jobId, unsuccessfulJobEvent));
-      job.abortJob(org.apache.hadoop.mapreduce.JobStatus.State.KILLED);
-      job.finished(JobStateInternal.KILLED);
+      job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+          job.jobContext,
+          org.apache.hadoop.mapreduce.JobStatus.State.KILLED));
+    }
+  }
+
+  private static class KilledDuringSetupTransition
+  implements SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      job.metrics.endRunningJob(job);
+      job.addDiagnostic("Job received kill in SETUP state.");
+      job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+          job.jobContext,
+          org.apache.hadoop.mapreduce.JobStatus.State.KILLED));
-      return checkJobForCompletion(job);
+      return checkJobAfterTaskCompletion(job);
-    protected JobStateInternal checkJobForCompletion(JobImpl job) {
+    protected JobStateInternal checkJobAfterTaskCompletion(JobImpl job) {
-        job.abortJob(org.apache.hadoop.mapreduce.JobStatus.State.FAILED);
-        return job.finished(JobStateInternal.FAILED);
+        job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+            job.jobContext,
+            org.apache.hadoop.mapreduce.JobStatus.State.FAILED));
+        return JobStateInternal.FAIL_ABORT;
-      JobStateInternal jobCompleteSuccess = JobImpl.checkJobCompleteSuccess(job);
-      if (jobCompleteSuccess != null) {
-        return jobCompleteSuccess;
-      }
-      
-      //return the current state, Job not finished yet
-      return job.getInternalState();
+      return job.checkReadyForCommit();
-  static class JobNoTasksCompletedTransition implements
+  private static class JobNoTasksCompletedTransition implements
-      JobStateInternal jobCompleteSuccess = JobImpl.checkJobCompleteSuccess(job);
-      if (jobCompleteSuccess != null) {
-        return jobCompleteSuccess;
-      }
-      
-      // Return the current state, Job not finished yet
-      return job.getInternalState();
+      return job.checkReadyForCommit();
+    }
+  }
+
+  private static class CommitSucceededTransition implements
+      SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      job.logJobHistoryFinishedEvent();
+      job.finished(JobStateInternal.SUCCEEDED);
+    }
+  }
+
+  private static class CommitFailedTransition implements
+      SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      JobCommitFailedEvent jcfe = (JobCommitFailedEvent)event;
+      job.addDiagnostic("Job commit failed: " + jcfe.getMessage());
+      job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+          job.jobContext,
+          org.apache.hadoop.mapreduce.JobStatus.State.FAILED));
+    }
+  }
+
+  private static class KilledDuringCommitTransition implements
+      SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      job.setFinishTime();
+      job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+          job.jobContext,
+          org.apache.hadoop.mapreduce.JobStatus.State.KILLED));
+    }
+  }
+
+  private static class KilledDuringAbortTransition implements
+      SingleArcTransition<JobImpl, JobEvent> {
+    @Override
+    public void transition(JobImpl job, JobEvent event) {
+      job.unsuccessfulFinish(JobStateInternal.KILLED);
-    protected JobStateInternal checkJobForCompletion(JobImpl job) {
+    protected JobStateInternal checkJobAfterTaskCompletion(JobImpl job) {
-        job.abortJob(org.apache.hadoop.mapreduce.JobStatus.State.KILLED);
-        return job.finished(JobStateInternal.KILLED);
+        job.eventHandler.handle(new CommitterJobAbortEvent(job.jobId,
+            job.jobContext,
+            org.apache.hadoop.mapreduce.JobStatus.State.KILLED));
+        return JobStateInternal.KILL_ABORT;

MOV26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 UPD40 INS40 INS40 INS40 INS40 INS40 MOV44 INS55 INS55 INS55 INS55 INS55 INS55 INS55 INS55 UPD43 INS44 MOV21 INS83 MOV43 INS42 INS8 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 UPD83 UPD42 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 MOV74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS42 INS74 INS32 UPD42 UPD42 INS33 UPD43 UPD42 INS43 INS42 INS25 INS50 INS60 INS25 MOV41 INS60 INS60 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 MOV43 MOV21 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 MOV21 INS43 INS43 INS43 MOV78 INS83 INS39 INS42 MOV44 MOV44 INS8 UPD42 MOV78 INS83 MOV43 INS42 MOV44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 MOV44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS39 INS44 INS44 INS8 INS78 MOV43 UPD42 INS44 INS32 INS42 UPD42 INS42 INS27 INS8 INS42 INS49 INS49 MOV41 INS49 INS49 INS41 INS49 INS41 INS49 MOV41 INS43 INS59 INS27 INS8 INS32 INS39 INS59 INS39 INS59 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 MOV21 MOV21 MOV21 MOV25 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS21 UPD42 MOV42 INS42 INS42 INS21 MOV21 INS21 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS43 INS42 MOV21 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 MOV21 MOV21 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 MOV21 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS32 INS42 INS40 INS40 INS40 INS42 UPD42 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS32 INS27 INS27 INS21 INS41 INS42 INS42 INS32 INS42 INS36 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 UPD42 INS42 INS42 MOV43 INS59 INS32 INS32 INS32 INS42 INS32 INS42 MOV32 INS42 INS42 INS43 INS59 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS40 INS40 INS32 UPD42 INS32 INS27 INS8 INS42 INS42 INS32 INS42 INS40 INS32 INS40 INS42 INS42 INS40 INS40 INS27 INS42 MOV21 INS40 INS42 INS42 INS42 INS42 INS27 UPD40 MOV40 UPD42 MOV42 INS14 INS40 INS42 INS14 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS40 UPD42 INS14 INS40 INS42 INS42 UPD42 UPD42 UPD45 INS40 INS42 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 INS11 INS40 UPD42 INS14 INS40 INS42 INS14 MOV42 UPD42 MOV42 INS40 INS21 INS41 INS32 INS42 INS40 INS40 INS32 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS22 INS42 INS42 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS45 INS32 INS43 INS40 INS40 INS40 INS43 INS40 INS40 INS42 INS42 INS32 INS43 INS40 INS40 INS40 INS43 INS40 INS40 INS40 INS40 INS43 INS42 INS43 INS40 INS40 INS40 INS43 INS40 INS40 INS40 INS32 INS40 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS52 INS42 UPD42 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS40 INS36 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS42 INS40 UPD42 INS14 INS42 UPD42 INS42 INS42 UPD42 INS40 UPD42 MOV42 INS14 INS32 INS42 INS40 INS40 INS40 INS42 UPD42 MOV42 INS42 INS42 INS42 INS40 INS34 INS42 INS42 INS40 INS34 INS40 UPD42 INS14 INS11 INS36 UPD42 INS43 INS40 INS40 INS40 INS43 INS40 INS40 INS40 INS32 INS42 INS40 INS40 INS40 INS42 INS43 INS40 INS40 INS40 INS43 INS42 INS11 INS42 INS42 INS32 INS42 INS40 INS40 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS32 INS42 INS40 INS40 INS40 INS42 INS32 INS42 INS40 INS40 INS40 INS42 INS32 INS42 INS40 INS40 INS32 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS32 INS42 INS40 INS40 INS40 INS14 INS32 INS42 INS40 INS40 INS40 INS14 INS43 INS32 INS42 INS40 INS40 INS40 INS42 INS43 INS42 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS40 INS40 INS32 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS32 INS42 INS40 INS40 INS40 INS14 INS32 INS42 INS40 INS40 INS40 INS14 INS43 INS32 INS42 INS40 INS40 INS40 INS42 INS43 INS42 INS32 INS42 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS40 INS40 MOV32 MOV32 INS42 INS40 INS40 INS40 INS42 UPD42 INS40 INS40 INS40 INS42 UPD40 UPD40 UPD40 UPD42 UPD40 UPD40 UPD40 UPD40 UPD40 MOV40 INS42 UPD40 UPD40 UPD40 UPD42 UPD40 UPD40 UPD40 UPD42 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 UPD40 MOV40 INS14 INS43 UPD40 UPD40 UPD40 INS14 INS43 INS42 INS32 INS42 INS40 INS40 MOV32 INS43 INS42 MOV32 MOV42 UPD40 MOV40 UPD40 MOV40 UPD40 MOV40 UPD42 MOV42 INS42 UPD40 UPD40 UPD40 UPD42 UPD40 UPD40 INS40 INS42 UPD40 UPD40 UPD40 UPD42 UPD40 INS32 UPD40 MOV14 UPD40 UPD40 UPD40 UPD42 INS42 INS42 UPD40 MOV40 INS40 UPD40 UPD40 INS40 MOV14 UPD40 UPD40 UPD40 UPD42 UPD40 UPD40 UPD40 UPD42 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 UPD42 UPD40 MOV40 UPD40 MOV14 INS32 UPD40 MOV14 INS32 UPD40 MOV14 INS42 INS42 UPD40 MOV40 INS40 UPD40 UPD42 INS42 INS42 MOV40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 UPD40 UPD40 UPD40 INS14 UPD40 UPD40 UPD40 INS14 INS43 UPD40 MOV40 UPD40 INS14 INS43 INS42 UPD40 MOV40 UPD40 MOV40 UPD40 INS42 INS43 INS42 UPD40 UPD40 UPD40 UPD42 INS42 UPD40 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL83 DEL42 DEL32 DEL42 DEL40 DEL27 DEL8 DEL8 DEL25 DEL52 DEL42 DEL22 DEL43 DEL42 DEL8 DEL83 DEL42 DEL40 DEL32 DEL27 DEL32 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL12 DEL54 DEL41 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31 DEL40 DEL42 DEL40 DEL32 DEL21 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL40 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL32 DEL41 DEL8 DEL40 DEL42 DEL40 DEL32 DEL41