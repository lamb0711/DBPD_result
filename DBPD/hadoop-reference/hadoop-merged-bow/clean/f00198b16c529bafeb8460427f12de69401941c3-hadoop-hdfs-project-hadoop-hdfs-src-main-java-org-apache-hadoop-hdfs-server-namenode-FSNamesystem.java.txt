HDFS-2301. Start/stop appropriate namenode services when transition to active and standby states. Contributed by Suresh Srinivas.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1182080 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.util.StringUtils;
-  void activateSecretManager() throws IOException {
+  void startSecretManager() throws IOException {
-  /**
-   * Activate FSNamesystem daemons.
+  void stopSecretManager() {
+    if (dtSecretManager != null) {
+      dtSecretManager.stopThreads();
+    }
+  }
+  
+  /** 
+   * Start services common to both active and standby states
+   * @throws IOException
-  void activate(Configuration conf) throws IOException {
+  void startCommonServices(Configuration conf) throws IOException {
-
-
-
-      this.lmthread = new Daemon(leaseManager.new Monitor());
-      lmthread.start();
+  
+  /** 
+   * Stop services common to both active and standby states
+   * @throws IOException
+   */
+  void stopCommonServices() {
+    writeLock();
+    try {
+      if (blockManager != null) blockManager.close();
+      if (nnrmthread != null) nnrmthread.interrupt();
+    } finally {
+      writeUnlock();
+    }
+  }
+  
+  /**
+   * Start services required in active state
+   * @throws IOException
+   */
+  void startActiveServices() throws IOException {
+    LOG.info("Starting services required for active state");
+    writeLock();
+    try {
+      startSecretManager();
+      lmthread = new Daemon(leaseManager.new Monitor());
+      lmthread.start();
+    } finally {
+      writeUnlock();
+    }
+  }
+  
+  /** 
+   * Start services required in active state 
+   * @throws InterruptedException
+   */
+  void stopActiveServices() {
+    LOG.info("Stopping services started for active state");
+    writeLock();
+    try {
+      stopSecretManager();
+      if (lmthread != null) {
+        try {
+          lmthread.interrupt();
+          lmthread.join(3000);
+        } catch (InterruptedException ie) {
+          LOG.warn("Encountered exception ", ie);
+        }
+        lmthread = null;
+      }
+    } finally {
+      writeUnlock();
+    }
+  }
+  
+  /** Start services required in standby state */
+  void startStandbyServices() {
+    LOG.info("Starting services required for standby state");
+  }
+  /** Stop services required in standby state */
+  void stopStandbyServices() {
+    LOG.info("Stopping services started for standby state");
+  }
+  
-   * Version of {@see #getNamespaceInfo()} that is not protected by a lock.
+   * Version of @see #getNamespaceInfo() that is not protected by a lock.
-      if (blockManager != null) blockManager.close();
+      stopCommonServices();
-      if (dtSecretManager != null) dtSecretManager.stopThreads();
-      if (nnrmthread != null) nnrmthread.interrupt();
-    } catch (Exception e) {
-      LOG.warn("Exception shutting down FSNamesystem", e);
-        if (lmthread != null) {
-          lmthread.interrupt();
-          lmthread.join(3000);
-        }
+        stopActiveServices();
+        stopStandbyServices();
-      } catch (InterruptedException ie) {
-                        false, blockManager.maxReplication, (long)0);
+                        false, blockManager.maxReplication, 0);
-      replication = (int)pendingFile.getReplication();
+      replication = pendingFile.getReplication();
-      INodeFileUnderConstruction pendingFile) throws IOException {
+      INodeFileUnderConstruction pendingFile) {
-      try {
-        assert isConsistent() : " SafeMode: Inconsistent filesystem state: "
-          + "Total num of blocks, active blocks, or "
-          + "total safe blocks don't match.";
-      } catch(IOException e) {
-        System.err.print(StringUtils.stringifyException(e));
-      }
+      assert isConsistent() : " SafeMode: Inconsistent filesystem state: "
+        + "Total num of blocks, active blocks, or "
+        + "total safe blocks don't match.";
-        (int) (((double) blockTotal) * replQueueThreshold);
+        (int) (blockTotal * replQueueThreshold);
-      if ((int)replication == safeReplication)
+      if (replication == safeReplication)
-    private boolean isConsistent() throws IOException {
+    private boolean isConsistent() {

INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS39 INS42 INS8 UPD42 INS29 INS39 INS42 INS8 INS29 INS39 INS42 MOV43 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 INS29 INS39 INS42 INS8 MOV25 INS65 INS65 INS65 INS21 INS54 INS65 INS65 INS21 INS21 INS54 INS65 INS65 INS21 INS21 INS54 INS65 INS21 INS65 INS21 MOV8 INS8 UPD66 INS42 INS66 INS42 INS32 MOV8 INS8 INS66 INS42 INS32 INS32 INS8 INS8 INS66 INS42 INS32 INS32 MOV8 INS8 INS66 INS32 INS66 INS32 UPD66 INS8 MOV41 MOV21 INS42 INS21 INS42 INS42 INS45 INS42 INS21 MOV21 MOV21 INS21 INS42 INS42 INS45 INS42 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS45 MOV21 MOV25 INS32 INS32 INS32 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS54 INS21 INS42 UPD42 INS21 INS21 MOV25 MOV32 MOV8 INS12 INS7 INS32 INS32 INS34 MOV44 INS8 INS42 INS33 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS45 INS42 DEL40 DEL26 DEL52 DEL42 DEL22 DEL66 DEL66 DEL65 DEL42 DEL45 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL8 DEL12 DEL39 DEL34 DEL11 DEL39 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL39 DEL42 DEL11 DEL36 DEL39 DEL42 DEL11