HADOOP-10047. Add a direct-buffer based apis for compression. Contributed by Gopal V.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543456 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.io.compress.DirectCompressor;
-public class ZlibCompressor implements Compressor {
+public class ZlibCompressor implements Compressor,DirectCompressor {
+    userBuf = null;
+  private int put(ByteBuffer dst, ByteBuffer src) {
+    // this will lop off data from src[pos:limit] into dst[pos:limit]
+    int l1 = src.remaining();
+    int l2 = dst.remaining();
+    int pos1 = src.position();
+    int pos2 = dst.position();
+    int len = Math.min(l1, l2);
+
+    if (len == 0) {
+      return 0;
+    }
+
+    ByteBuffer slice = src.slice();
+    slice.limit(len);
+    dst.put(slice);
+    src.position(pos1 + len);
+    return len;
+  }
+
+  public int compress(ByteBuffer dst, ByteBuffer src) throws IOException {
+    assert dst.remaining() > 0 : "dst.remaining() == 0";
+    int n = 0;
+    
+    /* fast path for clean state and direct buffers */
+    /* TODO: reset should free userBuf? */
+    if((src != null && src.isDirect()) && dst.isDirect() && userBuf == null) {
+      /*
+       * TODO: fix these assumptions in inflateDirect(), eventually by allowing
+       * it to read position()/limit() directly
+       */
+      boolean cleanDst = (dst.position() == 0 && dst.remaining() == dst.capacity() && dst.capacity() >= directBufferSize);
+      boolean cleanState = (keepUncompressedBuf == false && uncompressedDirectBufLen == 0 && compressedDirectBuf.remaining() == 0);
+      /* use the buffers directly */
+      if(cleanDst && cleanState) {
+        Buffer originalCompressed = compressedDirectBuf;
+        Buffer originalUncompressed = uncompressedDirectBuf;
+        int originalBufferSize = directBufferSize;
+        uncompressedDirectBuf = src;
+        uncompressedDirectBufOff = src.position();
+        uncompressedDirectBufLen = src.remaining();
+        compressedDirectBuf = dst;
+        directBufferSize = dst.remaining();
+        // Compress data
+        n = deflateBytesDirect();
+        // we move dst.position() forward, not limit() 
+        // unlike the local buffer case, which moves it when we put() into the dst
+        dst.position(n);
+        if(uncompressedDirectBufLen > 0) {
+          src.position(uncompressedDirectBufOff);
+        } else {
+          src.position(src.limit());
+        }
+        compressedDirectBuf = originalCompressed;
+        uncompressedDirectBuf = originalUncompressed;
+        uncompressedDirectBufOff = 0;
+        uncompressedDirectBufLen = 0;
+        directBufferSize = originalBufferSize;
+        return n;
+      }
+    }
+    
+    // Check if there is compressed data
+    if (compressedDirectBuf.remaining() > 0) {
+      n = put(dst, (ByteBuffer) compressedDirectBuf);
+    }
+
+    if (dst.remaining() == 0) {
+      return n;
+    } else {
+      needsInput();
+
+      // if we have drained userBuf, read from src (ideally, do not mix buffer
+      // modes, but sometimes you can)
+      if (userBufLen == 0 && src != null && src.remaining() > 0) {
+        put((ByteBuffer) uncompressedDirectBuf, src);
+        uncompressedDirectBufLen = uncompressedDirectBuf.position();
+      }
+
+      // Re-initialize the zlib's output direct buffer
+      compressedDirectBuf.rewind();
+      compressedDirectBuf.limit(directBufferSize);
+
+      // Compress data
+      int more = deflateBytesDirect();
+
+      compressedDirectBuf.limit(more);
+
+      // Check if zlib consumed all input buffer
+      // set keepUncompressedBuf properly
+      if (uncompressedDirectBufLen <= 0) { // zlib consumed all input buffer
+        keepUncompressedBuf = false;
+        uncompressedDirectBuf.clear();
+        uncompressedDirectBufOff = 0;
+        uncompressedDirectBufLen = 0;
+      } else { // zlib did not consume all input buffer
+        keepUncompressedBuf = true;
+      }
+
+      // fill the dst buffer from compressedDirectBuf
+      int fill = put(dst, ((ByteBuffer) compressedDirectBuf));
+      return n + fill;
+    }
+  }
+  

INS26 INS40 INS43 INS31 INS31 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS42 INS6 INS60 INS25 INS25 INS25 INS7 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS27 INS45 INS39 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS8 INS42 INS33 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS34 INS42 INS34 INS36 INS32 INS27 INS60 INS60 INS25 INS32 INS34 INS21 INS32 INS34 INS41 INS21 INS25 INS21 INS21 INS60 INS21 INS25 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS7 INS42 INS42 INS42 INS32 INS27 INS8 INS32 INS32 INS39 INS59 INS32 INS27 INS8 INS8 INS39 INS59 INS27 INS27 INS32 INS42 INS36 INS42 INS36 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS32 INS42 INS27 INS27 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS27 INS27 INS43 INS59 INS43 INS59 INS39 INS59 INS7 INS7 INS7 INS7 INS7 INS7 INS32 INS27 INS8 INS8 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS11 INS27 INS27 INS32 INS34 INS32 INS7 INS42 INS7 INS32 INS7 INS7 INS7 INS42 INS42 INS36 INS27 INS27 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS43 INS42 INS42 INS34 INS42 INS33 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS9 INS11 INS27 INS27 INS32 INS42 INS27 INS27 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS32 INS34 INS32 INS32 INS42 INS42 INS42 INS9 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42