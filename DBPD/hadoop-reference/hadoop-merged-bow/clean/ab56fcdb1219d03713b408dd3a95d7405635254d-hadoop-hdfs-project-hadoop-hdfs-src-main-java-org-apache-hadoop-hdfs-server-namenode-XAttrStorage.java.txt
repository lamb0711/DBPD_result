Merge remote-tracking branch 'apache/trunk' into HDFS-7285

+import java.util.ArrayList;
-import java.util.Map;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-  private static final Map<String, String> internedNames = Maps.newHashMap();
+  private static final SerialNumberMap<String> NAME_MAP =
+      new SerialNumberMap<>();
+
+  public static int getNameSerialNumber(String name) {
+    return NAME_MAP.get(name);
+  }
+
+  public static String getName(int n) {
+    return NAME_MAP.get(n);
+  }
-   * Reads the existing extended attributes of an inode. If the 
-   * inode does not have an <code>XAttr</code>, then this method
-   * returns an empty list.
+   * Reads the extended attribute of an inode by name with prefix.
-   * Must be called while holding the FSDirectory read lock.
-   * @return List<XAttr> <code>XAttr</code> list. 
+   * @param prefixedName xAttr name with prefix
+   * @return the xAttr
-  public static List<XAttr> readINodeXAttrs(INode inode, int snapshotId) {
+  public static XAttr readINodeXAttrByPrefixedName(INode inode,
+      int snapshotId, String prefixedName) {
-    return f == null ? ImmutableList.<XAttr> of() : f.getXAttrs();
+    return f == null ? null : f.getXAttr(prefixedName);
-  
+
-    return f == null ? ImmutableList.<XAttr> of() : f.getXAttrs();
+    return f == null ? new ArrayList<XAttr>(0) : f.getXAttrs();
-    if (xAttrs == null || xAttrs.isEmpty()) {
-      if (inode.getXAttrFeature() != null) {
-        inode.removeXAttrFeature(snapshotId);
-      }
-      return;
-    }
-    // Dedupe the xAttr name and save them into a new interned list
-    List<XAttr> internedXAttrs = Lists.newArrayListWithCapacity(xAttrs.size());
-    for (XAttr xAttr : xAttrs) {
-      final String name = xAttr.getName();
-      String internedName = internedNames.get(name);
-      if (internedName == null) {
-        internedName = name;
-        internedNames.put(internedName, internedName);
-      }
-      XAttr internedXAttr = new XAttr.Builder()
-          .setName(internedName)
-          .setNameSpace(xAttr.getNameSpace())
-          .setValue(xAttr.getValue())
-          .build();
-      internedXAttrs.add(internedXAttr);
-    }
-    // Save the list of interned xattrs
-    ImmutableList<XAttr> newXAttrs = ImmutableList.copyOf(internedXAttrs);
-    inode.addXAttrFeature(new XAttrFeature(newXAttrs), snapshotId);
+    if (xAttrs == null || xAttrs.isEmpty()) {
+      return;
+    }
+    inode.addXAttrFeature(new XAttrFeature(xAttrs), snapshotId);

MOV26 UPD40 INS31 INS31 INS31 UPD74 INS39 INS42 INS44 MOV83 MOV83 MOV43 INS42 INS44 INS8 INS29 INS83 INS83 MOV43 INS42 MOV44 MOV44 INS44 INS8 MOV29 INS83 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV43 MOV8 UPD43 UPD42 INS14 MOV43 INS42 INS39 INS42 INS41 INS65 MOV65 MOV65 INS65 INS65 MOV43 INS42 MOV60 INS41 INS25 INS21 UPD42 INS74 INS32 INS32 INS66 INS66 INS42 INS66 INS66 INS16 MOV27 INS8 INS32 INS43 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV27 INS33 INS32 MOV27 INS14 MOV41 INS42 INS42 INS14 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS74 INS34 MOV43 INS42 INS43 MOV43 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL32 DEL16 DEL42 DEL42 DEL32 DEL39 DEL42 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL40 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL14 DEL42 DEL32 DEL21 DEL8 DEL31