Reverting the previous merge r1416603 which committed some extra changes

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1416712 13f79535-47bb-0310-9956-ffa450edef68

-  
+
-  public int searchChildren(INode inode) {
+  private int searchChildren(INode inode) {
-  public int searchChildrenForExistingINode(INode inode) {
-    final int i = searchChildren(inode);
-    if (i < 0) {
-      throw new AssertionError("Child not found: inode=" + inode);
-    }
-    return i;
-  }
-
-  public INode removeChild(INode node, Snapshot latestSnapshot) {
+  INode removeChild(INode node) {
-
-    if (latestSnapshot != null) {
-      final INodeDirectoryWithSnapshot dir
-          = INodeDirectoryWithSnapshot.replaceDir(this, latestSnapshot);
-      return dir.removeChild(node, latestSnapshot);
-    }
-
+
-  public INode replaceChild(INodeDirectory newChild, Snapshot latestSnapshot) {
+  void replaceChild(INode newChild) {
-    if (latestSnapshot != null) {
-      final INodeDirectoryWithSnapshot dir
-          = INodeDirectoryWithSnapshot.replaceDir(this, latestSnapshot);
-      return dir.replaceChild(newChild, latestSnapshot);
+    final int low = searchChildren(newChild);
+    if (low>=0) { // an old child exists so replace by the newChild
+      children.set(low, newChild);
+    } else {
+      throw new IllegalArgumentException("No child exists to be replaced");
-
-    // find the old child and replace it
-    final int low = searchChildrenForExistingINode(newChild);
-    final INode oldChild = children.set(low, newChild);
-    // set the parent of the children of the child.
-    for(INode i : newChild.getChildrenList(null)) {
-      i.parent = newChild;
-    }
-    return oldChild;
-  public INode getChild(byte[] name, Snapshot snapshot) {
-    assertNull(snapshot);
-
+  private INode getChild(byte[] name, Snapshot snapshot) {
-  public boolean addChild(final INode node, final boolean setModTime,
-      Snapshot latestSnapshot) {
-    if (latestSnapshot != null) {
-      final INodeDirectoryWithSnapshot dir
-          = INodeDirectoryWithSnapshot.replaceDir(this, latestSnapshot);
-      return dir.addChild(node, setModTime, latestSnapshot);
-    }
-
+  public boolean addChild(final INode node, final boolean setModTime) {
-    if (setModTime) {
-      updateModificationTime(node.getModificationTime());
-    }
+    if (setModTime)
+      setModificationTime(node.getModificationTime());
-    INodesInPath inodes =  getExistingPathINodes(pathComponents, 2, false);
-    INodeDirectory parent = INodeDirectory.valueOf(inodes.inodes[0], pathComponents);
-    return parent.addChild(newNode, true, inodes.getLatestSnapshot());
+    INodeDirectory parent = getParent(pathComponents);
+    return parent.addChild(newNode, true);
-    return (INodeDirectory)getParentINodesInPath(pathComponents).getINode(0);
-  }
-
-  INodesInPath getParentINodesInPath(byte[][] pathComponents
-      ) throws FileNotFoundException, PathIsNotDirectoryException,
-      UnresolvedLinkException {
-    INodeDirectory.valueOf(inodes.inodes[0], pathComponents);
-    return inodes;
+    return INodeDirectory.valueOf(inodes.inodes[0], pathComponents);
-  
+
-    assertNull(snapshot);
+    //TODO: use snapshot to select children list
-
-  public static class INodesInPath {
+  static class INodesInPath {
-    public INode getINode(int i) {
+    INode getINode(int i) {
-
-  /** 
-   * Get last modification time of inode.
-   * @return access time
-   */
-  public long getModificationTime(Snapshot snapshot) {
-    assertNull(snapshot);
-    return getModificationTime();
-  }

MOV31 UPD83 MOV29 UPD39 UPD42 MOV44 UPD83 MOV43 UPD42 UPD42 MOV21 UPD27 INS8 MOV21 UPD43 MOV32 UPD42 UPD42 INS21 MOV42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD43 INS45 UPD42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL52 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL27 DEL42 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL52 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL33 DEL32 DEL40 DEL42 DEL7 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL52 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL34 DEL9 DEL42 DEL42 DEL42 DEL40 DEL34 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL11 DEL41 DEL8 DEL31 DEL42 DEL43 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL83 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL41 DEL8 DEL31