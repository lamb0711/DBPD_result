Revert "MAPREDUCE-5785. Derive heap size or mapreduce.*.memory.mb automatically. (Gera Shegalov and Karthik Kambatla via kasha)"

This reverts commit a4df9eed059977374c8e889cb85d79e8e514ad30.

-import java.util.regex.Matcher;
-import com.google.common.annotations.VisibleForTesting;
-import org.apache.hadoop.mapreduce.TaskType;
-  private static final Pattern JAVA_OPTS_XMX_PATTERN =
-          Pattern.compile(".*(?:^|\\s)-Xmx(\\d+)([gGmMkK]?)(?:$|\\s).*");
-
+  
+  public static final String DEFAULT_MAPRED_TASK_JAVA_OPTS = "-Xmx200m";
+  
-
-  private String getConfiguredTaskJavaOpts(TaskType taskType) {
-    String userClasspath = "";
-    String adminClasspath = "";
-    if (taskType == TaskType.MAP) {
-      userClasspath = get(JobConf.MAPRED_MAP_TASK_JAVA_OPTS,
-          get(JobConf.MAPRED_TASK_JAVA_OPTS));
-      adminClasspath = get(MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS,
-          MRJobConfig.DEFAULT_MAPRED_ADMIN_JAVA_OPTS);
-    } else {
-      userClasspath = get(JobConf.MAPRED_REDUCE_TASK_JAVA_OPTS,
-          get(JobConf.MAPRED_TASK_JAVA_OPTS));
-      adminClasspath = get(MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS,
-          MRJobConfig.DEFAULT_MAPRED_ADMIN_JAVA_OPTS);
-    }
-
-    // Add admin classpath first so it can be overridden by user.
-    return adminClasspath + " " + userClasspath;
-  }
-
-  @Private
-  public String getTaskJavaOpts(TaskType taskType) {
-    String javaOpts = getConfiguredTaskJavaOpts(taskType);
-
-    if (!javaOpts.contains("-Xmx")) {
-      float heapRatio = getFloat(MRJobConfig.HEAP_MEMORY_MB_RATIO,
-          MRJobConfig.DEFAULT_HEAP_MEMORY_MB_RATIO);
-
-      if (heapRatio > 1.0f || heapRatio < 0) {
-        LOG.warn("Invalid value for " + MRJobConfig.HEAP_MEMORY_MB_RATIO
-            + ", using the default.");
-        heapRatio = MRJobConfig.DEFAULT_HEAP_MEMORY_MB_RATIO;
-      }
-
-      int taskContainerMb = getMemoryRequired(taskType);
-      int taskHeapSize = (int)Math.ceil(taskContainerMb * heapRatio);
-
-      String xmxArg = String.format("-Xmx%dm", taskHeapSize);
-      LOG.info("Task java-opts do not specify heap size. Setting task attempt" +
-          " jvm max heap size to " + xmxArg);
-
-      javaOpts += " " + xmxArg;
-    }
-
-    return javaOpts;
-  }
-
-  /**
-   * Parse the Maximum heap size from the java opts as specified by the -Xmx option
-   * Format: -Xmx<size>[g|G|m|M|k|K]
-   * @param javaOpts String to parse to read maximum heap size
-   * @return Maximum heap size in MB or -1 if not specified
-   */
-  @Private
-  @VisibleForTesting
-  public static int parseMaximumHeapSizeMB(String javaOpts) {
-    // Find the last matching -Xmx following word boundaries
-    Matcher m = JAVA_OPTS_XMX_PATTERN.matcher(javaOpts);
-    if (m.matches()) {
-      int size = Integer.parseInt(m.group(1));
-      if (size <= 0) {
-        return -1;
-      }
-      if (m.group(2).isEmpty()) {
-        // -Xmx specified in bytes
-        return size / (1024 * 1024);
-      }
-      char unit = m.group(2).charAt(0);
-      switch (unit) {
-        case 'g':
-        case 'G':
-          // -Xmx specified in GB
-          return size * 1024;
-        case 'm':
-        case 'M':
-          // -Xmx specified in MB
-          return size;
-        case 'k':
-        case 'K':
-          // -Xmx specified in KB
-          return size / 1024;
-      }
-    }
-    // -Xmx not specified
-    return -1;
-  }
-
-  @Private
-  public int getMemoryRequired(TaskType taskType) {
-    int memory = 1024;
-    int heapSize = parseMaximumHeapSizeMB(getConfiguredTaskJavaOpts(taskType));
-    float heapRatio = getFloat(MRJobConfig.HEAP_MEMORY_MB_RATIO,
-        MRJobConfig.DEFAULT_HEAP_MEMORY_MB_RATIO);
-    if (taskType == TaskType.MAP)  {
-      if (get(MRJobConfig.MAP_MEMORY_MB) == null && heapSize > 0) {
-        memory = (int) Math.ceil(heapSize / heapRatio);
-        LOG.info(MRJobConfig.MAP_MEMORY_MB +
-            " not specified. Derived from javaOpts = " + memory);
-      } else {
-        memory = getInt(MRJobConfig.MAP_MEMORY_MB,
-            MRJobConfig.DEFAULT_MAP_MEMORY_MB);
-      }
-    } else if (taskType == TaskType.REDUCE) {
-      if (get(MRJobConfig.REDUCE_MEMORY_MB) == null && heapSize > 0) {
-        memory = (int) Math.ceil(heapSize / heapRatio);
-        LOG.info(MRJobConfig.REDUCE_MEMORY_MB +
-            " not specified. Derived from javaOpts = " + memory);
-      } else {
-        memory = getInt(MRJobConfig.REDUCE_MEMORY_MB,
-            MRJobConfig.DEFAULT_REDUCE_MEMORY_MB);
-      }
-    }
-
-    return memory;
-  }
+  

MOV23 UPD83 MOV43 UPD42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL40 DEL42 DEL40 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL40 DEL42 DEL40 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL42 DEL27 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL38 DEL39 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL45 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL34 DEL38 DEL41 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL42 DEL34 DEL34 DEL27 DEL36 DEL27 DEL41 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL13 DEL49 DEL13 DEL49 DEL42 DEL34 DEL27 DEL41 DEL13 DEL49 DEL13 DEL49 DEL42 DEL41 DEL13 DEL49 DEL13 DEL49 DEL42 DEL34 DEL27 DEL41 DEL50 DEL8 DEL25 DEL34 DEL38 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL32 DEL33 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL40 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL40 DEL27 DEL42 DEL40 DEL32 DEL33 DEL27 DEL42 DEL34 DEL27 DEL27 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL40 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL42 DEL41 DEL8 DEL31