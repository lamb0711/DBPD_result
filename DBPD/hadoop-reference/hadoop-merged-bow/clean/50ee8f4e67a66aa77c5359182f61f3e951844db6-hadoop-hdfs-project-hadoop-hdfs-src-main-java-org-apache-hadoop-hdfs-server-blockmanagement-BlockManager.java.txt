HDFS-7960. The full block report should prune zombie storages even if they're not empty. Contributed by Colin McCabe and Eddy Xu.

+import org.apache.hadoop.hdfs.server.protocol.BlockReportContext;
-      final BlockListAsLongs newReport) throws IOException {
+      final BlockListAsLongs newReport, BlockReportContext context,
+      boolean lastStorageInRpc) throws IOException {
+      if (context != null) {
+        storageInfo.setLastBlockReportId(context.getReportId());
+        if (lastStorageInRpc) {
+          int rpcsSeen = node.updateBlockReportContext(context);
+          if (rpcsSeen >= context.getTotalRpcs()) {
+            List<DatanodeStorageInfo> zombies = node.removeZombieStorages();
+            if (zombies.isEmpty()) {
+              LOG.debug("processReport 0x{}: no zombie storages found.",
+                  Long.toHexString(context.getReportId()));
+            } else {
+              for (DatanodeStorageInfo zombie : zombies) {
+                removeZombieReplicas(context, zombie);
+              }
+            }
+            node.clearBlockReportContext();
+          } else {
+            LOG.debug("processReport 0x{}: {} more RPCs remaining in this " +
+                    "report.", Long.toHexString(context.getReportId()),
+                (context.getTotalRpcs() - rpcsSeen)
+            );
+          }
+        }
+      }
+  private void removeZombieReplicas(BlockReportContext context,
+      DatanodeStorageInfo zombie) {
+    LOG.warn("processReport 0x{}: removing zombie storage {}, which no " +
+             "longer exists on the DataNode.",
+              Long.toHexString(context.getReportId()), zombie.getStorageID());
+    assert(namesystem.hasWriteLock());
+    Iterator<BlockInfoContiguous> iter = zombie.getBlockIterator();
+    int prevBlocks = zombie.numBlocks();
+    while (iter.hasNext()) {
+      BlockInfoContiguous block = iter.next();
+      // We assume that a block can be on only one storage in a DataNode.
+      // That's why we pass in the DatanodeDescriptor rather than the
+      // DatanodeStorageInfo.
+      // TODO: remove this assumption in case we want to put a block on
+      // more than one storage on a datanode (and because it's a difficult
+      // assumption to really enforce)
+      removeStoredBlock(block, zombie.getDatanodeDescriptor());
+      invalidateBlocks.remove(zombie.getDatanodeDescriptor(), block);
+    }
+    assert(zombie.numBlocks() == 0);
+    LOG.warn("processReport 0x{}: removed {} replicas from storage {}, " +
+            "which no longer exists on the DataNode.",
+            Long.toHexString(context.getReportId()), prevBlocks,
+            zombie.getStorageID());
+  }
+

INS26 INS40 INS31 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS21 INS6 INS60 INS60 INS61 INS6 INS21 INS42 INS42 INS42 INS32 INS36 INS74 INS59 INS39 INS59 INS32 INS8 INS36 INS32 INS25 INS42 INS42 INS27 INS32 INS32 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS21 INS21 INS27 INS42 INS42 INS27 INS32 INS42 INS32 INS27 INS8 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS34 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS25 INS42 INS42 INS39 INS59 INS27 INS8 INS8 INS42 INS32 INS42 INS32 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS8 INS32 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS70 INS42 INS42 INS42 INS42 INS27 INS32 INS36 INS42 INS42 INS42 INS42 INS32 INS44 INS42 INS8 INS45 INS45 INS42 INS42 INS32 INS27 INS42 INS42 INS45 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42