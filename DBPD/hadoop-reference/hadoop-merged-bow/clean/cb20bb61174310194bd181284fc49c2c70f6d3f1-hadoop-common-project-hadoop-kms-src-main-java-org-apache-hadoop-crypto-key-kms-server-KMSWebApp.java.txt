Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612403 13f79535-47bb-0310-9956-ffa450edef68

+
+import org.apache.hadoop.crypto.key.CachingKeyProvider;
+import org.apache.hadoop.crypto.key.KeyProviderCryptoExtension;
+
+  private static final String GENERATE_EEK_METER = METRICS_PREFIX +
+      "generate_eek.calls.meter";
+  private static final String DECRYPT_EEK_METER = METRICS_PREFIX +
+      "decrypt_eek.calls.meter";
+  private static Meter decryptEEKCallsMeter;
+  private static Meter generateEEKCallsMeter;
-  private static KeyProvider keyProvider;
+  private static KeyProviderCryptoExtension keyProviderCryptoExtension;
+      generateEEKCallsMeter = metricRegistry.register(GENERATE_EEK_METER,
+          new Meter());
+      decryptEEKCallsMeter = metricRegistry.register(DECRYPT_EEK_METER,
+          new Meter());
-      keyProvider = providers.get(0);
-      long timeOutMillis =
-          kmsConf.getLong(KMSConfiguration.KEY_CACHE_TIMEOUT_KEY,
-              KMSConfiguration.KEY_CACHE_TIMEOUT_DEFAULT);
-      keyProvider = new KMSCacheKeyProvider(keyProvider, timeOutMillis);
+      KeyProvider keyProvider = providers.get(0);
+      if (kmsConf.getBoolean(KMSConfiguration.KEY_CACHE_ENABLE,
+          KMSConfiguration.KEY_CACHE_ENABLE_DEFAULT)) {
+        long keyTimeOutMillis =
+            kmsConf.getLong(KMSConfiguration.KEY_CACHE_TIMEOUT_KEY,
+                KMSConfiguration.KEY_CACHE_TIMEOUT_DEFAULT);
+        long currKeyTimeOutMillis =
+            kmsConf.getLong(KMSConfiguration.CURR_KEY_CACHE_TIMEOUT_KEY,
+                KMSConfiguration.CURR_KEY_CACHE_TIMEOUT_DEFAULT);
+        keyProvider = new CachingKeyProvider(keyProvider, keyTimeOutMillis,
+            currKeyTimeOutMillis);
+      }
+      keyProviderCryptoExtension = KeyProviderCryptoExtension.
+          createKeyProviderCryptoExtension(keyProvider);
+      keyProviderCryptoExtension = 
+          new EagerKeyGeneratorKeyProviderCryptoExtension(kmsConf, 
+              keyProviderCryptoExtension);
+  public static Meter getGenerateEEKCallsMeter() {
+    return generateEEKCallsMeter;
+  }
+
+  public static Meter getDecryptEEKCallsMeter() {
+    return decryptEEKCallsMeter;
+  }
+
-  public static KeyProvider getKeyProvider() {
-    return keyProvider;
+  public static KeyProviderCryptoExtension getKeyProvider() {
+    return keyProviderCryptoExtension;

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 UPD43 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS42 INS8 UPD43 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS41 INS42 INS41 UPD42 INS42 INS45 INS42 INS45 MOV21 INS42 INS42 UPD42 INS21 INS60 INS25 INS21 INS21 INS7 INS43 INS59 INS32 INS8 INS7 INS7 INS42 INS32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS40 INS40 MOV60 INS60 MOV21 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS43 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS40 UPD43 UPD42 INS42 UPD42 DEL42