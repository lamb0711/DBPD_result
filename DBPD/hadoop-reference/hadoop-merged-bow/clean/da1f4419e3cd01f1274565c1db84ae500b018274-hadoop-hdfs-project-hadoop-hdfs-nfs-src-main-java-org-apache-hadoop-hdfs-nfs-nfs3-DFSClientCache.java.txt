merge the rest of trunk to branch HDFS-4949

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532967 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ExecutionException;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.cache.RemovalListener;
+import com.google.common.cache.RemovalNotification;
+
-public class DFSClientCache {
-  static final Log LOG = LogFactory.getLog(DFSClientCache.class);
-  private final LruCache<String, DFSClient> lruTable;
+class DFSClientCache {
+  private static final Log LOG = LogFactory.getLog(DFSClientCache.class);
+  /**
+   * Cache that maps User id to corresponding DFSClient.
+   */
+  @VisibleForTesting
+  final LoadingCache<String, DFSClient> clientCache;
+
+  final static int DEFAULT_DFS_CLIENT_CACHE_SIZE = 256;
+
-  public DFSClientCache(Configuration config) {
-    // By default, keep 256 DFSClient instance for 256 active users
-    this(config, 256);
+  DFSClientCache(Configuration config) {
+    this(config, DEFAULT_DFS_CLIENT_CACHE_SIZE);
-  public DFSClientCache(Configuration config, int size) {
-    lruTable = new LruCache<String, DFSClient>(size);
+  DFSClientCache(Configuration config, int clientCache) {
+    this.clientCache = CacheBuilder.newBuilder()
+        .maximumSize(clientCache)
+        .removalListener(clientRemovealListener())
+        .build(clientLoader());
-  public void put(String uname, DFSClient client) {
-    lruTable.put(uname, client);
+  private CacheLoader<String, DFSClient> clientLoader() {
+    return new CacheLoader<String, DFSClient>() {
+      @Override
+      public DFSClient load(String userName) throws Exception {
+        UserGroupInformation ugi = UserGroupInformation
+            .createRemoteUser(userName);
+
+        // Guava requires CacheLoader never returns null.
+        return ugi.doAs(new PrivilegedExceptionAction<DFSClient>() {
+          public DFSClient run() throws IOException {
+            return new DFSClient(NameNode.getAddress(config), config);
+          }
+        });
+      }
+    };
-  synchronized public DFSClient get(String uname) {
-    DFSClient client = lruTable.get(uname);
-    if (client != null) {
-      return client;
-    }
-
-    // Not in table, create one.
-    try {
-      UserGroupInformation ugi = UserGroupInformation.createRemoteUser(uname);
-      client = ugi.doAs(new PrivilegedExceptionAction<DFSClient>() {
-        public DFSClient run() throws IOException {
-          return new DFSClient(NameNode.getAddress(config), config);
+  private RemovalListener<String, DFSClient> clientRemovealListener() {
+    return new RemovalListener<String, DFSClient>() {
+      @Override
+      public void onRemoval(RemovalNotification<String, DFSClient> notification) {
+        DFSClient client = notification.getValue();
+        try {
+          client.close();
+        } catch (IOException e) {
+          LOG.warn(String.format(
+              "IOException when closing the DFSClient(%s), cause: %s", client,
+              e));
-      });
-    } catch (IOException e) {
-      LOG.error("Create DFSClient failed for user:" + uname);
-      e.printStackTrace();
+      }
+    };
+  }
-    } catch (InterruptedException e) {
-      e.printStackTrace();
+  DFSClient get(String userName) {
+    DFSClient client = null;
+    try {
+      client = clientCache.get(userName);
+    } catch (ExecutionException e) {
+      LOG.error("Failed to create DFSClient for user:" + userName + " Cause:"
+          + e);
-    // Add new entry
-    lruTable.put(uname, client);
-
-  public int usedSize() {
-    return lruTable.usedSize();
-  }
-
-  public boolean containsKey(String key) {
-    return lruTable.containsKey(key);
-  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS23 INS31 INS31 INS83 INS29 INS78 UPD74 INS83 INS83 INS39 INS59 MOV21 UPD83 UPD74 MOV74 UPD42 INS83 INS74 INS42 INS8 MOV43 UPD42 MOV42 MOV44 INS8 INS65 INS42 UPD43 UPD42 INS42 INS34 UPD42 UPD43 INS41 INS43 INS43 INS43 INS41 UPD42 INS60 INS54 MOV41 INS66 UPD42 INS42 UPD42 INS14 INS42 INS42 INS42 INS14 INS43 INS59 INS8 INS12 INS22 INS32 INS74 INS1 INS74 INS1 INS42 INS42 INS33 INS21 INS44 INS8 INS52 INS42 INS32 INS42 INS32 INS43 MOV43 INS43 INS31 INS43 INS43 INS43 INS31 INS7 INS43 INS42 INS21 INS32 INS42 INS32 INS42 INS42 INS42 INS78 INS83 MOV43 INS42 MOV44 INS43 MOV8 INS42 INS42 INS42 INS78 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS41 INS42 INS74 INS42 INS60 INS54 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 MOV32 INS43 INS43 INS43 MOV43 INS59 INS8 INS12 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS21 MOV44 INS8 UPD42 INS42 INS42 INS32 MOV21 INS42 INS42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS45 MOV42 INS42 DEL83 DEL42 DEL83 DEL83 DEL34 DEL83 DEL42 DEL42 DEL14 DEL42 DEL44 DEL8 DEL31 DEL83 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL83 DEL39 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31