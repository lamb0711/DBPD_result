merge r1535792 through r1541341 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1541342 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.fs.IdNotFoundException;
+import org.apache.hadoop.fs.InvalidRequestException;
-      throw new IOException("No more available IDs");
+      throw new IOException("No more available IDs.");
+  // Helper getter / validation methods
+
+  private static void checkWritePermission(FSPermissionChecker pc,
+      CachePool pool) throws AccessControlException {
+    if ((pc != null)) {
+      pc.checkPermission(pool, FsAction.WRITE);
+    }
+  }
+
+  private static String validatePoolName(PathBasedCacheDirective directive)
+      throws InvalidRequestException {
+    String pool = directive.getPool();
+    if (pool == null) {
+      throw new InvalidRequestException("No pool specified.");
+    }
+    if (pool.isEmpty()) {
+      throw new InvalidRequestException("Invalid empty pool name.");
+    }
+    return pool;
+  }
+
+  private static String validatePath(PathBasedCacheDirective directive)
+      throws InvalidRequestException {
+    if (directive.getPath() == null) {
+      throw new InvalidRequestException("No path specified.");
+    }
+    String path = directive.getPath().toUri().getPath();
+    if (!DFSUtil.isValidName(path)) {
+      throw new InvalidRequestException("Invalid path '" + path + "'.");
+    }
+    return path;
+  }
+
+  private static short validateReplication(PathBasedCacheDirective directive,
+      short defaultValue) throws InvalidRequestException {
+    short repl = (directive.getReplication() != null)
+        ? directive.getReplication() : defaultValue;
+    if (repl <= 0) {
+      throw new InvalidRequestException("Invalid replication factor " + repl
+          + " <= 0");
+    }
+    return repl;
+  }
+
+  /**
+   * Get a PathBasedCacheEntry by ID, validating the ID and that the entry
+   * exists.
+   */
+  private PathBasedCacheEntry getById(long id) throws InvalidRequestException {
+    // Check for invalid IDs.
+    if (id <= 0) {
+      throw new InvalidRequestException("Invalid negative ID.");
+    }
+    // Find the entry.
+    PathBasedCacheEntry entry = entriesById.get(id);
+    if (entry == null) {
+      throw new InvalidRequestException("No directive with ID " + id
+          + " found.");
+    }
+    return entry;
+  }
+
+  /**
+   * Get a CachePool by name, validating that it exists.
+   */
+  private CachePool getCachePool(String poolName)
+      throws InvalidRequestException {
+    CachePool pool = cachePools.get(poolName);
+    if (pool == null) {
+      throw new InvalidRequestException("Unknown pool " + poolName);
+    }
+    return pool;
+  }
+
+  // RPC handlers
+
-      if (directive.getPool() == null) {
-        throw new IdNotFoundException("addDirective: no pool was specified.");
-      }
-      if (directive.getPool().isEmpty()) {
-        throw new IdNotFoundException("addDirective: pool name was empty.");
-      }
-      CachePool pool = cachePools.get(directive.getPool());
-      if (pool == null) {
-        throw new IdNotFoundException("addDirective: no such pool as " +
-            directive.getPool());
-      }
-      if ((pc != null) && (!pc.checkPermission(pool, FsAction.WRITE))) {
-        throw new AccessControlException("addDirective: write " +
-            "permission denied for pool " + directive.getPool());
-      }
-      if (directive.getPath() == null) {
-        throw new IOException("addDirective: no path was specified.");
-      }
-      String path = directive.getPath().toUri().getPath();
-      if (!DFSUtil.isValidName(path)) {
-        throw new IOException("addDirective: path '" + path + "' is invalid.");
-      }
-      short replication = directive.getReplication() == null ? 
-          (short)1 : directive.getReplication();
-      if (replication <= 0) {
-        throw new IOException("addDirective: replication " + replication +
-            " is invalid.");
-      }
+      CachePool pool = getCachePool(validatePoolName(directive));
+      checkWritePermission(pc, pool);
+      String path = validatePath(directive);
+      short replication = validateReplication(directive, (short)1);
-      LOG.warn("addDirective " + directive + ": failed.", e);
+      LOG.warn("addDirective of " + directive + " failed: ", e);
-    LOG.info("addDirective " + directive + ": succeeded.");
+    LOG.info("addDirective of " + directive + " successful.");
-        throw new IdNotFoundException("modifyDirective: " +
-            "no ID to modify was supplied.");
+        throw new InvalidRequestException("Must supply an ID.");
-      if (id <= 0) {
-        throw new IdNotFoundException("modifyDirective " + id +
-            ": invalid non-positive directive ID.");
-      }
-      // Find the entry.
-      PathBasedCacheEntry prevEntry = entriesById.get(id);
-      if (prevEntry == null) {
-        throw new IdNotFoundException("modifyDirective " + id +
-            ": id not found.");
-      }
-      if ((pc != null) &&
-          (!pc.checkPermission(prevEntry.getPool(), FsAction.WRITE))) {
-        throw new AccessControlException("modifyDirective " + id +
-            ": permission denied for initial pool " + prevEntry.getPool());
-      }
+      PathBasedCacheEntry prevEntry = getById(id);
+      checkWritePermission(pc, prevEntry.getPool());
-        path = directive.getPath().toUri().getPath();
-        if (!DFSUtil.isValidName(path)) {
-          throw new IOException("modifyDirective " + id + ": new path " +
-              path + " is not valid.");
-        }
+        path = validatePath(directive);
-      short replication = (directive.getReplication() != null) ?
-          directive.getReplication() : prevEntry.getReplication();
-      if (replication <= 0) {
-        throw new IOException("modifyDirective: replication " + replication +
-            " is invalid.");
+      short replication = prevEntry.getReplication();
+      if (directive.getReplication() != null) {
+        replication = validateReplication(directive, replication);
-        pool = cachePools.get(directive.getPool());
-        if (pool == null) {
-          throw new IdNotFoundException("modifyDirective " + id +
-              ": pool " + directive.getPool() + " not found.");
-        }
-        if (directive.getPool().isEmpty()) {
-          throw new IdNotFoundException("modifyDirective: pool name was " +
-              "empty.");
-        }
-        if ((pc != null) &&
-            (!pc.checkPermission(pool, FsAction.WRITE))) {
-          throw new AccessControlException("modifyDirective " + id +
-              ": permission denied for target pool " + pool);
-        }
+        pool = getCachePool(validatePoolName(directive));
+        checkWritePermission(pc, pool);
-      LOG.warn("modifyDirective " + idString + ": failed.", e);
+      LOG.warn("modifyDirective of " + idString + " failed: ", e);
-    LOG.info("modifyDirective " + idString + ": successfully applied " +
-        directive);
+    LOG.info("modifyDirective of " + idString + " successfully applied " +
+        directive + ".");
-      throws IOException {
+      throws InvalidRequestException {
-      throw new IdNotFoundException("removeInternal: failed to locate entry " +
+      throw new InvalidRequestException("Failed to locate entry " +
-      // Check for invalid IDs.
-      if (id <= 0) {
-        throw new IdNotFoundException("removeDirective " + id + ": invalid " +
-            "non-positive directive ID.");
-      }
-      // Find the entry.
-      PathBasedCacheEntry existing = entriesById.get(id);
-      if (existing == null) {
-        throw new IdNotFoundException("removeDirective " + id +
-            ": id not found.");
-      }
-      if ((pc != null) &&
-          (!pc.checkPermission(existing.getPool(), FsAction.WRITE))) {
-        throw new AccessControlException("removeDirective " + id +
-            ": write permission denied on pool " +
-            existing.getPool().getPoolName());
-      }
+      PathBasedCacheEntry existing = getById(id);
+      checkWritePermission(pc, existing.getPool());
-      LOG.warn("removeDirective " + id + " failed.", e);
+      LOG.warn("removeDirective of " + id + " failed: ", e);
-    LOG.info("removeDirective " + id + ": succeeded.");
+    LOG.info("removeDirective of " + id + " successful.");
-      throw new IOException("we currently don't support filtering by ID");
+      throw new IOException("Filtering by ID is unsupported.");
-      filterPath = filter.getPath().toUri().getPath();
-      if (!DFSUtil.isValidName(filterPath)) {
-        throw new IOException("listPathBasedCacheDirectives: invalid " +
-            "path name '" + filterPath + "'");
-      }
+      filterPath = validatePath(filter);
-      throw new IOException("we currently don't support filtering " +
-          "by replication");
+      throw new IOException("Filtering by replication is unsupported.");
-      if ((pc == null) ||
-          (pc.checkPermission(curEntry.getPool(), FsAction.READ))) {
+      boolean hasPermission = true;
+      if (pc != null) {
+        try {
+          pc.checkPermission(curEntry.getPool(), FsAction.READ);
+        } catch (AccessControlException e) {
+          hasPermission = false;
+        }
+      }
+      if (hasPermission) {
-      throw new IOException("cache pool " + poolName + " already exists.");
+      throw new InvalidRequestException("Cache pool " + poolName
+          + " already exists.");
-    LOG.info("created new cache pool " + pool);
-    return pool.getInfo(true);
+    LOG.info("Created new cache pool " + pool);
+    return pool.getInfo(null);
-      throw new IOException("cache pool " + poolName + " does not exist.");
+      throw new InvalidRequestException("Cache pool " + poolName
+          + " does not exist.");
-      throw new IOException("can't remove non-existent cache pool " + poolName);
+      throw new InvalidRequestException(
+          "Cannot remove non-existent cache pool " + poolName);
-      if (pc == null) {
-        results.add(cur.getValue().getInfo(true));
-      } else {
-        results.add(cur.getValue().getInfo(pc));
-      }
+      results.add(cur.getValue().getInfo(pc));
-      pool.getInfo(true).writeTo(out);
+      pool.getInfo(null).writeTo(out);

UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 UPD83 MOV83 INS39 INS42 INS44 INS44 MOV43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 MOV43 INS42 MOV44 MOV44 MOV43 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 UPD43 MOV25 INS43 INS42 INS43 INS42 MOV25 INS42 INS43 INS42 INS42 INS60 INS25 MOV25 INS41 INS42 INS43 INS42 UPD42 MOV42 MOV25 MOV60 MOV25 INS41 INS43 INS42 INS39 INS42 INS42 MOV60 MOV25 INS41 INS65 INS42 INS39 INS42 UPD42 MOV42 MOV25 MOV60 MOV25 INS41 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS41 MOV6 MOV60 INS54 MOV21 MOV25 MOV41 MOV6 MOV60 INS54 MOV21 UPD42 INS25 INS42 INS42 MOV36 INS42 INS43 INS59 MOV27 MOV8 INS42 INS42 INS42 INS42 INS42 INS66 INS66 INS43 INS42 INS66 INS42 INS43 INS59 MOV27 MOV8 INS42 INS8 INS12 INS32 INS8 MOV12 MOV27 INS8 MOV27 MOV8 INS21 INS42 INS42 MOV32 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS60 INS21 INS60 INS60 MOV60 MOV25 MOV21 MOV21 MOV44 INS8 UPD42 MOV42 UPD42 MOV42 INS27 MOV60 MOV25 INS60 INS21 MOV60 INS25 INS60 INS25 MOV60 MOV25 MOV21 MOV60 MOV21 INS21 INS53 INS60 INS25 INS33 MOV25 MOV32 INS42 INS42 INS42 INS42 MOV43 INS59 INS32 INS43 INS59 INS39 INS59 INS21 MOV53 INS45 INS42 INS45 MOV27 MOV43 INS59 MOV32 MOV27 INS8 INS39 INS59 UPD27 MOV27 MOV8 MOV27 INS8 UPD45 UPD45 INS45 MOV32 UPD45 UPD45 INS14 INS39 INS59 INS27 INS8 INS42 UPD45 UPD45 UPD43 UPD45 UPD43 UPD45 UPD43 UPD45 UPD43 UPD43 UPD43 INS45 UPD43 UPD43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS21 INS42 MOV32 INS21 INS21 INS21 UPD43 INS42 MOV43 INS45 INS32 UPD45 INS42 INS9 INS42 INS33 INS54 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD45 UPD45 UPD42 UPD45 UPD42 UPD45 UPD42 UPD42 UPD45 UPD45 UPD42 UPD45 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS7 INS7 INS7 INS32 UPD42 UPD45 UPD42 UPD42 MOV42 UPD42 MOV42 INS8 INS12 UPD42 UPD45 UPD42 UPD45 UPD42 UPD45 INS33 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 UPD43 INS45 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD45 UPD45 UPD45 UPD45 INS21 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 MOV32 MOV43 INS42 INS21 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS9 DEL38 DEL36 DEL27 DEL45 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL40 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL42 DEL33 DEL27 DEL36 DEL40 DEL32 DEL38 DEL36 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL43 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL8 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL36 DEL38 DEL36 DEL27 DEL25 DEL42 DEL42 DEL32 DEL32 DEL32 DEL7 DEL21 DEL32 DEL38 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL43 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL32 DEL25 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL40 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL36 DEL38 DEL36 DEL27 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL38 DEL45 DEL45 DEL27 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL36 DEL36 DEL27 DEL9 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL9