YARN-642. Removed health parameter from ResourceManager /nodes web-service and cleaned the behaviour of the status parameter. Contributed by Sandy Ryza.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490890 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collection;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-  private static final Log LOG = LogFactory.getLog(RMWebServices.class);
+  /**
+   * If no params are given, returns all active nodes, which includes
+   * nodes in the NEW and RUNNING states. If state param is "all", returns all
+   * nodes in all states. Otherwise, if the state param is set to a state name,
+   * returns all nodes that are in that state.
+   */
-  public NodesInfo getNodes(@QueryParam("state") String filterState,
-      @QueryParam("healthy") String healthState) {
+  public NodesInfo getNodes(@QueryParam("state") String state) {
-    Collection<RMNode> rmNodes = this.rm.getRMContext().getRMNodes().values();
-    boolean isInactive = false;
-    if (filterState != null && !filterState.isEmpty()) {
-      NodeState nodeState = NodeState.valueOf(filterState.toUpperCase());
-      switch (nodeState) {
-      case DECOMMISSIONED:
-      case LOST:
-      case REBOOTED:
-        rmNodes = this.rm.getRMContext().getInactiveRMNodes().values();
-        isInactive = true;
-        break;
-      }
-    }
-    NodesInfo allNodes = new NodesInfo();
-    for (RMNode ni : rmNodes) {
-      NodeInfo nodeInfo = new NodeInfo(ni, sched);
-      if (filterState != null) {
-        if (!(nodeInfo.getState().equalsIgnoreCase(filterState))) {
-          continue;
-        }
+    
+    NodeState acceptedState = null;
+    boolean all = false;
+    
+    if (state != null && !state.isEmpty()) {
+      if (state.equalsIgnoreCase("all")) {
+        all = true;
-        // No filter. User is asking for all nodes. Make sure you skip the
-        // unhealthy nodes.
-        if (ni.getState() == NodeState.UNHEALTHY) {
-          continue;
-        }
+        acceptedState = NodeState.valueOf(state.toUpperCase());
-      if ((healthState != null) && (!healthState.isEmpty())) {
-        LOG.info("heatlh state is : " + healthState);
-        if (!healthState.equalsIgnoreCase("true")
-            && !healthState.equalsIgnoreCase("false")) {
-          String msg = "Error: You must specify either true or false to query on health";
-          throw new BadRequestException(msg);
-        }
-        if ((ni.getState() != NodeState.UNHEALTHY)
-            != Boolean.parseBoolean(healthState)) {
-          continue;
-        }
-      }
-      if (isInactive) {
-        nodeInfo.setNodeHTTPAddress(EMPTY);
-      }
-      allNodes.add(nodeInfo);
+    
+    // getRMNodes() contains nodes that are NEW, RUNNING OR UNHEALTHY
+    NodesInfo allNodes = new NodesInfo();
+    for (RMNode ni : this.rm.getRMContext().getRMNodes().values()) {
+      if (all || (acceptedState == null && ni.getState() != NodeState.UNHEALTHY)
+          || acceptedState == ni.getState()) {
+        NodeInfo nodeInfo = new NodeInfo(ni, sched);
+        allNodes.add(nodeInfo);
+      }
+    }
+    
+    // getInactiveNodes() contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED
+    if (all || (acceptedState != null &&
+        (acceptedState == NodeState.DECOMMISSIONED ||
+         acceptedState == NodeState.LOST ||
+         acceptedState == NodeState.REBOOTED))) {
+      for (RMNode ni : this.rm.getRMContext().getInactiveRMNodes().values()) {
+        if (all || acceptedState == ni.getState()) {
+          NodeInfo nodeInfo = new NodeInfo(ni, sched);
+          nodeInfo.setNodeHTTPAddress(EMPTY);
+          allNodes.add(nodeInfo);
+        }
+      }
+    }
+    

INS29 INS65 UPD42 INS70 MOV25 INS66 INS66 INS66 INS66 MOV43 INS44 MOV32 INS8 INS27 INS8 UPD42 INS33 UPD42 INS25 INS43 INS42 MOV25 INS42 INS36 INS70 UPD42 INS32 INS8 INS8 INS42 UPD27 MOV27 INS8 INS27 MOV44 MOV32 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 INS21 INS21 INS42 INS27 INS60 INS21 INS27 MOV36 MOV25 MOV7 MOV7 INS27 INS42 INS32 INS43 INS59 INS32 UPD42 MOV42 MOV33 INS27 UPD27 UPD42 INS9 INS42 INS32 INS27 MOV27 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS14 INS42 INS42 INS42 INS27 INS27 INS42 MOV27 MOV60 MOV21 MOV21 INS42 INS42 INS32 INS42 INS33 INS43 INS42 INS42 INS27 INS27 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL49 DEL42 DEL49 DEL42 DEL49 DEL21 DEL21 DEL10 DEL50 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL36 DEL38 DEL18 DEL8 DEL42 DEL42 DEL32 DEL38 DEL40 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL27 DEL36 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL18 DEL8 DEL25 DEL8 DEL42 DEL42 DEL33 DEL27 DEL8 DEL18 DEL8 DEL25 DEL8 DEL25 DEL42 DEL8 DEL25 DEL8 DEL70