HDFS-9837. BlockManager#countNodes should be able to detect duplicated internal blocks. Contributed by Jing Zhao.

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped.StorageAndBlockIndex;
+import org.apache.hadoop.hdfs.server.blockmanagement.NumberReplicas.StoredReplicaState;
-    int live = 0;
-    int readonly = 0;
-    int decommissioned = 0;
-    int decommissioning = 0;
-    int corrupt = 0;
-    int excess = 0;
-    Collection<DatanodeDescriptor> nodesCorrupt = corruptReplicas.getNodes(block);
+    BitSet bitSet = isStriped ?
+        new BitSet(((BlockInfoStriped) block).getTotalBlockNum()) : null;
-      LightWeightHashSet<BlockInfo> excessBlocks =
-        excessReplicateMap.get(node.getDatanodeUuid());
-      int countableReplica = storage.getState() == State.NORMAL ? 1 : 0;
-      if ((nodesCorrupt != null) && (nodesCorrupt.contains(node)))
-        corrupt += countableReplica;
-      else if (node.isDecommissionInProgress()) {
-        decommissioning += countableReplica;
-      } else if (node.isDecommissioned()) {
-        decommissioned += countableReplica;
-      } else if (excessBlocks != null && excessBlocks.contains(block)) {
-        excess += countableReplica;
-      } else {
+      final StoredReplicaState state = checkReplicaOnStorage(numReplicas, block,
+          storage, corruptReplicas.getNodes(block), false);
+      if (state == StoredReplicaState.LIVE) {
-        live += countableReplica;
-      }
-      if (storage.getState() == State.READ_ONLY_SHARED) {
-        readonly++;
-      // Check if this replica is corrupt
-      // If so, do not select the node as src node
-      if ((nodesCorrupt != null) && nodesCorrupt.contains(node))
+
+      // do not select corrupted replica as src. also do not select the block
+      // that is already in excess map
+      if (state == StoredReplicaState.CORRUPT ||
+          state == StoredReplicaState.EXCESS) {
+      }
+
-          && node.getNumberOfBlocksToBeReplicated() >= maxReplicationStreams)
-      {
+          && node.getNumberOfBlocksToBeReplicated() >= maxReplicationStreams) {
-      if (node.getNumberOfBlocksToBeReplicated() >= replicationStreamsHardLimit)
-      {
+      if (node.getNumberOfBlocksToBeReplicated() >= replicationStreamsHardLimit) {
-      // the block must not be scheduled for removal on srcNode
-      if(excessBlocks != null && excessBlocks.contains(block))
-        continue;
-      if(node.isDecommissioned())
+      if (node.isDecommissioned()) {
+      }
-          liveBlockIndices.add(((BlockInfoStriped) block).
-              getStorageBlockIndex(storage));
+          byte blockIndex = ((BlockInfoStriped) block).
+              getStorageBlockIndex(storage);
+          liveBlockIndices.add(blockIndex);
+          if (!bitSet.get(blockIndex)) {
+            bitSet.set(blockIndex);
+          } else if (state == StoredReplicaState.LIVE) {
+            numReplicas.subtract(StoredReplicaState.LIVE, 1);
+            numReplicas.add(StoredReplicaState.REDUNDANT, 1);
+          }
-      if (!isStriped && ThreadLocalRandom.current().nextBoolean()) {
+      if (ThreadLocalRandom.current().nextBoolean()) {
-    if(numReplicas != null)
-      numReplicas.set(live, readonly, decommissioned, decommissioning, corrupt,
-          excess, 0);
-    int numCurrentReplica = numLiveReplicas
-      + pendingReplications.getNumReplicas(storedBlock);
+    int pendingNum = pendingReplications.getNumReplicas(storedBlock);
+    int numCurrentReplica = numLiveReplicas + pendingNum;
-    if (numCurrentReplica > fileReplication) {
+    if (shouldProcessOverReplicated(num, pendingNum, fileReplication)) {
+  private boolean shouldProcessOverReplicated(NumberReplicas num,
+      int pendingNum, int expectedNum) {
+    int numCurrent = num.liveReplicas() + pendingNum;
+    return numCurrent > expectedNum ||
+        (numCurrent == expectedNum && num.redundantInternalBlocks() > 0);
+  }
+
-    int numCurrentReplica = num.liveReplicas();
+    final int numCurrentReplica = num.liveReplicas();
-    if (numCurrentReplica > expectedReplication) {
+    if (shouldProcessOverReplicated(num, 0, expectedReplication)) {
-   * striped block group.
+   * striped block group. But note we exclude duplicated internal block replicas
+   * for calculating {@link NumberReplicas#liveReplicas}.
-  public NumberReplicas countNodes(Block b) {
-    int decommissioned = 0;
-    int decommissioning = 0;
-    int live = 0;
-    int readonly = 0;
-    int corrupt = 0;
-    int excess = 0;
-    int stale = 0;
+  public NumberReplicas countNodes(BlockInfo b) {
+    return countNodes(b, false);
+  }
+
+  private NumberReplicas countNodes(BlockInfo b, boolean inStartupSafeMode) {
+    NumberReplicas numberReplicas = new NumberReplicas();
-    for(DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
-      if (storage.getState() == State.FAILED) {
-        continue;
-      } else if (storage.getState() == State.READ_ONLY_SHARED) {
-        readonly++;
-        continue;
-      }
-      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-      if ((nodesCorrupt != null) && (nodesCorrupt.contains(node))) {
-        corrupt++;
-      } else if (node.isDecommissionInProgress()) {
-        decommissioning++;
-      } else if (node.isDecommissioned()) {
-        decommissioned++;
-      } else {
-        LightWeightHashSet<BlockInfo> blocksExcess = excessReplicateMap.get(
-            node.getDatanodeUuid());
-        if (blocksExcess != null && blocksExcess.contains(b)) {
-          excess++;
-        } else {
-          live++;
-        }
-      }
-      if (storage.areBlockContentsStale()) {
-        stale++;
+    if (b.isStriped()) {
+      countReplicasForStripedBlock(numberReplicas, (BlockInfoStriped) b,
+          nodesCorrupt, inStartupSafeMode);
+    } else {
+      for (DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
+        checkReplicaOnStorage(numberReplicas, b, storage, nodesCorrupt,
+            inStartupSafeMode);
-    return new NumberReplicas(live, readonly, decommissioned, decommissioning,
-        corrupt, excess, stale);
+    return numberReplicas;
+  }
+
+  private StoredReplicaState checkReplicaOnStorage(NumberReplicas counters,
+      BlockInfo b, DatanodeStorageInfo storage,
+      Collection<DatanodeDescriptor> nodesCorrupt, boolean inStartupSafeMode) {
+    final StoredReplicaState s;
+    if (storage.getState() == State.NORMAL) {
+      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
+      if (nodesCorrupt != null && nodesCorrupt.contains(node)) {
+        s = StoredReplicaState.CORRUPT;
+      } else if (inStartupSafeMode) {
+        s = StoredReplicaState.LIVE;
+        counters.add(s, 1);
+        return s;
+      } else if (node.isDecommissionInProgress()) {
+        s = StoredReplicaState.DECOMMISSIONING;
+      } else if (node.isDecommissioned()) {
+        s = StoredReplicaState.DECOMMISSIONED;
+      } else if (isExcess(node, b)) {
+        s = StoredReplicaState.EXCESS;
+      } else {
+        s = StoredReplicaState.LIVE;
+      }
+      counters.add(s, 1);
+      if (storage.areBlockContentsStale()) {
+        counters.add(StoredReplicaState.STALESTORAGE, 1);
+      }
+    } else if (!inStartupSafeMode &&
+        storage.getState() == State.READ_ONLY_SHARED) {
+      s = StoredReplicaState.READONLY;
+      counters.add(s, 1);
+    } else {
+      s = null;
+    }
+    return s;
+  }
+
+  /**
+   * For a striped block, it is possible it contains full number of internal
+   * blocks (i.e., 9 by default), but with duplicated replicas of the same
+   * internal block. E.g., for the following list of internal blocks
+   * b0, b0, b1, b2, b3, b4, b5, b6, b7
+   * we have 9 internal blocks but we actually miss b8.
+   * We should use this method to detect the above scenario and schedule
+   * necessary reconstruction.
+   */
+  private void countReplicasForStripedBlock(NumberReplicas counters,
+      BlockInfoStriped block, Collection<DatanodeDescriptor> nodesCorrupt,
+      boolean inStartupSafeMode) {
+    BitSet bitSet = new BitSet(block.getTotalBlockNum());
+    for (StorageAndBlockIndex si : block.getStorageAndIndexInfos()) {
+      StoredReplicaState state = checkReplicaOnStorage(counters, block,
+          si.storage, nodesCorrupt, inStartupSafeMode);
+      if (state == StoredReplicaState.LIVE) {
+        if (!bitSet.get(si.blockIndex)) {
+          bitSet.set(si.blockIndex);
+        } else {
+          counters.subtract(StoredReplicaState.LIVE, 1);
+          counters.add(StoredReplicaState.REDUNDANT, 1);
+        }
+      }
+    }
+  }
+
+  private boolean isExcess(DatanodeDescriptor node, BlockInfo block) {
+    LightWeightHashSet<BlockInfo> blocksExcess = excessReplicateMap.get(
+        node.getDatanodeUuid());
+    return blocksExcess != null && blocksExcess.contains(block);
-    if (!namesystem.isInStartupSafeMode()) {
-      return countNodes(b).liveReplicas();
-    }
-    // else proceed with fast case
-    int live = 0;
-    Collection<DatanodeDescriptor> nodesCorrupt = corruptReplicas.getNodes(b);
-    for (DatanodeStorageInfo storage : blocksMap.getStorages(b)) {
-      if (storage.getState() != State.NORMAL) {
-        continue;
-      }
-      final DatanodeDescriptor node = storage.getDatanodeDescriptor();
-      if ((nodesCorrupt == null) || (!nodesCorrupt.contains(node)))
-        live++;
-    }
-    return live;
+    final boolean inStartupSafeMode = namesystem.isInStartupSafeMode();
+    return countNodes(b, inStartupSafeMode).liveReplicas();
-      int numCurrentReplica = num.liveReplicas();
-      if (numCurrentReplica > expectedReplication) {
-        // over-replicated block 
+      if (shouldProcessOverReplicated(num, 0, expectedReplication)) {
+        // over-replicated block
-      } else if (n.liveReplicas() > expected) {
+      } else if (shouldProcessOverReplicated(n, 0, expected)) {

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS8 MOV29 MOV83 MOV43 MOV42 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 MOV44 INS44 INS44 INS8 INS29 INS83 UPD39 MOV39 UPD42 MOV42 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 MOV8 MOV29 INS39 INS42 MOV44 INS8 INS60 INS60 INS43 INS42 INS39 INS42 INS39 INS42 INS60 INS41 UPD43 INS41 INS42 INS43 INS42 INS39 INS42 MOV60 MOV60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 MOV74 INS42 INS39 INS42 INS60 INS25 INS41 INS65 MOV43 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS60 MOV70 INS43 INS42 INS43 INS42 INS41 INS60 MOV41 INS43 INS59 INS39 INS59 INS32 INS42 INS39 INS59 INS27 INS83 INS32 UPD66 INS66 INS65 INS66 UPD42 INS32 INS42 INS43 INS32 INS8 INS8 INS42 INS42 INS42 INS83 INS43 INS59 MOV27 INS8 INS25 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS43 INS43 MOV59 INS44 INS32 INS8 INS42 INS42 INS27 INS83 INS39 INS59 INS32 INS42 UPD42 MOV42 INS16 INS60 INS25 INS25 INS25 INS25 UPD42 MOV32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS36 INS42 INS42 INS34 INS42 INS67 INS42 INS42 INS9 INS42 UPD42 INS14 INS42 INS42 INS21 INS70 INS42 INS42 MOV60 INS25 INS21 MOV25 INS27 INS8 INS8 INS42 INS42 INS42 UPD42 INS14 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV60 MOV25 MOV27 MOV32 INS42 MOV32 INS32 INS42 INS42 INS14 INS33 INS83 INS43 MOV59 INS27 MOV8 INS27 MOV8 MOV32 MOV8 MOV27 INS8 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS32 MOV44 MOV32 INS8 MOV27 MOV8 INS25 INS32 INS38 MOV27 INS21 INS21 INS21 INS43 INS32 INS42 UPD43 INS27 INS8 UPD42 INS42 INS42 INS42 INS32 INS43 INS32 UPD42 MOV42 INS42 INS32 INS42 INS40 INS27 INS27 MOV21 INS25 MOV18 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS11 INS42 INS42 INS21 MOV27 INS42 INS8 INS25 INS42 INS42 INS42 INS34 INS42 INS7 INS32 INS7 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 INS40 INS25 INS42 INS42 INS34 INS42 INS32 INS42 INS36 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV32 INS9 INS42 INS40 INS42 INS40 INS42 INS8 INS42 INS42 INS32 INS34 INS43 INS42 INS32 MOV42 MOV33 INS7 INS21 INS21 INS41 MOV32 MOV8 MOV25 INS32 INS42 INS40 INS42 INS42 INS42 INS34 INS42 INS33 UPD42 INS42 INS42 INS40 UPD42 INS42 INS38 INS8 INS8 INS42 MOV42 INS34 UPD42 MOV42 INS11 MOV60 INS21 INS25 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS40 INS7 INS32 INS42 MOV32 INS42 INS42 INS40 INS34 MOV32 INS21 INS21 INS21 INS43 INS42 UPD39 INS32 INS38 MOV8 INS25 INS42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS34 INS7 INS32 INS8 UPD42 UPD42 INS40 INS32 INS32 INS32 INS42 UPD42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 MOV27 INS8 INS42 INS40 INS7 INS42 INS42 INS42 INS21 INS42 INS42 INS40 INS42 INS42 INS40 INS34 INS42 INS42 INS40 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD40 INS21 MOV21 INS42 INS40 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS34 UPD42 INS40 INS34 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL60 DEL42 DEL42 DEL42 DEL7 DEL21 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL36 DEL32 DEL36 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL32 DEL27 DEL25 DEL25 DEL25 DEL25 DEL42 DEL37 DEL21 DEL8 DEL25 DEL18 DEL25 DEL34 DEL34 DEL16 DEL42 DEL42 DEL7 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL18 DEL25 DEL32 DEL18 DEL25 DEL42 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL25 DEL42 DEL27 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL39 DEL34 DEL27 DEL36 DEL42 DEL37 DEL18 DEL42 DEL37 DEL42 DEL37 DEL42 DEL37 DEL42 DEL37 DEL34 DEL83 DEL42 DEL33 DEL27 DEL36 DEL38 DEL36 DEL27 DEL42 DEL37 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL40 DEL27 DEL25 DEL8 DEL27 DEL42 DEL37 DEL21 DEL8 DEL42 DEL37 DEL21 DEL8 DEL25 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL25 DEL25 DEL36 DEL32 DEL36 DEL27 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL38 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL39 DEL60 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL32 DEL42 DEL27