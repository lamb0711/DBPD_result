YARN-9116. Capacity Scheduler: implements queue level maximum-allocation inheritance. Contributed by Aihua Xu.

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
+import static org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacitySchedulerConfiguration.UNDEFINED;
+
-      this.maximumAllocation =
-          configuration.getMaximumAllocationPerQueue(
-              getQueuePath());
+      // Setup queue's maximumAllocation respecting the global setting
+      // and queue setting
+      setupMaximumAllocation(configuration);
+  private void setupMaximumAllocation(CapacitySchedulerConfiguration csConf) {
+    String queue = getQueuePath();
+    Resource clusterMax = ResourceUtils
+            .fetchMaximumAllocationFromConfig(csConf);
+    Resource queueMax = csConf.getQueueMaximumAllocation(queue);
+
+    maximumAllocation = Resources.clone(
+            parent == null ? clusterMax : parent.getMaximumAllocation());
+
+    String errMsg =
+            "Queue maximum allocation cannot be larger than the cluster setting"
+            + " for queue " + queue
+            + " max allocation per queue: %s"
+            + " cluster setting: " + clusterMax;
+
+    if (queueMax == Resources.none()) {
+      // Handle backward compatibility
+      long queueMemory = csConf.getQueueMaximumAllocationMb(queue);
+      int queueVcores = csConf.getQueueMaximumAllocationVcores(queue);
+      if (queueMemory != UNDEFINED) {
+        maximumAllocation.setMemorySize(queueMemory);
+      }
+
+      if (queueVcores != UNDEFINED) {
+        maximumAllocation.setVirtualCores(queueVcores);
+      }
+
+      if ((queueMemory != UNDEFINED && queueMemory > clusterMax.getMemorySize()
+          || (queueVcores != UNDEFINED
+              && queueVcores > clusterMax.getVirtualCores()))) {
+        throw new IllegalArgumentException(
+                String.format(errMsg, maximumAllocation));
+      }
+    } else {
+      // Queue level maximum-allocation can't be larger than cluster setting
+      for (ResourceInformation ri : queueMax.getResources()) {
+        if (ri.compareTo(clusterMax.getResourceInformation(ri.getName())) > 0) {
+          throw new IllegalArgumentException(String.format(errMsg, queueMax));
+        }
+
+        maximumAllocation.setResourceInformation(ri.getName(), ri);
+      }
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS60 INS60 INS60 INS21 INS60 INS25 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS43 INS59 INS27 INS8 INS8 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS60 INS60 INS25 INS25 INS25 INS70 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS27 INS42 INS45 INS45 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS36 INS8 INS44 INS32 INS8 INS42 MOV42 INS27 INS42 INS32 INS45 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS21 INS27 INS53 INS43 INS42 INS42 INS42 INS25 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS36 INS14 INS42 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS43 INS32 INS32 INS34 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7