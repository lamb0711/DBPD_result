Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.FSConstants;
-import org.apache.hadoop.hdfs.server.common.HdfsConstants.NamenodeRole;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole;
-public class BackupNode extends NameNode implements JournalProtocol {
+public class BackupNode extends NameNode {
-  protected void setRpcServerAddress(Configuration conf) {
-    conf.set(BN_ADDRESS_NAME_KEY, getHostPortString(rpcAddress));
+  protected void setRpcServerAddress(Configuration conf,
+      InetSocketAddress addr) {
+    conf.set(BN_ADDRESS_NAME_KEY, getHostPortString(addr));
-  protected void setRpcServiceServerAddress(Configuration conf) {
-    conf.set(BN_SERVICE_RPC_ADDRESS_KEY, getHostPortString(serviceRPCAddress));
+  protected void setRpcServiceServerAddress(Configuration conf,
+      InetSocketAddress addr) {
+    conf.set(BN_SERVICE_RPC_ADDRESS_KEY,  getHostPortString(addr));
-    assert rpcAddress != null : "rpcAddress should be calculated first";
+    assert getNameNodeAddress() != null : "rpcAddress should be calculated first";
+    bnImage.setNamesystem(namesystem);
-        FSConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);
+        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);
+  @Override
+  protected NameNodeRpcServer createRpcServer(Configuration conf)
+      throws IOException {
+    return new BackupNodeRpcServer(conf, this);
+  }
+
-  
-  @Override
-  public long getProtocolVersion(String protocol, long clientVersion)
-      throws IOException {
-    if (protocol.equals(JournalProtocol.class.getName())) {
-      return JournalProtocol.versionID;
-    } else {
-      return super.getProtocolVersion(protocol, clientVersion);
+  static class BackupNodeRpcServer extends NameNodeRpcServer implements JournalProtocol {
+    private final String nnRpcAddress;
+    
+    private BackupNodeRpcServer(Configuration conf, BackupNode nn)
+        throws IOException {
+      super(conf, nn);
+      this.server.addProtocol(JournalProtocol.class, this);
+      nnRpcAddress = nn.nnRpcAddress;
+    }
+
+    @Override
+    public long getProtocolVersion(String protocol, long clientVersion)
+        throws IOException {
+      if (protocol.equals(JournalProtocol.class.getName())) {
+        return JournalProtocol.versionID;
+      } else {
+        return super.getProtocolVersion(protocol, clientVersion);
+      }
+    }
+
+    /////////////////////////////////////////////////////
+    // BackupNodeProtocol implementation for backup node.
+    /////////////////////////////////////////////////////
+    @Override
+    public void startLogSegment(NamenodeRegistration registration, long txid)
+        throws IOException {
+      nn.checkOperation(OperationCategory.JOURNAL);
+      verifyRequest(registration);
+        verifyRequest(registration);
+      
+        getBNImage().namenodeStartedLogSegment(txid);
+    }
+    
+    @Override
+    public void journal(NamenodeRegistration nnReg,
+        long firstTxId, int numTxns,
+        byte[] records) throws IOException {
+      nn.checkOperation(OperationCategory.JOURNAL);
+      verifyRequest(nnReg);
+      if(!nnRpcAddress.equals(nnReg.getAddress()))
+        throw new IOException("Journal request from unexpected name-node: "
+            + nnReg.getAddress() + " expecting " + nnRpcAddress);
+      getBNImage().journal(firstTxId, numTxns, records);
+    }
+
+    private BackupImage getBNImage() {
+      return (BackupImage)nn.getFSImage();
-
-  /////////////////////////////////////////////////////
-  // BackupNodeProtocol implementation for backup node.
-  /////////////////////////////////////////////////////
-
-  @Override
-  public void journal(NamenodeRegistration nnReg,
-      long firstTxId, int numTxns,
-      byte[] records) throws IOException {
-    checkOperation(OperationCategory.JOURNAL);
-    verifyRequest(nnReg);
-    if(!nnRpcAddress.equals(nnReg.getAddress()))
-      throw new IOException("Journal request from unexpected name-node: "
-          + nnReg.getAddress() + " expecting " + nnRpcAddress);
-    getBNImage().journal(firstTxId, numTxns, records);
-  }
-
-  @Override
-  public void startLogSegment(NamenodeRegistration registration, long txid)
-      throws IOException {
-    checkOperation(OperationCategory.JOURNAL);
-    verifyRequest(registration);
-    getBNImage().namenodeStartedLogSegment(txid);
-  }
-
-  
-  BackupImage getBNImage() {
-    return (BackupImage)getFSImage();
-  }
-    assert FSConstants.LAYOUT_VERSION == nsInfo.getLayoutVersion() :
+    assert HdfsConstants.LAYOUT_VERSION == nsInfo.getLayoutVersion() :
-      + FSConstants.LAYOUT_VERSION + " actual "+ nsInfo.getLayoutVersion();
+      + HdfsConstants.LAYOUT_VERSION + " actual "+ nsInfo.getLayoutVersion();

UPD40 UPD40 INS31 INS55 INS44 INS44 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS42 INS43 MOV43 INS23 INS31 MOV31 MOV31 MOV31 MOV31 INS43 INS42 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS43 INS8 INS83 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS46 INS21 INS21 INS21 INS32 INS42 INS42 INS42 UPD40 INS43 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS7 INS32 UPD40 UPD40 UPD42 UPD42 INS42 INS42 INS22 INS42 INS57 INS52 INS42 INS40 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS42 DEL42