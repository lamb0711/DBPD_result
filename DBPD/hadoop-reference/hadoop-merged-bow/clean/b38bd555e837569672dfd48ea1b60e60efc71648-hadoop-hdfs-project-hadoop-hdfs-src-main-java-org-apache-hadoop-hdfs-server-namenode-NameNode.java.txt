HDFS-3765. namenode -initializeSharedEdits should be able to initialize all shared storages. Contributed by Vinay and Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373061 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Iterator;
-import org.apache.hadoop.fs.FileUtil;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
-import org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory;
-import org.apache.hadoop.hdfs.server.namenode.FileJournalManager.EditLogFile;
-import org.apache.hadoop.hdfs.server.namenode.JournalSet.JournalAndStream;
-import org.apache.hadoop.hdfs.util.AtomicFileOutputStream;
-import org.apache.hadoop.io.IOUtils;
+import com.google.common.base.Preconditions;
+    
+    if (conf.get(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY) == null) {
+      LOG.fatal("No shared edits directory configured for namespace " +
+          nsId + " namenode " + namenodeId);
+      return false;
+    }
+
-      FSNamesystem fsns = FSNamesystem.loadFromDisk(conf,
+      Configuration confWithoutShared = new Configuration(conf);
+      confWithoutShared.unset(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY);
+      FSNamesystem fsns = FSNamesystem.loadFromDisk(confWithoutShared,
-      
-      if (copyEditLogSegmentsToSharedDir(fsns, sharedEditsDirs,
-          newSharedStorage, conf)) {
-        return true; // aborted
-      }
+
+      copyEditLogSegmentsToSharedDir(fsns, sharedEditsDirs, newSharedStorage,
+          conf);
-  
-  private static boolean copyEditLogSegmentsToSharedDir(FSNamesystem fsns,
+
+  private static void copyEditLogSegmentsToSharedDir(FSNamesystem fsns,
-      Configuration conf) throws FileNotFoundException, IOException {
+      Configuration conf) throws IOException {
+    Preconditions.checkArgument(!sharedEditsDirs.isEmpty(),
+        "No shared edits specified");
-    for (JournalAndStream jas : fsns.getFSImage().getEditLog().getJournals()) {
-      FileJournalManager fjm = null;
-      if (!(jas.getManager() instanceof FileJournalManager)) {
-        LOG.error("Cannot populate shared edits dir from non-file " +
-            "journal manager: " + jas.getManager());
-        return true; // aborted
-      } else {
-        fjm = (FileJournalManager) jas.getManager();
-      }
-      for (EditLogFile elf : fjm.getLogFiles(fsns.getFSImage()
-          .getMostRecentCheckpointTxId())) {
-        File editLogSegment = elf.getFile();
-        for (URI sharedEditsUri : sharedEditsDirs) {
-          StorageDirectory sharedEditsDir = newSharedStorage
-              .getStorageDirectory(sharedEditsUri);
-          File targetFile = new File(sharedEditsDir.getCurrentDir(),
-              editLogSegment.getName());
-          if (!targetFile.exists()) {
-            InputStream in = null;
-            OutputStream out = null;
-            try {
-              in = new FileInputStream(editLogSegment);
-              out = new AtomicFileOutputStream(targetFile);
-              IOUtils.copyBytes(in, out, conf);
-            } finally {
-              IOUtils.cleanup(LOG, in, out);
-            }
-          }
+    List<URI> sharedEditsUris = new ArrayList<URI>(sharedEditsDirs);
+    FSEditLog newSharedEditLog = new FSEditLog(conf, newSharedStorage,
+        sharedEditsUris);
+    newSharedEditLog.initJournalsForWrite();
+    newSharedEditLog.recoverUnclosedStreams();
+    
+    FSEditLog sourceEditLog = fsns.getFSImage().editLog;
+    
+    long fromTxId = fsns.getFSImage().getMostRecentCheckpointTxId();
+    Collection<EditLogInputStream> streams = sourceEditLog.selectInputStreams(
+        fromTxId+1, 0);
+
+    // Set the nextTxid to the CheckpointTxId+1
+    newSharedEditLog.setNextTxId(fromTxId + 1);
+    
+    // Copy all edits after last CheckpointTxId to shared edits dir
+    for (EditLogInputStream stream : streams) {
+      LOG.debug("Beginning to copy stream " + stream + " to shared edits");
+      FSEditLogOp op;
+      boolean segmentOpen = false;
+      while ((op = stream.readOp()) != null) {
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("copying op: " + op);
+        }
+        if (!segmentOpen) {
+          newSharedEditLog.startLogSegment(op.txid, false);
+          segmentOpen = true;
+        }
+        
+        newSharedEditLog.logEdit(op);
+
+        if (op.opCode == FSEditLogOpCodes.OP_END_LOG_SEGMENT) {
+          newSharedEditLog.logSync();
+          newSharedEditLog.endCurrentLogSegment(false);
+          LOG.debug("ending log segment because of END_LOG_SEGMENT op in " + stream);
+          segmentOpen = false;
+      
+      if (segmentOpen) {
+        LOG.debug("ending log segment because of end of stream in " + stream);
+        newSharedEditLog.logSync();
+        newSharedEditLog.endCurrentLogSegment(false);
+        segmentOpen = false;
+      }
-    return false; // did not abort

MOV26 MOV26 UPD40 UPD40 UPD39 INS25 INS21 MOV60 INS60 INS21 MOV21 INS60 INS60 MOV60 INS21 INS70 INS27 INS8 INS32 INS74 INS43 INS59 INS32 INS32 INS43 INS59 INS39 INS59 INS74 INS32 INS44 INS42 INS8 INS32 INS33 INS21 MOV41 INS60 INS21 INS21 INS42 INS42 INS38 INS45 INS43 INS43 UPD42 INS14 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS42 MOV32 INS43 INS43 UPD42 INS42 INS42 INS27 INS43 INS42 INS21 INS60 INS60 INS61 INS25 INS42 INS42 INS40 INS32 INS43 INS59 INS32 MOV32 INS32 UPD42 MOV42 INS42 INS74 INS42 INS43 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS27 INS34 INS42 INS34 UPD42 MOV42 INS32 UPD43 MOV43 INS59 INS39 INS59 INS27 INS8 INS42 INS8 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS43 MOV43 UPD42 MOV42 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 UPD42 MOV42 INS42 INS9 INS36 INS33 INS25 INS25 MOV21 INS25 INS21 INS21 INS21 INS21 INS45 INS42 INS45 INS42 INS43 INS42 UPD42 INS42 INS45 INS42 INS45 INS7 INS32 INS8 INS38 INS8 INS32 INS27 INS8 INS32 INS32 INS32 INS7 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 INS42 INS21 MOV21 INS42 INS42 INS42 INS40 INS40 INS21 INS21 INS21 INS21 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS42 UPD42 MOV42 INS9 INS42 INS9 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS32 INS7 INS45 INS42 INS42 UPD42 MOV42 INS27 INS42 INS42 INS40 INS9 INS42 INS9 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS9 INS45 INS42 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL43 DEL33 DEL42 DEL42 DEL43 DEL32 DEL11 DEL7 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL42 DEL43 DEL42 DEL44 DEL32 DEL32 DEL42 DEL42 DEL32 DEL43 DEL62 DEL36 DEL38 DEL42 DEL42 DEL45 DEL45 DEL32 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL8 DEL25 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL32 DEL32 DEL14 DEL59 DEL60 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL8 DEL70