YARN-6307. Refactor FairShareComparator#compare (Contributed by Yufei Gu via Daniel Templeton)

-   * Compare Schedulables via weighted fair sharing. In addition, Schedulables
-   * below their min share get priority over those whose min share is met.
+   * Compare Schedulables mainly via fair share usage to meet fairness.
+   * Specifically, it goes through following four steps.
-   * Schedulables without resource demand get lower priority than
-   * ones who have demands.
+   * 1. Compare demands. Schedulables without resource demand get lower priority
+   * than ones who have demands.
-   * Schedulables below their min share are compared by how far below it they
-   * are as a ratio. For example, if job A has 8 out of a min share of 10 tasks
-   * and job B has 50 out of a min share of 100, then job B is scheduled next,
-   * because B is at 50% of its min share and A is at 80% of its min share.
+   * 2. Compare min share usage. Schedulables below their min share are compared
+   * by how far below it they are as a ratio. For example, if job A has 8 out
+   * of a min share of 10 tasks and job B has 50 out of a min share of 100,
+   * then job B is scheduled next, because B is at 50% of its min share and A
+   * is at 80% of its min share.
-   * Schedulables above their min share are compared by (runningTasks / weight).
+   * 3. Compare fair share usage. Schedulables above their min share are
+   * compared by fair share usage by checking (resource usage / weight).
+   *
+   * 4. Break the tie by compare submit time and job name.
+      int res = compareDemand(s1, s2);
+
+      // Pre-compute resource usages to avoid duplicate calculation
+      Resource resourceUsage1 = s1.getResourceUsage();
+      Resource resourceUsage2 = s2.getResourceUsage();
+
+      if (res == 0) {
+        res = compareMinShareUsage(s1, s2, resourceUsage1, resourceUsage2);
+      }
+
+      if (res == 0) {
+        res = compareFairShareUsage(s1, s2, resourceUsage1, resourceUsage2);
+      }
+
+      // Break the tie by submit time
+      if (res == 0) {
+        res = (int) Math.signum(s1.getStartTime() - s2.getStartTime());
+      }
+
+      // Break the tie by job name
+      if (res == 0) {
+        res = s1.getName().compareTo(s2.getName());
+      }
+
+      return res;
+    }
+
+    private int compareDemand(Schedulable s1, Schedulable s2) {
+      int res = 0;
-        return 1;
+        res = 1;
-        return -1;
+        res = -1;
+      return res;
+    }
-      double minShareRatio1, minShareRatio2;
-      double useToWeightRatio1, useToWeightRatio2;
-      double weight1, weight2;
-      //Do not repeat the getResourceUsage calculation
-      Resource resourceUsage1 = s1.getResourceUsage();
-      Resource resourceUsage2 = s2.getResourceUsage();
+    private int compareMinShareUsage(Schedulable s1, Schedulable s2,
+        Resource resourceUsage1, Resource resourceUsage2) {
+      int res;
-          s1.getMinShare(), demand1);
+          s1.getMinShare(), s1.getDemand());
-          s2.getMinShare(), demand2);
+          s2.getMinShare(), s2.getDemand());
-      minShareRatio1 = (double) resourceUsage1.getMemorySize()
-          / Resources.max(RESOURCE_CALCULATOR, null, minShare1, ONE).getMemorySize();
-      minShareRatio2 = (double) resourceUsage2.getMemorySize()
-          / Resources.max(RESOURCE_CALCULATOR, null, minShare2, ONE).getMemorySize();
-      weight1 = s1.getWeights().getWeight(ResourceType.MEMORY);
-      weight2 = s2.getWeights().getWeight(ResourceType.MEMORY);
+      if (s1Needy && !s2Needy) {
+        res = -1;
+      } else if (s2Needy && !s1Needy) {
+        res = 1;
+      } else if (s1Needy && s2Needy) {
+        double minShareRatio1 = (double) resourceUsage1.getMemorySize() /
+            Resources.max(RESOURCE_CALCULATOR, null, minShare1, ONE)
+                .getMemorySize();
+        double minShareRatio2 = (double) resourceUsage2.getMemorySize() /
+            Resources.max(RESOURCE_CALCULATOR, null, minShare2, ONE)
+                .getMemorySize();
+        res = (int) Math.signum(minShareRatio1 - minShareRatio2);
+      } else {
+        res = 0;
+      }
+
+      return res;
+    }
+
+    /**
+     * To simplify computation, use weights instead of fair shares to calculate
+     * fair share usage.
+     */
+    private int compareFairShareUsage(Schedulable s1, Schedulable s2,
+        Resource resourceUsage1, Resource resourceUsage2) {
+      double weight1 = s1.getWeights().getWeight(ResourceType.MEMORY);
+      double weight2 = s2.getWeights().getWeight(ResourceType.MEMORY);
+      double useToWeightRatio1;
+      double useToWeightRatio2;
-      int res = 0;
-      if (s1Needy && !s2Needy)
-        res = -1;
-      else if (s2Needy && !s1Needy)
-        res = 1;
-      else if (s1Needy && s2Needy)
-        res = (int) Math.signum(minShareRatio1 - minShareRatio2);
-      else
-        // Neither schedulable is needy
-        res = (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);
-      if (res == 0) {
-        // Apps are tied in fairness ratio. Break the tie by submit time and job
-        // name to get a deterministic ordering, which is useful for unit tests.
-        res = (int) Math.signum(s1.getStartTime() - s2.getStartTime());
-        if (res == 0) {
-          res = s1.getName().compareTo(s2.getName());
-        }
-      }
-      return res;
+      return (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);

INS31 INS31 INS31 INS31 MOV78 MOV83 MOV39 MOV42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 MOV44 MOV44 INS44 INS44 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 INS66 INS43 INS42 INS43 INS42 INS60 MOV60 MOV60 INS25 INS25 MOV25 MOV25 INS41 INS43 INS42 INS43 INS42 MOV60 MOV60 MOV60 MOV25 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV60 MOV60 MOV60 MOV60 MOV25 MOV41 INS65 INS43 INS42 INS43 INS42 INS60 INS60 MOV60 INS60 MOV25 INS41 INS42 INS42 UPD39 MOV39 MOV59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 MOV59 INS8 INS66 INS66 INS42 INS42 INS39 INS59 INS39 INS59 INS39 MOV59 MOV11 INS42 INS32 INS42 INS34 INS21 INS42 INS34 INS21 INS21 UPD42 MOV21 INS8 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS7 INS7 INS7 INS21 INS32 INS32 MOV21 INS8 INS8 INS42 INS32 INS42 INS32 INS42 INS34 INS7 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS60 INS60 MOV21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS39 INS59 INS39 INS59 MOV7 MOV34 INS42 MOV27 INS42 MOV27 INS34 DEL42 DEL34 DEL41 DEL38 DEL41 DEL21 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL8 DEL31