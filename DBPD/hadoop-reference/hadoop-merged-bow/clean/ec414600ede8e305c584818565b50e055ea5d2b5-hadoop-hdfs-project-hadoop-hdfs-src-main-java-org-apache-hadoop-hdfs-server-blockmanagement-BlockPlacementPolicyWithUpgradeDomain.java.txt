HDFS-9007. Fix HDFS Balancer to honor upgrade domain policy. (Ming Ma via lei)

+import org.apache.hadoop.fs.StorageType;
-  private Map<String, List<DatanodeStorageInfo>> getUpgradeDomainMap(
-      DatanodeStorageInfo[] storageInfos) {
-    Map<String, List<DatanodeStorageInfo>> upgradeDomainMap = new HashMap<>();
-    for(DatanodeStorageInfo storage : storageInfos) {
+  private <T> Map<String, List<T>> getUpgradeDomainMap(
+      Collection<T> storagesOrDataNodes) {
+    Map<String, List<T>> upgradeDomainMap = new HashMap<>();
+    for(T storage : storagesOrDataNodes) {
-          storage.getDatanodeDescriptor());
-      List<DatanodeStorageInfo> storages = upgradeDomainMap.get(upgradeDomain);
+          getDatanodeInfo(storage));
+      List<T> storages = upgradeDomainMap.get(upgradeDomain);
+  private Collection<DatanodeStorageInfo> combine(
+      Collection<DatanodeStorageInfo> moreThanOne,
+      Collection<DatanodeStorageInfo> exactlyOne) {
+    List<DatanodeStorageInfo> all = new ArrayList<>();
+    if (moreThanOne != null) {
+      all.addAll(moreThanOne);
+    }
+    if (exactlyOne != null) {
+      all.addAll(exactlyOne);
+    }
+    return all;
+  }
+
-    List<DatanodeStorageInfo> all = new ArrayList<>();
-    if (moreThanOne != null) {
-      all.addAll(moreThanOne);
-    }
-    if (exactlyOne != null) {
-      all.addAll(exactlyOne);
-    }
-
-    Map<String, List<DatanodeStorageInfo>> upgradeDomains =
-        getUpgradeDomainMap(all.toArray(new DatanodeStorageInfo[all.size()]));
-
-    List<DatanodeStorageInfo> shareUDSet = getShareUDSet(upgradeDomains);
+    Collection<DatanodeStorageInfo> all = combine(moreThanOne, exactlyOne);
+    List<DatanodeStorageInfo> shareUDSet = getShareUDSet(
+        getUpgradeDomainMap(all));
+
+  @Override
+  boolean useDelHint(DatanodeStorageInfo delHint,
+      DatanodeStorageInfo added, List<DatanodeStorageInfo> moreThanOne,
+      Collection<DatanodeStorageInfo> exactlyOne,
+      List<StorageType> excessTypes) {
+    if (!super.useDelHint(delHint, added, moreThanOne, exactlyOne,
+        excessTypes)) {
+      // If BlockPlacementPolicyDefault doesn't allow useDelHint, there is no
+      // point checking with upgrade domain policy.
+      return false;
+    }
+    return isMovableBasedOnUpgradeDomain(combine(moreThanOne, exactlyOne),
+        delHint, added);
+  }
+
+  // Check if moving from source to target will preserve the upgrade domain
+  // policy.
+  private <T> boolean isMovableBasedOnUpgradeDomain(Collection<T> all,
+      T source, T target) {
+    Map<String, List<T>> udMap = getUpgradeDomainMap(all);
+    // shareUDSet includes datanodes that share same upgrade
+    // domain with another datanode.
+    List<T> shareUDSet = getShareUDSet(udMap);
+    // check if removing source reduces the number of upgrade domains
+    if (notReduceNumOfGroups(shareUDSet, source, target)) {
+      return true;
+    } else if (udMap.size() > upgradeDomainFactor) {
+      return true; // existing number of upgrade domain exceeds the limit.
+    } else {
+      return false; // removing source reduces the number of UDs.
+    }
+  }
+
+  @Override
+  public boolean isMovable(Collection<DatanodeInfo> locs,
+      DatanodeInfo source, DatanodeInfo target) {
+    if (super.isMovable(locs, source, target)) {
+      return isMovableBasedOnUpgradeDomain(locs, source, target);
+    } else {
+      return false;
+    }
+  }

INS26 INS40 INS31 INS31 INS31 INS31 INS73 UPD74 INS83 INS74 INS42 INS44 INS44 INS8 INS78 INS39 INS42 INS44 MOV44 INS44 INS44 INS44 INS8 INS83 INS73 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 UPD74 INS74 UPD42 INS43 INS43 INS74 INS42 INS74 INS42 MOV60 MOV25 MOV25 INS41 INS42 MOV43 INS42 UPD42 MOV74 INS42 INS74 INS42 INS74 INS42 INS25 INS41 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS25 UPD43 INS43 INS43 UPD74 INS44 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS74 INS43 INS43 INS43 INS43 INS38 INS8 INS32 INS43 INS43 INS42 INS42 INS74 INS59 INS74 INS59 INS32 INS8 INS25 INS43 INS43 INS42 INS42 INS48 INS8 INS8 UPD42 UPD42 MOV42 INS42 UPD74 INS43 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 MOV43 INS42 INS32 INS42 INS42 INS42 INS42 INS48 INS41 INS42 INS32 INS42 INS42 INS42 INS42 MOV43 MOV43 INS74 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS41 UPD43 INS42 INS74 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS41 INS41 INS32 INS9 UPD42 INS43 INS43 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL43 DEL85 DEL5 DEL42 DEL74 DEL74 DEL42 DEL42 DEL42 DEL85 DEL5 DEL32 DEL3 DEL32 DEL32