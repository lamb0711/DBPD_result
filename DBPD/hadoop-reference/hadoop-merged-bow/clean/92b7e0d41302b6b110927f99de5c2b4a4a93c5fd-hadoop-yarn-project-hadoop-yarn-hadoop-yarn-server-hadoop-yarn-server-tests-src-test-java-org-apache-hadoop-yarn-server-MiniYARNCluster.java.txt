YARN-4686. MiniYARNCluster.start() returns before cluster is completely started. Contributed by Eric Badger.

+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.server.resourcemanager.reservation.ReservationSystemTestUtil;
+import org.apache.hadoop.yarn.util.resource.Resources;
+  @Override
+  protected synchronized void serviceStart() throws Exception {
+    super.serviceStart();
+    this.waitForNodeManagersToConnect(5000);
+  }
+
-      Thread rmThread = new Thread() {
-        public void run() {
-          resourceManagers[index].start();
-        }
-      };
-      rmThread.setName("RM-" + index);
-      rmThread.start();
-      int waitCount = 0;
-      while (resourceManagers[index].getServiceState() == STATE.INITED
-          && waitCount++ < 60) {
-        LOG.info("Waiting for RM to start...");
-        Thread.sleep(1500);
-      }
+      resourceManagers[index].start();
+      if(index == 0) {
+        resourceManagers[index].getRMContext().getRMAdminService()
+          .transitionToActive(new HAServiceProtocol.StateChangeRequestInfo(
+            HAServiceProtocol.RequestSource.REQUEST_BY_USER_FORCED));
+      }
-      try {
-        new Thread() {
-          public void run() {
-            nodeManagers[index].start();
-          }
-        }.start();
-        int waitCount = 0;
-        while (nodeManagers[index].getServiceState() == STATE.INITED
-            && waitCount++ < 60) {
-          LOG.info("Waiting for NM " + index + " to start...");
-          Thread.sleep(1000);
-        }
-        if (nodeManagers[index].getServiceState() != STATE.STARTED) {
-          // RM could have failed.
-          throw new IOException("NodeManager " + index + " failed to start");
-        }
-        super.serviceStart();
-      } catch (Throwable t) {
-        throw new YarnRuntimeException(t);
+      nodeManagers[index].start();
+      if (nodeManagers[index].getServiceState() != STATE.STARTED) {
+        // NM could have failed.
+        throw new IOException("NodeManager " + index + " failed to start");
+      super.serviceStart();
-   * @param timeout Time to wait (sleeps in 100 ms intervals) in milliseconds.
+   * @param timeout Time to wait (sleeps in 10 ms intervals) in milliseconds.
-    for (int i = 0; i < timeout / 100; i++) {
+    for (int i = 0; i < timeout / 10; i++) {
-            .getClusterMetrics(req).getClusterMetrics().getNumNodeManagers()) {
+          .getClusterMetrics(req).getClusterMetrics().getNumNodeManagers()) {
+        LOG.info("All Node Managers connected in MiniYARNCluster");
-      Thread.sleep(100);
+      Thread.sleep(10);
+    LOG.info("Node Managers did not connect within 5000ms");
-
-      new Thread() {
-        public void run() {
-          appHistoryServer.start();
-        };
-      }.start();
-      int waitCount = 0;
-      while (appHistoryServer.getServiceState() == STATE.INITED
-          && waitCount++ < 60) {
-        LOG.info("Waiting for Timeline Server to start...");
-        Thread.sleep(1500);
-      }
+      appHistoryServer.start();

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS21 INS21 MOV8 INS21 INS48 INS32 INS25 MOV21 UPD66 INS32 MOV21 INS42 INS52 INS42 INS34 MOV21 INS27 INS8 INS42 INS42 INS45 INS42 INS34 INS21 UPD34 INS32 UPD34 INS32 INS42 INS14 INS21 MOV32 INS42 INS43 INS40 INS32 UPD42 INS40 INS42 INS42 INS45 DEL42 DEL43 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL40 DEL27 DEL42 DEL37 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL42 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL32 DEL40 DEL27 DEL42 DEL37 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL83 DEL39 DEL42 DEL8 DEL31 DEL1 DEL14 DEL42 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL37 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL61