YARN-7799. Improved YARN service jar file handling.
           Contributed by Billie Rinaldi

+import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.security.authorize.AccessControlList;
-import org.apache.hadoop.util.VersionInfo;
-      throws IOException, SliderException {
+      throws IOException, YarnException {
-    if (fs.isFile(dependencyLibTarGzip)) {
+    if (actionDependency(null, false) == EXIT_SUCCESS) {
-  public int actionDependency(String destinationFolder, boolean overwrite)
-      throws IOException, YarnException {
+  public int actionDependency(String destinationFolder, boolean overwrite) {
+    Path dependencyLibTarGzip;
-      destinationFolder = String.format(YarnServiceConstants.DEPENDENCY_DIR,
-          VersionInfo.getVersion());
+      dependencyLibTarGzip = fs.getDependencyTarGzip();
+    } else {
+      dependencyLibTarGzip = new Path(destinationFolder,
+          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME
+              + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);
-    Path dependencyLibTarGzip = new Path(destinationFolder,
-        YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME
-            + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);
-      File tempLibTarGzipFile = File.createTempFile(
-          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + "_",
-          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);
-      // copy all jars
-      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());
+      File tempLibTarGzipFile = null;
+      try {
+        if (!checkPermissions(dependencyLibTarGzip)) {
+          return EXIT_UNAUTHORIZED;
+        }
-      LOG.info("Version Info: " + VersionInfo.getBuildVersion());
-      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,
-          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));
-      LOG.info("To let apps use this tarball, in yarn-site set config property "
-          + "{} to {}", YarnServiceConf.DEPENDENCY_TARBALL_PATH,
-          dependencyLibTarGzip);
-      return EXIT_SUCCESS;
+        tempLibTarGzipFile = File.createTempFile(
+            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + "_",
+            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);
+        // copy all jars
+        tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());
+
+        fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,
+            new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));
+        LOG.info("To let apps use this tarball, in yarn-site set config " +
+                "property {} to {}", YarnServiceConf.DEPENDENCY_TARBALL_PATH,
+            dependencyLibTarGzip);
+        return EXIT_SUCCESS;
+      } catch (IOException e) {
+        LOG.error("Got exception creating tarball and uploading to HDFS", e);
+        return EXIT_EXCEPTION_THROWN;
+      } finally {
+        if (tempLibTarGzipFile != null) {
+          if (!tempLibTarGzipFile.delete()) {
+            LOG.warn("Failed to delete tmp file {}", tempLibTarGzipFile);
+          }
+        }
+      }
+  private boolean checkPermissions(Path dependencyLibTarGzip) throws
+      IOException {
+    AccessControlList yarnAdminAcl = new AccessControlList(getConfig().get(
+        YarnConfiguration.YARN_ADMIN_ACL,
+        YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));
+    AccessControlList dfsAdminAcl = new AccessControlList(
+        getConfig().get(DFSConfigKeys.DFS_ADMIN, " "));
+    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+    if (!yarnAdminAcl.isUserAllowed(ugi) && !dfsAdminAcl.isUserAllowed(ugi)) {
+      LOG.error("User must be on the {} or {} list to have permission to " +
+          "upload AM dependency tarball", YarnConfiguration.YARN_ADMIN_ACL,
+          DFSConfigKeys.DFS_ADMIN);
+      return false;
+    }
+
+    Path parent = dependencyLibTarGzip.getParent();
+    while (parent != null) {
+      if (fs.getFileSystem().exists(parent)) {
+        FsPermission perm = fs.getFileSystem().getFileStatus(parent)
+            .getPermission();
+        if (!perm.getOtherAction().implies(FsAction.READ_EXECUTE)) {
+          LOG.error("Parent directory {} of {} tarball location {} does not " +
+              "have world read/execute permission", parent, YarnServiceConf
+              .DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);
+          return false;
+        }
+      }
+      parent = parent.getParent();
+    }
+    return true;
+  }
+

MOV26 INS26 INS26 UPD40 INS40 INS40 INS31 MOV43 INS83 INS39 INS42 INS44 MOV43 INS8 UPD42 MOV42 INS60 INS25 INS43 INS42 INS60 INS60 INS60 INS25 INS60 INS61 INS41 INS27 MOV43 INS59 MOV27 MOV8 INS8 INS8 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS9 INS32 INS42 INS42 INS21 INS60 INS54 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS38 INS38 INS21 INS41 INS42 INS42 INS32 INS42 INS33 INS25 INS21 UPD42 MOV42 INS33 INS9 INS7 MOV43 INS59 MOV8 INS12 INS8 INS43 INS32 INS43 INS32 INS42 INS42 INS32 INS32 INS32 INS9 INS42 INS42 INS32 INS8 INS7 UPD42 INS42 MOV14 INS42 INS33 INS25 INS21 INS44 INS8 INS25 INS42 INS32 INS42 INS40 INS40 INS42 INS32 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS40 INS32 INS42 INS42 INS60 INS25 INS42 INS32 UPD42 UPD42 MOV42 INS38 INS8 INS7 INS43 INS42 INS21 INS41 INS27 INS8 INS42 INS42 INS45 INS45 INS42 INS42 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS41 INS42 MOV32 INS42 INS32 INS42 INS42 INS33 INS25 INS42 INS42 INS32 INS32 INS21 INS41 INS42 UPD42 MOV42 INS42 UPD45 UPD45 INS42 INS42 INS45 INS42 INS38 INS8 INS32 INS42 INS32 INS42 INS40 INS32 INS9 INS32 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL25 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21