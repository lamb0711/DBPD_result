HADOOP-16354.  Enable AuthFilter as default for WebHDFS.
               Contributed by Prabhu Joseph

+import org.apache.hadoop.util.StringUtils;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
-  private static final String DO_AS = "doAs";
+  private static final String DO_AS = "doas";
+    final HttpServletRequest lowerCaseRequest = toLowerCase(request);
+    String doAsUser = lowerCaseRequest.getParameter(DO_AS);
-    String doAsUser = request.getParameter(DO_AS);
+  static boolean containsUpperCase(final Iterable<String> strings) {
+    for(String s : strings) {
+      for(int i = 0; i < s.length(); i++) {
+        if (Character.isUpperCase(s.charAt(i))) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  public static HttpServletRequest toLowerCase(
+      final HttpServletRequest request) {
+    @SuppressWarnings("unchecked")
+    final Map<String, String[]> original = (Map<String, String[]>)
+        request.getParameterMap();
+    if (!containsUpperCase(original.keySet())) {
+      return request;
+    }
+
+    final Map<String, List<String>> m = new HashMap<String, List<String>>();
+    for (Map.Entry<String, String[]> entry : original.entrySet()) {
+      final String key = StringUtils.toLowerCase(entry.getKey());
+      List<String> strings = m.get(key);
+      if (strings == null) {
+        strings = new ArrayList<String>();
+        m.put(key, strings);
+      }
+      for (String v : entry.getValue()) {
+        strings.add(v);
+      }
+    }
+
+    return new HttpServletRequestWrapper(request) {
+      private Map<String, String[]> parameters = null;
+
+      @Override
+      public Map<String, String[]> getParameterMap() {
+        if (parameters == null) {
+          parameters = new HashMap<String, String[]>();
+          for (Map.Entry<String, List<String>> entry : m.entrySet()) {
+            final List<String> a = entry.getValue();
+            parameters.put(entry.getKey(), a.toArray(new String[a.size()]));
+          }
+        }
+        return parameters;
+      }
+
+      @Override
+      public String getParameter(String name) {
+        final List<String> a = m.get(name);
+        return a == null ? null : a.get(0);
+      }
+
+      @Override
+      public String[] getParameterValues(String name) {
+        return getParameterMap().get(name);
+      }
+
+      @Override
+      public Enumeration<String> getParameterNames() {
+        final Iterator<String> i = m.keySet().iterator();
+        return new Enumeration<String>() {
+          @Override
+          public boolean hasMoreElements() {
+            return i.hasNext();
+          }
+
+          @Override
+          public String nextElement() {
+            return i.next();
+          }
+        };
+      }
+    };
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 UPD45 INS60 INS83 INS74 INS42 INS70 INS41 INS42 INS83 INS43 INS42 INS60 INS25 INS60 INS70 INS41 INS83 INS43 INS59 INS43 INS43 INS44 INS42 INS8 INS9 INS42 INS79 INS83 INS74 INS59 INS38 INS8 INS83 INS74 INS59 INS44 INS32 INS8 INS14 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS24 INS42 INS45 INS43 INS43 INS5 INS42 INS11 INS32 INS41 INS43 INS43 INS74 INS42 INS14 INS74 INS42 INS42 INS42 INS60 INS60 INS25 INS70 INS43 INS42 INS1 INS42 INS42 UPD42 INS42 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS85 INS74 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS74 INS43 INS43 INS5 INS83 INS43 INS59 INS74 INS59 INS27 INS8 INS44 INS32 INS8 INS42 INS23 INS31 INS31 INS31 INS31 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS43 INS43 INS5 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS40 INS42 INS43 INS85 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS43 INS42 INS42 INS42 INS21 INS83 INS74 INS59 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS5 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS42 INS34 INS42 INS42 INS32 INS8 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS32 INS43 INS43 INS5 INS42 INS33 INS42 INS43 INS43 INS5 INS25 INS41 INS42 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS85 INS43 INS42 INS41 INS42 INS43 INS43 INS60 INS41 INS42 INS42 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS85 INS27 INS8 INS42 INS42 INS83 INS74 INS59 INS16 INS42 INS42 INS32 INS42 INS42 INS83 INS74 INS59 INS14 INS42 INS42 INS42 INS9 INS74 INS42 INS42 INS42 INS33 INS21 INS70 INS43 INS43 INS42 INS32 INS27 INS33 INS32 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS74 INS1 INS43 INS43 INS7 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS31 INS31 INS42 INS42 INS42 INS14 INS74 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS74 INS43 INS43 INS74 INS83 INS74 INS59 INS32 INS42 INS41 INS42 INS42 INS41 INS43 INS43 INS5 INS40 INS42 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS43 INS85 INS42 INS42 INS42