HDFS-13097: [SPS]: Fix the branch review comments(Part1). Contributed by Surendra Singh.

-import java.util.Iterator;
-import org.apache.hadoop.fs.StorageType;
-   * Get DFS_SPS_WORK_MULTIPLIER_PER_ITERATION from
-   * configuration.
-   *
-   * @param conf Configuration
-   * @return Value of DFS_SPS_WORK_MULTIPLIER_PER_ITERATION
-   */
-  public static int getSPSWorkMultiplier(Configuration conf) {
-    int spsWorkMultiplier = conf
-        .getInt(
-            DFSConfigKeys.DFS_SPS_WORK_MULTIPLIER_PER_ITERATION,
-            DFSConfigKeys.DFS_SPS_WORK_MULTIPLIER_PER_ITERATION_DEFAULT);
-    Preconditions.checkArgument(
-        (spsWorkMultiplier > 0),
-        DFSConfigKeys.DFS_SPS_WORK_MULTIPLIER_PER_ITERATION +
-        " = '" + spsWorkMultiplier + "' is invalid. " +
-        "It should be a positive, non-zero integer value.");
-    return spsWorkMultiplier;
-  }
-
-  /**
-
-  /**
-   * Remove the overlap between the expected types and the existing types.
-   *
-   * @param expected
-   *          - Expected storage types list.
-   * @param existing
-   *          - Existing storage types list.
-   * @param ignoreNonMovable
-   *          ignore non-movable storage types by removing them from both
-   *          expected and existing storage type list to prevent non-movable
-   *          storage from being moved.
-   * @returns if the existing types or the expected types is empty after
-   *          removing the overlap.
-   */
-  public static boolean removeOverlapBetweenStorageTypes(
-      List<StorageType> expected,
-      List<StorageType> existing, boolean ignoreNonMovable) {
-    for (Iterator<StorageType> i = existing.iterator(); i.hasNext();) {
-      final StorageType t = i.next();
-      if (expected.remove(t)) {
-        i.remove();
-      }
-    }
-    if (ignoreNonMovable) {
-      removeNonMovable(existing);
-      removeNonMovable(expected);
-    }
-    return expected.isEmpty() || existing.isEmpty();
-  }
-
-  private static void removeNonMovable(List<StorageType> types) {
-    for (Iterator<StorageType> i = types.iterator(); i.hasNext();) {
-      final StorageType t = i.next();
-      if (!t.isMovable()) {
-        i.remove();
-      }
-    }
-  }

DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL27 DEL36 DEL40 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31