Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1173012 13f79535-47bb-0310-9956-ffa450edef68

-public interface TaskId {
+import java.text.NumberFormat;
+
+/**
+ * <p>
+ * <code>TaskId</code> represents the unique identifier for a Map or Reduce
+ * Task.
+ * </p>
+ * 
+ * <p>
+ * TaskId consists of 3 parts. First part is <code>JobId</code>, that this Task
+ * belongs to. Second part of the TaskId is either 'm' or 'r' representing
+ * whether the task is a map task or a reduce task. And the third part is the
+ * task number.
+ * </p>
+ */
+public abstract class TaskId implements Comparable<TaskId> {
+
+  /**
+   * @return the associated <code>JobId</code>
+   */
-  public abstract  TaskType getTaskType();
+
+  /**
+   * @return the type of the task - MAP/REDUCE
+   */
+  public abstract TaskType getTaskType();
+
+  /**
+   * @return the task number.
+   */
-  
+
+
+
-}
+
+  protected static final String TASK = "task";
+
+  static final ThreadLocal<NumberFormat> taskIdFormat =
+      new ThreadLocal<NumberFormat>() {
+        @Override
+        public NumberFormat initialValue() {
+          NumberFormat fmt = NumberFormat.getInstance();
+          fmt.setGroupingUsed(false);
+          fmt.setMinimumIntegerDigits(6);
+          return fmt;
+        }
+      };
+
+  @Override
+  public int hashCode() {
+    final int prime = 31;
+    int result = 1;
+    result = prime * result + getId();
+    result = prime * result + getJobId().hashCode();
+    result = prime * result + getTaskType().hashCode();
+    return result;
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (this == obj)
+      return true;
+    if (obj == null)
+      return false;
+    if (getClass() != obj.getClass())
+      return false;
+    TaskId other = (TaskId) obj;
+    if (getId() != other.getId())
+      return false;
+    if (!getJobId().equals(other.getJobId()))
+      return false;
+    if (getTaskType() != other.getTaskType())
+      return false;
+    return true;
+  }
+      
+  @Override
+  public String toString() {
+    StringBuilder builder = new StringBuilder(TASK);
+    JobId jobId = getJobId();
+    builder.append("_").append(jobId.getAppId().getClusterTimestamp());
+    builder.append("_").append(
+        JobId.jobIdFormat.get().format(jobId.getAppId().getId()));
+    builder.append("_");
+    builder.append(getTaskType() == TaskType.MAP ? "m" : "r").append("_");
+    builder.append(taskIdFormat.get().format(getId()));
+    return builder.toString();
+  }
+
+  @Override
+  public int compareTo(TaskId other) {
+    int jobIdComp = this.getJobId().compareTo(other.getJobId());
+    if (jobIdComp == 0) {
+      if (this.getTaskType() == other.getTaskType()) {
+        return this.getId() - other.getId();
+      } else {
+        return this.getTaskType().compareTo(other.getTaskType());
+      }
+    } else {
+      return jobIdComp;
+    }
+  }
+}

INS26 INS40 INS29 INS83 INS74 INS23 INS23 INS31 INS31 INS31 INS31 INS65 INS43 INS43 INS29 INS29 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS65 INS65 INS65 INS42 INS42 INS45 INS43 INS43 INS42 INS14 INS42 INS60 INS60 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS25 INS25 INS25 INS60 INS25 INS25 INS25 INS41 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS60 INS25 INS66 INS66 INS66 INS42 INS42 INS74 INS1 INS83 INS39 INS59 INS39 INS59 INS7 INS7 INS7 INS42 INS42 INS27 INS41 INS27 INS41 INS27 INS41 INS43 INS59 INS27 INS41 INS38 INS41 INS27 INS41 INS9 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS39 INS59 INS27 INS8 INS8 INS43 INS43 INS31 INS42 INS34 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS52 INS42 INS9 INS42 INS33 INS9 INS32 INS32 INS9 INS42 INS42 INS11 INS32 INS32 INS9 INS32 INS9 INS32 INS32 INS9 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS34 INS25 INS41 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS27 INS32 INS27 INS32 INS27 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS16 INS32 INS42 INS32 INS32 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS27 INS45 INS45 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS41 INS41 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS52 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS34 INS42 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42