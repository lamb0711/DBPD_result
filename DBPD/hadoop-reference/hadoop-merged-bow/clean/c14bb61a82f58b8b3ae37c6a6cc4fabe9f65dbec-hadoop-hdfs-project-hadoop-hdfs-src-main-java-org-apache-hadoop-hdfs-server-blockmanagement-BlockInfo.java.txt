Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242635 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+
+import org.apache.hadoop.classification.InterfaceAudience;
- * Internal class for block metadata.
+ * BlockInfo class maintains for a given block
+ * the {@link INodeFile} it is part of and datanodes where the replicas of 
+ * the block are stored.
-public class BlockInfo extends Block implements LightWeightGSet.LinkedElement {
+@InterfaceAudience.Private
+public class BlockInfo extends Block implements
+    LightWeightGSet.LinkedElement {
-   * This array contains triplets of references.
-   * For each i-th datanode the block belongs to
-   * triplets[3*i] is the reference to the DatanodeDescriptor
-   * and triplets[3*i+1] and triplets[3*i+2] are references 
-   * to the previous and the next blocks, respectively, in the 
-   * list of blocks belonging to this data-node.
+   * This array contains triplets of references. For each i-th datanode the
+   * block belongs to triplets[3*i] is the reference to the DatanodeDescriptor
+   * and triplets[3*i+1] and triplets[3*i+2] are references to the previous and
+   * the next blocks, respectively, in the list of blocks belonging to this
+   * data-node.
+   * 
+   * Using previous and next in Object triplets is done instead of a
+   * {@link LinkedList} list to efficiently use memory. With LinkedList the cost
+   * per replica is 42 bytes (LinkedList#Entry object per replica) versus 16
+   * bytes using the triplets.
-  BlockInfo getPrevious(int index) {
+  private BlockInfo getPrevious(int index) {
-  void setDatanode(int index, DatanodeDescriptor node) {
+  private void setDatanode(int index, DatanodeDescriptor node, BlockInfo previous,
+      BlockInfo next) {
-    assert index >= 0 && index*3 < triplets.length : "Index is out of bound";
-    triplets[index*3] = node;
-  }
-
-  void setPrevious(int index, BlockInfo to) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+1 < triplets.length : "Index is out of bound";
-    triplets[index*3+1] = to;
-  }
-
-  void setNext(int index, BlockInfo to) {
-    assert this.triplets != null : "BlockInfo is not initialized";
-    assert index >= 0 && index*3+2 < triplets.length : "Index is out of bound";
-    triplets[index*3+2] = to;
+    int i = index * 3;
+    assert index >= 0 && i+2 < triplets.length : "Index is out of bound";
+    triplets[i] = node;
+    triplets[i+1] = previous;
+    triplets[i+2] = next;
-  BlockInfo getSetPrevious(int index, BlockInfo to) {
+  private BlockInfo setPrevious(int index, BlockInfo to) {
-  BlockInfo getSetNext(int index, BlockInfo to) {
+  private BlockInfo setNext(int index, BlockInfo to) {
-    setDatanode(lastNode, node);
-    setNext(lastNode, null);
-    setPrevious(lastNode, null);
+    setDatanode(lastNode, node, null, null);
-    setDatanode(dnIndex, getDatanode(lastNode));
-    setNext(dnIndex, getNext(lastNode)); 
-    setPrevious(dnIndex, getPrevious(lastNode)); 
+    setDatanode(dnIndex, getDatanode(lastNode), getPrevious(lastNode),
+        getNext(lastNode));
-    setDatanode(lastNode, null);
-    setNext(lastNode, null); 
-    setPrevious(lastNode, null); 
+    setDatanode(lastNode, null, null, null);
-    BlockInfo next = this.getSetNext(curIndex, head);
-    BlockInfo prev = this.getSetPrevious(curIndex, null);
+    BlockInfo next = this.setNext(curIndex, head);
+    BlockInfo prev = this.setPrevious(curIndex, null);
-   * 

INS26 INS26 INS40 INS40 INS78 INS31 INS40 INS83 INS83 MOV39 MOV42 MOV44 MOV44 INS44 MOV44 INS8 INS83 UPD42 INS83 UPD42 UPD66 INS66 INS65 INS66 INS66 INS43 INS42 UPD42 MOV6 INS60 MOV6 MOV21 INS21 MOV21 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 INS65 INS66 INS66 INS66 INS42 INS39 INS59 INS7 MOV43 MOV43 INS42 INS42 MOV27 UPD42 INS2 INS42 UPD42 INS33 INS33 MOV32 MOV32 INS33 INS33 INS42 INS42 INS27 UPD42 UPD42 UPD42 MOV42 UPD34 MOV34 UPD42 MOV42 UPD34 MOV34 UPD42 MOV42 DEL66 DEL27 DEL34 DEL42 DEL34 DEL27 DEL34 DEL27 DEL34 DEL27 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL42 DEL2 DEL42 DEL7 DEL21 DEL8 DEL31 DEL39 DEL42 DEL39 DEL42 DEL44 DEL8 DEL31 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL6 DEL27 DEL42 DEL34 DEL27 DEL34 DEL27 DEL40 DEL27 DEL27 DEL45 DEL6 DEL8 DEL31 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21