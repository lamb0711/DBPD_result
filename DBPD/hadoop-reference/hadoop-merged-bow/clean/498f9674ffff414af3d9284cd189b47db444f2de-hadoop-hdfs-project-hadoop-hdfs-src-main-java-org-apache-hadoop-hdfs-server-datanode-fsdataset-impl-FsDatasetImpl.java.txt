Merge r1550130 through r1555020 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1555021 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
-import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.StorageType;
+import org.apache.hadoop.hdfs.server.common.Storage;
+import org.apache.hadoop.hdfs.server.datanode.StorageLocation;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
+import org.apache.hadoop.hdfs.server.protocol.StorageReport;
+  @Override // FsDatasetSpi
+  public StorageReport[] getStorageReports(String bpid)
+      throws IOException {
+    StorageReport[] reports;
+    synchronized (statsLock) {
+      reports = new StorageReport[volumes.volumes.size()];
+      int i = 0;
+      for (FsVolumeImpl volume : volumes.volumes) {
+        reports[i++] = new StorageReport(volume.getStorageID(),
+                                         false,
+                                         volume.getCapacity(),
+                                         volume.getDfsUsed(),
+                                         volume.getAvailable(),
+                                         volume.getBlockPoolUsed(bpid));
+      }
+    }
+
+    return reports;
+  }
+
-  final ReplicaMap volumeMap;
+  final ReplicaMap volumeMap;
+
+    Collection<StorageLocation> dataLocations = DataNode.getStorageLocations(conf);
-      final File dir = storage.getStorageDir(idx).getCurrentDir();
-      volArray.add(new FsVolumeImpl(this, storage.getStorageID(), dir, conf));
-      LOG.info("Added volume - " + dir);
+      // TODO: getStorageTypeFromLocations() is only a temporary workaround and 
+      // should be replaced with getting storage type from DataStorage (missing 
+      // storage type now) directly.
+      Storage.StorageDirectory sd = storage.getStorageDir(idx);
+      final File dir = sd.getCurrentDir();
+      final StorageType storageType = getStorageTypeFromLocations(dataLocations, dir);
+      volArray.add(new FsVolumeImpl(this, sd.getStorageUuid(), dir, conf,
+          storageType));
+      LOG.info("Added volume - " + dir + ", StorageType: " + storageType);
-    volumes.getVolumeMap(volumeMap);
+    volumes.initializeReplicaMaps(volumeMap);
-    registerMBean(storage.getStorageID());
+    registerMBean(datanode.getDatanodeUuid());
+  }
+
+  private StorageType getStorageTypeFromLocations(
+      Collection<StorageLocation> dataLocations, File dir) {
+    for (StorageLocation dataLocation : dataLocations) {
+      if (dataLocation.getFile().equals(dir)) {
+        return dataLocation.getStorageType();
+      }
+    }
+    return StorageType.DEFAULT;
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("b=" + b + ", volumeMap=" + volumeMap);
-      }
-  public void recoverClose(ExtendedBlock b, long newGS,
+  public String recoverClose(ExtendedBlock b, long newGS,
+    return replicaInfo.getStorageUuid();
-  /**
-   * Generates a block report from the in-memory block map.
-   */
-  @Override // FsDatasetSpi
-  public BlockListAsLongs getBlockReport(String bpid) {
-    int size =  volumeMap.size(bpid);
-    ArrayList<ReplicaInfo> finalized = new ArrayList<ReplicaInfo>(size);
-    ArrayList<ReplicaInfo> uc = new ArrayList<ReplicaInfo>();
-    if (size == 0) {
-      return new BlockListAsLongs(finalized, uc);
-    }
-    
-    synchronized(this) {
-      for (ReplicaInfo b : volumeMap.replicas(bpid)) {
-        switch(b.getState()) {
-        case FINALIZED:
-          finalized.add(b);
-          break;
-        case RBW:
-        case RWR:
-          uc.add(b);
-          break;
-        case RUR:
-          ReplicaUnderRecovery rur = (ReplicaUnderRecovery)b;
-          uc.add(rur.getOriginalReplica());
-          break;
-        case TEMPORARY:
-          break;
-        default:
-          assert false : "Illegal ReplicaInfo state.";
-        }
-      }
-      return new BlockListAsLongs(finalized, uc);
-    }
-  }
-
+  @Override
+  public Map<DatanodeStorage, BlockListAsLongs> getBlockReports(String bpid) {
+    Map<DatanodeStorage, BlockListAsLongs> blockReportsMap =
+        new HashMap<DatanodeStorage, BlockListAsLongs>();
+
+    Map<String, ArrayList<ReplicaInfo>> finalized =
+        new HashMap<String, ArrayList<ReplicaInfo>>();
+    Map<String, ArrayList<ReplicaInfo>> uc =
+        new HashMap<String, ArrayList<ReplicaInfo>>();
+
+    for (FsVolumeSpi v : volumes.volumes) {
+      finalized.put(v.getStorageID(), new ArrayList<ReplicaInfo>());
+      uc.put(v.getStorageID(), new ArrayList<ReplicaInfo>());
+    }
+
+    synchronized(this) {
+      for (ReplicaInfo b : volumeMap.replicas(bpid)) {
+        switch(b.getState()) {
+          case FINALIZED:
+            finalized.get(b.getVolume().getStorageID()).add(b);
+            break;
+          case RBW:
+          case RWR:
+            uc.get(b.getVolume().getStorageID()).add(b);
+            break;
+          case RUR:
+            ReplicaUnderRecovery rur = (ReplicaUnderRecovery)b;
+            uc.get(rur.getVolume().getStorageID()).add(rur.getOriginalReplica());
+            break;
+          case TEMPORARY:
+            break;
+          default:
+            assert false : "Illegal ReplicaInfo state.";
+        }
+      }
+    }
+
+    for (FsVolumeImpl v : volumes.volumes) {
+      ArrayList<ReplicaInfo> finalizedList = finalized.get(v.getStorageID());
+      ArrayList<ReplicaInfo> ucList = uc.get(v.getStorageID());
+      blockReportsMap.put(v.toDatanodeStorage(),
+                          new BlockListAsLongs(finalizedList, ucList));
+    }
+
+    return blockReportsMap;
+  }
+
-  public synchronized List<Block> getFinalizedBlocks(String bpid) {
-    ArrayList<Block> finalized = new ArrayList<Block>(volumeMap.size(bpid));
+  public synchronized List<FinalizedReplica> getFinalizedBlocks(String bpid) {
+    ArrayList<FinalizedReplica> finalized =
+        new ArrayList<FinalizedReplica>(volumeMap.size(bpid));
-        finalized.add(new Block(b));
+        finalized.add(new FinalizedReplica((FinalizedReplica)b));
-   *        "hadoop:service=DataNode,name=FSDatasetState-<storageid>"
+   *        "hadoop:service=DataNode,name=FSDatasetState-<datanodeUuid>"
-  void registerMBean(final String storageId) {
+  void registerMBean(final String datanodeUuid) {
-    StandardMBean bean;
-    String storageName;
-    if (storageId == null || storageId.equals("")) {// Temp fix for the uninitialized storage
-      storageName = "UndefinedStorageId" + DFSUtil.getRandom().nextInt();
-    } else {
-      storageName = storageId;
-    }
-      bean = new StandardMBean(this,FSDatasetMBean.class);
-      mbeanName = MBeans.register("DataNode", "FSDatasetState-" + storageName, bean);
+      StandardMBean bean = new StandardMBean(this,FSDatasetMBean.class);
+      mbeanName = MBeans.register("DataNode", "FSDatasetState-" + datanodeUuid, bean);
-    volumes.getVolumeMap(bpid, volumeMap);
+    volumes.getAllVolumesMap(bpid, volumeMap);
-  @Override
-  public String[] getBlockPoolList() {
-    return volumeMap.getBlockPoolList();
-  }
-  
+

INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 MOV31 INS40 UPD40 INS40 INS40 INS40 INS40 INS31 INS5 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 MOV43 INS74 UPD42 UPD74 INS43 INS85 INS43 INS42 INS42 INS60 INS51 INS41 INS60 INS42 INS74 INS42 INS43 INS42 INS70 INS41 INS41 INS43 INS43 MOV43 INS70 INS70 INS41 UPD43 UPD42 INS42 MOV42 INS5 INS59 INS42 INS8 INS42 INS74 INS59 INS43 INS43 INS42 INS44 INS42 INS8 INS40 INS32 INS42 INS42 INS74 INS74 INS74 INS44 INS40 INS8 INS44 INS40 INS8 INS42 UPD42 UPD74 MOV74 UPD66 INS43 MOV85 INS42 INS21 INS60 INS70 INS43 INS43 INS42 INS32 INS60 INS60 UPD42 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS43 INS43 MOV43 UPD42 INS14 INS43 INS43 MOV74 INS43 INS43 INS74 INS14 INS43 INS42 INS21 INS21 INS43 INS42 INS60 INS60 INS21 UPD43 INS60 UPD42 INS42 INS7 INS39 INS59 INS44 INS40 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS83 MOV43 INS59 INS83 INS43 INS59 UPD42 UPD42 INS42 INS32 INS8 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS32 INS42 MOV74 INS59 MOV74 INS59 INS32 UPD42 UPD74 MOV74 MOV43 INS59 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS40 UPD42 MOV32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS41 INS43 INS43 INS43 INS43 INS43 INS74 INS42 INS42 INS43 MOV43 INS74 INS42 INS42 INS32 MOV14 INS42 INS42 INS32 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS32 MOV14 UPD43 INS42 MOV14 INS5 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 UPD42 INS43 INS85 INS40 INS42 INS2 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS37 INS43 INS32 INS9 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 UPD43 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS42 INS32 MOV42 INS42 INS32 MOV42 INS42 INS32 UPD42 INS43 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL5 DEL42 DEL32 DEL41 DEL8 DEL83 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL39 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL14 DEL41 DEL8 DEL25 DEL41 DEL42 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL27 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21