HDDS-801. Quasi close the container when close is not executed via Ratis.
Contributed by Nanda kumar.

-    .ContainerDataProto;
+    .ContainerDataProto.State;
+import org.apache.hadoop.ozone.container.common.statemachine.StateContext;
-  public KeyValueHandler(Configuration config, ContainerSet contSet,
-      VolumeSet volSet, ContainerMetrics metrics) {
-    super(config, contSet, volSet, metrics);
+  public KeyValueHandler(Configuration config, StateContext context,
+      ContainerSet contSet, VolumeSet volSet, ContainerMetrics metrics) {
+    super(config, context, contSet, volSet, metrics);
-
-    long containerID = kvContainer.getContainerData().getContainerID();
-      checkContainerOpen(kvContainer);
-      // TODO : The close command should move the container to either quasi
-      // closed/closed depending upon how the closeContainer gets executed.
-      // If it arrives by Standalone, it will be moved to Quasi Closed or
-      // otherwise moved to Closed state if it gets executed via Ratis.
-      kvContainer.close();
+      markContainerForClose(kvContainer);
+      closeContainer(kvContainer);
-      if (ex.getResult() == CLOSED_CONTAINER_IO) {
-        LOG.debug("Container {} is already closed.", containerID);
-        return ContainerUtils.getSuccessResponse(request);
-      }
-    ContainerDataProto.State containerState = kvContainer.getContainerState();
+    final State containerState = kvContainer.getContainerState();
-    /**
+    /*
-    if (containerState == ContainerDataProto.State.OPEN
-        || containerState == ContainerDataProto.State.CLOSING) {
+    if (containerState == State.OPEN || containerState == State.CLOSING) {
-    } else {
-      String msg = "Requested operation not allowed as ContainerState is " +
-          containerState;
-      ContainerProtos.Result result = null;
-      switch (containerState) {
-      case CLOSED:
-        result = CLOSED_CONTAINER_IO;
-        break;
-      case UNHEALTHY:
-        result = CONTAINER_UNHEALTHY;
-        break;
-      case INVALID:
-        result = INVALID_CONTAINER_STATE;
-        break;
-      default:
-        result = CONTAINER_INTERNAL_ERROR;
-      }
-
-      throw new StorageContainerException(msg, result);
+
+    final ContainerProtos.Result result;
+    switch (containerState) {
+    case QUASI_CLOSED:
+      result = CLOSED_CONTAINER_IO;
+      break;
+    case CLOSED:
+      result = CLOSED_CONTAINER_IO;
+      break;
+    case UNHEALTHY:
+      result = CONTAINER_UNHEALTHY;
+      break;
+    case INVALID:
+      result = INVALID_CONTAINER_STATE;
+      break;
+    default:
+      result = CONTAINER_INTERNAL_ERROR;
+    }
+    String msg = "Requested operation not allowed as ContainerState is " +
+        containerState;
+    throw new StorageContainerException(msg, result);
+
+  @Override
+  public void markContainerForClose(Container container)
+      throws IOException {
+    State currentState = container.getContainerState();
+    // Move the container to CLOSING state only if it's OPEN
+    if (currentState == State.OPEN) {
+      container.markContainerForClose();
+      sendICR(container);
+    }
+  }
+
+  @Override
+  public void quasiCloseContainer(Container container)
+      throws IOException {
+    final State state = container.getContainerState();
+    // Quasi close call is idempotent.
+    if (state == State.QUASI_CLOSED) {
+      return;
+    }
+    // The container has to be in CLOSING state.
+    if (state != State.CLOSING) {
+      ContainerProtos.Result error = state == State.INVALID ?
+          INVALID_CONTAINER_STATE : CONTAINER_INTERNAL_ERROR;
+      throw new StorageContainerException("Cannot quasi close container #" +
+          container.getContainerData().getContainerID() + " while in " +
+          state + " state.", error);
+    }
+    container.quasiClose();
+    sendICR(container);
+  }
+
+  @Override
+  public void closeContainer(Container container)
+      throws IOException {
+    final State state = container.getContainerState();
+    // Close call is idempotent.
+    if (state == State.CLOSED) {
+      return;
+    }
+    // The container has to be either in CLOSING or in QUASI_CLOSED state.
+    if (state != State.CLOSING && state != State.QUASI_CLOSED) {
+      ContainerProtos.Result error = state == State.INVALID ?
+          INVALID_CONTAINER_STATE : CONTAINER_INTERNAL_ERROR;
+      throw new StorageContainerException("Cannot close container #" +
+          container.getContainerData().getContainerID() + " while in " +
+          state + " state.", error);
+    }
+    container.close();
+    sendICR(container);
+  }

INS26 UPD40 INS40 INS31 INS31 INS31 INS44 MOV8 MOV60 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS43 INS42 MOV60 INS25 MOV49 MOV10 MOV10 INS42 INS43 INS42 INS42 INS60 INS25 INS42 INS43 INS42 INS42 INS60 INS25 INS25 INS21 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS25 INS21 INS21 INS42 INS42 INS83 UPD43 INS27 MOV8 INS83 INS43 INS49 INS21 INS10 INS42 INS43 INS59 INS27 INS8 INS42 INS83 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS32 INS42 INS83 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS32 INS8 INS42 INS27 INS27 INS40 INS42 INS7 INS42 INS42 INS32 INS42 INS40 INS21 INS21 INS42 INS42 INS32 INS42 INS40 INS41 INS42 INS40 INS60 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS41 INS27 INS27 INS60 INS53 INS42 INS42 INS42 INS42 MOV41 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 MOV43 INS59 INS14 INS42 INS42 INS42 INS40 INS42 INS40 INS43 INS59 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS16 INS43 INS27 INS42 INS40 INS42 INS16 INS43 INS27 INS42 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL40 DEL33 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL25 DEL8