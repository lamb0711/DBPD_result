HDFS-3906. QJM: quorum timeout on failover with large log segment. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383251 13f79535-47bb-0310-9956-ffa450edef68

-  private static final int NEWEPOCH_TIMEOUT_MS = 10000;
-  
-  /**
-   * Fence any previous writers, and obtain a unique epoch number
-   * for write-access to the journal nodes.
-   *
-   * @param nsInfo the expected namespace information. If the remote
-   * node does not match with this namespace, the request will be rejected.
-   * @return the new, unique epoch number
-   * @throws IOException
-   */
-  Map<AsyncLogger, NewEpochResponseProto> createNewUniqueEpoch(
-      NamespaceInfo nsInfo) throws IOException {
-    Preconditions.checkState(myEpoch == -1,
-        "epoch already created: epoch=" + myEpoch);
-    
-    Map<AsyncLogger, GetJournalStateResponseProto> lastPromises =
-      waitForWriteQuorum(getJournalState(), NEWEPOCH_TIMEOUT_MS);
-    
-    long maxPromised = Long.MIN_VALUE;
-    for (GetJournalStateResponseProto resp : lastPromises.values()) {
-      maxPromised = Math.max(maxPromised, resp.getLastPromisedEpoch());
-    }
-    assert maxPromised >= 0;
-    
-    long myEpoch = maxPromised + 1;
-    Map<AsyncLogger, NewEpochResponseProto> resps =
-        waitForWriteQuorum(newEpoch(nsInfo, myEpoch), NEWEPOCH_TIMEOUT_MS);
-    this.myEpoch = myEpoch;
-    setEpoch(myEpoch);
-    return resps;
-  }
-  
-  private void setEpoch(long e) {
+  void setEpoch(long e) {
+    Preconditions.checkState(!isEpochEstablished(),
+        "Epoch already established: epoch=%s", myEpoch);
+    myEpoch = e;
-
+   * @return true if an epoch has been established.
+   */
+  boolean isEpochEstablished() {
+    return myEpoch != INVALID_EPOCH;
+  }
+  
+  /**
+   * @param operationName textual description of the operation, for logging
-      int timeoutMs) throws IOException {
+      int timeoutMs, String operationName) throws IOException {
-          timeoutMs);
+          timeoutMs, operationName);
-  private QuorumCall<AsyncLogger, GetJournalStateResponseProto> getJournalState() {
+  public QuorumCall<AsyncLogger, GetJournalStateResponseProto> getJournalState() {
-  private QuorumCall<AsyncLogger,NewEpochResponseProto> newEpoch(
+  public QuorumCall<AsyncLogger,NewEpochResponseProto> newEpoch(

MOV31 INS39 UPD42 INS44 UPD83 UPD83 INS21 INS21 INS41 INS65 INS43 INS42 INS32 INS7 UPD66 INS27 INS42 INS66 INS42 INS42 INS42 INS38 INS45 INS42 INS42 INS42 MOV42 INS42 INS32 INS42 INS42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL34 DEL38 DEL27 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL70 DEL42 DEL34 DEL27 DEL6 DEL39 DEL42 DEL42 DEL34 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41