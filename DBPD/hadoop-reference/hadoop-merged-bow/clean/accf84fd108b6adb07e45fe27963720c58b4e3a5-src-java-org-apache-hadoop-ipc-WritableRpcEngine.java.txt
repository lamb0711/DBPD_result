HADOOP-7227. Remove protocol version check at proxy creation in Hadoop RPC. Contributed by jitendra.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1098792 13f79535-47bb-0310-9956-ffa450edef68

+  
+  //writableRpcVersion should be updated if there is a change
+  //in format of the rpc messages.
+  public static long writableRpcVersion = 1L;
+    private long clientVersion;
+    private int clientMethodsHash;
+    
+    //This could be different from static writableRpcVersion when received
+    //at server, if client is using a different version.
+    private long rpcVersion;
+      rpcVersion = writableRpcVersion;
+      if (method.getDeclaringClass().equals(VersionedProtocol.class)) {
+        //VersionedProtocol is exempted from version check.
+        clientVersion = 0;
+        clientMethodsHash = 0;
+      } else {
+        try {
+          this.clientVersion = method.getDeclaringClass().getField("versionID")
+              .getLong(method.getDeclaringClass());
+        } catch (NoSuchFieldException ex) {
+          throw new RuntimeException(ex);
+        } catch (IllegalAccessException ex) {
+          throw new RuntimeException(ex);
+        }
+        this.clientMethodsHash = ProtocolSignature.getFingerprint(method
+            .getDeclaringClass().getMethods());
+      }
+    
+    private long getProtocolVersion() {
+      return clientVersion;
+    }
+
+    private int getClientMethodsHash() {
+      return clientMethodsHash;
+    }
+    
+    /**
+     * Returns the rpc version used by the client.
+     * @return rpcVersion
+     */
+    public long getRpcVersion() {
+      return rpcVersion;
+    }
+      rpcVersion = in.readLong();
+      clientVersion = in.readLong();
+      clientMethodsHash = in.readInt();
+      out.writeLong(rpcVersion);
+      out.writeLong(clientVersion);
+      out.writeInt(clientMethodsHash);
+      buffer.append(", rpc version="+rpcVersion);
+      buffer.append(", client version="+clientVersion);
+      buffer.append(", methodsFingerPrint="+clientMethodsHash);
-    T proxy = (T)Proxy.newProxyInstance
-      (protocol.getClassLoader(), new Class[] { protocol },
-       new Invoker(protocol, addr, ticket, conf, factory, rpcTimeout));
-    int[] serverMethods = null;
-    if (proxy instanceof VersionedProtocol) {
-      ProtocolSignature serverInfo = ((VersionedProtocol)proxy)
-        .getProtocolSignature(protocol.getName(), clientVersion,
-            ProtocolSignature.getFingerprint(protocol.getMethods()));
-      long serverVersion = serverInfo.getVersion();
-      if (serverVersion != clientVersion) {
-        throw new RPC.VersionMismatch(protocol.getName(), clientVersion, 
-                                      serverVersion);
-      }
-      serverMethods = serverInfo.getMethods();
-    }
-    return new ProtocolProxy<T>(protocol, proxy, serverMethods);
+    T proxy = (T) Proxy.newProxyInstance(protocol.getClassLoader(),
+        new Class[] { protocol }, new Invoker(protocol, addr, ticket, conf,
+            factory, rpcTimeout));
+    return new ProtocolProxy<T>(protocol, proxy, true);
+        // Verify rpc version
+        if (call.getRpcVersion() != writableRpcVersion) {
+          // Client is using a different version of WritableRpc
+          throw new IOException(
+              "WritableRpc version mismatch, client side version="
+                  + call.getRpcVersion() + ", server side version="
+                  + writableRpcVersion);
+        }
+        
+        //Verify protocol version.
+        //Bypass the version check for VersionedProtocol
+        if (!method.getDeclaringClass().equals(VersionedProtocol.class)) {
+          long clientVersion = call.getProtocolVersion();
+          ProtocolSignature serverInfo = ((VersionedProtocol) instance)
+              .getProtocolSignature(protocol.getCanonicalName(), call
+                  .getProtocolVersion(), call.getClientMethodsHash());
+          long serverVersion = serverInfo.getVersion();
+          if (serverVersion != clientVersion) {
+            LOG.warn("Version mismatch: client version=" + clientVersion
+                + ", server version=" + serverVersion);
+            throw new RPC.VersionMismatch(protocol.getName(), clientVersion,
+                serverVersion);
+          }
+        }
+

INS23 INS83 INS83 INS39 INS59 INS23 INS23 INS23 INS31 INS31 INS31 INS42 INS34 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS42 INS42 MOV21 MOV21 MOV21 INS21 INS25 INS41 INS41 INS65 INS65 INS41 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS7 INS32 INS8 INS8 INS42 INS42 INS66 INS66 INS42 INS7 INS7 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS9 INS42 INS42 INS32 INS42 INS57 INS21 INS21 INS54 INS21 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS25 INS25 INS42 INS42 MOV43 INS7 INS7 INS8 INS12 INS12 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS27 INS8 INS38 INS8 INS42 INS34 INS42 INS34 INS21 INS44 INS8 INS44 INS8 INS22 INS32 INS32 INS42 INS53 INS32 INS60 INS60 MOV60 MOV25 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS57 INS39 INS59 MOV43 INS59 INS22 INS32 INS42 INS14 INS42 INS14 INS32 INS42 INS43 INS27 INS42 INS42 MOV43 INS42 INS32 INS42 INS32 INS21 INS52 INS42 INS32 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS36 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS42 INS45 INS42 INS45 INS42 INS42 DEL8 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL62 DEL42 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42