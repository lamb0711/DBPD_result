HDFS-4103. Support O(1) snapshot creation.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotAccessControlException;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotAccessControlException;
-    return INodeDirectorySnapshottable.newInstance(r, 0);
+    final INodeDirectorySnapshottable s = new INodeDirectorySnapshottable(r);
+    s.setSnapshotQuota(0);
+    return s;
-    long now = now();
-      file.setModificationTime(now);
-    String srcChildName = null;
+    byte[] srcChildName = null;
-      srcChildName = srcChild.getLocalName();
+      srcChildName = srcChild.getLocalNameBytes();
-        srcInodes[srcInodes.length-2].updateModificationTime(timestamp);
-        dstInodes[dstInodes.length-2].updateModificationTime(timestamp);
+        srcInodes[srcInodes.length-2].updateModificationTime(timestamp,
+            srcInodesInPath.getLatestSnapshot());
+        dstInodes[dstInodes.length-2].updateModificationTime(timestamp,
+            dstInodesInPath.getLatestSnapshot());
-    final String srcChildName = removedSrc.getLocalName();
-    String dstChildName = null;
+    final byte[] srcChildName = removedSrc.getLocalNameBytes();
+    byte[] dstChildName = null;
-        dstChildName = removedDst.getLocalName();
+        dstChildName = removedDst.getLocalNameBytes();
-        srcInodes[srcInodes.length - 2].updateModificationTime(timestamp);
-        dstInodes[dstInodes.length - 2].updateModificationTime(timestamp);
+        srcInodes[srcInodes.length - 2].updateModificationTime(timestamp,
+            srcInodesInPath.getLatestSnapshot());
+        dstInodes[dstInodes.length - 2].updateModificationTime(timestamp,
+            dstInodesInPath.getLatestSnapshot());
-    fileNode.setFileReplication(replication);
+    fileNode.setFileReplication(replication, inodesInPath.getLatestSnapshot());
-    INode inode = rootDir.getMutableNode(src, true);
+    final INodesInPath inodesInPath = rootDir.getMutableINodesInPath(src, true);
+    final INode inode = inodesInPath.getLastINode();
-    inode.setPermission(permissions);
+    inode.setPermission(permissions, inodesInPath.getLatestSnapshot());
-    INode inode = rootDir.getMutableNode(src, true);
+    final INodesInPath inodesInPath = rootDir.getMutableINodesInPath(src, true);
+    final INode inode = inodesInPath.getLastINode();
-      inode.setUser(username);
+      inode.setUser(username, inodesInPath.getLatestSnapshot());
-      inode.setGroup(groupname);
+      inode.setGroup(groupname, inodesInPath.getLatestSnapshot());
+    final Snapshot trgLatestSnapshot = trgINodesInPath.getLatestSnapshot();
-      trgParent.removeChild(nodeToRemove);
+      trgParent.removeChild(nodeToRemove, trgLatestSnapshot);
-    trgInode.setModificationTime(timestamp);
-    trgParent.updateModificationTime(timestamp);
+    trgInode.setModificationTime(timestamp, trgLatestSnapshot);
+    trgParent.updateModificationTime(timestamp, trgLatestSnapshot);
-    final INode[] inodes = inodesInPath.getINodes();
-    INode targetNode = inodes[inodes.length-1];
-    targetNode = removeLastINode(inodesInPath);
+    final INode targetNode = removeLastINode(inodesInPath);
-    inodes[inodes.length - 2].updateModificationTime(mtime);
-    int filesRemoved = targetNode.collectSubtreeBlocksAndClear(collectedBlocks);
+    final INode[] inodes = inodesInPath.getINodes();
+    final Snapshot latestSnapshot = inodesInPath.getLatestSnapshot();
+    final INodeDirectory parent = (INodeDirectory)inodes[inodes.length - 2];
+    parent.updateModificationTime(mtime, latestSnapshot);
+
+    final INode snapshotCopy = parent.getChild(targetNode.getLocalNameBytes(),
+        latestSnapshot);
+    // if snapshotCopy == targetNode, it means that the file is also stored in
+    // a snapshot so that the block should not be removed.
+    final int filesRemoved = snapshotCopy == targetNode? 0
+        : targetNode.collectSubtreeBlocksAndClear(collectedBlocks);
-   * Replaces the specified INodeDirectory.
-   */
-  public void replaceINodeDirectory(String path, INodeDirectory oldnode,
-      INodeDirectory newnode) throws IOException {    
-    writeLock();
-    try {
-      unprotectedReplaceINode(path, oldnode, newnode);
-      // Note that the parent of the children of the oldnode is already updated
-    } finally {
-      writeUnlock();
-    }
-  }
-
-  /**
-      INodeFile newnode) throws IOException {    
+      INodeFile newnode, Snapshot latest) throws IOException {
-      unprotectedReplaceINodeFile(path, oldnode, newnode);
+      unprotectedReplaceINodeFile(path, oldnode, newnode, latest);
-      INode newnode) throws IOException {    
+      INode newnode, Snapshot latest) throws IOException {    
-    final INode removed = parent.removeChild(oldnode);
+    final INode removed = parent.removeChild(oldnode, latest);
-    parent.addChild(newnode, true);
-
+    parent.addChild(newnode, true, latest);
-      INodeFile newnode)
-      throws IOException, UnresolvedLinkException {
-    unprotectedReplaceINode(path, oldnode, newnode);
+      INodeFile newnode, Snapshot latest
+      ) throws IOException, UnresolvedLinkException {
+    unprotectedReplaceINode(path, oldnode, newnode, latest);
+      final Snapshot snapshot = inodesInPath.getPathSnapshot();
-                targetNode, needLocation)}, 0);
+                targetNode, needLocation, snapshot)}, 0);
-      int startChild = dirInode.nextChild(startAfter);
+      int startChild = INodeDirectory.nextChild(contents, startAfter);
-        listing[i] = createFileStatus(cur.getLocalNameBytes(), cur, needLocation);
+        listing[i] = createFileStatus(cur.getLocalNameBytes(), cur,
+            needLocation, snapshot);
-      INode targetNode = rootDir.getNode(srcs, resolveLink);
-      if (targetNode == null) {
-        return null;
-      }
-      else {
-        return createFileStatus(HdfsFileStatus.EMPTY_NAME, targetNode);
-      }
+      final INodesInPath inodesInPath = rootDir.getINodesInPath(srcs, resolveLink);
+      final INode i = inodesInPath.getINode(0);
+      return i == null? null: createFileStatus(HdfsFileStatus.EMPTY_NAME, i,
+          inodesInPath.getPathSnapshot());
-    byte[] path = components[components.length-1];
-    child.setLocalName(path);
+    child.setLocalName(components[components.length-1]);
-    final boolean added = ((INodeDirectory)inodes[pos-1]).addChild(child, true);
+    final boolean added = ((INodeDirectory)inodes[pos-1]).addChild(child, true,
+        inodesInPath.getLatestSnapshot());
-    INode removedNode = ((INodeDirectory)inodes[pos-1]).removeChild(inodes[pos]);
+    INode removedNode = ((INodeDirectory)inodes[pos-1]).removeChild(
+        inodes[pos], inodesInPath.getLatestSnapshot());
-    final INode[] inodes = rootDir.getMutableINodesInPath(srcs, true)
-        .getINodes();
-    INodeDirectory dirNode = INodeDirectory.valueOf(inodes[inodes.length-1], srcs);
+    final INodesInPath iip = rootDir.getMutableINodesInPath(srcs, true);
+    INodeDirectory dirNode = INodeDirectory.valueOf(iip.getLastINode(), srcs);
+      final Snapshot latest = iip.getLatestSnapshot();
-        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota);
-        if (!dirNode.isQuotaSet()) {
+        ((INodeDirectoryWithQuota)dirNode).setQuota(nsQuota, dsQuota, latest);
+        if (!dirNode.isQuotaSet() && latest == null) {
-          INodeDirectory newNode = new INodeDirectory(dirNode, true);
-          INodeDirectory parent = (INodeDirectory)inodes[inodes.length-2];
-          dirNode = newNode;
-          parent.replaceChild(newNode);
+          return dirNode.replaceSelf4INodeDirectory();
-        final INodeDirectoryWithQuota newNode = new INodeDirectoryWithQuota(
-            dirNode, true, nsQuota, dsQuota);
-        // non-root directory node; parent != null
-        INodeDirectory parent = (INodeDirectory)inodes[inodes.length-2];
-        dirNode = newNode;
-        parent.replaceChild(newNode);
+        return dirNode.replaceSelf4Quota(latest, oldNsQuota, oldDsQuota);
-  void setTimes(String src, INode inode, long mtime, long atime, boolean force) {
+  void setTimes(String src, INode inode, long mtime, long atime, boolean force,
+      Snapshot latest) {
-      status = unprotectedSetTimes(src, inode, mtime, atime, force);
+      status = unprotectedSetTimes(src, inode, mtime, atime, force, latest);
-    INode inode = getINode(src);
-    return unprotectedSetTimes(src, inode, mtime, atime, force);
+    final INodesInPath i = getINodesInPath(src); 
+    return unprotectedSetTimes(src, i.getLastINode(), mtime, atime, force,
+        i.getLatestSnapshot());
-                                      long atime, boolean force) {
+      long atime, boolean force, Snapshot latest) {
-      inode.setModificationTime(mtime);
+      inode.setModificationTime(mtime, latest);
-      long inodeTime = inode.getAccessTime();
+      long inodeTime = inode.getAccessTime(null);
-        inode.setAccessTime(atime);
+        inode.setAccessTime(atime, latest);
-      boolean needLocation) throws IOException {
+      boolean needLocation, Snapshot snapshot) throws IOException {
-      return createLocatedFileStatus(path, node);
+      return createLocatedFileStatus(path, node, snapshot);
-      return createFileStatus(path, node);
+      return createFileStatus(path, node, snapshot);
-   private HdfsFileStatus createFileStatus(byte[] path, INode node) {
+   private HdfsFileStatus createFileStatus(byte[] path, INode node,
+       Snapshot snapshot) {
-        node.getModificationTime(),
-        node.getAccessTime(),
-        node.getFsPermission(),
-        node.getUserName(),
-        node.getGroupName(),
+        node.getModificationTime(snapshot),
+        node.getAccessTime(snapshot),
+        node.getFsPermission(snapshot),
+        node.getUserName(snapshot),
+        node.getGroupName(snapshot),
-        byte[] path, INode node) throws IOException {
+        byte[] path, INode node, Snapshot snapshot) throws IOException {
-          node.getModificationTime(),
-          node.getAccessTime(),
-          node.getFsPermission(),
-          node.getUserName(),
-          node.getGroupName(),
+          node.getModificationTime(snapshot),
+          node.getAccessTime(snapshot),
+          node.getFsPermission(snapshot),
+          node.getUserName(snapshot),
+          node.getGroupName(snapshot),

MOV26 MOV25 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS60 INS21 INS41 INS60 INS60 INS60 INS60 INS60 INS21 INS60 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS83 INS43 INS59 INS32 INS42 INS5 INS5 MOV5 INS83 INS43 INS83 MOV43 INS59 INS83 INS43 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS43 INS83 MOV43 MOV59 INS32 INS83 MOV43 INS59 INS83 INS42 INS42 INS42 INS43 MOV43 INS42 INS83 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 MOV34 INS39 INS85 INS39 INS85 INS32 INS42 UPD42 INS42 INS32 INS32 INS42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 UPD42 INS32 INS42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS16 INS42 INS42 INS60 INS60 INS41 MOV2 UPD42 MOV42 UPD42 MOV32 MOV60 INS25 UPD42 UPD42 INS32 INS32 MOV21 MOV16 MOV16 INS43 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS34 MOV32 INS42 INS83 INS43 INS59 INS83 INS43 INS83 MOV43 INS59 INS16 INS32 INS32 INS32 INS83 UPD43 MOV62 INS8 MOV8 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 MOV42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS32 INS27 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 MOV21 INS25 INS41 INS42 MOV21 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 MOV34 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS34 UPD42 MOV42 MOV33 MOV42 MOV40 INS42 INS32 INS42 INS42 INS27 INS8 INS32 INS42 INS33 INS32 INS32 INS32 INS32 UPD42 MOV42 INS42 INS42 MOV38 INS27 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL2 DEL32 DEL21 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL27 DEL33 DEL41 DEL8 DEL32 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL85 DEL5 DEL42 DEL32 DEL42 DEL43 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL43 DEL42 DEL9 DEL14 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL9 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL34 DEL27 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25