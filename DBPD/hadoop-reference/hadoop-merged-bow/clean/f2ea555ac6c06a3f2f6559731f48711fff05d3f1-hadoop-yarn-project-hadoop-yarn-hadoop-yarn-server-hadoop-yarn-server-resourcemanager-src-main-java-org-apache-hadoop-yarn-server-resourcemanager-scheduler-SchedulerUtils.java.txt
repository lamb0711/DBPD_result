YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.
YARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.

+import java.io.IOException;
+import java.util.Set;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.yarn.api.records.QueueInfo;
-import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;
+import org.apache.hadoop.yarn.server.resourcemanager.nodelabels.RMNodeLabelsManager;
+import com.google.common.collect.Sets;
+
-      Resource maximumResource) throws InvalidResourceRequestException {
+      Resource maximumResource, String queueName, YarnScheduler scheduler)
+      throws InvalidResourceRequestException {
+    
+    // Get queue from scheduler
+    QueueInfo queueInfo = null;
+    try {
+      queueInfo = scheduler.getQueueInfo(queueName, false, false);
+    } catch (IOException e) {
+      // it is possible queue cannot get when queue mapping is set, just ignore
+      // the queueInfo here, and move forward
+    }
+
+    // check labels in the resource request.
+    String labelExp = resReq.getNodeLabelExpression();
+    
+    // if queue has default label expression, and RR doesn't have, use the
+    // default label expression of queue
+    if (labelExp == null && queueInfo != null) {
+      labelExp = queueInfo.getDefaultNodeLabelExpression();
+      resReq.setNodeLabelExpression(labelExp);
+    }
+    
+    if (labelExp != null && !labelExp.trim().isEmpty() && queueInfo != null) {
+      if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),
+          labelExp)) {
+        throw new InvalidResourceRequestException("Invalid resource request"
+            + ", queue="
+            + queueInfo.getQueueName()
+            + " doesn't have permission to access all labels "
+            + "in resource request. labelExpression of resource request="
+            + labelExp
+            + ". Queue labels="
+            + (queueInfo.getAccessibleNodeLabels() == null ? "" : StringUtils.join(queueInfo
+                .getAccessibleNodeLabels().iterator(), ',')));
+      }
+    }
+  }
+  
+  public static boolean checkQueueAccessToNode(Set<String> queueLabels,
+      Set<String> nodeLabels) {
+    // if queue's label is *, it can access any node
+    if (queueLabels != null && queueLabels.contains(RMNodeLabelsManager.ANY)) {
+      return true;
+    }
+    // any queue can access to a node without label
+    if (nodeLabels == null || nodeLabels.isEmpty()) {
+      return true;
+    }
+    // a queue can access to a node only if it contains any label of the node
+    if (queueLabels != null
+        && Sets.intersection(queueLabels, nodeLabels).size() > 0) {
+      return true;
+    }
+    // sorry, you cannot access
+    return false;
+  }
+  
+  public static void checkIfLabelInClusterNodeLabels(RMNodeLabelsManager mgr,
+      Set<String> labels) throws IOException {
+    if (mgr == null) {
+      if (labels != null && !labels.isEmpty()) {
+        throw new IOException("NodeLabelManager is null, please check");
+      }
+      return;
+    }
+
+    if (labels != null) {
+      for (String label : labels) {
+        if (!label.equals(RMNodeLabelsManager.ANY)
+            && !mgr.containsNodeLabel(label)) {
+          throw new IOException("NodeLabelManager doesn't include label = "
+              + label + ", please check.");
+        }
+      }
+    }
+  }
+  
+  public static boolean checkNodeLabelExpression(Set<String> nodeLabels,
+      String labelExpression) {
+    // empty label expression can only allocate on node with empty labels
+    if (labelExpression == null || labelExpression.trim().isEmpty()) {
+      if (!nodeLabels.isEmpty()) {
+        return false;
+      }
+    }
+
+    if (labelExpression != null) {
+      for (String str : labelExpression.split("&&")) {
+        if (!str.trim().isEmpty()
+            && (nodeLabels == null || !nodeLabels.contains(str.trim()))) {
+          return false;
+        }
+      }
+    }
+    return true;
+  }
+
+  public static boolean checkQueueLabelExpression(Set<String> queueLabels,
+      String labelExpression) {
+    if (queueLabels != null && queueLabels.contains(RMNodeLabelsManager.ANY)) {
+      return true;
+    }
+    // if label expression is empty, we can allocate container on any node
+    if (labelExpression == null) {
+      return true;
+    }
+    for (String str : labelExpression.split("&&")) {
+      if (!str.trim().isEmpty()
+          && (queueLabels == null || !queueLabels.contains(str.trim()))) {
+        return false;
+      }
+    }
+    return true;

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 INS31 INS31 INS31 INS31 INS44 INS44 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS43 INS42 INS60 INS54 INS60 INS25 INS25 INS74 INS42 INS74 INS42 INS25 INS25 INS25 INS41 INS43 INS42 INS74 INS42 INS42 INS25 INS25 INS74 INS42 INS43 INS42 INS25 INS25 INS41 INS74 INS42 INS43 INS42 INS25 INS25 INS70 INS41 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS43 INS43 INS43 INS27 INS8 INS27 INS8 INS27 INS8 INS9 INS42 INS43 INS43 INS27 INS8 INS27 INS8 INS43 INS43 INS42 INS27 INS8 INS27 INS8 INS9 INS43 INS43 INS42 INS27 INS8 INS27 INS8 INS44 INS32 INS8 INS9 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS32 INS27 INS27 INS21 INS21 INS27 INS27 INS25 INS42 INS42 INS42 INS42 INS27 INS32 INS41 INS27 INS32 INS41 INS27 INS27 INS41 INS42 INS42 INS42 INS33 INS25 INS41 INS42 INS33 INS70 INS42 INS42 INS27 INS32 INS25 INS42 INS33 INS70 INS42 INS42 INS27 INS32 INS41 INS42 INS33 INS41 INS43 INS42 INS42 INS42 INS45 INS25 INS7 INS43 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS7 INS32 INS27 INS38 INS42 INS33 INS38 INS8 INS42 INS33 INS42 INS42 INS40 INS9 INS42 INS33 INS42 INS42 INS9 INS42 INS33 INS32 INS34 INS9 INS27 INS8 INS44 INS42 INS8 INS42 INS33 INS32 INS42 INS38 INS8 INS44 INS32 INS8 INS42 INS33 INS42 INS42 INS40 INS9 INS9 INS42 INS27 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS53 INS32 INS42 INS27 INS38 INS53 INS43 INS42 INS25 INS42 INS42 INS32 INS41 INS43 INS42 INS42 INS42 INS45 INS25 INS38 INS36 INS41 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS14 INS42 INS27 INS8 INS42 INS42 INS9 INS42 INS27 INS8 INS32 INS27 INS9 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS45 INS38 INS38 INS53 INS38 INS36 INS41 INS32 INS42 INS27 INS38 INS42 INS27 INS32 INS45 INS45 INS42 INS45 INS36 INS42 INS32 INS32 INS14 INS32 INS27 INS9 INS42 INS42 INS42 INS33 INS32 INS45 INS45 INS42 INS42 INS16 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS27 INS32 INS42 INS27 INS38 INS42 INS42 INS32 INS27 INS45 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS32 INS33 INS42 INS42 INS32 INS13 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42