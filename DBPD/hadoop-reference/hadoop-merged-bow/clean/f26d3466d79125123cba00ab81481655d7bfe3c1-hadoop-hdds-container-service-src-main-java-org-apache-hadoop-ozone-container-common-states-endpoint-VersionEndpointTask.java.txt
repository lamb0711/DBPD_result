Create Version File in Datanode. Contributed by Bharat Viswanadham.

+import com.google.common.base.Preconditions;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.hdfs.server.datanode.StorageLocation;
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.common.InconsistentStorageStateException;
+import org.apache.hadoop.ozone.common.Storage;
+import org.apache.hadoop.ozone.container.common.DataNodeLayoutVersion;
+import org.apache.hadoop.ozone.container.common.helpers.DatanodeVersionFile;
+import org.apache.hadoop.ozone.container.ozoneimpl.OzoneContainer;
+import org.apache.hadoop.util.Time;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.File;
+import java.util.List;
+import java.util.Properties;
+  private final OzoneContainer datanodeContainerManager;
+  static final Logger LOG =
+      LoggerFactory.getLogger(VersionEndpointTask.class);
-      Configuration conf) {
+                             Configuration conf, OzoneContainer container) {
+    this.datanodeContainerManager = container;
-    try{
+    try {
-      rpcEndPoint.setVersion(VersionResponse.getFromProtobuf(versionResponse));
+      VersionResponse response = VersionResponse.getFromProtobuf(
+          versionResponse);
+      String scmUuid = response.getValue(OzoneConsts.SCM_ID);
+      Preconditions.checkState(!StringUtils.isBlank(scmUuid),
+          "Invalid SCM UuiD in the response.");
-      EndpointStateMachine.EndPointStates nextState =
-          rpcEndPoint.getState().getNextState();
+      rpcEndPoint.setVersion(response);
+      LOG.debug("scmUuid is {}", scmUuid);
+
+      List<StorageLocation> locations = datanodeContainerManager.getLocations();
+
+      for (StorageLocation location : locations) {
+        String path = location.getUri().getPath();
+        File parentPath = new File(path + File.separator + Storage
+            .STORAGE_DIR_HDDS + File.separator + scmUuid + File.separator +
+            Storage.STORAGE_DIR_CURRENT);
+        File versionFile = DatanodeVersionFile.getVersionFile(location,
+            scmUuid);
+        if (!parentPath.exists() && !parentPath.mkdirs()) {
+          LOG.error("Directory doesn't exist and cannot be created. Path: {}",
+              parentPath.toString());
+          rpcEndPoint.setState(EndpointStateMachine.EndPointStates.SHUTDOWN);
+          throw new IllegalArgumentException("Directory doesn't exist and " +
+              "cannot be created. " + parentPath.toString());
+        } else {
+          if (versionFile.exists()) {
+            Properties properties = DatanodeVersionFile.readFrom(versionFile);
+            DatanodeVersionFile.verifyScmUuid(properties.getProperty(
+                OzoneConsts.SCM_ID), scmUuid);
+            DatanodeVersionFile.verifyCreationTime(properties.getProperty(
+                OzoneConsts.CTIME));
+            DatanodeVersionFile.verifyLayOutVersion(properties.getProperty(
+                OzoneConsts.LAYOUTVERSION));
+          } else {
+            DatanodeVersionFile dnVersionFile = new DatanodeVersionFile(scmUuid,
+                Time.now(), DataNodeLayoutVersion.getLatestVersion()
+                .getVersion());
+            dnVersionFile.createVersionFile(versionFile);
+          }
+        }
+      }
+      EndpointStateMachine.EndPointStates nextState = rpcEndPoint.getState().
+          getNextState();
+    } catch (InconsistentStorageStateException ex) {
+      throw ex;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS57 INS42 INS7 INS12 INS43 INS22 INS42 INS60 INS60 INS21 INS21 INS60 INS70 INS44 INS8 INS42 INS52 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS74 INS59 INS44 INS42 INS8 INS43 INS42 INS53 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS38 INS45 INS42 INS42 INS42 INS45 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS38 INS38 INS21 INS21 INS53 INS25 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS14 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS40 INS43 INS27 INS42 INS42 INS60 INS21 INS21 INS21 INS60 INS21 INS42 INS42 INS42 INS45 INS45 INS32 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42