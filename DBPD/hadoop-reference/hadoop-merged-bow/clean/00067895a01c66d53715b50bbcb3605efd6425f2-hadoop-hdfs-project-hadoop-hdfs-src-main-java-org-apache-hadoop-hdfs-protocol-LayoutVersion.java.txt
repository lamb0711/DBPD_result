HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.EnumSet;
-import java.util.HashMap;
+import java.util.Comparator;
+import java.util.SortedSet;
+import java.util.TreeSet;
-   * Enums for features that change the layout version.
+   * The interface to be implemented by NameNode and DataNode layout features 
+   */
+  public interface LayoutFeature {
+    public FeatureInfo getInfo();
+  }
+
+  /**
+   * Enums for features that change the layout version before rolling
+   * upgrade is supported.
-   * its immediate predecessor, use the constructor where a spacific ancestor
+   * its immediate predecessor, use the constructor where a specific ancestor
-  public static enum Feature {
+  public static enum Feature implements LayoutFeature {
-    CACHING(-51, "Support for cache pools and path-based caching"),
-    ROLLING_UPGRADE_MARKER(-52, "Upgrade marker for rolling upgrade");
+    CACHING(-51, "Support for cache pools and path-based caching");
-    final int lv;
-    final int ancestorLV;
-    final String description;
-    final boolean reserved;
-    final Feature[] specialFeatures;
-    
+    private final FeatureInfo info;
+
-     *          verions
+     *        version
+      info = new FeatureInfo(lv, ancestorLV, description, reserved, features);
+    }
+    
+    @Override
+    public FeatureInfo getInfo() {
+      return info;
+    }
+  }
+  
+  /** Feature information. */
+  public static class FeatureInfo {
+    private final int lv;
+    private final int ancestorLV;
+    private final String description;
+    private final boolean reserved;
+    private final LayoutFeature[] specialFeatures;
+
+    public FeatureInfo(final int lv, final int ancestorLV, final String description,
+        boolean reserved, LayoutFeature... specialFeatures) {
-      specialFeatures = features;
+      this.specialFeatures = specialFeatures;
+    
+    public LayoutFeature[] getSpecialFeatures() {
+      return specialFeatures;
+    }
-  
-  // Build layout version and corresponding feature matrix
-  static final Map<Integer, EnumSet<Feature>>map = 
-    new HashMap<Integer, EnumSet<Feature>>();
-  
-  // Static initialization 
-  static {
-    initMap();
+
+  static class LayoutFeatureComparator implements Comparator<LayoutFeature> {
+    @Override
+    public int compare(LayoutFeature arg0, LayoutFeature arg1) {
+      return arg0.getInfo().getLayoutVersion()
+          - arg1.getInfo().getLayoutVersion();
+    }
-  
-  /**
-   * Initialize the map of a layout version and EnumSet of {@link Feature}s 
-   * supported.
-   */
-  private static void initMap() {
+ 
+  public static void updateMap(Map<Integer, SortedSet<LayoutFeature>> map,
+      LayoutFeature[] features) {
-    // LayoutVersion <-> EnumSet of all supported features in that LayoutVersion
-    for (Feature f : Feature.values()) {
-      EnumSet<Feature> ancestorSet = map.get(f.ancestorLV);
+    // LayoutVersion <-> Set of all supported features in that LayoutVersion
+    for (LayoutFeature f : features) {
+      final FeatureInfo info = f.getInfo();
+      SortedSet<LayoutFeature> ancestorSet = map.get(info.getAncestorLayoutVersion());
-        ancestorSet = EnumSet.noneOf(Feature.class); // Empty enum set
-        map.put(f.ancestorLV, ancestorSet);
+        // Empty set
+        ancestorSet = new TreeSet<LayoutFeature>(new LayoutFeatureComparator());
+        map.put(info.getAncestorLayoutVersion(), ancestorSet);
-      EnumSet<Feature> featureSet = EnumSet.copyOf(ancestorSet);
-      if (f.specialFeatures != null) {
-        for (Feature specialFeature : f.specialFeatures) {
+      SortedSet<LayoutFeature> featureSet = new TreeSet<LayoutFeature>(ancestorSet);
+      if (info.getSpecialFeatures() != null) {
+        for (LayoutFeature specialFeature : info.getSpecialFeatures()) {
-      map.put(f.lv, featureSet);
+      map.put(info.getLayoutVersion(), featureSet);
-  public static String getString() {
+  public String getString(Map<Integer, SortedSet<LayoutFeature>> map,
+      LayoutFeature[] values) {
-    for (Feature f : Feature.values()) {
+    for (LayoutFeature f : values) {
+      final FeatureInfo info = f.getInfo();
-          .append(f.lv).append(" (").
-      append(f.description).append(")\n");
+          .append(info.getLayoutVersion()).append(" (")
+          .append(info.getDescription()).append(")\n");
-    
+
-    for (Feature f : Feature.values()) {
-      buf.append(f.lv).append(": ").append(map.get(f.lv))
-          .append("\n");
+    for (LayoutFeature f : values) {
+      final FeatureInfo info = f.getInfo();
+      buf.append(info.getLayoutVersion()).append(": ")
+          .append(map.get(info.getLayoutVersion())).append("\n");
+   * @param map layout feature map
-  public static boolean supports(final Feature f, final int lv) {
-    final EnumSet<Feature> set =  map.get(lv);
+  public static boolean supports(Map<Integer, SortedSet<LayoutFeature>> map,
+      final LayoutFeature f, final int lv) {
+    final SortedSet<LayoutFeature> set =  map.get(lv);
-  public static int getCurrentLayoutVersion() {
-    Feature[] values = Feature.values();
+  public static int getCurrentLayoutVersion(
+      Map<Integer, SortedSet<LayoutFeature>> map, LayoutFeature[] values) {
-      if (!values[i].isReservedForOldRelease()) {
-        return values[i].lv;
+      final FeatureInfo info = values[i].getInfo();
+      if (!info.isReservedForOldRelease()) {
+        return info.getLayoutVersion();

MOV26 INS26 INS40 UPD40 UPD40 INS55 INS55 INS55 INS29 INS83 INS42 INS31 INS43 INS23 INS31 INS31 INS29 INS83 INS83 INS42 INS23 INS23 MOV23 INS23 INS23 MOV31 MOV31 MOV31 MOV31 MOV31 INS31 INS83 INS42 INS74 INS31 UPD83 UPD42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS65 INS83 INS43 INS42 INS42 INS83 MOV83 INS43 INS59 MOV29 INS42 INS44 INS44 INS44 INS44 MOV44 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS83 MOV83 INS39 MOV59 INS83 INS83 INS39 MOV59 INS83 INS83 INS83 INS39 MOV59 INS83 INS83 INS5 MOV59 INS83 UPD42 INS44 INS83 INS5 INS42 INS8 UPD43 MOV43 UPD43 MOV43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS74 INS42 INS5 INS42 INS74 INS42 INS5 INS42 INS65 INS74 INS42 UPD43 INS74 INS42 INS5 INS42 INS66 INS42 UPD66 INS66 UPD66 INS42 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS39 INS42 INS21 INS42 UPD42 MOV42 INS41 INS66 INS43 INS85 INS43 INS42 INS43 INS85 INS41 UPD42 UPD42 INS42 INS43 INS42 INS43 INS42 INS41 MOV43 MOV43 INS74 INS43 INS85 INS42 INS8 INS43 MOV43 INS74 INS43 INS85 INS42 INS42 INS8 INS42 INS66 INS43 INS43 INS74 UPD42 UPD74 INS43 INS43 INS74 INS43 INS85 UPD66 INS42 INS7 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS27 INS43 INS43 INS42 UPD43 INS60 MOV60 MOV25 MOV60 MOV25 MOV21 MOV21 INS42 INS43 INS43 INS42 UPD43 INS60 UPD43 INS60 MOV21 INS42 INS42 INS43 INS43 UPD43 UPD43 INS42 INS42 INS43 INS43 INS42 INS60 INS42 INS14 INS22 UPD42 INS32 INS32 INS42 INS42 UPD42 INS83 INS43 INS59 UPD74 UPD74 INS42 INS42 UPD42 INS83 INS43 INS59 UPD42 INS83 INS43 INS59 INS42 INS42 UPD42 UPD42 INS42 INS42 INS83 INS43 INS59 INS43 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 UPD43 UPD43 UPD43 UPD43 INS14 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 UPD42 INS74 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV2 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS43 INS43 UPD43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS14 INS42 INS42 INS42 INS42 UPD42 INS32 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 DEL42 DEL34 DEL38 DEL45 DEL72 DEL39 DEL23 DEL83 DEL39 DEL23 DEL83 DEL39 DEL23 DEL83 DEL43 DEL85 DEL5 DEL23 DEL42 DEL83 DEL43 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL23 DEL83 DEL32 DEL21 DEL8 DEL28 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL40 DEL42 DEL42 DEL43 DEL57 DEL32 DEL40 DEL42 DEL42 DEL42 DEL32 DEL40 DEL40 DEL40 DEL32 DEL8 DEL83 DEL42 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL32 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL22