YARN-9258. Support to specify allocation tags without constraint in distributed shell CLI. Contributed by Prabhu Joseph.

-   * in tag=numOfAllocations syntax.
+   * in tag(numOfAllocations) syntax.
-      st = new StringTokenizer(expr, String.valueOf(KV_SPLIT_DELIM));
+      st = new StringTokenizer(expr, String.valueOf(BRACKET_START));
-      if (st.countTokens() != 2) {
+      if (st.countTokens() != 2  || !this.expression.
+          endsWith(String.valueOf(BRACKET_END))) {
-                + " sourceTag=numOfAllocations syntax,"
-                + " but met " + expression);
+            + " sourceTag(numOfAllocations) syntax,"
+            + " but met " + expression);
-      String num = st.nextToken();
+      String str = st.nextToken();
+      String num = str.substring(0, str.length() - 1);
-     * Parses source tags from expression "sourceTags=numOfAllocations".
+     * Parses source tags from expression "sourceTags(numOfAllocations)".
-   * <p>Tag1=N1,P1:Tag2=N2,P2:...:TagN=Nn,Pn</p>
+   * <p>Tag1(N1),P1:Tag2(N2),P2:...:TagN(Nn),Pn</p>
-   * where <b>TagN=Nn</b> is a key value pair to determine the source
+   * where <b>TagN(Nn)</b> is a key value pair to determine the source
-   * <p>foo=3</p>
+   * <p>foo(3)</p>
+   *
+   * Optional when using NodeAttribute Constraint.
+   *
+   * and NodeAttribute Constraint such as
+   *
+   * <ul>
+   *   <li>yarn.rm.io/foo=true</li>
+   *   <li>java=1.7,1.8</li>
+   * </ul>
-      // each spec starts with sourceAllocationTag=numOfContainers and
+      // each spec starts with sourceAllocationTag(numOfContainers) and
-      // foo=4,Pn
-      String[] splitted = specStr.split(
-          String.valueOf(EXPRESSION_VAL_DELIM), 2);
+      // foo(4),Pn
-      final String exprs;
-      if (splitted.length == 1) {
-        // source tags not specified
-        exprs = splitted[0];
-        st = SourceTags.emptySourceTags();
-      } else if (splitted.length == 2) {
-        exprs = splitted[1];
-        String tagAlloc = splitted[0];
-        st = SourceTags.parseFrom(tagAlloc);
+      PlacementConstraint constraint;
+      String delimiter = new String(new char[]{'[', BRACKET_END, ']',
+          EXPRESSION_VAL_DELIM});
+      String[] splitted = specStr.split(delimiter, 2);
+      if (splitted.length == 2) {
+        st = SourceTags.parseFrom(splitted[0] + String.valueOf(BRACKET_END));
+        constraint = PlacementConstraintParser.parseExpression(splitted[1]).
+            build();
+      } else if (splitted.length == 1) {
+        // Either Node Attribute Constraint or Source Allocation Tag alone
+        NodeConstraintParser np = new NodeConstraintParser(specStr);
+        Optional<AbstractConstraint> constraintOptional =
+            Optional.ofNullable(np.tryParse());
+        if (constraintOptional.isPresent()) {
+          st = SourceTags.emptySourceTags();
+          constraint = constraintOptional.get().build();
+        } else {
+          st = SourceTags.parseFrom(specStr);
+          constraint = null;
+        }
-
-      AbstractConstraint constraint =
-          PlacementConstraintParser.parseExpression(exprs);
-
-      result.put(st, constraint.build());
+      result.put(st, constraint);
-      // Source tags, e.g foo=3, is optional for a node-attribute constraint,
+      // Source tags, e.g foo(3), is optional for a node-attribute constraint,

UPD66 INS60 UPD66 UPD66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 MOV60 INS27 INS43 INS59 UPD66 INS60 INS60 INS25 MOV27 INS38 UPD42 INS42 INS42 INS32 INS43 INS59 MOV43 INS59 MOV27 MOV8 MOV21 INS25 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS14 MOV27 INS8 MOV8 MOV42 UPD42 INS22 INS42 INS32 INS32 INS34 MOV43 INS3 UPD42 MOV42 INS60 MOV60 INS25 INS52 INS42 INS42 INS42 INS42 UPD45 INS42 INS42 INS5 INS4 INS42 INS32 INS43 INS59 INS74 INS32 MOV8 MOV21 INS8 INS39 INS85 INS13 INS42 INS13 INS42 INS27 INS32 INS42 INS42 INS42 INS14 INS43 MOV43 UPD42 INS42 INS42 INS21 INS21 MOV2 INS32 INS42 INS42 MOV2 INS43 INS42 INS42 UPD42 UPD42 INS32 INS7 INS7 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 INS32 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL83 DEL42 DEL59 DEL60 DEL25 DEL25 DEL42 DEL32