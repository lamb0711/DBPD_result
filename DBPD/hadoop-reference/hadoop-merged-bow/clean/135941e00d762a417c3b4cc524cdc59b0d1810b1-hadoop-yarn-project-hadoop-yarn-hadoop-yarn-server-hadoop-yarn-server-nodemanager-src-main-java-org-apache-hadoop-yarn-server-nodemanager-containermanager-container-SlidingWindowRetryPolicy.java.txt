YARN-8362.  Bugfix logic in container retries in node manager.
            Contributed by Chandni Singh

-    ContainerRetryContext containerRC = retryContext
-        .containerRetryContext;
+    ContainerRetryContext containerRC = retryContext.containerRetryContext;
-      if (containerRC.getMaxRetries() == ContainerRetryContext.RETRY_FOREVER) {
-        return true;
-      }
-      int pendingRetries = calculatePendingRetries(retryContext);
-      updateRetryContext(retryContext, pendingRetries);
-      return pendingRetries > 0;
+      return containerRC.getMaxRetries() == ContainerRetryContext.RETRY_FOREVER
+          || calculateRemainingRetries(retryContext) > 0;
-   * Calculates the pending number of retries.
-   * <p>
-   * When failuresValidityInterval is > 0, it also removes time entries from
-   * <code>restartTimes</code> which are outside the validity interval.
+   * Calculates the remaining number of retries.
-   * @return the pending retries.
+   * @return the remaining retries.
-  private int calculatePendingRetries(RetryContext retryContext) {
+  private int calculateRemainingRetries(RetryContext retryContext) {
+      int validFailuresCount = 0;
+      long currentTime = clock.getTime();
+      for (int i = retryContext.restartTimes.size() - 1; i >= 0; i--) {
+        long restartTime = retryContext.restartTimes.get(i);
+        if (currentTime - restartTime
+            <= containerRC.getFailuresValidityInterval()) {
+          validFailuresCount++;
+        } else {
+          break;
+        }
+      }
+      return containerRC.getMaxRetries() - validFailuresCount;
+    } else {
+      return retryContext.getRemainingRetries();
+    }
+  }
+
+  /**
+   * Updates remaining retries and the restart time when
+   * required in the retryContext.
+   * <p>
+   * When failuresValidityInterval is > 0, it also removes time entries from
+   * <code>restartTimes</code> which are outside the validity interval.
+   */
+  protected void updateRetryContext(RetryContext retryContext) {
+    if (retryContext.containerRetryContext.getFailuresValidityInterval() > 0) {
+      ContainerRetryContext containerRC = retryContext.containerRetryContext;
+
-      return containerRC.getMaxRetries() -
-          retryContext.getRestartTimes().size();
+      retryContext.setRemainingRetries(containerRC.getMaxRetries() -
+          retryContext.restartTimes.size());
+      retryContext.getRestartTimes().add(currentTime);
-      return retryContext.getRemainingRetries();
-    }
-  }
-
-  /**
-   * Updates remaining retries and the restart time when
-   * required in the retryContext.
-   */
-  private void updateRetryContext(RetryContext retryContext,
-      int pendingRetries) {
-    retryContext.setRemainingRetries(pendingRetries - 1);
-    if (retryContext.containerRetryContext.getFailuresValidityInterval()
-        > 0) {
-      retryContext.getRestartTimes().add(clock.getTime());
+      retryContext.remainingRetries--;

MOV31 UPD39 INS42 INS8 UPD83 UPD39 UPD42 INS65 INS65 INS60 INS25 UPD66 MOV66 UPD66 MOV66 INS43 INS59 MOV27 INS8 MOV8 UPD66 INS66 MOV27 INS8 INS41 INS42 INS42 INS40 INS60 INS60 INS24 MOV41 INS34 MOV60 INS21 INS21 INS21 INS27 INS39 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS37 MOV27 INS27 INS42 INS34 INS42 INS32 INS39 INS59 INS42 MOV34 INS42 INS60 INS25 INS42 INS42 INS42 INS27 MOV32 INS42 INS42 INS40 INS32 MOV34 UPD42 MOV42 INS42 INS42 INS27 INS39 INS59 INS27 INS8 INS8 INS32 INS32 INS42 INS42 UPD42 MOV42 MOV42 INS32 MOV34 INS42 INS32 INS27 INS32 INS21 INS10 INS42 INS42 INS40 INS42 INS40 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS37 INS42 DEL9 DEL41 DEL8 DEL25 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL27 DEL41 DEL65 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL66 DEL65