YARN-90. NodeManager should identify failed disks becoming good again. Contributed by Varun Vasudev

+import java.util.HashSet;
+import java.util.Set;
-      updateDirsAfterFailure();
+      updateDirsAfterTest();
+   * @return the local directories which have no disk space
+   */
+  public List<String> getDiskFullLocalDirs() {
+    return localDirs.getFullDirs();
+  }
+
+  /**
+   * @return the log directories that have no disk space
+   */
+  public List<String> getDiskFullLogDirs() {
+    return logDirs.getFullDirs();
+  }
+
+  /**
+   * Function to get the local dirs which should be considered when cleaning up
+   * resources. Contains the good local dirs and the local dirs that have reached
+   * the disk space limit
+   *
+   * @return the local dirs which should be considered for cleaning up
+   */
+  public List<String> getLocalDirsForCleanup() {
+    return DirectoryCollection.concat(localDirs.getGoodDirs(),
+        localDirs.getFullDirs());
+  }
+
+  /**
+   * Function to get the log dirs which should be considered when cleaning up
+   * resources. Contains the good log dirs and the log dirs that have reached
+   * the disk space limit
+   *
+   * @return the log dirs which should be considered for cleaning up
+   */
+  public List<String> getLogDirsForCleanup() {
+    return DirectoryCollection.concat(logDirs.getGoodDirs(),
+        logDirs.getFullDirs());
+  }
+
+  /**
+   * Function to generate a report on the state of the disks.
+   *
+   * @param listGoodDirs
+   *          flag to determine whether the report should report the state of
+   *          good dirs or failed dirs
-  public String getDisksHealthReport() {
+  public String getDisksHealthReport(boolean listGoodDirs) {
-    int numLocalDirs = localDirs.getGoodDirs().size()
-        + failedLocalDirsList.size();
-    int numLogDirs = logDirs.getGoodDirs().size() + failedLogDirsList.size();
-    if (!failedLocalDirsList.isEmpty()) {
-      report.append(failedLocalDirsList.size() + "/" + numLocalDirs
-          + " local-dirs turned bad: "
-          + StringUtils.join(",", failedLocalDirsList) + ";");
+    List<String> goodLocalDirsList = localDirs.getGoodDirs();
+    List<String> goodLogDirsList = logDirs.getGoodDirs();
+    int numLocalDirs = goodLocalDirsList.size() + failedLocalDirsList.size();
+    int numLogDirs = goodLogDirsList.size() + failedLogDirsList.size();
+    if (!listGoodDirs) {
+      if (!failedLocalDirsList.isEmpty()) {
+        report.append(failedLocalDirsList.size() + "/" + numLocalDirs
+            + " local-dirs are bad: "
+            + StringUtils.join(",", failedLocalDirsList) + "; ");
+      }
+      if (!failedLogDirsList.isEmpty()) {
+        report.append(failedLogDirsList.size() + "/" + numLogDirs
+            + " log-dirs are bad: " + StringUtils.join(",", failedLogDirsList));
+      }
+    } else {
+      report.append(goodLocalDirsList.size() + "/" + numLocalDirs
+          + " local-dirs are good: " + StringUtils.join(",", goodLocalDirsList)
+          + "; ");
+      report.append(goodLogDirsList.size() + "/" + numLogDirs
+          + " log-dirs are good: " + StringUtils.join(",", goodLogDirsList));
+
-    if (!failedLogDirsList.isEmpty()) {
-      report.append(failedLogDirsList.size() + "/" + numLogDirs
-          + " log-dirs turned bad: "
-          + StringUtils.join(",", failedLogDirsList));
-    }
+
+
-  private void updateDirsAfterFailure() {
-    LOG.info("Disk(s) failed. " + getDisksHealthReport());
+  private void updateDirsAfterTest() {
+
-      LOG.error("Most of the disks failed. " + getDisksHealthReport());
+      LOG.error("Most of the disks failed. " + getDisksHealthReport(false));
-  private void checkDirs() {
-      boolean newFailure = false;
-      if (localDirs.checkDirs()) {
-        newFailure = true;
-      }
-      if (logDirs.checkDirs()) {
-        newFailure = true;
-      }
+  private void logDiskStatus(boolean newDiskFailure, boolean diskTurnedGood) {
+    if (newDiskFailure) {
+      String report = getDisksHealthReport(false);
+      LOG.info("Disk(s) failed: " + report);
+    }
+    if (diskTurnedGood) {
+      String report = getDisksHealthReport(true);
+      LOG.info("Disk(s) turned good: " + report);
+    }
-      if (newFailure) {
-        updateDirsAfterFailure();
+  }
+
+  private void checkDirs() {
+    boolean disksStatusChange = false;
+    Set<String> failedLocalDirsPreCheck =
+        new HashSet<String>(localDirs.getFailedDirs());
+    Set<String> failedLogDirsPreCheck =
+        new HashSet<String>(logDirs.getFailedDirs());
+
+    if (localDirs.checkDirs()) {
+      disksStatusChange = true;
+    }
+    if (logDirs.checkDirs()) {
+      disksStatusChange = true;
+    }
+
+    Set<String> failedLocalDirsPostCheck =
+        new HashSet<String>(localDirs.getFailedDirs());
+    Set<String> failedLogDirsPostCheck =
+        new HashSet<String>(logDirs.getFailedDirs());
+
+    boolean disksFailed = false;
+    boolean disksTurnedGood = false;
+
+    disksFailed =
+        disksTurnedBad(failedLocalDirsPreCheck, failedLocalDirsPostCheck);
+    disksTurnedGood =
+        disksTurnedGood(failedLocalDirsPreCheck, failedLocalDirsPostCheck);
+
+    // skip check if we have new failed or good local dirs since we're going to
+    // log anyway
+    if (!disksFailed) {
+      disksFailed =
+          disksTurnedBad(failedLogDirsPreCheck, failedLogDirsPostCheck);
+    }
+    if (!disksTurnedGood) {
+      disksTurnedGood =
+          disksTurnedGood(failedLogDirsPreCheck, failedLogDirsPostCheck);
+    }
+
+    logDiskStatus(disksFailed, disksTurnedGood);
+
+    if (disksStatusChange) {
+      updateDirsAfterTest();
+    }
+
+    lastDisksCheckTime = System.currentTimeMillis();
+  }
+
+  private boolean disksTurnedBad(Set<String> preCheckFailedDirs,
+      Set<String> postCheckDirs) {
+    boolean disksFailed = false;
+    for (String dir : postCheckDirs) {
+      if (!preCheckFailedDirs.contains(dir)) {
+        disksFailed = true;
+        break;
-      lastDisksCheckTime = System.currentTimeMillis();
+    }
+    return disksFailed;
+  }
+
+  private boolean disksTurnedGood(Set<String> preCheckDirs,
+      Set<String> postCheckDirs) {
+    boolean disksTurnedGood = false;
+    for (String dir : preCheckDirs) {
+      if (!postCheckDirs.contains(dir)) {
+        disksTurnedGood = true;
+        break;
+      }
+    }
+    return disksTurnedGood;

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS8 INS44 UPD42 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS43 INS43 INS41 INS65 INS43 INS43 INS41 INS65 INS65 INS43 INS43 INS41 INS65 INS65 INS43 INS43 INS41 INS65 INS65 INS39 INS42 INS60 INS60 INS25 INS39 INS42 INS39 INS42 INS25 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS21 INS25 INS25 INS21 INS74 INS42 INS74 INS42 INS60 INS70 INS41 INS74 INS42 INS74 INS42 INS60 INS70 INS41 INS66 INS42 INS42 INS32 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS42 MOV32 INS66 INS66 INS66 INS66 INS42 INS42 MOV32 INS66 INS42 INS66 INS66 INS74 INS59 INS74 INS59 INS38 INS8 INS8 INS42 INS8 INS42 INS8 INS74 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS39 INS59 INS39 INS59 INS7 INS7 INS38 INS8 INS38 INS8 INS32 UPD42 INS43 INS43 INS43 INS43 INS39 INS59 INS44 INS42 INS8 INS42 INS43 INS43 INS43 INS43 INS39 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 MOV25 MOV25 INS21 INS21 INS60 INS21 INS60 INS21 UPD42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS9 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS21 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS9 INS43 INS42 INS25 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS38 INS8 INS42 INS38 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 UPD42 UPD42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS32 INS21 INS10 INS32 INS21 INS10 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS45 INS32 INS42 INS9 INS45 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS9 INS42 INS9 INS42 INS9 UPD45 UPD45 UPD45 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL32 DEL21