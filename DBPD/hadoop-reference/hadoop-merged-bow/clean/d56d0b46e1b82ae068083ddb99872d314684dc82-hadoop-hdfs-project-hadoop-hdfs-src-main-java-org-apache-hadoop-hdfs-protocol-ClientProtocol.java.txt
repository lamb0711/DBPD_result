commit correct version of HDFS-5121

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.CachePool;
-   *
-   * @param directives
-   *          A list of all the path cache directives we want to add.
-   * @return
-   *          An list where each element is either a path cache entry that was
-   *          added, or an IOException exception describing why the directive
-   *          could not be added.
+   * 
+   * @param directives A list of path cache directives to be added.
+   * @return A Fallible list, where each element is either a successfully addded
+   *         path cache entry, or an IOException describing why the directive
+   *         could not be added.
-  public List<Fallible<PathCacheEntry>>
-    addPathCacheDirectives(List<PathCacheDirective> directives)
-      throws IOException;
+  public List<Fallible<PathCacheEntry>> addPathCacheDirectives(
+      List<PathCacheDirective> directives) throws IOException;
-   *
-   * @param ids
-   *          A list of all the IDs we want to remove from the CacheManager.
-   * @return
-   *          An list where each element is either an ID that was removed,
-   *          or an IOException exception describing why the ID could not be
-   *          removed.
+   * 
+   * @param ids A list of all the entry IDs to be removed from the CacheManager.
+   * @return A Fallible list where each element is either a successfully removed
+   *         ID, or an IOException describing why the ID could not be removed.
-  @AtMostOnce
+  @Idempotent
-   * List cached paths on the server.
-   *
-   * @param prevId
-   *          The previous ID that we listed, or 0 if this is the first call
-   *          to listPathCacheEntries.
-   * @param pool
-   *          The pool ID to list.  If this is the empty string, all pool ids
-   *          will be listed.
-   * @param maxRepliesPerRequest
-   *          The maximum number of replies to make in each request.
-   * @return
-   *          A RemoteIterator from which you can get PathCacheEntry objects.
-   *          Requests will be made as needed.
+   * List the set of cached paths of a cache pool. Incrementally fetches results
+   * from the server.
+   * 
+   * @param prevId The last listed entry ID, or -1 if this is the first call to
+   *          listPathCacheEntries.
+   * @param pool The cache pool to list, or -1 to list all pools
+   * @param maxRepliesPerRequest The maximum number of entries to return per
+   *          request
+   * @return A RemoteIterator which returns PathCacheEntry objects.
-      String pool, int maxRepliesPerRequest) throws IOException;
-  
-  /**
-   * Modify a cache pool.
-   *
-   * @param req
-   *          The request to modify a cache pool.
-   * @throws IOException 
-   *          If the request could not be completed.
-   */
-  @AtMostOnce
-  public void addCachePool(CachePoolInfo info) throws IOException;
+      long poolId, int maxRepliesPerRequest) throws IOException;
-   * Modify a cache pool.
-   *
-   * @param req
-   *          The request to modify a cache pool.
-   * @throws IOException 
-   *          If the request could not be completed.
+   * Add a new cache pool.
+   * 
+   * @param info Description of the new cache pool
+   * @throws IOException If the request could not be completed.
-  @Idempotent
-  public void modifyCachePool(CachePoolInfo req) throws IOException;
-  
+  @AtMostOnce
+  public CachePool addCachePool(CachePoolInfo info) throws IOException;
+
+  /**
+   * Modify a cache pool, e.g. pool name, permissions, owner, group.
+   * 
+   * @param poolId ID of the cache pool to modify
+   * @param info New metadata for the cache pool
+   * @throws IOException If the request could not be completed.
+   */
+  @AtMostOnce
+  public void modifyCachePool(long poolId, CachePoolInfo info)
+      throws IOException;
+
-   *
-   * @param cachePoolName
-   *          Name of the cache pool to remove.
-   * @throws IOException 
-   *          if the cache pool did not exist, or could not be removed.
-   */
-  @AtMostOnce
-  public void removeCachePool(String cachePoolName) throws IOException;
-
-  /**
-   * List some cache pools.
-   *
-   * @param prevKey
-   *          The previous key we listed.  We will list keys greater than this.
-   * @param maxRepliesPerRequest
-   *          Maximum number of cache pools to list.
-   * @return A remote iterator from which you can get CachePool objects.
-   *          Requests will be made as needed.
-   * @throws IOException
-   *          If there was an error listing cache pools.
+   * 
+   * @param poolId ID of the cache pool to remove.
+   * @throws IOException if the cache pool did not exist, or could not be
+   *           removed.
-  public RemoteIterator<CachePoolInfo> listCachePools(String prevKey,
+  public void removeCachePool(long poolId) throws IOException;
+
+  /**
+   * List the set of cache pools. Incrementally fetches results from the server.
+   * 
+   * @param prevPoolId ID of the last pool listed, or -1 if this is the first
+   *          invocation of listCachePools
+   * @param maxRepliesPerRequest Maximum number of cache pools to return per
+   *          server request.
+   * @return A RemoteIterator which returns CachePool objects.
+   */
+  @Idempotent
+  public RemoteIterator<CachePool> listCachePools(long prevPoolId,

INS26 INS40 INS43 MOV78 INS44 MOV78 UPD74 UPD42 INS39 UPD42 INS42 INS65 INS39 INS42 UPD42 INS39 UPD42 UPD43 INS39 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 UPD42 UPD66 INS42 INS66 UPD66 UPD42 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 INS66 UPD66 INS66 UPD66 UPD42 DEL66 DEL66 DEL66 DEL42 DEL43 DEL66 DEL39 DEL66 DEL42 DEL43 DEL66 DEL42 DEL66 DEL65 DEL42 DEL43