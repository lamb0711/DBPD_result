YARN-2770. Added functionality to renew/cancel TimeLineDelegationToken. Contributed by Zhijie Shen

-import com.sun.jersey.api.client.filter.ClientFilter;
-import com.sun.jersey.api.client.ClientResponse;
-import com.sun.jersey.api.client.ClientRequest;
+import com.sun.jersey.api.client.ClientRequest;
+import com.sun.jersey.api.client.ClientResponse;
+import com.sun.jersey.api.client.filter.ClientFilter;
+
+    boolean isProxyAccess =
+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()
+        == UserGroupInformation.AuthenticationMethod.PROXY;
+    final String doAsUser = isProxyAccess ?
+        UserGroupInformation.getCurrentUser().getShortUserName() : null;
+    PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>> getDTAction =
+        new PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>>() {
+
+          @Override
+          public Token<TimelineDelegationTokenIdentifier> run()
+              throws Exception {
+            DelegationTokenAuthenticatedURL authUrl =
+                new DelegationTokenAuthenticatedURL(authenticator,
+                    connConfigurator);
+            return (Token) authUrl.getDelegationToken(
+                resURI.toURL(), token, renewer, doAsUser);
+          }
+        };
+    return (Token<TimelineDelegationTokenIdentifier>) operateDelegationToken(getDTAction);
+  }
+
+  @SuppressWarnings("unchecked")
+  @Override
+  public long renewDelegationToken(
+      final Token<TimelineDelegationTokenIdentifier> timelineDT)
+          throws IOException, YarnException {
+    boolean isProxyAccess =
+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()
+        == UserGroupInformation.AuthenticationMethod.PROXY;
+    final String doAsUser = isProxyAccess ?
+        UserGroupInformation.getCurrentUser().getShortUserName() : null;
+    PrivilegedExceptionAction<Long> renewDTAction =
+        new PrivilegedExceptionAction<Long>() {
+
+          @Override
+          public Long run()
+              throws Exception {
+            // If the timeline DT to renew is different than cached, replace it.
+            // Token to set every time for retry, because when exception happens,
+            // DelegationTokenAuthenticatedURL will reset it to null;
+            if (!timelineDT.equals(token.getDelegationToken())) {
+              token.setDelegationToken((Token) timelineDT);
+            }
+            DelegationTokenAuthenticatedURL authUrl =
+                new DelegationTokenAuthenticatedURL(authenticator,
+                    connConfigurator);
+            return authUrl
+                .renewDelegationToken(resURI.toURL(), token, doAsUser);
+          }
+        };
+    return (Long) operateDelegationToken(renewDTAction);
+  }
+
+  @SuppressWarnings("unchecked")
+  @Override
+  public void cancelDelegationToken(
+      final Token<TimelineDelegationTokenIdentifier> timelineDT)
+          throws IOException, YarnException {
+    boolean isProxyAccess =
+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()
+        == UserGroupInformation.AuthenticationMethod.PROXY;
+    final String doAsUser = isProxyAccess ?
+        UserGroupInformation.getCurrentUser().getShortUserName() : null;
+    PrivilegedExceptionAction<Void> cancelDTAction =
+        new PrivilegedExceptionAction<Void>() {
+
+          @Override
+          public Void run()
+              throws Exception {
+            // If the timeline DT to cancel is different than cached, replace it.
+            // Token to set every time for retry, because when exception happens,
+            // DelegationTokenAuthenticatedURL will reset it to null;
+            if (!timelineDT.equals(token.getDelegationToken())) {
+              token.setDelegationToken((Token) timelineDT);
+            }
+            DelegationTokenAuthenticatedURL authUrl =
+                new DelegationTokenAuthenticatedURL(authenticator,
+                    connConfigurator);
+            authUrl.cancelDelegationToken(resURI.toURL(), token, doAsUser);
+            return null;
+          }
+        };
+    operateDelegationToken(cancelDTAction);
+  }
+
+  private Object operateDelegationToken(
+      final PrivilegedExceptionAction<?> action)
+      throws IOException, YarnException {
+
-        final String doAsUser = isProxyAccess ?
-            UserGroupInformation.getCurrentUser().getShortUserName() : null;
-          return callerUGI.doAs(
-              new PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>>() {
-            @Override
-            public Token<TimelineDelegationTokenIdentifier> run() throws Exception {
-              DelegationTokenAuthenticatedURL authUrl =
-                  new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);
-              return (Token) authUrl.getDelegationToken(
-                  resURI.toURL(), token, renewer, doAsUser);
-            }
-          });
+          return callerUGI.doAs(action);
+
-    return (Token<TimelineDelegationTokenIdentifier>)
-        connectionRetry.retryOn(tokenRetryOp);
+    return connectionRetry.retryOn(tokenRetryOp);

MOV26 MOV26 MOV26 INS31 INS31 INS31 MOV79 MOV78 INS83 MOV74 INS42 MOV44 INS43 INS43 MOV8 INS79 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 UPD83 INS43 UPD42 INS44 INS42 INS42 INS60 MOV60 INS60 INS42 INS45 INS42 INS83 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS41 INS42 INS45 INS42 INS83 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS42 INS83 INS74 INS42 INS39 INS59 INS74 INS59 INS11 INS43 INS43 INS39 INS59 INS83 INS43 INS59 INS74 INS59 INS11 INS43 INS43 INS39 INS59 INS83 INS43 INS59 INS74 INS59 INS32 INS43 INS76 MOV32 INS42 INS27 INS43 INS74 INS42 MOV14 MOV74 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS16 INS43 INS43 INS42 INS14 INS43 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS16 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS40 INS42 INS43 INS43 UPD42 MOV42 UPD42 MOV42 INS32 INS40 INS42 INS32 INS33 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS33 INS42 INS42 INS74 INS1 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS31 INS32 INS42 INS32 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS25 INS60 INS41 INS42 INS42 INS42 INS25 INS60 INS21 INS41 INS38 INS8 INS43 INS59 INS32 INS38 INS8 INS43 INS59 INS32 INS33 INS8 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 DEL32 DEL11