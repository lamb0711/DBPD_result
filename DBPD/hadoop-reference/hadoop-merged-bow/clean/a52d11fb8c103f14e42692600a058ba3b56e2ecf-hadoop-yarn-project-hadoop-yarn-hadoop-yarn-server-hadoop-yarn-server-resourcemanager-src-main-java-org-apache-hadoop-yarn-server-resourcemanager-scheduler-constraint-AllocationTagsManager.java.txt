YARN-7613. Implement Basic algorithm for constraint based placement. (Panagiotis Garefalakis via asuresh)

+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
-  private Map<ApplicationId, NodeToCountedTags> perAppNodeMappings =
+  private Map<ApplicationId, TypeToCountedTags> perAppNodeMappings =
-  private Map<ApplicationId, NodeToCountedTags> perAppRackMappings =
+  private Map<ApplicationId, TypeToCountedTags> perAppRackMappings =
+  // Application's Temporary containers mapping
+  private Map<ApplicationId, Map<NodeId, Map<ContainerId, Set<String>>>>
+      appTempMappings = new HashMap<>();
-  private NodeToCountedTags<NodeId> globalNodeMapping = new NodeToCountedTags();
+  private TypeToCountedTags<NodeId> globalNodeMapping = new TypeToCountedTags();
-  private NodeToCountedTags<String> globalRackMapping = new NodeToCountedTags();
+  private TypeToCountedTags<String> globalRackMapping = new TypeToCountedTags();
-  static class NodeToCountedTags<T> {
+  static class TypeToCountedTags<T> {
-  Map<ApplicationId, NodeToCountedTags> getPerAppNodeMappings() {
+  Map<ApplicationId, TypeToCountedTags> getPerAppNodeMappings() {
-  Map<ApplicationId, NodeToCountedTags> getPerAppRackMappings() {
+  Map<ApplicationId, TypeToCountedTags> getPerAppRackMappings() {
-  NodeToCountedTags getGlobalNodeMapping() {
+  TypeToCountedTags getGlobalNodeMapping() {
-  NodeToCountedTags getGlobalRackMapping() {
+  TypeToCountedTags getGlobalRackMapping() {
+  @VisibleForTesting
+  public Map<NodeId, Map<ContainerId, Set<String>>> getAppTempMappings(
+      ApplicationId applicationId) {
+    return appTempMappings.get(applicationId);
+  }
+
+  //
+
+  /**
+   * Method adds a temporary fake-container tag to Node mapping.
+   * Used by the constrained placement algorithm to keep track of containers
+   * that are currently placed on nodes but are not yet allocated.
+   * @param nodeId
+   * @param applicationId
+   * @param allocationTags
+   */
+  public void addTempContainer(NodeId nodeId, ApplicationId applicationId,
+      Set<String> allocationTags) {
+    ContainerId tmpContainer = ContainerId.newContainerId(
+        ApplicationAttemptId.newInstance(applicationId, 1), System.nanoTime());
+
+    writeLock.lock();
+    try {
+      Map<NodeId, Map<ContainerId, Set<String>>> appTempMapping =
+          appTempMappings.computeIfAbsent(applicationId, k -> new HashMap<>());
+      Map<ContainerId, Set<String>> containerTempMapping =
+          appTempMapping.computeIfAbsent(nodeId, k -> new HashMap<>());
+      containerTempMapping.put(tmpContainer, allocationTags);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Added TEMP container=" + tmpContainer + " with tags=["
+            + StringUtils.join(allocationTags, ",") + "]");
+      }
+    } finally {
+      writeLock.unlock();
+    }
+
+    addContainer(nodeId, tmpContainer, allocationTags);
+  }
+
-   * @param applicationId  applicationId
-  public void addContainer(NodeId nodeId, ApplicationId applicationId,
-      ContainerId containerId, Set<String> allocationTags) {
+  public void addContainer(NodeId nodeId, ContainerId containerId,
+      Set<String> allocationTags) {
+    ApplicationId applicationId =
+        containerId.getApplicationAttemptId().getApplicationId();
-      NodeToCountedTags perAppTagsMapping = perAppNodeMappings
-          .computeIfAbsent(applicationId, k -> new NodeToCountedTags());
-      NodeToCountedTags perAppRackTagsMapping = perAppRackMappings
-          .computeIfAbsent(applicationId, k -> new NodeToCountedTags());
+      TypeToCountedTags perAppTagsMapping = perAppNodeMappings
+          .computeIfAbsent(applicationId, k -> new TypeToCountedTags());
+      TypeToCountedTags perAppRackTagsMapping = perAppRackMappings
+          .computeIfAbsent(applicationId, k -> new TypeToCountedTags());
-   * @param applicationId  applicationId
-  public void removeContainer(NodeId nodeId, ApplicationId applicationId,
+  public void removeContainer(NodeId nodeId,
+    ApplicationId applicationId =
+        containerId.getApplicationAttemptId().getApplicationId();
-      NodeToCountedTags perAppTagsMapping =
+      TypeToCountedTags perAppTagsMapping =
-      NodeToCountedTags perAppRackTagsMapping =
+      TypeToCountedTags perAppRackTagsMapping =
+   * Method removes temporary containers associated with an application
+   * Used by the placement algorithm to clean temporary tags at the end of
+   * a placement cycle.
+   * @param applicationId Application Id.
+   */
+  public void cleanTempContainers(ApplicationId applicationId) {
+
+    if (!appTempMappings.get(applicationId).isEmpty()) {
+      appTempMappings.get(applicationId).entrySet().stream().forEach(nodeE -> {
+        nodeE.getValue().entrySet().stream().forEach(containerE -> {
+          removeContainer(nodeE.getKey(), containerE.getKey(),
+              containerE.getValue());
+        });
+      });
+      writeLock.lock();
+      try {
+        appTempMappings.remove(applicationId);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Removed TEMP containers of app=" + applicationId);
+        }
+      } finally {
+        writeLock.unlock();
+      }
+    }
+  }
+
+
+  /**
-      NodeToCountedTags mapping;
+      TypeToCountedTags mapping;
-      NodeToCountedTags mapping;
+      TypeToCountedTags mapping;
-      NodeToCountedTags mapping;
+      TypeToCountedTags mapping;
-      NodeToCountedTags mapping;
+      TypeToCountedTags mapping;

INS26 MOV31 INS40 INS23 INS31 INS31 INS31 UPD74 UPD74 INS83 INS74 INS59 UPD74 INS74 UPD42 MOV78 UPD74 UPD42 MOV8 MOV78 UPD74 UPD42 MOV8 UPD43 UPD43 INS78 INS83 INS74 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 MOV44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD43 UPD43 INS43 INS43 INS74 INS42 INS14 UPD43 INS43 INS43 INS43 UPD43 UPD43 UPD42 UPD42 INS42 INS43 INS43 INS74 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS60 INS21 INS54 INS21 INS60 INS60 INS65 INS65 INS43 INS42 INS25 UPD42 UPD42 INS42 INS42 INS43 MOV43 INS74 INS74 UPD42 INS42 UPD43 INS42 INS42 UPD43 UPD42 UPD42 INS42 INS42 INS43 INS43 INS74 INS32 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS32 INS8 INS8 INS32 INS43 INS59 INS43 INS59 INS66 INS66 INS66 INS42 INS66 INS42 INS38 INS8 INS42 INS43 INS43 UPD74 MOV74 INS43 UPD42 UPD42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS21 INS21 INS54 INS60 INS60 MOV60 MOV60 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS74 INS59 INS74 INS59 INS32 INS32 INS8 INS32 INS32 INS42 UPD43 UPD43 INS32 INS42 UPD43 UPD43 INS32 INS42 INS32 INS32 INS8 INS8 INS43 MOV59 INS43 MOV59 UPD43 UPD43 UPD42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS21 INS25 INS21 INS42 INS42 UPD42 UPD42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS86 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS86 INS32 INS32 INS42 INS59 INS8 INS32 INS32 INS8 INS32 INS42 INS42 INS43 INS43 MOV59 INS14 INS42 INS42 MOV59 INS14 INS42 INS42 INS27 INS59 INS59 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS74 INS74 INS45 INS42 INS45 INS32 INS45 INS42 UPD43 INS42 UPD43 INS42 INS42 INS42 INS32 INS32 INS43 INS43 INS42 INS42 INS42 INS45 UPD42 UPD42 INS32 INS42 INS86 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS59 INS8 INS45 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL43 DEL60 DEL42 DEL43 DEL60