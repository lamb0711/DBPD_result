Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import java.util.Collections;
+import java.util.HashSet;
+import java.util.IdentityHashMap;
+import java.util.Map;
+import java.util.Set;
+import org.apache.hadoop.fs.StorageType;
+  @Override
+  public  Map<StorageType, StorageTypeStats> getStorageTypeStats() {
+    return stats.statsMap.get();
+  }
+
+
+    private final StorageTypeStatsMap statsMap = new StorageTypeStatsMap();
+
+      Set<StorageType> storageTypes = new HashSet<>();
+      for (DatanodeStorageInfo storageInfo : node.getStorageInfos()) {
+        statsMap.addStorage(storageInfo, node);
+        storageTypes.add(storageInfo.getStorageType());
+      }
+      for (StorageType storageType : storageTypes) {
+        statsMap.addNode(storageType, node);
+      }
+      Set<StorageType> storageTypes = new HashSet<>();
+      for (DatanodeStorageInfo storageInfo : node.getStorageInfos()) {
+        statsMap.subtractStorage(storageInfo, node);
+        storageTypes.add(storageInfo.getStorageType());
+      }
+      for (StorageType storageType : storageTypes) {
+        statsMap.subtractNode(storageType, node);
+      }
-}
+  /** StorageType specific statistics.
+   * For decommissioning/decommissioned nodes, only used capacity is counted.
+   */
+
+  static final class StorageTypeStatsMap {
+
+    private Map<StorageType, StorageTypeStats> storageTypeStatsMap =
+          new IdentityHashMap<>();
+
+    private StorageTypeStatsMap() {}
+
+    private StorageTypeStatsMap(StorageTypeStatsMap other) {
+      storageTypeStatsMap =
+          new IdentityHashMap<>(other.storageTypeStatsMap);
+      for (Map.Entry<StorageType, StorageTypeStats> entry :
+          storageTypeStatsMap.entrySet()) {
+        entry.setValue(new StorageTypeStats(entry.getValue()));
+      }
+    }
+
+    private Map<StorageType, StorageTypeStats> get() {
+      return Collections.unmodifiableMap(storageTypeStatsMap);
+    }
+
+    private void addNode(StorageType storageType,
+        final DatanodeDescriptor node) {
+      StorageTypeStats storageTypeStats =
+          storageTypeStatsMap.get(storageType);
+      if (storageTypeStats == null) {
+        storageTypeStats = new StorageTypeStats();
+        storageTypeStatsMap.put(storageType, storageTypeStats);
+      }
+      storageTypeStats.addNode(node);
+    }
+
+    private void addStorage(final DatanodeStorageInfo info,
+        final DatanodeDescriptor node) {
+      StorageTypeStats storageTypeStats =
+          storageTypeStatsMap.get(info.getStorageType());
+      if (storageTypeStats == null) {
+        storageTypeStats = new StorageTypeStats();
+        storageTypeStatsMap.put(info.getStorageType(), storageTypeStats);
+      }
+      storageTypeStats.addStorage(info, node);
+    }
+
+    private void subtractStorage(final DatanodeStorageInfo info,
+        final DatanodeDescriptor node) {
+      StorageTypeStats storageTypeStats =
+          storageTypeStatsMap.get(info.getStorageType());
+      if (storageTypeStats != null) {
+        storageTypeStats.subtractStorage(info, node);
+      }
+    }
+
+    private void subtractNode(StorageType storageType,
+        final DatanodeDescriptor node) {
+      StorageTypeStats storageTypeStats =
+          storageTypeStatsMap.get(storageType);
+      if (storageTypeStats != null) {
+        storageTypeStats.subtractNode(node);
+      }
+    }
+  }
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS55 INS78 INS83 INS74 INS42 INS8 INS23 INS29 INS83 INS83 INS42 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS43 INS43 INS43 INS41 INS83 INS83 INS43 INS59 INS65 INS83 INS74 INS59 INS83 INS42 INS8 INS83 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS60 INS70 INS70 INS60 INS70 INS70 INS66 INS66 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS70 INS43 INS43 INS43 INS41 INS43 INS42 INS83 INS43 INS42 INS60 INS25 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS25 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS25 INS43 INS42 INS83 INS43 INS42 INS60 INS25 INS40 INS42 INS43 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS74 INS59 INS44 INS32 INS8 INS44 INS42 INS8 INS42 INS42 INS42 INS74 INS42 INS7 INS44 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS21 INS43 INS42 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS21 INS43 INS42 INS21 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS74 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS32 INS32 INS42 INS32 INS42 INS74 INS40 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42