HADOOP-16005. NativeAzureFileSystem does not support setXAttr.

Contributed by Clemens Wolff.

+import java.util.Hashtable;
+import org.apache.hadoop.fs.XAttrSetFlag;
+   * Set the value of an attribute for a path.
+   *
+   * @param path The path on which to set the attribute
+   * @param name The attribute to set
+   * @param value The byte value of the attribute to set (encoded in latin-1)
+   * @param flag The mode in which to set the attribute
+   * @throws IOException If there was an issue setting the attribute on Azure
+   * @throws IllegalArgumentException If name is null or empty or if value is null
+   */
+  @Override
+  public void setXAttr(final Path path, final String name, final byte[] value, final EnumSet<XAttrSetFlag> flag)
+      throws IOException {
+    LOG.debug("AzureBlobFileSystem.setXAttr path: {}", path);
+
+    if (name == null || name.isEmpty() || value == null) {
+      throw new IllegalArgumentException("A valid name and value must be specified.");
+    }
+
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.READ_WRITE, qualifiedPath);
+
+    try {
+      Hashtable<String, String> properties = abfsStore.getPathStatus(path);
+      String xAttrName = ensureValidAttributeName(name);
+      boolean xAttrExists = properties.containsKey(xAttrName);
+      XAttrSetFlag.validate(name, xAttrExists, flag);
+
+      String xAttrValue = abfsStore.decodeAttribute(value);
+      properties.put(xAttrName, xAttrValue);
+      abfsStore.setPathProperties(path, properties);
+    } catch (AzureBlobFileSystemException ex) {
+      checkException(path, ex);
+    }
+  }
+
+  /**
+   * Get the value of an attribute for a path.
+   *
+   * @param path The path on which to get the attribute
+   * @param name The attribute to get
+   * @return The bytes of the attribute's value (encoded in latin-1)
+   *         or null if the attribute does not exist
+   * @throws IOException If there was an issue getting the attribute from Azure
+   * @throws IllegalArgumentException If name is null or empty
+   */
+  @Override
+  public byte[] getXAttr(final Path path, final String name)
+      throws IOException {
+    LOG.debug("AzureBlobFileSystem.getXAttr path: {}", path);
+
+    if (name == null || name.isEmpty()) {
+      throw new IllegalArgumentException("A valid name must be specified.");
+    }
+
+    Path qualifiedPath = makeQualified(path);
+    performAbfsAuthCheck(FsAction.READ, qualifiedPath);
+
+    byte[] value = null;
+    try {
+      Hashtable<String, String> properties = abfsStore.getPathStatus(path);
+      String xAttrName = ensureValidAttributeName(name);
+      if (properties.containsKey(xAttrName)) {
+        String xAttrValue = properties.get(xAttrName);
+        value = abfsStore.encodeAttribute(xAttrValue);
+      }
+    } catch (AzureBlobFileSystemException ex) {
+      checkException(path, ex);
+    }
+    return value;
+  }
+
+  private static String ensureValidAttributeName(String attribute) {
+    // to avoid HTTP 400 Bad Request, InvalidPropertyName
+    return attribute.replace('.', '_');
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS5 INS42 INS83 INS74 INS42 INS42 INS21 INS25 INS60 INS21 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS39 INS85 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS25 INS60 INS21 INS60 INS54 INS41 INS42 INS43 INS42 INS41 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS39 INS85 INS43 INS43 INS32 INS27 INS8 INS43 INS59 INS32 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS27 INS8 INS43 INS59 INS32 INS5 INS59 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS27 INS27 INS53 INS42 INS42 INS32 INS42 INS40 INS42 INS60 INS60 INS60 INS21 INS60 INS21 INS21 INS44 INS8 INS42 INS42 INS45 INS42 INS27 INS32 INS53 INS42 INS42 INS32 INS42 INS40 INS42 INS39 INS85 INS42 INS33 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS13 INS13 INS27 INS32 INS42 INS33 INS14 INS42 INS42 INS74 INS59 INS43 INS59 INS39 INS59 INS32 INS43 INS59 INS32 INS32 INS43 INS42 INS21 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS74 INS59 INS43 INS59 INS32 INS8 INS43 INS42 INS21 INS42 INS33 INS42 INS42 INS43 INS45 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS45 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42