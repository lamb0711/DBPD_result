MAPREDUCE-5583. Ability to limit running map and reduce tasks. Contributed by Jason Lowe.

+import java.util.Iterator;
+import org.apache.hadoop.yarn.api.records.ResourceRequest.ResourceRequestComparator;
+  private static final ResourceRequestComparator RESOURCE_REQUEST_COMPARATOR =
+      new ResourceRequestComparator();
-      new org.apache.hadoop.yarn.api.records.ResourceRequest.ResourceRequestComparator());
+      RESOURCE_REQUEST_COMPARATOR);
+
+  private final Map<ResourceRequest,ResourceRequest> requestLimits =
+      new TreeMap<ResourceRequest,ResourceRequest>(RESOURCE_REQUEST_COMPARATOR);
+  private final Set<ResourceRequest> requestLimitsToUpdate =
+      new TreeSet<ResourceRequest>(RESOURCE_REQUEST_COMPARATOR);
+
+    applyRequestLimits();
+    int numCompletedContainers =
+        allocateResponse.getCompletedContainersStatuses().size();
-          + " finishedContainers="
-          + allocateResponse.getCompletedContainersStatuses().size()
+          + " finishedContainers=" + numCompletedContainers
+    if (numCompletedContainers > 0) {
+      // re-send limited requests when a container completes to trigger asking
+      // for more containers
+      requestLimitsToUpdate.addAll(requestLimits.keySet());
+    }
+
+  private void applyRequestLimits() {
+    Iterator<ResourceRequest> iter = requestLimits.values().iterator();
+    while (iter.hasNext()) {
+      ResourceRequest reqLimit = iter.next();
+      int limit = reqLimit.getNumContainers();
+      Map<String, Map<Resource, ResourceRequest>> remoteRequests =
+          remoteRequestsTable.get(reqLimit.getPriority());
+      Map<Resource, ResourceRequest> reqMap = (remoteRequests != null)
+          ? remoteRequests.get(ResourceRequest.ANY) : null;
+      ResourceRequest req = (reqMap != null)
+          ? reqMap.get(reqLimit.getCapability()) : null;
+      if (req == null) {
+        continue;
+      }
+      // update an existing ask or send a new one if updating
+      if (ask.remove(req) || requestLimitsToUpdate.contains(req)) {
+        ResourceRequest newReq = req.getNumContainers() > limit
+            ? reqLimit : req;
+        ask.add(newReq);
+        LOG.info("Applying ask limit of " + newReq.getNumContainers()
+            + " for priority:" + reqLimit.getPriority()
+            + " and capability:" + reqLimit.getCapability());
+      }
+      if (limit == Integer.MAX_VALUE) {
+        iter.remove();
+      }
+    }
+    requestLimitsToUpdate.clear();
+  }
+
+    requestLimitsToUpdate.addAll(requestLimits.keySet());
-    // numContainers. So exisintg values must be replaced explicitly
-    if(ask.contains(remoteRequest)) {
-      ask.remove(remoteRequest);
-    }
+    // numContainers. So existing values must be replaced explicitly
+    ask.remove(remoteRequest);
+  protected void setRequestLimit(Priority priority, Resource capability,
+      int limit) {
+    if (limit < 0) {
+      limit = Integer.MAX_VALUE;
+    }
+    ResourceRequest newReqLimit = ResourceRequest.newInstance(priority,
+        ResourceRequest.ANY, capability, limit);
+    ResourceRequest oldReqLimit = requestLimits.put(newReqLimit, newReqLimit);
+    if (oldReqLimit == null || oldReqLimit.getNumContainers() < limit) {
+      requestLimitsToUpdate.add(newReqLimit);
+    }
+  }
+

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS39 INS42 INS8 MOV8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS21 INS60 INS25 INS60 INS61 INS21 INS21 MOV21 INS43 INS42 INS43 INS42 INS39 INS42 INS25 INS60 INS60 INS25 INS43 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS32 INS39 INS59 INS27 INS8 INS74 INS59 INS32 INS8 INS32 INS32 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS43 INS43 INS43 INS43 INS42 INS42 MOV32 INS42 INS34 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS7 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS74 INS42 INS32 INS43 INS43 INS43 INS42 INS16 INS42 INS42 INS16 INS42 INS33 INS18 INS32 INS32 INS60 INS21 INS21 INS42 INS40 INS21 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS36 INS32 INS33 INS36 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS40 INS27 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS27 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL43 DEL14 DEL42 DEL42 DEL42 DEL32 DEL25 DEL8