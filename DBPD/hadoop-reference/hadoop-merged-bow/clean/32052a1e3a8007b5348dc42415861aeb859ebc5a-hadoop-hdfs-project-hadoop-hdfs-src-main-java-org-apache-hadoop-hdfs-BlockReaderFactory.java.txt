HDFS-4352. Encapsulate arguments to BlockReaderFactory in a class. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1428729 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.conf.Configuration;
-   * @see #newBlockReader(Conf, Socket, String, ExtendedBlock, Token, long, long, int, boolean, String)
+   * Parameters for creating a BlockReader.
+   *
+   * Before you add something to here: think about whether it's already included
+   * in Conf (or should be).
-  public static BlockReader newBlockReader(
-      Configuration conf,
-      Socket sock, String file,
-      ExtendedBlock block, Token<BlockTokenIdentifier> blockToken, 
-      long startOffset, long len, DataEncryptionKey encryptionKey)
-          throws IOException {
-    int bufferSize = conf.getInt(DFSConfigKeys.IO_FILE_BUFFER_SIZE_KEY,
-        DFSConfigKeys.IO_FILE_BUFFER_SIZE_DEFAULT);
-    return newBlockReader(new Conf(conf),
-        sock, file, block, blockToken, startOffset,
-        len, bufferSize, true, "", encryptionKey, null);
+  @InterfaceAudience.Private
+  public static class Params {
+    private final Conf conf;
+    private Socket socket = null;
+    private String file = null;
+    private ExtendedBlock block = null;
+    private Token<BlockTokenIdentifier> blockToken = null;
+    private long startOffset = 0;
+    private long len = -1;
+    private int bufferSize;
+    private boolean verifyChecksum = true;
+    private boolean shortCircuitLocalReads = false;
+    private String clientName = "";
+    private DataEncryptionKey encryptionKey = null;
+    private IOStreamPair ioStreamPair = null;
+
+    public Params(Conf conf) {
+      this.conf = conf;
+      this.bufferSize = conf.ioBufferSize;
+    }
+    public Conf getConf() {
+      return conf;
+    }
+    public Socket getSocket() {
+      return socket;
+    }
+    public Params setSocket(Socket socket) {
+      this.socket = socket;
+      return this;
+    }
+    public String getFile() {
+      return file;
+    }
+    public Params setFile(String file) {
+      this.file = file;
+      return this;
+    }
+    public ExtendedBlock getBlock() {
+      return block;
+    }
+    public Params setBlock(ExtendedBlock block) {
+      this.block = block;
+      return this;
+    }
+    public Token<BlockTokenIdentifier> getBlockToken() {
+      return blockToken;
+    }
+    public Params setBlockToken(Token<BlockTokenIdentifier> blockToken) {
+      this.blockToken = blockToken;
+      return this;
+    }
+    public long getStartOffset() {
+      return startOffset;
+    }
+    public Params setStartOffset(long startOffset) {
+      this.startOffset = startOffset;
+      return this;
+    }
+    public long getLen() {
+      return len;
+    }
+    public Params setLen(long len) {
+      this.len = len;
+      return this;
+    }
+    public int getBufferSize() {
+      return bufferSize;
+    }
+    public Params setBufferSize(int bufferSize) {
+      this.bufferSize = bufferSize;
+      return this;
+    }
+    public boolean getVerifyChecksum() {
+      return verifyChecksum;
+    }
+    public Params setVerifyChecksum(boolean verifyChecksum) {
+      this.verifyChecksum = verifyChecksum;
+      return this;
+    }
+    public boolean getShortCircuitLocalReads() {
+      return shortCircuitLocalReads;
+    }
+    public Params setShortCircuitLocalReads(boolean on) {
+      this.shortCircuitLocalReads = on;
+      return this;
+    }
+    public String getClientName() {
+      return clientName;
+    }
+    public Params setClientName(String clientName) {
+      this.clientName = clientName;
+      return this;
+    }
+    public Params setEncryptionKey(DataEncryptionKey encryptionKey) {
+      this.encryptionKey = encryptionKey;
+      return this;
+    }
+    public DataEncryptionKey getEncryptionKey() {
+      return encryptionKey;
+    }
+    public IOStreamPair getIoStreamPair() {
+      return ioStreamPair;
+    }
+    public Params setIoStreamPair(IOStreamPair ioStreamPair) {
+      this.ioStreamPair = ioStreamPair;
+      return this;
+    }
-   * @param conf the DFSClient configuration
-   * @param sock  An established Socket to the DN. The BlockReader will not close it normally
-   * @param file  File location
-   * @param block  The block object
-   * @param blockToken  The block token for security
-   * @param startOffset  The read offset, relative to block head
-   * @param len  The number of bytes to read
-   * @param bufferSize  The IO buffer size (not the client buffer size)
-   * @param verifyChecksum  Whether to verify checksum
-   * @param clientName  Client name
-   * @return New BlockReader instance, or null on error.
+   * @param params            The parameters
+   *
+   * @return                  New BlockReader instance
+   * @throws IOException      If there was an error creating the BlockReader
-  public static BlockReader newBlockReader(
-                                     Conf conf,
-                                     Socket sock, String file,
-                                     ExtendedBlock block, 
-                                     Token<BlockTokenIdentifier> blockToken,
-                                     long startOffset, long len,
-                                     int bufferSize, boolean verifyChecksum,
-                                     String clientName,
-                                     DataEncryptionKey encryptionKey,
-                                     IOStreamPair ioStreams)
-                                     throws IOException {
-    
-    if (conf.useLegacyBlockReader) {
-      if (encryptionKey != null) {
+  public static BlockReader newBlockReader(Params params) throws IOException {
+    if (params.getConf().useLegacyBlockReader) {
+      if (params.getEncryptionKey() != null) {
-      return RemoteBlockReader.newBlockReader(
-          sock, file, block, blockToken, startOffset, len, bufferSize, verifyChecksum, clientName);
+      return RemoteBlockReader.newBlockReader(params);
-      if (ioStreams == null) {
-        ioStreams = new IOStreamPair(NetUtils.getInputStream(sock),
-            NetUtils.getOutputStream(sock, HdfsServerConstants.WRITE_TIMEOUT));
-        if (encryptionKey != null) {
+      Socket sock = params.getSocket();
+      if (params.getIoStreamPair() == null) {
+        params.setIoStreamPair(new IOStreamPair(NetUtils.getInputStream(sock),
+            NetUtils.getOutputStream(sock, HdfsServerConstants.WRITE_TIMEOUT)));
+        if (params.getEncryptionKey() != null) {
-                  ioStreams.out, ioStreams.in, encryptionKey);
-          ioStreams = encryptedStreams;
+                  params.getIoStreamPair().out, params.getIoStreamPair().in, 
+                  params.getEncryptionKey());
+          params.setIoStreamPair(encryptedStreams);
-      
-      return RemoteBlockReader2.newBlockReader(
-          sock, file, block, blockToken, startOffset, len, bufferSize,
-          verifyChecksum, clientName, encryptionKey, ioStreams);
+      return RemoteBlockReader2.newBlockReader(params);

INS55 INS31 INS29 INS78 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 MOV79 MOV83 MOV83 MOV43 MOV42 MOV44 MOV43 MOV8 INS65 INS40 INS83 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 MOV44 INS8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS74 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 INS83 UPD43 MOV43 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 MOV65 MOV65 UPD65 MOV65 UPD65 MOV65 UPD43 UPD42 INS66 INS66 INS66 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 MOV43 INS43 INS42 INS33 INS42 INS34 INS42 INS38 INS42 INS42 INS9 INS42 INS9 UPD42 MOV42 INS42 INS45 UPD42 MOV42 INS42 INS33 INS42 INS42 INS33 INS21 INS21 INS41 INS41 UPD42 MOV42 UPD42 INS21 INS41 INS41 UPD42 MOV42 INS21 INS41 INS41 INS42 INS21 INS41 MOV43 MOV43 INS41 INS42 INS21 INS41 INS41 INS42 INS21 INS41 INS41 UPD42 INS21 INS41 INS41 INS42 INS21 INS41 INS41 INS42 INS21 INS41 INS41 INS42 INS39 INS42 INS21 INS41 INS41 INS42 INS21 INS41 INS42 INS21 INS41 INS42 INS41 INS42 INS41 INS42 MOV43 INS42 INS21 INS41 UPD42 UPD66 UPD66 INS42 UPD66 UPD42 INS22 INS8 INS8 INS42 INS34 INS7 INS7 INS42 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS7 INS52 INS42 INS42 INS7 INS52 INS32 INS42 MOV25 INS41 INS60 MOV25 MOV41 INS22 INS42 INS22 INS40 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS59 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 MOV14 INS32 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS22 INS22 INS32 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL7 DEL42 DEL40 DEL40 DEL42 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL8 DEL42 DEL69 DEL69 DEL69 DEL69 DEL69 DEL39 DEL69 DEL39 DEL69 DEL39 DEL69 DEL39 DEL69 DEL69 DEL68 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL45 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL44 DEL31