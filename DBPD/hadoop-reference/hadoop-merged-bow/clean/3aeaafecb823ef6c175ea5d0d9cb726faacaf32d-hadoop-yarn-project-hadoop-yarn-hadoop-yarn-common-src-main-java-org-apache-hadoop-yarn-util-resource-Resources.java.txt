YARN-6788. [YARN-3926] Improve performance of resource profile branch
(Contributed by Sunil Govindan via Daniel Templeton)

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.yarn.api.records.impl.BaseResource;
-import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.hadoop.yarn.util.Records;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.Arrays;
+  private static final Log LOG =
+      LogFactory.getLog(Resources.class);
+
-  static class FixedValueResource extends Resource {
+  static class FixedValueResource extends BaseResource {
-    private Map<String, ResourceInformation> resources;
-      resources = initResourceMap();
+      initResourceMap();
-    public Map<String, ResourceInformation> getResources() {
-      return Collections.unmodifiableMap(this.resources);
-    }
-
-    @Override
-    public ResourceInformation getResourceInformation(String resource)
-        throws YarnException {
-      if (resources.containsKey(resource)) {
-        ResourceInformation value = this.resources.get(resource);
-        ResourceInformation ret = ResourceInformation.newInstance(value);
-        ret.setValue(resourceValue);
-        return ret;
-      }
-      throw new YarnException("" + resource + " not found");
-    }
-
-    @Override
-    public Long getResourceValue(String resource) throws YarnException {
-      if (resources.containsKey(resource)) {
-        return resourceValue;
-      }
-      throw new YarnException("" + resource + " not found");
-    }
-
-    @Override
-    private Map<String, ResourceInformation> initResourceMap() {
-      Map<String, ResourceInformation> tmp = new HashMap<>();
-      Map<String, ResourceInformation> types = ResourceUtils.getResourceTypes();
+    private void initResourceMap() {
+      ResourceInformation[] types = ResourceUtils.getResourceTypesArray();
-        for (Map.Entry<String, ResourceInformation> entry : types.entrySet()) {
-          tmp.put(entry.getKey(),
-              ResourceInformation.newInstance(entry.getValue()));
-          tmp.get(entry.getKey()).setValue(resourceValue);
+        resources = new ResourceInformation[types.length];
+        readOnlyResources = new ResourceInformation[types.length];
+        for (int index = 0; index < types.length; index++) {
+          resources[index] = ResourceInformation.newInstance(types[index]);
+          resources[index].setValue(resourceValue);
+
+          // this is a fix for getVirtualCores returning an int
+          if (resourceValue > Integer.MAX_VALUE && ResourceInformation.VCORES
+              .getName().equals(resources[index].getName())) {
+            resources[index].setValue((long) Integer.MAX_VALUE);
+          }
-      // this is a fix for getVirtualCores returning an int
-      if (resourceValue > Integer.MAX_VALUE) {
-        tmp.get(ResourceInformation.VCORES.getName())
-            .setValue((long) Integer.MAX_VALUE);
-      }
-      return tmp;
+      readOnlyResources = Arrays.copyOf(resources, resources.length);
-
-    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : lhs.getResources()) {
+      String name = entry.getName();
-        ResourceInformation lhsValue = entry.getValue();
-        long convertedRhs = UnitsConversionUtil
-            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
-                rhsValue.getValue());
+        ResourceInformation lhsValue = entry;
+
+        long convertedRhs = (rhsValue.getUnits().equals(lhsValue.getUnits()))
+            ? rhsValue.getValue()
+            : UnitsConversionUtil.convert(rhsValue.getUnits(),
+                lhsValue.getUnits(), rhsValue.getValue());
-      } catch (YarnException ye) {
+      } catch (ResourceNotFoundException ye) {
+        LOG.warn("Resource is missing:" + ye.getMessage());
-    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : lhs.getResources()) {
+      String name = entry.getName();
-        ResourceInformation lhsValue = entry.getValue();
-        long convertedRhs = UnitsConversionUtil
-            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
-                rhsValue.getValue());
+        ResourceInformation lhsValue = entry;
+
+        long convertedRhs = (rhsValue.getUnits().equals(lhsValue.getUnits()))
+            ? rhsValue.getValue()
+            : UnitsConversionUtil.convert(rhsValue.getUnits(),
+                lhsValue.getUnits(), rhsValue.getValue());
-      } catch (YarnException ye) {
+      } catch (ResourceNotFoundException ye) {
+        LOG.warn("Resource is missing:" + ye.getMessage());
-    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
-      ResourceInformation lhsValue = entry.getValue();
+    for (ResourceInformation entry : lhs.getResources()) {
+      String name = entry.getName();
+      ResourceInformation lhsValue = entry;
-    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : lhs.getResources()) {
+      String name = entry.getName();
-        ResourceInformation lhsValue = entry.getValue();
-        long convertedRhs = (long) (UnitsConversionUtil
-            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
-                rhsValue.getValue()) * by);
+        ResourceInformation lhsValue = entry;
+
+        long convertedRhs = (long) (((rhsValue.getUnits()
+            .equals(lhsValue.getUnits()))
+                ? rhsValue.getValue()
+                : UnitsConversionUtil.convert(rhsValue.getUnits(),
+                    lhsValue.getUnits(), rhsValue.getValue()))
+            * by);
-      } catch (YarnException ye) {
+      } catch (ResourceNotFoundException ye) {
+        LOG.warn("Resource is missing:" + ye.getMessage());
-    for (Map.Entry<String, ResourceInformation> entry : out.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
-      ResourceInformation lhsValue = entry.getValue();
+    for (ResourceInformation entry : out.getResources()) {
+      String name = entry.getName();
+      ResourceInformation lhsValue = entry;
-    for (Map.Entry<String, ResourceInformation> entry : smaller.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : smaller.getResources()) {
+      String name = entry.getName();
-        ResourceInformation lhsValue = entry.getValue();
-        long convertedRhs = UnitsConversionUtil
-            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
-                rhsValue.getValue());
+        ResourceInformation lhsValue = entry;
+
+        long convertedRhs = (rhsValue.getUnits().equals(lhsValue.getUnits()))
+            ? rhsValue.getValue()
+            : UnitsConversionUtil.convert(rhsValue.getUnits(),
+                lhsValue.getUnits(), rhsValue.getValue());
-      } catch (YarnException ye) {
+      } catch (ResourceNotFoundException ye) {
+        LOG.warn("Resource is missing:" + ye.getMessage());
-    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : lhs.getResources()) {
+      String name = entry.getName();
-        ResourceInformation lhsValue = entry.getValue();
-        long convertedRhs = UnitsConversionUtil
-            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
-                rhsValue.getValue());
+        ResourceInformation lhsValue = entry;
+
+        long convertedRhs = (rhsValue.getUnits().equals(lhsValue.getUnits()))
+            ? rhsValue.getValue()
+            : UnitsConversionUtil.convert(rhsValue.getUnits(),
+                lhsValue.getUnits(), rhsValue.getValue());
-      } catch (YarnException ye) {
+      } catch (ResourceNotFoundException ye) {
+        LOG.warn("Resource is missing:" + ye.getMessage());
-    for (Map.Entry<String, ResourceInformation> entry : lhs.getResources()
-        .entrySet()) {
-      String name = entry.getKey();
+    for (ResourceInformation entry : lhs.getResources()) {
+      String name = entry.getName();
-        ResourceInformation lhsValue = entry.getValue();
-        long convertedRhs = UnitsConversionUtil
-            .convert(rhsValue.getUnits(), lhsValue.getUnits(),
-                rhsValue.getValue());
+        ResourceInformation lhsValue = entry;
+
+        long convertedRhs = (rhsValue.getUnits().equals(lhsValue.getUnits()))
+            ? rhsValue.getValue()
+            : UnitsConversionUtil.convert(rhsValue.getUnits(),
+                lhsValue.getUnits(), rhsValue.getValue());
-      } catch (YarnException ye) {
+      } catch (ResourceNotFoundException ye) {
+        LOG.warn("Resource is missing:" + ye.getMessage());

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS83 INS83 INS83 INS43 INS59 UPD43 INS31 INS42 INS42 INS32 UPD42 INS83 INS39 UPD42 MOV42 INS8 INS42 INS42 INS57 MOV60 INS25 MOV21 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS43 MOV32 INS5 MOV27 INS8 INS7 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS42 MOV43 INS85 UPD42 MOV21 INS21 INS24 INS42 INS32 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS42 UPD42 INS7 INS7 INS58 INS27 INS37 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 MOV60 MOV60 INS42 MOV60 INS42 MOV60 MOV60 INS42 INS3 INS42 INS3 INS39 INS59 UPD42 MOV42 INS40 INS42 INS21 INS21 INS25 UPD42 MOV43 UPD43 INS21 UPD42 MOV43 UPD43 INS21 UPD42 UPD42 MOV43 UPD43 INS21 UPD42 UPD42 MOV43 UPD43 INS21 UPD42 MOV43 UPD43 INS21 UPD42 UPD43 INS21 INS5 INS40 INS5 INS40 INS42 INS34 INS7 INS32 INS27 INS8 INS42 INS16 UPD42 INS32 INS42 INS16 UPD42 INS32 INS42 INS11 UPD42 INS32 INS42 INS16 UPD42 INS32 INS42 INS16 UPD42 INS32 INS42 INS16 UPD42 INS32 MOV43 INS85 MOV43 INS85 INS2 INS32 INS2 INS42 UPD42 MOV42 MOV27 INS32 MOV21 INS36 INS32 MOV32 INS42 INS42 INS27 INS36 INS32 MOV32 INS42 INS42 INS27 INS39 INS36 INS42 INS42 INS27 INS36 INS32 MOV32 INS42 INS42 INS27 INS36 INS32 MOV32 INS42 INS42 INS27 INS36 INS32 MOV32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS2 INS42 INS42 MOV32 UPD42 MOV42 MOV32 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS45 INS32 INS27 INS45 INS32 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS2 UPD42 MOV42 INS2 MOV11 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS32 MOV32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL7 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL32 DEL39 DEL42 DEL27 DEL36 DEL11 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL42 DEL32