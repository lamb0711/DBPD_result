Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.HttpURLConnection;
-import java.net.HttpURLConnection;
+import java.security.GeneralSecurityException;
+import java.util.Arrays;
+import javax.net.ssl.HttpsURLConnection;
+import org.apache.hadoop.mapreduce.MRConfig;
+import org.apache.hadoop.security.ssl.SSLFactory;
-@SuppressWarnings({"deprecation"})
+import com.google.common.annotations.VisibleForTesting;
+
+  private JobConf job;
+
+  private static boolean sslShuffle;
+  private static SSLFactory sslFactory;
+
+    this.job = job;
+
+    synchronized (Fetcher.class) {
+      sslShuffle = job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY,
+                                  MRConfig.SHUFFLE_SSL_ENABLED_DEFAULT);
+      if (sslShuffle && sslFactory == null) {
+        sslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, job);
+        try {
+          sslFactory.init();
+        } catch (Exception ex) {
+          sslFactory.destroy();
+          throw new RuntimeException(ex);
+        }
+      }
+    }
+    if (sslFactory != null) {
+      sslFactory.destroy();
+    }
+  @VisibleForTesting
+  protected HttpURLConnection openConnection(URL url) throws IOException {
+    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+    if (sslShuffle) {
+      HttpsURLConnection httpsConn = (HttpsURLConnection) conn;
+      try {
+        httpsConn.setSSLSocketFactory(sslFactory.createSSLSocketFactory());
+      } catch (GeneralSecurityException ex) {
+        throw new IOException(ex);
+      }
+      httpsConn.setHostnameVerifier(sslFactory.getHostnameVerifier());
+    }
+    return conn;
+  }
+  
-  private void copyFromHost(MapHost host) throws IOException {
+  @VisibleForTesting
+  protected void copyFromHost(MapHost host) throws IOException {
-    LOG.debug("Fetcher " + id + " going to fetch from " + host);
-    for (TaskAttemptID tmp: maps) {
-      LOG.debug(tmp);
+    if(LOG.isDebugEnabled()) {
+      LOG.debug("Fetcher " + id + " going to fetch from " + host + " for: "
+        + maps);
-      HttpURLConnection connection = (HttpURLConnection)url.openConnection();
+      HttpURLConnection connection = openConnection(url);
-      // On any error, good becomes false and we exit after putting back
-      // the remaining maps to the yet_to_be_fetched list
-      boolean good = true;
-      while (!remaining.isEmpty() && good) {
-        good = copyMapOutput(host, input, remaining);
+      // On any error, faildTasks is not null and we exit
+      // after putting back the remaining maps to the 
+      // yet_to_be_fetched list and marking the failed tasks.
+      TaskAttemptID[] failedTasks = null;
+      while (!remaining.isEmpty() && failedTasks == null) {
+        failedTasks = copyMapOutput(host, input, remaining);
+      }
+      
+      if(failedTasks != null && failedTasks.length > 0) {
+        LOG.warn("copyMapOutput failed for tasks "+Arrays.toString(failedTasks));
+        for(TaskAttemptID left: failedTasks) {
+          scheduler.copyFailed(left, host, true);
+        }
-      if (good && !remaining.isEmpty()) {
+      if (failedTasks == null && !remaining.isEmpty()) {
-      
-   }
+  }
-  private boolean copyMapOutput(MapHost host,
+  private static TaskAttemptID[] EMPTY_ATTEMPT_ID_ARRAY = new TaskAttemptID[0];
+  
+  private TaskAttemptID[] copyMapOutput(MapHost host,
-        return false;
+        //Don't know which one was bad, so consider all of them as bad
+        return remaining.toArray(new TaskAttemptID[remaining.size()]);
-        return false;
+        return new TaskAttemptID[] {mapId};
-      LOG.debug("header: " + mapId + ", len: " + compressedLength + 
-               ", decomp len: " + decompressedLength);
+      if(LOG.isDebugEnabled()) {
+        LOG.debug("header: " + mapId + ", len: " + compressedLength + 
+            ", decomp len: " + decompressedLength);
+      }
-        return false;
+        //Not an error but wait to process data.
+        return EMPTY_ATTEMPT_ID_ARRAY;
-      return true;
+      return null;
-        return false;
+        if(mapId == null) {
+          return remaining.toArray(new TaskAttemptID[remaining.size()]);
+        } else {
+          return new TaskAttemptID[] {mapId};
+        }
-      LOG.info("Failed to shuffle output of " + mapId + 
+      LOG.warn("Failed to shuffle output of " + mapId + 
-      scheduler.copyFailed(mapId, host, true);
-      return false;
+      return new TaskAttemptID[] {mapId};
-      new IFileInputStream(input, compressedLength);
+      new IFileInputStream(input, compressedLength, job);

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS23 INS23 INS23 INS31 INS23 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 UPD83 INS83 INS83 INS5 INS59 INS5 INS42 INS42 INS42 INS42 INS42 INS21 INS51 INS25 INS42 INS42 INS43 INS42 INS42 MOV60 INS25 INS41 INS42 INS25 INS43 INS85 INS42 INS3 INS43 INS85 INS7 INS57 INS8 INS27 INS8 INS42 INS42 INS8 INS42 INS32 INS8 INS42 INS5 INS34 INS42 MOV43 INS22 INS42 INS43 INS21 INS25 INS42 INS33 INS21 UPD42 INS60 INS54 INS21 INS42 INS42 MOV21 INS60 INS60 INS25 INS43 INS85 INS25 INS52 INS42 INS42 INS7 INS27 INS8 INS32 INS43 INS59 INS8 INS12 INS32 INS43 INS59 INS5 INS59 INS27 INS8 INS42 INS32 INS8 INS33 INS41 MOV43 INS42 INS42 INS32 INS42 INS27 INS21 INS54 INS42 INS42 INS42 INS42 INS11 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 INS85 INS42 INS33 INS27 INS27 INS27 INS21 INS70 INS27 INS42 INS42 MOV21 INS3 INS42 INS42 INS40 INS40 INS42 INS33 INS7 INS8 INS12 INS43 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS45 INS42 INS42 INS42 UPD42 MOV42 INS33 INS42 INS33 INS40 INS34 INS32 INS44 INS42 INS8 UPD42 MOV42 INS33 INS3 INS42 INS25 UPD42 INS5 INS4 INS42 INS14 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS14 UPD42 INS42 INS42 INS27 INS43 INS42 INS21 INS32 INS5 INS4 INS27 INS8 INS8 INS43 INS85 INS42 INS43 INS40 INS42 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS43 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS3 INS43 INS85 INS42 INS42 INS33 MOV41 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS5 INS32 INS42 INS32 INS3 INS42 INS42 INS43 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS3 INS5 INS4 INS42 INS42 INS5 INS32 INS43 INS85 INS42 INS43 INS85 INS42 INS42 INS42 INS42 DEL42 DEL45 DEL4 DEL79 DEL42 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL9 DEL9 DEL9 DEL9 DEL9 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL9 DEL41