HDFS-10880. Federation Mount Table State Store internal API. Contributed by Jason Kace and Inigo Goiri.

(cherry picked from commit 58b97df661441150d35abd44b3a8606206b46441)

+import org.apache.hadoop.hdfs.server.federation.resolver.order.DestinationOrder;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
- * a path in the global/federated namespace.
+ * a path in the global/federated name space.
+  private static final Logger LOG = LoggerFactory.getLogger(PathLocation.class);
+
+
-  /** Remote paths in the target namespaces. */
+  /** Remote paths in the target name spaces. */
-
-  /** List of name spaces present. */
-  private final Set<String> namespaces;
+  /** Order for the destinations. */
+  private final DestinationOrder destOrder;
-   * @param namespaces Unique identifier representing the combination of
-   *          name spaces present in the destination list.
+   * @param order Order of the locations.
-      String source, List<RemoteLocation> dest, Set<String> nss) {
+      String source, List<RemoteLocation> dest, DestinationOrder order) {
-    this.destinations = dest;
-    this.namespaces = nss;
+    this.destinations = Collections.unmodifiableList(dest);
+    this.destOrder = order;
+  }
+
+  /**
+   * Create a new PathLocation with default HASH order.
+   *
+   * @param source Source path in the global name space.
+   * @param dest Destinations of the mount table entry.
+   */
+  public PathLocation(String source, List<RemoteLocation> dest) {
+    this(source, dest, DestinationOrder.HASH);
-  public PathLocation(PathLocation other) {
+  public PathLocation(final PathLocation other) {
-    this.destinations = new LinkedList<RemoteLocation>(other.destinations);
-    this.namespaces = new HashSet<String>(other.namespaces);
+    this.destinations = Collections.unmodifiableList(other.destinations);
+    this.destOrder = other.destOrder;
+  }
+
+  /**
+   * Create a path location from another path with the destinations sorted.
+   *
+   * @param other Other path location to copy from.
+   * @param firstNsId Identifier of the namespace to place first.
+   */
+  public PathLocation(PathLocation other, String firstNsId) {
+    this.sourcePath = other.sourcePath;
+    this.destOrder = other.destOrder;
+    this.destinations = orderedNamespaces(other.destinations, firstNsId);
+  }
+
+  /**
+   * Prioritize a location/destination by its name space/nameserviceId.
+   * This destination might be used by other threads, so the source is not
+   * modifiable.
+   *
+   * @param original List of destinations to order.
+   * @param nsId The name space/nameserviceID to prioritize.
+   * @return Prioritized list of detinations that cannot be modified.
+   */
+  private static List<RemoteLocation> orderedNamespaces(
+      final List<RemoteLocation> original, final String nsId) {
+    if (original.size() <= 1) {
+      return original;
+    }
+
+    LinkedList<RemoteLocation> newDestinations = new LinkedList<>();
+    boolean found = false;
+    for (RemoteLocation dest : original) {
+      if (dest.getNameserviceId().equals(nsId)) {
+        found = true;
+        newDestinations.addFirst(dest);
+      } else {
+        newDestinations.add(dest);
+      }
+    }
+
+    if (!found) {
+      LOG.debug("Cannot find location with namespace {} in {}",
+          nsId, original);
+    }
+    return Collections.unmodifiableList(newDestinations);
-   * Get the list of subclusters defined for the destinations.
+   * Get the subclusters defined for the destinations.
+   *
+   * @return Set containing the subclusters.
-    return Collections.unmodifiableSet(this.namespaces);
+    Set<String> namespaces = new HashSet<>();
+    List<RemoteLocation> locations = this.getDestinations();
+    for (RemoteLocation location : locations) {
+      String nsId = location.getNameserviceId();
+      namespaces.add(nsId);
+    }
+    return namespaces;
-    RemoteLocation loc = getDefaultLocation();
-    return loc.getNameserviceId() + "->" + loc.getDest();
+    StringBuilder sb = new StringBuilder();
+    for (RemoteLocation destination : this.destinations) {
+      String nsId = destination.getNameserviceId();
+      String path = destination.getDest();
+      if (sb.length() > 0) {
+        sb.append(",");
+      }
+      sb.append(nsId + "->" + path);
+    }
+    if (this.destinations.size() > 1) {
+      sb.append(" [");
+      sb.append(this.destOrder.toString());
+      sb.append("]");
+    }
+    return sb.toString();
+   * Get the order for the destinations.
+   *
+   * @return Order for the destinations.
+   */
+  public DestinationOrder getDestinationOrder() {
+    return this.destOrder;
+  }
+
+  /**

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 MOV29 MOV83 MOV83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS8 INS44 INS29 INS83 INS42 MOV44 INS44 INS8 INS83 UPD83 INS74 UPD42 INS44 INS44 INS29 INS83 MOV74 INS42 INS8 INS29 INS83 INS43 INS42 INS8 UPD66 INS42 INS42 INS32 UPD42 MOV42 INS42 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS17 INS83 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS21 INS21 INS21 INS65 UPD65 INS65 INS65 INS43 INS43 INS83 INS74 INS42 INS83 MOV43 INS42 INS25 INS60 INS60 INS70 INS25 INS65 INS65 INS60 INS60 INS70 INS41 INS60 INS70 INS25 INS41 INS65 INS65 INS42 INS41 INS42 INS42 INS57 UPD66 UPD66 UPD42 UPD66 INS42 INS66 INS42 INS66 INS42 INS66 MOV42 INS43 INS43 INS42 INS42 INS40 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS7 INS7 INS66 INS66 INS66 INS42 UPD66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS27 INS8 MOV74 INS59 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS66 INS66 MOV74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS59 INS44 INS22 INS8 INS27 INS8 INS32 INS66 INS66 INS22 INS43 INS32 UPD42 INS42 INS42 INS32 INS40 INS22 INS40 INS22 INS40 INS22 INS32 INS42 INS42 INS32 INS34 INS41 INS42 INS14 INS42 INS9 MOV43 INS42 INS25 INS42 INS21 UPD42 INS42 INS42 MOV14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS42 INS42 INS14 INS43 INS42 INS52 INS42 MOV60 INS60 INS25 INS21 INS32 INS34 INS21 INS21 INS21 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS40 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS74 INS32 INS8 INS8 INS32 UPD74 INS42 INS42 INS52 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS43 INS43 INS59 INS27 INS8 INS32 INS22 INS42 INS32 INS32 INS32 INS43 INS32 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS32 INS34 INS21 INS42 INS42 INS27 INS52 INS42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS7 INS32 INS32 INS42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 MOV45 INS42 INS22 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS52 INS42 DEL43 DEL43 DEL74 DEL42 DEL59 DEL23 DEL66 DEL42 DEL42 DEL40 DEL14 DEL52 DEL42 DEL22 DEL40 DEL32 DEL42 DEL32 DEL27 DEL41