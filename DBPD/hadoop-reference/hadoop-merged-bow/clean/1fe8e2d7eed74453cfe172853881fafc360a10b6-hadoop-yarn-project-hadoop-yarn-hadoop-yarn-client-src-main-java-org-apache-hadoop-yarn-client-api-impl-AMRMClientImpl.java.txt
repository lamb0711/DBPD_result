YARN-521. Augment AM - RM client module to be able to request containers only at specific locations (Sandy Ryza via bikas)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503526 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import org.apache.hadoop.yarn.client.api.InvalidContainerRequestException;
+  private static final List<String> ANY_LIST =
+      Collections.singletonList(ResourceRequest.ANY);
-        Resource capability) {
+        Resource capability, boolean relaxLocality) {
+      remoteRequest.setRelaxLocality(relaxLocality);
-    Preconditions.checkArgument(progressIndicator > 0,
+    Preconditions.checkArgument(progressIndicator >= 0,
-    Set<String> allRacks = new HashSet<String>();
+    Set<String> dedupedRacks = new HashSet<String>();
-      allRacks.addAll(req.getRacks());
-      if(req.getRacks().size() != allRacks.size()) {
+      dedupedRacks.addAll(req.getRacks());
+      if(req.getRacks().size() != dedupedRacks.size()) {
-    allRacks.addAll(resolveRacks(req.getNodes()));
-    
+    Set<String> inferredRacks = resolveRacks(req.getNodes());
+    inferredRacks.removeAll(dedupedRacks);
+
+    // check that specific and non-specific requests cannot be mixed within a
+    // priority
+    checkLocalityRelaxationConflict(req.getPriority(), ANY_LIST,
+        req.getRelaxLocality());
+    // check that specific rack cannot be mixed with specific node within a 
+    // priority. If node and its rack are both specified then they must be 
+    // in the same request.
+    // For explicitly requested racks, we set locality relaxation to true
+    checkLocalityRelaxationConflict(req.getPriority(), dedupedRacks, true);
+    checkLocalityRelaxationConflict(req.getPriority(), inferredRacks,
+        req.getRelaxLocality());
+
-        // Ensure node requests are accompanied by requests for
-        // corresponding rack
-            req.getContainerCount(), req);
+            req.getContainerCount(), req, true);
-    for (String rack : allRacks) {
+    for (String rack : dedupedRacks) {
-          req.getContainerCount(), req);
+          req.getContainerCount(), req, true);
+    }
+
+    // Ensure node requests are accompanied by requests for
+    // corresponding rack
+    for (String rack : inferredRacks) {
+      addResourceRequest(req.getPriority(), rack, req.getCapability(),
+          req.getContainerCount(), req, req.getRelaxLocality());
-        req.getContainerCount(), req);
+        req.getContainerCount(), req, req.getRelaxLocality());
-    if (resourceRequestInfo != null) {
+    if (resourceRequestInfo != null &&
+        !resourceRequestInfo.containerRequests.isEmpty()) {
-      if(canFit(entry.getKey(), capability)) {
+      if (canFit(entry.getKey(), capability) &&
+          !entry.getValue().containerRequests.isEmpty()) {
+  /**
+   * ContainerRequests with locality relaxation cannot be made at the same
+   * priority as ContainerRequests without locality relaxation.
+   */
+  private void checkLocalityRelaxationConflict(Priority priority,
+      Collection<String> locations, boolean relaxLocality) {
+    Map<String, TreeMap<Resource, ResourceRequestInfo>> remoteRequests =
+        this.remoteRequestsTable.get(priority);
+    if (remoteRequests == null) {
+      return;
+    }
+    // Locality relaxation will be set to relaxLocality for all implicitly
+    // requested racks. Make sure that existing rack requests match this.
+    for (String location : locations) {
+        TreeMap<Resource, ResourceRequestInfo> reqs =
+            remoteRequests.get(location);
+        if (reqs != null && !reqs.isEmpty()
+            && reqs.values().iterator().next().remoteRequest.getRelaxLocality()
+            != relaxLocality) {
+          throw new InvalidContainerRequestException("Cannot submit a "
+              + "ContainerRequest asking for location " + location
+              + " with locality relaxation " + relaxLocality + " when it has "
+              + "already been requested with locality relaxation " + relaxLocality);
+        }
+      }
+  }
+  
-      Resource capability, int containerCount, T req) {
+      Resource capability, int containerCount, T req, boolean relaxLocality) {
-          new ResourceRequestInfo(priority, resourceName, capability);
+          new ResourceRequestInfo(priority, resourceName, capability,
+              relaxLocality);
-    if(req instanceof StoredContainerRequest) {
+    if (req instanceof StoredContainerRequest && relaxLocality) {

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS44 INS43 INS43 INS42 INS32 INS44 INS60 INS21 INS21 INS21 INS70 INS65 INS43 INS42 INS74 INS42 INS39 INS42 INS60 INS25 INS70 INS39 INS42 INS42 INS42 INS42 INS42 INS40 INS39 INS42 INS21 INS74 INS59 INS32 INS32 INS32 UPD42 INS44 INS42 INS8 INS27 INS66 INS66 INS42 INS43 INS43 INS74 INS59 INS27 INS8 INS44 INS42 INS8 INS27 INS32 UPD27 UPD42 INS43 INS43 INS42 MOV32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 MOV32 INS42 INS9 INS42 MOV32 INS42 INS32 INS43 INS42 INS21 INS32 MOV27 INS38 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS42 INS33 INS41 INS43 INS42 INS60 INS25 MOV62 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS42 INS42 INS43 INS43 INS43 INS22 INS42 INS42 INS42 INS74 INS59 INS27 INS8 UPD42 INS32 INS9 INS42 INS32 INS42 MOV32 MOV32 INS42 INS32 INS40 INS42 MOV32 INS38 INS42 INS42 INS42 INS52 INS42 INS43 INS43 INS43 INS42 INS32 INS27 INS27 INS53 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS38 INS32 INS42 INS14 INS42 INS32 INS32 INS32 INS42 INS9 INS22 INS42 INS42 INS33 INS32 INS22 INS42 INS43 INS27 INS42 INS42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS32 INS42 INS42 INS42