HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.

+import org.apache.hadoop.crypto.CipherOption;
+import org.apache.hadoop.crypto.CipherSuite;
+
+  public static CipherOption convert(HdfsProtos.CipherOptionProto proto) {
+    if (proto != null) {
+      CipherSuite suite = null;
+      if (proto.getSuite() != null) {
+        suite = convert(proto.getSuite());
+      }
+      byte[] inKey = null;
+      if (proto.getInKey() != null) {
+        inKey = proto.getInKey().toByteArray();
+      }
+      byte[] inIv = null;
+      if (proto.getInIv() != null) {
+        inIv = proto.getInIv().toByteArray();
+      }
+      byte[] outKey = null;
+      if (proto.getOutKey() != null) {
+        outKey = proto.getOutKey().toByteArray();
+      }
+      byte[] outIv = null;
+      if (proto.getOutIv() != null) {
+        outIv = proto.getOutIv().toByteArray();
+      }
+      return new CipherOption(suite, inKey, inIv, outKey, outIv);
+    }
+    return null;
+  }
+
+  public static CipherSuite convert(HdfsProtos.CipherSuiteProto proto) {
+    switch (proto) {
+    case AES_CTR_NOPADDING:
+      return CipherSuite.AES_CTR_NOPADDING;
+    default:
+      // Set to UNKNOWN and stash the unknown enum value
+      CipherSuite suite = CipherSuite.UNKNOWN;
+      suite.setUnknownValue(proto.getNumber());
+      return suite;
+    }
+  }
+
+  public static HdfsProtos.CipherOptionProto convert(CipherOption option) {
+    if (option != null) {
+      HdfsProtos.CipherOptionProto.Builder builder = HdfsProtos.CipherOptionProto.
+          newBuilder();
+      if (option.getCipherSuite() != null) {
+        builder.setSuite(convert(option.getCipherSuite()));
+      }
+      if (option.getInKey() != null) {
+        builder.setInKey(ByteString.copyFrom(option.getInKey()));
+      }
+      if (option.getInIv() != null) {
+        builder.setInIv(ByteString.copyFrom(option.getInIv()));
+      }
+      if (option.getOutKey() != null) {
+        builder.setOutKey(ByteString.copyFrom(option.getOutKey()));
+      }
+      if (option.getOutIv() != null) {
+        builder.setOutIv(ByteString.copyFrom(option.getOutIv()));
+      }
+      return builder.build();
+    }
+    return null;
+  }
+
+  public static HdfsProtos.CipherSuiteProto convert(CipherSuite suite) {
+    switch (suite) {
+    case UNKNOWN:
+      return HdfsProtos.CipherSuiteProto.UNKNOWN;
+    case AES_CTR_NOPADDING:
+      return HdfsProtos.CipherSuiteProto.AES_CTR_NOPADDING;
+    default:
+      return null;
+    }
+  }
+
+  public static List<HdfsProtos.CipherOptionProto> convertCipherOptions(
+      List<CipherOption> options) {
+    if (options != null) {
+      List<HdfsProtos.CipherOptionProto> protos =
+          Lists.newArrayListWithCapacity(options.size());
+      for (CipherOption option : options) {
+        protos.add(convert(option));
+      }
+      return protos;
+    }
+    return null;
+  }
+
+  public static List<CipherOption> convertCipherOptionProtos(
+      List<HdfsProtos.CipherOptionProto> protos) {
+    if (protos != null) {
+      List<CipherOption> options =
+          Lists.newArrayListWithCapacity(protos.size());
+      for (HdfsProtos.CipherOptionProto proto : protos) {
+        options.add(convert(proto));
+      }
+      return options;
+    }
+    return null;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS50 INS40 INS43 INS42 INS25 INS41 INS40 INS43 INS42 INS50 INS43 INS43 INS74 INS42 INS25 INS41 INS43 INS43 INS74 INS42 INS25 INS41 INS40 INS27 INS8 INS33 INS40 INS42 INS49 INS41 INS49 INS60 INS21 INS41 INS42 INS27 INS8 INS33 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS40 INS43 INS43 INS27 INS8 INS33 INS42 INS42 INS43 INS43 INS27 INS8 INS33 INS42 INS33 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS41 INS42 INS40 INS43 INS59 INS32 INS42 INS42 INS33 INS60 INS25 INS25 INS25 INS25 INS25 INS41 INS42 INS40 INS42 INS40 INS33 INS42 INS42 INS42 INS33 INS60 INS70 INS41 INS42 INS40 INS42 INS33 INS60 INS70 INS41 INS43 INS59 INS27 INS8 INS5 INS59 INS27 INS8 INS5 INS59 INS27 INS8 INS5 INS59 INS27 INS8 INS5 INS59 INS27 INS8 INS14 INS42 INS42 INS40 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS74 INS59 INS44 INS42 INS8 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS33 INS32 INS33 INS21 INS39 INS85 INS42 INS33 INS32 INS33 INS21 INS39 INS85 INS42 INS33 INS32 INS33 INS21 INS39 INS85 INS42 INS33 INS32 INS33 INS21 INS39 INS85 INS42 INS33 INS32 INS33 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS40 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42