HDFS-11154. Block Storage: store server state to persistent storage. Contributed by Chen Liang

+import com.google.protobuf.InvalidProtocolBufferException;
+import org.apache.hadoop.cblock.protocol.proto.CBlockClientServerProtocolProtos;
+import java.util.Arrays;
+
+  public CBlockClientServerProtocolProtos.MountVolumeResponseProto
+      toProtobuf() {
+    CBlockClientServerProtocolProtos.MountVolumeResponseProto.Builder volume =
+        CBlockClientServerProtocolProtos.MountVolumeResponseProto.newBuilder();
+    volume.setIsValid(true);
+    volume.setVolumeName(volumeName);
+    volume.setUserName(userName);
+    volume.setVolumeSize(volumeSize);
+    volume.setBlockSize(blockSize);
+    for (String containerIDString : containerIdOrdered) {
+      ContainerDescriptor containerDescriptor = containerMap.get(
+          containerIDString);
+      volume.addAllContainerIDs(containerDescriptor.toProtobuf());
+    }
+    return volume.build();
+  }
+
+  public static VolumeDescriptor fromProtobuf(byte[] data)
+      throws InvalidProtocolBufferException {
+    CBlockClientServerProtocolProtos.MountVolumeResponseProto volume =
+        CBlockClientServerProtocolProtos.MountVolumeResponseProto
+            .parseFrom(data);
+    String userName = volume.getUserName();
+    String volumeName = volume.getVolumeName();
+    long volumeSize = volume.getVolumeSize();
+    int blockSize = volume.getBlockSize();
+    VolumeDescriptor volumeDescriptor = new VolumeDescriptor(userName,
+        volumeName, volumeSize, blockSize);
+    List<CBlockClientServerProtocolProtos.ContainerIDProto> containers
+        = volume.getAllContainerIDsList();
+
+    String[] containerOrdering = new String[containers.size()];
+
+    for (CBlockClientServerProtocolProtos.ContainerIDProto containerProto :
+        containers) {
+      ContainerDescriptor containerDescriptor = new ContainerDescriptor(
+          containerProto.getContainerID(),
+          (int)containerProto.getIndex());
+      volumeDescriptor.addContainer(containerDescriptor);
+      containerOrdering[containerDescriptor.getContainerIndex()] =
+          containerDescriptor.getContainerID();
+    }
+    volumeDescriptor.setContainerIDs(
+        new ArrayList<>(Arrays.asList(containerOrdering)));
+    return volumeDescriptor;
+  }
+
+  @Override
+  public int hashCode() {
+    return userName.hashCode()*37 + volumeName.hashCode();
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (o != null && o instanceof VolumeDescriptor) {
+      VolumeDescriptor other = (VolumeDescriptor)o;
+      if (!userName.equals(other.getUserName()) ||
+          !volumeName.equals(other.getVolumeName()) ||
+          volumeSize != other.getVolumeSize() ||
+          blockSize != other.getBlockSize()) {
+        return false;
+      }
+      if (containerIdOrdered.size() != other.containerIdOrdered.size() ||
+          containerMap.size() != other.containerMap.size()) {
+        return false;
+      }
+      for (int i = 0; i<containerIdOrdered.size(); i++) {
+        if (!containerIdOrdered.get(i).equals(
+            other.containerIdOrdered.get(i))) {
+          return false;
+        }
+      }
+      for (String containerKey : containerMap.keySet()) {
+        if (!other.containerMap.containsKey(containerKey)) {
+          return false;
+        }
+        if (!containerMap.get(containerKey).equals(
+            other.containerMap.get(containerKey))) {
+          return false;
+        }
+      }
+      return true;
+    }
+    return false;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS40 INS60 INS21 INS21 INS21 INS21 INS21 INS70 INS41 INS42 INS5 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS70 INS21 INS41 INS42 INS41 INS42 INS43 INS42 INS25 INS41 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS44 INS42 INS8 INS32 INS39 INS85 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS74 INS59 INS5 INS59 INS44 INS42 INS8 INS32 INS42 INS27 INS42 INS27 INS8 INS9 INS40 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS60 INS21 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS3 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS14 INS27 INS32 INS27 INS62 INS60 INS25 INS25 INS24 INS70 INS41 INS40 INS42 INS42 INS43 INS59 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS5 INS32 INS40 INS43 INS59 INS32 INS7 INS74 INS32 INS32 INS34 INS42 INS42 INS42 INS33 INS42 INS43 INS43 INS59 INS27 INS8 INS27 INS8 INS58 INS27 INS37 INS8 INS44 INS32 INS8 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS2 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS27 INS27 INS41 INS27 INS27 INS41 INS39 INS59 INS42 INS32 INS42 INS25 INS43 INS42 INS42 INS42 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS11 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS38 INS38 INS27 INS42 INS32 INS9 INS32 INS32 INS32 INS32 INS9 INS42 INS34 INS42 INS42 INS38 INS8 INS42 INS38 INS8 INS38 INS8 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS32 INS41 INS32 INS41 INS32 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS9 INS40 INS42 INS42 INS9 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42