Merge HDFS-4685 to trunk.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569870 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclStatus;
+import org.apache.hadoop.hdfs.protocol.AclException;
-      UnresolvedLinkException, SnapshotAccessControlException {
+      UnresolvedLinkException, SnapshotAccessControlException, AclException {
+                            List<AclEntry> aclEntries,
+        if (aclEntries != null) {
+          AclStorage.updateINodeAcl(newNode, aclEntries,
+            Snapshot.CURRENT_STATE_ID);
+        }
-    inode.setPermission(permissions, inodesInPath.getLatestSnapshotId());
+    int snapshotId = inodesInPath.getLatestSnapshotId();
+    inode.setPermission(permissions, snapshotId);
+    if (getINode4DotSnapshot(src) != null) {
+      return new HdfsFileStatus(0, true, 0, 0, 0, 0, null, null, null, null,
+          HdfsFileStatus.EMPTY_NAME, -1L, 0);
+    }
+    return null;
+  }
+
+  private INode getINode4DotSnapshot(String src) throws UnresolvedLinkException {
-      return new HdfsFileStatus(0, true, 0, 0, 0, 0, null, null, null, null,
-          HdfsFileStatus.EMPTY_NAME, -1L, 0);
+      return node;
-             UnresolvedLinkException, SnapshotAccessControlException {
+             UnresolvedLinkException, SnapshotAccessControlException,
+             AclException {
-                : permissions, now);
+                : permissions, null, now);
-                          long timestamp) throws QuotaExceededException,
-                          UnresolvedLinkException {
+                          List<AclEntry> aclEntries, long timestamp)
+      throws QuotaExceededException, UnresolvedLinkException, AclException {
-    unprotectedMkdir(inodeId, iip, pos, components[pos], permissions,
+    unprotectedMkdir(inodeId, iip, pos, components[pos], permissions, aclEntries,
-      int pos, byte[] name, PermissionStatus permission, long timestamp)
-      throws QuotaExceededException {
+      int pos, byte[] name, PermissionStatus permission,
+      List<AclEntry> aclEntries, long timestamp)
+      throws QuotaExceededException, AclException {
+      if (aclEntries != null) {
+        AclStorage.updateINodeAcl(dir, aclEntries, Snapshot.CURRENT_STATE_ID);
+      }
+      AclStorage.copyINodeDefaultAcl(child);
-      QuotaExceededException, SnapshotAccessControlException {
+      QuotaExceededException, SnapshotAccessControlException, AclException {
-  
+
+  void modifyAclEntries(String src, List<AclEntry> aclSpec) throws IOException {
+    writeLock();
+    try {
+      List<AclEntry> newAcl = unprotectedModifyAclEntries(src, aclSpec);
+      fsImage.getEditLog().logSetAcl(src, newAcl);
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  private List<AclEntry> unprotectedModifyAclEntries(String src,
+      List<AclEntry> aclSpec) throws IOException {
+    assert hasWriteLock();
+    INodesInPath iip = rootDir.getINodesInPath4Write(normalizePath(src), true);
+    INode inode = resolveLastINode(src, iip);
+    int snapshotId = iip.getLatestSnapshotId();
+    List<AclEntry> existingAcl = AclStorage.readINodeLogicalAcl(inode);
+    List<AclEntry> newAcl = AclTransformation.mergeAclEntries(existingAcl,
+      aclSpec);
+    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);
+    return newAcl;
+  }
+
+  void removeAclEntries(String src, List<AclEntry> aclSpec) throws IOException {
+    writeLock();
+    try {
+      List<AclEntry> newAcl = unprotectedRemoveAclEntries(src, aclSpec);
+      fsImage.getEditLog().logSetAcl(src, newAcl);
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  private List<AclEntry> unprotectedRemoveAclEntries(String src,
+      List<AclEntry> aclSpec) throws IOException {
+    assert hasWriteLock();
+    INodesInPath iip = rootDir.getINodesInPath4Write(normalizePath(src), true);
+    INode inode = resolveLastINode(src, iip);
+    int snapshotId = iip.getLatestSnapshotId();
+    List<AclEntry> existingAcl = AclStorage.readINodeLogicalAcl(inode);
+    List<AclEntry> newAcl = AclTransformation.filterAclEntriesByAclSpec(
+      existingAcl, aclSpec);
+    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);
+    return newAcl;
+  }
+
+  void removeDefaultAcl(String src) throws IOException {
+    writeLock();
+    try {
+      List<AclEntry> newAcl = unprotectedRemoveDefaultAcl(src);
+      fsImage.getEditLog().logSetAcl(src, newAcl);
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  private List<AclEntry> unprotectedRemoveDefaultAcl(String src)
+      throws IOException {
+    assert hasWriteLock();
+    INodesInPath iip = rootDir.getINodesInPath4Write(normalizePath(src), true);
+    INode inode = resolveLastINode(src, iip);
+    int snapshotId = iip.getLatestSnapshotId();
+    List<AclEntry> existingAcl = AclStorage.readINodeLogicalAcl(inode);
+    List<AclEntry> newAcl = AclTransformation.filterDefaultAclEntries(
+      existingAcl);
+    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);
+    return newAcl;
+  }
+
+  void removeAcl(String src) throws IOException {
+    writeLock();
+    try {
+      unprotectedRemoveAcl(src);
+      fsImage.getEditLog().logSetAcl(src, AclFeature.EMPTY_ENTRY_LIST);
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  private void unprotectedRemoveAcl(String src) throws IOException {
+    assert hasWriteLock();
+    INodesInPath iip = rootDir.getINodesInPath4Write(normalizePath(src), true);
+    INode inode = resolveLastINode(src, iip);
+    int snapshotId = iip.getLatestSnapshotId();
+    AclStorage.removeINodeAcl(inode, snapshotId);
+  }
+
+  void setAcl(String src, List<AclEntry> aclSpec) throws IOException {
+    writeLock();
+    try {
+      List<AclEntry> newAcl = unprotectedSetAcl(src, aclSpec);
+      fsImage.getEditLog().logSetAcl(src, newAcl);
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  List<AclEntry> unprotectedSetAcl(String src, List<AclEntry> aclSpec)
+      throws IOException {
+    // ACL removal is logged to edits as OP_SET_ACL with an empty list.
+    if (aclSpec.isEmpty()) {
+      unprotectedRemoveAcl(src);
+      return AclFeature.EMPTY_ENTRY_LIST;
+    }
+
+    assert hasWriteLock();
+    INodesInPath iip = rootDir.getINodesInPath4Write(normalizePath(src), true);
+    INode inode = resolveLastINode(src, iip);
+    int snapshotId = iip.getLatestSnapshotId();
+    List<AclEntry> existingAcl = AclStorage.readINodeLogicalAcl(inode);
+    List<AclEntry> newAcl = AclTransformation.replaceAclEntries(existingAcl,
+      aclSpec);
+    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);
+    return newAcl;
+  }
+
+  AclStatus getAclStatus(String src) throws IOException {
+    String srcs = normalizePath(src);
+    readLock();
+    try {
+      // There is no real inode for the path ending in ".snapshot", so return a
+      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.
+      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) &&
+          getINode4DotSnapshot(srcs) != null) {
+        return new AclStatus.Builder().owner("").group("").build();
+      }
+      INodesInPath iip = rootDir.getLastINodeInPath(srcs, true);
+      INode inode = resolveLastINode(src, iip);
+      int snapshotId = iip.getPathSnapshotId();
+      List<AclEntry> acl = AclStorage.readINodeAcl(inode, snapshotId);
+      return new AclStatus.Builder()
+          .owner(inode.getUserName()).group(inode.getGroupName())
+          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())
+          .addEntries(acl).build();
+    } finally {
+      readUnlock();
+    }
+  }
+
+  private static INode resolveLastINode(String src, INodesInPath iip)
+      throws FileNotFoundException {
+    INode inode = iip.getLastINode();
+    if (inode == null)
+      throw new FileNotFoundException("cannot find " + src);
+    return inode;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS44 MOV29 INS83 MOV43 INS42 INS44 INS43 INS8 INS43 UPD42 INS43 INS44 INS43 INS44 INS43 INS43 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS8 INS74 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS74 INS42 INS60 INS43 INS42 INS42 MOV25 INS41 INS42 INS25 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS43 INS42 INS74 INS42 INS42 INS21 INS54 INS43 INS43 INS43 INS42 INS74 INS42 INS42 INS6 INS60 INS60 INS60 INS60 INS60 INS21 INS41 INS43 INS42 INS74 INS42 INS42 INS21 INS54 INS43 INS43 INS43 INS42 INS74 INS42 INS42 INS6 INS60 INS60 INS60 INS60 INS60 INS21 INS41 INS43 INS42 INS42 INS21 INS54 INS43 INS43 INS43 INS42 INS42 INS6 INS60 INS60 INS60 INS60 INS60 INS21 INS41 INS43 INS42 INS42 INS21 INS54 INS43 INS42 INS42 INS6 INS60 INS60 INS60 INS21 INS43 INS42 INS74 INS42 INS42 INS21 INS54 INS43 INS43 INS43 INS42 INS74 INS42 INS42 INS25 INS6 INS60 INS60 INS60 INS60 INS60 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS54 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS39 INS59 INS42 INS27 INS33 MOV27 INS8 INS43 INS43 INS43 INS43 INS42 INS43 INS43 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS43 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS43 INS43 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS43 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS32 INS8 INS8 INS42 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS42 INS43 INS43 INS32 INS8 INS8 INS42 INS42 INS42 INS43 INS43 INS32 INS8 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS43 INS59 INS27 INS53 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS25 INS21 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS25 INS60 INS60 INS60 INS60 INS41 INS21 INS42 INS42 INS32 INS42 INS33 INS14 INS8 INS42 INS42 INS42 INS27 INS8 INS32 INS74 INS59 INS32 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS32 INS40 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS32 INS32 INS42 INS42 INS43 INS27 INS25 MOV41 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS27 MOV8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS33 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS21 INS33 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS45 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS14 INS42 INS45 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS40 INS40