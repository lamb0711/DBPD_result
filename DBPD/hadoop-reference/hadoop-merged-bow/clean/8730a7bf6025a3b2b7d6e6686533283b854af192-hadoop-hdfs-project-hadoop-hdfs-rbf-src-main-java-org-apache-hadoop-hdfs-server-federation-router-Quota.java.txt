HDFS-15003. RBF: Make Router support storage type quota. Contributed by Jinglun.

+import java.util.Arrays;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
+    long[] typeQuota = new long[StorageType.values().length];
+    eachByStorageType(t -> typeQuota[t.ordinal()] = HdfsConstants.QUOTA_RESET);
+
-        || sQuota == HdfsConstants.QUOTA_RESET)) {
+        || sQuota == HdfsConstants.QUOTA_RESET || orByStorageType(
+          t -> typeQuota[t.ordinal()] == HdfsConstants.QUOTA_RESET))) {
+      eachByStorageType(t -> {
+        if (typeQuota[t.ordinal()] == HdfsConstants.QUOTA_RESET) {
+          typeQuota[t.ordinal()] = quota.getTypeQuota(t);
+        }
+      });
-    return new QuotaUsage.Builder().quota(nQuota).spaceQuota(sQuota).build();
+    return new QuotaUsage.Builder().quota(nQuota).spaceQuota(sQuota)
+        .typeQuota(typeQuota).build();
+    long[] typeCount = new long[StorageType.values().length];
+    long[] typeQuota = new long[StorageType.values().length];
+    eachByStorageType(t -> typeQuota[t.ordinal()] = HdfsConstants.QUOTA_RESET);
+        eachByStorageType(
+            t -> typeCount[t.ordinal()] += usage.getTypeConsumed(t));
-        if (usage.getQuota() == -1 && usage.getSpaceQuota() == -1) {
+        if (!RouterQuotaManager.isQuotaSet(usage)) {
+        eachByStorageType(t -> typeQuota[t.ordinal()] = usage.getTypeQuota(t));
-        LOG.debug(
-            "Get quota usage for path: nsId: {}, dest: {},"
-                + " nsCount: {}, ssCount: {}.",
+        eachByStorageType(
+            t -> typeCount[t.ordinal()] += usage.getTypeConsumed(t));
+        LOG.debug("Get quota usage for path: nsId: {}, dest: {},"
+                + " nsCount: {}, ssCount: {}, typeCount: {}.",
-            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed());
+            usage.getFileAndDirectoryCount(), usage.getSpaceConsumed(),
+            usage.toString(false, true, Arrays.asList(StorageType.values())));
+      eachByStorageType(t -> typeQuota[t.ordinal()] = quota.getTypeQuota(t));
-    QuotaUsage.Builder builder = new QuotaUsage.Builder()
-        .fileAndDirectoryCount(nsCount).spaceConsumed(ssCount);
+    QuotaUsage.Builder builder =
+        new QuotaUsage.Builder().fileAndDirectoryCount(nsCount)
+            .spaceConsumed(ssCount).typeConsumed(typeCount);
+      eachByStorageType(t -> builder.typeQuota(t, HdfsConstants.QUOTA_RESET));
+      eachByStorageType(t -> builder.typeQuota(t, typeQuota[t.ordinal()]));
+   * Invoke consumer by each storage type.
+   * @param consumer the function consuming the storage type.
+   */
+  public static void eachByStorageType(Consumer<StorageType> consumer) {
+    for (StorageType type : StorageType.values()) {
+      consumer.accept(type);
+    }
+  }
+
+  /**
+   * Invoke predicate by each storage type and bitwise inclusive OR the results.
+   * @param predicate the function test the storage type.
+   */
+  public static boolean orByStorageType(Predicate<StorageType> predicate) {
+    boolean res = false;
+    for (StorageType type : StorageType.values()) {
+      res |= predicate.test(type);
+    }
+    return res;
+  }
+
+  /**
+   * Invoke predicate by each storage type and bitwise AND the results.
+   * @param predicate the function test the storage type.
+   */
+  public static boolean andByStorageType(Predicate<StorageType> predicate) {
+    boolean res = false;
+    for (StorageType type : StorageType.values()) {
+      res &= predicate.test(type);
+    }
+    return res;
+  }
+
+  /**

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS60 INS21 INS60 INS60 INS21 INS65 INS65 INS74 INS42 INS70 INS65 INS65 INS74 INS42 INS60 INS70 INS41 INS65 INS65 INS74 INS42 INS60 INS70 INS41 INS5 INS59 INS32 INS32 INS5 INS59 INS5 INS59 INS32 INS66 INS42 INS66 INS43 INS43 INS44 INS32 INS8 INS66 INS42 INS66 INS43 INS43 INS39 INS59 INS44 INS32 INS8 INS42 INS66 INS42 INS66 INS43 INS43 INS39 INS59 INS44 INS32 INS8 INS42 INS39 INS85 INS42 INS3 INS42 INS86 INS21 MOV32 INS42 INS39 INS85 INS42 INS3 INS39 INS85 INS42 INS3 INS42 INS86 INS21 INS32 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS9 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS9 INS43 INS42 INS42 INS42 INS21 INS5 INS22 INS59 INS7 INS27 INS32 UPD42 INS42 INS5 INS22 INS5 INS22 INS59 INS7 INS32 MOV32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS7 INS42 INS7 INS39 INS85 INS32 INS42 INS42 INS2 INS40 MOV27 INS32 INS42 INS86 INS39 INS85 INS32 INS42 INS39 INS85 INS32 INS42 INS42 INS2 INS40 INS21 INS42 INS86 INS42 INS86 INS42 INS86 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS86 INS59 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS25 INS21 INS21 INS59 INS7 INS59 INS32 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS27 INS42 INS25 INS42 INS42 INS42 INS86 INS38 MOV8 INS32 INS32 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS2 INS42 INS2 INS40 INS27 INS8 INS59 INS7 INS32 INS42 INS86 INS42 INS86 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS2 INS40 INS21 INS42 INS2 INS32 INS42 INS42 INS42 INS59 INS7 INS59 INS7 UPD45 INS42 INS42 INS9 INS9 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS32 INS42 INS42 INS42 INS42 INS2 INS32 INS42 INS2 INS32 INS42 INS42 INS32 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL34 DEL38 DEL27 DEL32 DEL34 DEL38 DEL27 DEL27 DEL25