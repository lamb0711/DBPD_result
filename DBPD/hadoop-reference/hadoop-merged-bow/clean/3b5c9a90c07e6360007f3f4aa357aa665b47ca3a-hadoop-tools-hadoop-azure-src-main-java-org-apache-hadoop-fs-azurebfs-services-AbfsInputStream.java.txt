HADOOP-16961. ABFS: Adding metrics to AbfsInputStream (#2076)


Contributed by Mehakmeet Singh.
+  /** Stream statistics. */
+  private final AbfsInputStreamStatistics streamStatistics;
+
+    this.streamStatistics = abfsInputStreamContext.getStreamStatistics();
+    // check if buffer is null before logging the length
+    if (b != null) {
+      LOG.debug("read requested b.length = {} offset = {} len = {}", b.length,
+          off, len);
+    } else {
+      LOG.debug("read requested b = null offset = {} len = {}", off, len);
+    }
+
+    if (streamStatistics != null) {
+      streamStatistics.readOperationStarted(off, len);
+    }
+    LOG.debug("read one block requested b.length = {} off {} len {}", b.length,
+        off, len);
+        LOG.debug("created new buffer size {}", bufferSize);
+    if (streamStatistics != null) {
+      // Bytes read from the local buffer.
+      streamStatistics.bytesReadFromBuffer(bytesToRead);
+      streamStatistics.bytesRead(bytesToRead);
+    }
+      LOG.debug("read ahead enabled issuing readheads num = {}", numReadAheads);
+        LOG.debug("issuing read ahead requestedOffset = {} requested size {}",
+            nextOffset, nextSize);
+        LOG.debug("Received data from read ahead, not doing remote read");
+      LOG.debug("read ahead disabled, reading remote");
+      if (streamStatistics != null) {
+        streamStatistics.remoteReadOperation();
+      }
+      LOG.debug("issuing HTTP GET request params position = {} b.length = {} "
+          + "offset = {} length = {}", position, b.length, offset, length);
+    LOG.debug("HTTP request read bytes = {}", bytesRead);
+    LOG.debug("requested seek to position {}", n);
+    if (streamStatistics != null) {
+      streamStatistics.seek(n, fCursor);
+    }
+
+      if (streamStatistics != null) {
+        streamStatistics.seekInBuffer();
+      }
+    LOG.debug("set fCursor to {}", fCursor);
+    LOG.debug("Closing {}", this);
+  /**
+   * Getter for AbfsInputStreamStatistics.
+   *
+   * @return an instance of AbfsInputStreamStatistics.
+   */
+  @VisibleForTesting
+  public AbfsInputStreamStatistics getStreamStatistics() {
+    return streamStatistics;
+  }
+
+  /**
+   * Get the statistics of the stream.
+   * @return a string value.
+   */
+  @Override
+  public String toString() {
+    final StringBuilder sb = new StringBuilder(super.toString());
+    if (streamStatistics != null) {
+      sb.append("AbfsInputStream@(").append(this.hashCode()).append("){");
+      sb.append(streamStatistics.toString());
+      sb.append("}");
+    }
+    return sb.toString();
+  }

INS23 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS21 INS25 INS25 INS21 INS25 INS21 INS21 INS25 INS21 INS21 INS65 INS65 INS42 INS42 INS41 INS65 INS65 INS42 INS42 INS60 INS25 INS41 INS66 INS7 INS27 INS8 INS8 INS27 INS8 INS32 INS27 INS8 INS32 INS32 INS27 INS8 INS32 INS32 INS66 INS66 INS42 INS66 INS66 INS83 INS43 INS59 INS27 INS8 INS32 INS22 INS32 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS42 INS42 INS45 INS40 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS21 INS25 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS33 INS21 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS52 INS42 INS42 INS14 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS8 INS32 INS32 INS27 INS8 INS43 INS48 INS32 INS32 INS32 INS42 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS21 INS21 INS42 INS42 INS45 INS42 INS33 INS21 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS32 INS32 INS32 INS45 INS45 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS52 INS42