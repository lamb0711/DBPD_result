YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)

+import java.util.Collections;
-  private final ApplicationMasterServiceProcessor amsProcessor;
+  private final AMSProcessingChain amsProcessingChain;
-    this.amsProcessor = createProcessor();
-  }
-
-  protected ApplicationMasterServiceProcessor createProcessor() {
-    return new DefaultAMSProcessor(rmContext, rScheduler);
+    this.amsProcessingChain = new AMSProcessingChain(new DefaultAMSProcessor());
+    amsProcessingChain.init(rmContext, null);
+    List<ApplicationMasterServiceProcessor> processors = getProcessorList(conf);
+    if (processors != null) {
+      Collections.reverse(processors);
+      for (ApplicationMasterServiceProcessor p : processors) {
+        this.amsProcessingChain.addProcessor(p);
+      }
+    }
+  }
+
+  protected List<ApplicationMasterServiceProcessor> getProcessorList(
+      Configuration conf) {
+    return conf.getInstances(
+        YarnConfiguration.RM_APPLICATION_MASTER_SERVICE_PROCESSORS,
+        ApplicationMasterServiceProcessor.class);
+  protected AMSProcessingChain getProcessingChain() {
+    return this.amsProcessingChain;
+  }
+
-      return this.amsProcessor.registerApplicationMaster(
-          amrmTokenIdentifier.getApplicationAttemptId(), request);
+      RegisterApplicationMasterResponse response =
+          recordFactory.newRecordInstance(
+              RegisterApplicationMasterResponse.class);
+      this.amsProcessingChain.registerApplicationMaster(
+          amrmTokenIdentifier.getApplicationAttemptId(), request, response);
+      return response;
-      return this.amsProcessor.finishApplicationMaster(
-          applicationAttemptId, request);
+      FinishApplicationMasterResponse response =
+          FinishApplicationMasterResponse.newInstance(false);
+      this.amsProcessingChain.finishApplicationMaster(
+          applicationAttemptId, request, response);
+      return response;
-      AllocateResponse response = this.amsProcessor.allocate(
-          amrmTokenIdentifier.getApplicationAttemptId(), request);
+      AllocateResponse response =
+          recordFactory.newRecordInstance(AllocateResponse.class);
+      this.amsProcessingChain.allocate(
+          amrmTokenIdentifier.getApplicationAttemptId(), request, response);

INS26 INS40 INS31 INS43 MOV78 INS39 INS42 MOV44 MOV43 INS8 INS74 INS42 INS44 INS83 INS43 INS42 INS8 INS42 UPD42 MOV21 INS21 INS60 INS25 INS43 MOV43 INS43 INS42 INS41 INS42 INS41 INS32 INS74 INS59 INS27 INS8 INS42 INS42 INS32 INS22 INS14 INS42 INS42 INS42 INS33 INS43 MOV43 INS42 INS32 INS42 INS33 INS21 INS70 INS42 INS42 INS40 INS57 INS52 INS42 INS60 INS21 INS41 INS60 INS21 INS41 INS60 INS21 UPD42 INS43 INS14 INS42 INS42 INS42 INS32 INS44 INS42 INS8 INS43 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 MOV43 INS59 INS32 INS42 MOV43 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS32 MOV22 MOV42 MOV32 MOV42 INS42 INS42 INS42 INS32 MOV22 MOV42 MOV42 MOV42 INS42 MOV42 INS32 MOV22 MOV42 MOV32 MOV42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS57 UPD42 INS42 INS42 INS9 UPD42 INS42 INS42 INS57 UPD42 INS22 INS42 INS42 INS43 INS43 INS52 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL39 DEL42 DEL32 DEL41 DEL32 DEL41 DEL32 DEL59 DEL60