HDFS-6906. Archival Storage: Add more tests for BlockStoragePolicy. Contributed by Tsz Wo Nicholas Sze.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619628 13f79535-47bb-0310-9956-ffa450edef68

+    return chooseStorageTypes(replication, chosen, null);
+  }
+
+  private List<StorageType> chooseStorageTypes(final short replication,
+      final Iterable<StorageType> chosen, final List<StorageType> excess) {
-    diff(types, chosen, null);
+    diff(types, chosen, excess);
+   * Choose the storage types for storing the remaining replicas, given the
+   * replication number, the storage types of the chosen replicas and
+   * the unavailable storage types.  It uses fallback storage in case that
+   * the desired storage type is unavailable.  
+   *
+   * @param replication the replication number.
+   * @param chosen the storage types of the chosen replicas.
+   * @param unavailables the unavailable storage types.
+   * @param isNewBlock Is it for new block creation?
+   * @return a list of {@link StorageType}s for storing the replicas of a block.
+   */
+  public List<StorageType> chooseStorageTypes(final short replication,
+      final Iterable<StorageType> chosen,
+      final EnumSet<StorageType> unavailables,
+      final boolean isNewBlock) {
+    final List<StorageType> excess = new LinkedList<StorageType>();
+    final List<StorageType> storageTypes = chooseStorageTypes(
+        replication, chosen, excess);
+    final int expectedSize = storageTypes.size() - excess.size();
+    final List<StorageType> removed = new LinkedList<StorageType>();
+    for(int i = storageTypes.size() - 1; i >= 0; i--) {
+      // replace/remove unavailable storage types.
+      final StorageType t = storageTypes.get(i);
+      if (unavailables.contains(t)) {
+        final StorageType fallback = isNewBlock?
+            getCreationFallback(unavailables)
+            : getReplicationFallback(unavailables);
+        if (fallback == null) {
+          removed.add(storageTypes.remove(i));
+        } else {
+          storageTypes.set(i, fallback);
+        }
+      }
+    }
+    // remove excess storage types after fallback replacement.
+    diff(storageTypes, excess, null);
+    if (storageTypes.size() < expectedSize) {
+      LOG.warn("Failed to place enough replicas: expected size is " + expectedSize 
+          + " but only " + storageTypes.size() + " storage types can be selected "
+          + "(replication=" + replication
+          + ", selected=" + storageTypes
+          + ", unavailable=" + unavailables
+          + ", removed=" + removed
+          + ", policy=" + this + ")");
+    }
+    return storageTypes;
+  }
+
+  /**

INS31 INS31 INS8 INS83 INS74 INS42 INS44 INS44 INS44 MOV8 INS29 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS8 INS41 INS43 INS43 INS83 INS39 INS42 INS83 INS74 INS42 INS83 INS74 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS39 INS42 INS83 INS74 INS42 INS83 INS74 INS42 INS83 INS39 INS42 INS60 INS60 INS60 INS60 INS24 INS21 INS25 INS41 INS32 INS42 INS42 INS43 INS43 INS43 INS43 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS42 INS43 INS43 INS43 INS43 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS58 INS27 INS37 INS8 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS27 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS42 INS42 INS42 INS33 INS32 INS42 INS21 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS74 INS42 INS27 INS83 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS8 INS45 INS42 INS45 INS32 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS52 INS45 INS42 INS42 INS16 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL33