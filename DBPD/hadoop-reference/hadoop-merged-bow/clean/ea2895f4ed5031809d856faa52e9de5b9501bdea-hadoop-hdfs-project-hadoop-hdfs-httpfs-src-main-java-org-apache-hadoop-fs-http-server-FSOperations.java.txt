HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.

+import org.apache.hadoop.fs.BlockStoragePolicySpi;
+import org.apache.hadoop.fs.StorageType;
+import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
+import java.util.Collection;
+  @SuppressWarnings({ "unchecked" })
+  private static JSONObject storagePolicyToJSON(BlockStoragePolicySpi policy) {
+    BlockStoragePolicy p = (BlockStoragePolicy) policy;
+    JSONObject policyJson = new JSONObject();
+    policyJson.put("id", p.getId());
+    policyJson.put("name", p.getName());
+    policyJson.put("storageTypes", toJsonArray(p.getStorageTypes()));
+    policyJson.put("creationFallbacks", toJsonArray(p.getCreationFallbacks()));
+    policyJson.put("replicationFallbacks",
+        toJsonArray(p.getReplicationFallbacks()));
+    policyJson.put("copyOnCreateFile", p.isCopyOnCreateFile());
+    return policyJson;
+  }
+
+  @SuppressWarnings("unchecked")
+  private static JSONArray toJsonArray(StorageType[] storageTypes) {
+    JSONArray jsonArray = new JSONArray();
+    for (StorageType type : storageTypes) {
+      jsonArray.add(type.toString());
+    }
+    return jsonArray;
+  }
+
+  @SuppressWarnings("unchecked")
+  private static JSONObject storagePoliciesToJSON(
+      Collection<? extends BlockStoragePolicySpi> storagePolicies) {
+    JSONObject json = new JSONObject();
+    JSONArray jsonArray = new JSONArray();
+    JSONObject policies = new JSONObject();
+    if (storagePolicies != null) {
+      for (BlockStoragePolicySpi policy : storagePolicies) {
+        JSONObject policyMap = storagePolicyToJSON(policy);
+        jsonArray.add(policyMap);
+      }
+    }
+    policies.put(HttpFSFileSystem.STORAGE_POLICY_JSON, jsonArray);
+    json.put(HttpFSFileSystem.STORAGE_POLICIES_JSON, policies);
+    return json;
+  }
+
+
+  /**
+   * Executor that performs a getAllStoragePolicies FileSystemAccess files
+   * system operation.
+   */
+  @SuppressWarnings({ "unchecked" })
+  @InterfaceAudience.Private
+  public static class FSGetAllStoragePolicies implements
+      FileSystemAccess.FileSystemExecutor<JSONObject> {
+
+    @Override
+    public JSONObject execute(FileSystem fs) throws IOException {
+      Collection<? extends BlockStoragePolicySpi> storagePolicies = fs
+          .getAllStoragePolicies();
+      return storagePoliciesToJSON(storagePolicies);
+    }
+  }
+
+  /**
+   * Executor that performs a getStoragePolicy FileSystemAccess files system
+   * operation.
+   */
+  @SuppressWarnings({ "unchecked" })
+  @InterfaceAudience.Private
+  public static class FSGetStoragePolicy implements
+      FileSystemAccess.FileSystemExecutor<JSONObject> {
+
+    private Path path;
+
+    public FSGetStoragePolicy(String path) {
+      this.path = new Path(path);
+    }
+
+    @Override
+    public JSONObject execute(FileSystem fs) throws IOException {
+      BlockStoragePolicySpi storagePolicy = fs.getStoragePolicy(path);
+      JSONObject json = new JSONObject();
+      json.put(HttpFSFileSystem.STORAGE_POLICY_JSON,
+          storagePolicyToJSON(storagePolicy));
+      return json;
+    }
+  }
+
+  /**
+   * Executor that performs a setStoragePolicy FileSystemAccess files system
+   * operation.
+   */
+  @InterfaceAudience.Private
+  public static class FSSetStoragePolicy implements
+      FileSystemAccess.FileSystemExecutor<Void> {
+
+    private Path path;
+    private String policyName;
+
+    public FSSetStoragePolicy(String path, String policyName) {
+      this.path = new Path(path);
+      this.policyName = policyName;
+    }
+
+    @Override
+    public Void execute(FileSystem fs) throws IOException {
+      fs.setStoragePolicy(path, policyName);
+      return null;
+    }
+  }
+
+  /**
+   * Executor that performs a unsetStoragePolicy FileSystemAccess files system
+   * operation.
+   */
+  @InterfaceAudience.Private
+  public static class FSUnsetStoragePolicy implements
+      FileSystemAccess.FileSystemExecutor<Void> {
+
+    private Path path;
+
+    public FSUnsetStoragePolicy(String path) {
+      this.path = new Path(path);
+    }
+
+    @Override
+    public Void execute(FileSystem fs) throws IOException {
+      fs.unsetStoragePolicy(path);
+      return null;
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS55 INS55 INS55 INS55 INS79 INS83 INS83 INS43 INS42 INS44 INS8 INS79 INS83 INS83 INS43 INS42 INS44 INS8 INS79 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS79 INS78 INS83 INS83 INS42 INS74 INS31 INS29 INS79 INS78 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS23 INS31 INS31 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS42 INS4 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS45 INS42 INS5 INS42 INS60 INS70 INS41 INS42 INS45 INS42 INS74 INS42 INS60 INS60 INS60 INS25 INS21 INS21 INS41 INS65 INS42 INS4 INS40 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS4 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS45 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS85 INS43 INS59 INS44 INS42 INS8 INS42 INS43 INS76 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS66 INS66 INS45 INS40 INS42 INS42 INS42 INS43 INS42 INS42 INS60 INS41 INS66 INS66 INS45 INS40 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS60 INS60 INS21 INS41 INS66 INS66 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS21 INS41 INS66 INS66 INS40 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS14 INS43 INS42 INS21 INS42 INS43 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS33 INS70 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS74 INS59 INS32 INS42 INS7 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS7 INS7 INS42 INS32 INS33 INS42 INS7 INS42 INS32 INS33 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS43 INS43 INS43 INS44 INS42 INS8 INS43 INS76 INS42 INS32 INS42 INS42 INS22 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS40 INS32 INS22 INS14 INS22 INS42 INS42 INS42 INS42 INS42 INS22 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS60 INS21 INS42 INS43 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42