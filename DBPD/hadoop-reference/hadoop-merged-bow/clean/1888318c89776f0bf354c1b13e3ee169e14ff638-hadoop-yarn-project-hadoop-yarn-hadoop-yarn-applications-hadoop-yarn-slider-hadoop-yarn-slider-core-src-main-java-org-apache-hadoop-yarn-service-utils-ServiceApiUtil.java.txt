YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He

-package org.apache.slider.util;
+package org.apache.hadoop.yarn.service.utils;
+import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.slider.providers.AbstractClientProvider;
-import org.apache.slider.providers.SliderProviderFactory;
+import org.apache.hadoop.yarn.service.provider.AbstractClientProvider;
+import org.apache.hadoop.yarn.service.provider.ProviderFactory;
+import org.apache.slider.server.services.utility.PatternValidator;
+import org.apache.slider.util.RestApiConstants;
+import org.apache.slider.util.RestApiErrorMessages;
-  private static JsonSerDeser<Application> jsonSerDeser =
+  public static JsonSerDeser<Application> jsonSerDeser =
+  private static final PatternValidator compNamePattern
+      = new PatternValidator("[a-z][a-z0-9-]*");
-    AbstractClientProvider compClientProvider = SliderProviderFactory
+    validateCompName(comp.getName());
+
+    AbstractClientProvider compClientProvider = ProviderFactory
+  // Check component name format and transform to lower case.
+  public static void validateCompName(String compName) {
+    if (StringUtils.isEmpty(compName)) {
+      throw new IllegalArgumentException("Component name can not be empty");
+    }
+    // validate component name
+    if (compName.contains("_")) {
+      throw new IllegalArgumentException(
+          "Invalid format for component name: " + compName
+              + ", can not use '_' as DNS hostname does not allow underscore. Use '-' Instead. ");
+    }
+    compNamePattern.validate(compName);
+  }
+
-    Application externalApplication = jsonSerDeser.load(fs.getFileSystem(),
-        appJson);
-    return externalApplication;
+    return jsonSerDeser.load(fs.getFileSystem(), appJson);
+  }
+
+  public static Application loadApplicationFrom(SliderFileSystem fs,
+      Path appDefPath) throws IOException {
+    LOG.info("Loading application definition from " + appDefPath);
+    return jsonSerDeser.load(fs.getFileSystem(), appDefPath);
+  // check if comp mem size exceeds cluster limit
+  public static void validateCompResourceSize(
+      org.apache.hadoop.yarn.api.records.Resource maxResource,
+      Application application) throws YarnException {
+    for (Component component : application.getComponents()) {
+      // only handle mem now.
+      long mem = Long.parseLong(component.getResource().getMemory());
+      if (mem > maxResource.getMemorySize()) {
+        throw new YarnException(
+            "Component " + component.getName() + " memory size (" + mem
+                + ") is larger than configured max container memory size ("
+                + maxResource.getMemorySize() + ")");
+      }
+    }
+  }
+

INS26 INS26 INS26 INS26 UPD40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 UPD83 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS14 INS21 INS43 INS42 INS25 INS25 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS41 INS43 INS42 MOV43 INS42 INS42 INS70 INS43 INS45 INS32 INS42 INS32 INS8 INS32 INS8 INS32 MOV32 INS42 INS42 INS32 INS32 INS40 INS44 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS42 INS45 INS53 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 UPD42 INS14 INS14 INS45 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS43 INS45 INS43 INS27 INS42 INS32 INS42 INS32 INS53 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42