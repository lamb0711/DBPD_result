HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.

+  public final static HdfsFileStatus DOT_SNAPSHOT_DIR_STATUS =
+      new HdfsFileStatus(0, true, 0, 0, 0, 0, null, null, null, null,
+          HdfsFileStatus.EMPTY_NAME, -1L, 0, null,
+          HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED, null);
+
-  String resolvePath(FSPermissionChecker pc, String path)
-      throws FileNotFoundException, AccessControlException {
-    if (isReservedRawName(path) && isPermissionEnabled) {
+  INodesInPath resolvePath(FSPermissionChecker pc, String src)
+      throws UnresolvedLinkException, FileNotFoundException,
+      AccessControlException {
+    return resolvePath(pc, src, true);
+  }
+
+  INodesInPath resolvePath(FSPermissionChecker pc, String src,
+      boolean resolveLink) throws UnresolvedLinkException,
+  FileNotFoundException, AccessControlException {
+    byte[][] components = INode.getPathComponents(src);
+    if (isPermissionEnabled && pc != null && isReservedRawName(components)) {
-    return resolvePath(path, this);
+    components = resolveComponents(components, this);
+    return INodesInPath.resolve(rootDir, components, resolveLink);
+  }
+
+  INodesInPath resolvePathForWrite(FSPermissionChecker pc, String src)
+      throws UnresolvedLinkException, FileNotFoundException,
+      AccessControlException {
+    return resolvePathForWrite(pc, src, true);
+  }
+
+  INodesInPath resolvePathForWrite(FSPermissionChecker pc, String src,
+      boolean resolveLink) throws UnresolvedLinkException,
+  FileNotFoundException, AccessControlException {
+    INodesInPath iip = resolvePath(pc, src, resolveLink);
+    if (iip.isSnapshot()) {
+      throw new SnapshotAccessControlException(
+          "Modification on a read-only snapshot is disallowed");
+    }
+    return iip;
+  }
+
+  INodesInPath resolvePath(FSPermissionChecker pc, String src, long fileId)
+      throws UnresolvedLinkException, FileNotFoundException,
+      AccessControlException {
+    // Older clients may not have given us an inode ID to work with.
+    // In this case, we have to try to resolve the path and hope it
+    // hasn't changed or been deleted since the file was opened for write.
+    INodesInPath iip;
+    if (fileId == HdfsConstants.GRANDFATHER_INODE_ID) {
+      iip = resolvePath(pc, src);
+    } else {
+      INode inode = getInode(fileId);
+      if (inode == null) {
+        iip = INodesInPath.fromComponents(INode.getPathComponents(src));
+      } else {
+        iip = INodesInPath.fromINode(inode);
+      }
+    }
+    return iip;
+  }
+
+  // this method can be removed after IIP is used more extensively
+  static String resolvePath(String src,
+      FSDirectory fsd) throws FileNotFoundException {
+    byte[][] pathComponents = INode.getPathComponents(src);
+    pathComponents = resolveComponents(pathComponents, fsd);
+    return DFSUtil.byteArray2PathString(pathComponents);
+  public static boolean isExactReservedName(byte[][] components) {
+    return CHECK_RESERVED_FILE_NAMES &&
+           (components.length == 2) &&
+           isReservedName(components);
+  }
+
-    return (components.length > 2) &&
+    return (components.length > 1) &&
+  static boolean isReservedRawName(byte[][] components) {
+    return (components.length > 2) &&
+           isReservedName(components) &&
+           Arrays.equals(RAW, components[2]);
+  }
+
-   * @param src path that is being processed
+   * @param pathComponents to be resolved
-   *         in {@code src} as is. If the path refers to a path in the "raw"
-   *         directory, return the non-raw pathname.
+   *         in {@code pathComponents} as is. If the path refers to a path in
+   *         the "raw" directory, return the non-raw pathname.
-  static String resolvePath(String src,
+  static byte[][] resolveComponents(byte[][] pathComponents,
-    byte[][] pathComponents = INode.getPathComponents(src);
-    if (!isReservedName(pathComponents)) {
+    if (nComponents < 3 || !isReservedName(pathComponents)) {
-    // this double conversion will be unnecessary when resolving returns
-    // INodesInPath (needs components byte[][])
-    return DFSUtil.byteArray2PathString(pathComponents);
+    return pathComponents;
-  INode getINode4DotSnapshot(String src) throws UnresolvedLinkException {
+  INode getINode4DotSnapshot(INodesInPath iip) throws UnresolvedLinkException {
-        src.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR),
-        "%s does not end with %s", src, HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR);
+        iip.isDotSnapshotDir(), "%s does not end with %s",
+        iip.getPath(), HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR);
-    final String dirPath = normalizePath(src.substring(0,
-        src.length() - HdfsConstants.DOT_SNAPSHOT_DIR.length()));
-
-    final INode node = this.getINode(dirPath);
+    final INode node = iip.getINode(-2);

INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 UPD43 INS43 INS8 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS43 INS42 INS44 MOV44 INS44 INS43 INS43 INS43 INS8 INS83 MOV43 INS42 MOV44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS5 UPD42 INS44 MOV43 INS42 INS44 MOV43 INS8 INS42 INS42 INS14 UPD42 UPD42 INS42 MOV41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS60 INS25 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS60 INS25 INS41 INS43 INS42 INS42 MOV60 INS21 MOV41 INS5 INS42 INS41 INS5 INS42 INS41 INS39 INS85 INS85 INS5 INS42 INS41 INS43 INS42 INS21 MOV60 MOV25 MOV41 INS43 INS34 INS9 INS34 INS34 INS34 INS34 INS33 INS33 INS33 INS33 INS40 INS38 INS34 INS33 INS40 INS33 INS42 INS42 INS5 INS59 INS27 MOV8 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS7 INS39 INS85 INS85 INS27 INS39 INS85 INS85 INS27 UPD42 UPD66 UPD66 UPD66 INS39 INS85 INS85 INS27 INS42 INS42 INS32 INS42 INS34 UPD42 INS42 INS9 INS39 INS85 INS85 INS42 INS32 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS42 INS40 INS21 INS60 INS25 INS42 INS32 INS42 INS36 INS32 INS36 MOV36 MOV32 MOV32 UPD66 INS27 MOV38 INS42 INS42 INS32 INS45 INS32 INS40 INS42 INS42 INS42 INS42 INS27 INS42 UPD42 MOV42 INS42 INS42 INS52 INS42 INS42 MOV42 UPD42 MOV42 INS14 INS7 UPD43 MOV43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS27 INS42 INS42 INS27 UPD42 UPD42 UPD42 INS42 INS42 INS2 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS33 INS43 INS45 INS42 INS32 UPD42 INS42 INS32 INS42 INS33 INS21 INS21 INS40 INS34 INS40 INS34 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 DEL52 DEL42 DEL42 DEL32 DEL42 DEL27 DEL25 DEL8 DEL40 DEL52 DEL42 DEL42 DEL42 DEL40 DEL32 DEL45 DEL42 DEL40 DEL32 DEL21 DEL83 DEL42 DEL42 DEL34 DEL27 DEL32 DEL32 DEL59 DEL60 DEL8 DEL31