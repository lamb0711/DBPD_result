HADOOP-13421. Switch to v2 of the S3 List Objects API in S3A.
Contributed by Aaron Fabbri

+import com.amazonaws.services.s3.model.ListObjectsV2Request;
-import com.amazonaws.services.s3.model.ObjectListing;
+  private boolean useListV1;
+      int listVersion = conf.getInt(LIST_VERSION, DEFAULT_LIST_VERSION);
+      if (listVersion < 1 || listVersion > 2) {
+        LOG.warn("Configured fs.s3a.list.version {} is invalid, forcing " +
+            "version 2", listVersion);
+      }
+      useListV1 = (listVersion == 1);
+
-  protected ObjectListing listObjects(ListObjectsRequest request) {
+  protected S3ListResult listObjects(S3ListRequest request) {
-    return s3.listObjects(request);
+    if (useListV1) {
+      Preconditions.checkArgument(request.isV1());
+      return S3ListResult.v1(s3.listObjects(request.getV1()));
+    } else {
+      Preconditions.checkArgument(!request.isV1());
+      return S3ListResult.v2(s3.listObjectsV2(request.getV2()));
+    }
-   * @param objects paged result
+   * @param request last list objects request to continue
+   * @param prevResult last paged result to continue from
-  protected ObjectListing continueListObjects(ObjectListing objects) {
+  protected S3ListResult continueListObjects(S3ListRequest request,
+      S3ListResult prevResult) {
-    return s3.listNextBatchOfObjects(objects);
+    if (useListV1) {
+      Preconditions.checkArgument(request.isV1());
+      return S3ListResult.v1(s3.listNextBatchOfObjects(prevResult.getV1()));
+    } else {
+      Preconditions.checkArgument(!request.isV1());
+      request.getV2().setContinuationToken(prevResult.getV2()
+          .getNextContinuationToken());
+      return S3ListResult.v2(s3.listObjectsV2(request.getV2()));
+    }
-        ListObjectsRequest request = createListObjectsRequest(key, null);
+        S3ListRequest request = createListObjectsRequest(key, null);
-        ObjectListing objects = listObjects(request);
+        S3ListResult objects = listObjects(request);
-            objects = continueListObjects(objects);
+            objects = continueListObjects(request, objects);
-      ListObjectsRequest request = createListObjectsRequest(key, "/");
+      S3ListRequest request = createListObjectsRequest(key, "/");
-  ListObjectsRequest createListObjectsRequest(String key,
+  S3ListRequest createListObjectsRequest(String key,
-    ListObjectsRequest request = new ListObjectsRequest();
-    request.setBucketName(bucket);
-    request.setMaxKeys(maxKeys);
-    request.setPrefix(key);
-    if (delimiter != null) {
-      request.setDelimiter(delimiter);
+    return createListObjectsRequest(key, delimiter, null);
+  }
+
+  private S3ListRequest createListObjectsRequest(String key,
+      String delimiter, Integer overrideMaxKeys) {
+    if (!useListV1) {
+      ListObjectsV2Request request =
+          new ListObjectsV2Request().withBucketName(bucket)
+              .withMaxKeys(maxKeys)
+              .withPrefix(key);
+      if (delimiter != null) {
+        request.setDelimiter(delimiter);
+      }
+      if (overrideMaxKeys != null) {
+        request.setMaxKeys(overrideMaxKeys);
+      }
+      return S3ListRequest.v2(request);
+    } else {
+      ListObjectsRequest request = new ListObjectsRequest();
+      request.setBucketName(bucket);
+      request.setMaxKeys(maxKeys);
+      request.setPrefix(key);
+      if (delimiter != null) {
+        request.setDelimiter(delimiter);
+      }
+      if (overrideMaxKeys != null) {
+        request.setMaxKeys(overrideMaxKeys);
+      }
+      return S3ListRequest.v1(request);
-    return request;
-      ListObjectsRequest request = new ListObjectsRequest();
-      request.setBucketName(bucket);
-      request.setPrefix(key);
-      request.setDelimiter("/");
-      request.setMaxKeys(1);
+      S3ListRequest request = createListObjectsRequest(key, "/", 1);
-      ObjectListing objects = listObjects(request);
+      S3ListResult objects = listObjects(request);
+    sb.append(", useListV1=").append(useListV1);

MOV26 UPD40 INS23 INS31 INS83 INS39 INS59 UPD43 INS8 UPD43 INS44 INS8 UPD43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 UPD42 UPD43 MOV21 MOV21 INS25 INS65 UPD42 INS43 INS42 UPD43 UPD42 MOV21 MOV21 INS25 UPD42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS21 UPD42 INS42 INS8 INS8 INS42 INS66 UPD42 UPD66 INS42 UPD42 INS42 INS8 INS8 INS32 INS42 INS42 INS42 INS38 INS8 MOV8 INS32 INS60 INS25 INS21 INS21 MOV41 INS21 INS41 INS21 MOV41 INS21 INS21 INS41 INS42 INS42 INS42 INS33 INS42 INS60 INS25 INS25 INS41 INS25 INS60 INS32 INS42 INS42 INS39 INS59 INS27 INS8 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD43 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS32 UPD43 MOV43 INS59 UPD43 INS42 INS42 INS45 INS42 INS32 INS27 INS27 INS21 INS42 INS36 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS38 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS38 INS32 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 UPD42 MOV42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS32 INS27 INS42 INS42 MOV42 MOV42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 MOV42 MOV42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD43 UPD43 INS32 INS42 INS42 INS32 INS32 INS32 INS42 MOV42 MOV45 MOV34 INS42 INS42 INS27 INS42 INS42 INS34 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS14 INS42 INS42 INS43 INS42 INS42 DEL32 DEL8 DEL32 DEL8 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21