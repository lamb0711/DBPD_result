YARN-5233. Support for specifying a path for ATS plugin jars. Contributed by Li Lu

+import org.apache.hadoop.util.ApplicationClassLoader;
-import org.apache.hadoop.yarn.util.ConverterUtils;
+import java.net.MalformedURLException;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+import java.util.Arrays;
+
+    String pluginClasspath = conf.getTrimmed(
+        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH);
+    String[] systemClasses = conf.getTrimmedStrings(
+        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES);
+
+    ClassLoader customClassLoader = null;
+    if (pluginClasspath != null && pluginClasspath.length() > 0) {
+      try {
+        customClassLoader = createPluginClassLoader(pluginClasspath,
+            systemClasses);
+      } catch (IOException ioe) {
+        LOG.warn("Error loading classloader", ioe);
+      }
+    }
+
-        Class<?> clazz = conf.getClassByName(name);
-        cacheIdPlugin =
-            (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(
-                clazz, conf);
+        if (customClassLoader != null) {
+          LOG.debug("Load plugin {} with classpath: {}", name, pluginClasspath);
+          Class<?> clazz = Class.forName(name, true, customClassLoader);
+          Class<? extends TimelineEntityGroupPlugin> sClass = clazz.asSubclass(
+              TimelineEntityGroupPlugin.class);
+          cacheIdPlugin = ReflectionUtils.newInstance(sClass, conf);
+        } else {
+          LOG.debug("Load plugin class with system classpath");
+          Class<?> clazz = conf.getClassByName(name);
+          cacheIdPlugin =
+              (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(
+                  clazz, conf);
+        }
-        caught = e;
+        throw new RuntimeException("No class defined for " + name, e);
-      if (cacheIdPlugin == null) {
-        throw new RuntimeException("No class defined for " + name, caught);
-      }
+  private static ClassLoader createPluginClassLoader(
+      final String appClasspath, final String[] systemClasses)
+      throws IOException {
+    try {
+      return AccessController.doPrivileged(
+        new PrivilegedExceptionAction<ClassLoader>() {
+          @Override
+          public ClassLoader run() throws MalformedURLException {
+            return new ApplicationClassLoader(appClasspath,
+                EntityGroupFSTimelineStore.class.getClassLoader(),
+                Arrays.asList(systemClasses));
+          }
+        }
+      );
+    } catch (PrivilegedActionException e) {
+      Throwable t = e.getCause();
+      if (t instanceof MalformedURLException) {
+        throw (MalformedURLException) t;
+      }
+      throw new IOException(e);
+    }
+  }
+
+   * Get all plugins for tests.
+   * @return all plugins
+   */
+  @VisibleForTesting
+  List<TimelineEntityGroupPlugin> getPlugins() {
+    return cacheIdPlugins;
+  }
+
+  /**

MOV26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS74 INS42 INS8 INS60 INS60 INS60 INS25 INS42 INS83 INS43 INS42 INS83 INS5 INS42 INS42 INS54 INS65 INS65 INS42 INS43 INS43 INS41 INS43 INS59 INS5 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS85 INS8 INS12 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS33 INS27 INS27 INS54 INS42 INS41 INS44 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS33 INS32 INS34 INS8 INS12 INS8 INS32 INS43 INS42 INS60 INS25 INS53 INS42 INS42 INS21 INS44 INS8 INS25 INS42 INS42 INS14 INS42 INS43 INS59 INS62 INS8 INS14 INS7 INS43 INS42 INS21 INS27 INS8 MOV8 INS53 INS74 INS1 INS42 INS42 INS32 INS42 INS43 INS53 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS60 INS60 INS21 INS21 INS14 INS43 INS43 INS31 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS74 INS59 INS74 INS59 INS7 INS32 MOV43 MOV27 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS76 INS42 INS32 INS43 INS76 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS43 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25