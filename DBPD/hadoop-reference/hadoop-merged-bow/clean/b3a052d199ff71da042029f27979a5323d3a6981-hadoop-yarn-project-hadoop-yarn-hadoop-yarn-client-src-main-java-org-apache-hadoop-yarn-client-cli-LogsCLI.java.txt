YARN-9044. LogsCLI should contact ATSv2 for -am option. Contributed by Rohith Sharma K S

+import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntityType;
+import org.apache.hadoop.yarn.server.metrics.AppAttemptMetricsConstants;
-            amContainersList = getAMContainerInfoForAHSWebService(conf, appId);
-            if (amContainersList != null && !amContainersList.isEmpty()) {
-              getAMContainerLists = true;
-              for (JSONObject amContainer : amContainersList) {
-                ContainerLogsRequest amRequest = new ContainerLogsRequest(
-                    request);
-                amRequest.setContainerId(
-                    amContainer.getString("amContainerId"));
-                requests.add(amRequest);
+            if (YarnConfiguration.timelineServiceV2Enabled(conf)) {
+              try {
+                amContainersList =
+                    getAMContainerInfoFromTimelineReader(conf, appId);
+                getAMContainerLists =
+                    createContainerLogsRequestForMasterContainer(requests,
+                        request, amContainersList,
+                        AppAttemptMetricsConstants.MASTER_CONTAINER_INFO);
+              } catch (Exception e) {
+                System.err.println(
+                    "Unable to get AM container informations from "
+                        + "TimelineReader for the application:" + appId);
+                if (YarnConfiguration.timelineServiceV1Enabled(conf)
+                    || YarnConfiguration.timelineServiceV15Enabled(conf)) {
+                  getAMContainerLists =
+                      getAMContainerInfoForAHSWebService(conf, appId, requests,
+                          request);
+                } else {
+                  throw e;
+                }
+            } else {
+              getAMContainerLists =
+                  getAMContainerInfoForAHSWebService(conf, appId, requests,
+                      request);
+  private boolean getAMContainerInfoForAHSWebService(Configuration conf,
+      String appId, List<ContainerLogsRequest> requests,
+      ContainerLogsRequest request) throws JSONException {
+    List<JSONObject> amContainersList =
+        getAMContainerInfoForAHSWebService(conf, appId);
+    return createContainerLogsRequestForMasterContainer(requests, request,
+        amContainersList, "amContainerId");
+  }
+
+  private boolean createContainerLogsRequestForMasterContainer(
+      List<ContainerLogsRequest> requests, ContainerLogsRequest request,
+      List<JSONObject> amContainersList, String masterContainerInfo)
+      throws JSONException {
+    boolean getAMContainerLists = false;
+    if (amContainersList != null && !amContainersList.isEmpty()) {
+      getAMContainerLists = true;
+      for (JSONObject amContainer : amContainersList) {
+        ContainerLogsRequest amRequest = new ContainerLogsRequest(request);
+        amRequest.setContainerId(amContainer.getString(masterContainerInfo));
+        requests.add(amRequest);
+      }
+    }
+    return getAMContainerLists;
+  }
+
+  private List<JSONObject> getAMContainerInfoFromTimelineReader(
+      Configuration conf, String appId)
+      throws IOException, ClientHandlerException, UniformInterfaceException,
+      JSONException {
+    ClientResponse response = getClientResponseFromTimelineReader(conf, appId);
+
+    JSONArray appAttemptEntities = response.getEntity(JSONArray.class);
+    List<JSONObject> amContainersList = new ArrayList<JSONObject>();
+    for (int i = 0; i < appAttemptEntities.length(); i++) {
+      JSONObject appAttemptEntity = appAttemptEntities.getJSONObject(i);
+      JSONObject infoField = appAttemptEntity.getJSONObject("info");
+      amContainersList.add(infoField);
+    }
+    Collections.reverse(amContainersList);
+    return amContainersList;
+  }
+
+  protected ClientResponse getClientResponseFromTimelineReader(
+      Configuration conf, String appId) throws IOException {
+    String webAppAddress = WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils
+        .getTimelineReaderWebAppURLWithoutScheme(conf);
+    WebResource webResource = webServiceClient.resource(webAppAddress);
+
+    ClientResponse response =
+        webResource.path("ws").path("v2").path("timeline").path("clusters")
+            .path(conf.get(YarnConfiguration.RM_CLUSTER_ID)).path("apps")
+            .path(appId).path("entities")
+            .path(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString())
+            .queryParam("fields", "INFO").accept(MediaType.APPLICATION_JSON)
+            .get(ClientResponse.class);
+
+    if (response == null
+        || response.getStatusInfo().getStatusCode() != ClientResponse.Status.OK
+        .getStatusCode()) {
+      String msg =
+          "Response from the timeline reader server is " + ((response == null) ?
+              "null" :
+              "not successful," + " HTTP error code: " + response.getStatus()
+                  + ", Server response:\n" + response.getEntity(String.class));
+      System.out.println(msg);
+      throw new IOException(msg);
+    }
+    return response;
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 MOV8 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS41 INS74 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS24 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS41 INS42 INS42 INS43 INS43 INS42 INS74 INS59 INS32 INS43 INS43 INS42 INS43 INS43 INS42 INS39 INS59 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS74 INS59 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS8 INS42 INS42 INS43 INS43 INS42 MOV32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS60 INS21 INS53 MOV21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS74 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS57 INS42 INS33 INS32 INS32 INS43 INS59 INS32 INS14 MOV32 INS8 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS43 INS32 INS42 INS40 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS43 INS42 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS45 INS36 INS42 MOV38 MOV8 INS8 INS32 INS42 INS32 INS16 INS54 INS42 INS32 INS42 INS45 INS40 INS42 INS36 INS45 INS27 INS8 MOV12 INS32 INS42 INS42 INS27 INS27 INS32 INS45 INS32 MOV25 INS32 INS42 INS45 INS42 INS33 INS45 INS45 INS42 INS42 INS42 INS42 INS57 INS32 INS8 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS21 INS32 INS42 INS45 INS42 INS42 INS40 INS42 INS8 INS12 INS7 INS32 INS42 INS45 INS21 INS21 INS44 INS8 INS42 INS32 INS32 INS42 INS45 INS7 INS7 INS43 INS42 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS27 INS32 INS32 INS21 INS53 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL8 DEL8 DEL42 DEL7 DEL21 DEL45