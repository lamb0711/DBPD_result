HDFS-12636. Ozone: OzoneFileSystem: Implement seek functionality for rpc client. Contributed by Lokesh Jain.

+import org.apache.hadoop.fs.FSExceptionMessages;
+import org.apache.hadoop.fs.Seekable;
+import org.apache.ratis.util.Preconditions;
+import java.io.EOFException;
+import java.util.Arrays;
-public class ChunkGroupInputStream extends InputStream {
+public class ChunkGroupInputStream extends InputStream implements Seekable {
+  // streamOffset[i] stores the offset at which chunkInputStream i stores
+  // data in the key
+  private long[] streamOffset = null;
+  private long length = 0;
+  private boolean closed = false;
+  private String key;
-   * @param stream the stream instance.
-   * @param length the max number of bytes that should be written to this
-   *               stream.
+   * @param stream       the stream instance.
+   * @param streamLength the max number of bytes that should be written to this
+   *                     stream.
-  public synchronized void addStream(InputStream stream, long length) {
-    streamEntries.add(new ChunkInputStreamEntry(stream, length));
+  public synchronized void addStream(ChunkInputStream stream,
+      long streamLength) {
+    streamEntries.add(new ChunkInputStreamEntry(stream, streamLength));
+    checkNotClosed();
-      throw new IndexOutOfBoundsException();
+      return EOF;
+    checkNotClosed();
-  private static class ChunkInputStreamEntry extends InputStream {
+  @Override
+  public void seek(long pos) throws IOException {
+    checkNotClosed();
+    if (pos < 0 || pos >= length) {
+      if (pos == 0) {
+        // It is possible for length and pos to be zero in which case
+        // seek should return instead of throwing exception
+        return;
+      }
+      throw new EOFException(
+          "EOF encountered at pos: " + pos + " for key: " + key);
+    }
+    Preconditions.assertTrue(currentStreamIndex >= 0);
+    if (currentStreamIndex >= streamEntries.size()) {
+      currentStreamIndex = Arrays.binarySearch(streamOffset, pos);
+    } else if (pos < streamOffset[currentStreamIndex]) {
+      currentStreamIndex =
+          Arrays.binarySearch(streamOffset, 0, currentStreamIndex, pos);
+    } else if (pos >= streamOffset[currentStreamIndex] + streamEntries
+        .get(currentStreamIndex).length) {
+      currentStreamIndex = Arrays
+          .binarySearch(streamOffset, currentStreamIndex + 1,
+              streamEntries.size(), pos);
+    }
+    if (currentStreamIndex < 0) {
+      // Binary search returns -insertionPoint - 1  if element is not present
+      // in the array. insertionPoint is the point at which element would be
+      // inserted in the sorted array. We need to adjust the currentStreamIndex
+      // accordingly so that currentStreamIndex = insertionPoint - 1
+      currentStreamIndex = -currentStreamIndex - 2;
+    }
+    // seek to the proper offset in the ChunkInputStream
+    streamEntries.get(currentStreamIndex)
+        .seek(pos - streamOffset[currentStreamIndex]);
+  }
-    private final InputStream inputStream;
+  @Override
+  public long getPos() throws IOException {
+    return length == 0 ? 0 :
+        streamOffset[currentStreamIndex] + streamEntries.get(currentStreamIndex)
+            .getPos();
+  }
+
+  @Override
+  public boolean seekToNewSource(long targetPos) throws IOException {
+    return false;
+  }
+
+  @Override
+  public int available() throws IOException {
+    checkNotClosed();
+    long remaining = length - getPos();
+    return remaining <= Integer.MAX_VALUE ? (int) remaining : Integer.MAX_VALUE;
+  }
+
+  @Override
+  public void close() throws IOException {
+    closed = true;
+    for (int i = 0; i < streamEntries.size(); i++) {
+      streamEntries.get(i).close();
+    }
+  }
+
+  /**
+   * Encapsulates ChunkInputStream.
+   */
+  public static class ChunkInputStreamEntry extends InputStream
+      implements Seekable {
+
+    private final ChunkInputStream chunkInputStream;
-
-    ChunkInputStreamEntry(InputStream chunkInputStream, long length) {
-      this.inputStream = chunkInputStream;
+    public ChunkInputStreamEntry(ChunkInputStream chunkInputStream,
+        long length) {
+      this.chunkInputStream = chunkInputStream;
-      int readLen = inputStream.read(b, off, len);
+      int readLen = chunkInputStream.read(b, off, len);
-      int data = inputStream.read();
+      int data = chunkInputStream.read();
-      inputStream.close();
+      chunkInputStream.close();
+    }
+
+    @Override
+    public void seek(long pos) throws IOException {
+      chunkInputStream.seek(pos);
+    }
+
+    @Override
+    public long getPos() throws IOException {
+      return chunkInputStream.getPos();
+    }
+
+    @Override
+    public boolean seekToNewSource(long targetPos) throws IOException {
+      return false;
-    for (KsmKeyLocationInfo ksmKeyLocationInfo :
-        keyInfo.getLatestVersionLocations().getBlocksLatestVersionOnly()) {
+    groupInputStream.key = keyInfo.getKeyName();
+    List<KsmKeyLocationInfo> keyLocationInfos =
+        keyInfo.getLatestVersionLocations().getBlocksLatestVersionOnly();
+    groupInputStream.streamOffset = new long[keyLocationInfos.size()];
+    for (int i = 0; i < keyLocationInfos.size(); i++) {
+      KsmKeyLocationInfo ksmKeyLocationInfo = keyLocationInfos.get(i);
+        groupInputStream.streamOffset[i] = length;
+    groupInputStream.length = length;
+
+  /**
+   * Verify that the input stream is open. Non blocking; this gives
+   * the last state of the volatile {@link #closed} field.
+   * @throws IOException if the connection is closed.
+   */
+  private void checkNotClosed() throws IOException {
+    if (closed) {
+      throw new IOException(
+          ": " + FSExceptionMessages.STREAM_IS_CLOSED + " Key: " + key);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 MOV43 INS8 MOV78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS29 UPD83 INS43 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS43 INS8 INS39 INS85 INS42 INS33 INS42 INS34 INS42 INS9 INS42 INS42 UPD43 UPD42 INS21 INS21 INS42 INS39 INS42 INS21 INS25 INS21 INS25 INS25 INS21 INS42 INS41 INS42 INS39 INS42 INS42 INS41 INS42 INS42 INS21 INS60 INS41 INS42 INS42 INS21 INS24 INS65 INS42 UPD43 INS83 INS78 INS43 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS21 INS60 INS21 INS24 INS21 INS65 INS65 INS42 INS25 UPD66 UPD42 UPD42 INS32 INS32 INS32 INS27 INS8 INS32 INS27 INS8 INS25 INS27 INS8 INS32 INS16 INS9 INS32 INS39 INS59 INS16 INS7 INS58 INS27 INS37 INS8 INS66 UPD42 UPD42 UPD43 INS42 INS42 INS42 INS39 INS42 INS42 INS21 INS42 INS42 INS41 INS42 INS39 INS42 INS42 INS41 INS7 INS74 INS59 INS7 INS58 INS27 INS37 MOV8 INS7 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS8 INS42 INS41 INS42 INS42 INS27 INS27 INS25 INS53 INS42 INS42 INS27 INS42 INS32 INS21 INS27 INS8 INS25 INS42 INS34 INS21 INS32 INS42 INS27 INS27 INS34 INS27 INS42 INS42 INS27 INS27 INS11 INS40 INS42 INS9 INS39 INS59 INS42 INS32 INS42 INS21 UPD42 INS32 INS32 INS9 INS40 INS32 INS43 INS43 INS42 MOV32 INS40 INS3 INS39 INS59 INS42 INS32 INS42 INS60 INS40 INS42 INS67 INS53 UPD42 INS42 INS42 INS34 INS42 INS42 INS27 INS8 INS14 INS42 INS34 INS42 INS42 INS7 INS42 INS2 INS21 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS2 INS42 INS34 INS2 INS32 INS42 INS32 INS42 INS40 INS39 INS42 INS42 INS34 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS34 INS42 INS42 MOV43 INS59 INS42 INS14 INS42 INS34 INS41 INS43 INS27 INS42 INS32 INS42 INS42 INS7 INS42 INS27 INS21 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 UPD42 UPD42 INS39 INS85 INS42 INS42 INS42 INS32 INS21 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS2 INS22 INS7 INS38 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS45 INS40 INS45 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS40 INS42 INS42 INS34 INS42 INS42 DEL42 DEL43 DEL14 DEL53 DEL42 DEL44 DEL70