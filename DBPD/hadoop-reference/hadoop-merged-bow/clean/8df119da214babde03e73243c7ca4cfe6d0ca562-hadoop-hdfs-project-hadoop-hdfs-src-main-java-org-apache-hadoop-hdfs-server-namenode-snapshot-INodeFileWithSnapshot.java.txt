HDFS-5537. Remove FileWithSnapshot interface.  Contributed by jing9


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546184 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
-public class INodeFileWithSnapshot extends INodeFile
-    implements FileWithSnapshot {
+public class INodeFileWithSnapshot extends INodeFile {
-    this(f, f instanceof FileWithSnapshot?
-        ((FileWithSnapshot)f).getDiffs(): null);
+    this(f, f instanceof INodeFileWithSnapshot ? 
+        ((INodeFileWithSnapshot) f).getDiffs() : null);
-  @Override
+  /** Is the current file deleted? */
-  @Override
+  /** Delete the file from the current tree */
-  @Override
-  public INodeFile asINodeFile() {
-    return this;
-  }
-
-  @Override
+  /** @return the file diff list. */
-      Util.collectBlocksAndClear(this, collectedBlocks, removedINodes);
+      this.collectBlocksAndClear(collectedBlocks, removedINodes);
+  
+  /** 
+   * @return block replication, which is the max file replication among
+   *         the file and the diff list.
+   */
+  @Override
+  public short getBlockReplication() {
+    short max = isCurrentFileDeleted() ? 0 : getFileReplication();
+    for(FileDiff d : getDiffs()) {
+      if (d.snapshotINode != null) {
+        final short replication = d.snapshotINode.getFileReplication();
+        if (replication > max) {
+          max = replication;
+        }
+      }
+    }
+    return max;
+  }
+  
+  /**
+   * If some blocks at the end of the block list no longer belongs to
+   * any inode, collect them and update the block list.
+   */
+  void collectBlocksAndClear(final BlocksMapUpdateInfo info,
+      final List<INode> removedINodes) {
+    // check if everything is deleted.
+    if (isCurrentFileDeleted() && getDiffs().asList().isEmpty()) {
+      destroyAndCollectBlocks(info, removedINodes);
+      return;
+    }
+
+    // find max file size.
+    final long max;
+    if (isCurrentFileDeleted()) {
+      final FileDiff last = getDiffs().getLast();
+      max = last == null? 0: last.getFileSize();
+    } else { 
+      max = computeFileSize();
+    }
+
+    collectBlocksBeyondMax(max, info);
+  }
+
+  private void collectBlocksBeyondMax(final long max,
+      final BlocksMapUpdateInfo collectedBlocks) {
+    final BlockInfo[] oldBlocks = getBlocks();
+    if (oldBlocks != null) {
+      //find the minimum n such that the size of the first n blocks > max
+      int n = 0;
+      for(long size = 0; n < oldBlocks.length && max > size; n++) {
+        size += oldBlocks[n].getNumBytes();
+      }
+      
+      // starting from block n, the data is beyond max.
+      if (n < oldBlocks.length) {
+        // resize the array.  
+        final BlockInfo[] newBlocks;
+        if (n == 0) {
+          newBlocks = null;
+        } else {
+          newBlocks = new BlockInfo[n];
+          System.arraycopy(oldBlocks, 0, newBlocks, 0, n);
+        }
+        
+        // set new blocks
+        setBlocks(newBlocks);
+
+        // collect the blocks beyond max.  
+        if (collectedBlocks != null) {
+          for(; n < oldBlocks.length; n++) {
+            collectedBlocks.addDeleteBlock(oldBlocks[n]);
+          }
+        }
+      }
+    }
+  }
+  
+  Quota.Counts updateQuotaAndCollectBlocks(FileDiff removed,
+      BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes) {
+    long oldDiskspace = this.diskspaceConsumed();
+    if (removed.snapshotINode != null) {
+      short replication = removed.snapshotINode.getFileReplication();
+      short currentRepl = getBlockReplication();
+      if (currentRepl == 0) {
+        oldDiskspace = computeFileSize(true, true) * replication;
+      } else if (replication > currentRepl) {  
+        oldDiskspace = oldDiskspace / getBlockReplication()
+            * replication;
+      }
+    }
+    
+    this.collectBlocksAndClear(collectedBlocks, removedINodes);
+    
+    long dsDelta = oldDiskspace - diskspaceConsumed();
+    return Quota.Counts.newInstance(0, dsDelta);
+  }

INS26 MOV31 INS40 INS31 INS31 INS31 INS29 INS29 INS29 INS29 MOV78 INS83 INS39 INS42 INS8 INS29 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS60 INS70 INS41 INS65 INS83 INS43 INS42 INS83 INS74 INS42 INS25 INS60 INS25 INS21 INS83 INS39 INS42 INS83 INS43 INS42 INS60 INS25 INS40 INS43 INS42 INS43 INS42 INS83 INS74 INS42 INS60 INS25 INS21 INS60 INS41 INS66 INS66 INS66 INS66 INS66 INS39 INS59 INS44 INS32 INS8 INS42 INS66 INS66 INS42 INS43 INS43 INS27 INS8 INS83 INS39 INS59 INS32 INS8 INS8 INS32 INS42 INS83 INS5 INS59 INS27 INS8 INS42 INS42 INS43 INS43 INS39 INS59 INS27 INS8 INS32 INS39 INS59 INS32 INS42 INS16 INS43 INS42 INS42 INS25 INS42 UPD42 MOV42 INS32 INS32 INS21 MOV41 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS42 INS33 INS60 INS24 INS25 INS42 INS42 INS42 INS32 INS40 INS33 INS60 INS60 INS25 INS52 INS42 INS42 INS42 INS42 INS27 INS40 INS42 INS34 INS42 UPD43 INS32 INS34 INS32 INS42 INS27 INS8 INS42 INS32 INS42 INS32 INS83 INS43 INS59 INS7 INS7 INS42 INS42 INS39 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS52 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS42 INS32 UPD42 INS52 INS42 INS42 INS40 INS33 INS60 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS16 INS42 INS32 INS42 INS34 INS39 INS59 INS27 INS27 INS42 INS21 INS42 INS40 INS60 INS25 INS21 INS25 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS27 INS8 INS42 UPD43 INS83 INS39 INS59 INS27 INS8 INS42 INS32 INS42 INS27 INS34 INS32 INS42 INS42 INS34 INS42 INS40 INS42 INS42 INS7 INS83 INS5 INS59 INS27 INS8 INS8 INS32 INS27 INS8 INS40 INS42 INS42 INS7 INS42 INS42 INS21 UPD42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS34 INS21 INS21 INS21 INS42 INS42 INS42 INS33 INS24 INS42 INS27 INS7 INS40 INS42 INS7 INS2 INS42 INS42 INS7 INS7 INS32 INS27 INS37 INS8 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS40 INS42 INS21 INS42 INS9 INS9 INS27 INS42 INS5 INS42 INS32 INS42 INS32 INS43 INS85 INS42 INS42 INS2 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL78 DEL42 DEL78 DEL42 DEL52 DEL52 DEL42 DEL78 DEL83 DEL43 DEL42 DEL8