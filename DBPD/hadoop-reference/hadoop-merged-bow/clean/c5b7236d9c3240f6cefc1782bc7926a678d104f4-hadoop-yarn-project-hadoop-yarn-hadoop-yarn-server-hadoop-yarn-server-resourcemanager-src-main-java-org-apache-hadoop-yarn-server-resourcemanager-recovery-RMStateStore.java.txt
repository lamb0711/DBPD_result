merge from trunk r1602933

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1602947 13f79535-47bb-0310-9956-ffa450edef68

-import java.nio.ByteBuffer;
-import org.apache.hadoop.io.DataOutputBuffer;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.ApplicationAttemptStateData;
+import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.ApplicationStateData;
+import org.apache.hadoop.yarn.state.InvalidStateTransitonException;
+import org.apache.hadoop.yarn.state.SingleArcTransition;
+import org.apache.hadoop.yarn.state.StateMachine;
+import org.apache.hadoop.yarn.state.StateMachineFactory;
+  private enum RMStateStoreState {
+    DEFAULT
+  };
+
+  private static final StateMachineFactory<RMStateStore,
+                                           RMStateStoreState,
+                                           RMStateStoreEventType, 
+                                           RMStateStoreEvent>
+      stateMachineFactory = new StateMachineFactory<RMStateStore,
+                                                    RMStateStoreState,
+                                                    RMStateStoreEventType,
+                                                    RMStateStoreEvent>(
+      RMStateStoreState.DEFAULT)
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
+          RMStateStoreEventType.STORE_APP, new StoreAppTransition())
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
+          RMStateStoreEventType.UPDATE_APP, new UpdateAppTransition())
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
+          RMStateStoreEventType.REMOVE_APP, new RemoveAppTransition())
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
+          RMStateStoreEventType.STORE_APP_ATTEMPT, new StoreAppAttemptTransition())
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
+          RMStateStoreEventType.UPDATE_APP_ATTEMPT, new UpdateAppAttemptTransition());
+
+  private final StateMachine<RMStateStoreState,
+                             RMStateStoreEventType,
+                             RMStateStoreEvent> stateMachine;
+
+  private static class StoreAppTransition
+      implements SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateStoreAppEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      ApplicationState appState = ((RMStateStoreAppEvent) event).getAppState();
+      ApplicationId appId = appState.getAppId();
+      ApplicationStateData appStateData = ApplicationStateData
+          .newInstance(appState);
+      LOG.info("Storing info for app: " + appId);
+      try {
+        store.storeApplicationStateInternal(appId, appStateData);
+        store.notifyDoneStoringApplication(appId, null);
+      } catch (Exception e) {
+        LOG.error("Error storing app: " + appId, e);
+        store.notifyStoreOperationFailed(e);
+      }
+    };
+  }
+
+  private static class UpdateAppTransition implements
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateUpdateAppEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      ApplicationState appState = ((RMStateUpdateAppEvent) event).getAppState();
+      ApplicationId appId = appState.getAppId();
+      ApplicationStateData appStateData = ApplicationStateData
+          .newInstance(appState);
+      LOG.info("Updating info for app: " + appId);
+      try {
+        store.updateApplicationStateInternal(appId, appStateData);
+        store.notifyDoneUpdatingApplication(appId, null);
+      } catch (Exception e) {
+        LOG.error("Error updating app: " + appId, e);
+        store.notifyStoreOperationFailed(e);
+      }
+    };
+  }
+
+  private static class RemoveAppTransition implements
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateStoreRemoveAppEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      ApplicationState appState = ((RMStateStoreRemoveAppEvent) event)
+          .getAppState();
+      ApplicationId appId = appState.getAppId();
+      LOG.info("Removing info for app: " + appId);
+      try {
+        store.removeApplicationStateInternal(appState);
+      } catch (Exception e) {
+        LOG.error("Error removing app: " + appId, e);
+        store.notifyStoreOperationFailed(e);
+      }
+    };
+  }
+
+  private static class StoreAppAttemptTransition implements
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateStoreAppAttemptEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      ApplicationAttemptState attemptState =
+          ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();
+      try {
+        ApplicationAttemptStateData attemptStateData = 
+            ApplicationAttemptStateData.newInstance(attemptState);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Storing info for attempt: " + attemptState.getAttemptId());
+        }
+        store.storeApplicationAttemptStateInternal(attemptState.getAttemptId(),
+            attemptStateData);
+        store.notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),
+            null);
+      } catch (Exception e) {
+        LOG.error("Error storing appAttempt: " + attemptState.getAttemptId(), e);
+        store.notifyStoreOperationFailed(e);
+      }
+    };
+  }
+
+  private static class UpdateAppAttemptTransition implements
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
+    @Override
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
+      if (!(event instanceof RMStateUpdateAppAttemptEvent)) {
+        // should never happen
+        LOG.error("Illegal event type: " + event.getClass());
+        return;
+      }
+      ApplicationAttemptState attemptState =
+          ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();
+      try {
+        ApplicationAttemptStateData attemptStateData = ApplicationAttemptStateData
+            .newInstance(attemptState);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Updating info for attempt: " + attemptState.getAttemptId());
+        }
+        store.updateApplicationAttemptStateInternal(attemptState.getAttemptId(),
+            attemptStateData);
+        store.notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),
+            null);
+      } catch (Exception e) {
+        LOG.error("Error updating appAttempt: " + attemptState.getAttemptId(), e);
+        store.notifyStoreOperationFailed(e);
+      }
+    };
+  }
+
+    stateMachine = stateMachineFactory.make(this);
-      ApplicationStateDataPBImpl appStateData) throws Exception;
+      ApplicationStateData appStateData) throws Exception;
-      ApplicationStateDataPBImpl appStateData) throws Exception;
+      ApplicationStateData appStateData) throws Exception;
-      ApplicationAttemptStateDataPBImpl attemptStateData) throws Exception;
+      ApplicationAttemptStateData attemptStateData) throws Exception;
-      ApplicationAttemptStateDataPBImpl attemptStateData) throws Exception;
+      ApplicationAttemptStateData attemptStateData) throws Exception;
-    if (event.getType().equals(RMStateStoreEventType.STORE_APP)
-        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {
-      ApplicationState appState = null;
-      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {
-        appState = ((RMStateStoreAppEvent) event).getAppState();
-      } else {
-        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);
-        appState = ((RMStateUpdateAppEvent) event).getAppState();
-      }
-
-      Exception storedException = null;
-      ApplicationStateDataPBImpl appStateData =
-          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl
-            .newApplicationStateData(appState.getSubmitTime(),
-              appState.getStartTime(), appState.getUser(),
-              appState.getApplicationSubmissionContext(), appState.getState(),
-              appState.getDiagnostics(), appState.getFinishTime());
-
-      ApplicationId appId =
-          appState.getApplicationSubmissionContext().getApplicationId();
-
-      LOG.info("Storing info for app: " + appId);
-      try {
-        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {
-          storeApplicationStateInternal(appId, appStateData);
-          notifyDoneStoringApplication(appId, storedException);
-        } else {
-          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);
-          updateApplicationStateInternal(appId, appStateData);
-          notifyDoneUpdatingApplication(appId, storedException);
-        }
-      } catch (Exception e) {
-        LOG.error("Error storing/updating app: " + appId, e);
-        notifyStoreOperationFailed(e);
-      }
-    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)
-        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {
-
-      ApplicationAttemptState attemptState = null;
-      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {
-        attemptState =
-            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();
-      } else {
-        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);
-        attemptState =
-            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();
-      }
-
-      Exception storedException = null;
-      Credentials credentials = attemptState.getAppAttemptCredentials();
-      ByteBuffer appAttemptTokens = null;
-      try {
-        if (credentials != null) {
-          DataOutputBuffer dob = new DataOutputBuffer();
-          credentials.writeTokenStorageToStream(dob);
-          appAttemptTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());
-        }
-        ApplicationAttemptStateDataPBImpl attemptStateData =
-            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl
-              .newApplicationAttemptStateData(attemptState.getAttemptId(),
-                attemptState.getMasterContainer(), appAttemptTokens,
-                attemptState.getStartTime(), attemptState.getState(),
-                attemptState.getFinalTrackingUrl(),
-                attemptState.getDiagnostics(),
-                attemptState.getFinalApplicationStatus());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Storing info for attempt: " + attemptState.getAttemptId());
-        }
-        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {
-          storeApplicationAttemptStateInternal(attemptState.getAttemptId(),
-              attemptStateData);
-          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),
-              storedException);
-        } else {
-          assert event.getType().equals(
-            RMStateStoreEventType.UPDATE_APP_ATTEMPT);
-          updateApplicationAttemptStateInternal(attemptState.getAttemptId(),
-              attemptStateData);
-          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),
-              storedException);
-        }
-      } catch (Exception e) {
-        LOG.error(
-            "Error storing/updating appAttempt: " + attemptState.getAttemptId(), e);
-        notifyStoreOperationFailed(e);
-      }
-    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {
-      ApplicationState appState =
-          ((RMStateStoreRemoveAppEvent) event).getAppState();
-      ApplicationId appId = appState.getAppId();
-      LOG.info("Removing info for app: " + appId);
-      try {
-        removeApplicationStateInternal(appState);
-      } catch (Exception e) {
-        LOG.error("Error removing app: " + appId, e);
-        notifyStoreOperationFailed(e);
-      }
-    } else {
-      LOG.error("Unknown RMStateStoreEvent type: " + event.getType());
+    try {
+      this.stateMachine.doTransition(event.getType(), event);
+    } catch (InvalidStateTransitonException e) {
+      LOG.error("Can't handle this event at current state", e);

MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD40 INS40 INS71 INS23 INS23 INS55 INS55 INS55 INS55 INS55 INS31 INS31 INS31 INS83 INS42 INS72 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS83 INS39 INS42 MOV44 INS44 MOV43 INS83 INS83 INS39 INS42 MOV44 INS44 MOV43 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS43 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS43 UPD42 MOV42 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 MOV44 MOV8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS21 UPD43 INS43 INS42 UPD43 INS43 INS42 INS43 INS42 INS54 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS40 INS40 UPD40 MOV40 INS14 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 MOV60 INS60 MOV21 INS54 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 MOV60 INS60 INS60 MOV21 INS54 UPD42 MOV42 INS42 INS42 INS42 INS43 INS42 INS25 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS54 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS54 INS7 UPD42 INS42 UPD42 INS42 INS42 INS8 INS12 INS32 UPD42 MOV42 INS40 INS40 UPD40 MOV40 INS14 INS43 INS42 INS42 INS38 INS8 INS43 INS59 INS43 INS59 INS8 MOV12 INS42 INS42 INS38 INS8 MOV43 INS43 INS59 INS43 INS59 INS32 INS8 INS12 UPD42 MOV42 INS38 INS8 INS42 INS42 INS38 INS8 UPD43 MOV43 INS59 INS8 INS12 INS42 INS42 INS38 INS8 MOV43 INS59 INS8 INS12 INS42 INS32 INS21 INS44 INS8 INS32 UPD42 MOV42 INS40 INS40 INS40 INS14 INS43 INS42 INS36 INS21 INS41 INS42 INS42 MOV32 INS42 INS42 INS32 MOV21 MOV21 INS44 INS36 INS21 INS41 UPD42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS21 MOV21 INS44 INS8 INS36 INS21 INS41 INS36 INS21 INS41 UPD42 UPD42 MOV42 MOV32 INS60 MOV25 INS21 INS21 MOV44 INS8 INS36 MOV21 INS41 INS42 MOV32 INS60 INS25 MOV21 INS21 MOV44 INS8 INS42 INS42 INS52 INS32 INS43 INS42 MOV21 INS32 UPD42 MOV42 INS40 INS40 MOV40 INS14 INS43 INS42 INS62 INS32 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS62 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS62 INS32 INS62 INS32 INS43 INS59 INS32 INS32 MOV21 INS21 INS62 INS43 INS59 INS32 MOV8 INS32 MOV21 MOV21 INS22 INS42 MOV32 INS42 INS42 INS14 UPD42 MOV42 INS40 INS40 INS40 INS14 INS43 INS42 INS42 INS43 UPD42 MOV42 UPD42 MOV42 INS27 INS42 UPD42 INS42 UPD42 INS33 INS42 INS42 INS43 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS33 MOV42 INS32 INS32 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS43 UPD42 MOV42 INS42 INS27 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS33 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 MOV32 INS33 INS52 INS42 INS45 INS42 INS74 INS40 INS43 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 UPD42 MOV42 INS42 MOV42 UPD42 UPD42 UPD42 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD45 INS32 INS42 INS42 INS42 UPD42 UPD42 INS27 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 MOV32 INS42 INS42 UPD42 UPD42 INS27 INS45 MOV32 INS42 INS42 INS42 INS42 INS42 INS45 MOV32 DEL42 DEL32 DEL42 DEL33 DEL42 DEL7 DEL42 DEL7 DEL42 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL45 DEL27 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL32 DEL27 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL32 DEL42 DEL7 DEL21 DEL8 DEL42 DEL32 DEL42 DEL32 DEL6 DEL42 DEL7 DEL21 DEL8 DEL25 DEL43 DEL42 DEL33 DEL59 DEL60 DEL43 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL6 DEL8 DEL25 DEL8 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL32 DEL42 DEL40 DEL32 DEL27 DEL32 DEL42 DEL40 DEL32 DEL8 DEL32 DEL40 DEL32 DEL6 DEL8 DEL25 DEL43 DEL42 DEL33 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL43 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL6 DEL8 DEL25 DEL8 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31