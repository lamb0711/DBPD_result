Fix potential FSImage corruption. Contributed by Daryn Sharp.

- * The bits can be divided in four segments: <br>
- * [0:1) || [1:3) || [3:6) || [6:7) || [7:32) <br>
- * <br>
- * [0:1) -- the scope of the entry (AclEntryScope) <br>
- * [1:3) -- the type of the entry (AclEntryType) <br>
- * [3:6) -- the permission of the entry (FsAction) <br>
- * [6:7) -- A flag to indicate whether Named entry or not <br>
- * [7:8) -- Reserved <br>
- * [8:32) -- the name of the entry, which is an ID that points to a <br>
- * string in the StringTableSection. <br>
+ *
+ * Note:  this format is used both in-memory and on-disk.  Changes will be
+ * incompatible.
+ *
-public enum AclEntryStatusFormat {
+public enum AclEntryStatusFormat implements LongBitFormat.Enum {
-  SCOPE(null, 1),
-  TYPE(SCOPE.BITS, 2),
-  PERMISSION(TYPE.BITS, 3),
-  NAMED_ENTRY_CHECK(PERMISSION.BITS, 1),
-  RESERVED(NAMED_ENTRY_CHECK.BITS, 1),
-  NAME(RESERVED.BITS, 24);
+  PERMISSION(null, 3),
+  TYPE(PERMISSION.BITS, 2),
+  SCOPE(TYPE.BITS, 1),
+  NAME(SCOPE.BITS, 24);
+
+  private static final FsAction[] FSACTION_VALUES = FsAction.values();
+  private static final AclEntryScope[] ACL_ENTRY_SCOPE_VALUES =
+      AclEntryScope.values();
+  private static final AclEntryType[] ACL_ENTRY_TYPE_VALUES =
+      AclEntryType.values();
-    return AclEntryScope.values()[ordinal];
+    return ACL_ENTRY_SCOPE_VALUES[ordinal];
-    return AclEntryType.values()[ordinal];
+    return ACL_ENTRY_TYPE_VALUES[ordinal];
-    return FsAction.values()[ordinal];
+    return FSACTION_VALUES[ordinal];
-    int nameExists = (int) NAMED_ENTRY_CHECK.BITS.retrieve(aclEntry);
-    if (nameExists == 0) {
-      return null;
-    }
-    int id = (int) NAME.BITS.retrieve(aclEntry);
-    AclEntryType type = getType(aclEntry);
-    if (type == AclEntryType.USER) {
-      return SerialNumberManager.INSTANCE.getUser(id);
-    } else if (type == AclEntryType.GROUP) {
-      return SerialNumberManager.INSTANCE.getGroup(id);
+    return getName(aclEntry, null);
+  }
+
+  static String getName(int aclEntry,
+                        SerialNumberManager.StringTable stringTable) {
+    SerialNumberManager snm = getSerialNumberManager(getType(aclEntry));
+    if (snm != null) {
+      int nid = (int)NAME.BITS.retrieve(aclEntry);
+      return snm.getString(nid, stringTable);
-    if (aclEntry.getName() != null) {
-      aclEntryInt = NAMED_ENTRY_CHECK.BITS.combine(1, aclEntryInt);
-      if (aclEntry.getType() == AclEntryType.USER) {
-        int userId = SerialNumberManager.INSTANCE.getUserSerialNumber(aclEntry
-            .getName());
-        aclEntryInt = NAME.BITS.combine(userId, aclEntryInt);
-      } else if (aclEntry.getType() == AclEntryType.GROUP) {
-        int groupId = SerialNumberManager.INSTANCE
-            .getGroupSerialNumber(aclEntry.getName());
-        aclEntryInt = NAME.BITS.combine(groupId, aclEntryInt);
-      }
+    SerialNumberManager snm = getSerialNumberManager(aclEntry.getType());
+    if (snm != null) {
+      int nid = snm.getSerialNumber(aclEntry.getName());
+      aclEntryInt = NAME.BITS.combine(nid, aclEntryInt);
-    AclEntry.Builder builder = new AclEntry.Builder();
-    builder.setScope(getScope(aclEntry)).setType(getType(aclEntry))
-        .setPermission(getPermission(aclEntry));
-    if (getName(aclEntry) != null) {
-      builder.setName(getName(aclEntry));
-    }
-    return builder.build();
+    return toAclEntry(aclEntry, null);
+  }
+
+  static AclEntry toAclEntry(int aclEntry,
+                             SerialNumberManager.StringTable stringTable) {
+    return new AclEntry.Builder()
+        .setScope(getScope(aclEntry))
+        .setType(getType(aclEntry))
+        .setPermission(getPermission(aclEntry))
+        .setName(getName(aclEntry, stringTable))
+        .build();
-  public static ImmutableList<AclEntry> toAclEntries(int[] entries) {
-    ImmutableList.Builder<AclEntry> b = new ImmutableList.Builder<AclEntry>();
-    for (int entry : entries) {
-      AclEntry aclEntry = toAclEntry(entry);
-      b.add(aclEntry);
+  private static SerialNumberManager getSerialNumberManager(AclEntryType type) {
+    switch (type) {
+      case USER:
+        return SerialNumberManager.USER;
+      case GROUP:
+        return SerialNumberManager.GROUP;
+      default:
+        return null;
-    return b.build();
+  }
+
+  @Override
+  public int getLength() {
+    return BITS.getLength();

INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS40 INS33 UPD42 UPD34 UPD42 UPD40 UPD40 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS5 INS59 INS83 INS43 MOV42 INS44 INS8 INS83 MOV43 INS42 MOV44 INS44 INS8 MOV83 MOV43 UPD42 MOV42 MOV44 INS8 INS44 INS83 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 UPD66 UPD66 INS43 INS85 INS42 MOV32 INS43 INS85 INS42 MOV32 MOV43 INS85 INS42 MOV32 INS42 INS39 INS42 INS41 INS43 INS42 MOV60 INS25 MOV41 INS60 MOV25 INS39 UPD42 INS41 INS43 INS42 INS41 UPD42 MOV42 INS43 INS42 INS50 INS42 MOV41 INS42 INS42 INS32 INS40 INS43 UPD27 MOV27 MOV8 INS43 INS59 UPD27 MOV27 INS32 INS40 INS32 UPD42 MOV42 INS42 INS49 INS41 INS49 INS41 INS49 MOV41 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS33 INS42 UPD42 INS32 UPD42 INS33 MOV60 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS33 INS32 MOV42 INS42 INS40 INS42 INS40 UPD42 UPD42 INS42 MOV32 UPD42 MOV42 MOV32 MOV32 MOV42 MOV32 UPD42 INS42 UPD42 UPD42 INS42 UPD42 INS42 INS42 UPD42 UPD42 MOV14 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL33 DEL34 DEL72 DEL42 DEL40 DEL34 DEL72 DEL40 DEL40 DEL40 DEL83 DEL39 DEL42 DEL39 DEL40 DEL32 DEL11 DEL59 DEL60 DEL42 DEL34 DEL27 DEL8 DEL25 DEL42 DEL40 DEL27 DEL40 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL40 DEL40 DEL27 DEL40 DEL39 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL40 DEL34 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL39 DEL85 DEL5 DEL42 DEL40 DEL43 DEL42 DEL59 DEL60 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL41 DEL83 DEL42 DEL43 DEL74 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL40 DEL43 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31