HADOOP-15852. Refactor QuotaUsage. Contributed by Beluga Behr.

-      this.quota = -1;
-      this.spaceQuota = -1;
+      this.quota = -1L;
+      this.spaceQuota = -1L;
-      for (int i = 0; i < typeQuota.length; i++) {
-        typeQuota[i] = -1;
-      }
+      Arrays.fill(typeQuota, -1L);
-      for (int i = 0; i < typeConsumed.length; i++) {
-        this.typeConsumed[i] = typeConsumed[i];
-      }
+      System.arraycopy(typeConsumed, 0, this.typeConsumed, 0,
+          typeConsumed.length);
-      for (int i = 0; i < typeQuota.length; i++) {
-        this.typeQuota[i] = typeQuota[i];
-      }
+      System.arraycopy(typeQuota, 0, this.typeQuota, 0,
+          typeQuota.length);
-    return (typeQuota != null) ? typeQuota[type.ordinal()] : -1;
+    return (typeQuota != null) ? typeQuota[type.ordinal()] : -1L;
-    return (typeConsumed != null) ? typeConsumed[type.ordinal()] : 0;
-  }
-
-  /** Return storage type quota. */
-  private long[] getTypesQuota() {
-    return typeQuota;
-  }
-
-  /** Return storage type quota. */
-  private long[] getTypesConsumed() {
-    return typeConsumed;
+    return (typeConsumed != null) ? typeConsumed[type.ordinal()] : 0L;
-      if (typeQuota[t.ordinal()] > 0) {
+      if (typeQuota[t.ordinal()] > 0L) {
-      if (typeConsumed[t.ordinal()] > 0) {
+      if (typeConsumed[t.ordinal()] > 0L) {
-  public boolean equals(Object to) {
-    return (this == to || (to instanceof QuotaUsage &&
-        getFileAndDirectoryCount() ==
-        ((QuotaUsage) to).getFileAndDirectoryCount() &&
-        getQuota() == ((QuotaUsage) to).getQuota() &&
-        getSpaceConsumed() == ((QuotaUsage) to).getSpaceConsumed() &&
-        getSpaceQuota() == ((QuotaUsage) to).getSpaceQuota() &&
-        Arrays.equals(getTypesQuota(), ((QuotaUsage) to).getTypesQuota()) &&
-        Arrays.equals(getTypesConsumed(),
-        ((QuotaUsage) to).getTypesConsumed())));
+  public int hashCode() {
+    final int prime = 31;
+    int result = 1;
+    result = prime * result
+        + (int) (fileAndDirectoryCount ^ (fileAndDirectoryCount >>> 32));
+    result = prime * result + (int) (quota ^ (quota >>> 32));
+    result = prime * result + (int) (spaceConsumed ^ (spaceConsumed >>> 32));
+    result = prime * result + (int) (spaceQuota ^ (spaceQuota >>> 32));
+    result = prime * result + Arrays.hashCode(typeConsumed);
+    result = prime * result + Arrays.hashCode(typeQuota);
+    return result;
-  public int hashCode() {
-    long result = (getFileAndDirectoryCount() ^ getQuota() ^
-        getSpaceConsumed() ^ getSpaceQuota());
-    if (getTypesQuota() != null) {
-      for (long quota : getTypesQuota()) {
-        result ^= quota;
-      }
+  public boolean equals(Object obj) {
+    if (this == obj) {
+      return true;
-    if (getTypesConsumed() != null) {
-      for (long consumed : getTypesConsumed()) {
-        result ^= consumed;
-      }
+    if (obj == null) {
+      return false;
-    return (int)result;
+    if (getClass() != obj.getClass()) {
+      return false;
+    }
+    QuotaUsage other = (QuotaUsage) obj;
+    if (fileAndDirectoryCount != other.fileAndDirectoryCount) {
+      return false;
+    }
+    if (quota != other.quota) {
+      return false;
+    }
+    if (spaceConsumed != other.spaceConsumed) {
+      return false;
+    }
+    if (spaceQuota != other.spaceQuota) {
+      return false;
+    }
+    if (!Arrays.equals(typeConsumed, other.typeConsumed)) {
+      return false;
+    }
+    if (!Arrays.equals(typeQuota, other.typeQuota)) {
+      return false;
+    }
+    return true;
-    if (quota > 0) {
+    if (quota > 0L) {
-    if (spaceQuota >= 0) {
+    if (spaceQuota >= 0L) {
-    StringBuffer content = new StringBuffer();
+    StringBuilder content = new StringBuilder();
-    StringBuffer header = new StringBuffer();
-
+    StringBuilder header = new StringBuilder();
-      String storageName = st.toString();
+      final String storageName = st.toString();

INS31 MOV78 UPD83 MOV83 INS39 UPD42 MOV42 INS8 MOV78 UPD39 UPD42 MOV44 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS41 UPD42 INS25 INS25 INS25 INS60 INS25 INS25 INS25 INS25 INS25 INS25 INS41 INS21 INS21 INS21 INS83 INS39 INS59 INS39 INS59 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS27 INS8 INS27 INS8 INS27 INS8 MOV43 INS59 MOV27 INS8 INS27 INS8 MOV27 INS8 INS27 INS8 INS38 INS8 INS38 INS8 INS9 UPD43 UPD43 INS32 INS32 INS32 UPD34 INS42 INS34 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS52 INS42 INS41 INS42 INS33 INS41 MOV32 MOV32 INS41 INS42 MOV11 INS42 INS40 INS41 INS42 INS40 INS41 INS42 INS40 INS41 INS42 INS40 INS41 INS32 INS41 INS32 INS41 UPD34 UPD34 UPD42 UPD42 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS34 MOV22 INS34 INS40 INS42 INS42 INS42 INS34 MOV22 INS34 INS40 UPD34 INS27 INS11 INS27 INS11 INS27 INS11 INS27 INS11 INS27 INS32 INS27 INS32 INS9 INS9 UPD42 INS42 UPD42 INS9 UPD42 INS9 INS9 INS9 INS9 INS42 INS42 UPD42 MOV42 INS40 INS9 INS42 INS42 INS42 INS40 INS9 UPD43 UPD43 INS83 UPD34 UPD34 UPD34 MOV34 UPD34 UPD34 INS42 INS42 INS39 INS36 INS42 INS42 INS39 INS36 INS42 INS42 INS39 INS36 INS42 INS42 INS39 INS36 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS27 INS27 INS27 INS27 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS36 INS27 INS27 INS27 INS27 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL38 DEL7 DEL21 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL66 DEL65 DEL29 DEL39 DEL85 DEL5 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL27 DEL42 DEL42 DEL43 DEL62 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL27 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL27 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL27 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL36 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL11 DEL36 DEL32 DEL32 DEL27 DEL36 DEL27 DEL36 DEL41 DEL8 DEL31 DEL42 DEL32 DEL33 DEL42 DEL32 DEL33 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL36 DEL59 DEL60 DEL39 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL70 DEL8 DEL25 DEL39 DEL42 DEL44 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL70 DEL8 DEL25 DEL39 DEL42 DEL11 DEL41