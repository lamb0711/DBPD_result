HADOOP-11920. Refactor some codes for erasure coders. Contributed by Kai Zheng.

-    if (erasedIndexes.length == 0) {
-      return;
-    }
+    checkParameters(inputs, erasedIndexes, outputs);
-    doDecode(inputs, erasedIndexes, outputs);
+    boolean hasArray = inputs[0].hasArray();
+    if (hasArray) {
+      byte[][] newInputs = toArrays(inputs);
+      byte[][] newOutputs = toArrays(outputs);
+      doDecode(newInputs, erasedIndexes, newOutputs);
+    } else {
+      doDecode(inputs, erasedIndexes, outputs);
+    }
-   * Perform the real decoding using ByteBuffer
-   * @param inputs
+   * Perform the real decoding using Direct ByteBuffer.
+   * @param inputs Direct ByteBuffers expected
-   * @param outputs
+   * @param outputs Direct ByteBuffers expected
-    if (erasedIndexes.length == 0) {
-      return;
-    }
+    checkParameters(inputs, erasedIndexes, outputs);
-    doDecode(inputs, erasedIndexes, outputs);
+    ByteBuffer[] newInputs = ECChunk.toBuffers(inputs);
+    ByteBuffer[] newOutputs = ECChunk.toBuffers(outputs);
+    decode(newInputs, erasedIndexes, newOutputs);
-   * Perform the real decoding using chunks
+   * Check and validate decoding parameters, throw exception accordingly. The
+   * checking assumes it's a MDS code. Other code  can override this.
-  protected void doDecode(ECChunk[] inputs, int[] erasedIndexes,
-                          ECChunk[] outputs) {
-    if (inputs[0].getBuffer().hasArray()) {
-      byte[][] inputBytesArr = ECChunk.toArray(inputs);
-      byte[][] outputBytesArr = ECChunk.toArray(outputs);
-      doDecode(inputBytesArr, erasedIndexes, outputBytesArr);
-    } else {
-      ByteBuffer[] inputBuffers = ECChunk.toBuffers(inputs);
-      ByteBuffer[] outputBuffers = ECChunk.toBuffers(outputs);
-      doDecode(inputBuffers, erasedIndexes, outputBuffers);
+  protected void checkParameters(Object[] inputs, int[] erasedIndexes,
+                                 Object[] outputs) {
+    if (inputs.length != getNumParityUnits() + getNumDataUnits()) {
+      throw new IllegalArgumentException("Invalid inputs length");
+    }
+
+    if (erasedIndexes.length != outputs.length) {
+      throw new IllegalArgumentException(
+          "erasedIndexes and outputs mismatch in length");
+    }
+
+    if (erasedIndexes.length > getNumParityUnits()) {
+      throw new IllegalArgumentException(
+          "Too many erased, not recoverable");

MOV31 MOV78 MOV44 INS8 MOV78 UPD83 UPD42 MOV8 MOV29 UPD83 UPD42 MOV44 INS8 INS21 INS60 INS25 INS21 UPD5 UPD5 INS25 INS25 INS25 INS32 INS39 INS59 INS42 INS8 MOV8 UPD66 INS66 INS66 INS32 UPD66 INS66 UPD43 UPD43 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS42 MOV32 INS60 INS60 MOV21 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 INS27 INS53 INS40 INS40 INS53 INS40 INS32 INS53 UPD42 MOV5 INS59 MOV5 INS59 INS32 INS32 INS14 INS14 INS42 INS14 INS42 INS32 INS42 INS32 UPD42 UPD42 INS42 INS42 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL34 DEL27 DEL41 DEL8 DEL25 DEL8 DEL40 DEL34 DEL27 DEL41 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8