Merge branch 'trunk' into HDFS-6584

-import java.io.IOException;
+import java.security.PrivilegedExceptionAction;
+import org.apache.hadoop.security.UserGroupInformation;
+    UserGroupInformation callerUGI = getUser(req);
-      appReports = appContext.getAllApplications().values();
-    } catch (IOException e) {
+      if (callerUGI == null) {
+        appReports = appContext.getAllApplications().values();
+      } else {
+        appReports = callerUGI.doAs(
+            new PrivilegedExceptionAction<Collection<ApplicationReport>> () {
+          @Override
+          public Collection<ApplicationReport> run() throws Exception {
+            return appContext.getAllApplications().values();
+          }
+        });
+      }
+    } catch (Exception e) {
-    ApplicationId id = parseApplicationId(appId);
+    UserGroupInformation callerUGI = getUser(req);
+    final ApplicationId id = parseApplicationId(appId);
-      app = appContext.getApplication(id);
-    } catch (IOException e) {
+      if (callerUGI == null) {
+        app = appContext.getApplication(id);
+      } else {
+        app = callerUGI.doAs(
+            new PrivilegedExceptionAction<ApplicationReport> () {
+          @Override
+          public ApplicationReport run() throws Exception {
+            return appContext.getApplication(id);
+          }
+        });
+      }
+    } catch (Exception e) {
-    ApplicationId id = parseApplicationId(appId);
+    UserGroupInformation callerUGI = getUser(req);
+    final ApplicationId id = parseApplicationId(appId);
-      appAttemptReports = appContext.getApplicationAttempts(id).values();
-    } catch (IOException e) {
+      if (callerUGI == null) {
+        appAttemptReports = appContext.getApplicationAttempts(id).values();
+      } else {
+        appAttemptReports = callerUGI.doAs(
+            new PrivilegedExceptionAction<Collection<ApplicationAttemptReport>> () {
+          @Override
+          public Collection<ApplicationAttemptReport> run() throws Exception {
+            return appContext.getApplicationAttempts(id).values();
+          }
+        });
+      }
+    } catch (Exception e) {
+    UserGroupInformation callerUGI = getUser(req);
-    ApplicationAttemptId aaid = parseApplicationAttemptId(appAttemptId);
+    final ApplicationAttemptId aaid = parseApplicationAttemptId(appAttemptId);
-      appAttempt = appContext.getApplicationAttempt(aaid);
-    } catch (IOException e) {
+      if (callerUGI == null) {
+        appAttempt = appContext.getApplicationAttempt(aaid);
+      } else {
+        appAttempt = callerUGI.doAs(
+            new PrivilegedExceptionAction<ApplicationAttemptReport> () {
+          @Override
+          public ApplicationAttemptReport run() throws Exception {
+            return appContext.getApplicationAttempt(aaid);
+          }
+        });
+      }
+    } catch (Exception e) {
+    UserGroupInformation callerUGI = getUser(req);
-    ApplicationAttemptId aaid = parseApplicationAttemptId(appAttemptId);
+    final ApplicationAttemptId aaid = parseApplicationAttemptId(appAttemptId);
-      containerReports = appContext.getContainers(aaid).values();
-    } catch (IOException e) {
+      if (callerUGI == null) {
+        containerReports = appContext.getContainers(aaid).values();
+      } else {
+        containerReports = callerUGI.doAs(
+            new PrivilegedExceptionAction<Collection<ContainerReport>> () {
+          @Override
+          public Collection<ContainerReport> run() throws Exception {
+            return appContext.getContainers(aaid).values();
+          }
+        });
+      }
+    } catch (Exception e) {
+    UserGroupInformation callerUGI = getUser(req);
-    ContainerId cid = parseContainerId(containerId);
+    final ContainerId cid = parseContainerId(containerId);
-      container = appContext.getContainer(cid);
-    } catch (IOException e) {
+      if (callerUGI == null) {
+        container = appContext.getContainer(cid);
+      } else {
+        container = callerUGI.doAs(
+            new PrivilegedExceptionAction<ContainerReport> () {
+          @Override
+          public ContainerReport run() throws Exception {
+            return appContext.getContainer(cid);
+          }
+        });
+      }
+    } catch (Exception e) {
+
+  protected static UserGroupInformation getUser(HttpServletRequest req) {
+    String remoteUser = req.getRemoteUser();
+    UserGroupInformation callerUGI = null;
+    if (remoteUser != null) {
+      callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
+    }
+    return callerUGI;
+  }
+

INS26 UPD40 INS40 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS60 INS60 INS60 MOV60 INS60 INS60 INS60 INS54 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS43 INS59 INS8 INS43 INS59 INS83 INS43 INS59 INS8 INS12 UPD43 INS83 INS8 INS43 INS59 INS83 INS8 INS43 INS59 INS83 INS8 INS43 INS59 INS83 INS8 MOV12 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS25 INS44 INS8 UPD42 UPD42 INS25 INS42 INS42 INS32 INS25 INS42 INS42 INS32 INS25 UPD42 MOV42 INS42 INS32 INS25 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS42 INS27 MOV8 INS8 UPD43 INS42 INS42 INS42 INS42 INS27 MOV8 INS8 INS43 INS42 INS53 UPD42 UPD42 INS27 MOV8 INS8 UPD43 INS42 INS42 INS27 MOV8 INS8 UPD43 MOV53 INS42 INS42 INS27 MOV8 INS8 UPD43 INS42 INS42 INS27 MOV8 INS8 UPD43 INS42 INS42 INS7 INS42 INS33 INS21 UPD42 INS42 INS33 INS21 INS42 INS14 INS42 INS33 INS21 UPD42 INS42 INS33 INS21 UPD42 INS42 INS33 INS21 UPD42 INS42 INS33 INS21 UPD42 INS42 INS32 INS7 INS7 INS43 INS42 INS7 INS7 MOV42 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 MOV42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS43 INS74 INS31 INS43 INS43 INS31 INS43 INS74 INS31 INS43 INS43 INS31 INS43 INS74 INS31 INS43 INS43 INS31 INS42 INS43 INS43 INS78 INS83 INS74 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS43 INS78 INS83 INS74 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS43 INS78 INS83 INS74 INS42 INS43 INS8 UPD42 MOV42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS43 INS43 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS43 INS43 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS43 INS43 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL42 DEL44 DEL12 DEL54