HADOOP-11450. Cleanup DistCpV1 not to use deprecated methods and fix javadocs. Contributed by Varun Saxena.

+import org.apache.hadoop.io.SequenceFile.Reader;
+import org.apache.hadoop.io.SequenceFile.Writer;
+import org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;
-      SequenceFile.Reader sl = null;
-      try {
-        sl = new SequenceFile.Reader(fs, src, job);
+      try (SequenceFile.Reader sl =
+          new SequenceFile.Reader(job, Reader.file(src))) {
-      finally {
-        checkAndClose(sl);
-      }
-      FSDataInputStream in = null;
-      FSDataOutputStream out = null;
-      try {
-        Path srcPath = srcstat.getPath();
-        // open src file
-        in = srcPath.getFileSystem(job).open(srcPath);
+      Path srcPath = srcstat.getPath();
+      // open src file
+      try (FSDataInputStream in = srcPath.getFileSystem(job).open(srcPath)) {
-        out = create(tmpfile, reporter, srcstat);
-        LOG.info("Copying file " + srcPath + " of size " +
-                 srcstat.getLen() + " bytes...");
+        try (FSDataOutputStream out = create(tmpfile, reporter, srcstat)) {
+          LOG.info("Copying file " + srcPath + " of size " +
+                   srcstat.getLen() + " bytes...");
-        // copy file
-        for(int bytesRead; (bytesRead = in.read(buffer)) >= 0; ) {
-          out.write(buffer, 0, bytesRead);
-          bytesCopied += bytesRead;
-          reporter.setStatus(
-              String.format("%.2f ", bytesCopied*100.0/srcstat.getLen())
-              + absdst + " [ " +
-              StringUtils.humanReadableInt(bytesCopied) + " / " +
-              StringUtils.humanReadableInt(srcstat.getLen()) + " ]");
+          // copy file
+          for(int bytesRead; (bytesRead = in.read(buffer)) >= 0; ) {
+            out.write(buffer, 0, bytesRead);
+            bytesCopied += bytesRead;
+            reporter.setStatus(
+                String.format("%.2f ", bytesCopied*100.0/srcstat.getLen())
+                + absdst + " [ " +
+                TraditionalBinaryPrefix.long2String(bytesCopied, "", 1) + " / "
+                + TraditionalBinaryPrefix.long2String(srcstat.getLen(), "", 1)
+                + " ]");
+          }
-      } finally {
-        checkAndClose(in);
-        checkAndClose(out);
-     * @param dstpath dst path
+     * @param relativedst relative dst path
+     * @param outc Log of skipped files
-      return b + " bytes (" + StringUtils.humanReadableInt(b) + ")";
+      return b + " bytes (" +
+          TraditionalBinaryPrefix.long2String(b, "", 1) + ")";
+   * @param conf configuration
-    SequenceFile.Reader in = null;
-    try {
-      in = new SequenceFile.Reader(dstdirlist.getFileSystem(jobconf),
-          dstdirlist, jobconf);
+    try (SequenceFile.Reader in =
+        new SequenceFile.Reader(jobconf, Reader.file(dstdirlist))) {
-    } finally {
-      checkAndClose(in);
+     * @param mapredSslConf ssl configuration
+     * @param dryrun
-        SequenceFile.Writer src_writer = SequenceFile.createWriter(jobfs,
-            jobConf, srcfilelist, LongWritable.class, FilePair.class,
-            SequenceFile.CompressionType.NONE);
-        SequenceFile.Writer dst_writer = SequenceFile.createWriter(jobfs,
-            jobConf, dstfilelist, Text.class, Text.class,
-            SequenceFile.CompressionType.NONE);
-        SequenceFile.Writer dir_writer = SequenceFile.createWriter(jobfs,
-            jobConf, dstdirlist, Text.class, FilePair.class,
-            SequenceFile.CompressionType.NONE)
+        SequenceFile.Writer src_writer = SequenceFile.createWriter(jobConf,
+            Writer.file(srcfilelist), Writer.keyClass(LongWritable.class),
+            Writer.valueClass(FilePair.class), Writer.compression(
+            SequenceFile.CompressionType.NONE));
+        SequenceFile.Writer dst_writer = SequenceFile.createWriter(jobConf,
+            Writer.file(dstfilelist), Writer.keyClass(Text.class),
+            Writer.valueClass(Text.class), Writer.compression(
+            SequenceFile.CompressionType.NONE));
+        SequenceFile.Writer dir_writer = SequenceFile.createWriter(jobConf,
+            Writer.file(dstdirlist), Writer.keyClass(Text.class),
+            Writer.valueClass(FilePair.class), Writer.compression(
+            SequenceFile.CompressionType.NONE));
-        basedir = args.basedir.makeQualified(basefs);
+        basedir = args.basedir.makeQualified(
+            basefs.getUri(), basefs.getWorkingDirectory());
-          Path parent = src.getParent().makeQualified(srcfs);
+          Path parent = src.getParent().makeQualified(
+              srcfs.getUri(), srcfs.getWorkingDirectory());
-    LOG.info("bytesToCopyCount=" + StringUtils.humanReadableInt(byteCount));
+    LOG.info("bytesToCopyCount=" +
+             TraditionalBinaryPrefix.long2String(byteCount, "", 1));
-               StringUtils.humanReadableInt(skipByteCount));
+               TraditionalBinaryPrefix.long2String(skipByteCount, "", 1));
-    LOG.info("bytesToCopyCount=" + StringUtils.humanReadableInt(byteCount));
+    LOG.info("bytesToCopyCount=" +
+             TraditionalBinaryPrefix.long2String(byteCount, "", 1));
-    final SequenceFile.Writer writer = SequenceFile.createWriter(jobfs, jobconf,
-        dstlsr, Text.class, NullWritable.class,
-        SequenceFile.CompressionType.NONE);
-    try {
+    try (final SequenceFile.Writer writer = SequenceFile.createWriter(jobconf,
+        Writer.file(dstlsr), Writer.keyClass(Text.class),
+        Writer.valueClass(NullWritable.class), Writer.compression(
+        SequenceFile.CompressionType.NONE))) {
-    } finally {
-      checkAndClose(writer);
-    SequenceFile.Reader lsrin = null;
-    SequenceFile.Reader dstin = null;
-    try {
-      lsrin = new SequenceFile.Reader(jobfs, sortedlsr, jobconf);
-      dstin = new SequenceFile.Reader(jobfs, dstsorted, jobconf);
-
+    try (SequenceFile.Reader lsrin =
+             new SequenceFile.Reader(jobconf, Reader.file(sortedlsr));
+         SequenceFile.Reader  dstin =
+             new SequenceFile.Reader(jobconf, Reader.file(dstsorted))) {
-    } finally {
-      checkAndClose(lsrin);
-      checkAndClose(dstin);
-    SequenceFile.Reader in = null;
-    try {
-      SequenceFile.Sorter sorter = new SequenceFile.Sorter(fs,
-        new Text.Comparator(), Text.class, Text.class, conf);
-      sorter.sort(file, sorted);
-      in = new SequenceFile.Reader(fs, sorted, conf);
-
+    SequenceFile.Sorter sorter = new SequenceFile.Sorter(fs,
+      new Text.Comparator(), Text.class, Text.class, conf);
+    sorter.sort(file, sorted);
+    try (SequenceFile.Reader in =
+         new SequenceFile.Reader(conf, Reader.file(sorted))) {
-    finally {
-      checkAndClose(in);
-    }
-  static boolean checkAndClose(java.io.Closeable io) {
-    if (io != null) {
-      try {
-        io.close();
-      }
-      catch(IOException ioe) {
-        LOG.warn(StringUtils.stringifyException(ioe));
-        return false;
-      }
-    }
-    return true;
-  }
-

INS26 INS26 INS26 INS40 INS40 INS40 MOV8 MOV8 INS65 INS54 MOV60 INS54 MOV41 INS65 INS42 INS66 INS58 INS65 INS65 INS58 INS58 INS58 INS58 INS8 INS58 INS58 INS8 UPD42 UPD66 INS42 INS66 MOV43 INS59 INS42 INS66 INS42 INS83 MOV43 INS59 MOV43 INS59 MOV43 INS59 MOV43 INS59 MOV60 MOV60 MOV24 MOV43 INS59 MOV43 INS59 MOV21 INS54 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 MOV32 INS58 INS8 UPD42 UPD42 INS45 INS34 MOV43 INS42 INS32 UPD42 INS32 INS32 INS32 INS32 UPD42 INS32 INS32 INS32 INS32 UPD42 INS32 INS32 INS32 INS32 UPD42 UPD42 INS45 INS34 UPD42 UPD42 INS45 INS34 INS42 INS42 INS42 INS32 INS32 INS32 INS32 MOV43 INS42 INS32 MOV43 INS42 INS32 MOV43 INS42 INS32 MOV43 INS42 INS32 MOV43 INS59 MOV21 MOV24 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS42 INS42 MOV57 INS42 INS42 MOV57 INS42 INS42 MOV40 UPD42 MOV42 INS42 MOV42 INS42 INS42 MOV57 INS42 INS42 MOV57 INS42 INS42 MOV40 UPD42 MOV42 INS42 MOV42 INS42 INS42 MOV57 INS42 INS42 MOV57 INS42 INS42 MOV40 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 MOV57 INS42 INS42 MOV57 INS42 INS42 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 UPD42 UPD42 INS45 INS34 INS32 INS32 MOV42 INS42 INS42 INS42 INS32 INS32 MOV42 INS42 INS42 INS42 UPD42 UPD42 INS45 INS34 UPD42 UPD42 INS45 INS34 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL32 DEL21 DEL8 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL14 DEL7 DEL21 DEL32 DEL21 DEL8 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL32 DEL21 DEL8 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL32 DEL21 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31