YARN-7875. Node Attribute store for storing and recovering attributes. Contributed by Bibin A Chundatt.

+import java.util.ArrayList;
+import java.util.List;
+import org.apache.hadoop.util.ReflectionUtils;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
+import org.apache.hadoop.yarn.nodelabels.NodeAttributeStore;
+import org.apache.hadoop.yarn.server.api.protocolrecords.NodeToAttributes;
-  private Dispatcher dispatcher;
+  Dispatcher dispatcher;
+  NodeAttributeStore store;
-    // TODO to generalize and make use of the FileSystemNodeLabelsStore
+    this.store =getAttributeStoreClass(conf);
+    this.store.init(conf, this);
+    this.store.recover();
+  }
+
+  private NodeAttributeStore getAttributeStoreClass(Configuration conf) {
+    try {
+      return ReflectionUtils.newInstance(
+          conf.getClass(YarnConfiguration.FS_NODE_ATTRIBUTE_STORE_IMPL_CLASS,
+              FileSystemNodeAttributeStore.class, NodeAttributeStore.class),
+          conf);
+    } catch (Exception e) {
+      throw new YarnRuntimeException(
+          "Could not instantiate Node Attribute Store ", e);
+    }
-      if (null != dispatcher) {
+      if (null != dispatcher && NodeAttribute.PREFIX_CENTRALIZED
+          .equals(attributePrefix)) {
+  @Override
+  public List<NodeToAttributes> getNodeToAttributes(Set<String> prefix) {
+    try {
+      readLock.lock();
+      List<NodeToAttributes> nodeToAttributes = new ArrayList<>();
+      nodeCollections.forEach((k, v) -> {
+        List<NodeAttribute> attrs;
+        if (prefix == null || prefix.isEmpty()) {
+          attrs = new ArrayList<>(v.getAttributes().keySet());
+        } else {
+          attrs = new ArrayList<>();
+          for (Entry<NodeAttribute, AttributeValue> nodeAttr : v.attributes
+              .entrySet()) {
+            if (prefix.contains(nodeAttr.getKey().getAttributePrefix())) {
+              attrs.add(nodeAttr.getKey());
+            }
+          }
+        }
+        nodeToAttributes.add(NodeToAttributes.newInstance(k, attrs));
+      });
+      return nodeToAttributes;
+    } finally {
+      readLock.unlock();
+    }
+  }
+
-    // TODO Need to extend the File
+    List<NodeToAttributes> mappingList = new ArrayList<>();
+    Map<String, Map<NodeAttribute, AttributeValue>> nodeToAttr =
+        event.getNodeAttributeMappingList();
+    nodeToAttr.forEach((k, v) -> mappingList
+        .add(NodeToAttributes.newInstance(k, new ArrayList<>(v.keySet()))));
+    try {
+      switch (event.getOperation()) {
+      case REPLACE:
+        store.replaceNodeAttributes(mappingList);
+        break;
+      case ADD:
+        store.addNodeAttributes(mappingList);
+        break;
+      case REMOVE:
+        store.removeNodeAttributes(mappingList);
+        break;
+      default:
+        LOG.warn("Unsupported operation");
+      }
+    } catch (IOException e) {
+      LOG.error("Failed to store attribute modification to storage");
+      throw new YarnRuntimeException(e);
+    }
-    processMapping(nodeAttributeMapping, mappingType, null);
+    processMapping(nodeAttributeMapping, mappingType,
+        NodeAttribute.PREFIX_CENTRALIZED);
+
+  protected void stopDispatcher() {
+    AsyncDispatcher asyncDispatcher = (AsyncDispatcher) dispatcher;
+    if (null != asyncDispatcher) {
+      asyncDispatcher.stop();
+    }
+  }
+
+  @Override
+  protected void serviceStop() throws Exception {
+    // finalize store
+    stopDispatcher();
+
+    // only close store when we enabled store persistent
+    if (null != store) {
+      store.close();
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS54 INS42 INS43 INS43 INS74 INS42 INS54 INS60 INS60 INS21 INS54 INS60 INS25 INS42 INS42 INS21 INS25 INS7 INS32 INS32 INS42 INS8 INS12 INS42 INS42 INS43 INS43 INS8 INS8 INS74 INS59 INS74 INS59 INS32 INS8 INS12 INS43 INS59 INS27 INS8 INS32 INS27 INS8 INS22 INS32 INS22 INS42 INS42 INS52 INS22 INS42 INS41 INS44 INS8 INS42 INS42 INS21 INS60 INS21 INS41 INS21 INS43 INS43 INS42 INS14 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS86 INS50 INS44 INS8 INS40 INS42 INS42 INS11 INS33 INS42 INS21 INS42 INS33 INS42 INS21 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS43 INS42 INS53 INS27 INS32 INS74 INS59 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS59 INS59 INS32 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS43 INS42 INS21 INS53 INS43 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS14 MOV27 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS86 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS57 INS57 INS43 INS45 INS42 INS40 INS42 INS42 INS42 INS42 INS74 INS59 INS59 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS74 INS32 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS8 INS32 INS43 INS42 INS42 INS43 INS43 INS42 INS27 INS32 INS21 INS21 INS70 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS7 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS74 INS42 INS40 INS42 INS25 INS74 INS32 INS74 INS43 INS43 INS43 INS32 INS8 INS43 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL83 DEL8 DEL33