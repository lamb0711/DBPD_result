Merge remote-tracking branch 'apache-commit/trunk' into HDDS-48

-import org.apache.hadoop.hdds.scm.container.common.helpers.PipelineChannel;
-  private final List<PipelineChannel> activePipelineChannels;
-  private final AtomicInteger conduitsIndex;
+  private final List<Pipeline> activePipelines;
+  private final AtomicInteger pipelineIndex;
-    activePipelineChannels = new LinkedList<>();
-    conduitsIndex = new AtomicInteger(0);
+    activePipelines = new LinkedList<>();
+    pipelineIndex = new AtomicInteger(0);
-     * 1. Try to create a pipelineChannel if there are enough free nodes.
+     * 1. Try to create a pipeline if there are enough free nodes.
-     * 2. This allows all nodes to part of a pipelineChannel quickly.
+     * 2. This allows all nodes to part of a pipeline quickly.
-    PipelineChannel pipelineChannel =
-        allocatePipelineChannel(replicationFactor);
-    if (pipelineChannel != null) {
-      LOG.debug("created new pipelineChannel:{} for container with " +
+    Pipeline pipeline =
+        allocatePipeline(replicationFactor);
+    if (pipeline != null) {
+      LOG.debug("created new pipeline:{} for container with " +
-          pipelineChannel.getName(), replicationType, replicationFactor);
-      activePipelineChannels.add(pipelineChannel);
+          pipeline.getPipelineName(), replicationType, replicationFactor);
+      activePipelines.add(pipeline);
-      pipelineChannel =
-          findOpenPipelineChannel(replicationType, replicationFactor);
-      if (pipelineChannel != null) {
-        LOG.debug("re-used pipelineChannel:{} for container with " +
+      pipeline =
+          findOpenPipeline(replicationType, replicationFactor);
+      if (pipeline != null) {
+        LOG.debug("re-used pipeline:{} for container with " +
-            pipelineChannel.getName(), replicationType, replicationFactor);
+            pipeline.getPipelineName(), replicationType, replicationFactor);
-    if (pipelineChannel == null) {
-      LOG.error("Get pipelineChannel call failed. We are not able to find" +
-              "free nodes or operational pipelineChannel.");
+    if (pipeline == null) {
+      LOG.error("Get pipeline call failed. We are not able to find" +
+              "free nodes or operational pipeline.");
-      return new Pipeline(pipelineChannel);
+      return pipeline;
-  public abstract PipelineChannel allocatePipelineChannel(
+  public abstract Pipeline allocatePipeline(
-   * Find a PipelineChannel that is operational.
+   * Find a Pipeline that is operational.
-  private PipelineChannel findOpenPipelineChannel(
+  private Pipeline findOpenPipeline(
-    PipelineChannel pipelineChannel = null;
+    Pipeline pipeline = null;
-    if (activePipelineChannels.size() == 0) {
+    if (activePipelines.size() == 0) {
-      PipelineChannel temp =
-          activePipelineChannels
+      Pipeline temp =
+          activePipelines
-      // if we find an operational pipelineChannel just return that.
+      // if we find an operational pipeline just return that.
-        pipelineChannel = temp;
+        pipeline = temp;
-    return pipelineChannel;
+    return pipeline;
-   * gets the next index of the PipelineChannel to get.
+   * gets the next index of the Pipeline to get.
-    return conduitsIndex.incrementAndGet() % activePipelineChannels.size();
+    return pipelineIndex.incrementAndGet() % activePipelines.size();

UPD74 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD66 MOV43 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 UPD42 UPD42 UPD45 UPD45 UPD42 UPD42 UPD45 UPD42 UPD42 DEL40 DEL26 DEL42 DEL14 DEL42 DEL43