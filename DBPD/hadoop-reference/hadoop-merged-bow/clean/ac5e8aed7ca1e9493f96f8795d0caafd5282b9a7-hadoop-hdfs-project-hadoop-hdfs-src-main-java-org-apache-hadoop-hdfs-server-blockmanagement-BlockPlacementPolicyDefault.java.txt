HDFS-6686. Change BlockPlacementPolicy to use fallback when some storage types are unavailable.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1612880 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
-        blocksize, maxNodesPerRack, results, avoidStaleNodes, storagePolicy);
+        blocksize, maxNodesPerRack, results, avoidStaleNodes, storagePolicy,
+        EnumSet.noneOf(StorageType.class), results.isEmpty());
-    
+
+  private static List<StorageType> selectStorageTypes(
+      final BlockStoragePolicy storagePolicy,
+      final short replication,
+      final Iterable<StorageType> chosen,
+      final EnumSet<StorageType> unavailableStorages,
+      final boolean isNewBlock) {
+    final List<StorageType> storageTypes = storagePolicy.chooseStorageTypes(
+        replication, chosen);
+    final List<StorageType> removed = new ArrayList<StorageType>();
+    for(int i = storageTypes.size() - 1; i >= 0; i--) {
+      // replace/remove unavailable storage types.
+      final StorageType t = storageTypes.get(i);
+      if (unavailableStorages.contains(t)) {
+        final StorageType fallback = isNewBlock?
+            storagePolicy.getCreationFallback(unavailableStorages)
+            : storagePolicy.getReplicationFallback(unavailableStorages);
+        if (fallback == null) {
+          removed.add(storageTypes.remove(i));
+        } else {
+          storageTypes.set(i, fallback);
+        }
+      }
+    }
+    if (storageTypes.size() < replication) {
+      LOG.warn("Failed to place enough replicas: replication is " + replication
+          + " but only " + storageTypes.size() + " storage types can be selected "
+          + "(selected=" + storageTypes
+          + ", unavailable=" + unavailableStorages
+          + ", removed=" + removed
+          + ", policy=" + storagePolicy + ")");
+    }
+    return storageTypes;
+  }
-                            final BlockStoragePolicy storagePolicy) {
+                            final BlockStoragePolicy storagePolicy,
+                            final EnumSet<StorageType> unavailableStorages,
+                            final boolean newBlock) {
-    int totalReplicasExpected = numOfReplicas + results.size();
-      
-    int numOfResults = results.size();
-    boolean newBlock = (numOfResults==0);
+    final int numOfResults = results.size();
+    final int totalReplicasExpected = numOfReplicas + numOfResults;
-    final List<StorageType> storageTypes = storagePolicy.chooseStorageTypes(
-        (short)totalReplicasExpected, DatanodeStorageInfo.toStorageTypes(results));
+
+    // choose storage types; use fallbacks for unavailable storages
+    final List<StorageType> storageTypes = selectStorageTypes(storagePolicy,
+        (short)totalReplicasExpected, DatanodeStorageInfo.toStorageTypes(results),
+        unavailableStorages, newBlock);
+
+    StorageType curStorageType = null;
+      if ((numOfReplicas = storageTypes.size()) == 0) {
+        throw new NotEnoughReplicasException(
+            "All required storage types are unavailable: "
+            + " unavailableStorages=" + unavailableStorages
+            + ", storagePolicy=" + storagePolicy);
+      }
+
+        curStorageType = storageTypes.remove(0);
-            maxNodesPerRack, results, avoidStaleNodes, storageTypes.remove(0), true)
+            maxNodesPerRack, results, avoidStaleNodes, curStorageType, true)
+        curStorageType = storageTypes.remove(0);
-            results, avoidStaleNodes, storageTypes.remove(0));
+            results, avoidStaleNodes, curStorageType);
+        curStorageType = storageTypes.remove(0);
-              results, avoidStaleNodes, storageTypes.remove(0));
+              results, avoidStaleNodes, curStorageType);
-              results, avoidStaleNodes, storageTypes.remove(0));
+              results, avoidStaleNodes, curStorageType);
-              results, avoidStaleNodes, storageTypes.remove(0));
+              results, avoidStaleNodes, curStorageType);
+      curStorageType = storageTypes.remove(0);
-          maxNodesPerRack, results, avoidStaleNodes, storageTypes.remove(0));
+          maxNodesPerRack, results, avoidStaleNodes, curStorageType);
-            maxNodesPerRack, results, false, storagePolicy);
+            maxNodesPerRack, results, false, storagePolicy, unavailableStorages,
+            newBlock);
+      }
+
+      if (storageTypes.size() > 0) {
+        // Retry chooseTarget with fallback storage types
+        unavailableStorages.add(curStorageType);
+        return chooseTarget(numOfReplicas, writer, excludedNodes, blocksize,
+            maxNodesPerRack, results, false, storagePolicy, unavailableStorages,
+            newBlock);

INS26 INS40 INS31 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS44 MOV60 MOV60 INS43 INS43 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS74 INS42 INS83 INS74 INS42 INS83 INS39 INS42 INS60 INS60 INS24 INS25 INS41 INS83 INS74 INS42 INS83 INS39 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS83 INS74 INS59 INS83 INS74 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS42 INS43 INS43 INS83 INS83 INS43 INS59 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS32 INS42 INS21 INS42 INS42 MOV42 INS42 INS42 INS33 INS25 INS21 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS27 INS83 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS27 INS8 INS7 INS25 INS42 INS42 INS57 INS42 INS42 INS43 INS43 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS27 INS36 INS34 INS53 INS21 MOV25 INS21 MOV25 INS21 INS42 MOV32 INS42 INS27 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS8 INS45 INS42 INS45 INS32 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS7 INS14 INS7 INS7 INS7 INS32 INS34 INS21 INS41 INS42 INS42 INS42 INS16 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS32 INS43 INS27 INS42 MOV32 INS42 MOV32 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL59 DEL42 DEL34 DEL32 DEL42 DEL34 DEL32