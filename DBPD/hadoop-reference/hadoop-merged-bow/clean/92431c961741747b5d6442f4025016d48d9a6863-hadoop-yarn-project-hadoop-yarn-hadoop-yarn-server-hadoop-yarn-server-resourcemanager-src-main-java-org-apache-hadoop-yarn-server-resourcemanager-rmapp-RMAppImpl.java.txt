YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.

+import java.util.HashMap;
+import java.util.Map.Entry;
+import org.apache.hadoop.yarn.server.api.protocolrecords.LogAggregationReport;
+import org.apache.hadoop.yarn.server.api.records.LogAggregationStatus;
+  private final boolean logAggregationEnabled;
+  private long logAggregationStartTime = 0;
+  private final long logAggregationStatusTimeout;
+  private final Map<NodeId, LogAggregationReport> logAggregationStatus =
+      new HashMap<NodeId, LogAggregationReport>();
+
+
+    long localLogAggregationStatusTimeout =
+        conf.getLong(YarnConfiguration.LOG_AGGREGATION_STATUS_TIME_OUT_MS,
+          YarnConfiguration.DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS);
+    if (localLogAggregationStatusTimeout <= 0) {
+      this.logAggregationStatusTimeout =
+          YarnConfiguration.DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS;
+    } else {
+      this.logAggregationStatusTimeout = localLogAggregationStatusTimeout;
+    }
+    this.logAggregationEnabled =
+        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,
+          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);
+
+      app.logAggregationStatus.put(nodeAddedEvent.getNodeId(),
+        LogAggregationReport.newInstance(app.applicationId, nodeAddedEvent
+          .getNodeId(), app.logAggregationEnabled
+            ? LogAggregationStatus.NOT_START : LogAggregationStatus.DISABLED,
+          ""));
+      app.logAggregationStartTime = System.currentTimeMillis();
+
+  @Override
+  public Map<NodeId, LogAggregationReport> getLogAggregationReportsForApp() {
+    try {
+      this.readLock.lock();
+      Map<NodeId, LogAggregationReport> outputs =
+          new HashMap<NodeId, LogAggregationReport>();
+      outputs.putAll(logAggregationStatus);
+      for (Entry<NodeId, LogAggregationReport> output : outputs.entrySet()) {
+        if (!output.getValue().getLogAggregationStatus()
+          .equals(LogAggregationStatus.TIME_OUT)
+            && !output.getValue().getLogAggregationStatus()
+              .equals(LogAggregationStatus.FINISHED)
+            && isAppInFinalState(this)
+            && System.currentTimeMillis() > this.logAggregationStartTime
+                + this.logAggregationStatusTimeout) {
+          output.getValue().setLogAggregationStatus(
+            LogAggregationStatus.TIME_OUT);
+        }
+      }
+      return outputs;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {
+    try {
+      this.writeLock.lock();
+      if (this.logAggregationEnabled) {
+        LogAggregationReport curReport = this.logAggregationStatus.get(nodeId);
+        if (curReport == null) {
+          this.logAggregationStatus.put(nodeId, report);
+        } else {
+          if (curReport.getLogAggregationStatus().equals(
+            LogAggregationStatus.TIME_OUT)) {
+            if (report.getLogAggregationStatus().equals(
+              LogAggregationStatus.FINISHED)) {
+              curReport.setLogAggregationStatus(report
+                .getLogAggregationStatus());
+            }
+          } else {
+            curReport.setLogAggregationStatus(report.getLogAggregationStatus());
+          }
+
+          if (report.getDiagnosticMessage() != null
+              && !report.getDiagnosticMessage().isEmpty()) {
+            curReport
+              .setDiagnosticMessage(curReport.getDiagnosticMessage() == null
+                  ? report.getDiagnosticMessage() : curReport
+                    .getDiagnosticMessage() + report.getDiagnosticMessage());
+          }
+        }
+      }
+    } finally {
+      this.writeLock.unlock();
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS78 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS34 INS42 INS43 INS43 INS43 INS42 INS14 INS60 INS25 INS21 INS42 INS43 INS43 INS43 INS54 INS43 INS42 INS43 INS42 INS54 INS42 INS42 INS42 INS74 INS39 INS59 INS27 INS8 INS8 INS7 INS21 INS21 INS42 INS42 INS42 INS8 INS8 INS42 INS42 INS8 INS8 INS43 INS43 INS43 INS42 INS32 INS42 INS34 INS21 INS21 INS22 INS32 INS32 INS7 INS21 INS60 INS21 INS70 INS41 INS21 INS21 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS7 INS7 INS52 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS32 INS32 INS40 INS32 INS32 INS74 INS59 INS32 INS44 INS32 INS8 INS42 INS32 INS32 INS22 INS8 INS32 INS22 INS40 INS22 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS16 INS45 INS42 INS42 INS22 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS25 INS22 INS42 INS22 INS42 INS52 INS42 INS60 INS25 INS22 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS40 INS52 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS27 INS8 INS52 INS42 INS52 INS42 INS43 INS59 INS27 INS8 INS8 INS52 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS38 INS38 INS32 INS27 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS25 INS42 INS42 INS42 INS32 INS32 INS42 INS52 INS32 INS27 INS32 INS22 INS42 INS42 INS32 INS32 INS8 INS8 INS27 INS8 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS22 INS22 INS32 INS42 INS40 INS52 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS40 INS25 INS21 INS27 INS38 INS21 INS32 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS8 INS32 INS32 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS27 INS42 INS42 INS32 INS32 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42