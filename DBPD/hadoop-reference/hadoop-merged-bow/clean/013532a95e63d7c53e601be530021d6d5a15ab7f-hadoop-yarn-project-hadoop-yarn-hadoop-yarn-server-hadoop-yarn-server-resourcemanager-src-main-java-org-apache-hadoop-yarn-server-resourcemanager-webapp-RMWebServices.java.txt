YARN-4957. Add getNewReservation in ApplicationClientProtocol (Sean Po via curino)

+import org.apache.hadoop.yarn.api.protocolrecords.GetNewReservationRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetNewReservationResponse;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.NewReservation;
-import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationSubmissionResponseInfo;
+   * Generates a new ReservationId which is then sent to the client.
+   *
+   * @param hsr the servlet request
+   * @return Response containing the app id and the maximum resource
+   *         capabilities
+   * @throws AuthorizationException if the user is not authorized
+   *         to invoke this method.
+   * @throws IOException if creation fails.
+   * @throws InterruptedException if interrupted.
+   */
+  @POST
+  @Path("/reservation/new-reservation")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response createNewReservation(@Context HttpServletRequest hsr)
+    throws AuthorizationException, IOException, InterruptedException {
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+        + "user not authenticated");
+    }
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      return Response.status(Status.FORBIDDEN).entity(msg).build();
+    }
+
+    NewReservation reservationId = createNewReservation();
+    return Response.status(Status.OK).entity(reservationId).build();
+
+  }
+
+  /**
+   * Function that actually creates the {@link ReservationId} by calling the
+   * ClientRMService.
+   *
+   * @return returns structure containing the {@link ReservationId}
+   * @throws IOException if creation fails.
+   */
+  private NewReservation createNewReservation() throws IOException {
+    GetNewReservationRequest req =
+        recordFactory.newRecordInstance(GetNewReservationRequest.class);
+    GetNewReservationResponse resp;
+    try {
+      resp = rm.getClientRMService().getNewReservation(req);
+    } catch (YarnException e) {
+      String msg = "Unable to create new reservation from RM web service";
+      LOG.error(msg, e);
+      throw new YarnRuntimeException(msg, e);
+    }
+    NewReservation reservationId =
+        new NewReservation(resp.getReservationId().toString());
+    return reservationId;
+  }
+
+  /**
-    ReservationSubmissionResponseInfo resRespInfo;
-      resRespInfo =
-          callerUGI.doAs(
-           new PrivilegedExceptionAction<ReservationSubmissionResponseInfo>() {
-                @Override
-                public ReservationSubmissionResponseInfo run()
-                    throws IOException, YarnException {
-                  ReservationSubmissionResponse tempRes =
-                      rm.getClientRMService().submitReservation(reservation);
-                  return new ReservationSubmissionResponseInfo(tempRes);
-                }
-              });
+      callerUGI
+          .doAs(new PrivilegedExceptionAction<ReservationSubmissionResponse>() {
+              @Override
+              public ReservationSubmissionResponse run() throws IOException,
+                  YarnException {
+                return rm.getClientRMService().submitReservation(reservation);
+              }
+          });
-    return Response.status(Status.OK).entity(resRespInfo).build();
+    return Response.status(Status.ACCEPTED).build();
-      ReservationSubmissionRequestInfo resContext) {
+      ReservationSubmissionRequestInfo resContext) throws IOException {
+
+    ReservationId reservationId = ReservationId.parseReservationId(resContext
+        .getReservationId());
-        ReservationSubmissionRequest.newInstance(rDef, resContext.getQueue());
+        ReservationSubmissionRequest.newInstance(rDef, resContext.getQueue(),
+          reservationId);
-   * @throws AuthorizationException
-   * @throws IOException
-   * @throws InterruptedException
+   * @throws AuthorizationException when the user group information cannot be
+   *           retrieved.
+   * @throws IOException when a {@link ReservationDeleteRequest} cannot be
+   *           created from the {@link ReservationDeleteRequestInfo}. This
+   *           exception is also thrown on
+   *           {@code ClientRMService.deleteReservation} invokation failure.
+   * @throws InterruptedException if doAs action throws an InterruptedException.

MOV26 INS26 INS26 INS40 INS40 UPD40 INS31 INS31 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS43 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS25 INS60 MOV41 INS65 INS65 INS65 INS42 INS42 INS60 INS60 INS54 INS60 INS41 INS41 INS42 INS60 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS40 INS40 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS66 INS65 INS66 INS66 INS66 INS65 INS42 INS66 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS42 INS32 INS43 INS59 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS32 INS60 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS66 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 UPD42 INS42 INS42 INS57 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS32 MOV32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS43 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 UPD74 INS42 INS42 INS40 INS42 INS42 INS42 UPD43 UPD42 MOV43 MOV32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL42 DEL7