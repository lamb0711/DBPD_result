HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.

-    int[] primitivePower = RSUtil.getPrimitivePower(getNumDataUnits(),
-        getNumParityUnits());
+    int[] primitivePower = RSUtil.getPrimitivePower(numDataUnits,
+        numParityUnits);
-    for (int i = 0; i < getNumParityUnits(); i++) {
+    for (int i = 0; i < numParityUnits; i++) {
-    ByteBuffer[] data = new ByteBuffer[getNumDataUnits() + getNumParityUnits()];
-    for (int i = 0; i < getNumParityUnits(); i++) {
-      data[i] = outputs[i];
-    }
-    for (int i = 0; i < getNumDataUnits(); i++) {
-      data[i + getNumParityUnits()] = inputs[i];
-    }
+    // parity units + data units
+    ByteBuffer[] all = new ByteBuffer[outputs.length + inputs.length];
+    System.arraycopy(outputs, 0, all, 0, outputs.length);
+    System.arraycopy(inputs, 0, all, outputs.length, inputs.length);
-    RSUtil.GF.remainder(data, generatingPolynomial);
+    RSUtil.GF.remainder(all, generatingPolynomial);
-  protected void doEncode(byte[][] inputs, byte[][] outputs) {
-    byte[][] data = new byte[getNumDataUnits() + getNumParityUnits()][];
-    for (int i = 0; i < getNumParityUnits(); i++) {
-      data[i] = outputs[i];
-    }
-    for (int i = 0; i < getNumDataUnits(); i++) {
-      data[i + getNumParityUnits()] = inputs[i];
-    }
+  protected void doEncode(byte[][] inputs, int[] inputOffsets,
+                          int dataLen, byte[][] outputs,
+                          int[] outputOffsets) {
+    // parity units + data units
+    byte[][] all = new byte[outputs.length + inputs.length][];
+    System.arraycopy(outputs, 0, all, 0, outputs.length);
+    System.arraycopy(inputs, 0, all, outputs.length, inputs.length);
+
+    int[] offsets = new int[inputOffsets.length + outputOffsets.length];
+    System.arraycopy(outputOffsets, 0, offsets, 0, outputOffsets.length);
+    System.arraycopy(inputOffsets, 0, offsets,
+        outputOffsets.length, inputOffsets.length);
-    RSUtil.GF.remainder(data, generatingPolynomial);
+    RSUtil.GF.remainder(all, offsets, dataLen, generatingPolynomial);

INS44 INS44 INS44 INS8 INS21 MOV21 INS5 INS42 INS39 INS42 INS5 INS42 MOV60 INS21 MOV21 INS60 INS21 MOV21 MOV21 MOV5 INS32 INS32 INS39 INS85 INS39 INS85 MOV5 INS32 INS32 INS5 INS59 INS32 INS32 INS42 UPD42 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS42 INS42 INS34 INS42 INS40 INS40 UPD42 UPD42 INS42 INS42 UPD42 MOV42 INS34 INS42 INS34 INS40 INS42 INS42 INS42 INS34 INS42 INS40 INS40 INS39 INS85 UPD42 MOV42 INS3 INS42 INS42 UPD42 MOV42 INS34 INS42 INS34 INS40 INS42 INS42 INS42 INS34 INS42 INS40 INS40 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV5 MOV5 INS5 INS27 INS40 INS40 INS40 INS40 INS39 INS85 INS40 INS40 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL2 DEL42 DEL42 DEL2 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL42 DEL42 DEL42 DEL32 DEL27 DEL2 DEL42 DEL42 DEL2 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL39 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8