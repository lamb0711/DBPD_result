HDFS-8734. Erasure Coding: fix one cell need two packets. Contributed by Walter Su.

+  private final DFSPacket[] currentPackets; // current Packet of each streamer
+    currentPackets = new DFSPacket[streamers.size()];
-  private synchronized StripedDataStreamer setCurrentStreamer(int i) {
-    streamer = streamers.get(i);
+  private synchronized StripedDataStreamer setCurrentStreamer(int newIdx)
+      throws IOException {
+    // backup currentPacket for current streamer
+    int oldIdx = streamers.indexOf(streamer);
+    if (oldIdx >= 0) {
+      currentPackets[oldIdx] = currentPacket;
+    }
+
+    streamer = streamers.get(newIdx);
+    currentPacket = currentPackets[newIdx];
+
-  /**
-   * Generate packets from a given buffer. This is only used for streamers
-   * writing parity blocks.
-   *
-   * @param byteBuffer the given buffer to generate packets
-   * @param checksumBuf the checksum buffer
-   * @return packets generated
-   * @throws IOException
-   */
-  private List<DFSPacket> generatePackets(
-      ByteBuffer byteBuffer, byte[] checksumBuf) throws IOException{
-    List<DFSPacket> packets = new ArrayList<>();
-    assert byteBuffer.hasArray();
-    getDataChecksum().calculateChunkedSums(byteBuffer.array(), 0,
-        byteBuffer.remaining(), checksumBuf, 0);
-    int ckOff = 0;
-    while (byteBuffer.remaining() > 0) {
-      DFSPacket p = createPacket(packetSize, chunksPerPacket,
-          getCurrentStreamer().getBytesCurBlock(),
-          getCurrentStreamer().getAndIncCurrentSeqno(), false);
-      int maxBytesToPacket = p.getMaxChunks() * bytesPerChecksum;
-      int toWrite = byteBuffer.remaining() > maxBytesToPacket ?
-          maxBytesToPacket: byteBuffer.remaining();
-      int chunks = (toWrite - 1) / bytesPerChecksum + 1;
-      int ckLen = chunks * getChecksumSize();
-      p.writeChecksum(checksumBuf, ckOff, ckLen);
-      ckOff += ckLen;
-      p.writeData(byteBuffer, toWrite);
-      getCurrentStreamer().incBytesCurBlock(toWrite);
-      p.incNumChunks(chunks);
-      packets.add(p);
-    }
-    return packets;
-  }
-
-
-        // cell is full and current packet has not been enqueued,
-        if (cellFull && currentPacket != null) {
-          enqueueCurrentPacketFull();
-        }
-        for (DFSPacket p : generatePackets(buffer, checksumBuf)) {
-          getCurrentStreamer().waitAndQueuePacket(p);
+        DataChecksum sum = getDataChecksum();
+        sum.calculateChunkedSums(buffer.array(), 0, len, checksumBuf, 0);
+        for (int i = 0; i < len; i += sum.getBytesPerChecksum()) {
+          int chunkLen = Math.min(sum.getBytesPerChecksum(), len - i);
+          int ckOffset = i / sum.getBytesPerChecksum() * getChecksumSize();
+          super.writeChunk(buffer.array(), i, chunkLen, checksumBuf, ckOffset,
+              getChecksumSize());
-        endBlock();
-        if (currentPacket != null) {
-          enqueueCurrentPacket();
-        }
+        // if the last stripe is incomplete, generate and write parity cells
+        writeParityCellsForLastStripe();
+        enqueueAllCurrentPackets();
-      // if the last stripe is incomplete, generate and write parity cells
-      writeParityCellsForLastStripe();
-
+
+  private void enqueueAllCurrentPackets() throws IOException {
+    int idx = streamers.indexOf(getCurrentStreamer());
+    for(int i = 0; i < streamers.size(); i++) {
+      setCurrentStreamer(i);
+      if (currentPacket != null) {
+        enqueueCurrentPacket();
+      }
+    }
+    setCurrentStreamer(idx);
+  }

INS23 INS31 INS31 INS83 INS83 INS5 INS59 INS83 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS83 INS39 INS42 INS43 INS8 MOV43 INS85 INS42 INS21 UPD42 INS60 INS25 INS21 INS21 MOV21 MOV41 INS42 MOV60 INS24 MOV21 INS7 INS39 INS59 INS27 INS8 INS7 INS7 INS58 INS27 INS37 MOV8 INS42 INS3 INS42 INS32 INS42 MOV34 INS21 INS42 INS32 INS42 INS2 UPD42 MOV32 MOV32 INS39 INS59 INS42 INS32 INS42 INS21 UPD42 UPD42 INS5 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS8 UPD42 UPD42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS85 INS42 INS42 INS2 INS42 INS60 INS21 INS24 MOV21 MOV21 INS21 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS58 INS27 INS7 INS8 INS32 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS32 INS34 INS42 MOV42 INS34 INS39 INS59 INS42 INS42 INS42 INS32 INS60 INS60 MOV21 INS42 MOV42 INS42 INS42 INS34 INS42 INS42 INS39 INS59 INS39 INS59 INS48 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL6 DEL42 DEL32 DEL34 DEL42 DEL32 DEL42 DEL34 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL9 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL39 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL42 DEL44 DEL32 DEL21 DEL8 DEL70 DEL42 DEL34 DEL27 DEL36 DEL42 DEL27 DEL34 DEL27 DEL42