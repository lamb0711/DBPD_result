HDFS-6168. Remove a deprecated constructor and the deprecated methods reportChecksumFailure, getDelegationToken(Text), renewDelegationToken and cancelDelegationToken from DistributedFileSystem.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582856 13f79535-47bb-0310-9956-ffa450edef68

-  @Deprecated
-  public DistributedFileSystem(InetSocketAddress namenode,
-    Configuration conf) throws IOException {
-    initialize(NameNode.getUri(namenode), conf);
-  }
-
-   * We need to find the blocks that didn't match.  Likely only one 
-   * is corrupt but we will report both to the namenode.  In the future,
-   * we can consider figuring out exactly which block is corrupt.
-   */
-  // We do not see a need for user to report block checksum errors and do not  
-  // want to rely on user to report block corruptions.
-  @Deprecated
-  public boolean reportChecksumFailure(Path f, 
-    FSDataInputStream in, long inPos, 
-    FSDataInputStream sums, long sumsPos) {
-    
-    if(!(in instanceof HdfsDataInputStream && sums instanceof HdfsDataInputStream))
-      throw new IllegalArgumentException(
-          "Input streams must be types of HdfsDataInputStream");
-    
-    LocatedBlock lblocks[] = new LocatedBlock[2];
-
-    // Find block in data stream.
-    HdfsDataInputStream dfsIn = (HdfsDataInputStream) in;
-    ExtendedBlock dataBlock = dfsIn.getCurrentBlock();
-    if (dataBlock == null) {
-      LOG.error("Error: Current block in data stream is null! ");
-      return false;
-    }
-    DatanodeInfo[] dataNode = {dfsIn.getCurrentDatanode()}; 
-    lblocks[0] = new LocatedBlock(dataBlock, dataNode);
-    LOG.info("Found checksum error in data stream at "
-        + dataBlock + " on datanode="
-        + dataNode[0]);
-
-    // Find block in checksum stream
-    HdfsDataInputStream dfsSums = (HdfsDataInputStream) sums;
-    ExtendedBlock sumsBlock = dfsSums.getCurrentBlock();
-    if (sumsBlock == null) {
-      LOG.error("Error: Current block in checksum stream is null! ");
-      return false;
-    }
-    DatanodeInfo[] sumsNode = {dfsSums.getCurrentDatanode()}; 
-    lblocks[1] = new LocatedBlock(sumsBlock, sumsNode);
-    LOG.info("Found checksum error in checksum stream at "
-        + sumsBlock + " on datanode=" + sumsNode[0]);
-
-    // Ask client to delete blocks.
-    dfs.reportChecksumFailure(f.toString(), lblocks);
-
-    return true;
-  }
-
-  /**
-  public 
-  Token<DelegationTokenIdentifier> getDelegationToken(String renewer
-  ) throws IOException {
+  public Token<DelegationTokenIdentifier> getDelegationToken(String renewer)
+      throws IOException {
-  /*
-   * Delegation Token Operations
-   * These are DFS only operations.
-   */
-  
-  /**
-   * Get a valid Delegation Token.
-   * 
-   * @param renewer Name of the designated renewer for the token
-   * @return Token<DelegationTokenIdentifier>
-   * @throws IOException
-   * @deprecated use {@link #getDelegationToken(String)}
-   */
-  @Deprecated
-  public Token<DelegationTokenIdentifier> getDelegationToken(Text renewer)
-      throws IOException {
-    return getDelegationToken(renewer.toString());
-  }
-  
-  /**
-   * Renew an existing delegation token.
-   * 
-   * @param token delegation token obtained earlier
-   * @return the new expiration time
-   * @throws IOException
-   * @deprecated Use Token.renew instead.
-   */
-  public long renewDelegationToken(Token<DelegationTokenIdentifier> token)
-      throws InvalidToken, IOException {
-    try {
-      return token.renew(getConf());
-    } catch (InterruptedException ie) {
-      throw new RuntimeException("Caught interrupted", ie);
-    }
-  }
-
-  /**
-   * Cancel an existing delegation token.
-   * 
-   * @param token delegation token
-   * @throws IOException
-   * @deprecated Use Token.cancel instead.
-   */
-  public void cancelDelegationToken(Token<DelegationTokenIdentifier> token)
-      throws IOException {
-    try {
-      token.cancel(getConf());
-    } catch (InterruptedException ie) {
-      throw new RuntimeException("Caught interrupted", ie);
-    }
-  }
-

DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL36 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL25 DEL42 DEL43 DEL42 DEL85 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL34 DEL2 DEL27 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL4 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL34 DEL2 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31