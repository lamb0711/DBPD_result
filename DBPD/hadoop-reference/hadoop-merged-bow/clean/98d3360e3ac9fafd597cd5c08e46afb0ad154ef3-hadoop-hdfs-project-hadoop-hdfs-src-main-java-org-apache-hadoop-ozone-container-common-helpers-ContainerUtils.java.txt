HDFS-11444. Ozone: Fix datanode ID handling in MiniOzoneCluster. Contributed by Weiwei Yang.

+import org.apache.hadoop.hdfs.protocol.DatanodeID;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+  /**
+   * Write datanode ID protobuf messages to an ID file.
+   * The old ID file will be overwritten.
+   *
+   * @param ids A set of {@link DatanodeID}
+   * @param path Local ID file path
+   * @throws IOException When read/write error occurs
+   */
+  private synchronized static void writeDatanodeIDs(List<DatanodeID> ids,
+      File path) throws IOException {
+    if (path.exists()) {
+      if (!path.delete() || !path.createNewFile()) {
+        throw new IOException("Unable to overwrite the datanode ID file.");
+      }
+    } else {
+      if(!path.getParentFile().exists() &&
+          !path.getParentFile().mkdirs()) {
+        throw new IOException("Unable to create datanode ID directories.");
+      }
+    }
+    try (FileOutputStream out = new FileOutputStream(path)) {
+      for (DatanodeID id : ids) {
+        HdfsProtos.DatanodeIDProto dnId = id.getProtoBufMessage();
+        dnId.writeDelimitedTo(out);
+      }
+    }
+  }
+
+  /**
+   * Persistent a {@link DatanodeID} to a local file.
+   * It reads the IDs first and append a new entry only if the ID is new.
+   * This is to avoid on some dirty environment, this file gets too big.
+   *
+   * @throws IOException when read/write error occurs
+   */
+  public synchronized static void writeDatanodeIDTo(DatanodeID dnID,
+      File path) throws IOException {
+    List<DatanodeID> ids = ContainerUtils.readDatanodeIDsFrom(path);
+    // Only create or overwrite the file
+    // if the ID doesn't exist in the ID file
+    for (DatanodeID id : ids) {
+      if (id.getProtoBufMessage()
+          .equals(dnID.getProtoBufMessage())) {
+        return;
+      }
+    }
+    ids.add(dnID);
+    writeDatanodeIDs(ids, path);
+  }
+
+  /**
+   * Read {@link DatanodeID} from a local ID file and return a set of
+   * datanode IDs. If the ID file doesn't exist, an empty set is returned.
+   *
+   * @param path ID file local path
+   * @return A set of {@link DatanodeID}
+   * @throws IOException If the id file is malformed or other I/O exceptions
+   */
+  public synchronized static List<DatanodeID> readDatanodeIDsFrom(File path)
+      throws IOException {
+    List<DatanodeID> ids = new ArrayList<DatanodeID>();
+    if (!path.exists()) {
+      return ids;
+    }
+    try(FileInputStream in = new FileInputStream(path)) {
+      while(in.available() > 0) {
+        try {
+          HdfsProtos.DatanodeIDProto id =
+              HdfsProtos.DatanodeIDProto.parseDelimitedFrom(in);
+          ids.add(DatanodeID.getFromProtoBuf(id));
+        } catch (IOException e) {
+          throw new IOException("Failed to parse Datanode ID from "
+              + path.getAbsolutePath(), e);
+        }
+      }
+    }
+    return ids;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS83 INS74 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS42 INS25 INS54 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS70 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS42 INS60 INS25 INS54 INS41 INS66 INS66 INS42 INS66 INS65 INS42 INS66 INS42 INS66 INS43 INS43 INS42 INS32 INS8 INS8 INS58 INS8 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS32 INS32 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS65 INS42 INS66 INS42 INS42 INS42 INS74 INS59 INS38 INS8 INS58 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS43 INS59 INS70 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS32 INS41 INS43 INS59 INS61 INS27 INS8 INS27 INS8 INS42 INS42 INS14 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS14 INS27 INS8 INS38 INS38 INS53 INS38 INS38 INS53 INS43 INS42 INS43 INS42 INS60 INS21 INS32 INS42 INS32 INS41 INS43 INS43 INS43 INS42 INS32 INS34 INS54 INS32 INS32 INS14 INS32 INS32 INS14 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS45 INS32 INS42 INS32 INS42 INS43 INS45 INS40 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS53 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42