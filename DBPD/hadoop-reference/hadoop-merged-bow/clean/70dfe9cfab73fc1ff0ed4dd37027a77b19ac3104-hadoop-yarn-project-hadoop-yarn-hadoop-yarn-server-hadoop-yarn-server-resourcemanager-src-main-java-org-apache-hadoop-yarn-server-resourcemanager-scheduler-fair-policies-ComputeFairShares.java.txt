Merge branch 'trunk' into HDFS-6584

-    Collection<Schedulable> activeSchedulables = new ArrayList<Schedulable>();
-    for (Schedulable sched : schedulables) {
-      if ((sched instanceof FSQueue) && !((FSQueue) sched).isActive()) {
-        setResourceValue(0, sched.getFairShare(), type);
-      } else {
-        activeSchedulables.add(sched);
-      }
-    }
-
-    computeSharesInternal(activeSchedulables, totalResources, type, false);
+    computeSharesInternal(schedulables, totalResources, type, false);
-      Collection<? extends Schedulable> schedulables, Resource totalResources,
-      ResourceType type, boolean isSteadyShare) {
+      Collection<? extends Schedulable> allSchedulables,
+      Resource totalResources, ResourceType type, boolean isSteadyShare) {
+
+    Collection<Schedulable> schedulables = new ArrayList<Schedulable>();
+    int takenResources = handleFixedFairShares(
+        allSchedulables, schedulables, isSteadyShare, type);
+
-    int totalResource = Math.min(totalMaxShare,
-        getResourceValue(totalResources, type));
-    
+
+    int totalResource = Math.max((getResourceValue(totalResources, type) -
+        takenResources), 0);
+    totalResource = Math.min(totalMaxShare, totalResource);
+
-  
+
+  /**
+   * Helper method to handle Schedulabes with fixed fairshares.
+   * Returns the resources taken by fixed fairshare schedulables,
+   * and adds the remaining to the passed nonFixedSchedulables.
+   */
+  private static int handleFixedFairShares(
+      Collection<? extends Schedulable> schedulables,
+      Collection<Schedulable> nonFixedSchedulables,
+      boolean isSteadyShare, ResourceType type) {
+    int totalResource = 0;
+
+    for (Schedulable sched : schedulables) {
+      int fixedShare = getFairShareIfFixed(sched, isSteadyShare, type);
+      if (fixedShare < 0) {
+        nonFixedSchedulables.add(sched);
+      } else {
+        setResourceValue(fixedShare,
+            isSteadyShare
+                ? ((FSQueue)sched).getSteadyFairShare()
+                : sched.getFairShare(),
+            type);
+        totalResource = (int) Math.min((long)totalResource + (long)fixedShare,
+            Integer.MAX_VALUE);
+      }
+    }
+    return totalResource;
+  }
+
+  /**
+   * Get the fairshare for the {@link Schedulable} if it is fixed, -1 otherwise.
+   *
+   * The fairshare is fixed if either the maxShare is 0, weight is 0,
+   * or the Schedulable is not active for instantaneous fairshare.
+   */
+  private static int getFairShareIfFixed(Schedulable sched,
+      boolean isSteadyShare, ResourceType type) {
+
+    // Check if maxShare is 0
+    if (getResourceValue(sched.getMaxShare(), type) <= 0) {
+      return 0;
+    }
+
+    // For instantaneous fairshares, check if queue is active
+    if (!isSteadyShare &&
+        (sched instanceof FSQueue) && !((FSQueue)sched).isActive()) {
+      return 0;
+    }
+
+    // Check if weight is 0
+    if (sched.getWeights().getWeight(type) <= 0) {
+      int minShare = getResourceValue(sched.getMinShare(), type);
+      return (minShare <= 0) ? 0 : minShare;
+    }
+
+    return -1;
+  }
+

INS31 INS31 INS44 INS29 INS83 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 MOV44 INS44 INS44 INS8 INS74 INS42 MOV60 INS60 INS21 INS65 INS74 INS42 INS39 INS42 INS43 INS42 INS60 INS70 INS41 INS65 INS39 INS42 INS43 INS42 INS25 MOV25 INS25 INS41 INS43 INS76 INS39 INS59 INS7 INS66 INS66 INS66 INS43 INS43 INS42 INS39 INS59 INS44 INS42 INS8 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS27 INS8 INS27 INS8 INS38 UPD42 INS42 INS43 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS43 INS42 INS60 INS25 INS42 INS32 INS34 INS41 INS38 INS41 INS32 INS34 INS60 INS41 INS34 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS36 INS34 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS8 INS42 INS32 INS42 INS34 INS42 INS34 INS32 INS42 INS42 INS39 INS59 INS16 INS27 INS42 INS32 INS42 INS34 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS36 INS34 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS11 INS42 INS42 INS42 INS34 INS42 INS32 MOV32 INS39 INS32 INS36 INS42 INS42 INS42 INS27 INS40 INS11 INS11 INS11 INS43 INS42 INS39 INS42 INS39 INS42 INS42 DEL42 DEL8 DEL70 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8