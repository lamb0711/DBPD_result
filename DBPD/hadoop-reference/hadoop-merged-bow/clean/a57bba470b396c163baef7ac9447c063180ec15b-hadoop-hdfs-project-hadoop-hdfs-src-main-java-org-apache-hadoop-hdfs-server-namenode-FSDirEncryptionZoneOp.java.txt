Merge branch 'trunk' into HADOOP-12756

-import java.io.FileNotFoundException;
-  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(
+  private static EncryptedKeyVersion generateEncryptedDataEncryptionKey(
+    // must not be holding lock during this operation
+    assert !fsd.getFSNamesystem().hasReadLock();
+    assert !fsd.getFSNamesystem().hasWriteLock();
-    final String src;
+    final INodesInPath iip;
-      final INodesInPath iip = fsd.resolvePath(pc, srcArg);
-      src = iip.getPath();
-      final XAttr ezXAttr = fsd.ezManager.createEncryptionZone(src, suite,
+      iip = fsd.resolvePathForWrite(pc, srcArg);
+      final XAttr ezXAttr = fsd.ezManager.createEncryptionZone(iip, suite,
-    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);
-    final INodesInPath iip = fsd.getINodesInPath4Write(src, false);
+    fsd.getEditLog().logSetXAttrs(iip.getPath(), xAttrs, logRetryCache);
-      if (iip.getLastINode() == null) {
-        throw new FileNotFoundException("Path not found: " + iip.getPath());
-      }
-  static void setFileEncryptionInfo(final FSDirectory fsd, final String src,
-      final FileEncryptionInfo info) throws IOException {
+  static void setFileEncryptionInfo(final FSDirectory fsd,
+      final INodesInPath iip, final FileEncryptionInfo info)
+          throws IOException {
-      FSDirXAttrOp.unprotectedSetXAttrs(fsd, src, xAttrs,
+      FSDirXAttrOp.unprotectedSetXAttrs(fsd, iip, xAttrs,
-   * for non-encrypted files.
+   * for non-encrypted or raw files.
-   * @param inode inode of the file
-   * @param snapshotId ID of the snapshot that
-   *                   we want to get encryption info from
-   *            avoid obtaining the list of inodes again; if iip is
-   *            null then the list of inodes will be obtained again
+   *            avoid obtaining the list of inodes again
-      final INode inode, final int snapshotId, final INodesInPath iip)
-      throws IOException {
-    if (!inode.isFile() || !fsd.ezManager.hasCreatedEncryptionZone()) {
+      final INodesInPath iip) throws IOException {
+    if (iip.isRaw() ||
+        !fsd.ezManager.hasCreatedEncryptionZone() ||
+        !iip.getLastINode().isFile()) {
-      XAttr fileXAttr = FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(inode,
-          snapshotId, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);
+      XAttr fileXAttr = FSDirXAttrOp.unprotectedGetXAttrByPrefixedName(
+          iip, CRYPTO_XATTR_FILE_ENCRYPTION_INFO);
-            "inode " + inode, e);
+            "inode " + iip.getPath(), e);
+  /**
+   * If the file and encryption key are valid, return the encryption info,
+   * else throw a retry exception.  The startFile method generates the EDEK
+   * outside of the lock so the zone must be reverified.
+   *
+   * @param dir fsdirectory
+   * @param iip inodes in the file path
+   * @param ezInfo the encryption key
+   * @return FileEncryptionInfo for the file
+   * @throws RetryStartFileException if key is inconsistent with current zone
+   */
+  static FileEncryptionInfo getFileEncryptionInfo(FSDirectory dir,
+      INodesInPath iip, EncryptionKeyInfo ezInfo)
+          throws RetryStartFileException {
+    FileEncryptionInfo feInfo = null;
+    final EncryptionZone zone = getEZForPath(dir, iip);
+    if (zone != null) {
+      // The path is now within an EZ, but we're missing encryption parameters
+      if (ezInfo == null) {
+        throw new RetryStartFileException();
+      }
+      // Path is within an EZ and we have provided encryption parameters.
+      // Make sure that the generated EDEK matches the settings of the EZ.
+      final String ezKeyName = zone.getKeyName();
+      if (!ezKeyName.equals(ezInfo.edek.getEncryptionKeyName())) {
+        throw new RetryStartFileException();
+      }
+      feInfo = new FileEncryptionInfo(ezInfo.suite, ezInfo.protocolVersion,
+          ezInfo.edek.getEncryptedKeyVersion().getMaterial(),
+          ezInfo.edek.getEncryptedKeyIv(),
+          ezKeyName, ezInfo.edek.getEncryptionKeyVersionName());
+    }
+    return feInfo;
+  }
+
+    if (!fsd.ezManager.hasCreatedEncryptionZone()) {
+      return false;
+    }
+
+  /**
+   * If the file is in an encryption zone, we optimistically create an
+   * EDEK for the file by calling out to the configured KeyProvider.
+   * Since this typically involves doing an RPC, the fsn lock is yielded.
+   *
+   * Since the path can flip-flop between being in an encryption zone and not
+   * in the meantime, the call MUST re-resolve the IIP and re-check
+   * preconditions if this method does not return null;
+   *
+   * @param fsn the namesystem.
+   * @param iip the inodes for the path
+   * @param supportedVersions client's supported versions
+   * @return EncryptionKeyInfo if the path is in an EZ, else null
+   */
+  static EncryptionKeyInfo getEncryptionKeyInfo(FSNamesystem fsn,
+      INodesInPath iip, CryptoProtocolVersion[] supportedVersions)
+      throws IOException {
+    FSDirectory fsd = fsn.getFSDirectory();
+    // Nothing to do if the path is not within an EZ
+    final EncryptionZone zone = getEZForPath(fsd, iip);
+    if (zone == null) {
+      EncryptionFaultInjector.getInstance().startFileNoKey();
+      return null;
+    }
+    CryptoProtocolVersion protocolVersion = fsn.chooseProtocolVersion(
+        zone, supportedVersions);
+    CipherSuite suite = zone.getSuite();
+    String ezKeyName = zone.getKeyName();
+
+    Preconditions.checkNotNull(protocolVersion);
+    Preconditions.checkNotNull(suite);
+    Preconditions.checkArgument(!suite.equals(CipherSuite.UNKNOWN),
+                                "Chose an UNKNOWN CipherSuite!");
+    Preconditions.checkNotNull(ezKeyName);
+
+    // Generate EDEK while not holding the fsn lock.
+    fsn.writeUnlock();
+    try {
+      EncryptionFaultInjector.getInstance().startFileBeforeGenerateKey();
+      return new EncryptionKeyInfo(protocolVersion, suite, ezKeyName,
+          generateEncryptedDataEncryptionKey(fsd, ezKeyName));
+    } finally {
+      fsn.writeLock();
+      EncryptionFaultInjector.getInstance().startFileAfterGenerateKey();
+    }
+  }
+
+  static class EncryptionKeyInfo {
+    final CryptoProtocolVersion protocolVersion;
+    final CipherSuite suite;
+    final String ezKeyName;
+    final KeyProviderCryptoExtension.EncryptedKeyVersion edek;
+
+    EncryptionKeyInfo(
+        CryptoProtocolVersion protocolVersion, CipherSuite suite,
+        String ezKeyName, KeyProviderCryptoExtension.EncryptedKeyVersion edek) {
+      this.protocolVersion = protocolVersion;
+      this.suite = suite;
+      this.ezKeyName = ezKeyName;
+      this.edek = edek;
+    }
+  }

INS31 INS31 INS55 INS83 MOV60 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS42 INS23 INS23 INS23 INS23 INS31 INS6 INS6 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS25 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 MOV43 INS42 INS5 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS54 INS83 INS43 INS59 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS43 INS59 INS42 INS44 INS44 INS44 INS44 INS8 INS38 INS38 INS43 INS42 UPD66 UPD66 MOV38 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS42 INS38 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS32 INS32 INS42 UPD42 INS21 MOV32 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS25 INS60 INS25 INS21 INS32 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS45 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS21 INS21 INS42 INS42 INS42 INS40 INS7 INS7 INS7 INS7 INS32 INS42 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS83 MOV43 INS59 INS38 INS8 INS7 INS40 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS14 INS32 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV32 MOV8 INS42 INS33 INS53 INS42 INS32 INS32 INS53 INS42 INS14 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 UPD42 INS14 INS42 INS42 INS42 INS42 INS32 INS14 INS43 INS40 INS40 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS42 INS43 INS42 INS32 INS42 INS40 INS42 INS40 INS42 UPD43 INS42 INS42 INS42 INS40 INS42 MOV42 UPD45 INS45 DEL40 DEL26 DEL83 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL33 DEL27 DEL25 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL66 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL45 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8