HDDS-394. Rename *Key Apis in DatanodeContainerProtocol to *Block apis.
Contributed Dinesh Chitlangia.

-    .GetKeyRequestProto;
+    .GetBlockRequestProto;
-    .GetKeyResponseProto;
+    .GetBlockResponseProto;
-import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.KeyData;
+import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.BlockData;
-    .PutKeyRequestProto;
+    .PutBlockRequestProto;
-   * Calls the container protocol to get a container key.
+   * Calls the container protocol to get a container block.
-   * @return container protocol get key response
+   * @return container protocol get block response
-  public static GetKeyResponseProto getKey(XceiverClientSpi xceiverClient,
+  public static GetBlockResponseProto getBlock(XceiverClientSpi xceiverClient,
-    GetKeyRequestProto.Builder readKeyRequest = GetKeyRequestProto
+    GetBlockRequestProto.Builder readBlockRequest = GetBlockRequestProto
-        .setCmdType(Type.GetKey)
+        .setCmdType(Type.GetBlock)
-        .setGetKey(readKeyRequest)
+        .setGetBlock(readBlockRequest)
-    return response.getGetKey();
+    return response.getGetBlock();
-   * Calls the container protocol to put a container key.
+   * Calls the container protocol to put a container block.
-   * @param containerKeyData key data to identify container
+   * @param containerBlockData block data to identify container
-  public static void putKey(XceiverClientSpi xceiverClient,
-      KeyData containerKeyData, String traceID) throws IOException {
-    PutKeyRequestProto.Builder createKeyRequest = PutKeyRequestProto
+  public static void putBlock(XceiverClientSpi xceiverClient,
+      BlockData containerBlockData, String traceID) throws IOException {
+    PutBlockRequestProto.Builder createBlockRequest = PutBlockRequestProto
-        .setKeyData(containerKeyData);
+        .setBlockData(containerBlockData);
-        .setCmdType(Type.PutKey)
-        .setContainerID(containerKeyData.getBlockID().getContainerID())
+        .setCmdType(Type.PutBlock)
+        .setContainerID(containerBlockData.getBlockID().getContainerID())
-        .setPutKey(createKeyRequest)
+        .setPutBlock(createBlockRequest)
-   * name, key name and data to write sends all that data to the container using
-   * a single RPC. This API is designed to be used for files which are smaller
-   * than 1 MB.
+   * name, block name and data to write sends all that data to the container
+   * using a single RPC. This API is designed to be used for files which are
+   * smaller than 1 MB.
-    KeyData containerKeyData =
-        KeyData.newBuilder().setBlockID(blockID.getDatanodeBlockIDProtobuf())
+    BlockData containerBlockData =
+        BlockData.newBuilder().setBlockID(blockID.getDatanodeBlockIDProtobuf())
-    PutKeyRequestProto.Builder createKeyRequest =
-        PutKeyRequestProto.newBuilder()
-            .setKeyData(containerKeyData);
+    PutBlockRequestProto.Builder createBlockRequest =
+        PutBlockRequestProto.newBuilder()
+            .setBlockData(containerBlockData);
-            .setKey(createKeyRequest).setData(ByteString.copyFrom(data))
+            .setBlock(createBlockRequest).setData(ByteString.copyFrom(data))
-    GetKeyRequestProto.Builder getKey = GetKeyRequestProto
+    GetBlockRequestProto.Builder getBlock = GetBlockRequestProto
-            .newBuilder().setKey(getKey)
+            .newBuilder().setBlock(getBlock)

UPD40 UPD40 UPD40 UPD40 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD66 UPD66 UPD43 UPD66 UPD42 UPD66 UPD42 UPD43 UPD66 UPD66 UPD66 UPD43 UPD43 UPD43 UPD40 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 UPD40 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD40 UPD42