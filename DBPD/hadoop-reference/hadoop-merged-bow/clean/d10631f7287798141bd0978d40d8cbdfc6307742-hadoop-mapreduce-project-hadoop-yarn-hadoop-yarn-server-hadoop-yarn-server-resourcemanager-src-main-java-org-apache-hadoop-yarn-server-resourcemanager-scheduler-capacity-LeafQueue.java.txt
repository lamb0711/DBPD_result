Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+  
+  private float maxAMResourcePercent;
+  private int maxActiveApplications;
+  private int maxActiveApplicationsPerUser;
+  
-  Set<SchedulerApp> applications;
+  Set<SchedulerApp> activeApplications;
-  public final Resource minimumAllocation;
+  Set<SchedulerApp> pendingApplications;
+  
+  private final Resource minimumAllocation;
+  private final Resource maximumAllocation;
+  private final float minimumAllocationFactor;
+  final static int DEFAULT_AM_RESOURCE = 2 * 1024;
+  
+    this.maximumAllocation = cs.getMaximumResourceCapability();
+    this.minimumAllocationFactor = 
+        (float)(maximumAllocation.getMemory() - minimumAllocation.getMemory()) / 
+         maximumAllocation.getMemory();
+    this.maxAMResourcePercent = 
+        cs.getConfiguration().getMaximumApplicationMasterResourcePercent();
+    int maxActiveApplications = 
+        computeMaxActiveApplications(cs.getClusterResources(), 
+            maxAMResourcePercent, absoluteCapacity);
+    int maxActiveApplicationsPerUser = 
+        computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, 
+            userLimitFactor);
+
+        maxActiveApplications, maxActiveApplicationsPerUser,
-    this.applications = new TreeSet<SchedulerApp>(applicationComparator);
+    this.pendingApplications = 
+        new TreeSet<SchedulerApp>(applicationComparator);
+    this.activeApplications = new TreeSet<SchedulerApp>(applicationComparator);
+  private int computeMaxActiveApplications(Resource clusterResource,
+      float maxAMResourcePercent, float absoluteCapacity) {
+    return 
+        Math.max(
+            (int)((clusterResource.getMemory() / DEFAULT_AM_RESOURCE) * 
+                   maxAMResourcePercent * absoluteCapacity), 
+            1);
+  }
+  
+  private int computeMaxActiveApplicationsPerUser(int maxActiveApplications, 
+      int userLimit, float userLimitFactor) {
+    return (int)(maxActiveApplications * (userLimit / 100.0f) * userLimitFactor);
+  }
+  
+      int maxActiveApplications, int maxActiveApplicationsPerUser,
+    this.maxActiveApplications = maxActiveApplications;
+    this.maxActiveApplicationsPerUser = maxActiveApplicationsPerUser;
+    
+  /**
+   * Used only by tests.
+   */
+  @Private
+  public Resource getMinimumAllocation() {
+    return minimumAllocation;
+  }
+
+  /**
+   * Used only by tests.
+   */
+  @Private
+  public Resource getMaximumAllocation() {
+    return maximumAllocation;
+  }
+
+  /**
+   * Used only by tests.
+   */
+  @Private
+  public float getMinimumAllocationFactor() {
+    return minimumAllocationFactor;
+  }
+
+  public int getMaxApplications() {
+    return maxApplications;
+  }
+
+  public int getMaxApplicationsPerUser() {
+    return maxApplicationsPerUser;
+  }
+
+  public int getMaximumActiveApplications() {
+    return maxActiveApplications;
+  }
+
+  public int getMaximumActiveApplicationsPerUser() {
+    return maxActiveApplicationsPerUser;
+  }
+
+  @Override
-    return applications.size();
+    return getNumPendingApplications() + getNumActiveApplications();
+  public synchronized int getNumPendingApplications() {
+    return pendingApplications.size();
+  }
+
+  public synchronized int getNumActiveApplications() {
+    return activeApplications.size();
+  }
+
+  @Private
+  public synchronized int getNumApplications(String user) {
+    return getUser(user).getTotalApplications();
+  }
+
+  @Private
+  public synchronized int getNumPendingApplications(String user) {
+    return getUser(user).getPendingApplications();
+  }
+
+  @Private
+  public synchronized int getNumActiveApplications(String user) {
+    return getUser(user).getActiveApplications();
+  }
+  
+  @Private
+  public int getUserLimit() {
+    return userLimit;
+  }
+
+  @Private
+  public float getUserLimitFactor() {
+    return userLimitFactor;
+  }
+
+        leafQueue.maxActiveApplications, 
+        leafQueue.maxActiveApplicationsPerUser,
-      if (state != QueueState.RUNNING) {
+      if (getState() != QueueState.RUNNING) {
-      if (getNumApplications() >= maxApplications) {
+      if (getNumApplications() >= getMaxApplications()) {
-      if (user.getApplications() >= maxApplicationsPerUser) {
+      if (user.getTotalApplications() >= getMaxApplicationsPerUser()) {
-        " already has " + user.getApplications() + 
+        " already has " + user.getTotalApplications() + 
+  private synchronized void activateApplications() {
+    for (Iterator<SchedulerApp> i=pendingApplications.iterator(); 
+         i.hasNext(); ) {
+      SchedulerApp application = i.next();
+      
+      // Check queue limit
+      if (getNumActiveApplications() >= getMaximumActiveApplications()) {
+        break;
+      }
+      
+      // Check user limit
+      User user = getUser(application.getUser());
+      if (user.getActiveApplications() < getMaximumActiveApplicationsPerUser()) {
+        user.activateApplication();
+        activeApplications.add(application);
+        i.remove();
+        LOG.info("Application " + application.getApplicationId().getId() + 
+            " from user: " + application.getUser() + 
+            " activated in queue: " + getQueueName());
+      }
+    }
+  }
+  
-    applications.add(application);
+    pendingApplications.add(application);
+    // Activate applications
+    activateApplications();
+    
-        " #user-applications: " + user.getApplications() + 
-        " #queue-applications: " + getNumApplications());
+        " #user-pending-applications: " + user.getPendingApplications() +
+        " #user-active-applications: " + user.getActiveApplications() +
+        " #queue-pending-applications: " + getNumPendingApplications() +
+        " #queue-active-applications: " + getNumActiveApplications()
+        );
-    applications.remove(application);
+    activeApplications.remove(application);
-    if (user.getApplications() == 0) {
+    if (user.getTotalApplications() == 0) {
+    // Check if we can activate more applications
+    activateApplications();
+    
-        " #user-applications: " + user.getApplications() + 
-        " #queue-applications: " + getNumApplications());
+        " #user-pending-applications: " + user.getPendingApplications() +
+        " #user-active-applications: " + user.getActiveApplications() +
+        " #queue-pending-applications: " + getNumPendingApplications() +
+        " #queue-active-applications: " + getNumActiveApplications()
+        );
-        " #applications=" + applications.size());
+        " #applications=" + activeApplications.size());
-    for (SchedulerApp application : applications) {
+    for (SchedulerApp application : activeApplications) {
+          // Required resource
+          Resource required = 
+              application.getResourceRequest(priority, RMNode.ANY).getCapability();
-          if (!needContainers(application, priority)) {
+          if (!needContainers(application, priority, required)) {
-          ResourceRequest required = 
-            application.getResourceRequest(priority, RMNode.ANY);
-
-          if (!assignToQueue(clusterResource, required.getCapability())) {
+          if (!assignToQueue(clusterResource, required)) {
-            computeUserLimit(application, clusterResource, 
-                required.getCapability());
+            computeUserLimit(application, clusterResource, required); 
-  boolean needContainers(SchedulerApp application, Priority priority) {
+  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {
-    return ((requiredContainers - reservedContainers) > 0);
+    int starvation = 0;
+    if (reservedContainers > 0) {
+      float nodeFactor = 
+          ((float)required.getMemory() / getMaximumAllocation().getMemory());
+      
+      // Use percentage of node required to bias against large containers...
+      // Protect against corner case where you need the whole node with
+      // Math.min(nodeFactor, minimumAllocationFactor)
+      starvation = 
+          (int)((application.getReReservations(priority) / reservedContainers) * 
+                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))
+               );
+      
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("needsContainers:" +
+            " app.#re-reserve=" + application.getReReservations(priority) + 
+            " reserved=" + reservedContainers + 
+            " nodeFactor=" + nodeFactor + 
+            " minAllocFactor=" + minimumAllocationFactor +
+            " starvation=" + starvation);
+      }
+    }
+    return (((starvation + requiredContainers) - reservedContainers) > 0);
-  public synchronized void updateResource(Resource clusterResource) {
+  public synchronized void updateClusterResource(Resource clusterResource) {
+    maxActiveApplications = 
+        computeMaxActiveApplications(clusterResource, maxAMResourcePercent, 
+            absoluteCapacity);
+    maxActiveApplicationsPerUser = 
+        computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, 
+            userLimitFactor);
+  }
+  
+  private synchronized void updateResource(Resource clusterResource) {
-    int applications = 0;
+    int pendingApplications = 0;
+    int activeApplications = 0;
-    public int getApplications() {
-      return applications;
+    public int getPendingApplications() {
+      return pendingApplications;
+    public int getActiveApplications() {
+      return activeApplications;
+    }
+
+    public int getTotalApplications() {
+      return getPendingApplications() + getActiveApplications();
+    }
+    
-      ++applications;
+      ++pendingApplications;
+    }
+    
+    public synchronized void activateApplication() {
+      --pendingApplications;
+      ++activeApplications;
-      --applications;
+      --activeApplications;
+  

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS74 INS59 UPD83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS44 INS44 INS29 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS8 UPD42 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS8 INS44 MOV78 INS83 INS83 INS39 INS42 INS44 INS8 UPD83 INS23 INS31 INS31 INS31 INS42 INS42 INS42 UPD42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS21 INS21 INS21 INS60 INS60 INS21 INS43 INS42 INS39 INS42 INS39 INS42 INS41 INS39 INS42 INS39 INS42 INS39 INS42 INS41 INS39 INS42 INS39 INS42 INS21 INS21 INS65 INS42 INS42 INS41 INS65 INS42 INS42 INS41 INS65 INS42 INS41 INS41 INS41 INS41 INS41 INS42 INS41 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS41 INS42 INS41 INS24 INS21 INS21 INS43 INS42 INS60 INS25 INS43 INS42 INS21 INS21 INS39 INS59 INS83 INS39 INS42 INS8 UPD42 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS8 INS42 INS42 INS34 INS34 INS7 INS7 INS7 INS39 INS59 INS39 INS59 INS7 INS42 INS32 INS11 INS7 INS7 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS58 INS32 INS8 INS32 INS32 UPD42 INS42 INS39 INS59 INS27 INS8 INS42 INS7 INS7 INS42 INS34 UPD42 INS41 INS41 INS21 INS21 INS22 INS32 INS22 INS27 INS22 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS22 INS14 INS42 INS42 INS11 INS34 INS39 INS36 INS22 INS42 INS22 INS42 INS32 INS32 INS42 INS42 UPD42 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS40 INS74 INS59 INS42 INS42 INS60 INS25 INS60 INS25 UPD42 INS42 UPD42 INS42 INS42 INS34 INS42 INS34 INS60 INS21 INS25 INS42 INS32 INS42 INS32 INS42 UPD42 INS27 INS38 INS38 INS52 INS42 INS42 INS42 INS52 INS42 INS11 INS32 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS74 INS42 INS39 INS36 INS27 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS45 INS32 UPD45 INS45 INS32 UPD45 UPD42 INS45 INS32 UPD45 INS45 INS32 UPD45 INS39 INS59 INS7 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 UPD42 INS39 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS27 INS42 INS36 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS10 INS42 INS42 INS32 INS32 INS32 INS21 INS21 INS21 INS21 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 UPD42 INS42 UPD42 UPD42 INS42 INS36 INS42 INS11 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS36 INS42 INS42 INS27 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS32 MOV25 INS27 INS39 INS36 INS32 INS36 INS32 INS32 INS27 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS11 INS32 INS27 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS45 INS32 INS45 INS32 UPD43 INS39 INS32 INS32 INS42 INS36 INS36 INS27 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 MOV42 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 INS27 INS27 INS45 INS45 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV42 MOV42 INS32 INS42 INS34 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32