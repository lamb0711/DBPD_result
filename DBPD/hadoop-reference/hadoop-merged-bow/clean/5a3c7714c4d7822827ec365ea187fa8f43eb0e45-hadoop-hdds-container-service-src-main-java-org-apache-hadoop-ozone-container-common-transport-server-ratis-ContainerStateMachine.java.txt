HDDS-887. Add DispatcherContext info to Dispatcher from containerStateMachine. Contributed by Shashikant Banerjee.

-import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos;
-import org.apache.hadoop.ozone.container.common.helpers.BlockData;
-import org.apache.hadoop.hdds.protocol.datanode.proto.ContainerProtos.Stage;
-              .setStage(Stage.WRITE_DATA)
-              .setStage(Stage.COMMIT_DATA)
-      ContainerCommandRequestProto requestProto) {
+      ContainerCommandRequestProto requestProto,
+      DispatcherContext context) {
-    ContainerCommandResponseProto response = dispatcher.dispatch(requestProto);
+    ContainerCommandResponseProto response =
+        dispatcher.dispatch(requestProto, context);
-  private Message runCommand(ContainerCommandRequestProto requestProto) {
-    return dispatchCommand(requestProto)::toByteString;
+  private Message runCommand(ContainerCommandRequestProto requestProto,
+      DispatcherContext context) {
+    return dispatchCommand(requestProto, context)::toByteString;
-      ContainerCommandRequestProto requestProto, long entryIndex) {
+      ContainerCommandRequestProto requestProto, long entryIndex, long term) {
+    DispatcherContext context =
+        new DispatcherContext.Builder()
+            .setTerm(term)
+            .setLogIndex(entryIndex)
+            .setStage(DispatcherContext.WriteChunkStage.WRITE_DATA)
+            .build();
-        .supplyAsync(() -> runCommand(requestProto), chunkExecutor);
+        .supplyAsync(() -> runCommand(requestProto, context), chunkExecutor);
-        return handleWriteChunk(requestProto, entry.getIndex());
+        return handleWriteChunk(requestProto, entry.getIndex(),
+            entry.getTerm());
-      return CompletableFuture.completedFuture(runCommand(requestProto));
+      return CompletableFuture.completedFuture(runCommand(requestProto, null));
-  private ByteString readStateMachineData(ContainerCommandRequestProto
-                                              requestProto) {
+  private ByteString readStateMachineData(
+      ContainerCommandRequestProto requestProto, long term, long index) {
-    // Assert that store log entry is for COMMIT_DATA, the WRITE_DATA is
-    // written through writeStateMachineData.
-    Preconditions
-        .checkArgument(writeChunkRequestProto.getStage() == Stage.COMMIT_DATA);
-
-            .setChunkData(writeChunkRequestProto.getChunkData())
-            // set readFromTempFile to true in case, the chunkFile does
-            // not exist as applyTransaction is not executed for this entry yet.
-            .setReadFromTmpFile(true);
+            .setChunkData(writeChunkRequestProto.getChunkData());
-
+    DispatcherContext context =
+        new DispatcherContext.Builder()
+            .setTerm(term)
+            .setLogIndex(index)
+            .setReadFromTmpFile(true)
+            .build();
-        dispatchCommand(dataContainerCommandProto);
+        dispatchCommand(dataContainerCommandProto, context);
-  private ByteString getCachedStateMachineData(Long logIndex,
+  private ByteString getCachedStateMachineData(Long logIndex, long term,
-              return readStateMachineData(requestProto);
+              return readStateMachineData(requestProto, term, logIndex);
-            .setData(data).setStage(Stage.WRITE_DATA);
+            .setData(data);
-            return getCachedStateMachineData(entry.getIndex(), requestProto);
+            return getCachedStateMachineData(entry.getIndex(), entry.getTerm(),
+                requestProto);
+    DispatcherContext.Builder builder =
+        new DispatcherContext.Builder()
+            .setTerm(trx.getLogEntry().getTerm())
+            .setLogIndex(index);
-      if (cmdType == Type.PutBlock || cmdType == Type.PutSmallFile) {
-        BlockData blockData;
-        ContainerProtos.BlockData blockDataProto = cmdType == Type.PutBlock ?
-            requestProto.getPutBlock().getBlockData() :
-            requestProto.getPutSmallFile().getBlock().getBlockData();
-
-        // set the blockCommitSequenceId
-        try {
-          blockData = BlockData.getFromProtoBuf(blockDataProto);
-        } catch (IOException ioe) {
-          LOG.error("unable to retrieve blockData info for Block {}",
-              blockDataProto.getBlockID());
-          return completeExceptionally(ioe);
-        }
-        blockData.setBlockCommitSequenceId(index);
-        final ContainerProtos.PutBlockRequestProto putBlockRequestProto =
-            ContainerProtos.PutBlockRequestProto
-                .newBuilder(requestProto.getPutBlock())
-                .setBlockData(blockData.getProtoBufMessage()).build();
-        ContainerCommandRequestProto containerCommandRequestProto;
-        if (cmdType == Type.PutSmallFile) {
-          ContainerProtos.PutSmallFileRequestProto smallFileRequestProto =
-              ContainerProtos.PutSmallFileRequestProto
-                  .newBuilder(requestProto.getPutSmallFile())
-                  .setBlock(putBlockRequestProto).build();
-          containerCommandRequestProto =
-              ContainerCommandRequestProto.newBuilder(requestProto)
-                  .setPutSmallFile(smallFileRequestProto).build();
-        } else {
-          containerCommandRequestProto =
-              ContainerCommandRequestProto.newBuilder(requestProto)
-                  .setPutBlock(putBlockRequestProto).build();
-        }
-        future = CompletableFuture
-            .supplyAsync(() -> runCommand(containerCommandRequestProto),
-                getCommandExecutor(requestProto));
-      } else {
-        // Make sure that in write chunk, the user data is not set
-        if (cmdType == Type.WriteChunk) {
-          Preconditions.checkArgument(requestProto
-              .getWriteChunk().getData().isEmpty());
-        }
-        future = CompletableFuture.supplyAsync(() -> runCommand(requestProto),
-            getCommandExecutor(requestProto));
+      // Make sure that in write chunk, the user data is not set
+      if (cmdType == Type.WriteChunk) {
+        Preconditions
+            .checkArgument(requestProto.getWriteChunk().getData().isEmpty());
+        builder
+            .setStage(DispatcherContext.WriteChunkStage.COMMIT_DATA);
+      future = CompletableFuture
+          .supplyAsync(() -> runCommand(requestProto, builder.build()),
+              getCommandExecutor(requestProto));

INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS39 INS42 INS39 INS42 INS60 INS39 INS42 INS60 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS42 INS32 MOV32 INS42 INS42 INS32 MOV32 INS40 INS42 INS32 MOV25 MOV21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 MOV32 INS32 INS42 INS40 INS32 UPD42 MOV42 INS9 INS14 INS42 INS32 INS21 UPD42 UPD42 INS32 INS42 INS42 INS42 INS32 INS33 INS32 INS42 INS42 INS43 INS32 INS42 INS32 INS86 MOV32 INS14 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS32 INS43 INS43 MOV42 MOV42 MOV32 INS40 INS40 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL32 DEL21 DEL42 DEL9 DEL32 DEL42 DEL40 DEL32 DEL32 DEL86 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL40 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL40 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL40 DEL27 DEL40 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL7 DEL21 DEL8 DEL8 DEL25