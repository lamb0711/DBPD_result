YARN-1713. Added get-new-app and submit-app functionality to RM web services. Contributed by Varun Vasudev.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607216 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.ByteBuffer;
+import javax.ws.rs.POST;
+import org.apache.commons.codec.binary.Base64;
+import org.apache.hadoop.io.DataOutputBuffer;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.Credentials;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.TokenIdentifier;
+import org.apache.hadoop.yarn.api.protocolrecords.GetNewApplicationRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetNewApplicationResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.SubmitApplicationRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.SubmitApplicationResponse;
+import org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext;
+import org.apache.hadoop.yarn.api.records.ContainerLaunchContext;
+import org.apache.hadoop.yarn.api.records.LocalResource;
+import org.apache.hadoop.yarn.api.records.Priority;
+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.NewApplication;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ApplicationSubmissionContextInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.CredentialsInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.LocalResourceInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceInfo;
+
+  /**
+   * Generates a new ApplicationId which is then sent to the client
+   * 
+   * @param hsr
+   *          the servlet request
+   * @return Response containing the app id and the maximum resource
+   *         capabilities
+   * @throws AuthorizationException
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  @POST
+  @Path("/apps/new-application")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response createNewApplication(@Context HttpServletRequest hsr)
+      throws AuthorizationException, IOException, InterruptedException {
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+          + "user not authenticated");
+    }
+
+    NewApplication appId = createNewApplication();
+    return Response.status(Status.OK).entity(appId).build();
+
+  }
+
+  // reuse the code in ClientRMService to create new app
+  // get the new app id and submit app
+  // set location header with new app location
+  /**
+   * Function to submit an app to the RM
+   * 
+   * @param newApp
+   *          structure containing information to construct the
+   *          ApplicationSubmissionContext
+   * @param hsr
+   *          the servlet request
+   * @return Response containing the status code
+   * @throws AuthorizationException
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  @POST
+  @Path("/apps")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response submitApplication(ApplicationSubmissionContextInfo newApp,
+      @Context HttpServletRequest hsr) throws AuthorizationException,
+      IOException, InterruptedException {
+
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+          + "user not authenticated");
+    }
+
+    ApplicationSubmissionContext appContext =
+        createAppSubmissionContext(newApp);
+    final SubmitApplicationRequest req =
+        SubmitApplicationRequest.newInstance(appContext);
+
+    try {
+      callerUGI
+        .doAs(new PrivilegedExceptionAction<SubmitApplicationResponse>() {
+          @Override
+          public SubmitApplicationResponse run() throws IOException,
+              YarnException {
+            return rm.getClientRMService().submitApplication(req);
+          }
+        });
+    } catch (UndeclaredThrowableException ue) {
+      if (ue.getCause() instanceof YarnException) {
+        throw new BadRequestException(ue.getCause().getMessage());
+      }
+      LOG.info("Submit app request failed", ue);
+      throw ue;
+    }
+
+    String url = hsr.getRequestURL() + "/" + newApp.getApplicationId();
+    return Response.status(Status.ACCEPTED).header(HttpHeaders.LOCATION, url)
+      .build();
+  }
+
+  /**
+   * Function that actually creates the ApplicationId by calling the
+   * ClientRMService
+   * 
+   * @return returns structure containing the app-id and maximum resource
+   *         capabilities
+   */
+  private NewApplication createNewApplication() {
+    GetNewApplicationRequest req =
+        recordFactory.newRecordInstance(GetNewApplicationRequest.class);
+    GetNewApplicationResponse resp;
+    try {
+      resp = rm.getClientRMService().getNewApplication(req);
+    } catch (YarnException e) {
+      String msg = "Unable to create new app from RM web service";
+      LOG.error(msg, e);
+      throw new YarnRuntimeException(msg, e);
+    }
+    NewApplication appId =
+        new NewApplication(resp.getApplicationId().toString(), new ResourceInfo(
+          resp.getMaximumResourceCapability()));
+    return appId;
+  }
+
+  /**
+   * Create the actual ApplicationSubmissionContext to be submitted to the RM
+   * from the information provided by the user.
+   * 
+   * @param newApp
+   *          the information provided by the user
+   * @return returns the constructed ApplicationSubmissionContext
+   * @throws IOException
+   */
+  protected ApplicationSubmissionContext createAppSubmissionContext(
+      ApplicationSubmissionContextInfo newApp) throws IOException {
+
+    // create local resources and app submission context
+
+    ApplicationId appid;
+    String error =
+        "Could not parse application id " + newApp.getApplicationId();
+    try {
+      appid =
+          ConverterUtils.toApplicationId(recordFactory,
+            newApp.getApplicationId());
+    } catch (Exception e) {
+      throw new BadRequestException(error);
+    }
+    ApplicationSubmissionContext appContext =
+        ApplicationSubmissionContext.newInstance(appid,
+          newApp.getApplicationName(), newApp.getQueue(),
+          Priority.newInstance(newApp.getPriority()),
+          createContainerLaunchContext(newApp), newApp.getUnmanagedAM(),
+          newApp.getCancelTokensWhenComplete(), newApp.getMaxAppAttempts(),
+          createAppSubmissionContextResource(newApp),
+          newApp.getApplicationType(),
+          newApp.getKeepContainersAcrossApplicationAttempts());
+    appContext.setApplicationTags(newApp.getApplicationTags());
+
+    return appContext;
+  }
+
+  protected Resource createAppSubmissionContextResource(
+      ApplicationSubmissionContextInfo newApp) throws BadRequestException {
+    if (newApp.getResource().getvCores() > rm.getConfig().getInt(
+      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,
+      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES)) {
+      String msg = "Requested more cores than configured max";
+      throw new BadRequestException(msg);
+    }
+    if (newApp.getResource().getMemory() > rm.getConfig().getInt(
+      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,
+      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB)) {
+      String msg = "Requested more memory than configured max";
+      throw new BadRequestException(msg);
+    }
+    Resource r =
+        Resource.newInstance(newApp.getResource().getMemory(), newApp
+          .getResource().getvCores());
+    return r;
+  }
+
+  /**
+   * Create the ContainerLaunchContext required for the
+   * ApplicationSubmissionContext. This function takes the user information and
+   * generates the ByteBuffer structures required by the ContainerLaunchContext
+   * 
+   * @param newApp
+   *          the information provided by the user
+   * @return
+   * @throws BadRequestException
+   * @throws IOException
+   */
+  protected ContainerLaunchContext createContainerLaunchContext(
+      ApplicationSubmissionContextInfo newApp) throws BadRequestException, IOException {
+
+    // create container launch context
+
+    HashMap<String, ByteBuffer> hmap = new HashMap<String, ByteBuffer>();
+    for (Map.Entry<String, String> entry : newApp
+      .getContainerLaunchContextInfo().getAuxillaryServiceData().entrySet()) {
+      if (entry.getValue().isEmpty() == false) {
+        Base64 decoder = new Base64(0, null, true);
+        byte[] data = decoder.decode(entry.getValue());
+        hmap.put(entry.getKey(), ByteBuffer.wrap(data));
+      }
+    }
+
+    HashMap<String, LocalResource> hlr = new HashMap<String, LocalResource>();
+    for (Map.Entry<String, LocalResourceInfo> entry : newApp
+      .getContainerLaunchContextInfo().getResources().entrySet()) {
+      LocalResourceInfo l = entry.getValue();
+      LocalResource lr =
+          LocalResource.newInstance(
+            ConverterUtils.getYarnUrlFromURI(l.getUrl()), l.getType(),
+            l.getVisibility(), l.getSize(), l.getTimestamp());
+      hlr.put(entry.getKey(), lr);
+    }
+
+    DataOutputBuffer out = new DataOutputBuffer();
+    Credentials cs =
+        createCredentials(newApp.getContainerLaunchContextInfo()
+          .getCredentials());
+    cs.writeTokenStorageToStream(out);
+    ByteBuffer tokens = ByteBuffer.wrap(out.getData());
+
+    ContainerLaunchContext ctx =
+        ContainerLaunchContext.newInstance(hlr, newApp
+          .getContainerLaunchContextInfo().getEnvironment(), newApp
+          .getContainerLaunchContextInfo().getCommands(), hmap, tokens, newApp
+          .getContainerLaunchContextInfo().getAcls());
+
+    return ctx;
+  }
+
+  /**
+   * Generate a Credentials object from the information in the CredentialsInfo
+   * object.
+   * 
+   * @param credentials
+   *          the CredentialsInfo provided by the user.
+   * @return
+   */
+  private Credentials createCredentials(CredentialsInfo credentials) {
+    Credentials ret = new Credentials();
+    try {
+      for (Map.Entry<String, String> entry : credentials.getTokens().entrySet()) {
+        Text alias = new Text(entry.getKey());
+        Token<TokenIdentifier> token = new Token<TokenIdentifier>();
+        token.decodeFromUrlString(entry.getValue());
+        ret.addToken(alias, token);
+      }
+      for (Map.Entry<String, String> entry : credentials.getTokens().entrySet()) {
+        Text alias = new Text(entry.getKey());
+        Base64 decoder = new Base64(0, null, true);
+        byte[] secret = decoder.decode(entry.getValue());
+        ret.addSecretKey(alias, secret);
+      }
+    } catch (IOException ie) {
+      throw new BadRequestException(
+        "Could not parse credentials data; exception message = "
+            + ie.getMessage());
+    }
+    return ret;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS29 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS60 INS60 INS54 INS60 INS41 INS65 INS65 INS42 INS60 INS60 INS54 INS60 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS54 INS60 INS21 INS41 INS42 INS43 INS42 INS42 INS25 INS25 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS60 INS70 INS60 INS70 INS60 INS60 INS21 INS60 INS60 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS54 INS41 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS83 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS42 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS74 INS59 INS44 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS60 INS53 INS32 INS32 INS60 INS53 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS32 INS42 INS25 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS32 INS42 INS60 INS60 INS21 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS70 INS70 INS44 INS8 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS21 INS53 INS32 INS45 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS57 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS32 INS14 INS45 INS32 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS40 INS43 INS59 INS14 INS32 INS42 INS32 INS42 INS40 INS40 INS43 INS59 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS32 INS42 INS27 INS8 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS43 INS44 INS32 INS8 INS44 INS32 INS8 INS43 INS42 INS53 INS43 INS27 INS42 INS42 INS40 INS43 INS27 INS42 INS42 INS14 INS42 INS62 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS42 INS32 INS42 INS43 INS59 INS32 INS14 INS42 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS9 INS60 INS60 INS21 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS32 INS42 INS60 INS60 INS21 INS21 INS74 INS42 INS32 INS42 INS60 INS60 INS60 INS21 INS42 INS14 INS42 INS45 INS45 INS42 INS45 INS45 INS74 INS1 INS32 INS43 INS53 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS5 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS74 INS59 INS32 INS32 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS43 INS59 INS5 INS59 INS32 INS43 INS27 INS43 INS43 INS31 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS43 INS32 INS43 INS34 INS33 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS74 INS42 INS42 INS43 INS32 INS43 INS34 INS33 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42