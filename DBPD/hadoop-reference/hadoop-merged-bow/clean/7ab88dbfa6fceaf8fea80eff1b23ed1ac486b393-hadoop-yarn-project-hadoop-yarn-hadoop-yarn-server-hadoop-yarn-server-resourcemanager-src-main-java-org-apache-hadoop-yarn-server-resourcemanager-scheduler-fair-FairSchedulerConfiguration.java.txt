YARN-7291. Better input parsing for resource in allocation file. Contributed by Zoltan Siegl

+import java.util.List;
+import com.google.common.collect.Lists;
+  private static final String RESOURCE_PERCENTAGE_PATTERN =
+      "^(-?(\\d+)(\\.\\d*)?)\\s*%\\s*";
+  private static final String RESOURCE_VALUE_PATTERN =
+      "^(-?\\d+)(\\.\\d*)?\\s*";
+  /**
+   * For resources separated by spaces instead of a comma.
+   */
+  private static final String RESOURCES_WITH_SPACES_PATTERN =
+      "-?\\d+(?:\\.\\d*)?\\s*[a-z]+\\s*";
-              resourceValue);
+              resourceName, resourceValue);
-      String value, String resourceValue)
+      String value, String resource, String resourceValue)
-      return findPercentage(resourceValue, "");
+      return findPercentage(resourceValue, resource);
-  private static ConfigurableResource parseOldStyleResource(String value)
+  private static ConfigurableResource parseOldStyleResource(String input)
-    final String lCaseValue = StringUtils.toLowerCase(value);
-    final int memory = parseOldStyleResourceMemory(lCaseValue);
-    final int vcores = parseOldStyleResourceVcores(lCaseValue);
+    final String lowerCaseInput = StringUtils.toLowerCase(input);
+    String[] resources = lowerCaseInput.split(",");
+
+    if (resources.length != 2) {
+      resources = findOldStyleResourcesInSpaceSeparatedInput(lowerCaseInput);
+      if (resources.length != 2) {
+        throw new AllocationConfigurationException(
+            "Cannot parse resource values from input: " + input);
+      }
+    }
+    final int memory = parseOldStyleResourceMemory(resources);
+    final int vcores = parseOldStyleResourceVcores(resources);
-  private static int parseOldStyleResourceMemory(String lCaseValue)
+  private static String[] findOldStyleResourcesInSpaceSeparatedInput(
+      String input) {
+    final Pattern pattern = Pattern.compile(RESOURCES_WITH_SPACES_PATTERN);
+    final Matcher matcher = pattern.matcher(input);
+
+    List<String> resources = Lists.newArrayList();
+    while (matcher.find()) {
+      resources.add(matcher.group(0));
+    }
+    return resources.toArray(new String[0]);
+  }
+
+  private static int parseOldStyleResourceMemory(String[] resources)
-    final int memory = findResource(lCaseValue, "mb");
+    final int memory = findResource(resources, "mb");
-  private static int parseOldStyleResourceVcores(String lCaseValue)
+  private static int parseOldStyleResourceVcores(String[] resources)
-    final int vcores = findResource(lCaseValue, "vcores");
+    final int vcores = findResource(resources, "vcores");
-  private static double[] getResourcePercentage(
-      String val) throws AllocationConfigurationException {
+  private static double[] getResourcePercentage(String val)
+      throws AllocationConfigurationException {
-    String[] strings = val.split(",");
+    String[] values = val.split(",");
-    if (strings.length == 1) {
-      double percentage = findPercentage(strings[0], "");
+    if (values.length == 1) {
+      double percentage = findPercentage(values, "");
-      resourcePercentage[0] = findPercentage(val, "memory");
-      resourcePercentage[1] = findPercentage(val, "cpu");
+      resourcePercentage[0] = findPercentage(values, "memory");
+      resourcePercentage[1] = findPercentage(values, "cpu");
-  private static double findPercentage(String val, String units)
+  private static double findPercentage(String resourceValue, String resource)
-    final Pattern pattern =
-        Pattern.compile("(-?(\\d+)(\\.\\d*)?)\\s*%\\s*" + units);
-    Matcher matcher = pattern.matcher(val);
-    if (!matcher.find()) {
-      if (units.equals("")) {
+    return findPercentageInternal(resource, resourceValue, false);
+  }
+
+  private static double findPercentage(String[] resourceValues, String resource)
+      throws AllocationConfigurationException {
+    String resourceValue = findResourceFromValues(resourceValues, resource);
+    return findPercentageInternal(resource, resourceValue, true);
+  }
+
+  private static double findPercentageInternal(String resource,
+      String resourceValue, boolean includeResourceInPattern)
+      throws AllocationConfigurationException {
+    final Pattern pattern;
+    if (includeResourceInPattern) {
+      pattern = Pattern.compile(RESOURCE_PERCENTAGE_PATTERN + resource);
+    } else {
+      pattern = Pattern.compile(RESOURCE_PERCENTAGE_PATTERN);
+    }
+
+    Matcher matcher = pattern.matcher(resourceValue);
+    if (!matcher.matches()) {
+      if (resource.equals("")) {
-            val);
+            resourceValue);
-        throw new AllocationConfigurationException("Missing resource: " +
-            units);
+        throw new AllocationConfigurationException("Invalid percentage of " +
+            resource + ": " + resourceValue);
-          val + ", percentage should not be negative!");
+          resourceValue + ", percentage should not be negative!");
-  private static int findResource(String val, String units)
+  private static int findResource(String[] resourceValues, String resource)
-    final Pattern pattern = Pattern.compile("(-?\\d+)(\\.\\d*)?\\s*" + units);
-    Matcher matcher = pattern.matcher(val);
+    String resourceValue = findResourceFromValues(resourceValues, resource);
+    final Pattern pattern = Pattern.compile(RESOURCE_VALUE_PATTERN +
+        resource);
+    Matcher matcher = pattern.matcher(resourceValue);
-      throw new AllocationConfigurationException("Missing resource: " + units);
+      throw new AllocationConfigurationException("Invalid value of " +
+          (resource.equals("mb") ? "memory" : resource) + ": " + resourceValue);
+
+  private static String findResourceFromValues(String[] resourceValues,
+      String resource) throws AllocationConfigurationException {
+    for (String resourceValue : resourceValues) {
+      if (resourceValue.contains(resource)) {
+        return resourceValue.trim();
+      }
+    }
+    throw new AllocationConfigurationException("Missing resource: " + resource);
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS44 INS83 INS83 MOV43 INS42 MOV44 MOV43 MOV8 INS83 INS83 INS5 INS42 MOV44 INS8 INS44 INS44 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 INS44 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS45 MOV42 INS42 INS45 INS65 INS42 INS42 INS45 INS43 INS42 UPD42 INS60 INS25 INS43 INS85 UPD42 INS60 INS60 INS60 INS61 INS41 INS5 INS42 INS5 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS5 INS42 INS43 INS42 INS42 INS60 INS41 UPD42 INS43 INS42 INS39 INS42 INS60 INS25 INS5 UPD42 INS43 INS42 INS60 INS42 INS5 INS42 INS43 INS42 INS42 INS70 INS53 INS66 INS42 INS5 INS59 INS27 INS8 INS42 INS83 MOV43 INS59 INS83 INS43 INS59 INS74 INS59 INS32 INS8 INS32 INS43 INS85 INS43 INS85 INS42 INS42 INS32 INS43 INS85 INS42 MOV43 INS59 INS32 INS42 MOV83 MOV43 INS59 INS42 INS8 INS8 MOV43 INS43 INS85 INS42 MOV43 INS59 INS43 MOV43 INS43 INS85 INS42 INS44 INS42 INS8 INS14 UPD42 INS43 INS85 INS42 INS32 INS40 INS34 INS21 INS25 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS3 INS42 INS42 UPD42 UPD40 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS9 MOV42 INS21 INS21 MOV42 INS42 INS32 INS42 INS42 INS43 INS42 INS25 INS43 INS27 UPD42 INS42 INS42 INS42 INS45 INS7 INS27 INS8 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS5 INS34 UPD42 UPD42 INS42 INS42 INS42 INS7 INS7 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS32 INS8 INS42 INS45 INS42 INS42 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS32 UPD42 MOV43 UPD42 INS42 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS34 INS42 INS42 UPD42 UPD42 MOV42 MOV42 MOV27 INS42 INS42 INS42 UPD42 INS42 INS45 INS36 UPD45 UPD42 INS32 MOV43 INS27 UPD42 INS42 MOV43 MOV43 INS16 INS42 INS42 INS45 INS42 UPD42 INS45 INS42 UPD45 UPD42 INS32 INS45 INS42 INS42 INS42 INS45 INS42 DEL45 DEL83 DEL83 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL34 DEL2 DEL42 DEL45 DEL32 DEL59 DEL60 DEL43 DEL42 DEL45