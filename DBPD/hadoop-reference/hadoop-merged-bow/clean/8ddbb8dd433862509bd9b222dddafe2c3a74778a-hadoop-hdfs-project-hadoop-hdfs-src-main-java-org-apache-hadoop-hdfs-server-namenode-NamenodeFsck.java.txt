HDFS-7993. Provide each Replica details in fsck (Contributed by J.Andreina)

+import org.apache.hadoop.hdfs.protocol.DatanodeInfoWithStorage;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeStorageInfo;
+import org.apache.hadoop.hdfs.util.LightWeightLinkedSet;
+  private boolean showReplicaDetails = false;
+  private long staleInterval;
+    this.staleInterval =
+        conf.getLong(DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY,
+          DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);
+      else if (key.equals("replicadetails")) {
+        this.showReplicaDetails = true;
+      }
-      DatanodeInfo[] locs = lBlk.getLocations();
-      NumberReplicas numberReplicas =
-          namenode.getNamesystem().getBlockManager().countNodes(block.getLocalBlock());
+      BlockManager bm = namenode.getNamesystem().getBlockManager();
+      NumberReplicas numberReplicas = bm.countNodes(block.getLocalBlock());
+      Collection<DatanodeDescriptor> corruptReplicas = null;
+      if (showReplicaDetails) {
+        corruptReplicas = bm.getCorruptReplicas(block.getLocalBlock());
+      }
-        if (showLocations || showRacks) {
+        if (showLocations || showRacks || showReplicaDetails) {
-          for (int j = 0; j < locs.length; j++) {
-            if (j > 0) { sb.append(", "); }
-            if (showRacks)
-              sb.append(NodeBase.getPath(locs[j]));
-            else
-              sb.append(locs[j]);
+          Iterable<DatanodeStorageInfo> storages = bm.getStorages(block.getLocalBlock());
+          for (Iterator<DatanodeStorageInfo> iterator = storages.iterator(); iterator.hasNext();) {
+            DatanodeStorageInfo storage = iterator.next();
+            DatanodeDescriptor dnDesc = storage.getDatanodeDescriptor();
+            if (showRacks) {
+              sb.append(NodeBase.getPath(dnDesc));
+            } else {
+              sb.append(new DatanodeInfoWithStorage(dnDesc, storage.getStorageID(), storage
+                  .getStorageType()));
+            }
+            if (showReplicaDetails) {
+              LightWeightLinkedSet<Block> blocksExcess =
+                  bm.excessReplicateMap.get(dnDesc.getDatanodeUuid());
+              sb.append("(");
+              if (dnDesc.isDecommissioned()) {
+                sb.append("DECOMMISSIONED)");
+              } else if (dnDesc.isDecommissionInProgress()) {
+                sb.append("DECOMMISSIONING)");
+              } else if (corruptReplicas != null && corruptReplicas.contains(dnDesc)) {
+                sb.append("CORRUPT)");
+              } else if (blocksExcess != null && blocksExcess.contains(block.getLocalBlock())) {
+                sb.append("EXCESS)");
+              } else if (dnDesc.isStale(this.staleInterval)) {
+                sb.append("STALE_NODE)");
+              } else if (storage.areBlockContentsStale()) {
+                sb.append("STALE_BLOCK_CONTENT)");
+              } else {
+                sb.append("LIVE)");
+              }
+            }
+            if (iterator.hasNext()) {
+              sb.append(", ");
+            }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS9 INS42 INS21 INS7 INS22 INS32 INS60 INS20 INS60 INS25 INS52 INS42 INS42 INS42 INS40 INS40 INS43 MOV43 INS59 INS74 INS59 INS42 INS8 INS42 UPD42 MOV32 INS42 INS32 INS43 INS43 UPD42 MOV42 INS33 INS21 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS7 INS42 INS32 INS42 INS60 INS42 INS42 INS32 INS74 INS59 INS32 MOV25 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS60 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS32 INS43 INS43 UPD42 INS32 INS43 INS59 INS43 INS59 INS8 INS8 INS42 INS8 INS32 INS32 INS8 MOV25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 MOV32 MOV32 INS74 INS59 INS32 INS32 INS8 INS25 INS7 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS21 INS32 INS8 INS25 INS22 INS9 INS42 INS43 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS21 INS27 INS8 INS25 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS27 INS32 INS21 INS27 INS8 INS25 INS42 INS42 INS45 INS42 INS33 INS42 INS42 INS42 INS32 INS27 INS32 INS21 INS32 INS8 INS25 INS42 INS42 INS45 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS22 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS45 INS52 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 DEL43 DEL85 DEL5 DEL32 DEL59 DEL60 DEL42 DEL32 DEL20 DEL39 DEL34 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL21 DEL21 DEL42 DEL34 DEL27