HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah.

+import java.util.LinkedList;
-import org.apache.hadoop.hdfs.StorageType;
+  final LinkedList<BPServiceActorAction> bpThreadQueue 
+      = new LinkedList<BPServiceActorAction>();
-  void reportBadBlocks(ExtendedBlock block,
-      String storageUuid, StorageType storageType) {
-    if (bpRegistration == null) {
-      return;
-    }
-    DatanodeInfo[] dnArr = { new DatanodeInfo(bpRegistration) };
-    String[] uuids = { storageUuid };
-    StorageType[] types = { storageType };
-    LocatedBlock[] blocks = { new LocatedBlock(block, dnArr, uuids, types) };
-    
-    try {
-      bpNamenode.reportBadBlocks(blocks);  
-    } catch (IOException e){
-      /* One common reason is that NameNode could be in safe mode.
-       * Should we keep on retrying in that case?
-       */
-      LOG.warn("Failed to report bad block " + block + " to namenode : "
-          + " Exception", e);
-    }
-  }
+      processQueueMessages();
-  void trySendErrorReport(int errCode, String errMsg) {
-    try {
-      bpNamenode.errorReport(bpRegistration, errCode, errMsg);
-    } catch(IOException e) {
-      LOG.warn("Error reporting an error to NameNode " + nnAddr,
-          e);
-    }
-  }
-}
+  
+  public void bpThreadEnqueue(BPServiceActorAction action) {
+    synchronized (bpThreadQueue) {
+      if (!bpThreadQueue.contains(action)) {
+        bpThreadQueue.add(action);
+      }
+    }
+  }
+
+  private void processQueueMessages() {
+    LinkedList<BPServiceActorAction> duplicateQueue;
+    synchronized (bpThreadQueue) {
+      duplicateQueue = new LinkedList<BPServiceActorAction>(bpThreadQueue);
+      bpThreadQueue.clear();
+    }
+    while (!duplicateQueue.isEmpty()) {
+      BPServiceActorAction actionItem = duplicateQueue.remove();
+      try {
+        actionItem.reportTo(bpNamenode, bpRegistration);
+      } catch (BPServiceActorActionException baae) {
+        LOG.warn(baae.getMessage() + nnAddr , baae);
+        // Adding it back to the queue if not present
+        bpThreadEnqueue(actionItem);
+      }
+    }
+  }
+}

MOV26 UPD40 INS23 INS31 INS31 INS83 INS74 INS59 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS14 UPD43 UPD42 INS51 MOV60 INS51 INS61 INS42 UPD42 MOV42 INS74 UPD42 INS42 INS8 INS74 INS42 INS8 INS38 INS8 INS43 INS43 INS21 INS25 INS43 INS43 INS42 INS21 MOV21 INS32 INS60 MOV54 UPD42 MOV42 INS42 INS32 INS38 INS8 INS42 UPD42 MOV42 INS7 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS42 INS32 INS21 INS42 INS14 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS74 UPD42 MOV42 INS42 INS42 UPD43 UPD42 INS21 INS42 INS42 INS42 INS43 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL14 DEL4 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL4 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL42 DEL42 DEL45