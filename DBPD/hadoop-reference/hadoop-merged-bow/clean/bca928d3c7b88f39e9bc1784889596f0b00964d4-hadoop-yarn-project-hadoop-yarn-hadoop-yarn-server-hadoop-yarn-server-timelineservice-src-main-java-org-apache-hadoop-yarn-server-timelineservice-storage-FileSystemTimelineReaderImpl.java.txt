YARN-3879 [Storage implementation] Create HDFS backing storage implementation for ATS reads. Contributed by Abhishek Modi.

-import java.io.FileInputStream;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.LocatedFileStatus;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.RemoteIterator;
-  private String rootPath;
+  private FileSystem fs;
+  private Path rootPath;
+  private Path entitiesPath;
-    return rootPath;
+    return rootPath.toString();
-    String appFlowMappingFile = rootPath + File.separator +  ENTITIES_DIR +
-        File.separator + clusterId + File.separator + APP_FLOW_MAPPING_FILE;
+    Path clusterIdPath = new Path(entitiesPath, clusterId);
+    Path appFlowMappingFilePath = new Path(clusterIdPath,
+            APP_FLOW_MAPPING_FILE);
-                 new FileInputStream(
-                     appFlowMappingFile), Charset.forName("UTF-8")));
+                 fs.open(appFlowMappingFilePath), Charset.forName("UTF-8")));
-  private Set<TimelineEntity> getEntities(File dir, String entityType,
+  private Set<TimelineEntity> getEntities(Path dir, String entityType,
-      File[] files = dir.listFiles();
-      if (files != null) {
-        for (File entityFile : files) {
+      RemoteIterator<LocatedFileStatus> fileStatuses = fs.listFiles(dir,
+              false);
+      if (fileStatuses != null) {
+        while (fileStatuses.hasNext()) {
+          LocatedFileStatus locatedFileStatus = fileStatuses.next();
+          Path entityFile = locatedFileStatus.getPath();
-              new InputStreamReader(new FileInputStream(entityFile),
+              new InputStreamReader(fs.open(entityFile),
-    rootPath = conf.get(TIMELINE_SERVICE_STORAGE_DIR_ROOT,
+    String outputRoot = conf.get(TIMELINE_SERVICE_STORAGE_DIR_ROOT,
+    rootPath = new Path(outputRoot);
+    entitiesPath = new Path(rootPath, ENTITIES_DIR);
+    fs = rootPath.getFileSystem(conf);
-    String flowRunPath = getFlowRunPath(context.getUserId(),
+    String flowRunPathStr = getFlowRunPath(context.getUserId(),
-    File dir = new File(new File(rootPath, ENTITIES_DIR),
-        context.getClusterId() + File.separator + flowRunPath + File.separator +
-        context.getAppId() + File.separator + context.getEntityType());
-    File entityFile = new File(
-        dir, context.getEntityId() + TIMELINE_SERVICE_STORAGE_EXTENSION);
+    Path clusterIdPath = new Path(entitiesPath, context.getClusterId());
+    Path flowRunPath = new Path(clusterIdPath, flowRunPathStr);
+    Path appIdPath = new Path(flowRunPath, context.getAppId());
+    Path entityTypePath = new Path(appIdPath, context.getEntityType());
+    Path entityFilePath = new Path(entityTypePath,
+            context.getEntityId() + TIMELINE_SERVICE_STORAGE_EXTENSION);
+
-                 new FileInputStream(entityFile), Charset.forName("UTF-8")))) {
+                 fs.open(entityFilePath), Charset.forName("UTF-8")))) {
-    String flowRunPath = getFlowRunPath(context.getUserId(),
+    String flowRunPathStr = getFlowRunPath(context.getUserId(),
-    File dir =
-        new File(new File(rootPath, ENTITIES_DIR),
-            context.getClusterId() + File.separator + flowRunPath +
-            File.separator + context.getAppId() + File.separator +
-            context.getEntityType());
-    return getEntities(dir, context.getEntityType(), filters, dataToRetrieve);
+    Path clusterIdPath = new Path(entitiesPath, context.getClusterId());
+    Path flowRunPath = new Path(clusterIdPath, flowRunPathStr);
+    Path appIdPath = new Path(flowRunPath, context.getAppId());
+    Path entityTypePath = new Path(appIdPath, context.getEntityType());
+
+    return getEntities(entityTypePath, context.getEntityType(), filters,
+            dataToRetrieve);
-    String flowRunPath = getFlowRunPath(context.getUserId(),
+    String flowRunPathStr = getFlowRunPath(context.getUserId(),
-    File dir = new File(new File(rootPath, ENTITIES_DIR),
-        context.getClusterId() + File.separator + flowRunPath
-            + File.separator + context.getAppId());
-    File[] fileList = dir.listFiles();
-    if (fileList != null) {
-      for (File f : fileList) {
-        if (f.isDirectory()) {
-          result.add(f.getName());
-        }
+    Path clusterIdPath = new Path(entitiesPath, context.getClusterId());
+    Path flowRunPath = new Path(clusterIdPath, flowRunPathStr);
+    Path appIdPath = new Path(flowRunPath, context.getAppId());
+    FileStatus[] fileStatuses = fs.listStatus(appIdPath);
+    for (FileStatus fileStatus : fileStatuses) {
+      if (fileStatus.isDirectory()) {
+        result.add(fileStatus.getPath().getName());

MOV26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS23 INS23 UPD43 INS59 INS83 INS43 MOV59 INS83 INS43 INS59 UPD42 INS42 INS42 INS42 INS42 INS60 UPD43 INS60 INS21 INS21 INS60 INS60 INS60 INS60 MOV60 INS60 INS60 INS60 INS60 MOV60 INS60 INS60 INS60 MOV70 INS32 INS43 INS59 INS43 UPD42 INS43 INS59 INS7 INS7 UPD43 MOV43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 UPD43 UPD43 MOV43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 MOV43 UPD43 MOV43 INS59 INS43 INS59 INS43 INS59 UPD5 UPD42 INS42 INS42 INS42 INS42 INS14 INS42 UPD42 INS14 MOV43 INS42 INS42 MOV32 INS14 INS42 INS14 INS42 INS32 MOV42 UPD42 UPD42 UPD42 MOV42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 MOV42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 UPD42 MOV42 MOV32 UPD42 UPD42 UPD42 MOV42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 UPD43 UPD42 UPD43 UPD42 INS43 INS42 INS42 INS43 INS42 INS42 INS74 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 INS42 MOV32 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 INS43 INS42 MOV32 INS43 INS42 MOV32 UPD43 UPD42 UPD43 MOV43 INS42 MOV32 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 INS43 INS42 MOV32 INS43 INS42 MOV32 UPD43 MOV43 INS42 MOV32 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 INS43 INS42 MOV32 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS42 MOV43 INS43 INS43 UPD42 UPD42 INS61 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV43 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 UPD42 INS32 INS42 UPD42 MOV42 UPD42 INS42 INS9 INS32 MOV8 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL40 DEL42 DEL40 DEL42 DEL40 DEL42 DEL27 DEL42 DEL43 DEL42 DEL14 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL44 DEL42 DEL70 DEL14 DEL40 DEL42 DEL40 DEL40 DEL27 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL14 DEL40 DEL42 DEL40 DEL40 DEL27 DEL14 DEL59 DEL60 DEL42 DEL14 DEL40 DEL42 DEL40 DEL27 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25