Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1202013 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ipc.RpcPayloadHeader.*;
-  /** A call waiting for a value. */
+  /** 
+   * Class that represents an RPC call
+   */
-    int id;                                       // call id
-    Writable param;                               // parameter
-    Writable value;                               // value, null if error
-    IOException error;                            // exception, null if value
-    boolean done;                                 // true when call is done
+    final int id;               // call id
+    final Writable rpcRequest;  // the serialized rpc request - RpcPayload
+    Writable rpcResponse;       // null if rpc has error
+    IOException error;          // exception, null if success
+    final RpcKind rpcKind;      // Rpc EngineKind
+    boolean done;               // true when call is done
-    protected Call(Writable param) {
-      this.param = param;
+    protected Call(RpcKind rpcKind, Writable param) {
+      this.rpcKind = rpcKind;
+      this.rpcRequest = param;
-     * @param value return value of the call.
+     * @param rpcResponse return value of the rpc call.
-    public synchronized void setValue(Writable value) {
-      this.value = value;
+    public synchronized void setRpcResponse(Writable rpcResponse) {
+      this.rpcResponse = rpcResponse;
-    public synchronized Writable getValue() {
-      return value;
+    public synchronized Writable getRpcResult() {
+      return rpcResponse;
+    @SuppressWarnings("unused")
-          d.writeInt(call.id);
-          call.param.write(d);
+          RpcPayloadHeader header = new RpcPayloadHeader(
+              call.rpcKind, RpcPayloadOperation.RPC_FINAL_PAYLOAD, call.id);
+          header.write(d);
+          call.rpcRequest.write(d);
-          call.setValue(value);
+          call.setRpcResponse(value);
-      super(param);
+      super(RpcKind.RPC_WRITABLE, param);
-      values[call.index] = call.getValue();       // store the value
+      values[call.index] = call.getRpcResult();       // store the value
+  /**
+   * Same as {@link #call(RpcKind, Writable, ConnectionId)} for Writable
+   */
+  public Writable call(Writable param, InetSocketAddress address)
+  throws InterruptedException, IOException {
+    return call(RpcKind.RPC_WRITABLE, param, address);
+    
+  }
-   * @deprecated Use {@link #call(Writable, ConnectionId)} instead 
+   * @deprecated Use {@link #call(RpcKind, Writable, ConnectionId)} instead 
-  public Writable call(Writable param, InetSocketAddress address)
+  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress address)
-      return call(param, address, null);
+      return call(rpcKind, param, address, null);
-   * @deprecated Use {@link #call(Writable, ConnectionId)} instead 
+   * @deprecated Use {@link #call(RpcKind, Writable, ConnectionId)} instead 
-  public Writable call(Writable param, InetSocketAddress addr, 
+  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-    return call(param, remoteId);
+    return call(rpcKind, param, remoteId);
-   * @deprecated Use {@link #call(Writable, ConnectionId)} instead 
+   * @deprecated Use {@link #call(RpcKind, Writable, ConnectionId)} instead 
-  public Writable call(Writable param, InetSocketAddress addr, 
+  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-    return call(param, remoteId);
+    return call(rpcKind, param, remoteId);
+  
+  /**
+   * Same as {@link #call(RpcKind, Writable, InetSocketAddress, 
+   * Class, UserGroupInformation, int, Configuration)}
+   * except that rpcKind is writable.
+   */
+  public Writable call(Writable param, InetSocketAddress addr, 
+      Class<?> protocol, UserGroupInformation ticket,
+      int rpcTimeout, Configuration conf)  
+      throws InterruptedException, IOException {
+        ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+        ticket, rpcTimeout, conf);
+        return call(RpcKind.RPC_WRITABLE, param, remoteId);
+  }
+  
-  public Writable call(Writable param, InetSocketAddress addr, 
+  public Writable call(RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-    return call(param, remoteId);
+    return call(rpcKind, param, remoteId);
+  }
+  
+  /**
+   * Same as {link {@link #call(RpcKind, Writable, ConnectionId)}
+   * except the rpcKind is RPC_WRITABLE
+   */
+  public Writable call(Writable param, ConnectionId remoteId)  
+      throws InterruptedException, IOException {
+     return call(RpcKind.RPC_WRITABLE, param, remoteId);
-  public Writable call(Writable param, ConnectionId remoteId)  
+  public Writable call(RpcKind rpcKind, Writable param, ConnectionId remoteId)  
-    Call call = new Call(param);
+    Call call = new Call(rpcKind, param);
-        return call.value;
+        return call.rpcResponse;

INS26 INS40 INS31 INS31 INS31 INS23 MOV29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS44 INS29 INS44 INS44 INS8 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 MOV8 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS44 INS83 INS83 INS43 INS83 INS43 INS59 INS44 UPD42 UPD42 INS79 UPD65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS41 INS43 INS42 MOV65 INS65 INS43 INS42 INS43 INS42 INS60 INS41 INS65 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS41 INS43 INS42 UPD66 INS42 UPD42 UPD42 INS42 INS42 INS43 INS42 INS21 UPD42 INS42 INS45 UPD66 UPD66 INS42 INS42 INS32 INS42 INS66 INS65 INS66 INS42 INS42 INS43 INS59 INS32 INS66 INS65 INS66 INS42 INS42 INS43 INS76 INS42 INS42 INS42 INS66 INS65 INS66 INS42 INS42 INS32 INS42 MOV43 INS42 INS7 UPD42 UPD66 UPD42 INS40 INS42 INS40 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS68 INS42 INS40 INS42 INS68 INS42 INS40 INS42 INS42 INS22 INS42 UPD42 INS69 INS69 INS42 INS69 INS69 INS69 INS69 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 MOV69 INS69 INS69 INS69 INS69 INS69 INS42 INS69 INS69 INS69 MOV43 INS42 INS52 INS42 UPD42 UPD42 UPD42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS39 INS43 INS43 INS43 INS43 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 INS43 INS59 INS42 INS42 INS14 UPD42 UPD42 INS42 UPD40 UPD42 INS43 INS40 INS40 INS40 INS42 DEL40