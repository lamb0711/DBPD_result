HDFS-4666. Define ".snapshot" as a reserved inode name so that users cannot create a file/directory with ".snapshot" as the name.  If ".snapshot" is used in a previous version of HDFS, it must be renamed before upgrade; otherwise, upgrade will fail.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1468238 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import org.apache.hadoop.hdfs.DFSUtil;
-import org.apache.hadoop.hdfs.protocol.FSLimitException;
+import org.apache.hadoop.hdfs.protocol.FSLimitException.IllegalNameException;
-      if (srcs.endsWith(Path.SEPARATOR + HdfsConstants.DOT_SNAPSHOT_DIR)) {
+      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR)) {
-    assert hasReadLock();
-    final String dotSnapshot = Path.SEPARATOR + HdfsConstants.DOT_SNAPSHOT_DIR;
-    Preconditions.checkArgument(src.endsWith(dotSnapshot), 
-        src + " does not end with " + dotSnapshot);
+    Preconditions.checkState(hasReadLock());
+    Preconditions.checkArgument(
+        src.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR), 
+        "%s does not end with %s", src, HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR);
-      if (srcs.endsWith(Path.SEPARATOR + HdfsConstants.DOT_SNAPSHOT_DIR)) {
+      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR)) {
-    final String dotSnapshot = Path.SEPARATOR + HdfsConstants.DOT_SNAPSHOT_DIR;
-    Preconditions.checkArgument(src.endsWith(dotSnapshot), 
-        src + " does not end with " + dotSnapshot);
+    Preconditions.checkArgument(
+        src.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR), 
+        "%s does not end with %s", src, HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR);
+
+  /** Verify if the snapshot name is legal. */
+  void verifySnapshotName(String snapshotName, String path)
+      throws PathComponentTooLongException, IllegalNameException {
+    final byte[] bytes = DFSUtil.string2Bytes(snapshotName);
+    verifyINodeName(bytes);
+    verifyMaxComponentLength(bytes, path, 0);
+  }
-  /**
-   * Verify that filesystem limit constraints are not violated
-   */
-  void verifyFsLimits(INode[] pathComponents, int pos, INode child)
-      throws FSLimitException {
-    verifyMaxComponentLength(child.getLocalName(), pathComponents, pos);
-    verifyMaxDirItems(pathComponents, pos);
+  /** Verify if the inode name is legal. */
+  void verifyINodeName(byte[] childName) throws IllegalNameException {
+    if (Arrays.equals(HdfsConstants.DOT_SNAPSHOT_DIR_BYTES, childName)) {
+      String s = "\"" + HdfsConstants.DOT_SNAPSHOT_DIR + "\" is a reserved name.";
+      if (!ready) {
+        s += "  Please rename it before upgrade.";
+      }
+      throw new IllegalNameException(s);
+    }
-  public void verifyMaxComponentLength(String childName,
-      Object parentPath, int pos) throws PathComponentTooLongException {
+  void verifyMaxComponentLength(byte[] childName, Object parentPath, int pos)
+      throws PathComponentTooLongException {
-    final int length = childName.length();
+    final int length = childName.length;
-          maxComponentLength, length, p, childName);
+          maxComponentLength, length, p, DFSUtil.bytes2String(childName));
-        NameNode.LOG.error("FSDirectory.verifyMaxComponentLength: "
-            + e.getLocalizedMessage());
+        NameNode.LOG.error("ERROR in FSDirectory.verifyINodeName", e);
-  private void verifyMaxDirItems(INode[] pathComponents, int pos)
+  void verifyMaxDirItems(INode[] pathComponents, int pos)
-      verifyFsLimits(inodes, pos, child);
+      verifyMaxComponentLength(child.getLocalNameBytes(), inodes, pos);
+      verifyMaxDirItems(inodes, pos);
+    // always verify inode name
+    verifyINodeName(child.getLocalNameBytes());

INS26 INS26 INS40 INS40 UPD40 INS31 UPD42 INS43 UPD43 INS29 INS39 INS42 INS44 INS43 INS8 INS21 MOV43 INS42 MOV43 UPD42 UPD42 MOV42 UPD42 INS60 INS21 INS65 INS5 INS42 INS42 INS25 INS5 INS21 INS32 UPD66 INS83 INS5 INS59 INS32 INS66 INS39 INS85 INS32 INS8 INS39 INS85 INS32 INS42 INS42 MOV32 INS45 INS42 INS40 INS45 INS42 INS40 INS39 INS85 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS34 INS42 INS42 INS40 INS42 INS60 INS25 INS53 INS40 INS21 INS42 INS32 INS40 INS40 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 INS59 INS38 INS8 INS14 INS32 INS42 INS42 INS40 INS40 INS42 INS27 INS42 INS21 INS43 INS42 INS42 INS32 INS42 INS42 UPD42 INS45 INS40 INS45 INS7 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 MOV42 DEL40 DEL40 DEL27 DEL6 DEL83 DEL42 DEL40 DEL40 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL40 DEL40 DEL27 DEL83 DEL42 DEL40 DEL40 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL39 DEL43 DEL42 DEL44 DEL42 DEL32 DEL32 DEL21 DEL83 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL32 DEL27 DEL83 DEL42