YARN-5611. Provide an API to update lifetime of an application. Contributed by Rohith Sharma K S

-import java.util.EnumSet;
-import java.util.HashMap;
+import java.util.Map.Entry;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppState;
-  private Map<RMAppToMonitor, Long> monitoredApps =
-      new HashMap<RMAppToMonitor, Long>();
-
-  private static final EnumSet<RMAppState> COMPLETED_APP_STATES =
-      EnumSet.of(RMAppState.FINISHED, RMAppState.FINISHING, RMAppState.FAILED,
-          RMAppState.KILLED, RMAppState.FINAL_SAVING, RMAppState.KILLING);
-    long monitorInterval = conf.getLong(
-        YarnConfiguration.RM_APPLICATION_LIFETIME_MONITOR_INTERVAL_MS,
-        YarnConfiguration.DEFAULT_RM_APPLICATION_LIFETIME_MONITOR_INTERVAL_MS);
+    long monitorInterval =
+        conf.getLong(YarnConfiguration.RM_APPLICATION_MONITOR_INTERVAL_MS,
+            YarnConfiguration.DEFAULT_RM_APPLICATION_MONITOR_INTERVAL_MS);
-          YarnConfiguration.DEFAULT_RM_APPLICATION_LIFETIME_MONITOR_INTERVAL_MS;
+          YarnConfiguration.DEFAULT_RM_APPLICATION_MONITOR_INTERVAL_MS;
+    setExpireInterval(0); // No need of expire interval for App.
+    setResetTimeOnStart(false); // do not reset expire time on restart
-    Long remove = monitoredApps.remove(monitoredAppKey);
-    // Don't trigger a KILL event if application is in completed states
-    if (!COMPLETED_APP_STATES.contains(app.getState())) {
-      String diagnostics =
-          "Application killed due to exceeding its lifetime period " + remove
-              + " milliseconds";
-      rmContext.getDispatcher().getEventHandler()
-          .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));
-    } else {
-      LOG.info("Application " + appId
-          + " is about to complete. So not killing the application.");
-    }
+    String diagnostics =
+        "Application killed due to exceeding its lifetime period";
+    rmContext.getDispatcher().getEventHandler()
+        .handle(new RMAppEvent(appId, RMAppEventType.KILL, diagnostics));
-  public synchronized void registerApp(ApplicationId appId,
-      ApplicationTimeoutType timeoutType, long monitorStartTime, long timeout) {
+  public void registerApp(ApplicationId appId,
+      ApplicationTimeoutType timeoutType, long expireTime) {
-    register(appToMonitor, monitorStartTime);
-    monitoredApps.putIfAbsent(appToMonitor, timeout);
+    register(appToMonitor, expireTime);
-  @Override
-  protected synchronized long getExpireInterval(
-      RMAppToMonitor monitoredAppKey) {
-    return monitoredApps.get(monitoredAppKey);
-  }
-
-  public synchronized void unregisterApp(ApplicationId appId,
+  public void unregisterApp(ApplicationId appId,
-    RMAppToMonitor appToRemove = new RMAppToMonitor(appId, timeoutType);
-    unregister(appToRemove);
-    monitoredApps.remove(appToRemove);
+    RMAppToMonitor remove = new RMAppToMonitor(appId, timeoutType);
+    unregister(remove);
-  public synchronized void unregisterApp(ApplicationId appId,
-      Set<ApplicationTimeoutType> types) {
-    for (ApplicationTimeoutType type : types) {
-      unregisterApp(appId, type);
+  public void unregisterApp(ApplicationId appId,
+      Set<ApplicationTimeoutType> timeoutTypes) {
+    for (ApplicationTimeoutType timeoutType : timeoutTypes) {
+      unregisterApp(appId, timeoutType);
-  public synchronized void updateApplicationTimeouts(ApplicationId appId,
+  public void updateApplicationTimeouts(ApplicationId appId,
-    // TODO in YARN-5611
+    for (Entry<ApplicationTimeoutType, Long> entry : timeouts.entrySet()) {
+      ApplicationTimeoutType timeoutType = entry.getKey();
+      RMAppToMonitor update = new RMAppToMonitor(appId, timeoutType);
+      register(update, entry.getValue());
+    }

MOV26 UPD40 MOV8 UPD83 UPD39 UPD42 MOV44 MOV44 INS8 MOV44 MOV44 UPD42 MOV44 MOV44 INS21 INS21 MOV60 MOV60 MOV25 UPD42 INS60 INS21 UPD42 INS70 INS32 INS32 MOV43 INS59 INS32 INS44 INS42 INS8 INS32 INS42 INS34 INS42 INS9 INS45 UPD42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS43 INS42 MOV21 INS74 INS42 INS42 INS42 INS60 MOV60 UPD40 UPD40 INS43 INS42 INS42 INS42 INS43 INS43 MOV43 MOV43 INS59 UPD40 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL59 DEL23 DEL45 DEL42 DEL45 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL78 DEL83 DEL43 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL83 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL42 DEL83 DEL83 DEL39 DEL42 DEL8 DEL31