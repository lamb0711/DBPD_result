HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.
Contributed by Andras Bokor.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  static final Log LOG = LogFactory.getLog(RpcProgramNfs3.class);
+  static final Logger LOG = LoggerFactory.getLogger(RpcProgramNfs3.class);
-    LOG.info("Configured HDFS superuser is " + superuser);
+    LOG.info("Configured HDFS superuser is {}", superuser);
-      LOG.info("Delete current dump directory " + writeDumpDir);
+      LOG.info("Delete current dump directory {}", writeDumpDir);
-    LOG.info("Create new dump directory " + writeDumpDir);
+    LOG.info("Create new dump directory {}", writeDumpDir);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("NFS NULL");
-    }
+    LOG.debug("NFS NULL");
-      LOG.debug("GETATTR for fileHandle: " + handle.dumpFileHandle()
-          + " client: " + remoteAddress);
+      LOG.debug("GETATTR for fileHandle: {} client: {}",
+          handle.dumpFileHandle(), remoteAddress);
-
-      LOG.warn("Exception ", r);
+      LOG.warn("Exception", r);
-      LOG.info("Can't get file attribute, fileId=" + handle.getFileId(), e);
+      LOG.info("Can't get file attribute, fileId={}", handle.getFileId(), e);
-      LOG.error("Can't get path for fileId: " + handle.getFileId());
+      LOG.error("Can't get path for fileId: {}", handle.getFileId());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("set new mode: " + newAttr.getMode());
-      }
+      LOG.debug("set new mode: {}", newAttr.getMode());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("set atime: " + +atime + " mtime: " + mtime);
-      }
+      LOG.debug("set atime: {} mtime: {}", atime, mtime);
-      LOG.debug("NFS SETATTR fileHandle: " + handle.dumpFileHandle()
-          + " client: " + remoteAddress);
+      LOG.debug("NFS SETATTR fileHandle: {} client: {}",
+          handle.dumpFileHandle(), remoteAddress);
-
-      LOG.error("Setting file size is not supported when setattr, fileId: "
-          + handle.getFileId());
+      LOG.error("Setting file size is not supported when setattr, fileId: {}",
+          handle.getFileId());
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-        LOG.info("Can't get postOpAttr for fileIdPath: " + fileIdPath, e1);
+        LOG.info("Can't get postOpAttr for fileIdPath: {}", fileIdPath, e1);
-      LOG.debug("NFS LOOKUP dir fileHandle: " + dirHandle.dumpFileHandle()
-          + " name: " + fileName + " client: " + remoteAddress);
+      LOG.debug("NFS LOOKUP dir fileHandle: {} name: {} client: {}",
+          dirHandle.dumpFileHandle(), fileName, remoteAddress);
-
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("NFS LOOKUP fileId: " + dirHandle.getFileId() + " name: "
-              + fileName + " does not exist");
-        }
+        LOG.debug("NFS LOOKUP fileId: {} name: {} does not exist",
+            dirHandle.getFileId(), fileName);
-        LOG.info("Can't get path for dir fileId: " + dirHandle.getFileId());
+        LOG.info("Can't get path for dir fileId: {}", dirHandle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-      LOG.debug("NFS ACCESS fileHandle: " + handle.dumpFileHandle()
-          + " client: " + remoteAddress);
+      LOG.debug("NFS ACCESS fileHandle: {} client: {}",
+          handle.dumpFileHandle(), remoteAddress);
-
-        LOG.error("Can't get path for fileId: " + handle.getFileId());
+        LOG.error("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", r);
+      LOG.warn("Exception", r);
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-      LOG.debug("NFS READLINK fileHandle: " + handle.dumpFileHandle()
-          + " client: " + remoteAddress);
+      LOG.debug("NFS READLINK fileHandle: {} client: {}",
+          handle.dumpFileHandle(), remoteAddress);
-
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-        LOG.error("Not a symlink, fileId: " + handle.getFileId());
+        LOG.error("Not a symlink, fileId: {}", handle.getFileId());
-        LOG.error("Symlink target should not be null, fileId: "
-            + handle.getFileId());
+        LOG.error("Symlink target should not be null, fileId: {}",
+            handle.getFileId());
-        LOG.error("Link size: "
-            + target.getBytes(Charset.forName("UTF-8")).length
-            + " is larger than max transfer size: " + rtmax);
+        LOG.error("Link size: {} is larger than max transfer size: {}",
+            target.getBytes(Charset.forName("UTF-8")).length, rtmax);
-      LOG.warn("Readlink error: " + e.getClass(), e);
+      LOG.warn("Readlink error", e);
-      LOG.debug("NFS READ fileHandle: " + handle.dumpFileHandle()+ " offset: "
-          + offset + " count: " + count + " client: " + remoteAddress);
+      LOG.debug("NFS READ fileHandle: {} offset: {} count: {} client: {}",
+          handle.dumpFileHandle(), offset, count, remoteAddress);
-
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Get error accessing file, fileId: " + handle.getFileId(), e);
-        }
+        LOG.debug("Get error accessing file, fileId: {}",
+            handle.getFileId(), e);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Can't get path for fileId: " + handle.getFileId());
-        }
+        LOG.debug("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("commitBeforeRead didn't succeed with ret=" + ret
-          + ". Read may not get most recent data.");
+      LOG.warn("commitBeforeRead didn't succeed with ret={}. " +
+          "Read may not get most recent data.", ret);
-        LOG.info("Partial read. Asked offset: " + offset + " count: " + count
-            + " and read back: " + readCount + " file size: "
-            + attrs.getSize());
+        LOG.info("Partial read. Asked offset: {} count: {} and read back: {} " +
+                "file size: {}", offset, count, readCount, attrs.getSize());
-      LOG.warn("Read error: " + e.getClass() + " offset: " + offset
-          + " count: " + count, e);
+      LOG.warn("Read error. Offset: {} count: {}", offset, count, e);
-      LOG.debug("NFS WRITE fileHandle: " + handle.dumpFileHandle() + " offset: "
-          + offset + " length: " + count + " stableHow: " + stableHow.getValue()
-          + " xid: " + xid + " client: " + remoteAddress);
+      LOG.debug("NFS WRITE fileHandle: {} offset: {} length: {} " +
+              "stableHow: {} xid: {} client: {}",
+          handle.dumpFileHandle(), offset, count, stableHow.getValue(), xid,
+          remoteAddress);
-
-        LOG.error("Can't get path for fileId: " + handle.getFileId());
+        LOG.error("Can't get path for fileId: {}", handle.getFileId());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("requested offset=" + offset + " and current filesize="
-            + preOpAttr.getSize());
-      }
+      LOG.debug("requested offset={} and current filesize={}",
+          offset, preOpAttr.getSize());
-      LOG.info("Error writing to fileId " + handle.getFileId() + " at offset "
-          + offset + " and length " + data.length, e);
+      LOG.info("Error writing to fileId {} at offset {} and length {}",
+          handle.getFileId(), offset, data.length, e);
-        LOG.info("Can't get postOpAttr for fileId: " + handle.getFileId(), e1);
+        LOG.info("Can't get postOpAttr for fileId: {}", e1);
-      LOG.debug("NFS CREATE dir fileHandle: " + dirHandle.dumpFileHandle()
-          + " filename: " + fileName + " client: " + remoteAddress);
+      LOG.debug("NFS CREATE dir fileHandle: {} filename: {} client: {}",
+          dirHandle.dumpFileHandle(), fileName, remoteAddress);
-
-      LOG.error("Setting file size is not supported when creating file: "
-          + fileName + " dir fileId: " + dirHandle.getFileId());
+      LOG.error("Setting file size is not supported when creating file: {} " +
+          "dir fileId: {}", fileName, dirHandle.getFileId());
-        LOG.error("Can't get path for dirHandle: " + dirHandle);
+        LOG.error("Can't get path for dirHandle: {}", dirHandle);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Opened stream for file: " + fileName + ", fileId: "
-              + fileHandle.getFileId());
-        }
+        LOG.debug("Opened stream for file: {}, fileId: {}",
+            fileName, fileHandle.getFileId());
-          LOG.error("Can't close stream for dirFileId: " + dirHandle.getFileId()
-              + " filename: " + fileName, e1);
+          LOG.error("Can't close stream for dirFileId: {} filename: {}",
+              dirHandle.getFileId(), fileName, e1);
-          LOG.error("Can't get postOpDirAttr for dirFileId: "
-              + dirHandle.getFileId(), e1);
+          LOG.error("Can't get postOpDirAttr for dirFileId: {}",
+              dirHandle.getFileId(), e1);
-      LOG.debug("NFS MKDIR dirHandle: " + dirHandle.dumpFileHandle()
-          + " filename: " + fileName + " client: " + remoteAddress);
+      LOG.debug("NFS MKDIR dirHandle: {} filename: {} client: {}",
+          dirHandle.dumpFileHandle(), fileName, remoteAddress);
-
-      LOG.error("Setting file size is not supported when mkdir: " + fileName
-          + " in dirHandle" + dirHandle);
+      LOG.error("Setting file size is not supported when mkdir: " +
+          "{} in dirHandle {}", fileName, dirHandle);
-        LOG.info("Can't get path for dir fileId: " + dirHandle.getFileId());
+        LOG.info("Can't get path for dir fileId: {}", dirHandle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-          LOG.info("Can't get postOpDirAttr for " + dirFileIdPath, e);
+          LOG.info("Can't get postOpDirAttr for {}", dirFileIdPath, e);
-      LOG.debug("NFS REMOVE dir fileHandle: " + dirHandle.dumpFileHandle()
-          + " fileName: " + fileName + " client: " + remoteAddress);
+      LOG.debug("NFS REMOVE dir fileHandle: {} fileName: {} client: {}",
+          dirHandle.dumpFileHandle(), fileName, remoteAddress);
-
-        LOG.info("Can't get path for dir fileId: " + dirHandle.getFileId());
+        LOG.info("Can't get path for dir fileId: {}", dirHandle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-          LOG.info("Can't get postOpDirAttr for " + dirFileIdPath, e1);
+          LOG.info("Can't get postOpDirAttr for {}", dirFileIdPath, e1);
-      LOG.debug("NFS RMDIR dir fileHandle: " + dirHandle.dumpFileHandle()
-          + " fileName: " + fileName + " client: " + remoteAddress);
+      LOG.debug("NFS RMDIR dir fileHandle: {} fileName: {} client: {}",
+          dirHandle.dumpFileHandle(), fileName, remoteAddress);
-
-        LOG.info("Can't get path for dir fileId: " + dirHandle.getFileId());
+        LOG.info("Can't get path for dir fileId: {}", dirHandle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-          LOG.info("Can't get postOpDirAttr for " + dirFileIdPath, e1);
+          LOG.info("Can't get postOpDirAttr for {}", dirFileIdPath, e1);
-      LOG.debug("NFS RENAME from: " + fromHandle.dumpFileHandle()
-          + "/" + fromName + " to: " + toHandle.dumpFileHandle()
-          + "/" + toName + " client: " + remoteAddress);
+      LOG.debug("NFS RENAME from: {}/{} to: {}/{} client: {}",
+          fromHandle.dumpFileHandle(), fromName, toHandle.dumpFileHandle(),
+          toName, remoteAddress);
-
-        LOG.info("Can't get path for fromHandle fileId: "
-            + fromHandle.getFileId());
+        LOG.info("Can't get path for fromHandle fileId: {}",
+            fromHandle.getFileId());
-        LOG.info("Can't get path for toHandle fileId: " + toHandle.getFileId());
+        LOG.info("Can't get path for toHandle fileId: {}",
+            toHandle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-        LOG.info("Can't get postOpDirAttr for " + fromDirFileIdPath + " or"
-            + toDirFileIdPath, e1);
+        LOG.info("Can't get postOpDirAttr for {} or {}",
+            fromDirFileIdPath, toDirFileIdPath, e1);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("NFS SYMLINK, target: " + symData + " link: " + linkIdPath
-          + " namenodeId: " + namenodeId + " client: " + remoteAddress);
-    }
+    LOG.debug("NFS SYMLINK, target: {} link: {} namenodeId: {} client: {}",
+        symData, linkIdPath, namenodeId, remoteAddress);
-      LOG.warn("Exception: " + e);
+      LOG.warn("Exception", e);
-      LOG.info("Cookie couldn't be found: "
-          + new String(startAfter, Charset.forName("UTF-8"))
-          + ", do listing from beginning");
+      LOG.info("Cookie couldn't be found: {}, do listing from beginning",
+          new String(startAfter, Charset.forName("UTF-8")));
-      LOG.error("Invalid READDIR request, with negative cookie: " + cookie);
+      LOG.error("Invalid READDIR request, with negative cookie: {}", cookie);
-      LOG.info("Nonpositive count in invalid READDIR request: " + count);
+      LOG.info("Nonpositive count in invalid READDIR request: {}", count);
-      LOG.debug("NFS READDIR fileHandle: " + handle.dumpFileHandle()
-          + " cookie: " + cookie + " count: " + count + " client: "
-          + remoteAddress);
+      LOG.debug("NFS READDIR fileHandle: {} cookie: {} count: {} client: {}",
+          handle.dumpFileHandle(), cookie, count, remoteAddress);
-
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-        LOG.error("Can't readdir for regular file, fileId: "
-            + handle.getFileId());
+        LOG.error("Can't readdir for regular file, fileId: {}",
+            handle.getFileId());
-          LOG.error("CookieVerf mismatch. request cookieVerf: " + cookieVerf
-              + " dir cookieVerf: " + dirStatus.getModificationTime());
+          LOG.error("CookieVerf mismatch. request cookieVerf: {} " +
+              "dir cookieVerf: {}",
+              cookieVerf, dirStatus.getModificationTime());
-        LOG.error("Can't get path for fileId: " + handle.getFileId());
+        LOG.error("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-      LOG.error("Invalid READDIRPLUS request, with negative cookie: " + cookie);
+      LOG.error("Invalid READDIRPLUS request, with negative cookie: {}",
+          cookie);
-      LOG.info("Nonpositive dircount in invalid READDIRPLUS request: " + dirCount);
+      LOG.info("Nonpositive dircount in invalid READDIRPLUS request: {}",
+          dirCount);
-      LOG.info("Nonpositive maxcount in invalid READDIRPLUS request: " + maxCount);
+      LOG.info("Nonpositive maxcount in invalid READDIRPLUS request: {}",
+          maxCount);
-      LOG.debug("NFS READDIRPLUS fileHandle: " + handle.dumpFileHandle()
-          + " cookie: " + cookie + " dirCount: " + dirCount + " maxCount: "
-          + maxCount + " client: " + remoteAddress);
+      LOG.debug("NFS READDIRPLUS fileHandle: {} cookie: {} dirCount: {} " +
+              "maxCount: {} client: {}",
+          handle.dumpFileHandle(), cookie, dirCount, maxCount, remoteAddress);
-
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-        LOG.error("Can't readdirplus for regular file, fileId: "
-            + handle.getFileId());
+        LOG.error("Can't readdirplus for regular file, fileId: {}",
+            handle.getFileId());
-          LOG.error("cookieverf mismatch. request cookieverf: " + cookieVerf
-              + " dir cookieverf: " + dirStatus.getModificationTime());
+          LOG.error("cookieverf mismatch. request cookieverf: {} " +
+                  "dir cookieverf: {}",
+              cookieVerf, dirStatus.getModificationTime());
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-          LOG.error("Can't get file attributes for fileId: " + fileId, e);
+          LOG.error("Can't get file attributes for fileId: {}", fileId, e);
-          LOG.error("Can't get file attributes for fileId: " + fileId, e);
+          LOG.error("Can't get file attributes for fileId: {}", fileId, e);
-      LOG.debug("NFS FSSTAT fileHandle: " + handle.dumpFileHandle()
-          + " client: " + remoteAddress);
+      LOG.debug("NFS FSSTAT fileHandle: {} client: {}",
+          handle.dumpFileHandle(), remoteAddress);
-
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", r);
+      LOG.warn("Exception", r);
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-      LOG.debug("NFS FSINFO fileHandle: " + handle.dumpFileHandle()
-          +" client: " + remoteAddress);
+      LOG.debug("NFS FSINFO fileHandle: {} client: {}", remoteAddress,
+          handle.dumpFileHandle(), remoteAddress);
-
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-      LOG.debug("NFS PATHCONF fileHandle: " + handle.dumpFileHandle()
-          + " client: " + remoteAddress);
+      LOG.debug("NFS PATHCONF fileHandle: {} client: {}",
+          handle.dumpFileHandle(), remoteAddress);
-
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-      LOG.debug("NFS COMMIT fileHandle: " + handle.dumpFileHandle() + " offset="
-          + request.getOffset() + " count=" + request.getCount() + " client: "
-          + remoteAddress);
+      LOG.debug("NFS COMMIT fileHandle: {} offset={} count={} client: {}",
+          handle.dumpFileHandle(), request.getOffset(), request.getCount(),
+          remoteAddress);
-
-        LOG.info("Can't get path for fileId: " + handle.getFileId());
+        LOG.info("Can't get path for fileId: {}", handle.getFileId());
-      LOG.warn("Exception ", e);
+      LOG.warn("Exception", e);
-        LOG.info("Can't get postOpAttr for fileId: " + handle.getFileId(), e1);
+        LOG.info("Can't get postOpAttr for fileId: {}", handle.getFileId(), e1);
-        LOG.info("Wrong RPC AUTH flavor, " + credentials.getFlavor()
-            + " is not AUTH_SYS or RPCSEC_GSS.");
+        LOG.info("Wrong RPC AUTH flavor, {} is not AUTH_SYS or RPCSEC_GSS.",
+            credentials.getFlavor());
-          LOG.info("Sending the cached reply to retransmitted request " + xid);
+          LOG.info("Sending the cached reply to retransmitted request {}",
+              xid);
-          LOG.info("Retransmitted request, transaction still in progress "
-              + xid);
+          LOG.info("Retransmitted request, transaction still in progress {}",
+              xid);
-      if (LOG.isDebugEnabled()) {
-          LOG.debug(Nfs3Utils.READ_RPC_START + xid);
-      }
+      LOG.debug("{}{}", Nfs3Utils.READ_RPC_START, xid);
-      if (LOG.isDebugEnabled() && (nfsproc3 == NFSPROC3.READ)) {
-        LOG.debug(Nfs3Utils.READ_RPC_END + xid);
-      }
+      LOG.debug("{}{}", Nfs3Utils.READ_RPC_END, xid);
-      if (LOG.isDebugEnabled()) {
-          LOG.debug(Nfs3Utils.WRITE_RPC_START + xid);
-      }
+      LOG.debug("{}{}", Nfs3Utils.WRITE_RPC_START, xid);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("No sync response, expect an async response for request XID="
-            + rpcCall.getXid());
-      }
+      LOG.debug("No sync response, expect an async response for request XID={}",
+          rpcCall.getXid());

MOV26 MOV26 UPD40 UPD40 UPD43 MOV8 UPD42 MOV41 MOV21 MOV25 UPD42 UPD42 MOV8 MOV32 MOV32 MOV32 MOV27 INS45 INS42 INS45 INS42 MOV21 MOV21 INS21 MOV25 MOV21 INS45 INS42 INS42 INS42 INS42 MOV41 MOV41 INS25 MOV25 MOV25 MOV25 MOV25 INS41 INS32 MOV8 MOV8 MOV27 MOV8 INS8 MOV8 MOV8 MOV8 MOV8 MOV27 MOV8 INS27 MOV27 INS45 INS42 INS45 MOV32 INS42 INS45 MOV32 INS45 MOV32 INS45 INS42 INS42 INS45 MOV32 INS42 INS42 INS42 INS45 MOV32 MOV21 INS45 MOV32 INS42 INS42 MOV21 INS45 MOV32 INS42 INS45 MOV32 INS42 MOV41 MOV41 INS45 MOV32 INS42 INS42 INS42 MOV41 INS42 INS27 MOV32 INS42 INS42 MOV32 INS42 INS42 INS45 INS42 MOV32 INS45 MOV32 INS42 INS42 INS42 MOV32 INS45 MOV32 INS42 INS42 INS27 INS42 INS42 INS45 MOV32 INS42 INS42 INS45 MOV32 INS42 INS42 INS45 MOV32 INS42 MOV32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 MOV32 INS42 INS42 INS42 INS21 MOV41 MOV41 MOV41 INS45 INS42 INS45 INS42 INS45 INS42 INS27 MOV32 INS42 INS42 INS42 INS42 INS41 MOV41 MOV41 INS54 MOV54 INS45 MOV32 INS42 INS42 INS33 INS45 INS42 MOV32 INS42 INS45 MOV32 INS42 INS45 MOV32 MOV32 MOV32 INS42 UPD42 MOV42 MOV33 MOV41 INS45 MOV32 UPD45 INS45 MOV32 UPD45 UPD45 UPD45 UPD45 INS45 MOV42 MOV21 UPD45 UPD45 INS45 INS42 INS42 UPD45 MOV45 UPD45 MOV45 INS45 MOV32 INS42 INS40 UPD45 UPD45 MOV45 INS45 UPD45 UPD45 UPD45 UPD45 INS45 INS42 INS45 MOV14 INS32 UPD45 UPD45 MOV45 UPD45 MOV45 INS14 UPD45 MOV8 INS12 UPD45 UPD45 UPD45 UPD45 UPD45 UPD42 INS45 MOV32 INS45 MOV32 INS42 INS45 MOV32 INS45 MOV32 UPD42 INS45 MOV32 INS45 MOV32 UPD42 INS45 MOV32 INS45 MOV22 INS42 INS45 MOV32 INS27 INS42 INS42 INS42 MOV32 INS45 MOV32 INS45 INS42 INS45 INS42 MOV32 INS45 MOV32 INS45 MOV32 INS45 MOV32 INS45 MOV32 INS45 MOV32 INS42 INS42 INS45 MOV32 UPD42 INS45 MOV32 INS45 MOV32 UPD42 INS45 MOV32 INS43 INS40 UPD42 INS45 MOV32 UPD42 INS45 MOV32 MOV44 INS8 INS45 MOV32 UPD43 INS45 MOV32 UPD43 INS45 MOV32 UPD43 INS45 MOV32 UPD43 MOV43 MOV40 INS45 MOV32 INS45 MOV32 UPD45 MOV45 INS45 MOV44 MOV44 INS42 INS21 INS18 UPD42 UPD42 UPD42 UPD42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 MOV32 INS42 MOV32 INS32 INS45 MOV32 INS45 INS42 INS45 INS42 MOV21 MOV21 MOV8 UPD45 UPD45 UPD45 UPD45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 MOV21 INS45 MOV32 INS42 INS45 MOV32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS40 INS42 INS45 INS40 INS42 INS45 INS40 INS42 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL38 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL27 DEL45 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL42 DEL32 DEL27 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL45 DEL27 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL42 DEL45 DEL40 DEL27 DEL45 DEL42 DEL42 DEL32 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL45 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL42 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL27 DEL42 DEL45 DEL27 DEL45 DEL42 DEL27 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL32 DEL21 DEL18 DEL8 DEL12 DEL54 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL45 DEL45 DEL45 DEL45 DEL42 DEL27 DEL45 DEL27 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL40 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL40 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL40 DEL27 DEL36 DEL27 DEL8 DEL25 DEL40 DEL42 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL32 DEL45 DEL27 DEL41 DEL8 DEL25