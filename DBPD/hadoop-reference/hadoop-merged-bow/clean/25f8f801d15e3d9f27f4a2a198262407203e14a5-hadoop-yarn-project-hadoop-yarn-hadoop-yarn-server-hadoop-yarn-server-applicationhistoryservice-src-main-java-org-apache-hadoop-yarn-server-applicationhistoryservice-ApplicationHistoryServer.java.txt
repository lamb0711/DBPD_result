YARN-2513. Host framework UIs in YARN for use with the ATS (jeagles)

+import org.apache.hadoop.http.HttpServer2;
+import org.mortbay.jetty.servlet.FilterHolder;
+import org.mortbay.jetty.webapp.WebAppContext;
+  @Private
+  @VisibleForTesting
+  int getPort() {
+    return this.webApp.httpServer().getConnectorAddress(0).getPort();
+  }
+
+  @SuppressWarnings("unchecked")
-    LOG.info("Instantiating AHSWebApp at " + bindAddress);
+      AHSWebApp ahsWebApp = new AHSWebApp(timelineDataManager, ahsClientService);
-            .with(conf).at(bindAddress).start(
-                new AHSWebApp(timelineDataManager, ahsClientService));
+             .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,
+                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);
+       HttpServer2 httpServer = webApp.httpServer();
+
+       String[] names = conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);
+       WebAppContext webAppContext = httpServer.getWebAppContext();
+
+       for (String name : names) {
+         String webPath = conf.get(
+             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);
+         String onDiskPath = conf.get(
+             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);
+         WebAppContext uiWebAppContext = new WebAppContext();
+         uiWebAppContext.setContextPath(webPath);
+         uiWebAppContext.setWar(onDiskPath);
+         final String[] ALL_URLS = { "/*" };
+         FilterHolder[] filterHolders =
+           webAppContext.getServletHandler().getFilters();
+         for (FilterHolder filterHolder: filterHolders) {
+           if (!"guice".equals(filterHolder.getName())) {
+             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),
+                 filterHolder.getClassName(), filterHolder.getInitParameters(),
+                 ALL_URLS);
+           }
+         }
+         LOG.info("Hosting " + name + " from " + onDiskPath + " at " + webPath);
+         httpServer.addContext(uiWebAppContext, true);
+       }
+       httpServer.start();
+       LOG.info("Instantiating AHSWebApp at " + getPort());

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS78 INS78 INS39 INS42 INS8 INS79 INS42 INS42 INS41 INS42 INS45 INS54 INS32 INS8 MOV12 INS32 INS42 INS60 MOV21 INS60 INS60 INS60 INS70 INS21 MOV21 INS32 INS42 INS34 INS43 INS59 INS43 INS59 INS5 INS59 INS43 INS59 INS44 INS42 INS8 INS32 INS22 INS42 INS42 INS42 MOV14 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS60 INS60 INS60 INS21 INS21 INS60 INS60 INS70 INS21 INS21 INS42 INS42 INS52 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS83 INS5 INS59 INS5 INS59 INS44 INS42 INS8 INS32 INS32 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS4 INS43 INS85 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS9 INS42 INS42 INS40 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS42 INS45 INS42 INS32 INS42 INS42 INS38 INS8 INS45 INS42 INS45 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS21 INS45 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL8 DEL54