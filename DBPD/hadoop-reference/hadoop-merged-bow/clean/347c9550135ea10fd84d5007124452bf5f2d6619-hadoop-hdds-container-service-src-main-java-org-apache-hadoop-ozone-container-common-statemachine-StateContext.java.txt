HDDS-260. Support in Datanode for sending ContainerActions to SCM. Contributed by Nanda kumar.

-import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos.CommandStatus.Status;
+import org.apache.hadoop.hdds.protocol.proto
+    .StorageContainerDatanodeProtocolProtos.ContainerAction;
+import org.apache.hadoop.hdds.protocol.proto
+    .StorageContainerDatanodeProtocolProtos.CommandStatus.Status;
-import org.apache.hadoop.ozone.protocol.commands.CommandStatus.CommandStatusBuilder;
+import org.apache.hadoop.ozone.protocol.commands.CommandStatus
+    .CommandStatusBuilder;
+import java.util.stream.Collectors;
+  private final Queue<ContainerAction> containerActions;
+    containerActions = new LinkedList<>();
-    List<GeneratedMessage> results = new ArrayList<>();
-      GeneratedMessage report = reports.poll();
-      while(results.size() < maxLimit && report != null) {
-        results.add(report);
-        report = reports.poll();
-      }
+      return reports.parallelStream().limit(maxLimit)
+          .collect(Collectors.toList());
-    return results;
+  }
+
+
+  /**
+   * Adds the ContainerAction to ContainerAction queue.
+   *
+   * @param containerAction ContainerAction to be added
+   */
+  public void addContainerAction(ContainerAction containerAction) {
+    synchronized (containerActions) {
+      containerActions.add(containerAction);
+    }
+  }
+
+  /**
+   * Returns all the pending ContainerActions from the ContainerAction queue,
+   * or empty list if the queue is empty.
+   *
+   * @return List<ContainerAction>
+   */
+  public List<ContainerAction> getAllPendingContainerActions() {
+    return getPendingContainerAction(Integer.MAX_VALUE);
+  }
+
+  /**
+   * Returns pending ContainerActions from the ContainerAction queue with a
+   * max limit on list size, or empty list if the queue is empty.
+   *
+   * @return List<ContainerAction>
+   */
+  public List<ContainerAction> getPendingContainerAction(int maxLimit) {
+    synchronized (containerActions) {
+      return containerActions.parallelStream().limit(maxLimit)
+          .collect(Collectors.toList());
+    }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 MOV29 INS83 MOV74 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS8 UPD43 MOV43 UPD43 MOV43 UPD42 MOV42 INS21 INS51 INS65 INS65 INS43 INS42 INS51 INS65 INS65 INS43 INS43 INS41 INS65 INS65 INS43 INS43 INS39 INS42 INS51 UPD42 UPD42 INS7 INS42 INS8 INS66 INS42 INS66 INS42 INS42 INS8 INS66 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS42 INS42 INS8 INS42 INS14 INS41 MOV21 INS42 INS40 INS41 INS74 INS32 INS32 INS43 INS32 INS42 INS32 UPD42 UPD42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL42 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL51 DEL42 DEL41 DEL8 DEL31