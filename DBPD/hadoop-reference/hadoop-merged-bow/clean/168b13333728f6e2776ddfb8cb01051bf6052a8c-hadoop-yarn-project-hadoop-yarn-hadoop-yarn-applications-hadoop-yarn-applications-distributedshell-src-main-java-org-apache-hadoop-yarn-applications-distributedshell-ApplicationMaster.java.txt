Merging r1527684 through r1532876 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1532910 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.net.NetUtils;
- * status/job history if needed.
+ * status/job history if needed. However, in the distributedshell, trackingurl
+ * and appMasterHost:appMasterRpcPort are not supported.
-  private int appMasterRpcPort = 0;
+  private int appMasterRpcPort = -1;
+  // VirtualCores to request for the container on which the shell command will run
+  private int containerVirtualCores = 1;
-  public ApplicationMaster() throws Exception {
-    // Set up the configuration and RPC
+  public ApplicationMaster() {
+    // Set up the configuration
+    opts.addOption("container_vcores", true,
+        "Amount of virtual cores to be requested to run the shell command");
+    containerVirtualCores = Integer.parseInt(cliParser.getOptionValue(
+        "container_vcores", "1"));
-    containerListener = new NMCallbackHandler();
+    containerListener = createNMCallbackHandler();
+    appMasterHostname = NetUtils.getHostname();
+    
+    int maxVCores = response.getMaximumResourceCapability().getVirtualCores();
+    LOG.info("Max vcores capabililty of resources in this cluster " + maxVCores);
+    if (containerVirtualCores > maxVCores) {
+      LOG.info("Container virtual cores specified above max threshold of cluster."
+          + " Using max value." + ", specified=" + containerVirtualCores + ", max="
+          + maxVCores);
+      containerVirtualCores = maxVCores;
+    }
-    while (!done) {
+    while (!done
+        && (numCompletedContainers.get() != numTotalContainers)) {
-  
+
+  @VisibleForTesting
+  NMCallbackHandler createNMCallbackHandler() {
+    return new NMCallbackHandler(this);
+  }
+
-    done = true;
-            + allocatedContainer.getResource().getMemory());
+            + allocatedContainer.getResource().getMemory()
+            + ", containerResourceVirtualCores"
+            + allocatedContainer.getResource().getVirtualCores());
-  private class NMCallbackHandler implements NMClientAsync.CallbackHandler {
+  @VisibleForTesting
+  static class NMCallbackHandler
+    implements NMClientAsync.CallbackHandler {
+    private final ApplicationMaster applicationMaster;
+
+    public NMCallbackHandler(ApplicationMaster applicationMaster) {
+      this.applicationMaster = applicationMaster;
+    }
-        nmClientAsync.getContainerStatusAsync(containerId, container.getNodeId());
+        applicationMaster.nmClientAsync.getContainerStatusAsync(containerId, container.getNodeId());
+      applicationMaster.numCompletedContainers.incrementAndGet();
+      applicationMaster.numFailedContainers.incrementAndGet();
-      ctx.setTokens(allTokens);
+      ctx.setTokens(allTokens.duplicate());
-   * @param numContainers Containers to ask for from RM
-    // For now, only memory is supported so we set memory requirements
+    // For now, memory and CPU are supported so we set memory and cpu requirements
+    capability.setVirtualCores(containerVirtualCores);

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS39 INS59 INS78 INS43 INS42 INS8 INS78 INS83 INS42 INS23 INS31 UPD66 INS66 INS38 INS42 INS34 INS21 INS21 INS21 INS60 INS21 INS25 INS42 INS42 INS41 INS42 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS21 INS34 INS32 INS7 INS7 INS39 INS59 INS32 INS27 INS8 INS27 MOV14 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS32 INS42 INS42 INS45 INS9 INS45 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS21 INS21 MOV38 INS36 INS52 INS42 INS7 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS7 INS27 INS22 INS42 INS40 INS42 INS40 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS52 INS42 MOV42 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS40 INS45 INS45 INS45 INS45 INS32 INS32 INS42 INS42 INS42 DEL34 DEL42 DEL43 DEL42 DEL9 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL66 DEL65