MAPREDUCE-7022. Fast fail rogue jobs based on task scratch dir size. Contributed by Johan Gustavsson

+import org.apache.hadoop.fs.FileUtil;
-                                  String logMsg) {
+                                  String logMsg, boolean fastFail) {
-      umbilical.fatalError(id, cause);
+      umbilical.fatalError(id, cause, fastFail);
+    private volatile String diskLimitCheckStatus = null;
+    private Thread diskLimitCheckThread = null;
+     * disk limit checker, runs in separate thread when activated.
+     */
+    public class DiskLimitCheck implements Runnable {
+      private LocalFileSystem localFS;
+      private long fsLimit;
+      private long checkInterval;
+      private String[] localDirs;
+      private boolean killOnLimitExceeded;
+
+      public DiskLimitCheck(JobConf conf) throws IOException {
+        this.localFS = FileSystem.getLocal(conf);
+        this.fsLimit = conf.getLong(MRJobConfig.JOB_SINGLE_DISK_LIMIT_BYTES,
+            MRJobConfig.DEFAULT_JOB_SINGLE_DISK_LIMIT_BYTES);
+        this.localDirs = conf.getLocalDirs();
+        this.checkInterval = conf.getLong(
+            MRJobConfig.JOB_SINGLE_DISK_LIMIT_CHECK_INTERVAL_MS,
+            MRJobConfig.DEFAULT_JOB_SINGLE_DISK_LIMIT_CHECK_INTERVAL_MS);
+        this.killOnLimitExceeded = conf.getBoolean(
+            MRJobConfig.JOB_SINGLE_DISK_LIMIT_KILL_LIMIT_EXCEED,
+            MRJobConfig.DEFAULT_JOB_SINGLE_DISK_LIMIT_KILL_LIMIT_EXCEED);
+      }
+
+      @Override
+      public void run() {
+        while (!taskDone.get()) {
+          try {
+            long localWritesSize = 0L;
+            String largestWorkDir = null;
+            for (String local : localDirs) {
+              long size = FileUtil.getDU(localFS.pathToFile(new Path(local)));
+              if (localWritesSize < size) {
+                localWritesSize = size;
+                largestWorkDir = local;
+              }
+            }
+            if (localWritesSize > fsLimit) {
+              String localStatus =
+                  "too much data in local scratch dir="
+                      + largestWorkDir
+                      + ". current size is "
+                      + localWritesSize
+                      + " the limit is " + fsLimit;
+              if (killOnLimitExceeded) {
+                LOG.error(localStatus);
+                diskLimitCheckStatus = localStatus;
+              } else {
+                LOG.warn(localStatus);
+              }
+              break;
+            }
+            Thread.sleep(checkInterval);
+          } catch (Exception e) {
+            LOG.error(e.getMessage(), e);
+          }
+        }
+      }
+    }
+
+    /**
+      if (diskLimitCheckStatus != null) {
+        throw new TaskLimitException(diskLimitCheckStatus);
+      }
-            umbilical.fatalError(taskId, errMsg);
+            umbilical.fatalError(taskId, errMsg, true);
+      startDiskLimitCheckerThreadIfNeeded();
+    }
+    public void startDiskLimitCheckerThreadIfNeeded() {
+      if (diskLimitCheckThread == null && conf.getLong(
+          MRJobConfig.JOB_SINGLE_DISK_LIMIT_BYTES,
+          MRJobConfig.DEFAULT_JOB_SINGLE_DISK_LIMIT_BYTES) >= 0) {
+        try {
+          diskLimitCheckThread = new Thread(new DiskLimitCheck(conf),
+              "disk limit check thread");
+          diskLimitCheckThread.setDaemon(true);
+          diskLimitCheckThread.start();
+        } catch (IOException e) {
+          LOG.error("Issues starting disk monitor thread: "
+              + e.getMessage(), e);
+        }
+      }

INS26 INS40 INS44 INS23 INS23 INS55 INS31 INS39 INS42 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS39 INS42 INS8 INS42 INS42 INS33 INS42 INS42 INS33 INS65 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS25 INS21 INS25 INS66 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS61 INS27 INS8 INS32 INS27 INS8 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS38 INS8 INS42 INS33 INS53 INS42 INS27 INS27 INS54 INS42 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS32 INS54 INS14 INS42 INS33 INS32 INS34 INS8 INS12 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS8 INS12 INS43 INS42 INS42 INS42 INS40 INS40 INS21 INS21 INS21 INS44 INS8 INS60 INS60 INS70 INS25 INS21 INS44 INS8 INS42 INS7 INS32 INS32 INS43 INS42 INS21 INS39 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS32 INS43 INS42 INS21 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS33 INS43 INS42 INS60 INS25 INS42 INS42 INS60 INS25 INS10 INS42 INS42 INS42 INS42 INS32 INS43 INS14 INS45 INS42 INS42 INS27 INS42 INS42 INS39 INS59 INS27 INS8 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS27 INS21 INS21 INS21 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS7 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42