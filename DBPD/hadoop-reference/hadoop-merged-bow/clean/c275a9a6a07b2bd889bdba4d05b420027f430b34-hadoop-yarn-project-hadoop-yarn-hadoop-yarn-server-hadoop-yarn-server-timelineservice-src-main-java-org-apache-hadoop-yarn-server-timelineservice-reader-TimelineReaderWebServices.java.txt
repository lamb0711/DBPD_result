Merge trunk into HDDS-48

+import org.apache.hadoop.yarn.webapp.ForbiddenException;
+    } else if (e instanceof ForbiddenException) {
+      throw (ForbiddenException) e;
+      checkAccessForGenericEntities(entities, callerUGI, entityType);
-          TimelineReaderWebServicesUtils.createTimelineEntityFilters(
-          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,
-              infofilters, conffilters, metricfilters, eventfilters,
-              fromId),
-          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(
-          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,
-          metricsTimeStart, metricsTimeEnd));
+          TimelineReaderWebServicesUtils
+              .createTimelineEntityFilters(limit, createdTimeStart,
+                  createdTimeEnd, relatesTo, isRelatedTo, infofilters,
+                  conffilters, metricfilters, eventfilters, fromId),
+          TimelineReaderWebServicesUtils
+              .createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve,
+                  fields, metricsLimit, metricsTimeStart, metricsTimeEnd));
+
+      checkAccessForGenericEntities(entities, callerUGI, entityType);
+      checkAccessForGenericEntity(entity, callerUGI);
+      checkAccessForGenericEntity(entity, callerUGI);
+      // TODO to be removed or modified once ACL story is played
+      checkAccess(timelineReaderManager, callerUGI, context.getUserId());
-      entity = timelineReaderManager.getEntity(
-          TimelineReaderWebServicesUtils.createTimelineReaderContext(
-          clusterId, userId, flowName, flowRunId, null,
-              TimelineEntityType.YARN_FLOW_RUN.toString(), null, null),
-          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(
-          null, metricsToRetrieve, null, null, null, null));
+      TimelineReaderContext context = TimelineReaderWebServicesUtils
+          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,
+              null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);
+      // TODO to be removed or modified once ACL story is played
+      checkAccess(timelineReaderManager, callerUGI, context.getUserId());
+
+      entity = timelineReaderManager.getEntity(context,
+          TimelineReaderWebServicesUtils
+              .createTimelineDataToRetrieve(null, metricsToRetrieve, null, null,
+                  null, null));
+      // TODO to be removed or modified once ACL story is played
+      checkAccess(timelineReaderManager, callerUGI, context.getUserId());
-      entities = timelineReaderManager.getEntities(
-          TimelineReaderWebServicesUtils.createTimelineReaderContext(
-          clusterId, userId, flowName, null, null,
-              TimelineEntityType.YARN_FLOW_RUN.toString(), null, null),
-          TimelineReaderWebServicesUtils.createTimelineEntityFilters(
-          limit, createdTimeStart, createdTimeEnd, null, null, null,
-              null, null, null, fromId),
-          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(
-          null, metricsToRetrieve, fields, null, null, null));
+      TimelineReaderContext timelineReaderContext = TimelineReaderWebServicesUtils
+          .createTimelineReaderContext(clusterId, userId, flowName, null,
+              null, TimelineEntityType.YARN_FLOW_RUN.toString(), null,
+              null);
+      // TODO to be removed or modified once ACL story is played
+      checkAccess(timelineReaderManager, callerUGI,
+          timelineReaderContext.getUserId());
+
+      entities = timelineReaderManager.getEntities(timelineReaderContext,
+          TimelineReaderWebServicesUtils
+              .createTimelineEntityFilters(limit, createdTimeStart,
+                  createdTimeEnd, null, null, null, null, null, null, fromId),
+          TimelineReaderWebServicesUtils
+              .createTimelineDataToRetrieve(null, metricsToRetrieve, fields,
+                  null, null, null));
-    Configuration config = timelineReaderManager.getConfig();
-    } else if (isDisplayEntityPerUserFilterEnabled(config)) {
-      Set<TimelineEntity> userEntities = new LinkedHashSet<>();
-      userEntities.addAll(entities);
-      for (TimelineEntity entity : userEntities) {
-        if (entity.getInfo() != null) {
-          String userId =
-              (String) entity.getInfo().get(FlowActivityEntity.USER_INFO_KEY);
-          if (!validateAuthUserWithEntityUser(timelineReaderManager, callerUGI,
-              userId)) {
-            entities.remove(entity);
-          }
-        }
-      }
+    } else {
+      checkAccess(timelineReaderManager, callerUGI, entities,
+          FlowActivityEntity.USER_INFO_KEY, true);
+      checkAccessForAppEntity(entity, callerUGI);
+      checkAccessForAppEntity(entity, callerUGI);
+      // TODO to be removed or modified once ACL story is played
+      checkAccess(timelineReaderManager, callerUGI, context.getUserId());
+      checkAccessForSubAppEntities(entities,callerUGI);
+      checkAccessForSubAppEntities(entities,callerUGI);
-  private boolean isDisplayEntityPerUserFilterEnabled(Configuration config) {
+  static boolean isDisplayEntityPerUserFilterEnabled(Configuration config) {
+  // TODO to be removed or modified once ACL story is played
+  private void checkAccessForSubAppEntities(Set<TimelineEntity> entities,
+      UserGroupInformation callerUGI) throws Exception {
+    if (entities != null && entities.size() > 0
+        && isDisplayEntityPerUserFilterEnabled(
+        getTimelineReaderManager().getConfig())) {
+      TimelineReaderContext timelineReaderContext = null;
+      TimelineEntity entity = entities.iterator().next();
+      String fromId =
+          (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);
+      timelineReaderContext =
+          TimelineFromIdConverter.SUB_APPLICATION_ENTITY_FROMID
+              .decodeUID(fromId);
+      checkAccess(getTimelineReaderManager(), callerUGI,
+          timelineReaderContext.getDoAsUser());
+    }
+  }
+
+  // TODO to be removed or modified once ACL story is played
+  private void checkAccessForAppEntity(TimelineEntity entity,
+      UserGroupInformation callerUGI) throws Exception {
+    if (entity != null && isDisplayEntityPerUserFilterEnabled(
+        getTimelineReaderManager().getConfig())) {
+      String fromId =
+          (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);
+      TimelineReaderContext timelineReaderContext =
+          TimelineFromIdConverter.APPLICATION_FROMID.decodeUID(fromId);
+      checkAccess(getTimelineReaderManager(), callerUGI,
+          timelineReaderContext.getUserId());
+    }
+  }
+
+  // TODO to be removed or modified once ACL story is played
+  private void checkAccessForGenericEntity(TimelineEntity entity,
+      UserGroupInformation callerUGI) throws Exception {
+    if (entity != null && isDisplayEntityPerUserFilterEnabled(
+        getTimelineReaderManager().getConfig())) {
+      String fromId =
+          (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);
+      TimelineReaderContext timelineReaderContext =
+          TimelineFromIdConverter.GENERIC_ENTITY_FROMID.decodeUID(fromId);
+      checkAccess(getTimelineReaderManager(), callerUGI,
+          timelineReaderContext.getUserId());
+    }
+  }
+
+  // TODO to be removed or modified once ACL story is played
+  private void checkAccessForGenericEntities(Set<TimelineEntity> entities,
+      UserGroupInformation callerUGI, String entityType) throws Exception {
+    if (entities != null && entities.size() > 0
+        && isDisplayEntityPerUserFilterEnabled(
+        getTimelineReaderManager().getConfig())) {
+      TimelineReaderContext timelineReaderContext = null;
+      TimelineEntity entity = entities.iterator().next();
+      String uid =
+          (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);
+      if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {
+        timelineReaderContext =
+            TimelineFromIdConverter.APPLICATION_FROMID.decodeUID(uid);
+      } else {
+        timelineReaderContext =
+            TimelineFromIdConverter.GENERIC_ENTITY_FROMID.decodeUID(uid);
+      }
+      checkAccess(getTimelineReaderManager(), callerUGI,
+          timelineReaderContext.getUserId());
+    }
+  }
+
-  private boolean validateAuthUserWithEntityUser(
+  static boolean validateAuthUserWithEntityUser(
+
+  // TODO to be removed/modified once ACL story has played
+  static boolean checkAccess(TimelineReaderManager readerManager,
+      UserGroupInformation ugi, String entityUser) {
+    if (isDisplayEntityPerUserFilterEnabled(readerManager.getConfig())) {
+      if (!validateAuthUserWithEntityUser(readerManager, ugi, entityUser)) {
+        String userName = ugi.getShortUserName();
+        String msg = "User " + userName
+            + " is not allowed to read TimelineService V2 data.";
+        throw new ForbiddenException(msg);
+      }
+    }
+    return true;
+  }
+
+  // TODO to be removed or modified once ACL story is played
+  static void checkAccess(TimelineReaderManager readerManager,
+      UserGroupInformation callerUGI, Set<TimelineEntity> entities,
+      String entityUserKey, boolean verifyForAllEntity) {
+    if (entities.size() > 0 && isDisplayEntityPerUserFilterEnabled(
+        readerManager.getConfig())) {
+      Set<TimelineEntity> userEntities = new LinkedHashSet<>();
+      userEntities.addAll(entities);
+      for (TimelineEntity entity : userEntities) {
+        if (entity.getInfo() != null) {
+          String userId = (String) entity.getInfo().get(entityUserKey);
+          if (!validateAuthUserWithEntityUser(readerManager, callerUGI,
+              userId)) {
+            entities.remove(entity);
+            if (!verifyForAllEntity) {
+              break;
+            }
+          }
+        }
+      }
+    }
+  }

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 UPD83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS25 INS74 INS42 INS43 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS42 INS25 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 MOV25 MOV27 MOV8 INS8 INS43 INS43 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS43 INS43 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS32 INS8 INS9 INS42 INS42 INS43 INS43 INS42 INS27 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS27 INS32 INS60 INS60 MOV60 INS21 INS21 INS27 INS32 INS60 INS60 INS21 INS27 INS32 INS60 INS60 INS21 INS42 INS42 INS27 INS32 INS60 INS60 INS60 INS25 INS21 INS42 INS32 INS25 INS42 INS42 INS27 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS27 INS42 INS32 INS43 INS59 INS43 INS59 MOV43 INS7 INS32 INS42 INS33 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS33 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS27 INS27 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS32 INS42 INS42 INS38 INS8 INS32 INS34 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS40 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS33 INS32 INS34 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS11 INS40 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS32 INS32 INS60 INS60 INS53 INS42 INS42 INS42 UPD42 MOV42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS14 INS62 INS8 MOV8 INS42 INS42 UPD40 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS42 INS60 INS42 INS43 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS43 INS59 INS42 INS11 INS42 INS42 INS11 INS25 INS43 INS42 INS43 INS32 UPD42 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS10 INS42 INS42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL25 DEL32