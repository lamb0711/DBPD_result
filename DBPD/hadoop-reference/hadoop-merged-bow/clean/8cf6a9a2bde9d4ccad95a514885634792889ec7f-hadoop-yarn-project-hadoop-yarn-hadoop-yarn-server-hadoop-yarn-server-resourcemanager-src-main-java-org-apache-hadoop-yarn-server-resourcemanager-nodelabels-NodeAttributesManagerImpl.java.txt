YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.

+import java.util.ArrayList;
+import java.util.List;
-import java.util.concurrent.ConcurrentHashMap.KeySetView;
-import java.util.ArrayList;
-import java.util.List;
+import org.apache.hadoop.yarn.api.records.NodeAttributeKey;
+import com.google.common.base.Strings;
+
-  private ConcurrentHashMap<NodeAttribute, RMNodeAttribute> clusterAttributes =
-      new ConcurrentHashMap<>();
+  private ConcurrentHashMap<NodeAttributeKey, RMNodeAttribute> clusterAttributes
+      = new ConcurrentHashMap<>();
-      Map<NodeAttribute, RMNodeAttribute> newAttributesToBeAdded,
+      Map<NodeAttributeKey, RMNodeAttribute> newAttributesToBeAdded,
-      RMNodeAttribute host = clusterAttributes.get(rmAttribute);
+      RMNodeAttribute host =
+          clusterAttributes.get(rmAttribute.getAttributeKey());
-          clusterAttributes.remove(rmAttribute);
+          clusterAttributes.remove(rmAttribute.getAttributeKey());
-    for (NodeAttribute attribute : attributeMappings.keySet()) {
-      RMNodeAttribute rmNodeAttribute = clusterAttributes.get(attribute);
+    for (Entry<NodeAttribute, AttributeValue> attributeEntry : attributeMappings
+        .entrySet()) {
+
+      RMNodeAttribute rmNodeAttribute =
+          clusterAttributes.get(attributeEntry.getKey().getAttributeKey());
-        rmNodeAttribute.addNode(nodeHost);
+        rmNodeAttribute.addNode(nodeHost, attributeEntry.getValue());
-        clusterAttributes.put(attribute, new RMNodeAttribute(attribute));
+        clusterAttributes.put(attributeEntry.getKey().getAttributeKey(),
+            new RMNodeAttribute(attributeEntry.getKey()));
-      Map<NodeAttribute, RMNodeAttribute> newAttributesToBeAdded,
+      Map<NodeAttributeKey, RMNodeAttribute> newAttributesToBeAdded,
-        String attributeName = attribute.getAttributeName().trim();
+        NodeAttributeKey attributeKey = attribute.getAttributeKey();
+        String attributeName = attributeKey.getAttributeName().trim();
-            .checkAndThrowAttributePrefix(attribute.getAttributePrefix());
+            .checkAndThrowAttributePrefix(attributeKey.getAttributePrefix());
-        attribute.setAttributeName(attributeName);
-        attribute.setAttributePrefix(attribute.getAttributePrefix().trim());
+        attributeKey.setAttributeName(attributeName);
+        attributeKey
+            .setAttributePrefix(attributeKey.getAttributePrefix().trim());
-          newAttributesToBeAdded.put(attribute,
+          newAttributesToBeAdded.put(attribute.getAttributeKey(),
-      Map<NodeAttribute, RMNodeAttribute> newAttributes)
+      Map<NodeAttributeKey, RMNodeAttribute> newAttributes)
-    if (isRemoveOperation && !clusterAttributes.containsKey(attribute)) {
+    NodeAttributeKey attributeKey = attribute.getAttributeKey();
+    if (isRemoveOperation
+        && !clusterAttributes.containsKey(attributeKey)) {
-          (clusterAttributes.containsKey((attribute))
-              ? clusterAttributes.get(attribute).getAttribute()
-              : (newAttributes.containsKey(attribute)
-                  ? newAttributes.get(attribute).getAttribute()
+          (clusterAttributes.containsKey(attributeKey)
+              ? clusterAttributes.get(attributeKey).getAttribute()
+              : (newAttributes.containsKey(attributeKey)
+                  ? newAttributes.get(attributeKey).getAttribute()
-            + attribute.getAttributeName() + " existing : "
+            + attributeKey + " existing : "
-  public Set<NodeAttribute> getClusterNodeAttributes(Set<String> prefix) {
+  public Set<NodeAttribute> getClusterNodeAttributes(
+      Set<String> prefix) {
-    KeySetView<NodeAttribute, RMNodeAttribute> allAttributes =
-        clusterAttributes.keySet();
+    Set<Entry<NodeAttributeKey, RMNodeAttribute>> allAttributes =
+        clusterAttributes.entrySet();
-    if (prefix == null || prefix.isEmpty()) {
-      attributes.addAll(allAttributes);
-      return attributes;
-    }
+    boolean forAllPrefix = prefix == null || prefix.isEmpty();
-    Iterator<NodeAttribute> iterator = allAttributes.iterator();
+    Iterator<Entry<NodeAttributeKey, RMNodeAttribute>> iterator =
+        allAttributes.iterator();
-      NodeAttribute current = iterator.next();
-      if (prefix.contains(current.getAttributePrefix())) {
-        attributes.add(current);
+      Entry<NodeAttributeKey, RMNodeAttribute> current = iterator.next();
+      NodeAttributeKey attrID = current.getKey();
+      RMNodeAttribute rmAttr = current.getValue();
+      if (forAllPrefix || prefix.contains(attrID.getAttributePrefix())) {
+        attributes.add(rmAttr.getAttribute());
-  public Map<NodeAttribute, Set<String>> getAttributesToNodes(
-      Set<NodeAttribute> attributes) {
+  public Map<NodeAttributeKey, Map<String, AttributeValue>> getAttributesToNodes(
+      Set<NodeAttributeKey> attributes) {
-      Map<NodeAttribute, Set<String>> attributesToNodes = new HashMap<>();
-      for (Entry<NodeAttribute, RMNodeAttribute> attributeEntry :
+      Map<NodeAttributeKey, Map<String, AttributeValue>> attributesToNodes =
+          new HashMap<>();
+      for (Entry<NodeAttributeKey, RMNodeAttribute> attributeEntry :
-        if (fetchAllAttributes || attributes
-            .contains(attributeEntry.getKey())) {
+        if (fetchAllAttributes
+            || attributes.contains(attributeEntry.getKey())) {
-      return clusterAttributes.containsKey(attribute)
-          ? clusterAttributes.get(attribute).getResource()
+      return clusterAttributes.containsKey(attribute.getAttributeKey())
+          ? clusterAttributes.get(attribute.getAttributeKey()).getResource()
-            if (prefix.contains(nodeAttr.getKey().getAttributePrefix())) {
+            if (prefix.contains(
+                nodeAttr.getKey().getAttributeKey().getAttributePrefix())) {
-        clusterAttributes.get(attribute).removeNode(resource);
+        clusterAttributes.get(attribute.getAttributeKey()).removeNode(resource);
-        clusterAttributes.get(attribute).removeNode(host.getResource());
+        clusterAttributes.get(attribute.getAttributeKey())
+            .removeNode(host.getResource());
-          if (prefix.equals(current.getKey().getAttributePrefix())) {
+          if (prefix.equals(
+              current.getKey().getAttributeKey().getAttributePrefix())) {
-    Map<NodeAttribute, RMNodeAttribute> newAttributesToBeAdded =
+    Map<NodeAttributeKey, RMNodeAttribute> newAttributesToBeAdded =

MOV26 MOV26 MOV26 INS26 INS40 UPD40 UPD74 UPD74 UPD43 UPD74 UPD74 UPD74 INS60 INS60 INS61 MOV43 UPD43 UPD74 UPD74 MOV74 UPD42 UPD43 INS43 UPD43 INS43 INS59 UPD74 INS39 INS59 UPD74 MOV32 INS8 UPD42 MOV43 MOV43 UPD43 INS43 UPD74 UPD42 INS74 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS32 UPD43 INS74 INS42 MOV27 INS74 MOV60 INS60 INS60 MOV25 UPD42 INS42 UPD43 INS43 MOV43 INS43 INS42 INS42 UPD42 INS43 UPD43 MOV43 MOV43 UPD42 INS43 INS43 UPD43 MOV43 INS74 INS43 INS59 INS43 INS59 INS27 UPD74 UPD42 INS42 UPD42 MOV42 INS60 UPD42 INS42 UPD42 INS42 INS42 UPD42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 UPD43 INS74 UPD74 INS32 INS32 INS43 INS59 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV32 INS42 UPD42 INS43 MOV43 INS43 UPD43 INS32 MOV42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS32 INS32 INS42 INS42 MOV32 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 INS32 UPD42 INS42 MOV42 INS42 MOV42 INS42 UPD42 MOV42 INS42 MOV42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS42 MOV32 MOV42 UPD42 UPD42 DEL43 DEL42 DEL42 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL25 DEL43 DEL32 DEL8 DEL61 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42