HDFS-2717. BookKeeper Journal output stream doesn't check addComplete rc. Contributed by Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342534 13f79535-47bb-0310-9956-ffa450edef68

+      maxTxId.store(txId);
+          long id = currentLedger.getId();
+          bkc.deleteLedger(id);
-  // TODO(HA): Handle inProgressOk
-  EditLogInputStream getInputStream(long fromTxnId, boolean inProgressOk)
+  EditLogInputStream getInputStream(long fromTxId, boolean inProgressOk)
-      if (l.getFirstTxId() == fromTxnId) {
+      long lastTxId = l.getLastTxId();
+      if (l.isInProgress()) {
+        if (!inProgressOk) {
+          continue;
+        }
+
+        lastTxId = recoverLastTxId(l, false);
+      }
+
+      if (fromTxId >= l.getFirstTxId() && fromTxId <= lastTxId) {
-          LedgerHandle h = bkc.openLedger(l.getLedgerId(),
-                                          BookKeeper.DigestType.MAC,
-                                          digestpw.getBytes());
-          return new BookKeeperEditLogInputStream(h, l);
+          LedgerHandle h;
+          if (l.isInProgress()) { // we don't want to fence the current journal
+            h = bkc.openLedgerNoRecovery(l.getLedgerId(),
+                BookKeeper.DigestType.MAC, digestpw.getBytes());
+          } else {
+            h = bkc.openLedger(l.getLedgerId(), BookKeeper.DigestType.MAC,
+                digestpw.getBytes());
+          }
+          BookKeeperEditLogInputStream s = new BookKeeperEditLogInputStream(h,
+              l);
+          s.skipTo(fromTxId);
+          return s;
-          throw new IOException("Could not open ledger for " + fromTxnId, e);
+          throw new IOException("Could not open ledger for " + fromTxId, e);
-  // TODO(HA): Handle inProgressOk
-  long getNumberOfTransactions(long fromTxnId, boolean inProgressOk)
+  long getNumberOfTransactions(long fromTxId, boolean inProgressOk)
+      long lastTxId = l.getLastTxId();
-        long endTxId = recoverLastTxId(l);
-        if (endTxId == HdfsConstants.INVALID_TXID) {
+        if (!inProgressOk) {
+          continue;
+        }
+
+        lastTxId = recoverLastTxId(l, false);
+        if (lastTxId == HdfsConstants.INVALID_TXID) {
-        count += (endTxId - l.getFirstTxId()) + 1;
-        break;
-      if (l.getFirstTxId() < fromTxnId) {
+      assert lastTxId >= l.getFirstTxId();
+
+      if (lastTxId < fromTxId) {
-      } else if (l.getFirstTxId() == fromTxnId) {
-        count = (l.getLastTxId() - l.getFirstTxId()) + 1;
-        expectedStart = l.getLastTxId() + 1;
+      } else if (l.getFirstTxId() <= fromTxId && lastTxId >= fromTxId) {
+        // we can start in the middle of a segment
+        count = (lastTxId - l.getFirstTxId()) + 1;
+        expectedStart = lastTxId + 1;
-        count += (l.getLastTxId() - l.getFirstTxId()) + 1;
-        expectedStart = l.getLastTxId() + 1;
+        count += (lastTxId - l.getFirstTxId()) + 1;
+        expectedStart = lastTxId + 1;
-          long endTxId = recoverLastTxId(l);
+          long endTxId = recoverLastTxId(l, true);
-  private long recoverLastTxId(EditLogLedgerMetadata l) throws IOException {
+  private long recoverLastTxId(EditLogLedgerMetadata l, boolean fence)
+      throws IOException {
-      LedgerHandle lh = bkc.openLedger(l.getLedgerId(),
-                                       BookKeeper.DigestType.MAC,
-                                       digestpw.getBytes());
+      LedgerHandle lh = null;
+      if (fence) {
+        lh = bkc.openLedger(l.getLedgerId(),
+                            BookKeeper.DigestType.MAC,
+                            digestpw.getBytes());
+      } else {
+        lh = bkc.openLedgerNoRecovery(l.getLedgerId(),
+                                      BookKeeper.DigestType.MAC,
+                                      digestpw.getBytes());
+      }

INS44 UPD42 UPD42 INS39 INS42 INS21 INS60 INS25 INS60 INS25 INS6 INS25 INS32 INS39 INS59 INS32 INS8 UPD27 MOV39 INS59 MOV32 INS8 UPD27 MOV27 INS27 INS42 INS8 INS8 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS25 INS21 INS27 INS27 UPD42 MOV42 MOV32 INS25 INS21 MOV25 INS42 INS42 INS42 INS27 INS33 INS21 INS21 INS38 INS8 INS7 INS42 MOV32 UPD42 MOV42 INS42 INS8 INS38 INS8 INS7 UPD27 MOV27 INS27 INS7 INS7 INS42 INS18 INS42 INS32 MOV42 INS60 INS25 INS60 INS21 INS41 INS42 INS18 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 MOV32 INS42 INS32 INS60 INS21 INS42 INS42 INS9 MOV43 INS59 INS32 INS8 MOV8 INS43 INS59 INS32 INS42 MOV42 MOV42 INS9 INS42 INS42 INS32 INS40 INS32 INS39 INS59 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 UPD27 MOV27 MOV32 INS9 INS42 INS42 INS42 INS32 INS42 MOV32 UPD42 INS42 UPD42 INS42 INS42 INS32 INS40 INS32 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL41 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL7 DEL21 DEL10 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32