HDFS-6376. Distcp data between two HA clusters requires another configuration. Contributed by Dave Marion and Haohui Mai.

+import com.google.common.collect.Sets;
-  
+
-    getAddresses(Configuration conf,
-      String defaultAddress, String... keys) {
+    getAddresses(Configuration conf, String defaultAddress, String... keys) {
-    
+    return getAddressesForNsIds(conf, nameserviceIds, defaultAddress, keys);
+  }
+
+  /**
+   * Returns the configured address for all NameNodes in the cluster.
+   * @param conf configuration
+   * @param nsIds
+   *@param defaultAddress default address to return in case key is not found.
+   * @param keys Set of keys to look for in the order of preference   @return a map(nameserviceId to map(namenodeId to InetSocketAddress))
+   */
+  private static Map<String, Map<String, InetSocketAddress>>
+    getAddressesForNsIds(Configuration conf, Collection<String> nsIds,
+                         String defaultAddress, String... keys) {
-    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {
+    for (String nsId : emptyAsSingletonNull(nsIds)) {
-   * configuration. Note this is to be used by datanodes to get the list of
-   * namenode addresses to talk to.
+   * configuration.
-  
+
+  /**
+   * Returns list of InetSocketAddresses corresponding to the namenode
+   * that manages this cluster. Note this is to be used by datanodes to get
+   * the list of namenode addresses to talk to.
+   *
+   * Returns namenode address specifically configured for datanodes (using
+   * service ports), if found. If not, regular RPC address configured for other
+   * clients is returned.
+   *
+   * @param conf configuration
+   * @return list of InetSocketAddress
+   * @throws IOException on error
+   */
+  public static Map<String, Map<String, InetSocketAddress>>
+    getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {
+    // Use default address as fall back
+    String defaultAddress;
+    try {
+      defaultAddress = NetUtils.getHostPortString(NameNode.getAddress(conf));
+    } catch (IllegalArgumentException e) {
+      defaultAddress = null;
+    }
+
+    Collection<String> parentNameServices = conf.getTrimmedStringCollection
+            (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);
+
+    if (parentNameServices.isEmpty()) {
+      parentNameServices = conf.getTrimmedStringCollection
+              (DFSConfigKeys.DFS_NAMESERVICES);
+    } else {
+      // Ensure that the internal service is ineed in the list of all available
+      // nameservices.
+      Set<String> availableNameServices = Sets.newHashSet(conf
+              .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));
+      for (String nsId : parentNameServices) {
+        if (!availableNameServices.contains(nsId)) {
+          throw new IOException("Unknown nameservice: " + nsId);
+        }
+      }
+    }
+
+    Map<String, Map<String, InetSocketAddress>> addressList =
+            getAddressesForNsIds(conf, parentNameServices, defaultAddress,
+                    DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);
+    if (addressList.isEmpty()) {
+      throw new IOException("Incorrect configuration: namenode address "
+              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + " or "
+              + DFS_NAMENODE_RPC_ADDRESS_KEY
+              + " is not configured.");
+    }
+    return addressList;
+  }
+

INS26 INS40 INS31 INS31 MOV29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS29 UPD42 INS44 INS29 INS83 INS83 INS74 INS42 INS44 INS43 INS8 INS43 INS43 INS74 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 INS41 INS65 INS65 INS65 INS65 INS65 INS74 INS42 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS43 INS42 INS42 INS60 INS54 INS60 INS25 INS60 INS25 INS41 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS43 INS43 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS43 INS42 INS43 INS59 INS8 INS12 INS74 INS59 INS32 INS8 INS8 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS60 INS70 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS53 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS40 INS7 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS7 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS8 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS53 INS42 INS42 INS42 INS14 INS43 INS27 INS42 INS45 INS42 DEL66