YARN-8714. [Submarine] Support files/tarballs to be localized for a training job. (Zhankun Tang via wangda)

Change-Id: I845131273e52a9d81dbc813ea6d4af06b205e334

+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileUtil;
+import java.io.File;
+import java.net.URI;
-  FileSystem fs;
+  private FileSystem fs;
+  private Configuration conf;
+    this.conf = context.getYarnConfig();
-  public Path getJobStagingArea(String jobName, boolean create) throws IOException {
+  public Path getJobStagingArea(String jobName, boolean create)
+      throws IOException {
-  public Path getModelDir(String modelName, boolean create) throws IOException {
+  public Path getModelDir(String modelName, boolean create)
+      throws IOException {
-  public FileSystem getFileSystem() {
+  public FileSystem getDefaultFileSystem() {
+  public FileSystem getFileSystemByUri(String uri) throws IOException {
+    return FileSystem.get(URI.create(uri), conf);
+  }
+
+  @Override
+  @Override
+  public boolean isDir(String uri) throws IOException {
+    if (isRemote(uri)) {
+      return getFileSystemByUri(uri).getFileStatus(new Path(uri)).isDirectory();
+    }
+    return new File(uri).isDirectory();
+  }
+
+  @Override
+  public boolean isRemote(String uri) {
+    String scheme = new Path(uri).toUri().getScheme();
+    if (null == scheme) {
+      return false;
+    }
+    return !scheme.startsWith("file://");
+  }
+
+  @Override
+  public boolean copyRemoteToLocal(String remoteUri, String localUri)
+      throws IOException {
+    // Delete old to avoid failure in FileUtil.copy
+    File old = new File(localUri);
+    if (old.exists()) {
+      if (!FileUtil.fullyDelete(old)) {
+        throw new IOException("Failed to delete dir:"
+            + old.getAbsolutePath());
+      }
+    }
+    return FileUtil.copy(getFileSystemByUri(remoteUri), new Path(remoteUri),
+        new File(localUri), false,
+        conf);
+  }
+
+  @Override
+  public boolean existsRemoteFile(Path url) throws IOException {
+    return getFileSystemByUri(url.toUri().toString()).exists(url);
+  }
+
+  @Override
+  public FileStatus getRemoteFileStatus(Path url) throws IOException {
+    return getFileSystemByUri(url.toUri().toString()).getFileStatus(url);
+  }
+
+  @Override
+  public long getRemoteFileSize(String uri) throws IOException {
+    return getFileSystemByUri(uri)
+        .getContentSummary(new Path(uri)).getSpaceConsumed();
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 UPD42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS41 INS7 INS42 INS32 INS42 INS32 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS38 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS22 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS14 INS42 INS42 INS42 INS32 INS33 INS42 INS41 INS32 INS42 INS42 INS14 INS42 INS42 INS25 INS42 INS42 INS32 INS14 INS14 INS9 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS9 INS42 INS42 INS45 INS43 INS42 INS38 INS8 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS14 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42