HDDS-1043. Enable token based authentication for S3 api

Closes #561

-import javax.enterprise.context.ApplicationScoped;
-import javax.enterprise.inject.Produces;
-import javax.inject.Inject;
-import java.io.IOException;
-
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.ozone.OzoneSecurityUtil;
+import org.apache.hadoop.ozone.s3.exception.OS3Exception;
+import org.apache.hadoop.ozone.security.OzoneTokenIdentifier;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.token.Token;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.enterprise.context.RequestScoped;
+import javax.enterprise.inject.Produces;
+import javax.inject.Inject;
+import javax.ws.rs.container.ContainerRequestContext;
+import javax.ws.rs.core.Context;
+import java.io.IOException;
+import java.net.URISyntaxException;
+
+import static org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OMTokenProto.Type.S3TOKEN;
+import static org.apache.hadoop.ozone.s3.AWSAuthParser.AUTHORIZATION_HEADER;
+import static org.apache.hadoop.ozone.s3.AWSAuthParser.UTF_8;
+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.AUTH_PROTOCOL_NOT_SUPPORTED;
+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.S3_TOKEN_CREATION_ERROR;
-@ApplicationScoped
+@RequestScoped
+  private final static Logger LOG =
+      LoggerFactory.getLogger(OzoneClientProducer.class);
+
+  @Context
+  private ContainerRequestContext context;
+
+  @Inject
-  public OzoneClientProducer(
-      OzoneConfiguration ozoneConfiguration) {
-    this.ozoneConfiguration = ozoneConfiguration;
-  }
+  private Text omService;
+
+    return getClient(ozoneConfiguration);
+  }
+
+  private OzoneClient getClient(OzoneConfiguration config) throws IOException {
+    try {
+      if (OzoneSecurityUtil.isSecurityEnabled(config)) {
+        LOG.debug("Creating s3 token for client.");
+        if (context.getHeaderString(AUTHORIZATION_HEADER).startsWith("AWS4")) {
+          try {
+            AWSV4AuthParser v4RequestParser = new AWSV4AuthParser(context);
+            v4RequestParser.parse();
+
+            OzoneTokenIdentifier identifier = new OzoneTokenIdentifier();
+            identifier.setTokenType(S3TOKEN);
+            identifier.setStrToSign(v4RequestParser.getStringToSign());
+            identifier.setSignature(v4RequestParser.getSignature());
+            identifier.setAwsAccessId(v4RequestParser.getAwsAccessId());
+            identifier.setOwner(new Text(v4RequestParser.getAwsAccessId()));
+
+            LOG.trace("Adding token for service:{}", omService);
+            Token<OzoneTokenIdentifier> token = new Token(identifier.getBytes(),
+                identifier.getSignature().getBytes(UTF_8),
+                identifier.getKind(),
+                omService);
+            UserGroupInformation remoteUser =
+                UserGroupInformation.createRemoteUser(
+                    v4RequestParser.getAwsAccessId());
+            remoteUser.addToken(token);
+            UserGroupInformation.setLoginUser(remoteUser);
+          } catch (OS3Exception | URISyntaxException ex) {
+            LOG.error("S3 token creation failed.");
+            throw S3_TOKEN_CREATION_ERROR;
+          }
+        } else {
+          throw AUTH_PROTOCOL_NOT_SUPPORTED;
+        }
+      }
+    } catch (Exception e) {
+      LOG.error("Error: ", e);
+    }
+  @VisibleForTesting
+  public void setContext(ContainerRequestContext context) {
+    this.context = context;
+  }
+
+  @VisibleForTesting
+  public void setOzoneConfiguration(OzoneConfiguration config) {
+    this.ozoneConfiguration = config;
+  }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 UPD42 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS59 MOV78 INS78 INS83 INS43 INS59 MOV78 MOV83 MOV43 INS42 MOV43 INS8 INS83 INS43 INS42 MOV44 INS43 INS8 INS78 INS39 INS42 INS44 INS78 INS83 INS39 INS42 INS44 MOV8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS41 INS42 UPD42 INS42 INS54 MOV41 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS42 INS42 INS57 INS32 INS8 INS12 INS42 INS7 INS42 INS43 INS42 INS42 INS25 INS44 INS8 INS22 INS42 UPD42 INS42 INS32 INS8 INS43 INS42 INS21 INS52 INS42 INS42 INS42 INS42 INS21 INS25 INS42 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS54 INS53 INS42 INS42 INS42 INS8 INS12 INS42 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS21 INS21 INS44 INS8 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS74 INS59 INS43 INS59 INS32 INS32 INS84 INS42 INS21 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL31 DEL42