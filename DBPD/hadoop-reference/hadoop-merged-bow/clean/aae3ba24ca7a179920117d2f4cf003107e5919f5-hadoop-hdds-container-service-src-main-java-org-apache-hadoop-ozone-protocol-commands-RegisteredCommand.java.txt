HDFS-13348. Ozone: Update IP and hostname in Datanode from SCM's response to the register call. Contributed by Shashikant Banerjee.

+  private String hostname;
+  private String ipAddress;
-                           final String clusterID) {
+      final String clusterID) {
+    this(error, datanodeUUID, clusterID, null, null);
+  }
+  public RegisteredCommand(final ErrorCode error, final String datanodeUUID,
+      final String clusterID, final String hostname, final String ipAddress) {
+    this.hostname = hostname;
+    this.ipAddress = ipAddress;
+   * Returns the hostname.
+   *
+   * @return - hostname
+   */
+  public String getHostName() {
+    return hostname;
+  }
+
+  /**
+   * Returns the ipAddress of the dataNode.
+   */
+  public String getIpAddress() {
+    return ipAddress;
+  }
+
+  /**
-    return SCMRegisteredCmdResponseProto.newBuilder()
-        .setClusterID(this.clusterID)
-        .setDatanodeUUID(this.datanodeUUID)
-        .setErrorCode(this.error)
-        .build().toByteArray();
+    SCMRegisteredCmdResponseProto.Builder builder =
+        SCMRegisteredCmdResponseProto.newBuilder()
+            .setClusterID(this.clusterID)
+            .setDatanodeUUID(this.datanodeUUID)
+            .setErrorCode(this.error);
+    if (hostname != null && ipAddress != null) {
+      builder.setHostname(hostname).setIpAddress(ipAddress);
+    }
+    return builder.build().toByteArray();
+    private String ipAddress;
+    private String hostname;
-      return new RegisteredCommand(response.getErrorCode(),
-          response.hasDatanodeUUID() ? response.getDatanodeUUID(): "",
-          response.hasClusterID() ? response.getClusterID(): "");
+      if (response.hasHostname() && response.hasIpAddress()) {
+        return new RegisteredCommand(response.getErrorCode(),
+            response.hasDatanodeUUID() ? response.getDatanodeUUID() : "",
+            response.hasClusterID() ? response.getClusterID() : "",
+            response.getHostname(), response.getIpAddress());
+      } else {
+        return new RegisteredCommand(response.getErrorCode(),
+            response.hasDatanodeUUID() ? response.getDatanodeUUID() : "",
+            response.hasClusterID() ? response.getClusterID() : "");
+      }
+     * sets the hostname.
+     */
+    public Builder setHostname(String hostname) {
+      this.hostname = hostname;
+      return this;
+    }
+
+    public Builder setIpAddress(String ipAddress) {
+      this.ipAddress = ipAddress;
+      return this;
+    }
+
+    /**
-      if ((this.error == ErrorCode.success) &&
-          (this.datanodeUUID == null || this.datanodeUUID.isEmpty()) ||
-          (this.clusterID == null || this.clusterID.isEmpty())) {
-        throw new IllegalArgumentException("On success, RegisteredCommand " +
-            "needs datanodeUUID and ClusterID.");
+      if ((this.error == ErrorCode.success) && (this.datanodeUUID == null
+          || this.datanodeUUID.isEmpty()) || (this.clusterID == null
+          || this.clusterID.isEmpty())) {
+        throw new IllegalArgumentException("On success, RegisteredCommand "
+            + "needs datanodeUUID and ClusterID.");
-
-      return new
-          RegisteredCommand(this.error, this.datanodeUUID, this.clusterID);
+      if (hostname != null && ipAddress != null) {
+        return new RegisteredCommand(this.error, this.datanodeUUID,
+            this.clusterID, this.hostname, this.ipAddress);
+      } else {
+        return new RegisteredCommand(this.error, this.datanodeUUID,
+            this.clusterID);
+      }

INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS44 INS44 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS23 INS23 INS31 INS31 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS17 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS21 INS65 INS65 INS42 INS41 INS65 INS42 INS41 INS60 INS25 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS42 INS42 INS7 INS7 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 MOV21 INS25 INS65 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS25 INS22 INS42 INS22 INS42 INS40 INS42 MOV32 INS27 INS27 INS21 INS27 INS8 MOV8 INS66 INS42 INS7 INS52 INS42 INS7 INS52 INS27 INS8 INS8 INS52 INS42 INS52 INS42 INS42 INS33 INS42 INS33 INS32 INS42 INS32 INS32 INS41 INS22 INS42 INS22 INS42 INS27 INS27 INS41 MOV41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS52 INS42 INS52 INS42 INS42 INS33 INS42 INS33 INS14 INS42 INS42 INS42 INS43 INS32 INS16 INS16 INS32 INS32 INS43 INS22 INS22 INS22 INS22 INS22 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42