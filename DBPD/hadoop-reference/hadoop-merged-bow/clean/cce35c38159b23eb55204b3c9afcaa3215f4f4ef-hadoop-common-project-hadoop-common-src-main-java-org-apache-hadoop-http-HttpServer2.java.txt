HADOOP-12097. Allow port range to be specified while starting webapp. Contributed by Varun Saxena.

+import org.apache.hadoop.conf.Configuration.IntegerRanges;
+  protected final IntegerRanges portRanges;
+    private IntegerRanges portRanges = null;
+    public Builder setPortRanges(IntegerRanges ranges) {
+      this.portRanges = ranges;
+      return this;
+    }
+
+    this.portRanges = b.portRanges;
+   * Bind listener by closing and opening the listener.
+   * @param listener
+   * @throws Exception
+   */
+  private static void bindListener(ServerConnector listener) throws Exception {
+    // jetty has a bug where you can't reopen a listener that previously
+    // failed to open w/o issuing a close first, even if the port is changed
+    listener.close();
+    listener.open();
+    LOG.info("Jetty bound to port " + listener.getLocalPort());
+  }
+
+  /**
+   * Create bind exception by wrapping the bind exception thrown.
+   * @param listener
+   * @param ex
+   * @return
+   */
+  private static BindException constructBindException(ServerConnector listener,
+      BindException ex) {
+    BindException be = new BindException("Port in use: "
+        + listener.getHost() + ":" + listener.getPort());
+    if (ex != null) {
+      be.initCause(ex);
+    }
+    return be;
+  }
+
+  /**
+   * Bind using single configured port. If findPort is true, we will try to bind
+   * after incrementing port till a free port is found.
+   * @param listener jetty listener.
+   * @param port port which is set in the listener.
+   * @throws Exception
+   */
+  private void bindForSinglePort(ServerConnector listener, int port)
+      throws Exception {
+    while (true) {
+      try {
+        bindListener(listener);
+        break;
+      } catch (BindException ex) {
+        if (port == 0 || !findPort) {
+          throw constructBindException(listener, ex);
+        }
+      }
+      // try the next port number
+      listener.setPort(++port);
+      Thread.sleep(100);
+    }
+  }
+
+  /**
+   * Bind using port ranges. Keep on looking for a free port in the port range
+   * and throw a bind exception if no port in the configured range binds.
+   * @param listener jetty listener.
+   * @param startPort initial port which is set in the listener.
+   * @throws Exception
+   */
+  private void bindForPortRange(ServerConnector listener, int startPort)
+      throws Exception {
+    BindException bindException = null;
+    try {
+      bindListener(listener);
+      return;
+    } catch (BindException ex) {
+      // Ignore exception.
+      bindException = ex;
+    }
+    for(Integer port : portRanges) {
+      if (port == startPort) {
+        continue;
+      }
+      Thread.sleep(100);
+      listener.setPort(port);
+      try {
+        bindListener(listener);
+        return;
+      } catch (BindException ex) {
+        // Ignore exception. Move to next port.
+        bindException = ex;
+      }
+    }
+    throw constructBindException(listener, bindException);
+  }
+
+  /**
-      while (true) {
-        // jetty has a bug where you can't reopen a listener that previously
-        // failed to open w/o issuing a close first, even if the port is changed
-        try {
-          listener.close();
-          listener.open();
-          LOG.info("Jetty bound to port " + listener.getLocalPort());
-          break;
-        } catch (BindException ex) {
-          if (port == 0 || !findPort) {
-            BindException be = new BindException("Port in use: "
-                + listener.getHost() + ":" + listener.getPort());
-            be.initCause(ex);
-            throw be;
-          }
-        }
-        // try the next port number
-        listener.setPort(++port);
-        Thread.sleep(100);
+      if (portRanges != null && port != 0) {
+        bindForPortRange(listener, port);
+      } else {
+        bindForSinglePort(listener, port);

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS23 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS43 MOV8 INS29 INS83 INS83 INS43 INS42 INS44 MOV44 MOV8 INS29 INS83 UPD42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 MOV29 INS39 INS42 MOV43 INS8 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 MOV61 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS70 INS53 INS70 INS42 INS42 INS33 INS42 INS43 INS42 INS21 INS41 INS7 INS66 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS27 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS8 INS12 INS44 INS42 INS8 INS32 MOV44 INS42 INS8 INS42 INS7 INS52 INS22 INS40 INS42 INS33 MOV21 INS42 INS42 INS33 INS21 INS41 INS44 INS8 INS43 INS42 INS25 INS21 INS21 INS54 INS42 INS42 INS42 MOV25 MOV60 INS25 INS22 INS42 INS52 INS42 INS8 INS32 INS43 INS42 INS21 INS42 INS27 INS8 INS32 INS32 INS8 INS12 INS27 INS8 INS8 INS52 INS42 INS21 INS10 INS44 INS42 INS42 INS42 INS7 INS42 INS42 INS18 INS42 INS42 INS34 INS42 INS42 INS42 INS21 INS41 INS44 INS8 INS27 INS27 INS21 INS21 INS32 INS43 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS33 INS42 INS34 INS32 INS32 INS42 INS42 INS42 INS8 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS42 DEL10 DEL42 DEL53 DEL42 DEL8 DEL70 DEL8