YARN-3901. Populate flow run data in the flow_run & flow activity tables (Vrushali C via sjlee)

+import java.util.SortedSet;
+import java.util.Map.Entry;
+import org.apache.hadoop.hbase.Tag;
+import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity;
+import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntityType;
+import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent;
+import org.apache.hadoop.yarn.server.metrics.ApplicationMetricsConstants;
+import org.apache.hadoop.yarn.server.timelineservice.storage.flow.AggregationCompactionDimension;
+import org.apache.hadoop.yarn.server.timelineservice.storage.flow.AggregationOperation;
+import org.apache.hadoop.yarn.server.timelineservice.storage.flow.Attribute;
+  /** milliseconds in one day */
+  public static final long MILLIS_ONE_DAY = 86400000L;
+
+  /**
+   * returns the timestamp of that day's start (which is midnight 00:00:00 AM)
+   * for a given input timestamp
+   *
+   * @param ts
+   * @return timestamp of that day's beginning (midnight)
+   */
+  public static long getTopOfTheDayTimestamp(long ts) {
+    long dayTimestamp = ts - (ts % MILLIS_ONE_DAY);
+    return dayTimestamp;
+  }
+
+  /**
+   * Combines the input array of attributes and the input aggregation operation
+   * into a new array of attributes.
+   *
+   * @param attributes
+   * @param aggOp
+   * @return array of combined attributes
+   */
+  public static Attribute[] combineAttributes(Attribute[] attributes,
+      AggregationOperation aggOp) {
+    int newLength = getNewLengthCombinedAttributes(attributes, aggOp);
+    Attribute[] combinedAttributes = new Attribute[newLength];
+
+    if (attributes != null) {
+      System.arraycopy(attributes, 0, combinedAttributes, 0, attributes.length);
+    }
+
+    if (aggOp != null) {
+      Attribute a2 = aggOp.getAttribute();
+      combinedAttributes[newLength - 1] = a2;
+    }
+    return combinedAttributes;
+  }
+
+  /**
+   * Returns a number for the new array size. The new array is the combination
+   * of input array of attributes and the input aggregation operation.
+   *
+   * @param attributes
+   * @param aggOp
+   * @return the size for the new array
+   */
+  private static int getNewLengthCombinedAttributes(Attribute[] attributes,
+      AggregationOperation aggOp) {
+    int oldLength = getAttributesLength(attributes);
+    int aggLength = getAppOpLength(aggOp);
+    return oldLength + aggLength;
+  }
+
+  private static int getAppOpLength(AggregationOperation aggOp) {
+    if (aggOp != null) {
+      return 1;
+    }
+    return 0;
+  }
+
+  private static int getAttributesLength(Attribute[] attributes) {
+    if (attributes != null) {
+      return attributes.length;
+    }
+    return 0;
+  }
+
+  /**
+   * checks if an application has finished
+   *
+   * @param te
+   * @return true if application has finished else false
+   */
+  public static boolean isApplicationFinished(TimelineEntity te) {
+    SortedSet<TimelineEvent> allEvents = te.getEvents();
+    if ((allEvents != null) && (allEvents.size() > 0)) {
+      TimelineEvent event = allEvents.last();
+      if (event.getId().equals(ApplicationMetricsConstants.FINISHED_EVENT_TYPE)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * get the time at which an app finished
+   *
+   * @param te
+   * @return true if application has finished else false
+   */
+  public static long getApplicationFinishedTime(TimelineEntity te) {
+    SortedSet<TimelineEvent> allEvents = te.getEvents();
+    if ((allEvents != null) && (allEvents.size() > 0)) {
+      TimelineEvent event = allEvents.last();
+      if (event.getId().equals(ApplicationMetricsConstants.FINISHED_EVENT_TYPE)) {
+        return event.getTimestamp();
+      }
+    }
+    return 0l;
+  }
+
+  /**
+   * Checks if the input TimelineEntity object is an ApplicationEntity.
+   *
+   * @param te
+   * @return true if input is an ApplicationEntity, false otherwise
+   */
+  public static boolean isApplicationEntity(TimelineEntity te) {
+    return te.getType().equals(TimelineEntityType.YARN_APPLICATION.toString());
+  }
+
+  /**
+   * Checks for the APPLICATION_CREATED event.
+   *
+   * @param te
+   * @return true is application event exists, false otherwise
+   */
+  public static boolean isApplicationCreated(TimelineEntity te) {
+    if (isApplicationEntity(te)) {
+      for (TimelineEvent event : te.getEvents()) {
+        if (event.getId()
+            .equals(ApplicationMetricsConstants.CREATED_EVENT_TYPE)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Returns the first seen aggregation operation as seen in the list of input
+   * tags or null otherwise
+   *
+   * @param tags
+   * @return AggregationOperation
+   */
+  public static AggregationOperation getAggregationOperationFromTagsList(
+      List<Tag> tags) {
+    for (AggregationOperation aggOp : AggregationOperation.values()) {
+      for (Tag tag : tags) {
+        if (tag.getType() == aggOp.getTagType()) {
+          return aggOp;
+        }
+      }
+    }
+    return null;
+  }
+
+  /**
+   * Creates a {@link Tag} from the input attribute.
+   *
+   * @param attribute
+   * @return Tag
+   */
+  public static Tag getTagFromAttribute(Entry<String, byte[]> attribute) {
+    // attribute could be either an Aggregation Operation or
+    // an Aggregation Dimension
+    // Get the Tag type from either
+    AggregationOperation aggOp = AggregationOperation
+        .getAggregationOperation(attribute.getKey());
+    if (aggOp != null) {
+      Tag t = new Tag(aggOp.getTagType(), attribute.getValue());
+      return t;
+    }
+
+    AggregationCompactionDimension aggCompactDim = AggregationCompactionDimension
+        .getAggregationCompactionDimension(attribute.getKey());
+    if (aggCompactDim != null) {
+      Tag t = new Tag(aggCompactDim.getTagType(), attribute.getValue());
+      return t;
+    }
+    return null;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS34 INS65 INS65 INS65 INS39 INS42 INS60 INS41 INS65 INS65 INS65 INS65 INS43 INS85 INS5 INS42 INS43 INS42 INS60 INS60 INS25 INS25 INS41 INS65 INS65 INS65 INS65 INS5 INS42 INS43 INS42 INS60 INS60 INS41 INS43 INS42 INS25 INS41 INS5 INS42 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS42 INS74 INS42 INS70 INS41 INS65 INS65 INS65 INS42 INS74 INS42 INS60 INS25 INS60 INS25 INS41 INS66 INS66 INS66 INS42 INS66 INS39 INS59 INS42 INS66 INS66 INS42 INS42 INS66 INS42 INS43 INS85 INS42 INS39 INS59 INS5 INS59 INS27 INS8 INS27 INS8 INS42 INS66 INS66 INS42 INS42 INS66 INS43 INS85 INS42 INS39 INS59 INS39 INS59 INS27 INS42 INS27 INS8 INS34 INS43 INS85 INS27 INS8 INS34 INS66 INS42 INS66 INS42 INS74 INS59 INS27 INS8 INS9 INS66 INS42 INS66 INS42 INS74 INS59 INS27 INS8 INS34 INS66 INS42 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS32 INS8 INS9 INS66 INS66 INS42 INS66 INS43 INS43 INS44 INS32 INS8 INS33 INS66 INS65 INS66 INS42 INS66 INS43 INS43 INS5 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS33 INS42 INS27 INS42 INS42 INS32 INS43 INS85 INS42 INS3 INS42 INS33 INS21 INS42 INS33 INS60 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS33 INS41 INS42 INS42 INS33 INS41 INS43 INS43 INS42 INS32 INS36 INS36 INS60 INS25 INS43 INS43 INS42 INS32 INS36 INS36 INS60 INS25 INS32 INS42 INS32 INS42 INS42 INS70 INS42 INS42 INS43 INS42 INS42 INS42 INS70 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS32 INS42 INS33 INS60 INS41 INS42 INS42 INS32 INS42 INS33 INS60 INS41 INS42 INS36 INS42 INS42 INS42 INS42 INS5 INS42 INS32 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS27 INS27 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS27 INS27 INS43 INS59 INS32 INS8 INS42 INS42 INS40 INS42 INS44 INS32 INS8 INS42 INS44 INS42 INS8 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS27 INS43 INS85 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS42 INS32 INS2 INS42 INS42 INS33 INS32 INS34 INS42 INS42 INS32 INS32 INS42 INS40 INS41 INS42 INS33 INS32 INS34 INS42 INS42 INS32 INS32 INS42 INS40 INS41 INS43 INS42 INS42 INS42 INS25 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS42 INS27 INS8 INS43 INS32 INS32 INS43 INS32 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS40 INS41 INS32 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42