HDFS-7280. Use netty 4 in WebImageViewer. Contributed by Haohui Mai.

+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.group.ChannelGroup;
+import io.netty.handler.codec.http.DefaultFullHttpResponse;
+import io.netty.handler.codec.http.DefaultHttpResponse;
+import static io.netty.handler.codec.http.HttpResponseStatus.*;
+
+import io.netty.handler.codec.http.HttpMethod;
+import io.netty.handler.codec.http.HttpRequest;
+import io.netty.handler.codec.http.HttpResponseStatus;
+import static io.netty.handler.codec.http.HttpVersion.*;
+import io.netty.handler.codec.http.QueryStringDecoder;
-import org.apache.hadoop.ipc.RemoteException;
-import org.jboss.netty.channel.ChannelFuture;
-import org.jboss.netty.channel.ChannelFutureListener;
-import org.jboss.netty.channel.ChannelHandlerContext;
-import org.jboss.netty.channel.MessageEvent;
-import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
-import org.jboss.netty.handler.codec.http.DefaultHttpResponse;
-import org.jboss.netty.handler.codec.http.HttpHeaders;
-import org.jboss.netty.handler.codec.http.HttpMethod;
-import org.jboss.netty.handler.codec.http.HttpRequest;
-import org.jboss.netty.handler.codec.http.HttpResponse;
-import org.jboss.netty.handler.codec.http.HttpResponseStatus;
-import org.jboss.netty.handler.codec.http.HttpVersion;
-import org.jboss.netty.handler.codec.http.QueryStringDecoder;
+import org.apache.hadoop.hdfs.web.resources.ExceptionHandler;
-import javax.management.Query;
-class FSImageHandler extends SimpleChannelUpstreamHandler {
+class FSImageHandler extends SimpleChannelInboundHandler<HttpRequest> {
+  private final ChannelGroup activeChannels;
-  FSImageHandler(FSImageLoader image) throws IOException {
+  @Override
+  public void channelActive(ChannelHandlerContext ctx) throws Exception {
+    activeChannels.add(ctx.channel());
+  }
+
+  FSImageHandler(FSImageLoader image, ChannelGroup activeChannels) throws IOException {
+    this.activeChannels = activeChannels;
-  public void messageReceived(
-      ChannelHandlerContext ctx, MessageEvent e) throws Exception {
-    ChannelFuture future = e.getFuture();
-    try {
-      future = handleOperation(e);
-    } finally {
-      future.addListener(ChannelFutureListener.CLOSE);
-    }
-  }
-
-  private ChannelFuture handleOperation(MessageEvent e)
-      throws IOException {
-    HttpRequest request = (HttpRequest) e.getMessage();
-    HttpResponse response = new DefaultHttpResponse(
-            HttpVersion.HTTP_1_1, HttpResponseStatus.OK);
-    response.setHeader(HttpHeaders.Names.CONTENT_TYPE, "application/json");
-
+  public void channelRead0(ChannelHandlerContext ctx, HttpRequest request)
+          throws Exception {
-      response.setStatus(HttpResponseStatus.METHOD_NOT_ALLOWED);
-      return e.getChannel().write(response);
+      DefaultHttpResponse resp = new DefaultHttpResponse(HTTP_1_1,
+        METHOD_NOT_ALLOWED);
+      resp.headers().set("Connection", "close");
+      ctx.write(resp).addListener(ChannelFutureListener.CLOSE);
+      return;
-    String content;
-    String path = null;
-    try {
-      path = getPath(decoder);
-      if ("GETFILESTATUS".equals(op)) {
-        content = image.getFileStatus(path);
-      } else if ("LISTSTATUS".equals(op)) {
-        content = image.listStatus(path);
-      } else if ("GETACLSTATUS".equals(op)) {
-        content = image.getAclStatus(path);
-      } else {
-        throw new IllegalArgumentException("Invalid value for webhdfs parameter" + " \"op\"");
-      }
-    } catch (IllegalArgumentException ex) {
-      response.setStatus(HttpResponseStatus.BAD_REQUEST);
-      content = JsonUtil.toJsonString(ex);
-    } catch (FileNotFoundException ex) {
-      response.setStatus(HttpResponseStatus.NOT_FOUND);
-      content = JsonUtil.toJsonString(ex);
-    } catch (Exception ex) {
-      content = JsonUtil.toJsonString(ex);
+    final String content;
+    String path = getPath(decoder);
+    if ("GETFILESTATUS".equals(op)) {
+      content = image.getFileStatus(path);
+    } else if ("LISTSTATUS".equals(op)) {
+      content = image.listStatus(path);
+    } else if ("GETACLSTATUS".equals(op)) {
+      content = image.getAclStatus(path);
+    } else {
+      throw new IllegalArgumentException("Invalid value for webhdfs parameter" + " \"op\"");
-    HttpHeaders.setContentLength(response, content.length());
-    e.getChannel().write(response);
-    ChannelFuture future = e.getChannel().write(content);
+    LOG.info("op=" + op + " target=" + path);
-    LOG.info(response.getStatus().getCode() + " method="
-        + request.getMethod().getName() + " op=" + op + " target=" + path);
+    DefaultFullHttpResponse resp = new DefaultFullHttpResponse(
+            HTTP_1_1, HttpResponseStatus.OK,
+            Unpooled.wrappedBuffer(content.getBytes()));
+    resp.headers().set("Content-Type", "application/json");
+    resp.headers().set("Content-Length", resp.content().readableBytes());
+    resp.headers().set("Connection", "close");
+    ctx.write(resp).addListener(ChannelFutureListener.CLOSE);
+  }
-    return future;
+  @Override
+  public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
+    ctx.flush();
+  }
+
+  @Override
+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)
+          throws Exception {
+    Exception e = cause instanceof Exception ? (Exception) cause : new
+      Exception(cause);
+    final String output = JsonUtil.toJsonString(e);
+    ByteBuf content = Unpooled.wrappedBuffer(output.getBytes());
+    final DefaultFullHttpResponse resp = new DefaultFullHttpResponse(
+            HTTP_1_1, INTERNAL_SERVER_ERROR, content);
+
+    resp.headers().set("Content-Type", "application/json");
+    if (e instanceof IllegalArgumentException) {
+      resp.setStatus(BAD_REQUEST);
+    } else if (e instanceof FileNotFoundException) {
+      resp.setStatus(NOT_FOUND);
+    }
+
+    resp.headers().set("Content-Length", resp.content().readableBytes());
+    resp.headers().set("Connection", "close");
+    ctx.write(resp).addListener(ChannelFutureListener.CLOSE);
-    Map<String, List<String>> parameters = decoder.getParameters();
+    Map<String, List<String>> parameters = decoder.parameters();
-    String path = decoder.getPath();
+    String path = decoder.path();

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS74 INS23 INS31 INS31 INS31 INS31 INS43 MOV43 INS83 INS83 INS43 INS59 MOV78 MOV83 MOV39 UPD42 MOV42 MOV44 INS43 INS8 INS44 INS78 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS21 INS43 INS42 INS21 INS42 INS43 INS42 MOV43 INS42 INS25 MOV60 MOV60 MOV60 INS60 MOV25 INS21 INS60 MOV21 MOV21 INS21 INS21 INS42 INS43 UPD42 MOV42 INS42 MOV21 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 MOV21 INS25 INS21 INS21 INS21 INS32 INS42 INS7 UPD42 MOV42 MOV27 INS8 INS83 MOV43 INS59 INS32 INS43 MOV59 INS32 INS32 INS42 INS42 INS42 MOV43 INS59 INS83 INS43 INS59 INS43 INS59 INS83 INS43 INS59 INS62 INS8 INS25 INS32 INS32 INS32 INS42 INS42 INS32 INS22 INS42 MOV60 MOV21 MOV21 INS41 INS42 MOV32 INS42 INS42 INS27 UPD42 MOV42 UPD42 INS14 INS32 UPD42 INS45 INS32 UPD42 INS45 INS32 MOV32 INS42 INS45 INS45 INS32 INS42 INS40 UPD42 UPD42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 INS45 INS45 INS42 MOV43 INS21 INS62 INS8 MOV32 UPD42 MOV42 INS45 INS32 INS32 INS42 INS45 INS45 INS32 INS42 INS40 INS42 INS42 INS52 INS42 UPD43 INS32 INS45 INS42 INS45 INS42 INS43 INS42 INS40 INS32 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 UPD42 INS42 MOV42 UPD42 MOV42 INS62 INS11 INS14 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS43 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 MOV43 INS21 UPD42 UPD42 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 INS45 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL43 DEL40 DEL40 DEL42 DEL32 DEL7 DEL32 DEL11 DEL40 DEL40 DEL40 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL8 DEL54 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL60 DEL32 DEL41 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL44 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL32 DEL45 DEL32 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31