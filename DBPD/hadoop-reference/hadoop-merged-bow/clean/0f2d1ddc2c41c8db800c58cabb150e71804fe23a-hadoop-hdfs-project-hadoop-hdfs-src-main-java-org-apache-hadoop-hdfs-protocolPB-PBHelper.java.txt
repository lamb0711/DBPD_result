HDFS-10954. [SPS]: Provide mechanism to send blocks movement result back to NN from coordinator DN. Contributed by Rakesh R

+import org.apache.hadoop.hdfs.protocol.proto.DatanodeProtocolProtos.BlocksStorageMovementResultProto;
+import org.apache.hadoop.hdfs.server.protocol.BlocksStorageMovementResult;
+import org.apache.hadoop.hdfs.server.protocol.BlocksStorageMovementResult.Status;
+  public static BlocksStorageMovementResult[] convertBlksMovResults(
+      List<BlocksStorageMovementResultProto> protos) {
+    BlocksStorageMovementResult[] results =
+        new BlocksStorageMovementResult[protos.size()];
+    for (int i = 0; i < protos.size(); i++) {
+      BlocksStorageMovementResultProto resultProto = protos.get(i);
+      BlocksStorageMovementResult.Status status;
+      switch (resultProto.getStatus()) {
+      case SUCCESS:
+        status = Status.SUCCESS;
+        break;
+      case FAILURE:
+        status = Status.FAILURE;
+        break;
+      default:
+        throw new AssertionError("Unknown status: " + resultProto.getStatus());
+      }
+      results[i] = new BlocksStorageMovementResult(resultProto.getTrackID(),
+          status);
+    }
+    return results;
+  }
+
+  public static List<BlocksStorageMovementResultProto> convertBlksMovResults(
+      BlocksStorageMovementResult[] blocksMovementResults) {
+    List<BlocksStorageMovementResultProto> blocksMovementResultsProto =
+        new ArrayList<>();
+    BlocksStorageMovementResultProto.Builder builder =
+        BlocksStorageMovementResultProto.newBuilder();
+    for (int i = 0; i < blocksMovementResults.length; i++) {
+      BlocksStorageMovementResult report = blocksMovementResults[i];
+      builder.setTrackID(report.getTrackId());
+      BlocksStorageMovementResultProto.Status status;
+      switch (report.getStatus()) {
+      case SUCCESS:
+        status = BlocksStorageMovementResultProto.Status.SUCCESS;
+        break;
+      case FAILURE:
+        status = BlocksStorageMovementResultProto.Status.FAILURE;
+        break;
+      default:
+        throw new AssertionError("Unknown status: " + report.getStatus());
+      }
+      builder.setStatus(status);
+      blocksMovementResultsProto.add(builder.build());
+    }
+    return blocksMovementResultsProto;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS43 INS85 INS74 INS42 INS60 INS24 INS41 INS43 INS43 INS5 INS42 INS60 INS60 INS24 INS41 INS42 INS43 INS43 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS43 INS85 INS74 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS50 INS21 INS42 INS43 INS43 INS42 INS14 INS40 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS60 INS50 INS21 INS21 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS7 INS42 INS42 INS74 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS43 INS59 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS32 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS7 INS42 INS7 INS14 INS2 INS14 INS43 INS42 INS42 INS2 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS7 INS42 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS43 INS27 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS43 INS27 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42