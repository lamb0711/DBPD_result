Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.

-import java.io.IOException;
-import java.io.StringWriter;
+import java.util.Collections;
-import com.google.gson.stream.JsonWriter;
-
-  private NavigableMap<Long, Resource> cumulativeCapacity =
+  @SuppressWarnings("checkstyle:visibilitymodifier")
+  protected NavigableMap<Long, Resource> cumulativeCapacity =
-  private final Lock readLock = readWriteLock.readLock();
+  @SuppressWarnings("checkstyle:visibilitymodifier")
+  protected final Lock readLock = readWriteLock.readLock();
-   * Returns the JSON string representation of the current resources allocated
-   * over time.
-   *
-   * @return the JSON string representation of the current resources allocated
-   *         over time
-   */
-  public String toMemJSONString() {
-    StringWriter json = new StringWriter();
-    JsonWriter jsonWriter = new JsonWriter(json);
-    readLock.lock();
-    try {
-      jsonWriter.beginObject();
-      // jsonWriter.name("timestamp").value("resource");
-      for (Map.Entry<Long, Resource> r : cumulativeCapacity.entrySet()) {
-        jsonWriter.name(r.getKey().toString()).value(r.getValue().toString());
-      }
-      jsonWriter.endObject();
-      jsonWriter.close();
-      return json.toString();
-    } catch (IOException e) {
-      // This should not happen
-      return "";
-    } finally {
-      readLock.unlock();
-    }
-  }
-
-  /**
-      return cumulativeCapacity;
+      return Collections.unmodifiableNavigableMap(cumulativeCapacity);
-          && (Resources.fitsIn(val, ZERO_RESOURCE) &&
-              !Resources.equals(val, ZERO_RESOURCE))) {
+          && (Resources.fitsIn(val, ZERO_RESOURCE)
+              && !Resources.equals(val, ZERO_RESOURCE))) {
+  /**
+   * Get a {@link RLESparseResourceAllocation} view of the {@link Resource}
+   * allocations between the specified start and end times.
+   *
+   * @param start the time from which the {@link Resource} allocations are
+   *          required
+   * @param end the time upto which the {@link Resource} allocations are
+   *          required
+   * @return the overlapping allocations
+   */
-
-
-
+  }
+  /**
+   * This method shifts all the timestamp of the {@link Resource} entries by the
+   * specified "delta".
+   *
+   * @param delta the time by which to shift the {@link Resource} allocations
+   */
+  public void shift(long delta) {
+    writeLock.lock();
+    try {
+      TreeMap<Long, Resource> newCum = new TreeMap<>();
+      long start;
+      for (Map.Entry<Long, Resource> entry : cumulativeCapacity.entrySet()) {
+        if (delta > 0) {
+          start = (entry.getKey() == Long.MAX_VALUE) ? Long.MAX_VALUE
+              : entry.getKey() + delta;
+        } else {
+          start = (entry.getKey() == Long.MIN_VALUE) ? Long.MIN_VALUE
+              : entry.getKey() + delta;
+        }
+        newCum.put(start, entry.getValue());
+      }
+      cumulativeCapacity = newCum;
+    } finally {
+      writeLock.unlock();
+    }
-   * search. Maximum resource allocation across tick, tick + period,
-   * tick + 2 * period,..., tick + n * period .. is returned.
+   * search. Maximum resource allocation across tick, tick + period, tick + 2 *
+   * period,..., tick + n * period .. is returned.
-    if (!cumulativeCapacity.isEmpty()) {
-      Long lastKey = cumulativeCapacity.lastKey();
-      for (long t = tick; t <= lastKey; t = t + period) {
-        maxCapacity = Resources.componentwiseMax(maxCapacity,
-            cumulativeCapacity.floorEntry(t).getValue());
+    readLock.lock();
+    try {
+      if (!cumulativeCapacity.isEmpty()) {
+        Long lastKey = cumulativeCapacity.lastKey();
+        for (long t = tick; t <= lastKey; t = t + period) {
+          maxCapacity = Resources.componentwiseMax(maxCapacity,
+              cumulativeCapacity.floorEntry(t).getValue());
+        }
+      return maxCapacity;
+    } finally {
+      readLock.unlock();
-    return maxCapacity;
-    Resource minCapacity = Resource.newInstance(
-        Integer.MAX_VALUE, Integer.MAX_VALUE);
+    Resource minCapacity =
+        Resource.newInstance(Integer.MAX_VALUE, Integer.MAX_VALUE);
-        this.getRangeOverlapping(start, end).getCumulative();
+        getRangeOverlapping(start, end).getCumulative();
-          minCapacity = Resources.componentwiseMin(minCapacity,
-              entry.getValue());
+          minCapacity =
+              Resources.componentwiseMin(minCapacity, entry.getValue());

MOV31 UPD40 INS79 UPD83 INS79 UPD83 INS29 INS39 INS42 INS44 INS8 INS42 INS45 INS42 INS45 INS65 INS65 INS65 INS65 UPD65 INS39 INS42 INS21 INS54 MOV60 MOV21 INS54 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS66 UPD66 INS65 INS66 UPD66 INS42 UPD66 INS65 UPD66 INS32 INS8 INS8 UPD66 UPD66 MOV8 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS70 MOV21 INS21 INS32 INS74 MOV59 INS39 INS59 MOV44 MOV32 INS8 INS7 INS32 INS42 INS42 INS42 INS43 INS43 INS43 UPD42 INS42 UPD42 INS25 MOV21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS74 INS27 INS8 INS8 INS43 INS42 INS34 MOV21 MOV21 UPD42 INS42 INS42 INS32 UPD42 MOV42 INS7 INS7 UPD42 MOV42 INS42 INS42 INS16 INS42 INS16 INS36 INS40 INS27 INS36 INS40 INS27 INS27 INS32 INS42 INS27 INS32 INS42 INS32 INS40 INS42 INS42 INS32 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL43 DEL60 DEL8 DEL70 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL41 DEL8 DEL12 DEL54 DEL52