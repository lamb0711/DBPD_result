Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1548386 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.http.HttpConfig;
+import org.apache.hadoop.ha.HAServiceProtocol;
+import org.apache.hadoop.yarn.conf.HAUtil;
-  private ResourceManager resourceManager;
+  private ResourceManager[] resourceManagers;
-   * @param noOfNodeManagers the number of node managers in the cluster
+   * @param numResourceManagers the number of resource managers in the cluster
+   * @param numNodeManagers the number of node managers in the cluster
-  public MiniYARNCluster(String testName, int noOfNodeManagers,
-                         int numLocalDirs, int numLogDirs) {
+  public MiniYARNCluster(
+      String testName, int numResourceManagers, int numNodeManagers,
+      int numLocalDirs, int numLogDirs) {
-    resourceManagerWrapper = new ResourceManagerWrapper();
-    addService(resourceManagerWrapper);
-    nodeManagers = new CustomNodeManager[noOfNodeManagers];
-    for(int index = 0; index < noOfNodeManagers; index++) {
+    resourceManagers = new ResourceManager[numResourceManagers];
+    for (int i = 0; i < numResourceManagers; i++) {
+      resourceManagers[i] = new ResourceManager();
+      addService(new ResourceManagerWrapper(i));
+    }
+    nodeManagers = new CustomNodeManager[numNodeManagers];
+    for(int index = 0; index < numNodeManagers; index++) {
-  
-  @Override
+
+  /**
+   * @param testName name of the test
+   * @param numNodeManagers the number of node managers in the cluster
+   * @param numLocalDirs the number of nm-local-dirs per nodemanager
+   * @param numLogDirs the number of nm-log-dirs per nodemanager
+   */
+  public MiniYARNCluster(String testName, int numNodeManagers,
+                         int numLocalDirs, int numLogDirs) {
+    this(testName, 1, numNodeManagers, numLocalDirs, numLogDirs);
+  }
+
+    @Override
-    super.serviceInit(conf instanceof YarnConfiguration ? conf
-                                                        : new YarnConfiguration(
-                                                          conf));
+    if (resourceManagers.length > 1) {
+      conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);
+
+      StringBuilder rmIds = new StringBuilder();
+      for (int i = 0; i < resourceManagers.length; i++) {
+        if (i != 0) {
+          rmIds.append(",");
+        }
+        rmIds.append("rm" + i);
+      }
+      conf.set(YarnConfiguration.RM_HA_IDS, rmIds.toString());
+    }
+    super.serviceInit(
+        conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf));
+  /**
+   * In a HA cluster, go through all the RMs and find the Active RM. If none
+   * of them are active, wait upto 5 seconds for them to transition to Active.
+   *
+   * In an non-HA cluster, return the index of the only RM.
+   *
+   * @return index of the active RM
+   */
+  @InterfaceAudience.Private
+  @VisibleForTesting
+  int getActiveRMIndex() {
+    if (resourceManagers.length == 1) {
+      return 0;
+    }
+
+    int numRetriesForRMBecomingActive = 5;
+    while (numRetriesForRMBecomingActive-- > 0) {
+      for (int i = 0; i < resourceManagers.length; i++) {
+        try {
+          if (HAServiceProtocol.HAServiceState.ACTIVE ==
+              resourceManagers[i].getRMContext().getRMAdminService()
+                  .getServiceStatus().getState()) {
+            return i;
+          }
+        } catch (IOException e) {
+          throw new YarnRuntimeException("Couldn't read the status of " +
+              "a ResourceManger in the HA ensemble.", e);
+        }
+      }
+      try {
+        Thread.sleep(1000);
+      } catch (InterruptedException e) {
+        throw new YarnRuntimeException("Interrupted while waiting for one " +
+            "of the ResourceManagers to become active");
+      }
+    }
+    return -1;
+  }
+
+  /**
+   * @return the active {@link ResourceManager} of the cluster,
+   * null if none of them are active.
+   */
-    return this.resourceManager;
+    int activeRMIndex = getActiveRMIndex();
+    return activeRMIndex == -1
+        ? null
+        : this.resourceManagers[getActiveRMIndex()];
+  }
+
+  public ResourceManager getResourceManager(int i) {
+    return this.resourceManagers[i];
-    public ResourceManagerWrapper() {
-      super(ResourceManagerWrapper.class.getName());
+    private int index;
+
+    public ResourceManagerWrapper(int i) {
+      super(ResourceManagerWrapper.class.getName() + "_" + i);
+      index = i;
+    }
+
+    private void setNonHARMConfiguration(Configuration conf) {
+      String hostname = MiniYARNCluster.getHostname();
+      conf.set(YarnConfiguration.RM_ADDRESS, hostname + ":0");
+      conf.set(YarnConfiguration.RM_ADMIN_ADDRESS, hostname + ":0");
+      conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, hostname + ":0");
+      conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, hostname + ":0");
+      WebAppUtils.setRMWebAppHostnameAndPort(conf, hostname, 0);
+    }
+
+    private void setHARMConfiguration(Configuration conf) {
+      String rmId = "rm" + index;
+      String hostname = MiniYARNCluster.getHostname();
+      conf.set(YarnConfiguration.RM_HA_ID, rmId);
+      for (String confKey : YarnConfiguration.RM_RPC_ADDRESS_CONF_KEYS) {
+        conf.set(HAUtil.addSuffix(confKey, rmId), hostname + ":0");
+      }
-        // pick free random ports.
-        String hostname = MiniYARNCluster.getHostname();
-        conf.set(YarnConfiguration.RM_ADDRESS, hostname + ":0");
-        conf.set(YarnConfiguration.RM_ADMIN_ADDRESS, hostname + ":0");
-        conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, hostname + ":0");
-        conf.set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, hostname + ":0");
-        WebAppUtils.setRMWebAppHostnameAndPort(conf, hostname, 0);
+        if (HAUtil.isHAEnabled(conf)) {
+          setHARMConfiguration(conf);
+        } else {
+          setNonHARMConfiguration(conf);
+        }
-      resourceManager = new ResourceManager() {
-        @Override
-        protected void doSecureLogin() throws IOException {
-          // Don't try to login using keytab in the testcase.
-        };
-      };
-      resourceManager.init(conf);
-      resourceManager.getRMContext().getDispatcher().register(RMAppAttemptEventType.class, 
+      resourceManagers[index].init(conf);
+      resourceManagers[index].getRMContext().getDispatcher().register
+          (RMAppAttemptEventType.class,
-            resourceManager.start();
-          };
+            resourceManagers[index].start();
+          }
-        while (resourceManager.getServiceState() == STATE.INITED
+        while (resourceManagers[index].getServiceState() == STATE.INITED
-        if (resourceManager.getServiceState() != STATE.STARTED) {
+        if (resourceManagers[index].getServiceState() != STATE.STARTED) {
-                  + resourceManager.getServiceState());
+                  + resourceManagers[index].getServiceState());
-      if (resourceManager != null) {
+      if (resourceManagers[index] != null) {
-        resourceManager.stop();
+        resourceManagers[index].stop();
-          };
+          }
-  
+
-    };
+    }
-          final ResourceTrackerService rt = resourceManager
-              .getResourceTrackerService();
+          final ResourceTrackerService rt =
+              getResourceManager().getResourceTrackerService();
-              NodeHeartbeatResponse response = recordFactory.newRecordInstance(
-                  NodeHeartbeatResponse.class);
+              NodeHeartbeatResponse response;
-              RegisterNodeManagerResponse response = recordFactory.
-                  newRecordInstance(RegisterNodeManagerResponse.class);
+              RegisterNodeManagerResponse response;
-        };
+        }
-        protected void stopRMProxy() {
-          return;
-        }
+        protected void stopRMProxy() { }
-    };
+    }

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS31 INS31 INS31 INS5 INS29 INS44 MOV29 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS8 INS29 INS78 INS78 INS39 INS42 INS8 INS29 MOV43 INS83 MOV43 INS42 INS44 INS8 INS23 INS31 INS31 INS43 INS85 UPD42 MOV65 INS65 INS65 INS65 INS65 INS39 INS42 UPD42 INS21 INS24 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS17 INS25 MOV21 INS65 INS65 INS40 INS42 INS25 INS60 INS61 INS41 INS65 INS60 INS39 INS42 INS41 INS83 INS39 INS59 INS44 INS83 INS39 INS42 INS44 MOV8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS7 INS58 INS27 INS37 INS8 INS42 INS66 UPD42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS8 INS66 INS66 INS66 INS66 INS27 INS8 INS39 INS59 INS27 INS8 INS38 INS66 INS65 INS66 INS66 INS39 INS59 INS16 INS2 INS42 INS39 INS42 INS21 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS70 INS25 INS42 INS3 INS39 INS59 INS42 INS42 INS42 MOV21 MOV21 UPD42 INS40 INS34 INS21 INS60 INS24 INS21 INS40 INS34 INS41 INS42 INS34 INS37 INS34 INS24 INS54 INS34 INS42 INS42 INS32 INS27 INS33 INS2 INS22 INS42 INS27 INS7 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS44 INS40 INS8 MOV38 INS8 INS5 INS42 INS42 INS34 INS7 INS32 UPD42 INS32 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS34 INS42 INS58 INS27 INS37 INS8 INS8 INS12 INS42 INS42 INS38 INS22 INS32 INS52 INS42 MOV32 INS45 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS43 INS42 INS21 INS25 INS2 INS2 INS43 INS85 INS2 INS14 INS42 MOV14 INS42 INS42 INS40 INS9 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS21 INS42 INS42 INS40 INS32 INS39 INS59 INS42 INS40 INS42 INS54 INS21 INS44 INS8 INS34 MOV52 UPD42 MOV42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS43 INS42 INS34 INS27 INS8 INS32 INS42 INS42 INS42 INS34 INS8 INS12 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS21 INS21 INS2 INS2 INS42 INS42 INS34 INS21 INS42 INS42 INS27 INS25 INS44 INS8 INS42 INS42 INS34 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS2 INS42 INS42 INS32 INS45 INS42 INS27 INS8 MOV43 INS42 INS53 INS43 INS27 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS43 INS42 INS42 INS45 INS40 INS32 INS41 INS14 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS27 INS42 INS2 INS32 INS32 INS42 INS42 INS45 INS45 INS42 INS42 UPD42 MOV42 INS32 INS42 INS2 INS2 INS42 INS42 INS42 MOV43 MOV43 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL7 DEL8 DEL22 DEL25 DEL42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL8 DEL31 DEL1 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL57 DEL32 DEL42 DEL43 DEL42 DEL42 DEL57 DEL32 DEL41