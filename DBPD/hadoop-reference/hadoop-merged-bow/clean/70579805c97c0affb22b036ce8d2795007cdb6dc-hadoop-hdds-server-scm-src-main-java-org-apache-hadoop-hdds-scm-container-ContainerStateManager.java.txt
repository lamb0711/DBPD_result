HDDS-1148. After allocating container, we are not adding to container DB.



-  private final int numContainerPerOwnerInPipeline;
-    this.numContainerPerOwnerInPipeline = configuration
-        .getInt(ScmConfigKeys.OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT,
-            ScmConfigKeys.OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT_DEFAULT);
-  /**
-   * Return a container matching the attributes specified.
-   *
-   * @param size            - Space needed in the Container.
-   * @param owner           - Owner of the container - A specific nameservice.
-   * @param pipelineManager - Pipeline Manager
-   * @param pipeline        - Pipeline from which container needs to be matched
-   * @return ContainerInfo, null if there is no match found.
-   */
-  ContainerInfo getMatchingContainer(final long size, String owner,
-      PipelineManager pipelineManager, Pipeline pipeline) throws IOException {
-
-    NavigableSet<ContainerID> containerIDs =
-        pipelineManager.getContainersInPipeline(pipeline.getId());
-    if (containerIDs == null) {
-      LOG.error("Container list is null for pipeline=", pipeline.getId());
-      return null;
-    }
-
-    getContainers(containerIDs, owner);
-    if (containerIDs.size() < numContainerPerOwnerInPipeline) {
-      synchronized (pipeline) {
-        // TODO: #CLUTIL Maybe we can add selection logic inside synchronized
-        // as well
-        containerIDs = getContainers(
-            pipelineManager.getContainersInPipeline(pipeline.getId()), owner);
-        if (containerIDs.size() < numContainerPerOwnerInPipeline) {
-          ContainerInfo containerInfo =
-              allocateContainer(pipelineManager, owner, pipeline);
-          lastUsedMap.put(new ContainerState(owner, pipeline.getId()),
-              containerInfo.containerID());
-          return containerInfo;
-        }
-      }
-    }
-
-    ContainerInfo containerInfo =
-        getMatchingContainer(size, owner, pipeline.getId(), containerIDs);
-    if (containerInfo == null) {
-      synchronized (pipeline) {
-        containerInfo =
-            allocateContainer(pipelineManager, owner, pipeline);
-        lastUsedMap.put(new ContainerState(owner, pipeline.getId()),
-            containerInfo.containerID());
-      }
-    }
-    // TODO: #CLUTIL cleanup entries in lastUsedMap
-    return containerInfo;
-  }
-
-          final ContainerState key = new ContainerState(owner, pipelineID);
-          lastUsedMap.put(key, containerInfo.containerID());
-  private NavigableSet<ContainerID> getContainers(
-      NavigableSet<ContainerID> containerIDs, String owner) {
-    for (ContainerID cid : containerIDs) {
-      try {
-        if (!getContainer(cid).getOwner().equals(owner)) {
-          containerIDs.remove(cid);
-        }
-      } catch (ContainerNotFoundException e) {
-        LOG.error("Could not find container info for container id={} {}", cid,
-            e);
-        containerIDs.remove(cid);
-      }
-    }
-    return containerIDs;
-  }
+
+  /**
+   * Update the lastUsedmap to update with ContainerState and containerID.
+   * @param pipelineID
+   * @param containerID
+   * @param owner
+   */
+  public synchronized void updateLastUsedMap(PipelineID pipelineID,
+      ContainerID containerID, String owner) {
+    lastUsedMap.put(new ContainerState(owner, pipelineID),
+        containerID);
+  }
+

MOV31 INS83 INS83 INS39 INS42 MOV44 MOV44 INS8 UPD43 UPD42 UPD42 MOV21 UPD66 UPD42 UPD42 UPD42 UPD42 MOV14 MOV42 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL51 DEL8 DEL25 DEL42 DEL41 DEL8