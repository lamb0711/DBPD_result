HDFS-7090. Use unbuffered writes when persisting in-memory replicas. Contributed by Xiaoyu Yao.

+import java.io.FileNotFoundException;
+   * Copies a file (usually large) to a new location using native unbuffered IO.
+   * <p>
+   * This method copies the contents of the specified source file
+   * to the specified destination file using OS specific unbuffered IO.
+   * The goal is to avoid churning the file system buffer cache when copying
+   * large files. TheFileUtils#copyLarge function from apache-commons-io library
+   * can be used to achieve this with an internal memory buffer but is less
+   * efficient than the native unbuffered APIs such as sendfile() in Linux and
+   * CopyFileEx() in Windows wrapped in {@link NativeIO#copyFileUnbuffered}.
+   *
+   * The directory holding the destination file is created if it does not exist.
+   * If the destination file exists, then this method will delete it first.
+   * <p>
+   * <strong>Note:</strong> Setting <code>preserveFileDate</code> to
+   * {@code true} tries to preserve the file's last modified
+   * date/times using {@link File#setLastModified(long)}, however it is
+   * not guaranteed that the operation will succeed.
+   * If the modification operation fails, no indication is provided.
+   *
+   * @param srcFile  an existing file to copy, must not be {@code null}
+   * @param destFile  the new file, must not be {@code null}
+   * @param preserveFileDate  true if the file date of the copy
+   *  should be the same as the original
+   *
+   * @throws NullPointerException if source or destination is {@code null}
+   * @throws IOException if source or destination is invalid
+   * @throws IOException if an IO error occurs during copying
+   */
+  public static void nativeCopyFileUnbuffered(File srcFile, File destFile,
+      boolean preserveFileDate) throws IOException {
+    if (srcFile == null) {
+      throw new NullPointerException("Source must not be null");
+    }
+    if (destFile == null) {
+      throw new NullPointerException("Destination must not be null");
+    }
+    if (srcFile.exists() == false) {
+      throw new FileNotFoundException("Source '" + srcFile + "' does not exist");
+    }
+    if (srcFile.isDirectory()) {
+      throw new IOException("Source '" + srcFile + "' exists but is a directory");
+    }
+    if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {
+      throw new IOException("Source '" + srcFile + "' and destination '" +
+          destFile + "' are the same");
+    }
+    File parentFile = destFile.getParentFile();
+    if (parentFile != null) {
+      if (!parentFile.mkdirs() && !parentFile.isDirectory()) {
+        throw new IOException("Destination '" + parentFile
+            + "' directory cannot be created");
+      }
+    }
+    if (destFile.exists()) {
+      if (FileUtil.canWrite(destFile) == false) {
+        throw new IOException("Destination '" + destFile
+            + "' exists but is read-only");
+      } else {
+        if (destFile.delete() == false) {
+          throw new IOException("Destination '" + destFile
+              + "' exists but cannot be deleted");
+        }
+      }
+    }
+    try {
+      NativeIO.copyFileUnbuffered(srcFile, destFile);
+    } catch (NativeIOException e) {
+      throw new IOException("Failed to copy " + srcFile.getCanonicalPath()
+          + " to " + destFile.getCanonicalPath()
+          + " due to failure in NativeIO#copyFileUnbuffered(). "
+          + e.toString());
+    }
+    if (srcFile.length() != destFile.length()) {
+      throw new IOException("Failed to copy full contents from '" + srcFile
+          + "' to '" + destFile + "'");
+    }
+    if (preserveFileDate) {
+      if (destFile.setLastModified(srcFile.lastModified()) == false) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Failed to preserve last modified date from'" + srcFile
+            + "' to '" + destFile + "'");
+        }
+      }
+    }
+  }
+
+  /**

INS26 INS40 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS25 INS25 INS25 INS25 INS60 INS25 INS25 INS54 INS25 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS65 INS42 INS66 INS65 INS42 INS66 INS66 INS42 INS66 INS65 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS8 INS32 INS8 INS43 INS59 INS27 INS8 INS32 INS8 INS8 INS12 INS27 INS8 INS42 INS8 INS67 INS66 INS68 INS66 INS66 INS66 INS42 INS33 INS53 INS42 INS33 INS53 INS32 INS9 INS53 INS42 INS42 INS53 INS32 INS42 INS32 INS53 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS25 INS21 INS44 INS8 INS32 INS32 INS53 INS25 INS42 INS42 INS42 INS42 INS69 INS14 INS14 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS8 INS27 INS8 INS8 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS14 INS27 INS8 INS39 INS43 INS45 INS43 INS45 INS43 INS27 INS43 INS27 INS43 INS27 INS38 INS38 INS53 INS32 INS9 INS53 INS25 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS27 INS32 INS9 INS25 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS32 INS14 INS42 INS42 INS42 INS14 INS27 INS8 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS27 INS32 INS9 INS53 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45