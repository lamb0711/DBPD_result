HDFS-6516. List of Encryption Zones should be based on inodes (clamb)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607770 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+  private final XAttr KEYID_XATTR =
+      XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, null);
+
+  /*
+   * EncryptionZoneInt is the internal representation of an encryption
+   * zone. The external representation of an EZ is embodied in an
+   * EncryptionZone and contains the EZ's pathname.
+   */
+  private class EncryptionZoneInt {
+    private final String keyId;
+    private final long inodeId;
+
+    EncryptionZoneInt(String keyId, long inodeId) {
+      this.keyId = keyId;
+      this.inodeId = inodeId;
+    }
+
+    String getKeyId() {
+      return keyId;
+    }
+
+    long getINodeId() {
+      return inodeId;
+    }
+
+    String getFullPathName() {
+      return getInode(inodeId).getFullPathName();
+    }
+  }
+
+  private final Map<Long, EncryptionZoneInt> encryptionZones;
+
+    encryptionZones = new HashMap<Long, EncryptionZoneInt>();
-    checkEncryptionZoneMoveValidity(src, dst);
+    checkEncryptionZoneMoveValidity(srcIIP, dstIIP, src);
-    checkEncryptionZoneMoveValidity(src, dst);
+    checkEncryptionZoneMoveValidity(srcIIP, dstIIP, src);
-  private void checkEncryptionZoneMoveValidity(String src, String dst)
+  boolean isInAnEZ(INodesInPath iip)
+    throws UnresolvedLinkException, SnapshotAccessControlException {
+    readLock();
+    try {
+      return (getEncryptionZoneForPath(iip) != null);
+    } finally {
+      readUnlock();
+    }
+  }
+
+  private EncryptionZoneInt getEncryptionZoneForPath(INodesInPath iip) {
+    Preconditions.checkNotNull(iip);
+    final INode[] inodes = iip.getINodes();
+    for (int i = inodes.length -1; i >= 0; i--) {
+      final INode inode = inodes[i];
+      if (inode != null) {
+        final EncryptionZoneInt ezi = encryptionZones.get(inode.getId());
+        if (ezi != null) {
+          return ezi;
+        }
+      }
+    }
+    return null;
+  }
+
+  private void checkEncryptionZoneMoveValidity(INodesInPath srcIIP,
+    INodesInPath dstIIP, String src)
-    final EncryptionZone srcEZ =
-      getFSNamesystem().getEncryptionZoneForPath(src);
-    final EncryptionZone dstEZ =
-      getFSNamesystem().getEncryptionZoneForPath(dst);
-    final boolean srcInEZ = srcEZ != null;
-    final boolean dstInEZ = dstEZ != null;
+    final boolean srcInEZ = (getEncryptionZoneForPath(srcIIP) != null);
+    final boolean dstInEZ = (getEncryptionZoneForPath(dstIIP) != null);
-      if (!srcEZ.getPath().equals(dstEZ.getPath())) {
+      final EncryptionZoneInt srcEZI = getEncryptionZoneForPath(srcIIP);
+      final EncryptionZoneInt dstEZI = getEncryptionZoneForPath(dstIIP);
+      Preconditions.checkArgument(srcEZI != null, "couldn't find src EZ?");
+      Preconditions.checkArgument(dstEZI != null, "couldn't find dst EZ?");
+      if (srcEZI != dstEZI) {
+        final String srcEZPath = srcEZI.getFullPathName();
+        final String dstEZPath = dstEZI.getFullPathName();
-        sb.append(srcEZ.getPath());
+        sb.append(srcEZPath);
-        sb.append(dstEZ.getPath());
+        sb.append(dstEZPath);
+      final XAttrFeature xaf = inode.getXAttrFeature();
+      if (xaf != null) {
+        final List<XAttr> xattrs = xaf.getXAttrs();
+        for (XAttr xattr : xattrs) {
+          final String xaName = XAttrHelper.getPrefixName(xattr);
+          if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {
+            encryptionZones.put(inode.getId(),
+              new EncryptionZoneInt(new String(xattr.getValue()),
+                                    inode.getId()));
+          }
+        }
+      }
+          encryptionZones.remove(inode.getId());
+        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),
+            "The encryption zone xattr should never be deleted.");
+
+      final INodesInPath srcIIP = getINodesInPath4Write(src, false);
+      final EncryptionZoneInt ezi = getEncryptionZoneForPath(srcIIP);
+      if (ezi != null) {
+        throw new IOException("Directory " + src +
+          " is already in an encryption zone. (" + ezi.getFullPathName() + ")");
+      }
+
-      List<XAttr> xattrs = Lists.newArrayListWithCapacity(1);
+      final List<XAttr> xattrs = Lists.newArrayListWithCapacity(1);
-      unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));
+      final INode inode = unprotectedSetXAttrs(src, xattrs,
+        EnumSet.of(XAttrSetFlag.CREATE));
+      encryptionZones.put(inode.getId(),
+          new EncryptionZoneInt(keyId, inode.getId()));
+  List<EncryptionZone> listEncryptionZones() throws IOException {
+    readLock();
+    try {
+      final List<EncryptionZone> ret =
+        Lists.newArrayListWithExpectedSize(encryptionZones.size());
+      for (EncryptionZoneInt ezi : encryptionZones.values()) {
+        ret.add(new EncryptionZone(ezi.getFullPathName(), ezi.getKeyId()));
+      }
+      return ret;
+    } finally {
+      readUnlock();
+    }
+  }
+
-  void unprotectedSetXAttrs(final String src, final List<XAttr> xAttrs,
+  INode unprotectedSetXAttrs(final String src, final List<XAttr> xAttrs,
+
+    /*
+     * If we're adding the encryption zone xattr, then add src to the list
+     * of encryption zones.
+     */
+    for (XAttr xattr : newXAttrs) {
+      final String xaName = XAttrHelper.getPrefixName(xattr);
+      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {
+        final EncryptionZoneInt ez =
+            new EncryptionZoneInt(new String(xattr.getValue()), inode.getId());
+        encryptionZones.put(inode.getId(), ez);
+      }
+    }
+
+    return inode;

INS26 INS26 INS40 INS40 INS23 INS55 INS23 INS31 INS31 MOV44 INS31 INS83 INS83 INS43 INS59 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS44 INS8 INS74 INS42 INS43 INS8 INS43 INS42 INS42 INS32 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS42 INS44 INS44 INS8 INS43 INS42 INS8 INS39 INS42 INS8 INS43 INS42 INS8 INS43 INS43 INS43 INS42 INS21 INS43 INS42 INS42 INS42 INS21 INS54 INS42 INS43 INS42 INS21 INS60 INS24 INS41 INS43 INS42 UPD43 UPD42 INS25 INS43 MOV43 INS42 INS21 INS54 INS42 INS70 INS41 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS42 INS41 INS41 INS42 INS41 INS42 INS42 INS42 INS7 INS42 INS32 INS8 INS8 INS42 INS32 INS83 INS5 INS59 INS58 INS27 INS37 INS8 INS33 INS42 UPD42 MOV62 INS8 INS42 INS32 INS8 INS8 INS44 INS42 INS8 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS14 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS41 INS21 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS34 INS42 INS60 INS25 INS36 INS36 INS60 INS60 INS21 INS21 MOV21 INS60 INS25 INS60 INS60 INS25 INS60 INS42 INS60 INS70 INS41 INS21 INS43 INS42 INS60 INS25 INS22 INS42 INS22 INS42 INS32 INS42 INS74 INS36 INS32 INS42 INS42 INS42 INS42 INS27 INS83 INS43 INS59 INS27 INS8 INS27 INS27 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS32 INS27 INS83 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS83 INS83 INS43 INS59 INS32 INS83 INS74 INS59 INS44 INS32 INS8 INS42 INS32 INS42 INS83 INS43 INS59 INS32 INS8 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS43 INS43 INS27 INS42 INS40 INS34 INS42 INS42 INS2 INS42 INS33 INS60 INS25 INS32 MOV33 INS32 MOV33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS60 INS60 INS42 INS42 INS32 INS42 INS33 INS60 INS70 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 MOV32 INS42 INS42 INS32 INS14 INS43 MOV43 INS42 INS32 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS42 INS83 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS9 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS42 INS32 INS43 INS42 INS60 MOV25 INS21 INS42 INS42 INS38 INS45 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS42 INS45 INS42 INS45 INS32 INS45 INS43 INS32 INS32 INS43 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS43 INS14 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL27 DEL42 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL32 DEL42 DEL32 DEL8 DEL39