YARN-5181. ClusterNodeTracker: add method to get list of nodes matching a specific resourceName. (kasha via asuresh)

+import com.google.common.base.Preconditions;
+import org.apache.hadoop.yarn.api.records.ResourceRequest;
-  private Map<String, Integer> nodesPerRack = new HashMap<>();
+  private Map<String, N> nodeNameToNodeMap = new HashMap<>();
+  private Map<String, List<N>> nodesPerRack = new HashMap<>();
+      nodeNameToNodeMap.put(node.getNodeName(), node);
-      Integer numNodes = nodesPerRack.get(rackName);
-      if (numNodes == null) {
-        numNodes = 0;
+      List<N> nodesList = nodesPerRack.get(rackName);
+      if (nodesList == null) {
+        nodesList = new ArrayList<>();
+        nodesPerRack.put(rackName, nodesList);
-      nodesPerRack.put(rackName, ++numNodes);
+      nodesList.add(node);
-      Integer nodeCount = nodesPerRack.get(rName);
-      return nodeCount == null ? 0 : nodeCount;
+      List<N> nodesList = nodesPerRack.get(rName);
+      return nodesList == null ? 0 : nodesList.size();
+      nodeNameToNodeMap.remove(node.getNodeName());
-      Integer numNodes = nodesPerRack.get(rackName);
-      if (numNodes > 0) {
-        nodesPerRack.put(rackName, --numNodes);
-      } else {
+      List<N> nodesList = nodesPerRack.get(rackName);
+      if (nodesList == null) {
+      } else {
+        nodesList.remove(node);
+        if (nodesList.isEmpty()) {
+          nodesPerRack.remove(rackName);
+        }
+
+  /**
+   * Convenience method to return list of nodes corresponding to resourceName
+   * passed in the {@link ResourceRequest}.
+   *
+   * @param resourceName Host/rack name of the resource, or
+   * {@link ResourceRequest#ANY}
+   * @return list of nodes that match the resourceName
+   */
+  public List<N> getNodesByResourceName(final String resourceName) {
+    Preconditions.checkArgument(
+        resourceName != null && !resourceName.isEmpty());
+    List<N> retNodes = new ArrayList<>();
+    if (ResourceRequest.ANY.equals(resourceName)) {
+      return getAllNodes();
+    } else if (nodeNameToNodeMap.containsKey(resourceName)) {
+      retNodes.add(nodeNameToNodeMap.get(resourceName));
+    } else if (nodesPerRack.containsKey(resourceName)) {
+      return nodesPerRack.get(resourceName);
+    } else {
+      LOG.info(
+          "Could not find a node matching given resourceName " + resourceName);
+    }
+    return retNodes;
+  }

INS26 INS26 INS40 INS40 INS23 INS31 UPD74 INS59 INS83 INS74 MOV59 INS29 INS83 INS74 INS42 INS44 INS8 UPD43 INS42 INS14 INS43 INS43 INS74 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS21 INS60 INS25 INS41 UPD42 INS74 INS42 INS42 INS43 INS43 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS74 INS59 INS32 INS8 INS25 INS42 INS43 INS42 INS42 INS21 INS25 INS21 INS21 INS42 INS67 INS42 INS42 INS27 INS43 INS43 INS42 INS14 INS40 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS32 INS74 MOV27 INS8 INS32 INS74 INS32 INS74 UPD27 INS8 INS42 INS42 INS27 INS38 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS21 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS43 INS43 UPD42 UPD42 MOV21 MOV21 INS42 INS42 INS42 INS43 INS43 UPD42 INS32 INS42 INS42 INS32 INS43 INS43 UPD42 UPD42 INS33 INS21 INS25 INS42 INS33 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS41 INS21 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS32 MOV8 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 UPD42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS74 INS45 INS42 INS43 UPD42 INS42 DEL43 DEL34 DEL42 DEL38 DEL8 DEL25 DEL43 DEL42 DEL43 DEL34 DEL42 DEL38