DFS-1257. Fix a race condition on BlockManager.recentInvalidateSets.  Contributed by Eric Payne


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1158933 13f79535-47bb-0310-9956-ffa450edef68

-    Collection<Block> v = recentInvalidateSets.get(storageID);
-    if (v != null && v.remove(block)) {
-      pendingDeletionBlocksCount--;
-      if (v.isEmpty()) {
-        recentInvalidateSets.remove(storageID);
+    synchronized(recentInvalidateSets) {
+      Collection<Block> v = recentInvalidateSets.get(storageID);
+      if (v != null && v.remove(block)) {
+        pendingDeletionBlocksCount--;
+        if (v.isEmpty()) {
+          recentInvalidateSets.remove(storageID);
+        }
-    Collection<Block> invalidateSet = recentInvalidateSets.get(storageID);
-    return invalidateSet != null && invalidateSet.contains(block);
+    Collection<Block> invalidateSet;
+    synchronized(recentInvalidateSets) {
+      invalidateSet = recentInvalidateSets.get(storageID);
+      return invalidateSet != null && invalidateSet.contains(block);
+    }
-    Collection<Block> invalidateSet = recentInvalidateSets
-        .get(dn.getStorageID());
-    if (invalidateSet == null) {
-      invalidateSet = new HashSet<Block>();
-      recentInvalidateSets.put(dn.getStorageID(), invalidateSet);
-    }
-    if (invalidateSet.add(b)) {
-      pendingDeletionBlocksCount++;
-      if (log) {
-        NameNode.stateChangeLog.info("BLOCK* addToInvalidates: "
-            + b + " to " + dn.getName());
+    synchronized(recentInvalidateSets) {
+      Collection<Block> invalidateSet = recentInvalidateSets
+          .get(dn.getStorageID());
+      if (invalidateSet == null) {
+        invalidateSet = new HashSet<Block>();
+        recentInvalidateSets.put(dn.getStorageID(), invalidateSet);
+      }
+      if (invalidateSet.add(b)) {
+        pendingDeletionBlocksCount++;
+        if (log) {
+          NameNode.stateChangeLog.info("BLOCK* addToInvalidates: "
+              + b + " to " + dn.getName());
+        }
-    int size = recentInvalidateSets.values().size();
+    int size;
+    synchronized(recentInvalidateSets) {
+      size = recentInvalidateSets.values().size();
+    }
-    for(Map.Entry<String,Collection<Block>> entry : recentInvalidateSets.entrySet()) {
-      Collection<Block> blocks = entry.getValue();
-      if (blocks.size() > 0) {
-        out.println(datanodeManager.getDatanode(entry.getKey()).getName() + blocks);
+    synchronized(recentInvalidateSets) {
+      for(Map.Entry<String,Collection<Block>> entry : recentInvalidateSets.entrySet()) {
+        Collection<Block> blocks = entry.getValue();
+        if (blocks.size() > 0) {
+          out.println(datanodeManager.getDatanode(entry.getKey()).getName() + blocks);
+        }
-    int numOfNodes = recentInvalidateSets.size();
-    nodesToProcess = Math.min(numOfNodes, nodesToProcess);
+    int numOfNodes;
+    ArrayList<String> keyArray;
-    // TODO should using recentInvalidateSets be synchronized?
-    // get an array of the keys
-    ArrayList<String> keyArray =
-      new ArrayList<String>(recentInvalidateSets.keySet());
+    synchronized(recentInvalidateSets) {
+      numOfNodes = recentInvalidateSets.size();
+      // get an array of the keys
+      keyArray = new ArrayList<String>(recentInvalidateSets.keySet());
+    }
+
+    nodesToProcess = Math.min(numOfNodes, nodesToProcess);
-    Collection<Block> blocks = recentInvalidateSets.remove(storageID);
+    Collection<Block> blocks;
+    synchronized(recentInvalidateSets) {
+      blocks = recentInvalidateSets.remove(storageID);
+    }
-      Collection<Block> invalidateSet = recentInvalidateSets.get(nodeId);
-      if (invalidateSet == null)
-        return 0;
+      Collection<Block> invalidateSet;
+      ArrayList<Block> blocksToInvalidate;
+      synchronized(recentInvalidateSets) {
+        invalidateSet = recentInvalidateSets.get(nodeId);
+        if (invalidateSet == null)
+          return 0;
-      ArrayList<Block> blocksToInvalidate = new ArrayList<Block>(
+        blocksToInvalidate = new ArrayList<Block>(
-      // # blocks that can be sent in one message is limited
-      Iterator<Block> it = invalidateSet.iterator();
-      for (int blkCount = 0; blkCount < getDatanodeManager().blockInvalidateLimit
-          && it.hasNext(); blkCount++) {
-        blocksToInvalidate.add(it.next());
-        it.remove();
-      }
-
-      // If we send everything in this message, remove this node entry
-      if (!it.hasNext()) {
-        removeFromInvalidates(nodeId);
-      }
-
-      dn.addBlocksToBeInvalidated(blocksToInvalidate);
-
-      if (NameNode.stateChangeLog.isInfoEnabled()) {
-        StringBuilder blockList = new StringBuilder();
-        for (Block blk : blocksToInvalidate) {
-          blockList.append(' ');
-          blockList.append(blk);
+        // # blocks that can be sent in one message is limited
+        Iterator<Block> it = invalidateSet.iterator();
+        for (int blkCount = 0; blkCount < getDatanodeManager().blockInvalidateLimit
+            && it.hasNext(); blkCount++) {
+          blocksToInvalidate.add(it.next());
+          it.remove();
-        NameNode.stateChangeLog.info("BLOCK* ask " + dn.getName()
-            + " to delete " + blockList);
+
+        // If we send everything in this message, remove this node entry
+        if (!it.hasNext()) {
+          removeFromInvalidates(nodeId);
+        }
+
+        dn.addBlocksToBeInvalidated(blocksToInvalidate);
+
+        if (NameNode.stateChangeLog.isInfoEnabled()) {
+          StringBuilder blockList = new StringBuilder();
+          for (Block blk : blocksToInvalidate) {
+            blockList.append(' ');
+            blockList.append(blk);
+          }
+          NameNode.stateChangeLog.info("BLOCK* ask " + dn.getName()
+              + " to delete " + blockList);
+        }
+        pendingDeletionBlocksCount -= blocksToInvalidate.size();
+        return blocksToInvalidate.size();
-      pendingDeletionBlocksCount -= blocksToInvalidate.size();
-      return blocksToInvalidate.size();

INS8 INS8 MOV21 INS51 INS51 INS51 INS51 INS51 INS51 INS51 INS42 MOV8 INS42 INS8 INS42 MOV8 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS21 MOV41 INS21 MOV70 INS21 INS21 INS21 INS51 INS7 INS7 INS7 INS7 INS7 INS42 INS8 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV14 INS42 MOV32 INS21 MOV25 INS21 MOV60 MOV24 MOV25 MOV21 MOV25 MOV21 MOV41 INS7 INS7 INS42 MOV32 INS42 MOV14