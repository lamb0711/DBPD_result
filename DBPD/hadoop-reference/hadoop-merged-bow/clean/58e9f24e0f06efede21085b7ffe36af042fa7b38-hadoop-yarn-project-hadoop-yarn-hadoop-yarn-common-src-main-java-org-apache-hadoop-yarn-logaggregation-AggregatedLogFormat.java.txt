YARN-2788. Fixed backwards compatiblity issues with log-aggregation feature that were caused when adding log-upload-time via YARN-2703. Contributed by Xuan Gong.

+import java.io.OutputStream;
+import org.apache.commons.io.output.WriterOutputStream;
-        // Write the uploaded TimeStamp
-        out.writeLong(System.currentTimeMillis());
-
+    @VisibleForTesting
+    public TFile.Writer getWriter() {
+      return this.writer;
+    }
+
+     * @param logUploadedTime
-        Writer writer) throws IOException {
-      int bufferSize = 65536;
-      char[] cbuf = new char[bufferSize];
-      String fileType;
-      long uploadTime;
-      String fileLengthStr;
-      long fileLength;
-
-      while (true) {
-        try {
-          fileType = valueStream.readUTF();
-        } catch (EOFException e) {
-          // EndOfFile
-          return;
+        Writer writer, long logUploadedTime) throws IOException {
+      OutputStream os = null;
+      PrintStream ps = null;
+      try {
+        os = new WriterOutputStream(writer);
+        ps = new PrintStream(os);
+        while (true) {
+          try {
+            readContainerLogs(valueStream, ps, logUploadedTime);
+          } catch (EOFException e) {
+            // EndOfFile
+            return;
+          }
-        uploadTime = valueStream.readLong();
-        fileLengthStr = valueStream.readUTF();
-        fileLength = Long.parseLong(fileLengthStr);
-        writer.write("\n\nLogType:");
-        writer.write(fileType);
-        writer.write("\nLogUploadTime:");
-        writer.write(String.valueOf(uploadTime));
-        writer.write("\nLogLength:");
-        writer.write(fileLengthStr);
-        writer.write("\nLog Contents:\n");
-        // ByteLevel
-        BoundedInputStream bis =
-            new BoundedInputStream(valueStream, fileLength);
-        InputStreamReader reader = new InputStreamReader(bis);
-        int currentRead = 0;
-        int totalRead = 0;
-        while ((currentRead = reader.read(cbuf, 0, bufferSize)) != -1) {
-          writer.write(cbuf, 0, currentRead);
-          totalRead += currentRead;
-        }
+      } finally {
+        IOUtils.cleanup(LOG, ps);
+        IOUtils.cleanup(LOG, os);
-     * Keep calling this till you get a {@link EOFException} for getting logs of
-     * all types for a single container.
-     * 
+     * Writes all logs for a single container to the provided writer.
-     * @param out
+     * @param writer
-    public static void readAContainerLogsForALogType(
-        DataInputStream valueStream, PrintStream out)
-          throws IOException {
+    public static void readAcontainerLogs(DataInputStream valueStream,
+        Writer writer) throws IOException {
+      readAcontainerLogs(valueStream, writer, -1);
+    }
+    private static void readContainerLogs(DataInputStream valueStream,
+        PrintStream out, long logUploadedTime) throws IOException {
-      long uploadTime = valueStream.readLong();
-      out.print("LogType: ");
+      out.print("LogType:");
-      out.print("LogUploadTime: ");
-      out.println(Times.format(uploadTime));
-      out.print("LogLength: ");
+      if (logUploadedTime != -1) {
+        out.print("Log Upload Time:");
+        out.println(Times.format(logUploadedTime));
+      }
+      out.print("LogLength:");
+    /**
+     * Keep calling this till you get a {@link EOFException} for getting logs of
+     * all types for a single container.
+     * 
+     * @param valueStream
+     * @param out
+     * @param logUploadedTime
+     * @throws IOException
+     */
+    public static void readAContainerLogsForALogType(
+        DataInputStream valueStream, PrintStream out, long logUploadedTime)
+          throws IOException {
+      readContainerLogs(valueStream, out, logUploadedTime);
+    }
+
+    /**
+     * Keep calling this till you get a {@link EOFException} for getting logs of
+     * all types for a single container.
+     * 
+     * @param valueStream
+     * @param out
+     * @throws IOException
+     */
+    public static void readAContainerLogsForALogType(
+        DataInputStream valueStream, PrintStream out)
+          throws IOException {
+      readAContainerLogsForALogType(valueStream, out, -1);
+    }
+
-    private long currentLogUpLoadTime = 0;
-      currentLogUpLoadTime = 0;
-        long logUpLoadTime = valueStream.readLong();
-        currentLogUpLoadTime = logUpLoadTime;
-    public long getCurrentLogUpLoadTime() {
-      return currentLogUpLoadTime;
-    }
-

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS8 INS29 MOV83 MOV83 MOV39 MOV42 INS44 INS44 INS44 INS43 INS8 MOV29 INS83 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 UPD83 UPD42 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 MOV29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS40 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS42 MOV60 MOV60 INS54 MOV21 INS39 INS42 INS25 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 UPD42 MOV42 INS21 INS43 INS42 INS43 INS42 INS42 MOV21 INS22 INS66 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD43 INS43 INS8 INS8 INS32 INS27 INS8 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS52 INS42 UPD42 UPD42 INS33 INS42 UPD42 INS33 MOV21 MOV21 INS61 MOV21 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS38 UPD45 INS42 MOV38 MOV21 MOV21 UPD45 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS38 INS9 INS8 INS32 INS34 INS34 UPD42 INS14 UPD42 INS14 MOV54 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 UPD45 INS43 INS42 INS43 INS42 UPD42 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL42 DEL32 DEL7 DEL42 DEL42 DEL32 DEL32 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL43 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL9 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL43 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL36 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL61 DEL8 DEL61 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL34 DEL42 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL34 DEL7 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31