HDFS-7768. Change fsck to support EC files.  Contributed by Takanobu Asanuma

+import org.apache.hadoop.io.erasurecode.ECSchema;
+  private long totalDirs = 0L;
+  private long totalSymlinks = 0L;
+
-        Result res = new Result(conf);
+        Result replRes = new ReplicationResult(conf);
+        Result ecRes = new ErasureCodingResult(conf);
-        check(path, file, res);
+        check(path, file, replRes, ecRes);
-        out.println(res);
-        out.println(" Number of data-nodes:\t\t" + totalDatanodes);
+        out.print("\nStatus: ");
+        out.println(replRes.isHealthy() && ecRes.isHealthy() ? "HEALTHY" : "CORRUPT");
+        out.println(" Number of data-nodes:\t" + totalDatanodes);
+        out.println(" Total dirs:\t\t\t" + totalDirs);
+        out.println(" Total symlinks:\t\t" + totalSymlinks);
+        out.println("\nReplicated Blocks:");
+        out.println(replRes);
+        out.println("\nErasure Coded Block Groups:");
+        out.println(ecRes);
-        if (res.isHealthy()) {
+        if (replRes.isHealthy() && ecRes.isHealthy()) {
-  void check(String parent, HdfsFileStatus file, Result res) throws IOException {
+  void check(String parent, HdfsFileStatus file, Result replRes, Result ecRes)
+      throws IOException {
-      checkDir(path, res);
+      checkDir(path, replRes, ecRes);
-      res.totalSymlinks++;
+      totalSymlinks++;
-    collectFileSummary(path, file, res, blocks);
-    collectBlocksSummary(parent, file, res, blocks);
+
+    final Result r = file.getReplication() == 0? ecRes: replRes;
+    collectFileSummary(path, file, r, blocks);
+    if (showprogress && (replRes.totalFiles + ecRes.totalFiles) % 100 == 0) {
+      out.println();
+      out.flush();
+    }
+    collectBlocksSummary(parent, file, r, blocks);
-  private void checkDir(String path, Result res) throws IOException {
+  private void checkDir(String path, Result replRes, Result ecRes) throws IOException {
-      check(snapshotPath, snapshotFileInfo, res);
+      check(snapshotPath, snapshotFileInfo, replRes, ecRes);
-    res.totalDirs++;
+    totalDirs++;
-        check(path, files[i], res);
+        check(path, files[i], replRes, ecRes);
-    if ((showprogress) && res.totalFiles % 100 == 0) {
-      out.println();
-      out.flush();
-    }
-      int decommissionedReplicas = numberReplicas.decommissioned();;
+      int decommissionedReplicas = numberReplicas.decommissioned();
-      short targetFileReplication = file.getReplication();
+      short targetFileReplication;
+      if(file.getReplication() == 0) {
+        INode inode = namenode.getNamesystem().getFSDirectory().getINode(path);
+        INodesInPath iip = INodesInPath.fromINode(inode);
+        ECSchema ecSchema = namenode.getNamesystem().getFSDirectory().getECSchema(iip);
+        targetFileReplication = (short) (ecSchema.getNumDataUnits() + ecSchema.getNumParityUnits());
+      } else {
+        targetFileReplication = file.getReplication();
+      }
-    long numUnderMinReplicatedBlocks=0L;
+    long numUnderMinReplicatedBlocks = 0L;
-    long totalDirs = 0L;
-    long totalSymlinks = 0L;
-    final short replication;
-    Result(Configuration conf) {
-      this.replication = (short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,
-                                            DFSConfigKeys.DFS_REPLICATION_DEFAULT);
-      this.minReplication = (short)conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,
-                                            DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT);
+    Result(int minReplication) {
+      this.minReplication = minReplication;
+  }
+
+  @VisibleForTesting
+  static class ReplicationResult extends Result {
+    final short replication;
+
+    ReplicationResult(Configuration conf) {
+      super(conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,
+                        DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT));
+      this.replication = (short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,
+                                            DFSConfigKeys.DFS_REPLICATION_DEFAULT);
+    }
-      res.append("Status: ").append((isHealthy() ? "HEALTHY" : "CORRUPT"))
-          .append("\n Total size:\t").append(totalSize).append(" B");
+      res.append(" Total size:\t").append(totalSize).append(" B");
-      res.append("\n Total dirs:\t").append(totalDirs).append(
-          "\n Total files:\t").append(totalFiles);
-      res.append("\n Total symlinks:\t\t").append(totalSymlinks);
+      res.append("\n Total files:\t").append(totalFiles);
+
+  @VisibleForTesting
+  static class ErasureCodingResult extends Result {
+    final String ecSchema;
+
+    ErasureCodingResult(Configuration conf) {
+      this(ErasureCodingSchemaManager.getSystemDefaultSchema());
+    }
+
+    ErasureCodingResult(ECSchema ecSchema) {
+      super(ecSchema.getNumDataUnits());
+      this.ecSchema = ecSchema.getSchemaName();
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder res = new StringBuilder();
+      res.append(" Total size:\t").append(totalSize).append(" B");
+      if (totalOpenFilesSize != 0) {
+        res.append(" (Total open files size: ").append(totalOpenFilesSize)
+            .append(" B)");
+      }
+      res.append("\n Total files:\t").append(totalFiles);
+      if (totalOpenFiles != 0) {
+        res.append(" (Files currently being written: ").append(totalOpenFiles)
+            .append(")");
+      }
+      res.append("\n Total block groups (validated):\t").append(totalBlocks);
+      if (totalBlocks > 0) {
+        res.append(" (avg. block group size ").append((totalSize / totalBlocks))
+            .append(" B)");
+      }
+      if (totalOpenFilesBlocks != 0) {
+        res.append(" (Total open file block groups (not validated): ").append(
+            totalOpenFilesBlocks).append(")");
+      }
+      if (corruptFiles > 0 || numUnderMinReplicatedBlocks > 0) {
+        res.append("\n  ********************************");
+        if(numUnderMinReplicatedBlocks>0){
+          res.append("\n  UNRECOVERABLE BLOCK GROUPS:\t").append(numUnderMinReplicatedBlocks);
+          if(totalBlocks>0){
+            res.append(" (").append(
+                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))
+                .append(" %)");
+          }
+          res.append("\n  ").append("MIN REQUIRED EC BLOCK:\t")
+              .append(minReplication);
+        }
+        if(corruptFiles>0) {
+          res.append(
+              "\n  CORRUPT FILES:\t").append(corruptFiles);
+          if (missingSize > 0) {
+            res.append("\n  MISSING BLOCK GROUPS:\t").append(missingIds.size()).append(
+                "\n  MISSING SIZE:\t\t").append(missingSize).append(" B");
+          }
+          if (corruptBlocks > 0) {
+            res.append("\n  CORRUPT BLOCK GROUPS: \t").append(corruptBlocks).append(
+                "\n  CORRUPT SIZE:\t\t").append(corruptSize).append(" B");
+          }
+        }
+        res.append("\n  ********************************");
+      }
+      res.append("\n Minimally erasure-coded block groups:\t").append(
+          numMinReplicatedBlocks);
+      if (totalBlocks > 0) {
+        res.append(" (").append(
+            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))
+            .append(" %)");
+      }
+      res.append("\n Over-erasure-coded block groups:\t")
+          .append(numOverReplicatedBlocks);
+      if (totalBlocks > 0) {
+        res.append(" (").append(
+            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))
+            .append(" %)");
+      }
+      res.append("\n Under-erasure-coded block groups:\t").append(
+          numUnderReplicatedBlocks);
+      if (totalBlocks > 0) {
+        res.append(" (").append(
+            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))
+            .append(" %)");
+      }
+      res.append("\n Unsatisfactory placement block groups:\t\t")
+          .append(numMisReplicatedBlocks);
+      if (totalBlocks > 0) {
+        res.append(" (").append(
+            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))
+            .append(" %)");
+      }
+      res.append("\n Default schema:\t").append(ecSchema)
+          .append("\n Average block group size:\t").append(
+          getReplicationFactor()).append("\n Missing block groups:\t\t").append(
+          missingIds.size()).append("\n Corrupt block groups:\t\t").append(
+          corruptBlocks).append("\n Missing ec-blocks:\t\t").append(
+          missingReplicas);
+      if (totalReplicas > 0) {
+        res.append(" (").append(
+            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(
+            " %)");
+      }
+      if (decommissionedReplicas > 0) {
+        res.append("\n Decommissioned ec-blocks:\t").append(
+            decommissionedReplicas);
+      }
+      if (decommissioningReplicas > 0) {
+        res.append("\n Decommissioning ec-blocks:\t").append(
+            decommissioningReplicas);
+      }
+      return res.toString();
+    }
+  }

INS26 INS40 MOV23 MOV23 INS55 INS55 INS83 INS83 INS44 INS44 MOV29 INS78 INS83 INS42 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 INS31 MOV31 MOV31 MOV31 MOV31 INS42 INS43 INS78 INS83 INS42 INS43 INS23 INS31 INS31 INS31 UPD42 INS43 INS42 INS60 INS25 UPD42 INS43 INS42 INS42 INS42 INS44 INS8 INS42 UPD42 INS42 INS42 INS83 INS43 INS59 INS42 INS44 INS8 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS83 INS43 INS59 INS27 MOV8 INS42 INS39 INS42 INS21 INS46 INS42 INS42 INS43 INS42 INS17 INS43 INS42 INS46 INS21 INS42 INS42 INS60 INS21 INS25 INS21 INS25 INS21 INS25 INS25 INS25 INS21 INS25 INS21 INS25 INS21 INS25 INS21 INS25 INS21 INS25 INS25 INS25 INS41 INS42 INS42 INS16 UPD42 INS42 INS27 UPD42 INS42 INS25 INS7 MOV32 INS42 INS32 INS42 INS32 INS7 INS43 INS59 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS27 INS42 INS42 INS27 INS34 INS27 INS8 INS8 MOV22 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS14 INS32 INS42 INS45 INS42 INS34 INS21 INS32 INS42 INS42 INS42 INS34 INS21 INS32 INS42 INS42 INS42 INS34 INS21 INS42 INS34 INS21 INS27 INS27 INS21 INS25 INS25 INS21 INS32 INS42 INS42 INS42 INS34 INS21 INS32 INS42 INS42 INS42 INS34 INS21 INS32 INS42 INS42 INS42 INS34 INS21 INS32 INS42 INS42 INS42 INS34 INS21 INS32 INS42 INS42 INS42 INS34 INS21 INS42 INS34 INS21 INS42 INS34 INS21 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 UPD42 INS42 INS42 INS32 INS34 INS36 INS34 UPD42 INS42 INS32 INS34 INS60 INS60 INS60 INS21 INS21 MOV42 MOV42 INS52 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS34 INS42 INS34 INS32 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS45 INS32 INS32 INS32 MOV43 MOV43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS42 INS42 INS27 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS7 INS7 MOV42 MOV42 UPD45 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS21 INS25 INS21 INS42 INS34 INS21 INS25 INS25 INS42 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS14 UPD42 INS42 INS42 INS42 INS45 INS16 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS40 INS40 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS11 INS42 MOV32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS36 INS32 INS42 INS42 INS32 INS27 INS8 INS32 INS32 INS27 INS8 INS27 INS8 INS32 INS42 INS36 INS32 INS42 INS36 INS32 INS42 INS36 INS32 INS42 INS36 INS32 INS42 INS45 INS32 INS42 INS36 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS42 INS27 INS45 INS45 UPD45 INS45 INS42 INS45 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS39 INS36 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS34 INS21 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS21 INS42 INS34 INS21 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 INS32 INS42 INS32 INS42 INS42 INS45 INS27 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS32 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS32 INS42 INS45 INS42 INS42 INS11 INS11 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS39 INS36 INS39 INS42 INS39 INS36 INS39 INS42 INS39 INS36 INS39 INS42 INS39 INS36 INS39 INS42 INS32 INS42 INS32 INS39 INS36 INS39 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS36 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS27 INS27 INS32 INS42 INS45 INS42 INS27 INS42 INS42 INS45 INS27 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS32 INS42 INS42 INS42 INS34 INS11 INS11 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS39 INS36 INS39 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS27 INS42 INS34 DEL32 DEL40 DEL40 DEL42 DEL36 DEL40 DEL34 DEL27 DEL34 DEL27 DEL27 DEL25 DEL20 DEL42 DEL39 DEL11 DEL7 DEL21 DEL45 DEL32 DEL42 DEL42 DEL32 DEL45 DEL45 DEL16 DEL36 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21