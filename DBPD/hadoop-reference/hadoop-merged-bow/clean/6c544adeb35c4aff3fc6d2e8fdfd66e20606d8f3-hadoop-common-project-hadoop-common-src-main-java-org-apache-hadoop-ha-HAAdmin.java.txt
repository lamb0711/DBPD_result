Merge HDFS-3042 (automatic failover) to trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342112 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-import org.apache.commons.cli.CommandLineParser;
+import org.apache.hadoop.ha.HAServiceProtocol.StateChangeRequestInfo;
+import org.apache.hadoop.ha.HAServiceProtocol.RequestSource;
+import com.google.common.base.Preconditions;
+  
+  /**
+   * Undocumented flag which allows an administrator to use manual failover
+   * state transitions even when auto-failover is enabled. This is an unsafe
+   * operation, which is why it is not documented in the usage below.
+   */
+  private static final String FORCEMANUAL = "forcemanual";
+  private RequestSource requestSource = RequestSource.REQUEST_BY_USER;
-  private int transitionToActive(final String[] argv)
+  private int transitionToActive(final CommandLine cmd)
-    if (argv.length != 2) {
+    String[] argv = cmd.getArgs();
+    if (argv.length != 1) {
-    
-    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy(
+    HAServiceTarget target = resolveTarget(argv[0]);
+    if (!checkManualStateManagementOK(target)) {
+      return -1;
+    }
+    HAServiceProtocol proto = target.getProxy(
-    HAServiceProtocolHelper.transitionToActive(proto);
+    HAServiceProtocolHelper.transitionToActive(proto, createReqInfo());
-  private int transitionToStandby(final String[] argv)
+  private int transitionToStandby(final CommandLine cmd)
-    if (argv.length != 2) {
+    String[] argv = cmd.getArgs();
+    if (argv.length != 1) {
-    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy(
-        getConf(), 0);
-    HAServiceProtocolHelper.transitionToStandby(proto);
-    return 0;
-  }
-
-  private int failover(final String[] argv)
-      throws IOException, ServiceFailedException {
-    boolean forceFence = false;
-    boolean forceActive = false;
-
-    Options failoverOpts = new Options();
-    // "-failover" isn't really an option but we need to add
-    // it to appease CommandLineParser
-    failoverOpts.addOption("failover", false, "failover");
-    failoverOpts.addOption(FORCEFENCE, false, "force fencing");
-    failoverOpts.addOption(FORCEACTIVE, false, "force failover");
-
-    CommandLineParser parser = new GnuParser();
-    CommandLine cmd;
-
-    try {
-      cmd = parser.parse(failoverOpts, argv);
-      forceFence = cmd.hasOption(FORCEFENCE);
-      forceActive = cmd.hasOption(FORCEACTIVE);
-    } catch (ParseException pe) {
-      errOut.println("failover: incorrect arguments");
-      printUsage(errOut, "-failover");
+    HAServiceTarget target = resolveTarget(argv[0]);
+    if (!checkManualStateManagementOK(target)) {
-    
+    HAServiceProtocol proto = target.getProxy(
+        getConf(), 0);
+    HAServiceProtocolHelper.transitionToStandby(proto, createReqInfo());
+    return 0;
+  }
+  /**
+   * Ensure that we are allowed to manually manage the HA state of the target
+   * service. If automatic failover is configured, then the automatic
+   * failover controllers should be doing state management, and it is generally
+   * an error to use the HAAdmin command line to do so.
+   * 
+   * @param target the target to check
+   * @return true if manual state management is allowed
+   */
+  private boolean checkManualStateManagementOK(HAServiceTarget target) {
+    if (target.isAutoFailoverEnabled()) {
+      if (requestSource != RequestSource.REQUEST_BY_USER_FORCED) {
+        errOut.println(
+            "Automatic failover is enabled for " + target + "\n" +
+            "Refusing to manually manage HA state, since it may cause\n" +
+            "a split-brain scenario or other incorrect state.\n" +
+            "If you are very sure you know what you are doing, please \n" +
+            "specify the " + FORCEMANUAL + " flag.");
+        return false;
+      } else {
+        LOG.warn("Proceeding with manual HA state management even though\n" +
+            "automatic failover is enabled for " + target);
+        return true;
+      }
+    }
+    return true;
+  }
+
+  private StateChangeRequestInfo createReqInfo() {
+    return new StateChangeRequestInfo(requestSource);
+  }
+
+  private int failover(CommandLine cmd)
+      throws IOException, ServiceFailedException {
+    boolean forceFence = cmd.hasOption(FORCEFENCE);
+    boolean forceActive = cmd.hasOption(FORCEACTIVE);
+
-    if (numOpts > 2 || args.length != 2) {
+    if (numOpts > 3 || args.length != 2) {
-    FailoverController fc = new FailoverController(getConf());
+    // Check that auto-failover is consistently configured for both nodes.
+    Preconditions.checkState(
+        fromNode.isAutoFailoverEnabled() ==
+          toNode.isAutoFailoverEnabled(),
+          "Inconsistent auto-failover configs between %s and %s!",
+          fromNode, toNode);
+    
+    if (fromNode.isAutoFailoverEnabled()) {
+      if (forceFence || forceActive) {
+        // -forceActive doesn't make sense with auto-HA, since, if the node
+        // is not healthy, then its ZKFC will immediately quit the election
+        // again the next time a health check runs.
+        //
+        // -forceFence doesn't seem to have any real use cases with auto-HA
+        // so it isn't implemented.
+        errOut.println(FORCEFENCE + " and " + FORCEACTIVE + " flags not " +
+            "supported with auto-failover enabled.");
+        return -1;
+      }
+      return gracefulFailoverThroughZKFCs(toNode);
+    }
+    
+    FailoverController fc = new FailoverController(getConf(),
+        requestSource);
+  
-  private int checkHealth(final String[] argv)
+  /**
+   * Initiate a graceful failover by talking to the target node's ZKFC.
+   * This sends an RPC to the ZKFC, which coordinates the failover.
+   * 
+   * @param toNode the node to fail to
+   * @return status code (0 for success)
+   * @throws IOException if failover does not succeed
+   */
+  private int gracefulFailoverThroughZKFCs(HAServiceTarget toNode)
+      throws IOException {
+
+    int timeout = FailoverController.getRpcTimeoutToNewActive(getConf());
+    ZKFCProtocol proxy = toNode.getZKFCProxy(getConf(), timeout);
+    try {
+      proxy.gracefulFailover();
+      out.println("Failover to " + toNode + " successful");
+    } catch (ServiceFailedException sfe) {
+      errOut.println("Failover failed: " + sfe.getLocalizedMessage());
+      return -1;
+    }
+
+    return 0;
+  }
+
+  private int checkHealth(final CommandLine cmd)
-    if (argv.length != 2) {
+    String[] argv = cmd.getArgs();
+    if (argv.length != 1) {
-    
-    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy(
+    HAServiceProtocol proto = resolveTarget(argv[0]).getProxy(
-      HAServiceProtocolHelper.monitorHealth(proto);
+      HAServiceProtocolHelper.monitorHealth(proto, createReqInfo());
-  private int getServiceState(final String[] argv)
+  private int getServiceState(final CommandLine cmd)
-    if (argv.length != 2) {
+    String[] argv = cmd.getArgs();
+    if (argv.length != 1) {
-    HAServiceProtocol proto = resolveTarget(argv[1]).getProxy(
+    HAServiceProtocol proto = resolveTarget(argv[0]).getProxy(
-
-    if ("-transitionToActive".equals(cmd)) {
-      return transitionToActive(argv);
-    } else if ("-transitionToStandby".equals(cmd)) {
-      return transitionToStandby(argv);
-    } else if ("-failover".equals(cmd)) {
-      return failover(argv);
-    } else if ("-getServiceState".equals(cmd)) {
-      return getServiceState(argv);
-    } else if ("-checkHealth".equals(cmd)) {
-      return checkHealth(argv);
-    } else if ("-help".equals(cmd)) {
-      return help(argv);
-    } else {
+    
+    if (!USAGE.containsKey(cmd)) {
+    }
+    
+    Options opts = new Options();
+
+    // Add command-specific options
+    if ("-failover".equals(cmd)) {
+      addFailoverCliOpts(opts);
+    }
+    // Mutative commands take FORCEMANUAL option
+    if ("-transitionToActive".equals(cmd) ||
+        "-transitionToStandby".equals(cmd) ||
+        "-failover".equals(cmd)) {
+      opts.addOption(FORCEMANUAL, false,
+          "force manual control even if auto-failover is enabled");
+    }
+         
+    CommandLine cmdLine = parseOpts(cmd, opts, argv);
+    if (cmdLine == null) {
+      // error already printed
+      return -1;
+    }
+    
+    if (cmdLine.hasOption(FORCEMANUAL)) {
+      if (!confirmForceManual()) {
+        LOG.fatal("Aborted");
+        return -1;
+      }
+      // Instruct the NNs to honor this request even if they're
+      // configured for manual failover.
+      requestSource = RequestSource.REQUEST_BY_USER_FORCED;
+    }
+
+    if ("-transitionToActive".equals(cmd)) {
+      return transitionToActive(cmdLine);
+    } else if ("-transitionToStandby".equals(cmd)) {
+      return transitionToStandby(cmdLine);
+    } else if ("-failover".equals(cmd)) {
+      return failover(cmdLine);
+    } else if ("-getServiceState".equals(cmd)) {
+      return getServiceState(cmdLine);
+    } else if ("-checkHealth".equals(cmd)) {
+      return checkHealth(cmdLine);
+    } else if ("-help".equals(cmd)) {
+      return help(argv);
+    } else {
+      // we already checked command validity above, so getting here
+      // would be a coding error
+      throw new AssertionError("Should not get here, command: " + cmd);
+  private boolean confirmForceManual() throws IOException {
+     return ToolRunner.confirmPrompt(
+        "You have specified the " + FORCEMANUAL + " flag. This flag is " +
+        "dangerous, as it can induce a split-brain scenario that WILL " +
+        "CORRUPT your HDFS namespace, possibly irrecoverably.\n" +
+        "\n" +
+        "It is recommended not to use this flag, but instead to shut down the " +
+        "cluster and disable automatic failover if you prefer to manually " +
+        "manage your HA state.\n" +
+        "\n" +
+        "You may abort safely by answering 'n' or hitting ^C now.\n" +
+        "\n" +
+        "Are you sure you want to continue?");
+  }
+
+  /**
+   * Add CLI options which are specific to the failover command and no
+   * others.
+   */
+  private void addFailoverCliOpts(Options failoverOpts) {
+    failoverOpts.addOption(FORCEFENCE, false, "force fencing");
+    failoverOpts.addOption(FORCEACTIVE, false, "force failover");
+    // Don't add FORCEMANUAL, since that's added separately for all commands
+    // that change state.
+  }
+  
+  private CommandLine parseOpts(String cmdName, Options opts, String[] argv) {
+    try {
+      // Strip off the first arg, since that's just the command name
+      argv = Arrays.copyOfRange(argv, 1, argv.length); 
+      return new GnuParser().parse(opts, argv);
+    } catch (ParseException pe) {
+      errOut.println(cmdName.substring(1) +
+          ": incorrect arguments");
+      printUsage(errOut, cmdName);
+      return null;
+    }
+  }
+  

MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS42 INS42 INS45 INS42 INS42 INS40 INS43 UPD42 INS60 INS60 INS25 INS60 INS43 INS42 INS60 INS60 INS25 INS60 INS65 INS65 INS65 INS43 INS42 INS25 INS41 INS42 INS41 MOV43 UPD42 INS21 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS54 INS41 INS43 INS42 INS60 INS43 UPD42 INS60 INS60 MOV25 MOV60 INS25 INS25 INS60 INS25 INS25 INS42 INS41 INS65 INS43 INS42 MOV21 MOV21 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS54 INS66 INS66 INS66 UPD42 MOV42 MOV5 INS59 INS43 INS59 INS38 INS8 MOV43 INS59 INS42 MOV5 INS59 INS43 INS59 INS38 INS8 MOV43 INS59 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS8 INS9 INS14 INS32 INS32 INS8 MOV43 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS39 INS59 INS43 INS59 INS8 INS12 INS34 INS42 MOV5 INS59 MOV43 UPD42 MOV42 MOV5 INS59 MOV43 MOV59 INS38 INS32 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS8 INS32 INS66 INS66 INS42 INS42 INS42 INS43 INS85 INS8 INS12 UPD42 MOV42 INS32 UPD34 INS42 INS42 INS32 INS32 INS41 INS42 INS32 INS32 UPD42 MOV42 INS32 UPD34 INS42 INS42 INS32 INS32 INS41 INS42 INS32 INS32 INS42 INS42 INS25 INS43 INS42 MOV32 MOV32 INS42 INS42 INS27 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS25 INS41 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS44 INS8 INS42 INS32 UPD34 INS42 INS32 UPD34 INS32 UPD42 INS45 INS42 INS42 INS21 INS32 INS32 INS32 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS25 INS21 INS42 INS42 INS27 INS42 INS21 INS41 MOV44 INS8 INS42 INS42 MOV42 MOV2 INS42 INS42 INS38 INS42 MOV42 MOV32 MOV34 INS42 INS42 INS42 MOV42 MOV2 INS42 INS42 INS38 INS42 MOV42 MOV32 MOV34 INS42 INS27 INS8 INS8 INS42 UPD34 INS32 INS32 INS27 INS8 INS32 MOV43 INS42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS32 INS32 INS43 INS42 INS21 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS38 INS38 INS8 INS7 INS45 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS7 INS32 INS21 INS21 INS41 UPD34 INS34 UPD34 INS34 INS42 INS40 INS21 INS41 INS21 INS41 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS21 MOV41 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS38 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS34 INS32 INS21 INS41 INS42 INS40 UPD42 INS42 INS32 MOV14 INS42 INS42 INS42 INS32 INS32 INS33 INS32 INS9 INS32 INS9 INS32 INS45 INS42 INS45 INS42 INS42 INS27 INS34 UPD34 INS42 UPD34 INS42 INS32 INS38 UPD42 INS25 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 MOV42 MOV42 INS27 INS45 INS32 INS42 INS42 INS45 INS34 UPD42 MOV32 MOV8 INS8 INS32 INS45 INS45 INS42 INS45 INS45 INS45 INS45 INS45 INS42 INS45 INS45 INS45 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS42 UPD42 INS53 INS42 INS42 INS34 UPD42 INS14 INS43 INS27 INS42 INS45 INS42 DEL43 DEL85 DEL5 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL32 DEL59 DEL60 DEL83 DEL9 DEL9 DEL45 DEL9 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL8 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL60