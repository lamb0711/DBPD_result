Merging r1544666 through r1547120 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1547122 13f79535-47bb-0310-9956-ffa450edef68

+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+import org.apache.hadoop.http.HttpServer;
-}
+
+  public static HttpServer.Builder loadSslConfToHttpServerBuilder(
+      HttpServer.Builder builder, Configuration sslConf) {
+    return builder
+        .needsClientAuth(
+            sslConf.getBoolean(DFSConfigKeys.DFS_CLIENT_HTTPS_NEED_AUTH_KEY,
+                DFSConfigKeys.DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT))
+        .keyPassword(sslConf.get("ssl.server.keystore.keypassword"))
+        .keyStore(sslConf.get("ssl.server.keystore.location"),
+            sslConf.get("ssl.server.keystore.password"),
+            sslConf.get("ssl.server.keystore.type", "jks"))
+        .trustStore(sslConf.get("ssl.server.truststore.location"),
+            sslConf.get("ssl.server.truststore.password"),
+            sslConf.get("ssl.server.truststore.type", "jks"));
+  }
+
+  /**
+   * Converts a Date into an ISO-8601 formatted datetime string.
+   */
+  public static String dateToIso8601String(Date date) {
+    SimpleDateFormat df =
+        new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", Locale.ENGLISH);
+    return df.format(date);
+  }
+
+  /**
+   * Converts a time duration in milliseconds into DDD:HH:MM:SS format.
+   */
+  public static String durationToString(long durationMs) {
+    Preconditions.checkArgument(durationMs >= 0, "Invalid negative duration");
+    // Chop off the milliseconds
+    long durationSec = durationMs / 1000;
+    final int secondsPerMinute = 60;
+    final int secondsPerHour = 60*60;
+    final int secondsPerDay = 60*60*24;
+    final long days = durationSec / secondsPerDay;
+    durationSec -= days * secondsPerDay;
+    final long hours = durationSec / secondsPerHour;
+    durationSec -= hours * secondsPerHour;
+    final long minutes = durationSec / secondsPerMinute;
+    durationSec -= minutes * secondsPerMinute;
+    final long seconds = durationSec;
+    return String.format("%03d:%02d:%02d:%02d", days, hours, minutes, seconds);
+  }
+
+  /**
+   * Converts a relative time string into a duration in milliseconds.
+   */
+  public static long parseRelativeTime(String relTime) throws IOException {
+    if (relTime.length() < 2) {
+      throw new IOException("Unable to parse relative time value of " + relTime
+          + ": too short");
+    }
+    String ttlString = relTime.substring(0, relTime.length()-1);
+    int ttl;
+    try {
+      ttl = Integer.parseInt(ttlString);
+    } catch (NumberFormatException e) {
+      throw new IOException("Unable to parse relative time value of " + relTime
+          + ": " + ttlString + " is not a number");
+    }
+    if (relTime.endsWith("s")) {
+      // pass
+    } else if (relTime.endsWith("m")) {
+      ttl *= 60;
+    } else if (relTime.endsWith("h")) {
+      ttl *= 60*60;
+    } else if (relTime.endsWith("d")) {
+      ttl *= 60*60*24;
+    } else {
+      throw new IOException("Unable to parse relative time value of " + relTime
+          + ": unknown time unit " + relTime.charAt(relTime.length() - 1));
+    }
+    return ttl*1000;
+  }
+}

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS40 INS43 INS42 INS43 INS42 INS41 INS65 INS42 INS43 INS42 INS60 INS41 INS65 INS42 INS39 INS42 INS21 INS60 INS60 INS60 INS60 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS41 INS65 INS43 INS42 INS42 INS25 INS60 INS60 INS54 INS25 INS41 INS40 INS42 INS32 INS66 INS42 INS43 INS59 INS32 INS66 INS32 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS7 INS83 INS39 INS59 INS7 INS83 INS39 INS59 INS7 INS83 INS39 INS59 INS32 INS66 INS42 INS27 INS8 INS43 INS59 INS39 INS59 INS8 INS12 INS32 INS8 INS25 INS27 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS27 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS34 INS53 INS42 INS42 INS32 INS42 INS21 INS44 INS8 INS42 INS42 INS45 INS32 INS8 INS25 INS42 INS34 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS45 INS43 INS45 INS40 INS42 INS34 INS42 INS34 INS34 INS34 INS34 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS34 INS27 INS7 INS43 INS42 INS53 INS42 INS42 INS45 INS21 INS32 INS8 INS25 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS45 INS42 INS43 INS27 INS32 INS34 INS42 INS32 INS42 INS14 INS7 INS42 INS42 INS45 INS21 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS34 INS7 INS42 INS42 INS45 INS21 INS53 INS42 INS42 INS40 INS40 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS27 INS7 INS14 INS34 INS34 INS42 INS27 INS43 INS27 INS34 INS34 INS34 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS27 INS32 INS34 INS42 INS42