Merge trunk into HDFS-6581

+import com.google.common.collect.Lists;
+import org.apache.hadoop.hdfs.inotify.Event;
+import org.apache.hadoop.hdfs.inotify.EventsList;
+
+  @Override // ClientProtocol
+  public long getCurrentEditLogTxid() throws IOException {
+    namesystem.checkOperation(OperationCategory.READ); // only active
+    namesystem.checkSuperuserPrivilege();
+    // if it's not yet open for write, we may be in the process of transitioning
+    // from standby to active and may not yet know what the latest committed
+    // txid is
+    return namesystem.getEditLog().isOpenForWrite() ?
+        namesystem.getEditLog().getLastWrittenTxId() : -1;
+  }
+
+  private static FSEditLogOp readOp(EditLogInputStream elis)
+      throws IOException {
+    try {
+      return elis.readOp();
+      // we can get the below two exceptions if a segment is deleted
+      // (because we have accumulated too many edits) or (for the local journal/
+      // no-QJM case only) if a in-progress segment is finalized under us ...
+      // no need to throw an exception back to the client in this case
+    } catch (FileNotFoundException e) {
+      LOG.debug("Tried to read from deleted or moved edit log segment", e);
+      return null;
+    } catch (TransferFsImage.HttpGetFailedException e) {
+      LOG.debug("Tried to read from deleted edit log segment", e);
+      return null;
+    }
+  }
+
+  @Override // ClientProtocol
+  public EventsList getEditsFromTxid(long txid) throws IOException {
+    namesystem.checkOperation(OperationCategory.READ); // only active
+    namesystem.checkSuperuserPrivilege();
+    int maxEventsPerRPC = nn.conf.getInt(
+        DFSConfigKeys.DFS_NAMENODE_INOTIFY_MAX_EVENTS_PER_RPC_KEY,
+        DFSConfigKeys.DFS_NAMENODE_INOTIFY_MAX_EVENTS_PER_RPC_DEFAULT);
+    FSEditLog log = namesystem.getFSImage().getEditLog();
+    long syncTxid = log.getSyncTxId();
+    // If we haven't synced anything yet, we can only read finalized
+    // segments since we can't reliably determine which txns in in-progress
+    // segments have actually been committed (e.g. written to a quorum of JNs).
+    // If we have synced txns, we can definitely read up to syncTxid since
+    // syncTxid is only updated after a transaction is committed to all
+    // journals. (In-progress segments written by old writers are already
+    // discarded for us, so if we read any in-progress segments they are
+    // guaranteed to have been written by this NameNode.)
+    boolean readInProgress = syncTxid > 0;
+
+    List<Event> events = Lists.newArrayList();
+    long maxSeenTxid = -1;
+    long firstSeenTxid = -1;
+
+    if (syncTxid > 0 && txid > syncTxid) {
+      // we can't read past syncTxid, so there's no point in going any further
+      return new EventsList(events, firstSeenTxid, maxSeenTxid, syncTxid);
+    }
+
+    Collection<EditLogInputStream> streams = null;
+    try {
+      streams = log.selectInputStreams(txid, 0, null, readInProgress);
+    } catch (IllegalStateException e) { // can happen if we have
+      // transitioned out of active and haven't yet transitioned to standby
+      // and are using QJM -- the edit log will be closed and this exception
+      // will result
+      LOG.info("NN is transitioning from active to standby and FSEditLog " +
+      "is closed -- could not read edits");
+      return new EventsList(events, firstSeenTxid, maxSeenTxid, syncTxid);
+    }
+
+    boolean breakOuter = false;
+    for (EditLogInputStream elis : streams) {
+      // our assumption in this code is the EditLogInputStreams are ordered by
+      // starting txid
+      try {
+        FSEditLogOp op = null;
+        while ((op = readOp(elis)) != null) {
+          // break out of here in the unlikely event that syncTxid is so
+          // out of date that its segment has already been deleted, so the first
+          // txid we get is greater than syncTxid
+          if (syncTxid > 0 && op.getTransactionId() > syncTxid) {
+            breakOuter = true;
+            break;
+          }
+
+          Event[] eventsFromOp = InotifyFSEditLogOpTranslator.translate(op);
+          if (eventsFromOp != null) {
+            events.addAll(Arrays.asList(eventsFromOp));
+          }
+          if (op.getTransactionId() > maxSeenTxid) {
+            maxSeenTxid = op.getTransactionId();
+          }
+          if (firstSeenTxid == -1) {
+            firstSeenTxid = op.getTransactionId();
+          }
+          if (events.size() >= maxEventsPerRPC || (syncTxid > 0 &&
+              op.getTransactionId() == syncTxid)) {
+            // we're done
+            breakOuter = true;
+            break;
+          }
+        }
+      } finally {
+        elis.close();
+      }
+      if (breakOuter) {
+        break;
+      }
+    }
+
+    return new EventsList(events, firstSeenTxid, maxSeenTxid, syncTxid);
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS21 INS21 INS41 INS42 INS43 INS42 INS42 INS54 INS42 INS42 INS39 INS42 INS42 INS21 INS21 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS54 INS60 INS70 INS41 INS32 INS32 INS16 INS42 INS8 INS12 INS12 INS32 INS32 INS39 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS74 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS74 INS59 INS8 INS12 INS39 INS59 INS44 INS42 INS8 INS14 INS42 INS42 INS40 INS42 INS42 INS32 INS32 INS38 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS43 INS43 INS42 INS32 INS42 INS38 INS42 INS38 INS27 INS27 INS41 INS43 INS43 INS42 INS33 INS21 INS44 INS8 INS42 INS9 INS43 INS42 INS54 INS25 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS32 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS41 INS40 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS34 INS42 INS34 INS42 INS42 INS14 INS42 INS42 INS7 INS43 INS42 INS21 INS41 INS42 INS8 INS8 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS40 INS32 INS33 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS14 INS60 INS61 INS21 INS10 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS33 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS45 INS45 INS42 INS42 INS42 INS33 INS36 INS33 INS25 INS60 INS25 INS25 INS25 INS25 INS42 INS42 INS7 INS27 INS8 INS5 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS32 INS27 INS27 INS21 INS10 INS43 INS85 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS21 INS42 INS38 INS21 INS27 INS36 INS21 INS10 INS42 INS42 INS42 INS34 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS34 INS7 INS32 INS42 INS27 INS7 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42