YARN-5830. FairScheduler: Avoid preempting AM containers. (Yufei Gu via kasha)

-          List<RMContainer> containers =
+          PreemptableContainers containers =
-            preemptContainers(containers);
+            preemptContainers(containers.containers);
-  private List<RMContainer> identifyContainersToPreempt(
+  private PreemptableContainers identifyContainersToPreempt(
-    List<RMContainer> containers = new ArrayList<>(); // return value
+    PreemptableContainers bestContainers = null;
-      // Reset containers for the new node being considered.
-      containers.clear();
-
-      // Figure out list of containers to consider
-      List<RMContainer> containersToCheck =
-          node.getCopiedListOfRunningContainers();
-      containersToCheck.removeAll(node.getContainersForPreemption());
-
-      // Initialize potential with unallocated resources
-      Resource potential = Resources.clone(node.getUnallocatedResource());
-      for (RMContainer container : containersToCheck) {
-        FSAppAttempt app =
-            scheduler.getSchedulerApp(container.getApplicationAttemptId());
-
-        if (app.canContainerBePreempted(container)) {
-          // Flag container for preemption
-          containers.add(container);
-          Resources.addTo(potential, container.getAllocatedResource());
-        }
-
-        // Check if we have already identified enough containers
-        if (Resources.fitsIn(requestCapability, potential)) {
-          // Mark the containers as being considered for preemption on the node.
-          // Make sure the containers are subsequently removed by calling
-          // FSSchedulerNode#removeContainerForPreemption.
-          node.addContainersForPreemption(containers);
-          return containers;
+      int maxAMContainers = bestContainers == null ?
+          Integer.MAX_VALUE : bestContainers.numAMContainers;
+      PreemptableContainers preemptableContainers =
+          identifyContainersToPreemptOnNode(requestCapability, node,
+              maxAMContainers);
+      if (preemptableContainers != null) {
+        if (preemptableContainers.numAMContainers == 0) {
+          return preemptableContainers;
-          // TODO (YARN-5829): Unreserve the node for the starved app.
+          bestContainers = preemptableContainers;
+
+    return bestContainers;
+  }
+
+  /**
+   * Identify containers to preempt on a given node. Try to find a list with
+   * least AM containers to avoid preempting AM containers. This method returns
+   * a non-null set of containers only if the number of AM containers is less
+   * than maxAMContainers.
+   *
+   * @param request resource requested
+   * @param node the node to check
+   * @param maxAMContainers max allowed AM containers in the set
+   * @return list of preemptable containers with fewer AM containers than
+   *         maxAMContainers if such a list exists; null otherwise.
+   */
+  private PreemptableContainers identifyContainersToPreemptOnNode(
+      Resource request, FSSchedulerNode node, int maxAMContainers) {
+    PreemptableContainers preemptableContainers =
+        new PreemptableContainers(maxAMContainers);
+
+    // Figure out list of containers to consider
+    List<RMContainer> containersToCheck =
+        node.getRunningContainersWithAMsAtTheEnd();
+    containersToCheck.removeAll(node.getContainersForPreemption());
+
+    // Initialize potential with unallocated resources
+    Resource potential = Resources.clone(node.getUnallocatedResource());
+
+    for (RMContainer container : containersToCheck) {
+      FSAppAttempt app =
+          scheduler.getSchedulerApp(container.getApplicationAttemptId());
+
+      if (app.canContainerBePreempted(container)) {
+        // Flag container for preemption
+        if (!preemptableContainers.addContainer(container)) {
+          return null;
+        }
+
+        Resources.addTo(potential, container.getAllocatedResource());
+      }
+
+      // Check if we have already identified enough containers
+      if (Resources.fitsIn(request, potential)) {
+        return preemptableContainers;
+      } else {
+        // TODO (YARN-5829): Unreserve the node for the starved app.
+      }
+    }
+    // Mark the containers as being considered for preemption on the node.
+    // Make sure the containers are subsequently removed by calling
+    // FSSchedulerNode#removeContainerForPreemption.
+    if (containers.size() > 0) {
+      FSSchedulerNode node = (FSSchedulerNode) scheduler.getNodeTracker()
+          .getNode(containers.get(0).getNodeId());
+      node.addContainersForPreemption(containers);
+    }
+
+
+  /**
+   * A class to track preemptable containers.
+   */
+  private static class PreemptableContainers {
+    List<RMContainer> containers;
+    int numAMContainers;
+    int maxAMContainers;
+
+    PreemptableContainers(int maxAMContainers) {
+      containers = new ArrayList<>();
+      numAMContainers = 0;
+      this.maxAMContainers = maxAMContainers;
+    }
+
+    /**
+     * Add a container if the number of AM containers is less than
+     * maxAMContainers.
+     *
+     * @param container the container to add
+     * @return true if success; false otherwise
+     */
+    private boolean addContainer(RMContainer container) {
+      if (container.isAMContainer()) {
+        numAMContainers++;
+        if (numAMContainers >= maxAMContainers) {
+          return false;
+        }
+      }
+
+      containers.add(container);
+      return true;
+    }
+  }

INS31 INS55 INS43 INS29 INS83 INS43 INS42 INS44 MOV44 INS44 MOV8 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 UPD42 MOV42 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS60 INS41 INS25 INS65 MOV74 INS59 INS39 INS59 INS39 INS59 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS43 INS44 INS8 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS59 MOV33 INS27 INS8 INS66 INS42 INS42 INS42 INS39 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS25 MOV21 INS41 INS42 UPD42 INS33 INS43 INS42 MOV60 MOV25 INS60 INS60 INS25 INS42 INS42 INS14 INS32 INS34 INS60 MOV21 INS7 INS7 INS7 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS8 INS9 INS42 INS39 INS59 INS43 INS59 INS27 INS8 INS43 INS42 UPD42 INS42 INS42 INS43 INS59 INS42 MOV14 INS42 INS34 INS22 INS42 INS42 INS42 INS21 INS25 INS42 INS16 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS25 UPD42 INS42 INS42 INS11 INS52 INS42 INS37 INS27 INS8 INS27 INS40 INS40 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS38 INS8 UPD42 INS43 INS32 INS42 INS42 INS42 INS41 INS42 INS33 INS40 INS34 INS41 INS21 INS32 INS41 INS42 INS32 INS42 INS32 INS9 INS43 INS42 INS7 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS34 INS40 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL21