HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
-import java.util.SortedMap;
-import java.util.TreeMap;
-import org.apache.hadoop.hdfs.server.namenode.snapshot.diff.Diff;
+import org.apache.hadoop.hdfs.server.namenode.INodeFile;
+import com.google.common.primitives.SignedBytes;
+    /** Compare two inodes based on their full names */
-          return right == null ? 1 : left.compareTo(right.getLocalNameBytes());
+          if (right == null) {
+            return 1;
+          } else {
+            int cmp = compare(left.getParent(), right.getParent());
+            return cmp == 0 ? SignedBytes.lexicographicalComparator().compare(
+                left.getLocalNameBytes(), right.getLocalNameBytes()) : cmp;
+          }
-     * A map capturing the detailed difference. Each key indicates a directory
-     * whose metadata or children have been changed between the two snapshots,
-     * while its associated value is a {@link Diff} storing the changes happened
-     * to the children (files).
+     * The list recording modified INodeFile and INodeDirectory. Sorted based on
+     * their names.
+     */ 
+    private final List<INode> diffList = new ArrayList<INode>();;
+    /**
+     * A map capturing the detailed difference about file creation/deletion.
+     * Each key indicates a directory whose children have been changed between
+     * the two snapshots, while its associated value is a {@link ChildrenDiff}
+     * storing the changes (creation/deletion) happened to the children (files).
-    private final SortedMap<INodeDirectoryWithSnapshot, ChildrenDiff> diffMap;
+    private final Map<INodeDirectoryWithSnapshot, ChildrenDiff> diffMap = 
+        new HashMap<INodeDirectoryWithSnapshot, ChildrenDiff>();
-    public SnapshotDiffInfo(INodeDirectorySnapshottable snapshotRoot,
-        Snapshot start, Snapshot end) {
+    SnapshotDiffInfo(INodeDirectorySnapshottable snapshotRoot, Snapshot start,
+        Snapshot end) {
-      this.diffMap = new TreeMap<INodeDirectoryWithSnapshot, ChildrenDiff>(
-          INODE_COMPARATOR);
-    /** Add a dir-diff pair into {@link #diffMap} */
-    public void addDiff(INodeDirectoryWithSnapshot dir, ChildrenDiff diff) {
+    /** Add a dir-diff pair */
+    private void addDirDiff(INodeDirectoryWithSnapshot dir, ChildrenDiff diff) {
+      int i = Collections.binarySearch(diffList, dir, INODE_COMPARATOR);
+      if (i < 0) {
+        diffList.add(-i - 1, dir);
+      }
-    /** 
-     * Get the name of the given snapshot. 
-     * @param s The given snapshot.
-     * @return The name of the snapshot, or an empty string if {@code s} is null
-     */
-    private static String getSnapshotName(Snapshot s) {
-      return s != null ? s.getRoot().getLocalName() : "";
+    /** Add a modified file */ 
+    private void addFileDiff(INodeFile file) {
+      int i = Collections.binarySearch(diffList, file, INODE_COMPARATOR);
+      if (i < 0) {
+        diffList.add(-i - 1, file);
+      }
-      return to == null
-          || (from != null && Snapshot.ID_COMPARATOR.compare(from, to) < 0);
+      return Snapshot.ID_COMPARATOR.compare(from, to) < 0;
-      List<DiffReportEntry> diffList = new ArrayList<DiffReportEntry>();
-      for (Map.Entry<INodeDirectoryWithSnapshot, ChildrenDiff> entry : diffMap
-          .entrySet()) {
-        diffList.add(new DiffReportEntry(DiffType.MODIFY, entry.getKey()
-            .getFullPathName()));
-        List<DiffReportEntry> subList = entry.getValue().generateReport(
-            entry.getKey(), isFromEarlier());
-        diffList.addAll(subList);
+      List<DiffReportEntry> diffReportList = new ArrayList<DiffReportEntry>();
+      for (INode node : diffList) {
+        diffReportList.add(new DiffReportEntry(DiffType.MODIFY, node
+            .getRelativePathNameBytes(snapshotRoot)));
+        if (node.isDirectory()) {
+          ChildrenDiff dirDiff = diffMap.get(node);
+          List<DiffReportEntry> subList = dirDiff.generateReport(snapshotRoot,
+              (INodeDirectoryWithSnapshot) node, isFromEarlier());
+          diffReportList.addAll(subList);
+        }
-          getSnapshotName(from), getSnapshotName(to), diffList);
+          Snapshot.getSnapshotName(from), Snapshot.getSnapshotName(to),
+          diffReportList);
-    computeDiffInDir(this, diffs);
+    computeDiffRecursively(this, diffs);
-   * directory.
-   * @param dir The directory under which the diff is computed.
+   * directory/file.
+   * @param node The directory/file under which the diff is computed.
-  private void computeDiffInDir(INodeDirectory dir,
+  private void computeDiffRecursively(INode node, 
-    if (dir instanceof INodeDirectoryWithSnapshot) {
-      boolean change = ((INodeDirectoryWithSnapshot) dir)
-          .computeDiffBetweenSnapshots(diffReport.from,
-              diffReport.to, diff);
-      if (change) {
-        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,
-            diff); 
+    if (node instanceof INodeDirectory) {
+      INodeDirectory dir = (INodeDirectory) node;
+      if (dir instanceof INodeDirectoryWithSnapshot) {
+        INodeDirectoryWithSnapshot sdir = (INodeDirectoryWithSnapshot) dir;
+        boolean change = sdir.computeDiffBetweenSnapshots(
+            diffReport.from, diffReport.to, diff);
+        if (change) {
+          diffReport.addDirDiff(sdir, diff);
+        }
-    }
-    ReadOnlyList<INode> children = dir.getChildrenList(null);
-    for (INode child : children) {
-      if (child instanceof INodeDirectory
-          && diff.searchCreated(child.getLocalNameBytes()) == null) {
-        // Compute diff recursively for children that are directories. We do not
-        // need to compute diff for those contained in the created list since 
-        // directory contained in the created list must be new created.
-        computeDiffInDir((INodeDirectory) child, diffReport);
+      ReadOnlyList<INode> children = dir.getChildrenList(diffReport
+          .isFromEarlier() ? diffReport.to : diffReport.from);
+      for (INode child : children) {
+        if (diff.searchCreated(child.getLocalNameBytes()) == null
+            && diff.searchDeleted(child.getLocalNameBytes()) == null) {
+          computeDiffRecursively(child, diffReport);
+        }
+      }
+    } else if (node instanceof FileWithSnapshot) {
+      FileWithSnapshot file = (FileWithSnapshot) node;
+      Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.from
+          : diffReport.to;
+      Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.to
+          : diffReport.from;
+      boolean change = file.getDiffs().changedBetweenSnapshots(earlierSnapshot,
+          laterSnapshot);
+      if (change) {
+        diffReport.addFileDiff(file.asINodeFile());

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS23 UPD42 INS8 INS29 INS29 INS83 INS83 INS74 INS59 UPD74 MOV74 UPD83 UPD42 INS8 INS39 INS42 INS44 INS8 INS43 INS42 MOV60 INS25 INS65 INS65 INS43 INS43 INS42 INS14 UPD43 INS14 MOV21 INS60 INS25 INS43 INS42 INS60 INS25 UPD66 UPD42 UPD66 INS42 MOV62 INS8 INS25 INS66 INS66 INS66 INS42 INS42 INS74 UPD66 UPD66 UPD66 UPD66 UPD42 UPD74 MOV74 UPD66 INS39 INS59 INS27 INS8 UPD66 UPD42 MOV42 INS39 INS59 INS27 INS8 MOV27 INS42 UPD42 UPD42 INS60 MOV25 MOV60 MOV70 INS62 INS8 INS43 INS43 UPD42 UPD43 INS42 INS32 INS42 INS34 INS21 INS42 INS32 UPD42 MOV42 INS34 INS21 UPD42 INS43 UPD42 INS25 UPD42 MOV43 INS59 INS42 INS43 INS60 INS60 INS60 INS60 INS25 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS11 INS60 INS42 INS43 INS59 MOV43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS42 INS42 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 INS42 INS42 INS60 MOV60 MOV21 MOV43 INS42 INS43 INS59 INS16 INS42 INS42 INS11 INS42 INS16 INS42 INS42 INS16 INS42 INS32 INS21 INS8 INS38 INS34 INS38 INS34 MOV43 INS59 INS42 INS42 MOV11 INS32 INS40 INS40 INS27 INS43 INS42 INS32 INS40 INS40 INS32 INS40 INS40 INS32 INS42 INS42 INS42 INS32 INS25 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV27 INS8 MOV8 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS11 UPD42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS41 INS60 MOV43 INS42 INS42 INS42 INS34 INS39 INS59 INS42 INS32 INS27 INS32 INS42 INS42 INS32 INS32 INS42 INS34 INS32 INS42 INS32 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 DEL34 DEL32 DEL66 DEL83 DEL52 DEL42 DEL22 DEL42 DEL14 DEL7 DEL21 DEL42 DEL67 DEL65 DEL66 DEL8 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL83 DEL43 DEL42 DEL42 DEL44 DEL33 DEL27 DEL32 DEL32 DEL45 DEL16 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL36 DEL27 DEL40 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL33 DEL42 DEL11 DEL8