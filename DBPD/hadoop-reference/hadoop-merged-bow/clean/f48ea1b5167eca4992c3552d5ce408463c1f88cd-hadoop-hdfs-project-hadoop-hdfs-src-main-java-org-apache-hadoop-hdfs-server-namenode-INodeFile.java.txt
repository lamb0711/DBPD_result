Merging r1544304 through r1544665 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1544672 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import org.apache.hadoop.hdfs.protocol.Block;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockCollection;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoUnderConstruction;
-import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor;
+import org.apache.hadoop.hdfs.server.blockmanagement.*;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.BlockUCState;
+  /**
+   * A feature contains specific information for a type of INodeFile. E.g.,
+   * we can have separate features for Under-Construction and Snapshot.
+   */
+  public static abstract class Feature {
+    private Feature nextFeature;
+
+    public Feature getNextFeature() {
+      return nextFeature;
+    }
+
+    public void setNextFeature(Feature next) {
+      this.nextFeature = next;
+    }
+  }
+
-  INodeFile(long id, byte[] name, PermissionStatus permissions, long mtime, long atime,
-      BlockInfo[] blklist, short replication, long preferredBlockSize) {
+  private Feature headFeature;
+
+  INodeFile(long id, byte[] name, PermissionStatus permissions, long mtime,
+      long atime, BlockInfo[] blklist, short replication,
+      long preferredBlockSize) {
+    this.headFeature = that.headFeature;
+  }
+
+  /**
+   * If the inode contains a {@link FileUnderConstructionFeature}, return it;
+   * otherwise, return null.
+   */
+  public final FileUnderConstructionFeature getFileUnderConstructionFeature() {
+    for (Feature f = this.headFeature; f != null; f = f.nextFeature) {
+      if (f instanceof FileUnderConstructionFeature) {
+        return (FileUnderConstructionFeature) f;
+      }
+    }
+    return null;
+  }
+
+  /** Is this file under construction? */
+  @Override // BlockCollection
+  public boolean isUnderConstruction() {
+    return getFileUnderConstructionFeature() != null;
+  }
+
+  void addFeature(Feature f) {
+    f.nextFeature = headFeature;
+    headFeature = f;
+  }
+
+  void removeFeature(Feature f) {
+    if (f == headFeature) {
+      headFeature = headFeature.nextFeature;
+      return;
+    } else if (headFeature != null) {
+      Feature prev = headFeature;
+      Feature curr = headFeature.nextFeature;
+      for (; curr != null && curr != f; prev = curr, curr = curr.nextFeature)
+        ;
+      if (curr != null) {
+        prev.nextFeature = curr.nextFeature;
+        return;
+      }
+    }
+    throw new IllegalStateException("Feature " + f + " not found.");
-  /** Is this file under construction? */
-  public boolean isUnderConstruction() {
-    return false;
-  }
+  /* Start of Under-Construction Feature */
-  public INodeFileUnderConstruction toUnderConstruction(
-      String clientName,
-      String clientMachine,
+  public INodeFile toUnderConstruction(String clientName, String clientMachine,
-    return new INodeFileUnderConstruction(this,
-        clientName, clientMachine, clientNode); 
+    FileUnderConstructionFeature uc = new FileUnderConstructionFeature(
+        clientName, clientMachine, clientNode);
+    addFeature(uc);
+    return this;
+  /**
+   * Convert the file to a complete file, i.e., to remove the Under-Construction
+   * feature.
+   */
+  public INodeFile toCompleteFile(long mtime) {
+    FileUnderConstructionFeature uc = getFileUnderConstructionFeature();
+    if (uc != null) {
+      assertAllBlocksComplete();
+      removeFeature(uc);
+      this.setModificationTime(mtime);
+    }
+    return this;
+  }
+
+  /** Assert all blocks are complete. */
+  private void assertAllBlocksComplete() {
+    if (blocks == null) {
+      return;
+    }
+    for (int i = 0; i < blocks.length; i++) {
+      Preconditions.checkState(blocks[i].isComplete(), "Failed to finalize"
+          + " %s %s since blocks[%s] is non-complete, where blocks=%s.",
+          getClass().getSimpleName(), this, i, Arrays.asList(blocks));
+    }
+  }
+
+  @Override //BlockCollection
+  public void setBlock(int index, BlockInfo blk) {
+    this.blocks[index] = blk;
+  }
+
+  @Override // BlockCollection
+  public BlockInfoUnderConstruction setLastBlock(BlockInfo lastBlock,
+      DatanodeStorageInfo[] locations) throws IOException {
+    Preconditions.checkState(isUnderConstruction());
+
+    if (numBlocks() == 0) {
+      throw new IOException("Failed to set last block: File is empty.");
+    }
+    BlockInfoUnderConstruction ucBlock =
+      lastBlock.convertToBlockUnderConstruction(
+          BlockUCState.UNDER_CONSTRUCTION, locations);
+    ucBlock.setBlockCollection(this);
+    setBlock(numBlocks() - 1, ucBlock);
+    return ucBlock;
+  }
+
+  /**
+   * Remove a block from the block list. This block should be
+   * the last one on the list.
+   */
+  boolean removeLastBlock(Block oldblock) {
+    if (blocks == null || blocks.length == 0) {
+      return false;
+    }
+    int size_1 = blocks.length - 1;
+    if (!blocks[size_1].equals(oldblock)) {
+      return false;
+    }
+
+    //copy to a new list
+    BlockInfo[] newlist = new BlockInfo[size_1];
+    System.arraycopy(blocks, 0, newlist, 0, size_1);
+    setBlocks(newlist);
+    return true;
+  }
+
+  /* End of Under-Construction Feature */
+
-  /** Set the block of the file at the given index. */
-  public void setBlock(int idx, BlockInfo blk) {
-    this.blocks[idx] = blk;
-  }
-
+    } else if (snapshot == null && prior != null) {
+      FileUnderConstructionFeature uc = getFileUnderConstructionFeature();
+      if (uc != null) {
+        uc.cleanZeroSizeBlock(this, collectedBlocks);
+      }

MOV26 MOV26 MOV31 MOV31 UPD40 UPD40 UPD40 UPD40 INS55 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS42 INS23 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS8 INS78 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS8 UPD43 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS78 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS39 INS42 INS44 INS8 INS65 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS21 INS65 INS42 INS24 INS41 INS42 INS41 INS43 INS42 INS21 INS21 INS43 INS42 INS25 INS53 UPD42 INS60 INS21 INS41 INS65 INS42 INS39 INS42 INS60 INS25 INS41 INS65 INS25 INS24 INS42 UPD42 INS42 INS42 INS43 INS42 INS5 INS42 INS42 INS21 INS25 INS60 INS21 INS21 INS41 INS65 INS43 INS42 INS25 INS60 INS25 INS60 INS21 INS21 INS41 INS66 INS66 INS42 INS42 INS42 INS41 INS43 INS42 INS21 INS7 INS66 INS65 INS66 INS66 INS58 INS27 INS7 INS8 INS33 INS27 INS42 INS7 INS7 INS42 INS27 INS8 INS25 INS14 INS43 INS59 INS32 INS52 INS66 INS66 INS43 INS59 INS27 INS8 INS52 INS66 INS27 INS8 INS58 INS27 INS37 INS8 INS42 INS43 INS85 INS32 INS27 INS8 INS43 INS59 INS32 INS32 INS42 INS66 INS66 INS42 INS27 MOV8 INS39 INS59 INS38 INS8 INS5 INS59 INS32 INS32 INS9 INS25 INS42 INS42 INS7 INS22 INS40 INS42 INS43 INS59 INS42 INS33 INS42 INS40 INS25 INS32 INS33 INS40 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS27 INS8 INS43 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS33 INS41 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS32 INS32 INS34 INS53 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS27 INS42 INS27 INS27 INS42 INS27 INS32 INS41 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS27 INS8 INS22 INS42 INS52 INS42 INS42 INS42 INS22 INS62 INS8 INS42 INS7 INS42 INS33 INS60 INS60 INS24 INS25 INS42 INS45 INS42 INS45 UPD43 MOV43 MOV42 MOV42 MOV42 INS42 INS32 INS32 INS32 INS42 INS34 INS32 UPD42 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS32 INS34 INS42 INS33 INS40 INS34 INS40 INS34 INS2 INS42 INS42 INS9 INS42 INS5 INS42 INS27 INS27 INS60 INS25 INS52 INS42 INS52 INS42 INS42 INS43 INS41 INS42 INS40 INS43 INS59 INS43 INS59 INS27 INS7 INS7 INS20 INS27 INS8 UPD42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS52 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS43 INS85 INS42 INS33 INS42 INS33 INS43 INS59 INS27 INS8 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS27 INS42 INS42 INS42 INS40 INS42 INS33 INS21 INS41 INS2 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS33 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS52 INS42 DEL52 DEL14 DEL41 DEL66 DEL65 DEL29