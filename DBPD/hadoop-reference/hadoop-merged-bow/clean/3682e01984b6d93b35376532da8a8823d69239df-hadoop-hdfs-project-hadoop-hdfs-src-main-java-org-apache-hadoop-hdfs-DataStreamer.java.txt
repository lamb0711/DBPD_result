HDFS-8254. Avoid assigning a leading streamer in StripedDataStreamer to tolerate datanode failure. Contributed by Tsz Wo Nicholas Sze.

-    private boolean extenalError = false;
+    private boolean externalError = false;
-      extenalError = false;
+      externalError = false;
+    synchronized boolean hasExternalErrorOnly() {
+      return error && externalError && !isNodeMarked();
+    }
+
-      return error && (isNodeMarked() || extenalError);
+      return error && (isNodeMarked() || externalError);
-    synchronized void initExtenalError() {
+    synchronized void initExternalError() {
-      this.extenalError = true;
+      this.externalError = true;
-  private DataStreamer(HdfsFileStatus stat, DFSClient dfsClient, String src,
+  private DataStreamer(HdfsFileStatus stat, ExtendedBlock block,
+                       DFSClient dfsClient, String src,
+    this.block = block;
-    this(stat, dfsClient, src, progress, checksum, cachingStrategy,
+    this(stat, block, dfsClient, src, progress, checksum, cachingStrategy,
-    this.block = block;
-    this(stat, dfsClient, src, progress, checksum, cachingStrategy,
+    this(stat, lastBlock.getBlock(), dfsClient, src, progress, checksum, cachingStrategy,
-    block = lastBlock.getBlock();
+    if (errorState.hasExternalErrorOnly() && block == null) {
+      // block is not yet initialized, handle external error later.
+      return false;
+    }
+    return callUpdateBlockForPipeline(block);
+  }
+
+  LocatedBlock callUpdateBlockForPipeline(ExtendedBlock newBlock) throws IOException {
-        block, dfsClient.clientName);
+        newBlock, dfsClient.clientName);
+  }
+
+  static ExtendedBlock newBlock(ExtendedBlock b, final long newGS) {
+    return new ExtendedBlock(b.getBlockPoolId(), b.getBlockId(),
+        b.getNumBytes(), newGS);
-    final ExtendedBlock newBlock = new ExtendedBlock(
-        block.getBlockPoolId(), block.getBlockId(), block.getNumBytes(), newGS);
-    dfsClient.namenode.updatePipeline(dfsClient.clientName, block, newBlock,
+    final ExtendedBlock newBlock = newBlock(block, newGS);
+    return callUpdatePipeline(block, newBlock);
+  }
+
+  ExtendedBlock callUpdatePipeline(ExtendedBlock oldBlock, ExtendedBlock newBlock)
+      throws IOException {
+    dfsClient.namenode.updatePipeline(dfsClient.clientName, oldBlock, newBlock,

INS31 INS31 INS31 INS31 INS31 INS44 MOV43 INS42 MOV43 INS8 INS43 UPD42 INS44 INS43 INS83 MOV43 UPD42 MOV42 INS44 INS44 INS8 MOV29 MOV43 INS42 MOV44 MOV43 INS8 INS43 INS42 INS44 INS44 INS43 INS8 UPD42 INS83 INS39 INS42 INS8 UPD42 INS43 INS42 MOV21 INS25 INS41 INS42 MOV43 INS42 INS42 INS43 INS42 INS83 INS39 INS42 INS41 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS42 MOV21 MOV41 UPD42 INS41 INS42 INS42 MOV32 INS27 INS8 INS32 INS42 INS14 INS83 INS43 INS59 INS32 INS42 INS42 UPD27 MOV27 INS27 INS32 INS27 INS41 INS42 INS42 UPD42 INS43 MOV32 MOV32 MOV32 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 INS38 INS42 INS36 INS42 INS42 INS42 INS33 INS9 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 MOV32 INS27 UPD42 INS32 INS42 INS42 DEL42 DEL36 DEL27 DEL42 DEL7 DEL21 DEL83 DEL42 DEL14 DEL59 DEL60 DEL8 DEL31