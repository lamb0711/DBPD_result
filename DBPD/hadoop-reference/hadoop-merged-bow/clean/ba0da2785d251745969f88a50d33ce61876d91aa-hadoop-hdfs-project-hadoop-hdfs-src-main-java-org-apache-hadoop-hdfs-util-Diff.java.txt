HDFS-13252. Code refactoring: Remove Diff.ListType.

-  public enum ListType {
-    CREATED, DELETED
-  }
-
-  /** @return the created list, which is never null. */
-  public List<E> getList(final ListType type) {
-    final List<E> list = type == ListType.CREATED? created: deleted;
-    return list == null? Collections.<E>emptyList(): list;
+  public List<E> getCreatedUnmodifiable() {
+    return created != null? Collections.unmodifiableList(created)
+        : Collections.emptyList();
-  public int searchIndex(final ListType type, final K name) {
-    return search(getList(type), name);
+  public E setCreated(int index, E element) {
+    final E old = created.set(index, element);
+    if (old.compareTo(element.getKey()) != 0) {
+      throw new AssertionError("Element mismatched: element=" + element
+          + " but old=" + old);
+    }
+    return old;
+  }
+
+  public void clearCreated() {
+    if (created != null) {
+      created.clear();
+    }
+  }
+
+  public List<E> getDeletedUnmodifiable() {
+    return deleted != null? Collections.unmodifiableList(deleted)
+        : Collections.emptyList();
+  }
+
+  public boolean containsDeleted(final K key) {
+    if (deleted != null) {
+      return search(deleted, key) >= 0;
+    }
+    return false;
+  }
+
+  public boolean containsDeleted(final E element) {
+    return getDeleted(element.getKey()) == element;
-   *         otherwise, return the element in the created/deleted list.
+   *         otherwise, return the element in the deleted list.
-  public E search(final ListType type, final K name) {
-    final List<E> list = getList(type); 
-    final int c = search(list, name);
-    return c < 0 ? null : list.get(c);
+  public E getDeleted(final K key) {
+    if (deleted != null) {
+      final int c = search(deleted, key);
+      if (c >= 0) {
+        return deleted.get(c);
+      }
+    }
+    return null;
-  
+
+  public boolean removeDeleted(final E element) {
+    if (deleted != null) {
+      final int i = search(deleted, element.getKey());
+      if (i >= 0 && deleted.get(i) == element) {
+        deleted.remove(i);
+        return true;
+      }
+    }
+    return false;
+  }
+
+  public void clearDeleted() {
+    if (deleted != null) {
+      deleted.clear();
+    }
+  }
+
-   * Insert the given element to the created/deleted list.
+   * Add the given element to the created list,
+   * provided the element does not exist, i.e. i < 0.
+   *
+   * @throws AssertionError if i >= 0.
-  private void insert(final ListType type, final E element, final int i) {
-    List<E> list = type == ListType.CREATED? created: deleted; 
+  private void addCreated(final E element, final int i) {
-          + ", " + type + "=" + list);
+          + ", created=" + created);
-    if (list == null) {
-      list = new ArrayList<E>(DEFAULT_ARRAY_INITIAL_CAPACITY);
-      if (type == ListType.CREATED) {
-        created = list;
-      } else if (type == ListType.DELETED){
-        deleted = list;
-      }
+    if (created == null) {
+      created = new ArrayList<>(DEFAULT_ARRAY_INITIAL_CAPACITY);
-    list.add(-i - 1, element);
+    created.add(-i - 1, element);
+  /** Similar to {@link #addCreated(Element, int)} but for the deleted list. */
+  private void addDeleted(final E element, final int i) {
+    if (i >= 0) {
+      throw new AssertionError("Element already exists: element=" + element
+          + ", deleted=" + deleted);
+    }
+    if (deleted == null) {
+      deleted = new ArrayList<>(DEFAULT_ARRAY_INITIAL_CAPACITY);
+    }
+    deleted.add(-i - 1, element);
+  }
+
+
-    insert(ListType.CREATED, element, c);
+    addCreated(element, c);
-      insert(ListType.DELETED, element, d);
+      addDeleted(element, d);
-        insert(ListType.CREATED, newElement, c);
-        insert(ListType.DELETED, oldElement, d);
+        addCreated(newElement, c);
+        addDeleted(oldElement, d);
-        getList(ListType.CREATED), getList(ListType.DELETED));
+        getCreatedUnmodifiable(), getDeletedUnmodifiable());
-        getList(ListType.DELETED), getList(ListType.CREATED));
+        getDeletedUnmodifiable(), getCreatedUnmodifiable());
-    final Iterator<E> createdIterator = posterior.getList(ListType.CREATED).iterator();
-    final Iterator<E> deletedIterator = posterior.getList(ListType.DELETED).iterator();
+    final Iterator<E> createdIterator
+        = posterior.getCreatedUnmodifiable().iterator();
+    final Iterator<E> deletedIterator
+        = posterior.getDeletedUnmodifiable().iterator();
-        +  "{created=" + getList(ListType.CREATED)
-        + ", deleted=" + getList(ListType.DELETED) + "}";
+        +  "{created=" + getCreatedUnmodifiable()
+        + ", deleted=" + getDeletedUnmodifiable() + "}";

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 MOV74 INS42 INS8 MOV83 MOV43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 MOV74 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 UPD39 UPD42 MOV29 MOV83 MOV43 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS8 UPD42 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS41 INS39 INS42 INS43 INS42 INS60 INS25 INS41 INS25 MOV41 UPD42 INS25 INS41 UPD43 UPD42 UPD42 INS25 INS41 UPD43 UPD42 INS25 INS41 INS25 INS65 INS25 INS65 INS83 INS43 INS42 INS83 INS39 INS42 INS25 INS25 INS21 INS16 MOV42 INS83 MOV43 INS59 INS27 INS8 INS42 INS27 INS8 INS27 INS8 INS9 UPD42 INS27 UPD66 INS27 INS8 INS33 UPD42 INS27 INS8 INS9 INS27 INS8 UPD66 INS66 INS42 INS66 INS27 MOV8 MOV8 INS66 INS65 INS66 INS42 INS27 INS8 INS27 INS8 INS32 MOV74 MOV74 INS27 INS32 INS32 INS42 INS32 INS32 INS34 INS53 UPD42 MOV42 INS33 INS21 UPD27 INS32 INS42 INS33 INS41 INS32 INS42 INS42 INS33 INS60 INS25 INS42 INS33 MOV60 INS25 INS42 INS33 INS21 UPD42 MOV42 INS34 UPD42 MOV21 UPD42 INS68 UPD42 MOV42 MOV34 INS53 INS42 INS33 INS21 UPD42 MOV42 UPD42 MOV42 INS27 INS42 UPD42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS32 UPD42 UPD42 INS42 INS42 INS42 INS27 UPD42 MOV42 MOV32 INS83 INS39 INS59 INS27 INS8 INS39 INS27 INS8 INS32 INS42 INS69 INS69 INS14 INS7 INS38 INS34 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS34 UPD42 UPD42 INS42 INS32 INS42 INS34 INS41 UPD42 INS32 MOV27 INS27 INS21 INS41 INS42 INS42 UPD42 INS43 INS39 INS43 INS27 INS42 INS14 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS9 UPD45 UPD42 UPD74 INS42 INS42 INS45 INS42 INS45 INS42 INS74 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 UPD42 UPD42 INS42 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL71 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL43 DEL74 DEL42 DEL83 DEL43 DEL42 DEL44 DEL83 DEL42 DEL40 DEL27 DEL42 DEL42 DEL16 DEL59 DEL60 DEL8 DEL31 DEL42 DEL32 DEL32 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL33 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL40 DEL27 DEL42 DEL42 DEL16 DEL59 DEL60 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40