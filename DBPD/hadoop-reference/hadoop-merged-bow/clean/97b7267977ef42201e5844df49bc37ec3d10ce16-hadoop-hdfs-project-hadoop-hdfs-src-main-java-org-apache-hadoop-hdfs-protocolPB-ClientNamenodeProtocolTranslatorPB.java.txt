HDFS-5121.  Add RPCs for creating and manipulating cache pools.  (Contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1519841 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.BatchedRemoteIterator;
+import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedEntries;
+import org.apache.hadoop.hdfs.protocol.RemovePathCacheEntryException.RemovePermissionDeniedException;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.AddCachePoolRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListCachePoolsRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListCachePoolsResponseElementProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListCachePoolsResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ModifyCachePoolRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemoveCachePoolRequestProto;
+    } else if (code == RemovePathCacheEntryErrorProto.
+        REMOVE_PERMISSION_DENIED_ERROR_VALUE) {
+      return new RemovePermissionDeniedException(id);
-  private class PathCacheEntriesIterator
-      implements RemoteIterator<PathCacheEntry> {
-    private long prevId;
-    private final String pool;
-    private final int repliesPerRequest;
+  private static class BatchedPathCacheEntries
+      implements BatchedEntries<PathCacheEntry> {
-    private int idx;
-    public PathCacheEntriesIterator(long prevId, String pool,
-        int repliesPerRequest) {
-      this.prevId = prevId;
-      this.pool = pool;
-      this.repliesPerRequest = repliesPerRequest;
-      this.response = null;
-      this.idx = -1;
+    BatchedPathCacheEntries(ListPathCacheEntriesResponseProto response) {
+      this.response = response;
-    private void makeRequest() throws IOException {
-      idx = 0;
-      response = null;
+    @Override
+    public PathCacheEntry get(int i) {
+      ListPathCacheEntriesElementProto elementProto =
+        response.getElements(i);
+      return new PathCacheEntry(elementProto.getId(), 
+          new PathCacheDirective(elementProto.getPath(),
+              elementProto.getPool()));
+    }
+
+    @Override
+    public int size() {
+      return response.getElementsCount();
+    }
+  }
+
+  private class PathCacheEntriesIterator
+      extends BatchedRemoteIterator<Long, PathCacheEntry> {
+    private final String pool;
+
+    public PathCacheEntriesIterator(long prevKey, int maxRepliesPerRequest,
+        String pool) {
+      super(prevKey, maxRepliesPerRequest);
+      this.pool = pool;
+    }
+
+    @Override
+    public BatchedEntries<PathCacheEntry> makeRequest(
+        Long nextKey, int maxRepliesPerRequest) throws IOException {
+      ListPathCacheEntriesResponseProto response;
-              setPrevId(prevId).
+              setPrevId(nextKey).
-              setMaxReplies(repliesPerRequest).
+              setMaxReplies(maxRepliesPerRequest).
-    }
-
-    private void makeRequestIfNeeded() throws IOException {
-      if (idx == -1) {
-        makeRequest();
-      } else if ((response != null) && (idx >= response.getElementsCount())) {
-        if (response.getHasMore()) {
-          makeRequest();
-        } else {
-          response = null;
-        }
-      }
+      return new BatchedPathCacheEntries(response);
-    public boolean hasNext() throws IOException {
-      makeRequestIfNeeded();
-      return (response != null);
-    }
-
-    @Override
-    public PathCacheEntry next() throws IOException {
-      makeRequestIfNeeded();
-      if (response == null) {
-        throw new NoSuchElementException();
-      }
-      ListPathCacheEntriesElementProto elementProto =
-        response.getElements(idx);
-      prevId = elementProto.getId();
-      idx++;
-      return new PathCacheEntry(elementProto.getId(), 
-          new PathCacheDirective(elementProto.getPath(),
-              elementProto.getPool()));
+    public Long elementToNextKey(PathCacheEntry element) {
+      return element.getEntryId();
-    return new PathCacheEntriesIterator(prevId, pool, repliesPerRequest);
+    return new PathCacheEntriesIterator(prevId, repliesPerRequest, pool);
+  }
+
+  @Override
+  public void addCachePool(CachePoolInfo info) throws IOException {
+    AddCachePoolRequestProto.Builder builder = 
+        AddCachePoolRequestProto.newBuilder();
+    builder.setPoolName(info.getPoolName());
+    if (info.getOwnerName() != null) {
+      builder.setOwnerName(info.getOwnerName());
+    }
+    if (info.getGroupName() != null) {
+      builder.setGroupName(info.getGroupName());
+    }
+    if (info.getMode() != null) {
+      builder.setMode(info.getMode());
+    }
+    if (info.getWeight() != null) {
+      builder.setWeight(info.getWeight());
+    }
+    try {
+      rpcProxy.addCachePool(null, builder.build());
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public void modifyCachePool(CachePoolInfo req) throws IOException {
+    ModifyCachePoolRequestProto.Builder builder = 
+        ModifyCachePoolRequestProto.newBuilder();
+    builder.setPoolName(req.getPoolName());
+    if (req.getOwnerName() != null) {
+      builder.setOwnerName(req.getOwnerName());
+    }
+    if (req.getGroupName() != null) {
+      builder.setGroupName(req.getGroupName());
+    }
+    if (req.getMode() != null) {
+      builder.setMode(req.getMode());
+    }
+    if (req.getWeight() != null) {
+      builder.setWeight(req.getWeight());
+    }
+    try {
+      rpcProxy.modifyCachePool(null, builder.build());
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  @Override
+  public void removeCachePool(String cachePoolName) throws IOException {
+    try {
+      rpcProxy.removeCachePool(null, 
+          RemoveCachePoolRequestProto.newBuilder().
+            setPoolName(cachePoolName).build());
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  private static class BatchedPathDirectiveEntries
+      implements BatchedEntries<CachePoolInfo> {
+    private final ListCachePoolsResponseProto proto;
+    
+    public BatchedPathDirectiveEntries(ListCachePoolsResponseProto proto) {
+      this.proto = proto;
+    }
+      
+    @Override
+    public CachePoolInfo get(int i) {
+      ListCachePoolsResponseElementProto elem = proto.getElements(i);
+      return new CachePoolInfo(elem.getPoolName()).
+          setOwnerName(elem.getOwnerName()).
+          setGroupName(elem.getGroupName()).
+          setMode(elem.getMode()).
+          setWeight(elem.getWeight());
+    }
+
+    @Override
+    public int size() {
+      return proto.getElementsCount();
+    }
+  }
+  
+  private class CachePoolIterator 
+      extends BatchedRemoteIterator<String, CachePoolInfo> {
+
+    public CachePoolIterator(String prevKey, int maxRepliesPerRequest) {
+      super(prevKey, maxRepliesPerRequest);
+    }
+
+    @Override
+    public BatchedEntries<CachePoolInfo> makeRequest(String prevKey,
+        int maxRepliesPerRequest) throws IOException {
+      try {
+        return new BatchedPathDirectiveEntries(
+            rpcProxy.listCachePools(null, 
+              ListCachePoolsRequestProto.newBuilder().
+                setPrevPoolName(prevKey).
+                setMaxReplies(maxRepliesPerRequest).build()));
+      } catch (ServiceException e) {
+        throw ProtobufHelper.getRemoteException(e);
+      }
+    }
+
+    @Override
+    public String elementToNextKey(CachePoolInfo element) {
+      return element.getPoolName();
+    }
+  }
+
+  @Override
+  public RemoteIterator<CachePoolInfo> listCachePools(String prevKey,
+      int maxRepliesPerRequest) throws IOException {
+    return new CachePoolIterator(prevKey, maxRepliesPerRequest);

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS55 INS31 MOV31 MOV31 INS55 INS55 INS31 MOV83 INS83 UPD42 MOV42 UPD74 MOV74 MOV23 INS31 MOV31 INS31 INS83 INS42 INS74 MOV23 INS31 MOV31 INS31 INS78 INS83 INS39 INS42 INS44 MOV43 MOV8 INS78 UPD83 UPD42 INS44 MOV43 INS78 UPD39 UPD42 INS44 MOV43 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS31 INS83 INS42 INS74 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 UPD43 INS42 INS44 INS8 UPD42 INS44 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS43 MOV83 MOV42 MOV44 MOV44 MOV44 INS8 INS78 UPD83 INS74 INS42 INS44 INS44 MOV78 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS60 INS25 INS25 INS25 INS25 INS54 INS42 INS43 INS42 INS60 INS21 INS25 INS25 INS25 INS25 INS54 INS42 INS43 INS42 INS54 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS43 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS41 UPD42 INS43 INS42 MOV21 INS39 INS42 INS42 INS41 INS42 INS42 INS42 UPD42 UPD42 INS46 MOV21 INS42 INS43 INS43 INS43 INS42 INS39 INS42 INS60 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS8 INS12 INS42 INS43 INS59 INS32 UPD27 MOV27 MOV8 INS27 INS8 INS27 INS8 INS27 MOV8 INS8 INS12 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS39 INS42 INS60 INS41 INS42 INS41 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS46 INS42 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS54 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS14 INS25 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS14 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS33 MOV21 INS32 INS33 MOV21 INS32 INS33 INS21 INS32 INS33 INS21 INS21 INS44 INS8 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS32 MOV33 INS21 INS32 INS33 INS21 INS32 INS33 MOV21 INS44 INS8 MOV21 INS44 INS8 INS42 INS7 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS32 INS43 INS42 INS42 INS27 INS8 MOV8 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS22 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS40 INS41 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS32 INS42 INS32 INS42 INS42 INS33 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS53 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 INS32 INS42 INS42 INS42 INS42 DEL33 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL37 DEL21 DEL39 DEL42 DEL42 DEL34 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL31 DEL55 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL34 DEL38 DEL7 DEL42 DEL34 DEL38 DEL32 DEL32 DEL42 DEL33 DEL7 DEL42 DEL27 DEL36 DEL42 DEL27 DEL36 DEL27 DEL32 DEL8 DEL25 DEL8 DEL25 DEL25 DEL32 DEL42 DEL33 DEL27 DEL36 DEL41