HDFS-2086. If the include hosts list contains host names, after restarting namenode, data nodes registration is denied.  Contributed by Tanping Wang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139090 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.UnknownHostException;
-          mustList.remove(dn.getName());
-          mustList.remove(dn.getHost());
-          mustList.remove(dn.getHostName());
+          try {
+            InetAddress inet = InetAddress.getByName(dn.getHost());
+            // compare hostname(:port)
+            mustList.remove(inet.getHostName());
+            mustList.remove(inet.getHostName()+":"+dn.getPort());
+            // compare ipaddress(:port)
+            mustList.remove(inet.getHostAddress().toString());
+            mustList.remove(inet.getHostAddress().toString()+ ":" +dn.getPort());
+          } catch ( UnknownHostException e ) {
+            mustList.remove(dn.getName());
+            mustList.remove(dn.getHost());
+            LOG.warn(e);
+          }
-    return (hostsList.isEmpty() || 
-            (ipAddr != null && hostsList.contains(ipAddr)) ||
-            hostsList.contains(node.getHost()) ||
-            hostsList.contains(node.getName()) || 
-            ((node instanceof DatanodeInfo) && 
-             hostsList.contains(((DatanodeInfo)node).getHostName())));
+     return checkInList(node, ipAddr, hostsList, false);
-    return  ((ipAddr != null && excludeList.contains(ipAddr)) ||
-            excludeList.contains(node.getHost()) ||
-            excludeList.contains(node.getName()) ||
-            ((node instanceof DatanodeInfo) && 
-             excludeList.contains(((DatanodeInfo)node).getHostName())));
+    return checkInList(node, ipAddr, excludeList, true);
+
+  /**
+   * Check if the given node (of DatanodeID or ipAddress) is in the (include or 
+   * exclude) list.  If ipAddress in null, check only based upon the given 
+   * DatanodeID.  If ipAddress is not null, the ipAddress should refers to the
+   * same host that given DatanodeID refers to.
+   * 
+   * @param node, DatanodeID, the host DatanodeID
+   * @param ipAddress, if not null, should refers to the same host
+   *                   that DatanodeID refers to
+   * @param hostsList, the list of hosts in the include/exclude file
+   * @param isExcludeList, boolean, true if this is the exclude list
+   * @return boolean, if in the list
+   */
+  private boolean checkInList(DatanodeID node, String ipAddress,
+      Set<String> hostsList, boolean isExcludeList) {
+    InetAddress iaddr = null;
+    try {
+      if (ipAddress != null) {
+        iaddr = InetAddress.getByName(ipAddress);
+      } else {
+        iaddr = InetAddress.getByName(node.getHost());
+      }
+    }catch (UnknownHostException e) {
+      LOG.warn("Unknown host in host list: "+ipAddress);
+      // can't resolve the host name.
+      if (isExcludeList){
+        return true;
+      } else {
+        return false;
+      }
+    }
+
+    // if include list is empty, host is in include list
+    if ( (!isExcludeList) && (hostsList.isEmpty()) ){
+      return true;
+    }
+    return // compare ipaddress(:port)
+    (hostsList.contains(iaddr.getHostAddress().toString()))
+        || (hostsList.contains(iaddr.getHostAddress().toString() + ":"
+            + node.getPort()))
+        // compare hostname(:port)
+        || (hostsList.contains(iaddr.getHostName()))
+        || (hostsList.contains(iaddr.getHostName() + ":" + node.getPort()))
+        || ((node instanceof DatanodeInfo) && hostsList
+            .contains(((DatanodeInfo) node).getHostName()));
+  }
+  

INS26 INS40 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 MOV8 MOV60 INS41 MOV60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS60 INS54 INS25 INS41 INS32 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS59 INS8 INS12 INS27 INS8 INS27 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS9 INS42 MOV42 INS42 UPD42 MOV42 INS9 INS42 INS42 INS42 INS42 INS33 INS25 INS44 INS8 INS36 INS36 INS41 INS36 INS36 MOV36 INS36 MOV36 INS27 INS8 INS8 INS43 INS42 INS21 INS25 INS38 MOV32 INS9 INS32 INS32 INS32 INS32 UPD42 MOV42 MOV33 INS21 INS21 INS42 INS32 INS42 INS8 INS8 INS42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 MOV42 INS27 INS42 INS42 INS32 UPD42 MOV42 MOV42 INS27 INS7 INS7 INS42 INS42 INS27 INS41 INS41 INS32 INS42 INS32 INS45 INS32 INS42 INS42 INS32 INS45 INS32 INS54 INS42 INS32 INS42 MOV32 INS45 INS42 INS9 INS9 UPD42 MOV42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS8 INS12 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS60 INS21 MOV21 INS21 INS21 INS44 INS8 INS43 INS59 INS32 INS32 INS32 INS43 INS42 MOV21 MOV21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS45 INS32 INS32 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL27 DEL32 DEL27 DEL36 DEL32 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL32 DEL27 DEL36 DEL27 DEL36 DEL41 DEL42 DEL33 DEL27 DEL32 DEL27 DEL36 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL36 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL31