HDFS-7498. Simplify the logic in INodesInPath. Contributed by Jing Zhao.

-  long getPreferredBlockSize(String path) throws UnresolvedLinkException,
-      FileNotFoundException, IOException {
+  long getPreferredBlockSize(String path) throws IOException {
-    final INode[] inodes = iip.getINodes(); 
-    if (inodes == null || inodes.length == 0
-        || inodes[inodes.length - 1] == null) {
+    if (iip.length() < 1 || iip.getLastINode() == null) {
-    } else if (inodes.length == 1) { // src is the root
+    } else if (iip.length() == 1) { // src is the root
-      final INode[] inodes = inodesInPath.getINodes();
-      final INode inode = inodes[inodes.length - 1];
+      final INode inode = inodesInPath.getLastINode();
-    updateCount(iip, iip.getINodes().length - 1, nsDelta, dsDelta, checkQuota);
+    updateCount(iip, iip.length() - 1, nsDelta, dsDelta, checkQuota);
-    final INode[] inodes = iip.getINodes();
-    if (numOfINodes > inodes.length) {
-      numOfINodes = inodes.length;
+    if (numOfINodes > iip.length()) {
+      numOfINodes = iip.length();
-      verifyQuota(inodes, numOfINodes, nsDelta, dsDelta, null);
+      verifyQuota(iip, numOfINodes, nsDelta, dsDelta, null);
-  static void unprotectedUpdateCount(INodesInPath inodesInPath, int numOfINodes, long nsDelta, long dsDelta) {
-    final INode[] inodes = inodesInPath.getINodes();
+  static void unprotectedUpdateCount(INodesInPath inodesInPath,
+      int numOfINodes, long nsDelta, long dsDelta) {
-      if (inodes[i].isQuotaSet()) { // a directory with quota
-        inodes[i].asDirectory().getDirectoryWithQuotaFeature()
+      if (inodesInPath.getINode(i).isQuotaSet()) { // a directory with quota
+        inodesInPath.getINode(i).asDirectory().getDirectoryWithQuotaFeature()
-  private boolean addINode(String src, INode child
-      ) throws QuotaExceededException, UnresolvedLinkException {
+  private boolean addINode(String src, INode child)
+      throws QuotaExceededException, UnresolvedLinkException {
-      return addLastINode(getExistingPathINodes(components), child, true);
+      final INodesInPath iip = getExistingPathINodes(components);
+      return addLastINode(iip, child, true);
-   * @param inodes INodes corresponding to a path
+   * @param iip INodes corresponding to a path
-  static void verifyQuota(INode[] inodes, int pos, long nsDelta,
+  static void verifyQuota(INodesInPath iip, int pos, long nsDelta,
-    for(int i = (pos > inodes.length? inodes.length: pos) - 1; i >= 0; i--) {
-      if (commonAncestor == inodes[i]) {
+    for(int i = (pos > iip.length() ? iip.length(): pos) - 1; i >= 0; i--) {
+      if (commonAncestor == iip.getINode(i)) {
-          = inodes[i].asDirectory().getDirectoryWithQuotaFeature();
+          = iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();
-          e.setPathName(getFullPathName(inodes, i));
+          List<INode> inodes = iip.getReadOnlyINodes();
+          final String path = getFullPathName(inodes.toArray(new INode[inodes.size()]), i);
+          e.setPathName(path);
-   * @param parentPath Object either INode[] or String containing parent path
-   * @param pos int position of new child in path
+   * @param parentPath String containing parent path
-  void verifyMaxComponentLength(byte[] childName, Object parentPath,
-      int pos) throws PathComponentTooLongException {
+  void verifyMaxComponentLength(byte[] childName, String parentPath)
+      throws PathComponentTooLongException {
-      final String p = parentPath instanceof INode[]?
-          getFullPathName((INode[])parentPath, pos - 1): (String)parentPath;
-          maxComponentLength, length, p, DFSUtil.bytes2String(childName));
+          maxComponentLength, length, parentPath,
+          DFSUtil.bytes2String(childName));
-   * @param pathComponents INode[] containing full path of inodes to new child
-   * @param pos int position of new child in pathComponents
-  void verifyMaxDirItems(INode[] pathComponents, int pos)
+  void verifyMaxDirItems(INodeDirectory parent, String parentPath)
-
-    final INodeDirectory parent = pathComponents[pos-1].asDirectory();
-        e.setPathName(getFullPathName(pathComponents, pos - 1));
+        e.setPathName(parentPath);
-  private boolean addLastINode(INodesInPath inodesInPath,
-      INode inode, boolean checkQuota) throws QuotaExceededException {
-    final int pos = inodesInPath.getINodes().length - 1;
+  private boolean addLastINode(INodesInPath inodesInPath, INode inode,
+      boolean checkQuota) throws QuotaExceededException {
+    final int pos = inodesInPath.length() - 1;
-    final INode[] inodes = iip.getINodes();
-    if (pos == 1 && inodes[0] == rootDir && isReservedName(child)) {
+    if (pos == 1 && iip.getINode(0) == rootDir && isReservedName(child)) {
+    final INodeDirectory parent = iip.getINode(pos-1).asDirectory();
-      verifyMaxComponentLength(child.getLocalNameBytes(), inodes, pos);
-      verifyMaxDirItems(inodes, pos);
+      final String parentPath = iip.getPath(pos - 1);
+      verifyMaxComponentLength(child.getLocalNameBytes(), parentPath);
+      verifyMaxDirItems(parent, parentPath);
-    final INodeDirectory parent = inodes[pos-1].asDirectory();
-      iip.setINode(pos - 1, child.getParent());
-      updateCountNoQuotaCheck(iip, iip.getINodes().length - 1,
+      updateCountNoQuotaCheck(iip, iip.length() - 1,
-    INode[] inodes = iip.getINodes();
-    INode inode = inodes[inodes.length - 1];
-    if (inode == null)
+    INode inode = iip.getLastINode();
+    if (inode == null) {
+    }

MOV60 INS25 INS43 INS42 UPD43 INS43 UPD42 MOV43 UPD42 INS25 INS27 MOV8 UPD42 INS42 UPD66 UPD42 UPD42 MOV42 MOV43 MOV42 INS8 MOV43 INS8 UPD27 INS42 INS32 INS60 UPD42 MOV32 MOV42 INS60 MOV21 INS21 UPD42 MOV53 INS32 UPD34 MOV34 INS32 INS32 MOV43 INS32 MOV42 UPD42 MOV42 INS83 INS43 INS59 INS32 UPD42 MOV83 UPD43 MOV43 INS59 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS32 INS42 INS42 MOV32 INS42 INS32 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 MOV32 UPD42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS34 UPD42 MOV42 INS32 INS32 INS32 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS32 INS42 INS42 INS74 INS59 INS83 MOV43 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS32 MOV42 MOV42 INS42 INS3 MOV5 INS32 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL27 DEL42 DEL40 DEL34 DEL27 DEL2 DEL40 DEL42 DEL43 DEL85 DEL5 DEL83 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL59 DEL60 DEL32 DEL42 DEL22 DEL40 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL25 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL40 DEL40 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL83 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL62 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL11 DEL42 DEL34 DEL27 DEL32 DEL42 DEL11 DEL16 DEL59 DEL60 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL43 DEL85 DEL5 DEL39 DEL83 DEL42 DEL42 DEL42 DEL34 DEL27 DEL2 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL22 DEL42 DEL34 DEL2 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL27 DEL2 DEL32 DEL59 DEL60 DEL21 DEL32 DEL42 DEL22 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL59 DEL60