Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Collections;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+  private File currentInProgress = null;
+  private long maxSeenTransaction = 0L;
+
-  public EditLogOutputStream startLogSegment(long txid) throws IOException {    
-    File newInProgress = NNStorage.getInProgressEditsFile(sd, txid);
-    EditLogOutputStream stm = new EditLogFileOutputStream(newInProgress,
+  synchronized public EditLogOutputStream startLogSegment(long txid) 
+      throws IOException {
+    currentInProgress = NNStorage.getInProgressEditsFile(sd, txid);
+    EditLogOutputStream stm = new EditLogFileOutputStream(currentInProgress,
-  public void finalizeLogSegment(long firstTxId, long lastTxId)
+  synchronized public void finalizeLogSegment(long firstTxId, long lastTxId)
-    File inprogressFile = NNStorage.getInProgressEditsFile(
-        sd, firstTxId);
+    File inprogressFile = NNStorage.getInProgressEditsFile(sd, firstTxId);
+
+    if (inprogressFile.equals(currentInProgress)) {
+      currentInProgress = null;
+    }
-  public String toString() {
-    return "FileJournalManager for storage directory " + sd;
-  }
-
-  @Override
-  public void setOutputBufferCapacity(int size) {
+  synchronized public void setOutputBufferCapacity(int size) {
-  @Override
-  public EditLogInputStream getInProgressInputStream(long segmentStartsAtTxId)
-      throws IOException {
-    File f = NNStorage.getInProgressEditsFile(sd, segmentStartsAtTxId);
-    return new EditLogFileInputStream(f);
-  }
-  
-            new EditLogFile(f, startTxId, EditLogFile.UNKNOWN_END));
+              new EditLogFile(f, startTxId, startTxId, true));
-        }          
+        }
+  @Override
+  synchronized public EditLogInputStream getInputStream(long fromTxId) 
+      throws IOException {
+    for (EditLogFile elf : getLogFiles(fromTxId)) {
+      if (elf.getFirstTxId() == fromTxId) {
+        if (elf.isInProgress()) {
+          elf.validateLog();
+        }
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("Returning edit stream reading from " + elf);
+        }
+        return new EditLogFileInputStream(elf.getFile(), 
+            elf.getFirstTxId(), elf.getLastTxId());
+      }
+    }
+
+    throw new IOException("Cannot find editlog file with " + fromTxId
+        + " as first first txid");
+  }
+
+  @Override
+  public long getNumberOfTransactions(long fromTxId) 
+      throws IOException, CorruptionException {
+    long numTxns = 0L;
+    
+    for (EditLogFile elf : getLogFiles(fromTxId)) {
+      if (LOG.isTraceEnabled()) {
+        LOG.trace("Counting " + elf);
+      }
+      if (elf.getFirstTxId() > fromTxId) { // there must be a gap
+        LOG.warn("Gap in transactions in " + sd.getRoot() + ". Gap is "
+            + fromTxId + " - " + (elf.getFirstTxId() - 1));
+        break;
+      } else if (fromTxId == elf.getFirstTxId()) {
+        if (elf.isInProgress()) {
+          elf.validateLog();
+        } 
+
+        if (elf.isCorrupt()) {
+          break;
+        }
+        fromTxId = elf.getLastTxId() + 1;
+        numTxns += fromTxId - elf.getFirstTxId();
+        
+        if (elf.isInProgress()) {
+          break;
+        }
+      } // else skip
+    }
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Journal " + this + " has " + numTxns 
+                + " txns from " + fromTxId);
+    }
+
+    long max = findMaxTransaction();
+    // fromTxId should be greater than max, as it points to the next 
+    // transaction we should expect to find. If it is less than or equal
+    // to max, it means that a transaction with txid == max has not been found
+    if (numTxns == 0 && fromTxId <= max) { 
+      String error = String.format("Gap in transactions, max txnid is %d"
+                                   + ", 0 txns from %d", max, fromTxId);
+      LOG.error(error);
+      throw new CorruptionException(error);
+    }
+
+    return numTxns;
+  }
+
+  @Override
+  synchronized public void recoverUnfinalizedSegments() throws IOException {
+    File currentDir = sd.getCurrentDir();
+    List<EditLogFile> allLogFiles = matchEditLogs(currentDir.listFiles());
+    
+    // make sure journal is aware of max seen transaction before moving corrupt 
+    // files aside
+    findMaxTransaction();
+
+    for (EditLogFile elf : allLogFiles) {
+      if (elf.getFile().equals(currentInProgress)) {
+        continue;
+      }
+      if (elf.isInProgress()) {
+        elf.validateLog();
+
+        if (elf.isCorrupt()) {
+          elf.moveAsideCorruptFile();
+          continue;
+        }
+        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());
+      }
+    }
+  }
+
+  private List<EditLogFile> getLogFiles(long fromTxId) throws IOException {
+    File currentDir = sd.getCurrentDir();
+    List<EditLogFile> allLogFiles = matchEditLogs(currentDir.listFiles());
+    List<EditLogFile> logFiles = Lists.newArrayList();
+    
+    for (EditLogFile elf : allLogFiles) {
+      if (fromTxId > elf.getFirstTxId()
+          && fromTxId <= elf.getLastTxId()) {
+        throw new IOException("Asked for fromTxId " + fromTxId
+            + " which is in middle of file " + elf.file);
+      }
+      if (fromTxId <= elf.getFirstTxId()) {
+        logFiles.add(elf);
+      }
+    }
+    
+    Collections.sort(logFiles, EditLogFile.COMPARE_BY_START_TXID);
+
+    return logFiles;
+  }
+
+  /** 
+   * Find the maximum transaction in the journal.
+   * This gets stored in a member variable, as corrupt edit logs
+   * will be moved aside, but we still need to remember their first
+   * tranaction id in the case that it was the maximum transaction in
+   * the journal.
+   */
+  private long findMaxTransaction()
+      throws IOException {
+    for (EditLogFile elf : getLogFiles(0)) {
+      if (elf.isInProgress()) {
+        maxSeenTransaction = Math.max(elf.getFirstTxId(), maxSeenTransaction);
+        elf.validateLog();
+      }
+      maxSeenTransaction = Math.max(elf.getLastTxId(), maxSeenTransaction);
+    }
+    return maxSeenTransaction;
+  }
+
+  @Override
+  public String toString() {
+    return String.format("FileJournalManager(root=%s)", sd.getRoot());
+  }
+
-    
-    private EditLogValidation cachedValidation = null;
+
-    
-    static final long UNKNOWN_END = -1;
-    
+    private final boolean isInProgress;
+
-      assert lastTxId == UNKNOWN_END || lastTxId >= firstTxId;
-      assert firstTxId > 0;
+      this(file, firstTxId, lastTxId, false);
+      assert (lastTxId != HdfsConstants.INVALID_TXID)
+        && (lastTxId >= firstTxId);
+    }
+    
+    EditLogFile(File file, long firstTxId, 
+                long lastTxId, boolean isInProgress) { 
+      assert (lastTxId == HdfsConstants.INVALID_TXID && isInProgress)
+        || (lastTxId != HdfsConstants.INVALID_TXID && lastTxId >= firstTxId);
+      assert (firstTxId > 0) || (firstTxId == HdfsConstants.INVALID_TXID);
+      this.isInProgress = isInProgress;
-    public void finalizeLog() throws IOException {
-      long numTransactions = validateLog().numTransactions;
-      long lastTxId = firstTxId + numTransactions - 1;
-      File dst = new File(file.getParentFile(),
-          NNStorage.getFinalizedEditsFileName(firstTxId, lastTxId));
-      LOG.info("Finalizing edits log " + file + " by renaming to "
-          + dst.getName());
-      if (!file.renameTo(dst)) {
-        throw new IOException("Couldn't finalize log " +
-            file + " to " + dst);
-      }
-      this.lastTxId = lastTxId;
-      file = dst;
-    }
-
-    EditLogValidation validateLog() throws IOException {
-      if (cachedValidation == null) {
-        cachedValidation = EditLogFileInputStream.validateEditLog(file);
+    /** 
+     * Count the number of valid transactions in a log.
+     * This will update the lastTxId of the EditLogFile or
+     * mark it as corrupt if it is.
+     */
+    void validateLog() throws IOException {
+      EditLogValidation val = EditLogFileInputStream.validateEditLog(file);
+      if (val.getNumTransactions() == 0) {
+        markCorrupt();
+      } else {
+        this.lastTxId = val.getEndTxId();
-      return cachedValidation;
-      return (lastTxId == UNKNOWN_END);
+      return isInProgress;

INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 MOV31 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS83 INS83 MOV78 INS83 MOV43 UPD42 INS44 MOV43 MOV78 INS39 UPD42 INS43 INS43 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS83 INS74 INS42 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS78 INS83 MOV43 INS42 INS8 INS23 INS42 INS33 INS42 INS34 INS21 INS25 INS39 INS42 INS70 INS53 UPD42 INS42 INS42 INS60 INS70 INS25 INS60 INS25 INS41 INS42 INS42 INS60 INS60 INS21 INS70 INS43 INS43 INS39 INS42 INS60 INS60 INS60 INS70 INS21 INS41 INS65 INS42 INS70 INS41 INS42 INS41 MOV83 MOV83 UPD39 MOV39 MOV59 UPD42 INS44 INS44 INS44 INS8 INS44 INS29 INS39 INS7 INS32 INS8 INS44 INS32 INS8 INS14 INS39 INS59 INS44 INS32 INS8 INS32 INS8 INS39 INS59 INS27 INS8 INS42 MOV43 INS59 INS74 INS59 INS32 INS44 INS42 INS8 INS42 INS42 MOV43 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS66 INS66 INS66 INS66 INS66 INS44 INS32 INS8 INS42 INS32 UPD42 INS43 INS42 INS39 INS42 INS39 INS42 INS17 INS6 INS39 INS42 INS21 INS65 INS60 INS42 MOV32 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS25 MOV43 INS27 INS42 INS34 INS43 INS42 INS42 INS42 INS25 INS25 INS42 INS42 INS21 INS42 INS32 INS27 INS27 INS60 INS21 INS53 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS43 INS42 INS25 INS25 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS25 INS42 INS42 INS42 INS40 INS43 INS42 INS42 INS34 INS25 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS9 INS27 INS27 INS27 INS7 INS66 INS66 INS66 MOV43 INS59 INS8 INS42 UPD42 INS7 INS42 INS27 INS8 UPD45 MOV45 UPD42 MOV42 INS45 UPD42 MOV42 INS32 INS8 INS27 INS8 INS25 INS32 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS42 INS32 INS8 INS7 INS42 INS42 INS36 INS36 INS36 INS36 INS36 INS36 INS22 INS42 INS42 MOV32 INS32 INS34 INS21 INS42 INS33 INS32 INS42 INS25 INS25 INS41 INS42 INS42 INS21 INS32 INS42 INS21 INS10 INS27 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS18 INS42 INS42 INS21 INS25 INS21 INS42 INS42 INS27 INS27 INS53 INS42 INS32 INS21 INS42 INS42 INS21 INS21 INS42 INS32 INS27 INS27 INS27 UPD27 MOV27 MOV27 INS27 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS8 INS32 INS8 INS14 INS32 INS42 INS42 INS32 INS42 INS32 INS25 INS25 INS21 INS21 INS25 INS45 INS52 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS32 INS42 INS32 INS42 INS32 INS14 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 INS40 INS42 INS42 INS27 INS42 UPD27 INS42 INS40 INS42 INS22 INS32 INS42 INS42 INS21 INS42 INS42 INS21 MOV43 INS32 INS32 INS32 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS32 INS8 INS32 INS8 INS7 INS7 INS32 INS8 INS45 INS45 INS42 INS42 INS42 INS42 INS21 INS18 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS36 INS42 INS42 INS21 INS42 INS42 INS10 INS42 INS27 INS42 INS27 INS42 INS42 INS10 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 MOV42 INS42 INS27 INS32 INS32 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 DEL42 DEL59 DEL60 DEL40 DEL27 DEL41 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL14 DEL41 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL34 DEL38 DEL83 DEL23 DEL83 DEL39 DEL39 DEL42 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL27 DEL34 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL33 DEL42 DEL42 DEL41 DEL42 DEL42 DEL27 DEL36