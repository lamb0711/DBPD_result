HDFS-11564. Ozone: SCM: Add Comparable Metric Support. Contributed by Anu Engineer.

+import org.apache.hadoop.ozone.OzoneConsts;
-
+import org.apache.hadoop.ozone.scm.container.placement.metrics.SCMNodeMetric;
+import org.apache.hadoop.ozone.scm.container.placement.metrics.SCMNodeStat;
-import org.apache.hadoop.ozone.scm.node.SCMNodeStat;
-  private final List<DatanodeID> healthyNodes;
+  private final static NodeData[] NODES = {
+      new NodeData(10L * OzoneConsts.TB,  OzoneConsts.GB),
+      new NodeData(64L * OzoneConsts.TB, 100 * OzoneConsts.GB),
+      new NodeData(128L * OzoneConsts.TB, 256 * OzoneConsts.GB),
+      new NodeData(40L * OzoneConsts.TB, OzoneConsts.TB),
+      new NodeData(256L * OzoneConsts.TB, 200 * OzoneConsts.TB),
+      new NodeData(20L * OzoneConsts.TB, 10 * OzoneConsts.GB),
+      new NodeData(32L * OzoneConsts.TB, 16 * OzoneConsts.TB),
+      new NodeData(OzoneConsts.TB, 900 * OzoneConsts.GB),
+  };
+  private final List<DatanodeID> healthyNodes;
+  private final Map<String, SCMNodeStat> nodeMetricMap;
+  private final SCMNodeStat aggregateStat;
-  public MockNodeManager() {
+  public MockNodeManager(boolean initializeFakeNodes, int nodeCount) {
-    for (int x = 0; x < 10; x++) {
-      healthyNodes.add(SCMTestUtils.getDatanodeID());
+    this.nodeMetricMap = new HashMap<>();
+    aggregateStat = new SCMNodeStat();
+    if (initializeFakeNodes) {
+      for (int x = 0; x < nodeCount; x++) {
+        DatanodeID id = SCMTestUtils.getDatanodeID();
+        healthyNodes.add(id);
+        populateNodeMetric(id, x);
+      }
+   * Invoked from ctor to create some node Metrics.
+   *
+   * @param datanodeID - Datanode ID
+   */
+  private void populateNodeMetric(DatanodeID datanodeID, int x) {
+    SCMNodeStat newStat = new SCMNodeStat();
+    long remaining =
+        NODES[x % NODES.length].capacity - NODES[x % NODES.length].used;
+    newStat.set(
+        (NODES[x % NODES.length].capacity),
+        (NODES[x % NODES.length].used), remaining);
+    this.nodeMetricMap.put(datanodeID.toString(), newStat);
+    aggregateStat.add(newStat);
+  }
+
+  /**
-   * @param chillmode  boolean
+   * @param chillmode boolean
-    return null;
+    return aggregateStat;
-    return null;
+    return nodeMetricMap;
-  public SCMNodeStat getNodeStat(DatanodeID datanodeID) {
-    return null;
+  public SCMNodeMetric getNodeStat(DatanodeID datanodeID) {
+    return new SCMNodeMetric(nodeMetricMap.get(datanodeID.toString()));
+    if ((datanodeID != null) && (nodeReport != null) && (nodeReport
+        .getStorageReportCount() > 0)) {
+      SCMNodeStat stat = this.nodeMetricMap.get(datanodeID.toString());
+
+      long totalCapacity = 0L;
+      long totalRemaining = 0L;
+      long totalScmUsed = 0L;
+      List<StorageContainerDatanodeProtocolProtos.SCMStorageReport>
+          storageReports = nodeReport.getStorageReportList();
+      for (StorageContainerDatanodeProtocolProtos.SCMStorageReport report :
+          storageReports) {
+        totalCapacity += report.getCapacity();
+        totalRemaining +=report.getRemaining();
+        totalScmUsed += report.getScmUsed();
+      }
+      aggregateStat.subtract(stat);
+      stat.set(totalCapacity, totalScmUsed, totalRemaining);
+      aggregateStat.add(stat);
+      nodeMetricMap.put(datanodeID.toString(), stat);
+
+    }
-    for(NodeManager.NODESTATE state : NodeManager.NODESTATE.values()) {
+    for (NodeManager.NODESTATE state : NodeManager.NODESTATE.values()) {
+
+  /**
+   * Makes it easy to add a container.
+   *
+   * @param datanodeID datanode ID
+   * @param size number of bytes.
+   */
+  public void addContainer(DatanodeID datanodeID, long size) {
+    SCMNodeStat stat = this.nodeMetricMap.get(datanodeID.toString());
+    if (stat != null) {
+      aggregateStat.subtract(stat);
+      stat.getCapacity().add(size);
+      aggregateStat.add(stat);
+      nodeMetricMap.put(datanodeID.toString(), stat);
+    }
+  }
+
+  /**
+   * Makes it easy to simulate a delete of a container.
+   *
+   * @param datanodeID datanode ID
+   * @param size number of bytes.
+   */
+  public void delContainer(DatanodeID datanodeID, long size) {
+    SCMNodeStat stat = this.nodeMetricMap.get(datanodeID.toString());
+    if (stat != null) {
+      aggregateStat.subtract(stat);
+      stat.getCapacity().subtract(size);
+      aggregateStat.add(stat);
+      nodeMetricMap.put(datanodeID.toString(), stat);
+    }
+  }
+
+  /**
+   * A class to declare some values for the nodes so that our tests
+   * won't fail.
+   */
+  private static class NodeData {
+    private long capacity, used;
+
+    /**
+     * Constructs a nodeDefinition.
+     *
+     * @param capacity capacity.
+     * @param used used.
+     */
+    NodeData(long capacity, long used) {
+      this.capacity = capacity;
+      this.used = used;
+    }
+
+    public long getCapacity() {
+      return capacity;
+    }
+
+    public void setCapacity(long capacity) {
+      this.capacity = capacity;
+    }
+
+    public long getUsed() {
+      return used;
+    }
+
+    public void setUsed(long used) {
+      this.used = used;
+    }
+  }

MOV26 INS26 INS26 MOV23 INS40 INS40 UPD40 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS74 INS59 INS83 INS83 MOV43 INS59 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS42 INS23 INS31 INS31 INS31 INS31 INS31 INS43 INS85 INS42 INS4 INS43 INS43 INS43 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS25 INS65 INS65 INS43 INS42 INS39 INS42 INS60 INS60 INS21 INS21 INS21 INS42 INS25 MOV41 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS60 INS25 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS60 INS25 INS65 INS83 INS39 INS59 INS59 INS29 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS42 INS42 INS42 INS7 INS7 INS42 INS8 INS66 INS42 INS66 INS42 INS43 INS59 INS39 INS59 INS32 INS32 INS32 UPD66 INS42 INS42 INS14 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS66 INS66 INS42 INS42 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS21 INS21 INS41 INS39 INS42 INS21 INS41 INS39 INS42 INS21 INS43 INS27 INS40 INS43 INS27 INS27 INS43 INS27 INS27 INS43 INS27 INS40 INS43 INS27 INS27 INS43 INS27 INS27 INS43 INS27 INS27 INS43 INS40 INS27 INS22 INS14 INS42 INS14 MOV24 INS42 INS42 INS14 INS42 INS27 INS42 INS42 INS36 INS36 INS42 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS36 INS36 INS36 INS60 INS60 INS60 INS60 INS60 INS70 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS21 INS66 INS42 INS66 INS42 INS66 INS7 INS7 INS42 INS7 INS42 INS7 INS42 INS34 INS40 INS42 INS34 INS40 INS34 INS40 INS42 INS34 INS40 INS34 INS40 INS42 INS34 INS40 INS42 INS34 INS40 INS34 INS40 INS42 INS34 INS40 INS34 INS40 INS42 INS34 INS40 INS34 INS40 INS42 INS34 INS40 INS52 INS42 INS74 INS43 INS43 INS22 INS22 INS22 INS22 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS27 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS32 INS32 INS32 INS22 INS42 INS32 INS32 INS32 INS32 INS32 INS22 INS42 INS32 INS32 INS32 INS32 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS2 INS42 INS2 INS42 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS32 INS34 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS43 INS59 INS32 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS22 INS42 INS32 INS42 INS40 INS42 INS42 INS40 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL34 DEL33 DEL33 DEL33 DEL8