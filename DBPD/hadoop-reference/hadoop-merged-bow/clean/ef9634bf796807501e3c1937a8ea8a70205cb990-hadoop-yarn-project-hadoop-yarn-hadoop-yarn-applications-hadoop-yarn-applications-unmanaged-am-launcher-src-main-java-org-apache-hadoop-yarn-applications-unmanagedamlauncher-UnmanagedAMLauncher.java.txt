YARN-1577. Made UnmanagedAMLauncher do launchAM after the attempt reaches the LAUNCHED state. Contributed by Jian He.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580164 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ApplicationAttemptReport;
+import org.apache.hadoop.yarn.api.records.YarnApplicationAttemptState;
-  private YarnClient rmClient;
+  protected YarnClient rmClient;
+  private static final long AM_STATE_WAIT_TIMEOUT_MS = 10000;
-    ApplicationReport report = 
-      rmClient.getApplicationReport(attemptId.getApplicationId());
-    if (report.getYarnApplicationState() != YarnApplicationState.ACCEPTED) {
-      throw new YarnException(
-          "Umanaged AM must be in ACCEPTED state before launching");
-    }
-  
-      // Monitor the application to wait for launch state
-      ApplicationReport appReport = monitorApplication(appId,
-          EnumSet.of(YarnApplicationState.ACCEPTED));
-      ApplicationAttemptId attemptId = appReport.getCurrentApplicationAttemptId();
-      LOG.info("Launching application with id: " + attemptId);
-  
-      // launch AM
-      launchAM(attemptId);
-  
-      // Monitor the application for end state
-      appReport = monitorApplication(appId, EnumSet.of(
-          YarnApplicationState.KILLED, YarnApplicationState.FAILED,
-          YarnApplicationState.FINISHED));
+
+      ApplicationReport appReport =
+          monitorApplication(appId, EnumSet.of(YarnApplicationState.ACCEPTED,
+            YarnApplicationState.KILLED, YarnApplicationState.FAILED,
+            YarnApplicationState.FINISHED));
+
+      if (appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED) {
+        // Monitor the application attempt to wait for launch state
+        ApplicationAttemptReport attemptReport =
+            monitorCurrentAppAttempt(appId,
+              YarnApplicationAttemptState.LAUNCHED);
+        ApplicationAttemptId attemptId =
+            attemptReport.getApplicationAttemptId();
+        LOG.info("Launching AM with application attempt id " + attemptId);
+        // launch AM
+        launchAM(attemptId);
+        // Monitor the application for end state
+        appReport =
+            monitorApplication(appId, EnumSet.of(YarnApplicationState.KILLED,
+              YarnApplicationState.FAILED, YarnApplicationState.FINISHED));
+      }
+  private ApplicationAttemptReport monitorCurrentAppAttempt(
+      ApplicationId appId, YarnApplicationAttemptState attemptState)
+      throws YarnException, IOException {
+    long startTime = System.currentTimeMillis();
+    ApplicationAttemptId attemptId = null;
+    while (true) {
+      if (attemptId == null) {
+        attemptId =
+            rmClient.getApplicationReport(appId)
+              .getCurrentApplicationAttemptId();
+      }
+      ApplicationAttemptReport attemptReport = null;
+      if (attemptId != null) {
+        attemptReport = rmClient.getApplicationAttemptReport(attemptId);
+        if (attemptState.equals(attemptReport.getYarnApplicationAttemptState())) {
+          return attemptReport;
+        }
+      }
+      LOG.info("Current attempt state of " + appId + " is " + (attemptReport == null
+            ? " N/A " : attemptReport.getYarnApplicationAttemptState())
+                + ", waiting for current attempt to reach " + attemptState);
+      try {
+        Thread.sleep(1000);
+      } catch (InterruptedException e) {
+        LOG.warn("Interrupted while waiting for current attempt of " + appId
+            + " to reach " + attemptState);
+      }
+      if (System.currentTimeMillis() - startTime > AM_STATE_WAIT_TIMEOUT_MS) {
+        String errmsg =
+            "Timeout for waiting current attempt of " + appId + " to reach "
+                + attemptState;
+        LOG.error(errmsg);
+        throw new RuntimeException(errmsg);
+      }
+    }
+  }
+
-    final int timeToWaitMS = 10000;
-            > timeToWaitMS) {
-          LOG.warn("Waited " + timeToWaitMS/1000
+            > AM_STATE_WAIT_TIMEOUT_MS) {
+          LOG.warn("Waited " + AM_STATE_WAIT_TIMEOUT_MS/1000

INS26 INS26 INS40 INS40 INS23 INS31 UPD83 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS42 INS44 INS44 MOV43 INS43 INS8 INS42 INS34 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS61 INS42 INS42 INS39 INS59 INS43 INS59 INS9 INS8 INS25 INS42 INS32 INS42 INS42 INS33 INS25 INS60 INS25 INS21 INS54 INS25 INS27 INS8 INS42 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS8 INS12 INS27 INS8 INS32 INS40 INS60 MOV60 MOV21 MOV21 MOV21 INS42 INS33 INS21 INS42 INS42 INS33 INS42 INS33 INS21 INS25 INS42 INS42 INS27 INS21 INS44 INS8 INS27 INS42 INS60 INS21 INS53 INS42 INS42 INS43 INS59 INS7 INS7 INS32 INS8 INS45 INS42 INS45 INS36 INS45 INS42 INS32 INS43 INS42 INS21 INS32 INS42 INS43 INS59 INS32 INS14 INS40 INS40 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS41 INS16 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS40 UPD42 UPD42 UPD45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS32 INS42 INS42 INS27 INS45 INS42 INS45 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS45 INS42 UPD42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL45 DEL14 DEL53 DEL8 DEL25 DEL83 DEL39 DEL42 DEL34 DEL59 DEL60