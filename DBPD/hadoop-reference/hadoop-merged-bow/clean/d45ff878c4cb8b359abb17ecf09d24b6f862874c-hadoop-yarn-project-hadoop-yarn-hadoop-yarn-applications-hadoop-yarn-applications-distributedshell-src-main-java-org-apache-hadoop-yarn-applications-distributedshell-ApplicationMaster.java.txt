YARN-3125. Made the distributed shell use timeline service next gen and add an integration test for it. Contributed by Junping Du and Li Lu.

(cherry picked from commit bf08f7f0ed4900ce52f98137297dd1a47ba2a536)

+  
+  private boolean newTimelineService = false;
-
+    opts.addOption("timeline_service_version", true, 
+        "Version for timeline service");
+
+    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,
+      YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {
+      if (cliParser.hasOption("timeline_service_version")) {
+        String timelineServiceVersion = 
+            cliParser.getOptionValue("timeline_service_version", "v1");
+        if (timelineServiceVersion.trim().equalsIgnoreCase("v1")) {
+          newTimelineService = false;
+        } else if (timelineServiceVersion.trim().equalsIgnoreCase("v2")) {
+          newTimelineService = true;
+        } else {
+          throw new IllegalArgumentException(
+              "timeline_service_version is not set properly, should be 'v1' or 'v2'");
+        }
+      }
+    } else {
+      timelineClient = null;
+      LOG.warn("Timeline service is not enabled");
+      if (cliParser.hasOption("timeline_service_version")) {
+        throw new IllegalArgumentException(
+            "Timeline service is not enabled");
+      }
+    }
+
-
-      publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
-          DSEvent.DS_APP_ATTEMPT_START, domainId, appSubmitterUgi);
+      if (newTimelineService) {
+        publishApplicationAttemptEventOnNewTimelineService(timelineClient, 
+            appAttemptID.toString(), DSEvent.DS_APP_ATTEMPT_START, domainId, 
+            appSubmitterUgi);
+      } else {
+        publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
+            DSEvent.DS_APP_ATTEMPT_START, domainId, appSubmitterUgi);
+      }
-    if(timelineClient != null) {
-      publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
+    if (timelineClient != null) {
+      if (newTimelineService) {
+        publishApplicationAttemptEventOnNewTimelineService(timelineClient,
+          appAttemptID.toString(), DSEvent.DS_APP_ATTEMPT_END, domainId,
+          appSubmitterUgi);
+      } else {
+        publishApplicationAttemptEvent(timelineClient, appAttemptID.toString(),
+      }
-          publishContainerEndEvent(
-              timelineClient, containerStatus, domainId, appSubmitterUgi);
+          if (newTimelineService) {
+            publishContainerEndEventOnNewTimelineService(
+                timelineClient, containerStatus, domainId, appSubmitterUgi);
+          } else {
+            publishContainerEndEvent(
+                timelineClient, containerStatus, domainId, appSubmitterUgi);
+          }
+
+        if (applicationMaster.newTimelineService) {
+            ApplicationMaster.publishContainerStartEventOnNewTimelineService(
+                applicationMaster.timelineClient, container,
+                applicationMaster.domainId, applicationMaster.appSubmitterUgi);
+        } else {
+          applicationMaster.publishContainerStartEvent(
+              applicationMaster.timelineClient, container,
+              applicationMaster.domainId, applicationMaster.appSubmitterUgi);
+        }
+  
+  private static void publishContainerStartEventOnNewTimelineService(
+      final TimelineClient timelineClient, Container container, String domainId,
+      UserGroupInformation ugi) {
+    final org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity entity = 
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity();
+    entity.setId(container.getId().toString());
+    entity.setType(DSEntity.DS_CONTAINER.toString());
+    //entity.setDomainId(domainId);
+    entity.addInfo("user", ugi.getShortUserName());
+    
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent event = 
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent();
+    event.setTimestamp(System.currentTimeMillis());
+    event.setId(DSEvent.DS_CONTAINER_START.toString());
+    event.addInfo("Node", container.getNodeId().toString());
+    event.addInfo("Resources", container.getResource().toString());
+    entity.addEvent(event);
+
+    try {
+      ugi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          timelineClient.putEntities(entity);
+          return null;
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("Container start event could not be published for "
+          + container.getId().toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
+  }
+
+  private static void publishContainerEndEventOnNewTimelineService(
+      final TimelineClient timelineClient, ContainerStatus container,
+      String domainId, UserGroupInformation ugi) {
+    final org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity entity = 
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity();
+    entity.setId(container.getContainerId().toString());
+    entity.setType(DSEntity.DS_CONTAINER.toString());
+    //entity.setDomainId(domainId);
+    entity.addInfo("user", ugi.getShortUserName());
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent event = 
+        new  org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent();
+    event.setTimestamp(System.currentTimeMillis());
+    event.setId(DSEvent.DS_CONTAINER_END.toString());
+    event.addInfo("State", container.getState().name());
+    event.addInfo("Exit Status", container.getExitStatus());
+    entity.addEvent(event);
+
+    try {
+      ugi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          timelineClient.putEntities(entity);
+          return null;
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("Container end event could not be published for "
+          + container.getContainerId().toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
+  }
+
+  private static void publishApplicationAttemptEventOnNewTimelineService(
+      final TimelineClient timelineClient, String appAttemptId,
+      DSEvent appEvent, String domainId, UserGroupInformation ugi) {
+    final org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity entity = 
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity();
+    entity.setId(appAttemptId);
+    entity.setType(DSEntity.DS_APP_ATTEMPT.toString());
+    //entity.setDomainId(domainId);
+    entity.addInfo("user", ugi.getShortUserName());
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent event = 
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEvent();
+    event.setId(appEvent.toString());
+    event.setTimestamp(System.currentTimeMillis());
+    entity.addEvent(event);
+
+    try {
+      ugi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public TimelinePutResponse run() throws Exception {
+          timelineClient.putEntities(entity);
+          return null;
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("App Attempt "
+          + (appEvent.equals(DSEvent.DS_APP_ATTEMPT_START) ? "start" : "end")
+          + " event could not be published for "
+          + appAttemptId.toString(),
+          e instanceof UndeclaredThrowableException ? e.getCause() : e);
+    }
+  }
+

INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS42 INS9 INS21 INS25 INS83 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS54 INS83 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS54 INS83 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS54 INS32 INS32 INS8 INS8 INS8 INS8 INS25 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS8 INS12 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS8 INS12 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS40 INS40 INS25 INS21 INS21 INS25 INS25 INS25 MOV27 INS8 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS21 INS44 INS8 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS21 INS44 INS8 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS44 INS8 INS32 INS8 INS7 INS32 INS32 INS8 INS42 INS8 MOV8 INS42 INS8 MOV8 INS21 MOV25 INS43 INS32 INS42 INS40 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS43 INS32 INS42 INS40 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS43 INS40 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS45 INS60 INS25 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS45 INS53 INS21 INS21 INS8 INS32 INS40 INS8 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS40 INS40 INS42 INS42 INS14 INS42 INS32 INS43 INS59 INS32 INS8 INS25 INS14 INS32 INS32 INS25 INS42 INS42 INS40 INS42 INS40 INS40 INS21 INS74 INS1 INS42 INS42 INS27 INS16 INS74 INS1 INS42 INS42 INS27 INS16 INS74 INS1 INS42 INS42 INS27 INS16 INS42 INS42 INS32 INS32 INS42 INS45 INS21 INS32 INS8 INS8 INS43 INS45 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS8 MOV8 INS32 INS43 INS43 INS31 INS45 INS32 INS62 INS32 INS42 INS43 INS43 INS31 INS45 INS32 INS62 INS32 INS42 INS43 INS43 INS31 INS45 INS36 INS45 INS32 INS62 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS7 INS32 INS42 INS45 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS40 INS42 INS40 INS40 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS16 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS9 INS42 INS42 INS7 INS14 INS32 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS32 INS45 INS45 INS42 INS42 INS9 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS32 INS33 INS32 INS33 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42