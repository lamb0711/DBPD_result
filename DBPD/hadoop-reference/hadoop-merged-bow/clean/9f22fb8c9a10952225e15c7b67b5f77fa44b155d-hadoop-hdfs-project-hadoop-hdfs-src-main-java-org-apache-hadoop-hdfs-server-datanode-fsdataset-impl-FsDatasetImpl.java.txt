HDFS-6978. Directory scanner should correctly reconcile blocks on RAM disk. (Arpit Agarwal)

-   * Copy the block and meta files for the given block from the given
+   * Copy the block and meta files for the given block to the given destination.
-  static File[] copyBlockFiles(ReplicaInfo replicaInfo, File destRoot)
+  static File[] copyBlockFiles(long blockId, long genStamp,
+                               File srcMeta, File srcFile, File destRoot)
-    final File destDir = DatanodeUtil.idToBlockDir(destRoot, replicaInfo.getBlockId());
-    final File dstFile = new File(destDir, replicaInfo.getBlockName());
-    final File dstMeta = FsDatasetUtil.getMetaFile(dstFile, replicaInfo.getGenerationStamp());
-    final File srcMeta = replicaInfo.getMetaFile();
-    final File srcFile = replicaInfo.getBlockFile();
+    final File destDir = DatanodeUtil.idToBlockDir(destRoot, blockId);
+    final File dstFile = new File(destDir, srcFile.getName());
+    final File dstMeta = FsDatasetUtil.getMetaFile(dstFile, genStamp);
-          LOG.warn("Block file " + memFile.getAbsolutePath()
-              + " does not match file found by scan "
-              + diskFile.getAbsolutePath());
-          // TODO: Should the diskFile be deleted?
+          if (diskMetaFile.exists()) {
+            if (memBlockInfo.getMetaFile().exists()) {
+              // We have two sets of block+meta files. Decide which one to
+              // keep.
+              ReplicaInfo diskBlockInfo = new FinalizedReplica(
+                  blockId, diskFile.length(), diskGS, vol, diskFile.getParentFile());
+              ((FsVolumeImpl) vol).getBlockPoolSlice(bpid).resolveDuplicateReplicas(
+                  memBlockInfo, diskBlockInfo, volumeMap);
+            }
+          } else {
+            if (!diskFile.delete()) {
+              LOG.warn("Failed to delete " + diskFile + ". Will retry on next scan");
+            }
+          }
+      BlockPoolSlice bpSlice;
+      File srcFile, srcMeta;
+      long genStamp;
-        File[] savedFiles = targetVolume.getBlockPoolSlice(bpid)
-                                        .lazyPersistReplica(replicaInfo);
-        lazyWriteReplicaTracker.recordEndLazyPersist(
-            bpid, blockId, savedFiles[0], savedFiles[1]);
+        bpSlice = targetVolume.getBlockPoolSlice(bpid);
+        srcMeta = replicaInfo.getMetaFile();
+        srcFile = replicaInfo.getBlockFile();
+        genStamp = replicaInfo.getGenerationStamp();
+      }
+
+      // Drop the FsDatasetImpl lock for the file copy.
+      File[] savedFiles =
+          bpSlice.lazyPersistReplica(blockId, genStamp, srcMeta, srcFile);
+
+      synchronized (FsDatasetImpl.this) {
+        lazyWriteReplicaTracker.recordEndLazyPersist(bpid, blockId, savedFiles);
-          // Move the replica outside the lock.
-        }
-        if (metaFile.delete() || !metaFile.exists()) {
-          ((FsVolumeImpl) replicaInfo.getVolume()).decDfsUsed(replicaState.bpid, metaFileUsed);
+          if (metaFile.delete() || !metaFile.exists()) {
+            ((FsVolumeImpl) replicaInfo.getVolume()).decDfsUsed(replicaState.bpid, metaFileUsed);
+          }

INS44 INS44 INS44 INS39 UPD42 INS39 INS42 MOV43 INS42 MOV43 INS42 UPD66 MOV43 MOV43 MOV43 INS60 INS60 INS60 INS60 INS51 INS43 INS59 INS43 INS59 INS59 INS39 INS59 MOV5 INS59 INS52 INS8 UPD42 MOV42 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS32 INS42 INS21 MOV25 UPD42 UPD42 INS25 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV27 INS8 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 MOV25 INS25 INS32 INS8 MOV8 INS42 INS42 INS25 INS32 INS8 INS38 INS32 INS42 INS60 INS21 INS32 INS42 INS42 MOV43 INS59 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS36 INS42 INS42 UPD45 INS42 UPD45 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS42 DEL42 DEL32 DEL83 DEL42 DEL59 DEL60 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL32