Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+    return getLocalPathForWrite(pathStr, size, conf, true);
+  }
+  
+  /** Get a path from the local FS. Pass size as 
+   *  SIZE_UNKNOWN if not known apriori. We
+   *  round-robin over the set of disks (via the configured dirs) and return
+   *  the first complete path which has enough space 
+   *  @param pathStr the requested path (this will be created on the first 
+   *  available disk)
+   *  @param size the size of the file that is going to be written
+   *  @param conf the Configuration object
+   *  @param checkWrite ensure that the path is writable
+   *  @return the complete path to the file on a local disk
+   *  @throws IOException
+   */
+  public Path getLocalPathForWrite(String pathStr, long size, 
+                                   Configuration conf,
+                                   boolean checkWrite) throws IOException {
-    return context.getLocalPathForWrite(pathStr, size, conf);
+    return context.getLocalPathForWrite(pathStr, size, conf, checkWrite);
+  
+  /**
+   * Get all of the paths that currently exist in the working directories.
+   * @param pathStr the path underneath the roots
+   * @param conf the configuration to look up the roots in
+   * @return all of the paths that exist under any of the roots
+   * @throws IOException
+   */
+  public Iterable<Path> getAllLocalPathsToRead(String pathStr, 
+                                               Configuration conf
+                                               ) throws IOException {
+    AllocatorPerContext context;
+    synchronized (this) {
+      context = obtainContext(contextCfgItemName);
+    }
+    return context.getAllLocalPathsToRead(pathStr, conf);    
+  }
-    private void confChanged(Configuration conf) throws IOException {
+    private synchronized void confChanged(Configuration conf) 
+        throws IOException {
-    private Path createPath(String path) throws IOException {
+    private Path createPath(String path, 
+        boolean checkWrite) throws IOException {
-      //check whether we are able to create a directory here. If the disk
-      //happens to be RDONLY we will fail
-      try {
-        DiskChecker.checkDir(new File(file.getParent().toUri().getPath()));
-        return file;
-      } catch (DiskErrorException d) {
-        LOG.warn("Disk Error Exception: ", d);
-        return null;
+      if (checkWrite) {
+        //check whether we are able to create a directory here. If the disk
+        //happens to be RDONLY we will fail
+        try {
+          DiskChecker.checkDir(new File(file.getParent().toUri().getPath()));
+          return file;
+        } catch (DiskErrorException d) {
+          LOG.warn("Disk Error Exception: ", d);
+          return null;
+        }
+      return file;
-    
-    /** Get a path from the local FS. This method should be used if the size of 
-     *  the file is not known a priori. 
-     *  
-     *  It will use roulette selection, picking directories
-     *  with probability proportional to their available space. 
-     */
-    public synchronized Path getLocalPathForWrite(String path, 
-        Configuration conf) throws IOException {
-      return getLocalPathForWrite(path, SIZE_UNKNOWN, conf);
-    }
-        Configuration conf) throws IOException {
+        Configuration conf, boolean checkWrite) throws IOException {
-          returnPath = createPath(pathStr);
+          returnPath = createPath(pathStr, checkWrite);
-            returnPath = createPath(pathStr);
+            returnPath = createPath(pathStr, checkWrite);
-      Path path = getLocalPathForWrite(pathStr, size, conf);
+      Path path = getLocalPathForWrite(pathStr, size, conf, true);
+    private static class PathIterator implements Iterator<Path>, Iterable<Path> {
+      private final FileSystem fs;
+      private final String pathStr;
+      private int i = 0;
+      private final String[] rootDirs;
+      private Path next = null;
+
+      private PathIterator(FileSystem fs, String pathStr, String[] rootDirs)
+          throws IOException {
+        this.fs = fs;
+        this.pathStr = pathStr;
+        this.rootDirs = rootDirs;
+        advance();
+      }
+
+      @Override
+      public boolean hasNext() {
+        return next != null;
+      }
+
+      private void advance() throws IOException {
+        while (i < rootDirs.length) {
+          next = new Path(rootDirs[i++], pathStr);
+          if (fs.exists(next)) {
+            return;
+          }
+        }
+        next = null;
+      }
+
+      @Override
+      public Path next() {
+        Path result = next;
+        try {
+          advance();
+        } catch (IOException ie) {
+          throw new RuntimeException("Can't check existance of " + next, ie);
+        }
+        return result;
+      }
+
+      @Override
+      public void remove() {
+        throw new UnsupportedOperationException("read only iterator");
+      }
+
+      @Override
+      public Iterator<Path> iterator() {
+        return this;
+      }
+    }
+
+    /**
+     * Get all of the paths that currently exist in the working directories.
+     * @param pathStr the path underneath the roots
+     * @param conf the configuration to look up the roots in
+     * @return all of the paths that exist under any of the roots
+     * @throws IOException
+     */
+    synchronized Iterable<Path> getAllLocalPathsToRead(String pathStr,
+        Configuration conf) throws IOException {
+      confChanged(conf);
+      if (pathStr.startsWith("/")) {
+        pathStr = pathStr.substring(1);
+      }
+      return new PathIterator(localFS, pathStr, localDirs);
+    }
+

INS31 INS31 MOV31 INS8 INS29 INS83 MOV43 INS42 INS44 INS44 MOV44 INS44 MOV43 MOV8 INS29 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS55 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS60 INS51 INS41 INS83 INS44 INS44 INS83 INS83 INS42 INS74 INS74 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS74 UPD42 INS44 INS43 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS52 INS8 INS32 INS39 INS42 INS25 INS41 INS39 INS42 INS43 INS43 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS83 INS5 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS43 UPD42 INS43 INS42 INS42 INS21 INS25 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS85 INS42 INS42 INS42 INS33 INS43 INS42 INS43 INS42 INS5 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS41 INS42 INS61 INS21 INS42 INS42 INS60 INS54 INS41 INS42 INS53 INS42 INS43 INS43 INS41 UPD66 MOV66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 UPD66 MOV66 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS14 INS7 MOV54 INS42 INS42 INS42 INS43 INS85 INS7 INS7 INS7 INS32 INS27 INS27 INS8 INS7 INS43 INS59 INS8 INS12 INS42 INS14 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS45 INS21 INS43 INS42 INS42 INS42 INS42 INS32 INS9 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS33 INS42 INS40 INS21 INS25 INS42 INS33 INS42 INS42 INS42 INS21 INS44 INS8 INS43 INS45 INS7 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS32 INS8 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS34 INS43 INS2 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS37 INS42 INS45 INS42 INS42 INS42 DEL65 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32