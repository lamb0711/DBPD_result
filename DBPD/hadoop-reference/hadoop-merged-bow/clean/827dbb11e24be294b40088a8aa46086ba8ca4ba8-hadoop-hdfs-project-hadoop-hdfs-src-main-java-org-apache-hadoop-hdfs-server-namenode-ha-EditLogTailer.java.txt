HDFS-14370. Add exponential backoff to the edit log tailer to avoid spinning on empty edit tail requests. Contributed by Erik Krogen.

-   * How often the Standby should check if there are new finalized segment(s)
-   * available to be read from.
+   * How often the tailer should check if there are new edit log entries
+   * ready to be consumed. This is the initial delay before any backoff.
+  /**
+   * The maximum time the tailer should wait between checking for new edit log
+   * entries. Exponential backoff will be applied when an edit log tail is
+   * performed but no edits are available to be read. If this is less than or
+   * equal to 0, backoff is disabled.
+   */
+  private final long maxSleepTimeMs;
+    long maxSleepTimeMsTemp = conf.getTimeDuration(
+        DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_BACKOFF_MAX_KEY,
+        DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_BACKOFF_MAX_DEFAULT,
+        TimeUnit.SECONDS, TimeUnit.MILLISECONDS);
+    if (maxSleepTimeMsTemp > 0 && maxSleepTimeMsTemp < sleepTimeMs) {
+      LOG.warn("{} was configured to be {} ms, but this is less than {}."
+              + "Disabling backoff when tailing edit logs.",
+          DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_BACKOFF_MAX_KEY,
+          maxSleepTimeMsTemp, DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY);
+      maxSleepTimeMs = 0;
+    } else {
+      maxSleepTimeMs = maxSleepTimeMsTemp;
+    }
-  public void doTailEdits() throws IOException, InterruptedException {
+  public long doTailEdits() throws IOException, InterruptedException {
-        return;
+        return 0;
+      return editsLoaded;
+  @VisibleForTesting
+  void sleep(long sleepTimeMillis) throws InterruptedException {
+    Thread.sleep(sleepTimeMillis);
+  }
+
+      long currentSleepTimeMs = sleepTimeMs;
+        long editsTailed  = 0;
-            doTailEdits();
+            editsTailed = doTailEdits();
-          Thread.sleep(sleepTimeMs);
+          if (editsTailed == 0 && maxSleepTimeMs > 0) {
+            // If no edits were tailed, apply exponential backoff
+            // before tailing again. Double the current sleep time on each
+            // empty response, but don't exceed the max. If the sleep time
+            // was configured as 0, start the backoff at 1 ms.
+            currentSleepTimeMs = Math.min(maxSleepTimeMs,
+                (currentSleepTimeMs == 0 ? 1 : currentSleepTimeMs) * 2);
+          } else {
+            currentSleepTimeMs = sleepTimeMs; // reset to initial sleep time
+          }
+          EditLogTailer.this.sleep(currentSleepTimeMs);

INS23 INS31 INS29 INS83 INS83 INS39 INS59 UPD39 INS78 INS39 INS42 INS44 INS43 INS8 INS65 INS42 INS60 INS25 INS42 INS39 INS42 INS42 INS21 UPD66 UPD66 INS66 INS66 INS66 INS66 INS39 INS59 INS27 INS8 INS8 INS32 INS60 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS41 INS42 INS42 INS42 INS39 INS59 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS34 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS60 INS42 INS42 INS27 INS40 INS42 INS40 INS42 INS34 INS42 INS42 INS39 INS59 INS45 INS45 INS42 INS34 INS25 INS34 INS27 INS8 INS8 INS27 INS27 INS21 INS21 INS52 UPD42 INS7 INS42 INS34 INS42 INS34 INS7 INS7 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS36 INS34 INS16 INS27 INS34 INS42 INS42 INS34 DEL42