Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612403 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.Principal;
+import javax.ws.rs.DELETE;
+import org.apache.hadoop.security.UserGroupInformation.AuthenticationMethod;
+import org.apache.hadoop.security.authentication.server.KerberosAuthenticationHandler;
+import org.apache.hadoop.security.token.SecretManager.InvalidToken;
+import org.apache.hadoop.yarn.api.protocolrecords.CancelDelegationTokenRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.CancelDelegationTokenResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.GetDelegationTokenRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetDelegationTokenResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.RenewDelegationTokenRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.RenewDelegationTokenResponse;
+import org.apache.hadoop.yarn.security.client.RMDelegationTokenIdentifier;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.DelegationToken;
+import org.apache.hadoop.yarn.server.utils.BuilderUtils;
+  public final static String DELEGATION_TOKEN_HEADER =
+      "Hadoop-YARN-RM-Delegation-Token";
+
-    String remoteUser = hsr.getRemoteUser();
-    UserGroupInformation callerUGI = null;
-    if (remoteUser != null) {
-      callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
-    }
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
-    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
-    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
-      HttpServletRequest hsr) {
+      HttpServletRequest hsr, boolean usePrincipal) {
+    if (usePrincipal) {
+      Principal princ = hsr.getUserPrincipal();
+      remoteUser = princ == null ? null : princ.getName();
+    }
+
-    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
-    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr);
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
-        new NewApplication(resp.getApplicationId().toString(), new ResourceInfo(
-          resp.getMaximumResourceCapability()));
+        new NewApplication(resp.getApplicationId().toString(),
+          new ResourceInfo(resp.getMaximumResourceCapability()));
-      ApplicationSubmissionContextInfo newApp) throws BadRequestException, IOException {
+      ApplicationSubmissionContextInfo newApp) throws BadRequestException,
+      IOException {
+
+  private UserGroupInformation createKerberosUserGroupInformation(
+      HttpServletRequest hsr) throws AuthorizationException, YarnException {
+
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      String msg = "Unable to obtain user name, user not authenticated";
+      throw new AuthorizationException(msg);
+    }
+
+    String authType = hsr.getAuthType();
+    if (!KerberosAuthenticationHandler.TYPE.equals(authType)) {
+      String msg =
+          "Delegation token operations can only be carried out on a "
+              + "Kerberos authenticated channel";
+      throw new YarnException(msg);
+    }
+
+    callerUGI.setAuthenticationMethod(AuthenticationMethod.KERBEROS);
+    return callerUGI;
+  }
+
+  @POST
+  @Path("/delegation-token")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response postDelegationToken(DelegationToken tokenData,
+      @Context HttpServletRequest hsr) throws AuthorizationException,
+      IOException, InterruptedException, Exception {
+
+    init();
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = createKerberosUserGroupInformation(hsr);
+    } catch (YarnException ye) {
+      return Response.status(Status.FORBIDDEN).entity(ye.getMessage()).build();
+    }
+    return createDelegationToken(tokenData, hsr, callerUGI);
+  }
+
+  @POST
+  @Path("/delegation-token/expiration")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response
+      postDelegationTokenExpiration(@Context HttpServletRequest hsr)
+          throws AuthorizationException, IOException, InterruptedException,
+          Exception {
+
+    init();
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = createKerberosUserGroupInformation(hsr);
+    } catch (YarnException ye) {
+      return Response.status(Status.FORBIDDEN).entity(ye.getMessage()).build();
+    }
+
+    DelegationToken requestToken = new DelegationToken();
+    requestToken.setToken(extractToken(hsr).encodeToUrlString());
+    return renewDelegationToken(requestToken, hsr, callerUGI);
+  }
+
+  private Response createDelegationToken(DelegationToken tokenData,
+      HttpServletRequest hsr, UserGroupInformation callerUGI)
+      throws AuthorizationException, IOException, InterruptedException,
+      Exception {
+
+    final String renewer = tokenData.getRenewer();
+    GetDelegationTokenResponse resp;
+    try {
+      resp =
+          callerUGI
+            .doAs(new PrivilegedExceptionAction<GetDelegationTokenResponse>() {
+              @Override
+              public GetDelegationTokenResponse run() throws IOException,
+                  YarnException {
+                GetDelegationTokenRequest createReq =
+                    GetDelegationTokenRequest.newInstance(renewer);
+                return rm.getClientRMService().getDelegationToken(createReq);
+              }
+            });
+    } catch (Exception e) {
+      LOG.info("Create delegation token request failed", e);
+      throw e;
+    }
+
+    Token<RMDelegationTokenIdentifier> tk =
+        new Token<RMDelegationTokenIdentifier>(resp.getRMDelegationToken()
+          .getIdentifier().array(), resp.getRMDelegationToken().getPassword()
+          .array(), new Text(resp.getRMDelegationToken().getKind()), new Text(
+          resp.getRMDelegationToken().getService()));
+    RMDelegationTokenIdentifier identifier = tk.decodeIdentifier();
+    long currentExpiration =
+        rm.getRMContext().getRMDelegationTokenSecretManager()
+          .getRenewDate(identifier);
+    DelegationToken respToken =
+        new DelegationToken(tk.encodeToUrlString(), renewer, identifier
+          .getOwner().toString(), tk.getKind().toString(), currentExpiration,
+          identifier.getMaxDate());
+    return Response.status(Status.OK).entity(respToken).build();
+  }
+
+  private Response renewDelegationToken(DelegationToken tokenData,
+      HttpServletRequest hsr, UserGroupInformation callerUGI)
+      throws AuthorizationException, IOException, InterruptedException,
+      Exception {
+
+    Token<RMDelegationTokenIdentifier> token =
+        extractToken(tokenData.getToken());
+
+    org.apache.hadoop.yarn.api.records.Token dToken =
+        BuilderUtils.newDelegationToken(token.getIdentifier(), token.getKind()
+          .toString(), token.getPassword(), token.getService().toString());
+    final RenewDelegationTokenRequest req =
+        RenewDelegationTokenRequest.newInstance(dToken);
+
+    RenewDelegationTokenResponse resp;
+    try {
+      resp =
+          callerUGI
+            .doAs(new PrivilegedExceptionAction<RenewDelegationTokenResponse>() {
+              @Override
+              public RenewDelegationTokenResponse run() throws IOException,
+                  YarnException {
+                return rm.getClientRMService().renewDelegationToken(req);
+              }
+            });
+    } catch (UndeclaredThrowableException ue) {
+      if (ue.getCause() instanceof YarnException) {
+        if (ue.getCause().getCause() instanceof InvalidToken) {
+          throw new BadRequestException(ue.getCause().getCause().getMessage());
+        } else if (ue.getCause().getCause() instanceof org.apache.hadoop.security.AccessControlException) {
+          return Response.status(Status.FORBIDDEN)
+            .entity(ue.getCause().getCause().getMessage()).build();
+        }
+        LOG.info("Renew delegation token request failed", ue);
+        throw ue;
+      }
+      LOG.info("Renew delegation token request failed", ue);
+      throw ue;
+    } catch (Exception e) {
+      LOG.info("Renew delegation token request failed", e);
+      throw e;
+    }
+    long renewTime = resp.getNextExpirationTime();
+
+    DelegationToken respToken = new DelegationToken();
+    respToken.setNextExpirationTime(renewTime);
+    return Response.status(Status.OK).entity(respToken).build();
+  }
+
+  // For cancelling tokens, the encoded token is passed as a header
+  // There are two reasons for this -
+  // 1. Passing a request body as part of a DELETE request is not
+  // allowed by Jetty
+  // 2. Passing the encoded token as part of the url is not ideal
+  // since urls tend to get logged and anyone with access to
+  // the logs can extract tokens which are meant to be secret
+  @DELETE
+  @Path("/delegation-token")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response cancelDelegationToken(@Context HttpServletRequest hsr)
+      throws AuthorizationException, IOException, InterruptedException,
+      Exception {
+
+    init();
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = createKerberosUserGroupInformation(hsr);
+    } catch (YarnException ye) {
+      return Response.status(Status.FORBIDDEN).entity(ye.getMessage()).build();
+    }
+
+    Token<RMDelegationTokenIdentifier> token = extractToken(hsr);
+
+    org.apache.hadoop.yarn.api.records.Token dToken =
+        BuilderUtils.newDelegationToken(token.getIdentifier(), token.getKind()
+          .toString(), token.getPassword(), token.getService().toString());
+    final CancelDelegationTokenRequest req =
+        CancelDelegationTokenRequest.newInstance(dToken);
+
+    try {
+      callerUGI
+        .doAs(new PrivilegedExceptionAction<CancelDelegationTokenResponse>() {
+          @Override
+          public CancelDelegationTokenResponse run() throws IOException,
+              YarnException {
+            return rm.getClientRMService().cancelDelegationToken(req);
+          }
+        });
+    } catch (UndeclaredThrowableException ue) {
+      if (ue.getCause() instanceof YarnException) {
+        if (ue.getCause().getCause() instanceof InvalidToken) {
+          throw new BadRequestException(ue.getCause().getCause().getMessage());
+        } else if (ue.getCause().getCause() instanceof org.apache.hadoop.security.AccessControlException) {
+          return Response.status(Status.FORBIDDEN)
+            .entity(ue.getCause().getCause().getMessage()).build();
+        }
+        LOG.info("Renew delegation token request failed", ue);
+        throw ue;
+      }
+      LOG.info("Renew delegation token request failed", ue);
+      throw ue;
+    } catch (Exception e) {
+      LOG.info("Renew delegation token request failed", e);
+      throw e;
+    }
+
+    return Response.status(Status.OK).build();
+  }
+
+  private Token<RMDelegationTokenIdentifier> extractToken(
+      HttpServletRequest request) {
+    String encodedToken = request.getHeader(DELEGATION_TOKEN_HEADER);
+    if (encodedToken == null) {
+      String msg =
+          "Header '" + DELEGATION_TOKEN_HEADER
+              + "' containing encoded token not found";
+      throw new BadRequestException(msg);
+    }
+    return extractToken(encodedToken);
+  }
+
+  private Token<RMDelegationTokenIdentifier> extractToken(String encodedToken) {
+    Token<RMDelegationTokenIdentifier> token =
+        new Token<RMDelegationTokenIdentifier>();
+    try {
+      token.decodeFromUrlString(encodedToken);
+    } catch (Exception ie) {
+      String msg = "Could not decode encoded token";
+      throw new BadRequestException(msg);
+    }
+    return token;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS44 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS74 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS42 INS42 INS45 INS60 INS39 INS42 INS25 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS25 INS21 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS54 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS54 INS60 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS54 INS60 INS60 INS60 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS54 INS60 INS60 INS21 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS54 INS60 INS60 INS60 INS54 INS41 INS43 INS43 INS43 INS42 INS60 INS25 INS41 INS43 INS43 INS43 INS42 INS60 INS54 INS41 MOV43 INS59 INS42 INS8 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS38 INS8 INS32 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS32 INS40 INS40 INS40 INS40 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS83 INS43 INS59 INS43 INS59 INS8 INS12 INS74 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS39 INS59 INS43 INS59 INS32 INS32 INS40 INS40 INS42 INS42 INS32 INS43 INS59 INS8 INS12 INS74 INS59 INS43 INS59 INS83 INS43 INS59 INS8 INS12 INS12 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS42 MOV42 INS32 INS60 INS21 INS42 INS42 INS32 INS42 INS33 INS60 INS53 INS42 INS42 INS32 INS32 INS60 INS53 INS42 INS42 INS40 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS43 INS43 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS44 INS8 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS43 INS43 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS44 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS53 INS42 INS42 INS43 INS43 INS42 INS14 INS21 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS9 INS9 INS9 INS43 INS59 INS7 INS9 INS9 INS42 INS42 INS9 INS43 INS59 INS14 INS42 INS42 INS40 INS42 INS42 INS43 INS59 INS14 INS7 INS43 INS42 INS41 INS7 INS43 INS42 INS41 INS43 INS32 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS42 INS42 INS74 INS32 INS32 INS14 INS14 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS7 INS43 INS42 INS25 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS43 INS32 INS42 INS42 INS7 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS59 INS14 INS42 INS42 INS74 INS32 INS43 INS42 INS60 INS53 INS42 INS42 INS32 INS42 INS16 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS43 INS32 INS42 INS32 INS42 INS43 INS32 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS62 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS62 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS43 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS59 INS14 INS42 INS42 INS27 INS33 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS43 INS25 INS21 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS1 INS32 INS43 INS25 INS21 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS62 INS8 INS25 INS32 INS42 INS32 INS42 INS32 INS43 INS43 INS31 INS42 INS42 INS42 INS62 INS8 INS25 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS43 INS31 INS43 INS43 INS31 INS32 INS43 INS53 INS62 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS32 INS43 INS53 INS62 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS32 INS42 INS42 INS14 INS32 INS43 INS41 INS42 INS42 INS42 INS42 INS41 INS32 INS42 INS42 INS14 INS32 INS43 INS41 INS42 INS42 INS42 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS43 INS32 INS32 INS42 INS40 INS32 INS32 INS42 INS42 INS43 INS32 INS32 INS42 INS40 INS32 INS43 INS59 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25