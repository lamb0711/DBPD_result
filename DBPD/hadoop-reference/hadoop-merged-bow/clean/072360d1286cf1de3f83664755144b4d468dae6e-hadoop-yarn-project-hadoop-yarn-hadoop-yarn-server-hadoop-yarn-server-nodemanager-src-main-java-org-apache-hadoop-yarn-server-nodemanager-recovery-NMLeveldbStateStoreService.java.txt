YARN-1339. Recover DeletionService state upon nodemanager restart. (Contributed by Jason Lowe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603036 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.DeletionServiceDeleteTaskProto;
+  private static final String DELETION_TASK_KEY_PREFIX =
+      "DeletionService/deltask_";
+
+  public RecoveredDeletionServiceState loadDeletionServiceState()
+      throws IOException {
+    RecoveredDeletionServiceState state = new RecoveredDeletionServiceState();
+    state.tasks = new ArrayList<DeletionServiceDeleteTaskProto>();
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      iter.seek(bytes(DELETION_TASK_KEY_PREFIX));
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> entry = iter.next();
+        String key = asString(entry.getKey());
+        if (!key.startsWith(DELETION_TASK_KEY_PREFIX)) {
+          break;
+        }
+        state.tasks.add(
+            DeletionServiceDeleteTaskProto.parseFrom(entry.getValue()));
+      }
+    } catch (DBException e) {
+      throw new IOException(e.getMessage(), e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+    return state;
+  }
+
+  @Override
+  public void storeDeletionTask(int taskId,
+      DeletionServiceDeleteTaskProto taskProto) throws IOException {
+    String key = DELETION_TASK_KEY_PREFIX + taskId;
+    try {
+      db.put(bytes(key), taskProto.toByteArray());
+    } catch (DBException e) {
+      throw new IOException(e.getMessage(), e);
+    }
+  }
+
+  @Override
+  public void removeDeletionTask(int taskId) throws IOException {
+    String key = DELETION_TASK_KEY_PREFIX + taskId;
+    try {
+      db.delete(bytes(key));
+    } catch (DBException e) {
+      throw new IOException(e.getMessage(), e);
+    }
+  }
+
+
+  @Override

INS26 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS60 INS21 INS60 INS54 INS41 INS42 INS39 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS39 INS42 INS42 INS60 INS54 INS43 INS59 INS7 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS43 INS59 INS8 INS12 INS43 INS59 INS8 INS12 INS42 INS42 INS14 INS40 INS14 INS42 INS42 INS33 INS21 INS21 INS61 INS44 INS8 INS25 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 INS43 INS74 INS7 INS32 INS32 INS8 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS21 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS38 INS8 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42