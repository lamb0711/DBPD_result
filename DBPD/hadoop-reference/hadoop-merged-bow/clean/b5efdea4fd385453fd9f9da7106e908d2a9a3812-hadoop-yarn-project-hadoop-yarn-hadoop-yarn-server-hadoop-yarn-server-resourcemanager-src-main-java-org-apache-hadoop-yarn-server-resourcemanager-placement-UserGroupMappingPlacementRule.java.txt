YARN-10254. CapacityScheduler incorrect User Group Mapping after leaf queue change. Contributed by Gergely Pollak

+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "primary group current user mapping", user);
+            }
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "secondary group current user mapping", user);
+            }
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "current user mapping", user);
+            }
-            return getContextForPrimaryGroup(user, mapping);
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "primary group mapping", user);
+            }
+            return getPlacementContext(mapping, getPrimaryGroup(user));
-            return getContextForSecondaryGroup(user, mapping);
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "secondary group mapping", user);
+            }
+            return getPlacementContext(mapping, getSecondaryGroup(user));
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "static user static mapping", user);
+            }
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "static user primary group mapping", user);
+            }
+              if (LOG.isDebugEnabled()) {
+                LOG.debug("Creating placement context for user {} using " +
+                    "static user secondary group mapping", user);
+              }
+              if (LOG.isDebugEnabled()) {
+                LOG.debug("Wanted to create placement context for user {}" +
+                    " using static user secondary group mapping," +
+                    " but user has no secondary group!", user);
+              }
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "static user static mapping", user);
+            }
+              if (LOG.isDebugEnabled()) {
+                LOG.debug("Creating placement context for user {} using " +
+                    "static group current user mapping", user);
+              }
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Creating placement context for user {} using " +
+                  "static group static mapping", user);
+            }
-  // invoked for mappings:
-  //    u:%user:[parent].%primary_group
-  //    u:%user:%primary_group
-  private ApplicationPlacementContext getContextForPrimaryGroup(
-      String user,
-      QueueMapping mapping) throws IOException {
-    String group =
-        CapacitySchedulerConfiguration.ROOT + "." + getPrimaryGroup(user);
-
-    String parent = mapping.getParentQueue();
-    CSQueue groupQueue = queueManager.getQueue(group);
-
-    if (parent != null) {
-      CSQueue parentQueue = queueManager.getQueue(parent);
-
-      if (parentQueue instanceof ManagedParentQueue) {
-        return getPlacementContext(mapping, group);
-      } else {
-        return groupQueue == null ? null : getPlacementContext(mapping, group);
-      }
-    } else {
-      return groupQueue == null ? null : getPlacementContext(mapping, group);
-    }
-  }
-
-  // invoked for mappings
-  //    u:%user:%secondary_group
-  //    u:%user:[parent].%secondary_group
-  private ApplicationPlacementContext getContextForSecondaryGroup(
-      String user,
-      QueueMapping mapping) throws IOException {
-    String secondaryGroup = getSecondaryGroup(user);
-
-    if (secondaryGroup != null) {
-      CSQueue queue = this.queueManager.getQueue(secondaryGroup);
-      if ( queue != null) {
-        return getPlacementContext(mapping, queue.getQueuePath());
-      } else {
-        return null;
-      }
-    } else {
-      return null;
-    }
+  /**
+   * This convenience method allows to change the parent path or a leafName in
+   * a mapping object, by creating a new one, using the builder and copying the
+   * rest of the parameters.
+   * @param mapping The mapping to be changed
+   * @param parentPath The new parentPath of the mapping
+   * @param leafName The new leafQueueName of the mapping
+   * @return The updated NEW mapping
+   */
+  private QueueMapping alterMapping(
+      QueueMapping mapping, String parentPath, String leafName) {
+    return QueueMappingBuilder.create()
+            .type(mapping.getType())
+            .source(mapping.getSource())
+            .queue(leafName)
+            .parentQueue(parentPath)
+            .build();
-    if (this.queueManager.getQueue(group) != null) {
+    CSQueue groupQueue = this.queueManager.getQueue(group);
+    if (groupQueue != null) {
-      QueueMapping resolvedGroupMapping =
-                        QueueMappingBuilder.create()
-                            .type(mapping.getType())
-                            .source(mapping.getSource())
-                            .queue(user)
-                            .parentQueue(
-                                CapacitySchedulerConfiguration.ROOT + "." +
-                                group)
-                            .build();
+      QueueMapping resolvedGroupMapping = alterMapping(
+          mapping,
+          groupQueue.getQueuePath(),
+          user);
+      if (queueManager.isAmbiguous(group)) {
+        LOG.info("Queue mapping rule expect group queue to exist with name {}" +
+            " but the reference is ambiguous!", group);
+      } else {
+        LOG.info("Queue mapping rule expect group queue to exist with name {}" +
+            " but it does not exist!", group);
+      }
-        throw new YarnException(message);
+        throw new YarnException(message, ioex);
-
-      return new ApplicationPlacementContext(leafQueueName,
-          mapping.getParentQueue());
-    } else{
-      return new ApplicationPlacementContext(leafQueueName);
+      return getPlacementContextWithParent(mapping, leafQueueName);
+    } else {
+      return getPlacementContextNoParent(leafQueueName);
+  private ApplicationPlacementContext getPlacementContextWithParent(
+      QueueMapping mapping,
+      String leafQueueName) {
+    CSQueue parent = queueManager.getQueue(mapping.getParentQueue());
+    //we don't find the specified parent, so the placement rule is invalid
+    //for this case
+    if (parent == null) {
+      if (queueManager.isAmbiguous(mapping.getParentQueue())) {
+        LOG.warn("Placement rule specified a parent queue {}, but it is" +
+            "ambiguous.", mapping.getParentQueue());
+      } else {
+        LOG.warn("Placement rule specified a parent queue {}, but it does" +
+            "not exist.", mapping.getParentQueue());
+      }
+      return null;
+    }
+
+    String parentPath = parent.getQueuePath();
+
+    //if we have a parent which is not a managed parent, we check if the leaf
+    //queue exists under this parent
+    if (!(parent instanceof ManagedParentQueue)) {
+      CSQueue queue = queueManager.getQueue(parentPath + "." + leafQueueName);
+      //if the queue doesn't exit we return null
+      if (queue == null) {
+          LOG.warn("Placement rule specified a parent queue {}, but it is" +
+              " not a managed parent queue, and no queue exists with name {} " +
+              "under it.", mapping.getParentQueue(), leafQueueName);
+        return null;
+      }
+    }
+    //at this point we either have a managed parent or the queue actually
+    //exists so we have a placement context, returning it
+    return new ApplicationPlacementContext(leafQueueName, parentPath);
+  }
+
+  private ApplicationPlacementContext getPlacementContextNoParent(
+      String leafQueueName) {
+    //in this case we don't have a parent specified so we expect the queue to
+    //exist, otherwise the mapping will not be valid for this case
+    CSQueue queue = queueManager.getQueue(leafQueueName);
+    if (queue == null) {
+      if (queueManager.isAmbiguous(leafQueueName)) {
+        LOG.warn("Queue {} specified in placement rule is ambiguous",
+            leafQueueName);
+      } else {
+        LOG.warn("Queue {} specified in placement rule does not exist",
+            leafQueueName);
+      }
+      return null;
+    }
+
+    //getting parent path to make sure if the leaf name would become ambiguous
+    //the placement context stays valid.
+    CSQueue parent = queueManager.getQueue(leafQueueName).getParent();
+    return new ApplicationPlacementContext(
+        leafQueueName, parent.getQueuePath());
+  }
+
-          + leafQueueFullName);
-      } else {
-        throw new IOException("mapping contains invalid or non-leaf queue : "
-          + leafQueueFullName);
+            + leafQueueFullName);
+      } else if (parentQueue == null ||
+          (!(parentQueue instanceof ManagedParentQueue))) {
+        throw new IOException("mapping contains invalid or non-leaf queue " +
+            " and no managed parent is found: "
+            + leafQueueFullName);

MOV31 MOV31 INS31 INS31 INS29 INS83 MOV43 INS42 MOV44 INS44 INS44 MOV8 INS83 MOV43 INS42 MOV44 MOV44 MOV44 MOV43 INS8 UPD42 MOV44 INS8 MOV43 UPD42 INS44 INS65 INS65 INS65 INS65 INS65 MOV43 INS42 MOV43 INS42 INS41 MOV60 MOV25 UPD42 INS60 INS25 MOV60 MOV25 MOV41 INS43 INS42 INS60 INS60 INS41 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 MOV32 MOV43 INS8 INS8 MOV43 INS59 INS27 INS8 INS38 INS42 INS43 INS59 UPD27 INS8 INS43 INS59 INS14 MOV32 UPD42 MOV60 MOV21 MOV41 INS25 MOV41 INS41 INS42 INS32 INS42 INS33 INS25 MOV41 UPD42 INS36 INS42 INS42 INS42 INS32 INS42 INS25 INS41 INS42 INS42 INS32 MOV43 INS42 INS32 INS42 INS43 INS32 MOV8 MOV8 INS32 INS32 INS42 INS42 MOV32 INS32 INS8 INS8 UPD42 UPD42 INS62 MOV43 UPD27 INS42 INS42 INS42 INS32 MOV8 INS8 INS33 INS32 INS42 INS42 INS42 INS25 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS21 INS21 INS42 INS43 INS21 MOV41 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS27 MOV8 INS42 INS42 INS32 UPD42 INS32 INS32 INS32 INS32 INS42 INS42 INS27 INS32 INS32 INS32 INS27 INS36 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 MOV42 INS42 INS42 INS27 INS32 INS42 INS42 INS27 INS32 INS42 INS45 INS42 UPD42 MOV42 INS42 INS27 INS32 UPD42 MOV42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS33 INS38 INS8 INS45 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS45 MOV42 UPD42 MOV42 INS36 INS25 INS25 INS8 MOV25 INS25 MOV41 MOV62 UPD45 INS45 INS32 INS8 INS25 INS8 INS32 INS8 INS25 MOV41 INS8 INS32 MOV8 INS42 INS42 INS21 INS32 INS8 INS25 MOV41 INS42 INS42 INS21 INS8 INS8 INS32 MOV8 INS25 MOV41 INS42 INS42 INS21 INS32 INS42 INS42 INS21 INS32 MOV8 INS25 INS8 INS32 INS25 MOV41 INS25 MOV41 INS42 INS42 INS21 INS32 MOV8 INS32 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS21 INS32 INS8 INS32 INS25 INS25 MOV41 INS42 INS42 INS27 INS42 INS32 MOV8 INS32 MOV8 INS32 INS42 INS42 INS21 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS45 INS45 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS32 INS8 INS32 INS32 MOV8 INS45 INS45 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS32 INS45 INS45 INS45 INS45 INS42 INS42 INS27 INS42 INS32 UPD42 MOV42 MOV42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS32 INS45 INS45 INS42 INS42 INS27 INS42 INS45 INS45 INS42 INS42 INS27 INS42 INS32 UPD42 MOV42 MOV42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 DEL42 DEL32 DEL42 DEL32 DEL40 DEL45 DEL42 DEL27 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL33 DEL32 DEL16 DEL41 DEL42 DEL33 DEL27 DEL33 DEL32 DEL16 DEL41 DEL32 DEL41 DEL8 DEL25 DEL8 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL40 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL59 DEL60 DEL8 DEL31 DEL42 DEL14 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL41 DEL8 DEL8 DEL42 DEL43 DEL8