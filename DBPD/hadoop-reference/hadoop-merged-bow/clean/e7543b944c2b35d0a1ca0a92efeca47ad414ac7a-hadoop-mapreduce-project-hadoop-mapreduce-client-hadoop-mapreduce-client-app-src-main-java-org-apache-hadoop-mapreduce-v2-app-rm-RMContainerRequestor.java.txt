MAPREDUCE-3339. Fixed MR AM to stop considering node blacklisting after the number of nodes blacklisted crosses a threshold. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1221523 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetAddress;
-import java.net.UnknownHostException;
+import java.util.Collections;
-import java.util.HashSet;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.hadoop.yarn.YarnException;
+
+  private int blacklistDisablePercent;
+  private AtomicBoolean ignoreBlacklisting = new AtomicBoolean(false);
+  private int blacklistedNodeCount = 0;
+  private int lastClusterNmCount = 0;
+  private int clusterNmCount = 0;
-  private final Set<String> blacklistedNodes = new HashSet<String>();
+  private final Set<String> blacklistedNodes = Collections
+      .newSetFromMap(new ConcurrentHashMap<String, Boolean>());
+    blacklistDisablePercent =
+        conf.getInt(
+            MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT,
+            MRJobConfig.DEFAULT_MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERCENT);
+    if (blacklistDisablePercent < -1 || blacklistDisablePercent > 100) {
+      throw new YarnException("Invalid blacklistDisablePercent: "
+          + blacklistDisablePercent
+          + ". Should be an integer between 0 and 100 or -1 to disabled");
+    }
+    LOG.info("blacklistDisablePercent is " + blacklistDisablePercent);
+    lastClusterNmCount = clusterNmCount;
+    clusterNmCount = allocateResponse.getNumClusterNodes();
-        " resourcelimit=" + availableResources);
+        " resourcelimit=" + availableResources + 
+        "knownNMs=" + clusterNmCount);
+  // May be incorrect if there's multiple NodeManagers running on a single host.
+  // knownNodeCount is based on node managers, not hosts. blacklisting is
+  // currently based on hosts.
+  protected void computeIgnoreBlacklisting() {
+    if (blacklistDisablePercent != -1
+        && (blacklistedNodeCount != blacklistedNodes.size() ||
+            clusterNmCount != lastClusterNmCount)) {
+      blacklistedNodeCount = blacklistedNodes.size();
+      if (clusterNmCount == 0) {
+        LOG.info("KnownNode Count at 0. Not computing ignoreBlacklisting");
+        return;
+      }
+      int val = (int) ((float) blacklistedNodes.size() / clusterNmCount * 100);
+      if (val >= blacklistDisablePercent) {
+        if (ignoreBlacklisting.compareAndSet(false, true)) {
+          LOG.info("Ignore blacklisting set to true. Known: " + clusterNmCount
+              + ", Blacklisted: " + blacklistedNodeCount + ", " + val + "%");
+        }
+      } else {
+        if (ignoreBlacklisting.compareAndSet(true, false)) {
+          LOG.info("Ignore blacklisting set to false. Known: " + clusterNmCount
+              + ", Blacklisted: " + blacklistedNodeCount + ", " + val + "%");
+        }
+      }
+    }
+  }
+  
+      //Even if blacklisting is ignored, continue to remove the host from
+      // the request table. The RM may have additional nodes it can allocate on.
-      
+
-    if (!nodeBlacklistingEnabled) {
+    if (!nodeBlacklistingEnabled || ignoreBlacklisting.get()) {

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS14 INS42 INS34 INS42 INS34 INS42 INS34 INS32 INS21 INS25 INS21 INS21 INS21 INS25 INS43 INS9 INS42 INS42 INS14 INS7 INS27 INS8 INS32 INS7 INS7 INS27 INS8 INS27 INS42 UPD74 MOV74 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS27 INS36 INS21 INS25 INS60 INS25 MOV38 INS32 UPD43 INS43 INS42 INS42 INS40 INS40 INS42 INS38 INS42 INS34 INS14 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS38 INS27 INS7 INS27 INS8 INS39 INS59 INS27 INS8 INS8 INS42 INS42 UPD42 INS42 INS34 INS43 INS27 INS34 INS27 INS27 INS42 INS32 INS42 INS34 INS21 INS41 INS42 INS11 INS42 INS42 INS25 INS25 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS39 INS36 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS42 INS45 INS27 INS42 INS42 INS9 INS9 INS21 INS42 INS42 INS9 INS9 INS21 INS27 INS34 INS32 INS32 INS11 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS39 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 DEL14