HADOOP-7115. Add a cache for getpwuid_r and getpwgid_r calls (tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407577 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.fs.CommonConfigurationKeys;
+@InterfaceAudience.Private
+@InterfaceStability.Unstable
+  private static long cacheTimeout = -1;
+
+
+        cacheTimeout = conf.getLong(
+          CommonConfigurationKeys.HADOOP_SECURITY_UID_NAME_CACHE_TIMEOUT_KEY,
+          CommonConfigurationKeys.HADOOP_SECURITY_UID_NAME_CACHE_TIMEOUT_DEFAULT) *
+          1000;
+        LOG.debug("Initialized cache for IDs to User/Group mapping with a" +
+          " cache timeout of " + cacheTimeout/1000 + " seconds.");
+
-  public static native Stat fstat(FileDescriptor fd) throws IOException;
+  private static native Stat fstat(FileDescriptor fd) throws IOException;
+    private int ownerId, groupId;
-    Stat(String owner, String group, int mode) {
-      this.owner = owner;
-      this.group = group;
+    Stat(int ownerId, int groupId, int mode) {
+      this.ownerId = ownerId;
+      this.groupId = groupId;
+
+  static native String getUserName(int uid) throws IOException;
+
+  static native String getGroupName(int uid) throws IOException;
+
+  private static class CachedName {
+    final long timestamp;
+    final String name;
+
+    public CachedName(String name, long timestamp) {
+      this.name = name;
+      this.timestamp = timestamp;
+    }
+  }
+
+  private static final Map<Integer, CachedName> USER_ID_NAME_CACHE =
+    new ConcurrentHashMap<Integer, CachedName>();
+
+  private static final Map<Integer, CachedName> GROUP_ID_NAME_CACHE =
+    new ConcurrentHashMap<Integer, CachedName>();
+
+  private enum IdCache { USER, GROUP }
+
+  private static String getName(IdCache domain, int id) throws IOException {
+    Map<Integer, CachedName> idNameCache = (domain == IdCache.USER)
+      ? USER_ID_NAME_CACHE : GROUP_ID_NAME_CACHE;
+    String name;
+    CachedName cachedName = idNameCache.get(id);
+    long now = System.currentTimeMillis();
+    if (cachedName != null && (cachedName.timestamp + cacheTimeout) > now) {
+      name = cachedName.name;
+    } else {
+      name = (domain == IdCache.USER) ? getUserName(id) : getGroupName(id);
+      if (LOG.isDebugEnabled()) {
+        String type = (domain == IdCache.USER) ? "UserName" : "GroupName";
+        LOG.debug("Got " + type + " " + name + " for ID " + id +
+          " from the native implementation");
+      }
+      cachedName = new CachedName(name, now);
+      idNameCache.put(id, cachedName);
+    }
+    return name;
+  }
+
+  /**
+   * Returns the file stat for a file descriptor.
+   *
+   * @param fd file descriptor.
+   * @return the file descriptor file stat.
+   * @throws IOException thrown if there was an IO error while obtaining the file stat.
+   */
+  public static Stat getFstat(FileDescriptor fd) throws IOException {
+    Stat stat = fstat(fd);
+    stat.owner = getName(IdCache.USER, stat.ownerId);
+    stat.group = getName(IdCache.GROUP, stat.groupId);
+    return stat;
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS78 INS78 INS23 INS31 INS31 INS55 INS23 INS23 INS71 INS31 INS31 INS40 INS40 INS83 INS83 INS39 INS59 UPD83 INS23 INS83 INS83 INS43 INS42 INS44 INS43 INS83 INS83 INS43 INS42 INS44 INS43 INS83 INS83 INS42 INS23 INS23 INS31 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS42 INS72 INS72 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS38 INS83 INS39 INS59 INS59 INS44 INS42 INS39 INS42 INS42 INS42 INS39 INS42 INS42 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 MOV44 INS44 INS8 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS41 INS34 INS42 INS42 INS39 UPD42 INS39 INS42 INS42 INS42 INS42 UPD42 INS39 INS42 INS21 INS21 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS74 INS59 MOV43 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS7 INS7 INS42 INS7 INS7 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS16 INS42 INS42 INS42 INS32 INS42 INS32 INS27 INS27 INS21 INS21 INS25 INS21 INS21 INS42 INS42 INS32 INS40 INS32 INS40 INS32 UPD42 UPD42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS36 INS42 INS7 INS7 INS32 INS8 INS7 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS40 INS40 INS21 INS21 UPD42 UPD42 INS52 INS42 INS52 INS42 INS27 INS27 INS42 INS40 INS42 INS16 INS42 INS42 INS60 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS40 INS40 INS42 INS36 INS32 INS32 INS43 INS59 INS32 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS27 INS42 INS32 INS34 INS27 INS45 INS42 INS40 INS36 INS45 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS40 INS40 INS45 INS45 INS27 INS27 INS42 INS34 INS42 INS40