YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.

+import java.io.IOException;
+import javax.ws.rs.PUT;
+import javax.ws.rs.core.Response.Status;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineDomain;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineDomains;
+import org.apache.hadoop.yarn.exceptions.YarnException;
+  /**
+   * Store the given domain into the timeline store, and return the errors
+   * that happen during storing.
+   */
+  @PUT
+  @Path("/domain")
+  @Consumes({ MediaType.APPLICATION_JSON /* , MediaType.APPLICATION_XML */})
+  public Response putDomain(
+      @Context HttpServletRequest req,
+      @Context HttpServletResponse res,
+      TimelineDomain domain) {
+    init(res);
+    UserGroupInformation callerUGI = getUser(req);
+    if (callerUGI == null) {
+      String msg = "The owner of the posted timeline domain is not set";
+      LOG.error(msg);
+      throw new ForbiddenException(msg);
+    }
+    domain.setOwner(callerUGI.getShortUserName());
+    try {
+      timelineDataManager.putDomain(domain, callerUGI);
+    } catch (YarnException e) {
+      // The user doesn't have the access to override the existing domain.
+      LOG.error(e.getMessage(), e);
+      throw new ForbiddenException(e);
+    } catch (IOException e) {
+      LOG.error("Error putting domain", e);
+      throw new WebApplicationException(e,
+          Response.Status.INTERNAL_SERVER_ERROR);
+    }
+    return Response.status(Status.OK).build();
+  }
+
+  /**
+   * Return a single domain of the given domain Id.
+   */
+  @GET
+  @Path("/domain/{domainId}")
+  @Produces({ MediaType.APPLICATION_JSON /* , MediaType.APPLICATION_XML */})
+  public TimelineDomain getDomain(
+      @Context HttpServletRequest req,
+      @Context HttpServletResponse res,
+      @PathParam("domainId") String domainId) {
+    init(res);
+    domainId = parseStr(domainId);
+    if (domainId == null || domainId.length() == 0) {
+      throw new BadRequestException("Domain ID is not specified.");
+    }
+    TimelineDomain domain = null;
+    try {
+      domain = timelineDataManager.getDomain(
+          parseStr(domainId), getUser(req));
+    } catch (Exception e) {
+      LOG.error("Error getting domain", e);
+      throw new WebApplicationException(e,
+          Response.Status.INTERNAL_SERVER_ERROR);
+    }
+    if (domain == null) {
+      throw new NotFoundException("Timeline domain ["
+          + domainId + "] is not found");
+    }
+    return domain;
+  }
+
+  /**
+   * Return a list of domains of the given owner.
+   */
+  @GET
+  @Path("/domain")
+  @Produces({ MediaType.APPLICATION_JSON /* , MediaType.APPLICATION_XML */})
+  public TimelineDomains getDomains(
+      @Context HttpServletRequest req,
+      @Context HttpServletResponse res,
+      @QueryParam("owner") String owner) {
+    init(res);
+    owner = parseStr(owner);
+    UserGroupInformation callerUGI = getUser(req);
+    if (owner == null || owner.length() == 0) {
+      if (callerUGI == null) {
+        throw new BadRequestException("Domain owner is not specified.");
+      } else {
+        // By default it's going to list the caller's domains
+        owner = callerUGI.getShortUserName();
+      }
+    }
+    try {
+      return timelineDataManager.getDomains(owner, callerUGI);
+    } catch (Exception e) {
+      LOG.error("Error getting domains", e);
+      throw new WebApplicationException(e,
+          Response.Status.INTERNAL_SERVER_ERROR);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS78 INS43 INS42 INS43 INS42 INS21 INS60 INS25 INS21 INS54 INS41 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS21 INS21 INS25 INS60 INS54 INS25 INS41 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS21 INS21 INS60 INS25 INS54 INS66 INS66 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS32 INS8 INS12 INS12 INS32 INS66 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS7 INS27 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS66 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS7 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS53 INS42 INS42 INS32 INS21 INS44 INS8 INS44 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS25 INS41 INS44 INS8 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS40 INS42 INS42 INS42 INS33 INS32 INS34 INS14 INS7 INS43 INS42 INS21 INS53 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS27 INS8 INS8 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS32 INS14 INS42 INS42 INS43 INS45 INS42 INS32 INS42 INS32 INS14 INS43 INS27 INS42 INS42 INS42 INS33 INS53 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS43 INS42 INS40 INS42 INS45 INS42 INS45 INS14 INS7 INS42 INS42 INS45 INS42 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS32 INS42 INS42 INS42 INS42