MAPREDUCE-2106. [Gridmix] Cumulative CPU usage emulation in Gridmix. (amarrk)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1135396 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapred.gridmix.emulators.resourceusage.ResourceUsageMatcher;
+import org.apache.hadoop.mapreduce.TaskInputOutputContext;
+import org.apache.hadoop.mapreduce.server.tasktracker.TTConfig;
+import org.apache.hadoop.mapreduce.util.ResourceCalculatorPlugin;
+import org.apache.hadoop.tools.rumen.ResourceUsageMetrics;
+  /**
+   * This is a progress based resource usage matcher.
+   */
+  @SuppressWarnings("unchecked")
+  static class ResourceUsageMatcherRunner extends Thread {
+    private final ResourceUsageMatcher matcher;
+    private final Progressive progress;
+    private final long sleepTime;
+    private static final String SLEEP_CONFIG = 
+      "gridmix.emulators.resource-usage.sleep-duration";
+    private static final long DEFAULT_SLEEP_TIME = 100; // 100ms
+    
+    ResourceUsageMatcherRunner(final TaskInputOutputContext context, 
+                               ResourceUsageMetrics metrics) {
+      Configuration conf = context.getConfiguration();
+      
+      // set the resource calculator plugin
+      Class<? extends ResourceCalculatorPlugin> clazz =
+        conf.getClass(TTConfig.TT_RESOURCE_CALCULATOR_PLUGIN,
+                      null, ResourceCalculatorPlugin.class);
+      ResourceCalculatorPlugin plugin = 
+        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);
+      
+      // set the other parameters
+      this.sleepTime = conf.getLong(SLEEP_CONFIG, DEFAULT_SLEEP_TIME);
+      progress = new Progressive() {
+        @Override
+        public float getProgress() {
+          return context.getProgress();
+        }
+      };
+      
+      // instantiate a resource-usage-matcher
+      matcher = new ResourceUsageMatcher();
+      matcher.configure(conf, plugin, metrics, progress);
+    }
+    
+    protected void match() throws Exception {
+      // match the resource usage
+      matcher.matchResourceUsage();
+    }
+    
+    @Override
+    public void run() {
+      LOG.info("Resource usage matcher thread started.");
+      try {
+        while (progress.getProgress() < 1) {
+          // match
+          match();
+          
+          // sleep for some time
+          try {
+            Thread.sleep(sleepTime);
+          } catch (Exception e) {}
+        }
+        
+        // match for progress = 1
+        match();
+        LOG.info("Resource usage emulation complete! Matcher exiting");
+      } catch (Exception e) {
+        LOG.info("Exception while running the resource-usage-emulation matcher"
+                 + " thread! Exiting.", e);
+      }
+    }
+  }
+  
+  // Makes sure that the TaskTracker doesn't kill the map/reduce tasks while
+  // they are emulating
+  private static class StatusReporter extends Thread {
+    private TaskAttemptContext context;
+    StatusReporter(TaskAttemptContext context) {
+      this.context = context;
+    }
+    
+    @Override
+    public void run() {
+      LOG.info("Status reporter thread started.");
+      try {
+        while (context.getProgress() < 1) {
+          // report progress
+          context.progress();
+
+          // sleep for some time
+          try {
+            Thread.sleep(100); // sleep for 100ms
+          } catch (Exception e) {}
+        }
+        
+        LOG.info("Status reporter thread exiting");
+      } catch (Exception e) {
+        LOG.info("Exception while running the status reporter thread!", e);
+      }
+    }
+  }
+  
+    private ResourceUsageMatcherRunner matcher = null;
+    private StatusReporter reporter = null;
+    
+            spec.setResourceUsageSpecification(
+                   split.getReduceResourceUsageMetrics(idx));
+      
+      matcher = new ResourceUsageMatcherRunner(ctxt, 
+                      split.getMapResourceUsageMetrics());
+      
+      // start the status reporter thread
+      reporter = new StatusReporter(ctxt);
+      reporter.start();
+        
+        // match inline
+        try {
+          matcher.match();
+        } catch (Exception e) {
+          LOG.debug("Error in resource usage emulation! Message: ", e);
+        }
+          
+          // match inline
+          try {
+            matcher.match();
+          } catch (Exception e) {
+            LOG.debug("Error in resource usage emulation! Message: ", e);
+          }
+      
+      // start the matcher thread since the map phase ends here
+      matcher.start();
+    private ResourceUsageMatcherRunner matcher = null;
+    private StatusReporter reporter = null;
+    
+      ResourceUsageMetrics metrics = new ResourceUsageMetrics();
+        if (spec.getReduceResourceUsageMetrics() != null) {
+          metrics = spec.getReduceResourceUsageMetrics();
+        }
+      
+      matcher = new ResourceUsageMatcherRunner(context, metrics);
+      
+      // start the status reporter thread
+      reporter = new StatusReporter(context);
+      reporter.start();
+          
+          // match inline
+          try {
+            matcher.match();
+          } catch (Exception e) {
+            LOG.debug("Error in resource usage emulation! Message: ", e);
+          }
+        
+        // match inline
+        try {
+          matcher.match();
+        } catch (Exception e) {
+          LOG.debug("Error in resource usage emulation! Message: ", e);
+        }
+      final ResourceUsageMetrics[] metrics = new ResourceUsageMetrics[nSpec];
+        metrics[j] = info.getResourceUsageMetrics();
-                      specRecords));
+                      specRecords, info.getResourceUsageMetrics(),
+                      metrics));

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS55 INS55 INS29 INS79 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS23 INS23 INS23 INS23 INS65 INS42 INS45 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS83 INS43 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS83 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS42 INS21 INS42 INS21 INS54 INS42 INS42 INS43 INS42 INS21 INS42 INS21 INS54 INS42 INS42 INS33 INS42 INS42 INS33 INS21 INS21 INS21 INS21 INS42 INS42 INS33 INS42 INS42 INS33 INS60 INS21 INS21 INS21 INS42 INS42 INS43 INS59 INS74 INS59 INS43 INS59 INS7 INS7 INS7 INS32 INS32 INS32 INS8 INS12 INS42 INS7 INS32 INS8 INS12 INS7 INS7 INS32 INS32 INS43 INS59 INS7 INS7 INS32 INS60 INS42 INS42 INS32 INS43 INS76 INS42 INS32 INS42 INS42 INS32 INS22 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS61 INS21 INS21 INS44 INS8 INS22 INS42 INS42 INS42 INS45 INS61 INS21 INS44 INS8 INS42 INS14 INS42 INS14 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS14 INS25 INS42 INS14 INS42 INS14 INS42 INS42 MOV21 INS54 INS83 INS5 INS59 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS33 INS57 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS1 INS43 INS27 INS8 INS32 INS32 INS43 INS42 INS21 INS52 INS42 INS27 INS8 INS32 INS43 INS42 INS21 INS43 INS42 INS32 INS43 INS42 INS8 INS12 INS43 INS27 INS8 INS43 INS42 INS42 INS43 INS42 INS8 INS8 INS12 INS43 INS85 INS42 INS3 INS21 INS42 INS43 INS42 INS31 INS42 INS32 INS34 INS21 INS54 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS34 INS21 INS54 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS54 INS42 INS32 INS33 INS21 INS42 INS42 MOV21 MOV21 INS54 INS21 INS44 INS8 INS42 INS5 INS42 INS7 INS32 INS42 INS42 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS32 INS8 INS12 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS8 INS12 INS42 INS42 INS45 INS42 INS32 INS43 INS42 INS21 INS8 INS12 INS42 INS42 INS7 INS8 INS12 INS32 INS43 INS42 INS21 INS43 INS85 INS2 INS32 INS42 INS42 INS42 INS41 INS42 INS21 INS44 INS8 INS45 INS45 INS42 INS42 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS32 INS42 INS21 INS44 INS8 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 DEL8