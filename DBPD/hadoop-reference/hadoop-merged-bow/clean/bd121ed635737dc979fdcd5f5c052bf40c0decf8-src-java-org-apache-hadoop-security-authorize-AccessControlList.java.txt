HADOOP-6862. Adds api to add/remove user and group to AccessControlList. Contributed by Amareshwari Sriramadasu

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@983877 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-    if (aclString.contains(WILDCARD_ACL_VALUE) && 
-        aclString.trim().equals(WILDCARD_ACL_VALUE)) {
+    if (isWildCardACLValue(aclString)) {
+  private boolean isWildCardACLValue(String aclString) {
+    if (aclString.contains(WILDCARD_ACL_VALUE) && 
+        aclString.trim().equals(WILDCARD_ACL_VALUE)) {
+      return true;
+    }
+    return false;
+  }
+
+   * Add user to the names of users allowed for this service.
+   * 
+   * @param user
+   *          The user name
+   */
+  public void addUser(String user) {
+    if (isWildCardACLValue(user)) {
+      throw new IllegalArgumentException("User " + user + " can not be added");
+    }
+    if (!isAllAllowed()) {
+      users.add(user);
+    }
+  }
+
+  /**
+   * Add group to the names of groups allowed for this service.
+   * 
+   * @param group
+   *          The group name
+   */
+  public void addGroup(String group) {
+    if (isWildCardACLValue(group)) {
+      throw new IllegalArgumentException("Group " + group + " can not be added");
+    }
+    if (!isAllAllowed()) {
+      groups.add(group);
+    }
+  }
+
+  /**
+   * Remove user from the names of users allowed for this service.
+   * 
+   * @param user
+   *          The user name
+   */
+  public void removeUser(String user) {
+    if (isWildCardACLValue(user)) {
+      throw new IllegalArgumentException("User " + user + " can not be removed");
+    }
+    if (!isAllAllowed()) {
+      users.remove(user);
+    }
+  }
+
+  /**
+   * Remove group from the names of groups allowed for this service.
+   * 
+   * @param group
+   *          The group name
+   */
+  public void removeGroup(String group) {
+    if (isWildCardACLValue(group)) {
+      throw new IllegalArgumentException("Group " + group
+          + " can not be removed");
+    }
+    if (!isAllAllowed()) {
+      groups.remove(group);
+    }
+  }
+
+  /**

INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS25 INS41 INS65 INS65 INS43 INS42 INS25 INS25 INS65 INS65 INS43 INS42 INS25 INS25 INS65 INS65 INS43 INS42 INS25 INS25 INS65 INS65 INS43 INS42 INS25 INS25 INS32 INS42 MOV27 INS8 INS9 INS66 INS42 INS66 INS42 INS32 INS8 INS38 INS8 INS66 INS42 INS66 INS42 INS32 INS8 INS38 INS8 INS66 INS42 INS66 INS42 INS32 INS8 INS38 INS8 INS66 INS42 INS66 INS42 INS32 INS8 INS38 INS8 INS42 INS42 INS41 INS42 INS42 INS53 INS32 INS21 INS42 INS42 INS53 INS32 INS21 INS42 INS42 INS53 INS32 INS21 INS42 INS42 INS53 INS32 INS21 INS9 INS14 INS42 INS32 INS14 INS42 INS32 INS14 INS42 INS32 INS14 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 DEL40 DEL26