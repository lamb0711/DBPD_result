Complete commit of prior merge.

The previous merge accidentally only committed the hdfs project instead of common and MR
as well.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1463203 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.IOException;
-
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.NoSuchElementException;
-import org.apache.hadoop.fs.CommonConfigurationKeys;
+import com.google.common.annotations.VisibleForTesting;
+
- * space utilization. Tested on Linux, FreeBSD, Cygwin. */
+ * space utilization. Tested on Linux, FreeBSD, Windows. */
-
-  enum OSType {
-    OS_TYPE_UNIX("UNIX"),
-    OS_TYPE_WIN("Windows"),
-    OS_TYPE_SOLARIS("SunOS"),
-    OS_TYPE_MAC("Mac"),
-    OS_TYPE_AIX("AIX");
-
-    private String id;
-    OSType(String id) {
-      this.id = id;
-    }
-    public boolean match(String osStr) {
-      return osStr != null && osStr.indexOf(id) >= 0;
-    }
-    String getId() {
-      return id;
-    }
-  }
-
-  private static final String OS_NAME = System.getProperty("os.name");
-  private static final OSType OS_TYPE = getOSType(OS_NAME);
-
-  protected static OSType getOSType(String osName) {
-    for (OSType ost : EnumSet.allOf(OSType.class)) {
-      if (ost.match(osName)) {
-        return ost;
-      }
-    }
-    return OSType.OS_TYPE_UNIX;
-  }
+  
+  private ArrayList<String> output;
+    this.output = new ArrayList<String>();
-  protected OSType getOSType() {
-    return OS_TYPE;
-  }
-  
-    run();
-    return filesystem;
+    if (Shell.WINDOWS) {
+      this.filesystem = dirFile.getCanonicalPath().substring(0, 2);
+      return this.filesystem;
+    } else {
+      run();
+      return filesystem;
+    }
-    run();
+    // Abort early if specified path does not exist
+    if (!dirFile.exists()) {
+      throw new FileNotFoundException("Specified path " + dirFile.getPath()
+          + "does not exist");
+    }
+
+    if (Shell.WINDOWS) {
+      // Assume a drive letter for a mount point
+      this.mount = dirFile.getCanonicalPath().substring(0, 2);
+    } else {
+      run();
+      // Skip parsing if df was not successful
+      if (getExitCode() != 0) {
+        StringBuffer sb = new StringBuffer("df could not be run successfully: ");
+        for (String line: output) {
+          sb.append(line);
+        }
+        throw new IOException(sb.toString());
+      }
+      parseOutput();
+    }
+
-    return new String[] {"bash","-c","exec 'df' '-k' '" + dirPath 
-                         + "' 2>/dev/null"};
+    if (Shell.WINDOWS){
+      throw new AssertionError(
+          "DF.getExecString() should never be called on Windows");
+    } else {
+      return new String[] {"bash","-c","exec 'df' '-k' '-P' '" + dirPath 
+                      + "' 2>/dev/null"};
+    }
-    lines.readLine();                         // skip headings
-  
+    output.clear();
-    if (line == null) {
-      throw new IOException( "Expecting a line not the end of stream" );
+    while (line != null) {
+      output.add(line);
+      line = lines.readLine();
+  }
+  
+  @VisibleForTesting
+  protected void parseOutput() throws IOException {
+    if (output.size() < 2) {
+      StringBuffer sb = new StringBuffer("Fewer lines of output than expected");
+      if (output.size() > 0) {
+        sb.append(": " + output.get(0));
+      }
+      throw new IOException(sb.toString());
+    }
+    
+    String line = output.get(1);
-    this.filesystem = tokens.nextToken();
+    try {
+      this.filesystem = tokens.nextToken();
+    } catch (NoSuchElementException e) {
+      throw new IOException("Unexpected empty line");
+    }
-      line = lines.readLine();
-      if (line == null) {
-        throw new IOException( "Expecting a line not the end of stream" );
+      if (output.size() > 2) {
+        line = output.get(2);
+      } else {
+        throw new IOException("Expecting additional output after line: "
+            + line);
-    switch(getOSType()) {
-      case OS_TYPE_AIX:
-        Long.parseLong(tokens.nextToken()); // capacity
-        Long.parseLong(tokens.nextToken()); // available
-        Integer.parseInt(tokens.nextToken()); // pct used
-        tokens.nextToken();
-        tokens.nextToken();
-        this.mount = tokens.nextToken();
-        break;
-
-      case OS_TYPE_WIN:
-      case OS_TYPE_SOLARIS:
-      case OS_TYPE_MAC:
-      case OS_TYPE_UNIX:
-      default:
-        Long.parseLong(tokens.nextToken()); // capacity
-        Long.parseLong(tokens.nextToken()); // used
-        Long.parseLong(tokens.nextToken()); // available
-        Integer.parseInt(tokens.nextToken()); // pct used
-        this.mount = tokens.nextToken();
-        break;
-   }
+    try {
+      Long.parseLong(tokens.nextToken()); // capacity
+      Long.parseLong(tokens.nextToken()); // used
+      Long.parseLong(tokens.nextToken()); // available
+      Integer.parseInt(tokens.nextToken()); // pct used
+      this.mount = tokens.nextToken();
+    } catch (NoSuchElementException e) {
+      throw new IOException("Could not parse line: " + line);
+    } catch (NumberFormatException e) {
+      throw new IOException("Could not parse line: " + line);
+    }

MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS23 INS31 INS31 INS31 INS83 INS74 INS59 INS8 MOV29 INS83 MOV43 INS42 MOV43 INS8 INS8 MOV78 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 UPD66 INS43 MOV43 INS42 INS21 INS25 INS25 INS25 MOV41 INS25 MOV21 MOV60 INS61 INS42 INS42 INS25 INS60 MOV60 INS54 INS25 INS54 INS42 INS7 INS40 INS8 MOV8 INS38 INS8 INS40 INS8 INS8 INS40 INS8 INS8 INS27 INS8 INS27 INS8 MOV43 INS59 INS8 INS12 MOV38 INS8 INS8 INS12 INS12 INS22 INS14 INS21 INS41 INS32 INS53 MOV21 MOV21 INS25 INS21 INS53 MOV41 UPD42 UPD42 MOV42 MOV33 INS21 MOV21 INS32 INS34 INS60 INS25 MOV53 INS42 INS32 MOV21 INS44 MOV8 INS25 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS44 INS8 INS44 INS8 INS52 INS42 INS74 INS7 INS22 INS42 INS42 INS14 INS27 INS8 INS32 INS14 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS34 INS43 INS42 INS27 INS8 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS43 MOV43 INS22 INS32 INS52 INS42 INS43 INS27 INS32 MOV32 MOV34 INS60 MOV70 INS53 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS34 INS21 INS32 INS42 INS32 INS34 INS21 INS53 INS42 INS14 INS42 INS14 INS42 INS52 INS42 INS32 INS42 INS34 INS34 INS42 INS45 INS32 INS45 UPD42 INS32 INS42 INS34 INS34 UPD42 INS43 INS59 MOV44 INS42 INS14 INS42 INS43 INS45 INS42 INS42 MOV32 INS42 INS42 UPD45 UPD42 MOV42 UPD42 MOV42 MOV7 INS14 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS14 UPD42 INS21 INS43 INS32 UPD45 INS42 UPD42 UPD42 INS27 INS42 INS43 INS27 INS42 INS45 INS42 INS42 INS45 INS42 INS43 INS45 INS32 UPD42 MOV42 INS42 INS42 INS45 INS32 UPD42 UPD42 INS34 INS42 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS34 DEL42 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL42 DEL45 DEL72 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL27 DEL27 DEL41 DEL8 DEL31 DEL42 DEL42 DEL41 DEL8 DEL31 DEL71 DEL83 DEL83 DEL83 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL32 DEL42 DEL41 DEL8 DEL25 DEL83 DEL42 DEL8 DEL31 DEL8 DEL32 DEL45 DEL52 DEL42 DEL22 DEL27 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL25 DEL42 DEL32 DEL42 DEL49 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL49 DEL42 DEL49 DEL42 DEL49 DEL49 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL21 DEL10 DEL50 DEL8 DEL31