Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242635 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSelector;
-  private String nnHttpUrl;
-  private Text hdfsServiceName;
+  protected UserGroupInformation ugi;
+
-  protected UserGroupInformation ugi; 
+  protected InetSocketAddress nnSecureAddr;
+
-  
+  private static final HftpDelegationTokenSelector hftpTokenSelector =
+      new HftpDelegationTokenSelector();
+
-    return getDefaultSecurePort();
-
-    //TODO: un-comment the following once HDFS-7510 is committed. 
-//    return getConf().getInt(DFSConfigKeys.DFS_NAMENODE_HTTP_PORT_KEY,
-//        DFSConfigKeys.DFS_NAMENODE_HTTP_PORT_DEFAULT);
+    return getConf().getInt(DFSConfigKeys.DFS_NAMENODE_HTTP_PORT_KEY,
+        DFSConfigKeys.DFS_NAMENODE_HTTP_PORT_DEFAULT);
-  @Override
-  public String getCanonicalServiceName() {
-    return SecurityUtil.buildDTServiceName(hftpURI, getDefaultPort());
-  }
-  
-  private String buildUri(String schema, String host, int port) {
-    StringBuilder sb = new StringBuilder(schema);
-    return sb.append(host).append(":").append(port).toString();
+  protected InetSocketAddress getNamenodeAddr(URI uri) {
+    // use authority so user supplied uri can override port
+    return NetUtils.createSocketAddr(uri.getAuthority(), getDefaultPort());
+  protected InetSocketAddress getNamenodeSecureAddr(URI uri) {
+    // must only use the host and the configured https port
+    return NetUtils.createSocketAddrForHost(uri.getHost(), getDefaultSecurePort());
+  }
+
+  @Override
+  public String getCanonicalServiceName() {
+    // unlike other filesystems, hftp's service is the secure port, not the
+    // actual port in the uri
+    return SecurityUtil.buildTokenService(nnSecureAddr).toString();
+  }
-    nnAddr = NetUtils.createSocketAddr(name.toString());
-    
-    // in case we open connection to hftp of a different cluster
-    // we need to know this cluster https port
-    // if it is not set we assume it is the same cluster or same port
-    int urlPort = conf.getInt("dfs.hftp.https.port", -1);
-    if(urlPort == -1)
-      urlPort = conf.getInt(DFSConfigKeys.DFS_HTTPS_PORT_KEY, 
-          DFSConfigKeys.DFS_HTTPS_PORT_DEFAULT);
-
-    String normalizedNN = NetUtils.normalizeHostName(name.getHost());
-    nnHttpUrl = buildUri("https://", normalizedNN ,urlPort);
-    LOG.debug("using url to get DT:" + nnHttpUrl);
+    this.nnAddr = getNamenodeAddr(name);
+    this.nnSecureAddr = getNamenodeSecureAddr(name);
-      hftpURI = new URI(buildUri("hftp://", normalizedNN, urlPort));
-    } catch (URISyntaxException ue) {
-      throw new IOException("bad uri for hdfs", ue);
-    }
-
-    // if one uses RPC port different from the Default one,  
-    // one should specify what is the setvice name for this delegation token
-    // otherwise it is hostname:RPC_PORT
-    String key = DelegationTokenSelector.SERVICE_NAME_KEY
-        + SecurityUtil.buildDTServiceName(name,
-            DFSConfigKeys.DFS_HTTPS_PORT_DEFAULT);
-    if(LOG.isDebugEnabled()) {
-      LOG.debug("Trying to find DT for " + name + " using key=" + key + 
-          "; conf=" + conf.get(key, ""));
-    }
-    String nnServiceName = conf.get(key);
-    int nnPort = NameNode.DEFAULT_PORT;
-    if (nnServiceName != null) { // get the real port
-      nnPort = NetUtils.createSocketAddr(nnServiceName, 
-          NameNode.DEFAULT_PORT).getPort();
-    }
-    try {
-      URI hdfsURI = new URI("hdfs://" + normalizedNN + ":" + nnPort);
-      hdfsServiceName = new Text(SecurityUtil.buildDTServiceName(hdfsURI, 
-                                                                 nnPort));
-    } catch (URISyntaxException ue) {
-      throw new IOException("bad uri for hdfs", ue);
+      this.hftpURI = new URI(name.getScheme(), name.getAuthority(),
+                             null, null, null);
+    } catch (URISyntaxException e) {
+      throw new IllegalArgumentException(e);
-      //try finding a token for this namenode (esp applicable for tasks
-      //using hftp). If there exists one, just set the delegationField
-      String hftpServiceName = getCanonicalServiceName();
-      for (Token<? extends TokenIdentifier> t : ugi.getTokens()) {
-        Text kind = t.getKind();
-        if (DelegationTokenIdentifier.HDFS_DELEGATION_KIND.equals(kind)) {
-          if (t.getService().equals(hdfsServiceName)) {
-            setDelegationToken(t);
-            break;
-          }
-        } else if (TOKEN_KIND.equals(kind)) {
-          if (hftpServiceName
-              .equals(normalizeService(t.getService().toString()))) {
-            setDelegationToken(t);
-            break;
-          }
-        }
-      }
-      
-      //since we don't already have a token, go get one over https
-      if (delegationToken == null) {
-        setDelegationToken(getDelegationToken(null));
+      initDelegationToken();
+    }
+  }
+
+  protected void initDelegationToken() throws IOException {
+    // look for hftp token, then try hdfs
+    Token<?> token = selectHftpDelegationToken();
+    if (token == null) {
+      token = selectHdfsDelegationToken();
+    }  
+
+    // if we don't already have a token, go get one over https
+    boolean createdToken = false;
+    if (token == null) {
+      token = getDelegationToken(null);
+      createdToken = (token != null);
+    }
+
+    // we already had a token or getDelegationToken() didn't fail.
+    if (token != null) {
+      setDelegationToken(token);
+      if (createdToken) {
+        LOG.debug("Created new DT for " + token.getService());
+      } else {
+        LOG.debug("Found existing DT for " + token.getService());
-  private String normalizeService(String service) {
-    int colonIndex = service.indexOf(':');
-    if (colonIndex == -1) {
-      throw new IllegalArgumentException("Invalid service for hftp token: " + 
-                                         service);
-    }
-    String hostname = 
-        NetUtils.normalizeHostName(service.substring(0, colonIndex));
-    String port = service.substring(colonIndex + 1);
-    return hostname + ":" + port;
+  protected Token<DelegationTokenIdentifier> selectHftpDelegationToken() {
+    Text serviceName = SecurityUtil.buildTokenService(nnSecureAddr);
+    return hftpTokenSelector.selectToken(serviceName, ugi.getTokens());
-  //TODO: un-comment the following once HDFS-7510 is committed. 
-//  protected Token<DelegationTokenIdentifier> selectHftpDelegationToken() {
-//    Text serviceName = SecurityUtil.buildTokenService(nnSecureAddr);
-//    return hftpTokenSelector.selectToken(serviceName, ugi.getTokens());      
-//  }
-  
-  public <T extends TokenIdentifier> void setDelegationToken(Token<T> token) {
+  public synchronized <T extends TokenIdentifier> void setDelegationToken(Token<T> token) {
+    // NOTE: the remote nn must be configured to use hdfs
-    delegationToken.setService(hdfsServiceName);
+    // no need to change service because we aren't exactly sure what it
+    // should be.  we can guess, but it might be wrong if the local conf
+    // value is incorrect.  the service is a client side field, so the remote
+    // end does not care about the value
+          final String nnHttpUrl = DFSUtil.createUri("https", nnSecureAddr).toString();
-    try {
-      return new URI("hftp", null, nnAddr.getHostName(), nnAddr.getPort(),
-                     null, null, null);
-    } catch (URISyntaxException e) {
-      return null;
-    } 
+    return hftpURI;
-      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();
+      UserGroupInformation.getLoginUser().reloginFromKeytab();
+      InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);
-        ("https://" + token.getService().toString(), 
+        (DFSUtil.createUri("https", serviceAddr).toString(), 
+      InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);
-        ("https://" + token.getService().toString(), 
+        (DFSUtil.createUri("https", serviceAddr).toString(), 
+    }    
+  }
+  
+  private static class HftpDelegationTokenSelector
+  extends AbstractDelegationTokenSelector<DelegationTokenIdentifier> {
+
+    public HftpDelegationTokenSelector() {
+      super(TOKEN_KIND);
-    

INS26 MOV23 MOV23 MOV23 INS40 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS55 UPD83 UPD43 INS83 INS83 UPD43 UPD83 INS43 UPD42 INS44 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 INS8 MOV78 INS83 MOV43 INS42 INS8 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 INS83 INS39 INS42 MOV43 INS8 INS83 INS74 INS42 INS8 INS83 MOV78 INS83 MOV43 INS42 INS8 INS83 INS83 INS42 INS74 MOV31 UPD42 UPD42 UPD42 UPD42 INS14 INS42 MOV43 INS42 UPD42 MOV43 INS42 INS41 MOV41 MOV21 MOV21 MOV21 MOV21 INS21 INS54 INS25 MOV60 MOV25 MOV60 MOV25 INS25 MOV43 INS43 MOV60 INS41 INS41 UPD39 UPD42 UPD39 UPD42 INS43 INS43 UPD42 INS8 INS43 INS32 INS32 MOV7 INS8 MOV12 MOV32 INS8 INS74 INS27 UPD39 UPD27 INS27 INS8 UPD42 MOV42 MOV43 INS32 INS42 INS60 INS41 INS60 INS21 UPD42 MOV42 UPD42 MOV42 INS46 INS42 INS32 INS42 INS40 INS40 UPD42 UPD42 INS32 INS42 INS42 INS32 MOV32 MOV32 INS22 INS22 INS21 MOV8 MOV21 INS43 INS76 UPD42 INS32 INS42 INS33 UPD42 INS9 UPD42 MOV21 UPD42 MOV42 INS33 MOV21 INS25 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS52 INS42 UPD42 MOV42 INS52 INS42 UPD42 UPD42 INS7 INS32 UPD42 MOV42 UPD42 MOV42 INS7 INS7 INS32 INS42 INS8 INS8 UPD42 UPD42 INS42 UPD42 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS32 MOV11 INS42 INS42 INS32 MOV42 UPD42 MOV42 INS32 MOV11 INS22 INS14 UPD42 MOV42 INS42 INS32 INS42 MOV32 INS42 INS36 UPD42 MOV42 UPD42 MOV42 MOV21 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 MOV43 INS32 INS32 INS33 INS33 INS33 INS42 UPD42 MOV42 INS27 MOV32 MOV32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS42 UPD42 INS27 INS42 UPD42 INS27 INS45 MOV32 INS45 MOV32 INS60 INS83 MOV43 INS59 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL40 DEL45 DEL42 DEL27 DEL33 DEL41 DEL8 DEL42 DEL45 DEL42 DEL42 DEL32 DEL14 DEL7 DEL43 DEL40 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL45 DEL32 DEL27 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL45 DEL34 DEL38 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL21 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL76 DEL74 DEL42 DEL44 DEL40 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL13 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL25 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL45 DEL42 DEL27 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL21 DEL45 DEL27 DEL32 DEL21 DEL45 DEL27 DEL32 DEL41 DEL42 DEL43 DEL45 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL33 DEL33 DEL14 DEL41 DEL8 DEL54 DEL8