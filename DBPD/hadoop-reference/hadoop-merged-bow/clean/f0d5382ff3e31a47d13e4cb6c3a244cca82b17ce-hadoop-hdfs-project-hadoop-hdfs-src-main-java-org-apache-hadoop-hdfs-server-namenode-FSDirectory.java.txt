HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.

+  /**
+   * Support for POSIX ACL inheritance. Not final for testing purpose.
+   */
+  private boolean posixAclInheritanceEnabled;
+    this.posixAclInheritanceEnabled = conf.getBoolean(
+        DFSConfigKeys.DFS_NAMENODE_POSIX_ACL_INHERITANCE_ENABLED_KEY,
+        DFSConfigKeys.DFS_NAMENODE_POSIX_ACL_INHERITANCE_ENABLED_DEFAULT);
+    LOG.info("POSIX ACL inheritance enabled? " + posixAclInheritanceEnabled);
+
+  @VisibleForTesting
+  public boolean isPosixAclInheritanceEnabled() {
+    return posixAclInheritanceEnabled;
+  }
+
+  @VisibleForTesting
+  public void setPosixAclInheritanceEnabled(
+      boolean posixAclInheritanceEnabled) {
+    this.posixAclInheritanceEnabled = posixAclInheritanceEnabled;
+  }
+
+   * @param modes create modes
-  INodesInPath addINode(INodesInPath existing, INode child)
+  INodesInPath addINode(INodesInPath existing, INode child,
+                        FsPermission modes)
-      return addLastINode(existing, child, true);
+      return addLastINode(existing, child, modes, true);
+   * Turn on HDFS-6962 POSIX ACL inheritance when the property
+   * {@link DFSConfigKeys#DFS_NAMENODE_POSIX_ACL_INHERITANCE_ENABLED_KEY} is
+   * true and a compatible client has sent both masked and unmasked create
+   * modes.
+   *
+   * @param child INode newly created child
+   * @param modes create modes
+   */
+  private void copyINodeDefaultAcl(INode child, FsPermission modes) {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("child: {}, posixAclInheritanceEnabled: {}, modes: {}",
+          child, posixAclInheritanceEnabled, modes);
+    }
+
+    if (posixAclInheritanceEnabled && modes != null &&
+        modes.getUnmasked() != null) {
+      //
+      // HDFS-6962: POSIX ACL inheritance
+      //
+      child.setPermission(modes.getUnmasked());
+      if (!AclStorage.copyINodeDefaultAcl(child)) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("{}: no parent default ACL to inherit", child);
+        }
+        child.setPermission(modes.getMasked());
+      }
+    } else {
+      //
+      // Old behavior before HDFS-6962
+      //
+      AclStorage.copyINodeDefaultAcl(child);
+    }
+  }
+
+  /**
+   * @param existing the INodesInPath containing all the ancestral INodes
+   * @param inode the new INode to add
+   * @param modes create modes
+   * @param checkQuota whether to check quota
-      boolean checkQuota) throws QuotaExceededException {
+      FsPermission modes, boolean checkQuota) throws QuotaExceededException {
-        AclStorage.copyINodeDefaultAcl(inode);
+        copyINodeDefaultAcl(inode, modes);
-      return addLastINode(existing, i, false);
+      // All callers do not have create modes to pass.
+      return addLastINode(existing, i, null, false);

INS23 INS31 INS31 INS31 INS29 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS65 INS42 INS21 INS21 INS42 INS41 INS42 INS39 INS42 INS21 INS65 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS25 INS65 INS65 INS65 INS65 INS43 INS42 INS66 INS7 INS32 INS42 INS7 INS42 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS8 INS27 INS8 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS22 INS32 INS42 INS42 INS27 INS22 INS42 INS67 INS42 INS42 INS21 INS27 INS27 INS21 INS25 INS21 INS52 INS42 INS42 INS42 INS40 INS40 INS45 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS27 INS32 INS33 INS32 INS38 INS8 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS32 INS25 INS21 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 DEL42