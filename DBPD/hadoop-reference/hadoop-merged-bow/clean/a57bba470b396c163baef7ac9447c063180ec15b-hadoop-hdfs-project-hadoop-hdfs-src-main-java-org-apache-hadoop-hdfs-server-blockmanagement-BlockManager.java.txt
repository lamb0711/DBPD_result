Merge branch 'trunk' into HADOOP-12756

+import org.apache.hadoop.hdfs.server.namenode.INodesInPath;
+import org.apache.hadoop.hdfs.server.namenode.CacheManager;
+   * @param iip - INodes in path to bc
-      Block commitBlock) throws IOException {
+      Block commitBlock, INodesInPath iip) throws IOException {
-      completeBlock(lastBlock, false);
+      completeBlock(lastBlock, iip, false);
+   * @param curBlock - block to be completed
+   * @param iip - INodes in path to file containing curBlock; if null,
+   *              this will be resolved internally
+   * @param force - force completion of the block
-  private void completeBlock(BlockInfo curBlock, boolean force)
-      throws IOException {
+  private void completeBlock(BlockInfo curBlock, INodesInPath iip,
+      boolean force) throws IOException {
-    curBlock.convertToCompleteBlock();
+    convertToCompleteBlock(curBlock, iip);
+
+   * Convert a specified block of the file to a complete block.
+   * Skips validity checking and safe mode block total updates; use
+   * {@link BlockManager#completeBlock} to include these.
+   * @param curBlock - block to be completed
+   * @param iip - INodes in path to file containing curBlock; if null,
+   *              this will be resolved internally
+   * @throws IOException if the block does not have at least a minimal number
+   * of replicas reported from data-nodes.
+   */
+  private void convertToCompleteBlock(BlockInfo curBlock, INodesInPath iip)
+      throws IOException {
+    curBlock.convertToCompleteBlock();
+    namesystem.getFSDirectory().updateSpaceForCompleteBlock(curBlock, iip);
+  }
+
+  /**
-    completeBlock(block, true);
+    completeBlock(block, null, true);
-    final int numCorruptNodes = countNodes(blk).corruptReplicas();
+    NumberReplicas numReplicas = countNodes(blk);
+    final int numCorruptNodes = numReplicas.corruptReplicas();
-    final boolean isCorrupt = numCorruptReplicas != 0 &&
-        numCorruptReplicas == numNodes;
+    final boolean isCorrupt;
+    if (blk.isStriped()) {
+      BlockInfoStriped sblk = (BlockInfoStriped) blk;
+      isCorrupt = numCorruptReplicas != 0 &&
+          numReplicas.liveReplicas() < sblk.getRealDataBlockNum();
+    } else {
+      isCorrupt = numCorruptReplicas != 0 && numCorruptReplicas == numNodes;
+    }
-      return new LocatedBlocks(fileSizeExcludeBlocksUnderConstruction,
+      LocatedBlocks locations = new LocatedBlocks(
+          fileSizeExcludeBlocksUnderConstruction,
+      // Set caching information for the located blocks.
+      CacheManager cm = namesystem.getCacheManager();
+      if (cm != null) {
+        cm.setCachedLocations(locations);
+      }
+      return locations;
-      completeBlock(storedBlock, false);
+      completeBlock(storedBlock, null, false);
-      completeBlock(storedBlock, false);
+      completeBlock(storedBlock, null, false);
+      int pendingNum = pendingReconstruction.getNumReplicas(block);
-      if (isNeededReconstruction(block, repl.liveReplicas())) {
-        neededReconstruction.update(block, repl.liveReplicas(),
+      if (!hasEnoughEffectiveReplicas(block, repl, pendingNum,
+          curExpectedReplicas)) {
+        neededReconstruction.update(block, repl.liveReplicas() + pendingNum,
-        int oldReplicas = repl.liveReplicas()-curReplicasDelta;
+        int oldReplicas = repl.liveReplicas() + pendingNum - curReplicasDelta;

INS26 INS26 INS40 INS40 INS31 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 MOV21 INS21 INS60 INS25 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS43 INS83 INS39 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS67 INS32 INS42 INS42 INS42 INS33 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS60 INS21 INS21 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS7 INS60 INS60 INS25 INS39 INS59 INS38 INS42 INS42 INS42 INS11 INS42 INS27 INS42 MOV27 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS33 INS33 INS42 INS32 INS32 INS43 INS42 INS27 INS27 INS42 INS42 MOV14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS34 INS32 INS32 INS42 INS42 INS32 UPD27 MOV27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 INS42 MOV32 INS42 DEL83 DEL39 DEL42 DEL42 DEL32 DEL32 DEL32