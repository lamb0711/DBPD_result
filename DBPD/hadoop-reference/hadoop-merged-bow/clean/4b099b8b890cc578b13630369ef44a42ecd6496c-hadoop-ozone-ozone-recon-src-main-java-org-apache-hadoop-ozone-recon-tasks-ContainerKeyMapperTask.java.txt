 HDDS-1501 : Create a Recon task interface to update internal DB on updates from OM. (#819)


+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.Pair;
-import org.apache.hadoop.ozone.recon.spi.OzoneManagerServiceProvider;
-public class ContainerKeyMapperTask implements Runnable {
+public class ContainerKeyMapperTask extends ReconDBUpdateTask {
-  private OzoneManagerServiceProvider ozoneManagerServiceProvider;
+  private Collection<String> tables = new ArrayList<>();
-  public ContainerKeyMapperTask(
-      OzoneManagerServiceProvider ozoneManagerServiceProvider,
-      ContainerDBServiceProvider containerDBServiceProvider) {
-    this.ozoneManagerServiceProvider = ozoneManagerServiceProvider;
+  public ContainerKeyMapperTask(ContainerDBServiceProvider
+                                    containerDBServiceProvider,
+                                OMMetadataManager omMetadataManager) {
+    super("ContainerKeyMapperTask");
+    try {
+      tables.add(omMetadataManager.getKeyTable().getName());
+    } catch (IOException ioEx) {
+      LOG.error("Unable to listen on Key Table updates ", ioEx);
+    }
-  public void run() {
+  public Pair<String, Boolean> reprocess(OMMetadataManager omMetadataManager) {
-    int containerCount = 0;
-      LOG.info("Starting a run of ContainerKeyMapperTask.");
+      LOG.info("Starting a 'reprocess' run of ContainerKeyMapperTask.");
-      //Update OM DB Snapshot.
-      ozoneManagerServiceProvider.updateReconOmDBWithNewSnapshot();
-
-      OMMetadataManager omMetadataManager = ozoneManagerServiceProvider
-          .getOMMetadataManagerInstance();
-          StringBuilder key = new StringBuilder(kv.getKey());
-          for (OmKeyLocationInfoGroup omKeyLocationInfoGroup : omKeyInfo
-              .getKeyLocationVersions()) {
-            long keyVersion = omKeyLocationInfoGroup.getVersion();
-            for (OmKeyLocationInfo omKeyLocationInfo : omKeyLocationInfoGroup
-                .getLocationList()) {
-              long containerId = omKeyLocationInfo.getContainerID();
-              ContainerKeyPrefix containerKeyPrefix = new ContainerKeyPrefix(
-                  containerId, key.toString(), keyVersion);
-              if (containerDBServiceProvider.getCountForForContainerKeyPrefix(
-                  containerKeyPrefix) == 0) {
-                // Save on writes. No need to save same container-key prefix
-                // mapping again.
-                containerDBServiceProvider.storeContainerKeyMapping(
-                    containerKeyPrefix, 1);
-              }
-              containerCount++;
-            }
-          }
+          writeOMKeyToContainerDB(kv.getKey(), omKeyInfo);
-      LOG.info("Completed the run of ContainerKeyMapperTask.");
+      LOG.info("Completed 'reprocess' of ContainerKeyMapperTask.");
-      LOG.info("It took me " + (double)duration / 1000.0 + " seconds to " +
-          "process " + omKeyCount + " keys and " + containerCount + " " +
-          "containers.");
+      LOG.info("It took me " + (double) duration / 1000.0 + " seconds to " +
+          "process " + omKeyCount + " keys.");
+      return new ImmutablePair<>(getTaskName(), false);
+    }
+    return new ImmutablePair<>(getTaskName(), true);
+  }
+
+
+  @Override
+  protected Collection<String> getTaskTables() {
+    return tables;
+  }
+
+  @Override
+  Pair<String, Boolean> process(OMUpdateEventBatch events) {
+    Iterator<OMDBUpdateEvent> eventIterator = events.getIterator();
+    while (eventIterator.hasNext()) {
+      OMDBUpdateEvent<String, OmKeyInfo> omdbUpdateEvent = eventIterator.next();
+      String updatedKey = omdbUpdateEvent.getKey();
+      OmKeyInfo updatedKeyValue = omdbUpdateEvent.getValue();
+      try {
+        switch (omdbUpdateEvent.getAction()) {
+        case PUT:
+          writeOMKeyToContainerDB(updatedKey, updatedKeyValue);
+          break;
+
+        case DELETE:
+          deleteOMKeyFromContainerDB(updatedKey);
+          break;
+
+        default: LOG.debug("Skipping DB update event : " + omdbUpdateEvent
+            .getAction());
+        }
+      } catch (IOException e) {
+        LOG.error("Unexpected exception while updating key data : {} ", e);
+        return new ImmutablePair<>(getTaskName(), false);
+      }
+    }
+    return new ImmutablePair<>(getTaskName(), true);
+  }
+
+  /**
+   * Delete an OM Key from Container DB.
+   * @param key key String.
+   * @throws IOException If Unable to write to container DB.
+   */
+  private void  deleteOMKeyFromContainerDB(String key)
+      throws IOException {
+
+    TableIterator<ContainerKeyPrefix, ? extends
+        Table.KeyValue<ContainerKeyPrefix, Integer>> containerIterator =
+        containerDBServiceProvider.getContainerTableIterator();
+
+    Set<ContainerKeyPrefix> keysToDeDeleted = new HashSet<>();
+
+    while (containerIterator.hasNext()) {
+      Table.KeyValue<ContainerKeyPrefix, Integer> keyValue =
+          containerIterator.next();
+      String keyPrefix = keyValue.getKey().getKeyPrefix();
+      if (keyPrefix.equals(key)) {
+        keysToDeDeleted.add(keyValue.getKey());
+      }
+    }
+
+    for (ContainerKeyPrefix containerKeyPrefix : keysToDeDeleted) {
+      containerDBServiceProvider.deleteContainerMapping(containerKeyPrefix);
+
+  /**
+   * Write an OM key to container DB.
+   * @param key key String
+   * @param omKeyInfo omKeyInfo value
+   * @throws IOException if unable to write to recon DB.
+   */
+  private void  writeOMKeyToContainerDB(String key, OmKeyInfo omKeyInfo)
+      throws IOException {
+    for (OmKeyLocationInfoGroup omKeyLocationInfoGroup : omKeyInfo
+        .getKeyLocationVersions()) {
+      long keyVersion = omKeyLocationInfoGroup.getVersion();
+      for (OmKeyLocationInfo omKeyLocationInfo : omKeyLocationInfoGroup
+          .getLocationList()) {
+        long containerId = omKeyLocationInfo.getContainerID();
+        ContainerKeyPrefix containerKeyPrefix = new ContainerKeyPrefix(
+            containerId, key, keyVersion);
+        if (containerDBServiceProvider.getCountForForContainerKeyPrefix(
+            containerKeyPrefix) == 0) {
+          // Save on writes. No need to save same container-key prefix
+          // mapping again.
+          containerDBServiceProvider.storeContainerKeyMapping(
+              containerKeyPrefix, 1);
+        }
+      }
+    }
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD43 MOV44 INS31 INS31 INS31 INS31 UPD42 INS74 INS8 INS74 INS42 INS44 INS78 INS83 INS74 INS42 INS8 INS78 INS74 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 MOV8 INS43 INS43 UPD42 INS14 UPD43 UPD42 INS46 MOV21 INS54 INS43 INS43 INS43 MOV43 INS42 INS41 INS42 INS43 INS43 INS41 INS42 INS43 INS43 INS43 INS43 INS42 INS60 INS61 INS41 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS61 INS70 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 UPD42 MOV42 INS42 INS74 UPD42 INS45 INS8 INS12 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS14 INS66 INS42 INS66 INS42 INS66 INS42 INS74 INS59 INS74 INS59 INS32 INS8 INS44 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 MOV21 INS44 INS8 INS74 INS32 INS9 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS54 INS74 INS32 INS9 INS43 INS43 INS76 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS60 INS60 INS25 MOV43 INS42 INS21 INS42 INS32 INS43 INS42 INS21 INS41 INS43 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS74 INS74 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS32 INS42 INS32 UPD45 UPD45 MOV27 INS14 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS50 INS44 INS8 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS8 UPD45 INS74 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS43 INS42 INS21 INS41 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 MOV60 MOV60 INS21 MOV21 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS74 INS32 INS9 INS42 INS42 INS43 INS42 INS42 MOV32 INS42 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL8 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL27 DEL45 DEL27 DEL45 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL37 DEL21