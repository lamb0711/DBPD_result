HADOOP-15262. AliyunOSS: move files under a directory in parallel when rename a directory. Contributed by Jinhu Wu.

+import java.util.concurrent.ExecutorService;
+import com.google.common.util.concurrent.MoreExecutors;
+  private int maxConcurrentCopyTasksPerDir;
+  private ListeningExecutorService boundedCopyThreadPool;
+      boundedCopyThreadPool.shutdown();
+
+    maxConcurrentCopyTasksPerDir = AliyunOSSUtils.intPositiveOption(conf,
+        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY,
+        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT);
+
+    int maxCopyThreads = AliyunOSSUtils.intPositiveOption(conf,
+        Constants.MAX_COPY_THREADS_NUM_KEY,
+        Constants.MAX_COPY_THREADS_DEFAULT);
+
+    int maxCopyTasks = AliyunOSSUtils.intPositiveOption(conf,
+        Constants.MAX_COPY_TASKS_KEY,
+        Constants.MAX_COPY_TASKS_DEFAULT);
+
+    this.boundedCopyThreadPool = BlockingThreadPoolExecutorService.newInstance(
+        maxCopyThreads, maxCopyTasks, 60L,
+        TimeUnit.SECONDS, "oss-copy-unbounded");
+
+    AliyunOSSCopyFileContext copyFileContext = new AliyunOSSCopyFileContext();
+    ExecutorService executorService = MoreExecutors.listeningDecorator(
+        new SemaphoredDelegatingExecutor(boundedCopyThreadPool,
+            maxConcurrentCopyTasksPerDir, true));
+    int copiesToFinish = 0;
-        store.copyFile(objectSummary.getKey(), newKey);
+
+        //copy operation just copies metadata, oss will support shallow copy
+        executorService.execute(new AliyunOSSCopyFileTask(
+            store, objectSummary.getKey(), newKey, copyFileContext));
+        copiesToFinish++;
+        // No need to call lock() here.
+        // It's ok to copy one more file if the rename operation failed
+        // Reduce the call of lock() can also improve our performance
+        if (copyFileContext.isCopyFailure()) {
+          //some error occurs, break
+          break;
+        }
-    return true;
+    //wait operations in progress to finish
+    copyFileContext.lock();
+    try {
+      copyFileContext.awaitAllFinish(copiesToFinish);
+    } catch (InterruptedException e) {
+      LOG.warn("interrupted when wait copies to finish");
+    } finally {
+      copyFileContext.unlock();
+    }
+    return !copyFileContext.isCopyFailure();

INS26 INS26 INS40 INS40 INS23 INS23 INS83 INS39 INS59 INS83 INS43 INS59 INS42 INS42 INS42 INS21 INS60 INS60 INS21 INS60 INS60 INS60 INS21 INS54 INS41 INS7 INS39 INS59 INS39 INS59 INS7 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS8 INS12 INS8 INS38 INS21 INS42 INS32 INS42 INS32 INS42 INS32 INS22 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS21 INS44 INS8 INS21 INS32 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS42 INS42 INS42 INS42 INS34 INS40 INS45 INS43 INS42 INS42 INS14 INS32 INS43 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS9 INS21 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS37 INS32 INS8 INS42 INS42 INS45 UPD42 INS42 INS14 INS42 INS42 INS42 INS10 INS43 INS42 MOV32 INS42 INS42 INS42 DEL42 DEL42 DEL9 DEL41