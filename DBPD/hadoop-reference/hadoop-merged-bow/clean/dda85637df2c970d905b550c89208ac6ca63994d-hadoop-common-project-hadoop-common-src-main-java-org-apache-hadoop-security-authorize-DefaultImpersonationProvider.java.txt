Merge trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608603 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.ArrayList;
+import java.util.regex.Pattern;
-import org.apache.hadoop.security.Groups;
-import org.apache.hadoop.util.StringUtils;
+import org.apache.hadoop.util.MachineList;
-  // list of users, groups and hosts per proxyuser
-  private Map<String, Collection<String>> proxyUsers = 
-    new HashMap<String, Collection<String>>(); 
-  private Map<String, Collection<String>> proxyGroups = 
-    new HashMap<String, Collection<String>>();
-  private Map<String, Collection<String>> proxyHosts = 
-    new HashMap<String, Collection<String>>();
+  private static final String CONF_HADOOP_PROXYUSER_RE_USERS_GROUPS = 
+      CONF_HADOOP_PROXYUSER_RE+"[^.]*(" + Pattern.quote(CONF_USERS) +
+      "|" + Pattern.quote(CONF_GROUPS) + ")";
+  private static final String CONF_HADOOP_PROXYUSER_RE_HOSTS = 
+      CONF_HADOOP_PROXYUSER_RE+"[^.]*"+ Pattern.quote(CONF_HOSTS);
+  // acl and list of hosts per proxyuser
+  private Map<String, AccessControlList> proxyUserAcl = 
+    new HashMap<String, AccessControlList>();
+  private static Map<String, MachineList> proxyHosts = 
+    new HashMap<String, MachineList>();
-    // get all the new keys for users
-    String regex = CONF_HADOOP_PROXYUSER_RE+"[^.]*\\"+CONF_USERS;
-    Map<String,String> allMatchKeys = conf.getValByRegex(regex);
+    // get list of users and groups per proxyuser
+    Map<String,String> allMatchKeys = 
+        conf.getValByRegex(CONF_HADOOP_PROXYUSER_RE_USERS_GROUPS); 
-      Collection<String> users = StringUtils.getTrimmedStringCollection(entry.getValue());
-      proxyUsers.put(entry.getKey(), users);
+      String aclKey = getAclKey(entry.getKey());
+      if (!proxyUserAcl.containsKey(aclKey)) {
+        proxyUserAcl.put(aclKey, new AccessControlList(
+            allMatchKeys.get(aclKey + CONF_USERS) ,
+            allMatchKeys.get(aclKey + CONF_GROUPS)));
+      }
-    // get all the new keys for groups
-    regex = CONF_HADOOP_PROXYUSER_RE+"[^.]*\\"+CONF_GROUPS;
-    allMatchKeys = conf.getValByRegex(regex);
-    for(Entry<String, String> entry : allMatchKeys.entrySet()) {
-      Collection<String> groups = StringUtils.getTrimmedStringCollection(entry.getValue());
-      proxyGroups.put(entry.getKey(), groups);
-      //cache the groups. This is needed for NetGroups
-      Groups.getUserToGroupsMappingService(conf).cacheGroupsAdd(
-          new ArrayList<String>(groups));
-    }
-
-    // now hosts
-    regex = CONF_HADOOP_PROXYUSER_RE+"[^.]*\\"+CONF_HOSTS;
-    allMatchKeys = conf.getValByRegex(regex);
+    // get hosts per proxyuser
+    allMatchKeys = conf.getValByRegex(CONF_HADOOP_PROXYUSER_RE_HOSTS);
-          StringUtils.getTrimmedStringCollection(entry.getValue()));
+          new MachineList(entry.getValue()));
-
-    if (user.getRealUser() == null) {
+    
+    UserGroupInformation realUser = user.getRealUser();
+    if (realUser == null) {
-    boolean userAuthorized = false;
-    boolean ipAuthorized = false;
-    UserGroupInformation superUser = user.getRealUser();
-
-    Collection<String> allowedUsers = proxyUsers.get(
-        getProxySuperuserUserConfKey(superUser.getShortUserName()));
-
-    if (isWildcardList(allowedUsers)) {
-      userAuthorized = true;
-    } else if (allowedUsers != null && !allowedUsers.isEmpty()) {
-      if (allowedUsers.contains(user.getShortUserName())) {
-        userAuthorized = true;
-      }
+    
+    AccessControlList acl = proxyUserAcl.get(
+        CONF_HADOOP_PROXYUSER+realUser.getShortUserName());
+    if (acl == null || !acl.isUserAllowed(user)) {
+      throw new AuthorizationException("User: " + realUser.getUserName()
+          + " is not allowed to impersonate " + user.getUserName());
-    if (!userAuthorized){
-      Collection<String> allowedUserGroups = proxyGroups.get(
-          getProxySuperuserGroupConfKey(superUser.getShortUserName()));
+    MachineList MachineList = proxyHosts.get(
+        getProxySuperuserIpConfKey(realUser.getShortUserName()));
-      if (isWildcardList(allowedUserGroups)) {
-        userAuthorized = true;
-      } else if (allowedUserGroups != null && !allowedUserGroups.isEmpty()) {
-        for (String group : user.getGroupNames()) {
-          if (allowedUserGroups.contains(group)) {
-            userAuthorized = true;
-            break;
-          }
-        }
-      }
-
-      if (!userAuthorized) {
-        throw new AuthorizationException("User: " + superUser.getUserName()
-            + " is not allowed to impersonate " + user.getUserName());
-      }
-    }
-
-    Collection<String> ipList = proxyHosts.get(
-        getProxySuperuserIpConfKey(superUser.getShortUserName()));
-
-    if (isWildcardList(ipList)) {
-      ipAuthorized = true;
-    } else if (ipList != null && !ipList.isEmpty()) {
-      for (String allowedHost : ipList) {
-        InetAddress hostAddr;
-        try {
-          hostAddr = InetAddress.getByName(allowedHost);
-        } catch (UnknownHostException e) {
-          continue;
-        }
-        if (hostAddr.getHostAddress().equals(remoteAddress)) {
-          // Authorization is successful
-          ipAuthorized = true;
-        }
-      }
-    }
-    if(!ipAuthorized) {
+    if(!MachineList.includes(remoteAddress)) {
-          + superUser.getUserName() + " from IP " + remoteAddress);
+          + realUser.getUserName() + " from IP " + remoteAddress);
-
-  /**
-   * Return true if the configuration specifies the special configuration value
-   * "*", indicating that any group or host list is allowed to use this configuration.
-   */
-  private boolean isWildcardList(Collection<String> list) {
-    return (list != null) &&
-    (list.size() == 1) &&
-    (list.contains("*"));
+  
+  private String getAclKey(String key) {
+    int endIndex = key.lastIndexOf(".");
+    if (endIndex != -1) {
+      return key.substring(0, endIndex); 
+    }
+    return key;
-  public Map<String, Collection<String>> getProxyUsers() {
-    return proxyUsers;
-  }
-
-  @VisibleForTesting
-    return proxyGroups;
+     Map<String,Collection<String>> proxyGroups = new HashMap<String,Collection<String>>();
+     for(Entry<String, AccessControlList> entry : proxyUserAcl.entrySet()) {
+       proxyGroups.put(entry.getKey() + CONF_GROUPS, entry.getValue().getGroups());
+     }
+     return proxyGroups;
-    return proxyHosts;
+    Map<String, Collection<String>> tmpProxyHosts = 
+        new HashMap<String, Collection<String>>();
+    for (Map.Entry<String, MachineList> proxyHostEntry :proxyHosts.entrySet()) {
+      tmpProxyHosts.put(proxyHostEntry.getKey(), 
+          proxyHostEntry.getValue().getCollection());
+    }
+    return tmpProxyHosts;

MOV26 UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 MOV83 UPD83 MOV83 INS83 MOV43 INS59 INS83 INS74 INS59 INS83 INS83 INS74 INS59 MOV70 MOV78 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 MOV43 INS42 MOV44 INS8 MOV78 MOV74 UPD42 MOV78 MOV83 MOV74 UPD42 MOV42 INS8 MOV42 INS42 INS27 INS42 INS27 UPD43 MOV43 MOV43 INS43 UPD42 MOV42 INS14 INS43 MOV43 INS43 INS42 INS14 INS70 MOV60 INS25 MOV60 INS25 MOV60 INS25 UPD42 INS60 INS25 INS41 INS60 MOV70 MOV41 INS60 INS70 MOV41 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS45 MOV32 UPD42 INS42 INS74 INS42 INS42 INS74 MOV44 MOV32 INS8 INS27 MOV8 INS43 UPD27 MOV27 MOV8 INS43 INS38 MOV8 INS39 INS59 INS27 INS8 INS42 MOV74 MOV59 MOV74 MOV59 INS44 INS32 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS43 MOV43 INS43 INS43 MOV43 INS43 MOV60 INS25 UPD42 UPD42 MOV42 MOV33 UPD42 MOV42 UPD42 UPD27 UPD42 MOV42 UPD42 MOV32 INS42 INS32 UPD42 MOV42 INS38 INS41 UPD74 UPD42 UPD42 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 UPD42 INS38 INS8 UPD42 UPD42 INS27 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS45 INS34 INS32 UPD43 INS43 MOV43 UPD43 MOV43 INS32 UPD42 MOV32 INS32 INS21 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS32 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 UPD42 INS27 MOV42 INS40 UPD42 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 INS42 INS32 INS43 MOV32 UPD42 MOV42 MOV42 UPD42 MOV32 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS43 INS32 INS32 INS42 UPD42 MOV42 INS42 INS27 INS42 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL23 DEL23 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL21 DEL8 DEL70 DEL42 DEL45 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL45 DEL27 DEL7 DEL21 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL32 DEL32 DEL43 DEL74 DEL83 DEL39 DEL42 DEL33 DEL27 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL42 DEL38 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL25 DEL42 DEL38 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL38 DEL27 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL18 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL25 DEL42 DEL38 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL74 DEL42 DEL44 DEL33 DEL27 DEL36 DEL32 DEL34 DEL27 DEL36 DEL42 DEL45 DEL32 DEL36 DEL27 DEL41 DEL8 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL8 DEL31