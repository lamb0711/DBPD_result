YARN-6400. Remove some unneeded code after YARN-6255. Contributed by Jian He

-import org.apache.hadoop.metrics2.MetricsSystem;
-import org.apache.hadoop.yarn.security.client.TimelineDelegationTokenIdentifier;
-import org.apache.slider.core.conf.AggregateConf;
-import org.apache.slider.server.appmaster.rpc.SliderAMPolicyProvider;
-  private String agentOpsUrl;
-  private String agentStatusUrl;
-  private SecurityConfiguration securityConfiguration;
-//      processAMCredentials(securityConfiguration);
+      stripAMRMToken();
-      if (securityEnabled) {
-        secretManager.setMasterKey(
-            amRegistrationData.getClientToAMTokenMasterKey().array());
-        applicationACLs = amRegistrationData.getApplicationACLs();
-
-        //tell the server what the ACLs are
-        rpcService.getServer().refreshServiceAcl(serviceConf,
-            new SliderAMPolicyProvider());
-        if (securityConfiguration.isKeytabProvided()) {
-          // perform keytab based login to establish kerberos authenticated
-          // principal.  Can do so now since AM registration with RM above required
-          // tokens associated to principal
-          String principal = securityConfiguration.getPrincipal();
-          //TODO read key tab file from slider-am.xml
-          File localKeytabFile =
-              securityConfiguration.getKeytabFile(new AggregateConf());
-          // Now log in...
-          login(principal, localKeytabFile);
-          // obtain new FS reference that should be kerberos based and different
-          // than the previously cached reference
-          fs = new SliderFileSystem(serviceConf);
-        }
-      }
+//      if (securityEnabled) {
+//        secretManager.setMasterKey(
+//            amRegistrationData.getClientToAMTokenMasterKey().array());
+//        applicationACLs = amRegistrationData.getApplicationACLs();
+//
+//        //tell the server what the ACLs are
+//        rpcService.getServer().refreshServiceAcl(serviceConf,
+//            new SliderAMPolicyProvider());
+//        if (securityConfiguration.isKeytabProvided()) {
+//          // perform keytab based login to establish kerberos authenticated
+//          // principal.  Can do so now since AM registration with RM above required
+//          // tokens associated to principal
+//          String principal = securityConfiguration.getPrincipal();
+//          //TODO read key tab file from slider-am.xml
+//          File localKeytabFile = new File("todo");
+////              securityConfiguration.getKeytabFile(new AggregateConf());
+//          // Now log in...
+//          login(principal, localKeytabFile);
+//          // obtain new FS reference that should be kerberos based and different
+//          // than the previously cached reference
+//          fs = new SliderFileSystem(serviceConf);
+//        }
+//      }
-   * If a keytab has been provided, also strip the HDFS delegation token.
-   * @param securityConfig slider security config
-  private void processAMCredentials(SecurityConfiguration securityConfig)
+  private void stripAMRMToken()
-
-    filteredTokens.add(TimelineDelegationTokenIdentifier.KIND_NAME);
-
-    boolean keytabProvided = securityConfig.isKeytabProvided();
-    log.info("Slider AM Security Mode: {}", keytabProvided ? "KEYTAB" : "TOKEN");
-    if (keytabProvided) {
-      filteredTokens.add(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);
-    }
-  /**
-   * Build the credentials needed for containers. This will include
-   * getting new delegation tokens for HDFS if the AM is running
-   * with a keytab.
-   * @return a buffer of credentials
-   * @throws IOException
-   */
-
-  private Credentials buildContainerCredentials() throws IOException {
-    Credentials credentials = new Credentials(containerCredentials);
-    if (securityConfiguration.isKeytabProvided()) {
-      CredentialUtils.addSelfRenewableFSDelegationTokens(
-          getClusterFS().getFileSystem(),
-          credentials);
-    }
-    return credentials;
-  }
-

INS42 MOV21 INS32 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL66 DEL42 DEL66 DEL65 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL16 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31