Revert "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen."

This reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.

-import org.apache.hadoop.ipc.RemoteException;
-import org.apache.hadoop.tools.DistCpOptionSwitch;
-import java.io.FileNotFoundException;
-import java.util.LinkedList;
-  private boolean ignoreFailures = false;
-
+  
-    targetPathExists = conf.getBoolean(
-        DistCpConstants.CONF_LABEL_TARGET_PATH_EXISTS, true);
-    ignoreFailures = conf.getBoolean(
-        DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);
-
-    concatFileChunks(conf);
-
+    targetPathExists = conf.getBoolean(DistCpConstants.CONF_LABEL_TARGET_PATH_EXISTS, true);
+    
-  private boolean isFileNotFoundException(IOException e) {
-    if (e instanceof FileNotFoundException) {
-      return true;
-    }
-
-    if (e instanceof RemoteException) {
-      return ((RemoteException)e).unwrapRemoteException()
-          instanceof FileNotFoundException;
-    }
-
-    return false;
-  }
-
-  /**
-   * Concat chunk files for the same file into one.
-   * Iterate through copy listing, identify chunk files for the same file,
-   * concat them into one.
-   */
-  private void concatFileChunks(Configuration conf) throws IOException {
-
-    LOG.info("concat file chunks ...");
-
-    String spath = conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH);
-    if (spath == null || spath.isEmpty()) {
-      return;
-    }
-    Path sourceListing = new Path(spath);
-    SequenceFile.Reader sourceReader = new SequenceFile.Reader(conf,
-                                      SequenceFile.Reader.file(sourceListing));
-    Path targetRoot =
-        new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));
-
-    try {
-      CopyListingFileStatus srcFileStatus = new CopyListingFileStatus();
-      Text srcRelPath = new Text();
-      CopyListingFileStatus lastFileStatus = null;
-      LinkedList<Path> allChunkPaths = new LinkedList<Path>();
-
-      // Iterate over every source path that was copied.
-      while (sourceReader.next(srcRelPath, srcFileStatus)) {
-        if (srcFileStatus.isDirectory()) {
-          continue;
-        }
-        Path targetFile = new Path(targetRoot.toString() + "/" + srcRelPath);
-        Path targetFileChunkPath =
-            DistCpUtils.getSplitChunkPath(targetFile, srcFileStatus);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("  add " + targetFileChunkPath + " to concat.");
-        }
-        allChunkPaths.add(targetFileChunkPath);
-        if (srcFileStatus.getChunkOffset() + srcFileStatus.getChunkLength()
-            == srcFileStatus.getLen()) {
-          // This is the last chunk of the splits, consolidate allChunkPaths
-          try {
-            concatFileChunks(conf, targetFile, allChunkPaths);
-          } catch (IOException e) {
-            // If the concat failed because a chunk file doesn't exist,
-            // then we assume that the CopyMapper has skipped copying this
-            // file, and we ignore the exception here.
-            // If a chunk file should have been created but it was not, then
-            // the CopyMapper would have failed.
-            if (!isFileNotFoundException(e)) {
-              String emsg = "Failed to concat chunk files for " + targetFile;
-              if (!ignoreFailures) {
-                throw new IOException(emsg, e);
-              } else {
-                LOG.warn(emsg, e);
-              }
-            }
-          }
-          allChunkPaths.clear();
-          lastFileStatus = null;
-        } else {
-          if (lastFileStatus == null) {
-            lastFileStatus = new CopyListingFileStatus(srcFileStatus);
-          } else {
-            // Two neighboring chunks have to be consecutive ones for the same
-            // file, for them to be merged
-            if (!srcFileStatus.getPath().equals(lastFileStatus.getPath()) ||
-                srcFileStatus.getChunkOffset() !=
-                (lastFileStatus.getChunkOffset() +
-                lastFileStatus.getChunkLength())) {
-              String emsg = "Inconsistent sequence file: current " +
-                  "chunk file " + srcFileStatus + " doesnt match prior " +
-                  "entry " + lastFileStatus;
-              if (!ignoreFailures) {
-                throw new IOException(emsg);
-              } else {
-                LOG.warn(emsg + ", skipping concat this set.");
-              }
-            } else {
-              lastFileStatus.setChunkOffset(srcFileStatus.getChunkOffset());
-              lastFileStatus.setChunkLength(srcFileStatus.getChunkLength());
-            }
-          }
-        }
-      }
-    } finally {
-      IOUtils.closeStream(sourceReader);
-    }
-  }
-
-  private void preserveFileAttributesForDirectories(Configuration conf)
-      throws IOException {
+  private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {
-
-  /**
-   * Concat the passed chunk files into one and rename it the targetFile.
-   */
-  private void concatFileChunks(Configuration conf, Path targetFile,
-      LinkedList<Path> allChunkPaths) throws IOException {
-    if (allChunkPaths.size() == 1) {
-      return;
-    }
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("concat " + targetFile + " allChunkSize+ "
-          + allChunkPaths.size());
-    }
-    FileSystem dstfs = targetFile.getFileSystem(conf);
-
-    Path firstChunkFile = allChunkPaths.removeFirst();
-    Path[] restChunkFiles = new Path[allChunkPaths.size()];
-    allChunkPaths.toArray(restChunkFiles);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("concat: firstchunk: " + dstfs.getFileStatus(firstChunkFile));
-      int i = 0;
-      for (Path f : restChunkFiles) {
-        LOG.debug("concat: other chunk: " + i + ": " + dstfs.getFileStatus(f));
-        ++i;
-      }
-    }
-    dstfs.concat(firstChunkFile, restChunkFiles);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("concat: result: " + dstfs.getFileStatus(firstChunkFile));
-    }
-    rename(dstfs, firstChunkFile, targetFile);
-  }
-
-  /**
-   * Rename tmp to dst on destFileSys.
-   * @param destFileSys the file ssystem
-   * @param tmp the source path
-   * @param dst the destination path
-   * @throws IOException if renaming failed
-   */
-  private static void rename(FileSystem destFileSys, Path tmp, Path dst)
-      throws IOException {
-    try {
-      if (destFileSys.exists(dst)) {
-        destFileSys.delete(dst, true);
-      }
-      destFileSys.rename(tmp, dst);
-    } catch (IOException ioe) {
-      throw new IOException("Fail to rename tmp file (=" + tmp
-          + ") to destination file (=" + dst + ")", ioe);
-    }
-  }
-

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL9 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL43 DEL62 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL40 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL38 DEL42 DEL43 DEL42 DEL42 DEL14 DEL53 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL36 DEL27 DEL27 DEL42 DEL43 DEL42 DEL45 DEL45 DEL27 DEL42 DEL45 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL38 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL34 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL38 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31