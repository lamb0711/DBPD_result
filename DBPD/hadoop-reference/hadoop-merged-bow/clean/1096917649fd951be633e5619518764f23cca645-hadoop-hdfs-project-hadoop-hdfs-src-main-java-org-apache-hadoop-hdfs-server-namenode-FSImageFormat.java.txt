HDFS-4611. Update FSImage for INodeReference.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1463332 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.DataInput;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotFSImageFormat.ReferenceMap;
+    
+    private Map<Integer, Snapshot> snapshotMap = null;
+    private final ReferenceMap referenceMap = new ReferenceMap();
-          namesystem.getSnapshotManager().read(in);
+          snapshotMap = namesystem.getSnapshotManager().read(in, this);
-    private void loadLocalNameINodesWithSnapshot(DataInputStream in)
+    private void loadLocalNameINodesWithSnapshot(DataInput in)
-   private void loadLocalNameINodes(long numFiles, DataInputStream in) 
+   private void loadLocalNameINodes(long numFiles, DataInput in) 
-     * @param in The {@link DataInputStream} instance to read.
+     * @param in The {@link DataInput} instance to read.
-    private void loadRoot(DataInputStream in) throws IOException {
+    private void loadRoot(DataInput in) throws IOException {
-      final INodeWithAdditionalFields root = loadINode(null, false, in);
+      final INodeDirectory root = loadINode(null, false, in).asDirectory();
-    private int loadChildren(INodeDirectory parent, DataInputStream in)
+    private int loadChildren(INodeDirectory parent, DataInput in)
-     * @param in The {@link DataInputStream} instance to read.
+     * @param in The {@link DataInput} instance to read.
-    private void loadDirectoryWithSnapshot(DataInputStream in)
+    private void loadDirectoryWithSnapshot(DataInput in)
-   private int loadDirectory(DataInputStream in) throws IOException {
+   private int loadDirectory(DataInput in) throws IOException {
-      DataInputStream in) throws IOException {
+      DataInput in) throws IOException {
-      final INodeWithAdditionalFields newNode = loadINode(
+      final INode newNode = loadINode(
-        updateRootAttr(newNode);
+        updateRootAttr(newNode.asDirectory());
-        DataInputStream in) throws IOException {
-      final byte[] localName = new byte[in.readShort()];
-      in.readFully(localName);
-      final INode inode = loadINode(localName, isSnapshotINode, in);
-      inode.setLocalName(localName);
-      return inode;
+        DataInput in) throws IOException {
+      final byte[] localName = FSImageSerialization.readLocalName(in);
+      return loadINode(localName, isSnapshotINode, in);
-  INodeWithAdditionalFields loadINode(final byte[] localName, boolean isSnapshotINode,
-      DataInputStream in) throws IOException {
+  INode loadINode(final byte[] localName, boolean isSnapshotINode,
+      DataInput in) throws IOException {
+    } else if (numBlocks == -3) {
+      //reference
+
+      final boolean isWithName = in.readBoolean();
+
+      final INodeReference.WithCount withCount
+          = referenceMap.loadINodeReferenceWithCount(isSnapshotINode, in, this);
+
+      if (isWithName) {
+        return new INodeReference.WithName(null, withCount, localName);
+      } else {
+        final INodeReference ref = new INodeReference(null, withCount);
+        withCount.setParentReference(ref);
+        return ref;
+      }
-    private void loadFilesUnderConstruction(DataInputStream in,
+    private void loadFilesUnderConstruction(DataInput in,
-    private void loadSecretManagerState(DataInputStream in)
+    private void loadSecretManagerState(DataInput in)
+    
+    public Snapshot getSnapshot(DataInput in) throws IOException {
+      return snapshotMap.get(in.readInt());
+    }
+    private final ReferenceMap referenceMap = new ReferenceMap();
-        FSImageSerialization.saveINode2Image(fsDir.rootDir, out, false);
+        FSImageSerialization.saveINode2Image(fsDir.rootDir, out, false, referenceMap);
+        referenceMap.removeAllINodeReferenceWithId();
-        FSImageSerialization.saveINode2Image(child, out, false);
+        FSImageSerialization.saveINode2Image(child, out, false, referenceMap);
-      SnapshotFSImageFormat.saveDirectoryDiffList(current, out);
+      SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap);

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS23 INS83 INS74 INS59 INS83 INS83 INS43 INS59 MOV83 MOV43 MOV42 MOV44 MOV44 MOV43 INS8 MOV43 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS59 INS43 INS43 INS43 INS42 INS33 INS42 INS42 INS14 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 MOV60 INS41 UPD43 UPD43 UPD43 INS42 INS43 INS42 INS42 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 INS42 INS32 INS43 INS42 UPD42 UPD42 INS32 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS21 INS42 MOV32 INS42 UPD43 UPD42 MOV42 UPD42 MOV42 INS42 INS25 INS42 INS42 INS32 UPD42 INS27 INS8 INS42 INS42 INS42 INS42 INS7 INS42 INS38 INS60 INS60 INS25 INS42 MOV32 INS32 INS34 INS83 INS39 INS59 INS83 INS43 INS59 INS42 INS8 INS8 INS52 MOV42 INS42 INS42 INS32 INS40 INS42 INS32 INS41 INS60 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS14 INS83 INS43 INS59 INS32 INS42 INS43 INS33 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS43 INS33 INS42 INS42 DEL39 DEL85 DEL5 DEL32 DEL3 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43