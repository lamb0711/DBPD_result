Merge HDFS-4949 branch back into trunk

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1536572 13f79535-47bb-0310-9956-ffa450edef68

+
+import org.apache.hadoop.hdfs.server.namenode.CachedBlock;
+import org.apache.hadoop.util.IntrusiveCollection;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
+
+  /**
+   * A list of CachedBlock objects on this datanode.
+   */
+  public static class CachedBlocksList extends IntrusiveCollection<CachedBlock> {
+    public enum Type {
+      PENDING_CACHED,
+      CACHED,
+      PENDING_UNCACHED
+    }
+
+    private final DatanodeDescriptor datanode;
+
+    private final Type type;
+
+    CachedBlocksList(DatanodeDescriptor datanode, Type type) {
+      this.datanode = datanode;
+      this.type = type;
+    }
+
+    public DatanodeDescriptor getDatanode() {
+      return datanode;
+    }
+
+    public Type getType() {
+      return type;
+    }
+  }
+
+  /**
+   * The blocks which we want to cache on this DataNode.
+   */
+  private final CachedBlocksList pendingCached = 
+      new CachedBlocksList(this, CachedBlocksList.Type.PENDING_CACHED);
+
+  /**
+   * The blocks which we know are cached on this datanode.
+   * This list is updated by periodic cache reports.
+   */
+  private final CachedBlocksList cached = 
+      new CachedBlocksList(this, CachedBlocksList.Type.CACHED);
+
+  /**
+   * The blocks which we want to uncache on this DataNode.
+   */
+  private final CachedBlocksList pendingUncached = 
+      new CachedBlocksList(this, CachedBlocksList.Type.PENDING_UNCACHED);
+
+  public CachedBlocksList getPendingCached() {
+    return pendingCached;
+  }
+
+  public CachedBlocksList getCached() {
+    return cached;
+  }
+
+  public CachedBlocksList getPendingUncached() {
+    return pendingUncached;
+  }
+
+  /**
+   * Head of the list of blocks on the datanode
+   */
+  /**
+   * Number of blocks on the datanode
+   */
+
-    this(nodeID, 0L, 0L, 0L, 0L, 0, 0);
+    this(nodeID, 0L, 0L, 0L, 0L, 0L, 0L, 0, 0);
-    this(nodeID, networkLocation, 0L, 0L, 0L, 0L, 0, 0);
+    this(nodeID, networkLocation, 0L, 0L, 0L, 0L, 0L, 0L, 0, 0);
+   * @param cacheCapacity cache capacity of the data node
+   * @param cacheUsed cache used on the data node
+                            long cacheCapacity,
+                            long cacheUsed,
-    updateHeartbeat(capacity, dfsUsed, remaining, bpused, xceiverCount, 
-        failedVolumes);
+    updateHeartbeat(capacity, dfsUsed, remaining, bpused, cacheCapacity,
+        cacheUsed, xceiverCount, failedVolumes);
+   * @param cacheCapacity cache capacity of the data node
+   * @param cacheUsed cache used on the data node
+                            long cacheCapacity,
+                            long cacheUsed,
-    updateHeartbeat(capacity, dfsUsed, remaining, bpused, xceiverCount, 
-        failedVolumes);
+    updateHeartbeat(capacity, dfsUsed, remaining, bpused, cacheCapacity,
+        cacheUsed, xceiverCount, failedVolumes);
+  @VisibleForTesting
+    // pendingCached, cached, and pendingUncached are protected by the
+    // FSN lock.
+    this.pendingCached.clear();
+    this.cached.clear();
+    this.pendingUncached.clear();
+    // pendingCached, cached, and pendingUncached are protected by the
+    // FSN lock.
+    this.pendingCached.clear();
+    this.cached.clear();
+    this.pendingUncached.clear();
-      long blockPoolUsed, int xceiverCount, int volFailures) {
+      long blockPoolUsed, long cacheCapacity, long cacheUsed, int xceiverCount,
+      int volFailures) {
+    setCacheCapacity(cacheCapacity);
+    setCacheUsed(cacheUsed);
-  
+
-
+  
-  
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS55 INS23 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS74 INS71 INS23 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS29 INS29 INS44 INS44 INS44 INS44 INS78 INS44 INS44 INS65 INS43 INS43 INS83 INS42 INS72 INS72 INS72 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS14 INS42 INS41 INS42 INS41 INS42 INS41 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS65 INS65 INS39 INS42 INS39 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS39 INS42 INS39 INS42 INS21 INS21 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS66 INS43 INS52 INS40 INS66 INS66 INS43 INS52 INS40 INS66 INS43 INS52 INS40 INS42 INS42 INS42 INS66 INS66 INS34 INS34 INS34 INS34 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42