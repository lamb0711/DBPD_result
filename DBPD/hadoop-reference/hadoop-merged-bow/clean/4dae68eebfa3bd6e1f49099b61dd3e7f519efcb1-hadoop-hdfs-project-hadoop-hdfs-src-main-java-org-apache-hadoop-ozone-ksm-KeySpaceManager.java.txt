HDFS-12741. Ozone: KSM: ADD support for KSM --createObjectStore command. Contributed by Shashikant Banerjee.

+import org.apache.hadoop.ozone.common.Storage.StorageState;
+import org.apache.hadoop.ozone.ksm.exceptions.KSMException;
+import org.apache.hadoop.ozone.ksm.exceptions.KSMException.ResultCodes;
+import java.io.PrintStream;
+  private static final String USAGE =
+      "Usage: \n hdfs ksm [genericOptions] " + "[ "
+          + StartupOption.CREATEOBJECTSTORE.getName() + " ]\n " + "hdfs ksm [ "
+          + StartupOption.HELP.getName() + " ]\n";
+
+  /** Startup options. */
+  public enum StartupOption {
+    CREATEOBJECTSTORE("-createObjectStore"),
+    HELP("-help"),
+    REGULAR("-regular");
+
+    private final String name;
+
+    StartupOption(String arg) {
+      this.name = arg;
+    }
+
+    public String getName() {
+      return name;
+    }
+
+    public static StartupOption parse(String value) {
+      for (StartupOption option : StartupOption.values()) {
+        if (option.name.equalsIgnoreCase(value)) {
+          return option;
+        }
+      }
+      return null;
+    }
+  }
+
+  private final KSMStorage ksmStorage;
-  private static final String USAGE = "hdfs ksm [genericOptions]";
-  public KeySpaceManager(OzoneConfiguration conf) throws IOException {
+  private KeySpaceManager(OzoneConfiguration conf) throws IOException {
+    ksmStorage = new KSMStorage(conf);
+    ScmBlockLocationProtocol scmBlockClient = getScmBlockClient(conf);
+    if (ksmStorage.getState() != StorageState.INITIALIZED) {
+      throw new KSMException("KSM not initialized.",
+          ResultCodes.KSM_NOT_INITIALIZED);
+    }
+
+    // verifies that the SCM info in the KSM Version file is correct.
+    ScmInfo scmInfo = scmBlockClient.getScmInfo();
+    if (!(scmInfo.getClusterId().equals(ksmStorage.getClusterID()) && scmInfo
+        .getScmId().equals(ksmStorage.getScmId()))) {
+      throw new KSMException("SCM version info mismatch.",
+          ResultCodes.SCM_VERSION_MISMATCH_ERROR);
+    }
-  private ScmBlockLocationProtocol getScmBlockClient(OzoneConfiguration conf)
-      throws IOException {
+  private static ScmBlockLocationProtocol getScmBlockClient(
+      OzoneConfiguration conf) throws IOException {
+
+  @VisibleForTesting
+  public KSMStorage getKsmStorage() {
+    return ksmStorage;
+  }
-    if (DFSUtil.parseHelpArgument(argv, USAGE,
-        System.out, true)) {
+    if (DFSUtil.parseHelpArgument(argv, USAGE, System.out, true)) {
-      if (!hParser.isParseSuccessful()
-          || hParser.getRemainingArgs().length > 0) {
+      if (!hParser.isParseSuccessful()) {
-      if (!DFSUtil.isOzoneEnabled(conf)) {
-        System.out.println("KSM cannot be started in secure mode or when " +
-            OZONE_ENABLED + " is set to false");
-        System.exit(1);
-      }
-      KeySpaceManager ksm = new KeySpaceManager(conf);
-      ksm.start();
-      ksm.join();
+      KeySpaceManager ksm = createKSM(hParser.getRemainingArgs(), conf);
+      if (ksm != null) {
+        ksm.start();
+        ksm.join();
+      }
+  private static void printUsage(PrintStream out) {
+    out.println(USAGE + "\n");
+  }
+
+  /**
+   * Constructs KSM instance based on command line arguments.
+   * @param argv Command line arguments
+   * @param conf OzoneConfiguration
+   * @return KSM instance
+   * @throws IOException in case KSM instance creation fails.
+   */
+
+  public static KeySpaceManager createKSM(String[] argv,
+      OzoneConfiguration conf) throws IOException {
+    if (!DFSUtil.isOzoneEnabled(conf)) {
+      System.err.println("KSM cannot be started in secure mode or when " +
+          OZONE_ENABLED + " is set to false");
+      System.exit(1);
+    }
+    StartupOption startOpt = parseArguments(argv);
+    if (startOpt == null) {
+      printUsage(System.err);
+      terminate(1);
+      return null;
+    }
+    switch (startOpt) {
+    case CREATEOBJECTSTORE:
+      terminate(ksmInit(conf) ? 0 : 1);
+      return null;
+    case HELP:
+      printUsage(System.err);
+      terminate(0);
+      return null;
+    default:
+      return new KeySpaceManager(conf);
+    }
+  }
+
+  /**
+   * Initializes the KSM instance.
+   * @param conf OzoneConfiguration
+   * @return true if KSM initialization succeeds , false otherwise
+   * @throws IOException in case ozone metadata directory path is not accessible
+   */
+
+  private static boolean ksmInit(OzoneConfiguration conf) throws IOException {
+    KSMStorage ksmStorage = new KSMStorage(conf);
+    StorageState state = ksmStorage.getState();
+    if (state != StorageState.INITIALIZED) {
+      try {
+        ScmBlockLocationProtocol scmBlockClient = getScmBlockClient(conf);
+        ScmInfo scmInfo = scmBlockClient.getScmInfo();
+        String clusterId = scmInfo.getClusterId();
+        String scmId = scmInfo.getScmId();
+        if (clusterId == null || clusterId.isEmpty()) {
+          throw new IOException("Invalid Cluster ID");
+        }
+        if (scmId == null || scmId.isEmpty()) {
+          throw new IOException("Invalid SCM ID");
+        }
+        ksmStorage.setClusterId(clusterId);
+        ksmStorage.setScmId(scmId);
+        ksmStorage.initialize();
+        System.out.println(
+            "KSM initialization succeeded.Current cluster id for sd="
+                + ksmStorage.getStorageDir() + ";cid=" + ksmStorage
+                .getClusterID());
+        return true;
+      } catch (IOException ioe) {
+        LOG.error("Could not initialize KSM version file", ioe);
+        return false;
+      }
+    } else {
+      System.out.println(
+          "KSM already initialized.Reusing existing cluster id for sd="
+              + ksmStorage.getStorageDir() + ";cid=" + ksmStorage
+              .getClusterID());
+      return true;
+    }
+  }
+
+  /**
+   * Parses the command line options for KSM initialization.
+   * @param args command line arguments
+   * @return StartupOption if options are valid, null otherwise
+   */
+  private static StartupOption parseArguments(String[] args) {
+    if (args == null || args.length == 0) {
+      return StartupOption.REGULAR;
+    } else if (args.length == 1) {
+      return StartupOption.parse(args[0]);
+    }
+    return null;
+  }
+

INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS71 INS23 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS42 INS72 INS72 INS72 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 UPD83 INS83 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS27 INS65 INS42 INS45 INS42 INS45 INS42 INS45 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS21 INS60 INS25 INS60 INS25 INS42 INS42 INS41 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS5 INS42 INS43 INS42 INS42 MOV25 INS60 INS25 INS50 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS25 INS65 INS65 INS65 INS42 INS5 INS42 INS25 INS41 INS27 INS32 INS45 INS45 INS32 INS45 INS66 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS70 INS41 INS7 INS43 INS59 INS27 INS8 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS43 INS85 INS42 INS43 INS59 INS27 INS8 INS42 INS49 INS21 INS41 INS49 INS21 INS21 INS41 INS49 INS41 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS66 INS42 INS66 INS66 INS43 INS85 INS27 INS8 INS25 INS33 INS45 INS45 INS40 INS42 INS40 INS42 INS42 INS7 INS42 INS42 INS44 INS32 INS8 INS33 INS42 INS14 INS42 INS42 INS32 INS32 INS40 INS53 INS42 INS42 INS32 INS36 INS53 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS42 INS32 INS33 INS42 INS32 INS32 INS33 MOV14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS40 INS54 INS21 INS41 INS42 INS27 INS27 INS41 INS27 INS8 INS22 INS42 INS43 INS42 INS42 INS42 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS14 MOV38 INS43 INS27 INS8 INS42 INS45 INS42 INS42 INS32 INS32 INS33 INS42 INS16 INS42 INS40 INS42 INS34 INS43 INS42 INS42 INS42 INS8 INS12 INS32 INS9 INS42 INS33 INS40 INS34 INS40 INS40 INS34 INS41 INS52 INS42 INS42 INS32 INS8 INS42 INS43 INS45 INS40 INS32 INS32 INS43 INS45 INS40 INS42 INS32 INS42 INS33 MOV21 MOV21 UPD40 INS42 INS40 INS42 INS34 INS32 INS34 INS34 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS21 INS21 INS21 INS21 INS41 INS44 INS8 INS40 INS42 INS27 INS32 INS40 INS42 INS42 INS41 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS32 INS32 INS32 INS9 INS43 INS42 INS21 INS41 INS45 INS32 INS45 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS53 INS27 INS32 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS33 INS42 INS42 INS14 INS45 INS32 INS45 INS32 INS42 INS42 INS45 INS42 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL22 DEL34 DEL27 DEL27