YARN-3079. Scheduler should also update maximumAllocation when updateNodeResource. (Zhihai Xu via wangda)

+import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
-  private ReentrantReadWriteLock maximumAllocationLock =
-      new ReentrantReadWriteLock();
+  private final ReadLock maxAllocReadLock;
+  private final WriteLock maxAllocWriteLock;
+
+    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+    this.maxAllocReadLock = lock.readLock();
+    this.maxAllocWriteLock = lock.writeLock();
-    ReentrantReadWriteLock.ReadLock readLock = maximumAllocationLock.readLock();
-    readLock.lock();
+    maxAllocReadLock.lock();
-      readLock.unlock();
+      maxAllocReadLock.unlock();
-    ReentrantReadWriteLock.WriteLock writeLock =
-        maximumAllocationLock.writeLock();
-    writeLock.lock();
+    maxAllocWriteLock.lock();
-      writeLock.unlock();
+      maxAllocWriteLock.unlock();
-  
-      LOG.info("Update resource on node: " + node.getNodeName() 
+      LOG.info("Update resource on node: " + node.getNodeName()
+      nodes.remove(nm.getNodeID());
+      updateMaximumAllocation(node, false);
+
-    
+
+      nodes.put(nm.getNodeID(), (N)node);
+      updateMaximumAllocation(node, true);
+
-    ReentrantReadWriteLock.WriteLock writeLock =
-        maximumAllocationLock.writeLock();
-    writeLock.lock();
+    Resource totalResource = node.getTotalResource();
+    maxAllocWriteLock.lock();
-        int nodeMemory = node.getTotalResource().getMemory();
+        int nodeMemory = totalResource.getMemory();
-        int nodeVCores = node.getTotalResource().getVirtualCores();
+        int nodeVCores = totalResource.getVirtualCores();
-        if (maxNodeMemory == node.getTotalResource().getMemory()) {
+        if (maxNodeMemory == totalResource.getMemory()) {
-        if (maxNodeVCores == node.getTotalResource().getVirtualCores()) {
+        if (maxNodeVCores == totalResource.getVirtualCores()) {
-      writeLock.unlock();
+      maxAllocWriteLock.unlock();

INS26 INS26 INS40 INS40 INS23 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS42 INS42 INS42 INS60 INS21 INS21 MOV60 MOV43 MOV59 INS7 INS7 INS43 UPD42 INS22 INS32 INS22 INS32 UPD42 UPD42 INS21 INS21 INS21 INS21 INS42 UPD42 MOV32 UPD42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS32 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS11 INS42 INS42 INS9 INS60 UPD42 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS59 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL32 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32