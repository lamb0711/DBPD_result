Revert "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai."

This reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.

-        LOG.debug("{}: cache cleaner running at {}", this, curMs);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(this + ": cache cleaner running at " + curMs);
+        }
-        LOG.debug("{}: finishing cache cleaner run started at {}. Demoted {} "
-            + "mmapped replicas; purged {} replicas.",
-            this, curMs, numDemoted, numPurged);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(this + ": finishing cache cleaner run started at " +
+            curMs + ".  Demoted " + numDemoted + " mmapped replicas; " +
+            "purged " + numPurged + " replicas.");
+        }
-      LOG.trace("{}: about to release {}", ShortCircuitCache.this, slot);
+      if (LOG.isTraceEnabled()) {
+        LOG.trace(ShortCircuitCache.this + ": about to release " + slot);
+      }
-        LOG.trace("{}: released {}", this, slot);
+        if (LOG.isTraceEnabled()) {
+          LOG.trace(ShortCircuitCache.this + ": released " + slot);
+        }
-          LOG.debug("{}: {}", this, purgeReason);
+          if (LOG.isDebugEnabled()) {
+            LOG.debug(this + ": " + purgeReason);
+          }
-          LOG.trace("{}: can't fethchOrCreate {} because the cache is closed.",
-              this, key);
+          if (LOG.isTraceEnabled()) {
+            LOG.trace(this + ": can't fetchOrCreate " + key +
+                " because the cache is closed.");
+          }
-            LOG.debug("{}: retrying {}", this, e.getMessage());
+            if (LOG.isDebugEnabled()) {
+              LOG.debug(this + ": retrying " + e.getMessage());
+            }
-      LOG.trace("{}: found waitable for {}", this, key);
+      if (LOG.isTraceEnabled()) {
+        LOG.trace(this + ": found waitable for " + key);
+      }
-      LOG.trace("{}: loading {}", this, key);
+      if (LOG.isTraceEnabled()) {
+        LOG.trace(this + ": loading " + key);
+      }
-        LOG.trace("{}: successfully loaded {}", this, info.getReplica());
+        if (LOG.isTraceEnabled()) {
+          LOG.trace(this + ": successfully loaded " + info.getReplica());
+        }
-      LOG.debug("{}: starting cache cleaner thread which will run every {} ms",
-          this, rateMs);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug(this + ": starting cache cleaner thread which will run " +
+          "every " + rateMs + " ms");
+      }
-            LOG.trace("{}: can't create client mmap for {} because we failed to"
-                + " create one just {}ms ago.", this, replica, delta);
+            if (LOG.isTraceEnabled()) {
+              LOG.trace(this + ": can't create client mmap for " +
+                  replica + " because we failed to " +
+                  "create one just " + delta + "ms ago.");
+            }
-          LOG.trace("{}: retrying client mmap for {}, {} ms after the previous "
-              + "failure.", this, replica, delta);
+          if (LOG.isTraceEnabled()) {
+            LOG.trace(this + ": retrying client mmap for " + replica +
+                ", " + delta + " ms after the previous failure.");
+          }
-      LOG.debug("visiting {} with outstandingMmapCount={}, replicas={}, "
-          + "failedLoads={}, evictable={}, evictableMmapped={}",
-          visitor.getClass().getName(), outstandingMmapCount, replicas,
-          failedLoads, evictable, evictableMmapped);
+      if (LOG.isDebugEnabled()) {
+        StringBuilder builder = new StringBuilder();
+        builder.append("visiting ").append(visitor.getClass().getName()).
+            append("with outstandingMmapCount=").append(outstandingMmapCount).
+            append(", replicas=");
+        String prefix = "";
+        for (Entry<ExtendedBlockId, ShortCircuitReplica> entry : replicas.entrySet()) {
+          builder.append(prefix).append(entry.getValue());
+          prefix = ",";
+        }
+        prefix = "";
+        builder.append(", failedLoads=");
+        for (Entry<ExtendedBlockId, InvalidToken> entry : failedLoads.entrySet()) {
+          builder.append(prefix).append(entry.getValue());
+          prefix = ",";
+        }
+        prefix = "";
+        builder.append(", evictable=");
+        for (Entry<Long, ShortCircuitReplica> entry : evictable.entrySet()) {
+          builder.append(prefix).append(entry.getKey()).
+              append(":").append(entry.getValue());
+          prefix = ",";
+        }
+        prefix = "";
+        builder.append(", evictableMmapped=");
+        for (Entry<Long, ShortCircuitReplica> entry : evictableMmapped.entrySet()) {
+          builder.append(prefix).append(entry.getKey()).
+              append(":").append(entry.getValue());
+          prefix = ",";
+        }
+        LOG.debug(builder.toString());
+      }

INS25 INS8 INS8 INS32 INS8 INS25 MOV21 INS25 MOV21 INS25 INS25 INS25 INS25 INS42 INS42 MOV21 INS25 INS32 INS8 INS32 INS8 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS25 INS42 INS42 MOV21 INS42 INS42 MOV21 INS25 MOV21 INS42 INS42 MOV21 MOV42 UPD42 MOV42 INS60 INS21 INS60 INS70 INS21 INS21 INS70 INS21 INS21 INS70 INS21 INS21 INS70 INS21 INS42 INS42 MOV21 INS42 INS42 MOV21 INS27 INS42 INS42 MOV21 MOV27 INS8 INS8 INS32 MOV8 INS43 INS59 INS32 INS43 INS59 INS44 INS32 INS8 INS7 INS32 INS44 INS32 INS8 INS7 INS32 INS44 INS32 INS8 INS7 INS32 INS44 INS32 INS8 INS32 MOV52 INS45 INS42 MOV25 MOV21 INS25 MOV41 INS27 INS27 INS42 INS42 INS27 INS42 INS42 INS14 INS32 INS42 INS45 INS42 INS42 INS45 INS74 INS42 MOV42 INS42 INS21 INS21 INS42 INS45 INS42 INS42 INS45 INS74 INS42 MOV42 INS42 INS21 INS21 INS42 INS45 INS42 INS42 INS45 INS74 INS42 MOV42 INS42 INS21 INS21 INS42 INS45 INS42 INS42 INS45 INS74 INS42 MOV42 INS42 INS21 INS21 INS42 INS42 INS32 INS27 INS27 INS27 INS32 INS32 MOV8 INS52 INS45 INS42 INS52 INS45 INS42 INS52 INS45 INS45 INS42 INS45 INS25 INS25 INS43 INS32 INS42 MOV42 INS43 INS43 INS43 INS32 INS7 INS43 INS43 INS43 INS32 INS7 INS43 INS43 INS43 INS32 INS7 INS43 INS43 INS43 INS32 INS7 INS42 INS42 INS52 INS45 INS42 INS52 UPD45 MOV45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS52 INS45 INS42 INS42 INS42 INS42 INS42 INS27 MOV27 INS8 INS32 INS8 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS25 INS52 INS45 MOV32 MOV25 MOV41 INS42 INS42 MOV21 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS27 INS27 INS32 INS8 INS32 INS42 INS42 INS45 INS32 INS42 INS32 INS32 INS42 INS32 INS52 INS45 INS42 INS52 INS45 INS42 INS45 INS42 INS42 MOV21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 UPD45 MOV45 INS42 INS45 INS42 INS45 INS27 INS27 INS52 INS45 MOV32 INS52 UPD45 MOV45 INS42 INS45 INS45 INS42 INS45 DEL45 DEL52 DEL42 DEL45 DEL27 DEL52 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL52 DEL42 DEL45 DEL52 DEL42 DEL45 DEL52 DEL42 DEL45 DEL52 DEL45 DEL52 DEL42 DEL8 DEL45 DEL52 DEL42 DEL8 DEL45 DEL52 DEL45 DEL52 DEL42 DEL45 DEL27 DEL52 DEL42 DEL42 DEL45 DEL27 DEL52 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21