svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802 for merging HDFS Snapshot feature branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480838 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.DataInputStream;
+import java.io.DataInput;
+import java.io.DataOutput;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectoryWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotFSImageFormat;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.SnapshotFSImageFormat.ReferenceMap;
+import com.google.common.base.Preconditions;
+
+  private static void writePermissionStatus(INodeWithAdditionalFields inode,
+      DataOutput out) throws IOException {
+    final FsPermission p = TL_DATA.get().FILE_PERM;
+    p.fromShort(inode.getFsPermissionShort());
+    PermissionStatus.write(out, inode.getUserName(), inode.getGroupName(), p);
+  }
+
+  private static void writeBlocks(final Block[] blocks,
+      final DataOutput out) throws IOException {
+    if (blocks == null) {
+      out.writeInt(0);
+    } else {
+      out.writeInt(blocks.length);
+      for (Block blk : blocks) {
+        blk.write(out);
+      }
+    }
+  }
+
-      DataInputStream in, FSNamesystem fsNamesys, int imgVersion)
+      DataInput in, FSNamesystem fsNamesys, int imgVersion)
+  
-    out.writeShort(cons.getBlockReplication());
+    out.writeShort(cons.getFileReplication());
-    int nrBlocks = cons.getBlocks().length;
-    out.writeInt(nrBlocks);
-    for (int i = 0; i < nrBlocks; i++) {
-      cons.getBlocks()[i].write(out);
-    }
+
+    writeBlocks(cons.getBlocks(), out);
+
-  /*
+  /**
+   * Serialize a {@link INodeFile} node
+   * @param node The node to write
+   * @param out The {@link DataOutputStream} where the fields are written
+   * @param writeBlock Whether to write block information
+   */
+  public static void writeINodeFile(INodeFile file, DataOutput out,
+      boolean writeUnderConstruction) throws IOException {
+    writeLocalName(file, out);
+    out.writeLong(file.getId());
+    out.writeShort(file.getFileReplication());
+    out.writeLong(file.getModificationTime());
+    out.writeLong(file.getAccessTime());
+    out.writeLong(file.getPreferredBlockSize());
+
+    writeBlocks(file.getBlocks(), out);
+    SnapshotFSImageFormat.saveFileDiffList(file, out);
+
+    if (writeUnderConstruction) {
+      if (file instanceof INodeFileUnderConstruction) {
+        out.writeBoolean(true);
+        final INodeFileUnderConstruction uc = (INodeFileUnderConstruction)file;
+        writeString(uc.getClientName(), out);
+        writeString(uc.getClientMachine(), out);
+      } else {
+        out.writeBoolean(false);
+      }
+    }
+
+    writePermissionStatus(file, out);
+  }
+
+  /**
+   * Serialize a {@link INodeDirectory}
+   * @param node The node to write
+   * @param out The {@link DataOutput} where the fields are written 
+   */
+  public static void writeINodeDirectory(INodeDirectory node, DataOutput out)
+      throws IOException {
+    writeLocalName(node, out);
+    out.writeLong(node.getId());
+    out.writeShort(0);  // replication
+    out.writeLong(node.getModificationTime());
+    out.writeLong(0);   // access time
+    out.writeLong(0);   // preferred block size
+    out.writeInt(-1);   // # of blocks
+
+    out.writeLong(node.getNsQuota());
+    out.writeLong(node.getDsQuota());
+    if (node instanceof INodeDirectorySnapshottable) {
+      out.writeBoolean(true);
+    } else {
+      out.writeBoolean(false);
+      out.writeBoolean(node instanceof INodeDirectoryWithSnapshot);
+    }
+    
+    writePermissionStatus(node, out);
+  }
+  
+  /**
+   * Serialize a {@link INodeSymlink} node
+   * @param node The node to write
+   * @param out The {@link DataOutput} where the fields are written
+   */
+  private static void writeINodeSymlink(INodeSymlink node, DataOutput out)
+      throws IOException {
+    writeLocalName(node, out);
+    out.writeLong(node.getId());
+    out.writeShort(0);  // replication
+    out.writeLong(0);   // modification time
+    out.writeLong(0);   // access time
+    out.writeLong(0);   // preferred block size
+    out.writeInt(-2);   // # of blocks
+
+    Text.writeString(out, node.getSymlinkString());
+    writePermissionStatus(node, out);
+  }
+  
+  /** Serialize a {@link INodeReference} node */
+  private static void writeINodeReference(INodeReference ref, DataOutput out,
+      boolean writeUnderConstruction, ReferenceMap referenceMap
+      ) throws IOException {
+    writeLocalName(ref, out);
+    out.writeLong(ref.getId());
+    out.writeShort(0);  // replication
+    out.writeLong(0);   // modification time
+    out.writeLong(0);   // access time
+    out.writeLong(0);   // preferred block size
+    out.writeInt(-3);   // # of blocks
+
+    final boolean isWithName = ref instanceof INodeReference.WithName;
+    out.writeBoolean(isWithName);
+    
+    if (!isWithName) {
+      Preconditions.checkState(ref instanceof INodeReference.DstReference);
+      // dst snapshot id
+      out.writeInt(((INodeReference.DstReference) ref).getDstSnapshotId());
+    } else {
+      out.writeInt(((INodeReference.WithName) ref).getLastSnapshotId());
+    }
+    
+    final INodeReference.WithCount withCount
+        = (INodeReference.WithCount)ref.getReferredINode();
+    referenceMap.writeINodeReferenceWithCount(withCount, out,
+        writeUnderConstruction);
+  }
+
+  /**
-  static void saveINode2Image(INode node,
-                              DataOutputStream out) throws IOException {
-    byte[] name = node.getLocalNameBytes();
-    out.writeShort(name.length);
-    out.write(name);
-    out.writeLong(node.getId());
-    FsPermission filePerm = TL_DATA.get().FILE_PERM;
-    if (node.isDirectory()) {
-      out.writeShort(0);  // replication
-      out.writeLong(node.getModificationTime());
-      out.writeLong(0);   // access time
-      out.writeLong(0);   // preferred block size
-      out.writeInt(-1);   // # of blocks
-      out.writeLong(node.getNsQuota());
-      out.writeLong(node.getDsQuota());
-      filePerm.fromShort(node.getFsPermissionShort());
-      PermissionStatus.write(out, node.getUserName(),
-                             node.getGroupName(),
-                             filePerm);
+  public static void saveINode2Image(INode node, DataOutput out,
+      boolean writeUnderConstruction, ReferenceMap referenceMap)
+      throws IOException {
+    if (node.isReference()) {
+      writeINodeReference(node.asReference(), out, writeUnderConstruction,
+          referenceMap);
+    } else if (node.isDirectory()) {
+      writeINodeDirectory(node.asDirectory(), out);
-      out.writeShort(0);  // replication
-      out.writeLong(0);   // modification time
-      out.writeLong(0);   // access time
-      out.writeLong(0);   // preferred block size
-      out.writeInt(-2);   // # of blocks
-      Text.writeString(out, ((INodeSymlink)node).getSymlinkString());
-      filePerm.fromShort(node.getFsPermissionShort());
-      PermissionStatus.write(out, node.getUserName(),
-                             node.getGroupName(),
-                             filePerm);      
-    } else {
-      INodeFile fileINode = (INodeFile)node;
-      out.writeShort(fileINode.getBlockReplication());
-      out.writeLong(fileINode.getModificationTime());
-      out.writeLong(fileINode.getAccessTime());
-      out.writeLong(fileINode.getPreferredBlockSize());
-      Block[] blocks = fileINode.getBlocks();
-      out.writeInt(blocks.length);
-      for (Block blk : blocks)
-        blk.write(out);
-      filePerm.fromShort(fileINode.getFsPermissionShort());
-      PermissionStatus.write(out, fileINode.getUserName(),
-                             fileINode.getGroupName(),
-                             filePerm);
+      writeINodeSymlink(node.asSymlink(), out);      
+    } else if (node.isFile()) {
+      writeINodeFile(node.asFile(), out, writeUnderConstruction);
-  public static String readString(DataInputStream in) throws IOException {
+  public static String readString(DataInput in) throws IOException {
-  static String readString_EmptyAsNull(DataInputStream in) throws IOException {
+  static String readString_EmptyAsNull(DataInput in) throws IOException {
-  static void writeString(String str, DataOutputStream out) throws IOException {
+  public static void writeString(String str, DataOutput out) throws IOException {
-  static long readLong(DataInputStream in) throws IOException {
+  static long readLong(DataInput in) throws IOException {
-  static short readShort(DataInputStream in) throws IOException {
+  static short readShort(DataInput in) throws IOException {
-  public static byte[] readBytes(DataInputStream in) throws IOException {
+  public static byte[] readBytes(DataInput in) throws IOException {
-  public static byte[][] readPathComponents(DataInputStream in)
+  public static byte[][] readPathComponents(DataInput in)
+  
+  public static byte[] readLocalName(DataInput in) throws IOException {
+    byte[] createdNodeName = new byte[in.readShort()];
+    in.readFully(createdNodeName);
+    return createdNodeName;
+  }
+  private static void writeLocalName(INode inode, DataOutput out)
+      throws IOException {
+    final byte[] name = inode.getLocalNameBytes();
+    out.writeShort(name.length);
+    out.write(name);
+  }
-      DataInputStream in, int logVersion) throws IOException {
+      DataInput in, int logVersion) throws IOException {
-}
+}

INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 MOV83 MOV39 INS42 INS44 MOV44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 MOV43 MOV8 MOV21 MOV21 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 MOV8 MOV21 MOV21 MOV21 MOV21 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS42 UPD43 INS42 MOV60 INS21 INS21 INS83 MOV5 INS42 INS83 INS43 INS42 UPD42 MOV42 INS25 UPD43 MOV21 INS65 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 MOV21 MOV21 MOV21 MOV21 INS21 MOV21 INS25 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 MOV21 INS25 INS21 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 INS42 INS21 INS21 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS25 INS60 INS21 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS25 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS39 INS85 INS43 INS42 INS42 INS60 INS21 INS41 INS43 INS42 INS43 INS42 INS42 INS60 MOV21 MOV21 UPD43 INS42 UPD42 INS83 INS32 INS32 INS42 INS27 INS8 INS8 UPD42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS32 INS32 INS32 INS42 INS8 INS32 INS66 INS65 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS42 INS62 INS8 INS8 INS32 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS32 INS32 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS83 INS39 INS59 INS32 INS38 INS8 INS8 INS83 INS43 INS59 INS32 INS66 INS42 INS42 INS32 INS8 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 MOV5 INS59 INS32 INS42 INS42 INS42 INS83 INS5 INS59 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS33 INS21 MOV21 MOV70 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS25 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS21 INS21 INS21 INS42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV32 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS34 INS42 UPD42 MOV42 INS38 INS42 INS62 MOV42 INS42 INS42 INS42 INS21 INS21 INS21 INS40 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 MOV32 INS8 INS25 INS42 INS3 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS8 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 INS62 INS8 INS8 INS42 INS32 INS32 INS32 UPD42 UPD42 INS42 INS42 INS34 INS42 INS43 INS32 INS32 INS32 INS43 INS32 INS32 INS21 MOV32 INS8 INS25 INS5 INS32 INS42 INS42 INS42 INS42 INS34 MOV21 INS42 INS43 INS21 INS60 INS21 INS21 INS21 INS42 UPD42 MOV42 INS9 MOV42 INS42 INS9 INS42 INS42 INS62 INS40 INS42 INS42 INS62 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS21 INS32 INS8 INS39 INS85 INS42 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS32 INS32 INS42 INS43 INS42 INS43 INS36 INS42 INS36 INS42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS21 INS42 INS42 INS9 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS40 INS11 INS11 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS40 INS40 UPD42 MOV42 INS42 DEL42 DEL2 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL8 DEL24 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL11 DEL36 DEL32 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL32 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31