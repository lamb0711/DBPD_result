HDFS-9023. When NN is not able to identify DN for replication, reason behind it can be logged.

+  private static final ThreadLocal<HashMap<NodeNotChosenReason, Integer>>
+      CHOOSE_RANDOM_REASONS = ThreadLocal
+      .withInitial(() -> new HashMap<NodeNotChosenReason, Integer>());
+
+  private enum NodeNotChosenReason {
+    NOT_IN_SERVICE("the node isn't in service"),
+    NODE_STALE("the node is stale"),
+    NODE_TOO_BUSY("the node is too busy"),
+    TOO_MANY_NODES_ON_RACK("the rack has too many chosen nodes"),
+    NOT_ENOUGH_STORAGE_SPACE("no enough storage space to place the block");
+
+    private final String text;
+
+    NodeNotChosenReason(final String logText) {
+      text = logText;
+    }
+
+    private String getText() {
+      return text;
+    }
+  }
+
+    CHOOSE_RANDOM_REASONS.get().clear();
-      if (LOG.isDebugEnabled()) {
-        if (badTarget && builder != null) {
-          detail = builder.toString();
+      if (LOG.isDebugEnabled() && builder != null) {
+        detail = builder.toString();
+        if (badTarget) {
+          if (detail.length() > 1) {
+            // only log if there's more than "[", which is always appended at
+            // the beginning of this method.
+            LOG.debug(detail);
+          }
+      final HashMap<NodeNotChosenReason, Integer> reasonMap =
+          CHOOSE_RANDOM_REASONS.get();
+      if (!reasonMap.isEmpty()) {
+        LOG.info("Not enough replicas was chosen. Reason:{}", reasonMap);
+      }
-      logNodeIsNotChosen(dnd, "no good storage to place the block ");
+      logNodeIsNotChosen(dnd, NodeNotChosenReason.NOT_ENOUGH_STORAGE_SPACE,
+          " for storage type " + storageType);
-      String reason) {
+      NodeNotChosenReason reason) {
+    logNodeIsNotChosen(node, reason, null);
+  }
+
+  private static void logNodeIsNotChosen(DatanodeDescriptor node,
+      NodeNotChosenReason reason, String reasonDetails) {
+    assert reason != null;
-          .append(" is not chosen since ").append(reason).append(".");
+          .append(" is not chosen since ").append(reason.getText());
+      if (reasonDetails != null) {
+        debugLoggingBuilder.get().append(" ").append(reasonDetails);
+      }
+      debugLoggingBuilder.get().append(".");
+    // always populate reason map to log high level reasons.
+    final HashMap<NodeNotChosenReason, Integer> reasonMap =
+        CHOOSE_RANDOM_REASONS.get();
+    Integer base = reasonMap.get(reason);
+    if (base == null) {
+      base = 0;
+    }
+    reasonMap.put(reason, base + 1);
-      logNodeIsNotChosen(node, "the node isn't in service.");
+      logNodeIsNotChosen(node, NodeNotChosenReason.NOT_IN_SERVICE);
-        logNodeIsNotChosen(node, "the node is stale ");
+        logNodeIsNotChosen(node, NodeNotChosenReason.NODE_STALE);
-        logNodeIsNotChosen(node, "the node is too busy (load: " + nodeLoad
-            + " > " + maxLoad + ") ");
+        logNodeIsNotChosen(node, NodeNotChosenReason.NODE_TOO_BUSY,
+            "(load: " + nodeLoad + " > " + maxLoad + ")");
-      logNodeIsNotChosen(node, "the rack has too many chosen nodes ");
+      logNodeIsNotChosen(node, NodeNotChosenReason.TOO_MANY_NODES_ON_RACK);

INS23 INS71 INS31 INS83 INS83 INS83 INS74 INS59 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS23 INS31 INS31 INS44 INS44 INS83 INS83 INS39 INS42 MOV44 INS44 MOV44 INS8 INS43 INS74 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS21 MOV25 INS43 INS42 INS43 INS42 INS21 INS43 INS42 UPD42 INS6 MOV25 INS60 INS60 INS25 INS21 INS42 INS43 INS43 INS43 INS42 INS42 INS86 INS42 INS42 INS83 INS43 INS42 INS21 INS42 INS41 INS32 MOV27 INS8 INS42 INS42 INS32 INS42 INS27 INS83 INS74 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS14 INS42 INS7 INS42 INS32 INS42 MOV60 MOV25 INS60 INS25 MOV53 INS42 INS42 INS42 INS33 INS42 INS33 INS25 INS21 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS27 MOV41 MOV41 INS74 INS42 INS42 INS42 INS42 INS8 INS83 INS74 INS59 INS38 MOV8 MOV32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS34 INS43 INS43 INS43 MOV32 MOV21 INS25 INS43 INS43 INS43 INS42 INS32 INS32 INS21 INS40 INS27 INS32 INS42 INS33 INS21 INS32 INS42 INS45 INS42 INS34 INS40 MOV41 MOV41 INS40 INS42 INS42 INS42 INS42 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 MOV42 INS42 INS32 INS42 INS42 INS25 MOV21 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS40 INS40 INS27 MOV8 INS32 INS42 INS45 UPD45 UPD45 INS32 INS34 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL8 DEL25 DEL45 DEL42 DEL45 DEL32 DEL45 DEL45 DEL45