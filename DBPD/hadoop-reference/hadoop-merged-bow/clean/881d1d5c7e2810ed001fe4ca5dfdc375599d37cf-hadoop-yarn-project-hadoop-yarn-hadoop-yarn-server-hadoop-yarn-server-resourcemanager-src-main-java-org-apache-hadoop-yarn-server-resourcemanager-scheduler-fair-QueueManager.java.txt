Reverting "YARN-1258: Move to 2.2.1 in CHANGES.txt" because it contained unintended changes

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1534308 13f79535-47bb-0310-9956-ffa450edef68

-  
-  private static final AccessControlList EVERYBODY_ACL = new AccessControlList("*");
-  private static final AccessControlList NOBODY_ACL = new AccessControlList(" ");
+      
+      // Root queue should have empty ACLs.  As a queue's ACL is the union of
+      // its ACL and all its parents' ACLs, setting the roots' to empty will
+      // neither allow nor prohibit more access to its children.
+      Map<QueueACL, AccessControlList> rootAcls =
+          new HashMap<QueueACL, AccessControlList>();
+      rootAcls.put(QueueACL.SUBMIT_APPLICATIONS, new AccessControlList(" "));
+      rootAcls.put(QueueACL.ADMINISTER_QUEUE, new AccessControlList(" "));
+      queueAcls.put(ROOT_QUEUE, rootAcls);
-        String text = ((Text)field.getFirstChild()).getData();
+        String text = ((Text)field.getFirstChild()).getData().trim();
-        String text = ((Text)field.getFirstChild()).getData();
+        String text = ((Text)field.getFirstChild()).getData().trim();
-   * configured, include the default value for that ACL.  The default for the
-   * root queue is everybody ("*") and the default for all other queues is
-   * nobody ("")
+   * configured, include the default value for that ACL.
-  public AccessControlList getQueueAcl(String queue, QueueACL operation) {
-    Map<QueueACL, AccessControlList> queueAcls = info.queueAcls.get(queue);
-    if (queueAcls == null || !queueAcls.containsKey(operation)) {
-      return (queue.equals(ROOT_QUEUE)) ? EVERYBODY_ACL : NOBODY_ACL;
+  public Map<QueueACL, AccessControlList> getQueueAcls(String queue) {
+    HashMap<QueueACL, AccessControlList> out = new HashMap<QueueACL, AccessControlList>();
+    Map<QueueACL, AccessControlList> queueAcl = info.queueAcls.get(queue);
+    if (queueAcl != null) {
+      out.putAll(queueAcl);
-    return queueAcls.get(operation);
+    if (!out.containsKey(QueueACL.ADMINISTER_QUEUE)) {
+      out.put(QueueACL.ADMINISTER_QUEUE, new AccessControlList("*"));
+    }
+    if (!out.containsKey(QueueACL.SUBMIT_APPLICATIONS)) {
+      out.put(QueueACL.SUBMIT_APPLICATIONS, new AccessControlList("*"));
+    }
+    return out;

INS74 INS42 INS43 INS43 INS43 INS60 INS25 INS25 INS25 INS41 UPD66 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS38 INS8 INS38 INS8 INS42 INS60 INS21 INS21 INS21 MOV25 INS43 MOV43 MOV43 INS42 INS14 UPD42 UPD42 MOV42 MOV33 INS21 MOV32 INS21 INS32 INS21 INS74 INS59 INS32 INS32 INS32 MOV32 MOV8 INS42 INS74 INS32 UPD42 INS40 INS32 INS42 INS42 INS40 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS40 MOV14 INS42 INS42 INS40 INS14 INS42 INS42 INS42 INS42 MOV32 MOV8 INS43 INS43 MOV43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 MOV14 UPD42 MOV42 UPD42 MOV42 INS40 INS14 INS42 INS42 INS42 INS74 INS43 INS45 MOV32 MOV8 INS42 INS42 INS43 INS45 INS43 INS43 MOV43 INS42 MOV32 MOV8 INS42 INS42 INS42 MOV32 MOV8 MOV27 MOV8 MOV32 INS25 MOV21 MOV32 MOV8 MOV25 MOV21 INS32 MOV32 INS42 INS32 MOV32 INS42 DEL83 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL59 DEL23 DEL25 DEL66 DEL66 DEL42 DEL42 DEL44 DEL42 DEL27 DEL38 DEL27 DEL42 DEL32 DEL36 DEL42 DEL42 DEL16 DEL41 DEL8 DEL25 DEL42 DEL32 DEL41