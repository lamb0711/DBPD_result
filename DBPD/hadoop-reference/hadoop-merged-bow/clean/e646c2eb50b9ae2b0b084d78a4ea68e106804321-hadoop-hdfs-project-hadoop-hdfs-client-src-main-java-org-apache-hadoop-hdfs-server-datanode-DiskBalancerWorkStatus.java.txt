HDFS-9681. DiskBalancer: Add QueryPlan implementation. (Contributed by Anu Engineer)

+
+import com.google.common.base.Preconditions;
+import org.codehaus.jackson.map.ObjectMapper;
+
+import static org.codehaus.jackson.map.type.TypeFactory.defaultInstance;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.LinkedList;
-  private final int result;
-  private final String planID;
-  private final String status;
-  private final String currentState;
+
+  private final List<DiskBalancerWorkEntry> currentState;
+  private Result result;
+  private String planID;
+
+  /**
+   * Constructs a default workStatus Object.
+   */
+  public DiskBalancerWorkStatus() {
+    this.currentState = new LinkedList<>();
+  }
+
+  /**
+   * Constructs a workStatus Object.
+   *
+   * @param result - int
+   * @param planID - Plan ID
+   */
+  public DiskBalancerWorkStatus(Result result, String planID) {
+    this();
+    this.result = result;
+    this.planID = planID;
+  }
-   * @param status       - Current Status
-  public DiskBalancerWorkStatus(int result, String planID, String status,
-                                String currentState) {
+  public DiskBalancerWorkStatus(Result result, String planID,
+                                List<DiskBalancerWorkEntry> currentState) {
-    this.status = status;
+
+  /**
+   * Constructs a workStatus Object.
+   *
+   * @param result       - int
+   * @param planID       - Plan ID
+   * @param currentState - List of WorkEntries.
+   */
+  public DiskBalancerWorkStatus(Result result, String planID,
+                                String currentState) throws IOException {
+    this.result = result;
+    this.planID = planID;
+    ObjectMapper mapper = new ObjectMapper();
+    this.currentState = mapper.readValue(currentState,
+        defaultInstance().constructCollectionType(
+            List.class, DiskBalancerWorkEntry.class));
+  }
+
+
-  public int getResult() {
+  public Result getResult() {
-   * Returns Status.
-   *
-   * @return String
-   */
-  public String getStatus() {
-    return status;
-  }
-
-  /**
-  public String getCurrentState() {
+  public List<DiskBalancerWorkEntry> getCurrentState() {
+
+  /**
+   * Return current state as a string.
+   *
+   * @throws IOException
+   **/
+  public String getCurrentStateString() throws IOException {
+    ObjectMapper mapper = new ObjectMapper();
+    return mapper.writeValueAsString(currentState);
+  }
+
+
+  /**
+   * Adds a new work entry to the list.
+   *
+   * @param entry - DiskBalancerWorkEntry
+   */
+
+  public void addWorkEntry(DiskBalancerWorkEntry entry) {
+    Preconditions.checkNotNull(entry);
+    currentState.add(entry);
+  }
+
+  /** Various result values. **/
+  public enum Result {
+    NO_PLAN(0),
+    PLAN_UNDER_PROGRESS(1),
+    PLAN_DONE(2),
+    PLAN_CANCELLED(3);
+    private int result;
+
+    private Result(int result) {
+      this.result = result;
+    }
+
+    /**
+     * Get int value of result.
+     *
+     * @return int
+     */
+    public int getIntResult() {
+      return result;
+    }
+  }
+
+  /**
+   * A class that is used to report each work item that we are working on. This
+   * class describes the Source, Destination and how much data has been already
+   * moved, errors encountered etc. This is useful for the disk balancer stats
+   * as well as the queryStatus RPC.
+   */
+  public static class DiskBalancerWorkEntry {
+    private String sourcePath;
+    private String destPath;
+    private DiskBalancerWorkItem workItem;
+
+    /**
+     * Constructs a Work Entry class.
+     *
+     * @param sourcePath - Source Path where we are moving data from.
+     * @param destPath   - Destination path to where we are moving data to.
+     * @param workItem   - Current work status of this move.
+     */
+    public DiskBalancerWorkEntry(String sourcePath, String destPath,
+                                 DiskBalancerWorkItem workItem) {
+      this.sourcePath = sourcePath;
+      this.destPath = destPath;
+      this.workItem = workItem;
+    }
+
+    /**
+     * Returns the source path.
+     *
+     * @return - Source path
+     */
+    public String getSourcePath() {
+      return sourcePath;
+    }
+
+    /**
+     * Sets the Source Path.
+     *
+     * @param sourcePath - Volume Path.
+     */
+    public void setSourcePath(String sourcePath) {
+      this.sourcePath = sourcePath;
+    }
+
+    /**
+     * Gets the Destination path.
+     *
+     * @return - Path
+     */
+    public String getDestPath() {
+      return destPath;
+    }
+
+    /**
+     * Sets the destination path.
+     *
+     * @param destPath - Path
+     */
+    public void setDestPath(String destPath) {
+      this.destPath = destPath;
+    }
+
+    /**
+     * Gets the current status of work for these volumes.
+     *
+     * @return - Work Item
+     */
+    public DiskBalancerWorkItem getWorkItem() {
+      return workItem;
+    }
+
+    /**
+     * Sets the work item.
+     *
+     * @param workItem - sets the work item information
+     */
+    public void setWorkItem(DiskBalancerWorkItem workItem) {
+      this.workItem = workItem;
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS71 INS55 MOV83 MOV83 INS74 MOV59 INS83 INS43 MOV59 INS29 INS83 INS42 INS8 INS29 INS83 INS42 INS44 INS44 INS8 INS44 INS44 INS29 INS83 INS42 INS44 INS44 MOV44 INS43 INS8 INS43 INS74 INS29 INS83 MOV43 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS42 INS72 INS72 INS72 INS72 INS23 INS31 INS31 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS31 MOV31 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS42 INS65 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS17 INS21 INS21 INS43 INS42 INS74 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS60 INS21 INS42 INS43 INS43 INS65 INS65 INS42 INS60 INS41 INS65 INS65 INS43 INS42 INS21 INS21 INS65 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS83 MOV39 INS59 INS83 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS83 MOV43 MOV59 MOV83 INS43 INS59 UPD83 MOV83 INS43 INS59 INS29 INS83 INS42 MOV44 INS44 INS44 INS8 UPD42 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 MOV43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS66 INS7 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS7 INS42 INS43 INS43 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS7 INS43 INS59 INS7 INS42 INS42 INS66 INS42 INS43 INS59 INS32 INS66 INS42 INS66 INS42 INS32 INS32 INS66 INS42 INS21 INS65 INS65 INS41 INS66 INS66 INS66 INS66 UPD42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 UPD42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS41 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS42 INS41 INS65 INS65 INS43 INS42 INS21 INS22 INS14 INS22 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS14 INS22 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS7 INS7 UPD66 UPD66 UPD42 INS66 INS42 INS66 INS42 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS52 INS42 INS74 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS52 INS42 INS42 INS42 INS42 INS32 INS43 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS43 INS42 INS32 INS42 INS57 INS57 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS43 INS42 INS42 DEL23 DEL83 DEL83 DEL83 DEL23 DEL23 DEL42 DEL66 DEL65 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39