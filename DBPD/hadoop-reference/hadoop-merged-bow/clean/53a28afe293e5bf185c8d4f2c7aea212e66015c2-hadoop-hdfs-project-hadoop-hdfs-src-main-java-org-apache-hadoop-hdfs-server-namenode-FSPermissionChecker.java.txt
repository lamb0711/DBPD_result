HDFS-6826. Plugin interface to enable delegation of HDFS authorization assertions. Contributed by Arun Suresh.

-import java.util.List;
+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.hdfs.server.namenode.INodeAttributeProvider.AccessControlEnforcer;
-class FSPermissionChecker {
+class FSPermissionChecker implements AccessControlEnforcer {
-  private String toAccessControlString(INode inode, int snapshotId,
+  private String toAccessControlString(INodeAttributes inodeAttrib, String path,
-    return toAccessControlString(inode, snapshotId, access, mode, false);
+    return toAccessControlString(inodeAttrib, path, access, mode, false);
-  private String toAccessControlString(INode inode, int snapshotId, FsAction access,
-      FsPermission mode, boolean deniedFromAcl) {
+  private String toAccessControlString(INodeAttributes inodeAttrib,
+      String path, FsAction access, FsPermission mode, boolean deniedFromAcl) {
-      .append("user=").append(user).append(", ")
+      .append("user=").append(getUser()).append(", ")
-      .append("inode=\"").append(inode.getFullPathName()).append("\":")
-      .append(inode.getUserName(snapshotId)).append(':')
-      .append(inode.getGroupName(snapshotId)).append(':')
-      .append(inode.isDirectory() ? 'd' : '-')
+      .append("inode=\"").append(path).append("\":")
+      .append(inodeAttrib.getUserName()).append(':')
+      .append(inodeAttrib.getGroupName()).append(':')
+      .append(inodeAttrib.isDirectory() ? 'd' : '-')
+  private final String fsOwner;
+  private final String supergroup;
+  private final UserGroupInformation callerUgi;
+
-  /** A set with group namess. Not synchronized since it is unmodifiable */
+  private final INodeAttributeProvider attributeProvider;
+
-      UserGroupInformation callerUgi) {
-    HashSet<String> s = new HashSet<String>(Arrays.asList(callerUgi.getGroupNames()));
+      UserGroupInformation callerUgi,
+      INodeAttributeProvider attributeProvider) {
+    this.fsOwner = fsOwner;
+    this.supergroup = supergroup;
+    this.callerUgi = callerUgi;
+    HashSet<String> s =
+        new HashSet<String>(Arrays.asList(callerUgi.getGroupNames()));
+    this.attributeProvider = attributeProvider;
-  /**
-   * Check if the callers group contains the required values.
-   * @param group group to check
-   */
-  public boolean containsGroup(String group) {return groups.contains(group);}
+  public boolean containsGroup(String group) {
+    return groups.contains(group);
+  }
-  
+
+  public Set<String> getGroups() {
+    return groups;
+  }
+
-  
+
+  public INodeAttributeProvider getAttributesProvider() {
+    return attributeProvider;
+  }
+
-    if (!isSuper) {
+    if (!isSuperUser()) {
-          + user + ". Superuser privilege is required");
+          + getUser() + ". Superuser privilege is required");
-    final int length = inodesInPath.length();
-    final INode last = length > 0 ? inodesInPath.getLastINode() : null;
-    final INode parent = length > 1 ? inodesInPath.getINode(-2) : null;
+    final INode[] inodes = inodesInPath.getINodesArray();
+    final INodeAttributes[] inodeAttrs = new INodeAttributes[inodes.length];
+    final byte[][] pathByNameArr = new byte[inodes.length][];
+    for (int i = 0; i < inodes.length && inodes[i] != null; i++) {
+      if (inodes[i] != null) {
+        pathByNameArr[i] = inodes[i].getLocalNameBytes();
+        inodeAttrs[i] = getINodeAttrs(pathByNameArr, i, inodes[i], snapshotId);
+      }
+    }
-    checkTraverse(inodesInPath, snapshotId);
+    String path = inodesInPath.getPath();
+    int ancestorIndex = inodes.length - 2;
+    AccessControlEnforcer enforcer =
+        getAttributesProvider().getExternalAccessControlEnforcer(this);
+    enforcer.checkPermission(fsOwner, supergroup, callerUgi, inodeAttrs, inodes,
+        pathByNameArr, snapshotId, path, ancestorIndex, doCheckOwner,
+        ancestorAccess, parentAccess, access, subAccess, ignoreEmptyDir);
+  }
+
+  @Override
+  public void checkPermission(String fsOwner, String supergroup,
+      UserGroupInformation callerUgi, INodeAttributes[] inodeAttrs,
+      INode[] inodes, byte[][] pathByNameArr, int snapshotId, String path,
+      int ancestorIndex, boolean doCheckOwner, FsAction ancestorAccess,
+      FsAction parentAccess, FsAction access, FsAction subAccess,
+      boolean ignoreEmptyDir)
+      throws AccessControlException {
+    for(; ancestorIndex >= 0 && inodes[ancestorIndex] == null;
+        ancestorIndex--);
+    checkTraverse(inodeAttrs, path, ancestorIndex);
+
+    final INodeAttributes last = inodeAttrs[inodeAttrs.length - 1];
-        && length > 1 && last != null) {
-      checkStickyBit(parent, last, snapshotId);
+        && inodeAttrs.length > 1 && last != null) {
+      checkStickyBit(inodeAttrs[inodeAttrs.length - 2], last);
-    if (ancestorAccess != null && length > 1) {
-      List<INode> inodes = inodesInPath.getReadOnlyINodes();
-      INode ancestor = null;
-      for (int i = inodes.size() - 2; i >= 0 && (ancestor = inodes.get(i)) ==
-          null; i--);
-      check(ancestor, snapshotId, ancestorAccess);
+    if (ancestorAccess != null && inodeAttrs.length > 1) {
+      check(inodeAttrs, path, ancestorIndex, ancestorAccess);
-    if (parentAccess != null && length > 1 && parent != null) {
-      check(parent, snapshotId, parentAccess);
+    if (parentAccess != null && inodeAttrs.length > 1) {
+      check(inodeAttrs, path, inodeAttrs.length - 2, parentAccess);
-      check(last, snapshotId, access);
+      check(last, path, access);
-      checkSubAccess(last, snapshotId, subAccess, ignoreEmptyDir);
+      INode rawLast = inodes[inodeAttrs.length - 1];
+      checkSubAccess(pathByNameArr, inodeAttrs.length - 1, rawLast,
+          snapshotId, subAccess, ignoreEmptyDir);
-      checkOwner(last, snapshotId);
+      checkOwner(last);
+  private INodeAttributes getINodeAttrs(byte[][] pathByNameArr, int pathIdx,
+      INode inode, int snapshotId) {
+    INodeAttributes inodeAttrs = inode.getSnapshotINode(snapshotId);
+    if (getAttributesProvider() != null) {
+      String[] elements = new String[pathIdx + 1];
+      for (int i = 0; i < elements.length; i++) {
+        elements[i] = DFSUtil.bytes2String(pathByNameArr[i]);
+      }
+      inodeAttrs = getAttributesProvider().getAttributes(elements, inodeAttrs);
+    }
+    return inodeAttrs;
+  }
+
-  private void checkOwner(INode inode, int snapshotId
+  private void checkOwner(INodeAttributes inode
-    if (inode != null && user.equals(inode.getUserName(snapshotId))) {
+    if (getUser().equals(inode.getUserName())) {
-            + user + " is not the owner of inode=" + inode);
+            + getUser() + " is not the owner of inode=" + inode);
-  private void checkTraverse(INodesInPath iip, int snapshotId)
-      throws AccessControlException {
-    List<INode> inodes = iip.getReadOnlyINodes();
-    for (int i = 0; i < inodes.size() - 1; i++) {
-      INode inode = inodes.get(i);
-      if (inode == null) {
-        break;
-      }
-      check(inode, snapshotId, FsAction.EXECUTE);
+  private void checkTraverse(INodeAttributes[] inodes, String path, int last
+      ) throws AccessControlException {
+    for(int j = 0; j <= last; j++) {
+      check(inodes[j], path, FsAction.EXECUTE);
-  private void checkSubAccess(INode inode, int snapshotId, FsAction access,
-      boolean ignoreEmptyDir) throws AccessControlException {
+  private void checkSubAccess(byte[][] pathByNameArr, int pathIdx, INode inode,
+      int snapshotId, FsAction access, boolean ignoreEmptyDir)
+      throws AccessControlException {
-        check(d, snapshotId, access);
+        //TODO have to figure this out with inodeattribute provider
+        check(getINodeAttrs(pathByNameArr, pathIdx, d, snapshotId),
+            inode.getFullPathName(), access);
-  private void check(INode inode, int snapshotId, FsAction access)
-      throws AccessControlException {
+  private void check(INodeAttributes[] inodes, String path, int i, FsAction access
+      ) throws AccessControlException {
+    check(i >= 0 ? inodes[i] : null, path, access);
+  }
+
+  private void check(INodeAttributes inode, String path, FsAction access
+      ) throws AccessControlException {
-    FsPermission mode = inode.getFsPermission(snapshotId);
-    AclFeature aclFeature = inode.getAclFeature(snapshotId);
+    final FsPermission mode = inode.getFsPermission();
+    final AclFeature aclFeature = inode.getAclFeature();
-        checkAccessAcl(inode, snapshotId, access, mode, aclFeature);
+        checkAccessAcl(inode, path, access, mode, aclFeature);
-    checkFsPermission(inode, snapshotId, access, mode);
-  }
-
-  private void checkFsPermission(INode inode, int snapshotId, FsAction access,
-      FsPermission mode) throws AccessControlException {
-    if (user.equals(inode.getUserName(snapshotId))) { //user class
+    if (getUser().equals(inode.getUserName())) { //user class
-    else if (groups.contains(inode.getGroupName(snapshotId))) { //group class
+    else if (getGroups().contains(inode.getGroupName())) { //group class
-      toAccessControlString(inode, snapshotId, access, mode));
+        toAccessControlString(inode, path, access, mode));
-   * @param inode INode accessed inode
+   * @param inode INodeAttributes accessed inode
-  private void checkAccessAcl(INode inode, int snapshotId, FsAction access,
-      FsPermission mode, AclFeature aclFeature)
+  private void checkAccessAcl(INodeAttributes inode, String path,
+      FsAction access, FsPermission mode, AclFeature aclFeature)
-    if (user.equals(inode.getUserName(snapshotId))) {
+    if (getUser().equals(inode.getUserName())) {
-          if (user.equals(name)) {
+          if (getUser().equals(name)) {
-          String group = name == null ? inode.getGroupName(snapshotId) : name;
-          if (groups.contains(group)) {
+          String group = name == null ? inode.getGroupName() : name;
+          if (getGroups().contains(group)) {
-      toAccessControlString(inode, snapshotId, access, mode, true));
+        toAccessControlString(inode, path, access, mode));
-  private void checkStickyBit(INode parent, INode inode, int snapshotId
+  private void checkStickyBit(INodeAttributes parent, INodeAttributes inode
-    if(!parent.getFsPermission(snapshotId).getStickyBit()) {
+    if (!parent.getFsPermission().getStickyBit()) {
-    if(parent.getUserName(snapshotId).equals(user)) {
+    if (parent.getUserName().equals(getUser())) {
-    if(inode.getUserName(snapshotId).equals(user)) {
+    if (inode.getUserName().equals(getUser())) {
-      " user=" + user + ", inode=" + inode);
+      " user=" + getUser() + ", inode=" + inode);
-    if (user.equals(pool.getOwnerName())
+    if (getUser().equals(pool.getOwnerName())
-    if (groups.contains(pool.getGroupName())
+    if (getGroups().contains(pool.getGroupName())
-        + pool.getPoolName() + ": user " + user + " does not have "
+        + pool.getPoolName() + ": user " + getUser() + " does not have "

MOV26 INS26 MOV31 UPD40 INS40 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS8 MOV29 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 MOV44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 MOV83 INS43 INS42 INS44 INS44 MOV44 MOV44 INS8 MOV29 INS83 INS39 INS42 INS44 MOV43 INS8 INS44 INS44 MOV43 INS8 INS44 INS44 MOV29 UPD42 MOV44 MOV43 INS44 MOV43 INS44 UPD43 UPD42 INS43 INS42 UPD43 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS43 INS43 INS41 INS42 INS41 MOV25 MOV60 MOV60 MOV60 INS60 INS24 MOV60 MOV60 INS60 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS24 INS21 INS60 MOV25 INS25 MOV25 MOV25 MOV25 MOV25 INS42 INS5 INS42 INS39 INS42 INS60 INS25 INS41 INS43 INS42 INS25 MOV53 INS5 UPD42 INS43 INS42 INS39 INS42 MOV24 INS5 INS42 INS39 INS42 INS5 UPD42 UPD43 UPD42 INS39 INS42 INS21 UPD43 INS43 INS42 INS43 INS42 INS25 INS53 UPD43 INS43 INS42 INS43 INS43 INS42 UPD42 INS42 UPD42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS5 INS5 MOV83 INS5 INS59 MOV58 INS27 MOV37 INS8 INS43 INS39 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS85 MOV43 INS85 INS39 INS85 INS85 INS42 INS42 INS42 INS42 INS42 MOV27 MOV37 MOV20 INS32 INS83 INS43 INS59 MOV27 INS8 MOV27 INS39 INS85 INS85 INS43 INS59 INS27 INS8 INS42 INS42 INS32 MOV8 INS43 INS85 UPD42 MOV42 INS58 INS27 INS37 INS8 INS39 INS85 INS85 INS43 INS85 UPD42 INS32 UPD42 INS42 INS42 INS83 INS83 INS32 MOV8 INS25 INS14 UPD66 UPD42 INS42 INS42 INS42 MOV8 MOV8 UPD42 UPD42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS32 MOV43 INS85 UPD42 INS43 INS85 INS42 INS3 INS39 INS85 INS85 INS42 INS3 INS27 INS27 INS25 UPD42 MOV42 UPD42 UPD42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 MOV21 INS60 UPD42 MOV42 INS42 INS32 INS32 MOV33 INS60 INS24 INS21 INS32 MOV42 MOV32 MOV43 UPD42 MOV42 INS39 INS59 INS42 INS42 INS42 MOV21 UPD42 MOV42 UPD42 MOV42 INS16 UPD42 MOV42 MOV42 INS32 INS42 INS32 INS32 MOV8 MOV8 MOV43 INS32 INS32 MOV43 INS32 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 UPD42 UPD42 MOV42 INS5 INS40 INS5 INS40 INS42 INS40 INS2 INS33 INS27 INS8 UPD42 INS40 INS34 INS32 INS42 INS52 INS42 INS34 INS2 INS42 INS27 INS40 INS40 MOV43 INS59 INS42 INS42 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS7 UPD42 MOV42 INS32 INS42 INS34 MOV27 INS2 INS33 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS43 INS85 INS39 INS85 INS85 INS42 INS42 INS2 INS33 INS21 MOV21 INS42 INS42 INS42 INS40 INS34 INS40 INS2 UPD42 UPD42 INS42 UPD42 UPD42 INS27 UPD42 INS42 INS2 INS42 INS27 UPD42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS32 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS42 INS27 INS40 INS34 INS42 INS27 INS40 INS34 INS42 INS5 INS27 INS42 INS34 INS7 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS2 INS32 INS2 INS32 INS40 INS34 INS40 INS34 INS43 INS85 INS42 INS34 INS2 INS32 INS42 INS32 MOV32 UPD42 UPD42 INS42 INS42 INS2 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS2 MOV42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS32 UPD42 MOV42 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL39 DEL43 DEL42 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL33 DEL16 DEL42 DEL32 DEL43 DEL42 DEL43 DEL74 DEL33 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL27 DEL42 DEL34 DEL38 DEL32 DEL33 DEL16 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL58 DEL24 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL27 DEL32 DEL27 DEL25 DEL8 DEL31 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL10 DEL8 DEL25 DEL8 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL43 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL14 DEL53 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL9 DEL42 DEL42 DEL42 DEL42 DEL42