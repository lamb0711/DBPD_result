Fix issue with NN/DN re-registration.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358347 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
+
+  
+  // We use these in an HA setup to ensure that the pair of NNs produce block
+  // token serial numbers that are in different ranges.
+  private static final int LOW_MASK  = ~(1 << 31);
+  
+  private int nnIndex;
+  
-  private final long keyUpdateInterval;
+  private long keyUpdateInterval;
-  private int serialNo = new SecureRandom().nextInt();
+  private int serialNo;
-
+  
-   * Constructor
+   * Constructor for slaves.
-   * @param isMaster
-   * @param keyUpdateInterval
-   * @param tokenLifetime
-   * @throws IOException
+   * @param keyUpdateInterval how often a new key will be generated
+   * @param tokenLifetime how long an individual token is valid
-  public BlockTokenSecretManager(boolean isMaster, long keyUpdateInterval,
-      long tokenLifetime) throws IOException {
+  public BlockTokenSecretManager(long keyUpdateInterval,
+      long tokenLifetime) {
+    this(false, keyUpdateInterval, tokenLifetime);
+  }
+  
+  /**
+   * Constructor for masters.
+   * 
+   * @param keyUpdateInterval how often a new key will be generated
+   * @param tokenLifetime how long an individual token is valid
+   * @param isHaEnabled whether or not HA is enabled
+   * @param thisNnId the NN ID of this NN in an HA setup
+   * @param otherNnId the NN ID of the other NN in an HA setup
+   */
+  public BlockTokenSecretManager(long keyUpdateInterval,
+      long tokenLifetime, int nnIndex) {
+    this(true, keyUpdateInterval, tokenLifetime);
+    Preconditions.checkArgument(nnIndex == 0 || nnIndex == 1);
+    this.nnIndex = nnIndex;
+    setSerialNo(new SecureRandom().nextInt());
+    generateKeys();
+  }
+  
+  private BlockTokenSecretManager(boolean isMaster, long keyUpdateInterval,
+      long tokenLifetime) {
-    generateKeys();
+  }
+  
+  @VisibleForTesting
+  public void setSerialNo(int serialNo) {
+    this.serialNo = (serialNo & LOW_MASK) | (nnIndex << 31);
-    serialNo++;
+    setSerialNo(serialNo + 1);
-    serialNo++;
+    setSerialNo(serialNo + 1);
-  public synchronized void setKeys(ExportedBlockKeys exportedKeys)
+  public synchronized void addKeys(ExportedBlockKeys exportedKeys)
-    serialNo++;
+    setSerialNo(serialNo + 1);
+  
+  @VisibleForTesting
+  public void setKeyUpdateIntervalForTesting(long millis) {
+    this.keyUpdateInterval = millis;
+  }
+
+  @VisibleForTesting
+  public void clearAllKeysForTesting() {
+    allKeys.clear();
+  }
+  
+  @VisibleForTesting
+  public int getSerialNoForTesting() {
+    return serialNo;
+  }
+  

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS42 INS44 INS44 INS44 INS8 UPD83 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS38 INS42 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS39 INS42 INS17 INS21 INS21 INS21 MOV21 INS42 INS39 INS42 INS21 INS42 INS39 INS42 INS21 INS42 INS21 INS42 INS41 INS36 INS66 INS42 INS66 INS42 INS66 INS9 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS9 INS42 INS42 INS32 INS7 INS32 INS7 INS32 INS32 INS32 INS7 INS32 INS42 INS27 INS42 INS42 INS27 INS22 INS42 INS42 MOV32 INS22 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS22 INS42 INS42 INS42 INS34 INS34 INS27 INS27 INS52 INS42 INS52 INS42 INS36 INS36 INS42 INS34 INS42 INS34 INS42 INS34 INS52 INS42 INS42 INS34 INS42 INS34 INS27 INS27 INS42 INS42 INS42 INS34 DEL83 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL37 DEL42 DEL37 DEL42 DEL37