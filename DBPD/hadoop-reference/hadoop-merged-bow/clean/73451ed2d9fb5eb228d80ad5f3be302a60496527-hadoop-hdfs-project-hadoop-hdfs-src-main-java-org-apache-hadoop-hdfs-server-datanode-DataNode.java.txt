HDFS-395.  DFS Scalability: Incremental block reports. Contributed by Tomasz Nykiel.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161992 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.protocol.ReceivedDeletedBlockInfo;
+  long deleteReportInterval;
+  long lastDeletedReport = 0;
+    this.deleteReportInterval = 100 * heartBeatInterval;
+  // calls specific to BP
+  protected void notifyNamenodeDeletedBlock(ExtendedBlock block) {
+    BPOfferService bpos = blockPoolManager.get(block.getBlockPoolId());
+    if (bpos != null) {
+      bpos.notifyNamenodeDeletedBlock(block);
+    } else {
+      LOG.warn("Cannot find BPOfferService for reporting block deleted for bpid="
+          + block.getBlockPoolId());
+    }
+  }
+  
-    private final LinkedList<Block> receivedBlockList = new LinkedList<Block>();
-    private final LinkedList<String> delHints = new LinkedList<String>();
+    private final LinkedList<ReceivedDeletedBlockInfo> receivedAndDeletedBlockList 
+      = new LinkedList<ReceivedDeletedBlockInfo>();
+    private volatile int pendingReceivedRequests = 0;
+     * 
-    private void reportReceivedBlocks() throws IOException {
-      //check if there are newly received blocks
-      Block [] blockArray=null;
-      String [] delHintArray=null;
-      synchronized(receivedBlockList) {
-        synchronized(delHints){
-          int numBlocks = receivedBlockList.size();
-          if (numBlocks > 0) {
-            if(numBlocks!=delHints.size()) {
-              LOG.warn("Panic: receiveBlockList and delHints are not of " +
-              "the same length" );
-            }
-            //
-            // Send newly-received blockids to namenode
-            //
-            blockArray = receivedBlockList.toArray(new Block[numBlocks]);
-            delHintArray = delHints.toArray(new String[numBlocks]);
-          }
+    private void reportReceivedDeletedBlocks() throws IOException {
+
+      // check if there are newly received blocks
+      ReceivedDeletedBlockInfo[] receivedAndDeletedBlockArray = null;
+      int currentReceivedRequestsCounter;
+      synchronized (receivedAndDeletedBlockList) {
+        currentReceivedRequestsCounter = pendingReceivedRequests;
+        int numBlocks = receivedAndDeletedBlockList.size();
+        if (numBlocks > 0) {
+          //
+          // Send newly-received and deleted blockids to namenode
+          //
+          receivedAndDeletedBlockArray = receivedAndDeletedBlockList
+              .toArray(new ReceivedDeletedBlockInfo[numBlocks]);
-      if (blockArray != null) {
-        if(delHintArray == null || delHintArray.length != blockArray.length ) {
-          LOG.warn("Panic: block array & delHintArray are not the same" );
-        }
-        bpNamenode.blockReceived(bpRegistration, blockPoolId, blockArray,
-            delHintArray);
-        synchronized(receivedBlockList) {
-          synchronized(delHints){
-            for(int i=0; i<blockArray.length; i++) {
-              receivedBlockList.remove(blockArray[i]);
-              delHints.remove(delHintArray[i]);
-            }
+      if (receivedAndDeletedBlockArray != null) {
+        bpNamenode.blockReceivedAndDeleted(bpRegistration, blockPoolId,
+            receivedAndDeletedBlockArray);
+        synchronized (receivedAndDeletedBlockList) {
+          for (int i = 0; i < receivedAndDeletedBlockArray.length; i++) {
+            receivedAndDeletedBlockList.remove(receivedAndDeletedBlockArray[i]);
+          pendingReceivedRequests -= currentReceivedRequestsCounter;
-      if(block==null || delHint==null) {
-        throw new IllegalArgumentException(
-            block==null?"Block is null":"delHint is null");
+      if (block == null || delHint == null) {
+        throw new IllegalArgumentException(block == null ? "Block is null"
+            : "delHint is null");
-      
+
-        LOG.warn("BlockPool mismatch " + block.getBlockPoolId() + 
-            " vs. " + blockPoolId);
+        LOG.warn("BlockPool mismatch " + block.getBlockPoolId() + " vs. "
+            + blockPoolId);
-      
-      synchronized (receivedBlockList) {
-        synchronized (delHints) {
-          receivedBlockList.add(block.getLocalBlock());
-          delHints.add(delHint);
-          receivedBlockList.notifyAll();
-        }
+
+      synchronized (receivedAndDeletedBlockList) {
+        receivedAndDeletedBlockList.add(new ReceivedDeletedBlockInfo(block
+            .getLocalBlock(), delHint));
+        pendingReceivedRequests++;
+        receivedAndDeletedBlockList.notifyAll();
+      }
+    }
+
+    void notifyNamenodeDeletedBlock(ExtendedBlock block) {
+      if (block == null) {
+        throw new IllegalArgumentException("Block is null");
+      }
+
+      if (!block.getBlockPoolId().equals(blockPoolId)) {
+        LOG.warn("BlockPool mismatch " + block.getBlockPoolId() + " vs. "
+            + blockPoolId);
+        return;
+      }
+
+      synchronized (receivedAndDeletedBlockList) {
+        receivedAndDeletedBlockList.add(new ReceivedDeletedBlockInfo(block
+            .getLocalBlock(), ReceivedDeletedBlockInfo.TODELETE_HINT));
-      LOG.info("For namenode " + nnAddr + " using BLOCKREPORT_INTERVAL of "
+      LOG.info("For namenode " + nnAddr + " using DELETEREPORT_INTERVAL of "
+          + deleteReportInterval + " msec " + " BLOCKREPORT_INTERVAL of "
-
-          reportReceivedBlocks();
+          if (pendingReceivedRequests > 0
+              || (startTime - lastDeletedReport > deleteReportInterval)) {
+            reportReceivedDeletedBlocks();
+            lastDeletedReport = startTime;
+          }
-          synchronized(receivedBlockList) {
-            if (waitTime > 0 && receivedBlockList.size() == 0) {
+          synchronized(receivedAndDeletedBlockList) {
+            if (waitTime > 0 && pendingReceivedRequests == 0) {
-                receivedBlockList.wait(waitTime);
+                receivedAndDeletedBlockList.wait(waitTime);

INS26 INS40 INS23 INS23 INS31 MOV23 INS39 INS59 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS31 INS42 INS42 INS34 INS21 INS43 INS42 INS60 INS25 UPD74 MOV74 UPD83 INS39 UPD42 INS39 INS42 INS44 INS8 INS7 INS42 INS43 INS59 INS27 INS8 INS8 UPD43 UPD42 UPD42 INS34 INS43 INS42 INS25 INS25 INS51 INS22 INS27 INS42 INS42 INS32 INS42 INS33 INS21 INS21 UPD42 UPD74 MOV74 UPD5 INS39 UPD42 UPD42 MOV8 INS42 INS27 INS8 INS38 INS8 INS42 INS8 INS52 INS42 INS34 INS42 INS42 INS42 INS32 INS32 INS32 UPD43 UPD43 UPD42 UPD42 INS21 MOV60 MOV25 UPD42 INS42 INS33 INS53 INS32 INS21 INS41 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 UPD42 INS7 UPD42 MOV8 INS37 INS14 INS32 INS42 INS42 INS32 INS32 INS45 INS42 INS45 UPD45 INS45 INS32 INS42 INS42 UPD42 UPD42 INS24 MOV21 UPD42 INS14 INS42 UPD42 INS43 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS25 INS42 INS42 UPD42 MOV58 MOV27 MOV37 INS8 INS7 INS43 MOV32 INS42 INS42 INS45 INS32 INS45 INS42 INS43 INS32 INS40 INS27 INS8 UPD42 UPD42 UPD40 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS36 MOV21 INS21 UPD42 INS42 INS34 INS27 INS7 UPD5 UPD42 INS27 INS42 UPD42 INS42 INS42 UPD43 UPD42 INS42 INS42 INS42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL43 DEL85 DEL5 DEL33 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL32 DEL7 DEL21 DEL42 DEL8 DEL51 DEL42 DEL33 DEL27 DEL40 DEL40 DEL27 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL8 DEL24 DEL42 DEL51 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL51 DEL8 DEL42 DEL42 DEL32