HDFS-6899. Allow changing MiniDFSCluster volumes per DN and capacity per volume. (Arpit Agarwal)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619970 13f79535-47bb-0310-9956-ffa450edef68

-import java.security.PrivilegedExceptionAction;
+import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsVolumeSpi;
+import org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.FsVolumeImpl;
-  // Changing this value may break some tests that assume it is 2.
-  public static final int DIRS_PER_DATANODE = 2;
+  // Changing this default may break some tests that assume it is 2.
+  private static final int DEFAULT_STORAGES_PER_DATANODE = 2;
+  public int getStoragesPerDatanode() {
+    return storagesPerDatanode;
+  }
+
+    private StorageType[] storageTypes1D = null;
+    private int storagesPerDatanode = DEFAULT_STORAGES_PER_DATANODE;
+    private long [][] storageCapacities = null;
+    private long [] storageCapacities1D = null;
+     * Default: DEFAULT_STORAGES_PER_DATANODE
+     */
+    public Builder storagesPerDatanode(int numStorages) {
+      this.storagesPerDatanode = numStorages;
+      return this;
+    }
+
+    /**
-      assert types.length == DIRS_PER_DATANODE;
-      this.storageTypes = new StorageType[numDataNodes][types.length];
-      for (int i = 0; i < numDataNodes; ++i) {
-        this.storageTypes[i] = types;
-      }
+      this.storageTypes1D = types;
+     * Set the same storage capacity configuration for each datanode.
+     * If storageTypes is uninitialized or passed null then
+     * StorageType.DEFAULT is used.
+     */
+    public Builder storageCapacities(long[] capacities) {
+      this.storageCapacities1D = capacities;
+      return this;
+    }
+
+    /**
+     * Set custom storage capacity configuration for each datanode.
+     * If storageCapacities is uninitialized or passed null then
+     * capacity is limited by available disk space.
+     */
+    public Builder storageCapacities(long[][] capacities) {
+      this.storageCapacities = capacities;
+      return this;
+    }
+
+    /**
+     * Use SimulatedFSDataset and limit the capacity of each DN per
+     * the values passed in val.
+     *
+     * For limiting the capacity of volumes with real storage, see
+     * {@link FsVolumeImpl#setCapacityForTesting}
+    this.storagesPerDatanode = builder.storagesPerDatanode;
+
+    // Duplicate the storageType setting for each DN.
+    if (builder.storageTypes == null && builder.storageTypes1D != null) {
+      assert builder.storageTypes1D.length == storagesPerDatanode;
+      builder.storageTypes = new StorageType[builder.numDataNodes][storagesPerDatanode];
+      for (int i = 0; i < builder.numDataNodes; ++i) {
+        builder.storageTypes[i] = builder.storageTypes1D;
+      }
+    }
+
+    // Duplicate the storageCapacity setting for each DN.
+    if (builder.storageCapacities == null && builder.storageCapacities1D != null) {
+      assert builder.storageCapacities1D.length == storagesPerDatanode;
+      builder.storageCapacities = new long[builder.numDataNodes][storagesPerDatanode];
+
+      for (int i = 0; i < builder.numDataNodes; ++i) {
+        builder.storageCapacities[i] = builder.storageCapacities1D;
+      }
+    }
+
+                       builder.storageCapacities,
+  protected final int storagesPerDatanode;
+    storagesPerDatanode = DEFAULT_STORAGES_PER_DATANODE;
+    this.storagesPerDatanode = DEFAULT_STORAGES_PER_DATANODE;
-        manageNameDfsDirs, true, manageDataDfsDirs, manageDataDfsDirs, 
-        operation, null, racks, hosts,
-        simulatedCapacities, null, true, false,
-        MiniDFSNNTopology.simpleSingleNN(nameNodePort, 0), true, false, false, null);
+                       manageNameDfsDirs, true, manageDataDfsDirs, manageDataDfsDirs,
+                       operation, null, racks, hosts,
+                       null, simulatedCapacities, null, true, false,
+                       MiniDFSNNTopology.simpleSingleNN(nameNodePort, 0), true, false, false, null);
-      String[] hosts, long[] simulatedCapacities, String clusterId,
+      String[] hosts,
+      long[][] storageCapacities, long[] simulatedCapacities, String clusterId,
-          racks, hosts, simulatedCapacities, setupHostsFile,
+          racks, hosts, storageCapacities, simulatedCapacities, setupHostsFile,
-    assert storageTypes == null || storageTypes.length == DIRS_PER_DATANODE;
-    for (int j = 0; j < DIRS_PER_DATANODE; ++j) {
+    assert storageTypes == null || storageTypes.length == storagesPerDatanode;
+    for (int j = 0; j < storagesPerDatanode; ++j) {
-        simulatedCapacities, setupHostsFile, false, false, null);
+        null, simulatedCapacities, setupHostsFile, false, false, null);
-        simulatedCapacities, setupHostsFile, checkDataNodeAddrConfig, false, null);
+        null, simulatedCapacities, setupHostsFile, checkDataNodeAddrConfig, false, null);
+      long[][] storageCapacities,
+    assert storageCapacities == null || simulatedCapacities == null;
+    assert storageCapacities == null || storageCapacities.length == numDataNodes;
-    
+    DataNode[] dns = new DataNode[numDataNodes];
+      dns[i - curDatanodesNum] = dn;
+
+    if (storageCapacities != null) {
+      for (int i = curDatanodesNum; i < curDatanodesNum+numDataNodes; ++i) {
+        List<? extends FsVolumeSpi> volumes = dns[i].getFSDataset().getVolumes();
+        assert storageCapacities[i].length == storagesPerDatanode;
+        assert volumes.size() == storagesPerDatanode;
+
+        for (int j = 0; j < volumes.size(); ++j) {
+          FsVolumeImpl volume = (FsVolumeImpl) volumes.get(j);
+          volume.setCapacityForTesting(storageCapacities[i][j]);
+        }
+      }
+    }

MOV26 INS26 UPD40 INS40 INS31 INS23 UPD83 INS83 INS39 INS42 INS8 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS44 INS44 UPD42 INS41 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS5 INS59 INS83 INS5 INS59 INS29 INS83 INS43 INS42 INS44 INS8 MOV29 INS83 MOV43 INS42 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS21 INS25 INS25 INS42 INS21 INS21 INS5 INS42 INS5 INS42 INS6 INS6 INS60 INS25 INS42 INS43 INS85 INS42 INS33 INS42 INS42 INS39 INS85 INS85 INS42 INS33 INS39 INS85 INS42 INS33 INS65 INS42 INS39 INS42 INS21 MOV41 MOV21 INS41 INS65 INS42 INS5 INS42 INS21 INS41 INS65 INS42 INS5 INS42 INS21 INS41 INS7 INS27 INS8 INS27 INS8 INS7 INS7 INS39 INS85 INS85 INS39 INS85 INS85 INS27 INS27 INS5 INS59 INS27 INS8 INS42 INS66 INS7 INS52 INS66 INS66 INS66 INS39 INS85 INS7 INS52 INS66 INS66 INS66 INS39 INS85 INS85 INS7 INS52 INS66 INS66 INS66 INS65 INS22 INS40 INS27 INS27 INS6 MOV21 INS24 INS27 INS27 INS6 INS21 INS24 INS40 INS42 INS42 INS22 INS42 INS33 UPD42 INS33 INS33 INS27 INS27 INS27 INS27 INS43 INS85 INS42 INS3 INS21 INS42 INS33 INS24 INS22 INS42 INS22 INS22 INS42 INS22 INS42 INS67 INS52 INS42 INS40 INS33 INS40 INS33 INS27 MOV58 INS27 MOV38 INS8 INS40 INS33 INS40 INS33 INS27 INS7 INS58 INS27 INS38 INS8 INS52 INS42 UPD42 INS42 INS33 INS42 INS33 INS42 INS33 INS40 INS42 INS42 INS5 INS42 INS7 INS58 INS27 INS38 INS8 INS52 INS42 MOV52 UPD42 MOV42 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS21 INS40 INS42 INS40 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS43 INS85 INS2 INS42 INS39 INS59 INS42 INS27 INS42 INS60 INS6 INS6 INS24 INS40 UPD42 INS7 INS5 INS40 INS42 INS42 INS34 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS27 INS58 INS27 INS38 INS8 INS2 INS40 INS39 INS85 INS85 INS2 INS40 INS42 INS42 INS43 INS76 INS42 INS32 INS22 INS42 INS32 INS42 INS39 INS59 INS42 INS32 INS42 INS60 INS21 INS40 INS42 INS40 INS42 INS42 INS43 INS32 INS42 INS2 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS2 INS42 INS42 INS43 INS32 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL22 DEL42 DEL2 DEL83 DEL42 DEL40 DEL42 DEL27 DEL6 DEL42 DEL42 DEL27 DEL8 DEL24 DEL8 DEL31 DEL52 DEL42 DEL22 DEL40