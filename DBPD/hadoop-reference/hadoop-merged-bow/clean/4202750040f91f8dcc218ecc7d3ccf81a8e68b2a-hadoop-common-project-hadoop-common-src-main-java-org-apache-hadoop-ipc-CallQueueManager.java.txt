HADOOP-17010. Add queue capacity support for FairCallQueue (#1977)


+import java.util.Arrays;
+    int[] capacityWeights = parseCapacityWeights(priorityLevels,
+        namespace, conf);
-        priorityLevels, maxQueueSize, namespace, conf);
+        priorityLevels, maxQueueSize, namespace, capacityWeights, conf);
-      Configuration conf) {
+      int[] capacityWeights, Configuration conf) {
-          int.class, String.class, Configuration.class);
-      return ctor.newInstance(priorityLevels, maxLen, ns, conf);
+          int.class, String.class, int[].class, Configuration.class);
+      return ctor.newInstance(priorityLevels, maxLen, ns,
+          capacityWeights, conf);
+   * Read the weights of capacity in callqueue and pass the value to
+   * callqueue constructions.
+   */
+  private static int[] parseCapacityWeights(
+      int priorityLevels, String ns, Configuration conf) {
+    int[] weights = conf.getInts(ns + "." +
+      CommonConfigurationKeys.IPC_CALLQUEUE_CAPACITY_WEIGHTS_KEY);
+    if (weights.length == 0) {
+      weights = getDefaultQueueCapacityWeights(priorityLevels);
+    } else if (weights.length != priorityLevels) {
+      throw new IllegalArgumentException(
+          CommonConfigurationKeys.IPC_CALLQUEUE_CAPACITY_WEIGHTS_KEY + " must "
+              + "specify " + priorityLevels + " capacity weights: one for each "
+              + "priority level");
+    } else {
+      // only allow positive numbers
+      for (int w : weights) {
+        if (w <= 0) {
+          throw new IllegalArgumentException(
+              CommonConfigurationKeys.IPC_CALLQUEUE_CAPACITY_WEIGHTS_KEY +
+                  " only takes positive weights. " + w + " capacity weight " +
+                  "found");
+        }
+      }
+    }
+    return weights;
+  }
+
+  /**
+   * By default, queue capacity is the same for all priority levels.
+   *
+   * @param priorityLevels number of levels
+   * @return default weights
+   */
+  public static int[] getDefaultQueueCapacityWeights(int priorityLevels) {
+    int[] weights = new int[priorityLevels];
+    Arrays.fill(weights, 1);
+    return weights;
+  }
+
+  /**
+    int[] capacityWeights = parseCapacityWeights(priorityLevels, ns, conf);
-        priorityLevels, maxSize, ns, conf);
+        priorityLevels, maxSize, ns, capacityWeights, conf);

INS26 INS40 INS31 INS31 INS44 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS60 INS5 INS42 INS65 INS39 INS85 INS39 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS39 INS85 INS39 INS42 INS60 INS21 INS41 INS60 INS5 INS59 INS39 INS85 INS66 INS66 INS42 INS42 INS5 INS59 INS27 INS8 INS25 INS42 INS66 INS42 INS66 INS66 INS5 INS59 INS32 INS42 INS5 INS59 INS39 INS85 INS42 INS32 INS39 INS85 INS42 INS32 INS40 INS34 INS21 INS27 INS8 INS8 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS34 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS40 INS42 INS53 INS70 INS5 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS32 INS14 INS44 INS42 INS8 INS39 INS85 INS57 INS42 INS42 INS43 INS27 INS39 INS42 INS25 INS5 INS42 INS40 INS45 INS45 INS42 INS45 INS45 INS27 INS8 INS39 INS85 INS42 INS34 INS53 INS14 INS43 INS27 INS42 INS40 INS45 INS42 INS45 INS45