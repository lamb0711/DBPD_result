HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.

+    private final Integer minCompatLV;
+      this(lv, ancestorLV, null, description, reserved, specialFeatures);
+    }
+
+    public FeatureInfo(final int lv, final int ancestorLV, Integer minCompatLV,
+        final String description, boolean reserved,
+        LayoutFeature... specialFeatures) {
+      this.minCompatLV = minCompatLV;
-    /** 
+    /**
+     * Accessor method for feature minimum compatible layout version.  If the
+     * feature does not define a minimum compatible layout version, then this
+     * method returns the feature's own layout version.  This would indicate
+     * that the feature cannot provide compatibility with any prior layout
+     * version.
+     *
+     * @return int minimum compatible LV value
+     */
+    public int getMinimumCompatibleLayoutVersion() {
+      return minCompatLV != null ? minCompatLV : lv;
+    }
+
+    /**
+    SortedSet<LayoutFeature> existingFeatures = new TreeSet<LayoutFeature>(
+        new LayoutFeatureComparator());
+    for (SortedSet<LayoutFeature> s : map.values()) {
+      existingFeatures.addAll(s);
+    }
+    LayoutFeature prevF = existingFeatures.isEmpty() ? null :
+        existingFeatures.first();
+      int minCompatLV = info.getMinimumCompatibleLayoutVersion();
+      if (prevF != null &&
+          minCompatLV > prevF.getInfo().getMinimumCompatibleLayoutVersion()) {
+        throw new AssertionError(String.format(
+            "Features must be listed in order of minimum compatible layout " +
+            "version.  Check features %s and %s.", prevF, f));
+      }
+      prevF = f;
+  /**
+   * Gets the minimum compatible layout version.
+   *
+   * @param features all features to check
+   * @return minimum compatible layout version
+   */
+  public static int getMinimumCompatibleLayoutVersion(
+      LayoutFeature[] features) {
+    return getLastNonReservedFeature(features).getInfo()
+        .getMinimumCompatibleLayoutVersion();
+  }
+
-

INS31 INS23 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS8 INS60 INS70 INS60 INS65 INS65 INS65 INS5 INS42 INS41 INS42 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS39 INS42 INS43 INS42 INS17 INS43 INS42 INS21 INS65 INS65 INS41 INS74 INS59 INS44 INS32 INS8 INS43 INS59 INS66 INS42 INS66 INS66 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS7 INS66 INS66 INS66 INS66 INS66 INS66 INS16 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS16 INS60 INS25 INS21 INS42 INS32 INS42 INS22 INS42 INS27 INS42 INS42 INS42 INS42 INS74 INS14 INS43 INS43 INS32 INS32 INS33 INS32 INS39 INS59 INS27 INS8 INS7 INS32 INS42 INS52 INS42 INS42 INS33 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS14 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS45