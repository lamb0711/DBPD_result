YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)

-import org.apache.hadoop.hbase.util.Bytes;
-import org.apache.hadoop.yarn.server.timelineservice.storage.common.Separator;
-import org.apache.hadoop.yarn.server.timelineservice.storage.common.TimelineStorageUtils;
-
-  private final long flowRunId;
+  private final Long flowRunId;
-      long flowRunId, String appId, String entityType, String entityId) {
+      Long flowRunId, String appId, String entityType, String entityId) {
-  public long getFlowRunId() {
+  public Long getFlowRunId() {
-    byte[] first =
-        Bytes.toBytes(Separator.QUALIFIERS.joinEncoded(userId, clusterId,
-            flowName));
-    // Note that flowRunId is a long, so we can't encode them all at the same
-    // time.
-    byte[] second = Bytes.toBytes(TimelineStorageUtils.invertLong(flowRunId));
-    byte[] third = TimelineStorageUtils.encodeAppId(appId);
-    return Separator.QUALIFIERS.join(first, second, third, new byte[0]);
+    return EntityRowKeyConverter.getInstance().encode(new EntityRowKey(
+        clusterId, userId, flowName, flowRunId, appId, null, null));
-    byte[] first =
-        Bytes.toBytes(Separator.QUALIFIERS.joinEncoded(userId, clusterId,
-            flowName));
-    // Note that flowRunId is a long, so we can't encode them all at the same
-    // time.
-    byte[] second = Bytes.toBytes(TimelineStorageUtils.invertLong(flowRunId));
-    byte[] third = TimelineStorageUtils.encodeAppId(appId);
-    byte[] fourth =
-        Bytes.toBytes(Separator.QUALIFIERS.joinEncoded(entityType, ""));
-    return Separator.QUALIFIERS.join(first, second, third, fourth);
+    return EntityRowKeyConverter.getInstance().encode(new EntityRowKey(
+        clusterId, userId, flowName, flowRunId, appId, entityType, null));
-    byte[] first =
-        Bytes.toBytes(Separator.QUALIFIERS.joinEncoded(userId, clusterId,
-            flowName));
-    // Note that flowRunId is a long, so we can't encode them all at the same
-    // time.
-    byte[] second = Bytes.toBytes(TimelineStorageUtils.invertLong(flowRunId));
-    byte[] third = TimelineStorageUtils.encodeAppId(appId);
-    byte[] fourth =
-        Bytes.toBytes(Separator.QUALIFIERS.joinEncoded(entityType, entityId));
-    return Separator.QUALIFIERS.join(first, second, third, fourth);
+    return EntityRowKeyConverter.getInstance().encode(new EntityRowKey(
+        clusterId, userId, flowName, flowRunId, appId, entityType, entityId));
-    byte[][] rowKeyComponents = Separator.QUALIFIERS.split(rowKey);
-
-    if (rowKeyComponents.length < 7) {
-      throw new IllegalArgumentException("the row key is not valid for " +
-          "an entity");
-    }
-
-    String userId =
-        Separator.QUALIFIERS.decode(Bytes.toString(rowKeyComponents[0]));
-    String clusterId =
-        Separator.QUALIFIERS.decode(Bytes.toString(rowKeyComponents[1]));
-    String flowName =
-        Separator.QUALIFIERS.decode(Bytes.toString(rowKeyComponents[2]));
-    long flowRunId =
-        TimelineStorageUtils.invertLong(Bytes.toLong(rowKeyComponents[3]));
-    String appId = TimelineStorageUtils.decodeAppId(rowKeyComponents[4]);
-    String entityType =
-        Separator.QUALIFIERS.decode(Bytes.toString(rowKeyComponents[5]));
-    String entityId =
-        Separator.QUALIFIERS.decode(Bytes.toString(rowKeyComponents[6]));
-    return new EntityRowKey(clusterId, userId, flowName, flowRunId, appId,
-        entityType, entityId);
+    return EntityRowKeyConverter.getInstance().decode(rowKey);

INS43 INS43 INS42 INS43 INS42 INS41 INS41 INS41 INS41 INS42 INS32 INS32 INS32 INS32 INS32 UPD42 MOV42 INS14 INS32 UPD42 MOV42 INS14 INS32 UPD42 MOV42 MOV14 INS32 MOV42 INS42 INS42 UPD42 MOV42 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS42 UPD42 MOV42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL39 DEL39 DEL39 DEL39 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL32 DEL41 DEL39 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL45 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL39 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL39 DEL85 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL59 DEL60 DEL41