YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.classification.InterfaceAudience;
+import java.util.concurrent.atomic.AtomicInteger;
+  private TimelineEntityGroupId groupId;
+  private int refCount = 0;
+  private static AtomicInteger activeStores = new AtomicInteger(0);
-  public EntityCacheItem(Configuration config, FileSystem fs) {
+  public EntityCacheItem(TimelineEntityGroupId gId, Configuration config,
+      FileSystem fs) {
+    this.groupId = gId;
+   * This method will not hold the storage from being reclaimed.
+   * @return The number of currently active stores in all CacheItems.
+   */
+  public static int getActiveStores() {
+    return activeStores.get();
+  }
+
+  /**
-   * @param groupId Group id of the cache
-  public synchronized TimelineStore refreshCache(TimelineEntityGroupId groupId,
-      TimelineACLsManager aclManager, JsonFactory jsonFactory,
-      ObjectMapper objMapper, EntityGroupFSTimelineStoreMetrics metrics)
-      throws IOException {
+  public synchronized TimelineStore refreshCache(TimelineACLsManager aclManager,
+      JsonFactory jsonFactory, ObjectMapper objMapper,
+      EntityGroupFSTimelineStoreMetrics metrics) throws IOException {
+          activeStores.getAndIncrement();
-   * Release the cache item for the given group id.
-   *
-   * @param groupId the group id that the cache should release
+   * Increase the number of references to this cache item by 1.
-  public synchronized void releaseCache(TimelineEntityGroupId groupId) {
+  public synchronized void incrRefs() {
+    refCount++;
+  }
+
+  /**
+   * Unregister a reader. Try to release the cache if the reader to current
+   * cache reaches 0.
+   *
+   * @return true if the cache has been released, otherwise false
+   */
+  public synchronized boolean tryRelease() {
+    refCount--;
+    // Only reclaim the storage if there is no reader.
+    if (refCount > 0) {
+      LOG.debug("{} references left for cached group {}, skipping the release",
+          refCount, groupId);
+      return false;
+    }
+    forceRelease();
+    return true;
+  }
+
+  /**
+   * Force releasing the cache item for the given group id, even though there
+   * may be active references.
+   */
+  public synchronized void forceRelease() {
+    activeStores.getAndDecrement();
+    refCount = 0;
+    LOG.debug("Cache for group {} released. ", groupId);
+  }
+
+  @InterfaceAudience.Private
+  @VisibleForTesting
+  synchronized int getRefCount() {
+    return refCount;

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS8 UPD42 INS78 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS34 INS42 INS42 INS14 MOV43 INS42 INS21 INS65 INS41 INS65 INS21 INS65 INS65 INS21 INS25 INS21 INS41 INS65 INS21 INS21 INS21 INS40 INS42 INS41 INS43 INS34 INS7 INS66 INS66 INS32 INS66 INS37 INS66 INS66 INS66 INS37 INS27 INS8 INS32 INS9 UPD66 MOV66 UPD66 MOV66 INS32 INS7 INS32 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS41 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS45 INS42 INS52 INS42 INS32 INS9 INS42 INS42 INS45 INS42 INS42 INS21 INS32 INS42 INS42 DEL42 DEL66 DEL65 DEL42 DEL44 DEL65 DEL42 DEL65 DEL42 DEL44