YARN-6600. Introduce default and max lifetime of application at LeafQueue level. Contributed by Rohith Sharma K S.

+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.hadoop.yarn.api.records.ApplicationTimeoutType;
+import org.apache.hadoop.yarn.api.records.impl.pb.ProtoUtils;
+import org.apache.hadoop.yarn.proto.YarnProtos.ApplicationUpdateTimeoutMapProto;
+import org.apache.hadoop.yarn.proto.YarnServiceProtos.UpdateApplicationTimeoutsResponseProtoOrBuilder;
+  private Map<ApplicationTimeoutType, String> applicationTimeouts = null;
+    mergeLocalToProto();
+  private void mergeLocalToProto() {
+    if (viaProto) {
+      maybeInitBuilder();
+    }
+    mergeLocalToBuilder();
+    proto = builder.build();
+    viaProto = true;
+  }
+
+  private void maybeInitBuilder() {
+    if (viaProto || builder == null) {
+      builder = UpdateApplicationTimeoutsResponseProto.newBuilder(proto);
+    }
+    viaProto = false;
+  }
+
+  private void mergeLocalToBuilder() {
+    if (this.applicationTimeouts != null) {
+      addApplicationTimeouts();
+    }
+  }
+
+
+  @Override
+  public Map<ApplicationTimeoutType, String> getApplicationTimeouts() {
+    initApplicationTimeout();
+    return this.applicationTimeouts;
+  }
+
+  private void initApplicationTimeout() {
+    if (this.applicationTimeouts != null) {
+      return;
+    }
+    UpdateApplicationTimeoutsResponseProtoOrBuilder p =
+        viaProto ? proto : builder;
+    List<ApplicationUpdateTimeoutMapProto> lists =
+        p.getApplicationTimeoutsList();
+    this.applicationTimeouts =
+        new HashMap<ApplicationTimeoutType, String>(lists.size());
+    for (ApplicationUpdateTimeoutMapProto timeoutProto : lists) {
+      this.applicationTimeouts.put(
+          ProtoUtils
+              .convertFromProtoFormat(timeoutProto.getApplicationTimeoutType()),
+          timeoutProto.getExpireTime());
+    }
+  }
+
+  @Override
+  public void setApplicationTimeouts(
+      Map<ApplicationTimeoutType, String> appTimeouts) {
+    if (appTimeouts == null) {
+      return;
+    }
+    initApplicationTimeout();
+    this.applicationTimeouts.clear();
+    this.applicationTimeouts.putAll(appTimeouts);
+  }
+
+  private void addApplicationTimeouts() {
+    maybeInitBuilder();
+    builder.clearApplicationTimeouts();
+    if (applicationTimeouts == null) {
+      return;
+    }
+    Iterable<? extends ApplicationUpdateTimeoutMapProto> values =
+        new Iterable<ApplicationUpdateTimeoutMapProto>() {
+
+          @Override
+          public Iterator<ApplicationUpdateTimeoutMapProto> iterator() {
+            return new Iterator<ApplicationUpdateTimeoutMapProto>() {
+              private Iterator<ApplicationTimeoutType> iterator =
+                  applicationTimeouts.keySet().iterator();
+
+              @Override
+              public boolean hasNext() {
+                return iterator.hasNext();
+              }
+
+              @Override
+              public ApplicationUpdateTimeoutMapProto next() {
+                ApplicationTimeoutType key = iterator.next();
+                return ApplicationUpdateTimeoutMapProto.newBuilder()
+                    .setExpireTime(applicationTimeouts.get(key))
+                    .setApplicationTimeoutType(
+                        ProtoUtils.convertToProtoFormat(key))
+                    .build();
+              }
+
+              @Override
+              public void remove() {
+                throw new UnsupportedOperationException();
+              }
+            };
+          }
+        };
+    this.builder.addAllApplicationTimeouts(values);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS43 INS43 INS43 INS42 INS33 INS21 INS25 INS21 INS21 INS21 INS25 INS21 INS25 INS42 INS43 INS43 INS43 INS21 INS41 INS25 INS60 INS60 INS21 INS70 INS42 INS74 INS42 INS25 INS21 INS21 INS21 INS21 INS21 INS25 INS60 INS21 INS42 INS42 INS42 INS32 INS42 INS8 INS32 INS7 INS7 INS27 INS8 INS7 INS27 INS8 INS42 INS42 INS42 INS32 INS22 INS27 INS8 INS43 INS59 INS74 INS59 INS7 INS44 INS42 INS8 INS43 INS43 INS43 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS27 INS8 INS74 INS59 INS32 INS42 INS21 INS42 INS42 INS32 INS42 INS9 INS42 INS27 INS21 INS42 INS9 INS22 INS33 INS21 INS42 INS52 INS42 INS22 INS33 INS41 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS22 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS33 INS41 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS41 INS43 INS76 INS42 INS14 INS22 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS7 INS52 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS74 INS32 INS42 INS32 INS52 INS42 INS52 INS42 INS42 INS43 INS74 INS1 INS52 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS42 INS42 INS22 INS42 INS32 INS32 INS42 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS42 INS43 INS43 INS41 INS42 INS42 INS14 INS74 INS1 INS43 INS43 INS23 INS31 INS31 INS31 INS42 INS42 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS32 INS42 INS41 INS42 INS42 INS60 INS41 INS42 INS53 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42