YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi

+
+  /**
+   * Monitor the submitted application for reaching the requested state.
+   * Will also report if the app reaches a later state (failed, killed, etc)
+   * Kill application if duration!= null & time expires.
+   * @param appId Application Id of application to be monitored
+   * @param duration how long to wait -must be more than 0
+   * @param desiredState desired state.
+   * @return the application report -null on a timeout
+   * @throws YarnException
+   * @throws IOException
+   */
+  public ApplicationReport monitorAppToState(
+      ApplicationId appId, YarnApplicationState desiredState, Duration duration)
+      throws YarnException, IOException {
+
+    if (appId == null) {
+      throw new BadCommandArgumentsException("null application ID");
+    }
+    if (duration.limit <= 0) {
+      throw new BadCommandArgumentsException("Invalid monitoring duration");
+    }
+    log.debug("Waiting {} millis for app to reach state {} ",
+        duration.limit,
+        desiredState);
+    duration.start();
+    try {
+      while (true) {
+        // Get application report for the appId we are interested in
+
+        ApplicationReport r = getApplicationReport(appId);
+
+        log.debug("queried status is\n{}",
+            new SliderUtils.OnDemandReportStringifier(r));
+
+        YarnApplicationState state = r.getYarnApplicationState();
+        if (state.ordinal() >= desiredState.ordinal()) {
+          log.debug("App in desired state (or higher) :{}", state);
+          return r;
+        }
+        if (duration.getLimitExceeded()) {
+          log.debug(
+              "Wait limit of {} millis to get to state {}, exceeded; app " +
+                  "status\n {}",
+              duration.limit,
+              desiredState,
+              new SliderUtils.OnDemandReportStringifier(r));
+          return null;
+        }
+
+        // sleep 1s.
+        try {
+          Thread.sleep(1000);
+        } catch (InterruptedException ignored) {
+          log.debug("Thread sleep in monitoring loop interrupted");
+        }
+      }
+    } finally {
+      duration.close();
+    }
+  }

INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS25 INS21 INS21 INS54 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS32 INS32 INS8 INS8 INS42 INS33 INS53 INS40 INS34 INS53 INS42 INS42 INS45 INS40 INS42 INS42 INS42 INS61 INS21 INS14 INS14 INS9 INS8 INS32 INS43 INS45 INS43 INS45 INS60 INS21 INS60 INS25 INS25 INS54 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS32 INS8 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS45 INS14 INS42 INS42 INS32 INS32 INS32 INS21 INS41 INS42 INS42 INS21 INS41 INS21 INS44 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS33 INS32 INS43 INS42 INS21 INS40 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS40 INS42 INS14 INS42 INS42 INS34 INS42 INS32 INS45 INS45 INS43 INS42 INS42 INS42 INS45 INS40