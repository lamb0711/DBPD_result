HADOOP-14722. Azure: BlockBlobInputStream position incorrect after seek.
Contributed by Thomas Marquardt

+  // position of next network read within stream
+  // length of stream
+  // internal buffer, re-used for performance optimization
+  // zero-based offset within streamBuffer of current read position
+  // length of data written to streamBuffer, streamBuffer may be larger
+   * Reset the internal stream buffer but do not release the memory.
+   * The buffer can be reused to avoid frequent memory allocations of
+   * a large buffer.
+   */
+  private void resetStreamBuffer() {
+    streamBufferPosition = 0;
+    streamBufferLength = 0;
+  }
+
+  /**
-    return streamPosition;
+    return (streamBuffer != null)
+        ? streamPosition - streamBufferLength + streamBufferPosition
+        : streamPosition;
-    if (pos == getPos()) {
+
+    // calculate offset between the target and current position in the stream
+    long offset = pos - getPos();
+
+    if (offset == 0) {
-    if (streamBuffer != null) {
-      long offset = streamPosition - pos;
-      if (offset > 0 && offset < streamBufferLength) {
-        streamBufferPosition = streamBufferLength - (int) offset;
-      } else {
-        streamBufferPosition = streamBufferLength;
+    if (offset > 0) {
+      // forward seek, data can be skipped as an optimization
+      if (skip(offset) != offset) {
+        throw new EOFException(FSExceptionMessages.EOF_IN_READ_FULLY);
+      return;
-    streamPosition = pos;
+    // reverse seek, offset is negative
+    if (streamBuffer != null) {
+      if (streamBufferPosition + offset >= 0) {
+        // target position is inside the stream buffer,
+        // only need to move backwards within the stream buffer
+        streamBufferPosition += offset;
+      } else {
+        // target position is outside the stream buffer,
+        // need to reset stream buffer and move position for next network read
+        resetStreamBuffer();
+        streamPosition = pos;
+      }
+    } else {
+      streamPosition = pos;
+    }
+
-      streamBufferPosition = 0;
-      streamBufferLength = 0;
+      resetStreamBuffer();
+   * @throws IndexOutOfBoundsException if n is negative or if the sum of n
+   * and the current value of getPos() is greater than the length of the stream.
-      return blobInputStream.skip(n);
-    } else {
-      if (n < 0 || streamPosition + n > streamLength) {
-        throw new IndexOutOfBoundsException("skip range");
-      }
-
-      if (streamBuffer != null) {
-        streamBufferPosition = (n < streamBufferLength - streamBufferPosition)
-            ? streamBufferPosition + (int) n
-            : streamBufferLength;
-      }
-
-      streamPosition += n;
-      return n;
+      // blobInput stream is open; delegate the work to it
+      long skipped = blobInputStream.skip(n);
+      // update position to the actual skip value
+      streamPosition += skipped;
+      return skipped;
+
+    // no blob stream; implement the skip logic directly
+    if (n < 0 || n > streamLength - getPos()) {
+      throw new IndexOutOfBoundsException("skip range");
+    }
+
+    if (streamBuffer != null) {
+      // there's a buffer, so seek with it
+      if (n < streamBufferLength - streamBufferPosition) {
+        // new range is in the buffer, so just update the buffer position
+        // skip within the buffer.
+        streamBufferPosition += (int) n;
+      } else {
+        // skip is out of range, so move position to ne value and reset
+        // the buffer ready for the next read()
+        streamPosition = getPos() + n;
+        resetStreamBuffer();
+      }
+    } else {
+      // no stream buffer; increment the stream position ready for
+      // the next triggered connection & read
+      streamPosition += n;
+    }
+    return n;

INS31 INS29 INS83 INS39 INS42 INS8 MOV8 INS65 MOV21 MOV21 INS60 INS25 INS25 MOV25 INS65 MOV21 INS25 INS25 INS66 INS66 INS66 INS16 MOV39 INS59 INS27 MOV8 MOV27 INS8 INS27 INS8 INS42 INS66 INS66 MOV27 INS8 MOV27 INS8 INS8 INS36 INS27 INS42 MOV42 UPD27 MOV27 INS42 INS34 INS25 INS41 INS42 INS33 INS25 INS21 INS60 INS21 INS41 MOV25 MOV21 MOV27 INS27 INS42 INS27 INS8 UPD27 MOV27 MOV8 INS8 INS32 INS39 INS59 INS7 INS42 MOV42 INS27 MOV27 INS8 INS42 INS42 INS32 INS42 INS53 UPD27 INS34 INS21 MOV21 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS42 MOV42 INS32 INS21 INS21 INS42 INS42 INS14 INS42 UPD7 INS32 INS42 INS7 INS32 INS43 INS40 INS42 INS42 INS42 MOV11 UPD42 INS27 INS42 INS42 INS32 UPD42 MOV42 INS42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL11 DEL27 DEL25 DEL42 DEL42 DEL27 DEL59 DEL60 DEL8 DEL25 DEL42 DEL27 DEL36 DEL27 DEL42 DEL16 DEL41 DEL8 DEL25 DEL8