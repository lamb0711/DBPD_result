HDFS-12235. Ozone: DeleteKey-3: KSM SCM block deletion message and ACK interactions. Contributed by Weiwei Yang and Yuanbo Liu.

+import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.common.BlockGroup;
+import org.apache.hadoop.utils.BackgroundService;
+import java.util.concurrent.TimeUnit;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_BLOCK_DELETING_SERVICE_INTERVAL_MS;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_BLOCK_DELETING_SERVICE_INTERVAL_MS_DEFAULT;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_BLOCK_DELETING_SERVICE_TIMEOUT;
+import static org.apache.hadoop.ozone.OzoneConfigKeys.OZONE_BLOCK_DELETING_SERVICE_TIMEOUT_DEFAULT;
+  private final BackgroundService keyDeletingService;
+    int svcInterval = conf.getInt(
+        OZONE_BLOCK_DELETING_SERVICE_INTERVAL_MS,
+        OZONE_BLOCK_DELETING_SERVICE_INTERVAL_MS_DEFAULT);
+    long serviceTimeout = conf.getTimeDuration(
+        OZONE_BLOCK_DELETING_SERVICE_TIMEOUT,
+        OZONE_BLOCK_DELETING_SERVICE_TIMEOUT_DEFAULT, TimeUnit.MILLISECONDS);
+    keyDeletingService = new KeyDeletingService(
+        scmBlockClient, this, svcInterval, serviceTimeout, conf);
+  }
+
+  @Override
+  public void start() {
+    keyDeletingService.start();
+  }
+
+  @Override
+  public void stop() throws IOException {
+    keyDeletingService.shutdown();
-
+
+  @Override
+  public List<BlockGroup> getPendingDeletionKeys(final int count)
+      throws IOException {
+    metadataManager.readLock().lock();
+    try {
+      return metadataManager.getPendingDeletionKeys(count);
+    } finally {
+      metadataManager.readLock().unlock();
+    }
+  }
+
+  @Override
+  public void deletePendingDeletionKey(String objectKeyName)
+      throws IOException{
+    Preconditions.checkNotNull(objectKeyName);
+    if (!objectKeyName.startsWith(OzoneConsts.DELETING_KEY_PREFIX)) {
+      throw new IllegalArgumentException("Invalid key name,"
+          + " the name should be the key name with deleting prefix");
+    }
+
+    // Simply removes the entry from KSM DB.
+    metadataManager.writeLock().lock();
+    try {
+      byte[] pendingDelKey = DFSUtil.string2Bytes(objectKeyName);
+      byte[] delKeyValue = metadataManager.get(pendingDelKey);
+      if (delKeyValue == null) {
+        throw new IOException("Failed to delete key " + objectKeyName
+            + " because it is not found in DB");
+      }
+      metadataManager.delete(pendingDelKey);
+    } finally {
+      metadataManager.writeLock().unlock();
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS60 INS60 INS21 INS42 INS21 INS42 INS42 INS21 INS42 INS43 INS43 INS83 INS39 INS42 INS42 INS21 INS54 INS42 INS43 INS42 INS42 INS21 INS25 INS21 INS54 INS39 INS59 INS39 INS59 INS7 INS32 INS32 INS42 INS42 INS32 INS8 INS8 INS42 INS32 INS38 INS8 INS32 INS8 INS8 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS41 INS21 INS42 INS42 INS42 INS32 INS53 INS32 INS42 INS60 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS14 INS42 INS42 INS5 INS59 INS5 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS27 INS39 INS85 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS45