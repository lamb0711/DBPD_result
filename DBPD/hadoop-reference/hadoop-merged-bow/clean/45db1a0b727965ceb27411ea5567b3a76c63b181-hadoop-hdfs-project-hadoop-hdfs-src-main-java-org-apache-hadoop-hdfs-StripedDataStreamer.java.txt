HDFS-8323. Bump GenerationStamp for write faliure in DFSStripedOutputStream. Contributed by Tsz Wo Nicholas Sze.

-      if (coordinator.shouldLocateFollowingBlock()) {
+      if (block != null) {
-          bytes += b == null ? 0 : b.getNumBytes();
+          if (b != null) {
+            StripedBlockUtil.checkBlocks(block, i, b);
+            bytes += b.getNumBytes();
+          }
-      final LocatedStripedBlock lsb
-          = (LocatedStripedBlock)super.locateFollowingBlock(excludedNodes);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Obtained block group " + lsb);
-      }
-      LocatedBlock[] blocks = StripedBlockUtil.parseStripedBlockGroup(lsb,
-          BLOCK_STRIPED_CELL_SIZE, NUM_DATA_BLOCKS, NUM_PARITY_BLOCKS);
-
-      assert blocks.length == (NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS) :
-          "Fail to get block group from namenode: blockGroupSize: " +
-              (NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS) + ", blocks.length: " +
-              blocks.length;
-      for (int i = 0; i < blocks.length; i++) {
-        coordinator.putStripedBlock(i, blocks[i]);
-      }
+      putLoactedBlocks(super.locateFollowingBlock(excludedNodes));
+  void putLoactedBlocks(LocatedBlock lb) throws IOException {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Obtained block group " + lb);
+    }
+    LocatedBlock[] blocks = StripedBlockUtil.parseStripedBlockGroup(
+        (LocatedStripedBlock)lb,
+        BLOCK_STRIPED_CELL_SIZE, NUM_DATA_BLOCKS, NUM_PARITY_BLOCKS);
+
+    // TODO allow write to continue if blocks.length >= NUM_DATA_BLOCKS
+    assert blocks.length == (NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS) :
+        "Fail to get block group from namenode: blockGroupSize: " +
+            (NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS) + ", blocks.length: " +
+            blocks.length;
+    for (int i = 0; i < blocks.length; i++) {
+      coordinator.putStripedBlock(i, blocks[i]);
+    }
+  }
+
+  @Override
+  LocatedBlock updateBlockForPipeline() throws IOException {
+    if (isLeadingStreamer()) {
+      final LocatedBlock updated = super.updateBlockForPipeline();
+      final ExtendedBlock block = updated.getBlock();
+      for (int i = 0; i < NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS; i++) {
+        final LocatedBlock lb = new LocatedBlock(block, null, null, null,
+                -1, updated.isCorrupt(), null);
+        lb.setBlockToken(updated.getBlockToken());
+        coordinator.putStripedBlock(i, lb);
+      }
+    }
+    return coordinator.getStripedBlock(index);
+  }
+
+  @Override
+  ExtendedBlock updatePipeline(long newGS) throws IOException {
+    if (isLeadingStreamer()) {
+      final ExtendedBlock newBlock = super.updatePipeline(newGS);
+      for (int i = 0; i < NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS; i++) {
+        coordinator.putUpdateBlock(i, new ExtendedBlock(newBlock));
+      }
+    }
+    return coordinator.getUpdateBlock(index);
+  }
+

INS31 INS31 INS31 MOV78 INS83 MOV43 INS42 MOV44 INS43 MOV8 INS39 INS42 INS44 MOV8 INS78 INS43 INS42 INS43 INS8 INS78 INS43 INS42 INS44 INS43 INS8 INS42 INS43 INS42 INS42 INS42 INS42 INS25 INS41 INS42 INS42 INS39 INS42 INS42 INS25 INS41 INS8 INS42 INS32 INS8 INS32 INS32 INS8 INS32 MOV25 INS21 INS42 INS60 INS60 INS24 INS42 INS42 INS42 INS42 INS60 INS24 INS42 INS42 INS42 INS27 INS32 MOV11 INS83 INS43 INS59 INS83 INS43 INS59 INS58 INS27 INS37 INS8 INS83 INS43 INS59 INS58 INS27 INS37 INS8 INS42 INS33 INS42 MOV48 INS42 INS42 INS42 INS48 INS42 INS42 INS32 INS39 INS59 INS42 INS27 INS42 INS60 INS21 INS21 INS42 INS42 INS48 INS39 INS59 INS42 INS27 INS42 INS21 UPD42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS25 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS27 INS8 INS43 INS42 INS33 INS33 INS33 INS38 INS32 INS33 INS42 INS42 INS43 INS42 INS42 INS33 INS21 MOV21 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL34 DEL16 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42