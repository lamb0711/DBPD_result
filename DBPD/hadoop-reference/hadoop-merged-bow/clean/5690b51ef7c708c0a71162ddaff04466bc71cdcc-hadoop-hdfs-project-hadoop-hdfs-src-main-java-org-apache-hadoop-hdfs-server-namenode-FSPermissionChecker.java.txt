HDFS-11100. Recursively deleting file protected by sticky bit should fail. Contributed by John Zhuge.

+import java.util.ArrayList;
+import java.util.List;
+import com.google.common.base.Preconditions;
+import org.apache.hadoop.fs.FSExceptionMessages;
+    // Each inode in the subtree has a level. The root inode has level 0.
+    // List subINodePath tracks the inode path in the subtree during
+    // traversal. The root inode is not stored because it is already in array
+    // components. The list index is (level - 1).
+    ArrayList<INodeDirectory> subINodePath = new ArrayList<>();
+
+    // The stack of levels matches the stack of directory inodes.
+    Stack<Integer> levels = new Stack<>();
+    levels.push(0);    // Level 0 is the root
+
+      int level = levels.pop();
+
+        if (level > 0) {
+          if (level - 1 < subINodePath.size()) {
+            subINodePath.set(level - 1, d);
+          } else {
+            Preconditions.checkState(level - 1 == subINodePath.size());
+            subINodePath.add(d);
+          }
+        }
+
+        if (inodeAttr.getFsPermission().getStickyBit()) {
+          for (INode child : cList) {
+            INodeAttributes childInodeAttr =
+                getINodeAttrs(components, pathIdx, child, snapshotId);
+            if (isStickyBitViolated(inodeAttr, childInodeAttr)) {
+              List<byte[]> allComponentList = new ArrayList<>();
+              for (int i = 0; i <= pathIdx; ++i) {
+                allComponentList.add(components[i]);
+              }
+              for (int i = 0; i < level; ++i) {
+                allComponentList.add(subINodePath.get(i).getLocalNameBytes());
+              }
+              allComponentList.add(child.getLocalNameBytes());
+              int index = pathIdx + level;
+              byte[][] allComponents =
+                  allComponentList.toArray(new byte[][]{});
+              throwStickyBitException(
+                  getPath(allComponents, 0, index + 1), child,
+                  getPath(allComponents, 0, index), inode);
+            }
+          }
+        }
+          levels.push(level + 1);
+    INodeAttributes inode = inodes[index + 1];
+    if (!isStickyBitViolated(parent, inode)) {
+      return;
+    }
+
+    throwStickyBitException(getPath(components, 0, index + 1), inode,
+        getPath(components, 0, index), parent);
+  }
+
+  /** Return true when sticky bit is violated. */
+  private boolean isStickyBitViolated(INodeAttributes parent,
+                                      INodeAttributes inode) {
-      return;
+      return false;
-    INodeAttributes inode = inodes[index + 1];
-      return;
+      return false;
+    return true;
+  }
+
+  private void throwStickyBitException(
+      String inodePath, INodeAttributes inode,
+      String parentPath, INodeAttributes parent)
+      throws AccessControlException {
-        "Permission denied by sticky bit: user=%s, path=\"%s\":%s:%s:%s%s, " +
-        "parent=\"%s\":%s:%s:%s%s", user,
-        getPath(components, 0, index + 1),
-        inode.getUserName(), inode.getGroupName(),
-        inode.isDirectory() ? "d" : "-", inode.getFsPermission().toString(),
-        getPath(components, 0, index),
-        parent.getUserName(), parent.getGroupName(),
-        parent.isDirectory() ? "d" : "-", parent.getFsPermission().toString()));
+        FSExceptionMessages.PERMISSION_DENIED_BY_STICKY_BIT +
+            ": user=%s, path=\"%s\":%s:%s:%s%s, " +
+            "parent=\"%s\":%s:%s:%s%s", user, inodePath, inode.getUserName(),
+        inode.getGroupName(), inode.isDirectory() ? "d" : "-",
+        inode.getFsPermission().toString(), parentPath, parent.getUserName(),
+        parent.getGroupName(), parent.isDirectory() ? "d" : "-",
+        parent.getFsPermission().toString()));

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 MOV8 INS60 INS60 INS21 MOV60 MOV25 MOV60 INS25 INS21 INS65 INS43 INS42 INS43 INS42 MOV25 MOV25 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS74 INS59 INS74 INS59 INS32 INS8 INS38 MOV8 INS32 INS66 INS42 INS42 INS8 INS9 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS34 MOV60 INS60 MOV60 INS25 MOV70 INS32 INS42 MOV32 INS42 MOV32 INS42 INS41 INS42 INS42 INS74 INS42 INS42 INS74 INS39 INS59 MOV38 INS8 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS43 INS43 INS42 INS32 MOV60 MOV25 INS25 INS25 INS40 UPD45 INS42 INS42 INS42 INS42 INS27 INS8 INS32 INS8 INS42 INS34 MOV25 INS32 INS42 INS70 INS21 INS27 INS8 INS42 INS42 INS44 INS42 INS8 INS32 INS27 INS32 INS21 INS21 INS21 INS43 INS42 INS60 INS25 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS32 INS32 INS32 INS42 INS43 INS59 INS32 INS8 INS42 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS24 INS24 INS21 INS60 INS60 INS21 INS42 INS34 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS58 INS27 INS38 INS8 INS58 INS27 INS38 INS8 INS32 INS39 INS59 INS5 INS59 INS32 INS42 INS34 INS42 INS42 INS43 INS5 INS42 INS14 INS39 INS59 INS42 INS42 INS42 INS21 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS27 INS39 INS85 INS85 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS39 INS85 INS74 INS42 INS34 INS32 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS34 INS27 INS42 INS42 INS34 INS42 INS43 INS42 INS42 INS2 INS42 INS42 INS32 INS5 INS4 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS39 INS85 INS85 INS42 INS42 INS42 DEL8