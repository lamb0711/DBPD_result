YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)

+import java.text.DecimalFormat;
+import java.util.HashSet;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;
+  // Used to record node reservation by an app.
+  // Key = RackName, Value = Set of Nodes reserved by app on rack
+  private Map<String, Set<String>> reservations = new HashMap<>();
+
-      Container container, boolean alreadyReserved) {
-    LOG.info("Making reservation: node=" + node.getNodeName() +
-        " app_id=" + getApplicationId());
+      Container container, NodeType type, boolean alreadyReserved) {
-    if (!alreadyReserved) {
-      getMetrics().reserveResource(getUser(), container.getResource());
-      RMContainer rmContainer =
-          super.reserve(node, priority, null, container);
-      node.reserveResource(this, priority, rmContainer);
-    } else {
-      RMContainer rmContainer = node.getReservedContainer();
-      super.reserve(node, priority, rmContainer, container);
-      node.reserveResource(this, priority, rmContainer);
+    if (!reservationExceedsThreshold(node, type)) {
+      LOG.info("Making reservation: node=" + node.getNodeName() +
+              " app_id=" + getApplicationId());
+      if (!alreadyReserved) {
+        getMetrics().reserveResource(getUser(), container.getResource());
+        RMContainer rmContainer =
+                super.reserve(node, priority, null, container);
+        node.reserveResource(this, priority, rmContainer);
+        setReservation(node);
+      } else {
+        RMContainer rmContainer = node.getReservedContainer();
+        super.reserve(node, priority, rmContainer, container);
+        node.reserveResource(this, priority, rmContainer);
+        setReservation(node);
+      }
+  private boolean reservationExceedsThreshold(FSSchedulerNode node,
+                                                 NodeType type) {
+    // Only if not node-local
+    if (type != NodeType.NODE_LOCAL) {
+      int existingReservations = getNumReservations(node.getRackName(),
+              type == NodeType.OFF_SWITCH);
+      int totalAvailNodes =
+              (type == NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :
+                      scheduler.getNumNodesInRack(node.getRackName());
+      int numAllowedReservations =
+              (int)Math.ceil(
+                      totalAvailNodes * scheduler.getReservableNodesRatio());
+      if (existingReservations >= numAllowedReservations) {
+        DecimalFormat df = new DecimalFormat();
+        df.setMaximumFractionDigits(2);
+        LOG.info("Reservation Exceeds Allowed number of nodes:" +
+                " app_id=" + getApplicationId() +
+                " existingReservations=" + existingReservations +
+                " totalAvailableNodes=" + totalAvailNodes +
+                " reservableNodesRatio=" + df.format(
+                                        scheduler.getReservableNodesRatio()) +
+                " numAllowedReservations=" + numAllowedReservations);
+        return true;
+      }
+    }
+    return false;
+  }
+    clearReservation(node);
+  private synchronized void setReservation(SchedulerNode node) {
+    String rackName = node.getRackName() == null ? "NULL" : node.getRackName();
+    Set<String> rackReservations = reservations.get(rackName);
+    if (rackReservations == null) {
+      rackReservations = new HashSet<>();
+      reservations.put(rackName, rackReservations);
+    }
+    rackReservations.add(node.getNodeName());
+  }
+
+  private synchronized void clearReservation(SchedulerNode node) {
+    String rackName = node.getRackName() == null ? "NULL" : node.getRackName();
+    Set<String> rackReservations = reservations.get(rackName);
+    if (rackReservations != null) {
+      rackReservations.remove(node.getNodeName());
+    }
+  }
+
+  int getNumReservations(String rackName, boolean isAny) {
+    int counter = 0;
+    if (isAny) {
+      for (Set<String> nodes : reservations.values()) {
+        if (nodes != null) {
+          counter += nodes.size();
+        }
+      }
+    } else {
+      Set<String> nodes = reservations.get(
+              rackName == null ? "NULL" : rackName);
+      if (nodes != null) {
+        counter += nodes.size();
+      }
+    }
+    return counter;
+  }
+
-      reserve(request.getPriority(), node, container, reserved);
+      reserve(request.getPriority(), node, container, type, reserved);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS74 INS42 INS14 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS25 INS41 INS21 INS43 INS42 INS60 INS60 INS25 INS21 INS43 INS42 INS60 INS60 INS25 INS43 INS42 INS39 INS42 INS60 INS25 INS41 INS42 INS42 INS43 INS43 INS74 INS42 INS38 MOV8 INS42 INS42 INS27 INS8 INS9 INS32 INS42 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS43 INS59 INS74 INS59 INS27 INS8 INS42 INS39 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS43 INS32 INS42 INS40 INS60 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS34 INS70 INS60 INS25 INS42 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS27 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS44 INS32 INS8 INS74 INS59 INS27 INS8 INS21 INS21 INS42 INS32 INS42 INS16 INS42 INS11 INS42 INS42 INS60 INS21 INS21 INS41 INS32 INS33 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS25 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS32 INS42 INS32 INS27 INS36 INS32 INS32 INS39 INS32 INS43 INS59 INS32 INS32 INS9 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS43 INS43 INS27 INS8 INS42 INS42 INS42 INS42 INS16 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS34 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS33 INS21 INS27 INS45 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS43 INS27 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS7 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42