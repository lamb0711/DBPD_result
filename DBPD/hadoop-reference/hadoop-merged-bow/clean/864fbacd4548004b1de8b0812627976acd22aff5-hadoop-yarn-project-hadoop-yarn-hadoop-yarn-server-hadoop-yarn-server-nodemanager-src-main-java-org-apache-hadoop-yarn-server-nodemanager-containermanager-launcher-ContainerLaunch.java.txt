YARN-5292. NM Container lifecycle and state transitions to support for PAUSED container state. (Hitesh Sharma via asuresh)

+import org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerKillEvent;
+import org.apache.hadoop.yarn.util.ConverterUtils;
-  
+
+  protected AtomicBoolean shouldPauseContainer = new AtomicBoolean(false);
+
+   * Pause the container.
+   * Cancels the launch if the container isn't launched yet. Otherwise asks the
+   * executor to pause the container.
+   * @throws IOException in case of errors.
+   */
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  public void pauseContainer() throws IOException {
+    ContainerId containerId = container.getContainerId();
+    String containerIdStr = containerId.toString();
+    LOG.info("Pausing the container " + containerIdStr);
+
+    // The pause event is only handled if the container is in the running state
+    // (the container state machine), so we don't check for
+    // shouldLaunchContainer over here
+
+    if (!shouldPauseContainer.compareAndSet(false, true)) {
+      LOG.info("Container " + containerId + " not paused as "
+          + "resume already called");
+      return;
+    }
+
+    try {
+      // Pause the container
+      exec.pauseContainer(container);
+
+      // PauseContainer is a blocking call. We are here almost means the
+      // container is paused, so send out the event.
+      dispatcher.getEventHandler().handle(new ContainerEvent(
+          containerId,
+          ContainerEventType.CONTAINER_PAUSED));
+    } catch (Exception e) {
+      String message =
+          "Exception when trying to pause container " + containerIdStr
+              + ": " + StringUtils.stringifyException(e);
+      LOG.info(message);
+      container.handle(new ContainerKillEvent(container.getContainerId(),
+          ContainerExitStatus.PREEMPTED, "Container preempted as there was "
+          + " an exception in pausing it."));
+    }
+  }
+
+  /**
+   * Resume the container.
+   * Cancels the launch if the container isn't launched yet. Otherwise asks the
+   * executor to pause the container.
+   * @throws IOException in case of error.
+   */
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  public void resumeContainer() throws IOException {
+    ContainerId containerId = container.getContainerId();
+    String containerIdStr = containerId.toString();
+    LOG.info("Resuming the container " + containerIdStr);
+
+    // The resume event is only handled if the container is in a paused state
+    // so we don't check for the launched flag here.
+
+    // paused flag will be set to true if process already paused
+    boolean alreadyPaused = !shouldPauseContainer.compareAndSet(false, true);
+    if (!alreadyPaused) {
+      LOG.info("Container " + containerIdStr + " not paused."
+          + " No resume necessary");
+      return;
+    }
+
+    // If the container has already started
+    try {
+        exec.resumeContainer(container);
+        // ResumeContainer is a blocking call. We are here almost means the
+        // container is resumed, so send out the event.
+        dispatcher.getEventHandler().handle(new ContainerEvent(
+            containerId,
+            ContainerEventType.CONTAINER_RESUMED));
+    } catch (Exception e) {
+      String message =
+          "Exception when trying to resume container " + containerIdStr
+              + ": " + StringUtils.stringifyException(e);
+      LOG.info(message);
+      container.handle(new ContainerKillEvent(container.getContainerId(),
+          ContainerExitStatus.PREEMPTED, "Container preempted as there was "
+          + " an exception in pausing it."));
+    }
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS83 INS43 INS59 INS29 INS79 INS83 INS39 INS42 INS43 INS8 INS29 INS79 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS14 INS65 INS65 INS42 INS45 INS42 INS60 INS60 INS21 INS25 INS54 INS65 INS65 INS42 INS45 INS42 INS60 INS60 INS21 INS60 INS25 INS54 INS43 INS9 INS66 INS66 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS32 INS38 INS8 INS8 INS12 INS66 INS66 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS32 INS39 INS59 INS38 INS8 INS8 INS12 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS21 INS41 INS21 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS38 INS42 INS21 INS41 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS9 INS9 INS32 INS32 INS32 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS9 INS9 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS43 INS59 INS32 INS32 INS45 INS42 INS45 INS45 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS45 INS42 INS45 INS45 INS42 INS42 INS43 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS45 INS42 INS45 INS32 INS43 INS32 INS40 INS27 INS42 INS45 INS42 INS45 INS32 INS43 INS32 INS40 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45