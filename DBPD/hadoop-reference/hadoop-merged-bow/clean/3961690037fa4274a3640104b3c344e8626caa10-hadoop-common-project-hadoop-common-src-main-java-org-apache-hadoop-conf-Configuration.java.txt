HADOOP-15973. Configuration: Included properties are not cached if resource is a stream. Contributed by Eric Payne

-import java.net.MalformedURLException;
-      XMLStreamReader2 reader = null;
-      boolean isRestricted = wrapper.isParserRestricted();
-      if (resource instanceof URL) {                  // an URL resource
-        reader = (XMLStreamReader2)parse((URL)resource, isRestricted);
-      } else if (resource instanceof String) {        // a CLASSPATH resource
-        URL url = getResource((String)resource);
-        reader = (XMLStreamReader2)parse(url, isRestricted);
-      } else if (resource instanceof Path) {          // a file resource
-        // Can't use FileSystem API or we get an infinite loop
-        // since FileSystem uses Configuration API.  Use java.io.File instead.
-        File file = new File(((Path)resource).toUri().getPath())
-          .getAbsoluteFile();
-        if (file.exists()) {
-          if (!quiet) {
-            LOG.debug("parsing File " + file);
-          }
-          reader = (XMLStreamReader2)parse(new BufferedInputStream(
-              new FileInputStream(file)), ((Path)resource).toString(),
-              isRestricted);
-        }
-      } else if (resource instanceof InputStream) {
-        reader = (XMLStreamReader2)parse((InputStream)resource, null,
-            isRestricted);
+      if (resource instanceof InputStream) {
+      XMLStreamReader2 reader = getStreamReader(wrapper, quiet);
+  private XMLStreamReader2 getStreamReader(Resource wrapper, boolean quiet)
+      throws XMLStreamException, IOException {
+    Object resource = wrapper.getResource();
+    boolean isRestricted = wrapper.isParserRestricted();
+    XMLStreamReader2 reader = null;
+    if (resource instanceof URL) {                  // an URL resource
+      reader  = (XMLStreamReader2)parse((URL)resource, isRestricted);
+    } else if (resource instanceof String) {        // a CLASSPATH resource
+      URL url = getResource((String)resource);
+      reader = (XMLStreamReader2)parse(url, isRestricted);
+    } else if (resource instanceof Path) {          // a file resource
+      // Can't use FileSystem API or we get an infinite loop
+      // since FileSystem uses Configuration API.  Use java.io.File instead.
+      File file = new File(((Path)resource).toUri().getPath())
+        .getAbsoluteFile();
+      if (file.exists()) {
+        if (!quiet) {
+          LOG.debug("parsing File " + file);
+        }
+        reader = (XMLStreamReader2)parse(new BufferedInputStream(
+            new FileInputStream(file)), ((Path)resource).toString(),
+            isRestricted);
+      }
+    } else if (resource instanceof InputStream) {
+      reader = (XMLStreamReader2)parse((InputStream)resource, null,
+          isRestricted);
+    }
+    return reader;
+  }
+
-    private void handleStartElement() throws MalformedURLException {
+    private void handleStartElement() throws XMLStreamException, IOException {
-    private void handleInclude() throws MalformedURLException {
+    private void handleInclude() throws XMLStreamException, IOException {
+      List<ParsedItem> items;
-          loadResource(properties, classpathResource, quiet);
+          XMLStreamReader2 includeReader =
+              getStreamReader(classpathResource, quiet);
+          if (includeReader == null) {
+            throw new RuntimeException(classpathResource + " not found");
+          }
+          items = new Parser(includeReader, classpathResource, quiet).parse();
-          loadResource(properties, uriResource, quiet);
+          XMLStreamReader2 includeReader =
+              getStreamReader(uriResource, quiet);
+          if (includeReader == null) {
+            throw new RuntimeException(uriResource + " not found");
+          }
+          items = new Parser(includeReader, uriResource, quiet).parse();
+      results.addAll(items);

INS31 INS83 INS43 INS42 INS44 INS44 INS43 INS43 MOV8 MOV60 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS41 INS43 UPD43 INS43 UPD43 INS8 INS42 INS42 INS42 UPD42 INS42 UPD42 INS60 INS21 INS60 MOV21 MOV60 MOV25 INS60 MOV25 MOV60 MOV25 MOV60 MOV70 MOV21 MOV25 MOV41 INS74 INS59 INS32 INS43 INS59 INS8 INS43 INS59 INS25 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV21 INS42 INS42 INS32 INS62 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS25 INS60 INS25 INS42 INS43 INS59 INS27 INS8 INS7 INS43 INS59 INS27 INS8 INS7 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS43 INS27 INS43 INS42 INS42 INS42 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32