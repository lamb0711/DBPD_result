HDFS-11802. Ozone : add DEBUG CLI support for open container db file. Contributed by Chen Liang

+import static org.apache.hadoop.ozone.OzoneConsts.OPEN_CONTAINERS_DB;
+  // for openContainer.db
+  private static final String CREATE_OPEN_CONTAINER =
+      "CREATE TABLE openContainer (" +
+          "containerName TEXT PRIMARY KEY NOT NULL, " +
+          "containerUsed INTEGER NOT NULL)";
+  private static final String INSERT_OPEN_CONTAINER =
+      "INSERT INTO openContainer (containerName, containerUsed) " +
+          "VALUES (\"%s\", \"%s\")";
+    } else if (dbName.toString().equals(OPEN_CONTAINERS_DB)) {
+      LOG.info("Converting open container DB");
+      convertOpenContainerDB(dbPath, outPath);
-         Connection conn = connectDB(outPath.toString())) {
+         Connection conn = connectDB(outPath.toString());
+         DBIterator iter = dbStore.getIterator()) {
-      DBIterator iter = dbStore.getIterator();
-         Connection conn = connectDB(outPath.toString())) {
+         Connection conn = connectDB(outPath.toString());
+         DBIterator iter = dbStore.getIterator()) {
-      DBIterator iter = dbStore.getIterator();
-         Connection conn = connectDB(outPath.toString())) {
+         Connection conn = connectDB(outPath.toString());
+         DBIterator iter = dbStore.getIterator()) {
-      DBIterator iter = dbStore.getIterator();
+  /**
+   * Convert openContainer.db to sqlite db file. This is rather simple db,
+   * the schema has only one table:
+   *
+   * openContainer
+   * -------------------------------
+   * containerName* | containerUsed
+   * -------------------------------
+   *
+   * @param dbPath path to container db.
+   * @param outPath path to output sqlite
+   * @throws IOException throws exception.
+   */
+  private void convertOpenContainerDB(Path dbPath, Path outPath)
+      throws Exception {
+    LOG.info("Create table for open container db.");
+    File dbFile = dbPath.toFile();
+    org.iq80.leveldb.Options dbOptions = new org.iq80.leveldb.Options();
+    try (LevelDBStore dbStore = new LevelDBStore(dbFile, dbOptions);
+        Connection conn = connectDB(outPath.toString());
+        DBIterator iter = dbStore.getIterator()) {
+      executeSQL(conn, CREATE_OPEN_CONTAINER);
+
+      iter.seekToFirst();
+      while (iter.hasNext()) {
+        Map.Entry<byte[], byte[]> entry = iter.next();
+        String containerName = DFSUtil.bytes2String(entry.getKey());
+        Long containerUsed = Long.parseLong(
+            DFSUtil.bytes2String(entry.getValue()));
+        String insertOpenContainer = String.format(
+            INSERT_OPEN_CONTAINER, containerName, containerUsed);
+        executeSQL(conn, insertOpenContainer);
+      }
+    }
+  }
+

INS26 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS27 INS42 INS42 INS27 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS54 INS45 INS45 INS45 INS45 INS45 INS58 INS58 INS58 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS58 INS58 INS58 INS8 MOV43 MOV59 MOV43 MOV59 MOV43 MOV59 INS42 INS42 INS45 INS42 INS42 INS32 INS40 INS42 INS14 INS43 INS59 INS43 INS59 INS43 INS59 INS21 INS21 INS61 INS25 INS42 INS42 INS43 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS8 INS32 INS8 MOV8 INS40 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS21 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS32 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL60 DEL60 DEL60