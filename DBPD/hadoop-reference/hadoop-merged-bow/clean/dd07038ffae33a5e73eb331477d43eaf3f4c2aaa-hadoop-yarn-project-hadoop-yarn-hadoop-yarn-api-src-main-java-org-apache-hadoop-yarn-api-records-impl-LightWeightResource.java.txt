YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)

Change-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595

+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
-import static org.apache.hadoop.yarn.api.records.ResourceInformation.MEMORY_MB;
-import static org.apache.hadoop.yarn.api.records.ResourceInformation.MEMORY_URI;
-import static org.apache.hadoop.yarn.api.records.ResourceInformation.VCORES_URI;
+import static org.apache.hadoop.yarn.api.records.ResourceInformation.*;
- * <code>LightResource</code> extends Resource to handle base resources such
+ * <code>LightWeightResource</code> extends Resource to handle base resources such
-  public LightWeightResource(long memory, long vcores) {
-    this.memoryResInfo = LightWeightResource.newDefaultInformation(MEMORY_URI,
-        MEMORY_MB.getUnits(), memory);
-    this.vcoresResInfo = LightWeightResource.newDefaultInformation(VCORES_URI,
-        "", vcores);
+  public LightWeightResource(long memory, int vcores) {
+    int numberOfKnownResourceTypes = ResourceUtils
+        .getNumberOfKnownResourceTypes();
+    initResourceInformations(memory, vcores, numberOfKnownResourceTypes);
-    resources = new ResourceInformation[NUM_MANDATORY_RESOURCES];
-    resources[MEMORY_INDEX] = memoryResInfo;
-    resources[VCORES_INDEX] = vcoresResInfo;
+    if (numberOfKnownResourceTypes > 2) {
+      ResourceInformation[] types = ResourceUtils.getResourceTypesArray();
+      for (int i = 2; i < numberOfKnownResourceTypes; i++) {
+        resources[i] = new ResourceInformation();
+        ResourceInformation.copy(types[i], resources[i]);
+      }
+    }
-  private static ResourceInformation newDefaultInformation(String name,
-      String unit, long value) {
-    ResourceInformation ri = new ResourceInformation();
-    ri.setName(name);
-    ri.setValue(value);
-    ri.setResourceType(ResourceTypes.COUNTABLE);
-    ri.setUnitsWithoutValidation(unit);
-    ri.setMinimumAllocation(0);
-    ri.setMaximumAllocation(Long.MAX_VALUE);
-    return ri;
+  public LightWeightResource(long memory, int vcores,
+      ResourceInformation[] source) {
+    int numberOfKnownResourceTypes = ResourceUtils
+        .getNumberOfKnownResourceTypes();
+    initResourceInformations(memory, vcores, numberOfKnownResourceTypes);
+
+    for (int i = 2; i < numberOfKnownResourceTypes; i++) {
+      resources[i] = new ResourceInformation();
+      ResourceInformation.copy(source[i], resources[i]);
+    }
+  }
+
+  private void initResourceInformations(long memory, int vcores,
+      int numberOfKnownResourceTypes) {
+    this.memoryResInfo = newDefaultInformation(MEMORY_URI, MEMORY_MB.getUnits(),
+        memory);
+    this.vcoresResInfo = newDefaultInformation(VCORES_URI, VCORES.getUnits(),
+        vcores);
+
+    resources = new ResourceInformation[numberOfKnownResourceTypes];
+    resources[MEMORY_INDEX] = memoryResInfo;
+    resources[VCORES_INDEX] = vcoresResInfo;
+    if (resources.length > 2) {
+      ResourceInformation[] otherVectors = other.getResources();
+
+      if (resources.length != otherVectors.length) {
+        return false;
+      }
+
+      for (int i = 2; i < resources.length; i++) {
+        ResourceInformation a = resources[i];
+        ResourceInformation b = otherVectors[i];
+        if ((a != b) && ((a == null) || !a.equals(b))) {
+          return false;
+        }
+      }
+    }
+
-    // existing behaviour
-    long diff = this.getMemorySize() - other.getMemorySize();
-    if (diff == 0) {
-      return this.getVirtualCores() - other.getVirtualCores();
-    } else if (diff > 0){
-      return 1;
-    } else {
-      return -1;
+    // existing behavior.
+    if (resources.length <= 2) {
+      long diff = this.getMemorySize() - other.getMemorySize();
+      if (diff == 0) {
+        return this.getVirtualCores() - other.getVirtualCores();
+      } else if (diff > 0) {
+        return 1;
+      } else {
+        return -1;
+      }
+
+    return super.compareTo(other);

UPD40 UPD40 INS31 INS31 UPD83 MOV83 INS42 MOV44 MOV44 INS8 INS83 INS42 INS44 INS44 INS44 INS8 UPD83 INS39 UPD42 INS44 INS8 UPD66 INS39 INS42 UPD39 UPD42 MOV60 MOV21 INS25 INS39 INS42 INS39 INS42 INS5 INS42 INS60 MOV21 INS24 UPD39 INS39 INS42 INS25 INS25 INS41 INS39 INS27 INS8 INS43 INS85 INS39 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS27 MOV8 INS48 UPD42 INS32 UPD42 UPD42 INS42 UPD42 INS42 INS34 INS60 INS24 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS39 INS59 INS42 INS42 INS42 MOV21 MOV21 INS40 INS34 INS60 INS25 INS24 INS40 INS34 INS42 INS42 INS42 INS42 MOV5 INS59 INS58 INS27 INS37 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS7 INS32 INS5 INS42 INS5 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS21 MOV21 INS2 INS14 INS42 INS42 INS2 INS2 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS32 INS40 INS40 INS41 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS34 INS7 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS34 MOV43 INS59 MOV43 INS59 INS27 INS8 INS2 MOV14 INS42 INS42 INS2 INS2 INS42 INS42 INS2 INS42 INS2 INS36 INS36 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS9 INS42 INS42 INS36 INS38 INS27 INS32 INS42 INS33 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL42 DEL40 DEL42 DEL42 DEL45 DEL42 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL40 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31