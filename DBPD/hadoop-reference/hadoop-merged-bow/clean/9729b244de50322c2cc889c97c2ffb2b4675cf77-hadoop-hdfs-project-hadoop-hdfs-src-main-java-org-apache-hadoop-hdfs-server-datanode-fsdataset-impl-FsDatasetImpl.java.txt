HDFS-7604. Track and display failed DataNode storage locations in NameNode. Contributed by Chris Nauroth.

+import org.apache.hadoop.hdfs.server.protocol.VolumeFailureSummary;
+import com.google.common.collect.Sets;
+    List<VolumeFailureInfo> volumeFailureInfos = getInitialVolumeFailureInfos(
+        dataLocations, storage);
-    int volsFailed = volsConfigured - storage.getNumStorageDirs();
+    int volsFailed = volumeFailureInfos.size();
-    volumes = new FsVolumeList(volsFailed, datanode.getBlockScanner(),
+    volumes = new FsVolumeList(volumeFailureInfos, datanode.getBlockScanner(),
+  /**
+   * Gets initial volume failure information for all volumes that failed
+   * immediately at startup.  The method works by determining the set difference
+   * between all configured storage locations and the actual storage locations in
+   * use after attempting to put all of them into service.
+   *
+   * @return each storage location that has failed
+   */
+  private static List<VolumeFailureInfo> getInitialVolumeFailureInfos(
+      Collection<StorageLocation> dataLocations, DataStorage storage) {
+    Set<String> failedLocationSet = Sets.newHashSetWithExpectedSize(
+        dataLocations.size());
+    for (StorageLocation sl: dataLocations) {
+      failedLocationSet.add(sl.getFile().getAbsolutePath());
+    }
+    for (Iterator<Storage.StorageDirectory> it = storage.dirIterator();
+         it.hasNext(); ) {
+      Storage.StorageDirectory sd = it.next();
+      failedLocationSet.remove(sd.getRoot().getAbsolutePath());
+    }
+    List<VolumeFailureInfo> volumeFailureInfos = Lists.newArrayListWithCapacity(
+        failedLocationSet.size());
+    long failureDate = Time.now();
+    for (String failedStorageLocation: failedLocationSet) {
+      volumeFailureInfos.add(new VolumeFailureInfo(failedStorageLocation,
+          failureDate));
+    }
+    return volumeFailureInfos;
+  }
+
-    DataStorage.VolumeBuilder builder =
-        dataStorage.prepareVolume(datanode, location.getFile(), nsInfos);
+    final DataStorage.VolumeBuilder builder;
+    try {
+      builder = dataStorage.prepareVolume(datanode, location.getFile(), nsInfos);
+    } catch (IOException e) {
+      volumes.addVolumeFailureInfo(new VolumeFailureInfo(
+          location.getFile().getAbsolutePath(), Time.now()));
+      throw e;
+    }
-  @Override
+  @Override // FSDatasetMBean
-    return volumes.numberOfFailedVolumes();
+    return volumes.getVolumeFailureInfos().length;
+  }
+
+  @Override // FSDatasetMBean
+  public String[] getFailedStorageLocations() {
+    VolumeFailureInfo[] infos = volumes.getVolumeFailureInfos();
+    List<String> failedStorageLocations = Lists.newArrayListWithCapacity(
+        infos.length);
+    for (VolumeFailureInfo info: infos) {
+      failedStorageLocations.add(info.getFailedStorageLocation());
+    }
+    return failedStorageLocations.toArray(
+        new String[failedStorageLocations.size()]);
+  }
+
+  @Override // FSDatasetMBean
+  public long getLastVolumeFailureDate() {
+    long lastVolumeFailureDate = 0;
+    for (VolumeFailureInfo info: volumes.getVolumeFailureInfos()) {
+      long failureDate = info.getFailureDate();
+      if (failureDate > lastVolumeFailureDate) {
+        lastVolumeFailureDate = failureDate;
+      }
+    }
+    return lastVolumeFailureDate;
+  }
+
+  @Override // FSDatasetMBean
+  public long getEstimatedCapacityLostTotal() {
+    long estimatedCapacityLostTotal = 0;
+    for (VolumeFailureInfo info: volumes.getVolumeFailureInfos()) {
+      estimatedCapacityLostTotal += info.getEstimatedCapacityLost();
+    }
+    return estimatedCapacityLostTotal;
+  }
+
+  @Override // FsDatasetSpi
+  public VolumeFailureSummary getVolumeFailureSummary() {
+    VolumeFailureInfo[] infos = volumes.getVolumeFailureInfos();
+    if (infos.length == 0) {
+      return null;
+    }
+    List<String> failedStorageLocations = Lists.newArrayListWithCapacity(
+        infos.length);
+    long lastVolumeFailureDate = 0;
+    long estimatedCapacityLostTotal = 0;
+    for (VolumeFailureInfo info: infos) {
+      failedStorageLocations.add(info.getFailedStorageLocation());
+      long failureDate = info.getFailureDate();
+      if (failureDate > lastVolumeFailureDate) {
+        lastVolumeFailureDate = failureDate;
+      }
+      estimatedCapacityLostTotal += info.getEstimatedCapacityLost();
+    }
+    return new VolumeFailureSummary(
+        failedStorageLocations.toArray(new String[failedStorageLocations.size()]),
+        lastVolumeFailureDate, estimatedCapacityLostTotal);

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS78 INS83 INS5 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS60 INS65 INS65 INS43 INS43 INS74 INS42 INS43 INS42 INS60 INS70 INS24 INS60 INS60 INS70 INS41 INS54 INS42 INS43 INS85 INS60 INS60 INS70 INS41 INS42 INS60 INS70 INS41 INS42 INS60 INS70 INS41 INS42 INS42 INS60 INS25 INS60 INS60 INS60 INS70 INS41 INS74 INS59 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS74 INS59 INS44 INS42 INS8 INS58 INS32 INS8 INS74 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS83 INS8 INS12 INS22 INS42 INS5 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS39 INS59 INS44 INS32 INS8 INS42 INS39 INS59 INS44 INS32 INS8 INS42 INS5 INS59 INS27 INS8 INS74 INS59 INS39 INS59 INS39 INS59 INS44 INS42 INS8 INS14 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS74 INS59 INS42 INS42 INS60 INS21 INS43 INS43 INS42 INS32 INS42 INS32 INS43 INS42 INS21 INS21 INS44 INS8 INS32 INS42 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS3 INS42 INS34 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS34 INS43 INS42 INS42 INS42 INS21 INS43 INS85 INS42 INS32 INS40 INS34 INS41 INS43 INS43 INS42 INS32 INS42 INS34 INS42 INS34 INS43 INS42 INS21 INS60 INS25 INS21 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS21 INS53 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS5 INS32 INS42 INS39 INS59 INS27 INS8 INS42 INS7 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS39 INS59 INS27 INS8 INS7 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS5 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL27 DEL32