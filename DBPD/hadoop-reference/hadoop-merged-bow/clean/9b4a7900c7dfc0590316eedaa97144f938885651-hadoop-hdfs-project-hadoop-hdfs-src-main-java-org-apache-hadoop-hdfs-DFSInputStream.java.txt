HDFS-3637. Add support for encrypting the DataTransferProtocol. Contributed by Aaron T. Myers.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370354 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.SocketCache.SocketAndStreams;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.hdfs.protocol.datatransfer.InvalidEncryptionKeyException;
+    int refetchEncryptionKey = 1; // only need to get a new encryption key once
-        if (ex instanceof InvalidBlockTokenException && refetchToken > 0) {
+        if (ex instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) {
+          DFSClient.LOG.info("Will fetch a new encryption key and retry, " 
+              + "encryption key was invalid when connecting to " + targetAddr
+              + " : " + ex);
+          // The encryption key used is invalid.
+          refetchEncryptionKey--;
+          dfsClient.clearDataEncryptionKey();
+        } else if (ex instanceof InvalidBlockTokenException && refetchToken > 0) {
+    int refetchEncryptionKey = 1; // only need to get a new encryption key once
-        if (e instanceof InvalidBlockTokenException && refetchToken > 0) {
+        if (e instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) {
+          DFSClient.LOG.info("Will fetch a new encryption key and retry, " 
+              + "encryption key was invalid when connecting to " + targetAddr
+              + " : " + e);
+          // The encryption key used is invalid.
+          refetchEncryptionKey--;
+          dfsClient.clearDataEncryptionKey();
+        } else if (e instanceof InvalidBlockTokenException && refetchToken > 0) {
+      IOStreamPair ioStreams = reader.getStreams();
-      socketCache.put(oldSock);
+      socketCache.put(oldSock, ioStreams);
-      Socket sock = null;
+      SocketAndStreams sockAndStreams = null;
-        sock = socketCache.get(dnAddr);
+        sockAndStreams = socketCache.get(dnAddr);
-      if (sock == null) {
+      Socket sock;
+      if (sockAndStreams == null) {
+      } else {
+        sock = sockAndStreams.sock;
-                                       clientName);
+                                       clientName,
+                                       dfsClient.getDataEncryptionKey(),
+                                       sockAndStreams == null ? null : sockAndStreams.ioStreams);
-        sock.close();
+        if (sockAndStreams != null) {
+          sockAndStreams.close();
+        } else {
+          sock.close();
+        }

INS26 INS26 INS26 INS40 INS40 INS40 INS60 INS60 INS39 INS59 INS39 INS59 INS42 INS34 INS42 INS34 INS60 INS60 INS43 INS59 INS43 MOV43 INS59 INS8 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 UPD42 INS21 INS25 INS25 INS42 INS42 INS7 INS25 INS27 INS8 MOV25 INS27 INS8 MOV25 UPD42 INS42 INS40 INS27 INS8 INS8 INS62 INS27 INS21 INS21 INS21 INS62 INS27 INS21 INS21 INS21 INS32 INS16 INS42 INS33 INS21 MOV21 INS42 INS43 INS42 INS34 INS32 INS37 INS32 INS42 INS43 INS42 INS34 INS32 INS37 INS32 INS42 INS42 INS27 INS33 INS40 INS32 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS27 INS42 INS45 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS45 INS45