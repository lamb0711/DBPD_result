HDDS-78. Add per volume level storage stats in SCM.
Contributed by  Shashikant Banerjee.

-import org.apache.hadoop.hdds.scm.container.placement.metrics.SCMNodeStat;
+import org.apache.hadoop.hdds.protocol.proto.
+    StorageContainerDatanodeProtocolProtos.SCMStorageReport;
+import org.apache.hadoop.ozone.container.common.impl.StorageLocationReport;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
+import java.io.IOException;
+import java.util.*;
-  private final Map<UUID, SCMNodeStat> scmNodeStorageStatMap;
+  private final Map<UUID, Set<StorageLocationReport>> scmNodeStorageReportMap;
-  // Aggregated node stats
-  private SCMNodeStat clusterStat;
-   * constructs the scmNodeStorageStatMap object
+   * constructs the scmNodeStorageReportMap object
-    scmNodeStorageStatMap = new ConcurrentHashMap<>();
+    // scmNodeStorageReportMap = new ConcurrentHashMap<>();
+    scmNodeStorageReportMap = new ConcurrentHashMap<>();
-    clusterStat = new SCMNodeStat();
-   * scmNodeStorageStatMap.
+   * scmNodeStorageReportMap.
-    return scmNodeStorageStatMap.containsKey(datanodeID);
+    return scmNodeStorageReportMap.containsKey(datanodeID);
-    return scmNodeStorageStatMap.entrySet().stream()
-        .filter(entry -> (isThresholdReached(threshold, entry.getValue())))
+    return scmNodeStorageReportMap.entrySet().stream().filter(
+        entry -> (isThresholdReached(threshold,
+            getScmUsedratio(getUsedSpace(entry.getKey()),
+                getCapacity(entry.getKey())))))
-   * @param stat - scmNode stat for the Datanode.
+   * @param report - set if StorageReports.
-  public void insertNewDatanode(UUID datanodeID, SCMNodeStat stat)
+  public void insertNewDatanode(UUID datanodeID, Set<StorageLocationReport> report)
-    Preconditions.checkNotNull(stat);
+    Preconditions.checkNotNull(report);
+    Preconditions.checkState(report.size() != 0);
-    synchronized (scmNodeStorageStatMap) {
+    synchronized (scmNodeStorageReportMap) {
-      scmNodeStorageStatMap.put(datanodeID, stat);
-      clusterStat.add(stat);
+      scmNodeStorageReportMap.putIfAbsent(datanodeID, report);
-   * @param stat - scmNode stat for the Datanode.
+   * @param report - set of Storage Reports for the Datanode.
-  public void updateDatanodeMap(UUID datanodeID, SCMNodeStat stat)
+  public void updateDatanodeMap(UUID datanodeID, Set<StorageLocationReport> report)
-    Preconditions.checkNotNull(stat);
-    synchronized (scmNodeStorageStatMap) {
-      if (!scmNodeStorageStatMap.containsKey(datanodeID)) {
+    Preconditions.checkNotNull(report);
+    Preconditions.checkState(report.size() != 0);
+    synchronized (scmNodeStorageReportMap) {
+      if (!scmNodeStorageReportMap.containsKey(datanodeID)) {
-      SCMNodeStat removed = scmNodeStorageStatMap.get(datanodeID);
-      clusterStat.subtract(removed);
-      scmNodeStorageStatMap.put(datanodeID, stat);
-      clusterStat.add(stat);
+      scmNodeStorageReportMap.put(datanodeID, report);
-  public NodeReportStatus processNodeReport(UUID datanodeID,
+  public StorageReportResult processNodeReport(UUID datanodeID,
-      throws SCMException {
+      throws IOException {
+
-    List<StorageContainerDatanodeProtocolProtos.SCMStorageReport>
+    Set<StorageLocationReport> storagReportSet = new HashSet<>();
+    Set<StorageLocationReport> fullVolumeSet = new HashSet<>();
+    Set<StorageLocationReport> failedVolumeSet = new HashSet<>();
+    List<SCMStorageReport>
-    for (StorageContainerDatanodeProtocolProtos.SCMStorageReport report : storageReports) {
+    for (SCMStorageReport report : storageReports) {
+      StorageLocationReport storageReport =
+          StorageLocationReport.getFromProtobuf(report);
+      storagReportSet.add(storageReport);
+      if (report.hasFailed() && report.getFailed()) {
+        failedVolumeSet.add(storageReport);
+      } else if (isThresholdReached(UtilizationThreshold.CRITICAL,
+          getScmUsedratio(report.getScmUsed(), report.getCapacity()))) {
+        fullVolumeSet.add(storageReport);
+      }
-    SCMNodeStat stat = scmNodeStorageStatMap.get(datanodeID);
-    if (stat == null) {
-      stat = new SCMNodeStat();
-      stat.set(totalCapacity, totalScmUsed, totalRemaining);
-      insertNewDatanode(datanodeID, stat);
+
+    if (!isKnownDatanode(datanodeID)) {
+      insertNewDatanode(datanodeID, storagReportSet);
-      stat.set(totalCapacity, totalScmUsed, totalRemaining);
-      updateDatanodeMap(datanodeID, stat);
+      updateDatanodeMap(datanodeID, storagReportSet);
-    if (isThresholdReached(UtilizationThreshold.CRITICAL, stat)) {
+    if (isThresholdReached(UtilizationThreshold.CRITICAL,
+        getScmUsedratio(totalScmUsed, totalCapacity))) {
-          datanodeID, stat.getCapacity().get(), stat.getScmUsed().get());
-      return NodeReportStatus.DATANODE_OUT_OF_SPACE;
-    } else {
-      if (isThresholdReached(UtilizationThreshold.WARN, stat)) {
-       LOG.warn("Datanode {} is low on storage space. Capacity: {}, Used: {}",
-           datanodeID, stat.getCapacity().get(), stat.getScmUsed().get());
-      }
-      return NodeReportStatus.ALL_IS_WELL;
+          datanodeID, totalCapacity, totalScmUsed);
+      return StorageReportResult.ReportResultBuilder.newBuilder()
+          .setStatus(ReportStatus.DATANODE_OUT_OF_SPACE)
+          .setFullVolumeSet(fullVolumeSet).setFailedVolumeSet(failedVolumeSet)
+          .build();
+    if (isThresholdReached(UtilizationThreshold.WARN,
+        getScmUsedratio(totalScmUsed, totalCapacity))) {
+      LOG.warn("Datanode {} is low on storage space. Capacity: {}, Used: {}",
+          datanodeID, totalCapacity, totalScmUsed);
+    }
+
+    if (failedVolumeSet.isEmpty() && !fullVolumeSet.isEmpty()) {
+      return StorageReportResult.ReportResultBuilder.newBuilder()
+          .setStatus(ReportStatus.STORAGE_OUT_OF_SPACE)
+          .setFullVolumeSet(fullVolumeSet).build();
+    }
+
+    if (!failedVolumeSet.isEmpty() && fullVolumeSet.isEmpty()) {
+      return StorageReportResult.ReportResultBuilder.newBuilder()
+          .setStatus(ReportStatus.FAILED_STORAGE)
+          .setFailedVolumeSet(failedVolumeSet).build();
+    }
+    if (!failedVolumeSet.isEmpty() && !fullVolumeSet.isEmpty()) {
+      return StorageReportResult.ReportResultBuilder.newBuilder()
+          .setStatus(ReportStatus.FAILED_AND_OUT_OF_SPACE_STORAGE)
+          .setFailedVolumeSet(failedVolumeSet).setFullVolumeSet(fullVolumeSet)
+          .build();
+    }
+    return StorageReportResult.ReportResultBuilder.newBuilder()
+        .setStatus(ReportStatus.ALL_IS_WELL).build();
-      SCMNodeStat stat) {
+      double scmUsedratio) {
-      return stat.getScmUsedratio() < warningUtilizationThreshold;
+      return scmUsedratio < warningUtilizationThreshold;
-      return stat.getScmUsedratio() >= warningUtilizationThreshold &&
-          stat.getScmUsedratio() < criticalUtilizationThreshold;
+      return scmUsedratio >= warningUtilizationThreshold
+          && scmUsedratio < criticalUtilizationThreshold;
-      return stat.getScmUsedratio() >= criticalUtilizationThreshold;
+      return scmUsedratio >= criticalUtilizationThreshold;
-    return scmNodeStorageStatMap.get(dnId).getCapacity().get();
+    long capacity = 0;
+    Set<StorageLocationReport> reportSet = scmNodeStorageReportMap.get(dnId);
+    for (StorageLocationReport report : reportSet) {
+      capacity += report.getCapacity();
+    }
+    return capacity;
-    return scmNodeStorageStatMap.get(dnId).getRemaining().get();
+    long remaining = 0;
+    Set<StorageLocationReport> reportSet = scmNodeStorageReportMap.get(dnId);
+    for (StorageLocationReport report : reportSet) {
+      remaining += report.getRemaining();
+    }
+    return remaining;
-    return scmNodeStorageStatMap.get(dnId).getScmUsed().get();
+    long scmUsed = 0;
+    Set<StorageLocationReport> reportSet = scmNodeStorageReportMap.get(dnId);
+    for (StorageLocationReport report : reportSet) {
+      scmUsed += report.getScmUsed();
+    }
+    return scmUsed;
-    return clusterStat.getCapacity().get();
+    long capacity = 0;
+    Set<UUID> dnIdSet = scmNodeStorageReportMap.keySet();
+    for (UUID id : dnIdSet) {
+      capacity += getCapacity(id);
+    }
+    return capacity;
-    return clusterStat.getScmUsed().get();
+    long scmUsed = 0;
+    Set<UUID> dnIdSet = scmNodeStorageReportMap.keySet();
+    for (UUID id : dnIdSet) {
+      scmUsed += getUsedSpace(id);
+    }
+    return scmUsed;
-    return clusterStat.getRemaining().get();
+    long remaining = 0;
+    Set<UUID> dnIdSet = scmNodeStorageReportMap.keySet();
+    for (UUID id : dnIdSet) {
+      remaining += getRemainingSpace(id);
+    }
+    return remaining;
-   * removes the dataNode from scmNodeStorageStatMap
+   * removes the dataNode from scmNodeStorageReportMap
-    synchronized (scmNodeStorageStatMap) {
-      if (!scmNodeStorageStatMap.containsKey(datanodeID)) {
+    synchronized (scmNodeStorageReportMap) {
+      if (!scmNodeStorageReportMap.containsKey(datanodeID)) {
-      SCMNodeStat stat = scmNodeStorageStatMap.remove(datanodeID);
-      clusterStat.subtract(stat);
+      scmNodeStorageReportMap.remove(datanodeID);
-   * Gets the SCMNodeStat for the datanode
+   * Returns the set of storage volumes for a Datanode.
-   * @return SCMNodeStat
+   * @return set of storage volumes.
-  SCMNodeStat getNodeStat(UUID datanodeID) {
-    return scmNodeStorageStatMap.get(datanodeID);
+  @Override
+  public Set<StorageLocationReport> getStorageVolumes(UUID datanodeID) {
+    return scmNodeStorageReportMap.get(datanodeID);
+
+  /**
+   * Truncate to 4 digits since uncontrolled precision is some times
+   * counter intuitive to what users expect.
+   * @param value - double.
+   * @return double.
+   */
+  private double truncateDecimals(double value) {
+    final int multiplier = 10000;
+    return (double) ((long) (value * multiplier)) / multiplier;
+  }
+
+  /**
+   * get the scmUsed ratio
+   */
+  public  double getScmUsedratio(long scmUsed, long capacity) {
+    double scmUsedRatio =
+        truncateDecimals (scmUsed / (double) capacity);
+    return scmUsedRatio;
+  }
-  public enum NodeReportStatus {
+  public enum ReportStatus {
-    DATANODE_OUT_OF_SPACE
+    DATANODE_OUT_OF_SPACE,
+    STORAGE_OUT_OF_SPACE,
+    FAILED_STORAGE,
+    FAILED_AND_OUT_OF_SPACE_STORAGE
-}
+}

MOV26 UPD40 UPD40 UPD40 UPD40 INS31 INS31 UPD74 UPD43 UPD43 MOV78 MOV44 MOV78 MOV78 MOV44 MOV78 MOV78 MOV78 INS78 INS83 INS74 UPD42 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 INS72 INS72 INS72 INS74 UPD42 INS74 UPD42 INS21 INS74 UPD42 INS21 INS51 UPD42 UPD42 INS60 INS60 INS60 INS70 INS25 INS25 INS25 INS25 INS25 INS25 MOV41 INS39 UPD42 INS60 INS60 INS70 INS41 INS60 INS60 INS70 INS41 INS60 INS60 INS70 INS41 INS60 INS60 INS70 INS41 INS60 INS60 INS70 INS41 INS60 INS60 INS70 INS41 INS42 INS43 INS43 INS65 INS65 INS65 INS39 INS42 INS60 INS41 INS65 INS39 INS42 INS39 INS42 INS60 INS41 INS42 INS42 INS42 UPD43 MOV43 INS43 UPD66 UPD66 UPD42 UPD66 INS43 INS43 INS32 UPD42 UPD42 UPD66 INS43 INS43 INS32 INS42 INS8 INS74 INS59 INS74 INS59 INS74 INS59 UPD74 MOV44 MOV42 INS8 INS38 INS8 INS8 MOV32 MOV8 MOV32 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS42 UPD66 UPD42 UPD66 UPD66 UPD42 MOV42 INS42 INS66 INS66 INS42 INS66 INS66 INS83 INS39 INS59 INS27 INS66 INS39 INS59 INS42 UPD42 INS42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS27 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS27 MOV25 MOV21 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 UPD43 UPD43 MOV60 INS21 INS25 MOV21 MOV21 MOV21 INS32 INS21 MOV21 INS32 INS21 INS41 INS32 INS21 INS32 INS38 INS41 INS38 INS32 INS41 INS38 INS38 INS41 INS32 INS42 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS21 UPD42 INS42 INS34 INS11 INS42 INS42 INS32 INS32 INS34 INS32 INS34 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 UPD43 INS32 UPD27 MOV27 INS8 INS25 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS7 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS7 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS7 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS7 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS7 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS7 INS32 INS39 INS36 INS42 INS27 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS43 INS43 INS43 UPD42 UPD42 INS42 INS42 INS42 INS32 INS32 MOV21 INS32 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV45 MOV42 INS42 INS42 INS32 UPD42 MOV42 MOV42 MOV42 MOV45 MOV42 INS42 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 MOV42 MOV42 MOV42 INS11 INS42 INS11 UPD42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS40 INS32 MOV21 MOV32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 MOV42 INS42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS39 INS36 INS39 INS42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS42 UPD42 INS32 UPD42 MOV42 INS40 INS32 INS42 INS40 INS32 UPD42 INS42 INS27 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 INS32 UPD42 INS40 INS40 INS42 INS40 INS42 INS32 UPD42 MOV42 INS40 INS42 INS42 INS42 INS32 INS32 INS40 UPD42 MOV42 INS40 INS42 INS42 MOV32 INS42 INS32 UPD42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL40 DEL40 DEL42 DEL33 DEL42 DEL42 DEL43 DEL14 DEL7 DEL32 DEL32 DEL32 DEL21 DEL40 DEL41 DEL40 DEL8 DEL70 DEL32 DEL21 DEL8 DEL32 DEL21 DEL8 DEL25 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL41 DEL32 DEL32 DEL42 DEL32 DEL41 DEL32 DEL32 DEL42 DEL32 DEL41 DEL32 DEL32 DEL41 DEL32 DEL32 DEL41 DEL32 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL43