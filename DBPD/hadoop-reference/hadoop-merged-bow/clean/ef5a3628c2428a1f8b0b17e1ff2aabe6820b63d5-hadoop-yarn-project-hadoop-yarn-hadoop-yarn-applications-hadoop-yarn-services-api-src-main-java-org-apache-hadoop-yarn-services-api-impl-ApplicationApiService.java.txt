YARN-5770. Performance improvement of native-services REST API service. Contributed by Gour Saha

-import java.io.File;
-import java.io.FileReader;
+import java.io.FileNotFoundException;
-import javax.inject.Singleton;
+import org.apache.hadoop.fs.PathNotFoundException;
-import org.apache.slider.common.params.ActionStatusArgs;
+import com.google.inject.Singleton;
+  private static Response SLIDER_VERSION;
+  private static final JsonParser JSON_PARSER = new JsonParser();
+  private static final JsonObject EMPTY_JSON_OBJECT = new JsonObject();
+  private static final ActionListArgs ACTION_LIST_ARGS = new ActionListArgs();
+  private static final ActionFreezeArgs ACTION_FREEZE_ARGS = new ActionFreezeArgs();
+    SLIDER_VERSION = initSliderVersion();
-  @Path("/slider-version")
+  @Path("/versions/slider-version")
+    return SLIDER_VERSION;
+  }
+  private static Response initSliderVersion() {
-    return Response.ok(
-        "{ \"slider_version\": \"" + sliderVersion
-            + "\", \"hadoop_version\": \"" + hadoopVersion + "\"}").build();
+    return Response.ok("{ \"slider_version\": \"" + sliderVersion
+        + "\", \"hadoop_version\": \"" + hadoopVersion + "\"}").build();
-    if (application.getComponents() == null) {
+    if (application.getComponents() == null
+        || application.getComponents().size() == 0) {
+
+      // Since it is a simple app with no components, create a default component
+      application.setComponents(getDefaultComponentAsList(application));
-    // If it is a simple app with no components, then create a default component
-    if (application.getComponents() == null) {
-      application.setComponents(getDefaultComponentAsList(application));
-    }
-
-    JsonObject appRegistryDocker = null;
-      appRegistryDocker = getSliderApplicationRegistry(appName, "docker");
-      return populateAppData(app, appStatus, appRegistryDocker,
-          appRegistryQuicklinks);
+      return populateAppData(app, appStatus, appRegistryQuicklinks);
-      JsonObject appRegistryDocker, JsonObject appRegistryQuicklinks) {
+      JsonObject appRegistryQuicklinks) {
-      applicationRoles = new JsonObject();
+      applicationRoles = EMPTY_JSON_OBJECT;
-          JsonObject componentRole = applicationRoles.get(entry.getKey()) == null ? new JsonObject()
-              : applicationRoles.get(entry.getKey()).getAsJsonObject();
+          JsonObject componentRole = applicationRoles
+              .get(entry.getKey()) == null ? EMPTY_JSON_OBJECT
+                  : applicationRoles.get(entry.getKey()).getAsJsonObject();
-    final File appStatusOutputFile = File.createTempFile("status_", ".json");
-    final ActionStatusArgs statusArgs = new ActionStatusArgs();
-    statusArgs.output = appStatusOutputFile.getAbsolutePath();
-    return invokeSliderClientRunnable(new SliderClientContextRunnable<JsonObject>() {
-      @Override
-      public JsonObject run(SliderClient sliderClient) throws YarnException,
-          IOException, InterruptedException {
-        sliderClient.actionStatus(appName, statusArgs);
-        JsonParser parser = new JsonParser();
-        FileReader reader = null;
-        JsonElement statusElement = null;
-        try {
-          reader = new FileReader(appStatusOutputFile);
-          statusElement = parser.parse(reader);
-        } finally {
-          if (reader != null) {
-            reader.close();
+    return invokeSliderClientRunnable(
+        new SliderClientContextRunnable<JsonObject>() {
+          @Override
+          public JsonObject run(SliderClient sliderClient)
+              throws YarnException, IOException, InterruptedException {
+            String status = null;
+            try {
+              status = sliderClient.actionStatus(appName);
+            } catch (Exception e) {
+              logger.error("Exception calling slider.actionStatus", e);
+              return EMPTY_JSON_OBJECT;
+            }
+            JsonElement statusElement = JSON_PARSER.parse(status);
+            return (statusElement == null || statusElement instanceof JsonNull)
+                ? EMPTY_JSON_OBJECT : (JsonObject) statusElement;
-          appStatusOutputFile.delete();
-        }
-        return (statusElement == null || statusElement instanceof JsonNull) ?
-            new JsonObject() : (JsonObject) statusElement;
-      }
-    });
+        });
-      final String registryName) throws IOException, YarnException,
-      InterruptedException {
-    final File appRegistryOutputFile = File
-        .createTempFile("registry_", ".json");
+      final String registryName)
+      throws IOException, YarnException, InterruptedException {
-    registryArgs.out = appRegistryOutputFile;
-    return invokeSliderClientRunnable(new SliderClientContextRunnable<JsonObject>() {
-      @Override
-      public JsonObject run(SliderClient sliderClient) throws YarnException,
-          IOException, InterruptedException {
-        sliderClient.actionRegistry(registryArgs);
-        JsonParser parser = new JsonParser();
-        FileReader reader = null;
-        JsonElement registryElement = null;
-        try {
-          reader = new FileReader(appRegistryOutputFile);
-          registryElement = parser.parse(reader);
-        } catch (Throwable t) {
-          logger.error("Error reading file {}", appRegistryOutputFile);
-        } finally {
-          if (reader != null) {
-            reader.close();
+    return invokeSliderClientRunnable(
+        new SliderClientContextRunnable<JsonObject>() {
+          @Override
+          public JsonObject run(SliderClient sliderClient)
+              throws YarnException, IOException, InterruptedException {
+            String registry = null;
+            try {
+              registry = sliderClient.actionRegistryGetConfig(registryArgs)
+                .asJson();
+            } catch (FileNotFoundException | PathNotFoundException e) {
+              // ignore and return empty object
+              return EMPTY_JSON_OBJECT;
+            } catch (Exception e) {
+              logger.error("Exception calling slider.actionRegistryGetConfig",
+                  e);
+              return EMPTY_JSON_OBJECT;
+            }
+            JsonElement registryElement = JSON_PARSER.parse(registry);
+            return (registryElement == null
+                || registryElement instanceof JsonNull) ? EMPTY_JSON_OBJECT
+                    : (JsonObject) registryElement;
-          appRegistryOutputFile.delete();
-        }
-        return (registryElement == null || registryElement instanceof JsonNull) ?
-            new JsonObject() : (JsonObject) registryElement;
-      }
-    });
+        });
-          ActionListArgs listArgs = new ActionListArgs();
-          status = sliderClient.actionList(appName, listArgs);
+          status = sliderClient.actionList(appName, ACTION_LIST_ARGS);
-        ActionFreezeArgs freezeArgs = new ActionFreezeArgs();
-        int returnCode = sliderClient.actionFreeze(appName, freezeArgs);
+        int returnCode = sliderClient.actionFreeze(appName, ACTION_FREEZE_ARGS);

MOV26 MOV26 UPD40 UPD40 UPD40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 MOV59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 MOV43 MOV59 INS83 INS83 INS83 MOV43 MOV59 MOV78 INS79 MOV79 MOV79 INS83 INS43 INS42 INS8 INS83 UPD83 UPD42 INS83 MOV43 INS42 MOV44 MOV43 MOV43 MOV43 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 MOV14 UPD42 UPD42 INS21 INS42 INS45 UPD42 MOV42 MOV21 INS41 MOV41 INS7 INS42 INS27 INS42 INS32 MOV27 INS27 MOV21 INS42 INS32 INS34 INS32 INS42 INS42 INS42 INS42 INS54 INS60 INS54 INS60 UPD43 MOV8 INS12 MOV43 INS59 UPD43 INS8 INS12 MOV12 MOV43 INS59 UPD42 UPD42 INS44 INS8 INS42 INS32 INS42 UPD42 UPD42 MOV21 INS44 INS8 INS42 INS32 INS42 INS42 INS43 INS42 MOV21 INS41 UPD42 MOV42 UPD42 MOV42 INS42 INS84 INS42 INS41 UPD43 UPD42 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 UPD42 INS32 INS43 INS43 INS42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS45 UPD42 INS32 INS42 INS42 INS42 UPD45 UPD42 UPD42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL45 DEL79 DEL42 DEL42 DEL32 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL14 DEL83 DEL42 DEL83 DEL43 DEL42 DEL42 DEL45 DEL45 DEL32 DEL59 DEL60 DEL83 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL45 DEL32 DEL59 DEL60 DEL40 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL14 DEL60 DEL60