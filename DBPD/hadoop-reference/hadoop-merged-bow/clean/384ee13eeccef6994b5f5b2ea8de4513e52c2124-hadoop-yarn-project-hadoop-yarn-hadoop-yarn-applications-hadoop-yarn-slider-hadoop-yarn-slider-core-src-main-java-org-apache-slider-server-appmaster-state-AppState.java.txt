YARN-6335. Port slider's groovy unit tests to yarn native services. Contributed by Billie Rinaldi

+import org.apache.slider.api.proto.Messages.ComponentCountProto;
+  protected Map<String, ProviderRole> getRoleMap() {
+    return roles;
+  }
+  public Map<Integer, ProviderRole> getRolePriorityMap() {
+    return rolePriorityMap;
+  }
+  @VisibleForTesting
+  public void setRoleHistory(RoleHistory roleHistory) {
+    this.roleHistory = roleHistory;
+  }
+
+    org.apache.slider.api.resource.Configuration conf = app.getConfiguration();
+    startTimeThreshold =
+        conf.getPropertyLong(InternalKeys.INTERNAL_CONTAINER_FAILURE_SHORTLIFE,
+            InternalKeys.DEFAULT_INTERNAL_CONTAINER_FAILURE_SHORTLIFE);
+    failureThreshold = conf.getPropertyInt(CONTAINER_FAILURE_THRESHOLD,
+        DEFAULT_CONTAINER_FAILURE_THRESHOLD);
+    nodeFailureThreshold = conf.getPropertyInt(NODE_FAILURE_THRESHOLD,
+        DEFAULT_NODE_FAILURE_THRESHOLD);
+
+      priority = getNewPriority(priority);
-          createComponent(name, name, component, priority++);
+          createComponent(name, name, component, priority);
-    org.apache.slider.api.resource.Configuration conf = app.getConfiguration();
-    startTimeThreshold =
-        conf.getPropertyLong(InternalKeys.INTERNAL_CONTAINER_FAILURE_SHORTLIFE,
-            InternalKeys.DEFAULT_INTERNAL_CONTAINER_FAILURE_SHORTLIFE);
-    failureThreshold = (int) conf.getPropertyLong(CONTAINER_FAILURE_THRESHOLD,
-        DEFAULT_CONTAINER_FAILURE_THRESHOLD);
-    nodeFailureThreshold = (int) conf.getPropertyLong(NODE_FAILURE_THRESHOLD,
-        DEFAULT_NODE_FAILURE_THRESHOLD);
-
-
-    int threshold = (int) conf
-        .getPropertyLong(NODE_FAILURE_THRESHOLD, nodeFailureThreshold);
+    int threshold = conf.getPropertyInt(NODE_FAILURE_THRESHOLD,
+        nodeFailureThreshold);
+    String label = conf.getProperty(YARN_LABEL_EXPRESSION,
+        DEF_YARN_LABEL_EXPRESSION);
-            placementTimeout, "", component);
+            placementTimeout, label, component);
-  public synchronized void updateComponents(
-      Messages.FlexComponentRequestProto requestProto)
-      throws BadConfigException {
+  @VisibleForTesting
+  public synchronized List<ProviderRole> updateComponents(Map<String, Long>
+      componentCounts) throws BadConfigException {
-      if (component.getName().equals(requestProto.getName())) {
-        component
-            .setNumberOfContainers((long) requestProto.getNumberOfContainers());
+      if (componentCounts.containsKey(component.getName())) {
+        component.setNumberOfContainers(componentCounts.get(component
+            .getName()));
-    buildRoleRequirementsFromResources();
+    return buildRoleRequirementsFromResources();
+  }
+
+  public synchronized List<ProviderRole> updateComponents(
+      Messages.FlexComponentsRequestProto requestProto)
+      throws BadConfigException {
+    Map<String, Long> componentCounts = new HashMap<>();
+    for (ComponentCountProto componentCount : requestProto
+        .getComponentsList()) {
+      componentCounts.put(componentCount.getName(), componentCount
+          .getNumberOfContainers());
+    }
+    return updateComponents(componentCounts);
-    List<RoleStatus> list = new ArrayList<>(getRoleStatusMap().values());
-    for (RoleStatus roleStatus : list) {
-      String name = roleStatus.getName();
-      Component component = roleStatus.getProviderRole().component;
+    for (Component component : app.getComponents()) {
+      String name = component.getName();
-          int priority = roleStatus.getPriority();
-          int newPriority = getNewPriority(priority + i - 1);
+          if (roles.containsKey(newName)) {
+            continue;
+          }
+          int newPriority = getNewPriority(i);
-        log.info("Adding new role {}", name);
+        log.info("Adding new role {}, num containers {}", name,
+            component.getNumberOfContainers());
-            createComponent(name, name, component, roleStatus.getPriority());
+            createComponent(name, name, component, getNewPriority(1));
-        incDesiredContainers(roleStatus,
+        incDesiredContainers(newRole,
-                                   roleStatusMap.get(priority));
+                                   roleStatusMap.get(priority)
+                                       .getProviderRole());
+      log.info("Setting resource requirements for {} to {}", role.getName(),
+          role.getResourceRequirements());
-    incPendingContainers(role);
-  private void incPendingContainers(RoleStatus role) {
-    role.getComponentMetrics().containersPending.incr();
-    appMetrics.containersPending.incr();
+  @VisibleForTesting
+  public void incRequestedContainers(RoleStatus role) {
+    log.info("Incrementing requested containers for {}", role.getName());
+    role.getComponentMetrics().containersRequested.incr();
+    appMetrics.containersRequested.incr();
-  private void decPendingContainers(RoleStatus role) {
-    decPendingContainers(role, 1);
+  private void decRequestedContainers(RoleStatus role) {
+    role.getComponentMetrics().containersRequested.decr();
+    appMetrics.containersRequested.decr();
+    log.info("Decrementing requested containers for {} by {} to {}", role
+        .getName(), 1, role.getComponentMetrics().containersRequested.value());
-  private void decPendingContainers(RoleStatus role, int n) {
-    role.getComponentMetrics().containersPending.decr(n);;
-    appMetrics.containersPending.decr(n);
+  private int decRequestedContainersToFloor(RoleStatus role, int delta) {
+    int actual = decMetricToFloor(role.getComponentMetrics()
+        .containersRequested, delta);
+    appMetrics.containersRequested.decr(actual);
+    log.info("Decrementing requested containers for {} by {} to {}", role
+            .getName(), actual, role.getComponentMetrics().containersRequested
+        .value());
+    return actual;
+  private int decAAPendingToFloor(RoleStatus role, int delta) {
+    int actual = decMetricToFloor(role.getComponentMetrics()
+        .pendingAAContainers, delta);
+    appMetrics.pendingAAContainers.decr(actual);
+    log.info("Decrementing AA pending containers for {} by {} to {}", role
+        .getName(), actual, role.getComponentMetrics().pendingAAContainers
+        .value());
+    return actual;
+  }
-  private void incRunningContainers(RoleStatus role) {
-    role.getComponentMetrics().containersRunning.incr();;
+  private int decMetricToFloor(MutableGaugeInt metric, int delta) {
+    int currentValue = metric.value();
+    int decrAmount = delta;
+    if (currentValue - delta < 0) {
+      decrAmount = currentValue;
+    }
+    metric.decr(decrAmount);
+    return decrAmount;
+  }
+
+  @VisibleForTesting
+  public void incRunningContainers(RoleStatus role) {
+    role.getComponentMetrics().containersRunning.incr();
-    role.getComponentMetrics().containersRunning.decr();;
+    role.getComponentMetrics().containersRunning.decr();
-  private void incFailedContainers(RoleStatus role, ContainerOutcome outcome) {
-    role.getComponentMetrics().containersFailed.incr();
-    appMetrics.containersFailed.incr();
+  @VisibleForTesting
+  public void incFailedContainers(RoleStatus role, ContainerOutcome outcome) {
+    case Disk_failure:
+      appMetrics.containersDiskFailure.incr();
+      appMetrics.containersFailed.incr();
+      role.getComponentMetrics().containersDiskFailure.incr();
+      role.getComponentMetrics().containersFailed.incr();
+      break;
+      appMetrics.containersFailed.incr();
+      role.getComponentMetrics().failedSinceLastThreshold.incr();
+      role.getComponentMetrics().containersFailed.incr();
+      break;
+    case Failed_limits_exceeded:
+      appMetrics.containersLimitsExceeded.incr();
+      appMetrics.failedSinceLastThreshold.incr();
+      appMetrics.containersFailed.incr();
+      role.getComponentMetrics().containersLimitsExceeded.incr();
+      role.getComponentMetrics().failedSinceLastThreshold.incr();
+      role.getComponentMetrics().containersFailed.incr();
+      appMetrics.failedSinceLastThreshold.incr();
+      appMetrics.containersFailed.incr();
+      role.getComponentMetrics().failedSinceLastThreshold.incr();
+      role.getComponentMetrics().containersFailed.incr();
-   * Build up the resource requirements for this role from the
-   * cluster specification, including substituing max allowed values
-   * if the specification asked for it.
+   * Build up the resource requirements for this role from the cluster
+   * specification, including substituting max allowed values if the
+   * specification asked for it (except when
+   * {@link ResourceKeys#YARN_RESOURCE_NORMALIZATION_ENABLED} is set to false).
-    int cores = Math.min(containerMaxCores, component.getResource().getCpus());
+    int cores = DEF_YARN_CORES;
+    if (component.getResource() != null && component.getResource().getCpus()
+        != null) {
+      cores = Math.min(containerMaxCores, component.getResource().getCpus());
+    }
-    long mem = Math.min(containerMaxMemory,
-        Long.parseLong(component.getResource().getMemory()));
+    long rawMem = DEF_YARN_MEMORY;
+    if (component.getResource() != null && component.getResource().getMemory()
+        != null) {
+      if (YARN_RESOURCE_MAX.equals(component.getResource().getMemory())) {
+        rawMem = containerMaxMemory;
+      } else {
+        rawMem = Long.parseLong(component.getResource().getMemory());
+      }
+    }
+    boolean normalize = component.getConfiguration().getPropertyBool(
+        YARN_RESOURCE_NORMALIZATION_ENABLED, true);
+    if (!normalize) {
+      log.info("Resource normalization: disabled");
+      log.debug("Component {} has RAM={}, vCores={}", name, rawMem, cores);
+      return Resources.createResource(rawMem, cores);
+    }
+    long mem = Math.min(containerMaxMemory, rawMem);
-    log.debug("Component {} has RAM={}, vCores ={}", name, mem, cores);
+    log.debug("Component {} has RAM={}, vCores={}", name, mem, cores);
-    return new NodeUpdatedOutcome(false, new ArrayList<AbstractRMOperation>(0));
+    return new NodeUpdatedOutcome(false, new ArrayList<>(0));
-          incFailedContainers(roleStatus, result.outcome);
-    if (failures > threshold) {
+    if (threshold > 0 && failures > threshold) {
-            DEFAULT_CONTAINER_FAILURE_THRESHOLD);
+            failureThreshold);
-    log.debug("Expected {}, Delta: {}", expected, delta);
+    log.debug("Expected {}, Requested/Running {}, Delta: {}", expected,
+        role.getActualAndRequested(), delta);
-              addContainerRequest(operations, request);
+              addContainerRequest(operations, request, role);
-        role.setAAPending((int)pending);
+        role.setAAPending(pending);
-          addContainerRequest(operations, createContainerRequest(role));
+          addContainerRequest(operations, createContainerRequest(role), role);
-      long outstandingRequests = role.getPending() + role.getAAPending();
+      long outstandingRequests = role.getRequested() + role.getAAPending();
+        int pendingCancelled = 0;
+        if (role.getAAPending() > 0) {
+          pendingCancelled = decAAPendingToFloor(role, toCancel);
+        }
+        int remainingToCancel = toCancel - pendingCancelled;
+
-        List<AbstractRMOperation> cancellations = roleHistory.cancelRequestsForRole(role, toCancel);
+        List<AbstractRMOperation> cancellations = roleHistory
+            .cancelRequestsForRole(role, remainingToCancel);
-        if (toCancel != cancellations.size()) {
+        if (remainingToCancel != cancellations.size()) {
-              toCancel, cancellations.size());
+              remainingToCancel, cancellations.size());
-        decPendingContainers(role, toCancel);
-        excess -= toCancel;
+
+        int requestCancelled = decRequestedContainersToFloor(role,
+            remainingToCancel);
+        excess -= pendingCancelled;
+        excess -= requestCancelled;
-            toCancel, excess);
+            pendingCancelled + requestCancelled, excess);
-      AMRMClient.ContainerRequest containerAsk) {
+      AMRMClient.ContainerRequest containerAsk, RoleStatus role) {
+      incRequestedContainers(role);
+    assignments.clear();
+    operations.clear();
-      decPendingContainers(role);
+      decRequestedContainers(role);
-      final long allocated = containersRunning.value();
+      final long allocated = containersRunning.value();
-            if (!addContainerRequest(operations, createAAContainerRequest(role))) {
+            if (!addContainerRequest(operations, createAAContainerRequest(role),
+                role)) {

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS42 INS8 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV60 MOV21 MOV21 MOV21 INS78 INS74 INS43 INS83 INS83 INS74 INS42 INS44 MOV43 INS8 INS78 UPD83 UPD42 INS44 UPD42 MOV44 UPD39 UPD42 MOV44 INS83 INS39 INS42 MOV44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS78 UPD83 INS78 UPD83 INS44 INS43 INS43 INS43 INS41 INS43 INS43 INS43 INS41 INS42 INS43 INS42 INS21 INS60 INS42 INS43 INS43 INS74 INS42 INS42 INS41 INS43 INS43 INS43 INS42 INS60 INS70 INS41 INS42 INS43 INS42 INS21 MOV21 MOV21 INS21 UPD42 INS60 INS21 INS41 INS39 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS39 INS42 INS60 INS60 INS25 INS21 INS41 INS42 INS42 MOV10 INS25 INS60 INS25 INS60 INS25 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS40 INS74 INS59 INS44 INS32 INS8 INS32 INS32 INS42 INS32 INS32 INS39 INS59 INS32 INS42 INS39 INS59 INS32 INS32 INS42 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS42 INS49 INS21 MOV21 INS21 MOV21 INS21 INS21 INS21 INS10 INS21 INS21 INS21 INS21 INS21 INS21 INS49 INS21 INS21 INS21 INS21 INS10 UPD66 UPD66 UPD66 INS65 INS66 INS27 INS8 INS39 INS59 INS27 INS8 INS39 INS59 INS38 INS8 INS27 INS42 INS32 INS32 MOV60 INS22 INS42 INS32 INS32 INS21 INS32 INS42 INS42 INS32 INS42 INS42 INS42 MOV42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS42 INS42 UPD43 UPD42 INS42 INS42 INS21 INS42 INS42 INS45 INS32 UPD42 UPD40 UPD42 INS40 INS42 UPD42 INS42 INS45 INS32 INS32 INS42 INS32 UPD40 UPD42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS34 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS67 INS42 INS27 INS27 INS21 INS42 INS42 INS27 INS27 INS25 INS42 INS32 INS42 INS21 INS21 INS41 UPD45 MOV14 INS27 MOV27 UPD45 INS32 INS21 INS42 INS42 INS42 INS42 INS52 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 INS7 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS74 INS42 INS32 UPD42 INS32 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS7 INS40 INS42 INS22 INS42 INS40 INS42 INS22 INS42 INS22 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS40 INS42 INS40 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS33 INS32 INS33 INS7 INS32 INS33 INS32 INS33 INS32 INS8 INS8 INS32 INS42 INS42 INS9 INS32 INS32 INS32 INS42 INS34 INS42 INS34 UPD42 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 MOV42 INS43 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS7 INS60 INS25 INS60 INS60 INS21 INS32 INS25 UPD45 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS39 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS7 INS42 INS42 INS32 INS32 INS8 INS42 INS42 UPD42 INS42 INS34 INS32 INS34 INS21 INS42 INS27 UPD42 INS42 INS32 UPD42 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS18 UPD42 INS34 INS42 INS42 INS42 INS7 INS42 INS42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL32 DEL11 DEL39 DEL32 DEL11 DEL42 DEL37 DEL39 DEL32 DEL11 DEL45 DEL39 DEL40 DEL43 DEL42 DEL42 DEL32 DEL39 DEL32 DEL11 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL20 DEL20 DEL20 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL34 DEL14 DEL42 DEL42 DEL40 DEL32 DEL21 DEL39 DEL42 DEL11 DEL32 DEL21 DEL42