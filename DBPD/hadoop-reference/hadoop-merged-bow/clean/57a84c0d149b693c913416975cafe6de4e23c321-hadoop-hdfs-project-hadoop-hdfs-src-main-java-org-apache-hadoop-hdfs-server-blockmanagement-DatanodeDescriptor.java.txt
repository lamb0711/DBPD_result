HDFS-7369. Erasure coding: distribute recovery work for striped blocks to DataNode. Contributed by Zhe Zhang.

+import java.util.Arrays;
+import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
+  /** Block and targets pair */
+  @InterfaceAudience.Private
+  @InterfaceStability.Evolving
+  public static class BlockECRecoveryInfo {
+    public final ExtendedBlock block;
+    public final DatanodeDescriptor[] sources;
+    public final DatanodeStorageInfo[] targets;
+    public final short[] missingBlockIndices;
+
+    BlockECRecoveryInfo(ExtendedBlock block, DatanodeDescriptor[] sources,
+        DatanodeStorageInfo[] targets, short[] missingBlockIndices) {
+      this.block = block;
+      this.sources = sources;
+      this.targets = targets;
+      this.missingBlockIndices = missingBlockIndices;
+    }
+
+    @Override
+    public String toString() {
+      return new StringBuilder().append("BlockECRecoveryInfo(\n  ").
+          append("Recovering ").append(block).
+          append(" From: ").append(Arrays.asList(sources)).
+          append(" To: ").append(Arrays.asList(targets)).append(")\n").
+          toString();
+    }
+  }
+
-  private final BlockQueue<BlockTargetPair> replicateBlocks = new BlockQueue<BlockTargetPair>();
+  private final BlockQueue<BlockTargetPair> replicateBlocks =
+      new BlockQueue<>();
+  /** A queue of blocks to be erasure coded by this datanode */
+  private final BlockQueue<BlockECRecoveryInfo> erasurecodeBlocks =
+      new BlockQueue<>();
-  private final BlockQueue<BlockInfoContiguousUnderConstruction> recoverBlocks =
-                                new BlockQueue<BlockInfoContiguousUnderConstruction>();
+  private final BlockQueue<BlockInfoContiguousUnderConstruction>
+      recoverBlocks = new BlockQueue<>();
-  private final LightWeightHashSet<Block> invalidateBlocks = new LightWeightHashSet<Block>();
+  private final LightWeightHashSet<Block> invalidateBlocks =
+      new LightWeightHashSet<>();
+      this.erasurecodeBlocks.clear();
+   * Store block erasure coding work.
+   */
+  void addBlockToBeErasureCoded(ExtendedBlock block, DatanodeDescriptor[] sources,
+      DatanodeStorageInfo[] targets, short[] missingBlockIndicies) {
+    assert(block != null && sources != null && sources.length > 0);
+    BlockECRecoveryInfo task = new BlockECRecoveryInfo(block, sources, targets,
+        missingBlockIndicies);
+    erasurecodeBlocks.offer(task);
+    BlockManager.LOG.debug("Adding block recovery task " + task +
+        "to " + getName() + ", current queue size is " +
+        erasurecodeBlocks.size());
+  }
+
+  /**
+   * The number of work items that are pending to be replicated
+   */
+  int getNumberOfBlocksToBeErasureCoded() {
+    return erasurecodeBlocks.size();
+  }
+
+  /**
+  public List<BlockECRecoveryInfo> getErasureCodeCommand(int maxTransfers) {
+    return erasurecodeBlocks.poll(maxTransfers);
+  }
+
+    int ec = erasurecodeBlocks.size();
+    if(ec > 0) {
+      sb.append(" ").append(ec).append(" blocks to be erasure coded;");
+    }

INS26 INS26 INS40 INS40 INS83 INS42 INS55 INS23 INS31 INS31 INS31 INS29 INS78 INS78 MOV83 INS83 INS42 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS74 INS59 INS29 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS39 INS42 INS8 INS83 INS74 INS42 INS44 INS8 INS65 INS40 INS40 INS83 INS83 INS43 INS59 INS83 INS83 INS5 INS59 INS83 INS83 INS5 INS59 INS83 INS83 INS5 INS59 INS42 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS43 INS43 INS42 INS14 INS65 INS43 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS6 INS60 INS21 INS21 INS65 INS41 INS43 INS43 INS39 INS42 INS41 INS60 INS25 INS66 INS42 INS42 INS43 INS85 INS42 INS43 INS85 INS42 INS39 INS85 INS42 INS43 INS42 INS5 INS42 INS5 INS42 INS5 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS41 UPD74 INS66 INS42 INS42 INS74 UPD74 UPD74 INS66 INS42 INS43 INS85 INS43 INS85 INS39 INS85 INS36 INS43 INS59 INS32 INS32 INS66 INS32 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS43 INS85 INS43 INS85 INS39 INS85 INS7 INS7 INS7 INS7 INS32 INS43 INS21 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS45 INS22 INS42 INS27 INS27 INS40 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS52 INS42 INS42 INS33 INS42 INS33 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS14 INS42 INS45 INS43 INS42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43