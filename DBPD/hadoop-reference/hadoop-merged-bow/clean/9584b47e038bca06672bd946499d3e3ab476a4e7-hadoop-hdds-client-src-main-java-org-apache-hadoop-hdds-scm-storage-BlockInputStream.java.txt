HDDS-1082. OutOfMemoryError because of memory leak in KeyInputStream. Contributed by Supratim Deka.

+import com.google.common.base.Preconditions;
-    return available == EOF ? EOF :
-        Byte.toUnsignedInt(buffers.get(bufferIndex).get());
+    int dataout = EOF;
+
+    if (available == EOF) {
+      Preconditions.checkState (buffers == null); //should have released by now, see below
+    } else {
+      dataout = Byte.toUnsignedInt(buffers.get(bufferIndex).get());
+    }
+
+    if (blockStreamEOF()) {
+      // consumer might use getPos to determine EOF,
+      // so release buffers when serving the last byte of data
+      releaseBuffers();
+    }
+
+    return dataout;
+        Preconditions.checkState(buffers == null); //should have been released by now
+
+    if (blockStreamEOF()) {
+      // smart consumers determine EOF by calling getPos()
+      // so we release buffers when serving the final bytes of data
+      releaseBuffers();
+    }
+
+  /**
+   * Determines if all data in the stream has been consumed
+   *
+   * @return true if EOF, false if more data is available
+   */
+  private boolean blockStreamEOF() {
+    if (buffersHaveData() || chunksRemaining()) {
+      return false;
+    } else {
+      // if there are any chunks, we better be at the last chunk for EOF
+      Preconditions.checkState (((chunks == null) || chunks.isEmpty() ||
+              chunkIndex == (chunks.size() - 1)), "EOF detected, but not at the last chunk");
+      return true;
+    }
+  }
+
+  private void releaseBuffers() {
+    //ashes to ashes, dust to dust
+    buffers = null;
+    bufferIndex = 0;
+  }
+
-      if (chunks == null || chunks.isEmpty()) {
-        // This must be an empty key.
-        return EOF;
-      } else if (buffers == null) {
-        // The first read triggers fetching the first chunk.
-        readChunkFromContainer();
-      } else if (!buffers.isEmpty() &&
-          buffers.get(bufferIndex).hasRemaining()) {
-        // Data is available from the current buffer.
+      if (buffersHaveData()) {
+        // Data is available from buffers
-      } else if (!buffers.isEmpty() &&
-          !buffers.get(bufferIndex).hasRemaining() &&
-          bufferIndex < buffers.size() - 1) {
-        // There are additional buffers available.
-        ++bufferIndex;
-      } else if (chunkIndex < chunks.size() - 1) {
+      } else if (chunksRemaining()) {
+  private boolean buffersHaveData() {
+    boolean hasData = false;
+
+    if (buffers == null || buffers.isEmpty()) {
+      return false;
+    }
+
+    while (bufferIndex < (buffers.size())) {
+      if (buffers.get(bufferIndex).hasRemaining()) {
+        // current buffer has data
+        hasData = true;
+        break;
+      } else {
+        if (buffersRemaining()) {
+          // move to next available buffer
+          ++bufferIndex;
+          Preconditions.checkState (bufferIndex < buffers.size());
+        } else {
+          // no more buffers remaining
+          break;
+        }
+      }
+    }
+
+    return hasData;
+  }
+
+  private boolean buffersRemaining() {
+    return (bufferIndex < (buffers.size() - 1));
+  }
+
+  private boolean chunksRemaining() {
+    if ((chunks == null) || chunks.isEmpty()) {
+      return false;
+    }
+    return (chunkIndex < (chunks.size() - 1));
+  }
+
-    return chunkIndex == -1 ? 0 :
-        chunkOffset[chunkIndex] + buffers.get(bufferIndex).position();
+    if (chunkIndex == -1) {
+      // no data consumed yet, a new stream OR after seek
+      return 0;
+    }
+
+    if (blockStreamEOF()) {
+      // all data consumed, buffers have been released.
+      // get position from the chunk offset and chunk length of last chunk
+      return chunkOffset[chunkIndex] + chunks.get(chunkIndex).getLen();
+    }
+
+    // get position from available buffers of current chunk
+    return chunkOffset[chunkIndex] + buffers.get(bufferIndex).position();

INS26 INS40 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS60 INS25 INS25 INS41 INS25 INS65 INS65 INS25 INS21 INS21 INS60 INS25 INS61 INS41 INS41 INS25 INS41 INS25 INS25 INS39 INS59 MOV27 INS8 INS8 INS32 INS8 INS42 INS32 INS8 INS66 INS66 INS27 INS8 INS8 INS7 INS7 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS36 INS27 INS8 INS36 MOV27 INS8 INS32 INS8 MOV27 INS42 INS42 INS21 INS21 INS42 INS21 INS42 INS21 INS32 INS32 INS41 INS21 INS41 INS42 INS33 INS42 INS34 MOV25 INS42 INS9 MOV27 MOV32 INS41 INS42 INS36 INS25 MOV27 INS36 INS32 INS41 INS27 INS41 INS42 INS41 INS32 INS7 INS32 INS32 INS42 INS42 INS9 INS32 INS9 INS32 MOV25 INS9 INS32 MOV32 INS8 INS8 INS36 INS27 INS42 INS42 INS9 INS42 INS36 INS34 INS27 INS42 INS42 INS27 INS42 MOV32 INS42 INS21 INS42 INS42 INS42 INS36 INS45 UPD42 MOV42 INS32 INS42 INS42 INS21 INS10 INS25 MOV27 INS42 INS33 INS27 INS2 INS32 INS42 INS33 INS32 MOV27 UPD42 MOV42 INS7 INS32 INS8 INS8 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS36 INS27 INS42 INS9 INS42 MOV21 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS33 MOV27 INS42 INS36 INS32 MOV27 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 DEL42 DEL16 DEL41 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL27 DEL38 DEL38 DEL27 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL34 DEL16