Merge branch 'trunk' into HDFS-6581

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java

+import org.apache.hadoop.yarn.api.records.timeline.TimelineDomain;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineDomains;
+  private static final String ENTITY_DATA_TYPE = "entity";
+  private static final String DOMAIN_DATA_TYPE = "domain";
-    opts.addOption("put", true, "Put the TimelineEntities in a JSON file");
+    opts.addOption("put", true, "Put the timeline entities/domain in a JSON file");
+    opts.addOption(ENTITY_DATA_TYPE, false, "Specify the JSON file contains the entities");
+    opts.addOption(DOMAIN_DATA_TYPE, false, "Specify the JSON file contains the domain");
+    ClientResponse resp = doPosting(entitiesContainer, null);
+    return resp.getEntity(TimelinePutResponse.class);
+  }
+
+
+  @Override
+  public void putDomain(TimelineDomain domain) throws IOException,
+      YarnException {
+    if (!isEnabled) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Nothing will be put because timeline service is not enabled");
+      }
+      return;
+    }
+    doPosting(domain, "domain");
+  }
+
+  private ClientResponse doPosting(Object obj, String path) throws IOException, YarnException {
-      resp = doPostingEntities(entitiesContainer);
+      resp = doPostingObject(obj, path);
-    return resp.getEntity(TimelinePutResponse.class);
+    return resp;
-  public ClientResponse doPostingEntities(TimelineEntities entities) {
+  public ClientResponse doPostingObject(Object object, String path) {
-    return webResource.accept(MediaType.APPLICATION_JSON)
-        .type(MediaType.APPLICATION_JSON)
-        .post(ClientResponse.class, entities);
+    if (path != null) {
+      webResource.path(path);
+    }
+    if (path == null) {
+      return webResource.accept(MediaType.APPLICATION_JSON)
+          .type(MediaType.APPLICATION_JSON)
+          .post(ClientResponse.class, object);
+    } else if (path.equals("domain")) {
+      return webResource.path(path).accept(MediaType.APPLICATION_JSON)
+          .type(MediaType.APPLICATION_JSON)
+          .put(ClientResponse.class, object);
+    } else {
+      throw new YarnRuntimeException("Unknown resource type");
+    }
-        putTimelineEntitiesInJSONFile(path);
-        return;
+        if (cliParser.hasOption(ENTITY_DATA_TYPE)) {
+          putTimelineDataInJSONFile(path, ENTITY_DATA_TYPE);
+          return;
+        } else if (cliParser.hasOption(DOMAIN_DATA_TYPE)) {
+          putTimelineDataInJSONFile(path, DOMAIN_DATA_TYPE);
+          return;
+        }
-   *          path to the {@link TimelineEntities} JSON file
+   *          path to the timeline data JSON file
+   * @param type
+   *          the type of the timeline data in the JSON file
-  private static void putTimelineEntitiesInJSONFile(String path) {
+  private static void putTimelineDataInJSONFile(String path, String type) {
-      System.out.println("Error: File [" + jsonFile.getAbsolutePath()
-          + "] doesn't exist");
+      LOG.error("File [" + jsonFile.getAbsolutePath() + "] doesn't exist");
+    TimelineDomains domains = null;
-      entities = mapper.readValue(jsonFile, TimelineEntities.class);
+      if (type.equals(ENTITY_DATA_TYPE)) {
+        entities = mapper.readValue(jsonFile, TimelineEntities.class);
+      } else if (type.equals(DOMAIN_DATA_TYPE)){
+        domains = mapper.readValue(jsonFile, TimelineDomains.class);
+      }
-      System.err.println("Error: " + e.getMessage());
+      LOG.error("Error when reading  " + e.getMessage());
-      TimelinePutResponse response = client.putEntities(
-          entities.getEntities().toArray(
-              new TimelineEntity[entities.getEntities().size()]));
-      if (response.getErrors().size() == 0) {
-        System.out.println("Timeline data is successfully put");
-      } else {
-        for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {
-          System.out.println("TimelineEntity [" + error.getEntityType() + ":" +
-              error.getEntityId() + "] is not successfully put. Error code: " +
-              error.getErrorCode());
+      if (type.equals(ENTITY_DATA_TYPE)) {
+        TimelinePutResponse response = client.putEntities(
+            entities.getEntities().toArray(
+                new TimelineEntity[entities.getEntities().size()]));
+        if (response.getErrors().size() == 0) {
+          LOG.info("Timeline entities are successfully put");
+        } else {
+          for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {
+            LOG.error("TimelineEntity [" + error.getEntityType() + ":" +
+                error.getEntityId() + "] is not successfully put. Error code: " +
+                error.getErrorCode());
+          }
+        }
+      } else if (type.equals(DOMAIN_DATA_TYPE)) {
+        boolean hasError = false;
+        for (TimelineDomain domain : domains.getDomains()) {
+          try {
+            client.putDomain(domain);
+          } catch (Exception e) {
+            LOG.error("Error when putting domain " + domain.getId(), e);
+            hasError = true;
+          }
+        }
+        if (!hasError) {
+          LOG.info("Timeline domains are successfully put");
+    } catch(RuntimeException e) {
+      LOG.error("Error when putting the timeline data", e);
-      System.err.println("Error: " + e.getMessage());
-      e.printStackTrace(System.err);
+      LOG.error("Error when putting the timeline data", e);

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV78 INS83 MOV43 INS42 MOV44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 UPD83 INS43 INS42 INS44 INS44 UPD42 INS44 INS8 UPD42 INS44 INS42 INS42 INS45 INS42 INS42 INS45 INS21 INS21 INS42 INS42 MOV25 MOV60 MOV21 INS60 MOV41 INS42 INS43 INS42 INS42 INS42 INS25 INS21 INS42 INS43 INS42 INS43 INS42 INS41 UPD43 UPD42 INS43 INS42 MOV60 INS25 INS25 INS65 INS65 INS43 INS42 INS60 INS32 INS32 INS43 INS59 INS42 INS38 INS8 INS32 INS42 INS42 INS42 UPD42 INS42 INS27 INS8 INS27 MOV8 INS25 MOV42 UPD66 MOV66 UPD42 MOV42 UPD66 MOV66 INS42 INS43 INS59 INS8 MOV12 INS8 INS12 INS12 UPD45 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS32 INS42 INS25 INS41 INS42 INS42 INS45 INS42 INS33 INS21 INS42 INS33 INS32 INS8 INS8 INS25 INS42 INS42 INS33 INS25 MOV25 INS25 INS44 INS8 INS44 INS8 INS42 INS42 INS33 INS32 INS8 INS32 INS42 INS42 INS45 INS41 INS53 MOV27 INS8 INS32 MOV8 INS25 INS41 INS32 MOV8 INS25 INS43 INS42 INS21 INS43 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS42 UPD42 INS32 INS14 INS25 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS32 INS8 INS42 INS32 INS42 INS32 INS32 UPD42 UPD42 INS42 INS32 INS42 INS57 INS42 INS43 INS45 INS32 INS8 INS25 UPD45 UPD42 MOV42 UPD42 MOV42 INS42 MOV21 UPD42 INS42 INS42 INS42 INS42 INS60 INS70 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS21 INS41 INS32 MOV8 INS7 UPD45 INS39 INS59 INS44 INS32 INS8 INS38 INS8 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS42 INS42 INS54 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS57 UPD42 INS42 UPD45 INS42 INS8 INS12 INS32 UPD42 INS42 INS43 INS21 MOV44 INS8 INS42 INS42 INS45 INS42 UPD42 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS27 INS42 INS42 INS9 INS45 INS32 INS42 INS42 DEL42 DEL25 DEL65 DEL65 DEL40 DEL40 DEL32 DEL40 DEL40 DEL45 DEL32 DEL27 DEL32 DEL21 DEL41 DEL8 DEL12 DEL40 DEL40