Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import java.util.HashMap;
+import org.apache.hadoop.yarn.api.records.ReservationId;
+import org.apache.hadoop.yarn.proto.YarnServerResourceManagerRecoveryProtos.ReservationAllocationStateProto;
+  protected synchronized void storeReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName) throws Exception {
+    LOG.info("Storing reservationallocation for " + reservationIdName + " " +
+            "for plan " + planName);
+    Map<ReservationId, ReservationAllocationStateProto> planState =
+        state.getReservationState().get(planName);
+    if (planState == null) {
+      planState = new HashMap<>();
+      state.getReservationState().put(planName, planState);
+    }
+    ReservationId reservationId =
+        ReservationId.parseReservationId(reservationIdName);
+    planState.put(reservationId, reservationAllocation);
+  }
+
+  @Override
+  protected synchronized void updateReservationState(
+      ReservationAllocationStateProto reservationAllocation, String planName,
+      String reservationIdName) throws Exception {
+    LOG.info("Updating reservationallocation for " + reservationIdName + " " +
+            "for plan " + planName);
+    Map<ReservationId, ReservationAllocationStateProto> planState =
+        state.getReservationState().get(planName);
+    if (planState == null) {
+      throw new YarnRuntimeException("State for plan " + planName + " does " +
+          "not exist");
+    }
+    ReservationId reservationId =
+        ReservationId.parseReservationId(reservationIdName);
+    planState.put(reservationId, reservationAllocation);
+  }
+
+  @Override
+  protected synchronized void removeReservationState(
+      String planName, String reservationIdName) throws Exception {
+    LOG.info("Removing reservationallocation " + reservationIdName
+              + " for plan " + planName);
+
+    Map<ReservationId, ReservationAllocationStateProto> planState =
+        state.getReservationState().get(planName);
+    if (planState == null) {
+      throw new YarnRuntimeException("State for plan " + planName + " does " +
+          "not exist");
+    }
+    ReservationId reservationId =
+        ReservationId.parseReservationId(reservationIdName);
+    planState.remove(reservationId);
+    if (planState.isEmpty()) {
+      state.getReservationState().remove(planName);
+    }
+  }
+
+  @Override

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS25 INS60 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS25 INS60 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS25 INS60 INS21 INS25 INS42 INS42 INS42 INS32 INS74 INS59 INS27 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS74 INS59 INS27 INS8 INS43 INS59 INS32 INS42 INS42 INS32 INS74 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS8 INS42 INS42 INS27 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS43 INS42