HDFS-7647. DatanodeManager.sortLocatedBlocks sorts DatanodeInfos but not StorageIDs. (Contributed by Milan Desai)

+import org.apache.hadoop.hdfs.server.protocol.DatanodeInfoWithStorage;
-  private final DatanodeInfo[] locs;
-  /** Storage ID for each replica */
-  private final String[] storageIDs;
-  // Storage type for each replica, if reported.
-  private final StorageType[] storageTypes;
+  private final DatanodeInfoWithStorage[] locs;
+  private final boolean hasStorageIDs;
+  private final boolean hasStorageTypes;
+  /** Cached storage ID for each replica */
+  private String[] storageIDs;
+  /** Cached storage type for each replica, if reported. */
+  private StorageType[] storageTypes;
-  private static final DatanodeInfo[] EMPTY_LOCS = new DatanodeInfo[0];
+  private static final DatanodeInfoWithStorage[] EMPTY_LOCS =
+      new DatanodeInfoWithStorage[0];
-      this.locs = locs;
+      this.locs = new DatanodeInfoWithStorage[locs.length];
+      for(int i = 0; i < locs.length; i++) {
+        DatanodeInfo di = locs[i];
+        DatanodeInfoWithStorage storage = new DatanodeInfoWithStorage(di,
+            storageIDs != null ? storageIDs[i] : null,
+            storageTypes != null ? storageTypes[i] : null);
+        storage.setDependentHostNames(di.getDependentHostNames());
+        storage.setLevel(di.getLevel());
+        storage.setParent(di.getParent());
+        this.locs[i] = storage;
+      }
+    this.hasStorageIDs = storageIDs != null;
+    this.hasStorageTypes = storageTypes != null;
-  public DatanodeInfo[] getLocations() {
+  /**
+   * Returns the locations associated with this block. The returned array is not
+   * expected to be modified. If it is, caller must immediately invoke
+   * {@link org.apache.hadoop.hdfs.protocol.LocatedBlock#invalidateCachedStorageInfo}
+   * to invalidate the cached Storage ID/Type arrays.
+   */
+  public DatanodeInfoWithStorage[] getLocations() {
+    if(!hasStorageTypes) {
+      return null;
+    }
+    if(storageTypes != null) {
+      return storageTypes;
+    }
+    storageTypes = new StorageType[locs.length];
+    for(int i = 0; i < locs.length; i++) {
+      storageTypes[i] = locs[i].getStorageType();
+    }
+    if(!hasStorageIDs) {
+      return null;
+    }
+    if(storageIDs != null) {
+      return storageIDs;
+    }
+    storageIDs = new String[locs.length];
+    for(int i = 0; i < locs.length; i++) {
+      storageIDs[i] = locs[i].getStorageID();
+    }
+  /**
+   * Invalidates the cached StorageID and StorageType information. Must be
+   * called when the locations array is modified.
+   */
+  public void invalidateCachedStorageInfo() {
+    storageIDs = null;
+    storageTypes = null;
+  }
+
-    for (int i=0; i<locs.length; i++) {
-      if (locs[i].equals(loc)) {
-        cachedList.add(locs[i]);
+    for (DatanodeInfoWithStorage di : locs) {
+      if (loc.equals(di)) {
+        cachedList.add(di);
-        + "; storageIDs=" +
-            (storageIDs != null ? Arrays.asList(storageIDs) : null)
-        + "; storageTypes=" +
-            (storageTypes != null ? Arrays.asList(storageTypes) : null)

INS26 INS40 INS23 INS23 INS31 UPD5 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS29 UPD5 INS29 UPD5 INS8 INS8 INS29 INS83 INS39 INS42 INS8 UPD43 INS42 INS42 INS65 UPD43 INS21 INS21 INS65 UPD43 INS25 INS25 INS21 MOV24 INS41 INS25 INS25 INS21 INS24 INS41 INS65 INS21 INS21 INS70 UPD42 UPD66 INS66 UPD42 UPD5 INS8 INS7 INS7 INS66 INS66 INS65 INS66 UPD42 INS38 INS8 MOV27 MOV8 INS7 INS8 INS42 INS38 INS8 MOV27 MOV8 INS7 INS58 INS27 INS37 INS8 INS42 INS66 INS66 INS7 INS7 INS44 INS42 MOV8 UPD43 MOV21 INS24 INS22 INS27 INS22 INS27 INS67 INS42 INS41 INS42 INS3 INS21 INS42 INS41 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS33 INS42 INS33 INS43 INS42 UPD42 INS58 INS27 INS37 INS8 INS52 INS42 INS42 INS33 INS52 INS42 INS42 INS33 INS40 INS42 INS33 INS5 INS40 INS7 INS33 INS5 INS40 INS42 INS34 INS7 INS42 INS32 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS43 INS85 INS2 MOV32 INS43 INS85 INS2 INS32 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS7 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS2 INS42 INS43 INS85 INS42 INS42 MOV2 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS2 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS16 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS27 INS2 INS33 INS27 INS2 INS33 INS52 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 DEL83 DEL83 DEL42 DEL8 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL36 DEL45 DEL42 DEL42 DEL42 DEL32 DEL33 DEL16 DEL36