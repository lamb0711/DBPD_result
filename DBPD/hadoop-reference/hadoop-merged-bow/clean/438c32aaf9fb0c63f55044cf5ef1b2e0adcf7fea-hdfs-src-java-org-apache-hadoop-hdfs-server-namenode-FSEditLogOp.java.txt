HDFS-2149. Move EditLogOp serialization formats into FsEditLogOp implementations. Contributed by Ivan Kelly.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151238 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.io.ArrayWritable;
+import org.apache.hadoop.hdfs.DeprecatedUTF8;
+import java.io.DataOutputStream;
+  @SuppressWarnings("deprecation")
+  private static ThreadLocal<EnumMap<FSEditLogOpCodes, FSEditLogOp>> opInstances =
+    new ThreadLocal<EnumMap<FSEditLogOpCodes, FSEditLogOp>>() {
+      @Override
+      protected EnumMap<FSEditLogOpCodes, FSEditLogOp> initialValue() {
+        EnumMap<FSEditLogOpCodes, FSEditLogOp> instances 
+          = new EnumMap<FSEditLogOpCodes, FSEditLogOp>(FSEditLogOpCodes.class);
+        instances.put(OP_ADD, new AddOp());
+        instances.put(OP_CLOSE, new CloseOp());
+        instances.put(OP_SET_REPLICATION, new SetReplicationOp());
+        instances.put(OP_CONCAT_DELETE, new ConcatDeleteOp());
+        instances.put(OP_RENAME_OLD, new RenameOldOp());
+        instances.put(OP_DELETE, new DeleteOp());
+        instances.put(OP_MKDIR, new MkdirOp());
+        instances.put(OP_SET_GENSTAMP, new SetGenstampOp());
+        instances.put(OP_DATANODE_ADD, new DatanodeAddOp());
+        instances.put(OP_DATANODE_REMOVE, new DatanodeRemoveOp());
+        instances.put(OP_SET_PERMISSIONS, new SetPermissionsOp());
+        instances.put(OP_SET_OWNER, new SetOwnerOp());
+        instances.put(OP_SET_NS_QUOTA, new SetNSQuotaOp());
+        instances.put(OP_CLEAR_NS_QUOTA, new ClearNSQuotaOp());
+        instances.put(OP_SET_QUOTA, new SetQuotaOp());
+        instances.put(OP_TIMES, new TimesOp());
+        instances.put(OP_SYMLINK, new SymlinkOp());
+        instances.put(OP_RENAME, new RenameOp());
+        instances.put(OP_REASSIGN_LEASE, new ReassignLeaseOp());
+        instances.put(OP_GET_DELEGATION_TOKEN, new GetDelegationTokenOp());
+        instances.put(OP_RENEW_DELEGATION_TOKEN, new RenewDelegationTokenOp());
+        instances.put(OP_CANCEL_DELEGATION_TOKEN, 
+                      new CancelDelegationTokenOp());
+        instances.put(OP_UPDATE_MASTER_KEY, new UpdateMasterKeyOp());
+        instances.put(OP_CHECKPOINT_TIME, new CheckpointTimeOp());
+        instances.put(OP_JSPOOL_START, new JSpoolStartOp());
+        return instances;
+      }
+  };
+
-  public abstract void readFields(DataInputStream in, int logVersion)
+  abstract void readFields(DataInputStream in, int logVersion)
-  static class AddCloseOp extends FSEditLogOp {
+  abstract void writeFields(DataOutputStream out)
+      throws IOException;
+
+  @SuppressWarnings("unchecked")
+  static abstract class AddCloseOp extends FSEditLogOp {
-    public void readFields(DataInputStream in, int logVersion)
+    <T extends AddCloseOp> T setPath(String path) {
+      this.path = path;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setReplication(short replication) {
+      this.replication = replication;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setModificationTime(long mtime) {
+      this.mtime = mtime;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setAccessTime(long atime) {
+      this.atime = atime;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setBlockSize(long blockSize) {
+      this.blockSize = blockSize;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setBlocks(Block[] blocks) {
+      this.blocks = blocks;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setPermissionStatus(PermissionStatus permissions) {
+      this.permissions = permissions;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setClientName(String clientName) {
+      this.clientName = clientName;
+      return (T)this;
+    }
+
+    <T extends AddCloseOp> T setClientMachine(String clientMachine) {
+      this.clientMachine = clientMachine;
+      return (T)this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 nameReplicationPair[] = new DeprecatedUTF8[] { 
+        new DeprecatedUTF8(path), 
+        toLogReplication(replication),
+        toLogLong(mtime),
+        toLogLong(atime),
+        toLogLong(blockSize)};
+      new ArrayWritable(DeprecatedUTF8.class, nameReplicationPair).write(out);
+      new ArrayWritable(Block.class, blocks).write(out);
+      permissions.write(out);
+
+      if (this.opCode == OP_ADD) {
+        new DeprecatedUTF8(clientName).write(out);
+        new DeprecatedUTF8(clientMachine).write(out);
+      }
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+  static class AddOp extends AddCloseOp {
+    private AddOp() {
+      super(OP_ADD);
+    }
+
+    static AddOp getInstance() {
+      return (AddOp)opInstances.get().get(OP_ADD);
+    }
+  }
+
+  static class CloseOp extends AddCloseOp {
+    private CloseOp() {
+      super(OP_CLOSE);
+    }
+
+    static CloseOp getInstance() {
+      return (CloseOp)opInstances.get().get(OP_CLOSE);
+    }
+  }
+
-    public void readFields(DataInputStream in, int logVersion)
+    static SetReplicationOp getInstance() {
+      return (SetReplicationOp)opInstances.get()
+        .get(OP_SET_REPLICATION);
+    }
+
+    SetReplicationOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+
+    SetReplicationOp setReplication(short replication) {
+      this.replication = replication;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      new DeprecatedUTF8(path).write(out);
+      new DeprecatedUTF8(Short.toString(replication)).write(out);
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static ConcatDeleteOp getInstance() {
+      return (ConcatDeleteOp)opInstances.get()
+        .get(OP_CONCAT_DELETE);
+    }
+
+    ConcatDeleteOp setTarget(String trg) {
+      this.trg = trg;
+      return this;
+    }
+
+    ConcatDeleteOp setSources(String[] srcs) {
+      this.srcs = srcs;
+      return this;
+    }
+
+    ConcatDeleteOp setTimestamp(long timestamp) {
+      this.timestamp = timestamp;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      int size = 1 + srcs.length + 1; // trg, srcs, timestamp
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[size];
+      int idx = 0;
+      info[idx++] = new DeprecatedUTF8(trg);
+      for(int i=0; i<srcs.length; i++) {
+        info[idx++] = new DeprecatedUTF8(srcs[i]);
+      }
+      info[idx] = toLogLong(timestamp);
+      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static RenameOldOp getInstance() {
+      return (RenameOldOp)opInstances.get()
+        .get(OP_RENAME_OLD);
+    }
+
+    RenameOldOp setSource(String src) {
+      this.src = src;
+      return this;
+    }
+
+    RenameOldOp setDestination(String dst) {
+      this.dst = dst;
+      return this;
+    }
+
+    RenameOldOp setTimestamp(long timestamp) {
+      this.timestamp = timestamp;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
+        new DeprecatedUTF8(src),
+        new DeprecatedUTF8(dst),
+        toLogLong(timestamp)};
+      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
-        throws IOException {
+    static DeleteOp getInstance() {
+      return (DeleteOp)opInstances.get()
+        .get(OP_DELETE);
+    }
+    DeleteOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+
+    DeleteOp setTimestamp(long timestamp) {
+      this.timestamp = timestamp;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
+        new DeprecatedUTF8(path),
+        toLogLong(timestamp)};
+      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+        throws IOException {
+    
+    static MkdirOp getInstance() {
+      return (MkdirOp)opInstances.get()
+        .get(OP_MKDIR);
+    }
-    public void readFields(DataInputStream in, int logVersion)
+    MkdirOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+
+    MkdirOp setTimestamp(long timestamp) {
+      this.timestamp = timestamp;
+      return this;
+    }
+
+    MkdirOp setPermissionStatus(PermissionStatus permissions) {
+      this.permissions = permissions;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[] {
+        new DeprecatedUTF8(path),
+        toLogLong(timestamp), // mtime
+        toLogLong(timestamp) // atime, unused at this time
+      };
+      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      permissions.write(out);
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static SetGenstampOp getInstance() {
+      return (SetGenstampOp)opInstances.get()
+        .get(OP_SET_GENSTAMP);
+    }
+
+    SetGenstampOp setGenerationStamp(long genStamp) {
+      this.genStamp = genStamp;
+      return this;
+    }
+    
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      new LongWritable(genStamp).write(out);
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+  @SuppressWarnings("deprecation")
-    @SuppressWarnings("deprecation")
-    public void readFields(DataInputStream in, int logVersion)
+    static DatanodeAddOp getInstance() {
+      return (DatanodeAddOp)opInstances.get()
+        .get(OP_DATANODE_ADD);
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      throw new IOException("Deprecated, should not write");
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+  @SuppressWarnings("deprecation")
-    @SuppressWarnings("deprecation")
-    public void readFields(DataInputStream in, int logVersion)
+    static DatanodeRemoveOp getInstance() {
+      return (DatanodeRemoveOp)opInstances.get()
+        .get(OP_DATANODE_REMOVE);
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      throw new IOException("Deprecated, should not write");
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static SetPermissionsOp getInstance() {
+      return (SetPermissionsOp)opInstances.get()
+        .get(OP_SET_PERMISSIONS);
+    }
+
+    SetPermissionsOp setSource(String src) {
+      this.src = src;
+      return this;
+    }
+
+    SetPermissionsOp setPermissions(FsPermission permissions) {
+      this.permissions = permissions;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      new DeprecatedUTF8(src).write(out);
+      permissions.write(out);
+     }
+ 
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static SetOwnerOp getInstance() {
+      return (SetOwnerOp)opInstances.get()
+        .get(OP_SET_OWNER);
+    }
+
+    SetOwnerOp setSource(String src) {
+      this.src = src;
+      return this;
+    }
+
+    SetOwnerOp setUser(String username) {
+      this.username = username;
+      return this;
+    }
+
+    SetOwnerOp setGroup(String groupname) {
+      this.groupname = groupname;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 u = new DeprecatedUTF8(username == null? "": username);
+      DeprecatedUTF8 g = new DeprecatedUTF8(groupname == null? "": groupname);
+      new DeprecatedUTF8(src).write(out);
+      u.write(out);
+      g.write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-
-    public void readFields(DataInputStream in, int logVersion)
+    static SetNSQuotaOp getInstance() {
+      return (SetNSQuotaOp)opInstances.get()
+        .get(OP_SET_NS_QUOTA);
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      throw new IOException("Deprecated");      
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static ClearNSQuotaOp getInstance() {
+      return (ClearNSQuotaOp)opInstances.get()
+        .get(OP_CLEAR_NS_QUOTA);
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      throw new IOException("Deprecated");      
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static SetQuotaOp getInstance() {
+      return (SetQuotaOp)opInstances.get()
+        .get(OP_SET_QUOTA);
+    }
+
+    SetQuotaOp setSource(String src) {
+      this.src = src;
+      return this;
+    }
+
+    SetQuotaOp setNSQuota(long nsQuota) {
+      this.nsQuota = nsQuota;
+      return this;
+    }
+
+    SetQuotaOp setDSQuota(long dsQuota) {
+      this.dsQuota = dsQuota;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      new DeprecatedUTF8(src).write(out);
+      new LongWritable(nsQuota).write(out);
+      new LongWritable(dsQuota).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static TimesOp getInstance() {
+      return (TimesOp)opInstances.get()
+        .get(OP_TIMES);
+    }
+
+    TimesOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+
+    TimesOp setModificationTime(long mtime) {
+      this.mtime = mtime;
+      return this;
+    }
+
+    TimesOp setAccessTime(long atime) {
+      this.atime = atime;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
+        new DeprecatedUTF8(path),
+        toLogLong(mtime),
+        toLogLong(atime)};
+      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static SymlinkOp getInstance() {
+      return (SymlinkOp)opInstances.get()
+        .get(OP_SYMLINK);
+    }
+
+    SymlinkOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+
+    SymlinkOp setValue(String value) {
+      this.value = value;
+      return this;
+    }
+
+    SymlinkOp setModificationTime(long mtime) {
+      this.mtime = mtime;
+      return this;
+    }
+
+    SymlinkOp setAccessTime(long atime) {
+      this.atime = atime;
+      return this;
+    }
+
+    SymlinkOp setPermissionStatus(PermissionStatus permissionStatus) {
+      this.permissionStatus = permissionStatus;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
+        new DeprecatedUTF8(path),
+        new DeprecatedUTF8(value),
+        toLogLong(mtime),
+        toLogLong(atime)};
+      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      permissionStatus.write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static RenameOp getInstance() {
+      return (RenameOp)opInstances.get()
+        .get(OP_RENAME);
+    }
+
+    RenameOp setSource(String src) {
+      this.src = src;
+      return this;
+    }
+
+    RenameOp setDestination(String dst) {
+      this.dst = dst;
+      return this;
+    }
+    
+    RenameOp setTimestamp(long timestamp) {
+      this.timestamp = timestamp;
+      return this;
+    }
+    
+    RenameOp setOptions(Rename[] options) {
+      this.options = options;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      DeprecatedUTF8 info[] = new DeprecatedUTF8[] { 
+        new DeprecatedUTF8(src),
+        new DeprecatedUTF8(dst),
+        toLogLong(timestamp)};
+      new ArrayWritable(DeprecatedUTF8.class, info).write(out);
+      toBytesWritable(options).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+
+    static BytesWritable toBytesWritable(Rename... options) {
+      byte[] bytes = new byte[options.length];
+      for (int i = 0; i < options.length; i++) {
+        bytes[i] = options[i].value();
+      }
+      return new BytesWritable(bytes);
+    }
-    
-    public void readFields(DataInputStream in, int logVersion)
+
+    static ReassignLeaseOp getInstance() {
+      return (ReassignLeaseOp)opInstances.get()
+        .get(OP_REASSIGN_LEASE);
+    }
+
+    ReassignLeaseOp setLeaseHolder(String leaseHolder) {
+      this.leaseHolder = leaseHolder;
+      return this;
+    }
+
+    ReassignLeaseOp setPath(String path) {
+      this.path = path;
+      return this;
+    }
+
+    ReassignLeaseOp setNewHolder(String newHolder) {
+      this.newHolder = newHolder;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      new DeprecatedUTF8(leaseHolder).write(out);
+      new DeprecatedUTF8(path).write(out);
+      new DeprecatedUTF8(newHolder).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static GetDelegationTokenOp getInstance() {
+      return (GetDelegationTokenOp)opInstances.get()
+        .get(OP_GET_DELEGATION_TOKEN);
+    }
+
+    GetDelegationTokenOp setDelegationTokenIdentifier(
+        DelegationTokenIdentifier token) {
+      this.token = token;
+      return this;
+    }
+
+    GetDelegationTokenOp setExpiryTime(long expiryTime) {
+      this.expiryTime = expiryTime;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      token.write(out);
+      toLogLong(expiryTime).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static RenewDelegationTokenOp getInstance() {
+      return (RenewDelegationTokenOp)opInstances.get()
+          .get(OP_RENEW_DELEGATION_TOKEN);
+    }
+
+    RenewDelegationTokenOp setDelegationTokenIdentifier(
+        DelegationTokenIdentifier token) {
+      this.token = token;
+      return this;
+    }
+
+    RenewDelegationTokenOp setExpiryTime(long expiryTime) {
+      this.expiryTime = expiryTime;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      token.write(out);
+      toLogLong(expiryTime).write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static CancelDelegationTokenOp getInstance() {
+      return (CancelDelegationTokenOp)opInstances.get()
+          .get(OP_CANCEL_DELEGATION_TOKEN);
+    }
+
+    CancelDelegationTokenOp setDelegationTokenIdentifier(
+        DelegationTokenIdentifier token) {
+      this.token = token;
+      return this;
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      token.write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-    public void readFields(DataInputStream in, int logVersion)
+    static UpdateMasterKeyOp getInstance() {
+      return (UpdateMasterKeyOp)opInstances.get()
+          .get(OP_UPDATE_MASTER_KEY);
+    }
+
+    UpdateMasterKeyOp setDelegationKey(DelegationKey key) {
+      this.key = key;
+      return this;
+    }
+    
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      key.write(out);
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion)
-  
+
+  static class InvalidOp extends FSEditLogOp {
+    private InvalidOp() {
+      super(OP_INVALID);
+    }
+
+    static InvalidOp getInstance() {
+      return (InvalidOp)opInstances.get().get(OP_INVALID);
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+        throws IOException {
+      // nothing to read
+    }
+  }
+
+  static class JSpoolStartOp extends FSEditLogOp {
+    private JSpoolStartOp() {
+      super(OP_JSPOOL_START);
+    }
+
+    static JSpoolStartOp getInstance() {
+      return (JSpoolStartOp)opInstances.get().get(OP_JSPOOL_START);
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+        throws IOException {
+    }
+  }
+
+  static class CheckpointTimeOp extends FSEditLogOp {
+    long checkpointTime;
+
+    private CheckpointTimeOp() {
+      super(OP_CHECKPOINT_TIME);            
+    }
+    
+    CheckpointTimeOp setCheckpointTime(long time) {
+      this.checkpointTime = time;
+      return this;
+    }
+
+    static CheckpointTimeOp getInstance() {
+      return (CheckpointTimeOp)opInstances.get()
+        .get(OP_CHECKPOINT_TIME);
+    }
+
+    @Override 
+    void writeFields(DataOutputStream out) throws IOException {
+      new LongWritable(checkpointTime).write(out);
+    }
+    
+    @Override
+    void readFields(DataInputStream in, int logVersion)
+        throws IOException {
+      this.checkpointTime = readLong(in);
+    }
+  }
+
+  static private DeprecatedUTF8 toLogReplication(short replication) {
+    return new DeprecatedUTF8(Short.toString(replication));
+  }
+  
+  static private DeprecatedUTF8 toLogLong(long timestamp) {
+    return new DeprecatedUTF8(Long.toString(timestamp));
+  }
+
+   * Class for writing editlog ops
+   */
+  public static class Writer {
+    private final DataOutputStream out;
+
+    public Writer(DataOutputStream out) {
+      this.out = out;
+    }
+
+    /**
+     * Write an operation to the output stream
+     * 
+     * @param op The operation to write
+     * @throws IOException if an error occurs during writing.
+     */
+    public void writeOp(FSEditLogOp op) throws IOException {
+      out.writeByte(op.opCode.getOpCode());
+      
+      op.writeFields(out);
+    }
+  }
+
+  /**
-    private EnumMap<FSEditLogOpCodes, FSEditLogOp> opInstances;
+
-      opInstances = new EnumMap<FSEditLogOpCodes, FSEditLogOp>(
-          FSEditLogOpCodes.class);
-      opInstances.put(OP_ADD, new AddCloseOp(OP_ADD));
-      opInstances.put(OP_CLOSE, new AddCloseOp(OP_CLOSE));
-      opInstances.put(OP_SET_REPLICATION, new SetReplicationOp());
-      opInstances.put(OP_CONCAT_DELETE, new ConcatDeleteOp());
-      opInstances.put(OP_RENAME_OLD, new RenameOldOp());
-      opInstances.put(OP_DELETE, new DeleteOp());
-      opInstances.put(OP_MKDIR, new MkdirOp());
-      opInstances.put(OP_SET_GENSTAMP, new SetGenstampOp());
-      opInstances.put(OP_DATANODE_ADD, new DatanodeAddOp());
-      opInstances.put(OP_DATANODE_REMOVE, new DatanodeRemoveOp());
-      opInstances.put(OP_SET_PERMISSIONS, new SetPermissionsOp());
-      opInstances.put(OP_SET_OWNER, new SetOwnerOp());
-      opInstances.put(OP_SET_NS_QUOTA, new SetNSQuotaOp());
-      opInstances.put(OP_CLEAR_NS_QUOTA, new ClearNSQuotaOp());
-      opInstances.put(OP_SET_QUOTA, new SetQuotaOp());
-      opInstances.put(OP_TIMES, new TimesOp());
-      opInstances.put(OP_SYMLINK, new SymlinkOp());
-      opInstances.put(OP_RENAME, new RenameOp());
-      opInstances.put(OP_REASSIGN_LEASE, new ReassignLeaseOp());
-      opInstances.put(OP_GET_DELEGATION_TOKEN, new GetDelegationTokenOp());
-      opInstances.put(OP_RENEW_DELEGATION_TOKEN, new RenewDelegationTokenOp());
-      opInstances.put(OP_CANCEL_DELEGATION_TOKEN,
-                      new CancelDelegationTokenOp());
-      opInstances.put(OP_UPDATE_MASTER_KEY, new UpdateMasterKeyOp());
-      FSEditLogOp op = opInstances.get(opCode);
+      FSEditLogOp op = opInstances.get().get(opCode);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS55 INS55 INS55 INS55 INS55 INS31 INS31 INS55 MOV79 INS83 INS83 INS74 INS59 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 INS83 INS39 INS42 INS44 INS43 INS79 INS83 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 MOV43 INS31 INS31 INS83 INS42 MOV43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV79 INS31 INS31 MOV79 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS23 INS31 INS31 INS31 INS43 INS74 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS73 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 MOV44 MOV44 MOV43 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS42 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS39 INS59 INS83 INS42 INS8 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS39 INS42 INS41 INS42 INS39 INS42 INS41 INS65 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 MOV29 INS79 INS83 INS42 MOV44 MOV44 MOV44 INS8 INS42 INS43 INS43 INS43 INS74 INS1 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS5 INS42 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS21 INS25 INS42 INS46 INS42 INS41 INS46 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS5 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS24 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS53 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS53 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS53 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS53 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS5 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS43 INS42 INS60 INS24 INS41 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS42 INS21 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS46 INS42 INS39 INS42 INS21 INS41 INS42 INS41 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS14 INS14 INS66 INS42 INS42 INS43 INS42 INS21 INS65 INS65 INS65 MOV43 INS42 INS42 INS21 INS21 INS42 INS45 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS43 MOV74 MOV31 INS42 INS42 INS7 INS11 INS42 INS7 INS11 INS42 INS7 INS11 INS42 INS7 INS11 INS42 INS7 INS11 INS42 INS43 INS85 INS7 INS11 INS42 INS42 INS7 INS11 INS42 INS42 INS7 INS11 INS42 INS42 INS7 INS11 INS42 INS43 INS59 INS32 INS32 INS32 INS27 INS8 INS42 INS11 INS42 INS11 INS11 INS42 INS7 INS52 INS7 INS52 INS42 INS32 INS32 INS11 INS42 INS7 INS52 INS43 INS85 INS7 INS52 INS7 INS52 INS42 INS39 INS59 INS43 INS59 INS39 INS59 INS7 INS58 INS27 INS37 INS8 INS7 INS32 INS11 INS42 INS7 INS52 INS42 INS7 INS52 INS7 INS52 INS42 INS43 INS59 INS32 INS11 INS42 INS7 INS52 INS7 INS52 INS42 INS43 INS59 INS32 INS11 INS42 INS7 INS52 INS7 INS52 INS42 INS7 INS52 INS42 INS43 INS59 INS32 INS32 INS11 INS7 INS52 INS42 INS32 INS11 INS42 INS14 INS11 INS42 INS14 INS11 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS32 INS32 INS11 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS11 INS42 INS14 INS11 INS42 INS14 INS11 INS42 INS7 INS52 INS7 INS52 INS7 INS52 INS42 INS32 INS32 INS32 INS11 INS42 INS7 INS52 INS7 INS52 INS7 INS52 INS42 INS43 INS59 INS32 INS11 INS42 INS7 INS52 INS42 INS7 INS52 INS7 INS52 INS7 INS52 INS42 INS7 INS52 INS42 INS43 INS59 INS32 INS32 INS11 INS42 INS7 INS52 INS42 INS7 INS52 INS7 INS52 INS43 INS85 INS7 INS52 INS42 INS43 INS59 INS32 INS32 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS14 INS11 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS7 INS52 INS42 INS32 INS32 INS32 INS11 INS42 INS7 INS52 INS7 INS52 INS42 INS32 INS32 INS11 INS42 INS7 INS52 INS7 INS52 INS42 INS32 INS32 INS11 INS42 INS7 INS52 INS42 INS32 INS11 INS42 INS7 INS52 INS42 INS32 INS42 INS11 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS7 INS52 INS11 INS42 INS32 INS42 INS7 INS43 INS32 INS43 INS32 INS42 INS7 INS66 INS42 INS66 INS42 INS66 INS32 INS32 INS43 INS42 INS78 UPD83 INS74 INS42 INS22 INS42 INS43 INS52 INS22 INS42 INS43 INS52 INS22 INS42 INS43 INS52 INS22 INS42 INS43 INS52 INS22 INS42 INS43 INS52 INS42 INS22 INS42 INS43 INS52 INS22 INS42 INS43 INS52 INS22 INS42 INS43 INS52 INS22 INS42 INS43 INS52 INS42 INS42 INS85 INS3 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS21 INS21 INS43 INS32 INS43 INS32 INS43 INS32 INS22 INS42 INS22 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS22 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS27 INS42 INS42 INS85 INS3 INS42 INS34 INS2 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS2 INS32 INS14 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS85 INS3 INS14 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS42 INS42 INS85 INS3 INS14 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS85 INS3 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS22 INS42 INS14 INS42 INS42 INS43 INS32 INS43 INS45 INS43 INS32 INS43 INS45 INS43 INS32 INS22 INS42 INS22 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS45 INS43 INS32 INS43 INS45 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS85 INS3 INS14 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS85 INS3 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS85 INS3 INS14 INS42 INS42 INS32 INS42 INS42 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS22 INS42 INS42 INS42 INS42 INS43 INS32 INS22 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS22 INS42 INS43 INS32 INS14 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS60 INS21 INS21 INS41 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS5 INS4 INS43 INS57 INS42 INS43 INS57 INS42 INS52 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS34 INS40 INS34 INS5 INS42 INS42 INS37 INS43 INS42 INS42 INS34 INS7 INS42 INS42 INS42 INS42 INS43 INS57 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS4 INS43 INS57 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS5 INS4 INS43 INS57 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS4 INS43 INS57 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS16 INS43 INS16 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS4 INS43 INS57 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS4 INS43 INS57 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS4 INS43 INS57 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS42 INS43 INS85 INS14 INS32 INS32 INS32 INS32 INS42 INS43 INS42 INS43 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS2 INS14 INS42 INS43 INS42 INS42 INS43 INS85 INS14 INS14 INS32 INS42 INS43 INS42 INS42 INS43 INS85 INS14 INS32 INS42 INS43 INS42 INS42 INS43 INS85 INS14 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS14 INS32 INS32 INS42 INS43 INS42 INS42 INS43 INS85 INS14 INS14 INS32 INS32 INS42 INS43 INS42 INS42 INS43 INS85 INS14 INS14 INS32 INS42 INS43 INS39 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 INS43 INS43 INS43 INS42 MOV14 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS37 INS43 INS2 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL83 DEL31 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL59 DEL23