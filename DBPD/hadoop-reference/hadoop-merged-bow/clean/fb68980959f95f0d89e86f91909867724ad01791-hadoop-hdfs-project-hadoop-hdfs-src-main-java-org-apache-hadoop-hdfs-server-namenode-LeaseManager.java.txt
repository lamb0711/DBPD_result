HDFS-10480. Add an admin command to list currently open files. Contributed by Manoj Govindassamy.

-import java.util.HashMap;
+import org.apache.hadoop.fs.BatchedRemoteIterator.BatchedListEntries;
+import org.apache.hadoop.hdfs.protocol.OpenFileEntry;
-  private final HashMap<Long, Lease> leasesById = new HashMap<>();
+  private final TreeMap<Long, Lease> leasesById = new TreeMap<>();
+  /**
+   * Get a batch of under construction files from the currently active leases.
+   * File INodeID is the cursor used to fetch new batch of results and the
+   * batch size is configurable using below config param. Since the list is
+   * fetched in batches, it does not represent a consistent view of all
+   * open files.
+   *
+   * @see org.apache.hadoop.hdfs.DFSConfigKeys#DFS_NAMENODE_LIST_OPENFILES_NUM_RESPONSES
+   * @param prevId the INodeID cursor
+   * @throws IOException
+   */
+  public BatchedListEntries<OpenFileEntry> getUnderConstructionFiles(
+      final long prevId) throws IOException {
+    assert fsnamesystem.hasReadLock();
+    SortedMap<Long, Lease> remainingLeases;
+    synchronized (this) {
+      remainingLeases = leasesById.tailMap(prevId, false);
+    }
+    Collection<Long> inodeIds = remainingLeases.keySet();
+    final int numResponses = Math.min(
+        this.fsnamesystem.getMaxListOpenFilesResponses(), inodeIds.size());
+    final List<OpenFileEntry> openFileEntries =
+        Lists.newArrayListWithExpectedSize(numResponses);
+
+    int count = 0;
+    for (Long inodeId: inodeIds) {
+      final INodeFile inodeFile =
+          fsnamesystem.getFSDirectory().getInode(inodeId).asFile();
+      if (!inodeFile.isUnderConstruction()) {
+        LOG.warn("The file " + inodeFile.getFullPathName()
+            + " is not under construction but has lease.");
+        continue;
+      }
+      openFileEntries.add(new OpenFileEntry(
+          inodeFile.getId(), inodeFile.getFullPathName(),
+          inodeFile.getFileUnderConstructionFeature().getClientName(),
+          inodeFile.getFileUnderConstructionFeature().getClientMachine()));
+      count++;
+      if (count >= numResponses) {
+        break;
+      }
+    }
+    boolean hasMore = (numResponses < remainingLeases.size());
+    return new BatchedListEntries<>(openFileEntries, hasMore);
+  }
+

MOV26 INS26 UPD40 INS40 INS31 UPD74 INS29 INS83 INS74 INS42 INS44 INS43 INS8 UPD43 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS39 INS42 INS42 INS6 INS60 INS51 INS60 INS60 INS60 INS60 INS70 INS60 INS41 UPD42 UPD74 INS66 INS66 INS66 INS66 INS66 INS67 INS42 INS66 INS42 INS42 INS42 INS32 INS74 INS59 INS52 INS8 INS74 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS39 INS59 INS44 INS42 INS8 INS39 INS59 INS14 UPD43 INS40 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS21 INS43 INS43 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS34 INS43 INS42 INS60 INS25 INS21 INS21 INS25 INS42 INS36 INS74 INS42 INS42 UPD42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS38 INS8 INS32 INS37 INS27 INS8 INS27 INS43 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS18 INS42 INS42 INS14 INS42 INS42 INS42 INS10 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS52 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42