YARN-9697. Efficient allocation of Opportunistic containers. Contributed by Abhishek Modi.

+import java.util.Random;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicInteger;
+import static org.apache.hadoop.yarn.conf.YarnConfiguration.DEFAULT_OPP_CONTAINER_ALLOCATION_NODES_NUMBER_USED;
+
-  final static Logger LOG = LoggerFactory.
+  private final static Logger LOG = LoggerFactory.
+  private int numNodesForAnyAllocation =
+      DEFAULT_OPP_CONTAINER_ALLOCATION_NODES_NUMBER_USED;
+
-      return (this == QUEUE_LENGTH) ? c.queueLength : c.queueWaitTime;
+      return (this == QUEUE_LENGTH) ?
+          c.queueLength.get() : c.queueWaitTime.get();
+    }
+
+    /**
+     * Increment the metric by a delta if it is below the threshold.
+     * @param c ClusterNode
+     * @param incrementSize increment size
+     * @return true if the metric was below threshold and was incremented.
+     */
+    public boolean compareAndIncrement(ClusterNode c, int incrementSize) {
+      if(this == QUEUE_LENGTH) {
+        int ret = c.queueLength.addAndGet(incrementSize);
+        if (ret <= c.queueCapacity) {
+          return true;
+        }
+        c.queueLength.addAndGet(-incrementSize);
+        return false;
+      }
+      // for queue wait time, we don't have any threshold.
+      return true;
-    int queueLength = 0;
-    int queueWaitTime = -1;
-    double timestamp;
+    private AtomicInteger queueLength = new AtomicInteger(0);
+    private AtomicInteger queueWaitTime = new AtomicInteger(-1);
+    private long timestamp;
-      this.queueLength = qLength;
+      this.queueLength.set(qLength);
-      this.queueWaitTime = wTime;
+      this.queueWaitTime.set(wTime);
-          this.queueLength >= this.queueCapacity;
+          this.queueLength.get() >= this.queueCapacity;
+  private final Map<String, RMNode> nodeByHostName =
+      new ConcurrentHashMap<>();
+  private final Map<String, Set<NodeId>> nodeIdsByRack =
+      new ConcurrentHashMap<>();
-      LoadComparator comparator) {
+      LoadComparator comparator, int numNodes) {
+    numNodesForAnyAllocation = numNodes;
+  public void stop() {
+    if (scheduledExecutor != null) {
+      scheduledExecutor.shutdown();
+    }
+  }
+
-    LOG.debug("Node added event from: {}", rmNode.getNode().getName());
-
+    this.nodeByHostName.put(rmNode.getHostName(), rmNode);
+    addIntoNodeIdsByRack(rmNode);
-    LOG.debug("Node delete event for: {}", removedRMNode.getNode().getName());
+    LOG.info("Node delete event for: {}", removedRMNode.getNode().getName());
+    this.nodeByHostName.remove(removedRMNode.getHostName());
+    removeFromNodeIdsByRack(removedRMNode);
+  public RMNode selectLocalNode(String hostName, Set<String> blacklist) {
+    if (blacklist.contains(hostName)) {
+      return null;
+    }
+    RMNode node = nodeByHostName.get(hostName);
+    if (node != null) {
+      ClusterNode clusterNode = clusterNodes.get(node.getNodeID());
+      if (comparator.compareAndIncrement(clusterNode, 1)) {
+        return node;
+      }
+    }
+    return null;
+  }
+
+  public RMNode selectRackLocalNode(String rackName, Set<String> blacklist) {
+    Set<NodeId> nodesOnRack = nodeIdsByRack.get(rackName);
+    if (nodesOnRack != null) {
+      for (NodeId nodeId : nodesOnRack) {
+        if (!blacklist.contains(nodeId.getHost())) {
+          ClusterNode node = clusterNodes.get(nodeId);
+          if (node != null && comparator.compareAndIncrement(node, 1)) {
+            return nodeByHostName.get(nodeId.getHost());
+          }
+        }
+      }
+    }
+    return null;
+  }
+
+  public RMNode selectAnyNode(Set<String> blacklist) {
+    List<NodeId> nodeIds = selectLeastLoadedNodes(numNodesForAnyAllocation);
+    int size = nodeIds.size();
+    if (size <= 0) {
+      return null;
+    }
+    Random rand = new Random();
+    int startIndex = rand.nextInt(size);
+    for (int i = 0; i < size; ++i) {
+      int index = i + startIndex;
+      index %= size;
+      NodeId nodeId = nodeIds.get(index);
+      if (nodeId != null && !blacklist.contains(nodeId.getHost())) {
+        ClusterNode node = clusterNodes.get(nodeId);
+        if (node != null && comparator.compareAndIncrement(node, 1)) {
+          return nodeByHostName.get(nodeId.getHost());
+        }
+      }
+    }
+    return null;
+  }
+
+  private void removeFromNodeIdsByRack(RMNode removedNode) {
+    nodeIdsByRack.computeIfPresent(removedNode.getRackName(),
+        (k, v) -> v).remove(removedNode.getNodeID());
+  }
+
+  private void addIntoNodeIdsByRack(RMNode addedNode) {
+    nodeIdsByRack.compute(addedNode.getRackName(), (k, v) -> v == null ?
+        ConcurrentHashMap.newKeySet() : v).add(addedNode.getNodeID());
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS44 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS83 INS43 INS83 UPD39 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS74 INS42 INS14 INS39 INS42 INS21 INS25 INS21 INS21 INS21 INS42 INS43 INS42 INS74 INS42 INS25 INS60 INS25 INS41 INS42 INS43 INS42 INS74 INS42 INS60 INS25 INS41 INS42 INS74 INS42 INS60 INS60 INS25 INS60 INS60 INS24 INS41 INS43 INS42 INS21 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS41 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS74 INS42 INS42 INS43 INS43 INS74 INS7 INS27 INS8 INS32 INS32 INS32 INS42 INS43 INS43 INS32 INS8 INS43 INS59 INS27 INS8 INS33 INS42 INS43 INS43 INS74 INS59 INS27 INS8 INS33 INS43 INS43 INS74 INS59 INS39 INS59 INS27 INS8 INS43 INS59 INS39 INS59 INS58 INS27 INS38 INS8 INS33 INS42 INS32 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS9 INS43 INS34 INS43 MOV38 INS32 INS32 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS33 INS21 INS22 UPD42 MOV32 UPD42 MOV42 INS42 INS42 UPD42 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS14 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS21 INS60 INS25 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS52 INS42 INS60 INS25 INS21 INS41 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 INS42 INS42 INS32 INS52 INS42 UPD42 INS52 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS42 INS34 INS39 INS59 INS7 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS86 INS42 INS42 INS42 INS42 INS32 INS86 INS42 INS42 INS40 INS42 INS40 INS42 INS39 INS59 INS27 INS8 INS32 INS9 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS41 INS43 INS42 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS27 INS38 INS60 INS25 INS42 INS42 INS59 INS59 INS42 INS42 INS42 INS59 INS59 INS16 INS42 INS32 INS42 INS40 INS41 INS40 INS42 INS38 MOV22 INS42 INS42 INS42 INS32 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS40 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL40 DEL39 DEL34 DEL39 DEL42 DEL7 DEL42 DEL7 DEL42 DEL45 DEL32