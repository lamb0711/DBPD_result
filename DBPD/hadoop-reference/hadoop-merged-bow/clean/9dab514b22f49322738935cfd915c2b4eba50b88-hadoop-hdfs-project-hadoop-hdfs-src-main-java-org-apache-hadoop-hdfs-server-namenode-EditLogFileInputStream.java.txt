HDFS-6038. Allow JournalNode to handle editlog produced by new release with future layoutversion. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579813 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.FSEditLogLoader.EditLogValidation;
-  private void init() throws LogHeaderCorruptException, IOException {
+  private void init(boolean verifyLayoutVersion)
+      throws LogHeaderCorruptException, IOException {
-        logVersion = readLogVersion(dataIn);
+        logVersion = readLogVersion(dataIn, verifyLayoutVersion);
+      // We assume future layout will also support ADD_LAYOUT_FLAGS
-          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion)) {
+          LayoutVersion.Feature.ADD_LAYOUT_FLAGS, logVersion) ||
+          logVersion < NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION) {
-        init();
+        init(true);
+  protected long scanNextOp() throws IOException {
+    Preconditions.checkState(state == State.OPEN);
+    FSEditLogOp cachedNext = getCachedOp();
+    return cachedNext == null ? reader.scanOp() : cachedNext.txid;
+  }
+
+  @Override
-  public int getVersion() throws IOException {
+  public int getVersion(boolean verifyVersion) throws IOException {
-      init();
+      init(verifyVersion);
-  static FSEditLogLoader.EditLogValidation validateEditLog(File file) throws IOException {
+  static FSEditLogLoader.EditLogValidation validateEditLog(File file)
+      throws IOException {
-      in.getVersion(); // causes us to read the header
+      in.getVersion(true); // causes us to read the header
+  static FSEditLogLoader.EditLogValidation scanEditLog(File file)
+      throws IOException {
+    EditLogFileInputStream in;
+    try {
+      in = new EditLogFileInputStream(file);
+      // read the header, initialize the inputstream, but do not check the
+      // layoutversion
+      in.getVersion(false);
+    } catch (LogHeaderCorruptException e) {
+      LOG.warn("Log file " + file + " has no valid header", e);
+      return new FSEditLogLoader.EditLogValidation(0,
+          HdfsConstants.INVALID_TXID, true);
+    }
+
+    long lastPos = 0;
+    long lastTxId = HdfsConstants.INVALID_TXID;
+    long numValid = 0;
+    try {
+      while (true) {
+        long txid = HdfsConstants.INVALID_TXID;
+        lastPos = in.getPosition();
+        try {
+          if ((txid = in.scanNextOp()) == HdfsConstants.INVALID_TXID) {
+            break;
+          }
+        } catch (Throwable t) {
+          FSImage.LOG.warn("Caught exception after scanning through "
+              + numValid + " ops from " + in
+              + " while determining its valid length. Position was "
+              + lastPos, t);
+          in.resync();
+          FSImage.LOG.warn("After resync, position is " + in.getPosition());
+          continue;
+        }
+        if (lastTxId == HdfsConstants.INVALID_TXID || txid > lastTxId) {
+          lastTxId = txid;
+        }
+        numValid++;
+      }
+      return new EditLogValidation(lastPos, lastTxId, false);
+    } finally {
+      IOUtils.closeStream(in);
+    }
+  }
+
-  static int readLogVersion(DataInputStream in)
+  static int readLogVersion(DataInputStream in, boolean verifyLayoutVersion)
-    if (logVersion < HdfsConstants.NAMENODE_LAYOUT_VERSION || // future version
-        logVersion > Storage.LAST_UPGRADABLE_LAYOUT_VERSION) { // unsupported
+    if (verifyLayoutVersion &&
+        (logVersion < HdfsConstants.NAMENODE_LAYOUT_VERSION || // future version
+         logVersion > Storage.LAST_UPGRADABLE_LAYOUT_VERSION)) { // unsupported

INS26 INS40 INS31 INS31 INS44 INS78 INS83 INS39 INS42 INS43 INS8 INS44 INS83 INS43 INS42 INS44 INS43 INS8 INS44 INS39 INS42 INS42 INS42 INS21 INS60 INS41 INS39 INS42 INS40 INS43 INS42 INS42 INS60 INS54 INS60 INS60 INS60 INS54 INS39 INS42 INS32 INS43 INS59 INS16 INS42 INS43 INS59 INS8 INS12 INS39 INS59 INS39 INS59 INS39 INS59 INS8 INS8 INS27 INS42 INS42 INS27 INS42 INS42 INS32 INS27 INS32 INS40 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS34 INS42 INS40 INS42 INS34 INS61 INS41 INS21 INS42 INS36 INS27 INS42 INS40 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS43 INS42 INS21 INS41 INS9 INS8 INS14 INS32 MOV27 MOV32 INS27 INS42 INS9 INS42 INS14 INS42 INS42 INS9 INS42 INS32 INS14 INS60 INS21 INS54 INS25 INS21 INS43 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS40 INS9 INS43 INS42 INS42 INS42 INS27 INS42 INS43 INS34 INS40 INS9 INS39 INS59 INS7 INS8 INS12 INS27 INS8 INS37 INS42 INS42 INS45 INS42 INS45 INS40 INS42 INS40 INS42 INS32 INS25 INS44 INS8 INS27 INS27 INS21 INS42 INS42 INS42 INS42 INS27 INS8 INS43 INS42 INS21 INS21 INS21 INS18 INS42 INS40 INS42 INS42 INS7 INS36 INS40 INS10 INS42 INS32 INS32 INS32 INS42 INS42 INS7 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42