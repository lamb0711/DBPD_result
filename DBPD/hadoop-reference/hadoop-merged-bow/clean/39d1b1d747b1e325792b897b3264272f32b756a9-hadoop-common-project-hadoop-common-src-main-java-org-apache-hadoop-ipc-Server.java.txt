HADOOP-13549. Eliminate intermediate buffer for server-side PB encoding. Contributed by Daryn Sharp.

+import com.google.protobuf.CodedOutputStream;
+    final byte[] response;
+    if (rv == null || (rv instanceof RpcWritable.ProtobufWrapper)) {
+      response = setupResponseForProtobuf(header, rv);
+    } else {
+      response = setupResponseForWritable(header, rv);
+    }
+    if (response.length > maxRespSize) {
+      LOG.warn("Large response size " + response.length + " for call "
+          + call.toString());
+    }
+    call.setResponse(ByteBuffer.wrap(response));
+  }
+
+  private byte[] setupResponseForWritable(
+      RpcResponseHeaderProto header, Writable rv) throws IOException {
-      call.setResponse(ByteBuffer.wrap(buf.toByteArray()));
+      return buf.toByteArray();
-        LOG.warn("Large response size " + buf.size() + " for call "
-            + call.toString());
+
+  // writing to a pre-allocated array is the most efficient way to construct
+  // a protobuf response.
+  private byte[] setupResponseForProtobuf(
+      RpcResponseHeaderProto header, Writable rv) throws IOException {
+    Message payload = (rv != null)
+        ? ((RpcWritable.ProtobufWrapper)rv).getMessage() : null;
+    int length = getDelimitedLength(header);
+    if (payload != null) {
+      length += getDelimitedLength(payload);
+    }
+    byte[] buf = new byte[length + 4];
+    CodedOutputStream cos = CodedOutputStream.newInstance(buf);
+    // the stream only supports little endian ints
+    cos.writeRawByte((byte)((length >>> 24) & 0xFF));
+    cos.writeRawByte((byte)((length >>> 16) & 0xFF));
+    cos.writeRawByte((byte)((length >>>  8) & 0xFF));
+    cos.writeRawByte((byte)((length >>>  0) & 0xFF));
+    cos.writeRawVarint32(header.getSerializedSize());
+    header.writeTo(cos);
+    if (payload != null) {
+      cos.writeRawVarint32(payload.getSerializedSize());
+      payload.writeTo(cos);
+    }
+    return buf;
+  }
+
+  private static int getDelimitedLength(Message message) {
+    int length = message.getSerializedSize();
+    return length + CodedOutputStream.computeRawVarint32Size(length);
+  }
+

INS26 INS40 INS31 INS31 INS31 INS83 INS39 INS42 MOV44 INS44 INS44 INS43 INS8 INS5 UPD42 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS25 INS21 INS39 INS85 INS39 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS25 INS41 INS43 INS42 INS60 INS41 INS42 INS42 INS83 INS5 INS59 INS27 INS8 INS8 INS27 INS8 INS32 INS42 INS42 INS43 INS59 INS39 INS59 INS27 INS8 INS5 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS8 INS42 INS42 INS39 INS59 INS27 INS39 INS85 INS42 INS27 INS36 INS21 INS21 INS40 INS42 INS21 INS42 INS42 INS32 INS41 INS42 INS42 INS16 INS42 INS32 INS42 INS33 INS21 INS39 INS85 INS42 INS3 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS33 INS62 INS7 INS7 INS32 INS42 INS42 INS42 MOV32 INS36 INS32 INS33 INS42 INS42 INS7 INS5 INS27 INS42 INS42 INS42 INS39 INS36 INS39 INS36 INS39 INS36 INS39 INS36 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS27 INS36 INS42 INS42 INS32 INS39 INS85 INS42 INS34 INS27 INS27 INS27 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS40 INS45 MOV32 INS42 INS33 INS11 INS42 INS42 INS36 INS34 INS36 INS34 INS36 INS34 INS36 INS34 INS42 INS42 INS43 INS42 INS27 INS27 INS27 INS27 INS40 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21