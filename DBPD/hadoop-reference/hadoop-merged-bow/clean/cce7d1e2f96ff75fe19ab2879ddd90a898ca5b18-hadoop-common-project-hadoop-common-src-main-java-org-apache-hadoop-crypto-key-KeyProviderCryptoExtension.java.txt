Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import java.nio.ByteBuffer;
+
+
+import org.apache.hadoop.crypto.CryptoCodec;
+import org.apache.hadoop.crypto.Decryptor;
+import org.apache.hadoop.crypto.Encryptor;
+     * Factory method to create a new EncryptedKeyVersion that can then be
+     * passed into {@link #decryptEncryptedKey}. Note that the fields of the
+     * returned EncryptedKeyVersion will only partially be populated; it is not
+     * necessarily suitable for operations besides decryption.
+     *
+     * @param encryptionKeyVersionName Version name of the encryption key used
+     *                                 to encrypt the encrypted key.
+     * @param encryptedKeyIv           Initialization vector of the encrypted
+     *                                 key. The IV of the encryption key used to
+     *                                 encrypt the encrypted key is derived from
+     *                                 this IV.
+     * @param encryptedKeyMaterial     Key material of the encrypted key.
+     * @return EncryptedKeyVersion suitable for decryption.
+     */
+    public static EncryptedKeyVersion createForDecryption(String
+        encryptionKeyVersionName, byte[] encryptedKeyIv,
+        byte[] encryptedKeyMaterial) {
+      KeyVersion encryptedKeyVersion = new KeyVersion(null, EEK,
+          encryptedKeyMaterial);
+      return new EncryptedKeyVersion(null, encryptionKeyVersionName,
+          encryptedKeyIv, encryptedKeyVersion);
+    }
+
+    /**
+    private static final ThreadLocal<SecureRandom> RANDOM = 
+        new ThreadLocal<SecureRandom>() {
+      @Override
+      protected SecureRandom initialValue() {
+        return new SecureRandom();
+      }
+    };
-      Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding");
-      SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
+
+      CryptoCodec cc = CryptoCodec.getInstance(keyProvider.getConf());
-      random.nextBytes(newKey);
-      final byte[] iv = random.generateSeed(cipher.getBlockSize());
+      cc.generateSecureRandom(newKey);
+      final byte[] iv = new byte[cc.getCipherSuite().getAlgorithmBlockSize()];
+      cc.generateSecureRandom(iv);
-      // Encrypt the new key
-      cipher.init(Cipher.ENCRYPT_MODE,
-          new SecretKeySpec(encryptionKey.getMaterial(), "AES"),
-          new IvParameterSpec(encryptionIV));
-      final byte[] encryptedKey = cipher.doFinal(newKey);
+      Encryptor encryptor = cc.createEncryptor();
+      encryptor.init(encryptionKey.getMaterial(), encryptionIV);
+      int keyLen = newKey.length;
+      ByteBuffer bbIn = ByteBuffer.allocateDirect(keyLen);
+      ByteBuffer bbOut = ByteBuffer.allocateDirect(keyLen);
+      bbIn.put(newKey);
+      bbIn.flip();
+      encryptor.encrypt(bbIn, bbOut);
+      bbOut.flip();
+      byte[] encryptedKey = new byte[keyLen];
+      bbOut.get(encryptedKey);    
-      final byte[] encryptionKeyMaterial = encryptionKey.getMaterial();
+      Preconditions.checkArgument(
+              encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()
+                    .equals(KeyProviderCryptoExtension.EEK),
+                "encryptedKey version name must be '%s', is '%s'",
+                KeyProviderCryptoExtension.EEK,
+                encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()
+            );
+
-      // Init the cipher with encryption key parameters
-      Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding");
-      cipher.init(Cipher.DECRYPT_MODE,
-          new SecretKeySpec(encryptionKeyMaterial, "AES"),
-          new IvParameterSpec(encryptionIV));
-      // Decrypt the encrypted key
+
+      CryptoCodec cc = CryptoCodec.getInstance(keyProvider.getConf());
+      Decryptor decryptor = cc.createDecryptor();
+      decryptor.init(encryptionKey.getMaterial(), encryptionIV);
-      final byte[] decryptedKey = cipher.doFinal(encryptedKV.getMaterial());
+      int keyLen = encryptedKV.getMaterial().length;
+      ByteBuffer bbIn = ByteBuffer.allocateDirect(keyLen);
+      ByteBuffer bbOut = ByteBuffer.allocateDirect(keyLen);
+      bbIn.put(encryptedKV.getMaterial());
+      bbIn.flip();
+      decryptor.decrypt(bbIn, bbOut);
+      bbOut.flip();
+      byte[] decryptedKey = new byte[keyLen];
+      bbOut.get(decryptedKey);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS23 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS83 INS74 INS59 MOV60 MOV60 MOV60 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS5 INS42 INS5 INS42 INS60 INS41 INS43 INS43 INS42 INS14 INS21 INS60 INS60 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS21 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS39 INS85 INS39 INS85 INS43 INS59 INS14 INS42 INS42 INS74 INS1 UPD43 INS32 INS83 MOV5 INS43 INS59 INS39 INS59 INS43 INS43 INS59 INS32 INS32 INS32 INS32 INS5 INS59 INS32 INS32 INS43 UPD43 INS32 INS39 INS59 INS43 INS59 INS43 INS59 MOV32 INS32 INS32 INS32 INS32 INS67 INS42 INS42 INS14 INS43 INS33 INS42 INS42 INS42 INS43 INS43 INS31 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS3 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 INS32 INS42 INS42 INS40 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS40 INS32 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 MOV32 INS42 INS42 INS22 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS43 INS33 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS8 UPD42 INS32 MOV5 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 MOV5 INS42 INS32 INS42 INS40 INS32 INS42 UPD42 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS39 INS85 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV43 DEL45 DEL45 DEL32 DEL83 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL40 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL42 DEL14 DEL83 DEL83 DEL45 DEL40 DEL43 DEL42 DEL45 DEL14 DEL43 DEL42 DEL14 DEL32 DEL21 DEL83