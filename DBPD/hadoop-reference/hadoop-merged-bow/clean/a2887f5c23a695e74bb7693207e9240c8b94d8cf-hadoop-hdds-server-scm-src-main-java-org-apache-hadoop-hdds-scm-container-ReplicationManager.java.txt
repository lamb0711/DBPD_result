HDDS-1468. Inject configuration values to Java objects

Closes #772

-import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdds.conf.ConfigType;
+import org.apache.hadoop.hdds.conf.ConfigGroup;
+import org.apache.hadoop.hdds.conf.Config;
-import org.apache.hadoop.hdds.scm.ScmConfigKeys;
-   * The frequency in which ReplicationMonitor thread should run.
+   * ReplicationManager specific configuration.
-  private final long interval;
-
-  /**
-   * Timeout for container replication & deletion command issued by
-   * ReplicationManager.
-   */
-  private final long eventTimeout;
+  private final ReplicationManagerConfiguration conf;
-  public ReplicationManager(final Configuration conf,
+  public ReplicationManager(final ReplicationManagerConfiguration conf,
-                            final EventPublisher eventPublisher) {
+      final EventPublisher eventPublisher,
+      final LockManager lockManager) {
-    this.lockManager = new LockManager<>(conf);
+    this.lockManager = lockManager;
-    this.interval = conf.getTimeDuration(
-        ScmConfigKeys.HDDS_SCM_REPLICATION_THREAD_INTERVAL,
-        ScmConfigKeys.HDDS_SCM_REPLICATION_THREAD_INTERVAL_DEFAULT,
-        TimeUnit.MILLISECONDS);
-    this.eventTimeout = conf.getTimeDuration(
-        ScmConfigKeys.HDDS_SCM_REPLICATION_EVENT_TIMEOUT,
-        ScmConfigKeys.HDDS_SCM_REPLICATION_EVENT_TIMEOUT_DEFAULT,
-        TimeUnit.MILLISECONDS);
+    this.conf = conf;
-        wait(interval);
+        wait(conf.getInterval());
-    final long deadline = Time.monotonicNow() - eventTimeout;
+    final long deadline = Time.monotonicNow() - conf.getEventTimeout();
+
+  /**
+   * Configuration used by the Replication Manager.
+   */
+  @ConfigGroup(prefix = "hdds.scm.replication")
+  public static class ReplicationManagerConfiguration {
+    /**
+     * The frequency in which ReplicationMonitor thread should run.
+     */
+    private long interval = 5 * 60 * 1000;
+
+    /**
+     * Timeout for container replication & deletion command issued by
+     * ReplicationManager.
+     */
+    private long eventTimeout = 10 * 60 * 1000;
+
+    @Config(key = "thread.interval", type = ConfigType.TIME, timeUnit =
+        TimeUnit.MILLISECONDS)
+    public void setInterval(long interval) {
+      this.interval = interval;
+    }
+
+    @Config(key = "event.timeout", type = ConfigType.TIME, timeUnit =
+        TimeUnit.MILLISECONDS)
+    public void setEventTimeout(long eventTimeout) {
+      this.eventTimeout = eventTimeout;
+    }
+
+    public long getInterval() {
+      return interval;
+    }
+
+    public long getEventTimeout() {
+      return eventTimeout;
+    }
+  }

MOV26 INS26 UPD40 INS40 UPD40 INS23 INS55 INS29 MOV83 MOV83 INS43 INS59 INS44 INS29 INS77 INS83 INS83 INS42 INS23 MOV23 INS31 INS31 INS31 INS31 INS65 INS42 INS42 UPD43 INS83 MOV43 INS42 INS21 INS65 INS42 INS80 MOV29 INS83 MOV39 MOV59 INS77 INS83 INS39 INS42 INS44 INS8 INS77 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS66 UPD42 INS7 INS66 INS42 INS45 INS27 INS27 INS42 INS80 INS80 INS80 INS39 INS42 MOV21 INS42 INS80 INS80 INS80 INS39 INS42 MOV21 INS41 INS41 INS42 INS22 INS42 INS34 INS34 INS34 INS34 INS34 INS34 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS45 INS42 INS40 INS42 INS40 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 DEL23 DEL74 DEL42 DEL14 DEL42 DEL83 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32