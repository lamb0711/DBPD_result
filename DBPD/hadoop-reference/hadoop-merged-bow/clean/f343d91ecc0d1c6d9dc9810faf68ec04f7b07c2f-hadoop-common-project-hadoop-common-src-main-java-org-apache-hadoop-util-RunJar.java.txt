HADOOP-13068. Clean up RunJar and related test class. (Contributed by Andras Bokor)

-import java.lang.reflect.Array;
-import org.apache.hadoop.conf.Configuration;
-  /** Pattern that matches any string */
+  /** Pattern that matches any string. */
+   * Buffer size for copy the content of compressed file to new file.
+   */
+  private static final int BUFFER_SIZE = 8_192;
+
+  /**
+   *
+   * @param jarFile the .jar file to unpack
+   * @param toDir the destination directory into which to unpack the jar
+   *
+   * @throws IOException if an I/O error has occurred or toDir
+   * cannot be created and does not already exist
+   *
+   * @throws IOException if an I/O error has occurred or toDir
+   * cannot be created and does not already exist
-    throws IOException {
-    JarFile jar = new JarFile(jarFile);
-    try {
+      throws IOException {
+    try (JarFile jar = new JarFile(jarFile)) {
-          InputStream in = jar.getInputStream(entry);
-          try {
+          try (InputStream in = jar.getInputStream(entry)) {
-            OutputStream out = new FileOutputStream(file);
-            try {
-              IOUtils.copyBytes(in, out, 8192);
-            } finally {
-              out.close();
+            try (OutputStream out = new FileOutputStream(file)) {
+              IOUtils.copyBytes(in, out, BUFFER_SIZE);
-          } finally {
-            in.close();
-                numOfFailedLastModifiedSet);
+            numOfFailedLastModifiedSet);
-    } finally {
-      jar.close();
+   * @param dir Directory to check
+   *
-    } catch(IOException io) {
+    } catch (IOException io) {
-    try { 
+    try {
-      // If user has insufficient perms to write to tmpDir, default  
-      // "Permission denied" message doesn't specify a filename. 
+      // If user has insufficient perms to write to tmpDir, default
+      // "Permission denied" message doesn't specify a filename.
-      new Runnable() {
-        @Override
-        public void run() {
-          FileUtil.fullyDelete(workDir);
-        }
-      }, SHUTDOWN_HOOK_PRIORITY);
+        new Runnable() {
+          @Override
+          public void run() {
+            FileUtil.fullyDelete(workDir);
+          }
+        }, SHUTDOWN_HOOK_PRIORITY);
-    Method main = mainClass.getMethod("main", new Class[] {
-      Array.newInstance(String.class, 0).getClass()
-    });
-    String[] newArgs = Arrays.asList(args)
-      .subList(firstArg, args.length).toArray(new String[0]);
+    Method main = mainClass.getMethod("main", String[].class);
+    List<String> newArgsSubList = Arrays.asList(args)
+        .subList(firstArg, args.length);
+    String[] newArgs = newArgsSubList
+        .toArray(new String[newArgsSubList.size()]);
-      main.invoke(null, new Object[] { newArgs });
+      main.invoke(null, new Object[] {newArgs});
-      sb.append(workDir+"/").
+      sb.append(workDir).append("/").
-          append(File.pathSeparator).append(workDir+"/classes/").
-          append(File.pathSeparator).append(workDir+"/lib/*");
+          append(File.pathSeparator).append(workDir).append("/classes/").
+          append(File.pathSeparator).append(workDir).append("/lib/*");
-      List<URL> classPath = new ArrayList<URL>();
-      classPath.add(new File(workDir+"/").toURI().toURL());
+      List<URL> classPath = new ArrayList<>();
+      classPath.add(new File(workDir + "/").toURI().toURL());
-        for (int i = 0; i < libs.length; i++) {
-          classPath.add(libs[i].toURI().toURL());
+        for (File lib : libs) {
+          classPath.add(lib.toURI().toURL());
-      loader = new URLClassLoader(classPath.toArray(new URL[0]));
+      loader = new URLClassLoader(classPath.toArray(new URL[classPath.size()]));

INS23 INS29 INS83 INS83 INS83 INS39 INS59 INS65 INS42 INS34 INS65 INS65 INS65 INS65 INS65 INS60 INS60 UPD66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS58 INS42 INS66 MOV43 INS59 INS74 MOV5 INS59 MOV43 MOV59 MOV42 INS32 INS43 MOV43 UPD42 MOV32 INS42 INS32 MOV42 MOV42 MOV45 INS57 INS42 INS42 INS42 MOV3 MOV5 UPD5 INS32 INS32 INS42 INS45 INS70 UPD43 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 INS42 UPD74 INS44 INS42 INS8 UPD42 INS43 INS42 MOV21 INS58 INS32 INS42 INS45 INS42 INS32 MOV43 MOV59 MOV32 MOV42 INS42 INS42 INS42 INS58 MOV43 MOV59 INS42 INS42 INS32 INS42 INS45 MOV42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL60 DEL60 DEL60 DEL34 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL32 DEL59 DEL60 DEL42 DEL34 DEL3 DEL32 DEL42 DEL57 DEL34 DEL32 DEL32 DEL4 DEL42 DEL45 DEL27 DEL42 DEL45 DEL27 DEL42 DEL45 DEL27 DEL42 DEL43 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL34