YARN-5588. [YARN-3926] Add support for resource profiles in distributed shell. Contributed by Varun Vasudev.

+import org.apache.hadoop.yarn.api.records.ProfileCapability;
+import org.apache.hadoop.yarn.exceptions.YarnRuntimeException;
-  private long containerMemory = 10;
+  private static final long DEFAULT_CONTAINER_MEMORY = 10;
+  private long containerMemory = DEFAULT_CONTAINER_MEMORY;
-  private int containerVirtualCores = 1;
+  private static final int DEFAULT_CONTAINER_VCORES = 1;
+  private int containerVirtualCores = DEFAULT_CONTAINER_VCORES;
+  // Resource profile for the container
+  private String containerResourceProfile = "";
+  Map<String, Resource> resourceProfiles;
+
+    opts.addOption("container_resource_profile", true,
+        "Resource profile to be requested to run the shell command");
-        "container_memory", "10"));
+        "container_memory", "-1"));
-        "container_vcores", "1"));
+        "container_vcores", "-1"));
+    containerResourceProfile =
+        cliParser.getOptionValue("container_resource_profile", "");
+    resourceProfiles = response.getResourceProfiles();
-    // For now, memory and CPU are supported so we set memory and cpu requirements
-    Resource capability = Resource.newInstance(containerMemory,
-      containerVirtualCores);
-
-    ContainerRequest request = new ContainerRequest(capability, null, null,
-        pri);
+    ContainerRequest request =
+        new ContainerRequest(createProfileCapability(), null, null, pri);
+  private ProfileCapability createProfileCapability()
+      throws YarnRuntimeException {
+    if (containerMemory < -1 || containerMemory == 0) {
+      throw new YarnRuntimeException("Value of AM memory '" + containerMemory
+          + "' has to be greater than 0");
+    }
+    if (containerVirtualCores < -1 || containerVirtualCores == 0) {
+      throw new YarnRuntimeException(
+          "Value of AM vcores '" + containerVirtualCores
+              + "' has to be greater than 0");
+    }
+
+    Resource resourceCapability =
+        Resource.newInstance(containerMemory, containerVirtualCores);
+    if (resourceProfiles == null) {
+      containerMemory = containerMemory == -1 ? DEFAULT_CONTAINER_MEMORY :
+          containerMemory;
+      containerVirtualCores =
+          containerVirtualCores == -1 ? DEFAULT_CONTAINER_VCORES :
+              containerVirtualCores;
+      resourceCapability.setMemorySize(containerMemory);
+      resourceCapability.setVirtualCores(containerVirtualCores);
+    }
+
+    String profileName = containerResourceProfile;
+    if ("".equals(containerResourceProfile) && resourceProfiles != null) {
+      profileName = "default";
+    }
+    ProfileCapability capability =
+        ProfileCapability.newInstance(profileName, resourceCapability);
+    return capability;
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS74 INS59 INS83 INS43 INS42 INS43 INS8 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS45 INS43 INS43 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS25 INS25 MOV60 INS25 INS60 INS25 INS60 INS41 INS42 INS42 INS42 INS32 INS7 INS7 MOV43 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS42 INS42 INS42 INS45 INS9 INS45 INS42 INS32 INS42 INS32 INS27 INS27 INS53 INS27 INS27 INS53 UPD42 INS42 INS33 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS27 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 MOV43 INS32 INS42 INS38 INS42 INS34 INS14 INS42 INS38 INS42 INS34 INS14 INS7 INS7 INS32 INS32 INS45 INS42 INS42 INS42 INS33 INS7 INS42 INS42 INS42 INS42 UPD45 UPD45 INS42 INS34 INS43 INS27 INS34 INS43 INS27 INS42 INS16 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS38 INS42 INS38 INS34 INS34 DEL42