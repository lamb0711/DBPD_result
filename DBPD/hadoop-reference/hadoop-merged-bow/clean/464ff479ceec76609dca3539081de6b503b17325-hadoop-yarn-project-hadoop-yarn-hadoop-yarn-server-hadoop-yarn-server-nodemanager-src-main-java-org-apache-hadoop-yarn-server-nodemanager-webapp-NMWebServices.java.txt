YARN-6113. Re-direct NM Web Service to get container logs for finished applications. Contributed by Xuan Gong.

+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+  private final String redirectWSUrl;
+    this.redirectWSUrl = this.nmContext.getConf().get(
+        YarnConfiguration.YARN_LOG_SERVER_WEBSERVICE_URL);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(ex.getMessage());
+        }
-      throw new WebApplicationException(ex);
+      if (redirectWSUrl == null || redirectWSUrl.isEmpty()) {
+        throw new WebApplicationException(ex);
+      }
+      // redirect the request to the configured log server
+      String redirectURI = "/containers/" + containerIdStr
+          + "/logs";
+      return createRedirectResponse(hsr, redirectWSUrl, redirectURI);
-      return Response.status(Status.NOT_FOUND).entity(ex.getMessage()).build();
+      if (redirectWSUrl == null || redirectWSUrl.isEmpty()) {
+        return Response.status(Status.NOT_FOUND).entity(ex.getMessage())
+            .build();
+      }
+      // redirect the request to the configured log server
+      String redirectURI = "/containers/" + containerIdStr
+          + "/logs/" + filename;
+      return createRedirectResponse(request, redirectWSUrl, redirectURI);
+
+  private Response createRedirectResponse(HttpServletRequest httpRequest,
+      String redirectWSUrlPrefix, String uri) {
+    // redirect the request to the configured log server
+    StringBuilder redirectPath = new StringBuilder();
+    if (redirectWSUrlPrefix.endsWith("/")) {
+      redirectWSUrlPrefix = redirectWSUrlPrefix.substring(0,
+          redirectWSUrlPrefix.length() - 1);
+    }
+    redirectPath.append(redirectWSUrlPrefix + uri);
+    // append all the request query parameters except nodeId parameter
+    String requestParams = WebAppUtils.removeQueryParams(httpRequest,
+        YarnWebServiceParams.NM_ID);
+    if (requestParams != null && !requestParams.isEmpty()) {
+      redirectPath.append("?" + requestParams);
+    }
+    ResponseBuilder res = Response.status(
+        HttpServletResponse.SC_TEMPORARY_REDIRECT);
+    res.header("Location", redirectPath.toString());
+    return res.build();
+  }

INS26 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS21 INS60 INS25 INS60 INS21 INS41 INS7 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS22 INS32 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS45 INS21 INS42 INS42 INS27 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS52 INS42 INS32 INS42 INS40 INS25 INS60 INS41 INS25 INS60 INS41 INS43 INS7 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS22 INS42 INS8 INS27 MOV8 INS43 INS59 INS32 INS27 MOV8 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS52 INS42 INS25 INS27 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS27 INS45 INS42 INS32 INS8 INS42 INS33 INS42 INS42 INS45 INS42 INS45 INS42 INS33 INS42 INS42 INS45 INS42 INS45 INS42 INS32 INS34 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 DEL8