YARN-2808. Made YARN CLI list attemptâ€™s finished containers of a running application. Contributed by Naganarasimha G R.

+import java.util.HashSet;
+import java.util.Iterator;
-  private AHSClient historyClient;
+  protected AHSClient historyClient;
+    List<ContainerReport> containersForAttempt =
+        new ArrayList<ContainerReport>();
+    boolean appNotFoundInRM = false;
-      GetContainersRequest request = Records
-          .newRecord(GetContainersRequest.class);
+      GetContainersRequest request =
+          Records.newRecord(GetContainersRequest.class);
-      return response.getContainerList();
+      containersForAttempt.addAll(response.getContainerList());
-      if (!historyServiceEnabled) {
-        // Just throw it as usual if historyService is not enabled.
+      if (e.getClass() != ApplicationNotFoundException.class
+          || !historyServiceEnabled) {
+        // If Application is not in RM and history service is enabled then we
+        // need to check with history service else throw exception.
-      // Even if history-service is enabled, treat all exceptions still the same
-      // except the following
-      if (e.getClass() != ApplicationNotFoundException.class) {
-        throw e;
-      }
-      return historyClient.getContainers(applicationAttemptId);
+      appNotFoundInRM = true;
+
+    if (historyServiceEnabled) {
+      // Check with AHS even if found in RM because to capture info of finished
+      // containers also
+      List<ContainerReport> containersListFromAHS = null;
+      try {
+        containersListFromAHS =
+            historyClient.getContainers(applicationAttemptId);
+      } catch (IOException e) {
+        // History service access might be enabled but system metrics publisher
+        // is disabled hence app not found exception is possible
+        if (appNotFoundInRM) {
+          // app not found in bothM and RM then propagate the exception.
+          throw e;
+        }
+      }
+
+      if (null != containersListFromAHS && containersListFromAHS.size() > 0) {
+        // remove duplicates
+
+        Set<ContainerId> containerIdsToBeKeptFromAHS =
+            new HashSet<ContainerId>();
+        Iterator<ContainerReport> tmpItr = containersListFromAHS.iterator();
+        while (tmpItr.hasNext()) {
+          containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());
+        }
+
+        Iterator<ContainerReport> rmContainers =
+            containersForAttempt.iterator();
+        while (rmContainers.hasNext()) {
+          ContainerReport tmp = rmContainers.next();
+          containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());
+          // Remove containers from AHS as container from RM will have latest
+          // information
+        }
+
+        if (containerIdsToBeKeptFromAHS.size() > 0
+            && containersListFromAHS.size() != containerIdsToBeKeptFromAHS
+                .size()) {
+          Iterator<ContainerReport> containersFromHS =
+              containersListFromAHS.iterator();
+          while (containersFromHS.hasNext()) {
+            ContainerReport containerReport = containersFromHS.next();
+            if (containerIdsToBeKeptFromAHS.contains(containerReport
+                .getContainerId())) {
+              containersForAttempt.add(containerReport);
+            }
+          }
+        } else if (containersListFromAHS.size() == containerIdsToBeKeptFromAHS
+            .size()) {
+          containersForAttempt.addAll(containersListFromAHS);
+        }
+      }
+    }
+    return containersForAttempt;

INS26 INS26 INS40 INS40 UPD83 INS8 INS60 INS60 MOV54 INS25 INS41 INS74 INS59 INS39 INS59 INS42 INS8 INS42 INS43 INS43 INS42 INS14 INS42 INS9 INS21 INS60 INS54 INS25 INS42 INS42 INS74 INS32 INS21 INS74 INS59 INS8 INS12 INS27 INS8 INS43 INS43 INS42 INS42 MOV32 INS27 INS7 INS43 INS43 INS42 INS33 INS21 INS44 INS8 INS27 INS27 INS60 INS60 INS61 INS60 INS61 INS25 INS42 INS42 MOV27 MOV38 INS42 INS9 INS42 INS42 INS7 INS43 INS42 MOV25 INS33 INS42 INS32 INS34 INS74 INS59 INS74 INS59 INS32 INS8 INS74 INS59 INS32 INS8 INS27 INS8 INS25 INS42 MOV32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS21 INS27 INS27 INS60 INS61 INS27 INS8 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS34 INS32 INS32 INS74 INS59 INS32 INS8 INS32 INS32 INS21 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL41 DEL41 DEL8