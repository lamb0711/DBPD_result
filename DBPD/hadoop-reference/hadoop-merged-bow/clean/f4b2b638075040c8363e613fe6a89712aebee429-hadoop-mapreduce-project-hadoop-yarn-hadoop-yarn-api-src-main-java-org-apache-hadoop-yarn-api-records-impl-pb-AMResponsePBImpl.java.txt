Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1170378 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ContainerStatus;
+import org.apache.hadoop.yarn.proto.YarnProtos.ContainerStatusProto;
-  private List<Container> newContainersList = null;
-  private List<Container> finishedContainersList = null;
+  private List<Container> allocatedContainers = null;
+  private List<ContainerStatus> completedContainersStatuses = null;
-    if (this.newContainersList != null) {
-      builder.clearNewContainers();
-      Iterable<ContainerProto> iterable = getProtoIterable(this.newContainersList);
-      builder.addAllNewContainers(iterable);
+    if (this.allocatedContainers != null) {
+      builder.clearAllocatedContainers();
+      Iterable<ContainerProto> iterable = 
+          getProtoIterable(this.allocatedContainers);
+      builder.addAllAllocatedContainers(iterable);
-    if (this.finishedContainersList != null) {
-      builder.clearFinishedContainers();
-      Iterable<ContainerProto> iterable = getProtoIterable(this.finishedContainersList);
-      builder.addAllFinishedContainers(iterable);
+    if (this.completedContainersStatuses != null) {
+      builder.clearCompletedContainerStatuses();
+      Iterable<ContainerStatusProto> iterable = 
+          getContainerStatusProtoIterable(this.completedContainersStatuses);
+      builder.addAllCompletedContainerStatuses(iterable);
-  public synchronized List<Container> getNewContainerList() {
+  public synchronized List<Container> getAllocatedContainers() {
-    return this.newContainersList;
-  }
-  
-  @Override
-  public synchronized Container getNewContainer(int index) {
-    initLocalNewContainerList();
-    return this.newContainersList.get(index);
-  }
-  @Override
-  public synchronized int getNewContainerCount() {
-    initLocalNewContainerList();
-    return this.newContainersList.size();
+    return this.allocatedContainers;
-    if (this.newContainersList != null) {
+    if (this.allocatedContainers != null) {
-    List<ContainerProto> list = p.getNewContainersList();
-    newContainersList = new ArrayList<Container>();
+    List<ContainerProto> list = p.getAllocatedContainersList();
+    allocatedContainers = new ArrayList<Container>();
-      newContainersList.add(convertFromProtoFormat(c));
+      allocatedContainers.add(convertFromProtoFormat(c));
-  public synchronized void addAllNewContainers(final List<Container> containers) {
+  public synchronized void setAllocatedContainers(final List<Container> containers) {
-    newContainersList.addAll(containers);
+    allocatedContainers.addAll(containers);
-  
-  @Override
-  public synchronized void addNewContainer(Container containers) {
-    initLocalNewContainerList();
-    if (containers == null) 
-      return;
-    this.newContainersList.add(containers);
-  }
-  
-  @Override
-  public synchronized void removeNewContainer(int index) {
-    initLocalNewContainerList();
-    this.newContainersList.remove(index);
-  }
-  @Override
-  public synchronized void clearNewContainers() {
-    initLocalNewContainerList();
-    this.newContainersList.clear();
+
+  private synchronized Iterable<ContainerStatusProto> 
+  getContainerStatusProtoIterable(
+      final List<ContainerStatus> newContainersList) {
+    maybeInitBuilder();
+    return new Iterable<ContainerStatusProto>() {
+      @Override
+      public synchronized Iterator<ContainerStatusProto> iterator() {
+        return new Iterator<ContainerStatusProto>() {
+
+          Iterator<ContainerStatus> iter = newContainersList.iterator();
+
+          @Override
+          public synchronized boolean hasNext() {
+            return iter.hasNext();
+          }
+
+          @Override
+          public synchronized ContainerStatusProto next() {
+            return convertToProtoFormat(iter.next());
+          }
+
+          @Override
+          public synchronized void remove() {
+            throw new UnsupportedOperationException();
+
+          }
+        };
+
+      }
+    };
-  public synchronized List<Container> getFinishedContainerList() {
+  public synchronized List<ContainerStatus> getCompletedContainersStatuses() {
-    return this.finishedContainersList;
-  }
-  
-  @Override
-  public synchronized Container getFinishedContainer(int index) {
-    initLocalFinishedContainerList();
-    return this.finishedContainersList.get(index);
-  }
-  @Override
-  public synchronized int getFinishedContainerCount() {
-    initLocalFinishedContainerList();
-    return this.finishedContainersList.size();
+    return this.completedContainersStatuses;
-    if (this.finishedContainersList != null) {
+    if (this.completedContainersStatuses != null) {
-    List<ContainerProto> list = p.getFinishedContainersList();
-    finishedContainersList = new ArrayList<Container>();
+    List<ContainerStatusProto> list = p.getCompletedContainerStatusesList();
+    completedContainersStatuses = new ArrayList<ContainerStatus>();
-    for (ContainerProto c : list) {
-      finishedContainersList.add(convertFromProtoFormat(c));
+    for (ContainerStatusProto c : list) {
+      completedContainersStatuses.add(convertFromProtoFormat(c));
-  public synchronized void addAllFinishedContainers(final List<Container> containers) {
+  public synchronized void setCompletedContainersStatuses(
+      final List<ContainerStatus> containers) {
-    finishedContainersList.addAll(containers);
+    completedContainersStatuses.addAll(containers);
-  @Override
-  public synchronized void addFinishedContainer(Container containers) {
-    initLocalFinishedContainerList();
-    if (containers == null) 
-      return;
-    this.finishedContainersList.add(containers);
-  }
-  
-  @Override
-  public synchronized void removeFinishedContainer(int index) {
-    initLocalFinishedContainerList();
-    this.finishedContainersList.remove(index);
-  }
-  @Override
-  public synchronized void clearFinishedContainers() {
-    initLocalFinishedContainerList();
-    this.finishedContainersList.clear();
-  }
-
-  private synchronized ContainerPBImpl convertFromProtoFormat(ContainerProto p) {
+  private synchronized ContainerPBImpl convertFromProtoFormat(
+      ContainerProto p) {
+  private synchronized ContainerStatusPBImpl convertFromProtoFormat(
+      ContainerStatusProto p) {
+    return new ContainerStatusPBImpl(p);
+  }
+
+  private synchronized ContainerStatusProto convertToProtoFormat(ContainerStatus t) {
+    return ((ContainerStatusPBImpl)t).getProto();
+  }
+

INS26 INS26 MOV31 INS40 INS40 INS31 INS31 UPD74 UPD42 UPD42 UPD83 MOV83 MOV83 INS74 UPD42 MOV42 INS44 INS8 UPD74 UPD42 MOV78 UPD42 UPD83 UPD43 UPD42 UPD83 MOV83 MOV83 INS43 INS42 MOV44 MOV8 UPD42 UPD43 UPD42 INS43 INS43 INS83 INS74 INS42 INS21 INS41 UPD43 UPD74 UPD42 INS43 INS42 INS42 UPD43 UPD42 INS41 UPD42 INS42 UPD42 MOV42 INS43 INS43 INS32 INS14 UPD42 UPD74 UPD43 INS42 INS14 UPD42 INS32 UPD42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 INS74 INS1 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 INS43 INS42 INS36 UPD42 MOV42 UPD42 UPD42 UPD74 UPD42 UPD42 INS43 INS43 INS31 UPD42 UPD42 UPD42 UPD74 UPD42 INS42 INS11 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 INS42 INS42 MOV78 MOV83 MOV83 INS74 INS42 INS8 UPD43 UPD42 INS43 INS42 UPD42 UPD42 INS43 INS43 INS41 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS14 INS74 INS1 INS43 INS43 INS23 INS31 INS31 INS31 INS42 INS42 INS74 INS59 MOV78 MOV83 MOV83 UPD39 MOV39 UPD42 MOV42 MOV8 MOV78 MOV83 MOV83 INS43 INS42 MOV8 MOV78 MOV83 MOV83 MOV39 UPD42 MOV42 MOV8 INS43 INS43 INS42 INS32 INS41 INS42 INS41 INS53 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS14 INS42 UPD42 MOV42 INS42 INS32 INS43 UPD42 MOV42 UPD42 MOV42 INS42 DEL42 DEL78 DEL43 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL39 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL32 DEL41 DEL8 DEL31 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL41 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL31 DEL39 DEL42 DEL39 DEL42 DEL44 DEL31 DEL31 DEL39 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL31 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL31 DEL39 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL41 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21