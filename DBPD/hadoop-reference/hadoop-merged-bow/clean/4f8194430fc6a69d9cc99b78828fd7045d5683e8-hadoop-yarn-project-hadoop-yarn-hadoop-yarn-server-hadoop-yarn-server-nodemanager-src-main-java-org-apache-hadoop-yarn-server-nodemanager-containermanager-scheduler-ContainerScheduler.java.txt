YARN-5216. Expose configurable preemption policy for OPPORTUNISTIC containers running on the NM. (Hitesh Sharma via asuresh)

+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState;
-  // to make room for a guaranteed container.
+  // or paused to make room for a guaranteed container.
+  private Boolean usePauseEventForPreemption = false;
+
+
+  @Override
+  public void serviceInit(Configuration conf) throws Exception {
+    super.serviceInit(conf);
+    this.usePauseEventForPreemption =
+        conf.getBoolean(
+            YarnConfiguration.NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION,
+            YarnConfiguration.
+                DEFAULT_NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION);
+  }
+
+    case CONTAINER_PAUSED:
-      onContainerCompleted(event.getContainer());
+      onResourcesReclaimed(event.getContainer());
-          //Kill opportunistic containers if any to make room for
+          //Kill/pause opportunistic containers if any to make room for
-          killOpportunisticContainers(updateEvent.getContainer());
+          reclaimOpportunisticContainerResources(updateEvent.getContainer());
+  @VisibleForTesting
+  public void setUsePauseEventForPreemption(
+      boolean usePauseEventForPreemption) {
+    this.usePauseEventForPreemption = usePauseEventForPreemption;
+  }
+
-  private void onContainerCompleted(Container container) {
+  private void onResourcesReclaimed(Container container) {
+    // Resume opportunistic containers, if resource available.
+    if (resourcesAvailable) {
+      List<Container> pausedContainers = new ArrayList<Container>();
+      Map<ContainerId, Container> containers =
+          context.getContainers();
+      for (Map.Entry<ContainerId, Container>entry : containers.entrySet()) {
+        ContainerId contId = entry.getKey();
+        // Find containers that were not already started and are in paused state
+        if(false == runningContainers.containsKey(contId)) {
+          if(containers.get(contId).getContainerState()
+              == ContainerState.PAUSED) {
+            pausedContainers.add(containers.get(contId));
+          }
+        }
+      }
+      resourcesAvailable = startContainers(pausedContainers, false);
+    }
-        killOpportunisticContainers(container);
+        reclaimOpportunisticContainerResources(container);
-  private void killOpportunisticContainers(Container container) {
-    List<Container> extraOpportContainersToKill =
-        pickOpportunisticContainersToKill(container.getContainerId());
+  @SuppressWarnings("unchecked")
+  private void reclaimOpportunisticContainerResources(Container container) {
+    List<Container> extraOppContainersToReclaim =
+        pickOpportunisticContainersToReclaimResources(
+            container.getContainerId());
-    for (Container contToKill : extraOpportContainersToKill) {
-      contToKill.sendKillEvent(
-          ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,
-          "Container Killed to make room for Guaranteed Container.");
-      oppContainersToKill.put(contToKill.getContainerId(), contToKill);
+    for (Container contToReclaim : extraOppContainersToReclaim) {
+      String preemptionAction = usePauseEventForPreemption == true ? "paused" :
+          "resumed";
-          "Opportunistic container {} will be killed in order to start the "
+          "Container {} will be {} to start the "
-          contToKill.getContainerId(), container.getContainerId());
+          contToReclaim.getContainerId(), preemptionAction,
+          container.getContainerId());
+
+      if (usePauseEventForPreemption) {
+        contToReclaim.sendPauseEvent(
+            "Container Paused to make room for Guaranteed Container");
+      } else {
+        contToReclaim.sendKillEvent(
+            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,
+            "Container Killed to make room for Guaranteed Container.");
+      }
+      oppContainersToKill.put(contToReclaim.getContainerId(), contToReclaim);
-  private List<Container> pickOpportunisticContainersToKill(
+  private List<Container> pickOpportunisticContainersToReclaimResources(

INS26 INS26 MOV31 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS78 UPD83 UPD42 INS44 INS43 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 MOV29 MOV83 MOV39 INS42 MOV44 INS8 INS79 INS83 INS39 INS42 MOV44 INS8 UPD42 INS42 INS42 INS9 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS39 INS42 INS21 MOV60 INS25 MOV25 INS42 INS45 MOV60 INS70 INS42 INS48 INS7 INS49 INS7 INS42 INS8 MOV44 INS42 INS8 INS42 INS42 INS22 INS32 INS42 INS22 INS42 INS60 INS60 INS70 INS21 UPD42 UPD42 INS60 MOV21 INS25 INS21 INS52 INS42 INS42 INS42 INS40 INS40 UPD42 INS52 INS42 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS7 UPD42 INS43 INS59 INS42 INS8 INS8 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS42 INS16 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS42 INS9 INS27 INS45 INS45 UPD45 UPD42 INS32 INS32 INS42 INS42 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS9 INS32 INS25 UPD42 INS42 INS9 INS42 INS42 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 UPD42 INS32 INS40 MOV21 INS32 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL32 DEL42 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31