Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import java.util.Set;
+import org.apache.hadoop.classification.InterfaceStability;
-import org.apache.hadoop.security.UserGroupInformation.AuthenticationMethod;
+import org.apache.hadoop.util.Time;
+@InterfaceAudience.LimitedPrivate(value = { "Common", "HDFS", "MapReduce", "Yarn" })
+@InterfaceStability.Evolving
+  private ExceptionsHandler exceptionsHandler = new ExceptionsHandler();
+  
+  public void addTerseExceptions(Class<?>... exceptionClass) {
+    exceptionsHandler.addTerseExceptions(exceptionClass);
+  }
+
+  /**
+   * ExceptionsHandler manages Exception groups for special handling
+   * e.g., terse exception group for concise logging messages
+   */
+  static class ExceptionsHandler {
+    private volatile Set<String> terseExceptions = new HashSet<String>();
+
+    /**
+     * Add exception class so server won't log its stack trace.
+     * Modifying the terseException through this method is thread safe.
+     *
+     * @param exceptionClass exception classes 
+     */
+    void addTerseExceptions(Class<?>... exceptionClass) {
+
+      // Make a copy of terseException for performing modification
+      final HashSet<String> newSet = new HashSet<String>(terseExceptions);
+
+      // Add all class names into the HashSet
+      for (Class<?> name : exceptionClass) {
+        newSet.add(name.toString());
+      }
+      // Replace terseException set
+      terseExceptions = Collections.unmodifiableSet(newSet);
+    }
+
+    boolean isTerse(Class<?> t) {
+      return terseExceptions.contains(t.toString());
+    }
+  }
-      this.timestamp = System.currentTimeMillis();
+      this.timestamp = Time.now();
+      @Override
-        long currentTime = System.currentTimeMillis();
+        long currentTime = Time.now();
-        lastCleanupRunTime = System.currentTimeMillis();
+        lastCleanupRunTime = Time.now();
-          c = new Connection(readKey, channel, System.currentTimeMillis());
+          c = new Connection(readKey, channel, Time.now());
-      c.setLastContact(System.currentTimeMillis());
+      c.setLastContact(Time.now());
-        c.setLastContact(System.currentTimeMillis());
+        c.setLastContact(Time.now());
-          long now = System.currentTimeMillis();
+          long now = Time.now();
-              call.timestamp = System.currentTimeMillis();
+              call.timestamp = Time.now();
-          }
-          if (isSecurityEnabled && authMethod == AuthMethod.SIMPLE) {
-            AccessControlException ae = new AccessControlException("Authorization ("
-              + CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION
-              + ") is enabled but authentication ("
-              + CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION
-              + ") is configured as simple. Please configure another method "
-              + "like kerberos or digest.");
-            setupResponse(authFailedResponse, authFailedCall, RpcStatusProto.FATAL,
-                null, ae.getClass().getName(), ae.getMessage());
-            responder.doRespond(authFailedCall);
-            throw ae;
-          }
-          if (!isSecurityEnabled && authMethod != AuthMethod.SIMPLE) {
+          }          
+          final boolean clientUsingSasl;
+          switch (authMethod) {
+            case SIMPLE: { // no sasl for simple
+              if (isSecurityEnabled) {
+                AccessControlException ae = new AccessControlException("Authorization ("
+                    + CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION
+                    + ") is enabled but authentication ("
+                    + CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION
+                    + ") is configured as simple. Please configure another method "
+                    + "like kerberos or digest.");
+                setupResponse(authFailedResponse, authFailedCall, RpcStatusProto.FATAL,
+                    null, ae.getClass().getName(), ae.getMessage());
+                responder.doRespond(authFailedCall);
+                throw ae;
+              }
+              clientUsingSasl = false;
+              useSasl = false; 
+              break;
+            }
+            case DIGEST: {
+              clientUsingSasl = true;
+              useSasl = (secretManager != null);
+              break;
+            }
+            default: {
+              clientUsingSasl = true;
+              useSasl = isSecurityEnabled; 
+              break;
+            }
+          }          
+          if (clientUsingSasl && !useSasl) {
-          if (authMethod != AuthMethod.SIMPLE) {
-            useSasl = true;
-          }
-            // Now the user is a proxy user, set Authentication method Proxy.
-            user.setAuthenticationMethod(AuthenticationMethod.PROXY);
-        LOG.warn("Ignoring socket shutdown exception");
+        LOG.debug("Ignoring socket shutdown exception", e);
-            } else if (e instanceof StandbyException) {
-              // Don't log the whole stack trace of these exceptions.
+            } else if (exceptionsHandler.isTerse(e.getClass())) {
+             // Don't log the whole stack trace of these exceptions.
-    if (isSecurityEnabled) {
+    if (secretManager != null) {
+    
+    this.exceptionsHandler.addTerseExceptions(StandbyException.class);

MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS77 INS78 INS23 INS31 INS55 INS40 INS80 INS40 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS42 INS23 INS31 INS31 INS42 INS4 INS42 INS42 INS14 INS74 INS42 INS21 INS65 INS83 INS83 INS74 INS59 INS29 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS21 INS45 INS45 INS45 INS45 INS43 INS43 INS76 INS32 INS66 INS66 INS43 INS43 INS42 INS14 INS65 INS65 INS74 INS42 INS60 INS70 INS21 INS74 INS42 INS41 INS78 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS66 INS66 INS42 INS66 INS43 INS76 INS83 INS74 INS59 INS44 INS42 INS8 INS7 INS43 INS76 INS32 INS42 INS42 INS33 INS22 INS42 INS57 INS43 INS43 INS42 INS43 INS43 INS42 INS14 INS74 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS52 INS42 MOV43 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS76 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS43 INS42 INS42 INS42 INS32 INS60 INS50 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS83 INS39 INS59 INS42 INS49 INS8 INS49 INS8 INS49 INS8 UPD42 INS42 INS42 INS42 MOV25 INS21 INS21 INS10 INS42 INS21 INS21 INS10 MOV21 INS21 INS10 INS42 UPD42 UPD42 INS42 INS7 INS7 INS7 INS7 INS7 UPD42 UPD42 UPD42 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS36 UPD42 INS42 INS42 INS27 INS32 UPD42 MOV42 INS33 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 DEL42 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL40 DEL27 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL62 DEL42