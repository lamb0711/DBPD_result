Merging r1539737 through r1539896 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1539898 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.PathBasedCacheDescriptor;
+import com.google.common.base.Preconditions;
-   * @param directive A PathBasedCacheDirectives to add
-   * @return PathBasedCacheDescriptor associated with the added directive
+   * @param directive A directive to add.
+   * @return the ID of the directive that was created.
-  public PathBasedCacheDescriptor addPathBasedCacheDirective(
+  public long addPathBasedCacheDirective(
+    Preconditions.checkNotNull(directive.getPath());
-    return dfs.addPathBasedCacheDirective(new PathBasedCacheDirective.Builder().
-        setPath(path).
-        setReplication(directive.getReplication()).
-        setPool(directive.getPool()).
-        build());
+    return dfs.addPathBasedCacheDirective(
+        new PathBasedCacheDirective.Builder(directive).
+            setPath(path).
+            build());
+  public void modifyPathBasedCacheDirective(
+      PathBasedCacheDirective directive) throws IOException {
+    if (directive.getPath() != null) {
+      directive = new PathBasedCacheDirective.Builder(directive).
+          setPath(new Path(getPathName(fixRelativePart(directive.getPath()))).
+              makeQualified(getUri(), getWorkingDirectory())).build();
+    }
+    dfs.modifyPathBasedCacheDirective(directive);
+  }
+
-   * Remove a PathBasedCacheDescriptor.
+   * Remove a PathBasedCacheDirective.
-   * @param descriptor PathBasedCacheDescriptor to remove
-   * @throws IOException if the descriptor could not be removed
+   * @param id identifier of the PathBasedCacheDirective to remove
+   * @throws IOException if the directive could not be removed
-  public void removePathBasedCacheDescriptor(PathBasedCacheDescriptor descriptor)
+  public void removePathBasedCacheDirective(long id)
-    dfs.removePathBasedCacheDescriptor(descriptor.getEntryId());
+    dfs.removePathBasedCacheDirective(id);
-   * @param pool The cache pool to list, or null to list all pools.
-   * @param path The path name to list, or null to list all paths.
-   * @return A RemoteIterator which returns PathBasedCacheDescriptor objects.
+   * @param filter Filter parameters to use when listing the directives, null to
+   *               list all directives visible to us.
+   * @return A RemoteIterator which returns PathBasedCacheDirective objects.
-  public RemoteIterator<PathBasedCacheDescriptor> listPathBasedCacheDescriptors(
-      String pool, final Path path) throws IOException {
-    String pathName = path != null ? getPathName(fixRelativePart(path)) : null;
-    final RemoteIterator<PathBasedCacheDescriptor> iter =
-        dfs.listPathBasedCacheDescriptors(pool, pathName);
-    return new RemoteIterator<PathBasedCacheDescriptor>() {
+  public RemoteIterator<PathBasedCacheDirective> listPathBasedCacheDirectives(
+      PathBasedCacheDirective filter) throws IOException {
+    if (filter == null) {
+      filter = new PathBasedCacheDirective.Builder().build();
+    }
+    if (filter.getPath() != null) {
+      filter = new PathBasedCacheDirective.Builder(filter).
+          setPath(filter.getPath().
+              makeQualified(getUri(), filter.getPath())).
+                build();
+    }
+    final RemoteIterator<PathBasedCacheDirective> iter =
+        dfs.listPathBasedCacheDirectives(filter);
+    return new RemoteIterator<PathBasedCacheDirective>() {
-      public PathBasedCacheDescriptor next() throws IOException {
-        PathBasedCacheDescriptor desc = iter.next();
-        Path qualPath = desc.getPath().makeQualified(getUri(), path);
-        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,
-            desc.getReplication(), desc.getPool());
+      public PathBasedCacheDirective next() throws IOException {
+        PathBasedCacheDirective desc = iter.next();
+        Path p = desc.getPath().makeQualified(getUri(), desc.getPath());
+        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();

MOV26 UPD40 INS31 INS39 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 UPD74 MOV74 UPD42 INS21 INS43 INS42 INS42 INS25 INS21 INS39 INS42 UPD43 UPD43 UPD42 INS25 INS25 UPD66 UPD66 INS32 INS42 INS27 INS8 INS32 UPD66 UPD42 UPD66 UPD66 UPD42 INS66 UPD66 UPD66 UPD42 UPD42 INS27 INS8 INS27 INS8 UPD74 INS42 INS42 INS32 INS32 INS33 INS21 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS33 INS21 INS32 MOV33 INS21 UPD43 UPD74 MOV74 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS7 UPD42 UPD42 UPD42 UPD43 INS14 UPD42 UPD42 MOV42 INS42 INS32 INS42 MOV32 INS42 INS32 UPD42 UPD43 INS43 INS42 INS32 INS42 UPD42 INS32 INS42 UPD42 INS40 INS14 INS42 INS32 INS14 INS42 INS32 UPD43 INS32 INS43 INS42 INS14 INS42 INS32 INS32 INS43 INS42 INS32 INS42 MOV32 MOV32 UPD42 UPD42 INS32 UPD42 MOV42 INS40 MOV43 INS32 INS42 INS42 INS40 INS42 UPD42 MOV42 UPD42 UPD42 INS32 INS32 INS14 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD43 MOV43 INS42 INS42 INS32 INS40 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL66 DEL65 DEL83 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL27 DEL32 DEL33 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14