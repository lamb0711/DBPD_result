HDFS-14234. Limit WebHDFS to specifc user, host, directory triples.
Contributed by Clay B.

+import static org.apache.hadoop.hdfs.client.HdfsClientConfigKeys.DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT;
+import static org.apache.hadoop.hdfs.client.HdfsClientConfigKeys.DFS_WEBHDFS_REST_CSRF_ENABLED_KEY;
+
+import java.util.Map;
+
+import javax.servlet.ServletException;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.security.http.RestCsrfPreventionFilter;
+import org.apache.hadoop.security.http.RestCsrfPreventionFilter.HttpInteraction;
+import org.slf4j.Logger;
+import io.netty.channel.ChannelHandler.Sharable;
-import org.slf4j.Logger;
-
-import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.security.http.RestCsrfPreventionFilter;
-import org.apache.hadoop.security.http.RestCsrfPreventionFilter.HttpInteraction;
+@Sharable
-  public RestCsrfPreventionFilterHandler(
+  RestCsrfPreventionFilterHandler(
+    if(restCsrfPreventionFilter == null) {
+      LOG.warn("Got null for restCsrfPreventionFilter - will not do any filtering.");
+    }
-    restCsrfPreventionFilter.handleHttpInteraction(new NettyHttpInteraction(
-        ctx, req));
+    if(restCsrfPreventionFilter != null) {
+      restCsrfPreventionFilter.handleHttpInteraction(new NettyHttpInteraction(
+          ctx, req));
+    } else {
+      // we do not have a valid filter simply pass requests
+      new NettyHttpInteraction(ctx, req).proceed();
+    }
-    public NettyHttpInteraction(ChannelHandlerContext ctx, HttpRequest req) {
+    NettyHttpInteraction(ChannelHandlerContext ctx, HttpRequest req) {
+
+  /**
+   * Creates a {@link RestCsrfPreventionFilter} for the {@DatanodeHttpServer}.
+   * This method takes care of configuration and implementing just enough of the
+   * servlet API and related interfaces so that the DataNode can get a fully
+   * initialized instance of the filter.
+   *
+   * @param conf configuration to read
+   * @return initialized filter, or null if CSRF protection not enabled
+   */
+  public static RestCsrfPreventionFilter initializeState(
+      Configuration conf) {
+    if (!conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,
+        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {
+      return null;
+    }
+    String restCsrfClassName = RestCsrfPreventionFilter.class.getName();
+    Map<String, String> restCsrfParams = RestCsrfPreventionFilter
+        .getFilterParams(conf, "dfs.webhdfs.rest-csrf.");
+    RestCsrfPreventionFilter filter = new RestCsrfPreventionFilter();
+    try {
+      filter.init(new DatanodeHttpServer
+          .MapBasedFilterConfig(restCsrfClassName, restCsrfParams));
+    } catch (ServletException e) {
+      throw new IllegalStateException(
+          "Failed to initialize RestCsrfPreventionFilter.", e);
+    }
+    return(filter);
+  }

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS78 INS31 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS25 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS60 INS60 INS60 INS54 INS41 INS27 INS8 INS27 MOV8 INS8 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS38 INS8 INS43 INS59 INS74 INS59 INS43 INS59 INS8 INS12 INS36 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS32 INS41 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS32 INS43 INS42 INS53 INS42 INS42 INS45 INS14 INS42 INS43 INS42 INS42 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS45 INS42 INS42 INS40 INS42 DEL83 DEL83