HADOOP-16354.  Enable AuthFilter as default for WebHDFS.
               Contributed by Prabhu Joseph

-import java.util.ArrayList;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import javax.servlet.FilterConfig;
-import javax.servlet.http.HttpServletRequestWrapper;
-import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.security.authentication.server.KerberosAuthenticationHandler;
-import org.apache.hadoop.security.authentication.server.PseudoAuthenticationHandler;
-import org.apache.hadoop.util.StringUtils;
+import org.apache.hadoop.security.authentication.server.ProxyUserAuthenticationFilter;
-public class AuthFilter extends AuthenticationFilter {
-  public static final String CONF_PREFIX = "dfs.web.authentication.";
-
-  /**
-   * Returns the filter configuration properties,
-   * including the ones prefixed with {@link #CONF_PREFIX}.
-   * The prefix is removed from the returned property names.
-   *
-   * @param prefix parameter not used.
-   * @param config parameter contains the initialization values.
-   * @return Hadoop-Auth configuration properties.
-   * @throws ServletException 
-   */
-  @Override
-  protected Properties getConfiguration(String prefix, FilterConfig config)
-      throws ServletException {
-    final Properties p = super.getConfiguration(CONF_PREFIX, config);
-    // if not set, configure based on security enabled
-    if (p.getProperty(AUTH_TYPE) == null) {
-      p.setProperty(AUTH_TYPE, UserGroupInformation.isSecurityEnabled()?
-          KerberosAuthenticationHandler.TYPE: PseudoAuthenticationHandler.TYPE);
-    }
-    // if not set, enable anonymous for pseudo authentication
-    if (p.getProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED) == null) {
-      p.setProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED, "true");
-    }
-    //set cookie path
-    p.setProperty(COOKIE_PATH, "/");
-    return p;
-  }
+public class AuthFilter extends ProxyUserAuthenticationFilter {
-    final HttpServletRequest httpRequest = toLowerCase((HttpServletRequest)request);
+    final HttpServletRequest httpRequest = ProxyUserAuthenticationFilter.
+        toLowerCase((HttpServletRequest)request);
-    if (tokenString != null) {
+    if (tokenString != null && httpRequest.getServletPath().startsWith(
+        WebHdfsFileSystem.PATH_PREFIX)) {
-    super.doFilter(httpRequest, response, filterChain);
+    super.doFilter(request, response, filterChain);
-  private static HttpServletRequest toLowerCase(final HttpServletRequest request) {
-    @SuppressWarnings("unchecked")
-    final Map<String, String[]> original = (Map<String, String[]>)request.getParameterMap();
-    if (!ParamFilter.containsUpperCase(original.keySet())) {
-      return request;
-    }
-
-    final Map<String, List<String>> m = new HashMap<String, List<String>>();
-    for(Map.Entry<String, String[]> entry : original.entrySet()) {
-      final String key = StringUtils.toLowerCase(entry.getKey());
-      List<String> strings = m.get(key);
-      if (strings == null) {
-        strings = new ArrayList<String>();
-        m.put(key, strings);
-      }
-      for(String v : entry.getValue()) {
-        strings.add(v);
-      }
-    }
-
-    return new HttpServletRequestWrapper(request) {
-      private Map<String, String[]> parameters = null;
-
-      @Override
-      public Map<String, String[]> getParameterMap() {
-        if (parameters == null) {
-          parameters = new HashMap<String, String[]>();
-          for(Map.Entry<String, List<String>> entry : m.entrySet()) {
-            final List<String> a = entry.getValue();
-            parameters.put(entry.getKey(), a.toArray(new String[a.size()]));
-          }
-        }
-       return parameters;
-      }
-
-      @Override
-      public String getParameter(String name) {
-        final List<String> a = m.get(name);
-        return a == null? null: a.get(0);
-      }
-      
-      @Override
-      public String[] getParameterValues(String name) {
-        return getParameterMap().get(name);
-      }
-
-      @Override
-      public Enumeration<String> getParameterNames() {
-        final Iterator<String> i = m.keySet().iterator();
-        return new Enumeration<String>() {
-          @Override
-          public boolean hasMoreElements() {
-            return i.hasNext();
-          }
-          @Override
-          public String nextElement() {
-            return i.next();
-          }
-        };
-      }
-    };
-  }

UPD40 UPD43 UPD42 INS27 MOV27 INS32 UPD42 INS42 INS32 INS42 INS40 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL48 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL40 DEL16 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL33 DEL27 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL42 DEL33 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL14 DEL7 DEL21 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL42 DEL42 DEL34 DEL32 DEL16 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31