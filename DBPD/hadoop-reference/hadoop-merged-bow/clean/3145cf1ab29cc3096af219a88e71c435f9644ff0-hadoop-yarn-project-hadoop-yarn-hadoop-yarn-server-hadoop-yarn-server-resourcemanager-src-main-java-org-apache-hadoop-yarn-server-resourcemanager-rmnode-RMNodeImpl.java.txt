Merge r1449958 through r1453659 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1453669 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ConcurrentLinkedQueue;
+import com.google.common.annotations.VisibleForTesting;
+
+  private final ConcurrentLinkedQueue<UpdatedContainerInfo> nodeUpdateQueue;
+  private volatile boolean nextHeartBeat = true;
+
+    this.nodeUpdateQueue = new ConcurrentLinkedQueue<UpdatedContainerInfo>();  
+  public void updateHeartbeatResponseForCleanup(HeartbeatResponse response) {
+    this.writeLock.lock();
+
+    try {
+      response.addAllContainersToCleanup(
+          new ArrayList<ContainerId>(this.containersToClean));
+      response.addAllApplicationsToCleanup(this.finishedApplications);
+      this.containersToClean.clear();
+      this.finishedApplications.clear();
+    } finally {
+      this.writeLock.unlock();
+    }
+  };
+
+  @Override
+      rmNode.nodeUpdateQueue.clear();
+      rmNode.nodeUpdateQueue.clear();
+        LOG.info("Node " + rmNode.nodeId + " reported UNHEALTHY with details: "
+            + remoteNodeHealthStatus.getHealthReport());
+        rmNode.nodeUpdateQueue.clear();
-
-      rmNode.context.getDispatcher().getEventHandler().handle(
-          new NodeUpdateSchedulerEvent(rmNode, newlyLaunchedContainers, 
-              completedContainers));
+      if(newlyLaunchedContainers.size() != 0 
+          || completedContainers.size() != 0) {
+        rmNode.nodeUpdateQueue.add(new UpdatedContainerInfo
+            (newlyLaunchedContainers, completedContainers));
+      }
+      if(rmNode.nextHeartBeat) {
+        rmNode.nextHeartBeat = false;
+        rmNode.context.getDispatcher().getEventHandler().handle(
+            new NodeUpdateSchedulerEvent(rmNode));
+      }
-      // HeartBeat processing from our end is done, as node pulls the following
-      // lists before sending status-updates. Clear data-structures
-      // TODO: These lists could go to the NM multiple times, or never.
-      rmNode.containersToClean.clear();
-      rmNode.finishedApplications.clear();
-
+
+  @Override
+  public List<UpdatedContainerInfo> pullContainerUpdates() {
+    List<UpdatedContainerInfo> latestContainerInfoList = 
+        new ArrayList<UpdatedContainerInfo>();
+    while(nodeUpdateQueue.peek() != null){
+      latestContainerInfoList.add(nodeUpdateQueue.poll());
+    }
+    this.nextHeartBeat = true;
+    return latestContainerInfoList;
+  }
+
+  @VisibleForTesting
+  public void setNextHeartBeat(boolean nextHeartBeat) {
+    this.nextHeartBeat = nextHeartBeat;
+  }
+  
+  @VisibleForTesting
+  public int getQueueSize() {
+    return nodeUpdateQueue.size();
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS42 INS9 INS21 INS42 INS43 INS42 INS21 INS54 INS42 INS43 INS43 INS60 INS61 INS21 INS41 INS42 INS39 INS42 INS21 INS42 INS41 INS42 INS42 INS7 INS42 INS32 INS8 INS8 INS21 INS21 INS25 INS25 INS42 INS42 INS74 INS59 INS27 INS8 INS7 INS42 INS7 INS32 INS22 INS14 INS22 INS42 INS21 INS21 INS21 INS21 INS21 INS32 INS32 INS27 INS8 INS40 INS8 INS43 INS43 INS42 INS14 INS32 INS33 INS21 INS22 INS9 INS22 INS42 INS42 INS42 INS52 INS42 INS74 INS52 INS42 INS32 INS32 INS32 INS32 INS32 INS40 INS42 INS40 INS42 INS21 INS21 INS27 INS27 MOV21 MOV21 MOV21 INS42 INS42 INS74 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS43 INS43 INS42 INS42 INS14 INS42 INS42 INS22 INS22 INS42 INS22 INS42 INS22 INS42 INS32 INS32 INS32 INS34 INS32 INS34 INS7 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS74 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS42 INS42 INS42 UPD40 INS42 INS14 INS40 INS9 INS42 INS42 INS42 INS42 INS43 INS43 INS52 INS42 INS45 INS40 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42