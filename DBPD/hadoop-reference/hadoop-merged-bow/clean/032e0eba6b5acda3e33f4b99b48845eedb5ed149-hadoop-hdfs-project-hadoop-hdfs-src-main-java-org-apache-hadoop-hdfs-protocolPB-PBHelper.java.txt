Merge branch 'trunk' into HDFS-6581

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java

+import static org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.CipherSuiteProto;
+import static org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.CryptoProtocolVersionProto;
+import org.apache.hadoop.crypto.CryptoProtocolVersion;
-        .setKeyName(zone.getKeyName())
+        .setCryptoProtocolVersion(convert(zone.getVersion()))
+        .setKeyName(zone.getKeyName())
-        convert(proto.getSuite()), proto.getKeyName());
+        convert(proto.getSuite()), convert(proto.getCryptoProtocolVersion()),
+        proto.getKeyName());
-  public static HdfsProtos.CipherSuite convert(CipherSuite suite) {
+  public static CipherSuiteProto convert(CipherSuite suite) {
-      return HdfsProtos.CipherSuite.UNKNOWN;
+      return CipherSuiteProto.UNKNOWN;
-      return HdfsProtos.CipherSuite.AES_CTR_NOPADDING;
+      return CipherSuiteProto.AES_CTR_NOPADDING;
-  public static CipherSuite convert(HdfsProtos.CipherSuite proto) {
+  public static CipherSuite convert(CipherSuiteProto proto) {
-  public static List<HdfsProtos.CipherSuite> convertCipherSuites
-      (List<CipherSuite> suites) {
-    if (suites == null) {
-      return null;
-    }
-    List<HdfsProtos.CipherSuite> protos =
-        Lists.newArrayListWithCapacity(suites.size());
-    for (CipherSuite suite : suites) {
-      protos.add(convert(suite));
+  public static List<CryptoProtocolVersionProto> convert(
+      CryptoProtocolVersion[] versions) {
+    List<CryptoProtocolVersionProto> protos =
+        Lists.newArrayListWithCapacity(versions.length);
+    for (CryptoProtocolVersion v: versions) {
+      protos.add(convert(v));
-  public static List<CipherSuite> convertCipherSuiteProtos(
-      List<HdfsProtos.CipherSuite> protos) {
-    List<CipherSuite> suites = Lists.newArrayListWithCapacity(protos.size());
-    for (HdfsProtos.CipherSuite proto : protos) {
-      suites.add(convert(proto));
+  public static CryptoProtocolVersion[] convertCryptoProtocolVersions(
+      List<CryptoProtocolVersionProto> protos) {
+    List<CryptoProtocolVersion> versions =
+        Lists.newArrayListWithCapacity(protos.size());
+    for (CryptoProtocolVersionProto p: protos) {
+      versions.add(convert(p));
-    return suites;
+    return versions.toArray(new CryptoProtocolVersion[] {});
+  }
+
+  public static CryptoProtocolVersion convert(CryptoProtocolVersionProto
+      proto) {
+    switch(proto) {
+    case ENCRYPTION_ZONES:
+      return CryptoProtocolVersion.ENCRYPTION_ZONES;
+    default:
+      // Set to UNKNOWN and stash the unknown enum value
+      CryptoProtocolVersion version = CryptoProtocolVersion.UNKNOWN;
+      version.setUnknownValue(proto.getNumber());
+      return version;
+    }
+  }
+
+  public static CryptoProtocolVersionProto convert(CryptoProtocolVersion
+      version) {
+    switch(version) {
+    case UNKNOWN:
+      return CryptoProtocolVersionProto.UNKNOWN_PROTOCOL_VERSION;
+    case ENCRYPTION_ZONES:
+      return CryptoProtocolVersionProto.ENCRYPTION_ZONES;
+    default:
+      return null;
+    }
+        .setCryptoProtocolVersion(convert(info.getCryptoProtocolVersion()))
-      CipherSuite suite, String keyName) {
-    if (suite == null || keyName == null) {
+      CipherSuite suite, CryptoProtocolVersion version, String keyName) {
+    if (suite == null || version == null || keyName == null) {
+        .setCryptoProtocolVersion(convert(version))
+    CryptoProtocolVersion version = convert(proto.getCryptoProtocolVersion());
-    return new FileEncryptionInfo(suite, key, iv, keyName, ezKeyVersionName);
+    return new FileEncryptionInfo(suite, version, key, iv, keyName,
+        ezKeyVersionName);
-      CipherSuite suite, String keyName) {
-    if (fileProto == null || suite == null || keyName == null) {
+      CipherSuite suite, CryptoProtocolVersion version, String keyName) {
+    if (fileProto == null || suite == null || version == null ||
+        keyName == null) {
-    return new FileEncryptionInfo(suite, key, iv, keyName, ezKeyVersionName);
+    return new FileEncryptionInfo(suite, version, key, iv, keyName,
+        ezKeyVersionName);

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 UPD43 UPD74 MOV74 UPD42 INS5 UPD42 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS44 INS44 INS42 UPD43 UPD43 INS5 UPD42 INS43 INS85 UPD74 MOV74 INS42 INS43 INS42 INS50 INS42 INS43 INS42 INS50 INS43 INS42 INS60 INS43 INS42 INS42 INS42 INS43 INS85 UPD74 MOV74 UPD42 UPD42 MOV42 UPD43 UPD74 MOV74 INS32 INS42 INS42 INS49 INS41 INS49 INS60 INS21 INS41 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS32 INS43 INS59 INS42 INS32 UPD40 UPD40 INS42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 INS42 INS42 INS3 INS42 INS40 INS43 INS59 INS32 INS42 INS42 INS40 INS42 INS40 INS33 INS27 MOV32 INS42 INS42 INS42 INS32 MOV43 INS42 INS27 MOV43 INS42 INS32 INS42 MOV32 INS42 INS32 UPD42 INS40 UPD42 INS42 INS42 INS5 INS4 INS42 INS42 INS40 INS42 INS42 INS32 MOV27 INS27 UPD42 INS42 INS42 INS32 MOV27 INS27 MOV32 UPD42 MOV42 MOV32 INS42 INS42 UPD42 INS43 INS85 INS42 INS42 INS42 INS33 UPD42 INS32 INS42 INS42 INS42 INS33 UPD42 INS32 UPD42 UPD42 INS42 UPD42 MOV42 INS42 UPD42 INS32 INS42 MOV32 UPD42 INS32 INS42 INS42 UPD42 MOV32 INS42 INS32 INS42 INS32 INS42 INS42 DEL40 DEL40 DEL40 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL43 DEL43 DEL74 DEL40 DEL40 DEL42