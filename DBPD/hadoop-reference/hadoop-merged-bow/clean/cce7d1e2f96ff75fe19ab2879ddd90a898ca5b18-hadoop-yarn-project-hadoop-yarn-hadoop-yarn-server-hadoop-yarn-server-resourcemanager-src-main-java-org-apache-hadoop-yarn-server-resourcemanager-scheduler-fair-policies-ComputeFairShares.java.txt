Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import java.util.ArrayList;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FSQueue;
-  
+
+  /**
+   * Compute fair share of the given schedulables.Fair share is an allocation of
+   * shares considering only active schedulables ie schedulables which have
+   * running apps.
+   * 
+   * @param schedulables
+   * @param totalResources
+   * @param type
+   */
+  public static void computeShares(
+      Collection<? extends Schedulable> schedulables, Resource totalResources,
+      ResourceType type) {
+    Collection<Schedulable> activeSchedulables = new ArrayList<Schedulable>();
+    for (Schedulable sched : schedulables) {
+      if ((sched instanceof FSQueue) && !((FSQueue) sched).isActive()) {
+        setResourceValue(0, sched.getFairShare(), type);
+      } else {
+        activeSchedulables.add(sched);
+      }
+    }
+
+    computeSharesInternal(activeSchedulables, totalResources, type, false);
+  }
+
+  /**
+   * Compute the steady fair share of the given queues. The steady fair
+   * share is an allocation of shares considering all queues, i.e.,
+   * active and inactive.
+   *
+   * @param queues
+   * @param totalResources
+   * @param type
+   */
+  public static void computeSteadyShares(
+      Collection<? extends FSQueue> queues, Resource totalResources,
+      ResourceType type) {
+    computeSharesInternal(queues, totalResources, type, true);
+  }
+
-  public static void computeShares(
+  private static void computeSharesInternal(
-      ResourceType type) {
+      ResourceType type, boolean isSteadyShare) {
-      setResourceValue(computeShare(sched, right, type), sched.getFairShare(), type);
+      if (isSteadyShare) {
+        setResourceValue(computeShare(sched, right, type),
+            ((FSQueue) sched).getSteadyFairShare(), type);
+      } else {
+        setResourceValue(
+            computeShare(sched, right, type), sched.getFairShare(), type);
+      }

INS26 INS26 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD83 UPD42 INS44 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS43 INS42 INS60 INS70 INS21 INS65 INS65 INS65 INS65 INS74 INS42 INS43 INS42 INS43 INS42 INS21 INS39 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS76 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS32 INS66 INS66 INS66 INS42 INS42 INS42 INS43 INS76 INS42 INS42 INS32 INS8 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS9 INS42 INS43 INS42 INS42 INS42 INS42 INS9 INS25 INS42 INS42 INS42 INS74 INS42 INS27 INS8 INS8 INS42 INS42 INS8 MOV8 INS43 INS43 INS36 INS38 INS21 INS21 INS21 INS42 INS42 INS62 INS32 INS32 INS32 INS32 INS42 INS43 INS36 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS43 INS42 INS11 INS42 INS43 INS42 INS42