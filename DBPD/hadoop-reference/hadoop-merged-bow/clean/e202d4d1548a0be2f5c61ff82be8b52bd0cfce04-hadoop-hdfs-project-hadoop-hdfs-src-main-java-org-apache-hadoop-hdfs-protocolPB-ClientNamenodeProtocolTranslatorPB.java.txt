HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.PathBasedCacheEntry;
+import org.apache.hadoop.hdfs.protocol.PathBasedCacheDescriptor;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.PoolWritePermissionDeniedError;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException.PathAlreadyExistsInPoolError;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.InvalidIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.NoSuchIdException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.RemovePermissionDeniedException;
-import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheEntryException.UnexpectedRemovePathBasedCacheEntryException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.InvalidIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.NoSuchIdException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.RemovePermissionDeniedException;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException.UnexpectedRemovePathBasedCacheDescriptorException;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesElementProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheEntriesResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDescriptorsElementProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDescriptorsRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDescriptorsRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.ListPathBasedCacheDescriptorsResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntriesRequestProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntriesResponseProto;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheEntryErrorProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheDescriptorsRequestProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheDescriptorsResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos.RemovePathBasedCacheDescriptorErrorProto;
+import org.apache.hadoop.hdfs.server.namenode.CacheManager;
+    } else if (code == AddPathBasedCacheDirectiveErrorProto.
+        ADD_PERMISSION_DENIED_ERROR_VALUE) {
+      return new PoolWritePermissionDeniedError(directive);
+    } else if (code == AddPathBasedCacheDirectiveErrorProto.
+        PATH_ALREADY_EXISTS_IN_POOL_ERROR_VALUE) {
+      return new PathAlreadyExistsInPoolError(directive);
-  public List<Fallible<PathBasedCacheEntry>> addPathBasedCacheDirectives(
+  public List<Fallible<PathBasedCacheDescriptor>> addPathBasedCacheDirectives(
-      ArrayList<Fallible<PathBasedCacheEntry>> results = 
-          new ArrayList<Fallible<PathBasedCacheEntry>>(resultsCount);
+      ArrayList<Fallible<PathBasedCacheDescriptor>> results = 
+          new ArrayList<Fallible<PathBasedCacheDescriptor>>(resultsCount);
-          results.add(new Fallible<PathBasedCacheEntry>(
-                new PathBasedCacheEntry(code, directive)));
+          results.add(new Fallible<PathBasedCacheDescriptor>(
+                new PathBasedCacheDescriptor(code,
+                  directive.getPath(), directive.getPool())));
-          results.add(new Fallible<PathBasedCacheEntry>(
-                addPathBasedCacheDirectivesError(code, directive))); 
+          results.add(new Fallible<PathBasedCacheDescriptor>(
+                addPathBasedCacheDirectivesError(code, directive)));
-  private static IOException removePathBasedCacheEntriesError(long code, long id) {
-    if (code == RemovePathBasedCacheEntryErrorProto.
+  private static IOException removePathBasedCacheDescriptorsError(long code, long id) {
+    if (code == RemovePathBasedCacheDescriptorErrorProto.
-    } else if (code == RemovePathBasedCacheEntryErrorProto.
+    } else if (code == RemovePathBasedCacheDescriptorErrorProto.
-    } else if (code == RemovePathBasedCacheEntryErrorProto.
+    } else if (code == RemovePathBasedCacheDescriptorErrorProto.
-      return new UnexpectedRemovePathBasedCacheEntryException(id);
+      return new UnexpectedRemovePathBasedCacheDescriptorException(id);
-  public List<Fallible<Long>> removePathBasedCacheEntries(List<Long> ids)
+  public List<Fallible<Long>> removePathBasedCacheDescriptors(List<Long> ids)
-      RemovePathBasedCacheEntriesRequestProto.Builder builder =
-          RemovePathBasedCacheEntriesRequestProto.newBuilder();
+      RemovePathBasedCacheDescriptorsRequestProto.Builder builder =
+          RemovePathBasedCacheDescriptorsRequestProto.newBuilder();
-      RemovePathBasedCacheEntriesResponseProto result = 
-          rpcProxy.removePathBasedCacheEntries(null, builder.build());
+      RemovePathBasedCacheDescriptorsResponseProto result = 
+          rpcProxy.removePathBasedCacheDescriptors(null, builder.build());
-              removePathBasedCacheEntriesError(code, ids.get(i))));
+              removePathBasedCacheDescriptorsError(code, ids.get(i))));
-      implements BatchedEntries<PathBasedCacheEntry> {
-    private ListPathBasedCacheEntriesResponseProto response;
+      implements BatchedEntries<PathBasedCacheDescriptor> {
+    private ListPathBasedCacheDescriptorsResponseProto response;
-    BatchedPathBasedCacheEntries(ListPathBasedCacheEntriesResponseProto response) {
+    BatchedPathBasedCacheEntries(ListPathBasedCacheDescriptorsResponseProto response) {
-    public PathBasedCacheEntry get(int i) {
-      ListPathBasedCacheEntriesElementProto elementProto =
+    public PathBasedCacheDescriptor get(int i) {
+      ListPathBasedCacheDescriptorsElementProto elementProto =
-      return new PathBasedCacheEntry(elementProto.getId(), 
-          new PathBasedCacheDirective(elementProto.getPath(),
-              elementProto.getPool()));
+      return new PathBasedCacheDescriptor(elementProto.getId(),
+          elementProto.getPath(), elementProto.getPool());
-      extends BatchedRemoteIterator<Long, PathBasedCacheEntry> {
+      extends BatchedRemoteIterator<Long, PathBasedCacheDescriptor> {
-    public BatchedEntries<PathBasedCacheEntry> makeRequest(
+    public BatchedEntries<PathBasedCacheDescriptor> makeRequest(
-      ListPathBasedCacheEntriesResponseProto response;
+      ListPathBasedCacheDescriptorsResponseProto response;
-        ListPathBasedCacheEntriesRequestProto.Builder builder =
-            ListPathBasedCacheEntriesRequestProto.newBuilder().setPrevId(nextKey);
+        ListPathBasedCacheDescriptorsRequestProto.Builder builder =
+            ListPathBasedCacheDescriptorsRequestProto.newBuilder().setPrevId(nextKey);
-        ListPathBasedCacheEntriesRequestProto req = builder.build();
-        response = rpcProxy.listPathBasedCacheEntries(null, req);
+        ListPathBasedCacheDescriptorsRequestProto req = builder.build();
+        response = rpcProxy.listPathBasedCacheDescriptors(null, req);
-    public Long elementToPrevKey(PathBasedCacheEntry element) {
+    public Long elementToPrevKey(PathBasedCacheDescriptor element) {
-  public RemoteIterator<PathBasedCacheEntry> listPathBasedCacheEntries(long prevId,
+  public RemoteIterator<PathBasedCacheDescriptor> listPathBasedCacheDescriptors(long prevId,

INS26 INS26 INS26 UPD40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD74 UPD42 UPD42 UPD74 UPD74 UPD74 UPD42 UPD74 UPD43 UPD43 UPD43 UPD43 UPD74 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD40 UPD42 UPD43 MOV14 UPD42 UPD43 UPD42 INS25 UPD74 MOV74 UPD40 UPD43 UPD43 UPD42 UPD43 MOV32 UPD42 INS27 INS8 INS25 UPD74 UPD40 UPD40 UPD42 UPD42 UPD43 UPD43 INS42 INS40 INS41 INS27 INS8 MOV8 UPD43 INS74 UPD42 UPD42 UPD40 UPD42 INS14 INS42 INS40 INS41 UPD42 MOV43 INS74 UPD43 UPD42 INS43 INS42 INS14 MOV43 INS43 UPD42 UPD42 INS42 INS43 INS42 INS42 INS42 UPD74 MOV74 UPD74 MOV74 UPD43 UPD43 INS32 INS32 UPD43 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 DEL74 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL14