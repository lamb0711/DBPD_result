Merge branch 'HDFS-1312' into trunk

+import org.apache.hadoop.hdfs.server.diskbalancer.DiskBalancerConstants;
+import org.apache.hadoop.hdfs.server.diskbalancer.DiskBalancerException;
+  private DiskBalancer diskBalancer;
+
-  
+
+  /**
+   * Initilizes {@link DiskBalancer}.
+   * @param  data - FSDataSet
+   * @param conf - Config
+   */
+  private void initDiskBalancer(FsDatasetSpi data,
+                                             Configuration conf) {
+    if (this.diskBalancer != null) {
+      return;
+    }
+
+    DiskBalancer.BlockMover mover = new DiskBalancer.DiskBalancerMover(data,
+        conf);
+    this.diskBalancer = new DiskBalancer(getDatanodeUuid(), conf, mover);
+  }
+
+  /**
+   * Shutdown disk balancer.
+   */
+  private  void shutdownDiskBalancer() {
+    if (this.diskBalancer != null) {
+      this.diskBalancer.shutdown();
+      this.diskBalancer = null;
+    }
+  }
+
+    initDiskBalancer(data, conf);
+    shutdownDiskBalancer();
+
+  @Override // DataNodeMXBean
+  public String getDiskBalancerStatus() {
+    try {
+      return this.diskBalancer.queryWorkStatus().toJsonString();
+    } catch (IOException ex) {
+      LOG.debug("Reading diskbalancer Status failed. ex:{}", ex);
+      return "";
+    }
+  }
+
+  /**
+   * Allows submission of a disk balancer Job.
+   * @param planID  - Hash value of the plan.
+   * @param planVersion - Plan version, reserved for future use. We have only
+   *                    version 1 now.
+   * @param plan - Actual plan
+   * @throws IOException
+   */
+  @Override
+  public void submitDiskBalancerPlan(String planID,
+      long planVersion, String plan, boolean skipDateCheck) throws IOException {
+
+    checkSuperuserPrivilege();
+    // TODO : Support force option
+    this.diskBalancer.submitPlan(planID, planVersion, plan, skipDateCheck);
+  }
+
+  /**
+   * Cancels a running plan.
+   * @param planID - Hash string that identifies a plan
+   */
+  @Override
+  public void cancelDiskBalancePlan(String planID) throws
+      IOException {
+    checkSuperuserPrivilege();
+    this.diskBalancer.cancelPlan(planID);
+  }
+
+  /**
+   * Returns the status of current or last executed work plan.
+   * @return DiskBalancerWorkStatus.
+   * @throws IOException
+   */
+  @Override
+  public DiskBalancerWorkStatus queryDiskBalancerPlan() throws IOException {
+    checkSuperuserPrivilege();
+    return this.diskBalancer.queryWorkStatus();
+  }
+
+  /**
+   * Gets a runtime configuration value from  diskbalancer instance. For
+   * example : DiskBalancer bandwidth.
+   *
+   * @param key - String that represents the run time key value.
+   * @return value of the key as a string.
+   * @throws IOException - Throws if there is no such key
+   */
+  @Override
+  public String getDiskBalancerSetting(String key) throws IOException {
+    checkSuperuserPrivilege();
+    Preconditions.checkNotNull(key);
+    switch (key) {
+    case DiskBalancerConstants.DISKBALANCER_VOLUME_NAME:
+      return this.diskBalancer.getVolumeNames();
+    case DiskBalancerConstants.DISKBALANCER_BANDWIDTH :
+      return Long.toString(this.diskBalancer.getBandwidth());
+    default:
+      LOG.error("Disk Balancer - Unknown key in get balancer setting. Key: " +
+          key);
+      throw new DiskBalancerException("Unknown key",
+          DiskBalancerException.Result.UNKNOWN_KEY);
+    }
+  }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS60 INS21 INS65 INS25 INS21 INS21 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS21 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS21 INS65 INS65 INS65 INS42 INS42 INS42 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS42 INS21 INS21 INS50 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS43 INS59 INS7 INS66 INS27 INS8 INS32 INS32 INS8 INS12 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS32 INS66 INS42 INS66 INS42 INS32 INS32 INS66 INS66 INS42 INS32 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS32 INS42 INS49 INS41 INS49 INS41 INS49 INS21 INS53 INS42 INS22 INS33 INS41 INS40 INS42 INS14 INS22 INS14 INS22 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS41 INS44 INS8 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS40 INS32 INS32 INS14 INS52 INS42 INS43 INS42 INS42 INS52 INS42 INS43 INS32 INS42 INS42 INS52 INS42 INS32 INS7 INS32 INS43 INS42 INS21 INS41 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS45 INS40 INS40 INS42 INS42 INS22 INS42 INS22 INS33 INS32 INS42 INS42 INS32 INS45 INS52 INS42 INS22 INS42 INS45 INS42 INS42 INS52 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS45 INS42 INS52 INS42 INS52 INS42