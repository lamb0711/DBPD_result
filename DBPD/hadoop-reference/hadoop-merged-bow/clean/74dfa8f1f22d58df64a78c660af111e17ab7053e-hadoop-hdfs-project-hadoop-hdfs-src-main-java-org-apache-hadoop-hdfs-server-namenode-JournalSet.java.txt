HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.Comparator;
+import java.util.LinkedList;
+import com.google.common.collect.ComparisonChain;
+import com.google.common.collect.TreeMultiset;
+  static final public Comparator<EditLogInputStream>
+    EDIT_LOG_INPUT_STREAM_COMPARATOR = new Comparator<EditLogInputStream>() {
+      @Override
+      public int compare(EditLogInputStream a, EditLogInputStream b) {
+        return ComparisonChain.start().
+          compare(a.getFirstTxId(), b.getFirstTxId()).
+          compare(b.getLastTxId(), a.getLastTxId()).
+          result();
+      }
+    };
+  
-  
-   * Find the best editlog input stream to read from txid.
-   * If a journal throws an CorruptionException while reading from a txn id,
-   * it means that it has more transactions, but can't find any from fromTxId. 
-   * If this is the case and no other journal has transactions, we should throw
-   * an exception as it means more transactions exist, we just can't load them.
-   *
-   * @param fromTxnId Transaction id to start from.
-   * @return A edit log input stream with tranactions fromTxId 
-   *         or null if no more exist
+   * In this function, we get a bunch of streams from all of our JournalManager
+   * objects.  Then we add these to the collection one by one.
+   * 
+   * @param streams          The collection to add the streams to.  It may or 
+   *                         may not be sorted-- this is up to the caller.
+   * @param fromTxId         The transaction ID to start looking for streams at
+   * @param inProgressOk     Should we consider unfinalized streams?
-  public EditLogInputStream getInputStream(long fromTxnId, boolean inProgressOk)
-      throws IOException {
-    JournalManager bestjm = null;
-    long bestjmNumTxns = 0;
-    CorruptionException corruption = null;
-
+  public void selectInputStreams(Collection<EditLogInputStream> streams,
+      long fromTxId, boolean inProgressOk) {
+    final TreeMultiset<EditLogInputStream> allStreams =
+        TreeMultiset.create(EDIT_LOG_INPUT_STREAM_COMPARATOR);
-      if (jas.isDisabled()) continue;
-      
-      JournalManager candidate = jas.getManager();
-      long candidateNumTxns = 0;
-      try {
-        candidateNumTxns = candidate.getNumberOfTransactions(fromTxnId,
-            inProgressOk);
-      } catch (CorruptionException ce) {
-        corruption = ce;
-      } catch (IOException ioe) {
-        LOG.warn("Unable to read input streams from JournalManager " + candidate,
-            ioe);
-        continue; // error reading disk, just skip
-      }
-      
-      if (candidateNumTxns > bestjmNumTxns) {
-        bestjm = candidate;
-        bestjmNumTxns = candidateNumTxns;
-      }
-    }
-    
-    if (bestjm == null) {
-      if (corruption != null) {
-        throw new IOException("No non-corrupt logs for txid " 
-                                        + fromTxnId, corruption);
-      } else {
-        return null;
-      }
-    }
-    return bestjm.getInputStream(fromTxnId, inProgressOk);
-  }
-  
-  @Override
-  public long getNumberOfTransactions(long fromTxnId, boolean inProgressOk)
-      throws IOException {
-    long num = 0;
-    for (JournalAndStream jas: journals) {
+      }
+      jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);
+    }
+    // We want to group together all the streams that start on the same start
+    // transaction ID.  To do this, we maintain an accumulator (acc) of all
+    // the streams we've seen at a given start transaction ID.  When we see a
+    // higher start transaction ID, we select a stream from the accumulator and
+    // clear it.  Then we begin accumulating streams with the new, higher start
+    // transaction ID.
+    LinkedList<EditLogInputStream> acc =
+        new LinkedList<EditLogInputStream>();
+    for (EditLogInputStream elis : allStreams) {
+      if (acc.isEmpty()) {
+        acc.add(elis);
-        long newNum = jas.getManager().getNumberOfTransactions(fromTxnId,
-            inProgressOk);
-        if (newNum > num) {
-          num = newNum;
+        long accFirstTxId = acc.get(0).getFirstTxId();
+        if (accFirstTxId == elis.getFirstTxId()) {
+          acc.add(elis);
+        } else if (accFirstTxId < elis.getFirstTxId()) {
+          streams.add(acc.get(0));
+          acc.clear();
+          acc.add(elis);
+        } else if (accFirstTxId > elis.getFirstTxId()) {
+          throw new RuntimeException("sorted set invariants violated!  " +
+              "Got stream with first txid " + elis.getFirstTxId() +
+              ", but the last firstTxId was " + accFirstTxId);
-    return num;
+    if (!acc.isEmpty()) {
+      streams.add(acc.get(0));
+      acc.clear();
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS74 INS59 MOV29 MOV78 MOV83 INS39 UPD42 MOV42 MOV44 MOV44 MOV44 INS8 INS43 INS43 INS42 INS14 INS65 INS65 UPD65 INS74 INS42 UPD39 UPD42 INS60 MOV70 MOV60 INS70 INS25 INS42 INS42 INS74 INS1 UPD66 MOV66 UPD66 MOV66 INS42 UPD66 MOV66 UPD66 MOV66 UPD42 UPD66 INS42 UPD66 INS43 MOV43 INS83 INS74 MOV59 INS74 MOV44 UPD42 MOV42 INS8 INS38 INS8 INS43 INS43 INS31 INS42 INS43 INS43 UPD42 INS32 INS21 INS43 INS43 UPD42 INS14 UPD43 UPD42 INS25 INS32 INS21 INS21 INS42 INS42 MOV78 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS74 UPD42 MOV32 INS8 INS8 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS43 INS42 INS43 INS42 INS41 INS42 UPD42 UPD42 INS43 INS43 UPD42 UPD42 INS21 MOV60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS8 INS25 INS42 INS42 INS34 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS32 INS42 INS32 MOV21 INS27 INS8 INS25 INS32 INS42 INS32 INS32 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 MOV21 MOV21 MOV21 UPD27 MOV27 MOV8 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS34 UPD43 UPD42 INS27 INS32 INS45 INS42 INS45 UPD45 MOV45 INS42 INS42 DEL66 DEL65 DEL66 DEL39 DEL42 DEL34 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL43 DEL33 DEL34 DEL42 DEL42 DEL7 DEL45 DEL42 DEL27 DEL42 DEL42 DEL7 DEL42 DEL42 DEL7 DEL33 DEL42 DEL42 DEL43 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL60 DEL18 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL18 DEL8 DEL12 DEL54 DEL42 DEL42 DEL27 DEL8 DEL25 DEL8 DEL70 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31