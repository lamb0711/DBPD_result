YARN-2008. Fixed CapacityScheduler to calculate headroom based on max available capacity instead of configured max capacity. Contributed by Craig Welch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616580 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+  private static final Log LOG = LogFactory.getLog(CSQueueUtils.class);
+
+
+   public static float getAbsoluteMaxAvailCapacity(
+      ResourceCalculator resourceCalculator, Resource clusterResource, CSQueue queue) {
+      CSQueue parent = queue.getParent();
+      if (parent == null) {
+        return queue.getAbsoluteMaximumCapacity();
+      }
+
+      //Get my parent's max avail, needed to determine my own
+      float parentMaxAvail = getAbsoluteMaxAvailCapacity(
+        resourceCalculator, clusterResource, parent);
+      //...and as a resource
+      Resource parentResource = Resources.multiply(clusterResource, parentMaxAvail);
+
+      //check for no resources parent before dividing, if so, max avail is none
+      if (Resources.isInvalidDivisor(resourceCalculator, parentResource)) {
+        return 0.0f;
+      }
+      //sibling used is parent used - my used...
+      float siblingUsedCapacity = Resources.ratio(
+                 resourceCalculator,
+                 Resources.subtract(parent.getUsedResources(), queue.getUsedResources()),
+                 parentResource);
+      //my max avail is the lesser of my max capacity and what is unused from my parent
+      //by my siblings (if they are beyond their base capacity)
+      float maxAvail = Math.min(
+        queue.getMaximumCapacity(),
+        1.0f - siblingUsedCapacity);
+      //and, mutiply by parent to get absolute (cluster relative) value
+      float absoluteMaxAvail = maxAvail * parentMaxAvail;
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("qpath " + queue.getQueuePath());
+        LOG.debug("parentMaxAvail " + parentMaxAvail);
+        LOG.debug("siblingUsedCapacity " + siblingUsedCapacity);
+        LOG.debug("getAbsoluteMaximumCapacity " + queue.getAbsoluteMaximumCapacity());
+        LOG.debug("maxAvail " + maxAvail);
+        LOG.debug("absoluteMaxAvail " + absoluteMaxAvail);
+      }
+
+      if (absoluteMaxAvail < 0.0f) {
+        absoluteMaxAvail = 0.0f;
+      } else if (absoluteMaxAvail > 1.0f) {
+        absoluteMaxAvail = 1.0f;
+      }
+
+      return absoluteMaxAvail;
+   }

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS25 INS60 INS60 INS60 INS25 INS25 INS41 INS42 INS42 INS57 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS32 INS8 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS8 INS27 INS8 INS25 INS42 INS43 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS34 INS21 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS7 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS34 INS7 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS42 INS42