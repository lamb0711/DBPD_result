HDFS-6708. StorageType should be encoded in the block token. Contributed by Ewan Higgs

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import org.apache.hadoop.fs.StorageType;
-      EnumSet<BlockTokenIdentifier.AccessMode> modes) throws IOException {
+      EnumSet<BlockTokenIdentifier.AccessMode> modes,
+      StorageType[] storageTypes) throws IOException {
-    return generateToken(userID, block, modes);
+    return generateToken(userID, block, modes, storageTypes);
-      ExtendedBlock block, EnumSet<BlockTokenIdentifier.AccessMode> modes) throws IOException {
+      ExtendedBlock block, EnumSet<BlockTokenIdentifier.AccessMode> modes,
+      StorageType[] storageTypes) throws IOException {
-        .getBlockPoolId(), block.getBlockId(), modes, useProto);
+        .getBlockPoolId(), block.getBlockId(), modes, storageTypes, useProto);
+   *
+   * Some places need to check the access using StorageTypes and for other
+   * places the StorageTypes is not relevant.
-      ExtendedBlock block, BlockTokenIdentifier.AccessMode mode) throws InvalidToken {
+      ExtendedBlock block, BlockTokenIdentifier.AccessMode mode,
+      StorageType[] storageTypes) throws InvalidToken {
+    checkAccess(id, userId, block, mode);
+    if (storageTypes != null && storageTypes.length > 0) {
+      checkAccess(id.getStorageTypes(), storageTypes);
+    }
+  }
+
+  public void checkAccess(BlockTokenIdentifier id, String userId,
+      ExtendedBlock block, BlockTokenIdentifier.AccessMode mode)
+      throws InvalidToken {
+  /**
+   * Check if the requested StorageTypes match the StorageTypes in the
+   * BlockTokenIdentifier.
+   * Empty candidateStorageTypes specifiers mean 'all is permitted'. They
+   * would otherwise be nonsensical.
+   */
+  public static void checkAccess(StorageType[] candidateStorageTypes,
+      StorageType[] storageTypesRequested) throws InvalidToken {
+    if (storageTypesRequested.length == 0) {
+      throw new InvalidToken("The request has no StorageTypes. "
+          + "This is probably a configuration error.");
+    }
+    if (candidateStorageTypes.length == 0) {
+      return;
+    }
+
+    List<StorageType> unseenCandidates = new ArrayList<StorageType>();
+    unseenCandidates.addAll(Arrays.asList(candidateStorageTypes));
+    for (StorageType storageType : storageTypesRequested) {
+      final int index = unseenCandidates.indexOf(storageType);
+      if (index == -1) {
+        throw new InvalidToken("Block token with StorageTypes "
+            + Arrays.toString(candidateStorageTypes)
+            + " not valid for access with StorageTypes "
+            + Arrays.toString(storageTypesRequested));
+      }
+      Collections.swap(unseenCandidates, index, unseenCandidates.size()-1);
+      unseenCandidates.remove(unseenCandidates.size()-1);
+    }
+  }
+
-      ExtendedBlock block, BlockTokenIdentifier.AccessMode mode) throws InvalidToken {
+      ExtendedBlock block, BlockTokenIdentifier.AccessMode mode,
+      StorageType[] storageTypes) throws InvalidToken {
-    checkAccess(id, userId, block, mode);
+    checkAccess(id, userId, block, mode, storageTypes);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS44 INS5 INS42 INS5 INS42 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS42 MOV21 INS25 INS65 INS5 INS42 INS5 INS42 INS42 INS25 INS25 INS60 INS21 INS70 INS5 INS42 INS21 INS43 INS85 INS43 INS85 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS40 INS43 INS85 INS27 INS8 INS66 INS66 INS66 INS66 INS43 INS85 INS43 INS85 INS27 INS8 INS27 INS8 INS74 INS59 INS32 INS44 INS42 INS8 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS40 INS34 INS53 INS40 INS34 INS41 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS32 INS14 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS32 INS32 INS42 INS32 INS42 INS43 INS27 INS43 INS43 INS42 INS32 INS42 INS38 INS53 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS14 INS32 INS34 INS32 INS34 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL65 DEL29