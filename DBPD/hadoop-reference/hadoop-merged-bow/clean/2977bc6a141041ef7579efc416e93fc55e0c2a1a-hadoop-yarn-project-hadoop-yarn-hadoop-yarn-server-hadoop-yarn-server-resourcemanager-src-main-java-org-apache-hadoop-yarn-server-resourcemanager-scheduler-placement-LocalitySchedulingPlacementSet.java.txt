YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.SchedulingMode;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.PendingAsk;
+  private static final Log LOG =
+      LogFactory.getLog(LocalitySchedulingPlacementSet.class);
+
+  private volatile String primaryRequestedPartition =
+      RMNodeLabelsManager.NO_LABEL;
+          String partition = request.getNodeLabelExpression() == null ?
+              RMNodeLabelsManager.NO_LABEL :
+              request.getNodeLabelExpression();
+
+          this.primaryRequestedPartition = partition;
+
-          appSchedulingInfo.addRequestedPartition(
-              request.getNodeLabelExpression() == null ?
-                  RMNodeLabelsManager.NO_LABEL :
-                  request.getNodeLabelExpression());
+          appSchedulingInfo.addRequestedPartition(partition);
-  @Override
-  public ResourceRequest getResourceRequest(String resourceName) {
+  private ResourceRequest getResourceRequest(String resourceName) {
+  @Override
+  public PendingAsk getPendingAsk(String resourceName) {
+    try {
+      readLock.lock();
+      ResourceRequest request = getResourceRequest(resourceName);
+      if (null == request) {
+        return PendingAsk.ZERO;
+      } else{
+        return new PendingAsk(request.getCapability(),
+            request.getNumContainers());
+      }
+    } finally {
+      readLock.unlock();
+    }
+
+  }
+
+  @Override
+  public int getOutstandingAsksCount(String resourceName) {
+    try {
+      readLock.lock();
+      ResourceRequest request = getResourceRequest(resourceName);
+      if (null == request) {
+        return 0;
+      } else{
+        return request.getNumContainers();
+      }
+    } finally {
+      readLock.unlock();
+    }
+
+  }
+
+  public boolean canDelayTo(String resourceName) {
+    try {
+      readLock.lock();
+      ResourceRequest request = getResourceRequest(resourceName);
+      return request == null || request.getRelaxLocality();
+    } finally {
+      readLock.unlock();
+    }
+
+  }
+
+  @Override
+  public boolean acceptNodePartition(String nodePartition,
+      SchedulingMode schedulingMode) {
+    // We will only look at node label = nodeLabelToLookAt according to
+    // schedulingMode and partition of node.
+    String nodePartitionToLookAt;
+    if (schedulingMode == SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY) {
+      nodePartitionToLookAt = nodePartition;
+    } else {
+      nodePartitionToLookAt = RMNodeLabelsManager.NO_LABEL;
+    }
+
+    return primaryRequestedPartition.equals(nodePartitionToLookAt);
+  }
+
+  @Override
+  public String getPrimaryRequestedNodePartition() {
+    return primaryRequestedPartition;
+  }
+
+  @Override
+  public int getUniqueLocationAsks() {
+    return resourceRequestMap.size();
+  }
+
+  @Override
+  public void showRequests() {
+    for (ResourceRequest request : resourceRequestMap.values()) {
+      if (request.getNumContainers() > 0) {
+        LOG.debug("\tRequest=" + request);
+      }
+    }
+  }
+
+  @Override
-      NodeType type, SchedulerNode node, ResourceRequest request) {
+      NodeType type, SchedulerNode node) {
-      if (null == request) {
-        if (type == NodeType.NODE_LOCAL) {
-          request = resourceRequestMap.get(node.getNodeName());
-        } else if (type == NodeType.RACK_LOCAL) {
-          request = resourceRequestMap.get(node.getRackName());
-        } else{
-          request = resourceRequestMap.get(ResourceRequest.ANY);
-        }
+      ResourceRequest request;
+      if (type == NodeType.NODE_LOCAL) {
+        request = resourceRequestMap.get(node.getNodeName());
+      } else if (type == NodeType.RACK_LOCAL) {
+        request = resourceRequestMap.get(node.getRackName());
+      } else{
+        request = resourceRequestMap.get(ResourceRequest.ANY);
+
+  @Override
+  public Iterator<String> getAcceptedResouceNames() {
+    try {
+      readLock.lock();
+      return resourceRequestMap.keySet().iterator();
+    } finally {
+      readLock.unlock();
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 UPD83 MOV78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 MOV8 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS43 INS42 INS54 INS42 INS43 INS42 INS54 INS42 INS43 INS42 INS54 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS41 INS42 INS41 INS42 INS70 INS54 INS42 INS43 INS43 INS54 INS42 INS42 INS57 INS42 INS8 INS8 INS42 INS8 INS8 INS42 INS8 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS32 MOV44 INS32 INS8 MOV8 MOV8 INS42 INS42 INS8 INS8 INS43 INS21 INS60 INS25 INS21 INS21 INS60 INS25 INS21 INS21 INS60 INS41 INS21 INS42 INS42 INS42 INS40 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 MOV21 MOV60 INS60 MOV25 MOV41 INS21 INS41 INS21 INS42 INS32 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS43 INS59 MOV27 INS8 INS8 INS32 INS32 INS43 INS59 INS27 INS32 INS7 INS7 INS27 INS8 INS43 INS59 MOV32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS34 INS21 INS42 INS42 INS21 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS14 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS60 INS21 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 MOV42 MOV42 MOV42 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 MOV16 INS22 INS42 INS42 INS52 INS42 DEL25 DEL54 DEL8