HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)

-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATA_TRANSFER_PROTECTION_DEFAULT;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATA_TRANSFER_PROTECTION_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.IGNORE_SECURE_PORTS_FOR_TESTING_DEFAULT;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.IGNORE_SECURE_PORTS_FOR_TESTING_KEY;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
-import org.apache.hadoop.tracing.TraceAdminPB;
+    /** The storage locations of the newly added volumes. */
+    /** The storage locations of the volumes that are removed. */
+    /** The unchanged locations that existed in the old configuration. */
+    List<StorageLocation> unchangedLocations = Lists.newArrayList();
+   * @param newVolumes a comma separated string that specifies the data volumes.
-  ChangedVolumes parseChangedVolumes() throws IOException {
-    List<StorageLocation> locations = getStorageLocations(getConf());
+  ChangedVolumes parseChangedVolumes(String newVolumes) throws IOException {
+    Configuration conf = new Configuration();
+    conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);
+    List<StorageLocation> locations = getStorageLocations(conf);
-        if (sl.next().getFile().getCanonicalPath().equals(
+        StorageLocation location = sl.next();
+        if (location.getFile().getCanonicalPath().equals(
+          results.unchangedLocations.add(location);
-   * @throws Exception
+   * @throws IOException on error. If an IOException is thrown, some new volumes
+   * may have been successfully added and removed.
-  private synchronized void refreshVolumes(String newVolumes) throws Exception {
+  private synchronized void refreshVolumes(String newVolumes) throws IOException {
-    List<StorageLocation> locations = getStorageLocations(conf);
-    final int numOldDataDirs = dataDirs.size();
-    dataDirs = locations;
-    ChangedVolumes changedVolumes = parseChangedVolumes();
-
+    int numOldDataDirs = dataDirs.size();
+    ChangedVolumes changedVolumes = parseChangedVolumes(newVolumes);
+    List<String> effectiveVolumes = Lists.newArrayList();
+    for (StorageLocation sl : changedVolumes.unchangedLocations) {
+      effectiveVolumes.add(sl.toString());
+    }
+
+        final List<NamespaceInfo> nsInfos = Lists.newArrayList();
-          NamespaceInfo nsInfo = bpos.getNamespaceInfo();
-          LOG.info("Loading volumes for namesapce: " + nsInfo.getNamespaceID());
-          storage.addStorageLocations(
-              this, nsInfo, changedVolumes.newLocations, StartupOption.HOTSWAP);
+          nsInfos.add(bpos.getNamespaceInfo());
-        List<String> bpids = Lists.newArrayList();
-        for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {
-          bpids.add(bpos.getBlockPoolId());
-        }
-        List<StorageLocation> succeedVolumes =
-            data.addVolumes(changedVolumes.newLocations, bpids);
-
-        if (succeedVolumes.size() < changedVolumes.newLocations.size()) {
-          List<StorageLocation> failedVolumes = Lists.newArrayList();
-          // Clean all failed volumes.
-          for (StorageLocation location : changedVolumes.newLocations) {
-            if (!succeedVolumes.contains(location)) {
-              errorMessageBuilder.append("FAILED TO ADD:");
-              failedVolumes.add(location);
-            } else {
-              errorMessageBuilder.append("ADDED:");
+        ExecutorService service = Executors.newFixedThreadPool(
+            changedVolumes.newLocations.size());
+        List<Future<IOException>> exceptions = Lists.newArrayList();
+        for (final StorageLocation location : changedVolumes.newLocations) {
+          exceptions.add(service.submit(new Callable<IOException>() {
+            @Override
+            public IOException call() {
+              try {
+                data.addVolume(location, nsInfos);
+              } catch (IOException e) {
+                return e;
+              }
+              return null;
-            errorMessageBuilder.append(location);
-            errorMessageBuilder.append("\n");
+          }));
+        }
+
+        for (int i = 0; i < changedVolumes.newLocations.size(); i++) {
+          StorageLocation volume = changedVolumes.newLocations.get(i);
+          Future<IOException> ioExceptionFuture = exceptions.get(i);
+          try {
+            IOException ioe = ioExceptionFuture.get();
+            if (ioe != null) {
+              errorMessageBuilder.append(String.format("FAILED TO ADD: %s: %s\n",
+                  volume.toString(), ioe.getMessage()));
+            } else {
+              effectiveVolumes.add(volume.toString());
+            }
+            LOG.info("Storage directory is loaded: " + volume.toString());
+          } catch (Exception e) {
+            errorMessageBuilder.append(String.format("FAILED to ADD: %s: %s\n",
+                volume.toString(), e.getMessage()));
-          storage.removeVolumes(failedVolumes);
-          data.removeVolumes(failedVolumes);
-        storage.removeVolumes(changedVolumes.deactivateLocations);
+        try {
+          storage.removeVolumes(changedVolumes.deactivateLocations);
+        } catch (IOException e) {
+          errorMessageBuilder.append(e.getMessage());
+        }
-    } catch (IOException e) {
-      LOG.warn("There is IOException when refresh volumes! ", e);
-      throw e;
+    } finally {
+      conf.set(DFS_DATANODE_DATA_DIR_KEY,
+          Joiner.on(",").join(effectiveVolumes));
+      dataDirs = getStorageLocations(conf);
-        storage.recoverTransitionRead(this, bpid, nsInfo, dataDirs, startOpt);
+        storage.recoverTransitionRead(this, nsInfo, dataDirs, startOpt);

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS44 INS43 INS8 INS29 INS29 INS29 INS74 INS59 INS65 INS43 INS42 INS60 INS21 UPD42 MOV42 MOV60 MOV21 MOV60 INS60 MOV60 MOV60 INS70 MOV54 INS65 INS65 INS65 INS43 INS43 INS42 INS32 INS42 INS66 INS42 INS43 INS59 INS32 UPD42 INS66 INS66 MOV43 MOV59 MOV44 INS40 INS8 INS8 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 MOV43 UPD42 UPD42 UPD42 INS21 MOV21 INS21 INS43 UPD42 MOV42 UPD42 UPD42 INS32 INS32 INS7 INS42 INS60 INS42 INS42 INS32 MOV60 INS70 INS60 INS60 INS70 INS24 INS54 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS42 UPD42 MOV42 INS83 UPD74 MOV44 MOV32 INS8 INS43 INS59 INS74 INS59 INS44 INS40 MOV8 INS58 MOV27 INS37 INS8 INS8 INS12 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV32 INS21 MOV43 UPD42 MOV21 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS83 INS43 INS42 INS39 INS59 INS42 INS42 INS60 MOV60 INS54 MOV21 INS44 INS8 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS43 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS34 INS43 INS59 UPD74 INS8 INS12 INS43 INS42 INS21 INS42 INS40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV40 INS42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS32 UPD43 UPD43 UPD42 INS60 INS25 MOV21 INS44 INS8 INS42 INS32 INS42 INS42 INS14 INS40 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS59 INS27 INS8 INS8 MOV43 INS42 INS21 INS42 INS42 INS32 INS74 INS1 INS42 INS42 INS32 INS42 INS33 MOV21 MOV21 UPD42 UPD42 INS27 INS32 INS42 INS42 INS43 INS43 INS31 UPD42 MOV42 INS42 INS45 INS32 MOV42 MOV42 INS32 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS32 UPD42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS32 INS32 INS42 INS42 INS54 INS41 INS42 INS42 UPD45 MOV45 INS32 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS8 INS12 INS33 INS42 INS42 INS42 INS42 INS21 MOV44 INS8 INS32 INS41 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL27 DEL32 DEL42 DEL42 DEL42 DEL32 DEL40 DEL45 DEL42 DEL59 DEL60 DEL42 DEL52 DEL40 DEL32 DEL21 DEL8 DEL70 DEL43 DEL42 DEL44 DEL32 DEL70 DEL40 DEL42 DEL42 DEL32 DEL38 DEL8 DEL8 DEL25 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL42 DEL53 DEL8 DEL12 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42