YARN-5089. Improve "yarn log" command-line "logFiles" option to support
regex. Contributed by Xuan Gong

+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
-    return dumpAContainersLogsForALogType(appId, containerId, nodeId, jobOwner,
-      null, null);
+    ContainerLogsRequest options = new ContainerLogsRequest();
+    options.setAppId(ConverterUtils.toApplicationId(appId));
+    options.setContainerId(containerId);
+    options.setNodeId(nodeId);
+    options.setAppOwner(jobOwner);
+    List<String> logs = new ArrayList<String>();
+    options.setLogTypes(logs);
+    return dumpAContainersLogsForALogType(options, false);
-  public int dumpAContainersLogsForALogType(String appId, String containerId,
-      String nodeId, String jobOwner, List<String> logType, String localDir)
+  public int dumpAContainersLogsForALogType(ContainerLogsRequest options)
-    return dumpAContainersLogsForALogType(appId, containerId, nodeId,
-        jobOwner, logType, true, localDir);
+    return dumpAContainersLogsForALogType(options, true);
-  public int dumpAContainersLogsForALogType(String appId, String containerId,
-      String nodeId, String jobOwner, List<String> logType,
-      boolean outputFailure, String localDir) throws IOException {
-    ApplicationId applicationId = ConverterUtils.toApplicationId(appId);
+  public int dumpAContainersLogsForALogType(ContainerLogsRequest options,
+      boolean outputFailure) throws IOException {
+    ApplicationId applicationId = options.getAppId();
+    String jobOwner = options.getAppOwner();
+    String nodeId = options.getNodeId();
+    String containerId = options.getContainerId();
+    String localDir = options.getOutputLocalDir();
+    List<String> logType = options.getLogTypes();
-          if (logType == null) {
+          if (logType == null || logType.isEmpty()) {
-  public int dumpAContainersLogsForALogTypeWithoutNodeId(String appId,
-      String containerId, String jobOwner, List<String> logType,
-      String localDir) throws IOException {
-    ApplicationId applicationId = ConverterUtils.toApplicationId(appId);
+  public int dumpAContainersLogsForALogTypeWithoutNodeId(
+      ContainerLogsRequest options) throws IOException {
+    ApplicationId applicationId = options.getAppId();
+    String jobOwner = options.getAppOwner();
+    String containerId = options.getContainerId();
+    String localDir = options.getOutputLocalDir();
+    List<String> logType = options.getLogTypes();
-          if (logType == null) {
+          if (logType == null || logType.isEmpty()) {
-  public int dumpAllContainersLogs(ApplicationId appId, String appOwner,
-      String localDir) throws IOException {
+  public int dumpAllContainersLogs(ContainerLogsRequest options)
+      throws IOException {
+    ApplicationId appId = options.getAppId();
+    String appOwner = options.getAppOwner();
+    String localDir = options.getOutputLocalDir();
+    List<String> logTypes = options.getLogTypes();
-                  LogReader.readAContainerLogsForALogType(valueStream, out,
-                      thisNodeFile.getModificationTime());
-                  foundAnyLogs = true;
+                  if (logTypes == null || logTypes.isEmpty()) {
+                    LogReader.readAContainerLogsForALogType(valueStream, out,
+                        thisNodeFile.getModificationTime());
+                    foundAnyLogs = true;
+                  } else {
+                    int result = LogReader.readContainerLogsForALogType(
+                        valueStream, out, thisNodeFile.getModificationTime(),
+                        logTypes);
+                    if (result == 0) {
+                      foundAnyLogs = true;
+                    }
+                  }
-  public void printLogMetadata(ApplicationId appId,
-      String containerIdStr, String nodeId, String appOwner,
+  public void printLogMetadata(ContainerLogsRequest options,
+    ApplicationId appId = options.getAppId();
+    String appOwner = options.getAppOwner();
+    String nodeId = options.getNodeId();
+    String containerIdStr = options.getContainerId();
-  public void printNodesList(ApplicationId appId, String appOwner,
+  public void printNodesList(ContainerLogsRequest options,
+    ApplicationId appId = options.getAppId();
+    String appOwner = options.getAppOwner();
+
+  @Private
+  public Set<String> listContainerLogs(ContainerLogsRequest options)
+      throws IOException {
+    Set<String> logTypes = new HashSet<String>();
+    ApplicationId appId = options.getAppId();
+    String appOwner = options.getAppOwner();
+    String nodeId = options.getNodeId();
+    String containerIdStr = options.getContainerId();
+    boolean getAllContainers = (containerIdStr == null);
+    String nodeIdStr = (nodeId == null) ? null
+        : LogAggregationUtils.getNodeString(nodeId);
+    RemoteIterator<FileStatus> nodeFiles = getRemoteNodeFileDir(
+        appId, appOwner);
+    if (nodeFiles == null) {
+      return logTypes;
+    }
+    while (nodeFiles.hasNext()) {
+      FileStatus thisNodeFile = nodeFiles.next();
+      if (nodeIdStr != null) {
+        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
+          continue;
+        }
+      }
+      if (!thisNodeFile.getPath().getName()
+          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
+        AggregatedLogFormat.LogReader reader =
+            new AggregatedLogFormat.LogReader(getConf(),
+            thisNodeFile.getPath());
+        try {
+          DataInputStream valueStream;
+          LogKey key = new LogKey();
+          valueStream = reader.next(key);
+          while (valueStream != null) {
+            if (getAllContainers || (key.toString().equals(containerIdStr))) {
+              while (true) {
+                try {
+                  String logFile = LogReader.readContainerMetaDataAndSkipData(
+                      valueStream, null);
+                  logTypes.add(logFile);
+                } catch (EOFException eof) {
+                  break;
+                }
+              }
+              if (!getAllContainers) {
+                break;
+              }
+            }
+            // Next container
+            key = new LogKey();
+            valueStream = reader.next(key);
+          }
+        } finally {
+          reader.close();
+        }
+      }
+    }
+    return logTypes;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 MOV78 MOV78 MOV83 MOV39 MOV42 INS44 MOV43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS60 INS21 INS21 INS21 INS21 INS60 INS21 INS41 INS43 INS42 INS41 UPD43 UPD42 INS60 INS60 INS60 INS60 INS60 UPD43 UPD42 INS60 INS60 INS60 INS60 INS43 INS42 INS60 INS60 INS60 INS60 UPD43 UPD42 INS60 INS60 INS60 INS60 UPD43 UPD42 INS60 INS60 INS42 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS61 INS41 INS43 INS59 INS32 INS32 INS32 INS32 MOV74 INS59 INS32 INS32 INS42 INS32 UPD42 MOV43 INS59 MOV43 INS59 INS43 INS59 INS43 INS59 MOV74 INS59 UPD42 MOV43 INS59 INS43 INS59 INS43 INS59 MOV74 INS59 INS42 MOV43 INS59 MOV43 INS59 MOV43 INS59 INS74 INS59 UPD42 MOV43 INS59 MOV43 INS59 MOV43 INS59 INS43 INS59 UPD42 MOV43 INS59 INS43 INS59 INS42 MOV42 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS8 INS42 INS42 INS42 INS14 INS42 UPD42 MOV42 MOV32 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS32 MOV42 INS42 INS32 MOV42 INS42 INS32 MOV42 INS42 INS32 INS42 INS36 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS60 INS25 INS25 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS36 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS38 INS8 INS42 INS43 INS43 INS43 INS43 INS42 INS33 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS32 INS60 INS54 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 MOV42 INS42 INS38 INS8 INS32 INS42 INS40 INS43 INS59 INS8 INS8 INS32 INS18 INS32 INS42 INS40 INS42 INS14 INS60 INS60 INS21 INS61 INS21 INS27 INS27 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS32 INS32 INS43 INS59 INS43 INS59 INS7 INS27 INS8 INS32 MOV27 INS32 MOV27 INS32 INS32 INS42 INS40 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS8 INS7 INS7 INS42 INS42 INS36 INS61 INS25 INS42 INS14 INS42 INS32 INS32 INS9 INS8 INS38 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS54 INS42 INS10 INS42 INS8 INS42 INS42 INS8 INS12 INS25 INS60 INS21 INS44 INS8 INS27 MOV8 INS8 INS43 INS59 INS32 INS43 INS42 INS10 INS27 INS32 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS34 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS42 INS42 INS42 INS9 DEL42 DEL33 DEL33 DEL32 DEL41 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL9 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL44 DEL42 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44