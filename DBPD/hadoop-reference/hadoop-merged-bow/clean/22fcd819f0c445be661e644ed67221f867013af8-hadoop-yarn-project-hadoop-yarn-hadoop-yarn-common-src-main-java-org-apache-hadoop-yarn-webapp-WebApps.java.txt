YARN-5076. YARN web interfaces lack XFS protection. Contributed by Jonathan Maron.
(cherry picked from commit 2703ec68712279494d67b0d76b7ac10e7a1628be)

+import org.apache.hadoop.security.http.XFrameOptionsFilter;
-    private String configPrefix;
+    private String csrfConfigPrefix;
+    private String xfsConfigPrefix;
-     * @param csrfConfigPrefix The config prefix that identifies the
+     * @param prefix The config prefix that identifies the
-    public Builder<T> withCSRFProtection(String csrfConfigPrefix) {
-      this.configPrefix = csrfConfigPrefix;
+    public Builder<T> withCSRFProtection(String prefix) {
+      this.csrfConfigPrefix = prefix;
+      return this;
+    }
+
+    /**
+     * Enable the XFS filter.
+     * @param prefix The config prefix that identifies the
+     *                         XFS parameters applicable for this filter
+     *                         instance.
+     * @return the Builder instance
+     */
+    public Builder<T> withXFSProtection(String prefix) {
+      this.xfsConfigPrefix = prefix;
-        Map<String, String> params = getCsrfConfigParameters();
+        Map<String, String> params = getConfigParameters(csrfConfigPrefix);
+        params = getConfigParameters(xfsConfigPrefix);
+
+        if (hasXFSEnabled()) {
+          String xfsClassName = XFrameOptionsFilter.class.getName();
+          HttpServer2.defineFilter(server.getWebAppContext(), xfsClassName,
+              xfsClassName, params,
+              new String[] {"/*"});
+        }
+
-    private Map<String, String> getCsrfConfigParameters() {
-      Map<String, String> params = null;
-      if (configPrefix != null) {
-        // need to obtain parameters for CSRF filter
-        params =
-            RestCsrfPreventionFilter.getFilterParams(conf, configPrefix);
-      }
-      return params;
+    /**
+     * XFS filter is enabled by default.  If the enabled flag is not explicitly
+     * specified and set to "false", this method returns true.
+     * @return true if XFS is enabled, false otherwise.
+     */
+    private boolean hasXFSEnabled() {
+      return conf.getBoolean(YarnConfiguration.YARN_XFS_ENABLED, true);
+    }
+
+    private Map<String, String> getConfigParameters(String configPrefix) {
+      return configPrefix != null ? conf.getPropsWithPrefix(configPrefix) :
+          null;

INS26 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS83 MOV74 INS42 INS44 INS8 UPD42 INS42 INS42 UPD42 INS65 INS65 INS65 UPD43 MOV43 UPD43 MOV43 INS43 INS42 INS21 INS41 INS65 INS65 INS41 INS43 INS42 MOV41 UPD42 INS66 INS42 INS66 INS66 INS66 INS66 UPD42 UPD42 MOV42 INS7 INS52 INS66 INS66 INS66 INS32 INS42 INS16 UPD42 INS22 INS42 INS21 INS25 MOV42 INS42 INS40 INS9 MOV27 INS32 INS33 UPD42 INS52 INS42 INS7 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS60 INS21 UPD42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS3 INS57 INS42 INS42 INS42 INS5 INS4 INS43 INS43 INS85 INS45 INS42 INS42 DEL42 DEL83 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31