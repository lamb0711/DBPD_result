HDDS-1048. Remove SCMNodeStat from SCMNodeManager and use storage information from DatanodeInfo#StorageReportProto. Contributed by Nanda kumar.

-import org.apache.hadoop.hdds.protocol.proto.StorageContainerDatanodeProtocolProtos;
+import org.apache.hadoop.hdds.protocol.proto
+    .StorageContainerDatanodeProtocolProtos;
+import java.util.stream.Collectors;
-public class SCMNodeManager
-    implements NodeManager, StorageContainerNodeProtocol {
+public class SCMNodeManager implements NodeManager {
-  // Should we maintain aggregated stats? If this is not frequently used, we
-  // can always calculate it from nodeStats whenever required.
-  // Aggregated node stats
-  private SCMNodeStat scmStat;
-    this.scmStat = new SCMNodeStat();
-   * Gets all datanodes that are in a certain state. This function works by
+   * Returns all datanode that are in the given state. This function works by
-    return nodeStateManager.getNodes(nodestate);
+    return nodeStateManager.getNodes(nodestate).stream()
+        .map(node -> (DatanodeDetails)node).collect(Collectors.toList());
-    return nodeStateManager.getAllNodes();
+    return nodeStateManager.getAllNodes().stream()
+        .map(node -> (DatanodeDetails)node).collect(Collectors.toList());
-   * @return int -- count
+   * @return count
-   * @param datanodeDetails - Datanode Details
+   * @param datanodeDetails Datanode Details
-
-  private void updateNodeStat(UUID dnId, NodeReportProto nodeReport) {
-    SCMNodeStat stat;
-    try {
-      stat = nodeStateManager.getNodeStat(dnId);
-
-      // Updating the storage report for the datanode.
-      // I dont think we will get NotFound exception, as we are taking
-      // nodeInfo from nodeStateMap, as I see it is not being removed from
-      // the map, just we change the states. And during first time
-      // registration we call this, after adding to nodeStateMap. And also
-      // from eventhandler it is called only if it has node Report.
-      DatanodeInfo datanodeInfo = nodeStateManager.getNode(dnId);
-      if (nodeReport != null) {
-        datanodeInfo.updateStorageReports(nodeReport.getStorageReportList());
-      }
-
-    } catch (NodeNotFoundException e) {
-      LOG.debug("SCM updateNodeStat based on heartbeat from previous " +
-          "dead datanode {}", dnId);
-      stat = new SCMNodeStat();
-    }
-
-    if (nodeReport != null && nodeReport.getStorageReportCount() > 0) {
-      long totalCapacity = 0;
-      long totalRemaining = 0;
-      long totalScmUsed = 0;
-      List<StorageReportProto> storageReports = nodeReport
-          .getStorageReportList();
-      for (StorageReportProto report : storageReports) {
-        totalCapacity += report.getCapacity();
-        totalRemaining +=  report.getRemaining();
-        totalScmUsed+= report.getScmUsed();
-      }
-      scmStat.subtract(stat);
-      stat.set(totalCapacity, totalScmUsed, totalRemaining);
-      scmStat.add(stat);
-    }
-    nodeStateManager.setNodeStat(dnId, stat);
-  }
-
-      updateNodeStat(datanodeDetails.getUuid(), nodeReport);
+      processNodeReport(datanodeDetails, nodeReport);
-   * @param dnUuid
+   * @param datanodeDetails
-  public void processNodeReport(DatanodeDetails dnUuid,
+  public void processNodeReport(DatanodeDetails datanodeDetails,
-    this.updateNodeStat(dnUuid.getUuid(), nodeReport);
+    try {
+      DatanodeInfo datanodeInfo = nodeStateManager.getNode(datanodeDetails);
+      if (nodeReport != null) {
+        datanodeInfo.updateStorageReports(nodeReport.getStorageReportList());
+      }
+    } catch (NodeNotFoundException e) {
+      LOG.warn("Got node report from unregistered datanode {}",
+          datanodeDetails);
+    }
-    return new SCMNodeStat(this.scmStat);
+    long capacity = 0L;
+    long used = 0L;
+    long remaining = 0L;
+
+    for (SCMNodeStat stat : getNodeStats().values()) {
+      capacity += stat.getCapacity().get();
+      used += stat.getScmUsed().get();
+      remaining += stat.getRemaining().get();
+    }
+    return new SCMNodeStat(capacity, used, remaining);
-  public Map<UUID, SCMNodeStat> getNodeStats() {
-    return nodeStateManager.getNodeStatsMap();
+  public Map<DatanodeDetails, SCMNodeStat> getNodeStats() {
+
+    final Map<DatanodeDetails, SCMNodeStat> nodeStats = new HashMap<>();
+
+    final List<DatanodeInfo> healthyNodes =  nodeStateManager
+        .getNodes(NodeState.HEALTHY);
+    final List<DatanodeInfo> staleNodes = nodeStateManager
+        .getNodes(NodeState.STALE);
+    final List<DatanodeInfo> datanodes = new ArrayList<>(healthyNodes);
+    datanodes.addAll(staleNodes);
+
+    for (DatanodeInfo dnInfo : datanodes) {
+      SCMNodeStat nodeStat = getNodeStatInternal(dnInfo);
+      if (nodeStat != null) {
+        nodeStats.put(dnInfo, nodeStat);
+      }
+    }
+    return nodeStats;
+    final SCMNodeStat nodeStat = getNodeStatInternal(datanodeDetails);
+    return nodeStat != null ? new SCMNodeMetric(nodeStat) : null;
+  }
+
+  private SCMNodeStat getNodeStatInternal(DatanodeDetails datanodeDetails) {
-      return new SCMNodeMetric(
-          nodeStateManager.getNodeStat(datanodeDetails.getUuid()));
+      long capacity = 0L;
+      long used = 0L;
+      long remaining = 0L;
+
+      final DatanodeInfo datanodeInfo = nodeStateManager
+          .getNode(datanodeDetails);
+      final List<StorageReportProto> storageReportProtos = datanodeInfo
+          .getStorageReports();
+      for (StorageReportProto reportProto : storageReportProtos) {
+        capacity += reportProto.getCapacity();
+        used += reportProto.getScmUsed();
+        remaining += reportProto.getRemaining();
+      }
+      return new SCMNodeStat(capacity, used, remaining);
-      LOG.info("SCM getNodeStat from a decommissioned or removed datanode {}",
+      LOG.warn("Cannot generate NodeStat, datanode {} not found.",
+  // We should introduce DISK, SSD, etc., notion in
+  // SCMNodeStat and try to use it.
-    List<DatanodeDetails> healthyNodes =  getNodes(NodeState.HEALTHY);
-    List<DatanodeDetails> staleNodes = getNodes(NodeState.STALE);
+    List<DatanodeInfo> healthyNodes =  nodeStateManager
+        .getNodes(NodeState.HEALTHY);
+    List<DatanodeInfo> staleNodes = nodeStateManager
+        .getNodes(NodeState.STALE);
-    List<DatanodeDetails> datanodes = new ArrayList<>(healthyNodes);
+    List<DatanodeInfo> datanodes = new ArrayList<>(healthyNodes);
-    for (DatanodeDetails datanodeDetails : datanodes) {
-      DatanodeInfo dnInfo = (DatanodeInfo) datanodeDetails;
+    for (DatanodeInfo dnInfo : datanodes) {
-  /**
-   * Update the node stats and cluster storage stats in this SCM Node Manager.
-   *
-   * @param dnUuid datanode uuid.
-   */
-  @Override
-  // TODO: This should be removed.
-  public void processDeadNode(UUID dnUuid) {
-    try {
-      SCMNodeStat stat = nodeStateManager.getNodeStat(dnUuid);
-      if (stat != null) {
-        LOG.trace("Update stat values as Datanode {} is dead.", dnUuid);
-        scmStat.subtract(stat);
-        stat.set(0, 0, 0);
-      }
-    } catch (NodeNotFoundException e) {
-      LOG.warn("Can't update stats based on message of dead Datanode {}, it"
-          + " doesn't exist or decommissioned already.", dnUuid);
-    }
-  }
-

INS26 MOV31 INS40 INS31 INS31 INS31 MOV29 MOV78 INS83 MOV39 UPD42 MOV42 MOV44 MOV44 INS8 MOV29 MOV78 INS83 MOV43 INS42 INS8 MOV29 MOV78 INS83 INS74 INS42 INS8 INS8 UPD83 MOV43 INS42 MOV44 INS8 UPD43 UPD42 MOV54 MOV60 MOV60 MOV60 MOV70 INS41 INS43 INS43 INS43 INS60 INS60 INS60 INS60 INS21 INS70 INS41 INS60 INS41 INS54 UPD66 INS32 INS32 UPD66 UPD66 UPD42 UPD42 INS44 INS32 INS14 INS42 INS42 INS42 INS83 UPD74 MOV74 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS44 INS42 INS8 INS42 INS83 MOV43 INS59 INS16 INS8 MOV12 UPD74 UPD74 UPD74 INS44 INS32 INS42 INS32 INS32 INS42 INS32 UPD42 UPD34 UPD42 UPD34 UPD42 UPD34 MOV43 INS42 INS32 INS42 MOV43 INS42 INS42 INS42 UPD43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS42 INS60 INS25 INS42 INS32 INS27 INS14 INS33 INS60 INS60 INS60 MOV60 MOV60 INS70 INS41 UPD43 UPD43 UPD43 MOV43 INS42 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 UPD42 INS74 INS42 INS42 MOV42 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 UPD42 MOV42 INS74 INS42 MOV43 INS59 INS27 INS8 UPD42 MOV42 MOV42 INS42 INS33 MOV43 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS83 INS43 INS83 MOV44 INS42 INS8 INS14 UPD42 INS42 UPD42 INS42 UPD42 MOV32 INS42 INS59 INS11 MOV32 INS42 INS59 INS11 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS34 INS42 INS34 INS42 INS34 INS42 UPD42 UPD42 UPD42 MOV21 MOV21 MOV21 MOV43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 MOV43 INS42 UPD42 UPD42 INS45 UPD42 INS32 INS42 INS32 UPD42 INS32 UPD42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS7 INS7 INS7 UPD42 UPD45 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL83 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL14 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL45 DEL45 DEL27 DEL42 DEL14 DEL7 DEL21 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL44 DEL52 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL52 DEL42 DEL22 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL32 DEL14 DEL41 DEL8 DEL54 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL78 DEL42 DEL45 DEL32 DEL42 DEL32 DEL34 DEL34 DEL34 DEL32 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL11 DEL59 DEL60