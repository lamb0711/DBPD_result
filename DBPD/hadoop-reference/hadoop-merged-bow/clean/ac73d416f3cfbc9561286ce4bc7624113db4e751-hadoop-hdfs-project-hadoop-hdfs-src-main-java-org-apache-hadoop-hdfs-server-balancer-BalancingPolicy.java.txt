Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1615844 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.hdfs.StorageType;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorageReport;
+import org.apache.hadoop.hdfs.server.protocol.StorageReport;
+import org.apache.hadoop.hdfs.util.EnumCounters;
+import org.apache.hadoop.hdfs.util.EnumDoubles;
-  long totalCapacity;
-  long totalUsedSpace;
-  private double avgUtilization;
+  final EnumCounters<StorageType> totalCapacities
+      = new EnumCounters<StorageType>(StorageType.class);
+  final EnumCounters<StorageType> totalUsedSpaces
+      = new EnumCounters<StorageType>(StorageType.class);
+  final EnumDoubles<StorageType> avgUtilizations
+      = new EnumDoubles<StorageType>(StorageType.class);
-    totalCapacity = 0L;
-    totalUsedSpace = 0L;
-    avgUtilization = 0.0;
+    totalCapacities.reset();
+    totalUsedSpaces.reset();
+    avgUtilizations.reset();
-  abstract void accumulateSpaces(DatanodeInfo d);
+  abstract void accumulateSpaces(DatanodeStorageReport r);
-    this.avgUtilization = totalUsedSpace*100.0/totalCapacity;
-  }
-  double getAvgUtilization() {
-    return avgUtilization;
+    for(StorageType t : StorageType.asList()) {
+      final long capacity = totalCapacities.get(t);
+      if (capacity > 0L) {
+        final double avg  = totalUsedSpaces.get(t)*100.0/capacity;
+        avgUtilizations.set(t, avg);
+      }
+    }
-  /** Return the utilization of a datanode */
-  abstract double getUtilization(DatanodeInfo d);
+  double getAvgUtilization(StorageType t) {
+    return avgUtilizations.get(t);
+  }
+
+  /** @return the utilization of a particular storage type of a datanode;
+   *          or return null if the datanode does not have such storage type.
+   */
+  abstract Double getUtilization(DatanodeStorageReport r, StorageType t);
-    void accumulateSpaces(DatanodeInfo d) {
-      totalCapacity += d.getCapacity();
-      totalUsedSpace += d.getDfsUsed();  
+    void accumulateSpaces(DatanodeStorageReport r) {
+      for(StorageReport s : r.getStorageReports()) {
+        final StorageType t = s.getStorage().getStorageType();
+        totalCapacities.add(t, s.getCapacity());
+        totalUsedSpaces.add(t, s.getDfsUsed());
+      }
-    double getUtilization(DatanodeInfo d) {
-      return d.getDfsUsed()*100.0/d.getCapacity();
+    Double getUtilization(DatanodeStorageReport r, final StorageType t) {
+      long capacity = 0L;
+      long dfsUsed = 0L;
+      for(StorageReport s : r.getStorageReports()) {
+        if (s.getStorage().getStorageType() == t) {
+          capacity += s.getCapacity();
+          dfsUsed += s.getDfsUsed();
+        }
+      }
+      return capacity == 0L? null: dfsUsed*100.0/capacity;
-    void accumulateSpaces(DatanodeInfo d) {
-      totalCapacity += d.getCapacity();
-      totalUsedSpace += d.getBlockPoolUsed();  
+    void accumulateSpaces(DatanodeStorageReport r) {
+      for(StorageReport s : r.getStorageReports()) {
+        final StorageType t = s.getStorage().getStorageType();
+        totalCapacities.add(t, s.getCapacity());
+        totalUsedSpaces.add(t, s.getBlockPoolUsed());
+      }
-    double getUtilization(DatanodeInfo d) {
-      return d.getBlockPoolUsed()*100.0/d.getCapacity();
+    Double getUtilization(DatanodeStorageReport r, final StorageType t) {
+      long capacity = 0L;
+      long blockPoolUsed = 0L;
+      for(StorageReport s : r.getStorageReports()) {
+        if (s.getStorage().getStorageType() == t) {
+          capacity += s.getCapacity();
+          blockPoolUsed += s.getBlockPoolUsed();
+        }
+      }
+      return capacity == 0L? null: blockPoolUsed*100.0/capacity;

INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS83 INS74 INS83 INS74 UPD83 INS74 INS8 INS44 INS43 INS44 INS43 INS43 UPD42 INS14 INS43 INS43 UPD42 INS14 INS43 INS43 UPD42 INS14 UPD43 UPD42 INS70 INS43 INS42 UPD65 INS42 UPD43 UPD42 INS43 INS42 MOV78 INS8 MOV78 INS43 INS44 MOV78 INS8 MOV78 INS43 INS44 INS42 INS42 INS74 INS57 INS42 INS42 INS74 INS57 INS42 INS42 INS74 INS57 INS32 INS32 INS32 UPD42 INS44 INS32 INS8 INS42 INS32 UPD66 INS66 UPD42 INS42 UPD43 UPD42 INS70 INS42 UPD43 UPD42 INS83 INS43 INS42 INS60 INS60 INS70 UPD43 UPD42 INS70 INS42 UPD43 UPD42 INS83 INS43 INS42 INS60 INS60 INS70 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 UPD42 INS44 INS32 INS8 UPD42 INS42 INS39 INS59 INS39 INS59 INS44 INS32 INS8 INS16 UPD42 INS44 INS32 INS8 UPD42 INS42 INS39 INS59 INS39 INS59 INS44 INS32 INS8 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS43 INS42 INS42 INS42 INS60 MOV21 MOV21 INS42 INS34 INS42 INS34 INS43 INS42 INS42 INS42 INS25 INS27 INS33 INS27 INS43 INS42 INS42 INS42 INS60 MOV21 MOV21 INS42 INS34 INS42 INS34 INS43 INS42 INS42 INS42 INS25 INS27 INS33 INS27 INS42 INS32 INS42 INS34 INS60 INS21 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS27 INS8 INS42 INS34 MOV27 INS42 INS42 INS83 INS43 INS59 INS32 INS32 INS42 INS27 INS8 INS42 INS34 MOV27 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS7 INS7 INS32 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS7 INS7 MOV27 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL39 DEL39 DEL42 DEL34 DEL7 DEL42 DEL34 DEL7 DEL42 DEL34 DEL7 DEL42 DEL52 DEL42 DEL22 DEL27 DEL7 DEL21 DEL8 DEL42 DEL39 DEL42 DEL32 DEL7 DEL42 DEL32 DEL7 DEL8 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL32 DEL7 DEL42 DEL32 DEL7 DEL8 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27