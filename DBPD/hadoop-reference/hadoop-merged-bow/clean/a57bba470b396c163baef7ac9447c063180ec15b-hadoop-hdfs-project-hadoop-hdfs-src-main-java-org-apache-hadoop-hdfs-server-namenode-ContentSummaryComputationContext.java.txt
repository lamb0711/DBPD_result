Merge branch 'trunk' into HADOOP-12756

+import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
+
+import java.util.HashSet;
+import java.util.Set;
+  private Set<INode> includedNodes = new HashSet<>();
+  private Set<INode> deletedSnapshottedNodes = new HashSet<>();
-    this.counts = new ContentCounts.Builder().build();
-    this.snapshotCounts = new ContentCounts.Builder().build();
+    setCounts(new ContentCounts.Builder().build());
+    setSnapshotCounts(new ContentCounts.Builder().build());
+    ContentCounts counts = getCounts();
-  public ContentCounts getCounts() {
+  public synchronized ContentCounts getCounts() {
+  private synchronized void setCounts(ContentCounts counts) {
+    this.counts = counts;
+  }
+
+  private void setSnapshotCounts(ContentCounts snapshotCounts) {
+    this.snapshotCounts = snapshotCounts;
+  }
+
+
+  /**
+   * If the node is an INodeReference, resolves it to the actual inode.
+   * Snapshot diffs represent renamed / moved files as different
+   * INodeReferences, but the underlying INode it refers to is consistent.
+   *
+   * @param node
+   * @return The referred INode if there is one, else returns the input
+   * unmodified.
+   */
+  private INode resolveINodeReference(INode node) {
+    if (node.isReference() && node instanceof INodeReference) {
+      return ((INodeReference)node).getReferredINode();
+    }
+    return node;
+  }
+
+  /**
+   * Reports that a node is about to be included in this summary. Can be used
+   * either to simply report that a node has been including, or check whether
+   * a node has already been included.
+   *
+   * @param node
+   * @return true if node has already been included
+   */
+  public boolean nodeIncluded(INode node) {
+    INode resolvedNode = resolveINodeReference(node);
+    synchronized (includedNodes) {
+      if (!includedNodes.contains(resolvedNode)) {
+        includedNodes.add(resolvedNode);
+        return false;
+      }
+    }
+    return true;
+  }
+
+  /**
+   * Schedules a node that is listed as DELETED in a snapshot's diff to be
+   * included in the summary at the end of computation. See
+   * {@link #tallyDeletedSnapshottedINodes()} for more context.
+   *
+   * @param node
+   */
+  public void reportDeletedSnapshottedNode(INode node) {
+    deletedSnapshottedNodes.add(node);
+  }
+
+  /**
+   * Finalizes the computation by including all nodes that were reported as
+   * deleted by a snapshot but have not been already including due to other
+   * references.
+   * <p>
+   * Nodes that get renamed are listed in the snapshot's diff as both DELETED
+   * under the old name and CREATED under the new name. The computation
+   * relies on nodes to report themselves as being included (via
+   * {@link #nodeIncluded(INode)} as the only reliable way to determine which
+   * nodes were renamed within the tree being summarized and which were
+   * removed (either by deletion or being renamed outside of the tree).
+   */
+  public synchronized void tallyDeletedSnapshottedINodes() {
+    /* Temporarily create a new counts object so these results can then be
+    added to both counts and snapshotCounts */
+    ContentCounts originalCounts = getCounts();
+    setCounts(new ContentCounts.Builder().build());
+    for (INode node : deletedSnapshottedNodes) {
+      if (!nodeIncluded(node)) {
+        node.computeContentSummary(Snapshot.CURRENT_STATE_ID, this);
+      }
+    }
+    originalCounts.addContents(getCounts());
+    snapshotCounts.addContents(getCounts());
+    setCounts(originalCounts);
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS74 INS59 MOV21 INS83 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS60 INS43 INS42 INS21 INS43 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS51 INS41 INS65 INS65 INS43 INS42 INS21 INS65 INS60 INS21 INS70 INS21 INS21 INS21 INS42 INS42 INS74 INS42 INS42 INS74 INS32 INS32 INS43 INS59 INS42 MOV7 INS42 MOV7 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS42 INS8 INS9 INS66 INS66 INS65 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS43 INS59 INS32 INS44 INS42 INS8 INS32 INS32 INS32 INS43 INS43 INS42 MOV32 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS62 INS41 INS42 INS42 INS32 INS25 INS68 INS42 INS42 INS42 INS68 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS38 INS8 INS42 INS42 INS69 INS42 INS14 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS36 INS42 INS32 INS21 INS41 INS43 INS43 INS32 INS21 INS11 INS42 INS42 INS42 INS32 INS9 INS42 INS40 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS52 INS42