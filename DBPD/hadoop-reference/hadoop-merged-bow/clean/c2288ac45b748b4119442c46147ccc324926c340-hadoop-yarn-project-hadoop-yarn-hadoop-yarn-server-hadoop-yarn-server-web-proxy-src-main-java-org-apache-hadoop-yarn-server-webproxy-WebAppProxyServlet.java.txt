YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.config.RequestConfig;
-import org.apache.http.client.params.ClientPNames;
-import org.apache.http.client.params.CookiePolicy;
-import org.apache.http.conn.params.ConnRoutePNames;
-import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.impl.client.HttpClientBuilder;
+
+  /**
+   * Show the user a page that says that HTTPS must be used but was not.
+   * @param resp the http response
+   * @param link the link to point to
+   * @return true if HTTPS must be used but was not, false otherwise
+   * @throws IOException on any error.
+   */
+  @VisibleForTesting
+  static boolean checkHttpsStrictAndNotProvided(
+      HttpServletResponse resp, URI link, YarnConfiguration conf)
+      throws IOException {
+    String httpsPolicy = conf.get(
+        YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,
+        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);
+    boolean required = httpsPolicy.equals("STRICT");
+    boolean provided = link.getScheme().equals("https");
+    if (required && !provided) {
+      resp.setContentType(MimeType.HTML);
+      Page p = new Page(resp.getWriter());
+      p.html().
+          h1("HTTPS must be used").
+          h3().
+          __(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,
+              "is set to STRICT, which means that the tracking URL ",
+              "must be an HTTPS URL, but it is not.").
+          __("The tracking URL is: ", link).
+          __().
+          __();
+      return true;
+    }
+    return false;
+  }
+   * @param appId the ApplicationID
-  private static void proxyLink(final HttpServletRequest req,
+  private void proxyLink(final HttpServletRequest req,
-      final String proxyHost, final HTTP method) throws IOException {
-    DefaultHttpClient client = new DefaultHttpClient();
-    client
-        .getParams()
-        .setParameter(ClientPNames.COOKIE_POLICY,
-            CookiePolicy.BROWSER_COMPATIBILITY)
-        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);
+      final String proxyHost, final HTTP method, final ApplicationId appId)
+      throws IOException {
+    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();
+
+    String httpsPolicy = conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,
+        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);
+    if (httpsPolicy.equals("LENIENT") || httpsPolicy.equals("STRICT")) {
+      ProxyCA proxyCA = getProxyCA();
+      // ProxyCA could be null when the Proxy is run outside the RM
+      if (proxyCA != null) {
+        try {
+          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));
+          httpClientBuilder.setSSLHostnameVerifier(
+              proxyCA.getHostnameVerifier());
+        } catch (Exception e) {
+          throw new IOException(e);
+        }
+      }
+    }
+
-    client.getParams()
-        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);
+    httpClientBuilder.setDefaultRequestConfig(
+        RequestConfig.custom()
+        .setCircularRedirectsAllowed(true)
+        .setLocalAddress(localAddress)
+        .build());
+    HttpClient client = httpClientBuilder.build();
+
+  private ProxyCA getProxyCA() {
+    return ((ProxyCA) getServletContext().getAttribute(WebAppProxy.PROXY_CA));
+  }
+      if (checkHttpsStrictAndNotProvided(resp, trackingUri, conf)) {
+        return;
+      }
+
-      proxyLink(req, resp, toFetch, c, getProxyHost(), method);
+      proxyLink(req, resp, toFetch, c, getProxyHost(), method, id);

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS44 INS83 INS43 INS42 INS8 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS41 INS65 INS83 INS43 INS42 INS60 INS25 INS60 INS42 INS41 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS9 INS42 INS66 INS42 UPD43 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS36 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS38 INS21 INS60 INS21 INS41 UPD42 UPD42 INS32 INS42 INS42 INS32 INS32 INS32 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS11 INS25 INS42 INS42 INS40 INS40 INS42 INS42 INS45 INS32 INS42 INS45 INS42 INS32 INS43 INS59 INS32 INS9 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 UPD40 MOV40 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS54 MOV32 UPD42 MOV42 MOV42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS41 INS42 INS43 INS32 INS32 INS42 INS42 INS8 INS12 INS32 UPD42 INS9 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS21 INS21 INS44 INS8 INS42 UPD42 MOV42 INS32 INS42 INS40 INS45 INS45 INS32 INS32 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS14 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL14 DEL32 DEL42 DEL32 DEL40 DEL9 DEL32 DEL21 DEL40 DEL32