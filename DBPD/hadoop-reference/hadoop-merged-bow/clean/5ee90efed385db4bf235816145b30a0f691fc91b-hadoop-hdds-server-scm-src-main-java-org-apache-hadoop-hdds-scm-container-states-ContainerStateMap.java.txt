HDDS-228. Add the ReplicaMaps to ContainerStateManager.
Contributed by Ajay Kumar.

+import com.google.common.annotations.VisibleForTesting;
+import java.util.HashSet;
+import java.util.Set;
+import org.apache.hadoop.hdds.protocol.DatanodeDetails;
+import org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes;
+  // Map to hold replicas of given container.
+  private final Map<ContainerID, Set<DatanodeDetails>> contReplicaMap;
+    contReplicaMap = new HashMap<>();
+   * Returns the latest list of DataNodes where replica for given containerId
+   * exist. Throws an SCMException if no entry is found for given containerId.
+   *
+   * @param containerID
+   * @return Set<DatanodeDetails>
+   */
+  public Set<DatanodeDetails> getContainerReplicas(ContainerID containerID)
+      throws SCMException {
+    Preconditions.checkNotNull(containerID);
+    try (AutoCloseableLock lock = autoLock.acquire()) {
+      if (contReplicaMap.containsKey(containerID)) {
+        return Collections
+            .unmodifiableSet(contReplicaMap.get(containerID));
+      }
+    }
+    throw new SCMException(
+        "No entry exist for containerId: " + containerID + " in replica map.",
+        ResultCodes.FAILED_TO_FIND_CONTAINER);
+  }
+
+  /**
+   * Adds given datanodes as nodes where replica for given containerId exist.
+   * Logs a debug entry if a datanode is already added as replica for given
+   * ContainerId.
+   *
+   * @param containerID
+   * @param dnList
+   */
+  public void addContainerReplica(ContainerID containerID,
+      DatanodeDetails... dnList) {
+    Preconditions.checkNotNull(containerID);
+    // Take lock to avoid race condition around insertion.
+    try (AutoCloseableLock lock = autoLock.acquire()) {
+      for (DatanodeDetails dn : dnList) {
+        Preconditions.checkNotNull(dn);
+        if (contReplicaMap.containsKey(containerID)) {
+          if(!contReplicaMap.get(containerID).add(dn)) {
+            LOG.debug("ReplicaMap already contains entry for container Id: "
+                + "{},DataNode: {}", containerID, dn);
+          }
+        } else {
+          Set<DatanodeDetails> dnSet = new HashSet<>();
+          dnSet.add(dn);
+          contReplicaMap.put(containerID, dnSet);
+        }
+      }
+    }
+  }
+
+  /**
+   * Remove a container Replica for given DataNode.
+   *
+   * @param containerID
+   * @param dn
+   * @return True of dataNode is removed successfully else false.
+   */
+  public boolean removeContainerReplica(ContainerID containerID,
+      DatanodeDetails dn) throws SCMException {
+    Preconditions.checkNotNull(containerID);
+    Preconditions.checkNotNull(dn);
+
+    // Take lock to avoid race condition.
+    try (AutoCloseableLock lock = autoLock.acquire()) {
+      if (contReplicaMap.containsKey(containerID)) {
+        return contReplicaMap.get(containerID).remove(dn);
+      }
+    }
+    throw new SCMException(
+        "No entry exist for containerId: " + containerID + " in replica map.",
+        ResultCodes.FAILED_TO_FIND_CONTAINER);
+  }
+
+  @VisibleForTesting
+  public static Logger getLOG() {
+    return LOG;
+  }
+
+  /**

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS83 INS43 INS42 INS8 INS43 INS43 INS74 INS42 INS21 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS42 INS21 INS54 INS53 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS54 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS54 INS53 INS42 INS42 INS41 INS42 INS42 INS43 INS43 INS7 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS58 INS8 INS14 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS58 INS8 INS66 INS42 INS42 INS66 INS42 INS42 INS32 INS32 INS58 INS8 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS59 INS25 INS43 INS27 INS40 INS42 INS42 INS42 INS43 INS59 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS25 INS43 INS27 INS40 INS74 INS42 INS42 INS32 INS32 INS8 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS44 INS42 INS8 INS42 INS42 INS32 INS32 INS8 INS42 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS43 INS42 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS32 INS42 INS32 INS32 INS8 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS60 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS45 INS45 INS42