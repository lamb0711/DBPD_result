HDDS-1586. Allow Ozone RPC client to read with topology awareness. Contributed by Sammi Chen.

+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.util.Iterator;
+  private static final Logger LOG = LoggerFactory
+      .getLogger(Pipeline.class);
+  // nodes with ordered distance to client
+  private ThreadLocal<List<DatanodeDetails>> nodesInOrder = new ThreadLocal<>();
+  public DatanodeDetails getClosestNode() throws IOException {
+    if (nodesInOrder.get() == null || nodesInOrder.get().isEmpty()) {
+      LOG.debug("Nodes in order is empty, delegate to getFirstNode");
+      return getFirstNode();
+    }
+    return nodesInOrder.get().get(0);
+  }
+
+  public void setNodesInOrder(List<DatanodeDetails> nodes) {
+    nodesInOrder.set(nodes);
+  }
+
+  public List<DatanodeDetails> getNodesInOrder() {
+    if (nodesInOrder.get() == null || nodesInOrder.get().isEmpty()) {
+      LOG.debug("Nodes in order is empty, delegate to getNodes");
+      return getNodes();
+    }
+    return nodesInOrder.get();
+  }
+
+    // To save the message size on wire, only transfer the node order based on
+    // network topology
+    List<DatanodeDetails> nodes = nodesInOrder.get();
+    if (nodes != null && !nodes.isEmpty()) {
+      for (int i = 0; i < nodes.size(); i++) {
+        Iterator<DatanodeDetails> it = nodeStatus.keySet().iterator();
+        for (int j = 0; j < nodeStatus.keySet().size(); j++) {
+          if (it.next().equals(nodes.get(i))) {
+            builder.addMemberOrders(j);
+            break;
+          }
+        }
+      }
+      LOG.info("Serialize pipeline {} with nodesInOrder{ }", id.toString(),
+          nodes);
+    }
+        .setNodesInOrder(pipeline.getMemberOrdersList())
-
+    private List<Integer> nodeOrder = null;
+    private List<DatanodeDetails> nodesInOrder = null;
+      this.nodesInOrder = pipeline.nodesInOrder.get();
+    public Builder setNodesInOrder(List<Integer> orders) {
+      this.nodeOrder = orders;
+      return this;
+    }
+
-      return new Pipeline(id, type, factor, state, nodeStatus);
+      Pipeline pipeline = new Pipeline(id, type, factor, state, nodeStatus);
+
+      if (nodeOrder != null && !nodeOrder.isEmpty()) {
+        // This branch is for build from ProtoBuf
+        List<DatanodeDetails> nodesWithOrder = new ArrayList<>();
+        for(int i = 0; i < nodeOrder.size(); i++) {
+          int nodeIndex = nodeOrder.get(i);
+          Iterator<DatanodeDetails> it = nodeStatus.keySet().iterator();
+          while(it.hasNext() && nodeIndex >= 0) {
+            DatanodeDetails node = it.next();
+            if (nodeIndex == 0) {
+              nodesWithOrder.add(node);
+              break;
+            }
+            nodeIndex--;
+          }
+        }
+        LOG.info("Deserialize nodesInOrder {} in pipeline {}", nodesWithOrder,
+            id.toString());
+        pipeline.setNodesInOrder(nodesWithOrder);
+      } else if (nodesInOrder != null){
+        // This branch is for pipeline clone
+        pipeline.setNodesInOrder(nodesInOrder);
+      }
+      return pipeline;

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS23 INS23 INS31 INS42 INS42 INS32 INS43 INS74 INS42 INS14 INS42 INS42 INS25 INS41 INS74 INS42 INS21 INS43 INS43 INS25 INS41 INS60 INS25 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS57 INS42 INS43 INS43 INS74 INS27 INS8 INS32 INS43 INS43 INS32 INS42 INS42 INS27 INS8 INS32 INS74 INS59 INS27 INS8 INS32 INS43 INS43 INS42 INS33 INS43 INS43 INS42 INS33 INS21 INS42 INS74 INS42 INS21 INS41 INS60 INS25 INS43 INS42 INS42 INS43 INS27 INS32 INS21 INS41 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS21 INS41 INS42 INS42 INS43 INS43 INS42 INS32 INS27 INS38 INS24 INS21 MOV32 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS43 INS7 INS52 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS33 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS33 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS58 INS27 INS37 INS8 INS32 INS42 INS32 INS22 INS32 INS42 INS42 INS22 INS42 INS42 INS42 MOV14 INS27 INS38 INS60 INS24 INS21 INS21 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS39 INS59 INS42 INS32 INS42 INS60 INS24 INS42 INS42 INS45 INS32 INS42 UPD42 MOV42 INS42 INS52 INS42 INS40 INS42 INS52 INS42 INS42 INS33 INS32 INS74 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS42 INS33 INS21 INS42 INS34 INS42 INS42 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS61 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS42 INS74 INS42 INS34 INS42 INS42 INS39 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS32 INS8 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS27 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS27 INS8 INS37 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42