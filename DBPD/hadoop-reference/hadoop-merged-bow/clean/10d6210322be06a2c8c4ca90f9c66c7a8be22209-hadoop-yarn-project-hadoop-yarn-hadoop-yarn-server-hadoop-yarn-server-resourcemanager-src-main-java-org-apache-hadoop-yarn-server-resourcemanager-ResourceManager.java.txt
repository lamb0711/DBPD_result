Merge r1609845 through r1614231 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1614234 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.http.lib.StaticUserWebFilter;
+import org.apache.hadoop.security.authentication.server.KerberosAuthenticationHandler;
+import org.apache.hadoop.yarn.server.resourcemanager.security.RMAuthenticationHandler;
+import org.apache.hadoop.yarn.server.security.http.RMAuthenticationFilter;
+import org.apache.hadoop.yarn.server.security.http.RMAuthenticationFilterInitializer;
+
+    // Use the customized yarn filter instead of the standard kerberos filter to
+    // allow users to authenticate using delegation tokens
+    // 3 conditions need to be satisfied -
+    // 1. security is enabled
+    // 2. http auth type is set to kerberos
+    // 3. "yarn.resourcemanager.webapp.use-yarn-filter" override is set to true
+
+    Configuration conf = getConfig();
+    boolean useYarnAuthenticationFilter =
+        conf.getBoolean(
+          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,
+          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);
+    String authPrefix = "hadoop.http.authentication.";
+    String authTypeKey = authPrefix + "type";
+    String initializers = conf.get("hadoop.http.filter.initializers");
+    if (UserGroupInformation.isSecurityEnabled()
+        && useYarnAuthenticationFilter
+        && conf.get(authTypeKey, "").equalsIgnoreCase(
+          KerberosAuthenticationHandler.TYPE)) {
+      LOG.info("Using RM authentication filter(kerberos/delegation-token)"
+          + " for RM webapp authentication");
+      RMAuthenticationHandler
+        .setSecretManager(getClientRMService().rmDTSecretManager);
+      String yarnAuthKey =
+          authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;
+      conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());
+
+      initializers =
+          initializers == null || initializers.isEmpty() ? "" : ","
+              + initializers;
+      if (!initializers.contains(RMAuthenticationFilterInitializer.class
+        .getName())) {
+        conf.set("hadoop.http.filter.initializers",
+          RMAuthenticationFilterInitializer.class.getName() + initializers);
+      }
+    }
+
+    // if security is not enabled and the default filter initializer has been
+    // set, set the initializer to include the
+    // RMAuthenticationFilterInitializer which in turn will set up the simple
+    // auth filter.
+
+    if (!UserGroupInformation.isSecurityEnabled()) {
+      if (initializers == null || initializers.isEmpty()) {
+        conf.set("hadoop.http.filter.initializers",
+          RMAuthenticationFilterInitializer.class.getName());
+        conf.set(authTypeKey, "simple");
+      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {
+        conf.set("hadoop.http.filter.initializers",
+          RMAuthenticationFilterInitializer.class.getName() + ","
+              + initializers);
+        conf.set(authTypeKey, "simple");
+      }
+    }
+
+    // recover AMRMTokenSecretManager
+    rmContext.getAMRMTokenSecretManager().recover(state);
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS21 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS38 INS8 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS32 INS21 INS21 INS60 INS21 INS21 INS25 INS32 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS40 INS32 INS32 INS43 INS59 INS32 INS7 INS38 INS8 INS42 INS42 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS22 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS16 INS32 INS21 INS27 INS32 INS21 INS21 INS32 INS8 INS45 INS45 INS32 INS42 INS42 INS40 INS57 INS42 INS27 INS45 INS27 INS42 INS42 INS32 INS32 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS21 INS21 INS42 INS43 INS27 INS32 INS45 INS42 INS57 INS42 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS57 INS42 INS32 INS32 INS42 INS42 INS33 INS42 INS42 INS43 INS32 INS42 INS57 INS42 INS43 INS42 INS42 INS45 INS27 INS42 INS42 INS42 INS45 INS42 INS57 INS42 INS43 INS42 INS32 INS45 INS42 INS43 INS42 INS57 INS42 INS42 INS43 INS42