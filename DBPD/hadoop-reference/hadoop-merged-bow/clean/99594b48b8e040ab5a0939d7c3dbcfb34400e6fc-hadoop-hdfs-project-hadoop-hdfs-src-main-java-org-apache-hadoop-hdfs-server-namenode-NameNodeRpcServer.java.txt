HDFS-13075. [SPS]: Provide External Context implementation. Contributed by Uma Maheswara Rao G.

+    String operationName = "isStoragePolicySatisfierRunning";
+    namesystem.checkSuperuserPrivilege(operationName);
-    return namesystem.getBlockManager().isStoragePolicySatisfierRunning();
+    boolean isSPSRunning =
+        namesystem.getBlockManager().isStoragePolicySatisfierRunning();
+    namesystem.logAuditEvent(true, operationName, null);
+    return isSPSRunning;
+
+  @Override
+  public String getFilePath(Long inodeId) throws IOException {
+    checkNNStartup();
+    String operationName = "getFilePath";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getFilePath(inodeId);
+  }
+
+  @Override
+  public Long getNextSPSPathId() throws IOException {
+    checkNNStartup();
+    String operationName = "getNextSPSPathId";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getBlockManager().getNextSPSPathId();
+  }
+
+  @Override
+  public boolean checkDNSpaceForScheduling(DatanodeInfo dn,
+      StorageType type, long estimatedSize) throws IOException {
+    checkNNStartup();
+    String operationName = "checkDNSpaceForScheduling";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getBlockManager().getDatanodeManager()
+        .verifyTargetDatanodeHasSpaceForScheduling(dn, type, estimatedSize);
+  }
+
+  @Override
+  public boolean hasLowRedundancyBlocks(long inodeId) throws IOException {
+    checkNNStartup();
+    String operationName = "hasLowRedundancyBlocks";
+    namesystem.checkSuperuserPrivilege(operationName);
+    if (nn.isStandbyState()) {
+      throw new StandbyException("Not supported by Standby Namenode.");
+    }
+    return namesystem.getBlockManager().hasLowRedundancyBlocks(inodeId);
+  }

INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS60 INS21 INS60 INS21 INS42 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS25 INS41 INS42 INS42 INS42 INS21 INS60 INS21 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS21 INS60 INS21 INS25 INS41 INS42 INS39 INS42 INS42 INS21 INS60 INS21 INS25 INS41 INS43 INS59 INS32 INS39 INS59 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS8 INS32 INS32 INS43 INS59 INS32 INS32 INS8 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS8 INS32 INS32 INS43 INS59 INS32 INS32 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS9 INS42 INS33 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS53 INS32 INS42 INS42 INS14 INS14 INS42 INS42 INS14 INS32 INS42 INS14 INS42 INS42 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42