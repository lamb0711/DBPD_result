YARN-8665.  Added Yarn service cancel upgrade option.
            Contributed by Chandni Singh

-import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.service.component.instance.ComponentInstanceEventType;
+import static org.apache.hadoop.yarn.service.component.ComponentEventType.CANCEL_UPGRADE;
+import static org.apache.hadoop.yarn.service.component.ComponentEventType.UPGRADE;
-  private AtomicBoolean upgradeInProgress = new AtomicBoolean(false);
-  private ComponentEvent upgradeEvent;
-  private AtomicLong numContainersThatNeedUpgrade = new AtomicLong(0);
+  private UpgradeStatus upgradeStatus = new UpgradeStatus();
+  private UpgradeStatus cancelUpgradeStatus = new UpgradeStatus();
+          .addTransition(FLEXING, EnumSet.of(UPGRADING, FLEXING, STABLE),
+              CHECK_STABLE, new CheckStableTransition())
-          .addTransition(STABLE, UPGRADING, ComponentEventType.UPGRADE,
-              new ComponentNeedsUpgradeTransition())
-          //Upgrade while previous upgrade is still in progress
-          .addTransition(UPGRADING, UPGRADING, ComponentEventType.UPGRADE,
-              new ComponentNeedsUpgradeTransition())
-          .addTransition(UPGRADING, EnumSet.of(UPGRADING, FLEXING, STABLE),
-              CHECK_STABLE, new CheckStableTransition())
-          .addTransition(FLEXING, EnumSet.of(UPGRADING, FLEXING, STABLE),
-              CHECK_STABLE, new CheckStableTransition())
+          .addTransition(STABLE, UPGRADING, UPGRADE,
+              new NeedsUpgradeTransition())
+          .addTransition(STABLE, CANCEL_UPGRADING, CANCEL_UPGRADE,
+              new NeedsUpgradeTransition())
-          .addTransition(UPGRADING, FLEXING, CONTAINER_COMPLETED,
-              new ContainerCompletedTransition())
+
+          // Cancel upgrade while previous upgrade is still in progress
+          .addTransition(UPGRADING, CANCEL_UPGRADING,
+              CANCEL_UPGRADE, new NeedsUpgradeTransition())
+          .addTransition(UPGRADING, EnumSet.of(UPGRADING, STABLE),
+              CHECK_STABLE, new CheckStableTransition())
+          .addTransition(UPGRADING, UPGRADING, CONTAINER_COMPLETED,
+              new CompletedAfterUpgradeTransition())
+
+          .addTransition(CANCEL_UPGRADING, EnumSet.of(CANCEL_UPGRADING, FLEXING,
+              STABLE), CHECK_STABLE, new CheckStableTransition())
+          .addTransition(CANCEL_UPGRADING, CANCEL_UPGRADING,
+              CONTAINER_COMPLETED, new CompletedAfterUpgradeTransition())
+          .addTransition(CANCEL_UPGRADING, FLEXING, CONTAINER_ALLOCATED,
+              new ContainerAllocatedTransition())
+
-        component.componentSpec.setState(
+        component.setComponentState(
-      component.componentSpec.setState(
+      component.setComponentState(
-      component.componentSpec.setState(
+      component.setComponentState(
-        .getComponentSpec().getNumberOfContainers()
-        && component.numContainersThatNeedUpgrade.get() == 0) {
-      component.componentSpec.setState(
+        .getComponentSpec().getNumberOfContainers() &&
+        !component.doesNeedUpgrade()) {
+      component.setComponentState(
+    } else if (component.doesNeedUpgrade()) {
+      component.setComponentState(org.apache.hadoop.yarn.service.api.records.
+          ComponentState.NEEDS_UPGRADE);
+      return component.getState();
-      component.componentSpec.setState(
+      component.setComponentState(
-    } else {
-      //  component.numContainersThatNeedUpgrade.get() > 0
-      component.componentSpec.setState(org.apache.hadoop.yarn.service.api.
-          records.ComponentState.NEEDS_UPGRADE);
-      return UPGRADING;
+    return component.getState();
-    org.apache.hadoop.yarn.service.api.records.ComponentState curState =
-        component.componentSpec.getState();
-        if (component.numContainersThatNeedUpgrade.get() == 0
-            && component.componentMetrics.containersReady.value()
-            == component.componentMetrics.containersDesired.value()) {
-          component.componentSpec.setState(
+        if (!component.upgradeStatus.areContainersUpgrading() &&
+            !component.cancelUpgradeStatus.areContainersUpgrading() &&
+            component.componentMetrics.containersReady.value() ==
+                component.componentMetrics.containersDesired.value()) {
+          component.setComponentState(
-          if (curState != component.componentSpec.getState()) {
-            LOG.info("[COMPONENT {}] state changed from {} -> {}",
-                component.componentSpec.getName(), curState,
-                component.componentSpec.getState());
-          }
-          component.componentSpec.setState(
+          component.setComponentState(
-          component.componentSpec.setState(
+          component.setComponentState(
-        if (curState != component.componentSpec.getState()) {
-          LOG.info("[COMPONENT {}] state changed from {} -> {}",
-              component.componentSpec.getName(), curState,
-              component.componentSpec.getState());
-        }
-    // when the service is stable then the state of component needs to
-    // transition to stable
+    // triggers the state machine in component to reach appropriate state
+    // once the state in spec is changed.
-  private static class ComponentNeedsUpgradeTransition extends BaseTransition {
+  private static class CompletedAfterUpgradeTransition extends BaseTransition {
-      component.upgradeInProgress.set(true);
-      component.upgradeEvent = event;
-      component.componentSpec.setState(org.apache.hadoop.yarn.service.api.
-          records.ComponentState.NEEDS_UPGRADE);
-      component.numContainersThatNeedUpgrade.set(
+      Preconditions.checkNotNull(event.getContainerId());
+      component.updateMetrics(event.getStatus());
+      component.dispatcher.getEventHandler().handle(
+          new ComponentInstanceEvent(event.getContainerId(), STOP)
+              .setStatus(event.getStatus()));
+    }
+  }
+
+  private static class NeedsUpgradeTransition extends BaseTransition {
+    @Override
+    public void transition(Component component, ComponentEvent event) {
+      boolean isCancel = event.getType().equals(CANCEL_UPGRADE);
+      UpgradeStatus status = !isCancel ? component.upgradeStatus :
+          component.cancelUpgradeStatus;
+
+      status.inProgress.set(true);
+      status.targetSpec = event.getTargetSpec();
+      status.targetVersion = event.getUpgradeVersion();
+      LOG.info("[COMPONENT {}]: need upgrade to {}",
+          component.getName(), status.targetVersion);
+
+      status.containersNeedUpgrade.set(
-      component.componentSpec.getContainers().forEach(container -> {
-        container.setState(ContainerState.NEEDS_UPGRADE);
-        if (event.isExpressUpgrade()) {
-          ComponentInstanceEvent upgradeEvent = new ComponentInstanceEvent(
-              ContainerId.fromString(container.getId()),
-                  ComponentInstanceEventType.UPGRADE);
-          LOG.info("Upgrade container {}", container.getId());
-          component.dispatcher.getEventHandler().handle(upgradeEvent);
-        }
+
+      component.setComponentState(org.apache.hadoop.yarn.service.api.
+          records.ComponentState.NEEDS_UPGRADE);
+
+      component.getAllComponentInstances().forEach(instance -> {
+        instance.setContainerState(ContainerState.NEEDS_UPGRADE);
+
+      if (event.getType().equals(CANCEL_UPGRADE)) {
+        component.upgradeStatus.reset();
+      }
-      org.apache.hadoop.yarn.service.api.records.ComponentState currState =
-          component.componentSpec.getState();
-      if (currState.equals(org.apache.hadoop.yarn.service.api.records
-          .ComponentState.STABLE)) {
-        return ComponentState.STABLE;
-      }
-      if (targetState.equals(STABLE) && component.upgradeInProgress.get()) {
-        component.componentSpec.overwrite(
-            component.upgradeEvent.getTargetSpec());
-        component.upgradeEvent = null;
+
+      if (targetState.equals(STABLE) &&
+          !(component.upgradeStatus.isCompleted() &&
+              component.cancelUpgradeStatus.isCompleted())) {
+        // Component stable after upgrade or cancel upgrade
+        UpgradeStatus status = !component.cancelUpgradeStatus.isCompleted() ?
+            component.cancelUpgradeStatus : component.upgradeStatus;
+
+        component.componentSpec.overwrite(status.getTargetSpec());
+        status.reset();
+
-        component.upgradeInProgress.set(false);
-    if (upgradeInProgress.get()) {
+    if (!(upgradeStatus.isCompleted() && cancelUpgradeStatus.isCompleted())) {
+      UpgradeStatus status = !cancelUpgradeStatus.isCompleted() ?
+          cancelUpgradeStatus : upgradeStatus;
+
-              createLaunchContext(upgradeEvent.getTargetSpec(),
-                  upgradeEvent.getUpgradeVersion()));
+              createLaunchContext(status.getTargetSpec(),
+                  status.getTargetVersion()));
+  private boolean doesNeedUpgrade() {
+    return cancelUpgradeStatus.areContainersUpgrading() ||
+        upgradeStatus.areContainersUpgrading() ||
+        upgradeStatus.failed.get();
+  }
+
-  public void decContainersThatNeedUpgrade() {
-    numContainersThatNeedUpgrade.decrementAndGet();
-  }
-
-  public ComponentEvent getUpgradeEvent() {
+  /**
+   * Returns whether a component is upgrading or not.
+   */
+  public boolean isUpgrading() {
+    this.readLock.lock();
+
+    try {
+      return !(upgradeStatus.isCompleted() &&
+          cancelUpgradeStatus.isCompleted());
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  public UpgradeStatus getUpgradeStatus() {
-      return upgradeEvent;
+      return upgradeStatus;
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  public UpgradeStatus getCancelUpgradeStatus() {
+    this.readLock.lock();
+    try {
+      return cancelUpgradeStatus;
+  /**
+   * Sets the state of the component in the component spec.
+   * @param state component state
+   */
+  private void setComponentState(
+      org.apache.hadoop.yarn.service.api.records.ComponentState state) {
+    org.apache.hadoop.yarn.service.api.records.ComponentState curState =
+        componentSpec.getState();
+    if (!curState.equals(state)) {
+      componentSpec.setState(state);
+      LOG.info("[COMPONENT {}] spec state changed from {} -> {}",
+          componentSpec.getName(), curState, state);
+    }
+  }
+
+  /**
+   * Status of upgrade.
+   */
+  public static class UpgradeStatus {
+    private org.apache.hadoop.yarn.service.api.records.Component targetSpec;
+    private String targetVersion;
+    private AtomicBoolean inProgress = new AtomicBoolean(false);
+    private AtomicLong containersNeedUpgrade = new AtomicLong(0);
+    private AtomicBoolean failed = new AtomicBoolean(false);
+
+    public org.apache.hadoop.yarn.service.api.records.
+        Component getTargetSpec() {
+      return targetSpec;
+    }
+
+    public String getTargetVersion() {
+      return targetVersion;
+    }
+
+    /*
+     * @return whether the upgrade is completed or not
+     */
+    public boolean isCompleted() {
+      return !inProgress.get();
+    }
+
+    public void decContainersThatNeedUpgrade() {
+      if (inProgress.get()) {
+        containersNeedUpgrade.decrementAndGet();
+      }
+    }
+
+    public void containerFailedUpgrade() {
+      failed.set(true);
+    }
+
+    void reset() {
+      containersNeedUpgrade.set(0);
+      targetSpec = null;
+      targetVersion = null;
+      inProgress.set(false);
+      failed.set(false);
+    }
+
+    boolean areContainersUpgrading() {
+      return containersNeedUpgrade.get() != 0;
+    }
+  }
+

MOV26 MOV26 UPD40 UPD40 INS23 INS55 INS55 INS31 INS31 INS31 INS31 INS55 UPD43 INS83 INS43 INS59 INS83 MOV83 INS42 MOV43 INS31 INS83 INS83 UPD42 MOV42 INS43 INS31 INS83 INS39 INS42 INS8 INS29 INS39 UPD42 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS23 INS23 MOV23 MOV23 INS23 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 UPD42 UPD42 INS14 INS42 INS42 INS14 INS32 INS41 MOV78 INS83 INS39 INS42 MOV44 MOV44 INS8 INS42 INS78 MOV83 MOV39 MOV42 INS44 INS44 INS8 INS41 INS65 UPD42 MOV42 INS21 INS54 INS42 INS21 INS54 INS65 INS65 MOV43 INS42 INS60 INS25 INS65 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS8 INS83 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS43 INS43 INS32 INS42 INS8 INS25 INS32 INS21 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS60 INS60 MOV21 MOV21 INS21 INS21 MOV21 MOV21 INS21 INS25 INS25 INS38 INS27 INS66 INS32 INS8 INS8 INS32 INS8 INS8 INS66 INS42 INS66 MOV43 INS59 INS38 INS8 INS66 INS40 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS14 INS40 INS41 INS42 INS41 INS41 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS41 INS38 INS21 MOV41 INS32 MOV8 MOV25 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS39 INS59 INS43 INS59 INS7 INS32 INS32 INS32 INS8 INS27 INS8 INS36 INS60 INS32 INS32 INS32 INS22 INS42 INS41 INS21 INS22 INS42 INS41 INS21 INS42 INS32 INS32 INS21 MOV21 INS43 INS9 INS42 INS42 INS38 INS32 INS8 INS32 INS32 INS7 INS7 INS32 INS32 INS27 MOV32 INS42 INS42 INS42 INS42 INS14 INS43 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV32 INS42 INS32 INS42 INS32 INS42 INS42 INS16 UPD40 UPD40 INS32 INS40 INS32 INS42 INS42 INS45 INS32 INS40 UPD40 INS42 UPD42 MOV32 MOV42 INS86 INS32 INS42 INS42 INS21 MOV32 INS38 INS60 MOV21 MOV21 MOV60 MOV21 INS27 INS43 INS59 INS42 INS42 INS42 INS42 INS40 INS42 INS38 INS52 INS42 INS42 INS32 INS52 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 MOV21 INS42 INS42 INS9 INS42 INS42 INS34 INS42 INS33 INS42 INS33 INS42 INS42 INS9 INS42 INS42 INS9 INS32 INS34 INS42 INS42 INS32 INS42 INS14 INS43 INS42 INS42 UPD42 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS32 INS42 INS42 INS38 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV59 INS8 MOV42 UPD42 MOV42 INS32 INS36 INS43 INS59 INS32 INS32 INS42 INS42 INS16 INS36 INS22 INS42 INS22 INS42 INS42 INS42 INS42 UPD45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 UPD42 INS42 UPD42 UPD40 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV21 INS40 INS42 INS27 INS42 INS42 INS16 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS38 INS42 INS42 INS27 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 MOV14 UPD43 INS42 INS42 UPD42 INS38 INS38 INS42 INS42 INS32 INS32 INS38 INS40 INS40 INS42 INS32 UPD42 UPD42 UPD42 INS32 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 UPD42 INS32 INS32 UPD42 UPD42 INS40 INS42 UPD40 MOV40 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 UPD40 MOV40 UPD42 MOV42 INS40 INS42 INS42 UPD42 INS42 UPD42 UPD40 MOV40 INS42 INS42 UPD42 UPD42 INS42 INS42 UPD42 INS42 UPD43 MOV42 INS32 INS42 INS42 UPD43 UPD42 MOV32 MOV42 MOV42 INS42 INS42 MOV14 UPD42 UPD42 UPD42 MOV14 UPD42 INS32 UPD42 INS14 INS42 INS42 MOV42 MOV42 INS42 INS43 INS42 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL40 DEL40 DEL40 DEL32 DEL34 DEL27 DEL40 DEL40 DEL40 DEL42 DEL40 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL32 DEL34 DEL27 DEL40 DEL42 DEL40 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL40 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL40 DEL40 DEL42 DEL40 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL40 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL40 DEL83 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL40 DEL14 DEL59 DEL60 DEL32 DEL21 DEL8 DEL25 DEL8 DEL86 DEL32 DEL21 DEL8 DEL31 DEL55 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL40 DEL40 DEL9 DEL40 DEL42 DEL32 DEL27 DEL40 DEL33 DEL7 DEL21 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL8