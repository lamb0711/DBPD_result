HDFS-11793. Allow to enable user defined erasure coding policy. Contributed by Sammi Chen

-import java.util.List;
+import org.apache.hadoop.io.erasurecode.CodecUtil;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
-  private static final byte USER_DEFINED_POLICY_START_ID = 32;
+
+  public static Logger LOG = LoggerFactory.getLogger(
+      ErasureCodingPolicyManager.class);
+  private static final byte USER_DEFINED_POLICY_START_ID = (byte) 64;
+  private int maxCellSize =
+      DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT;
-    this.loadPolicies(conf);
-  }
-
-  private void loadPolicies(Configuration conf) {
-        String sysPolicies = SystemErasureCodingPolicies.getPolicies().stream()
-            .map(ErasureCodingPolicy::getName)
-            .collect(Collectors.joining(", "));
-        String msg = String.format("EC policy '%s' specified at %s is not a " +
-            "valid policy. Please choose from list of available policies: " +
-            "[%s]",
-            policyName,
-            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,
-            sysPolicies);
-        throw new IllegalArgumentException(msg);
+        ecPolicy = userPoliciesByName.get(policyName);
+        if (ecPolicy == null) {
+          String allPolicies = SystemErasureCodingPolicies.getPolicies()
+              .stream().map(ErasureCodingPolicy::getName)
+              .collect(Collectors.joining(", ")) + ", " +
+              userPoliciesByName.values().stream()
+              .map(ErasureCodingPolicy::getName)
+              .collect(Collectors.joining(", "));
+          String msg = String.format("EC policy '%s' specified at %s is not a "
+              + "valid policy. Please choose from list of available "
+              + "policies: [%s]",
+              policyName,
+              DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,
+              allPolicies);
+          throw new IllegalArgumentException(msg);
+        }
+    maxCellSize = conf.getInt(
+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,
+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);
+
-  public List<ErasureCodingPolicy> getPolicies() {
+  public ErasureCodingPolicy[] getPolicies() {
-      this.userPoliciesByID.values().stream()).collect(Collectors.toList());
+        userPoliciesByName.values().stream())
+        .toArray(ErasureCodingPolicy[]::new);
-  public synchronized void addPolicy(ErasureCodingPolicy policy)
+  public synchronized ErasureCodingPolicy addPolicy(ErasureCodingPolicy policy)
+    if (!CodecUtil.hasCodec(policy.getCodecName())) {
+      throw new IllegalECPolicyException("Codec name "
+          + policy.getCodecName() + " is not supported");
+    }
+
+    if (policy.getCellSize() > maxCellSize) {
+      throw new IllegalECPolicyException("Cell size " + policy.getCellSize()
+          + " should not exceed maximum " + maxCellSize + " byte");
+    }
+
-        throw new IllegalECPolicyException("The policy name already exists");
+        throw new IllegalECPolicyException("The policy name " + assignedNewName
+            + " already exists");
-        throw new IllegalECPolicyException("A policy with same schema and " +
-            "cell size already exists");
+        throw new IllegalECPolicyException("A policy with same schema "
+            + policy.getSchema().toString() + " and cell size "
+            + p.getCellSize() + " is already exists");
+    return policy;

INS26 INS26 UPD40 INS40 INS40 INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS39 INS59 UPD83 UPD42 INS5 MOV43 INS42 INS42 INS32 INS11 INS42 INS40 INS21 INS43 INS85 INS25 INS25 INS41 INS42 INS42 INS57 INS39 INS34 INS7 UPD42 MOV42 INS38 INS8 INS27 INS8 INS42 INS43 INS25 INS42 INS32 UPD42 INS89 INS32 INS53 INS32 INS42 INS53 INS42 INS27 INS8 INS42 INS42 INS40 INS40 INS5 INS42 INS42 INS32 INS14 INS42 INS42 INS14 INS42 INS33 INS21 MOV25 INS43 INS85 INS42 INS42 MOV43 INS27 MOV43 INS27 INS7 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 UPD45 INS32 INS45 INS32 UPD45 UPD42 INS27 INS32 INS42 INS42 INS42 MOV32 INS45 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 UPD45 UPD45 INS32 INS42 INS90 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 DEL34 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL43 DEL74 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL39 DEL45