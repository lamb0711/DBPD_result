Revert "HDFS-8855. Webhdfs client leaks active NameNode connections. Contributed by Xiaobing Zhou."

This reverts commit 84cbd72afda6344e220526fac5c560f00f84e374.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.hdfs.DFSConfigKeys;
-import org.apache.hadoop.io.WritableComparator;
-import org.apache.hadoop.ipc.Client;
-import com.google.common.cache.Cache;
-import com.google.common.cache.CacheBuilder;
-
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeUnit;
-  private static Cache<String, UserGroupInformation> ugiCache;
-  public static final Log LOG = LogFactory.getLog(Client.class);
-  DataNodeUGIProvider(ParameterParser params, Configuration conf) {
+  DataNodeUGIProvider(ParameterParser params) {
-    if (ugiCache == null) {
-      synchronized (DataNodeUGIProvider.class) {
-        if (ugiCache == null) {
-          ugiCache = CacheBuilder
-              .newBuilder()
-              .expireAfterAccess(
-                  conf.getInt(
-                      DFSConfigKeys.DFS_WEBHDFS_UGI_EXPIRE_AFTER_ACCESS_KEY,
-                      DFSConfigKeys.DFS_WEBHDFS_UGI_EXPIRE_AFTER_ACCESS_DEFAULT),
-                  TimeUnit.MILLISECONDS).build();
-        }
-      }
-    }
-    UserGroupInformation ugi;
-
-    try {
-      if (UserGroupInformation.isSecurityEnabled()) {
-        final Token<DelegationTokenIdentifier> token = params.delegationToken();
-
-        ugi = ugiCache.get(buildTokenCacheKey(token),
-            new Callable<UserGroupInformation>() {
-              @Override
-              public UserGroupInformation call() throws Exception {
-                return tokenUGI(token);
-              }
-            });
-      } else {
-        final String usernameFromQuery = params.userName();
-        final String doAsUserFromQuery = params.doAsUser();
-        final String remoteUser = usernameFromQuery == null ? JspHelper
-            .getDefaultWebUserName(params.conf()) // not specified in request
-            : usernameFromQuery;
-
-        ugi = ugiCache.get(
-            buildNonTokenCacheKey(doAsUserFromQuery, remoteUser),
-            new Callable<UserGroupInformation>() {
-              @Override
-              public UserGroupInformation call() throws Exception {
-                return nonTokenUGI(usernameFromQuery, doAsUserFromQuery,
-                    remoteUser);
-              }
-            });
-      }
-    } catch (ExecutionException e) {
-      Throwable cause = e.getCause();
-      if (cause instanceof IOException) {
-        throw (IOException) cause;
-      } else {
-        throw new IOException(cause);
-      }
+    if (UserGroupInformation.isSecurityEnabled()) {
+      return tokenUGI();
+    final String usernameFromQuery = params.userName();
+    final String doAsUserFromQuery = params.doAsUser();
+    final String remoteUser = usernameFromQuery == null
+        ? JspHelper.getDefaultWebUserName(params.conf()) // not specified in
+        // request
+        : usernameFromQuery;
+
+    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(remoteUser);
+    JspHelper.checkUsername(ugi.getShortUserName(), usernameFromQuery);
+    if (doAsUserFromQuery != null) {
+      // create and attempt to authorize a proxy user
+      ugi = UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);
+    }
-  private String buildTokenCacheKey(Token<DelegationTokenIdentifier> token) {
-    return token.buildCacheKey();
-  }
-
-  private UserGroupInformation tokenUGI(Token<DelegationTokenIdentifier> token)
-      throws IOException {
+  private UserGroupInformation tokenUGI() throws IOException {
+    Token<DelegationTokenIdentifier> token = params.delegationToken();
-  private String buildNonTokenCacheKey(String doAsUserFromQuery,
-      String remoteUser) throws IOException {
-    String key = doAsUserFromQuery == null ? String.format("{%s}", remoteUser)
-        : String.format("{%s}:{%s}", remoteUser, doAsUserFromQuery);
-    return key;
-  }
-
-  private UserGroupInformation nonTokenUGI(String usernameFromQuery,
-      String doAsUserFromQuery, String remoteUser) throws IOException {
-
-    UserGroupInformation ugi = UserGroupInformation
-        .createRemoteUser(remoteUser);
-    JspHelper.checkUsername(ugi.getShortUserName(), usernameFromQuery);
-    if (doAsUserFromQuery != null) {
-      // create and attempt to authorize a proxy user
-      ugi = UserGroupInformation.createProxyUser(doAsUserFromQuery, ugi);
-    }
-    return ugi;
-  }

MOV31 INS8 INS42 MOV8 MOV21 INS25 MOV60 MOV21 MOV25 MOV41 MOV60 MOV32 INS8 INS41 INS32 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL57 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL40 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL53 DEL8 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL83