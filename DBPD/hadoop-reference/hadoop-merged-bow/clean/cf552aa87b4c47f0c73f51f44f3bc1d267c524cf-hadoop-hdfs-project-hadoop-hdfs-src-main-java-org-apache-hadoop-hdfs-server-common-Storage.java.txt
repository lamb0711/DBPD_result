HDFS-10360. DataNode may format directory and lose blocks if current/VERSION is missing. (Wei-Chiu Chuang via lei)

+import java.nio.file.DirectoryStream;
+import java.nio.file.Files;
+import java.util.Arrays;
-      if (curDir.exists())
+      if (curDir.exists()) {
+        File[] files = FileUtil.listFiles(curDir);
+        LOG.info("Will remove files: " + Arrays.toString(files));
+      }
-     * Check consistency of the storage directory
+     * Check to see if current/ directory is empty. This method is used
+     * before determining to format the directory.
+     *
+     * @throws InconsistentFSStateException if not empty.
+     * @throws IOException if unable to list files under the directory.
+     */
+    private void checkEmptyCurrent() throws InconsistentFSStateException,
+        IOException {
+      File currentDir = getCurrentDir();
+      if(!currentDir.exists()) {
+        // if current/ does not exist, it's safe to format it.
+        return;
+      }
+      try(DirectoryStream<java.nio.file.Path> dirStream =
+          Files.newDirectoryStream(currentDir.toPath())) {
+        if (dirStream.iterator().hasNext()) {
+          throw new InconsistentFSStateException(root,
+              "Can't format the storage directory because the current/ "
+                  + "directory is not empty.");
+        }
+      }
+    }
+
+    /**
+     * Check consistency of the storage directory.
+     *
+     * @param startOpt a startup option.
+     * @param storage The Storage object that manages this StorageDirectory.
+     *
+     * @return state {@link StorageState} of the storage directory
+     * @throws InconsistentFSStateException if directory state is not
+     * consistent and cannot be recovered.
+     * @throws IOException
+     */
+    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)
+        throws IOException {
+      return analyzeStorage(startOpt, storage, false);
+    }
+
+    /**
+     * Check consistency of the storage directory.
+     * @param storage The Storage object that manages this StorageDirectory.
+     * @param checkCurrentIsEmpty if true, make sure current/ directory
+     *                            is empty before determining to format it.
-    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)
+    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,
+        boolean checkCurrentIsEmpty)
-          (startOpt == StartupOption.HOTSWAP && hadMkdirs))
+          (startOpt == StartupOption.HOTSWAP && hadMkdirs)) {
+        if (checkCurrentIsEmpty) {
+          checkEmptyCurrent();
+        }
+      }
+        if (checkCurrentIsEmpty) {
+          checkEmptyCurrent();
+        }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS44 INS65 INS65 INS65 INS42 INS42 INS60 INS25 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS39 INS42 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS43 INS59 INS38 INS8 INS58 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS32 UPD66 INS42 INS66 INS42 INS66 INS66 INS8 INS60 INS21 MOV25 INS42 INS42 INS32 INS32 INS41 INS74 INS59 INS25 INS42 INS42 INS42 INS42 INS9 INS25 MOV41 INS25 INS5 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS8 INS42 INS8 INS42 INS8 INS43 INS85 INS42 INS32 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS32 INS32 INS42 INS53 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS32 INS42 INS42 INS42 INS43 INS42 INS27 INS42 INS42 INS42 INS45 INS45