Merge branch 'trunk' into HADOOP-12756

-import org.apache.hadoop.fs.RemoteIterator;
-        final Map<?, ?> rootmap =
-            (Map<?, ?>)json.get(FileStatus.class.getSimpleName() + "es");
-        final List<?> array = JsonUtilClient.getList(rootmap,
-            FileStatus.class.getSimpleName());
-
-        //convert FileStatus
-        assert array != null;
-        final FileStatus[] statuses = new FileStatus[array.size()];
-        int i = 0;
-        for (Object object : array) {
-          final Map<?, ?> m = (Map<?, ?>) object;
-          statuses[i++] = makeQualified(JsonUtilClient.toFileStatus(m, false),
-              f);
+        HdfsFileStatus[] hdfsStatuses =
+            JsonUtilClient.toHdfsFileStatusArray(json);
+        final FileStatus[] statuses = new FileStatus[hdfsStatuses.length];
+        for (int i = 0; i < hdfsStatuses.length; i++) {
+          statuses[i] = makeQualified(hdfsStatuses[i], f);
+
-  private class DirListingIterator<T extends FileStatus> implements
-      RemoteIterator<T> {
-
-    private final Path path;
-    private DirectoryListing thisListing;
-    private int i = 0;
-    private byte[] prevKey = EMPTY_ARRAY;
-
-    DirListingIterator(Path path) {
-      this.path = path;
-    }
-
-    @Override
-    public boolean hasNext() throws IOException {
-      if (thisListing == null) {
-        fetchMore();
-      }
-      return i < thisListing.getPartialListing().length ||
-          thisListing.hasMore();
-    }
-
-    private void fetchMore() throws IOException {
-      thisListing = new FsPathResponseRunner<DirectoryListing>(
-          GetOpParam.Op.LISTSTATUS_BATCH,
-          path, new StartAfterParam(new String(prevKey, Charsets.UTF_8))) {
-        @Override
-        DirectoryListing decodeResponse(Map<?, ?> json) throws IOException {
-          return JsonUtilClient.toDirectoryListing(json);
-        }
-      }.run();
-      i = 0;
-      prevKey = thisListing.getLastName();
-    }
-
-    @Override
-    @SuppressWarnings("unchecked")
-    public T next() throws IOException {
-      Preconditions.checkState(hasNext(), "No more items in iterator");
-      if (i == thisListing.getPartialListing().length) {
-        fetchMore();
-      }
-      return (T)makeQualified(thisListing.getPartialListing()[i++], path);
-    }
-  }
-  public RemoteIterator<FileStatus> listStatusIterator(final Path f)
-      throws FileNotFoundException, IOException {
-    return new DirListingIterator<>(f);
+  public DirectoryEntries listStatusBatch(Path f, byte[] token) throws
+      FileNotFoundException, IOException {
+    byte[] prevKey = EMPTY_ARRAY;
+    if (token != null) {
+      prevKey = token;
+    }
+    DirectoryListing listing = new FsPathResponseRunner<DirectoryListing>(
+        GetOpParam.Op.LISTSTATUS_BATCH,
+        f, new StartAfterParam(new String(prevKey, Charsets.UTF_8))) {
+      @Override
+      DirectoryListing decodeResponse(Map<?, ?> json) throws IOException {
+        return JsonUtilClient.toDirectoryListing(json);
+      }
+    }.run();
+    // Qualify the returned FileStatus array
+    final HdfsFileStatus[] statuses = listing.getPartialListing();
+    FileStatus[] qualified = new FileStatus[statuses.length];
+    for (int i = 0; i < statuses.length; i++) {
+      qualified[i] = makeQualified(statuses[i], f);
+    }
+    return new DirectoryEntries(qualified, listing.getLastName(),
+        listing.hasMore());

MOV31 MOV78 UPD83 INS43 INS42 MOV44 INS44 MOV43 INS42 UPD42 INS5 INS42 INS60 INS25 INS60 INS60 INS60 INS24 INS41 INS39 INS85 MOV5 MOV59 INS27 INS8 MOV43 INS59 INS83 INS5 INS59 INS5 INS59 INS58 INS27 MOV37 INS8 INS14 INS42 INS33 MOV21 INS42 MOV32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 MOV59 INS42 INS40 MOV21 INS43 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS5 INS40 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 UPD42 UPD42 INS43 INS85 INS2 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS60 INS24 INS42 INS42 INS5 MOV59 INS58 INS27 MOV37 INS8 INS43 INS85 UPD42 INS39 MOV59 INS42 INS40 MOV21 UPD42 MOV42 INS42 UPD42 MOV42 INS40 INS42 INS2 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL45 DEL27 DEL32 DEL11 DEL59 DEL60 DEL83 DEL42 DEL43 DEL76 DEL74 DEL60 DEL42 DEL33 DEL27 DEL6 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL9 DEL32 DEL39 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL83 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL11 DEL59 DEL60 DEL8 DEL70 DEL39 DEL42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL43 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL39 DEL23 DEL83 DEL23 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL27 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL2 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31 DEL55 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL41 DEL8 DEL31