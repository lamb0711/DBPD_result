HDFS-10460. Recompute block checksum for a particular range less than file size on the fly by reconstructing missed block. Contributed by Rakesh R

-        if (LOG.isDebugEnabled()) {
-          LOG.debug("block=" + getBlock() + ", bytesPerCRC=" + getBytesPerCRC()
-              + ", crcPerBlock=" + getCrcPerBlock() + ", md5out=" + md5out);
-        }
+        LOG.debug("block={}, bytesPerCRC={}, crcPerBlock={}, md5out={}",
+            getBlock(), getBytesPerCRC(), getCrcPerBlock(), md5out);
+    private final long requestedNumBytes;
-                                         StripedBlockInfo stripedBlockInfo)
+                                         StripedBlockInfo stripedBlockInfo,
+                                         long requestedNumBytes)
+      this.requestedNumBytes = requestedNumBytes;
+      long checksumLen = 0;
+          ExtendedBlock block = getInternalBlock(numDataUnits, idx);
+
-            recalculateChecksum(idx);
+            recalculateChecksum(idx, block.getNumBytes());
-              ExtendedBlock block = StripedBlockUtil.constructInternalBlock(
-                  blockGroup, ecPolicy.getCellSize(), numDataUnits, idx);
-              recalculateChecksum(idx);
+              recalculateChecksum(idx, block.getNumBytes());
+          checksumLen += block.getNumBytes();
+          if (checksumLen >= requestedNumBytes) {
+            break; // done with the computation, simply return.
+          }
+    private ExtendedBlock getInternalBlock(int numDataUnits, int idx) {
+      // Sets requested number of bytes in blockGroup which is required to
+      // construct the internal block for computing checksum.
+      long actualNumBytes = blockGroup.getNumBytes();
+      blockGroup.setNumBytes(requestedNumBytes);
+
+      ExtendedBlock block = StripedBlockUtil.constructInternalBlock(blockGroup,
+          ecPolicy.getCellSize(), numDataUnits, idx);
+
+      // Set back actualNumBytes value in blockGroup.
+      blockGroup.setNumBytes(actualNumBytes);
+      return block;
+    }
+
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("got reply from " + targetDatanode + ": md5=" + md5);
-        }
+        LOG.debug("got reply from datanode:{}, md5={}", targetDatanode, md5);
-     *          error index to be reconstrcuted and recalculate checksum.
+     *          error index to be reconstructed and recalculate checksum.
+     * @param blockLength
+     *          number of bytes in the block to compute checksum.
-    private void recalculateChecksum(int errBlkIndex) throws IOException {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Recalculate checksum for the missing/failed block index "
-            + errBlkIndex);
-      }
+    private void recalculateChecksum(int errBlkIndex, long blockLength)
+        throws IOException {
+      LOG.debug("Recalculate checksum for the missing/failed block index {}",
+          errBlkIndex);
+
-          blockGroup, ecPolicy, blockIndices, datanodes, errIndices);
+              blockGroup, ecPolicy, blockIndices, datanodes, errIndices);
-          getDatanode().getErasureCodingWorker(), stripedReconInfo,
-          md5writer);
+              getDatanode().getErasureCodingWorker(), stripedReconInfo,
+              md5writer, blockLength);
-      setOrVerifyChecksumProperties(errBlkIndex, checksum.getBytesPerChecksum(),
-          crcPerBlock, checksum.getChecksumType());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Recalculated checksum for the block index " + errBlkIndex
-            + ": md5=" + checksumRecon.getMD5());
-      }
+      setOrVerifyChecksumProperties(errBlkIndex,
+          checksum.getBytesPerChecksum(), crcPerBlock,
+          checksum.getChecksumType());
+      LOG.debug("Recalculated checksum for the block index:{}, md5={}",
+          errBlkIndex, checksumRecon.getMD5());
-      if (LOG.isDebugEnabled()) {
-        if (blockIdx == 0) {
-          LOG.debug("set bytesPerCRC=" + getBytesPerCRC()
-              + ", crcPerBlock=" + getCrcPerBlock());
-        }
+      if (blockIdx == 0) {
+        LOG.debug("set bytesPerCRC={}, crcPerBlock={}", getBytesPerCRC(),
+            getCrcPerBlock());

INS23 INS31 INS83 INS83 INS39 INS59 INS44 INS83 INS43 INS42 INS44 INS44 INS8 INS44 INS42 INS39 INS42 INS21 INS60 INS42 INS39 INS42 INS39 INS42 INS60 INS21 MOV60 INS21 INS41 INS65 INS39 INS42 MOV21 MOV21 MOV25 INS7 INS39 INS59 INS39 INS59 INS32 INS32 INS42 UPD66 INS42 INS66 MOV21 INS22 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS45 INS42 INS45 INS42 MOV32 INS52 INS42 INS42 INS42 INS42 INS45 MOV32 MOV32 MOV32 INS42 INS60 INS21 INS25 INS45 INS42 INS42 INS45 MOV32 MOV32 INS43 INS59 INS7 INS27 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS10 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 DEL45 DEL45 DEL45 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25