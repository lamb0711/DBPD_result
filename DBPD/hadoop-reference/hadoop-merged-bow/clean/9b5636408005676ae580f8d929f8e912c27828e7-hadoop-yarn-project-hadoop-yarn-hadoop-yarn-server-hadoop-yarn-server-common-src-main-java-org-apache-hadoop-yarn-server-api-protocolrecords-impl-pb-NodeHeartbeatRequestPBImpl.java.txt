YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.

+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.impl.pb.ApplicationIdPBImpl;
+import org.apache.hadoop.yarn.proto.YarnProtos.ApplicationIdProto;
+import org.apache.hadoop.yarn.proto.YarnServerCommonServiceProtos.AppAggregatorsMapProto;
+  Map<ApplicationId, String> registeredAggregators = null;
+  
+    if (this.registeredAggregators != null) {
+      addRegisteredAggregatorsToProto();
+    }
+  
+  private void addRegisteredAggregatorsToProto() {
+    maybeInitBuilder();
+    builder.clearRegisteredAggregators();
+    for (Map.Entry<ApplicationId, String> entry : registeredAggregators.entrySet()) {
+      builder.addRegisteredAggregators(AppAggregatorsMapProto.newBuilder()
+        .setAppId(convertToProtoFormat(entry.getKey()))
+        .setAppAggregatorAddr(entry.getValue()));
+    }
+  }
+  
+  @Override
+  public Map<ApplicationId, String> getRegisteredAggregators() {
+    if (this.registeredAggregators != null) {
+      return this.registeredAggregators;
+    }
+    initRegisteredAggregators();
+    return registeredAggregators;
+  }
+  
+  private void initRegisteredAggregators() {
+    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;
+    List<AppAggregatorsMapProto> list = p.getRegisteredAggregatorsList();
+    this.registeredAggregators = new HashMap<ApplicationId, String> ();
+    for (AppAggregatorsMapProto c : list) {
+      ApplicationId appId = convertFromProtoFormat(c.getAppId());
+      this.registeredAggregators.put(appId, c.getAppAggregatorAddr());
+    }
+  }
+  
+  @Override
+  public void setRegisteredAggregators(
+      Map<ApplicationId, String> registeredAggregators) {
+    if (registeredAggregators == null || registeredAggregators.isEmpty()) {
+      return;
+    }
+    maybeInitBuilder();
+    this.registeredAggregators = new HashMap<ApplicationId, String>();
+    this.registeredAggregators.putAll(registeredAggregators);
+  }
+  
+  private ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p) {
+    return new ApplicationIdPBImpl(p);
+  }
+  
+  private ApplicationIdProto convertToProtoFormat(ApplicationId t) {
+    return ((ApplicationIdPBImpl) t).getProto();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS74 INS59 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS33 INS25 INS21 INS21 INS70 INS42 INS43 INS43 INS43 INS25 INS21 INS41 INS60 INS60 INS21 INS70 INS42 INS74 INS42 INS25 INS21 INS21 INS21 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS44 INS32 INS8 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS43 INS59 INS74 INS59 INS7 INS44 INS42 INS8 INS43 INS43 INS43 INS27 INS8 INS32 INS7 INS32 INS42 INS14 INS42 INS32 INS22 INS33 INS21 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS22 INS33 INS41 INS42 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS22 INS14 INS43 INS42 INS60 INS21 INS42 INS42 INS42 INS27 INS32 INS41 INS42 INS22 INS14 INS22 INS42 INS42 INS43 INS42 INS36 INS42 INS52 INS42 INS32 INS43 INS43 INS43 INS32 INS52 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS74 INS42 INS43 INS59 INS32 INS42 INS33 INS42 INS42 INS52 INS42 INS74 INS52 INS42 INS42 INS11 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS22 INS42 INS42 INS32 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42