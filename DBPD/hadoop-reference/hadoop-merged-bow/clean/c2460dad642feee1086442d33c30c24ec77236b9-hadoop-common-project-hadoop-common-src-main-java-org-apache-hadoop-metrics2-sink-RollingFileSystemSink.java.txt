HDFS-9858. RollingFileSystemSink can throw an NPE on non-secure clusters. (Daniel Templeton via kasha)

+  private boolean initialized = false;
+  private SubsetConfiguration properties;
+  private Configuration conf;
-  public void init(SubsetConfiguration conf) {
-    basePath = new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));
-    source = conf.getString(SOURCE_KEY, SOURCE_DEFAULT);
-    ignoreError = conf.getBoolean(IGNORE_ERROR_KEY, false);
-    allowAppend = conf.getBoolean(ALLOW_APPEND_KEY, false);
+  public void init(SubsetConfiguration metrics2Properties) {
+    properties = metrics2Properties;
+    basePath = new Path(properties.getString(BASEPATH_KEY, BASEPATH_DEFAULT));
+    source = properties.getString(SOURCE_KEY, SOURCE_DEFAULT);
+    ignoreError = properties.getBoolean(IGNORE_ERROR_KEY, false);
+    allowAppend = properties.getBoolean(ALLOW_APPEND_KEY, false);
-    Configuration configuration = loadConf();
-
-    UserGroupInformation.setConfiguration(configuration);
+    conf = loadConf();
+    UserGroupInformation.setConfiguration(conf);
-      checkForProperty(conf, KEYTAB_PROPERTY_KEY);
-      checkForProperty(conf, USERNAME_PROPERTY_KEY);
+      checkForProperty(properties, KEYTAB_PROPERTY_KEY);
+      checkForProperty(properties, USERNAME_PROPERTY_KEY);
-        SecurityUtil.login(configuration, conf.getString(KEYTAB_PROPERTY_KEY),
-            conf.getString(USERNAME_PROPERTY_KEY));
+        SecurityUtil.login(conf, properties.getString(KEYTAB_PROPERTY_KEY),
+            properties.getString(USERNAME_PROPERTY_KEY));
+  }
-    fileSystem = getFileSystem(configuration);
+  /**
+   * Initialize the connection to HDFS and create the base directory. Also
+   * launch the flush thread.
+   */
+  private boolean initFs() {
+    boolean success = false;
+
+    fileSystem = getFileSystem();
+      success = true;
-      throw new MetricsException("Failed to create " + basePath + "["
-          + SOURCE_KEY + "=" + source + ", "
-          + IGNORE_ERROR_KEY + "=" + ignoreError + ", "
-          + ALLOW_APPEND_KEY + "=" + allowAppend + ", "
-          + KEYTAB_PROPERTY_KEY + "="
-          + conf.getString(KEYTAB_PROPERTY_KEY) + ", "
-          + conf.getString(KEYTAB_PROPERTY_KEY) + "="
-          + configuration.get(conf.getString(KEYTAB_PROPERTY_KEY)) + ", "
-          + USERNAME_PROPERTY_KEY + "="
-          + conf.getString(USERNAME_PROPERTY_KEY) + ", "
-          + conf.getString(USERNAME_PROPERTY_KEY) + "="
-          + configuration.get(conf.getString(USERNAME_PROPERTY_KEY))
-          + "] -- " + ex.toString(), ex);
+      if (!ignoreError) {
+        throw new MetricsException("Failed to create " + basePath + "["
+            + SOURCE_KEY + "=" + source + ", "
+            + ALLOW_APPEND_KEY + "=" + allowAppend + ", "
+            + stringifySecurityProperty(KEYTAB_PROPERTY_KEY) + ", "
+            + stringifySecurityProperty(USERNAME_PROPERTY_KEY)
+            + "] -- " + ex.toString(), ex);
+      }
-    // If we're permitted to append, check if we actually can
-    if (allowAppend) {
-      allowAppend = checkAppend(fileSystem);
+    if (success) {
+      // If we're permitted to append, check if we actually can
+      if (allowAppend) {
+        allowAppend = checkAppend(fileSystem);
+      }
+
+      flushTimer = new Timer("RollingFileSystemSink Flusher", true);
-    flushTimer = new Timer("RollingFileSystemSink Flusher", true);
+    return success;
+  }
+
+  /**
+   * Turn a security property into a nicely formatted set of <i>name=value</i>
+   * strings, allowing for either the property or the configuration not to be
+   * set.
+   *
+   * @param properties the sink properties
+   * @param conf the conf
+   * @param property the property to stringify
+   * @return the stringified property
+   */
+  private String stringifySecurityProperty(String property) {
+    String securityProperty;
+
+    if (properties.containsKey(property)) {
+      String propertyValue = properties.getString(property);
+      String confValue = conf.get(properties.getString(property));
+
+      if (confValue != null) {
+        securityProperty = property + "=" + propertyValue
+            + ", " + properties.getString(property) + "=" + confValue;
+      } else {
+        securityProperty = property + "=" + propertyValue
+            + ", " + properties.getString(property) + "=<NOT SET>";
+      }
+    } else {
+      securityProperty = property + "=<NOT SET>";
+    }
+
+    return securityProperty;
-    Configuration conf;
+    Configuration c;
-      conf = suppliedConf;
+      c = suppliedConf;
-      conf = new Configuration();
+      c = new Configuration();
-    return conf;
+    return c;
-  private FileSystem getFileSystem(Configuration conf) throws MetricsException {
+  private FileSystem getFileSystem() throws MetricsException {
-      // Close the stream. This step could have been handled already by the
-      // flusher thread, but if it has, the PrintStream will just swallow the
-      // exception, which is fine.
-      if (currentOutStream != null) {
-        currentOutStream.close();
+      // If we're not yet connected to HDFS, create the connection
+      if (!initialized) {
+        initialized = initFs();
-      currentDirPath = path;
+      if (initialized) {
+        // Close the stream. This step could have been handled already by the
+        // flusher thread, but if it has, the PrintStream will just swallow the
+        // exception, which is fine.
+        if (currentOutStream != null) {
+          currentOutStream.close();
+        }
-      try {
-        rollLogDir();
-      } catch (IOException ex) {
-        throwMetricsException("Failed to create new log file", ex);
+        currentDirPath = path;
+
+        try {
+          rollLogDir();
+        } catch (IOException ex) {
+          throwMetricsException("Failed to create new log file", ex);
+        }
+
+        scheduleFlush(now);
-
-      scheduleFlush(now);

INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS43 INS59 INS83 MOV43 MOV59 MOV78 MOV83 MOV39 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS42 INS9 INS42 INS42 UPD42 INS21 MOV21 MOV21 MOV21 MOV21 INS21 MOV21 MOV25 INS65 INS60 MOV21 INS54 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS41 INS7 INS7 INS66 INS66 INS39 INS59 MOV8 INS12 INS42 INS8 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS32 INS8 INS8 INS42 MOV43 INS59 UPD42 INS8 INS42 INS42 INS42 MOV32 UPD42 INS42 INS9 INS21 MOV44 INS8 MOV25 MOV21 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS21 INS42 INS25 INS25 UPD42 UPD42 UPD42 INS7 INS25 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS7 INS38 INS8 INS42 MOV8 UPD42 UPD42 UPD42 INS42 INS9 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS27 UPD42 UPD42 INS42 INS21 INS42 INS53 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV32 INS7 INS7 INS42 INS45 INS7 UPD42 INS14 UPD42 UPD42 INS42 INS27 INS42 INS27 INS42 INS32 UPD42 UPD42 MOV43 INS27 INS42 INS42 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 MOV32 UPD45 MOV45 INS42 INS42 MOV45 INS42 INS45 INS32 UPD45 MOV45 INS42 MOV45 MOV42 MOV45 MOV42 MOV45 MOV42 MOV45 UPD42 MOV42 MOV45 UPD42 MOV42 MOV45 INS32 MOV45 INS32 UPD45 MOV45 MOV32 UPD42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL44