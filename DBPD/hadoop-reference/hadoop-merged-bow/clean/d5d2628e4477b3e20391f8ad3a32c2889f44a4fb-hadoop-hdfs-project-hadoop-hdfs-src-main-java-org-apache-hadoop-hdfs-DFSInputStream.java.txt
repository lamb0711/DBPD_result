Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.SocketCache.SocketAndStreams;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.hdfs.protocol.datatransfer.InvalidEncryptionKeyException;
-        datanode, dfsClient.conf, dfsClient.getConf().socketTimeout, locatedblock);
+            datanode, dfsClient.conf, dfsClient.getConf().socketTimeout,
+            dfsClient.getConf().connectToDnViaHostname, locatedblock);
+  private synchronized boolean blockUnderConstruction() {
+    return locatedBlocks.isUnderConstruction();
+  }
+
+    int refetchEncryptionKey = 1; // only need to get a new encryption key once
-        if (ex instanceof InvalidBlockTokenException && refetchToken > 0) {
+        if (ex instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) {
+          DFSClient.LOG.info("Will fetch a new encryption key and retry, " 
+              + "encryption key was invalid when connecting to " + targetAddr
+              + " : " + ex);
+          // The encryption key used is invalid.
+          refetchEncryptionKey--;
+          dfsClient.clearDataEncryptionKey();
+        } else if (ex instanceof InvalidBlockTokenException && refetchToken > 0) {
-        InetSocketAddress targetAddr = 
-          NetUtils.createSocketAddr(chosenNode.getXferAddr());
+        final String dnAddr =
+            chosenNode.getXferAddr(dfsClient.connectToDnViaHostname());
+        if (DFSClient.LOG.isDebugEnabled()) {
+          DFSClient.LOG.debug("Connecting to datanode " + dnAddr);
+        }
+        InetSocketAddress targetAddr = NetUtils.createSocketAddr(dnAddr);
+    int refetchEncryptionKey = 1; // only need to get a new encryption key once
-        if (e instanceof InvalidBlockTokenException && refetchToken > 0) {
+        if (e instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) {
+          DFSClient.LOG.info("Will fetch a new encryption key and retry, " 
+              + "encryption key was invalid when connecting to " + targetAddr
+              + " : " + e);
+          // The encryption key used is invalid.
+          refetchEncryptionKey--;
+          dfsClient.clearDataEncryptionKey();
+        } else if (e instanceof InvalidBlockTokenException && refetchToken > 0) {
+      IOStreamPair ioStreams = reader.getStreams();
-      socketCache.put(oldSock);
+      socketCache.put(oldSock, ioStreams);
-    if (dfsClient.shouldTryShortCircuitRead(dnAddr)) {
+    // Can't local read a block under construction, see HDFS-2757
+    if (dfsClient.shouldTryShortCircuitRead(dnAddr) &&
+        !blockUnderConstruction()) {
-          blockToken, chosenNode, dfsClient.hdfsTimeout, startOffset);
+          blockToken, chosenNode, dfsClient.hdfsTimeout, startOffset,
+          dfsClient.connectToDnViaHostname());
-      Socket sock = null;
+      SocketAndStreams sockAndStreams = null;
-        sock = socketCache.get(dnAddr);
+        sockAndStreams = socketCache.get(dnAddr);
-      if (sock == null) {
+      Socket sock;
+      if (sockAndStreams == null) {
+      } else {
+        sock = sockAndStreams.sock;
-                                       clientName);
+                                       clientName,
+                                       dfsClient.getDataEncryptionKey(),
+                                       sockAndStreams == null ? null : sockAndStreams.ioStreams);
-        sock.close();
+        if (sockAndStreams != null) {
+          sockAndStreams.close();
+        } else {
+          sock.close();
+        }
-  /** Utility class to encapsulate data node info and its ip address. */
+  /** Utility class to encapsulate data node info and its address. */

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS83 INS83 INS39 INS42 INS8 INS41 INS60 INS60 INS32 INS39 INS59 INS39 INS59 INS27 UPD66 INS42 INS42 INS42 INS34 INS42 INS34 INS60 MOV32 INS38 INS60 INS43 INS59 INS32 INS43 MOV43 INS59 INS8 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 UPD42 INS21 INS25 INS83 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS7 INS25 INS27 INS8 MOV25 INS42 INS42 INS32 INS40 INS42 INS21 INS27 INS8 MOV25 UPD42 INS42 INS40 INS27 INS8 INS8 INS22 INS62 INS27 INS21 INS21 INS21 INS42 INS42 INS32 INS32 UPD42 MOV42 INS62 INS27 INS21 INS21 INS21 INS32 INS16 INS42 INS33 INS21 MOV21 INS32 INS42 INS42 INS43 INS42 INS34 INS32 INS37 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS43 INS42 INS34 INS32 INS37 INS32 INS42 INS42 INS27 INS33 INS40 INS32 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS27 INS42 INS45 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS45 INS45 DEL42 DEL32