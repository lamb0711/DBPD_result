Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.List;
-import org.apache.hadoop.hdfs.server.common.HdfsConstants;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants;
-import org.apache.hadoop.hdfs.server.namenode.FSImageTransactionalStorageInspector.LogLoadPlan;
-import org.apache.hadoop.io.IOUtils;
+import com.google.common.collect.Lists;
+  
+  private FSNamesystem namesystem;
+  
+  void setNamesystem(FSNamesystem fsn) {
+    this.namesystem = fsn;
+  }
-        curState = sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);
+        curState = sd.analyzeStorage(HdfsServerConstants.StartupOption.REGULAR, storage);
-    saveNamespace();
+    saveNamespace(namesystem);
-      getFSNamesystem().dir.updateCountForINodeWithQuota(); // inefficient!
+      namesystem.dir.updateCountForINodeWithQuota(); // inefficient!
-      LogLoadPlan logLoadPlan = inspector.createLogLoadPlan(lastAppliedTxId,
-          target - 1);
-  
-      logLoadPlan.doRecovery();
-      loadEdits(logLoadPlan.getEditsFiles());
+
+      editLog.recoverUnclosedStreams();
+      Iterable<EditLogInputStream> editStreamsAll 
+        = editLog.selectInputStreams(lastAppliedTxId, target - 1);
+      // remove inprogress
+      List<EditLogInputStream> editStreams = Lists.newArrayList();
+      for (EditLogInputStream s : editStreamsAll) {
+        if (s.getFirstTxId() != editLog.getCurSegmentTxId()) {
+          editStreams.add(s);
+        }
+      }
+      loadEdits(editStreams, namesystem);
-      EditLogInputStream stream = getEditLog().getInProgressFileInputStream();
+      EditLogInputStream stream = null;
+      Collection<EditLogInputStream> editStreams
+        = getEditLog().selectInputStreams(
+            getEditLog().getCurSegmentTxId(),
+            getEditLog().getCurSegmentTxId());
+      
+      for (EditLogInputStream s : editStreams) {
+        if (s.getFirstTxId() == getEditLog().getCurSegmentTxId()) {
+          stream = s;
+        }
+        break;
+      }
+      if (stream == null) {
+        LOG.warn("Unable to find stream starting with " + editLog.getCurSegmentTxId()
+                 + ". This indicates that there is an error in synchronization in BackupImage");
+        return false;
+      }
+
-        IOUtils.closeStream(stream);
+        FSEditLog.closeAllStreams(editStreams);

MOV26 MOV26 MOV26 INS26 UPD40 INS40 UPD40 UPD40 INS23 INS31 INS83 INS43 INS59 INS39 INS42 INS44 INS8 INS42 INS42 INS43 INS42 INS21 INS42 INS7 MOV60 INS22 INS42 INS42 INS60 INS70 INS60 INS70 INS25 INS52 INS42 INS74 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS74 INS44 INS42 INS8 INS27 INS8 INS40 UPD42 UPD42 INS43 INS43 UPD42 INS43 INS43 INS42 INS32 MOV43 INS42 INS25 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 INS43 INS43 UPD42 INS43 INS42 INS25 INS10 INS42 INS33 INS21 INS41 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 MOV42 UPD42 INS32 INS32 INS42 INS27 INS8 INS32 INS9 INS32 INS32 INS21 INS32 INS42 INS32 INS42 INS32 INS32 INS21 INS42 INS42 INS27 UPD42 UPD42 UPD42 UPD40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL22 DEL43 DEL32