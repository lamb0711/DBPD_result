HDFS-14295. Add Threadpool for DataTransfers. Contributed by David Mollitor.

+import org.apache.hadoop.util.concurrent.HadoopExecutors;
+  private final ExecutorService xferService;
+
+    this.xferService =
+        HadoopExecutors.newCachedThreadPool(new Daemon.DaemonFactory());
+    this.xferService =
+        HadoopExecutors.newCachedThreadPool(new Daemon.DaemonFactory());
+    LOG.info("Waiting up to 30 seconds for transfer threads to complete");
+    HadoopExecutors.shutdown(this.xferService, LOG, 15L, TimeUnit.SECONDS);
+
-      StringBuilder xfersBuilder = new StringBuilder();
-      for (int i = 0; i < numTargets; i++) {
-        xfersBuilder.append(xferTargets[i]).append(" ");
-      }
-      LOG.info(bpReg + " Starting thread to transfer " + 
-               block + " to " + xfersBuilder);                       
+      final String xferTargetsString =
+          StringUtils.join(" ", Arrays.asList(xferTargets));
+      LOG.info("{} Starting thread to transfer {} to {}", bpReg, block,
+          xferTargetsString);
-      new Daemon(new DataTransfer(xferTargets, xferTargetStorageTypes,
-          xferTargetStorageIDs, block,
-          BlockConstructionStage.PIPELINE_SETUP_CREATE, "")).start();
+      final DataTransfer dataTransferTask = new DataTransfer(xferTargets,
+          xferTargetStorageTypes, xferTargetStorageIDs, block,
+          BlockConstructionStage.PIPELINE_SETUP_CREATE, "");
+
+      this.xferService.execute(dataTransferTask);
-      Daemon daemon = new Daemon(threadGroup,
-          new DataTransfer(targets, targetStorageTypes, targetStorageIds, b,
-              stage, client));
-      daemon.start();
+      if (LOG.isDebugEnabled()) {
+        final String xferTargetsString =
+            StringUtils.join(" ", Arrays.asList(targets));
+        LOG.debug("Transferring a replica to {}", xferTargetsString);
+      }
+
+      final DataTransfer dataTransferTask = new DataTransfer(targets,
+          targetStorageTypes, targetStorageIds, b, stage, client);
+
+      @SuppressWarnings("unchecked")
+      Future<Void> f = (Future<Void>) this.xferService.submit(dataTransferTask);
-        daemon.join();
-      } catch (InterruptedException e) {
-        throw new IOException(
-            "Pipeline recovery for " + b + " is interrupted.", e);
+        f.get();
+      } catch (InterruptedException | ExecutionException e) {
+        throw new IOException("Pipeline recovery for " + b + " is interrupted.",
+            e);

INS26 INS40 INS23 INS83 INS83 INS43 INS59 INS42 INS42 INS21 INS21 INS21 INS21 INS7 INS7 INS32 INS32 INS22 INS32 INS22 INS32 INS42 INS42 INS45 INS42 INS42 INS22 INS42 INS34 INS40 INS60 INS60 INS25 INS60 INS52 INS42 INS42 INS42 INS14 INS52 INS42 INS42 INS42 INS14 INS52 INS42 INS83 UPD43 MOV43 INS59 INS83 INS43 INS59 INS32 INS8 INS83 UPD43 INS79 INS74 INS59 INS43 INS43 UPD42 UPD42 MOV42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 MOV14 INS22 UPD42 INS42 INS42 INS42 INS60 MOV21 UPD42 UPD42 MOV14 INS42 INS45 INS43 INS43 INS42 INS11 INS40 INS40 INS42 INS42 INS45 MOV32 INS52 INS42 INS83 INS43 INS59 INS42 INS42 INS74 INS32 INS84 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 UPD42 INS45 UPD42 INS43 INS43 INS22 INS42 INS42 UPD42 UPD42 MOV43 INS43 INS42 INS42 INS45 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL2 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL45 DEL32 DEL21 DEL8 DEL24 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL14