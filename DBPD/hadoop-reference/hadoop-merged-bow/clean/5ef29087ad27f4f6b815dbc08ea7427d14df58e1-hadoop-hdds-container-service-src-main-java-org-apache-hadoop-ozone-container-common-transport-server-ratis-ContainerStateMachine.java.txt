HDDS-179. CloseContainer/PutKey command should be syncronized with write operations. Contributed by Shashikant Banerjee.

+import com.google.common.annotations.VisibleForTesting;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+ *
+ * PutKey is synchronized with WriteChunk operations, PutKey for a block is
+ * executed only after all the WriteChunk preceding the PutKey have finished.
+ *
+ * CloseContainer is synchronized with WriteChunk and PutKey operations,
+ * CloseContainer for a container is processed after all the preceding write
+ * operations for the container have finished.
-  private final ConcurrentHashMap<Long, CompletableFuture<Message>>
-      createContainerFutureMap;
+  private final ConcurrentHashMap<Long, StateMachineHelper> stateMachineMap;
-  ContainerStateMachine(ContainerDispatcher dispatcher,
+  public ContainerStateMachine(ContainerDispatcher dispatcher,
-    this.createContainerFutureMap = new ConcurrentHashMap<>();
+    this.stateMachineMap = new ConcurrentHashMap<>();
-  private CompletableFuture<Message> handleWriteChunk(
-      ContainerCommandRequestProto requestProto, long entryIndex) {
-    final WriteChunkRequestProto write = requestProto.getWriteChunk();
-    long containerID = write.getBlockID().getContainerID();
-    CompletableFuture<Message> future =
-        createContainerFutureMap.get(containerID);
-    CompletableFuture<Message> writeChunkFuture;
-    if (future != null) {
-      writeChunkFuture = future.thenApplyAsync(
-          v -> runCommand(requestProto), chunkExecutor);
-    } else {
-      writeChunkFuture = CompletableFuture.supplyAsync(
-          () -> runCommand(requestProto), chunkExecutor);
-    }
-    writeChunkFutureMap.put(entryIndex, writeChunkFuture);
-    return writeChunkFuture;
-  }
-
-  private CompletableFuture<Message> handleCreateContainer(
-      ContainerCommandRequestProto requestProto) {
-    long containerID = requestProto.getContainerID();
-    createContainerFutureMap.
-        computeIfAbsent(containerID, k -> new CompletableFuture<>());
-    return CompletableFuture.completedFuture(() -> ByteString.EMPTY);
-  }
-
-      switch (cmdType) {
-      case CreateContainer:
-        return handleCreateContainer(requestProto);
-      case WriteChunk:
-        return handleWriteChunk(requestProto, entry.getIndex());
-      default:
-        throw new IllegalStateException("Cmd Type:" + cmdType
-            + " should not have state machine data");
+      long containerId = requestProto.getContainerID();
+      stateMachineMap
+          .computeIfAbsent(containerId, k -> new StateMachineHelper());
+      CompletableFuture<Message> stateMachineFuture =
+          stateMachineMap.get(containerId)
+              .handleStateMachineData(requestProto, entry.getIndex());
+      if (stateMachineFuture == null) {
+        throw new IllegalStateException(
+            "Cmd Type:" + cmdType + " should not have state machine data");
+      return stateMachineFuture;
-      Type cmdType = requestProto.getCmdType();
-
-      if (cmdType == Type.WriteChunk) {
-        WriteChunkRequestProto write = requestProto.getWriteChunk();
-        // the data field has already been removed in start Transaction
-        Preconditions.checkArgument(!write.hasData());
-        CompletableFuture<Message> stateMachineFuture =
-            writeChunkFutureMap.remove(trx.getLogEntry().getIndex());
-        return stateMachineFuture
-            .thenComposeAsync(v ->
-                CompletableFuture.completedFuture(runCommand(requestProto)));
-      } else {
-        Message message = runCommand(requestProto);
-        if (cmdType == Type.CreateContainer) {
-          long containerID = requestProto.getContainerID();
-          createContainerFutureMap.remove(containerID).complete(message);
-        }
-        return CompletableFuture.completedFuture(message);
-      }
+      Preconditions.checkState(!HddsUtils.isReadOnly(requestProto));
+      stateMachineMap.computeIfAbsent(requestProto.getContainerID(),
+          k -> new StateMachineHelper());
+      long index =
+          trx.getLogEntry() == null ? -1 : trx.getLogEntry().getIndex();
+      return stateMachineMap.get(requestProto.getContainerID())
+          .executeContainerCommand(requestProto, index);
+
+  /**
+   * Class to manage the future tasks for writeChunks.
+   */
+  static class CommitChunkFutureMap {
+    private final ConcurrentHashMap<Long, CompletableFuture<Message>>
+        block2ChunkMap = new ConcurrentHashMap<>();
+
+    synchronized int removeAndGetSize(long index) {
+      block2ChunkMap.remove(index);
+      return block2ChunkMap.size();
+    }
+
+    synchronized CompletableFuture<Message> add(long index,
+        CompletableFuture<Message> future) {
+      return block2ChunkMap.put(index, future);
+    }
+
+    synchronized List<CompletableFuture<Message>> getAll() {
+      return new ArrayList<>(block2ChunkMap.values());
+    }
+  }
+
+  /**
+   * This class maintains maps and provide utilities to enforce synchronization
+   * among createContainer, writeChunk, putKey and closeContainer.
+   */
+  private class StateMachineHelper {
+
+    private CompletableFuture<Message> createContainerFuture;
+
+    // Map for maintaining all writeChunk futures mapped to blockId
+    private final ConcurrentHashMap<Long, CommitChunkFutureMap>
+        block2ChunkMap;
+
+    // Map for putKey futures
+    private final ConcurrentHashMap<Long, CompletableFuture<Message>>
+        blockCommitMap;
+
+    StateMachineHelper() {
+      createContainerFuture = null;
+      block2ChunkMap = new ConcurrentHashMap<>();
+      blockCommitMap = new ConcurrentHashMap<>();
+    }
+
+    // The following section handles writeStateMachineData transactions
+    // on a container
+
+    // enqueue the create container future during writeStateMachineData
+    // so that the write stateMachine data phase of writeChunk wait on
+    // create container to finish.
+    private CompletableFuture<Message> handleCreateContainer() {
+      createContainerFuture = new CompletableFuture<>();
+      return CompletableFuture.completedFuture(() -> ByteString.EMPTY);
+    }
+
+    // This synchronizes on create container to finish
+    private CompletableFuture<Message> handleWriteChunk(
+        ContainerCommandRequestProto requestProto, long entryIndex) {
+      CompletableFuture<Message> containerOpFuture;
+
+      if (createContainerFuture != null) {
+        containerOpFuture = createContainerFuture
+            .thenApplyAsync(v -> runCommand(requestProto), chunkExecutor);
+      } else {
+        containerOpFuture = CompletableFuture
+            .supplyAsync(() -> runCommand(requestProto), chunkExecutor);
+      }
+      writeChunkFutureMap.put(entryIndex, containerOpFuture);
+      return containerOpFuture;
+    }
+
+    CompletableFuture<Message> handleStateMachineData(
+        final ContainerCommandRequestProto requestProto, long index) {
+      Type cmdType = requestProto.getCmdType();
+      if (cmdType == Type.CreateContainer) {
+        return handleCreateContainer();
+      } else if (cmdType == Type.WriteChunk) {
+        return handleWriteChunk(requestProto, index);
+      } else {
+        return null;
+      }
+    }
+
+    // The following section handles applyTransaction transactions
+    // on a container
+
+    private CompletableFuture<Message> handlePutKey(
+        ContainerCommandRequestProto requestProto) {
+      List<CompletableFuture<Message>> futureList = new ArrayList<>();
+      long localId =
+          requestProto.getPutKey().getKeyData().getBlockID().getLocalID();
+      // Need not wait for create container future here as it has already
+      // finished.
+      if (block2ChunkMap.get(localId) != null) {
+        futureList.addAll(block2ChunkMap.get(localId).getAll());
+      }
+      CompletableFuture<Message> effectiveFuture =
+          runCommandAfterFutures(futureList, requestProto);
+
+      CompletableFuture<Message> putKeyFuture =
+          effectiveFuture.thenApply(message -> {
+            blockCommitMap.remove(localId);
+            return message;
+          });
+      blockCommitMap.put(localId, putKeyFuture);
+      return putKeyFuture;
+    }
+
+    // Close Container should be executed only if all pending WriteType
+    // container cmds get executed. Transactions which can return a future
+    // are WriteChunk and PutKey.
+    private CompletableFuture<Message> handleCloseContainer(
+        ContainerCommandRequestProto requestProto) {
+      List<CompletableFuture<Message>> futureList = new ArrayList<>();
+
+      // No need to wait for create container future here as it should have
+      // already finished.
+      block2ChunkMap.values().forEach(b -> futureList.addAll(b.getAll()));
+      futureList.addAll(blockCommitMap.values());
+
+      // There are pending write Chunk/PutKey type requests
+      // Queue this closeContainer request behind all these requests
+      CompletableFuture<Message> closeContainerFuture =
+          runCommandAfterFutures(futureList, requestProto);
+
+      return closeContainerFuture.thenApply(message -> {
+        stateMachineMap.remove(requestProto.getContainerID());
+        return message;
+      });
+    }
+
+    private CompletableFuture<Message> handleChunkCommit(
+        ContainerCommandRequestProto requestProto, long index) {
+      WriteChunkRequestProto write = requestProto.getWriteChunk();
+      // the data field has already been removed in start Transaction
+      Preconditions.checkArgument(!write.hasData());
+      CompletableFuture<Message> stateMachineFuture =
+          writeChunkFutureMap.remove(index);
+      CompletableFuture<Message> commitChunkFuture = stateMachineFuture
+          .thenComposeAsync(v -> CompletableFuture
+              .completedFuture(runCommand(requestProto)));
+
+      long localId = requestProto.getWriteChunk().getBlockID().getLocalID();
+      // Put the applyTransaction Future again to the Map.
+      // closeContainer should synchronize with this.
+      block2ChunkMap
+          .computeIfAbsent(localId, id -> new CommitChunkFutureMap())
+          .add(index, commitChunkFuture);
+      return commitChunkFuture.thenApply(message -> {
+        block2ChunkMap.computeIfPresent(localId, (containerId, chunks)
+            -> chunks.removeAndGetSize(index) == 0? null: chunks);
+        return message;
+      });
+    }
+
+    private CompletableFuture<Message> runCommandAfterFutures(
+        List<CompletableFuture<Message>> futureList,
+        ContainerCommandRequestProto requestProto) {
+      CompletableFuture<Message> effectiveFuture;
+      if (futureList.isEmpty()) {
+        effectiveFuture = CompletableFuture
+            .supplyAsync(() -> runCommand(requestProto));
+
+      } else {
+        CompletableFuture<Void> allFuture = CompletableFuture.allOf(
+            futureList.toArray(new CompletableFuture[futureList.size()]));
+        effectiveFuture = allFuture
+            .thenApplyAsync(v -> runCommand(requestProto));
+      }
+      return effectiveFuture;
+    }
+
+    CompletableFuture<Message> handleCreateContainer(
+        ContainerCommandRequestProto requestProto) {
+      CompletableFuture<Message> future =
+          CompletableFuture.completedFuture(runCommand(requestProto));
+      future.thenAccept(m -> {
+        createContainerFuture.complete(m);
+        createContainerFuture = null;
+      });
+      return future;
+    }
+
+    CompletableFuture<Message> handleOtherCommands(
+        ContainerCommandRequestProto requestProto) {
+      return CompletableFuture.completedFuture(runCommand(requestProto));
+    }
+
+    CompletableFuture<Message> executeContainerCommand(
+        ContainerCommandRequestProto requestProto, long index) {
+      Type cmdType = requestProto.getCmdType();
+      switch (cmdType) {
+      case WriteChunk:
+        return handleChunkCommit(requestProto, index);
+      case CloseContainer:
+        return handleCloseContainer(requestProto);
+      case PutKey:
+        return handlePutKey(requestProto);
+      case CreateContainer:
+        return handleCreateContainer(requestProto);
+      default:
+        return handleOtherCommands(requestProto);
+      }
+    }
+  }
+
+  @VisibleForTesting
+  public ConcurrentHashMap<Long, StateMachineHelper> getStateMachineMap() {
+    return stateMachineMap;
+  }
+
+  @VisibleForTesting
+  public CompletableFuture<Message> getCreateContainerFuture(long containerId) {
+    StateMachineHelper helper = stateMachineMap.get(containerId);
+    return helper == null ? null : helper.createContainerFuture;
+  }
+
+  @VisibleForTesting
+  public List<CompletableFuture<Message>> getCommitChunkFutureMap(
+      long containerId) {
+    StateMachineHelper helper = stateMachineMap.get(containerId);
+    if (helper != null) {
+      List<CompletableFuture<Message>> futureList = new ArrayList<>();
+      stateMachineMap.get(containerId).block2ChunkMap.values()
+          .forEach(b -> futureList.addAll(b.getAll()));
+      return futureList;
+    }
+    return null;
+  }
+
+  @VisibleForTesting
+  public Collection<CompletableFuture<Message>> getWriteChunkFutureMap() {
+    return writeChunkFutureMap.values();
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS55 INS55 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 MOV78 MOV83 MOV74 MOV42 MOV44 INS8 INS29 INS83 INS42 MOV23 INS31 INS31 INS31 INS29 INS83 INS42 INS23 INS23 INS23 INS31 MOV31 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS66 INS66 INS66 INS66 INS66 INS43 INS43 INS43 INS42 INS54 INS65 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS8 INS65 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS42 INS8 INS74 INS42 INS44 INS44 INS8 INS83 INS74 INS42 MOV44 INS8 INS83 INS74 INS42 INS44 INS8 INS83 MOV74 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS74 INS42 INS44 INS8 INS74 INS42 INS44 INS8 INS74 INS42 INS44 INS44 INS8 INS42 INS43 INS43 INS43 INS41 INS42 INS43 INS43 INS39 INS42 INS60 INS41 INS42 INS43 INS74 INS39 INS42 INS60 INS25 INS41 INS42 INS43 INS74 INS41 INS42 INS42 INS42 INS8 MOV12 INS66 INS42 INS14 INS39 INS42 INS21 INS41 INS43 INS43 INS39 INS42 MOV74 INS42 INS41 INS43 INS74 INS41 INS66 INS66 INS43 INS43 INS42 INS43 INS43 INS43 INS42 INS43 INS43 INS74 INS42 INS21 INS21 INS21 INS43 INS43 INS83 INS43 INS42 INS39 INS42 MOV60 INS25 INS43 INS43 INS60 INS60 INS25 INS60 INS60 INS21 INS41 INS43 INS43 INS43 INS42 INS60 INS21 INS21 INS60 INS41 INS43 INS42 INS39 INS42 MOV60 MOV21 MOV60 INS60 MOV60 INS21 INS41 INS43 INS43 INS74 INS42 INS43 INS42 INS60 MOV25 INS41 INS43 INS43 INS43 INS42 MOV60 INS21 INS41 INS43 INS43 INS43 INS42 MOV41 INS43 INS43 INS43 INS42 INS39 INS42 INS60 INS50 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS16 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS33 INS42 INS43 INS43 INS32 MOV60 INS21 INS60 INS25 INS41 MOV60 INS21 INS21 INS60 INS41 INS74 INS32 INS32 INS42 INS42 INS32 INS42 INS43 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS7 INS7 INS74 INS59 UPD42 INS42 INS42 INS42 MOV27 INS8 INS25 INS42 INS42 INS74 INS59 INS39 INS59 INS27 INS8 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS74 INS59 INS32 INS42 INS74 INS74 INS59 INS39 INS32 INS32 INS42 INS42 INS43 INS74 INS42 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 MOV49 INS41 INS49 INS41 INS49 INS41 MOV49 MOV41 INS49 INS41 INS42 INS42 INS32 INS27 INS33 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS41 INS42 INS42 INS42 INS42 UPD42 INS32 MOV74 INS59 INS27 INS8 INS42 INS32 INS32 INS39 INS59 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS33 INS42 INS14 INS42 INS14 INS42 MOV14 INS43 INS43 INS42 UPD42 UPD42 INS41 MOV27 INS8 INS8 INS43 INS74 INS42 INS14 INS42 INS32 INS32 INS33 INS21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS14 INS32 INS42 INS86 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS86 INS43 INS43 INS43 INS43 INS42 MOV32 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS21 INS43 INS43 UPD42 INS32 INS42 INS42 INS86 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS74 INS59 INS32 INS42 UPD42 INS42 INS42 INS42 INS86 INS42 INS32 INS42 INS33 MOV53 INS42 INS42 INS38 INS42 INS42 MOV32 INS86 INS42 INS16 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS74 INS74 INS42 INS42 INS32 INS41 INS41 INS42 INS43 INS43 INS74 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS43 INS43 INS74 INS42 INS42 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS86 INS59 INS8 INS42 INS42 INS42 INS42 INS7 INS74 INS7 INS42 MOV42 INS42 INS42 MOV32 INS59 INS8 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS14 INS32 INS42 INS86 MOV59 INS14 INS32 UPD42 MOV42 MOV42 MOV32 INS32 INS59 INS14 INS27 INS38 MOV32 INS42 INS42 INS32 INS42 INS43 INS43 UPD42 UPD42 INS42 INS32 INS33 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS59 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS21 INS41 MOV32 INS42 INS59 INS14 INS42 INS21 MOV41 INS42 INS32 INS43 INS43 UPD42 INS32 INS42 INS32 INS42 INS21 INS21 INS42 INS43 INS43 INS74 INS22 INS42 INS59 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS33 INS34 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS86 INS32 INS7 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS86 INS32 INS42 INS42 INS3 INS59 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS59 INS16 INS42 INS42 INS5 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS33 INS42 INS43 INS85 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL41 DEL49 DEL50 DEL8 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL86 DEL32 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL59 DEL60 DEL83 DEL42 DEL43 DEL39 DEL42 DEL32 DEL32 DEL43