HDDS-159. RestClient: Implement list operations for volume, bucket and keys. Contributed by Lokesh Jain.

+import com.google.common.base.Strings;
+import org.apache.hadoop.ozone.client.VolumeArgs;
-import org.apache.hadoop.ozone.client.VolumeArgs;
+import org.apache.hadoop.ozone.web.response.ListBuckets;
+import org.apache.hadoop.ozone.web.response.ListKeys;
+import org.apache.hadoop.ozone.web.response.ListVolumes;
-    throw new UnsupportedOperationException("Not yet implemented.");
+    return listVolumes(null, volumePrefix, prevKey, maxListResult);
-    throw new UnsupportedOperationException("Not yet implemented.");
+    try {
+      URIBuilder builder = new URIBuilder(ozoneRestUri);
+      builder.setPath(PATH_SEPARATOR);
+      builder.addParameter(Header.OZONE_INFO_QUERY_TAG,
+          Header.OZONE_LIST_QUERY_SERVICE);
+      builder.addParameter(Header.OZONE_LIST_QUERY_MAXKEYS,
+          String.valueOf(maxListResult));
+      addQueryParamter(Header.OZONE_LIST_QUERY_PREFIX, volumePrefix, builder);
+      addQueryParamter(Header.OZONE_LIST_QUERY_PREVKEY, prevKey, builder);
+      HttpGet httpGet = new HttpGet(builder.build());
+      if (!Strings.isNullOrEmpty(user)) {
+        httpGet.addHeader(Header.OZONE_USER, user);
+      }
+      addOzoneHeaders(httpGet);
+      HttpEntity response = executeHttpRequest(httpGet);
+      ListVolumes volumeList =
+          ListVolumes.parse(EntityUtils.toString(response));
+      EntityUtils.consume(response);
+      return volumeList.getVolumes().stream().map(volInfo -> {
+        long creationTime = 0;
+        try {
+          creationTime = HddsClientUtils.formatDateTime(volInfo.getCreatedOn());
+        } catch (ParseException e) {
+          LOG.warn("Parse exception in getting creation time for volume", e);
+        }
+        return new OzoneVolume(conf, this, volInfo.getVolumeName(),
+            volInfo.getCreatedBy(), volInfo.getOwner().getName(),
+            volInfo.getQuota().sizeInBytes(), creationTime, null);
+      }).collect(Collectors.toList());
+    } catch (URISyntaxException e) {
+      throw new IOException(e);
+    }
-    throw new UnsupportedOperationException("Not yet implemented.");
+    try {
+      HddsClientUtils.verifyResourceName(volumeName);
+      URIBuilder builder = new URIBuilder(ozoneRestUri);
+      builder.setPath(PATH_SEPARATOR + volumeName);
+      builder.addParameter(Header.OZONE_INFO_QUERY_TAG,
+          Header.OZONE_INFO_QUERY_BUCKET);
+      builder.addParameter(Header.OZONE_LIST_QUERY_MAXKEYS,
+          String.valueOf(maxListResult));
+      addQueryParamter(Header.OZONE_LIST_QUERY_PREFIX, bucketPrefix, builder);
+      addQueryParamter(Header.OZONE_LIST_QUERY_PREVKEY, prevBucket, builder);
+      HttpGet httpGet = new HttpGet(builder.build());
+      addOzoneHeaders(httpGet);
+      HttpEntity response = executeHttpRequest(httpGet);
+      ListBuckets bucketList =
+          ListBuckets.parse(EntityUtils.toString(response));
+      EntityUtils.consume(response);
+      return bucketList.getBuckets().stream().map(bucketInfo -> {
+        long creationTime = 0;
+        try {
+          creationTime =
+              HddsClientUtils.formatDateTime(bucketInfo.getCreatedOn());
+        } catch (ParseException e) {
+          LOG.warn("Parse exception in getting creation time for volume", e);
+        }
+        return new OzoneBucket(conf, this, volumeName,
+            bucketInfo.getBucketName(), bucketInfo.getAcls(),
+            bucketInfo.getStorageType(),
+            getBucketVersioningFlag(bucketInfo.getVersioning()), creationTime);
+      }).collect(Collectors.toList());
+    } catch (URISyntaxException e) {
+      throw new IOException(e);
+    }
-    throw new UnsupportedOperationException("Not yet implemented.");
+    try {
+      HddsClientUtils.verifyResourceName(volumeName);
+      URIBuilder builder = new URIBuilder(ozoneRestUri);
+      builder
+          .setPath(PATH_SEPARATOR + volumeName + PATH_SEPARATOR + bucketName);
+      builder.addParameter(Header.OZONE_INFO_QUERY_TAG,
+          Header.OZONE_INFO_QUERY_KEY);
+      builder.addParameter(Header.OZONE_LIST_QUERY_MAXKEYS,
+          String.valueOf(maxListResult));
+      addQueryParamter(Header.OZONE_LIST_QUERY_PREFIX, keyPrefix, builder);
+      addQueryParamter(Header.OZONE_LIST_QUERY_PREVKEY, prevKey, builder);
+      HttpGet httpGet = new HttpGet(builder.build());
+      addOzoneHeaders(httpGet);
+      HttpEntity response = executeHttpRequest(httpGet);
+      ListKeys keyList = ListKeys.parse(EntityUtils.toString(response));
+      EntityUtils.consume(response);
+      return keyList.getKeyList().stream().map(keyInfo -> {
+        long creationTime = 0, modificationTime = 0;
+        try {
+          creationTime = HddsClientUtils.formatDateTime(keyInfo.getCreatedOn());
+          modificationTime =
+              HddsClientUtils.formatDateTime(keyInfo.getModifiedOn());
+        } catch (ParseException e) {
+          LOG.warn("Parse exception in getting creation time for volume", e);
+        }
+        return new OzoneKey(volumeName, bucketName, keyInfo.getKeyName(),
+            keyInfo.getSize(), creationTime, modificationTime);
+      }).collect(Collectors.toList());
+    } catch (URISyntaxException e) {
+      throw new IOException(e);
+    }
+
+  private void addQueryParamter(String param, String value,
+      URIBuilder builder) {
+    if (!Strings.isNullOrEmpty(value)) {
+      builder.addParameter(param, value);
+    }
+  }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS8 INS8 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS41 INS54 INS54 INS54 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS32 INS8 INS12 INS8 INS12 INS8 INS12 INS42 INS42 INS42 INS38 INS8 INS42 INS33 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS21 INS60 INS60 INS21 INS41 INS44 INS8 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS60 INS60 INS21 INS41 INS44 INS8 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS60 INS60 INS21 INS41 INS44 INS8 INS32 INS21 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS38 INS8 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 MOV53 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 MOV53 INS32 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 MOV53 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS86 INS42 INS42 UPD43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS86 INS42 INS42 UPD43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS86 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS59 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS59 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS59 INS8 UPD42 INS42 INS42 INS42 INS60 INS54 INS41 INS42 INS42 INS42 INS60 INS54 INS41 INS42 INS42 INS42 INS60 INS54 INS41 INS39 INS59 INS8 INS12 INS14 INS39 INS59 INS8 INS12 INS14 INS39 INS59 INS59 INS8 INS12 INS14 INS42 INS34 INS21 INS44 INS8 INS43 INS42 INS52 INS32 INS32 INS32 INS32 INS42 INS33 INS42 INS34 INS21 INS44 INS8 INS43 INS42 INS52 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS34 INS42 INS34 INS21 INS21 INS44 INS8 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL45 DEL8 DEL45 DEL8 DEL45 DEL8