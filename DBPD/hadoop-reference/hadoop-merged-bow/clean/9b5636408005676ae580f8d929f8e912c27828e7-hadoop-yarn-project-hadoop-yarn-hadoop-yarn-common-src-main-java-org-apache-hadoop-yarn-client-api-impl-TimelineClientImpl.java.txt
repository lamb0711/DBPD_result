YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.

+  private volatile String timelineServiceAddress;
+  
+  // Retry parameters for identifying new timeline service
+  // TODO consider to merge with connection retry
+  private int maxServiceRetries;
+  private long serviceRetryInterval;
+  
+  private boolean timelineServiceV2 = false;
+
+    this.timelineServiceV2 = true;
-    client.addFilter(retryFilter);
-
-    if (YarnConfiguration.useHttps(conf)) {
-      timelineServiceAddress = conf.get(
-          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,
-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);
-    } else {
-      timelineServiceAddress = conf.get(
-          YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,
-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);
+    // TODO need to cleanup filter retry later.
+    if (!timelineServiceV2) {
+      client.addFilter(retryFilter);
-    LOG.info("Timeline service address: " + resURI);
-    timelineServiceVersion =
-        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,
-          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);
-    LOG.info("Timeline service address: " + timelineServiceAddress);
+
+    // old version timeline service need to get address from configuration
+    // while new version need to auto discovery (with retry).
+    if (timelineServiceV2) {
+      maxServiceRetries = conf.getInt(
+          YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,
+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);
+      serviceRetryInterval = conf.getLong(
+          YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,
+          YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);
+    } else {
+      if (YarnConfiguration.useHttps(conf)) {
+        setTimelineServiceAddress(conf.get(
+            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,
+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));
+      } else {
+        setTimelineServiceAddress(conf.get(
+            YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,
+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));
+      }
+      timelineServiceVersion =
+          conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,
+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);
+      LOG.info("Timeline service address: " + getTimelineServiceAddress());
+    } 
-    putObjects(constructResURI(getConfig(), timelineServiceAddress, true),
-        "entities", params, entitiesContainer);
+    putObjects("entities", params, entitiesContainer);
+  
+  // Used for new timeline service only
+  @Private
+  public void putObjects(String path, MultivaluedMap<String, String> params, 
+      Object obj) throws IOException, YarnException {
+    
+    // timelineServiceAddress could haven't be initialized yet 
+    // or stale (only for new timeline service)
+    int retries = pollTimelineServiceAddress(this.maxServiceRetries);
+    
+    // timelineServiceAddress could be stale, add retry logic here.
+    boolean needRetry = true;
+    while (needRetry) {
+      try {
+        URI uri = constructResURI(getConfig(), timelineServiceAddress, true);
+        putObjects(uri, path, params, obj);
+        needRetry = false;
+      }
+      catch (Exception e) {
+        // TODO only handle exception for timelineServiceAddress being updated.
+        // skip retry for other exceptions.
+        checkRetryWithSleep(retries, e);
+        retries--;
+      }
+    }
+  }
+  
+  /**
+   * Check if reaching to maximum of retries.
+   * @param retries
+   * @param e
+   */
+  private void checkRetryWithSleep(int retries, Exception e) throws 
+      YarnException, IOException {
+    if (retries > 0) {
+      try {
+        Thread.sleep(this.serviceRetryInterval);
+      } catch (InterruptedException ex) {
+        Thread.currentThread().interrupt();
+      }
+    } else {
+      LOG.error(
+        "TimelineClient has reached to max retry times :" + 
+        this.maxServiceRetries + " for service address: " + 
+        timelineServiceAddress);
+      if (e instanceof YarnException) {
+        throw (YarnException)e;
+      } else if (e instanceof IOException) {
+        throw (IOException)e;
+      } else {
+        throw new YarnException(e);
+      }
+    }
+  }
+  @Override
+  public void setTimelineServiceAddress(String address) {
+    this.timelineServiceAddress = address;
+  }
+  
+  private String getTimelineServiceAddress() {
+    return this.timelineServiceAddress;
+  }
+
-    PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>> getDTAction =
+    PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>>
+        getDTAction =
+            // TODO we should add retry logic here if timelineServiceAddress is
+            // not available immediately.
-                constructResURI(getConfig(), timelineServiceAddress, false).toURL(),
+                constructResURI(getConfig(), getTimelineServiceAddress(), false).toURL(),
+  /**
+   * Poll TimelineServiceAddress for maximum of retries times if it is null
+   * @param retries
+   * @return the left retry times
+   */
+  private int pollTimelineServiceAddress(int retries) {
+    while (timelineServiceAddress == null && retries > 0) {
+      try {
+        Thread.sleep(this.serviceRetryInterval);
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+      }
+      timelineServiceAddress = getTimelineServiceAddress();
+      retries--;
+    }
+    return retries;
+  }
+

INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS9 INS21 INS25 INS25 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS61 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS42 INS42 INS25 INS42 INS43 INS42 INS21 INS42 INS41 INS65 INS65 INS65 INS39 INS42 INS61 INS41 INS7 INS38 INS8 INS42 INS8 INS8 INS42 INS43 INS43 INS43 INS42 INS39 INS59 INS39 INS59 INS42 INS8 INS66 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS7 INS22 INS66 INS42 INS66 INS27 INS8 INS42 INS22 INS9 INS42 MOV21 MOV21 INS21 MOV25 MOV21 MOV21 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS54 INS42 INS34 INS54 INS21 INS25 INS22 INS42 INS52 INS42 INS27 INS27 INS54 INS21 INS21 INS52 INS42 INS7 INS7 INS42 INS22 INS8 INS12 INS8 INS12 INS32 INS62 INS8 INS25 INS52 INS42 INS42 INS33 INS42 INS34 INS8 INS12 INS7 INS37 INS42 INS32 INS42 INS32 INS52 INS42 INS60 INS21 INS21 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS27 INS42 INS43 INS53 INS62 INS8 INS8 INS21 INS44 INS8 INS42 INS32 INS42 UPD42 MOV42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS32 INS32 INS32 INS43 INS59 INS32 INS7 INS43 INS42 INS21 INS21 INS32 INS43 INS42 INS21 INS45 INS22 INS45 INS42 INS42 INS11 INS42 INS43 INS53 INS53 INS32 INS43 INS42 INS21 INS42 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS37 INS42 INS42 INS22 INS42 INS32 INS52 INS42 INS43 INS42 INS42 INS11 INS14 INS42 INS42 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS43 INS42 INS43 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL42 DEL7 DEL42 DEL7 DEL42