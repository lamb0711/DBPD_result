HADOOP-6334.  Fix GenericOptionsParser and Path to have a better URI support.  Contributed by Amareshwari Sriramadasu


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831412 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+   * @throws IOException 
-  public GenericOptionsParser(Options opts, String[] args) {
+  public GenericOptionsParser(Options opts, String[] args) 
+      throws IOException {
+   * @throws IOException 
-  public GenericOptionsParser(String[] args) {
+  public GenericOptionsParser(String[] args) 
+      throws IOException {
+   * @throws IOException 
-  public GenericOptionsParser(Configuration conf, String[] args) {
+  public GenericOptionsParser(Configuration conf, String[] args) 
+      throws IOException {
+   * @throws IOException 
-  public GenericOptionsParser(Configuration conf, Options options, String[] args) {
+  public GenericOptionsParser(Configuration conf,
+      Options options, String[] args) throws IOException {
-      CommandLine line) {
+      CommandLine line) throws IOException {
-    try {
-      if (line.hasOption("libjars")) {
-        conf.set("tmpjars", 
-                 validateFiles(line.getOptionValue("libjars"), conf));
-        //setting libjars in client classpath
-        URL[] libjars = getLibJars(conf);
-        if(libjars!=null && libjars.length>0) {
-          conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));
-          Thread.currentThread().setContextClassLoader(
-              new URLClassLoader(libjars, 
-                  Thread.currentThread().getContextClassLoader()));
-        }
+    if (line.hasOption("libjars")) {
+      conf.set("tmpjars", 
+               validateFiles(line.getOptionValue("libjars"), conf));
+      //setting libjars in client classpath
+      URL[] libjars = getLibJars(conf);
+      if(libjars!=null && libjars.length>0) {
+        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));
+        Thread.currentThread().setContextClassLoader(
+            new URLClassLoader(libjars, 
+                Thread.currentThread().getContextClassLoader()));
-      if (line.hasOption("files")) {
-        conf.set("tmpfiles", 
-                 validateFiles(line.getOptionValue("files"), conf));
-      }
-      if (line.hasOption("archives")) {
-        conf.set("tmparchives", 
-                  validateFiles(line.getOptionValue("archives"), conf));
-      }
-    } catch (IOException ioe) {
-      System.err.println(StringUtils.stringifyException(ioe));
+    }
+    if (line.hasOption("files")) {
+      conf.set("tmpfiles", 
+               validateFiles(line.getOptionValue("files"), conf));
+    }
+    if (line.hasOption("archives")) {
+      conf.set("tmparchives", 
+                validateFiles(line.getOptionValue("archives"), conf));
-    URL[] cp = new URL[files.length];
-    for (int i=0;i<cp.length;i++) {
-      Path tmp = new Path(files[i]);
-      cp[i] = FileSystem.getLocal(conf).pathToFile(tmp).toURI().toURL();
+    List<URL> cp = new ArrayList<URL>();
+    for (String file : files) {
+      Path tmp = new Path(file);
+      if (tmp.getFileSystem(conf).equals(FileSystem.getLocal(conf))) {
+        cp.add(FileSystem.getLocal(conf).pathToFile(tmp).toURI().toURL());
+      }
-    return cp;
+    return cp.toArray(new URL[0]);
-  private String validateFiles(String files, Configuration conf) throws IOException  {
+  private String validateFiles(String files, Configuration conf) 
+      throws IOException  {
-      Path path = new Path(tmp);
-      URI pathURI =  path.toUri();
+      URI pathURI;
+      try {
+        pathURI = new URI(tmp);
+      } catch (URISyntaxException e) {
+        throw new IllegalArgumentException(e);
+      }
+      Path path = new Path(pathURI);
-        try {
-          fs.close();
-        } catch(IOException e){};
-      String[] args) {
+      String[] args) throws IOException {

INS26 INS26 INS26 INS40 INS40 INS40 INS43 MOV43 MOV43 INS43 INS43 MOV8 INS43 INS65 INS42 INS65 INS42 INS65 INS65 INS42 MOV42 MOV25 MOV25 MOV25 MOV25 MOV21 INS70 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS74 INS44 INS42 INS8 INS32 INS43 INS43 INS14 INS43 INS42 INS60 INS25 INS42 INS42 MOV3 INS60 INS54 INS42 MOV42 INS74 INS42 MOV43 INS59 INS32 MOV8 INS34 MOV43 INS59 INS8 INS12 MOV43 INS43 INS43 UPD42 MOV42 INS14 INS32 INS42 INS32 MOV42 INS21 INS44 INS8 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS53 MOV43 UPD42 INS42 INS42 MOV32 INS42 INS14 INS42 INS14 INS43 INS42 INS43 INS42 INS42 INS42 DEL42 DEL44 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL14 DEL59 DEL60 DEL42 DEL42 DEL2 DEL7 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL40 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL20