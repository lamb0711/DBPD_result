HADOOP-13226 Support async call retry and failover.

-  private static class Counters {
+  static class Call {
+    private final Method method;
+    private final Object[] args;
+    private final boolean isRpc;
+    private final int callId;
+    final Counters counters;
+
+    private final RetryPolicy retryPolicy;
+    private final RetryInvocationHandler<?> retryInvocationHandler;
+
+    Call(Method method, Object[] args, boolean isRpc, int callId,
+         Counters counters, RetryInvocationHandler<?> retryInvocationHandler) {
+      this.method = method;
+      this.args = args;
+      this.isRpc = isRpc;
+      this.callId = callId;
+      this.counters = counters;
+
+      this.retryPolicy = retryInvocationHandler.getRetryPolicy(method);
+      this.retryInvocationHandler = retryInvocationHandler;
+    }
+
+    /** Invoke the call once without retrying. */
+    synchronized CallReturn invokeOnce() {
+      try {
+        // The number of times this invocation handler has ever been failed over
+        // before this method invocation attempt. Used to prevent concurrent
+        // failed method invocations from triggering multiple failover attempts.
+        final long failoverCount = retryInvocationHandler.getFailoverCount();
+        try {
+          return invoke();
+        } catch (Exception e) {
+          if (LOG.isTraceEnabled()) {
+            LOG.trace(this, e);
+          }
+          if (Thread.currentThread().isInterrupted()) {
+            // If interrupted, do not retry.
+            throw e;
+          }
+          retryInvocationHandler.handleException(
+              method, retryPolicy, failoverCount, counters, e);
+          return CallReturn.RETRY;
+        }
+      } catch(Throwable t) {
+        return new CallReturn(t);
+      }
+    }
+
+    CallReturn invoke() throws Throwable {
+      return new CallReturn(invokeMethod());
+    }
+
+    Object invokeMethod() throws Throwable {
+      if (isRpc) {
+        Client.setCallIdAndRetryCount(callId, counters.retries);
+      }
+      return retryInvocationHandler.invokeMethod(method, args);
+    }
+
+    @Override
+    public String toString() {
+      return getClass().getSimpleName() + "#" + callId + ": "
+          + method.getDeclaringClass().getSimpleName() + "." + method.getName()
+          + "(" + (args == null || args.length == 0? "": Arrays.toString(args))
+          +  ")";
+    }
+  }
+
+  static class Counters {
+
+    boolean isZeros() {
+      return retries == 0 && failovers == 0;
+    }
-  private volatile boolean hasMadeASuccessfulCall = false;
-  
+  private volatile boolean hasSuccessfulCall = false;
+
+  private final AsyncCallHandler asyncCallHandler = new AsyncCallHandler();
+
+  private long getFailoverCount() {
+    return proxyDescriptor.getFailoverCount();
+  }
+
+  private Call newCall(Method method, Object[] args, boolean isRpc, int callId,
+                       Counters counters) {
+    if (Client.isAsynchronousMode()) {
+      return asyncCallHandler.newAsyncCall(method, args, isRpc, callId,
+          counters, this);
+    } else {
+      return new Call(method, args, isRpc, callId, counters, this);
+    }
+  }
+
-    return invoke(method, args, isRpc, callId, new Counters());
-  }
+    final Counters counters = new Counters();
-  private Object invoke(final Method method, final Object[] args,
-      final boolean isRpc, final int callId, final Counters counters)
-      throws Throwable {
-    final RetryPolicy policy = getRetryPolicy(method);
-
+    final Call call = newCall(method, args, isRpc, callId, counters);
-      // The number of times this invocation handler has ever been failed over,
-      // before this method invocation attempt. Used to prevent concurrent
-      // failed method invocations from triggering multiple failover attempts.
-      final long failoverCount = proxyDescriptor.getFailoverCount();
-
-      if (isRpc) {
-        Client.setCallIdAndRetryCount(callId, counters.retries);
-      }
-      try {
-        final Object ret = invokeMethod(method, args);
-        hasMadeASuccessfulCall = true;
-        return ret;
-      } catch (Exception ex) {
-        if (Thread.currentThread().isInterrupted()) {
-          // If interrupted, do not retry.
-          throw ex;
-        }
-        handleException(method, policy, failoverCount, counters, ex);
+      final CallReturn c = call.invokeOnce();
+      final CallReturn.State state = c.getState();
+      if (state == CallReturn.State.ASYNC_INVOKED) {
+        return null; // return null for async calls
+      } else if (c.getState() != CallReturn.State.RETRY) {
+        return c.getReturnValue();
-    final boolean info = hasMadeASuccessfulCall || failovers != 0;
+    final boolean info = hasSuccessfulCall || failovers != 0
+        || asyncCallHandler.hasSuccessfulCall();
-      return method.invoke(proxyDescriptor.getProxy(), args);
+      final Object r = method.invoke(proxyDescriptor.getProxy(), args);
+      hasSuccessfulCall = true;
+      return r;

INS55 INS23 INS23 INS31 INS31 INS83 INS42 INS23 INS23 MOV23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS59 INS83 INS83 MOV5 INS59 UPD83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS83 MOV43 INS59 INS83 INS83 INS74 INS59 INS42 INS44 MOV44 MOV44 MOV44 MOV44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS43 INS42 INS43 INS8 MOV43 INS42 MOV43 INS8 INS78 INS83 INS43 INS42 INS8 INS39 INS42 INS8 INS42 INS9 INS42 INS42 INS14 INS41 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS25 INS60 INS60 INS61 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS43 INS76 INS42 MOV43 MOV42 INS5 INS74 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS42 INS54 INS42 INS42 INS41 MOV25 INS41 INS42 INS42 INS41 INS41 INS43 MOV32 INS42 INS43 INS85 INS42 INS32 INS8 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS9 INS8 INS42 INS43 INS85 INS43 INS76 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS66 INS8 INS12 INS14 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS41 INS41 INS42 INS42 MOV14 INS42 INS42 INS32 INS60 INS60 INS25 INS27 INS60 INS21 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS22 INS42 MOV60 INS54 INS44 INS8 INS43 INS32 INS42 MOV42 MOV42 MOV42 INS32 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS36 INS45 INS27 INS27 INS32 INS14 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS25 MOV27 INS32 INS83 MOV43 INS59 INS7 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 MOV42 MOV42 INS52 INS42 INS8 INS12 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS16 INS42 INS34 INS42 INS34 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS52 INS43 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS40 INS41 INS27 INS8 UPD42 INS42 INS42 INS42 MOV32 INS42 INS9 INS32 INS41 MOV44 INS8 INS42 INS14 INS42 INS42 INS42 INS27 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS40 INS41 INS42 INS42 INS32 UPD42 INS25 MOV25 INS21 INS41 INS43 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS8 INS32 INS40 INS42 INS42 INS33 INS40 INS34 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS52 INS42 DEL9 DEL83 DEL83 DEL83 DEL83 DEL83 DEL32 DEL41 DEL83 DEL42 DEL83 DEL44 DEL83 DEL42 DEL32 DEL59 DEL60 DEL9 DEL83 DEL42 DEL32 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL41 DEL8 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL31