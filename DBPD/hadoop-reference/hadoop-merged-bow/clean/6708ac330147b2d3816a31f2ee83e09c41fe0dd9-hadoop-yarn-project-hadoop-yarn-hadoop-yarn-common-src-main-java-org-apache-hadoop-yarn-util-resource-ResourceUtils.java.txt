YARN-5587. Add support for resource profiles. (vvasudev via asuresh)

+import org.apache.hadoop.yarn.api.records.Resource;
+  public static final String MINIMUM_ALLOCATION = ".minimum-allocation";
+  public static final String MAXIMUM_ALLOCATION = ".maximum-allocation";
+  private static void setMinimumAllocationForMandatoryResources(
+      Map<String, ResourceInformation> res, Configuration conf) {
+    String[][] resourceTypesKeys =
+        {
+          { ResourceInformation.MEMORY_MB.getName(),
+            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,
+            String.valueOf(
+              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),
+            ResourceInformation.MEMORY_MB.getName()
+          },
+          { ResourceInformation.VCORES.getName(),
+            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,
+            String.valueOf(
+              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),
+            ResourceInformation.VCORES.getName()
+          }
+        };
+    for (String[] arr : resourceTypesKeys) {
+      String resourceTypesKey =
+          YarnConfiguration.RESOURCE_TYPES + "." + arr[0] + MINIMUM_ALLOCATION;
+      long minimumResourceTypes = conf.getLong(resourceTypesKey, -1);
+      long minimumConf = conf.getLong(arr[1], -1);
+      long minimum;
+      if (minimumResourceTypes != -1) {
+        minimum = minimumResourceTypes;
+        if (minimumConf != -1) {
+          LOG.warn("Using minimum allocation for memory specified in "
+              + "resource-types config file with key "
+              + minimumResourceTypes + ", ignoring minimum specified using "
+              + arr[1]);
+        }
+      } else {
+        minimum = conf.getLong(arr[1], Long.parseLong(arr[2]));
+      }
+      ResourceInformation ri = res.get(arr[3]);
+      ri.setMinimumAllocation(minimum);
+    }
+  }
+
+  private static void setMaximumAllocationForMandatoryResources(
+      Map<String, ResourceInformation> res, Configuration conf) {
+    String[][] resourceTypesKeys =
+        {
+          {
+            ResourceInformation.MEMORY_MB.getName(),
+            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,
+            String.valueOf(
+              YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB),
+            ResourceInformation.MEMORY_MB.getName()
+          },
+          {
+            ResourceInformation.VCORES.getName(),
+            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,
+            String.valueOf(
+              YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES),
+             ResourceInformation.VCORES.getName()
+          }
+        };
+    for (String[] arr : resourceTypesKeys) {
+      String resourceTypesKey =
+          YarnConfiguration.RESOURCE_TYPES + "." + arr[0] + MAXIMUM_ALLOCATION;
+      long maximumResourceTypes = conf.getLong(resourceTypesKey, -1);
+      long maximumConf = conf.getLong(arr[1], -1);
+      long maximum;
+      if (maximumResourceTypes != -1) {
+        maximum = maximumResourceTypes;
+        if (maximumConf != -1) {
+          LOG.warn("Using maximum allocation for memory specified in "
+              + "resource-types config file with key "
+              + maximumResourceTypes + ", ignoring maximum specified using "
+              + arr[1]);
+        }
+      } else {
+        maximum = conf.getLong(arr[1], Long.parseLong(arr[2]));
+      }
+      ResourceInformation ri = res.get(arr[3]);
+      ri.setMaximumAllocation(maximum);
+    }
+  }
+
+        Long minimumAllocation = conf.getLong(
+            YarnConfiguration.RESOURCE_TYPES + "." + resourceName
+                + MINIMUM_ALLOCATION, 0L);
+        Long maximumAllocation = conf.getLong(
+            YarnConfiguration.RESOURCE_TYPES + "." + resourceName
+                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);
-            .newInstance(resourceName, resourceUnits, 0L, resourceType));
+            .newInstance(resourceName, resourceUnits, 0L, resourceType,
+                minimumAllocation, maximumAllocation));
+    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);
+    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);
+      Configuration conf) {
+    return getResourceTypes(conf,
+        YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE);
+  }
+
+  private static Map<String, ResourceInformation> getResourceTypes(
+    try {
+      provider.init(conf);
+    } catch (Exception e) {
+      throw new IOException(e);
+    }
+
+  @VisibleForTesting
+  public static void resetResourceTypes(Configuration conf) {
+    lock = null;
+    getResourceTypes(conf);
+  }
+
+  public static Resource getResourceTypesMinimumAllocation() {
+    Map<String, ResourceInformation> resourceTypes = getResourceTypes();
+    Resource ret = Resource.newInstance(0, 0);
+    for (Map.Entry<String, ResourceInformation> entry : resourceTypes
+        .entrySet()) {
+      String name = entry.getKey();
+      if (name.equals(ResourceInformation.MEMORY_MB.getName())) {
+        ret.setMemorySize(entry.getValue().getMinimumAllocation());
+        continue;
+      }
+      if (name.equals(ResourceInformation.VCORES.getName())) {
+        Long tmp = entry.getValue().getMinimumAllocation();
+        if (tmp > Integer.MAX_VALUE) {
+          tmp = (long) Integer.MAX_VALUE;
+        }
+        ret.setVirtualCores(tmp.intValue());
+        continue;
+      }
+      ret.setResourceValue(name, entry.getValue().getMinimumAllocation());
+    }
+    return ret;
+  }
+
+  /**
+   * Get a Resource object with for the maximum allocation possible.
+   * @return a Resource object with the maximum allocation for the scheduler
+   */
+  public static Resource getResourceTypesMaximumAllocation() {
+    Map<String, ResourceInformation> resourceTypes = getResourceTypes();
+    Resource ret = Resource.newInstance(0, 0);
+    for (Map.Entry<String, ResourceInformation> entry : resourceTypes
+        .entrySet()) {
+      String name = entry.getKey();
+      if (name.equals(ResourceInformation.MEMORY_MB.getName())) {
+        ret.setMemorySize(entry.getValue().getMaximumAllocation());
+        continue;
+      }
+      if (name.equals(ResourceInformation.VCORES.getName())) {
+        Long tmp = entry.getValue().getMaximumAllocation();
+        if (tmp > Integer.MAX_VALUE) {
+          tmp = (long) Integer.MAX_VALUE;
+        }
+        ret.setVirtualCores(tmp.intValue());
+        continue;
+      }
+      ret.setResourceValue(name, entry.getValue().getMaximumAllocation());
+    }
+    return ret;
+  }

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS74 INS42 INS43 INS42 INS60 INS70 INS74 INS42 INS43 INS42 INS60 INS70 INS21 INS21 INS43 INS43 INS43 INS43 INS42 INS41 INS54 INS42 INS43 INS42 INS21 INS21 INS42 INS60 INS60 INS70 INS41 INS65 INS65 INS42 INS60 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS5 INS59 INS44 INS42 INS8 INS43 INS43 INS43 INS42 INS5 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS12 INS42 INS7 INS32 INS74 INS59 INS43 INS59 INS44 INS32 INS8 INS42 INS66 INS66 INS74 INS59 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS85 INS85 INS42 INS4 INS5 INS42 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS42 INS42 INS42 INS43 INS85 INS85 INS42 INS4 INS5 INS42 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS44 INS8 INS42 INS33 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS25 INS25 INS21 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS25 INS25 INS21 INS42 INS4 INS4 INS43 INS85 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS32 INS42 INS4 INS4 INS43 INS85 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS43 INS43 INS43 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS34 INS43 INS43 INS43 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS32 INS40 INS32 INS32 INS32 INS40 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS38 INS21 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS32 INS32 INS32 INS40 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS38 INS21 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS60 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS18 INS42 INS42 INS32 INS60 INS25 INS21 INS18 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS18 INS42 INS42 INS32 INS60 INS25 INS21 INS18 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS40 INS40 INS42 INS40 INS42 INS42 INS42 INS40 INS40 INS42 INS40 INS45 INS2 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS2 INS38 INS34 INS7 INS27 INS8 INS7 INS42 INS42 INS2 INS40 INS42 INS42 INS42 INS40 INS40 INS42 INS40 INS42 INS42 INS42 INS40 INS40 INS42 INS40 INS45 INS2 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS2 INS38 INS34 INS7 INS27 INS8 INS7 INS42 INS42 INS2 INS43 INS59 INS43 INS59 INS43 INS42 INS42 INS42 INS40 INS42 INS32 INS40 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS40 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS34 INS34 INS42 INS34 INS34 INS42 INS42 INS42 INS38 INS21 INS42 INS32 INS42 INS34 INS42 INS34 INS34 INS42 INS34 INS34 INS42 INS42 INS42 INS38 INS21 INS42 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS42 INS34 INS32 INS42 INS42 INS2 INS32 INS34 INS32 INS42 INS42 INS2 INS32 INS42 INS42 INS27 INS34 INS42 INS42 INS27 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS2 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS2 INS40 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS11 INS27 INS42 INS45 INS2 INS42 INS34 INS27 INS42 INS45 INS2 INS42 INS34 INS39 INS40 INS39 INS40 INS45 INS45 INS42 INS34 INS45 INS45 INS42 INS34