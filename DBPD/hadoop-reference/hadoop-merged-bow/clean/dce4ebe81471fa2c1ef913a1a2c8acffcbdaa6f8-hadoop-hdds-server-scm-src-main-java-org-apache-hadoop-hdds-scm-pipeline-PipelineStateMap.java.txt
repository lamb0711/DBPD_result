HDDS-694. Plugin new Pipeline management code in SCM.
Contributed by Lokesh Jain.

- * its state. All the read write operations in this class are protected by a
- * lock.
+ * its state.
-    if (pipelineMap.putIfAbsent(pipeline.getID(), pipeline) != null) {
-      LOG.warn("Duplicate pipeline ID detected. {}", pipeline.getID());
+    if (pipelineMap.putIfAbsent(pipeline.getId(), pipeline) != null) {
+      LOG.warn("Duplicate pipeline ID detected. {}", pipeline.getId());
-          .format("Duplicate pipeline ID %s detected.", pipeline.getID()));
+          .format("Duplicate pipeline ID %s detected.", pipeline.getId()));
-    pipeline2container.put(pipeline.getID(), new TreeSet<>());
+    pipeline2container.put(pipeline.getId(), new TreeSet<>());
-        "container Id cannot be null");
+        "Container Id cannot be null");
-    if (!pipeline.isOpen()) {
-      throw new IOException(
-          String.format("%s is not in open state", pipelineID));
+    if (pipeline.isClosed()) {
+      throw new IOException(String
+          .format("Cannot add container to pipeline=%s in closed state",
+              pipelineID));
-  Pipeline getPipeline(PipelineID pipelineID) throws IOException {
+  Pipeline getPipeline(PipelineID pipelineID) throws PipelineNotFoundException {
+    Preconditions.checkNotNull(pipelineID,
+        "Pipeline Id cannot be null");
+
-      throw new IOException(String.format("%s not found", pipelineID));
+      throw new PipelineNotFoundException(
+          String.format("%s not found", pipelineID));
-  List<Pipeline> getPipelinesByType(ReplicationType type) {
+  List<Pipeline> getPipelines(ReplicationType type) {
-    return pipelineMap.values().stream().filter(p -> p.getType().equals(type))
+    return pipelineMap.values().stream()
+        .filter(p -> p.getType().equals(type))
-   * Get open pipeline corresponding to specified replication type and factor.
+   * Get pipeline corresponding to specified replication type and factor.
-   * @return List of open pipelines with specified replication type and factor
+   * @return List of pipelines with specified replication type and factor
-  List<Pipeline> getPipelinesByTypeAndFactor(ReplicationType type,
-      ReplicationFactor factor) {
+  List<Pipeline> getPipelines(ReplicationType type, ReplicationFactor factor) {
+    Preconditions.checkNotNull(type, "Replication type cannot be null");
+    Preconditions.checkNotNull(factor, "Replication factor cannot be null");
+
-        .filter(pipeline -> pipeline.isOpen() && pipeline.getType() == type
+        .filter(pipeline -> pipeline.getType() == type
+   * Get list of pipeline corresponding to specified replication type and
+   * pipeline states.
+   *
+   * @param type - ReplicationType
+   * @param states - Array of required PipelineState
+   * @return List of pipelines with specified replication type and states
+   */
+  List<Pipeline> getPipelines(ReplicationType type, PipelineState... states) {
+    Preconditions.checkNotNull(type, "Replication type cannot be null");
+    Preconditions.checkNotNull(states, "Pipeline state cannot be null");
+
+    Set<PipelineState> pipelineStates = new HashSet<>();
+    pipelineStates.addAll(Arrays.asList(states));
+    return pipelineMap.values().stream().filter(
+        pipeline -> pipeline.getType() == type && pipelineStates
+            .contains(pipeline.getPipelineState()))
+        .collect(Collectors.toList());
+  }
+
+  /**
-      throws IOException {
+      throws PipelineNotFoundException {
+    Preconditions.checkNotNull(pipelineID,
+        "Pipeline Id cannot be null");
+
-      throw new IOException(String.format("%s not found", pipelineID));
+      throw new PipelineNotFoundException(
+          String.format("%s not found", pipelineID));
-  int getNumberOfContainers(PipelineID pipelineID) throws IOException {
+  int getNumberOfContainers(PipelineID pipelineID)
+      throws PipelineNotFoundException {
+    Preconditions.checkNotNull(pipelineID,
+        "Pipeline Id cannot be null");
+
-      throw new IOException(String.format("%s not found", pipelineID));
+      throw new PipelineNotFoundException(
+          String.format("%s not found", pipelineID));
-  void removePipeline(PipelineID pipelineID) throws IOException {
+  Pipeline removePipeline(PipelineID pipelineID) throws IOException {
+    return pipeline;
+    if (containerIDs == null) {
+      throw new PipelineNotFoundException(
+          String.format("%s not found", pipelineID));
+    }
-      throws IOException {
+      throws PipelineNotFoundException {

INS31 UPD43 UPD42 UPD42 INS29 INS74 INS42 INS44 INS44 INS8 UPD43 UPD43 INS43 UPD43 UPD66 UPD42 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS21 INS21 INS60 INS21 INS41 UPD42 INS21 INS25 UPD42 INS21 MOV25 INS42 INS41 INS25 UPD42 INS32 INS32 UPD66 UPD66 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS32 INS32 INS74 INS59 INS32 INS32 INS32 MOV27 INS8 INS32 INS42 INS27 INS8 UPD45 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS53 UPD42 MOV42 UPD42 MOV42 MOV42 INS45 INS42 INS33 INS53 UPD42 INS42 INS42 INS74 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS14 INS14 UPD42 UPD43 MOV27 INS43 INS32 INS42 INS59 INS27 INS43 MOV32 UPD43 INS43 INS32 UPD42 UPD45 UPD42 MOV27 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS45 INS42 UPD42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL66 DEL32 DEL38 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL39