HADOOP-10714. AmazonS3Client.deleteObjects() need to be limited to 1000 entries per call. Contributed by Juan Yu.

+import org.apache.hadoop.fs.s3.S3Credentials;
+
+  // The maximum number of entries that can be deleted in any call to s3
+  private static final int MAX_ENTRIES_TO_DELETE = 1000;
-    String accessKey = conf.get(ACCESS_KEY, null);
-    String secretKey = conf.get(SECRET_KEY, null);
-
-    String userInfo = name.getUserInfo();
-    if (userInfo != null) {
-      int index = userInfo.indexOf(':');
-      if (index != -1) {
-        accessKey = userInfo.substring(0, index);
-        secretKey = userInfo.substring(index + 1);
-      } else {
-        accessKey = userInfo;
-      }
-    }
+    S3Credentials s3Credentials = new S3Credentials();
+    s3Credentials.initialize(name, conf);
-        new BasicAWSCredentialsProvider(accessKey, secretKey),
+        new BasicAWSCredentialsProvider(s3Credentials.getAccessKey(),
+                                        s3Credentials.getSecretAccessKey()),
-      LOG.info("rename: src or dst are empty");
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("rename: src or dst are empty");
+      }
-    if (srcKey.equals(dstKey)) {
-      LOG.info("rename: src and dst refer to the same file");
-      return true;
-    }
-
+    if (srcKey.equals(dstKey)) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("rename: src and dst refer to the same file or directory");
+      }
+      return srcStatus.isFile();
+    }
+
-      if (srcStatus.isFile() && dstStatus.isDirectory()) {
-        LOG.info("rename: src is a file and dst is a directory");
-        return false;
-      }
-
-        LOG.info("rename: src is a directory and dst is a file");
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("rename: src is a directory and dst is a file");
+        }
+      if (dstStatus.isDirectory() && !dstStatus.isEmptyDirectory()) {
+        return false;
+      }
-      copyFile(srcKey, dstKey);
+      if (dstStatus != null && dstStatus.isDirectory()) {
+        String newDstKey = dstKey;
+        if (!newDstKey.endsWith("/")) {
+          newDstKey = newDstKey + "/";
+        }
+        String filename =
+            srcKey.substring(pathToKey(src.getParent()).length()+1);
+        newDstKey = newDstKey + filename;
+        copyFile(srcKey, newDstKey);
+      } else {
+        copyFile(srcKey, dstKey);
+      }
+      //Verify dest is not a child of the source directory
+      if (dstKey.startsWith(srcKey)) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("cannot rename a directory to a subdirectory of self");
+        }
+        return false;
+      }
+
-        copyFile(srcKey, dstKey);
-        statistics.incrementWriteOps(1);
-        keysToDelete.add(new DeleteObjectsRequest.KeyVersion(srcKey));
+        // delete unnecessary fake directory.
+        keysToDelete.add(new DeleteObjectsRequest.KeyVersion(dstKey));
+
+          if (keysToDelete.size() == MAX_ENTRIES_TO_DELETE) {
+            DeleteObjectsRequest deleteRequest =
+                new DeleteObjectsRequest(bucket).withKeys(keysToDelete);
+            s3.deleteObjects(deleteRequest);
+            statistics.incrementWriteOps(1);
+            keysToDelete.clear();
+          }
+          if (keysToDelete.size() > 0) {
+            DeleteObjectsRequest deleteRequest =
+                new DeleteObjectsRequest(bucket).withKeys(keysToDelete);
+            s3.deleteObjects(deleteRequest);
+            statistics.incrementWriteOps(1);
+          }
-
-
-      if (!keysToDelete.isEmpty()) {
-        DeleteObjectsRequest deleteRequest = new DeleteObjectsRequest(bucket);
-        deleteRequest.setKeys(keysToDelete);
-        s3.deleteObjects(deleteRequest);
-        statistics.incrementWriteOps(1);
-      }
-    LOG.info("Delete path " + f + " - recursive " + recursive);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Delete path " + f + " - recursive " + recursive);
+    }
-          }
-          DeleteObjectsRequest deleteRequest = new DeleteObjectsRequest(bucket);
-          deleteRequest.setKeys(keys);
-          s3.deleteObjects(deleteRequest);
-          statistics.incrementWriteOps(1);
-          keys.clear();
+            if (keys.size() == MAX_ENTRIES_TO_DELETE) {
+              DeleteObjectsRequest deleteRequest =
+                  new DeleteObjectsRequest(bucket).withKeys(keys);
+              s3.deleteObjects(deleteRequest);
+              statistics.incrementWriteOps(1);
+              keys.clear();
+            }
+          }
+            if (keys.size() > 0) {
+              DeleteObjectsRequest deleteRequest =
+                  new DeleteObjectsRequest(bucket).withKeys(keys);
+              s3.deleteObjects(deleteRequest);
+              statistics.incrementWriteOps(1);
+            }
-    LOG.info("List status for path: " + f);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("List status for path: " + f);
+    }
-    LOG.info("Making directory: " + f);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Making directory: " + f);
+    }
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Getting path status for " + f + " (" + key + ")");
+    }
-    LOG.info("Getting path status for " + f + " (" + key + ")");
-            LOG.warn("Found file (with /): real file? should not happen: " + key);
+            LOG.warn("Found file (with /): real file? should not happen: {}", key);
-      if (objects.getCommonPrefixes().size() > 0 || objects.getObjectSummaries().size() > 0) {
+      if (!objects.getCommonPrefixes().isEmpty()
+          || objects.getObjectSummaries().size() > 0) {
-
-    LOG.info("Copying local file from " + src + " to " + dst);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Copying local file from " + src + " to " + dst);
+    }
-    return getConf().getLong("fs.s3a.block.size", 32 * 1024 * 1024);
+    return getConf().getLong(FS_S3A_BLOCK_SIZE, 32 * 1024 * 1024);
-    LOG.info("Error Message: " + ace.getMessage());
+    LOG.info("Error Message: {}" + ace, ace);

INS26 INS40 INS23 INS83 INS83 INS83 INS39 INS59 MOV25 INS42 INS34 INS21 INS25 INS25 INS25 INS25 INS25 UPD43 INS32 INS8 INS8 MOV25 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 UPD42 UPD42 INS14 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 INS25 MOV41 INS25 INS25 MOV25 INS25 MOV21 INS42 INS42 MOV21 INS42 INS42 MOV21 INS42 INS42 MOV21 INS42 INS42 MOV21 INS42 INS42 MOV21 INS42 INS42 INS43 INS32 MOV8 INS32 INS8 MOV32 MOV27 INS8 INS27 INS8 MOV27 MOV8 INS8 INS32 UPD27 MOV27 UPD45 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 MOV21 MOV25 MOV41 INS32 INS38 INS41 INS27 INS60 INS25 INS60 INS21 MOV21 UPD42 MOV42 INS42 UPD42 MOV42 INS25 MOV41 UPD42 UPD42 UPD42 UPD42 INS38 MOV27 UPD42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS9 INS42 INS33 MOV43 INS59 INS38 INS8 MOV43 INS59 INS7 INS32 INS8 MOV32 MOV34 UPD42 UPD42 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS32 INS42 INS27 UPD42 UPD42 MOV42 UPD42 MOV42 MOV21 INS25 INS25 UPD42 INS42 INS42 INS45 INS7 INS42 INS42 INS27 INS42 INS42 UPD42 INS27 INS8 INS27 INS8 UPD42 UPD45 INS42 INS27 INS32 INS34 UPD42 UPD42 INS45 INS32 INS42 INS60 INS21 MOV21 INS21 INS32 INS34 INS60 INS21 MOV21 INS25 INS25 INS42 INS45 INS32 INS42 INS42 INS42 MOV43 INS59 INS32 INS32 INS42 INS42 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS42 INS32 INS42 INS32 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS60 MOV21 MOV21 MOV21 INS32 INS34 INS60 INS21 INS21 INS45 INS42 INS42 INS42 MOV14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 MOV43 INS59 INS42 INS42 INS43 INS59 INS32 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 MOV14 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL39 DEL42 DEL42 DEL13 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL9 DEL45 DEL32 DEL21 DEL8 DEL32 DEL38 DEL42 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL45 DEL42 DEL27 DEL27 DEL45 DEL42 DEL42 DEL32