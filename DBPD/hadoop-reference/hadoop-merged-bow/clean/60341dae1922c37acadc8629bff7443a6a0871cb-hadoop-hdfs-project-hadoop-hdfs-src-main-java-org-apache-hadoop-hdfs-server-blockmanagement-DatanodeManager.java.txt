Merge r1476010 through r1476452 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1476453 13f79535-47bb-0310-9956-ffa450edef68

-  
+
+  /** @return the datanode descriptor for the host. */
+  public DatanodeDescriptor getDatanodeByXferAddr(String host, int xferPort) {
+    return host2DatanodeMap.getDatanodeByXferAddr(host, xferPort);
+  }
+
+  /**
+   * Given datanode address or host name, returns the DatanodeDescriptor for the
+   * same, or if it doesn't find the datanode, it looks for a machine local and
+   * then rack local datanode, if a rack local datanode is not possible either,
+   * it returns the DatanodeDescriptor of any random node in the cluster.
+   *
+   * @param address hostaddress:transfer address
+   * @return the best match for the given datanode
+   * @throws IOException when no datanode is found for given address
+   */
+  DatanodeDescriptor getDatanodeDescriptor(String address) {
+    DatanodeDescriptor node = null;
+    int colon = address.indexOf(":");
+    int xferPort;
+    String host = address;
+    if (colon > 0) {
+      host = address.substring(0, colon);
+      xferPort = Integer.parseInt(address.substring(colon+1));
+      node = getDatanodeByXferAddr(host, xferPort);
+    }
+    if (node == null) {
+      node = getDatanodeByHost(host);
+    }
+    if (node == null) {
+      String networkLocation = resolveNetworkLocation(host);
+
+      // If the current cluster doesn't contain the node, fallback to
+      // something machine local and then rack local.
+      List<Node> rackNodes = getNetworkTopology()
+                                   .getDatanodesInRack(networkLocation);
+      if (rackNodes != null) {
+        // Try something machine local.
+        for (Node rackNode : rackNodes) {
+          if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {
+            node = (DatanodeDescriptor) rackNode;
+            break;
+          }
+        }
+
+        // Try something rack local.
+        if (node == null && !rackNodes.isEmpty()) {
+          node = (DatanodeDescriptor) (rackNodes
+              .get(DFSUtil.getRandom().nextInt(rackNodes.size())));
+        }
+      }
+
+      // If we can't even choose rack local, just choose any node in the
+      // cluster.
+      if (node == null) {
+        node = (DatanodeDescriptor)getNetworkTopology()
+                                   .chooseRandom(NodeBase.ROOT);
+      }
+    }
+    return node;
+  }
+
+
+  public String resolveNetworkLocation(String host) {
+    DatanodeID d = parseDNFromHostsEntry(host);
+    return resolveNetworkLocation(d);
+  }
+
-  private void resolveNetworkLocation (DatanodeDescriptor node) {
+  private String resolveNetworkLocation (DatanodeID node) {
-    node.setNetworkLocation(networkLocation);
+    return networkLocation;
-          resolveNetworkLocation(nodeS);
+          nodeS.setNetworkLocation(resolveNetworkLocation(nodeS));
-        resolveNetworkLocation(nodeDescr);
+        nodeDescr.setNetworkLocation(resolveNetworkLocation(nodeDescr));
-  
+
-   * 
+   *
-         
+
-            brCommand.add(new RecoveringBlock(
-                new ExtendedBlock(blockPoolId, b), b.getExpectedLocations(), b
-                    .getBlockRecoveryId()));
+            DatanodeDescriptor[] expectedLocations = b.getExpectedLocations();
+            // Skip stale nodes during recovery - not heart beated for some time (30s by default).
+            List<DatanodeDescriptor> recoveryLocations =
+                new ArrayList<DatanodeDescriptor>(expectedLocations.length);
+            for (int i = 0; i < expectedLocations.length; i++) {
+              if (!expectedLocations[i].isStale(this.staleInterval)) {
+                recoveryLocations.add(expectedLocations[i]);
+              }
+            }
+            // If we only get 1 replica after eliminating stale nodes, then choose all
+            // replicas for recovery and let the primary data node handle failures.
+            if (recoveryLocations.size() > 1) {
+              if (recoveryLocations.size() != expectedLocations.length) {
+                LOG.info("Skipped stale nodes for recovery : " +
+                    (expectedLocations.length - recoveryLocations.size()));
+              }
+              brCommand.add(new RecoveringBlock(
+                  new ExtendedBlock(blockPoolId, b),
+                  recoveryLocations.toArray(new DatanodeDescriptor[recoveryLocations.size()]),
+                  b.getBlockRecoveryId()));
+            } else {
+              // If too many replicas are stale, then choose all replicas to participate
+              // in block recovery.
+              brCommand.add(new RecoveringBlock(
+                  new ExtendedBlock(blockPoolId, b),
+                  expectedLocations,
+                  b.getBlockRecoveryId()));
+            }

INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS65 INS42 INS43 INS42 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS25 INS25 INS25 INS41 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS41 INS66 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS21 INS21 INS42 INS33 INS21 INS42 INS33 INS60 INS60 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS7 INS7 INS7 INS7 INS43 INS59 INS74 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS25 INS42 INS33 INS21 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS44 INS42 INS8 INS27 INS8 INS7 INS32 INS42 INS42 INS27 INS42 INS43 INS42 INS25 INS27 INS38 INS21 INS42 INS11 INS42 INS42 MOV32 INS42 INS34 INS42 INS32 INS8 INS42 INS33 INS32 INS7 MOV43 INS32 INS32 INS8 INS32 INS42 INS42 INS21 INS10 INS42 INS42 INS42 INS11 INS32 INS42 INS40 INS42 INS42 MOV32 INS60 INS60 INS24 INS25 INS36 INS42 INS7 INS43 INS36 INS42 INS5 INS59 INS74 INS59 INS58 INS27 INS37 INS8 INS27 MOV8 INS8 INS11 INS42 INS11 INS42 INS32 INS43 INS85 INS42 MOV32 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS25 INS32 INS34 INS25 INS21 INS43 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS40 INS42 INS34 INS38 INS8 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS32 INS21 INS32 INS40 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS22 INS32 INS42 INS42 INS32 INS32 INS43 INS14 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS2 INS42 INS42 INS27 INS42 INS42 INS3 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS36 INS5 INS32 INS42 INS27 INS43 INS85 INS42 INS42 INS40 INS32 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21