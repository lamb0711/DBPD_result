Merging trunk to HDFS-2802 branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1416603 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.hdfs.util.ReadOnlyList;
+
+import com.google.common.base.Preconditions;
+  
+  private class SnapshotDiff implements Comparable<Snapshot> {
+    /** The snapshot will obtain after applied this diff. */
+    final Snapshot snapshot;
+    /** The size of the children list which is never changed. */
+    final int size;
+    /**
+     * Posterior diff is the diff happened after this diff.
+     * The posterior diff should be first applied to obtain the posterior
+     * snapshot and then apply this diff in order to obtain this snapshot.
+     * If the posterior diff is null, the posterior state is the current state. 
+     */
+    private SnapshotDiff posteriorDiff;
+    /** The data of this diff. */
+    private final Diff diff = new Diff();
+    /** The snapshot version of the inode. */
+    private INode snapshotINode;
-  INodeDirectoryWithSnapshot(String name, INodeDirectory dir) {
-    super(name, dir.getPermissionStatus());
-    parent = dir;
+    SnapshotDiff(Snapshot snapshot, int size) {
+      if (size < 0) {
+        throw new HadoopIllegalArgumentException("size = " + size + " < 0");
+      }
+      this.snapshot = snapshot;
+      this.size = size;
+    }
+
+    @Override
+    public int compareTo(final Snapshot that_snapshot) {
+      return Snapshot.ID_COMPARATOR.compare(this.snapshot, that_snapshot);
+    }
+
+    /**
+     * @return The children list of a directory in a snapshot.
+     *         Since the snapshot is read-only, the logical view of the list is
+     *         never changed although the internal data structure may mutate.
+     */
+    ReadOnlyList<INode> getChildrenList() {
+      return new ReadOnlyList<INode>() {
+        private List<INode> children = null;
+
+        private List<INode> initChildren() {
+          if (children == null) {
+            final ReadOnlyList<INode> posterior = posteriorDiff != null?
+                posteriorDiff.getChildrenList()
+                : INodeDirectoryWithSnapshot.this.getChildrenList(null);
+            children = diff.apply2Current(ReadOnlyList.Util.asList(posterior));
+          }
+          return children;
+        }
+
+        @Override
+        public Iterator<INode> iterator() {
+          return initChildren().iterator();
+        }
+    
+        @Override
+        public boolean isEmpty() {
+          return size == 0;
+        }
+    
+        @Override
+        public int size() {
+          return size;
+        }
+    
+        @Override
+        public INode get(int i) {
+          return initChildren().get(i);
+        }
+      };
+    }
+    
+    INode getChild(byte[] name) {
+      final INode i = diff.accessPrevious(name, INode.DUMMY);
+      if (i != INode.DUMMY) {
+        // this diff is able to find it
+        return i; 
+      } else {
+        // should return the posterior INode.
+        return posteriorDiff != null? posteriorDiff.getChild(name)
+            : INodeDirectoryWithSnapshot.this.getChild(name, null);
+      }
+    }
+  }
+  
+  /** Replace the given directory to an {@link INodeDirectoryWithSnapshot}. */
+  public static INodeDirectoryWithSnapshot replaceDir(INodeDirectory oldDir,
+      Snapshot latestSnapshot) {
+    Preconditions.checkArgument(!(oldDir instanceof INodeDirectoryWithSnapshot),
+        "oldDir is already an INodeDirectoryWithSnapshot, oldDir=%s", oldDir);
+
+    final INodeDirectory parent = oldDir.getParent();
+    Preconditions.checkArgument(parent != null,
+        "parent is null, oldDir=%s", oldDir);
+
+    final INodeDirectoryWithSnapshot newDir = new INodeDirectoryWithSnapshot(
+        oldDir, latestSnapshot);
+    parent.replaceChild(newDir, null);
+    return newDir;
+  }
+  
+  /** Diff list sorted by snapshot IDs, i.e. in chronological order. */
+  private final List<SnapshotDiff> diffs = new ArrayList<SnapshotDiff>();
+
+  INodeDirectoryWithSnapshot(INodeDirectory that, Snapshot s) {
+    super(that);
+
+    // add a diff for the snapshot
+    addSnapshotDiff(s, that.getChildrenList(null).size());
+  }
+
+  INodeDirectoryWithSnapshot(String name, INodeDirectory dir, Snapshot s) {
+    this(dir, s);
+    setLocalName(name);
+    setParent(dir);
+  }
+  
+  SnapshotDiff addSnapshotDiff(Snapshot snapshot, int childrenSize) {
+    final SnapshotDiff d = new SnapshotDiff(snapshot, childrenSize); 
+    diffs.add(d);
+    return d;
+  }
+
+  /**
+   * Check if the latest snapshot diff exist.  If not, add it.
+   * @return the latest snapshot diff, which is never null.
+   */
+  private SnapshotDiff checkAndAddLatestSnapshotDiff(Snapshot latest) {
+    final SnapshotDiff last = getLastSnapshotDiff();
+    if (last != null && last.snapshot.equals(latest)) {
+      return last;
+    }
+
+    final int size = getChildrenList(null).size();
+    final SnapshotDiff d = addSnapshotDiff(latest, size);
+    if (last != null) {
+      last.posteriorDiff = d;
+    }
+    return d;
+  }
+  
+  Diff getLatestDiff(Snapshot latest) {
+    return checkAndAddLatestSnapshotDiff(latest).diff;
+  }
+
+  /**
+   * @return the diff corresponding to the snapshot.
+   *         When the diff is not found, it means that the current state and
+   *         the snapshot state are the same. 
+   */
+  SnapshotDiff getSnapshotDiff(Snapshot snapshot) {
+    if (snapshot == null) {
+      return null;
+    }
+    final int i = Collections.binarySearch(diffs, snapshot);
+    if (i >= 0) {
+      // exact match
+      return diffs.get(i);
+    } else {
+      // Exact match not found means that there were no changes between
+      // given snapshot and the next state so that the diff for the given
+      // snapshot is not recorded.  Thus, use the next state.
+      final int j = -i - 1;
+      return j < diffs.size()? diffs.get(j): null;
+    }
+  }
+  
+  SnapshotDiff getLastSnapshotDiff() {
+    return diffs.get(diffs.size() - 1);
+  }
+
+  @Override
+  public ReadOnlyList<INode> getChildrenList(Snapshot snapshot) {
+    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    if (diff != null) {
+      return diff.getChildrenList();
+    }
+    return super.getChildrenList(null);
+  }
+
+  @Override
+  public INode getChild(byte[] name, Snapshot snapshot) {
+    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    if (diff != null) {
+      return diff.getChild(name);
+    }
+    return super.getChild(name, null);
+  }
+  
+  @Override
+  public boolean addChild(INode inode, boolean setModTime,
+      Snapshot latestSnapshot) {
+    getLatestDiff(latestSnapshot).create(inode);
+    return super.addChild(inode, setModTime, null);
+  }
+
+  @Override
+  public INode removeChild(INode inode, Snapshot latestSnapshot) {
+    getLatestDiff(latestSnapshot).delete(inode);
+    return super.removeChild(inode, null);
+  }
+
+  @Override
+  public INode replaceChild(INodeDirectory newChild, Snapshot latestSnapshot) {
+    final INode oldChild = super.replaceChild(newChild, null);
+    final Diff diff = getLatestDiff(latestSnapshot);
+    diff.delete(oldChild);
+    diff.create(newChild);
+    return oldChild;
+  }
+
+  @Override
+  public long getModificationTime(Snapshot snapshot) {
+    final SnapshotDiff diff = getSnapshotDiff(snapshot);
+    if (diff != null) {
+      return diff.snapshotINode.getModificationTime();
+    }
+    return getModificationTime();

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS55 INS31 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 INS74 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS59 INS42 INS44 INS44 INS8 INS42 MOV44 MOV44 INS44 INS8 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS29 INS43 INS42 INS44 INS8 INS43 INS42 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS29 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS74 INS42 INS8 INS43 INS42 INS44 INS8 INS65 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS21 INS60 INS21 INS41 INS65 INS43 INS43 INS42 INS14 INS43 INS42 INS43 INS42 INS46 INS21 INS43 INS42 INS17 INS21 INS21 INS42 INS43 INS42 INS39 INS42 INS60 INS21 INS41 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS41 INS65 INS42 INS43 INS42 INS25 INS60 INS25 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS5 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS14 INS65 INS42 INS42 INS43 INS42 INS39 INS42 INS25 INS21 INS21 INS42 INS83 INS43 INS42 INS41 INS65 INS43 INS43 INS41 INS42 INS5 INS42 INS60 INS25 INS66 INS65 INS66 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS83 INS43 INS59 INS32 INS42 INS66 INS42 INS42 INS74 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS83 INS43 INS59 INS32 INS42 INS66 INS66 INS42 INS83 INS43 INS59 INS27 INS8 INS83 INS39 INS59 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS22 INS66 INS66 INS66 INS42 INS27 INS8 INS83 INS39 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS48 INS39 INS85 INS42 INS83 INS43 INS59 INS27 INS8 INS48 INS42 INS42 INS32 INS48 INS42 INS42 INS32 INS48 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS32 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS66 INS42 INS27 INS8 INS7 INS7 INS42 INS32 INS66 INS66 INS66 INS42 INS42 INS14 INS39 INS85 INS83 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS38 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS33 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS42 INS33 INS41 INS42 INS32 INS42 INS34 INS41 INS60 INS41 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS48 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS34 INS53 INS22 INS42 INS22 INS42 INS40 INS42 INS22 INS42 INS74 INS1 INS42 INS42 INS32 INS42 INS40 INS41 INS41 INS36 INS42 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS33 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS83 INS39 INS59 INS16 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS40 INS42 INS16 INS62 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS40 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS27 INS42 INS42 INS83 INS74 INS59 INS83 INS74 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS27 INS32 INS32 INS42 INS43 INS38 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS43 INS43 INS42 INS33 INS43 INS43 INS25 INS41 INS42 INS43 INS43 INS41 INS42 INS41 INS42 INS41 INS42 INS42 INS39 INS42 INS41 INS42 INS33 INS42 INS42 INS42 INS52 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS32 INS27 INS42 INS32 INS42 INS42 INS33 INS60 MOV21 INS32 INS42 INS42 INS34 INS32 INS42 INS42 INS83 INS74 INS59 INS42 INS42 INS43 INS43 INS42 INS16 UPD42 INS32 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS32 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS33 INS40 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL46 DEL8 DEL31