HDFS-11920. Ozone : add key partition. Contributed by Chen Liang.

-import org.apache.hadoop.hdfs.ozone.protocol.proto
-    .ContainerProtos.ChunkInfo;
-import org.apache.hadoop.hdfs.ozone.protocol.proto
-    .ContainerProtos.GetKeyResponseProto;
-import org.apache.hadoop.hdfs.ozone.protocol.proto
-    .ContainerProtos.KeyData;
+import org.apache.hadoop.ozone.io.OzoneOutputStream;
-import org.apache.hadoop.scm.container.common.helpers.Pipeline;
-import org.apache.hadoop.scm.XceiverClientSpi;
-import org.apache.hadoop.scm.storage.ChunkInputStream;
-import org.apache.hadoop.scm.storage.ChunkOutputStream;
-import org.apache.hadoop.scm.storage.ContainerProtocolCalls;
-import org.apache.hadoop.util.StringUtils;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.TimeZone;
-import java.util.Locale;
-                                       storageContainerLocation,
+          storageContainerLocation,
-                                       keySpaceManagerClient) {
+          keySpaceManagerClient) {
-          + " the maximum size ({}),"
-          + " resetting to the maximum size.",
+              + " the maximum size ({}),"
+              + " resetting to the maximum size.",
-                                   args.getQuota().sizeInBytes();
+        args.getQuota().sizeInBytes();
-    String containerKey = buildContainerKey(args.getVolumeName(),
-        args.getBucketName(), args.getKeyName());
-    // TODO the following createContainer and key writes may fail, in which
-    // case we should revert the above allocateKey to KSM.
-    String containerName = keyInfo.getContainerName();
-    XceiverClientSpi xceiverClient = getContainer(containerName);
-    if (keyInfo.getShouldCreateContainer()) {
-      LOG.debug("Need to create container {} for key: {}/{}/{}", containerName,
-          args.getVolumeName(), args.getBucketName(), args.getKeyName());
-      ContainerProtocolCalls.createContainer(
-          xceiverClient, args.getRequestID());
-    }
-    // establish a connection to the container to write the key
-    return new ChunkOutputStream(containerKey, args.getKeyName(),
-        xceiverClientManager, xceiverClient, args.getRequestID(), chunkSize);
+    ChunkGroupOutputStream groupOutputStream =
+        ChunkGroupOutputStream.getFromKsmKeyInfo(keyInfo, xceiverClientManager,
+            storageContainerLocationClient, chunkSize, args.getRequestID());
+    return new OzoneOutputStream(groupOutputStream);
-    String containerKey = buildContainerKey(args.getVolumeName(),
-        args.getBucketName(), args.getKeyName());
-    String containerName = keyInfo.getContainerName();
-    XceiverClientSpi xceiverClient = getContainer(containerName);
-    boolean success = false;
-    try {
-      LOG.debug("get key accessing {} {}",
-          xceiverClient.getPipeline().getContainerName(), containerKey);
-      KeyData containerKeyData = OzoneContainerTranslation
-          .containerKeyDataForRead(
-              xceiverClient.getPipeline().getContainerName(), containerKey);
-      GetKeyResponseProto response = ContainerProtocolCalls
-          .getKey(xceiverClient, containerKeyData, args.getRequestID());
-      long length = 0;
-      List<ChunkInfo> chunks = response.getKeyData().getChunksList();
-      for (ChunkInfo chunk : chunks) {
-        length += chunk.getLen();
-      }
-      success = true;
-      return new LengthInputStream(new ChunkInputStream(
-          containerKey, xceiverClientManager, xceiverClient,
-          chunks, args.getRequestID()), length);
-    } finally {
-      if (!success) {
-        xceiverClientManager.releaseClient(xceiverClient);
-      }
-    }
+    return ChunkGroupInputStream.getFromKsmKeyInfo(
+        keyInfo, xceiverClientManager, storageContainerLocationClient,
+        args.getRequestID());
-  private XceiverClientSpi getContainer(String containerName)
-      throws IOException {
-    Pipeline pipeline =
-        storageContainerLocationClient.getContainer(containerName);
-    return xceiverClientManager.acquireClient(pipeline);
-  }
-
-  /**
-   * Creates a container key from any number of components by combining all
-   * components with a delimiter.
-   *
-   * @param parts container key components
-   * @return container key
-   */
-  private static String buildContainerKey(String... parts) {
-    return '/' + StringUtils.join('/', parts);
-  }
-
-  /**
-   * Formats a date in the expected string format.
-   *
-   * @param date the date to format
-   * @return formatted string representation of date
-   */
-  private static String dateToString(Date date) {
-    SimpleDateFormat sdf =
-        new SimpleDateFormat(OzoneConsts.OZONE_DATE_FORMAT, Locale.US);
-    sdf.setTimeZone(TimeZone.getTimeZone(OzoneConsts.OZONE_TIME_ZONE));
-    return sdf.format(date);
-  }
-

MOV26 UPD40 INS8 INS60 MOV60 MOV60 MOV41 UPD43 MOV43 INS59 INS32 UPD42 INS42 INS32 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL13 DEL42 DEL42 DEL13 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31