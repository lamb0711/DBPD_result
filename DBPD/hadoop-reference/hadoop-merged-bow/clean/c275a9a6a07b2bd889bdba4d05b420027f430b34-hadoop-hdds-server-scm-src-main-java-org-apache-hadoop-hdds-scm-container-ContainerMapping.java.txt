Merge trunk into HDDS-48

+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.LifeCycleState;
+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.SCMContainerInfo;
+import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerWithPipeline;
+import org.apache.hadoop.hdds.scm.container.common.helpers.Pipeline;
+   * Returns the ContainerInfo from the container ID.
+   *
+   * @param containerID - ID of container.
+   * @return - ContainerWithPipeline such as creation state and the pipeline.
+   * @throws IOException
+   */
+  @Override
+  public ContainerWithPipeline getContainerWithPipeline(long containerID)
+      throws IOException {
+    ContainerInfo contInfo;
+    lock.lock();
+    try {
+      byte[] containerBytes = containerStore.get(
+          Longs.toByteArray(containerID));
+      if (containerBytes == null) {
+        throw new SCMException(
+            "Specified key does not exist. key : " + containerID,
+            SCMException.ResultCodes.FAILED_TO_FIND_CONTAINER);
+      }
+      HddsProtos.SCMContainerInfo temp = HddsProtos.SCMContainerInfo.PARSER
+          .parseFrom(containerBytes);
+      contInfo = ContainerInfo.fromProtobuf(temp);
+      Pipeline pipeline = pipelineSelector
+          .getPipeline(contInfo.getPipelineName(),
+              contInfo.getReplicationType());
+
+      if(pipeline == null) {
+        pipeline = pipelineSelector
+            .getReplicationPipeline(contInfo.getReplicationType(),
+                contInfo.getReplicationFactor());
+      }
+      return new ContainerWithPipeline(contInfo, pipeline);
+    } finally {
+      lock.unlock();
+    }
+  }
+
+  /**
-  public ContainerInfo allocateContainer(
+  public ContainerWithPipeline allocateContainer(
+    ContainerWithPipeline containerWithPipeline;
+
-      containerInfo =
-          containerStateManager.allocateContainer(
+      containerWithPipeline = containerStateManager.allocateContainer(
+      containerInfo = containerWithPipeline.getContainerInfo();
-    return containerInfo;
+    return containerWithPipeline;
+   * Return a container matching the attributes specified.
+   *
+   * @param size - Space needed in the Container.
+   * @param owner - Owner of the container - A specific nameservice.
+   * @param type - Replication Type {StandAlone, Ratis}
+   * @param factor - Replication Factor {ONE, THREE}
+   * @param state - State of the Container-- {Open, Allocated etc.}
+   * @return ContainerInfo, null if there is no match found.
+   */
+  public ContainerWithPipeline getMatchingContainerWithPipeline(final long size,
+      String owner, ReplicationType type, ReplicationFactor factor,
+      LifeCycleState state) throws IOException {
+    ContainerInfo containerInfo = getStateManager()
+        .getMatchingContainer(size, owner, type, factor, state);
+    if (containerInfo == null) {
+      return null;
+    }
+    Pipeline pipeline = pipelineSelector
+        .getPipeline(containerInfo.getPipelineName(),
+            containerInfo.getReplicationType());
+    if (pipeline == null) {
+      pipelineSelector
+          .getReplicationPipeline(containerInfo.getReplicationType(),
+              containerInfo.getReplicationFactor());
+    }
+    return new ContainerWithPipeline(containerInfo, pipeline);
+  }
+
+  /**
-              reconcileState(datanodeState, knownState);
+              reconcileState(datanodeState, knownState, datanodeDetails);
+          Pipeline pipeline = pipelineSelector.getPipeline(newState.getPipelineName(), newState.getReplicationType());
+          if(pipeline == null) {
+            pipeline = pipelineSelector
+                .getReplicationPipeline(newState.getReplicationType(),
+                    newState.getReplicationFactor());
+          }
-          if (closeContainerIfNeeded(newState)) {
+          if (closeContainerIfNeeded(newState, pipeline)) {
+   * @param dnDetails
-      HddsProtos.SCMContainerInfo knownState) {
+      SCMContainerInfo knownState, DatanodeDetails dnDetails) {
-    builder.setContainerID(knownState.getContainerID());
-    builder.setPipeline(knownState.getPipeline());
+    builder.setContainerID(knownState.getContainerID())
+        .setPipelineName(knownState.getPipelineName())
+        .setReplicationType(knownState.getReplicationType())
+        .setReplicationFactor(knownState.getReplicationFactor());
+
+    // TODO: If current state doesn't have this DN in list of DataNodes with replica
+    // then add it in list of replicas.
+
-    builder.setAllocatedBytes(allocated);
-    builder.setUsedBytes(usedSize);
-    builder.setNumberOfKeys(datanodeState.getKeyCount());
-    builder.setState(knownState.getState());
-    builder.setStateEnterTime(knownState.getStateEnterTime());
-    builder.setContainerID(knownState.getContainerID());
-    builder.setDeleteTransactionId(knownState.getDeleteTransactionId());
+    builder.setAllocatedBytes(allocated)
+        .setUsedBytes(usedSize)
+        .setNumberOfKeys(datanodeState.getKeyCount())
+        .setState(knownState.getState())
+        .setStateEnterTime(knownState.getStateEnterTime())
+        .setContainerID(knownState.getContainerID())
+        .setDeleteTransactionId(knownState.getDeleteTransactionId());
+   * @param pipeline
-  private boolean closeContainerIfNeeded(HddsProtos.SCMContainerInfo newState)
+  private boolean closeContainerIfNeeded(SCMContainerInfo newState,
+      Pipeline pipeline)
-      closer.close(newState);
+      closer.close(newState, pipeline);
-              .setPipeline(oldInfo.getPipeline())
+              .setPipelineName(oldInfo.getPipelineName())
+              .setReplicationFactor(oldInfo.getReplicationFactor())
+              .setReplicationType(oldInfo.getReplicationType())

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS44 INS44 INS65 INS65 INS65 INS65 INS42 INS42 INS39 INS42 INS42 INS60 INS21 INS54 INS42 INS60 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS25 INS41 INS65 UPD43 INS43 INS42 INS21 INS21 INS65 UPD43 INS43 INS42 INS66 INS42 INS66 INS66 INS42 MOV43 INS59 INS32 INS8 INS8 INS43 INS59 UPD42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS60 INS21 INS60 INS25 INS41 INS21 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS32 UPD42 MOV42 MOV32 INS32 MOV42 MOV32 INS5 INS59 INS27 INS8 MOV43 INS59 INS7 INS43 INS59 INS27 INS8 INS14 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS32 INS42 INS32 UPD42 MOV42 INS32 UPD42 INS32 UPD42 MOV42 INS32 INS39 INS85 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 MOV32 UPD42 MOV42 MOV32 INS42 INS42 INS32 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS14 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS43 INS27 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS25 INS32 MOV42 MOV32 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS43 INS43 INS59 INS27 INS8 MOV32 MOV42 MOV42 INS42 INS42 INS42 INS42 MOV40 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 DEL40 DEL42 DEL32 DEL21 DEL32 DEL21 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL32 DEL21 DEL32 DEL21 DEL21 DEL32 DEL21