HDFS-7678. Erasure coding: DFSInputStream with decode functionality (pread). Contributed by Zhe Zhang.

-import org.apache.hadoop.hdfs.protocol.*;
+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.protocol.LocatedBlock;
+import org.apache.hadoop.hdfs.protocol.LocatedStripedBlock;
-import static org.apache.hadoop.hdfs.util.StripedBlockUtil.ReadPortion;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.divideByteRangeIntoStripes;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.initDecodeInputs;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.decodeAndFillBuffer;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.getNextCompletedStripedRead;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.ReadPortion;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.AlignedStripe;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.StripingChunk;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.StripingChunkReadResult;
+
+import java.io.InterruptedIOException;
+import java.util.Collection;
-
+  private final ECSchema schema;
+    this.schema = schema;
-    LocatedBlock lb = super.getBlockAt(blkStartOffset);
-    assert lb instanceof LocatedStripedBlock : "NameNode should return a " +
-        "LocatedStripedBlock for a striped file";
+    LocatedBlock lb = getBlockGroupAt(blkStartOffset);
-    int idx = (int) (((blkStartOffset - lb.getStartOffset()) / cellSize)
-        % dataBlkNum);
+    int idx = (int) ((blkStartOffset - lb.getStartOffset())
+        % (dataBlkNum + parityBlkNum));
-    Map<Future<Void>, Integer> futures = new HashMap<>();
-    CompletionService<Void> stripedReadsService =
-        new ExecutorCompletionService<>(dfsClient.getStripedReadsThreadPool());
-    int len = (int) (end - start + 1);
-
+    AlignedStripe[] stripes = divideByteRangeIntoStripes(schema, blockGroup,
+        start, end, buf, offset);
+    for (AlignedStripe stripe : stripes) {
+      fetchOneStripe(blockGroup, buf, stripe, corruptedBlockMap);
+    }
+  }
-    // Planning the portion of I/O for each shard
-    ReadPortion[] readPortions = planReadPortions(dataBlkNum, cellSize, start,
-        len, offset);
-
+  private void fetchOneStripe(LocatedStripedBlock blockGroup,
+      byte[] buf, AlignedStripe alignedStripe, Map<ExtendedBlock,
+      Set<DatanodeInfo>> corruptedBlockMap) throws IOException {
+    Map<Future<Void>, Integer> futures = new HashMap<>();
+    CompletionService<Void> service =
+        new ExecutorCompletionService<>(dfsClient.getStripedReadsThreadPool());
+    if (alignedStripe.getSpanInBlock() == 0) {
+      DFSClient.LOG.warn("Trying to read an empty stripe from" + blockGroup);
+      return;
+    }
-
-      ReadPortion rp = readPortions[i];
-      if (rp.getReadLength() <= 0) {
-        continue;
+      if (alignedStripe.chunks[i] != null
+          && alignedStripe.chunks[i].state != StripingChunk.ALLZERO) {
+        fetchOneStripingChunk(futures, service, blks[i], alignedStripe, i,
+            corruptedBlockMap);
-      DatanodeInfo loc = blks[i].getLocations()[0];
-      StorageType type = blks[i].getStorageTypes()[0];
-      DNAddrPair dnAddr = new DNAddrPair(loc, NetUtils.createSocketAddr(
-          loc.getXferAddr(dfsClient.getConf().isConnectToDnViaHostname())),
-          type);
-      Callable<Void> readCallable = getFromOneDataNode(dnAddr,
-          blks[i].getStartOffset(), rp.getStartOffsetInBlock(),
-          rp.getStartOffsetInBlock() + rp.getReadLength() - 1, buf,
-          rp.getOffsets(), rp.getLengths(), corruptedBlockMap, i);
-      Future<Void> getFromDNRequest = stripedReadsService.submit(readCallable);
-      DFSClient.LOG.debug("Submitting striped read request for " + blks[i]);
-      futures.put(getFromDNRequest, (int) i);
+    // Input buffers for potential decode operation, which remains null until
+    // first read failure
+    byte[][] decodeInputs = null;
-        waitNextCompletion(stripedReadsService, futures);
+        StripingChunkReadResult r = getNextCompletedStripedRead(
+            service, futures, 0);
+        if (DFSClient.LOG.isDebugEnabled()) {
+          DFSClient.LOG.debug("Read task returned: " + r + ", for stripe " + alignedStripe);
+        }
+        StripingChunk returnedChunk = alignedStripe.chunks[r.index];
+        Preconditions.checkNotNull(returnedChunk);
+        Preconditions.checkState(returnedChunk.state == StripingChunk.PENDING);
+        if (r.state == StripingChunkReadResult.SUCCESSFUL) {
+          returnedChunk.state = StripingChunk.FETCHED;
+          alignedStripe.fetchedChunksNum++;
+          if (alignedStripe.fetchedChunksNum == dataBlkNum) {
+            clearFutures(futures.keySet());
+            break;
+          }
+        } else {
+          returnedChunk.state = StripingChunk.MISSING;
+          alignedStripe.missingChunksNum++;
+          if (alignedStripe.missingChunksNum > parityBlkNum) {
+            clearFutures(futures.keySet());
+            throw new IOException("Too many blocks are missing: " + alignedStripe);
+          }
+          // When seeing first missing block, initialize decode input buffers
+          if (decodeInputs == null) {
+            decodeInputs = initDecodeInputs(alignedStripe, dataBlkNum, parityBlkNum);
+          }
+          for (int i = 0; i < alignedStripe.chunks.length; i++) {
+            StripingChunk chunk = alignedStripe.chunks[i];
+            Preconditions.checkNotNull(chunk);
+            if (chunk.state == StripingChunk.REQUESTED && i <= dataBlkNum) {
+              fetchOneStripingChunk(futures, service, blks[i], alignedStripe, i,
+                  corruptedBlockMap);
+            }
+          }
+        }
-        // Ignore and retry
+        String err = "Read request interrupted";
+        DFSClient.LOG.error(err);
+        clearFutures(futures.keySet());
+        // Don't decode if read interrupted
+        throw new InterruptedIOException(err);
+
+    if (alignedStripe.missingChunksNum > 0) {
+      decodeAndFillBuffer(decodeInputs, buf, alignedStripe,
+          dataBlkNum, parityBlkNum);
+    }
+  }
+
+  /**
+   * Schedule a single read request to an internal block
+   * @param block The internal block
+   * @param index Index of the internal block in the group
+   * @param corruptedBlockMap Map of corrupted blocks
+   */
+  private void fetchOneStripingChunk(Map<Future<Void>, Integer> futures,
+      final CompletionService<Void> service, final LocatedBlock block,
+      final AlignedStripe alignedStripe, final int index,
+      Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap) {
+    DatanodeInfo loc = block.getLocations()[0];
+    StorageType type = block.getStorageTypes()[0];
+    DNAddrPair dnAddr = new DNAddrPair(loc, NetUtils.createSocketAddr(
+        loc.getXferAddr(dfsClient.getConf().isConnectToDnViaHostname())),
+        type);
+    StripingChunk chunk = alignedStripe.chunks[index];
+    chunk.state = StripingChunk.PENDING;
+    Callable<Void> readCallable = getFromOneDataNode(dnAddr,
+        block.getStartOffset(), alignedStripe.getOffsetInBlock(),
+        alignedStripe.getOffsetInBlock() + alignedStripe.getSpanInBlock() - 1, chunk.buf,
+        chunk.getOffsets(), chunk.getLengths(),
+        corruptedBlockMap, index);
+    Future<Void> getFromDNRequest = service.submit(readCallable);
+    if (DFSClient.LOG.isDebugEnabled()) {
+      DFSClient.LOG.debug("Submitting striped read request for " + index +
+          ". Info of the block: " + block + ", offset in block is " +
+          alignedStripe.getOffsetInBlock() + ", end is " +
+          (alignedStripe.getOffsetInBlock() + alignedStripe.getSpanInBlock() - 1));
+    }
+    futures.put(getFromDNRequest, index);
+
+  /** A variation to {@link DFSInputStream#cancelAll} */
+  private void clearFutures(Collection<Future<Void>> futures) {
+    for (Future<Void> future : futures) {
+      future.cancel(false);
+    }
+    futures.clear();
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 MOV29 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS21 MOV60 MOV60 INS70 MOV43 INS42 INS5 INS42 INS43 INS42 INS74 INS42 UPD42 MOV42 MOV60 MOV60 INS25 MOV60 INS24 INS60 INS61 INS25 INS65 INS65 INS65 INS65 INS74 INS42 INS83 INS74 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS74 INS42 MOV60 MOV60 MOV60 INS60 INS21 MOV60 MOV60 INS25 MOV21 INS65 INS74 INS42 INS70 INS21 INS7 INS5 INS44 INS42 INS8 INS39 INS85 INS42 INS43 INS43 INS74 INS27 INS8 MOV58 MOV27 MOV37 INS8 INS5 INS59 MOV38 INS8 INS27 MOV8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS74 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS74 INS43 INS59 INS7 INS32 INS8 INS66 INS65 INS66 INS43 INS74 INS44 INS42 INS8 INS32 INS22 INS42 INS32 INS43 INS85 UPD42 INS32 INS43 INS42 INS21 INS42 INS42 INS43 INS43 UPD42 INS32 INS34 INS21 INS41 INS25 INS39 MOV85 INS85 INS42 INS33 INS54 INS40 MOV34 INS21 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS2 INS40 INS40 INS40 INS42 MOV21 INS42 INS67 INS42 INS43 INS43 INS74 INS42 MOV21 INS42 INS42 INS52 INS42 INS42 INS42 MOV36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS8 INS12 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS40 UPD42 UPD42 INS42 INS42 INS42 INS42 INS43 INS43 UPD27 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS27 INS27 INS21 INS60 INS25 INS60 INS21 INS21 INS25 MOV44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS9 INS36 INS45 INS42 INS2 INS33 INS22 INS40 INS32 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS32 INS27 INS8 INS8 INS60 INS21 INS21 INS53 INS42 INS45 INS42 INS45 INS32 INS45 INS36 INS27 INS40 INS42 INS2 INS42 INS42 INS42 INS42 MOV2 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS21 INS42 INS42 INS2 INS42 INS42 INS42 UPD42 MOV42 INS42 INS27 INS40 INS40 INS21 INS21 INS25 INS21 INS21 INS25 INS25 INS24 INS43 INS59 INS32 INS32 INS14 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS27 UPD42 MOV42 INS42 INS40 INS42 INS42 INS42 INS42 INS34 INS32 INS40 INS40 INS40 INS40 INS7 INS37 INS27 INS8 INS7 INS37 INS27 INS8 INS27 INS8 INS58 INS27 INS37 INS8 INS42 INS42 INS45 INS40 INS42 INS42 INS42 INS32 INS43 INS42 INS27 INS34 INS40 INS42 INS27 INS40 INS40 INS40 INS40 INS42 INS21 INS10 INS40 INS40 INS40 INS40 INS42 INS21 INS53 INS42 INS33 INS21 INS39 INS59 INS42 INS40 INS42 MOV60 INS21 INS25 INS42 INS42 INS42 INS32 INS32 INS45 INS42 INS45 INS42 INS32 INS32 INS14 INS7 INS42 INS34 UPD43 INS32 INS27 INS8 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS32 INS43 INS27 INS42 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS27 INS21 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS42 MOV32 MOV2 UPD42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL48 DEL42 DEL62 DEL45 DEL45 DEL27 DEL6 DEL42 DEL27 DEL36 DEL39 DEL39 DEL42 DEL42 DEL27 DEL34 DEL27 DEL36 DEL11 DEL42 DEL18 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL39 DEL42 DEL11 DEL43 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL27 DEL25 DEL8 DEL24 DEL8 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL31 DEL42