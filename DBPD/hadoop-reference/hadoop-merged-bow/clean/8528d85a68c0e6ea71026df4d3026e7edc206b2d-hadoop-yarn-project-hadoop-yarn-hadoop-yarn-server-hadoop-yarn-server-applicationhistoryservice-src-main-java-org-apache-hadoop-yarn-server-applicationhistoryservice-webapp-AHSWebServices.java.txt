YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.

+import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.List;
+import javax.ws.rs.core.GenericEntity;
-import org.apache.commons.math3.util.Pair;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogMeta;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogType;
+import org.apache.hadoop.yarn.logaggregation.LogToolUtils;
-import org.apache.hadoop.yarn.logaggregation.AggregatedLogFormat.LogReader;
+import org.apache.hadoop.yarn.webapp.NotFoundException;
-    } catch (Exception e) {
+    } catch (IllegalArgumentException e) {
-      return getContainerLogMeta(appId, null, null, containerIdStr);
+      return getContainerLogMeta(appId, null, null, containerIdStr, false);
-    String appOwner = appInfo.getUser();
-    ContainerInfo containerInfo;
-    try {
-      containerInfo = super.getContainer(
-          req, res, appId.toString(),
-          containerId.getApplicationAttemptId().toString(),
-          containerId.toString());
-    } catch (Exception ex) {
-      if (isFinishedState(appInfo.getAppState())) {
-        // directly find logs from HDFS.
-        return getContainerLogMeta(appId, appOwner, null, containerIdStr);
-      }
-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,
-          "Can not get ContainerInfo for the container: " + containerId);
+    // if the application finishes, directly find logs
+    // from HDFS.
+    if (isFinishedState(appInfo.getAppState())) {
+      return getContainerLogMeta(appId, null, null,
+          containerIdStr, false);
-    String nodeId = containerInfo.getNodeId();
+      String appOwner = appInfo.getUser();
+      ContainerInfo containerInfo;
+      try {
+        containerInfo = super.getContainer(
+            req, res, appId.toString(),
+            containerId.getApplicationAttemptId().toString(),
+            containerId.toString());
+      } catch (Exception ex) {
+        // return log meta for the aggregated logs if exists.
+        // It will also return empty log meta for the local logs.
+        return getContainerLogMeta(appId, appOwner, null,
+            containerIdStr, true);
+      }
-    } else if (isFinishedState(appInfo.getAppState())) {
-      return getContainerLogMeta(appId, appOwner, nodeId,
-              containerIdStr);
-      return createBadResponse(Status.NOT_FOUND,
+      throw new NotFoundException(
-      final String nodeId, final String containerIdStr) {
-    Map<String, String> containerLogMeta = new HashMap<>();
+      final String nodeId, final String containerIdStr,
+      boolean emptyLocalContainerLogMeta) {
-      String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);
-      org.apache.hadoop.fs.Path remoteRootLogDir =
-          new org.apache.hadoop.fs.Path(conf.get(
-              YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
-              YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
-      org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir =
-          FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);
-      FileContext fc = FileContext.getFileContext(
-          qualifiedRemoteRootLogDir.toUri(), conf);
-      org.apache.hadoop.fs.Path remoteAppDir = null;
-      if (appOwner == null) {
-        org.apache.hadoop.fs.Path toMatch = LogAggregationUtils
-            .getRemoteAppLogDir(remoteRootLogDir, appId, "*", suffix);
-        FileStatus[] matching  = fc.util().globStatus(toMatch);
-        if (matching == null || matching.length != 1) {
-          return createBadResponse(Status.INTERNAL_SERVER_ERROR,
-              "Can not get log meta for container: " + containerIdStr);
-        }
-        remoteAppDir = matching[0].getPath();
-      } else {
-        remoteAppDir = LogAggregationUtils.getRemoteAppLogDir(
-            remoteRootLogDir, appId, appOwner, suffix);
-      }
-      final RemoteIterator<FileStatus> nodeFiles;
-      nodeFiles = fc.listStatus(remoteAppDir);
-      if (!nodeFiles.hasNext()) {
+      List<ContainerLogMeta> containerLogMeta = LogToolUtils
+          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,
+              nodeId, appOwner);
+      if (containerLogMeta.isEmpty()) {
-      String nodeIdStr = (nodeId == null) ? null
-          : LogAggregationUtils.getNodeString(nodeId);
-      while (nodeFiles.hasNext()) {
-        FileStatus thisNodeFile = nodeFiles.next();
-        if (nodeIdStr != null) {
-          if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
-            continue;
-          }
-        }
-        if (!thisNodeFile.getPath().getName().endsWith(
-            LogAggregationUtils.TMP_FILE_SUFFIX)) {
-          AggregatedLogFormat.LogReader reader =
-              new AggregatedLogFormat.LogReader(conf,
-                  thisNodeFile.getPath());
-          try {
-            DataInputStream valueStream;
-            LogKey key = new LogKey();
-            valueStream = reader.next(key);
-            while (valueStream != null) {
-              if (key.toString().equals(containerIdStr)) {
-                while (true) {
-                  try {
-                    Pair<String, String> logMeta =
-                        LogReader.readContainerMetaDataAndSkipData(
-                            valueStream, null);
-                    containerLogMeta.put(logMeta.getFirst(),
-                        logMeta.getSecond());
-                  } catch (EOFException eof) {
-                    break;
-                  }
-                }
-                break;
-              }
-              // Next container
-              key = new LogKey();
-              valueStream = reader.next(key);
-            }
-          } finally {
-            reader.close();
-          }
-        }
+      List<ContainerLogsInfo> containersLogsInfo = new ArrayList<>();
+      for (ContainerLogMeta meta : containerLogMeta) {
+        ContainerLogsInfo logInfo = new ContainerLogsInfo(meta,
+            ContainerLogType.AGGREGATED);
+        containersLogsInfo.add(logInfo);
-      ResponseBuilder response = Response.ok(new ContainerLogsInfo(
-          containerLogMeta));
+      if (emptyLocalContainerLogMeta) {
+        ContainerLogMeta emptyMeta = new ContainerLogMeta(
+            containerIdStr, "N/A");
+        ContainerLogsInfo empty = new ContainerLogsInfo(emptyMeta,
+            ContainerLogType.LOCAL);
+        containersLogsInfo.add(empty);
+      }
+      GenericEntity<List<ContainerLogsInfo>> meta = new GenericEntity<List<
+          ContainerLogsInfo>>(containersLogsInfo){};
+      ResponseBuilder response = Response.ok(meta);
-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,
-          ex.getMessage());
+      throw new WebApplicationException(ex);

MOV26 MOV26 MOV26 INS26 INS26 INS26 UPD40 UPD40 INS40 UPD40 INS40 UPD40 INS40 INS44 INS8 INS25 INS39 INS42 MOV54 MOV32 INS8 MOV8 INS41 MOV60 MOV60 MOV54 INS53 INS60 MOV25 INS70 INS25 INS60 INS60 UPD43 INS32 INS14 INS74 INS59 INS32 UPD74 INS44 INS42 INS8 INS42 INS8 UPD74 MOV74 INS59 MOV43 INS59 INS53 UPD42 INS42 INS42 INS33 INS33 UPD42 MOV42 INS9 INS8 INS43 INS45 INS43 INS43 INS42 INS32 INS42 INS42 UPD43 UPD43 UPD42 INS14 INS43 INS42 MOV60 INS21 MOV60 MOV60 MOV21 UPD43 INS74 UPD42 MOV42 INS14 INS42 INS32 INS14 INS9 MOV41 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 MOV42 UPD42 UPD42 INS74 UPD42 MOV42 UPD43 INS32 UPD43 INS43 INS32 UPD42 UPD43 MOV43 UPD43 MOV43 INS74 INS42 INS1 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS43 UPD42 UPD42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 UPD42 MOV14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS43 INS74 INS42 INS9 INS42 INS43 INS42 INS40 UPD43 INS42 INS45 UPD42 INS40 INS42 INS43 INS43 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL40 DEL45 DEL42 DEL27 DEL32 DEL41 DEL8 DEL42 DEL40 DEL45 DEL32 DEL41 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL40 DEL40 DEL32 DEL14 DEL59 DEL60 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL40 DEL45 DEL42 DEL27 DEL32 DEL41 DEL8 DEL25 DEL43 DEL42 DEL42 DEL33 DEL27 DEL36 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL32 DEL32 DEL42 DEL42 DEL32 DEL38 DEL18 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL32 DEL38 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL9 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL10 DEL8 DEL12 DEL54 DEL8 DEL61 DEL10 DEL8 DEL25 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL61 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL41 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL8