HDFS-6930. Improve replica eviction from RAM disk. (Arpit Agarwal)

+   * Stale entries are GC'd by dequeueNextReplicaToPersist.
-   * A map of blockId to persist complete time for transient blocks. This allows
-   * us to evict LRU blocks from transient storage. Protected by 'this'
-   * Object lock.
+   * Queue of replicas in the order in which they were persisted.
+   * We'll dequeue them in the same order.
+   * We can improve the eviction scheme later.
+   * Stale entries are GC'd by getNextCandidateForEviction.
-  final Map<ReplicaState, Long> replicasPersisted;
+  final Queue<ReplicaState> replicasPersisted;
-    replicasPersisted = new HashMap<ReplicaState, Long>();
-  }
-
-  TreeMultimap<Long, ReplicaState> getLruMap() {
-    // TODO: This can be made more efficient.
-    TreeMultimap<Long, ReplicaState> reversedMap = TreeMultimap.create();
-    for (Map.Entry<ReplicaState, Long> entry : replicasPersisted.entrySet()) {
-      reversedMap.put(entry.getValue(), entry.getKey());
-    }
-    return reversedMap;
+    replicasPersisted = new LinkedList<ReplicaState>();
-    replicasPersisted.put(replicaState, System.currentTimeMillis() / 1000);
+
+    replicasPersisted.add(replicaState);
-  synchronized void reenqueueReplica(final ReplicaState replicaState) {
+  synchronized void reenqueueReplicaNotPersisted(final ReplicaState replicaState) {
+  synchronized void reenqueueReplicaPersisted(final ReplicaState replicaState) {
+    replicasPersisted.add(replicaState);
+  }
+
+  synchronized ReplicaState getNextCandidateForEviction() {
+    while (replicasPersisted.size() != 0) {
+      ReplicaState replicaState = replicasPersisted.remove();
+      Map<Long, ReplicaState> replicaMap = replicaMaps.get(replicaState.bpid);
+
+      if (replicaMap != null && replicaMap.get(replicaState.blockId) != null) {
+        return replicaState;
+      }
+
+      // The replica no longer exists, look for the next one.
+    }
+    return null;
+  }
+
+  void discardReplica(ReplicaState replicaState, boolean force) {
+    discardReplica(replicaState.bpid, replicaState.blockId, force);
+  }
+
-    replicasPersisted.remove(replicaState);
-
-    // Leave the replica in replicasNotPersisted if its present.
-    // dequeueNextReplicaToPersist will GC it eventually.

INS23 INS31 INS31 INS31 MOV29 MOV83 INS74 MOV59 UPD42 INS83 INS39 INS42 INS44 INS8 INS83 MOV43 INS42 INS8 INS39 INS42 INS44 INS44 INS8 UPD43 MOV43 UPD43 MOV43 INS83 INS43 INS42 INS21 INS61 INS41 MOV43 INS42 INS39 INS42 INS21 INS66 UPD66 INS66 UPD66 UPD66 UPD42 UPD42 UPD42 MOV42 INS32 INS27 INS8 INS33 INS32 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS34 INS60 INS60 INS25 INS42 INS40 INS40 INS42 UPD74 MOV43 INS42 INS42 MOV43 INS59 UPD74 MOV74 MOV43 INS59 INS27 INS8 UPD43 INS42 INS32 INS42 INS32 INS27 INS27 MOV41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS33 INS32 INS33 UPD42 UPD42 MOV42 UPD42 MOV42 INS40 DEL23 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21