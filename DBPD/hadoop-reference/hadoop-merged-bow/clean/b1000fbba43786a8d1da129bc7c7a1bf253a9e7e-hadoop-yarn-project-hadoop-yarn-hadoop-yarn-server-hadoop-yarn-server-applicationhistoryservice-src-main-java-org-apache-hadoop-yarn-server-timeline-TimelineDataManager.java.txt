Merge branch 'trunk' into HDFS-6581

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java

+import org.apache.hadoop.yarn.api.records.timeline.TimelineDomain;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineDomains;
+  /**
+   * Add or update an domain. If the domain already exists, only the owner
+   * and the admin can update it.
+   */
+  public void putDomain(TimelineDomain domain,
+      UserGroupInformation callerUGI) throws YarnException, IOException {
+    TimelineDomain existingDomain =
+        store.getDomain(domain.getId());
+    if (existingDomain != null) {
+      if (!timelineACLsManager.checkAccess(callerUGI, existingDomain)) {
+        throw new YarnException(callerUGI.getShortUserName() +
+            " is not allowed to override an existing domain " +
+            existingDomain.getId());
+      }
+      // Set it again in case ACLs are not enabled: The domain can be
+      // modified by every body, but the owner is not changed.
+      domain.setOwner(existingDomain.getOwner());
+    }
+    store.put(domain);
+  }
+
+  /**
+   * Get a single domain of the particular ID. If callerUGI is not the owner
+   * or the admin of the domain, we need to hide the details from him, and
+   * only allow him to see the ID.
+   */
+  public TimelineDomain getDomain(String domainId,
+      UserGroupInformation callerUGI) throws YarnException, IOException {
+    TimelineDomain domain = store.getDomain(domainId);
+    if (domain != null) {
+      if (timelineACLsManager.checkAccess(callerUGI, domain)) {
+        return domain;
+      } else {
+        hideDomainDetails(domain);
+        return domain;
+      }
+    }
+    return null;
+  }
+
+  /**
+   * Get all the domains that belong to the given owner. If callerUGI is not
+   * the owner or the admin of the domain, we need to hide the details from
+   * him, and only allow him to see the ID.
+   */
+  public TimelineDomains getDomains(String owner,
+      UserGroupInformation callerUGI) throws YarnException, IOException {
+    TimelineDomains domains = store.getDomains(owner);
+    boolean hasAccess = true;
+    boolean isChecked = false;
+    for (TimelineDomain domain : domains.getDomains()) {
+      // The owner for each domain is the same, just need to check on
+      if (!isChecked) {
+        hasAccess = timelineACLsManager.checkAccess(callerUGI, domain);
+        isChecked = true;
+      }
+      if (!hasAccess) {
+        hideDomainDetails(domain);
+      }
+    }
+    return domains;
+  }
+
+  private static void hideDomainDetails(TimelineDomain domain) {
+    domain.setDescription(null);
+    domain.setOwner(null);
+    domain.setReaders(null);
+    domain.setWriters(null);
+    domain.setCreatedTime(null);
+    domain.setModifiedTime(null);
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS21 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS70 INS41 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS66 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS33 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS44 INS32 INS8 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS42 INS9 INS42 INS9 INS43 INS42 INS42 INS42 INS25 INS25 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS32 INS38 INS8 INS32 INS42 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS38 INS8 INS38 INS8 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS21 INS41 INS42 INS21 INS21 INS42 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS7 INS7 INS32 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42