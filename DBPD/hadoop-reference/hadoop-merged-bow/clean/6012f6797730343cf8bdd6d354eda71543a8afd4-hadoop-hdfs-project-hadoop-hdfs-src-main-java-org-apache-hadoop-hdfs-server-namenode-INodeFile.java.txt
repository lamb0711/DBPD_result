svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802 for merging HDFS Snapshot feature branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480838 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.PrintWriter;
+import java.util.List;
-import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.protocol.QuotaExceededException;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileDiffList;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot.FileDiff;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot.Util;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot;
+
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
-public class INodeFile extends INode implements BlockCollection {
-  /** Cast INode to INodeFile. */
+public class INodeFile extends INodeWithAdditionalFields implements BlockCollection {
+  /** The same as valueOf(inode, path, false). */
+    return valueOf(inode, path, false);
+  }
+
+  /** Cast INode to INodeFile. */
+  public static INodeFile valueOf(INode inode, String path, boolean acceptNull)
+      throws FileNotFoundException {
-      throw new FileNotFoundException("File does not exist: " + path);
+      if (acceptNull) {
+        return null;
+      } else {
+        throw new FileNotFoundException("File does not exist: " + path);
+      }
-    if (!(inode instanceof INodeFile)) {
+    if (!inode.isFile()) {
-    return (INodeFile)inode;
+    return inode.asFile();
-  INodeFile(long id, PermissionStatus permissions, BlockInfo[] blklist,
-      short replication, long modificationTime, long atime,
-      long preferredBlockSize) {
-    super(id, permissions, modificationTime, atime);
+  INodeFile(long id, byte[] name, PermissionStatus permissions, long mtime, long atime,
+      BlockInfo[] blklist, short replication, long preferredBlockSize) {
+    super(id, name, permissions, mtime, atime);
+  public INodeFile(INodeFile that) {
+    super(that);
+    this.header = that.header;
+    this.blocks = that.blocks;
+  }
+
-  /** @return the replication factor of the file. */
+  /** @return this object. */
-  public short getBlockReplication() {
+  public final INodeFile asFile() {
+    return this;
+  }
+
+  /** Is this file under construction? */
+  public boolean isUnderConstruction() {
+    return false;
+  }
+
+  /** Convert this file to an {@link INodeFileUnderConstruction}. */
+  public INodeFileUnderConstruction toUnderConstruction(
+      String clientName,
+      String clientMachine,
+      DatanodeDescriptor clientNode) {
+    Preconditions.checkState(!isUnderConstruction(),
+        "file is already an INodeFileUnderConstruction");
+    return new INodeFileUnderConstruction(this,
+        clientName, clientMachine, clientNode); 
+  }
+
+  @Override
+  public INodeFile getSnapshotINode(final Snapshot snapshot) {
+    return this;
+  }
+
+  @Override
+  public INodeFile recordModification(final Snapshot latest,
+      final INodeMap inodeMap) throws QuotaExceededException {
+    if (isInLatestSnapshot(latest)) {
+      INodeFileWithSnapshot newFile = getParent()
+          .replaceChild4INodeFileWithSnapshot(this, inodeMap)
+          .recordModification(latest, inodeMap);
+      return newFile;
+    } else {
+      return this;
+    }
+  }
+
+  /** @return the replication factor of the file. */
+  public final short getFileReplication(Snapshot snapshot) {
+    if (snapshot != null) {
+      return getSnapshotINode(snapshot).getFileReplication();
+    }
+
-  void setReplication(short replication) {
+  /** The same as getFileReplication(null). */
+  public final short getFileReplication() {
+    return getFileReplication(null);
+  }
+
+  @Override
+  public final short getBlockReplication() {
+    return this instanceof FileWithSnapshot?
+        Util.getBlockReplication((FileWithSnapshot)this)
+        : getFileReplication(null);
+  }
+
+  /** Set the replication factor of this file. */
+  public final void setFileReplication(short replication) {
+  /** Set the replication factor of this file. */
+  public final INodeFile setFileReplication(short replication, Snapshot latest,
+      final INodeMap inodeMap) throws QuotaExceededException {
+    final INodeFile nodeToUpdate = recordModification(latest, inodeMap);
+    nodeToUpdate.setFileReplication(replication);
+    return nodeToUpdate;
+  }
+
+  /** @return the diskspace required for a full block. */
+  final long getBlockDiskspace() {
+    return getPreferredBlockSize() * getBlockReplication();
+  }
+
+  void updateBlockCollection() {
+    if (blocks != null) {
+      for(BlockInfo b : blocks) {
+        b.setBlockCollection(this);
+      }
+    }
+  }
+
-  void appendBlocks(INodeFile [] inodes, int totalAddedBlocks) {
+  void concatBlocks(INodeFile[] inodes) {
+    int totalAddedBlocks = 0;
+    for(INodeFile f : inodes) {
+      totalAddedBlocks += f.blocks.length;
+    }
-    
-    for(BlockInfo bi: newlist) {
-      bi.setBlockCollection(this);
-    }
+
+    updateBlockCollection();
-  int collectSubtreeBlocksAndClear(BlocksMapUpdateInfo info) {
-    parent = null;
-    if(blocks != null && info != null) {
+  public Quota.Counts cleanSubtree(final Snapshot snapshot, Snapshot prior,
+      final BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
+      throws QuotaExceededException {
+    Quota.Counts counts = Quota.Counts.newInstance();
+    if (snapshot == null && prior == null) {   
+      // this only happens when deleting the current file
+      computeQuotaUsage(counts, false);
+      destroyAndCollectBlocks(collectedBlocks, removedINodes);
+    }
+    return counts;
+  }
+
+  @Override
+  public void destroyAndCollectBlocks(BlocksMapUpdateInfo collectedBlocks,
+      final List<INode> removedINodes) {
+    if (blocks != null && collectedBlocks != null) {
-        info.addDeleteBlock(blk);
+        collectedBlocks.addDeleteBlock(blk);
-    return 1;
+    clear();
+    removedINodes.add(this);
+    
+    if (this instanceof FileWithSnapshot) {
+      ((FileWithSnapshot) this).getDiffs().clear();
+    }
-
-  long[] computeContentSummary(long[] summary) {
-    summary[0] += computeFileSize(true);
-    summary[1]++;
-    summary[3] += diskspaceConsumed();
-    return summary;
+  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,
+      boolean useCache, int lastSnapshotId) {
+    long nsDelta = 1;
+    final long dsDelta;
+    if (this instanceof FileWithSnapshot) {
+      FileDiffList fileDiffList = ((FileWithSnapshot) this).getDiffs();
+      Snapshot last = fileDiffList.getLastSnapshot();
+      List<FileDiff> diffs = fileDiffList.asList();
+
+      if (lastSnapshotId == Snapshot.INVALID_ID || last == null) {
+        nsDelta += diffs.size();
+        dsDelta = diskspaceConsumed();
+      } else if (last.getId() < lastSnapshotId) {
+        dsDelta = computeFileSize(true, false) * getFileReplication();
+      } else {      
+        Snapshot s = fileDiffList.getSnapshotById(lastSnapshotId);
+        dsDelta = diskspaceConsumed(s);
+      }
+    } else {
+      dsDelta = diskspaceConsumed();
+    }
+    counts.add(Quota.NAMESPACE, nsDelta);
+    counts.add(Quota.DISKSPACE, dsDelta);
+    return counts;
-  /** Compute file size.
-   * May or may not include BlockInfoUnderConstruction.
+  @Override
+  public final Content.Counts computeContentSummary(
+      final Content.Counts counts) {
+    computeContentSummary4Snapshot(counts);
+    computeContentSummary4Current(counts);
+    return counts;
+  }
+
+  private void computeContentSummary4Snapshot(final Content.Counts counts) {
+    // file length and diskspace only counted for the latest state of the file
+    // i.e. either the current state or the last snapshot
+    if (this instanceof FileWithSnapshot) {
+      final FileWithSnapshot withSnapshot = (FileWithSnapshot)this;
+      final FileDiffList diffs = withSnapshot.getDiffs();
+      final int n = diffs.asList().size();
+      counts.add(Content.FILE, n);
+      if (n > 0 && withSnapshot.isCurrentFileDeleted()) {
+        counts.add(Content.LENGTH, diffs.getLast().getFileSize());
+      }
+
+      if (withSnapshot.isCurrentFileDeleted()) {
+        final long lastFileSize = diffs.getLast().getFileSize();
+        counts.add(Content.DISKSPACE, lastFileSize * getBlockReplication());
+      }
+    }
+  }
+
+  private void computeContentSummary4Current(final Content.Counts counts) {
+    if (this instanceof FileWithSnapshot
+        && ((FileWithSnapshot)this).isCurrentFileDeleted()) {
+      return;
+    }
+
+    counts.add(Content.LENGTH, computeFileSize());
+    counts.add(Content.FILE, 1);
+    counts.add(Content.DISKSPACE, diskspaceConsumed());
+  }
+
+  /** The same as computeFileSize(null). */
+  public final long computeFileSize() {
+    return computeFileSize(null);
+  }
+
+  /**
+   * Compute file size of the current file if the given snapshot is null;
+   * otherwise, get the file size from the given snapshot.
-  long computeFileSize(boolean includesBlockInfoUnderConstruction) {
+  public final long computeFileSize(Snapshot snapshot) {
+    if (snapshot != null && this instanceof FileWithSnapshot) {
+      final FileDiff d = ((FileWithSnapshot)this).getDiffs().getDiff(snapshot);
+      if (d != null) {
+        return d.getFileSize();
+      }
+    }
+
+    return computeFileSize(true, false);
+  }
+
+  /**
+   * Compute file size of the current file size
+   * but not including the last block if it is under construction.
+   */
+  public final long computeFileSizeNotIncludingLastUcBlock() {
+    return computeFileSize(false, false);
+  }
+
+  /**
+   * Compute file size of the current file.
+   * 
+   * @param includesLastUcBlock
+   *          If the last block is under construction, should it be included?
+   * @param usePreferredBlockSize4LastUcBlock
+   *          If the last block is under construction, should we use actual
+   *          block size or preferred block size?
+   *          Note that usePreferredBlockSize4LastUcBlock is ignored
+   *          if includesLastUcBlock == false.
+   * @return file size
+   */
+  public final long computeFileSize(boolean includesLastUcBlock,
+      boolean usePreferredBlockSize4LastUcBlock) {
-    long bytes = blocks[last] instanceof BlockInfoUnderConstruction
-                 && !includesBlockInfoUnderConstruction?
-                     0: blocks[last].getNumBytes();
+    long size = blocks[last].getNumBytes();
+    if (blocks[last] instanceof BlockInfoUnderConstruction) {
+       if (!includesLastUcBlock) {
+         size = 0;
+       } else if (usePreferredBlockSize4LastUcBlock) {
+         size = getPreferredBlockSize();
+       }
+    }
+    //sum other blocks
-      bytes += blocks[i].getNumBytes();
+      size += blocks[i].getNumBytes();
-    return bytes;
-  }
-  
-
-  @Override
-  DirCounts spaceConsumedInTree(DirCounts counts) {
-    counts.nsCount += 1;
-    counts.dsCount += diskspaceConsumed();
-    return counts;
+    return size;
-  long diskspaceConsumed() {
-    return diskspaceConsumed(blocks);
+  public final long diskspaceConsumed() {
+    // use preferred block size for the last block if it is under construction
+    return computeFileSize(true, true) * getBlockReplication();
-  
-  private long diskspaceConsumed(Block[] blkArr) {
-    long size = 0;
-    if(blkArr == null) 
-      return 0;
-    
-    for (Block blk : blkArr) {
-      if (blk != null) {
-        size += blk.getNumBytes();
-      }
+
+  public final long diskspaceConsumed(Snapshot lastSnapshot) {
+    if (lastSnapshot != null) {
+      return computeFileSize(lastSnapshot) * getFileReplication(lastSnapshot);
+    } else {
+      return diskspaceConsumed();
-    /* If the last block is being written to, use prefferedBlockSize
-     * rather than the actual block size.
-     */
-    if (blkArr.length > 0 && blkArr[blkArr.length-1] != null && 
-        isUnderConstruction()) {
-      size += getPreferredBlockSize() - blkArr[blkArr.length-1].getNumBytes();
-    }
-    return size * getBlockReplication();
+
+  @VisibleForTesting
+  @Override
+  public void dumpTreeRecursively(PrintWriter out, StringBuilder prefix,
+      final Snapshot snapshot) {
+    super.dumpTreeRecursively(out, prefix, snapshot);
+    out.print(", fileSize=" + computeFileSize(snapshot));
+    // only compare the first block
+    out.print(", blocks=");
+    out.print(blocks == null || blocks.length == 0? null: blocks[0]);
+    out.println();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS31 MOV44 MOV44 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS44 INS44 INS83 INS42 INS44 INS8 INS29 MOV78 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 MOV29 INS83 INS83 INS39 INS42 INS44 MOV8 INS29 INS83 INS83 INS39 INS42 INS8 MOV78 INS83 INS8 INS29 INS83 INS83 UPD42 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS39 INS42 INS8 UPD42 MOV70 MOV78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 UPD39 UPD42 INS44 INS78 INS83 INS83 INS43 INS42 INS44 MOV44 INS44 MOV8 INS78 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 MOV44 MOV8 INS29 INS83 INS83 UPD42 INS29 UPD83 MOV83 INS83 MOV39 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS44 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS39 INS42 INS5 INS42 UPD42 MOV43 INS42 INS46 INS21 INS21 INS65 INS42 INS41 INS65 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS43 INS42 INS25 INS65 INS41 INS41 INS65 INS65 INS42 INS39 INS42 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS21 INS41 INS65 MOV41 INS25 INS60 INS21 INS40 INS83 INS43 INS42 INS43 INS42 INS83 INS43 INS42 INS83 INS74 INS42 INS42 INS60 INS25 MOV41 UPD42 INS83 INS74 INS42 INS21 INS21 INS25 INS42 INS40 INS43 INS42 INS39 UPD42 INS39 INS42 INS60 INS60 INS25 INS21 INS21 INS42 INS40 INS83 INS43 INS42 INS21 INS21 INS41 INS83 INS43 INS42 INS25 INS83 UPD43 INS25 INS21 INS21 INS65 INS65 INS43 UPD42 INS25 INS41 INS65 INS41 INS65 INS65 UPD65 INS65 UPD42 INS39 INS42 INS60 INS25 INS41 UPD43 MOV43 UPD42 MOV42 MOV25 INS42 INS42 INS43 INS42 INS43 INS42 INS83 INS43 INS42 INS21 INS21 INS21 INS21 MOV21 INS66 INS42 INS42 INS32 INS8 INS32 INS39 INS85 INS42 UPD42 INS42 INS7 INS7 INS66 INS52 INS66 INS9 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS32 INS8 INS8 INS42 INS27 INS8 INS66 INS32 INS16 INS66 INS66 INS42 INS42 INS83 MOV43 INS59 INS32 INS42 INS66 MOV27 INS8 INS39 INS59 INS44 INS42 INS32 INS42 INS42 INS42 INS43 MOV43 INS43 INS59 INS27 INS8 INS43 INS43 INS32 INS32 INS62 INS8 INS40 INS39 INS59 INS83 INS39 INS59 INS62 INS8 INS8 INS32 INS32 UPD42 INS40 INS32 INS32 INS42 INS40 INS62 INS8 INS40 INS27 INS8 INS32 INS32 INS32 INS66 INS66 INS66 UPD42 MOV42 INS27 INS8 INS32 INS66 INS66 INS32 INS66 INS42 INS66 INS42 INS66 UPD66 INS66 UPD66 INS66 MOV39 INS59 MOV62 INS8 UPD42 INS27 UPD42 INS8 INS42 INS42 INS42 INS48 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS9 INS25 INS32 INS42 INS42 INS22 INS40 INS22 INS40 INS42 INS42 INS42 INS38 INS45 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS60 INS41 INS41 INS42 INS33 INS41 INS42 INS33 INS62 INS32 INS32 INS42 INS32 INS42 INS42 INS42 MOV32 INS70 INS42 INS34 INS43 INS42 INS42 INS42 INS40 INS42 INS32 INS27 INS27 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS52 INS52 INS43 MOV21 INS42 INS34 INS42 INS52 INS43 INS60 INS60 INS60 INS25 MOV21 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS52 INS43 INS60 INS60 INS60 INS21 INS25 INS25 INS62 INS32 INS41 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS34 INS42 INS42 INS40 INS32 UPD42 INS33 INS27 INS62 MOV60 MOV25 INS42 INS9 INS9 INS42 INS9 INS9 UPD42 MOV42 MOV32 INS25 INS32 INS32 UPD42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS16 INS42 UPD42 MOV42 INS42 INS8 MOV8 INS42 INS42 INS52 INS42 INS52 INS42 MOV32 INS42 INS43 INS59 INS42 INS52 INS32 INS52 INS43 INS42 INS42 INS11 INS42 INS33 INS42 INS42 INS42 MOV44 INS42 INS8 INS42 INS7 INS40 INS42 INS42 INS33 INS42 INS33 INS32 INS32 UPD42 INS42 INS33 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS25 UPD7 UPD42 MOV42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS32 INS27 INS8 INS32 INS8 INS52 INS43 INS36 INS42 INS42 INS42 INS42 INS33 INS52 INS43 INS83 INS43 UPD27 INS8 INS38 INS8 INS25 INS42 INS9 INS9 INS42 INS27 INS32 INS45 INS32 INS27 INS33 INS2 INS41 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS52 UPD42 INS21 INS42 INS40 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS27 INS27 INS21 MOV21 INS27 INS8 INS8 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS32 INS21 INS42 INS42 INS60 INS21 INS42 INS11 INS42 INS42 INS42 INS32 UPD42 INS41 UPD42 MOV42 INS21 INS42 INS8 UPD42 INS32 INS32 INS42 INS42 INS42 INS27 UPD27 MOV27 UPD42 MOV42 INS34 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS36 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS7 UPD7 INS32 INS42 MOV21 INS60 MOV21 INS43 INS52 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS32 INS83 INS39 INS59 INS32 INS43 INS52 INS32 INS42 INS42 INS32 INS7 INS21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 UPD40 INS32 INS42 INS52 INS42 INS42 INS42 INS52 UPD42 INS11 INS11 INS42 INS32 INS42 INS42 INS42 UPD7 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS40 INS27 INS42 INS36 INS42 INS42 INS42 INS42 INS34 INS7 INS42 INS43 INS52 INS43 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS11 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS52 INS42 MOV42 MOV9 INS9 INS42 INS42 DEL42 DEL62 DEL36 DEL42 DEL11 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL52 DEL32 DEL42 DEL33 DEL7 DEL34 DEL41 DEL39 DEL85 DEL5 DEL40 DEL42 DEL34 DEL2 DEL32 DEL42 DEL34 DEL2 DEL37 DEL42 DEL34 DEL2 DEL42 DEL40 DEL34 DEL7 DEL39 DEL85 DEL5 DEL42 DEL31 DEL43 DEL42 DEL31 DEL42 DEL43 DEL85 DEL5 DEL39 DEL42 DEL34 DEL34 DEL41 DEL38 DEL27 DEL34 DEL16 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL44 DEL42 DEL8 DEL70 DEL40 DEL34 DEL27 DEL2 DEL33 DEL27 DEL27 DEL27 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL32 DEL27 DEL7