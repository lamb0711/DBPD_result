HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.

+import static org.apache.hadoop.hdfs.server.common.HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped;
-import org.apache.hadoop.hdfs.server.common.HdfsServerConstants;
-import org.apache.hadoop.hdfs.server.common.HdfsServerConstants.BlockUCState;
+  /* Start of StripedBlock Feature */
+
+  public final FileWithStripedBlocksFeature getStripedBlocksFeature() {
+    return getFeature(FileWithStripedBlocksFeature.class);
+  }
+
+  public FileWithStripedBlocksFeature addStripedBlocksFeature() {
+    assert blocks == null || blocks.length == 0:
+        "The file contains contiguous blocks";
+    assert !isWithStripedBlocks();
+    this.setFileReplication((short) 0);
+    FileWithStripedBlocksFeature sb = new FileWithStripedBlocksFeature();
+    addFeature(sb);
+    return sb;
+  }
+
+  public boolean isWithStripedBlocks() {
+    return getStripedBlocksFeature() != null;
+  }
+
+  /** Used to make sure there is no contiguous block related info */
+  private boolean hasNoContiguousBlock() {
+    return (blocks == null || blocks.length == 0) && getFileReplication() == 0;
+  }
+
-      assertAllBlocksComplete();
+      assertAllBlocksComplete(getBlocks());
-  private void assertAllBlocksComplete() {
-    if (blocks == null) {
+  private void assertAllBlocksComplete(BlockInfo[] blks) {
+    if (blks == null) {
-    for (int i = 0; i < blocks.length; i++) {
-      Preconditions.checkState(blocks[i].isComplete(), "Failed to finalize"
+    for (int i = 0; i < blks.length; i++) {
+      Preconditions.checkState(blks[i].isComplete(), "Failed to finalize"
-          getClass().getSimpleName(), this, i, Arrays.asList(blocks));
+          getClass().getSimpleName(), this, i, Arrays.asList(blks));
+  /**
+   * Instead of adding a new block, this function is usually used while loading
+   * fsimage or converting the last block to UC/Complete.
+   */
-  public void setBlock(int index, BlockInfoContiguous blk) {
-    this.blocks[index] = blk;
+  public void setBlock(int index, BlockInfo blk) {
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb == null) {
+      assert blk instanceof BlockInfoContiguous;
+      this.blocks[index] = (BlockInfoContiguous) blk;
+    } else {
+      assert blk instanceof BlockInfoStriped;
+      assert hasNoContiguousBlock();
+      sb.setBlock(index, (BlockInfoStriped) blk);
+    }
-  public BlockInfoContiguousUnderConstruction setLastBlock(
-      BlockInfoContiguous lastBlock, DatanodeStorageInfo[] locations)
-      throws IOException {
+  public void convertLastBlockToUC(BlockInfo lastBlock,
+      DatanodeStorageInfo[] locations) throws IOException {
-
-    BlockInfoContiguousUnderConstruction ucBlock =
-      lastBlock.convertToBlockUnderConstruction(
-          BlockUCState.UNDER_CONSTRUCTION, locations);
+
+    final BlockInfo ucBlock;
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb == null) {
+      assert lastBlock instanceof BlockInfoContiguous;
+      ucBlock = ((BlockInfoContiguous) lastBlock)
+          .convertToBlockUnderConstruction(UNDER_CONSTRUCTION, locations);
+    } else {
+      assert hasNoContiguousBlock();
+      assert lastBlock instanceof BlockInfoStriped;
+      ucBlock = ((BlockInfoStriped) lastBlock)
+          .convertToBlockUnderConstruction(UNDER_CONSTRUCTION, locations);
+    }
-    return ucBlock;
-    if (blocks == null || blocks.length == 0) {
-      return null;
-    }
-    int size_1 = blocks.length - 1;
-    if (!blocks[size_1].equals(oldblock)) {
-      return null;
-    }
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb == null) {
+      if (blocks == null || blocks.length == 0) {
+        return null;
+      }
+      int size_1 = blocks.length - 1;
+      if (!blocks[size_1].equals(oldblock)) {
+        return null;
+      }
-    BlockInfoContiguousUnderConstruction uc =
-        (BlockInfoContiguousUnderConstruction)blocks[size_1];
-    //copy to a new list
-    BlockInfoContiguous[] newlist = new BlockInfoContiguous[size_1];
-    System.arraycopy(blocks, 0, newlist, 0, size_1);
-    setBlocks(newlist);
-    return uc;
+      BlockInfoContiguousUnderConstruction uc =
+          (BlockInfoContiguousUnderConstruction)blocks[size_1];
+      //copy to a new list
+      BlockInfoContiguous[] newlist = new BlockInfoContiguous[size_1];
+      System.arraycopy(blocks, 0, newlist, 0, size_1);
+      setContiguousBlocks(newlist);
+      return uc;
+    } else {
+      assert hasNoContiguousBlock();
+      return null;
+    }
-  public final void setFileReplication(short replication) {
+  private void setFileReplication(short replication) {
+    Preconditions.checkState(!isWithStripedBlocks(),
+        "Cannot set replication to a file with striped blocks");
-  @Override
+  @Override // INodeFileAttributes
-  @Override
-  public BlockInfoContiguous[] getBlocks() {
+  @Override // BlockCollection
+  public BlockInfo[] getBlocks() {
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb != null) {
+      assert hasNoContiguousBlock();
+      return sb.getBlocks();
+    } else {
+      return this.blocks;
+    }
+  }
+
+  /** Used by snapshot diff */
+  public BlockInfoContiguous[] getContiguousBlocks() {
-  public BlockInfoContiguous[] getBlocks(int snapshot) {
-    if(snapshot == CURRENT_STATE_ID || getDiffs() == null)
+  public BlockInfo[] getBlocks(int snapshot) {
+    if (snapshot == CURRENT_STATE_ID || getDiffs() == null) {
+    }
+    // find blocks stored in snapshot diffs (for truncate)
-    BlockInfoContiguous[] snapshotBlocks =
-        diff == null ? getBlocks() : diff.getBlocks();
-    if(snapshotBlocks != null)
+    // note that currently FileDiff can only store contiguous blocks
+    BlockInfo[] snapshotBlocks = diff == null ? getBlocks() : diff.getBlocks();
+    if (snapshotBlocks != null) {
+    }
-  void updateBlockCollection() {
-    if (blocks != null) {
+  /** Used during concat to update the BlockCollection for each block */
+  private void updateBlockCollection() {
+    if (blocks != null && blocks.length > 0) {
+    } else {
+      FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+      if (sb != null) {
+        sb.updateBlockCollection(this);
+      }
-    setBlocks(newlist);
+    setContiguousBlocks(newlist);
-   * add a block to the block list
+   * add a contiguous block to the block list
-      this.setBlocks(new BlockInfoContiguous[]{newblock});
+      this.setContiguousBlocks(new BlockInfoContiguous[]{newblock});
-      this.setBlocks(newlist);
+      this.setContiguousBlocks(newlist);
-  public void setBlocks(BlockInfoContiguous[] blocks) {
+  public void setContiguousBlocks(BlockInfoContiguous[] blocks) {
-    if (blocks != null && reclaimContext.collectedBlocks != null) {
-      for (BlockInfoContiguous blk : blocks) {
+    BlockInfo[] blks = getBlocks();
+    if (blks != null && reclaimContext.collectedBlocks != null) {
+      for (BlockInfo blk : blks) {
-    setBlocks(null);
+    setContiguousBlocks(null);
+
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb != null) {
+      sb.clear();
+    }
-    final Iterable<BlockInfoContiguous> blocks;
+    if (isStriped()) {
+      return storagespaceConsumedWithStriped(bsp);
+    } else {
+      return storagespaceConsumedWithReplication(bsp);
+    }
+  }
+
+  public final QuotaCounts storagespaceConsumedWithStriped(
+      BlockStoragePolicy bsp) {
+    return  null;
+  }
+
+  public final QuotaCounts storagespaceConsumedWithReplication(
+      BlockStoragePolicy bsp) {    QuotaCounts counts = new QuotaCounts.Builder().build();
+    final Iterable<BlockInfo> blocks;
-      Set<BlockInfoContiguous> allBlocks = new HashSet<>(Arrays.asList(getBlocks()));
+      Set<BlockInfo> allBlocks = new HashSet<>(Arrays.asList(getBlocks()));
-    for (BlockInfoContiguous b : blocks) {
+    for (BlockInfo b : blocks) {
+  public final short getReplication(int lastSnapshotId) {
+    if (lastSnapshotId != CURRENT_STATE_ID) {
+      return getFileReplication(lastSnapshotId);
+    } else {
+      return getBlockReplication();
+    }
+  }
+
-  BlockInfoContiguous getPenultimateBlock() {
-    if (blocks == null || blocks.length <= 1) {
-      return null;
-    }
-    return blocks[blocks.length - 2];
+  BlockInfo getPenultimateBlock() {
+    BlockInfo[] blks = getBlocks();
+    return (blks == null || blks.length <= 1) ?
+        null : blks[blks.length - 2];
-  public BlockInfoContiguous getLastBlock() {
-    return blocks == null || blocks.length == 0? null: blocks[blocks.length-1];
+  public BlockInfo getLastBlock() {
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb == null) {
+      return blocks == null || blocks.length == 0 ?
+          null : blocks[blocks.length - 1];
+    } else {
+      assert hasNoContiguousBlock();
+      return sb.getLastBlock();
+    }
-    return blocks == null ? 0 : blocks.length;
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb == null) {
+      return blocks == null ? 0 : blocks.length;
+    } else {
+      assert hasNoContiguousBlock();
+      return sb.numBlocks();
+    }
+    // TODO print striped blocks
-    final BlockInfoContiguous[] oldBlocks = getBlocks();
-    if (oldBlocks == null)
+    final BlockInfo[] oldBlocks = getBlocks();
+    if (oldBlocks == null) {
+    }
+    FileWithStripedBlocksFeature sb = getStripedBlocksFeature();
+    if (sb == null) {
+      truncateContiguousBlocks(n);
+    } else {
+      sb.truncateStripedBlocks(n);
+    }
+  }
+
+  private void truncateContiguousBlocks(int n) {
-      System.arraycopy(getBlocks(), 0, newBlocks, 0, n);
+      System.arraycopy(blocks, 0, newBlocks, 0, n);
-    setBlocks(newBlocks);
+    setContiguousBlocks(newBlocks);
+  /**
+   * This function is only called when block list is stored in snapshot
+   * diffs. Note that this can only happen when truncation happens with
+   * snapshots. Since we do not support truncation with striped blocks,
+   * we only need to handle contiguous blocks here.
+   */
-    BlockInfoContiguous[] oldBlocks = getBlocks();
-    if(snapshotBlocks == null || oldBlocks == null)
+    BlockInfoContiguous[] oldBlocks = this.blocks;
+    if (snapshotBlocks == null || oldBlocks == null)
-    truncateBlocksTo(n);
+    truncateContiguousBlocks(n);

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS44 INS29 INS8 INS39 UPD42 INS8 UPD83 UPD5 INS8 INS29 INS83 MOV5 INS42 MOV8 INS5 INS29 INS83 UPD42 MOV29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 MOV8 UPD42 INS83 INS83 INS39 INS42 INS44 INS8 UPD43 UPD43 INS8 INS8 INS39 INS42 INS44 INS8 INS83 UPD42 INS29 INS42 INS41 INS42 INS6 INS6 INS21 INS60 INS21 INS41 INS41 INS65 INS41 INS5 INS42 INS65 INS43 INS60 INS25 UPD43 INS60 INS60 INS25 MOV21 INS60 INS25 INS21 UPD43 INS60 INS25 INS65 INS43 INS85 INS65 INS60 INS60 INS25 INS42 INS43 INS42 INS60 INS25 INS42 INS43 INS42 INS39 INS42 INS25 UPD42 INS60 UPD42 INS60 INS25 INS60 INS25 INS39 INS42 INS60 INS25 INS65 INS32 MOV27 INS45 INS38 INS32 INS43 INS59 INS32 INS42 INS27 INS66 INS27 INS43 INS85 INS27 INS66 INS66 INS42 INS43 INS59 INS27 MOV8 INS8 UPD42 INS83 UPD43 MOV43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 MOV8 INS8 INS32 UPD42 INS43 INS59 INS27 INS8 INS8 INS66 INS42 INS8 UPD5 INS8 INS66 INS27 INS8 UPD66 INS5 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS32 INS8 INS8 INS42 UPD74 INS27 INS8 INS8 INS5 INS59 INS16 INS43 INS59 INS27 MOV8 INS8 INS43 INS59 INS27 MOV8 INS8 UPD5 INS8 INS43 INS59 INS27 INS8 INS8 INS66 INS66 INS66 INS66 INS42 INS57 UPD27 INS32 INS52 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS32 INS33 INS36 INS27 INS42 INS42 INS33 UPD40 INS42 INS42 INS32 INS42 INS33 INS6 INS6 INS6 INS21 UPD42 MOV42 INS42 INS42 INS32 INS42 INS33 INS6 INS21 INS6 INS6 INS21 INS42 INS42 INS32 INS42 INS33 INS6 INS41 INS42 INS42 INS38 INS45 INS42 INS42 INS32 INS42 INS33 INS6 INS41 INS41 MOV41 UPD43 MOV41 INS27 INS27 INS60 INS25 UPD42 INS43 INS85 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS41 INS41 INS43 UPD43 INS42 INS42 INS41 INS41 INS43 INS85 INS42 MOV32 INS36 INS33 INS2 INS42 INS42 INS32 INS42 INS33 INS6 INS41 INS42 INS42 INS32 INS42 INS33 INS6 INS41 UPD43 MOV41 INS42 INS42 INS32 INS42 INS33 INS21 INS21 UPD42 INS22 UPD42 INS43 UPD34 INS42 INS39 INS34 INS43 INS42 INS27 INS32 INS34 INS42 INS62 INS62 INS32 INS32 INS42 INS62 INS7 INS32 INS62 INS7 INS42 INS32 INS33 INS32 INS42 INS32 INS32 INS22 UPD42 MOV42 MOV33 INS40 INS34 INS43 INS59 INS27 INS8 INS42 INS42 UPD42 UPD42 INS42 INS32 INS14 INS42 INS32 INS32 INS42 UPD74 UPD42 INS32 INS32 INS42 INS27 UPD42 MOV42 MOV27 INS42 INS32 INS32 INS42 INS32 INS32 UPD42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 MOV27 INS27 INS42 INS32 INS42 INS43 INS11 INS42 INS43 INS42 INS42 INS42 INS42 INS11 INS42 MOV43 INS42 INS32 INS42 INS42 INS43 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS33 INS21 UPD42 UPD42 UPD43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS27 INS27 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS34 INS42 UPD42 INS42 INS43 INS42 INS42 INS43 INS42 INS36 MOV42 INS42 MOV42 INS42 INS36 INS42 INS42 INS42 INS42 INS32 UPD42 INS40 UPD42 INS42 INS33 INS40 INS34 UPD42 INS42 INS42 INS11 INS11 INS42 INS42 INS52 MOV43 INS42 INS43 INS42 INS42 DEL42 DEL42 DEL43 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL41 DEL83 DEL27 DEL25 DEL2 DEL42 DEL32