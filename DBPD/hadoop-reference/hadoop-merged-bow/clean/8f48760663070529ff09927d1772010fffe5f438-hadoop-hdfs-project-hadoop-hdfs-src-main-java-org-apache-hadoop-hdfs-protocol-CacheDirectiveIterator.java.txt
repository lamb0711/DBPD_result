HDFS-6345. DFS.listCacheDirectives() should allow filtering based on cache directive ID. (wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595086 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.InvalidRequestException;
+import org.apache.hadoop.ipc.RemoteException;
+
+import com.google.common.base.Preconditions;
-  private final CacheDirectiveInfo filter;
+  private CacheDirectiveInfo filter;
+  private static CacheDirectiveInfo removeIdFromFilter(CacheDirectiveInfo filter) {
+    CacheDirectiveInfo.Builder builder = new CacheDirectiveInfo.Builder(filter);
+    builder.setId(null);
+    return builder.build();
+  }
+
+  /**
+   * Used for compatibility when communicating with a server version that
+   * does not support filtering directives by ID.
+   */
+  private static class SingleEntry implements
+      BatchedEntries<CacheDirectiveEntry> {
+
+    private final CacheDirectiveEntry entry;
+
+    public SingleEntry(final CacheDirectiveEntry entry) {
+      this.entry = entry;
+    }
+
+    @Override
+    public CacheDirectiveEntry get(int i) {
+      if (i > 0) {
+        return null;
+      }
+      return entry;
+    }
+
+    @Override
+    public int size() {
+      return 1;
+    }
+
+    @Override
+    public boolean hasMore() {
+      return false;
+    }
+  }
+
-    return namenode.listCacheDirectives(prevKey, filter);
+    BatchedEntries<CacheDirectiveEntry> entries = null;
+    try {
+      entries = namenode.listCacheDirectives(prevKey, filter);
+    } catch (IOException e) {
+      if (e.getMessage().contains("Filtering by ID is unsupported")) {
+        // Retry case for old servers, do the filtering client-side
+        long id = filter.getId();
+        filter = removeIdFromFilter(filter);
+        // Using id - 1 as prevId should get us a window containing the id
+        // This is somewhat brittle, since it depends on directives being
+        // returned in order of ascending ID.
+        entries = namenode.listCacheDirectives(id - 1, filter);
+        for (int i=0; i<entries.size(); i++) {
+          CacheDirectiveEntry entry = entries.get(i);
+          if (entry.getInfo().getId().equals((Long)id)) {
+            return new SingleEntry(entry);
+          }
+        }
+        throw new RemoteException(InvalidRequestException.class.getName(),
+            "Did not find requested id " + id);
+      }
+      throw e;
+    }
+    Preconditions.checkNotNull(entries);
+    return entries;

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS55 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS31 INS31 INS8 INS42 INS43 INS42 INS60 INS21 INS41 INS65 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS60 INS54 INS21 INS41 INS42 INS43 INS59 INS32 INS32 INS66 INS66 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS21 INS42 INS42 INS39 INS42 INS25 INS41 INS42 INS41 INS42 INS41 INS74 INS59 MOV8 INS12 INS32 INS42 INS40 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS42 INS7 INS27 INS8 INS42 INS34 INS9 INS43 INS43 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS42 INS43 INS42 INS22 INS42 INS42 INS34 INS41 INS42 INS42 INS7 INS43 INS42 INS25 INS53 INS40 INS52 INS42 INS33 INS42 MOV32 INS42 INS32 INS8 INS42 INS32 INS42 INS45 INS60 INS21 INS21 INS24 INS53 INS42 INS42 INS39 INS59 INS7 INS7 INS58 INS27 INS37 INS8 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS43 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS57 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS32 INS32 INS42 INS11 INS41 INS43 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 DEL83 DEL41