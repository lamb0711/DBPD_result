HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.

-import org.apache.hadoop.hdfs.server.namenode.INode.BlocksMapUpdateInfo;
-        final BlockStoragePolicySuite bsps, final INodeDirectory currentINode,
-        final BlocksMapUpdateInfo collectedBlocks,
-        final List<INode> removedINodes, List<Long> removedUCFiles) {
+        INode.ReclaimContext reclaimContext, final INodeDirectory currentINode) {
-        c.computeQuotaUsage(bsps, counts, true);
-        c.destroyAndCollectBlocks(bsps, collectedBlocks, removedINodes,
-                                  removedUCFiles);
+        c.computeQuotaUsage(reclaimContext.storagePolicySuite(), counts, true);
+        c.destroyAndCollectBlocks(reclaimContext);
-    private QuotaCounts destroyDeletedList(
-        final BlockStoragePolicySuite bsps,
-        final BlocksMapUpdateInfo collectedBlocks,
-        final List<INode> removedINodes, List<Long> removedUCFiles) {
+    private QuotaCounts destroyDeletedList(INode.ReclaimContext reclaimContext) {
-        d.computeQuotaUsage(bsps, counts, false);
-        d.destroyAndCollectBlocks(bsps, collectedBlocks, removedINodes,
-                                  removedUCFiles);
+        d.computeQuotaUsage(reclaimContext.storagePolicySuite(), counts, false);
+        d.destroyAndCollectBlocks(reclaimContext);
-        final BlockStoragePolicySuite bsps, final INodeDirectory currentDir,
-        final DirectoryDiff posterior,
-        final BlocksMapUpdateInfo collectedBlocks,
-        final List<INode> removedINodes) {
+        final INode.ReclaimContext reclaimContext,
+        final INodeDirectory currentDir,
+        final DirectoryDiff posterior) {
-            inode.computeQuotaUsage(bsps, counts, false);
-            inode.destroyAndCollectBlocks(bsps, collectedBlocks, removedINodes,
-                                          null);
+            inode.computeQuotaUsage(reclaimContext.storagePolicySuite(), counts, false);
+            inode.destroyAndCollectBlocks(reclaimContext);
-        BlockStoragePolicySuite bsps, INodeDirectory currentINode,
-        BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes) {
+        INode.ReclaimContext reclaimContext, INodeDirectory currentINode) {
-      counts.add(diff.destroyDeletedList(bsps, collectedBlocks, removedINodes,
-                                         null));
+      counts.add(diff.destroyDeletedList(reclaimContext));
-      final BlockStoragePolicySuite bsps, INode inode, final int snapshot,
-      final int prior, final BlocksMapUpdateInfo collectedBlocks,
-      final List<INode> removedINodes, List<Long> removedUCFiles) throws QuotaExceededException {
+      INode.ReclaimContext reclaimContext, INode inode, final int snapshot,
+      final int prior) throws QuotaExceededException {
-        inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,
-                           removedUCFiles);
+        inode.cleanSubtree(reclaimContext,
+            snapshot, prior);
-        destroyDstSubtree(bsps, inode.asReference().getReferredINode(), snapshot,
-            prior, collectedBlocks, removedINodes, removedUCFiles);
+        destroyDstSubtree(reclaimContext,
+                          inode.asReference().getReferredINode(), snapshot,
+                          prior);
-      inode.cleanSubtree(bsps, snapshot, prior, collectedBlocks, removedINodes,
-                         removedUCFiles);
+      inode.cleanSubtree(reclaimContext, snapshot, prior);
-          diffList.deleteSnapshotDiff(bsps, snapshot, prior, dir, collectedBlocks,
-              removedINodes);
+          diffList.deleteSnapshotDiff(reclaimContext,
+              snapshot, prior, dir);
-          priorDiff.diff.destroyCreatedList(bsps, dir, collectedBlocks,
-              removedINodes, removedUCFiles);
+          priorDiff.diff.destroyCreatedList(reclaimContext, dir);
-        destroyDstSubtree(bsps, child, snapshot, prior, collectedBlocks,
-            removedINodes, removedUCFiles);
+        destroyDstSubtree(reclaimContext, child, snapshot, prior);
-   * @param bsps The block storage policy suite.
+   * @param reclaimContext blocks and inodes that need to be reclaimed
-   * @param collectedBlocks Used to collect blocks for later deletion.
-   * @param removedUCFiles
-      final BlockStoragePolicySuite bsps, INode inode, final int post, final int prior,
-      final BlocksMapUpdateInfo collectedBlocks,
-      final List<INode> removedINodes, List<Long> removedUCFiles) {
+      INode.ReclaimContext reclaimContext, INode inode, final int post,
+      final int prior) {
-          wn.cleanSubtree(bsps, post, prior, collectedBlocks, removedINodes,
-                          removedUCFiles);
+          wn.cleanSubtree(reclaimContext, post, prior);
-        counts.add(file.getDiffs().deleteSnapshotDiff(bsps, post, prior, file,
-            collectedBlocks, removedINodes));
+        counts.add(file.getDiffs().deleteSnapshotDiff(reclaimContext, post, prior, file));
-            counts.add(priorChildrenDiff.destroyCreatedList(bsps, dir,
-                collectedBlocks, removedINodes, removedUCFiles));
+            counts.add(priorChildrenDiff.destroyCreatedList(reclaimContext,
+                dir));
-  public void clear(BlockStoragePolicySuite bsps, INodeDirectory currentINode,
-      final BlocksMapUpdateInfo collectedBlocks, final List<INode>
-      removedINodes, final List<Long> removedUCFiles) {
+  public void clear(
+      INode.ReclaimContext reclaimContext, INodeDirectory currentINode) {
-      diff.destroyDiffAndCollectBlocks(bsps, currentINode, collectedBlocks,
-        removedINodes);
+      diff.destroyDiffAndCollectBlocks(reclaimContext, currentINode);
-      final BlockStoragePolicySuite bsps, final INodeDirectory currentINode,
-      final int snapshot, int prior, final BlocksMapUpdateInfo collectedBlocks,
-      final List<INode> removedINodes, List<Long> removedUCFiles) {
+      INode.ReclaimContext reclaimContext, final INodeDirectory currentINode,
+      final int snapshot, int prior) {
-        counts.add(lastDiff.diff.destroyCreatedList(bsps, currentINode,
-            collectedBlocks, removedINodes, removedUCFiles));
+        counts.add(lastDiff.diff.destroyCreatedList(reclaimContext,
+            currentINode));
-      counts.add(currentINode.cleanSubtreeRecursively(bsps, snapshot, prior,
-          collectedBlocks, removedINodes, removedUCFiles, priorDeleted));
+      counts.add(currentINode.cleanSubtreeRecursively(reclaimContext,
+          snapshot, prior, priorDeleted));
-      counts.add(getDiffs().deleteSnapshotDiff(bsps, snapshot, prior,
-          currentINode, collectedBlocks, removedINodes));
-      counts.add(currentINode.cleanSubtreeRecursively(bsps, snapshot, prior,
-          collectedBlocks, removedINodes, removedUCFiles, priorDeleted));
+      counts.add(getDiffs().deleteSnapshotDiff(reclaimContext, snapshot, prior,
+          currentINode));
+      counts.add(currentINode.cleanSubtreeRecursively(reclaimContext,
+          snapshot, prior, priorDeleted));
-                counts.add(cNode.cleanSubtree(bsps, snapshot, Snapshot.NO_SNAPSHOT_ID,
-                    collectedBlocks, removedINodes, removedUCFiles));
+                counts.add(cNode.cleanSubtree(reclaimContext,
+                    snapshot, Snapshot.NO_SNAPSHOT_ID));
-              counts.add(cleanDeletedINode(bsps, dNode, snapshot, prior,
-                  collectedBlocks, removedINodes, removedUCFiles));
+              counts.add(cleanDeletedINode(reclaimContext,
+                  dNode, snapshot, prior));

MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV65 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS43 UPD42 INS40 UPD42 UPD66 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD42 UPD42 INS32 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL33 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL66 DEL65 DEL42 DEL65 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42