HDFS-8786. Erasure coding: use simple replication for internal blocks on decommissioning datanodes. Contributed by Rakesh R.

-import java.util.Arrays;
-  void addTaskToDatanode() {
-    assert getTargets().length > 0;
+  void addTaskToDatanode(NumberReplicas numberReplicas) {
+    final DatanodeStorageInfo[] targets = getTargets();
+    assert targets.length > 0;
-    // if we already have all the internal blocks, but not enough racks,
-    // we only need to replicate one internal block to a new rack
-    if (hasAllInternalBlocks()) {
+    if (hasNotEnoughRack()) {
+      // if we already have all the internal blocks, but not enough racks,
+      // we only need to replicate one internal block to a new rack
-      final byte blockIndex = liveBlockIndicies[sourceIndex];
-      final DatanodeDescriptor source = getSrcNodes()[sourceIndex];
-      final long internBlkLen = StripedBlockUtil.getInternalBlockLength(
-          stripedBlk.getNumBytes(), stripedBlk.getCellSize(),
-          stripedBlk.getDataBlockNum(), blockIndex);
-      final Block targetBlk = new Block(
-          stripedBlk.getBlockId() + blockIndex, internBlkLen,
-          stripedBlk.getGenerationStamp());
-      source.addBlockToBeReplicated(targetBlk, getTargets());
-      if (BlockManager.LOG.isDebugEnabled()) {
-        BlockManager.LOG.debug("Add replication task from source {} to " +
-            "targets {} for EC block {}", source, Arrays.toString(getTargets()),
-            targetBlk);
+      createReplicationWork(sourceIndex, targets[0]);
+    } else if (numberReplicas.decommissioning() > 0 && hasAllInternalBlocks()) {
+      List<Integer> decommissioningSources = findDecommissioningSources();
+      // decommissioningSources.size() should be >= targets.length
+      final int num = Math.min(decommissioningSources.size(), targets.length);
+      for (int i = 0; i < num; i++) {
+        createReplicationWork(decommissioningSources.get(i), targets[i]);
-      getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(
-          new ExtendedBlock(blockPoolId, stripedBlk),
-          getSrcNodes(), getTargets(), getLiveBlockIndicies(),
-          stripedBlk.getErasureCodingPolicy());
+      targets[0].getDatanodeDescriptor().addBlockToBeErasureCoded(
+          new ExtendedBlock(blockPoolId, stripedBlk), getSrcNodes(), targets,
+          getLiveBlockIndicies(), stripedBlk.getErasureCodingPolicy());
+
+  private void createReplicationWork(int sourceIndex,
+      DatanodeStorageInfo target) {
+    BlockInfoStriped stripedBlk = (BlockInfoStriped) getBlock();
+    final byte blockIndex = liveBlockIndicies[sourceIndex];
+    final DatanodeDescriptor source = getSrcNodes()[sourceIndex];
+    final long internBlkLen = StripedBlockUtil.getInternalBlockLength(
+        stripedBlk.getNumBytes(), stripedBlk.getCellSize(),
+        stripedBlk.getDataBlockNum(), blockIndex);
+    final Block targetBlk = new Block(stripedBlk.getBlockId() + blockIndex,
+        internBlkLen, stripedBlk.getGenerationStamp());
+    source.addBlockToBeReplicated(targetBlk,
+        new DatanodeStorageInfo[] {target});
+    if (BlockManager.LOG.isDebugEnabled()) {
+      BlockManager.LOG.debug("Add replication task from source {} to "
+          + "target {} for EC block {}", source, target, targetBlk);
+    }
+  }
+
+  private List<Integer> findDecommissioningSources() {
+    List<Integer> srcIndices = new ArrayList<>();
+    for (int i = 0; i < getSrcNodes().length; i++) {
+      if (getSrcNodes()[i].isDecommissionInProgress()) {
+        srcIndices.add(i);
+      }
+    }
+    return srcIndices;
+  }

INS31 INS31 MOV78 INS39 INS42 INS44 INS8 INS83 UPD42 INS44 INS44 MOV8 INS83 INS74 INS42 INS8 INS43 INS42 INS60 INS6 INS60 INS25 INS39 INS42 INS43 INS42 MOV60 INS43 INS43 INS60 INS24 INS41 INS42 INS83 INS5 INS59 INS27 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS42 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS85 INS42 MOV32 INS40 INS34 INS42 INS42 INS11 INS42 MOV60 INS21 INS27 INS8 MOV8 INS3 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS22 INS42 INS25 INS42 INS43 INS32 INS32 INS27 MOV32 INS60 INS60 INS24 INS5 INS4 INS42 INS42 INS74 INS42 INS34 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS2 INS32 INS34 INS74 INS59 INS83 INS39 INS59 INS58 INS27 INS37 INS8 INS43 INS85 INS42 UPD42 MOV42 INS43 INS42 INS2 INS42 INS21 INS42 INS34 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS21 UPD42 MOV42 INS42 UPD45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS2 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL6 DEL25 DEL8