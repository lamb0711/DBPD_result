Merge r1550130 through r1555020 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1555021 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
-import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.yarn.api.protocolrecords.GetClusterMetricsRequest;
+import com.google.common.annotations.VisibleForTesting;
+
+  private String[] rmIds;
-  private ResourceManagerWrapper resourceManagerWrapper;
-  
+  private boolean useFixedPorts;
+  private boolean useRpc = false;
+
-    for (int i = 0; i < numResourceManagers; i++) {
-      resourceManagers[i] = new ResourceManager();
-      addService(new ResourceManagerWrapper(i));
-    }
-    nodeManagers = new CustomNodeManager[numNodeManagers];
-    for(int index = 0; index < numNodeManagers; index++) {
-      addService(new NodeManagerWrapper(index));
-      nodeManagers[index] = new CustomNodeManager();
-    }
+    nodeManagers = new NodeManager[numNodeManagers];
-    @Override
+  @Override
+    useFixedPorts = conf.getBoolean(
+        YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,
+        YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS);
+    useRpc = conf.getBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC,
+        YarnConfiguration.DEFAULT_YARN_MINICLUSTER_USE_RPC);
+
+    if (useRpc && !useFixedPorts) {
+      throw new YarnRuntimeException("Invalid configuration!" +
+          " Minicluster can use rpc only when configured to use fixed ports");
+    }
+
-
-      StringBuilder rmIds = new StringBuilder();
-      for (int i = 0; i < resourceManagers.length; i++) {
-        if (i != 0) {
-          rmIds.append(",");
+      if (conf.get(YarnConfiguration.RM_HA_IDS) == null) {
+        StringBuilder rmIds = new StringBuilder();
+        for (int i = 0; i < resourceManagers.length; i++) {
+          if (i != 0) {
+            rmIds.append(",");
+          }
+          rmIds.append("rm" + i);
-        rmIds.append("rm" + i);
+        conf.set(YarnConfiguration.RM_HA_IDS, rmIds.toString());
-      conf.set(YarnConfiguration.RM_HA_IDS, rmIds.toString());
+      Collection<String> rmIdsCollection = HAUtil.getRMHAIds(conf);
+      rmIds = rmIdsCollection.toArray(new String[rmIdsCollection.size()]);
+
+    for (int i = 0; i < resourceManagers.length; i++) {
+      resourceManagers[i] = new ResourceManager() {
+        @Override
+        protected void doSecureLogin() throws IOException {
+          // Don't try to login using keytab in the testcases.
+        }
+      };
+      addService(new ResourceManagerWrapper(i));
+    }
+    for(int index = 0; index < nodeManagers.length; index++) {
+      nodeManagers[index] =
+          useRpc ? new CustomNodeManager() : new ShortCircuitedNodeManager();
+      addService(new NodeManagerWrapper(index));
+    }
+
-   * @return index of the active RM
+   * @return index of the active RM or -1 if none of them transition to
+   * active even after 5 seconds of waiting
-  int getActiveRMIndex() {
+  public int getActiveRMIndex() {
-      String rmId = "rm" + index;
-      conf.set(YarnConfiguration.RM_HA_ID, rmId);
-      for (String confKey : YarnConfiguration.RM_RPC_ADDRESS_CONF_KEYS) {
-        conf.set(HAUtil.addSuffix(confKey, rmId), hostname + ":0");
+      for (String confKey : YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS) {
+        for (String id : HAUtil.getRMHAIds(conf)) {
+          conf.set(HAUtil.addSuffix(confKey, id), hostname + ":0");
+        }
-      if (!conf.getBoolean(
-          YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,
-          YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)) {
+
+      if (!useFixedPorts) {
+      if (HAUtil.isHAEnabled(conf)) {
+        conf.set(YarnConfiguration.RM_HA_ID, rmIds[index]);
+      }
+  }
+  private class ShortCircuitedNodeManager extends CustomNodeManager {
+
+  /**
+   * Wait for all the NodeManagers to connect to the ResourceManager.
+   *
+   * @param timeout Time to wait (sleeps in 100 ms intervals) in milliseconds.
+   * @return true if all NodeManagers connect to the (Active)
+   * ResourceManager, false otherwise.
+   * @throws YarnException
+   * @throws InterruptedException
+   */
+  public boolean waitForNodeManagersToConnect(long timeout)
+      throws YarnException, InterruptedException {
+    ResourceManager rm = getResourceManager();
+    GetClusterMetricsRequest req = GetClusterMetricsRequest.newInstance();
+
+    for (int i = 0; i < timeout / 100; i++) {
+      if (nodeManagers.length == rm.getClientRMService().getClusterMetrics(req)
+          .getClusterMetrics().getNumNodeManagers()) {
+        return true;
+      }
+      Thread.sleep(100);
+    }
+    return false;
+  }

MOV26 INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS55 INS31 MOV83 INS5 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS8 INS83 INS83 INS42 MOV43 MOV31 UPD42 MOV43 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS43 INS85 INS42 INS42 INS42 INS9 INS21 INS21 INS25 INS25 MOV24 MOV24 MOV21 INS8 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS42 INS42 INS60 INS60 INS24 INS41 INS42 INS7 INS7 INS27 INS8 MOV27 MOV8 MOV21 UPD66 INS66 MOV60 INS70 INS25 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS9 INS42 MOV32 INS42 INS32 INS42 INS38 INS53 MOV21 INS60 INS21 INS40 INS40 MOV44 INS40 INS8 INS32 INS8 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS39 INS59 INS42 INS27 INS42 INS25 INS21 UPD5 INS42 INS42 INS40 INS40 INS42 INS14 INS27 INS74 INS59 INS7 INS70 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS27 INS8 INS32 INS43 INS43 INS27 INS32 INS33 INS43 INS43 INS42 INS32 INS42 INS32 INS16 INS44 INS32 MOV8 INS32 INS40 INS32 INS41 INS42 INS42 INS34 INS42 INS42 INS45 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS1 INS42 MOV14 INS14 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 INS2 INS32 INS42 INS9 INS5 INS32 INS31 INS43 INS42 INS42 INS32 INS42 INS43 INS85 INS42 INS42 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL40 DEL32 DEL21 DEL40 DEL70 DEL8