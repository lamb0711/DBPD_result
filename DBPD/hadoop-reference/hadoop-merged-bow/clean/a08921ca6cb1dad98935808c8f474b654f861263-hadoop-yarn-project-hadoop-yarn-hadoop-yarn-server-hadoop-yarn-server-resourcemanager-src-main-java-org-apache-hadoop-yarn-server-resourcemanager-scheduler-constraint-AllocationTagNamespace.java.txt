YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)

Change-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700

-package org.apache.hadoop.yarn.api.records;
+package org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint;
-import org.apache.hadoop.yarn.exceptions.InvalidAllocationTagException;
+import org.apache.hadoop.yarn.api.records.AllocationTagNamespaceType;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import java.util.Arrays;
+import java.util.stream.Collectors;
-import static org.apache.hadoop.yarn.api.records.AllocationTagNamespaceType.fromString;
-   * Before calling this method, {@link #evaluate(TargetApplications)}
-   * must be called in prior to ensure the scope is proper evaluated.
+  /**
+   * Evaluate the namespace against given target applications
+   * if it is necessary. Only self/not-self/app-label namespace types
+   * require this evaluation step, because they are not binding to a
+   * specific scope during initiating. So we do lazy binding for them
+   * in this method.
+   *
+   * @param target a generic type target that impacts this evaluation.
+   * @throws InvalidAllocationTagsQueryException
+   */
-  public abstract void evaluate(TargetApplications target)
-      throws InvalidAllocationTagException;
-
-  /**
-   * @return true if the namespace is effective in all applications
-   * in this cluster. Specifically the namespace prefix should be
-   * "all".
-   */
-  public boolean isGlobal() {
-    return AllocationTagNamespaceType.ALL.equals(getNamespaceType());
-  }
-
-  /**
-   * @return true if the namespace is effective within a single application
-   * by its application ID, the namespace prefix should be "app-id";
-   * false otherwise.
-   */
-  public boolean isSingleInterApp() {
-    return AllocationTagNamespaceType.APP_ID.equals(getNamespaceType());
-  }
-
-  /**
-   * @return true if the namespace is effective to the application itself,
-   * the namespace prefix should be "self"; false otherwise.
-   */
-  public boolean isIntraApp() {
-    return AllocationTagNamespaceType.SELF.equals(getNamespaceType());
-  }
-
-  /**
-   * @return true if the namespace is effective to all applications except
-   * itself, the namespace prefix should be "not-self"; false otherwise.
-   */
-  public boolean isNotSelf() {
-    return AllocationTagNamespaceType.NOT_SELF.equals(getNamespaceType());
-  }
-
-  /**
-   * @return true if the namespace is effective to a group of applications
-   * identified by a application label, the namespace prefix should be
-   * "app-label"; false otherwise.
-   */
-  public boolean isAppLabel() {
-    return AllocationTagNamespaceType.APP_LABEL.equals(getNamespaceType());
+  public void evaluate(TargetApplications target)
+      throws InvalidAllocationTagsQueryException {
+    // Sub-class needs to override this when it requires the eval step.
-        throws InvalidAllocationTagException {
+        throws InvalidAllocationTagsQueryException {
-        throw new InvalidAllocationTagException("Namespace Self must"
+        throw new InvalidAllocationTagsQueryException("Namespace Self must"
-
-    @Override
-    public void evaluate(TargetApplications target) {
-      Set<ApplicationId> allAppIds = target.getAllApplicationIds();
-      setScopeIfNotNull(allAppIds);
-    }
-    }
-
-    @Override
-    public void evaluate(TargetApplications target) {
-   * @throws InvalidAllocationTagException
+   * @throws InvalidAllocationTagsQueryException
-      throws InvalidAllocationTagException {
+      throws InvalidAllocationTagsQueryException {
-        throw new InvalidAllocationTagException(
+        throw new InvalidAllocationTagsQueryException(
-      throw new InvalidAllocationTagException(
+      throw new InvalidAllocationTagsQueryException(
+  private static AllocationTagNamespaceType fromString(String prefix) throws
+      InvalidAllocationTagsQueryException {
+    for (AllocationTagNamespaceType type :
+        AllocationTagNamespaceType.values()) {
+      if(type.getTypeKeyword().equals(prefix)) {
+        return type;
+      }
+    }
+
+    Set<String> values = Arrays.stream(AllocationTagNamespaceType.values())
+        .map(AllocationTagNamespaceType::toString)
+        .collect(Collectors.toSet());
+    throw new InvalidAllocationTagsQueryException(
+        "Invalid namespace prefix: " + prefix
+            + ", valid values are: " + String.join(",", values));
+  }
+
-      throws InvalidAllocationTagException {
+      throws InvalidAllocationTagsQueryException {
-      throw new InvalidAllocationTagException(
+      throw new InvalidAllocationTagsQueryException(
-   * @throws InvalidAllocationTagException
+   * @throws InvalidAllocationTagsQueryException
-      throws InvalidAllocationTagException {
+      throws InvalidAllocationTagsQueryException {
-      throw new InvalidAllocationTagException("Invalid namespace string: "
+      throw new InvalidAllocationTagsQueryException("Invalid namespace string: "

MOV26 INS26 INS26 UPD40 UPD40 UPD40 INS40 INS40 INS55 INS31 INS29 UPD43 INS8 MOV29 INS83 INS83 INS42 MOV43 MOV31 UPD43 INS83 UPD83 MOV83 INS43 INS42 INS44 INS43 INS8 UPD43 UPD43 INS65 INS65 INS65 UPD42 UPD43 UPD42 INS42 INS43 INS42 INS42 INS70 MOV60 INS53 UPD42 UPD42 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 UPD42 MOV21 UPD42 INS42 INS44 INS32 INS8 UPD74 INS14 UPD42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS25 UPD43 UPD42 INS32 INS43 INS27 UPD43 INS42 INS32 INS8 UPD42 INS32 INS42 INS32 INS42 INS45 INS42 INS45 INS32 UPD42 INS32 INS42 INS42 INS41 INS32 INS42 INS90 INS42 INS42 UPD42 MOV42 INS42 INS45 UPD42 MOV42 UPD43 UPD43 UPD43 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL83 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL40 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL40 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8 DEL31 DEL55 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL32