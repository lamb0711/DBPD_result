YARN-4340. Add list API to reservation system. (Sean Po via wangda)

-        reservation.getReservationId());
+            reservation.getReservationId());
-    ReservationInterval searchInterval =
-        new ReservationInterval(tick, Long.MAX_VALUE);
-    readLock.lock();
-    try {
-      SortedMap<ReservationInterval, Set<InMemoryReservationAllocation>> reservations =
-          currentReservations.headMap(searchInterval, true);
-      if (!reservations.isEmpty()) {
-        Set<ReservationAllocation> flattenedReservations =
-            new HashSet<ReservationAllocation>();
-        for (Set<InMemoryReservationAllocation> reservationEntries : reservations
-            .values()) {
-          for (InMemoryReservationAllocation reservation : reservationEntries) {
-            if (reservation.getEndTime() > tick) {
-              flattenedReservations.add(reservation);
-            }
-          }
-        }
-        return Collections.unmodifiableSet(flattenedReservations);
-      } else {
-        return Collections.emptySet();
-      }
-    } finally {
-      readLock.unlock();
-    }
+    return getReservations(null, new ReservationInterval(tick, tick), "");
+    public Set<ReservationAllocation> getReservations(ReservationId
+                    reservationID, ReservationInterval interval, String user) {
+    if (reservationID != null) {
+      ReservationAllocation allocation = getReservationById(reservationID);
+      if (allocation == null){
+        return Collections.emptySet();
+      }
+      return Collections.singleton(allocation);
+    }
+
+    long startTime = interval == null? 0 : interval.getStartTime();
+    long endTime = interval == null? Long.MAX_VALUE : interval.getEndTime();
+
+    ReservationInterval searchInterval =
+            new ReservationInterval(endTime, Long.MAX_VALUE);
+    readLock.lock();
+    try {
+      SortedMap<ReservationInterval, Set<InMemoryReservationAllocation>>
+            reservations = currentReservations.headMap(searchInterval, true);
+      if (!reservations.isEmpty()) {
+        Set<ReservationAllocation> flattenedReservations =
+                new HashSet<>();
+        for (Set<InMemoryReservationAllocation> reservationEntries :
+                reservations.values()) {
+          for (InMemoryReservationAllocation res : reservationEntries) {
+            if (res.getEndTime() > startTime) {
+              if (user != null && !user.isEmpty()
+                      && !res.getUser().equals(user)) {
+                continue;
+              }
+              flattenedReservations.add(res);
+            }
+          }
+        }
+        return Collections.unmodifiableSet(flattenedReservations);
+      } else {
+        return Collections.emptySet();
+      }
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  @Override

MOV31 INS31 INS78 INS83 INS74 INS42 MOV44 INS8 UPD42 INS44 INS44 INS44 INS42 INS43 INS43 INS41 INS43 INS42 MOV43 INS42 INS43 INS42 INS25 INS60 INS60 INS42 INS42 INS32 INS42 INS42 INS27 INS8 INS39 INS59 INS39 INS59 INS43 INS42 INS33 MOV14 INS45 INS42 INS33 INS60 INS25 INS41 INS42 INS16 INS42 INS16 INS42 INS14 INS42 MOV43 INS59 INS27 INS8 INS32 INS27 INS34 INS32 INS27 INS40 INS32 INS43 INS42 INS40 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD74 UPD42 UPD42 INS25 UPD42 INS27 INS8 INS27 INS38 INS18 UPD42 INS27 INS38 INS32 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL40