Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ContainerId;
-    if (!hasAccess(QueueACL.SUBMIT_JOB, userUgi)) {
+    if (!hasAccess(QueueACL.SUBMIT_APPLICATIONS, userUgi)) {
-          " jobs to queue " + getQueuePath());
+          " applications to queue " + getQueuePath());
-        Resource userLimit = 
-          computeUserLimit(application, clusterResource, Resources.none());
-        setUserResourceLimit(application, userLimit);
+        computeAndSetUserResourceLimit(application, clusterResource);
-          userLimit = 
+          Resource userLimit = 
-                application.getUser(), assignedResource);
+                application, assignedResource);
-  private void setUserResourceLimit(SchedulerApp application, 
-      Resource resourceLimit) {
-    application.setAvailableResourceLimit(resourceLimit);
-    metrics.setAvailableResourcesToUser(application.getUser(), resourceLimit);
+  private void computeAndSetUserResourceLimit(SchedulerApp application, 
+      Resource clusterResource) {
+    Resource userLimit = 
+        computeUserLimit(application, clusterResource, Resources.none());
+    application.setAvailableResourceLimit(userLimit);
+    metrics.setAvailableResourcesToUser(application.getUser(), 
+        application.getHeadroom());
-    Container container = 
-          BuilderUtils.newContainer(this.recordFactory,
-              application.getApplicationAttemptId(),
-              application.getNewContainerId(),
-              node.getNodeID(), node.getHttpAddress(), 
-              capability, priority);
+
+    NodeId nodeId = node.getRMNode().getNodeID();
+    ContainerId containerId = BuilderUtils.newContainerId(application
+        .getApplicationAttemptId(), application.getNewContainerId());
+    ContainerToken containerToken = null;
-      ContainerToken containerToken = 
-          this.recordFactory.newRecordInstance(ContainerToken.class);
-      NodeId nodeId = container.getNodeId();
-      ContainerTokenIdentifier tokenidentifier = new ContainerTokenIdentifier(
-          container.getId(), nodeId.toString(), container.getResource());
-      containerToken.setIdentifier(
-          ByteBuffer.wrap(tokenidentifier.getBytes()));
-      containerToken.setKind(ContainerTokenIdentifier.KIND.toString());
-      containerToken.setPassword(
-          ByteBuffer.wrap(
-              containerTokenSecretManager.createPassword(tokenidentifier))
-          );
-      // RPC layer client expects ip:port as service for tokens
-      InetSocketAddress addr = NetUtils.createSocketAddr(nodeId.getHost(),
-          nodeId.getPort());
-      containerToken.setService(addr.getAddress().getHostAddress() + ":"
-          + addr.getPort());
-      container.setContainerToken(containerToken);
+      ContainerTokenIdentifier tokenIdentifier = new ContainerTokenIdentifier(
+          containerId, nodeId.toString(), capability);
+      containerToken = BuilderUtils.newContainerToken(nodeId, ByteBuffer
+          .wrap(containerTokenSecretManager
+              .createPassword(tokenIdentifier)), tokenIdentifier);
+    // Create the container
+    Container container = BuilderUtils.newContainer(containerId, nodeId,
+        node.getRMNode().getHttpAddress(), capability, priority,
+        containerToken);
+
-            application.getUser(), container.getResource());
+            application, container.getResource());
-      String userName, Resource resource) {
+      SchedulerApp application, Resource resource) {
+    String userName = application.getUser();
-    
+    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());
-      String userName, Resource resource) {
+      SchedulerApp application, Resource resource) {
+    String userName = application.getUser();
-    
+    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());
+      
+    // Update queue properties
+    
+    // Update application properties
+    for (SchedulerApp application : activeApplications) {
+      computeAndSetUserResourceLimit(application, clusterResource);
+    }
-      Resources.createResource((int)queueLimit);
+      Resources.createResource(roundUp((int)queueLimit));
-        Resources.subtractFrom(resourceLimit, usedResources));
+      Resources.subtractFrom(resourceLimit, usedResources));
-      allocateResource(clusterResource, application.getUser(), container.getResource());
+      allocateResource(clusterResource, application, container.getResource());

INS26 INS40 UPD42 UPD42 MOV60 MOV60 MOV60 INS25 INS60 UPD43 UPD42 INS60 INS21 UPD43 UPD42 INS60 INS21 INS70 MOV43 INS43 MOV43 MOV32 INS8 MOV43 INS59 UPD42 INS43 INS59 INS32 UPD42 INS43 INS59 INS32 INS44 INS42 INS8 UPD42 INS32 UPD42 INS42 UPD42 INS42 INS33 MOV60 INS21 UPD42 MOV42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS32 UPD40 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 MOV32 MOV32 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 UPD42 UPD42 INS42 INS32 MOV32 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 UPD42 UPD42 UPD42 UPD42 INS60 INS42 INS43 INS59 UPD42 INS42 INS42 MOV32 MOV42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL57 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL40 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL32 DEL21 DEL8 DEL25 DEL42