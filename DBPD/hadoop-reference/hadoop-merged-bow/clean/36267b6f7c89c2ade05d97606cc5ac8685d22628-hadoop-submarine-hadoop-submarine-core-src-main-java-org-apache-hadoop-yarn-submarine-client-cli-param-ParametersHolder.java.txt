SUBMARINE-52. [SUBMARINE-14] Generate Service spec + launch script for single-node PyTorch learning job. Contributed by Szilard Nemeth.

+import org.apache.commons.cli.ParseException;
+import org.apache.hadoop.yarn.submarine.client.cli.Command;
+import org.apache.hadoop.yarn.submarine.client.cli.param.runjob.PyTorchRunJobParameters;
+import org.apache.hadoop.yarn.submarine.client.cli.param.runjob.TensorFlowRunJobParameters;
+import org.apache.hadoop.yarn.submarine.client.cli.param.yaml.YamlParseException;
+import org.apache.hadoop.yarn.submarine.client.cli.runjob.Framework;
+import org.apache.hadoop.yarn.submarine.common.ClientContext;
+import java.io.IOException;
+import java.util.Set;
+import static org.apache.hadoop.yarn.submarine.client.cli.runjob.RunJobCli.YAML_PARSE_FAILED;
+
+  public static final String SUPPORTED_FRAMEWORKS_MESSAGE =
+      "TensorFlow and PyTorch are the only supported frameworks for now!";
+  public static final String SUPPORTED_COMMANDS_MESSAGE =
+      "'Show job' and 'run job' are the only supported commands for now!";
+
+
+
-  private final ImmutableSet onlyDefinedWithCliArgs = ImmutableSet.of(
+  private final ConfigType configType;
+  private Command command;
+  private final Set onlyDefinedWithCliArgs = ImmutableSet.of(
+  private final Framework framework;
+  private final BaseParameters parameters;
-      YamlConfigFile yamlConfig) {
+      YamlConfigFile yamlConfig, ConfigType configType, Command command)
+      throws ParseException, YarnException {
+    this.configType = configType;
+    this.command = command;
+    this.framework = determineFrameworkType();
+    this.ensureOnlyValidSectionsAreDefined(yamlConfig);
+    this.parameters = createParameters();
+  }
+
+  private BaseParameters createParameters() {
+    if (command == Command.RUN_JOB) {
+      if (framework == Framework.TENSORFLOW) {
+        return new TensorFlowRunJobParameters();
+      } else if (framework == Framework.PYTORCH) {
+        return new PyTorchRunJobParameters();
+      } else {
+        throw new UnsupportedOperationException(SUPPORTED_FRAMEWORKS_MESSAGE);
+      }
+    } else if (command == Command.SHOW_JOB) {
+      return new ShowJobParameters();
+    } else {
+      throw new UnsupportedOperationException(SUPPORTED_COMMANDS_MESSAGE);
+    }
+  }
+
+  private void ensureOnlyValidSectionsAreDefined(YamlConfigFile yamlConfig) {
+    if (isCommandRunJob() && isFrameworkPyTorch() &&
+        isPsSectionDefined(yamlConfig)) {
+      throw new YamlParseException(
+          "PS section should not be defined when PyTorch " +
+              "is the selected framework!");
+    }
+
+    if (isCommandRunJob() && isFrameworkPyTorch() &&
+        isTensorboardSectionDefined(yamlConfig)) {
+      throw new YamlParseException(
+          "TensorBoard section should not be defined when PyTorch " +
+              "is the selected framework!");
+    }
+  }
+
+  private boolean isCommandRunJob() {
+    return command == Command.RUN_JOB;
+  }
+
+  private boolean isFrameworkPyTorch() {
+    return framework == Framework.PYTORCH;
+  }
+
+  private boolean isPsSectionDefined(YamlConfigFile yamlConfig) {
+    return yamlConfig != null &&
+        yamlConfig.getRoles() != null &&
+        yamlConfig.getRoles().getPs() != null;
+  }
+
+  private boolean isTensorboardSectionDefined(YamlConfigFile yamlConfig) {
+    return yamlConfig != null &&
+        yamlConfig.getTensorBoard() != null;
+  }
+
+  private Framework determineFrameworkType()
+      throws ParseException, YarnException {
+    if (!isCommandRunJob()) {
+      return null;
+    }
+    String frameworkStr = getOptionValue(CliConstants.FRAMEWORK);
+    if (frameworkStr == null) {
+      LOG.info("Framework is not defined in config, falling back to " +
+          "TensorFlow as a default.");
+      return Framework.TENSORFLOW;
+    }
+    Framework framework = Framework.parseByValue(frameworkStr);
+    if (framework == null) {
+      if (getConfigType() == ConfigType.CLI) {
+        throw new ParseException("Failed to parse Framework type! "
+            + "Valid values are: " + Framework.getValues());
+      } else {
+        throw new YamlParseException(YAML_PARSE_FAILED +
+            ", framework should is defined, but it has an invalid value! " +
+            "Valid values are: " + Framework.getValues());
+      }
+    }
+    return framework;
+    yamlConfigs.put(CliConstants.FRAMEWORK,
+        yamlConfig.getSpec().getFramework());
-  public static ParametersHolder createWithCmdLine(CommandLine cli) {
-    return new ParametersHolder(cli, null);
+  public static ParametersHolder createWithCmdLine(CommandLine cli,
+      Command command) throws ParseException, YarnException {
+    return new ParametersHolder(cli, null, ConfigType.CLI, command);
-      YamlConfigFile yamlConfig) {
-    return new ParametersHolder(cli, yamlConfig);
+      YamlConfigFile yamlConfig, Command command) throws ParseException,
+      YarnException {
+    return new ParametersHolder(cli, yamlConfig, ConfigType.YAML, command);
-  String getOptionValue(String option) throws YarnException {
+  public String getOptionValue(String option) throws YarnException {
-  List<String> getOptionValues(String option) throws YarnException {
+  public List<String> getOptionValues(String option) throws YarnException {
-  boolean hasOption(String option) {
+  public boolean hasOption(String option) {
+
+  public ConfigType getConfigType() {
+    return configType;
+  }
+
+  public Framework getFramework() {
+    return framework;
+  }
+
+  public void updateParameters(ClientContext clientContext)
+      throws ParseException, YarnException, IOException {
+    parameters.updateParameters(this, clientContext);
+  }
+
+  public BaseParameters getParameters() {
+    return parameters;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 UPD43 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS44 INS43 INS43 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS43 INS43 INS8 MOV43 MOV44 INS44 INS43 INS43 MOV43 MOV44 INS44 INS43 INS43 INS83 INS83 INS83 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS25 INS43 INS42 INS25 INS25 INS41 INS41 INS43 INS42 INS41 INS43 INS42 INS41 INS42 INS42 INS42 INS25 INS60 INS25 INS60 INS25 INS41 INS21 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS41 INS42 INS41 INS43 INS42 INS42 INS42 INS42 INS21 INS42 INS41 INS42 INS42 INS7 INS7 INS7 INS32 INS7 INS27 INS8 INS25 INS42 INS27 INS8 INS27 INS8 INS27 INS27 INS42 INS27 INS42 INS27 INS38 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS22 INS42 INS22 INS42 INS22 INS32 INS52 INS42 INS42 INS22 INS32 INS42 INS40 INS25 INS27 INS8 INS8 INS32 INS32 INS32 INS53 INS32 INS32 INS32 INS53 INS42 INS40 INS42 INS40 INS27 INS27 INS27 INS27 INS32 INS41 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS40 INS32 MOV43 INS40 INS42 MOV43 INS40 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS27 INS8 INS25 INS42 INS40 INS41 INS53 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS27 INS27 INS32 INS33 INS42 INS33 INS32 INS33 INS42 INS33 INS42 INS40 INS32 INS40 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS40 INS41 INS27 INS8 INS8 INS14 INS14 INS43 INS27 INS43 INS27 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS40 INS53 INS53 INS42 INS42 INS14 INS42 INS40 INS41 INS53 INS43 INS43 INS42 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS14 INS14 INS43 INS14 INS14 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS43 INS43 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42