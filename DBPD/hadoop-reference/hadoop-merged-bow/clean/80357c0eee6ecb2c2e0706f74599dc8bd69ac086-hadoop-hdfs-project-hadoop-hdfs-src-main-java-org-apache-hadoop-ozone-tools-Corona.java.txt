HDFS-12678. Ozone: Corona: Add statistical information to json output. Contributed by Lokesh Jain.

+import com.codahale.metrics.Histogram;
+import com.codahale.metrics.Snapshot;
+import com.codahale.metrics.UniformReservoir;
-import static java.lang.Math.max;
+  enum CoronaOps {
+    VOLUME_CREATE,
+    BUCKET_CREATE,
+    KEY_CREATE,
+    KEY_WRITE
+  }
+
+  private static final int QUANTILES = 10;
+  private int threadPoolSize;
-  private List<Double> threadThroughput;
+  private ArrayList<Histogram> histograms = new ArrayList<>();
+    for (CoronaOps ops : CoronaOps.values()) {
+      histograms.add(ops.ordinal(), new Histogram(new UniformReservoir()));
+    }
-    threadThroughput = Collections.synchronizedList(new ArrayList<Double>());
-
-    processor = Executors.newFixedThreadPool(Integer.parseInt(numOfThreads));
+    threadPoolSize =
+        min(Integer.parseInt(numOfVolumes), Integer.parseInt(numOfThreads));
+    processor = Executors.newFixedThreadPool(threadPoolSize);
-    int threadCount = Integer.parseInt(numOfThreads);
-
-    String prettyTotalVolumeTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get()),
-            DURATION_FORMAT);
-    String prettyTotalBucketTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get()),
-            DURATION_FORMAT);
-    String prettyTotalKeyCreationTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get()),
-            DURATION_FORMAT);
-    String prettyTotalKeyWriteTime = DurationFormatUtils
-        .formatDuration(TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()),
-            DURATION_FORMAT);
-    long volumeTime =
-        TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get()) / threadCount;
+    long volumeTime = TimeUnit.NANOSECONDS.toMillis(volumeCreationTime.get())
+        / threadPoolSize;
-    long bucketTime =
-        TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get()) / threadCount;
+    long bucketTime = TimeUnit.NANOSECONDS.toMillis(bucketCreationTime.get())
+        / threadPoolSize;
-        TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get()) / threadCount;
+        TimeUnit.NANOSECONDS.toMillis(keyCreationTime.get())
+            / threadPoolSize;
-        TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()) / threadCount;
+        TimeUnit.NANOSECONDS.toMillis(keyWriteTime.get()) / threadPoolSize;
-    out.println("Time spent in volume creation: " + prettyTotalVolumeTime);
-    out.println("Time spent in bucket creation: " + prettyTotalBucketTime);
-    out.println("Time spent in key creation: " + prettyTotalKeyCreationTime);
-    out.println("Time spent in key write: " + prettyTotalKeyWriteTime);
-      CoronaJobInfo jobInfo = new CoronaJobInfo()
-          .setExecTime(execTime)
+
+      String[][] quantileTime =
+          new String[CoronaOps.values().length][QUANTILES + 1];
+      String[] deviations = new String[CoronaOps.values().length];
+      String[] means = new String[CoronaOps.values().length];
+      for (CoronaOps ops : CoronaOps.values()) {
+        Snapshot snapshot = histograms.get(ops.ordinal()).getSnapshot();
+        for (int i = 0; i <= QUANTILES; i++) {
+          quantileTime[ops.ordinal()][i] = DurationFormatUtils.formatDuration(
+              TimeUnit.NANOSECONDS
+                  .toMillis((long) snapshot.getValue((1.0 / QUANTILES) * i)),
+              DURATION_FORMAT);
+        }
+        deviations[ops.ordinal()] = DurationFormatUtils.formatDuration(
+            TimeUnit.NANOSECONDS.toMillis((long) snapshot.getStdDev()),
+            DURATION_FORMAT);
+        means[ops.ordinal()] = DurationFormatUtils.formatDuration(
+            TimeUnit.NANOSECONDS.toMillis((long) snapshot.getMean()),
+            DURATION_FORMAT);
+      }
+
+      CoronaJobInfo jobInfo = new CoronaJobInfo().setExecTime(execTime)
-          .setAverageVolumeCreationTime(prettyAverageVolumeTime)
-          .setAverageBucketCreationTime(prettyAverageBucketTime)
-          .setAverageKeyCreationTime(prettyAverageKeyCreationTime)
-          .setAverageKeyWriteTime(prettyAverageKeyWriteTime)
-          .setTotalVolumeCreationTime(prettyTotalVolumeTime)
-          .setTotalBucketCreationTime(prettyTotalBucketTime)
-          .setTotalKeyCreationTime(prettyTotalKeyCreationTime)
-          .setTotalKeyWriteTime(prettyTotalKeyWriteTime);
+          .setMeanVolumeCreateTime(means[CoronaOps.VOLUME_CREATE.ordinal()])
+          .setDeviationVolumeCreateTime(
+              deviations[CoronaOps.VOLUME_CREATE.ordinal()])
+          .setTenQuantileVolumeCreateTime(
+              quantileTime[CoronaOps.VOLUME_CREATE.ordinal()])
+          .setMeanBucketCreateTime(means[CoronaOps.BUCKET_CREATE.ordinal()])
+          .setDeviationBucketCreateTime(
+              deviations[CoronaOps.BUCKET_CREATE.ordinal()])
+          .setTenQuantileBucketCreateTime(
+              quantileTime[CoronaOps.BUCKET_CREATE.ordinal()])
+          .setMeanKeyCreateTime(means[CoronaOps.KEY_CREATE.ordinal()])
+          .setDeviationKeyCreateTime(deviations[CoronaOps.KEY_CREATE.ordinal()])
+          .setTenQuantileKeyCreateTime(
+              quantileTime[CoronaOps.KEY_CREATE.ordinal()])
+          .setMeanKeyWriteTime(means[CoronaOps.KEY_WRITE.ordinal()])
+          .setDeviationKeyWriteTime(deviations[CoronaOps.KEY_WRITE.ordinal()])
+          .setTenQuantileKeyWriteTime(
+              quantileTime[CoronaOps.KEY_WRITE.ordinal()]);
-    private OzoneVolume volume;
+    private String volumeName;
-    OfflineProcessor(String volumeName) throws Exception {
+    OfflineProcessor(String volumeName) {
-      LOG.trace("Creating volume: {}", volumeName);
-      long start = System.nanoTime();
-      objectStore.createVolume(volumeName);
-      volumeCreationTime.getAndAdd(System.nanoTime() - start);
-      numberOfVolumesCreated.getAndIncrement();
-      volume = objectStore.getVolume(volumeName);
+      this.volumeName = volumeName;
+      LOG.trace("Creating volume: {}", volumeName);
+      long start = System.nanoTime();
+      OzoneVolume volume;
+      try {
+        objectStore.createVolume(volumeName);
+        long volumeCreationDuration = System.nanoTime() - start;
+        volumeCreationTime.getAndAdd(volumeCreationDuration);
+        histograms.get(CoronaOps.VOLUME_CREATE.ordinal())
+            .update(volumeCreationDuration);
+        numberOfVolumesCreated.getAndIncrement();
+        volume = objectStore.getVolume(volumeName);
+      } catch (IOException e) {
+        exception = true;
+        LOG.error("Could not create volume", e);
+        return;
+      }
+
-          long start = System.nanoTime();
+          start = System.nanoTime();
-          bucketCreationTime.getAndAdd(System.nanoTime() - start);
+          long bucketCreationDuration = System.nanoTime() - start;
+          histograms.get(CoronaOps.BUCKET_CREATE.ordinal())
+              .update(bucketCreationDuration);
+          bucketCreationTime.getAndAdd(bucketCreationDuration);
-              keyCreationTime.getAndAdd(System.nanoTime() - keyCreateStart);
+              long keyCreationDuration = System.nanoTime() - keyCreateStart;
+              histograms.get(CoronaOps.KEY_CREATE.ordinal())
+                  .update(keyCreationDuration);
+              keyCreationTime.getAndAdd(keyCreationDuration);
-              threadKeyWriteTime += System.nanoTime() - keyWriteStart;
+              long keyWriteDuration = System.nanoTime() - keyWriteStart;
+              threadKeyWriteTime += keyWriteDuration;
+              histograms.get(CoronaOps.KEY_WRITE.ordinal())
+                  .update(keyWriteDuration);
-      boolean success = threadThroughput.add(
-          (totalBuckets * totalKeys * keySize * 1.0) / TimeUnit.NANOSECONDS
-              .toSeconds(threadKeyWriteTime));
-      if (!success) {
-        LOG.warn("Throughput could not be added for thread id: {}",
-            Thread.currentThread().getId());
-      }
-    private String totalBucketCreationTime;
-    private String totalVolumeCreationTime;
-    private String totalKeyCreationTime;
-    private String totalKeyWriteTime;
-    private String averageBucketCreationTime;
-    private String averageVolumeCreationTime;
-    private String averageKeyCreationTime;
-    private String averageKeyWriteTime;
-    private String[] threadThroughputPerSecond;
-    private String minThreadThroughputPerSecond;
-    private String maxThreadThroughputPerSecond;
+    private String meanVolumeCreateTime;
+    private String deviationVolumeCreateTime;
+    private String[] tenQuantileVolumeCreateTime;
+
+    private String meanBucketCreateTime;
+    private String deviationBucketCreateTime;
+    private String[] tenQuantileBucketCreateTime;
+
+    private String meanKeyCreateTime;
+    private String deviationKeyCreateTime;
+    private String[] tenQuantileKeyCreateTime;
+
+    private String meanKeyWriteTime;
+    private String deviationKeyWriteTime;
+    private String[] tenQuantileKeyWriteTime;
+
-
-      threadThroughputPerSecond = new String[Integer.parseInt(numOfThreads)];
-      double minThreadThroughput = Double.MAX_VALUE, maxThreadThroughput = 0.0,
-          totalThroughput = 0.0;
-      int i = 0;
-      for (Double throughput : Corona.this.threadThroughput) {
-        minThreadThroughput = min(throughput, minThreadThroughput);
-        maxThreadThroughput = max(throughput, maxThreadThroughput);
-        totalThroughput += throughput;
-        threadThroughputPerSecond[i++] = getInStorageUnits(throughput);
-      }
-      minThreadThroughputPerSecond = getInStorageUnits(minThreadThroughput);
-      maxThreadThroughputPerSecond = getInStorageUnits(maxThreadThroughput);
-      totalThroughputPerSecond = getInStorageUnits(totalThroughput);
+      this.totalThroughputPerSecond = getInStorageUnits(
+          (totalBytes * 1.0) / TimeUnit.NANOSECONDS
+              .toSeconds(Corona.this.keyWriteTime.get() / threadPoolSize));
-      if ((long) (value / OzoneConsts.KB) == 0) {
-        size = value / OzoneConsts.KB;
-        unit = OzoneQuota.Units.KB;
-      } else if ((long) (value / OzoneConsts.MB) == 0) {
-        size = value / OzoneConsts.MB;
-        unit = OzoneQuota.Units.MB;
-      } else if ((long) (value / OzoneConsts.GB) == 0) {
-        size = value / OzoneConsts.GB;
-        unit = OzoneQuota.Units.GB;
-      } else if ((long) (value / OzoneConsts.TB) == 0) {
+      if ((long) (value / OzoneConsts.TB) != 0) {
+      } else if ((long) (value / OzoneConsts.GB) != 0) {
+        size = value / OzoneConsts.GB;
+        unit = OzoneQuota.Units.GB;
+      } else if ((long) (value / OzoneConsts.MB) != 0) {
+        size = value / OzoneConsts.MB;
+        unit = OzoneQuota.Units.MB;
+      } else if ((long) (value / OzoneConsts.KB) != 0) {
+        size = value / OzoneConsts.KB;
+        unit = OzoneQuota.Units.KB;
-    public CoronaJobInfo setTotalBucketCreationTime(
-        String totalBucketCreationTimeVal) {
-      totalBucketCreationTime = totalBucketCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setTotalVolumeCreationTime(
-        String totalVolumeCreationTimeVal) {
-      totalVolumeCreationTime = totalVolumeCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setTotalKeyCreationTime(
-        String totalKeyCreationTimeVal) {
-      totalKeyCreationTime = totalKeyCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setTotalKeyWriteTime(String totalKeyWriteTimeVal) {
-      totalKeyWriteTime = totalKeyWriteTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageBucketCreationTime(
-        String averageBucketCreationTimeVal) {
-      averageBucketCreationTime = averageBucketCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageVolumeCreationTime(
-        String averageVolumeCreationTimeVal) {
-      averageVolumeCreationTime = averageVolumeCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageKeyCreationTime(
-        String averageKeyCreationTimeVal) {
-      averageKeyCreationTime = averageKeyCreationTimeVal;
-      return this;
-    }
-
-    public CoronaJobInfo setAverageKeyWriteTime(
-        String averageKeyWriteTimeVal) {
-      averageKeyWriteTime = averageKeyWriteTimeVal;
-      return this;
-    }
-
+    public CoronaJobInfo setMeanKeyWriteTime(String deviationKeyWriteTimeVal) {
+      this.meanKeyWriteTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationKeyWriteTime(
+        String deviationKeyWriteTimeVal) {
+      this.deviationKeyWriteTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileKeyWriteTime(
+        String[] tenQuantileKeyWriteTimeVal) {
+      this.tenQuantileKeyWriteTime = tenQuantileKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setMeanKeyCreateTime(String deviationKeyWriteTimeVal) {
+      this.meanKeyCreateTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationKeyCreateTime(
+        String deviationKeyCreateTimeVal) {
+      this.deviationKeyCreateTime = deviationKeyCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileKeyCreateTime(
+        String[] tenQuantileKeyCreateTimeVal) {
+      this.tenQuantileKeyCreateTime = tenQuantileKeyCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setMeanBucketCreateTime(
+        String deviationKeyWriteTimeVal) {
+      this.meanBucketCreateTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationBucketCreateTime(
+        String deviationBucketCreateTimeVal) {
+      this.deviationBucketCreateTime = deviationBucketCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileBucketCreateTime(
+        String[] tenQuantileBucketCreateTimeVal) {
+      this.tenQuantileBucketCreateTime = tenQuantileBucketCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setMeanVolumeCreateTime(
+        String deviationKeyWriteTimeVal) {
+      this.meanVolumeCreateTime = deviationKeyWriteTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setDeviationVolumeCreateTime(
+        String deviationVolumeCreateTimeVal) {
+      this.deviationVolumeCreateTime = deviationVolumeCreateTimeVal;
+      return this;
+    }
+
+    public CoronaJobInfo setTenQuantileVolumeCreateTime(
+        String[] tenQuantileVolumeCreateTimeVal) {
+      this.tenQuantileVolumeCreateTime = tenQuantileVolumeCreateTimeVal;
+      return this;
+    }
+
-    public String getTotalBucketCreationTime() {
-      return totalBucketCreationTime;
-    }
-
-    public String getTotalVolumeCreationTime() {
-      return totalVolumeCreationTime;
-    }
-
-    public String getTotalKeyCreationTime() {
-      return totalKeyCreationTime;
-    }
-
-    public String getAverageBucketCreationTime() {
-      return averageBucketCreationTime;
-    }
-
-    public String getTotalKeyWriteTime() {
-      return totalKeyWriteTime;
-    }
-
-    public String getAverageKeyWriteTime() {
-      return averageKeyWriteTime;
-    }
-
-    public String getAverageVolumeCreationTime() {
-      return averageVolumeCreationTime;
-    }
-
-    public String getAverageKeyCreationTime() {
-      return averageKeyCreationTime;
-    }
-
-    public String getMinThreadThroughputPerSecond() {
-      return minThreadThroughputPerSecond;
-    }
-
-    public String getMaxThreadThroughputPerSecond() {
-      return maxThreadThroughputPerSecond;
-    }
-
-    public String getTotalThroughput() {
+    public String getTotalThroughputPerSecond() {
+    public String getMeanVolumeCreateTime() {
+      return meanVolumeCreateTime;
+    }
+
+    public String getDeviationVolumeCreateTime() {
+      return deviationVolumeCreateTime;
+    }
+
+    public String[] getTenQuantileVolumeCreateTime() {
+      return tenQuantileVolumeCreateTime;
+    }
+
+    public String getMeanBucketCreateTime() {
+      return meanBucketCreateTime;
+    }
+
+    public String getDeviationBucketCreateTime() {
+      return deviationBucketCreateTime;
+    }
+
+    public String[] getTenQuantileBucketCreateTime() {
+      return tenQuantileBucketCreateTime;
+    }
+
+    public String getMeanKeyCreateTime() {
+      return meanKeyCreateTime;
+    }
+
+    public String getDeviationKeyCreateTime() {
+      return deviationKeyCreateTime;
+    }
+
+    public String[] getTenQuantileKeyCreateTime() {
+      return tenQuantileKeyCreateTime;
+    }
+
+    public String getMeanKeyWriteTime() {
+      return meanKeyWriteTime;
+    }
+
+    public String getDeviationKeyWriteTime() {
+      return deviationKeyWriteTime;
+    }
+
+    public String[] getTenQuantileKeyWriteTime() {
+      return tenQuantileKeyWriteTime;
+    }

MOV26 INS26 INS26 UPD40 INS40 INS40 INS71 INS23 INS23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 INS42 INS72 INS72 INS72 INS72 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 UPD74 MOV21 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS42 INS34 INS42 UPD43 UPD43 UPD42 MOV14 INS70 MOV43 INS59 MOV83 MOV43 INS59 INS83 MOV43 INS59 INS83 MOV43 MOV59 MOV43 INS5 MOV43 INS5 MOV43 MOV43 INS5 UPD42 UPD42 INS83 MOV43 INS42 INS44 INS8 MOV43 UPD42 MOV44 MOV43 UPD42 MOV44 UPD42 INS44 MOV43 UPD42 MOV43 UPD42 MOV44 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 MOV44 INS8 INS43 UPD42 MOV44 INS83 INS43 INS42 INS44 INS8 UPD42 INS83 MOV43 INS42 INS8 MOV43 UPD42 INS5 UPD42 MOV43 UPD42 MOV43 UPD42 INS5 UPD42 UPD42 MOV43 UPD42 INS5 UPD42 MOV43 UPD42 MOV43 UPD42 INS83 INS5 INS42 INS8 UPD42 UPD42 UPD74 INS44 INS32 INS8 INS42 MOV21 MOV60 INS60 INS54 INS42 INS42 UPD42 UPD42 UPD42 INS43 INS85 UPD42 UPD42 UPD42 INS43 INS85 UPD42 UPD42 UPD42 INS43 INS85 UPD42 INS21 MOV25 UPD42 UPD42 MOV5 INS42 INS21 MOV41 UPD42 MOV41 UPD42 MOV41 INS5 INS42 UPD42 MOV41 UPD42 MOV41 INS42 INS5 INS42 INS21 INS41 INS42 UPD42 INS21 INS41 INS42 UPD42 INS41 INS42 INS5 INS42 INS21 INS41 INS41 INS43 INS85 INS43 INS85 INS43 INS85 INS43 INS85 INS41 INS43 INS42 INS42 INS42 INS21 UPD42 UPD42 INS60 INS60 INS60 INS70 INS7 MOV43 MOV59 INS8 INS12 MOV42 INS42 INS42 INS7 UPD27 INS25 INS7 INS43 INS85 INS43 INS85 INS7 INS52 INS7 INS52 INS52 INS43 INS85 INS7 INS52 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS5 INS59 INS5 INS59 INS5 INS59 INS44 INS32 INS8 INS22 INS42 MOV21 INS60 INS21 INS21 MOV21 MOV21 INS44 INS8 INS22 INS32 UPD27 MOV27 MOV8 INS25 INS22 UPD42 INS22 UPD42 INS22 INS42 INS22 UPD42 INS22 UPD42 INS42 INS22 UPD42 INS22 UPD42 INS22 UPD42 INS42 INS22 INS42 INS22 INS42 INS22 UPD42 INS42 INS22 INS42 INS42 INS42 INS32 INS14 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 INS85 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS43 INS42 INS42 INS42 INS60 INS24 INS21 INS21 INS32 INS52 INS42 UPD39 MOV39 INS59 INS32 INS32 INS43 INS42 INS21 MOV21 INS41 INS52 INS42 UPD42 MOV42 INS27 UPD27 MOV27 MOV8 INS25 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS14 INS5 INS22 INS27 INS42 INS5 INS22 INS42 INS5 INS22 INS42 INS43 INS59 INS58 INS27 MOV37 INS8 INS7 INS7 INS32 INS42 INS2 UPD42 MOV42 MOV27 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS7 INS21 INS60 INS21 INS36 INS32 UPD27 MOV27 MOV8 MOV8 INS42 INS43 MOV43 INS85 INS85 INS32 INS42 INS42 INS34 INS43 INS85 INS32 INS42 INS43 INS85 INS32 INS42 INS42 INS42 INS32 INS39 MOV59 INS42 INS42 INS21 INS2 INS32 INS2 INS32 INS32 INS42 INS2 INS42 INS32 INS42 INS42 INS32 INS42 INS9 UPD42 UPD45 UPD42 MOV42 INS7 INS39 INS59 INS32 INS27 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS2 INS42 INS32 INS40 INS42 UPD40 MOV40 UPD42 MOV42 INS42 INS32 INS42 MOV27 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS32 INS2 INS32 INS42 INS42 INS40 INS42 INS11 INS42 INS42 INS40 INS42 INS11 MOV32 INS42 INS2 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS32 MOV22 UPD42 MOV42 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS42 INS39 INS32 INS39 INS32 UPD42 INS2 INS42 INS32 INS40 INS42 INS40 INS42 INS60 INS21 INS60 INS21 UPD42 INS42 INS32 INS40 INS42 INS11 INS42 INS42 INS42 INS42 UPD42 INS2 INS42 INS32 INS40 INS42 INS39 INS59 INS32 INS39 INS59 INS32 INS42 INS42 INS39 INS32 UPD42 INS2 INS42 INS32 INS40 INS42 INS42 MOV27 INS32 INS42 INS42 INS42 INS42 MOV27 INS42 INS32 INS42 INS42 INS42 INS42 INS27 UPD42 INS2 INS42 INS32 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS36 INS42 UPD42 INS2 INS42 INS32 INS40 INS42 INS40 INS42 INS40 INS42 INS27 UPD42 INS2 INS42 INS32 INS40 INS42 INS34 INS42 UPD42 INS2 INS42 INS32 INS40 INS42 UPD42 INS2 INS42 INS32 INS40 INS42 INS42 INS32 INS40 INS42 INS40 INS42 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL34 DEL27 DEL36 DEL32 DEL27 DEL32 DEL59 DEL60 DEL42 DEL38 DEL8 DEL25 DEL23 DEL42 DEL43 DEL43 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL3 DEL7 DEL21 DEL39 DEL42 DEL40 DEL59 DEL42 DEL34 DEL59 DEL42 DEL34 DEL59 DEL60 DEL39 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL25 DEL25 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43