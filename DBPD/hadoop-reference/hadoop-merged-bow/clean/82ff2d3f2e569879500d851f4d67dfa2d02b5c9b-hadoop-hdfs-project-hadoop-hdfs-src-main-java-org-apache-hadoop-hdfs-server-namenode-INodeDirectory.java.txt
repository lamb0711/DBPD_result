HDFS-5286. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithQuota with DirectoryWithQuotaFeature.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545768 13f79535-47bb-0310-9956-ffa450edef68

+  /** Directory related features such as quota and snapshots. */
+  public static abstract class Feature implements INode.Feature<Feature> {
+    private Feature nextFeature;
+
+    @Override
+    public Feature getNextFeature() {
+      return nextFeature;
+    }
+
+    @Override
+    public void setNextFeature(Feature next) {
+      this.nextFeature = next;
+    }
+  }
+
+  
+  /** A linked list of {@link Feature}s. */
+  private Feature headFeature = null;
-  public INodeDirectory(INodeDirectory other, boolean adopt) {
+  public INodeDirectory(INodeDirectory other, boolean adopt, boolean copyFeatures) {
+    if (copyFeatures) {
+      this.headFeature = other.headFeature;
+    }
+  void setQuota(long nsQuota, long dsQuota) {
+    DirectoryWithQuotaFeature quota = getDirectoryWithQuotaFeature();
+    if (quota != null) {
+      // already has quota; so set the quota to the new values
+      quota.setQuota(nsQuota, dsQuota);
+      if (!isQuotaSet() && !isRoot()) {
+        removeFeature(quota);
+      }
+    } else {
+      final Quota.Counts c = computeQuotaUsage();
+      quota = addDirectoryWithQuotaFeature(nsQuota, dsQuota);
+      quota.setSpaceConsumed(c.get(Quota.NAMESPACE), c.get(Quota.DISKSPACE));
+    }
+  }
+
+  @Override
+  public Quota.Counts getQuotaCounts() {
+    final DirectoryWithQuotaFeature q = getDirectoryWithQuotaFeature();
+    return q != null? q.getQuota(): super.getQuotaCounts();
+  }
+
+  @Override
+  public void addSpaceConsumed(long nsDelta, long dsDelta, boolean verify) 
+      throws QuotaExceededException {
+    final DirectoryWithQuotaFeature q = getDirectoryWithQuotaFeature();
+    if (q != null) {
+      q.addSpaceConsumed(this, nsDelta, dsDelta, verify);
+    } else {
+      addSpaceConsumed2Parent(nsDelta, dsDelta, verify);
+    }
+  }
+
+  /**
+   * If the directory contains a {@link DirectoryWithQuotaFeature}, return it;
+   * otherwise, return null.
+   */
+  public final DirectoryWithQuotaFeature getDirectoryWithQuotaFeature() {
+    for(Feature f = headFeature; f != null; f = f.nextFeature) {
+      if (f instanceof DirectoryWithQuotaFeature) {
+        return (DirectoryWithQuotaFeature)f;
+      }
+    }
+    return null;
+  }
+
+  /** Is this directory with quota? */
+  final boolean isWithQuota() {
+    return getDirectoryWithQuotaFeature() != null;
+  }
+
+  DirectoryWithQuotaFeature addDirectoryWithQuotaFeature(
+      long nsQuota, long dsQuota) {
+    Preconditions.checkState(!isWithQuota(), "Directory is already with quota");
+    final DirectoryWithQuotaFeature quota = new DirectoryWithQuotaFeature(
+        nsQuota, dsQuota);
+    addFeature(quota);
+    return quota;
+  }
+
+  private void addFeature(Feature f) {
+    headFeature = INode.Feature.Util.addFeature(f, headFeature);
+  }
+
+  private void removeFeature(Feature f) {
+    headFeature = INode.Feature.Util.removeFeature(f, headFeature);
+  }
+
-  /**
-   * Replace itself with {@link INodeDirectoryWithQuota} or
-   * {@link INodeDirectoryWithSnapshot} depending on the latest snapshot.
-   */
-  INodeDirectoryWithQuota replaceSelf4Quota(final Snapshot latest,
-      final long nsQuota, final long dsQuota, final INodeMap inodeMap)
-      throws QuotaExceededException {
-    Preconditions.checkState(!(this instanceof INodeDirectoryWithQuota),
-        "this is already an INodeDirectoryWithQuota, this=%s", this);
-
-    if (!this.isInLatestSnapshot(latest)) {
-      final INodeDirectoryWithQuota q = new INodeDirectoryWithQuota(
-          this, true, nsQuota, dsQuota);
-      replaceSelf(q, inodeMap);
-      return q;
-    } else {
-      final INodeDirectoryWithSnapshot s = new INodeDirectoryWithSnapshot(this);
-      s.setQuota(nsQuota, dsQuota);
-      return replaceSelf(s, inodeMap).saveSelf2Snapshot(latest, this);
-    }
-  }
-    return replaceSelf(new INodeDirectory(this, true), inodeMap);
+    return replaceSelf(new INodeDirectory(this, true, true), inodeMap);
+    final DirectoryWithQuotaFeature q = getDirectoryWithQuotaFeature();
+    if (q != null) {
+      if (useCache && isQuotaSet()) {
+        q.addNamespaceDiskspace(counts);
+      } else {
+        computeDirectoryQuotaUsage(counts, false, lastSnapshotId);
+      }
+      return counts;
+    } else {
+      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);
+    }
+  }
+
+  Quota.Counts computeDirectoryQuotaUsage(Quota.Counts counts, boolean useCache,
+      int lastSnapshotId) {
+    final DirectoryWithQuotaFeature q = getDirectoryWithQuotaFeature();
+    if (q != null) {
+      return q.computeContentSummary(this, summary);
+    } else {
+      return computeDirectoryContentSummary(summary);
+    }
+  }
+
+  ContentSummaryComputationContext computeDirectoryContentSummary(
+      ContentSummaryComputationContext summary) {
-        ((INodeDirectoryWithQuota) this).addSpaceConsumed2Cache(
+        getDirectoryWithQuotaFeature().addSpaceConsumed2Cache(
-    if (this instanceof INodeDirectoryWithQuota) {
-      out.print(((INodeDirectoryWithQuota)this).quotaString());
+    final DirectoryWithQuotaFeature q = getDirectoryWithQuotaFeature();
+    if (q != null) {
+      out.print(", " + q);

INS55 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS44 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 MOV44 INS44 MOV43 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD42 MOV78 INS83 INS43 INS42 INS44 INS8 UPD42 INS65 INS43 INS43 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV65 INS42 INS42 INS33 INS39 INS42 INS25 INS39 INS42 INS39 INS42 INS60 INS25 INS42 INS40 INS60 INS41 INS42 MOV39 UPD42 MOV42 UPD42 INS39 INS42 INS60 INS25 INS65 INS42 INS24 INS41 INS65 INS41 INS42 INS39 INS42 INS39 INS42 MOV21 MOV60 MOV21 MOV41 INS43 INS42 INS21 INS43 INS42 INS21 INS40 INS43 INS42 INS39 INS42 INS39 INS42 MOV60 INS25 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS66 INS40 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS43 INS42 INS21 UPD66 UPD66 INS42 INS8 INS43 INS59 INS27 INS8 INS8 INS83 INS43 INS59 INS16 INS83 INS43 INS59 INS27 INS8 INS8 INS66 INS65 INS66 INS66 INS58 INS27 INS7 INS8 INS33 INS66 INS27 UPD43 UPD42 INS42 INS7 INS42 INS7 INS40 UPD43 INS27 INS8 INS8 INS42 INS83 INS43 INS59 INS27 INS8 INS8 INS83 INS43 INS59 INS27 MOV8 INS42 INS42 INS7 UPD42 INS21 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 INS25 INS60 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS48 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS43 INS59 INS42 INS33 INS42 INS40 INS25 INS32 INS33 UPD45 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 UPD42 UPD42 INS32 INS42 INS33 INS25 INS41 MOV41 INS42 INS42 INS32 INS42 INS33 INS41 INS41 UPD42 MOV42 INS42 INS32 INS42 INS33 INS22 INS42 INS7 INS42 INS32 INS27 INS8 INS83 INS43 INS59 INS7 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS62 INS8 INS42 INS32 UPD43 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS27 INS8 INS8 INS42 INS42 INS32 INS32 INS42 INS52 INS42 INS22 INS40 INS42 INS42 INS42 INS42 INS38 INS38 INS21 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS41 INS42 UPD42 INS42 INS32 INS21 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS52 INS42 INS42 INS42 INS27 INS52 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS11 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 UPD42 INS9 UPD42 INS32 INS42 INS42 DEL42 DEL65 DEL66 DEL83 DEL52 DEL42 DEL43 DEL62 DEL36 DEL52 DEL52 DEL9 DEL42 DEL29 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL44 DEL83 DEL43 DEL42 DEL44 DEL52 DEL42 DEL42 DEL32 DEL38 DEL8 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL52 DEL14 DEL42 DEL32 DEL42 DEL52 DEL83 DEL83 DEL42 DEL43 DEL52 DEL11 DEL36 DEL42 DEL43 DEL52 DEL11 DEL36 DEL42 DEL32 DEL52 DEL43 DEL62 DEL25