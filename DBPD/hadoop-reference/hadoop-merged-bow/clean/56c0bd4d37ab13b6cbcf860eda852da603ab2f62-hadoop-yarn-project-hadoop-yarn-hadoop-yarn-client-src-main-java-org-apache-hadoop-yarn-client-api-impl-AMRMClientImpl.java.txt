Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1610853 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.AMCommand;
+import org.apache.hadoop.yarn.api.records.ContainerStatus;
+import org.apache.hadoop.yarn.exceptions.ApplicationMasterNotRegisteredException;
+  protected String appHostName;
+  protected int appHostPort;
+  protected String appTrackingUrl;
+
+  // blacklistedNodes is required for keeping history of blacklisted nodes that
+  // are sent to RM. On RESYNC command from RM, blacklistedNodes are used to get
+  // current blacklisted nodes and send back to RM.
+  protected final Set<String> blacklistedNodes = new HashSet<String>();
+  // pendingRelease holds history or release requests.request is removed only if
+  // RM sends completedContainer.
+  // How it different from release? --> release is for per allocate() request.
+  protected Set<ContainerId> pendingRelease = new TreeSet<ContainerId>();
+    this.appHostName = appHostName;
+    this.appHostPort = appHostPort;
+    this.appTrackingUrl = appTrackingUrl;
-    // do this only once ???
+
+    return registerApplicationMaster();
+  }
+
+  private RegisterApplicationMasterResponse registerApplicationMaster()
+      throws YarnException, IOException {
-        RegisterApplicationMasterRequest.newInstance(appHostName, appHostPort,
-          appTrackingUrl);
+        RegisterApplicationMasterRequest.newInstance(this.appHostName,
+            this.appHostPort, this.appTrackingUrl);
-
-      if(!response.getNMTokensFromPreviousAttempts().isEmpty()) {
+      lastResponseId = 0;
+      if (!response.getNMTokensFromPreviousAttempts().isEmpty()) {
+      if (isResyncCommand(allocateResponse)) {
+        LOG.warn("ApplicationMaster is out of sync with ResourceManager,"
+            + " hence resyncing.");
+        synchronized (this) {
+          release.addAll(this.pendingRelease);
+          blacklistAdditions.addAll(this.blacklistedNodes);
+          for (Map<String, TreeMap<Resource, ResourceRequestInfo>> rr : remoteRequestsTable
+              .values()) {
+            for (Map<Resource, ResourceRequestInfo> capabalities : rr.values()) {
+              for (ResourceRequestInfo request : capabalities.values()) {
+                addResourceRequestToAsk(request.remoteRequest);
+              }
+            }
+          }
+        }
+        // re register with RM
+        registerApplicationMaster();
+        return allocate(progressIndicator);
+      }
+        if (!pendingRelease.isEmpty()
+            && !allocateResponse.getCompletedContainersStatuses().isEmpty()) {
+          removePendingReleaseRequests(allocateResponse
+              .getCompletedContainersStatuses());
+        }
+  protected void removePendingReleaseRequests(
+      List<ContainerStatus> completedContainersStatuses) {
+    for (ContainerStatus containerStatus : completedContainersStatuses) {
+      pendingRelease.remove(containerStatus.getContainerId());
+    }
+  }
+
+  private boolean isResyncCommand(AllocateResponse allocateResponse) {
+    return allocateResponse.getAMCommand() != null
+        && allocateResponse.getAMCommand() == AMCommand.AM_RESYNC;
+  }
+
+    } catch (ApplicationMasterNotRegisteredException e) {
+      LOG.warn("ApplicationMaster is out of sync with ResourceManager,"
+          + " hence resyncing.");
+      // re register with RM
+      registerApplicationMaster();
+      unregisterApplicationMaster(appStatus, appMessage, appTrackingUrl);
+    pendingRelease.add(containerId);
+      this.blacklistedNodes.addAll(blacklistAdditions);
+      this.blacklistedNodes.removeAll(blacklistRemovals);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS74 INS59 MOV78 INS83 INS43 INS42 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 UPD83 INS43 INS43 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS21 INS21 INS21 MOV21 MOV21 INS41 INS42 INS42 INS74 INS42 INS70 INS43 INS42 INS41 INS21 INS42 INS42 INS74 INS42 INS42 INS74 INS7 INS7 INS7 INS32 INS43 INS43 INS44 INS42 INS8 INS42 INS27 INS12 INS32 INS43 INS43 INS43 INS43 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS21 INS25 INS42 INS42 INS43 INS42 INS21 INS27 INS27 INS44 INS8 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS7 INS32 INS8 INS42 INS32 INS32 INS33 INS32 INS40 INS43 INS42 INS21 INS21 INS21 INS32 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS34 INS42 INS42 INS21 INS51 INS21 INS41 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS22 INS42 INS42 INS22 INS42 INS42 INS32 INS52 INS8 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS27 INS21 INS21 INS70 INS42 INS42 INS42 INS38 INS38 INS21 INS45 INS45 INS45 INS45 INS32 INS32 INS44 INS32 INS8 INS32 INS32 INS32 INS42 INS42 INS22 INS42 INS42 INS22 INS74 INS42 INS42 INS42 INS70 INS42 INS42 INS32 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS43 INS43 INS74 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS42 INS42 INS70 INS42 INS42 INS42 INS43 INS43 INS43 INS44 INS32 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS40 DEL42 DEL42 DEL42