MAPREDUCE-3008. Improvements to cumulative CPU emulation for short running tasks in Gridmix. (amarrk)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179933 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.TaskCounter;
-          job.setSortComparatorClass(GridmixKey.Comparator.class);
+          job.setSortComparatorClass(LoadSortComparator.class);
+   * This is a load matching key comparator which will make sure that the
+   * resource usage load is matched even when the framework is in control.
+   */
+  public static class LoadSortComparator extends GridmixKey.Comparator {
+    private ResourceUsageMatcherRunner matcher = null;
+    private boolean isConfigured = false;
+    
+    public LoadSortComparator() {
+      super();
+    }
+    
+    @Override
+    public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2) {
+      configure();
+      int ret = super.compare(b1, s1, l1, b2, s2, l2);
+      if (matcher != null) {
+        try {
+          matcher.match(); // match the resource usage now
+        } catch (Exception e) {}
+      }
+      return ret;
+    }
+    
+    //TODO Note that the sorter will be instantiated 2 times as follows
+    //       1. During the sort/spill in the map phase
+    //       2. During the merge in the sort phase
+    // We need the handle to the matcher thread only in (2).
+    // This logic can be relaxed to run only in (2).
+    private void configure() {
+      if (!isConfigured) {
+        ThreadGroup group = Thread.currentThread().getThreadGroup();
+        Thread[] threads = new Thread[group.activeCount() * 2];
+        group.enumerate(threads, true);
+        for (Thread t : threads) {
+          if (t != null && (t instanceof ResourceUsageMatcherRunner)) {
+            this.matcher = (ResourceUsageMatcherRunner) t;
+            isConfigured = true;
+            break;
+          }
+        }
+      }
+    }
+  }
+  
+  /**
-  static class ResourceUsageMatcherRunner extends Thread {
+  static class ResourceUsageMatcherRunner extends Thread 
+  implements Progressive {
-    private final Progressive progress;
+    private final BoostingProgress progress;
+    /**
+     * This is a progress bar that can be boosted for weaker use-cases.
+     */
+    private static class BoostingProgress implements Progressive {
+      private float boostValue = 0f;
+      TaskInputOutputContext context;
+      
+      BoostingProgress(TaskInputOutputContext context) {
+        this.context = context;
+      }
+      
+      void setBoostValue(float boostValue) {
+        this.boostValue = boostValue;
+      }
+      
+      @Override
+      public float getProgress() {
+        return Math.min(1f, context.getProgress() + boostValue);
+      }
+    }
+    
-      progress = new Progressive() {
-        @Override
-        public float getProgress() {
-          return context.getProgress();
-        }
-      };
+      progress = new BoostingProgress(context);
-    protected void match() throws Exception {
+    protected void match() throws IOException, InterruptedException {
+    
+    @Override
+    public float getProgress() {
+      return matcher.getProgress();
+    }
+    
+    // boost the progress bar as fasten up the emulation cycles.
+    void boost(float value) {
+      progress.setBoostValue(value);
+    }
-    private TaskAttemptContext context;
-    StatusReporter(TaskAttemptContext context) {
+    private final TaskAttemptContext context;
+    private final Progressive progress;
+    
+    StatusReporter(TaskAttemptContext context, Progressive progress) {
+      this.progress = progress;
-        while (context.getProgress() < 1) {
+        while (!isInterrupted() && progress.getProgress() < 1) {
-      reporter = new StatusReporter(ctxt);
+      reporter = new StatusReporter(ctxt, matcher);
+      // check if the thread will get a chance to run or not
+      //  check if there will be a sort&spill->merge phase or not
+      //  check if the final sort&spill->merge phase is gonna happen or not
+      if (context.getNumReduceTasks() > 0 
+          && context.getCounter(TaskCounter.SPILLED_RECORDS).getValue() == 0) {
+        LOG.info("Boosting the map phase progress.");
+        // add the sort phase progress to the map phase and emulate
+        matcher.boost(0.33f);
+        matcher.match();
+      }
+      
-      reporter = new StatusReporter(context);
+      reporter = new StatusReporter(context, matcher);
-          LOG.debug(String.format("SPEC(%d) %d -> %d %d %d", id(), i,
+          LOG.debug(String.format("SPEC(%d) %d -> %d %d %d %d %d %d %d", id(), i,
-                    info.getOutputBytes()));
+                    info.getOutputBytes(), 
+                    info.getResourceUsageMetrics().getCumulativeCpuUsage(),
+                    info.getResourceUsageMetrics().getPhysicalMemoryUsage(),
+                    info.getResourceUsageMetrics().getVirtualMemoryUsage(),
+                    info.getResourceUsageMetrics().getHeapUsage()));

INS26 INS40 INS55 INS29 INS83 INS83 INS42 MOV43 INS23 INS23 INS31 INS31 INS31 INS43 INS23 INS55 INS31 INS31 MOV23 INS65 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS42 INS8 MOV78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS43 INS43 INS78 INS83 INS39 INS42 INS8 INS39 INS42 INS44 INS8 INS83 INS44 INS66 INS66 INS42 INS42 INS33 INS42 INS9 INS46 INS5 INS42 INS39 INS42 INS39 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS21 INS60 INS25 INS41 INS25 INS42 INS42 INS65 INS42 INS83 INS39 INS59 INS43 INS59 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS41 INS39 INS42 INS21 MOV43 INS42 INS21 INS21 INS25 MOV21 INS39 INS85 INS39 INS85 INS32 INS39 INS59 INS27 INS8 INS42 INS38 INS8 INS66 INS42 INS34 INS42 INS42 INS43 INS42 INS21 INS39 INS42 INS21 INS42 INS41 INS32 INS32 INS7 INS7 INS27 INS8 INS42 INS42 INS48 INS42 INS33 INS54 INS42 INS60 INS60 INS21 INS70 INS42 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS14 INS27 INS27 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS43 INS59 INS5 INS59 INS32 INS44 INS42 INS8 INS22 INS42 INS22 INS42 INS42 INS42 INS34 INS27 INS43 INS42 INS52 INS42 INS27 MOV43 INS42 INS42 INS32 INS34 INS32 INS34 INS32 INS32 INS32 UPD42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS9 INS43 INS42 INS25 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS38 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS32 MOV43 INS42 INS32 INS42 INS42 INS5 INS27 INS42 INS27 INS8 INS42 INS42 INS32 MOV32 MOV34 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS34 INS27 INS36 INS21 INS21 INS10 INS42 UPD42 INS42 INS42 INS42 INS42 INS33 INS62 INS7 INS7 INS43 INS42 INS43 INS22 INS11 INS42 INS9 UPD45 INS32 INS32 INS32 INS32 INS42 INS42 INS52 INS42 INS43 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL27 DEL42 DEL42 DEL14 DEL7 DEL21