YARN-4148. When killing app, RM releases app's resource before they are released by NM. Contributed by Jason Lowe.

-  protected final Map<ContainerId, RMContainer> launchedContainers =
+  private final Map<ContainerId, ContainerInfo> launchedContainers =
-  public synchronized void allocateContainer(RMContainer rmContainer) {
+  public void allocateContainer(RMContainer rmContainer) {
+    allocateContainer(rmContainer, false);
+  }
+
+  /**
+   * The Scheduler has allocated containers on this node to the given
+   * application.
+   * @param rmContainer Allocated container
+   * @param launchedOnNode True if the container has been launched
+   */
+  private synchronized void allocateContainer(RMContainer rmContainer,
+      boolean launchedOnNode) {
-    launchedContainers.put(container.getId(), rmContainer);
+    launchedContainers.put(container.getId(),
+        new ContainerInfo(rmContainer, launchedOnNode));
-   * @param container Container to be released.
+   * @param containerId ID of container to be released.
+   * @param releasedByNode whether the release originates from a node update.
-  public synchronized void releaseContainer(Container container) {
-    if (!isValidContainer(container.getId())) {
-      LOG.error("Invalid container released " + container);
+  public synchronized void releaseContainer(ContainerId containerId,
+      boolean releasedByNode) {
+    ContainerInfo info = launchedContainers.get(containerId);
+    if (info == null) {
-    // Remove the containers from the nodemanger
-    if (null != launchedContainers.remove(container.getId())) {
-      updateResourceForReleasedContainer(container);
+    if (!releasedByNode && info.launchedOnNode) {
+      // wait until node reports container has completed
+      return;
+    launchedContainers.remove(containerId);
+    Container container = info.container.getContainer();
+    updateResourceForReleasedContainer(container);
+
+   * Inform the node that a container has launched.
+   * @param containerId ID of the launched container
+   */
+  public synchronized void containerStarted(ContainerId containerId) {
+    ContainerInfo info = launchedContainers.get(containerId);
+    if (info != null) {
+      info.launchedOnNode = true;
+    }
+  }
+
+  /**
-    return new ArrayList<RMContainer>(launchedContainers.values());
+    List<RMContainer> result = new ArrayList<>(launchedContainers.size());
+    for (ContainerInfo info : launchedContainers.values()) {
+      result.add(info.container);
+    }
+    return result;
+  }
+
+  /**
+   * Get the container for the specified container ID.
+   * @param containerId The container ID
+   * @return The container for the specified container ID
+   */
+  protected synchronized RMContainer getContainer(ContainerId containerId) {
+    RMContainer container = null;
+    ContainerInfo info = launchedContainers.get(containerId);
+    if (info != null) {
+      container = info.container;
+    }
+    return container;
-    allocateContainer(rmContainer);
+    allocateContainer(rmContainer, true);
+
+
+  private static class ContainerInfo {
+    private final RMContainer container;
+    private boolean launchedOnNode;
+
+    public ContainerInfo(RMContainer container, boolean launchedOnNode) {
+      this.container = container;
+      this.launchedOnNode = launchedOnNode;
+    }
+  }

INS31 INS31 INS31 INS55 UPD83 UPD74 MOV29 INS83 INS39 INS42 INS44 INS8 INS29 UPD83 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 MOV43 INS42 INS44 INS8 INS83 INS83 INS42 INS23 INS23 INS31 INS43 INS43 INS42 INS21 INS65 INS65 INS65 INS39 INS42 INS65 INS43 UPD42 INS39 INS42 INS60 INS25 INS25 INS21 INS60 MOV21 INS65 INS65 INS43 INS42 INS60 INS25 INS60 INS70 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS60 INS25 INS41 INS83 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 UPD42 UPD66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS32 MOV43 INS59 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS74 INS59 INS44 MOV32 INS8 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS42 INS42 INS9 INS14 INS42 INS42 INS32 INS42 INS33 INS41 INS38 INS40 MOV41 MOV42 MOV42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 INS9 INS42 INS7 INS7 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 UPD42 MOV42 INS42 INS42 INS42 INS7 INS42 INS42 UPD74 MOV74 INS32 INS42 INS32 INS42 INS42 INS42 INS7 INS22 INS42 INS22 INS42 INS42 INS40 INS9 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS52 INS42 INS52 INS42 DEL42 DEL42 DEL32 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL33 DEL42 DEL32 DEL32 DEL27 DEL8 DEL25 DEL14 DEL41