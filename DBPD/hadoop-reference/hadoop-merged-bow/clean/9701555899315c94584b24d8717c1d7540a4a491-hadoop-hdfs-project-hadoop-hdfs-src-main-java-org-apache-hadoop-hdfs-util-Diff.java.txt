HDFS-4534. Add INodeReference in order to support rename with snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68

+  public static enum ListType {
+    CREATED, DELETED
+  }
+
-  public List<E> getCreatedList() {
-    return created == null? Collections.<E>emptyList(): created;
+  public List<E> getList(final ListType type) {
+    final List<E> list = type == ListType.CREATED? created: deleted;
+    return list == null? Collections.<E>emptyList(): list;
-  /** @return the deleted list, which is never null. */
-  public List<E> getDeletedList() {
-    return deleted == null? Collections.<E>emptyList(): deleted;
-  }
-
-  public int searchCreatedIndex(final K name) {
-    return search(created, name);
+  public int searchIndex(final ListType type, final K name) {
+    return search(getList(type), name);
-   *         otherwise, return the element in the c-list.
+   *         otherwise, return the element in the created/deleted list.
-  public E searchCreated(final K name) {
-    final int c = searchCreatedIndex(name);
-    return c < 0 ? null : created.get(c);
-  }
-  
-  /**
-   * @return null if the element is not found;
-   *         otherwise, return the element in the d-list.
-   */
-  public E searchDeleted(final K name) {
-    final int d = search(deleted, name);
-    return d < 0 ? null : deleted.get(d);
+  public E search(final ListType type, final K name) {
+    final List<E> list = getList(type); 
+    final int c = search(list, name);
+    return c < 0 ? null : list.get(c);
-   * Insert the element to created.
+   * Insert the given element to the created/deleted list.
-  private void insertCreated(final E element, final int i) {
+  private void insert(final ListType type, final E element, final int i) {
+    List<E> list = type == ListType.CREATED? created: deleted; 
-          + ", created=" + created);
+          + ", " + type + "=" + list);
-    if (created == null) {
-      created = new ArrayList<E>(DEFAULT_ARRAY_INITIAL_CAPACITY);
+    if (list == null) {
+      list = new ArrayList<E>(DEFAULT_ARRAY_INITIAL_CAPACITY);
+      if (type == ListType.CREATED) {
+        created = list;
+      } else if (type == ListType.DELETED){
+        deleted = list;
+      }
-    created.add(-i - 1, element);
-  }
-
-  /**
-   * Insert the element to deleted.
-   * @param i the insertion point defined
-   *          in {@link Collections#binarySearch(List, Object)}
-   */
-  private void insertDeleted(final E element, final int i) {
-    if (i >= 0) {
-      throw new AssertionError("Element already exists: element=" + element
-          + ", deleted=" + deleted);
-    }
-    if (deleted == null) {
-      deleted = new ArrayList<E>(DEFAULT_ARRAY_INITIAL_CAPACITY);
-    }
-    deleted.add(-i - 1, element);
+    list.add(-i - 1, element);
-    insertCreated(element, c);
+    insert(ListType.CREATED, element, c);
-      insertDeleted(element, d);
+      insert(ListType.DELETED, element, d);
-        insertCreated(newElement, c);
-        insertDeleted(oldElement, d);
+        insert(ListType.CREATED, newElement, c);
+        insert(ListType.DELETED, oldElement, d);
-    return apply2Previous(previous, getCreatedList(), getDeletedList());
+    return apply2Previous(previous,
+        getList(ListType.CREATED), getList(ListType.DELETED));
-    return apply2Previous(current, getDeletedList(), getCreatedList());
+    return apply2Previous(current,
+        getList(ListType.DELETED), getList(ListType.CREATED));
-    final Iterator<E> createdIterator = posterior.getCreatedList().iterator();
-    final Iterator<E> deletedIterator = posterior.getDeletedList().iterator();
+    final Iterator<E> createdIterator = posterior.getList(ListType.CREATED).iterator();
+    final Iterator<E> deletedIterator = posterior.getList(ListType.DELETED).iterator();
-        +  "{created=" + getCreatedList()
-        + ", deleted=" + getDeletedList() + "}";
+        +  "{created=" + getList(ListType.CREATED)
+        + ", deleted=" + getList(ListType.DELETED) + "}";

INS71 INS31 INS83 INS83 INS42 INS72 INS72 MOV29 MOV74 UPD42 INS44 UPD42 MOV44 MOV29 MOV83 MOV43 UPD42 MOV42 INS44 MOV44 INS8 UPD42 INS44 INS42 INS42 INS83 INS43 INS42 INS60 UPD43 UPD42 INS83 INS43 INS42 INS60 MOV60 MOV41 INS83 INS43 INS42 INS60 INS42 INS83 MOV74 INS59 UPD42 UPD66 INS42 INS83 INS74 INS59 UPD66 INS42 INS74 INS59 MOV74 MOV74 INS42 INS16 UPD42 INS32 INS43 INS43 INS42 INS32 UPD42 MOV27 INS43 INS43 INS42 INS16 UPD42 INS25 UPD42 UPD42 INS40 INS27 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS27 INS8 INS25 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 INS42 INS40 INS42 INS40 UPD42 INS42 INS40 INS21 INS27 INS8 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD45 UPD42 INS45 INS42 INS7 INS42 INS40 INS21 INS42 INS42 INS7 UPD42 INS40 UPD42 INS40 INS42 INS42 DEL83 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL16 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL34 DEL27 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL42 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL66 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31