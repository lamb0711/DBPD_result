Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

-    INITIALIZE_JOB(0),
+    INITIALIZE_CONTAINER(0),
-    DELETE_AS_USER(3),
-    DELETE_LOG_AS_USER(4);
+    DELETE_AS_USER(3);
-    INVALID_TASK_PID(9),
-    INVALID_TASKCONTROLLER_PERMISSIONS(22),
+    UNABLE_TO_EXECUTE_CONTAINER_SCRIPT(7),
+    INVALID_CONTAINER_PID(9),
+    INVALID_CONTAINER_EXEC_PERMISSIONS(22),
-                    Integer.toString(Commands.INITIALIZE_JOB.getValue()),
+                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),
+    String javaLibPath = System.getProperty("java.library.path");
+    if (javaLibPath != null) {
+      command.add("-Djava.library.path=" + javaLibPath);
+    }
-    List<String> command = new ArrayList<String>(
-      Arrays.asList(containerExecutorExe, 
-                    user, 
-                    Integer.toString(Commands.LAUNCH_CONTAINER.getValue()),
-                    appId,
-                    containerIdStr,
-                    containerWorkDir.toString(),
-                    nmPrivateCotainerScriptPath.toUri().getPath().toString(),
-                    nmPrivateTokensPath.toUri().getPath().toString()));
-    String[] commandArray = command.toArray(new String[command.size()]);
-    ShellCommandExecutor shExec = 
-        new ShellCommandExecutor(
-            commandArray,
-            null,                                              // NM's cwd
-            container.getLaunchContext().getEnvironment());    // sanitized env
-    launchCommandObjs.put(containerId, shExec);
-    // DEBUG
-    LOG.info("launchContainer: " + Arrays.toString(commandArray));
-    String output = shExec.getOutput();
+
+    ShellCommandExecutor shExec = null;
+
-      shExec.execute();
-      if (LOG.isDebugEnabled()) {
-        logOutput(output);
+      Path pidFilePath = getPidFilePath(containerId);
+      if (pidFilePath != null) {
+        List<String> command = new ArrayList<String>(Arrays.asList(
+            containerExecutorExe, user, Integer
+                .toString(Commands.LAUNCH_CONTAINER.getValue()), appId,
+            containerIdStr, containerWorkDir.toString(),
+            nmPrivateCotainerScriptPath.toUri().getPath().toString(),
+            nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath
+                .toString()));
+        String[] commandArray = command.toArray(new String[command.size()]);
+        shExec = new ShellCommandExecutor(commandArray, null, // NM's cwd
+            container.getLaunchContext().getEnvironment()); // sanitized env
+        // DEBUG
+        LOG.info("launchContainer: " + Arrays.toString(commandArray));
+        shExec.execute();
+        if (LOG.isDebugEnabled()) {
+          logOutput(shExec.getOutput());
+        }
+      } else {
+        LOG.info("Container was marked as inactive. Returning terminated error");
+        return ExitCode.TERMINATED.getExitCode();
+
+      if (null == shExec) {
+        return -1;
+      }
+
-      if (exitCode != 143 && exitCode != 137) {
+      if (exitCode != ExitCode.FORCE_KILLED.getExitCode()
+          && exitCode != ExitCode.TERMINATED.getExitCode()) {
-        logOutput(output);
+        logOutput(shExec.getOutput());
-            + StringUtils.stringifyException(e) + "\n" + output;
+            + StringUtils.stringifyException(e) + "\n" + shExec.getOutput();
-      launchCommandObjs.remove(containerId);
+      ; //
-      logOutput(output);
+      logOutput(shExec.getOutput());
-      if (ret_code == ResultCode.INVALID_TASK_PID.getValue()) {
+      if (ret_code == ResultCode.INVALID_CONTAINER_PID.getValue()) {

INS72 UPD42 INS42 INS34 UPD42 UPD42 INS60 INS25 MOV43 INS59 INS27 INS8 INS8 INS8 INS42 INS32 INS42 INS33 INS21 INS33 INS60 INS25 INS20 INS42 INS42 INS45 INS32 INS43 INS59 INS27 INS8 INS8 INS25 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 MOV60 MOV60 INS21 MOV21 MOV21 MOV25 MOV21 INS41 INS27 INS8 INS32 INS45 INS42 INS42 INS42 INS7 INS32 INS33 INS42 INS41 INS42 UPD42 MOV42 UPD40 INS42 MOV14 UPD42 UPD42 INS45 INS40 INS42 INS38 INS32 INS32 UPD40 INS34 INS40 INS42 INS40 INS42 INS32 INS32 INS32 INS42 UPD42 MOV42 MOV32 INS42 INS42 INS42 UPD42 MOV42 DEL42 DEL34 DEL72 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL8 DEL34 DEL34 DEL42 DEL8