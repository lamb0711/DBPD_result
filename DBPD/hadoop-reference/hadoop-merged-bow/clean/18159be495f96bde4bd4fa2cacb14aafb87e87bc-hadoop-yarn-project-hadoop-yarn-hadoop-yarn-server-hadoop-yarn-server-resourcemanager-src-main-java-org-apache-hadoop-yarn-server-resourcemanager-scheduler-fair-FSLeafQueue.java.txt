Merging r1544666 through r1547120 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1547122 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-  private final List<AppSchedulable> appScheds = 
+  private final List<AppSchedulable> runnableAppScheds = // apps that are runnable
+      new ArrayList<AppSchedulable>();
+  private final List<AppSchedulable> nonRunnableAppScheds =
-  public void addApp(FSSchedulerApp app) {
+  public void addApp(FSSchedulerApp app, boolean runnable) {
-    appScheds.add(appSchedulable);
+    if (runnable) {
+      runnableAppScheds.add(appSchedulable);
+    } else {
+      nonRunnableAppScheds.add(appSchedulable);
+    }
-    appScheds.add(appSched);
+    runnableAppScheds.add(appSched);
-  public void removeApp(FSSchedulerApp app) {
-    for (Iterator<AppSchedulable> it = appScheds.iterator(); it.hasNext();) {
-      AppSchedulable appSched = it.next();
-      if (appSched.getApp() == app) {
-        it.remove();
-        break;
-      }
+  /**
+   * Removes the given app from this queue.
+   * @return whether or not the app was runnable
+   */
+  public boolean removeApp(FSSchedulerApp app) {
+    if (runnableAppScheds.remove(app.getAppSchedulable())) {
+      return true;
+    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {
+      return false;
+    } else {
+      throw new IllegalStateException("Given app to remove " + app +
+          " does not exist in queue " + this);
-  public Collection<AppSchedulable> getAppSchedulables() {
-    return appScheds;
+  public void makeAppRunnable(AppSchedulable appSched) {
+    if (!nonRunnableAppScheds.remove(appSched)) {
+      throw new IllegalStateException("Can't make app runnable that does not " +
+      		"already exist in queue as non-runnable" + appSched);
+    }
+    
+    runnableAppScheds.add(appSched);
+  }
+  
+  public Collection<AppSchedulable> getRunnableAppSchedulables() {
+    return runnableAppScheds;
+  }
+  
+  public List<AppSchedulable> getNonRunnableAppSchedulables() {
+    return nonRunnableAppScheds;
-    policy.computeShares(getAppSchedulables(), getFairShare());
+    policy.computeShares(getRunnableAppSchedulables(), getFairShare());
-    for (AppSchedulable app : appScheds) {
+    for (AppSchedulable app : runnableAppScheds) {
+      Resources.addTo(usage, app.getResourceUsage());
+    }
+    for (AppSchedulable app : nonRunnableAppScheds) {
-    for (AppSchedulable sched : appScheds) {
-      sched.updateDemand();
-      Resource toAdd = sched.getDemand();
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Counting resource from " + sched.getName() + " " + toAdd
-            + "; Total resource consumption for " + getName() + " now "
-            + demand);
-      }
-      demand = Resources.add(demand, toAdd);
-      demand = Resources.componentwiseMin(demand, maxRes);
+    for (AppSchedulable sched : runnableAppScheds) {
+      updateDemandForApp(sched, maxRes);
+    }
+    for (AppSchedulable sched : nonRunnableAppScheds) {
+      if (Resources.equals(demand, maxRes)) {
+        break;
+      }
+      updateDemandForApp(sched, maxRes);
+  
+  private void updateDemandForApp(AppSchedulable sched, Resource maxRes) {
+    sched.updateDemand();
+    Resource toAdd = sched.getDemand();
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Counting resource from " + sched.getName() + " " + toAdd
+          + "; Total resource consumption for " + getName() + " now "
+          + demand);
+    }
+    demand = Resources.add(demand, toAdd);
+    demand = Resources.componentwiseMin(demand, maxRes);
+  }
-    Collections.sort(appScheds, comparator);
-    for (AppSchedulable sched : appScheds) {
-      if (sched.getRunnable()) {
-        if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {
-          continue;
-        }
+    Collections.sort(runnableAppScheds, comparator);
+    for (AppSchedulable sched : runnableAppScheds) {
+      if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {
+        continue;
+      }
-        assigned = sched.assignContainer(node);
-        if (!assigned.equals(Resources.none())) {
-          break;
-        }
+      assigned = sched.assignContainer(node);
+      if (!assigned.equals(Resources.none())) {
+        break;
+
+  @Override
+  public int getNumRunnableApps() {
+    return runnableAppScheds.size();
+  }

INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS44 INS29 MOV83 UPD39 MOV39 MOV42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 UPD42 INS83 INS74 INS42 INS8 MOV78 INS83 INS39 INS42 MOV8 UPD83 UPD42 MOV44 INS44 MOV8 MOV8 INS78 INS83 INS39 INS42 INS8 UPD42 INS43 INS43 INS42 INS14 INS39 INS42 INS25 INS65 INS65 INS25 INS43 INS42 INS25 MOV21 INS43 INS43 INS41 INS70 INS70 INS43 INS42 MOV60 MOV25 MOV25 MOV60 INS21 INS70 MOV41 INS42 INS41 INS42 INS42 INS74 INS42 INS8 INS8 INS66 INS66 INS32 INS8 INS25 MOV42 INS38 INS8 UPD42 INS42 INS42 INS42 UPD42 INS44 INS42 INS8 INS44 UPD42 INS8 INS44 INS42 INS8 INS42 INS32 MOV44 INS42 MOV8 INS32 INS43 INS43 MOV21 INS21 UPD42 INS42 INS42 INS32 INS41 INS32 INS8 INS8 INS32 INS53 UPD42 UPD42 INS42 INS43 INS42 INS21 INS43 INS42 MOV25 INS21 INS43 INS42 INS25 INS21 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS41 INS53 UPD42 MOV42 UPD42 MOV42 MOV42 INS14 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS8 INS32 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS9 INS14 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS10 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS45 UPD42 MOV42 INS42 INS42 INS42 INS45 INS42 INS45 INS52 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL27 DEL10 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL32 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL70 DEL8