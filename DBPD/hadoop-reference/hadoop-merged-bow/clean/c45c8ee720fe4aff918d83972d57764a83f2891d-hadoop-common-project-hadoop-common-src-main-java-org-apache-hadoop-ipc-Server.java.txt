Complete commit of prior merge.

The previous merge accidentally only committed the hdfs project instead of common and MR
as well.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1463203 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.UndeclaredThrowableException;
+import org.apache.hadoop.io.DataOutputBuffer;
+import com.google.protobuf.CodedOutputStream;
-  public static final byte CURRENT_VERSION = 8;
+  // 9 : Changes to protocol for HADOOP-8990
+  public static final byte CURRENT_VERSION = 9;
+  /** Returns the RPC remote user when invoked inside an RPC.  Note this
+   *  may be different than the current user if called within another doAs
+   *  @return connection's UGI or null if not an RPC
+   */
+  public static UserGroupInformation getRemoteUser() {
+    Call call = CurCall.get();
+    return (call != null) ? call.connection.user : null;
+  }
+  @VisibleForTesting
+  List<Connection> getConnections() {
+    return connectionList;
+  }
+
+    private int serviceClass;
-          AUDITLOG.warn(AUTH_FAILED_FOR + clientIP + ":" + attemptingUser);
+          AUDITLOG.warn(AUTH_FAILED_FOR + clientIP + ":" + attemptingUser +
+            " (" + e.getLocalizedMessage() + ")");
-            connectionHeaderBuf = ByteBuffer.allocate(3);
+            connectionHeaderBuf = ByteBuffer.allocate(4);
-          byte[] method = new byte[] {connectionHeaderBuf.get(1)};
+          // TODO we should add handler for service class later
+          this.setServiceClass(connectionHeaderBuf.get(1));
+
+          byte[] method = new byte[] {connectionHeaderBuf.get(2)};
-              .fromByte(connectionHeaderBuf.get(2));
+              .fromByte(connectionHeaderBuf.get(3));
-      if (clientVersion >= 3) {
+      if (clientVersion >= 9) {
+        // Versions >>9  understand the normal response
-        // Versions 3 and greater can interpret this exception
-        // response in the same manner
+        setupResponse(buffer, fakeCall, RpcStatusProto.FATAL,
+            null, VersionMismatch.class.getName(), errMsg);
+        responder.doRespond(fakeCall);
+      } else if (clientVersion >= 3) {
+        Call fakeCall =  new Call(-1, null, this);
+        // Versions 3 to 8 use older response
-        if (user != null) {
-          user.setAuthenticationMethod(AuthMethod.SIMPLE);
-        }
+    /**
+     * Get service class for connection
+     * @return the serviceClass
+     */
+    public int getServiceClass() {
+      return serviceClass;
+    }
+
+    /**
+     * Set service class for connection
+     * @param serviceClass the serviceClass to set
+     */
+    public void setServiceClass(int serviceClass) {
+      this.serviceClass = serviceClass;
+    }
+
+            if (e instanceof UndeclaredThrowableException) {
+              e = e.getCause();
+            }
-    RpcResponseHeaderProto.Builder response =  
+    RpcResponseHeaderProto.Builder headerBuilder =  
-    response.setCallId(call.callId);
-    response.setStatus(status);
-
+    headerBuilder.setCallId(call.callId);
+    headerBuilder.setStatus(status);
+    headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);
+      RpcResponseHeaderProto header = headerBuilder.build();
+      final int headerLen = header.getSerializedSize();
+      int fullLength  = CodedOutputStream.computeRawVarint32Size(headerLen) +
+          headerLen;
-        response.build().writeDelimitedTo(out);
-        rv.write(out);
+        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {
+          ProtobufRpcEngine.RpcWrapper resWrapper = 
+              (ProtobufRpcEngine.RpcWrapper) rv;
+          fullLength += resWrapper.getLength();
+          out.writeInt(fullLength);
+          header.writeDelimitedTo(out);
+          rv.write(out);
+        } else { // Have to serialize to buffer to get len
+          final DataOutputBuffer buf = new DataOutputBuffer();
+          rv.write(buf);
+          byte[] data = buf.getData();
+          fullLength += buf.getLength();
+          out.writeInt(fullLength);
+          header.writeDelimitedTo(out);
+          out.write(data, 0, buf.getLength());
+        }
-    } else {
-      if (status == RpcStatusProto.FATAL) {
-        response.setServerIpcVersionNum(Server.CURRENT_VERSION);
-      }
-      response.build().writeDelimitedTo(out);
-      WritableUtils.writeString(out, errorClass);
-      WritableUtils.writeString(out, error);
+    } else { // Rpc Failure
+      headerBuilder.setExceptionClassName(errorClass);
+      headerBuilder.setErrorMsg(error);
+      RpcResponseHeaderProto header = headerBuilder.build();
+      int headerLen = header.getSerializedSize();
+      final int fullLength  = 
+          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;
+      out.writeInt(fullLength);
+      header.writeDelimitedTo(out);

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS8 INS78 INS74 INS42 INS8 INS23 INS31 INS31 UPD34 INS65 INS65 INS42 INS60 INS41 INS42 INS43 INS43 INS41 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS21 INS66 INS66 INS66 INS43 INS59 INS16 INS42 INS42 INS42 INS42 INS25 INS65 INS65 INS41 INS65 INS65 INS39 INS42 INS21 INS32 INS42 INS42 INS32 INS36 INS40 INS33 INS27 INS8 MOV25 MOV8 INS66 INS66 INS42 INS66 INS42 INS66 INS7 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS60 INS60 INS60 INS21 MOV21 INS60 INS60 INS60 INS42 INS42 INS27 INS42 INS34 INS60 INS21 INS21 MOV21 INS22 INS42 INS43 INS59 INS83 INS39 INS59 INS39 INS59 INS8 INS32 INS43 INS59 INS39 INS59 INS83 INS39 INS59 INS42 INS33 INS43 INS59 INS32 INS32 INS52 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS25 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 UPD42 UPD42 UPD42 UPD42 UPD42 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS62 INS8 INS8 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 MOV5 INS43 INS38 INS33 INS52 INS57 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS21 INS21 INS21 MOV21 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS52 INS42 MOV32 INS42 INS34 INS43 INS40 INS43 INS59 INS7 INS32 INS32 INS83 INS43 INS59 INS32 INS5 INS59 INS7 INS32 INS32 INS32 MOV5 INS32 INS42 INS25 INS40 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 UPD42 MOV42 INS39 INS85 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS34 INS32 INS45 INS32 INS45 MOV32 INS42 INS42 INS34 INS62 INS8 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD34 INS42 INS43 INS21 INS40 INS42 INS42 INS7 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL33 DEL27 DEL25 DEL8 DEL32 DEL32 DEL21 DEL8 DEL40 DEL42 DEL40 DEL27 DEL8 DEL25 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42