Merge trunk r1595301 to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1595303 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import java.util.Collections;
+import org.apache.hadoop.fs.permission.AclUtil;
+import org.apache.hadoop.fs.permission.ScopedAclEntries;
-      AclStatus aclStatus = item.fs.getAclStatus(item.path);
-      out.println("# owner: " + aclStatus.getOwner());
-      out.println("# group: " + aclStatus.getGroup());
-      List<AclEntry> entries = aclStatus.getEntries();
-      if (aclStatus.isStickyBit()) {
-        String stickyFlag = "T";
-        for (AclEntry aclEntry : entries) {
-          if (aclEntry.getType() == AclEntryType.OTHER
-              && aclEntry.getScope() == AclEntryScope.ACCESS
-              && aclEntry.getPermission().implies(FsAction.EXECUTE)) {
-            stickyFlag = "t";
-            break;
-          }
-        }
-        out.println("# flags: --" + stickyFlag);
-      }
-
+      out.println("# owner: " + item.stat.getOwner());
+      out.println("# group: " + item.stat.getGroup());
-      if (entries.isEmpty()) {
-        printMinimalAcl(perm);
-      } else {
-        printExtendedAcl(perm, entries);
+      if (perm.getStickyBit()) {
+        out.println("# flags: --" +
+          (perm.getOtherAction().implies(FsAction.EXECUTE) ? "t" : "T"));
+      List<AclEntry> entries = perm.getAclBit() ?
+        item.fs.getAclStatus(item.path).getEntries() :
+        Collections.<AclEntry>emptyList();
+      ScopedAclEntries scopedEntries = new ScopedAclEntries(
+        AclUtil.getAclFromPermAndEntries(perm, entries));
+      printAclEntriesForSingleScope(scopedEntries.getAccessEntries());
+      printAclEntriesForSingleScope(scopedEntries.getDefaultEntries());
-     * Prints an extended ACL, including all extended ACL entries and also the
-     * base entries implied by the permission bits.
+     * Prints all the ACL entries in a single scope.
-     * @param perm FsPermission of file
-    private void printExtendedAcl(FsPermission perm, List<AclEntry> entries) {
-      // Print owner entry implied by owner permission bits.
-      out.println(new AclEntry.Builder()
-        .setScope(AclEntryScope.ACCESS)
-        .setType(AclEntryType.USER)
-        .setPermission(perm.getUserAction())
-        .build());
-
-      // Print all extended access ACL entries.
-      boolean hasAccessAcl = false;
-      Iterator<AclEntry> entryIter = entries.iterator();
-      AclEntry curEntry = null;
-      while (entryIter.hasNext()) {
-        curEntry = entryIter.next();
-        if (curEntry.getScope() == AclEntryScope.DEFAULT) {
-          break;
-        }
-        hasAccessAcl = true;
-        printExtendedAclEntry(curEntry, perm.getGroupAction());
+    private void printAclEntriesForSingleScope(List<AclEntry> entries) {
+      if (entries.isEmpty()) {
+        return;
-
-      // Print mask entry implied by group permission bits, or print group entry
-      // if there is no access ACL (only default ACL).
-      out.println(new AclEntry.Builder()
-        .setScope(AclEntryScope.ACCESS)
-        .setType(hasAccessAcl ? AclEntryType.MASK : AclEntryType.GROUP)
-        .setPermission(perm.getGroupAction())
-        .build());
-
-      // Print other entry implied by other bits.
-      out.println(new AclEntry.Builder()
-        .setScope(AclEntryScope.ACCESS)
-        .setType(AclEntryType.OTHER)
-        .setPermission(perm.getOtherAction())
-        .build());
-
-      // Print default ACL entries.
-      if (curEntry != null && curEntry.getScope() == AclEntryScope.DEFAULT) {
-        out.println(curEntry);
-        // ACL sort order guarantees default mask is the second-to-last entry.
+      if (AclUtil.isMinimalAcl(entries)) {
+        for (AclEntry entry: entries) {
+          out.println(entry);
+        }
+      } else {
+        // ACL sort order guarantees mask is the second-to-last entry.
-        while (entryIter.hasNext()) {
-          printExtendedAclEntry(entryIter.next(), maskPerm);
+        for (AclEntry entry: entries) {
+          printExtendedAclEntry(entry, maskPerm);
-
-    /**
-     * Prints a minimal ACL, consisting of exactly 3 ACL entries implied by the
-     * permission bits.
-     *
-     * @param perm FsPermission of file
-     */
-    private void printMinimalAcl(FsPermission perm) {
-      out.println(new AclEntry.Builder()
-        .setScope(AclEntryScope.ACCESS)
-        .setType(AclEntryType.USER)
-        .setPermission(perm.getUserAction())
-        .build());
-      out.println(new AclEntry.Builder()
-        .setScope(AclEntryScope.ACCESS)
-        .setType(AclEntryType.GROUP)
-        .setPermission(perm.getGroupAction())
-        .build());
-      out.println(new AclEntry.Builder()
-        .setScope(AclEntryScope.ACCESS)
-        .setType(AclEntryType.OTHER)
-        .setPermission(perm.getOtherAction())
-        .build());
-    }

INS26 INS26 UPD40 INS40 INS40 MOV31 INS31 MOV78 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 UPD42 MOV44 INS8 MOV21 MOV21 MOV21 MOV60 MOV25 INS60 INS60 MOV21 MOV21 MOV21 MOV65 INS25 MOV25 MOV74 INS59 INS43 INS59 UPD66 MOV32 INS8 INS32 INS8 UPD42 UPD42 INS21 INS42 INS16 INS42 INS42 INS14 UPD42 MOV32 UPD42 MOV32 INS41 INS42 INS42 INS42 INS70 INS70 INS32 INS32 INS32 INS32 INS43 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV44 INS42 INS8 INS44 INS42 INS8 INS40 INS40 INS42 INS42 INS27 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 INS21 MOV43 INS42 MOV21 INS45 INS36 INS32 INS16 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS45 INS45 MOV32 MOV42 MOV40 DEL42 DEL42 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL40 DEL27 DEL27 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL45 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL40 DEL43 DEL14 DEL40 DEL32 DEL42 DEL42 DEL40 DEL40 DEL16 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL40 DEL43 DEL14 DEL40 DEL32 DEL40 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL43 DEL14 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL40 DEL27 DEL10 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL32 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31 DEL66 DEL42 DEL66 DEL65 DEL42 DEL33 DEL27 DEL32 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL43 DEL14 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL43 DEL14 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL43 DEL14 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8