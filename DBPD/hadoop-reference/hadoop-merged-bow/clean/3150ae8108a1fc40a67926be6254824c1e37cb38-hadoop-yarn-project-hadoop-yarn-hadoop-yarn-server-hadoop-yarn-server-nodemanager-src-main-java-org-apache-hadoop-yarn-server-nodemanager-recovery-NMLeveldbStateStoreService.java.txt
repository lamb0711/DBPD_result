YARN-4924. NM recovery race can lead to container not cleaned up. Contributed by sandflee

+  @Deprecated
-
-      state.finishedApplications = new ArrayList<ApplicationId>();
-      keyPrefix = FINISHED_APPS_KEY_PREFIX;
-      iter.seek(bytes(keyPrefix));
-      while (iter.hasNext()) {
-        Entry<byte[], byte[]> entry = iter.next();
-        String key = asString(entry.getKey());
-        if (!key.startsWith(keyPrefix)) {
-          break;
-        }
-        ApplicationId appId =
-            ConverterUtils.toApplicationId(key.substring(keyPrefix.length()));
-        state.finishedApplications.add(appId);
-      }
+    cleanupDeprecatedFinishedApps();
+
-  public void storeFinishedApplication(ApplicationId appId)
-      throws IOException {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("storeFinishedApplication.appId: " + appId);
-    }
-
-    String key = FINISHED_APPS_KEY_PREFIX + appId;
-    try {
-      db.put(bytes(key), new byte[0]);
-    } catch (DBException e) {
-      throw new IOException(e);
-    }
-  }
-
-  @Override
-        key = FINISHED_APPS_KEY_PREFIX + appId;
-        batch.delete(bytes(key));
+  @SuppressWarnings("deprecation")
+  private void cleanupDeprecatedFinishedApps() {
+    try {
+      cleanupKeysWithPrefix(FINISHED_APPS_KEY_PREFIX);
+    } catch (Exception e) {
+      LOG.warn("cleanup keys with prefix " + FINISHED_APPS_KEY_PREFIX +
+              " from leveldb failed", e);
+    }
+  }
+
+  private void cleanupKeysWithPrefix(String prefix) throws IOException {
+    WriteBatch batch = null;
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      try {
+        batch = db.createWriteBatch();
+        iter.seek(bytes(prefix));
+        while (iter.hasNext()) {
+          byte[] key = iter.next().getKey();
+          String keyStr = asString(key);
+          if (!keyStr.startsWith(prefix)) {
+            break;
+          }
+          batch.delete(key);
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("cleanup " + keyStr + " from leveldb");
+          }
+        }
+        db.write(batch);
+      } catch (DBException e) {
+        throw new IOException(e);
+      } finally {
+        if (batch != null) {
+          batch.close();
+        }
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+  }
+

INS31 INS31 INS78 INS79 UPD83 MOV83 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS44 MOV43 INS8 INS42 INS21 INS42 INS45 INS54 MOV43 INS42 INS60 INS60 INS54 INS32 INS8 INS12 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS42 INS21 INS44 INS8 INS42 INS42 INS33 INS42 INS42 INS33 INS21 MOV54 INS44 INS8 INS25 INS32 UPD43 MOV43 UPD42 MOV42 MOV21 INS7 INS8 INS43 INS42 INS53 INS27 INS8 INS42 INS42 UPD42 INS42 INS14 INS21 INS61 INS21 INS25 INS42 INS14 INS42 INS33 INS21 UPD42 INS42 INS43 INS42 INS7 MOV32 INS8 INS32 INS27 INS8 INS43 INS42 INS32 UPD45 UPD42 INS45 INS42 INS42 INS32 UPD42 UPD42 INS60 INS60 INS25 INS21 INS25 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV5 MOV59 MOV43 INS59 INS38 MOV8 INS32 MOV32 INS8 INS32 UPD42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS21 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS45 DEL40 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL78 DEL44 DEL8 DEL25 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL42 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL34 DEL3