Merge branch 'trunk' into HADOOP-12756

-      FSDirectory fsd, final String srcArg, FsPermission permission)
+      FSDirectory fsd, final String src, FsPermission permission)
-    String src = srcArg;
-      src = iip.getPath();
-      unprotectedSetPermission(fsd, src, permission);
+      unprotectedSetPermission(fsd, iip, permission);
-    fsd.getEditLog().logSetPermissions(src, permission);
+    fsd.getEditLog().logSetPermissions(iip.getPath(), permission);
-      src = iip.getPath();
-      unprotectedSetOwner(fsd, src, username, group);
+      unprotectedSetOwner(fsd, iip, username, group);
-    fsd.getEditLog().logSetOwner(src, username, group);
+    fsd.getEditLog().logSetOwner(iip.getPath(), username, group);
-      src = iip.getPath();
-        throw new FileNotFoundException("File/Directory " + src +
+        throw new FileNotFoundException("File/Directory " + iip.getPath() +
-      boolean changed = unprotectedSetTimes(fsd, inode, mtime, atime, true,
-          iip.getLatestSnapshotId());
+      boolean changed = unprotectedSetTimes(fsd, iip, mtime, atime, true);
-        fsd.getEditLog().logTimes(src, mtime, atime);
+        fsd.getEditLog().logTimes(iip.getPath(), mtime, atime);
-      src = iip.getPath();
-      final BlockInfo[] blocks = unprotectedSetReplication(fsd, src,
+      final BlockInfo[] blocks = unprotectedSetReplication(fsd, iip,
-        fsd.getEditLog().logSetReplication(src, replication);
+        fsd.getEditLog().logSetReplication(iip.getPath(), replication);
-      src = FSDirectory.resolvePath(src, fsd);
-      iip = fsd.getINodesInPath4Write(src);
+      iip = fsd.resolvePathForWrite(pc, src);
-      fsd.getEditLog().logSetStoragePolicy(src, policyId);
+      fsd.getEditLog().logSetStoragePolicy(iip.getPath(), policyId);
-      src = iip.getPath();
-      return INodeFile.valueOf(iip.getLastINode(), src)
+      return INodeFile.valueOf(iip.getLastINode(), iip.getPath())
+    FSPermissionChecker pc = fsd.getPermissionChecker();
-      FSPermissionChecker pc = fsd.getPermissionChecker();
-      INodeDirectory changed = unprotectedSetQuota(fsd, src, nsQuota, ssQuota, type);
+      INodesInPath iip = fsd.resolvePathForWrite(pc, src);
+      INodeDirectory changed =
+          unprotectedSetQuota(fsd, iip, nsQuota, ssQuota, type);
-      FSDirectory fsd, String src, FsPermission permissions)
+      FSDirectory fsd, INodesInPath iip, FsPermission permissions)
-    final INodesInPath inodesInPath = fsd.getINodesInPath4Write(src, true);
-    final INode inode = inodesInPath.getLastINode();
-    if (inode == null) {
-      throw new FileNotFoundException("File does not exist: " + src);
-    }
-    int snapshotId = inodesInPath.getLatestSnapshotId();
+    final INode inode = FSDirectory.resolveLastINode(iip);
+    int snapshotId = iip.getLatestSnapshotId();
-      FSDirectory fsd, String src, String username, String groupname)
+      FSDirectory fsd, INodesInPath iip, String username, String groupname)
-    final INodesInPath inodesInPath = fsd.getINodesInPath4Write(src, true);
-    INode inode = inodesInPath.getLastINode();
-    if (inode == null) {
-      throw new FileNotFoundException("File does not exist: " + src);
-    }
+    final INode inode = FSDirectory.resolveLastINode(iip);
-      inode = inode.setUser(username, inodesInPath.getLatestSnapshotId());
+      inode.setUser(username, iip.getLatestSnapshotId());
-      inode.setGroup(groupname, inodesInPath.getLatestSnapshotId());
+      inode.setGroup(groupname, iip.getLatestSnapshotId());
-      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,
-      int latestSnapshotId) throws QuotaExceededException {
+      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)
+          throws QuotaExceededException {
-      return unprotectedSetTimes(fsd, inode, mtime, atime, force,
-                                 latestSnapshotId);
+      return unprotectedSetTimes(fsd, iip, mtime, atime, force);
-  static boolean unprotectedSetTimes(
-      FSDirectory fsd, String src, long mtime, long atime, boolean force)
-      throws UnresolvedLinkException, QuotaExceededException {
-    assert fsd.hasWriteLock();
-    final INodesInPath i = fsd.getINodesInPath(src, true);
-    return unprotectedSetTimes(fsd, i.getLastINode(), mtime, atime,
-                               force, i.getLatestSnapshotId());
-  }
-
-      FSDirectory fsd, String src, long nsQuota, long ssQuota, StorageType type)
+      FSDirectory fsd, INodesInPath iip, long nsQuota,
+      long ssQuota, StorageType type)
-    String srcs = FSDirectory.normalizePath(src);
-    final INodesInPath iip = fsd.getINodesInPath4Write(srcs, true);
-    INodeDirectory dirNode = INodeDirectory.valueOf(iip.getLastINode(), srcs);
+    INodeDirectory dirNode =
+        INodeDirectory.valueOf(iip.getLastINode(), iip.getPath());
-      FSDirectory fsd, String src, short replication)
+      FSDirectory fsd, INodesInPath iip, short replication)
-    final INodesInPath iip = fsd.getINodesInPath4Write(src, true);
+    long size = file.computeFileSize(true, true);
-      long size = file.computeFileSize(true, true);
+    if (oldBR > replication) {
+      fsd.updateCount(iip, 0L, size, oldBR, targetReplication, true);
+    }
-      if (oldBR == targetReplication) {
-        continue;
-      }
-      if (oldBR > replication) {
-        fsd.updateCount(iip, 0L, b.getNumBytes(), oldBR, targetReplication,
-                        true);
-      }
-                             oldBR, targetReplication, src);
+                             oldBR, targetReplication, iip.getPath());
-                             oldBR, targetReplication, src);
+                             oldBR, targetReplication, iip.getPath());
-      setDirStoragePolicy(fsd, inode.asDirectory(), policyId,
-          snapshotId);
+      setDirStoragePolicy(fsd, iip, policyId);
-      FSDirectory fsd, INodeDirectory inode, byte policyId,
-      int latestSnapshotId) throws IOException {
+      FSDirectory fsd, INodesInPath iip, byte policyId) throws IOException {
+    INode inode = FSDirectory.resolveLastINode(iip);
-    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, latestSnapshotId);
+    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());
-  private static boolean unprotectedSetTimes(
-      FSDirectory fsd, INode inode, long mtime, long atime, boolean force,
-      int latest) throws QuotaExceededException {
+  static boolean unprotectedSetTimes(
+      FSDirectory fsd, INodesInPath iip, long mtime, long atime, boolean force)
+          throws QuotaExceededException {
+    INode inode = iip.getLastINode();
+    int latest = iip.getLatestSnapshotId();

UPD42 MOV60 UPD43 UPD42 UPD43 UPD42 INS43 UPD42 UPD43 UPD42 UPD43 UPD42 MOV60 INS25 UPD43 UPD42 INS60 INS43 UPD42 INS60 INS60 UPD42 MOV43 UPD42 MOV43 INS42 UPD42 UPD42 MOV27 INS8 INS8 UPD42 MOV43 INS59 INS42 MOV43 INS59 INS39 INS59 MOV32 MOV32 INS60 UPD42 UPD42 INS21 MOV21 INS42 INS32 MOV32 INS42 INS32 INS42 INS32 MOV43 INS59 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV32 INS42 INS32 MOV42 MOV42 MOV42 MOV32 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV9 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 INS42 INS32 INS32 MOV32 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL7 DEL21 DEL9 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL9 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL7 DEL39 DEL42 DEL44 DEL42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL6 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL32 DEL42 DEL39 DEL42 DEL44 DEL42 DEL83 DEL39 DEL42 DEL44