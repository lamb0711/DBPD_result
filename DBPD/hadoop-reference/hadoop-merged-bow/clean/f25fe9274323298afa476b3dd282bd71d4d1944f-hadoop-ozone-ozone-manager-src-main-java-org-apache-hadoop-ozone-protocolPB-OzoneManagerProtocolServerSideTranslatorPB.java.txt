HDDS-1909. Use new HA code for Non-HA in OM. (#1225)


+import com.google.common.base.Preconditions;
+import org.apache.hadoop.ozone.om.response.OMClientResponse;
+import org.apache.ratis.util.ExitUtils;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicLong;
+  private final AtomicLong transactionIndex = new AtomicLong(0L);
-            if (omClientRequest != null) {
-              request = omClientRequest.preExecute(ozoneManager);
-            }
+            Preconditions.checkState(omClientRequest != null,
+                "Unrecognized write command type request" + request.toString());
+            request = omClientRequest.preExecute(ozoneManager);
-
-    switch (cmdType) {
-    case CreateBucket:
-      OMResponse.Builder omResponse = OMResponse.newBuilder()
-          .setStatus(
-              OzoneManagerRatisUtils.exceptionToResponseStatus(exception))
-          .setCmdType(cmdType)
-          .setSuccess(false);
-      if (exception.getMessage() != null) {
-        omResponse.setMessage(exception.getMessage());
-      }
-      return omResponse.build();
-    case DeleteBucket:
-    case SetBucketProperty:
-      // In these cases, we can return null. As this method is called when
-      // some error occurred in preExecute. For these request types
-      // preExecute is do nothing.
-      return null;
-    default:
-      // We shall never come here.
-      return null;
+    // Added all write command types here, because in future if any of the
+    // preExecute is changed to return IOException, we can return the error
+    // OMResponse to the client.
+    OMResponse.Builder omResponse = OMResponse.newBuilder()
+        .setStatus(
+            OzoneManagerRatisUtils.exceptionToResponseStatus(exception))
+        .setCmdType(cmdType)
+        .setSuccess(false);
+    if (exception.getMessage() != null) {
+      omResponse.setMessage(exception.getMessage());
+    return omResponse.build();
-    return handler.handle(request);
+    OMClientResponse omClientResponse = null;
+    long index = 0L;
+    try {
+      if (OmUtils.isReadOnly(request)) {
+        return handler.handle(request);
+      } else {
+        OMClientRequest omClientRequest =
+            OzoneManagerRatisUtils.createClientRequest(request);
+        Preconditions.checkState(omClientRequest != null,
+            "Unrecognized write command type request" + request.toString());
+        request = omClientRequest.preExecute(ozoneManager);
+        index = transactionIndex.incrementAndGet();
+        omClientRequest = OzoneManagerRatisUtils.createClientRequest(request);
+        omClientResponse = omClientRequest.validateAndUpdateCache(
+            ozoneManager, index, ozoneManagerDoubleBuffer::add);
+      }
+    } catch(IOException ex) {
+      // As some of the preExecute returns error. So handle here.
+      return createErrorResponse(request, ex);
+    }
+    try {
+      omClientResponse.getFlushFuture().get();
+      LOG.trace("Future for {} is completed", request);
+    } catch (ExecutionException | InterruptedException ex) {
+      // terminate OM. As if we are in this stage means, while getting
+      // response from flush future, we got an exception.
+      String errorMessage = "Got error during waiting for flush to be " +
+          "completed for " + "request" + request.toString();
+      ExitUtils.terminate(1, errorMessage, ex, LOG);
+    }
+    return omClientResponse.getOMResponse();

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 INS8 INS42 INS42 INS14 MOV60 MOV25 MOV41 INS60 INS60 INS54 INS54 INS41 INS43 INS34 INS43 INS59 INS39 INS59 INS8 INS12 INS8 INS12 INS32 INS42 INS42 INS42 INS33 INS42 INS34 INS25 INS44 INS8 INS21 INS21 INS44 INS8 INS42 INS42 INS32 MOV8 INS8 INS43 INS42 INS41 INS32 INS32 INS84 INS42 INS60 INS21 INS42 INS42 INS42 INS60 INS21 MOV21 INS21 INS21 INS21 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS43 INS43 INS43 INS59 INS32 INS43 INS59 INS32 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS45 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS33 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS90 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 MOV27 INS27 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 DEL8 DEL25 DEL42 DEL42 DEL49 DEL42 DEL49 DEL42 DEL49 DEL33 DEL41 DEL49 DEL33 DEL41 DEL50