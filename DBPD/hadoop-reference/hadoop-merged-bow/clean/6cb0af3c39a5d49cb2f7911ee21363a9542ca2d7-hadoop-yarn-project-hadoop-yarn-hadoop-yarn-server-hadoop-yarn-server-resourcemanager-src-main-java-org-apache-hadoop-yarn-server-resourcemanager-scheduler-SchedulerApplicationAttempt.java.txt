YARN-3946. Update exact reason as to why a submitted app is in ACCEPTED state to app's diagnostic message. (Naganarasimha G R via wangda)

-import java.util.Collections;
+import org.apache.commons.lang.time.FastDateFormat;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
+  private FastDateFormat fdf =
+      FastDateFormat.getInstance("EEE MMM dd HH:mm:ss Z yyyy");
+
-  private String appAMNodePartitionName = CommonNodeLabelsManager.NO_LABEL;
+  protected String appAMNodePartitionName = CommonNodeLabelsManager.NO_LABEL;
-  
+
+  private RMAppAttempt appAttempt;
+
+      RMApp rmApp = rmContext.getRMApps().get(applicationAttemptId.getApplicationId());
-          rmContext.getRMApps().get(applicationAttemptId.getApplicationId())
+          rmApp
+      appAttempt = rmApp.getCurrentAppAttempt();
-    if (isWaitingForAMContainer(getApplicationId())) {
+    if (isWaitingForAMContainer()) {
-  public boolean isWaitingForAMContainer(ApplicationId applicationId) {
+  public boolean isWaitingForAMContainer() {
-    RMAppAttempt appAttempt =
-        rmContext.getRMApps().get(applicationId).getCurrentAppAttempt();
-    return (appAttempt != null && appAttempt.getMasterContainer() == null
-        && appAttempt.getSubmissionContext().getUnmanagedAM() == false);
+    return (!unmanagedAM && appAttempt.getMasterContainer() == null);
-    boolean useAMBlacklist = isWaitingForAMContainer(getApplicationId());
+    boolean useAMBlacklist = isWaitingForAMContainer();
+
+  public void updateAMContainerDiagnostics(AMState state,
+      String diagnosticMessage) {
+    if (!isWaitingForAMContainer()) {
+      return;
+    }
+    StringBuilder diagnosticMessageBldr = new StringBuilder();
+    diagnosticMessageBldr.append("[");
+    diagnosticMessageBldr.append(fdf.format(System.currentTimeMillis()));
+    diagnosticMessageBldr.append("] ");
+    switch (state) {
+    case INACTIVATED:
+      diagnosticMessageBldr.append(state.diagnosticMessage);
+      if (diagnosticMessage != null) {
+        diagnosticMessageBldr.append(diagnosticMessage);
+      }
+      getPendingAppDiagnosticMessage(diagnosticMessageBldr);
+      break;
+    case ACTIVATED:
+      diagnosticMessageBldr.append(state.diagnosticMessage);
+      if (diagnosticMessage != null) {
+        diagnosticMessageBldr.append(diagnosticMessage);
+      }
+      getActivedAppDiagnosticMessage(diagnosticMessageBldr);
+      break;
+    default:
+      // UNMANAGED , ASSIGNED
+      diagnosticMessageBldr.append(state.diagnosticMessage);
+      break;
+    }
+    appAttempt.updateAMLaunchDiagnostics(diagnosticMessageBldr.toString());
+  }
+
+  protected void getPendingAppDiagnosticMessage(
+      StringBuilder diagnosticMessage) {
+    // Give the specific information which might be applicable for the
+    // respective scheduler
+    // like partitionAMResourcelimit,UserAMResourceLimit, queue'AMResourceLimit
+  }
+
+  protected void getActivedAppDiagnosticMessage(
+      StringBuilder diagnosticMessage) {
+    // Give the specific information which might be applicable for the
+    // respective scheduler
+    // queue's resource usage for specific partition
+  }
+
+  public static enum AMState {
+    UNMANAGED("User launched the Application Master, since it's unmanaged. "),
+    INACTIVATED("Application is added to the scheduler and is not yet activated. "),
+    ACTIVATED("Application is Activated, waiting for resources to be assigned for AM. "),
+    ASSIGNED("Scheduler has assigned a container for AM, waiting for AM "
+        + "container to be launched"),
+    LAUNCHED("AM container is launched, waiting for AM container to Register "
+        + "with RM")
+    ;
+
+    private String diagnosticMessage;
+
+    AMState(String diagnosticMessage) {
+      this.diagnosticMessage = diagnosticMessage;
+    }
+
+    public String getDiagnosticMessage() {
+      return diagnosticMessage;
+    }
+  }

MOV26 INS26 UPD40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS71 INS83 INS43 INS59 UPD83 INS83 MOV43 INS59 MOV83 MOV39 MOV42 INS8 INS83 INS39 INS42 MOV44 INS44 MOV8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS23 INS31 INS31 INS42 INS42 INS32 INS42 MOV41 UPD43 UPD42 INS43 INS42 INS25 INS60 INS21 INS21 INS21 INS50 INS21 INS43 INS42 INS43 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS27 INS42 INS27 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS45 UPD42 INS42 INS38 INS8 INS43 INS59 INS32 INS32 INS32 INS42 INS49 INS21 INS25 INS21 INS10 INS49 INS21 INS25 INS21 INS10 INS49 INS21 INS10 INS32 INS42 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS60 INS21 MOV27 INS32 INS41 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 MOV32 INS42 INS42 INS45 INS42 INS32 INS27 INS8 INS32 INS42 INS32 INS27 INS8 INS32 INS32 UPD42 MOV42 INS42 INS32 INS42 INS7 INS42 INS43 MOV43 INS59 INS7 INS38 INS42 INS43 INS42 UPD42 INS32 INS42 INS42 INS40 INS42 INS33 INS21 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS40 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS22 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL9 DEL27 DEL27 DEL31 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60