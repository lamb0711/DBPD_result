YARN-8292: Fix the dominant resource preemption cannot happen when some of the resource vector becomes negative. Contributed by Wangda Tan.

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+   * @param conservativeDRF
+   *          should we do conservativeDRF preemption or not.
+   *          When true:
+   *            stop preempt container when any major resource type <= 0 for to-
+   *            preempt.
+   *            This is default preemption behavior of intra-queue preemption
+   *          When false:
+   *            stop preempt container when: all major resource type <= 0 for
+   *            to-preempt.
+   *            This is default preemption behavior of inter-queue preemption
-      Resource totalPreemptionAllowed) {
+      Resource totalPreemptionAllowed, boolean conservativeDRF) {
+    if (null == toObtainByPartition) {
+      return false;
+    }
-    if (null != toObtainByPartition
-        && Resources.greaterThan(rc, clusterResource, toObtainByPartition,
-            Resources.none())
-        && Resources.fitsIn(rc, rmContainer.getAllocatedResource(),
-            totalPreemptionAllowed)
-        && !Resources.isAnyMajorResourceZero(rc, toObtainByPartition)) {
+    // If a toObtain resource type == 0, set it to -1 to avoid 0 resource
+    // type affect following doPreemption check: isAnyMajorResourceZero
+    for (ResourceInformation ri : toObtainByPartition.getResources()) {
+      if (ri.getValue() == 0) {
+        ri.setValue(-1);
+      }
+    }
+
+    if (rc.isAnyMajorResourceAboveZero(toObtainByPartition) && Resources.fitsIn(
+        rc, rmContainer.getAllocatedResource(), totalPreemptionAllowed)) {
+      boolean doPreempt;
+
+      // How much resource left after preemption happen.
+      Resource toObtainAfterPreemption = Resources.subtract(toObtainByPartition,
+          rmContainer.getAllocatedResource());
+
+      if (conservativeDRF) {
+        doPreempt = !rc.isAnyMajorResourceZeroOrNegative(toObtainByPartition);
+      } else {
+        // When we want to do more aggressive preemption, we will do preemption
+        // only if:
+        // - The preempt of the container makes positive contribution to the
+        //   to-obtain resource. Positive contribution means any positive
+        //   resource type decreases.
+        //
+        //   This is example of positive contribution:
+        //     * before: <30, 10, 5>, after <20, 10, -10>
+        //   But this not positive contribution:
+        //     * before: <30, 10, 0>, after <30, 10, -15>
+        doPreempt = Resources.lessThan(rc, clusterResource,
+            Resources
+                .componentwiseMax(toObtainAfterPreemption, Resources.none()),
+            Resources.componentwiseMax(toObtainByPartition, Resources.none()));
+      }
+
+      if (!doPreempt) {
+        return false;
+      }
+

INS26 INS40 INS44 INS65 INS39 INS42 INS25 INS70 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS27 INS8 INS44 INS32 INS8 MOV27 INS33 INS42 INS41 INS43 INS42 INS42 INS42 INS25 MOV32 INS60 INS60 INS25 INS25 INS9 INS42 INS27 INS8 UPD42 INS39 INS59 INS43 INS59 INS42 INS8 INS8 INS38 INS8 INS32 INS34 INS21 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS7 INS7 INS9 INS42 INS42 INS38 INS42 INS42 INS42 INS38 INS42 INS32 INS34 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL33 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27