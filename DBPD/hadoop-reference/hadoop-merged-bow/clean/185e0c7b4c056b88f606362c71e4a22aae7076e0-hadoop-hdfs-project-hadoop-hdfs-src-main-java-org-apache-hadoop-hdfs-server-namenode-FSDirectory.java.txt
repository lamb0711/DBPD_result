HDFS-7462. Consolidate implementation of mkdirs() into a single class. Contributed by Haohui Mai.

-import org.apache.hadoop.fs.ContentSummary;
+import org.apache.hadoop.fs.ParentNotDirectoryException;
-import org.apache.hadoop.hdfs.protocol.SnapshotException;
-import org.apache.hadoop.hdfs.util.ReadOnlyList;
+  private final INodeId inodeId;
+    this.inodeId = new INodeId();
-    INodeFile newNode = newINodeFile(namesystem.allocateNewInodeId(),
-        permissions, modTime, modTime, replication, preferredBlockSize);
+    INodeFile newNode = newINodeFile(allocateNewInodeId(), permissions, modTime, modTime, replication, preferredBlockSize);
-  
-  /**
-   * Check whether the path specifies a directory
-   * @throws SnapshotAccessControlException if path is in RO snapshot
-   */
-  boolean isDirMutable(String src) throws UnresolvedLinkException,
-      SnapshotAccessControlException {
-    src = normalizePath(src);
-    readLock();
-    try {
-      INode node = getINode4Write(src, false);
-      return node != null && node.isDirectory();
-    } finally {
-      readUnlock();
-    }
-  }
-  INode unprotectedMkdir(long inodeId, String src, PermissionStatus permissions,
-                          List<AclEntry> aclEntries, long timestamp)
-      throws QuotaExceededException, UnresolvedLinkException, AclException {
-    assert hasWriteLock();
-    byte[][] components = INode.getPathComponents(src);
-    INodesInPath iip = getExistingPathINodes(components);
-    INode[] inodes = iip.getINodes();
-    final int pos = inodes.length - 1;
-    unprotectedMkdir(inodeId, iip, pos, components[pos], permissions, aclEntries,
-        timestamp);
-    return inodes[pos];
-  }
-
-  /** create a directory at index pos.
-   * The parent path to the directory is at [0, pos-1].
-   * All ancestors exist. Newly created one stored at index pos.
-   */
-  void unprotectedMkdir(long inodeId, INodesInPath inodesInPath,
-      int pos, byte[] name, PermissionStatus permission,
-      List<AclEntry> aclEntries, long timestamp)
-      throws QuotaExceededException, AclException {
-    assert hasWriteLock();
-    final INodeDirectory dir = new INodeDirectory(inodeId, name, permission,
-        timestamp);
-    if (addChild(inodesInPath, pos, dir, true)) {
-      if (aclEntries != null) {
-        AclStorage.updateINodeAcl(dir, aclEntries, Snapshot.CURRENT_STATE_ID);
-      }
-      inodesInPath.setINode(pos, dir);
-    }
-  }
-  
-  private boolean addChild(INodesInPath iip, int pos,
-      INode child, boolean checkQuota) throws QuotaExceededException {
+  boolean addChild(INodesInPath iip, int pos, INode child, boolean checkQuota)
+      throws QuotaExceededException {
+      inodeId.setCurrentValue(INodeId.LAST_RESERVED_ID);
-  private INode getINode4Write(String src, boolean resolveLink)
+  INode getINode4Write(String src, boolean resolveLink)
+
+  /**
+   * Verify that parent directory of src exists.
+   */
+  void verifyParentDir(String src)
+      throws FileNotFoundException, ParentNotDirectoryException,
+             UnresolvedLinkException {
+    Path parent = new Path(src).getParent();
+    if (parent != null) {
+      final INode parentNode = getINode(parent.toString());
+      if (parentNode == null) {
+        throw new FileNotFoundException("Parent directory doesn't exist: "
+            + parent);
+      } else if (!parentNode.isDirectory() && !parentNode.isSymlink()) {
+        throw new ParentNotDirectoryException("Parent path is not a directory: "
+            + parent);
+      }
+    }
+  }
+
+  /** Allocate a new inode ID. */
+  long allocateNewInodeId() {
+    return inodeId.nextValue();
+  }
+
+  /** @return the last inode ID. */
+  public long getLastInodeId() {
+    return inodeId.getCurrentValue();
+  }
+
+  /**
+   * Set the last allocated inode id when fsimage or editlog is loaded.
+   * @param newValue
+   */
+  void resetLastInodeId(long newValue) throws IOException {
+    try {
+      inodeId.skipTo(newValue);
+    } catch(IllegalStateException ise) {
+      throw new IOException(ise);
+    }
+  }
+
+  /** Should only be used for tests to reset to any value
+   * @param newValue*/
+  void resetLastInodeIdWithoutChecking(long newValue) {
+    inodeId.setCurrentValue(newValue);
+  }

MOV26 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 MOV29 UPD39 MOV39 UPD42 MOV42 MOV44 UPD43 MOV43 UPD43 MOV43 MOV43 INS8 INS29 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 MOV29 MOV39 UPD42 MOV42 MOV44 INS43 INS8 INS29 INS39 INS42 MOV44 INS8 INS42 INS42 INS21 UPD42 UPD42 MOV60 INS25 INS65 INS41 INS65 INS41 INS65 UPD42 UPD42 MOV42 INS54 INS65 INS65 UPD42 MOV21 INS7 UPD66 UPD43 INS27 INS8 INS66 INS32 INS66 INS32 UPD66 INS42 INS8 INS12 INS66 INS66 INS22 INS14 INS21 UPD42 UPD42 UPD42 MOV42 MOV33 INS60 INS25 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS21 INS44 INS8 UPD42 UPD42 UPD42 INS52 INS42 INS43 INS32 INS14 INS42 INS83 MOV43 INS59 INS27 INS8 INS25 INS32 UPD43 MOV43 UPD42 MOV42 INS53 INS42 INS42 INS42 INS40 INS43 INS42 INS42 INS32 INS42 INS33 INS53 INS27 INS8 INS42 INS42 INS42 UPD42 INS14 INS42 INS42 INS32 INS14 INS38 INS38 INS53 INS43 INS42 INS42 INS42 INS43 INS27 INS32 INS32 INS14 UPD42 MOV42 UPD42 MOV42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS27 UPD42 MOV42 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL21 DEL27 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL32 DEL6 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL42 DEL40 DEL34 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL2 DEL41 DEL8 DEL31 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL44 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL6 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL42 DEL66 DEL65 DEL42 DEL42 DEL9 DEL66 DEL66 DEL42