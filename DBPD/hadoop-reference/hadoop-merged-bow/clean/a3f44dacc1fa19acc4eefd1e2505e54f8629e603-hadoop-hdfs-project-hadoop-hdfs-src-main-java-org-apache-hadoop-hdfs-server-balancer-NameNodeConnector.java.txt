HDFS-13183. Standby NameNode process getBlocks request to reduce Active load. Contributed by Xiaoqiao He.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

+import java.util.HashMap;
+import org.apache.hadoop.ha.HAServiceProtocol;
+import org.apache.hadoop.hdfs.HAUtil;
+import org.apache.hadoop.hdfs.protocol.ClientProtocol;
+import org.apache.hadoop.ipc.RPC;
+import org.apache.hadoop.security.UserGroupInformation;
+  public static List<NameNodeConnector> newNameNodeConnectors(
+      Collection<URI> namenodes, Collection<String> nsIds, String name,
+      Path idPath, Configuration conf, int maxIdleIterations)
+      throws IOException {
+    final List<NameNodeConnector> connectors = new ArrayList<NameNodeConnector>(
+        namenodes.size());
+    Map<URI, String> uriToNsId = new HashMap<>();
+    if (nsIds != null) {
+      for (URI uri : namenodes) {
+        for (String nsId : nsIds) {
+          if (uri.getAuthority().equals(nsId)) {
+            uriToNsId.put(uri, nsId);
+          }
+        }
+      }
+    }
+    for (URI uri : namenodes) {
+      String nsId = uriToNsId.get(uri);
+      NameNodeConnector nnc = new NameNodeConnector(name, uri, nsId, idPath,
+          null, conf, maxIdleIterations);
+      nnc.getKeyManager().startBlockKeyUpdater();
+      connectors.add(nnc);
+    }
+    return connectors;
+  }
+
+  /**
+   * If set balancerShouldRequestStandby true, Balancer will getBlocks from
+   * Standby NameNode only and it can reduce the performance impact of Active
+   * NameNode, especially in a busy HA mode cluster.
+   */
+  private boolean balancerShouldRequestStandby;
+  private NamenodeProtocol standbyNameNode;
+    this.balancerShouldRequestStandby = conf.getBoolean(
+        DFSConfigKeys.DFS_HA_ALLOW_STALE_READ_KEY,
+        DFSConfigKeys.DFS_HA_ALLOW_STALE_READ_DEFAULT);
+    this.standbyNameNode = null;
+
+  public NameNodeConnector(String name, URI nameNodeUri, String nsId,
+                           Path idPath, List<Path> targetPaths,
+                           Configuration conf, int maxNotChangedIterations)
+      throws IOException {
+    this(name, nameNodeUri, idPath, targetPaths, conf, maxNotChangedIterations);
+    if (nsId != null && HAUtil.isHAEnabled(conf, nsId)) {
+      List<ClientProtocol> namenodes =
+          HAUtil.getProxiesForAllNameNodesInNameservice(conf, nsId);
+      for (ClientProtocol proxy : namenodes) {
+        try {
+          if (proxy.getHAServiceState().equals(
+              HAServiceProtocol.HAServiceState.STANDBY)) {
+            this.standbyNameNode = NameNodeProxies.createNonHAProxy(
+                conf, RPC.getServerAddress(proxy), NamenodeProtocol.class,
+                UserGroupInformation.getCurrentUser(), false).getProxy();
+            break;
+          }
+        } catch (Exception e) {
+          //Ignore the exception while connecting to a namenode.
+          LOG.debug("Error while connecting to namenode", e);
+        }
+      }
+    }
+  }
+
+    boolean isRequestStandby = true;
+    try {
+      if (balancerShouldRequestStandby && standbyNameNode != null) {
+        return standbyNameNode.getBlocks(datanode, size, minBlockSize);
+      } else {
+        isRequestStandby = false;
+      }
+    } catch (Exception e) {
+      LOG.warn("Request #getBlocks to Standby NameNode but meet exception, " +
+          "will fallback to normal way", e);
+      isRequestStandby = false;
+    } finally {
+      if (isRequestStandby) {
+        LOG.info("Request #getBlocks to Standby NameNode success.");
+      }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS23 INS23 INS31 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS8 INS43 INS43 INS74 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS60 INS25 INS70 INS41 INS65 INS42 INS42 INS42 INS21 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS42 INS17 INS25 MOV25 INS60 INS54 MOV41 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS83 INS74 INS59 INS74 INS59 INS27 INS8 INS44 INS42 INS8 INS42 INS66 INS66 INS66 INS7 INS7 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS39 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS42 INS33 INS70 INS43 INS42 INS60 INS60 INS21 INS21 INS22 INS32 INS22 INS33 INS42 INS42 INS27 INS32 INS60 INS70 INS42 INS9 INS25 INS44 INS8 INS25 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS74 INS44 INS42 INS8 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS52 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS27 INS8 INS8 INS43 INS42 INS21 INS21 INS42 INS8 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS70 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS54 INS42 INS27 INS41 INS21 INS42 INS32 INS7 INS21 INS42 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS33 INS32 INS7 INS42 INS42 INS27 INS42 INS42 INS9 INS32 INS43 INS42 INS25 INS42 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS45 INS45 INS42 INS42 INS45 INS42 INS32 INS8 INS32 INS8 INS43 INS42 INS21 INS32 INS42 INS42 INS21 INS32 INS42 INS40 INS21 INS10 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS57 INS32 INS9 INS42 INS42 INS42 INS43 INS42 INS42 INS42 DEL8