Merge branch 'trunk' into HDDS-1535
+import com.amazonaws.services.s3.model.CopyObjectRequest;
+import com.amazonaws.services.s3.model.GetObjectMetadataRequest;
+import com.amazonaws.services.s3.transfer.model.CopyResult;
+import org.apache.hadoop.fs.s3a.S3ObjectAttributes;
-  public static final String CHANGE_DETECTED = "change detected";
+  public static final String CHANGE_DETECTED = "change detected  on client";
+   * Like {{@link #getRevisionId(ObjectMetadata, String)}}, but retrieves the
+   * revision identifier from {@link S3ObjectAttributes}.
+   *
+   * @param s3Attributes the object attributes
+   * @return the revisionId string as interpreted by this policy, or potentially
+   * null if the attribute is unavailable (such as when the policy says to use
+   * versionId but object versioning is not enabled for the bucket).
+   */
+  public abstract String getRevisionId(S3ObjectAttributes s3Attributes);
+
+  /**
+   * Like {{@link #getRevisionId(ObjectMetadata, String)}}, but retrieves the
+   * revision identifier from {@link CopyResult}.
+   *
+   * @param copyResult the copy result
+   * @return the revisionId string as interpreted by this policy, or potentially
+   * null if the attribute is unavailable (such as when the policy says to use
+   * versionId but object versioning is not enabled for the bucket).
+   */
+  public abstract String getRevisionId(CopyResult copyResult);
+
+  /**
+   * Applies the given {@link #getRevisionId(ObjectMetadata, String) revisionId}
+   * as a server-side qualification on the {@code CopyObjectRequest}.
+   *
+   * @param request the request
+   * @param revisionId the revision id
+   */
+  public abstract void applyRevisionConstraint(CopyObjectRequest request,
+      String revisionId);
+
+  /**
+   * Applies the given {@link #getRevisionId(ObjectMetadata, String) revisionId}
+   * as a server-side qualification on the {@code GetObjectMetadataRequest}.
+   *
+   * @param request the request
+   * @param revisionId the revision id
+   */
+  public abstract void applyRevisionConstraint(GetObjectMetadataRequest request,
+      String revisionId);
+
+  /**
+    String positionText = position >= 0 ? (" at " + position) : "";
-            String.format("%s change detected on %s %s at %d. Expected %s got %s",
-                getSource(), operation, uri, position, revisionId,
+            String.format(
+                "%s change detected on %s %s%s. Expected %s got %s",
+                getSource(), operation, uri, positionText, revisionId,
-      // mode == Client (or Server, but really won't be called for Server)
+      // mode == Client or Server; will trigger on version failures
+      // of getObjectMetadata even on server.
-                      + " while reading at position %s."
+                      + " during %s%s."
-              getSource(), position, revisionId, newRevisionId)));
+              getSource(), operation, positionText, revisionId, newRevisionId)));
+    public String getRevisionId(S3ObjectAttributes s3Attributes) {
+      return s3Attributes.getETag();
+    }
+
+    @Override
+    public String getRevisionId(CopyResult copyResult) {
+      return copyResult.getETag();
+    }
+
+    @Override
-      LOG.debug("Restricting request to etag {}", revisionId);
-      request.withMatchingETagConstraint(revisionId);
+      if (revisionId != null) {
+        LOG.debug("Restricting get request to etag {}", revisionId);
+        request.withMatchingETagConstraint(revisionId);
+      }
+    }
+
+    @Override
+    public void applyRevisionConstraint(CopyObjectRequest request,
+        String revisionId) {
+      if (revisionId != null) {
+        LOG.debug("Restricting copy request to etag {}", revisionId);
+        request.withMatchingETagConstraint(revisionId);
+      }
+    }
+
+    @Override
+    public void applyRevisionConstraint(GetObjectMetadataRequest request,
+        String revisionId) {
+      // GetObjectMetadataRequest doesn't support eTag qualification
+    public String getRevisionId(S3ObjectAttributes s3Attributes) {
+      return s3Attributes.getVersionId();
+    }
+
+    @Override
+    public String getRevisionId(CopyResult copyResult) {
+      return copyResult.getVersionId();
+    }
+
+    @Override
-      LOG.debug("Restricting request to version {}", revisionId);
-      request.withVersionId(revisionId);
+      if (revisionId != null) {
+        LOG.debug("Restricting get request to version {}", revisionId);
+        request.withVersionId(revisionId);
+      }
+    }
+
+    @Override
+    public void applyRevisionConstraint(CopyObjectRequest request,
+        String revisionId) {
+      if (revisionId != null) {
+        LOG.debug("Restricting copy request to version {}", revisionId);
+        request.withSourceVersionId(revisionId);
+      }
+    }
+
+    @Override
+    public void applyRevisionConstraint(GetObjectMetadataRequest request,
+        String revisionId) {
+      if (revisionId != null) {
+        LOG.debug("Restricting metadata request to version {}", revisionId);
+        request.withVersionId(revisionId);
+      }
+    public String getRevisionId(final S3ObjectAttributes s3ObjectAttributes) {
+      return null;
+    }
+
+    @Override
+    public String getRevisionId(CopyResult copyResult) {
+      return null;
+    }
+
+    @Override
+    public void applyRevisionConstraint(CopyObjectRequest request,
+        String revisionId) {
+
+    }
+
+    @Override
+    public void applyRevisionConstraint(GetObjectMetadataRequest request,
+        String revisionId) {
+
+    }
+
+    @Override

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD45 INS65 INS65 INS65 INS42 INS43 INS42 INS65 INS65 INS65 INS42 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS60 INS78 INS83 INS43 INS42 INS44 INS8 MOV78 INS83 INS43 INS42 INS44 INS8 INS78 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 MOV44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 MOV44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS25 UPD43 INS25 INS42 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS43 INS42 INS68 INS42 INS68 INS42 INS68 INS66 INS66 INS68 INS66 INS66 INS42 INS42 INS16 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS8 INS42 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS8 INS42 INS42 INS27 INS8 UPD42 INS27 INS8 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS69 INS69 INS42 INS69 INS69 INS42 INS69 INS69 INS42 INS69 INS69 INS27 INS36 INS45 INS42 INS42 INS42 INS42 INS42 INS33 MOV21 MOV21 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS21 MOV21 INS42 INS33 INS21 INS21 INS42 INS33 MOV21 INS21 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS34 INS27 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 MOV32 INS42 UPD42 UPD45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 UPD45 INS42 INS42 INS42 UPD45 MOV32 UPD42 UPD45 DEL8 DEL8