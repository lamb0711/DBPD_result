Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1567994 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.IOUtils;
+import org.apache.hadoop.hdfs.ClientContext;
+import org.apache.hadoop.hdfs.RemotePeerFactory;
+import org.apache.hadoop.hdfs.net.Peer;
-    Socket s = null;
-    while (s == null) {
+    while (blockReader == null) {
-        s = NetUtils.getDefaultSocketFactory(conf).createSocket();
-        s.connect(targetAddr, HdfsServerConstants.READ_TIMEOUT);
-        s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
-        
-        String file = BlockReaderFactory.getFileName(targetAddr, block.getBlockPoolId(),
-            block.getBlockId());
-        blockReader = BlockReaderFactory.newBlockReader(dfs.getConf(),
-            file, block, lblock.getBlockToken(), 0, -1, true, "fsck",
-            TcpPeerServer.peerFromSocketAndKey(s, namenode.getRpcServer().
-                getDataEncryptionKey()), chosenNode, null, null, null, 
-                false, CachingStrategy.newDropBehind());
-        
+        String file = BlockReaderFactory.getFileName(targetAddr,
+            block.getBlockPoolId(), block.getBlockId());
+        blockReader = new BlockReaderFactory(dfs.getConf()).
+            setFileName(file).
+            setBlock(block).
+            setBlockToken(lblock.getBlockToken()).
+            setStartOffset(0).
+            setLength(-1).
+            setVerifyChecksum(true).
+            setClientName("fsck").
+            setDatanodeInfo(chosenNode).
+            setInetSocketAddress(targetAddr).
+            setCachingStrategy(CachingStrategy.newDropBehind()).
+            setClientCacheContext(dfs.getClientContext()).
+            setConfiguration(namenode.conf).
+            setRemotePeerFactory(new RemotePeerFactory() {
+              @Override
+              public Peer newConnectedPeer(InetSocketAddress addr)
+                  throws IOException {
+                Peer peer = null;
+                Socket s = NetUtils.getDefaultSocketFactory(conf).createSocket();
+                try {
+                  s.connect(addr, HdfsServerConstants.READ_TIMEOUT);
+                  s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
+                  peer = TcpPeerServer.peerFromSocketAndKey(s, namenode.getRpcServer().
+                        getDataEncryptionKey());
+                } finally {
+                  if (peer == null) {
+                    IOUtils.closeQuietly(s);
+                  }
+                }
+                return peer;
+              }
+            }).
+            build();
-        if (s != null) {
-          try {
-            s.close();
-          } catch (IOException iex) {
-          }
-        }
-        s = null;
-    if (blockReader == null) {
-      throw new Exception("Could not open data stream for " + lblock.getBlock());
-    }
-      try {s.close(); } catch (Exception e1) {}
+      blockReader.close();
-    if (!success)
+    if (!success) {
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV27 MOV8 INS8 MOV53 UPD42 INS32 INS32 INS42 INS32 INS42 INS14 INS32 INS42 INS40 INS43 INS1 INS32 INS42 INS32 INS42 INS31 INS32 INS42 MOV32 INS42 INS42 INS78 INS83 INS43 INS42 INS44 MOV43 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS60 INS60 INS54 INS41 INS32 INS42 MOV42 INS42 INS43 INS59 MOV43 INS59 INS8 INS8 INS42 INS32 INS42 MOV45 INS42 INS42 INS33 INS42 MOV32 INS21 MOV21 INS21 INS25 INS32 INS42 MOV9 INS32 INS7 INS27 INS8 INS32 INS42 MOV38 INS42 INS42 INS42 INS40 INS42 MOV32 INS42 INS33 INS21 INS32 INS42 MOV34 INS32 INS32 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 MOV42 INS14 UPD42 MOV42 MOV42 INS43 MOV32 INS42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL33 DEL33 DEL33 DEL9 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL33 DEL7 DEL21 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8