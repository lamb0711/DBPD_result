Merge branch 'trunk' into HADOOP-12756

+import java.net.ConnectException;
+import java.net.MalformedURLException;
+import java.util.Collection;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLSocketFactory;
+
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.http.HttpConfig.Policy;
+import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
+import org.apache.hadoop.security.authentication.client.KerberosAuthenticator;
+import org.apache.hadoop.security.ssl.SSLFactory;
+import org.apache.hadoop.yarn.conf.HAUtil;
+import org.apache.hadoop.yarn.webapp.util.WebAppUtils;
+import org.codehaus.jettison.json.JSONException;
+  private static final String CLUSTER_INFO_URL = "/ws/v1/cluster/info";
+
-      URL url =
-          new URL("http://"
-              + client.getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS)
-              + "/ws/v1/cluster/info");
-      URLConnection conn = url.openConnection();
-      conn.connect();
-      InputStream in = conn.getInputStream();
-      String encoding = conn.getContentEncoding();
-      encoding = encoding == null ? "UTF-8" : encoding;
-      String body = IOUtils.toString(in, encoding);
-      JSONObject obj = new JSONObject(body);
-      JSONObject clusterInfo = obj.getJSONObject("clusterInfo");
+      // connect with url
+      URL url = getClusterUrl();
+      if (null == url) {
+        return -1;
+      }
+      JSONObject clusterInfo = getJSONObject(connect(url));
+  private JSONObject getJSONObject(URLConnection conn)
+      throws IOException, JSONException {
+    InputStream in = conn.getInputStream();
+    String encoding = conn.getContentEncoding();
+    encoding = encoding == null ? "UTF-8" : encoding;
+    String body = IOUtils.toString(in, encoding);
+    JSONObject obj = new JSONObject(body);
+    JSONObject clusterInfo = obj.getJSONObject("clusterInfo");
+    return clusterInfo;
+  }
+
+  private URL getClusterUrl() throws Exception {
+    URL url = null;
+    Configuration conf = getConf();
+    if (HAUtil.isHAEnabled(conf)) {
+      Collection<String> haids = HAUtil.getRMHAIds(conf);
+      for (String rmhid : haids) {
+        try {
+          url = getHAClusterUrl(conf, rmhid);
+          if (isActive(url)) {
+            break;
+          }
+        } catch (ConnectException e) {
+          // ignore and try second one when one of RM is down
+        }
+      }
+    } else {
+      url = new URL(
+          WebAppUtils.getRMWebAppURLWithScheme(conf) + CLUSTER_INFO_URL);
+    }
+    return url;
+  }
+
+  private boolean isActive(URL url) throws Exception {
+    URLConnection connect = connect(url);
+    JSONObject clusterInfo = getJSONObject(connect);
+    return clusterInfo.getString("haState").equals("ACTIVE");
+  }
+
+  @VisibleForTesting
+  public URL getHAClusterUrl(Configuration conf, String rmhid)
+      throws MalformedURLException {
+    return new URL(WebAppUtils.getHttpSchemePrefix(conf)
+        + WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(conf,
+            YarnConfiguration.useHttps(conf) ? Policy.HTTPS_ONLY
+                : Policy.HTTP_ONLY,
+            rmhid)
+        + CLUSTER_INFO_URL);
+  }
+
+  private URLConnection connect(URL url) throws Exception {
+    AuthenticatedURL.Token token = new AuthenticatedURL.Token();
+    AuthenticatedURL authUrl;
+    SSLFactory clientSslFactory;
+    URLConnection connection;
+    // If https is chosen, configures SSL client.
+    if (YarnConfiguration.useHttps(getConf())) {
+      clientSslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, getConf());
+      clientSslFactory.init();
+      SSLSocketFactory sslSocktFact = clientSslFactory.createSSLSocketFactory();
+
+      authUrl =
+          new AuthenticatedURL(new KerberosAuthenticator(), clientSslFactory);
+      connection = authUrl.openConnection(url, token);
+      HttpsURLConnection httpsConn = (HttpsURLConnection) connection;
+      httpsConn.setSSLSocketFactory(sslSocktFact);
+    } else {
+      authUrl = new AuthenticatedURL(new KerberosAuthenticator());
+      connection = authUrl.openConnection(url, token);
+    }
+    connection.connect();
+    return connection;
+  }
+
-    long uptime = now - rmStartTime;
+    long uptime = 0L;
+    if (rmStartTime != -1) {
+      uptime = now - rmStartTime;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS39 INS42 INS8 INS83 INS43 UPD42 INS44 INS43 INS43 MOV8 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS42 INS42 INS45 INS54 MOV41 INS42 MOV43 INS42 INS42 INS42 INS41 INS42 INS42 INS60 INS60 INS25 INS41 INS43 INS42 INS42 INS60 INS60 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS21 INS41 INS25 INS8 MOV12 INS42 MOV43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS14 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS32 INS42 INS27 INS8 INS60 INS25 INS60 MOV41 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS70 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS45 INS43 INS27 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS60 INS21 INS21 INS60 INS21 INS21 INS21 INS42 INS42 INS34 INS42 INS38 INS21 MOV43 INS59 INS27 INS8 INS43 INS59 INS42 INS74 INS59 INS44 INS42 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS42 INS43 INS42 INS7 INS32 INS43 INS59 INS7 INS7 INS43 INS59 INS32 INS7 INS7 INS34 INS7 INS42 INS32 INS33 INS42 INS41 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS54 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 MOV27 INS42 INS38 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS43 INS27 INS32 INS40 INS40 INS43 INS40 INS32 INS42 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS21 INS25 INS44 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS7 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS10 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL45 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL54 DEL8