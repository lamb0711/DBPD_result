MAPREDUCE-3823. Ensure counters are calculated only once after a job finishes. (Contributed by Vinod Kumar Vavilapalli)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241692 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.classification.InterfaceAudience.Private;
-@SuppressWarnings({ "rawtypes", "deprecation", "unchecked" })
+@SuppressWarnings({ "rawtypes", "unchecked" })
+  private Object fullCountersLock = new Object();
+  private Counters fullCounters = null;
+  private Counters finalMapCounters = null;
+  private Counters finalReduceCounters = null;
-    Counters counters = new Counters();
+
+
+      JobState state = getState();
+      if (state == JobState.ERROR || state == JobState.FAILED
+          || state == JobState.KILLED || state == JobState.SUCCEEDED) {
+        this.mayBeConstructFinalFullCounters();
+        return fullCounters;
+      }
+
+      Counters counters = new Counters();
+
+      // jobFile can be null if the job is not yet inited.
+      String jobFile =
+          remoteJobConfFile == null ? "" : remoteJobConfFile.toString();
+
-            cleanupProgress, remoteJobConfFile.toString(), amInfos, isUber);
+            cleanupProgress, jobFile, amInfos, isUber);
-          cleanupProgress, remoteJobConfFile.toString(), amInfos, isUber);
+          cleanupProgress, jobFile, amInfos, isUber);
-    Counters mapCounters = new Counters();
-    Counters reduceCounters = new Counters();
-    for (Task t : job.tasks.values()) {
-      Counters counters = t.getCounters();
-      switch (t.getType()) {
-        case MAP:     mapCounters.incrAllCounters(counters);     break;
-        case REDUCE:  reduceCounters.incrAllCounters(counters);  break;
-      }
-    }
+    job.mayBeConstructFinalFullCounters();
-        mapCounters,
-        reduceCounters,
-        job.getAllCounters());
+        job.finalMapCounters,
+        job.finalReduceCounters,
+        job.fullCounters);
+  private void mayBeConstructFinalFullCounters() {
+    // Calculating full-counters. This should happen only once for the job.
+    synchronized (this.fullCountersLock) {
+      if (this.fullCounters != null) {
+        // Already constructed. Just return.
+        return;
+      }
+      this.constructFinalFullcounters();
+    }
+  }
+
+  @Private
+  public void constructFinalFullcounters() {
+    this.fullCounters = new Counters();
+    this.finalMapCounters = new Counters();
+    this.finalReduceCounters = new Counters();
+    this.fullCounters.incrAllCounters(jobCounters);
+    for (Task t : this.tasks.values()) {
+      Counters counters = t.getCounters();
+      switch (t.getType()) {
+      case MAP:
+        this.finalMapCounters.incrAllCounters(counters);
+        break;
+      case REDUCE:
+        this.finalReduceCounters.incrAllCounters(counters);
+        break;
+      }
+      this.fullCounters.incrAllCounters(counters);
+    }
+  }
+

INS26 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 MOV43 INS59 MOV83 MOV83 MOV43 MOV42 MOV44 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS21 MOV60 MOV41 INS51 INS42 INS21 INS21 INS21 INS21 INS70 INS43 INS8 INS32 MOV43 INS22 INS8 INS7 INS7 INS7 INS32 MOV44 MOV32 INS8 INS42 INS60 INS25 MOV60 MOV21 MOV41 INS60 INS42 INS42 UPD42 INS14 INS52 INS42 INS25 INS21 INS22 MOV14 INS22 MOV14 INS22 INS14 INS22 INS42 INS42 INS22 MOV60 MOV50 INS21 INS43 INS59 INS27 INS8 INS43 INS59 MOV43 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS27 INS8 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS41 INS42 INS42 INS16 INS42 INS22 INS33 INS41 INS52 INS42 INS42 INS22 INS42 UPD42 MOV42 INS42 INS27 INS27 INS42 INS40 INS32 INS42 INS27 INS45 MOV32 INS52 INS42 INS22 INS22 INS52 INS42 INS27 INS27 INS42 INS40 INS52 INS42 INS42 INS33 UPD42 MOV42 INS52 INS42 INS52 INS42 INS42 INS40 INS42 INS40 DEL45 DEL8 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL59 DEL60 DEL8 DEL70 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL8 DEL31