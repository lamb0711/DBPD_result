YARN-6050. AMs can't be scheduled on racks or nodes (rkanter)

+   *
+   * @param nodeFilter A {@link NodeFilter} for filtering the nodes
+   * @return A list of filtered nodes
+  public List<NodeId> getAllNodeIds() {
+    return getNodeIds(null);
+  }
+
+  /**
+   * Convenience method to filter nodes based on a condition.
+   *
+   * @param nodeFilter A {@link NodeFilter} for filtering the nodes
+   * @return A list of filtered nodes
+   */
+  public List<NodeId> getNodeIds(NodeFilter nodeFilter) {
+    List<NodeId> nodeList = new ArrayList<>();
+    readLock.lock();
+    try {
+      if (nodeFilter == null) {
+        for (N node : nodes.values()) {
+          nodeList.add(node.getNodeID());
+        }
+      } else {
+        for (N node : nodes.values()) {
+          if (nodeFilter.accept(node)) {
+            nodeList.add(node.getNodeID());
+          }
+        }
+      }
+    } finally {
+      readLock.unlock();
+    }
+    return nodeList;
+  }
+
-      return getAllNodes();
+      retNodes.addAll(getAllNodes());
-      return nodesPerRack.get(resourceName);
+      retNodes.addAll(nodesPerRack.get(resourceName));
+    } else {
+      LOG.info(
+          "Could not find a node matching given resourceName " + resourceName);
+    }
+    return retNodes;
+  }
+
+  /**
+   * Convenience method to return list of {@link NodeId} corresponding to
+   * resourceName passed in the {@link ResourceRequest}.
+   *
+   * @param resourceName Host/rack name of the resource, or
+   * {@link ResourceRequest#ANY}
+   * @return list of {@link NodeId} that match the resourceName
+   */
+  public List<NodeId> getNodeIdsByResourceName(final String resourceName) {
+    Preconditions.checkArgument(
+        resourceName != null && !resourceName.isEmpty());
+    List<NodeId> retNodes = new ArrayList<>();
+    if (ResourceRequest.ANY.equals(resourceName)) {
+      retNodes.addAll(getAllNodeIds());
+    } else if (nodeNameToNodeMap.containsKey(resourceName)) {
+      retNodes.add(nodeNameToNodeMap.get(resourceName).getNodeID());
+    } else if (nodesPerRack.containsKey(resourceName)) {
+      for (N node : nodesPerRack.get(resourceName)) {
+        retNodes.add(node.getNodeID());
+      }

INS31 INS31 INS31 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS65 INS65 INS43 INS43 INS41 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS21 INS54 INS41 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS21 INS60 INS25 INS41 INS42 INS66 INS65 INS66 INS66 INS42 INS42 INS32 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS8 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS74 INS59 INS32 INS8 INS25 INS42 INS42 INS42 INS33 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS25 INS21 INS21 INS42 INS42 INS67 INS42 INS42 INS42 INS27 INS43 INS43 INS42 INS14 INS40 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS74 INS27 INS8 INS8 INS32 INS32 INS42 INS42 INS27 INS38 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS21 INS32 INS8 INS8 INS43 INS42 INS33 INS70 INS70 INS42 INS42 INS42 INS42 MOV32 INS21 INS42 INS33 INS32 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS70 INS21 INS42 INS44 INS32 INS8 INS44 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS44 MOV32 INS8 INS32 INS43 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS32 INS32 INS42 INS43 INS42 INS21 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL41 DEL41