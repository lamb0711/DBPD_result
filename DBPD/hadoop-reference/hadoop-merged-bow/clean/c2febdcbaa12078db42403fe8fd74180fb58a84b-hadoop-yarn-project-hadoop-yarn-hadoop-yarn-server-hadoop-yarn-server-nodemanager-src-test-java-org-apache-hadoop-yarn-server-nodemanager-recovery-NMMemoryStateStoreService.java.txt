YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import org.apache.hadoop.yarn.api.protocolrecords.StartContainerRequest;
+import org.apache.hadoop.yarn.api.records.ContainerExitStatus;
+  private Map<ContainerId, RecoveredContainerState> containerStates;
+    containerStates = new HashMap<ContainerId, RecoveredContainerState>();
+  @Override
+  public List<RecoveredContainerState> loadContainersState()
+      throws IOException {
+    // return a copy so caller can't modify our state
+    List<RecoveredContainerState> result =
+        new ArrayList<RecoveredContainerState>(containerStates.size());
+    for (RecoveredContainerState rcs : containerStates.values()) {
+      RecoveredContainerState rcsCopy = new RecoveredContainerState();
+      rcsCopy.status = rcs.status;
+      rcsCopy.exitCode = rcs.exitCode;
+      rcsCopy.killed = rcs.killed;
+      rcsCopy.diagnostics = rcs.diagnostics;
+      rcsCopy.startRequest = rcs.startRequest;
+      result.add(rcsCopy);
+    }
+    return new ArrayList<RecoveredContainerState>();
+  }
+
+  @Override
+  public void storeContainer(ContainerId containerId,
+      StartContainerRequest startRequest) throws IOException {
+    RecoveredContainerState rcs = new RecoveredContainerState();
+    rcs.startRequest = startRequest;
+    containerStates.put(containerId, rcs);
+  }
+
+  @Override
+  public void storeContainerDiagnostics(ContainerId containerId,
+      StringBuilder diagnostics) throws IOException {
+    RecoveredContainerState rcs = getRecoveredContainerState(containerId);
+    rcs.diagnostics = diagnostics.toString();
+  }
+
+  @Override
+  public void storeContainerLaunched(ContainerId containerId)
+      throws IOException {
+    RecoveredContainerState rcs = getRecoveredContainerState(containerId);
+    if (rcs.exitCode != ContainerExitStatus.INVALID) {
+      throw new IOException("Container already completed");
+    }
+    rcs.status = RecoveredContainerStatus.LAUNCHED;
+  }
+
+  @Override
+  public void storeContainerKilled(ContainerId containerId)
+      throws IOException {
+    RecoveredContainerState rcs = getRecoveredContainerState(containerId);
+    rcs.killed = true;
+  }
+
+  @Override
+  public void storeContainerCompleted(ContainerId containerId, int exitCode)
+      throws IOException {
+    RecoveredContainerState rcs = getRecoveredContainerState(containerId);
+    rcs.status = RecoveredContainerStatus.COMPLETED;
+    rcs.exitCode = exitCode;
+  }
+
+  @Override
+  public void removeContainer(ContainerId containerId) throws IOException {
+    containerStates.remove(containerId);
+  }
+
+  private RecoveredContainerState getRecoveredContainerState(
+      ContainerId containerId) throws IOException {
+    RecoveredContainerState rcs = containerStates.get(containerId);
+    if (rcs == null) {
+      throw new IOException("No start request for " + containerId);
+    }
+    return rcs;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS78 INS83 INS74 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS43 INS43 INS42 INS21 INS42 INS43 INS43 INS42 INS60 INS70 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS42 INS43 INS42 INS42 INS60 INS21 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS42 INS42 INS7 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS14 INS42 INS42 INS43 INS59 INS7 INS32 INS42 INS42 INS43 INS59 INS7 INS42 INS43 INS59 INS27 INS8 INS7 INS42 INS43 INS59 INS7 INS42 INS43 INS59 INS7 INS7 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS74 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS32 INS42 INS42 INS32 INS40 INS40 INS53 INS40 INS40 INS42 INS42 INS32 INS40 INS9 INS42 INS42 INS32 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS74 INS42 INS42 INS74 INS32 INS42 INS43 INS59 INS7 INS7 INS7 INS7 INS7 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS14 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS42 INS42