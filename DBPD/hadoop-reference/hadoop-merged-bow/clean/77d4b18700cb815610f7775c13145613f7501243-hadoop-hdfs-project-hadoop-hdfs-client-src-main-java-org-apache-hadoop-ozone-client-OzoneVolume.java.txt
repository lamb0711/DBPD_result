HDFS-12385. Ozone: OzoneClient: Refactoring OzoneClient API. Contributed by Nadakumar.

-/*
+/**
- *  with the License.  You may obtain a copy of the License at
+ * with the License.  You may obtain a copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import org.apache.hadoop.ozone.ksm.helpers.KsmOzoneAclMap;
-import org.apache.hadoop.ozone.ksm.helpers.KsmVolumeArgs;
+import com.google.common.base.Preconditions;
+import org.apache.hadoop.ozone.OzoneAcl;
+import org.apache.hadoop.ozone.client.protocol.ClientProtocol;
+
+import java.io.IOException;
+import java.util.List;
+   * Name of the Volume.
+   */
+  private final String name;
+
+  /**
-  private final String adminName;
+  private String admin;
-  private final String ownerName;
-  /**
-   * Name of the Volume.
-   */
-  private final String volumeName;
+  private String owner;
-  private final long quotaInBytes;
+  private long quotaInBytes;
-  private final KsmOzoneAclMap aclMap;
+  private List<OzoneAcl> acls;
+
+  private ClientProtocol proxy;
-   * Constructs OzoneVolume from KsmVolumeArgs.
-   *
-   * @param ksmVolumeArgs
+   * Constructs OzoneVolume.
-  public OzoneVolume(KsmVolumeArgs ksmVolumeArgs) {
-    this.adminName = ksmVolumeArgs.getAdminName();
-    this.ownerName = ksmVolumeArgs.getOwnerName();
-    this.volumeName = ksmVolumeArgs.getVolume();
-    this.quotaInBytes = ksmVolumeArgs.getQuotaInBytes();
-    this.aclMap = ksmVolumeArgs.getAclMap();
+  public OzoneVolume(String name, String admin, String owner,
+                     long quotaInBytes, List<OzoneAcl> acls) {
+    this.name = name;
+    this.admin = admin;
+    this.owner = owner;
+    this.quotaInBytes = quotaInBytes;
+    this.acls = acls;
-  /**
-   * Returns Volume's admin name.
-   *
-   * @return adminName
-   */
-  public String getAdminName() {
-    return adminName;
-  }
-
-  /**
-   * Returns Volume's owner name.
-   *
-   * @return ownerName
-   */
-  public String getOwnerName() {
-    return ownerName;
+  public void setClientProxy(ClientProtocol clientProxy) {
+    this.proxy = clientProxy;
-  public String getVolumeName() {
-    return volumeName;
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * Returns Volume's admin name.
+   *
+   * @return adminName
+   */
+  public String getAdmin() {
+    return admin;
+  }
+
+  /**
+   * Returns Volume's owner name.
+   *
+   * @return ownerName
+   */
+  public String getOwner() {
+    return owner;
-  public KsmOzoneAclMap getAclMap() {
-    return aclMap;
+  public List<OzoneAcl> getAcls() {
+    return acls;
+  }
+
+  /**
+   * Sets/Changes the owner of this Volume.
+   * @param owner new owner
+   * @throws IOException
+   */
+  public void setOwner(String owner) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(owner);
+    proxy.setVolumeOwner(name, owner);
+    this.owner = owner;
+  }
+
+  /**
+   * Sets/Changes the quota of this Volume.
+   * @param quota new quota
+   * @throws IOException
+   */
+  public void setQuota(OzoneQuota quota) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(quota);
+    proxy.setVolumeQuota(name, quota);
+    this.quotaInBytes = quota.sizeInBytes();
+  }
+
+  /**
+   * Creates a new Bucket in this Volume, with default values.
+   * @param bucketName Name of the Bucket
+   * @throws IOException
+   */
+  public void createBucket(String bucketName)
+      throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(bucketName);
+    proxy.createBucket(name, bucketName);
+  }
+
+  /**
+   * Creates a new Bucket in this Volume, with properties set in bucketArgs.
+   * @param bucketName Name of the Bucket
+   * @param bucketArgs Properties to be set
+   * @throws IOException
+   */
+  public void createBucket(String bucketName, BucketArgs bucketArgs)
+      throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(bucketName);
+    Preconditions.checkNotNull(bucketArgs);
+    proxy.createBucket(name, bucketName, bucketArgs);
+  }
+
+  /**
+   * Get the Bucket from this Volume.
+   * @param bucketName Name of the Bucket
+   * @return OzoneBucket
+   * @throws IOException
+   */
+  public OzoneBucket getBucket(String bucketName) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(bucketName);
+    OzoneBucket bucket = proxy.getBucketDetails(name, bucketName);
+    bucket.setClientProxy(proxy);
+    return bucket;
+  }
+
+  /**
+   * Deletes the Bucket from this Volume.
+   * @param bucketName Name of the Bucket
+   * @throws IOException
+   */
+  public void deleteBucket(String bucketName) throws IOException {
+    Preconditions.checkNotNull(proxy, "Client proxy is not set.");
+    Preconditions.checkNotNull(bucketName);
+    proxy.deleteBucket(name, bucketName);

INS26 INS26 INS26 MOV23 MOV31 INS29 INS40 UPD40 UPD40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS74 INS83 INS43 INS59 INS44 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS8 UPD42 UPD42 UPD42 INS74 UPD42 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 UPD42 UPD42 INS43 INS43 UPD42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS74 UPD42 INS43 INS42 INS21 INS43 INS43 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS21 INS60 INS21 INS41 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS42 UPD42 MOV42 UPD66 INS42 INS42 INS42 INS43 INS43 INS42 INS7 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS32 INS7 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS32 INS7 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS32 INS43 INS59 INS32 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL43 DEL42 DEL65 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL43