Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Closeable;
+import java.io.IOException;
+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
+import org.apache.hadoop.util.Daemon;
+import org.apache.hadoop.util.StringUtils;
- * A cache of sockets.
+ * A cache of input stream sockets to Data Node.
-  static final Log LOG = LogFactory.getLog(SocketCache.class);
+  private static final Log LOG = LogFactory.getLog(SocketCache.class);
-  private final LinkedListMultimap<SocketAddress, Socket> multimap;
-  private final int capacity;
-
-  /**
-   * Create a SocketCache with the given capacity.
-   * @param capacity  Max cache size.
-   */
-  public SocketCache(int capacity) {
-    multimap = LinkedListMultimap.create();
-    this.capacity = capacity;
-    if (capacity <= 0) {
-      LOG.debug("SocketCache disabled in configuration.");
+  @InterfaceAudience.Private
+  static class SocketAndStreams implements Closeable {
+    public final Socket sock;
+    public final IOStreamPair ioStreams;
+    long createTime;
+    
+    public SocketAndStreams(Socket s, IOStreamPair ioStreams) {
+      this.sock = s;
+      this.ioStreams = ioStreams;
+      this.createTime = System.currentTimeMillis();
+    
+    @Override
+    public void close() {
+      if (ioStreams != null) { 
+        IOUtils.closeStream(ioStreams.in);
+        IOUtils.closeStream(ioStreams.out);
+      }
+      IOUtils.closeSocket(sock);
+    }
+
+    public long getCreateTime() {
+      return this.createTime;
+    }
+  }
+
+  private Daemon daemon;
+  /** A map for per user per datanode. */
+  private static LinkedListMultimap<SocketAddress, SocketAndStreams> multimap =
+    LinkedListMultimap.create();
+  private static int capacity;
+  private static long expiryPeriod;
+  private static SocketCache scInstance = new SocketCache();
+  private static boolean isInitedOnce = false;
+ 
+  public static synchronized SocketCache getInstance(int c, long e) {
+    // capacity is only initialized once
+    if (isInitedOnce == false) {
+      capacity = c;
+      expiryPeriod = e;
+
+      if (capacity == 0 ) {
+        LOG.info("SocketCache disabled.");
+      }
+      else if (expiryPeriod == 0) {
+        throw new IllegalStateException("Cannot initialize expiryPeriod to " +
+           expiryPeriod + "when cache is enabled.");
+      }
+      isInitedOnce = true;
+    } else { //already initialized once
+      if (capacity != c || expiryPeriod != e) {
+        LOG.info("capacity and expiry periods already set to " + capacity + 
+          " and " + expiryPeriod + " respectively. Cannot set it to " + c + 
+          " and " + e);
+      }
+    }
+
+    return scInstance;
+  }
+
+  private boolean isDaemonStarted() {
+    return (daemon == null)? false: true;
+  }
+
+  private synchronized void startExpiryDaemon() {
+    // start daemon only if not already started
+    if (isDaemonStarted() == true) {
+      return;
+    }
+    
+    daemon = new Daemon(new Runnable() {
+      @Override
+      public void run() {
+        try {
+          SocketCache.this.run();
+        } catch(InterruptedException e) {
+          //noop
+        } finally {
+          SocketCache.this.clear();
+        }
+      }
+
+      @Override
+      public String toString() {
+        return String.valueOf(SocketCache.this);
+      }
+    });
+    daemon.start();
-  public synchronized Socket get(SocketAddress remote) {
+  public synchronized SocketAndStreams get(SocketAddress remote) {
+
-    
-    List<Socket> socklist = multimap.get(remote);
-    if (socklist == null) {
+
+    List<SocketAndStreams> sockStreamList = multimap.get(remote);
+    if (sockStreamList == null) {
-    Iterator<Socket> iter = socklist.iterator();
+    Iterator<SocketAndStreams> iter = sockStreamList.iterator();
-      Socket candidate = iter.next();
+      SocketAndStreams candidate = iter.next();
-      if (!candidate.isClosed()) {
+      if (!candidate.sock.isClosed()) {
-  public synchronized void put(Socket sock) {
+  public synchronized void put(Socket sock, IOStreamPair ioStreams) {
+
+    Preconditions.checkNotNull(sock);
+    SocketAndStreams s = new SocketAndStreams(sock, ioStreams);
-      IOUtils.closeSocket(sock);
+      s.close();
-    
-    Preconditions.checkNotNull(sock);
+ 
+    startExpiryDaemon();
-    multimap.put(remoteAddr, sock);
+    multimap.put(remoteAddr, s);
+   * Evict and close sockets older than expiry period from the cache.
+   */
+  private synchronized void evictExpired(long expiryPeriod) {
+    while (multimap.size() != 0) {
+      Iterator<Entry<SocketAddress, SocketAndStreams>> iter =
+        multimap.entries().iterator();
+      Entry<SocketAddress, SocketAndStreams> entry = iter.next();
+      // if oldest socket expired, remove it
+      if (entry == null || 
+        System.currentTimeMillis() - entry.getValue().getCreateTime() < 
+        expiryPeriod) {
+        break;
+      }
+      iter.remove();
+      SocketAndStreams s = entry.getValue();
+      s.close();
+    }
+  }
+
+  /**
-    Iterator<Entry<SocketAddress, Socket>> iter =
+    Iterator<Entry<SocketAddress, SocketAndStreams>> iter =
-      throw new IllegalStateException("Cannot evict from empty cache!");
+      throw new IllegalStateException("Cannot evict from empty cache! " +
+        "capacity: " + capacity);
-    Entry<SocketAddress, Socket> entry = iter.next();
+    Entry<SocketAddress, SocketAndStreams> entry = iter.next();
-    Socket sock = entry.getValue();
-    IOUtils.closeSocket(sock);
+    SocketAndStreams s = entry.getValue();
+    s.close();
+  }
+
+  /**
+   * Periodically check in the cache and expire the entries
+   * older than expiryPeriod minutes
+   */
+  private void run() throws InterruptedException {
+    for(long lastExpiryTime = System.currentTimeMillis();
+        !Thread.interrupted();
+        Thread.sleep(expiryPeriod)) {
+      final long elapsed = System.currentTimeMillis() - lastExpiryTime;
+      if (elapsed >= expiryPeriod) {
+        evictExpired(expiryPeriod);
+        lastExpiryTime = System.currentTimeMillis();
+      }
+    }
+    clear();
+    throw new InterruptedException("Daemon Interrupted");
-  public synchronized void clear() {
-    for (Socket sock : multimap.values()) {
-      IOUtils.closeSocket(sock);
+  private synchronized void clear() {
+    for (SocketAndStreams sockAndStream : multimap.values()) {
+      sockAndStream.close();
-  protected void finalize() {
-    clear();
-  }
-

INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS78 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS29 UPD83 UPD74 UPD83 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 MOV83 INS83 INS83 INS43 INS42 MOV44 INS44 INS8 INS83 INS39 INS42 INS8 UPD83 UPD42 INS8 UPD43 INS44 MOV25 INS29 UPD42 INS44 INS8 MOV29 INS83 INS83 INS39 INS42 INS8 INS29 UPD83 INS42 INS43 INS8 MOV29 INS83 INS83 INS39 INS42 INS8 UPD66 INS40 INS42 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS65 INS43 MOV32 INS42 INS42 INS42 INS14 INS42 INS9 INS42 UPD42 INS39 INS42 INS25 INS41 INS41 INS25 INS21 INS21 UPD42 INS43 INS42 INS60 INS21 INS65 INS39 INS42 INS61 INS60 INS25 INS60 MOV21 INS60 INS21 INS65 INS42 INS24 MOV21 INS53 INS70 MOV21 INS42 INS42 INS42 INS42 MOV43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS25 MOV21 INS41 INS66 INS42 INS43 INS27 INS8 INS8 INS42 INS16 INS27 INS8 INS7 INS32 UPD74 UPD74 INS42 INS43 INS59 INS32 INS66 INS27 MOV8 MOV60 INS74 INS59 MOV38 INS8 INS74 INS59 INS43 INS59 INS32 INS66 INS66 INS58 INS38 INS32 INS8 INS14 INS44 MOV32 INS8 INS42 INS7 INS7 INS7 INS27 INS8 INS22 INS42 INS42 INS9 MOV21 MOV21 MOV25 INS21 INS25 INS36 INS9 INS9 INS32 INS9 INS41 INS42 INS14 INS42 INS42 UPD43 UPD42 UPD42 MOV43 UPD43 INS42 INS42 INS14 INS21 INS42 UPD42 INS32 INS34 INS21 INS43 INS74 INS42 INS32 INS53 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS39 INS59 INS32 INS42 INS42 INS42 INS60 INS25 INS43 INS45 INS43 INS42 INS21 INS22 INS42 INS22 INS42 INS22 INS32 INS42 INS33 INS21 INS21 INS52 INS42 UPD27 INS25 INS7 INS27 INS8 INS27 INS42 INS43 INS14 UPD42 UPD42 UPD42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS74 MOV59 UPD74 MOV74 MOV59 INS27 INS32 UPD43 INS42 INS43 INS43 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS83 INS39 INS59 INS27 INS8 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 UPD42 INS27 INS8 INS42 INS9 INS27 INS27 INS21 INS42 INS33 INS42 INS43 INS1 INS42 INS42 INS42 INS42 MOV43 UPD74 MOV74 UPD43 INS27 INS27 INS10 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS34 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS31 INS31 INS40 UPD43 UPD42 INS42 INS33 INS27 INS42 INS42 INS45 INS45 INS42 INS32 INS42 INS32 INS7 UPD42 UPD45 INS14 INS42 INS42 INS27 INS78 INS83 INS39 INS42 MOV8 INS78 INS83 INS43 INS42 INS8 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 MOV43 INS27 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS54 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS8 INS12 INS8 INS32 INS42 INS42 INS21 INS44 INS8 MOV21 INS42 INS42 INS52 INS32 UPD43 MOV43 UPD42 MOV42 INS42 INS52 INS42 UPD42 INS52 UPD42 INS42 INS42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL44 DEL8 DEL70 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL8 DEL31 DEL42 DEL74 DEL45 DEL14 DEL53 DEL42 DEL42 DEL8