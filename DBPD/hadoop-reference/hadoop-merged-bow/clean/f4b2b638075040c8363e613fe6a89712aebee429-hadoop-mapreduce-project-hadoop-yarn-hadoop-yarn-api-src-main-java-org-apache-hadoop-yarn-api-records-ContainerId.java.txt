Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1170378 13f79535-47bb-0310-9956-ffa450edef68

-public interface ContainerId extends Comparable<ContainerId>{
-  public abstract ApplicationAttemptId getAppAttemptId();
-  public abstract ApplicationId getAppId();
+import java.text.NumberFormat;
+
+import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.classification.InterfaceAudience.Public;
+import org.apache.hadoop.classification.InterfaceStability.Stable;
+import org.apache.hadoop.classification.InterfaceStability.Unstable;
+
+/**
+ * <p><code>ContainerId</code> represents a globally unique identifier
+ * for a {@link Container} in the cluster.</p>
+ */
+@Public
+@Stable
+public abstract class ContainerId implements Comparable<ContainerId>{
+  /**
+   * Get the <code>ApplicationAttemptId</code> of the application to which
+   * the <code>Container</code> was assigned.
+   * @return <code>ApplicationAttemptId</code> of the application to which
+   *         the <code>Container</code> was assigned
+   */
+  @Public
+  @Stable
+  public abstract ApplicationAttemptId getApplicationAttemptId();
+  
+  @Private
+  @Unstable
+  public abstract void setApplicationAttemptId(ApplicationAttemptId atId);
+
+  /**
+   * Get the identifier of the <code>ContainerId</code>.
+   * @return identifier of the <code>ContainerId</code>
+   */
+  @Public
+  @Stable
-  
-  public abstract void setAppAttemptId(ApplicationAttemptId atId);
-  public abstract void setAppId(ApplicationId appID);
+
+  @Private
+  @Unstable
+ 
+  // TODO: Why thread local?
+  // ^ NumberFormat instances are not threadsafe
+  private static final ThreadLocal<NumberFormat> appIdFormat =
+      new ThreadLocal<NumberFormat>() {
+        @Override
+        public NumberFormat initialValue() {
+          NumberFormat fmt = NumberFormat.getInstance();
+          fmt.setGroupingUsed(false);
+          fmt.setMinimumIntegerDigits(4);
+          return fmt;
+        }
+      };
+
+  // TODO: fail the app submission if attempts are more than 10 or something
+  private static final ThreadLocal<NumberFormat> appAttemptIdFormat =
+      new ThreadLocal<NumberFormat>() {
+        @Override
+        public NumberFormat initialValue() {
+          NumberFormat fmt = NumberFormat.getInstance();
+          fmt.setGroupingUsed(false);
+          fmt.setMinimumIntegerDigits(2);
+          return fmt;
+        }
+      };
+  // TODO: Why thread local?
+  // ^ NumberFormat instances are not threadsafe
+  private static final ThreadLocal<NumberFormat> containerIdFormat =
+      new ThreadLocal<NumberFormat>() {
+        @Override
+        public NumberFormat initialValue() {
+          NumberFormat fmt = NumberFormat.getInstance();
+          fmt.setGroupingUsed(false);
+          fmt.setMinimumIntegerDigits(6);
+          return fmt;
+        }
+      };
+  
+  @Override
+  public int hashCode() {
+    // Generated by eclipse.
+    final int prime = 31;
+    int result = 1;
+    result = prime * result + getId();
+    result = prime * result
+        + ((getApplicationAttemptId() == null) ? 0 : getApplicationAttemptId().hashCode());
+    return result;
+  }
+
+  @Override
+  public boolean equals(Object other) {
+    if (other == null) {
+      return false;
+    }
+    if (other.getClass().isAssignableFrom(this.getClass())) {
+      ContainerId otherCId = (ContainerId)other;
+      if (this.getApplicationAttemptId().equals(
+          otherCId.getApplicationAttemptId())) {
+        return this.getId() == otherCId.getId();
+      }
+    }
+    return false;
+  }
+
+  @Override
+  public int compareTo(ContainerId other) {
+    if (this.getApplicationAttemptId().compareTo(
+        other.getApplicationAttemptId()) == 0) {
+      return this.getId() - other.getId();
+    } else {
+      return this.getApplicationAttemptId().compareTo(
+          other.getApplicationAttemptId());
+    }
+    
+  }
+  
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder();
+    ApplicationId appId = getApplicationAttemptId().getApplicationId();
+    sb.append("container_").append(appId.getClusterTimestamp()).append("_");
+    sb.append(appIdFormat.get().format(appId.getId())).append("_");
+    sb.append(appAttemptIdFormat.get().format(getApplicationAttemptId().
+        getAttemptId())).append("_");
+    sb.append(containerIdFormat.get().format(getId()));
+    return sb.toString();
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS29 INS78 INS78 INS83 INS23 INS23 INS23 INS31 INS31 INS31 INS65 INS42 INS42 INS29 INS78 INS78 UPD42 INS78 INS78 INS39 INS42 MOV44 INS29 INS78 INS78 INS78 INS78 UPD42 MOV44 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS74 INS59 INS78 INS39 INS42 INS8 INS78 MOV83 INS39 INS42 INS44 INS8 INS78 UPD83 MOV83 UPD39 MOV39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS66 INS66 INS65 INS66 INS65 INS65 INS42 INS42 INS42 INS42 INS65 INS65 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS60 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS25 INS25 INS41 INS42 INS43 INS42 INS25 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS21 INS41 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS83 INS39 INS59 INS39 INS59 INS7 INS7 INS42 INS42 INS27 INS8 INS32 INS8 INS9 INS42 INS27 INS8 INS8 INS43 INS59 MOV43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS42 INS34 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS33 INS41 INS32 INS42 INS32 INS60 INS25 INS32 INS34 INS41 INS41 INS42 INS42 INS14 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS27 INS32 INS27 INS36 INS9 INS42 INS42 INS52 INS42 INS43 INS59 INS32 INS8 INS32 INS42 INS32 INS27 INS32 INS43 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS11 INS32 INS42 INS32 INS41 INS52 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS36 INS34 INS32 INS43 INS42 INS52 INS42 INS42 INS42 INS27 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS34 INS27 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS52 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL31