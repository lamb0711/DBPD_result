HDFS-11314. Enforce set of enabled EC policies on the NameNode.

+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import java.util.Arrays;
+import java.util.stream.Collectors;
+
-  private static final byte[] SUITABLE_STORAGE_POLICIES_FOR_EC_STRIPED_MODE = new byte[] {
-      HdfsConstants.HOT_STORAGE_POLICY_ID, HdfsConstants.COLD_STORAGE_POLICY_ID,
-      HdfsConstants.ALLSSD_STORAGE_POLICY_ID };
-
+  private static final byte[] SUITABLE_STORAGE_POLICIES_FOR_EC_STRIPED_MODE =
+      new byte[]{
+          HdfsConstants.HOT_STORAGE_POLICY_ID,
+          HdfsConstants.COLD_STORAGE_POLICY_ID,
+          HdfsConstants.ALLSSD_STORAGE_POLICY_ID};
-   * All active policies maintained in NN memory for fast querying,
+   * All supported policies maintained in NN memory for fast querying,
-  private final Map<String, ErasureCodingPolicy> activePoliciesByName;
+  private static final Map<String, ErasureCodingPolicy> SYSTEM_POLICIES_BY_NAME;
-  ErasureCodingPolicyManager() {
-
-    this.activePoliciesByName = new TreeMap<>();
+  static {
+    // Create a hashmap of all available policies for quick lookup by name
+    SYSTEM_POLICIES_BY_NAME = new TreeMap<>();
-      activePoliciesByName.put(policy.getName(), policy);
+      SYSTEM_POLICIES_BY_NAME.put(policy.getName(), policy);
+    }
+  }
+
+  /**
+   * All enabled policies maintained in NN memory for fast querying,
+   * identified and sorted by its name.
+   */
+  private final Map<String, ErasureCodingPolicy> enabledPoliciesByName;
+
+  ErasureCodingPolicyManager(Configuration conf) {
+    // Populate the list of enabled policies from configuration
+    final String[] policyNames = conf.getTrimmedStrings(
+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,
+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);
+    this.enabledPoliciesByName = new TreeMap<>();
+    for (String policyName : policyNames) {
+      ErasureCodingPolicy ecPolicy = SYSTEM_POLICIES_BY_NAME.get(policyName);
+      if (ecPolicy == null) {
+        String sysPolicies = Arrays.asList(SYS_POLICIES).stream()
+            .map(ErasureCodingPolicy::getName)
+            .collect(Collectors.joining(", "));
+        String msg = String.format("EC policy %s specified at %s is not a " +
+            "valid policy. Please choose from list of available policies: " +
+            "[%s]",
+            policyName,
+            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,
+            sysPolicies);
+        throw new IllegalArgumentException(msg);
+      }
+      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);
-   * Get system-wide policy by policy ID.
-   * @return ecPolicy
+   * Get a policy by policy ID.
+   * @return ecPolicy, or null if not found
-  public static ErasureCodingPolicy getPolicyByPolicyID(byte id) {
+  public static ErasureCodingPolicy getPolicyByID(byte id) {
-   * Get all policies that's available to use.
+   * Get a policy by policy name.
+   * @return ecPolicy, or null if not found
+   */
+  public static ErasureCodingPolicy getPolicyByName(String name) {
+    return SYSTEM_POLICIES_BY_NAME.get(name);
+  }
+
+  /**
+   * Get the set of enabled policies.
-  public ErasureCodingPolicy[] getPolicies() {
+  public ErasureCodingPolicy[] getEnabledPolicies() {
-        new ErasureCodingPolicy[activePoliciesByName.size()];
-    return activePoliciesByName.values().toArray(results);
+        new ErasureCodingPolicy[enabledPoliciesByName.size()];
+    return enabledPoliciesByName.values().toArray(results);
-   * Get the policy specified by the policy name.
+   * Get enabled policy by policy name.
-  public ErasureCodingPolicy getPolicyByName(String name) {
-    return activePoliciesByName.get(name);
+  public ErasureCodingPolicy getEnabledPolicyByName(String name) {
+    return enabledPoliciesByName.get(name);
-   * Get the policy specified by the policy ID.
-   */
-  public ErasureCodingPolicy getPolicyByID(byte id) {
-    for (ErasureCodingPolicy policy : activePoliciesByName.values()) {
-      if (policy.getId() == id) {
-        return policy;
-      }
-    }
-    return null;
-  }
-
-  /**
-   * @return True if given policy is be suitable for striped EC Files.
+   * @return if the specified storage policy ID is suitable for striped EC
+   * files.
-    activePoliciesByName.clear();
+    enabledPoliciesByName.clear();

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS23 INS28 INS29 INS83 INS83 INS83 INS74 INS59 INS83 MOV8 INS44 INS8 UPD42 INS83 INS44 UPD42 UPD42 MOV44 INS65 INS43 INS43 INS43 INS42 UPD42 INS43 INS42 INS60 INS21 INS70 INS65 INS43 INS42 INS41 INS66 INS66 INS42 INS42 INS42 UPD66 INS42 INS83 INS5 INS59 INS7 INS44 INS42 INS8 UPD66 UPD66 UPD66 INS66 INS42 UPD66 MOV5 UPD66 INS32 UPD66 INS66 INS42 INS43 INS85 INS42 INS32 INS22 INS14 INS43 INS42 INS60 INS25 INS21 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS42 INS40 INS40 INS52 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS32 MOV5 UPD42 UPD42 INS43 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS53 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS32 INS42 INS90 INS42 INS42 INS45 INS45 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL42 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL70 DEL33 DEL41