merge from trunk r1617527

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1617532 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.protocolrecords.StartContainerRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.impl.pb.StartContainerRequestPBImpl;
+import org.apache.hadoop.yarn.proto.YarnServiceProtos.StartContainerRequestProto;
+  private static final String CONTAINERS_KEY_PREFIX =
+      "ContainerManager/containers/";
+  private static final String CONTAINER_REQUEST_KEY_SUFFIX = "/request";
+  private static final String CONTAINER_DIAGS_KEY_SUFFIX = "/diagnostics";
+  private static final String CONTAINER_LAUNCHED_KEY_SUFFIX = "/launched";
+  private static final String CONTAINER_KILLED_KEY_SUFFIX = "/killed";
+  private static final String CONTAINER_EXIT_CODE_KEY_SUFFIX = "/exitcode";
+
+  private static final byte[] EMPTY_VALUE = new byte[0];
+
+  public List<RecoveredContainerState> loadContainersState()
+      throws IOException {
+    ArrayList<RecoveredContainerState> containers =
+        new ArrayList<RecoveredContainerState>();
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      iter.seek(bytes(CONTAINERS_KEY_PREFIX));
+
+      while (iter.hasNext()) {
+        Entry<byte[],byte[]> entry = iter.peekNext();
+        String key = asString(entry.getKey());
+        if (!key.startsWith(CONTAINERS_KEY_PREFIX)) {
+          break;
+        }
+
+        int idEndPos = key.indexOf('/', CONTAINERS_KEY_PREFIX.length());
+        if (idEndPos < 0) {
+          throw new IOException("Unable to determine container in key: " + key);
+        }
+        ContainerId containerId = ConverterUtils.toContainerId(
+            key.substring(CONTAINERS_KEY_PREFIX.length(), idEndPos));
+        String keyPrefix = key.substring(0, idEndPos+1);
+        containers.add(loadContainerState(containerId, iter, keyPrefix));
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+
+    return containers;
+  }
+
+  private RecoveredContainerState loadContainerState(ContainerId containerId,
+      LeveldbIterator iter, String keyPrefix) throws IOException {
+    RecoveredContainerState rcs = new RecoveredContainerState();
+    rcs.status = RecoveredContainerStatus.REQUESTED;
+    while (iter.hasNext()) {
+      Entry<byte[],byte[]> entry = iter.peekNext();
+      String key = asString(entry.getKey());
+      if (!key.startsWith(keyPrefix)) {
+        break;
+      }
+      iter.next();
+
+      String suffix = key.substring(keyPrefix.length()-1);  // start with '/'
+      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {
+        rcs.startRequest = new StartContainerRequestPBImpl(
+            StartContainerRequestProto.parseFrom(entry.getValue()));
+      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {
+        rcs.diagnostics = asString(entry.getValue());
+      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {
+        if (rcs.status == RecoveredContainerStatus.REQUESTED) {
+          rcs.status = RecoveredContainerStatus.LAUNCHED;
+        }
+      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {
+        rcs.killed = true;
+      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {
+        rcs.status = RecoveredContainerStatus.COMPLETED;
+        rcs.exitCode = Integer.parseInt(asString(entry.getValue()));
+      } else {
+        throw new IOException("Unexpected container state key: " + key);
+      }
+    }
+    return rcs;
+  }
+
+  @Override
+  public void storeContainer(ContainerId containerId,
+      StartContainerRequest startRequest) throws IOException {
+    String key = CONTAINERS_KEY_PREFIX + containerId.toString()
+        + CONTAINER_REQUEST_KEY_SUFFIX;
+    try {
+      db.put(bytes(key),
+        ((StartContainerRequestPBImpl) startRequest).getProto().toByteArray());
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void storeContainerDiagnostics(ContainerId containerId,
+      StringBuilder diagnostics) throws IOException {
+    String key = CONTAINERS_KEY_PREFIX + containerId.toString()
+        + CONTAINER_DIAGS_KEY_SUFFIX;
+    try {
+      db.put(bytes(key), bytes(diagnostics.toString()));
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void storeContainerLaunched(ContainerId containerId)
+      throws IOException {
+    String key = CONTAINERS_KEY_PREFIX + containerId.toString()
+        + CONTAINER_LAUNCHED_KEY_SUFFIX;
+    try {
+      db.put(bytes(key), EMPTY_VALUE);
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void storeContainerKilled(ContainerId containerId)
+      throws IOException {
+    String key = CONTAINERS_KEY_PREFIX + containerId.toString()
+        + CONTAINER_KILLED_KEY_SUFFIX;
+    try {
+      db.put(bytes(key), EMPTY_VALUE);
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void storeContainerCompleted(ContainerId containerId,
+      int exitCode) throws IOException {
+    String key = CONTAINERS_KEY_PREFIX + containerId.toString()
+        + CONTAINER_EXIT_CODE_KEY_SUFFIX;
+    try {
+      db.put(bytes(key), bytes(Integer.toString(exitCode)));
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void removeContainer(ContainerId containerId)
+      throws IOException {
+    String keyPrefix = CONTAINERS_KEY_PREFIX + containerId.toString();
+    try {
+      WriteBatch batch = db.createWriteBatch();
+      try {
+        batch.delete(bytes(keyPrefix + CONTAINER_REQUEST_KEY_SUFFIX));
+        batch.delete(bytes(keyPrefix + CONTAINER_DIAGS_KEY_SUFFIX));
+        batch.delete(bytes(keyPrefix + CONTAINER_LAUNCHED_KEY_SUFFIX));
+        batch.delete(bytes(keyPrefix + CONTAINER_KILLED_KEY_SUFFIX));
+        batch.delete(bytes(keyPrefix + CONTAINER_EXIT_CODE_KEY_SUFFIX));
+        db.write(batch);
+      } finally {
+        batch.close();
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+
+  @Override

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS5 INS59 INS78 INS83 INS74 INS42 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS39 INS85 INS42 INS3 INS42 INS43 INS43 INS42 INS60 INS60 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS61 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS5 INS34 INS42 INS42 INS74 INS59 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS32 INS8 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS39 INS85 INS43 INS43 INS42 INS14 INS42 INS42 INS33 INS21 INS21 INS61 INS44 INS8 INS25 INS42 INS42 INS14 INS40 INS40 INS42 INS42 INS60 INS60 INS25 INS21 INS60 INS25 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS60 INS54 INS44 INS8 INS42 INS42 INS74 INS7 INS32 INS32 INS8 INS43 INS42 INS53 INS27 INS8 INS43 INS74 INS59 INS43 INS59 INS38 INS8 INS32 INS43 INS59 INS32 INS8 INS25 INS42 INS32 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS43 INS59 INS8 INS8 INS43 INS42 INS53 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS60 INS60 INS21 INS42 INS14 INS42 INS33 INS21 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS38 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS32 INS43 INS42 INS32 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS42 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS42 INS32 INS42 INS34 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS40 INS14 INS7 INS42 INS42 INS42 INS25 INS32 INS8 INS25 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS13 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS40 INS32 INS27 INS8 INS42 INS42 INS42 INS21 INS32 INS8 INS8 INS11 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS40 INS21 INS7 INS42 INS42 INS42 INS21 INS21 INS53 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS40 INS9 INS7 INS7 INS14 INS42 INS40 INS40 INS40 INS40 INS40 INS32 INS43 INS27 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42