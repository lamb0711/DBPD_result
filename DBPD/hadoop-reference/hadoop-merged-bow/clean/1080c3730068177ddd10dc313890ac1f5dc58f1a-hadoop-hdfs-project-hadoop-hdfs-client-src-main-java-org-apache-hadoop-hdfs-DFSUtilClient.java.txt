Merge remote-tracking branch 'apache/trunk' into HDFS-7285

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Namesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/DFSTestUtil.java

Change-Id: I8511c4d64b0959e79129febc179845a3892fedcc

+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.hdfs.net.BasicInetPeer;
+import org.apache.hadoop.hdfs.net.NioInetPeer;
+import org.apache.hadoop.hdfs.net.Peer;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.protocol.datatransfer.sasl.DataEncryptionKeyFactory;
+import org.apache.hadoop.hdfs.protocol.datatransfer.sasl.SaslDataTransferClient;
+import org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier;
+import org.apache.hadoop.hdfs.util.IOUtilsClient;
+import org.apache.hadoop.security.token.Token;
+import java.net.Socket;
+import java.nio.channels.SocketChannel;
+
+  public static Peer peerFromSocket(Socket socket)
+      throws IOException {
+    Peer peer = null;
+    boolean success = false;
+    try {
+      // TCP_NODELAY is crucial here because of bad interactions between
+      // Nagle's Algorithm and Delayed ACKs. With connection keepalive
+      // between the client and DN, the conversation looks like:
+      //   1. Client -> DN: Read block X
+      //   2. DN -> Client: data for block X
+      //   3. Client -> DN: Status OK (successful read)
+      //   4. Client -> DN: Read block Y
+      // The fact that step #3 and #4 are both in the client->DN direction
+      // triggers Nagling. If the DN is using delayed ACKs, this results
+      // in a delay of 40ms or more.
+      //
+      // TCP_NODELAY disables nagling and thus avoids this performance
+      // disaster.
+      socket.setTcpNoDelay(true);
+      SocketChannel channel = socket.getChannel();
+      if (channel == null) {
+        peer = new BasicInetPeer(socket);
+      } else {
+        peer = new NioInetPeer(socket);
+      }
+      success = true;
+      return peer;
+    } finally {
+      if (!success) {
+        if (peer != null) peer.close();
+        socket.close();
+      }
+    }
+  }
+
+  public static Peer peerFromSocketAndKey(
+        SaslDataTransferClient saslClient, Socket s,
+        DataEncryptionKeyFactory keyFactory,
+        Token<BlockTokenIdentifier> blockToken, DatanodeID datanodeId)
+        throws IOException {
+    Peer peer = null;
+    boolean success = false;
+    try {
+      peer = peerFromSocket(s);
+      peer = saslClient.peerSend(peer, keyFactory, blockToken, datanodeId);
+      success = true;
+      return peer;
+    } finally {
+      if (!success) {
+        IOUtilsClient.cleanup(null, peer);
+      }
+    }
+  }
+
+  public static InetSocketAddress getNNAddress(String address) {
+    return NetUtils.createSocketAddr(address,
+        HdfsClientConfigKeys.DFS_NAMENODE_RPC_PORT_DEFAULT);
+  }
+
+  public static InetSocketAddress getNNAddress(Configuration conf) {
+    URI filesystemURI = FileSystem.getDefaultUri(conf);
+    return getNNAddress(filesystemURI);
+  }
+
+  /**
+   * @return address of file system
+   */
+  public static InetSocketAddress getNNAddress(URI filesystemURI) {
+    String authority = filesystemURI.getAuthority();
+    if (authority == null) {
+      throw new IllegalArgumentException(String.format(
+          "Invalid URI for NameNode address (check %s): %s has no authority.",
+          FileSystem.FS_DEFAULT_NAME_KEY, filesystemURI.toString()));
+    }
+    if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(
+        filesystemURI.getScheme())) {
+      throw new IllegalArgumentException(String.format(
+          "Invalid URI for NameNode address (check %s): " +
+          "%s is not of scheme '%s'.", FileSystem.FS_DEFAULT_NAME_KEY,
+          filesystemURI.toString(), HdfsConstants.HDFS_URI_SCHEME));
+    }
+    return getNNAddress(authority);
+  }
+
+  public static URI getNNUri(InetSocketAddress namenode) {
+    int port = namenode.getPort();
+    String portString =
+        (port == HdfsClientConfigKeys.DFS_NAMENODE_RPC_PORT_DEFAULT) ?
+        "" : (":" + port);
+    return URI.create(HdfsConstants.HDFS_URI_SCHEME + "://"
+        + namenode.getHostName() + portString);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS42 INS60 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS54 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS60 INS41 INS65 INS42 INS43 INS42 INS60 INS25 INS25 INS41 INS42 INS43 INS42 INS60 INS60 INS41 INS42 INS43 INS59 INS39 INS59 INS8 INS8 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS59 INS39 INS59 INS8 INS8 INS42 INS32 INS42 INS43 INS59 INS32 INS66 INS42 INS43 INS59 INS27 INS8 INS38 INS8 INS32 INS42 INS39 INS59 INS43 INS59 INS32 INS42 INS42 INS33 INS42 INS9 INS21 INS60 INS25 INS21 INS41 INS25 INS42 INS42 INS42 INS42 INS33 INS42 INS9 INS21 INS21 INS21 INS41 INS25 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS27 INS32 INS43 INS59 INS27 INS8 INS8 INS7 INS42 INS38 INS8 INS7 INS7 INS7 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS32 INS14 INS42 INS42 INS36 INS45 INS36 INS40 INS45 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS9 INS42 INS25 INS21 INS42 INS32 INS42 INS32 INS42 INS9 INS42 INS21 INS43 INS32 INS42 INS42 INS43 INS32 INS27 INS27 INS42 INS42 INS42 INS42 INS7 INS7 INS27 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS40 INS32 INS42 INS42 INS42 INS27 INS40 INS32 INS40 INS42 INS40 INS45 INS42 INS42 INS14 INS42 INS14 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42