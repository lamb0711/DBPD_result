HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.

+import org.apache.hadoop.ipc.RetryCache;
+import org.apache.hadoop.ipc.RetryCache.CacheEntry;
+import org.apache.hadoop.ipc.RetryCache.CacheEntryWithPayload;
-import org.apache.hadoop.tracing.TraceAdminPB;
-  
+
+  private final RetryCache retryCache;
+
+    this.retryCache = namesystem.getRetryCache();
-    return namesystem.startCheckpoint(registration, nn.setRegistration());
+
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache,
+      null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (NamenodeCommand) cacheEntry.getPayload();
+    }
+    NamenodeCommand ret = null;
+    try {
+      ret = namesystem.startCheckpoint(registration, nn.setRegistration());
+    } finally {
+      RetryCache.setState(cacheEntry, ret != null, ret);
+    }
+    return ret;
-    namesystem.endCheckpoint(registration, sig);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.endCheckpoint(registration, sig);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-                         +src+" for "+clientName+" at "+clientMachine);
+          +src+" for "+clientName+" at "+clientMachine);
-    HdfsFileStatus fileStatus = namesystem.startFile(src, new PermissionStatus(
-        getRemoteUser().getShortUserName(), null, masked),
-        clientName, clientMachine, flag.get(), createParent, replication,
-        blockSize, supportedVersions);
+
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache, null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (HdfsFileStatus) cacheEntry.getPayload();
+    }
+
+    HdfsFileStatus status = null;
+    try {
+      PermissionStatus perm = new PermissionStatus(getRemoteUser()
+          .getShortUserName(), null, masked);
+      status = namesystem.startFile(src, perm, clientName, clientMachine,
+          flag.get(), createParent, replication, blockSize, supportedVersions,
+          cacheEntry != null);
+    } finally {
+      RetryCache.setState(cacheEntry, status != null, status);
+    }
+
-    return fileStatus;
+    return status;
-    LocatedBlock info = namesystem.appendFile(src, clientName, clientMachine);
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache, null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (LocatedBlock) cacheEntry.getPayload();
+    }
+
+    LocatedBlock info = null;
+    boolean success = false;
+    try {
+      info = namesystem.appendFile(src, clientName, clientMachine,
+          cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success, info);
+    }
-    namesystem.updatePipeline(clientName, oldBlock, newBlock, newNodes, newStorageIDs);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+
+    boolean success = false;
+    try {
+      namesystem.updatePipeline(clientName, oldBlock, newBlock, newNodes,
+          newStorageIDs, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    boolean ret = namesystem.renameTo(src, dst);
+
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return true; // Return previous response
+    }
+
+    boolean ret = false;
+    try {
+      ret = namesystem.renameTo(src, dst, cacheEntry != null);
+    } finally {
+      RetryCache.setState(cacheEntry, ret);
+    }
-    namesystem.concat(trg, src);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+
+    try {
+      namesystem.concat(trg, src, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.renameTo(src, dst, options);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.renameTo(src, dst, cacheEntry != null, options);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    boolean ret = namesystem.delete(src, recursive);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return true; // Return previous response
+    }
+
+    boolean ret = false;
+    try {
+      ret = namesystem.delete(src, recursive, cacheEntry != null);
+    } finally {
+      RetryCache.setState(cacheEntry, ret);
+    }
-    namesystem.saveNamespace();
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.saveNamespace();
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+
-    namesystem.createSymlink(target, link,
-      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);
+
+    boolean success = false;
+    try {
+      PermissionStatus perm = new PermissionStatus(ugi.getShortUserName(),
+          null, dirPerms);
+      namesystem.createSymlink(target, link, perm, createParent,
+          cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion(retryCache,
+      null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (String) cacheEntry.getPayload();
+    }
+
-    return namesystem.createSnapshot(snapshotRoot, snapshotName);
+    String ret = null;
+    try {
+      ret = namesystem.createSnapshot(snapshotRoot, snapshotName,
+          cacheEntry != null);
+    } finally {
+      RetryCache.setState(cacheEntry, ret != null, ret);
+    }
+    return ret;
-    namesystem.deleteSnapshot(snapshotRoot, snapshotName);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.deleteSnapshot(snapshotRoot, snapshotName, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.renameSnapshot(snapshotRoot, snapshotOldName, snapshotNewName);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.renameSnapshot(snapshotRoot, snapshotOldName,
+          snapshotNewName, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    return namesystem.addCacheDirective(path, flags);
+    CacheEntryWithPayload cacheEntry = RetryCache.waitForCompletion
+      (retryCache, null);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return (Long) cacheEntry.getPayload();
+    }
+
+    boolean success = false;
+    long ret = 0;
+    try {
+      ret = namesystem.addCacheDirective(path, flags, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success, ret);
+    }
+    return ret;
-    namesystem.modifyCacheDirective(directive, flags);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return;
+    }
+
+    boolean success = false;
+    try {
+      namesystem.modifyCacheDirective(directive, flags, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.removeCacheDirective(id);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return;
+    }
+    boolean success = false;
+    try {
+      namesystem.removeCacheDirective(id, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.addCachePool(info);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.addCachePool(info, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.modifyCachePool(info);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.modifyCachePool(info, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.removeCachePool(cachePoolName);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return;
+    }
+    boolean success = false;
+    try {
+      namesystem.removeCachePool(cachePoolName, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.createEncryptionZone(src, keyName);
+    final CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return;
+    }
+    boolean success = false;
+    try {
+      namesystem.createEncryptionZone(src, keyName, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.setXAttr(src, xAttr, flag);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.setXAttr(src, xAttr, flag, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
-    namesystem.removeXAttr(src, xAttr);
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      namesystem.removeXAttr(src, xAttr, cacheEntry != null);
+      success = true;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }

MOV26 INS26 INS26 UPD40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 INS8 MOV78 MOV44 MOV43 INS8 MOV44 MOV43 INS8 INS8 INS8 INS8 MOV78 INS8 INS42 INS42 INS21 INS60 INS25 INS60 INS54 INS41 MOV21 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 MOV25 INS60 INS25 MOV21 INS60 INS54 INS41 MOV21 INS60 INS25 INS60 INS54 MOV25 MOV21 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS60 INS54 INS41 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS60 INS25 INS60 INS54 INS7 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS8 INS42 INS43 INS59 INS27 INS8 INS39 INS59 MOV8 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS8 UPD42 INS43 INS59 INS27 INS8 INS43 INS59 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 MOV39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 MOV39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 MOV8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS8 INS8 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS8 INS8 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS83 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS22 INS32 INS42 INS42 INS32 INS27 INS32 MOV41 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS33 MOV60 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS33 INS42 INS9 INS21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 MOV42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 MOV42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS60 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS42 INS34 INS21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 MOV21 INS21 INS21 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS43 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS9 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS9 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS43 INS59 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS11 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS7 INS32 INS43 INS32 INS42 MOV32 INS42 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 MOV14 INS42 INS32 INS42 INS42 INS42 INS27 INS42 MOV43 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS27 INS42 INS33 INS42 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 INS27 INS42 INS33 MOV42 MOV42 MOV42 MOV42 INS27 INS42 INS33 INS42 INS33 MOV42 MOV42 MOV42 MOV42 INS27 INS42 INS33 INS42 INS42 INS42 MOV42 MOV42 MOV42 MOV42 INS27 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS42 INS42 MOV42 MOV42 MOV42 MOV42 INS27 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL32 DEL59 DEL60 DEL8 DEL32 DEL59 DEL60 DEL32 DEL41 DEL8 DEL8 DEL8 DEL32 DEL41 DEL8 DEL8 DEL8 DEL8 DEL8 DEL8 DEL8 DEL8 DEL8