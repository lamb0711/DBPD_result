HDFS-10420. Fix Ozone unit tests to use MiniOzoneCluster. Contributed by Arpit Agarwal.

+import java.util.concurrent.TimeoutException;
+import com.google.common.base.Optional;
+import com.google.common.base.Supplier;
+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.test.GenericTestUtils;
-import org.apache.hadoop.util.Time;
+    private Optional<String> ozoneHandlerType = Optional.absent();
+    public Builder setHandlerType(String handler) {
+      ozoneHandlerType = Optional.of(handler);
+      return this;
+    }
+
+      if (!ozoneHandlerType.isPresent()) {
+        throw new IllegalArgumentException(
+            "The Ozone handler type must be specified.");
+      }
+
+      conf.setBoolean(OzoneConfigKeys.OZONE_ENABLED, true);
+      conf.setBoolean(OzoneConfigKeys.OZONE_TRACE_ENABLED_KEY, true);
+      conf.set(OzoneConfigKeys.OZONE_HANDLER_TYPE_KEY, ozoneHandlerType.get());
-      return new MiniOzoneCluster(this, scm);
+      MiniOzoneCluster cluster = new MiniOzoneCluster(this, scm);
+      try {
+        cluster.waitOzoneReady();
+      } catch(Exception e) {
+        // A workaround to propagate MiniOzoneCluster failures without
+        // changing the method signature (which would require cascading
+        // changes to hundreds of unrelated HDFS tests).
+        throw new IOException("Failed to start MiniOzoneCluster", e);
+      }
+      return cluster;
-  public void waitOzoneReady() {
-    long begin = Time.monotonicNow();
-    while (scm.getDatanodeReport(DatanodeReportType.LIVE).length <
-        numDataNodes) {
-      if (Time.monotonicNow() - begin > 20000) {
-        throw new IllegalStateException(
-            "Timed out waiting for Ozone cluster to become ready.");
+  public void waitOzoneReady() throws TimeoutException, InterruptedException {
+    GenericTestUtils.waitFor(new Supplier<Boolean>() {
+      @Override
+      public Boolean get() {
+        final DatanodeInfo[] reports =
+            scm.getDatanodeReport(DatanodeReportType.LIVE);
+        if (reports.length >= numDataNodes) {
+          return true;
+        }
+        LOG.info("Waiting for cluster to be ready. Got {} of {} DN reports.",
+            reports.length, numDataNodes);
+        return false;
-      LOG.info("Waiting for Ozone cluster to become ready");
-      try {
-        Thread.sleep(100);
-      } catch (InterruptedException e) {
-        Thread.currentThread().interrupt();
-        throw new IllegalStateException(
-            "Interrupted while waiting for Ozone cluster to become ready.");
-      }
-    }
+    }, 100, 45000);

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS23 INS31 INS43 MOV43 INS83 INS74 INS59 INS83 INS43 INS42 INS44 INS8 INS42 INS21 INS43 INS43 INS42 INS32 INS42 INS43 INS42 INS21 INS41 INS25 INS21 INS21 INS21 INS60 INS54 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS52 INS38 INS8 INS32 INS32 INS32 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS14 MOV34 INS34 INS42 INS32 INS32 INS53 INS42 INS42 INS40 INS9 INS42 INS42 INS40 INS9 INS42 INS42 INS40 INS32 INS42 INS42 MOV14 INS21 INS44 INS8 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS43 INS31 INS43 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS42 INS43 INS45 INS42 INS42 INS42 INS60 MOV25 MOV21 INS41 INS42 INS83 INS5 INS59 UPD27 INS9 INS43 INS85 INS42 MOV32 INS40 INS42 INS41 UPD45 INS40 INS42 INS42 INS9 DEL42 DEL42 DEL32 DEL42 DEL27 DEL34 DEL42 DEL43 DEL45 DEL14 DEL53 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL22 DEL42 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL61