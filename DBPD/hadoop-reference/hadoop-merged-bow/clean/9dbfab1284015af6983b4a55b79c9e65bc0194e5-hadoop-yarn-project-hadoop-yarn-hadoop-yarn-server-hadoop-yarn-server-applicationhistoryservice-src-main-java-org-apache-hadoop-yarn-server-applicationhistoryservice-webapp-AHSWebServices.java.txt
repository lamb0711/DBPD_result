YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.yarn.server.webapp.YarnWebServiceParams;
+import org.apache.hadoop.yarn.webapp.util.YarnWebServiceUtils;
+import org.codehaus.jettison.json.JSONException;
+import org.codehaus.jettison.json.JSONObject;
+import com.sun.jersey.api.client.ClientHandlerException;
+import com.sun.jersey.api.client.UniformInterfaceException;
+  private static final Log LOG = LogFactory.getLog(AHSWebServices.class);
+   * @param nmId
+   *    The Node Manager NodeId
-      @PathParam("containerid") String containerIdStr) {
+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,
+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {
-      ContainerInfo containerInfo;
-      try {
-        containerInfo = super.getContainer(
-            req, res, appId.toString(),
-            containerId.getApplicationAttemptId().toString(),
-            containerId.toString());
-      } catch (Exception ex) {
-        // return log meta for the aggregated logs if exists.
-        // It will also return empty log meta for the local logs.
-        return getContainerLogMeta(appId, appOwner, null,
-            containerIdStr, true);
+      String nodeHttpAddress = null;
+      if (nmId != null && !nmId.isEmpty()) {
+        try {
+          nodeHttpAddress = getNMWebAddressFromRM(conf, nmId);
+        } catch (Exception ex) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug(ex.getMessage());
+          }
+        }
-      String nodeHttpAddress = containerInfo.getNodeHttpAddress();
+      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+        ContainerInfo containerInfo;
+        try {
+          containerInfo = super.getContainer(
+              req, res, appId.toString(),
+              containerId.getApplicationAttemptId().toString(),
+              containerId.toString());
+        } catch (Exception ex) {
+          // return log meta for the aggregated logs if exists.
+          // It will also return empty log meta for the local logs.
+          return getContainerLogMeta(appId, appOwner, null,
+              containerIdStr, true);
+        }
+        nodeHttpAddress = containerInfo.getNodeHttpAddress();
+        // make sure nodeHttpAddress is not null and not empty. Otherwise,
+        // we would only get log meta for aggregated logs instead of
+        // re-directing the request
+        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+          // return log meta for the aggregated logs if exists.
+          // It will also return empty log meta for the local logs.
+          return getContainerLogMeta(appId, appOwner, null,
+              containerIdStr, true);
+        }
+      }
-      String resURI = JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);
+      String resURI = JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),
+          NM_DOWNLOAD_URI_STR, uri);
+   * @param nmId
+   *    The Node Manager NodeId
-      @PathParam("containerid") String containerIdStr,
-      @PathParam("filename") String filename,
-      @QueryParam("format") String format,
-      @QueryParam("size") String size) {
-    return getLogs(req, res, containerIdStr, filename, format, size);
+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,
+      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,
+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {
+    return getLogs(req, res, containerIdStr, filename, format,
+        size, nmId);
-      @PathParam("containerid") String containerIdStr,
-      @PathParam("filename") String filename,
-      @QueryParam("format") String format,
-      @QueryParam("size") String size) {
+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,
+      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,
+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,
+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {
-      ContainerInfo containerInfo;
-      try {
-        containerInfo = super.getContainer(
-            req, res, appId.toString(),
-            containerId.getApplicationAttemptId().toString(),
-            containerId.toString());
-      } catch (Exception ex) {
-        // output the aggregated logs
-        return sendStreamOutputResponse(appId, appOwner, null, containerIdStr,
-            filename, format, length, true);
+      String nodeHttpAddress = null;
+      if (nmId != null && !nmId.isEmpty()) {
+        try {
+          nodeHttpAddress = getNMWebAddressFromRM(conf, nmId);
+        } catch (Exception ex) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug(ex.getMessage());
+          }
+        }
-      String nodeHttpAddress = containerInfo.getNodeHttpAddress();
+      if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+        ContainerInfo containerInfo;
+        try {
+          containerInfo = super.getContainer(
+              req, res, appId.toString(),
+              containerId.getApplicationAttemptId().toString(),
+              containerId.toString());
+        } catch (Exception ex) {
+          // output the aggregated logs
+          return sendStreamOutputResponse(appId, appOwner, null,
+              containerIdStr, filename, format, length, true);
+        }
+        nodeHttpAddress = containerInfo.getNodeHttpAddress();
+        // make sure nodeHttpAddress is not null and not empty. Otherwise,
+        // we would only get aggregated logs instead of re-directing the
+        // request
+        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+          // output the aggregated logs
+          return sendStreamOutputResponse(appId, appOwner, null,
+              containerIdStr, filename, format, length, true);
+        }
+      }
-      String resURI = JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);
+      String resURI = JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),
+          NM_DOWNLOAD_URI_STR, uri);
-        return createBadResponse(Status.INTERNAL_SERVER_ERROR,
+        throw new NotFoundException(
+
+  private String getAbsoluteNMWebAddress(String nmWebAddress) {
+    if (nmWebAddress.contains(WebAppUtils.HTTP_PREFIX) ||
+        nmWebAddress.contains(WebAppUtils.HTTPS_PREFIX)) {
+      return nmWebAddress;
+    }
+    return WebAppUtils.getHttpSchemePrefix(conf) + nmWebAddress;
+  }
+
+  @VisibleForTesting
+  @Private
+  public String getNMWebAddressFromRM(Configuration configuration,
+      String nodeId) throws ClientHandlerException,
+      UniformInterfaceException, JSONException {
+    JSONObject nodeInfo = YarnWebServiceUtils.getNodeInfoFromRMWebService(
+        configuration, nodeId).getJSONObject("node");
+    return nodeInfo.has("nodeHTTPAddress") ?
+        nodeInfo.getString("nodeHTTPAddress") : null;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS44 INS44 INS44 INS83 INS43 INS42 INS44 INS8 INS78 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS42 INS42 INS32 INS65 INS79 INS43 INS42 INS65 INS43 INS43 MOV43 MOV43 INS79 MOV43 INS42 MOV43 MOV43 INS79 MOV43 INS42 UPD42 UPD42 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS41 INS42 INS42 INS57 INS42 INS66 INS40 INS42 INS40 INS42 INS42 INS66 INS40 INS42 INS40 INS42 INS40 INS40 INS42 INS40 INS40 INS40 INS42 INS40 INS40 INS40 INS42 INS27 INS8 INS27 INS42 INS42 INS43 INS59 INS16 INS43 INS25 INS25 INS42 INS25 INS25 INS32 INS32 INS41 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS33 INS42 INS27 INS8 INS27 INS8 MOV43 INS27 INS8 INS27 INS8 MOV43 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS33 INS27 INS38 INS54 INS27 INS32 MOV60 MOV54 INS21 INS25 INS33 INS27 INS38 INS54 INS27 INS32 MOV60 MOV54 INS21 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS8 INS12 INS42 INS33 INS42 INS42 INS7 INS27 INS8 INS32 INS42 INS33 INS32 INS8 INS12 INS42 INS33 INS42 INS42 INS7 INS27 INS8 INS32 INS14 INS42 INS42 INS21 INS44 INS8 INS42 MOV32 INS27 INS32 INS41 INS42 MOV42 INS42 INS42 INS21 INS44 INS8 INS42 MOV32 INS27 INS32 INS41 INS42 MOV42 INS43 MOV27 INS7 INS43 INS42 INS25 INS42 INS33 INS42 INS42 INS32 INS7 INS43 INS42 INS25 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS33 INS42 INS9 INS42 INS32 INS42 INS32 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL42 DEL40 DEL32 DEL41