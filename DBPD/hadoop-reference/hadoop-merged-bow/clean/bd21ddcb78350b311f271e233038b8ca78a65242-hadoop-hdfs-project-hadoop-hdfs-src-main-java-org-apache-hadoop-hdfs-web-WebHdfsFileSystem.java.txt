HDFS-2416. distcp with a webhdfs uri on a secure cluster fails.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196434 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.web.resources.TokenArgumentParam;
-    final URL url = getNamenodeURL(path, addDt2Query(query));
+    final URL url;
+    if (op.equals(PutOpParam.Op.RENEWDELEGATIONTOKEN)
+        || op.equals(GetOpParam.Op.GETDELEGATIONTOKEN)) {
+      // Skip adding delegation token for getting or renewing delegation token,
+      // because these operations require kerberos authentication.
+      url = getNamenodeURL(path, query);
+    } else {
+      url = getNamenodeURL(path, addDt2Query(query));
+    }
+  private HttpURLConnection getHttpUrlConnection(URL url)
+      throws IOException {
+    final HttpURLConnection conn;
+    try {
+      if (ugi.hasKerberosCredentials()) { 
+        conn = new AuthenticatedURL(AUTH).openConnection(url, authToken);
+      } else {
+        conn = (HttpURLConnection)url.openConnection();
+      }
+    } catch (AuthenticationException e) {
+      throw new IOException("Authentication failed, url=" + url, e);
+    }
+    return conn;
+  }
+  
-    final HttpURLConnection conn;
-    try {
-      conn = new AuthenticatedURL(AUTH).openConnection(url, authToken);
-    } catch(AuthenticationException e) {
-      throw new IOException("Authentication failed, url=" + url, e);
-    }
+    final HttpURLConnection conn = getHttpUrlConnection(url);
-    } catch(IOException e) {
+    } catch (IOException e) {
-    return new FSDataInputStream(new ByteRangeInputStream(url));
+    ByteRangeInputStream str = getByteRangeInputStream(url);
+    return new FSDataInputStream(str);
+  }
+
+  private class URLOpener extends ByteRangeInputStream.URLOpener {
+
+    public URLOpener(URL u) {
+      super(u);
+    }
+
+    @Override
+    public HttpURLConnection openConnection() throws IOException {
+      return getHttpUrlConnection(offsetUrl);
+    }
+  }
+  
+  private ByteRangeInputStream getByteRangeInputStream(URL url) {
+    return new ByteRangeInputStream(new URLOpener(url), new URLOpener(null));
-    delegationToken = token;
-    final Map<?, ?> m = run(op, null);
+    TokenArgumentParam dtargParam = new TokenArgumentParam(
+        token.encodeToUrlString());
+    final Map<?, ?> m = run(op, null, dtargParam);
-    delegationToken = token;
-    run(op, null);
+    TokenArgumentParam dtargParam = new TokenArgumentParam(
+        token.encodeToUrlString());
+    run(op, null, dtargParam);

INS26 INS40 INS31 INS55 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS42 INS43 INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS25 INS42 INS43 INS42 INS42 MOV60 MOV54 INS41 INS60 INS60 INS40 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS43 INS42 INS41 INS60 INS60 INS27 INS8 INS8 INS42 INS8 INS42 INS83 INS43 INS59 MOV43 INS59 INS14 INS43 INS42 INS46 INS42 INS42 INS42 INS41 INS42 INS14 INS43 INS59 INS43 INS59 INS32 INS32 INS21 INS21 INS25 INS42 INS42 INS32 INS42 INS32 MOV43 UPD42 MOV42 INS42 INS42 INS32 INS43 INS14 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS7 INS7 INS32 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS33 INS43 INS32 INS42 INS43 INS32 INS42 INS32 INS42 MOV32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS11 INS43 INS32 INS42 INS42 INS42 DEL14 DEL14 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21