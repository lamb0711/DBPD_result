YARN-3334. NM uses timeline client to publish container metrics to new timeline service. Contributed by Junping Du.

+import org.apache.hadoop.yarn.client.api.TimelineClient;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.ContainerManagerImpl;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.application.Application;
-
-            Map<ApplicationId, String> knownCollectors =
-                response.getAppCollectorsMap();
-            ((NodeManager.NMContext)context).addKnownCollectors(knownCollectors);
+            if (YarnConfiguration.systemMetricsPublisherEnabled(context.getConf())) {
+              updateTimelineClientsAddress(response);
+            }
+      /**
+       * Caller should take care of sending non null nodelabels for both
+       * arguments
+       * 
+       * @param nodeLabelsNew
+       * @param nodeLabelsOld
+       * @return if the New node labels are diff from the older one.
+       */
+      private boolean areNodeLabelsUpdated(Set<NodeLabel> nodeLabelsNew,
+          Set<NodeLabel> nodeLabelsOld) {
+        if (nodeLabelsNew.size() != nodeLabelsOld.size()
+            || !nodeLabelsOld.containsAll(nodeLabelsNew)) {
+          return true;
+        }
+        return false;
+      }
+
+      private void updateTimelineClientsAddress(
+          NodeHeartbeatResponse response) {
+        Set<Map.Entry<ApplicationId, String>> rmKnownCollectors = 
+            response.getAppCollectorsMap().entrySet();
+        for (Map.Entry<ApplicationId, String> entry : rmKnownCollectors) {
+          ApplicationId appId = entry.getKey();
+          String collectorAddr = entry.getValue();
+
+          // Only handle applications running on local node.
+          // Not include apps with timeline collectors running in local
+          Application application = context.getApplications().get(appId);
+          if (application != null &&
+              !context.getRegisteredCollectors().containsKey(appId)) {
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("Sync a new collector address: " + collectorAddr + 
+                  " for application: " + appId + " from RM.");
+            }
+            TimelineClient client = application.getTimelineClient();
+            client.setTimelineServiceAddress(collectorAddr);
+          }
+        }
+      }
+      

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS74 INS42 INS74 INS42 INS25 INS41 INS43 INS42 MOV60 INS70 INS66 INS66 INS42 INS42 INS66 INS43 INS43 INS43 INS43 INS27 INS8 INS9 INS42 INS74 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS27 INS38 INS41 INS43 UPD74 MOV74 UPD42 INS32 INS74 INS42 INS60 INS60 INS60 INS25 INS32 INS32 INS32 INS9 INS42 UPD43 MOV32 INS42 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS25 INS60 INS21 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS32 INS32 INS8 INS43 INS59 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS27 INS45 INS42 INS45 INS42 INS45 DEL40 DEL43 DEL42 DEL11 DEL36 DEL32 DEL21 DEL42