YARN-8761. Service AM support for decommissioning component instances.
           Contributed by Billie Rinaldi

+import org.apache.hadoop.yarn.proto.ClientAMProtocol.DecommissionCompInstancesRequestProto;
+  public int actionDecommissionInstances(String appName,
+      List<String> componentInstances) throws IOException, YarnException {
+    checkAppExistOnHdfs(appName);
+    Service persistedService = ServiceApiUtil.loadService(fs, appName);
+    if (StringUtils.isEmpty(persistedService.getId())) {
+      throw new YarnException(
+          persistedService.getName() + " appId is null, may be not submitted " +
+              "to YARN yet");
+    }
+    cachedAppInfo.put(persistedService.getName(), new AppInfo(
+        ApplicationId.fromString(persistedService.getId()), persistedService
+        .getKerberosPrincipal().getPrincipalName()));
+
+    for (String instance : componentInstances) {
+      String componentName = ServiceApiUtil.parseComponentName(
+          ServiceApiUtil.parseAndValidateComponentInstanceName(instance,
+              appName, getConfig()));
+      Component component = persistedService.getComponent(componentName);
+      if (component == null) {
+        throw new IllegalArgumentException(instance + " does not exist !");
+      }
+      if (!component.getDecommissionedInstances().contains(instance)) {
+        component.addDecommissionedInstance(instance);
+        component.setNumberOfContainers(Math.max(0, component
+            .getNumberOfContainers() - 1));
+      }
+    }
+    ServiceApiUtil.writeAppDefinition(fs, persistedService);
+
+    ApplicationReport appReport =
+        yarnClient.getApplicationReport(ApplicationId.fromString(
+            persistedService.getId()));
+    if (appReport.getYarnApplicationState() != RUNNING) {
+      String message =
+          persistedService.getName() + " is at " + appReport
+              .getYarnApplicationState() + " state, decommission can only be " +
+              "invoked when service is running";
+      LOG.error(message);
+      throw new YarnException(message);
+    }
+
+    if (StringUtils.isEmpty(appReport.getHost())) {
+      throw new YarnException(persistedService.getName() + " AM hostname is " +
+          "empty");
+    }
+    ClientAMProtocol proxy =
+        createAMProxy(persistedService.getName(), appReport);
+    DecommissionCompInstancesRequestProto.Builder requestBuilder =
+        DecommissionCompInstancesRequestProto.newBuilder();
+    requestBuilder.addAllCompInstances(componentInstances);
+    proxy.decommissionCompInstances(requestBuilder.build());
+    return EXIT_SUCCESS;
+  }
+
+  @Override
-    jsonSerDeser
-        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),
-            persistedService, true);
+    ServiceApiUtil.writeAppDefinition(fs, persistedService);

INS26 INS40 INS31 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS21 INS60 INS25 INS21 INS70 INS21 INS60 INS25 INS25 INS60 INS60 INS21 INS21 INS41 INS42 INS43 INS43 INS32 INS43 INS59 INS32 INS8 INS32 INS44 INS42 INS8 INS32 INS43 INS59 INS27 INS8 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS14 INS43 INS42 INS60 INS60 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS60 INS21 INS53 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS43 INS27 INS42 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS45 INS32 INS45 INS45 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS27 INS32 INS34 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL9