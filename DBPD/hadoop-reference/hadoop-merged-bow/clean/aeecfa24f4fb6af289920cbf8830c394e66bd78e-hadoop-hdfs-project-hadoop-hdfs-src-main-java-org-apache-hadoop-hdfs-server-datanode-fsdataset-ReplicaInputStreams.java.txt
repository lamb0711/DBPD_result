HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao.

+import java.io.FileDescriptor;
+import java.io.FileInputStream;
+import java.io.IOException;
+import org.apache.hadoop.hdfs.server.datanode.DataNode;
+import org.apache.hadoop.io.nativeio.NativeIO;
+import org.apache.hadoop.io.nativeio.NativeIOException;
+import org.slf4j.Logger;
-  private final InputStream dataIn;
-  private final InputStream checksumIn;
-  private final FsVolumeReference volumeRef;
+  public static final Logger LOG = DataNode.LOG;
+
+  private InputStream dataIn;
+  private InputStream checksumIn;
+  private FsVolumeReference volumeRef;
+  private FileDescriptor dataInFd = null;
-  public ReplicaInputStreams(InputStream dataStream, InputStream checksumStream,
-      FsVolumeReference volumeRef) {
+  public ReplicaInputStreams(InputStream dataStream,
+      InputStream checksumStream, FsVolumeReference volumeRef) {
+    if (dataIn instanceof FileInputStream) {
+      try {
+        dataInFd = ((FileInputStream) dataIn).getFD();
+      } catch (Exception e) {
+        LOG.warn("Could not get file descriptor for inputstream of class " +
+            this.dataIn.getClass());
+      }
+    } else {
+      LOG.debug("Could not get file descriptor for inputstream of class " +
+          this.dataIn.getClass());
+    }
+  public FileDescriptor getDataInFd() {
+    return dataInFd;
+  }
+
+  public FsVolumeReference getVolumeRef() {
+    return volumeRef;
+  }
+
+  public void readDataFully(byte[] buf, int off, int len)
+      throws IOException {
+    IOUtils.readFully(dataIn, buf, off, len);
+  }
+
+  public void readChecksumFully(byte[] buf, int off, int len)
+      throws IOException {
+    IOUtils.readFully(checksumIn, buf, off, len);
+  }
+
+  public void skipDataFully(long len) throws IOException {
+    IOUtils.skipFully(dataIn, len);
+  }
+
+  public void skipChecksumFully(long len) throws IOException {
+    IOUtils.skipFully(checksumIn, len);
+  }
+
+  public void closeChecksumStream() throws IOException {
+    IOUtils.closeStream(checksumIn);
+    checksumIn = null;
+  }
+
+  public void dropCacheBehindReads(String identifier, long offset, long len,
+      int flags) throws NativeIOException {
+    assert this.dataInFd != null : "null dataInFd!";
+    NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+        identifier, dataInFd, offset, len, flags);
+  }
+
+  public void closeStreams() throws IOException {
+    IOException ioe = null;
+    if(checksumIn!=null) {
+      try {
+        checksumIn.close(); // close checksum file
+      } catch (IOException e) {
+        ioe = e;
+      }
+      checksumIn = null;
+    }
+    if(dataIn!=null) {
+      try {
+        dataIn.close(); // close data file
+      } catch (IOException e) {
+        ioe = e;
+      }
+      dataIn = null;
+      dataInFd = null;
+    }
+    if (volumeRef != null) {
+      IOUtils.cleanup(null, volumeRef);
+      volumeRef = null;
+    }
+    // throw IOException if there is any
+    if(ioe!= null) {
+      throw ioe;
+    }
+  }
+
+    dataIn = null;
+    dataInFd = null;
+    checksumIn = null;
+    volumeRef = null;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS40 INS42 INS42 INS33 MOV21 MOV21 MOV21 INS25 INS42 INS41 INS42 INS41 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS5 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS39 INS42 INS42 INS21 INS39 INS42 INS42 INS21 INS42 INS21 INS21 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS6 INS21 INS42 INS60 INS25 INS25 INS25 INS25 INS21 INS21 INS21 INS21 INS62 INS8 INS8 INS42 INS42 INS39 INS85 INS32 INS39 INS85 INS32 INS32 INS32 INS32 INS7 INS42 INS27 INS45 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS7 INS7 INS7 INS7 INS42 INS43 INS54 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS22 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS54 INS21 INS42 INS33 INS54 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS53 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS8 INS12 INS32 INS52 INS42 INS40 INS42 INS8 INS12 INS7 INS8 INS12 INS7 INS7 INS32 INS7 INS42 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS33 INS7 INS43 INS42 INS21 INS45 INS32 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS42 INS32 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS36 INS42 INS42 INS42 INS27 INS52 INS42 INS42 INS42 INS42 INS42 INS11 INS45 INS32 INS43 INS42 INS22 INS42 INS42 INS52 INS42 DEL83 DEL83 DEL83 DEL8