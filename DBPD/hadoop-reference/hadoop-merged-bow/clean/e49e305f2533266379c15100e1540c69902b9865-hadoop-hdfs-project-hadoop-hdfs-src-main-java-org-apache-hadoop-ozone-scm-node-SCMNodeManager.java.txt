HDFS-11001. Ozone:SCM: Add support for registerNode in SCM. Contributed by Anu Engineer.

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with this
- * work for additional information regarding copyright ownership.  The ASF
- * licenses this file to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import org.apache.hadoop.ozone.protocol.StorageContainerNodeProtocol;
+import org.apache.hadoop.ozone.protocol.VersionResponse;
+import org.apache.hadoop.ozone.protocol.commands.RegisteredCommand;
+import org.apache.hadoop.ozone.protocol.commands.SCMCommand;
+import org.apache.hadoop.ozone.protocol.proto.StorageContainerDatanodeProtocolProtos.RegisteredCmdResponseProto.ErrorCode;
+import org.apache.hadoop.ozone.protocol.proto.StorageContainerDatanodeProtocolProtos.SCMVersionRequestProto;
+
+import org.apache.hadoop.ozone.scm.VersionInfo;
+import java.util.UUID;
- * <p/>
+ * <p>
- * <p/>
+ * <p>
- * staleNodesMap to deadNodesMap. This moving of a node from one map to
- * another is controlled by 4 configuration variables. These variables define
- * how many heartbeats must go missing for the node to move from one map to
- * another.
- * <p/>
+ * staleNodesMap to deadNodesMap. This moving of a node from one map to another
+ * is controlled by 4 configuration variables. These variables define how many
+ * heartbeats must go missing for the node to move from one map to another.
+ * <p>
- * <p/>
- *
- * TODO: Replace with Node Registration code.
- * if the node is not found in any of these tables it is treated as new node for
- * time being and added to the healthy nodes list.
- *
- * <p/>
- *
- * The getNode(byState) functions make copy of node maps and then creates a
- * list based on that. It should be assumed that these get functions always
- * report *stale* information. For example, getting the deadNodeCount
- * followed by
+ * <p>
+ * The getNode(byState) functions make copy of node maps and then creates a list
+ * based on that. It should be assumed that these get functions always report
+ * *stale* information. For example, getting the deadNodeCount followed by
- * get functions in this file as a snap-shot of information that is
- * inconsistent as soon as you read it.
+ * get functions in this file as a snap-shot of information that is inconsistent
+ * as soon as you read it.
-public class SCMNodeManager implements NodeManager {
+public class SCMNodeManager
+    implements NodeManager, StorageContainerNodeProtocol {
+  private final String clusterID;
+  private final VersionInfo version;
+  private final CommandQueue commandQueue;
-  public SCMNodeManager(Configuration conf) {
+  public SCMNodeManager(Configuration conf, String clusterID) {
+    this.clusterID = clusterID;
+    this.version = VersionInfo.getLatestVersion();
+    commandQueue = new CommandQueue();
-    this.inManualChillMode =  Optional.absent();
+    this.inManualChillMode = Optional.absent();
-   * Add a New Datanode to the NodeManager. This function is invoked with
-   * synchronised(this) being held.
-   *
-   * @param nodeReg - node to register
-   */
-  @Override
-  public void registerNode(DatanodeID nodeReg) {
-    if (nodes.containsKey(nodeReg.getDatanodeUuid())) {
-      LOG.error("Datanode is already registered. Datanode: {}",
-          nodeReg.toString());
-      return;
-    }
-    nodes.put(nodeReg.getDatanodeUuid(), nodeReg);
-    totalNodes.incrementAndGet();
-    healthyNodes.put(nodeReg.getDatanodeUuid(), monotonicNow());
-    healthyNodeCount.incrementAndGet();
-    LOG.info("Data node with ID: {} Registered.", nodeReg.getDatanodeUuid());
-  }
-
-  /**
-   * Register the heartbeat with Machine Manager.
-   *
-   * This requires no synchronization since the heartbeat queue is
-   * ConcurrentLinkedQueue. Hence we don't protect it specifically via a lock.
-   *
-   * @param datanodeID - Name of the datanode that send us heartbeat.
-   */
-  @Override
-  public void updateHeartbeat(DatanodeID datanodeID) {
-    // Checking for NULL to make sure that we don't get
-    // an exception from ConcurrentList.
-    // This could be a problem in tests, if this function is invoked via
-    // protobuf, transport layer will guarantee that this is not null.
-    if (datanodeID != null) {
-      heartbeatQueue.add(datanodeID);
-      return;
-    }
-    LOG.error("Datanode ID in heartbeat is null");
-  }
-
-  /**
-      throws IllegalArgumentException{
+      throws IllegalArgumentException {
-            .collect(Collectors.toList());
+        .collect(Collectors.toList());
-            .collect(Collectors.toList());
+        .collect(Collectors.toList());
-   * @param count  - Number of nodes.
+   * @param count - Number of nodes.
-    if(this.inManualChillMode.isPresent()) {
+    if (this.inManualChillMode.isPresent()) {
+   *
-   *
-   * Process the Heartbeats that are in the HB Queue.
-   * Move Stale or Dead node to healthy if we got a heartbeat from them.
-   * Move Stales Node to dead node table if it is needed.
-   * Move healthy nodes to stale nodes if it is needed.
-   *
+   * <p>
+   * Process the Heartbeats that are in the HB Queue. Move Stale or Dead node to
+   * healthy if we got a heartbeat from them. Move Stales Node to dead node
+   * table if it is needed. Move healthy nodes to stale nodes if it is needed.
+   * <p>
+   *
-      return;
-
-    registerNode(datanodeID);
+  /**
+   * Gets the version info from SCM.
+   *
+   * @param versionRequest - version Request.
+   * @return - returns SCM version info and other required information needed by
+   * datanode.
+   */
+  @Override
+  public VersionResponse getVersion(SCMVersionRequestProto versionRequest) {
+    return VersionResponse.newBuilder()
+        .setVersion(this.version.getVersion())
+        .build();
+  }
+
+  /**
+   * Register the node if the node finds that it is not registered with any
+   * SCM.
+   *
+   * @param datanodeID - Send datanodeID with Node info. This function
+   *                   generates and assigns new datanode ID for the datanode.
+   *                   This allows SCM to be run independent of Namenode if
+   *                   required.
+   *
+   * @return SCMHeartbeatResponseProto
+   */
+  @Override
+  public SCMCommand register(DatanodeID datanodeID) {
+
+    SCMCommand errorCode = verifyDatanodeUUID(datanodeID);
+    if (errorCode != null) {
+      return errorCode;
+    }
+    DatanodeID newDatanodeID = new DatanodeID(UUID.randomUUID().toString(),
+        datanodeID);
+    nodes.put(newDatanodeID.getDatanodeUuid(), newDatanodeID);
+    totalNodes.incrementAndGet();
+    healthyNodes.put(newDatanodeID.getDatanodeUuid(), monotonicNow());
+    healthyNodeCount.incrementAndGet();
+    LOG.info("Data node with ID: {} Registered.",
+        newDatanodeID.getDatanodeUuid());
+    return RegisteredCommand.newBuilder()
+        .setErrorCode(ErrorCode.success)
+        .setDatanodeUUID(newDatanodeID.getDatanodeUuid())
+        .setClusterID(this.clusterID)
+        .build();
+  }
+
+  /**
+   * Verifies the datanode does not have a valid UUID already.
+   *
+   * @param datanodeID - Datanode UUID.
+   * @return SCMCommand
+   */
+  private SCMCommand verifyDatanodeUUID(DatanodeID datanodeID) {
+
+    // Make sure that we return the right error code, so that
+    // data node can log the correct error. if it is already registered then
+    // datanode should move to heartbeat state. It implies that somehow we
+    // have an error where the data node is trying to re-register.
+    //
+    // We are going to let the datanode know that there is an error but allow it
+    // to recover by sending it the right info that is needed for recovery.
+
+    if (datanodeID.getDatanodeUuid() != null &&
+        nodes.containsKey(datanodeID.getDatanodeUuid())) {
+      LOG.error("Datanode is already registered. Datanode: {}",
+          datanodeID.toString());
+      return RegisteredCommand.newBuilder()
+          .setErrorCode(ErrorCode.errorNodeAlreadyRegistered)
+          .setClusterID(this.clusterID)
+          .setDatanodeUUID(datanodeID.getDatanodeUuid())
+          .build();
+    }
+    return null;
+  }
+
+  /**
+   * Send heartbeat to indicate the datanode is alive and doing well.
+   *
+   * @param datanodeID - Datanode ID.
+   * @return SCMheartbeat response.
+   * @throws IOException
+   */
+  @Override
+  public List<SCMCommand> sendHeartbeat(DatanodeID datanodeID) {
+
+    // Checking for NULL to make sure that we don't get
+    // an exception from ConcurrentList.
+    // This could be a problem in tests, if this function is invoked via
+    // protobuf, transport layer will guarantee that this is not null.
+    if (datanodeID != null) {
+      heartbeatQueue.add(datanodeID);
+
+    } else {
+      LOG.error("Datanode ID in heartbeat is null");
+    }
+
+    return commandQueue.getCommand(datanodeID);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS31 INS31 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS29 INS78 INS83 INS43 INS42 INS44 INS8 INS43 UPD42 INS29 INS83 INS43 INS42 INS44 INS8 INS74 UPD42 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS41 INS65 INS42 INS43 INS42 INS60 INS25 INS60 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS41 INS65 INS65 INS43 INS43 INS41 INS42 INS7 INS7 INS7 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS42 INS66 INS66 INS66 INS42 INS32 UPD66 UPD66 UPD42 UPD66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS27 INS8 MOV43 INS59 INS32 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS33 UPD66 UPD66 INS66 INS42 INS42 INS42 INS8 INS32 INS22 INS42 INS22 INS32 INS42 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS14 UPD42 INS32 INS42 INS27 INS32 INS21 INS41 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS32 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS22 INS32 INS33 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS22 INS42 INS42 INS32 MOV42 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS22 INS42 INS42 INS32 INS42 INS40 INS52 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL41 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL25 DEL66 DEL66 DEL39 DEL41