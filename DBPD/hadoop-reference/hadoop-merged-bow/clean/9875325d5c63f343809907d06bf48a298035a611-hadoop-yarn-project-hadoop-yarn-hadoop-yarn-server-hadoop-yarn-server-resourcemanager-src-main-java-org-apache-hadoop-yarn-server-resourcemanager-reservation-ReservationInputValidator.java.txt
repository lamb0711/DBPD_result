YARN-4340. Add list API to reservation system. (Sean Po via wangda)

+import org.apache.hadoop.yarn.api.protocolrecords.ReservationListRequest;
-    String message = "";
-      message =
+      String message =
-    String queueName = reservationSystem.getQueueForReservation(reservationId);
-    if (queueName == null) {
-      message =
-          "The specified reservation with ID: " + reservationId
-              + " is unknown. Please try again with a valid reservation.";
-      RMAuditLogger.logFailure("UNKNOWN", auditConstant,
-          "validate reservation input", "ClientRMService", message);
-      throw RPCUtil.getRemoteException(message);
-    }
-    // check if the associated plan is valid
-    Plan plan = reservationSystem.getPlan(queueName);
-    if (plan == null) {
-      message =
-          "The specified reservation: " + reservationId
-              + " is not associated with any valid plan."
-              + " Please try again with a valid reservation.";
-      RMAuditLogger.logFailure("UNKNOWN", auditConstant,
-          "validate reservation input", "ClientRMService", message);
-      throw RPCUtil.getRemoteException(message);
-    }
-    return plan;
+    String queue = reservationSystem.getQueueForReservation(reservationId);
+    String nullQueueErrorMessage =
+            "The specified reservation with ID: " + reservationId
+                    + " is unknown. Please try again with a valid reservation.";
+    String nullPlanErrorMessage = "The specified reservation: " + reservationId
+                            + " is not associated with any valid plan."
+                            + " Please try again with a valid reservation.";
+    return getPlanFromQueue(reservationSystem, queue, auditConstant,
+            nullQueueErrorMessage, nullPlanErrorMessage);
+  private Plan getPlanFromQueue(ReservationSystem reservationSystem, String
+          queue, String auditConstant) throws YarnException {
+    String nullQueueErrorMessage = "The queue is not specified."
+            + " Please try again with a valid reservable queue.";
+    String nullPlanErrorMessage = "The specified queue: " + queue
+            + " is not managed by reservation system."
+            + " Please try again with a valid reservable queue.";
+    return getPlanFromQueue(reservationSystem, queue, auditConstant,
+            nullQueueErrorMessage, nullPlanErrorMessage);
+  }
+
+  private Plan getPlanFromQueue(ReservationSystem reservationSystem, String
+          queue, String auditConstant, String nullQueueErrorMessage,
+          String nullPlanErrorMessage) throws YarnException {
+    if (queue == null || queue.isEmpty()) {
+      RMAuditLogger.logFailure("UNKNOWN", auditConstant,
+              "validate reservation input", "ClientRMService",
+              nullQueueErrorMessage);
+      throw RPCUtil.getRemoteException(nullQueueErrorMessage);
+    }
+    // check if the associated plan is valid
+    Plan plan = reservationSystem.getPlan(queue);
+    if (plan == null) {
+      RMAuditLogger.logFailure("UNKNOWN", auditConstant,
+              "validate reservation input", "ClientRMService",
+              nullPlanErrorMessage);
+      throw RPCUtil.getRemoteException(nullPlanErrorMessage);
+    }
+    return plan;
+  }
+
-    String queueName = request.getQueue();
-    if (queueName == null || queueName.isEmpty()) {
-      String errMsg =
-          "The queue to submit is not specified."
-              + " Please try again with a valid reservable queue.";
-      RMAuditLogger.logFailure("UNKNOWN",
-          AuditConstants.SUBMIT_RESERVATION_REQUEST,
-          "validate reservation input", "ClientRMService", errMsg);
-      throw RPCUtil.getRemoteException(errMsg);
-    }
-    Plan plan = reservationSystem.getPlan(queueName);
-    if (plan == null) {
-      String errMsg =
-          "The specified queue: " + queueName
-              + " is not managed by reservation system."
-              + " Please try again with a valid reservable queue.";
-      RMAuditLogger.logFailure("UNKNOWN",
-          AuditConstants.SUBMIT_RESERVATION_REQUEST,
-          "validate reservation input", "ClientRMService", errMsg);
-      throw RPCUtil.getRemoteException(errMsg);
-    }
+    String queue = request.getQueue();
+    Plan plan = getPlanFromQueue(reservationSystem, queue,
+            AuditConstants.SUBMIT_RESERVATION_REQUEST);
+   * details of any validation check failures.
+   *
+   * @param reservationSystem the {@link ReservationSystem} to validate against
+   * @param request the {@link ReservationListRequest} defining search
+   *                parameters for reservations in the {@link ReservationSystem}
+   *                that is being validated against.
+   * @return the {@link Plan} to list reservations of.
+   * @throws YarnException
+   */
+  public Plan validateReservationListRequest(
+      ReservationSystem reservationSystem,
+      ReservationListRequest request)
+      throws YarnException {
+    String queue = request.getQueue();
+    if (request.getEndTime() < request.getStartTime()) {
+      String errorMessage = "The specified end time must be greater than " +
+              "the specified start time.";
+      RMAuditLogger.logFailure("UNKNOWN",
+              AuditConstants.LIST_RESERVATION_REQUEST,
+              "validate list reservation input", "ClientRMService",
+              errorMessage);
+      throw RPCUtil.getRemoteException(errorMessage);
+    }
+    // Check if it is a managed queue
+    return getPlanFromQueue(reservationSystem, queue,
+            AuditConstants.LIST_RESERVATION_REQUEST);
+  }
+
+  /**
+   * Quick validation on the input to check some obvious fail conditions (fail
+   * fast) the input and returns the appropriate {@link Plan} associated with
+   * the specified {@link Queue} or throws an exception message illustrating the
-

INS26 INS40 INS31 INS31 INS31 MOV60 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 MOV43 INS42 INS42 INS25 INS60 INS25 MOV41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS27 INS8 MOV43 INS59 MOV27 INS8 MOV43 MOV43 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS60 UPD42 INS42 UPD42 MOV27 INS42 INS42 MOV27 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS21 INS53 INS42 INS32 INS21 INS53 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS60 INS21 INS53 INS42 INS42 INS42 INS40 MOV43 INS59 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 MOV27 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS40 INS45 INS45 INS42 INS42 INS42 INS42 INS45 INS45 DEL42 DEL7 DEL21 DEL45 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL45 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL40 DEL45 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL53 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL40 DEL45 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL53 DEL8 DEL25