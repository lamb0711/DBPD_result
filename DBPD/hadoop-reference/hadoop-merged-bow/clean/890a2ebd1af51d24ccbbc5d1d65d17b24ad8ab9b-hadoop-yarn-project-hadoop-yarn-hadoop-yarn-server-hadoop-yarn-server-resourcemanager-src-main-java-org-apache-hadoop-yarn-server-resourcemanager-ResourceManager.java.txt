YARN-4559. Make leader elector and zk store share the same curator
client. Contributed by Jian He

+import org.apache.curator.framework.AuthInfo;
+import org.apache.curator.framework.CuratorFramework;
+import org.apache.curator.framework.CuratorFrameworkFactory;
+import org.apache.curator.retry.RetryNTimes;
-import org.apache.hadoop.security.*;
+import org.apache.hadoop.security.AuthenticationFilterInitializer;
+import org.apache.hadoop.security.Groups;
+import org.apache.hadoop.security.HttpCrossOriginFilterInitializer;
+import org.apache.hadoop.security.SecurityUtil;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.util.ZKUtil;
-import org.apache.hadoop.yarn.server.resourcemanager.nodelabels.RMNodeLabelsManager;
+import org.apache.hadoop.yarn.server.resourcemanager.nodelabels.RMNodeLabelsManager;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.*;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.PreemptableResourceScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.QueueMetrics;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceScheduler;
+import org.apache.zookeeper.server.auth.DigestAuthenticationProvider;
+import java.nio.charset.Charset;
+import java.security.SecureRandom;
+  private CuratorFramework curator;
+  private final String zkRootNodePassword =
+      Long.toString(new SecureRandom().nextLong());
+  private boolean recoveryEnabled;
-        LeaderElectorService elector = new LeaderElectorService(rmContext);
+        this.curator = createAndStartCurator(conf);
+        LeaderElectorService elector = new LeaderElectorService(rmContext, this);
-  
+
+  public CuratorFramework createAndStartCurator(Configuration conf)
+      throws Exception {
+    String zkHostPort = conf.get(YarnConfiguration.RM_ZK_ADDRESS);
+    if (zkHostPort == null) {
+      throw new YarnRuntimeException(
+          YarnConfiguration.RM_ZK_ADDRESS + " is not configured.");
+    }
+    int numRetries = conf.getInt(YarnConfiguration.RM_ZK_NUM_RETRIES,
+        YarnConfiguration.DEFAULT_ZK_RM_NUM_RETRIES);
+    int zkSessionTimeout = conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS,
+        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);
+    int zkRetryInterval = conf.getInt(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS,
+        YarnConfiguration.DEFAULT_RM_ZK_RETRY_INTERVAL_MS);
+
+    // set up zk auths
+    List<ZKUtil.ZKAuthInfo> zkAuths = RMZKUtils.getZKAuths(conf);
+    List<AuthInfo> authInfos = new ArrayList<>();
+    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {
+      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));
+    }
+
+    if (HAUtil.isHAEnabled(conf) && HAUtil.getConfValueForRMInstance(
+        YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL, conf) == null) {
+      String zkRootNodeUsername = HAUtil
+          .getConfValueForRMInstance(YarnConfiguration.RM_ADDRESS,
+              YarnConfiguration.DEFAULT_RM_ADDRESS, conf);
+      byte[] defaultFencingAuth =
+          (zkRootNodeUsername + ":" + zkRootNodePassword)
+              .getBytes(Charset.forName("UTF-8"));
+      authInfos.add(new AuthInfo(new DigestAuthenticationProvider().getScheme(),
+          defaultFencingAuth));
+    }
+
+    CuratorFramework client =  CuratorFrameworkFactory.builder()
+        .connectString(zkHostPort)
+        .sessionTimeoutMs(zkSessionTimeout)
+        .retryPolicy(new RetryNTimes(numRetries, zkRetryInterval))
+        .authorization(authInfos).build();
+    client.start();
+    return client;
+  }
+
+  public CuratorFramework getCurator() {
+    return this.curator;
+  }
+
+  public String getZkRootNodePassword() {
+    return this.zkRootNodePassword;
+  }
+
+
-    private boolean recoveryEnabled;
-      boolean isRecoveryEnabled = conf.getBoolean(
-          YarnConfiguration.RECOVERY_ENABLED,
+      recoveryEnabled = conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,
-      if (isRecoveryEnabled) {
-        recoveryEnabled = true;
+      if (recoveryEnabled) {
-          .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);
+            .setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);
-        recoveryEnabled = false;
+        rmStore.setResourceManager(rm);
-        rmStore.setResourceManager(rm);
+    if (curator != null) {
+      curator.close();
+    }
-  
+
-

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS23 INS23 MOV23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS70 INS25 INS60 INS21 INS41 INS42 INS41 INS42 INS41 INS25 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS27 INS8 INS43 INS59 INS32 INS42 INS22 INS22 INS21 INS27 INS8 INS14 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS32 INS27 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS7 UPD42 MOV21 INS42 INS33 INS21 INS43 INS42 INS42 INS40 INS14 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS74 INS40 INS32 INS42 INS42 INS42 INS32 INS33 INS43 INS59 INS5 INS59 INS32 INS32 INS42 INS42 MOV32 INS32 INS42 INS21 INS43 INS27 INS43 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS7 MOV43 INS42 INS40 INS45 INS42 INS43 INS32 INS32 INS42 INS42 INS40 INS40 INS42 INS36 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS14 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS14 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS52 INS42 INS42 INS42 MOV43 INS52 INS42 INS45 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21