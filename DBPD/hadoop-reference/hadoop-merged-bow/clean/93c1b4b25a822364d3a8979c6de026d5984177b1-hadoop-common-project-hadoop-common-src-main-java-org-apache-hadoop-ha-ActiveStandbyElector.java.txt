Merge r1414455:r1426018 from trunk

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1432246 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import com.google.common.collect.Lists;
-      HadoopIllegalArgumentException {
+      HadoopIllegalArgumentException, KeeperException {
+   * @throws KeeperException zookeeper connectionloss exception
-  protected synchronized ZooKeeper getNewZooKeeper() throws IOException {
-    ZooKeeper zk = new ZooKeeper(zkHostPort, zkSessionTimeout, null);
-    zk.register(new WatcherWithClientRef(zk));
+  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,
+      KeeperException {
+    
+    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and
+    // may trigger the Connected event immediately. So, if we register the
+    // watcher after constructing ZooKeeper, we may miss that event. Instead,
+    // we construct the watcher first, and have it queue any events it receives
+    // before we can set its ZooKeeper reference.
+    WatcherWithClientRef watcher = new WatcherWithClientRef();
+    ZooKeeper zk = new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);
+    watcher.setZooKeeperRef(zk);
+
+    // Wait for the asynchronous success/failure. This may throw an exception
+    // if we don't connect within the session timeout.
+    watcher.waitForZKConnectionEvent(zkSessionTimeout);
+    
+      } catch(KeeperException e) {
+        LOG.warn(e);
+        sleepFor(5000);
-  private void createConnection() throws IOException {
+  private void createConnection() throws IOException, KeeperException {
-    private final ZooKeeper zk;
+    private ZooKeeper zk;
+    
+    /**
+     * Latch fired whenever any event arrives. This is used in order
+     * to wait for the Connected event when the client is first created.
+     */
+    private CountDownLatch hasReceivedEvent = new CountDownLatch(1);
+
+    /**
+     * If any events arrive before the reference to ZooKeeper is set,
+     * they get queued up and later forwarded when the reference is
+     * available.
+     */
+    private final List<WatchedEvent> queuedEvents = Lists.newLinkedList();
+    
+    private WatcherWithClientRef() {
+    }
+    
+    /**
+     * Waits for the next event from ZooKeeper to arrive.
+     * 
+     * @param connectionTimeoutMs zookeeper connection timeout in milliseconds
+     * @throws KeeperException if the connection attempt times out. This will
+     * be a ZooKeeper ConnectionLoss exception code.
+     * @throws IOException if interrupted while connecting to ZooKeeper
+     */
+    private void waitForZKConnectionEvent(int connectionTimeoutMs)
+        throws KeeperException, IOException {
+      try {
+        if (!hasReceivedEvent.await(connectionTimeoutMs, TimeUnit.MILLISECONDS)) {
+          LOG.error("Connection timed out: couldn't connect to ZooKeeper in "
+              + connectionTimeoutMs + " milliseconds");
+          synchronized (this) {
+            zk.close();
+          }
+          throw KeeperException.create(Code.CONNECTIONLOSS);
+        }
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+        throw new IOException(
+            "Interrupted when connecting to zookeeper server", e);
+      }
+    }
+
+    private synchronized void setZooKeeperRef(ZooKeeper zk) {
+      Preconditions.checkState(this.zk == null,
+          "zk already set -- must be set exactly once");
+      this.zk = zk;
+      
+      for (WatchedEvent e : queuedEvents) {
+        forwardEvent(e);
+      }
+      queuedEvents.clear();
+    }
-    public void process(WatchedEvent event) {
+    public synchronized void process(WatchedEvent event) {
+      if (zk != null) {
+        forwardEvent(event);
+      } else {
+        queuedEvents.add(event);
+      }
+    }
+    
+    private void forwardEvent(WatchedEvent event) {
+      hasReceivedEvent.countDown();
-

INS26 INS26 INS26 INS40 INS40 INS40 INS43 INS43 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS65 INS42 INS60 INS21 INS42 INS29 INS83 INS43 INS59 INS29 INS83 INS83 INS74 INS59 INS83 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 INS83 INS39 INS42 INS44 INS8 UPD83 UPD42 INS42 INS66 MOV43 INS59 MOV43 INS32 INS65 INS42 INS42 INS14 INS65 INS43 INS43 INS42 INS32 INS65 INS65 INS65 INS65 INS39 INS42 INS42 INS42 INS54 INS43 INS42 INS21 INS21 INS70 INS21 INS43 INS42 INS25 INS21 INS42 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 INS66 INS66 INS43 INS34 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS8 INS12 INS42 INS32 INS7 INS44 INS42 INS8 INS32 INS42 INS27 INS8 INS8 INS32 INS43 MOV43 INS42 INS12 INS42 INS25 INS44 INS8 INS42 INS42 INS27 INS45 INS22 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS44 INS8 INS38 INS8 INS43 INS42 INS21 INS53 INS22 INS33 INS52 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS32 INS21 INS51 INS53 INS42 INS32 INS14 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS32 INS52 INS8 INS32 INS32 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS27 INS21 INS42 INS42 INS40 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 DEL33 DEL42 DEL14 DEL83