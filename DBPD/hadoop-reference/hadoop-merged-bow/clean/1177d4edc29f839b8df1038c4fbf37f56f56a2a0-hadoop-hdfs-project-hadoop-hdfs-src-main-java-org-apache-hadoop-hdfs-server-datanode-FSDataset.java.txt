HDFS-3005. FSVolume.decDfsUsed(..) should be synchronized.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301127 13f79535-47bb-0310-9956-ffa450edef68

-  private class FSDir {
+  private static class FSDir {
+    final int maxBlocksPerDir;
-    private FSDir(File dir) 
+    private FSDir(File dir, int maxBlocksPerDir)
+      this.maxBlocksPerDir = maxBlocksPerDir;
+
-            dirList.add(new FSDir(files[idx]));
+            dirList.add(new FSDir(files[idx], maxBlocksPerDir));
-          children[idx] = new FSDir(new File(dir, DataStorage.BLOCK_SUBDIR_PREFIX+idx));
+          final File sub = new File(dir, DataStorage.BLOCK_SUBDIR_PREFIX+idx);
+          children[idx] = new FSDir(sub, maxBlocksPerDir);
+   * 
+   * This class is synchronized by {@link FSVolume}.
-  private class BlockPoolSlice {
+  private static class BlockPoolSlice {
+      final boolean supportAppends = conf.getBoolean(
+          DFSConfigKeys.DFS_SUPPORT_APPEND_KEY,
+          DFSConfigKeys.DFS_SUPPORT_APPEND_DEFAULT);
-      this.finalizedDir = new FSDir(finalizedDir);
+      final int maxBlocksPerDir = conf.getInt(
+          DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_KEY,
+          DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_DEFAULT);
+      this.finalizedDir = new FSDir(finalizedDir, maxBlocksPerDir);
+    /**
+     * This should be used only by {@link FSVolume#decDfsUsed(String, long)}
+     * and it will be synchronized there.
+     */
-      // The caller to this method (BlockFileDeleteTask.run()) does
-      // not have locked FSDataset.this yet.
-      synchronized(FSDataset.this) {
-        dfsUsage.decDfsUsed(value);
-      }
+      dfsUsage.decDfsUsed(value);
-  
-  class FSVolume implements FSVolumeInterface {
+
+  /**
+   * The underlying volume used to store replica.
+   * 
+   * It uses the {@link FSDataset} object for synchronization.
+   */
+  static class FSVolume implements FSVolumeInterface {
+    private final FSDataset dataset;
-    FSVolume(File currentDir, Configuration conf) throws IOException {
+    FSVolume(FSDataset dataset, File currentDir, Configuration conf
+        ) throws IOException {
+      this.dataset = dataset;
-      // The caller to this method (BlockFileDeleteTask.run()) does
-      // not have locked FSDataset.this yet.
-      synchronized(FSDataset.this) {
+      synchronized(dataset) {
-      // TODO valid synchronization
-      Set<Entry<String, BlockPoolSlice>> set = map.entrySet();
-      for (Entry<String, BlockPoolSlice> entry : set) {
-        dfsUsed += entry.getValue().getDfsUsed();
+      synchronized(dataset) {
+        for(BlockPoolSlice s : map.values()) {
+          dfsUsed += s.getDfsUsed();
+        }
-      synchronized(FSDataset.this) {
+      synchronized(dataset) {
-      
+
+    /**
+     * This should be used only by {@link FSVolumeSet#checkDirs()}
+     * and it will be synchronized there.
+     */
-      Set<Entry<String, BlockPoolSlice>> set = map.entrySet();
-      for (Entry<String, BlockPoolSlice> entry : set) {
-        entry.getValue().checkDirs();
+      for(BlockPoolSlice s : map.values()) {
+        s.checkDirs();
-      
+
-      for (int idx = 0; idx < volumeList.size(); idx++) {
-        FSVolume fsv = volumeList.get(idx);
+      for(Iterator<FSVolume> i = volumeList.iterator(); i.hasNext(); ) {
+        final FSVolume fsv = i.next();
-            removedVols = new ArrayList<FSVolume>(1);
+            removedVols = new ArrayList<FSVolume>(2);
-          volumeList.set(idx, null); // Remove the volume
+          i.remove(); // Remove the volume
-      // Remove null volumes from the volumes array
-        final List<FSVolume> newVols = new ArrayList<FSVolume>();
-        for (FSVolume vol : volumeList) {
-          if (vol != null) {
-            newVols.add(vol);
-          }
-        }
-        volumes = Collections.unmodifiableList(newVols); // Replace volume list
+        // Replace volume list
+        volumes = Collections.unmodifiableList(volumeList);
-  private final int maxBlocksPerDir;
-  final boolean supportAppends;
-
-    this.maxBlocksPerDir = 
-      conf.getInt(DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_KEY,
-                  DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_DEFAULT);
-    this.supportAppends = 
-      conf.getBoolean(DFSConfigKeys.DFS_SUPPORT_APPEND_KEY,
-                      DFSConfigKeys.DFS_SUPPORT_APPEND_DEFAULT);
-      volArray.add(new FSVolume(dir, conf));
+      volArray.add(new FSVolume(this, dir, conf));

INS83 INS23 INS83 INS29 INS83 INS23 INS83 INS39 MOV59 INS44 INS29 MOV8 INS65 INS83 INS83 INS43 INS59 INS44 INS29 INS39 INS42 INS21 INS66 INS65 INS66 INS60 INS60 INS65 INS66 INS66 INS65 INS66 INS42 INS42 INS43 INS42 INS21 INS51 INS65 INS70 INS7 INS42 INS83 INS39 INS59 INS83 INS39 INS59 INS66 INS65 INS66 INS42 INS42 INS7 INS42 INS42 INS8 INS42 INS66 INS65 INS66 INS44 INS32 MOV8 INS58 INS32 MOV22 INS42 INS42 MOV32 INS42 MOV32 INS68 INS22 INS42 INS70 INS68 MOV43 INS42 MOV42 UPD42 MOV42 INS74 INS59 INS42 INS42 INS42 INS42 INS42 INS69 INS69 INS52 INS42 INS44 INS32 MOV8 INS42 INS42 INS43 MOV43 INS42 INS32 INS83 MOV43 INS60 MOV43 INS39 MOV43 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS52 INS83 INS43 INS59 UPD42 UPD42 UPD42 INS42 INS42 MOV14 INS42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 UPD34 MOV43 MOV43 MOV42 DEL42 DEL52 DEL51 DEL8 DEL42 DEL52 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL70 DEL42 DEL52 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL70 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL33 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL83 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL7 DEL21 DEL52 DEL42 DEL22 DEL7 DEL21