YARN-4711. NM is going down with NPE's due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)

+import java.io.IOException;
+import java.util.concurrent.ConcurrentHashMap;
-import org.apache.hadoop.yarn.api.records.Priority;
+import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.application.ApplicationEventType;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerEventType;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.ContainerLocalizationEvent;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.LocalizationEventType;
+  protected final Map<ApplicationId, TimelineClient> appToClientMap;
+
+    appToClientMap = new ConcurrentHashMap<>();
-    dispatcher
-        .register(ContainerEventType.class, new ContainerEventHandler());
-    dispatcher.register(ApplicationEventType.class,
-        new ApplicationEventHandler());
-    dispatcher.register(LocalizationEventType.class,
-        new LocalizationEventDispatcher());
-  @SuppressWarnings("unchecked")
-      dispatcher.getEventHandler()
-          .handle(new TimelinePublishEvent(entity, container.getContainerId()
-              .getApplicationAttemptId().getApplicationId()));
+      ApplicationId appId = container.getContainerId().getApplicationAttemptId()
+          .getApplicationId();
+      try {
+        // no need to put it as part of publisher as timeline client already has
+        // Queuing concept
+        TimelineClient timelineClient = getTimelineClient(appId);
+        if (timelineClient != null) {
+          timelineClient.putEntitiesAsync(entity);
+        } else {
+          LOG.error("Seems like client has been removed before the container"
+              + " metric could be published for " + container.getContainerId());
+        }
+      } catch (IOException | YarnException e) {
+        LOG.error("Failed to publish Container metrics for container "
+            + container.getContainerId(), e);
+      }
-  private void publishContainerCreatedEvent(ContainerEntity entity,
-      ContainerId containerId, Resource resource, Priority priority,
-      long timestamp) {
+  @SuppressWarnings("unchecked")
+  private void publishContainerCreatedEvent(ContainerEvent event) {
+    ContainerId containerId = event.getContainerID();
+    ContainerEntity entity = createContainerEntity(containerId);
+    Container container = context.getContainers().get(containerId);
+    Resource resource = container.getResource();
+
-        priority.toString());
+        container.getPriority().toString());
-    tEvent.setTimestamp(timestamp);
+    tEvent.setTimestamp(event.getTimestamp());
-    entity.setCreatedTime(timestamp);
-    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());
+    entity.setCreatedTime(event.getTimestamp());
+    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,
+        containerId.getApplicationAttemptId().getApplicationId()));
+  @SuppressWarnings("unchecked")
-    putEntity(entity, containerId.getApplicationAttemptId().getApplicationId());
+
+    dispatcher.getEventHandler().handle(new TimelinePublishEvent(entity,
+        containerId.getApplicationAttemptId().getApplicationId()));
+  }
+
+  private void publishContainerLocalizationEvent(
+      ContainerLocalizationEvent event, String eventType) {
+    Container container = event.getContainer();
+    ContainerId containerId = container.getContainerId();
+    TimelineEntity entity = createContainerEntity(containerId);
+
+    TimelineEvent tEvent = new TimelineEvent();
+    tEvent.setId(eventType);
+    tEvent.setTimestamp(event.getTimestamp());
+    entity.addEvent(tEvent);
+
+    ApplicationId appId =
+        container.getContainerId().getApplicationAttemptId().getApplicationId();
+    try {
+      // no need to put it as part of publisher as timeline client already has
+      // Queuing concept
+      TimelineClient timelineClient = getTimelineClient(appId);
+      if (timelineClient != null) {
+        timelineClient.putEntitiesAsync(entity);
+      } else {
+        LOG.error("Seems like client has been removed before the event could be"
+            + " published for " + container.getContainerId());
+      }
+    } catch (IOException | YarnException e) {
+      LOG.error("Failed to publish Container metrics for container "
+          + container.getContainerId(), e);
+    }
-      TimelineClient timelineClient =
-          context.getApplications().get(appId).getTimelineClient();
-      timelineClient.putEntities(entity);
+      TimelineClient timelineClient = getTimelineClient(appId);
+      if (timelineClient != null) {
+        timelineClient.putEntities(entity);
+      } else {
+        LOG.error("Seems like client has been removed before the entity "
+            + "could be published for " + entity);
+      }
-  @SuppressWarnings("unchecked")
-    case APPLICATION_CONTAINER_FINISHED:
-      dispatcher.getEventHandler().handle(event);
+      // TODO need to be handled in future,
+      // not sure to publish under which entity
+      break;
+    case APPLICATION_CONTAINER_FINISHED:
+      // this is actually used to publish the container Event
+      ApplicationContainerFinishedEvent evnt =
+          (ApplicationContainerFinishedEvent) event;
+      publishContainerFinishedEvent(evnt.getContainerStatus(),
+          event.getTimestamp());
-  @SuppressWarnings("unchecked")
-      dispatcher.getEventHandler().handle(event);
+      publishContainerCreatedEvent(event);
-  @SuppressWarnings("unchecked")
-    case INIT_CONTAINER_RESOURCES:
-      dispatcher.getEventHandler().handle(event);
+      publishContainerLocalizationEvent((ContainerLocalizationEvent) event,
+          ContainerMetricsConstants.LOCALIZATION_FINISHED_EVENT_TYPE);
-
+    case INIT_CONTAINER_RESOURCES:
+      publishContainerLocalizationEvent((ContainerLocalizationEvent) event,
+          ContainerMetricsConstants.LOCALIZATION_START_EVENT_TYPE);
+      break;
-  private class ApplicationEventHandler implements
-      EventHandler<ApplicationEvent> {
-    @Override
-    public void handle(ApplicationEvent event) {
-      switch (event.getType()) {
-      case APPLICATION_CONTAINER_FINISHED:
-        // this is actually used to publish the container Event
-        ApplicationContainerFinishedEvent evnt =
-            (ApplicationContainerFinishedEvent) event;
-        publishContainerFinishedEvent(evnt.getContainerStatus(),
-            event.getTimestamp());
-        break;
-      default:
-        LOG.error("Seems like event type is captured only in "
-            + "publishApplicationEvent method and not handled here");
-        break;
-      }
-    }
-  }
-
-  private class ContainerEventHandler implements EventHandler<ContainerEvent> {
-    @Override
-    public void handle(ContainerEvent event) {
-      ContainerId containerId = event.getContainerID();
-      Container container = context.getContainers().get(containerId);
-      long timestamp = event.getTimestamp();
-      ContainerEntity entity = createContainerEntity(containerId);
-
-      switch (event.getType()) {
-      case INIT_CONTAINER:
-        publishContainerCreatedEvent(entity, containerId,
-            container.getResource(), container.getPriority(), timestamp);
-        break;
-      default:
-        LOG.error("Seems like event type is captured only in "
-            + "publishContainerEvent method and not handled here");
-        break;
-      }
-    }
-  }
-
-  private static final class LocalizationEventDispatcher implements
-      EventHandler<LocalizationEvent> {
-    @Override
-    public void handle(LocalizationEvent event) {
-      switch (event.getType()) {
-      case INIT_CONTAINER_RESOURCES:
-      case CONTAINER_RESOURCES_LOCALIZED:
-        // TODO after priority based flush jira is finished
-        break;
-      default:
-        LOG.error("Seems like event type is captured only in "
-            + "publishLocalizationEvent method and not handled here");
-        break;
-      }
-    }
-  }
-
+
+  public void createTimelineClient(ApplicationId appId) {
+    if (!appToClientMap.containsKey(appId)) {
+      TimelineClient timelineClient =
+          TimelineClient.createTimelineClient(appId);
+      timelineClient.init(getConfig());
+      timelineClient.start();
+      appToClientMap.put(appId, timelineClient);
+    }
+  }
+
+  public void stopTimelineClient(ApplicationId appId) {
+    TimelineClient client = appToClientMap.remove(appId);
+    if (client != null) {
+      client.stop();
+    }
+  }
+
+  public void setTimelineServiceAddress(ApplicationId appId,
+      String collectorAddr) {
+    TimelineClient client = appToClientMap.get(appId);
+    if (client != null) {
+      client.setTimelineServiceAddress(collectorAddr);
+    }
+  }
+
+  private TimelineClient getTimelineClient(ApplicationId appId) {
+    return appToClientMap.get(appId);
+  }

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS59 MOV79 MOV79 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 INS8 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 MOV44 MOV8 UPD43 MOV43 UPD43 MOV43 INS43 INS42 INS21 UPD43 UPD42 INS60 INS60 MOV60 INS60 INS21 MOV21 UPD43 INS43 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS21 INS60 INS54 MOV49 UPD43 UPD42 INS25 INS43 INS42 MOV60 INS25 INS43 INS42 INS43 INS42 INS60 INS25 UPD42 MOV42 UPD43 UPD42 INS41 UPD42 UPD42 INS42 INS7 UPD42 INS43 INS59 INS43 INS59 MOV43 INS59 INS32 UPD42 INS42 INS43 INS59 MOV43 INS59 INS43 INS59 UPD43 MOV43 MOV59 INS32 INS32 INS32 INS43 INS59 INS8 INS12 INS10 MOV60 INS21 INS10 INS21 UPD42 INS38 INS8 INS42 UPD43 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 UPD42 INS32 INS42 INS14 INS60 INS54 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV32 INS32 INS32 MOV32 INS42 INS14 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS14 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS60 INS25 INS44 INS8 INS25 INS43 INS59 MOV32 INS32 INS32 INS32 MOV60 INS21 INS21 INS21 UPD42 UPD42 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS74 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 INS42 MOV32 UPD42 MOV42 INS42 INS43 INS42 MOV32 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 MOV43 INS59 INS27 INS8 INS8 INS84 INS42 INS21 INS43 INS27 INS8 INS8 INS42 INS42 MOV11 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 INS11 INS40 UPD42 MOV42 INS11 INS40 INS42 INS42 INS42 UPD43 INS32 INS32 INS32 UPD42 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS43 INS42 INS42 MOV32 INS60 INS25 INS44 INS8 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 MOV32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS43 INS43 INS32 INS42 INS32 INS42 INS33 MOV21 INS21 UPD42 UPD42 MOV42 INS42 INS43 INS42 INS43 INS42 UPD42 UPD42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 UPD42 INS42 INS43 INS59 INS27 INS8 INS8 INS84 INS42 INS21 UPD42 UPD42 INS42 INS42 INS32 MOV32 INS42 UPD42 MOV42 INS42 INS42 INS27 INS42 UPD42 MOV42 MOV42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 MOV21 INS21 INS43 INS43 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 UPD45 UPD45 INS32 INS42 INS42 INS45 INS45 INS42 UPD42 INS42 INS42 INS42 INS42 INS27 INS45 INS32 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL14 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL45 DEL79 DEL42 DEL32 DEL42 DEL42 DEL45 DEL79 DEL42 DEL32 DEL42 DEL32 DEL21 DEL83 DEL42 DEL74 DEL42 DEL78 DEL32 DEL42 DEL49 DEL10 DEL49 DEL21 DEL10 DEL50 DEL8 DEL31 DEL55 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL39 DEL42 DEL59 DEL60 DEL32 DEL42 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL49 DEL21 DEL10 DEL50 DEL8 DEL31 DEL55 DEL83 DEL83 DEL83 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL55 DEL45 DEL45 DEL27 DEL32 DEL42 DEL49 DEL42 DEL49 DEL10 DEL49 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL10 DEL50