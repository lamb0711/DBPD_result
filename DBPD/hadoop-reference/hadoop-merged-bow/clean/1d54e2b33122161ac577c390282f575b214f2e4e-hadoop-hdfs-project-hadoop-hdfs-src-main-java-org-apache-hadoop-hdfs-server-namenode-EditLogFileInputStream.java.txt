HDFS-3571. Allow EditLogFileInputStream to read from a remote URL. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355174 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.BufferedInputStream;
+import java.io.DataInputStream;
+import java.io.EOFException;
-import java.io.BufferedInputStream;
-import java.io.EOFException;
-import java.io.DataInputStream;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hdfs.server.namenode.TransferFsImage.HttpGetFailedException;
+import org.apache.hadoop.security.SecurityUtil;
+
- * reads edits from a local file.
+ * reads edits from a file. That file may be either on the local disk or
+ * accessible via a URL.
+@InterfaceAudience.Private
-  private final File file;
+  private final LogSource log;
-  private FileInputStream fStream = null;
+  private InputStream fStream = null;
-    this.file = name;
+    this(new FileLog(name), firstTxId, lastTxId, isInProgress);
+  }
+  
+  /**
+   * Open an EditLogInputStream for the given URL.
+   *
+   * @param url the url hosting the log
+   * @param startTxId the expected starting txid
+   * @param endTxId the expected ending txid
+   * @param inProgress whether the log is in-progress
+   * @return a stream from which edits may be read
+   */
+  public static EditLogInputStream fromUrl(URL url, long startTxId,
+      long endTxId, boolean inProgress) {
+    return new EditLogFileInputStream(new URLLog(url),
+        startTxId, endTxId, inProgress);
+  }
+  
+  private EditLogFileInputStream(LogSource log,
+      long firstTxId, long lastTxId,
+      boolean isInProgress) {
+      
+    this.log = log;
-      fStream = new FileInputStream(file);
+      fStream = log.getInputStream();
-    return file.getPath();
+    return log.getName();
-          long skipAmt = file.length() - tracker.getPos();
+          long skipAmt = log.length() - tracker.getPos();
-    return file.length();
+    return log.length();
+  
+  private interface LogSource {
+    public InputStream getInputStream() throws IOException;
+    public long length();
+    public String getName();
+  }
+  
+  private static class FileLog implements LogSource {
+    private final File file;
+    
+    public FileLog(File file) {
+      this.file = file;
+    }
+
+    @Override
+    public InputStream getInputStream() throws IOException {
+      return new FileInputStream(file);
+    }
+
+    @Override
+    public long length() {
+      return file.length();
+    }
+
+    @Override
+    public String getName() {
+      return file.getPath();
+    }
+  }
+
+  private static class URLLog implements LogSource {
+    private final URL url;
+    private long advertisedSize = -1;
+
+    private final static String CONTENT_LENGTH = "Content-Length";
+
+    public URLLog(URL url) {
+      this.url = url;
+    }
+
+    @Override
+    public InputStream getInputStream() throws IOException {
+      HttpURLConnection connection = (HttpURLConnection)
+          SecurityUtil.openSecureHttpConnection(url);
+      
+      if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
+        throw new HttpGetFailedException(
+            "Fetch of " + url +
+            " failed with status code " + connection.getResponseCode() +
+            "\nResponse message:\n" + connection.getResponseMessage(),
+            connection);
+      }
+
+      String contentLength = connection.getHeaderField(CONTENT_LENGTH);
+      if (contentLength != null) {
+        advertisedSize = Long.parseLong(contentLength);
+        if (advertisedSize <= 0) {
+          throw new IOException("Invalid " + CONTENT_LENGTH + " header: " +
+              contentLength);
+        }
+      } else {
+        throw new IOException(CONTENT_LENGTH + " header is not provided " +
+                              "by the server when trying to fetch " + url);
+      }
+
+      return connection.getInputStream();
+    }
+
+    @Override
+    public long length() {
+      Preconditions.checkState(advertisedSize != -1,
+          "must get input stream before length is available");
+      return advertisedSize;
+    }
+
+    @Override
+    public String getName() {
+      return url.toString();
+    }
+  }
+  

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS78 INS23 INS31 INS31 INS31 INS31 INS55 INS55 INS55 INS40 INS83 INS83 INS43 INS59 UPD43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS44 MOV8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 MOV43 INS8 INS83 INS42 INS31 INS31 INS31 INS83 INS83 INS42 INS43 MOV23 INS31 INS31 MOV31 MOV31 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 UPD66 INS66 INS42 INS42 UPD42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS41 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS42 INS42 INS41 INS42 INS41 INS83 INS43 INS42 INS43 INS83 INS39 INS42 INS83 INS43 INS42 INS42 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS14 INS42 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS14 INS42 INS7 INS32 INS32 INS42 INS42 INS42 INS43 INS42 MOV21 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS38 INS42 INS42 INS45 INS43 INS42 INS21 INS42 INS42 INS42 INS60 INS25 INS60 INS25 INS41 INS42 INS21 INS41 INS42 INS42 INS41 INS43 INS42 INS43 INS14 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS34 INS42 INS7 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS42 INS32 INS42 INS42 INS43 INS42 INS52 INS42 UPD42 INS22 INS42 INS42 INS42 INS11 INS32 INS40 INS53 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS53 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS32 INS52 INS42 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS27 INS8 INS14 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS34 INS53 INS43 INS27 INS34 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS45 INS42 UPD42