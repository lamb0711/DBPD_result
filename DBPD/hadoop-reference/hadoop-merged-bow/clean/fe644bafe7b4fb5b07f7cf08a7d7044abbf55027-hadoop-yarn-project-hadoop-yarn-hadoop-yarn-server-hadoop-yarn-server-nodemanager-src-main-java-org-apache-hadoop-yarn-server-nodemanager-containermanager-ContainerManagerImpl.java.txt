YARN-5609. Expose upgrade and restart API in ContainerManagementProtocol. Contributed by Arun Suresh

+import org.apache.hadoop.yarn.api.protocolrecords.CommitResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.ReInitializeContainerRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.ReInitializeContainerResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.RestartContainerResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.RollbackResponse;
-    Container container = preUpgradeOrLocalizeCheck(containerId,
+    Container container = preReInitializeOrLocalizeCheck(containerId,
+  @Override
+  public ReInitializeContainerResponse reInitializeContainer(
+      ReInitializeContainerRequest request) throws YarnException, IOException {
+    reInitializeContainer(request.getContainerId(),
+        request.getContainerLaunchContext(), request.getAutoCommit());
+    return ReInitializeContainerResponse.newInstance();
+  }
+
+  @Override
+  public RestartContainerResponse restartContainer(ContainerId containerId)
+      throws YarnException, IOException {
+    reInitializeContainer(containerId, null, true);
+    return RestartContainerResponse.newInstance();
+  }
+
-    Container container = preUpgradeOrLocalizeCheck(containerId,
+    Container container = preReInitializeOrLocalizeCheck(containerId,
-      resourceSet.addResources(reInitLaunchContext.getLocalResources());
+      if (reInitLaunchContext != null) {
+        resourceSet.addResources(reInitLaunchContext.getLocalResources());
+      }
+   * @return Rollback Response.
-  public void rollbackReInitialization(ContainerId containerId)
+  @Override
+  public RollbackResponse rollbackLastReInitialization(ContainerId containerId)
-    Container container = preUpgradeOrLocalizeCheck(containerId,
+    Container container = preReInitializeOrLocalizeCheck(containerId,
+      container.setIsReInitializing(true);
+    return RollbackResponse.newInstance();
+   * @return Commit Response.
-  public void commitReInitialization(ContainerId containerId)
+  @Override
+  public CommitResponse commitLastReInitialization(ContainerId containerId)
-    Container container = preUpgradeOrLocalizeCheck(containerId,
+    Container container = preReInitializeOrLocalizeCheck(containerId,
+    return CommitResponse.newInstance();
-  private Container preUpgradeOrLocalizeCheck(ContainerId containerId,
+  private Container preReInitializeOrLocalizeCheck(ContainerId containerId,
+    UserGroupInformation remoteUgi = getRemoteUgi();
+    NMTokenIdentifier nmTokenIdentifier = selectNMTokenIdentifier(remoteUgi);
+    authorizeUser(remoteUgi, nmTokenIdentifier);
+    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId()
+        .equals(containerId.getApplicationAttemptId().getApplicationId())) {
+      throw new YarnException("ApplicationMaster not autorized to perform " +
+          "["+ op + "] on Container [" + containerId + "]!!");
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS43 UPD42 INS78 INS43 UPD42 UPD42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS41 INS65 INS42 INS42 INS41 INS65 INS42 INS42 INS41 INS60 INS60 INS21 INS25 INS42 INS32 INS32 INS42 INS32 INS32 INS43 INS66 INS32 INS66 MOV43 INS32 INS43 INS59 INS43 INS59 INS32 INS38 INS8 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS9 INS42 INS42 INS42 INS25 MOV42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS53 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 INS8 UPD42 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 INS32 INS14 INS42 INS33 MOV21 INS42 INS42 INS9 INS32 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS45 DEL39 DEL39