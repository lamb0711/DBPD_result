HDFS-15003. RBF: Make Router support storage type quota. Contributed by Jinglun.

+import org.apache.hadoop.fs.StorageType;
+import static org.apache.hadoop.hdfs.server.federation.router.Quota.eachByStorageType;
+import static org.apache.hadoop.hdfs.server.federation.router.Quota.orByStorageType;
+import static org.apache.hadoop.hdfs.server.federation.router.Quota.andByStorageType;
-          {"-add", "-update", "-rm", "-ls", "-getDestination",
-              "-setQuota", "-clrQuota",
+          {"-add", "-update", "-rm", "-ls", "-getDestination", "-setQuota",
+              "-setStorageTypeQuota", "-clrQuota", "-clrStorageTypeQuota",
+    } else if (cmd.equals("-setStorageTypeQuota")) {
+      return "\t[-setStorageTypeQuota <path> -storageType <storage type> "
+          + "<quota in bytes or quota size string>]";
+    } else if (cmd.equals("-clrStorageTypeQuota")) {
+      return "\t[-clrStorageTypeQuota <path>]";
+    } else if ("-setStorageTypeQuota".equals(cmd)) {
+      if (argv.length < 5) {
+        return false;
+      }
+    } else if ("-clrStorageTypeQuota".equals(cmd)) {
+      if (argv.length < 2) {
+        return false;
+      }
+      } else if ("-setStorageTypeQuota".equals(cmd)) {
+        if (setStorageTypeQuota(argv, i)) {
+          System.out.println(
+              "Successfully set storage type quota for mount point " + argv[i]);
+        }
+      } else if ("-clrStorageTypeQuota".equals(cmd)) {
+        while (i < argv.length) {
+          if (clrStorageTypeQuota(argv[i])) {
+            System.out.println("Successfully clear storage type quota for mount"
+                + " point " + argv[i]);
+            i++;
+          }
+        }
+   * Set storage type quota for a mount table entry.
+   *
+   * @param parameters Parameters of the quota.
+   * @param i Index in the parameters.
+   */
+  private boolean setStorageTypeQuota(String[] parameters, int i)
+      throws IOException {
+    long[] typeQuota = new long[StorageType.values().length];
+    eachByStorageType(
+        t -> typeQuota[t.ordinal()] = HdfsConstants.QUOTA_DONT_SET);
+
+    String mount = parameters[i++];
+    if (parameters[i].equals("-storageType")) {
+      i++;
+      StorageType type = StorageType.parseStorageType(parameters[i++]);
+      typeQuota[type.ordinal()] = Long.parseLong(parameters[i]);
+    } else {
+      throw new IllegalArgumentException("Invalid argument : " + parameters[i]);
+    }
+
+    if (orByStorageType(t -> typeQuota[t.ordinal()] <= 0)) {
+      throw new IllegalArgumentException(
+          "Input quota value should be a positive number.");
+    }
+
+    if (andByStorageType(
+        t -> typeQuota[t.ordinal()] == HdfsConstants.QUOTA_DONT_SET)) {
+      throw new IllegalArgumentException(
+          "Must specify at least one of -nsQuota and -ssQuota.");
+    }
+
+    return updateStorageTypeQuota(mount, typeQuota);
+  }
+
+  /**
+   * Clear storage type quota of the mount point.
+   *
+   * @param mount Mount table to clear
+   * @return If the quota was cleared.
+   * @throws IOException Error clearing the mount point.
+   */
+  private boolean clrStorageTypeQuota(String mount) throws IOException {
+    long[] typeQuota = new long[StorageType.values().length];
+    eachByStorageType(t -> typeQuota[t.ordinal()] = HdfsConstants.QUOTA_RESET);
+    return updateStorageTypeQuota(mount, typeQuota);
+  }
+
+  /**
+   * Update storage type quota of specified mount table.
+   *
+   * @param mount Specified mount table to update.
+   * @param typeQuota Storage type quota.
+   * @return If the quota was updated.
+   * @throws IOException Error updating quota.
+   */
+  private boolean updateStorageTypeQuota(String mount, long[] typeQuota)
+      throws IOException {
+    // Get existing entry
+    MountTableManager mountTable = client.getMountTableManager();
+    GetMountTableEntriesRequest getRequest = GetMountTableEntriesRequest
+        .newInstance(mount);
+    GetMountTableEntriesResponse getResponse = mountTable
+        .getMountTableEntries(getRequest);
+    List<MountTable> results = getResponse.getEntries();
+    MountTable existingEntry = null;
+    for (MountTable result : results) {
+      if (mount.equals(result.getSourcePath())) {
+        existingEntry = result;
+        break;
+      }
+    }
+
+    if (existingEntry == null) {
+      throw new IOException(mount + " doesn't exist in mount table.");
+    } else {
+      final RouterQuotaUsage quotaUsage = existingEntry.getQuota();
+      long[] typeCount = new long[StorageType.values().length];
+      eachByStorageType(
+          t -> typeCount[t.ordinal()] = quotaUsage.getTypeQuota(t));
+      // If all storage type quota were reset, clear the storage type quota.
+      if (andByStorageType(
+          t -> typeQuota[t.ordinal()] == HdfsConstants.QUOTA_RESET)) {
+        eachByStorageType(t -> typeCount[t.ordinal()] =
+            RouterQuotaUsage.QUOTA_USAGE_COUNT_DEFAULT);
+      } else {
+        // If nsQuota or ssQuota was unset, use the value in mount table.
+        eachByStorageType(t -> {
+          if (typeQuota[t.ordinal()] == HdfsConstants.QUOTA_DONT_SET) {
+            typeQuota[t.ordinal()] = quotaUsage.getTypeQuota(t);
+          }
+        });
+      }
+
+      RouterQuotaUsage updatedQuota = new RouterQuotaUsage.Builder()
+          .typeQuota(typeQuota).typeConsumed(typeCount).build();
+      existingEntry.setQuota(updatedQuota);
+    }
+
+    UpdateMountTableEntryRequest updateRequest =
+        UpdateMountTableEntryRequest.newInstance(existingEntry);
+    UpdateMountTableEntryResponse updateResponse = mountTable
+        .updateMountTableEntry(updateRequest);
+    return updateResponse.getStatus();
+  }
+
+  /**

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS5 INS42 INS39 INS42 INS42 INS60 INS21 INS60 INS25 INS25 INS25 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS70 INS25 INS60 INS60 INS41 INS66 INS42 INS66 INS42 INS66 INS43 INS85 INS5 INS59 INS32 INS43 INS59 INS32 INS8 INS8 INS32 INS8 INS32 INS8 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS5 INS59 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS39 INS85 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS8 INS43 INS59 INS43 INS59 INS32 INS42 INS39 INS85 INS42 INS3 INS42 INS86 INS42 INS42 INS2 INS2 INS42 INS45 INS21 INS60 INS21 INS53 INS42 INS86 INS53 INS42 INS86 INS53 INS42 INS42 INS42 INS39 INS85 INS42 INS3 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS33 INS43 INS42 INS25 INS42 INS33 INS53 INS60 INS60 INS21 INS25 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS8 INS5 INS22 INS59 INS7 INS42 INS37 INS42 INS42 INS37 INS43 INS59 INS7 INS14 INS59 INS27 INS14 INS59 INS27 INS14 INS5 INS22 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS14 INS83 INS43 INS59 INS5 INS59 INS32 INS32 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS25 MOV8 INS39 INS85 INS32 INS42 INS42 INS2 INS40 INS42 INS42 INS42 INS42 INS32 INS2 INS32 INS43 INS27 INS42 INS2 INS34 INS43 INS45 INS42 INS2 INS40 INS43 INS45 INS39 INS85 INS32 INS42 INS42 INS2 INS40 INS42 INS42 INS32 INS21 INS10 INS43 INS27 INS42 INS42 INS32 INS39 INS85 INS42 INS3 INS42 INS86 INS42 INS86 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS27 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS32 INS42 INS42 INS2 INS42 INS45 INS2 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS45 INS42 INS42 INS5 INS22 INS59 INS7 INS59 INS27 INS32 INS32 INS32 INS42 INS25 INS40 INS34 INS41 INS32 INS8 INS25 INS42 INS42 INS42 INS37 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS32 INS42 INS42 INS2 INS32 INS42 INS2 INS40 INS42 INS86 INS42 INS86 INS32 INS42 INS42 INS32 INS8 MOV25 INS9 INS45 INS42 INS42 INS25 MOV32 MOV8 MOV25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS59 INS7 INS59 INS8 INS14 INS42 INS42 INS42 INS42 INS45 INS41 INS25 INS27 INS8 INS32 INS25 INS42 INS42 INS42 INS42 INS42 INS2 INS40 INS42 INS25 INS43 INS27 INS32 INS8 MOV25 INS40 INS34 INS41 INS45 INS42 INS42 INS32 INS8 MOV25 INS42 INS32 INS27 INS8 INS40 INS45 INS45 INS42 INS42 INS45 INS41 INS9 INS45 INS42 INS42 INS25 INS25 INS42 INS42 INS2 INS40 INS21 INS45 INS32 INS8 INS32 INS8 MOV25 INS42 INS32 INS7 INS42 INS42 INS42 INS21 INS45 INS42 INS42 INS61 INS42 INS42 INS2 INS32 INS32 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS40 INS25 INS42 INS42 INS45 INS2 INS32 INS8 INS42 INS42 INS42 INS2 INS21 INS21 INS42 INS42 INS32 INS37 INS40 INS42 INS27 INS42 INS45 INS45 INS2 INS42 INS42