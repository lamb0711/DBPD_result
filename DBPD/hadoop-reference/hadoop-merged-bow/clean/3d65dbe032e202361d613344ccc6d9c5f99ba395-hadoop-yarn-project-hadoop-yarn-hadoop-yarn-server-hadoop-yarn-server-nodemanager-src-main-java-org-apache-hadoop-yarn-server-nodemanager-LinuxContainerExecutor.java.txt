YARN-5366. Improve signal handling and delete delay for Docker on Yarn.
           (Contributed by Shane Kumpf)

+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker.DockerCommandExecutor;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker.DockerRmCommand;
+import org.apache.hadoop.yarn.server.nodemanager.executor.ContainerReapContext;
+  /**
+   * Performs the tasks necessary to reap the container.
+   *
+   * @param ctx Encapsulates information necessary for reaping containers.
+   * @return true if the reaping was successful.
+   * @throws IOException if an error occurs while reaping the container.
+   */
+  @Override
+  public boolean reapContainer(ContainerReapContext ctx) throws IOException {
+    Container container = ctx.getContainer();
+    String user = ctx.getUser();
+    String runAsUser = getRunAsUser(user);
+    ContainerRuntimeContext runtimeContext = new ContainerRuntimeContext
+        .Builder(container)
+        .setExecutionAttribute(RUN_AS_USER, runAsUser)
+        .setExecutionAttribute(USER, user)
+        .build();
+    try {
+      linuxContainerRuntime.reapContainer(runtimeContext);
+    } catch (ContainerExecutionException e) {
+      int retCode = e.getExitCode();
+      if (retCode != 0) {
+        return false;
+      }
+      LOG.warn("Error in reaping container "
+          + container.getContainerId().toString() + " exit = " + retCode, e);
+      logOutput(e.getOutput());
+      throw new IOException("Error in reaping container "
+          + container.getContainerId().toString() + " exit = " + retCode, e);
+    }
+    return true;
+  }
+
+
+  /**
+   * Remove the docker container referenced in the context.
+   *
+   * @param containerId the containerId for the container.
+   */
+  public void removeDockerContainer(String containerId) {
+    try {
+      PrivilegedOperationExecutor privOpExecutor =
+          PrivilegedOperationExecutor.getInstance(super.getConf());
+      if (DockerCommandExecutor.isRemovable(
+          DockerCommandExecutor.getContainerStatus(containerId,
+              super.getConf(), privOpExecutor))) {
+        LOG.info("Removing Docker container : " + containerId);
+        DockerRmCommand dockerRmCommand = new DockerRmCommand(containerId);
+        DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,
+            null, super.getConf(), privOpExecutor, false);
+      }
+    } catch (ContainerExecutionException e) {
+      LOG.warn("Unable to remove docker container: " + containerId);
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS54 INS41 INS65 INS65 INS43 INS42 INS54 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS9 INS66 INS42 INS66 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS60 INS25 INS21 INS21 INS53 INS43 INS59 INS32 INS8 INS43 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS32 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS60 INS21 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS27 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS48 INS42 INS42 INS42 INS48 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS9 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS33 INS48 INS42 INS9 INS45 INS42 INS40 INS32 INS42 INS32 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42