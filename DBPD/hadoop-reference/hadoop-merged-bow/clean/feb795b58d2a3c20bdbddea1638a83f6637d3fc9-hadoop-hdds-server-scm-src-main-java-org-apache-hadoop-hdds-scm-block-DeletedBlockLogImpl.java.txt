HDDS-273. DeleteLog entries should be purged only after corresponding DNs commit the transaction. Contributed by Lokesh Jain.

+import org.apache.hadoop.hdds.protocol.DatanodeDetails;
+import org.apache.hadoop.hdds.protocol.proto
+    .StorageContainerDatanodeProtocolProtos.ContainerBlocksDeletionACKProto
+    .DeleteBlockTransactionResult;
+import org.apache.hadoop.hdds.scm.container.Mapping;
-import org.apache.hadoop.utils.MetadataKeyFilters.MetadataKeyFilter;
+import org.eclipse.jetty.util.ConcurrentHashSet;
-import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.UUID;
+import java.util.stream.Collectors;
+  private final Mapping containerManager;
-  private long lastReadTxID;
+  // Maps txId to set of DNs which are successful in committing the transaction
+  private Map<Long, Set<UUID>> transactionToDNsCommitMap;
-  public DeletedBlockLogImpl(Configuration conf) throws IOException {
+  public DeletedBlockLogImpl(Configuration conf, Mapping containerManager)
+      throws IOException {
+    this.containerManager = containerManager;
-    lastReadTxID = 0;
+
+    // transactionToDNsCommitMap is updated only when
+    // transaction is added to the log and when it is removed.
+
+    // maps transaction to dns which have committed it.
+    transactionToDNsCommitMap = new ConcurrentHashMap<>();
-  public List<DeletedBlocksTransaction> getTransactions(
-      int count) throws IOException {
-    List<DeletedBlocksTransaction> result = new ArrayList<>();
-    MetadataKeyFilter getNextTxID = (preKey, currentKey, nextKey)
-        -> Longs.fromByteArray(currentKey) > lastReadTxID;
-    MetadataKeyFilter avoidInvalidTxid = (preKey, currentKey, nextKey)
-        -> !Arrays.equals(LATEST_TXID, currentKey);
-    lock.lock();
-    try {
-      deletedStore.iterate(null, (key, value) -> {
-        if (getNextTxID.filterKey(null, key, null) &&
-            avoidInvalidTxid.filterKey(null, key, null)) {
-          DeletedBlocksTransaction block = DeletedBlocksTransaction
-              .parseFrom(value);
-          if (block.getCount() > -1 && block.getCount() <= maxRetry) {
-            result.add(block);
-          }
-        }
-        return result.size() < count;
-      });
-      // Scan the metadata from the beginning.
-      if (result.size() < count || result.size() < 1) {
-        lastReadTxID = 0;
-      } else {
-        lastReadTxID = result.get(result.size() - 1).getTxID();
-      }
-    } finally {
-      lock.unlock();
-    }
-    return result;
-  }
-
-  @Override
-   * @param txIDs - transaction IDs.
+   * @param transactionResults - transaction IDs.
+   * @param dnID - Id of Datanode which has acknowledged a delete block command.
-  public void commitTransactions(List<Long> txIDs) throws IOException {
+  public void commitTransactions(
+      List<DeleteBlockTransactionResult> transactionResults, UUID dnID) {
-      for (Long txID : txIDs) {
+      Set<UUID> dnsWithCommittedTxn;
+      for (DeleteBlockTransactionResult transactionResult : transactionResults) {
+        if (isTransactionFailed(transactionResult)) {
+          continue;
+        }
-          deletedStore.delete(Longs.toByteArray(txID));
-        } catch (IOException ex) {
-          LOG.warn("Cannot commit txID " + txID, ex);
+          long txID = transactionResult.getTxID();
+          // set of dns which have successfully committed transaction txId.
+          dnsWithCommittedTxn = transactionToDNsCommitMap.get(txID);
+          Long containerId = transactionResult.getContainerID();
+          if (dnsWithCommittedTxn == null || containerId == null) {
+            LOG.warn("Transaction txId={} commit by dnId={} failed."
+                + " Corresponding entry not found.", txID, dnID);
+            return;
+          }
+
+          dnsWithCommittedTxn.add(dnID);
+          Collection<DatanodeDetails> containerDnsDetails =
+              containerManager.getContainerWithPipeline(containerId)
+                  .getPipeline().getDatanodes().values();
+          // The delete entry can be safely removed from the log if all the
+          // corresponding nodes commit the txn.
+          if (dnsWithCommittedTxn.size() >= containerDnsDetails.size()) {
+            List<UUID> containerDns = containerDnsDetails.stream()
+                .map(dnDetails -> dnDetails.getUuid())
+                .collect(Collectors.toList());
+            if (dnsWithCommittedTxn.containsAll(containerDns)) {
+              transactionToDNsCommitMap.remove(txID);
+              LOG.debug("Purging txId={} from block deletion log", txID);
+              deletedStore.delete(Longs.toByteArray(txID));
+            }
+          }
+        } catch (IOException e) {
+          LOG.warn("Could not commit delete block transaction: " +
+              transactionResult.getTxID(), e);
+  private boolean isTransactionFailed(DeleteBlockTransactionResult result) {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug(
+          "Got block deletion ACK from datanode, TXIDs={}, " + "success={}",
+          result.getTxID(), result.getSuccess());
+    }
+    if (!result.getSuccess()) {
+      LOG.warn("Got failed ACK for TXID={}, prepare to resend the "
+          + "TX in next interval", result.getTxID());
+      return true;
+    }
+    return false;
+  }
+
-            transactions.addTransaction(block);
+            Set<UUID> dnsWithTransactionCommitted = transactionToDNsCommitMap
+                .putIfAbsent(block.getTxID(), new ConcurrentHashSet<>());
+            transactions.addTransaction(block, dnsWithTransactionCommitted);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS23 INS31 INS83 INS43 INS83 INS74 INS59 INS44 MOV21 MOV29 MOV78 INS83 INS39 UPD42 MOV42 MOV44 INS44 INS8 UPD83 UPD39 UPD42 INS44 INS8 INS42 UPD42 INS43 MOV43 INS74 INS42 INS43 INS42 INS21 INS65 UPD74 MOV74 UPD42 INS43 INS42 MOV21 INS54 INS43 INS42 INS25 INS25 INS41 INS42 UPD43 MOV43 UPD43 MOV43 INS42 INS7 UPD42 INS42 INS66 UPD43 UPD42 MOV42 INS8 MOV8 UPD42 MOV42 INS32 INS8 INS38 INS8 INS9 UPD42 UPD42 INS22 INS42 INS42 INS14 UPD42 MOV60 INS70 INS42 INS42 INS21 INS32 MOV21 INS41 INS52 INS42 INS74 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS9 INS43 UPD43 MOV43 INS43 INS42 INS43 INS42 INS25 INS54 INS42 INS42 INS27 INS32 INS32 INS32 INS42 UPD42 INS42 UPD42 MOV42 INS32 INS8 INS8 INS12 INS45 INS45 INS42 INS42 INS42 INS42 UPD45 INS45 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS18 INS60 INS21 INS60 INS25 INS21 MOV60 INS25 MOV44 INS8 INS39 INS59 INS7 MOV43 INS59 INS27 INS8 INS32 INS74 UPD27 MOV27 INS8 UPD42 MOV21 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS27 INS21 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 UPD42 MOV32 MOV32 INS60 INS25 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS42 INS33 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 MOV74 INS59 INS32 MOV8 UPD42 MOV42 UPD42 MOV42 UPD27 MOV27 UPD42 MOV42 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS45 INS60 INS45 INS45 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS32 UPD42 UPD42 INS74 INS59 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS86 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS43 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS74 INS43 INS42 DEL39 DEL42 DEL34 DEL42 DEL78 DEL83 DEL74 DEL43 DEL43 DEL42 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL32 DEL42 DEL27 DEL86 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL38 DEL86 DEL59 DEL60 DEL32 DEL21 DEL42 DEL42 DEL33 DEL42 DEL59 DEL42 DEL59 DEL33 DEL42 DEL33 DEL32 DEL33 DEL33 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL32 DEL42 DEL27 DEL41 DEL8 DEL86 DEL32 DEL21 DEL32 DEL42 DEL27 DEL32 DEL34 DEL27 DEL27 DEL42 DEL34 DEL7 DEL21 DEL8 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL74 DEL14 DEL59 DEL43 DEL34 DEL38 DEL27 DEL42 DEL27 DEL34 DEL42 DEL32 DEL32 DEL7 DEL42 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL54 DEL8