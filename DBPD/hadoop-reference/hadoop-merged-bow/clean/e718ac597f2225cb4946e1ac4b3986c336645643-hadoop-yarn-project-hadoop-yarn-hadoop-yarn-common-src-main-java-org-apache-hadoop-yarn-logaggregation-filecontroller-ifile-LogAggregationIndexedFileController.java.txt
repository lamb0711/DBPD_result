Revert "YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)"

This reverts commit 4d53ef7eefb14661d824924e503a910de1ae997f.

-    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils
-        .getRemoteNodeFileDir(conf, appId, logRequest.getAppOwner(),
+    List<FileStatus> nodeFiles = LogAggregationUtils
+        .getRemoteNodeFileList(conf, appId, logRequest.getAppOwner(),
-    if (!nodeFiles.hasNext()) {
+    if (nodeFiles.isEmpty()) {
-    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);
-    if (allFiles.isEmpty()) {
-      throw new IOException("There is no available log fils for "
-          + "application:" + appId);
-    }
-    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);
+    Map<String, Long> checkSumFiles = parseCheckSumFiles(nodeFiles);
-        allFiles, nodeIdStr, appId);
+        nodeFiles, nodeIdStr, appId);
-    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils
-        .getRemoteNodeFileDir(conf, appId, appOwner, this.remoteRootLogDir,
+    List<FileStatus> nodeFiles = LogAggregationUtils
+        .getRemoteNodeFileList(conf, appId, appOwner, this.remoteRootLogDir,
-    if (!nodeFiles.hasNext()) {
+    if (nodeFiles.isEmpty()) {
-    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);
-    if (allFiles.isEmpty()) {
-      throw new IOException("There is no available log fils for "
-          + "application:" + appId);
-    }
-    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);
+    Map<String, Long> checkSumFiles = parseCheckSumFiles(nodeFiles);
-        allFiles, nodeIdStr, appId);
+        nodeFiles, nodeIdStr, appId);
-    for (FileStatus thisNodeFile : nodeFiles) {
-      String nodeName = thisNodeFile.getPath().getName();
+    List<FileStatus> files = new ArrayList<>(nodeFiles);
+    for (FileStatus file : files) {
+      String nodeName = file.getPath().getName();
-        listOfFiles.add(thisNodeFile);
+        if (nodeName.equals(appId + ".har")) {
+          Path p = new Path("har:///" + file.getPath().toUri().getRawPath());
+          files = Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));
+          continue;
+        }
+        listOfFiles.add(file);
-  private List<FileStatus> getAllNodeFiles(
-      RemoteIterator<FileStatus> nodeFiles, ApplicationId appId)
-      throws IOException {
-    List<FileStatus> listOfFiles = new ArrayList<>();
-    while (nodeFiles != null && nodeFiles.hasNext()) {
-      FileStatus thisNodeFile = nodeFiles.next();
-      String nodeName = thisNodeFile.getPath().getName();
-      if (nodeName.equals(appId + ".har")) {
-        Path p = new Path("har:///"
-            + thisNodeFile.getPath().toUri().getRawPath());
-        nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);
-        continue;
-      }
-      listOfFiles.add(thisNodeFile);
-    }
-    return listOfFiles;
-  }
-

INS60 MOV74 INS32 MOV74 UPD74 INS32 MOV74 MOV74 INS59 UPD42 MOV43 MOV42 UPD42 MOV42 UPD43 MOV43 MOV42 UPD42 MOV42 INS42 INS14 UPD42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS74 INS42 INS43 INS25 INS42 MOV32 INS8 UPD42 INS60 INS21 INS18 UPD42 MOV43 INS59 INS7 INS42 INS14 INS42 INS32 MOV43 INS27 INS42 INS42 INS32 INS45 INS32 MOV32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31