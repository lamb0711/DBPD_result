HDFS-14617. Improve fsimage load time by writing sub-sections to the fsimage index (#1028). Contributed by  Stephen O'Donnell.

Reviewed-by: He Xiaoqiao <hexiaoqiao@apache.org>
+import java.util.Iterator;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+    private File filename;
+
+      filename = file;
+    /**
+     * Given a FSImage FileSummary.section, return a LimitInput stream set to
+     * the starting position of the section and limited to the section length.
+     * @param section The FileSummary.Section containing the offset and length
+     * @param compressionCodec The compression codec in use, if any
+     * @return An InputStream for the given section
+     * @throws IOException
+     */
+    public InputStream getInputStreamForSection(FileSummary.Section section,
+                                                String compressionCodec)
+        throws IOException {
+      FileInputStream fin = new FileInputStream(filename);
+      FileChannel channel = fin.getChannel();
+      channel.position(section.getOffset());
+      InputStream in = new BufferedInputStream(new LimitInputStream(fin,
+          section.getLength()));
+
+      in = FSImageUtil.wrapInputStreamForCompression(conf,
+          compressionCodec, in);
+      return in;
+    }
+
+    /**
+     * Takes an ArrayList of Section's and removes all Section's whose
+     * name ends in _SUB, indicating they are sub-sections. The original
+     * array list is modified and a new list of the removed Section's is
+     * returned.
+     * @param sections Array List containing all Sections and Sub Sections
+     *                 in the image.
+     * @return ArrayList of the sections removed, or an empty list if none are
+     *         removed.
+     */
+    private ArrayList<FileSummary.Section> getAndRemoveSubSections(
+        ArrayList<FileSummary.Section> sections) {
+      ArrayList<FileSummary.Section> subSections = new ArrayList<>();
+      Iterator<FileSummary.Section> iter = sections.iterator();
+      while (iter.hasNext()) {
+        FileSummary.Section s = iter.next();
+        String name = s.getName();
+        if (name.matches(".*_SUB$")) {
+          subSections.add(s);
+          iter.remove();
+        }
+      }
+      return subSections;
+    }
+
+    /**
+     * Given an ArrayList of Section's, return all Section's with the given
+     * name, or an empty list if none are found.
+     * @param sections ArrayList of the Section's to search though
+     * @param name The name of the Sections to search for
+     * @return ArrayList of the sections matching the given name
+     */
+    private ArrayList<FileSummary.Section> getSubSectionsOfName(
+        ArrayList<FileSummary.Section> sections, SectionName name) {
+      ArrayList<FileSummary.Section> subSec = new ArrayList<>();
+      for (FileSummary.Section s : sections) {
+        String n = s.getName();
+        SectionName sectionName = SectionName.fromString(n);
+        if (sectionName == name) {
+          subSec.add(s);
+        }
+      }
+      return subSec;
+    }
+
+    /**
+     * Checks the number of threads configured for parallel loading and
+     * return an ExecutorService with configured number of threads. If the
+     * thread count is set to less than 1, it will be reset to the default
+     * value
+     * @return ExecutorServie with the correct number of threads
+     */
+    private ExecutorService getParallelExecutorService() {
+      int threads = conf.getInt(DFSConfigKeys.DFS_IMAGE_PARALLEL_THREADS_KEY,
+          DFSConfigKeys.DFS_IMAGE_PARALLEL_THREADS_DEFAULT);
+      if (threads < 1) {
+        LOG.warn("Parallel is enabled and {} is set to {}. Setting to the " +
+            "default value {}", DFSConfigKeys.DFS_IMAGE_PARALLEL_THREADS_KEY,
+            threads, DFSConfigKeys.DFS_IMAGE_PARALLEL_THREADS_DEFAULT);
+        threads = DFSConfigKeys.DFS_IMAGE_PARALLEL_THREADS_DEFAULT;
+      }
+      ExecutorService executorService = Executors.newFixedThreadPool(
+          threads);
+      LOG.info("The fsimage will be loaded in parallel using {} threads",
+          threads);
+      return executorService;
+    }
+
+      boolean loadInParallel = enableParallelSaveAndLoad(conf);
+
+      ExecutorService executorService = null;
+      ArrayList<FileSummary.Section> subSections =
+          getAndRemoveSubSections(sections);
+      if (loadInParallel) {
+        executorService = getParallelExecutorService();
+      }
+
+        ArrayList<FileSummary.Section> stageSubSections;
-          inodeLoader.loadINodeSection(in, prog, currentStep);
+          stageSubSections = getSubSectionsOfName(
+              subSections, SectionName.INODE_SUB);
+          if (loadInParallel && (stageSubSections.size() > 0)) {
+            inodeLoader.loadINodeSectionInParallel(executorService,
+                stageSubSections, summary.getCodec(), prog, currentStep);
+          } else {
+            inodeLoader.loadINodeSection(in, prog, currentStep);
+          }
-          inodeLoader.loadINodeDirectorySection(in);
+          stageSubSections = getSubSectionsOfName(
+              subSections, SectionName.INODE_DIR_SUB);
+          if (loadInParallel && stageSubSections.size() > 0) {
+            inodeLoader.loadINodeDirectorySectionInParallel(executorService,
+                stageSubSections, summary.getCodec());
+          } else {
+            inodeLoader.loadINodeDirectorySection(in);
+          }
+      if (executorService != null) {
+        executorService.shutdown();
+      }
+  private static boolean enableParallelSaveAndLoad(Configuration conf) {
+    boolean loadInParallel =
+        conf.getBoolean(DFSConfigKeys.DFS_IMAGE_PARALLEL_LOAD_KEY,
+            DFSConfigKeys.DFS_IMAGE_PARALLEL_LOAD_DEFAULT);
+    boolean compressionEnabled = conf.getBoolean(
+        DFSConfigKeys.DFS_IMAGE_COMPRESS_KEY,
+        DFSConfigKeys.DFS_IMAGE_COMPRESS_DEFAULT);
+
+    if (loadInParallel) {
+      if (compressionEnabled) {
+        LOG.warn("Parallel Image loading and saving is not supported when {}" +
+                " is set to true. Parallel will be disabled.",
+            DFSConfigKeys.DFS_IMAGE_COMPRESS_KEY);
+        loadInParallel = false;
+      }
+    }
+    return loadInParallel;
+  }
+
+    private boolean writeSubSections = false;
+    private int inodesPerSubSection = Integer.MAX_VALUE;
+    private long subSectionOffset = currentOffset;
+    private Configuration conf;
-    Saver(SaveNamespaceContext context) {
+    Saver(SaveNamespaceContext context, Configuration conf) {
+      this.conf = conf;
+    public int getInodesPerSubSection() {
+      return inodesPerSubSection;
+    }
+
+    public boolean shouldWriteSubSections() {
+      return writeSubSections;
+    }
+
+    /**
+     * Commit the length and offset of a fsimage section to the summary index,
+     * including the sub section, which will be committed before the section is
+     * committed.
+     * @param summary The image summary object
+     * @param name The name of the section to commit
+     * @param subSectionName The name of the sub-section to commit
+     * @throws IOException
+     */
+    public void commitSectionAndSubSection(FileSummary.Builder summary,
+        SectionName name, SectionName subSectionName) throws IOException {
+      commitSubSection(summary, subSectionName);
+      commitSection(summary, name);
+    }
+
+      subSectionOffset = currentOffset;
+    }
+
+    /**
+     * Commit the length and offset of a fsimage sub-section to the summary
+     * index.
+     * @param summary The image summary object
+     * @param name The name of the sub-section to commit
+     * @throws IOException
+     */
+    public void commitSubSection(FileSummary.Builder summary, SectionName name)
+        throws IOException {
+      if (!writeSubSections) {
+        return;
+      }
+
+      LOG.debug("Saving a subsection for {}", name.toString());
+      // The output stream must be flushed before the length is obtained
+      // as the flush can move the length forward.
+      sectionOutputStream.flush();
+      long length = fileChannel.position() - subSectionOffset;
+      if (length == 0) {
+        LOG.warn("The requested section for {} is empty. It will not be " +
+            "output to the image", name.toString());
+        return;
+      }
+      summary.addSections(FileSummary.Section.newBuilder().setName(name.name)
+          .setLength(length).setOffset(subSectionOffset));
+      subSectionOffset += length;
+      enableSubSectionsIfRequired();
+    private void enableSubSectionsIfRequired() {
+      boolean parallelEnabled = enableParallelSaveAndLoad(conf);
+      int inodeThreshold = conf.getInt(
+          DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_KEY,
+          DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT);
+      int targetSections = conf.getInt(
+          DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_KEY,
+          DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT);
+
+      if (parallelEnabled) {
+        if (targetSections <= 0) {
+          LOG.warn("{} is set to {}. It must be greater than zero. Setting to" +
+              " default of {}",
+              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_KEY,
+              targetSections,
+              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT);
+          targetSections =
+              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT;
+        }
+        if (inodeThreshold <= 0) {
+          LOG.warn("{} is set to {}. It must be greater than zero. Setting to" +
+                  " default of {}",
+              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_KEY,
+              inodeThreshold,
+              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT);
+          inodeThreshold =
+              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT;
+        }
+        int inodeCount = context.getSourceNamesystem().dir.getInodeMapSize();
+        // Only enable parallel sections if there are enough inodes
+        if (inodeCount >= inodeThreshold) {
+          writeSubSections = true;
+          // Calculate the inodes per section rounded up to the nearest int
+          inodesPerSubSection = (inodeCount + targetSections - 1) /
+              targetSections;
+        }
+      } else {
+        writeSubSections = false;
+      }
+    }
+
+    INODE_SUB("INODE_SUB"),
+    INODE_REFERENCE_SUB("INODE_REFERENCE_SUB"),
+    INODE_DIR_SUB("INODE_DIR_SUB"),
+    SNAPSHOT_DIFF_SUB("SNAPSHOT_DIFF_SUB"),

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS72 INS72 INS72 INS72 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS43 INS42 INS60 INS60 INS25 INS41 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS44 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS8 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS21 INS60 INS21 INS41 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS60 INS60 INS61 INS41 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS43 INS42 INS60 INS70 INS41 INS65 INS65 INS42 INS60 INS25 INS60 INS21 INS41 INS60 INS60 INS60 INS25 INS25 INS42 INS39 INS59 INS39 INS59 INS42 INS8 INS42 INS42 INS9 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS41 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS60 INS25 INS21 INS21 INS21 INS60 INS60 INS60 INS25 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS40 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS7 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS40 INS43 INS43 INS74 INS59 INS74 INS59 INS32 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS40 INS43 INS43 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS66 INS66 INS66 INS66 INS66 INS39 INS59 INS27 INS8 INS43 INS59 INS32 INS42 INS39 INS59 INS43 INS59 INS74 INS59 INS42 INS8 INS27 INS8 INS42 INS32 INS42 INS32 INS25 INS42 INS7 INS42 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS40 INS42 INS42 INS32 INS32 INS7 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS40 INS42 INS38 INS8 INS32 INS32 INS39 INS59 INS27 INS8 INS32 INS7 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS40 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS42 INS40 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS60 INS25 INS42 INS32 INS42 INS34 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS43 INS42 INS32 INS21 INS60 INS42 INS33 INS21 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS8 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS27 INS42 INS34 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS25 INS25 INS60 INS25 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS74 INS42 INS40 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS40 INS74 INS40 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS40 INS40 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS7 INS74 INS59 INS21 INS25 INS32 INS21 INS21 INS52 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS27 INS8 INS27 INS8 INS39 INS59 INS27 INS8 INS7 INS42 INS42 INS43 INS42 INS32 INS43 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS21 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS27 INS40 INS42 INS40 INS42 INS40 INS42 INS32 INS43 INS43 INS42 INS21 INS25 INS7 INS27 INS8 INS8 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS42 INS34 INS21 INS21 INS42 INS34 INS21 INS21 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS40 INS7 INS27 INS8 INS8 INS42 INS32 INS42 INS27 INS21 MOV21 INS42 INS42 INS27 INS40 INS42 INS9 INS45 INS45 INS42 INS42 INS32 INS42 INS40 INS32 INS7 INS32 INS7 INS22 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS36 INS21 MOV21 INS42 INS42 INS40 INS32 INS34 INS32 INS45 INS45 INS40 INS42 INS42 INS42 INS27 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS27 INS40 INS42 INS40 INS42 INS40 INS32 INS42 INS42 INS9 INS42 INS27 INS42 INS42 INS40 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS45 INS45 INS45 INS42 INS42 INS36 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS34 INS42 INS42