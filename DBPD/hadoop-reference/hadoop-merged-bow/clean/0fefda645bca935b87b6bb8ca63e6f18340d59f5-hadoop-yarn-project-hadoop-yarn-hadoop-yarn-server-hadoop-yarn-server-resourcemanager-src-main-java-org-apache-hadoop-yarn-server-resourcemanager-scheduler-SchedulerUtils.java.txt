YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.SchedulingMode;
-import com.google.common.collect.Sets;
-
-      resReq.setNodeLabelExpression(labelExp);
+    // If labelExp still equals to null, set it to be NO_LABEL
+    resReq
+        .setNodeLabelExpression(labelExp == null ? RMNodeLabelsManager.NO_LABEL
+            : labelExp);
+    
-  public static boolean checkQueueAccessToNode(Set<String> queueLabels,
-      Set<String> nodeLabels) {
-    // if queue's label is *, it can access any node
-    if (queueLabels != null && queueLabels.contains(RMNodeLabelsManager.ANY)) {
-      return true;
-    }
-    // any queue can access to a node without label
-    if (nodeLabels == null || nodeLabels.isEmpty()) {
-      return true;
-    }
-    // a queue can access to a node only if it contains any label of the node
-    if (queueLabels != null
-        && Sets.intersection(queueLabels, nodeLabels).size() > 0) {
-      return true;
-    }
-    // sorry, you cannot access
-    return false;
-  }
-  
-  
-  public static boolean checkNodeLabelExpression(Set<String> nodeLabels,
-      String labelExpression) {
-    // empty label expression can only allocate on node with empty labels
-    if (labelExpression == null || labelExpression.trim().isEmpty()) {
-      if (!nodeLabels.isEmpty()) {
-        return false;
-      }
-    }
-
-    if (labelExpression != null) {
-      for (String str : labelExpression.split("&&")) {
-        if (!str.trim().isEmpty()
-            && (nodeLabels == null || !nodeLabels.contains(str.trim()))) {
-          return false;
-        }
-      }
-    }
-    return true;
-  }
+  
+  public static boolean checkResourceRequestMatchingNodePartition(
+      ResourceRequest offswitchResourceRequest, String nodePartition,
+      SchedulingMode schedulingMode) {
+    // We will only look at node label = nodeLabelToLookAt according to
+    // schedulingMode and partition of node.
+    String nodePartitionToLookAt = null;
+    if (schedulingMode == SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY) {
+      nodePartitionToLookAt = nodePartition;
+    } else {
+      nodePartitionToLookAt = RMNodeLabelsManager.NO_LABEL;
+    }
+    
+    String askedNodePartition = offswitchResourceRequest.getNodeLabelExpression();
+    if (null == askedNodePartition) {
+      askedNodePartition = RMNodeLabelsManager.NO_LABEL;
+    }
+    return askedNodePartition.equals(nodePartitionToLookAt);
+  }
+  
+  private static boolean hasPendingResourceRequest(ResourceCalculator rc,
+      ResourceUsage usage, String partitionToLookAt, Resource cluster) {
+    if (Resources.greaterThan(rc, cluster,
+        usage.getPending(partitionToLookAt), Resources.none())) {
+      return true;
+    }
+    return false;
+  }
+
+  @Private
+  public static boolean hasPendingResourceRequest(ResourceCalculator rc,
+      ResourceUsage usage, String nodePartition, Resource cluster,
+      SchedulingMode schedulingMode) {
+    String partitionToLookAt = nodePartition;
+    if (schedulingMode == SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY) {
+      partitionToLookAt = RMNodeLabelsManager.NO_LABEL;
+    }
+    return hasPendingResourceRequest(rc, usage, partitionToLookAt, cluster);
+  }

MOV26 MOV31 UPD40 INS31 INS31 UPD42 MOV44 UPD83 MOV83 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 MOV44 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS21 INS43 UPD42 UPD42 INS43 UPD42 INS60 INS60 INS25 INS41 INS43 UPD42 INS43 INS42 MOV43 UPD42 INS43 INS42 MOV25 MOV41 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 INS32 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS27 INS8 INS8 MOV43 INS59 INS27 INS8 INS32 UPD42 MOV42 INS42 INS42 INS32 MOV8 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS16 INS42 INS33 UPD42 MOV42 INS40 INS21 INS21 INS42 INS32 INS33 UPD42 MOV42 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 UPD42 MOV42 INS40 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS40 INS42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS33 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL33 DEL27 DEL32 DEL32 DEL38 DEL27 DEL36 DEL27 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL43 DEL74 DEL43 DEL74 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL27 DEL9 DEL41 DEL8 DEL42 DEL33 DEL27 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL33 DEL27 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL25 DEL9 DEL41 DEL43 DEL74 DEL42 DEL33 DEL27 DEL32 DEL32 DEL27 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL8