HDFS-5583. Make DN send an OOB Ack on shutdown before restarting. Contributed by Kihwal Lee.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571491 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.HdfsConfiguration;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_OOB_TIMEOUT_KEY;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_OOB_TIMEOUT_DEFAULT;
-
+  final static int OOB_START = Status.OOB_RESTART_VALUE; // the first OOB type
+  final static int OOB_END = Status.OOB_RESERVED3_VALUE; // the last OOB type
+  final static int NUM_OOB_TYPES = OOB_END - OOB_START + 1;
+  // place holder for timeout value of each OOB type
+  final static long[] OOB_TIMEOUT;
+
+  static {
+    OOB_TIMEOUT = new long[NUM_OOB_TYPES];
+    HdfsConfiguration conf = new HdfsConfiguration();
+    String[] ele = conf.get(DFS_DATANODE_OOB_TIMEOUT_KEY,
+        DFS_DATANODE_OOB_TIMEOUT_DEFAULT).split(",");
+    for (int i = 0; i < NUM_OOB_TYPES; i++) {
+      OOB_TIMEOUT[i] = (i < ele.length) ? Long.valueOf(ele[i]) : 0;
+    }
+  }
-    for (DataTransferProtos.Status reply : proto.getStatusList()) {
-      if (reply != DataTransferProtos.Status.SUCCESS) {
+    for (Status reply : proto.getStatusList()) {
+      if (reply != Status.SUCCESS) {
-  
+
+  /**
+   * Returns the OOB status if this ack contains one. 
+   * @return null if it is not an OOB ack.
+   */
+  public Status getOOBStatus() {
+    // Normal data transfer acks will have a valid sequence number, so
+    // this will return right away in most cases.
+    if (getSeqno() != UNKOWN_SEQNO) {
+      return null;
+    }
+    for (Status reply : proto.getStatusList()) {
+      // The following check is valid because protobuf guarantees to
+      // preserve the ordering of enum elements.
+      if (reply.getNumber() >= OOB_START && reply.getNumber() <= OOB_END) {
+        return reply;
+      }
+    }
+    return null;
+  }
+
+  /**
+   * Get the timeout to be used for transmitting the OOB type
+   * @return the timeout in milliseconds
+   */
+  public static long getOOBTimeout(Status status) throws IOException {
+    int index = status.getNumber() - OOB_START;
+    if (index >= 0 && index < NUM_OOB_TYPES) {
+      return OOB_TIMEOUT[index];
+    } 
+    // Not an OOB.
+    throw new IOException("Not an OOB status: " + status);
+  }
+
+  /** Get the Restart OOB ack status */
+  public static Status getRestartOOBStatus() {
+    return Status.OOB_RESTART;
+  }
+
+  /** return true if it is the restart OOB status code  */
+  public static boolean isRestartOOBStatus(Status st) {
+    return st.equals(Status.OOB_RESTART);
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS28 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS5 INS59 INS83 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS40 INS42 INS40 INS42 INS27 INS39 INS85 INS42 INS21 INS60 INS60 INS24 INS65 INS65 INS42 INS25 INS70 INS41 INS65 INS65 INS43 INS42 INS42 INS60 INS25 INS53 INS65 INS42 INS41 INS65 INS43 INS42 INS41 INS27 INS34 INS7 INS43 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS66 INS66 INS27 INS8 INS44 INS32 INS8 INS33 INS66 INS66 INS42 INS39 INS59 INS27 INS8 INS14 INS66 INS40 INS66 INS42 INS32 INS42 INS42 INS42 INS3 INS42 INS42 INS14 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS21 UPD43 INS32 INS42 INS41 INS43 INS42 INS42 INS42 INS25 INS42 INS27 INS27 INS27 INS41 INS43 INS27 INS42 INS42 INS40 INS5 INS42 INS43 INS42 INS32 INS42 INS45 INS42 INS34 INS7 INS42 INS42 INS33 INS42 INS27 INS8 INS32 INS42 INS42 INS34 INS42 INS42 INS2 INS42 INS45 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS2 INS16 UPD40 INS27 INS27 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS32 INS34 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 DEL40