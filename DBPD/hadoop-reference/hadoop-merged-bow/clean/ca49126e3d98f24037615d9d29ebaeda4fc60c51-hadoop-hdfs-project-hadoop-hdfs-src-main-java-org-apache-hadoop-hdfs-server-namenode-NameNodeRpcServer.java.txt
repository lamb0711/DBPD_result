Merge trunk into auto-HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1327724 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.util.VersionInfo;
+import org.apache.hadoop.util.VersionUtil;
+  
+  private final String minimumDataNodeVersion;
+    
+    this.minimumDataNodeVersion = conf.get(
+        DFSConfigKeys.DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_KEY,
+        DFSConfigKeys.DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_DEFAULT);
-    verifyVersion(registration.getVersion());
+    verifyLayoutVersion(registration.getVersion());
-  public DatanodeRegistration registerDatanode(DatanodeRegistration nodeReg
-      ) throws IOException {
-    verifyVersion(nodeReg.getVersion());
+  public DatanodeRegistration registerDatanode(DatanodeRegistration nodeReg)
+      throws IOException {
+    verifyLayoutVersion(nodeReg.getVersion());
+    verifySoftwareVersion(nodeReg);
-    verifyVersion(nodeReg.getVersion());
+    verifyLayoutVersion(nodeReg.getVersion());
-  void verifyVersion(int version) throws IOException {
+  void verifyLayoutVersion(int version) throws IOException {
+  
+  private void verifySoftwareVersion(DatanodeRegistration dnReg)
+      throws IncorrectVersionException {
+    String dnVersion = dnReg.getSoftwareVersion();
+    if (VersionUtil.compareVersions(dnVersion, minimumDataNodeVersion) < 0) {
+      IncorrectVersionException ive = new IncorrectVersionException(
+          minimumDataNodeVersion, dnVersion, "DataNode", "NameNode");
+      LOG.warn(ive.getMessage() + " DN: " + dnReg);
+      throw ive;
+    }
+    String nnVersion = VersionInfo.getVersion();
+    if (!dnVersion.equals(nnVersion)) {
+      String messagePrefix = "Reported DataNode version '" + dnVersion +
+          "' of DN " + dnReg + " does not match NameNode version '" +
+          nnVersion + "'";
+      long nnCTime = nn.getFSImage().getStorage().getCTime();
+      long dnCTime = dnReg.getStorageInfo().getCTime();
+      if (nnCTime != dnCTime) {
+        IncorrectVersionException ive = new IncorrectVersionException(
+            messagePrefix + " and CTime of DN ('" + dnCTime +
+            "') does not match CTime of NN ('" + nnCTime + "')");
+        LOG.warn(ive);
+        throw ive;
+      } else {
+        LOG.info(messagePrefix +
+            ". Note: This is normal during a rolling upgrade.");
+      }
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 UPD42 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS21 INS21 INS43 INS42 INS42 INS60 INS25 INS60 INS25 INS7 INS32 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS38 INS8 INS22 INS32 UPD42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS32 INS32 INS34 INS60 INS21 INS53 INS42 INS42 INS32 INS32 INS60 INS60 INS60 INS25 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS21 INS53 INS21 INS43 INS42 INS42 INS45 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS27 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45