HDDS-550. Serialize ApplyTransaction calls per Container in ContainerStateMachine. Contributed by Shashikant Banerjee.

-import com.google.common.annotations.VisibleForTesting;
-import org.apache.ratis.shaded.com.google.protobuf
+import org.apache.ratis.thirdparty.com.google.protobuf
-import org.apache.ratis.shaded.com.google.protobuf.ByteString;
-import org.apache.ratis.shaded.proto.RaftProtos.RoleInfoProto;
-import org.apache.ratis.shaded.proto.RaftProtos.LogEntryProto;
-import org.apache.ratis.shaded.proto.RaftProtos.SMLogEntryProto;
+import org.apache.ratis.thirdparty.com.google.protobuf.ByteString;
+import org.apache.ratis.proto.RaftProtos.RoleInfoProto;
+import org.apache.ratis.proto.RaftProtos.LogEntryProto;
+import org.apache.ratis.proto.RaftProtos.SMLogEntryProto;
-import java.util.ArrayList;
-import java.util.Collection;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ExecutorService;
- * machine operation.
- *
- * Synchronization between {@link #writeStateMachineData} and
- * {@link #applyTransaction} need to be enforced in the StateMachine
- * implementation. For example, synchronization between writeChunk and
+ * machine operation.For example, synchronization between writeChunk and
- *
- * PutBlock is synchronized with WriteChunk operations, PutBlock for a block is
- * executed only after all the WriteChunk preceding the PutBlock have finished.
- *
- * CloseContainer is synchronized with WriteChunk and PutBlock operations,
- * CloseContainer for a container is processed after all the preceding write
- * operations for the container have finished.
- * */
+ **/
+
-  static final Logger LOG = LoggerFactory.getLogger(
-      ContainerStateMachine.class);
-  private final SimpleStateMachineStorage storage
-      = new SimpleStateMachineStorage();
+  static final Logger LOG =
+      LoggerFactory.getLogger(ContainerStateMachine.class);
+  private final SimpleStateMachineStorage storage =
+      new SimpleStateMachineStorage();
-  private final ConcurrentHashMap<Long, StateMachineHelper> stateMachineMap;
+  private final ConcurrentHashMap<Long, CompletableFuture<Message>>
+      createContainerFutureMap;
+  private ExecutorService[] executors;
+  private final int numExecutors;
-      ThreadPoolExecutor chunkExecutor, XceiverServerRatis ratisServer) {
+      ThreadPoolExecutor chunkExecutor, XceiverServerRatis ratisServer,
+      int  numOfExecutors) {
-    this.stateMachineMap = new ConcurrentHashMap<>();
+    this.createContainerFutureMap = new ConcurrentHashMap<>();
+    this.numExecutors = numOfExecutors;
+    executors = new ExecutorService[numExecutors];
+    for (int i = 0; i < numExecutors; i++) {
+      executors[i] = Executors.newSingleThreadExecutor();
+    }
+  private ExecutorService getCommandExecutor(
+      ContainerCommandRequestProto requestProto) {
+    int executorId = (int)(requestProto.getContainerID() % numExecutors);
+    return executors[executorId];
+  }
+
+  private CompletableFuture<Message> handleWriteChunk(
+      ContainerCommandRequestProto requestProto, long entryIndex) {
+    final WriteChunkRequestProto write = requestProto.getWriteChunk();
+    long containerID = write.getBlockID().getContainerID();
+    CompletableFuture<Message> future =
+        createContainerFutureMap.get(containerID);
+    CompletableFuture<Message> writeChunkFuture;
+    if (future != null) {
+      writeChunkFuture = future.thenApplyAsync(
+          v -> runCommand(requestProto), chunkExecutor);
+    } else {
+      writeChunkFuture = CompletableFuture.supplyAsync(
+          () -> runCommand(requestProto), chunkExecutor);
+    }
+    writeChunkFutureMap.put(entryIndex, writeChunkFuture);
+    // Remove the future once it finishes execution from the
+    // writeChunkFutureMap.
+    writeChunkFuture.thenApply(r -> writeChunkFutureMap.remove(entryIndex));
+    return writeChunkFuture;
+  }
+
+  private CompletableFuture<Message> handleCreateContainer(
+      ContainerCommandRequestProto requestProto) {
+    long containerID = requestProto.getContainerID();
+    createContainerFutureMap.
+        computeIfAbsent(containerID, k -> new CompletableFuture<>());
+    return CompletableFuture.completedFuture(() -> ByteString.EMPTY);
+  }
+
-      long containerId = requestProto.getContainerID();
-      stateMachineMap
-          .computeIfAbsent(containerId, k -> new StateMachineHelper());
-      CompletableFuture<Message> stateMachineFuture =
-          stateMachineMap.get(containerId)
-              .handleStateMachineData(requestProto, entry.getIndex());
-      if (stateMachineFuture == null) {
-        throw new IllegalStateException(
-            "Cmd Type:" + cmdType + " should not have state machine data");
+      switch (cmdType) {
+      case CreateContainer:
+        return handleCreateContainer(requestProto);
+      case WriteChunk:
+        return handleWriteChunk(requestProto, entry.getIndex());
+      default:
+        throw new IllegalStateException("Cmd Type:" + cmdType
+            + " should not have state machine data");
-      return stateMachineFuture;
-  private LogEntryProto readStateMachineData(LogEntryProto entry,
+  private ByteString readStateMachineData(LogEntryProto entry,
-    Preconditions.checkArgument(writeChunkRequestProto.getStage()
-        == Stage.COMMIT_DATA);
+    Preconditions
+        .checkArgument(writeChunkRequestProto.getStage() == Stage.COMMIT_DATA);
-            .setCmdType(Type.ReadChunk)
-            .setReadChunk(readChunkRequestProto)
+            .setCmdType(Type.ReadChunk).setReadChunk(readChunkRequestProto)
-            .setData(responseProto.getData())
-            .setStage(Stage.WRITE_DATA);
+            .setData(responseProto.getData()).setStage(Stage.WRITE_DATA);
-    return recreateLogEntryProto(entry,
-        newStateMachineProto.build().toByteString());
-  }
-
-  private LogEntryProto recreateLogEntryProto(LogEntryProto entry,
-      ByteString stateMachineData) {
-    // recreate the log entry
-    final SMLogEntryProto log =
-        SMLogEntryProto.newBuilder(entry.getSmLogEntry())
-            .setStateMachineData(stateMachineData)
-            .build();
-    return LogEntryProto.newBuilder(entry).setSmLogEntry(log).build();
+    return newStateMachineProto.build().toByteString();
-  public CompletableFuture<LogEntryProto> readStateMachineData(
+  public CompletableFuture<ByteString> readStateMachineData(
-      return CompletableFuture.completedFuture(entry);
+      return CompletableFuture.completedFuture(ByteString.EMPTY);
-        LogEntryProto log =
-            recreateLogEntryProto(entry, requestProto.toByteString());
-        return CompletableFuture.completedFuture(log);
+        return CompletableFuture.completedFuture(requestProto.toByteString());
-      Preconditions.checkState(!HddsUtils.isReadOnly(requestProto));
-      stateMachineMap.computeIfAbsent(requestProto.getContainerID(),
-          k -> new StateMachineHelper());
-      long index =
-          trx.getLogEntry() == null ? -1 : trx.getLogEntry().getIndex();
-      return stateMachineMap.get(requestProto.getContainerID())
-          .executeContainerCommand(requestProto, index);
+      Type cmdType = requestProto.getCmdType();
+      CompletableFuture<Message> future;
+      if (cmdType == Type.PutBlock) {
+        BlockData blockData;
+        ContainerProtos.BlockData blockDataProto =
+            requestProto.getPutBlock().getBlockData();
+
+        // set the blockCommitSequenceId
+        try {
+          blockData = BlockData.getFromProtoBuf(blockDataProto);
+        } catch (IOException ioe) {
+          LOG.error("unable to retrieve blockData info for Block {}",
+              blockDataProto.getBlockID());
+          return completeExceptionally(ioe);
+        }
+        blockData.setBlockCommitSequenceId(trx.getLogEntry().getIndex());
+        final ContainerProtos.PutBlockRequestProto putBlockRequestProto =
+            ContainerProtos.PutBlockRequestProto
+                .newBuilder(requestProto.getPutBlock())
+                .setBlockData(blockData.getProtoBufMessage()).build();
+        ContainerCommandRequestProto containerCommandRequestProto =
+            ContainerCommandRequestProto.newBuilder(requestProto)
+                .setPutBlock(putBlockRequestProto).build();
+        future = CompletableFuture
+            .supplyAsync(() -> runCommand(containerCommandRequestProto),
+                getCommandExecutor(requestProto));
+      } else {
+        future = CompletableFuture.supplyAsync(() -> runCommand(requestProto),
+            getCommandExecutor(requestProto));
+      }
+      // Mark the createContainerFuture complete so that writeStateMachineData
+      // for WriteChunk gets unblocked
+      if (cmdType == Type.CreateContainer) {
+        long containerID = requestProto.getContainerID();
+        future.thenApply(
+            r -> createContainerFutureMap.remove(containerID).complete(null));
+      }
+      return future;
-  }
-
-  /**
-   * Class to manage the future tasks for writeChunks.
-   */
-  static class CommitChunkFutureMap {
-    private final ConcurrentHashMap<Long, CompletableFuture<Message>>
-        block2ChunkMap = new ConcurrentHashMap<>();
-
-    synchronized int removeAndGetSize(long index) {
-      block2ChunkMap.remove(index);
-      return block2ChunkMap.size();
+    for (int i = 0; i < numExecutors; i++){
+      executors[i].shutdown();
-
-    synchronized CompletableFuture<Message> add(long index,
-        CompletableFuture<Message> future) {
-      return block2ChunkMap.put(index, future);
-    }
-
-    synchronized List<CompletableFuture<Message>> getAll() {
-      return new ArrayList<>(block2ChunkMap.values());
-    }
-  }
-
-  /**
-   * This class maintains maps and provide utilities to enforce synchronization
-   * among createContainer, writeChunk, putBlock and closeContainer.
-   */
-  private class StateMachineHelper {
-
-    private CompletableFuture<Message> createContainerFuture;
-
-    // Map for maintaining all writeChunk futures mapped to blockId
-    private final ConcurrentHashMap<Long, CommitChunkFutureMap>
-        block2ChunkMap;
-
-    // Map for putBlock futures
-    private final ConcurrentHashMap<Long, CompletableFuture<Message>>
-        blockCommitMap;
-
-    StateMachineHelper() {
-      createContainerFuture = null;
-      block2ChunkMap = new ConcurrentHashMap<>();
-      blockCommitMap = new ConcurrentHashMap<>();
-    }
-
-    // The following section handles writeStateMachineData transactions
-    // on a container
-
-    // enqueue the create container future during writeStateMachineData
-    // so that the write stateMachine data phase of writeChunk wait on
-    // create container to finish.
-    private CompletableFuture<Message> handleCreateContainer() {
-      createContainerFuture = new CompletableFuture<>();
-      return CompletableFuture.completedFuture(() -> ByteString.EMPTY);
-    }
-
-    // This synchronizes on create container to finish
-    private CompletableFuture<Message> handleWriteChunk(
-        ContainerCommandRequestProto requestProto, long entryIndex) {
-      CompletableFuture<Message> containerOpFuture;
-
-      if (createContainerFuture != null) {
-        containerOpFuture = createContainerFuture
-            .thenApplyAsync(v -> runCommand(requestProto), chunkExecutor);
-      } else {
-        containerOpFuture = CompletableFuture
-            .supplyAsync(() -> runCommand(requestProto), chunkExecutor);
-      }
-      writeChunkFutureMap.put(entryIndex, containerOpFuture);
-      return containerOpFuture;
-    }
-
-    CompletableFuture<Message> handleStateMachineData(
-        final ContainerCommandRequestProto requestProto, long index) {
-      Type cmdType = requestProto.getCmdType();
-      if (cmdType == Type.CreateContainer) {
-        return handleCreateContainer();
-      } else if (cmdType == Type.WriteChunk) {
-        return handleWriteChunk(requestProto, index);
-      } else {
-        return null;
-      }
-    }
-
-    // The following section handles applyTransaction transactions
-    // on a container
-
-    private CompletableFuture<Message> handlePutBlock(
-        ContainerCommandRequestProto requestProto, long index) {
-      List<CompletableFuture<Message>> futureList = new ArrayList<>();
-      BlockData blockData = null;
-      ContainerProtos.BlockData blockDataProto =
-          requestProto.getPutBlock().getBlockData();
-
-      // set the blockCommitSequenceId
-      try {
-        blockData = BlockData.getFromProtoBuf(blockDataProto);
-      } catch (IOException ioe) {
-        LOG.error("unable to retrieve blockData info for Block {}",
-            blockDataProto.getBlockID());
-        return completeExceptionally(ioe);
-      }
-      blockData.setBlockCommitSequenceId(index);
-      final ContainerProtos.PutBlockRequestProto putBlockRequestProto =
-          ContainerProtos.PutBlockRequestProto
-              .newBuilder(requestProto.getPutBlock())
-              .setBlockData(blockData.getProtoBufMessage()).build();
-      ContainerCommandRequestProto containerCommandRequestProto =
-          ContainerCommandRequestProto.newBuilder(requestProto)
-              .setPutBlock(putBlockRequestProto).build();
-      long localId = blockDataProto.getBlockID().getLocalID();
-      // Need not wait for create container future here as it has already
-      // finished.
-      if (block2ChunkMap.get(localId) != null) {
-        futureList.addAll(block2ChunkMap.get(localId).getAll());
-      }
-      CompletableFuture<Message> effectiveFuture =
-          runCommandAfterFutures(futureList, containerCommandRequestProto);
-
-      CompletableFuture<Message> putBlockFuture =
-          effectiveFuture.thenApply(message -> {
-            blockCommitMap.remove(localId);
-            return message;
-          });
-      blockCommitMap.put(localId, putBlockFuture);
-      return putBlockFuture;
-    }
-
-    // Close Container should be executed only if all pending WriteType
-    // container cmds get executed. Transactions which can return a future
-    // are WriteChunk and PutBlock.
-    private CompletableFuture<Message> handleCloseContainer(
-        ContainerCommandRequestProto requestProto) {
-      List<CompletableFuture<Message>> futureList = new ArrayList<>();
-
-      // No need to wait for create container future here as it should have
-      // already finished.
-      block2ChunkMap.values().forEach(b -> futureList.addAll(b.getAll()));
-      futureList.addAll(blockCommitMap.values());
-
-      // There are pending write Chunk/PutBlock type requests
-      // Queue this closeContainer request behind all these requests
-      CompletableFuture<Message> closeContainerFuture =
-          runCommandAfterFutures(futureList, requestProto);
-
-      return closeContainerFuture.thenApply(message -> {
-        stateMachineMap.remove(requestProto.getContainerID());
-        return message;
-      });
-    }
-
-    private CompletableFuture<Message> handleChunkCommit(
-        ContainerCommandRequestProto requestProto, long index) {
-      WriteChunkRequestProto write = requestProto.getWriteChunk();
-      // the data field has already been removed in start Transaction
-      Preconditions.checkArgument(!write.hasData());
-      CompletableFuture<Message> stateMachineFuture =
-          writeChunkFutureMap.remove(index);
-      CompletableFuture<Message> commitChunkFuture = stateMachineFuture
-          .thenComposeAsync(v -> CompletableFuture
-              .completedFuture(runCommand(requestProto)));
-
-      long localId = requestProto.getWriteChunk().getBlockID().getLocalID();
-      // Put the applyTransaction Future again to the Map.
-      // closeContainer should synchronize with this.
-      block2ChunkMap
-          .computeIfAbsent(localId, id -> new CommitChunkFutureMap())
-          .add(index, commitChunkFuture);
-      return commitChunkFuture.thenApply(message -> {
-        block2ChunkMap.computeIfPresent(localId, (containerId, chunks)
-            -> chunks.removeAndGetSize(index) == 0? null: chunks);
-        return message;
-      });
-    }
-
-    private CompletableFuture<Message> runCommandAfterFutures(
-        List<CompletableFuture<Message>> futureList,
-        ContainerCommandRequestProto requestProto) {
-      CompletableFuture<Message> effectiveFuture;
-      if (futureList.isEmpty()) {
-        effectiveFuture = CompletableFuture
-            .supplyAsync(() -> runCommand(requestProto));
-
-      } else {
-        CompletableFuture<Void> allFuture = CompletableFuture.allOf(
-            futureList.toArray(new CompletableFuture[futureList.size()]));
-        effectiveFuture = allFuture
-            .thenApplyAsync(v -> runCommand(requestProto));
-      }
-      return effectiveFuture;
-    }
-
-    CompletableFuture<Message> handleCreateContainer(
-        ContainerCommandRequestProto requestProto) {
-      CompletableFuture<Message> future =
-          CompletableFuture.completedFuture(runCommand(requestProto));
-      future.thenAccept(m -> {
-        createContainerFuture.complete(m);
-        createContainerFuture = null;
-      });
-      return future;
-    }
-
-    CompletableFuture<Message> handleOtherCommands(
-        ContainerCommandRequestProto requestProto) {
-      return CompletableFuture.completedFuture(runCommand(requestProto));
-    }
-
-    CompletableFuture<Message> executeContainerCommand(
-        ContainerCommandRequestProto requestProto, long index) {
-      Type cmdType = requestProto.getCmdType();
-      switch (cmdType) {
-      case WriteChunk:
-        return handleChunkCommit(requestProto, index);
-      case CloseContainer:
-        return handleCloseContainer(requestProto);
-      case PutBlock:
-        return handlePutBlock(requestProto, index);
-      case CreateContainer:
-        return handleCreateContainer(requestProto);
-      default:
-        return handleOtherCommands(requestProto);
-      }
-    }
-  }
-
-  @VisibleForTesting
-  public ConcurrentHashMap<Long, StateMachineHelper> getStateMachineMap() {
-    return stateMachineMap;
-  }
-
-  @VisibleForTesting
-  public CompletableFuture<Message> getCreateContainerFuture(long containerId) {
-    StateMachineHelper helper = stateMachineMap.get(containerId);
-    return helper == null ? null : helper.createContainerFuture;
-  }
-
-  @VisibleForTesting
-  public List<CompletableFuture<Message>> getCommitChunkFutureMap(
-      long containerId) {
-    StateMachineHelper helper = stateMachineMap.get(containerId);
-    if (helper != null) {
-      List<CompletableFuture<Message>> futureList = new ArrayList<>();
-      stateMachineMap.get(containerId).block2ChunkMap.values()
-          .forEach(b -> futureList.addAll(b.getAll()));
-      return futureList;
-    }
-    return null;
-  }
-
-  @VisibleForTesting
-  public Collection<CompletableFuture<Message>> getWriteChunkFutureMap() {
-    return writeChunkFutureMap.values();

MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 MOV23 INS23 MOV31 MOV31 INS31 INS5 INS83 INS83 INS39 INS59 INS44 MOV21 UPD83 INS43 UPD42 MOV44 INS8 MOV44 MOV43 UPD74 MOV78 MOV83 MOV74 UPD42 MOV42 MOV44 INS8 MOV78 INS39 INS42 MOV43 UPD66 INS42 INS43 INS85 UPD42 INS42 INS39 INS42 INS21 INS21 INS24 UPD42 MOV42 MOV60 MOV41 INS60 INS60 INS60 INS21 MOV60 UPD42 MOV42 UPD43 INS54 INS24 UPD42 MOV42 INS7 INS7 INS58 INS27 INS37 INS8 UPD39 INS2 INS83 MOV43 MOV59 INS39 INS59 MOV74 INS59 INS32 UPD42 INS32 MOV32 UPD42 INS8 MOV12 INS58 INS27 INS37 INS8 INS22 INS42 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS21 UPD42 INS11 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS86 UPD42 INS42 INS42 INS42 INS86 INS50 MOV21 MOV60 MOV60 INS60 INS25 INS25 MOV41 INS39 INS59 UPD42 MOV42 INS42 INS42 MOV21 UPD42 INS52 INS42 INS5 INS42 INS42 INS34 INS7 INS39 INS36 INS32 INS42 INS42 INS42 INS42 INS59 INS32 MOV59 MOV14 INS42 MOV49 MOV41 MOV49 INS41 INS49 MOV53 MOV74 INS59 MOV27 MOV8 MOV8 MOV27 INS8 UPD42 MOV42 INS34 INS43 INS85 INS2 INS32 INS27 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS40 UPD42 MOV42 UPD40 INS21 MOV60 MOV21 INS2 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 UPD42 UPD42 MOV42 INS42 INS42 MOV32 INS7 INS42 INS42 MOV32 MOV32 INS42 INS32 UPD42 INS42 MOV32 UPD42 UPD42 UPD42 INS42 INS42 INS86 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 INS32 INS42 INS33 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL43 DEL74 DEL14 DEL83 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL33 DEL27 DEL34 DEL38 DEL16 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL42 DEL43 DEL14 DEL86 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL86 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL41 DEL42 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL33 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL86 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL39 DEL42 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL55 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL42 DEL39 DEL42 DEL44 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL86 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL43 DEL14 DEL86 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL33 DEL42 DEL16 DEL86 DEL32 DEL21 DEL42 DEL41 DEL8 DEL86 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL32 DEL41 DEL42 DEL49 DEL42 DEL42 DEL42 DEL32 DEL41 DEL49 DEL42 DEL42 DEL32 DEL41 DEL50 DEL8 DEL31 DEL55 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL40 DEL16 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL25 DEL33 DEL41 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31