MAPREDUCE-5464. Add analogs of the SLOTS_MILLIS counters that jive with the YARN resource model (Sandy Ryza)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1562216 13f79535-47bb-0310-9956-ffa450edef68

-
-  private static long computeSlotMillis(TaskAttemptImpl taskAttempt) {
+  
+  private static void updateMillisCounters(JobCounterUpdateEvent jce,
+      TaskAttemptImpl taskAttempt) {
-    int slotMemoryReq =
+    long duration = (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());
+    int mbRequired =
+    int vcoresRequired = taskAttempt.getCpuRequired(taskAttempt.conf, taskType);
-        minSlotMemSize == 0 ? 0 : (int) Math.ceil((float) slotMemoryReq
+        minSlotMemSize == 0 ? 0 : (int) Math.ceil((float) mbRequired
-    long slotMillisIncrement =
-        simSlotsRequired
-            * (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());
-    return slotMillisIncrement;
+    if (taskType == TaskType.MAP) {
+      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS, simSlotsRequired * duration);
+      jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbRequired);
+      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS, duration * vcoresRequired);
+      jce.addCounterUpdate(JobCounter.MILLIS_MAPS, duration);
+    } else {
+      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES, simSlotsRequired * duration);
+      jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES, duration * mbRequired);
+      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES, duration * vcoresRequired);
+      jce.addCounterUpdate(JobCounter.MILLIS_REDUCES, duration);
+    }
-    long slotMillis = computeSlotMillis(taskAttempt);
-    jce.addCounterUpdate(
-      taskId.getTaskType() == TaskType.MAP ?
-        JobCounter.SLOTS_MILLIS_MAPS : JobCounter.SLOTS_MILLIS_REDUCES,
-        slotMillis);
+    updateMillisCounters(jce, taskAttempt);
-
+  
-    long slotMillisIncrement = computeSlotMillis(taskAttempt);
-    
-      if(!taskAlreadyCompleted) {
-        // dont double count the elapsed time
-        jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS, slotMillisIncrement);
-      }
-      if(!taskAlreadyCompleted) {
-        // dont double count the elapsed time
-        jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES, slotMillisIncrement);
-      }
+    }
+    if (!taskAlreadyCompleted) {
+      updateMillisCounters(jce, taskAttempt);
-    long slotMillisIncrement = computeSlotMillis(taskAttempt);
-    
-      if(!taskAlreadyCompleted) {
-        // dont double count the elapsed time
-        jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS, slotMillisIncrement);
-      }
-      if(!taskAlreadyCompleted) {
-        // dont double count the elapsed time
-        jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES, slotMillisIncrement);
-      }
+    }
+    if (!taskAlreadyCompleted) {
+      updateMillisCounters(jce, taskAttempt);

UPD39 UPD42 INS44 MOV60 INS43 INS42 INS60 INS25 INS25 INS25 INS42 INS39 INS59 INS27 INS8 INS8 MOV38 INS8 MOV38 INS8 UPD42 MOV36 UPD42 INS42 INS32 INS42 INS40 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 UPD42 UPD42 MOV42 UPD42 INS21 INS21 INS42 INS42 INS40 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS27 INS42 INS42 INS40 INS42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL27 DEL42 DEL41 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL40 DEL40 DEL16 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL38 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25