Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1170378 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.List;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.ContainerLocalizationEvent;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.ContainerLocalizationCleanupEvent;
-import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.LocalizationEventType;
-  private String exitCode = "NA";
+  private int exitCode = YarnConfiguration.INVALID_CONTAINER_EXIT_STATUS;
+  private final List<LocalResourceRequest> publicRsrcs =
+    new ArrayList<LocalResourceRequest>();
+  private final List<LocalResourceRequest> privateRsrcs =
+    new ArrayList<LocalResourceRequest>();
+  private final List<LocalResourceRequest> appRsrcs =
+    new ArrayList<LocalResourceRequest>();
-  public
-      org.apache.hadoop.yarn.api.records.Container cloneAndGetContainer() {
-    this.readLock.lock();
-    try {
-      org.apache.hadoop.yarn.api.records.Container c =
-        recordFactory.newRecordInstance(
-            org.apache.hadoop.yarn.api.records.Container.class);
-      c.setId(this.launchContext.getContainerId());
-      c.setResource(this.launchContext.getResource());
-      c.setState(getCurrentState());
-      c.setContainerStatus(cloneAndGetContainerStatus());
-      return c;
-    } finally {
-      this.readLock.unlock();
-    }
-  }
-
-  @Override
-  	  containerStatus.setExitStatus(String.valueOf(exitCode));
+  	  containerStatus.setExitStatus(exitCode);
-  @SuppressWarnings("fallthrough")
+  @SuppressWarnings({"fallthrough", "unchecked"})
-            getContainerID().getAppId(), getContainerID());
+            getContainerID().getApplicationAttemptId().getApplicationId(), 
+            getContainerID());
-            getContainerID().getAppId(), getContainerID());
+            getContainerID().getApplicationAttemptId().getApplicationId(), 
+            getContainerID());
-            getContainerID().getAppId(), getContainerID());
+            getContainerID().getApplicationAttemptId().getApplicationId(), 
+            getContainerID());
+    @SuppressWarnings("rawtypes")
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  public void cleanup() {
+    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrc =
+      new HashMap<LocalResourceVisibility, 
+                  Collection<LocalResourceRequest>>();
+    if (!publicRsrcs.isEmpty()) {
+      rsrc.put(LocalResourceVisibility.PUBLIC, publicRsrcs);
+    }
+    if (!privateRsrcs.isEmpty()) {
+      rsrc.put(LocalResourceVisibility.PRIVATE, privateRsrcs);
+    }
+    if (!appRsrcs.isEmpty()) {
+      rsrc.put(LocalResourceVisibility.APPLICATION, appRsrcs);
+    }
+    dispatcher.getEventHandler().handle(
+        new ContainerLocalizationCleanupEvent(this, rsrc));
+  }
+
-      Map<String,ByteBuffer> csd = ctxt.getAllServiceData();
+      Map<String,ByteBuffer> csd = ctxt.getServiceData();
-                ctxt.getUser(), ctxt.getContainerId().getAppId(),
+                ctxt.getUser(), 
+                ctxt.getContainerId().getApplicationAttemptId().getApplicationId(),
-      Map<String,LocalResource> cntrRsrc = ctxt.getAllLocalResources();
+      Map<String,LocalResource> cntrRsrc = ctxt.getLocalResources();
-        ArrayList<LocalResourceRequest> publicRsrc =
-          new ArrayList<LocalResourceRequest>();
-        ArrayList<LocalResourceRequest> privateRsrc =
-          new ArrayList<LocalResourceRequest>();
-        ArrayList<LocalResourceRequest> appRsrc =
-          new ArrayList<LocalResourceRequest>();
-              publicRsrc.add(req);
+              container.publicRsrcs.add(req);
-              privateRsrc.add(req);
+              container.privateRsrcs.add(req);
-              appRsrc.add(req);
+              container.appRsrcs.add(req);
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationEvent(
-               LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+          container.cleanup();
-        if (!publicRsrc.isEmpty()) {
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationRequestEvent(
-                container, publicRsrc, LocalResourceVisibility.PUBLIC));
+        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req =
+            new HashMap<LocalResourceVisibility, 
+                        Collection<LocalResourceRequest>>();
+        if (!container.publicRsrcs.isEmpty()) {
+          req.put(LocalResourceVisibility.PUBLIC, container.publicRsrcs);
-        if (!privateRsrc.isEmpty()) {
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationRequestEvent(
-                container, privateRsrc, LocalResourceVisibility.PRIVATE));
+        if (!container.privateRsrcs.isEmpty()) {
+          req.put(LocalResourceVisibility.PRIVATE, container.privateRsrcs);
-        if (!appRsrc.isEmpty()) {
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationRequestEvent(
-                container, appRsrc, LocalResourceVisibility.APPLICATION));
+        if (!container.appRsrcs.isEmpty()) {
+          req.put(LocalResourceVisibility.APPLICATION, container.appRsrcs);
+        
+        container.dispatcher.getEventHandler().handle(
+              new ContainerLocalizationRequestEvent(container, req));
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.exitCode = String.valueOf(exitEvent.getExitCode());
+      container.exitCode = exitEvent.getExitCode();
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.exitCode = String.valueOf(exitEvent.getExitCode());
+      container.exitCode = exitEvent.getExitCode();
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-        LOG.warn("Can't handle this event at current state", e);
+        LOG.warn("Can't handle this event at current state: Current: ["
+            + oldState + "], eventType: [" + event.getType() + "]", e);

MOV26 MOV26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS23 INS23 INS23 INS31 INS39 INS83 INS83 INS74 MOV59 INS83 INS83 INS74 MOV59 INS83 INS83 INS74 MOV59 MOV79 INS83 INS39 INS42 INS8 MOV43 MOV43 INS40 INS43 INS43 UPD42 INS43 INS43 UPD42 INS43 INS43 UPD42 INS4 MOV60 INS25 INS25 INS25 MOV21 MOV78 MOV44 MOV44 MOV78 MOV44 MOV44 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS79 INS74 INS38 INS8 INS38 INS8 INS38 INS8 INS42 INS45 INS43 INS43 UPD74 MOV74 UPD42 INS14 INS32 MOV21 INS32 MOV21 INS32 MOV21 INS32 INS42 INS14 MOV60 INS32 INS32 INS32 INS42 INS42 UPD43 INS74 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS52 INS42 MOV21 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV42 MOV32 INS42 MOV32 INS42 MOV32 INS42 UPD42 INS43 INS43 UPD74 MOV74 UPD42 INS42 INS40 UPD42 MOV42 UPD42 INS42 INS40 UPD42 MOV42 UPD42 UPD42 INS40 UPD42 MOV42 INS42 UPD42 UPD42 INS74 INS59 UPD42 UPD42 UPD42 INS42 INS42 UPD43 INS43 INS43 UPD74 MOV74 INS42 INS14 INS21 UPD42 INS42 INS42 UPD43 INS74 INS40 INS40 INS40 INS32 UPD42 UPD42 INS43 INS43 INS74 UPD42 MOV42 INS42 INS40 INS40 UPD42 MOV42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS27 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS45 INS42 INS45 INS32 INS45 MOV32 INS42 INS42 INS42 INS42 INS42 UPD42 INS40 INS40 INS40 DEL42 DEL43 DEL45 DEL42 DEL78 DEL83 DEL40 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL32 DEL45 DEL40 DEL43 DEL42 DEL42 DEL40 DEL43 DEL57 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL32 DEL52 DEL42 DEL22 DEL42 DEL60 DEL60 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL14 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL14 DEL42 DEL40 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL42 DEL45 DEL79 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL45