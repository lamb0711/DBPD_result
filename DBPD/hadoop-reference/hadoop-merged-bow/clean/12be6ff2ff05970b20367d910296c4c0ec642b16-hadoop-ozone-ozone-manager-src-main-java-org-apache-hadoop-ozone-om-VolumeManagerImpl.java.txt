HDDS-1539. Implement addAcl,removeAcl,setAcl,getAcl for Volume. Contributed Ajay Kumar. (#847)



+import java.util.Objects;
+import org.apache.hadoop.ozone.OzoneAcl;
+import org.apache.hadoop.ozone.security.acl.OzoneObj;
+
+  /**
+   * Add acl for Ozone object. Return true if acl is added successfully else
+   * false.
+   *
+   * @param obj Ozone object for which acl should be added.
+   * @param acl ozone acl top be added.
+   * @throws IOException if there is error.
+   */
+  @Override
+  public boolean addAcl(OzoneObj obj, OzoneAcl acl) throws IOException {
+    Objects.requireNonNull(obj);
+    Objects.requireNonNull(acl);
+    if (!obj.getResourceType().equals(OzoneObj.ResourceType.VOLUME)) {
+      throw new IllegalArgumentException("Unexpected argument passed to " +
+          "VolumeManager. OzoneObj type:" + obj.getResourceType());
+    }
+    String volume = obj.getVolumeName();
+    metadataManager.getLock().acquireVolumeLock(volume);
+    try {
+      String dbVolumeKey = metadataManager.getVolumeKey(volume);
+      OmVolumeArgs volumeArgs =
+          metadataManager.getVolumeTable().get(dbVolumeKey);
+      if (volumeArgs == null) {
+        LOG.debug("volume:{} does not exist", volume);
+        throw new OMException("Volume " + volume + " is not found",
+            ResultCodes.VOLUME_NOT_FOUND);
+      }
+      volumeArgs.addAcl(acl);
+      metadataManager.getVolumeTable().put(dbVolumeKey, volumeArgs);
+
+      Preconditions.checkState(volume.equals(volumeArgs.getVolume()));
+      //return volumeArgs.getAclMap().hasAccess(userAcl);
+    } catch (IOException ex) {
+      if (!(ex instanceof OMException)) {
+        LOG.error("Add acl operation failed for volume:{} acl:{}",
+            volume, acl, ex);
+      }
+      throw ex;
+    } finally {
+      metadataManager.getLock().releaseVolumeLock(volume);
+    }
+
+    return true;
+  }
+
+  /**
+   * Remove acl for Ozone object. Return true if acl is removed successfully
+   * else false.
+   *
+   * @param obj Ozone object.
+   * @param acl Ozone acl to be removed.
+   * @throws IOException if there is error.
+   */
+  @Override
+  public boolean removeAcl(OzoneObj obj, OzoneAcl acl) throws IOException {
+    Objects.requireNonNull(obj);
+    Objects.requireNonNull(acl);
+    if (!obj.getResourceType().equals(OzoneObj.ResourceType.VOLUME)) {
+      throw new IllegalArgumentException("Unexpected argument passed to " +
+          "VolumeManager. OzoneObj type:" + obj.getResourceType());
+    }
+    String volume = obj.getVolumeName();
+    metadataManager.getLock().acquireVolumeLock(volume);
+    try {
+      String dbVolumeKey = metadataManager.getVolumeKey(volume);
+      OmVolumeArgs volumeArgs =
+          metadataManager.getVolumeTable().get(dbVolumeKey);
+      if (volumeArgs == null) {
+        LOG.debug("volume:{} does not exist", volume);
+        throw new OMException("Volume " + volume + " is not found",
+            ResultCodes.VOLUME_NOT_FOUND);
+      }
+      volumeArgs.removeAcl(acl);
+      metadataManager.getVolumeTable().put(dbVolumeKey, volumeArgs);
+
+      Preconditions.checkState(volume.equals(volumeArgs.getVolume()));
+      //return volumeArgs.getAclMap().hasAccess(userAcl);
+    } catch (IOException ex) {
+      if (!(ex instanceof OMException)) {
+        LOG.error("Remove acl operation failed for volume:{} acl:{}",
+            volume, acl, ex);
+      }
+      throw ex;
+    } finally {
+      metadataManager.getLock().releaseVolumeLock(volume);
+    }
+
+    return true;
+  }
+
+  /**
+   * Acls to be set for given Ozone object. This operations reset ACL for given
+   * object to list of ACLs provided in argument.
+   *
+   * @param obj Ozone object.
+   * @param acls List of acls.
+   * @throws IOException if there is error.
+   */
+  @Override
+  public boolean setAcl(OzoneObj obj, List<OzoneAcl> acls) throws IOException {
+    Objects.requireNonNull(obj);
+    Objects.requireNonNull(acls);
+
+    if (!obj.getResourceType().equals(OzoneObj.ResourceType.VOLUME)) {
+      throw new IllegalArgumentException("Unexpected argument passed to " +
+          "VolumeManager. OzoneObj type:" + obj.getResourceType());
+    }
+    String volume = obj.getVolumeName();
+    metadataManager.getLock().acquireVolumeLock(volume);
+    try {
+      String dbVolumeKey = metadataManager.getVolumeKey(volume);
+      OmVolumeArgs volumeArgs =
+          metadataManager.getVolumeTable().get(dbVolumeKey);
+      if (volumeArgs == null) {
+        LOG.debug("volume:{} does not exist", volume);
+        throw new OMException("Volume " + volume + " is not found",
+            ResultCodes.VOLUME_NOT_FOUND);
+      }
+      volumeArgs.setAcls(acls);
+      metadataManager.getVolumeTable().put(dbVolumeKey, volumeArgs);
+
+      Preconditions.checkState(volume.equals(volumeArgs.getVolume()));
+      //return volumeArgs.getAclMap().hasAccess(userAcl);
+    } catch (IOException ex) {
+      if (!(ex instanceof OMException)) {
+        LOG.error("Set acl operation failed for volume:{} acls:{}",
+            volume, acls, ex);
+      }
+      throw ex;
+    } finally {
+      metadataManager.getLock().releaseVolumeLock(volume);
+    }
+
+    return true;
+  }
+
+  /**
+   * Returns list of ACLs for given Ozone object.
+   *
+   * @param obj Ozone object.
+   * @throws IOException if there is error.
+   */
+  @Override
+  public List<OzoneAcl> getAcl(OzoneObj obj) throws IOException {
+    Objects.requireNonNull(obj);
+
+    if (!obj.getResourceType().equals(OzoneObj.ResourceType.VOLUME)) {
+      throw new IllegalArgumentException("Unexpected argument passed to " +
+          "VolumeManager. OzoneObj type:" + obj.getResourceType());
+    }
+    String volume = obj.getVolumeName();
+    metadataManager.getLock().acquireVolumeLock(volume);
+    try {
+      String dbVolumeKey = metadataManager.getVolumeKey(volume);
+      OmVolumeArgs volumeArgs =
+          metadataManager.getVolumeTable().get(dbVolumeKey);
+      if (volumeArgs == null) {
+        LOG.debug("volume:{} does not exist", volume);
+        throw new OMException("Volume " + volume + " is not found",
+            ResultCodes.VOLUME_NOT_FOUND);
+      }
+
+      Preconditions.checkState(volume.equals(volumeArgs.getVolume()));
+      return volumeArgs.getAclMap().getAcl();
+    } catch (IOException ex) {
+      if (!(ex instanceof OMException)) {
+        LOG.error("Get acl operation failed for volume:{}", volume, ex);
+      }
+      throw ex;
+    } finally {
+      metadataManager.getLock().releaseVolumeLock(volume);
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS25 INS60 INS21 INS54 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS25 INS60 INS21 INS54 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS42 INS21 INS21 INS25 INS60 INS21 INS54 INS41 INS65 INS65 INS65 INS42 INS43 INS43 INS43 INS42 INS42 INS21 INS25 INS60 INS21 INS54 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS38 INS8 INS43 INS59 INS32 INS8 INS12 INS8 INS9 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS38 INS8 INS43 INS59 INS32 INS8 INS12 INS8 INS9 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS32 INS32 INS38 INS8 INS43 INS59 INS32 INS8 INS12 INS8 INS9 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS38 INS8 INS43 INS59 INS32 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS32 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS32 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS32 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS32 INS42 INS42 INS60 INS60 INS25 INS21 INS41 INS44 INS8 INS21 INS32 INS42 INS40 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS43 INS42 INS25 INS53 INS32 INS32 INS42 INS40 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS43 INS42 INS25 INS53 INS32 INS32 INS42 INS40 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS43 INS42 INS25 INS53 INS32 INS32 INS42 INS40 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS43 INS42 INS25 INS53 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS32 INS32 INS42 INS42 INS38 INS8 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS36 INS21 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS36 INS21 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS32 INS36 INS21 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS36 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS27 INS40 INS42 INS42 INS62 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS27 INS40 INS42 INS42 INS62 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS27 INS40 INS42 INS42 INS62 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS27 INS40 INS42 INS42 INS62 INS32 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42