Merging r1566359 through r1568420 from trunk.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1568437 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.base.Preconditions;
-  private final Conf conf;
-  enum PathStatus {
-    UNUSABLE,
-    SHORT_CIRCUIT_DISABLED,
+  public enum PathState {
+    UNUSABLE(false, false),
+    SHORT_CIRCUIT_DISABLED(true, false),
+    VALID(true, true);
+
+    PathState(boolean usableForDataTransfer, boolean usableForShortCircuit) {
+      this.usableForDataTransfer = usableForDataTransfer;
+      this.usableForShortCircuit = usableForShortCircuit;
+    }
+
+    public boolean getUsableForDataTransfer() {
+      return usableForDataTransfer;
+    }
+
+    public boolean getUsableForShortCircuit() {
+      return usableForShortCircuit;
+    }
+
+    private final boolean usableForDataTransfer;
+    private final boolean usableForShortCircuit;
+  }
+
+  public static class PathInfo {
+    private final static PathInfo NOT_CONFIGURED =
+          new PathInfo("", PathState.UNUSABLE);
+
+    final private String path;
+    final private PathState state;
+
+    PathInfo(String path, PathState state) {
+      this.path = path;
+      this.state = state;
+    }
+
+    public String getPath() {
+      return path;
+    }
+
+    public PathState getPathState() {
+      return state;
+    }
+    
+    @Override
+    public String toString() {
+      return new StringBuilder().append("PathInfo{path=").append(path).
+          append(", state=").append(state).append("}").toString();
+    }
-  Cache<String, PathStatus> pathInfo =
+  Cache<String, PathState> pathMap =
-    this.conf = conf;
-
-   * Create a DomainSocket.
-   * 
-   * @param addr        The address of the DataNode
-   * @param stream      The DFSInputStream the socket will be created for.
+   * Get information about a domain socket path.
-   * @return            null if the socket could not be created; the
-   *                    socket otherwise.  If there was an error while
-   *                    creating the socket, we will add the socket path
-   *                    to our list of failed domain socket paths.
+   * @param addr         The inet address to use.
+   * @param conf         The client configuration.
+   *
+   * @return             Information about the socket path.
-  DomainSocket create(InetSocketAddress addr, DFSInputStream stream) {
+  public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {
-    if (conf.domainSocketPath.isEmpty()) return null;
+    if (conf.domainSocketPath.isEmpty()) return PathInfo.NOT_CONFIGURED;
-      return null;
+      return PathInfo.NOT_CONFIGURED;
-    // UNIX domain sockets can only be used to talk to local peers
-    if (!DFSClient.isLocalAddress(addr)) return null;
-    if (DomainSocket.getLoadingFailureReason() != null) return null;
+    if (DomainSocket.getLoadingFailureReason() != null) {
+      return PathInfo.NOT_CONFIGURED;
+    }
+    // UNIX domain sockets can only be used to talk to local peers
+    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;
-    PathStatus info = pathInfo.getIfPresent(escapedPath);
-    if (info == PathStatus.UNUSABLE) {
-      // We tried to connect to this domain socket before, and it was totally
-      // unusable.
-      return null;
+    PathState status = pathMap.getIfPresent(escapedPath);
+    if (status == null) {
+      return new PathInfo(escapedPath, PathState.VALID);
+    } else {
+      return new PathInfo(escapedPath, status);
-    if ((!conf.domainSocketDataTraffic) &&
-        ((info == PathStatus.SHORT_CIRCUIT_DISABLED) || 
-            stream.shortCircuitForbidden())) {
-      // If we don't want to pass data over domain sockets, and we don't want
-      // to pass file descriptors over them either, we have no use for domain
-      // sockets.
-      return null;
-    }
+  }
+
+  public DomainSocket createSocket(PathInfo info, int socketTimeout) {
+    Preconditions.checkArgument(info.getPathState() != PathState.UNUSABLE);
-      sock = DomainSocket.connect(escapedPath);
-      sock.setAttribute(DomainSocket.RECEIVE_TIMEOUT, conf.socketTimeout);
+      sock = DomainSocket.connect(info.getPath());
+      sock.setAttribute(DomainSocket.RECEIVE_TIMEOUT, socketTimeout);
-        pathInfo.put(escapedPath, PathStatus.UNUSABLE);
+        pathMap.put(info.getPath(), PathState.UNUSABLE);
-    pathInfo.put(path, PathStatus.SHORT_CIRCUIT_DISABLED);
+    pathMap.put(path, PathState.SHORT_CIRCUIT_DISABLED);
-    pathInfo.put(path, PathStatus.UNUSABLE);
+    pathMap.put(path, PathState.UNUSABLE);

INS26 INS40 INS71 INS55 INS31 INS83 INS42 INS72 INS72 INS72 INS31 INS31 INS31 INS23 INS23 INS83 INS83 INS42 MOV23 INS23 INS23 INS31 INS31 INS31 INS31 UPD74 INS29 INS83 INS43 INS42 MOV44 INS44 INS8 INS83 UPD42 INS44 MOV44 MOV44 INS42 INS9 INS9 INS42 INS9 INS9 INS42 INS9 INS9 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 UPD43 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 UPD43 UPD42 INS65 INS65 INS65 INS65 INS42 INS43 INS42 MOV25 MOV25 MOV25 MOV25 MOV60 INS60 INS25 UPD43 UPD42 INS39 INS42 INS21 INS39 INS42 INS39 INS42 INS21 INS21 INS41 INS41 INS42 INS42 UPD42 UPD42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS42 INS42 INS41 UPD42 INS66 INS42 INS66 INS42 INS66 INS66 INS40 INS8 INS43 INS59 INS27 INS8 INS8 UPD42 INS32 INS7 INS7 INS42 INS42 INS43 INS45 INS40 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS40 INS41 INS40 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS42 INS27 UPD42 UPD40 UPD42 UPD40 INS22 INS42 INS22 INS42 INS42 INS22 INS42 INS22 INS42 INS32 INS42 INS40 INS40 INS42 INS42 INS42 INS14 INS14 INS32 UPD40 MOV40 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS45 INS43 INS42 INS40 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS42 UPD42 MOV42 UPD42 INS32 UPD40 INS32 INS42 INS42 INS42 UPD42 MOV42 INS14 INS42 INS45 INS43 INS42 DEL42 DEL42 DEL72 DEL42 DEL72 DEL71 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL33 DEL33 DEL33 DEL41 DEL33 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL27 DEL33 DEL41 DEL8 DEL25 DEL40 DEL38 DEL36 DEL42 DEL40 DEL27 DEL36 DEL42 DEL42 DEL32 DEL27 DEL36 DEL27 DEL33 DEL41 DEL8 DEL25 DEL40