YARN-8714. [Submarine] Support files/tarballs to be localized for a training job. (Zhankun Tang via wangda)

Change-Id: I845131273e52a9d81dbc813ea6d4af06b205e334

+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.FileUtil;
+  private File jobDir = null;
-    File jobDir = new File(jobsParentDir.getAbsolutePath(), jobName);
+    this.jobDir = new File(jobsParentDir.getAbsolutePath(), jobName);
-        throw new IOException("Failed to mkdirs for " + jobDir.getAbsolutePath());
+        throw new IOException("Failed to mkdirs for "
+            + jobDir.getAbsolutePath());
-  public Path getModelDir(String modelName, boolean create) throws IOException {
+  public Path getModelDir(String modelName, boolean create)
+      throws IOException {
-        throw new IOException("Failed to mkdirs for " + modelDir.getAbsolutePath());
+        throw new IOException("Failed to mkdirs for "
+            + modelDir.getAbsolutePath());
-  public FileSystem getFileSystem() throws IOException {
+  public FileSystem getDefaultFileSystem() throws IOException {
+  public FileSystem getFileSystemByUri(String uri) throws IOException {
+    return getDefaultFileSystem();
+  }
+
+  @Override
+
+  @Override
+  public boolean isDir(String uri) throws IOException {
+    return getDefaultFileSystem().getFileStatus(
+        new Path(convertToStagingPath(uri))).isDirectory();
+
+  }
+
+  @Override
+  public boolean isRemote(String uri) throws IOException {
+    String scheme = new Path(uri).toUri().getScheme();
+    if (null == scheme) {
+      return false;
+    }
+    return !scheme.startsWith("file://");
+  }
+
+  private String convertToStagingPath(String uri) throws IOException {
+    String ret = uri;
+    if (isRemote(uri)) {
+      String dirName = new Path(uri).getName();
+      ret = this.jobDir.getAbsolutePath()
+          + "/" + dirName;
+    }
+    return ret;
+  }
+
+  /**
+   * We use staging dir as mock HDFS dir.
+   * */
+  @Override
+  public boolean copyRemoteToLocal(String remoteUri, String localUri)
+      throws IOException {
+    // mock the copy from HDFS into a local copy
+    Path remoteToLocalDir = new Path(convertToStagingPath(remoteUri));
+    File old = new File(convertToStagingPath(localUri));
+    if (old.isDirectory() && old.exists()) {
+      if (!FileUtil.fullyDelete(old)) {
+        throw new IOException("Cannot delete temp dir:"
+            + old.getAbsolutePath());
+      }
+    }
+    return FileUtil.copy(getDefaultFileSystem(), remoteToLocalDir,
+        new File(localUri), false,
+        getDefaultFileSystem().getConf());
+  }
+
+  @Override
+  public boolean existsRemoteFile(Path uri) throws IOException {
+    String fakeLocalFilePath = this.jobDir.getAbsolutePath()
+        + "/" + uri.getName();
+    return new File(fakeLocalFilePath).exists();
+  }
+
+  @Override
+  public FileStatus getRemoteFileStatus(Path p) throws IOException {
+    return getDefaultFileSystem().getFileStatus(new Path(
+        convertToStagingPath(p.toUri().toString())));
+  }
+
+  @Override
+  public long getRemoteFileSize(String uri) throws IOException {
+    // 5 byte for this file to test
+    if (uri.equals("https://a/b/1.patch")) {
+      return 5;
+    }
+    return 100 * 1024 * 1024;
+  }
+

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 UPD42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS33 INS21 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS60 INS41 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS42 INS25 INS41 INS7 INS42 INS32 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS38 INS42 INS43 INS59 INS32 INS8 INS42 INS66 INS42 INS42 INS43 INS59 MOV43 INS59 INS27 INS8 INS32 INS42 INS43 INS59 INS32 INS42 INS32 INS42 INS32 INS8 INS27 INS22 MOV14 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS42 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS14 INS42 INS14 INS32 INS32 INS25 INS42 INS42 INS32 INS42 INS14 INS9 INS32 INS42 INS42 INS27 INS14 INS42 INS32 INS42 INS14 INS42 INS42 INS45 INS41 INS34 INS34 INS34 INS52 INS42 INS32 INS42 INS14 INS32 INS42 INS9 INS42 INS42 INS45 INS43 INS59 INS7 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS43 INS42 INS32 INS42 INS32 INS45 INS32 INS43 INS42 INS42 INS43 INS32 INS34 INS42 INS43 INS32 INS14 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS14 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS14 INS52 INS42 INS32 INS42 INS42 INS43 INS42 INS22 INS42 INS43 INS27 INS42 INS42 INS42 INS52 INS42 INS42 INS45 INS32 INS42 INS42 DEL42 DEL59 DEL60