HDFS-8900. Compact XAttrs to optimize memory footprint. (yliu)

+import java.util.ArrayList;
+import java.util.List;
+
-import org.apache.hadoop.hdfs.server.namenode.INode;
+import org.apache.hadoop.hdfs.XAttrHelper;
-  public static final ImmutableList<XAttr> EMPTY_ENTRY_LIST =
-      ImmutableList.of();
+  static final int PACK_THRESHOLD = 1024;
-  private final ImmutableList<XAttr> xAttrs;
+  /** The packed bytes for small size XAttrs. */
+  private byte[] attrs;
-  public XAttrFeature(ImmutableList<XAttr> xAttrs) {
-    this.xAttrs = xAttrs;
+  /**
+   * List to store large size XAttrs.
+   * Typically XAttr value size is small, so this
+   * list is null usually.
+   */
+  private ImmutableList<XAttr> xAttrs;
+
+  public XAttrFeature(List<XAttr> xAttrs) {
+    if (xAttrs != null && !xAttrs.isEmpty()) {
+      List<XAttr> toPack = new ArrayList<XAttr>();
+      ImmutableList.Builder<XAttr> b = null;
+      for (XAttr attr : xAttrs) {
+        if (attr.getValue() == null ||
+            attr.getValue().length <= PACK_THRESHOLD) {
+          toPack.add(attr);
+        } else {
+          if (b == null) {
+            b = ImmutableList.builder();
+          }
+          b.add(attr);
+        }
+      }
+      this.attrs = XAttrFormat.toBytes(toPack);
+      if (b != null) {
+        this.xAttrs = b.build();
+      }
+    }
-  public ImmutableList<XAttr> getXAttrs() {
-    return xAttrs;
+  /**
+   * Get the XAttrs.
+   * @return the XAttrs
+   */
+  public List<XAttr> getXAttrs() {
+    if (xAttrs == null) {
+      return XAttrFormat.toXAttrs(attrs);
+    } else {
+      if (attrs == null) {
+        return xAttrs;
+      } else {
+        List<XAttr> result = new ArrayList<>();
+        result.addAll(XAttrFormat.toXAttrs(attrs));
+        result.addAll(xAttrs);
+        return result;
+      }
+    }
+  }
+
+  /**
+   * Get XAttr by name with prefix.
+   * @param prefixedName xAttr name with prefix
+   * @return the XAttr
+   */
+  public XAttr getXAttr(String prefixedName) {
+    XAttr attr = XAttrFormat.getXAttr(attrs, prefixedName);
+    if (attr == null && xAttrs != null) {
+      XAttr toFind = XAttrHelper.buildXAttr(prefixedName);
+      for (XAttr a : xAttrs) {
+        if (a.equalsIgnoreValue(toFind)) {
+          attr = a;
+          break;
+        }
+      }
+    }
+    return attr;

INS26 INS26 INS40 INS40 UPD40 INS23 INS23 INS31 MOV83 MOV83 INS39 INS59 INS29 INS83 INS5 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS74 INS42 INS8 INS29 INS43 INS42 INS44 INS8 INS42 INS34 INS65 INS39 INS85 INS42 INS65 INS74 INS42 INS25 INS65 INS65 INS43 INS43 INS25 INS65 INS65 INS65 UPD42 MOV42 INS43 INS42 INS60 INS25 INS41 INS66 INS66 INS66 INS66 UPD43 MOV43 MOV43 INS27 INS8 INS66 INS66 INS42 INS42 INS27 INS8 INS8 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS42 UPD42 INS27 INS38 INS60 INS60 INS70 INS21 INS25 INS42 INS33 INS41 INS25 MOV42 INS42 INS32 INS27 INS27 INS60 INS70 INS42 INS33 INS32 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS7 INS27 MOV8 INS32 INS27 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS43 INS59 INS44 INS42 INS8 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS33 INS43 INS42 INS25 INS22 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS60 INS21 INS21 INS41 INS42 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS74 INS40 INS42 INS42 INS27 INS8 INS8 INS52 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS43 INS43 INS27 INS27 INS21 INS25 INS21 INS32 UPD43 MOV43 MOV43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS10 INS42 INS42 INS32 INS33 INS22 INS42 INS32 INS27 INS8 INS32 INS42 INS42 UPD42 INS74 INS42 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS32 MOV42 UPD42 MOV42 DEL83 DEL74 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL42 DEL74 DEL42 DEL44 DEL43 DEL43 DEL74 DEL42