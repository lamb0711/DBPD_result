Revert "HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao."

This reverts commit 872088c6e7e78534a8ffd1ea6e57b86faea3d6e1.

+import com.google.common.base.Splitter;
+import com.google.common.collect.ImmutableMap;
+import org.apache.hadoop.io.erasurecode.rawcoder.NativeRSRawErasureCoderFactory;
+import org.apache.hadoop.io.erasurecode.rawcoder.NativeXORRawErasureCoderFactory;
+import org.apache.hadoop.io.erasurecode.rawcoder.RSRawErasureCoderFactory;
+import org.apache.hadoop.io.erasurecode.rawcoder.RSLegacyRawErasureCoderFactory;
+import org.apache.hadoop.io.erasurecode.rawcoder.XORRawErasureCoderFactory;
+import java.util.Map;
+  public static final String IO_ERASURECODE_CODEC_RS_LEGACY_RAWCODERS_DEFAULT =
+      RSLegacyRawErasureCoderFactory.class.getCanonicalName();
+  public static final String IO_ERASURECODE_CODEC_RS_RAWCODERS_DEFAULT =
+      NativeRSRawErasureCoderFactory.class.getCanonicalName() +
+      "," + RSRawErasureCoderFactory.class.getCanonicalName();
+  public static final String IO_ERASURECODE_CODEC_XOR_RAWCODERS_DEFAULT =
+      NativeXORRawErasureCoderFactory.class.getCanonicalName() +
+      "," + XORRawErasureCoderFactory.class.getCanonicalName();
+
+  // Default coders for each codec names.
+  public static final Map<String, String> DEFAULT_CODERS_MAP = ImmutableMap.of(
+      "rs",         IO_ERASURECODE_CODEC_RS_RAWCODERS_DEFAULT,
+      "rs-legacy",  IO_ERASURECODE_CODEC_RS_LEGACY_RAWCODERS_DEFAULT,
+      "xor",        IO_ERASURECODE_CODEC_XOR_RAWCODERS_DEFAULT
+  );
-      String coderName, String codecName) {
+      Configuration conf, String rawCoderFactoryKey) {
-    fact = CodecRegistry.getInstance().
-            getCoderByName(codecName, coderName);
+    try {
+      Class<? extends RawErasureCoderFactory> factClass = conf.getClassByName(
+          rawCoderFactoryKey).asSubclass(RawErasureCoderFactory.class);
+      fact = factClass.newInstance();
+    } catch (ClassNotFoundException | InstantiationException |
+        IllegalAccessException e) {
+      throw new RuntimeException("Failed to create raw coder factory", e);
+    }
+
+    if (fact == null) {
+      throw new RuntimeException("Failed to create raw coder factory");
+    }
-  // Return a list of coder names
-  private static String[] getRawCoderNames(
-      Configuration conf, String codecName) {
-    return conf.getStrings(
-      IO_ERASURECODE_CODEC + codecName + ".rawcoders",
-      CodecRegistry.getInstance().getCoderNames(codecName)
+  // Return comma separated coder names
+  private static String getRawCoders(Configuration conf, String codec) {
+    return conf.get(
+      IO_ERASURECODE_CODEC + codec + ".rawcoders",
+      DEFAULT_CODERS_MAP.getOrDefault(codec, codec)
-      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {
-    String[] rawCoderNames = getRawCoderNames(conf, codecName);
-    for (String rawCoderName : rawCoderNames) {
+      Configuration conf, String codec, ErasureCoderOptions coderOptions) {
+    String coders = getRawCoders(conf, codec);
+    for (String factName : Splitter.on(",").split(coders)) {
-        if (rawCoderName != null) {
-          RawErasureCoderFactory fact = createRawCoderFactory(
-              rawCoderName, codecName);
+        if (factName != null) {
+          RawErasureCoderFactory fact = createRawCoderFactory(conf,
+              factName);
-        LOG.warn("Failed to create raw erasure encoder " + rawCoderName +
+        LOG.warn("Failed to create raw erasure encoder " + factName +
-       "encoder with given codec: " + codecName);
+       "encoder with given codec: " + codec);
-      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {
-    String[] coders = getRawCoderNames(conf, codecName);
-    for (String rawCoderName : coders) {
+          Configuration conf, String codec, ErasureCoderOptions coderOptions) {
+    String coders = getRawCoders(conf, codec);
+    for (String factName : Splitter.on(",").split(coders)) {
-        if (rawCoderName != null) {
-          RawErasureCoderFactory fact = createRawCoderFactory(
-              rawCoderName, codecName);
+        if (factName != null) {
+          RawErasureCoderFactory fact = createRawCoderFactory(conf,
+              factName);
-        LOG.warn("Failed to create raw erasure decoder " + rawCoderName +
+        LOG.warn("Failed to create raw erasure decoder " + factName +
-        "encoder with given codec: " + codecName);
+            "encoder with given codec: " + codec);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS74 INS59 MOV44 MOV44 INS8 MOV43 UPD42 MOV44 INS44 MOV44 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS43 MOV43 INS43 INS42 INS32 UPD42 MOV60 INS54 INS25 MOV41 INS43 UPD42 UPD42 MOV43 INS42 UPD42 INS57 INS42 INS32 INS45 INS32 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS8 INS12 INS27 INS8 INS42 MOV43 INS44 INS32 MOV43 INS44 INS32 INS43 INS57 INS42 INS57 INS42 INS57 INS42 INS57 INS42 INS60 INS21 INS44 INS8 INS42 INS33 INS53 UPD42 UPD42 MOV43 INS42 INS32 INS42 INS42 MOV43 MOV43 INS42 INS32 INS42 INS42 MOV43 INS42 INS43 INS43 INS43 INS43 INS74 INS59 INS7 INS84 INS42 INS53 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS45 UPD42 UPD42 UPD42 INS42 INS42 INS45 UPD42 INS42 INS42 INS42 INS42 INS43 INS76 INS42 INS32 MOV42 INS32 INS43 INS43 INS43 INS14 INS43 INS45 MOV44 MOV44 INS42 MOV43 INS32 INS42 INS57 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 UPD42 INS42 MOV43 INS43 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL44 DEL42 DEL44 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL85 DEL5 DEL32 DEL85 DEL5 DEL42 DEL42 DEL44 DEL85 DEL5 DEL42