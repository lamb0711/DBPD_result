HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.

- * <li>The client gets the file descriptors for the metadata file and the data 
+ * <li>The client gets the file descriptors for the metadata file and the data
-  
+
-  
+
-  
+
-   * 
+   *
-   * make it very difficult for the DirectBufferPool to re-use buffers. 
+   * make it very difficult for the DirectBufferPool to re-use buffers.
-    TraceScope scope = tracer.newScope(
-        "BlockReaderLocal#fillBuffer(" + block.getBlockId() + ")");
-    try {
+    try (TraceScope ignored = tracer.newScope(
+        "BlockReaderLocal#fillBuffer(" + block.getBlockId() + ")")) {
-          int checksumsNeeded = (total + bytesPerChecksum - 1) / bytesPerChecksum;
+          int checksumsNeeded = (total + bytesPerChecksum - 1) /
+              bytesPerChecksum;
-                  checksumPos + ", block file position " + startDataPos + " for " +
-                  "block " + block + " of file " + filename);
+                  checksumPos + ", block file position " + startDataPos +
+                  " for block " + block + " of file " + filename);
-    } finally {
-      scope.close();
-    if (verifyChecksum) {
-      if (storageType != null && storageType.isTransient()) {
-        // Checksums are not stored for replicas on transient storage.  We do not
-        // anchor, because we do not intend for client activity to block eviction
-        // from transient storage on the DataNode side.
-        return true;
-      } else {
-        return replica.addNoChecksumAnchor();
-      }
-    } else {
-      return true;
-    }
+    return !verifyChecksum ||
+        // Checksums are not stored for replicas on transient storage.  We do
+        // not anchor, because we do not intend for client activity to block
+        // eviction from transient storage on the DataNode side.
+        (storageType != null && storageType.isTransient()) ||
+        replica.addNoChecksumAnchor();
-   * 
+   *
-   * 
+   *
-      fillBuffer(dataBuf, canSkipChecksum);
+      fillBuffer(dataBuf, true);
-      fillBuffer(dataBuf, canSkipChecksum);
+      fillBuffer(dataBuf, false);
-   * @param buf              The buffer to read into. 
+   * @param buf              The buffer to read into.
-  public int available() throws IOException {
+  public int available() {
-   * 
-   * There are two kinds of ClientMmap objects we could fetch here: one that 
+   *
+   * There are two kinds of ClientMmap objects we could fetch here: one that
-   * 
+   *
-        (opts.contains(ReadOption.SKIP_CHECKSUMS) == false);
+        !opts.contains(ReadOption.SKIP_CHECKSUMS);
-  
+
-  
+

MOV8 UPD66 MOV41 UPD66 INS58 INS27 UPD66 UPD66 MOV43 MOV59 INS38 INS36 MOV32 UPD27 MOV27 UPD42 INS42 MOV27 INS42 INS38 INS9 INS9 MOV32 UPD45 DEL60 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL9 DEL8 DEL41 DEL8 DEL25 DEL42 DEL9 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL43 DEL9 DEL42 DEL36 DEL27