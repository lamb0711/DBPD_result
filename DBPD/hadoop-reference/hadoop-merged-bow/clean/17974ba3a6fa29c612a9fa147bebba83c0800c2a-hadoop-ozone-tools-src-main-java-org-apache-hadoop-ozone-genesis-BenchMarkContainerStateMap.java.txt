HDFS-13444. Ozone: Fix checkstyle issues in HDFS-7240. Contributed by Lokesh Jain.

+
-import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType;
-import static org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor;
-    public ContainerStateMap stateMap;
-    public AtomicInteger containerID;
+  private ContainerStateMap stateMap;
+  private AtomicInteger containerID;
-    @Setup(Level.Trial)
-    public void initialize() throws IOException {
-      stateMap = new ContainerStateMap();
-      Pipeline pipeline = createSingleNodePipeline(UUID.randomUUID().toString());
-      Preconditions.checkNotNull(pipeline, "Pipeline cannot be null.");
-      int currentCount = 1;
-      for (int x = 1; x < 1000; x++) {
-        try {
-          ContainerInfo containerInfo = new ContainerInfo.Builder()
-              .setContainerName(pipeline.getContainerName())
-              .setState(CLOSED)
-              .setPipeline(pipeline)
-              // This is bytes allocated for blocks inside container, not the
-              // container size
-              .setAllocatedBytes(0)
-              .setUsedBytes(0)
-              .setNumberOfKeys(0)
-              .setStateEnterTime(Time.monotonicNow())
-              .setOwner("OZONE")
-              .setContainerID(x)
-              .build();
-          stateMap.addContainer(containerInfo);
-          currentCount++;
-        } catch (SCMException e) {
-          e.printStackTrace();
-        }
-      }
-      for (int y = currentCount; y < 2000; y++) {
-        try {
-          ContainerInfo containerInfo = new ContainerInfo.Builder()
-              .setContainerName(pipeline.getContainerName())
-              .setState(OPEN)
-              .setPipeline(pipeline)
-              // This is bytes allocated for blocks inside container, not the
-              // container size
-              .setAllocatedBytes(0)
-              .setUsedBytes(0)
-              .setNumberOfKeys(0)
-              .setStateEnterTime(Time.monotonicNow())
-              .setOwner("OZONE")
-              .setContainerID(y)
-              .build();
-          stateMap.addContainer(containerInfo);
-          currentCount++;
-        } catch (SCMException e) {
-          e.printStackTrace();
-        }
-      }
+  @Setup(Level.Trial)
+  public void initialize() throws IOException {
+    stateMap = new ContainerStateMap();
+    Pipeline pipeline = createSingleNodePipeline(UUID.randomUUID().toString());
+    Preconditions.checkNotNull(pipeline, "Pipeline cannot be null.");
+    int currentCount = 1;
+    for (int x = 1; x < 1000; x++) {
-            .setContainerName(pipeline.getContainerName())
-            .setState(OPEN)
+            .setContainerName(pipeline.getContainerName()).setState(CLOSED)
-            .setAllocatedBytes(0)
-            .setUsedBytes(0)
-            .setNumberOfKeys(0)
-            .setStateEnterTime(Time.monotonicNow())
-            .setOwner("OZONE")
-            .setContainerID(currentCount++)
-            .build();
+            .setAllocatedBytes(0).setUsedBytes(0).setNumberOfKeys(0)
+            .setStateEnterTime(Time.monotonicNow()).setOwner("OZONE")
+            .setContainerID(x).build();
+        currentCount++;
-
-      containerID = new AtomicInteger(currentCount++);
-
+    }
+    for (int y = currentCount; y < 2000; y++) {
+      try {
+        ContainerInfo containerInfo = new ContainerInfo.Builder()
+            .setContainerName(pipeline.getContainerName()).setState(OPEN)
+            .setPipeline(pipeline)
+            // This is bytes allocated for blocks inside container, not the
+            // container size
+            .setAllocatedBytes(0).setUsedBytes(0).setNumberOfKeys(0)
+            .setStateEnterTime(Time.monotonicNow()).setOwner("OZONE")
+            .setContainerID(y).build();
+        stateMap.addContainer(containerInfo);
+        currentCount++;
+      } catch (SCMException e) {
+        e.printStackTrace();
+      }
+    }
+    try {
+      ContainerInfo containerInfo = new ContainerInfo.Builder()
+          .setContainerName(pipeline.getContainerName()).setState(OPEN)
+          .setPipeline(pipeline)
+          // This is bytes allocated for blocks inside container, not the
+          // container size
+          .setAllocatedBytes(0).setUsedBytes(0).setNumberOfKeys(0)
+          .setStateEnterTime(Time.monotonicNow()).setOwner("OZONE")
+          .setContainerID(currentCount++).build();
+      stateMap.addContainer(containerInfo);
+    } catch (SCMException e) {
+      e.printStackTrace();
-  public static Pipeline createSingleNodePipeline(String containerName) throws
-      IOException {
+    containerID = new AtomicInteger(currentCount++);
+
+  }
+
+  public static Pipeline createSingleNodePipeline(String containerName)
+      throws IOException {
-  public static Pipeline createPipeline(
-      String containerName, Iterable<DatanodeDetails> ids)
-      throws IOException {
+  public static Pipeline createPipeline(String containerName,
+      Iterable<DatanodeDetails> ids) throws IOException {
-    for (; i.hasNext(); ) {
+    for (; i.hasNext();) {
-  public void createContainerBenchMark(BenchMarkContainerStateMap state, Blackhole bh)
-      throws IOException {
+  public void createContainerBenchMark(BenchMarkContainerStateMap state,
+      Blackhole bh) throws IOException {
-        .setContainerName(pipeline.getContainerName())
-        .setState(CLOSED)
+        .setContainerName(pipeline.getContainerName()).setState(CLOSED)
-        .setAllocatedBytes(0)
-        .setUsedBytes(0)
-        .setNumberOfKeys(0)
-        .setStateEnterTime(Time.monotonicNow())
-        .setOwner("OZONE")
-        .setContainerID(cid)
-        .build();
+        .setAllocatedBytes(0).setUsedBytes(0).setNumberOfKeys(0)
+        .setStateEnterTime(Time.monotonicNow()).setOwner("OZONE")
+        .setContainerID(cid).build();
-    bh.consume(state.stateMap.getMatchingContainerIDs(OPEN, "BILBO",
-        ReplicationFactor.ONE, ReplicationType.STAND_ALONE));
+    bh.consume(state.stateMap
+        .getMatchingContainerIDs(OPEN, "BILBO", ReplicationFactor.ONE,
+            ReplicationType.STAND_ALONE));

UPD83 UPD83 DEL40 DEL26 DEL40 DEL26