HDFS-12474. Ozone: SCM: Handling container report with key count and container usage. Contributed by Nanda kumar.

+import org.apache.hadoop.ozone.protocol.commands.SendContainerCommand;
-    String datanodeID = hbItem.getDatanodeID().getDatanodeUuid();
+    DatanodeID datanodeID = hbItem.getDatanodeID();
+    String datanodeUuid = datanodeID.getDatanodeUuid();
-          datanodeID, processTimestamp - recvTimestamp);
+          datanodeUuid, processTimestamp - recvTimestamp);
-    if (healthyNodes.containsKey(datanodeID)) {
-      healthyNodes.put(datanodeID, processTimestamp);
-      updateNodeStat(datanodeID, nodeReport);
+    if (healthyNodes.containsKey(datanodeUuid)) {
+      healthyNodes.put(datanodeUuid, processTimestamp);
+      updateNodeStat(datanodeUuid, nodeReport);
+      updateCommandQueue(datanodeID,
+          hbItem.getContainerReportState().getState());
-    if (staleNodes.containsKey(datanodeID)) {
-      staleNodes.remove(datanodeID);
-      healthyNodes.put(datanodeID, processTimestamp);
+    if (staleNodes.containsKey(datanodeUuid)) {
+      staleNodes.remove(datanodeUuid);
+      healthyNodes.put(datanodeUuid, processTimestamp);
-      updateNodeStat(datanodeID, nodeReport);
+      updateNodeStat(datanodeUuid, nodeReport);
+      updateCommandQueue(datanodeID,
+          hbItem.getContainerReportState().getState());
-    if (deadNodes.containsKey(datanodeID)) {
-      deadNodes.remove(datanodeID);
-      healthyNodes.put(datanodeID, processTimestamp);
+    if (deadNodes.containsKey(datanodeUuid)) {
+      deadNodes.remove(datanodeUuid);
+      healthyNodes.put(datanodeUuid, processTimestamp);
-      updateNodeStat(datanodeID, nodeReport);
+      updateNodeStat(datanodeUuid, nodeReport);
+      updateCommandQueue(datanodeID,
+          hbItem.getContainerReportState().getState());
-    LOG.warn("SCM receive heartbeat from unregistered datanode {}", datanodeID);
+    LOG.warn("SCM receive heartbeat from unregistered datanode {}",
+        datanodeUuid);
-  private void updateNodeStat(String datanodeID, SCMNodeReport nodeReport) {
-    SCMNodeStat stat = nodeStats.get(datanodeID);
+  private void updateNodeStat(String datanodeUuid, SCMNodeReport nodeReport) {
+    SCMNodeStat stat = nodeStats.get(datanodeUuid);
-          "dead datanode {}", datanodeID);
+          "dead datanode {}", datanodeUuid);
-      nodeStats.put(datanodeID, stat);
+      nodeStats.put(datanodeUuid, stat);
+  private void updateCommandQueue(DatanodeID datanodeID,
+                                  ReportState.states containerReportState) {
+    if (containerReportState != null) {
+      switch (containerReportState) {
+      case completeContinerReport:
+        commandQueue.addCommand(datanodeID,
+            SendContainerCommand.newBuilder().build());
+        return;
+      case deltaContainerReport:
+      case noContainerReports:
+      default:
+        // do nothing
+      }
+    }
+  }
+

INS26 INS40 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS60 UPD42 INS43 INS42 INS43 INS42 INS25 INS43 MOV43 INS59 INS42 INS40 INS27 INS8 INS42 MOV32 INS42 INS32 UPD42 INS21 UPD42 INS21 UPD42 INS21 UPD42 INS42 INS33 INS50 INS42 INS42 INS32 INS32 INS32 UPD42 INS42 INS49 INS21 INS41 INS49 INS49 INS49 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL32