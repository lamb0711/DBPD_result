YARN-996. REST API support for node resource configuration. Contributed by Inigo Goiri.

+import java.util.Collection;
+import java.util.Map.Entry;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ResourceOptionInfo;
+   * Get the active subclusters in the federation.
+   * @return Map from subcluster id to its info.
+   * @throws NotFoundException If the subclusters cannot be found.
+   */
+  private Map<SubClusterId, SubClusterInfo> getActiveSubclusters()
+      throws NotFoundException {
+    try {
+      return federationFacade.getSubClusters(true);
+    } catch (YarnException e) {
+      throw new NotFoundException(e.getMessage());
+    }
+  }
+
+  /**
-    Map<SubClusterId, SubClusterInfo> subClustersActive = null;
-    try {
-      subClustersActive = federationFacade.getSubClusters(true);
-    } catch (YarnException e) {
-      throw new NotFoundException(e.getMessage());
-    }
-
+    final Map<SubClusterId, SubClusterInfo> subClustersActive =
+        getActiveSubclusters();
+    final Map<SubClusterInfo, NodeInfo> results =
+        getNode(subClustersActive.values(), nodeId);
-    // Send the requests in parallel
-    CompletionService<NodeInfo> compSvc =
-        new ExecutorCompletionService<NodeInfo>(this.threadpool);
-
-    for (final SubClusterInfo info : subClustersActive.values()) {
-      compSvc.submit(new Callable<NodeInfo>() {
-        @Override
-        public NodeInfo call() {
-          DefaultRequestInterceptorREST interceptor =
-              getOrCreateInterceptorForSubCluster(
-                  info.getSubClusterId(), info.getRMWebServiceAddress());
-          try {
-            NodeInfo nodeInfo = interceptor.getNode(nodeId);
-            return nodeInfo;
-          } catch (Exception e) {
-            LOG.error("Subcluster {} failed to return nodeInfo.",
-                info.getSubClusterId());
-            return null;
-          }
-        }
-      });
-    }
-
-    // Collect all the responses in parallel
+    // Collect the responses
-    for (int i = 0; i < subClustersActive.size(); i++) {
+    for (NodeInfo nodeResponse : results.values()) {
-        Future<NodeInfo> future = compSvc.take();
-        NodeInfo nodeResponse = future.get();
-
-        // Check if the node was found in this SubCluster
-        if (nodeResponse != null) {
-          // Check if the node was already found in a different SubCluster and
-          // it has an old health report
-          if (nodeInfo == null || nodeInfo.getLastHealthUpdate() <
-              nodeResponse.getLastHealthUpdate()) {
-            nodeInfo = nodeResponse;
-          }
+        // Check if the node was already found in a different SubCluster and
+        // it has an old health report
+        if (nodeInfo == null || nodeInfo.getLastHealthUpdate() <
+            nodeResponse.getLastHealthUpdate()) {
+          nodeInfo = nodeResponse;
+
+   * Get a node and the subcluster where it is.
+   * @param subClusters Subclusters where to search.
+   * @param nodeId Identifier of the node we are looking for.
+   * @return Map between subcluster and node.
+   */
+  private Map<SubClusterInfo, NodeInfo> getNode(
+      Collection<SubClusterInfo> subClusters, String nodeId) {
+
+    // Send the requests in parallel
+    CompletionService<NodeInfo> compSvc =
+        new ExecutorCompletionService<NodeInfo>(this.threadpool);
+    final Map<SubClusterInfo, Future<NodeInfo>> futures = new HashMap<>();
+    for (final SubClusterInfo subcluster : subClusters) {
+      final SubClusterId subclusterId = subcluster.getSubClusterId();
+      Future<NodeInfo> result = compSvc.submit(() -> {
+        try {
+          DefaultRequestInterceptorREST interceptor =
+              getOrCreateInterceptorForSubCluster(
+                  subclusterId, subcluster.getRMWebServiceAddress());
+          return interceptor.getNode(nodeId);
+        } catch (Exception e) {
+          LOG.error("Subcluster {} failed to return nodeInfo.",
+              subclusterId);
+          return null;
+        }
+      });
+      futures.put(subcluster, result);
+    }
+
+    // Collect the results
+    final Map<SubClusterInfo, NodeInfo> results = new HashMap<>();
+    for (Entry<SubClusterInfo, Future<NodeInfo>> entry : futures.entrySet()) {
+      try {
+        final Future<NodeInfo> future = entry.getValue();
+        final NodeInfo nodeInfo = future.get();
+        // Check if the node was found in this SubCluster
+        if (nodeInfo != null) {
+          SubClusterInfo subcluster = entry.getKey();
+          results.put(subcluster, nodeInfo);
+        }
+      } catch (Throwable e) {
+        LOG.warn("Failed to get node report ", e);
+      }
+    }
+
+    return results;
+  }
+
+  /**
+   * Get the subcluster a node belongs to.
+   * @param nodeId Identifier of the node we are looking for.
+   * @return The subcluster containing the node.
+   * @throws NotFoundException If the node cannot be found.
+   */
+  private SubClusterInfo getNodeSubcluster(String nodeId)
+      throws NotFoundException {
+
+    final Collection<SubClusterInfo> subClusters =
+        getActiveSubclusters().values();
+    final Map<SubClusterInfo, NodeInfo> results =
+        getNode(subClusters, nodeId);
+    SubClusterInfo subcluster = null;
+    NodeInfo nodeInfo = null;
+    for (Entry<SubClusterInfo, NodeInfo> entry : results.entrySet()) {
+      NodeInfo nodeResponse = entry.getValue();
+      if (nodeInfo == null || nodeInfo.getLastHealthUpdate() <
+          nodeResponse.getLastHealthUpdate()) {
+        subcluster = entry.getKey();
+        nodeInfo = nodeResponse;
+      }
+    }
+    if (subcluster == null) {
+      throw new NotFoundException(
+          "Cannot find " + nodeId + " in any subcluster");
+    }
+    return subcluster;
+  }
+
+  /**
-    Map<SubClusterId, SubClusterInfo> subClustersActive = null;
+    final Map<SubClusterId, SubClusterInfo> subClustersActive;
-      subClustersActive = federationFacade.getSubClusters(true);
-    } catch (YarnException e) {
+      subClustersActive = getActiveSubclusters();
+    } catch (Exception e) {
+  public ResourceInfo updateNodeResource(HttpServletRequest hsr,
+      String nodeId, ResourceOptionInfo resourceOption) {
+    SubClusterInfo subcluster = getNodeSubcluster(nodeId);
+    DefaultRequestInterceptorREST interceptor =
+        getOrCreateInterceptorForSubCluster(
+            subcluster.getSubClusterId(),
+            subcluster.getRMWebServiceAddress());
+    return interceptor.updateNodeResource(hsr, nodeId, resourceOption);
+  }
+
+  @Override
-    Map<SubClusterId, SubClusterInfo> subClustersActive = null;
+    final Map<SubClusterId, SubClusterInfo> subClustersActive;
-      subClustersActive = federationFacade.getSubClusters(true);
-    } catch (YarnException e) {
+      subClustersActive = getActiveSubclusters();
+    } catch (Exception e) {

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 MOV74 INS42 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 MOV78 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS42 MOV54 INS60 INS60 INS70 INS65 INS65 INS65 INS65 INS43 INS43 MOV43 INS74 INS42 INS43 INS42 MOV60 INS60 INS70 INS60 INS70 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS70 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS41 INS66 INS66 INS42 INS66 INS83 INS74 MOV59 INS83 INS74 INS59 INS44 INS32 MOV8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS83 INS74 INS59 INS44 INS42 INS8 INS83 INS74 INS59 INS44 INS32 INS8 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS83 INS74 INS59 INS83 INS74 INS59 INS43 INS59 INS43 INS59 INS44 INS32 INS8 INS27 INS8 INS42 INS83 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS83 INS41 INS43 INS43 UPD43 MOV43 INS42 INS32 INS43 MOV43 MOV43 INS42 INS32 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS54 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS83 INS43 INS42 INS60 INS60 INS21 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS54 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS33 INS74 INS42 INS42 INS42 INS60 INS25 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 MOV32 UPD42 MOV42 MOV8 MOV12 INS42 INS42 INS43 INS43 INS74 INS42 INS83 INS43 INS59 MOV74 INS59 INS32 INS42 INS42 INS42 INS74 INS43 INS43 INS74 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS14 UPD43 INS42 INS42 INS42 INS32 INS32 UPD43 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS43 INS60 MOV60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS21 INS43 INS27 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS83 INS74 INS59 INS83 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS33 INS32 INS32 INS7 INS7 INS42 INS45 INS42 INS45 UPD42 UPD42 INS8 INS43 INS43 INS42 INS32 UPD42 INS42 INS33 INS60 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS54 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS60 INS41 MOV44 INS8 INS42 INS42 MOV43 INS59 MOV32 INS21 MOV41 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL33 DEL59 DEL60 DEL83 DEL42 DEL44 DEL42 DEL42 DEL74 DEL83 DEL42 DEL60 DEL42 DEL59 DEL60 DEL42 DEL41 DEL8 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL70 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL54 DEL8 DEL24 DEL33 DEL42 DEL9 DEL33 DEL42 DEL9