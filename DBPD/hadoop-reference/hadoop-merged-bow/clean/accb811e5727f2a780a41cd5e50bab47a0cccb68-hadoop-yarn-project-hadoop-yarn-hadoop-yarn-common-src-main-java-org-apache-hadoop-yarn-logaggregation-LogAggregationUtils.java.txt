YARN-6929.  Improved partition algorithm for yarn remote-app-log-dir.
            Contributed by Prabhu Joseph

+  private static final String BUCKET_SUFFIX = "bucket_";
-    return new Path(getRemoteLogSuffixedDir(remoteRootLogDir, user, suffix),
-        appId.toString());
+    return new Path(getRemoteBucketDir(remoteRootLogDir, user, suffix,
+        appId), appId.toString());
+  }
+
+  /**
+   * Gets the older remote app log dir.
+   * @param appId the application id
+   * @param user the application owner
+   * @param remoteRootLogDir the aggregated log remote root log dir
+   * @param suffix the log directory suffix
+   * @return the remote application specific log dir.
+   */
+  public static Path getOlderRemoteAppLogDir(ApplicationId appId,
+      String user, Path remoteRootLogDir, String suffix) {
+    return new Path(getOlderRemoteLogSuffixedDir(remoteRootLogDir, user,
+         suffix), appId.toString());
+    suffix = getBucketSuffix() + suffix;
+    return new Path(getRemoteLogUserDir(remoteRootLogDir, user), suffix);
+  }
+
+  /**
+   * Gets the older remote suffixed log dir for the user.
+   * @param remoteRootLogDir the aggregated log remote root log dir
+   * @param user the application owner
+   * @param suffix the log dir suffix
+   * @return the older remote suffixed log dir.
+   */
+  public static Path getOlderRemoteLogSuffixedDir(Path remoteRootLogDir,
+      String user, String suffix) {
+   * Gets the remote log user's bucket dir.
+   * @param remoteRootLogDir the aggregated log remote root log dir
+   * @param user the application owner
+   * @param suffix the log dir suffix
+   * @param appId the application id
+   * @return the remote log per user per cluster timestamp per bucket dir.
+   */
+  public static Path getRemoteBucketDir(Path remoteRootLogDir, String user,
+      String suffix, ApplicationId appId) {
+    int bucket = appId.getId() % 10000;
+    String bucketDir = String.format("%04d", bucket);
+    return new Path(getRemoteLogSuffixedDir(remoteRootLogDir,
+       user, suffix), bucketDir);
+  }
+
+  /**
+   * Check if older Application Log Directory has to be included.
+   * @param conf the configuration
+   * @return Is Older App Log Dir enabled?
+   */
+  public static boolean isOlderPathEnabled(Configuration conf) {
+    return conf.getBoolean(YarnConfiguration.
+         NM_REMOTE_APP_LOG_DIR_INCLUDE_OLDER,
+             YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_INCLUDE_OLDER);
+  }
+
+  /**
+  /**
+   * Returns the bucket suffix component of the log dir.
+   * @return the bucket suffix which appended to user log dir
+   */
+  public static String getBucketSuffix() {
+    return BUCKET_SUFFIX;
+  }
+
+   * @param remoteAppLogDir the application log directory
+   * @param appId the applicationId
+   * @param appOwner the application owner
+   * @return the iterator of available log files
+   * @throws IOException if there is no log file directory
+   */
+  public static RemoteIterator<FileStatus> getNodeFiles(Configuration conf,
+      Path remoteAppLogDir, ApplicationId appId, String appOwner)
+      throws IOException {
+    Path qualifiedLogDir =
+        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);
+    return FileContext.getFileContext(
+        qualifiedLogDir.toUri(), conf).listStatus(remoteAppLogDir);
+  }
+
+  /**
+   * Get all available log files under remote app log directory.
+   * @param conf the configuration
+    RemoteIterator<FileStatus> nodeFilesCur= null;
+    RemoteIterator<FileStatus> nodeFilesPrev = null;
+    StringBuilder diagnosticsMsg = new StringBuilder();
+
+    // Get Node Files from new app log dir
-    RemoteIterator<FileStatus> nodeFiles = null;
-    Path qualifiedLogDir =
-        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);
-    nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-        conf).listStatus(remoteAppLogDir);
-    return nodeFiles;
+    try {
+      nodeFilesCur = getNodeFiles(conf, remoteAppLogDir, appId, appOwner);
+    } catch (IOException ex) {
+      diagnosticsMsg.append(ex.getMessage() + "\n");
+    }
+
+    // Get Node Files from old app log dir
+    if (isOlderPathEnabled(conf)) {
+      remoteAppLogDir = getOlderRemoteAppLogDir(appId, appOwner,
+              remoteRootLogDir, suffix);
+      try {
+        nodeFilesPrev = getNodeFiles(conf,
+                remoteAppLogDir, appId, appOwner);
+      } catch (IOException ex) {
+        diagnosticsMsg.append(ex.getMessage() + "\n");
+      }
+
+      // Return older files if new app log dir does not exist
+      if (nodeFilesCur == null) {
+        return nodeFilesPrev;
+      } else if (nodeFilesPrev != null) {
+        // Return both new and old node files combined
+        RemoteIterator<FileStatus> curDir = nodeFilesCur;
+        RemoteIterator<FileStatus> prevDir = nodeFilesPrev;
+        RemoteIterator<FileStatus> nodeFilesCombined = new
+            RemoteIterator<FileStatus>() {
+            @Override
+            public boolean hasNext() throws IOException {
+              return prevDir.hasNext() || curDir.hasNext();
+            }
+
+            @Override
+            public FileStatus next() throws IOException {
+              return prevDir.hasNext() ? prevDir.next() : curDir.next();
+            }
+        };
+        return nodeFilesCombined;
+      }
+    }
+
+    // Error reading from or new app log dir does not exist
+    if (nodeFilesCur == null) {
+      throw new IOException(diagnosticsMsg.toString());
+    }
+    return nodeFilesCur;
+    StringBuilder diagnosticsMsg = new StringBuilder();
-    nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(
-        qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));
+
+    // Get Node Files from new app log dir
+    try {
+      nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(
+          qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));
+    } catch (IOException ex) {
+      diagnosticsMsg.append(ex.getMessage() + "\n");
+    }
+
+    // Get Node Files from old app log dir
+    if (isOlderPathEnabled(conf)) {
+      remoteAppLogDir = getOlderRemoteAppLogDir(appId, appOwner,
+          remoteRootLogDir, suffix);
+      qualifiedLogDir = FileContext.getFileContext(conf).
+          makeQualified(remoteAppLogDir);
+      try {
+        nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(
+            qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));
+      } catch (IOException ex) {
+        diagnosticsMsg.append(ex.getMessage() + "\n");
+      }
+    }
+
+    // Error reading from or new app log dir does not exist
+    if (nodeFiles.isEmpty()) {
+      throw new IOException(diagnosticsMsg.toString());
+    }
-    Path remoteAppLogDir = getRemoteAppLogDir(conf, appId, appOwner);
-    RemoteIterator<FileStatus> nodeFiles = null;
-    Path qualifiedLogDir =
-        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);
-    nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(),
-        conf).listStatus(remoteAppLogDir);
-    return nodeFiles;
+    String suffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);
+    Path remoteRootLogDir = new Path(conf.get(
+        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,
+            YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
+    return getRemoteNodeFileDir(conf, appId, appOwner,
+        remoteRootLogDir, suffix);

INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 MOV83 MOV83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 MOV29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS29 UPD42 INS29 INS83 INS83 INS43 UPD42 MOV42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS43 MOV8 MOV29 INS83 INS83 MOV74 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 INS8 INS42 INS42 INS45 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 MOV41 INS65 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV60 INS60 MOV60 INS54 INS25 INS25 MOV41 INS60 INS54 INS25 INS25 INS60 INS60 INS41 INS14 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS14 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 MOV42 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 MOV32 INS43 INS59 INS8 INS12 INS32 INS8 INS27 INS8 UPD42 INS43 INS59 INS8 INS12 INS32 INS8 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS43 INS32 MOV32 INS43 INS32 INS32 INS42 INS27 INS43 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS40 UPD42 UPD42 INS42 INS42 INS14 INS21 INS44 INS8 INS42 MOV42 INS21 INS54 INS25 INS42 INS33 INS53 INS42 INS42 INS14 MOV21 INS44 INS8 INS42 INS42 INS21 INS21 INS54 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS45 INS42 INS43 INS7 INS43 INS42 INS21 INS7 INS8 INS12 INS27 INS8 INS25 INS14 INS43 INS43 INS42 INS21 INS7 INS7 INS8 INS12 INS14 INS42 INS42 INS42 INS43 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS44 INS8 INS42 INS33 INS41 INS27 INS8 INS43 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS44 INS8 INS43 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS42 INS42 INS33 INS60 INS60 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS45 INS42 INS32 INS42 INS32 INS74 INS59 INS74 INS59 INS74 INS59 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS1 INS32 INS42 INS42 INS32 INS45 INS42 INS42 INS43 INS43 INS31 INS31 INS32 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS27 INS16 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL7 DEL21 DEL8 DEL31