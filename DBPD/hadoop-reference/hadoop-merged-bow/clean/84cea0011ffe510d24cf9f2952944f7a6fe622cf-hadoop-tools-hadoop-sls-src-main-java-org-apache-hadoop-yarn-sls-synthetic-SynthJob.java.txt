YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)

-import org.apache.commons.math3.distribution.LogNormalDistribution;
-import org.apache.hadoop.mapreduce.MRJobConfig;
-import org.apache.hadoop.tools.rumen.*;
+import org.apache.hadoop.tools.rumen.JobStory;
+import org.apache.hadoop.tools.rumen.MapTaskAttemptInfo;
+import org.apache.hadoop.tools.rumen.ReduceTaskAttemptInfo;
+import org.apache.hadoop.tools.rumen.TaskAttemptInfo;
+import org.apache.hadoop.tools.rumen.TaskInfo;
+import org.apache.hadoop.yarn.sls.appmaster.MRAMSimulator;
-import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+  private static final long MIN_MEMORY = 1024;
+  private static final long MIN_VCORES = 1;
+
-  private final SynthJobClass jobClass;
+  private final SynthTraceJobProducer.JobDefinition jobDef;
+
+  private String type;
-  private final int numMapTasks;
-  private final int numRedTasks;
-  private final long mapMaxMemory;
-  private final long reduceMaxMemory;
-  private final long mapMaxVcores;
-  private final long reduceMaxVcores;
-  private final long[] mapRuntime;
-  private final float[] reduceRuntime;
-  private long totMapRuntime;
-  private long totRedRuntime;
+  private Map<String, String> params;
-  public SynthJob(JDKRandomGenerator rand, Configuration conf,
-      SynthJobClass jobClass, long actualSubmissionTime) {
+  private long totalSlotTime = 0;
+
+  // task information
+  private List<SynthTask> tasks = new ArrayList<>();
+  private Map<String, List<SynthTask>> taskByType = new HashMap<>();
+  private Map<String, Integer> taskCounts = new HashMap<>();
+  private Map<String, Long> taskMemory = new HashMap<>();
+  private Map<String, Long> taskVcores = new HashMap<>();
+
+  /**
+   * Nested class used to represent a task instance in a job. Each task
+   * corresponds to one container allocation for the job.
+   */
+  public static final class SynthTask{
+    private String type;
+    private long time;
+    private long maxMemory;
+    private long maxVcores;
+    private int priority;
+
+    private SynthTask(String type, long time, long maxMemory, long maxVcores,
+        int priority){
+      this.type = type;
+      this.time = time;
+      this.maxMemory = maxMemory;
+      this.maxVcores = maxVcores;
+      this.priority = priority;
+    }
+
+    public String getType(){
+      return type;
+    }
+
+    public long getTime(){
+      return time;
+    }
+
+    public long getMemory(){
+      return maxMemory;
+    }
+
+    public long getVcores(){
+      return maxVcores;
+    }
+
+    public int getPriority(){
+      return priority;
+    }
+
+    @Override
+    public String toString(){
+      return String.format("[task]\ttype: %1$-10s\ttime: %2$3s\tmemory: "
+              + "%3$4s\tvcores: %4$2s%n", getType(), getTime(), getMemory(),
+          getVcores());
+    }
+  }
+
+
+  protected SynthJob(JDKRandomGenerator rand, Configuration conf,
+      SynthTraceJobProducer.JobDefinition jobDef,
+      String queue, long actualSubmissionTime) {
-    this.jobClass = jobClass;
+    this.jobDef = jobDef;
-    this.duration = MILLISECONDS.convert(jobClass.getDur(), SECONDS);
-    this.numMapTasks = jobClass.getMtasks();
-    this.numRedTasks = jobClass.getRtasks();
+    this.queueName = queue;
-    // sample memory distributions, correct for sub-minAlloc sizes
-    long tempMapMaxMemory = jobClass.getMapMaxMemory();
-    this.mapMaxMemory = tempMapMaxMemory < MRJobConfig.DEFAULT_MAP_MEMORY_MB
-        ? MRJobConfig.DEFAULT_MAP_MEMORY_MB : tempMapMaxMemory;
-    long tempReduceMaxMemory = jobClass.getReduceMaxMemory();
-    this.reduceMaxMemory =
-            tempReduceMaxMemory < MRJobConfig.DEFAULT_REDUCE_MEMORY_MB
-            ? MRJobConfig.DEFAULT_REDUCE_MEMORY_MB : tempReduceMaxMemory;
-
-    // sample vcores distributions, correct for sub-minAlloc sizes
-    long tempMapMaxVCores = jobClass.getMapMaxVcores();
-    this.mapMaxVcores = tempMapMaxVCores < MRJobConfig.DEFAULT_MAP_CPU_VCORES
-        ? MRJobConfig.DEFAULT_MAP_CPU_VCORES : tempMapMaxVCores;
-    long tempReduceMaxVcores = jobClass.getReduceMaxVcores();
-    this.reduceMaxVcores =
-        tempReduceMaxVcores < MRJobConfig.DEFAULT_REDUCE_CPU_VCORES
-            ? MRJobConfig.DEFAULT_REDUCE_CPU_VCORES : tempReduceMaxVcores;
-
-    if (numMapTasks > 0) {
-      conf.setLong(MRJobConfig.MAP_MEMORY_MB, this.mapMaxMemory);
-      conf.set(MRJobConfig.MAP_JAVA_OPTS,
-          "-Xmx" + (this.mapMaxMemory - 100) + "m");
-    }
-
-    if (numRedTasks > 0) {
-      conf.setLong(MRJobConfig.REDUCE_MEMORY_MB, this.reduceMaxMemory);
-      conf.set(MRJobConfig.REDUCE_JAVA_OPTS,
-          "-Xmx" + (this.reduceMaxMemory - 100) + "m");
-    }
+    this.duration = MILLISECONDS.convert(jobDef.duration.getInt(),
+        SECONDS);
-        (rand.nextDouble() <= jobClass.jobClass.chance_of_reservation);
+        (rand.nextDouble() <= jobDef.reservation.getDouble());
-    LogNormalDistribution deadlineFactor =
-        SynthUtils.getLogNormalDist(rand, jobClass.jobClass.deadline_factor_avg,
-            jobClass.jobClass.deadline_factor_stddev);
+    double deadlineFactorSample = jobDef.deadline_factor.getDouble();
-    double deadlineFactorSample =
-        (deadlineFactor != null) ? deadlineFactor.sample() : -1;
-
-    this.queueName = jobClass.workload.getQueueName();
+    this.type = jobDef.type;
+    this.params = jobDef.params;
+
-    name = String.format(jobClass.getClassName() + "_%06d", id);
+    name = String.format(jobDef.class_name + "_%06d", id);
-    // generate map and reduce runtimes
-    mapRuntime = new long[numMapTasks];
-    for (int i = 0; i < numMapTasks; i++) {
-      mapRuntime[i] = jobClass.getMapTimeSample();
-      totMapRuntime += mapRuntime[i];
+    // Expand tasks
+    for(SynthTraceJobProducer.TaskDefinition task : jobDef.tasks){
+      int num = task.count.getInt();
+      String taskType = task.type;
+      long memory = task.max_memory.getLong();
+      memory = memory < MIN_MEMORY ? MIN_MEMORY: memory;
+      long vcores = task.max_vcores.getLong();
+      vcores = vcores < MIN_VCORES ? MIN_VCORES  : vcores;
+      int priority = task.priority;
+
+      // Save task information by type
+      taskByType.put(taskType, new ArrayList<>());
+      taskCounts.put(taskType, num);
+      taskMemory.put(taskType, memory);
+      taskVcores.put(taskType, vcores);
+
+      for(int i = 0; i < num; ++i){
+        long time = task.time.getLong();
+        totalSlotTime += time;
+        SynthTask t = new SynthTask(taskType, time, memory, vcores,
+            priority);
+        tasks.add(t);
+        taskByType.get(taskType).add(t);
+      }
-    reduceRuntime = new float[numRedTasks];
-    for (int i = 0; i < numRedTasks; i++) {
-      reduceRuntime[i] = jobClass.getReduceTimeSample();
-      totRedRuntime += (long) Math.ceil(reduceRuntime[i]);
-    }
+
+  }
+
+  public String getType(){
+    return type;
+  }
+
+  public List<SynthTask> getTasks(){
+    return tasks;
-  @Override
-  @Override
-    return jobClass.getUserName();
+    return jobDef.user_name;
-  @Override
-  @Override
-  public Values getOutcome() {
-    return Values.SUCCESS;
-  }
-
-  @Override
+  public String getQueueName() {
+    return queueName;
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder();
+    String res = "\nSynthJob [" + jobDef.class_name + "]: \n"
+        + "\tname: " + getName() + "\n"
+        + "\ttype: " + getType() + "\n"
+        + "\tid: " + id + "\n"
+        + "\tqueue: " + getQueueName() + "\n"
+        + "\tsubmission: " + getSubmissionTime() + "\n"
+        + "\tduration: " + getDuration() + "\n"
+        + "\tdeadline: " + getDeadline() + "\n";
+    sb.append(res);
+    int taskno = 0;
+    for(SynthJob.SynthTask t : getTasks()){
+      sb.append("\t");
+      sb.append(taskno);
+      sb.append(": \t");
+      sb.append(t.toString());
+      taskno++;
+    }
+    return sb.toString();
+  }
+
+  public long getTotalSlotTime() {
+    return totalSlotTime;
+  }
+
+  public long getDuration() {
+    return duration;
+  }
+
+  public long getDeadline() {
+    return deadline;
+  }
+
+  public Map<String, String> getParams() {
+    return params;
+  }
+
+  @Override
+  public boolean equals(Object other) {
+    if (!(other instanceof SynthJob)) {
+      return false;
+    }
+    SynthJob o = (SynthJob) other;
+    return tasks.equals(o.tasks)
+        && submitTime == o.submitTime
+        && type.equals(o.type)
+        && queueName.equals(o.queueName)
+        && jobDef.class_name.equals(o.jobDef.class_name);
+  }
+
+  @Override
+  public int hashCode() {
+    return jobDef.class_name.hashCode()
+        * (int) submitTime * (int) duration;
+  }
+
+
+  @Override
+  public JobConf getJobConf() {
+    return new JobConf(conf);
+  }
+
-    return numMapTasks;
+    return taskCounts.get(MRAMSimulator.MAP_TYPE);
-    return numRedTasks;
-  }
-
-  @Override
-  public TaskInfo getTaskInfo(TaskType taskType, int taskNumber) {
-    switch (taskType) {
-    case MAP:
-      return new TaskInfo(-1, -1, -1, -1, mapMaxMemory, mapMaxVcores);
-    case REDUCE:
-      return new TaskInfo(-1, -1, -1, -1, reduceMaxMemory, reduceMaxVcores);
-    default:
-      throw new IllegalArgumentException("Not interested");
-    }
+    return taskCounts.get(MRAMSimulator.REDUCE_TYPE);
+  public TaskInfo getTaskInfo(TaskType taskType, int taskNumber) {
+    switch(taskType){
+    case MAP:
+      return new TaskInfo(-1, -1, -1, -1,
+          taskMemory.get(MRAMSimulator.MAP_TYPE),
+          taskVcores.get(MRAMSimulator.MAP_TYPE));
+    case REDUCE:
+      return new TaskInfo(-1, -1, -1, -1,
+          taskMemory.get(MRAMSimulator.REDUCE_TYPE),
+          taskVcores.get(MRAMSimulator.REDUCE_TYPE));
+    default:
+      break;
+    }
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
-          getTaskInfo(taskType, taskNumber), mapRuntime[taskNumber], null);
-
+          getTaskInfo(taskType, taskNumber),
+          taskByType.get(MRAMSimulator.MAP_TYPE).get(taskNumber).time,
+          null);
-          (long) Math.round((reduceRuntime[taskNumber] / 3)),
-          (long) Math.round((reduceRuntime[taskNumber] / 3)),
-          (long) Math.round((reduceRuntime[taskNumber] / 3)), null);
-
+          taskByType.get(MRAMSimulator.MAP_TYPE)
+              .get(taskNumber).time / 3,
+          taskByType.get(MRAMSimulator.MAP_TYPE)
+              .get(taskNumber).time / 3,
+          taskByType.get(MRAMSimulator.MAP_TYPE)
+              .get(taskNumber).time / 3, null);
-  public org.apache.hadoop.mapred.JobConf getJobConf() {
-    return new JobConf(conf);
-  }
-
-  @Override
-  public String getQueueName() {
-    return queueName;
-  }
-
-  @Override
-  public String toString() {
-    return "SynthJob [\n" + "  workload=" + jobClass.getWorkload().getId()
-        + "\n" + "  jobClass="
-        + jobClass.getWorkload().getClassList().indexOf(jobClass) + "\n"
-        + "  conf=" + conf + ",\n" + "  id=" + id + ",\n" + "  name=" + name
-        + ",\n" + "  mapRuntime=" + Arrays.toString(mapRuntime) + ",\n"
-        + "  reduceRuntime=" + Arrays.toString(reduceRuntime) + ",\n"
-        + "  submitTime=" + submitTime + ",\n" + "  numMapTasks=" + numMapTasks
-        + ",\n" + "  numRedTasks=" + numRedTasks + ",\n" + "  mapMaxMemory="
-        + mapMaxMemory + ",\n" + "  reduceMaxMemory=" + reduceMaxMemory + ",\n"
-        + "  queueName=" + queueName + "\n" + "]";
-  }
-
-  public SynthJobClass getJobClass() {
-    return jobClass;
-  }
-
-  public long getTotalSlotTime() {
-    return totMapRuntime + totRedRuntime;
-  }
-
-  public long getDuration() {
-    return duration;
-  }
-
-  public long getDeadline() {
-    return deadline;
-  }
-
-  @Override
-  public boolean equals(Object other) {
-    if (!(other instanceof SynthJob)) {
-      return false;
-    }
-    SynthJob o = (SynthJob) other;
-    return Arrays.equals(mapRuntime, o.mapRuntime)
-        && Arrays.equals(reduceRuntime, o.reduceRuntime)
-        && submitTime == o.submitTime && numMapTasks == o.numMapTasks
-        && numRedTasks == o.numRedTasks && mapMaxMemory == o.mapMaxMemory
-        && reduceMaxMemory == o.reduceMaxMemory
-        && mapMaxVcores == o.mapMaxVcores
-        && reduceMaxVcores == o.reduceMaxVcores && queueName.equals(o.queueName)
-        && jobClass.equals(o.jobClass) && totMapRuntime == o.totMapRuntime
-        && totRedRuntime == o.totRedRuntime;
-  }
-
-  @Override
-  public int hashCode() {
-    // could have a bad distr; investigate if a relevant use case exists
-    return jobClass.hashCode() * (int) submitTime;
+  public Values getOutcome() {
+    return Values.SUCCESS;

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV23 MOV23 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 INS40 UPD40 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS83 UPD39 INS43 INS43 MOV83 INS74 INS59 UPD83 MOV83 MOV39 MOV59 INS74 MOV83 INS74 INS59 UPD83 MOV83 INS74 MOV59 MOV83 INS74 INS59 INS83 INS74 INS59 INS29 INS83 INS83 INS83 INS42 INS23 INS23 MOV23 MOV23 MOV23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 MOV44 MOV44 INS44 INS44 MOV44 INS8 INS43 UPD42 MOV83 INS74 UPD42 MOV42 MOV8 INS43 UPD42 INS39 INS42 MOV8 MOV78 MOV43 INS39 UPD42 INS74 UPD42 MOV78 MOV83 MOV39 MOV42 MOV44 INS8 MOV78 INS83 INS39 INS42 INS8 UPD43 MOV78 INS83 INS39 INS42 INS8 MOV78 INS83 INS39 INS42 INS8 MOV78 MOV78 INS83 MOV43 INS42 MOV44 MOV44 MOV44 INS8 UPD42 INS34 UPD42 INS34 INS40 UPD42 INS42 UPD42 INS43 INS43 INS43 INS42 UPD42 INS34 INS43 INS43 UPD42 INS14 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS43 UPD42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS65 INS83 INS43 INS59 INS83 INS39 MOV59 INS39 UPD39 UPD83 MOV83 UPD42 MOV42 MOV44 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 MOV78 INS83 INS43 INS42 INS8 INS43 INS42 INS43 INS42 MOV21 MOV21 MOV21 MOV21 MOV60 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 MOV60 MOV21 MOV21 MOV21 MOV21 MOV21 INS70 INS42 INS43 INS43 INS42 INS60 INS60 INS21 INS60 INS70 INS41 INS43 INS43 MOV43 MOV25 MOV60 INS41 INS41 INS42 INS41 INS41 MOV41 MOV49 INS53 INS50 MOV53 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS66 INS66 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 MOV21 MOV21 MOV21 MOV21 INS21 INS42 INS41 INS41 INS41 INS41 INS41 INS42 INS41 INS40 INS42 UPD39 INS7 INS7 INS44 INS40 INS8 INS42 INS42 INS42 UPD42 INS40 INS43 INS59 INS43 INS59 INS32 INS39 INS59 INS44 INS32 INS8 INS32 UPD42 INS42 INS42 INS42 INS27 INS27 INS32 INS32 INS10 INS14 INS42 MOV49 INS41 MOV49 INS41 INS49 INS10 INS43 INS42 INS42 INS43 INS43 INS43 INS43 UPD42 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV22 INS32 UPD42 INS40 INS22 INS40 INS42 INS32 INS43 INS42 INS60 MOV60 MOV60 MOV21 INS60 MOV21 INS60 INS21 MOV21 MOV21 MOV21 MOV24 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS42 INS42 MOV27 INS32 INS32 MOV11 INS11 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS14 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 INS22 INS42 INS42 INS42 INS22 INS42 UPD42 MOV42 INS42 INS27 INS32 INS32 INS32 INS32 UPD42 INS42 INS42 INS32 INS42 INS40 UPD42 UPD42 MOV52 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV27 INS42 INS40 INS39 INS59 UPD43 UPD39 INS39 INS59 INS39 INS59 INS32 INS32 INS32 INS32 INS38 INS43 INS45 INS40 UPD45 MOV45 UPD45 MOV45 INS32 MOV45 UPD45 MOV45 INS32 UPD45 MOV45 UPD45 MOV45 MOV42 UPD45 MOV45 UPD45 MOV45 INS32 UPD45 MOV45 UPD45 MOV45 MOV32 UPD45 MOV45 UPD45 MOV45 MOV32 UPD45 MOV45 UPD45 MOV45 INS32 UPD45 MOV45 INS40 INS32 INS32 INS32 INS32 INS37 MOV32 INS40 INS42 INS40 INS40 INS42 INS39 INS42 INS32 INS32 INS32 INS32 INS42 MOV43 INS40 MOV32 INS22 INS33 MOV43 INS40 MOV32 INS27 INS27 INS27 INS33 UPD42 INS52 INS42 UPD42 UPD42 INS52 INS42 INS45 INS45 INS42 INS42 UPD42 MOV42 INS42 INS40 INS42 INS32 INS40 UPD45 INS42 INS32 UPD42 UPD42 INS40 UPD42 INS32 UPD42 INS16 INS42 INS32 UPD42 INS16 UPD42 MOV42 INS40 INS42 INS42 INS42 INS14 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS60 INS21 INS60 INS21 INS42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS22 INS34 INS22 INS34 INS22 INS34 INS40 INS42 UPD40 MOV40 INS42 INS40 UPD42 MOV42 INS27 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS74 INS39 INS59 INS7 INS43 INS59 INS32 INS32 INS42 INS42 MOV32 MOV27 UPD42 UPD40 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 UPD42 UPD40 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS42 DEL42 DEL43 DEL39 DEL83 DEL39 DEL23 DEL83 DEL39 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL40 DEL27 DEL40 DEL42 DEL16 DEL40 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL40 DEL27 DEL40 DEL42 DEL16 DEL40 DEL42 DEL42 DEL40 DEL27 DEL40 DEL42 DEL16 DEL42 DEL42 DEL40 DEL22 DEL32 DEL45 DEL52 DEL42 DEL22 DEL34 DEL27 DEL36 DEL40 DEL32 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL42 DEL33 DEL27 DEL36 DEL42 DEL32 DEL34 DEL38 DEL16 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL42 DEL32 DEL39 DEL85 DEL5 DEL42 DEL3 DEL42 DEL42 DEL2 DEL32 DEL7 DEL42 DEL42 DEL42 DEL2 DEL7 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL7 DEL42 DEL37 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL42 DEL39 DEL42 DEL42 DEL2 DEL32 DEL11 DEL7 DEL42 DEL78 DEL42 DEL42 DEL32 DEL39 DEL23 DEL83 DEL39 DEL85 DEL5 DEL23 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL40 DEL27 DEL40 DEL42 DEL16 DEL7 DEL21 DEL39 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL8 DEL25 DEL42 DEL34 DEL27 DEL42 DEL42 DEL40 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL34 DEL27 DEL36 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL39 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL31 DEL42 DEL78 DEL39 DEL42 DEL31 DEL42 DEL78 DEL83 DEL39 DEL31 DEL39 DEL42 DEL42 DEL78 DEL42 DEL42 DEL40 DEL42 DEL42 DEL2 DEL33 DEL14 DEL41 DEL40 DEL39 DEL42 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL36 DEL32 DEL11 DEL39 DEL42 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL36 DEL32 DEL11 DEL39 DEL42 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL36 DEL32 DEL11 DEL33 DEL14 DEL41 DEL49 DEL10 DEL50 DEL8 DEL42 DEL42 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL45 DEL27 DEL41 DEL42 DEL43 DEL39 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL40 DEL27 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL27 DEL32 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31