YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)

Change-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700

+import com.google.common.collect.Maps;
+import org.apache.hadoop.yarn.api.records.AllocationTagNamespaceType;
+import java.util.Collections;
+    public TypeToCountedTags() {}
+
+    private TypeToCountedTags(Map<T, Map<String, Long>> tags) {
+      this.typeToTagsWithCount = tags;
+    }
+
+
+    /**
+     * Absorbs the given {@link TypeToCountedTags} to current mapping,
+     * this will aggregate the count of the tags with same name.
+     *
+     * @param target a {@link TypeToCountedTags} to merge with.
+     */
+    protected void absorb(final TypeToCountedTags<T> target) {
+      // No opt if the given target is null.
+      if (target == null || target.getTypeToTagsWithCount() == null) {
+        return;
+      }
+
+      // Merge the target.
+      Map<T, Map<String, Long>> targetMap = target.getTypeToTagsWithCount();
+      for (Map.Entry<T, Map<String, Long>> targetEntry :
+          targetMap.entrySet()) {
+        // Get a mutable copy, do not modify the target reference.
+        Map<String, Long> copy = Maps.newHashMap(targetEntry.getValue());
+
+        // If the target type doesn't exist in the current mapping,
+        // add as a new entry.
+        Map<String, Long> existingMapping =
+            this.typeToTagsWithCount.putIfAbsent(targetEntry.getKey(), copy);
+        // There was a mapping for this target type,
+        // do proper merging on the operator.
+        if (existingMapping != null) {
+          Map<String, Long> localMap =
+              this.typeToTagsWithCount.get(targetEntry.getKey());
+          // Merge the target map to the inner map.
+          Map<String, Long> targetValue = targetEntry.getValue();
+          for (Map.Entry<String, Long> entry : targetValue.entrySet()) {
+            localMap.merge(entry.getKey(), entry.getValue(),
+                (a, b) -> Long.sum(a, b));
+          }
+        }
+      }
+    }
+
+    /**
+     * @return an immutable copy of current instance.
+     */
+    protected TypeToCountedTags immutableCopy() {
+      return new TypeToCountedTags(
+          Collections.unmodifiableMap(this.typeToTagsWithCount));
+    }
+   * Aggregates multiple {@link TypeToCountedTags} to a single one based on
+   * a given set of application IDs, the values are properly merged.
+   *
+   * @param appIds a set of application IDs.
+   * @return an aggregated {@link TypeToCountedTags}.
+   */
+  private TypeToCountedTags aggregateAllocationTags(Set<ApplicationId> appIds,
+      Map<ApplicationId, TypeToCountedTags> mapping) {
+    TypeToCountedTags result = new TypeToCountedTags();
+    if (appIds != null) {
+      if (appIds.size() == 1) {
+        // If there is only one app, we simply return the mapping
+        // without any extra computation.
+        return mapping.get(appIds.iterator().next());
+      }
+
+      for (ApplicationId applicationId : appIds) {
+        TypeToCountedTags appIdTags = mapping.get(applicationId);
+        if (appIdTags != null) {
+          // Make sure ATM state won't be changed.
+          result.absorb(appIdTags.immutableCopy());
+        }
+      }
+    }
+    return result;
+  }
+
+  /**
-   * @param applicationId applicationId. When null is specified, return
-   *                      aggregated cardinality among all applications.
-   * @param tags          allocation tags, see
+   * @param tags          {@link AllocationTags}, allocation tags under a
+   *                      specific namespace. See
-  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,
-      Set<String> tags, LongBinaryOperator op)
-      throws InvalidAllocationTagsQueryException {
+  public long getNodeCardinalityByOp(NodeId nodeId, AllocationTags tags,
+      LongBinaryOperator op) throws InvalidAllocationTagsQueryException {
-
-      if (nodeId == null || op == null) {
+      if (nodeId == null || op == null || tags == null) {
-      if (applicationId != null) {
-        mapping = perAppNodeMappings.get(applicationId);
-      } else {
+      if (AllocationTagNamespaceType.ALL.equals(
+          tags.getNamespace().getNamespaceType())) {
+      } else {
+        // Aggregate app tags cardinality by applications.
+        mapping = aggregateAllocationTags(
+            tags.getNamespace().getNamespaceScope(),
+            perAppNodeMappings);
-      if (mapping == null) {
-        return 0;
-      }
-
-      return mapping.getCardinality(nodeId, tags, op);
+      return mapping == null ? 0 :
+          mapping.getCardinality(nodeId, tags.getTags(), op);
-   * @param applicationId applicationId. When null is specified, return
-   *                      aggregated cardinality among all applications.
-   * @param tags          allocation tags, see
+   * @param tags          {@link AllocationTags}, allocation tags under a
+   *                      specific namespace. See
-  @SuppressWarnings("unchecked")
-  public long getRackCardinalityByOp(String rack, ApplicationId applicationId,
-      Set<String> tags, LongBinaryOperator op)
-      throws InvalidAllocationTagsQueryException {
+  public long getRackCardinalityByOp(String rack, AllocationTags tags,
+      LongBinaryOperator op) throws InvalidAllocationTagsQueryException {
-
-      if (rack == null || op == null) {
+      if (rack == null || op == null || tags == null) {
-            "Must specify rack/tags/op to query cardinality");
+            "Must specify nodeId/tags/op to query cardinality");
-      if (applicationId != null) {
-        mapping = perAppRackMappings.get(applicationId);
-      } else {
+      if (AllocationTagNamespaceType.ALL.equals(
+          tags.getNamespace().getNamespaceType())) {
+      } else {
+        // Aggregates cardinality by rack.
+        mapping = aggregateAllocationTags(
+            tags.getNamespace().getNamespaceScope(),
+            perAppRackMappings);
-      if (mapping == null) {
-        return 0;
-      }
-
-      return mapping.getCardinality(rack, tags, op);
+      return mapping == null ? 0 :
+          mapping.getCardinality(rack, tags.getTags(), op);

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 MOV44 INS44 INS8 INS44 INS83 INS42 INS8 INS83 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS8 INS65 INS65 INS65 INS42 UPD74 UPD42 INS74 INS42 INS60 INS25 INS41 INS43 INS42 INS43 INS74 INS42 INS21 INS65 INS65 INS83 INS74 INS42 INS25 INS60 INS70 INS65 INS42 INS41 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS65 INS66 UPD43 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS66 INS65 UPD66 INS66 INS65 INS42 UPD66 INS66 INS66 MOV65 UPD42 MOV42 INS43 INS43 INS74 INS7 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS43 INS43 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS66 INS14 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS25 INS70 INS42 MOV68 MOV8 INS41 INS42 MOV8 INS41 INS42 INS42 INS43 INS43 INS43 INS22 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS41 INS43 INS43 INS74 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS60 INS25 INS43 INS32 INS43 INS27 INS8 MOV44 INS42 INS8 INS27 INS32 INS16 INS27 INS32 INS16 INS42 INS42 INS42 INS52 INS42 INS42 INS33 INS32 INS33 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS74 INS74 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS22 INS42 INS32 INS34 INS41 INS60 INS25 MOV27 INS27 INS40 INS42 INS32 MOV27 INS34 INS32 MOV27 INS27 INS40 INS42 INS32 MOV27 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 INS33 INS60 INS60 INS70 INS52 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS33 INS32 INS42 MOV42 MOV42 MOV42 INS32 MOV42 INS42 INS33 INS32 INS42 MOV42 MOV42 MOV42 INS32 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 MOV42 INS42 UPD45 INS42 INS42 MOV42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS43 MOV43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS32 UPD42 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS86 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS59 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL66 DEL66 DEL65 DEL42 DEL33 DEL27 DEL34 DEL41 DEL8 DEL25 DEL32 DEL41 DEL42 DEL66 DEL66 DEL65 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL44 DEL43 DEL74 DEL42 DEL33 DEL27 DEL34 DEL41 DEL8 DEL25 DEL32 DEL41