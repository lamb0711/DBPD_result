YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.

(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)

+import org.apache.commons.math3.util.Pair;
+import org.apache.hadoop.yarn.webapp.util.YarnWebServiceUtils;
-  private List<PerContainerLogFileInfo> getContainerLogFiles(
+  private List<Pair<PerContainerLogFileInfo, String>> getContainerLogFiles(
-    List<PerContainerLogFileInfo> logFileInfos = new ArrayList<>();
+    List<Pair<PerContainerLogFileInfo, String>> logFileInfos
+        = new ArrayList<>();
+            String aggregateType = log.has("logAggregationType") ?
+                log.getString("logAggregationType") : "N/A";
-                logFileInfos.add(generatePerContainerLogFileInfoFromJSON(
-                    obArray.getJSONObject(j)));
+                logFileInfos.add(new Pair<PerContainerLogFileInfo, String>(
+                    generatePerContainerLogFileInfoFromJSON(
+                        obArray.getJSONObject(j)), aggregateType));
-              logFileInfos.add(generatePerContainerLogFileInfoFromJSON(
-                  (JSONObject)ob));
+              logFileInfos.add(new Pair<PerContainerLogFileInfo, String>(
+                  generatePerContainerLogFileInfoFromJSON(
+                      (JSONObject)ob), aggregateType));
-      // for the case, we have already uploaded partial logs in HDFS
-      int result = logCliHelper.dumpAContainerLogsForLogType(
-          newOptions, false);
-      if (result == 0 || foundAnyLogs) {
+
+      if (foundAnyLogs) {
+  private int printAggregatedContainerLogs(ContainerLogsRequest request,
+      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException {
+    return printContainerLogsForFinishedApplication(request,
+        logCliHelper, useRegex);
+  }
+
+  private int printAggregatedContainerLogsWithoutNodeId(
+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
+      boolean useRegex) throws IOException {
+    return printContainerLogsForFinishedApplicationWithoutNodeId(request,
+        logCliHelper, useRegex);
+  }
+
-      LogCLIHelpers logCliHelper) throws IOException, YarnException {
+      LogCLIHelpers logCliHelper) throws IOException, YarnException,
+      ClientHandlerException, UniformInterfaceException, JSONException {
-      return printContainerInfoFromRunningApplication(request);
+      return printContainerInfoFromRunningApplication(request, logCliHelper);
-      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException {
+      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,
+      ClientHandlerException, UniformInterfaceException, JSONException {
-        System.err.println("Unable to get logs for this container:"
-            + containerIdStr + "for the application:" + appIdStr
-            + " with the appOwner: " + appOwner);
-        System.err.println("The application: " + appIdStr
-            + " is still running, and we can not get Container report "
-            + "for the container: " + containerIdStr +". Please try later "
-            + "or after the application finishes.");
-        return -1;
+        nodeHttpAddress = getNodeHttpAddressFromRMWebString(request);
+        if (nodeHttpAddress != null && !nodeHttpAddress.isEmpty()) {
+          request.setNodeHttpAddress(nodeHttpAddress);
+        } else {
+          // for the case, we have already uploaded partial logs in HDFS
+          int result = -1;
+          if (nodeAddress != null && !nodeAddress.isEmpty()) {
+            result =  printAggregatedContainerLogs(
+                request, logCliHelper, useRegex);
+          } else {
+            result = printAggregatedContainerLogsWithoutNodeId(
+                request, logCliHelper, useRegex);
+          }
+          if (result == -1) {
+            System.err.println("Unable to get logs for this container:"
+                + containerIdStr + " for the application:" + appIdStr
+                + " with the appOwner: " + appOwner);
+            System.err.println("The application: " + appIdStr
+                + " is still running, and we can not get Container report "
+                + "for the container: " + containerIdStr +". Please try later "
+                + "or after the application finishes.");
+          }
+          return result;
+        }
-      ContainerLogsRequest options) throws YarnException, IOException {
+      ContainerLogsRequest options, LogCLIHelpers logCliHelper)
+      throws YarnException, IOException, ClientHandlerException,
+      UniformInterfaceException, JSONException {
-      StringBuilder sb = new StringBuilder();
-      if (containerIdStr != null && !containerIdStr.isEmpty()) {
-        sb.append("Trying to get container with ContainerId: "
-            + containerIdStr + "\n");
+      // if we specify the containerId as well as NodeAddress
+      String nodeHttpAddress = null;
+      if (options.getContainerId() != null
+          && !options.getContainerId().isEmpty()) {
+        nodeHttpAddress = getNodeHttpAddressFromRMWebString(options);
-      if (nodeIdStr != null && !nodeIdStr.isEmpty()) {
-        sb.append("Trying to get container from NodeManager: "
-            + nodeIdStr + "\n");
+      if (nodeHttpAddress != null) {
+        outputContainerLogMeta(options.getContainerId(), options.getNodeId(),
+            nodeHttpAddress);
+        return 0;
+      } else {
+        int result = logCliHelper.printAContainerLogMetadata(
+            options, System.out, System.err);
+        if (result == -1) {
+          StringBuilder sb = new StringBuilder();
+          if (containerIdStr != null && !containerIdStr.isEmpty()) {
+            sb.append("Trying to get container with ContainerId: "
+                + containerIdStr + "\n");
+          }
+          if (nodeIdStr != null && !nodeIdStr.isEmpty()) {
+            sb.append("Trying to get container from NodeManager: "
+                + nodeIdStr + "\n");
+          }
+          sb.append("Can not find any matched containers for the application: "
+              + options.getAppId());
+          System.err.println(sb.toString());
+        }
+        return result;
-      sb.append("Can not find any matched containers for the application: "
-          + options.getAppId());
-      System.err.println(sb.toString());
-      return -1;
-      String containerString = String.format(
-          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);
-      outStream.println(containerString);
-      outStream.println(StringUtils.repeat("=", containerString.length()));
-      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,
-          "LogFile", "LogLength", "LastModificationTime");
-      outStream.println(StringUtils.repeat("=", containerString.length()));
-      List<PerContainerLogFileInfo> infos = getContainerLogFiles(
-          getConf(), containerId, nodeHttpAddress);
-      for (PerContainerLogFileInfo info : infos) {
-        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,
-            info.getFileName(), info.getFileSize(),
-            info.getLastModifiedTime());
-      }
+      outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);
+  private void outputContainerLogMeta(String containerId, String nodeId,
+      String nodeHttpAddress) throws IOException {
+    String containerString = String.format(
+        LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);
+    outStream.println(containerString);
+    outStream.println(StringUtils.repeat("=", containerString.length()));
+    outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,
+        "LogFile", "LogLength", "LastModificationTime", "LogAggregationType");
+    outStream.println(StringUtils.repeat("=", containerString.length() * 2));
+    List<Pair<PerContainerLogFileInfo, String>> infos = getContainerLogFiles(
+        getConf(), containerId, nodeHttpAddress);
+    for (Pair<PerContainerLogFileInfo, String> info : infos) {
+      outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN,
+          info.getKey().getFileName(), info.getKey().getFileSize(),
+          info.getKey().getLastModifiedTime(), info.getValue());
+    }
+  }
+
-    List<PerContainerLogFileInfo> allLogFileInfos=
+    List<Pair<PerContainerLogFileInfo, String>> allLogFileInfos=
-    for (PerContainerLogFileInfo fileInfo : allLogFileInfos) {
-      fileNames.add(fileInfo.getFileName());
+    for (Pair<PerContainerLogFileInfo, String> fileInfo : allLogFileInfos) {
+      fileNames.add(fileInfo.getKey().getFileName());
+
+  @VisibleForTesting
+  public String getNodeHttpAddressFromRMWebString(ContainerLogsRequest request)
+      throws ClientHandlerException, UniformInterfaceException, JSONException {
+    if (request.getNodeId() == null || request.getNodeId().isEmpty()) {
+      return null;
+    }
+    JSONObject nodeInfo = YarnWebServiceUtils
+        .getNodeInfoFromRMWebService(getConf(), request.getNodeId())
+        .getJSONObject("node");
+    return nodeInfo.has("nodeHTTPAddress") ?
+        nodeInfo.getString("nodeHTTPAddress") : null;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 UPD74 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS43 INS43 INS43 INS43 INS43 INS43 INS44 INS43 INS43 INS43 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS43 INS8 INS74 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS42 MOV60 MOV21 MOV21 INS21 INS21 MOV60 INS70 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS25 INS60 INS41 INS43 MOV43 INS43 UPD74 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV32 INS8 MOV8 INS42 INS42 INS42 INS32 INS32 UPD74 INS44 INS42 INS8 UPD74 INS42 INS27 INS8 INS43 INS59 INS16 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS60 INS25 INS25 MOV60 MOV60 MOV60 INS42 INS42 INS40 INS45 INS45 INS45 INS45 INS42 INS42 INS32 INS43 INS74 INS74 INS42 INS21 MOV43 INS74 INS74 INS27 INS32 INS41 INS42 INS42 INS32 INS32 INS32 INS33 INS43 MOV43 INS43 INS42 INS25 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS42 INS42 INS45 INS27 INS42 INS43 INS43 INS43 INS43 MOV43 INS43 INS32 UPD43 MOV43 MOV43 INS43 INS43 MOV43 INS43 INS32 INS33 INS32 INS42 INS33 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 MOV8 INS8 INS42 INS42 INS33 INS27 INS38 INS21 INS42 INS33 INS21 INS41 INS60 MOV25 INS41 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS32 INS32 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS25 INS32 INS33 INS32 INS7 INS32 INS34 INS39 INS59 INS27 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS27 INS8 MOV8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS32 INS42 MOV38 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS32 INS27 INS38 INS21 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS60 INS42 INS42 INS42 INS33 INS32 INS32 INS39 INS59 INS27 INS8 INS8 INS27 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 MOV38 INS27 INS38 INS21 INS21 INS42 INS38 INS42 INS42 INS16 INS42 INS33 INS32 INS7 INS7 INS34 INS32 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS14 INS14 INS74 MOV32 INS42 INS74 MOV32 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL27 DEL42 DEL41 DEL41 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL45 DEL45 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL44 DEL42 DEL70 DEL8