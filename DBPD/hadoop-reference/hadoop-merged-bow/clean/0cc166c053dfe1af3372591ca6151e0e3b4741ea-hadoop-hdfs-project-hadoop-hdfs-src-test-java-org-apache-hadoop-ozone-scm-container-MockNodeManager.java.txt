HDFS-12115. Ozone: SCM: Add queryNode RPC Call. Contributed by Anu Engineer.

- *
+ * <p>
- *
+ * <p>
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+import static org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState.DEAD;
+import static org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState
+    .HEALTHY;
+import static org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState
+    .STALE;
+
-  private static final int HEALTHY_NODE_COUNT = 10;
-      new NodeData(10L * OzoneConsts.TB,  OzoneConsts.GB),
+      new NodeData(10L * OzoneConsts.TB, OzoneConsts.GB),
+      new NodeData(OzoneConsts.TB, 900 * OzoneConsts.GB, NodeData.STALE),
+      new NodeData(OzoneConsts.TB, 200L * OzoneConsts.GB, NodeData.STALE),
+      new NodeData(OzoneConsts.TB, 200L * OzoneConsts.GB, NodeData.DEAD)
+  private final List<DatanodeID> staleNodes;
+  private final List<DatanodeID> deadNodes;
+    this.staleNodes = new LinkedList<>();
+    this.deadNodes = new LinkedList<>();
-        healthyNodes.add(id);
+
+    if (NODES[x % NODES.length].getCurrentState() == NodeData.HEALTHY) {
+      healthyNodes.add(datanodeID);
+    }
+
+    if (NODES[x % NODES.length].getCurrentState() == NodeData.STALE) {
+      staleNodes.add(datanodeID);
+    }
+
+    if (NODES[x % NODES.length].getCurrentState() == NodeData.DEAD) {
+      deadNodes.add(datanodeID);
+    }
+
-  public List<DatanodeID> getNodes(NODESTATE nodestate) {
-    if (nodestate == NODESTATE.HEALTHY) {
+  public List<DatanodeID> getNodes(OzoneProtos.NodeState nodestate) {
+    if (nodestate == HEALTHY) {
+
+    if (nodestate == STALE) {
+      return staleNodes;
+    }
+
+    if (nodestate == DEAD) {
+      return deadNodes;
+    }
+
-  public int getNodeCount(NODESTATE nodestate) {
-    if (nodestate == NODESTATE.HEALTHY) {
-      return HEALTHY_NODE_COUNT;
+  public int getNodeCount(OzoneProtos.NodeState nodestate) {
+    List<DatanodeID> nodes = getNodes(nodestate);
+    if (nodes != null) {
+      return nodes.size();
-  public NODESTATE getNodeState(DatanodeID id) {
+  public OzoneProtos.NodeState getNodeState(DatanodeID id) {
-        totalRemaining +=report.getRemaining();
+        totalRemaining += report.getRemaining();
-    for (NodeManager.NODESTATE state : NodeManager.NODESTATE.values()) {
+    for (OzoneProtos.NodeState state : OzoneProtos.NodeState.values()) {
-    private long capacity, used;
+    public static final long HEALTHY = 1;
+    public static final long STALE = 2;
+    public static final long DEAD = 3;
+
+    private long capacity;
+    private long used;
+
+    private long currentState;
+
+    /**
+     * By default nodes are healthy.
+     * @param capacity
+     * @param used
+     */
+    NodeData(long capacity, long used) {
+      this(capacity, used, HEALTHY);
+    }
+     * @param currentState - Healthy, Stale and DEAD nodes.
-    NodeData(long capacity, long used) {
+    NodeData(long capacity, long used, long currentState) {
+      this.currentState = currentState;
+
+    public long getCurrentState() {
+      return currentState;
+    }
+
+    public void setCurrentState(long currentState) {
+      this.currentState = currentState;
+    }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 MOV83 UPD83 MOV83 INS74 INS59 INS83 MOV83 INS74 MOV59 UPD43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS66 INS66 INS43 INS43 INS42 INS43 INS43 UPD42 INS21 INS21 INS25 INS25 INS25 UPD43 INS25 INS25 UPD43 INS60 INS40 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS39 MOV59 INS83 INS39 INS59 INS29 INS42 INS44 INS44 INS8 INS44 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS14 INS14 INS14 INS42 INS42 INS42 INS42 INS7 INS7 INS27 INS8 INS27 INS8 INS27 INS8 INS40 INS27 INS8 INS27 INS8 INS40 INS74 INS59 UPD27 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS17 INS65 INS39 INS42 INS21 INS41 INS39 INS42 INS21 INS43 INS40 INS27 INS40 INS43 INS40 INS27 INS40 INS43 INS40 INS27 INS40 INS22 INS14 INS22 INS14 INS32 INS40 INS21 INS32 INS40 INS21 INS32 INS40 INS21 INS42 INS42 INS42 INS41 INS42 INS42 INS41 INS43 INS43 INS42 INS32 UPD42 INS33 UPD43 UPD40 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS66 INS7 INS42 INS7 INS42 INS34 INS40 INS42 INS34 INS40 INS42 INS34 INS40 INS52 INS42 INS74 INS52 INS42 INS74 INS2 INS42 INS32 INS2 INS42 INS32 INS2 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD40 INS22 INS42 INS22 INS42 INS43 INS43 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 DEL39 DEL23 DEL34 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL40 DEL42 DEL42