YARN-5301. NM mount cpu cgroups failed on some systems
(Contributed by Miklos Szegedi via Daniel Templeton)

+import com.google.common.base.Joiner;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.util.Shell;
-import java.util.List;
+import java.util.HashSet;
+import java.util.Set;
+  private Map<String, Set<String>> parsedMtab;
+    this.parsedMtab = new HashMap<>();
-    if (enableCGroupMount) {
-      // nothing to do here - we support 'deferred' mounting of specific
-      // controllers - we'll populate the path for a given controller when an
-      // explicit mountCGroupController request is issued.
-      LOG.info("CGroup controller mounting enabled.");
-    } else {
-      // cluster admins are expected to have mounted controllers in specific
-      // locations - we'll attempt to figure out mount points
+    // Cluster admins may have some subsystems mounted in specific locations
+    // We'll attempt to figure out mount points. We do this even if we plan
+    // to mount cgroups into our own tree to control the path permissions or
+    // to mount subsystems that are not mounted previously.
+    // The subsystems for new and existing mount points have to match, and
+    // the same hierarchy will be mounted at each mount point with the same
+    // subsystem set.
-      Map<CGroupController, String> cPaths =
-          initializeControllerPathsFromMtab(mtabFile, this.cGroupPrefix);
-      // we want to do a bulk update without the paths changing concurrently
-      try {
-        rwLock.writeLock().lock();
-        controllerPaths = cPaths;
-      } finally {
-        rwLock.writeLock().unlock();
-      }
+    Map<String, Set<String>> newMtab;
+    Map<CGroupController, String> cPaths;
+    try {
+      // parse mtab
+      newMtab = parseMtab(mtabFile);
+
+      // find cgroup controller paths
+      cPaths = initializeControllerPathsFromMtab(newMtab);
+    } catch (IOException e) {
+      LOG.warn("Failed to initialize controller paths! Exception: " + e);
+      throw new ResourceHandlerException(
+          "Failed to initialize controller paths!");
+    }
+
+    // we want to do a bulk update without the paths changing concurrently
+    try {
+      rwLock.writeLock().lock();
+      controllerPaths = cPaths;
+      parsedMtab = newMtab;
+    } finally {
+      rwLock.writeLock().unlock();
-      String mtab, String cGroupPrefix) throws ResourceHandlerException {
-    try {
-      Map<String, List<String>> parsedMtab = parseMtab(mtab);
-      Map<CGroupController, String> ret = new HashMap<>();
+      Map<String, Set<String>> parsedMtab)
+      throws ResourceHandlerException {
+    Map<CGroupController, String> ret = new HashMap<>();
-      for (CGroupController controller : CGroupController.values()) {
-        String subsystemName = controller.getName();
-        String controllerPath = findControllerInMtab(subsystemName, parsedMtab);
+    for (CGroupController controller : CGroupController.values()) {
+      String subsystemName = controller.getName();
+      String controllerPath = findControllerInMtab(subsystemName, parsedMtab);
-        if (controllerPath != null) {
-          ret.put(controller, controllerPath);
-        } else {
-          LOG.warn("Controller not mounted but automount disabled: " +
-              subsystemName);
-        }
+      if (controllerPath != null) {
+        ret.put(controller, controllerPath);
-      return ret;
-    } catch (IOException e) {
-      LOG.warn("Failed to initialize controller paths! Exception: " + e);
-      throw new ResourceHandlerException(
-        "Failed to initialize controller paths!");
+    return ret;
-  private static Map<String, List<String>> parseMtab(String mtab)
+  @VisibleForTesting
+  static Map<String, Set<String>> parseMtab(String mtab)
-    Map<String, List<String>> ret = new HashMap<String, List<String>>();
+    Map<String, Set<String>> ret = new HashMap<>();
+    HashSet<String> validCgroups = new HashSet<>();
+    for (CGroupController controller : CGroupController.values()) {
+      validCgroups.add(controller.getName());
+    }
-            List<String> value = Arrays.asList(options.split(","));
-            ret.put(path, value);
+            Set<String> cgroupList =
+                new HashSet<>(Arrays.asList(options.split(",")));
+            // Collect the valid subsystem names
+            cgroupList.retainAll(validCgroups);
+            ret.put(path, cgroupList);
-      throw new IOException("Error while reading " + mtab, e);
+      if (Shell.LINUX) {
+        throw new IOException("Error while reading " + mtab, e);
+      } else {
+        // Ignore the error, if we are running on an os other than Linux
+        LOG.warn("Error while reading " + mtab, e);
+      }
-      Map<String, List<String>> entries) {
-    for (Map.Entry<String, List<String>> e : entries.entrySet()) {
+      Map<String, Set<String>> entries) {
+    for (Map.Entry<String, Set<String>> e : entries.entrySet()) {
-    String path = getControllerPath(controller);
+    if (cGroupMountPath == null) {
+      throw new ResourceHandlerException(
+          String.format("Cgroups mount path not specified in %s.",
+              YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH));
+    }
+    String existingMountPath = getControllerPath(controller);
+    String requestedMountPath =
+        new File(cGroupMountPath, controller.getName()).getAbsolutePath();
-    if (path == null) {
+    if (existingMountPath == null ||
+        !requestedMountPath.equals(existingMountPath)) {
-        String hierarchy = cGroupPrefix;
-        StringBuffer controllerPath = new StringBuffer()
-            .append(cGroupMountPath).append('/').append(controller.getName());
-        StringBuffer cGroupKV = new StringBuffer()
-            .append(controller.getName()).append('=').append(controllerPath);
+        // If the controller was already mounted we have to mount it
+        // with the same options to clone the mount point otherwise
+        // the operation will fail
+        String mountOptions;
+        if (existingMountPath != null) {
+          mountOptions = Joiner.on(',')
+              .join(parsedMtab.get(existingMountPath));
+        } else {
+          mountOptions = controller.getName();
+        }
+
+        String cGroupKV =
+            mountOptions + "=" + requestedMountPath;
-        op.appendArgs(hierarchy, cGroupKV.toString());
+        op.appendArgs(cGroupPrefix, cGroupKV);
-              controllerPath);
+              requestedMountPath);
-        controllerPaths.put(controller, controllerPath.toString());
-
-        return;
+        controllerPaths.put(controller, requestedMountPath);
-      LOG.info("CGroup controller already mounted at: " + path);
-      return;
+      LOG.info("CGroup controller already mounted at: " + existingMountPath);
-    return new StringBuffer(cGroupPrefix).append("/")
-        .append(cGroupId).toString();
+    return cGroupPrefix + Path.SEPARATOR + cGroupId;
-    return new StringBuffer(getControllerPath(controller))
-        .append('/').append(cGroupPrefix).append("/")
-        .append(cGroupId).toString();
+    return getControllerPath(controller) + Path.SEPARATOR + cGroupPrefix
+        + Path.SEPARATOR + cGroupId;
-    return new StringBuffer(getPathForCGroup(controller, cGroupId))
-        .append('/').append(CGROUP_FILE_TASKS).toString();
+    return getPathForCGroup(controller, cGroupId)
+        + Path.SEPARATOR + CGROUP_FILE_TASKS;
-    return new StringBuffer(getPathForCGroup(controller, cGroupId))
-        .append('/').append(controller.getName()).append('.')
-        .append(param).toString();
+    return getPathForCGroup(controller, cGroupId)
+        + Path.SEPARATOR + controller.getName()
+        + "." + param;
-      // We are working with a pre-mounted contoller
-      // Make sure that Yarn cgroup hierarchy path exists
-      initializePreMountedCGroupController(controller);
+      String controllerPath = getControllerPath(controller);
+
+      if (controllerPath == null) {
+        throw new ResourceHandlerException(
+            String.format("Controller %s not mounted."
+                + " You either need to mount it with %s"
+                + " or mount cgroups before launching Yarn",
+                controller.getName(), YarnConfiguration.
+                NM_LINUX_CONTAINER_CGROUPS_MOUNT));
+      }
+
+    // We are working with a pre-mounted contoller
+    // Make sure that Yarn cgroup hierarchy path exists
+    initializePreMountedCGroupController(controller);
-  public void initializePreMountedCGroupController(CGroupController controller)
+  private void initializePreMountedCGroupController(CGroupController controller)
-    File rootHierarchy = new File(getControllerPath(controller));
+    String controllerPath = getControllerPath(controller);
+
+    if (controllerPath == null) {
+      throw new ResourceHandlerException(
+          String.format("Controller %s not mounted."
+                  + " You either need to mount it with %s"
+                  + " or mount cgroups before launching Yarn",
+              controller.getName(), YarnConfiguration.
+                  NM_LINUX_CONTAINER_CGROUPS_MOUNT));
+    }
+
+    File rootHierarchy = new File(controllerPath);
-    return new StringBuilder()
-        .append(errorMessage)
-        .append(" Subsystem:")
-        .append(subsystemName)
-        .append(" Mount points:")
-        .append(mtabFile)
-        .append(" User:")
-        .append(System.getProperty("user.name"))
-        .append(" Path: ")
-        .append(yarnCgroupPath)
-        .toString();
+    return String.format("%s Subsystem:%s Mount points:%s User:%s Path:%s ",
+        errorMessage, subsystemName, mtabFile, System.getProperty("user.name"),
+        yarnCgroupPath);
-  boolean checkAndDeleteCgroup(File cgf) throws InterruptedException {
+  private boolean checkAndDeleteCgroup(File cgf) throws InterruptedException {
-      LOG.warn("Unable to delete  " + cGroupPath +
-          ", tried to delete for " + deleteCGroupTimeout + "ms");
+      LOG.warn(String.format("Unable to delete  %s, tried to delete for %d ms",
+          cGroupPath, deleteCGroupTimeout));
-          "updateCGroupParam for path: " + cGroupParamPath + " with value " +
-              value);
+          String.format("updateCGroupParam for path: %s with value %s",
+              cGroupParamPath, value));
-      throw new ResourceHandlerException(new StringBuffer("Unable to write to ")
-          .append(cGroupParamPath).append(" with value: ").append(value)
-          .toString(), e);
+      throw new ResourceHandlerException(
+          String.format("Unable to write to %s with value: %s",
+              cGroupParamPath, value), e);
-              new StringBuffer("Unable to write to ")
-                  .append(cGroupParamPath).append(" with value: ").append(value)
-                  .toString());
+              String.format("PrintWriter unable to write to %s with value: %s",
+                  cGroupParamPath, value));
-          throw new ResourceHandlerException("Error while closing cgroup file" +
-              " " + cGroupParamPath);
+          throw new ResourceHandlerException(
+              String.format("Error while closing cgroup file %s",
+                  cGroupParamPath));

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS23 INS83 INS74 INS59 MOV8 INS44 MOV8 INS78 UPD74 MOV74 MOV78 MOV43 MOV78 MOV43 MOV44 MOV44 MOV78 MOV43 MOV78 MOV43 MOV44 MOV44 UPD83 INS83 INS43 INS43 INS74 INS42 INS21 INS60 INS54 INS74 UPD42 MOV42 INS42 MOV43 UPD74 INS60 INS70 UPD74 INS25 INS60 MOV21 INS60 INS25 INS42 INS42 INS43 INS43 INS7 INS74 INS59 INS8 MOV12 INS43 MOV43 INS74 UPD43 UPD74 UPD74 MOV74 INS59 INS44 INS32 INS8 UPD74 INS27 INS8 MOV43 MOV43 INS59 INS27 INS27 INS27 INS27 INS27 INS8 INS43 INS59 INS27 INS8 MOV43 INS32 INS42 INS42 INS22 INS14 MOV43 MOV43 INS74 INS42 INS21 INS21 INS21 INS42 INS43 MOV43 UPD42 MOV43 MOV43 UPD74 UPD43 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS8 UPD43 UPD74 INS42 INS33 INS53 UPD42 INS42 INS32 INS27 INS38 INS42 INS40 INS42 INS32 INS40 INS42 INS40 INS42 MOV32 INS40 INS42 MOV32 INS40 MOV32 INS45 INS42 INS60 INS25 INS42 INS42 MOV32 INS42 INS33 INS53 INS42 UPD42 MOV42 UPD45 MOV45 UPD42 MOV42 MOV42 MOV42 MOV32 MOV42 INS52 INS42 INS74 INS43 MOV43 INS7 INS7 INS42 INS7 INS42 UPD42 MOV42 UPD43 MOV43 INS74 UPD42 INS74 INS42 INS32 INS25 UPD42 UPD74 INS14 INS14 INS42 UPD42 MOV42 MOV33 INS32 INS42 UPD42 MOV42 INS43 INS59 INS27 MOV8 INS14 MOV43 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 MOV43 INS43 INS42 INS42 INS32 INS40 MOV8 INS8 UPD43 INS43 INS32 INS43 INS42 MOV32 INS42 INS42 INS42 INS25 INS42 INS42 MOV32 INS42 INS33 INS53 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 UPD42 INS42 INS42 INS42 INS45 INS40 INS42 MOV43 INS27 INS8 INS8 UPD43 UPD42 INS14 INS42 INS42 INS42 INS27 INS32 INS40 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 MOV43 INS32 INS32 UPD42 INS42 INS33 INS21 INS21 UPD42 INS27 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS45 MOV42 MOV42 INS42 INS42 INS27 INS42 INS7 INS7 INS42 INS45 INS42 INS32 UPD42 INS42 INS42 INS42 INS27 INS32 INS40 INS21 INS45 INS42 INS42 INS32 INS42 MOV32 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS32 MOV43 INS32 INS74 INS32 MOV32 UPD42 MOV42 MOV32 INS42 INS42 INS45 MOV42 MOV42 INS42 INS42 INS45 INS42 INS43 INS43 UPD42 INS14 INS42 INS42 INS42 UPD42 INS42 UPD42 MOV42 UPD13 UPD42 UPD42 INS42 INS42 INS42 INS74 MOV32 INS43 INS42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL54 DEL8 DEL83 DEL42 DEL43 DEL74 DEL74 DEL27 DEL42 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL41 DEL41 DEL42 DEL43 DEL42 DEL14 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL14 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL14 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL14 DEL42 DEL13 DEL32 DEL42 DEL32 DEL42 DEL13 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL43 DEL45 DEL14 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL32 DEL45 DEL45 DEL42 DEL27