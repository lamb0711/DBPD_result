HDFS-11273. Move TransferFsImage#doGetUrl function to a Util class. Contributed by Hanisha Koneru.

+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.security.DigestInputStream;
+import java.security.MessageDigest;
+import java.util.HashMap;
+import java.util.Map;
+import com.google.common.collect.Lists;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.DFSUtilClient;
+import org.apache.hadoop.hdfs.server.namenode.ImageServlet;
+import org.apache.hadoop.hdfs.util.DataTransferThrottler;
+import org.apache.hadoop.io.MD5Hash;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.authentication.client.AuthenticationException;
+import org.apache.hadoop.util.Time;
+import org.apache.hadoop.hdfs.web.URLConnectionFactory;
+
+  public final static String FILE_LENGTH = "File-Length";
+  public final static String CONTENT_LENGTH = "Content-Length";
+  public final static String MD5_HEADER = "X-MD5-Digest";
+  public final static String CONTENT_TYPE = "Content-Type";
+  public final static String CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding";
+
+  public final static int IO_FILE_BUFFER_SIZE;
+  private static final boolean isSpnegoEnabled;
+  public static final URLConnectionFactory connectionFactory;
+
+  static {
+    Configuration conf = new Configuration();
+    connectionFactory = URLConnectionFactory
+        .newDefaultURLConnectionFactory(conf);
+    isSpnegoEnabled = UserGroupInformation.isSecurityEnabled();
+    IO_FILE_BUFFER_SIZE = DFSUtilClient.getIoFileBufferSize(conf);
+  }
+
-   * @return the resulting URI 
-   * @throws IOException 
+   * @return the resulting URI
-  public static URI stringAsURI(String s) throws IOException {
+  static URI stringAsURI(String s) throws IOException {
-   * @throws IOException
-    List<URI> uris = new ArrayList<URI>(names.size());
+    List<URI> uris = new ArrayList<>(names.size());
+
+  /**
+   * Downloads the files at the specified url location into destination
+   * storage.
+   */
+  public static MD5Hash doGetUrl(URL url, List<File> localPaths,
+      Storage dstStorage, boolean getChecksum, int timeout) throws IOException {
+    HttpURLConnection connection;
+    try {
+      connection = (HttpURLConnection)
+          connectionFactory.openConnection(url, isSpnegoEnabled);
+    } catch (AuthenticationException e) {
+      throw new IOException(e);
+    }
+
+    setTimeout(connection, timeout);
+
+    if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
+      throw new HttpGetFailedException("Image transfer servlet at " + url +
+              " failed with status code " + connection.getResponseCode() +
+              "\nResponse message:\n" + connection.getResponseMessage(),
+          connection);
+    }
+
+    long advertisedSize;
+    String contentLength = connection.getHeaderField(CONTENT_LENGTH);
+    if (contentLength != null) {
+      advertisedSize = Long.parseLong(contentLength);
+    } else {
+      throw new IOException(CONTENT_LENGTH + " header is not provided " +
+          "by the namenode when trying to fetch " + url);
+    }
+    MD5Hash advertisedDigest = parseMD5Header(connection);
+    String fsImageName = connection
+        .getHeaderField(ImageServlet.HADOOP_IMAGE_EDITS_HEADER);
+    InputStream stream = connection.getInputStream();
+
+    return receiveFile(url.toExternalForm(), localPaths, dstStorage,
+        getChecksum, advertisedSize, advertisedDigest, fsImageName, stream,
+        null);
+  }
+
+  /**
+   * Receives file at the url location from the input stream and puts them in
+   * the specified destination storage location.
+   */
+  public static MD5Hash receiveFile(String url, List<File> localPaths,
+      Storage dstStorage, boolean getChecksum, long advertisedSize,
+      MD5Hash advertisedDigest, String fsImageName, InputStream stream,
+      DataTransferThrottler throttler) throws
+      IOException {
+    long startTime = Time.monotonicNow();
+    Map<FileOutputStream, File> streamPathMap = new HashMap<>();
+    StringBuilder xferStats = new StringBuilder();
+    double xferCombined = 0;
+    if (localPaths != null) {
+      // If the local paths refer to directories, use the server-provided header
+      // as the filename within that directory
+      List<File> newLocalPaths = new ArrayList<>();
+      for (File localPath : localPaths) {
+        if (localPath.isDirectory()) {
+          if (fsImageName == null) {
+            throw new IOException("No filename header provided by server");
+          }
+          newLocalPaths.add(new File(localPath, fsImageName));
+        } else {
+          newLocalPaths.add(localPath);
+        }
+      }
+      localPaths = newLocalPaths;
+    }
+
+
+    long received = 0;
+    MessageDigest digester = null;
+    if (getChecksum) {
+      digester = MD5Hash.getDigester();
+      stream = new DigestInputStream(stream, digester);
+    }
+    boolean finishedReceiving = false;
+
+    List<FileOutputStream> outputStreams = Lists.newArrayList();
+
+    try {
+      if (localPaths != null) {
+        for (File f : localPaths) {
+          try {
+            if (f.exists()) {
+              LOG.warn("Overwriting existing file " + f
+                  + " with file downloaded from " + url);
+            }
+            FileOutputStream fos = new FileOutputStream(f);
+            outputStreams.add(fos);
+            streamPathMap.put(fos, f);
+          } catch (IOException ioe) {
+            LOG.warn("Unable to download file " + f, ioe);
+            // This will be null if we're downloading the fsimage to a file
+            // outside of an NNStorage directory.
+            if (dstStorage != null &&
+                (dstStorage instanceof StorageErrorReporter)) {
+              ((StorageErrorReporter)dstStorage).reportErrorOnFile(f);
+            }
+          }
+        }
+
+        if (outputStreams.isEmpty()) {
+          throw new IOException(
+              "Unable to download to any storage directory");
+        }
+      }
+
+      int num = 1;
+      byte[] buf = new byte[IO_FILE_BUFFER_SIZE];
+      while (num > 0) {
+        num = stream.read(buf);
+        if (num > 0) {
+          received += num;
+          for (FileOutputStream fos : outputStreams) {
+            fos.write(buf, 0, num);
+          }
+          if (throttler != null) {
+            throttler.throttle(num);
+          }
+        }
+      }
+      finishedReceiving = true;
+      double xferSec = Math.max(
+          ((float)(Time.monotonicNow() - startTime)) / 1000.0, 0.001);
+      long xferKb = received / 1024;
+      xferCombined += xferSec;
+      xferStats.append(
+          String.format(" The fsimage download took %.2fs at %.2f KB/s.",
+              xferSec, xferKb / xferSec));
+    } finally {
+      stream.close();
+      for (FileOutputStream fos : outputStreams) {
+        long flushStartTime = Time.monotonicNow();
+        fos.getChannel().force(true);
+        fos.close();
+        double writeSec = Math.max(((float)
+            (flushStartTime - Time.monotonicNow())) / 1000.0, 0.001);
+        xferCombined += writeSec;
+        xferStats.append(String
+            .format(" Synchronous (fsync) write to disk of " +
+                streamPathMap.get(fos).getAbsolutePath() +
+                " took %.2fs.", writeSec));
+      }
+
+      // Something went wrong and did not finish reading.
+      // Remove the temporary files.
+      if (!finishedReceiving) {
+        deleteTmpFiles(localPaths);
+      }
+
+      if (finishedReceiving && received != advertisedSize) {
+        // only throw this exception if we think we read all of it on our end
+        // -- otherwise a client-side IOException would be masked by this
+        // exception that makes it look like a server-side problem!
+        deleteTmpFiles(localPaths);
+        throw new IOException("File " + url + " received length " + received +
+            " is not of the advertised size " +
+            advertisedSize);
+      }
+    }
+    xferStats.insert(0, String.format("Combined time for fsimage download and" +
+        " fsync to all disks took %.2fs.", xferCombined));
+    LOG.info(xferStats.toString());
+
+    if (digester != null) {
+      MD5Hash computedDigest = new MD5Hash(digester.digest());
+
+      if (advertisedDigest != null &&
+          !computedDigest.equals(advertisedDigest)) {
+        deleteTmpFiles(localPaths);
+        throw new IOException("File " + url + " computed digest " +
+            computedDigest + " does not match advertised digest " +
+            advertisedDigest);
+      }
+      return computedDigest;
+    } else {
+      return null;
+    }
+  }
+
+  private static void deleteTmpFiles(List<File> files) {
+    if (files == null) {
+      return;
+    }
+
+    LOG.info("Deleting temporary files: " + files);
+    for (File file : files) {
+      if (!file.delete()) {
+        LOG.warn("Deleting " + file + " has failed");
+      }
+    }
+  }
+
+  /**
+   * Sets a timeout value in millisecods for the Http connection.
+   * @param connection the Http connection for which timeout needs to be set
+   * @param timeout value to be set as timeout in milliseconds
+   */
+  public static void setTimeout(HttpURLConnection connection, int timeout) {
+    if (timeout > 0) {
+      connection.setConnectTimeout(timeout);
+      connection.setReadTimeout(timeout);
+    }
+  }
+
+  private static MD5Hash parseMD5Header(HttpURLConnection connection) {
+    String header = connection.getHeaderField(MD5_HEADER);
+    return (header != null) ? new MD5Hash(header) : null;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS28 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS21 INS65 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS54 INS21 INS25 INS60 INS60 INS25 INS60 INS60 INS60 INS41 INS65 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS60 INS54 INS21 INS21 INS25 INS74 INS42 INS25 INS21 INS70 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS42 INS43 INS42 INS60 INS41 INS43 INS59 INS7 INS7 INS7 UPD66 INS66 INS66 INS42 INS43 INS43 INS42 INS43 INS59 INS8 INS12 INS32 INS27 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS66 INS66 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS74 INS59 INS43 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS43 INS59 INS42 INS8 INS39 INS59 INS74 INS59 INS8 INS8 INS32 INS32 INS27 INS8 INS8 INS43 INS43 INS27 INS8 INS32 INS44 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS27 INS8 INS42 INS43 INS59 INS16 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS40 INS53 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS34 INS42 INS33 INS60 INS70 INS21 INS42 INS34 INS42 INS42 INS33 INS21 INS21 INS42 INS9 INS43 INS43 INS42 INS32 INS25 INS60 INS60 INS61 INS21 INS60 INS60 INS21 INS21 INS21 INS70 INS25 INS25 INS42 INS42 INS34 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS41 INS41 INS42 INS42 INS42 INS33 INS41 INS42 INS42 INS27 INS43 INS42 INS25 INS42 INS34 INS21 INS21 INS42 INS42 INS32 INS36 INS14 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 INS7 INS43 INS42 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS74 INS59 INS44 INS42 INS8 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS27 INS8 INS39 INS59 INS5 INS59 INS27 INS8 INS7 INS39 INS59 INS39 INS59 INS7 INS32 INS32 INS44 INS42 INS8 INS38 INS8 INS27 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS33 INS45 INS42 INS42 INS38 INS8 INS32 INS32 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS11 INS42 INS14 INS43 INS27 INS42 INS42 INS32 INS43 INS27 INS43 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS33 INS70 INS25 INS42 INS34 INS39 INS85 INS42 INS3 INS42 INS34 INS21 INS25 INS42 INS9 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS60 INS21 INS21 INS60 INS21 INS21 INS42 INS21 INS42 INS27 INS21 INS53 INS45 INS45 INS42 INS42 INS14 INS27 INS38 INS21 INS53 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS32 INS43 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS8 INS8 INS42 INS42 INS43 INS42 INS42 INS44 INS42 INS8 INS32 INS8 INS5 INS42 INS7 INS27 INS8 INS42 INS42 INS27 INS34 INS42 INS34 INS42 INS42 INS45 INS42 INS27 INS42 INS39 INS59 INS32 INS32 INS39 INS59 INS7 INS32 INS32 INS42 INS42 INS32 INS14 INS43 INS32 INS42 INS33 INS32 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS42 INS43 INS42 INS54 INS42 INS42 INS53 INS39 INS85 INS42 INS32 INS42 INS34 INS21 INS70 INS25 INS36 INS34 INS42 INS42 INS42 INS32 INS32 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS27 INS42 INS27 INS8 INS32 INS32 INS42 INS8 INS12 INS14 INS42 INS42 INS42 INS7 INS44 INS42 INS8 INS27 INS8 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS34 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS33 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS25 INS60 INS21 INS21 INS44 INS8 INS43 INS45 INS42 INS42 INS43 INS42 INS21 INS42 INS33 INS21 INS39 INS36 INS36 INS34 INS45 INS32 INS45 INS14 INS43 INS42 INS42 INS32 INS8 INS43 INS59 INS32 INS32 INS43 INS42 INS21 INS25 INS42 INS42 INS32 INS32 INS27 INS11 INS32 INS42 INS43 INS45 INS42 INS42 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS39 INS36 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS27 INS42 INS27 INS36 INS21 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS33 INS62 INS32 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS43 INS36 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS42 DEL42 DEL66 DEL65 DEL83 DEL42 DEL65 DEL42 DEL43