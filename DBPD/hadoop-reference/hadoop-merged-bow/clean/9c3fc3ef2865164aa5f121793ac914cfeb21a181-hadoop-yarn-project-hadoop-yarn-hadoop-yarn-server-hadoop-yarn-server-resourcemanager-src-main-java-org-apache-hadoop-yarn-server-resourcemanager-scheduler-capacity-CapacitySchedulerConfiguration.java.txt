YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement.MultiNodeLookupPolicy;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement.MultiNodePolicySpec;
+
+  @Private public static final String MULTI_NODE_SORTING_POLICIES =
+      PREFIX + "multi-node-sorting.policy.names";
+
+  @Private public static final String MULTI_NODE_SORTING_POLICY_NAME =
+      PREFIX + "multi-node-sorting.policy";
+
+  /**
+   * resource usage based node sorting algorithm.
+   */
+  public static final String DEFAULT_NODE_SORTING_POLICY = "default";
+  public static final String DEFAULT_NODE_SORTING_POLICY_CLASSNAME
+      = "org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement.ResourceUsageMultiNodeLookupPolicy";
+  public static final long DEFAULT_MULTI_NODE_SORTING_INTERVAL = 1000L;
+
+  @Private
+  public static final String MULTI_NODE_PLACEMENT_ENABLED = PREFIX
+      + "multi-node-placement-enabled";
+
+  @Private
+  public static final boolean DEFAULT_MULTI_NODE_PLACEMENT_ENABLED = false;
+
+  public String getMultiNodesSortingAlgorithmPolicy(
+      String queue) {
+
+    String policyName = get(
+        getQueuePrefix(queue) + "multi-node-sorting.policy");
+
+    if (policyName == null) {
+      policyName = get(MULTI_NODE_SORTING_POLICY_NAME);
+    }
+
+    // If node sorting policy is not configured in queue and in cluster level,
+    // it is been assumed that this queue is not enabled with multi-node lookup.
+    if (policyName == null || policyName.isEmpty()) {
+      return null;
+    }
+
+    String policyClassName = get(MULTI_NODE_SORTING_POLICY_NAME + DOT
+        + policyName.trim() + DOT + "class");
+
+    if (policyClassName == null || policyClassName.isEmpty()) {
+      throw new YarnRuntimeException(
+          policyName.trim() + " Class is not configured or not an instance of "
+              + MultiNodeLookupPolicy.class.getCanonicalName());
+    }
+
+    return normalizePolicyName(policyClassName.trim());
+  }
+
+  public boolean getMultiNodePlacementEnabled() {
+    return getBoolean(MULTI_NODE_PLACEMENT_ENABLED,
+        DEFAULT_MULTI_NODE_PLACEMENT_ENABLED);
+  }
+
+  public Set<MultiNodePolicySpec> getMultiNodePlacementPolicies() {
+    String[] policies = getTrimmedStrings(MULTI_NODE_SORTING_POLICIES);
+
+    // In other cases, split the accessibleLabelStr by ","
+    Set<MultiNodePolicySpec> set = new HashSet<MultiNodePolicySpec>();
+    for (String str : policies) {
+      if (!str.trim().isEmpty()) {
+        String policyClassName = get(
+            MULTI_NODE_SORTING_POLICY_NAME + DOT + str.trim() + DOT + "class");
+        if (str.trim().equals(DEFAULT_NODE_SORTING_POLICY)) {
+          policyClassName = get(
+              MULTI_NODE_SORTING_POLICY_NAME + DOT + str.trim() + DOT + "class",
+              DEFAULT_NODE_SORTING_POLICY_CLASSNAME);
+        }
+
+        // This check is needed as default class name is loaded only for
+        // DEFAULT_NODE_SORTING_POLICY.
+        if (policyClassName == null) {
+          throw new YarnRuntimeException(
+              str.trim() + " Class is not configured or not an instance of "
+                  + MultiNodeLookupPolicy.class.getCanonicalName());
+        }
+        policyClassName = normalizePolicyName(policyClassName.trim());
+        long policySortingInterval = getLong(
+            MULTI_NODE_SORTING_POLICY_NAME + DOT + str.trim()
+                + DOT + "sorting-interval.ms",
+            DEFAULT_MULTI_NODE_SORTING_INTERVAL);
+        if (policySortingInterval < 0) {
+          throw new YarnRuntimeException(
+              str.trim()
+                  + " multi-node policy is configured with invalid"
+                  + " sorting-interval:" + policySortingInterval);
+        }
+        set.add(
+            new MultiNodePolicySpec(policyClassName, policySortingInterval));
+      }
+    }
+
+    return Collections.unmodifiableSet(set);
+  }
+
+  private String normalizePolicyName(String policyName) {
+
+    // Ensure that custom node sorting algorithm class is valid.
+    try {
+      Class<?> nodeSortingPolicyClazz = getClassByName(policyName);
+      if (MultiNodeLookupPolicy.class
+          .isAssignableFrom(nodeSortingPolicyClazz)) {
+        return policyName;
+      } else {
+        throw new YarnRuntimeException(
+            "Class: " + policyName + " not instance of "
+                + MultiNodeLookupPolicy.class.getCanonicalName());
+      }
+    } catch (ClassNotFoundException e) {
+      throw new YarnRuntimeException(
+          "Could not instantiate " + "NodesSortingPolicy: " + policyName, e);
+    }
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS65 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS43 INS42 INS60 INS25 INS25 INS60 INS25 INS41 INS41 INS43 INS43 INS60 INS60 INS70 INS41 INS42 INS43 INS42 INS54 INS42 INS45 INS42 INS45 INS66 INS42 INS45 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS5 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS8 INS12 INS42 INS42 INS32 INS42 INS33 INS21 INS27 INS32 INS41 INS42 INS42 INS32 INS27 INS32 INS53 INS42 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS27 INS7 INS42 INS33 INS42 INS42 INS33 INS42 INS27 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS38 INS8 INS74 INS59 INS32 INS8 INS8 INS43 INS42 INS53 INS32 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS43 INS27 INS43 INS43 INS32 INS60 INS25 INS25 INS21 INS60 INS25 INS21 INS43 INS76 INS42 INS32 INS57 INS42 INS42 INS41 INS53 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS8 INS27 INS8 INS7 INS39 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS43 INS42 INS14 INS43 INS27 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS21 INS42 INS33 INS53 INS42 INS32 INS42 INS32 INS42 INS34 INS53 INS42 INS42 INS14 INS42 INS43 INS27 INS42 INS45 INS45 INS42 INS43 INS42 INS27 INS42 INS42 INS7 INS14 INS42 INS32 INS42 INS27 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS43 INS27 INS42 INS57 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS32 INS45 INS45 INS42 INS43 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42