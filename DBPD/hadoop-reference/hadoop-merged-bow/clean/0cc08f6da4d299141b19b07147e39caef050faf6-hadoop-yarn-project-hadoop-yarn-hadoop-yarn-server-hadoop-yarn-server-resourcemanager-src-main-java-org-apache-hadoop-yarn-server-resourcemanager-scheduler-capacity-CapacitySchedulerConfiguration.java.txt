Merge from trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1618700 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
+
+  @Private
+  public static final String QUEUE_MAPPING = PREFIX + "queue-mappings";
+
+  @Private
+  public static final String ENABLE_QUEUE_MAPPING_OVERRIDE = QUEUE_MAPPING + "-override.enable";
+
+  @Private
+  public static final boolean DEFAULT_ENABLE_QUEUE_MAPPING_OVERRIDE = false;
+
+  @Private
+  public static class QueueMapping {
+
+    public enum MappingType {
+
+      USER("u"),
+      GROUP("g");
+      private final String type;
+      private MappingType(String type) {
+        this.type = type;
+      }
+
+      public String toString() {
+        return type;
+      }
+
+    };
+
+    MappingType type;
+    String source;
+    String queue;
+
+    public QueueMapping(MappingType type, String source, String queue) {
+      this.type = type;
+      this.source = source;
+      this.queue = queue;
+    }
+  }
+  public boolean getOverrideWithQueueMappings() {
+    return getBoolean(ENABLE_QUEUE_MAPPING_OVERRIDE,
+        DEFAULT_ENABLE_QUEUE_MAPPING_OVERRIDE);
+  }
+
+  /**
+   * Returns a collection of strings, trimming leading and trailing whitespeace
+   * on each value
+   *
+   * @param str
+   *          String to parse
+   * @param delim
+   *          delimiter to separate the values
+   * @return Collection of parsed elements.
+   */
+  private static Collection<String> getTrimmedStringCollection(String str,
+      String delim) {
+    List<String> values = new ArrayList<String>();
+    if (str == null)
+      return values;
+    StringTokenizer tokenizer = new StringTokenizer(str, delim);
+    while (tokenizer.hasMoreTokens()) {
+      String next = tokenizer.nextToken();
+      if (next == null || next.trim().isEmpty()) {
+        continue;
+      }
+      values.add(next.trim());
+    }
+    return values;
+  }
+
+  /**
+   * Get user/group mappings to queues.
+   *
+   * @return user/groups mappings or null on illegal configs
+   */
+  public List<QueueMapping> getQueueMappings() {
+    List<QueueMapping> mappings =
+        new ArrayList<CapacitySchedulerConfiguration.QueueMapping>();
+    Collection<String> mappingsString =
+        getTrimmedStringCollection(QUEUE_MAPPING);
+    for (String mappingValue : mappingsString) {
+      String[] mapping =
+          getTrimmedStringCollection(mappingValue, ":")
+              .toArray(new String[] {});
+      if (mapping.length != 3 || mapping[1].length() == 0
+          || mapping[2].length() == 0) {
+        throw new IllegalArgumentException(
+            "Illegal queue mapping " + mappingValue);
+      }
+
+      QueueMapping m;
+      try {
+        QueueMapping.MappingType mappingType;
+        if (mapping[0].equals("u")) {
+          mappingType = QueueMapping.MappingType.USER;
+        } else if (mapping[0].equals("g")) {
+          mappingType = QueueMapping.MappingType.GROUP;
+        } else {
+          throw new IllegalArgumentException(
+              "unknown mapping prefix " + mapping[0]);
+        }
+        m = new QueueMapping(
+                mappingType,
+                mapping[1],
+                mapping[2]);
+      } catch (Throwable t) {
+        throw new IllegalArgumentException(
+            "Illegal queue mapping " + mappingValue);
+      }
+
+      if (m != null) {
+        mappings.add(m);
+      }
+    }
+
+    return mappings;
+  }

UPD40 INS23 INS23 INS23 INS55 INS31 INS31 INS31 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS83 INS42 INS71 INS23 INS23 INS23 INS31 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS74 INS42 INS8 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS83 INS42 INS72 INS72 INS23 INS31 INS31 INS43 INS59 INS43 INS59 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS41 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS61 INS41 INS65 INS65 INS43 INS43 INS60 INS60 INS70 INS41 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS41 INS43 INS59 INS32 INS8 INS42 INS66 INS66 INS42 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS33 INS42 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS21 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS60 INS54 INS25 INS42 INS7 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS74 INS43 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS5 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS27 INS32 INS18 INS42 INS42 INS32 INS43 INS43 INS43 INS85 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS60 INS25 INS21 INS44 INS8 INS42 INS33 INS21 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS3 INS27 INS27 INS32 INS34 INS14 INS43 INS59 INS32 INS8 INS25 INS7 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS45 INS5 INS4 INS40 INS34 INS32 INS34 INS2 INS42 INS43 INS27 INS40 INS42 INS2 INS42 INS45 INS21 INS32 INS8 INS8 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS43 INS85 INS2 INS42 INS42 INS34 INS42 INS45 INS42 INS42 INS34 INS7 INS2 INS42 INS45 INS21 INS53 INS43 INS42 INS2 INS2 INS43 INS27 INS42 INS42 INS34 INS42 INS40 INS42 INS34 INS7 INS14 INS42 INS42 INS34 INS42 INS34 INS42 INS45 INS42 INS42 INS40 INS43 INS27 INS42 INS45 INS2 INS42 INS34 DEL40 DEL26