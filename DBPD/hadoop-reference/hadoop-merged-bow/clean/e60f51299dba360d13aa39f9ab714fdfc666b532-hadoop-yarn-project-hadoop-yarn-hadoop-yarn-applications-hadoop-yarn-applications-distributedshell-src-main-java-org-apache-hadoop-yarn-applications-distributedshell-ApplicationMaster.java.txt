YARN-7745. Allow DistributedShell to take a placement specification for containers it wants to launch. (Arun Suresh via wangda)

Change-Id: Ided146d662e944a8a4692e5d6885f23fd9bbcad5

+import java.util.concurrent.atomic.AtomicLong;
+import org.apache.hadoop.yarn.api.records.RejectedSchedulingRequest;
+import org.apache.hadoop.yarn.api.records.ResourceSizing;
+import org.apache.hadoop.yarn.api.records.SchedulingRequest;
+import org.apache.hadoop.yarn.api.resource.PlacementConstraint;
+  protected AtomicInteger numIgnore = new AtomicInteger();
+
+  protected AtomicInteger totalRetries = new AtomicInteger(10);
+
+  // Placement Specifications
+  private Map<String, PlacementSpec> placementSpecs = null;
+
+  private final AtomicLong allocIdCounter = new AtomicLong(1);
+    opts.addOption("placement_spec", true, "Placement specification");
+    if (cliParser.hasOption("placement_spec")) {
+      String placementSpec = cliParser.getOptionValue("placement_spec");
+      LOG.info("Placement Spec received [{}]", placementSpec);
+      parsePlacementSpecs(placementSpec);
+      LOG.info("Total num containers requested [{}]", numTotalContainers);
+      if (numTotalContainers == 0) {
+        throw new IllegalArgumentException(
+            "Cannot run distributed shell with no containers");
+      }
+    }
+
-    numTotalContainers = Integer.parseInt(cliParser.getOptionValue(
-        "num_containers", "1"));
+
+    if (this.placementSpecs == null) {
+      numTotalContainers = Integer.parseInt(cliParser.getOptionValue(
+          "num_containers", "1"));
+    }
+  private void parsePlacementSpecs(String placementSpecifications) {
+    Map<String, PlacementSpec> pSpecs =
+        PlacementSpec.parse(placementSpecifications);
+    this.placementSpecs = new HashMap<>();
+    this.numTotalContainers = 0;
+    for (PlacementSpec pSpec : pSpecs.values()) {
+      this.numTotalContainers += pSpec.numContainers;
+      this.placementSpecs.put(pSpec.sourceTag, pSpec);
+    }
+  }
+
+    Map<Set<String>, PlacementConstraint> placementConstraintMap = null;
+    if (this.placementSpecs != null) {
+      placementConstraintMap = new HashMap<>();
+      for (PlacementSpec spec : this.placementSpecs.values()) {
+        if (spec.constraint != null) {
+          placementConstraintMap.put(
+              Collections.singleton(spec.sourceTag), spec.constraint);
+        }
+      }
+    }
-            appMasterTrackingUrl);
+            appMasterTrackingUrl, placementConstraintMap);
-    for (int i = 0; i < numTotalContainersToRequest; ++i) {
-      ContainerRequest containerAsk = setupContainerAskForRM();
-      amRMClient.addContainerRequest(containerAsk);
+    if (this.placementSpecs == null) {
+      for (int i = 0; i < numTotalContainersToRequest; ++i) {
+        ContainerRequest containerAsk = setupContainerAskForRM();
+        amRMClient.addContainerRequest(containerAsk);
+      }
+    } else {
+      List<SchedulingRequest> schedReqs = new ArrayList<>();
+      for (PlacementSpec pSpec : this.placementSpecs.values()) {
+        for (int i = 0; i < pSpec.numContainers; i++) {
+          SchedulingRequest sr = setupSchedulingRequest(pSpec);
+          schedReqs.add(sr);
+        }
+      }
+      amRMClient.addSchedulingRequests(schedReqs);
+
+            // Ignore these containers if placementspec is enabled
+            // for the time being.
+            if (placementSpecs != null) {
+              numIgnore.incrementAndGet();
+            }
-      if (askCount > 0) {
-        for (int i = 0; i < askCount; ++i) {
-          ContainerRequest containerAsk = setupContainerAskForRM();
-          amRMClient.addContainerRequest(containerAsk);
+      // Dont bother re-asking if we are using placementSpecs
+      if (placementSpecs == null) {
+        if (askCount > 0) {
+          for (int i = 0; i < askCount; ++i) {
+            ContainerRequest containerAsk = setupContainerAskForRM();
+            amRMClient.addContainerRequest(containerAsk);
+          }
-      
-      if (numCompletedContainers.get() == numTotalContainers) {
+
+      if (numCompletedContainers.get() + numIgnore.get() >=
+          numTotalContainers) {
+    public void onRequestsRejected(List<RejectedSchedulingRequest> rejReqs) {
+      List<SchedulingRequest> reqsToRetry = new ArrayList<>();
+      for (RejectedSchedulingRequest rejReq : rejReqs) {
+        LOG.info("Scheduling Request {} has been rejected. Reason {}",
+            rejReq.getRequest(), rejReq.getReason());
+        reqsToRetry.add(rejReq.getRequest());
+      }
+      totalRetries.addAndGet(-1 * reqsToRetry.size());
+      if (totalRetries.get() <= 0) {
+        LOG.info("Exiting, since retries are exhausted !!");
+        done = true;
+      } else {
+        amRMClient.addSchedulingRequests(reqsToRetry);
+      }
+    }
+
+    @Override
+  private SchedulingRequest setupSchedulingRequest(PlacementSpec spec) {
+    long allocId = allocIdCounter.incrementAndGet();
+    SchedulingRequest sReq = SchedulingRequest.newInstance(
+        allocId, Priority.newInstance(requestPriority),
+        ExecutionTypeRequest.newInstance(),
+        Collections.singleton(spec.sourceTag),
+        ResourceSizing.newInstance(
+            createProfileCapability().getProfileCapabilityOverride()), null);
+    sReq.setPlacementConstraint(spec.constraint);
+    LOG.info("Scheduling Request made: " + sReq.toString());
+    return sReq;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS31 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS33 INS42 INS42 INS14 INS21 INS25 INS25 INS43 INS42 INS60 INS21 INS21 INS70 INS60 INS25 INS25 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS41 INS43 INS43 INS34 INS42 INS42 INS42 INS43 INS34 INS32 INS32 INS8 INS27 INS8 INS42 INS74 INS59 INS7 INS7 INS44 INS32 INS8 INS74 INS59 INS27 INS8 INS27 INS8 INS8 INS25 INS42 INS74 INS42 INS60 INS70 INS21 INS25 INS42 INS39 INS59 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS9 INS45 INS42 INS42 INS45 INS60 INS21 INS21 INS21 INS25 INS22 INS33 MOV21 INS43 INS43 INS43 INS42 INS32 INS22 INS14 INS22 INS34 INS43 INS42 INS42 INS42 INS21 INS21 INS43 INS74 INS43 INS42 INS33 INS22 INS33 INS21 INS70 INS22 INS33 MOV24 INS60 INS70 INS21 INS27 INS8 INS27 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS32 INS27 INS8 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS27 INS43 INS59 INS32 INS32 INS32 INS27 INS8 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS74 INS52 INS42 INS42 INS7 INS32 INS42 INS43 INS43 INS42 INS52 INS42 INS7 INS44 INS32 INS8 INS42 INS52 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS42 INS33 MOV25 UPD27 MOV27 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS21 INS42 INS42 INS27 INS32 INS34 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS33 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS34 INS53 INS43 INS22 INS40 INS22 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS22 INS42 INS25 INS43 INS43 INS42 INS14 INS43 INS42 INS22 INS42 INS24 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS32 INS32 INS38 INS32 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS14 INS42 INS52 INS42 INS52 INS42 INS74 INS42 INS52 INS42 INS27 INS8 INS42 INS42 INS74 INS42 INS52 INS42 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS43 INS45 INS43 INS40 INS33 INS21 INS43 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS43 INS59 INS32 INS25 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS33 INS21 INS32 INS42 INS42 DEL42