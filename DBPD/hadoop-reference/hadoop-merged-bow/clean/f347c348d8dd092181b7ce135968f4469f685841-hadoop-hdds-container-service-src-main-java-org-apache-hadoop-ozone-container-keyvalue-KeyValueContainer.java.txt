Add support for checksum verification in data scrubber

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import org.apache.hadoop.hdfs.util.Canceler;
+import org.apache.hadoop.hdfs.util.DataTransferThrottler;
-  /**
-   * run integrity checks on the Container metadata.
-   */
-  public boolean check() {
-    ContainerCheckLevel level = ContainerCheckLevel.NO_CHECK;
+  public boolean scanMetaData() {
+    KeyValueContainerCheck checker =
+        new KeyValueContainerCheck(containerData.getMetadataPath(), config,
+            containerId);
+    return checker.fastCheck();
+  }
-    switch (containerData.getState()) {
-    case OPEN:
-      level = ContainerCheckLevel.FAST_CHECK;
-      LOG.info("Doing Fast integrity checks for Container ID : {},"
-          + " because it is OPEN", containerId);
-      break;
-    case CLOSING:
-      level = ContainerCheckLevel.FAST_CHECK;
-      LOG.info("Doing Fast integrity checks for Container ID : {},"
-          + " because it is CLOSING", containerId);
-      break;
-    case CLOSED:
-    case QUASI_CLOSED:
-      level = ContainerCheckLevel.FULL_CHECK;
-      LOG.debug("Doing Full integrity checks for Container ID : {},"
-              + " because it is in {} state", containerId,
-          containerData.getState());
-      break;
-    default:
-      break;
+  @Override
+  public boolean shouldScanData() {
+    return containerData.getState() == ContainerDataProto.State.CLOSED
+        || containerData.getState() == ContainerDataProto.State.QUASI_CLOSED;
+  }
+
+  public boolean scanData(DataTransferThrottler throttler, Canceler canceler) {
+    if (!shouldScanData()) {
+      throw new IllegalStateException("The checksum verification can not be" +
+          " done for container in state "
+          + containerData.getState());
-    if (level == ContainerCheckLevel.NO_CHECK) {
-      LOG.debug("Skipping integrity checks for Container Id : {}", containerId);
-      return true;
-    }
-
+    long containerId = containerData.getContainerID();
-    switch (level) {
-    case FAST_CHECK:
-      return checker.fastCheck();
-    case FULL_CHECK:
-      return checker.fullCheck();
-    default:
-      return true;
-    }
+    return checker.fullCheck(throttler, canceler);

INS26 INS26 INS40 INS40 INS31 INS31 INS31 MOV83 MOV39 UPD42 MOV42 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 MOV60 MOV60 MOV41 INS42 INS41 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS41 INS27 INS42 INS42 INS38 INS8 INS39 INS59 INS43 INS59 MOV32 INS27 INS27 INS32 INS53 INS42 INS32 INS42 INS42 INS14 INS42 INS42 MOV32 INS40 INS32 INS40 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 UPD42 MOV42 INS42 INS42 UPD45 MOV45 UPD45 MOV45 MOV32 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL49 DEL42 DEL40 DEL7 DEL21 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL40 DEL7 DEL21 DEL42 DEL27 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL49 DEL42 DEL40 DEL7 DEL21 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL10 DEL49 DEL10 DEL50 DEL42 DEL40 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL49 DEL42 DEL49 DEL41 DEL49 DEL9 DEL41 DEL50 DEL8 DEL31