HDFS-12895. RBF: Add ACL support for mount table. Contributed by Yiqun Lin.

+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_PERMISSIONS_ENABLED_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY;
+
+import org.apache.hadoop.hdfs.server.namenode.NameNode;
+import org.apache.hadoop.security.AccessControlException;
+import org.apache.hadoop.security.UserGroupInformation;
+  /**
+   * Permission related info used for constructing new router permission
+   * checker instance.
+   */
+  private static String routerOwner;
+  private static String superGroup;
+  private static boolean isPermissionEnabled;
+
+    initializePermissionSettings(this.conf);
+  /**
+   * Initialize permission related settings.
+   *
+   * @param routerConf
+   * @throws IOException
+   */
+  private static void initializePermissionSettings(Configuration routerConf)
+      throws IOException {
+    routerOwner = UserGroupInformation.getCurrentUser().getShortUserName();
+    superGroup = routerConf.get(
+        DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_KEY,
+        DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT);
+    isPermissionEnabled = routerConf.getBoolean(DFS_PERMISSIONS_ENABLED_KEY,
+        DFS_PERMISSIONS_ENABLED_DEFAULT);
+  }
+
+
+  /**
+   * Get a new permission checker used for making mount table access
+   * control. This method will be invoked during each RPC call in router
+   * admin server.
+   *
+   * @return Router permission checker
+   * @throws AccessControlException
+   */
+  public static RouterPermissionChecker getPermissionChecker()
+      throws AccessControlException {
+    if (!isPermissionEnabled) {
+      return null;
+    }
+
+    try {
+      return new RouterPermissionChecker(routerOwner, superGroup,
+          NameNode.getRemoteUser());
+    } catch (IOException e) {
+      throw new AccessControlException(e);
+    }
+  }
+
+  /**
+   * Get super user name.
+   *
+   * @return String super user name.
+   */
+  public static String getSuperUser() {
+    return routerOwner;
+  }
+
+  /**
+   * Get super group name.
+   *
+   * @return String super group name.
+   */
+  public static String getSuperGroup(){
+    return superGroup;
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS42 INS42 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS42 INS42 INS25 INS54 INS65 INS65 INS42 INS41 INS65 INS65 INS42 INS41 INS66 INS66 INS32 INS66 INS42 INS42 INS42 INS7 INS7 INS7 INS66 INS66 INS66 INS66 INS42 INS38 INS8 INS8 INS12 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS22 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS41 INS41 INS44 INS8 INS52 INS42 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS33 INS14 INS43 INS42 INS53 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS42