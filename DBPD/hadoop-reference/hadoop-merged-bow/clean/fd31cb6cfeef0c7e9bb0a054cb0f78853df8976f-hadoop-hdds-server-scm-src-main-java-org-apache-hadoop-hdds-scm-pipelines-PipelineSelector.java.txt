HDDS-277. PipelineStateMachine should handle closure of pipelines in SCM. Contributed by Mukul Kumar Singh.

+import org.apache.hadoop.hdds.scm.container.ContainerID;
+import org.apache.hadoop.hdds.scm.container.ContainerStateManager;
+import org.apache.hadoop.hdds.scm.events.SCMEvents;
+import org.apache.hadoop.hdds.server.events.EventPublisher;
+import java.util.NavigableSet;
+  private final ContainerStateManager containerStateManager;
+  private final EventPublisher eventPublisher;
-  public PipelineSelector(NodeManager nodeManager, Configuration conf) {
+  public PipelineSelector(NodeManager nodeManager,
+      ContainerStateManager containerStateManager, Configuration conf,
+      EventPublisher eventPublisher) {
+    this.eventPublisher = eventPublisher;
+    this.containerStateManager = containerStateManager;
-   * Close the  pipeline with the given clusterId.
+   * Finalize a given pipeline.
-
-  public void closePipeline(ReplicationType replicationType, String
-      pipelineID) throws IOException {
-    PipelineManager manager = getPipelineManager(replicationType);
+  public void finalizePipeline(Pipeline pipeline) throws IOException {
+    PipelineManager manager = getPipelineManager(pipeline.getType());
-    LOG.debug("Closing pipeline. pipelineID: {}", pipelineID);
-    manager.closePipeline(pipelineID);
+    LOG.debug("Finalizing pipeline. pipelineID: {}", pipeline.getPipelineName());
+    // Remove the pipeline from active allocation
+    manager.finalizePipeline(pipeline);
+    updatePipelineState(pipeline, HddsProtos.LifeCycleEvent.FINALIZE);
+    closePipelineIfNoOpenContainers(pipeline);
+  }
+
+  /**
+   * Close a given pipeline.
+   */
+  public void closePipelineIfNoOpenContainers(Pipeline pipeline) throws IOException {
+    if (pipeline.getLifeCycleState() != LifeCycleState.CLOSING) {
+      return;
+    }
+    NavigableSet<ContainerID> containerIDS = containerStateManager
+        .getMatchingContainerIDsByPipeline(pipeline.getPipelineName());
+    if (containerIDS.size() == 0) {
+      updatePipelineState(pipeline, HddsProtos.LifeCycleEvent.CLOSE);
+      LOG.info("Closing pipeline. pipelineID: {}", pipeline.getPipelineName());
+    }
+  }
+
+  /**
+   * Close a given pipeline.
+   */
+  private void closePipeline(Pipeline pipeline) {
+    PipelineManager manager = getPipelineManager(pipeline.getType());
+    Preconditions.checkNotNull(manager, "Found invalid pipeline manager");
+    LOG.debug("Closing pipeline. pipelineID: {}", pipeline.getPipelineName());
+    NavigableSet<ContainerID> containers =
+        containerStateManager
+            .getMatchingContainerIDsByPipeline(pipeline.getPipelineName());
+    Preconditions.checkArgument(containers.size() == 0);
+    manager.closePipeline(pipeline);
+  }
+
+  private void closeContainersByPipeline(Pipeline pipeline) {
+    NavigableSet<ContainerID> containers =
+        containerStateManager
+            .getMatchingContainerIDsByPipeline(pipeline.getPipelineName());
+    for (ContainerID id : containers) {
+      eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, id);
+    }
-          .removePipeline(pipeline);
+          .closePipeline(pipeline);
-        //TODO: cleanup pipeline by closing all the containers on the pipeline
+        closeContainersByPipeline(pipeline);
-        // TODO: Release the nodes here when pipelines are destroyed
+        closePipeline(pipeline);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS44 INS29 INS83 INS39 INS42 INS44 MOV43 INS8 MOV29 MOV83 MOV39 UPD42 MOV42 MOV44 INS43 INS8 INS29 INS83 INS39 INS42 MOV44 MOV8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS65 INS43 INS42 INS60 MOV21 INS21 INS21 INS21 INS21 UPD43 UPD42 INS42 INS25 INS60 INS25 INS65 UPD43 UPD42 INS21 INS60 INS21 INS43 INS42 INS60 INS70 INS42 INS42 INS7 INS7 INS66 INS42 MOV43 INS59 INS32 INS32 INS32 INS32 UPD66 UPD42 INS27 INS8 INS74 INS59 INS27 INS8 INS66 UPD42 INS43 INS32 INS74 INS59 INS32 INS42 INS74 INS59 INS44 INS42 INS8 INS22 INS42 INS22 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS40 INS41 INS43 INS43 INS42 INS32 INS32 INS34 INS21 INS21 INS42 INS42 INS42 INS42 INS45 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS27 UPD42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS52 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL31