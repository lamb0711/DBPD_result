HDFS-9198. Coalesce IBR processing in the NN. (Daryn Sharp via umamahesh)

+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.FutureTask;
+import org.apache.hadoop.util.ExitUtil;
+  /** Block report thread for handling async reports. */
+  private final BlockReportProcessingThread blockReportThread =
+      new BlockReportProcessingThread();
+
+    this.blockReportThread.start();
+      blockReportThread.interrupt();
+      blockReportThread.join(3000);
-      if (node == null || !node.isAlive()) {
+      if (node == null || !node.isRegistered()) {
-    int received = 0;
-    int deleted = 0;
-    int receiving = 0;
-    if (node == null || !node.isAlive()) {
+    if (node == null || !node.isRegistered()) {
+    try {
+      processIncrementalBlockReport(node, srdb);
+    } catch (Exception ex) {
+      node.setForceRegistration(true);
+      throw ex;
+    }
+  }
+  private void processIncrementalBlockReport(final DatanodeDescriptor node,
+      final StorageReceivedDeletedBlocks srdb) throws IOException {
+    int received = 0;
+    int deleted = 0;
+    int receiving = 0;
+
-          "Unknown block status code reported by " + nodeID +
+          "Unknown block status code reported by " + node +
-          rdbi.getStatus(), rdbi.getBlock(), nodeID);
+          rdbi.getStatus(), rdbi.getBlock(), node);
-            + "{} receiving: {}, received: {}, deleted: {}", nodeID, receiving,
+            + "{} receiving: {}, received: {}, deleted: {}", node, receiving,
+  // async processing of an action, used for IBRs.
+  public void enqueueBlockOp(final Runnable action) throws IOException {
+    try {
+      blockReportThread.enqueue(action);
+    } catch (InterruptedException ie) {
+      throw new IOException(ie);
+    }
+  }
+
+  // sync batch processing for a full BR.
+  public <T> T runBlockOp(final Callable<T> action)
+      throws IOException {
+    final FutureTask<T> future = new FutureTask<T>(action);
+    enqueueBlockOp(future);
+    try {
+      return future.get();
+    } catch (ExecutionException ee) {
+      Throwable cause = ee.getCause();
+      if (cause == null) {
+        cause = ee;
+      }
+      if (!(cause instanceof IOException)) {
+        cause = new IOException(cause);
+      }
+      throw (IOException)cause;
+    } catch (InterruptedException ie) {
+      Thread.currentThread().interrupt();
+      throw new IOException(ie);
+    }
+  }
+
+  @VisibleForTesting
+  public void flushBlockOps() throws IOException {
+    runBlockOp(new Callable<Void>(){
+      @Override
+      public Void call() {
+        return null;
+      }
+    });
+  }
+
+  public int getBlockOpQueueLength() {
+    return blockReportThread.queue.size();
+  }
+
+  private class BlockReportProcessingThread extends Thread {
+    private static final long MAX_LOCK_HOLD_MS = 4;
+    private long lastFull = 0;
+
+    private final BlockingQueue<Runnable> queue =
+        new ArrayBlockingQueue<Runnable>(1024);
+
+    BlockReportProcessingThread() {
+      super("Block report processor");
+      setDaemon(true);
+    }
+
+    @Override
+    public void run() {
+      try {
+        processQueue();
+      } catch (Throwable t) {
+        ExitUtil.terminate(1,
+            getName() + " encountered fatal exception: " + t);
+      }
+    }
+
+    private void processQueue() {
+      while (namesystem.isRunning()) {
+        NameNodeMetrics metrics = NameNode.getNameNodeMetrics();
+        try {
+          Runnable action = queue.take();
+          // batch as many operations in the write lock until the queue
+          // runs dry, or the max lock hold is reached.
+          int processed = 0;
+          namesystem.writeLock();
+          metrics.setBlockOpsQueued(queue.size() + 1);
+          try {
+            long start = Time.monotonicNow();
+            do {
+              processed++;
+              action.run();
+              if (Time.monotonicNow() - start > MAX_LOCK_HOLD_MS) {
+                break;
+              }
+              action = queue.poll();
+            } while (action != null);
+          } finally {
+            namesystem.writeUnlock();
+            metrics.addBlockOpsBatched(processed - 1);
+          }
+        } catch (InterruptedException e) {
+          // ignore unless thread was specifically interrupted.
+          if (Thread.interrupted()) {
+            break;
+          }
+        }
+      }
+      queue.clear();
+    }
+
+    void enqueue(Runnable action) throws InterruptedException {
+      if (!queue.offer(action)) {
+        if (!isAlive() && namesystem.isRunning()) {
+          ExitUtil.terminate(1, getName()+" is not running");
+        }
+        long now = Time.monotonicNow();
+        if (now - lastFull > 4000) {
+          lastFull = now;
+          LOG.info("Block report queue is full");
+        }
+        queue.put(action);
+      }
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS55 INS29 INS83 INS83 INS43 INS59 MOV29 INS83 INS39 INS42 MOV44 INS44 INS43 INS8 UPD83 INS44 MOV60 MOV25 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS73 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS65 INS42 INS42 INS14 INS21 INS83 INS43 INS42 INS42 MOV6 MOV60 MOV25 INS54 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS54 INS42 INS42 INS83 INS74 INS42 INS42 INS60 INS21 INS54 INS42 INS42 INS21 INS41 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS39 INS42 INS44 INS43 INS8 INS66 INS43 INS32 INS42 INS8 INS12 INS42 INS42 INS8 INS12 INS43 INS43 INS83 INS74 INS59 INS32 INS8 INS12 INS12 INS32 INS32 INS42 INS34 INS42 INS34 INS43 INS43 INS42 INS14 INS46 INS21 INS42 INS54 INS61 INS21 INS43 INS42 INS42 INS25 INS42 INS22 INS42 INS21 INS21 INS21 INS44 INS8 UPD42 INS21 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS41 INS44 INS8 INS44 INS8 INS42 INS14 INS40 INS42 INS42 INS42 INS74 INS34 INS45 INS32 INS8 INS12 INS32 INS8 INS32 INS42 INS38 INS8 INS52 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS53 INS32 INS43 INS42 INS53 INS42 INS42 INS74 INS42 INS32 INS43 INS42 INS60 INS25 INS25 INS53 INS43 INS42 INS21 INS53 INS74 INS1 INS43 INS43 INS42 INS9 INS21 INS44 INS8 INS42 INS42 INS60 INS54 INS42 INS42 INS32 INS25 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS34 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS38 INS8 INS11 INS42 INS32 INS14 INS43 INS43 INS31 INS42 INS42 INS32 INS43 INS42 INS21 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS27 INS8 INS39 INS59 INS27 INS8 INS32 INS42 INS42 INS9 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS36 INS21 INS43 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 INS21 INS21 INS54 INS44 INS8 INS38 INS32 INS21 INS42 INS32 INS27 INS34 INS21 INS21 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS7 INS62 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS34 INS27 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS32 INS8 INS8 INS43 INS42 INS25 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS43 INS42 INS14 INS33 INS32 INS45 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS60 INS19 INS21 INS21 INS42 INS32 INS8 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS34 INS39 INS59 INS8 INS27 INS32 INS32 INS42 INS42 INS10 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS25 INS21 INS42 INS33 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS37 INS32 INS27 INS8 INS7 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS10 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42