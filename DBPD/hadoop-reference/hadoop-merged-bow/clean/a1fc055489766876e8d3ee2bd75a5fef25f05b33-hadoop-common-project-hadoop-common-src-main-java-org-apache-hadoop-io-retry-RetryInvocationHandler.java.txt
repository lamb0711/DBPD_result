HDFS-1623. High Availability Framework for HDFS NN. Contributed by Todd Lipcon, Aaron T. Myers, Eli Collins, Uma Maheswara Rao G, Bikas Saha, Suresh Srinivas, Jitendra Nath Pandey, Hari Mankude, Brandon Li, Sanjay Radia, Mingjie Lai, and Gregory Chanan


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296534 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.reflect.Proxy;
+import org.apache.hadoop.util.ThreadUtil;
+import org.apache.hadoop.ipc.RPC;
+  private volatile boolean hasMadeASuccessfulCall = false;
-        return invokeMethod(method, args);
+        Object ret = invokeMethod(method, args);
+        hasMadeASuccessfulCall = true;
+        return ret;
-        if (action == RetryAction.FAIL) {
-          LOG.warn("Exception while invoking " + method.getName()
-                   + " of " + currentProxy.getClass() + ". Not retrying.", e);
-          if (!method.getReturnType().equals(Void.TYPE)) {
-            throw e; // non-void methods can't fail without an exception
+        if (action.action == RetryAction.RetryDecision.FAIL) {
+          if (action.reason != null) {
+            LOG.warn("Exception while invoking " + 
+                currentProxy.getClass() + "." + method.getName() +
+                ". Not retrying because " + action.reason, e);
-          return null;
-        } else if (action == RetryAction.FAILOVER_AND_RETRY) {
-          LOG.warn("Exception while invoking " + method.getName()
-              + " of " + currentProxy.getClass()
-              + " after " + invocationFailoverCount + " fail over attempts."
-              + " Trying to fail over.", e);
-          // Make sure that concurrent failed method invocations only cause a
-          // single actual fail over.
-          synchronized (proxyProvider) {
-            if (invocationAttemptFailoverCount == proxyProviderFailoverCount) {
-              proxyProvider.performFailover(currentProxy);
-              proxyProviderFailoverCount++;
-              currentProxy = proxyProvider.getProxy();
+          throw e;
+        } else { // retry or failover
+          // avoid logging the failover if this is the first call on this
+          // proxy object, and we successfully achieve the failover without
+          // any flip-flopping
+          boolean worthLogging = 
+            !(invocationFailoverCount == 0 && !hasMadeASuccessfulCall);
+          worthLogging |= LOG.isDebugEnabled();
+          if (action.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY &&
+              worthLogging) {
+            String msg = "Exception while invoking " + method.getName()
+              + " of class " + currentProxy.getClass().getSimpleName();
+            if (invocationFailoverCount > 0) {
+              msg += " after " + invocationFailoverCount + " fail over attempts"; 
+            }
+            msg += ". Trying to fail over " + formatSleepMessage(action.delayMillis);
+            if (LOG.isDebugEnabled()) {
+              LOG.debug(msg, e);
-              LOG.warn("A failover has occurred since the start of this method"
-                  + " invocation attempt.");
+              LOG.warn(msg);
+            }
+          } else {
+            if(LOG.isDebugEnabled()) {
+              LOG.debug("Exception while invoking " + method.getName()
+                  + " of class " + currentProxy.getClass().getSimpleName() +
+                  ". Retrying " + formatSleepMessage(action.delayMillis), e);
-          invocationFailoverCount++;
-        }
-        if(LOG.isDebugEnabled()) {
-          LOG.debug("Exception while invoking " + method.getName()
-              + " of " + currentProxy.getClass() + ". Retrying.", e);
+          
+          if (action.delayMillis > 0) {
+            ThreadUtil.sleepAtLeastIgnoreInterrupts(action.delayMillis);
+          }
+          
+          if (action.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY) {
+            // Make sure that concurrent failed method invocations only cause a
+            // single actual fail over.
+            synchronized (proxyProvider) {
+              if (invocationAttemptFailoverCount == proxyProviderFailoverCount) {
+                proxyProvider.performFailover(currentProxy);
+                proxyProviderFailoverCount++;
+                currentProxy = proxyProvider.getProxy();
+              } else {
+                LOG.warn("A failover has occurred since the start of this method"
+                    + " invocation attempt.");
+              }
+            }
+            invocationFailoverCount++;
+          }
-
+  
+  private static String formatSleepMessage(long millis) {
+    if (millis > 0) {
+      return "after sleeping for " + millis + "ms.";
+    } else {
+      return "immediately.";
+    }
+  }
+  
-    RpcInvocationHandler inv = (RpcInvocationHandler) Proxy
-        .getInvocationHandler(currentProxy);
-    return inv.getConnectionId();
+    return RPC.getConnectionIdForProxy(currentProxy);

MOV26 INS26 UPD40 INS40 INS23 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS42 INS44 INS8 MOV78 INS83 MOV43 INS42 INS8 INS42 INS9 UPD42 MOV42 INS39 INS42 INS25 MOV41 INS27 INS8 INS8 INS42 INS34 INS41 INS41 UPD42 UPD42 INS42 INS27 INS45 INS60 INS21 INS45 INS42 INS45 INS43 INS59 INS7 INS42 INS25 INS42 INS42 MOV32 INS42 INS9 MOV27 INS8 INS8 INS40 UPD40 INS25 MOV53 INS60 INS21 INS25 INS25 MOV25 INS27 INS8 INS39 INS59 INS7 INS27 INS8 INS8 INS27 INS8 INS40 INS33 MOV21 INS42 INS38 INS42 INS32 INS27 INS42 INS60 INS25 INS21 MOV25 MOV25 INS40 INS34 INS21 INS40 UPD40 INS36 INS42 INS42 INS40 INS40 INS43 INS59 INS27 INS8 INS7 MOV32 INS8 INS32 INS32 MOV32 INS27 INS42 INS42 MOV27 INS42 INS34 INS21 INS42 INS27 INS21 INS21 INS42 INS42 INS42 INS42 INS40 MOV32 UPD45 UPD45 INS40 INS27 INS38 UPD45 INS32 INS7 INS45 INS32 INS32 INS32 INS42 INS34 INS42 MOV32 INS42 INS42 INS27 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS27 INS45 INS42 INS45 INS45 MOV32 INS45 INS32 INS45 INS32 MOV32 INS42 INS42 INS40 DEL42 DEL45 DEL32 DEL40 DEL32 DEL38 DEL42 DEL42 DEL42 DEL45 DEL45 DEL45 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL33 DEL41 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL31