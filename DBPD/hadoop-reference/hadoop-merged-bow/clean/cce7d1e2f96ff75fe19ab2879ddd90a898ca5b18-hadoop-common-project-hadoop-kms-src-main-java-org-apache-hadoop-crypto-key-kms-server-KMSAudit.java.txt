Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

+import org.apache.hadoop.security.UserGroupInformation;
-import java.security.Principal;
+import com.google.common.base.Joiner;
+import com.google.common.base.Strings;
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.RemovalListener;
+import com.google.common.cache.RemovalNotification;
+import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicLong;
+
+  private static class AuditEvent {
+    private final AtomicLong accessCount = new AtomicLong(-1);
+    private final String keyName;
+    private final String user;
+    private final KMS.KMSOp op;
+    private final String extraMsg;
+    private final long startTime = System.currentTimeMillis();
+
+    private AuditEvent(String keyName, String user, KMS.KMSOp op, String msg) {
+      this.keyName = keyName;
+      this.user = user;
+      this.op = op;
+      this.extraMsg = msg;
+    }
+
+    public String getExtraMsg() {
+      return extraMsg;
+    }
+
+    public AtomicLong getAccessCount() {
+      return accessCount;
+    }
+
+    public String getKeyName() {
+      return keyName;
+    }
+
+    public String getUser() {
+      return user;
+    }
+
+    public KMS.KMSOp getOp() {
+      return op;
+    }
+
+    public long getStartTime() {
+      return startTime;
+    }
+  }
+
+  public static enum OpStatus {
+    OK, UNAUTHORIZED, UNAUTHENTICATED, ERROR;
+  }
+
+  private static Set<KMS.KMSOp> AGGREGATE_OPS_WHITELIST = Sets.newHashSet(
+    KMS.KMSOp.GET_KEY_VERSION, KMS.KMSOp.GET_CURRENT_KEY,
+    KMS.KMSOp.DECRYPT_EEK, KMS.KMSOp.GENERATE_EEK
+  );
+
+  private Cache<String, AuditEvent> cache;
+
+  private ScheduledExecutorService executor;
+
-  private static void op(String status, String op, Principal user, String key,
-      String extraMsg) {
-    AUDIT_LOG.info("Status:{} User:{} Op:{} Name:{}{}", status, user.getName(),
-        op, key, extraMsg);
+  KMSAudit(long delay) {
+    cache = CacheBuilder.newBuilder()
+        .expireAfterWrite(delay, TimeUnit.MILLISECONDS)
+        .removalListener(
+            new RemovalListener<String, AuditEvent>() {
+              @Override
+              public void onRemoval(
+                  RemovalNotification<String, AuditEvent> entry) {
+                AuditEvent event = entry.getValue();
+                if (event.getAccessCount().get() > 0) {
+                  KMSAudit.this.logEvent(event);
+                  event.getAccessCount().set(0);
+                  KMSAudit.this.cache.put(entry.getKey(), event);
+                }
+              }
+            }).build();
+    executor = Executors.newScheduledThreadPool(1, new ThreadFactoryBuilder()
+        .setDaemon(true).setNameFormat(KMS_LOGGER_NAME + "_thread").build());
+    executor.scheduleAtFixedRate(new Runnable() {
+      @Override
+      public void run() {
+        cache.cleanUp();
+      }
+    }, delay / 10, delay / 10, TimeUnit.MILLISECONDS);
-  public static void ok(Principal user, String op, String key,
-      String extraMsg) {
-    op("OK", op, user, key, extraMsg);
-  }
-
-  public static void unauthorized(Principal user, String op, String key) {
-    op("UNAUTHORIZED", op, user, key, "");
-  }
-
-  public static void error(Principal user, String method, String url,
-      String extraMsg) {
-    AUDIT_LOG.info("Status:ERROR User:{} Method:{} URL:{} Exception:'{}'",
-        user.getName(), method, url, extraMsg);
-  }
-
-  public static void unauthenticated(String remoteHost, String method,
-      String url, String extraMsg) {
+  private void logEvent(AuditEvent event) {
-        "Status:UNAUTHENTICATED RemoteHost:{} Method:{} URL:{} ErrorMsg:'{}'",
-        remoteHost, method, url, extraMsg);
+        "OK[op={}, key={}, user={}, accessCount={}, interval={}ms] {}",
+        event.getOp(), event.getKeyName(), event.getUser(),
+        event.getAccessCount().get(),
+        (System.currentTimeMillis() - event.getStartTime()),
+        event.getExtraMsg());
+  private void op(OpStatus opStatus, final KMS.KMSOp op, final String user,
+      final String key, final String extraMsg) {
+    if (!Strings.isNullOrEmpty(user) && !Strings.isNullOrEmpty(key)
+        && (op != null)
+        && AGGREGATE_OPS_WHITELIST.contains(op)) {
+      String cacheKey = createCacheKey(user, key, op);
+      if (opStatus == OpStatus.UNAUTHORIZED) {
+        cache.invalidate(cacheKey);
+        AUDIT_LOG.info("UNAUTHORIZED[op={}, key={}, user={}] {}", op, key, user,
+            extraMsg);
+      } else {
+        try {
+          AuditEvent event = cache.get(cacheKey, new Callable<AuditEvent>() {
+            @Override
+            public AuditEvent call() throws Exception {
+              return new AuditEvent(key, user, op, extraMsg);
+            }
+          });
+          // Log first access (initialized as -1 so
+          // incrementAndGet() == 0 implies first access)
+          if (event.getAccessCount().incrementAndGet() == 0) {
+            event.getAccessCount().incrementAndGet();
+            logEvent(event);
+          }
+        } catch (ExecutionException ex) {
+          throw new RuntimeException(ex);
+        }
+      }
+    } else {
+      List<String> kvs = new LinkedList<String>();
+      if (op != null) {
+        kvs.add("op=" + op);
+      }
+      if (!Strings.isNullOrEmpty(key)) {
+        kvs.add("key=" + key);
+      }
+      if (!Strings.isNullOrEmpty(user)) {
+        kvs.add("user=" + user);
+      }
+      if (kvs.size() == 0) {
+        AUDIT_LOG.info("{} {}", opStatus.toString(), extraMsg);
+      } else {
+        String join = Joiner.on(", ").join(kvs);
+        AUDIT_LOG.info("{}[{}] {}", opStatus.toString(), join, extraMsg);
+      }
+    }
+  }
+
+  public void ok(UserGroupInformation user, KMS.KMSOp op, String key,
+      String extraMsg) {
+    op(OpStatus.OK, op, user.getShortUserName(), key, extraMsg);
+  }
+
+  public void ok(UserGroupInformation user, KMS.KMSOp op, String extraMsg) {
+    op(OpStatus.OK, op, user.getShortUserName(), null, extraMsg);
+  }
+
+  public void unauthorized(UserGroupInformation user, KMS.KMSOp op, String key) {
+    op(OpStatus.UNAUTHORIZED, op, user.getShortUserName(), key, "");
+  }
+
+  public void error(UserGroupInformation user, String method, String url,
+      String extraMsg) {
+    op(OpStatus.ERROR, null, user.getShortUserName(), null, "Method:'" + method
+        + "' Exception:'" + extraMsg + "'");
+  }
+
+  public void unauthenticated(String remoteHost, String method,
+      String url, String extraMsg) {
+    op(OpStatus.UNAUTHENTICATED, null, null, null, "RemoteHost:"
+        + remoteHost + " Method:" + method
+        + " URL:" + url + " ErrorMsg:'" + extraMsg + "'");
+  }
+
+  private static String createCacheKey(String user, String key, KMS.KMSOp op) {
+    return user + "#" + key + "#" + op;
+  }
+
+  public void shutdown() {
+    executor.shutdownNow();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS71 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS72 INS72 INS72 INS72 INS83 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 MOV42 MOV44 INS44 MOV44 INS44 INS44 MOV8 INS44 MOV44 MOV83 INS39 INS42 INS44 INS44 MOV44 INS8 UPD83 MOV83 MOV39 MOV42 MOV44 INS44 MOV44 MOV8 MOV44 INS83 INS83 INS43 INS42 INS44 MOV44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS42 MOV44 MOV44 INS44 MOV44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS39 INS42 INS21 INS21 INS21 INS43 INS42 INS21 INS43 INS42 INS83 INS43 INS42 INS83 UPD43 INS83 INS43 INS42 INS83 INS43 INS42 INS25 UPD43 INS43 INS42 INS43 INS42 INS43 INS42 INS21 UPD43 INS43 INS42 UPD43 INS42 INS43 INS42 INS43 INS42 INS41 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS43 INS42 UPD42 INS21 INS21 INS21 INS21 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS40 INS41 INS41 INS42 INS40 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS7 INS7 INS32 INS42 INS32 INS42 INS40 UPD42 INS42 INS42 INS27 INS8 INS8 UPD42 INS40 INS42 INS40 INS32 UPD42 INS40 UPD42 INS42 INS40 INS27 INS32 INS43 INS38 INS42 INS42 INS40 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS27 INS27 INS40 INS42 INS42 INS45 INS32 INS32 INS32 INS32 INS36 INS32 INS38 INS38 INS36 INS32 INS60 INS25 INS60 INS25 INS25 INS25 INS25 INS40 INS32 INS42 INS40 INS42 INS32 INS33 INS42 INS40 INS32 UPD42 INS40 INS33 INS33 INS27 UPD42 INS40 INS33 INS33 INS33 INS27 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS34 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS43 INS1 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS32 INS32 INS27 INS42 INS42 INS42 MOV43 INS59 INS27 INS8 INS8 INS74 INS59 INS27 INS8 INS38 INS8 INS38 INS8 INS27 INS8 INS8 MOV42 INS42 INS42 INS42 MOV42 INS42 UPD42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS14 INS32 INS42 INS42 INS31 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS40 INS21 INS21 INS54 INS43 INS43 INS42 INS14 INS42 INS33 INS21 INS32 INS21 INS32 INS21 INS32 INS34 INS21 INS60 INS21 INS32 INS42 INS42 INS40 INS74 INS1 INS32 INS42 INS27 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS12 INS42 INS42 INS74 INS32 INS42 INS42 MOV42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS43 INS31 INS14 INS42 INS9 INS42 INS45 INS42 INS21 INS42 INS42 INS42 MOV42 MOV42 UPD45 MOV45 UPD42 MOV42 INS42 INS42 INS42 INS60 INS25 INS44 INS8 INS43 INS43 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS32 MOV42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS78 INS83 MOV39 INS42 INS44 INS8 INS43 INS32 INS43 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS21 INS21 INS42 INS14 INS42 INS42 INS45 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS21 INS21 INS21 INS74 INS1 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS34 INS22 INS42 INS32 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL83 DEL83 DEL31 DEL83 DEL45 DEL45 DEL31 DEL83 DEL42 DEL45 DEL42 DEL42 DEL42 DEL83 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42