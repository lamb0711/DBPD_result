HADOOP-13627. Have an explicit KerberosAuthException for UGI to throw, text from public constants. Contributed by Xiao Chen.

+import static org.apache.hadoop.security.UGIExceptionMessages.*;
-      throw new IOException("failure to login using ticket cache file " +
-          ticketCache, le);
+      KerberosAuthException kae =
+          new KerberosAuthException(FAILURE_TO_LOGIN, le);
+      kae.setUser(user);
+      kae.setTicketCacheFile(ticketCache);
+      throw kae;
-   * @throws IOException        if the kerberos login fails
+   * @throws IOException
+   * @throws KerberosAuthException if the kerberos login fails
-      throw new IOException("Subject must not be null");
+      throw new KerberosAuthException(SUBJECT_MUST_NOT_BE_NULL);
-      throw new IOException("Provided Subject must contain a KerberosPrincipal");
+      throw new KerberosAuthException(SUBJECT_MUST_CONTAIN_PRINCIPAL);
-      throw new IOException("failure to login: " + le, le);
+      throw new KerberosAuthException(FAILURE_TO_LOGIN, le);
-   * @throws IOException if the keytab file can't be read
+   * @throws IOException
+   * @throws KerberosAuthException if it's a kerberos login exception.
-      throw new IOException("Login failure for " + user + " from keytab " + 
-                            path+ ": " + le, le);
+      KerberosAuthException kae = new KerberosAuthException(LOGIN_FAILURE, le);
+      kae.setUser(user);
+      kae.setKeytabFile(path);
+      throw kae;
-   * @throws IOException if a failure occurred in logout, or if the user did
-   * not log in by invoking loginUserFromKeyTab() before.
+   * @throws IOException
+   * @throws KerberosAuthException if a failure occurred in logout,
+   * or if the user did not log in by invoking loginUserFromKeyTab() before.
-      throw new IOException("loginUserFromKeytab must be done first");
+      throw new KerberosAuthException(MUST_FIRST_LOGIN_FROM_KEYTAB);
-      throw new IOException("Logout failure for " + user + " from keytab " +
-          keytabFile + ": " + le,
-          le);
+      KerberosAuthException kae = new KerberosAuthException(LOGOUT_FAILURE, le);
+      kae.setUser(user.toString());
+      kae.setKeytabFile(keytabFile);
+      throw kae;
+   * @throws KerberosAuthException if it's a kerberos login exception.
-   * @throws IOException on a failure
+   * @throws IOException
+   * @throws KerberosAuthException on a failure
-  public synchronized void reloginFromKeytab()
-  throws IOException {
+  public synchronized void reloginFromKeytab() throws IOException {
-      throw new IOException("loginUserFromKeyTab must be done first");
+      throw new KerberosAuthException(MUST_FIRST_LOGIN_FROM_KEYTAB);
-      throw new IOException("Login failure for " + keytabPrincipal + 
-          " from keytab " + keytabFile + ": " + le, le);
+      KerberosAuthException kae = new KerberosAuthException(LOGIN_FAILURE, le);
+      kae.setPrincipal(keytabPrincipal);
+      kae.setKeytabFile(keytabFile);
+      throw kae;
-   * @throws IOException on a failure
+   * @throws IOException
+   * @throws KerberosAuthException on a failure
-  public synchronized void reloginFromTicketCache()
-  throws IOException {
+  public synchronized void reloginFromTicketCache() throws IOException {
-      throw new IOException("login must be done first");
+      throw new KerberosAuthException(MUST_FIRST_LOGIN);
-      throw new IOException("Login failure for " + getUserName() + ": " + le,
-          le);
+      KerberosAuthException kae = new KerberosAuthException(LOGIN_FAILURE, le);
+      kae.setUser(getUserName());
+      throw kae;
-      throw new IOException("Login failure for " + user + " from keytab " + 
-                            path + ": " + le, le);
+      KerberosAuthException kae = new KerberosAuthException(LOGIN_FAILURE, le);
+      kae.setUser(user);
+      kae.setKeytabFile(path);
+      throw kae;

INS26 INS40 INS65 INS65 INS65 INS65 INS65 INS65 INS42 UPD42 UPD66 INS42 UPD42 UPD66 INS42 UPD42 UPD66 UPD66 INS42 INS66 INS42 UPD42 INS42 UPD42 INS60 INS21 INS21 INS53 INS60 INS21 INS21 INS53 INS60 INS21 INS21 INS53 INS60 INS21 INS21 INS53 INS60 INS21 INS53 INS60 INS21 INS21 INS53 INS43 INS59 INS32 INS32 INS42 UPD43 INS42 UPD43 INS42 INS43 INS59 INS32 INS32 INS42 UPD43 INS42 INS43 INS59 INS32 INS32 INS42 UPD43 INS42 INS43 INS59 INS32 INS32 INS42 UPD43 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD43 INS42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS14 INS42 INS42 MOV32 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 INS42 MOV42 UPD42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 UPD43 MOV43 INS42 MOV42 INS43 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL45 DEL45 DEL45 DEL42 DEL27 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL45 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL45 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL45 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53