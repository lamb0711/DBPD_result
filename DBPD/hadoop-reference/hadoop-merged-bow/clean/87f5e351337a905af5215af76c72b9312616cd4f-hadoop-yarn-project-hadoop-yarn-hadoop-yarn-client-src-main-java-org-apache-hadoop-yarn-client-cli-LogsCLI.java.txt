YARN-4842. Fixed "yarn logs" command to guess (and thus not require) the appOwner argument when viewing another user's logs. Contributed by Ram Venkatesh and Xuan Gong.

-    if (appOwner == null || appOwner.isEmpty()) {
-      appOwner = UserGroupInformation.getCurrentUser().getShortUserName();
-    }
-
+    ApplicationReport appReport = null;
-      appState = getApplicationState(appId);
+      appReport = getApplicationReport(appId);
+      appState = appReport.getYarnApplicationState();
+    if (appOwner == null || appOwner.isEmpty()) {
+      appOwner = guessAppOwner(appReport, appId);
+      if (appOwner == null) {
+        System.err.println("Can not find the appOwner. "
+            + "Please specify the correct appOwner");
+        System.err.println("Could not locate application logs for " + appId);
+        return -1;
+      }
+    }
+
+        if (resultCode == -1) {
+          System.err.println("Can not find the logs for the application: "
+              + appId + " with the appOwner: " + appOwner);
+        }
-  private YarnApplicationState getApplicationState(ApplicationId appId)
+  private ApplicationReport getApplicationReport(ApplicationId appId)
-      ApplicationReport appReport = yarnClient.getApplicationReport(appId);
-      return appReport.getYarnApplicationState();
+      return yarnClient.getApplicationReport(appId);
-            + "the application:" + appId);
-        System.err.println("This application:" + appId + " is finished."
-            + " Please enable the application history service. Or Using "
-            + "yarn logs -applicationId <appId> -containerId <containerId> "
-            + "--nodeAddress <nodeHttpAddress> to get the container logs");
+            + "the application:" + appId + " with the appOwner:" + appOwner);
+        System.err.println("This application:" + appId + " has finished."
+            + " Please enable the application-history service or explicitly"
+            + " use 'yarn logs -applicationId <appId> "
+            + "-containerId <containerId> --nodeAddress <nodeHttpAddress>' "
+            + "to get the container logs.");
-            + containerIdStr + "for the application:" + appIdStr);
+            + containerIdStr + "for the application:" + appIdStr
+            + " with the appOwner: " + appOwner);
+
+  private String guessAppOwner(ApplicationReport appReport,
+      ApplicationId appId) throws IOException {
+    String appOwner = null;
+    if (appReport != null) {
+      //always use the app owner from the app report if possible
+      appOwner = appReport.getUser();
+    } else {
+      appOwner = UserGroupInformation.getCurrentUser().getShortUserName();
+      appOwner = LogCLIHelpers.getOwnerForAppIdOrNull(
+          appId, appOwner, getConf());
+    }
+    return appOwner;
+  }

INS31 MOV43 UPD42 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS60 INS25 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS59 MOV27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 MOV8 INS42 INS42 INS42 INS33 INS21 INS21 MOV25 INS42 INS42 INS33 INS42 INS33 INS21 INS21 INS7 INS7 INS27 INS8 MOV32 INS7 INS7 UPD42 INS42 MOV32 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS25 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS32 INS38 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS27 INS40 INS42 INS27 INS34 INS42 INS38 INS21 INS42 INS45 INS45 INS45 INS42 INS34 INS32 INS27 INS45 INS42 UPD45 UPD45 UPD45 UPD45 INS45 INS40 INS42 INS27 MOV45 MOV45 INS45 INS42 INS45 INS42 INS45 INS42 DEL42 DEL43 DEL42 DEL59 DEL60