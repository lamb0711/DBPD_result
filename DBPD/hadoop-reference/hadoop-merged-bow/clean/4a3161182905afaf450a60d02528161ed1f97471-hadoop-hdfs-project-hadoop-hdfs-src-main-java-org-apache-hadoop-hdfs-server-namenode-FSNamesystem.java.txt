HDFS-7440. Consolidate snapshot related operations in a single class. Contributed by Haohui Mai.

-  void allowSnapshot(String path) throws SafeModeException, IOException {
+  void allowSnapshot(String path) throws IOException {
+    boolean success = false;
-
-      dir.writeLock();
-      try {
-        snapshotManager.setSnapshottable(path, true);
-      } finally {
-        dir.writeUnlock();
-      }
-      getEditLog().logAllowSnapshot(path);
+      FSDirSnapshotOp.allowSnapshot(dir, snapshotManager, path);
+      success = true;
-
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "allowSnapshot", path, null, null);
-    }
+    logAuditEvent(success, "allowSnapshot", path, null, null);
-  void disallowSnapshot(String path) throws SafeModeException, IOException {
+  void disallowSnapshot(String path) throws IOException {
+    boolean success = false;
-
-      dir.writeLock();
-      try {
-        snapshotManager.resetSnapshottable(path);
-      } finally {
-        dir.writeUnlock();
-      }
-      getEditLog().logDisallowSnapshot(path);
+      FSDirSnapshotOp.disallowSnapshot(dir, snapshotManager, path);
+      success = true;
-    
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "disallowSnapshot", path, null, null);
-    }
+    logAuditEvent(success, "disallowSnapshot", path, null, null);
-                        boolean logRetryCache)
-      throws SafeModeException, IOException {
-    checkOperation(OperationCategory.WRITE);
-    final FSPermissionChecker pc = getPermissionChecker();
-
+                        boolean logRetryCache) throws IOException {
-      if (isPermissionEnabled) {
-        checkOwner(pc, snapshotRoot);
-      }
-
-      if (snapshotName == null || snapshotName.isEmpty()) {
-        snapshotName = Snapshot.generateDefaultSnapshotName();
-      }
-      if(snapshotName != null){
-        if (!DFSUtil.isValidNameForComponent(snapshotName)) {
-            throw new InvalidPathException("Invalid snapshot name: "
-                + snapshotName);
-        }
-      }
-      dir.verifySnapshotName(snapshotName, snapshotRoot);
-      dir.writeLock();
-      try {
-        snapshotPath = snapshotManager.createSnapshot(snapshotRoot, snapshotName);
-      } finally {
-        dir.writeUnlock();
-      }
-      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName, logRetryCache);
+      snapshotPath = FSDirSnapshotOp.createSnapshot(dir,
+          snapshotManager, snapshotRoot, snapshotName, logRetryCache);
-    
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "createSnapshot", snapshotRoot, snapshotPath, null);
-    }
+    logAuditEvent(snapshotPath != null, "createSnapshot", snapshotRoot,
+        snapshotPath, null);
-    final FSPermissionChecker pc = getPermissionChecker();
-
+    boolean success = false;
-
-      if (isPermissionEnabled) {
-        checkOwner(pc, path);
-      }
-      dir.verifySnapshotName(snapshotNewName, path);
-      
-      snapshotManager.renameSnapshot(path, snapshotOldName, snapshotNewName);
-      getEditLog().logRenameSnapshot(path, snapshotOldName, snapshotNewName,
-          logRetryCache);
+      FSDirSnapshotOp.renameSnapshot(dir, snapshotManager, path,
+          snapshotOldName, snapshotNewName, logRetryCache);
+      success = true;
-
-    
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      String oldSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotOldName);
-      String newSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotNewName);
-      logAuditEvent(true, "renameSnapshot", oldSnapshotRoot, newSnapshotRoot, null);
-    }
+    String oldSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotOldName);
+    String newSnapshotRoot = Snapshot.getSnapshotPath(path, snapshotNewName);
+    logAuditEvent(success, "renameSnapshot", oldSnapshotRoot,
+        newSnapshotRoot, null);
-    final FSPermissionChecker checker = getPermissionChecker();
+    boolean success = false;
-      final String user = checker.isSuperUser()? null : checker.getUser();
-      status = snapshotManager.getSnapshottableDirListing(user);
+      status = FSDirSnapshotOp.getSnapshottableDirListing(dir, snapshotManager);
+      success = true;
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "listSnapshottableDirectory", null, null, null);
-    }
+    logAuditEvent(success, "listSnapshottableDirectory", null, null, null);
-    SnapshotDiffReport diffs;
+    SnapshotDiffReport diffs = null;
-    final FSPermissionChecker pc = getPermissionChecker();
-      if (isPermissionEnabled) {
-        checkSubtreeReadPermission(pc, path, fromSnapshot);
-        checkSubtreeReadPermission(pc, path, toSnapshot);
-      }
-      diffs = snapshotManager.diff(path, fromSnapshot, toSnapshot);
+      diffs = FSDirSnapshotOp.getSnapshotDiffReport(dir, snapshotManager,
+          path, fromSnapshot, toSnapshot);
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      logAuditEvent(true, "computeSnapshotDiff", null, null, null);
-    }
+    logAuditEvent(diffs != null, "computeSnapshotDiff", null, null, null);
-  private void checkSubtreeReadPermission(final FSPermissionChecker pc,
-      final String snapshottablePath, final String snapshot)
-          throws AccessControlException, UnresolvedLinkException {
-    final String fromPath = snapshot == null?
-        snapshottablePath: Snapshot.getSnapshotPath(snapshottablePath, snapshot);
-    checkPermission(pc, fromPath, false, null, null, FsAction.READ, FsAction.READ);
-  }
-  
-  void deleteSnapshot(String snapshotRoot, String snapshotName,
-                      boolean logRetryCache)
-      throws SafeModeException, IOException {
+  void deleteSnapshot(
+      String snapshotRoot, String snapshotName, boolean logRetryCache)
+      throws IOException {
-    final FSPermissionChecker pc = getPermissionChecker();
-
-    BlocksMapUpdateInfo collectedBlocks = new BlocksMapUpdateInfo();
+    boolean success = false;
+    BlocksMapUpdateInfo blocksToBeDeleted = null;
-      if (isPermissionEnabled) {
-        checkOwner(pc, snapshotRoot);
-      }
-
-      List<INode> removedINodes = new ChunkedArrayList<INode>();
-      dir.writeLock();
-      try {
-        snapshotManager.deleteSnapshot(snapshotRoot, snapshotName,
-            collectedBlocks, removedINodes);
-        dir.removeFromInodeMap(removedINodes);
-      } finally {
-        dir.writeUnlock();
-      }
-      removedINodes.clear();
-      getEditLog().logDeleteSnapshot(snapshotRoot, snapshotName, logRetryCache);
+      blocksToBeDeleted = FSDirSnapshotOp.deleteSnapshot(dir, snapshotManager,
+          snapshotRoot, snapshotName, logRetryCache);
+      success = true;
-
-    removeBlocks(collectedBlocks);
-    collectedBlocks.clear();
-
-    if (auditLog.isInfoEnabled() && isExternalInvocation()) {
-      String rootPath = Snapshot.getSnapshotPath(snapshotRoot, snapshotName);
-      logAuditEvent(true, "deleteSnapshot", rootPath, null, null);
+    // Breaking the pattern as removing blocks have to happen outside of the
+    // global lock
+    if (blocksToBeDeleted != null) {
+      removeBlocks(blocksToBeDeleted);
+
+    String rootPath = Snapshot.getSnapshotPath(snapshotRoot, snapshotName);
+    logAuditEvent(success, "deleteSnapshot", rootPath, null, null);

MOV60 INS60 MOV21 INS60 MOV21 MOV21 MOV60 MOV60 MOV21 MOV21 MOV21 INS25 MOV60 MOV21 INS39 INS59 INS39 INS59 INS39 INS39 MOV8 MOV8 INS39 INS27 INS8 INS42 INS9 MOV21 INS42 INS42 INS9 MOV21 MOV21 INS42 INS21 INS27 UPD42 INS9 INS21 INS21 INS42 UPD42 INS9 MOV21 INS21 INS42 INS33 MOV21 INS27 UPD42 INS9 UPD42 INS33 INS21 INS42 INS33 MOV21 INS42 INS7 INS7 INS7 INS42 INS33 INS32 INS7 INS7 INS42 INS33 INS7 INS7 INS42 INS42 UPD42 INS42 INS42 INS9 UPD42 UPD42 INS42 INS42 INS42 INS9 MOV42 INS32 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 INS42 INS9 INS42 INS9 INS42 INS32 INS42 INS9 UPD42 UPD42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 UPD42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL9 DEL32 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL54 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL42 DEL43 DEL42 DEL40 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL32 DEL32 DEL21 DEL9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL33 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL9 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL9 DEL33 DEL33 DEL40 DEL40 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL32 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL8 DEL25