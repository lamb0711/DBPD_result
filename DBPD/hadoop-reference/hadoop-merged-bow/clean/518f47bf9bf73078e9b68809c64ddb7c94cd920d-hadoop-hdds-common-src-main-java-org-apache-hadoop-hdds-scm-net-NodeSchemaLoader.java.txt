HDDS-976: Parse network topology from yaml file. Contributed by Junjie Chen. (#661)

Signed-off-by: Xiaoyu Yao <xyao@apache.org>
+import java.io.FileInputStream;
+import org.yaml.snakeyaml.Yaml;
-  public NodeSchemaLoadResult loadSchemaFromFile(String schemaFilePath)
+  public NodeSchemaLoadResult loadSchemaFromXml(String schemaFilePath)
+   * Load user defined network layer schemas from a YAML configuration file.
+   * @param schemaFilePath path of schema file
+   * @return all valid node schemas defined in schema file
+   */
+  public NodeSchemaLoadResult loadSchemaFromYaml(String schemaFilePath)
+          throws IllegalArgumentException {
+    try {
+      File schemaFile = new File(schemaFilePath);
+      if (!schemaFile.exists()) {
+        String msg = "Network topology layer schema file " + schemaFilePath +
+                " is not found.";
+        LOG.warn(msg);
+        throw new IllegalArgumentException(msg);
+      }
+      return loadSchemaFromYaml(schemaFile);
+    } catch (Exception e) {
+      throw new IllegalArgumentException("Fail to load network topology node"
+              + " schema file: " + schemaFilePath + " , error:"
+              + e.getMessage());
+    }
+  }
+
+  /**
+   * Load network topology layer schemas from a YAML configuration file.
+   * @param schemaFile schema file
+   * @return all valid node schemas defined in schema file
+   * @throws ParserConfigurationException ParserConfigurationException happen
+   * @throws IOException no such schema file
+   * @throws SAXException xml file has some invalid elements
+   * @throws IllegalArgumentException xml file content is logically invalid
+   */
+  private NodeSchemaLoadResult loadSchemaFromYaml(File schemaFile) {
+    LOG.info("Loading network topology layer schema file {}", schemaFile);
+    NodeSchemaLoadResult finalSchema;
+
+    try {
+      Yaml yaml = new Yaml();
+      NodeSchema nodeTree;
+
+      try (FileInputStream fileInputStream = new FileInputStream(schemaFile)) {
+        nodeTree = yaml.loadAs(fileInputStream, NodeSchema.class);
+      }
+      List<NodeSchema> schemaList = new ArrayList<>();
+      if (nodeTree.getType() != LayerType.ROOT) {
+        throw new IllegalArgumentException("First layer is not a ROOT node."
+                + " schema file: " + schemaFile.getAbsolutePath());
+      }
+      schemaList.add(nodeTree);
+      if (nodeTree.getSublayer() != null) {
+        nodeTree = nodeTree.getSublayer().get(0);
+      }
+
+      while (nodeTree != null) {
+        if (nodeTree.getType() == LayerType.LEAF_NODE
+                && nodeTree.getSublayer() != null) {
+          throw new IllegalArgumentException("Leaf node in the middle of path."
+                  + " schema file: " + schemaFile.getAbsolutePath());
+        }
+        if (nodeTree.getType() == LayerType.ROOT) {
+          throw new IllegalArgumentException("Multiple root nodes are defined."
+                  + " schema file: " + schemaFile.getAbsolutePath());
+        }
+        schemaList.add(nodeTree);
+        if (nodeTree.getSublayer() != null) {
+          nodeTree = nodeTree.getSublayer().get(0);
+        } else {
+          break;
+        }
+      }
+      finalSchema = new NodeSchemaLoadResult(schemaList, true);
+    } catch (RuntimeException e) {
+      throw  e;
+    } catch (Exception e) {
+      throw new IllegalArgumentException("Fail to load network topology node"
+              + " schema file: " + schemaFile.getAbsolutePath() + " , error:"
+              + e.getMessage());
+    }
+
+    return finalSchema;
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 UPD42 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS54 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS60 INS54 INS41 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS32 INS43 INS59 INS8 INS12 INS12 INS42 INS60 INS25 INS41 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS60 INS60 INS54 INS60 INS25 INS21 INS25 INS61 INS21 INS44 INS8 INS44 INS8 INS43 INS59 INS38 INS8 INS32 INS43 INS42 INS53 INS43 INS59 INS43 INS59 INS58 INS8 INS74 INS59 INS27 INS8 INS32 INS27 INS8 INS27 INS8 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS14 INS32 INS60 INS21 INS53 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS43 INS59 INS21 INS43 INS43 INS42 INS14 INS32 INS40 INS53 INS42 INS42 INS42 INS32 INS33 INS21 INS42 INS33 INS25 INS25 INS21 INS25 INS42 INS14 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS43 INS59 INS32 INS14 INS43 INS27 INS43 INS42 INS42 INS14 INS7 INS42 INS42 INS74 INS42 INS42 INS14 INS42 INS42 INS7 INS27 INS8 INS27 INS8 INS32 INS27 INS8 INS8 INS43 INS42 INS9 INS43 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS32 INS42 INS43 INS42 INS42 INS32 INS43 INS43 INS27 INS42 INS32 INS27 INS27 INS53 INS32 INS40 INS53 INS42 INS42 INS42 INS32 INS33 INS21 INS10 INS42 INS42 INS27 INS32 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS45 INS45 INS32 INS32 INS42 INS34 INS32 INS40 INS32 INS33 INS14 INS42 INS42 INS14 INS42 INS42 INS7 INS45 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS27 INS42 INS32 INS42 INS42 INS45 INS45 INS32 INS42 INS45 INS45 INS32 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42