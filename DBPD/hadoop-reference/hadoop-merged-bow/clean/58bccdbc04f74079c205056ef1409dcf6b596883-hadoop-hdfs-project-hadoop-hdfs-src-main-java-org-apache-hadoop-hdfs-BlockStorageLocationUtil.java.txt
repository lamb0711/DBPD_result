Merge r1569890 through r1572417 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1572418 13f79535-47bb-0310-9956-ffa450edef68

-import java.nio.ByteBuffer;
-import java.util.Iterator;
-import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
-  private static final Log LOG = LogFactory
+  static final Log LOG = LogFactory
-   * of datanodes and blocks.
+   * of datanodes and blocks. The blocks must all correspond to the same
+   * block pool.
+    
+    if (datanodeBlocks.isEmpty()) {
+      return Lists.newArrayList();
+    }
+    
-      List<ExtendedBlock> extendedBlocks = 
-          new ArrayList<ExtendedBlock>(locatedBlocks.size());
+      if (locatedBlocks.isEmpty()) {
+        continue;
+      }
+      
+      // Ensure that the blocks all are from the same block pool.
+      String poolId = locatedBlocks.get(0).getBlock().getBlockPoolId();
+      for (LocatedBlock lb : locatedBlocks) {
+        if (!poolId.equals(lb.getBlock().getBlockPoolId())) {
+          throw new IllegalArgumentException(
+              "All blocks to be queried must be in the same block pool: " +
+              locatedBlocks.get(0).getBlock() + " and " + lb +
+              " are from different pools.");
+        }
+      }
+      
+      long[] blockIds = new long[locatedBlocks.size()];
+      int i = 0;
-        extendedBlocks.add(b.getBlock());
+        blockIds[i++] = b.getBlock().getBlockId();
-          conf, datanode, extendedBlocks, dnTokens, timeout, 
+          conf, datanode, poolId, blockIds, dnTokens, timeout, 
-   * @return metadatas List of block metadata for each datanode, specifying
-   *         volume locations for each block
+   * @return metadatas Map of datanodes to block metadata of the DN
-  static List<HdfsBlocksMetadata> queryDatanodesForHdfsBlocksMetadata(
+  static Map<DatanodeInfo, HdfsBlocksMetadata> queryDatanodesForHdfsBlocksMetadata(
-      int poolsize, int timeout, boolean connectToDnViaHostname)
+      int poolsize, int timeoutMs, boolean connectToDnViaHostname)
-        createVolumeBlockLocationCallables(conf, datanodeBlocks, timeout, 
+        createVolumeBlockLocationCallables(conf, datanodeBlocks, timeoutMs, 
-      futures = executor.invokeAll(callables, timeout, TimeUnit.SECONDS);
+      futures = executor.invokeAll(callables, timeoutMs,
+          TimeUnit.MILLISECONDS);
-    // Initialize metadatas list with nulls
-    // This is used to later indicate if we didn't get a response from a DN
-    List<HdfsBlocksMetadata> metadatas = new ArrayList<HdfsBlocksMetadata>();
-    for (int i = 0; i < futures.size(); i++) {
-      metadatas.add(null);
-    }
+    Map<DatanodeInfo, HdfsBlocksMetadata> metadatas =
+        Maps.newHashMapWithExpectedSize(datanodeBlocks.size());
+      VolumeBlockLocationCallable callable = callables.get(i);
+      DatanodeInfo datanode = callable.getDatanodeInfo();
-        metadatas.set(i, metadata);
+        metadatas.put(callable.getDatanodeInfo(), metadata);
-        VolumeBlockLocationCallable callable = callables.get(i);
-        DatanodeInfo datanode = callable.getDatanodeInfo();
-          LOG.info("Failed to connect to datanode " +
-              datanode.getIpcAddr(false));
+          LOG.info("Failed to query block locations on datanode " +
+              datanode.getIpcAddr(false) + ": " + t);
-   * @param datanodeBlocks
-   *          Mapping from datanodes to the list of replicas on each datanode
-      List<LocatedBlock> blocks, Map<DatanodeInfo, 
-      List<LocatedBlock>> datanodeBlocks, List<HdfsBlocksMetadata> metadatas) {
+      List<LocatedBlock> blocks,
+      Map<DatanodeInfo, HdfsBlocksMetadata> metadatas) {
-    Map<ExtendedBlock, LocatedBlock> extBlockToLocBlock = 
-        new HashMap<ExtendedBlock, LocatedBlock>();
+    Map<Long, LocatedBlock> blockIdToLocBlock = 
+        new HashMap<Long, LocatedBlock>();
-      extBlockToLocBlock.put(b.getBlock(), b);
+      blockIdToLocBlock.put(b.getBlock().getBlockId(), b);
-      // Start off all IDs as invalid, fill it in later with results from RPCs
-        l.add(VolumeId.INVALID_VOLUME_ID);
+        l.add(null);
-    Iterator<HdfsBlocksMetadata> metadatasIter = metadatas.iterator();
-    Iterator<DatanodeInfo> datanodeIter = datanodeBlocks.keySet().iterator();
-    while (metadatasIter.hasNext()) {
-      HdfsBlocksMetadata metadata = metadatasIter.next();
-      DatanodeInfo datanode = datanodeIter.next();
+    for (Map.Entry<DatanodeInfo, HdfsBlocksMetadata> entry : metadatas.entrySet()) {
+      DatanodeInfo datanode = entry.getKey();
+      HdfsBlocksMetadata metadata = entry.getValue();
-      ExtendedBlock[] metaBlocks = metadata.getBlocks();
+      long[] metaBlockIds = metadata.getBlockIds();
-      for (int j = 0; j < metaBlocks.length; j++) {
+      for (int j = 0; j < metaBlockIds.length; j++) {
-        ExtendedBlock extBlock = metaBlocks[j];
+        long blockId = metaBlockIds[j];
-            || !extBlockToLocBlock.containsKey(extBlock)) {
+            || !blockIdToLocBlock.containsKey(blockId)) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("No data for block " + blockId);
+          }
-        LocatedBlock locBlock = extBlockToLocBlock.get(extBlock);
+        LocatedBlock locBlock = blockIdToLocBlock.get(blockId);
-    private Configuration configuration;
-    private int timeout;
-    private DatanodeInfo datanode;
-    private List<ExtendedBlock> extendedBlocks;
-    private List<Token<BlockTokenIdentifier>> dnTokens;
-    private boolean connectToDnViaHostname;
+    private final Configuration configuration;
+    private final int timeout;
+    private final DatanodeInfo datanode;
+    private final String poolId;
+    private final long[] blockIds;
+    private final List<Token<BlockTokenIdentifier>> dnTokens;
+    private final boolean connectToDnViaHostname;
-        DatanodeInfo datanode, List<ExtendedBlock> extendedBlocks,
+        DatanodeInfo datanode, String poolId, long []blockIds,
-      this.extendedBlocks = extendedBlocks;
+      this.poolId = poolId;
+      this.blockIds = blockIds;
-        metadata = cdp.getHdfsBlocksMetadata(extendedBlocks, dnTokens);
+        metadata = cdp.getHdfsBlocksMetadata(poolId, blockIds, dnTokens);

MOV26 MOV26 UPD40 UPD40 UPD74 INS23 INS23 INS25 UPD43 UPD43 MOV43 UPD42 INS60 UPD74 INS70 INS83 INS83 INS83 MOV83 INS83 INS43 INS59 INS83 INS83 INS5 MOV59 INS83 INS83 INS44 INS44 UPD66 INS66 INS32 INS8 UPD66 UPD42 UPD42 UPD74 MOV74 INS59 MOV43 MOV43 UPD74 INS44 INS32 MOV8 UPD42 MOV42 INS42 INS39 INS85 UPD42 INS43 INS42 INS5 UPD42 MOV42 INS21 INS42 INS42 INS41 INS25 INS60 INS70 INS60 INS60 UPD43 INS43 MOV43 MOV42 INS32 MOV60 MOV60 UPD43 INS43 UPD42 INS74 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS39 INS85 INS7 INS32 INS32 INS8 INS43 INS59 INS44 INS42 INS8 INS5 INS59 INS39 INS59 MOV43 UPD42 UPD42 INS42 INS42 INS42 INS32 UPD42 INS42 UPD74 INS32 UPD43 MOV43 MOV43 MOV43 INS43 MOV43 UPD5 INS22 INS42 UPD42 INS42 INS42 INS42 INS42 INS18 UPD42 MOV42 INS42 INS32 INS43 INS42 INS25 INS39 INS85 INS42 INS3 INS42 INS34 UPD42 MOV42 MOV42 UPD43 INS42 INS42 MOV32 MOV42 INS42 INS40 INS42 UPD42 UPD42 INS39 UPD42 UPD40 INS52 INS42 UPD42 INS32 INS42 UPD42 MOV42 INS38 INS8 INS5 MOV32 INS7 MOV43 INS42 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS39 INS32 INS42 INS32 INS53 INS39 INS85 INS2 MOV32 MOV42 UPD42 INS32 INS33 UPD42 INS25 INS42 UPD42 INS42 INS42 INS34 INS42 INS42 INS32 INS14 INS42 MOV37 UPD42 UPD42 MOV42 INS42 UPD42 INS32 INS8 UPD42 UPD42 INS32 INS42 INS43 INS27 UPD42 UPD42 INS42 INS42 INS21 INS42 INS42 UPD42 MOV42 INS45 INS32 INS45 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS34 UPD45 INS45 INS42 INS45 INS42 DEL40 DEL26 DEL83 DEL43 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL66 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL24 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL43 DEL42 DEL43 DEL74 DEL23 DEL43 DEL42 DEL43 DEL74 DEL44