Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242635 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.URISyntaxException;
-import java.util.List;
-
+import org.apache.hadoop.fs.FilterFileSystem;
-import org.apache.hadoop.security.token.Token;
-class ChRootedFileSystem extends FileSystem {
-  private final FileSystem myFs; // the base file system whose root is changed
+class ChRootedFileSystem extends FilterFileSystem {
-    return myFs;
+    return getRawFileSystem();
-   * @param fs base file system
-   * @param theRoot chRoot for this file system
-   * @throws URISyntaxException
+   * @param uri base file system
+   * @param conf configuration
+   * @throws IOException 
-  public ChRootedFileSystem(final FileSystem fs, final Path theRoot)
-    throws URISyntaxException {
-    myFs = fs;
-    myFs.makeQualified(theRoot); //check that root is a valid path for fs
-                            // Would like to call myFs.checkPath(theRoot); 
-                            // but not public
-    chRootPathPart = new Path(theRoot.toUri().getPath());
+  public ChRootedFileSystem(final URI uri, Configuration conf)
+      throws IOException {
+    super(FileSystem.get(uri, conf));
+    chRootPathPart = new Path(uri.getPath());
-    try {
-      initialize(fs.getUri(), fs.getConf());
-    } catch (IOException e) { // This exception should not be thrown
-      throw new RuntimeException("This should not occur");
-    }
-    
-    /*
-     * We are making URI include the chrootedPath: e.g. file:///chrootedPath.
-     * This is questionable since Path#makeQualified(uri, path) ignores
-     * the pathPart of a uri. Since this class is internal we can ignore
-     * this issue but if we were to make it external then this needs
-     * to be resolved.
-     */
-    // Handle the two cases:
-    //              scheme:/// and scheme://authority/
-    myUri = new URI(myFs.getUri().toString() + 
-        (myFs.getUri().getAuthority() == null ? "" :  Path.SEPARATOR) +
-          chRootPathPart.toString().substring(1));
-
+    myUri = uri;
-    myFs.initialize(name, conf);
-  @Override
-  public Path makeQualified(final Path path) {
-    return myFs.makeQualified(path);
-    // NOT myFs.makeQualified(fullPath(path));
-  }
- 
-    return myFs.makeQualified(
+    return makeQualified(
-    return myFs.create(fullPath(f), permission, overwrite, bufferSize,
+    return super.create(fullPath(f), permission, overwrite, bufferSize,
-    return myFs.delete(fullPath(f), recursive);
+    return super.delete(fullPath(f), recursive);
-    return myFs.getFileBlockLocations(
+    return super.getFileBlockLocations(
-    return myFs.getFileChecksum(fullPath(f));
+    return super.getFileChecksum(fullPath(f));
-    return myFs.getFileStatus(fullPath(f));
+    return super.getFileStatus(fullPath(f));
-    return myFs.getStatus(fullPath(p));
+    return super.getStatus(fullPath(p));
-    return myFs.getServerDefaults();
+    return super.getServerDefaults();
-    return myFs.listStatus(fullPath(f));
+    return super.listStatus(fullPath(f));
-    return myFs.mkdirs(fullPath(f), permission);
+    return super.mkdirs(fullPath(f), permission);
-    return myFs.open(fullPath(f), bufferSize);
+    return super.open(fullPath(f), bufferSize);
-    return myFs.append(fullPath(f), bufferSize, progress);
+    return super.append(fullPath(f), bufferSize, progress);
-    return myFs.rename(fullPath(src), fullPath(dst)); 
+    return super.rename(fullPath(src), fullPath(dst)); 
-    myFs.setOwner(fullPath(f), username, groupname);
+    super.setOwner(fullPath(f), username, groupname);
-    myFs.setPermission(fullPath(f), permission);
+    super.setPermission(fullPath(f), permission);
-    return myFs.setReplication(fullPath(f), replication);
+    return super.setReplication(fullPath(f), replication);
-    myFs.setTimes(fullPath(f), mtime, atime);
-  }
-
-  @Override
-  public void setVerifyChecksum(final boolean verifyChecksum)  {
-    myFs.setVerifyChecksum(verifyChecksum);
+    super.setTimes(fullPath(f), mtime, atime);
-  public List<Token<?>> getDelegationTokens(String renewer) throws IOException {
-    return myFs.getDelegationTokens(renewer);
+  public Path resolvePath(final Path p) throws IOException {
+    return super.resolvePath(fullPath(p));

MOV26 MOV31 UPD40 UPD43 UPD42 MOV43 INS8 MOV8 INS8 MOV78 INS39 UPD42 MOV44 MOV44 MOV43 MOV8 MOV78 MOV44 MOV8 MOV78 MOV44 MOV44 MOV43 MOV44 MOV43 MOV78 MOV43 INS42 MOV44 MOV43 INS42 UPD43 UPD42 INS46 INS41 INS41 UPD42 INS32 UPD42 UPD42 UPD66 UPD42 INS66 UPD42 INS32 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS48 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 MOV14 INS42 INS42 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS42 MOV32 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 MOV32 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL45 DEL40 DEL16 DEL36 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL27 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32