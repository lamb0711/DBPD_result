Revert "YARN-9768. RM Renew Delegation token thread should timeout and retry. Contributed by Manikandan R."

This reverts commit 0696828a090bc06446f75b29c967697f1d6d845b.

-import java.util.HashMap;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeoutException;
-  private long tokenRenewerThreadTimeout;
-  private long tokenRenewerThreadRetryInterval;
-  private int tokenRenewerThreadRetryMaxAttempts;
-  private final Map<DelegationTokenRenewerEvent, Future<?>> futures =
-      new HashMap<>();
-  private boolean delegationTokenRenewerPoolTrackerFlag = true;
-    tokenRenewerThreadTimeout =
-        conf.getTimeDuration(YarnConfiguration.RM_DT_RENEWER_THREAD_TIMEOUT,
-            YarnConfiguration.DEFAULT_RM_DT_RENEWER_THREAD_TIMEOUT,
-            TimeUnit.MILLISECONDS);
-    tokenRenewerThreadRetryInterval = conf.getTimeDuration(
-        YarnConfiguration.RM_DT_RENEWER_THREAD_RETRY_INTERVAL,
-        YarnConfiguration.DEFAULT_RM_DT_RENEWER_THREAD_RETRY_INTERVAL,
-        TimeUnit.MILLISECONDS);
-    tokenRenewerThreadRetryMaxAttempts =
-        conf.getInt(YarnConfiguration.RM_DT_RENEWER_THREAD_RETRY_MAX_ATTEMPTS,
-            YarnConfiguration.DEFAULT_RM_DT_RENEWER_THREAD_RETRY_MAX_ATTEMPTS);
-
-    if (delegationTokenRenewerPoolTrackerFlag) {
-      renewerService.submit(new DelegationTokenRenewerPoolTracker());
-    }
-
-        Future<?> future =
-            renewerService.submit(new DelegationTokenRenewerRunnable(evt));
-        futures.put(evt, future);
+        renewerService.execute(new DelegationTokenRenewerRunnable(evt));
-                LOG.debug("Token conf key is {} and value is {}",
-                    entry.getKey(), entry.getValue());
+                LOG.info(entry.getKey() + " ===> " + entry.getValue());
-
-  @VisibleForTesting
-  public void setDelegationTokenRenewerPoolTracker(boolean flag) {
-    delegationTokenRenewerPoolTrackerFlag = flag;
-  }
-
-  /**
-   * Create a timer task to retry the token renewer event which would be
-   * scheduled at defined intervals based on the configuration.
-   *
-   * @param evt
-   * @return Timer Task
-   */
-  private TimerTask getTimerTask(AbstractDelegationTokenRenewerAppEvent evt) {
-    return new TimerTask() {
-      @Override
-      public void run() {
-        LOG.info("Retrying token renewer thread for appid = {} and "
-            + "attempt is {}", evt.getApplicationId(),
-            evt.getAttempt());
-        evt.incrAttempt();
-
-        Collection<Token<?>> tokens =
-            evt.getCredentials().getAllTokens();
-        for (Token<?> token : tokens) {
-          DelegationTokenToRenew dttr = allTokens.get(token);
-          if (dttr != null) {
-            removeFailedDelegationToken(dttr);
-          }
-        }
-
-        DelegationTokenRenewerAppRecoverEvent event =
-            new DelegationTokenRenewerAppRecoverEvent(
-                evt.getApplicationId(), evt.getCredentials(),
-                evt.shouldCancelAtEnd(), evt.getUser(), evt.getTokenConf());
-        event.setAttempt(evt.getAttempt());
-        processDelegationTokenRenewerEvent(event);
-      }
-    };
-  }
-
-  /**
-   * Runnable class to set timeout for futures of all threads running in
-   * renewerService thread pool executor asynchronously.
-   *
-   * In case of timeout exception, retries would be attempted with defined
-   * intervals till no. of retry attempt reaches max attempt.
-   */
-  private final class DelegationTokenRenewerPoolTracker
-      implements Runnable {
-
-    DelegationTokenRenewerPoolTracker() {
-    }
-
-    /**
-     * Keep traversing <Future> of renewer pool threads and wait for specific
-     * timeout. In case of timeout exception, retry the event till no. of
-     * attempts reaches max attempts with specific interval.
-     */
-    @Override
-    public void run() {
-      while (true) {
-        for (Map.Entry<DelegationTokenRenewerEvent, Future<?>> entry : futures
-            .entrySet()) {
-          DelegationTokenRenewerEvent evt = entry.getKey();
-          Future<?> future = entry.getValue();
-          try {
-            future.get(tokenRenewerThreadTimeout, TimeUnit.MILLISECONDS);
-          } catch (TimeoutException e) {
-
-            // Cancel thread and retry the same event in case of timeout
-            if (future != null && !future.isDone() && !future.isCancelled()) {
-              future.cancel(true);
-              futures.remove(evt);
-              if (evt.getAttempt() < tokenRenewerThreadRetryMaxAttempts) {
-                renewalTimer.schedule(
-                    getTimerTask((AbstractDelegationTokenRenewerAppEvent) evt),
-                    tokenRenewerThreadRetryInterval);
-              } else {
-                LOG.info(
-                    "Exhausted max retry attempts {} in token renewer "
-                        + "thread for {}",
-                    tokenRenewerThreadRetryMaxAttempts, evt.getApplicationId());
-              }
-            }
-          } catch (Exception e) {
-            LOG.info("Problem in submitting renew tasks in token renewer "
-                + "thread.", e);
-          }
-        }
-      }
-    }
-  }
-
+  
-
-    private Configuration getTokenConf() {
-      return tokenConf;
-    }
-    private int attempt = 1;
-
-    public void incrAttempt() {
-      attempt++;
-    }
-
-    public int getAttempt() {
-      return attempt;
-    }
-
-    public void setAttempt(int attempt) {
-      this.attempt = attempt;
-    }

MOV32 UPD42 UPD42 INS27 MOV32 INS45 MOV32 MOV42 MOV42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL40 DEL40 DEL40 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL76 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL1 DEL14 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL76 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL61 DEL8 DEL31 DEL55 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL37 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31