HDFS-11402. HDFS Snapshots should capture point-in-time copies of OPEN files. (Manoj Govindassamy via Yongjun Zhang)

+import java.util.Set;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import com.google.common.collect.Lists;
+import org.apache.hadoop.util.Time;
-
-
+  static final int INODE_FILTER_WORKER_COUNT_MAX = 4;
+  static final int INODE_FILTER_WORKER_TASK_MIN = 512;
-  //
-  //
+  /**
+   * Get {@link INodesInPath} for all {@link INode} in the system
+   * which has a valid lease.
+   *
+   * @return Set<INodesInPath>
+   */
+  public Set<INodesInPath> getINodeWithLeases() {
+    return getINodeWithLeases(null);
+  }
+
+  private synchronized INode[] getINodesWithLease() {
+    int inodeCount = 0;
+    INode[] inodes = new INode[leasesById.size()];
+    for (long inodeId : leasesById.keySet()) {
+      inodes[inodeCount] = fsnamesystem.getFSDirectory().getInode(inodeId);
+      inodeCount++;
+    }
+    return inodes;
+  }
+
+  /**
+   * Get {@link INodesInPath} for all files under the ancestor directory which
+   * has valid lease. If the ancestor directory is null, then return all files
+   * in the system with valid lease. Callers must hold {@link FSNamesystem}
+   * read or write lock.
+   *
+   * @param ancestorDir the ancestor {@link INodeDirectory}
+   * @return Set<INodesInPath>
+   */
+  public Set<INodesInPath> getINodeWithLeases(final INodeDirectory
+      ancestorDir) {
+    assert fsnamesystem.hasReadLock();
+    final long startTimeMs = Time.monotonicNow();
+    Set<INodesInPath> iipSet = new HashSet<>();
+    final INode[] inodes = getINodesWithLease();
+    int inodeCount = inodes.length;
+    if (inodeCount == 0) {
+      return iipSet;
+    }
+
+    List<Future<List<INodesInPath>>> futureList = Lists.newArrayList();
+    final int workerCount = Math.min(INODE_FILTER_WORKER_COUNT_MAX,
+        (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));
+    ExecutorService inodeFilterService =
+        Executors.newFixedThreadPool(workerCount);
+    for (int workerIdx = 0; workerIdx < workerCount; workerIdx++) {
+      final int startIdx = workerIdx;
+      Callable<List<INodesInPath>> c = new Callable<List<INodesInPath>>() {
+        @Override
+        public List<INodesInPath> call() {
+          List<INodesInPath> iNodesInPaths = Lists.newArrayList();
+          for (int idx = startIdx; idx < inodeCount; idx += workerCount) {
+            INode inode = inodes[idx];
+            if (!inode.isFile()) {
+              continue;
+            }
+            INodesInPath inodesInPath = INodesInPath.fromINode(
+                fsnamesystem.getFSDirectory().getRoot(), inode.asFile());
+            if (ancestorDir != null &&
+                !inodesInPath.isDescendant(ancestorDir)) {
+              continue;
+            }
+            iNodesInPaths.add(inodesInPath);
+          }
+          return iNodesInPaths;
+        }
+      };
+
+      // Submit the inode filter task to the Executor Service
+      futureList.add(inodeFilterService.submit(c));
+    }
+    inodeFilterService.shutdown();
+
+    for (Future<List<INodesInPath>> f : futureList) {
+      try {
+        iipSet.addAll(f.get());
+      } catch (Exception e) {
+        LOG.warn("INode filter task encountered exception: ", e);
+      }
+    }
+    final long endTimeMs = Time.monotonicNow();
+    if ((endTimeMs - startTimeMs) > 1000) {
+      LOG.info("Took " + (endTimeMs - startTimeMs) + " ms to collect "
+          + iipSet.size() + " open files with leases" +
+          ((ancestorDir != null) ?
+              " under " + ancestorDir.getFullPathName() : "."));
+    }
+    return iipSet;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS29 INS83 INS74 INS42 INS8 INS83 INS83 INS5 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS42 INS34 INS42 INS34 INS65 INS65 INS43 INS43 INS41 INS43 INS85 INS60 INS60 INS70 INS41 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS6 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS24 INS21 INS70 INS60 INS25 INS41 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS42 INS42 INS32 INS42 INS39 INS59 INS5 INS59 INS44 INS32 INS8 INS42 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS42 INS42 INS32 INS83 INS39 INS59 INS74 INS59 INS83 INS5 INS59 INS39 INS59 INS27 INS8 INS74 INS59 INS83 INS39 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS44 INS42 INS8 INS83 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS34 INS43 INS85 INS42 INS3 INS39 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS85 INS42 INS32 INS42 INS40 INS42 INS34 INS41 INS43 INS74 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS74 INS42 INS54 INS42 INS32 INS36 INS34 INS21 INS42 INS5 INS32 INS7 INS37 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS34 INS83 INS39 INS59 INS74 INS59 INS32 INS43 INS74 INS8 INS12 INS42 INS42 INS27 INS32 INS43 INS85 INS42 INS42 INS2 INS32 INS42 INS43 INS42 INS43 INS43 INS27 INS42 INS42 INS43 INS74 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS43 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS36 INS34 INS42 INS43 INS43 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS45 INS36 INS45 INS32 INS45 INS36 INS42 INS42 INS27 INS42 INS42 INS43 INS74 INS31 INS42 INS42 INS32 INS42 INS32 INS27 INS42 INS42 INS16 INS36 INS42 INS42 INS43 INS43 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS36 INS27 INS45 INS27 INS42 INS42 INS42 INS43 INS43 INS60 INS24 INS41 INS27 INS45 INS32 INS42 INS34 INS42 INS42 INS74 INS59 INS58 INS27 INS7 INS8 INS42 INS42 INS33 INS42 INS42 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS42 INS60 INS25 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS2 INS32 INS18 INS42 INS42 INS32 INS27 INS38 INS18 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42