Merge branch 'trunk' into HDFS-6581

+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import org.apache.commons.io.IOUtils;
+import org.apache.hadoop.yarn.api.records.impl.pb.ApplicationAttemptIdPBImpl;
+import org.apache.hadoop.yarn.api.records.impl.pb.NodeIdPBImpl;
+import org.apache.hadoop.yarn.api.records.impl.pb.NodeReportPBImpl;
+import org.apache.hadoop.yarn.proto.YarnSecurityTokenProtos.NMTokenIdentifierProto;
+
+import com.google.protobuf.TextFormat;
-  private ApplicationAttemptId appAttemptId;
-  private NodeId nodeId;
-  private String appSubmitter;
-  private int keyId;
+  private NMTokenIdentifierProto proto;
-  public NMTokenIdentifier(ApplicationAttemptId appAttemptId, NodeId nodeId,
-      String applicationSubmitter, int masterKeyId) {
-    this.appAttemptId = appAttemptId;
-    this.nodeId = nodeId;
-    this.appSubmitter = applicationSubmitter;
-    this.keyId = masterKeyId;
+  public NMTokenIdentifier(ApplicationAttemptId appAttemptId, 
+      NodeId nodeId, String applicationSubmitter, int masterKeyId) {
+    NMTokenIdentifierProto.Builder builder = NMTokenIdentifierProto.newBuilder();
+    if (appAttemptId != null) {
+      builder.setAppAttemptId(
+          ((ApplicationAttemptIdPBImpl)appAttemptId).getProto());
+    }
+    if (nodeId != null) {
+      builder.setNodeId(((NodeIdPBImpl)nodeId).getProto());
+    }
+    builder.setAppSubmitter(applicationSubmitter);
+    builder.setKeyId(masterKeyId);
+    proto = builder.build();
-    return appAttemptId;
+    if (!proto.hasAppAttemptId()) {
+      return null;
+    }
+    return new ApplicationAttemptIdPBImpl(proto.getAppAttemptId());
-    return nodeId;
+    if (!proto.hasNodeId()) {
+      return null;
+    }
+    return new NodeIdPBImpl(proto.getNodeId());
-    return appSubmitter;
+    return proto.getAppSubmitter();
-    return keyId;
+    return proto.getKeyId();
-    ApplicationId applicationId = appAttemptId.getApplicationId();
-    out.writeLong(applicationId.getClusterTimestamp());
-    out.writeInt(applicationId.getId());
-    out.writeInt(appAttemptId.getAttemptId());
-    out.writeUTF(this.nodeId.toString());
-    out.writeUTF(this.appSubmitter);
-    out.writeInt(this.keyId);
+    out.write(proto.toByteArray());
-    appAttemptId =
-        ApplicationAttemptId.newInstance(
-            ApplicationId.newInstance(in.readLong(), in.readInt()),
-            in.readInt());
-    String[] hostAddr = in.readUTF().split(":");
-    nodeId = NodeId.newInstance(hostAddr[0], Integer.parseInt(hostAddr[1]));
-    appSubmitter = in.readUTF();
-    keyId = in.readInt();
+    DataInputStream dis = (DataInputStream)in;
+    byte[] buffer = IOUtils.toByteArray(dis);
+    proto = NMTokenIdentifierProto.parseFrom(buffer);
-    return UserGroupInformation.createRemoteUser(appAttemptId.toString());
+    String appAttemptId = null;
+    if (proto.hasAppAttemptId()) {
+      appAttemptId = new ApplicationAttemptIdPBImpl(
+          proto.getAppAttemptId()).toString();
+    }
+    return UserGroupInformation.createRemoteUser(appAttemptId);
+  }
+  
+  public NMTokenIdentifierProto getProto() {
+    return proto;
+  }
+  
+  @Override
+  public int hashCode() {
+    return getProto().hashCode();
+  }
+
+  @Override
+  public boolean equals(Object other) {
+    if (other == null)
+      return false;
+    if (other.getClass().isAssignableFrom(this.getClass())) {
+      return this.getProto().equals(this.getClass().cast(other).getProto());
+    }
+    return false;
+  }
+
+  @Override
+  public String toString() {
+    return TextFormat.shortDebugString(getProto());

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD43 INS83 INS42 MOV44 MOV44 MOV44 MOV44 INS8 MOV78 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 MOV78 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 MOV43 UPD42 UPD42 UPD42 INS60 INS25 INS25 MOV21 INS21 MOV21 INS25 INS25 MOV21 MOV21 INS60 INS60 MOV21 INS60 INS25 INS41 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS25 INS25 INS41 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS32 INS38 INS8 INS14 INS38 INS8 INS14 INS32 INS32 INS43 INS59 INS5 INS59 INS7 MOV43 INS59 INS32 INS8 INS32 INS42 INS32 INS42 INS27 INS41 INS32 INS8 INS9 INS40 INS42 INS32 INS42 INS33 INS21 INS42 INS33 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS41 INS43 INS32 INS32 INS41 INS43 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS11 INS39 INS85 INS42 INS32 INS42 INS32 INS42 INS33 UPD42 MOV42 INS42 INS21 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 UPD42 MOV42 INS42 INS33 INS9 INS32 INS42 INS32 INS41 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 UPD42 UPD42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS7 UPD42 UPD42 MOV42 INS42 INS52 UPD42 MOV42 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV42 INS32 INS32 INS42 INS32 INS36 INS42 INS36 INS42 INS14 UPD42 MOV42 INS52 INS42 INS32 INS42 INS11 INS11 INS43 INS32 INS32 UPD42 MOV42 INS42 INS43 INS42 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS52 UPD42 MOV42 INS42 INS42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL85 DEL5 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL42 DEL34 DEL2 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42