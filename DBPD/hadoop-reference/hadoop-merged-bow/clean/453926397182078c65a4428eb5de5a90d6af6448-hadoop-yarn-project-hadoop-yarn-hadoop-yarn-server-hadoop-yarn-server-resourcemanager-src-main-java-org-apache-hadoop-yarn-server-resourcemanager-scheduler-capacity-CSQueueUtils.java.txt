YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.server.resourcemanager.resource.ResourceCalculator;
-  public static int computeMaxActiveApplications(Resource clusterResource,
-      Resource minimumAllocation, float maxAMResourcePercent, 
-      float absoluteMaxCapacity) {
-    return 
+  public static int computeMaxActiveApplications(
+      ResourceCalculator calculator,
+      Resource clusterResource, Resource minimumAllocation, 
+      float maxAMResourcePercent, float absoluteMaxCapacity) {
+    return
-                     ((float)clusterResource.getMemory() / 
-                         minimumAllocation.getMemory()) * 
-                     maxAMResourcePercent * absoluteMaxCapacity), 
+                Resources.ratio(
+                    calculator, 
+                    clusterResource, 
+                    minimumAllocation) * 
+                    maxAMResourcePercent * absoluteMaxCapacity
+                ), 
+      final ResourceCalculator calculator,
-    final int clusterMemory = clusterResource.getMemory();
-    final int usedMemory = childQueue.getUsedResources().getMemory();
+    Resource queueLimit = Resources.none();
+    Resource usedResources = childQueue.getUsedResources();
-    float queueLimit = 0.0f;
-    if (clusterMemory > 0) {
-      queueLimit = clusterMemory * childQueue.getAbsoluteCapacity();
-      absoluteUsedCapacity = ((float)usedMemory / (float)clusterMemory);
-      usedCapacity = (queueLimit == 0) ? 0 : (usedMemory / queueLimit);
+
+    if (Resources.greaterThan(
+        calculator, clusterResource, clusterResource, Resources.none())) {
+      queueLimit = 
+          Resources.multiply(clusterResource, childQueue.getAbsoluteCapacity());
+      absoluteUsedCapacity = 
+          Resources.divide(calculator, clusterResource, 
+              usedResources, clusterResource);
+      usedCapacity = 
+          Resources.equals(queueLimit, Resources.none()) ? 0 :
+          Resources.divide(calculator, clusterResource, 
+              usedResources, queueLimit);
-    int available = 
-        Math.max((roundUp(minimumAllocation, (int)queueLimit) - usedMemory), 0); 
+    Resource available = 
+        Resources.roundUp(
+            calculator, 
+            Resources.subtract(queueLimit, usedResources), 
+            minimumAllocation);
-        Resources.createResource(available));
-  }
-
-  public static int roundUp(Resource minimumAllocation, int memory) {
-    int minMemory = minimumAllocation.getMemory();
-    return LeafQueue.divideAndCeil(memory, minMemory) * minMemory; 
-  }
-
-  public static int roundDown(Resource minimumAllocation, int memory) {
-    int minMemory = minimumAllocation.getMemory();
-    return (memory / minMemory) * minMemory;
-  }
+        Resources.max(
+            calculator, 
+            clusterResource, 
+            available, 
+            Resources.none()
+            )
+        );
+   }

INS26 INS40 INS31 INS44 MOV79 MOV83 MOV83 MOV39 MOV42 INS44 MOV44 MOV44 MOV44 MOV44 INS8 INS43 INS42 INS83 INS43 INS42 INS60 MOV60 MOV60 MOV60 INS25 MOV21 MOV21 INS60 INS21 INS42 INS42 INS43 MOV59 INS43 INS32 INS8 INS43 INS59 INS32 INS42 UPD42 INS42 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 MOV21 MOV21 INS21 MOV42 INS42 INS32 MOV32 INS42 INS32 UPD42 UPD42 INS42 INS42 INS7 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS32 MOV42 INS16 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL39 DEL32 DEL11 DEL42 DEL32 DEL27 DEL36 DEL83 DEL39 DEL42 DEL32 DEL42 DEL27 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL27 DEL36 DEL83 DEL39 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL36 DEL34 DEL42 DEL42 DEL27 DEL36 DEL16 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL39 DEL42 DEL11 DEL32 DEL42 DEL27 DEL36 DEL34 DEL32 DEL59 DEL60 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL41 DEL8 DEL31