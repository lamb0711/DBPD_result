MAPREDUCE-5994. Simplify ByteUtils and fix failing test. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1613003 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.UnsupportedEncodingException;
+import com.google.common.primitives.Ints;
+import com.google.common.primitives.Longs;
-  public static final int SIZEOF_INT = Integer.SIZE / Byte.SIZE;
-  public static final int SIZEOF_LONG = Long.SIZE / Byte.SIZE;
-
-  public static byte[] toBytes(String str) {
-    if (str == null) {
-      return null;
-    }
-    try {
-      return str.getBytes("utf-8");
-    } catch (final UnsupportedEncodingException e) {
-      throw new RuntimeException(e.getMessage());
-    }
-  }
-
-  public static String fromBytes(byte[] data) {
-    if (data == null) {
-      return null;
-    }
-    try {
-      return new String(data, "utf-8");
-    } catch (final UnsupportedEncodingException e) {
-      throw new RuntimeException(e.getMessage());
-    }
-  }
-
-   * Converts a byte array to an int value
-   * @param bytes byte array
-   * @return the int value
-   */
-  public static int toInt(byte[] bytes) {
-    return toInt(bytes, 0, SIZEOF_INT);
-  }
-
-  /**
-   * Converts a byte array to an int value
-   * @param bytes byte array
-   * @param offset offset into array
-   * @param length length of int (has to be {@link #SIZEOF_INT})
-   * @return the int value
-   * @throws RuntimeException if length is not {@link #SIZEOF_INT} or
-   * if there's not enough room in the array at the offset indicated.
-   */
-  public static int toInt(byte[] bytes, int offset, final int length) {
-    if (length != SIZEOF_INT || offset + length > bytes.length) {
-      throw new RuntimeException(
-        "toInt exception. length not equals to SIZE of Int or buffer overflow");
-    }
-    int n = 0;
-    for (int i = offset; i< offset + length; i++) {
-      n <<= 4;
-      n ^= bytes[i] & 0xff;
-    }
-    return n;
-  }
-
-  /**
-   * Converts a byte array to a long value.
-   * @param bytes array
-   * @return the long value
-   */
-  public static long toLong(byte[] bytes) {
-    return toLong(bytes, 0, SIZEOF_LONG);
-  }
-
-   /**
-   * Converts a byte array to a long value.
+   * Converts a big-endian byte array to a long value.
-   * @return the long value
-    return toLong(bytes, offset, SIZEOF_LONG);
+    return Longs.fromBytes(bytes[offset],
+      bytes[offset + 1],
+      bytes[offset + 2],
+      bytes[offset + 3],
+      bytes[offset + 4],
+      bytes[offset + 5],
+      bytes[offset + 6],
+      bytes[offset + 7]);
-   * Converts a byte array to a long value.
-   *
-   * @param bytes array of bytes
-   * @param offset offset into array
-   * @param length length of data (must be {@link #SIZEOF_LONG})
-   * @return the long value
-   * @throws RuntimeException if length is not {@link #SIZEOF_LONG} or
-   * if there's not enough room in the array at the offset indicated.
+   * Convert a big-endian integer from a byte array to a primitive value.
+   * @param bytes the array to parse from
+   * @param offset the offset in the array
-  public static long toLong(byte[] bytes, int offset, final int length) {
-    if (length != SIZEOF_LONG || offset + length > bytes.length) {
-      throw new RuntimeException(
-        "toLong exception. length not equals to SIZE of Long or buffer overflow");
-    }
-    long l = 0;
-    for (int i = offset; i < offset + length; i++) {
-      l <<= 8;
-      l ^= bytes[i] & 0xff;
-    }
-    return l;
+  public static int toInt(byte[] bytes, int offset) {
+    return Ints.fromBytes(bytes[offset],
+      bytes[offset + 1],
+      bytes[offset + 2],
+      bytes[offset + 3]);
-    return Float.intBitsToFloat(toInt(bytes, offset, SIZEOF_INT));
+    return Float.intBitsToFloat(toInt(bytes, offset));
-    return Double.longBitsToDouble(toLong(bytes, offset, SIZEOF_LONG));
+    return Double.longBitsToDouble(toLong(bytes, offset));
-   * Convert an int value to a byte array.  Big-endian.  Same as what DataOutputStream.writeInt
-   * does.
-   *
-   * @param val value
-   * @return the byte array
-   */
-  public static byte[] toBytes(int val) {
-    byte [] b = new byte[4];
-    for(int i = 3; i > 0; i--) {
-      b[i] = (byte) val;
-      val >>>= 8;
-    }
-    b[0] = (byte) val;
-    return b;
-  }
-
-  /**
-   * Convert a long value to a byte array using big-endian.
-   *
-   * @param val value to convert
-   * @return the byte array
-   */
-  public static byte[] toBytes(long val) {
-    byte [] b = new byte[8];
-    for (int i = 7; i > 0; i--) {
-      b[i] = (byte) val;
-      val >>>= 8;
-    }
-    b[0] = (byte) val;
-    return b;
-  }
-
-  /**
-    return toBytes(Float.floatToRawIntBits(f));
+    return Ints.toByteArray(Float.floatToRawIntBits(f));
-    return toBytes(Double.doubleToRawLongBits(d));
+    return Longs.toByteArray(Double.doubleToRawLongBits(d));

INS26 UPD40 INS40 INS31 INS31 MOV29 MOV83 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 MOV44 INS8 MOV29 MOV83 MOV83 INS39 INS42 MOV44 MOV44 INS8 MOV65 MOV65 INS41 INS41 UPD66 INS32 UPD66 UPD66 UPD66 INS32 UPD42 MOV42 UPD42 MOV42 INS2 INS2 INS2 INS2 INS2 INS2 INS2 INS2 INS42 INS42 INS2 INS2 INS2 INS2 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 MOV42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS27 MOV42 INS27 INS42 INS27 MOV42 INS34 INS42 INS34 MOV42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 MOV42 INS34 UPD42 MOV42 UPD34 MOV34 UPD42 MOV42 UPD34 MOV34 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL83 DEL83 DEL83 DEL39 DEL42 DEL40 DEL40 DEL27 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL40 DEL40 DEL27 DEL59 DEL23 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL41 DEL8 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL45 DEL14 DEL41 DEL8 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL34 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL42 DEL27 DEL40 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL27 DEL42 DEL37 DEL42 DEL34 DEL7 DEL21 DEL42 DEL42 DEL2 DEL34 DEL27 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL34 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL40 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL27 DEL42 DEL37 DEL42 DEL34 DEL7 DEL21 DEL42 DEL42 DEL2 DEL34 DEL27 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL39 DEL42 DEL11 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL24 DEL42 DEL34 DEL2 DEL39 DEL42 DEL11 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL39 DEL42 DEL11 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL24 DEL42 DEL34 DEL2 DEL39 DEL42 DEL11 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31