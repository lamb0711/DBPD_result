HDFS-2882. DN continues to start up, even if block pool fails to initialize (Contributed by Vinayakumar B)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1590941 13f79535-47bb-0310-9956-ffa450edef68

-  private volatile boolean initialized = false;
-  
+
+  static enum RunningState {
+    CONNECTING, INIT_FAILED, RUNNING, EXITED, FAILED;
+  }
+
+  private volatile RunningState runningState = RunningState.CONNECTING;
+
-  /**
-   * returns true if BP thread has completed initialization of storage
-   * and has registered with the corresponding namenode
-   * @return true if initialized
-   */
-  boolean isInitialized() {
-    return initialized;
-  }
-  
-    return shouldServiceRun && bpThread.isAlive();
+    if (!shouldServiceRun || !bpThread.isAlive()) {
+      return false;
+    }
+    return runningState == BPServiceActor.RunningState.RUNNING
+        || runningState == BPServiceActor.RunningState.CONNECTING;
-      // init stuff
-      try {
-        // setup storage
-        connectToNNAndHandshake();
-      } catch (IOException ioe) {
-        // Initial handshake, storage recovery or registration failed
-        // End BPOfferService thread
-        LOG.fatal("Initialization failed for block pool " + this, ioe);
-        return;
+      while (true) {
+        // init stuff
+        try {
+          // setup storage
+          connectToNNAndHandshake();
+          break;
+        } catch (IOException ioe) {
+          // Initial handshake, storage recovery or registration failed
+          runningState = RunningState.INIT_FAILED;
+          if (shouldRetryInit()) {
+            // Retry until all namenode's of BPOS failed initialization
+            LOG.error("Initialization failed for " + this + " "
+                + ioe.getLocalizedMessage());
+            sleepAndLogInterrupts(5000, "initializing");
+          } else {
+            runningState = RunningState.FAILED;
+            LOG.fatal("Initialization failed for " + this + ". Exiting. ", ioe);
+            return;
+          }
+        }
-      initialized = true; // bp is initialized;
-      
+      runningState = RunningState.RUNNING;
+
+      runningState = RunningState.EXITED;
+      runningState = RunningState.FAILED;
+  private boolean shouldRetryInit() {
+    return shouldRun() && bpos.shouldRetryInit();
+  }
+

MOV31 INS71 INS83 INS42 INS72 INS72 INS72 INS72 INS72 INS43 UPD42 INS83 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS40 INS25 UPD27 MOV27 INS8 INS27 INS27 INS38 INS38 INS41 INS27 INS27 INS61 INS21 INS32 INS32 INS42 MOV32 INS9 INS42 INS40 INS42 INS40 INS9 INS8 INS7 INS21 INS42 INS42 INS42 MOV54 UPD42 INS40 INS42 INS40 INS7 INS42 INS40 INS10 INS8 INS21 INS25 INS7 INS32 INS8 INS8 INS42 INS40 INS42 INS21 INS21 INS21 MOV21 MOV41 INS32 INS32 INS7 INS42 INS42 INS27 INS42 INS34 INS45 INS42 INS40 INS45 INS52 INS45 INS32 UPD45 INS45 INS42 INS42 DEL39 DEL9 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL42 DEL8 DEL9