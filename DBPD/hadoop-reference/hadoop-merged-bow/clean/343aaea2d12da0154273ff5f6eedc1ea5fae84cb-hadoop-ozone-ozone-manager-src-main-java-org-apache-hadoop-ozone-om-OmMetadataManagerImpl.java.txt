HDDS-864. Use strongly typed codec implementations for the tables of the OmMetadataManager. Contributed by Elek Marton.

-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Map;
-import org.apache.hadoop.hdfs.DFSUtil;
+import org.apache.hadoop.ozone.om.codec.OmBucketInfoCodec;
+import org.apache.hadoop.ozone.om.codec.OmKeyInfoCodec;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.BucketInfo;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.KeyInfo;
-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.VolumeInfo;
+import org.apache.hadoop.ozone.om.codec.OmVolumeArgsCodec;
+import org.apache.hadoop.ozone.om.codec.VolumeListCodec;
-  public Table<byte[], byte[]> getUserTable() {
+  public Table<String, VolumeList> getUserTable() {
-  public Table<byte[], byte[]> getVolumeTable() {
+  public Table<String, OmVolumeArgs> getVolumeTable() {
-  public Table<byte[], byte[]> getBucketTable() {
+  public Table<String, OmBucketInfo> getBucketTable() {
-  public Table<byte[], byte[]> getKeyTable() {
+  public Table<String, OmKeyInfo> getKeyTable() {
-  public Table<byte[], byte[]> getDeletedTable() {
+  public Table<String, OmKeyInfo> getDeletedTable() {
-  public Table<byte[], byte[]> getOpenKeyTable() {
+  public Table<String, OmKeyInfo> getOpenKeyTable() {
+
+          .addCodec(OmKeyInfo.class, new OmKeyInfoCodec())
+          .addCodec(OmBucketInfo.class, new OmBucketInfoCodec())
+          .addCodec(OmVolumeArgs.class, new OmVolumeArgsCodec())
+          .addCodec(VolumeList.class, new VolumeListCodec())
-      userTable = this.store.getTable(USER_TABLE);
+      userTable =
+          this.store.getTable(USER_TABLE, String.class, VolumeList.class);
-
-      volumeTable = this.store.getTable(VOLUME_TABLE);
+      this.store.getTable(VOLUME_TABLE, String.class,
+          String.class);
+      volumeTable =
+          this.store.getTable(VOLUME_TABLE, String.class, OmVolumeArgs.class);
-      bucketTable = this.store.getTable(BUCKET_TABLE);
+      bucketTable =
+          this.store.getTable(BUCKET_TABLE, String.class, OmBucketInfo.class);
-      keyTable = this.store.getTable(KEY_TABLE);
+      keyTable = this.store.getTable(KEY_TABLE, String.class, OmKeyInfo.class);
-      deletedTable = this.store.getTable(DELETED_TABLE);
+      deletedTable =
+          this.store.getTable(DELETED_TABLE, String.class, OmKeyInfo.class);
-      openKeyTable = this.store.getTable(OPEN_KEY_TABLE);
+      openKeyTable =
+          this.store.getTable(OPEN_KEY_TABLE, String.class, OmKeyInfo.class);
+
-  public byte[] getVolumeKey(String volume) {
-    return DFSUtil.string2Bytes(OzoneConsts.OM_KEY_PREFIX + volume);
+  public String getVolumeKey(String volume) {
+    return OzoneConsts.OM_KEY_PREFIX + volume;
-  public byte[] getUserKey(String user) {
-    return DFSUtil.string2Bytes(user);
+  public String getUserKey(String user) {
+    return user;
-  public byte[] getBucketKey(String volume, String bucket) {
+  public String getBucketKey(String volume, String bucket) {
-    return DFSUtil.string2Bytes(builder.toString());
+    return builder.toString();
-  public byte[] getOzoneKeyBytes(String volume, String bucket, String key) {
+  public String getOzoneKey(String volume, String bucket, String key) {
-    return DFSUtil.string2Bytes(builder.toString());
+    return builder.toString();
-  public byte[] getOpenKeyBytes(String volume, String bucket,
-      String key, long id) {
+  public String getOpenKey(String volume, String bucket,
+                           String key, long id) {
-    return DFSUtil.string2Bytes(openKey);
+    return openKey;
-    byte[] volumePrefix = getVolumeKey(volume + OM_KEY_PREFIX);
-    try (TableIterator<byte[], Table.KeyValue> bucketIter = bucketTable
-        .iterator()) {
-      Table.KeyValue<byte[], byte[]> kv = bucketIter.seek(volumePrefix);
-      if (kv != null && startsWith(kv.getKey(), volumePrefix)) {
+    String volumePrefix = getVolumeKey(volume + OM_KEY_PREFIX);
+
+    try (TableIterator<String, ? extends KeyValue<String, OmBucketInfo>>
+        bucketIter = bucketTable.iterator()) {
+      KeyValue<String, OmBucketInfo> kv = bucketIter.seek(volumePrefix);
+      if (kv != null && kv.getKey().startsWith(volumePrefix)) {
-    byte[] keyPrefix = getBucketKey(volume, bucket + OM_KEY_PREFIX);
-    try (TableIterator<byte[], Table.KeyValue> keyIter = keyTable.iterator()) {
-      Table.KeyValue<byte[], byte[]> kv = keyIter.seek(keyPrefix);
-      if (kv != null && startsWith(kv.getKey(), keyPrefix)) {
+    String keyPrefix = getBucketKey(volume, bucket);
+    try (TableIterator<String, ? extends KeyValue<String, OmKeyInfo>> keyIter =
+        keyTable.iterator()) {
+      KeyValue<String, OmKeyInfo> kv = keyIter.seek(keyPrefix);
+      if (kv != null && kv.getKey().startsWith(keyPrefix)) {
-    byte[] volumeNameBytes = getVolumeKey(volumeName);
+    String volumeNameBytes = getVolumeKey(volumeName);
-
-    byte[] startKey;
+    String startKey;
-    byte[] seekPrefix;
+    String seekPrefix;
-    try (TableIterator<byte[], Table.KeyValue> bucketIter = bucketTable
-        .iterator()) {
-      Table.KeyValue<byte[], byte[]> kv = bucketIter.seek(startKey);
+
+    try (TableIterator<String, ? extends KeyValue<String, OmBucketInfo>>
+        bucketIter = bucketTable.iterator()) {
+      KeyValue<String, OmBucketInfo> kv = bucketIter.seek(startKey);
-            Arrays.equals(kv.getKey(), startKey)) {
+            kv.getKey().equals(startKey)) {
-        if (kv != null && startsWith(kv.getKey(), seekPrefix)) {
-          result.add(OmBucketInfo.getFromProtobuf(
-              BucketInfo.parseFrom(kv.getValue())));
+        if (kv != null && kv.getKey().startsWith(seekPrefix)) {
+          result.add(kv.getValue());
-    byte[] bucketNameBytes = getBucketKey(volumeName, bucketName);
+    String bucketNameBytes = getBucketKey(volumeName, bucketName);
-    byte[] seekKey;
+    String seekKey;
-      seekKey = getOzoneKeyBytes(volumeName, bucketName, startKey);
+      seekKey = getOzoneKey(volumeName, bucketName, startKey);
-      seekKey = getOzoneKeyBytes(volumeName, bucketName, keyPrefix);
+      seekKey = getOzoneKey(volumeName, bucketName, keyPrefix);
-    byte[] seekPrefix;
+    String seekPrefix;
-      seekPrefix = getOzoneKeyBytes(volumeName, bucketName, keyPrefix);
+      seekPrefix = getOzoneKey(volumeName, bucketName, keyPrefix);
-    try (TableIterator<byte[], ? extends KeyValue<byte[], byte[]>> keyIter =
+    try (TableIterator<String, ? extends KeyValue<String, OmKeyInfo>> keyIter =
-      Table.KeyValue<byte[], byte[]> kv = keyIter.seek(seekKey);
+      KeyValue<String, OmKeyInfo> kv = keyIter.seek(seekKey);
-        if (kv != null && skipStartKey && Arrays.equals(kv.getKey(), seekKey)) {
+        if (kv != null && skipStartKey && kv.getKey().equals(seekKey)) {
-        if (kv != null && startsWith(kv.getKey(), seekPrefix)) {
-          result.add(OmKeyInfo.getFromProtobuf(
-              KeyInfo.parseFrom(kv.getValue())));
+        if (kv != null && kv.getKey().startsWith(seekPrefix)) {
+          result.add(kv.getValue());
-        byte[] volumeInfo = getVolumeTable().get(this.getVolumeKey(volumeName));
-        if (volumeInfo == null) {
+        OmVolumeArgs volumeArgs =
+            getVolumeTable().get(this.getVolumeKey(volumeName));
+        if (volumeArgs == null) {
-        VolumeInfo info = VolumeInfo.parseFrom(volumeInfo);
-        OmVolumeArgs volumeArgs = OmVolumeArgs.getFromProtobuf(info);
-  private VolumeList getVolumesByUser(String userName)
+  private VolumeList getVolumesByUser(String userNameKey)
-    return getVolumesByUser(getUserKey(userName));
-  }
-
-  private VolumeList getVolumesByUser(byte[] userNameKey)
-      throws OMException {
-    VolumeList volumes = null;
-      byte[] volumesInBytes = getUserTable().get(userNameKey);
-      if (volumesInBytes == null) {
+      VolumeList volumeList = getUserTable().get(userNameKey);
+      if (volumeList == null) {
+      } else {
+        return volumeList;
-      volumes = VolumeList.parseFrom(volumesInBytes);
-    return volumes;
-    try (TableIterator<byte[], ? extends KeyValue<byte[], byte[]>> keyIter =
+    try (TableIterator<String, ? extends KeyValue<String, OmKeyInfo>> keyIter =
-        KeyValue<byte[], byte[]> kv = keyIter.next();
+        KeyValue<String, OmKeyInfo> kv = keyIter.next();
-          OmKeyInfo info =
-              OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(kv.getValue()));
+          OmKeyInfo info = kv.getValue();
-              .setKeyName(DFSUtil.bytes2String(kv.getKey()))
+              .setKeyName(kv.getKey())
-    List<Map.Entry<byte[], byte[]>> rangeResult = Collections.emptyList();
-
-    for (Map.Entry<byte[], byte[]> entry : rangeResult) {
-      OmKeyInfo info =
-          OmKeyInfo.getFromProtobuf(KeyInfo.parseFrom(entry.getValue()));
-      long lastModify = info.getModificationTime();
-      if (now - lastModify < this.openKeyExpireThresholdMS) {
-        // consider as may still be active, not hanging.
-        continue;
-      }
-      // Get block keys as a list.
-      List<BlockID> item = info.getLatestVersionLocations()
-          .getBlocksLatestVersionOnly().stream()
-          .map(b -> new BlockID(b.getContainerID(), b.getLocalID()))
-          .collect(Collectors.toList());
-      BlockGroup keyBlocks = BlockGroup.newBuilder()
-          .setKeyName(DFSUtil.bytes2String(entry.getKey()))
-          .addAllBlockIDs(item)
-          .build();
-      keyBlocksList.add(keyBlocks);
-    }

MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD74 UPD74 UPD74 UPD74 UPD74 MOV78 UPD83 INS74 INS42 MOV8 INS43 INS43 INS43 INS43 UPD42 INS43 UPD42 INS8 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 INS42 INS42 INS42 INS41 INS42 MOV41 INS42 INS43 MOV60 MOV60 MOV41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 MOV27 INS42 MOV32 MOV32 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS21 INS42 UPD74 INS42 UPD74 INS42 INS42 INS42 UPD74 INS42 INS42 INS42 UPD74 UPD74 INS32 INS43 INS76 UPD74 MOV8 INS42 INS43 INS76 UPD74 MOV8 INS43 INS76 UPD74 INS43 UPD76 UPD74 MOV43 INS8 INS43 UPD76 INS32 MOV22 INS42 INS42 INS57 INS57 INS42 INS74 UPD43 INS43 INS43 MOV27 MOV42 INS42 INS74 UPD43 INS43 INS43 MOV27 MOV42 INS42 INS74 UPD43 INS43 INS43 INS42 UPD74 UPD43 INS43 INS43 UPD42 UPD42 INS41 INS42 UPD74 INS32 INS42 MOV22 INS57 INS57 INS43 INS43 MOV22 INS57 INS57 MOV22 INS57 INS57 MOV22 INS57 INS57 MOV22 INS57 INS57 INS22 INS57 INS57 UPD43 MOV43 INS43 INS43 INS42 INS42 INS42 UPD43 MOV43 INS43 INS43 INS42 INS42 INS42 UPD43 MOV43 INS43 INS43 INS42 INS42 INS42 INS27 MOV27 UPD42 UPD42 UPD42 INS43 INS43 INS42 INS42 INS42 INS27 MOV27 MOV43 INS42 MOV43 INS43 INS43 UPD74 INS32 INS42 INS57 INS14 INS43 MOV43 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS52 INS42 INS43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS32 MOV27 MOV42 INS42 INS42 MOV27 INS32 MOV27 MOV42 UPD42 UPD42 INS42 INS42 MOV43 INS43 INS43 INS32 INS42 INS57 INS14 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 UPD42 UPD42 MOV32 MOV32 INS42 INS42 UPD42 UPD42 MOV32 INS42 INS42 MOV32 INS42 INS57 INS14 INS43 INS43 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV32 MOV32 UPD42 INS57 INS14 INS43 INS43 INS42 INS42 MOV42 UPD42 INS43 INS43 INS42 INS42 UPD42 INS42 INS42 INS42 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL83 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL31 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL39 DEL85 DEL5 DEL40 DEL39 DEL85 DEL5 DEL40 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42 DEL27 DEL40 DEL39 DEL85 DEL5 DEL40 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL40 DEL39 DEL85 DEL5 DEL40 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL40 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL39 DEL85 DEL5 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL52 DEL42 DEL22 DEL27 DEL18 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL86 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8