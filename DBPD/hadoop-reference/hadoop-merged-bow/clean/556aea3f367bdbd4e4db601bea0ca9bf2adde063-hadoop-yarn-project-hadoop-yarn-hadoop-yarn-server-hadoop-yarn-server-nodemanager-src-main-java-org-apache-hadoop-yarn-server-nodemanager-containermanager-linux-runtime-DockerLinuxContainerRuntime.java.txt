YARN-7487. Ensure volume to include GPU base libraries after created by plugin. Contributed by Wangda Tan.

-  private void runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,
+  private String runDockerVolumeCommand(DockerVolumeCommand dockerVolumeCommand,
+      return output;
-              dockerCommandPlugin.getCreateDockerVolumeCommand(ctx.getContainer());
+              dockerCommandPlugin.getCreateDockerVolumeCommand(
+                  ctx.getContainer());
+
+            // After volume created, run inspect to make sure volume properly
+            // created.
+            if (dockerVolumeCommand.getSubCommand().equals(
+                DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND)) {
+              checkDockerVolumeCreated(dockerVolumeCommand, container);
+            }
+  private void checkDockerVolumeCreated(
+      DockerVolumeCommand dockerVolumeCreationCommand, Container container)
+      throws ContainerExecutionException {
+    DockerVolumeCommand dockerVolumeInspectCommand = new DockerVolumeCommand(
+        DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);
+    dockerVolumeInspectCommand.setFormat("{{.Name}},{{.Driver}}");
+    String output = runDockerVolumeCommand(dockerVolumeInspectCommand,
+        container);
+
+    // Parse output line by line and check if it matches
+    String volumeName = dockerVolumeCreationCommand.getVolumeName();
+    String driverName = dockerVolumeCreationCommand.getDriverName();
+    if (driverName == null) {
+      driverName = "local";
+    }
+
+    for (String line : output.split("\n")) {
+      line = line.trim();
+      String[] arr = line.split(",");
+      String v = arr[0].trim();
+      String d = null;
+      if (arr.length > 1) {
+        d = arr[1].trim();
+      }
+      if (d != null && volumeName.equals(v) && driverName.equals(d)) {
+        // Good we found it.
+        LOG.info(
+            "Docker volume-name=" + volumeName + " driver-name=" + driverName
+                + " already exists for container=" + container
+                .getContainerId() + ", continue...");
+        return;
+      }
+    }
+
+    // Couldn't find the volume
+    String message =
+        " Couldn't find volume=" + volumeName + " driver=" + driverName
+            + " for container=" + container.getContainerId()
+            + ", please check error message in log to understand "
+            + "why this happens.";
+    LOG.error(message);
+
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("All docker volumes in the system, command="
+          + dockerVolumeInspectCommand.toString());
+    }
+
+    throw new ContainerExecutionException(message);
+  }
+

INS31 INS43 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS60 INS60 INS25 INS70 INS60 INS21 INS25 INS53 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS44 INS32 INS8 INS43 INS59 INS32 INS32 INS8 INS14 INS41 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS42 INS42 INS45 INS21 INS60 INS60 INS60 INS25 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS7 INS5 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS45 INS32 INS42 INS42 INS42 INS45 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS40 INS34 INS21 INS27 INS32 INS21 INS41 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS2 INS42 INS7 INS27 INS32 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS34 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS8 INS2 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 MOV21 INS25 INS42 INS34 INS42 INS42 INS32 MOV8 INS32 INS42 INS40 INS21 INS42 INS42 INS32 INS42 INS42 INS42 DEL39