Merge r1477868 through r1479732 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479733 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcResponseHeaderProto.RpcErrorCodeProto;
-              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);
+              RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_UNAUTHORIZED, 
+              null, ioeClass, ioeMessage);
-        setupResponse(buffer, fakeCall, RpcStatusProto.FATAL,
+        setupResponse(buffer, fakeCall, 
+            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_VERSION_MISMATCH,
-      setupResponse(buffer, fakeCall, RpcStatusProto.FATAL, null,
-          IpcException.class.getName(), errMsg);
+      setupResponse(buffer, fakeCall, 
+       RpcStatusProto.FATAL,  RpcErrorCodeProto.FATAL_UNSUPPORTED_SERIALIZATION,
+       null, IpcException.class.getName(), errMsg);
-        processData(buf);
+        processRpcRequest(buf);
-    private void processData(byte[] buf) throws  IOException, InterruptedException {
+    /**
+     * Process an RPC Request - the connection headers and context have been
+     * read
+     * @param buf - contains the RPC request header and the rpc request
+     * @throws RpcServerException due to fatal rpc layer issues such as
+     *   invalid header. In this case a RPC fatal status response is sent back
+     *   to client.
+     */
+    
+    private void processRpcRequest(byte[] buf) 
+        throws  RpcServerException, IOException, InterruptedException {
-        throw new IOException(" IPC Server: No rpc op in rpcRequestHeader");
+        String err = " IPC Server: No rpc op in rpcRequestHeader";
+        respondBadRpcHeader(new Call(header.getCallId(), null, this),
+            RpcServerException.class.getName(), err);
+        throw new RpcServerException(err);
-        throw new IOException("IPC Server does not implement operation" + 
-              header.getRpcOp());
+        String err = "IPC Server does not implement rpc header operation" + 
+                header.getRpcOp();
+        respondBadRpcHeader(new Call(header.getCallId(), null, this),
+            RpcServerException.class.getName(), err);
+        throw new RpcServerException(err);
-        throw new IOException(" IPC Server: No rpc kind in rpcRequestHeader");
+        String err = " IPC Server: No rpc kind in rpcRequestHeader";
+        respondBadRpcHeader(new Call(header.getCallId(), null, this),
+            RpcServerException.class.getName(), err);
+        throw new RpcServerException(err);
-        final Call readParamsFailedCall = 
-            new Call(header.getCallId(), null, this);
-        ByteArrayOutputStream responseBuffer = new ByteArrayOutputStream();
-
-        setupResponse(responseBuffer, readParamsFailedCall, RpcStatusProto.FATAL, null,
-            IOException.class.getName(),
-            "Unknown rpc kind "  + header.getRpcKind());
-        responder.doRespond(readParamsFailedCall);
-        return;   
+        final String err = "Unknown rpc kind in rpc header"  + 
+            header.getRpcKind();
+        respondBadRpcHeader(new Call(header.getCallId(), null, this),
+            RpcServerException.class.getName(), err);
+        throw new RpcServerException(err);   
-      } catch (Throwable t) {
+      } catch (Throwable t) { // includes runtime exception from newInstance
+        String err = "IPC server unable to read call parameters: "+ t.getMessage();
-        setupResponse(responseBuffer, readParamsFailedCall, RpcStatusProto.FATAL, null,
-            t.getClass().getName(),
-            "IPC server unable to read call parameters: " + t.getMessage());
+        setupResponse(responseBuffer, readParamsFailedCall, 
+            RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_DESERIALIZING_REQUEST,
+            null, t.getClass().getName(),
+            err);
-        return;
+        throw new RpcServerException(err, t);
-        setupResponse(authFailedResponse, authFailedCall, RpcStatusProto.FATAL, null,
+        setupResponse(authFailedResponse, authFailedCall, 
+            RpcStatusProto.FATAL,  RpcErrorCodeProto.FATAL_UNAUTHORIZED, null,
+          RpcStatusProto returnStatus = RpcStatusProto.SUCCESS;
+          RpcErrorCodeProto detailedErr = null;
-
+            if (e instanceof RpcServerException) {
+              RpcServerException rse = ((RpcServerException)e); 
+              returnStatus = rse.getRpcStatusProto();
+              detailedErr = rse.getRpcErrorCodeProto();
+            } else {
+              returnStatus = RpcStatusProto.ERROR;
+              detailedErr = RpcErrorCodeProto.ERROR_APPLICATION;
+            }
-            setupResponse(buf, call, (error == null) ? RpcStatusProto.SUCCESS
-                : RpcStatusProto.ERROR, value, errorClass, error);
+            setupResponse(buf, call, returnStatus, detailedErr, 
+                value, errorClass, error);
-                             Call call, RpcStatusProto status, 
+                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,
+            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,
+      headerBuilder.setErrorDetail(erCode);
+  
+  private void respondBadRpcHeader(Call call, String errorClass, String error)
+      throws IOException
+  {
+    ByteArrayOutputStream responseBuf = new ByteArrayOutputStream();
+    setupResponse(responseBuf, call, 
+        RpcStatusProto.FATAL,  RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,
+        null, errorClass, error);
+    responder.doRespond(call);
+    return; 
+    
+  }
+  

INS26 INS40 INS31 INS44 INS83 INS39 INS42 INS44 INS44 INS44 MOV43 INS8 INS29 UPD42 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS41 INS65 INS65 INS65 INS42 INS25 INS25 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 MOV38 INS8 MOV27 INS8 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS40 INS33 INS42 INS42 INS42 INS42 INS42 INS40 INS60 INS21 INS60 INS21 INS60 INS21 INS53 MOV21 INS60 MOV21 INS53 INS32 INS43 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS14 INS83 INS43 INS59 INS14 INS60 INS53 INS42 INS42 INS42 INS42 INS40 UPD42 INS42 INS42 INS45 INS42 INS14 INS32 INS42 UPD43 INS42 INS42 INS42 MOV27 INS42 INS14 INS32 INS42 UPD43 INS42 UPD42 MOV42 INS42 INS45 INS42 INS14 INS32 INS42 UPD43 MOV43 INS42 INS42 INS42 MOV27 UPD42 INS14 INS42 INS43 INS42 INS43 INS59 INS14 INS60 INS60 INS43 INS32 INS33 INS52 INS57 INS42 UPD42 UPD45 INS43 INS32 INS33 INS52 INS57 INS42 UPD42 MOV43 MOV32 MOV33 MOV52 INS57 INS42 UPD42 UPD45 INS43 INS32 INS33 INS52 INS42 INS42 INS42 MOV27 INS40 INS42 INS43 INS42 INS42 INS40 INS43 INS59 INS43 INS59 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS33 INS40 INS40 INS42 INS42 UPD42 MOV42 INS42 INS25 INS62 INS8 INS8 INS42 INS42 INS42 INS43 INS60 INS21 INS21 INS21 INS21 INS42 INS43 INS59 INS7 INS7 INS7 INS7 INS42 INS42 INS36 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS40 INS11 INS42 INS42 INS42 INS42 INS43 INS42 INS42 DEL45 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL40 DEL33 DEL83 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL41 DEL42 DEL33 DEL27 DEL36 DEL40 DEL40 DEL16