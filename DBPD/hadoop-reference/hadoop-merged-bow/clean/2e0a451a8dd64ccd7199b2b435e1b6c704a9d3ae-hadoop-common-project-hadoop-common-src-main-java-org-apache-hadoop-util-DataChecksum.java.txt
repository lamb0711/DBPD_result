HADOOP-15033. Use java.util.zip.CRC32C for Java 9 and above
Contributed by Dmitry Chuyko,

+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.MethodType;
+
+  private static final Logger LOG = LoggerFactory.getLogger(DataChecksum.class);
+  private static volatile boolean useJava9Crc32C = Shell.isJavaVersionAtLeast(9);
+
+  /**
+   * The flag is volatile to avoid synchronization here.
+   * Re-entrancy is unlikely except in failure mode (and inexpensive).
+   */
+  static Checksum newCrc32C() {
+    try {
+      return useJava9Crc32C ? Java9Crc32CFactory.createChecksum()
+          : new PureJavaCrc32C();
+    } catch (ExceptionInInitializerError | RuntimeException e) {
+      // should not happen
+      LOG.error("CRC32C creation failed, switching to PureJavaCrc32C", e);
+      useJava9Crc32C = false;
+      return new PureJavaCrc32C();
+    }
+  }
+
-      return new DataChecksum(type, new PureJavaCrc32C(), bytesPerChecksum);
+      return new DataChecksum(type, newCrc32C(), bytesPerChecksum);
+
+  /**
+   * Holds constructor handle to let it be initialized on demand.
+   */
+  private static class Java9Crc32CFactory {
+    private static final MethodHandle NEW_CRC32C_MH;
+
+    static {
+      MethodHandle newCRC32C = null;
+      try {
+        newCRC32C = MethodHandles.publicLookup()
+            .findConstructor(
+                Class.forName("java.util.zip.CRC32C"),
+                MethodType.methodType(void.class)
+            );
+      } catch (ReflectiveOperationException e) {
+        // Should not reach here.
+        throw new RuntimeException(e);
+      }
+      NEW_CRC32C_MH = newCRC32C;
+    }
+
+    public static Checksum createChecksum() {
+      try {
+        // Should throw nothing
+        return (Checksum) NEW_CRC32C_MH.invoke();
+      } catch (Throwable t) {
+        throw (t instanceof RuntimeException) ? (RuntimeException) t
+            : new RuntimeException(t);
+      }
+    }
+  };

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS42 INS23 INS28 INS31 INS42 INS42 INS32 INS42 INS32 INS65 INS42 INS54 INS65 INS83 INS83 INS83 INS43 INS59 INS83 INS8 INS83 INS83 INS43 INS42 INS8 INS42 INS42 INS57 INS42 INS42 INS34 INS66 INS66 INS8 INS12 INS66 INS42 INS42 INS60 INS54 INS21 INS42 INS54 INS43 INS41 INS44 INS8 INS43 INS59 INS8 INS12 INS7 INS8 INS12 INS42 INS16 INS84 INS42 INS21 INS21 INS41 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS41 INS44 INS8 INS42 INS32 MOV14 INS43 INS43 INS32 INS7 INS14 INS42 INS7 INS43 INS42 INS53 INS11 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS9 INS43 INS42 INS32 INS42 INS14 INS43 INS32 INS42 INS16 INS42 INS32 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS36 INS11 INS14 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS57 INS42 INS62 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42