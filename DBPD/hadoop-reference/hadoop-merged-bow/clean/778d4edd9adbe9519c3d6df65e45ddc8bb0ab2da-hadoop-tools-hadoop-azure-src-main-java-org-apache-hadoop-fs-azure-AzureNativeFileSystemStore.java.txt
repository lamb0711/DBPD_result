HADOOP-14660 wasb: improve throughput by 34% when account limit exceeded.
Contributed by Thomas Marquardt.

+  private static final String KEY_AUTO_THROTTLE_ENABLE = "fs.azure.autothrottling.enable";
+
-  private static final int DEFAULT_MIN_BACKOFF_INTERVAL = 1 * 1000; // 1s
+  private static final int DEFAULT_MIN_BACKOFF_INTERVAL = 3 * 1000; // 1s
-  private static final int DEFAULT_BACKOFF_INTERVAL = 1 * 1000; // 1s
-  private static final int DEFAULT_MAX_RETRY_ATTEMPTS = 15;
+  private static final int DEFAULT_BACKOFF_INTERVAL = 3 * 1000; // 1s
+  private static final int DEFAULT_MAX_RETRY_ATTEMPTS = 30;
+  private static final boolean DEFAULT_AUTO_THROTTLE_ENABLE = false;
+
-  private final static JSON PERMISSION_JSON_SERIALIZER = createPermissionJsonSerializer();
+  private static final JSON PERMISSION_JSON_SERIALIZER = createPermissionJsonSerializer();
+  private boolean autoThrottlingEnabled;
+
-    if(!conf.getBoolean(
+    if (!conf.getBoolean(
-    if (sessionScheme != null &&
-        (sessionScheme.equalsIgnoreCase("asvs") ||
-         sessionScheme.equalsIgnoreCase("wasbs"))) {
+    if (sessionScheme != null
+        && (sessionScheme.equalsIgnoreCase("asvs")
+         || sessionScheme.equalsIgnoreCase("wasbs"))) {
+    if (!selfThrottlingEnabled) {
+      autoThrottlingEnabled = sessionConfiguration.getBoolean(
+          KEY_AUTO_THROTTLE_ENABLE,
+          DEFAULT_AUTO_THROTTLE_ENABLE);
+      if (autoThrottlingEnabled) {
+        ClientThrottlingIntercept.initializeSingleton();
+      }
+    } else {
+      // cannot enable both self-throttling and client-throttling
+      autoThrottlingEnabled = false;
+    }
+
-      blobEndPoint = new URI(getHTTPScheme() + "://" +
-          accountName);
+      blobEndPoint = new URI(getHTTPScheme() + "://" + accountName);
-  private void createAzureStorageSession ()
+  private void createAzureStorageSession()
-            "The directory %s specified in the configuration entry %s is not" +
-            " a valid URI.",
+            "The directory %s specified in the configuration entry %s is not"
+            + " a valid URI.",
-      if (dir.isEmpty() ||
-          key.startsWith(dir + "/")) {
+      if (dir.isEmpty() || key.startsWith(dir + "/")) {
-        URI uriPageBlobDir = new URI (dir);
+        URI uriPageBlobDir = new URI(dir);
-          (CloudPageBlobWrapper)blob, getInstrumentedContext(), sessionConfiguration);
+          (CloudPageBlobWrapper) blob, getInstrumentedContext(), sessionConfiguration);
-        null, useFlatBlobListing,
-        includeMetadata ?
-            EnumSet.of(BlobListingDetails.METADATA) :
-              EnumSet.noneOf(BlobListingDetails.class),
-              getInstrumentedContext());
+        useFlatBlobListing,
+        includeMetadata
+            ? EnumSet.of(BlobListingDetails.METADATA)
+            : EnumSet.noneOf(BlobListingDetails.class),
+        null,
+        getInstrumentedContext());
-        includeMetadata ?
-            EnumSet.of(BlobListingDetails.METADATA) :
-              EnumSet.noneOf(BlobListingDetails.class),
-              null,
-              getInstrumentedContext());
+        includeMetadata
+            ? EnumSet.of(BlobListingDetails.METADATA)
+            : EnumSet.noneOf(BlobListingDetails.class),
+        null,
+        getInstrumentedContext());
+    } else if (autoThrottlingEnabled) {
+      ClientThrottlingIntercept.hook(operationContext);
-    if(bandwidthGaugeUpdater != null) {
+    if (bandwidthGaugeUpdater != null) {
-      if (e.getErrorCode() != null &&
-          "BlobNotFound".equals(e.getErrorCode()) &&
-          operationContext.getRequestResults().size() > 1 &&
-          operationContext.getRequestResults().get(0).getException() != null) {
+      if (e.getErrorCode() != null
+          && "BlobNotFound".equals(e.getErrorCode())
+          && operationContext.getRequestResults().size() > 1
+          && operationContext.getRequestResults().get(0).getException() != null) {
-      if(t != null && t instanceof StorageException) {
+      if (t != null && t instanceof StorageException) {
-              if(lease != null){
+              if (lease != null){
-        throw new AzureException ("Source blob " + srcKey +
-            " does not exist.");
+        throw new AzureException("Source blob " + srcKey + " does not exist.");
-			DEFAULT_COPYBLOB_MIN_BACKOFF_INTERVAL);
+            DEFAULT_COPYBLOB_MIN_BACKOFF_INTERVAL);
-			DEFAULT_COPYBLOB_MAX_BACKOFF_INTERVAL);
+            DEFAULT_COPYBLOB_MAX_BACKOFF_INTERVAL);
-			DEFAULT_COPYBLOB_BACKOFF_INTERVAL);
+            DEFAULT_COPYBLOB_BACKOFF_INTERVAL);
-			DEFAULT_COPYBLOB_MAX_RETRY_ATTEMPTS);
+            DEFAULT_COPYBLOB_MAX_RETRY_ATTEMPTS);
-          if(srcBlob.getProperties().getBlobType() == BlobType.PAGE_BLOB){
+          if (srcBlob.getProperties().getBlobType() == BlobType.PAGE_BLOB){
-    if(bandwidthGaugeUpdater != null) {
+    if (bandwidthGaugeUpdater != null) {

INS23 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS42 INS42 INS45 UPD34 INS42 INS9 INS42 INS25 UPD34 UPD34 INS38 INS8 INS8 INS25 INS42 INS21 INS25 INS21 INS42 INS8 INS7 INS42 INS8 INS7 INS21 INS42 INS32 INS21 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL83