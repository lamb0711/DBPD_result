HDDS-935. Avoid creating an already created container on a datanode in case of disk removal followed by datanode restart. Contributed by Shashikant Banerjee.

+import java.util.Set;
-
+  public void buildMissingContainerSet(Set<Long> createdContainerSet) {
+    containerSet.buildMissingContainerSet(createdContainerSet);
+  }
+
+  @SuppressWarnings("methodlength")
+  @Override
-    Container container = null;
-    ContainerType containerType = null;
+    Container container;
+    ContainerType containerType;
+    container = getContainer(containerID);
+    boolean isWriteStage =
+        (cmdType == ContainerProtos.Type.WriteChunk && dispatcherContext != null
+            && dispatcherContext.getStage()
+            == DispatcherContext.WriteChunkStage.WRITE_DATA);
+    boolean isWriteCommitStage =
+        (cmdType == ContainerProtos.Type.WriteChunk && dispatcherContext != null
+            && dispatcherContext.getStage()
+            == DispatcherContext.WriteChunkStage.COMMIT_DATA);
+
+    // if the command gets executed other than Ratis, the default wroite stage
+    // is WriteChunkStage.COMBINED
+    boolean isCombinedStage =
+        cmdType == ContainerProtos.Type.WriteChunk && (dispatcherContext == null
+            || dispatcherContext.getStage()
+            == DispatcherContext.WriteChunkStage.COMBINED);
+    Set<Long> containerIdSet = null;
+    if (dispatcherContext != null) {
+      containerIdSet = dispatcherContext.getCreateContainerSet();
+    }
+    if (isWriteCommitStage) {
+      //  check if the container Id exist in the loaded snapshot file. if
+      // it does not , it infers that , this is a restart of dn where
+      // the we are reapplying the transaction which was not captured in the
+      // snapshot.
+      // just add it to the list, and remove it from missing container set
+      // as it might have been added in the list during "init".
+      Preconditions.checkNotNull(containerIdSet);
+      if (!containerIdSet.contains(containerID)) {
+        containerIdSet.add(containerID);
+        containerSet.getMissingContainerSet().remove(containerID);
+      }
+    }
+    if (getMissingContainerSet().contains(containerID)) {
+      StorageContainerException sce = new StorageContainerException(
+          "ContainerID " + containerID
+              + " has been lost and and cannot be recreated on this DataNode",
+          ContainerProtos.Result.CONTAINER_MISSING);
+      audit(action, eventType, params, AuditEventStatus.FAILURE, sce);
+      return ContainerUtils.logAndReturnError(LOG, sce, msg);
+    }
-      container = getContainer(containerID);
-
-      if (container == null && (cmdType == ContainerProtos.Type.WriteChunk
+      /**
+       * Create Container should happen only as part of Write_Data phase of
+       * writeChunk.
+       */
+      if (container == null && ((isWriteStage || isCombinedStage)
-
+        Preconditions.checkArgument(isWriteStage && containerIdSet != null
+            || dispatcherContext == null);
+        if (containerIdSet != null) {
+          // adds this container to list of containers created in the pipeline
+          containerIdSet.add(containerID);
+        }
+  @VisibleForTesting
+  public Set<Long> getMissingContainerSet() {
+    return containerSet.getMissingContainerSet();
+  }
+

INS26 INS40 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS8 INS79 MOV60 MOV60 INS78 INS83 INS74 INS42 INS8 INS42 INS74 INS42 INS21 INS42 INS45 INS60 INS60 MOV21 INS60 INS60 INS25 INS25 INS25 INS42 INS43 INS43 INS41 INS43 INS43 INS32 MOV43 INS59 MOV43 INS59 INS39 INS59 INS39 INS39 INS59 INS74 INS27 INS8 INS42 INS8 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS36 INS42 INS27 INS43 INS43 UPD42 INS42 INS33 INS21 INS21 INS25 INS32 INS42 INS42 INS60 INS21 INS41 INS42 INS42 INS27 INS27 INS27 INS36 INS42 INS42 INS7 INS32 INS38 INS8 INS42 INS43 INS59 INS32 INS32 UPD27 MOV27 INS27 INS27 INS27 INS42 INS40 INS27 INS42 INS32 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS21 INS25 INS27 INS32 INS40 INS27 INS27 INS32 INS40 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS27 INS40 INS27 INS32 INS27 INS8 INS42 INS33 INS42 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS42 INS33 INS32 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS45 MOV36 MOV27 INS42 INS42 INS27 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS27 INS27 INS27 INS32 INS42 INS42 INS42 INS27 INS42 INS33 INS42 INS42 INS42 INS42 INS33 DEL42 DEL33