HDFS-9711. Integrate CSRF prevention filter in WebHDFS. Contributed by Chris Nauroth.

+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.conf.Configuration;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@InterfaceAudience.Public
+@InterfaceStability.Evolving
+
+  private static final Logger LOG =
+      LoggerFactory.getLogger(RestCsrfPreventionFilter.class);
+
+    LOG.info("Adding cross-site request forgery (CSRF) protection, "
+        + "headerName = {}, methodsToIgnore = {}, browserUserAgents = {}",
+        headerName, methodsToIgnore, browserUserAgents);
-  @Override
-  public void doFilter(ServletRequest request, ServletResponse response,
-      FilterChain chain) throws IOException, ServletException {
-    HttpServletRequest httpRequest = (HttpServletRequest)request;
-    if (!isBrowser(httpRequest.getHeader(HEADER_USER_AGENT)) ||
-        methodsToIgnore.contains(httpRequest.getMethod()) ||
-        httpRequest.getHeader(headerName) != null) {
-      chain.doFilter(request, response);
+  /**
+   * Defines the minimal API requirements for the filter to execute its
+   * filtering logic.  This interface exists to facilitate integration in
+   * components that do not run within a servlet container and therefore cannot
+   * rely on a servlet container to dispatch to the {@link #doFilter} method.
+   * Applications that do run inside a servlet container will not need to write
+   * code that uses this interface.  Instead, they can use typical servlet
+   * container configuration mechanisms to insert the filter.
+   */
+  public interface HttpInteraction {
+
+    /**
+     * Returns the value of a header.
+     *
+     * @param header name of header
+     * @return value of header
+     */
+    String getHeader(String header);
+
+    /**
+     * Returns the method.
+     *
+     * @return method
+     */
+    String getMethod();
+
+    /**
+     * Called by the filter after it decides that the request may proceed.
+     *
+     * @throws IOException if there is an I/O error
+     * @throws ServletException if the implementation relies on the servlet API
+     *     and a servlet API call has failed
+     */
+    void proceed() throws IOException, ServletException;
+
+    /**
+     * Called by the filter after it decides that the request is a potential
+     * CSRF attack and therefore must be rejected.
+     *
+     * @param code status code to send
+     * @param message response message
+     * @throws IOException if there is an I/O error
+     */
+    void sendError(int code, String message) throws IOException;
+  }
+
+  /**
+   * Handles an {@link HttpInteraction} by applying the filtering logic.
+   *
+   * @param httpInteraction caller's HTTP interaction
+   * @throws IOException if there is an I/O error
+   * @throws ServletException if the implementation relies on the servlet API
+   *     and a servlet API call has failed
+   */
+  public void handleHttpInteraction(HttpInteraction httpInteraction)
+      throws IOException, ServletException {
+    if (!isBrowser(httpInteraction.getHeader(HEADER_USER_AGENT)) ||
+        methodsToIgnore.contains(httpInteraction.getMethod()) ||
+        httpInteraction.getHeader(headerName) != null) {
+      httpInteraction.proceed();
-      ((HttpServletResponse)response).sendError(
-          HttpServletResponse.SC_BAD_REQUEST,
+      httpInteraction.sendError(HttpServletResponse.SC_BAD_REQUEST,
+  public void doFilter(ServletRequest request, ServletResponse response,
+      final FilterChain chain) throws IOException, ServletException {
+    final HttpServletRequest httpRequest = (HttpServletRequest)request;
+    final HttpServletResponse httpResponse = (HttpServletResponse)response;
+    handleHttpInteraction(new ServletFilterHttpInteraction(httpRequest,
+        httpResponse, chain));
+  }
+
+  @Override
+
+  /**
+   * Constructs a mapping of configuration properties to be used for filter
+   * initialization.  The mapping includes all properties that start with the
+   * specified configuration prefix.  Property names in the mapping are trimmed
+   * to remove the configuration prefix.
+   *
+   * @param conf configuration to read
+   * @param confPrefix configuration prefix
+   * @return mapping of configuration properties to be used for filter
+   *     initialization
+   */
+  public static Map<String, String> getFilterParams(Configuration conf,
+      String confPrefix) {
+    Map<String, String> filterConfigMap = new HashMap<>();
+    for (Map.Entry<String, String> entry : conf) {
+      String name = entry.getKey();
+      if (name.startsWith(confPrefix)) {
+        String value = conf.get(name);
+        name = name.substring(confPrefix.length());
+        filterConfigMap.put(name, value);
+      }
+    }
+    return filterConfigMap;
+  }
+
+  /**
+   * {@link HttpInteraction} implementation for use in the servlet filter.
+   */
+  private static final class ServletFilterHttpInteraction
+      implements HttpInteraction {
+
+    private final FilterChain chain;
+    private final HttpServletRequest httpRequest;
+    private final HttpServletResponse httpResponse;
+
+    /**
+     * Creates a new ServletFilterHttpInteraction.
+     *
+     * @param httpRequest request to process
+     * @param httpResponse response to process
+     * @param chain filter chain to forward to if HTTP interaction is allowed
+     */
+    public ServletFilterHttpInteraction(HttpServletRequest httpRequest,
+        HttpServletResponse httpResponse, FilterChain chain) {
+      this.httpRequest = httpRequest;
+      this.httpResponse = httpResponse;
+      this.chain = chain;
+    }
+
+    @Override
+    public String getHeader(String header) {
+      return httpRequest.getHeader(header);
+    }
+
+    @Override
+    public String getMethod() {
+      return httpRequest.getMethod();
+    }
+
+    @Override
+    public void proceed() throws IOException, ServletException {
+      chain.doFilter(httpRequest, httpResponse);
+    }
+
+    @Override
+    public void sendError(int code, String message) throws IOException {
+      httpResponse.sendError(code, message);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS78 INS78 INS23 INS55 INS31 INS31 INS55 INS40 INS40 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS31 INS31 INS31 INS31 INS29 INS42 INS44 INS43 INS43 MOV78 INS83 INS39 INS42 MOV44 MOV44 INS44 MOV43 MOV43 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS32 INS21 INS65 INS29 INS43 INS42 INS44 INS29 INS43 INS42 INS29 INS39 INS42 INS43 INS43 INS29 INS39 INS42 INS44 INS44 INS43 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS42 INS83 INS43 INS42 MOV60 INS60 INS21 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS70 INS41 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 MOV44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS57 INS32 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS65 INS65 INS42 INS43 INS42 INS65 INS65 INS42 INS65 INS65 INS65 INS42 INS42 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS83 INS83 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS65 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS42 INS21 INS42 INS39 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS67 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 MOV11 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS60 INS25 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS7 INS7 INS42 INS32 MOV32 INS32 INS42 INS32 INS42 INS45 INS45 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS43 INS59 INS32 INS8 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS21 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS42 INS42 INS42 INS43 INS59 INS7 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL42 DEL36