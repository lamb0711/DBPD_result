HADOOP-17058. ABFS: Support for AppendBlob in Hadoop ABFS Driver

- Contributed by Ishani Ahuja 
+  private boolean isAppendBlob;
+    this.isAppendBlob = abfsOutputStreamContext.isAppendBlob();
-    this.maxConcurrentRequestCount = 4 * Runtime.getRuntime().availableProcessors();
-
+    if (this.isAppendBlob) {
+      this.maxConcurrentRequestCount = 1;
+    } else {
+      this.maxConcurrentRequestCount = 4 * Runtime.getRuntime().availableProcessors();
+    }
+  private void writeAppendBlobCurrentBufferToService() throws IOException {
+    if (bufferIndex == 0) {
+      return;
+    }
+    outputStreamStatistics.writeCurrentBuffer();
+
+    final byte[] bytes = buffer;
+    final int bytesLength = bufferIndex;
+    outputStreamStatistics.bytesToUpload(bytesLength);
+    buffer = byteBufferPool.getBuffer(false, bufferSize).array();
+    bufferIndex = 0;
+    final long offset = position;
+    position += bytesLength;
+    AbfsPerfTracker tracker = client.getAbfsPerfTracker();
+    try (AbfsPerfInfo perfInfo = new AbfsPerfInfo(tracker,
+            "writeCurrentBufferToService", "append")) {
+      AbfsRestOperation op = client.append(path, offset, bytes, 0,
+          bytesLength, cachedSasToken.get(), this.isAppendBlob);
+      cachedSasToken.update(op.getSasToken());
+      outputStreamStatistics.uploadSuccessful(bytesLength);
+      perfInfo.registerResult(op.getResult());
+      byteBufferPool.putBuffer(ByteBuffer.wrap(bytes));
+      perfInfo.registerSuccess(true);
+      return;
+    } catch (Exception ex) {
+      if (ex instanceof AbfsRestOperationException) {
+        if (((AbfsRestOperationException) ex).getStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {
+          throw new FileNotFoundException(ex.getMessage());
+        }
+      }
+      if (ex instanceof AzureBlobFileSystemException) {
+        ex = (AzureBlobFileSystemException) ex;
+      }
+      lastError = new IOException(ex);
+      throw lastError;
+    }
+  }
+
+    if (this.isAppendBlob) {
+      writeAppendBlobCurrentBufferToService();
+      return;
+    }
+
-                  bytesLength, cachedSasToken.get());
+                  bytesLength, cachedSasToken.get(), false);
+    // flush is called for appendblob only on close
+    if (this.isAppendBlob && !isClose) {
+      return;
+    }
+
+    // for AppendBLob, jobs are not submitted to completion service
+    if (isAppendBlob) {
+      completed = true;
+    }

INS23 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS43 INS8 INS42 INS21 INS25 INS42 INS25 INS21 INS60 INS60 INS21 INS21 INS21 INS60 INS21 INS60 INS54 INS25 INS25 INS25 INS7 INS22 INS8 INS8 INS27 INS8 INS32 INS83 INS5 INS59 INS83 INS39 INS59 INS32 INS7 INS7 INS83 INS39 INS59 INS7 INS43 INS59 INS58 INS8 INS12 INS22 INS8 INS27 INS8 INS42 INS8 INS22 INS32 INS52 INS42 INS21 MOV21 INS42 INS34 INS41 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS44 INS8 INS52 INS42 INS21 INS41 INS22 INS38 INS41 INS21 INS52 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS14 MOV43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS25 INS25 INS21 INS53 INS32 INS52 INS42 INS42 INS7 INS22 INS34 INS42 INS42 INS9 INS42 INS43 INS42 INS45 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS62 INS8 INS62 INS8 INS7 INS42 INS42 INS42 INS9 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 MOV32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS25 INS42 INS43 INS21 INS42 INS14 INS52 INS42 INS42 INS27 INS8 INS42 INS7 INS43 INS42 INS32 INS40 INS53 INS42 INS11 INS42 INS36 INS42 INS14 INS43 INS42 INS11 INS43 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS9 INS42 INS42