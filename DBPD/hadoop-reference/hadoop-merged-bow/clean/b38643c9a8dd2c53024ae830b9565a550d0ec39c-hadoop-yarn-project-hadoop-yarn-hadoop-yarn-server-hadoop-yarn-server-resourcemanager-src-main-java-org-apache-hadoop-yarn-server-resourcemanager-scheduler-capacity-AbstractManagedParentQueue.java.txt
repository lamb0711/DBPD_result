YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)

Change-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b

+import org.apache.hadoop.conf.Configuration;
+
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common
+    .QueueEntitlement;
+import java.util.Comparator;
+import java.util.Map;
+import java.util.SortedMap;
+import java.util.TreeMap;
-  protected AutoCreatedLeafQueueTemplate leafQueueTemplate;
+  protected AutoCreatedLeafQueueConfig leafQueueTemplate;
+  protected AutoCreatedQueueManagementPolicy queueManagementPolicy = null;
-
-    super.setupQueueConfigs(csContext.getClusterResource());
-      // run reinitialize on each existing queue, to trigger absolute cap
-      // recomputations
-      for (CSQueue res : this.getChildQueues()) {
-        res.reinitialize(res, clusterResource);
-      }
-   * Initialize leaf queue configs from template configurations specified on
-   * parent queue.
-   */
-  protected AutoCreatedLeafQueueTemplate.Builder initializeLeafQueueConfigs
-    (String queuePath) {
-
-    CapacitySchedulerConfiguration conf = csContext.getConfiguration();
-
-    AutoCreatedLeafQueueTemplate.Builder leafQueueTemplateBuilder = new
-        AutoCreatedLeafQueueTemplate.Builder();
-    int maxApps = conf.getMaximumApplicationsPerQueue(queuePath);
-    if (maxApps < 0) {
-      maxApps = (int) (
-          CapacitySchedulerConfiguration.DEFAULT_MAXIMUM_SYSTEM_APPLICATIIONS
-              * getAbsoluteCapacity());
-    }
-
-    int userLimit = conf.getUserLimit(queuePath);
-    float userLimitFactor = conf.getUserLimitFactor(queuePath);
-    leafQueueTemplateBuilder.userLimit(userLimit)
-          .userLimitFactor(userLimitFactor)
-          .maxApps(maxApps)
-          .maxAppsPerUser(
-              (int) (maxApps * (userLimit / 100.0f) * userLimitFactor));
-
-    return leafQueueTemplateBuilder;
-  }
-
-  /**
-      throws SchedulerDynamicEditException {
+      throws SchedulerDynamicEditException, IOException {
-  public static class AutoCreatedLeafQueueTemplate {
-
-    private QueueCapacities queueCapacities;
-
-    private int maxApps;
-    private int maxAppsPerUser;
-    private int userLimit;
-    private float userLimitFactor;
-
-    AutoCreatedLeafQueueTemplate(Builder builder) {
-      this.maxApps = builder.maxApps;
-      this.maxAppsPerUser = builder.maxAppsPerUser;
-      this.userLimit = builder.userLimit;
-      this.userLimitFactor = builder.userLimitFactor;
-      this.queueCapacities = builder.queueCapacities;
-    }
-
-    public static class Builder {
-      private int maxApps;
-      private int maxAppsPerUser;
-
-      private int userLimit;
-      private float userLimitFactor;
-
-      private QueueCapacities queueCapacities;
-
-      Builder maxApps(int maxApplications) {
-        this.maxApps =  maxApplications;
-        return this;
-      }
-
-      Builder maxAppsPerUser(int maxApplicationsPerUser) {
-        this.maxAppsPerUser = maxApplicationsPerUser;
-        return this;
-      }
-
-      Builder userLimit(int usrLimit) {
-        this.userLimit = usrLimit;
-        return this;
-      }
-
-      Builder userLimitFactor(float ulf) {
-        this.userLimitFactor = ulf;
-        return this;
-      }
-
-      Builder capacities(QueueCapacities capacities) {
-        this.queueCapacities = capacities;
-        return this;
-      }
-
-      AutoCreatedLeafQueueTemplate build() {
-        return new AutoCreatedLeafQueueTemplate(this);
-      }
-    }
-
-    public int getUserLimit() {
-      return userLimit;
-    }
-
-    public float getUserLimitFactor() {
-      return userLimitFactor;
-    }
-
-    public QueueCapacities getQueueCapacities() {
-      return queueCapacities;
-    }
-
-    public int getMaxApps() {
-      return maxApps;
-    }
-
-    public int getMaxAppsPerUser() {
-      return maxAppsPerUser;
-    }
+  public AutoCreatedLeafQueueConfig getLeafQueueTemplate() {
+    return leafQueueTemplate;
-  public AutoCreatedLeafQueueTemplate getLeafQueueTemplate() {
-    return leafQueueTemplate;
+  public AutoCreatedQueueManagementPolicy
+  getAutoCreatedQueueManagementPolicy() {
+    return queueManagementPolicy;
+  }
+
+  protected SortedMap<String, String> getConfigurationsWithPrefix
+      (SortedMap<String, String> sortedConfigs, String prefix) {
+    return sortedConfigs.subMap( prefix, prefix + Character.MAX_VALUE );
+  }
+
+  protected SortedMap<String, String> sortCSConfigurations() {
+    SortedMap<String, String> sortedConfigs = new TreeMap(
+        new Comparator<String>() {
+          public int compare(String s1, String s2) {
+            return s1.compareToIgnoreCase(s2);
+          }
+
+        });
+
+    for (final Iterator<Map.Entry<String, String>> iterator =
+         csContext.getConfiguration().iterator(); iterator.hasNext(); ) {
+      final Map.Entry<String, String> confKeyValuePair = iterator.next();
+      sortedConfigs.put(confKeyValuePair.getKey(), confKeyValuePair.getValue());
+    }
+    return sortedConfigs;
+  }
+
+  protected CapacitySchedulerConfiguration initializeLeafQueueConfigs(String
+      configPrefix) {
+
+    CapacitySchedulerConfiguration leafQueueConfigs = new
+        CapacitySchedulerConfiguration(new Configuration(false), false);
+
+    SortedMap<String, String> sortedConfigs = sortCSConfigurations();
+    SortedMap<String, String> templateConfigs = getConfigurationsWithPrefix
+        (sortedConfigs, configPrefix);
+
+    for (final Iterator<Map.Entry<String, String>> iterator =
+         templateConfigs.entrySet().iterator(); iterator.hasNext(); ) {
+      Map.Entry<String, String> confKeyValuePair = iterator.next();
+      leafQueueConfigs.set(confKeyValuePair.getKey(),
+          confKeyValuePair.getValue());
+    }
+
+    return leafQueueConfigs;
+  }
+
+  protected void validateQueueEntitlementChange(AbstractAutoCreatedLeafQueue
+      leafQueue, QueueEntitlement entitlement)
+      throws SchedulerDynamicEditException {
+
+    float sumChilds = sumOfChildCapacities();
+    float newChildCap =
+        sumChilds - leafQueue.getCapacity() + entitlement.getCapacity();
+
+    if (!(newChildCap >= 0 && newChildCap < 1.0f + CSQueueUtils.EPSILON)) {
+      throw new SchedulerDynamicEditException(
+          "Sum of child queues should exceed 100% for auto creating parent "
+              + "queue : " + queueName);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 UPD43 INS83 INS43 INS59 INS43 INS83 INS43 INS42 MOV8 INS83 INS43 INS42 INS8 INS83 INS74 INS42 INS44 MOV44 INS8 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 INS42 INS42 INS33 INS42 INS42 INS42 INS41 INS43 INS43 INS43 INS74 INS42 UPD42 INS41 INS43 INS43 INS43 INS60 INS24 INS41 INS42 INS43 INS42 INS60 INS60 INS60 INS24 MOV41 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS74 INS59 INS58 INS32 INS8 INS42 INS42 MOV43 INS59 INS74 INS59 INS74 INS59 INS58 INS32 INS8 INS42 UPD42 MOV42 UPD42 MOV42 INS39 INS59 INS39 INS59 INS38 INS8 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS43 INS43 INS43 INS42 INS14 INS83 INS74 MOV59 INS42 INS42 INS60 INS21 UPD42 MOV42 INS14 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS83 INS74 INS59 INS42 INS42 INS60 MOV21 INS42 INS32 INS42 INS27 INS36 INS53 INS42 INS40 INS42 INS42 INS42 INS43 INS14 INS43 INS74 UPD42 INS32 INS83 INS74 INS59 INS32 INS43 INS14 INS9 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS74 INS42 INS32 INS74 INS59 INS32 INS42 INS27 INS32 INS27 INS14 INS42 INS74 INS1 INS42 INS43 INS43 INS43 MOV32 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS43 INS9 UPD42 MOV42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS27 INS27 INS43 INS27 INS43 INS43 INS31 INS40 UPD42 MOV42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS27 UPD42 MOV42 INS45 INS45 INS42 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS34 INS40 INS43 INS42 INS43 INS42 MOV41 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL48 DEL21 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL66 DEL66 DEL65 DEL29 DEL83 DEL40 DEL43 DEL42 DEL60 DEL40 DEL43 DEL42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL39 DEL40 DEL42 DEL32 DEL27 DEL36 DEL11 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL42 DEL27 DEL36 DEL11 DEL32 DEL21 DEL8 DEL31 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL83 DEL83 DEL42 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL8 DEL31 DEL83 DEL83 DEL42 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL59 DEL23 DEL83 DEL43 DEL42 DEL59 DEL23 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL43 DEL42 DEL43 DEL52 DEL14 DEL41 DEL8 DEL31 DEL55 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL55 DEL83 DEL43 DEL42 DEL31