HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.

+import org.apache.hadoop.ipc.RemoteException;
+import org.apache.hadoop.tools.DistCpOptionSwitch;
+import java.io.FileNotFoundException;
+import java.util.LinkedList;
-  
+  private boolean ignoreFailures = false;
+
-    targetPathExists = conf.getBoolean(DistCpConstants.CONF_LABEL_TARGET_PATH_EXISTS, true);
-    
+    targetPathExists = conf.getBoolean(
+        DistCpConstants.CONF_LABEL_TARGET_PATH_EXISTS, true);
+    ignoreFailures = conf.getBoolean(
+        DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);
+
+    concatFileChunks(conf);
+
+  private boolean isFileNotFoundException(IOException e) {
+    if (e instanceof FileNotFoundException) {
+      return true;
+    }
+
+    if (e instanceof RemoteException) {
+      return ((RemoteException)e).unwrapRemoteException()
+          instanceof FileNotFoundException;
+    }
+
+    return false;
+  }
+
+  /**
+   * Concat chunk files for the same file into one.
+   * Iterate through copy listing, identify chunk files for the same file,
+   * concat them into one.
+   */
+  private void concatFileChunks(Configuration conf) throws IOException {
+
+    LOG.info("concat file chunks ...");
+
+    String spath = conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH);
+    if (spath == null || spath.isEmpty()) {
+      return;
+    }
+    Path sourceListing = new Path(spath);
+    SequenceFile.Reader sourceReader = new SequenceFile.Reader(conf,
+                                      SequenceFile.Reader.file(sourceListing));
+    Path targetRoot =
+        new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));
+
+    try {
+      CopyListingFileStatus srcFileStatus = new CopyListingFileStatus();
+      Text srcRelPath = new Text();
+      CopyListingFileStatus lastFileStatus = null;
+      LinkedList<Path> allChunkPaths = new LinkedList<Path>();
+
+      // Iterate over every source path that was copied.
+      while (sourceReader.next(srcRelPath, srcFileStatus)) {
+        if (srcFileStatus.isDirectory()) {
+          continue;
+        }
+        Path targetFile = new Path(targetRoot.toString() + "/" + srcRelPath);
+        Path targetFileChunkPath =
+            DistCpUtils.getSplitChunkPath(targetFile, srcFileStatus);
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("  add " + targetFileChunkPath + " to concat.");
+        }
+        allChunkPaths.add(targetFileChunkPath);
+        if (srcFileStatus.getChunkOffset() + srcFileStatus.getChunkLength()
+            == srcFileStatus.getLen()) {
+          // This is the last chunk of the splits, consolidate allChunkPaths
+          try {
+            concatFileChunks(conf, targetFile, allChunkPaths);
+          } catch (IOException e) {
+            // If the concat failed because a chunk file doesn't exist,
+            // then we assume that the CopyMapper has skipped copying this
+            // file, and we ignore the exception here.
+            // If a chunk file should have been created but it was not, then
+            // the CopyMapper would have failed.
+            if (!isFileNotFoundException(e)) {
+              String emsg = "Failed to concat chunk files for " + targetFile;
+              if (!ignoreFailures) {
+                throw new IOException(emsg, e);
+              } else {
+                LOG.warn(emsg, e);
+              }
+            }
+          }
+          allChunkPaths.clear();
+          lastFileStatus = null;
+        } else {
+          if (lastFileStatus == null) {
+            lastFileStatus = new CopyListingFileStatus(srcFileStatus);
+          } else {
+            // Two neighboring chunks have to be consecutive ones for the same
+            // file, for them to be merged
+            if (!srcFileStatus.getPath().equals(lastFileStatus.getPath()) ||
+                srcFileStatus.getChunkOffset() !=
+                (lastFileStatus.getChunkOffset() +
+                lastFileStatus.getChunkLength())) {
+              String emsg = "Inconsistent sequence file: current " +
+                  "chunk file " + srcFileStatus + " doesnt match prior " +
+                  "entry " + lastFileStatus;
+              if (!ignoreFailures) {
+                throw new IOException(emsg);
+              } else {
+                LOG.warn(emsg + ", skipping concat this set.");
+              }
+            } else {
+              lastFileStatus.setChunkOffset(srcFileStatus.getChunkOffset());
+              lastFileStatus.setChunkLength(srcFileStatus.getChunkLength());
+            }
+          }
+        }
+      }
+    } finally {
+      IOUtils.closeStream(sourceReader);
+    }
+  }
+
-  private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {
+  private void preserveFileAttributesForDirectories(Configuration conf)
+      throws IOException {
+
+  /**
+   * Concat the passed chunk files into one and rename it the targetFile.
+   */
+  private void concatFileChunks(Configuration conf, Path targetFile,
+      LinkedList<Path> allChunkPaths) throws IOException {
+    if (allChunkPaths.size() == 1) {
+      return;
+    }
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("concat " + targetFile + " allChunkSize+ "
+          + allChunkPaths.size());
+    }
+    FileSystem dstfs = targetFile.getFileSystem(conf);
+
+    Path firstChunkFile = allChunkPaths.removeFirst();
+    Path[] restChunkFiles = new Path[allChunkPaths.size()];
+    allChunkPaths.toArray(restChunkFiles);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("concat: firstchunk: " + dstfs.getFileStatus(firstChunkFile));
+      int i = 0;
+      for (Path f : restChunkFiles) {
+        LOG.debug("concat: other chunk: " + i + ": " + dstfs.getFileStatus(f));
+        ++i;
+      }
+    }
+    dstfs.concat(firstChunkFile, restChunkFiles);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("concat: result: " + dstfs.getFileStatus(firstChunkFile));
+    }
+    rename(dstfs, firstChunkFile, targetFile);
+  }
+
+  /**
+   * Rename tmp to dst on destFileSys.
+   * @param destFileSys the file ssystem
+   * @param tmp the source path
+   * @param dst the destination path
+   * @throws IOException if renaming failed
+   */
+  private static void rename(FileSystem destFileSys, Path tmp, Path dst)
+      throws IOException {
+    try {
+      if (destFileSys.exists(dst)) {
+        destFileSys.delete(dst, true);
+      }
+      destFileSys.rename(tmp, dst);
+    } catch (IOException ioe) {
+      throw new IOException("Fail to rename tmp file (=" + tmp
+          + ") to destination file (=" + dst + ")", ioe);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS9 INS21 INS21 INS43 INS42 INS25 INS25 INS41 INS65 INS43 INS42 INS42 INS21 INS60 INS25 INS60 INS60 INS60 INS54 INS65 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS25 INS25 INS60 INS60 INS60 INS21 INS25 INS21 INS25 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS54 INS7 INS32 INS42 INS62 INS8 INS62 INS8 INS9 INS66 INS66 INS66 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS66 INS42 INS42 INS43 INS43 INS27 INS8 INS32 INS8 INS43 INS59 INS43 INS59 INS5 INS59 INS32 INS32 INS8 INS32 INS32 INS8 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS8 INS12 INS42 INS32 INS42 INS42 INS42 INS43 INS41 INS42 INS43 INS41 INS42 INS42 INS45 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS42 INS14 INS40 INS42 INS14 INS42 INS42 INS14 INS60 INS60 INS60 INS60 INS61 INS21 INS42 INS42 INS32 INS34 INS41 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS25 INS21 INS44 INS8 INS42 INS42 INS32 INS9 INS42 INS9 INS42 INS62 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS43 INS42 INS43 INS42 INS32 INS43 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS32 INS39 INS59 INS44 INS42 INS8 INS32 INS32 INS8 INS32 INS43 INS42 INS53 INS40 INS42 INS32 INS43 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS33 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS25 INS60 INS60 INS25 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS85 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS43 INS42 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS14 INS36 INS42 INS42 INS43 INS43 INS42 INS42 INS74 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS27 INS8 INS8 INS45 INS42 INS45 INS32 INS42 INS45 INS32 INS42 INS32 INS38 INS45 INS32 INS32 INS43 INS27 INS42 INS11 INS42 INS42 INS43 INS43 INS42 INS42 INS18 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS27 INS32 INS54 INS21 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS45 INS42 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS8 INS12 INS32 INS7 INS27 INS8 INS8 INS45 INS42 INS45 INS32 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS33 INS42 INS33 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS43 INS42 INS25 INS7 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS14 INS38 INS27 INS60 INS25 INS21 INS21 INS32 INS60 INS25 INS43 INS42 INS32 INS32 INS36 INS43 INS59 INS38 INS8 INS8 INS32 INS32 INS42 INS42 INS43 INS59 INS38 INS8 INS8 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS53 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS53 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS42 INS45 INS45 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42