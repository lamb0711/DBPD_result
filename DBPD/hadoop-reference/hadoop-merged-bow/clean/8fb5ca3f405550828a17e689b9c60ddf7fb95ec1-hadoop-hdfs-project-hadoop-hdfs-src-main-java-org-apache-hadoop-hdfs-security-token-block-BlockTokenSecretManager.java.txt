HDFS-14611. Move handshake secret field from Token to BlockAccessToken. Contributed by Chen Liang.

+import com.google.common.base.Charsets;
+import org.apache.hadoop.ipc.Server;
+  private final boolean shouldWrapQOP;
+
-        encryptionAlgorithm, 0, 1, useProto);
+        encryptionAlgorithm, 0, 1, useProto, false);
+  }
+
+  public BlockTokenSecretManager(long keyUpdateInterval,
+      long tokenLifetime, int nnIndex, int numNNs, String blockPoolId,
+      String encryptionAlgorithm, boolean useProto) {
+    this(keyUpdateInterval, tokenLifetime, nnIndex, numNNs,
+        blockPoolId, encryptionAlgorithm, useProto, false);
+  }
+
+  public BlockTokenSecretManager(long keyUpdateInterval,
+      long tokenLifetime, int nnIndex, int numNNs,  String blockPoolId,
+      String encryptionAlgorithm, boolean useProto, boolean shouldWrapQOP) {
+    this(true, keyUpdateInterval, tokenLifetime, blockPoolId,
+        encryptionAlgorithm, nnIndex, numNNs, useProto, shouldWrapQOP);
+    Preconditions.checkArgument(nnIndex >= 0);
+    Preconditions.checkArgument(numNNs > 0);
+    setSerialNo(new SecureRandom().nextInt());
+    generateKeys();
+   * @param shouldWrapQOP should wrap QOP in the block access token
-  public BlockTokenSecretManager(long keyUpdateInterval,
-      long tokenLifetime, int nnIndex, int numNNs,  String blockPoolId,
-      String encryptionAlgorithm, boolean useProto) {
-    this(true, keyUpdateInterval, tokenLifetime, blockPoolId,
-        encryptionAlgorithm, nnIndex, numNNs, useProto);
-    Preconditions.checkArgument(nnIndex >= 0);
-    Preconditions.checkArgument(numNNs > 0);
-    setSerialNo(new SecureRandom().nextInt());
-    generateKeys();
-  }
-
-      int nnIndex, int numNNs, boolean useProto) {
+      int nnIndex, int numNNs, boolean useProto, boolean shouldWrapQOP) {
+    this.shouldWrapQOP = shouldWrapQOP;
-      StorageType[] storageTypes, String[] storageIds) throws IOException {
+      StorageType[] storageTypes, String[] storageIds) {
+    if (shouldWrapQOP) {
+      String qop = Server.getEstablishedQOP();
+      if (qop != null) {
+        id.setHandshakeMsg(qop.getBytes(Charsets.UTF_8));
+      }
+    }
-  /**
-   * Encrypt the given message with the current block key, using the current
-   * block key.
-   *
-   * @param message the message to be encrypted.
-   * @return the secret created by encrypting the given message.
-   */
-  public byte[] secretGen(byte[] message) {
-    return createPassword(message, currentKey.getKey());
-  }
-
-  @VisibleForTesting

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS83 INS39 INS59 MOV83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 MOV44 MOV8 INS44 MOV29 INS44 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 UPD42 INS17 INS39 INS42 INS65 INS39 INS42 INS21 INS25 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS66 INS7 INS42 INS8 INS22 INS42 INS60 INS25 INS52 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL42 DEL43 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL85 DEL5 DEL42 DEL31 DEL42 DEL78