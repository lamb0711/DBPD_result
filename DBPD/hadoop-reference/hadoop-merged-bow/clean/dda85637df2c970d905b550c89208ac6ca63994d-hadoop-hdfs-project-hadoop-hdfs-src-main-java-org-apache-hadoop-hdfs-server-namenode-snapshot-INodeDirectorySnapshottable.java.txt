Merge trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608603 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Comparator;
-import java.util.HashMap;
+import java.util.LinkedList;
-import java.util.Map;
-import java.util.SortedMap;
-import java.util.TreeMap;
-import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
-import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport.DiffReportEntry;
-import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport.DiffType;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference.WithCount;
+import org.apache.hadoop.hdfs.server.namenode.INodeReference.WithName;
-import com.google.common.primitives.SignedBytes;
+import com.google.common.collect.Lists;
-  
-  /**
-   * A class describing the difference between snapshots of a snapshottable
-   * directory.
-   */
-  public static class SnapshotDiffInfo {
-    /** Compare two inodes based on their full names */
-    public static final Comparator<INode> INODE_COMPARATOR = 
-        new Comparator<INode>() {
-      @Override
-      public int compare(INode left, INode right) {
-        if (left == null) {
-          return right == null ? 0 : -1;
-        } else {
-          if (right == null) {
-            return 1;
-          } else {
-            int cmp = compare(left.getParent(), right.getParent());
-            return cmp == 0 ? SignedBytes.lexicographicalComparator().compare(
-                left.getLocalNameBytes(), right.getLocalNameBytes()) : cmp;
-          }
-        }
-      }
-    };
-    
-    /** The root directory of the snapshots */
-    private final INodeDirectorySnapshottable snapshotRoot;
-    /** The starting point of the difference */
-    private final Snapshot from;
-    /** The end point of the difference */
-    private final Snapshot to;
-    /**
-     * A map recording modified INodeFile and INodeDirectory and their relative
-     * path corresponding to the snapshot root. Sorted based on their names.
-     */ 
-    private final SortedMap<INode, byte[][]> diffMap = 
-        new TreeMap<INode, byte[][]>(INODE_COMPARATOR);
-    /**
-     * A map capturing the detailed difference about file creation/deletion.
-     * Each key indicates a directory whose children have been changed between
-     * the two snapshots, while its associated value is a {@link ChildrenDiff}
-     * storing the changes (creation/deletion) happened to the children (files).
-     */
-    private final Map<INodeDirectory, ChildrenDiff> dirDiffMap = 
-        new HashMap<INodeDirectory, ChildrenDiff>();
-    
-    SnapshotDiffInfo(INodeDirectorySnapshottable snapshotRoot, Snapshot start,
-        Snapshot end) {
-      this.snapshotRoot = snapshotRoot;
-      this.from = start;
-      this.to = end;
-    }
-    
-    /** Add a dir-diff pair */
-    private void addDirDiff(INodeDirectory dir, byte[][] relativePath,
-        ChildrenDiff diff) {
-      dirDiffMap.put(dir, diff);
-      diffMap.put(dir, relativePath);
-    }
-    
-    /** Add a modified file */ 
-    private void addFileDiff(INodeFile file, byte[][] relativePath) {
-      diffMap.put(file, relativePath);
-    }
-    
-    /** @return True if {@link #from} is earlier than {@link #to} */
-    private boolean isFromEarlier() {
-      return Snapshot.ID_COMPARATOR.compare(from, to) < 0;
-    }
-    
-    /**
-     * Generate a {@link SnapshotDiffReport} based on detailed diff information.
-     * @return A {@link SnapshotDiffReport} describing the difference
-     */
-    public SnapshotDiffReport generateReport() {
-      List<DiffReportEntry> diffReportList = new ArrayList<DiffReportEntry>();
-      for (INode node : diffMap.keySet()) {
-        diffReportList.add(new DiffReportEntry(DiffType.MODIFY, diffMap
-            .get(node)));
-        if (node.isDirectory()) {
-          ChildrenDiff dirDiff = dirDiffMap.get(node);
-          List<DiffReportEntry> subList = dirDiff.generateReport(
-              diffMap.get(node), isFromEarlier());
-          diffReportList.addAll(subList);
-        }
-      }
-      return new SnapshotDiffReport(snapshotRoot.getFullPathName(),
-          Snapshot.getSnapshotName(from), Snapshot.getSnapshotName(to),
-          diffReportList);
-    }
-  }
-    ChildrenDiff diff = new ChildrenDiff();
+    final Snapshot earlierSnapshot = diffReport.isFromEarlier() ?
+        diffReport.getFrom() : diffReport.getTo();
+    final Snapshot laterSnapshot = diffReport.isFromEarlier() ?
+        diffReport.getTo() : diffReport.getFrom();
+      final ChildrenDiff diff = new ChildrenDiff();
-        boolean change = sf.computeDiffBetweenSnapshots(diffReport.from,
-            diffReport.to, diff, dir);
+        boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot,
+            laterSnapshot, diff, dir);
-      ReadOnlyList<INode> children = dir.getChildrenList(
-          diffReport.isFromEarlier() ? Snapshot.getSnapshotId(diffReport.to) : 
-            Snapshot.getSnapshotId(diffReport.from));
+      ReadOnlyList<INode> children = dir.getChildrenList(earlierSnapshot
+          .getId());
-        if (diff.searchIndex(ListType.CREATED, name) < 0
-            && diff.searchIndex(ListType.DELETED, name) < 0) {
+        boolean toProcess = diff.searchIndex(ListType.DELETED, name) < 0;
+        if (!toProcess && child instanceof INodeReference.WithName) {
+          byte[][] renameTargetPath = findRenameTargetPath((WithName) child,
+              laterSnapshot == null ? Snapshot.CURRENT_STATE_ID : 
+                                      laterSnapshot.getId());
+          if (renameTargetPath != null) {
+            toProcess = true;
+            diffReport.setRenameTarget(child.getId(), renameTargetPath);
+          }
+        }
+        if (toProcess) {
-      Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.from
-          : diffReport.to;
-      Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.to
-          : diffReport.from;
-      boolean change = file.getDiffs().changedBetweenSnapshots(earlierSnapshot,
-          laterSnapshot);
+      boolean change = file.getFileWithSnapshotFeature()
+          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);
-  
+
+  /**
+   * We just found a deleted WithName node as the source of a rename operation.
+   * However, we should include it in our snapshot diff report as rename only
+   * if the rename target is also under the same snapshottable directory.
+   */
+  private byte[][] findRenameTargetPath(INodeReference.WithName wn,
+      final int snapshotId) {
+    INode inode = wn.getReferredINode();
+    final LinkedList<byte[]> ancestors = Lists.newLinkedList();
+    while (inode != null) {
+      if (inode == this) {
+        return ancestors.toArray(new byte[ancestors.size()][]);
+      }
+      if (inode instanceof INodeReference.WithCount) {
+        inode = ((WithCount) inode).getParentRef(snapshotId);
+      } else {
+        INode parent = inode.getParentReference() != null ? inode
+            .getParentReference() : inode.getParent();
+        if (parent != null && parent instanceof INodeDirectory) {
+          int sid = parent.asDirectory().searchChild(inode);
+          if (sid < snapshotId) {
+            return null;
+          }
+        }
+        if (!(parent instanceof WithCount)) {
+          ancestors.addFirst(inode.getLocalNameBytes());
+        }
+        inode = parent;
+      }
+    }
+    return null;
+  }
+
-}
+}

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS29 INS83 MOV5 INS42 INS44 INS44 INS8 INS60 INS60 MOV65 INS43 INS42 INS83 INS39 INS42 MOV60 INS60 INS61 INS41 INS83 MOV43 INS59 INS83 MOV43 INS59 INS66 UPD66 UPD66 INS40 MOV43 INS83 INS74 INS59 INS27 INS8 INS33 INS42 INS16 INS42 INS16 MOV60 INS42 INS32 UPD43 MOV43 UPD5 MOV5 UPD42 MOV42 INS32 INS42 INS33 INS25 INS25 MOV32 INS32 INS32 MOV32 INS32 INS32 INS83 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS27 INS8 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS52 INS41 INS42 INS43 MOV21 INS60 MOV25 INS25 INS21 INS32 INS39 INS59 INS27 INS8 INS42 INS32 INS40 INS7 MOV43 INS59 INS27 INS38 INS8 INS7 UPD42 MOV42 UPD42 MOV42 INS42 MOV27 INS38 INS62 INS60 INS25 INS42 UPD42 MOV42 UPD42 MOV42 INS3 INS42 INS32 INS42 INS16 INS27 INS62 INS25 INS36 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV5 INS59 INS27 INS8 UPD42 MOV5 INS32 INS36 UPD42 MOV42 UPD42 MOV42 INS27 INS32 INS32 INS42 INS33 INS42 MOV43 INS39 INS27 INS8 INS62 INS32 INS40 INS42 INS32 INS42 INS33 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS11 MOV32 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS41 INS42 INS43 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS11 INS16 INS7 INS32 INS43 INS42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS27 INS40 INS32 INS42 INS9 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL29 DEL83 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL34 DEL34 DEL38 DEL16 DEL41 DEL8 DEL42 DEL33 DEL27 DEL34 DEL41 DEL8 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL16 DEL41 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL23 DEL66 DEL66 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL8 DEL31 DEL66 DEL42 DEL67 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL34 DEL27 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL70 DEL43 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL41 DEL8 DEL31 DEL55 DEL40 DEL40 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL16 DEL42 DEL42 DEL40 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL40 DEL40 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL40 DEL40 DEL16 DEL59 DEL60 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL85 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21