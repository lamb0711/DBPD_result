HDFS-11673. [READ] Handle failures of Datanode with PROVIDED storage

+import org.apache.hadoop.hdfs.server.protocol.BlockReportContext;
+   * @param context the block report context
-  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s)
-      throws IOException {
+  DatanodeStorageInfo getStorage(DatanodeDescriptor dn, DatanodeStorage s,
+      BlockReportContext context) throws IOException {
-        blockProvider.start();
+        blockProvider.start(context);
+  public void removeDatanode(DatanodeDescriptor dnToRemove) {
+    if (providedDescriptor != null) {
+      int remainingDatanodes = providedDescriptor.remove(dnToRemove);
+      if (remainingDatanodes == 0) {
+        blockProvider.stop();
+      }
+    }
+  }
+
-      DatanodeStorageInfo storage = new DatanodeStorageInfo(this, ds);
+      DatanodeStorageInfo storage = new ProvidedDatanodeStorageInfo(this, ds);
+    int remove(DatanodeDescriptor dnToRemove) {
+      // this operation happens under the FSNamesystem lock;
+      // no additional synchronization required.
+      if (dnToRemove != null) {
+        DatanodeDescriptor storedDN = dns.get(dnToRemove.getDatanodeUuid());
+        if (storedDN != null) {
+          dns.remove(dnToRemove.getDatanodeUuid());
+        }
+      }
+      return dns.size();
+    }
+
+    int activeProvidedDatanodes() {
+      return dns.size();
+    }
+
+   * The DatanodeStorageInfo used for the provided storage.
+   */
+  static class ProvidedDatanodeStorageInfo extends DatanodeStorageInfo {
+
+    ProvidedDatanodeStorageInfo(ProvidedDescriptor dn, DatanodeStorage ds) {
+      super(dn, ds);
+    }
+
+    @Override
+    boolean removeBlock(BlockInfo b) {
+      ProvidedDescriptor dn = (ProvidedDescriptor) getDatanodeDescriptor();
+      if (dn.activeProvidedDatanodes() == 0) {
+        return super.removeBlock(b);
+      } else {
+        return false;
+      }
+    }
+  }
+  /**

INS26 INS40 INS31 INS55 INS44 INS83 INS39 INS42 INS44 INS8 INS31 INS31 INS29 INS83 INS42 MOV43 INS31 INS31 INS65 INS43 INS42 INS43 INS42 INS25 INS39 INS42 INS44 INS8 INS39 INS42 INS8 INS65 INS42 INS44 INS44 INS8 INS78 INS39 INS42 INS44 INS8 INS42 INS66 INS42 INS42 INS27 INS8 INS43 INS42 INS25 INS41 INS41 INS66 INS43 INS42 INS43 INS42 INS46 INS42 INS43 INS42 INS60 INS25 INS42 INS33 INS60 INS25 MOV43 INS42 INS27 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS39 INS59 INS27 INS8 INS42 INS33 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS34 INS41 INS41 INS42 INS32 INS42 INS34 INS21 INS43 INS43 INS59 INS27 INS8 INS43 INS32 INS42 INS42 INS48 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42