YARN-261. Ability to fail AM attempts. Contributed by Andrey Klochkov and Rohith Sharma K S

+import org.apache.hadoop.yarn.api.protocolrecords.FailApplicationAttemptRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.FailApplicationAttemptResponse;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.event.RMAppAttemptFailedEvent;
+  public FailApplicationAttemptResponse failApplicationAttempt(
+      FailApplicationAttemptRequest request) throws YarnException {
+
+    ApplicationAttemptId attemptId = request.getApplicationAttemptId();
+    ApplicationId applicationId = attemptId.getApplicationId();
+
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = UserGroupInformation.getCurrentUser();
+    } catch (IOException ie) {
+      LOG.info("Error getting UGI ", ie);
+      RMAuditLogger.logFailure("UNKNOWN", AuditConstants.FAIL_ATTEMPT_REQUEST,
+          "UNKNOWN", "ClientRMService" , "Error getting UGI",
+          applicationId, attemptId);
+      throw RPCUtil.getRemoteException(ie);
+    }
+
+    RMApp application = this.rmContext.getRMApps().get(applicationId);
+    if (application == null) {
+      RMAuditLogger.logFailure(callerUGI.getUserName(),
+          AuditConstants.FAIL_ATTEMPT_REQUEST, "UNKNOWN", "ClientRMService",
+          "Trying to fail an attempt of an absent application", applicationId,
+          attemptId);
+      throw new ApplicationNotFoundException("Trying to fail an attempt "
+          + attemptId + " of an absent application " + applicationId);
+    }
+
+    RMAppAttempt appAttempt = application.getAppAttempts().get(attemptId);
+    if (appAttempt == null) {
+      throw new ApplicationAttemptNotFoundException(
+          "ApplicationAttempt with id '" + attemptId + "' doesn't exist in RM.");
+    }
+
+    if (!checkAccess(callerUGI, application.getUser(),
+        ApplicationAccessType.MODIFY_APP, application)) {
+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
+          AuditConstants.FAIL_ATTEMPT_REQUEST,
+          "User doesn't have permissions to "
+              + ApplicationAccessType.MODIFY_APP.toString(), "ClientRMService",
+          AuditConstants.UNAUTHORIZED_USER, applicationId);
+      throw RPCUtil.getRemoteException(new AccessControlException("User "
+          + callerUGI.getShortUserName() + " cannot perform operation "
+          + ApplicationAccessType.MODIFY_APP.name() + " on " + applicationId));
+    }
+
+    FailApplicationAttemptResponse response =
+        recordFactory.newRecordInstance(FailApplicationAttemptResponse.class);
+
+    if (!ACTIVE_APP_STATES.contains(application.getState())) {
+      if (COMPLETED_APP_STATES.contains(application.getState())) {
+        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),
+            AuditConstants.FAIL_ATTEMPT_REQUEST, "ClientRMService",
+            applicationId);
+        return response;
+      }
+    }
+
+    this.rmContext
+        .getDispatcher()
+        .getEventHandler()
+        .handle(
+            new RMAppAttemptFailedEvent(attemptId,
+        "Attempt failed by user."));
+
+    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),
+        AuditConstants.FAIL_ATTEMPT_REQUEST, "ClientRMService", applicationId,
+        attemptId);
+
+    return response;
+  }
+
+  @SuppressWarnings("unchecked")
+  @Override

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS79 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS54 INS60 INS25 INS60 INS25 INS25 INS60 INS25 INS21 INS21 INS41 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS38 INS8 INS43 INS59 INS38 INS8 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS21 INS53 INS42 INS42 INS32 INS32 INS25 INS32 INS42 INS14 INS42 INS42 INS32 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS21 INS53 INS32 INS42 INS42 INS32 INS14 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS40 INS42 INS32 INS32 INS42 INS42 INS57 INS42 INS42 INS32 INS32 INS8 INS32 INS42 INS43 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS22 INS42 INS42 INS42 INS32 INS40 INS45 INS45 INS45 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS32 INS40 INS27 INS45 INS40 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS32 INS21 INS41 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS40 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS32 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS40 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS32 INS40 INS45 INS42 INS42 INS42 INS40 INS42 INS42 INS42