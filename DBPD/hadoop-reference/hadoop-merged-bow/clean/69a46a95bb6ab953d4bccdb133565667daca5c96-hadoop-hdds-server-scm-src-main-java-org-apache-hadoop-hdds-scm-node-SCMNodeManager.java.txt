HDDS-1713. ReplicationManager fail to find proper node topology basedâ€¦ (#1112)



+import com.google.common.base.Strings;
-import org.apache.hadoop.hdds.scm.net.InnerNode;
-import org.apache.hadoop.hdds.scm.net.NetConstants;
-import org.apache.hadoop.hdds.scm.net.Node;
+import java.util.concurrent.ConcurrentHashMap;
+  private final ConcurrentHashMap<String, String> dnsToUuidMap =
+      new ConcurrentHashMap<>();
-      String location;
+      String dnsName;
+      String networkLocation;
+      datanodeDetails.setNetworkName(datanodeDetails.getUuidString());
-        datanodeDetails.setNetworkName(datanodeDetails.getHostName());
-        location = nodeResolve(datanodeDetails.getHostName());
+        dnsName = datanodeDetails.getHostName();
-        datanodeDetails.setNetworkName(datanodeDetails.getIpAddress());
-        location = nodeResolve(datanodeDetails.getIpAddress());
+        dnsName = datanodeDetails.getIpAddress();
-      if (location != null) {
-        datanodeDetails.setNetworkLocation(location);
+      networkLocation = nodeResolve(dnsName);
+      if (networkLocation != null) {
+        datanodeDetails.setNetworkLocation(networkLocation);
+      dnsToUuidMap.put(dnsName, datanodeDetails.getUuidString());
-        .setDatanodeUUID(datanodeDetails.getUuidString())
+        .setDatanode(datanodeDetails)
-        .setHostname(datanodeDetails.getHostName())
-        .setIpAddress(datanodeDetails.getIpAddress())
-   * Given datanode address or host name, returns the DatanodeDetails for the
-   * node.
+   * Given datanode uuid, returns the DatanodeDetails for the node.
-   * @param address node host address
+   * @param uuid node host address
-  public DatanodeDetails getNode(String address) {
-    Node node = null;
-    String location = nodeResolve(address);
-    if (location != null) {
-      node = clusterMap.getNode(location + NetConstants.PATH_SEPARATOR_STR +
-          address);
+  public DatanodeDetails getNodeByUuid(String uuid) {
+    if (Strings.isNullOrEmpty(uuid)) {
+      LOG.warn("uuid is null");
+      return null;
+    DatanodeDetails temp = DatanodeDetails.newBuilder().setUuid(uuid).build();
+    try {
+      return nodeStateManager.getNode(temp);
+    } catch (NodeNotFoundException e) {
+      LOG.warn("Cannot find node for uuid {}", uuid);
+      return null;
+    }
+  }
-    if (node != null) {
-      if (node instanceof InnerNode) {
-        LOG.warn("Get node for {} return {}, it's an inner node, " +
-            "not a datanode", address, node.getNetworkFullPath());
-      } else {
-        LOG.debug("Get node for {} return {}", address,
-            node.getNetworkFullPath());
-        return (DatanodeDetails)node;
-      }
-    } else {
-      LOG.warn("Cannot find node for {}", address);
+  /**
+   * Given datanode address(Ipaddress or hostname), returns the DatanodeDetails
+   * for the node.
+   *
+   * @param address datanode address
+   * @return the given datanode, or null if not found
+   */
+  @Override
+  public DatanodeDetails getNodeByAddress(String address) {
+    if (Strings.isNullOrEmpty(address)) {
+      LOG.warn("address is null");
+      return null;
+    String uuid = dnsToUuidMap.get(address);
+    if (uuid != null) {
+      DatanodeDetails temp = DatanodeDetails.newBuilder().setUuid(uuid).build();
+      try {
+        return nodeStateManager.getNode(temp);
+      } catch (NodeNotFoundException e) {
+        LOG.warn("Cannot find node for uuid {}", uuid);
+      }
+    }
+    LOG.warn("Cannot find node for address {}", address);

MOV26 MOV26 UPD40 UPD40 INS23 INS31 INS31 INS83 INS83 INS74 INS59 MOV29 INS78 MOV83 INS43 INS42 INS44 INS8 INS29 MOV78 INS83 MOV43 INS42 MOV44 INS8 INS43 INS43 INS43 INS42 INS14 INS42 INS42 MOV43 INS42 INS25 INS60 INS54 INS65 INS65 INS65 INS25 INS60 INS25 MOV21 MOV41 INS42 INS42 INS42 INS74 MOV32 UPD66 UPD42 INS32 INS8 MOV43 INS59 INS8 INS12 INS66 INS66 INS42 INS66 INS66 INS32 INS8 INS43 INS59 MOV27 MOV8 INS43 INS60 INS21 INS21 INS21 UPD42 MOV42 INS42 INS42 INS42 INS21 INS41 INS42 INS32 INS41 INS44 INS8 UPD42 MOV42 INS42 MOV42 INS21 INS41 INS42 INS42 INS32 UPD42 INS60 INS54 UPD45 INS42 INS43 INS59 INS32 INS7 INS32 INS32 INS33 INS32 INS42 INS32 INS43 INS42 INS21 INS41 INS32 INS33 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS59 INS8 INS12 UPD42 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS33 INS42 INS42 INS45 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS43 INS42 MOV21 INS42 MOV32 INS42 MOV32 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD45 UPD42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL66 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL45 DEL45 DEL27 DEL32 DEL32 DEL21 DEL8 DEL42 DEL11 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL42 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31