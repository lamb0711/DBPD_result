YARN-7939.  Added support to upgrade a component instance.
            Contributed by Chandni Singh

+import com.google.common.base.Preconditions;
+import org.apache.hadoop.yarn.service.api.records.Container;
+import org.apache.hadoop.yarn.service.api.records.ContainerState;
+import org.apache.hadoop.yarn.service.conf.RestApiConstants;
+import org.apache.hadoop.yarn.service.utils.JsonSerDeser;
+import org.codehaus.jackson.map.PropertyNamingStrategy;
-  private String getApiUrl(String appName) throws IOException {
+  private String getServicePath(String appName) throws IOException {
+  private String getInstancesPath(String appName) throws IOException {
+    Preconditions.checkNotNull(appName);
+    String url = getRMWebAddress();
+    StringBuilder api = new StringBuilder();
+    api.append(url);
+    api.append("/app/v1/services/").append(appName).append("/")
+        .append(RestApiConstants.COMP_INSTANCES);
+    Configuration conf = getConfig();
+    if (conf.get("hadoop.http.authentication.type").equalsIgnoreCase(
+        "simple")) {
+      api.append("?user.name=" + UrlEncoded
+          .encodeString(System.getProperty("user.name")));
+    }
+    return api.toString();
+  }
+
-    return getApiClient(null);
+    return getApiClient(getServicePath(null));
-   * @param appName
+   * @param requestPath
-  private Builder getApiClient(String appName) throws IOException {
+  private Builder getApiClient(String requestPath)
+      throws IOException {
-        .resource(getApiUrl(appName)).type(MediaType.APPLICATION_JSON);
+        .resource(requestPath).type(MediaType.APPLICATION_JSON);
-      ClientResponse response = getApiClient(appName)
+      ClientResponse response = getApiClient(getServicePath(appName))
-      ClientResponse response = getApiClient(appName)
+      ClientResponse response = getApiClient(getServicePath(appName))
-      ClientResponse response = getApiClient(appName)
+      ClientResponse response = getApiClient(getServicePath(appName))
-      ClientResponse response = getApiClient(appName)
+      ClientResponse response = getApiClient(getServicePath(appName))
-      ClientResponse response = getApiClient(appName).get(ClientResponse.class);
+      ClientResponse response = getApiClient(getServicePath(appName))
+          .get(ClientResponse.class);
-  public int actionUpgrade(String appName,
-      String fileName) throws IOException, YarnException {
+  public int initiateUpgrade(String appName,
+      String fileName, boolean autoFinalize) throws IOException, YarnException {
-      service.setState(ServiceState.UPGRADING);
+      if (autoFinalize) {
+        service.setState(ServiceState.UPGRADING_AUTO_FINALIZE);
+      } else {
+        service.setState(ServiceState.UPGRADING);
+      }
-      ClientResponse response = getApiClient()
-          .post(ClientResponse.class, buffer);
+      ClientResponse response = getApiClient(getServicePath(appName))
+          .put(ClientResponse.class, buffer);
+
+  @Override
+  public int actionUpgradeInstances(String appName, List<String> compInstances)
+      throws IOException, YarnException {
+    int result;
+    Container[] toUpgrade = new Container[compInstances.size()];
+    try {
+      int idx = 0;
+      for (String instanceName : compInstances) {
+        Container container = new Container();
+        container.setComponentInstanceName(instanceName);
+        container.setState(ContainerState.UPGRADING);
+        toUpgrade[idx++] = container;
+      }
+      String buffer = containerJsonSerde.toJson(toUpgrade);
+      ClientResponse response = getApiClient(getInstancesPath(appName))
+          .put(ClientResponse.class, buffer);
+      result = processResponse(response);
+    } catch (Exception e) {
+      LOG.error("Failed to upgrade component instance: ", e);
+      result = EXIT_EXCEPTION_THROWN;
+    }
+    return result;
+  }
+
+  private static JsonSerDeser<Container[]> containerJsonSerde =
+      new JsonSerDeser<>(Container[].class,
+      PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS23 UPD42 INS83 INS43 INS42 INS44 INS43 INS8 INS44 UPD42 INS44 INS78 INS83 INS39 INS42 MOV44 INS44 INS43 INS43 INS8 INS83 INS83 INS74 INS59 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS21 INS21 INS60 INS25 INS41 INS43 INS42 INS39 INS42 INS42 INS74 INS42 INS42 INS42 INS60 INS60 INS54 INS41 INS43 INS5 INS42 INS14 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS8 INS32 UPD42 INS42 INS43 INS43 INS39 INS59 INS5 INS59 INS8 INS12 INS42 INS42 INS43 INS85 INS74 INS57 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS32 INS42 INS45 INS21 INS42 INS42 INS32 INS25 INS60 INS42 INS42 INS42 INS43 INS85 INS42 INS3 INS60 INS70 INS60 INS60 INS21 INS44 INS8 INS42 INS43 INS5 INS42 INS43 INS32 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 MOV33 INS43 MOV43 INS42 INS8 INS8 MOV43 MOV59 INS42 INS5 INS32 INS39 INS59 INS44 INS42 INS8 INS43 INS59 INS43 INS59 INS7 INS43 INS42 INS21 INS21 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS27 UPD42 MOV42 INS42 MOV42 INS21 MOV21 INS43 INS85 INS42 INS42 INS42 INS34 INS43 INS42 INS60 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS7 INS42 INS42 INS42 INS45 INS45 INS32 INS57 INS32 UPD42 MOV57 INS42 INS42 INS43 INS59 INS32 INS32 INS7 INS42 INS42 INS42 INS32 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS2 INS42 INS42 INS32 INS43 INS42 INS42 INS45 INS42 MOV42 INS42 INS42 MOV42 INS42 MOV42 INS42 MOV42 INS42 MOV42 INS42 INS42 INS43 INS42 INS37 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL60