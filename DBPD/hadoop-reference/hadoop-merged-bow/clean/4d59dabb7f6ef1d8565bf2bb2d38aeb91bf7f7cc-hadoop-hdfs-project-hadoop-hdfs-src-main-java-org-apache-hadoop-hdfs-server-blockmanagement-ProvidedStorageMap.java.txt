HDFS-12809. [READ] Fix the randomized selection of locations in {{ProvidedBlocksBuilder}}.

+import java.util.Collections;
-import java.util.Map;
+import java.util.Random;
-          DatanodeDescriptor dn = chooseProvidedDatanode(excludedUUids);
-          locs.add(
-              new DatanodeInfoWithStorage(
-                  dn, currInfo.getStorageID(), currInfo.getStorageType()));
-          excludedUUids.add(dn.getDatanodeUuid());
+          // Provided location will be added to the list of locations after
+          // examining all local locations.
+        // add the first datanode here
+        DatanodeDescriptor dn = chooseProvidedDatanode(excludedUUids);
+        locs.add(
+            new DatanodeInfoWithStorage(dn, storageId, StorageType.PROVIDED));
+        excludedUUids.add(dn.getDatanodeUuid());
+        numLocations++;
-          DatanodeDescriptor dn = chooseProvidedDatanode(excludedUUids);
+          dn = chooseProvidedDatanode(excludedUUids);
+    // maintain a separate list of the datanodes with provided storage
+    // to efficiently choose Datanodes when required.
+    private final List<DatanodeDescriptor> dnR = new ArrayList<>();
-      LOG.info("XXXXX adding Datanode " + dn.getDatanodeUuid());
+      dnR.add(dn);
-      // exact match for now
-      DatanodeDescriptor dn = client != null ?
-          dns.get(client.getDatanodeUuid()) : null;
-      if (null == dn) {
-        dn = chooseRandom();
-      }
-      return dn;
+      return choose(client, Collections.<String>emptySet());
-      DatanodeDescriptor dn = client != null ?
-          dns.get(client.getDatanodeUuid()) : null;
-
-      if (null == dn || excludedUUids.contains(client.getDatanodeUuid())) {
-        dn = null;
-        Set<String> exploredUUids = new HashSet<String>();
-
-        while(exploredUUids.size() < dns.size()) {
-          Map.Entry<String, DatanodeDescriptor> d =
-                  dns.ceilingEntry(UUID.randomUUID().toString());
-          if (null == d) {
-            d = dns.firstEntry();
-          }
-          String uuid = d.getValue().getDatanodeUuid();
-          //this node has already been explored, and was not selected earlier
-          if (exploredUUids.contains(uuid)) {
-            continue;
-          }
-          exploredUUids.add(uuid);
-          //this node has been excluded
-          if (excludedUUids.contains(uuid)) {
-            continue;
-          }
-          return dns.get(uuid);
+      if (client != null && !excludedUUids.contains(client.getDatanodeUuid())) {
+        DatanodeDescriptor dn = dns.get(client.getDatanodeUuid());
+        if (dn != null) {
+          return dn;
-      return dn;
-    }
-
-    DatanodeDescriptor chooseRandom(DatanodeStorageInfo[] excludedStorages) {
-      // TODO: Currently this is not uniformly random;
-      // skewed toward sparse sections of the ids
-      Set<DatanodeDescriptor> excludedNodes =
-          new HashSet<DatanodeDescriptor>();
-      if (excludedStorages != null) {
-        for (int i= 0; i < excludedStorages.length; i++) {
-          LOG.info("Excluded: " + excludedStorages[i].getDatanodeDescriptor());
-          excludedNodes.add(excludedStorages[i].getDatanodeDescriptor());
+      Random r = new Random();
+      for (int i = dnR.size() - 1; i >= 0; --i) {
+        int pos = r.nextInt(i + 1);
+        DatanodeDescriptor node = dnR.get(pos);
+        String uuid = node.getDatanodeUuid();
+        if (!excludedUUids.contains(uuid)) {
+          return node;
-      }
-      Set<DatanodeDescriptor> exploredNodes = new HashSet<DatanodeDescriptor>();
-
-      while(exploredNodes.size() < dns.size()) {
-        Map.Entry<String, DatanodeDescriptor> d =
-            dns.ceilingEntry(UUID.randomUUID().toString());
-        if (null == d) {
-          d = dns.firstEntry();
-        }
-        DatanodeDescriptor node = d.getValue();
-        //this node has already been explored, and was not selected earlier
-        if (exploredNodes.contains(node)) {
-          continue;
-        }
-        exploredNodes.add(node);
-        //this node has been excluded
-        if (excludedNodes.contains(node)) {
-          continue;
-        }
-        return node;
+        Collections.swap(dnR, i, pos);
-    DatanodeDescriptor chooseRandom() {
-      return chooseRandom(null);
+    DatanodeDescriptor chooseRandom(DatanodeStorageInfo... excludedStorages) {
+      Set<String> excludedNodes = new HashSet<>();
+      if (excludedStorages != null) {
+        for (int i = 0; i < excludedStorages.length; i++) {
+          DatanodeDescriptor dn = excludedStorages[i].getDatanodeDescriptor();
+          String uuid = dn.getDatanodeUuid();
+          excludedNodes.add(uuid);
+        }
+      }
+      return choose(null, excludedNodes);
+          dnR.remove(dnToRemove);

MOV26 INS26 INS40 UPD40 INS23 INS31 INS83 INS83 UPD74 MOV74 INS59 MOV21 MOV43 MOV43 MOV42 MOV44 MOV44 INS8 MOV43 MOV44 UPD43 INS42 INS14 INS41 MOV25 MOV60 INS24 MOV41 MOV43 MOV60 MOV25 UPD42 INS74 INS32 UPD27 INS8 INS43 INS58 INS27 INS38 INS8 MOV74 MOV60 INS21 MOV21 INS21 INS43 UPD42 UPD42 INS42 INS42 INS42 INS32 MOV27 INS38 MOV60 MOV25 UPD42 MOV42 UPD42 INS39 INS59 INS42 INS34 INS42 MOV60 MOV60 INS60 MOV25 INS21 UPD42 INS42 INS32 INS37 INS42 UPD42 MOV42 MOV43 UPD42 MOV42 MOV32 UPD27 INS43 INS42 INS27 INS39 MOV43 MOV43 INS59 INS38 INS32 UPD74 INS42 INS42 INS14 INS42 INS21 MOV32 UPD42 INS33 MOV41 UPD42 MOV42 MOV32 INS34 INS42 INS32 INS42 INS32 MOV32 MOV41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS60 INS60 INS21 INS43 INS42 INS42 INS40 INS7 UPD42 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 UPD42 INS42 MOV42 UPD42 MOV42 MOV43 INS59 MOV43 INS59 INS32 INS42 INS42 INS32 INS42 INS34 INS42 MOV32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL45 DEL27 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL33 DEL16 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL33 DEL42 DEL27 DEL33 DEL16 DEL33 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL61 DEL8 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL18 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL27 DEL33 DEL42 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL42 DEL32 DEL21 DEL32 DEL18 DEL8 DEL25 DEL8 DEL61 DEL8 DEL31 DEL42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL32