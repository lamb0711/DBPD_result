YARN-6255. Refactor yarn-native-services framework. Contributed by Jian He

+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;
-import org.apache.slider.server.appmaster.management.LongGauge;
+import org.apache.slider.server.appmaster.metrics.SliderMetrics;
+import static org.apache.hadoop.metrics2.lib.Interns.info;
+
-public final class RoleStatus implements Cloneable, MetricSet {
+public final class RoleStatus implements MetricSet {
-  private final LongGauge actual = new LongGauge();
-  private final LongGauge completed = new LongGauge();
-  private final LongGauge desired = new LongGauge();
-  private final LongGauge failed = new LongGauge();
-  private final LongGauge failedRecently = new LongGauge(0);
-  private final LongGauge limitsExceeded = new LongGauge(0);
-  private final LongGauge nodeFailed = new LongGauge(0);
-  /** Number of AA requests queued. */
-  private final LongGauge pendingAntiAffineRequests = new LongGauge(0);
-  private final LongGauge preempted = new LongGauge(0);
-  private final LongGauge releasing = new LongGauge();
-  private final LongGauge requested = new LongGauge();
-  private final LongGauge started = new LongGauge();
-  private final LongGauge startFailed = new LongGauge();
-  private final LongGauge totalRequested = new LongGauge();
-
-
+  private SliderMetrics componentMetrics;
+    componentMetrics =
+        SliderMetrics.register(this.name, "Metrics for component " + this.name);
+    componentMetrics
+        .tag("type", "Metrics type [component or service]", "component");
+  }
+
+  public SliderMetrics getComponentMetrics() {
+    return this.componentMetrics;
-    metrics.put("actual", actual);
-    metrics.put("completed", completed );
-    metrics.put("desired", desired);
-    metrics.put("failed", failed);
-    metrics.put("limitsExceeded", limitsExceeded);
-    metrics.put("nodeFailed", nodeFailed);
-    metrics.put("preempted", preempted);
-    metrics.put("pendingAntiAffineRequests", pendingAntiAffineRequests);
-    metrics.put("releasing", releasing);
-    metrics.put("requested", requested);
-    metrics.put("preempted", preempted);
-    metrics.put("releasing", releasing );
-    metrics.put("requested", requested);
-    metrics.put("started", started);
-    metrics.put("startFailed", startFailed);
-    metrics.put("totalRequested", totalRequested);
-
-  public long getDesired() {
-    return desired.get();
-  }
-
-  public void setDesired(long desired) {
-    this.desired.set(desired);
-  }
-
-  public long getActual() {
-    return actual.get();
-  }
-
-  public long incActual() {
-    return actual.incrementAndGet();
-  }
-
-  public long decActual() {
-    return actual.decToFloor(1);
-  }
-
-  /**
-   * Get the request count.
-   * @return a count of requested containers
-   */
-  public long getRequested() {
-    return requested.get();
-  }
-
-  public long incRequested() {
-    totalRequested.incrementAndGet();
-    return requested.incrementAndGet();
-  }
-
-  public void cancel(long count) {
-    requested.decToFloor(count);
-  }
-
-  public void decRequested() {
-    cancel(1);
-  }
-
-  public long getReleasing() {
-    return releasing.get();
-  }
-
-  public long incReleasing() {
-    return releasing.incrementAndGet();
-  }
-
-  public long decReleasing() {
-    return releasing.decToFloor(1);
-  }
-
-  public long getFailed() {
-    return failed.get();
-  }
-
-  public long getFailedRecently() {
-    return failedRecently.get();
-  }
-
-  /**
-   * Reset the recent failure
-   * @return the number of failures in the "recent" window
-   */
-  public long resetFailedRecently() {
-    return failedRecently.getAndSet(0);
-  }
-
-  public long getLimitsExceeded() {
-    return limitsExceeded.get();
-  }
-
-  public long incPendingAntiAffineRequests(long v) {
-    return pendingAntiAffineRequests.addAndGet(v);
-  }
-
-   * @param startupFailure flag to indicate this was a startup event
-   * @param outcome outcome of the container
-  public synchronized void noteFailed(boolean startupFailure, String text,
-      ContainerOutcome outcome) {
+  public synchronized void noteFailed(String text) {
-    switch (outcome) {
-      case Preempted:
-        preempted.incrementAndGet();
-        break;
-
-      case Node_failure:
-        nodeFailed.incrementAndGet();
-        failed.incrementAndGet();
-        break;
-
-      case Failed_limits_exceeded: // exceeded memory or CPU; app/configuration related
-        limitsExceeded.incrementAndGet();
-        // fall through
-      case Failed: // application failure, possibly node related, possibly not
-      default: // anything else (future-proofing)
-        failed.incrementAndGet();
-        failedRecently.incrementAndGet();
-        //have a look to see if it short lived
-        if (startupFailure) {
-          incStartFailed();
-        }
-        break;
-    }
-  public long getStartFailed() {
-    return startFailed.get();
-  }
-
-  public synchronized void incStartFailed() {
-    startFailed.getAndIncrement();
-  }
-
-  public synchronized String getFailureMessage() {
-    return failureMessage;
-  }
-
-  public long getCompleted() {
-    return completed.get();
-  }
-
-  public long incCompleted() {
-    return completed.incrementAndGet();
-  }
-  public long getStarted() {
-    return started.get();
-  }
-
-  public synchronized void incStarted() {
-    started.incrementAndGet();
-  }
-
-  public long getTotalRequested() {
-    return totalRequested.get();
-  }
-
-  public long getPreempted() {
-    return preempted.get();
-  }
-
-  public long getNodeFailed() {
-    return nodeFailed.get();
-  }
-
-  public long getPendingAntiAffineRequests() {
-    return pendingAntiAffineRequests.get();
-  }
-
-  public void setPendingAntiAffineRequests(long pendingAntiAffineRequests) {
-    this.pendingAntiAffineRequests.set(pendingAntiAffineRequests);
-  }
-
-  public long decPendingAntiAffineRequests() {
-    return pendingAntiAffineRequests.decToFloor(1);
-  }
-
-  public OutstandingRequest getOutstandingAArequest() {
-    return outstandingAArequest;
-  }
-      setPendingAntiAffineRequests(0);
-      decRequested();
+  public long getDesired() {
+    return componentMetrics.containersDesired.value();
+  }
+
+  long getRunning() {
+    return componentMetrics.containersRunning.value();
+  }
+
+  public long getPending() {
+    return componentMetrics.containersPending.value();
+  }
+
+  public long getAAPending() {
+    return componentMetrics.pendingAAContainers.value();
+  }
+
+  void decAAPending() {
+    componentMetrics.pendingAAContainers.decr();
+  }
+  void setAAPending(long n) {
+    componentMetrics.pendingAAContainers.set((int)n);
+  }
+
+  long getFailedRecently() {
+    return componentMetrics.failedSinceLastThreshold.value();
+  }
+
+  long resetFailedRecently() {
+    long count =
+        componentMetrics.failedSinceLastThreshold.value();
+    componentMetrics.failedSinceLastThreshold.set(0);
+    return count;
+  }
+
+  long getFailed() {
+    return componentMetrics.containersFailed.value();
+  }
+
+  String getFailureMessage() {
+    return this.failureMessage;
+  }
-    long delta = desired.get() - inuse;
+    long delta = getDesired() - inuse;
-      delta += releasing.get();
-    return actual.get() + requested.get();
-  }
-
-  @Override
-  public String toString() {
-    final StringBuilder sb = new StringBuilder("RoleStatus{");
-    sb.append("name='").append(name).append('\'');
-    sb.append(", group=").append(group);
-    sb.append(", key=").append(key);
-    sb.append(", desired=").append(desired);
-    sb.append(", actual=").append(actual);
-    sb.append(", requested=").append(requested);
-    sb.append(", releasing=").append(releasing);
-    sb.append(", failed=").append(failed);
-    sb.append(", startFailed=").append(startFailed);
-    sb.append(", started=").append(started);
-    sb.append(", completed=").append(completed);
-    sb.append(", totalRequested=").append(totalRequested);
-    sb.append(", preempted=").append(preempted);
-    sb.append(", nodeFailed=").append(nodeFailed);
-    sb.append(", failedRecently=").append(failedRecently);
-    sb.append(", limitsExceeded=").append(limitsExceeded);
-    sb.append(", resourceRequirements=").append(resourceRequirements);
-    sb.append(", isAntiAffinePlacement=").append(isAntiAffinePlacement());
-    if (isAntiAffinePlacement()) {
-      sb.append(", pendingAntiAffineRequests=").append(pendingAntiAffineRequests);
-      sb.append(", outstandingAArequest=").append(outstandingAArequest);
-    }
-    sb.append(", failureMessage='").append(failureMessage).append('\'');
-    sb.append(", providerRole=").append(providerRole);
-    sb.append('}');
-    return sb.toString();
-  }
-
-  @Override
-  public synchronized  Object clone() throws CloneNotSupportedException {
-    return super.clone();
+    return getRunning() + getPending();
-   * Build the statistics map from the current data
-   * @return a map for use in statistics reports
-   */
-  public Map<String, Integer> buildStatistics() {
-    ComponentInformation componentInformation = serialize();
-    return componentInformation.buildStatistics();
-  }
-
-  /**
-    info.priority = getPriority();
-    info.desired = desired.intValue();
-    info.actual = actual.intValue();
-    info.requested = requested.intValue();
-    info.releasing = releasing.intValue();
-    info.failed = failed.intValue();
-    info.startFailed = startFailed.intValue();
-    info.placementPolicy = getPlacementPolicy();
-    info.failureMessage = failureMessage;
-    info.totalRequested = totalRequested.intValue();
-    info.failedRecently = failedRecently.intValue();
-    info.nodeFailed = nodeFailed.intValue();
-    info.preempted = preempted.intValue();
-    info.pendingAntiAffineRequestCount = pendingAntiAffineRequests.intValue();
-    info.isAARequestOutstanding = isAARequestOutstanding();
-    stats.actual = actual.get();
-    stats.desired = desired.get();
-    stats.failed = failed.get();
-    stats.limitsExceeded = limitsExceeded.get();
-    stats.nodeFailed = nodeFailed.get();
-    stats.preempted = preempted.get();
-    stats.releasing = releasing.get();
-    stats.requested = requested.get();
-    stats.started = started.get();
-    stats.startFailed = startFailed.get();
-    stats.totalRequested = totalRequested.get();

INS26 INS26 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 INS40 UPD40 INS40 INS31 INS31 UPD43 INS83 INS43 UPD42 MOV42 MOV8 MOV29 INS83 INS42 MOV44 UPD42 UPD42 UPD42 UPD42 UPD39 UPD42 UPD42 UPD42 MOV39 UPD42 MOV42 INS8 UPD42 MOV43 UPD42 UPD42 INS21 INS21 UPD42 MOV42 MOV25 UPD42 INS60 INS21 MOV41 INS7 INS32 INS22 INS39 INS59 INS32 INS42 INS22 INS42 INS32 INS42 INS42 INS45 INS45 INS45 INS52 INS42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS40 UPD42 INS11 INS40 UPD42 INS42 INS32 INS40 UPD42 MOV42 MOV34 INS40 UPD42 INS52 INS42 INS42 INS42 INS22 INS27 INS39 INS42 INS40 UPD42 MOV42 UPD42 UPD42 INS52 INS42 INS45 INS22 UPD42 INS52 INS42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL83 DEL39 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL34 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL83 DEL42 DEL42 DEL34 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL83 DEL42 DEL42 DEL42 DEL32 DEL41 DEL83 DEL42 DEL42 DEL83 DEL39 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL34 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL49 DEL42 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL32 DEL21 DEL42 DEL49 DEL49 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL10 DEL50 DEL8 DEL31 DEL83 DEL42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL34 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL13 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL48 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL40 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21