Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer;
+package org.apache.hadoop.yarn.util;
+import org.apache.hadoop.yarn.api.records.LocalResourceVisibility;
-  private FsPermission cachePerms = new FsPermission((short) 0755);
+  private static final FsPermission cachePerms = new FsPermission(
+      (short) 0755);
+  static final FsPermission PUBLIC_FILE_PERMS = new FsPermission((short) 0555);
+  static final FsPermission PRIVATE_FILE_PERMS = new FsPermission(
+      (short) 0500);
+  static final FsPermission PUBLIC_DIR_PERMS = new FsPermission((short) 0755);
+  static final FsPermission PRIVATE_DIR_PERMS = new FsPermission((short) 0700);
-  FSDownload(FileContext files, UserGroupInformation ugi, Configuration conf,
+  public FSDownload(FileContext files, UserGroupInformation ugi, Configuration conf,
+      changePermissions(dFinal.getFileSystem(conf), dFinal);
-      cachePerms = null;
+  /**
+   * Recursively change permissions of all files/dirs on path based 
+   * on resource visibility.
+   * Change to 755 or 700 for dirs, 555 or 500 for files.
+   * @param fs FileSystem
+   * @param path Path to modify perms for
+   * @throws IOException
+   * @throws InterruptedException 
+   */
+  private void changePermissions(FileSystem fs, final Path path)
+      throws IOException, InterruptedException {
+    FileStatus fStatus = fs.getFileStatus(path);
+    FsPermission perm = cachePerms;
+    // set public perms as 755 or 555 based on dir or file
+    if (resource.getVisibility() == LocalResourceVisibility.PUBLIC) {
+      perm = fStatus.isDirectory() ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;
+    }
+    // set private perms as 700 or 500
+    else {
+      // PRIVATE:
+      // APPLICATION:
+      perm = fStatus.isDirectory() ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;
+    }
+    LOG.debug("Changing permissions for path " + path
+        + " to perm " + perm);
+    final FsPermission fPerm = perm;
+    if (null == userUgi) {
+      files.setPermission(path, perm);
+    }
+    else {
+      userUgi.doAs(new PrivilegedExceptionAction<Void>() {
+        public Void run() throws Exception {
+          files.setPermission(path, fPerm);
+          return null;
+        }
+      });
+    }
+    if (fStatus.isDirectory()
+        && !fStatus.isSymlink()) {
+      FileStatus[] statuses = fs.listStatus(path);
+      for (FileStatus status : statuses) {
+        changePermissions(fs, status.getPath());
+      }
+    }
+  }
+

INS26 UPD40 INS40 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS21 INS60 INS25 INS25 INS43 INS11 INS43 INS11 INS43 INS11 INS43 INS11 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS32 INS83 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS42 INS39 INS34 INS42 INS39 INS34 INS42 INS39 INS34 INS42 INS39 INS34 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS42 INS21 INS21 INS32 INS38 INS60 INS70 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS45 INS42 INS45 INS42 INS32 INS32 INS42 INS42 INS32 INS5 INS59 INS44 INS42 INS8 INS42 INS32 INS42 INS42 INS16 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS85 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS31 INS42 INS42 INS32 INS42 INS42 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS21 INS41 INS32 INS33 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL7 DEL21