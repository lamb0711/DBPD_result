HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.

+import org.mortbay.log.Log;
-  public final INode updateModificationTime(long mtime, int latestSnapshotId) 
-      throws QuotaExceededException {
+  public final INode updateModificationTime(long mtime, int latestSnapshotId) {
-  final void recordModification(int latestSnapshotId)
-      throws QuotaExceededException {
+  final void recordModification(int latestSnapshotId) {
-      BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes,
-      final boolean countDiffChange) throws QuotaExceededException {
+      BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes) {
-        removedINodes, countDiffChange);
+        removedINodes);
-        final List<INode> removedINodes, final boolean countDiffChange)
-        throws QuotaExceededException {
+        final List<INode> removedINodes) {
-          collectedBlocks, removedINodes, false);
+          collectedBlocks, removedINodes);
-        ref.addSpaceConsumed(-counts.get(Quota.NAMESPACE),
-            -counts.get(Quota.DISKSPACE), true);
+        try {
+          ref.addSpaceConsumed(-counts.get(Quota.NAMESPACE),
+              -counts.get(Quota.DISKSPACE), true);
+        } catch (QuotaExceededException e) {
+          Log.warn("Should not have QuotaExceededException");
+        }
-                collectedBlocks, removedINodes, false);
+                collectedBlocks, removedINodes);
-        BlocksMapUpdateInfo collectedBlocks, List<INode> removedINodes,
-        final boolean countDiffChange) throws QuotaExceededException {
+        BlocksMapUpdateInfo collectedBlocks, List<INode> removedINodes) {
-            collectedBlocks, removedINodes, countDiffChange);
+            collectedBlocks, removedINodes);
-          try {
-            // when calling cleanSubtree of the referred node, since we 
-            // compute quota usage updates before calling this destroy 
-            // function, we use true for countDiffChange
-            referred.cleanSubtree(snapshot, prior, collectedBlocks,
-                removedINodes, true);
-          } catch (QuotaExceededException e) {
-            LOG.error("should not exceed quota while snapshot deletion", e);
-          }
+          // when calling cleanSubtree of the referred node, since we
+          // compute quota usage updates before calling this destroy
+          // function, we use true for countDiffChange
+          referred.cleanSubtree(snapshot, prior, collectedBlocks,
+              removedINodes);

INS26 INS40 INS8 INS54 INS8 INS12 MOV21 INS44 INS8 MOV21 MOV43 INS42 INS21 INS32 INS42 INS42 INS45 DEL42 DEL43 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL9 DEL8 DEL9 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL9 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54