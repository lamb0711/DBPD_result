MAPREDUCE-3829. [Gridmix] Gridmix should give better error message when input data directory already exists and -generate option is given.(ravigummadi)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1299625 13f79535-47bb-0310-9956-ffa450edef68

+  /** Error while parsing/analyzing the arguments to Gridmix */
+  static final int ARGS_ERROR = 1;
+  /** Error while trying to start/setup the Gridmix run */
+  static final int STARTUP_FAILED_ERROR = 2;
+  /**
+   * If at least 1 distributed cache file is missing in the expected
+   * distributed cache dir, Gridmix cannot proceed with emulation of
+   * distributed cache load.
+   */
+  static final int MISSING_DIST_CACHE_FILES_ERROR = 3;
+
+
-   * Write random bytes at the path &lt;inputDir&gt;.
+   * Write random bytes at the path &lt;inputDir&gt; if needed.
+   * @return exit status
-  protected void writeInputData(long genbytes, Path inputDir)
+  protected int writeInputData(long genbytes, Path inputDir)
-    final Configuration conf = getConf();
+    if (genbytes > 0) {
+      final Configuration conf = getConf();
+
+      if (inputDir.getFileSystem(conf).exists(inputDir)) {
+        LOG.error("Gridmix input data directory " + inputDir
+                  + " already exists when -generate option is used.\n");
+        return STARTUP_FAILED_ERROR;
+      }
+
+      // configure the compression ratio if needed
+      CompressionEmulationUtil.setupDataGeneratorConfig(conf);
-    // configure the compression ratio if needed
-    CompressionEmulationUtil.setupDataGeneratorConfig(conf);
+      final GenerateData genData = new GenerateData(conf, inputDir, genbytes);
+      LOG.info("Generating " + StringUtils.humanReadableInt(genbytes) +
+               " of test data...");
+      launchGridmixJob(genData);
-    final GenerateData genData = new GenerateData(conf, inputDir, genbytes);
-    LOG.info("Generating " + StringUtils.humanReadableInt(genbytes) +
-        " of test data...");
-    launchGridmixJob(genData);
-    
-    FsShell shell = new FsShell(conf);
-    try {
-      LOG.info("Changing the permissions for inputPath " + inputDir.toString());
-      shell.run(new String[] {"-chmod","-R","777", inputDir.toString()});
-    } catch (Exception e) {
-      LOG.error("Couldnt change the file permissions " , e);
-      throw new IOException(e);
+      FsShell shell = new FsShell(conf);
+      try {
+        LOG.info("Changing the permissions for inputPath " + inputDir.toString());
+        shell.run(new String[] {"-chmod","-R","777", inputDir.toString()});
+      } catch (Exception e) {
+        LOG.error("Couldnt change the file permissions " , e);
+        throw new IOException(e);
+      }
+
+      LOG.info("Input data generation successful.");
-    
-    LOG.info("Input data generation successful.");
+
+    return 0;
+      LOG.error("Too few arguments to Gridmix.\n");
-      return 1;
+      return ARGS_ERROR;
-    
-    // Should gridmix generate distributed cache data ?
-    boolean generate = false;
+
-    userResolver = ReflectionUtils.newInstance(
-                     conf.getClass(GRIDMIX_USR_RSV, 
-                       SubmitterUserResolver.class,
-                       UserResolver.class), 
-                     conf);
+      userResolver = ReflectionUtils.newInstance(conf.getClass(GRIDMIX_USR_RSV, 
+                       SubmitterUserResolver.class, UserResolver.class), conf);
+
-          generate = true;
+          if (genbytes <= 0) {
+            LOG.error("size of input data to be generated specified using "
+                      + "-generate option should be nonnegative.\n");
+            return ARGS_ERROR;
+          }
+          LOG.error("Unknown option " + argv[i] + " specified.\n");
-          return 1;
+          return ARGS_ERROR;
-          System.err.println("\n\n" + userResolver.getClass()
-              + " needs target user list. Use -users option." + "\n\n");
+          LOG.error(userResolver.getClass()
+              + " needs target user list. Use -users option.\n");
-          return 1;
+          return ARGS_ERROR;
-      e.printStackTrace();
+      LOG.error(e.toString() + "\n");
+      if (LOG.isDebugEnabled()) {
+        e.printStackTrace();
+      }
+
-      return 1;
+      return ARGS_ERROR;
-    return start(conf, traceIn, ioPath, genbytes, userResolver, generate);
+
+    // Create <ioPath> with 777 permissions
+    final FileSystem inputFs = ioPath.getFileSystem(conf);
+    ioPath = ioPath.makeQualified(inputFs);
+    boolean succeeded = false;
+    try {
+      succeeded = FileSystem.mkdirs(inputFs, ioPath,
+                                    new FsPermission((short)0777));
+    } catch(IOException e) {
+      // No need to emit this exception message
+    } finally {
+      if (!succeeded) {
+        LOG.error("Failed creation of <ioPath> directory " + ioPath + "\n");
+        return STARTUP_FAILED_ERROR;
+      }
+    }
+
+    return start(conf, traceIn, ioPath, genbytes, userResolver);
-   * @param generate true if -generate option was specified
-      UserResolver userResolver, boolean generate)
+      UserResolver userResolver)
-    ioPath = ioPath.makeQualified(ioPath.getFileSystem(conf));
+    int exitCode = 0;
-        if (genbytes > 0) {
-          writeInputData(genbytes, inputDir);
+        exitCode = writeInputData(genbytes, inputDir);
+        if (exitCode != 0) {
+          return exitCode;
-        
+
+        boolean shouldGenerate = (genbytes > 0);
-        int exitCode = setupEmulation(conf, traceIn, scratchDir, ioPath,
-                                      generate);
+        exitCode = setupEmulation(conf, traceIn, scratchDir, ioPath,
+                                  shouldGenerate);
-        LOG.error("Startup failed", e);
+        LOG.error("Startup failed. " + e.toString() + "\n");
+        if (LOG.isDebugEnabled()) {
+          e.printStackTrace();
+        }
+        exitCode = STARTUP_FAILED_ERROR;
-    return 0;
+    return exitCode;

INS23 INS23 INS23 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 UPD39 INS8 MOV60 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS25 MOV41 INS60 INS21 INS54 INS60 INS41 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS27 MOV8 MOV8 INS83 INS43 INS59 INS7 INS8 INS12 INS8 INS39 INS59 INS42 INS42 INS34 INS25 INS21 MOV21 INS8 INS42 INS42 MOV32 INS42 INS32 UPD42 INS21 INS44 INS8 INS25 INS42 INS34 INS32 INS8 INS32 INS42 INS21 INS25 MOV21 INS41 INS42 INS42 INS42 INS7 INS43 INS42 INS38 INS8 INS32 INS42 INS42 INS21 INS41 INS42 INS42 INS45 INS32 INS32 MOV8 INS42 INS42 INS32 INS42 INS42 INS21 INS41 MOV21 INS60 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS7 INS27 UPD39 MOV39 INS59 INS7 INS25 INS21 INS42 INS42 INS27 INS25 INS8 INS32 INS45 INS43 INS11 INS42 INS42 INS27 INS42 MOV32 INS42 INS34 INS41 INS42 INS36 INS42 INS32 INS32 INS8 INS7 INS45 INS42 INS45 INS27 INS8 INS21 MOV21 INS41 INS42 INS42 INS42 INS42 INS39 INS34 INS45 INS42 INS45 INS42 MOV27 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 INS27 INS42 INS42 INS21 INS42 INS42 INS42 INS34 MOV21 INS41 INS32 INS42 UPD42 INS42 INS45 INS32 INS45 INS32 INS32 INS42 INS42 INS42 INS27 UPD45 MOV42 INS42 INS42 INS42 INS42 INS42 INS27 INS45 INS2 INS45 INS45 INS45 INS42 INS42 DEL34 DEL34 DEL41 DEL8 DEL42 DEL9 DEL7 DEL40 DEL45 DEL45 DEL34 DEL34 DEL41 DEL42 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL59 DEL60 DEL45