HDFS-6663. Admin command to track file and locations from block id.
Contributed by Chen He.

+import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockCollection;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockManager;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor;
+  public static final String DECOMMISSIONING_STATUS = "is DECOMMISSIONING";
+  public static final String DECOMMISSIONED_STATUS = "is DECOMMISSIONED";
-  private String path = "/";
+  String path = "/";
+
+  private String blockIds = null;
-      }
-      else if (key.equals("startblockafter")) {
+      } else if (key.equals("startblockafter")) {
+      } else if (key.equals("blockId")) {
+        this.blockIds = pmap.get("blockId")[0];
+   * Check block information given a blockId number
+   *
+  */
+  public void blockIdCK(String blockId) {
+
+    if(blockId == null) {
+      out.println("Please provide valid blockId!");
+      return;
+    }
+
+    BlockManager bm = namenode.getNamesystem().getBlockManager();
+    try {
+      //get blockInfo
+      Block block = new Block(Block.getBlockId(blockId));
+      //find which file this block belongs to
+      BlockInfo blockInfo = bm.getStoredBlock(block);
+      if(blockInfo == null) {
+        out.println("Block "+ blockId +" " + NONEXISTENT_STATUS);
+        LOG.warn("Block "+ blockId + " " + NONEXISTENT_STATUS);
+        return;
+      }
+      BlockCollection bc = bm.getBlockCollection(blockInfo);
+      INode iNode = (INode) bc;
+      NumberReplicas numberReplicas= bm.countNodes(block);
+      out.println("Block Id: " + blockId);
+      out.println("Block belongs to: "+iNode.getFullPathName());
+      out.println("No. of Expected Replica: " + bc.getBlockReplication());
+      out.println("No. of live Replica: " + numberReplicas.liveReplicas());
+      out.println("No. of excess Replica: " + numberReplicas.excessReplicas());
+      out.println("No. of stale Replica: " + numberReplicas.replicasOnStaleNodes());
+      out.println("No. of decommission Replica: "
+          + numberReplicas.decommissionedReplicas());
+      out.println("No. of corrupted Replica: " + numberReplicas.corruptReplicas());
+      //record datanodes that have corrupted block replica
+      Collection<DatanodeDescriptor> corruptionRecord = null;
+      if (bm.getCorruptReplicas(block) != null) {
+        corruptionRecord = bm.getCorruptReplicas(block);
+      }
+
+      //report block replicas status on datanodes
+      for(int idx = (blockInfo.numNodes()-1); idx >= 0; idx--) {
+        DatanodeDescriptor dn = blockInfo.getDatanode(idx);
+        out.print("Block replica on datanode/rack: " + dn.getHostName() +
+            dn.getNetworkLocation() + " ");
+        if (corruptionRecord != null && corruptionRecord.contains(dn)) {
+          out.print(CORRUPT_STATUS+"\t ReasonCode: "+
+            bm.getCorruptReason(block,dn));
+        } else if (dn.isDecommissioned() ){
+          out.print(DECOMMISSIONED_STATUS);
+        } else if (dn.isDecommissionInProgress()) {
+          out.print(DECOMMISSIONING_STATUS);
+        } else {
+          out.print(HEALTHY_STATUS);
+        }
+        out.print("\n");
+      }
+    } catch (Exception e){
+      String errMsg = "Fsck on blockId '" + blockId;
+      LOG.warn(errMsg, e);
+      out.println(e.getMessage());
+      out.print("\n\n" + errMsg);
+      LOG.warn("Error in looking up block", e);
+    }
+  }
+
+  /**
+      if(blockIds != null) {
+
+        String[] blocks = blockIds.split(" ");
+        StringBuilder sb = new StringBuilder();
+        sb.append("FSCK started by " +
+            UserGroupInformation.getCurrentUser() + " from " +
+            remoteAddress + " at " + new Date());
+        out.println(sb.toString());
+        sb.append(" for blockIds: \n");
+        for (String blk: blocks) {
+          if(blk == null || !blk.contains("blk_")) {
+            out.println("Incorrect blockId format: " + blk);
+            continue;
+          }
+          out.print("\n");
+          blockIdCK(blk);
+          sb.append(blk + "\n");
+        }
+        LOG.info(sb.toString());
+        namenode.getNamesystem().logFsckEvent("/", remoteAddress);
+        out.flush();
+        return;
+      }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS33 INS65 INS43 INS42 INS25 INS60 INS54 INS66 INS42 INS27 INS8 INS43 INS59 INS8 INS12 INS42 INS33 INS21 INS41 INS42 INS42 INS32 INS60 INS60 INS25 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS24 INS44 INS8 INS25 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS74 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS27 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS43 INS42 INS33 INS32 INS33 INS21 INS39 INS59 INS42 INS34 INS42 INS60 INS21 INS25 INS21 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS42 INS33 INS60 INS60 INS21 INS21 INS21 INS70 INS21 INS21 INS21 INS41 INS43 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS36 INS43 INS59 INS32 INS27 INS8 INS25 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS5 INS59 INS43 INS59 INS32 INS32 INS32 INS44 INS42 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS32 INS21 INS32 INS8 INS25 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS45 INS42 INS43 INS85 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS45 INS43 INS42 INS25 INS21 INS21 INS21 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS45 INS32 INS32 INS45 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS45 INS43 INS45 INS32 INS45 INS42 INS45 INS14 INS42 INS42 INS42 INS27 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS43 INS27 INS38 INS21 INS18 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS33 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS27 INS45 INS42 INS25 INS32 INS8 INS42 INS42 INS45 INS21 INS7 INS22 INS2 INS52 INS42 INS32 INS34 INS42 INS42 INS45 DEL83