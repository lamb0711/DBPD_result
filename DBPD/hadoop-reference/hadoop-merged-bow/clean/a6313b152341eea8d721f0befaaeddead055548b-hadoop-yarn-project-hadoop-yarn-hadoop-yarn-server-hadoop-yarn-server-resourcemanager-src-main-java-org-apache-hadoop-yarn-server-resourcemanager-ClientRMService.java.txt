Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1549699 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import java.util.Map;
+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
-    List<ApplicationReport> reports = new ArrayList<ApplicationReport>();
-    long count = 0;
-    for (RMApp application : this.rmContext.getRMApps().values()) {
-      if (++count > limit) {
-        break;
+    final Map<ApplicationId, RMApp> apps = rmContext.getRMApps();
+    Iterator<RMApp> appsIter;
+    // If the query filters by queues, we can avoid considering apps outside
+    // of those queues by asking the scheduler for the apps in those queues.
+    if (queues != null && !queues.isEmpty()) {
+      // Construct an iterator over apps in given queues
+      // Collect list of lists to avoid copying all apps
+      final List<List<ApplicationAttemptId>> queueAppLists =
+          new ArrayList<List<ApplicationAttemptId>>();
+      for (String queue : queues) {
+        List<ApplicationAttemptId> appsInQueue = scheduler.getAppsInQueue(queue);
+        if (appsInQueue != null && !appsInQueue.isEmpty()) {
+          queueAppLists.add(appsInQueue);
+        }
+      appsIter = new Iterator<RMApp>() {
+        Iterator<List<ApplicationAttemptId>> appListIter = queueAppLists.iterator();
+        Iterator<ApplicationAttemptId> schedAppsIter;
+
+        @Override
+        public boolean hasNext() {
+          // Because queueAppLists has no empty lists, hasNext is whether the
+          // current list hasNext or whether there are any remaining lists
+          return (schedAppsIter != null && schedAppsIter.hasNext())
+              || appListIter.hasNext();
+        }
+        @Override
+        public RMApp next() {
+          if (schedAppsIter == null || !schedAppsIter.hasNext()) {
+            schedAppsIter = appListIter.next().iterator();
+          }
+          return apps.get(schedAppsIter.next().getApplicationId());
+        }
+        @Override
+        public void remove() {
+          throw new UnsupportedOperationException("Remove not supported");
+        }
+      };
+    } else {
+      appsIter = apps.values().iterator();
+    }
+    
+    List<ApplicationReport> reports = new ArrayList<ApplicationReport>();
+    while (appsIter.hasNext() && reports.size() < limit) {
+      RMApp application = appsIter.next();
-      if (queues != null && !queues.isEmpty() &&
-          !queues.contains(application.getQueue())) {
-        continue;
-      }
-
-        Collection<RMApp> apps = this.rmContext.getRMApps().values();
-        appReports = new ArrayList<ApplicationReport>(
-            apps.size());
-        for (RMApp app : apps) {
-          if (app.getQueue().equals(queueInfo.getQueueName())) {
-            appReports.add(app.createAndGetApplicationReport(null, true));
-          }
+        List<ApplicationAttemptId> apps =
+            scheduler.getAppsInQueue(request.getQueueName());
+        appReports = new ArrayList<ApplicationReport>(apps.size());
+        for (ApplicationAttemptId app : apps) {
+          RMApp rmApp = rmContext.getRMApps().get(app.getApplicationId());
+          appReports.add(rmApp.createAndGetApplicationReport(null, true));

INS26 INS26 INS26 INS40 INS40 INS40 INS60 INS60 INS25 INS61 INS83 INS74 INS59 INS74 INS59 MOV27 INS8 INS8 INS27 MOV8 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS42 MOV60 INS70 INS21 INS21 INS32 INS27 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS74 MOV44 INS42 INS8 INS7 INS7 INS42 INS42 INS32 INS42 INS43 INS59 INS43 INS74 INS42 INS14 INS43 INS42 INS60 INS25 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS74 INS42 INS74 INS59 INS27 INS8 INS74 INS1 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD74 INS42 INS42 INS43 INS74 INS43 INS43 INS42 INS32 INS27 INS38 INS21 INS43 INS43 INS23 INS23 INS31 INS31 INS31 INS42 MOV42 UPD43 UPD43 UPD43 INS60 MOV21 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS42 INS74 INS59 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 UPD42 INS42 UPD42 MOV42 INS32 UPD42 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS32 INS43 INS43 INS42 INS42 INS41 INS42 INS42 INS25 INS41 INS42 INS53 UPD42 MOV42 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS27 INS27 INS8 INS32 INS14 MOV32 UPD42 MOV42 MOV32 UPD42 INS42 INS42 INS36 INS32 INS27 INS38 INS21 INS42 INS42 MOV32 INS43 INS45 UPD42 UPD42 UPD42 UPD42 INS27 INS42 INS42 INS42 INS33 INS32 INS7 INS32 UPD42 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 DEL39 DEL42 DEL34 DEL42 DEL52 DEL42 DEL22 DEL42 DEL38 DEL42 DEL27 DEL10 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL38 DEL27 DEL18 DEL8 DEL25 DEL32 DEL70 DEL52 DEL42 DEL22 DEL32 DEL32 DEL8 DEL25