YARN-2604. Scheduler should consider max-allocation-* in conjunction with the largest node. (Robert Kanter via kasha)

+import java.util.concurrent.locks.ReentrantReadWriteLock;
-  protected Resource maximumAllocation;
+  private Resource maximumAllocation;
+  private Resource configuredMaximumAllocation;
+  private int maxNodeMemory = -1;
+  private int maxNodeVCores = -1;
+  private ReentrantReadWriteLock maximumAllocationLock =
+      new ReentrantReadWriteLock();
+  private boolean useConfiguredMaximumAllocationOnly = true;
+  private long configuredMaximumAllocationWaitTime;
+    configuredMaximumAllocationWaitTime =
+        conf.getLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,
+          YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS);
-    return maximumAllocation;
+    Resource maxResource;
+    ReentrantReadWriteLock.ReadLock readLock = maximumAllocationLock.readLock();
+    readLock.lock();
+    try {
+      if (useConfiguredMaximumAllocationOnly) {
+        if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()
+            > configuredMaximumAllocationWaitTime) {
+          useConfiguredMaximumAllocationOnly = false;
+        }
+        maxResource = Resources.clone(configuredMaximumAllocation);
+      } else {
+        maxResource = Resources.clone(maximumAllocation);
+      }
+    } finally {
+      readLock.unlock();
+    }
+    return maxResource;
+  }
+
+  protected void initMaximumResourceCapability(Resource maximumAllocation) {
+    ReentrantReadWriteLock.WriteLock writeLock =
+        maximumAllocationLock.writeLock();
+    writeLock.lock();
+    try {
+      if (this.configuredMaximumAllocation == null) {
+        this.configuredMaximumAllocation = Resources.clone(maximumAllocation);
+        this.maximumAllocation = Resources.clone(maximumAllocation);
+      }
+    } finally {
+      writeLock.unlock();
+    }
+
+  protected void updateMaximumAllocation(SchedulerNode node, boolean add) {
+    ReentrantReadWriteLock.WriteLock writeLock =
+        maximumAllocationLock.writeLock();
+    writeLock.lock();
+    try {
+      if (add) { // added node
+        int nodeMemory = node.getAvailableResource().getMemory();
+        if (nodeMemory > maxNodeMemory) {
+          maxNodeMemory = nodeMemory;
+          maximumAllocation.setMemory(Math.min(
+              configuredMaximumAllocation.getMemory(), maxNodeMemory));
+        }
+        int nodeVCores = node.getAvailableResource().getVirtualCores();
+        if (nodeVCores > maxNodeVCores) {
+          maxNodeVCores = nodeVCores;
+          maximumAllocation.setVirtualCores(Math.min(
+              configuredMaximumAllocation.getVirtualCores(), maxNodeVCores));
+        }
+      } else {  // removed node
+        if (maxNodeMemory == node.getAvailableResource().getMemory()) {
+          maxNodeMemory = -1;
+        }
+        if (maxNodeVCores == node.getAvailableResource().getVirtualCores()) {
+          maxNodeVCores = -1;
+        }
+        // We only have to iterate through the nodes if the current max memory
+        // or vcores was equal to the removed node's
+        if (maxNodeMemory == -1 || maxNodeVCores == -1) {
+          for (Map.Entry<NodeId, N> nodeEntry : nodes.entrySet()) {
+            int nodeMemory =
+                nodeEntry.getValue().getAvailableResource().getMemory();
+            if (nodeMemory > maxNodeMemory) {
+              maxNodeMemory = nodeMemory;
+            }
+            int nodeVCores =
+                nodeEntry.getValue().getAvailableResource().getVirtualCores();
+            if (nodeVCores > maxNodeVCores) {
+              maxNodeVCores = nodeVCores;
+            }
+          }
+          if (maxNodeMemory == -1) {  // no nodes
+            maximumAllocation.setMemory(configuredMaximumAllocation.getMemory());
+          } else {
+            maximumAllocation.setMemory(
+                Math.min(configuredMaximumAllocation.getMemory(), maxNodeMemory));
+          }
+          if (maxNodeVCores == -1) {  // no nodes
+            maximumAllocation.setVirtualCores(configuredMaximumAllocation.getVirtualCores());
+          } else {
+            maximumAllocation.setVirtualCores(
+                Math.min(configuredMaximumAllocation.getVirtualCores(), maxNodeVCores));
+          }
+        }
+      }
+    } finally {
+      writeLock.unlock();
+    }
+  }

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 UPD83 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS38 INS42 INS38 INS42 INS42 INS14 INS42 INS9 INS42 INS21 INS60 INS60 INS21 INS54 INS43 INS42 INS60 INS21 INS54 INS43 INS42 INS39 INS42 INS60 INS21 INS54 INS34 INS34 INS43 INS7 INS43 INS59 INS43 INS59 INS32 INS8 INS8 UPD42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS25 INS21 INS40 INS42 INS32 INS42 INS42 INS25 INS21 INS40 INS42 INS32 INS42 INS42 INS25 INS21 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS8 INS8 INS32 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS42 INS8 INS8 INS32 INS25 INS21 INS21 INS42 INS42 INS22 INS33 INS21 INS21 INS42 INS42 INS60 INS25 INS60 INS25 INS25 INS25 INS25 INS42 INS42 INS27 INS8 INS7 INS7 INS52 INS42 INS7 INS7 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS42 INS21 INS42 INS32 INS42 INS32 INS22 INS32 INS22 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS32 INS21 INS42 INS32 INS21 INS27 INS27 INS70 INS25 INS25 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS32 INS32 INS42 INS7 INS32 INS32 INS42 INS7 INS32 INS42 INS7 INS42 INS38 INS42 INS38 INS44 INS32 INS8 INS27 INS8 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS38 INS34 INS34 INS74 INS42 INS42 INS42 INS60 INS25 INS60 INS25 INS42 INS38 INS21 INS21 INS42 INS38 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS34 INS34 INS43 INS43 INS43 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS34 INS32 INS32 INS34 INS32 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS7 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42