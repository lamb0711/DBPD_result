Merge branch 'trunk' into MR-2841

+import java.util.concurrent.atomic.AtomicLong;
+  // Disk space reserved for open blocks.
+  private AtomicLong reservedForRbw;
+
+    this.reservedForRbw = new AtomicLong(0L);
-    long remaining = getCapacity()-getDfsUsed();
+    long remaining = getCapacity() - getDfsUsed() - reservedForRbw.get();
+
+  @VisibleForTesting
+  public long getReservedForRbw() {
+    return reservedForRbw.get();
+  }
+  @Override
+  public void reserveSpaceForRbw(long bytesToReserve) {
+    if (bytesToReserve != 0) {
+      if (FsDatasetImpl.LOG.isDebugEnabled()) {
+        FsDatasetImpl.LOG.debug("Reserving " + bytesToReserve + " on volume " + getBasePath());
+      }
+      reservedForRbw.addAndGet(bytesToReserve);
+    }
+  }
+
+  @Override
+  public void releaseReservedSpace(long bytesToRelease) {
+    if (bytesToRelease != 0) {
+      if (FsDatasetImpl.LOG.isDebugEnabled()) {
+        FsDatasetImpl.LOG.debug("Releasing " + bytesToRelease + " on volume " + getBasePath());
+      }
+
+      long oldReservation, newReservation;
+      do {
+        oldReservation = reservedForRbw.get();
+        newReservation = oldReservation - bytesToRelease;
+        if (newReservation < 0) {
+          // Failsafe, this should never occur in practice, but if it does we don't
+          // want to start advertising more space than we have available.
+          newReservation = 0;
+        }
+      } while (!reservedForRbw.compareAndSet(oldReservation, newReservation));
+    }
+  }
+
+    reserveSpaceForRbw(b.getNumBytes());
-  File addBlock(String bpid, Block b, File f) throws IOException {
-    return getBlockPoolSlice(bpid).addBlock(b, f);
+  /**
+   *
+   * @param bytesReservedForRbw Space that was reserved during
+   *     block creation. Now that the block is being finalized we
+   *     can free up this space.
+   * @return
+   * @throws IOException
+   */
+  File addFinalizedBlock(String bpid, Block b,
+                         File f, long bytesReservedForRbw)
+      throws IOException {
+    releaseReservedSpace(bytesReservedForRbw);
+    return getBlockPoolSlice(bpid).addFinalizedBlock(b, f);

INS26 INS40 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS29 UPD42 INS44 INS42 INS42 INS21 INS42 INS41 INS42 INS39 INS42 INS25 INS42 INS39 INS42 INS25 INS21 INS65 INS65 INS65 INS39 INS42 INS21 INS7 INS32 INS27 INS8 INS27 INS8 INS32 INS42 INS66 INS66 INS66 INS42 INS32 INS22 INS14 INS42 INS42 INS42 INS34 INS25 INS21 INS42 INS34 INS25 INS60 INS19 INS42 INS32 INS42 INS42 UPD42 INS52 INS42 INS43 INS34 INS32 INS32 INS8 INS32 INS32 INS8 INS39 INS59 INS59 INS8 INS38 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS21 INS21 INS25 INS32 INS32 INS32 INS7 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS40 INS42 INS27 INS42 INS32 INS42 INS27 INS42 INS34 INS21 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS34