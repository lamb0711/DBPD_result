HDFS-4222. NN is unresponsive and loses heartbeats from DNs when configured to use LDAP and LDAP has issues. Contributed by Xiaobo Peng and Suresh Srinivas.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1448801 13f79535-47bb-0310-9956-ffa450edef68

+  private final String fsOwnerShortUserName;
+      this.fsOwnerShortUserName = fsOwner.getShortUserName();
+    checkSuperuserPrivilege();
-      checkSuperuserPrivilege();
+    FSPermissionChecker pc = getPermissionChecker();
-      checkOwner(src);
+      checkOwner(pc, src);
+    FSPermissionChecker pc = getPermissionChecker();
-      FSPermissionChecker pc = checkOwner(src);
-      if (!pc.isSuper) {
-        if (username != null && !pc.user.equals(username)) {
-          throw new AccessControlException("Non-super user cannot change owner.");
+      checkOwner(pc, src);
+      if (!pc.isSuperUser()) {
+        if (username != null && !pc.getUser().equals(username)) {
+          throw new AccessControlException("Non-super user cannot change owner");
-          throw new AccessControlException("User does not belong to " + group
-            + " .");
+          throw new AccessControlException("User does not belong to " + group);
+    FSPermissionChecker pc = getPermissionChecker();
-      return getBlockLocationsInt(src, offset, length, doAccessTime,
+      return getBlockLocationsInt(pc, src, offset, length, doAccessTime,
-  private LocatedBlocks getBlockLocationsInt(String src, long offset, long length,
-      boolean doAccessTime, boolean needBlockToken, boolean checkSafeMode)
+  private LocatedBlocks getBlockLocationsInt(FSPermissionChecker pc,
+      String src, long offset, long length, boolean doAccessTime,
+      boolean needBlockToken, boolean checkSafeMode)
-      checkPathAccess(src, FsAction.READ);
+      checkPathAccess(pc, src, FsAction.READ);
+    FSPermissionChecker pc = getPermissionChecker();
-      concatInternal(target, srcs);
+      concatInternal(pc, target, srcs);
-  private void concatInternal(String target, String [] srcs) 
+  private void concatInternal(FSPermissionChecker pc, String target, String [] srcs) 
-      checkPathAccess(target, FsAction.WRITE);
+      checkPathAccess(pc, target, FsAction.WRITE);
-        checkPathAccess(aSrc, FsAction.READ); // read the file
-        checkParentAccess(aSrc, FsAction.WRITE); // for delete 
+        checkPathAccess(pc, aSrc, FsAction.READ); // read the file
+        checkParentAccess(pc, aSrc, FsAction.WRITE); // for delete 
+    FSPermissionChecker pc = getPermissionChecker();
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
-      createSymlinkInternal(target, link, dirPerms, createParent);
+      createSymlinkInternal(pc, target, link, dirPerms, createParent);
-  private void createSymlinkInternal(String target, String link,
-      PermissionStatus dirPerms, boolean createParent)
+  private void createSymlinkInternal(FSPermissionChecker pc, String target,
+      String link, PermissionStatus dirPerms, boolean createParent)
-      checkAncestorAccess(link, FsAction.WRITE);
+      checkAncestorAccess(pc, link, FsAction.WRITE);
-
+    FSPermissionChecker pc = getPermissionChecker();
-
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
-        checkTraverse(filename);
+        checkTraverse(pc, filename);
+    FSPermissionChecker pc = getPermissionChecker();
-
-      startFileInternal(src, permissions, holder, clientMachine, flag,
+      startFileInternal(pc, src, permissions, holder, clientMachine, flag,
-  private LocatedBlock startFileInternal(String src,
+  private LocatedBlock startFileInternal(FSPermissionChecker pc, String src,
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
-        checkAncestorAccess(src, FsAction.WRITE);
+        checkAncestorAccess(pc, src, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
-        checkPathAccess(src, FsAction.WRITE);
+        checkPathAccess(pc, src, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
-      lb = startFileInternal(src, null, holder, clientMachine, 
+      lb = startFileInternal(pc, src, null, holder, clientMachine, 
+    FSPermissionChecker pc = getPermissionChecker();
-      status = renameToInternal(src, dst);
+      status = renameToInternal(pc, src, dst);
-  private boolean renameToInternal(String src, String dst)
+  private boolean renameToInternal(FSPermissionChecker pc, String src, String dst)
-      checkParentAccess(src, FsAction.WRITE);
-      checkAncestorAccess(actualdst, FsAction.WRITE);
+      checkParentAccess(pc, src, FsAction.WRITE);
+      checkAncestorAccess(pc, actualdst, FsAction.WRITE);
+    FSPermissionChecker pc = getPermissionChecker();
-
-      renameToInternal(src, dst, options);
+      renameToInternal(pc, src, dst, options);
-  private void renameToInternal(String src, String dst,
+  private void renameToInternal(FSPermissionChecker pc, String src, String dst,
-      checkParentAccess(src, FsAction.WRITE);
-      checkAncestorAccess(dst, FsAction.WRITE);
+      checkParentAccess(pc, src, FsAction.WRITE);
+      checkAncestorAccess(pc, dst, FsAction.WRITE);
+  private FSPermissionChecker getPermissionChecker()
+      throws AccessControlException {
+    return new FSPermissionChecker(fsOwnerShortUserName, supergroup);
+  }
-
+    FSPermissionChecker pc = getPermissionChecker();
-        checkPermission(src, false, null, FsAction.WRITE, null, FsAction.ALL);
+        checkPermission(pc, src, false, null, FsAction.WRITE, null, FsAction.ALL);
-
+    FSPermissionChecker pc = getPermissionChecker();
-
-        checkTraverse(src);
+        checkTraverse(pc, src);
+    FSPermissionChecker pc = getPermissionChecker();
-
-      status = mkdirsInternal(src, permissions, createParent);
+      status = mkdirsInternal(pc, src, permissions, createParent);
-  private boolean mkdirsInternal(String src,
+  private boolean mkdirsInternal(FSPermissionChecker pc, String src,
-      checkTraverse(src);
+      checkTraverse(pc, src);
-      checkAncestorAccess(src, FsAction.WRITE);
+      checkAncestorAccess(pc, src, FsAction.WRITE);
+    FSPermissionChecker pc = new FSPermissionChecker(fsOwnerShortUserName,
+        supergroup);
-
-        checkPermission(src, false, null, null, null, FsAction.READ_EXECUTE);
+        checkPermission(pc, src, false, null, null, null, FsAction.READ_EXECUTE);
+    checkSuperuserPrivilege();
-      if (isPermissionEnabled) {
-        checkSuperuserPrivilege();
-      }
+    FSPermissionChecker pc = getPermissionChecker();
-          checkPathAccess(src, FsAction.READ_EXECUTE);
+          checkPathAccess(pc, src, FsAction.READ_EXECUTE);
-          checkTraverse(src);
+          checkTraverse(pc, src);
+    checkSuperuserPrivilege();
-      checkSuperuserPrivilege();
+    checkSuperuserPrivilege();
-      checkSuperuserPrivilege();
+    checkSuperuserPrivilege();
-      checkSuperuserPrivilege();
+    checkSuperuserPrivilege();
-      checkSuperuserPrivilege();
-  private FSPermissionChecker checkOwner(String path
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, true, null, null, null, null);
+  private void checkOwner(FSPermissionChecker pc, String path)
+      throws AccessControlException, UnresolvedLinkException {
+    checkPermission(pc, path, true, null, null, null, null);
-  private FSPermissionChecker checkPathAccess(String path, FsAction access
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, null, null, access, null);
+  private void checkPathAccess(FSPermissionChecker pc,
+      String path, FsAction access) throws AccessControlException,
+      UnresolvedLinkException {
+    checkPermission(pc, path, false, null, null, access, null);
-  private FSPermissionChecker checkParentAccess(String path, FsAction access
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, null, access, null, null);
+  private void checkParentAccess(FSPermissionChecker pc,
+      String path, FsAction access) throws AccessControlException,
+      UnresolvedLinkException {
+    checkPermission(pc, path, false, null, access, null, null);
-  private FSPermissionChecker checkAncestorAccess(String path, FsAction access
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, access, null, null, null);
+  private void checkAncestorAccess(FSPermissionChecker pc,
+      String path, FsAction access) throws AccessControlException,
+      UnresolvedLinkException {
+    checkPermission(pc, path, false, access, null, null, null);
-  private FSPermissionChecker checkTraverse(String path
-      ) throws AccessControlException, UnresolvedLinkException {
-    return checkPermission(path, false, null, null, null, null);
+  private void checkTraverse(FSPermissionChecker pc, String path)
+      throws AccessControlException, UnresolvedLinkException {
+    checkPermission(pc, path, false, null, null, null, null);
-  public void checkSuperuserPrivilege() throws AccessControlException {
+  public void checkSuperuserPrivilege()
+      throws AccessControlException {
-      FSPermissionChecker.checkSuperuserPrivilege(fsOwner, supergroup);
+      FSPermissionChecker pc = getPermissionChecker();
+      pc.checkSuperuserPrivilege();
-   * Check whether current user have permissions to access the path.
-   * For more details of the parameters, see
-   * {@link FSPermissionChecker#checkPermission(String, INodeDirectory, boolean, FsAction, FsAction, FsAction, FsAction)}.
+   * Check whether current user have permissions to access the path. For more
+   * details of the parameters, see
+   * {@link FSPermissionChecker#checkPermission()}.
-  private FSPermissionChecker checkPermission(String path, boolean doCheckOwner,
-      FsAction ancestorAccess, FsAction parentAccess, FsAction access,
-      FsAction subAccess) throws AccessControlException, UnresolvedLinkException {
-    FSPermissionChecker pc = new FSPermissionChecker(
-        fsOwner.getShortUserName(), supergroup);
-    if (!pc.isSuper) {
+  private void checkPermission(FSPermissionChecker pc,
+      String path, boolean doCheckOwner, FsAction ancestorAccess,
+      FsAction parentAccess, FsAction access, FsAction subAccess)
+      throws AccessControlException, UnresolvedLinkException {
+    if (!pc.isSuperUser()) {
-        pc.checkPermission(path, dir.rootDir, doCheckOwner,
-            ancestorAccess, parentAccess, access, subAccess);
+        pc.checkPermission(path, dir.rootDir, doCheckOwner, ancestorAccess,
+            parentAccess, access, subAccess);
-      } 
+      }
-    return pc;
-
+  
-
+    checkSuperuserPrivilege();
-
-      checkSuperuserPrivilege();

INS23 INS31 INS83 INS83 MOV43 INS59 INS44 INS44 INS44 INS44 INS44 INS44 INS83 MOV43 INS42 MOV43 INS8 INS44 INS39 INS44 MOV44 MOV43 MOV43 INS39 INS44 MOV44 MOV44 INS39 INS44 MOV44 MOV43 MOV43 INS39 INS44 MOV44 MOV44 INS43 MOV43 INS39 INS44 MOV44 MOV43 MOV43 INS39 INS44 INS42 MOV21 INS60 INS60 INS60 INS43 INS42 INS60 INS43 INS42 INS60 INS60 INS43 INS42 INS60 INS60 INS60 INS43 INS42 INS60 INS60 INS60 INS43 INS42 INS60 INS43 INS42 INS41 INS60 INS60 INS60 INS43 INS42 INS60 MOV21 INS60 MOV21 MOV21 MOV21 MOV21 MOV43 INS42 INS21 MOV43 INS42 INS21 MOV43 INS42 INS21 MOV43 INS42 INS42 INS21 MOV43 INS42 INS21 MOV43 INS42 MOV21 INS43 INS59 MOV43 INS59 INS43 INS59 INS42 INS43 INS59 INS42 INS43 INS59 INS43 INS59 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS43 INS59 INS42 INS14 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS32 UPD66 UPD66 INS21 INS42 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 MOV42 INS42 MOV42 MOV9 MOV33 MOV33 MOV33 MOV33 MOV42 INS42 MOV42 MOV9 MOV33 MOV33 MOV42 MOV33 MOV42 INS42 MOV42 MOV9 MOV33 MOV42 MOV33 MOV33 MOV42 INS42 MOV42 MOV9 MOV42 MOV33 MOV33 MOV33 MOV42 INS42 MOV42 MOV9 MOV33 MOV33 MOV33 MOV33 INS60 INS32 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 MOV43 INS59 INS42 INS42 INS22 MOV32 INS42 MOV42 INS42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS52 INS42 INS42 INS42 INS8 MOV8 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 MOV43 INS45 INS27 INS42 INS42 INS42 INS42 INS45 INS42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL40 DEL45 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL42 DEL8 DEL25 DEL32 DEL41 DEL32 DEL41 DEL32 DEL41 DEL32 DEL41 DEL32 DEL41 DEL42 DEL42 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL42 DEL14 DEL59 DEL60 DEL40 DEL42 DEL41