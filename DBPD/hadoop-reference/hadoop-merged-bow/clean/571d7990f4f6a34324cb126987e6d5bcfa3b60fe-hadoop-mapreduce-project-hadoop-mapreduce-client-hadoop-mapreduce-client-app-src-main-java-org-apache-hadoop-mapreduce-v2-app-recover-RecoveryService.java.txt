Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import org.apache.hadoop.mapreduce.OutputCommitter;
+import org.apache.hadoop.mapreduce.TaskAttemptContext;
+import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl;
+import org.apache.hadoop.mapreduce.v2.api.records.AMInfo;
+import org.apache.hadoop.mapreduce.v2.app.job.event.JobDiagnosticsUpdateEvent;
+import org.apache.hadoop.mapreduce.v2.app.job.event.JobEvent;
+import org.apache.hadoop.mapreduce.v2.app.job.event.JobEventType;
+import org.apache.hadoop.mapreduce.v2.app.launcher.ContainerLauncherEvent;
+import org.apache.hadoop.mapreduce.v2.util.MRBuilderUtils;
+import org.apache.hadoop.yarn.util.BuilderUtils;
+import org.apache.hadoop.yarn.util.ConverterUtils;
-//change job output committer to have 
-//    - atomic job output promotion
-//    - recover output of completed tasks
+  private final OutputCommitter committer;
-      Clock clock) {
+      Clock clock, OutputCommitter committer) {
+    this.committer = committer;
-      if (completedTasks.size() > 0) {
-        recoveryMode = true;
-        LOG.info("SETTING THE RECOVERY MODE TO TRUE. NO OF COMPLETED TASKS " + 
-            "TO RECOVER " + completedTasks.size());
-        LOG.info("Job launch time " + jobInfo.getLaunchTime());
-        clock.setTime(jobInfo.getLaunchTime());
-      }
-    } catch (IOException e) {
+    } catch (Exception e) {
-          + "Starting afresh.");
+          + "Starting afresh.", e);
+    }
+    if (completedTasks.size() > 0) {
+      recoveryMode = true;
+      LOG.info("SETTING THE RECOVERY MODE TO TRUE. NO OF COMPLETED TASKS "
+          + "TO RECOVER " + completedTasks.size());
+      LOG.info("Job launch time " + jobInfo.getLaunchTime());
+      clock.setTime(jobInfo.getLaunchTime());
+  @Override
+  public List<AMInfo> getAMInfos() {
+    if (jobInfo == null || jobInfo.getAMInfos() == null) {
+      return new LinkedList<AMInfo>();
+    }
+    List<AMInfo> amInfos = new LinkedList<AMInfo>();
+    for (org.apache.hadoop.mapreduce.jobhistory.JobHistoryParser.AMInfo jhAmInfo : jobInfo
+        .getAMInfos()) {
+      AMInfo amInfo =
+          MRBuilderUtils.newAMInfo(jhAmInfo.getAppAttemptId(),
+              jhAmInfo.getStartTime(), jhAmInfo.getContainerId(),
+              jhAmInfo.getNodeManagerHost(), jhAmInfo.getNodeManagerPort(),
+              jhAmInfo.getNodeManagerHttpPort());
+
+      amInfos.add(amInfo);
+    }
+    return amInfos;
+  }
+
-        //TODO need to get the real port number MAPREDUCE-2666
-        actualHandler.handle(new TaskAttemptContainerLaunchedEvent(aId, -1));
+        actualHandler.handle(new TaskAttemptContainerLaunchedEvent(aId,
+            attInfo.getShufflePort()));
+          //recover the task output
+          TaskAttemptContext taskContext = new TaskAttemptContextImpl(getConfig(),
+              attInfo.getAttemptId());
+          try {
+            committer.recoverTask(taskContext);
+          } catch (IOException e) {
+            actualHandler.handle(new JobDiagnosticsUpdateEvent(
+                aId.getTaskId().getJobId(), "Error in recovering task output " + 
+                e.getMessage()));
+            actualHandler.handle(new JobEvent(aId.getTaskId().getJobId(),
+                JobEventType.INTERNAL_ERROR));
+          }
+          LOG.info("Recovered output from task attempt " + attInfo.getAttemptId());
+          
+      else if (event.getType() == 
+        ContainerLauncher.EventType.CONTAINER_REMOTE_CLEANUP) {
+        TaskAttemptId aId = ((ContainerLauncherEvent) event)
+          .getTaskAttemptID();
+        actualHandler.handle(
+           new TaskAttemptEvent(aId,
+                TaskAttemptEventType.TA_CONTAINER_CLEANED));
+        return;
+      }
+
-      taskAttemptStatus.diagnosticInfo = "";
-      ContainerId cId = recordFactory
-          .newRecordInstance(ContainerId.class);
-      Container container = recordFactory
-          .newRecordInstance(Container.class);
-      container.setId(cId);
-      container.setNodeId(recordFactory
-          .newRecordInstance(NodeId.class));
-      container.setContainerToken(null);
-      container.setNodeHttpAddress(attemptInfo.getHostname() + ":" + 
-          attemptInfo.getHttpPort());
+      ContainerId cId = attemptInfo.getContainerId();
+
+      NodeId nodeId = ConverterUtils.toNodeId(attemptInfo.getHostname());
+      // Resource/Priority/ApplicationACLs are only needed while launching the
+      // container on an NM, these are already completed tasks, so setting them
+      // to null
+      Container container = BuilderUtils.newContainer(cId, nodeId,
+          attemptInfo.getTrackerName() + ":" + attemptInfo.getHttpPort(),
+          null, null, null);
-          container));
+          container, null));

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS44 MOV8 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS43 INS42 INS21 MOV21 INS54 INS42 INS43 INS43 INS25 INS60 INS70 INS41 INS42 INS7 INS8 INS12 INS42 INS42 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS42 INS60 INS22 INS42 MOV21 INS44 INS8 INS27 INS27 INS41 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS21 MOV43 MOV43 MOV43 INS59 INS52 INS42 INS43 INS42 MOV21 INS21 INS42 INS33 INS32 INS33 INS14 INS42 INS42 INS74 INS40 INS43 INS59 INS32 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS33 INS33 INS33 INS33 INS42 INS42 MOV27 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV45 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 UPD42 MOV42 UPD42 MOV42 INS27 INS8 INS60 INS54 INS21 INS32 INS40 INS60 INS21 INS41 INS43 INS59 INS8 INS12 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS14 INS21 MOV44 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS43 INS32 INS32 INS32 INS21 INS21 INS45 INS32 INS36 INS42 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS43 INS32 INS27 INS43 INS32 INS40 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL34 DEL38 DEL40 DEL45 DEL7 DEL21 DEL42 DEL43 DEL57 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL21 DEL42 DEL57 DEL32 DEL32 DEL21 DEL33 DEL32 DEL21 DEL42 DEL42 DEL27 DEL32 DEL21