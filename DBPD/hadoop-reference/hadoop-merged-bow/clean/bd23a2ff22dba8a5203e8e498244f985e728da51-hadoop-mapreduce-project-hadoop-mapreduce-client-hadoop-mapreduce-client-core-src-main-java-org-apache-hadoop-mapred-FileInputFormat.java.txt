MAPREDUCE-5896. InputSplits should indicate which locations have the block cached in memory. (Sandy Ryza via kasha)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603670 13f79535-47bb-0310-9956-ffa450edef68

+  
+  /**
+   * A factory that makes the split for this class. It can be overridden
+   * by sub-classes to make sub-types
+   */
+  protected FileSplit makeSplit(Path file, long start, long length, 
+                                String[] hosts, String[] inMemoryHosts) {
+    return new FileSplit(file, start, length, hosts, inMemoryHosts);
+  }
-            String[] splitHosts = getSplitHosts(blkLocations,
+            String[][] splitHosts = getSplitHostsAndCachedHosts(blkLocations,
-                splitHosts));
+                splitHosts[0], splitHosts[1]));
-            String[] splitHosts = getSplitHosts(blkLocations, length
+            String[][] splitHosts = getSplitHostsAndCachedHosts(blkLocations, length
-                splitHosts));
+                splitHosts[0], splitHosts[1]));
-          String[] splitHosts = getSplitHosts(blkLocations,0,length,clusterMap);
-          splits.add(makeSplit(path, 0, length, splitHosts));
+          String[][] splitHosts = getSplitHostsAndCachedHosts(blkLocations,0,length,clusterMap);
+          splits.add(makeSplit(path, 0, length, splitHosts[0], splitHosts[1]));
-   * @return array of hosts that contribute most to this split
+   * @return an array of hosts that contribute most to this split
+      long offset, long splitSize, NetworkTopology clusterMap) throws IOException {
+    return getSplitHostsAndCachedHosts(blkLocations, offset, splitSize,
+        clusterMap)[0];
+  }
+  
+  /** 
+   * This function identifies and returns the hosts that contribute 
+   * most for a given split. For calculating the contribution, rack
+   * locality is treated on par with host locality, so hosts from racks
+   * that contribute the most are preferred over hosts on racks that 
+   * contribute less
+   * @param blkLocations The list of block locations
+   * @param offset 
+   * @param splitSize 
+   * @return two arrays - one of hosts that contribute most to this split, and
+   *    one of hosts that contribute most to this split that have the data
+   *    cached on them
+   * @throws IOException
+   */
+  private String[][] getSplitHostsAndCachedHosts(BlockLocation[] blkLocations, 
-      return blkLocations[startIndex].getHosts();
+      return new String[][] { blkLocations[startIndex].getHosts(),
+          blkLocations[startIndex].getCachedHosts() };
-    return identifyHosts(allTopos.length, racksMap);
+    // We don't yet support cached hosts when bytesInThisBlock > splitSize
+    return new String[][] { identifyHosts(allTopos.length, racksMap),
+        new String[0]};

INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS8 MOV29 INS83 MOV5 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 UPD83 INS5 UPD42 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 MOV5 INS42 MOV5 INS42 INS41 INS5 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS85 INS85 INS66 INS66 INS42 INS14 UPD66 INS43 INS85 INS42 INS2 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS3 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS43 INS85 INS85 MOV32 INS3 INS5 INS4 INS42 MOV5 INS34 INS43 INS85 INS85 MOV32 INS32 INS42 INS2 INS42 INS5 INS42 INS42 INS43 INS85 INS85 INS5 INS5 INS42 UPD42 INS2 INS2 INS43 INS85 INS85 INS43 INS85 INS85 INS42 INS34 INS42 INS34 INS42 UPD42 MOV27 MOV27 INS2 INS2 INS42 UPD42 MOV27 MOV27 INS2 INS2 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 DEL42 DEL42 DEL42