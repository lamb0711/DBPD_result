YARN-4767. Network issues can cause persistent RM UI outage. (Daniel Templeton via kasha)

+  private static final String PROXY_PATH = "/proxy";
-  private static final long updateInterval = 5 * 60 * 1000;
+  private static final long UPDATE_INTERVAL = 5 * 60 * 1000;
-      if(proxyAddresses == null || (lastUpdate + updateInterval) >= now) {
+      if (proxyAddresses == null || (lastUpdate + UPDATE_INTERVAL) >= now) {
+
+
-      String redirectUrl = findRedirectUrl();
-      String target = redirectUrl + httpReq.getRequestURI();
-      ProxyUtils.sendRedirect(httpReq,  httpResp,  target);
-      return;
-    }
+      StringBuilder redirect = new StringBuilder(findRedirectUrl());
-    String user = null;
+      redirect.append(httpReq.getRequestURI());
-    if (httpReq.getCookies() != null) {
-      for(Cookie c: httpReq.getCookies()) {
-        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){
-          user = c.getValue();
-          break;
+      int insertPoint = redirect.indexOf(PROXY_PATH);
+
+      if (insertPoint >= 0) {
+        // Add /redirect as the second component of the path so that the RM web
+        // proxy knows that this request was a redirect.
+        insertPoint += PROXY_PATH.length();
+        redirect.insert(insertPoint, "/redirect");
+      }
+
+      ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());
+    } else {
+      String user = null;
+
+      if (httpReq.getCookies() != null) {
+        for(Cookie c: httpReq.getCookies()) {
+          if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){
+            user = c.getValue();
+            break;
+          }
-    }
-    if (user == null) {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Could not find " + WebAppProxyServlet.PROXY_USER_COOKIE_NAME
-                 + " cookie, so user will not be set");
+      if (user == null) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Could not find "
+              + WebAppProxyServlet.PROXY_USER_COOKIE_NAME
+              + " cookie, so user will not be set");
+        }
+
+        chain.doFilter(req, resp);
+      } else {
+        AmIpPrincipal principal = new AmIpPrincipal(user);
+        ServletRequest requestWrapper = new AmIpServletRequestWrapper(httpReq,
+            principal);
+
+        chain.doFilter(requestWrapper, resp);
-      chain.doFilter(req, resp);
-    } else {
-      final AmIpPrincipal principal = new AmIpPrincipal(user);
-      ServletRequest requestWrapper = new AmIpServletRequestWrapper(httpReq,
-          principal);
-      chain.doFilter(requestWrapper, resp);

INS23 INS83 INS83 INS83 MOV43 INS59 INS42 INS45 UPD42 INS8 INS60 INS21 INS60 INS25 MOV60 MOV25 MOV25 INS43 INS59 INS32 INS39 MOV59 INS27 INS8 INS42 UPD42 MOV42 INS14 INS42 INS42 MOV32 UPD42 INS32 INS42 INS34 INS21 INS21 INS32 INS43 MOV32 INS42 INS42 INS42 INS7 INS32 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS45 UPD42 INS42 INS42 DEL42 DEL27 DEL59 DEL60 DEL43 DEL60 DEL41 DEL83