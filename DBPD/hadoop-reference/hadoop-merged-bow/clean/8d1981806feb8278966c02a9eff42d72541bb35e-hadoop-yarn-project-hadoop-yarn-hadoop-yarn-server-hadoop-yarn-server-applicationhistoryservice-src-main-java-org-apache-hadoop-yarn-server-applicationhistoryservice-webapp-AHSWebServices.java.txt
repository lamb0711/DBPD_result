YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS

-import java.io.IOException;
-import java.io.OutputStream;
-import java.nio.charset.Charset;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import javax.ws.rs.WebApplicationException;
-import javax.ws.rs.core.GenericEntity;
-import javax.ws.rs.core.StreamingOutput;
-import org.apache.hadoop.classification.InterfaceAudience.Private;
+
+import com.google.common.annotations.VisibleForTesting;
+import com.sun.jersey.api.client.ClientHandlerException;
+import com.sun.jersey.api.client.UniformInterfaceException;
+import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.yarn.logaggregation.ContainerLogMeta;
-import org.apache.hadoop.yarn.logaggregation.ContainerLogsRequest;
-import org.apache.hadoop.yarn.logaggregation.ContainerLogAggregationType;
+import org.apache.hadoop.yarn.server.webapp.LogWebServiceUtils;
-import org.apache.hadoop.yarn.server.webapp.dao.ContainerLogsInfo;
-import org.apache.hadoop.yarn.webapp.util.WebAppUtils;
-import org.apache.hadoop.yarn.webapp.util.YarnWebServiceUtils;
-import org.codehaus.jettison.json.JSONException;
-import org.codehaus.jettison.json.JSONObject;
-import com.google.common.annotations.VisibleForTesting;
-import com.sun.jersey.api.client.ClientHandlerException;
-import com.sun.jersey.api.client.UniformInterfaceException;
+import org.codehaus.jettison.json.JSONException;
-      return getContainerLogMeta(appId, null, null, containerIdStr, false);
+      return LogWebServiceUtils
+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
+              false);
-    if (isFinishedState(appInfo.getAppState())) {
-      return getContainerLogMeta(appId, null, null,
-          containerIdStr, false);
+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {
+      return LogWebServiceUtils
+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
+              false);
-    if (isRunningState(appInfo.getAppState())) {
+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {
-          return getContainerLogMeta(appId, appOwner, null,
-              containerIdStr, true);
+          return LogWebServiceUtils
+              .getContainerLogMeta(factory, appId, appOwner, null,
+                  containerIdStr, true);
-          return getContainerLogMeta(appId, appOwner, null,
-              containerIdStr, true);
+          return LogWebServiceUtils
+              .getContainerLogMeta(factory, appId, appOwner, null,
+                  containerIdStr, true);
-      String resURI = JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),
+      String resURI = JOINER.join(
+          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),
-      return createBadResponse(Status.NOT_FOUND,
+      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,
-    final long length = parseLongParam(size);
+    final long length = LogWebServiceUtils.parseLongParam(size);
-      return sendStreamOutputResponse(appId, null, null, containerIdStr,
-          filename, format, length, false);
+      return LogWebServiceUtils
+          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,
+              filename, format, length, false);
-    if (isFinishedState(appInfo.getAppState())) {
+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {
-      return sendStreamOutputResponse(appId, appOwner, null, containerIdStr,
-          filename, format, length, false);
+      return LogWebServiceUtils
+          .sendStreamOutputResponse(factory, appId, appOwner, null,
+              containerIdStr, filename, format, length, false);
-    if (isRunningState(appInfo.getAppState())) {
+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {
-          return sendStreamOutputResponse(appId, appOwner, null,
-              containerIdStr, filename, format, length, true);
+          return LogWebServiceUtils
+              .sendStreamOutputResponse(factory, appId, appOwner, null,
+                  containerIdStr, filename, format, length, true);
-          return sendStreamOutputResponse(appId, appOwner, null,
-              containerIdStr, filename, format, length, true);
+          return LogWebServiceUtils
+              .sendStreamOutputResponse(factory, appId, appOwner, null,
+                  containerIdStr, filename, format, length, true);
-      String resURI = JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),
+      String resURI = JOINER.join(
+          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),
-      return createBadResponse(Status.NOT_FOUND,
+      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,
-  private boolean isRunningState(YarnApplicationState appState) {
-    return appState == YarnApplicationState.RUNNING;
-  }
-
-  private boolean isFinishedState(YarnApplicationState appState) {
-    return appState == YarnApplicationState.FINISHED
-        || appState == YarnApplicationState.FAILED
-        || appState == YarnApplicationState.KILLED;
-  }
-
-  private Response createBadResponse(Status status, String errMessage) {
-    Response response = Response.status(status)
-        .entity(DOT_JOINER.join(status.toString(), errMessage)).build();
-    return response;
-  }
-
-  private Response sendStreamOutputResponse(ApplicationId appId,
-      String appOwner, String nodeId, String containerIdStr,
-      String fileName, String format, long bytes,
-      boolean printEmptyLocalContainerLog) {
-    String contentType = WebAppUtils.getDefaultLogContentType();
-    if (format != null && !format.isEmpty()) {
-      contentType = WebAppUtils.getSupportedLogContentType(format);
-      if (contentType == null) {
-        String errorMessage = "The valid values for the parameter : format "
-            + "are " + WebAppUtils.listSupportedLogContentType();
-        return Response.status(Status.BAD_REQUEST).entity(errorMessage)
-            .build();
-      }
-    }
-    StreamingOutput stream = null;
-    try {
-      stream = getStreamingOutput(appId, appOwner, nodeId,
-          containerIdStr, fileName, bytes, printEmptyLocalContainerLog);
-    } catch (Exception ex) {
-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,
-          ex.getMessage());
-    }
-    ResponseBuilder response = Response.ok(stream);
-    response.header("Content-Type", contentType);
-    // Sending the X-Content-Type-Options response header with the value
-    // nosniff will prevent Internet Explorer from MIME-sniffing a response
-    // away from the declared content-type.
-    response.header("X-Content-Type-Options", "nosniff");
-    return response.build();
-  }
-
-  private StreamingOutput getStreamingOutput(final ApplicationId appId,
-      final String appOwner, final String nodeId, final String containerIdStr,
-      final String logFile, final long bytes,
-      final boolean printEmptyLocalContainerLog) throws IOException{
-    StreamingOutput stream = new StreamingOutput() {
-
-      @Override
-      public void write(OutputStream os) throws IOException,
-          WebApplicationException {
-        ContainerLogsRequest request = new ContainerLogsRequest();
-        request.setAppId(appId);
-        request.setAppOwner(appOwner);
-        request.setContainerId(containerIdStr);
-        request.setBytes(bytes);
-        request.setNodeId(nodeId);
-        Set<String> logTypes = new HashSet<>();
-        logTypes.add(logFile);
-        request.setLogTypes(logTypes);
-        boolean findLogs = factory.getFileControllerForRead(appId, appOwner)
-            .readAggregatedLogs(request, os);
-        if (!findLogs) {
-          os.write(("Can not find logs for container:"
-              + containerIdStr).getBytes(Charset.forName("UTF-8")));
-        } else {
-          if (printEmptyLocalContainerLog) {
-            StringBuilder sb = new StringBuilder();
-            sb.append(containerIdStr + "\n");
-            sb.append("LogAggregationType: "
-                + ContainerLogAggregationType.LOCAL + "\n");
-            sb.append("LogContents:\n");
-            sb.append(getNoRedirectWarning() + "\n");
-            os.write(sb.toString().getBytes(Charset.forName("UTF-8")));
-          }
-        }
-      }
-    };
-    return stream;
-  }
-
-  private long parseLongParam(String bytes) {
-    if (bytes == null || bytes.isEmpty()) {
-      return Long.MAX_VALUE;
-    }
-    return Long.parseLong(bytes);
-  }
-
-  private Response getContainerLogMeta(ApplicationId appId, String appOwner,
-      final String nodeId, final String containerIdStr,
-      boolean emptyLocalContainerLogMeta) {
-    try {
-      ContainerLogsRequest request = new ContainerLogsRequest();
-      request.setAppId(appId);
-      request.setAppOwner(appOwner);
-      request.setContainerId(containerIdStr);
-      request.setNodeId(nodeId);
-      List<ContainerLogMeta> containerLogMeta = factory
-          .getFileControllerForRead(appId, appOwner)
-          .readAggregatedLogsMeta(request);
-      if (containerLogMeta.isEmpty()) {
-        throw new NotFoundException(
-            "Can not get log meta for container: " + containerIdStr);
-      }
-      List<ContainerLogsInfo> containersLogsInfo = new ArrayList<>();
-      for (ContainerLogMeta meta : containerLogMeta) {
-        ContainerLogsInfo logInfo = new ContainerLogsInfo(meta,
-            ContainerLogAggregationType.AGGREGATED);
-        containersLogsInfo.add(logInfo);
-      }
-      if (emptyLocalContainerLogMeta) {
-        ContainerLogMeta emptyMeta = new ContainerLogMeta(
-            containerIdStr, "N/A");
-        ContainerLogsInfo empty = new ContainerLogsInfo(emptyMeta,
-            ContainerLogAggregationType.LOCAL);
-        containersLogsInfo.add(empty);
-      }
-      GenericEntity<List<ContainerLogsInfo>> meta = new GenericEntity<List<
-          ContainerLogsInfo>>(containersLogsInfo){};
-      ResponseBuilder response = Response.ok(meta);
-      // Sending the X-Content-Type-Options response header with the value
-      // nosniff will prevent Internet Explorer from MIME-sniffing a response
-      // away from the declared content-type.
-      response.header("X-Content-Type-Options", "nosniff");
-      return response.build();
-    } catch (Exception ex) {
-      throw new WebApplicationException(ex);
-    }
-  }
-
-  @Private
-  @VisibleForTesting
-  public static String getNoRedirectWarning() {
-    return "We do not have NodeManager web address, so we can not "
-        + "re-direct the request to related NodeManager "
-        + "for local container logs.";
-  }
-
-  private String getAbsoluteNMWebAddress(String nmWebAddress) {
-    if (nmWebAddress.contains(WebAppUtils.HTTP_PREFIX) ||
-        nmWebAddress.contains(WebAppUtils.HTTPS_PREFIX)) {
-      return nmWebAddress;
-    }
-    return WebAppUtils.getHttpSchemePrefix(conf) + nmWebAddress;
-  }
-
-  @VisibleForTesting
-  @Private
+  @VisibleForTesting @InterfaceAudience.Private
-      String nodeId) throws ClientHandlerException,
-      UniformInterfaceException, JSONException {
-    JSONObject nodeInfo = YarnWebServiceUtils.getNodeInfoFromRMWebService(
-        configuration, nodeId).getJSONObject("node");
-    return nodeInfo.has("nodeHTTPAddress") ?
-        nodeInfo.getString("nodeHTTPAddress") : null;
+      String nodeId)
+      throws ClientHandlerException, UniformInterfaceException, JSONException {
+    return LogWebServiceUtils.getNMWebAddressFromRM(configuration, nodeId);

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 INS40 INS41 MOV32 MOV32 MOV32 MOV32 INS32 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL36 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL1 DEL14 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL45 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL1 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL78 DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL45 DEL45 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL33 DEL16 DEL41