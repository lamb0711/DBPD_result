HADOOP-13354. Update WASB driver to use the latest version (4.2.0) of SDK for Microsoft Azure Storage Clients. Contributed by Sivaguru Sankaridurg.

+import java.util.UUID;
+  /**
+   * Variable to hold the block id prefix to be used for azure
+   * storage blocks from azure-storage-java sdk version 4.2.0 onwards
+   */
+  private String blockIdPrefix = null;
+
-    setBlocksCount();
+    this.blockIdPrefix = null;
+    setBlocksCountAndBlockIdPrefix();
-  private void setBlocksCount() throws IOException {
+  private void setBlocksCountAndBlockIdPrefix() throws IOException {
+
-      if (nextBlockCount == UNSET_BLOCKS_COUNT) {
-
-        nextBlockCount = (long) (sequenceGenerator.nextInt(Integer.MAX_VALUE))
-            + sequenceGenerator.nextInt(Integer.MAX_VALUE - MAX_BLOCK_COUNT);
+      if (nextBlockCount == UNSET_BLOCKS_COUNT && blockIdPrefix==null) {
-        nextBlockCount += blockEntries.size();
+        String blockZeroBlockId = (blockEntries.size() > 0) ? blockEntries.get(0).getId() : "";
+        String prefix = UUID.randomUUID().toString() + "-";
+        String sampleNewerVersionBlockId = generateNewerVersionBlockId(prefix, 0);
+
+        if (blockEntries.size() > 0 && blockZeroBlockId.length() < sampleNewerVersionBlockId.length()) {
+
+          // If blob has already been created with 2.2.0, append subsequent blocks with older version (2.2.0) blockId
+          // compute nextBlockCount, the way it was done before; and don't use blockIdPrefix
+          this.blockIdPrefix = "";
+          nextBlockCount = (long) (sequenceGenerator.nextInt(Integer.MAX_VALUE))
+              + sequenceGenerator.nextInt(Integer.MAX_VALUE - MAX_BLOCK_COUNT);
+          nextBlockCount += blockEntries.size();
+
+        } else {
+
+          // If there are no existing blocks, create the first block with newer version (4.2.0) blockId
+          // If blob has already been created with 4.2.0, append subsequent blocks with newer version (4.2.0) blockId
+          this.blockIdPrefix = prefix;
+          nextBlockCount = blockEntries.size();
+
+        }
+
-      LOG.debug("Encountered storage exception during setting next Block Count."
+      LOG.debug("Encountered storage exception during setting next Block Count and BlockId prefix."
-    byte[] blockIdInBytes = getBytesFromLong(nextBlockCount);
+    if (this.blockIdPrefix == null) {
+      throw new IOException("Append Stream in invalid state. blockIdPrefix not set correctly");
+    }
+
+    if (!this.blockIdPrefix.equals("")) {
+
+      return generateNewerVersionBlockId(this.blockIdPrefix, nextBlockCount++);
+
+    } else {
+
+      return generateOlderVersionBlockId(nextBlockCount++);
+
+    }
+
+  }
+
+  /**
+   * Helper method that generates an older (2.2.0) version blockId
+   * @return String representing the block ID generated.
+   */
+  private String generateOlderVersionBlockId(long id) {
+
+    byte[] blockIdInBytes = getBytesFromLong(id);
+    return new String(Base64.encodeBase64(blockIdInBytes), StandardCharsets.UTF_8);
+  }
+
+  /**
+   * Helper method that generates an newer (4.2.0) version blockId
+   * @return String representing the block ID generated.
+   */
+  private String generateNewerVersionBlockId(String prefix, long id) {
+
+    String blockIdSuffix  = String.format("%06d", id);
+    byte[] blockIdInBytes = (prefix + blockIdSuffix).getBytes(StandardCharsets.UTF_8);
-      final byte[] tempArray = new byte[8];
-      for (int m = 0; m < 8; m++) {
-          tempArray[7 - m] = (byte) ((value >> (8 * m)) & 0xFF);
-      }
+    final byte[] tempArray = new byte[8];
-      return tempArray;
+    for (int m = 0; m < 8; m++) {
+      tempArray[7 - m] = (byte) ((value >> (8 * m)) & 0xFF);
+    }
+
+    return tempArray;
+
-  private synchronized void uploadBlockToStorage(byte[] payload) throws IOException {
+  private synchronized void uploadBlockToStorage(byte[] payload)
+      throws IOException {
-    nextBlockCount++;
+
-    uncommittedBlockEntries.add(new BlockEntry(blockId));
+    BlockEntry blockEntry = new BlockEntry(blockId);
+    blockEntry.setSize(payload.length);
+    uncommittedBlockEntries.add(blockEntry);

INS26 INS40 INS23 INS31 INS31 INS29 INS83 INS43 INS59 UPD42 MOV29 INS83 MOV43 INS42 MOV43 INS8 INS29 INS43 UPD42 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS8 MOV21 INS65 INS42 INS42 INS33 INS21 MOV25 INS25 INS25 INS65 INS65 INS42 INS39 INS42 INS41 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS60 INS60 MOV41 INS60 INS66 INS66 INS7 INS27 INS8 INS38 INS8 INS8 INS66 INS66 INS14 INS66 INS66 INS42 INS43 INS59 INS5 INS59 INS43 INS59 INS32 INS22 INS33 UPD42 INS22 INS33 INS53 INS32 INS41 INS41 INS43 INS32 INS40 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 MOV14 INS42 INS42 INS40 INS42 INS52 INS42 INS27 INS8 INS52 INS42 INS14 INS22 INS42 INS45 INS32 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS36 INS42 INS40 MOV27 INS27 MOV60 INS60 INS60 INS60 INS25 INS43 INS45 INS52 INS42 INS42 INS22 INS37 INS42 MOV37 INS27 INS42 INS33 INS43 INS59 INS43 INS59 INS43 INS59 INS27 MOV8 INS8 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS27 INS42 INS42 INS32 INS27 INS27 INS21 INS21 INS21 UPD45 INS36 INS32 INS45 INS32 INS45 INS42 INS42 INS34 INS32 INS34 INS32 INS32 INS7 INS7 INS7 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS45 INS22 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS34 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42