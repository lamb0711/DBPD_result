HDFS-5619. NameNode: record ACL modifications to edit log. Contributed by Haohui Mai.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1553224 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_ACL;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclEntryScope;
+import org.apache.hadoop.fs.permission.AclEntryType;
+import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.hdfs.protocol.proto.AclProtos.AclEditLogProto;
+import org.apache.hadoop.hdfs.protocolPB.PBHelper;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+      inst.put(OP_SET_ACL, new SetAclOp());
+  private static ImmutableMap<String, FsAction> fsActionMap() {
+    ImmutableMap.Builder<String, FsAction> b = ImmutableMap.builder();
+    for (FsAction v : FsAction.values())
+      b.put(v.SYMBOL, v);
+    return b.build();
+  }
+
+  private static final ImmutableMap<String, FsAction> FSACTION_SYMBOL_MAP
+    = fsActionMap();
+
+  static class SetAclOp extends FSEditLogOp {
+    List<AclEntry> aclEntries = Lists.newArrayList();
+    String src;
+
+    private SetAclOp() {
+      super(OP_SET_ACL);
+    }
+
+    static SetAclOp getInstance() {
+      return new SetAclOp();
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      AclEditLogProto p = AclEditLogProto.parseDelimitedFrom((DataInputStream)in);
+      src = p.getSrc();
+      aclEntries = PBHelper.convertAclEntry(p.getEntriesList());
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      AclEditLogProto.Builder b = AclEditLogProto.newBuilder();
+      if (src != null)
+        b.setSrc(src);
+      b.addAllEntries(PBHelper.convertAclEntryProto(aclEntries));
+      b.build().writeDelimitedTo(out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "SRC", src);
+      for (AclEntry e : aclEntries) {
+        contentHandler.startElement("", "", "ENTRY", new AttributesImpl());
+        XMLUtils.addSaxString(contentHandler, "SCOPE", e.getScope().name());
+        XMLUtils.addSaxString(contentHandler, "TYPE", e.getType().name());
+        XMLUtils.addSaxString(contentHandler, "NAME", e.getName());
+        fsActionToXml(contentHandler, e.getPermission());
+        contentHandler.endElement("", "", "ENTRY");
+      }
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      src = st.getValue("SRC");
+      if (!st.hasChildren("ENTRY"))
+        return;
+
+      List<Stanza> stanzas = st.getChildren("ENTRY");
+      for (Stanza s : stanzas) {
+        AclEntry e = new AclEntry.Builder()
+            .setScope(AclEntryScope.valueOf(s.getValue("SCOPE")))
+            .setType(AclEntryType.valueOf(s.getValue("TYPE")))
+            .setName(s.getValue("NAME"))
+            .setPermission(fsActionFromXml(s)).build();
+        aclEntries.add(e);
+      }
+    }
+  }
+
+
+  private static void fsActionToXml(ContentHandler contentHandler, FsAction v)
+      throws SAXException {
+    XMLUtils.addSaxString(contentHandler, "PERM", v.SYMBOL);
+  }
+
+  private static FsAction fsActionFromXml(Stanza st) throws InvalidXmlException {
+    FsAction v = FSACTION_SYMBOL_MAP.get(st.getValue("PERM"));
+    if (v == null)
+      throw new InvalidXmlException("Invalid value for FsAction");
+    return v;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS23 INS55 INS31 INS31 INS83 INS83 INS74 INS42 INS8 INS83 INS83 INS83 INS74 INS59 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS43 INS43 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS32 INS42 INS74 INS59 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS21 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS21 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS70 INS42 INS43 INS42 INS42 INS21 INS25 INS60 INS70 INS42 INS42 INS32 INS42 INS43 INS59 INS27 INS53 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS59 INS7 INS7 INS42 INS43 INS59 INS27 INS21 INS32 INS32 INS42 INS32 INS44 INS42 INS8 INS42 INS7 INS38 INS41 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS32 INS42 INS33 INS14 INS42 INS42 INS42 INS14 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS32 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS42 INS42 INS32 INS43 INS45 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS14 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS14 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS40 INS42 INS42 INS45