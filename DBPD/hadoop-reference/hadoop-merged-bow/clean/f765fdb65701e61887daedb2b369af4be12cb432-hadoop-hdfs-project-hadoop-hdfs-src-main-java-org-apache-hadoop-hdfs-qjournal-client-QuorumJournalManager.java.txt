HDFS-3793. Implement genericized format() in QJM. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1373177 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.TimeoutException;
+
+  // Since these don't occur during normal operation, we can
+  // use rather lengthy timeouts, and don't need to make them
+  // configurable.
+  private static final int FORMAT_TIMEOUT_MS = 60000;
+  private static final int HASDATA_TIMEOUT_MS = 60000;
+  @Override
+  public void format(NamespaceInfo nsInfo) throws IOException {
+    QuorumCall<AsyncLogger,Void> call = loggers.format(nsInfo);
+    try {
+      call.waitFor(loggers.size(), loggers.size(), 0, FORMAT_TIMEOUT_MS);
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted waiting for format() response");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for format() response");
+    }
+    
+    if (call.countExceptions() > 0) {
+      call.rethrowException("Could not format one or more JournalNodes");
+    }
+  }
+
+  @Override
+  public boolean hasSomeData() throws IOException {
+    QuorumCall<AsyncLogger, Boolean> call =
+        loggers.isFormatted();
+
+    try {
+      call.waitFor(loggers.size(), 0, 0, HASDATA_TIMEOUT_MS);
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted while determining if JNs have data");
+    } catch (TimeoutException e) {
+      throw new IOException("Timed out waiting for response from loggers");
+    }
+    
+    if (call.countExceptions() > 0) {
+      call.rethrowException(
+          "Unable to check if JNs are ready for formatting");
+    }
+    
+    // If any of the loggers returned with a non-empty manifest, then
+    // we should prompt for format.
+    for (Boolean hasData : call.getResults().values()) {
+      if (hasData) {
+        return true;
+      }
+    }
+
+    // Otherwise, none were formatted, we can safely format.
+    return false;
+  }
+
-
+  

INS26 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS34 INS42 INS34 INS42 INS43 INS42 INS42 INS60 INS54 INS25 INS42 INS42 INS60 INS54 INS25 INS70 INS41 INS42 INS74 INS59 INS8 INS12 INS12 INS27 INS8 INS74 INS59 INS8 INS12 INS12 INS27 INS8 INS44 INS32 INS8 INS9 INS43 INS43 INS43 INS42 INS32 INS21 INS44 INS8 INS44 INS8 INS32 INS34 INS21 INS43 INS43 INS43 INS42 INS32 INS21 INS44 INS8 INS44 INS8 INS32 INS34 INS21 INS43 INS42 INS32 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS32 INS34 INS34 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS45 INS41 INS42 INS42 INS42 INS42 INS43 INS45 INS43 INS45 INS42 INS42 INS43 INS45 INS43 INS45 INS9 INS42 INS42 INS42 INS42