HDFS-4434. Provide a mapping from INodeId to INode. Contributed by Suresh Srinivas.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469644 13f79535-47bb-0310-9956-ffa450edef68

-  
+  @Override
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+   * 
+   * This does not support ".inodes" relative path
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
-      throw new InvalidPathException("Invalid file name: " + link);
+      throw new InvalidPathException("Invalid link name: " + link);
+    }
+    if (FSDirectory.isReservedName(target)) {
+      throw new InvalidPathException("Invalid target name: " + target);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(link);
+      link = FSDirectory.resolvePath(link, pathComponents, dir);
-  private boolean setReplicationInt(final String src, final short replication)
+  private boolean setReplicationInt(String src, final short replication)
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(filename);
+      filename = FSDirectory.resolvePath(filename, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException("Cannot create file" + src, safeMode);
+      }
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
-    checkOperation(OperationCategory.WRITE);
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot create file" + src, safeMode);
-    }
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    if (NameNode.stateChangeLog.isDebugEnabled()) {
+      NameNode.stateChangeLog.debug("DIR* NameSystem.appendFile: src=" + src
+          + ", holder=" + holder
+          + ", clientMachine=" + clientMachine);
+    }
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException("Cannot append to file" + src, safeMode);
+      }
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
-  LocatedBlock getAdditionalDatanode(final String src, final ExtendedBlock blk,
+  LocatedBlock getAdditionalDatanode(String src, final ExtendedBlock blk,
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
-      success = completeFileInternal(src, holder,
-          ExtendedBlock.getLocalBlock(last));
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException("Cannot complete file " + src, safeMode);
+      }
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      success = completeFileInternal(src, holder, 
+        ExtendedBlock.getLocalBlock(last));
-    checkOperation(OperationCategory.WRITE);
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot complete file " + src, safeMode);
-    }
-
+    byte[][] srcComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    byte[][] dstComponents = FSDirectory.getPathComponentsForReservedPath(dst);
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException("Cannot rename " + src, safeMode);
+      }
+      src = FSDirectory.resolvePath(src, srcComponents, dir);
+      dst = FSDirectory.resolvePath(dst, dstComponents, dir);
+      checkOperation(OperationCategory.WRITE);
-      checkOperation(OperationCategory.WRITE);
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot rename " + src, safeMode);
-    }
+    byte[][] srcComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    byte[][] dstComponents = FSDirectory.getPathComponentsForReservedPath(dst);
+      checkOperation(OperationCategory.WRITE);
+      if (isInSafeMode()) {
+        throw new SafeModeException("Cannot rename " + src, safeMode);
+      }
+      src = FSDirectory.resolvePath(src, srcComponents, dir);
+      dst = FSDirectory.resolvePath(dst, dstComponents, dir);
-    checkOperation(OperationCategory.WRITE);
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot rename " + src, safeMode);
-    }
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    if (!DFSUtil.isValidName(src)) {
+      throw new InvalidPathException("Invalid file name: " + src);
+    }
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      checkOperation(OperationCategory.WRITE);   
+      if (isInSafeMode()) {
+        throw new SafeModeException("Cannot create directory " + src, safeMode);
+      }
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
-    checkOperation(OperationCategory.WRITE);   
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot create directory " + src, safeMode);
-    }
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+   * 
+   * Note: This does not support ".inodes" relative path.
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);

INS78 INS42 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS5 INS59 INS5 INS59 INS5 INS59 INS66 INS5 INS59 INS32 INS8 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS32 INS8 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS38 INS8 INS5 INS59 INS5 INS59 INS5 INS59 INS66 INS5 INS59 INS5 INS59 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS42 INS42 INS42 INS53 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 MOV21 MOV25 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS40 INS42 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS25 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 MOV21 MOV25 INS21 INS39 INS85 INS85 INS42 INS32 INS39 INS85 INS85 INS42 INS32 MOV21 MOV25 INS21 INS21 INS21 INS39 INS85 INS85 INS42 INS32 INS39 INS85 INS85 INS42 INS32 MOV21 MOV25 INS21 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS32 INS53 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 MOV21 MOV25 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS39 INS85 INS85 INS42 INS32 INS21 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS14 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS32 INS32 INS8 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS40 INS42 INS27 INS42 INS40 INS42 INS53 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS42 DEL83 DEL83