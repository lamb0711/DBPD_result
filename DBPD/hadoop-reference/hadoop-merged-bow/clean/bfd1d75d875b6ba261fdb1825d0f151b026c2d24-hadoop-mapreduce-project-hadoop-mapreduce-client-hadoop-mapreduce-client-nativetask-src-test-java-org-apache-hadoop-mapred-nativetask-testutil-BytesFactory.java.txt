MAPREDUCE-6054. native-task: Speed up tests. Contributed by Todd Lipcon.

+import com.google.common.base.Preconditions;
+
+import org.apache.hadoop.io.Writable;
-  public static Object newObject(byte[] seed, String className) {
-    r.setSeed(seed.hashCode());
-    if (className.equals(IntWritable.class.getName())) {
-      return new IntWritable(Ints.fromByteArray(seed));
-    } else if (className.equals(FloatWritable.class.getName())) {
-      return new FloatWritable(r.nextFloat());
-    } else if (className.equals(DoubleWritable.class.getName())) {
-      return new DoubleWritable(r.nextDouble());
-    } else if (className.equals(LongWritable.class.getName())) {
-      return new LongWritable(Longs.fromByteArray(seed));
-    } else if (className.equals(VIntWritable.class.getName())) {
-      return new VIntWritable(Ints.fromByteArray(seed));
-    } else if (className.equals(VLongWritable.class.getName())) {
-      return new VLongWritable(Longs.fromByteArray(seed));
-    } else if (className.equals(BooleanWritable.class.getName())) {
-      return new BooleanWritable(seed[0] % 2 == 1 ? true : false);
-    } else if (className.equals(Text.class.getName())) {
-      return new Text(BytesUtil.toStringBinary(seed));
-    } else if (className.equals(ByteWritable.class.getName())) {
-      return new ByteWritable(seed.length > 0 ? seed[0] : 0);
-    } else if (className.equals(BytesWritable.class.getName())) {
-      return new BytesWritable(seed);
-    } else if (className.equals(UTF8.class.getName())) {
-      return new UTF8(BytesUtil.toStringBinary(seed));
-    } else if (className.equals(MockValueClass.class.getName())) {
-      return new MockValueClass(seed);
+  public static void updateObject(Writable obj, byte[] seed) {
+    if (obj instanceof IntWritable) {
+      ((IntWritable)obj).set(Ints.fromByteArray(seed));
+    } else if (obj instanceof FloatWritable) {
+      ((FloatWritable)obj).set(r.nextFloat());
+    } else if (obj instanceof DoubleWritable) {
+      ((DoubleWritable)obj).set(r.nextDouble());
+    } else if (obj instanceof LongWritable) {
+      ((LongWritable)obj).set(Longs.fromByteArray(seed));
+    } else if (obj instanceof VIntWritable) {
+      ((VIntWritable)obj).set(Ints.fromByteArray(seed));
+    } else if (obj instanceof VLongWritable) {
+      ((VLongWritable)obj).set(Longs.fromByteArray(seed));
+    } else if (obj instanceof BooleanWritable) {
+      ((BooleanWritable)obj).set(seed[0] % 2 == 1 ? true : false);
+    } else if (obj instanceof Text) {
+      ((Text)obj).set(BytesUtil.toStringBinary(seed));
+    } else if (obj instanceof ByteWritable) {
+      ((ByteWritable)obj).set(seed.length > 0 ? seed[0] : 0);
+    } else if (obj instanceof BytesWritable) {
+      ((BytesWritable)obj).set(seed, 0, seed.length);
+    } else if (obj instanceof UTF8) {
+      ((UTF8)obj).set(BytesUtil.toStringBinary(seed));
+    } else if (obj instanceof MockValueClass) {
+      ((MockValueClass)obj).set(seed);
-      return null;
+      throw new IllegalArgumentException("unknown writable: " +
+                                         obj.getClass().getName());
+  public static Writable newObject(byte[] seed, String className) {
+    Writable ret;
+    try {
+      Class<?> clazz = Class.forName(className);
+      Preconditions.checkArgument(Writable.class.isAssignableFrom(clazz));
+      ret = (Writable)clazz.newInstance();
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+    if (seed != null) {
+      updateObject(ret, seed);
+    }
+    return ret;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 MOV83 MOV83 INS39 INS42 INS44 MOV44 INS8 INS83 INS83 INS43 INS42 INS44 MOV44 INS8 INS43 INS42 INS25 INS42 INS5 INS42 INS60 INS54 INS25 MOV41 INS42 INS62 INS8 INS25 INS39 INS85 INS43 INS59 INS8 INS12 INS27 INS8 INS42 INS42 MOV43 INS21 INS62 INS8 INS25 INS42 INS42 INS60 INS21 INS21 INS44 INS8 INS42 INS33 INS21 INS32 INS42 MOV43 INS21 INS62 INS8 INS25 INS74 INS59 INS32 INS7 INS43 INS42 INS53 INS32 INS36 UPD42 MOV42 MOV32 INS32 INS42 MOV43 INS21 INS62 MOV8 INS25 INS43 INS76 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS11 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS11 INS36 INS42 MOV32 INS32 INS42 MOV43 INS21 INS62 INS8 INS25 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS43 INS32 INS43 INS42 MOV43 INS42 INS11 INS36 INS42 MOV32 INS32 INS42 MOV43 INS21 INS62 INS8 INS25 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS42 INS11 INS36 INS42 MOV32 INS32 INS42 MOV43 INS21 INS62 MOV8 INS25 INS42 MOV43 INS42 INS11 INS36 INS42 MOV32 INS32 INS42 MOV43 INS21 INS62 INS8 INS25 MOV43 INS42 INS11 INS36 INS42 MOV32 INS32 INS42 MOV43 INS21 INS62 MOV8 INS25 MOV43 INS42 INS11 INS36 INS42 MOV16 INS32 INS42 MOV43 INS21 INS62 INS8 INS25 MOV43 INS42 INS11 INS36 INS42 MOV32 INS32 INS42 MOV43 INS21 INS62 MOV8 INS25 MOV43 INS42 INS11 INS36 INS42 MOV16 INS32 INS42 MOV43 INS21 INS62 INS8 INS8 MOV43 INS42 INS11 INS36 INS42 INS42 INS34 INS40 INS32 INS42 MOV43 INS21 INS53 MOV43 INS42 INS11 INS36 INS42 MOV32 INS32 INS14 MOV43 INS42 INS11 INS36 UPD42 MOV42 UPD42 MOV42 INS43 INS27 MOV43 INS42 INS11 INS42 INS45 INS32 MOV43 INS42 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 DEL14 DEL41 DEL14 DEL41 DEL14 DEL41 DEL14 DEL41 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL57 DEL42 DEL32 DEL32 DEL42 DEL42 DEL57 DEL42 DEL32 DEL32 DEL14 DEL41 DEL8 DEL42 DEL42 DEL57 DEL42 DEL32 DEL32 DEL14 DEL41 DEL8 DEL42 DEL42 DEL57 DEL42 DEL32 DEL32 DEL42 DEL57 DEL32 DEL32 DEL14 DEL41 DEL8 DEL57 DEL32 DEL32 DEL14 DEL41 DEL8 DEL42 DEL42 DEL57 DEL42 DEL32 DEL32 DEL42 DEL42 DEL57 DEL42 DEL32 DEL32 DEL14 DEL41 DEL8 DEL57 DEL32 DEL32 DEL32 DEL42 DEL14 DEL41 DEL8 DEL57 DEL42 DEL32 DEL32 DEL14 DEL41 DEL8 DEL57 DEL32 DEL32 DEL8 DEL33 DEL41 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL8 DEL31