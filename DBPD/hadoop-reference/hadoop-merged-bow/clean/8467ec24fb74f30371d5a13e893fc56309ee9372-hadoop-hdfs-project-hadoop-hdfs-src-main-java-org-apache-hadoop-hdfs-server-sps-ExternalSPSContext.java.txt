HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.

+import java.io.FileNotFoundException;
+import org.apache.hadoop.hdfs.protocol.HdfsLocatedFileStatus;
-public class ExternalSPSContext implements Context {
+public class ExternalSPSContext implements Context<String> {
-  private SPSService service;
+  private SPSService<String> service;
-  public ExternalSPSContext(SPSService service, NameNodeConnector nnc) {
+  public ExternalSPSContext(SPSService<String> service, NameNodeConnector nnc) {
-  public boolean isFileExist(long inodeId) {
-    String filePath = null;
+  public boolean isFileExist(String filePath) {
-      filePath = getFilePath(inodeId);
-      LOG.warn("Exception while getting file is for the given path:{} "
-          + "and fileId:{}", filePath, inodeId, e);
+      LOG.warn("Exception while getting file is for the given path:{}",
+          filePath, e);
-  public void removeSPSHint(long inodeId) throws IOException {
-    nnc.getDistributedFileSystem().removeXAttr(new Path(getFilePath(inodeId)),
+  public void removeSPSHint(String inodeId) throws IOException {
+    nnc.getDistributedFileSystem().removeXAttr(new Path(inodeId),
-  public HdfsFileStatus getFileInfo(long inodeID) throws IOException {
-    return nnc.getDistributedFileSystem().getClient()
-        .getLocatedFileInfo(getFilePath(inodeID), false);
+  public HdfsFileStatus getFileInfo(String path) throws IOException {
+    HdfsLocatedFileStatus fileInfo = null;
+    try {
+      fileInfo = nnc.getDistributedFileSystem().getClient()
+          .getLocatedFileInfo(path, false);
+    } catch (FileNotFoundException e) {
+      LOG.debug("Path:{} doesn't exists!", path, e);
+    }
+    return fileInfo;
-  public boolean hasLowRedundancyBlocks(long inodeID) {
-    try {
-      return nnc.getNNProtocolConnection().hasLowRedundancyBlocks(inodeID);
-    } catch (IOException e) {
-      LOG.warn("Failed to check whether fileid:{} has low redundancy blocks.",
-          inodeID, e);
-      return false;
-    }
-  }
-
-  @Override
-  public Long getNextSPSPathId() {
+  public String getNextSPSPath() {
-      return nnc.getNNProtocolConnection().getNextSPSPathId();
+      return nnc.getNNProtocolConnection().getNextSPSPath();
-  public void removeSPSPathId(long pathId) {
+  public void removeSPSPathId(String pathId) {
-
-  @Override
-  public String getFilePath(Long inodeId) {
-    try {
-      return nnc.getNNProtocolConnection().getFilePath(inodeId);
-    } catch (IOException e) {
-      LOG.warn("Exception while getting file path id:{} from Namenode.",
-          inodeId, e);
-      return null;
-    }
-  }

INS26 INS26 MOV31 INS40 INS40 INS74 INS31 MOV43 INS43 INS74 MOV78 MOV43 UPD42 MOV43 UPD43 UPD42 MOV78 MOV83 MOV39 MOV42 INS44 INS8 INS42 MOV43 INS43 INS74 MOV43 UPD42 INS43 INS43 INS42 INS60 INS54 INS41 UPD42 INS43 UPD42 MOV42 INS42 MOV43 INS43 INS42 INS42 INS43 INS59 MOV8 MOV12 INS42 MOV42 INS42 INS42 INS42 INS33 INS21 INS42 INS7 UPD43 INS42 MOV32 UPD42 UPD42 INS45 UPD42 MOV42 UPD42 UPD45 UPD42 DEL39 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL45 DEL45 DEL27 DEL42 DEL39 DEL42 DEL42 DEL32 DEL83 DEL42 DEL39 DEL42 DEL44 DEL31 DEL42 DEL78 DEL39 DEL39 DEL42 DEL42 DEL32 DEL41 DEL9 DEL41 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL54 DEL39 DEL42 DEL44 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL33 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31