Merge trunk to HDFS-4685.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1556097 13f79535-47bb-0310-9956-ffa450edef68

+   * Directory creation statistics.
+   *
+   * Each thread creates the same (+ or -1) number of directories.
+   * Directory names are pre-generated during initialization.
+   */
+  class MkdirsStats extends OperationStatsBase {
+    // Operation types
+    static final String OP_MKDIRS_NAME = "mkdirs";
+    static final String OP_MKDIRS_USAGE = "-op mkdirs [-threads T] [-dirs N] " +
+        "[-dirsPerDir P]";
+
+    protected FileNameGenerator nameGenerator;
+    protected String[][] dirPaths;
+
+    MkdirsStats(List<String> args) {
+      super();
+      parseArguments(args);
+    }
+
+    @Override
+    String getOpName() {
+      return OP_MKDIRS_NAME;
+    }
+
+    @Override
+    void parseArguments(List<String> args) {
+      boolean ignoreUnrelatedOptions = verifyOpArgument(args);
+      int nrDirsPerDir = 2;
+      for (int i = 2; i < args.size(); i++) {       // parse command line
+        if(args.get(i).equals("-dirs")) {
+          if(i+1 == args.size())  printUsage();
+          numOpsRequired = Integer.parseInt(args.get(++i));
+        } else if(args.get(i).equals("-threads")) {
+          if(i+1 == args.size())  printUsage();
+          numThreads = Integer.parseInt(args.get(++i));
+        } else if(args.get(i).equals("-dirsPerDir")) {
+          if(i+1 == args.size())  printUsage();
+          nrDirsPerDir = Integer.parseInt(args.get(++i));
+        } else if(!ignoreUnrelatedOptions)
+          printUsage();
+      }
+      nameGenerator = new FileNameGenerator(getBaseDir(), nrDirsPerDir);
+    }
+
+    @Override
+    void generateInputs(int[] opsPerThread) throws IOException {
+      assert opsPerThread.length == numThreads : "Error opsPerThread.length";
+      nameNodeProto.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE,
+          false);
+      LOG.info("Generate " + numOpsRequired + " inputs for " + getOpName());
+      dirPaths = new String[numThreads][];
+      for(int idx=0; idx < numThreads; idx++) {
+        int threadOps = opsPerThread[idx];
+        dirPaths[idx] = new String[threadOps];
+        for(int jdx=0; jdx < threadOps; jdx++)
+          dirPaths[idx][jdx] = nameGenerator.
+              getNextFileName("ThroughputBench");
+      }
+    }
+
+    /**
+     * returns client name
+     */
+    @Override
+    String getExecutionArgument(int daemonId) {
+      return getClientName(daemonId);
+    }
+
+    /**
+     * Do mkdirs operation.
+     */
+    @Override
+    long executeOp(int daemonId, int inputIdx, String clientName)
+        throws IOException {
+      long start = Time.now();
+      nameNodeProto.mkdirs(dirPaths[daemonId][inputIdx],
+          FsPermission.getDefault(), true);
+      long end = Time.now();
+      return end-start;
+    }
+
+    @Override
+    void printResults() {
+      LOG.info("--- " + getOpName() + " inputs ---");
+      LOG.info("nrDirs = " + numOpsRequired);
+      LOG.info("nrThreads = " + numThreads);
+      LOG.info("nrDirsPerDir = " + nameGenerator.getFilesPerDirectory());
+      printStats();
+    }
+  }
+
+  /**
-      storage = new DatanodeStorage(dnRegistration.getDatanodeUuid());
+      storage = new DatanodeStorage(DatanodeStorage.generateUuid());
-      StorageReport[] rep = { new StorageReport(dnRegistration.getDatanodeUuid(),
-          false, DF_CAPACITY, DF_USED, DF_CAPACITY - DF_USED, DF_USED) };
+      StorageReport[] rep = { new StorageReport(storage, false,
+          DF_CAPACITY, DF_USED, DF_CAPACITY - DF_USED, DF_USED) };
-      StorageReport[] rep = { new StorageReport(dnRegistration.getDatanodeUuid(),
+      StorageReport[] rep = { new StorageReport(storage,
-            return transferBlocks(bcmd.getBlocks(), bcmd.getTargets());
+            return transferBlocks(bcmd.getBlocks(), bcmd.getTargets(),
+                                  bcmd.getTargetStorageIDs());
-                                DatanodeInfo xferTargets[][] 
+                                DatanodeInfo xferTargets[][],
+                                String targetStorageIDs[][]
+          String targetStorageID = targetStorageIDs[i][t];
-              receivedDNReg.getDatanodeUuid(), rdBlocks) };
+              targetStorageID, rdBlocks) };
-      LOG.info("Creating " + nrFiles + " with " + blocksPerFile + " blocks each.");
+      LOG.info("Creating " + nrFiles + " files with " + blocksPerFile + " blocks each.");
-              datanodes[dnIdx].dnRegistration.getDatanodeUuid(), rdBlocks) };
+              datanodes[dnIdx].storage.getStorageID(), rdBlocks) };
+        + " | \n\t" + MkdirsStats.OP_MKDIRS_USAGE
+      if(runAll || MkdirsStats.OP_MKDIRS_NAME.equals(type)) {
+        opStat = new MkdirsStats(args);
+        ops.add(opStat);
+      }

INS55 INS29 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS5 INS59 INS42 INS44 INS8 INS78 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS43 INS42 INS44 INS8 INS29 INS78 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS39 INS42 INS8 INS44 INS66 INS66 INS66 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS43 INS85 INS85 INS42 INS74 INS42 INS46 INS21 INS42 INS42 INS41 INS42 INS74 INS42 INS60 INS60 INS24 INS21 INS42 INS5 INS42 INS42 INS6 INS21 INS21 INS21 INS24 INS65 INS42 INS42 INS39 INS42 INS41 INS65 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS41 INS42 INS21 INS21 INS21 INS21 INS21 INS60 MOV60 INS43 INS42 INS85 INS85 INS45 INS45 INS42 INS43 INS43 INS32 INS42 INS43 INS43 INS39 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS7 INS39 INS85 INS27 INS45 INS32 INS32 INS7 INS58 INS27 INS37 INS8 INS66 INS32 INS66 INS42 INS39 INS59 INS32 INS39 INS59 INS27 INS32 INS32 INS32 INS32 INS32 MOV5 INS59 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS14 INS40 INS42 INS42 INS42 INS40 INS9 INS42 INS42 INS27 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS60 INS21 INS24 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS32 INS9 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS4 INS40 INS45 INS27 INS8 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS8 INS25 INS43 INS32 INS42 INS45 INS42 INS45 INS32 INS5 INS42 INS42 INS34 INS39 INS59 INS7 INS58 INS27 INS37 INS21 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS45 INS42 INS45 INS42 INS45 INS32 INS14 UPD45 INS42 INS32 INS21 INS21 INS32 INS42 INS45 INS25 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS43 INS85 INS85 INS42 INS2 INS2 INS3 INS39 INS59 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV43 INS42 INS9 INS42 INS42 MOV27 INS42 INS42 INS60 INS40 INS42 INS42 INS7 INS32 INS42 INS42 INS42 INS27 INS21 INS7 INS32 INS42 INS45 INS25 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS5 INS42 INS42 INS34 INS2 INS32 INS43 INS59 INS42 INS14 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS21 INS7 INS32 INS42 INS45 INS25 INS21 INS38 INS21 INS43 INS85 INS2 INS42 INS42 INS42 INS45 INS42 INS42 INS2 INS43 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS21 INS7 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS38 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS42 INS38 UPD42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL9 DEL42 DEL42 DEL42 DEL14 DEL4 DEL59 DEL60 DEL42 DEL42 DEL32