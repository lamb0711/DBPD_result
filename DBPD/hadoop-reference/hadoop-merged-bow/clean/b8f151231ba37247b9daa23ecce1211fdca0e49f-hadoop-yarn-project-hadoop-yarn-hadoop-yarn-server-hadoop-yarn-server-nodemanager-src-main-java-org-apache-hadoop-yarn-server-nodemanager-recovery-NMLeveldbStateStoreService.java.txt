YARN-1354. Recover applications upon nodemanager restart. (Contributed by Jason Lowe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615550 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.ContainerManagerApplicationProto;
+  private static final String APPLICATIONS_KEY_PREFIX =
+      "ContainerManager/applications/";
+  private static final String FINISHED_APPS_KEY_PREFIX =
+      "ContainerManager/finishedApps/";
+
+  public RecoveredApplicationsState loadApplicationsState()
+      throws IOException {
+    RecoveredApplicationsState state = new RecoveredApplicationsState();
+    state.applications = new ArrayList<ContainerManagerApplicationProto>();
+    String keyPrefix = APPLICATIONS_KEY_PREFIX;
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      iter.seek(bytes(keyPrefix));
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> entry = iter.next();
+        String key = asString(entry.getKey());
+        if (!key.startsWith(keyPrefix)) {
+          break;
+        }
+        state.applications.add(
+            ContainerManagerApplicationProto.parseFrom(entry.getValue()));
+      }
+
+      state.finishedApplications = new ArrayList<ApplicationId>();
+      keyPrefix = FINISHED_APPS_KEY_PREFIX;
+      iter.seek(bytes(keyPrefix));
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> entry = iter.next();
+        String key = asString(entry.getKey());
+        if (!key.startsWith(keyPrefix)) {
+          break;
+        }
+        ApplicationId appId =
+            ConverterUtils.toApplicationId(key.substring(keyPrefix.length()));
+        state.finishedApplications.add(appId);
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+
+    return state;
+  }
+
+  @Override
+  public void storeApplication(ApplicationId appId,
+      ContainerManagerApplicationProto p) throws IOException {
+    String key = APPLICATIONS_KEY_PREFIX + appId;
+    try {
+      db.put(bytes(key), p.toByteArray());
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void storeFinishedApplication(ApplicationId appId)
+      throws IOException {
+    String key = FINISHED_APPS_KEY_PREFIX + appId;
+    try {
+      db.put(bytes(key), new byte[0]);
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public void removeApplication(ApplicationId appId)
+      throws IOException {
+    try {
+      WriteBatch batch = db.createWriteBatch();
+      try {
+        String key = APPLICATIONS_KEY_PREFIX + appId;
+        batch.delete(bytes(key));
+        key = FINISHED_APPS_KEY_PREFIX + appId;
+        batch.delete(bytes(key));
+        db.write(batch);
+      } finally {
+        batch.close();
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+
+  @Override

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS60 INS21 INS60 INS60 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS54 INS43 INS59 INS7 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS8 INS12 INS42 INS8 INS12 INS42 INS42 INS14 INS40 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS61 INS21 INS21 INS21 INS61 INS44 INS8 INS25 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS27 INS21 INS44 INS8 INS60 INS54 INS44 INS8 INS43 INS74 INS7 INS32 INS32 INS8 INS7 INS7 INS32 INS32 INS8 INS43 INS42 INS53 INS27 INS8 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS59 INS8 INS8 INS43 INS42 INS53 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS21 INS40 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS60 INS21 INS42 INS14 INS42 INS33 INS21 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS32 INS3 INS42 INS14 INS42 INS42 INS32 INS60 INS21 INS21 INS21 INS21 INS21 INS42 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS38 INS8 INS32 INS74 INS42 INS42 INS74 INS59 INS43 INS59 INS38 INS8 INS43 INS59 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS5 INS34 INS43 INS42 INS42 INS42 INS43 INS59 INS32 INS7 INS32 INS32 INS32 INS43 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS40 INS42 INS32 INS43 INS43 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42