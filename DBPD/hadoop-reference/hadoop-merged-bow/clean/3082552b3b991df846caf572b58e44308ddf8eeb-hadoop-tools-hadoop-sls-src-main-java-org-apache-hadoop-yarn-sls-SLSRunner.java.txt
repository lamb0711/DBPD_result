YARN-6522. Make SLS JSON input file format simple and scalable (yufeigu via rkanter)

+  private final static int DEFAULT_MAPPER_PRIORITY = 20;
+  private final static int DEFAULT_REDUCER_PRIORITY = 10;
+
-          nodeSet.addAll(SLSUtils.generateNodesFromSynth(stjp.getNumNodes(),
-              stjp.getNodesPerRack()));
+          nodeSet.addAll(SLSUtils.generateNodes(stjp.getNumNodes(),
+              stjp.getNumNodes()/stjp.getNodesPerRack()));
+    if (nodeSet.size() == 0) {
+      throw new YarnException("No node! Please configure nodes.");
+    }
+
-    long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString());
+
+    long jobFinishTime = 0;
+    if (jsonJob.containsKey("job.end.ms")) {
+      jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString());
+    }
-    String oldAppId = jsonJob.get("job.id").toString();
+    String oldAppId = (String)jsonJob.get("job.id");
+    if (oldAppId == null) {
+      oldAppId = Integer.toString(AM_ID);
+    }
-    // tasks
+    String amType = (String)jsonJob.get("am.type");
+    if (amType == null) {
+      amType = SLSUtils.DEFAULT_JOB_TYPE;
+    }
+
+    runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,
+        getTaskContainers(jsonJob), null);
+  }
+
+  private List<ContainerSimulator> getTaskContainers(Map jsonJob)
+      throws YarnException {
+    List<ContainerSimulator> containers = new ArrayList<>();
-    List<ContainerSimulator> containerList = new ArrayList<>();
-      String hostname = jsonTask.get("container.host").toString();
-      long taskStart = Long.parseLong(jsonTask.get("container.start.ms")
-          .toString());
-      long taskFinish = Long.parseLong(jsonTask.get("container.end.ms")
-          .toString());
-      long lifeTime = taskFinish - taskStart;
-      // Set memory and vcores from job trace file
+      String hostname = (String) jsonTask.get("container.host");
+
+      long duration = 0;
+      if (jsonTask.containsKey("duration.ms")) {
+        duration = Integer.parseInt(jsonTask.get("duration.ms").toString());
+      } else if (jsonTask.containsKey("container.start.ms") &&
+          jsonTask.containsKey("container.end.ms")) {
+        long taskStart = Long.parseLong(jsonTask.get("container.start.ms")
+            .toString());
+        long taskFinish = Long.parseLong(jsonTask.get("container.end.ms")
+            .toString());
+        duration = taskFinish - taskStart;
+      }
+      if (duration <= 0) {
+        throw new YarnException("Duration of a task shouldn't be less or equal"
+            + " to 0!");
+      }
+
-      int priority = Integer.parseInt(jsonTask.get("container.priority")
-          .toString());
-      String type = jsonTask.get("container.type").toString();
-      containerList.add(
-          new ContainerSimulator(res, lifeTime, hostname, priority, type));
+      int priority = DEFAULT_MAPPER_PRIORITY;
+      if (jsonTask.containsKey("container.priority")) {
+        priority = Integer.parseInt(jsonTask.get("container.priority")
+            .toString());
+      }
+
+      String type = "map";
+      if (jsonTask.containsKey("container.type")) {
+        type = jsonTask.get("container.type").toString();
+      }
+
+      int count = 1;
+      if (jsonTask.containsKey("count")) {
+        count = Integer.parseInt(jsonTask.get("count").toString());
+      }
+      count = Math.max(count, 1);
+
+      for (int i = 0; i < count; i++) {
+        containers.add(
+            new ContainerSimulator(res, duration, hostname, priority, type));
+      }
-    // create a new AM
-    String amType = jsonJob.get("am.type").toString();
-    runNewAM(amType, user, queue, oldAppId, jobStartTime, jobFinishTime,
-        containerList, null);
+    return containers;
-              containerLifeTime, hostname, 10, "map"));
+              containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, "map"));
-              containerLifeTime, hostname, 20, "reduce"));
+              containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, "reduce"));
-              containerLifeTime, hostname, 10, "map"));
+              containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, "map"));
-              containerLifeTime, hostname, 20, "reduce"));
+              containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, "reduce"));

INS23 INS23 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS74 INS42 MOV60 INS42 INS34 INS42 INS34 INS25 INS43 INS42 INS42 MOV60 INS60 INS25 MOV60 MOV25 MOV60 MOV21 MOV60 INS25 MOV60 INS25 INS21 INS43 INS43 INS41 INS27 INS8 INS42 INS39 INS59 INS32 INS8 INS43 INS27 INS8 INS43 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS34 INS53 INS42 INS34 INS42 INS42 INS45 INS21 INS42 INS11 INS42 INS33 INS21 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS33 UPD42 INS25 INS25 INS25 INS25 INS60 INS25 INS21 INS24 INS42 INS42 INS14 INS7 MOV43 MOV32 INS7 MOV43 MOV32 INS7 INS42 INS42 INS43 INS32 INS8 INS25 INS27 INS8 INS32 INS8 INS32 INS8 INS39 INS59 INS32 INS8 INS7 INS58 INS27 INS37 INS8 INS43 INS45 INS42 MOV32 INS42 INS32 INS42 INS40 INS42 INS11 UPD42 INS34 INS42 INS42 INS45 INS21 INS27 INS8 INS42 INS34 INS53 INS42 INS42 INS42 INS45 INS21 INS45 INS42 INS42 INS45 INS21 INS42 INS34 INS42 INS42 INS45 INS21 INS42 INS32 INS39 INS59 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS42 MOV43 MOV32 INS7 INS32 INS32 MOV60 MOV60 INS21 INS14 INS7 INS7 INS7 INS42 INS42 INS42 INS34 INS42 INS34 MOV32 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS43 INS27 INS42 MOV32 INS42 MOV32 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 MOV27 INS42 INS45 INS45 INS42 INS42 INS32 INS43 UPD42 UPD42 INS32 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 MOV32 INS42 INS42 INS45 INS42 INS42 INS45 MOV43 INS42 MOV43 INS42 DEL42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL34 DEL34 DEL34 DEL34