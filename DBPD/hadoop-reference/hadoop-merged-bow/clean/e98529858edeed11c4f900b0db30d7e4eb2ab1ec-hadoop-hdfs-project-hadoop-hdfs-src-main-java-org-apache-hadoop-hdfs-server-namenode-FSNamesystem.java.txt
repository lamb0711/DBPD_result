HDFS-6315. Decouple recording edit logs from FSDirectory. Contributed by Haohui Mai.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601960 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.XAttrHelper;
+      getEditLog().logSetPermissions(src, permission);
+      getEditLog().logSetOwner(src, username, group);
-            dir.setTimes(src, inode, -1, now, false, iip.getLatestSnapshotId());
+            boolean changed = dir.setTimes(inode, -1, now, false,
+                    iip.getLatestSnapshotId());
+            if (changed) {
+              getEditLog().logTimes(src, -1, now);
+            }
-    dir.concat(target,srcs, logRetryCache);
+    long timestamp = now();
+    dir.concat(target, srcs, timestamp);
+    getEditLog().logConcat(target, srcs, timestamp, logRetryCache);
-        dir.setTimes(src, inode, mtime, atime, true, iip.getLatestSnapshotId());
+        boolean changed = dir.setTimes(inode, mtime, atime, true,
+                iip.getLatestSnapshotId());
+        if (changed) {
+          getEditLog().logTimes(src, mtime, atime);
+        }
+        getEditLog().logSetReplication(src, replication);
-      dir.persistNewBlock(src, pendingFile);
+      persistNewBlock(src, pendingFile);
-      dir.persistBlocks(src, file, false);
+      persistBlocks(src, file, false);
-    if (dir.renameTo(src, dst, logRetryCache)) {
+    long mtime = now();
+    if (dir.renameTo(src, dst, mtime)) {
+      getEditLog().logRename(src, dst, mtime, logRetryCache);
-    dir.renameTo(src, dst, logRetryCache, options);
+    long mtime = now();
+    dir.renameTo(src, dst, mtime, options);
+    getEditLog().logRename(src, dst, mtime, logRetryCache, options);
+      long mtime = now();
-      if (!dir.delete(src, collectedBlocks, removedINodes, logRetryCache)) {
+      long filesRemoved = dir.delete(src, collectedBlocks, removedINodes,
+              mtime);
+      if (filesRemoved < 0) {
+      getEditLog().logDelete(src, mtime, logRetryCache);
+      incrDeletedFileCount(filesRemoved);
+      // Blocks/INodes will be handled later
+      removePathAndBlocks(src, null, null);
-  void setQuota(String path, long nsQuota, long dsQuota) 
+  void setQuota(String path, long nsQuota, long dsQuota)
-      dir.setQuota(path, nsQuota, dsQuota);
+      INodeDirectory changed = dir.setQuota(path, nsQuota, dsQuota);
+      if (changed != null) {
+        final Quota.Counts q = changed.getQuotaCounts();
+        getEditLog().logSetQuota(path,
+                q.get(Quota.NAMESPACE), q.get(Quota.DISKSPACE));
+      }
-      dir.persistBlocks(src, pendingFile, false);
+      persistBlocks(src, pendingFile, false);
-    dir.closeFile(src, newFile);
+    closeFile(src, newFile);
-        src = persistBlocks(iFile, false);
+        src = iFile.getFullPathName();
+        persistBlocks(src, iFile, false);
-   * Persist the block list for the given file.
-   *
-   * @param pendingFile
-   * @return Path to the given file.
-   * @throws IOException
-   */
-  @VisibleForTesting
-  String persistBlocks(INodeFile pendingFile, boolean logRetryCache)
-      throws IOException {
-    String src = pendingFile.getFullPathName();
-    dir.persistBlocks(src, pendingFile, logRetryCache);
-    return src;
-  }
-
-  /**
+   * Persist the block list for the inode.
+   * @param path
+   * @param file
+   * @param logRetryCache
+   */
+  private void persistBlocks(String path, INodeFile file,
+                             boolean logRetryCache) {
+    assert hasWriteLock();
+    Preconditions.checkArgument(file.isUnderConstruction());
+    getEditLog().logUpdateBlocks(path, file, logRetryCache);
+    if(NameNode.stateChangeLog.isDebugEnabled()) {
+      NameNode.stateChangeLog.debug("persistBlocks: " + path
+              + " with " + file.getBlocks().length + " blocks is persisted to" +
+              " the file system");
+    }
+  }
+
+  void incrDeletedFileCount(long count) {
+    NameNode.getNameNodeMetrics().incrFilesDeleted(count);
+  }
+
+  /**
+   * Close file.
+   * @param path
+   * @param file
+   */
+  private void closeFile(String path, INodeFile file) {
+    assert hasWriteLock();
+    dir.waitForReady();
+    // file is closed
+    getEditLog().logCloseFile(path, file);
+    if (NameNode.stateChangeLog.isDebugEnabled()) {
+      NameNode.stateChangeLog.debug("closeFile: "
+              +path+" with "+ file.getBlocks().length
+              +" blocks is persisted to the file system");
+    }
+  }
+
+  /**
+   * Persist the new block (the last block of the given file).
+   * @param path
+   * @param file
+   */
+  private void persistNewBlock(String path, INodeFile file) {
+    Preconditions.checkArgument(file.isUnderConstruction());
+    getEditLog().logAddBlock(path, file);
+    if (NameNode.stateChangeLog.isDebugEnabled()) {
+      NameNode.stateChangeLog.debug("persistNewBlock: "
+              + path + " with new block " + file.getLastBlock().toString()
+              + ", current total block count is " + file.getBlocks().length);
+    }
+  }
+
+  /**
-    dir.persistBlocks(src, pendingFile, logRetryCache);
+    persistBlocks(src, pendingFile, logRetryCache);
-      dir.modifyAclEntries(src, aclSpec);
+      List<AclEntry> newAcl = dir.modifyAclEntries(src, aclSpec);
+      getEditLog().logSetAcl(src, newAcl);
-      dir.removeAclEntries(src, aclSpec);
+      List<AclEntry> newAcl = dir.removeAclEntries(src, aclSpec);
+      getEditLog().logSetAcl(src, newAcl);
-      dir.removeDefaultAcl(src);
+      List<AclEntry> newAcl = dir.removeDefaultAcl(src);
+      getEditLog().logSetAcl(src, newAcl);
+      getEditLog().logSetAcl(src, AclFeature.EMPTY_ENTRY_LIST);
-      dir.setAcl(src, aclSpec);
+      List<AclEntry> newAcl = dir.setAcl(src, aclSpec);
+      getEditLog().logSetAcl(src, newAcl);
-      dir.setXAttr(src, xAttr, flag, logRetryCache);
+      dir.setXAttr(src, xAttr, flag);
+      getEditLog().logSetXAttr(src, xAttr, logRetryCache);
-      dir.removeXAttr(src, xAttr);
+      XAttr removedXAttr = dir.removeXAttr(src, xAttr);
+      if (removedXAttr != null) {
+        getEditLog().logRemoveXAttr(src, removedXAttr);
+      }

INS31 INS31 INS31 INS31 MOV29 INS83 INS39 INS42 INS44 MOV44 MOV44 INS8 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS60 INS21 INS60 INS60 INS21 UPD65 UPD65 INS43 INS42 UPD42 INS6 INS21 INS21 INS25 INS39 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS6 INS21 INS21 INS25 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS21 INS25 INS39 INS59 INS32 INS39 INS59 INS39 INS59 INS32 UPD66 UPD42 INS42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS8 INS32 INS66 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS32 INS32 INS8 INS66 INS42 INS42 MOV42 INS42 INS32 INS32 INS32 INS8 INS21 INS21 INS42 INS32 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS21 INS42 INS32 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS60 INS25 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS42 MOV21 INS60 INS60 INS60 INS21 INS60 INS21 INS21 INS60 INS25 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS39 INS59 INS39 INS59 INS27 MOV8 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS74 INS59 INS32 INS74 INS59 INS32 INS74 INS59 INS32 INS32 INS74 INS59 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS60 INS25 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS42 INS42 MOV32 INS42 INS33 INS60 MOV21 INS21 INS21 INS40 INS42 INS27 INS40 INS42 INS27 INS40 UPD42 INS27 INS43 INS43 INS42 MOV32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 MOV32 INS32 INS42 INS42 INS42 INS43 INS43 INS42 MOV32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS43 INS43 INS42 MOV32 INS32 INS42 INS42 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 INS32 INS42 INS42 INS42 MOV42 INS42 INS42 MOV32 INS42 INS33 MOV21 INS42 INS42 INS39 INS59 INS42 INS8 INS32 INS42 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 INS42 INS83 INS43 INS59 INS32 INS7 INS32 INS45 INS42 INS45 INS22 INS45 INS45 INS45 INS42 INS45 INS22 INS45 INS45 INS42 INS45 INS32 INS45 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS32 INS32 MOV42 INS32 MOV42 INS42 MOV42 MOV9 INS32 INS42 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV9 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS60 INS25 INS32 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS8 INS42 INS42 MOV32 MOV21 INS32 INS32 INS42 INS42 INS38 INS42 INS42 INS34 DEL40 DEL26 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL78 DEL43 DEL42 DEL43 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL66 DEL42 DEL42 DEL32 DEL21