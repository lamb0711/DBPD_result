Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import java.io.File;
+import org.apache.hadoop.fs.FileSystem;
+   * Function to get the local dirs which should be considered for reading
+   * existing files on disk. Contains the good local dirs and the local dirs
+   * that have reached the disk space limit
+   *
+   * @return the local dirs which should be considered for reading
+   */
+  public List<String> getLocalDirsForRead() {
+    return DirectoryCollection.concat(localDirs.getGoodDirs(),
+        localDirs.getFullDirs());
+  }
+
+  /**
+   * Function to get the log dirs which should be considered for reading
+   * existing files on disk. Contains the good log dirs and the log dirs that
+   * have reached the disk space limit
+   *
+   * @return the log dirs which should be considered for reading
+   */
+  public List<String> getLogDirsForRead() {
+    return DirectoryCollection.concat(logDirs.getGoodDirs(),
+        logDirs.getFullDirs());
+  }
+
+  /**
+  private Path getPathToRead(String pathStr, List<String> dirs)
+      throws IOException {
+    // remove the leading slash from the path (to make sure that the uri
+    // resolution results in a valid path on the dir being checked)
+    if (pathStr.startsWith("/")) {
+      pathStr = pathStr.substring(1);
+    }
+
+    FileSystem localFS = FileSystem.getLocal(getConfig());
+    for (String dir : dirs) {
+      try {
+        Path tmpDir = new Path(dir);
+        File tmpFile = tmpDir.isAbsolute()
+            ? new File(localFS.makeQualified(tmpDir).toUri())
+            : new File(dir);
+        Path file = new Path(tmpFile.getPath(), pathStr);
+        if (localFS.exists(file)) {
+          return file;
+        }
+      } catch (IOException ie) {
+        // ignore
+        LOG.warn("Failed to find " + pathStr + " at " + dir, ie);
+      }
+    }
+
+    throw new IOException("Could not find " + pathStr + " in any of" +
+        " the directories");
+  }
+
-    return logDirsAllocator.getLocalPathToRead(pathStr, getConfig());
+    return getPathToRead(pathStr, getLogDirsForRead());
-  
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS8 INS83 MOV43 INS42 MOV44 INS44 MOV43 INS8 INS43 INS44 INS43 INS65 INS65 INS43 INS43 INS41 INS65 INS65 INS43 INS43 INS41 INS74 INS42 INS25 INS60 INS70 INS53 INS42 INS43 INS42 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS43 INS43 INS32 INS8 INS43 INS59 INS44 INS42 INS8 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS21 INS42 INS42 INS32 INS43 INS42 INS54 INS43 INS27 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 MOV32 INS42 INS8 INS12 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS32 INS60 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS42 INS21 INS42 INS42 INS14 INS42 INS42 INS16 INS42 INS42 INS14 INS42 INS42 INS42 INS41 INS42 INS32 INS43 INS42 INS32 INS14 INS14 INS43 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL42