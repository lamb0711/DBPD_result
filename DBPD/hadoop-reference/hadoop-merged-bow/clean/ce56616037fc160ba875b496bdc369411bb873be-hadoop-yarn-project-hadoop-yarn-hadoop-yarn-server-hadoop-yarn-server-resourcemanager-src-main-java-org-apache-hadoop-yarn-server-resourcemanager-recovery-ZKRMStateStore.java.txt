YARN-1776. Fixed DelegationToken renewal to survive RM failover. Contributed by Zhijie Shen

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580154 13f79535-47bb-0310-9956-ffa450edef68

+    addStoreOrUpdateOps(
+        opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);
+    doMultiWithRetries(opList);
+  }
+
+  @Override
+  protected synchronized void removeRMDelegationTokenState(
+      RMDelegationTokenIdentifier rmDTIdentifier) throws Exception {
+    ArrayList<Op> opList = new ArrayList<Op>();
+    String nodeRemovePath =
+        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX
+            + rmDTIdentifier.getSequenceNumber());
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Removing RMDelegationToken_"
+          + rmDTIdentifier.getSequenceNumber());
+    }
+    if (zkClient.exists(nodeRemovePath, true) != null) {
+      opList.add(Op.delete(nodeRemovePath, -1));
+    } else {
+      LOG.info("Attempted to delete a non-existing znode " + nodeRemovePath);
+    }
+    doMultiWithRetries(opList);
+  }
+
+  @Override
+  protected void updateRMDelegationTokenAndSequenceNumberInternal(
+      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,
+      int latestSequenceNumber) throws Exception {
+    ArrayList<Op> opList = new ArrayList<Op>();
+    String nodeRemovePath =
+        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX
+            + rmDTIdentifier.getSequenceNumber());
+    if (zkClient.exists(nodeRemovePath, true) == null) {
+      // in case znode doesn't exist
+      addStoreOrUpdateOps(
+          opList, rmDTIdentifier, renewDate, latestSequenceNumber, false);
+      LOG.info("Attempted to update a non-existing znode " + nodeRemovePath);
+    } else {
+      // in case znode exists
+      addStoreOrUpdateOps(
+          opList, rmDTIdentifier, renewDate, latestSequenceNumber, true);
+    }
+    doMultiWithRetries(opList);
+  }
+
+  private void addStoreOrUpdateOps(ArrayList<Op> opList,
+      RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate,
+      int latestSequenceNumber, boolean isUpdate) throws Exception {
-        LOG.debug("Storing RMDelegationToken_" +
+        LOG.debug((isUpdate ? "Storing " : "Updating ") + "RMDelegationToken_" +
-      opList.add(Op.create(nodeCreatePath, tokenOs.toByteArray(), zkAcl,
-          CreateMode.PERSISTENT));
+      if (isUpdate) {
+        opList.add(Op.setData(nodeCreatePath, tokenOs.toByteArray(), -1));
+      } else {
+        opList.add(Op.create(nodeCreatePath, tokenOs.toByteArray(), zkAcl,
+            CreateMode.PERSISTENT));
+      }
-        LOG.debug("Storing " + dtSequenceNumberPath +
+        LOG.debug((isUpdate ? "Storing " : "Updating ") + dtSequenceNumberPath +
-
-    doMultiWithRetries(opList);
-  }
-
-  @Override
-  protected synchronized void removeRMDelegationTokenState(
-      RMDelegationTokenIdentifier rmDTIdentifier) throws Exception {
-    String nodeRemovePath =
-        getNodePath(delegationTokensRootPath, DELEGATION_TOKEN_PREFIX
-            + rmDTIdentifier.getSequenceNumber());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Removing RMDelegationToken_"
-          + rmDTIdentifier.getSequenceNumber());
-    }
-    deleteWithRetries(nodeRemovePath, -1);
-    deleteWithRetries(nodeRemovePath, -1);
+    if (zkClient.exists(nodeRemovePath, true) != null) {
+      doMultiWithRetries(Op.delete(nodeRemovePath, -1));
+    } else {
+      LOG.info("Attempted to delete a non-existing znode " + nodeRemovePath);
+    }
-  private void deleteWithRetries(final String path, final int version)
-      throws Exception {
-    try {
-      doMultiWithRetries(Op.delete(path, version));
-    } catch (KeeperException.NoNodeException nne) {
-      // We tried to delete a node that doesn't exist
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Attempted to delete a non-existing znode " + path);
-      }
-    }
-  }
-

MOV31 INS31 INS31 MOV78 UPD83 MOV83 INS83 MOV39 INS42 INS44 MOV44 MOV44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 MOV43 INS8 UPD83 INS42 INS44 INS44 INS43 INS42 UPD43 UPD42 UPD42 INS42 MOV60 MOV21 INS21 INS60 INS25 MOV21 INS42 INS43 INS42 UPD43 MOV43 UPD42 MOV42 INS39 INS42 INS60 INS60 MOV25 INS21 INS74 INS42 INS39 INS42 INS25 INS42 UPD42 INS32 INS74 INS59 INS27 INS8 INS8 INS42 INS42 INS74 INS59 INS43 INS59 INS27 INS8 INS32 INS43 INS43 INS27 INS8 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 INS42 INS42 INS43 INS43 INS42 INS14 INS32 INS33 MOV21 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS32 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS25 INS32 INS33 MOV21 INS21 INS42 INS42 INS74 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS74 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS9 INS32 INS32 INS42 INS8 INS8 INS42 INS42 INS42 INS9 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 INS42 INS42 INS42 INS42 INS42 INS9 INS21 MOV21 UPD42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV38 INS45 INS42 INS42 INS42 INS42 INS42 UPD45 UPD42 INS32 INS42 INS42 MOV42 MOV38 INS45 INS42 INS42 INS42 INS32 INS36 UPD45 INS42 INS42 INS42 INS32 INS38 INS36 INS16 INS42 INS42 INS34 INS16 INS42 INS45 INS45 INS42 INS45 INS45 DEL83 DEL83 DEL32 DEL32 DEL40 DEL32 DEL83 DEL42 DEL45 DEL42 DEL8 DEL44 DEL8 DEL12 DEL54 DEL8 DEL31