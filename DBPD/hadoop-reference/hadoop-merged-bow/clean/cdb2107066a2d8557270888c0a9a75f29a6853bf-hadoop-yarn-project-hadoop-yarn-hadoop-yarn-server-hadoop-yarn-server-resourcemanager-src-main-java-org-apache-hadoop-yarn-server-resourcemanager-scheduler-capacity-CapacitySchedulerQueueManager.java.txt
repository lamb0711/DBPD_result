YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.

-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.concurrent.ConcurrentHashMap;
-  static final Comparator<CSQueue> NON_PARTITIONED_QUEUE_COMPARATOR =
-      new Comparator<CSQueue>() {
-    @Override
-    public int compare(CSQueue q1, CSQueue q2) {
-      int result = Float.compare(q1.getUsedCapacity(),
-          q2.getUsedCapacity());
-      if (result < 0) {
-        return -1;
-      } else if (result > 0) {
-        return 1;
-      }
-
-      return q1.getQueuePath().compareTo(q2.getQueuePath());
-    }
-  };
-
-  private final Map<String, CSQueue> queues = new ConcurrentHashMap<>();
+  private final CSQueueStore queues = new CSQueueStore();
-    return queues;
+    return queues.getFullNameQueues();
+  }
+
+  @VisibleForTesting
+  public Map<String, CSQueue> getShortNameQueues() {
+    return queues.getShortNameQueues();
-    this.queues.put(queueName, queue);
+    this.queues.add(queue);
+  public CSQueue getQueueByFullName(String name) {
+    return queues.getByFullName(name);
+  }
+
+  String normalizeQueueName(String name) {
+    CSQueue queue = this.queues.get(name);
+    if (queue != null) {
+      return queue.getQueuePath();
+    }
+    //We return the original name here instead of null, to make sure we don't
+    // introduce a NPE, and let the process fail where it would fail for unknown
+    // queues, resulting more informative error messages.
+    return name;
+  }
+
+  public boolean isAmbiguous(String shortName) {
+    return queues.isAmbiguous(shortName);
+  }
+
-    Map<String, CSQueue> newQueues = new HashMap<>();
+    CSQueueStore newQueues = new CSQueueStore();
-      CSQueue parent, String queueName, Map<String, CSQueue> queues,
-      Map<String, CSQueue> oldQueues,
+      CSQueue parent, String queueName,
+      CSQueueStore queues,
+      CSQueueStore oldQueues,
-            oldQueues.get(queueName));
+            oldQueues.get(fullQueueName));
-        queues.put(defReservationId, resQueue);
+        queues.add(resQueue);
-            oldQueues.get(queueName));
+            oldQueues.get(fullQueueName));
-            oldQueues.get(queueName));
+            oldQueues.get(fullQueueName));
-            "Only Leaf Queues can be reservable for " + queueName);
+            "Only Leaf Queues can be reservable for " + fullQueueName);
-            oldQueues.get(queueName));
+            oldQueues.get(fullQueueName));
-            oldQueues.get(queueName));
+            oldQueues.get(fullQueueName));
-    if (queue instanceof LeafQueue && queues.containsKey(queueName) && queues
-        .get(queueName) instanceof LeafQueue) {
-      throw new IOException("Two leaf queues were named " + queueName
-          + ". Leaf queue names must be distinct");
-    }
-    queues.put(queueName, queue);
+    queues.add(queue);
-    LOG.info("Initialized queue: " + queue);
+    LOG.info("Initialized queue: " + fullQueueName);
-
-  private void updateQueues(Map<String, CSQueue> existingQueues,
-      Map<String, CSQueue> newQueues) {
+  private void updateQueues(CSQueueStore existingQueues,
+                            CSQueueStore newQueues) {
-    for (Map.Entry<String, CSQueue> e : newQueues.entrySet()) {
-      String queueName = e.getKey();
-      CSQueue queue = e.getValue();
-      if (!existingQueues.containsKey(queueName)) {
-        existingQueues.put(queueName, queue);
+    for (CSQueue queue : newQueues.getQueues()) {
+      if (existingQueues.get(queue.getQueuePath()) == null) {
+        existingQueues.add(queue);
-    for (Iterator<Map.Entry<String, CSQueue>> itr = existingQueues.entrySet()
-        .iterator(); itr.hasNext();) {
-      Map.Entry<String, CSQueue> e = itr.next();
-      String queueName = e.getKey();
-      CSQueue existingQueue = e.getValue();
-      if (!newQueues.containsKey(queueName) && !(
-          existingQueue instanceof AutoCreatedLeafQueue && conf
+    for (CSQueue queue: existingQueues.getQueues()) {
+      if (newQueues.get(queue.getQueuePath()) == null && !(
+          queue instanceof AutoCreatedLeafQueue && conf
-                  existingQueue.getParent().getQueuePath()))) {
-        itr.remove();
+                queue.getParent().getQueuePath()))) {
+        existingQueues.remove(queue);
+
-      AppPriorityACLsManager appPriorityACLManager, Map<String, CSQueue> queues)
+      AppPriorityACLsManager appPriorityACLManager, CSQueueStore queues)
-    for (CSQueue queue : queues.values()) {
+    for (CSQueue queue : queues.getQueues()) {
-        appPriorityACLManager.clearPriorityACLs(lQueue.getQueueName());
+        appPriorityACLManager.clearPriorityACLs(lQueue.getQueuePath());
-            lQueue.getQueueName());
+            lQueue.getQueuePath());
-      queueToLabels.put(queue.getQueueName(), queue.getAccessibleNodeLabels());
+      queueToLabels.put(queue.getQueuePath(), queue.getAccessibleNodeLabels());

MOV31 INS23 INS31 INS31 INS31 INS31 UPD83 MOV83 MOV83 INS43 INS59 MOV78 INS83 MOV74 INS42 INS8 INS78 UPD42 MOV78 MOV83 UPD39 MOV39 INS42 MOV44 MOV44 INS8 INS83 MOV43 INS42 INS44 INS8 MOV43 INS42 INS44 INS8 UPD39 INS42 INS44 UPD42 MOV42 INS42 INS14 INS41 INS42 INS21 MOV43 INS42 INS41 MOV43 INS42 INS60 INS25 INS41 MOV43 INS42 INS41 INS43 INS43 INS43 INS43 INS70 INS43 INS43 INS32 INS32 INS32 INS32 MOV43 INS59 UPD27 MOV27 INS8 INS42 INS32 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS44 INS32 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 UPD42 INS33 MOV41 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS43 UPD42 UPD42 INS43 INS42 MOV42 UPD42 MOV42 MOV25 UPD42 INS52 INS42 UPD42 UPD42 INS43 UPD42 MOV42 INS27 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 INS33 INS27 MOV42 UPD42 MOV42 INS32 INS32 INS33 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL78 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL34 DEL38 DEL41 DEL8 DEL34 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL42 DEL34 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL21 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL40 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL38 DEL42 DEL32 DEL38 DEL42 DEL43 DEL40 DEL43 DEL43 DEL74 DEL74 DEL42 DEL32 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74