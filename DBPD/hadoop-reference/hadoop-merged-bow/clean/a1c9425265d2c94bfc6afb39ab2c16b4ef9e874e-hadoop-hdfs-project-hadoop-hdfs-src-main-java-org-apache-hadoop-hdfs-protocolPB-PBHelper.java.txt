HDFS-8146. Protobuf changes for BlockECRecoveryCommand and its fields for making it ready for transfer to DN (Contributed by Uma Maheswara Rao G)

+import java.util.Collection;
-import org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos;
+import org.apache.hadoop.hdfs.protocol.proto.*;
+import org.apache.hadoop.hdfs.protocol.proto.DatanodeProtocolProtos.BlockECRecoveryCommandProto;
+import org.apache.hadoop.hdfs.protocol.proto.ErasureCodingProtos.BlockECRecoveryInfoProto;
-import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos;
-import org.apache.hadoop.hdfs.protocol.proto.InotifyProtos;
+import org.apache.hadoop.hdfs.server.protocol.BlockECRecoveryCommand;
+import org.apache.hadoop.hdfs.server.protocol.BlockECRecoveryCommand.BlockECRecoveryInfo;
+  
+  public static BlockECRecoveryInfo convertBlockECRecoveryInfo(
+      BlockECRecoveryInfoProto blockEcRecoveryInfoProto) {
+    ExtendedBlockProto blockProto = blockEcRecoveryInfoProto.getBlock();
+    ExtendedBlock block = convert(blockProto);
+
+    DatanodeInfosProto sourceDnInfosProto = blockEcRecoveryInfoProto
+        .getSourceDnInfos();
+    DatanodeInfo[] sourceDnInfos = convert(sourceDnInfosProto);
+
+    DatanodeInfosProto targetDnInfosProto = blockEcRecoveryInfoProto
+        .getTargetDnInfos();
+    DatanodeInfo[] targetDnInfos = convert(targetDnInfosProto);
+
+    StorageUuidsProto targetStorageUuidsProto = blockEcRecoveryInfoProto
+        .getTargetStorageUuids();
+    String[] targetStorageUuids = convert(targetStorageUuidsProto);
+
+    StorageTypesProto targetStorageTypesProto = blockEcRecoveryInfoProto
+        .getTargetStorageTypes();
+    StorageType[] convertStorageTypes = convertStorageTypes(
+        targetStorageTypesProto.getStorageTypesList(), targetStorageTypesProto
+            .getStorageTypesList().size());
+
+    List<Integer> liveBlockIndicesList = blockEcRecoveryInfoProto
+        .getLiveBlockIndicesList();
+    short[] liveBlkIndices = new short[liveBlockIndicesList.size()];
+    for (int i = 0; i < liveBlockIndicesList.size(); i++) {
+      liveBlkIndices[i] = liveBlockIndicesList.get(i).shortValue();
+    }
+
+    return new BlockECRecoveryInfo(block, sourceDnInfos, targetDnInfos,
+        targetStorageUuids, convertStorageTypes, liveBlkIndices);
+  }
+
+  public static BlockECRecoveryInfoProto convertBlockECRecoveryInfo(
+      BlockECRecoveryInfo blockEcRecoveryInfo) {
+    BlockECRecoveryInfoProto.Builder builder = BlockECRecoveryInfoProto
+        .newBuilder();
+    builder.setBlock(convert(blockEcRecoveryInfo.getExtendedBlock()));
+
+    DatanodeInfo[] sourceDnInfos = blockEcRecoveryInfo.getSourceDnInfos();
+    builder.setSourceDnInfos(convertToDnInfosProto(sourceDnInfos));
+
+    DatanodeInfo[] targetDnInfos = blockEcRecoveryInfo.getTargetDnInfos();
+    builder.setTargetDnInfos(convertToDnInfosProto(targetDnInfos));
+
+    String[] targetStorageIDs = blockEcRecoveryInfo.getTargetStorageIDs();
+    builder.setTargetStorageUuids(convertStorageIDs(targetStorageIDs));
+
+    StorageType[] targetStorageTypes = blockEcRecoveryInfo
+        .getTargetStorageTypes();
+    builder.setTargetStorageTypes(convertStorageTypesProto(targetStorageTypes));
+
+    short[] liveBlockIndices = blockEcRecoveryInfo.getLiveBlockIndices();
+    builder.addAllLiveBlockIndices(convertIntArray(liveBlockIndices));
+
+    return builder.build();
+  }
+
+  private static List<Integer> convertIntArray(short[] liveBlockIndices) {
+    List<Integer> liveBlockIndicesList = new ArrayList<Integer>();
+    for (short s : liveBlockIndices) {
+      liveBlockIndicesList.add((int) s);
+    }
+    return liveBlockIndicesList;
+  }
+
+  private static StorageTypesProto convertStorageTypesProto(
+      StorageType[] targetStorageTypes) {
+    StorageTypesProto.Builder builder = StorageTypesProto.newBuilder();
+    for (StorageType storageType : targetStorageTypes) {
+      builder.addStorageTypes(convertStorageType(storageType));
+    }
+    return builder.build();
+  }
+
+  private static StorageUuidsProto convertStorageIDs(String[] targetStorageIDs) {
+    StorageUuidsProto.Builder builder = StorageUuidsProto.newBuilder();
+    for (String storageUuid : targetStorageIDs) {
+      builder.addStorageUuids(storageUuid);
+    }
+    return builder.build();
+  }
+
+  private static DatanodeInfosProto convertToDnInfosProto(DatanodeInfo[] dnInfos) {
+    DatanodeInfosProto.Builder builder = DatanodeInfosProto.newBuilder();
+    for (DatanodeInfo datanodeInfo : dnInfos) {
+      builder.addDatanodes(convert(datanodeInfo));
+    }
+    return builder.build();
+  }
+
+  private static String[] convert(StorageUuidsProto targetStorageUuidsProto) {
+    List<String> storageUuidsList = targetStorageUuidsProto
+        .getStorageUuidsList();
+    String[] storageUuids = new String[storageUuidsList.size()];
+    for (int i = 0; i < storageUuidsList.size(); i++) {
+      storageUuids[i] = storageUuidsList.get(i);
+    }
+    return storageUuids;
+  }
+  
+  public static BlockECRecoveryCommandProto convert(
+      BlockECRecoveryCommand blkECRecoveryCmd) {
+    BlockECRecoveryCommandProto.Builder builder = BlockECRecoveryCommandProto
+        .newBuilder();
+    Collection<BlockECRecoveryInfo> blockECRecoveryInfos = blkECRecoveryCmd
+        .getECTasks();
+    for (BlockECRecoveryInfo blkECRecoveryInfo : blockECRecoveryInfos) {
+      builder
+          .addBlockECRecoveryinfo(convertBlockECRecoveryInfo(blkECRecoveryInfo));
+    }
+    return builder.build();
+  }
+  
+  public static BlockECRecoveryCommand convert(
+      BlockECRecoveryCommandProto blkECRecoveryCmdProto) {
+    Collection<BlockECRecoveryInfo> blkECRecoveryInfos = new ArrayList<BlockECRecoveryInfo>();
+    List<BlockECRecoveryInfoProto> blockECRecoveryinfoList = blkECRecoveryCmdProto
+        .getBlockECRecoveryinfoList();
+    for (BlockECRecoveryInfoProto blockECRecoveryInfoProto : blockECRecoveryinfoList) {
+      blkECRecoveryInfos
+          .add(convertBlockECRecoveryInfo(blockECRecoveryInfoProto));
+    }
+    return new BlockECRecoveryCommand(DatanodeProtocol.DNA_ERASURE_CODING_RECOVERY,
+        blkECRecoveryInfos);
+  }

MOV26 MOV26 INS26 INS26 INS26 INS40 UPD40 UPD40 UPD40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS24 INS41 INS42 INS43 INS42 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS21 INS60 INS21 INS41 INS43 INS43 INS5 INS42 INS60 INS70 INS41 INS42 INS5 INS42 INS60 INS70 INS41 INS42 INS5 INS42 INS60 INS70 INS41 INS42 INS5 INS42 INS60 INS70 INS41 INS43 INS85 INS43 INS42 INS60 INS60 INS24 INS41 INS42 INS43 INS42 INS60 INS60 INS70 INS41 INS42 INS43 INS42 INS60 INS60 INS70 INS41 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS5 INS59 INS43 INS59 INS5 INS59 INS43 INS59 INS5 INS59 INS43 INS59 INS5 INS59 INS74 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS14 INS42 INS43 INS59 INS32 INS5 INS59 INS32 INS5 INS59 INS32 INS5 INS59 INS32 INS5 INS59 INS32 INS5 INS59 INS32 INS32 INS42 INS42 INS39 INS85 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS85 INS43 INS59 INS44 INS42 INS8 INS32 INS43 INS85 INS43 INS59 INS44 INS42 INS8 INS32 INS43 INS85 INS43 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS74 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS32 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS39 INS42 INS21 INS42 INS40 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS21 INS40 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS39 INS85 INS42 INS42 INS2 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS2 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42