merge trunk to branch HDFS-4949

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532952 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.Date;
+    if (fsn == null) {
+      return "";
+    }
+
+  static void generateSnapshotReport(JspWriter out, FSNamesystem fsn)
+      throws IOException {
+    if (fsn == null) {
+      return;
+    }
+    out.println("<div id=\"snapshotstats\"><div class=\"dfstable\">"
+        + "<table class=\"storage\" title=\"Snapshot Summary\">\n"
+        + "<thead><tr><td><b>Snapshottable directories</b></td>"
+        + "<td><b>Snapshotted directories</b></td></tr></thead>");
+
+    out.println(String.format("<td>%d</td><td>%d</td>", fsn.getNumSnapshottableDirs(), fsn.getNumSnapshots()));
+    out.println("</table></div></div>");
+  }
+
-    if (nn.getNamesystem().getNumLiveDataNodes() < 1) {
+    FSNamesystem fsn = nn.getNamesystem();
+
+    DatanodeID datanode = null;
+    if (fsn != null && fsn.getNumLiveDataNodes() >= 1) {
+      datanode = getRandomDatanode(nn);
+    }
+
+    if (datanode == null) {
-    final DatanodeID datanode = getRandomDatanode(nn);;
+
+    // if the user is defined, get a delegation token and stringify it
-    // if the user is defined, get a delegation token and stringify it
-    final String redirectLocation;
-    final String nodeToRedirect;
-    int redirectPort;
-    if (datanode != null) {
-      nodeToRedirect = datanode.getIpAddr();
-      redirectPort = datanode.getInfoPort();
-    } else {
-      nodeToRedirect = nn.getHttpAddress().getHostName();
-      redirectPort = nn.getHttpAddress().getPort();
-    }
-    String fqdn = InetAddress.getByName(nodeToRedirect).getCanonicalHostName();
-    redirectLocation = HttpConfig.getSchemePrefix() + fqdn + ":" + redirectPort
+    final String redirectLocation =
+        JspHelper.Url.url(request.getScheme(), datanode)
-        + nn.getHttpAddress().getPort() + "&dir=/"
+        + request.getServerPort() + "&dir=/"
+
+  /**
+   * Returns a descriptive label for the running NameNode.  If the NameNode has
+   * initialized to the point of running its RPC server, then this label consists
+   * of the host and port of the RPC server.  Otherwise, the label is a message
+   * stating that the NameNode is still initializing.
+   * 
+   * @param nn NameNode to describe
+   * @return String NameNode label
+   */
+  static String getNameNodeLabel(NameNode nn) {
+    return nn.getRpcServer() != null ? nn.getNameNodeAddressHostPortString() :
+      "initializing";
+  }
+
-        String suffix, boolean alive, int nnHttpPort, String nnaddr)
+        String suffix, boolean alive, int nnInfoPort, String nnaddr, String scheme)
-      String url = HttpConfig.getSchemePrefix() + d.getHostName() + ":"
-          + d.getInfoPort()
-          + "/browseDirectory.jsp?namenodeInfoPort=" + nnHttpPort + "&dir="
+      String url = "///" + JspHelper.Url.authority(scheme, d)
+          + "/browseDirectory.jsp?namenodeInfoPort=" + nnInfoPort + "&dir="
-        String suffix, boolean alive, int nnHttpPort, String nnaddr)
+        String suffix, boolean alive, int nnInfoPort, String nnaddr, String scheme)
-      generateNodeDataHeader(out, d, suffix, alive, nnHttpPort, nnaddr);
+      generateNodeDataHeader(out, d, suffix, alive, nnInfoPort, nnaddr, scheme);
-        boolean alive, int nnHttpPort, String nnaddr) throws IOException {
+        boolean alive, int nnInfoPort, String nnaddr, String scheme) throws IOException {
-      generateNodeDataHeader(out, d, suffix, alive, nnHttpPort, nnaddr);
+      generateNodeDataHeader(out, d, suffix, alive, nnInfoPort, nnaddr, scheme);
+      long currentTime = Time.now();
+      long timestamp = d.getLastUpdate();
-        out.print("<td class=\"decommissioned\"> " + 
-            d.isDecommissioned() + "\n");
+        out.print("<td class=\"lastcontact\"> "
+            + new Date(timestamp) 
+            + "<td class=\"decommissioned\"> "
+            + d.isDecommissioned() + "\n");
-
-      long timestamp = d.getLastUpdate();
-      long currentTime = Time.now();
+      if (ns == null) {
+        return;
+      }
-      InetSocketAddress nnSocketAddress =
-          (InetSocketAddress)context.getAttribute(
-              NameNodeHttpServer.NAMENODE_ADDRESS_ATTRIBUTE_KEY);
-      String nnaddr = nnSocketAddress.getAddress().getHostAddress() + ":"
-          + nnSocketAddress.getPort();
+      String nnaddr = nn.getServiceRpcAddress().getAddress().getHostName() + ":"
+          + nn.getServiceRpcAddress().getPort();
-      try {
-        Thread.sleep(1000);
-      } catch (InterruptedException e) {
-      }
-
-        int nnHttpPort = nn.getHttpAddress().getPort();
+        int nnInfoPort = request.getServerPort();
-              generateNodeData(out, live.get(i), port_suffix, true, nnHttpPort,
-                  nnaddr);
+              generateNodeData(out, live.get(i), port_suffix, true, nnInfoPort,
+                  nnaddr, request.getScheme());
+                + nodeHeaderStr("lastcontact")
+                + "> Last <br>Contact <th "
-                  nnHttpPort, nnaddr);
+                  nnInfoPort, nnaddr, request.getScheme());
-                  port_suffix, true, nnHttpPort, nnaddr);
+                  port_suffix, true, nnInfoPort, nnaddr, request.getScheme());
-      this.blockManager = fsn.getBlockManager();
+      this.blockManager = fsn != null ? fsn.getBlockManager() : null;
-        this.inode = ((INode)blockManager.getBlockCollection(block)).asFile();
+        this.inode = blockManager != null ?
+          ((INode)blockManager.getBlockCollection(block)).asFile() :
+          null;
-        for(final Iterator<DatanodeDescriptor> it = blockManager.datanodeIterator(block);
-            it.hasNext(); ) {
+        for (final Iterator<DatanodeDescriptor> it = blockManager != null ?
+            blockManager.datanodeIterator(block) :
+            Collections.<DatanodeDescriptor>emptyList().iterator();
+            it.hasNext();) {
-      this.blockManager = fsn.getBlockManager();
+      this.blockManager = fsn != null ? fsn.getBlockManager() : null;
-      doc.pcdata(""+blockManager.getMissingBlocksCount());
+      doc.pcdata("" + (blockManager != null ?
+        blockManager.getMissingBlocksCount() : 0));
-      doc.pcdata(""+blockManager.getCorruptReplicaBlocksCount());
+      doc.pcdata("" + (blockManager != null ?
+        blockManager.getCorruptReplicaBlocksCount() : 0));
-      final long[] corruptBlockIds = blockManager.getCorruptReplicaBlockIds(
-          numCorruptBlocks, startingBlockId);
+      final long[] corruptBlockIds = blockManager != null ?
+        blockManager.getCorruptReplicaBlockIds(numCorruptBlocks,
+        startingBlockId) : null;

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS43 INS8 MOV60 MOV25 INS29 INS83 MOV43 INS42 INS44 INS8 INS25 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS21 INS60 INS65 INS65 INS65 INS43 INS42 INS41 INS44 INS44 INS44 MOV60 MOV60 INS27 INS8 INS42 INS42 INS27 INS8 INS32 INS32 INS32 INS43 MOV59 MOV43 INS27 UPD27 INS83 MOV43 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS16 UPD42 MOV43 INS42 UPD42 INS43 INS42 UPD42 INS43 INS42 INS25 INS42 INS33 INS41 INS42 INS33 INS41 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS45 INS42 UPD42 MOV32 UPD42 INS33 INS27 INS27 INS42 INS33 INS42 MOV27 INS27 INS32 INS45 INS42 INS42 INS27 INS8 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS45 INS32 INS32 UPD42 MOV42 MOV33 INS32 INS34 INS32 INS32 INS33 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS33 INS41 INS16 INS16 INS16 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV32 INS40 INS42 INS32 INS42 UPD42 MOV42 UPD42 INS42 INS42 UPD45 UPD42 INS27 MOV32 INS33 INS27 MOV32 INS33 INS36 INS36 INS27 MOV32 INS33 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 UPD42 INS32 UPD42 INS42 INS33 INS16 INS42 INS33 INS16 INS16 INS42 INS33 INS45 INS14 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS27 MOV32 INS33 INS16 INS27 MOV32 INS34 INS27 MOV32 INS34 INS43 INS42 INS42 UPD42 MOV42 INS42 INS33 INS27 MOV32 INS32 INS42 INS33 INS42 INS33 INS42 INS42 INS33 INS32 INS42 INS42 INS43 INS42 INS42 UPD42 INS32 INS32 INS45 INS42 INS42 INS42 INS45 UPD42 INS32 INS42 INS42 UPD42 INS32 INS42 INS42 DEL83 DEL27 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL34 DEL83 DEL42 DEL59 DEL60 DEL20 DEL83 DEL60 DEL39 DEL42 DEL59 DEL60 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL32