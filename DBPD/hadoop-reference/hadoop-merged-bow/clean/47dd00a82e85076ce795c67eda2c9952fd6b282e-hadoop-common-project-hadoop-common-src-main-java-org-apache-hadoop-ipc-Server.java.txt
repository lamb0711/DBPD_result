Merge branch 'HDFS-12943' into trunk

+  private AlignmentContext alignmentContext;
-  
+
+   * Set alignment context to pass state info thru RPC.
+   *
+   * @param alignmentContext alignment state context
+   */
+  public void setAlignmentContext(AlignmentContext alignmentContext) {
+    this.alignmentContext = alignmentContext;
+  }
+
+  /**
+    private long clientStateId;
+    private boolean isCallCoordinated;
+      this.clientStateId = Long.MIN_VALUE;
+      this.isCallCoordinated = false;
-    void doResponse(Throwable t) throws IOException {}
+    void doResponse(Throwable t) throws IOException {
+      doResponse(t, RpcStatusProto.FATAL);
+    }
+
+    void doResponse(Throwable t, RpcStatusProto proto) throws IOException {}
+    public long getClientStateId() {
+      return this.clientStateId;
+    }
+
+    public void setClientStateId(long stateId) {
+      this.clientStateId = stateId;
+    }
+
+    public void markCallCoordinated(boolean flag) {
+      this.isCallCoordinated = flag;
+    }
+
+    public boolean isCallCoordinated() {
+      return this.isCallCoordinated;
+    }
+
+    private ResponseParams responseParams; // the response params
+    private Writable rv;                   // the byte response
+
+      this.rv = call.rv;
+      this.responseParams = call.responseParams;
+    void setResponseFields(Writable returnValue,
+                           ResponseParams responseParams) {
+      this.rv = returnValue;
+      this.responseParams = responseParams;
+    }
+
-        setupResponse(this, responseParams.returnStatus,
-            responseParams.detailedErr,
-            value, responseParams.errorClass, responseParams.error);
+        setResponseFields(value, responseParams);
-    void doResponse(Throwable t) throws IOException {
+    void doResponse(Throwable t, RpcStatusProto status) throws IOException {
+        if (status == null) {
+          status = RpcStatusProto.FATAL;
+        }
-        setupResponse(call,
-            RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,
+        setupResponse(call, status, RpcErrorCodeProto.ERROR_RPC_SERVER,
+      } else {
+        setupResponse(call, call.responseParams.returnStatus,
+            call.responseParams.detailedErr, call.rv,
+            call.responseParams.errorClass,
+            call.responseParams.error);
+      call.markCallCoordinated(false);
+      if(alignmentContext != null && call.rpcRequest != null &&
+          (call.rpcRequest instanceof ProtobufRpcEngine.RpcProtobufRequest)) {
+        // if call.rpcRequest is not RpcProtobufRequest, will skip the following
+        // step and treat the call as uncoordinated. As currently only certain
+        // ClientProtocol methods request made through RPC protobuf needs to be
+        // coordinated.
+        String methodName;
+        String protoName;
+        ProtobufRpcEngine.RpcProtobufRequest req =
+            (ProtobufRpcEngine.RpcProtobufRequest) call.rpcRequest;
+        try {
+          methodName = req.getRequestHeader().getMethodName();
+          protoName = req.getRequestHeader().getDeclaringClassProtocolName();
+          if (alignmentContext.isCoordinatedCall(protoName, methodName)) {
+            call.markCallCoordinated(true);
+            long stateId;
+            stateId = alignmentContext.receiveRequestState(
+                header, getMaxIdleTime());
+            call.setClientStateId(stateId);
+          }
+        } catch (IOException ioe) {
+          throw new RpcServerException("Processing RPC request caught ", ioe);
+        }
+      }
+    internalQueueCall(call, true);
+  }
+
+  private void internalQueueCall(Call call, boolean blocking)
+      throws IOException, InterruptedException {
-      callQueue.put(call); // queue the call; maybe blocked here
+      // queue the call, may be blocked if blocking is true.
+      if (blocking) {
+        callQueue.put(call);
+      } else {
+        callQueue.add(call);
+      }
+          if (alignmentContext != null && call.isCallCoordinated() &&
+              call.getClientStateId() > alignmentContext.getLastSeenStateId()) {
+            /*
+             * The call processing should be postponed until the client call's
+             * state id is aligned (<=) with the server state id.
+
+             * NOTE:
+             * Inserting the call back to the queue can change the order of call
+             * execution comparing to their original placement into the queue.
+             * This is not a problem, because Hadoop RPC does not have any
+             * constraints on ordering the incoming rpc requests.
+             * In case of Observer, it handles only reads, which are
+             * commutative.
+             */
+            // Re-queue the call and continue
+            requeueCall(call);
+            continue;
+          }
+    private void requeueCall(Call call)
+        throws IOException, InterruptedException {
+      try {
+        internalQueueCall(call, false);
+      } catch (RpcServerException rse) {
+        call.doResponse(rse.getCause(), rse.getRpcStatusProto());
+      }
+    }
+
+    if (alignmentContext != null) {
+      alignmentContext.updateResponseState(headerBuilder);
+    }
+  protected int getMaxIdleTime() {
+    return connectionManager.maxIdleTime;
+  }
+

INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS23 INS23 INS31 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS44 INS31 INS83 INS39 INS42 INS8 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS83 INS39 INS59 INS83 INS39 INS59 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS39 INS42 INS44 INS44 INS8 INS44 INS43 INS42 INS42 INS42 INS21 INS39 INS42 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS25 INS41 INS66 INS42 INS66 INS42 INS7 INS42 INS42 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS42 INS41 INS39 INS42 INS21 INS39 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS21 INS21 INS43 INS42 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS25 INS42 INS32 INS8 INS43 INS42 INS42 INS42 INS54 INS27 INS8 INS40 INS22 INS42 INS7 INS7 INS32 INS42 INS42 INS22 INS7 INS7 INS22 INS7 INS7 INS42 INS42 INS7 INS7 INS42 INS8 INS32 INS27 INS8 INS42 INS42 INS9 INS25 INS42 INS8 INS12 INS42 INS33 INS21 INS52 INS42 INS22 INS40 INS22 INS9 INS42 INS42 INS40 INS52 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS22 INS40 INS22 INS40 INS22 INS42 INS22 INS42 INS25 INS21 INS42 INS42 INS9 INS27 INS36 INS60 INS60 INS60 INS54 INS42 MOV8 INS8 INS21 INS44 INS8 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS27 INS8 INS32 INS27 INS27 INS62 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS21 INS32 INS43 INS42 INS21 INS42 INS42 INS42 UPD42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS42 INS33 INS40 INS33 INS40 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS11 INS21 INS21 INS25 INS44 INS8 INS32 INS25 INS42 INS42 INS9 INS42 INS32 INS7 INS40 INS43 INS40 INS7 INS7 INS32 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS32 INS32 INS42 INS40 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS60 INS21 INS21 INS42 INS14 INS27 INS27 INS21 INS18 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS39 INS59 INS7 INS32 INS43 INS45 INS42 INS27 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 DEL52 DEL40 DEL40 DEL40 DEL40 DEL40