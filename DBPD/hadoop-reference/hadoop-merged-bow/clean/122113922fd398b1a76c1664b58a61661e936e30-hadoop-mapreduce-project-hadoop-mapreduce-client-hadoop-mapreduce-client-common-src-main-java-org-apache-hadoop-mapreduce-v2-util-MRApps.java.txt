Merging trunk to HDFS-1623 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177117 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.mapreduce.v2.MRConstants;
-import org.apache.hadoop.util.Shell.ShellCommandExecutor;
+import org.apache.hadoop.yarn.api.ApplicationConstants.Environment;
+import org.apache.hadoop.yarn.api.ApplicationConstants;
-  public static void setInitialClasspath(
+  private static void setMRFrameworkClasspath(
-        addToClassPath(environment, cp.trim());
+        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());
-      addToClassPath(environment,
+      addToEnvironment(
+          environment,
+          Environment.CLASSPATH.name(),
-      // If runtime env is different.
-      if (System.getenv().get("YARN_HOME") != null) {
-        ShellCommandExecutor exec =
-            new ShellCommandExecutor(new String[] {
-                System.getenv().get("YARN_HOME") + "/bin/yarn",
-            "classpath" });
-        exec.execute();
-        addToClassPath(environment, exec.getOutput().trim());
-      }
-
-      // Get yarn mapreduce-app classpath
-      if (System.getenv().get("HADOOP_MAPRED_HOME")!= null) {
-        ShellCommandExecutor exec =
-            new ShellCommandExecutor(new String[] {
-                System.getenv().get("HADOOP_MAPRED_HOME") + "/bin/mapred",
-            "classpath" });
-        exec.execute();
-        addToClassPath(environment, exec.getOutput().trim());
+      // Add standard Hadoop classes
+      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {
+        addToEnvironment(environment, Environment.CLASSPATH.name(), c);
+  
+  private static final String SYSTEM_PATH_SEPARATOR = 
+      System.getProperty("path.separator");
-  public static void addToClassPath(
-      Map<String, String> environment, String fileName) {
-    String classpath = environment.get(CLASSPATH);
-    if (classpath == null) {
-      classpath = fileName;
+  public static void addToEnvironment(
+      Map<String, String> environment, 
+      String variable, String value) {
+    String val = environment.get(variable);
+    if (val == null) {
+      val = value;
-      classpath = classpath + ":" + fileName;
+      val = val + SYSTEM_PATH_SEPARATOR + value;
-    environment.put(CLASSPATH, classpath);
+    environment.put(variable, val);
-  public static final String CLASSPATH = "CLASSPATH";
-
+  public static void setClasspath(Map<String, String> environment) 
+      throws IOException {
+    MRApps.addToEnvironment(
+        environment, 
+        Environment.CLASSPATH.name(), 
+        MRJobConfig.JOB_JAR);
+    MRApps.addToEnvironment(
+        environment, 
+        Environment.CLASSPATH.name(),
+        Environment.PWD.$() + Path.SEPARATOR + "*");
+    MRApps.setMRFrameworkClasspath(environment);
+  }
+  
-        jobId.toString() + Path.SEPARATOR + MRConstants.JOB_CONF_FILE);
+        jobId.toString() + Path.SEPARATOR + MRJobConfig.JOB_CONF_FILE);
-      Map<String, LocalResource> localResources,
-      Map<String, String> env) 
+      Map<String, LocalResource> localResources) 
-    parseDistributedCacheArtifacts(conf, localResources, env, 
+    parseDistributedCacheArtifacts(conf, localResources,  
-        localResources, env, 
+        localResources,  
-      Map<String, String> env,
-        if (classPaths.containsKey(u.getPath())) {
-          MRApps.addToClassPath(env, linkName);
-        }
+
+  public static void setEnvFromInputString(Map<String, String> env,
+      String envString) {
+    if (envString != null && envString.length() > 0) {
+      String childEnvs[] = envString.split(",");
+      for (String cEnv : childEnvs) {
+        String[] parts = cEnv.split("="); // split on '='
+        String value = env.get(parts[0]);
+  
+        if (value != null) {
+          // Replace $env with the child's env constructed by NM's
+          // For example: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp
+          value = parts[1].replace("$" + parts[0], value);
+        } else {
+          // example PATH=$PATH:/tmp
+          value = System.getenv(parts[0]);
+          if (value != null) {
+            // the env key is present in the tt's env
+            value = parts[1].replace("$" + parts[0], value);
+          } else {
+            // check for simple variable substitution
+            // for e.g. ROOT=$HOME
+            String envValue = System.getenv(parts[1].substring(1)); 
+            if (envValue != null) {
+              value = envValue;
+            } else {
+              // the env key is note present anywhere .. simply set it
+              // example X=$X:/tmp or X=/tmp
+              value = parts[1].replace("$" + parts[0], "");
+            }
+          }
+        }
+        addToEnvironment(env, parts[0], value);
+      }
+    }
+  }

MOV26 MOV26 UPD40 UPD40 INS23 INS31 INS31 UPD83 UPD42 INS83 INS83 INS83 MOV43 INS59 UPD42 INS44 INS44 INS83 INS83 INS39 INS42 MOV44 INS43 INS8 INS83 INS83 INS39 INS42 MOV44 INS44 INS8 INS42 INS32 INS74 INS42 INS43 INS42 MOV43 UPD42 INS42 INS21 INS21 INS21 INS43 INS42 INS25 INS42 INS42 INS45 INS43 INS43 INS43 INS42 MOV43 INS32 INS32 INS32 INS42 INS27 INS8 INS70 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS27 INS27 INS60 INS70 INS44 INS40 INS8 UPD42 INS40 INS42 INS40 INS42 INS32 INS40 INS45 INS42 INS33 INS32 INS34 INS43 INS59 INS44 INS42 INS8 UPD42 INS32 INS43 INS42 MOV21 UPD42 UPD42 UPD42 INS40 INS42 UPD40 INS42 INS42 INS42 UPD42 MOV42 INS85 INS32 INS43 INS42 INS60 INS60 INS25 INS21 INS40 INS42 MOV42 UPD42 INS42 UPD42 INS42 INS42 INS45 INS42 MOV5 INS59 INS43 INS59 INS27 INS8 INS8 INS32 UPD42 INS32 UPD42 MOV32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS25 INS42 INS42 INS2 INS42 INS40 INS42 INS40 UPD42 INS42 INS42 INS45 INS42 INS42 INS2 INS7 INS7 INS27 INS8 INS8 INS42 INS34 INS42 INS34 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS60 INS25 INS2 INS42 INS27 INS42 INS42 INS42 INS2 INS7 INS43 INS59 INS27 INS8 INS8 INS42 INS34 INS45 INS2 INS42 INS34 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS34 INS2 INS42 INS27 INS42 INS42 INS42 INS32 INS7 INS7 INS42 INS34 INS45 INS2 INS2 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS34 INS2 INS42 INS27 INS45 INS42 INS34 INS45 INS2 INS42 INS34 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL45 DEL27 DEL45 DEL4 DEL3 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL45 DEL27 DEL45 DEL4 DEL3 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL45 DEL83 DEL83 DEL83 DEL45 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25