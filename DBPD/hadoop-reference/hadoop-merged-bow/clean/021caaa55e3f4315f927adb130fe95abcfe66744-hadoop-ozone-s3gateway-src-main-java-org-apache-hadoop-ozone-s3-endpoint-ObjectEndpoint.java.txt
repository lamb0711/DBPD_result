HDDS-516. Implement CopyObject REST endpoint. Contributed by Bharat Viswanadham.

-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.hdds.conf.OzoneConfiguration;
-import org.apache.hadoop.hdds.scm.ScmConfigKeys;
+import org.apache.hadoop.ozone.web.utils.OzoneUtils;
-      @DefaultValue("32 * 1024 * 1024") @QueryParam("chunkSize")
-          String chunkSize,
+    OzoneOutputStream output = null;
-      Configuration config = new OzoneConfiguration();
-      config.set(ScmConfigKeys.OZONE_SCM_CHUNK_SIZE_KEY, chunkSize);
+      String copyHeader = headers.getHeaderString("x-amz-copy-source");
+      if (copyHeader != null) {
+        //Copy object, as copy source available.
+        CopyObjectResponse copyObjectResponse = copyObject(
+            copyHeader, bucketName, keyPath, replicationType,
+            replicationFactor);
+        return Response.status(Status.OK).entity(copyObjectResponse).header(
+            "Connection", "close").build();
+      }
+
+      // Normal put object
-      OzoneOutputStream output = bucket
-          .createKey(keyPath, length, replicationType, replicationFactor);
+
+      output = bucket.createKey(keyPath, length, replicationType,
+          replicationFactor);
-      output.close();
+    } finally {
+      if (output != null) {
+        output.close();
+      }
+
+  private CopyObjectResponse copyObject(String copyHeader,
+                                        String destBucket,
+                                        String destkey,
+                                        ReplicationType replicationType,
+                                        ReplicationFactor replicationFactor)
+      throws OS3Exception, IOException {
+
+    if (copyHeader.startsWith("/")) {
+      copyHeader = copyHeader.substring(1);
+    }
+    int pos = copyHeader.indexOf("/");
+    if (pos == -1) {
+      OS3Exception ex = S3ErrorTable.newError(S3ErrorTable
+          .INVALID_ARGUMENT, copyHeader);
+      ex.setErrorMessage("Copy Source must mention the source bucket and " +
+          "key: sourcebucket/sourcekey");
+      throw ex;
+    }
+    String sourceBucket = copyHeader.substring(0, pos);
+    String sourceKey = copyHeader.substring(pos + 1);
+
+    OzoneInputStream sourceInputStream = null;
+    OzoneOutputStream destOutputStream = null;
+    boolean closed = false;
+    try {
+      // Checking whether we trying to copying to it self.
+      if (sourceBucket.equals(destBucket)) {
+        if (sourceKey.equals(destkey)) {
+          OS3Exception ex = S3ErrorTable.newError(S3ErrorTable
+              .INVALID_REQUEST, copyHeader);
+          ex.setErrorMessage("This copy request is illegal because it is " +
+              "trying to copy an object to it self itself without changing " +
+              "the object's metadata, storage class, website redirect " +
+              "location or encryption attributes.");
+          throw ex;
+        }
+      }
+
+      OzoneBucket sourceOzoneBucket = getBucket(sourceBucket);
+      OzoneBucket destOzoneBucket = getBucket(destBucket);
+
+      OzoneKeyDetails sourceKeyDetails = sourceOzoneBucket.getKey(sourceKey);
+      long sourceKeyLen = sourceKeyDetails.getDataSize();
+
+      sourceInputStream = sourceOzoneBucket.readKey(sourceKey);
+
+      destOutputStream = destOzoneBucket.createKey(destkey, sourceKeyLen,
+          replicationType, replicationFactor);
+
+      IOUtils.copy(sourceInputStream, destOutputStream);
+
+      // Closing here, as if we don't call close this key will not commit in
+      // OM, and getKey fails.
+      sourceInputStream.close();
+      destOutputStream.close();
+      closed = true;
+
+      OzoneKeyDetails destKeyDetails = destOzoneBucket.getKey(destkey);
+
+      CopyObjectResponse copyObjectResponse = new CopyObjectResponse();
+      copyObjectResponse.setETag(OzoneUtils.getRequestID());
+      copyObjectResponse.setLastModified(Instant.ofEpochMilli(destKeyDetails
+          .getModificationTime()));
+      return copyObjectResponse;
+    } catch (IOException ex) {
+      if (ex.getMessage().contains("KEY_NOT_FOUND")) {
+        throw S3ErrorTable.newError(S3ErrorTable.NO_SUCH_KEY, sourceKey);
+      }
+      LOG.error("Exception occurred in PutObject", ex);
+      throw ex;
+    } finally {
+      if (!closed) {
+        if (sourceInputStream != null) {
+          sourceInputStream.close();
+        }
+        if (destOutputStream != null) {
+          destOutputStream.close();
+        }
+      }
+    }
+  }

MOV26 UPD40 INS31 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS60 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS54 MOV43 INS59 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS12 INS8 INS42 INS33 INS60 INS25 INS21 INS25 INS42 INS42 INS45 INS21 INS42 INS32 INS42 INS38 INS60 INS21 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS9 INS25 INS60 INS60 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS60 INS21 INS21 INS41 INS44 INS8 INS25 MOV43 INS59 INS27 INS8 INS7 INS27 INS8 INS7 INS42 INS42 INS45 INS34 INS43 INS59 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS7 INS7 INS32 INS32 INS32 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS43 INS42 INS25 INS21 INS53 INS38 INS8 INS42 INS32 INS42 INS33 MOV60 INS41 INS42 MOV32 INS42 INS33 MOV21 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS8 INS32 INS42 INS42 INS25 INS25 INS42 INS42 INS45 UPD43 INS32 INS42 INS42 INS34 INS42 INS42 INS40 INS42 INS45 INS45 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS53 INS42 INS42 INS45 INS42 INS27 INS8 INS27 INS8 UPD42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS60 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS43 INS59 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS42 INS42 INS40 INS42 INS45 INS45 INS45 INS45 DEL40 DEL26 DEL40 DEL26 DEL42 DEL45 DEL79 DEL42 DEL45 DEL79 DEL42 DEL44 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL59 DEL60