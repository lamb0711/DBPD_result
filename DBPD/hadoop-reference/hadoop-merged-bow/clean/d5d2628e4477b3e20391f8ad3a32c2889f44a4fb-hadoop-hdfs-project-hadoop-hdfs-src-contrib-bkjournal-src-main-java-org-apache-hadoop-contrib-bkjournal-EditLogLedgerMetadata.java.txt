Merge r1360400 through r1399945 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1399950 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.contrib.bkjournal.BKJournalProtos.EditLogLedgerProto;
+import com.google.protobuf.TextFormat;
+import static com.google.common.base.Charsets.UTF_8;
+
+  private final int dataLayoutVersion;
-  private final int version;
-  EditLogLedgerMetadata(String zkPath, int version, 
+  EditLogLedgerMetadata(String zkPath, int dataLayoutVersion,
+    this.dataLayoutVersion = dataLayoutVersion;
-    this.version = version;
-  EditLogLedgerMetadata(String zkPath, int version, long ledgerId, 
-                        long firstTxId, long lastTxId) {
+  EditLogLedgerMetadata(String zkPath, int dataLayoutVersion,
+                        long ledgerId, long firstTxId,
+                        long lastTxId) {
+    this.dataLayoutVersion = dataLayoutVersion;
-    this.version = version;
-  int getVersion() {
-    return version;
-  }
-
+  int getDataLayoutVersion() {
+    return this.dataLayoutVersion;
+  }
+
-      String[] parts = new String(data).split(";");
-      if (parts.length == 3) {
-        int version = Integer.valueOf(parts[0]);
-        long ledgerId = Long.valueOf(parts[1]);
-        long txId = Long.valueOf(parts[2]);
-        return new EditLogLedgerMetadata(path, version, ledgerId, txId);
-      } else if (parts.length == 4) {
-        int version = Integer.valueOf(parts[0]);
-        long ledgerId = Long.valueOf(parts[1]);
-        long firstTxId = Long.valueOf(parts[2]);
-        long lastTxId = Long.valueOf(parts[3]);
-        return new EditLogLedgerMetadata(path, version, ledgerId,
-                                         firstTxId, lastTxId);
+
+      EditLogLedgerProto.Builder builder = EditLogLedgerProto.newBuilder();
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Reading " + path + " data: " + new String(data, UTF_8));
+      }
+      TextFormat.merge(new String(data, UTF_8), builder);
+      if (!builder.isInitialized()) {
+        throw new IOException("Invalid/Incomplete data in znode");
+      }
+      EditLogLedgerProto ledger = builder.build();
+
+      int dataLayoutVersion = ledger.getDataLayoutVersion();
+      long ledgerId = ledger.getLedgerId();
+      long firstTxId = ledger.getFirstTxId();
+      if (ledger.hasLastTxId()) {
+        long lastTxId = ledger.getLastTxId();
+        return new EditLogLedgerMetadata(path, dataLayoutVersion,
+                                         ledgerId, firstTxId, lastTxId);
-        throw new IOException("Invalid ledger entry, "
-                              + new String(data));
+        return new EditLogLedgerMetadata(path, dataLayoutVersion,
+                                         ledgerId, firstTxId);
-    String finalisedData;
-    if (inprogress) {
-      finalisedData = String.format("%d;%d;%d",
-          version, ledgerId, firstTxId);
-    } else {
-      finalisedData = String.format("%d;%d;%d;%d",
-          version, ledgerId, firstTxId, lastTxId);
+
+    EditLogLedgerProto.Builder builder = EditLogLedgerProto.newBuilder();
+    builder.setDataLayoutVersion(dataLayoutVersion)
+      .setLedgerId(ledgerId).setFirstTxId(firstTxId);
+
+    if (!inprogress) {
+      builder.setLastTxId(lastTxId);
-      zkc.create(path, finalisedData.getBytes(), Ids.OPEN_ACL_UNSAFE,
-          CreateMode.PERSISTENT);
+      zkc.create(path, TextFormat.printToString(builder.build()).getBytes(UTF_8),
+                 Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
+      && dataLayoutVersion == ol.dataLayoutVersion
-      && lastTxId == ol.lastTxId
-      && version == ol.version;
+      && lastTxId == ol.lastTxId;
-    hash = hash * 31 + (int) version;
+    hash = hash * 31 + (int) dataLayoutVersion;
-      ", lastTxId:" + lastTxId + 
-      ", version:" + version + "]";
+      ", lastTxId:" + lastTxId +
+      ", dataLayoutVersion:" + dataLayoutVersion + "]";

INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 MOV21 MOV21 UPD42 UPD42 UPD42 UPD42 MOV21 INS25 INS22 UPD43 INS32 INS38 MOV8 MOV27 UPD42 UPD42 INS52 INS42 INS60 INS25 INS21 INS25 INS60 MOV60 MOV60 MOV60 INS25 INS40 UPD42 INS32 INS32 INS42 MOV42 INS42 UPD45 UPD42 UPD42 UPD42 INS43 MOV59 INS32 INS8 INS32 INS38 INS8 INS43 INS59 INS32 INS8 MOV8 INS42 INS42 INS32 INS42 MOV42 INS32 INS27 INS40 UPD42 INS42 UPD42 MOV42 INS21 UPD42 MOV42 INS42 INS14 UPD42 MOV42 INS32 INS53 INS42 INS42 INS32 UPD42 INS42 INS42 MOV60 MOV41 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV27 INS27 UPD42 UPD42 UPD42 MOV32 MOV43 INS42 INS42 INS42 INS42 INS14 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS14 INS32 INS42 INS42 INS40 UPD42 INS42 INS27 MOV43 INS45 UPD42 MOV43 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS45 INS42 INS45 MOV14 UPD42 UPD42 INS42 INS42 INS42 DEL42 DEL42 DEL34 DEL2 DEL45 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL45 DEL42 DEL43 DEL14 DEL27 DEL14 DEL53 DEL85 DEL5 DEL42 DEL59 DEL60 DEL40 DEL34 DEL27 DEL39 DEL60 DEL39 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41 DEL8 DEL40 DEL34 DEL27 DEL8 DEL25 DEL25 DEL42 DEL42 DEL45 DEL32 DEL7 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL7 DEL42 DEL8 DEL25 DEL42 DEL40 DEL27 DEL27