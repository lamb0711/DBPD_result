HDFS-12000. Ozone: Container : Add key versioning support-1. Contributed by Chen Liang.

+import com.google.common.base.Preconditions;
+import java.io.IOException;
-  private List<KsmKeyLocationInfo> keyLocationList;
+  private List<KsmKeyLocationInfoGroup> keyLocationVersions;
-      List<KsmKeyLocationInfo> locationInfos, long dataSize, long creationTime,
-      long modificationTime) {
+      List<KsmKeyLocationInfoGroup> versions, long dataSize,
+      long creationTime, long modificationTime) {
-    this.keyLocationList = locationInfos;
+    // it is important that the versions are ordered from old to new.
+    // Do this sanity check when versions got loaded on creating KsmKeyInfo.
+    // TODO : this is not necessary, here only because versioning is still a
+    // work in-progress, remove this following check when versioning is
+    // complete and prove correctly functioning
+    long currentVersion = -1;
+    for (KsmKeyLocationInfoGroup version : versions) {
+      Preconditions.checkArgument(
+            currentVersion + 1 == version.getVersion());
+      currentVersion = version.getVersion();
+    }
+    this.keyLocationVersions = versions;
-  public List<KsmKeyLocationInfo> getKeyLocationList() {
-    return keyLocationList;
+  public synchronized KsmKeyLocationInfoGroup getLatestVersionLocations()
+      throws IOException {
+    return keyLocationVersions.size() == 0? null :
+        keyLocationVersions.get(keyLocationVersions.size() - 1);
+  }
+
+  public List<KsmKeyLocationInfoGroup> getKeyLocationVersions() {
+    return keyLocationVersions;
-  public void appendKeyLocation(KsmKeyLocationInfo newLocation) {
-    keyLocationList.add(newLocation);
+  /**
+   * Append a set of blocks to the latest version. Note that these blocks are
+   * part of the latest version, not a new version.
+   *
+   * @param newLocationList the list of new blocks to be added.
+   * @throws IOException
+   */
+  public synchronized void appendNewBlocks(
+      List<KsmKeyLocationInfo> newLocationList) throws IOException {
+    if (keyLocationVersions.size() == 0) {
+      throw new IOException("Appending new block, but no version exist");
+    }
+    KsmKeyLocationInfoGroup currentLatestVersion =
+        keyLocationVersions.get(keyLocationVersions.size() - 1);
+    currentLatestVersion.appendNewBlocks(newLocationList);
+    setModificationTime(Time.now());
+  }
+
+  /**
+   * Add a new set of blocks. The new blocks will be added as appending a new
+   * version to the all version list.
+   *
+   * @param newLocationList the list of new blocks to be added.
+   * @throws IOException
+   */
+  public synchronized long addNewVersion(
+      List<KsmKeyLocationInfo> newLocationList) throws IOException {
+    long latestVersionNum;
+    if (keyLocationVersions.size() == 0) {
+      // no version exist, these blocks are the very first version.
+      keyLocationVersions.add(new KsmKeyLocationInfoGroup(0, newLocationList));
+      latestVersionNum = 0;
+    } else {
+      // it is important that the new version are always at the tail of the list
+      KsmKeyLocationInfoGroup currentLatestVersion =
+          keyLocationVersions.get(keyLocationVersions.size() - 1);
+      // the new version is created based on the current latest version
+      KsmKeyLocationInfoGroup newVersion =
+          currentLatestVersion.generateNextVersion(newLocationList);
+      keyLocationVersions.add(newVersion);
+      latestVersionNum = newVersion.getVersion();
+    }
+    setModificationTime(Time.now());
+    return latestVersionNum;
-    private List<KsmKeyLocationInfo> ksmKeyLocationInfos;
+    private List<KsmKeyLocationInfoGroup> ksmKeyLocationInfoGroups;
-        List<KsmKeyLocationInfo> ksmKeyLocationInfoList) {
-      this.ksmKeyLocationInfos = ksmKeyLocationInfoList;
+        List<KsmKeyLocationInfoGroup> ksmKeyLocationInfoList) {
+      this.ksmKeyLocationInfoGroups = ksmKeyLocationInfoList;
-          volumeName, bucketName, keyName, ksmKeyLocationInfos,
+          volumeName, bucketName, keyName, ksmKeyLocationInfoGroups,
+    long latestVersion = keyLocationVersions.size() == 0 ? -1 :
+        keyLocationVersions.get(keyLocationVersions.size() - 1).getVersion();
-        .addAllKeyLocationList(keyLocationList.stream()
-            .map(KsmKeyLocationInfo::getProtobuf).collect(Collectors.toList()))
+        .addAllKeyLocationList(keyLocationVersions.stream()
+            .map(KsmKeyLocationInfoGroup::getProtobuf)
+            .collect(Collectors.toList()))
+        .setLatestVersion(latestVersion)
-            .map(KsmKeyLocationInfo::getFromProtobuf)
+            .map(KsmKeyLocationInfoGroup::getFromProtobuf)

INS26 INS26 INS40 INS40 INS31 INS31 INS31 UPD74 INS44 INS83 INS83 INS43 INS42 INS43 INS8 UPD74 UPD42 INS29 MOV83 INS83 MOV39 INS42 MOV44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 MOV44 INS43 INS8 UPD43 UPD42 INS74 INS42 INS60 INS70 INS42 INS42 INS41 UPD43 INS65 INS65 INS65 UPD42 INS42 INS25 INS60 INS21 INS21 INS65 INS65 INS65 UPD42 INS42 INS60 INS25 INS21 INS41 UPD74 INS44 INS60 UPD42 INS43 INS43 INS39 INS59 INS44 INS42 INS8 INS16 UPD42 UPD42 INS66 INS66 INS42 INS66 INS42 INS27 INS8 INS43 INS59 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS39 INS59 INS27 INS8 INS8 INS32 INS42 UPD43 UPD42 INS74 INS42 INS39 INS59 INS32 INS42 INS42 INS42 INS38 INS43 INS42 INS21 INS21 UPD42 INS27 INS33 INS32 INS32 INS34 INS53 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS34 MOV21 INS21 INS60 INS60 INS21 INS21 INS42 INS32 UPD42 INS43 INS43 INS42 INS16 MOV32 INS42 INS34 INS42 INS32 INS7 UPD42 INS32 INS34 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS43 INS59 INS32 INS7 INS42 INS42 INS42 INS42 UPD42 INS27 INS38 INS32 UPD42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS34 INS43 INS45 INS32 INS34 UPD42 INS14 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 INS32 INS34 INS34 INS32 INS42 UPD42 UPD42 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 UPD42 UPD42 INS42 INS34 INS42 INS42 INS42 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31