YARN-5531. UnmanagedAM pool manager for federating application across clusters. (Botong Huang via Subru).

(cherry picked from commit 73bb2102ce4b82b3a3bed91319f7c8f067ddc3e8)

+import java.util.Map.Entry;
+import org.apache.hadoop.yarn.exceptions.ApplicationMasterNotRegisteredException;
+import org.apache.hadoop.yarn.exceptions.InvalidApplicationMasterRequestException;
+import org.apache.hadoop.yarn.server.utils.AMRMClientUtils;
-
+  private boolean shouldReRegisterNext = false;
+
+  // For unit test synchronization
+  private static Object syncObj = new Object();
+
+  public static Object getSyncObj() {
+    return syncObj;
+  }
+
+  public void setShouldReRegisterNext() {
+    shouldReRegisterNext = true;
+  }
+
+    shouldReRegisterNext = false;
+
+    synchronized (syncObj) {
+      syncObj.notifyAll();
+      // We reuse the port number to indicate whether the unit test want us to
+      // wait here
+      if (request.getRpcPort() > 1000) {
+        LOG.info("Register call in RM start waiting");
+        try {
+          syncObj.wait();
+          LOG.info("Register call in RM wait finished");
+        } catch (InterruptedException e) {
+          LOG.info("Register call in RM wait interrupted", e);
+        }
+      }
+    }
+
-      Assert.assertFalse(
-          "The application id is already registered: " + amrmToken,
-          applicationContainerIdMap.containsKey(amrmToken));
+      if (applicationContainerIdMap.containsKey(amrmToken)) {
+        throw new InvalidApplicationMasterRequestException(
+            AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE);
+      }
-
+    if (shouldReRegisterNext) {
+      String message = "AM is not registered, should re-register.";
+      LOG.warn(message);
+      throw new ApplicationMasterNotRegisteredException(message);
+    }
+
+    LOG.info("Allocate from application attempt: " + amrmToken);
+
+    if (shouldReRegisterNext) {
+      String message = "AM is not registered, should re-register.";
+      LOG.warn(message);
+      throw new ApplicationMasterNotRegisteredException(message);
+    }
+    String appId = "";
+    boolean foundApp = false;
+    if (request.getApplicationId() != null) {
+      appId = request.getApplicationId().toString();
+      synchronized (applicationContainerIdMap) {
+        for (Entry<String, List<ContainerId>> entry : applicationContainerIdMap
+            .entrySet()) {
+          ApplicationAttemptId attemptId =
+              ApplicationAttemptId.fromString(entry.getKey());
+          if (attemptId.getApplicationId().equals(request.getApplicationId())) {
+            // Remove the apptempt and the containers that were being tracked
+            List<ContainerId> ids =
+                applicationContainerIdMap.remove(entry.getKey());
+            if (ids != null) {
+              for (ContainerId c : ids) {
+                allocatedContainerMap.remove(c);
+              }
+            }
+            foundApp = true;
+          }
+        }
+      }
+    }
+    if (!foundApp) {
+      throw new YarnException("The application id is NOT registered: " + appId);
+    }
+    LOG.info("Force killing application: " + appId);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS8 INS42 INS9 INS42 INS42 INS14 INS42 INS41 INS21 INS21 INS51 INS25 INS21 INS25 INS60 INS60 INS25 INS25 INS21 MOV41 INS43 INS42 INS7 INS7 INS42 INS8 INS42 INS8 INS32 INS42 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS38 INS8 INS32 INS42 INS42 INS9 INS42 INS9 INS21 INS25 INS25 INS60 INS21 INS53 INS42 INS42 INS27 INS60 INS21 INS53 INS42 INS42 INS45 INS42 INS9 INS32 INS33 INS21 INS51 INS42 INS53 INS42 INS42 INS27 INS32 INS27 INS8 MOV32 INS8 INS43 INS59 INS32 INS14 INS45 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS7 INS42 INS8 INS14 INS45 INS42 INS42 INS42 INS32 INS34 INS21 INS54 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS70 INS43 INS27 INS42 INS42 INS32 INS8 INS12 INS14 INS42 INS42 INS32 INS42 INS44 INS32 INS8 INS42 INS45 INS42 INS42 INS42 INS45 INS21 INS21 INS44 INS8 INS43 INS40 INS42 INS42 INS74 INS42 INS42 INS42 INS60 INS25 INS32 INS32 INS43 INS42 INS21 INS42 INS43 INS43 INS74 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS32 INS42 INS32 INS60 INS25 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS7 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS42 INS9 INS42 INS42 INS42 INS42 INS32 INS44 INS42 INS8 INS42 INS42 INS43 INS42 INS21 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8