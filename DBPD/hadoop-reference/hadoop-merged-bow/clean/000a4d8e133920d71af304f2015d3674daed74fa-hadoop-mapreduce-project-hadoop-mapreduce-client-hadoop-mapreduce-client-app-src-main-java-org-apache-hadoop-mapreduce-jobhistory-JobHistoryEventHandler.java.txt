MAPREDUCE-6688. Store job configurations in Timeline Service v2 (Varun Saxena via sjlee)

-  
+
+  private org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity
+      createJobEntity(JobId jobId) {
+    org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity entity =
+        new org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity();
+    entity.setId(jobId.toString());
+    entity.setType(MAPREDUCE_JOB_ENTITY_TYPE);
+    return entity;
+  }
+
+  private void publishConfigsOnJobSubmittedEvent(JobSubmittedEvent event,
+      JobId jobId) {
+    if (event.getJobConf() == null) {
+      return;
+    }
+    // Publish job configurations both as job and app entity.
+    // Configs are split into multiple entities if they exceed 100kb in size.
+    org.apache.hadoop.yarn.api.records.timelineservice.
+        TimelineEntity jobEntityForConfigs = createJobEntity(jobId);
+    ApplicationEntity appEntityForConfigs = new ApplicationEntity();
+    String appId = jobId.getAppId().toString();
+    appEntityForConfigs.setId(appId);
+    try {
+      int configSize = 0;
+      for (Map.Entry<String, String> entry : event.getJobConf()) {
+        int size = entry.getKey().length() + entry.getValue().length();
+        configSize += size;
+        if (configSize > JobHistoryEventUtils.ATS_CONFIG_PUBLISH_SIZE_BYTES) {
+          if (jobEntityForConfigs.getConfigs().size() > 0) {
+            timelineClient.putEntities(jobEntityForConfigs);
+            timelineClient.putEntities(appEntityForConfigs);
+            jobEntityForConfigs = createJobEntity(jobId);
+            appEntityForConfigs = new ApplicationEntity();
+            appEntityForConfigs.setId(appId);
+          }
+          configSize = size;
+        }
+        jobEntityForConfigs.addConfig(entry.getKey(), entry.getValue());
+        appEntityForConfigs.addConfig(entry.getKey(), entry.getValue());
+      }
+      if (configSize > 0) {
+        timelineClient.putEntities(jobEntityForConfigs);
+        timelineClient.putEntities(appEntityForConfigs);
+      }
+    } catch (IOException | YarnException e) {
+      LOG.error("Exception while publishing configs on JOB_SUBMITTED Event " +
+          " for the job : " + jobId, e);
+    }
+  }
+
+      return;
-
+    if (event.getEventType() == EventType.JOB_SUBMITTED) {
+      // Publish configs after main job submitted event has been posted.
+      publishConfigsOnJobSubmittedEvent((JobSubmittedEvent)event, jobId);
+    }

INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS40 INS43 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS60 INS21 INS54 INS25 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS27 INS8 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS41 INS40 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS70 INS25 INS44 INS8 INS32 INS40 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS39 INS59 INS44 INS32 INS8 INS27 INS8 INS84 INS42 INS21 INS41 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS34 INS74 INS42 INS42 INS42 INS60 INS21 INS25 INS21 INS21 INS42 INS34 INS21 INS21 INS43 INS43 INS32 INS42 INS11 INS42 INS43 INS43 INS43 INS39 INS59 INS7 INS27 INS8 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS40 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS40 INS25 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS32 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS34 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42