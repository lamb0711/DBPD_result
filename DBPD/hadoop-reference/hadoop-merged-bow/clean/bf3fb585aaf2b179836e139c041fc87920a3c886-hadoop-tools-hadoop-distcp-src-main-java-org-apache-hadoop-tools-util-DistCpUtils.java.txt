HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.

+
+import org.apache.hadoop.fs.BlockLocation;
+import org.apache.hadoop.hdfs.DistributedFileSystem;
+import java.util.LinkedList;
-                                                                 DistCpOptions options) {
+      DistCpOptions options) {
+   * Converts FileStatus to a list of CopyListingFileStatus.
+   * The resulted list contains either one CopyListingFileStatus per chunk of
+   * file-blocks (if file-size exceeds blockSize * blocksPerChunk, and there
+   * are more blocks in the file than blocksperChunk), or a single
+   * CopyListingFileStatus for the entire file (if file-size is too small to
+   * split).
+   * If preserving ACLs, populates the CopyListingFileStatus with the ACLs.
+   * If preserving XAttrs, populates the CopyListingFileStatus with the XAttrs.
+   *
+   * @param fileSystem FileSystem containing the file
+   * @param fileStatus FileStatus of file
+   * @param preserveAcls boolean true if preserving ACLs
+   * @param preserveXAttrs boolean true if preserving XAttrs
+   * @param preserveRawXAttrs boolean true if preserving raw.* XAttrs
+   * @param blocksPerChunk size of chunks when copying chunks in parallel
+   * @return list of CopyListingFileStatus
+   * @throws IOException if there is an I/O error
+   */
+  public static LinkedList<CopyListingFileStatus> toCopyListingFileStatus(
+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,
+      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)
+          throws IOException {
+    LinkedList<CopyListingFileStatus> copyListingFileStatus =
+        new LinkedList<CopyListingFileStatus>();
+
+    final CopyListingFileStatus clfs = toCopyListingFileStatusHelper(
+        fileSystem, fileStatus, preserveAcls,
+        preserveXAttrs, preserveRawXAttrs,
+        0, fileStatus.getLen());
+    final long blockSize = fileStatus.getBlockSize();
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("toCopyListing: " + fileStatus + " chunkSize: "
+          + blocksPerChunk + " isDFS: " +
+          (fileSystem instanceof DistributedFileSystem));
+    }
+    if ((blocksPerChunk > 0) &&
+        !fileStatus.isDirectory() &&
+        (fileStatus.getLen() > blockSize * blocksPerChunk)) {
+      // split only when the file size is larger than the intended chunk size
+      final BlockLocation[] blockLocations;
+      blockLocations = fileSystem.getFileBlockLocations(fileStatus, 0,
+            fileStatus.getLen());
+
+      int numBlocks = blockLocations.length;
+      long curPos = 0;
+      if (numBlocks <= blocksPerChunk) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("  add file " + clfs);
+        }
+        copyListingFileStatus.add(clfs);
+      } else {
+        int i = 0;
+        while (i < numBlocks) {
+          long curLength = 0;
+          for (int j = 0; j < blocksPerChunk && i < numBlocks; ++j, ++i) {
+            curLength += blockLocations[i].getLength();
+          }
+          if (curLength > 0) {
+            CopyListingFileStatus clfs1 = new CopyListingFileStatus(clfs);
+            clfs1.setChunkOffset(curPos);
+            clfs1.setChunkLength(curLength);
+            if (LOG.isDebugEnabled()) {
+              LOG.debug("  add file chunk " + clfs1);
+            }
+            copyListingFileStatus.add(clfs1);
+            curPos += curLength;
+          }
+        }
+      }
+    } else {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("  add file/dir " + clfs);
+      }
+      copyListingFileStatus.add(clfs);
+    }
+
+    return copyListingFileStatus;
+  }
+
+  /**
+   * @param chunkOffset chunk offset in bytes
+   * @param chunkLength chunk length in bytes
+   * @return CopyListingFileStatus
-  public static CopyListingFileStatus toCopyListingFileStatus(
+  public static CopyListingFileStatus toCopyListingFileStatusHelper(
-      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {
+      boolean preserveXAttrs, boolean preserveRawXAttrs,
+      long chunkOffset, long chunkLength) throws IOException {
-      new CopyListingFileStatus(fileStatus);
+        new CopyListingFileStatus(fileStatus, chunkOffset, chunkLength);
+
+  /*
+   * Return the Path for a given chunk.
+   * Used when splitting large file into chunks to copy in parallel.
+   * @param targetFile path to target file
+   * @param srcFileStatus source file status in copy listing
+   * @return path to the chunk specified by the parameters to store
+   * in target cluster temporarily
+   */
+  public static Path getSplitChunkPath(Path targetFile,
+      CopyListingFileStatus srcFileStatus) {
+    return new Path(targetFile.toString()
+        + ".____distcpSplit____" + srcFileStatus.getChunkOffset()
+        + "." + srcFileStatus.getChunkLength());
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 UPD42 INS44 INS44 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS41 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS60 INS42 INS43 INS42 INS43 INS42 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS74 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS32 INS8 INS27 INS8 INS8 INS42 INS42 INS66 INS42 INS66 INS66 INS43 INS59 INS42 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS36 INS38 INS36 INS60 INS21 INS60 INS60 INS25 INS25 INS21 INS42 INS42 INS14 INS43 INS27 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS32 INS27 INS32 INS27 INS83 INS5 INS59 INS7 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS32 INS8 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS45 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS32 INS27 INS43 INS85 INS42 INS42 INS32 INS42 INS40 INS42 INS34 INS42 INS42 INS25 INS21 INS60 INS61 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS32 INS8 INS32 INS39 INS59 INS27 INS8 INS32 INS62 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS60 INS24 INS25 INS42 INS42 INS27 INS42 INS43 INS32 INS39 INS59 INS58 INS27 INS38 INS38 INS8 INS27 INS8 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS39 INS59 INS27 INS27 INS42 INS42 INS21 INS42 INS34 MOV60 INS21 INS21 INS25 INS21 INS21 INS45 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS7 MOV43 INS32 INS32 INS32 INS8 INS32 INS7 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS2 INS42 MOV43 UPD42 INS32 INS42 INS42 INS42 INS42 INS27 INS45 INS42