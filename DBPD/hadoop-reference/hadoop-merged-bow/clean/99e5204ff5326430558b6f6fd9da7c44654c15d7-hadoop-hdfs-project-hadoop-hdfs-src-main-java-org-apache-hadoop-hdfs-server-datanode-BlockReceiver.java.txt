HDFS-9178. Slow datanode I/O can cause a wrong node to be marked bad. Contributed by Kihwal Lee.

+import java.io.EOFException;
+  private long lastSentTime;
+  private long maxSendIdleTime;
-      this.responseInterval = (long) (datanode.getDnConf().socketTimeout * 0.5);
+      final long readTimeout = datanode.getDnConf().socketTimeout;
+      this.responseInterval = (long) (readTimeout * 0.5);
+      this.lastSentTime = Time.monotonicNow();
+      // Downstream will timeout in readTimeout on receiving the next packet.
+      // If there is no data traffic, a heartbeat packet is sent at
+      // the interval of 0.5*readTimeout. Here, we set 0.9*readTimeout to be
+      // the threshold for detecting congestion.
+      this.maxSendIdleTime = (long) (readTimeout * 0.9);
+  synchronized void setLastSentTime(long sentTime) {
+    lastSentTime = sentTime;
+  }
+
+  /**
+   * It can return false if
+   * - upstream did not send packet for a long time
+   * - a packet was received but got stuck in local disk I/O.
+   * - a packet was received but got stuck on send to mirror.
+   */
+  synchronized boolean packetSentInTime() {
+    long diff = Time.monotonicNow() - lastSentTime;
+    if (diff > maxSendIdleTime) {
+      LOG.info("A packet was last sent " + diff + " milliseconds ago.");
+      return false;
+    }
+    return true;
+  }
+
+    // Drop heartbeat for testing.
+    if (seqno < 0 && len == 0 &&
+        DataNodeFaultInjector.get().dropHeartbeatPacket()) {
+      return 0;
+    }
+
-        long duration = Time.monotonicNow() - begin;
+        long now = Time.monotonicNow();
+        setLastSentTime(now);
+        long duration = now - begin;
+            } else if (ioe instanceof EOFException && !packetSentInTime()) {
+              // The downstream error was caused by upstream including this
+              // node not sending packet in time. Let the upstream determine
+              // who is at fault.  If the immediate upstream node thinks it
+              // has sent a packet in time, this node will be reported as bad.
+              // Otherwise, the upstream node will propagate the error up by
+              // closing the connection.
+              LOG.warn("The downstream error might be due to congestion in " +
+                  "upstream including this node. Propagating the error: ",
+                  ioe);
+              throw ioe;

INS26 INS40 INS23 INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS42 INS39 INS42 INS21 INS65 MOV60 INS25 INS41 INS25 INS7 INS66 INS66 INS66 INS66 INS27 INS8 INS9 INS27 INS8 INS60 INS21 INS21 INS42 INS42 UPD42 INS42 INS42 INS21 INS41 INS27 INS32 INS41 INS83 INS39 INS59 INS7 INS7 UPD42 INS32 INS9 INS27 INS27 INS32 INS42 INS34 INS42 MOV22 INS22 INS32 INS22 INS11 INS42 INS42 INS27 INS42 INS34 INS42 INS34 INS42 INS42 INS60 INS21 INS60 INS52 INS42 INS42 INS42 INS52 INS42 INS39 INS36 INS45 INS42 INS45 INS39 INS59 INS32 INS39 INS59 INS27 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS25 INS27 INS8 MOV8 INS62 INS38 INS21 INS53 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS45