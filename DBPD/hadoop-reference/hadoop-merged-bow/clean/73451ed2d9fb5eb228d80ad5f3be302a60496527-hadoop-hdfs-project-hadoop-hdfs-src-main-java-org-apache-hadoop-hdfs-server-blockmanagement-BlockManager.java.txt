HDFS-395.  DFS Scalability: Incremental block reports. Contributed by Tomasz Nykiel.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161992 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.protocol.BlockCommand;
+import org.apache.hadoop.hdfs.server.protocol.ReceivedDeletedBlockInfo;
-  private void removeStoredBlock(Block block, DatanodeDescriptor node) {
+  public void removeStoredBlock(Block block, DatanodeDescriptor node) {
-  /** The given node is reporting that it received a certain block. */
-  public void blockReceived(final DatanodeID nodeID, final String poolId,
-      final Block block, final String delHint) throws IOException {
+  /** The given node is reporting that it received/deleted certain blocks. */
+  public void blockReceivedAndDeleted(final DatanodeID nodeID, 
+     final String poolId, 
+     final ReceivedDeletedBlockInfo receivedAndDeletedBlocks[]
+  ) throws IOException {
+    int received = 0;
+    int deleted = 0;
-        final String s = block + " is received from dead or unregistered node "
-            + nodeID.getName();
-        NameNode.stateChangeLog.warn("BLOCK* blockReceived: " + s);
-        throw new IOException(s);
-      } 
-
-      if (NameNode.stateChangeLog.isDebugEnabled()) {
-        NameNode.stateChangeLog.debug("BLOCK* blockReceived: " + block
-            + " is received from " + nodeID.getName());
+        NameNode.stateChangeLog
+            .warn("BLOCK* blockReceivedDeleted"
+                + " is received from dead or unregistered node "
+                + nodeID.getName());
+        throw new IOException(
+            "Got blockReceivedDeleted message from unregistered or dead node");
-      addBlock(node, block, delHint);
+      for (int i = 0; i < receivedAndDeletedBlocks.length; i++) {
+        if (receivedAndDeletedBlocks[i].isDeletedBlock()) {
+          removeStoredBlock(
+              receivedAndDeletedBlocks[i].getBlock(), node);
+          deleted++;
+        } else {
+          addBlock(node, receivedAndDeletedBlocks[i].getBlock(),
+              receivedAndDeletedBlocks[i].getDelHints());
+          received++;
+        }
+        if (NameNode.stateChangeLog.isDebugEnabled()) {
+          NameNode.stateChangeLog.debug("BLOCK* block"
+              + (receivedAndDeletedBlocks[i].isDeletedBlock() ? "Deleted"
+                  : "Received") + ": " + receivedAndDeletedBlocks[i].getBlock()
+              + " is received from " + nodeID.getName());
+        }
+      }
+      NameNode.stateChangeLog
+          .debug("*BLOCK* NameNode.blockReceivedAndDeleted: " + "from "
+              + nodeID.getName() + " received: " + received + ", "
+              + " deleted: " + deleted);
+    block.setNumBytes(BlockCommand.NO_ACK);

INS26 INS26 INS40 INS40 UPD83 UPD42 INS8 UPD43 UPD42 INS85 MOV21 INS60 INS60 MOV54 INS21 UPD66 UPD42 INS39 INS59 INS39 INS59 INS8 INS8 INS32 INS42 INS34 INS42 INS34 MOV60 MOV25 INS24 MOV21 MOV21 INS42 INS42 INS40 INS58 INS27 INS37 INS8 INS39 INS59 INS42 INS40 INS42 INS25 MOV25 INS40 UPD42 INS27 INS42 INS34 INS32 INS8 INS8 INS27 MOV32 INS45 INS42 INS45 INS45 INS42 MOV27 INS45 INS2 INS42 INS21 INS21 INS21 INS21 INS45 INS45 INS45 INS42 INS42 INS32 INS37 INS32 INS37 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS2 INS42 INS2 INS42 INS2 INS42 UPD45 INS36 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS2 INS42 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS2 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL8 DEL8 DEL8