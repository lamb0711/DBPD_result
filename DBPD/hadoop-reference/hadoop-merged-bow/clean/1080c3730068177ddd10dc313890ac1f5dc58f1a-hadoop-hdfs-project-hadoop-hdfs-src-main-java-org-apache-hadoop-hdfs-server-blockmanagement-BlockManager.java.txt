Merge remote-tracking branch 'apache/trunk' into HDFS-7285

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Namesystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/DFSTestUtil.java

Change-Id: I8511c4d64b0959e79129febc179845a3892fedcc

+import org.apache.hadoop.hdfs.server.namenode.ha.HAContext;
+
+  /** flag indicating whether replication queues have been initialized */
+  private boolean initializedReplQueues;
+
-   * determined by system configuration.
+   * determined by system configuration and throw an exception if it's not.
+   *
+   * @param src the path to the target file
+   * @param replication the requested replication factor
+   * @param clientName the name of the client node making the request
+   * @throws java.io.IOException thrown if the requested replication factor
+   * is out of bounds
-    if (replication >= minReplication && replication <= maxReplication) {
-      //common case. avoid building 'text'
-      return;
+    if (replication < minReplication || replication > maxReplication) {
+      StringBuilder msg = new StringBuilder("Requested replication factor of ");
+
+      msg.append(replication);
+
+      if (replication > maxReplication) {
+        msg.append(" exceeds maximum of ");
+        msg.append(maxReplication);
+      } else {
+        msg.append(" is less than the required minimum of ");
+        msg.append(minReplication);
+      }
+
+      msg.append(" for ").append(src);
+
+      if (clientName != null) {
+        msg.append(" from ").append(clientName);
+      }
+
+      throw new IOException(msg.toString());
-    
-    String text = "file " + src 
-      + ((clientName != null) ? " on client " + clientName : "")
-      + ".\n"
-      + "Requested replication " + replication;
-
-    if (replication > maxReplication)
-      throw new IOException(text + " exceeds maximum " + maxReplication);
-
-    if (replication < minReplication)
-      throw new IOException(text + " is less than the required minimum " +
-                            minReplication);
-    if (!namesystem.isPopulatingReplQueues()) {
+    if (!isPopulatingReplQueues()) {
-    if (!namesystem.isPopulatingReplQueues()) {
+    if (!isPopulatingReplQueues()) {
-    if (!namesystem.isPopulatingReplQueues()) {
+    if (!isPopulatingReplQueues()) {
-    } else if (namesystem.isPopulatingReplQueues()) {
+    } else if (isPopulatingReplQueues()) {
-    if (!namesystem.isInStartupSafeMode() 
-        || namesystem.isPopulatingReplQueues()) {
+    if (!namesystem.isInStartupSafeMode()
+        || isPopulatingReplQueues()) {
-    if (!namesystem.isPopulatingReplQueues()) {
+    if (!isPopulatingReplQueues()) {
-    if (!namesystem.isPopulatingReplQueues()) {
+    if (!isPopulatingReplQueues()) {
-      if (!namesystem.isPopulatingReplQueues()) {
+      if (!isPopulatingReplQueues()) {
-          if (namesystem.isPopulatingReplQueues()) {
+          if (isPopulatingReplQueues()) {
+
+  /**
+   * Initialize replication queues.
+   */
+  public void initializeReplQueues() {
+    LOG.info("initializing replication queues");
+    processMisReplicatedBlocks();
+    initializedReplQueues = true;
+  }
+
+  /**
+   * Check if replication queues are to be populated
+   * @return true when node is HAState.Active and not in the very first safemode
+   */
+  public boolean isPopulatingReplQueues() {
+    if (!shouldPopulateReplQueues()) {
+      return false;
+    }
+    return initializedReplQueues;
+  }
+
+  public void setInitializedReplQueues(boolean v) {
+    this.initializedReplQueues = v;
+  }
+
+  public boolean shouldPopulateReplQueues() {
+    HAContext haContext = namesystem.getHAContext();
+    if (haContext == null || haContext.getState() == null)
+      return false;
+    return haContext.getState().shouldPopulateReplQueues();
+  }

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS59 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS65 INS42 INS65 INS65 INS65 INS65 INS25 INS65 INS21 INS21 INS21 INS65 INS65 INS25 INS41 INS39 INS42 INS21 INS60 MOV25 INS41 INS66 UPD66 INS42 INS66 INS42 INS66 INS42 INS66 INS40 INS66 INS66 INS27 INS8 MOV8 MOV8 INS66 INS32 INS32 INS7 INS66 INS66 INS38 INS8 INS42 INS7 INS43 INS59 INS27 INS41 INS32 MOV27 UPD27 MOV27 INS60 INS21 INS25 INS21 INS25 INS53 INS42 INS42 INS45 INS42 INS42 INS9 INS32 INS41 INS22 INS42 UPD42 MOV42 INS42 INS32 INS27 INS27 INS9 INS32 INS42 UPD42 INS43 INS59 INS32 MOV27 INS8 MOV8 INS32 MOV27 INS8 INS14 INS42 INS9 INS52 INS42 INS42 INS42 INS42 INS33 INS32 INS33 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS21 MOV43 INS32 INS42 INS42 INS43 INS45 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 DEL41 DEL42 DEL42 DEL27 DEL27 DEL25 DEL42 DEL43 DEL42 DEL45 DEL42 DEL36 DEL45 DEL42 DEL27 DEL45 DEL16 DEL36 DEL45 DEL45 DEL42 DEL27 DEL59 DEL60 DEL43 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53