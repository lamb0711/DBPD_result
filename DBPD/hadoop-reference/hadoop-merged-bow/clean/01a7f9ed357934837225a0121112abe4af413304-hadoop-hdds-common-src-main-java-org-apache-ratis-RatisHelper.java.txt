HDDS-597. Ratis: Support secure gRPC endpoint with mTLS for Ratis. Contributed by Ajay Kumar.

+import org.apache.hadoop.hdds.security.x509.SecurityConfig;
+import org.apache.ratis.grpc.GrpcFactory;
+import org.apache.ratis.grpc.GrpcTlsConfig;
+import org.apache.ratis.rpc.SupportedRpcType;
-      RetryPolicy retryPolicy) throws IOException {
+      RetryPolicy retryPolicy, int maxOutStandingRequest,
+      GrpcTlsConfig tlsConfig) throws IOException {
-            pipeline.getNodes()), retryPolicy);
+        pipeline.getNodes()), retryPolicy, maxOutStandingRequest, tlsConfig);
-      RetryPolicy retryPolicy) {
+      RetryPolicy retryPolicy, int maxOutstandingRequests,
+      GrpcTlsConfig tlsConfig) {
-        newRaftGroup(new ArrayList<>(Arrays.asList(leader))), retryPolicy);
+        newRaftGroup(new ArrayList<>(Arrays.asList(leader))), retryPolicy,
+        maxOutstandingRequests, tlsConfig);
-      RaftGroup group, RetryPolicy retryPolicy) {
-    return newRaftClient(rpcType, leader.getId(), group, retryPolicy);
+      RetryPolicy retryPolicy, int maxOutstandingRequests) {
+    return newRaftClient(rpcType, leader.getId(),
+        newRaftGroup(new ArrayList<>(Arrays.asList(leader))), retryPolicy,
+        maxOutstandingRequests, null);
-      RaftGroup group, RetryPolicy retryPolicy) {
+      RaftGroup group, RetryPolicy retryPolicy, int maxOutStandingRequest,
+      GrpcTlsConfig tlsConfig) {
-
-    return RaftClient.newBuilder()
+    GrpcConfigKeys.OutputStream.setOutstandingAppendsMax(properties,
+        maxOutStandingRequest);
+    RaftClient.Builder builder =  RaftClient.newBuilder()
-        .setRetryPolicy(retryPolicy)
-        .build();
+        .setRetryPolicy(retryPolicy);
+
+    // TODO: GRPC TLS only for now, netty/hadoop RPC TLS support later.
+    if (tlsConfig != null && rpcType == SupportedRpcType.GRPC) {
+      builder.setParameters(GrpcFactory.newRaftParameters(tlsConfig));
+    }
+    return builder.build();
+  }
+
+  static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf) {
+    if (conf.isGrpcTlsEnabled()) {
+      if (conf.isGrpcMutualTlsRequired()) {
+        return new GrpcTlsConfig(
+            null, null, conf.getTrustStoreFile(), false);
+      } else {
+        return new GrpcTlsConfig(conf.getClientPrivateKeyFile(),
+            conf.getClientCertChainFile(), conf.getTrustStoreFile(), true);
+      }
+    }
+    return null;
+  }
+
+  static GrpcTlsConfig createTlsServerConfig(SecurityConfig conf) {
+    if (conf.isGrpcTlsEnabled()) {
+      if (conf.isGrpcMutualTlsRequired()) {
+        return new GrpcTlsConfig(
+            conf.getServerPrivateKeyFile(), conf.getServerCertChainFile(), null,
+            false);
+      } else {
+        return new GrpcTlsConfig(conf.getServerPrivateKeyFile(),
+            conf.getServerCertChainFile(), conf.getClientCertChainFile(), true);
+      }
+    }
+    return null;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV44 INS31 INS31 INS44 INS44 INS44 INS44 INS44 INS44 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS39 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS21 INS60 INS25 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS25 INS41 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS32 INS8 INS33 INS42 INS32 INS8 INS33 INS42 INS42 MOV32 INS42 INS42 MOV32 INS32 INS42 INS33 INS40 INS42 INS42 INS42 INS40 INS42 MOV32 INS27 INS27 INS21 INS42 INS42 INS42 INS25 INS42 INS42 INS25 INS42 INS42 INS14 INS42 INS33 INS42 INS40 INS32 INS32 INS8 INS8 INS32 INS8 INS8 INS74 INS32 INS42 INS42 INS32 INS42 INS42 INS41 INS41 INS42 INS42 INS41 INS41 INS43 INS42 INS42 MOV42 INS42 INS42 INS42 INS14 INS14 INS14 INS14 INS42 INS43 INS33 INS33 INS32 INS9 INS43 INS32 INS32 INS32 INS9 INS43 INS32 INS32 INS33 INS9 INS43 INS32 INS32 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42