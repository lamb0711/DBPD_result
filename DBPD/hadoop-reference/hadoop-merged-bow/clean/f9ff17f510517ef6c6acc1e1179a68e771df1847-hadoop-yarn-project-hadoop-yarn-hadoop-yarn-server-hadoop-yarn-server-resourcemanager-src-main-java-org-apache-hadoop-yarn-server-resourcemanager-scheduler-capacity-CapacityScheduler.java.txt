Merge branch 'YARN-5734' into trunk. (xgong)

-import java.io.InputStream;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.MutableConfScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.MutableConfigurationProvider;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf.CSConfigurationProvider;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf.FileBasedCSConfigurationProvider;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf.MutableCSConfigurationProvider;
-    ResourceAllocationCommitter {
+    ResourceAllocationCommitter, MutableConfScheduler {
+  private CSConfigurationProvider csConfProvider;
+
-      this.conf = loadCapacitySchedulerConfiguration(configuration);
+      String confProviderStr = configuration.get(
+          YarnConfiguration.SCHEDULER_CONFIGURATION_STORE_CLASS,
+          YarnConfiguration.DEFAULT_CONFIGURATION_STORE);
+      switch (confProviderStr) {
+      case YarnConfiguration.FILE_CONFIGURATION_STORE:
+        this.csConfProvider =
+            new FileBasedCSConfigurationProvider(rmContext);
+        break;
+      case YarnConfiguration.MEMORY_CONFIGURATION_STORE:
+      case YarnConfiguration.LEVELDB_CONFIGURATION_STORE:
+      case YarnConfiguration.ZK_CONFIGURATION_STORE:
+        this.csConfProvider = new MutableCSConfigurationProvider(rmContext);
+        break;
+      default:
+        throw new IOException("Invalid configuration store class: " +
+            confProviderStr);
+      }
+      this.csConfProvider.init(configuration);
+      this.conf = this.csConfProvider.loadConfiguration(configuration);
+    if (isConfigurationMutable()) {
+      ((MutableConfigurationProvider) csConfProvider).close();
+    }
-      this.conf = loadCapacitySchedulerConfiguration(configuration);
+      this.conf = csConfProvider.loadConfiguration(configuration);
+  @Override
-  private CapacitySchedulerConfiguration loadCapacitySchedulerConfiguration(
-      Configuration configuration) throws IOException {
-    try {
-      InputStream CSInputStream =
-          this.rmContext.getConfigurationProvider()
-              .getConfigurationInputStream(configuration,
-                  YarnConfiguration.CS_CONFIGURATION_FILE);
-      if (CSInputStream != null) {
-        configuration.addResource(CSInputStream);
-        return new CapacitySchedulerConfiguration(configuration, false);
-      }
-      return new CapacitySchedulerConfiguration(configuration, true);
-    } catch (Exception e) {
-      throw new IOException(e);
-    }
-  }
-
+
+  @Override
+  public boolean isConfigurationMutable() {
+    return csConfProvider instanceof MutableConfigurationProvider;
+  }
+
+  @Override
+  public MutableConfigurationProvider getMutableConfProvider() {
+    if (isConfigurationMutable()) {
+      return (MutableConfigurationProvider) csConfProvider;
+    }
+    return null;
+  }

MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS42 INS83 INS43 INS59 INS78 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 UPD42 MOV42 INS42 INS25 INS42 INS42 INS41 INS42 INS42 MOV25 MOV41 INS32 INS8 INS62 INS32 INS8 INS33 INS60 INS50 INS21 INS42 INS21 INS42 INS43 UPD42 MOV42 MOV41 INS43 INS59 INS42 INS49 INS21 INS10 INS49 INS49 INS49 INS21 INS10 INS49 INS53 INS32 INS32 UPD42 MOV42 INS11 INS42 INS42 INS32 INS40 INS7 INS40 INS40 INS40 INS7 INS14 INS22 INS42 INS42 INS36 INS42 INS43 INS42 INS42 INS42 INS40 INS40 INS22 INS14 INS22 INS14 MOV43 INS27 INS52 INS42 INS22 UPD42 INS11 INS42 UPD42 UPD42 MOV42 INS52 INS42 INS43 INS42 INS52 INS42 INS43 INS42 INS45 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL43 DEL42 DEL9 DEL14 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL9 DEL14