HDDS-571. Update SCM chill mode exit criteria to optionally wait for n datanodes. Contributed by Ajay Kumar.

+import java.util.HashSet;
+import java.util.UUID;
+  private static final String DN_EXIT_RULE = "DataNodeChillModeRule";
-    exitRules
-        .put(CONT_EXIT_RULE, new ContainerChillModeRule(config, allContainers));
+    exitRules.put(CONT_EXIT_RULE,
+        new ContainerChillModeRule(config, allContainers));
+    exitRules.put(DN_EXIT_RULE, new DataNodeChillModeRule(config));
+      exitRules.get(DN_EXIT_RULE).process(nodeRegistrationContainerReport);
+      if (maxContainer == 0) {
+        return 1;
+      }
+  /**
+   * Class defining Chill mode exit criteria according to number of DataNodes
+   * registered with SCM.
+   */
+  public class DataNodeChillModeRule implements
+      ChillModeExitRule<NodeRegistrationContainerReport> {
+
+    // Min DataNodes required to exit chill mode.
+    private int requiredDns;
+    private int registeredDns = 0;
+    // Set to track registered DataNodes.
+    private HashSet<UUID> registeredDnSet;
+
+    public DataNodeChillModeRule(Configuration conf) {
+      requiredDns = conf
+          .getInt(HddsConfigKeys.HDDS_SCM_CHILLMODE_MIN_DATANODE,
+              HddsConfigKeys.HDDS_SCM_CHILLMODE_MIN_DATANODE_DEFAULT);
+      registeredDnSet = new HashSet<>(requiredDns * 2);
+    }
+
+    @Override
+    public boolean validate() {
+      return registeredDns >= requiredDns;
+    }
+
+    @VisibleForTesting
+    public double getRegisteredDataNodes() {
+      return registeredDns;
+    }
+
+    @Override
+    public void process(NodeRegistrationContainerReport reportsProto) {
+      if (requiredDns == 0) {
+        // No dn check required.
+        return;
+      }
+
+      if(inChillMode.get()) {
+        registeredDnSet.add(reportsProto.getDatanodeDetails().getUuid());
+        registeredDns = registeredDnSet.size();
+        LOG.info("SCM in chill mode. {} DataNodes registered, {} required.",
+            registeredDns, requiredDns);
+      }
+    }
+
+    @Override
+    public void cleanup() {
+      registeredDnSet.clear();
+    }
+  }
+

INS26 INS26 INS40 INS40 INS23 INS55 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS74 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS45 INS21 INS65 INS43 INS43 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS32 INS25 INS66 INS66 INS42 INS42 INS42 INS42 INS34 INS43 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS25 INS25 INS42 INS21 INS42 INS42 INS42 INS14 INS21 INS27 INS8 INS42 INS42 INS42 INS7 INS7 INS27 INS42 INS42 INS27 INS8 INS32 INS8 INS32 INS43 INS42 INS32 INS42 INS34 INS41 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS34 INS41 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS40 INS40 INS74 INS27 INS32 INS7 INS32 INS42 INS42 INS42 INS43 INS42 INS34 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42