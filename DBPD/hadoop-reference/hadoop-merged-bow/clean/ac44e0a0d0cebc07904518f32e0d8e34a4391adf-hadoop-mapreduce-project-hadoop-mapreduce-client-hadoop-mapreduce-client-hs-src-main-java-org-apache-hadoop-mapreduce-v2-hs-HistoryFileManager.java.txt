MAPREDUCE-5268. Improve history server startup performance. Contributed by Karthik Kambatla


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489012 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.NavigableSet;
+import java.util.concurrent.atomic.AtomicInteger;
-  static class JobListCache {
+  /**
+   * Wrapper around {@link ConcurrentSkipListMap} that maintains size along
+   * side for O(1) size() implementation for use in JobListCache.
+   *
+   * Note: The size is not updated atomically with changes additions/removals.
+   * This race can lead to size() returning an incorrect size at times.
+   */
+  static class JobIdHistoryFileInfoMap {
+    private AtomicInteger mapSize;
+
+    JobIdHistoryFileInfoMap() {
+      cache = new ConcurrentSkipListMap<JobId, HistoryFileInfo>();
+      mapSize = new AtomicInteger();
+    }
+
+    public HistoryFileInfo putIfAbsent(JobId key, HistoryFileInfo value) {
+      HistoryFileInfo ret = cache.putIfAbsent(key, value);
+      if (ret == null) {
+        mapSize.incrementAndGet();
+      }
+      return ret;
+    }
+
+    public HistoryFileInfo remove(JobId key) {
+      HistoryFileInfo ret = cache.remove(key);
+      if (ret != null) {
+        mapSize.decrementAndGet();
+      }
+      return ret;
+    }
+
+    /**
+     * Returns the recorded size of the internal map. Note that this could be out
+     * of sync with the actual size of the map
+     * @return "recorded" size
+     */
+    public int size() {
+      return mapSize.get();
+    }
+
+    public HistoryFileInfo get(JobId key) {
+      return cache.get(key);
+    }
+
+    public NavigableSet<JobId> navigableKeySet() {
+      return cache.navigableKeySet();
+    }
+
+    public Collection<HistoryFileInfo> values() {
+      return cache.values();
+    }
+  }
+
+  static class JobListCache {
+    private JobIdHistoryFileInfoMap cache;
-      this.cache = new ConcurrentSkipListMap<JobId, HistoryFileInfo>();
+      this.cache = new JobIdHistoryFileInfoMap();
-      JobId jobId = fileInfo.getJobIndexInfo().getJobId();
+      JobId jobId = fileInfo.getJobId();

INS26 INS26 INS40 INS40 INS55 INS29 INS83 INS42 MOV23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS23 INS65 INS83 INS43 INS59 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS74 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS43 INS59 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS42 MOV21 INS21 INS42 MOV43 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS41 INS42 INS43 INS42 INS41 INS43 INS43 INS41 INS43 INS43 INS41 INS42 INS42 INS21 INS42 INS7 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS66 INS66 INS66 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS7 INS43 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV22 INS14 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS43 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32