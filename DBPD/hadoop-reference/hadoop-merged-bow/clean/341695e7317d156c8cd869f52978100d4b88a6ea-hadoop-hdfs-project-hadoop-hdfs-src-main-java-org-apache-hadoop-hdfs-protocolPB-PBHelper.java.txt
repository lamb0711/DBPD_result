Merge trunk into branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1612742 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.StorageTypesProto;
-    final int storageTypesCount = proto.getStorageTypesCount();
-    final StorageType[] storageTypes;
-    if (storageTypesCount == 0) {
-      storageTypes = null;
-    } else {
-      Preconditions.checkState(storageTypesCount == locs.size());
-      storageTypes = convertStorageTypeProtos(proto.getStorageTypesList());
-    }
+    final StorageType[] storageTypes = convertStorageTypes(
+        proto.getStorageTypesList(), locs.size());
+    StorageType[][] targetStorageTypes = new StorageType[targetList.size()][];
+    List<StorageTypesProto> targetStorageTypesList = blkCmd.getTargetStorageTypesList();
+    if (targetStorageTypesList.isEmpty()) { // missing storage types
+      for(int i = 0; i < targetStorageTypes.length; i++) {
+        targetStorageTypes[i] = new StorageType[targets[i].length];
+        Arrays.fill(targetStorageTypes[i], StorageType.DEFAULT);
+      }
+    } else {
+      for(int i = 0; i < targetStorageTypes.length; i++) {
+        List<StorageTypeProto> p = targetStorageTypesList.get(i).getStorageTypesList();
+        targetStorageTypes[i] = p.toArray(new StorageType[p.size()]);
+      }
+    }
+
-        targetStorageIDs);
+        targetStorageTypes, targetStorageIDs);
-  private static StorageTypeProto convertStorageType(
-      StorageType type) {
+  public static List<StorageTypeProto> convertStorageTypes(
+      StorageType[] types) {
+    return convertStorageTypes(types, 0);
+  }
+
+  public static List<StorageTypeProto> convertStorageTypes(
+      StorageType[] types, int startIdx) {
+    if (types == null) {
+      return null;
+    }
+    final List<StorageTypeProto> protos = new ArrayList<StorageTypeProto>(
+        types.length);
+    for (int i = startIdx; i < types.length; ++i) {
+      protos.add(convertStorageType(types[i]));
+    }
+    return protos; 
+  }
+
+  public static StorageTypeProto convertStorageType(StorageType type) {
-                               PBHelper.convertType(s.getStorageType()));
+                               PBHelper.convertStorageType(s.getStorageType()));
-  private static StorageType convertType(StorageTypeProto type) {
+  public static StorageType convertStorageType(StorageTypeProto type) {
-  private static StorageType[] convertStorageTypeProtos(
-      List<StorageTypeProto> storageTypesList) {
-    final StorageType[] storageTypes = new StorageType[storageTypesList.size()];
-    for (int i = 0; i < storageTypes.length; ++i) {
-      storageTypes[i] = PBHelper.convertType(storageTypesList.get(i));
+  public static StorageType[] convertStorageTypes(
+      List<StorageTypeProto> storageTypesList, int expectedSize) {
+    final StorageType[] storageTypes = new StorageType[expectedSize];
+    if (storageTypesList.size() != expectedSize) { // missing storage types
+      Preconditions.checkState(storageTypesList.isEmpty());
+      Arrays.fill(storageTypes, StorageType.DEFAULT);
+    } else {
+      for (int i = 0; i < storageTypes.length; ++i) {
+        storageTypes[i] = convertStorageType(storageTypesList.get(i));
+      }

INS26 INS40 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS8 UPD83 UPD83 UPD42 UPD83 UPD42 INS44 INS8 INS60 INS60 INS25 INS43 INS43 INS5 INS42 INS41 INS43 INS43 MOV5 INS42 INS39 INS42 INS25 INS60 INS24 INS41 INS39 INS42 INS60 INS25 MOV41 INS5 INS59 INS74 INS59 INS32 INS8 INS8 INS42 INS42 INS43 INS85 INS32 INS42 INS42 INS27 INS8 INS83 INS74 INS59 INS58 INS27 INS38 INS8 INS42 INS83 MOV5 INS59 INS27 INS8 MOV8 MOV32 INS43 INS85 INS85 INS42 INS3 INS43 INS43 INS42 INS32 INS42 INS42 INS24 INS24 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS41 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS3 MOV32 INS42 INS21 INS21 UPD42 MOV32 INS42 INS5 INS32 INS42 INS42 INS42 INS42 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS33 INS42 INS42 INS74 INS40 INS42 INS42 INS32 UPD42 INS5 INS42 INS32 INS32 INS43 INS85 INS85 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS43 INS43 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS34 INS7 INS32 INS42 INS34 INS74 INS59 INS7 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS2 INS3 INS42 INS42 INS2 INS40 INS43 INS43 INS42 INS32 INS2 INS32 INS42 INS42 INS42 INS42 INS5 INS22 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS3 UPD42 INS43 INS85 INS2 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL27 DEL32 DEL21 DEL42 DEL7 DEL21 DEL8 DEL25 DEL83 DEL42 DEL3 DEL59 DEL60 DEL42