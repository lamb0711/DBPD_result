YARN-8665.  Added Yarn service cancel upgrade option.
            Contributed by Chandni Singh

+import org.apache.hadoop.yarn.state.MultipleArcTransition;
+import java.util.EnumSet;
+import java.util.concurrent.atomic.AtomicBoolean;
+  private static final String UPGRADE_FAILED = "upgrade failed";
-  private  StateMachine<ComponentInstanceState, ComponentInstanceEventType,
+  private StateMachine<ComponentInstanceState, ComponentInstanceEventType,
-
+  private AtomicBoolean upgradeInProgress = new AtomicBoolean(false);
+  private boolean pendingCancelUpgrade = false;
-      .addTransition(READY, UPGRADING, UPGRADE,
-          new ContainerUpgradeTransition())
-      .addTransition(UPGRADING, UPGRADING, UPGRADE,
-          new ContainerUpgradeTransition())
-      .addTransition(UPGRADING, READY, BECOME_READY,
-          new ContainerBecomeReadyTransition())
-      .addTransition(UPGRADING, INIT, STOP, new ContainerStoppedTransition())
+      .addTransition(READY, UPGRADING, UPGRADE, new UpgradeTransition())
+      .addTransition(READY, EnumSet.of(READY, CANCEL_UPGRADING), CANCEL_UPGRADE,
+          new CancelUpgradeTransition())
+
+      // FROM UPGRADING
+      .addTransition(UPGRADING, EnumSet.of(READY, CANCEL_UPGRADING),
+          CANCEL_UPGRADE, new CancelUpgradeTransition())
+      .addTransition(UPGRADING, EnumSet.of(READY), BECOME_READY,
+          new ReadyAfterUpgradeTransition())
+      .addTransition(UPGRADING, UPGRADING, STOP,
+          new StoppedAfterUpgradeTransition())
+
+      // FROM CANCEL_UPGRADING
+      .addTransition(CANCEL_UPGRADING, EnumSet.of(CANCEL_UPGRADING, READY),
+          BECOME_READY, new ReadyAfterUpgradeTransition())
+      .addTransition(CANCEL_UPGRADING, EnumSet.of(CANCEL_UPGRADING, INIT),
+          STOP, new StoppedAfterCancelUpgradeTransition())
-      compInstance.containerSpec.setState(ContainerState.READY);
-      if (compInstance.getState().equals(ComponentInstanceState.UPGRADING)) {
-        compInstance.component.incContainersReady(false);
-        compInstance.component.decContainersThatNeedUpgrade();
-        compInstance.serviceVersion = compInstance.component.getUpgradeEvent()
-            .getUpgradeVersion();
-        ComponentEvent checkState = new ComponentEvent(
-            compInstance.component.getName(), ComponentEventType.CHECK_STABLE);
-        compInstance.scheduler.getDispatcher().getEventHandler().handle(
-            checkState);
+      compInstance.setContainerState(ContainerState.READY);
+      compInstance.component.incContainersReady(true);
+      compInstance.postContainerReady();
+    }
+  }
-      } else {
-        compInstance.component.incContainersReady(true);
+  private static class ReadyAfterUpgradeTransition implements
+      MultipleArcTransition<ComponentInstance, ComponentInstanceEvent,
+          ComponentInstanceState> {
+
+    @Override
+    public ComponentInstanceState transition(ComponentInstance instance,
+        ComponentInstanceEvent event) {
+
+      if (instance.pendingCancelUpgrade) {
+        // cancellation of upgrade was triggered before the upgrade was
+        // finished.
+        LOG.info("{} received ready but cancellation pending",
+            event.getContainerId());
+        instance.upgradeInProgress.set(true);
+        instance.cancelUpgrade();
+        instance.pendingCancelUpgrade = false;
+        return instance.getState();
-      if (compInstance.timelineServiceEnabled) {
-        compInstance.serviceTimelinePublisher
-            .componentInstanceBecomeReady(compInstance.containerSpec);
-      }
+
+      instance.upgradeInProgress.set(false);
+      instance.setContainerState(ContainerState.READY);
+      instance.component.incContainersReady(false);
+
+      Component.UpgradeStatus status = instance.getState().equals(UPGRADING) ?
+          instance.component.getUpgradeStatus() :
+          instance.component.getCancelUpgradeStatus();
+      status.decContainersThatNeedUpgrade();
+
+      instance.serviceVersion = status.getTargetVersion();
+      ComponentEvent checkState = new ComponentEvent(
+          instance.component.getName(),
+          ComponentEventType.CHECK_STABLE);
+      instance.scheduler.getDispatcher().getEventHandler().handle(checkState);
+      instance.postContainerReady();
+      return ComponentInstanceState.READY;
+    }
+  }
+
+  private void postContainerReady() {
+    if (timelineServiceEnabled) {
+      serviceTimelinePublisher.componentInstanceBecomeReady(containerSpec);
-      compInstance.containerSpec.setState(ContainerState.RUNNING_BUT_UNREADY);
+      compInstance.setContainerState(ContainerState.RUNNING_BUT_UNREADY);
-          failureBeforeLaunch ? null : event.getStatus().getExitStatus());
+          failureBeforeLaunch || event.getStatus() == null ? null :
+              event.getStatus().getExitStatus());
-          event.getStatus().getDiagnostics());
+          (event.getStatus() != null ? event.getStatus().getDiagnostics() :
+              UPGRADE_FAILED));
+      ContainerStatus status = event.getStatus();
+      // status is not available when upgrade fails
-          failedBeforeLaunching ?
-              FAILED_BEFORE_LAUNCH_DIAG :
-              event.getStatus().getDiagnostics());
+          failedBeforeLaunching ? FAILED_BEFORE_LAUNCH_DIAG :
+              (status != null ? status.getDiagnostics() : UPGRADE_FAILED));
-      if (compInstance.getState().equals(ComponentInstanceState.UPGRADING)) {
-        compInstance.component.decContainersThatNeedUpgrade();
-      }
+
-                  failedBeforeLaunching ?
-                      -1 :
-                      event.getStatus().getExitStatus(), ContainerState.FAILED,
-                  containerDiag);
+                  failedBeforeLaunching || status == null ? -1 :
+                      status.getExitStatus(),
+                  ContainerState.FAILED, containerDiag);
-  private static class ContainerUpgradeTransition extends BaseTransition {
+  private static class StoppedAfterUpgradeTransition extends
+      BaseTransition {
-    public void transition(ComponentInstance compInstance,
+    public void transition(ComponentInstance instance,
-      if (!compInstance.containerSpec.getState().equals(
-          ContainerState.NEEDS_UPGRADE)) {
-        //nothing to upgrade. this may happen with express upgrade.
+      instance.component.getUpgradeStatus().decContainersThatNeedUpgrade();
+      instance.component.decRunningContainers();
+
+      final ServiceScheduler scheduler = instance.component.getScheduler();
+      scheduler.getAmRMClient().releaseAssignedContainer(
+          event.getContainerId());
+      instance.scheduler.executorService.submit(
+          () -> instance.cleanupRegistry(event.getContainerId()));
+      scheduler.removeLiveCompInstance(event.getContainerId());
+      instance.component.getUpgradeStatus().containerFailedUpgrade();
+      instance.setContainerState(ContainerState.FAILED_UPGRADE);
+      instance.upgradeInProgress.set(false);
+    }
+  }
+
+  private static class StoppedAfterCancelUpgradeTransition implements
+      MultipleArcTransition<ComponentInstance, ComponentInstanceEvent,
+          ComponentInstanceState> {
+
+    private ContainerStoppedTransition stoppedTransition =
+        new ContainerStoppedTransition();
+
+    @Override
+    public ComponentInstanceState transition(ComponentInstance instance,
+        ComponentInstanceEvent event) {
+      if (instance.pendingCancelUpgrade) {
+        // cancellation of upgrade was triggered before the upgrade was
+        // finished.
+        LOG.info("{} received stopped but cancellation pending",
+            event.getContainerId());
+        instance.upgradeInProgress.set(true);
+        instance.cancelUpgrade();
+        instance.pendingCancelUpgrade = false;
+        return instance.getState();
+      }
+
+      // When upgrade is cancelled, and container re-init fails
+      instance.component.getCancelUpgradeStatus()
+          .decContainersThatNeedUpgrade();
+      instance.upgradeInProgress.set(false);
+      stoppedTransition.transition(instance, event);
+      return ComponentInstanceState.INIT;
+    }
+  }
+
+  private static class UpgradeTransition extends BaseTransition {
+
+    @Override
+    public void transition(ComponentInstance instance,
+        ComponentInstanceEvent event) {
+      if (!instance.component.getCancelUpgradeStatus().isCompleted()) {
+        // last check to see if cancellation was triggered. The component may
+        // have processed the cancel upgrade event but the instance doesn't know
+        // it yet. If cancellation has been triggered then no point in
+        // upgrading.
-      compInstance.containerSpec.setState(ContainerState.UPGRADING);
-      compInstance.component.decContainersReady(false);
-      ComponentEvent upgradeEvent = compInstance.component.getUpgradeEvent();
-      compInstance.scheduler.getContainerLaunchService()
-          .reInitCompInstance(compInstance.scheduler.getApp(), compInstance,
-              compInstance.container,
-              compInstance.component.createLaunchContext(
-                  upgradeEvent.getTargetSpec(),
-                  upgradeEvent.getUpgradeVersion()));
+      instance.upgradeInProgress.set(true);
+      instance.setContainerState(ContainerState.UPGRADING);
+      instance.component.decContainersReady(false);
+
+      Component.UpgradeStatus status = instance.component.getUpgradeStatus();
+      instance.scheduler.getContainerLaunchService()
+          .reInitCompInstance(instance.scheduler.getApp(), instance,
+              instance.container,
+              instance.component.createLaunchContext(
+                  status.getTargetSpec(),
+                  status.getTargetVersion()));
+  private static class CancelUpgradeTransition implements
+      MultipleArcTransition<ComponentInstance, ComponentInstanceEvent,
+          ComponentInstanceState> {
+
+    @Override
+    public ComponentInstanceState transition(ComponentInstance instance,
+        ComponentInstanceEvent event) {
+      if (instance.upgradeInProgress.compareAndSet(false, true)) {
+
+        Component.UpgradeStatus cancelStatus = instance.component
+            .getCancelUpgradeStatus();
+
+        if (instance.getServiceVersion().equals(
+            cancelStatus.getTargetVersion())) {
+          // previous upgrade didn't happen so just go back to READY
+          LOG.info("{} nothing to cancel", event.getContainerId());
+          cancelStatus.decContainersThatNeedUpgrade();
+          instance.setContainerState(ContainerState.READY);
+          ComponentEvent checkState = new ComponentEvent(
+              instance.component.getName(), ComponentEventType.CHECK_STABLE);
+          instance.scheduler.getDispatcher().getEventHandler()
+              .handle(checkState);
+          return ComponentInstanceState.READY;
+        } else {
+          instance.component.decContainersReady(false);
+          instance.cancelUpgrade();
+        }
+      } else {
+        LOG.info("{} pending cancellation", event.getContainerId());
+        instance.pendingCancelUpgrade = true;
+      }
+      return ComponentInstanceState.CANCEL_UPGRADING;
+    }
+  }
+
+  private void cancelUpgrade() {
+    LOG.info("{} cancelling upgrade", container.getId());
+    setContainerState(ContainerState.UPGRADING);
+    Component.UpgradeStatus cancelStatus = component.getCancelUpgradeStatus();
+    scheduler.getContainerLaunchService()
+        .reInitCompInstance(scheduler.getApp(), this,
+            this.container, this.component.createLaunchContext(
+                cancelStatus.getTargetSpec(),
+                cancelStatus.getTargetVersion()));
+  }
+
+  /**
+   * Sets the state of the container in the container spec. It is write
+   * protected.
+   *
+   * @param state container state
+   */
+  public void setContainerState(ContainerState state) {
+    this.writeLock.lock();
+    try {
+      ContainerState curState = containerSpec.getState();
+      if (!curState.equals(state)) {
+        containerSpec.setState(state);
+        LOG.info("{} spec state state changed from {} -> {}",
+            getCompInstanceId(), curState, state);
+      }
+    } finally {
+      this.writeLock.unlock();
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS55 INS55 INS31 INS55 INS55 INS55 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS83 MOV42 MOV43 INS31 INS83 INS83 INS42 INS74 INS31 INS83 INS39 INS42 INS8 INS83 INS83 INS42 INS43 INS31 INS83 INS83 INS42 INS74 INS23 INS31 UPD42 INS83 INS83 INS42 INS74 INS31 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS9 INS32 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV8 INS43 INS43 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS25 INS42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS43 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS21 INS21 INS60 INS21 INS65 INS65 INS43 INS42 INS21 INS54 INS43 INS9 INS32 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS21 INS21 MOV21 INS60 MOV21 MOV21 MOV60 MOV21 INS21 INS41 INS42 INS8 INS60 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS43 INS42 INS43 INS42 MOV25 INS21 INS21 INS21 INS41 UPD42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS32 INS32 INS43 INS59 INS32 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS32 INS32 INS42 INS42 INS40 INS8 INS32 INS32 INS43 INS59 MOV43 INS32 INS40 INS21 INS43 INS59 INS42 INS42 INS32 INS32 INS83 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 UPD40 INS32 INS32 INS32 INS40 INS32 INS43 INS42 INS42 INS32 INS8 INS8 INS40 INS42 INS42 INS45 INS32 INS42 INS40 INS40 INS42 INS32 INS32 INS42 INS32 INS52 INS22 INS32 INS22 INS42 INS60 INS25 INS21 MOV32 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS21 MOV21 INS21 INS21 INS41 INS40 UPD42 MOV42 INS9 INS42 INS42 UPD40 MOV40 UPD40 INS40 INS42 INS16 INS42 UPD40 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS40 INS42 INS86 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS9 INS21 INS21 INS21 INS41 INS32 INS42 INS40 INS42 INS9 INS42 INS42 INS42 INS42 INS40 INS42 INS9 INS42 UPD42 UPD40 INS40 UPD42 UPD42 UPD40 INS40 INS42 INS9 INS9 INS60 INS25 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS32 INS32 INS52 INS42 INS43 INS59 INS38 INS8 INS32 UPD42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS7 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV43 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS32 INS7 INS32 INS40 INS42 UPD42 UPD40 UPD42 UPD40 UPD40 UPD40 INS43 INS59 INS32 INS8 INS8 INS32 INS7 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS22 INS42 INS32 INS42 INS14 INS43 INS42 INS42 INS42 INS45 INS32 UPD40 UPD42 INS9 INS42 INS42 INS40 INS9 UPD42 MOV42 MOV42 INS32 INS42 INS42 INS40 INS42 INS40 INS42 UPD40 UPD40 INS27 INS33 INS36 INS42 INS42 INS32 INS42 INS42 INS45 INS32 UPD40 UPD42 INS9 INS42 INS42 INS40 INS9 INS42 INS42 UPD40 UPD42 UPD42 UPD42 UPD42 INS40 INS42 INS32 INS32 INS42 INS32 INS21 INS21 INS21 INS60 INS21 INS41 INS21 INS21 INS42 INS42 INS45 INS32 INS40 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS16 INS36 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 MOV43 INS59 INS32 INS40 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 UPD42 INS32 UPD42 INS42 INS42 MOV42 UPD42 MOV42 UPD43 INS42 INS32 INS33 INS27 MOV32 INS42 INS16 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS14 INS32 INS42 INS42 INS40 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD43 UPD42 INS42 INS42 INS32 INS33 MOV32 MOV42 INS27 INS32 INS42 INS27 INS32 INS42 INS42 INS43 INS32 INS40 INS32 INS42 UPD43 UPD42 INS42 INS42 MOV42 INS42 INS33 UPD42 MOV42 MOV42 INS42 INS27 UPD42 MOV42 MOV42 INS42 INS40 INS42 INS40 INS42 UPD42 INS42 INS33 DEL40 DEL40 DEL40 DEL32 DEL83 DEL83 DEL32 DEL32 DEL8 DEL25 DEL8 DEL31 DEL55 DEL40 DEL42 DEL33 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL32 DEL40 DEL40 DEL40