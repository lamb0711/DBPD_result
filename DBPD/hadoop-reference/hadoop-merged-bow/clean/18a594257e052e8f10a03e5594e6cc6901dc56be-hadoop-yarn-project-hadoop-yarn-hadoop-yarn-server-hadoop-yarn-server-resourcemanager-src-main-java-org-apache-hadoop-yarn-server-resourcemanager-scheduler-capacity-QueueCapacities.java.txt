YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan

+import java.util.HashSet;
+import java.util.Set;
+import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.yarn.server.resourcemanager.nodelabels.RMNodeLabelsManager;
+
+import com.google.common.collect.Sets;
+  private final boolean isRoot;
-  public QueueCapacities() {
+  public QueueCapacities(boolean isRoot) {
+    this.isRoot = isRoot;
+    
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder();
+      sb.append("{used=" + capacitiesArr[0] + "%, ");
+      sb.append("abs_used=" + capacitiesArr[1] + "%, ");
+      sb.append("max_cap=" + capacitiesArr[2] + "%, ");
+      sb.append("abs_max_cap=" + capacitiesArr[3] + "%, ");
+      sb.append("cap=" + capacitiesArr[4] + "%, ");
+      sb.append("abs_cap=" + capacitiesArr[5] + "%}");
+      return sb.toString();
+    }
+    if (StringUtils.equals(label, RMNodeLabelsManager.NO_LABEL) && isRoot) {
+      return 1f;
+    }
+    
+    if (StringUtils.equals(label, RMNodeLabelsManager.NO_LABEL) && isRoot) {
+      return 1f;
+    }
+  
+  /**
+   * Clear configurable fields, like
+   * (absolute)capacity/(absolute)maximum-capacity, this will be used by queue
+   * reinitialize, when we reinitialize a queue, we will first clear all
+   * configurable fields, and load new values
+   */
+  public void clearConfigurableFields() {
+    try {
+      writeLock.lock();
+      for (String label : capacitiesMap.keySet()) {
+        _set(label, CapacityType.CAP, 0);
+        _set(label, CapacityType.MAX_CAP, 0);
+        _set(label, CapacityType.ABS_CAP, 0);
+        _set(label, CapacityType.ABS_MAX_CAP, 0);
+      }
+    } finally {
+      writeLock.unlock();
+    }
+  }
+  
+  public Set<String> getExistingNodeLabels() {
+    try {
+      readLock.lock();
+      return new HashSet<String>(capacitiesMap.keySet());
+    } finally {
+      readLock.unlock();
+    }
+  }
+  
+  @Override
+  public String toString() {
+    try {
+      readLock.lock();
+      return this.capacitiesMap.toString();
+    } finally {
+      readLock.unlock();
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS44 INS31 INS29 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS39 INS42 INS21 INS78 INS83 INS43 INS42 INS8 INS25 INS25 INS65 INS54 INS43 INS43 INS54 INS42 INS42 INS54 INS7 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS27 INS8 INS27 INS8 INS66 INS66 INS66 INS66 INS8 INS8 INS42 INS42 INS8 INS8 INS8 INS8 INS22 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS41 INS32 INS42 INS41 INS21 INS70 INS21 INS21 INS41 INS21 INS21 INS41 INS21 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS40 INS34 INS42 INS42 INS42 INS40 INS34 INS32 INS44 INS32 INS8 INS32 INS32 INS14 INS32 INS32 INS32 INS32 INS43 INS45 INS2 INS45 INS45 INS2 INS45 INS45 INS2 INS45 INS45 INS2 INS45 INS45 INS2 INS45 INS45 INS2 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS32 INS32 INS32 INS32 INS43 INS43 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS34 INS42 INS42 INS40 INS34 INS42 INS42 INS40 INS34 INS42 INS42 INS40 INS34 INS42 INS42