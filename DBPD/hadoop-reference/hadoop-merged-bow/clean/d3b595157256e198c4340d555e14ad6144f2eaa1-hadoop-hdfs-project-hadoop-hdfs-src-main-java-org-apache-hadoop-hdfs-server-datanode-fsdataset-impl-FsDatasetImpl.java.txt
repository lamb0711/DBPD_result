HDFS-15242. Add metrics for operations hold lock times of FsDatasetImpl. Contributed by Xiaoqiao He.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>
Reviewed-by: Inigo Goiri <inigoiri@apache.org>

+import org.apache.hadoop.hdfs.server.datanode.metrics.DataNodeMetrics;
+  private final DataNodeMetrics dataNodeMetrics;
+    this.dataNodeMetrics = datanode.getMetrics();
+    long startTimeMs = Time.monotonicNow();
+    } finally {
+      if (dataNodeMetrics != null) {
+        long createRbwMs = Time.monotonicNow() - startTimeMs;
+        dataNodeMetrics.addCreateRbwOp(createRbwMs);
+      }
-
-    while (true) {
-      try {
-        try (AutoCloseableLock lock = datasetWriteLock.acquire()) {
-          ReplicaInfo replicaInfo =
-              getReplicaInfo(b.getBlockPoolId(), b.getBlockId());
-          // check the replica's state
-          if (replicaInfo.getState() != ReplicaState.RBW) {
-            throw new ReplicaNotFoundException(
-                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);
+    long startTimeMs = Time.monotonicNow();
+    try {
+      while (true) {
+        try {
+          try (AutoCloseableLock lock = datasetWriteLock.acquire()) {
+            ReplicaInfo replicaInfo =
+                getReplicaInfo(b.getBlockPoolId(), b.getBlockId());
+            // check the replica's state
+            if (replicaInfo.getState() != ReplicaState.RBW) {
+              throw new ReplicaNotFoundException(
+                  ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);
+            }
+            ReplicaInPipeline rbw = (ReplicaInPipeline) replicaInfo;
+            if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {
+              throw new MustStopExistingWriter(rbw);
+            }
+            LOG.info("At " + datanode.getDisplayName() + ", Recovering " + rbw);
+            return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);
-          ReplicaInPipeline rbw = (ReplicaInPipeline)replicaInfo;
-          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {
-            throw new MustStopExistingWriter(rbw);
-          }
-          LOG.info("At " + datanode.getDisplayName() + ", Recovering " + rbw);
-          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);
+        } catch (MustStopExistingWriter e) {
+          e.getReplicaInPipeline().stopWriter(
+              datanode.getDnConf().getXceiverStopTimeout());
-      } catch (MustStopExistingWriter e) {
-        e.getReplicaInPipeline().stopWriter(
-            datanode.getDnConf().getXceiverStopTimeout());
+      }
+    } finally {
+      if (dataNodeMetrics != null) {
+        long recoverRbwMs = Time.monotonicNow() - startTimeMs;
+        dataNodeMetrics.addRecoverRbwOp(recoverRbwMs);
-
+    long startTimeMs = Time.monotonicNow();
+    } finally {
+      if (dataNodeMetrics != null) {
+        long convertTemporaryToRbwMs = Time.monotonicNow() - startTimeMs;
+        dataNodeMetrics.addConvertTemporaryToRbwOp(convertTemporaryToRbwMs);
+      }
+    long holdLockTimeMs = Time.monotonicNow() - startTimeMs;
+    long startHoldLockTimeMs = Time.monotonicNow();
+    } finally {
+      if (dataNodeMetrics != null) {
+        // Create temporary operation hold write lock twice.
+        long createTemporaryOpMs = Time.monotonicNow() - startHoldLockTimeMs
+            + holdLockTimeMs;
+        dataNodeMetrics.addCreateTemporaryOp(createTemporaryOpMs);
+      }
+    long startTimeMs = Time.monotonicNow();
+    } finally {
+      if (dataNodeMetrics != null) {
+        long finalizeBlockMs = Time.monotonicNow() - startTimeMs;
+        dataNodeMetrics.addFinalizeBlockOp(finalizeBlockMs);
+      }
+    long startTimeMs = Time.monotonicNow();
+    } finally {
+      if (dataNodeMetrics != null) {
+        long unFinalizedBlockMs = Time.monotonicNow() - startTimeMs;
+        dataNodeMetrics.addUnfinalizeBlockOp(unFinalizedBlockMs);
+      }
+    long startTimeMs = Time.monotonicNow();
+    } finally {
+      if (dataNodeMetrics != null) {
+        long checkAndUpdateTimeMs = Time.monotonicNow() - startTimeMs;
+        dataNodeMetrics.addCheckAndUpdateOp(checkAndUpdateTimeMs);
+      }
+    long startTimeMs = Time.monotonicNow();
+    } finally {
+      if (dataNodeMetrics != null) {
+        long updateReplicaUnderRecoveryMs = Time.monotonicNow() - startTimeMs;
+        dataNodeMetrics.addUpdateReplicaUnderRecoveryOp(
+            updateReplicaUnderRecoveryMs);
+      }

INS26 INS40 INS23 INS83 INS83 INS43 INS59 INS8 INS42 INS42 INS21 INS60 MOV21 INS60 INS54 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS7 INS39 INS59 INS8 INS39 INS59 MOV8 INS8 INS39 INS59 INS8 INS39 INS59 INS39 INS59 INS8 INS39 INS59 INS8 INS39 INS59 INS8 INS39 INS59 INS8 INS39 INS59 INS8 INS22 INS32 INS42 INS32 INS25 INS42 INS32 INS25 INS42 INS32 INS25 INS42 INS27 INS42 INS32 INS25 INS42 INS32 INS25 INS42 INS32 INS25 INS42 INS32 INS25 INS42 INS32 INS25 INS52 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS32 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS33 INS60 INS21 INS42 INS33 INS60 INS21 INS42 INS33 INS60 INS21 INS42 INS42 INS42 INS33 INS60 INS21 INS42 INS33 INS60 INS21 INS42 INS33 INS60 INS21 INS42 INS33 INS60 INS21 INS42 INS33 INS60 INS21 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42