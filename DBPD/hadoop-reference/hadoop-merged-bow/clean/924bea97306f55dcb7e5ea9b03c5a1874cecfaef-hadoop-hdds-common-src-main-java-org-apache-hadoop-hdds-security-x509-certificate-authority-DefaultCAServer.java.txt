HDDS-102. SCM CA: SCM CA server signs certificate for approved CSR. Contributed by Anu Engineer.

+import org.apache.hadoop.hdds.security.x509.certificate.authority.PKIProfiles.DefaultProfile;
+import org.apache.hadoop.hdds.security.x509.certificate.authority.PKIProfiles.PKIProfile;
-import org.apache.hadoop.hdds.security.x509.certificates.utils.CertificateSignRequest;
+import org.bouncycastle.operator.OperatorCreationException;
+import org.bouncycastle.pkcs.PKCS10CertificationRequest;
+import java.security.spec.InvalidKeySpecException;
+import java.util.concurrent.CompletableFuture;
+import static org.apache.hadoop.hdds.security.x509.certificates.utils.CertificateSignRequest.*;
+
+  /**
+   * TODO: We will make these configurable in the future.
+   */
+  private PKIProfile profile;
+  private CertificateApprover approver;
+    // TODO: Make these configurable and load different profiles based on
+    // config.
+    profile = new DefaultProfile();
+    this.approver = new DefaultApprover(profile, this.config);
+
-  public X509CertificateHolder getCACertificate() throws
-      CertificateException, IOException {
+  public X509CertificateHolder getCACertificate() throws IOException {
-    return certificateCodec.readCertificate();
+    try {
+      return certificateCodec.readCertificate();
+    } catch (CertificateException e) {
+      throw new IOException(e);
+    }
+  }
+
+  private KeyPair getCAKeys() throws IOException {
+    KeyCodec keyCodec = new KeyCodec(config, componentName);
+    try {
+      return new KeyPair(keyCodec.readPublicKey(), keyCodec.readPrivateKey());
+    } catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
+      throw new IOException(e);
+    }
-      CertificateSignRequest csr, CertificateApprover approver)
-      throws SCMSecurityException {
-    return null;
+      PKCS10CertificationRequest csr, CertificateApprover.ApprovalType approverType) {
+    LocalDate beginDate = LocalDate.now().atStartOfDay().toLocalDate();
+    LocalDateTime temp = LocalDateTime.of(beginDate, LocalTime.MIDNIGHT);
+    LocalDate endDate =
+        temp.plus(config.getDefaultCertDuration()).toLocalDate();
+
+    CompletableFuture<X509CertificateHolder> xcertHolder =
+        approver.approve(csr);
+
+    if(xcertHolder.isCompletedExceptionally()) {
+      // This means that approver told us there are things which it disagrees
+      // with in this Certificate Request. Since the first set of sanity
+      // checks failed, we just return the future object right here.
+      return xcertHolder;
+    }
+    try {
+      switch (approverType) {
+      case MANUAL:
+        xcertHolder.completeExceptionally(new SCMSecurityException("Manual " +
+            "approval is not yet implemented."));
+        break;
+      case KERBEROS_TRUSTED:
+      case TESTING_AUTOMATIC:
+        X509CertificateHolder xcert = approver.sign(config,
+            getCAKeys().getPrivate(),
+            getCACertificate(), java.sql.Date.valueOf(beginDate),
+            java.sql.Date.valueOf(endDate), csr);
+        xcertHolder.complete(xcert);
+        break;
+      default:
+        return null; // cannot happen, keeping checkstyle happy.
+      }
+    } catch (IOException | OperatorCreationException e) {
+      xcertHolder.completeExceptionally(new SCMSecurityException(e));
+    }
+    return xcertHolder;
+  }
+
+  @Override
+  public Future<X509CertificateHolder> requestCertificate(String csr,
+      CertificateApprover.ApprovalType type) throws IOException {
+    PKCS10CertificationRequest request =
+        getCertificationRequest(csr);
+    return requestCertificate(request, type);
-      CertificateApprover approver) throws SCMSecurityException {
+      CertificateApprover.ApprovalType approverType) throws SCMSecurityException {
-    if (!Files.exists(Paths.get(caKeysPath.toString(),
-        this.config.getPrivateKeyFileName()))) {
-      return false;
-    }
-    return true;
+    return Files.exists(Paths.get(caKeysPath.toString(),
+        this.config.getPrivateKeyFileName()));
-    if (!Files.exists(Paths.get(caRootX509Path.toString(),
-        this.config.getCertificateFileName()))) {
-      return false;
-    }
-    return true;
+    return Files.exists(Paths.get(caRootX509Path.toString(),
+        this.config.getCertificateFileName()));

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS29 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS43 INS42 INS43 INS8 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS42 INS42 INS21 INS21 INS54 INS42 INS42 INS60 INS54 UPD43 INS43 UPD42 INS60 INS60 INS60 INS60 INS25 INS54 INS41 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS60 INS41 UPD43 UPD42 MOV41 MOV41 INS66 INS7 INS7 INS8 INS12 INS43 INS59 INS8 INS12 UPD42 INS40 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS8 INS12 INS42 INS42 INS42 INS42 INS40 INS43 INS59 INS32 INS40 MOV32 MOV32 INS42 INS14 INS22 INS14 MOV41 INS44 INS8 INS42 INS42 INS14 INS41 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS50 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS52 INS42 INS43 INS42 INS22 MOV43 INS42 INS53 INS43 INS42 INS42 INS14 INS84 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS49 INS21 INS10 INS49 INS49 INS60 INS21 INS10 INS49 INS41 INS84 INS42 INS21 INS42 INS42 INS42 INS42 INS52 INS42 INS14 INS42 INS43 INS32 INS32 INS43 INS43 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS32 MOV33 INS43 INS43 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 MOV43 INS27 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS43 INS42 INS45 INS45 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 DEL41 DEL8 DEL42 DEL9 DEL38 DEL8 DEL25 DEL9 DEL41 DEL9 DEL38 DEL8 DEL25 DEL9 DEL41