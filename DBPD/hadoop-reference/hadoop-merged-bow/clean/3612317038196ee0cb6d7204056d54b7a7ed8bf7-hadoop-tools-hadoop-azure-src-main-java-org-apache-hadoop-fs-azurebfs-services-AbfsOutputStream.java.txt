HADOOP-16818. ABFS: Combine append+flush calls for blockblob & appendblob


Contributed by Ishani Ahuja.
+  private boolean supportAppendWithFlush;
+  private boolean appendBlob;
-      final boolean disableOutputStreamFlush) {
+      final boolean disableOutputStreamFlush,
+      final boolean supportAppendWithFlush,
+      final boolean appendBlob) {
+    this.disableOutputStreamFlush = disableOutputStreamFlush;
+    this.supportAppendWithFlush = supportAppendWithFlush;
+    this.appendBlob = appendBlob;
-
-        writeCurrentBufferToService();
+        writeCurrentBufferToService(false, false);
-    writeCurrentBufferToService();
-    flushWrittenBytesToService(isClose);
+    writeAndFlushWrittenBytesToService(isClose);
-    writeCurrentBufferToService();
+    writeCurrentBufferToService(true, false);
-  private synchronized void writeCurrentBufferToService() throws IOException {
+  private synchronized void writeCurrentBufferToService(final boolean flush, final boolean isClose) throws IOException {
+    if (this.appendBlob) {
+        client.append(path, offset, bytes, 0,
+            bytesLength, flush, isClose);
+        lastTotalAppendOffset += bytesLength;
+        if (flush) {
+          lastFlushOffset = lastTotalAppendOffset;
+        }
+        return;
+    }
+
+          if (flush) {
+            /* Append with Flush enabled should happen
+             * when all the data which was supposed to be
+             * appended has been sent and finished.
+             */
+            while(lastTotalAppendOffset <  lastFlushOffset);
+          }
-                  bytesLength);
+              bytesLength, flush, isClose);
-    writeOperations.add(new WriteOperation(job, offset, bytesLength));
+    writeOperations.add(new WriteOperation(job, offset, bytesLength, flush));
-
-    flushWrittenBytesToServiceInternal(position, false, isClose);
+    shrinkWriteOperationQueue();
+  }
+
+  private synchronized void completeExistingTasks() throws IOException {
+    for (WriteOperation writeOperation : writeOperations) {
+      try {
+        writeOperation.task.get();
+      } catch (Exception ex) {
+        if (ex.getCause() instanceof AbfsRestOperationException) {
+          if (((AbfsRestOperationException) ex.getCause()).getStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {
+            throw new FileNotFoundException(ex.getMessage());
+          }
+        }
+        if (ex.getCause() instanceof AzureBlobFileSystemException) {
+          ex = (AzureBlobFileSystemException) ex.getCause();
+        }
+        lastError = new IOException(ex);
+        throw lastError;
+      }
+    }
+    shrinkWriteOperationQueue();
+  }
+
+  private synchronized void writeAndFlushWrittenBytesToService(boolean isClose) throws IOException {
+    completeExistingTasks();
+    writeCurrentBufferToService(supportAppendWithFlush, isClose);
+    completeExistingTasks();
+    if (this.lastTotalAppendOffset > this.lastFlushOffset) {
+      flushWrittenBytesToServiceInternal(position, false, isClose);
+    }
+        if (writeOperations.peek().isFlush) {
+          lastFlushOffset = lastTotalAppendOffset;
+        }
+    private final boolean isFlush;
-    WriteOperation(final Future<Void> task, final long startOffset, final long length) {
+    WriteOperation(final Future<Void> task, final long startOffset, final long length, final boolean flush) {
+      this.isFlush = flush;

MOV31 INS23 INS23 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS44 INS44 MOV21 INS83 INS83 INS39 INS42 MOV44 MOV43 INS8 INS44 INS44 INS44 INS43 INS83 INS83 INS39 INS42 INS43 INS8 UPD42 MOV44 MOV43 INS23 INS42 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS21 INS21 INS21 MOV21 INS21 INS83 INS39 INS42 INS83 INS39 INS42 INS25 INS39 INS42 INS42 INS21 INS42 INS70 INS21 INS21 INS25 INS83 INS83 INS39 INS59 INS44 INS7 INS7 INS7 INS32 INS22 INS8 INS32 INS44 INS42 INS8 INS32 INS32 INS27 INS8 INS42 INS83 INS39 INS42 INS21 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS9 INS9 INS52 INS42 INS21 INS21 INS25 INS41 INS42 INS43 INS42 INS54 INS42 UPD42 UPD42 INS42 INS42 INS22 INS22 MOV21 INS7 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS7 INS42 INS8 INS42 INS42 INS8 INS12 INS52 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS25 INS52 INS42 INS7 INS32 INS43 INS42 INS25 INS25 INS21 INS53 INS22 INS8 INS9 INS9 INS42 INS42 INS40 INS42 INS42 INS62 INS8 INS62 INS8 INS7 INS42 INS32 INS42 INS21 INS32 INS43 INS25 INS32 INS43 INS21 INS42 INS14 INS42 INS42 INS7 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS25 INS32 INS40 INS53 INS42 INS11 INS42 INS42 INS8 INS36 INS42 INS14 INS43 INS32 INS61 INS11 INS43 INS32 INS42 INS42 INS42 INS27 INS20 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42