HDFS-11193 : [SPS]: Erasure coded files should be considered for satisfying storage policy. Contributed by Rakesh R

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockInfoStriped.StorageAndBlockIndex;
+import org.apache.hadoop.hdfs.util.StripedBlockUtil;
-      List<StorageType> expectedStorageTypes = existingStoragePolicy
+      List<StorageType> expectedStorageTypes;
+      if (blockInfo.isStriped()) {
+        if (ErasureCodingPolicyManager
+            .checkStoragePolicySuitableForECStripedMode(
+                existingStoragePolicyID)) {
+          expectedStorageTypes = existingStoragePolicy
+              .chooseStorageTypes((short) blockInfo.getCapacity());
+        } else {
+          // Currently we support only limited policies (HOT, COLD, ALLSSD)
+          // for EC striped mode files. SPS will ignore to move the blocks if
+          // the storage policy is not in EC Striped mode supported policies
+          LOG.warn("The storage policy " + existingStoragePolicy.getName()
+              + " is not suitable for Striped EC files. "
+              + "So, ignoring to move the blocks");
+          return false;
+        }
+      } else {
+        expectedStorageTypes = existingStoragePolicy
+      }
-    buildBlockMovingInfos(blockInfo, sourceNodes, sourceStorageTypes,
-        targetNodes, targetStorageTypes, blkMovingInfos);
+
+    if (blockInfo.isStriped()) {
+      buildStripedBlockMovingInfos(blockInfo, sourceNodes, sourceStorageTypes,
+          targetNodes, targetStorageTypes, blkMovingInfos);
+    } else {
+      buildContinuousBlockMovingInfos(blockInfo, sourceNodes,
+          sourceStorageTypes, targetNodes, targetStorageTypes, blkMovingInfos);
+    }
-  private void buildBlockMovingInfos(BlockInfo blockInfo,
+  private void buildContinuousBlockMovingInfos(BlockInfo blockInfo,
+  private void buildStripedBlockMovingInfos(BlockInfo blockInfo,
+      List<DatanodeInfo> sourceNodes, List<StorageType> sourceStorageTypes,
+      List<DatanodeInfo> targetNodes, List<StorageType> targetStorageTypes,
+      List<BlockMovingInfo> blkMovingInfos) {
+    // For a striped block, it needs to construct internal block at the given
+    // index of a block group. Here it is iterating over all the block indices
+    // and construct internal blocks which can be then considered for block
+    // movement.
+    BlockInfoStriped sBlockInfo = (BlockInfoStriped) blockInfo;
+    for (StorageAndBlockIndex si : sBlockInfo.getStorageAndIndexInfos()) {
+      if (si.getBlockIndex() >= 0) {
+        DatanodeDescriptor dn = si.getStorage().getDatanodeDescriptor();
+        DatanodeInfo[] srcNode = new DatanodeInfo[1];
+        StorageType[] srcStorageType = new StorageType[1];
+        DatanodeInfo[] targetNode = new DatanodeInfo[1];
+        StorageType[] targetStorageType = new StorageType[1];
+        for (int i = 0; i < sourceNodes.size(); i++) {
+          DatanodeInfo node = sourceNodes.get(i);
+          if (node.equals(dn)) {
+            srcNode[0] = node;
+            srcStorageType[0] = sourceStorageTypes.get(i);
+            targetNode[0] = targetNodes.get(i);
+            targetStorageType[0] = targetStorageTypes.get(i);
+
+            // construct internal block
+            long blockId = blockInfo.getBlockId() + si.getBlockIndex();
+            long numBytes = StripedBlockUtil.getInternalBlockLength(
+                sBlockInfo.getNumBytes(), sBlockInfo.getCellSize(),
+                sBlockInfo.getDataBlockNum(), si.getBlockIndex());
+            Block blk = new Block(blockId, numBytes,
+                blockInfo.getGenerationStamp());
+            BlockMovingInfo blkMovingInfo = new BlockMovingInfo(blk, srcNode,
+                targetNode, srcStorageType, targetStorageType);
+            blkMovingInfos.add(blkMovingInfo);
+            break; // found matching source-target nodes
+          }
+        }
+      }
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 UPD42 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS25 INS43 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS60 INS70 INS32 INS8 INS8 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS59 INS44 INS32 INS8 INS25 INS42 INS42 MOV21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS25 INS32 INS8 INS8 INS32 INS43 INS42 INS42 INS27 INS8 INS42 INS42 INS25 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS60 INS60 INS60 INS60 INS60 INS24 INS32 INS8 INS8 INS7 INS42 INS42 INS43 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS21 INS21 INS41 INS42 MOV32 INS42 INS42 INS32 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS7 INS32 INS9 INS32 INS42 INS42 INS5 INS34 INS42 INS5 INS34 INS42 INS5 INS34 INS42 INS5 INS34 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS43 INS85 INS43 INS85 INS43 INS85 INS43 INS85 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS60 INS60 INS60 INS60 INS21 INS10 INS42 INS42 INS11 INS45 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS39 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS32 INS39 INS32 INS42 INS42 INS2 INS42 INS2 INS32 INS2 INS32 INS2 INS32 INS42 INS27 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42