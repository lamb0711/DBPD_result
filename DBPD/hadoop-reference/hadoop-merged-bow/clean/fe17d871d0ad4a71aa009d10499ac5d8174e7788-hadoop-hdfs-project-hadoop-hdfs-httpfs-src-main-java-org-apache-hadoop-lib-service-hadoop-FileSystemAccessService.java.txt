HDFS-3513. HttpFS should cache filesystems. (tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1368304 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.lib.service.Scheduler;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.TimeUnit;
+  public static final String FS_CACHE_PURGE_FREQUENCY = "filesystem.cache.purge.frequency";
+  public static final String FS_CACHE_PURGE_TIMEOUT = "filesystem.cache.purge.timeout";
+  private static class CachedFileSystem {
+    private FileSystem fs;
+    private long lastUse;
+    private long timeout;
+    private int count;
+
+    public CachedFileSystem(long timeout) {
+      this.timeout = timeout;
+      lastUse = -1;
+      count = 0;
+    }
+
+    synchronized FileSystem getFileSytem(Configuration conf)
+      throws IOException {
+      if (fs == null) {
+        fs = FileSystem.get(conf);
+      }
+      lastUse = -1;
+      count++;
+      return fs;
+    }
+
+    synchronized void release() throws IOException {
+      count--;
+      if (count == 0) {
+        if (timeout == 0) {
+          fs.close();
+          fs = null;
+          lastUse = -1;
+        }
+        else {
+          lastUse = System.currentTimeMillis();
+        }
+      }
+    }
+
+    // to avoid race conditions in the map cache adding removing entries
+    // an entry in the cache remains forever, it just closes/opens filesystems
+    // based on their utilization. Worse case scenario, the penalty we'll
+    // pay is that the amount of entries in the cache will be the total
+    // number of users in HDFS (which seems a resonable overhead).
+    synchronized boolean purgeIfIdle() throws IOException {
+      boolean ret = false;
+      if (count == 0 && lastUse != -1 &&
+          (System.currentTimeMillis() - lastUse) > timeout) {
+        fs.close();
+        fs = null;
+        lastUse = -1;
+        ret = true;
+      }
+      return ret;
+    }
+
+  }
+
+  private ConcurrentHashMap<String, CachedFileSystem> fsCache =
+    new ConcurrentHashMap<String, CachedFileSystem>();
+
+  private long purgeTimeout;
+
+    Scheduler scheduler = getServer().get(Scheduler.class);
+    int purgeInterval = getServiceConfig().getInt(FS_CACHE_PURGE_FREQUENCY, 60);
+    purgeTimeout = getServiceConfig().getLong(FS_CACHE_PURGE_TIMEOUT, 60);
+    purgeTimeout = (purgeTimeout > 0) ? purgeTimeout : 0;
+    if (purgeTimeout > 0) {
+      scheduler.schedule(new FileSystemCachePurger(),
+                         purgeInterval, purgeInterval, TimeUnit.SECONDS);
+    }
+  }
+
+  private class FileSystemCachePurger implements Runnable {
+
+    @Override
+    public void run() {
+      int count = 0;
+      for (CachedFileSystem cacheFs : fsCache.values()) {
+        try {
+          count += cacheFs.purgeIfIdle() ? 1 : 0;
+        } catch (Throwable ex) {
+          LOG.warn("Error while purging filesystem, " + ex.toString(), ex);
+        }
+      }
+      LOG.debug("Purged [{}} filesystem instances", count);
+    }
-    return new Class[]{Instrumentation.class};
+    return new Class[]{Instrumentation.class, Scheduler.class};
-  protected FileSystem createFileSystem(Configuration namenodeConf) throws IOException {
-    return FileSystem.get(namenodeConf);
+  private static final String HTTPFS_FS_USER = "httpfs.fs.user";
+
+  protected FileSystem createFileSystem(Configuration namenodeConf)
+    throws IOException {
+    String user = UserGroupInformation.getCurrentUser().getShortUserName();
+    CachedFileSystem newCachedFS = new CachedFileSystem(purgeTimeout);
+    CachedFileSystem cachedFS = fsCache.putIfAbsent(user, newCachedFS);
+    if (cachedFS == null) {
+      cachedFS = newCachedFS;
+    }
+    Configuration conf = new Configuration(namenodeConf);
+    conf.set(HTTPFS_FS_USER, user);
+    return cachedFS.getFileSytem(conf);
-    fs.close();
+    if (fsCache.containsKey(fs.getConf().get(HTTPFS_FS_USER))) {
+      fsCache.get(fs.getConf().get(HTTPFS_FS_USER)).release();
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS55 INS23 INS23 INS55 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS42 INS43 INS31 INS83 INS83 INS83 INS43 INS59 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS43 INS43 INS43 INS42 INS14 INS42 INS60 INS60 INS21 INS21 INS25 INS42 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS45 INS60 INS60 INS60 INS25 INS60 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS41 INS42 INS21 INS25 INS42 INS60 INS25 INS41 INS42 INS42 INS42 INS74 INS43 INS59 INS39 INS59 INS7 INS7 INS27 INS8 INS42 INS60 INS70 INS21 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS32 INS8 INS7 INS7 INS7 INS42 INS27 INS8 INS7 INS37 INS42 INS37 INS27 INS8 INS39 INS59 INS27 INS8 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS16 INS42 INS34 INS21 INS39 INS59 INS44 INS32 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS21 INS22 INS42 INS42 INS38 INS42 INS34 INS42 INS33 INS21 INS42 INS38 INS42 INS42 INS42 INS34 INS25 INS42 INS9 INS27 INS27 MOV21 INS21 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS57 INS32 INS42 INS42 INS34 INS32 INS42 INS42 INS34 INS36 INS42 INS34 INS32 INS42 INS34 INS43 INS42 INS42 INS42 INS54 INS42 INS42 INS45 INS42 INS57 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS32 INS42 INS42 INS32 INS52 INS42 INS34 INS7 INS34 INS27 INS8 INS8 INS27 INS27 INS36 INS42 INS7 INS7 INS7 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS8 INS12 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS21 INS21 INS21 INS21 INS42 INS34 INS42 INS38 INS27 INS42 INS33 INS42 INS38 INS42 INS9 INS42 INS42 INS34 INS43 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS7 INS7 INS7 INS34 INS32 INS42 INS34 INS42 INS7 INS43 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS38 INS42 INS32 INS42 INS42 INS42 INS16 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS32 INS34 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS32 INS42 INS42 DEL8