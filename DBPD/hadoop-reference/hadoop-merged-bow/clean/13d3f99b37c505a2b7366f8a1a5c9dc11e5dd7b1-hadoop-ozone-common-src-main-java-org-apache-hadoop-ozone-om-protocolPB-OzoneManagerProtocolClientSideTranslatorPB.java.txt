HDDS-881.009. Encapsulate all client to OM requests into one request message. Contributed by Hanisha Koneru.

-import com.google.common.collect.Lists;
+import java.util.ArrayList;
+    .OzoneManagerProtocolProtos.CreateKeyRequest;
+import org.apache.hadoop.ozone.protocol.proto
+    .OzoneManagerProtocolProtos.CreateKeyResponse;
+import org.apache.hadoop.ozone.protocol.proto
+    .OzoneManagerProtocolProtos.DeleteKeyRequest;
+import org.apache.hadoop.ozone.protocol.proto
+    .OzoneManagerProtocolProtos.DeleteKeyResponse;
+import org.apache.hadoop.ozone.protocol.proto
-    .OzoneManagerProtocolProtos.LocateKeyRequest;
+    .OzoneManagerProtocolProtos.LookupKeyRequest;
-    .OzoneManagerProtocolProtos.LocateKeyResponse;
+    .OzoneManagerProtocolProtos.LookupKeyResponse;
-    .OzoneManagerProtocolProtos.S3BucketRequest;
+    .OzoneManagerProtocolProtos.S3CreateBucketRequest;
-    .OzoneManagerProtocolProtos.S3BucketResponse;
+    .OzoneManagerProtocolProtos.S3CreateBucketResponse;
-
-
-
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
+    .OMRequest;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos
+    .OMResponse;
+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.Type;
-import java.util.ArrayList;
+  private final String clientID;
-      OzoneManagerProtocolPB rpcProxy) {
+      OzoneManagerProtocolPB rpcProxy, String clientId) {
+    this.clientID = clientId;
+   * Return the proxy object underlying this protocol translator.
+   *
+   * @return the proxy object underlying this protocol translator.
+   */
+  @Override
+  public Object getUnderlyingProxyObject() {
+    return rpcProxy;
+  }
+
+  /**
+   * Returns a OMRequest builder with specified type.
+   * @param cmdType type of the request
+   */
+  private OMRequest.Builder createOMRequest(Type cmdType) {
+    return OMRequest.newBuilder()
+        .setCmdType(cmdType)
+        .setClientId(clientID);
+  }
+
+  /**
+   * Submits client request to OM server.
+   * @param omRequest client request
+   * @return response from OM
+   * @throws IOException thrown if any Protobuf service exception occurs
+   */
+  private OMResponse submitRequest(OMRequest omRequest)
+      throws IOException {
+    try {
+      return rpcProxy.submitRequest(NULL_RPC_CONTROLLER, omRequest);
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+  }
+
+  /**
-    final CreateVolumeResponse resp;
-    try {
-      resp = rpcProxy.createVolume(NULL_RPC_CONTROLLER,
-          req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.CreateVolume)
+        .setCreateVolumeRequest(req)
+        .build();
+
+    CreateVolumeResponse resp = submitRequest(omRequest)
+        .getCreateVolumeResponse();
-    final SetVolumePropertyResponse resp;
-    try {
-      resp = rpcProxy.setVolumeProperty(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.SetVolumeProperty)
+        .setSetVolumePropertyRequest(req)
+        .build();
+
+    SetVolumePropertyResponse resp = submitRequest(omRequest)
+        .getSetVolumePropertyResponse();
+
-    final SetVolumePropertyResponse resp;
-    try {
-      resp = rpcProxy.setVolumeProperty(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.SetVolumeProperty)
+        .setSetVolumePropertyRequest(req)
+        .build();
+
+    SetVolumePropertyResponse resp = submitRequest(omRequest)
+        .getSetVolumePropertyResponse();
+
-    final CheckVolumeAccessResponse resp;
-    try {
-      resp = rpcProxy.checkVolumeAccess(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.CheckVolumeAccess)
+        .setCheckVolumeAccessRequest(req)
+        .build();
+
+    CheckVolumeAccessResponse resp = submitRequest(omRequest)
+        .getCheckVolumeAccessResponse();
-    final InfoVolumeResponse resp;
-    try {
-      resp = rpcProxy.infoVolume(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.InfoVolume)
+        .setInfoVolumeRequest(req)
+        .build();
+
+    InfoVolumeResponse resp = submitRequest(omRequest).getInfoVolumeResponse();
+
-    final DeleteVolumeResponse resp;
-    try {
-      resp = rpcProxy.deleteVolume(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.DeleteVolume)
+        .setDeleteVolumeRequest(req)
+        .build();
+
+    DeleteVolumeResponse resp = submitRequest(omRequest)
+        .getDeleteVolumeResponse();
+
-    final ListVolumeResponse resp;
-    try {
-      resp = rpcProxy.listVolumes(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.ListVolume)
+        .setListVolumeRequest(request)
+        .build();
+
+    ListVolumeResponse resp = submitRequest(omRequest).getListVolumeResponse();
-    List<OmVolumeArgs> result = Lists.newArrayList();
-    for (VolumeInfo volInfo : resp.getVolumeInfoList()) {
-      OmVolumeArgs volArgs = OmVolumeArgs.getFromProtobuf(volInfo);
-      result.add(volArgs);
-    }
-
-    final CreateBucketResponse resp;
-    try {
-      resp = rpcProxy.createBucket(NULL_RPC_CONTROLLER,
-          req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.CreateBucket)
+        .setCreateBucketRequest(req)
+        .build();
+
+    CreateBucketResponse resp = submitRequest(omRequest)
+        .getCreateBucketResponse();
+
-    final InfoBucketResponse resp;
-    try {
-      resp = rpcProxy.infoBucket(NULL_RPC_CONTROLLER,
-          req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.InfoBucket)
+        .setInfoBucketRequest(req)
+        .build();
+
+    InfoBucketResponse resp = submitRequest(omRequest).getInfoBucketResponse();
+
-    final SetBucketPropertyResponse resp;
-    try {
-      resp = rpcProxy.setBucketProperty(NULL_RPC_CONTROLLER,
-          req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.SetBucketProperty)
+        .setSetBucketPropertyRequest(req)
+        .build();
+
+    SetBucketPropertyResponse resp = submitRequest(omRequest)
+        .getSetBucketPropertyResponse();
+
-    final ListBucketsResponse resp;
-    try {
-      resp = rpcProxy.listBuckets(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.ListBuckets)
+        .setListBucketsRequest(request)
+        .build();
+
+    ListBucketsResponse resp = submitRequest(omRequest)
+        .getListBucketsResponse();
-    LocateKeyRequest.Builder req = LocateKeyRequest.newBuilder();
+    CreateKeyRequest.Builder req = CreateKeyRequest.newBuilder();
-    final LocateKeyResponse resp;
-    try {
-      resp = rpcProxy.createKey(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.CreateKey)
+        .setCreateKeyRequest(req)
+        .build();
+
+    CreateKeyResponse resp = submitRequest(omRequest).getCreateKeyResponse();
+
-  public OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientID)
+  public OmKeyLocationInfo allocateBlock(OmKeyArgs args, long clientId)
-    req.setClientID(clientID);
+    req.setClientID(clientId);
-    final AllocateBlockResponse resp;
-    try {
-      resp = rpcProxy.allocateBlock(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.AllocateBlock)
+        .setAllocateBlockRequest(req)
+        .build();
+
+    AllocateBlockResponse resp = submitRequest(omRequest)
+        .getAllocateBlockResponse();
+
-  public void commitKey(OmKeyArgs args, long clientID)
+  public void commitKey(OmKeyArgs args, long clientId)
-    req.setClientID(clientID);
+    req.setClientID(clientId);
-    final CommitKeyResponse resp;
-    try {
-      resp = rpcProxy.commitKey(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.CommitKey)
+        .setCommitKeyRequest(req)
+        .build();
+
+    CommitKeyResponse resp = submitRequest(omRequest).getCommitKeyResponse();
+
-    LocateKeyRequest.Builder req = LocateKeyRequest.newBuilder();
+    LookupKeyRequest.Builder req = LookupKeyRequest.newBuilder();
-    final LocateKeyResponse resp;
-    try {
-      resp = rpcProxy.lookupKey(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.LookupKey)
+        .setLookupKeyRequest(req)
+        .build();
+
+    LookupKeyResponse resp = submitRequest(omRequest).getLookupKeyResponse();
+
-    final RenameKeyResponse resp;
-    try {
-      resp = rpcProxy.renameKey(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.RenameKey)
+        .setRenameKeyRequest(req)
+        .build();
+
+    RenameKeyResponse resp = submitRequest(omRequest).getRenameKeyResponse();
+
-    LocateKeyRequest.Builder req = LocateKeyRequest.newBuilder();
+    DeleteKeyRequest.Builder req = DeleteKeyRequest.newBuilder();
-    final LocateKeyResponse resp;
-    try {
-      resp = rpcProxy.deleteKey(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(Type.DeleteKey)
+        .setDeleteKeyRequest(req)
+        .build();
+
+    DeleteKeyResponse resp = submitRequest(omRequest).getDeleteKeyResponse();
+
-    final DeleteBucketResponse resp;
-    try {
-      resp = rpcProxy.deleteBucket(NULL_RPC_CONTROLLER, req.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.DeleteBucket)
+        .setDeleteBucketRequest(req)
+        .build();
+
+    DeleteBucketResponse resp = submitRequest(omRequest)
+        .getDeleteBucketResponse();
+
-    ListKeysRequest request = reqBuilder.build();
-    final ListKeysResponse resp;
-    try {
-      resp = rpcProxy.listKeys(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    ListKeysRequest req = reqBuilder.build();
+
+    OMRequest omRequest = createOMRequest(Type.ListKeys)
+        .setListKeysRequest(req)
+        .build();
+
+    ListKeysResponse resp = submitRequest(omRequest).getListKeysResponse();
-  public List<ServiceInfo> getServiceList() throws IOException {
-    ServiceListRequest request = ServiceListRequest.newBuilder().build();
-    final ServiceListResponse resp;
-    try {
-      resp = rpcProxy.getServiceList(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
-
-    if (resp.getStatus() == Status.OK) {
-      return resp.getServiceInfoList().stream()
-              .map(ServiceInfo::getFromProtobuf)
-              .collect(Collectors.toList());
-    } else {
-      throw new IOException("Getting service list failed, error: "
-          + resp.getStatus());
-    }
-  }
-
-  @Override
-    S3BucketRequest request  = S3BucketRequest.newBuilder()
+    S3CreateBucketRequest req = S3CreateBucketRequest.newBuilder()
-    final S3BucketResponse resp;
-    try {
-      resp = rpcProxy.createS3Bucket(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.CreateS3Bucket)
+        .setCreateS3BucketRequest(req)
+        .build();
+
+    S3CreateBucketResponse resp = submitRequest(omRequest)
+        .getCreateS3BucketResponse();
-    final S3DeleteBucketResponse resp;
-    try {
-      resp = rpcProxy.deleteS3Bucket(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.DeleteS3Bucket)
+        .setDeleteS3BucketRequest(request)
+        .build();
+
+    S3DeleteBucketResponse resp = submitRequest(omRequest)
+        .getDeleteS3BucketResponse();
-    final  S3BucketInfoResponse resp;
-    try {
-      resp = rpcProxy.getS3Bucketinfo(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.InfoS3Bucket)
+        .setInfoS3BucketRequest(request)
+        .build();
+
+    S3BucketInfoResponse resp = submitRequest(omRequest)
+        .getInfoS3BucketResponse();
+
-    final S3ListBucketsResponse resp;
-    try {
-      resp = rpcProxy.listS3Buckets(NULL_RPC_CONTROLLER, request);
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+
+    OMRequest omRequest = createOMRequest(Type.ListS3Buckets)
+        .setListS3BucketsRequest(request)
+        .build();
+
+    S3ListBucketsResponse resp = submitRequest(omRequest)
+        .getListS3BucketsResponse();
-  /**
-   * Return the proxy object underlying this protocol translator.
-   *
-   * @return the proxy object underlying this protocol translator.
-   */
-  @Override
-  public Object getUnderlyingProxyObject() {
-    return null;
-  }
-
-    MultipartInfoInitiateResponse resp;
-    try {
-      resp = rpcProxy.initiateMultiPartUpload(NULL_RPC_CONTROLLER,
-          multipartInfoInitiateRequest.build());
-    } catch (ServiceException e) {
-      throw ProtobufHelper.getRemoteException(e);
-    }
+    OMRequest omRequest = createOMRequest(
+        Type.InitiateMultiPartUpload)
+        .setInitiateMultiPartUploadRequest(multipartInfoInitiateRequest.build())
+        .build();
+
+    MultipartInfoInitiateResponse resp = submitRequest(omRequest)
+        .getInitiateMultiPartUploadResponse();
+
-      OmKeyArgs omKeyArgs, long clientID) throws IOException {
+      OmKeyArgs omKeyArgs, long clientId) throws IOException {
-    multipartCommitUploadPartRequest.setClientID(clientID);
+    multipartCommitUploadPartRequest.setClientID(clientId);
-    MultipartCommitUploadPartResponse response;
+    OMRequest omRequest = createOMRequest(
+        Type.CommitMultiPartUpload)
+        .setCommitMultiPartUploadRequest(multipartCommitUploadPartRequest
+            .build())
+        .build();
-    try {
-      response = rpcProxy.commitMultipartUploadPart(NULL_RPC_CONTROLLER,
-          multipartCommitUploadPartRequest.build());
-
-    } catch (ServiceException ex) {
-      throw ProtobufHelper.getRemoteException(ex);
-    }
+    MultipartCommitUploadPartResponse response = submitRequest(omRequest)
+        .getCommitMultiPartUploadResponse();
+
+  public List<ServiceInfo> getServiceList() throws IOException {
+    ServiceListRequest req = ServiceListRequest.newBuilder().build();
+
+    OMRequest omRequest = createOMRequest(Type.ServiceList)
+        .setServiceListRequest(req)
+        .build();
+
+    final ServiceListResponse resp = submitRequest(omRequest)
+        .getServiceListResponse();
+
+    if (resp.getStatus() == Status.OK) {
+      return resp.getServiceInfoList().stream()
+          .map(ServiceInfo::getFromProtobuf)
+          .collect(Collectors.toList());
+    } else {
+      throw new IOException("Getting service list failed, error: "
+          + resp.getStatus());
+    }
+  }

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 UPD40 INS40 UPD40 UPD40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 MOV8 INS42 INS42 INS43 INS42 INS21 INS65 INS65 INS40 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 MOV54 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 MOV60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 UPD42 INS60 INS60 UPD42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 UPD42 INS60 INS60 INS60 INS42 INS7 INS42 INS66 INS42 INS66 INS42 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS43 INS59 INS43 INS59 UPD43 MOV43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 UPD43 UPD43 MOV43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 UPD43 UPD43 MOV43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 UPD43 UPD43 MOV43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 UPD43 UPD43 MOV43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV43 INS59 INS43 MOV43 INS59 INS43 MOV43 INS59 INS43 INS59 INS83 MOV43 INS59 INS22 INS42 INS32 INS42 INS42 INS41 INS42 INS42 INS32 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD40 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 UPD40 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD40 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 UPD42 INS32 INS42 INS32 UPD42 INS42 UPD42 INS32 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 UPD42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 UPD42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 UPD42 INS32 MOV42 INS32 UPD42 MOV42 INS32 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 MOV32 INS42 INS32 UPD42 MOV42 MOV32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 MOV42 INS40 UPD42 DEL33 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL83 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL53 DEL8 DEL12 DEL54 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL42 DEL78 DEL31 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL53 DEL8 DEL12 DEL54