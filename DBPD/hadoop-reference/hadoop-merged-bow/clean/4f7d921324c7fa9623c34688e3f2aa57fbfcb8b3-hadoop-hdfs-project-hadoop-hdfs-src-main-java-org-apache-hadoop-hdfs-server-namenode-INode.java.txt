HDFS-4446. Support file snapshots with diff lists.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileSnapshot;
-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeFileUnderConstructionSnapshot;
-import com.google.common.base.Preconditions;
-  
-  /**
-   * Create a copy of this inode for snapshot.
-   * 
-   * @return a pair of inodes, where the left inode is the current inode and
-   *         the right inode is the snapshot copy. The current inode usually is
-   *         the same object of this inode. However, in some cases, the inode
-   *         may be replaced with a new inode for maintaining snapshot data.
-   *         Then, the current inode is the new inode.
-   */
-  public Pair<? extends INode, ? extends INode> createSnapshotCopy() {
-    throw new UnsupportedOperationException(getClass().getSimpleName()
-        + " does not support createSnapshotCopy().");
-  }
-  INode recordModification(final Snapshot latest) {
-    Preconditions.checkState(!isDirectory(),
-        "this is an INodeDirectory, this=%s", this);
-    return parent.saveChild2Snapshot(this, latest);
-  }
+  abstract INode recordModification(final Snapshot latest);
-   * @return the number of deleted files in the subtree.
+   * @return the number of deleted inodes in the subtree.
-    return name == null? "<name==null>": getFullPathName();
+    return getLocalName();
-  
+
+  /** Clear references to other objects. */
+  public void clearReferences() {
+    setParent(null);
+  }
+
-  public long getModificationTime() {
+  public final long getModificationTime() {
-  public void updateModificationTime(long mtime, Snapshot latest) {
+  public final INode updateModificationTime(long mtime, Snapshot latest) {
-    if (mtime > modificationTime) {
-      setModificationTime(mtime, latest);
+    if (mtime <= modificationTime) {
+      return this;
+    return setModificationTime(mtime, latest);
-  public INode setModificationTime(long modtime, Snapshot latest) {
+  public final INode setModificationTime(long modtime, Snapshot latest) {
-          : (withSnapshot ? INodeDirectoryWithSnapshot.newInstance(dir, null)
+          : (withSnapshot ? new INodeDirectoryWithSnapshot(dir)
-    if (computeFileSize >= 0) {
-      return underConstruction ? new INodeFileUnderConstructionSnapshot(
-          fileNode, computeFileSize, clientName, clientMachine)
-          : new INodeFileSnapshot(fileNode, computeFileSize); 
-    } else {
-      return withLink ? new INodeFileWithSnapshot(fileNode) : fileNode;
-    }
+//    TODO: fix image for file diff.
+//    if (computeFileSize >= 0) {
+//      return underConstruction ? new INodeFileUnderConstructionSnapshot(
+//          fileNode, computeFileSize, clientName, clientMachine)
+//          : new INodeFileWithSnapshot(fileNode, computeFileSize); 
+//    } else {
+      return withLink ? new INodeFileWithSnapshot(fileNode, null) : fileNode;
+//    }

MOV31 MOV31 INS83 MOV78 MOV43 INS42 INS29 INS39 UPD42 INS83 INS83 MOV43 INS83 INS41 INS65 INS21 INS41 MOV41 UPD66 INS32 INS66 INS32 UPD27 MOV32 UPD42 MOV42 INS42 INS33 INS41 INS52 INS33 INS14 INS43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL38 DEL45 DEL52 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL32 DEL41 DEL8 DEL66 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL32 DEL32 DEL45 DEL27 DEL14 DEL53 DEL42 DEL33 DEL27 DEL45 DEL42 DEL32 DEL16 DEL41 DEL39 DEL21 DEL42 DEL42 DEL42 DEL33 DEL32 DEL42 DEL34 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL14 DEL16 DEL41 DEL8 DEL8 DEL25