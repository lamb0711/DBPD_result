HADOOP-6420. Add functionality permitting subsets of Configuration to be
interpreted as Map<String,String>. Contributed by Aaron Kimball


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@896966 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.AbstractMap;
- 
+
+  /**
+   * Instantiates a map view over a subset of the entries in
+   * the Configuration. This is instantiated by getMap(), which
+   * binds a prefix of the namespace to the ConfigItemMap. This
+   * mapping reflects changes to the underlying Configuration.
+   *
+   * This map does not support iteration.
+   */
+  protected class ConfigItemMap extends AbstractMap<String, String>
+      implements Map<String, String> {
+
+    private final String prefix;
+
+    public ConfigItemMap(String prefix) {
+      this.prefix = prefix;
+    }
+
+    @Override
+    public boolean containsKey(Object key) {
+      return lookup(key.toString()) != null;
+    }
+
+    @Override
+    public Set<Map.Entry<String, String>> entrySet() {
+      throw new UnsupportedOperationException("unsupported");
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      return o != null && o instanceof ConfigItemMap
+          && prefix.equals(((ConfigItemMap) o).prefix)
+          && Configuration.this == ((ConfigItemMap) o).getConfiguration();
+    }
+
+    private Configuration getConfiguration() {
+      return Configuration.this;
+    }
+
+    @Override
+    public String get(Object key) {
+      if (null == key) {
+        return null;
+      }
+
+      return lookup(key.toString());
+    }
+
+    @Override
+    public int hashCode() {
+      return prefix.hashCode();
+    }
+
+    @Override
+    public String put(String key, String val) {
+      if (null == key) {
+        return null;
+      }
+
+      String ret = get(key);
+      Configuration.this.set(prefix + key, val);
+      return ret;
+    }
+
+    @Override
+    public void putAll(Map<? extends String, ? extends String> m) {
+      for (Map.Entry<? extends String, ? extends String> entry : m.entrySet()) {
+        put(entry.getKey(), entry.getValue());
+      }
+    }
+
+    private String lookup(String subKey) {
+      String configKey = prefix + subKey;
+      Properties props = Configuration.this.getProps();
+      Object val = props.get(configKey);
+      String str = null;
+      if (null != val) {
+        str = substituteVars(val.toString());
+      }
+
+      return str;
+    }
+  }
+
+  /**
+   * Given a string -&gt; string map as a value, embed this in the
+   * Configuration by prepending 'name' to all the keys in the valueMap,
+   * and storing it inside the current Configuration.
+   *
+   * e.g., setMap("foo", { "bar" -&gt; "a", "baz" -&gt; "b" }) would
+   * insert "foo.bar" -&gt; "a" and "foo.baz" -&gt; "b" in this
+   * Configuration.
+   *
+   * @param name the prefix to attach to all keys in the valueMap. This
+   * should not have a trailing "." character.
+   * @param valueMap the map to embed in the Configuration.
+   */
+  public void setMap(String name, Map<String, String> valueMap) {
+    // Store all elements of the map proper.
+    for (Map.Entry<String, String> entry : valueMap.entrySet()) {
+      set(name + "." + entry.getKey(), entry.getValue());
+    }
+  }
+
+  /**
+   * Returns a map containing a view of all configuration properties
+   * whose names begin with "name.*", with the "name." prefix  removed.
+   * e.g., if "foo.bar" -&gt; "a" and "foo.baz" -&gt; "b" are in the
+   * Configuration, getMap("foo") would return { "bar" -&gt; "a",
+   * "baz" -&gt; "b" }.
+   *
+   * Map name deprecation is handled via "prefix deprecation"; the individual
+   * keys created in a configuration by inserting a map do not need to be
+   * individually deprecated -- it is sufficient to deprecate the 'name'
+   * associated with the map and bind that to a new name. e.g., if "foo"
+   * is deprecated for "newfoo," and the configuration contains entries for
+   * "newfoo.a" and "newfoo.b", getMap("foo") will return a map containing
+   * the keys "a" and "b".
+   *
+   * The returned map does not support iteration; it is a lazy view over
+   * the slice of the configuration whose keys begin with 'name'. Updates
+   * to the underlying configuration are reflected in the returned map,
+   * and updates to the map will modify the underlying configuration.
+   *
+   * @param name The prefix of the key names to extract into the output map.
+   * @return a String-&gt;String map that contains all (k, v) pairs
+   * where 'k' begins with 'name.'; the 'name.' prefix is removed in the output.
+   */
+  public Map<String, String> getMap(String name) {
+    String prefix = handleDeprecation(name) + ".";
+    return new ConfigItemMap(prefix);
+  }
+

INS26 INS40 INS83 INS42 INS55 INS31 INS31 INS29 INS83 INS42 INS74 INS74 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS65 INS43 INS43 INS43 INS43 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS70 INS65 INS65 INS65 INS43 INS43 INS43 INS43 INS42 INS60 INS41 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS41 INS42 INS43 INS74 INS53 INS42 INS43 INS42 INS41 INS42 INS41 INS42 INS42 INS43 INS42 INS25 INS41 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS21 INS41 INS42 INS74 INS42 INS70 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS44 INS32 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS59 INS14 INS42 INS7 INS42 INS27 INS42 INS43 INS43 INS43 INS14 INS42 INS27 INS52 INS42 INS27 INS8 INS32 INS32 INS42 INS42 INS27 INS8 INS43 INS59 INS32 INS42 INS43 INS76 INS76 INS44 INS32 INS8 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS27 INS43 INS42 INS22 INS42 INS32 INS33 INS40 INS42 INS42 INS43 INS45 INS27 INS27 INS42 INS33 INS42 INS41 INS42 INS32 INS42 INS42 INS33 INS42 INS41 INS42 INS42 INS32 INS52 INS42 INS27 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS33 INS42 INS21 INS43 INS43 INS43 INS32 INS32 INS45 INS42 INS52 INS42 INS42 INS32 INS42 INS27 INS32 INS52 INS32 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS76 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS7 INS40 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS27 INS62 INS42 INS42 INS22 INS42 INS36 INS42 INS40 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS33 INS42 INS43 INS36 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 DEL83 DEL42