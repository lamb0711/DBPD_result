YARN-9100. Add tests for GpuResourceAllocator and do minor code cleanup. Contributed by Peter Bacsko

+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
-import java.util.HashMap;
-import java.util.Iterator;
+import java.util.stream.Collectors;
- * Allocate GPU resources according to requirements
+ * Allocate GPU resources according to requirements.
+
+  private final int waitPeriodForResource;
+    // Wait for a maximum of 120 seconds if no available GPU are there which
+    // are yet to be released.
+    this.waitPeriodForResource = 120 * WAIT_MS_PER_LOOP;
+  }
+
+  @VisibleForTesting
+  GpuResourceAllocator(Context ctx, int waitPeriodForResource) {
+    this.nmContext = ctx;
+    this.waitPeriodForResource = waitPeriodForResource;
-   * Contains allowed and denied devices
+   * Contains allowed and denied devices.
-   * Add GPU to allowed list
+   * Add GPU to the allowed list of GPUs.
-  private String getResourceHandlerExceptionMessage(int numRequestedGpuDevices,
-      ContainerId containerId) {
-    return "Failed to find enough GPUs, requestor=" + containerId
-        + ", #RequestedGPUs=" + numRequestedGpuDevices + ", #availableGpus="
-        + getAvailableGpus();
-  }
-
-    if (null == c) {
+    if (c == null) {
-          "This shouldn't happen, cannot find container with id="
-              + containerId);
+          "Cannot find container with id=" + containerId +
+              ", this should not occur under normal circumstances!");
-                + " is not GpuDevice, this shouldn't happen");
+                + " is not an instance of " + GpuDevice.class.getName()
+                + ", this should not occur under normal circumstances!");
-                + " however it is not in allowed device list:" + StringUtils
-                .join(",", allowedGpuDevices));
+                + " however it is not in the allowed device list:" +
+                StringUtils.join(",", allowedGpuDevices));
-   * Assign GPU to requestor
+   * Assign GPU to the specified container.
-    // Wait for a maximum of 120 seconds if no available GPU are there which
-    // are yet to be released.
-    final int timeoutMsecs = 120 * WAIT_MS_PER_LOOP;
+    // Wait for a maximum of waitPeriodForResource seconds if no
+    // available GPU are there which are yet to be released.
-      if (timeWaiting >= timeoutMsecs) {
+      if (timeWaiting >= waitPeriodForResource) {
+        Thread.currentThread().interrupt();
+        LOG.warn("Interrupted while waiting for available GPU");
-    // Assign Gpus to container if requested some.
+
+    // Assign GPUs to container if requested some.
+      if (LOG.isDebugEnabled()) {
+        LOG.debug(String.format("Trying to assign %d GPUs to container: %s" +
+            ", #AvailableGPUs=%d, #ReleasingGPUs=%d",
+            numRequestedGpuDevices, containerId,
+            getAvailableGpus(), getReleasingGpus()));
+      }
-            getResourceHandlerExceptionMessage(numRequestedGpuDevices,
-                containerId));
+            "Failed to find enough GPUs, requestor=" + containerId +
+                ", #RequestedGPUs=" + numRequestedGpuDevices +
+                ", #AvailableGPUs=" + getAvailableGpus());
-          cleanupAssignGpus(containerId);
+          unassignGpus(containerId);
-   * Clean up all Gpus assigned to containerId
+   * Clean up all GPUs assigned to containerId.
-  public synchronized void cleanupAssignGpus(ContainerId containerId) {
-    Iterator<Map.Entry<GpuDevice, ContainerId>> iter =
-        usedDevices.entrySet().iterator();
-    while (iter.hasNext()) {
-      if (iter.next().getValue().equals(containerId)) {
-        iter.remove();
-      }
+  public synchronized void unassignGpus(ContainerId containerId) {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Trying to unassign GPU device from container " + containerId);
+    usedDevices.entrySet().removeIf(entry ->
+        entry.getValue().equals(containerId));
-  public synchronized Map<GpuDevice, ContainerId> getDeviceAllocationMappingCopy() {
-    return new HashMap<>(usedDevices);
+  public synchronized Map<GpuDevice, ContainerId> getDeviceAllocationMapping() {
+    return ImmutableMap.copyOf(usedDevices);
-  public synchronized List<GpuDevice> getAllowedGpusCopy() {
-    return new ArrayList<>(allowedGpuDevices);
+  public synchronized List<GpuDevice> getAllowedGpus() {
+    return ImmutableList.copyOf(allowedGpuDevices);
-  public synchronized List<AssignedGpuDevice> getAssignedGpusCopy() {
-    List<AssignedGpuDevice> assigns = new ArrayList<>();
-    for (Map.Entry<GpuDevice, ContainerId> entry : usedDevices.entrySet()) {
-      assigns.add(new AssignedGpuDevice(entry.getKey().getIndex(),
-          entry.getKey().getMinorNumber(), entry.getValue()));
-    }
-    return assigns;
+  public synchronized List<AssignedGpuDevice> getAssignedGpus() {
+    return usedDevices.entrySet().stream()
+        .map(e -> {
+          final GpuDevice gpu = e.getKey();
+          ContainerId containerId = e.getValue();
+          return new AssignedGpuDevice(gpu.getIndex(), gpu.getMinorNumber(),
+              containerId);
+        }).collect(Collectors.toList());

MOV26 MOV26 INS26 INS40 UPD40 UPD40 INS23 INS31 INS83 INS83 INS39 INS59 INS78 INS42 INS44 MOV44 INS8 UPD42 UPD42 UPD42 UPD42 UPD66 INS42 INS21 INS42 INS43 INS42 UPD42 INS21 INS21 INS25 INS21 INS41 INS7 UPD42 MOV42 INS7 INS7 UPD66 UPD66 UPD66 MOV25 UPD66 INS32 INS8 INS32 INS32 INS32 INS32 INS22 MOV27 INS22 INS42 INS22 INS42 INS33 INS25 INS42 INS42 INS21 MOV32 UPD42 MOV42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS52 INS42 INS52 INS42 MOV8 INS32 MOV27 INS8 INS32 INS59 INS32 MOV32 INS42 INS86 INS42 INS42 MOV43 UPD42 INS8 INS42 INS42 INS21 INS53 UPD42 MOV42 UPD42 MOV42 INS27 INS42 MOV32 MOV42 MOV42 UPD42 INS59 INS8 UPD45 INS45 INS21 INS21 INS10 INS32 INS14 INS45 INS42 INS42 INS60 INS60 INS41 MOV43 INS32 INS32 INS42 INS42 INS32 MOV43 INS27 INS83 MOV43 MOV59 MOV43 INS59 INS14 INS27 INS32 UPD45 UPD45 INS32 INS42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS27 MOV42 MOV42 MOV32 INS32 INS45 INS42 INS45 INS42 INS45 INS32 UPD42 INS32 INS42 INS32 MOV43 MOV32 INS32 INS42 MOV45 INS45 INS57 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 DEL83 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL31 DEL33 DEL83 DEL39 DEL42 DEL59 DEL60 DEL10 DEL8 DEL32 DEL14 DEL53 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL59 DEL60 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL43 DEL74 DEL42 DEL14 DEL42 DEL43 DEL74 DEL42 DEL14 DEL42 DEL43 DEL74 DEL14 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL60 DEL40 DEL43 DEL74 DEL42 DEL44 DEL32 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41