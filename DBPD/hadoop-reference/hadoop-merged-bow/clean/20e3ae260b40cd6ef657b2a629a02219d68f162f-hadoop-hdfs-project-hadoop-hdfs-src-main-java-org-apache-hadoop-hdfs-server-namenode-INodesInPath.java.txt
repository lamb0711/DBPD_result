HDFS-11402. HDFS Snapshots should capture point-in-time copies of OPEN files. (Manoj Govindassamy via Yongjun Zhang)

-  static INodesInPath fromINode(INode inode) {
+  private static INode[] getINodes(final INode inode) {
-    final byte[][] path = new byte[depth][];
-    final INode[] inodes = new INode[depth];
+    INode[] inodes = new INode[depth];
-      path[index] = tmp.getKey();
-    return new INodesInPath(inodes, path);
+    return inodes;
+  }
+
+  private static byte[][] getPaths(final INode[] inodes) {
+    byte[][] paths = new byte[inodes.length][];
+    for (int i = 0; i < inodes.length; i++) {
+      paths[i] = inodes[i].getKey();
+    }
+    return paths;
+  }
+
+  /**
+   * Construct {@link INodesInPath} from {@link INode}.
+   *
+   * @param inode to construct from
+   * @return INodesInPath
+   */
+  static INodesInPath fromINode(INode inode) {
+    INode[] inodes = getINodes(inode);
+    byte[][] paths = getPaths(inodes);
+    return new INodesInPath(inodes, paths);
+  }
+
+  /**
+   * Construct {@link INodesInPath} from {@link INode} and its root
+   * {@link INodeDirectory}. INodesInPath constructed this way will
+   * each have its snapshot and latest snapshot id filled in.
+   *
+   * This routine is specifically for
+   * {@link LeaseManager#getINodeWithLeases(INodeDirectory)} to get
+   * open files along with their snapshot details which is used during
+   * new snapshot creation to capture their meta data.
+   *
+   * @param rootDir the root {@link INodeDirectory} under which inode
+   *                needs to be resolved
+   * @param inode the {@link INode} to be resolved
+   * @return INodesInPath
+   */
+  static INodesInPath fromINode(final INodeDirectory rootDir, INode inode) {
+    byte[][] paths = getPaths(getINodes(inode));
+    return resolve(rootDir, paths);
+   * Verify if this {@link INodesInPath} is a descendant of the
+   * requested {@link INodeDirectory}.
+   *
+   * @param inodeDirectory the ancestor directory
+   * @return true if this INodesInPath is a descendant of inodeDirectory
+   */
+  public boolean isDescendant(final INodeDirectory inodeDirectory) {
+    final INodesInPath dirIIP = fromINode(inodeDirectory);
+    return isDescendant(dirIIP);
+  }
+
+  private boolean isDescendant(final INodesInPath ancestorDirIIP) {
+    int ancestorDirINodesLength = ancestorDirIIP.length();
+    int myParentINodesLength = length() - 1;
+    if (myParentINodesLength < ancestorDirINodesLength) {
+      return false;
+    }
+
+    int index = 0;
+    while (index < ancestorDirINodesLength) {
+      if (inodes[index] != ancestorDirIIP.getINode(index)) {
+        return false;
+      }
+      index++;
+    }
+    return true;
+  }
+
+
+  /**

INS31 INS31 INS31 INS31 INS31 INS83 INS5 INS42 INS44 INS83 INS83 MOV5 INS42 INS44 INS8 INS29 INS83 INS43 INS42 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS85 INS83 INS43 INS42 INS41 INS83 INS5 INS42 INS60 INS24 INS41 INS65 INS65 INS65 INS42 INS60 INS60 MOV41 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS43 INS42 INS60 INS41 INS65 INS65 INS65 INS83 INS43 INS42 INS60 INS41 INS83 INS43 INS42 INS60 INS60 INS25 INS60 INS61 INS41 INS42 INS42 INS42 INS43 INS85 MOV5 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS66 INS5 INS59 INS5 INS59 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS42 INS5 INS59 INS32 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS83 MOV43 INS59 INS32 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS9 INS42 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS43 INS85 INS42 INS32 INS39 INS85 INS85 INS42 INS32 UPD42 INS42 INS42 INS42 INS68 INS42 INS42 INS39 INS85 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS41 INS42 INS34 INS42 INS42 INS25 INS21 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS34 INS9 INS27 INS8 INS37 INS39 INS85 INS85 INS2 INS32 INS43 INS42 INS42 INS42 INS2 INS32 INS41 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 DEL42 DEL83 DEL42 DEL42 DEL3 DEL59 DEL60 DEL83 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21