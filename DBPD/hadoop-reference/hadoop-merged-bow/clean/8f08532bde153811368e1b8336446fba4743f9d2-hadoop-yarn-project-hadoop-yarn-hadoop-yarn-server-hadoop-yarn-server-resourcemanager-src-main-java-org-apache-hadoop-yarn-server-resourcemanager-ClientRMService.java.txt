YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma

-import org.apache.hadoop.yarn.api.protocolrecords.UpdateApplicationPriorityRequest;
-import org.apache.hadoop.yarn.api.protocolrecords.UpdateApplicationPriorityResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.SignalContainerRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.SignalContainerResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.UpdateApplicationPriorityRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.UpdateApplicationPriorityResponse;
+import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNodeSignalContainerEvent;
+  /**
+   * Signal a container.
+   * After the request passes some sanity check, it will be delivered
+   * to RMNodeImpl so that the next NM heartbeat will pick up the signal request
+   */
+  @Override
+  public SignalContainerResponse signalContainer(
+      SignalContainerRequest request) throws YarnException, IOException {
+    ContainerId containerId = request.getContainerId();
+
+    UserGroupInformation callerUGI;
+    try {
+      callerUGI = UserGroupInformation.getCurrentUser();
+    } catch (IOException ie) {
+      LOG.info("Error getting UGI ", ie);
+      throw RPCUtil.getRemoteException(ie);
+    }
+
+    ApplicationId applicationId = containerId.getApplicationAttemptId().
+        getApplicationId();
+    RMApp application = this.rmContext.getRMApps().get(applicationId);
+    if (application == null) {
+      RMAuditLogger.logFailure(callerUGI.getUserName(),
+          AuditConstants.SIGNAL_CONTAINER, "UNKNOWN", "ClientRMService",
+          "Trying to signal an absent container", applicationId, containerId);
+      throw RPCUtil
+          .getRemoteException("Trying to signal an absent container "
+              + containerId);
+    }
+
+    if (!checkAccess(callerUGI, application.getUser(),
+        ApplicationAccessType.MODIFY_APP, application)) {
+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
+          AuditConstants.SIGNAL_CONTAINER, "User doesn't have permissions to "
+              + ApplicationAccessType.MODIFY_APP.toString(), "ClientRMService",
+          AuditConstants.UNAUTHORIZED_USER, applicationId);
+      throw RPCUtil.getRemoteException(new AccessControlException("User "
+          + callerUGI.getShortUserName() + " cannot perform operation "
+          + ApplicationAccessType.MODIFY_APP.name() + " on " + applicationId));
+    }
+
+    RMContainer container = scheduler.getRMContainer(containerId);
+    if (container != null) {
+      this.rmContext.getDispatcher().getEventHandler().handle(
+          new RMNodeSignalContainerEvent(container.getContainer().getNodeId(),
+              request));
+      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),
+          AuditConstants.SIGNAL_CONTAINER, "ClientRMService", applicationId,
+          containerId);
+    } else {
+      RMAuditLogger.logFailure(callerUGI.getUserName(),
+          AuditConstants.SIGNAL_CONTAINER, "UNKNOWN", "ClientRMService",
+          "Trying to signal an absent container", applicationId, containerId);
+      throw RPCUtil
+          .getRemoteException("Trying to signal an absent container "
+              + containerId);
+    }
+
+    return recordFactory
+        .newRecordInstance(SignalContainerResponse.class);
+  }
+

MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS65 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS54 INS60 INS60 INS25 INS25 INS60 INS25 INS41 INS66 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS43 INS59 INS27 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS32 INS21 INS53 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS53 INS42 INS42 INS57 INS42 INS42 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS40 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS40 INS27 INS45 INS40 INS42 INS42 INS42 INS14 INS32 INS42 INS14 INS42 INS42 INS32 INS40 INS45 INS42 INS42 INS42 INS42 INS32 INS40 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS43 INS27 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS40 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS22 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS52 INS42 INS42 INS42