HDDS-924. MultipartUpload: S3 APi for complete Multipart Upload. Contributed by Bharat Viswanadham.

+import java.util.Map;
+import java.util.TreeMap;
+import org.apache.hadoop.ozone.om.helpers.OmMultipartUploadCompleteInfo;
+import static org.apache.hadoop.ozone.s3.exception.S3ErrorTable.ENTITY_TOO_SMALL;
-  public Response initiateMultipartUpload(
+  public Response multipartUpload(
-      @QueryParam("uploads") String uploads) throws IOException, OS3Exception {
+      @QueryParam("uploads") String uploads,
+      @QueryParam("uploadId") @DefaultValue("") String uploadID,
+      CompleteMultipartUploadRequest request) throws IOException, OS3Exception {
+    if (!uploadID.equals("")) {
+      //Complete Multipart upload request.
+      return completeMultipartUpload(bucket, key, uploadID, request);
+    } else {
+      // Initiate Multipart upload request.
+      return initiateMultipartUpload(bucket, key);
+    }
+  }
+
+  /**
+   * Initiate Multipart upload request.
+   * @param bucket
+   * @param key
+   * @return Response
+   * @throws IOException
+   * @throws OS3Exception
+   */
+  private Response initiateMultipartUpload(String bucket, String key) throws
+      IOException, OS3Exception {
-
+      LOG.error("Error in Initiate Multipart Upload Request for bucket: " +
+          bucket + ", key: " + key, ex);
+  }
+  /**
+   * Complete Multipart upload request.
+   * @param bucket
+   * @param key
+   * @param uploadID
+   * @param multipartUploadRequest
+   * @return Response
+   * @throws IOException
+   * @throws OS3Exception
+   */
+  private Response completeMultipartUpload(String bucket, String key, String
+      uploadID, CompleteMultipartUploadRequest multipartUploadRequest) throws
+      IOException, OS3Exception {
+    OzoneBucket ozoneBucket = getBucket(bucket);
+    Map<Integer, String> partsMap = new TreeMap<>();
+    List<CompleteMultipartUploadRequest.Part> partList =
+        multipartUploadRequest.getPartList();
+
+    for (CompleteMultipartUploadRequest.Part part : partList) {
+      partsMap.put(part.getPartNumber(), part.geteTag());
+    }
+
+    LOG.debug("Parts map {}", partsMap.toString());
+
+    OmMultipartUploadCompleteInfo omMultipartUploadCompleteInfo;
+    try {
+      omMultipartUploadCompleteInfo = ozoneBucket.completeMultipartUpload(
+          key, uploadID, partsMap);
+      CompleteMultipartUploadResponse completeMultipartUploadResponse =
+          new CompleteMultipartUploadResponse();
+      completeMultipartUploadResponse.setBucket(bucket);
+      completeMultipartUploadResponse.setKey(key);
+      completeMultipartUploadResponse.setETag(omMultipartUploadCompleteInfo
+          .getHash());
+      // Location also setting as bucket name.
+      completeMultipartUploadResponse.setLocation(bucket);
+      return Response.status(Status.OK).entity(completeMultipartUploadResponse)
+          .build();
+    } catch (IOException ex) {
+      LOG.error("Error in Complete Multipart Upload Request for bucket: " +
+          bucket + ", key: " + key, ex);
+      if (ex.getMessage().contains("MISMATCH_MULTIPART_LIST")) {
+        OS3Exception oex =
+            S3ErrorTable.newError(S3ErrorTable.INVALID_PART, key);
+        throw oex;
+      } else if (ex.getMessage().contains("MISSING_UPLOAD_PARTS")) {
+        OS3Exception oex =
+            S3ErrorTable.newError(S3ErrorTable.INVALID_PART_ORDER, key);
+        throw oex;
+      } else if (ex.getMessage().contains("NO_SUCH_MULTIPART_UPLOAD_ERROR")) {
+        OS3Exception os3Exception = S3ErrorTable.newError(NO_SUCH_UPLOAD,
+            uploadID);
+        throw os3Exception;
+      } else if (ex.getMessage().contains("ENTITY_TOO_SMALL")) {
+        OS3Exception os3Exception = S3ErrorTable.newError(ENTITY_TOO_SMALL,
+            key);
+        throw os3Exception;
+      }
+      throw ex;
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 MOV78 MOV79 INS83 INS43 INS42 MOV44 MOV44 MOV44 INS44 INS44 INS43 INS43 INS8 INS29 UPD83 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS79 INS79 INS43 INS42 INS43 INS42 INS42 INS42 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS70 INS21 INS60 INS54 INS42 INS45 INS42 INS45 INS42 INS42 INS38 INS8 INS8 INS66 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS43 INS59 INS8 INS12 INS32 INS41 INS41 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS60 INS21 INS21 INS21 INS21 INS41 INS44 INS8 INS42 INS42 INS45 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS40 INS42 INS42 INS40 INS32 INS42 INS42 INS7 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS8 INS25 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS45 INS60 INS53 INS32 INS8 INS25 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS45 INS42 INS42 INS42 INS43 INS59 INS42 INS32 INS42 INS45 INS60 INS53 INS32 INS8 INS25 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS42 INS32 INS42 INS45 INS60 INS53 INS32 INS8 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS42 INS32 INS42 INS45 INS60 INS53 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42