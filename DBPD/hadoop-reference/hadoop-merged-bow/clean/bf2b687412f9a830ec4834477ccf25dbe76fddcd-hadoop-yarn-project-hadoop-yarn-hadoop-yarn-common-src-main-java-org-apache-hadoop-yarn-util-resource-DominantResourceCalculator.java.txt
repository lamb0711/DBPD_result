YARN-7136. Additional Performance Improvement for Resource Profile Feature
(Contributed by Wangda Tan via Daniel Templeton)

-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+
-    double[] lhsShares = new double[clusterRes.length];
-    double[] rhsShares = new double[clusterRes.length];
+    double[] lhsShares = new double[maxLength];
+    double[] rhsShares = new double[maxLength];
-      } else if (clusterRes.length == 2) {
+      } else if (maxLength == 2) {
-        diff = calculateSharesForMandatoryResources(clusterRes, lhs, rhs,
+        diff = calculateSharesForTwoMandatoryResources(clusterRes, lhs, rhs,
-    for (int i = 0; i < clusterRes.length; i++) {
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+    for (int i = 0; i < maxLength; i++) {
-  private int calculateSharesForMandatoryResources(
+  private int calculateSharesForTwoMandatoryResources(
+    firstShares[0] = calculateShare(clusterRes[0], firstRes[0]);
+    secondShares[0] = calculateShare(clusterRes[0], secondRes[0]);
+    firstShares[1] = calculateShare(clusterRes[1], firstRes[1]);
+    secondShares[1] = calculateShare(clusterRes[1], secondRes[1]);
+
+    int firstSub = 1;
+    if (firstShares[1] > firstShares[0]) {
+      firstDom = 1;
+      firstSub = 0;
+    }
-    int firstSub = 0;
-    int secondSub = 0;
-
-    for (int i = 0; i < clusterRes.length; i++) {
-      firstShares[i] = calculateShare(clusterRes[i], firstRes[i]);
-      secondShares[i] = calculateShare(clusterRes[i], secondRes[i]);
-
-      if (firstShares[i] > firstShares[firstDom]) {
-        firstDom = i;
-      }
-
-      if (firstShares[i] < firstShares[firstSub]) {
-        firstSub = i;
-      }
-
-      if (secondShares[i] > secondShares[secondDom]) {
-        secondDom = i;
-      }
-
-      if (secondShares[i] < secondShares[secondSub]) {
-        secondSub = i;
-      }
+    int secondSub = 1;
+    if (secondShares[1] > secondShares[0]) {
+      secondDom = 1;
+      secondSub = 0;
-    for (int i = 0; i < clusterRes.length; i++) {
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+    for (int i = 0; i < maxLength; i++) {
-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
+    int nKnownResourceTypes = ResourceUtils.getNumberOfKnownResourceTypes();
-    double[] numeratorShares = new double[clusterRes.length];
-    double[] denominatorShares = new double[clusterRes.length];
+    double[] numeratorShares = new double[nKnownResourceTypes];
+    double[] denominatorShares = new double[nKnownResourceTypes];
-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();
-    int maxLength = ResourceUtils.getResourceTypesArray().length;
+    int maxLength = ResourceUtils.getNumberOfKnownResourceTypes();

UPD42 MOV60 INS60 INS60 INS21 INS21 MOV21 MOV21 INS60 INS25 INS60 INS25 INS60 INS60 INS39 INS59 MOV5 MOV5 INS39 INS59 INS7 INS7 INS39 INS59 MOV27 INS8 INS39 INS59 MOV27 INS8 INS39 INS59 INS39 INS59 MOV5 MOV5 INS32 INS42 INS32 INS42 INS32 INS42 INS2 INS32 INS2 INS32 INS42 INS34 MOV21 MOV21 INS42 INS34 MOV21 MOV21 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 MOV42 UPD42 MOV42 INS42 INS42 MOV5 INS42 MOV5 INS42 INS42 INS42 INS42 INS34 INS42 INS2 INS2 INS42 INS34 INS42 INS2 INS2 INS34 INS34 INS34 INS34 INS34 INS34 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 MOV5 INS42 MOV5 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS34 INS42 UPD42 DEL32 DEL42 DEL22 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL27 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL27 DEL8 DEL25 DEL8 DEL24 DEL40 DEL32 DEL42 DEL22 DEL40 DEL40 DEL32 DEL42 DEL22 DEL32 DEL42 DEL22 DEL32 DEL42 DEL22 DEL32 DEL42 DEL22 DEL32 DEL42 DEL22 DEL32 DEL42 DEL22