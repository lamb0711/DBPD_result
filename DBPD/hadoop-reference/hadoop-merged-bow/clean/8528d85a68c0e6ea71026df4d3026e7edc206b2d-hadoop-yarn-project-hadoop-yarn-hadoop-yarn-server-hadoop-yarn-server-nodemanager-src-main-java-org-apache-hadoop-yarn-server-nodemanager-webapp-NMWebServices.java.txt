YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.

+import java.util.ArrayList;
+import java.util.List;
+import javax.ws.rs.core.GenericEntity;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogMeta;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogType;
+import org.apache.hadoop.yarn.logaggregation.LogToolUtils;
-import org.apache.hadoop.yarn.server.nodemanager.webapp.dao.ContainerLogsInfo;
+import org.apache.hadoop.yarn.server.nodemanager.webapp.dao.NMContainerLogsInfo;
+import org.apache.hadoop.yarn.server.webapp.dao.ContainerLogsInfo;
+   * @param res
+   *    HttpServletResponse
-  public ContainerLogsInfo getContainerLogsInfo(@javax.ws.rs.core.Context
-      HttpServletRequest hsr,
+  public Response getContainerLogsInfo(
+      @javax.ws.rs.core.Context HttpServletRequest hsr,
+      @javax.ws.rs.core.Context HttpServletResponse res,
-    } catch (Exception e) {
+    } catch (IllegalArgumentException ex) {
+
-      return new ContainerLogsInfo(this.nmContext, containerId,
-          hsr.getRemoteUser());
-    } catch (YarnException ex) {
+      List<ContainerLogsInfo> containersLogsInfo = new ArrayList<>();
+      containersLogsInfo.add(new NMContainerLogsInfo(
+          this.nmContext, containerId,
+          hsr.getRemoteUser(), ContainerLogType.LOCAL));
+      // check whether we have aggregated logs in RemoteFS. If exists, show the
+      // the log meta for the aggregated logs as well.
+      ApplicationId appId = containerId.getApplicationAttemptId()
+          .getApplicationId();
+      Application app = this.nmContext.getApplications().get(appId);
+      String appOwner = app == null ? null : app.getUser();
+      try {
+        List<ContainerLogMeta> containerLogMeta = LogToolUtils
+            .getContainerLogMetaFromRemoteFS(this.nmContext.getConf(),
+                appId, containerIdStr,
+                this.nmContext.getNodeId().toString(), appOwner);
+        if (!containerLogMeta.isEmpty()) {
+          for (ContainerLogMeta logMeta : containerLogMeta) {
+            containersLogsInfo.add(new ContainerLogsInfo(logMeta,
+                ContainerLogType.AGGREGATED));
+          }
+        }
+      } catch (IOException ex) {
+        // Something wrong with we tries to access the remote fs for the logs.
+        // Skip it and do nothing
+      }
+      GenericEntity<List<ContainerLogsInfo>> meta = new GenericEntity<List<
+          ContainerLogsInfo>>(containersLogsInfo){};
+      ResponseBuilder resp = Response.ok(meta);
+      // Sending the X-Content-Type-Options response header with the value
+      // nosniff will prevent Internet Explorer from MIME-sniffing a response
+      // away from the declared content-type.
+      resp.header("X-Content-Type-Options", "nosniff");
+      return resp.build();
+    } catch (Exception ex) {

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS43 INS44 INS65 INS42 INS78 INS43 INS42 INS42 INS66 INS40 INS42 INS44 INS60 INS21 INS60 INS60 INS60 INS54 INS60 INS60 INS21 MOV44 INS43 INS42 INS74 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS74 INS59 INS43 INS59 INS32 INS32 UPD42 INS42 INS43 MOV43 INS42 INS14 INS42 INS42 MOV14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS60 INS25 INS44 INS8 INS43 INS74 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS74 INS43 INS40 INS32 INS42 INS32 INS42 INS42 INS27 INS33 INS32 INS74 INS59 INS38 INS8 INS43 INS42 INS42 INS43 INS43 INS74 INS42 INS1 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS22 INS42 INS42 INS33 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS70 INS42 INS42 INS42 INS43 INS74 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS43 INS43 INS22 INS42 INS32 INS42 INS43 INS42 INS21 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS14 MOV43 INS42 INS40 DEL42 DEL43 DEL42 DEL44