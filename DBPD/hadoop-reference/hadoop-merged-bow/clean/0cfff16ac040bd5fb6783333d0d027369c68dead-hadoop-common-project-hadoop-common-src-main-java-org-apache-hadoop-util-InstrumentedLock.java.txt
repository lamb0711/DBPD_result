HADOOP-16833. InstrumentedLock should log lock queue time. Contributed by Stephen O'Donnell.

Change-Id: Idddff05051b6f642b88e51694b40c5bb1bef0026

-  private final AtomicLong lastLogTimestamp;
-  private final AtomicLong warningsSuppressed = new AtomicLong(0);
+  private final AtomicLong lastHoldLogTimestamp;
+  private final AtomicLong lastWaitLogTimestamp;
+  private final SuppressedStats holdStats = new SuppressedStats();
+  private final SuppressedStats waitStats = new SuppressedStats();
-    lastLogTimestamp = new AtomicLong(
+    lastHoldLogTimestamp = new AtomicLong(
+    lastWaitLogTimestamp = new AtomicLong(lastHoldLogTimestamp.get());
+    long waitStart = clock.monotonicNow();
+    check(waitStart, clock.monotonicNow(), false);
+    long waitStart = clock.monotonicNow();
+    check(waitStart, clock.monotonicNow(), false);
+    long waitStart = clock.monotonicNow();
+    boolean retval = false;
-      return true;
+      retval = true;
-    return false;
+    check(waitStart, clock.monotonicNow(), false);
+    return retval;
-    check(localLockAcquireTime, localLockReleaseTime);
+    check(localLockAcquireTime, localLockReleaseTime, true);
-  void logWarning(long lockHeldTime, long suppressed) {
+  void logWarning(long lockHeldTime, SuppressedSnapshot stats) {
+        "Longest suppressed LockHeldTimeMs=%d. " +
-        name, lockHeldTime, suppressed,
+        name, lockHeldTime, stats.getSuppressedCount(),
+        stats.getMaxSuppressedWait(),
+        StringUtils.getStackTrace(Thread.currentThread())));
+  }
+
+  @VisibleForTesting
+  void logWaitWarning(long lockWaitTime, SuppressedSnapshot stats) {
+    logger.warn(String.format("Waited above threshold to acquire lock: " +
+        "lock identifier: %s " +
+        "waitTimeMs=%d ms. Suppressed %d lock wait warnings. " +
+        "Longest suppressed WaitTimeMs=%d. " +
+        "The stack trace is: %s", name, lockWaitTime,
+        stats.getSuppressedCount(), stats.getMaxSuppressedWait(),
-  protected void check(long acquireTime, long releaseTime) {
+  protected void check(long acquireTime, long releaseTime,
+       boolean checkLockHeld) {
+      AtomicLong lastLogTime;
+      SuppressedStats stats;
+      if (checkLockHeld) {
+        lastLogTime = lastHoldLogTimestamp;
+        stats = holdStats;
+      } else {
+        lastLogTime = lastWaitLogTimestamp;
+        stats = waitStats;
+      }
-        localLastLogTs = lastLogTimestamp.get();
+        localLastLogTs = lastLogTime.get();
-          warningsSuppressed.incrementAndGet();
+          stats.incrementSuppressed(lockHeldTime);
-      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));
-      long suppressed = warningsSuppressed.getAndSet(0);
-      logWarning(lockHeldTime, suppressed);
+      } while (!lastLogTime.compareAndSet(localLastLogTs, now));
+      SuppressedSnapshot statsSnapshot = stats.snapshot();
+      if (checkLockHeld) {
+        logWarning(lockHeldTime, statsSnapshot);
+      } else {
+        logWaitWarning(lockHeldTime, statsSnapshot);
+      }
+
+  /**
+   * Internal class to track statistics about suppressed log messages in an
+   * atomic way.
+   */
+  private static class SuppressedStats {
+    private long suppressedCount = 0;
+    private long maxSuppressedWait = 0;
+
+    /**
+     * Increments the suppressed counter and increases the max wait time if the
+     * passed wait is greater than the current maxSuppressedWait.
+     * @param wait The wait time for this suppressed message
+     */
+    synchronized public void incrementSuppressed(long wait) {
+      suppressedCount++;
+      if (wait > maxSuppressedWait) {
+        maxSuppressedWait = wait;
+      }
+    }
+
+    /**
+     * Captures the current value of the counts into a SuppressedSnapshot object
+     * and resets the values to zero.
+     *
+     * @return SuppressedSnapshot containing the current value of the counters
+     */
+    synchronized public SuppressedSnapshot snapshot() {
+      SuppressedSnapshot snap =
+          new SuppressedSnapshot(suppressedCount, maxSuppressedWait);
+      suppressedCount = 0;
+      maxSuppressedWait = 0;
+      return snap;
+    }
+  }
+
+  /**
+   * Immutable class to capture a snapshot of suppressed log message stats.
+   */
+  protected static class SuppressedSnapshot {
+    private long suppressedCount = 0;
+    private long maxSuppressedWait = 0;
+
+    public SuppressedSnapshot(long suppressedCount, long maxWait) {
+      this.suppressedCount = suppressedCount;
+      this.maxSuppressedWait = maxWait;
+    }
+
+    public long getMaxSuppressedWait() {
+      return maxSuppressedWait;
+    }
+
+    public long getSuppressedCount() {
+      return suppressedCount;
+    }
+  }

INS23 INS23 INS31 INS55 INS55 INS83 INS83 MOV43 INS59 MOV43 INS43 INS83 INS83 INS43 INS59 MOV78 INS39 INS42 MOV44 INS44 INS8 INS78 UPD42 INS44 INS44 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS42 UPD42 INS42 INS42 INS14 INS42 INS42 INS14 INS21 INS60 INS21 INS60 INS21 INS60 INS60 INS21 INS41 INS43 INS42 INS21 INS42 UPD42 INS43 INS42 INS39 INS42 INS65 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS65 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS43 INS43 INS7 INS39 INS59 INS32 INS39 INS59 INS32 INS39 INS59 INS39 INS59 INS32 INS42 INS42 INS32 INS42 INS66 INS66 INS42 INS34 INS42 INS34 INS65 INS65 INS39 INS42 INS21 INS25 INS65 INS65 INS42 INS60 INS21 INS21 INS41 INS66 INS42 INS34 INS42 INS34 INS39 INS42 INS39 INS42 INS21 INS21 INS41 INS41 INS42 INS42 UPD42 INS42 MOV14 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS32 INS42 INS9 INS21 INS42 INS42 INS32 INS9 INS9 INS42 INS42 INS32 INS60 INS60 INS25 INS25 INS66 INS66 INS42 INS66 INS37 INS27 INS8 INS66 INS66 INS66 INS43 INS59 INS7 INS7 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 MOV32 UPD42 INS32 INS32 INS32 INS43 INS59 INS43 INS59 INS42 INS8 INS8 INS43 INS42 INS8 INS8 INS42 INS42 INS42 INS21 INS42 INS42 INS14 INS42 INS34 INS42 INS34 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS9 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 UPD45 UPD45 INS45 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 UPD42 MOV21 INS21 INS7 INS43 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS7 INS7 INS7 INS7 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 DEL42 DEL34 DEL9 DEL41 DEL9 DEL41 DEL39 DEL34