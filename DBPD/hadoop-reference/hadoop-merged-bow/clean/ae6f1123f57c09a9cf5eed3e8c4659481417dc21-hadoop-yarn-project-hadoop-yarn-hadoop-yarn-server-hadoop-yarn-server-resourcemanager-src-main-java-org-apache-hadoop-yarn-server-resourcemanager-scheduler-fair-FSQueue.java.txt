YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
-import org.apache.hadoop.classification.InterfaceAudience.Private;
-import org.apache.hadoop.classification.InterfaceStability.Unstable;
+import org.apache.hadoop.security.authorize.AccessControlList;
+import org.apache.hadoop.yarn.api.records.Priority;
+import org.apache.hadoop.yarn.api.records.QueueACL;
+import org.apache.hadoop.yarn.api.records.QueueInfo;
+import org.apache.hadoop.yarn.api.records.QueueState;
+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.factories.RecordFactory;
+import org.apache.hadoop.yarn.factory.providers.RecordFactoryProvider;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.Queue;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.QueueMetrics;
-/**
- * A queue containing several applications.
- */
-@Private
-@Unstable
-public class FSQueue {
-  /** Queue name. */
-  private String name;
-
-  /** Applications in this specific queue; does not include children queues' jobs. */
-  private Collection<FSSchedulerApp> applications = 
-      new ArrayList<FSSchedulerApp>();
-
-  /** Scheduling mode for jobs inside the queue (fair or FIFO) */
-  private SchedulingMode schedulingMode;
-
-  private FairScheduler scheduler;
-
-  private FSQueueSchedulable queueSchedulable;
-
-  public FSQueue(FairScheduler scheduler, String name) {
+public abstract class FSQueue extends Schedulable implements Queue {
+  private final String name;
+  private final QueueManager queueMgr;
+  private final FairScheduler scheduler;
+  private final QueueMetrics metrics;
+  
+  protected final FSParentQueue parent;
+  protected final RecordFactory recordFactory =
+      RecordFactoryProvider.getRecordFactory(null);
+  
+  public FSQueue(String name, QueueManager queueMgr, 
+      FairScheduler scheduler, FSParentQueue parent) {
-    this.queueSchedulable = new FSQueueSchedulable(scheduler, this);
+    this.queueMgr = queueMgr;
+    this.metrics = QueueMetrics.forQueue(getName(), parent, true, scheduler.getConf());
+    this.parent = parent;
-
-  public Collection<FSSchedulerApp> getApplications() {
-    return applications;
-  }
-
-  public void addApp(FSSchedulerApp app) {
-    applications.add(app);
-    AppSchedulable appSchedulable = new AppSchedulable(scheduler, app, this);
-    app.setAppSchedulable(appSchedulable);
-    queueSchedulable.addApp(appSchedulable);
-  }
-
-  public void removeApp(FSSchedulerApp app) {
-    applications.remove(app);
-    queueSchedulable.removeApp(app);
-  }
-
+  
-
-  public SchedulingMode getSchedulingMode() {
-    return schedulingMode;
+  
+  @Override
+  public String getQueueName() {
+    return name;
+  }
+  
+  @Override
+  public double getWeight() {
+    return queueMgr.getQueueWeight(getName());
+  }
+  
+  @Override
+  public Resource getMinShare() {
+    return queueMgr.getMinResources(getName());
-  public void setSchedulingMode(SchedulingMode schedulingMode) {
-    this.schedulingMode = schedulingMode;
+  @Override
+  public long getStartTime() {
+    return 0;
-  public FSQueueSchedulable getQueueSchedulable() {
-    return queueSchedulable;
+  @Override
+  public Priority getPriority() {
+    Priority p = recordFactory.newRecordInstance(Priority.class);
+    p.setPriority(1);
+    return p;
+  
+  @Override
+  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {
+    QueueInfo queueInfo = recordFactory.newRecordInstance(QueueInfo.class);
+    queueInfo.setQueueName(getQueueName());
+    // TODO: we might change these queue metrics around a little bit
+    // to match the semantics of the fair scheduler.
+    queueInfo.setCapacity((float) getFairShare().getMemory() /
+        scheduler.getClusterCapacity().getMemory());
+    queueInfo.setCapacity((float) getResourceUsage().getMemory() /
+        scheduler.getClusterCapacity().getMemory());
+    
+    ArrayList<QueueInfo> childQueueInfos = new ArrayList<QueueInfo>();
+    if (includeChildQueues) {
+      Collection<FSQueue> childQueues = getChildQueues();
+      for (FSQueue child : childQueues) {
+        childQueueInfos.add(child.getQueueInfo(recursive, recursive));
+      }
+    }
+    queueInfo.setChildQueues(childQueueInfos);
+    queueInfo.setQueueState(QueueState.RUNNING);
+    return queueInfo;
+  }
+  
+  @Override
+  public Map<QueueACL, AccessControlList> getQueueAcls() {
+    Map<QueueACL, AccessControlList> acls = queueMgr.getQueueAcls(getName());
+    return new HashMap<QueueACL, AccessControlList>(acls);
+  }
+  
+  @Override
+  public QueueMetrics getMetrics() {
+    return metrics;
+  }
+  
+  /**
+   * Recomputes the fair shares for all queues and applications
+   * under this queue.
+   */
+  public abstract void recomputeFairShares();
+  
+  /**
+   * Gets the children of this queue, if any.
+   */
+  public abstract Collection<FSQueue> getChildQueues();

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS83 INS83 INS42 INS43 INS43 INS23 MOV44 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS83 INS83 INS43 INS83 INS83 UPD43 UPD83 INS83 UPD43 INS83 INS83 INS43 INS59 INS44 INS44 MOV21 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS43 UPD42 INS78 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS74 INS42 INS78 UPD43 UPD42 INS29 INS83 INS83 INS39 INS42 INS29 INS83 INS83 UPD74 MOV74 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS41 INS42 INS41 INS42 INS42 INS42 INS41 INS42 UPD42 MOV42 INS60 INS21 INS41 INS42 INS42 INS39 INS42 INS39 INS42 MOV60 MOV21 MOV21 INS21 INS60 INS25 MOV21 INS21 MOV41 INS42 INS43 INS43 INS43 INS60 INS41 INS42 UPD42 INS65 INS65 UPD43 INS42 INS42 INS33 INS42 INS42 INS7 INS7 INS42 INS32 INS32 INS34 INS43 INS59 INS32 INS42 UPD43 INS32 UPD74 MOV74 INS59 INS42 INS8 INS32 UPD42 INS42 UPD42 MOV42 INS42 INS74 INS59 INS14 UPD42 INS66 INS66 INS66 UPD42 INS22 INS42 INS32 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS34 UPD42 UPD42 INS32 UPD42 UPD42 INS32 UPD42 UPD42 INS27 INS42 INS42 INS27 UPD43 INS42 INS14 INS60 INS70 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS52 INS42 UPD42 INS42 INS42 INS32 INS42 INS9 INS32 INS52 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS57 INS42 INS42 INS57 UPD42 MOV42 INS11 INS32 INS11 INS32 UPD42 INS74 UPD74 MOV74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS39 INS32 INS32 INS42 INS39 INS32 INS32 INS42 INS43 INS43 UPD43 INS42 INS32 UPD43 MOV43 UPD42 MOV42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL66 DEL65 DEL29 DEL42 DEL78 DEL42 DEL78 DEL83 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL14 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL52 DEL14 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL42 DEL52 DEL14 DEL83 DEL42 DEL43 DEL42 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21