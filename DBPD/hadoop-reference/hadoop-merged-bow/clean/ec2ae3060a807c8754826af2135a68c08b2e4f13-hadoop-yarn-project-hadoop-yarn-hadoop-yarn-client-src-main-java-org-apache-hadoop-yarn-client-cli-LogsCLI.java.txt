YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)

Change-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f

+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map.Entry;
+  private static final String SIZE_LIMIT_OPTION = "size_limit_mb";
+  private static final long LOG_SIZE_LIMIT_DEFAULT = 10240L;
+
+  private long logSizeLeft = LOG_SIZE_LIMIT_DEFAULT * 1024 * 1024;
+  private long specifedLogLimits = LOG_SIZE_LIMIT_DEFAULT;
+
+    boolean ignoreSizeLimit = false;
+      if (commandLine.hasOption(SIZE_LIMIT_OPTION)) {
+        specifedLogLimits = Long.parseLong(commandLine.getOptionValue(
+            SIZE_LIMIT_OPTION));
+        logSizeLeft = specifedLogLimits * 1024 * 1024;
+      }
+      if (logSizeLeft < 0L) {
+        ignoreSizeLimit = true;
+      }
+
-          logCliHelper, useRegex);
+          logCliHelper, useRegex, ignoreSizeLimit);
-      return fetchContainerLogs(request, logCliHelper, useRegex);
+      return fetchContainerLogs(request, logCliHelper, useRegex,
+          ignoreSizeLimit);
-        resultCode = fetchApplicationLogs(request, logCliHelper, useRegex);
+        resultCode = fetchApplicationLogs(request, logCliHelper, useRegex,
+            ignoreSizeLimit);
-      boolean useRegex) throws IOException {
+      boolean useRegex, boolean ignoreSizeLimit) throws IOException {
-    String nodeHttpAddress = request.getNodeHttpAddress();
-    if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
-      System.err.println("Can not get the logs for the container: "
-          + containerIdStr);
-      System.err.println("The node http address is required to get container "
-          + "logs for the Running application.");
-      return -1;
-    }
-      Set<String> matchedFiles = getMatchedContainerLogFiles(request,
-          useRegex);
-      if (matchedFiles.isEmpty()) {
-        System.err.println("Can not find any log file matching the pattern: "
-            + request.getLogTypes() + " for the container: " + containerIdStr
-            + " within the application: " + request.getAppId());
-        return -1;
-      }
-      ContainerLogsRequest newOptions = new ContainerLogsRequest(request);
-      newOptions.setLogTypes(matchedFiles);
-
-      for (String logFile : newOptions.getLogTypes()) {
+      for (String logFile : request.getLogTypes()) {
-  private int printContainerLogsForFinishedApplication(
-      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
-      boolean useRegex) throws IOException {
-    ContainerLogsRequest newOptions = getMatchedLogOptions(
-        request, logCliHelper, useRegex);
-    if (newOptions == null) {
-      System.err.println("Can not find any log file matching the pattern: "
-          + request.getLogTypes() + " for the container: "
-          + request.getContainerId() + " within the application: "
-          + request.getAppId());
-      return -1;
-    }
-    return logCliHelper.dumpAContainerLogsForLogType(newOptions);
-  }
-
-  private int printContainerLogsForFinishedApplicationWithoutNodeId(
-      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
-      boolean useRegex) throws IOException {
-    ContainerLogsRequest newOptions = getMatchedLogOptions(
-        request, logCliHelper, useRegex);
-    if (newOptions == null) {
-      System.err.println("Can not find any log file matching the pattern: "
-          + request.getLogTypes() + " for the container: "
-          + request.getContainerId() + " within the application: "
-          + request.getAppId());
-      return -1;
-    }
-    return logCliHelper.dumpAContainerLogsForLogTypeWithoutNodeId(
-        newOptions);
-  }
-
-  private int printAggregatedContainerLogs(ContainerLogsRequest request,
-      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException {
-    return printContainerLogsForFinishedApplication(request,
-        logCliHelper, useRegex);
-  }
-
-  private int printAggregatedContainerLogsWithoutNodeId(
-      ContainerLogsRequest request, LogCLIHelpers logCliHelper,
-      boolean useRegex) throws IOException {
-    return printContainerLogsForFinishedApplicationWithoutNodeId(request,
-        logCliHelper, useRegex);
-  }
-
-      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {
+      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)
+      throws Exception {
+    List<ContainerLogsRequest> candidates = new ArrayList<>();
-      for (ContainerLogsRequest amRequest : requests) {
-        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);
-      }
+      candidates.addAll(requests);
-          outputAMContainerLogs(requests.get(requests.size() - 1), conf,
-              logCliHelper, useRegex);
+          candidates.add(requests.get(requests.size() - 1));
-            outputAMContainerLogs(requests.get(amContainerId - 1), conf,
-                logCliHelper, useRegex);
+            candidates.add(requests.get(amContainerId - 1));
+    Map<String, ContainerLogsRequest> newOptions = new HashMap<>();
+    if (request.isAppFinished()) {
+      newOptions = getMatchedLogTypesForFinishedApp(candidates,
+          logCliHelper, useRegex, ignoreSizeLimit);
+    } else {
+      newOptions = getMatchedLogTypesForRunningApp(candidates, useRegex,
+          ignoreSizeLimit);
+    }
+    for (Entry<String, ContainerLogsRequest> amRequest
+        : newOptions.entrySet()) {
+      outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper,
+          useRegex, ignoreSizeLimit);
+    }
-      Configuration conf, LogCLIHelpers logCliHelper, boolean useRegex)
-      throws Exception {
+      Configuration conf, LogCLIHelpers logCliHelper, boolean useRegex,
+      boolean ignoreSizeLimit) throws Exception {
-          printContainerLogsForFinishedApplication(request,
-              logCliHelper, useRegex);
+          logCliHelper.dumpAContainerLogsForLogType(request);
-          printContainerLogsForFinishedApplicationWithoutNodeId(
-              request, logCliHelper, useRegex);
+          logCliHelper.dumpAContainerLogsForLogTypeWithoutNodeId(
+              request);
-            request, logCliHelper, useRegex);
+            request, logCliHelper, useRegex, ignoreSizeLimit);
+    opts.addOption(SIZE_LIMIT_OPTION, true, "Use this option to limit "
+        + "the size of the total logs which could be fetched. "
+        + "By default, we only allow to fetch at most "
+        + LOG_SIZE_LIMIT_DEFAULT + " MB logs. If the total log size is "
+        + "larger than the specified number, the CLI would fail. "
+        + "The user could specify -1 to ignore the size limit "
+        + "and fetch all logs.");
+    opts.getOption(SIZE_LIMIT_OPTION).setArgName("Size Limit");
+    printOpts.addOption(commandOpts.getOption(SIZE_LIMIT_OPTION));
-      boolean useRegex) throws Exception {
+      boolean useRegex, boolean ignoreSizeLimit) throws Exception {
-        logCliHelper, useRegex);
+        logCliHelper, useRegex, ignoreSizeLimit);
-      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,
-      ClientHandlerException, UniformInterfaceException, JSONException {
-    int resultCode = 0;
+      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)
+      throws IOException, ClientHandlerException, UniformInterfaceException,
+      JSONException {
+      ContainerLogsRequest newOptions = getMatchedLogOptions(
+          request, logCliHelper, useRegex, ignoreSizeLimit);
+      if (newOptions == null) {
+        System.err.println("Can not find any log file matching the pattern: "
+            + request.getLogTypes() + " for the container: "
+            + request.getContainerId() + " within the application: "
+            + request.getAppId());
+        return -1;
+      }
-        return printContainerLogsForFinishedApplication(
-            request, logCliHelper, useRegex);
+        return logCliHelper.dumpAContainerLogsForLogType(newOptions);
-        return printContainerLogsForFinishedApplicationWithoutNodeId(
-            request, logCliHelper, useRegex);
+        return logCliHelper.dumpAContainerLogsForLogTypeWithoutNodeId(
+            newOptions);
-        if (nodeAddress != null && !nodeAddress.isEmpty()) {
-          result = printAggregatedContainerLogs(request,
-              logCliHelper, useRegex);
+        ContainerLogsRequest newOptions = getMatchedLogOptions(
+                request, logCliHelper, useRegex, ignoreSizeLimit);
+        if (newOptions == null) {
+          System.err.println("Can not find any log file matching the pattern: "
+              + request.getLogTypes() + " for the container: "
+              + request.getContainerId() + " within the application: "
+              + request.getAppId());
-          result = printAggregatedContainerLogsWithoutNodeId(request,
-              logCliHelper,
-                  useRegex);
+          if (nodeAddress != null && !nodeAddress.isEmpty()) {
+            result = logCliHelper.dumpAContainerLogsForLogType(newOptions);
+          } else {
+            result = logCliHelper.dumpAContainerLogsForLogTypeWithoutNodeId(
+                newOptions);
+          }
-    resultCode = printContainerLogsFromRunningApplication(getConf(), request,
-        logCliHelper, useRegex);
-    return resultCode;
+    ContainerLogsRequest newRequest = getMatchedOptionForRunningApp(
+        request, useRegex, ignoreSizeLimit);
+    if (newRequest == null) {
+      return -1;
+    }
+    return printContainerLogsFromRunningApplication(getConf(), request,
+          logCliHelper, useRegex, ignoreSizeLimit);
-      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,
-      YarnException {
+      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)
+      throws IOException, YarnException {
-          options, logCliHelper, useRegex);
+          options, logCliHelper, useRegex, ignoreSizeLimit);
-      for (ContainerLogsRequest container : containerLogRequests) {
+
+      // get all matched container log types and check the total log size.
+      Map<String, ContainerLogsRequest> matchedLogTypes =
+          getMatchedLogTypesForRunningApp(containerLogRequests,
+              useRegex, ignoreSizeLimit);
+
+      for (Entry<String, ContainerLogsRequest> container
+          : matchedLogTypes.entrySet()) {
-            container, logCliHelper, useRegex);
+            container.getValue(), logCliHelper,
+            useRegex, ignoreSizeLimit);
-      boolean useRegex) throws IOException {
+      boolean useRegex, boolean ignoreSizeLimit) throws IOException {
-    if (request.getLogTypes() != null && !request.getLogTypes().isEmpty()) {
-      Set<String> matchedFiles = new HashSet<String>();
-      if (!request.getLogTypes().contains("ALL")) {
-        Set<String> files = logCliHelper.listContainerLogs(request);
-        matchedFiles = getMatchedLogFiles(request, files, useRegex);
-        if (matchedFiles.isEmpty()) {
-          return null;
-        }
-      }
+    Set<ContainerLogFileInfo> files = logCliHelper.listContainerLogs(
+        request);
+    Set<String> matchedFiles = getMatchedLogFiles(request, files,
+        useRegex, ignoreSizeLimit);
+    if (matchedFiles.isEmpty()) {
+      return null;
+    } else {
+      return newOptions;
-    return newOptions;
-      Collection<String> candidate, boolean useRegex) throws IOException {
+      Collection<ContainerLogFileInfo> candidate, boolean useRegex,
+      boolean ignoreSizeLimit) throws IOException {
-    if (options.getLogTypes().contains("ALL")) {
-      return new HashSet<String>(candidate);
-    }
-    for (String file : candidate) {
-      if (useRegex) {
-        if (isFileMatching(file, filePattern)) {
-          matchedFiles.add(file);
+    long size = options.getBytes();
+    boolean getAll = options.getLogTypes().contains("ALL");
+    Iterator<ContainerLogFileInfo> iterator = candidate.iterator();
+    while(iterator.hasNext()) {
+      boolean matchedFile = false;
+      ContainerLogFileInfo logInfo = iterator.next();
+      if (getAll) {
+        matchedFile = true;
+      } else if (useRegex) {
+        if (isFileMatching(logInfo.getFileName(), filePattern)) {
+          matchedFile = true;
-        if (filePattern.contains(file)) {
-          matchedFiles.add(file);
+        if (filePattern.contains(logInfo.getFileName())) {
+          matchedFile = true;
+        }
+      }
+      if (matchedFile) {
+        matchedFiles.add(logInfo.getFileName());
+        if (!ignoreSizeLimit) {
+          decrLogSizeLimit(Math.min(
+              Long.parseLong(logInfo.getFileSize()), size));
+          if (getLogSizeLimitLeft() < 0) {
+            throw new RuntimeException("The total log size is too large."
+                + "The log size limit is " + specifedLogLimits + "MB. "
+                + "Please specify a proper value --size option or if you "
+                + "really want to fetch all, please "
+                + "specify -1 for --size_limit_mb option.");
+          }
-      boolean useRegex) throws IOException {
+      boolean useRegex, boolean ignoreSizeLimit) throws IOException {
-    List<String> fileNames = new ArrayList<String>();
+    List<ContainerLogFileInfo> fileNames = new ArrayList<
+        ContainerLogFileInfo>();
-      fileNames.add(fileInfo.getKey().getFileName());
+      fileNames.add(fileInfo.getKey());
-        useRegex);
+        useRegex, ignoreSizeLimit);
+
+  private long getLogSizeLimitLeft() {
+    return this.logSizeLeft;
+  }
+
+  private void decrLogSizeLimit(long used) {
+    this.logSizeLeft -= used;
+  }
+
+  @Private
+  @VisibleForTesting
+  public ContainerLogsRequest getMatchedOptionForRunningApp(
+      ContainerLogsRequest container, boolean useRegex,
+      boolean ignoreSizeLimit) throws IOException {
+    String containerIdStr = container.getContainerId().toString();
+    String nodeHttpAddress = container.getNodeHttpAddress();
+    if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
+      System.err.println("Can not get the logs for the container: "
+          + containerIdStr);
+      System.err.println("The node http address is required to get container "
+          + "logs for the Running application.");
+      return null;
+    }
+
+    Set<String> matchedFiles = getMatchedContainerLogFiles(container,
+        useRegex, ignoreSizeLimit);
+    if (matchedFiles.isEmpty()) {
+      System.err.println("Can not find any log file matching the pattern: "
+          + container.getLogTypes() + " for the container: " + containerIdStr
+          + " within the application: " + container.getAppId());
+      return null;
+    }
+    container.setLogTypes(matchedFiles);
+    return container;
+  }
+
+  @Private
+  @VisibleForTesting
+  public Map<String, ContainerLogsRequest> getMatchedLogTypesForRunningApp(
+      List<ContainerLogsRequest> containerLogRequests, boolean useRegex,
+      boolean ignoreSizeLimit) {
+    Map<String, ContainerLogsRequest> containerMatchedLog = new HashMap<>();
+    for (ContainerLogsRequest container : containerLogRequests) {
+      try {
+        ContainerLogsRequest request = getMatchedOptionForRunningApp(
+            container, useRegex, ignoreSizeLimit);
+        if (request == null) {
+          continue;
+        }
+        containerMatchedLog.put(container.getContainerId(), request);
+      } catch(IOException ex) {
+        System.err.println(ex);
+        continue;
+      }
+    }
+    return containerMatchedLog;
+  }
+
+  private Map<String, ContainerLogsRequest> getMatchedLogTypesForFinishedApp(
+      List<ContainerLogsRequest> containerLogRequests,
+      LogCLIHelpers logCliHelper, boolean useRegex,
+      boolean ignoreSizeLimit) {
+    Map<String, ContainerLogsRequest> containerMatchedLog = new HashMap<>();
+    for (ContainerLogsRequest container : containerLogRequests) {
+      try {
+        ContainerLogsRequest request = getMatchedLogOptions(container,
+            logCliHelper, useRegex, ignoreSizeLimit);
+        if (request == null) {
+          System.err.println("Can not find any log file matching the pattern: "
+              + container.getLogTypes() + " for the container: "
+              + container.getContainerId() + " within the application: "
+              + container.getAppId());
+          continue;
+        }
+        containerMatchedLog.put(container.getContainerId(), request);
+      } catch (IOException ex) {
+        System.err.println(ex);
+        continue;
+      }
+    }
+    return containerMatchedLog;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS44 INS44 INS44 INS44 INS44 INS44 INS44 MOV8 INS83 MOV74 INS42 MOV44 MOV44 MOV44 INS44 MOV43 INS8 INS44 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS83 INS43 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS78 INS78 UPD83 MOV83 INS74 INS42 MOV44 MOV44 INS44 INS8 MOV83 INS74 INS42 INS44 MOV44 MOV44 INS44 MOV8 INS42 INS42 INS45 INS42 INS34 INS42 INS27 INS42 INS42 INS60 INS39 INS42 INS39 INS42 INS60 INS60 INS25 INS70 INS39 INS42 INS21 INS21 INS21 INS39 INS42 INS39 INS42 INS25 INS60 INS25 INS41 INS39 INS42 INS39 INS42 MOV60 INS60 UPD74 INS39 INS42 MOV60 MOV60 INS60 INS60 INS60 INS61 MOV41 INS39 INS42 INS41 INS39 INS42 INS21 INS42 INS42 MOV42 UPD43 UPD42 UPD42 INS60 INS60 MOV25 MOV60 MOV25 INS21 INS41 INS42 INS42 INS43 MOV43 INS43 INS74 INS42 INS39 INS42 INS60 INS70 INS41 INS43 INS43 INS43 INS74 INS42 INS39 INS42 INS60 INS41 INS42 INS34 INS34 INS39 INS59 INS74 INS59 INS74 INS59 INS32 INS8 INS8 INS44 INS32 INS8 INS32 INS32 INS32 MOV42 MOV8 MOV43 INS59 INS27 INS8 INS32 INS74 MOV74 INS59 INS8 UPD43 INS39 INS59 INS39 INS59 INS74 INS59 INS32 INS8 UPD74 INS22 INS7 UPD42 MOV43 INS59 INS43 INS59 MOV74 MOV32 INS32 INS42 INS42 MOV42 INS43 INS43 INS74 INS59 MOV44 INS42 INS8 INS42 INS42 INS42 MOV42 INS43 INS43 INS74 INS59 UPD42 INS42 INS42 INS9 INS25 INS25 INS43 INS43 INS42 INS14 MOV21 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS21 INS21 INS74 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS9 INS27 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS25 INS42 INS32 INS42 INS33 MOV41 MOV42 MOV32 MOV42 MOV42 MOV42 INS42 INS60 INS43 INS43 INS42 INS32 MOV21 MOV41 UPD42 INS42 INS32 INS42 MOV32 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS25 INS43 INS42 INS52 INS42 INS22 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS43 MOV43 INS43 INS42 INS14 INS54 INS42 INS42 UPD43 MOV43 MOV43 INS43 INS42 INS14 INS43 INS42 INS54 INS32 INS8 INS27 INS8 MOV32 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS7 INS7 INS43 INS43 INS43 INS32 INS27 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV27 INS8 INS8 UPD42 MOV42 MOV42 MOV42 INS42 INS74 INS59 INS44 INS32 INS42 INS42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS42 INS8 INS25 INS42 INS8 INS42 UPD74 MOV32 MOV32 INS52 INS42 INS32 INS42 INS42 INS42 INS33 UPD42 UPD42 INS42 INS33 INS42 MOV42 INS74 INS8 INS12 UPD42 INS42 INS74 INS42 INS8 INS12 INS42 INS42 INS42 INS21 INS21 INS42 INS34 INS21 INS42 INS42 MOV42 INS43 UPD42 UPD42 UPD42 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS45 MOV41 MOV41 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS21 INS42 INS8 INS8 INS21 INS25 INS43 UPD42 INS42 INS42 INS42 INS43 INS60 INS25 INS21 INS44 INS8 INS43 INS60 INS25 INS21 INS44 INS8 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS7 INS25 INS25 INS32 INS38 INS8 INS42 INS42 UPD42 MOV42 INS43 INS59 INS27 INS8 INS32 MOV43 INS42 INS21 INS18 INS42 INS43 INS59 INS27 MOV8 INS32 MOV43 INS42 MOV21 INS18 INS42 INS32 INS42 INS27 INS42 INS9 INS42 MOV43 INS59 INS27 MOV8 INS8 INS42 INS42 INS42 INS42 INS9 INS32 INS8 INS32 INS8 INS42 INS42 INS32 INS42 INS21 INS25 UPD42 UPD42 INS42 INS42 INS32 INS42 INS33 INS18 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS18 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS34 INS34 INS42 MOV32 INS42 INS32 INS42 INS33 MOV25 INS32 INS42 INS42 INS32 INS42 INS21 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS27 INS8 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS40 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS32 INS32 INS34 INS53 INS40 INS42 INS27 MOV32 INS42 INS9 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS14 INS45 INS32 INS45 INS32 INS45 INS32 UPD42 UPD42 INS32 INS42 INS42 INS32 INS43 INS27 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS45 INS45 INS45 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS45 INS45 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL31 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL42 DEL42 DEL32 DEL7 DEL21 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL38 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL83 DEL42 DEL31 DEL42 DEL42 DEL32 DEL34 DEL38 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL38 DEL43 DEL42 DEL74 DEL42 DEL14 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL25 DEL8 DEL32 DEL8 DEL25 DEL8 DEL25