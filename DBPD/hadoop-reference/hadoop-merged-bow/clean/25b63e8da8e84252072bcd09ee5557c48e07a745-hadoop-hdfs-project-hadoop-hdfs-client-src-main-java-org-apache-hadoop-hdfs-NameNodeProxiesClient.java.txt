HDFS-13749. [SBN read] Use getServiceStatus to discover observer namenodes. Contributed by Chao Sun.

+import java.util.concurrent.TimeUnit;
+import org.apache.hadoop.ha.HAServiceProtocol;
+import org.apache.hadoop.ha.protocolPB.HAServiceProtocolClientSideTranslatorPB;
+import org.apache.hadoop.ipc.Client;
- * Create proxy objects with {@link ClientProtocol} to communicate with a remote
- * NN. Generally use {@link NameNodeProxiesClient#createProxyWithClientProtocol(
+ * Create proxy objects with {@link ClientProtocol} and
+ * {@link HAServiceProtocol} to communicate with a remote NN. For the former,
+ * generally use {@link NameNodeProxiesClient#createProxyWithClientProtocol(
+  /** Maximum # of retries for HAProxy with HAServiceProtocol. */
+  private static final int MAX_RETRIES = 3;
+  /** Initial retry delay for HAProxy with HAServiceProtocol. */
+  private static final int DELAY_MILLISECONDS = 200;
+
+  /**
+   * Creates a non-HA proxy object with {@link HAServiceProtocol} to the
+   * given NameNode address, using the provided configuration. The proxy will
+   * use the RPC timeout configuration specified via {@link
+   * org.apache.hadoop.fs.CommonConfigurationKeys#IPC_CLIENT_RPC_TIMEOUT_KEY}.
+   * Upon failures, this will retry up to certain times with {@link RetryProxy}.
+   *
+   * @param address the NameNode address
+   * @param conf the configuration to be used
+   * @return a non-HA proxy with {@link HAServiceProtocol}.
+   */
+  public static HAServiceProtocol createNonHAProxyWithHAServiceProtocol(
+      InetSocketAddress address, Configuration conf) throws IOException {
+    RetryPolicy timeoutPolicy = RetryPolicies.exponentialBackoffRetry(
+        MAX_RETRIES, DELAY_MILLISECONDS, TimeUnit.MILLISECONDS);
+
+    HAServiceProtocol proxy =
+        new HAServiceProtocolClientSideTranslatorPB(
+            address, conf, NetUtils.getDefaultSocketFactory(conf),
+            Client.getRpcTimeout(conf));
+    return (HAServiceProtocol) RetryProxy.create(
+        HAServiceProtocol.class,
+        new DefaultFailoverProxyProvider<>(HAServiceProtocol.class, proxy),
+        new HashMap<>(),
+        timeoutPolicy
+    );
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS66 INS65 UPD66 UPD66 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS41 INS42 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS11 INS42 INS67 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS57 INS14 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS57 INS42 INS74 INS42 INS43 INS43 INS43 INS42 INS42 INS42