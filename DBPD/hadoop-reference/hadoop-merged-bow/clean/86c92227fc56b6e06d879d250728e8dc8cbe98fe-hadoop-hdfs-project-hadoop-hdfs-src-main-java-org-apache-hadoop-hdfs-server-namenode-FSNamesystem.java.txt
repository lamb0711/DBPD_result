HDFS-4015. Safemode should count and report orphaned blocks. (Contributed by Anu Engineer)

+    stats[ClientProtocol.GET_STATS_BYTES_IN_FUTURE_BLOCKS_IDX] =
+        blockManager.getBytesInFuture();
+     * @param force - true to force exit
-    private synchronized void leave() {
+    private synchronized void leave(boolean force) {
+
+
+      if (!force && (blockManager.getBytesInFuture() > 0)) {
+        LOG.error("Refusing to leave safe mode without a force flag. " +
+            "Exiting safe mode will cause a deletion of " + blockManager
+            .getBytesInFuture() + " byte(s). Please use " +
+            "-forceExit flag to exit safe mode forcefully if data loss is " +
+            "acceptable.");
+        return;
+      }
+
-        this.leave(); // leave safe mode
+        this.leave(false); // leave safe mode
+
+      if(blockManager.getBytesInFuture() > 0) {
+        msg += "Name node detected blocks with generation stamps " +
+            "in future. This means that Name node metadata is inconsistent." +
+            "This can happen if Name node metadata files have been manually " +
+            "replaced. Exiting safe mode will cause loss of " + blockManager
+            .getBytesInFuture() + " byte(s). Please restart name node with " +
+            "right metadata or use \"hdfs dfsadmin -safemode forceExit" +
+            "if you are certain that the NameNode was started with the" +
+            "correct FsImage and edit logs. If you encountered this during" +
+            "a rollback, it is safe to exit with -safemode forceExit.";
+        return msg;
+      }
+
+
-            safeMode.leave();
+            safeMode.leave(false);
+        if (blockManager.getBytesInFuture() > 0) {
+          LOG.error("Refusing to leave safe mode without a force flag. " +
+              "Exiting safe mode will cause a deletion of " + blockManager
+              .getBytesInFuture() + " byte(s). Please use " +
+              "-forceExit flag to exit safe mode forcefully and data loss is " +
+              "acceptable.");
+          return isInSafeMode();
+        }
+      case SAFEMODE_FORCE_EXIT:
+        if (blockManager.getBytesInFuture() > 0) {
+          LOG.warn("Leaving safe mode due to forceExit. This will cause a data "
+              + "loss of " + blockManager.getBytesInFuture() + " byte(s).");
+          safeMode.leave(true);
+          blockManager.clearBytesInFuture();
+        } else {
+          LOG.warn("forceExit used when normal exist would suffice. Treating " +
+              "force exit as normal safe mode exit.");
+        }
+        leaveSafeMode();
+        break;
-      safeMode.leave();
+      safeMode.leave(false);
+
+  /**
+   * Gets number of bytes in the blocks in future generation stamps.
+   *
+   * @return number of bytes that can be deleted if exited from safe mode.
+   */
+  public long getBytesInFuture() {
+    return blockManager.getBytesInFuture();
+  }
+
+  @VisibleForTesting
+  synchronized void enableSafeModeForTesting(Configuration conf) {
+    SafeModeInfo newSafemode = new SafeModeInfo(conf);
+    newSafemode.enter();
+    this.safeMode = newSafemode;
+  }

INS31 INS31 INS29 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS21 INS44 INS65 INS65 INS41 INS42 INS43 INS42 INS60 INS21 INS21 INS7 INS65 INS39 INS42 INS25 INS25 INS66 INS66 INS32 INS42 INS43 INS59 INS32 INS7 INS2 INS32 INS42 INS66 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS22 INS42 INS42 INS40 INS42 INS42 INS38 INS36 INS21 INS41 INS32 INS34 INS21 INS41 INS25 INS25 INS21 INS10 INS49 INS43 INS42 INS52 INS42 INS42 INS27 INS32 INS42 INS42 INS7 INS42 INS27 INS8 INS42 INS27 INS8 INS8 INS32 INS9 INS42 INS32 INS34 INS42 INS42 INS27 INS9 INS42 INS27 INS32 INS34 INS21 INS41 INS32 INS34 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS27 INS32 INS45 INS45 INS45 INS27 INS32 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS45 INS45 INS42 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS27 INS27 INS32 INS45 INS45 INS45 INS27 INS32 INS45 INS45 INS45 INS9 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42