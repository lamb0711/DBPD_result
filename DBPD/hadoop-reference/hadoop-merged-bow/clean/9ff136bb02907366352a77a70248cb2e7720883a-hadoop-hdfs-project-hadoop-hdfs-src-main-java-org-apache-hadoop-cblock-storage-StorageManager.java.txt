HDFS-12210. Block Storage: volume creation times out while creating 3TB volume because of too many containers. Contributed by Mukul Kumar Singh.

+import org.apache.hadoop.cblock.CBlockConfigKeys;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.atomic.AtomicInteger;
- * to a volume, containing information for IO on that volume.
- *
- * and a storage client responsible for talking to the SCM
- *
- * TODO : all the volume operations are fully serialized, which can potentially
- * be optimized.
- *
- * TODO : if the certain operations (e.g. create) failed, the failure-handling
- * logic may not be properly implemented currently.
+ * to a volume, containing information for IO on that volume and a storage
+ * client responsible for talking to the SCM.
+  private final int numThreads;
+  private static final int MAX_THREADS =
+      Runtime.getRuntime().availableProcessors() * 2;
+  private static final int MAX_QUEUE_CAPACITY = 1024;
+
+    this.numThreads =
+        ozoneConfig.getInt(CBlockConfigKeys.DFS_CBLOCK_MANAGER_POOL_SIZE,
+            CBlockConfigKeys.DFS_CBLOCK_MANAGER_POOL_SIZE_DEFAULT);
+  private class CreateContainerTask implements Runnable {
+    private final VolumeDescriptor volume;
+    private final int containerIdx;
+    private final ArrayList<String> containerIds;
+    private final AtomicInteger numFailed;
+
+    CreateContainerTask(VolumeDescriptor volume, int containerIdx,
+                        ArrayList<String> containerIds,
+                        AtomicInteger numFailed) {
+      this.volume = volume;
+      this.containerIdx = containerIdx;
+      this.containerIds = containerIds;
+      this.numFailed = numFailed;
+    }
+
+    /**
+     * When an object implementing interface <code>Runnable</code> is used
+     * to create a thread, starting the thread causes the object's
+     * <code>run</code> method to be called in that separately executing
+     * thread.
+     * <p>
+     * The general contract of the method <code>run</code> is that it may
+     * take any action whatsoever.
+     *
+     * @see Thread#run()
+     */
+    public void run() {
+      ContainerDescriptor container = null;
+      try {
+        Pipeline pipeline = storageClient.createContainer(
+            OzoneProtos.ReplicationType.STAND_ALONE,
+            OzoneProtos.ReplicationFactor.ONE,
+            KeyUtil.getContainerName(volume.getUserName(),
+                volume.getVolumeName(), containerIdx));
+
+        container = new ContainerDescriptor(pipeline.getContainerName());
+
+        container.setPipeline(pipeline);
+        container.setContainerIndex(containerIdx);
+        volume.addContainer(container);
+        containerIds.set(containerIdx, container.getContainerID());
+      } catch (Exception e) {
+        numFailed.incrementAndGet();
+        if (container != null) {
+          LOGGER.error("Error creating container Container:{}:" +
+              " index:{} error:{}", container.getContainerID(),
+              containerIdx, e);
+        }
+      }
+    }
+  }
+
+  private boolean createVolumeContainers(VolumeDescriptor volume) {
+    ArrayList<String> containerIds = new ArrayList<>();
+    ThreadPoolExecutor executor = new ThreadPoolExecutor(numThreads,
+        MAX_THREADS, 1, TimeUnit.SECONDS,
+        new ArrayBlockingQueue<>(MAX_QUEUE_CAPACITY),
+        new ThreadPoolExecutor.CallerRunsPolicy());
+
+    AtomicInteger numFailedCreates = new AtomicInteger(0);
+    long allocatedSize = 0;
+    int containerIdx = 0;
+    while (allocatedSize < volume.getVolumeSize()) {
+      // adding null to allocate space in ArrayList
+      containerIds.add(containerIdx, null);
+      Runnable task = new CreateContainerTask(volume, containerIdx,
+          containerIds, numFailedCreates);
+      executor.submit(task);
+      allocatedSize += containerSizeB;
+      containerIdx += 1;
+    }
+
+    // issue the command and then wait for it to finish
+    executor.shutdown();
+    try {
+      executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MINUTES);
+    } catch (InterruptedException e) {
+      LOGGER.error("Error creating volume:{} error:{}",
+          volume.getVolumeName(), e);
+      executor.shutdownNow();
+      Thread.currentThread().interrupt();
+    }
+
+    volume.setContainerIDs(containerIds);
+    return numFailedCreates.get() == 0;
+  }
+
+  private void deleteContainer(String containerID, boolean force) {
+    try {
+      Pipeline pipeline = storageClient.getContainer(containerID);
+      storageClient.deleteContainer(pipeline, force);
+    } catch (Exception e) {
+      LOGGER.error("Error deleting container Container:{} error:{}",
+          containerID, e);
+    }
+  }
+
+  private void deleteVolumeContainers(List<String> containers, boolean force)
+      throws CBlockException {
+    ThreadPoolExecutor executor = new ThreadPoolExecutor(numThreads,
+        MAX_THREADS, 1, TimeUnit.SECONDS,
+        new ArrayBlockingQueue<>(MAX_QUEUE_CAPACITY),
+        new ThreadPoolExecutor.CallerRunsPolicy());
+
+    for (String deleteContainer : containers) {
+      if (deleteContainer != null) {
+        Runnable task = () -> deleteContainer(deleteContainer, force);
+        executor.submit(task);
+      }
+    }
+
+    // issue the command and then wait for it to finish
+    executor.shutdown();
+    try {
+      executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MINUTES);
+    } catch (InterruptedException e) {
+      LOGGER.error("Error deleting containers error:{}", e);
+      executor.shutdownNow();
+      Thread.currentThread().interrupt();
+    }
+  }
-    VolumeDescriptor volume;
-    int containerIdx = 0;
-    try {
-      volume = new VolumeDescriptor(userName, volumeName,
-          volumeSize, blockSize);
-      long allocatedSize = 0;
-      ArrayList<String> containerIds = new ArrayList<>();
-      while (allocatedSize < volumeSize) {
-        Pipeline pipeline = storageClient.createContainer(OzoneProtos
-                .ReplicationType.STAND_ALONE,
-            OzoneProtos.ReplicationFactor.ONE,
-            KeyUtil.getContainerName(userName, volumeName, containerIdx));
-        ContainerDescriptor container =
-            new ContainerDescriptor(pipeline.getContainerName());
-        container.setPipeline(pipeline);
-        container.setContainerIndex(containerIdx);
-        volume.addContainer(container);
-        containerIds.add(container.getContainerID());
-        allocatedSize += containerSizeB;
-        containerIdx += 1;
-      }
-      volume.setContainerIDs(containerIds);
-    } catch (IOException e) {
-      throw new CBlockException("Error when creating volume:" + e.getMessage());
-      // TODO : delete already created containers? or re-try policy
+    VolumeDescriptor volume
+        = new VolumeDescriptor(userName, volumeName, volumeSize, blockSize);
+    boolean success = createVolumeContainers(volume);
+    if (!success) {
+      // cleanup the containers and throw the exception
+      deleteVolumeContainers(volume.getContainerIDsList(), true);
+      throw new CBlockException("Error when creating volume:" + volumeName);
-    for (String containerID : volume.getContainerIDsList()) {
-      try {
-        Pipeline pipeline = storageClient.getContainer(containerID);
-        storageClient.deleteContainer(pipeline, force);
-      } catch (IOException e) {
-        LOGGER.error("Error deleting container Container:{} error:{}",
-            containerID, e);
-        throw new CBlockException(e.getMessage());
-      }
-    }
+    deleteVolumeContainers(volume.getContainerIDsList(), force);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS29 INS83 INS42 INS23 INS23 INS23 INS55 INS31 INS31 INS31 INS65 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 MOV44 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 MOV66 MOV66 MOV66 UPD66 MOV66 UPD66 MOV66 INS42 INS42 INS27 INS42 INS34 INS21 INS42 INS83 INS83 MOV43 MOV59 INS83 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS43 INS42 MOV60 INS60 INS60 MOV60 MOV60 INS61 INS21 INS54 MOV21 INS41 INS39 INS42 INS74 INS42 INS39 INS42 INS60 INS70 INS21 INS54 INS60 MOV60 INS25 INS21 INS32 INS34 INS7 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS60 INS54 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS8 INS12 INS27 INS43 INS43 INS43 INS59 INS44 INS42 INS8 INS32 INS8 INS12 INS43 INS59 INS39 INS38 INS8 INS32 INS32 INS42 INS22 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS7 INS7 INS7 INS7 INS66 UPD66 MOV66 INS66 UPD66 MOV66 INS66 UPD66 MOV66 UPD66 MOV66 INS68 MOV43 INS59 INS8 INS12 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS32 INS21 INS60 INS21 MOV21 MOV21 INS42 INS42 INS21 INS44 INS8 INS32 INS34 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS21 INS44 INS8 INS42 INS42 MOV14 UPD42 INS42 MOV21 INS53 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS33 INS60 INS21 MOV21 MOV21 MOV21 INS21 INS44 INS8 INS43 INS42 INS42 INS34 INS40 INS14 INS14 INS43 INS34 INS42 INS42 INS32 INS43 INS59 INS32 INS32 INS43 INS42 INS21 INS21 INS21 INS42 INS42 UPD43 INS43 INS42 INS42 INS34 INS40 INS14 INS14 INS42 INS27 INS8 INS32 INS43 INS42 INS21 INS21 INS21 UPD42 UPD42 MOV42 INS14 MOV42 MOV42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV43 INS59 INS7 INS32 INS43 INS42 INS21 INS25 INS42 INS74 INS42 INS43 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS32 INS32 INS32 UPD42 INS42 INS74 INS42 INS43 INS42 INS33 INS60 INS21 INS42 INS42 INS40 INS40 INS42 INS32 INS32 INS32 UPD42 MOV32 INS9 MOV43 MOV27 INS42 INS32 INS42 MOV14 INS42 INS42 INS42 INS32 INS42 INS32 INS27 INS8 INS43 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS40 INS43 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 MOV32 INS42 INS42 INS42 INS42 INS42 INS45 INS45 DEL65 DEL29 DEL83 DEL42 DEL42 DEL42 DEL32 DEL14 DEL53 DEL42 DEL40 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL59 DEL60 DEL8 DEL61 DEL8 DEL43 DEL42 DEL44 DEL14 DEL53 DEL8 DEL12 DEL54 DEL70