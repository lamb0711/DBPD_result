HDFS-6911. Archival Storage: check if a block is already scheduled in Mover. Contributed by Tsz Wo Nicholas Sze.

-  private static final Path MOVER_ID_PATH = new Path("/system/mover.id");
+  static final Path MOVER_ID_PATH = new Path("/system/mover.id");
-  
-  private ExitStatus run() {
-    try {
-      final List<DatanodeStorageReport> reports = dispatcher.init();
-      for(DatanodeStorageReport r : reports) {
-        final DDatanode dn = dispatcher.newDatanode(r.getDatanodeInfo());
-        for(StorageType t : StorageType.asList()) {
-          final long maxRemaining = getMaxRemaining(r, t);
-          if (maxRemaining > 0L) {
-            final Source source = dn.addSource(t, Long.MAX_VALUE, dispatcher); 
-            final StorageGroup target = dn.addTarget(t, maxRemaining);
-            storages.add(source, target);
-          }
+
+  void init() throws IOException {
+    final List<DatanodeStorageReport> reports = dispatcher.init();
+    for(DatanodeStorageReport r : reports) {
+      final DDatanode dn = dispatcher.newDatanode(r.getDatanodeInfo());
+      for(StorageType t : StorageType.asList()) {
+        final long maxRemaining = getMaxRemaining(r, t);
+        if (maxRemaining > 0L) {
+          final Source source = dn.addSource(t, Long.MAX_VALUE, dispatcher); 
+          final StorageGroup target = dn.addTarget(t, maxRemaining);
+          storages.add(source, target);
+    }
+  }
+  private ExitStatus run() {
+    try {
+      init();
+  DBlock newDBlock(Block block, List<MLocation> locations) {
+    final DBlock db = new DBlock(block);
+    for(MLocation ml : locations) {
+      db.addLocation(storages.getTarget(ml));
+    }
+    return db;
+  }
+
-  private class Processor {
+  class Processor {
-    private Processor() {
+    Processor() {
-    
+
-      
-      final DBlock db = new DBlock(lb.getBlock().getLocalBlock());
-      for(MLocation ml : locations) {
-        db.addLocation(storages.getTarget(ml));
-      }
+      final DBlock db = newDBlock(lb.getBlock().getLocalBlock(), locations);
+              return;
+    boolean scheduleMoveReplica(DBlock db, MLocation ml,
+        List<StorageType> targetTypes) {
+      return scheduleMoveReplica(db, ml, storages.getSource(ml), targetTypes);
+    }
+
-          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())
-              && dispatcher.isGoodBlockCandidate(source, target, t, db)) {
-            final PendingMove pm = dispatcher.new PendingMove(db, source, target);
-            if (pm.chooseProxySource()) {
+          if (matcher.match(cluster, ml.datanode, target.getDatanodeInfo())) {
+            final PendingMove pm = source.addPendingMove(db, target);
+            if (pm != null) {
-              target.incScheduledSize(ml.size);

INS31 INS31 INS39 INS42 INS43 MOV8 INS83 MOV43 INS42 MOV8 INS43 INS42 INS44 INS44 INS8 INS31 INS42 INS42 INS43 INS42 INS74 INS42 INS60 MOV70 INS41 INS39 INS42 INS44 INS44 INS44 INS8 INS8 INS42 INS43 INS43 INS83 MOV43 INS59 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS41 INS21 MOV21 MOV41 INS42 INS42 INS42 INS14 MOV43 INS42 INS42 INS43 INS43 INS32 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 MOV32 MOV43 INS27 INS41 INS32 INS42 INS33 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL42 DEL83 DEL83 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21