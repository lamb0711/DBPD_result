YARN-8706. Updated docker container stop logic to avoid double kill.
           Contributed by Chandni Singh

-import org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker.DockerStopCommand;
-  private int dockerStopGracePeriod;
-    dockerStopGracePeriod = conf.getInt(
-        YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,
-        YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);
-
-        String containerId = ctx.getContainer().getContainerId().toString();
+        ContainerId containerId = ctx.getContainer().getContainerId();
-      String commandFile = dockerClient.writeCommandToTempFile(inspectCommand,
-          containerId, nmContext);
-      PrivilegedOperation privOp = new PrivilegedOperation(
-          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);
-      privOp.appendArgs(commandFile);
-      String output = privilegedOperationExecutor
-          .executePrivilegedOperation(null, privOp, null,
-              null, true, false);
+      String output = executeDockerInspect(containerId, inspectCommand);
-  private void handleContainerStop(String containerId, Map<String, String> env)
+  /**
+   * Handles a docker container stop by first finding the {@code STOPSIGNAL}
+   * using docker inspect and then executing
+   * {@code docker kill --signal=<STOPSIGNAL>}.
+   * It doesn't rely on the docker stop because that sends a {@code SIGKILL}
+   * to the root process in the container after the {@code STOPSIGNAL}.The grace
+   * period which the docker stop uses has granularity in seconds. However, NM
+   * is designed to explicitly send a {@code SIGKILL} to the containers after a
+   * grace period which has a granularity of millis. It doesn't want the docker
+   * stop to send {@code SIGKILL} but docker stop has no option to disallow
+   * that.
+   *
+   * @param containerId container id
+   * @param env         env
+   * @throws ContainerExecutionException
+   */
+  private void handleContainerStop(ContainerId containerId,
+      Map<String, String> env)
+
-        DockerCommandExecutor.getContainerStatus(containerId,
-            privilegedOperationExecutor, nmContext);
-    if (DockerCommandExecutor.isStoppable(containerStatus)) {
-      DockerStopCommand dockerStopCommand = new DockerStopCommand(
-          containerId).setGracePeriod(dockerStopGracePeriod);
-      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,
-          env, privilegedOperationExecutor, false, nmContext);
-    } else {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug(
-            "Container status is " + containerStatus.getName()
-                + ", skipping stop - " + containerId);
+        DockerCommandExecutor.DockerContainerStatus.UNKNOWN;
+    String stopSignal = ContainerExecutor.Signal.TERM.toString();
+    char delimiter = ',';
+    DockerInspectCommand inspectCommand =
+        new DockerInspectCommand(containerId.toString()).get(new String[] {
+            DockerInspectCommand.STATUS_TEMPLATE,
+            DockerInspectCommand.STOPSIGNAL_TEMPLATE}, delimiter);
+    try {
+      String output = executeDockerInspect(containerId, inspectCommand);
+
+      if (!output.isEmpty()) {
+        String[] statusAndSignal = StringUtils.split(output, delimiter);
+        containerStatus = DockerCommandExecutor.parseContainerStatus(
+            statusAndSignal[0]);
+        if (statusAndSignal.length > 1) {
+          stopSignal = statusAndSignal[1];
+        }
+    } catch (ContainerExecutionException | PrivilegedOperationException e) {
+      LOG.debug("{} inspect failed, skipping stop", containerId, e);
+      return;
+
+    if (DockerCommandExecutor.isStoppable(containerStatus)) {
+
+      DockerKillCommand dockerStopCommand = new DockerKillCommand(
+          containerId.toString()).setSignal(stopSignal);
+      DockerCommandExecutor.executeDockerCommand(dockerStopCommand,
+          containerId.toString(), env, privilegedOperationExecutor, false,
+          nmContext);
+    } else {
+      LOG.debug("{} status is {}, skipping stop", containerId, containerStatus);
+    }
+  }
+
+  private String executeDockerInspect(ContainerId containerId,
+      DockerInspectCommand inspectCommand) throws ContainerExecutionException,
+      PrivilegedOperationException {
+    String commandFile = dockerClient.writeCommandToTempFile(inspectCommand,
+        containerId, nmContext);
+    PrivilegedOperation privOp = new PrivilegedOperation(
+        PrivilegedOperation.OperationType.RUN_DOCKER_CMD);
+    privOp.appendArgs(commandFile);
+    String output = privilegedOperationExecutor.executePrivilegedOperation(null,
+        privOp, null, null, true, false);
+    LOG.info("{} : docker inspect output {} ", containerId, output);
+    return output;

INS31 INS31 INS29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS43 INS60 INS60 INS60 MOV60 INS54 INS25 INS42 INS43 INS42 INS43 INS42 INS42 INS42 MOV60 MOV60 MOV21 MOV60 MOV21 INS41 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 MOV43 INS59 MOV43 INS59 INS39 INS59 INS43 INS8 INS12 MOV32 MOV8 INS8 INS42 INS42 INS42 INS60 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS40 INS42 INS32 INS42 INS13 INS42 UPD42 INS60 INS25 INS44 INS8 INS21 UPD42 INS45 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS40 INS42 INS14 UPD42 INS3 INS42 INS43 INS59 INS38 INS8 INS84 INS42 INS21 INS41 UPD43 INS32 INS42 INS32 INS43 INS32 INS5 INS4 INS42 INS42 INS32 INS32 INS60 INS21 INS25 INS43 INS43 INS32 UPD42 INS32 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS85 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS5 INS59 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS43 INS42 INS43 INS85 INS42 INS32 INS42 INS32 INS40 INS34 INS21 UPD43 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS7 UPD42 INS42 INS42 INS42 INS34 INS42 INS2 INS42 INS34 DEL40 DEL26 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL45 DEL42 DEL27 DEL32 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31