HDFS-12636. Ozone: OzoneFileSystem: Implement seek functionality for rpc client. Contributed by Lokesh Jain.

-import java.io.File;
-import java.text.ParseException;
+import java.util.Iterator;
-import org.apache.hadoop.fs.LocalDirAllocator;
-import org.apache.hadoop.ozone.web.client.OzoneKey;
-import org.apache.hadoop.ozone.web.client.OzoneRestClient;
-import org.apache.hadoop.ozone.web.utils.OzoneUtils;
+import org.apache.hadoop.io.IOUtils;
+import org.apache.hadoop.ozone.client.ObjectStore;
+import org.apache.hadoop.ozone.client.OzoneBucket;
+import org.apache.hadoop.ozone.client.OzoneClient;
+import org.apache.hadoop.ozone.client.OzoneClientFactory;
+import org.apache.hadoop.ozone.OzoneConfigKeys;
+import org.apache.hadoop.ozone.client.OzoneKey;
+import org.apache.hadoop.ozone.client.OzoneVolume;
+import org.apache.hadoop.ozone.client.ReplicationFactor;
+import org.apache.hadoop.ozone.client.ReplicationType;
-import org.apache.hadoop.ozone.web.client.OzoneBucket;
-import org.apache.hadoop.ozone.web.client.OzoneVolume;
-import org.apache.hadoop.ozone.client.rest.OzoneException;
+import org.apache.hadoop.ozone.client.io.OzoneInputStream;
+import org.apache.hadoop.ozone.client.io.OzoneOutputStream;
-import static org.apache.hadoop.fs.ozone.Constants.OZONE_HTTP_SCHEME;
-import static org.apache.hadoop.fs.ozone.Constants.BUFFER_DIR_KEY;
-  private OzoneRestClient ozone;
+  private OzoneClient ozoneClient;
+  private ObjectStore objectStore;
+  private OzoneVolume volume;
+  private ReplicationType replicationType;
+  private ReplicationFactor replicationFactor;
-      this.ozone = new OzoneRestClient(OZONE_HTTP_SCHEME + hostStr);
+      this.ozoneClient = OzoneClientFactory.getRpcClient(conf);
+      objectStore = ozoneClient.getObjectStore();
+      this.volume = objectStore.getVolume(volumeStr);
+      this.bucket = volume.getBucket(bucketStr);
+      this.replicationType = ReplicationType.valueOf(
+          conf.get(OzoneConfigKeys.OZONE_REPLICATION_TYPE,
+              OzoneConfigKeys.OZONE_REPLICATION_TYPE_DEFAULT));
+      this.replicationFactor = ReplicationFactor.valueOf(
+          conf.getInt(OzoneConfigKeys.OZONE_REPLICATION,
+              OzoneConfigKeys.OZONE_REPLICATION_DEFAULT));
-      this.ozone.setUserAuth(userName);
-
-      OzoneVolume volume = ozone.getVolume(volumeStr);
-      this.bucket = volume.getBucket(bucketStr);
-    } catch (OzoneException oe) {
-      final String msg = "Ozone server exception when initializing file system";
-      LOG.error(msg, oe);
-      throw new IOException(msg, oe);
-      ozone.close();
+      ozoneClient.close();
-
+    final String key = pathToKey(f);
-        new OzoneInputStream(getConf(), uri, bucket, pathToKey(f),
-            fileStatus.getLen(), bufferSize, statistics));
+        new OzoneFSInputStream(bucket.readKey(key).getInputStream()));
-    final OzoneOutputStream stream =
-        new OzoneOutputStream(getConf(), uri, bucket, key, this.statistics);
+    OzoneOutputStream ozoneOutputStream =
+        bucket.createKey(key, 0, replicationType, replicationFactor);
-    return new FSDataOutputStream(stream, null);
+    return new FSDataOutputStream(
+        new OzoneFSOutputStream(ozoneOutputStream.getOutputStream()), null);
-      super(srcPath, true);
+      super(srcPath);
-      return rename(key, newKeyName);
+      rename(key, newKeyName);
+      return true;
-    // TODO: currently rename work by copying the file, with changes in KSM,
-    // this operation can be made improved by renaming the keys in KSM directly.
-    private boolean rename(String src, String dst) throws IOException {
-      final LocalDirAllocator dirAlloc = new LocalDirAllocator(BUFFER_DIR_KEY);
-      final File tmpFile = dirAlloc.createTmpFileForWrite("output-",
-          LocalDirAllocator.SIZE_UNKNOWN, getConf());
-
-      try {
-        LOG.trace("rename by copying file from:{} to:{}", src, dst);
-        bucket.getKey(src, tmpFile.toPath());
-        bucket.putKey(dst, tmpFile);
-        return true;
-      } catch (OzoneException oe) {
-        String msg = String.format("Error when renaming key from:%s to:%s",
-            src, dst);
-        LOG.error(msg, oe);
-        throw new IOException(msg, oe);
-      } finally {
-        if (!tmpFile.delete()) {
-          LOG.warn("Can not delete tmpFile: " + tmpFile);
-        }
+    // TODO: currently rename work by copying the streams, with changes in KSM,
+    // this operation can be improved by renaming the keys in KSM directly.
+    private void rename(String src, String dst) throws IOException {
+      try (OzoneInputStream inputStream = bucket.readKey(src);
+          OzoneOutputStream outputStream = bucket
+              .createKey(dst, 0, replicationType, replicationFactor)) {
+        IOUtils.copyBytes(inputStream, outputStream, getConf());
-      super(f, recursive);
+      super(f);
+      if (getStatus().isDirectory()
+          && !this.recursive
+          && listStatus(f).length != 0) {
+        throw new PathIsNotEmptyDirectoryException(f.toString());
+      }
-      super(f, true);
+      super(f);
-          getModifiedTime(bucket.getCreatedOn(), OZONE_URI_DELIMITER),
-          qualifiedPath);
+          bucket.getCreationTime(), qualifiedPath);
-          getModifiedTime(meta.getObjectInfo().getModifiedOn(), key),
-          qualifiedPath);
+          meta.getModificationTime(), qualifiedPath);
-      return new FileStatus(meta.getObjectInfo().getSize(), false, 1,
-            getDefaultBlockSize(f),
-          getModifiedTime(meta.getObjectInfo().getModifiedOn(), key),
-          qualifiedPath);
+      return new FileStatus(meta.getDataSize(), false, 1,
+            getDefaultBlockSize(f), meta.getModificationTime(), qualifiedPath);
-      return bucket.getKeyInfo(key);
-    } catch (OzoneException e) {
+      return bucket.getKey(key);
+    } catch (IOException e) {
-   * Helper method to get the modified time of the key.
-   * @param key key to fetch the modified time
-   * @return last modified time of the key
-   */
-  private long getModifiedTime(String modifiedTime, String key) {
-    try {
-      return OzoneUtils.formatDate(modifiedTime);
-    } catch (ParseException pe) {
-      LOG.error("Invalid time:{} for key:{}", modifiedTime, key, pe);
-      return 0;
-    }
-  }
-
-  /**
-    LOG.trace("key name:{} size:{}", key.getObjectInfo().getKeyName(),
-        key.getObjectInfo().getSize());
-    return key.getObjectInfo().getKeyName().endsWith(OZONE_URI_DELIMITER)
-        && (key.getObjectInfo().getSize() == 0);
-  }
-
-  /**
-   * Helper method to list entries matching the key name in bucket.
-   * @param dirKey key prefix for listing the keys
-   * @param lastKey last iterated key
-   * @return List of Keys
-   */
-  List<OzoneKey> listKeys(String dirKey, String lastKey)
-      throws IOException {
-    LOG.trace("list keys dirKey:{} lastKey:{}", dirKey, lastKey);
-    try {
-      return bucket.listKeys(dirKey, LISTING_PAGE_SIZE, lastKey);
-    } catch (OzoneException oe) {
-      LOG.error("list keys failed dirKey:{} lastKey:{}", dirKey, lastKey, oe);
-      throw new IOException("List keys failed " + oe.getMessage());
-    }
+    LOG.trace("key name:{} size:{}", key.getName(),
+        key.getDataSize());
+    return key.getName().endsWith(OZONE_URI_DELIMITER)
+        && (key.getDataSize() == 0);
-      LOG.trace("creating dir for key:{}", keyName);
-      bucket.putKey(keyName, "");
+      LOG.info("creating dir for key:{}", keyName);
+      bucket.createKey(keyName, 0, replicationType, replicationFactor).close();
-    } catch (OzoneException oe) {
-      LOG.error("create key failed for key:{}", keyName, oe);
+    } catch (IOException ioe) {
+      LOG.error("create key failed for key:{}", keyName, ioe);
-    } catch (OzoneException oe) {
-      LOG.error("delete key failed " + oe.getMessage());
+    } catch (IOException ioe) {
+      LOG.error("delete key failed " + ioe.getMessage());
-  String addTrailingSlashIfNeeded(String key) {
+  private String addTrailingSlashIfNeeded(String key) {
-    private final boolean recursive;
+    private Iterator<OzoneKey> keyIterator;
-    OzoneListingIterator(Path path, boolean recursive)
+    OzoneListingIterator(Path path)
-      this.recursive = recursive;
+      keyIterator = bucket.listKeys(pathKey);
-      LOG.trace("Iterating path {} - recursive {}", path, recursive);
+      LOG.trace("Iterating path {}", path);
-        String lastKey = pathKey;
-        while (true) {
-          List<OzoneKey> ozoneKeys = listKeys(pathKey, lastKey);
-          LOG.trace("number of sub keys:{}", ozoneKeys.size());
-          if (ozoneKeys.size() == 0) {
-            return processKey(pathKey);
-          } else {
-            if (!recursive) {
-              throw new PathIsNotEmptyDirectoryException(path.toString());
-            } else {
-              for (OzoneKey ozoneKey : ozoneKeys) {
-                lastKey = ozoneKey.getObjectInfo().getKeyName();
-                if (!processKey(lastKey)) {
-                  return false;
-                }
-              }
-            }
+        while (keyIterator.hasNext()) {
+          OzoneKey key = keyIterator.next();
+          LOG.info("iterating key:{}", key.getName());
+          if (!processKey(key.getName())) {
+            return false;
+        return true;
+
+    FileStatus getStatus() {
+      return status;
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS23 INS23 INS23 INS23 INS31 MOV23 UPD43 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 MOV78 INS83 INS39 INS42 MOV43 MOV8 INS83 INS31 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS60 INS41 UPD39 UPD74 MOV74 MOV21 INS43 INS42 INS8 MOV54 INS8 MOV8 INS83 INS43 INS59 INS14 MOV43 INS21 MOV41 INS46 INS25 UPD43 UPD42 INS42 INS41 INS21 INS21 INS21 MOV21 INS42 INS42 INS32 MOV43 INS14 UPD42 INS32 INS14 MOV32 INS58 INS58 INS8 MOV42 INS27 INS8 UPD42 INS42 INS7 INS7 INS7 INS7 MOV42 MOV42 INS43 INS32 UPD42 MOV42 INS42 INS42 INS34 INS42 INS42 INS43 INS32 MOV43 INS59 MOV43 INS59 MOV21 INS32 INS38 INS27 INS53 MOV43 MOV42 UPD42 MOV42 UPD42 INS32 MOV43 UPD42 MOV41 MOV43 UPD42 MOV41 INS42 INS32 UPD45 INS61 INS41 INS32 INS42 INS32 INS22 INS32 INS22 INS32 INS22 INS32 UPD42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS22 INS22 INS34 INS14 INS32 UPD42 MOV42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS32 MOV8 INS9 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS52 INS42 UPD42 MOV42 MOV42 MOV42 INS52 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS34 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 MOV32 INS42 INS52 INS42 INS32 INS42 MOV43 INS32 MOV42 UPD42 MOV42 INS32 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS34 INS42 INS42 UPD42 INS42 INS42 MOV25 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 UPD42 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 DEL42 DEL43 DEL42 DEL42 DEL27 DEL14 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL34 DEL41 DEL8 DEL12 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL14 DEL14 DEL41 DEL83 DEL32 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL14 DEL42 DEL9 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL46 DEL9 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL43 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL31 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL45 DEL32 DEL42 DEL43 DEL42 DEL43 DEL83 DEL39 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL38 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL9 DEL61