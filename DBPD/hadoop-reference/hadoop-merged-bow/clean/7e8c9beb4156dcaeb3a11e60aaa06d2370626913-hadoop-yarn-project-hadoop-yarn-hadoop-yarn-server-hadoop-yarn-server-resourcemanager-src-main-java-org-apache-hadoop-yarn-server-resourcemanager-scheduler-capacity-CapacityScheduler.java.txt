CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.preemption.KillableContainer;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.preemption.PreemptionManager;
+  private PreemptionManager preemptionManager = new PreemptionManager();
+
+  private volatile boolean isLazyPreemptionEnabled = false;
+
-    this.applications =
-        new ConcurrentHashMap<ApplicationId,
-            SchedulerApplication<FiCaSchedulerApp>>();
+    this.applications = new ConcurrentHashMap<>();
+    this.isLazyPreemptionEnabled = conf.getLazyPreemptionEnabled();
+
+    // update lazy preemption
+    this.isLazyPreemptionEnabled = this.conf.getLazyPreemptionEnabled();
+
+    // Notify Preemption Manager
+    preemptionManager.refreshQueues(null, root);
+
+    // Notify Preemption Manager
+    preemptionManager.refreshQueues(null, root);
-      if (calculator.computeAvailableContainers(node.getUnallocatedResource(),
-        minimumAllocation) > 0) {
+      if (calculator.computeAvailableContainers(Resources
+              .add(node.getUnallocatedResource(), node.getTotalKillableResources()),
+          minimumAllocation) > 0) {
+
-            // TODO, now we only consider limits for parent for non-labeled
-            // resources, should consider labeled resources as well.
-                RMNodeLabelsManager.NO_LABEL, getClusterResource())),
+                node.getPartition(), getClusterResource())),
-    case KILL_PREEMPTED_CONTAINER:
+    case MARK_CONTAINER_FOR_KILLABLE:
-      ContainerPreemptEvent killContainerEvent = (ContainerPreemptEvent)event;
-      RMContainer containerToBeKilled = killContainerEvent.getContainer();
-      killPreemptedContainer(containerToBeKilled);
+      ContainerPreemptEvent containerKillableEvent = (ContainerPreemptEvent)event;
+      RMContainer killableContainer = containerKillableEvent.getContainer();
+      markContainerForKillable(killableContainer);
+    }
+    break;
+    case MARK_CONTAINER_FOR_NONKILLABLE:
+    {
+      if (isLazyPreemptionEnabled) {
+        ContainerPreemptEvent cancelKillContainerEvent =
+            (ContainerPreemptEvent) event;
+        markContainerForNonKillable(cancelKillContainerEvent.getContainer());
+      }
-    
+    ContainerId containerId = container.getId();
-        container.getId().getApplicationAttemptId().getApplicationId();
+        containerId.getApplicationAttemptId().getApplicationId();
-
-    if (containerStatus.getExitStatus() == ContainerExitStatus.PREEMPTED) {
-      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),
-        container.getId(), queue.getQueuePath());
-      schedulerHealth.updateSchedulerPreemptionCounts(1);
-    } else {
-      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),
-        container.getId(), queue.getQueuePath());
-    }
-  
+
-  @Override
-  public void killPreemptedContainer(RMContainer cont) {
+  public synchronized void markContainerForKillable(
+      RMContainer killableContainer) {
-      LOG.debug(SchedulerEventType.KILL_PREEMPTED_CONTAINER + ": container"
-          + cont.toString());
+      LOG.debug(SchedulerEventType.MARK_CONTAINER_FOR_KILLABLE + ": container"
+          + killableContainer.toString());
-    super.completedContainer(cont, SchedulerUtils
-        .createPreemptedContainerStatus(cont.getContainerId(),
-        SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL);
+
+    if (!isLazyPreemptionEnabled) {
+      super.completedContainer(killableContainer, SchedulerUtils
+          .createPreemptedContainerStatus(killableContainer.getContainerId(),
+              SchedulerUtils.PREEMPTED_CONTAINER), RMContainerEventType.KILL);
+    } else {
+      FiCaSchedulerNode node = (FiCaSchedulerNode) getSchedulerNode(
+          killableContainer.getAllocatedNode());
+
+      FiCaSchedulerApp application = getCurrentAttemptForContainer(
+          killableContainer.getContainerId());
+
+      node.markContainerToKillable(killableContainer.getContainerId());
+
+      // notify PreemptionManager
+      // Get the application for the finished container
+      if (null != application) {
+        String leafQueueName = application.getCSLeafQueue().getQueueName();
+        getPreemptionManager().addKillableContainer(
+            new KillableContainer(killableContainer, node.getPartition(),
+                leafQueueName));
+      }    }
+  }
+
+  private synchronized void markContainerForNonKillable(
+      RMContainer nonKillableContainer) {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug(
+          SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE + ": container"
+              + nonKillableContainer.toString());
+    }
+
+    FiCaSchedulerNode node = (FiCaSchedulerNode) getSchedulerNode(
+        nonKillableContainer.getAllocatedNode());
+
+    FiCaSchedulerApp application = getCurrentAttemptForContainer(
+        nonKillableContainer.getContainerId());
+
+    node.markContainerToNonKillable(nonKillableContainer.getContainerId());
+
+    // notify PreemptionManager
+    // Get the application for the finished container
+    if (null != application) {
+      String leafQueueName = application.getCSLeafQueue().getQueueName();
+      getPreemptionManager().removeKillableContainer(
+          new KillableContainer(nonKillableContainer, node.getPartition(),
+              leafQueueName));
+    }
+  @Override
+  public long getLastNodeUpdateTime() {
+    return lastNodeUpdateTime;
+  }
+
+  @Override
+
+  @Override
+  public PreemptionManager getPreemptionManager() {
+    return preemptionManager;
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 UPD42 INS83 INS83 INS39 INS42 INS44 INS8 MOV78 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS14 INS42 INS9 INS21 INS21 INS21 INS21 INS60 UPD42 INS25 INS43 INS42 INS25 INS60 INS60 INS21 INS25 INS42 INS41 INS42 INS42 INS41 INS43 INS7 INS7 INS32 INS32 INS8 INS10 INS49 INS43 INS59 INS38 INS8 INS8 INS42 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS42 INS22 INS32 INS22 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 UPD42 INS42 INS25 INS42 INS42 MOV32 INS42 MOV21 INS60 INS60 INS21 INS25 INS42 INS42 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS60 INS21 UPD74 INS52 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS8 INS43 INS59 MOV43 INS59 INS32 INS27 INS8 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS52 INS42 UPD42 UPD42 UPD42 UPD42 INS60 INS21 UPD42 MOV42 UPD42 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS60 INS21 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS32 UPD42 INS43 INS59 INS32 UPD40 INS43 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS40 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 MOV32 INS32 INS42 INS42 INS11 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25