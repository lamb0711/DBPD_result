YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)

+import org.apache.hadoop.yarn.server.nodemanager.containermanager.scheduler.ContainerSchedulerEvent;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.scheduler.ContainerSchedulerEventType;
+  private volatile boolean isMarkeForKilling = false;
-            ContainerState.LOCALIZED,
+            ContainerState.SCHEDULED,
-        EnumSet.of(ContainerState.LOCALIZING, ContainerState.LOCALIZED),
+        EnumSet.of(ContainerState.LOCALIZING, ContainerState.SCHEDULED),
-        new KillDuringLocalizationTransition())
+        new KillBeforeRunningTransition())
-    // From LOCALIZED State
-    .addTransition(ContainerState.LOCALIZED, ContainerState.RUNNING,
+    // From SCHEDULED State
+    .addTransition(ContainerState.SCHEDULED, ContainerState.RUNNING,
-    .addTransition(ContainerState.LOCALIZED, ContainerState.EXITED_WITH_FAILURE,
+    .addTransition(ContainerState.SCHEDULED, ContainerState.EXITED_WITH_FAILURE,
-    .addTransition(ContainerState.LOCALIZED, ContainerState.LOCALIZED,
+    .addTransition(ContainerState.SCHEDULED, ContainerState.SCHEDULED,
-    .addTransition(ContainerState.LOCALIZED, ContainerState.KILLING,
-        ContainerEventType.KILL_CONTAINER, new KillTransition())
+    .addTransition(ContainerState.SCHEDULED, ContainerState.KILLING,
+        ContainerEventType.KILL_CONTAINER,
+        new KillBeforeRunningTransition())
-            ContainerState.LOCALIZED,
+            ContainerState.SCHEDULED,
-        ContainerState.LOCALIZED,
+        ContainerState.SCHEDULED,
-    case LOCALIZED:
+    case SCHEDULED:
+      return org.apache.hadoop.yarn.api.records.ContainerState.SCHEDULED;
+    case REINITIALIZING:
-      if (ContainerState.LOCALIZED == getContainerState()
+      if (ContainerState.SCHEDULED == getContainerState()
+    // Tell the scheduler the container is Done
+    eventHandler.handle(new ContainerSchedulerEvent(this,
+        ContainerSchedulerEventType.CONTAINER_COMPLETED));
-  private void sendLaunchEvent() {
+  @Override
+  public void sendLaunchEvent() {
+  private void sendScheduleEvent() {
+    dispatcher.getEventHandler().handle(
+        new ContainerSchedulerEvent(this,
+            ContainerSchedulerEventType.SCHEDULE_CONTAINER)
+    );
+  }
+
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  @Override
+  public void sendKillEvent(int exitStatus, String description) {
+    this.isMarkeForKilling = true;
+    dispatcher.getEventHandler().handle(
+        new ContainerKillEvent(containerId, exitStatus, description));
+  }
+
+  @SuppressWarnings("unchecked") // dispatcher not typed
-   * and enters LOCALIZED state directly.
+   * and enters SCHEDULED state directly.
-        container.sendLaunchEvent();
+        container.sendScheduleEvent();
-        return ContainerState.LOCALIZED;
+        return ContainerState.SCHEDULED;
-      container.sendLaunchEvent();
+      container.sendScheduleEvent();
-      return ContainerState.LOCALIZED;
+      return ContainerState.SCHEDULED;
-   * Transition from LOCALIZED state to RUNNING state upon receiving
+   * Transition from SCHEDULED state to RUNNING state upon receiving
-        return ContainerState.LOCALIZED;
+        return ContainerState.SCHEDULED;
-   * Transition to LOCALIZED and wait for RE-LAUNCH
+   * Transition to SCHEDULED and wait for RE-LAUNCH
-
-      container.sendLaunchEvent();
+      container.isMarkeForKilling = false;
+      container.sendScheduleEvent();
-  static class KillDuringLocalizationTransition implements
+  static class KillBeforeRunningTransition implements
-   * - LOCALIZED -> KILLING.
+   * - SCHEDULED -> KILLING.
-            + oldState + "], eventType: [" + event.getType() + "]", e);
+            + oldState + "], eventType: [" + event.getType() + "]," +
+            " container: [" + containerID + "]", e);
+  public boolean isMarkedForKilling() {
+    return this.isMarkeForKilling;
+  }
+
+  @Override

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS78 UPD83 INS79 INS83 INS39 INS42 INS8 INS79 INS78 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 INS78 INS83 INS39 INS42 INS8 INS42 INS9 MOV49 INS21 INS42 INS42 INS45 INS21 INS42 INS45 INS42 INS39 INS42 INS43 INS42 INS21 INS21 INS42 INS41 INS41 INS49 INS32 INS32 INS42 INS7 INS32 UPD66 UPD66 UPD66 INS21 UPD66 INS22 UPD42 INS40 INS42 INS42 INS42 INS14 INS32 INS42 INS14 INS22 INS9 INS32 INS42 INS14 UPD40 INS7 INS52 INS42 INS43 INS52 INS40 INS42 INS42 INS43 INS52 INS40 INS52 INS42 INS42 INS42 INS43 INS42 INS42 INS42 UPD42 INS40 INS9 UPD42 INS42 INS42 INS42 UPD40 UPD40 UPD42 UPD40 INS45 INS45 INS42 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD40 UPD42 UPD40 UPD43 UPD42 UPD40 UPD40