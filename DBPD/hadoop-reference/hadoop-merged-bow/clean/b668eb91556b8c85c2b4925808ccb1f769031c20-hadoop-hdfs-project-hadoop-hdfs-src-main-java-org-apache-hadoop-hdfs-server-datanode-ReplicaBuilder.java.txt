HDFS-10675. Datanode support to read from external stores.

+import java.net.URI;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.StorageType;
+import org.apache.hadoop.hdfs.server.common.FileRegion;
+  private URI uri;
+  private long offset;
+  private Configuration conf;
+  private FileRegion fileRegion;
+
+    fileRegion = null;
+    conf = null;
+    fromReplica = null;
+    uri = null;
+  public ReplicaBuilder setURI(URI uri) {
+    this.uri = uri;
+    return this;
+  }
+
+  public ReplicaBuilder setConf(Configuration conf) {
+    this.conf = conf;
+    return this;
+  }
+
+  public ReplicaBuilder setOffset(long offset) {
+    this.offset = offset;
+    return this;
+  }
+
+  public ReplicaBuilder setFileRegion(FileRegion fileRegion) {
+    this.fileRegion = fileRegion;
+    return this;
+  }
+
-  private ReplicaInfo buildFinalizedReplica() throws IllegalArgumentException {
+  private LocalReplica buildFinalizedReplica() throws IllegalArgumentException {
-  private ReplicaInfo buildRWR() throws IllegalArgumentException {
+  private LocalReplica buildRWR() throws IllegalArgumentException {
-  private ReplicaInfo buildRUR() throws IllegalArgumentException {
+  private LocalReplica buildRUR() throws IllegalArgumentException {
-  public ReplicaInfo build() throws IllegalArgumentException {
-    ReplicaInfo info = null;
+  private ProvidedReplica buildProvidedFinalizedReplica()
+      throws IllegalArgumentException {
+    ProvidedReplica info = null;
+    if (fromReplica != null) {
+      throw new IllegalArgumentException("Finalized PROVIDED replica " +
+          "cannot be constructed from another replica");
+    }
+    if (fileRegion == null && uri == null) {
+      throw new IllegalArgumentException(
+          "Trying to construct a provided replica on " + volume +
+          " without enough information");
+    }
+    if (fileRegion == null) {
+      info = new FinalizedProvidedReplica(blockId, uri, offset,
+          length, genStamp, volume, conf);
+    } else {
+      info = new FinalizedProvidedReplica(fileRegion.getBlock().getBlockId(),
+          fileRegion.getPath().toUri(),
+          fileRegion.getOffset(),
+          fileRegion.getBlock().getNumBytes(),
+          fileRegion.getBlock().getGenerationStamp(),
+          volume, conf);
+    }
+    return info;
+  }
+
+  private ProvidedReplica buildProvidedReplica()
+      throws IllegalArgumentException {
+    ProvidedReplica info = null;
+    switch(this.state) {
+    case FINALIZED:
+      info = buildProvidedFinalizedReplica();
+      break;
+    case RWR:
+    case RUR:
+    case RBW:
+    case TEMPORARY:
+    default:
+      throw new IllegalArgumentException("Unknown replica state " +
+          state + " for PROVIDED replica");
+    }
+    return info;
+  }
+
+  private LocalReplica buildLocalReplica()
+      throws IllegalArgumentException {
+    LocalReplica info = null;
+
+  public ReplicaInfo build() throws IllegalArgumentException {
+
+    ReplicaInfo info = null;
+    if(volume != null && volume.getStorageType() == StorageType.PROVIDED) {
+      info = buildProvidedReplica();
+    } else {
+      info = buildLocalReplica();
+    }
+
+    return info;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 UPD43 UPD43 UPD43 INS83 INS43 INS42 INS43 INS8 INS83 INS43 INS42 INS43 INS8 UPD83 INS43 UPD42 INS83 MOV43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS43 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 UPD42 UPD42 UPD42 INS42 INS42 INS60 INS25 INS25 INS25 INS41 INS42 INS42 INS60 INS50 INS41 INS42 INS60 INS42 MOV60 INS25 INS41 INS7 INS7 INS7 INS7 INS42 INS7 INS52 INS42 INS7 INS52 INS7 INS52 INS42 INS7 INS52 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS8 INS42 INS43 INS59 INS22 INS49 INS21 INS10 INS49 INS49 INS49 INS49 INS49 INS53 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS33 INS42 INS33 INS53 INS27 INS27 INS53 INS42 INS33 INS21 INS21 INS42 INS42 INS33 INS52 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS33 INS27 INS27 INS21 INS21 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS14 INS42 INS33 INS42 INS33 INS14 INS7 INS7 INS42 INS32 INS43 INS27 INS42 INS33 INS32 INS40 INS7 INS7 INS43 INS27 INS43 INS27 INS42 INS14 INS42 INS14 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42