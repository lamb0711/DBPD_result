HDFS-13484. RBF: Disable Nameservices from the federation. Contributed by Inigo Goiri.

+import java.util.TreeSet;
+import org.apache.hadoop.hdfs.server.federation.store.DisabledNameserviceStore;
+import org.apache.hadoop.hdfs.server.federation.store.RecordStore;
+  /** Disabled Nameservice State Store interface. */
+  private DisabledNameserviceStore disabledNameserviceInterface;
-      this.membershipInterface = this.stateStore.getRegisteredRecordStore(
-          MembershipStore.class);
-      if (this.membershipInterface == null) {
-        throw new IOException("State Store does not have an interface for " +
-            MembershipStore.class.getSimpleName());
-      }
+      this.membershipInterface = getStoreInterface(MembershipStore.class);
+  private synchronized DisabledNameserviceStore getDisabledNameserviceStore()
+      throws IOException {
+    if (this.disabledNameserviceInterface == null) {
+      this.disabledNameserviceInterface =
+          getStoreInterface(DisabledNameserviceStore.class);
+    }
+    return this.disabledNameserviceInterface;
+  }
+
+  private <T extends RecordStore<?>> T getStoreInterface(Class<T> clazz)
+      throws IOException{
+    T store = this.stateStore.getRegisteredRecordStore(clazz);
+    if (store == null) {
+      throw new IOException("State Store does not have an interface for " +
+          clazz.getSimpleName());
+    }
+    return store;
+  }
+
+      DisabledNameserviceStore disabled = getDisabledNameserviceStore();
+      disabled.loadCache(force);
-    if (ret == null) {
-      try {
-        MembershipState partial = MembershipState.newInstance();
-        partial.setNameserviceId(nsId);
-        GetNamenodeRegistrationsRequest request =
-            GetNamenodeRegistrationsRequest.newInstance(partial);
-
-        final List<MembershipState> result =
-            getRecentRegistrationForQuery(request, true, false);
-        if (result == null || result.isEmpty()) {
-          LOG.error("Cannot locate eligible NNs for {}", nsId);
-          return null;
-        } else {
-          cacheNS.put(nsId, result);
-          ret = result;
-        }
-      } catch (StateStoreUnavailableException e) {
-        LOG.error("Cannot get active NN for {}, State Store unavailable", nsId);
-      }
+    if (ret != null) {
+      return ret;
-    if (ret == null) {
+
+    // Not cached, generate the value
+    final List<MembershipState> result;
+    try {
+      MembershipState partial = MembershipState.newInstance();
+      partial.setNameserviceId(nsId);
+      GetNamenodeRegistrationsRequest request =
+          GetNamenodeRegistrationsRequest.newInstance(partial);
+      result = getRecentRegistrationForQuery(request, true, false);
+    } catch (StateStoreUnavailableException e) {
+      LOG.error("Cannot get active NN for {}, State Store unavailable", nsId);
-    return Collections.unmodifiableList(ret);
+    if (result == null || result.isEmpty()) {
+      LOG.error("Cannot locate eligible NNs for {}", nsId);
+      return null;
+    }
+
+    // Mark disabled name services
+    try {
+      Set<String> disabled =
+          getDisabledNameserviceStore().getDisabledNameservices();
+      if (disabled == null) {
+        LOG.error("Cannot get disabled name services");
+      } else {
+        for (MembershipState nn : result) {
+          if (disabled.contains(nn.getNameserviceId())) {
+            nn.setState(FederationNamenodeServiceState.DISABLED);
+          }
+        }
+      }
+    } catch (StateStoreUnavailableException e) {
+      LOG.error("Cannot get disabled name services, State Store unavailable");
+    }
+
+    // Cache the response
+    ret = Collections.unmodifiableList(result);
+    cacheNS.put(nsId, result);
+    return ret;
-    return response.getNamespaceInfo();
+    Set<FederationNamespaceInfo> nss = response.getNamespaceInfo();
+
+    // Filter disabled namespaces
+    Set<FederationNamespaceInfo> ret = new TreeSet<>();
+    Set<String> disabled = getDisabledNamespaces();
+    for (FederationNamespaceInfo ns : nss) {
+      if (!disabled.contains(ns.getNameserviceId())) {
+        ret.add(ns);
+      }
+    }
+
+    return ret;
+  }
+
+  @Override
+  public Set<String> getDisabledNamespaces() throws IOException {
+    DisabledNameserviceStore store = getDisabledNameserviceStore();
+    return store.getDisabledNameservices();

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS43 INS8 INS83 INS73 INS43 INS42 INS44 INS43 INS8 MOV8 INS78 INS83 INS74 INS42 INS43 INS8 INS65 INS42 INS42 INS42 INS42 INS25 INS41 INS42 INS74 INS42 INS74 INS42 INS42 INS60 INS25 INS41 MOV60 INS25 MOV60 MOV25 INS54 INS21 MOV21 INS41 INS60 INS60 INS60 INS70 INS42 INS43 INS43 INS42 INS60 INS41 INS66 INS27 INS8 INS22 INS43 INS76 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS27 INS8 INS8 INS12 INS7 INS42 INS74 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS59 INS32 INS22 INS33 INS21 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS60 INS21 INS42 INS33 INS41 INS21 INS60 INS25 INS44 INS8 INS42 INS32 INS43 INS43 INS42 MOV32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS7 MOV22 INS42 INS42 INS14 INS43 INS59 INS32 INS42 INS7 MOV41 INS74 INS59 INS27 INS8 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS38 INS8 INS42 INS22 INS32 MOV43 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV32 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS70 INS42 INS32 INS43 INS32 INS21 UPD42 INS52 INS42 INS42 INS57 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS44 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS32 INS21 INS42 INS42 INS32 INS42 INS42 INS40 DEL52 DEL42 DEL22 DEL33 DEL27 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8