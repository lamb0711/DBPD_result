HDFS-8283. DataStreamer cleanup and some minor improvement. Contributed by Tsz Wo Nicholas Sze.

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.io.MultipleIOException;
+import com.google.common.base.Preconditions;
+  static final Log LOG = LogFactory.getLog(DataStreamer.class);
-    if (DFSClient.LOG.isDebugEnabled()) {
-      DFSClient.LOG.debug("Connecting to datanode " + dnAddr);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Connecting to datanode " + dnAddr);
-    if(DFSClient.LOG.isDebugEnabled()) {
-      DFSClient.LOG.debug("Send buf size " + sock.getSendBufferSize());
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Send buf size " + sock.getSendBufferSize());
+  
+  static class LastException {
+    private Throwable thrown;
+
+    synchronized void set(Throwable t) {
+      Preconditions.checkNotNull(t);
+      Preconditions.checkState(thrown == null);
+      this.thrown = t;
+    }
+
+    synchronized void clear() {
+      thrown = null;
+    }
+
+    /** Check if there already is an exception. */
+    synchronized void check() throws IOException {
+      if (thrown != null) {
+        throw new IOException(thrown);
+      }
+    }
+
+    synchronized void throwException4Close() throws IOException {
+      check();
+      final IOException ioe = new ClosedChannelException();
+      thrown = ioe;
+      throw ioe;
+    }
+  }
-  private String[] favoredNodes;
-  private boolean isAppend;
+  private final boolean isAppend;
-  private final AtomicReference<IOException> lastException = new AtomicReference<>();
+  private final LastException lastException = new LastException();
-  private final ArrayList<DatanodeInfo> congestedNodes = new ArrayList<>();
+  private final List<DatanodeInfo> congestedNodes = new ArrayList<>();
+  private final String[] favoredNodes;
-                       ByteArrayManager byteArrayManage){
+                       ByteArrayManager byteArrayManage,
+                       boolean isAppend, String[] favoredNodes) {
-    isLazyPersistFile = isLazyPersist(stat);
+    this.isLazyPersistFile = isLazyPersist(stat);
-    excludedNodes = initExcludedNodes();
+    this.excludedNodes = initExcludedNodes();
+    this.isAppend = isAppend;
+    this.favoredNodes = favoredNodes;
-               ByteArrayManager byteArrayManage) {
+               ByteArrayManager byteArrayManage, String[] favoredNodes) {
-        byteArrayManage);
-    isAppend = false;
+        byteArrayManage, false, favoredNodes);
-        byteArrayManage);
-    isAppend = true;
+        byteArrayManage, true, null);
-   * Set favored nodes
-   *
-   * @param favoredNodes favored nodes
-   */
-  void setFavoredNodes(String[] favoredNodes) {
-    this.favoredNodes = favoredNodes;
-  }
-
-  /**
-    if(DFSClient.LOG.isDebugEnabled()) {
-      DFSClient.LOG.debug("Closing old block " + block);
+    if(LOG.isDebugEnabled()) {
+      LOG.debug("Closing old block " + block);
-          DFSClient.LOG.warn("Caught exception ", e);
+          LOG.warn("Caught exception", e);
-              DFSClient.LOG.warn("Caught exception ", e);
+              LOG.warn("Caught exception", e);
-              DFSClient.LOG.warn("Caught exception ", e);
+              LOG.warn("Caught exception", e);
-          if(DFSClient.LOG.isDebugEnabled()) {
-            DFSClient.LOG.debug("Allocating new block");
+          if(LOG.isDebugEnabled()) {
+            LOG.debug("Allocating new block");
-          if(DFSClient.LOG.isDebugEnabled()) {
-            DFSClient.LOG.debug("Append to block " + block);
+          if(LOG.isDebugEnabled()) {
+            LOG.debug("Append to block " + block);
-                DFSClient.LOG.warn("Caught exception ", e);
+                LOG.warn("Caught exception", e);
-        if (DFSClient.LOG.isDebugEnabled()) {
-          DFSClient.LOG.debug("DataStreamer block " + block +
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("DataStreamer block " + block +
-            DFSClient.LOG.debug("DataStreamer Quota Exception", e);
+            LOG.debug("DataStreamer Quota Exception", e);
-            DFSClient.LOG.warn("DataStreamer Exception", e);
+            LOG.warn("DataStreamer Exception", e);
-        if (e instanceof IOException) {
-          setLastException((IOException)e);
-        } else {
-          setLastException(new IOException("DataStreamer Exception: ",e));
-        }
+        lastException.set(e);
-      if (DFSClient.LOG.isDebugEnabled()) {
-        DFSClient.LOG.debug("Waiting for ack for: " + seqno);
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Waiting for ack for: " + seqno);
-        DFSClient.LOG.warn("Slow waitForAckedSeqno took " + duration
+        LOG.warn("Slow waitForAckedSeqno took " + duration
-      IOException e = lastException.get();
-      throw e != null ? e : new ClosedChannelException();
+      lastException.throwException4Close();
-        DFSClient.LOG.warn("Caught exception ", e);
+        LOG.warn("Caught exception", e);
+    final MultipleIOException.Builder b = new MultipleIOException.Builder();
+
-        setLastException(e);
+        b.add(e);
-        setLastException(e);
+        b.add(e);
-        setLastException(e);
+        b.add(e);
+
+    final IOException ioe = b.build();
+    if (ioe != null) {
+      lastException.set(ioe);
+    }
-            DFSClient.LOG
-                .warn("Slow ReadProcessor read fields took " + duration
-                    + "ms (threshold=" + dfsclientSlowLogThresholdMs + "ms); ack: "
-                    + ack + ", targets: " + Arrays.asList(targets));
-          } else if (DFSClient.LOG.isDebugEnabled()) {
-            DFSClient.LOG.debug("DFSClient " + ack);
+            LOG.warn("Slow ReadProcessor read fields took " + duration
+                + "ms (threshold=" + dfsclientSlowLogThresholdMs + "ms); ack: "
+                + ack + ", targets: " + Arrays.asList(targets));
+          } else if (LOG.isDebugEnabled()) {
+            LOG.debug("DFSClient " + ack);
-              DFSClient.LOG.info(message);
+              LOG.info(message);
-            if (e instanceof IOException) {
-              setLastException((IOException)e);
-            }
+            lastException.set(e);
-              DFSClient.LOG.warn("DataStreamer ResponseProcessor exception "
-                  + " for block " + block, e);
+              LOG.warn("Exception for " + block, e);
-      DFSClient.LOG.info("Error Recovery for " + block +
+      LOG.info("Error Recovery for " + block +
-        DFSClient.LOG.warn("Error recovering pipeline for writing " +
+        LOG.warn("Error recovering pipeline for writing " +
-      DFSClient.LOG.warn(msg);
-      setLastException(new IOException(msg));
+      LOG.warn(msg);
+      lastException.set(new IOException(msg));
-        DFSClient.LOG.warn("Error Recovery for block " + block +
+        LOG.warn("Error Recovery for block " + block +
-        lastException.set(null);
+        lastException.clear();
-          DFSClient.LOG.warn("Failed to replace datanode."
+          LOG.warn("Failed to replace datanode."
-        DFSClient.LOG.warn("Datanode did not restart in time: " +
+        LOG.warn("Datanode did not restart in time: " +
-      lastException.set(null);
+      lastException.clear();
-        DFSClient.LOG.info("Abandoning " + block);
+        LOG.info("Abandoning " + block);
-        DFSClient.LOG.info("Excluding datanode " + nodes[errorIndex]);
+        LOG.info("Excluding datanode " + nodes[errorIndex]);
-      DFSClient.LOG.info("nodes are empty for write pipeline of block "
-          + block);
+      LOG.info("nodes are empty for write pipeline of " + block);
-    if (DFSClient.LOG.isDebugEnabled()) {
-      for (int i = 0; i < nodes.length; i++) {
-        DFSClient.LOG.debug("pipeline = " + nodes[i]);
-      }
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("pipeline = " + Arrays.asList(nodes));
-          DFSClient.LOG.info("Exception in createBlockOutputStream", ie);
+          LOG.info("Exception in createBlockOutputStream", ie);
-          DFSClient.LOG.info("Will fetch a new encryption key and retry, "
+          LOG.info("Will fetch a new encryption key and retry, "
-          DFSClient.LOG.info("Waiting for the datanode to be restarted: " +
+          LOG.info("Waiting for the datanode to be restarted: " +
-        setLastException(ie);
+        lastException.set(ie);
-        if (DFSClient.LOG.isDebugEnabled()) {
-          DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +
-              " was chosen by name node (favored=" + pinnings[i] +
-              ").");
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(nodes[i].getXferAddrWithHostname() +
+              " was chosen by name node (favored=" + pinnings[i] + ").");
-        DFSClient.LOG.warn(
-            "These favored nodes were specified but not chosen: " +
-                favoredSet +
-                " Specified favored nodes: " + Arrays.toString(favoredNodes));
+        LOG.warn("These favored nodes were specified but not chosen: "
+            + favoredSet + " Specified favored nodes: "
+            + Arrays.toString(favoredNodes));
-              DFSClient.LOG.info("Exception while adding a block", e);
+              LOG.info("Exception while adding a block", e);
-                DFSClient.LOG.info("Waiting for replication for "
+                LOG.info("Waiting for replication for "
-                DFSClient.LOG.warn("NotReplicatedYetException sleeping " + src
+                LOG.warn("NotReplicatedYetException sleeping " + src
-                DFSClient.LOG.warn("Caught exception ", ie);
+                LOG.warn("Caught exception", ie);
-        DFSClient.LOG.info(sb.toString());
+        LOG.info(sb.toString());
-   * set last exception
-   *
-   * @param e an exception
-   */
-  void setLastException(IOException e) {
-    lastException.compareAndSet(null, e);
-  }
-
-  /**
-      if (DFSClient.LOG.isDebugEnabled()) {
-        DFSClient.LOG.debug("Queued packet " + packet.getSeqno());
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Queued packet " + packet.getSeqno());
-            DFSClient.LOG.info("Removing node " + notification.getKey()
+            LOG.info("Removing node " + notification.getKey()
-   * get the last exception
-   *
-  AtomicReference<IOException> getLastException(){
+  LastException getLastException(){

INS26 INS26 INS26 INS26 MOV23 MOV23 INS40 INS40 INS40 INS40 INS55 INS23 INS31 UPD83 INS43 INS83 INS42 INS23 INS31 INS31 MOV31 INS31 INS83 INS83 INS83 INS43 INS59 UPD74 INS83 INS44 INS44 INS44 INS83 INS39 INS42 MOV43 INS8 INS43 UPD42 MOV42 UPD42 INS32 INS83 INS43 INS59 INS83 MOV39 UPD42 MOV42 MOV44 MOV8 INS83 INS39 INS42 INS8 INS29 UPD83 UPD42 MOV43 INS83 MOV39 INS42 MOV43 INS8 INS42 INS42 INS14 UPD43 INS39 INS42 MOV5 INS42 INS21 INS21 INS5 INS42 INS17 INS17 INS25 INS60 INS60 INS25 UPD42 MOV42 INS42 INS42 INS57 INS42 INS42 INS43 UPD42 INS21 INS21 INS21 INS65 INS21 INS60 INS21 INS53 INS43 UPD42 INS7 INS7 INS43 INS85 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS9 INS42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS9 INS33 INS42 INS8 INS83 INS43 INS59 INS83 MOV43 INS59 INS27 INS8 INS8 INS43 INS42 INS42 UPD42 MOV42 INS32 INS32 INS7 INS66 INS27 INS8 INS32 INS83 MOV43 INS59 INS7 INS42 UPD42 MOV42 INS42 INS22 INS22 INS22 INS42 INS22 INS42 INS42 INS42 MOV21 INS40 INS42 INS14 INS42 INS32 INS42 INS33 INS21 INS42 MOV21 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS42 INS33 UPD42 MOV42 MOV33 INS53 INS42 INS42 MOV14 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS33 UPD42 INS14 INS42 INS42 UPD42 INS40 MOV44 MOV44 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 MOV43 INS42 MOV21 UPD45 INS32 INS44 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 INS42 INS42 INS42 UPD45 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV44 INS42 INS42 UPD42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 MOV42 MOV44 INS42 INS42 UPD45 INS42 UPD45 UPD45 INS42 INS42 UPD45 INS42 INS42 INS42 UPD45 DEL43 DEL74 DEL43 DEL74 DEL14 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL42 DEL16 DEL53 DEL8 DEL42 DEL42 DEL17 DEL42 DEL9 DEL7 DEL21 DEL17 DEL42 DEL9 DEL7 DEL21 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL31 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL45 DEL42 DEL14 DEL42 DEL62 DEL42 DEL42 DEL11 DEL32 DEL21 DEL8 DEL8 DEL25 DEL40 DEL40 DEL40 DEL42 DEL33 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL42 DEL11 DEL42 DEL62 DEL8 DEL25 DEL40 DEL45 DEL40 DEL40 DEL40 DEL40 DEL33 DEL40 DEL40 DEL33 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL40 DEL40 DEL40 DEL66 DEL65 DEL43 DEL74