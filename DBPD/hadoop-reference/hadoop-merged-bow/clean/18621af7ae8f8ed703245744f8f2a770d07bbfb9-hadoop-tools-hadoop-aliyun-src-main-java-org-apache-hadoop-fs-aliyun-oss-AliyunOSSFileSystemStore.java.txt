HADOOP-14993. AliyunOSS: Override listFiles and listLocatedStatus. Contributed Genmao Yu

+import org.apache.hadoop.fs.BlockLocation;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.LocatedFileStatus;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.PathFilter;
+import org.apache.hadoop.fs.RemoteIterator;
+import java.util.ListIterator;
+import java.util.NoSuchElementException;
+
+  public RemoteIterator<LocatedFileStatus> singleStatusRemoteIterator(
+      final FileStatus fileStatus, final BlockLocation[] locations) {
+    return new RemoteIterator<LocatedFileStatus>() {
+      private boolean hasNext = true;
+      @Override
+      public boolean hasNext() throws IOException {
+        return fileStatus != null && hasNext;
+      }
+
+      @Override
+      public LocatedFileStatus next() throws IOException {
+        if (hasNext()) {
+          LocatedFileStatus s = new LocatedFileStatus(fileStatus,
+              fileStatus.isFile() ? locations : null);
+          hasNext = false;
+          return s;
+        } else {
+          throw new NoSuchElementException();
+        }
+      }
+    };
+  }
+
+  public RemoteIterator<LocatedFileStatus> createLocatedFileStatusIterator(
+      final String prefix, final int maxListingLength, FileSystem fs,
+      PathFilter filter, FileStatusAcceptor acceptor, String delimiter) {
+    return new RemoteIterator<LocatedFileStatus>() {
+      private String nextMarker = null;
+      private boolean firstListing = true;
+      private boolean meetEnd = false;
+      private ListIterator<FileStatus> batchIterator;
+
+      @Override
+      public boolean hasNext() throws IOException {
+        if (firstListing) {
+          requestNextBatch();
+          firstListing = false;
+        }
+        return batchIterator.hasNext() || requestNextBatch();
+      }
+
+      @Override
+      public LocatedFileStatus next() throws IOException {
+        if (hasNext()) {
+          FileStatus status = batchIterator.next();
+          BlockLocation[] locations = fs.getFileBlockLocations(status,
+            0, status.getLen());
+          return new LocatedFileStatus(
+              status, status.isFile() ? locations : null);
+        } else {
+          throw new NoSuchElementException();
+        }
+      }
+
+      private boolean requestNextBatch() {
+        if (meetEnd) {
+          return false;
+        }
+        ListObjectsRequest listRequest = new ListObjectsRequest(bucketName);
+        listRequest.setPrefix(AliyunOSSUtils.maybeAddTrailingSlash(prefix));
+        listRequest.setMaxKeys(maxListingLength);
+        listRequest.setMarker(nextMarker);
+        listRequest.setDelimiter(delimiter);
+        ObjectListing listing = ossClient.listObjects(listRequest);
+        List<FileStatus> stats = new ArrayList<>(
+            listing.getObjectSummaries().size() +
+            listing.getCommonPrefixes().size());
+        for(OSSObjectSummary summary: listing.getObjectSummaries()) {
+          String key = summary.getKey();
+          Path path = fs.makeQualified(new Path("/" + key));
+          if (filter.accept(path) && acceptor.accept(path, summary)) {
+            FileStatus status = new FileStatus(summary.getSize(),
+                key.endsWith("/"), 1, fs.getDefaultBlockSize(path),
+                summary.getLastModified().getTime(), path);
+            stats.add(status);
+          }
+        }
+
+        for(String commonPrefix: listing.getCommonPrefixes()) {
+          Path path = fs.makeQualified(new Path("/" + commonPrefix));
+          if (filter.accept(path) && acceptor.accept(path, commonPrefix)) {
+            FileStatus status = new FileStatus(0, true, 1, 0, 0, path);
+            stats.add(status);
+          }
+        }
+
+        batchIterator = stats.listIterator();
+        if (listing.isTruncated()) {
+          nextMarker = listing.getNextMarker();
+        } else {
+          meetEnd = true;
+        }
+        statistics.incrementReadOps(1);
+        return batchIterator.hasNext();
+      }
+    };
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS43 INS43 INS83 INS43 INS42 INS83 INS5 INS42 INS41 INS43 INS43 INS83 INS43 INS42 INS83 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS43 INS85 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS74 INS1 INS74 INS1 INS43 INS43 INS23 INS31 INS31 INS43 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS42 INS42 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS42 INS9 INS42 INS42 INS41 INS42 INS42 INS42 INS25 INS42 INS42 INS33 INS42 INS9 INS42 INS9 INS43 INS43 INS42 INS42 INS42 INS25 INS41 INS42 INS42 INS42 INS25 INS25 INS60 INS21 INS21 INS21 INS21 INS60 INS60 INS70 INS70 INS21 INS25 INS21 INS41 INS27 INS32 INS8 INS8 INS42 INS42 INS42 INS8 INS27 INS32 INS8 INS8 INS42 INS8 INS43 INS59 INS32 INS32 INS32 INS32 INS43 INS59 INS74 INS59 INS44 INS32 INS8 INS44 INS32 INS8 INS7 INS32 INS8 INS8 INS32 INS32 INS27 INS42 INS42 INS60 INS21 INS41 INS53 INS21 INS21 INS32 INS32 INS42 INS60 INS60 INS41 INS53 INS41 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS34 INS42 INS42 INS42 INS33 INS43 INS59 INS7 INS42 INS14 INS32 INS7 INS42 INS42 INS42 INS43 INS59 INS5 INS59 INS14 INS14 INS9 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS27 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS7 INS7 INS42 INS42 INS14 INS42 INS9 INS43 INS42 INS42 INS9 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS42 INS16 INS43 INS42 INS43 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS60 INS21 INS42 INS42 INS32 INS32 INS32 INS60 INS21 INS42 INS32 INS42 INS9 INS43 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS32 INS32 INS34 INS32 INS32 INS42 INS42 INS45 INS42 INS43 INS34 INS9 INS34 INS34 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42