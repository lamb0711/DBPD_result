HDFS-10673. Optimize FSPermissionChecker's internal path usage. Contributed by Daryn Sharp.

+  private static String constructPath(INodeAttributes[] inodes, int end) {
+    byte[][] components = new byte[end+1][];
+    for (int i=0; i <= end; i++) {
+      components[i] = inodes[i].getLocalNameBytes();
+    }
+    return DFSUtil.byteArray2PathString(components);
+  }
+
-      FsAction access, FsPermission mode) {
-    return toAccessControlString(inodeAttrib, path, access, mode, false);
+      FsAction access) {
+    return toAccessControlString(inodeAttrib, path, access, false);
-      String path, FsAction access, FsPermission mode, boolean deniedFromAcl) {
+      String path, FsAction access, boolean deniedFromAcl) {
-      .append(mode);
+      .append(inodeAttrib.getFsPermission());
+  private AccessControlEnforcer getAccessControlEnforcer() {
+    return (attributeProvider != null)
+        ? attributeProvider.getExternalAccessControlEnforcer(this) : this;
+  }
+
-    final byte[][] pathByNameArr = new byte[inodes.length][];
+    final byte[][] components = inodesInPath.getPathComponents();
-      if (inodes[i] != null) {
-        pathByNameArr[i] = inodes[i].getLocalNameBytes();
-        inodeAttrs[i] = getINodeAttrs(pathByNameArr, i, inodes[i], snapshotId);
-      }
+      inodeAttrs[i] = getINodeAttrs(components, i, inodes[i], snapshotId);
-    AccessControlEnforcer enforcer =
-        getAttributesProvider().getExternalAccessControlEnforcer(this);
+    AccessControlEnforcer enforcer = getAccessControlEnforcer();
-        pathByNameArr, snapshotId, path, ancestorIndex, doCheckOwner,
+        components, snapshotId, path, ancestorIndex, doCheckOwner,
-  /**
-   * Check whether exception e is due to an ancestor inode's not being
-   * directory.
-   */
-  private void checkAncestorType(INode[] inodes, int checkedAncestorIndex,
-      AccessControlException e) throws AccessControlException {
-    for (int i = 0; i <= checkedAncestorIndex; i++) {
-      if (inodes[i] == null) {
-        break;
-      }
-      if (!inodes[i].isDirectory()) {
-        throw new AccessControlException(
-            e.getMessage() + " (Ancestor " + inodes[i].getFullPathName()
-                + " is not a directory).");
-      }
-    }
-    throw e;
-  }
-
-      INode[] inodes, byte[][] pathByNameArr, int snapshotId, String path,
+      INode[] inodes, byte[][] components, int snapshotId, String path,
-    checkTraverse(inodeAttrs, inodes, path, ancestorIndex);
+    checkTraverse(inodeAttrs, ancestorIndex);
-      checkStickyBit(inodeAttrs[inodeAttrs.length - 2], last, path);
+      checkStickyBit(inodeAttrs, inodeAttrs.length - 2);
-      check(inodeAttrs, path, ancestorIndex, ancestorAccess);
+      check(inodeAttrs, ancestorIndex, ancestorAccess);
-      check(inodeAttrs, path, inodeAttrs.length - 2, parentAccess);
+      check(inodeAttrs, inodeAttrs.length - 2, parentAccess);
-      check(last, path, access);
+      check(inodeAttrs, inodeAttrs.length - 1, access);
-      checkSubAccess(pathByNameArr, inodeAttrs.length - 1, rawLast,
+      checkSubAccess(components, inodeAttrs.length - 1, rawLast,
-      checkOwner(last);
+      checkOwner(inodeAttrs, inodeAttrs.length - 1);
-  private void checkOwner(INodeAttributes inode
-      ) throws AccessControlException {
-    if (getUser().equals(inode.getUserName())) {
+  private void checkOwner(INodeAttributes[] inodes, int i)
+      throws AccessControlException {
+    if (getUser().equals(inodes[i].getUserName())) {
-            "Permission denied. user="
-            + getUser() + " is not the owner of inode=" + inode);
+        "Permission denied. user=" + getUser() +
+        " is not the owner of inode=" + constructPath(inodes, i));
-  private void checkTraverse(INodeAttributes[] inodeAttrs, INode[] inodes,
-      String path, int last) throws AccessControlException {
-    int j = 0;
-    try {
-      for (; j <= last; j++) {
-        check(inodeAttrs[j], path, FsAction.EXECUTE);
+  private void checkTraverse(INodeAttributes[] inodeAttrs, int last)
+      throws AccessControlException {
+    for (int i=0; i <= last; i++) {
+      INodeAttributes inode = inodeAttrs[i];
+      if (!inode.isDirectory()) {
+        throw new AccessControlException(
+            constructPath(inodeAttrs, i) + " (is not a directory)");
-    } catch (AccessControlException e) {
-      checkAncestorType(inodes, j, e);
+      if (!hasPermission(inode, FsAction.EXECUTE)) {
+        throw new AccessControlException(toAccessControlString(
+            inode, constructPath(inodeAttrs, i), FsAction.EXECUTE));
+      }
-  private void checkSubAccess(byte[][] pathByNameArr, int pathIdx, INode inode,
-      int snapshotId, FsAction access, boolean ignoreEmptyDir)
+  private void checkSubAccess(byte[][] components, int pathIdx,
+      INode inode, int snapshotId, FsAction access, boolean ignoreEmptyDir)
-        check(getINodeAttrs(pathByNameArr, pathIdx, d, snapshotId),
-            inode.getFullPathName(), access);
+        INodeAttributes inodeAttr =
+            getINodeAttrs(components, pathIdx, d, snapshotId);
+        if (!hasPermission(inodeAttr, access)) {
+          throw new AccessControlException(
+              toAccessControlString(inodeAttr, d.getFullPathName(), access));
+        }
-  private void check(INodeAttributes[] inodes, String path, int i, FsAction access
-      ) throws AccessControlException {
-    check(i >= 0 ? inodes[i] : null, path, access);
+  private void check(INodeAttributes[] inodes, int i, FsAction access)
+      throws AccessControlException {
+    INodeAttributes inode = (i >= 0) ? inodes[i] : null;
+    if (inode != null && !hasPermission(inode, access)) {
+      throw new AccessControlException(
+          toAccessControlString(inode, constructPath(inodes, i), access));
+    }
-  private void check(INodeAttributes inode, String path, FsAction access
-      ) throws AccessControlException {
+  // return whether access is permitted.  note it neither requires a path or
+  // throws so the caller can build the path only if required for an exception.
+  // very beneficial for subaccess checks!
+  private boolean hasPermission(INodeAttributes inode, FsAction access) {
-      return;
+      return true;
-        checkAccessAcl(inode, path, access, mode, aclFeature);
-        return;
+        return hasAclPermission(inode, access, mode, aclFeature);
+    final FsAction checkAction;
-      if (mode.getUserAction().implies(access)) { return; }
+      checkAction = mode.getUserAction();
+    } else if (getGroups().contains(inode.getGroupName())) { //group class
+      checkAction = mode.getGroupAction();
+    } else { //other class
+      checkAction = mode.getOtherAction();
-    else if (getGroups().contains(inode.getGroupName())) { //group class
-      if (mode.getGroupAction().implies(access)) { return; }
-    }
-    else { //other class
-      if (mode.getOtherAction().implies(access)) { return; }
-    }
-    throw new AccessControlException(
-        toAccessControlString(inode, path, access, mode));
+    return checkAction.implies(access);
-  private void checkAccessAcl(INodeAttributes inode, String path,
-      FsAction access, FsPermission mode, AclFeature aclFeature)
-      throws AccessControlException {
+  private boolean hasAclPermission(INodeAttributes inode,
+      FsAction access, FsPermission mode, AclFeature aclFeature) {
-        return;
+        return true;
-              return;
+              return true;
-              return;
+              return true;
-    if (!foundMatch && mode.getOtherAction().implies(access)) {
-      return;
-    }
-
-    throw new AccessControlException(
-        toAccessControlString(inode, path, access, mode));
+    return !foundMatch && mode.getOtherAction().implies(access);
-  private void checkStickyBit(INodeAttributes parent, INodeAttributes inode,
-      String path) throws AccessControlException {
+  private void checkStickyBit(INodeAttributes[] inodes, int index)
+      throws AccessControlException {
+    INodeAttributes parent = inodes[index];
+    INodeAttributes inode = inodes[index + 1];
-        path, inode.getUserName(), inode.getGroupName(),
+        constructPath(inodes, index + 1),
+        inode.getUserName(), inode.getGroupName(),
-        path.substring(0, path.length() - inode.toString().length() - 1 ),
+        constructPath(inodes, index),

INS31 INS31 MOV83 INS83 MOV43 UPD42 MOV42 MOV44 MOV44 INS8 INS43 INS42 INS83 INS43 INS42 INS8 INS44 MOV43 INS8 INS8 UPD39 UPD42 UPD39 INS42 UPD5 UPD42 MOV60 INS24 INS41 UPD42 MOV42 INS42 INS41 INS60 UPD42 INS5 UPD42 INS39 INS42 INS24 UPD42 INS60 INS25 INS60 INS41 MOV41 INS5 UPD42 INS39 INS42 INS60 INS60 UPD43 INS5 INS58 MOV27 INS37 MOV8 INS32 INS16 INS83 MOV5 INS59 MOV8 INS43 INS85 MOV58 INS27 MOV37 INS8 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS32 MOV27 INS43 INS85 MOV43 INS59 INS43 INS59 UPD42 INS39 INS85 INS85 UPD42 INS39 INS59 UPD42 INS42 MOV21 INS42 INS42 UPD42 MOV42 INS36 INS32 INS52 INS42 INS32 UPD42 MOV42 MOV32 INS42 INS42 INS60 INS25 INS25 UPD42 MOV42 INS42 MOV16 INS27 INS38 INS53 UPD42 MOV42 INS42 INS21 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 INS2 INS42 INS42 INS2 INS27 INS42 INS34 INS32 INS27 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS42 UPD42 UPD42 INS32 INS43 INS59 INS38 INS8 INS38 INS8 INS36 INS42 INS33 INS32 INS14 INS9 INS7 INS21 INS21 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS34 UPD42 MOV42 INS42 INS42 INS33 INS42 MOV27 UPD42 INS27 UPD42 INS27 UPD42 MOV27 INS42 INS42 INS42 UPD42 MOV42 INS42 INS2 INS32 INS53 INS32 INS53 INS60 INS25 MOV27 INS42 INS42 INS42 MOV43 INS32 INS41 INS42 INS32 INS7 INS7 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS40 INS34 INS40 INS34 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS14 INS43 INS59 INS38 INS8 INS42 UPD42 MOV42 INS42 INS32 MOV42 INS32 MOV42 MOV42 INS42 MOV32 INS42 MOV32 INS9 INS42 INS34 MOV43 INS27 MOV43 INS32 INS42 INS42 INS32 INS32 INS53 UPD42 MOV42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 INS32 INS45 UPD42 MOV42 UPD42 MOV42 INS32 INS40 MOV42 UPD42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS32 INS42 INS42 MOV32 MOV42 UPD42 INS9 INS9 DEL83 DEL40 DEL42 DEL42 DEL2 DEL33 DEL27 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL52 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL2 DEL33 DEL27 DEL10 DEL8 DEL25 DEL42 DEL42 DEL2 DEL32 DEL38 DEL32 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL24 DEL42 DEL53 DEL8 DEL31 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL40 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL44 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL32 DEL32 DEL21 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL41 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL14 DEL53 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL53 DEL42 DEL44 DEL43 DEL42 DEL43 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL32 DEL32 DEL34 DEL27 DEL32