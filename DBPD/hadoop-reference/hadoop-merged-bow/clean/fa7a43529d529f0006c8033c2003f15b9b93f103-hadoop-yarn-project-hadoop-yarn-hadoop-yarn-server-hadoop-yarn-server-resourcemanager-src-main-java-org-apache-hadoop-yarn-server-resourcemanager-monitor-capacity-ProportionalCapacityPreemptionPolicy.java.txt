Revert "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)"

This reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.

-import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.api.records.NodeId;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.preemption.PreemptableQueue;
-  private final Map<RMContainer, Long> preempted = new HashMap<>();
-
+  private final Map<RMContainer,Long> preempted =
+    new HashMap<RMContainer,Long>();
-  // Preemptable Entities, synced from scheduler at every run
-  private Map<String, PreemptableQueue> preemptableEntities = null;
-  private Set<ContainerId> killableContainers;
-
-
-  @SuppressWarnings("unchecked")
-  private void cleanupStaledKillableContainers(Resource cluster,
-      Set<String> leafQueueNames) {
-    for (String q : leafQueueNames) {
-      for (TempQueuePerPartition tq : getQueuePartitions(q)) {
-        // When queue's used - killable <= guaranteed and, killable > 0, we need
-        // to check if any of killable containers needs to be reverted
-        if (Resources.lessThanOrEqual(rc, cluster,
-            Resources.subtract(tq.current, tq.killable), tq.idealAssigned)
-            && Resources.greaterThan(rc, cluster, tq.killable, Resources.none())) {
-          // How many killable resources need to be reverted
-          // need-to-revert = already-marked-killable - (current - ideal)
-          Resource toBeRevertedFromKillable = Resources.subtract(tq.killable,
-              Resources.subtract(tq.current, tq.idealAssigned));
-
-          Resource alreadyReverted = Resources.createResource(0);
-
-          for (RMContainer c : preemptableEntities.get(q).getKillableContainers(
-              tq.partition).values()) {
-            if (Resources.greaterThanOrEqual(rc, cluster, alreadyReverted,
-                toBeRevertedFromKillable)) {
-              break;
-            }
-
-            if (Resources.greaterThan(rc, cluster,
-                Resources.add(alreadyReverted, c.getAllocatedResource()),
-                toBeRevertedFromKillable)) {
-              continue;
-            } else {
-              // This container need to be marked to unkillable
-              Resources.addTo(alreadyReverted, c.getAllocatedResource());
-              rmContext.getDispatcher().getEventHandler().handle(
-                  new ContainerPreemptEvent(c.getApplicationAttemptId(), c,
-                      SchedulerEventType.MARK_CONTAINER_FOR_NONKILLABLE));
-            }
-          }
-
-        }
-      }
-    }
-  }
-
-  private void syncKillableContainersFromScheduler() {
-    // sync preemptable entities from scheduler
-    preemptableEntities =
-        scheduler.getPreemptionManager().getShallowCopyOfPreemptableEntities();
-
-    killableContainers = new HashSet<>();
-    for (Map.Entry<String, PreemptableQueue> entry : preemptableEntities
-        .entrySet()) {
-      PreemptableQueue entity = entry.getValue();
-      for (Map<ContainerId, RMContainer> map : entity.getKillableContainers()
-          .values()) {
-        killableContainers.addAll(map.keySet());
-      }
-    }
-  }
-    syncKillableContainersFromScheduler();
-
-    // remove containers from killable list when we want to preempt less resources
-    // from queue.
-    cleanupStaledKillableContainers(clusterResources, leafQueueNames);
-
-      logToCSV(new ArrayList<>(leafQueueNames));
+      logToCSV(new ArrayList<String>(leafQueueNames));
-          // mark container killable
+          // kill it
-                  SchedulerEventType.MARK_CONTAINER_FOR_KILLABLE));
+                  SchedulerEventType.KILL_PREEMPTED_CONTAINER));
-    List<TempQueuePerPartition> qAlloc = new ArrayList<>(queues);
+    List<TempQueuePerPartition> qAlloc = new ArrayList<TempQueuePerPartition>(queues);
-    Set<TempQueuePerPartition> nonZeroGuarQueues = new HashSet<>();
-    Set<TempQueuePerPartition> zeroGuarQueues = new HashSet<>();
+    Set<TempQueuePerPartition> nonZeroGuarQueues = new HashSet<TempQueuePerPartition>();
+    Set<TempQueuePerPartition> zeroGuarQueues = new HashSet<TempQueuePerPartition>();
-    PriorityQueue<TempQueuePerPartition> orderedByNeed = new PriorityQueue<>(10,
-        tqComparator);
+    PriorityQueue<TempQueuePerPartition> orderedByNeed =
+        new PriorityQueue<TempQueuePerPartition>(10, tqComparator);
-    ArrayList<TempQueuePerPartition> underserved = new ArrayList<>();
+    ArrayList<TempQueuePerPartition> underserved = new ArrayList<TempQueuePerPartition>();
-        q.normalizedGuarantee = 1.0f / queues.size();
+        q.normalizedGuarantee = (float)  1.0f / ((float) queues.size());
-  private String getPartitionByRMContainer(RMContainer rmContainer) {
-    return scheduler.getSchedulerNode(rmContainer.getAllocatedNode())
-        .getPartition();
+  private String getPartitionByNodeId(NodeId nodeId) {
+    return scheduler.getSchedulerNode(nodeId).getPartition();
-    String nodePartition = getPartitionByRMContainer(rmContainer);
+    String nodePartition = getPartitionByNodeId(rmContainer.getAllocatedNode());
-      set = new HashSet<>();
+      set = new HashSet<RMContainer>();
-   * @param leafQueueNames set of leaf queues to preempt from
+   * @param queues set of leaf queues to preempt from
-        new HashMap<>();
-    List<RMContainer> skippedAMContainerlist = new ArrayList<>();
+        new HashMap<ApplicationAttemptId, Set<RMContainer>>();
+    List<RMContainer> skippedAMContainerlist = new ArrayList<RMContainer>();
-          new HashMap<>();
+          new HashMap<String, Resource>();
+   * @param resToObtain
-        new ArrayList<>(app.getReservedContainers());
+        new ArrayList<RMContainer>(app.getReservedContainers());
-    List<RMContainer> liveContainers = new ArrayList<>(app.getLiveContainers());
+    List<RMContainer> liveContainers =
+      new ArrayList<RMContainer>(app.getLiveContainers());
-      // Skip already marked to killable containers
-      if (killableContainers.contains(c.getContainerId())) {
-        continue;
-      }
-
-  @VisibleForTesting
-  public Map<RMContainer, Long> getToPreemptContainers() {
-    return preempted;
-  }
-      Resource killable = Resources.none();
-      if (null != preemptableEntities.get(queueName)) {
-         killable = preemptableEntities.get(queueName)
-            .getKillableResource(partitionToLookAt);
-      }
-            maxCapacity, preemptionDisabled, partitionToLookAt, killable);
+            maxCapacity, preemptionDisabled, partitionToLookAt);
-                guaranteed, maxCapacity, false, partitionToLookAt, killable);
+                guaranteed, maxCapacity, false, partitionToLookAt);
-      queuePartitions = new HashMap<>();
+      queuePartitions = new HashMap<String, TempQueuePerPartition>();
-    final Resource killable;
-
-        String partition, Resource killableResource) {
+        String partition) {
-      this.children = new ArrayList<>();
+      this.children = new ArrayList<TempQueuePerPartition>();
-      this.killable = killableResource;
+    public void addChildren(ArrayList<TempQueuePerPartition> queues) {
+      assert leafQueue == null;
+      children.addAll(queues);
+    }
+
+
+    public void printAll() {
+      LOG.info(this.toString());
+      for (TempQueuePerPartition sub : this.getChildren()) {
+        sub.printAll();
+      }
+    }
+
-      if (Resources.greaterThan(rc, clusterResource,
-          Resources.subtract(current, killable), idealAssigned)) {
-        toBePreempted = Resources.multiply(Resources.subtract(
-            Resources.subtract(current, killable), idealAssigned),
-            scalingFactor);
+      if (Resources.greaterThan(rc, clusterResource, current, idealAssigned)) {
+          toBePreempted = Resources.multiply(
+              Resources.subtract(current, idealAssigned), scalingFactor);

MOV31 UPD40 MOV60 MOV43 INS42 INS44 INS8 INS31 INS31 UPD43 MOV43 UPD42 MOV42 INS41 INS65 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 UPD74 INS74 INS59 INS74 INS59 UPD42 INS32 MOV43 UPD42 INS59 INS42 INS74 INS42 INS6 INS21 INS21 INS70 MOV43 INS43 UPD42 UPD42 MOV43 INS43 INS42 INS14 MOV43 INS43 INS42 INS14 MOV32 UPD42 MOV42 MOV32 INS42 INS14 INS43 INS43 INS27 INS32 INS32 MOV44 INS32 INS8 INS42 UPD74 UPD74 UPD74 INS42 MOV74 MOV34 MOV42 INS42 MOV74 UPD42 UPD42 UPD42 UPD42 INS74 UPD74 MOV59 INS74 UPD74 MOV74 UPD42 MOV42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS52 INS42 INS21 MOV42 INS43 INS43 INS43 MOV43 INS43 UPD74 MOV74 INS43 UPD42 MOV43 INS43 INS43 UPD74 INS52 INS42 INS32 UPD74 MOV8 MOV21 INS42 INS42 INS42 UPD74 INS42 UPD43 INS42 UPD74 INS42 INS42 UPD74 INS43 INS42 INS42 MOV43 INS43 UPD42 MOV43 MOV43 MOV43 INS43 INS42 INS11 INS36 INS42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS39 INS34 INS11 INS42 UPD42 UPD40 INS39 MOV32 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL31 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL14 DEL32 DEL21 DEL8 DEL42 DEL74 DEL14 DEL59 DEL42 DEL74 DEL14 DEL59 DEL34 DEL42 DEL45 DEL79 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL10 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL18 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL70 DEL8 DEL70 DEL8 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL74 DEL14 DEL59 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL18 DEL8 DEL25 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL83 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32