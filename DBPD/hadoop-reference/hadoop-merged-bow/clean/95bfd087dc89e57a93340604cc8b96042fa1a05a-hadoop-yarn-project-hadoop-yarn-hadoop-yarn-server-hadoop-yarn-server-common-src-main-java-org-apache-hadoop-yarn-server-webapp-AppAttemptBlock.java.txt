YARN-1809. Synchronize RM and TimeLineServer Web-UIs. Contributed by Zhijie Shen and Xuan Gong

+import org.apache.hadoop.yarn.api.ApplicationBaseProtocol;
+import org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptReportRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainersRequest;
+import org.apache.hadoop.yarn.api.records.ContainerId;
-import org.apache.hadoop.yarn.server.api.ApplicationContext;
+import org.apache.hadoop.yarn.api.records.YarnApplicationAttemptState;
-  private final ApplicationContext appContext;
+  protected ApplicationBaseProtocol appBaseProt;
-  public AppAttemptBlock(ApplicationContext appContext) {
-    this.appContext = appContext;
+  public AppAttemptBlock(ApplicationBaseProtocol appBaseProt, ViewContext ctx) {
+    super(ctx);
+    this.appBaseProt = appBaseProt;
-    final ApplicationAttemptId appAttemptIdFinal = appAttemptId;
-    ApplicationAttemptReport appAttemptReport;
+    ApplicationAttemptReport appAttemptReport = null;
+      final GetApplicationAttemptReportRequest request =
+          GetApplicationAttemptReportRequest.newInstance(appAttemptId);
-        appAttemptReport = appContext.getApplicationAttempt(appAttemptId);
+        appAttemptReport =
+            appBaseProt.getApplicationAttemptReport(request)
+              .getApplicationAttemptReport();
-            return appContext.getApplicationAttempt(appAttemptIdFinal);
+            return appBaseProt.getApplicationAttemptReport(request)
+                .getApplicationAttemptReport();
+
+
+    boolean exceptionWhenGetContainerReports = false;
+    Collection<ContainerReport> containers = null;
+    try {
+      final GetContainersRequest request =
+          GetContainersRequest.newInstance(appAttemptId);
+      if (callerUGI == null) {
+        containers = appBaseProt.getContainers(request).getContainerList();
+      } else {
+        containers = callerUGI.doAs(
+            new PrivilegedExceptionAction<Collection<ContainerReport>> () {
+          @Override
+          public Collection<ContainerReport> run() throws Exception {
+            return  appBaseProt.getContainers(request).getContainerList();
+          }
+        });
+      }
+    } catch (RuntimeException e) {
+      // have this block to suppress the findbugs warning
+      exceptionWhenGetContainerReports = true;
+    } catch (Exception e) {
+      exceptionWhenGetContainerReports = true;
+    }
+
-      ._("State", appAttempt.getAppAttemptState())
-        "Master Container",
-        appAttempt.getAmContainerId() == null ? "#" : root_url("container",
-          appAttempt.getAmContainerId()),
+        "Application Attempt State:",
+        appAttempt.getAppAttemptState() == null ? UNAVAILABLE : appAttempt
+          .getAppAttemptState())
+      ._(
+        "AM Container:",
+        appAttempt.getAmContainerId() == null || containers == null
+            || !hasAMContainer(appAttemptReport.getAMContainerId(), containers)
+            ? null : root_url("container", appAttempt.getAmContainerId()),
-        appAttempt.getTrackingUrl() == null ? "#" : root_url(appAttempt
-          .getTrackingUrl()), "History")
-      ._("Diagnostics Info:", appAttempt.getDiagnosticsInfo());
+        appAttempt.getTrackingUrl() == null
+            || appAttempt.getTrackingUrl() == UNAVAILABLE ? null
+            : root_url(appAttempt.getTrackingUrl()),
+        appAttempt.getTrackingUrl() == null
+            || appAttempt.getTrackingUrl() == UNAVAILABLE
+            ? "Unassigned"
+            : appAttempt.getAppAttemptState() == YarnApplicationAttemptState.FINISHED
+                || appAttempt.getAppAttemptState() == YarnApplicationAttemptState.FAILED
+                || appAttempt.getAppAttemptState() == YarnApplicationAttemptState.KILLED
+                ? "History" : "ApplicationMaster")
+      ._("Diagnostics Info:", appAttempt.getDiagnosticsInfo() == null ?
+          "" : appAttempt.getDiagnosticsInfo());
-    Collection<ContainerReport> containers;
-    try {
-      if (callerUGI == null) {
-        containers = appContext.getContainers(appAttemptId).values();
-      } else {
-        containers = callerUGI.doAs(
-            new PrivilegedExceptionAction<Collection<ContainerReport>> () {
-          @Override
-          public Collection<ContainerReport> run() throws Exception {
-            return  appContext.getContainers(appAttemptIdFinal).values();
-          }
-        });
-      }
-    } catch (RuntimeException e) {
-      // have this block to suppress the findbugs warning
-      html
-      .p()
-      ._(
-        "Sorry, Failed to get containers for application attempt" + attemptid
-            + ".")._();
-      return;
-    } catch (Exception e) {
+    if (exceptionWhenGetContainerReports) {
-        .append(container.getAssignedNodeId())
+        .append("#") // TODO: replace with node http address (YARN-1884)
-        .append(
-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils
-            .escapeHtml(container.getAssignedNodeId()))).append("</a>\",\"")
+        .append(container.getAssignedNodeId() == null ? "N/A" :
+            StringEscapeUtils.escapeJavaScript(StringEscapeUtils
+                .escapeHtml(container.getAssignedNodeId())))
+        .append("</a>\",\"")
+
+  private boolean hasAMContainer(ContainerId containerId,
+      Collection<ContainerReport> containers) {
+    for (ContainerReport container : containers) {
+      if (containerId.equals(container.getContainerId())) {
+        return true;
+      }
+    }
+    return false;
+  }

MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS31 UPD83 UPD43 INS44 MOV60 MOV60 MOV60 MOV54 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 UPD42 UPD43 UPD42 INS43 INS42 INS46 INS25 INS43 INS42 INS74 INS42 INS70 INS41 UPD42 INS42 INS42 MOV43 INS39 INS42 MOV8 INS42 INS43 INS43 INS44 INS42 INS8 INS9 UPD42 UPD42 INS33 INS60 UPD42 INS9 INS33 INS60 INS8 INS16 INS42 INS42 INS43 INS42 INS25 UPD42 INS83 INS43 INS59 INS83 INS43 INS59 INS21 INS16 INS27 INS45 MOV32 INS42 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS7 INS7 INS27 INS33 INS27 INS45 INS16 INS32 INS33 INS42 INS42 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS9 UPD45 MOV27 INS27 INS27 INS27 INS27 INS45 INS45 INS42 INS42 INS42 INS42 INS9 UPD45 INS16 INS27 INS33 INS32 INS42 INS32 INS33 INS32 INS42 INS27 INS27 INS32 UPD42 UPD42 INS27 INS42 MOV32 INS27 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS32 INS40 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 INS32 INS33 MOV27 INS27 INS32 INS32 INS40 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS27 INS45 MOV32 INS32 UPD42 UPD42 INS45 MOV32 INS33 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL42 DEL32 DEL41 DEL45 DEL45 DEL45