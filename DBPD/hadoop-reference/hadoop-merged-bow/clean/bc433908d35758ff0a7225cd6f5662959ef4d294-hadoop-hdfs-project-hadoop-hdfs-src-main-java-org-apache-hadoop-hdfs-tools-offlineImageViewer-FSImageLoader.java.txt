HDFS-8462. Implement GETXATTRS and LISTXATTRS operations for WebImageViewer. Contributed by Jagadesh Kiran N.

-import java.io.EOFException;
+import org.apache.hadoop.fs.XAttr;
+import org.apache.hadoop.hdfs.XAttrHelper;
+import org.apache.hadoop.hdfs.web.resources.XAttrEncodingParam;
+   * Return the JSON formatted XAttrNames of the specified file.
+   *
+   * @param path
+   *          a path specifies a file
+   * @return JSON formatted XAttrNames
+   * @throws IOException
+   *           if failed to serialize fileStatus to JSON.
+   */
+  String listXAttrs(String path) throws IOException {
+    return JsonUtil.toJsonString(getXAttrList(path));
+  }
+
+  /**
+   * Return the JSON formatted XAttrs of the specified file.
+   *
+   * @param path
+   *          a path specifies a file
+   * @return JSON formatted XAttrs
+   * @throws IOException
+   *           if failed to serialize fileStatus to JSON.
+   */
+  String getXAttrs(String path, List<String> names, String encoder)
+      throws IOException {
+
+    List<XAttr> xAttrs = getXAttrList(path);
+    List<XAttr> filtered;
+    if (names == null || names.size() == 0) {
+      filtered = xAttrs;
+    } else {
+      filtered = Lists.newArrayListWithCapacity(names.size());
+      for (String name : names) {
+        XAttr search = XAttrHelper.buildXAttr(name);
+
+        boolean found = false;
+        for (XAttr aXAttr : xAttrs) {
+          if (aXAttr.getNameSpace() == search.getNameSpace()
+              && aXAttr.getName().equals(search.getName())) {
+
+            filtered.add(aXAttr);
+            found = true;
+            break;
+          }
+        }
+
+        if (!found) {
+          throw new IOException(
+              "At least one of the attributes provided was not found.");
+        }
+      }
+
+    }
+    return JsonUtil.toJsonString(filtered,
+        new XAttrEncodingParam(encoder).getEncoding());
+  }
+
+  private List<XAttr> getXAttrList(String path) throws IOException {
+    long id = lookup(path);
+    FsImageProto.INodeSection.INode inode = fromINodeId(id);
+    switch (inode.getType()) {
+    case FILE:
+      return FSImageFormatPBINode.Loader.loadXAttrs(
+          inode.getFile().getXAttrs(), stringTable);
+    case DIRECTORY:
+      return FSImageFormatPBINode.Loader.loadXAttrs(inode.getDirectory()
+          .getXAttrs(), stringTable);
+    default:
+      return null;
+    }
+  }
+
+  /**

MOV26 INS26 INS26 UPD40 INS40 INS40 INS31 INS31 INS31 INS29 INS43 INS42 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS74 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS50 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS42 INS74 INS59 INS74 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS32 INS49 INS41 INS49 INS41 INS49 INS41 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS27 INS27 INS21 INS21 INS70 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS7 INS7 INS44 INS42 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS60 INS60 INS70 INS25 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS43 INS42 INS25 INS42 INS53 INS42 INS42 INS42 INS42 INS27 INS8 INS14 INS27 INS32 INS21 INS21 INS10 INS43 INS45 INS32 INS32 INS32 INS42 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9