HDFS-10330. Add Corrupt Blocks Information in Metasave output. Contributed by Kuhu Shukla.

+import org.apache.hadoop.util.StringUtils;
+    //Dump corrupt blocks and their storageIDs
+    Set<Block> corruptBlocks = corruptReplicas.getCorruptBlocks();
+    out.println("Corrupt Blocks:");
+    for(Block block : corruptBlocks) {
+      Collection<DatanodeDescriptor> corruptNodes =
+          corruptReplicas.getNodes(block);
+      if (corruptNodes == null) {
+        LOG.warn(block.getBlockId() +
+            " is corrupt but has no associated node.");
+        continue;
+      }
+      int numNodesToFind = corruptNodes.size();
+      for (DatanodeStorageInfo storage : blocksMap.getStorages(block)) {
+        DatanodeDescriptor node = storage.getDatanodeDescriptor();
+        if (corruptNodes.contains(node)) {
+          String storageId = storage.getStorageID();
+          DatanodeStorageInfo storageInfo = node.getStorageInfo(storageId);
+          State state = (storageInfo == null) ? null : storageInfo.getState();
+          out.println("Block=" + block.getBlockId() + "\tNode=" + node.getName()
+              + "\tStorageID=" + storageId + "\tStorageState=" + state
+              + "\tTotalReplicas=" +
+              blocksMap.numNodes(block)
+              + "\tReason=" + corruptReplicas.getCorruptReason(block, node));
+          numNodesToFind--;
+          if (numNodesToFind == 0) {
+            break;
+          }
+        }
+      }
+      if (numNodesToFind > 0) {
+        String[] corruptNodesList = new String[corruptNodes.size()];
+        int i = 0;
+        for (DatanodeDescriptor d : corruptNodes) {
+          corruptNodesList[i] = d.getHostName();
+          i++;
+        }
+        out.println(block.getBlockId() + " corrupt on " +
+            StringUtils.join(",", corruptNodesList) + " but not all nodes are" +
+            "found in its block locations");
+      }
+    }
+

INS26 INS40 INS60 INS21 INS70 INS74 INS59 INS32 INS44 INS42 INS8 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS43 INS42 INS60 INS25 INS60 INS70 INS25 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS39 INS59 INS44 INS32 INS8 INS27 INS8 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS18 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS60 INS25 INS42 INS34 INS60 INS60 INS70 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS25 INS43 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS21 INS42 INS42 INS27 INS32 INS45 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS37 INS27 INS8 INS42 INS5 INS32 INS42 INS7 INS37 INS32 INS45 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS27 INS42 INS42 INS34 INS10 INS43 INS85 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS32 INS45 INS32 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33