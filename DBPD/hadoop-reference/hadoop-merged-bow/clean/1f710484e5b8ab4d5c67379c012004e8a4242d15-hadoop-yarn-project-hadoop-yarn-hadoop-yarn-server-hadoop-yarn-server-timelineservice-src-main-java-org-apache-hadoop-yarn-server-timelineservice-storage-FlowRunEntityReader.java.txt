YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)

+import org.apache.hadoop.hbase.filter.BinaryComparator;
+import org.apache.hadoop.hbase.filter.BinaryPrefixComparator;
+import org.apache.hadoop.hbase.filter.FamilyFilter;
+import org.apache.hadoop.hbase.filter.FilterList;
+import org.apache.hadoop.hbase.filter.QualifierFilter;
+import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
+import org.apache.hadoop.hbase.filter.FilterList.Operator;
+import org.apache.hadoop.yarn.server.timelineservice.reader.filter.TimelineFilterList;
+import org.apache.hadoop.yarn.server.timelineservice.reader.filter.TimelineFilterUtils;
+import org.apache.hadoop.yarn.server.timelineservice.storage.flow.FlowRunColumnFamily;
+      TimelineFilterList confsToRetrieve, TimelineFilterList metricsToRetrieve,
-        eventFilters, fieldsToRetrieve, true);
+        eventFilters, null, metricsToRetrieve, fieldsToRetrieve, true);
-      String entityId, EnumSet<Field> fieldsToRetrieve) {
+      String entityId, TimelineFilterList confsToRetrieve,
+      TimelineFilterList metricsToRetrieve, EnumSet<Field> fieldsToRetrieve) {
-        fieldsToRetrieve);
+        null, metricsToRetrieve, fieldsToRetrieve);
+      if (!fieldsToRetrieve.contains(Field.METRICS) &&
+          metricsToRetrieve != null &&
+          !metricsToRetrieve.getFilterList().isEmpty()) {
+        fieldsToRetrieve.add(Field.METRICS);
+      }
-  protected Result getResult(Configuration hbaseConf, Connection conn)
-      throws IOException {
+  protected FilterList constructFilterListBasedOnFields() {
+    FilterList list = new FilterList(Operator.MUST_PASS_ONE);
+
+    // By default fetch everything in INFO column family.
+    FamilyFilter infoColumnFamily =
+        new FamilyFilter(CompareOp.EQUAL,
+           new BinaryComparator(FlowRunColumnFamily.INFO.getBytes()));
+    // Metrics not required.
+    if (!singleEntityRead && !fieldsToRetrieve.contains(Field.METRICS) &&
+        !fieldsToRetrieve.contains(Field.ALL)) {
+      FilterList infoColFamilyList = new FilterList(Operator.MUST_PASS_ONE);
+      infoColFamilyList.addFilter(infoColumnFamily);
+      infoColFamilyList.addFilter(
+          new QualifierFilter(CompareOp.NOT_EQUAL,
+          new BinaryPrefixComparator(
+          FlowRunColumnPrefix.METRIC.getColumnPrefixBytes(""))));
+      list.addFilter(infoColFamilyList);
+    }
+    if (metricsToRetrieve != null &&
+        !metricsToRetrieve.getFilterList().isEmpty()) {
+      FilterList infoColFamilyList = new FilterList();
+      infoColFamilyList.addFilter(infoColumnFamily);
+      infoColFamilyList.addFilter(TimelineFilterUtils.createHBaseFilterList(
+          FlowRunColumnPrefix.METRIC, metricsToRetrieve));
+      list.addFilter(infoColFamilyList);
+    }
+    return list;
+  }
+
+  @Override
+  protected Result getResult(Configuration hbaseConf, Connection conn,
+      FilterList filterList) throws IOException {
+    if (filterList != null && !filterList.getFilters().isEmpty()) {
+      get.setFilter(filterList);
+    }
-      Connection conn) throws IOException {
+      Connection conn, FilterList filterList) throws IOException {
-    scan.setFilter(new PageFilter(limit));
+    FilterList newList = new FilterList();
+    newList.addFilter(new PageFilter(limit));
+    if (filterList != null && !filterList.getFilters().isEmpty()) {
+      newList.addFilter(filterList);
+    }
+    scan.setFilter(newList);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS44 INS44 INS44 INS44 INS78 INS83 INS43 INS42 INS8 INS44 INS44 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS25 INS41 INS43 INS42 INS25 INS43 INS42 INS60 INS25 INS21 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS32 INS25 INS42 INS42 INS14 INS42 INS42 INS14 INS38 INS38 INS38 INS60 INS21 INS21 INS21 INS27 INS38 INS60 INS21 INS21 INS21 INS27 INS38 INS21 INS42 INS42 INS14 UPD42 UPD42 INS27 INS38 INS21 INS42 INS42 INS42 INS27 INS8 INS43 INS40 INS43 INS40 INS14 INS42 INS32 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS33 INS32 INS43 INS59 INS32 INS32 INS32 INS42 INS33 INS32 INS32 INS43 INS42 INS33 INS32 INS32 INS27 INS38 INS21 INS42 INS42 INS43 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS38 INS27 INS32 INS32 INS42 INS40 INS42 INS43 INS40 INS43 INS40 INS14 INS42 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS45