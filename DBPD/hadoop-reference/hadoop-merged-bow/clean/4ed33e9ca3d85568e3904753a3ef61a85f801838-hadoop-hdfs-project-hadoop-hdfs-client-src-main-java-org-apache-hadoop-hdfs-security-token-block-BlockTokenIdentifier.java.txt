HDFS-11026. Convert BlockTokenIdentifier to use Protobuf. Contributed by Ewan Higgs.

+import java.io.DataInputStream;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.AccessModeProto;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.BlockTokenSecretProto;
+import org.apache.hadoop.hdfs.protocolPB.PBHelperClient;
+  private boolean useProto;
-    this(null, null, 0, EnumSet.noneOf(AccessMode.class));
+    this(null, null, 0, EnumSet.noneOf(AccessMode.class), false);
-      EnumSet<AccessMode> modes) {
+      EnumSet<AccessMode> modes, boolean useProto) {
+    this.useProto = useProto;
+  /**
+   * readFields peeks at the first byte of the DataInput and determines if it
+   * was written using WritableUtils ("Legacy") or Protobuf. We can do this
+   * because we know the first field is the Expiry date.
+   *
+   * In the case of the legacy buffer, the expiry date is a VInt, so the size
+   * (which should always be >1) is encoded in the first byte - which is
+   * always negative due to this encoding. However, there are sometimes null
+   * BlockTokenIdentifier written so we also need to handle the case there
+   * the first byte is also 0.
+   *
+   * In the case of protobuf, the first byte is a type tag for the expiry date
+   * which is written as <code>(field_number << 3 |  wire_type</code>.
+   * So as long as the field_number  is less than 16, but also positive, then
+   * we know we have a Protobuf.
+   *
+   * @param in <code>DataInput</code> to deserialize this object from.
+   * @throws IOException
+   */
+
+    final DataInputStream dis = (DataInputStream)in;
+    if (!dis.markSupported()) {
+      throw new IOException("Could not peek first byte.");
+    }
+    dis.mark(1);
+    final byte firstByte = dis.readByte();
+    dis.reset();
+    if (firstByte <= 0) {
+      readFieldsLegacy(dis);
+    } else {
+      readFieldsProtobuf(dis);
+    }
+  }
+
+  @VisibleForTesting
+  void readFieldsLegacy(DataInput in) throws IOException {
+    useProto = false;
+  }
+
+  @VisibleForTesting
+  void readFieldsProtobuf(DataInput in) throws IOException {
+    BlockTokenSecretProto blockTokenSecretProto =
+        BlockTokenSecretProto.parseFrom((DataInputStream)in);
+    expiryDate = blockTokenSecretProto.getExpiryDate();
+    keyId = blockTokenSecretProto.getKeyId();
+    if (blockTokenSecretProto.hasUserId()) {
+      userId = blockTokenSecretProto.getUserId();
+    } else {
+      userId = null;
+    }
+    if (blockTokenSecretProto.hasBlockPoolId()) {
+      blockPoolId = blockTokenSecretProto.getBlockPoolId();
+    } else {
+      blockPoolId = null;
+    }
+    blockId = blockTokenSecretProto.getBlockId();
+    for (int i = 0; i < blockTokenSecretProto.getModesCount(); i++) {
+      AccessModeProto accessModeProto = blockTokenSecretProto.getModes(i);
+      modes.add(PBHelperClient.convert(accessModeProto));
+    }
+    useProto = true;
+    if (useProto) {
+      writeProtobuf(out);
+    } else {
+      writeLegacy(out);
+    }
+  }
+
+  @VisibleForTesting
+  void writeLegacy(DataOutput out) throws IOException {
+  @VisibleForTesting
+  void writeProtobuf(DataOutput out) throws IOException {
+    BlockTokenSecretProto secret = PBHelperClient.convert(this);
+    out.write(secret.toByteArray());
+  }
+
-}
+}

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS44 INS29 MOV78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 UPD42 INS78 INS39 INS42 INS44 INS43 INS8 MOV78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 UPD42 INS78 INS39 INS42 INS44 INS43 INS8 INS42 INS39 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS42 MOV21 INS60 INS25 INS21 INS60 INS21 INS25 INS42 INS21 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS25 INS25 INS21 INS24 INS21 INS43 INS42 INS42 INS25 INS42 INS42 INS43 INS42 INS42 INS60 INS21 INS9 INS7 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS83 INS43 INS59 INS38 INS8 INS32 INS83 INS39 INS59 INS32 INS27 INS8 INS8 INS7 INS42 INS43 INS59 INS7 INS7 INS32 INS8 INS8 INS32 INS8 INS8 INS7 INS58 INS27 INS37 INS8 INS7 INS42 INS42 INS8 INS8 INS42 INS43 INS59 INS32 INS22 INS42 INS42 INS42 INS11 INS32 INS53 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS34 INS21 INS21 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS21 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS21 INS42 INS9 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS52 INS42 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS33 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83