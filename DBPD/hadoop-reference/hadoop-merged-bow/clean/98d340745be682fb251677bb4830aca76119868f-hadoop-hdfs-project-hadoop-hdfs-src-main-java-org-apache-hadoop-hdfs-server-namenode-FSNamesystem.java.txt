HDFS-8450. Erasure Coding: Consolidate erasure coding zone related implementation into a single class (Contributed by Rakesh R)

-      if (!isInECZone(src)) {
+      if (!FSDirErasureCodingOp.isInErasureCodingZone(this, src)) {
-      final ECSchema ecSchema = dir.getECSchema(iip);
+      final ECSchema ecSchema = FSDirErasureCodingOp.getErasureCodingSchema(
+          this, iip);
-  /** @return the schema manager. */
-  public ErasureCodingSchemaManager getECSchemaManager() {
+  /** @return the ErasureCodingSchemaManager. */
+  public ErasureCodingSchemaManager getErasureCodingSchemaManager() {
+  /** @return the ErasureCodingZoneManager. */
+  public ErasureCodingZoneManager getErasureCodingZoneManager() {
+    return dir.ecZoneManager;
+  }
+
-    String src = srcArg;
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.WRITE);
-    FSPermissionChecker pc = null;
-    byte[][] pathComponents = null;
-    try {
-      checkSuperuserPrivilege();
-      checkOperation(OperationCategory.WRITE);
-      pathComponents =
-          FSDirectory.getPathComponentsForReservedPath(src);
-      pc = getPermissionChecker();
-    } catch (Throwable e) {
-      logAuditEvent(success, "createErasureCodingZone", srcArg);
-      throw e;
-    }
-      checkSuperuserPrivilege();
-      checkNameNodeSafeMode("Cannot create erasure coding zone on " + src);
-      src = dir.resolvePath(pc, src, pathComponents);
-
-      final XAttr ecXAttr = dir.createErasureCodingZone(src, schema, cellSize);
-      List<XAttr> xAttrs = Lists.newArrayListWithCapacity(1);
-      xAttrs.add(ecXAttr);
-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);
-      final INodesInPath iip = dir.getINodesInPath4Write(src, false);
-      resultingStat = dir.getAuditFileInfo(iip);
+      checkNameNodeSafeMode("Cannot create erasure coding zone on " + srcArg);
+      resultingStat = FSDirErasureCodingOp.createErasureCodingZone(this,
+          srcArg, schema, cellSize, logRetryCache);
+      if (success) {
+        getEditLog().logSync();
+      }
+      logAuditEvent(success, "createErasureCodingZone", srcArg, null,
+          resultingStat);
-    getEditLog().logSync();
-    logAuditEvent(success, "createErasureCodingZone", srcArg, null, resultingStat);
-  }
-
-  private boolean isInECZone(String src) throws IOException {
-    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
-    src = FSDirectory.resolvePath(src, pathComponents, dir);
-    final INodesInPath iip = dir.getINodesInPath(src, true);
-    return dir.isInECZone(iip);
-   * Get available ECSchemas
+   * Get available erasure coding schemas
-  ECSchema[] getECSchemas() throws IOException {
+  ECSchema[] getErasureCodingSchemas() throws IOException {
-      return ecSchemaManager.getSchemas();
+      return FSDirErasureCodingOp.getErasureCodingSchemas(this);
-  ECSchema getECSchema(String schemaName) throws IOException {
+  ECSchema getErasureCodingSchema(String schemaName) throws IOException {
-      return ecSchemaManager.getSchema(schemaName);
+      return FSDirErasureCodingOp.getErasureCodingSchema(this, schemaName);
-    final byte[][] pathComponents = FSDirectory
-        .getPathComponentsForReservedPath(src);
-    final FSPermissionChecker pc = getPermissionChecker();
-    src = dir.resolvePath(pc, src, pathComponents);
-    final INodesInPath iip = dir.getINodesInPath(src, true);
-    if (isPermissionEnabled) {
-      dir.checkPathAccess(pc, iip, FsAction.READ);
-    }
-    return dir.getECZone(iip);
+    return FSDirErasureCodingOp.getErasureCodingZone(this, src);
-

MOV31 MOV31 UPD42 INS29 UPD83 INS43 INS42 MOV5 UPD42 MOV43 MOV43 INS42 MOV44 MOV43 INS65 UPD42 MOV42 MOV21 MOV21 MOV21 MOV21 UPD66 INS66 INS40 INS8 INS8 UPD66 UPD66 MOV21 MOV21 INS21 MOV21 MOV21 INS25 MOV21 MOV21 MOV21 UPD42 UPD42 INS52 UPD42 INS7 INS42 INS8 INS42 INS32 MOV21 UPD42 UPD42 INS52 INS42 UPD42 INS52 UPD42 INS42 UPD42 INS52 UPD42 UPD42 INS52 UPD42 UPD42 MOV42 MOV42 INS52 UPD42 MOV42 MOV42 MOV42 MOV42 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL85 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL8 DEL42 DEL42 DEL83 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25