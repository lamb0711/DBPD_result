YARN-6130. [ATSv2 Security] Generate a delegation token for AM when app collector is created and pass it to AM via NM and RM. Contributed by Varun Saxena.

+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.yarn.security.client.TimelineDelegationTokenIdentifier;
+  private UserGroupInformation loginUGI;
+
-    tokenMgrService = new TimelineV2DelegationTokenSecretManagerService();
+    tokenMgrService = createTokenManagerService();
+    this.loginUGI = UserGroupInformation.getCurrentUser();
-    if (UserGroupInformation.isSecurityEnabled() && !runningAsAuxService) {
+    if (UserGroupInformation.isSecurityEnabled()) {
-      try {
-        doSecureLogin();
-      } catch(IOException ie) {
-        throw new YarnRuntimeException("Failed to login", ie);
+      if (!runningAsAuxService) {
+        try {
+          doSecureLogin();
+        } catch(IOException ie) {
+          throw new YarnRuntimeException("Failed to login", ie);
+        }
+      this.loginUGI = UserGroupInformation.getLoginUser();
+  protected TimelineV2DelegationTokenSecretManagerService
+      createTokenManagerService() {
+    return new TimelineV2DelegationTokenSecretManagerService();
+  }
+
+  @VisibleForTesting
+  public TimelineV2DelegationTokenSecretManagerService
+      getTokenManagerService() {
+    return tokenMgrService;
+  }
+
+  @VisibleForTesting
+  public Token<TimelineDelegationTokenIdentifier> generateTokenForAppCollector(
+      String user) {
+    Token<TimelineDelegationTokenIdentifier> token  = tokenMgrService.
+        generateToken(UserGroupInformation.createRemoteUser(user),
+            loginUGI.getShortUserName());
+    token.setService(new Text(timelineRestServerBindAddress));
+    return token;
+  }
+
+  @VisibleForTesting
+  public void cancelTokenForAppCollector(
+      AppLevelTimelineCollector appCollector) throws IOException {
+    if (appCollector.getDelegationTokenForApp() != null) {
+      tokenMgrService.cancelToken(appCollector.getDelegationTokenForApp(),
+          appCollector.getAppUser());
+    }
+  }
+
+      // Generate token for app collector.
+      org.apache.hadoop.yarn.api.records.Token token = null;
+      if (UserGroupInformation.isSecurityEnabled() &&
+          collector instanceof AppLevelTimelineCollector) {
+        AppLevelTimelineCollector appCollector =
+            (AppLevelTimelineCollector)collector;
+        Token<TimelineDelegationTokenIdentifier> timelineToken =
+            generateTokenForAppCollector(appCollector.getAppUser());
+        appCollector.setDelegationTokenForApp(timelineToken);
+        token = org.apache.hadoop.yarn.api.records.Token.newInstance(
+            timelineToken.getIdentifier(), timelineToken.getKind().toString(),
+            timelineToken.getPassword(), timelineToken.getService().toString());
+      }
-      reportNewCollectorToNM(appId);
+      reportNewCollectorToNM(appId, token);
+  @Override
+  protected void postRemove(ApplicationId appId, TimelineCollector collector) {
+    if (collector instanceof AppLevelTimelineCollector) {
+      try {
+        cancelTokenForAppCollector((AppLevelTimelineCollector)collector);
+      } catch (IOException e) {
+        LOG.warn("Failed to cancel token for app collector with appId " +
+            appId, e);
+      }
+    }
+  }
+
-  private void reportNewCollectorToNM(ApplicationId appId)
+  private void reportNewCollectorToNM(ApplicationId appId,
+      org.apache.hadoop.yarn.api.records.Token token)
-            this.timelineRestServerBindAddress);
+            this.timelineRestServerBindAddress, token);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS42 INS42 INS21 INS25 INS42 INS41 INS42 INS42 INS41 INS42 INS43 INS43 INS43 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS42 INS25 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS7 MOV32 INS8 MOV14 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS42 INS42 INS27 INS8 INS42 INS42 INS62 INS8 INS40 INS32 INS22 INS32 MOV25 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS32 INS33 INS21 INS60 INS25 INS42 INS43 INS54 INS42 INS52 INS42 INS42 INS42 MOV38 INS7 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS8 INS12 INS42 INS22 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS40 INS42 INS33 INS32 INS62 INS60 INS60 INS21 INS21 INS42 INS21 INS44 INS8 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS59 INS74 INS59 INS32 INS7 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 DEL27