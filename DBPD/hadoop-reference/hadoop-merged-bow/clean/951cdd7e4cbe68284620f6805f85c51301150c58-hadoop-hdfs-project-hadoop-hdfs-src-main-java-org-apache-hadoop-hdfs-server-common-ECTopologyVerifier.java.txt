HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.

Signed-off-by: Wei-Chiu Chuang <weichiu@apache.org>

-import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicyInfo;
+import org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy;
+import java.util.Arrays;
+import java.util.stream.Collectors;
-   * Verifies whether the cluster setup can support all enabled EC policies.
+   * Verifies whether the cluster setup can support the given EC policies.
-   * @param policies all system and user defined erasure coding policies
+   * @param policies erasure coding policies to verify
-      final DatanodeInfo[] report, final ErasureCodingPolicyInfo[] policies) {
+      final DatanodeInfo[] report, final ErasureCodingPolicy... policies) {
-    return getECTopologyVerifierResult(policies, numOfRacks, report.length);
+    return getECTopologyVerifierResult(numOfRacks, report.length, policies);
-   * @param policies all system and user defined erasure coding policies
+   * @param policies erasure coding policies to verify
-      final ErasureCodingPolicyInfo[] policies, final int numOfRacks,
-      final int numOfDataNodes) {
+      final int numOfRacks, final int numOfDataNodes,
+      final ErasureCodingPolicy... policies) {
-    for (ErasureCodingPolicyInfo policy: policies) {
-      if (policy.isEnabled()) {
-        final int policyDN =
-            policy.getPolicy().getNumDataUnits() + policy.getPolicy()
-                .getNumParityUnits();
-        minDN = Math.max(minDN, policyDN);
-        final int policyRack = (int) Math.ceil(
-            policyDN / (double) policy.getPolicy().getNumParityUnits());
-        minRack = Math.max(minRack, policyRack);
-      }
+    for (ErasureCodingPolicy policy: policies) {
+      final int policyDN =
+          policy.getNumDataUnits() + policy
+              .getNumParityUnits();
+      minDN = Math.max(minDN, policyDN);
+      final int policyRack = (int) Math.ceil(
+          policyDN / (double) policy.getNumParityUnits());
+      minRack = Math.max(minRack, policyRack);
-      String resultMessage = "No erasure coding policy is enabled.";
+      String resultMessage = "No erasure coding policy is given.";
-    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes);
+    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,
+        getReadablePolicies(policies));
-      final int numOfRacks, final int numOfDataNodes) {
+      final int numOfRacks, final int numOfDataNodes, String readablePolicies) {
-          + minDN + ") for enabled erasure coding policy.";
+          + minDN + ") for the erasure coding policies: " + readablePolicies;
-          + minRack + ") for enabled erasure coding policy.";
+          + minRack + ") for the erasure coding policies: "
+          + readablePolicies;
-        "The cluster setup can support all enabled EC policies");
+        "The cluster setup can support EC policies: "
+            + readablePolicies);
+
+  private static String getReadablePolicies(
+      final ErasureCodingPolicy... policies) {
+    return Arrays.asList(policies)
+            .stream()
+            .map(policyInfo -> policyInfo.getName())
+            .collect(Collectors.joining(", "));
+  }

INS26 INS26 UPD40 INS40 INS40 MOV44 INS31 INS44 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS42 INS83 INS43 INS42 INS41 UPD66 UPD66 UPD42 MOV42 UPD66 UPD42 MOV42 INS8 INS42 INS42 INS32 INS42 UPD43 MOV60 MOV21 MOV60 MOV21 INS32 INS27 INS32 INS42 INS32 UPD42 INS42 INS42 INS45 INS42 INS32 INS42 INS86 INS42 INS42 INS45 UPD45 INS32 INS42 INS59 INS32 UPD45 INS42 UPD45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV42 DEL43 DEL85 DEL5 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL45