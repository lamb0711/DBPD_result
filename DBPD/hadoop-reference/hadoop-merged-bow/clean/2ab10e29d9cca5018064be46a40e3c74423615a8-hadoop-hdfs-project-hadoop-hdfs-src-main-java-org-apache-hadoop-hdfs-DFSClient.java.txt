HDFS-2246. Enable reading a block directly from local file system for a client on the same node as the block file.  Contributed by Andrew Purtell, Suresh Srinivas and Jitendra Nath Pandey


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204792 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+import org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier;
+import org.apache.hadoop.hdfs.security.token.block.InvalidBlockTokenException;
-        
+  private boolean shortCircuitLocalReads;
+  
+    // read directly from the block file if configured.
+    this.shortCircuitLocalReads = conf.getBoolean(
+        DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,
+        DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_DEFAULT);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Short circuit read is " + shortCircuitLocalReads);
+    }
+   * Get {@link BlockReader} for short circuited local reads.
+   */
+  static BlockReader getLocalBlockReader(Configuration conf,
+      String src, ExtendedBlock blk, Token<BlockTokenIdentifier> accessToken,
+      DatanodeInfo chosenNode, int socketTimeout, long offsetIntoBlock)
+      throws InvalidToken, IOException {
+    try {
+      return BlockReaderLocal.newBlockReader(conf, src, blk, accessToken,
+          chosenNode, socketTimeout, offsetIntoBlock, blk.getNumBytes()
+              - offsetIntoBlock);
+    } catch (RemoteException re) {
+      throw re.unwrapRemoteException(InvalidToken.class,
+          AccessControlException.class);
+    }
+  }
+  
+  private static Set<String> localIpAddresses = Collections
+      .synchronizedSet(new HashSet<String>());
+  
+  private static boolean isLocalAddress(InetSocketAddress targetAddr) {
+    InetAddress addr = targetAddr.getAddress();
+    if (localIpAddresses.contains(addr.getHostAddress())) {
+      if (LOG.isTraceEnabled()) {
+        LOG.trace("Address " + targetAddr + " is local");
+      }
+      return true;
+    }
+
+    // Check if the address is any local or loop back
+    boolean local = addr.isAnyLocalAddress() || addr.isLoopbackAddress();
+
+    // Check if the address is defined on any interface
+    if (!local) {
+      try {
+        local = NetworkInterface.getByInetAddress(addr) != null;
+      } catch (SocketException e) {
+        local = false;
+      }
+    }
+    if (LOG.isTraceEnabled()) {
+      LOG.trace("Address " + targetAddr + " is local");
+    }
+    if (local == true) {
+      localIpAddresses.add(addr.getHostAddress());
+    }
+    return local;
+  }
+  
+  /**
+   * Should the block access token be refetched on an exception
+   * 
+   * @param ex Exception received
+   * @param targetAddr Target datanode address from where exception was received
+   * @return true if block access token has expired or invalid and it should be
+   *         refetched
+   */
+  private static boolean tokenRefetchNeeded(IOException ex,
+      InetSocketAddress targetAddr) {
+    /*
+     * Get a new access token and retry. Retry is needed in 2 cases. 1) When
+     * both NN and DN re-started while DFSClient holding a cached access token.
+     * 2) In the case that NN fails to update its access key at pre-set interval
+     * (by a wide margin) and subsequently restarts. In this case, DN
+     * re-registers itself with NN and receives a new access key, but DN will
+     * delete the old access key from its memory since it's considered expired
+     * based on the estimated expiration date.
+     */
+    if (ex instanceof InvalidBlockTokenException || ex instanceof InvalidToken) {
+      LOG.info("Access token was invalid when connecting to " + targetAddr
+          + " : " + ex);
+      return true;
+    }
+    return false;
+  }
+  
+  /**
-
+    
+  
+  boolean shouldTryShortCircuitRead(InetSocketAddress targetAddr)
+      throws IOException {
+    if (shortCircuitLocalReads && isLocalAddress(targetAddr)) {
+      return true;
+    }
+    return false;
+  }
+
+  void disableShortCircuit() {
+    shortCircuitLocalReads = false;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS8 INS42 INS21 INS25 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS54 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS60 INS25 INS25 INS25 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS41 INS43 INS42 INS42 INS25 INS41 INS21 INS7 INS32 INS8 INS66 INS65 INS66 INS42 INS42 INS42 INS43 INS43 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS59 INS32 INS8 INS39 INS59 INS38 INS8 INS32 INS8 INS27 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS27 INS8 INS9 INS42 INS27 INS8 INS9 INS7 INS22 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS41 INS44 INS8 INS74 INS42 INS42 INS32 INS42 INS42 INS32 INS25 INS41 INS42 INS27 INS42 INS54 INS42 INS42 INS21 INS42 INS9 INS21 INS62 INS62 INS21 INS41 INS42 INS32 INS41 INS42 INS9 INS52 INS42 INS42 INS42 INS40 INS40 INS32 INS32 INS43 INS42 INS53 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS8 INS9 INS32 INS32 INS8 INS12 INS32 INS32 INS42 INS43 INS42 INS43 INS32 INS9 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS45 INS42 INS32 INS42 INS42 INS42 INS57 INS57 INS32 INS7 INS43 INS42 INS21 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS27 INS42 INS27 INS42 INS7 INS42 INS42 INS45 INS42 INS45 INS32 INS33 INS42 INS9 INS42 INS42 INS42