Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612403 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
+import org.apache.hadoop.yarn.proto.YarnServerCommonProtos.MasterKeyProto;
+import org.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.NMDBSchemaVersionProto;
+import org.apache.hadoop.yarn.server.api.records.MasterKey;
+import org.apache.hadoop.yarn.server.api.records.impl.pb.MasterKeyPBImpl;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.records.NMDBSchemaVersion;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.records.impl.pb.NMDBSchemaVersionPBImpl;
+import com.google.common.annotations.VisibleForTesting;
+
-  private static final String DB_SCHEMA_VERSION_KEY = "schema-version";
-  private static final String DB_SCHEMA_VERSION = "1.0";
+  private static final String DB_SCHEMA_VERSION_KEY = "nm-schema-version";
+  
+  private static final NMDBSchemaVersion CURRENT_VERSION_INFO = NMDBSchemaVersion
+      .newInstance(1, 0);
+  private static final String CURRENT_MASTER_KEY_SUFFIX = "CurrentMasterKey";
+  private static final String PREV_MASTER_KEY_SUFFIX = "PreviousMasterKey";
+  private static final String NM_TOKENS_KEY_PREFIX = "NMTokens/";
+  private static final String NM_TOKENS_CURRENT_MASTER_KEY =
+      NM_TOKENS_KEY_PREFIX + CURRENT_MASTER_KEY_SUFFIX;
+  private static final String NM_TOKENS_PREV_MASTER_KEY =
+      NM_TOKENS_KEY_PREFIX + PREV_MASTER_KEY_SUFFIX;
+
+  public RecoveredNMTokenState loadNMTokenState() throws IOException {
+    RecoveredNMTokenState state = new RecoveredNMTokenState();
+    state.applicationMasterKeys =
+        new HashMap<ApplicationAttemptId, MasterKey>();
+    LeveldbIterator iter = null;
+    try {
+      iter = new LeveldbIterator(db);
+      iter.seek(bytes(NM_TOKENS_KEY_PREFIX));
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> entry = iter.next();
+        String fullKey = asString(entry.getKey());
+        if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) {
+          break;
+        }
+        String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length());
+        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {
+          state.currentMasterKey = parseMasterKey(entry.getValue());
+        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {
+          state.previousMasterKey = parseMasterKey(entry.getValue());
+        } else if (key.startsWith(
+            ApplicationAttemptId.appAttemptIdStrPrefix)) {
+          ApplicationAttemptId attempt;
+          try {
+            attempt = ConverterUtils.toApplicationAttemptId(key);
+          } catch (IllegalArgumentException e) {
+            throw new IOException("Bad application master key state for "
+                + fullKey, e);
+          }
+          state.applicationMasterKeys.put(attempt,
+              parseMasterKey(entry.getValue()));
+        }
+      }
+    } catch (DBException e) {
+      throw new IOException(e.getMessage(), e);
+    } finally {
+      if (iter != null) {
+        iter.close();
+      }
+    }
+    return state;
+  }
+
+  @Override
+  public void storeNMTokenCurrentMasterKey(MasterKey key)
+      throws IOException {
+    storeMasterKey(NM_TOKENS_CURRENT_MASTER_KEY, key);
+  }
+
+  @Override
+  public void storeNMTokenPreviousMasterKey(MasterKey key)
+      throws IOException {
+    storeMasterKey(NM_TOKENS_PREV_MASTER_KEY, key);
+  }
+
+  @Override
+  public void storeNMTokenApplicationMasterKey(
+      ApplicationAttemptId attempt, MasterKey key) throws IOException {
+    storeMasterKey(NM_TOKENS_KEY_PREFIX + attempt, key);
+  }
+
+  @Override
+  public void removeNMTokenApplicationMasterKey(
+      ApplicationAttemptId attempt) throws IOException {
+    String key = NM_TOKENS_KEY_PREFIX + attempt;
+    try {
+      db.delete(bytes(key));
+    } catch (DBException e) {
+      throw new IOException(e.getMessage(), e);
+    }
+  }
+
+  private MasterKey parseMasterKey(byte[] keyData) throws IOException {
+    return new MasterKeyPBImpl(MasterKeyProto.parseFrom(keyData));
+  }
+
+  private void storeMasterKey(String dbKey, MasterKey key)
+      throws IOException {
+    MasterKeyPBImpl pb = (MasterKeyPBImpl) key;
+    try {
+      db.put(bytes(dbKey), pb.getProto().toByteArray());
+    } catch (DBException e) {
+      throw new IOException(e.getMessage(), e);
+    }
+  }
+
+
+  @Override
-    byte[] schemaVersionData = null;
-      try {
-        schemaVersionData = db.get(bytes(DB_SCHEMA_VERSION_KEY));
-      } catch (DBException e) {
-        throw new IOException(e.getMessage(), e);
-      }
-          schemaVersionData = bytes(DB_SCHEMA_VERSION);
-          db.put(bytes(DB_SCHEMA_VERSION_KEY), schemaVersionData);
+          // store version
+          storeVersion();
-    if (schemaVersionData != null) {
-      String schemaVersion = asString(schemaVersionData);
-      // only support exact schema matches for now
-      if (!DB_SCHEMA_VERSION.equals(schemaVersion)) {
-        throw new IOException("Incompatible state database schema, found "
-            + schemaVersion + " expected " + DB_SCHEMA_VERSION);
-      }
-    } else {
-      throw new IOException("State database schema version not found");
-    }
+    checkVersion();
+
+
+  NMDBSchemaVersion loadVersion() throws IOException {
+    byte[] data = db.get(bytes(DB_SCHEMA_VERSION_KEY));
+    // if version is not stored previously, treat it as 1.0.
+    if (data == null || data.length == 0) {
+      return NMDBSchemaVersion.newInstance(1, 0);
+    }
+    NMDBSchemaVersion version =
+        new NMDBSchemaVersionPBImpl(NMDBSchemaVersionProto.parseFrom(data));
+    return version;
+  }
+
+  private void storeVersion() throws IOException {
+    dbStoreVersion(CURRENT_VERSION_INFO);
+  }
+  
+  // Only used for test
+  @VisibleForTesting
+  void storeVersion(NMDBSchemaVersion state) throws IOException {
+    dbStoreVersion(state);
+  }
+  
+  private void dbStoreVersion(NMDBSchemaVersion state) throws IOException {
+    String key = DB_SCHEMA_VERSION_KEY;
+    byte[] data = 
+        ((NMDBSchemaVersionPBImpl) state).getProto().toByteArray();
+    try {
+      db.put(bytes(key), data);
+    } catch (DBException e) {
+      throw new IOException(e.getMessage(), e);
+    }
+  }
+
+  NMDBSchemaVersion getCurrentVersion() {
+    return CURRENT_VERSION_INFO;
+  }
+  
+  /**
+   * 1) Versioning scheme: major.minor. For e.g. 1.0, 1.1, 1.2...1.25, 2.0 etc.
+   * 2) Any incompatible change of state-store is a major upgrade, and any
+   *    compatible change of state-store is a minor upgrade.
+   * 3) Within a minor upgrade, say 1.1 to 1.2:
+   *    overwrite the version info and proceed as normal.
+   * 4) Within a major upgrade, say 1.2 to 2.0:
+   *    throw exception and indicate user to use a separate upgrade tool to
+   *    upgrade NM state or remove incompatible old state.
+   */
+  private void checkVersion() throws IOException {
+    NMDBSchemaVersion loadedVersion = loadVersion();
+    LOG.info("Loaded NM state version info " + loadedVersion);
+    if (loadedVersion != null && loadedVersion.equals(getCurrentVersion())) {
+      return;
+    }
+    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {
+      LOG.info("Storing NM state version info " + getCurrentVersion());
+      storeVersion();
+    } else {
+      throw new IOException(
+        "Incompatible version for NM state: expecting NM state version " 
+            + getCurrentVersion() + ", but loading version " + loadedVersion);
+    }
+  }
+  

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV43 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS43 INS59 INS43 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS43 INS8 UPD45 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS42 UPD42 UPD45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS60 INS21 INS60 INS54 INS41 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS60 INS54 INS42 MOV5 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS60 INS54 INS21 INS42 INS42 INS60 INS25 INS60 INS41 INS42 INS21 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS42 INS60 INS60 INS54 INS42 INS41 INS65 INS42 INS60 INS21 INS25 INS25 INS42 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS43 INS59 INS8 MOV12 INS8 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS43 INS59 INS8 INS12 INS14 INS42 INS42 INS43 INS59 INS8 INS12 MOV8 INS32 INS5 INS59 INS27 INS8 INS43 INS59 INS42 INS32 INS42 INS32 INS42 INS43 INS59 INS5 INS59 INS8 INS12 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS59 INS32 INS27 INS8 INS32 INS8 INS8 INS42 INS42 INS14 INS40 INS14 INS42 INS42 INS33 INS21 INS21 INS61 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS21 INS44 INS8 INS43 INS32 INS42 INS42 INS11 INS21 INS44 INS8 UPD42 MOV42 INS39 INS85 INS42 MOV32 INS27 INS27 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS32 INS41 INS42 INS42 INS32 INS21 INS21 INS53 INS43 INS74 INS7 INS32 INS32 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS43 INS42 INS53 INS42 INS33 INS40 INS34 INS32 INS43 INS32 INS32 INS42 INS32 INS43 INS42 INS53 INS42 INS45 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS32 INS32 INS14 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS34 INS34 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS27 INS42 MOV43 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS74 INS59 INS43 INS59 INS38 INS8 MOV43 INS59 INS32 INS8 INS25 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS32 INS42 INS11 INS42 INS42 INS43 INS32 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS42 INS42 INS32 INS32 INS10 INS42 INS32 INS42 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS42 INS21 INS32 INS8 MOV21 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS7 INS42 INS42 INS40 INS60 INS54 INS21 INS32 INS42 INS32 INS40 INS32 INS43 INS59 INS8 INS12 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS40 INS42 INS42 INS32 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 MOV43 INS27 INS42 INS45 INS42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL7 DEL21 DEL8 DEL54 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL45 DEL14 DEL53 DEL8 DEL25