Merge r1555021 through r1556550 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1556552 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ConcurrentMap;
+import org.apache.hadoop.security.AccessControlException;
-import org.apache.hadoop.service.AbstractService;
+import org.apache.hadoop.service.CompositeService;
+import org.apache.hadoop.yarn.conf.HAUtil;
-public class AdminService extends AbstractService implements
+public class AdminService extends CompositeService implements
+  private boolean autoFailoverEnabled;
+
+    if (rmContext.isHAEnabled()) {
+      autoFailoverEnabled = HAUtil.isAutomaticFailoverEnabled(conf);
+      if (autoFailoverEnabled) {
+        if (HAUtil.isAutomaticFailoverEmbedded(conf)) {
+          addIfService(createEmbeddedElectorService());
+        }
+      }
+    }
+
+  protected EmbeddedElectorService createEmbeddedElectorService() {
+    return new EmbeddedElectorService(rmContext);
+  }
+
+  /**
+   * Check that a request to change this node's HA state is valid.
+   * In particular, verifies that, if auto failover is enabled, non-forced
+   * requests from the HAAdmin CLI are rejected, and vice versa.
+   *
+   * @param req the request to check
+   * @throws AccessControlException if the request is disallowed
+   */
+  private void checkHaStateChange(StateChangeRequestInfo req)
+      throws AccessControlException {
+    switch (req.getSource()) {
+      case REQUEST_BY_USER:
+        if (autoFailoverEnabled) {
+          throw new AccessControlException(
+              "Manual failover for this ResourceManager is disallowed, " +
+                  "because automatic failover is enabled.");
+        }
+        break;
+      case REQUEST_BY_USER_FORCED:
+        if (autoFailoverEnabled) {
+          LOG.warn("Allowing manual failover from " +
+              org.apache.hadoop.ipc.Server.getRemoteAddress() +
+              " even though automatic failover is enabled, because the user " +
+              "specified the force flag");
+        }
+        break;
+      case REQUEST_BY_ZKFC:
+        if (!autoFailoverEnabled) {
+          throw new AccessControlException(
+              "Request from ZK failover controller at " +
+                  org.apache.hadoop.ipc.Server.getRemoteAddress() + " denied " +
+                  "since automatic failover is not enabled");
+        }
+        break;
+    }
+  }
+
-    // TODO (YARN-1177): When automatic failover is enabled,
-    // check if transition should be allowed for this request
+    checkHaStateChange(reqInfo);
-    // TODO (YARN-1177): When automatic failover is enabled,
-    // check if transition should be allowed for this request
+    checkHaStateChange(reqInfo);
-  
+

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD43 INS23 INS31 INS31 UPD42 INS83 INS39 INS59 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS25 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS42 INS50 INS21 INS21 INS32 INS8 INS14 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS32 INS49 INS25 INS10 INS49 INS25 INS10 INS49 INS25 INS10 INS32 INS32 INS42 INS42 INS21 INS25 INS43 INS42 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS8 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS7 INS42 INS8 INS42 INS53 INS21 INS42 INS53 INS42 INS32 INS25 INS14 INS32 INS14 INS42 INS42 INS42 INS32 INS8 INS43 INS27 INS42 INS42 INS27 INS43 INS27 INS42 INS42 INS42 INS21 INS42 INS45 INS45 INS45 INS32 INS45 INS45 INS42 INS45 INS32 INS45 INS45 INS32 INS40 INS42 INS40 INS42 INS42 INS32 INS42 DEL40 DEL26