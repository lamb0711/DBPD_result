YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)

+   * @param <K> identifies the type of column name(indicated by type of key
+   *     converter).
+   * @param keyConverter used to convert column bytes to the appropriate key
+   *     type.
-  public <V> NavigableMap<String, NavigableMap<Long, V>>
-      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes)
-          throws IOException {
+  public <K, V> NavigableMap<K, NavigableMap<Long, V>>
+      readResultsWithTimestamps(Result result, byte[] columnPrefixBytes,
+          KeyConverter<K> keyConverter) throws IOException {
-    NavigableMap<String, NavigableMap<Long, V>> results =
-        new TreeMap<String, NavigableMap<Long, V>>();
+    NavigableMap<K, NavigableMap<Long, V>> results = new TreeMap<>();
-          String columnName = null;
+          K converterColumnKey = null;
-            // Decode the spaces we encoded in the column name.
-            columnName = Separator.decode(entry.getKey(), Separator.SPACE);
+            try {
+              converterColumnKey = keyConverter.decode(entry.getKey());
+            } catch (IllegalArgumentException iae) {
+              LOG.error("Illegal column found, skipping this column.", iae);
+              continue;
+            }
-              // This is the prefix that we want
-              columnName = Separator.decode(columnNameParts[1]);
+              try {
+                // This is the prefix that we want
+                converterColumnKey = keyConverter.decode(columnNameParts[1]);
+              } catch (IllegalArgumentException iae) {
+                LOG.error("Illegal column found, skipping this column.", iae);
+                continue;
+              }
-          if (columnName != null) {
+          if (converterColumnKey != null) {
-            results.put(columnName, cellResults);
+            results.put(converterColumnKey, cellResults);
+   * @param <K> identifies the type of column name(indicated by type of key
+   *     converter).
-   * @return the latest values of columns in the column family. This assumes
-   *         that the column name parts are all Strings by default. If the
-   *         column name parts should be treated natively and not be converted
-   *         back and forth from Strings, you should use
-   *         {@link #readResultsHavingCompoundColumnQualifiers(Result, byte[])}
-   *         instead.
-   * @throws IOException if any problem occurs while reading results.
-   */
-  public Map<String, Object> readResults(Result result,
-      byte[] columnPrefixBytes) throws IOException {
-    Map<String, Object> results = new HashMap<String, Object>();
-
-    if (result != null) {
-      Map<byte[], byte[]> columns = result.getFamilyMap(columnFamilyBytes);
-      for (Entry<byte[], byte[]> entry : columns.entrySet()) {
-        byte[] columnKey = entry.getKey();
-        if (columnKey != null && columnKey.length > 0) {
-
-          String columnName = null;
-          if (columnPrefixBytes == null) {
-            if (LOG.isDebugEnabled()) {
-              LOG.debug("null prefix was specified; returning all columns");
-            }
-            // Decode the spaces we encoded in the column name.
-            columnName = Separator.decode(columnKey, Separator.SPACE);
-          } else {
-            // A non-null prefix means columns are actually of the form
-            // prefix!columnNameRemainder
-            byte[][] columnNameParts =
-                Separator.QUALIFIERS.split(columnKey, 2);
-            byte[] actualColumnPrefixBytes = columnNameParts[0];
-            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)
-                && columnNameParts.length == 2) {
-              // This is the prefix that we want
-              // if the column name is a compound qualifier
-              // with non string datatypes, the following decode will not
-              // work correctly since it considers all components to be String
-              // invoke the readResultsHavingCompoundColumnQualifiers function
-              columnName = Separator.decode(columnNameParts[1]);
-            }
-          }
-
-          // If this column has the prefix we want
-          if (columnName != null) {
-            Object value = converter.decodeValue(entry.getValue());
-            results.put(columnName, value);
-          }
-        }
-      } // for entry
-    }
-    return results;
-  }
-
-  /**
-   * @param result from which to read columns
-   * @param columnPrefixBytes optional prefix to limit columns. If null all
-   *        columns are returned.
+   * @param keyConverter used to convert column bytes to the appropriate key
+   *          type.
-  public Map<?, Object> readResultsHavingCompoundColumnQualifiers(Result result,
-      byte[] columnPrefixBytes) throws IOException {
-    // handle the case where the column prefix is null
-    // it is the same as readResults() so simply delegate to that implementation
-    if (columnPrefixBytes == null) {
-      return readResults(result, null);
-    }
-
-    Map<byte[][], Object> results = new HashMap<byte[][], Object>();
+  public <K> Map<K, Object> readResults(Result result,
+      byte[] columnPrefixBytes, KeyConverter<K> keyConverter)
+      throws IOException {
+    Map<K, Object> results = new HashMap<K, Object>();
-          // A non-null prefix means columns are actually of the form
-          // prefix!columnNameRemainder
-          // with a compound column qualifier, we are presuming existence of a
-          // prefix
-          byte[][] columnNameParts = Separator.QUALIFIERS.split(columnKey, 2);
-          if (columnNameParts.length > 0) {
-            byte[] actualColumnPrefixBytes = columnNameParts[0];
-            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)
-                && columnNameParts.length == 2) {
-              // This is the prefix that we want
-              byte[][] columnQualifierParts =
-                  Separator.VALUES.split(columnNameParts[1]);
-              Object value = converter.decodeValue(entry.getValue());
-              // we return the columnQualifier in parts since we don't know
-              // which part is of which data type
-              results.put(columnQualifierParts, value);
+
+          K converterColumnKey = null;
+          if (columnPrefixBytes == null) {
+            try {
+              converterColumnKey = keyConverter.decode(columnKey);
+            } catch (IllegalArgumentException iae) {
+              LOG.error("Illegal column found, skipping this column.", iae);
+              continue;
+          } else {
+            // A non-null prefix means columns are actually of the form
+            // prefix!columnNameRemainder
+            byte[][] columnNameParts = Separator.QUALIFIERS.split(columnKey, 2);
+            if (columnNameParts.length > 0) {
+              byte[] actualColumnPrefixBytes = columnNameParts[0];
+              // If this is the prefix that we want
+              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)
+                  && columnNameParts.length == 2) {
+                try {
+                  converterColumnKey = keyConverter.decode(columnNameParts[1]);
+                } catch (IllegalArgumentException iae) {
+                  LOG.error("Illegal column found, skipping this column.", iae);
+                  continue;
+                }
+              }
+            }
+          } // if-else
+
+          // If the columnPrefix is null (we want all columns), or the actual
+          // prefix matches the given prefix we want this column
+          if (converterColumnKey != null) {
+            Object value = converter.decodeValue(entry.getValue());
+            // we return the columnQualifier in parts since we don't know
+            // which part is of which data type.
+            results.put(converterColumnKey, value);
-    // We don't want column names to have spaces
-    byte[] encodedQualifier = Bytes.toBytes(Separator.SPACE.encode(qualifier));
+    // We don't want column names to have spaces / tabs.
+    byte[] encodedQualifier =
+        Separator.encode(qualifier, Separator.SPACE, Separator.TAB);
-   * Create a compound column qualifier by combining qualifier and components.
-   *
-   * @param qualifier Column QUalifier.
-   * @param components Other components.
-   * @return a byte array representing compound column qualifier.
-   */
-  public static byte[] getCompoundColumnQualifierBytes(String qualifier,
-      byte[]...components) {
-    byte[] colQualBytes = Bytes.toBytes(Separator.VALUES.encode(qualifier));
-    for (int i = 0; i < components.length; i++) {
-      colQualBytes = Separator.VALUES.join(colQualBytes, components[i]);
-    }
-    return colQualBytes;
-  }
-
-  /**

INS73 UPD74 INS44 INS73 UPD74 INS44 MOV43 INS65 INS65 INS42 UPD43 INS74 INS42 INS65 MOV65 MOV65 INS65 MOV65 MOV65 INS42 MOV43 UPD43 MOV43 MOV5 MOV42 INS74 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 UPD42 INS43 INS43 UPD74 MOV74 INS66 INS42 INS66 INS66 INS66 MOV66 MOV66 INS42 INS66 INS66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 MOV66 UPD42 MOV85 INS43 INS43 UPD74 MOV27 INS42 INS42 MOV43 UPD43 INS42 INS42 MOV43 UPD43 MOV42 MOV60 UPD42 INS74 UPD42 UPD74 MOV32 UPD42 MOV42 MOV42 INS40 INS40 MOV43 UPD43 MOV43 MOV43 MOV5 MOV32 MOV42 MOV42 MOV42 MOV60 UPD42 MOV42 MOV42 MOV43 MOV5 MOV5 MOV27 MOV42 MOV39 MOV85 MOV39 MOV42 MOV27 MOV27 INS25 UPD43 MOV42 MOV42 MOV42 MOV34 UPD43 MOV27 INS8 INS8 UPD42 UPD42 INS54 UPD42 UPD42 UPD42 INS54 MOV60 MOV25 UPD42 INS8 INS12 INS8 INS8 INS12 MOV27 MOV21 INS44 INS8 INS54 UPD42 INS21 INS44 INS8 MOV60 UPD42 INS43 INS42 INS21 INS18 MOV8 INS12 INS7 INS43 INS42 INS21 INS18 MOV5 MOV59 INS8 UPD42 INS42 INS32 INS44 INS8 INS42 INS32 INS42 INS32 MOV39 MOV85 MOV2 INS54 UPD42 INS42 INS42 INS45 INS42 INS43 INS42 INS21 INS18 INS42 INS42 INS42 INS42 INS42 INS45 INS42 MOV8 INS12 UPD42 INS42 INS32 INS44 INS8 UPD42 INS42 INS42 INS45 INS42 INS43 INS42 INS21 INS18 UPD42 INS42 INS32 UPD42 INS42 INS42 INS45 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL40 DEL42 DEL42 DEL43 DEL69 DEL39 DEL85 DEL5 DEL69 DEL68 DEL65 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL39 DEL85 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL29 DEL83 DEL42 DEL43 DEL76 DEL42 DEL43 DEL74 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL39 DEL85 DEL85 DEL5 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL39 DEL85 DEL85 DEL5 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL34 DEL27 DEL27 DEL39 DEL85 DEL85 DEL5 DEL42 DEL40 DEL42 DEL42 DEL34 DEL2 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL40 DEL32 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31