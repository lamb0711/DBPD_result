MAPREDUCE-4427. Added an 'unmanaged' mode for AMs so as to ease development of new applications. Contributed by Bikas Saha.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361813 13f79535-47bb-0310-9956-ffa450edef68

-
+      .addTransition(RMAppAttemptState.NEW, RMAppAttemptState.FAILED,
+          RMAppAttemptEventType.REGISTERED,
+          new UnexpectedAMRegisteredTransition())
+          
-      .addTransition(RMAppAttemptState.SUBMITTED, RMAppAttemptState.SCHEDULED,
-          RMAppAttemptEventType.APP_ACCEPTED, new ScheduleTransition())
+      .addTransition(RMAppAttemptState.SUBMITTED, 
+          EnumSet.of(RMAppAttemptState.LAUNCHED, RMAppAttemptState.SCHEDULED),
+          RMAppAttemptEventType.APP_ACCEPTED, 
+          new ScheduleTransition())
-
+      .addTransition(RMAppAttemptState.SUBMITTED, RMAppAttemptState.FAILED,
+          RMAppAttemptEventType.REGISTERED,
+          new UnexpectedAMRegisteredTransition())
+          
-
+          
-  private static final class ScheduleTransition extends BaseTransition {
+  private static final class ScheduleTransition
+      implements
+      MultipleArcTransition<RMAppAttemptImpl, RMAppAttemptEvent, RMAppAttemptState> {
-    public void transition(RMAppAttemptImpl appAttempt,
+    public RMAppAttemptState transition(RMAppAttemptImpl appAttempt,
-      // Request a container for the AM.
-      ResourceRequest request = BuilderUtils.newResourceRequest(
-          AM_CONTAINER_PRIORITY, "*", appAttempt.submissionContext
-              .getAMContainerSpec().getResource(), 1);
+      if (!appAttempt.submissionContext.getUnmanagedAM()) {
+        // Request a container for the AM.
+        ResourceRequest request = BuilderUtils.newResourceRequest(
+            AM_CONTAINER_PRIORITY, "*", appAttempt.submissionContext
+                .getAMContainerSpec().getResource(), 1);
-      Allocation amContainerAllocation = 
-          appAttempt.scheduler.allocate(appAttempt.applicationAttemptId,
-              Collections.singletonList(request), EMPTY_CONTAINER_RELEASE_LIST);
-      if (amContainerAllocation != null
-          && amContainerAllocation.getContainers() != null) {
-        assert(amContainerAllocation.getContainers().size() == 0);
+        Allocation amContainerAllocation = appAttempt.scheduler.allocate(
+            appAttempt.applicationAttemptId,
+            Collections.singletonList(request), EMPTY_CONTAINER_RELEASE_LIST);
+        if (amContainerAllocation != null
+            && amContainerAllocation.getContainers() != null) {
+          assert (amContainerAllocation.getContainers().size() == 0);
+        }
+        return RMAppAttemptState.SCHEDULED;
+      } else {
+        // RM not allocating container. AM is self launched. 
+        // Directly go to LAUNCHED state
+        // Register with AMLivelinessMonitor
+        appAttempt.rmContext.getAMLivelinessMonitor().register(
+            appAttempt.applicationAttemptId);
+        return RMAppAttemptState.LAUNCHED;
-      // Tell the launcher to cleanup.
-      appAttempt.eventHandler.handle(new AMLauncherEvent(
-          AMLauncherEventType.CLEANUP, appAttempt));
+      if(!appAttempt.submissionContext.getUnmanagedAM()) {
+        // Tell the launcher to cleanup.
+        appAttempt.eventHandler.handle(new AMLauncherEvent(
+            AMLauncherEventType.CLEANUP, appAttempt));
+      }
+  
+  private static class UnexpectedAMRegisteredTransition extends
+      BaseFinalTransition {
+
+    public UnexpectedAMRegisteredTransition() {
+      super(RMAppAttemptState.FAILED);
+    }
+
+    @Override
+    public void transition(RMAppAttemptImpl appAttempt, RMAppAttemptEvent event) {
+      assert appAttempt.submissionContext.getUnmanagedAM();
+      appAttempt
+          .setDiagnostics("Unmanaged AM must register after AM attempt reaches LAUNCHED state.");
+      super.transition(appAttempt, event);
+    }
+
+  }
-      if (appAttempt.masterContainer.getId().equals(
-          containerStatus.getContainerId())) {
+      if (appAttempt.masterContainer != null
+          && appAttempt.masterContainer.getId().equals(
+              containerStatus.getContainerId())) {
+        // container associated with AM. must not be unmanaged 
+        assert appAttempt.submissionContext.getUnmanagedAM() == false;

INS83 INS42 INS55 INS74 INS83 INS83 INS42 INS43 INS31 INS31 INS43 INS43 INS43 INS43 INS43 INS42 INS83 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 MOV42 INS42 INS42 INS42 INS42 INS25 INS25 INS46 INS42 INS43 INS42 INS43 INS42 INS6 INS21 INS21 INS38 INS8 INS8 INS38 INS8 INS40 INS42 INS42 INS32 INS32 INS48 INS27 INS32 MOV60 MOV60 MOV25 INS41 INS21 INS41 INS32 MOV21 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 MOV32 INS6 INS40 INS42 INS40 INS32 INS40 INS40 INS42 INS40 INS33 INS27 INS32 INS42 INS40 INS32 INS9 INS40 INS42 INS40 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 UPD40 INS14 INS32 INS42 INS40 INS43 MOV32 MOV42 MOV40 INS32 INS40 MOV14 INS42 UPD40 UPD40 MOV14 INS42 INS42 INS40 INS40 UPD40 UPD40 INS14 INS43 INS42 DEL83 DEL42 DEL43 DEL39