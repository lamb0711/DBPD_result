HDFS-6671. Change BlockPlacementPolicy to consider block storage policy in replicaiton.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1611334 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import org.apache.hadoop.hdfs.BlockStoragePolicy;
-                                    StorageType storageType) {
+                                    final BlockStoragePolicy storagePolicy) {
-        excludedNodes, blocksize, storageType);
+        excludedNodes, blocksize, storagePolicy);
-      StorageType storageType) {
+      BlockStoragePolicy storagePolicy) {
-            excludedNodes, blocksize, storageType);
+            excludedNodes, blocksize, storagePolicy);
+      final List<StorageType> storageTypes = storagePolicy.chooseStorageTypes(
+          (short)numOfReplicas);
-            results, avoidStaleNodes, storageType);
+            results, avoidStaleNodes, storageTypes.get(0));
+        storageTypes.remove(0);
-                false, favoriteAndExcludedNodes, blocksize, storageType);
+                false, favoriteAndExcludedNodes, blocksize, storagePolicy);
-          excludedNodes, blocksize, storageType);
+          excludedNodes, blocksize, storagePolicy);
-                                    StorageType storageType) {
+                                    final BlockStoragePolicy storagePolicy) {
-    Node localNode = chooseTarget(numOfReplicas, writer,
-        excludedNodes, blocksize, maxNodesPerRack, results, avoidStaleNodes, storageType);
+    final Node localNode = chooseTarget(numOfReplicas, writer, excludedNodes,
+        blocksize, maxNodesPerRack, results, avoidStaleNodes, storagePolicy);
-                                          Node writer,
-                                          Set<Node> excludedNodes,
-                                          long blocksize,
-                                          int maxNodesPerRack,
-                                          List<DatanodeStorageInfo> results,
-                                          final boolean avoidStaleNodes,
-                                          StorageType storageType) {
+                            Node writer,
+                            final Set<Node> excludedNodes,
+                            final long blocksize,
+                            final int maxNodesPerRack,
+                            final List<DatanodeStorageInfo> results,
+                            final boolean avoidStaleNodes,
+                            final BlockStoragePolicy storagePolicy) {
+    final List<StorageType> storageTypes = chooseStorageTypes(storagePolicy,
+        (short)totalReplicasExpected, results); 
-            maxNodesPerRack, results, avoidStaleNodes, storageType)
+            maxNodesPerRack, results, avoidStaleNodes, storageTypes.remove(0))
-            results, avoidStaleNodes, storageType);
+            results, avoidStaleNodes, storageTypes.remove(0));
-              results, avoidStaleNodes, storageType);
+              results, avoidStaleNodes, storageTypes.remove(0));
-              results, avoidStaleNodes, storageType);
+              results, avoidStaleNodes, storageTypes.remove(0));
-              results, avoidStaleNodes, storageType);
+              results, avoidStaleNodes, storageTypes.remove(0));
-          maxNodesPerRack, results, avoidStaleNodes, storageType);
+          maxNodesPerRack, results, avoidStaleNodes, storageTypes.remove(0));
-            maxNodesPerRack, results, false, storageType);
+            maxNodesPerRack, results, false, storagePolicy);
-    
+  
+  private static List<StorageType> chooseStorageTypes(
+      final BlockStoragePolicy storagePolicy, final short replication,
+      final Iterable<DatanodeStorageInfo> chosen) {
+    return storagePolicy.chooseStorageTypes(
+        replication, new Iterable<StorageType>() {
+          @Override
+          public Iterator<StorageType> iterator() {
+            return new Iterator<StorageType>() {
+              final Iterator<DatanodeStorageInfo> i = chosen.iterator();
+              @Override
+              public boolean hasNext() {return i.hasNext();}
+              @Override
+              public StorageType next() {return i.next().getStorageType();}
+              @Override
+              public void remove() {
+                throw new UnsupportedOperationException();
+              }
+            };
+          }
+        });
+  }
+

INS26 INS26 INS40 INS40 INS31 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS43 UPD42 INS43 UPD42 INS83 INS43 UPD42 INS83 INS83 INS83 INS83 INS83 INS43 UPD42 INS60 INS43 MOV43 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS74 INS42 INS41 INS42 INS42 INS42 INS83 INS42 INS83 INS74 INS59 INS42 INS42 INS43 INS43 INS32 UPD42 INS60 INS43 MOV43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS83 INS74 INS59 UPD42 INS42 INS42 INS42 INS11 INS42 INS74 INS1 INS43 MOV43 INS42 INS32 INS21 INS39 INS42 MOV25 MOV25 INS32 INS43 INS43 INS31 INS42 INS42 INS42 INS11 INS32 UPD42 UPD42 MOV42 INS42 INS34 INS42 INS42 INS78 INS83 INS74 INS42 INS8 UPD42 INS39 INS42 INS42 INS42 INS34 INS32 INS42 INS43 INS43 INS41 INS32 UPD42 UPD42 MOV42 INS42 INS34 UPD42 INS42 INS42 INS14 UPD42 MOV42 INS42 INS34 INS32 INS32 INS74 INS1 UPD42 MOV42 INS42 INS34 UPD42 MOV42 INS42 INS34 INS32 INS32 INS43 INS43 INS23 INS31 INS31 INS31 UPD42 MOV42 INS42 INS34 UPD42 MOV42 INS42 INS34 INS42 INS42 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS32 INS42 INS41 INS42 INS41 INS42 INS53 INS42 INS42 INS42 INS42 INS32 INS32 INS14 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42