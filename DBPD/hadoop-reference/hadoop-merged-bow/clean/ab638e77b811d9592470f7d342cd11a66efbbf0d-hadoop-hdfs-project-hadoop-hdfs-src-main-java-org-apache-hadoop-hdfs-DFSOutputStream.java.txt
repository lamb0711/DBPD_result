HDFS-6865. Byte array native checksumming on client side. Contributed by James Thomas.

-        resetChecksumChunk(freeInCksum);
+        setChecksumBufSize(freeInCksum);
-    super(checksum, checksum.getBytesPerChecksum(), checksum.getChecksumSize());
+    super(checksum);
-  protected synchronized void writeChunk(byte[] b, int offset, int len, byte[] checksum) 
-                                                        throws IOException {
+  protected synchronized void writeChunk(byte[] b, int offset, int len,
+      byte[] checksum, int ckoff, int cklen) throws IOException {
-    int cklen = checksum.length;
-    if (checksum.length != this.checksum.getChecksumSize()) {
+    if (cklen != this.checksum.getChecksumSize()) {
-                            " but found to be " + checksum.length);
+                            " but found to be " + cklen);
-    currentPacket.writeChecksum(checksum, 0, cklen);
+    currentPacket.writeChecksum(checksum, ckoff, cklen);
-        resetChecksumChunk(bytesPerChecksum);
+        resetChecksumBufSize();
-        /* Record current blockOffset. This might be changed inside
-         * flushBuffer() where a partial checksum chunk might be flushed.
-         * After the flush, reset the bytesCurBlock back to its previous value,
-         * any partial checksum chunk will be sent now and in next packet.
-         */
-        long saveOffset = bytesCurBlock;
-        Packet oldCurrentPacket = currentPacket;
-        flushBuffer(true);
+        int numKept = flushBuffer(true, true);
-            "DFSClient flush() : saveOffset " + saveOffset +  
+            "DFSClient flush() :" +
-          // We already flushed up to this offset.
-          // This means that we haven't written anything since the last flush
-          // (or the beginning of the file). Hence, we should not have any
-          // packet queued prior to this call, since the last flush set
-          // currentPacket = null.
-          assert oldCurrentPacket == null :
-            "Empty flush should not occur with a currentPacket";
-
-        bytesCurBlock = saveOffset;
+        bytesCurBlock -= numKept;

INS44 INS44 INS39 INS42 INS39 INS42 UPD27 MOV27 INS42 INS42 UPD27 MOV27 INS60 UPD42 INS45 INS45 INS42 UPD39 MOV39 INS59 UPD7 UPD42 INS42 INS32 UPD42 MOV42 MOV9 INS9 INS27 UPD45 MOV45 MOV45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL39 DEL42 DEL40 DEL59 DEL60 DEL45 DEL45 DEL40 DEL40 DEL34 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL32 DEL21 DEL42 DEL42 DEL33 DEL27 DEL45 DEL6