YARN-9997. Code cleanup in ZKConfigurationStore. Contributed by Andras Gyori

-  private String znodeParentPath;
-
-  @VisibleForTesting
-  protected ZKCuratorManager zkManager;
+  private ZKCuratorManager zkManager;
+
+    String znodeParentPath = conf.get(
+        YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,
+        YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);
+
-    this.znodeParentPath =
-        conf.get(YarnConfiguration.RM_SCHEDCONF_STORE_ZK_PARENT_PATH,
-            YarnConfiguration.DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH);
-    if (!zkManager.exists(logsPath)) {
-      zkManager.create(logsPath);
-      zkManager.setData(logsPath,
-          serializeObject(new LinkedList<LogMutation>()), -1);
+    if (createNewZkPath(logsPath)) {
+      setZkData(logsPath, new LinkedList<LogMutation>());
-    if (!zkManager.exists(confVersionPath)) {
-      zkManager.create(confVersionPath);
-      zkManager.setData(confVersionPath, String.valueOf(0), -1);
+    if (createNewZkPath(confVersionPath)) {
+      setZkData(confVersionPath, String.valueOf(0));
-    if (!zkManager.exists(confStorePath)) {
-      zkManager.create(confStorePath);
+    if (createNewZkPath(confStorePath)) {
-      zkManager.setData(confStorePath, serializeObject(mapSchedConf), -1);
+      setZkData(confStorePath, mapSchedConf);
-      zkManager.setData(confVersionPath, String.valueOf(configVersion), -1);
+      setZkData(confVersionPath, String.valueOf(configVersion));
-    return (LinkedList<LogMutation>)
-        deserializeObject(zkManager.getData(logsPath));
+    return unsafeCast(deserializeObject(getZkData(logsPath)));
-  // TODO: following version-related code is taken from ZKRMStateStore
-      byte[] data = zkManager.getData(zkVersionPath);
+      byte[] data = getZkData(zkVersionPath);
-      zkManager.safeSetData(zkVersionPath, data, -1, zkAcl, fencingNodePath);
+      safeSetZkData(zkVersionPath, data);
-      zkManager.safeCreate(zkVersionPath, data, zkAcl, CreateMode.PERSISTENT,
-          zkAcl, fencingNodePath);
+      safeCreateZkData(zkVersionPath, data);
-      byte[] storedLogs = zkManager.getData(logsPath);
+      byte[] storedLogs = getZkData(logsPath);
-        logs = (LinkedList<LogMutation>) deserializeObject(storedLogs);
+        logs = unsafeCast(deserializeObject(storedLogs));
-      zkManager.safeSetData(logsPath, serializeObject(logs), -1, zkAcl,
-              fencingNodePath);
+      safeSetZkData(logsPath, logs);
-      zkManager.safeSetData(confStorePath, serializeObject(mapConf), -1,
-          zkAcl, fencingNodePath);
+      safeSetZkData(confStorePath, mapConf);
-      zkManager.setData(confVersionPath, String.valueOf(configVersion), -1);
+      setZkData(confVersionPath, String.valueOf(configVersion));
-      serializedSchedConf = zkManager.getData(confStorePath);
+      serializedSchedConf = getZkData(confStorePath);
-          (HashMap<String, String>) deserializeObject(serializedSchedConf);
+          unsafeCast(deserializeObject(serializedSchedConf));
-    return Long.parseLong(zkManager.getStringData(confVersionPath));
+    String version = zkManager.getStringData(confVersionPath);
+    if (version == null) {
+      throw new IllegalStateException("Config version can not be properly " +
+          "serialized. Check Zookeeper config version path to locate " +
+          "the error!");
+    }
+
+    return Long.parseLong(version);
+  /**
+   * Creates a new path in Zookeeper only, if it does not already exist.
+   *
+   * @param path Value of the Zookeeper path
+   * @return <code>true</code>if the creation executed; <code>false</code>
+   * otherwise.
+   * @throws Exception
+   */
+  private boolean createNewZkPath(String path) throws Exception {
+    if (!zkManager.exists(path)) {
+      zkManager.create(path);
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  @VisibleForTesting
+  protected byte[] getZkData(String path) throws Exception {
+    return zkManager.getData(path);
+  }
+
+  @VisibleForTesting
+  protected void setZkData(String path, byte[] data) throws Exception {
+    zkManager.setData(path, data, -1);
+  }
+
+  private void setZkData(String path, Object data) throws Exception {
+    setZkData(path, serializeObject(data));
+  }
+
+  private void setZkData(String path, String data) throws Exception {
+    zkManager.setData(path, data, -1);
+  }
+
+  private void safeSetZkData(String path, byte[] data) throws Exception {
+    zkManager.safeSetData(path, data, -1, zkAcl, fencingNodePath);
+  }
+
+  private void safeSetZkData(String path, Object data) throws Exception {
+    safeSetZkData(path, serializeObject(data));
+  }
+
+  @VisibleForTesting
+  protected void safeCreateZkData(String path, byte[] data) throws Exception {
+    zkManager.safeCreate(path, data, zkAcl, CreateMode.PERSISTENT,
+        zkAcl, fencingNodePath);
+  }
+
+
+  /**
+   * Casts an object of type Object to type T. It is essential to emphasize,
+   * that it is an unsafe operation.
+   *
+   * @param o Object to be cast from
+   * @param <T> Type to cast to
+   * @return casted object of type T
+   * @throws ClassCastException
+   */
+  @SuppressWarnings("unchecked")
+  private static <T> T unsafeCast(Object o) throws ClassCastException {
+    return (T)o;
+  }

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 INS29 INS83 INS39 INS42 INS44 INS43 INS8 MOV78 INS83 INS5 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS79 INS83 INS83 INS73 INS43 INS42 INS44 INS43 INS8 INS60 INS60 INS25 INS65 INS65 INS65 INS65 MOV43 INS42 INS42 INS25 INS39 INS85 INS43 INS42 INS42 INS41 INS42 INS43 INS42 INS5 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS5 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS5 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS41 MOV43 INS59 INS32 INS32 INS32 INS32 MOV43 INS59 INS27 INS8 INS66 INS42 INS66 INS66 INS66 INS42 INS38 INS8 INS8 INS42 INS32 INS42 INS39 INS85 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS39 INS85 INS32 INS42 INS42 INS32 INS42 INS39 INS85 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS11 INS42 MOV32 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS32 INS42 MOV32 INS42 INS33 INS53 INS42 INS32 INS21 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV38 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV38 INS42 INS42 INS42 INS42 MOV38 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS42 MOV32 MOV42 MOV32 MOV5 MOV5 INS14 INS42 INS42 INS42 INS32 INS9 INS9 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS43 INS27 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 MOV32 INS42 INS45 INS45 INS45 INS32 INS42 MOV32 DEL83 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL38 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL34 DEL38 DEL42 DEL34 DEL38 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL11 DEL42 DEL42 DEL34 DEL38 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL11 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL74 DEL11