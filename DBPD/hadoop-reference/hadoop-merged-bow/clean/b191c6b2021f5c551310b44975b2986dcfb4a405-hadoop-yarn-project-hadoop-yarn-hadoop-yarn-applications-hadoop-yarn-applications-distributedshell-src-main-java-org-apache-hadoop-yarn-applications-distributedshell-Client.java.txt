YARN-2928: YARN Timeline Service v.2: alpha 1 (sjlee)

For a list of commits and contributors, see the merge branch history.

+import java.util.HashSet;
+import java.util.Set;
+  private String flowName = null;
+  private String flowVersion = null;
+  private long flowRunId = 0L;
+
-    opts.addOption("shell_env", true, "Environment for shell script. Specified as env_key=env_val pairs");
+    opts.addOption("shell_env", true,
+        "Environment for shell script. Specified as env_key=env_val pairs");
+    opts.addOption("flow_name", true, "Flow name which the distributed shell "
+        + "app belongs to");
+    opts.addOption("flow_version", true, "Flow version which the distributed "
+        + "shell app belongs to");
+    opts.addOption("flow_run_id", true, "Flow run ID which the distributed "
+        + "shell app belongs to");
+    if (cliParser.hasOption("flow_name")) {
+      flowName = cliParser.getOptionValue("flow_name");
+    }
+    if (cliParser.hasOption("flow_version")) {
+      flowVersion = cliParser.getOptionValue("flow_version");
+    }
+    if (cliParser.hasOption("flow_run_id")) {
+      try {
+        flowRunId = Long.parseLong(cliParser.getOptionValue("flow_run_id"));
+      } catch (NumberFormatException e) {
+        throw new IllegalArgumentException(
+            "Flow run is not a valid long value", e);
+      }
+    }
+    Set<String> tags = new HashSet<String>();
+    if (flowName != null) {
+      tags.add(TimelineUtils.generateFlowNameTag(flowName));
+    }
+    if (flowVersion != null) {
+      tags.add(TimelineUtils.generateFlowVersionTag(flowVersion));
+    }
+    if (flowRunId != 0) {
+      tags.add(TimelineUtils.generateFlowRunIdTag(flowRunId));
+    }
+    appContext.setApplicationTags(tags);
+
-    }			
+    }
-    LOG.info("Completed setting up app master command " + command.toString());	   
+    LOG.info("Completed setting up app master command " + command.toString());

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS34 INS21 INS21 INS21 INS25 INS25 INS25 INS60 INS25 INS25 INS25 INS21 INS32 INS32 INS32 INS32 INS8 INS32 INS8 INS32 INS8 INS74 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS45 INS9 INS27 INS42 INS42 INS45 INS9 INS27 INS42 INS42 INS45 INS9 INS27 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS21 INS42 INS42 INS45 INS54 INS43 INS43 INS42 INS14 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS34 INS21 INS42 INS42 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS7 INS7 INS8 INS12 INS42 INS42 INS74 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS21 INS44 INS8 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS42 INS45 INS42