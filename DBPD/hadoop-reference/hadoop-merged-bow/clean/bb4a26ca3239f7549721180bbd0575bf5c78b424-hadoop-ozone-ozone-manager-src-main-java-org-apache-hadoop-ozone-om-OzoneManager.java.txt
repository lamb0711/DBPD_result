HDDS-8. Add OzoneManager Delegation Token support. Contributed by Ajay Kumar.

+import java.security.KeyPair;
+import java.util.concurrent.TimeUnit;
+import org.apache.hadoop.hdds.security.x509.certificate.client.CertificateClient;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.ipc.Server;
+import org.apache.hadoop.ozone.OmUtils;
-import org.apache.hadoop.ipc.Server;
+import org.apache.hadoop.ozone.OzoneSecurityUtil;
+import org.apache.hadoop.ozone.security.OzoneSecurityException;
+import org.apache.hadoop.ozone.security.OzoneTokenIdentifier;
+import org.apache.hadoop.ozone.security.OzoneSecretManager;
+import org.apache.hadoop.security.AccessControlException;
-import org.apache.hadoop.ozone.OmUtils;
-import org.apache.hadoop.ozone.OzoneConfigKeys;
+import org.apache.hadoop.security.token.SecretManager.InvalidToken;
+import org.apache.hadoop.security.token.Token;
-import javax.ws.rs.HEAD;
-import java.util.concurrent.TimeUnit;
+import static org.apache.hadoop.ozone.security.OzoneSecurityException.ResultCodes.*;
-import static org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneManagerService.newReflectiveBlockingService;
-  private static final AuditLogger AUDIT =
-      new AuditLogger(AuditLoggerType.OMLOGGER);
+  private static final AuditLogger AUDIT = new AuditLogger(
+      AuditLoggerType.OMLOGGER);
+  private static final String OM_DAEMON = "om";
+  private static boolean securityEnabled = false;
+  private static OzoneSecretManager secretManager;
+  // TO DO: For testing purpose only, remove before commiting
+  private KeyPair keyPair;
+  private CertificateClient certClient;
+  private static boolean testSecureOmFlag = false;
-    scmContainerClient = getScmContainerClient(configuration);
+    if (!testSecureOmFlag) {
+      scmContainerClient = getScmContainerClient(configuration);
+      // verifies that the SCM info in the OM Version file is correct.
+      scmBlockClient = getScmBlockClient(configuration);
+      ScmInfo scmInfo = scmBlockClient.getScmInfo();
+      if (!(scmInfo.getClusterId().equals(omStorage.getClusterID()) && scmInfo
+          .getScmId().equals(omStorage.getScmId()))) {
+        throw new OMException("SCM version info mismatch.",
+            ResultCodes.SCM_VERSION_MISMATCH_ERROR);
+      }
+    } else {
+      // For testing purpose only
+      scmContainerClient = null;
+      scmBlockClient = null;
+    }
+    InetSocketAddress omNodeRpcAddr = getOmAddress(configuration);
+    int handlerCount = configuration.getInt(OZONE_OM_HANDLER_COUNT_KEY,
+        OZONE_OM_HANDLER_COUNT_DEFAULT);
-    // verifies that the SCM info in the OM Version file is correct.
-    scmBlockClient = getScmBlockClient(configuration);
+    // This is a temporary check. Once fully implemented, all OM state change
+    // should go through Ratis - either standalone (for non-HA) or replicated
+    // (for HA).
+    boolean omRatisEnabled = configuration.getBoolean(
+        OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,
+        OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);
+    if (omRatisEnabled) {
+      omRatisServer = OzoneManagerRatisServer.newOMRatisServer(this, omId,
+          omNodeRpcAddr.getAddress(), configuration);
+      omRatisServer.start();
-    ScmInfo scmInfo = scmBlockClient.getScmInfo();
-    if (!(scmInfo.getClusterId().equals(omStorage.getClusterID()) && scmInfo
-        .getScmId().equals(omStorage.getScmId()))) {
-      throw new OMException("SCM version info mismatch.",
-          ResultCodes.SCM_VERSION_MISMATCH_ERROR);
+      LOG.info("OzoneManager Ratis server started at port {}",
+          omRatisServer.getServerPort());
+
+      omRatisClient = OzoneManagerRatisClient.newOzoneManagerRatisClient(
+          omId, omRatisServer.getRaftGroup(), configuration);
+      omRatisClient.connect();
+    } else {
+      omRatisServer = null;
+      omRatisClient = null;
+    BlockingService omService = newReflectiveBlockingService(
+        new OzoneManagerProtocolServerSideTranslatorPB(
+            this, omRatisClient, omRatisEnabled));
+    secretManager = createSecretManager(configuration);
+
+    omRpcServer = startRpcServer(configuration, omNodeRpcAddr,
+        OzoneManagerProtocolPB.class, omService,
+        handlerCount);
+    omRpcAddress = updateRPCListenAddress(configuration,
+        OZONE_OM_ADDRESS_KEY, omNodeRpcAddr, omRpcServer);
+  private OzoneSecretManager createSecretManager(
+      OzoneConfiguration conf)
+      throws IOException {
+    long tokenRemoverScanInterval =
+        conf.getTimeDuration(OMConfigKeys.DELEGATION_REMOVER_SCAN_INTERVAL_KEY,
+            OMConfigKeys.DELEGATION_REMOVER_SCAN_INTERVAL_DEFAULT,
+            TimeUnit.MILLISECONDS);
+    long tokenMaxLifetime =
+        conf.getTimeDuration(OMConfigKeys.DELEGATION_TOKEN_MAX_LIFETIME_KEY,
+            OMConfigKeys.DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT,
+            TimeUnit.MILLISECONDS);
+    long tokenRenewInterval =
+        conf.getTimeDuration(OMConfigKeys.DELEGATION_TOKEN_RENEW_INTERVAL_KEY,
+            OMConfigKeys.DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT,
+            TimeUnit.MILLISECONDS);
+    Text omRpcAddressTxt = new Text(OmUtils.getOmRpcAddress(configuration));
+
+    return new OzoneSecretManager(conf, tokenMaxLifetime, tokenRenewInterval,
+        tokenRemoverScanInterval, omRpcAddressTxt);
+  }
+
+  private void stopSecretManager() throws IOException {
+    if (secretManager != null) {
+      LOG.info("Stopping OM secret manager");
+      secretManager.stop();
+    }
+  }
+
+  private void startSecretManager() {
+    if (secretManager != null) {
+      try {
+        readKeyPair();
+        LOG.info("Starting OM secret manager");
+        secretManager.startThreads(keyPair);
+      } catch (IOException e) {
+        // Inability to start secret manager
+        // can't be recovered from.
+        LOG.error("Error starting secret manager.", e);
+        throw new RuntimeException(e);
+      }
+    }
+  }
+
+  public void setCertClient(CertificateClient certClient) {
+    // TODO: Initialize it in contructor with implementation for certClient.
+    this.certClient = certClient;
+  }
+
+  /**
+   * Read private key from file.
+   */
+  private void readKeyPair() throws OzoneSecurityException {
+    try {
+      keyPair = new KeyPair(certClient.getPublicKey(OM_DAEMON),
+          certClient.getPrivateKey(OM_DAEMON));
+    } catch (Exception e) {
+      throw new OzoneSecurityException("Error reading private file for "
+          + "OzoneManager", e, OM_PUBLIC_PRIVATE_KEY_FILE_NOT_EXIST);
+    }
+  }
+
-    if (SecurityUtil.getAuthenticationMethod(conf).equals
-        (AuthenticationMethod.KERBEROS)) {
+    if (SecurityUtil.getAuthenticationMethod(conf).equals(
+        AuthenticationMethod.KERBEROS)) {
-      throw new AuthenticationException(SecurityUtil.getAuthenticationMethod
-          (conf) + " authentication method not supported. OM user login "
+      throw new AuthenticationException(SecurityUtil.getAuthenticationMethod(
+          conf) + " authentication method not supported. OM user login "
-        .setSecretManager(null)
+        .setSecretManager(secretManager)
+  private static boolean isOzoneSecurityEnabled() {
+    return securityEnabled;
+  }
+
+
+    securityEnabled = OzoneSecurityUtil.isSecurityEnabled(conf);
-    if (conf.getBoolean(OzoneConfigKeys.OZONE_SECURITY_ENABLED_KEY, true)) {
+    if (securityEnabled) {
-    InetSocketAddress omNodeRpcAddr = getOmAddress(configuration);
-    int handlerCount = configuration.getInt(OZONE_OM_HANDLER_COUNT_KEY,
-        OZONE_OM_HANDLER_COUNT_DEFAULT);
-
-    // This is a temporary check. Once fully implemented, all OM state change
-    // should go through Ratis - either standalone (for non-HA) or replicated
-    // (for HA).
-    boolean omRatisEnabled = configuration.getBoolean(
-        OMConfigKeys.OZONE_OM_RATIS_ENABLE_KEY,
-        OMConfigKeys.OZONE_OM_RATIS_ENABLE_DEFAULT);
-    if (omRatisEnabled) {
-      omRatisServer = OzoneManagerRatisServer.newOMRatisServer(this, omId,
-          omNodeRpcAddr.getAddress(), configuration);
-      omRatisServer.start();
-
-      LOG.info("OzoneManager Ratis server started at port {}",
-          omRatisServer.getServerPort());
-
-      omRatisClient = OzoneManagerRatisClient.newOzoneManagerRatisClient(
-          omId, omRatisServer.getRaftGroup(), configuration);
-      omRatisClient.connect();
-    } else {
-      omRatisServer = null;
-      omRatisClient = null;
-    }
-
-    BlockingService omService = newReflectiveBlockingService(
-        new OzoneManagerProtocolServerSideTranslatorPB(
-            this, omRatisClient, omRatisEnabled));
-    omRpcServer = startRpcServer(configuration, omNodeRpcAddr,
-        OzoneManagerProtocolPB.class, omService,
-        handlerCount);
-    omRpcAddress = updateRPCListenAddress(configuration,
-        OZONE_OM_ADDRESS_KEY, omNodeRpcAddr, omRpcServer);
-    omRpcServer.start();
-
-
+    startSecretManagerIfNecessary();
-
-    httpServer = new OzoneManagerHttpServer(configuration, this);
+    omRpcServer.start();
+      stopSecretManager();
+  private void startSecretManagerIfNecessary() {
+    boolean shouldRun = shouldUseDelegationTokens() && isOzoneSecurityEnabled();
+    boolean running = secretManager.isRunning();
+    if (shouldRun && !running) {
+      startSecretManager();
+    }
+  }
+
+  private boolean shouldUseDelegationTokens() {
+    return UserGroupInformation.isSecurityEnabled();
+  }
+
+
+  /**
+   *
+   * @return true if delegation token operation is allowed
+   */
+  private boolean isAllowedDelegationTokenOp() throws IOException {
+    AuthenticationMethod authMethod = getConnectionAuthenticationMethod();
+    if (UserGroupInformation.isSecurityEnabled()
+        && (authMethod != AuthenticationMethod.KERBEROS)
+        && (authMethod != AuthenticationMethod.KERBEROS_SSL)
+        && (authMethod != AuthenticationMethod.CERTIFICATE)) {
+      return false;
+    }
+    return true;
+  }
+
+  /**
+   * Returns authentication method used to establish the connection.
+   * @return AuthenticationMethod used to establish connection
+   * @throws IOException
+   */
+  private AuthenticationMethod getConnectionAuthenticationMethod()
+      throws IOException {
+    UserGroupInformation ugi = getRemoteUser();
+    AuthenticationMethod authMethod = ugi.getAuthenticationMethod();
+    if (authMethod == AuthenticationMethod.PROXY) {
+      authMethod = ugi.getRealUser().getAuthenticationMethod();
+    }
+    return authMethod;
+  }
+
+  // optimize ugi lookup for RPC operations to avoid a trip through
+  // UGI.getCurrentUser which is synch'ed
+  private static UserGroupInformation getRemoteUser() throws IOException {
+    UserGroupInformation ugi = Server.getRemoteUser();
+    return (ugi != null) ? ugi : UserGroupInformation.getCurrentUser();
+  }
+
+  /**
+   * Get delegation token from OzoneManager.
+   * @param renewer Renewer information
+   * @return delegationToken DelegationToken signed by OzoneManager
+   * @throws IOException on error
+   */
+  @Override
+  public Token<OzoneTokenIdentifier> getDelegationToken(Text renewer)
+      throws IOException {
+    final boolean success;
+    final String tokenId;
+    Token<OzoneTokenIdentifier> token;
+
+    if (!isAllowedDelegationTokenOp()) {
+      throw new IOException("Delegation Token can be issued only with "
+          + "kerberos or web authentication");
+    }
+    if (secretManager == null || !secretManager.isRunning()) {
+      LOG.warn("trying to get DT with no secret manager running in OM.");
+      return null;
+    }
+
+    UserGroupInformation ugi = getRemoteUser();
+    String user = ugi.getUserName();
+    Text owner = new Text(user);
+    Text realUser = null;
+    if (ugi.getRealUser() != null) {
+      realUser = new Text(ugi.getRealUser().getUserName());
+    }
+
+    token = secretManager.createToken(owner, renewer, realUser);
+    return token;
+  }
+
+  /**
+   * Method to renew a delegationToken issued by OzoneManager.
+   * @param token token to renew
+   * @return new expiryTime of the token
+   * @throws InvalidToken if {@code token} is invalid
+   * @throws IOException on other errors
+   */
+  @Override
+  public long renewDelegationToken(Token<OzoneTokenIdentifier> token)
+      throws InvalidToken, IOException {
+    long expiryTime;
+
+    try {
+
+      if (!isAllowedDelegationTokenOp()) {
+        throw new IOException("Delegation Token can be renewed only with "
+            + "kerberos or web authentication");
+      }
+      String renewer = getRemoteUser().getShortUserName();
+      expiryTime = secretManager.renewToken(token, renewer);
+
+    } catch (AccessControlException ace) {
+      final OzoneTokenIdentifier id = OzoneTokenIdentifier.readProtoBuf(
+          token.getIdentifier());
+      LOG.error("Delegation token renewal failed for dt: {}, cause: {}",
+          id.toString(), ace.getMessage());
+      throw ace;
+    }
+    return expiryTime;
+  }
+
+  /**
+   * Cancels a delegation token.
+   * @param token token to cancel
+   * @throws IOException on error
+   */
+  @Override
+  public void cancelDelegationToken(Token<OzoneTokenIdentifier> token)
+      throws IOException {
+    OzoneTokenIdentifier id = null;
+    try {
+      String canceller = getRemoteUser().getUserName();
+      id = secretManager.cancelToken(token, canceller);
+      LOG.trace("Delegation token renewed for dt: {}", id);
+    } catch (AccessControlException ace) {
+      LOG.error("Delegation token renewal failed for dt: {}, cause: {}", id,
+          ace.getMessage());
+      throw ace;
+    }
+  }
+
+  public static void setTestSecureOmFlag(boolean testSecureOmFlag) {
+    OzoneManager.testSecureOmFlag = testSecureOmFlag;
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS83 INS83 INS39 INS42 INS8 MOV21 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS83 INS83 INS43 INS42 INS43 INS8 INS29 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS25 MOV60 MOV60 MOV60 MOV25 MOV60 INS21 MOV21 MOV21 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS41 INS42 INS25 INS25 INS43 INS42 INS21 INS65 INS42 INS54 INS41 INS21 MOV21 INS60 INS60 INS25 INS41 INS65 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS42 INS60 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS43 INS43 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS60 INS60 INS60 INS60 INS25 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS74 INS42 INS42 INS42 INS60 INS54 INS41 INS65 INS65 INS65 INS42 INS74 INS42 INS42 INS60 INS54 INS39 INS42 INS21 INS38 INS8 INS8 INS7 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS14 INS27 INS8 INS27 INS8 INS42 INS7 INS66 INS8 INS12 INS42 INS7 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS66 INS43 INS59 INS27 INS8 INS9 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS16 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS83 INS39 INS59 INS83 INS43 INS59 INS74 INS59 INS38 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS43 INS43 INS39 INS59 INS8 INS12 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS43 INS59 INS8 INS12 INS7 INS42 MOV21 MOV21 MOV60 MOV25 INS21 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS33 INS54 INS22 INS42 INS21 INS44 INS8 INS42 INS32 UPD42 INS21 INS42 INS27 INS42 INS32 INS42 INS38 INS21 INS42 INS42 INS42 INS42 INS32 INS32 INS36 INS36 INS36 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS21 INS42 INS42 INS32 INS36 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS53 INS27 INS38 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS33 INS32 INS33 INS21 INS42 INS32 INS66 INS42 INS42 INS42 INS25 INS60 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS33 INS60 INS21 INS21 INS44 INS8 INS40 INS42 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS43 INS32 INS42 INS32 INS32 INS8 INS12 INS52 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS27 INS27 INS9 INS42 INS42 INS42 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS32 INS32 INS33 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS59 INS7 INS32 INS43 INS42 INS21 INS53 INS42 INS33 INS42 INS33 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS21 INS21 INS21 INS44 INS8 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS32 INS42 INS33 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS14 INS32 INS53 INS42 INS42 INS32 INS42 INS32 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS53 INS43 INS32 INS32 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS43 INS32 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 DEL33 DEL42 DEL42 DEL40 DEL9 DEL32 DEL42 DEL42 DEL43 DEL42 DEL52 DEL14 DEL7 DEL21