HDFS-12069. Ozone: Create a general abstraction for metadata store. Contributed by Weiwei Yang.

-import org.apache.hadoop.utils.LevelDBKeyFilters.LevelDBKeyFilter;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.hadoop.utils.MetadataKeyFilters.MetadataKeyFilter;
-import java.io.Closeable;
-public class LevelDBStore implements Closeable {
+public class LevelDBStore implements MetadataStore {
-  /**
-   * Opens a DB file.
-   *
-   * @param dbPath          - DB File path
-   * @param createIfMissing - Create if missing
-   * @throws IOException
-   */
-  public LevelDBStore(File dbPath, boolean createIfMissing) throws
-      IOException {
+  public LevelDBStore(File dbPath, boolean createIfMissing)
+      throws IOException {
-    db = JniDBFactory.factory.open(dbPath, dbOptions);
-    if (db == null) {
-      throw new IOException("Db is null");
-    }
+    openDB(dbPath, dbOptions);
-    db = JniDBFactory.factory.open(dbPath, options);
-    if (db == null) {
-      throw new IOException("Db is null");
-    }
+    openDB(dbPath, dbOptions);
+  private void openDB(File dbPath, Options options) throws IOException {
+    db = JniDBFactory.factory.open(dbPath, options);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("LevelDB successfully opened");
+      LOG.debug("[Option] cacheSize = " + options.cacheSize());
+      LOG.debug("[Option] createIfMissing = " + options.createIfMissing());
+      LOG.debug("[Option] blockSize = " + options.blockSize());
+      LOG.debug("[Option] compressionType= " + options.compressionType());
+      LOG.debug("[Option] maxOpenFiles= " + options.maxOpenFiles());
+      LOG.debug("[Option] writeBufferSize= "+ options.writeBufferSize());
+    }
+  }
+  @Override
+  @Override
+  @Override
+  @Override
-    DBIterator iter = db.iterator();
-    try {
+    try (DBIterator iter = db.iterator()) {
-      return !iter.hasNext();
-    } finally {
-      iter.close();
+      boolean hasNext = !iter.hasNext();
+      return hasNext;
-   * Returns Java File Object that points to the DB.
-   * @return File
-   */
-  public File getDbFile() {
-    return dbFile;
-  }
-
-  /**
+  @Override
-  /**
-   * Returns a write batch for write multiple key-value pairs atomically.
-   * @return write batch that can be commit atomically.
-   */
-  public WriteBatch createWriteBatch() {
-    return db.createWriteBatch();
+  @Override
+  public ImmutablePair<byte[], byte[]> peekAround(int offset,
+      byte[] from) throws IOException, IllegalArgumentException {
+    try (DBIterator it = db.iterator()) {
+      if (from == null) {
+        it.seekToFirst();
+      } else {
+        it.seek(from);
+      }
+      if (!it.hasNext()) {
+        throw new IOException("Key not found");
+      }
+      switch (offset) {
+      case 0:
+        Entry<byte[], byte[]> current = it.next();
+        return new ImmutablePair<>(current.getKey(), current.getValue());
+      case 1:
+        if (it.next() != null && it.hasNext()) {
+          Entry<byte[], byte[]> next = it.peekNext();
+          return new ImmutablePair<>(next.getKey(), next.getValue());
+        }
+        break;
+      case -1:
+        if (it.hasPrev()) {
+          Entry<byte[], byte[]> prev = it.peekPrev();
+          return new ImmutablePair<>(prev.getKey(), prev.getValue());
+        }
+        break;
+      default:
+        throw new IllegalArgumentException(
+            "Position can only be -1, 0 " + "or 1, but found " + offset);
+      }
+    }
+    return null;
-  /**
-   * Commit multiple writes of key-value pairs atomically.
-   * @param wb
-   */
-  public void commitWriteBatch(WriteBatch wb) {
-    db.write(wb, writeOptions);
-  }
-
-  /**
-   * Close a write batch of multiple writes to key-value pairs.
-   * @param wb - write batch.
-   * @throws IOException
-   */
-  public void closeWriteBatch(WriteBatch wb) throws IOException {
-    wb.close();
+  @Override
+  public void iterate(byte[] from, EntryConsumer consumer)
+      throws IOException {
+    try (DBIterator iter = db.iterator()) {
+      if (from != null) {
+        iter.seek(from);
+      } else {
+        iter.seekToFirst();
+      }
+      while (iter.hasNext()) {
+        Entry<byte[], byte[]> current = iter.next();
+        if (!consumer.consume(current.getKey(),
+            current.getValue())) {
+          break;
+        }
+      }
+    }
+  @Override
-  /**
-   * Returns a certain range of key value pairs as a list based on a startKey
-   * or count.
-   *
-   * @param keyPrefix start key.
-   * @param count number of entries to return.
-   * @return a range of entries or an empty list if nothing found.
-   * @throws IOException
-   *
-   * @see #getRangeKVs(byte[], int, LevelDBKeyFilter...)
-   */
-  public List<Entry<byte[], byte[]>> getRangeKVs(byte[] keyPrefix, int count)
-      throws IOException {
-    LevelDBKeyFilter emptyFilter = (preKey, currentKey, nextKey) -> true;
-    return getRangeKVs(keyPrefix, count, emptyFilter);
+  @Override
+  public void writeBatch(BatchOperation operation) throws IOException {
+    List<BatchOperation.SingleOperation> operations =
+        operation.getOperations();
+    if (!operations.isEmpty()) {
+      try (WriteBatch writeBatch = db.createWriteBatch()) {
+        for (BatchOperation.SingleOperation opt : operations) {
+          switch (opt.getOpt()) {
+          case DELETE:
+            writeBatch.delete(opt.getKey());
+            break;
+          case PUT:
+            writeBatch.put(opt.getKey(), opt.getValue());
+            break;
+          default:
+            throw new IllegalArgumentException("Invalid operation "
+                + opt.getOpt());
+          }
+        }
+        db.write(writeBatch);
+      }
+    }
-   * startKey or count. Further a {@link LevelDBKeyFilter} can be added to
+   * startKey or count. Further a {@link MetadataKeyFilter} can be added to
-   * This method allows to specify one or more {@link LevelDBKeyFilter}
+   * This method allows to specify one or more {@link MetadataKeyFilter}
-   * @param filters customized one or more {@link LevelDBKeyFilter}.
+   * @param filters customized one or more {@link MetadataKeyFilter}.
+  @Override
-      int count, LevelDBKeyFilter... filters) throws IOException {
+      int count, MetadataKeyFilter... filters) throws IOException {
-                + " result length is {}.",
-            timeConsumed, result.size());
+                + " result length is {}.", timeConsumed, result.size());

MOV26 MOV31 UPD40 UPD40 UPD43 INS31 INS31 INS31 UPD42 MOV21 UPD83 INS39 INS42 INS44 INS44 MOV43 INS8 INS78 INS78 INS78 INS78 INS78 INS78 MOV83 INS74 INS42 INS44 INS44 MOV43 INS43 INS8 INS78 MOV83 INS39 INS42 MOV44 INS44 INS43 INS8 INS78 INS78 INS83 INS39 INS42 INS44 MOV43 MOV8 INS78 INS21 INS43 INS42 INS43 INS42 MOV21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS5 INS5 INS39 INS42 MOV5 INS42 UPD42 MOV42 INS54 INS41 INS42 UPD42 INS43 INS42 INS42 INS54 INS42 INS42 INS43 INS42 INS60 INS25 INS42 UPD43 INS32 INS32 MOV42 INS42 INS32 INS8 INS58 INS42 INS39 INS85 INS39 INS85 INS58 INS8 INS33 UPD42 MOV42 INS58 INS8 INS42 INS74 INS59 INS38 INS8 UPD42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV43 MOV59 INS60 INS43 INS59 INS25 MOV25 INS50 INS43 INS59 INS25 INS61 INS43 INS43 INS42 INS32 INS32 INS54 UPD42 UPD42 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS39 INS59 INS42 INS42 INS42 INS32 INS27 INS8 INS8 INS38 INS42 INS49 INS60 INS41 INS49 INS25 INS10 INS49 INS25 INS10 INS49 INS53 INS42 INS42 INS32 INS27 INS8 INS8 INS32 INS8 UPD42 MOV42 INS40 INS42 INS42 INS42 INS42 INS58 INS8 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 MOV38 INS42 INS42 INS42 INS33 INS21 MOV21 INS32 INS34 INS74 INS59 INS14 INS34 INS27 INS8 INS38 INS32 INS8 INS14 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS60 INS25 MOV43 INS59 INS70 INS21 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS32 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS74 INS32 INS32 INS27 INS32 INS60 INS41 INS34 INS42 INS42 INS60 INS41 INS43 INS27 INS32 INS32 INS74 INS59 INS38 INS8 UPD42 MOV42 MOV32 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD45 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS33 INS42 INS42 INS74 INS59 INS14 INS74 INS59 INS14 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 MOV5 MOV5 INS42 INS32 INS32 INS10 INS43 INS42 INS50 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS43 INS5 INS5 INS42 INS32 INS74 INS32 INS32 INS43 INS5 INS5 INS42 INS32 INS74 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS40 INS32 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS39 INS85 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS14 INS42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS43 INS27 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL42 DEL33 DEL27 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL40 DEL32 DEL7 DEL66 DEL65 DEL66 DEL65 DEL29 DEL43 DEL42 DEL42 DEL41 DEL8 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL33 DEL27 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8 DEL31 DEL43 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL9 DEL86 DEL59 DEL60 DEL32 DEL41 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL42 DEL69 DEL39 DEL69 DEL43 DEL69 DEL68 DEL65 DEL29 DEL43 DEL74 DEL74 DEL42 DEL39 DEL42 DEL44 DEL31