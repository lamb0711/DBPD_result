YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)

-import java.util.concurrent.atomic.AtomicInteger;
-  private AtomicInteger numNodeManagers = new AtomicInteger(0);
-
-    return numNodeManagers.get();
+    return nodeTracker.nodeCount();
-    Collection<FiCaSchedulerNode> nodes = cs.getAllNodes().values();
+    Collection<FiCaSchedulerNode> nodes = cs.nodeTracker.getAllNodes();
-    root.reinitialize(newRoot, clusterResource);
+    root.reinitialize(newRoot, getClusterResource());
+    Resource clusterResource = getClusterResource();
-                   clusterResource, getMinimumResourceCapability());
+          getClusterResource(), getMinimumResourceCapability());
-      LOG.debug("nodeUpdate: " + nm + " clusterResources: " + clusterResource);
+      LOG.debug("nodeUpdate: " + nm +
+          " clusterResources: " + getClusterResource());
+    Resource clusterResource = getClusterResource();
-    FiCaSchedulerNode node = nodes.get(nodeId);
+    FiCaSchedulerNode node = nodeTracker.getNode(nodeId);
-              clusterResource,
+              getClusterResource(),
-                  RMNodeLabelsManager.NO_LABEL, clusterResource)),
+                  RMNodeLabelsManager.NO_LABEL, getClusterResource())),
-            clusterResource,
+            getClusterResource(),
-                RMNodeLabelsManager.NO_LABEL, clusterResource)),
+                RMNodeLabelsManager.NO_LABEL, getClusterResource())),
-        if (Resources.greaterThan(calculator, clusterResource,
+        if (Resources.greaterThan(calculator, getClusterResource(),
-            clusterResource,
+            getClusterResource(),
-                RMNodeLabelsManager.NO_LABEL, clusterResource)),
+                RMNodeLabelsManager.NO_LABEL, getClusterResource())),
-    this.nodes.put(nodeManager.getNodeID(), schedulerNode);
-    Resources.addTo(clusterResource, schedulerNode.getTotalResource());
+    nodeTracker.addNode(schedulerNode);
-    
+
+    Resource clusterResource = getClusterResource();
-    int numNodes = numNodeManagers.incrementAndGet();
-    updateMaximumAllocation(schedulerNode, true);
-    
+
-    if (scheduleAsynchronously && numNodes == 1) {
+    if (scheduleAsynchronously && getNumClusterNodes() == 1) {
-    
-    FiCaSchedulerNode node = nodes.get(nodeInfo.getNodeID());
+
+    NodeId nodeId = nodeInfo.getNodeID();
+    FiCaSchedulerNode node = nodeTracker.getNode(nodeId);
+      LOG.error("Attempting to remove non-existent node " + nodeId);
-    Resources.subtractFrom(clusterResource, node.getTotalResource());
-    root.updateClusterResource(clusterResource, new ResourceLimits(
-        clusterResource));
-    int numNodes = numNodeManagers.decrementAndGet();
-    if (scheduleAsynchronously && numNodes == 0) {
-      asyncSchedulerThread.suspendSchedule();
-    }
-    
-    this.nodes.remove(nodeInfo.getNodeID());
-    updateMaximumAllocation(node, false);
+    nodeTracker.removeNode(nodeId);
+    Resource clusterResource = getClusterResource();
+    root.updateClusterResource(clusterResource, new ResourceLimits(
+        clusterResource));
+    int numNodes = nodeTracker.nodeCount();
+
+    if (scheduleAsynchronously && numNodes == 0) {
+      asyncSchedulerThread.suspendSchedule();
+    }
-        " clusterResource: " + clusterResource);
+        " clusterResource: " + getClusterResource());
-    queue.completedContainer(clusterResource, application, node, 
+    queue.completedContainer(getClusterResource(), application, node,
-      queue.decreaseContainer(clusterResource, decreaseRequest, app);
+      queue.decreaseContainer(getClusterResource(), decreaseRequest, app);
-    return nodes.get(nodeId);
+    return nodeTracker.getNode(nodeId);
-  @Lock(Lock.NoLock.class)
-  Map<NodeId, FiCaSchedulerNode> getAllNodes() {
-    return nodes;
-  }
-
-      source.detachContainer(clusterResource, app, rmContainer);
+      source.detachContainer(getClusterResource(), app, rmContainer);
-      dest.attachContainer(clusterResource, app, rmContainer);
+      dest.attachContainer(getClusterResource(), app, rmContainer);

MOV21 MOV60 MOV25 INS60 INS60 INS60 INS60 INS21 INS60 INS43 INS59 INS43 INS59 INS43 INS59 MOV43 MOV43 INS59 INS32 INS43 INS59 UPD42 UPD42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV32 INS42 INS32 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 UPD42 UPD42 INS40 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS27 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS32 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL42 DEL32 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL40 DEL43 DEL57 DEL79 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31