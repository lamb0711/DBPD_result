Merge from trunk to branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1610853 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.snapshot.INodeDirectorySnapshottable;
-      final INodeFile pendingFile = analyzeFileState(
+      FileState fileState = analyzeFileState(
-      src = pendingFile.getFullPathName();
+      final INodeFile pendingFile = fileState.inode;
+      src = fileState.path;
-      final INodeFile pendingFile =
+      FileState fileState = 
+      final INodeFile pendingFile = fileState.inode;
+      src = fileState.path;
-  INodeFile analyzeFileState(String src,
+  static class FileState {
+    public final INodeFile inode;
+    public final String path;
+
+    public FileState(INodeFile inode, String fullPath) {
+      this.inode = inode;
+      this.path = fullPath;
+    }
+  }
+
+  FileState analyzeFileState(String src,
-        return pendingFile;
+        return new FileState(pendingFile, src);
-    return pendingFile;
+    return new FileState(pendingFile, src);
-    // A file is considered deleted, if it has no parent or is marked
+    // A file is considered deleted, if it is not in the inodeMap or is marked
-    if (file.getParent() == null || (file.isWithSnapshot() &&
-        file.getFileWithSnapshotFeature().isCurrentFileDeleted())) {
+    if (isFileDeleted(file)) {
-      removePathAndBlocks(src, null, null);
+      removePathAndBlocks(src, null, removedINodes, true);
-    dir.writeLock();
-    try {
-      dir.removeFromInodeMap(removedINodes);
-    } finally {
-      dir.writeUnlock();
-    }
-    removedINodes.clear();
+   * @param acquireINodeMapLock Whether to acquire the lock for inode removal
-      List<INode> removedINodes) {
+      List<INode> removedINodes, final boolean acquireINodeMapLock) {
-      dir.removeFromInodeMap(removedINodes);
+      if (acquireINodeMapLock) {
+        dir.writeLock();
+      }
+      try {
+        dir.removeFromInodeMap(removedINodes);
+      } finally {
+        if (acquireINodeMapLock) {
+          dir.writeUnlock();
+        }
+      }
+  private boolean isFileDeleted(INodeFile file) {
+    // Not in the inodeMap or in the snapshot but marked deleted.
+    if (dir.getInode(file.getId()) == null || 
+        file.getParent() == null || (file.isWithSnapshot() &&
+        file.getFileWithSnapshotFeature().isCurrentFileDeleted())) {
+      return true;
+    }
+    return false;
+  }
+
-    if (file == null || !file.isUnderConstruction()) {
+    if (file == null || !file.isUnderConstruction() || isFileDeleted(file)) {
-  void removeSnapshottableDirs(List<INodeDirectorySnapshottable> toRemove) {
+  void removeSnapshottableDirs(List<INodeDirectory> toRemove) {

INS55 INS31 INS83 INS42 INS23 INS23 INS31 INS43 INS44 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS42 INS25 INS65 INS83 INS39 INS42 INS43 INS42 MOV25 INS41 UPD74 INS42 INS42 INS42 INS42 MOV43 INS42 INS43 INS42 INS21 INS21 INS14 INS32 MOV8 INS42 INS66 INS42 INS8 INS9 INS27 UPD43 INS60 INS60 INS21 INS42 INS7 INS7 INS43 INS42 INS42 INS42 INS42 INS25 MOV54 MOV21 INS27 INS41 MOV27 INS32 UPD42 INS43 INS83 MOV43 INS59 INS43 INS83 MOV43 INS59 INS7 INS22 INS42 INS22 INS42 INS42 INS42 INS8 INS8 INS27 MOV27 INS9 INS42 INS42 INS42 UPD42 INS42 INS40 INS40 INS42 UPD42 INS42 INS40 INS42 INS40 INS52 INS42 INS52 INS42 INS42 INS9 MOV21 INS25 INS32 INS33 INS42 MOV8 INS42 INS42 INS32 INS14 INS42 INS42 INS43 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL33 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21