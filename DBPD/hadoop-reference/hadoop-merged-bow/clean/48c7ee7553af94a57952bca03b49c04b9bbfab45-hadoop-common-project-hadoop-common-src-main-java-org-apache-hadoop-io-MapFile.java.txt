HADOOP-11569. Provide Merge API for MapFile to merge multiple similar MapFiles to one MapFile. Contributed by Vinayakumar B.

+import org.apache.hadoop.HadoopIllegalArgumentException;
+  /**
+   * Class to merge multiple MapFiles of same Key and Value types to one MapFile
+   */
+  public static class Merger {
+    private Configuration conf;
+    private WritableComparator comparator = null;
+    private Reader[] inReaders;
+    private Writer outWriter;
+    private Class<Writable> valueClass = null;
+    private Class<WritableComparable> keyClass = null;
+
+    public Merger(Configuration conf) throws IOException {
+      this.conf = conf;
+    }
+
+    /**
+     * Merge multiple MapFiles to one Mapfile
+     *
+     * @param inMapFiles
+     * @param outMapFile
+     * @throws IOException
+     */
+    public void merge(Path[] inMapFiles, boolean deleteInputs,
+        Path outMapFile) throws IOException {
+      try {
+        open(inMapFiles, outMapFile);
+        mergePass();
+      } finally {
+        close();
+      }
+      if (deleteInputs) {
+        for (int i = 0; i < inMapFiles.length; i++) {
+          Path path = inMapFiles[i];
+          delete(path.getFileSystem(conf), path.toString());
+        }
+      }
+    }
+
+    /*
+     * Open all input files for reading and verify the key and value types. And
+     * open Output file for writing
+     */
+    @SuppressWarnings("unchecked")
+    private void open(Path[] inMapFiles, Path outMapFile) throws IOException {
+      inReaders = new Reader[inMapFiles.length];
+      for (int i = 0; i < inMapFiles.length; i++) {
+        Reader reader = new Reader(inMapFiles[i], conf);
+        if (keyClass == null || valueClass == null) {
+          keyClass = (Class<WritableComparable>) reader.getKeyClass();
+          valueClass = (Class<Writable>) reader.getValueClass();
+        } else if (keyClass != reader.getKeyClass()
+            || valueClass != reader.getValueClass()) {
+          throw new HadoopIllegalArgumentException(
+              "Input files cannot be merged as they"
+                  + " have different Key and Value classes");
+        }
+        inReaders[i] = reader;
+      }
+
+      if (comparator == null) {
+        Class<? extends WritableComparable> cls;
+        cls = keyClass.asSubclass(WritableComparable.class);
+        this.comparator = WritableComparator.get(cls, conf);
+      } else if (comparator.getKeyClass() != keyClass) {
+        throw new HadoopIllegalArgumentException(
+            "Input files cannot be merged as they"
+                + " have different Key class compared to"
+                + " specified comparator");
+      }
+
+      outWriter = new MapFile.Writer(conf, outMapFile,
+          MapFile.Writer.keyClass(keyClass),
+          MapFile.Writer.valueClass(valueClass));
+    }
+
+    /**
+     * Merge all input files to output map file.<br>
+     * 1. Read first key/value from all input files to keys/values array. <br>
+     * 2. Select the least key and corresponding value. <br>
+     * 3. Write the selected key and value to output file. <br>
+     * 4. Replace the already written key/value in keys/values arrays with the
+     * next key/value from the selected input <br>
+     * 5. Repeat step 2-4 till all keys are read. <br>
+     */
+    private void mergePass() throws IOException {
+      // re-usable array
+      WritableComparable[] keys = new WritableComparable[inReaders.length];
+      Writable[] values = new Writable[inReaders.length];
+      // Read first key/value from all inputs
+      for (int i = 0; i < inReaders.length; i++) {
+        keys[i] = ReflectionUtils.newInstance(keyClass, null);
+        values[i] = ReflectionUtils.newInstance(valueClass, null);
+        if (!inReaders[i].next(keys[i], values[i])) {
+          // Handle empty files
+          keys[i] = null;
+          values[i] = null;
+        }
+      }
+
+      do {
+        int currentEntry = -1;
+        WritableComparable currentKey = null;
+        Writable currentValue = null;
+        for (int i = 0; i < keys.length; i++) {
+          if (keys[i] == null) {
+            // Skip Readers reached EOF
+            continue;
+          }
+          if (currentKey == null || comparator.compare(currentKey, keys[i]) > 0) {
+            currentEntry = i;
+            currentKey = keys[i];
+            currentValue = values[i];
+          }
+        }
+        if (currentKey == null) {
+          // Merge Complete
+          break;
+        }
+        // Write the selected key/value to merge stream
+        outWriter.append(currentKey, currentValue);
+        // Replace the already written key/value in keys/values arrays with the
+        // next key/value from the selected input
+        if (!inReaders[currentEntry].next(keys[currentEntry],
+            values[currentEntry])) {
+          // EOF for this file
+          keys[currentEntry] = null;
+          values[currentEntry] = null;
+        }
+      } while (true);
+    }
+
+    private void close() throws IOException {
+      for (int i = 0; i < inReaders.length; i++) {
+        IOUtils.closeStream(inReaders[i]);
+        inReaders[i] = null;
+      }
+      if (outWriter != null) {
+        outWriter.close();
+        outWriter = null;
+      }
+    }
+  }

INS26 INS40 INS55 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS65 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS5 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS79 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS66 INS42 INS42 INS42 INS42 INS33 INS43 INS85 INS42 INS42 INS42 INS43 INS43 INS42 INS33 INS43 INS43 INS42 INS33 INS43 INS42 INS42 INS21 INS65 INS65 INS65 INS65 INS5 INS42 INS39 INS42 INS43 INS42 INS42 INS54 INS25 INS42 INS45 INS5 INS42 INS43 INS42 INS42 INS21 INS24 INS25 INS21 INS65 INS42 INS60 INS60 INS24 INS19 INS42 INS24 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS66 INS42 INS42 INS42 INS43 INS85 INS42 INS8 INS8 INS42 INS8 INS43 INS85 INS42 INS7 INS58 INS27 INS37 INS8 INS27 INS8 INS25 INS7 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS8 INS9 INS58 INS27 INS37 INS8 INS27 INS8 INS22 INS42 INS42 INS21 INS21 INS21 INS24 INS42 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS21 INS42 INS33 INS60 INS21 INS21 INS27 INS8 INS42 INS14 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS25 INS60 INS60 INS60 INS24 INS25 INS21 INS25 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS42 INS33 INS21 INS21 INS52 INS42 INS32 INS32 INS32 INS58 INS27 INS37 INS8 INS5 INS40 INS42 INS34 INS43 INS59 INS27 INS8 INS25 INS7 INS74 INS59 INS7 INS7 INS32 INS42 INS53 INS43 INS42 INS42 INS32 INS32 INS42 INS5 INS40 INS42 INS5 INS40 INS42 INS34 INS7 INS7 INS38 INS8 INS39 INS59 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS32 INS38 INS8 INS42 INS34 INS32 INS7 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS43 INS85 INS42 INS42 INS14 INS27 INS27 INS21 INS21 INS27 INS8 INS2 INS42 INS43 INS76 INS42 INS42 INS32 INS22 INS32 INS42 INS42 INS14 INS40 INS40 INS42 INS42 INS40 INS42 INS42 INS43 INS85 INS43 INS85 INS2 INS32 INS2 INS32 INS32 INS21 INS21 INS42 INS38 INS42 INS42 INS33 INS42 INS42 INS33 INS39 INS59 INS42 INS40 INS42 INS25 INS25 INS42 INS33 INS10 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS42 INS2 INS2 INS33 INS42 INS42 INS42 INS33 INS42 INS34 INS43 INS59 INS32 INS42 INS43 INS2 INS42 INS42 INS33 INS42 INS33 INS7 INS7 INS27 INS27 INS53 INS42 INS42 INS42 INS43 INS42 INS42 INS57 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS33 INS2 INS42 INS2 INS2 INS7 INS7 INS34 INS42 INS34 INS27 INS8 INS27 INS8 INS2 INS42 INS2 INS2 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS11 INS42 INS32 INS42 INS32 INS14 INS42 INS43 INS42 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS33 INS2 INS33 INS2 INS33 INS18 INS27 INS27 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS33 INS2 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS74 INS32 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42