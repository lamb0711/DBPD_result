HDFS-5050.  Add DataNode support for mlock and munlock  (contributed by Andrew Wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1517106 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.IOUtils;
+  final FsDatasetCache cacheManager;
+    cacheManager = new FsDatasetCache(this);
+   * Returns the total cache used by the datanode (in bytes).
+   */
+  @Override // FSDatasetMBean
+  public long getCacheUsed() {
+    return cacheManager.getCacheUsed();
+  }
+
+  /**
+   * Returns the total cache capacity of the datanode (in bytes).
+   */
+  @Override // FSDatasetMBean
+  public long getCacheCapacity() {
+    return cacheManager.getCacheCapacity();
+  }
+
+  /**
+   * Returns the total amount of cache remaining (in bytes).
+   */
+  @Override // FSDatasetMBean
+  public long getCacheRemaining() {
+    return cacheManager.getCacheRemaining();
+  }
+
+  /**
+    // uncache the block
+    cacheManager.uncacheBlock(bpid, replicaInfo);
+  @Override // FsDatasetSpi
+  public BlockListAsLongs getCacheReport(String bpid) {
+    return new BlockListAsLongs(cacheManager.getCachedBlocks(bpid), null);
+  }
+
+      // Uncache the block synchronously
+      cacheManager.uncacheBlock(bpid, invalidBlks[i]);
+  synchronized boolean validToCache(String bpid, Block blk) {
+    ReplicaInfo info = volumeMap.get(bpid, blk);
+    if (info == null) {
+      LOG.warn("Failed to cache replica " + blk + ": ReplicaInfo not found.");
+      return false;
+    }
+    FsVolumeImpl volume = (FsVolumeImpl)info.getVolume();
+    if (volume == null) {
+      LOG.warn("Failed to cache replica " + blk + ": Volume not found.");
+      return false;
+    }
+    if (info.getState() != ReplicaState.FINALIZED) {
+      LOG.warn("Failed to cache replica " + blk + ": Replica is not"
+          + " finalized.");
+      return false;
+    }
+    return true;
+  }
+
+  /**
+   * Asynchronously attempts to cache a single block via {@link FsDatasetCache}.
+   */
+  private void cacheBlock(String bpid, Block blk) {
+    ReplicaInfo info;
+    FsVolumeImpl volume;
+    synchronized (this) {
+      if (!validToCache(bpid, blk)) {
+        return;
+      }
+      info = volumeMap.get(bpid, blk);
+      volume = (FsVolumeImpl)info.getVolume();
+    }
+    // Try to open block and meta streams
+    FileInputStream blockIn = null;
+    FileInputStream metaIn = null;
+    boolean success = false;
+    try {
+      ExtendedBlock extBlk = new ExtendedBlock(bpid, blk);
+      blockIn = (FileInputStream)getBlockInputStream(extBlk, 0);
+      metaIn = (FileInputStream)getMetaDataInputStream(extBlk)
+          .getWrappedStream();
+      success = true;
+    } catch (ClassCastException e) {
+      LOG.warn("Failed to cache replica " + blk + ": Underlying blocks"
+          + " are not backed by files.", e);
+    } catch (IOException e) {
+      LOG.warn("Failed to cache replica " + blk + ": IOException while"
+          + " trying to open block or meta files.", e);
+    }
+    if (!success) {
+      IOUtils.closeQuietly(blockIn);
+      IOUtils.closeQuietly(metaIn);
+      return;
+    }
+    cacheManager.cacheBlock(bpid, blk, volume, blockIn, metaIn);
+  }
+
+  @Override // FsDatasetSpi
+  public void cache(String bpid, Block[] cacheBlks) {
+    for (int i=0; i<cacheBlks.length; i++) {
+      cacheBlock(bpid, cacheBlks[i]);
+    }
+  }
+
+  @Override // FsDatasetSpi
+  public void uncache(String bpid, Block[] uncacheBlks) {
+    for (int i=0; i<uncacheBlks.length; i++) {
+      Block blk = uncacheBlks[i];
+      cacheManager.uncacheBlock(bpid, blk);
+    }
+  }
+

INS26 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS21 INS65 INS42 INS41 INS65 INS42 INS41 INS65 INS42 INS41 INS21 INS42 INS42 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS25 INS41 INS65 INS43 INS42 INS43 INS42 INS60 INS60 INS51 INS60 INS60 INS60 INS54 INS25 INS21 INS42 INS43 INS42 INS5 INS42 INS24 INS42 INS43 INS42 INS5 INS42 INS24 INS7 INS66 INS32 INS66 INS32 INS66 INS32 INS32 INS42 INS14 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS9 INS66 INS65 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS52 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS12 INS12 INS38 INS8 INS32 INS42 INS43 INS85 INS58 INS27 INS37 INS8 INS42 INS43 INS85 INS58 INS27 INS37 INS8 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS11 INS42 INS33 INS21 INS41 INS32 INS40 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS25 INS21 INS21 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS9 INS60 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS42 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS43 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS9 INS43 INS32 INS32 INS9 INS42 INS42 INS32 INS9 INS38 INS8 INS7 INS7 INS43 INS59 INS7 INS7 INS7 INS43 INS42 INS21 INS43 INS42 INS21 INS32 INS32 INS42 INS34 INS32 INS42 INS34 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS41 INS42 INS32 INS42 INS11 INS42 INS42 INS14 INS42 INS11 INS42 INS11 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS42 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS45 INS42 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS42