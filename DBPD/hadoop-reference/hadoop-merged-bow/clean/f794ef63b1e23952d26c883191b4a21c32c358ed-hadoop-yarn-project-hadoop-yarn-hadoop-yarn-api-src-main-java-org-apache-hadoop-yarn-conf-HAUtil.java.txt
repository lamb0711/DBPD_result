Merging r1534707 through r1534893 from trunk to branch HDFS-2832

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2832@1534894 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.StringUtils;
+  public static final String BAD_CONFIG_MESSAGE_PREFIX =
+    "Invalid configuration! ";
+
-    throw new YarnRuntimeException("Invalid configuration! " + msg);
+    throw new YarnRuntimeException(BAD_CONFIG_MESSAGE_PREFIX + msg);
-  public static Collection<String> getRMHAIds(Configuration conf) {
-    return conf.getTrimmedStringCollection(YarnConfiguration.RM_HA_IDS);
+  /**
+   * Verify configuration for Resource Manager HA.
+   * @param conf Configuration
+   * @throws YarnRuntimeException
+   */
+  public static void verifyAndSetConfiguration(Configuration conf)
+    throws YarnRuntimeException {
+    verifyAndSetRMHAIds(conf);
+    verifyAndSetRMHAId(conf);
+    verifyAndSetAllRpcAddresses(conf);
+  }
+
+
+  private static void verifyAndSetRMHAIds(Configuration conf) {
+    Collection<String> ids =
+      conf.getTrimmedStringCollection(YarnConfiguration.RM_HA_IDS);
+    if (ids.size() <= 0) {
+      throwBadConfigurationException(
+        getInvalidValueMessage(YarnConfiguration.RM_HA_IDS,
+          conf.get(YarnConfiguration.RM_HA_IDS)));
+    } else if (ids.size() == 1) {
+      LOG.warn(getRMHAIdsWarningMessage(ids.toString()));
+    }
+
+    StringBuilder setValue = new StringBuilder();
+    for (String id: ids) {
+      setValue.append(id);
+      setValue.append(",");
+    }
+    conf.set(YarnConfiguration.RM_HA_IDS,
+      setValue.substring(0, setValue.length() - 1));
+  }
+
+  private static void verifyAndSetRMHAId(Configuration conf) {
+    String rmId = conf.getTrimmed(YarnConfiguration.RM_HA_ID);
+    if (rmId == null) {
+      throwBadConfigurationException(
+        getNeedToSetValueMessage(YarnConfiguration.RM_HA_ID));
+    } else {
+      Collection<String> ids = getRMHAIds(conf);
+      if (!ids.contains(rmId)) {
+        throwBadConfigurationException(
+          getRMHAIdNeedToBeIncludedMessage(ids.toString(), rmId));
+      }
+    }
+    conf.set(YarnConfiguration.RM_HA_ID, rmId);
+  }
+
+  private static void verifyAndSetConfValue(String prefix, Configuration conf) {
+    String confKey = null;
+    String confValue = null;
+    try {
+      confKey = getConfKeyForRMInstance(prefix, conf);
+      confValue = getConfValueForRMInstance(prefix, conf);
+      conf.set(prefix, confValue);
+    } catch (YarnRuntimeException yre) {
+      // Error at getRMHAId()
+      throw yre;
+    } catch (IllegalArgumentException iae) {
+      String errmsg;
+      if (confKey == null) {
+        // Error at addSuffix
+        errmsg = getInvalidValueMessage(YarnConfiguration.RM_HA_ID,
+          getRMHAId(conf));
+      } else {
+        // Error at Configuration#set.
+        errmsg = getNeedToSetValueMessage(confKey);
+      }
+      throwBadConfigurationException(errmsg);
+    }
+  }
+
+  public static void verifyAndSetAllRpcAddresses(Configuration conf) {
+    for (String confKey : RPC_ADDRESS_CONF_KEYS) {
+     verifyAndSetConfValue(confKey, conf);
+    }
-   * @param conf Configuration
+   * @param conf Configuration. Please use getRMHAIds to check.
+   * @return RM Ids on success
+   */
+  public static Collection<String> getRMHAIds(Configuration conf) {
+    return  conf.getStringCollection(YarnConfiguration.RM_HA_IDS);
+  }
+
+  /**
+   * @param conf Configuration. Please use verifyAndSetRMHAId to check.
-   * @throws YarnRuntimeException for configurations without a node id
-  public static String getRMHAId(Configuration conf) {
-    String rmId = conf.get(YarnConfiguration.RM_HA_ID);
-    if (rmId == null) {
-      throwBadConfigurationException(YarnConfiguration.RM_HA_ID +
-          " needs to be set in a HA configuration");
-    }
-    return rmId;
+  static String getRMHAId(Configuration conf) {
+    return conf.get(YarnConfiguration.RM_HA_ID);
+  }
+
+  @VisibleForTesting
+  static String getNeedToSetValueMessage(String confKey) {
+    return confKey + " needs to be set in a HA configuration.";
+  }
+
+  @VisibleForTesting
+  static String getInvalidValueMessage(String confKey,
+                                              String invalidValue){
+    return "Invalid value of "  + confKey +". "
+      + "Current value is " + invalidValue;
+  }
+
+  @VisibleForTesting
+  static String getRMHAIdNeedToBeIncludedMessage(String ids,
+                                                        String rmId) {
+    return YarnConfiguration.RM_HA_IDS + "("
+      + ids +  ") need to contain " + YarnConfiguration.RM_HA_ID + "("
+      + rmId + ") in a HA configuration.";
+  }
+
+  @VisibleForTesting
+  static String getRMHAIdsWarningMessage(String ids) {
+    return  "Resource Manager HA is enabled, but " +
+      YarnConfiguration.RM_HA_IDS + " has only one id(" +
+      ids.toString() + ")";
+  }
+
+  private static String getConfKeyForRMInstance(String prefix,
+                                                Configuration conf) {
+    return addSuffix(prefix, getRMHAId(conf));
-    String confKey = addSuffix(prefix, getRMHAId(conf));
-    String retVal = conf.get(confKey);
+    String confKey = getConfKeyForRMInstance(prefix, conf);
+    String retVal = conf.getTrimmed(confKey);
-  private static void setConfValue(String prefix, Configuration conf) {
-    conf.set(prefix, getConfValueForRMInstance(prefix, conf));
-  }
-
-  public static void setAllRpcAddresses(Configuration conf) {
-    for (String confKey : RPC_ADDRESS_CONF_KEYS) {
-      setConfValue(confKey, conf);
-    }
-  }
-

INS26 MOV31 MOV31 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 MOV43 INS59 INS29 INS39 UPD42 INS44 INS43 INS83 INS83 INS39 INS42 MOV44 INS8 UPD83 MOV83 MOV83 INS39 UPD42 MOV42 MOV44 MOV8 INS42 INS8 UPD42 INS44 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS29 MOV78 INS83 MOV43 INS42 MOV44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS83 MOV43 INS42 INS44 INS44 INS8 INS42 INS45 INS65 MOV65 INS65 INS43 INS42 INS42 INS21 INS21 INS21 INS60 INS25 INS60 INS70 INS21 INS21 INS60 INS60 INS54 INS43 INS42 INS65 INS65 INS43 INS43 INS43 INS42 INS41 INS65 MOV65 INS41 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS41 INS66 INS42 INS42 INS32 INS32 INS32 MOV74 INS59 INS27 INS8 INS25 INS43 INS59 INS44 INS42 INS8 INS32 INS43 INS8 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS42 INS42 INS66 INS66 INS42 INS42 INS42 INS32 INS42 INS66 MOV32 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS27 INS42 INS42 MOV32 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS32 INS34 INS21 INS27 INS8 INS42 INS42 INS14 MOV43 INS42 INS21 INS21 INS42 INS42 INS40 INS32 INS42 INS32 INS60 INS25 INS42 INS42 INS40 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS21 MOV21 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS40 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS40 INS45 INS42 INS45 INS40 INS45 INS42 INS45 INS45 INS40 INS45 INS32 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS21 INS43 INS32 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS40 INS74 INS59 INS38 INS8 INS7 INS7 INS32 INS43 INS42 INS53 INS43 INS42 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS34 INS32 INS43 INS43 INS42 INS32 INS32 INS21 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS32 UPD42 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 DEL45 DEL41 DEL40 DEL45 DEL27 DEL42 DEL41 DEL42 DEL66 DEL65 DEL29 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8