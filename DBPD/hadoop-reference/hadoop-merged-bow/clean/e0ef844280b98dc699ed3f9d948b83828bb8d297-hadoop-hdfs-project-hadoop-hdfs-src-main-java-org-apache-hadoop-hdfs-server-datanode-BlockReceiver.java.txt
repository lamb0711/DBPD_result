HDFS-3170. Add more useful metrics for write latency. Contributed by Matthew Jacobs.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1357970 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.common.Util;
+    long flushTotalNanos = 0;
+    boolean measuredFlushTime = false;
+        long flushStartNanos = System.nanoTime();
+        long flushEndNanos = System.nanoTime();
-          long start = Util.now();
+          long fsyncStartNanos = flushEndNanos;
-          datanode.metrics.addFsync(Util.now() - start);
+          datanode.metrics.addFsyncNanos(System.nanoTime() - fsyncStartNanos);
+        flushTotalNanos += flushEndNanos - flushStartNanos;
+        measuredFlushTime = true;
+        long flushStartNanos = System.nanoTime();
+        long flushEndNanos = System.nanoTime();
-          long start = Util.now();
+          long fsyncStartNanos = flushEndNanos;
-          datanode.metrics.addFsync(Util.now() - start);
+          datanode.metrics.addFsyncNanos(System.nanoTime() - fsyncStartNanos);
+        flushTotalNanos += flushEndNanos - flushStartNanos;
+        measuredFlushTime = true;
+    if (measuredFlushTime) {
+      datanode.metrics.addFlushNanos(flushTotalNanos);
+    }
+    long flushTotalNanos = 0;
+      long flushStartNanos = System.nanoTime();
+      long flushEndNanos = System.nanoTime();
-        long start = Util.now();
+        long fsyncStartNanos = flushEndNanos;
-        datanode.metrics.addFsync(Util.now() - start);
+        datanode.metrics.addFsyncNanos(System.nanoTime() - fsyncStartNanos);
+      flushTotalNanos += flushEndNanos - flushStartNanos;
+      long flushStartNanos = System.nanoTime();
+      long flushEndNanos = System.nanoTime();
-        long start = Util.now();
+        long fsyncStartNanos = flushEndNanos;
-        datanode.metrics.addFsync(Util.now() - start);
+        datanode.metrics.addFsyncNanos(System.nanoTime() - fsyncStartNanos);
+      flushTotalNanos += flushEndNanos - flushStartNanos;
+    }
+    if (checksumOut != null || out != null) {
+      datanode.metrics.addFlushNanos(flushTotalNanos);
-     * full packet with single read and to accept arbitarary size  
+     * full packet with single read and to accept arbitrary size  
-          
+
-        final Packet p = new Packet(seqno, lastPacketInBlock, offsetInBlock);
+        final Packet p = new Packet(seqno, lastPacketInBlock, offsetInBlock,
+            System.nanoTime());
+        long totalAckTimeNanos = 0;
+            long ackRecvNanoTime = 0;
+                ackRecvNanoTime = System.nanoTime();
+                  if (type == PacketResponderType.HAS_DOWNSTREAM_IN_PIPELINE) {
+                    // The total ack time includes the ack times of downstream nodes.
+                    // The value is 0 if this responder doesn't have a downstream
+                    // DN in the pipeline.
+                    totalAckTimeNanos = ackRecvNanoTime - pkt.ackEnqueueNanoTime;
+                    // Report the elapsed time from ack send to ack receive minus
+                    // the downstream ack time.
+                    long ackTimeNanos = totalAckTimeNanos - ack.getDownstreamAckTimeNanos();
+                    if (ackTimeNanos < 0) {
+                      if (LOG.isDebugEnabled()) {
+                        LOG.debug("Calculated invalid ack time: " + ackTimeNanos + "ns.");
+                      }
+                    } else {
+                      datanode.metrics.addPacketAckRoundTripTimeNanos(ackTimeNanos);
+                    }
+                  }
-            PipelineAck replyAck = new PipelineAck(expected, replies);
+            PipelineAck replyAck = new PipelineAck(expected, replies, totalAckTimeNanos);
+    final long ackEnqueueNanoTime;
-    Packet(long seqno, boolean lastPacketInBlock, long offsetInBlock) {
+    Packet(long seqno, boolean lastPacketInBlock, long offsetInBlock,
+        long ackEnqueueNanoTime) {
+      this.ackEnqueueNanoTime = ackEnqueueNanoTime;
+        + ", ackEnqueueNanoTime=" + ackEnqueueNanoTime

INS23 INS60 INS60 INS25 INS60 INS25 INS83 INS39 INS59 INS44 INS39 INS59 INS39 INS59 INS42 INS8 INS39 INS59 INS27 INS8 INS42 INS39 INS42 INS21 INS42 INS34 INS42 INS9 INS21 INS42 INS34 INS60 INS60 INS21 INS60 INS60 INS21 INS27 INS27 INS21 INS7 INS32 INS39 INS59 INS39 INS59 INS7 INS39 INS59 INS39 INS59 INS7 INS42 INS33 INS42 INS33 INS32 INS60 INS22 INS42 INS45 INS42 INS60 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS27 INS40 INS42 INS42 INS39 INS59 INS52 INS42 INS39 INS59 INS39 INS59 INS7 INS7 INS39 INS59 INS39 INS59 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS60 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS9 UPD42 INS42 UPD42 UPD42 INS42 UPD42 INS32 INS39 INS59 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS34 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 INS42 UPD42 UPD42 INS21 UPD42 UPD42 UPD42 UPD42 INS7 INS42 INS32 INS25 INS42 INS42 INS27 INS8 INS42 INS40 INS21 INS60 INS25 INS7 INS39 INS59 INS27 INS8 INS8 INS42 INS27 INS42 INS27 INS42 INS34 INS25 INS21 INS42 INS40 INS42 INS32 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS21 INS40 INS42 INS42 INS32 INS42 INS42 INS27 INS45 INS42 INS45 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32