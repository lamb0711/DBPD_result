HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.

-import java.util.HashSet;
-import java.util.Set;
-import org.apache.hadoop.hdds.protocol.DatanodeDetails;
+
-import org.apache.hadoop.hdds.scm.container.common.helpers.ContainerInfo;
+import org.apache.hadoop.hdds.scm.container.ContainerNotFoundException;
+import org.apache.hadoop.hdds.scm.container.ContainerReplica;
+import org.apache.hadoop.hdds.scm.container.ContainerInfo;
+import org.apache.hadoop.hdds.scm.container.ContainerReplicaNotFoundException;
-import org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes;
+import java.util.HashSet;
+import java.util.Set;
-import static org.apache.hadoop.hdds.scm.exceptions.SCMException.ResultCodes
-    .FAILED_TO_FIND_CONTAINER;
+  private final static NavigableSet<ContainerID> EMPTY_SET  =
+      Collections.unmodifiableNavigableSet(new TreeSet<>());
+
-
-  // Map to hold replicas of given container.
-  private final Map<ContainerID, Set<DatanodeDetails>> contReplicaMap;
-  private final static NavigableSet<ContainerID> EMPTY_SET  =
-      Collections.unmodifiableNavigableSet(new TreeSet<>());
+  private final Map<ContainerID, Set<ContainerReplica>> replicaMap;
-    lifeCycleStateMap = new ContainerAttribute<>();
-    ownerMap = new ContainerAttribute<>();
-    factorMap = new ContainerAttribute<>();
-    typeMap = new ContainerAttribute<>();
-    containerMap = new HashMap<>();
-    lock = new ReentrantReadWriteLock();
-    contReplicaMap = new HashMap<>();
-//        new InstrumentedLock(getClass().getName(), LOG,
-//            new ReentrantLock(),
-//            1000,
-//            300));
-    resultCache = new ConcurrentHashMap<>();
+    this.lifeCycleStateMap = new ContainerAttribute<>();
+    this.ownerMap = new ContainerAttribute<>();
+    this.factorMap = new ContainerAttribute<>();
+    this.typeMap = new ContainerAttribute<>();
+    this.containerMap = new HashMap<>();
+    this.lock = new ReentrantReadWriteLock();
+    this.replicaMap = new HashMap<>();
+    this.resultCache = new ConcurrentHashMap<>();
-  public void addContainer(ContainerInfo info)
+  public void addContainer(final ContainerInfo info)
-      ContainerID id = ContainerID.valueof(info.getContainerID());
+      final ContainerID id = info.containerID();
+      replicaMap.put(id, new HashSet<>());
-   * Returns the latest state of Container from SCM's Container State Map.
+   * Removes a Container Entry from ContainerStateMap.
-   * @param info - ContainerInfo
-   * @return ContainerInfo
+   * @param containerID - ContainerID
+   * @throws SCMException - throws if create failed.
-  public ContainerInfo getContainerInfo(ContainerInfo info) {
-    return getContainerInfo(info.getContainerID());
-  }
-
-  /**
-   * Returns the latest state of Container from SCM's Container State Map.
-   *
-   * @param containerID - int
-   * @return container info, if found.
-   */
-  public ContainerInfo getContainerInfo(long containerID) {
-    return getContainerInfo(ContainerID.valueof(containerID));
+  public void removeContainer(final ContainerID containerID)
+      throws ContainerNotFoundException {
+    Preconditions.checkNotNull(containerID, "ContainerID cannot be null");
+    lock.writeLock().lock();
+    try {
+      checkIfContainerExist(containerID);
+      // Should we revert back to the original state if any of the below
+      // remove operation fails?
+      final ContainerInfo info = containerMap.remove(containerID);
+      lifeCycleStateMap.remove(info.getState(), containerID);
+      ownerMap.remove(info.getOwner(), containerID);
+      factorMap.remove(info.getReplicationFactor(), containerID);
+      typeMap.remove(info.getReplicationType(), containerID);
+      // Flush the cache of this container type.
+      flushCache(info);
+      LOG.trace("Removed container with {} successfully.", containerID);
+    } finally {
+      lock.writeLock().unlock();
+    }
-  public ContainerInfo getContainerInfo(ContainerID containerID) {
+  public ContainerInfo getContainerInfo(final ContainerID containerID)
+      throws ContainerNotFoundException {
+      checkIfContainerExist(containerID);
-  public Set<DatanodeDetails> getContainerReplicas(ContainerID containerID)
-      throws SCMException {
+  public Set<ContainerReplica> getContainerReplicas(
+      final ContainerID containerID) throws ContainerNotFoundException {
-      if (contReplicaMap.containsKey(containerID)) {
-        return Collections
-            .unmodifiableSet(contReplicaMap.get(containerID));
-      }
+      checkIfContainerExist(containerID);
+      return Collections
+          .unmodifiableSet(new HashSet<>(replicaMap.get(containerID)));
-    throw new SCMException(
-        "No entry exist for containerId: " + containerID + " in replica map.",
-        ResultCodes.NO_REPLICA_FOUND);
-   * @param dnList
+   * @param replica
-  public void addContainerReplica(ContainerID containerID,
-      DatanodeDetails... dnList) {
+  public void updateContainerReplica(final ContainerID containerID,
+      final ContainerReplica replica) throws ContainerNotFoundException {
-      for (DatanodeDetails dn : dnList) {
-        Preconditions.checkNotNull(dn);
-        if (contReplicaMap.containsKey(containerID)) {
-          if(!contReplicaMap.get(containerID).add(dn)) {
-            LOG.debug("ReplicaMap already contains entry for container Id: "
-                + "{},DataNode: {}", containerID, dn);
-          }
-        } else {
-          Set<DatanodeDetails> dnSet = new HashSet<>();
-          dnSet.add(dn);
-          contReplicaMap.put(containerID, dnSet);
-        }
-      }
+      checkIfContainerExist(containerID);
+      Set<ContainerReplica> replicas = replicaMap.get(containerID);
+      replicas.remove(replica);
+      replicas.add(replica);
-   * @param dn
+   * @param replica
-  public boolean removeContainerReplica(ContainerID containerID,
-      DatanodeDetails dn) throws SCMException {
+  public void removeContainerReplica(final ContainerID containerID,
+      final ContainerReplica replica)
+      throws ContainerNotFoundException, ContainerReplicaNotFoundException {
-    Preconditions.checkNotNull(dn);
+    Preconditions.checkNotNull(replica);
-      if (contReplicaMap.containsKey(containerID)) {
-        return contReplicaMap.get(containerID).remove(dn);
+      checkIfContainerExist(containerID);
+      if(!replicaMap.get(containerID).remove(replica)) {
+        throw new ContainerReplicaNotFoundException(
+            "Container #"
+                + containerID.getId() + ", replica: " + replica);
-    throw new SCMException(
-        "No entry exist for containerId: " + containerID + " in replica map.",
-        ResultCodes.FAILED_TO_FIND_CONTAINER);
+  // TODO: fix the test case and remove this method!
-   * Returns the full container Map.
-   *
-   * @return - Map
-   */
-  public Map<ContainerID, ContainerInfo> getContainerMap() {
-    lock.readLock().lock();
-    try {
-      return Collections.unmodifiableMap(containerMap);
-    } finally {
-      lock.readLock().unlock();
-    }
-  }
-
-  /**
-  public void updateContainerInfo(ContainerInfo info) throws SCMException {
-    Preconditions.checkNotNull(info);
-    ContainerInfo currentInfo = null;
+  public void updateContainerInfo(final ContainerInfo info)
+      throws ContainerNotFoundException {
-      currentInfo = containerMap.get(
-          ContainerID.valueof(info.getContainerID()));
-
-      if (currentInfo == null) {
-        throw new SCMException("No such container.", FAILED_TO_FIND_CONTAINER);
-      }
+      Preconditions.checkNotNull(info);
+      checkIfContainerExist(info.containerID());
+      final ContainerInfo currentInfo = containerMap.get(info.containerID());
-   * @param info - ContainerInfo
+   * @param containerID - ContainerID
-  public void updateState(ContainerInfo info, LifeCycleState currentState,
-      LifeCycleState newState) throws SCMException {
+  public void updateState(ContainerID containerID, LifeCycleState currentState,
+      LifeCycleState newState) throws SCMException, ContainerNotFoundException {
-
-    ContainerID id = new ContainerID(info.getContainerID());
-    ContainerInfo currentInfo = null;
-
+      checkIfContainerExist(containerID);
+      final ContainerInfo currentInfo = containerMap.get(containerID);
-        // Just flush both old and new data sets from the result cache.
-        ContainerInfo newInfo = new ContainerInfo(info);
+        final ContainerInfo newInfo = new ContainerInfo(currentInfo);
-        flushCache(newInfo, info);
-        currentInfo = containerMap.get(id);
-
-        if (currentInfo == null) {
-          throw new
-              SCMException("No such container.", FAILED_TO_FIND_CONTAINER);
-        }
-        info.setState(newState);
-        containerMap.put(id, info);
-        lifeCycleStateMap.update(currentState, newState, id);
+        containerMap.put(containerID, newInfo);
+        lifeCycleStateMap.update(currentState, newState, containerID);
-            "{}", id, currentState, newState);
+            "{}", containerID, currentState, newState);
+
+        // Just flush both old and new data sets from the result cache.
+        flushCache(currentInfo, newInfo);
-        containerMap.put(id, currentInfo);
+        containerMap.put(containerID, currentInfo);
-        lifeCycleStateMap.update(newState, currentState, id);
+        lifeCycleStateMap.update(newState, currentState, containerID);
+  public Set<ContainerID> getAllContainerIDs() {
+    return containerMap.keySet();
+  }
+
-  NavigableSet<ContainerID> getContainerIDsByOwner(String ownerName) {
+  NavigableSet<ContainerID> getContainerIDsByOwner(final String ownerName) {
-  NavigableSet<ContainerID> getContainerIDsByType(ReplicationType type) {
+  NavigableSet<ContainerID> getContainerIDsByType(final ReplicationType type) {
-  NavigableSet<ContainerID> getContainerIDsByFactor(ReplicationFactor factor) {
+  NavigableSet<ContainerID> getContainerIDsByFactor(
+      final ReplicationFactor factor) {
-      LifeCycleState state) {
+      final LifeCycleState state) {
-      LifeCycleState state, String owner,
-      ReplicationFactor factor, ReplicationType type) {
+      final LifeCycleState state, final String owner,
+      final ReplicationFactor factor, final ReplicationType type) {
-      ContainerQueryKey queryKey =
+      final ContainerQueryKey queryKey =
-      NavigableSet<ContainerID> stateSet =
+      final NavigableSet<ContainerID> stateSet =
-      NavigableSet<ContainerID> ownerSet = ownerMap.getCollection(owner);
+      final NavigableSet<ContainerID> ownerSet =
+          ownerMap.getCollection(owner);
-      NavigableSet<ContainerID> factorSet = factorMap.getCollection(factor);
+      final NavigableSet<ContainerID> factorSet =
+          factorMap.getCollection(factor);
-      NavigableSet<ContainerID> typeSet = typeMap.getCollection(type);
+      final NavigableSet<ContainerID> typeSet =
+          typeMap.getCollection(type);
-      NavigableSet<ContainerID>[] sets = sortBySize(stateSet,
+      final NavigableSet<ContainerID>[] sets = sortBySize(stateSet,
-      NavigableSet<ContainerID> smaller,
-      NavigableSet<ContainerID> bigger) {
+      final NavigableSet<ContainerID> smaller,
+      final NavigableSet<ContainerID> bigger) {
-    NavigableSet<ContainerID> resultSet = new TreeSet<>();
+    final NavigableSet<ContainerID> resultSet = new TreeSet<>();
-      NavigableSet<ContainerID>... sets) {
+      final NavigableSet<ContainerID>... sets) {
-          NavigableSet temp = sets[y];
+          final NavigableSet temp = sets[y];
-  private void flushCache(ContainerInfo... containerInfos) {
+  private void flushCache(final ContainerInfo... containerInfos) {
-      ContainerQueryKey key = new ContainerQueryKey(containerInfo.getState(),
-          containerInfo.getOwner(), containerInfo.getReplicationFactor(),
+      final ContainerQueryKey key = new ContainerQueryKey(
+          containerInfo.getState(),
+          containerInfo.getOwner(),
+          containerInfo.getReplicationFactor(),
+  private void checkIfContainerExist(ContainerID containerID)
+      throws ContainerNotFoundException {
+    if (!containerMap.containsKey(containerID)) {
+      throw new ContainerNotFoundException("#" + containerID.getId());
+    }
+  }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 UPD40 UPD40 UPD40 UPD40 INS31 INS31 MOV44 INS31 UPD74 MOV21 MOV21 MOV21 MOV29 MOV83 INS39 INS42 INS44 INS43 INS8 INS43 UPD74 MOV74 UPD43 UPD42 INS44 INS43 INS8 UPD39 INS44 UPD43 INS43 UPD43 MOV44 INS43 MOV83 UPD74 MOV74 UPD42 MOV42 INS8 INS83 INS39 INS42 MOV44 INS43 INS8 UPD74 UPD42 INS83 UPD65 INS83 INS43 INS42 UPD42 MOV42 INS21 INS21 INS54 INS83 INS42 UPD43 INS83 MOV43 UPD42 MOV21 INS83 MOV43 INS42 INS83 UPD43 MOV43 UPD42 MOV42 INS42 MOV21 MOV21 INS54 INS83 MOV43 INS42 INS83 UPD43 UPD42 UPD42 INS42 MOV21 INS54 INS83 MOV43 UPD42 UPD42 MOV42 UPD43 UPD43 INS41 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 UPD42 INS83 UPD42 INS83 INS83 INS42 INS25 UPD43 UPD66 UPD42 UPD66 INS42 UPD66 UPD42 MOV42 INS32 INS32 INS8 INS8 UPD42 UPD42 UPD42 INS8 MOV8 UPD42 UPD42 INS8 MOV8 UPD42 UPD66 UPD42 UPD42 INS32 INS83 INS38 INS8 UPD42 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS21 INS42 INS42 INS42 INS45 INS32 INS42 INS21 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV41 MOV21 INS60 MOV21 MOV21 UPD42 INS21 INS25 MOV21 INS21 INS60 INS21 INS60 UPD42 MOV42 UPD42 MOV42 INS32 INS53 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS83 INS32 INS42 INS42 INS32 INS83 MOV43 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 UPD74 MOV74 INS59 INS32 INS38 INS8 INS32 INS83 MOV43 INS59 INS32 INS83 MOV43 INS59 INS83 INS83 INS83 INS83 INS83 INS83 INS83 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS32 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 MOV42 INS32 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS14 UPD42 UPD42 UPD43 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 INS32 MOV53 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS21 INS43 INS27 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 UPD42 UPD42 MOV42 MOV42 MOV42 MOV32 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS83 INS32 INS42 INS45 INS32 INS43 UPD42 MOV42 MOV42 MOV42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD45 INS32 UPD45 INS42 UPD42 UPD42 UPD42 INS83 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL44 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL39 DEL42 DEL44 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL32 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL40 DEL14 DEL53 DEL42 DEL43 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL8 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL54 DEL8 DEL42 DEL40 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL54 DEL66 DEL65 DEL66 DEL65 DEL29 DEL32 DEL42 DEL32 DEL21 DEL32 DEL41 DEL8 DEL32 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21