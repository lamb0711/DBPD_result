HADOOP-17099. Replace Guava Predicate with Java8+ Predicate

Signed-off-by: Jonathan Eagles <jeagles@gmail.com>

-import com.google.common.collect.Iterables;
-import com.google.common.collect.Collections2;
+import java.util.stream.Collectors;
-import com.google.common.base.Predicate;
+
-      return emptyInServiceNodeLists || Iterables.any(
-          allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return input.getPort() == 0 ||
-                  input.getPort() == address.getPort();
-            }
-          });
+      return emptyInServiceNodeLists || allDNs.get(address.getAddress())
+          .stream().anyMatch(
+              input -> input.getPort() == 0 ||
+                  input.getPort() == address.getPort());
-      return Iterables.any(allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return input.getAdminState().equals(
-                  AdminStates.DECOMMISSIONED) &&
-                  (input.getPort() == 0 ||
-                      input.getPort() == address.getPort());
-            }
-          });
+      return allDNs.get(address.getAddress()).stream().anyMatch(
+          input -> input.getAdminState().equals(
+              AdminStates.DECOMMISSIONED) &&
+              (input.getPort() == 0 ||
+                  input.getPort() == address.getPort()));
-      Iterable<DatanodeAdminProperties> datanode = Iterables.filter(
-          allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return (input.getPort() == 0 ||
-                  input.getPort() == address.getPort());
-            }
-          });
+      Iterable<DatanodeAdminProperties> datanode =
+          allDNs.get(address.getAddress()).stream().filter(
+              input -> (input.getPort() == 0 ||
+                  input.getPort() == address.getPort())).collect(
+              Collectors.toList());
-      return new Iterable<InetSocketAddress>() {
-        @Override
-        public Iterator<InetSocketAddress> iterator() {
-          return new HostIterator(
-              Collections2.filter(allDNs.entries(),
-                  new Predicate<java.util.Map.Entry<InetAddress,
-                      DatanodeAdminProperties>>() {
-                    public boolean apply(java.util.Map.Entry<InetAddress,
-                        DatanodeAdminProperties> entry) {
-                      return entry.getValue().getAdminState().equals(
-                          AdminStates.DECOMMISSIONED);
-                    }
-                  }
-              ));
-        }
-      };
+      return () -> new HostIterator(
+          allDNs.entries().stream().filter(
+              entry -> entry.getValue().getAdminState().equals(
+                  AdminStates.DECOMMISSIONED)).collect(
+              Collectors.toList()));
-      Iterable<DatanodeAdminProperties> datanode = Iterables.filter(
-          allDNs.get(address.getAddress()),
-          new Predicate<DatanodeAdminProperties>() {
-            public boolean apply(DatanodeAdminProperties input) {
-              return input.getAdminState().equals(
+      Iterable<DatanodeAdminProperties> datanode =
+          allDNs.get(address.getAddress()).stream().filter(
+              input -> input.getAdminState().equals(
-                  input.getPort() == address.getPort());
-            }
-          });
+                      input.getPort() == address.getPort())).collect(
+              Collectors.toList());

UPD40 MOV31 MOV31 UPD83 INS42 MOV44 UPD83 INS42 MOV44 MOV74 MOV8 MOV8 INS60 INS27 INS32 INS86 MOV74 INS59 MOV16 INS42 INS32 INS32 INS42 INS86 INS32 INS14 INS42 INS32 INS32 INS42 INS86 MOV32 INS42 INS59 MOV27 MOV32 INS42 INS32 MOV43 MOV32 INS32 INS42 INS32 MOV32 INS42 INS59 MOV27 INS42 INS32 INS86 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS42 MOV32 UPD42 MOV42 INS59 MOV36 INS32 MOV42 INS86 INS42 INS42 MOV32 INS42 INS59 MOV27 INS42 MOV32 UPD42 MOV42 INS59 MOV32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL1 DEL14 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL1 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL31 DEL1 DEL14 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL41 DEL8 DEL31 DEL1 DEL14 DEL14 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL31 DEL1 DEL14 DEL41 DEL8 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL32 DEL59 DEL60 DEL8