Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.ref.WeakReference;
-import java.util.concurrent.DelayQueue;
-import java.util.concurrent.Delayed;
-import java.util.concurrent.TimeUnit;
+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenRenewer;
+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenSelector;
+import org.apache.hadoop.security.token.TokenRenewer;
-public class HftpFileSystem extends FileSystem {
+public class HftpFileSystem extends FileSystem
+    implements DelegationTokenRenewer.Renewable {
+  private static final DelegationTokenRenewer<HftpFileSystem> dtRenewer
+      = new DelegationTokenRenewer<HftpFileSystem>(HftpFileSystem.class);
+  
+    dtRenewer.start();
+  public static final Text TOKEN_KIND = new Text("HFTP delegation");
+
-  private URI hdfsURI;
+  private Text hdfsServiceName;
+  private URI hftpURI;
-  private Token<DelegationTokenIdentifier> delegationToken;
-  public static final String HFTP_SERVICE_NAME_KEY = "hdfs.service.host_";
+  private Token<?> delegationToken;
+  private Token<?> renewToken;
-  private static RenewerThread renewer = new RenewerThread();
-  static {
-    renewer.start();
-  }
-
-    return DFSConfigKeys.DFS_HTTPS_PORT_DEFAULT;
+    return getDefaultSecurePort();
+
+    //TODO: un-comment the following once HDFS-7510 is committed. 
+//    return getConf().getInt(DFSConfigKeys.DFS_NAMENODE_HTTP_PORT_KEY,
+//        DFSConfigKeys.DFS_NAMENODE_HTTP_PORT_DEFAULT);
+  }
+
+  protected int getDefaultSecurePort() {
+    return getConf().getInt(DFSConfigKeys.DFS_NAMENODE_HTTPS_PORT_KEY,
+        DFSConfigKeys.DFS_NAMENODE_HTTPS_PORT_DEFAULT);
-    return SecurityUtil.buildDTServiceName(hdfsURI, getDefaultPort());
+    return SecurityUtil.buildDTServiceName(hftpURI, getDefaultPort());
-  @SuppressWarnings("unchecked")
-    nnHttpUrl = 
-      buildUri("https://", NetUtils.normalizeHostName(name.getHost()), urlPort);
+    String normalizedNN = NetUtils.normalizeHostName(name.getHost());
+    nnHttpUrl = buildUri("https://", normalizedNN ,urlPort);
+    try {
+      hftpURI = new URI(buildUri("hftp://", normalizedNN, urlPort));
+    } catch (URISyntaxException ue) {
+      throw new IOException("bad uri for hdfs", ue);
+    }
-    
-    
-    String key = HftpFileSystem.HFTP_SERVICE_NAME_KEY+
-    SecurityUtil.buildDTServiceName(name, DFSConfigKeys.DFS_HTTPS_PORT_DEFAULT);
+    String key = DelegationTokenSelector.SERVICE_NAME_KEY
+        + SecurityUtil.buildDTServiceName(name,
+            DFSConfigKeys.DFS_HTTPS_PORT_DEFAULT);
-
-      hdfsURI = new URI(buildUri("hdfs://", nnAddr.getHostName(), nnPort));
+      URI hdfsURI = new URI("hdfs://" + normalizedNN + ":" + nnPort);
+      hdfsServiceName = new Text(SecurityUtil.buildDTServiceName(hdfsURI, 
+                                                                 nnPort));
-      String canonicalName = getCanonicalServiceName();
+      String hftpServiceName = getCanonicalServiceName();
-        if (DelegationTokenIdentifier.HDFS_DELEGATION_KIND.equals(t.getKind()) &&
-            t.getService().toString().equals(canonicalName)) {
-          if(LOG.isDebugEnabled()) {
-            LOG.debug("Found existing DT for " + name);
+        Text kind = t.getKind();
+        if (DelegationTokenIdentifier.HDFS_DELEGATION_KIND.equals(kind)) {
+          if (t.getService().equals(hdfsServiceName)) {
+            setDelegationToken(t);
+            break;
-          delegationToken = (Token<DelegationTokenIdentifier>) t;
-          break;
+        } else if (TOKEN_KIND.equals(kind)) {
+          if (hftpServiceName
+              .equals(normalizeService(t.getService().toString()))) {
+            setDelegationToken(t);
+            break;
+          }
-        delegationToken = 
-          (Token<DelegationTokenIdentifier>) getDelegationToken(null);
-        renewer.addTokenToRenew(this);
+        setDelegationToken(getDelegationToken(null));
+        dtRenewer.addRenewAction(this);
+
+  private String normalizeService(String service) {
+    int colonIndex = service.indexOf(':');
+    if (colonIndex == -1) {
+      throw new IllegalArgumentException("Invalid service for hftp token: " + 
+                                         service);
+    }
+    String hostname = 
+        NetUtils.normalizeHostName(service.substring(0, colonIndex));
+    String port = service.substring(colonIndex + 1);
+    return hostname + ":" + port;
+  }
+
+  //TODO: un-comment the following once HDFS-7510 is committed. 
+//  protected Token<DelegationTokenIdentifier> selectHftpDelegationToken() {
+//    Text serviceName = SecurityUtil.buildTokenService(nnSecureAddr);
+//    return hftpTokenSelector.selectToken(serviceName, ugi.getTokens());      
+//  }
+  
+  protected Token<DelegationTokenIdentifier> selectHdfsDelegationToken() {
+    return  DelegationTokenSelector.selectHdfsDelegationToken(
+        nnAddr, ugi, getConf());
+  }
-  public synchronized Token<?> getDelegationToken(final String renewer) throws IOException {
+  public Token<?> getRenewToken() {
+    return renewToken;
+  }
+
+  @Override
+  public <T extends TokenIdentifier> void setDelegationToken(Token<T> token) {
+    renewToken = token;
+    // emulate the 203 usage of the tokens
+    // by setting the kind and service as if they were hdfs tokens
+    delegationToken = new Token<T>(token);
+    delegationToken.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);
+    delegationToken.setService(hdfsServiceName);
+  }
+
+  @Override
+  public synchronized Token<?> getDelegationToken(final String renewer
+                                                  ) throws IOException {
-            t.setService(new Text(getCanonicalServiceName()));
+  @InterfaceAudience.Private
+  public static class TokenManager extends TokenRenewer {
-  /**
-   * An action that will renew and replace the hftp file system's delegation 
-   * tokens automatically.
-   */
-  private static class RenewAction implements Delayed {
-    // when should the renew happen
-    private long timestamp;
-    // a weak reference to the file system so that it can be garbage collected
-    private final WeakReference<HftpFileSystem> weakFs;
-
-    RenewAction(long timestamp, HftpFileSystem fs) {
-      this.timestamp = timestamp;
-      this.weakFs = new WeakReference<HftpFileSystem>(fs);
+    @Override
+    public boolean handleKind(Text kind) {
+      return kind.equals(TOKEN_KIND);
-    /**
-     * Get the delay until this event should happen.
-     */
-    public long getDelay(TimeUnit unit) {
-      long millisLeft = timestamp - System.currentTimeMillis();
-      return unit.convert(millisLeft, TimeUnit.MILLISECONDS);
+    public boolean isManaged(Token<?> token) throws IOException {
+      return true;
-    /**
-     * Compare two events in the same queue.
-     */
+    @SuppressWarnings("unchecked")
-    public int compareTo(Delayed o) {
-      if (o.getClass() != RenewAction.class) {
-        throw new IllegalArgumentException("Illegal comparision to non-RenewAction");
-      }
-      RenewAction other = (RenewAction) o;
-      return timestamp < other.timestamp ? -1 :
-        (timestamp == other.timestamp ? 0 : 1);
+    public long renew(Token<?> token, 
+                      Configuration conf) throws IOException {
+      // update the kerberos credentials, if they are coming from a keytab
+      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();
+      // use https to renew the token
+      return 
+        DelegationTokenFetcher.renewDelegationToken
+        ("https://" + token.getService().toString(), 
+         (Token<DelegationTokenIdentifier>) token);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void cancel(Token<?> token, 
+                       Configuration conf) throws IOException {
+      // update the kerberos credentials, if they are coming from a keytab
+      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();
+      // use https to cancel the token
+      DelegationTokenFetcher.cancelDelegationToken
+        ("https://" + token.getService().toString(), 
+         (Token<DelegationTokenIdentifier>) token);
-    @Override
-    public int hashCode() {
-      assert false : "hashCode not designed";
-    return 33;  
-    }
-    /**
-     * equals
-     */
-    @Override
-    public boolean equals(Object o) {
-      if(!( o instanceof Delayed))
-        return false;
-      
-      return compareTo((Delayed) o) == 0;
-    }
-
-    /**
-     * Set a new time for the renewal. Can only be called when the action
-     * is not in the queue.
-     * @param newTime the new time
-     */
-    public void setNewTime(long newTime) {
-      timestamp = newTime;
-    }
-
-    /**
-     * Renew or replace the delegation token for this file system.
-     * @return
-     * @throws IOException
-     */
-    @SuppressWarnings("unchecked")
-    public boolean renew() throws IOException, InterruptedException {
-      final HftpFileSystem fs = weakFs.get();
-      if (fs != null) {
-        synchronized (fs) {
-          fs.ugi.reloginFromKeytab();
-          fs.ugi.doAs(new PrivilegedExceptionAction<Void>() {
-
-            @Override
-            public Void run() throws Exception {
-              try {
-                DelegationTokenFetcher.renewDelegationToken(fs.nnHttpUrl, 
-                    fs.delegationToken);
-              } catch (IOException ie) {
-                try {
-                  fs.delegationToken = 
-                    (Token<DelegationTokenIdentifier>) fs.getDelegationToken(null);
-                } catch (IOException ie2) {
-                  throw new IOException("Can't renew or get new delegation token ", 
-                      ie);
-                }
-              }
-              return null;
-            } 
-          });
-        }
-      }
-      return fs != null;
-    }
-
-    public String toString() {
-      StringBuilder result = new StringBuilder();
-      HftpFileSystem fs = weakFs.get();
-      if (fs == null) {
-        return "evaporated token renew";
-      }
-      synchronized (fs) {
-        result.append(fs.delegationToken);
-      }
-      result.append(" renew in ");
-      result.append(getDelay(TimeUnit.SECONDS));
-      result.append(" secs");
-      return result.toString();
-    }
-  }
-
-  /**
-   * A daemon thread that waits for the next file system to renew.
-   */
-  private static class RenewerThread extends Thread {
-    private DelayQueue<RenewAction> queue = new DelayQueue<RenewAction>();
-    // wait for 95% of a day between renewals
-    private static final int RENEW_CYCLE = (int) (0.95 * 24 * 60 * 60 * 1000);
-
-    public RenewerThread() {
-      super("HFTP Delegation Token Renewer");
-      setDaemon(true);
-    }
-
-    public void addTokenToRenew(HftpFileSystem fs) {
-      queue.add(new RenewAction(RENEW_CYCLE + System.currentTimeMillis(),fs));
-    }
-
-    public void run() {
-      RenewAction action = null;
-      while (true) {
-        try {
-          action = queue.take();
-          if (action.renew()) {
-            action.setNewTime(RENEW_CYCLE + System.currentTimeMillis());
-            queue.add(action);
-          }
-          action = null;
-        } catch (InterruptedException ie) {
-          return;
-        } catch (Exception ie) {
-          if (action != null) {
-            LOG.warn("Failure to renew token " + action, ie);
-          } else {
-            LOG.warn("Failure in renew queue", ie);
-          }
-        }
-      }
-    }

MOV26 MOV26 MOV26 MOV23 MOV23 UPD40 UPD40 UPD40 INS43 INS23 INS23 INS23 INS23 INS31 INS31 MOV31 MOV31 INS31 INS40 INS83 INS83 UPD74 MOV74 INS43 MOV83 INS43 INS59 UPD83 MOV83 MOV43 INS59 INS83 INS74 MOV59 INS83 INS74 MOV59 MOV78 INS83 INS39 INS42 INS8 UPD42 MOV54 INS83 MOV43 INS42 MOV44 INS8 UPD83 MOV74 INS42 INS78 INS74 INS42 MOV78 MOV83 INS73 INS39 INS42 INS44 INS8 INS78 UPD83 INS42 INS43 INS31 INS31 INS31 UPD43 UPD42 INS14 INS21 INS42 UPD42 INS14 INS42 INS42 INS42 INS43 INS76 INS43 INS76 UPD42 INS41 INS60 INS54 UPD43 UPD42 MOV60 INS25 INS60 INS60 INS41 INS41 INS42 INS43 INS76 INS41 INS42 INS43 INS74 INS42 MOV21 INS21 MOV21 MOV21 INS40 UPD42 MOV42 MOV78 UPD39 UPD42 MOV78 MOV83 UPD39 MOV39 UPD42 MOV42 INS44 MOV43 INS8 MOV79 MOV78 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 MOV79 MOV78 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 UPD42 UPD74 MOV74 INS57 INS32 INS43 INS45 UPD42 MOV42 INS42 INS32 INS32 MOV43 INS59 INS8 INS12 UPD42 UPD39 INS27 MOV8 INS43 INS59 INS43 INS59 INS27 INS32 INS42 INS42 UPD42 MOV42 UPD43 MOV43 UPD43 MOV43 INS7 INS7 UPD43 UPD42 INS41 INS74 INS42 INS41 INS74 INS42 INS43 INS42 MOV21 INS41 INS74 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 MOV21 MOV21 UPD43 MOV43 INS42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS40 INS40 UPD42 INS42 MOV32 INS60 INS21 INS44 INS8 UPD42 INS32 INS42 MOV38 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS14 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 MOV42 UPD42 INS32 INS43 INS76 INS9 INS43 INS76 INS42 INS32 INS43 INS76 UPD42 UPD42 INS42 INS42 UPD40 INS43 INS59 INS7 INS43 INS42 INS53 UPD42 MOV42 UPD42 MOV42 INS13 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS74 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 MOV11 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 INS27 MOV11 UPD42 INS42 INS42 INS14 INS42 INS14 INS42 INS14 UPD42 INS60 INS27 UPD42 MOV42 UPD42 MOV42 INS34 INS42 INS42 INS34 INS43 INS43 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS42 UPD42 MOV42 INS42 INS45 INS32 INS42 INS43 INS27 INS43 INS32 INS43 INS45 INS42 MOV43 INS59 INS32 INS8 INS25 INS32 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 UPD45 UPD42 MOV42 UPD42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 MOV40 MOV42 INS42 MOV25 INS32 INS8 INS42 MOV32 UPD42 UPD42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS25 INS32 INS42 INS42 INS10 INS32 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 MOV32 INS21 MOV10 UPD42 UPD42 UPD42 INS32 INS42 INS42 DEL40 DEL26 DEL45 DEL42 DEL43 DEL14 DEL83 DEL23 DEL43 DEL23 DEL83 DEL42 DEL32 DEL21 DEL8 DEL28 DEL40 DEL42 DEL32 DEL32 DEL45 DEL42 DEL27 DEL42 DEL32 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL11 DEL7 DEL21 DEL8 DEL42 DEL7 DEL42 DEL32 DEL27 DEL45 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL9 DEL41 DEL25 DEL42 DEL43 DEL42 DEL11 DEL32 DEL34 DEL27 DEL41 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL40 DEL40 DEL32 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL42 DEL39 DEL42 DEL44 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL14 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL32 DEL43 DEL57 DEL27 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL34 DEL34 DEL16 DEL36 DEL16 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL9 DEL45 DEL6 DEL34 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL42 DEL32 DEL21 DEL40 DEL42 DEL74 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL8 DEL42 DEL44 DEL40 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL12 DEL54 DEL33 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL51 DEL8 DEL25 DEL42 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL41 DEL8 DEL25 DEL42 DEL8 DEL51 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL39 DEL34 DEL34 DEL34 DEL34 DEL34 DEL27 DEL36 DEL11 DEL59 DEL23 DEL83 DEL42 DEL45 DEL46 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL33 DEL32 DEL42 DEL45 DEL42 DEL27 DEL45 DEL43 DEL42 DEL33 DEL59 DEL60 DEL9 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL7 DEL21 DEL8 DEL43 DEL44 DEL41 DEL8 DEL12 DEL44 DEL42 DEL33 DEL27 DEL8 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL31