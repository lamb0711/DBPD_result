Merge r1441206 through r1444434 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1444439 13f79535-47bb-0310-9956-ffa450edef68

-import java.text.DecimalFormat;
-import java.text.NumberFormat;
-import com.google.common.net.InetAddresses;
+import com.google.common.net.InetAddresses;
+
-  private static final DecimalFormat decimalFormat;
-  static {
-          NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.ENGLISH);
-          decimalFormat = (DecimalFormat) numberFormat;
-          decimalFormat.applyPattern("#.##");
-  }
-
-
-  private static DecimalFormat oneDecimal = new DecimalFormat("0.0");
-   * It uses the bases 'k', 'm', and 'g' for 1024, 1024**2, and 1024**3.
+   *
+   * @deprecated use {@link TraditionalBinaryPrefix#long2String(long, String, int)}.
+  @Deprecated
-    long absNumber = Math.abs(number);
-    double result = number;
-    String suffix = "";
-    if (absNumber < 1024) {
-      // since no division has occurred, don't format with a decimal point
-      return String.valueOf(number);
-    } else if (absNumber < 1024 * 1024) {
-      result = number / 1024.0;
-      suffix = "k";
-    } else if (absNumber < 1024 * 1024 * 1024) {
-      result = number / (1024.0 * 1024);
-      suffix = "m";
-    } else {
-      result = number / (1024.0 * 1024 * 1024);
-      suffix = "g";
-    }
-    return oneDecimal.format(result) + suffix;
+    return TraditionalBinaryPrefix.long2String(number, "", 1);
-  
+
+  /** The same as String.format(Locale.ENGLISH, format, objects). */
+  public static String format(final String format, final Object... objects) {
+    return String.format(Locale.ENGLISH, format, objects);
+  }
+
-   * @param done the percentage to format (0.0 to 1.0)
-   * @param digits the number of digits past the decimal point
+   * @param fraction the percentage as a fraction, e.g. 0.1 = 10%
+   * @param decimalPlaces the number of decimal places
-  public static String formatPercent(double done, int digits) {
-    DecimalFormat percentFormat = new DecimalFormat("0.00%");
-    double scale = Math.pow(10.0, digits+2);
-    double rounded = Math.floor(done * scale);
-    percentFormat.setDecimalSeparatorAlwaysShown(false);
-    percentFormat.setMinimumFractionDigits(digits);
-    percentFormat.setMaximumFractionDigits(digits);
-    return percentFormat.format(rounded / scale);
+  public static String formatPercent(double fraction, int decimalPlaces) {
+    return format("%." + decimalPlaces + "f%%", fraction*100);
-      s.append(String.format("%02x", bytes[i]));
+      s.append(format("%02x", bytes[i]));
-    KILO(1024),
-    MEGA(KILO.value << 10),
-    GIGA(MEGA.value << 10),
-    TERA(GIGA.value << 10),
-    PETA(TERA.value << 10),
-    EXA(PETA.value << 10);
+    KILO(10),
+    MEGA(KILO.bitShift + 10),
+    GIGA(MEGA.bitShift + 10),
+    TERA(GIGA.bitShift + 10),
+    PETA(TERA.bitShift + 10),
+    EXA (PETA.bitShift + 10);
+    public final int bitShift;
+    public final long bitMask;
-    TraditionalBinaryPrefix(long value) {
-      this.value = value;
+    private TraditionalBinaryPrefix(int bitShift) {
+      this.bitShift = bitShift;
+      this.value = 1L << bitShift;
+      this.bitMask = this.value - 1L;
+
+    /**
+     * Convert a long integer to a string with traditional binary prefix.
+     * 
+     * @param n the value to be converted
+     * @param unit The unit, e.g. "B" for bytes.
+     * @param decimalPlaces The number of decimal places.
+     * @return a string with traditional binary prefix.
+     */
+    public static String long2String(long n, String unit, int decimalPlaces) {
+      if (unit == null) {
+        unit = "";
+      }
+      //take care a special case
+      if (n == Long.MIN_VALUE) {
+        return "-8 " + EXA.symbol + unit;
+      }
+
+      final StringBuilder b = new StringBuilder();
+      //take care negative numbers
+      if (n < 0) {
+        b.append('-');
+        n = -n;
+      }
+      if (n < KILO.value) {
+        //no prefix
+        b.append(n);
+        return (unit.isEmpty()? b: b.append(" ").append(unit)).toString();
+      } else {
+        //find traditional binary prefix
+        int i = 0;
+        for(; i < values().length && n >= values()[i].value; i++);
+        TraditionalBinaryPrefix prefix = values()[i - 1];
+
+        if ((n & prefix.bitMask) == 0) {
+          //exact division
+          b.append(n >> prefix.bitShift);
+        } else {
+          final String  format = "%." + decimalPlaces + "f";
+          String s = format(format, n/(double)prefix.value);
+          //check a special rounding up case
+          if (s.startsWith("1024")) {
+            prefix = values()[i];
+            s = format(format, n/(double)prefix.value);
+          }
+          b.append(s);
+        }
+        return b.append(' ').append(prefix.symbol).append(unit).toString();
+      }
+    }
-  
+
-   * Return an abbreviated English-language desc of the byte length
+   * @return a byte description of the given long interger value.
-    double val = 0.0;
-    String ending = "";
-    if (len < 1024 * 1024) {
-      val = (1.0 * len) / 1024;
-      ending = " KB";
-    } else if (len < 1024 * 1024 * 1024) {
-      val = (1.0 * len) / (1024 * 1024);
-      ending = " MB";
-    } else if (len < 1024L * 1024 * 1024 * 1024) {
-      val = (1.0 * len) / (1024 * 1024 * 1024);
-      ending = " GB";
-    } else if (len < 1024L * 1024 * 1024 * 1024 * 1024) {
-      val = (1.0 * len) / (1024L * 1024 * 1024 * 1024);
-      ending = " TB";
-    } else {
-      val = (1.0 * len) / (1024L * 1024 * 1024 * 1024 * 1024);
-      ending = " PB";
-    }
-    return limitDecimalTo2(val) + ending;
+    return TraditionalBinaryPrefix.long2String(len, "B", 2);
-  public static synchronized String limitDecimalTo2(double d) {
-    return decimalFormat.format(d);
+  /** @deprecated use StringUtils.format("%.2f", d). */
+  @Deprecated
+  public static String limitDecimalTo2(double d) {
+    return format("%.2f", d);

MOV26 INS31 INS31 MOV29 INS78 MOV83 MOV83 MOV43 MOV42 MOV44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS23 INS23 INS31 INS29 INS78 INS65 INS65 INS42 INS41 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 MOV41 UPD42 UPD42 INS41 UPD34 UPD27 UPD27 UPD27 UPD27 UPD27 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD65 INS41 INS65 INS42 MOV66 MOV66 UPD66 MOV66 INS65 INS66 INS32 INS66 INS42 INS42 INS32 UPD42 UPD66 UPD42 UPD66 INS32 UPD40 UPD40 UPD40 UPD40 UPD40 INS42 INS42 UPD39 UPD42 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS25 INS25 INS60 INS25 INS25 UPD66 INS32 INS66 INS68 INS42 UPD42 MOV42 MOV42 INS45 INS34 UPD42 MOV42 MOV42 INS40 UPD42 MOV42 INS42 INS42 MOV27 MOV27 INS7 INS7 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS27 INS8 INS83 INS43 INS59 INS27 INS8 INS27 INS8 INS8 INS42 INS42 INS42 INS45 INS34 INS45 INS42 INS42 INS69 INS69 INS69 INS45 UPD42 INS45 UPD42 INS34 INS22 INS42 INS22 INS27 INS22 INS27 INS42 INS33 INS21 INS42 INS40 INS41 INS42 INS42 INS14 INS42 INS34 INS21 INS21 INS42 INS40 INS21 INS41 INS60 INS24 INS60 INS25 INS41 INS39 MOV43 INS39 INS52 INS42 INS52 INS42 INS34 INS42 INS52 INS42 MOV22 INS34 INS7 INS27 INS43 INS32 INS7 INS32 INS32 INS39 INS59 INS27 INS37 INS20 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS45 INS45 INS40 INS42 INS42 INS42 INS42 INS13 INS42 INS38 INS42 INS42 INS42 INS36 INS42 INS42 INS34 INS27 INS27 INS42 INS42 INS42 INS2 INS36 INS34 INS21 INS60 INS60 INS25 INS21 INS32 INS42 INS42 INS16 INS42 INS22 INS42 INS22 INS32 INS27 INS27 INS32 INS83 INS43 INS59 MOV43 INS59 INS32 INS8 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS2 INS42 INS42 INS42 INS34 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS45 INS42 INS45 INS42 INS42 INS27 INS7 INS7 INS42 INS42 INS13 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS2 INS42 INS32 INS39 INS40 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS11 INS39 INS40 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL28 DEL65 DEL32 DEL42 DEL27 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL39 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL34 DEL34 DEL27 DEL27 DEL42 DEL42 DEL34 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL34 DEL34 DEL34 DEL27 DEL27 DEL42 DEL42 DEL34 DEL34 DEL27 DEL36 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL42 DEL34 DEL34 DEL34 DEL27 DEL36 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31 DEL34 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL41 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL34 DEL34 DEL27 DEL27 DEL42 DEL34 DEL42 DEL27 DEL36 DEL34 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL34 DEL34 DEL34 DEL27 DEL27 DEL42 DEL34 DEL42 DEL27 DEL36 DEL34 DEL34 DEL27 DEL36 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL34 DEL34 DEL34 DEL34 DEL27 DEL27 DEL42 DEL34 DEL42 DEL27 DEL36 DEL34 DEL34 DEL34 DEL27 DEL36 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL34 DEL34 DEL34 DEL34 DEL34 DEL27 DEL27 DEL42 DEL34 DEL42 DEL27 DEL36 DEL34 DEL34 DEL34 DEL34 DEL27 DEL36 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL34 DEL42 DEL27 DEL36 DEL34 DEL34 DEL34 DEL34 DEL34 DEL27 DEL36 DEL27 DEL7 DEL21 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL42 DEL42 DEL32 DEL42 DEL27 DEL41 DEL83 DEL42