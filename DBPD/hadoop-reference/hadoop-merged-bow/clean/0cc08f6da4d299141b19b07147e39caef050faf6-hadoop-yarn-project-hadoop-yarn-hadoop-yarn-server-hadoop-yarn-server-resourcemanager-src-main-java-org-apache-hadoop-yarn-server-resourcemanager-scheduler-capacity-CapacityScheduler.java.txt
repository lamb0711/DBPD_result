Merge from trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1618700 13f79535-47bb-0310-9956-ffa450edef68

-import com.google.common.base.Preconditions;
-
+import org.apache.hadoop.security.Groups;
+import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppEventType;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppRejectedEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppState;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.*;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacitySchedulerConfiguration.QueueMapping;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacitySchedulerConfiguration.QueueMapping.MappingType;
+import com.google.common.base.Preconditions;
+  private boolean overrideWithQueueMappings = false;
+  private List<QueueMapping> mappings = new ArrayList<QueueMapping>();
+  private Groups groups;
+
+  @VisibleForTesting
+  public synchronized String getMappedQueueForTest(String user)
+      throws IOException {
+    return getMappedQueue(user);
+  }
+
-
-  
+
+  private void initializeQueueMappings() throws IOException {
+    overrideWithQueueMappings = conf.getOverrideWithQueueMappings();
+    LOG.info("Initialized queue mappings, override: "
+        + overrideWithQueueMappings);
+    // Get new user/group mappings
+    List<QueueMapping> newMappings = conf.getQueueMappings();
+    //check if mappings refer to valid queues
+    for (QueueMapping mapping : newMappings) {
+      if (!mapping.queue.equals(CURRENT_USER_MAPPING) &&
+          !mapping.queue.equals(PRIMARY_GROUP_MAPPING)) {
+        CSQueue queue = queues.get(mapping.queue);
+        if (queue == null || !(queue instanceof LeafQueue)) {
+          throw new IOException(
+              "mapping contains invalid or non-leaf queue " + mapping.queue);
+        }
+      }
+    }
+    //apply the new mappings since they are valid
+    mappings = newMappings;
+    // initialize groups if mappings are present
+    if (mappings.size() > 0) {
+      groups = new Groups(conf);
+    }
+  }
+
+
+    initializeQueueMappings();
+    initializeQueueMappings();
+    if (queueName == null) {
+      return null;
+    }
+  private static final String CURRENT_USER_MAPPING = "%user";
+
+  private static final String PRIMARY_GROUP_MAPPING = "%primary_group";
+
+  private String getMappedQueue(String user) throws IOException {
+    for (QueueMapping mapping : mappings) {
+      if (mapping.type == MappingType.USER) {
+        if (mapping.source.equals(CURRENT_USER_MAPPING)) {
+          if (mapping.queue.equals(CURRENT_USER_MAPPING)) {
+            return user;
+          }
+          else if (mapping.queue.equals(PRIMARY_GROUP_MAPPING)) {
+            return groups.getGroups(user).get(0);
+          }
+          else {
+            return mapping.queue;
+          }
+        }
+        if (user.equals(mapping.source)) {
+          return mapping.queue;
+        }
+      }
+      if (mapping.type == MappingType.GROUP) {
+        for (String userGroups : groups.getGroups(user)) {
+          if (userGroups.equals(mapping.source)) {
+            return mapping.queue;
+          }
+        }
+      }
+    }
+    return null;
+  }
+
-      String queueName, String user, boolean isAppRecovering) {
-    // santiy checks.
+    String queueName, String user, boolean isAppRecovering) {
+
+    if (mappings != null && mappings.size() > 0) {
+      try {
+        String mappedQueue = getMappedQueue(user);
+        if (mappedQueue != null) {
+          // We have a mapping, should we use it?
+          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)
+              || overrideWithQueueMappings) {
+            LOG.info("Application " + applicationId + " user " + user
+                + " mapping [" + queueName + "] to [" + mappedQueue
+                + "] override " + overrideWithQueueMappings);
+            queueName = mappedQueue;
+            RMApp rmApp = rmContext.getRMApps().get(applicationId);
+            rmApp.setQueue(queueName);
+          }
+        }
+      } catch (IOException ioex) {
+        String message = "Failed to submit application " + applicationId +
+            " submitted by user " + user + " reason: " + ioex.getMessage();
+        this.rmContext.getDispatcher().getEventHandler()
+            .handle(new RMAppRejectedEvent(applicationId, message));
+        return;
+      }
+    }
+
+    // sanity checks.
+    // update the metrics
+    queue.getMetrics().submitApp(user);
-        appAddedEvent.getQueue(), appAddedEvent.getUser(),
-        appAddedEvent.getIsAppRecovering());
+        appAddedEvent.getQueue(),
+        appAddedEvent.getUser(), appAddedEvent.getIsAppRecovering());
+
+  @Override
+  public synchronized String moveApplication(ApplicationId appId,
+      String targetQueueName) throws YarnException {
+    FiCaSchedulerApp app =
+        getApplicationAttempt(ApplicationAttemptId.newInstance(appId, 0));
+    String sourceQueueName = app.getQueue().getQueueName();
+    LeafQueue source = getAndCheckLeafQueue(sourceQueueName);
+    LeafQueue dest = getAndCheckLeafQueue(targetQueueName);
+    // Validation check - ACLs, submission limits for user & queue
+    String user = app.getUser();
+    try {
+      dest.submitApplication(appId, user, targetQueueName);
+    } catch (AccessControlException e) {
+      throw new YarnException(e);
+    }
+    // Move all live containers
+    for (RMContainer rmContainer : app.getLiveContainers()) {
+      source.detachContainer(clusterResource, app, rmContainer);
+      // attach the Container to another queue
+      dest.attachContainer(clusterResource, app, rmContainer);
+    }
+    // Detach the application..
+    source.finishApplicationAttempt(app, sourceQueueName);
+    source.getParent().finishApplication(appId, app.getUser());
+    // Finish app & update metrics
+    app.move(dest);
+    // Submit to a new queue
+    dest.submitApplicationAttempt(app, user);
+    applications.get(appId).setQueue(dest);
+    LOG.info("App: " + app.getApplicationId() + " successfully moved from "
+        + sourceQueueName + " to: " + targetQueueName);
+    return targetQueueName;
+  }
+
+  /**
+   * Check that the String provided in input is the name of an existing,
+   * LeafQueue, if successful returns the queue.
+   *
+   * @param queue
+   * @return the LeafQueue
+   * @throws YarnException
+   */
+  private LeafQueue getAndCheckLeafQueue(String queue) throws YarnException {
+    CSQueue ret = this.getQueue(queue);
+    if (ret == null) {
+      throw new YarnException("The specified Queue: " + queue
+          + " doesn't exist");
+    }
+    if (!(ret instanceof LeafQueue)) {
+      throw new YarnException("The specified Queue: " + queue
+          + " is not a Leaf Queue. Move is supported only for Leaf Queues.");
+    }
+    return (LeafQueue) ret;
+  }

MOV26 MOV26 MOV26 MOV26 INS26 INS40 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS23 INS23 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS78 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS9 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS41 INS42 INS21 INS21 INS60 INS70 INS21 INS25 INS21 INS21 INS25 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS70 INS41 INS25 INS21 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS54 INS70 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS25 INS41 INS42 INS42 INS74 INS42 INS32 INS7 INS32 INS74 INS59 INS44 INS42 INS8 INS7 INS27 INS8 INS32 INS32 INS27 INS8 INS42 INS44 INS42 INS8 INS33 INS27 INS8 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS44 INS32 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS38 INS8 INS11 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS32 INS34 INS21 INS42 INS42 INS42 INS33 INS41 INS43 INS42 INS25 INS25 INS27 INS27 INS54 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS43 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS53 INS36 INS53 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS7 INS33 INS42 INS27 INS8 INS27 INS8 INS42 INS33 INS32 INS34 INS8 INS12 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS52 INS42 INS42 INS14 INS62 INS14 INS42 INS38 INS38 INS60 INS25 INS42 INS14 INS40 INS40 INS25 INS25 INS40 INS40 INS70 INS42 INS42 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS43 INS43 INS27 INS32 INS32 INS43 INS59 INS27 INS8 INS43 INS42 INS32 INS8 INS32 INS8 INS44 INS32 INS8 INS43 INS59 INS27 INS8 INS43 INS42 INS60 INS21 INS41 INS43 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS27 INS38 INS53 INS42 INS40 INS42 INS42 INS25 INS42 INS42 INS40 INS41 INS43 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS40 INS42 INS33 INS36 INS14 INS32 INS8 INS25 INS40 INS42 INS32 INS8 INS42 INS42 INS27 INS8 INS42 INS42 INS27 INS32 INS42 INS14 INS62 INS43 INS27 INS40 INS42 INS42 INS41 INS32 INS8 INS8 INS42 INS42 INS40 INS41 INS32 INS42 INS21 INS21 INS60 INS21 INS45 INS42 INS45 INS42 INS45 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS45 INS40 INS42 INS40 INS42 INS42 INS41 INS41 INS40 INS42 INS42 INS40 INS32 INS7 INS43 INS59 INS32 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS34 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42