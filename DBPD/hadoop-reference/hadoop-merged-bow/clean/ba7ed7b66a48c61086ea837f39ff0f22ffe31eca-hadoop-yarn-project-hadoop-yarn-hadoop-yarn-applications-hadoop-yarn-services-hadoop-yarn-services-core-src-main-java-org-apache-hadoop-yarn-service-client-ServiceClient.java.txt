YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi

-import org.apache.hadoop.service.CompositeService;
+import org.apache.hadoop.yarn.client.api.AppAdminClient;
-import org.apache.hadoop.yarn.service.client.params.AbstractClusterBuildingActionArgs;
-import org.apache.hadoop.yarn.service.client.params.ActionCreateArgs;
-import org.apache.hadoop.yarn.service.client.params.ActionDependencyArgs;
-import org.apache.hadoop.yarn.service.client.params.ActionFlexArgs;
-import org.apache.hadoop.yarn.service.client.params.Arguments;
-import org.apache.hadoop.yarn.service.client.params.ClientArgs;
-import org.apache.hadoop.yarn.service.client.params.CommonArgs;
-import org.apache.hadoop.yarn.service.exceptions.UsageException;
-import static org.apache.hadoop.yarn.service.client.params.SliderActions.ACTION_CREATE;
-import static org.apache.hadoop.yarn.service.client.params.SliderActions.ACTION_FLEX;
-public class ServiceClient extends CompositeService
-    implements SliderExitCodes, YarnServiceConstants {
+public class ServiceClient extends AppAdminClient implements SliderExitCodes,
+    YarnServiceConstants {
-  public ServiceClient() {
-    super(ServiceClient.class.getName());
-  }
-
-  private Service loadAppJsonFromLocalFS(
-      AbstractClusterBuildingActionArgs args) throws IOException {
-    File file = args.getFile();
+  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,
+      Long lifetime, String queue) throws IOException, YarnException {
+    File file = new File(fileName);
+    if (!file.exists() && fileName.equals(file.getName())) {
+      String examplesDirStr = System.getenv("YARN_SERVICE_EXAMPLES_DIR");
+      String[] examplesDirs;
+      if (examplesDirStr == null) {
+        String yarnHome = System
+            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());
+        examplesDirs = new String[]{
+            yarnHome + "/share/hadoop/yarn/yarn-service-examples",
+            yarnHome + "/yarn-service-examples"
+        };
+      } else {
+        examplesDirs = StringUtils.split(examplesDirStr, ":");
+      }
+      for (String dir : examplesDirs) {
+        file = new File(MessageFormat.format("{0}/{1}/{2}.json",
+            dir, fileName, fileName));
+        if (file.exists()) {
+          break;
+        }
+        // Then look for secondary location.
+        file = new File(MessageFormat.format("{0}/{1}.json",
+            dir, fileName));
+        if (file.exists()) {
+          break;
+        }
+      }
+    }
+    if (!file.exists()) {
+      throw new YarnException("File or example could not be found: " +
+          fileName);
+    }
-    if (args.lifetime > 0) {
-      service.setLifetime(args.lifetime);
+    if (!StringUtils.isEmpty(serviceName)) {
+      service.setName(serviceName);
-    if (!StringUtils.isEmpty(args.getServiceName())) {
-      service.setName(args.getServiceName());
+    if (lifetime != null && lifetime > 0) {
+      service.setLifetime(lifetime);
-    if (!StringUtils.isEmpty(args.queue)) {
-      service.setQueue(args.queue);
+    if (!StringUtils.isEmpty(queue)) {
+      service.setQueue(queue);
-  public int actionBuild(AbstractClusterBuildingActionArgs args)
-      throws IOException, YarnException {
-    return actionBuild(loadAppJsonFromLocalFS(args));
+  public int actionSave(String fileName, String serviceName, Long lifetime,
+      String queue) throws IOException, YarnException {
+    return actionBuild(loadAppJsonFromLocalFS(fileName, serviceName,
+        lifetime, queue));
-  public int actionCreate(ActionCreateArgs args)
-      throws IOException, YarnException {
-    Service serviceDef;
-    if (args.file != null) {
-      serviceDef = loadAppJsonFromLocalFS(args);
-    } else if (!StringUtils.isEmpty(args.example)) {
-      // create an example service
-      args.file = findExampleService(args);
-      serviceDef = loadAppJsonFromLocalFS(args);
-    } else {
-      throw new YarnException("No service definition provided!");
-    }
-    actionCreate(serviceDef);
+  public int actionLaunch(String fileName, String serviceName, Long lifetime,
+      String queue) throws IOException, YarnException {
+    actionCreate(loadAppJsonFromLocalFS(fileName, serviceName, lifetime,
+        queue));
-  private File findExampleService(ActionCreateArgs args) throws YarnException {
-    String yarnHome = System
-        .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());
-    // First look for the standard location.
-    File file = new File(MessageFormat
-        .format("{0}/share/hadoop/yarn/yarn-service-examples/{1}/{2}.json",
-            yarnHome, args.example, args.example));
-    if (file.exists()) {
-      return file;
-    }
-    // Then look for secondary location.
-    file = new File(MessageFormat
-        .format("{0}/yarn-service-examples/{1}/{2}.json", yarnHome,
-            args.example, args.example));
-    if (file.exists()) {
-      return file;
-    }
-    throw new YarnException(
-        "Example service " + args.example + " does not exist!");
-  }
-
-  // Called by ServiceCLI
-  protected int actionFlexByCLI(ClientArgs args)
-      throws YarnException, IOException {
-    ActionFlexArgs flexArgs = args.getActionFlexArgs();
+  public int actionFlex(String serviceName, Map<String, String>
+      componentCountStrings) throws YarnException, IOException {
-        new HashMap<>(flexArgs.getComponentMap().size());
+        new HashMap<>(componentCountStrings.size());
-        ServiceApiUtil.loadService(fs, flexArgs.getServiceName());
+        ServiceApiUtil.loadService(fs, serviceName);
-    for (Map.Entry<String, String> entry : flexArgs.getComponentMap()
-        .entrySet()) {
+    for (Map.Entry<String, String> entry : componentCountStrings.entrySet()) {
-    // throw usage exception if no changes proposed
-    if (componentCounts.size() == 0) {
-      actionHelp(ACTION_FLEX, args);
-    }
-    flexComponents(args.getClusterName(), componentCounts, persistedService);
+    flexComponents(serviceName, componentCounts, persistedService);
+  public int actionStop(String serviceName)
+      throws YarnException, IOException {
+    return actionStop(serviceName, true);
+  }
+
-  public int actionDestroy(String serviceName) throws Exception {
+  public int actionDestroy(String serviceName) throws YarnException,
+      IOException {
-    deleteZKNode(serviceName);
+    try {
+      deleteZKNode(serviceName);
+    } catch (Exception e) {
+      throw new IOException("Could not delete zk node for " + serviceName, e);
+    }
-  private int actionHelp(String actionName, CommonArgs args)
-      throws YarnException, IOException {
-    throw new UsageException(CommonArgs.usage(args, actionName));
-  }
-
-    CLI.add(ACTION_CREATE, serviceName);
-    CLI.add(Arguments.ARG_SERVICE_DEF_PATH, new Path(appRootDir, serviceName + ".json"));
+    CLI.add("-" + ServiceMaster.YARNFILE_OPTION, new Path(appRootDir,
+        serviceName + ".json"));
+  public String getStatusString(String appId)
+      throws IOException, YarnException {
+    ApplicationReport appReport =
+        yarnClient.getApplicationReport(ApplicationId.fromString(appId));
+
+    if (appReport.getYarnApplicationState() != RUNNING) {
+      return "";
+    }
+    if (StringUtils.isEmpty(appReport.getHost())) {
+      return "";
+    }
+    ClientAMProtocol amProxy =
+        createAMProxy(appReport.getHost(), appReport.getRpcPort());
+    GetStatusResponseProto response =
+        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());
+    return response.getStatus();
+  }
+
-  public int actionDependency(ActionDependencyArgs args)
+  public int enableFastLaunch() throws IOException, YarnException {
+    return actionDependency(true);
+  }
+
+  public int actionDependency(boolean overwrite)
-    if (fs.isFile(dependencyLibTarGzip) && !args.overwrite) {
+    if (fs.isFile(dependencyLibTarGzip) && !overwrite) {
-          "Dependency libs are already uploaded to %s. Use %s "
-              + "if you want to re-upload", dependencyLibTarGzip.toUri(),
-          Arguments.ARG_OVERWRITE));
+          "Dependency libs are already uploaded to %s.", dependencyLibTarGzip
+              .toUri()));

MOV26 MOV31 MOV31 UPD40 UPD43 INS31 INS31 INS31 UPD42 MOV83 MOV43 INS42 INS44 INS44 INS44 MOV44 MOV43 INS43 MOV8 UPD42 INS44 INS44 INS44 INS43 INS43 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 INS44 MOV44 INS43 MOV43 INS8 UPD83 UPD42 INS44 INS83 INS39 INS42 INS44 MOV43 MOV43 INS8 MOV43 INS43 UPD83 UPD43 UPD42 MOV43 MOV43 UPD83 UPD42 MOV43 INS43 INS42 INS43 INS42 INS43 INS42 UPD43 UPD42 INS42 INS60 INS25 INS25 INS25 UPD43 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 UPD43 UPD42 INS43 INS42 INS43 INS42 UPD42 INS42 MOV21 MOV41 INS43 INS42 INS74 UPD42 INS43 INS42 INS41 INS42 INS54 UPD42 UPD43 UPD42 INS25 INS60 INS60 INS41 INS41 INS39 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV43 INS59 INS27 INS8 INS38 MOV8 INS27 INS8 UPD42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS8 INS12 UPD42 INS43 INS27 INS32 INS8 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS14 INS38 INS32 MOV60 INS60 MOV25 INS70 MOV32 INS27 INS27 INS21 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 MOV21 INS44 INS8 INS27 INS42 UPD42 INS32 INS32 INS42 INS42 INS42 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS9 MOV43 INS42 INS32 INS42 INS42 INS32 INS43 INS5 INS59 UPD27 INS8 INS44 INS42 INS8 UPD42 MOV42 INS42 INS33 INS42 INS34 INS32 INS42 UPD42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 MOV43 INS42 INS53 INS45 INS40 UPD42 MOV42 INS42 INS32 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS85 INS42 INS42 INS33 MOV60 INS21 INS43 INS42 INS21 INS25 INS21 MOV25 INS27 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 INS45 INS42 INS7 INS7 INS42 INS7 INS32 INS8 INS7 INS45 INS42 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS3 INS42 INS32 INS42 INS14 INS42 INS42 INS10 INS42 INS14 INS10 INS42 INS45 INS42 INS5 INS4 INS42 UPD42 MOV42 UPD42 MOV42 INS45 MOV43 INS32 MOV43 INS32 INS43 INS85 INS27 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL57 DEL42 DEL32 DEL46 DEL8 DEL31 DEL40 DEL34 DEL40 DEL32 DEL42 DEL41 DEL45 DEL42 DEL32 DEL42 DEL32 DEL40 DEL40 DEL83 DEL42 DEL31 DEL42 DEL32 DEL7 DEL43 DEL42 DEL59 DEL60 DEL40 DEL33 DEL27 DEL8 DEL42 DEL42 DEL40 DEL32 DEL38 DEL40 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL32 DEL21 DEL8 DEL31 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL40 DEL45 DEL40 DEL40 DEL32 DEL14 DEL42 DEL42 DEL45 DEL42 DEL40 DEL40 DEL32 DEL14 DEL7 DEL21 DEL45 DEL40 DEL45 DEL27 DEL14 DEL53 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL53 DEL42 DEL43 DEL42 DEL40 DEL45 DEL45 DEL27 DEL40