YARN-6306. NMClient API change for container upgrade. Contributed by Arun Suresh

+  @Override
+  public void reInitializeContainerAsync(ContainerId containerId,
+      ContainerLaunchContext containerLaunchContex, boolean autoCommit){
+    if (!(callbackHandler instanceof AbstractCallbackHandler)) {
+      LOG.error("Callback handler does not implement container re-initialize "
+          + "callback methods");
+      return;
+    }
+    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;
+    if (containers.get(containerId) == null) {
+      handler.onContainerReInitializeError(
+          containerId, RPCUtil.getRemoteException(
+              "Container " + containerId + " is not started"));
+    }
+    try {
+      events.put(new ReInitializeContainerEvevnt(containerId,
+          client.getNodeIdOfStartedContainer(containerId),
+          containerLaunchContex, autoCommit));
+    } catch (InterruptedException e) {
+      LOG.warn("Exception when scheduling the event of re-initializing of "
+          + "Container " + containerId);
+      handler.onContainerReInitializeError(containerId, e);
+    }
+  }
+
+  @Override
+  public void restartContainerAsync(ContainerId containerId){
+    if (!(callbackHandler instanceof AbstractCallbackHandler)) {
+      LOG.error("Callback handler does not implement container restart "
+          + "callback methods");
+      return;
+    }
+    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;
+    if (containers.get(containerId) == null) {
+      handler.onContainerRestartError(
+          containerId, RPCUtil.getRemoteException(
+              "Container " + containerId + " is not started"));
+    }
+    try {
+      events.put(new ContainerEvent(containerId,
+          client.getNodeIdOfStartedContainer(containerId),
+          null, ContainerEventType.RESTART_CONTAINER));
+    } catch (InterruptedException e) {
+      LOG.warn("Exception when scheduling the event of restart of "
+          + "Container " + containerId);
+      handler.onContainerRestartError(containerId, e);
+    }
+  }
+
+  @Override
+  public void rollbackLastReInitializationAsync(ContainerId containerId){
+    if (!(callbackHandler instanceof AbstractCallbackHandler)) {
+      LOG.error("Callback handler does not implement container rollback "
+          + "callback methods");
+      return;
+    }
+    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;
+    if (containers.get(containerId) == null) {
+      handler.onRollbackLastReInitializationError(
+          containerId, RPCUtil.getRemoteException(
+              "Container " + containerId + " is not started"));
+    }
+    try {
+      events.put(new ContainerEvent(containerId,
+          client.getNodeIdOfStartedContainer(containerId),
+          null, ContainerEventType.ROLLBACK_LAST_REINIT));
+    } catch (InterruptedException e) {
+      LOG.warn("Exception when scheduling the event Rollback re-initialization"
+          + " of Container " + containerId);
+      handler.onRollbackLastReInitializationError(containerId, e);
+    }
+  }
+
+  @Override
+  public void commitLastReInitializationAsync(ContainerId containerId){
+    if (!(callbackHandler instanceof AbstractCallbackHandler)) {
+      LOG.error("Callback handler does not implement container commit last " +
+          "re-initialization callback methods");
+      return;
+    }
+    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;
+    if (containers.get(containerId) == null) {
+      handler.onCommitLastReInitializationError(
+          containerId, RPCUtil.getRemoteException(
+              "Container " + containerId + " is not started"));
+    }
+    try {
+      events.put(new ContainerEvent(containerId,
+          client.getNodeIdOfStartedContainer(containerId),
+          null, ContainerEventType.COMMIT_LAST_REINT));
+    } catch (InterruptedException e) {
+      LOG.warn("Exception when scheduling the event Commit re-initialization"
+          + " of Container " + containerId);
+      handler.onCommitLastReInitializationError(containerId, e);
+    }
+  }
+
-    INCREASE_CONTAINER_RESOURCE
+    INCREASE_CONTAINER_RESOURCE,
+    REINITIALIZE_CONTAINER,
+    RESTART_CONTAINER,
+    ROLLBACK_LAST_REINIT,
+    COMMIT_LAST_REINT
+  protected static class ReInitializeContainerEvevnt extends ContainerEvent {
+    private ContainerLaunchContext containerLaunchContext;
+    private boolean autoCommit;
+
+    public ReInitializeContainerEvevnt(ContainerId containerId, NodeId nodeId,
+        ContainerLaunchContext containerLaunchContext, boolean autoCommit) {
+      super(containerId, nodeId, null,
+          ContainerEventType.REINITIALIZE_CONTAINER);
+      this.containerLaunchContext = containerLaunchContext;
+      this.autoCommit = autoCommit;
+    }
+
+    public ContainerLaunchContext getContainerLaunchContext() {
+      return containerLaunchContext;
+    }
+
+    public boolean isAutoCommit() {
+      return autoCommit;
+    }
+  }
+
+
+            // Transitions for Container Upgrade
+            .addTransition(ContainerState.RUNNING,
+                EnumSet.of(ContainerState.RUNNING, ContainerState.FAILED),
+                ContainerEventType.REINITIALIZE_CONTAINER,
+                new ReInitializeContainerTransition())
+            .addTransition(ContainerState.RUNNING,
+                EnumSet.of(ContainerState.RUNNING, ContainerState.FAILED),
+                ContainerEventType.RESTART_CONTAINER,
+                new ReInitializeContainerTransition())
+            .addTransition(ContainerState.RUNNING,
+                EnumSet.of(ContainerState.RUNNING, ContainerState.FAILED),
+                ContainerEventType.ROLLBACK_LAST_REINIT,
+                new ReInitializeContainerTransition())
+            .addTransition(ContainerState.RUNNING,
+                EnumSet.of(ContainerState.RUNNING, ContainerState.FAILED),
+                ContainerEventType.COMMIT_LAST_REINT,
+                new ReInitializeContainerTransition())
+
+                    ContainerEventType.REINITIALIZE_CONTAINER,
+                    ContainerEventType.RESTART_CONTAINER,
+                    ContainerEventType.COMMIT_LAST_REINT,
+                    ContainerEventType.ROLLBACK_LAST_REINIT,
+    protected static class ReInitializeContainerTransition implements
+        MultipleArcTransition<StatefulContainer, ContainerEvent,
+            ContainerState> {
+
+      @Override
+      public ContainerState transition(StatefulContainer container,
+          ContainerEvent containerEvent) {
+        ContainerId containerId = containerEvent.getContainerId();
+        AbstractCallbackHandler handler = (AbstractCallbackHandler) container
+                .nmClientAsync.getCallbackHandler();
+        Throwable handlerError = null;
+        try {
+          switch(containerEvent.getType()) {
+          case REINITIALIZE_CONTAINER:
+            if (!(containerEvent instanceof ReInitializeContainerEvevnt)) {
+              LOG.error("Unexpected Event.. [" +containerEvent.getType() + "]");
+              return ContainerState.FAILED;
+            }
+            ReInitializeContainerEvevnt rEvent =
+                (ReInitializeContainerEvevnt)containerEvent;
+            container.nmClientAsync.getClient().reInitializeContainer(
+                containerId, rEvent.getContainerLaunchContext(),
+                rEvent.isAutoCommit());
+            try {
+              handler.onContainerReInitialize(containerId);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          case RESTART_CONTAINER:
+            container.nmClientAsync.getClient().restartContainer(containerId);
+            try {
+              handler.onContainerRestart(containerId);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          case ROLLBACK_LAST_REINIT:
+            container.nmClientAsync.getClient()
+                .rollbackLastReInitialization(containerId);
+            try {
+              handler.onRollbackLastReInitialization(containerId);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          case COMMIT_LAST_REINT:
+            container.nmClientAsync.getClient()
+                .commitLastReInitialization(containerId);
+            try {
+              handler.onCommitLastReInitialization(containerId);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          default:
+            LOG.warn("Event of type [" + containerEvent.getType() + "] not" +
+                " expected here..");
+            break;
+          }
+          if (handlerError != null) {
+            LOG.info("Unchecked exception is thrown in handler for event ["
+                + containerEvent.getType() + "] for Container "
+                + containerId, handlerError);
+          }
+
+          return ContainerState.RUNNING;
+        } catch (Throwable t) {
+          switch(containerEvent.getType()) {
+          case REINITIALIZE_CONTAINER:
+            try {
+              handler.onContainerReInitializeError(containerId, t);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          case RESTART_CONTAINER:
+            try {
+              handler.onContainerRestartError(containerId, t);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          case ROLLBACK_LAST_REINIT:
+            try {
+              handler.onRollbackLastReInitializationError(containerId, t);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          case COMMIT_LAST_REINT:
+            try {
+              handler.onCommitLastReInitializationError(containerId, t);
+            } catch (Throwable tr) {
+              handlerError = tr;
+            }
+            break;
+          default:
+            LOG.warn("Event of type [" + containerEvent.getType() + "] not" +
+                " expected here..");
+            break;
+          }
+          if (handlerError != null) {
+            LOG.info("Unchecked exception is thrown in handler for event ["
+                + containerEvent.getType() + "] for Container "
+                + containerId, handlerError);
+          }
+        }
+
+        return ContainerState.FAILED;
+      }
+    }
+

INS31 INS31 INS31 INS31 INS55 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS72 INS72 INS72 INS72 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS42 INS55 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS25 INS60 INS25 INS54 INS42 INS43 INS42 INS25 INS60 INS25 INS54 INS42 INS43 INS42 INS25 INS60 INS25 INS54 INS42 INS43 INS42 INS25 INS60 INS25 INS54 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 MOV83 MOV83 INS42 INS74 INS31 INS42 INS42 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS12 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS46 INS21 INS21 INS42 INS41 INS41 INS32 INS43 INS43 INS43 INS43 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS36 INS21 INS41 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS44 INS8 INS36 INS21 INS41 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS44 INS8 INS36 INS21 INS41 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS44 INS8 INS36 INS21 INS41 INS42 INS42 INS11 INS32 INS33 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS40 INS7 INS7 INS42 INS42 MOV32 INS42 INS40 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS60 INS54 INS41 INS62 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS62 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS62 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS62 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS21 INS21 INS22 INS42 INS22 INS42 INS32 INS42 UPD40 MOV40 INS40 MOV32 INS42 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS40 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS32 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS32 INS42 INS40 MOV32 MOV40 MOV14 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS33 INS50 INS25 INS41 INS44 INS8 INS42 INS45 INS45 INS42 INS42 INS27 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS27 INS43 INS42 INS32 INS33 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS27 INS43 INS42 INS32 INS33 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS27 INS43 INS42 INS32 INS33 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 UPD40 MOV40 INS14 INS42 INS42 INS43 INS32 INS32 INS49 INS25 INS60 INS21 INS54 INS10 INS49 INS21 INS54 INS10 INS49 INS21 INS54 INS10 INS49 INS21 INS54 INS10 INS49 INS21 INS10 INS27 INS8 INS40 INS43 INS42 INS50 INS25 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS45 INS42 MOV32 MOV42 UPD40 MOV40 INS32 INS40 INS14 MOV42 MOV42 INS40 INS40 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS32 INS8 INS12 INS42 INS32 INS8 INS12 INS42 INS32 INS8 INS12 INS42 INS32 INS8 INS12 INS32 INS42 INS33 INS21 INS42 INS32 INS49 INS54 INS10 INS49 INS54 INS10 INS49 INS54 INS10 INS49 INS54 INS10 INS49 INS21 INS10 INS27 INS8 UPD40 INS32 INS40 INS14 INS42 INS42 INS40 MOV40 INS43 INS42 INS36 INS21 INS41 INS42 INS42 INS11 INS32 INS42 INS42 INS32 INS32 INS21 INS44 INS8 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS42 INS8 INS12 INS32 INS42 INS33 INS21 INS32 UPD40 INS14 INS42 INS42 INS40 UPD40 MOV40 INS43 INS42 INS62 INS32 INS40 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS40 INS42 INS32 INS43 INS42 INS21 INS40 INS42 INS32 INS43 INS42 INS21 INS40 INS42 INS32 INS43 INS42 INS21 INS45 INS32 INS45 INS45 INS42 INS42 INS27 INS42 INS21 INS44 INS8 INS21 INS44 INS8 INS21 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS27 INS32 INS42 INS42 INS40 INS40 INS43 INS42 INS42 INS43 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS32 INS45 INS42 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS45 INS32 INS45 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32