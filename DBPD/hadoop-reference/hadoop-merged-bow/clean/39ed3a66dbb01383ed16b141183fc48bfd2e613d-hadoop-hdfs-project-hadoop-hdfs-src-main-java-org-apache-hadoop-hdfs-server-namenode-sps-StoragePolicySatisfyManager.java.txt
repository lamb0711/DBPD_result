HDFS-13076: [SPS]: Cleanup work for HDFS-10285 merge. Contributed by Rakesh R.

+import java.util.Iterator;
-import org.apache.hadoop.hdfs.protocol.HdfsConstants.StoragePolicySatisfyPathStatus;
-import org.apache.hadoop.hdfs.server.blockmanagement.BlockManager;
+import org.apache.hadoop.hdfs.server.common.HdfsServerConstants;
+import com.google.common.annotations.VisibleForTesting;
+
- * process these path ids. It maintains sps mode(INTERNAL/EXTERNAL/NONE)
+ * process these path ids. It maintains sps mode(EXTERNAL/NONE)
- * If the configured mode is {@link StoragePolicySatisfierMode.INTERNAL}, then
- * it will start internal sps daemon service inside namenode and process sps
- * invoked path ids to satisfy the storage policy.
- *
- * <p>
-  private final BlockManager blkMgr;
-  public StoragePolicySatisfyManager(Configuration conf, Namesystem namesystem,
-      BlockManager blkMgr) {
+  public StoragePolicySatisfyManager(Configuration conf,
+      Namesystem namesystem) {
+    this.namesystem = namesystem;
-    this.namesystem = namesystem;
-    this.blkMgr = blkMgr;
-   * If the configured mode is {@link StoragePolicySatisfierMode.INTERNAL}, then
-   * starts internal daemon service inside namenode.
-   *
-   * <p>
-    case INTERNAL:
-      if (spsService.isRunning()) {
-        LOG.info("Storage policy satisfier is already running"
-            + " as internal daemon service inside namenode.");
-        return;
-      }
-      // starts internal daemon service inside namenode
-      spsService.init(
-          new IntraSPSNameNodeContext(namesystem, blkMgr, spsService));
-      spsService.start(false, mode);
-      break;
-   * If the configured mode is {@link StoragePolicySatisfierMode.INTERNAL}, then
-   * stops internal daemon service inside namenode.
-   *
-   * <p>
-    case INTERNAL:
-      removeAllPathIds();
-      if (!spsService.isRunning()) {
-        LOG.info("Internal storage policy satisfier daemon service"
-            + " is not running");
-        return;
-      }
-      // stops internal daemon service running inside namenode
-      spsService.stop(false);
-      break;
-   * Sets new sps mode. If the new mode is internal, then it will start internal
-   * sps service inside namenode. If the new mode is external, then stops
-   * internal sps service running(if any) inside namenode. If the new mode is
-   * none, then it will disable the sps feature completely by clearing all
-   * queued up sps path's hint.
+   * Sets new sps mode. If the new mode is none, then it will disable the sps
+   * feature completely by clearing all queued up sps path's hint.
-    case INTERNAL:
-      if (spsService.isRunning()) {
-        LOG.info("Storage policy satisfier is already running as {} mode.",
-            mode);
-        return;
-      }
-      spsService.init(new IntraSPSNameNodeContext(this.namesystem, this.blkMgr,
-          spsService));
-      spsService.start(true, newMode);
-      break;
-      removeAllPathIds();
+      clearPathIds();
-   * This function will do following logic based on the configured sps mode:
-   *
-   * <p>
-   * If the configured mode is {@link StoragePolicySatisfierMode.INTERNAL}, then
-   * timed wait to stop internal storage policy satisfier daemon threads.
-   *
-   * <p>
-   * If the configured mode is {@link StoragePolicySatisfierMode.EXTERNAL}, then
-   * it won't do anything, just ignore it.
-   *
-   * <p>
-   * If the configured mode is {@link StoragePolicySatisfierMode.NONE}, then the
-   * service is disabled. It won't do any action, just ignore it.
-   */
-  public void stopGracefully() {
-    switch (mode) {
-    case INTERNAL:
-      spsService.stopGracefully();
-      break;
-    case EXTERNAL:
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Ignoring, StoragePolicySatisfier feature is running"
-            + " outside namenode");
-      }
-      break;
-    case NONE:
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Ignoring, StoragePolicySatisfier feature is disabled");
-      }
-      break;
-    default:
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Invalid mode:{}", mode);
-      }
-      break;
-    }
-  }
-
-  /**
-  public boolean isInternalSatisfierRunning() {
+  @VisibleForTesting
+  public boolean isSatisfierRunning() {
-   * @return internal SPS service instance.
-   */
-  public SPSService getInternalSPSService() {
-    return this.spsService;
-  }
-
-  /**
-   * @return status Storage policy satisfy status of the path. It is supported
-   *         only for the internal sps daemon service.
-   * @throws IOException
-   *           if the Satisfier is not running inside namenode.
-   */
-  public StoragePolicySatisfyPathStatus checkStoragePolicySatisfyPathStatus(
-      String path) throws IOException {
-    if (mode != StoragePolicySatisfierMode.INTERNAL) {
-      LOG.debug("Satisfier is not running inside namenode, so status "
-          + "can't be returned.");
-      throw new IOException("Satisfier is not running inside namenode, "
-          + "so status can't be returned.");
-    }
-    return spsService.checkStoragePolicySatisfyPathStatus(path);
-  }
-
-  /**
+   *
+   * @throws IOException
-  public void removePathId(long trackId) {
+  private void clearPathIds(){
-      pathsToBeTraveresed.remove(trackId);
+      Iterator<Long> iterator = pathsToBeTraveresed.iterator();
+      while (iterator.hasNext()) {
+        Long trackId = iterator.next();
+        try {
+          namesystem.removeXattr(trackId,
+              HdfsServerConstants.XATTR_SATISFY_STORAGE_POLICY);
+        } catch (IOException e) {
+          LOG.debug("Failed to remove sps xatttr!", e);
+        }
+        iterator.remove();
+      }
-   * @return true if sps is configured as an internal service or external
+   * @return true if sps is configured as an external
-    return mode == StoragePolicySatisfierMode.INTERNAL
-        || mode == StoragePolicySatisfierMode.EXTERNAL;
+    return mode == StoragePolicySatisfierMode.EXTERNAL;

MOV26 INS26 UPD40 UPD40 INS40 INS31 MOV66 MOV21 INS78 UPD42 MOV29 INS83 MOV39 UPD42 MOV42 INS8 UPD66 MOV66 MOV10 MOV10 MOV66 MOV21 MOV10 MOV10 MOV10 INS42 INS65 INS51 MOV65 UPD66 UPD66 INS42 INS42 INS8 UPD66 MOV27 INS60 INS61 UPD42 INS74 INS59 INS32 INS8 INS43 INS43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS60 INS54 MOV21 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS8 INS12 INS42 INS42 INS32 MOV21 INS44 INS8 UPD42 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 MOV21 UPD42 UPD42 UPD42 INS40 INS45 INS42 DEL40 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL40 DEL65 DEL66 DEL66 DEL66 DEL66 DEL42 DEL49 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL9 DEL42 DEL32 DEL21 DEL10 DEL40 DEL65 DEL66 DEL66 DEL66 DEL66 DEL42 DEL49 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL32 DEL21 DEL10 DEL66 DEL66 DEL66 DEL42 DEL49 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL9 DEL42 DEL32 DEL21 DEL10 DEL66 DEL66 DEL66 DEL40 DEL65 DEL66 DEL66 DEL66 DEL66 DEL40 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL49 DEL42 DEL42 DEL32 DEL21 DEL10 DEL42 DEL49 DEL42 DEL42 DEL32 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL10 DEL42 DEL49 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL10 DEL49 DEL32 DEL8 DEL25 DEL10 DEL50 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL40 DEL27 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL45 DEL45 DEL45 DEL27 DEL42 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL8 DEL51 DEL8 DEL31 DEL42 DEL40 DEL27 DEL27