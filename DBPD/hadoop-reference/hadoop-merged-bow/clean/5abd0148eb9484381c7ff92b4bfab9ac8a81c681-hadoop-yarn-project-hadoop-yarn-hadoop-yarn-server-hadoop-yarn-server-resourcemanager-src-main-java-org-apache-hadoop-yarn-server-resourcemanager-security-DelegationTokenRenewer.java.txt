YARN-9768. RM Renew Delegation token thread should timeout and retry. Contributed by Manikandan R.

+import java.util.HashMap;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeoutException;
+  private long tokenRenewerThreadTimeout;
+  private long tokenRenewerThreadRetryInterval;
+  private int tokenRenewerThreadRetryMaxAttempts;
+  private final Map<DelegationTokenRenewerEvent, Future<?>> futures =
+      new HashMap<>();
+  private boolean delegationTokenRenewerPoolTrackerFlag = true;
+    tokenRenewerThreadTimeout =
+        conf.getTimeDuration(YarnConfiguration.RM_DT_RENEWER_THREAD_TIMEOUT,
+            YarnConfiguration.DEFAULT_RM_DT_RENEWER_THREAD_TIMEOUT,
+            TimeUnit.MILLISECONDS);
+    tokenRenewerThreadRetryInterval = conf.getTimeDuration(
+        YarnConfiguration.RM_DT_RENEWER_THREAD_RETRY_INTERVAL,
+        YarnConfiguration.DEFAULT_RM_DT_RENEWER_THREAD_RETRY_INTERVAL,
+        TimeUnit.MILLISECONDS);
+    tokenRenewerThreadRetryMaxAttempts =
+        conf.getInt(YarnConfiguration.RM_DT_RENEWER_THREAD_RETRY_MAX_ATTEMPTS,
+            YarnConfiguration.DEFAULT_RM_DT_RENEWER_THREAD_RETRY_MAX_ATTEMPTS);
+
+    if (delegationTokenRenewerPoolTrackerFlag) {
+      renewerService.submit(new DelegationTokenRenewerPoolTracker());
+    }
+
-        renewerService.execute(new DelegationTokenRenewerRunnable(evt));
+        Future<?> future =
+            renewerService.submit(new DelegationTokenRenewerRunnable(evt));
+        futures.put(evt, future);
-                LOG.info(entry.getKey() + " ===> " + entry.getValue());
+                LOG.debug("Token conf key is {} and value is {}",
+                    entry.getKey(), entry.getValue());
-  
+
+  @VisibleForTesting
+  public void setDelegationTokenRenewerPoolTracker(boolean flag) {
+    delegationTokenRenewerPoolTrackerFlag = flag;
+  }
+
+  /**
+   * Create a timer task to retry the token renewer event which would be
+   * scheduled at defined intervals based on the configuration.
+   *
+   * @param evt
+   * @return Timer Task
+   */
+  private TimerTask getTimerTask(AbstractDelegationTokenRenewerAppEvent evt) {
+    return new TimerTask() {
+      @Override
+      public void run() {
+        LOG.info("Retrying token renewer thread for appid = {} and "
+            + "attempt is {}", evt.getApplicationId(),
+            evt.getAttempt());
+        evt.incrAttempt();
+
+        Collection<Token<?>> tokens =
+            evt.getCredentials().getAllTokens();
+        for (Token<?> token : tokens) {
+          DelegationTokenToRenew dttr = allTokens.get(token);
+          if (dttr != null) {
+            removeFailedDelegationToken(dttr);
+          }
+        }
+
+        DelegationTokenRenewerAppRecoverEvent event =
+            new DelegationTokenRenewerAppRecoverEvent(
+                evt.getApplicationId(), evt.getCredentials(),
+                evt.shouldCancelAtEnd(), evt.getUser(), evt.getTokenConf());
+        event.setAttempt(evt.getAttempt());
+        processDelegationTokenRenewerEvent(event);
+      }
+    };
+  }
+
+  /**
+   * Runnable class to set timeout for futures of all threads running in
+   * renewerService thread pool executor asynchronously.
+   *
+   * In case of timeout exception, retries would be attempted with defined
+   * intervals till no. of retry attempt reaches max attempt.
+   */
+  private final class DelegationTokenRenewerPoolTracker
+      implements Runnable {
+
+    DelegationTokenRenewerPoolTracker() {
+    }
+
+    /**
+     * Keep traversing <Future> of renewer pool threads and wait for specific
+     * timeout. In case of timeout exception, retry the event till no. of
+     * attempts reaches max attempts with specific interval.
+     */
+    @Override
+    public void run() {
+      while (true) {
+        for (Map.Entry<DelegationTokenRenewerEvent, Future<?>> entry : futures
+            .entrySet()) {
+          DelegationTokenRenewerEvent evt = entry.getKey();
+          Future<?> future = entry.getValue();
+          try {
+            future.get(tokenRenewerThreadTimeout, TimeUnit.MILLISECONDS);
+          } catch (TimeoutException e) {
+
+            // Cancel thread and retry the same event in case of timeout
+            if (future != null && !future.isDone() && !future.isCancelled()) {
+              future.cancel(true);
+              futures.remove(evt);
+              if (evt.getAttempt() < tokenRenewerThreadRetryMaxAttempts) {
+                renewalTimer.schedule(
+                    getTimerTask((AbstractDelegationTokenRenewerAppEvent) evt),
+                    tokenRenewerThreadRetryInterval);
+              } else {
+                LOG.info(
+                    "Exhausted max retry attempts {} in token renewer "
+                        + "thread for {}",
+                    tokenRenewerThreadRetryMaxAttempts, evt.getApplicationId());
+              }
+            }
+          } catch (Exception e) {
+            LOG.info("Problem in submitting renew tasks in token renewer "
+                + "thread.", e);
+          }
+        }
+      }
+    }
+  }
+
+
+    private Configuration getTokenConf() {
+      return tokenConf;
+    }
+    private int attempt = 1;
+
+    public void incrAttempt() {
+      attempt++;
+    }
+
+    public int getAttempt() {
+      return attempt;
+    }
+
+    public void setAttempt(int attempt) {
+      this.attempt = attempt;
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS55 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS23 INS31 INS31 INS31 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS42 INS9 INS21 INS21 INS21 INS25 INS42 INS39 INS42 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS65 INS42 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS43 INS76 INS74 INS7 INS7 INS7 INS42 INS8 INS7 INS66 INS66 INS42 INS66 INS42 INS14 INS66 INS66 INS66 INS66 INS65 INS42 INS61 INS42 INS41 INS42 INS34 INS21 INS41 INS39 INS42 INS21 INS42 INS43 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS43 INS1 INS66 INS66 INS66 INS9 INS8 INS42 INS37 INS42 INS7 INS42 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS40 INS40 INS32 INS42 INS31 INS70 INS42 INS22 INS42 INS42 INS42 INS14 INS60 INS78 INS83 INS39 INS42 INS8 INS44 INS32 INS8 INS52 INS42 INS43 INS74 INS59 INS32 INS42 INS21 INS21 INS60 INS70 INS60 INS21 INS21 INS74 INS42 INS42 INS42 INS60 INS60 INS54 INS42 INS43 INS76 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS32 INS74 INS59 INS44 INS42 INS8 INS43 INS59 INS32 INS32 INS43 INS43 INS74 INS43 INS59 INS74 INS59 INS8 INS12 INS12 INS42 UPD42 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS43 INS74 INS42 INS32 INS74 INS42 INS60 INS25 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS43 INS76 INS42 INS42 MOV32 INS43 INS76 INS42 MOV32 INS21 INS44 INS8 INS44 INS8 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS32 INS42 INS43 INS76 INS43 INS59 INS27 INS8 INS43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS32 INS27 INS38 INS21 INS21 INS25 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS38 INS32 INS32 INS32 INS27 INS8 INS8 INS45 INS45 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS32 UPD42 INS45 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS45 INS45 INS42 INS42 INS43 INS42 INS42 DEL45 DEL27