Merge r1555021 through r1558254 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1558303 13f79535-47bb-0310-9956-ffa450edef68

-    if (!name.startsWith(ROOT_QUEUE + ".")) {
-      name = ROOT_QUEUE + "." + name;
-    }
+    name = ensureRootPrefix(name);
+   * Make way for the given leaf queue if possible, by removing incompatible
+   * queues with no apps in them. Incompatibility could be due to
+   * (1) leafToCreate being currently being a parent, or (2) an existing leaf queue in
+   * the ancestry of leafToCreate.
+   * 
+   * We will never remove the root queue or the default queue in this way.
+   *
+   * @return true if we can create leafToCreate or it already exists.
+   */
+  private boolean removeEmptyIncompatibleQueues(String leafToCreate) {
+    leafToCreate = ensureRootPrefix(leafToCreate);
+
+    // Ensure leafToCreate is not root and doesn't have the default queue in its
+    // ancestry.
+    if (leafToCreate.equals(ROOT_QUEUE) ||
+        leafToCreate.startsWith(
+            ROOT_QUEUE + "." + YarnConfiguration.DEFAULT_QUEUE_NAME + ".")) {
+      return false;
+    }
+
+    FSQueue queue = queues.get(leafToCreate);
+    // Queue exists already.
+    if (queue != null) {
+      if (queue instanceof FSLeafQueue) {
+        // If it's an already existing leaf, we're ok.
+        return true;
+      } else {
+        // If it's an existing parent queue, remove it if it's empty.
+        return removeQueueIfEmpty(queue);
+      }
+    }
+
+    // Queue doesn't exist already. Check if the new queue would be created
+    // under an existing leaf queue. If so, try removing that leaf queue.
+    int sepIndex = leafToCreate.length();
+    sepIndex = leafToCreate.lastIndexOf('.', sepIndex-1);
+    while (sepIndex != -1) {
+      String prefixString = leafToCreate.substring(0, sepIndex);
+      FSQueue prefixQueue = queues.get(prefixString);
+      if (prefixQueue != null && prefixQueue instanceof FSLeafQueue) {
+        return removeQueueIfEmpty(prefixQueue);
+      }
+      sepIndex = leafToCreate.lastIndexOf('.', sepIndex-1);
+    }
+    return true;
+  }
+
+  /**
+   * Remove the queue if it and its descendents are all empty.
+   * @param queue
+   * @return true if removed, false otherwise
+   */
+  private boolean removeQueueIfEmpty(FSQueue queue) {
+    if (isEmpty(queue)) {
+      removeQueue(queue);
+      return true;
+    }
+    return false;
+  }
+  
+  /**
+   * Remove a queue and all its descendents.
+   */
+  private void removeQueue(FSQueue queue) {
+    if (queue instanceof FSLeafQueue) {
+      leafQueues.remove(queue);
+    } else {
+      List<FSQueue> childQueues = queue.getChildQueues();
+      while (!childQueues.isEmpty()) {
+        removeQueue(childQueues.get(0));
+      }
+    }
+    queues.remove(queue.getName());
+    queue.getParent().getChildQueues().remove(queue);
+  }
+  
+  /**
+   * Returns true if there are no applications, running or not, in the given
+   * queue or any of its descendents.
+   */
+  protected boolean isEmpty(FSQueue queue) {
+    if (queue instanceof FSLeafQueue) {
+      FSLeafQueue leafQueue = (FSLeafQueue)queue;
+      return queue.getNumRunnableApps() == 0 &&
+          leafQueue.getNonRunnableAppSchedulables().isEmpty();
+    } else {
+      for (FSQueue child : queue.getChildQueues()) {
+        if (!isEmpty(child)) {
+          return false;
+        }
+      }
+      return true;
+    }
+  }
+
+  /**
-    if (!name.startsWith(ROOT_QUEUE + ".") && !name.equals(ROOT_QUEUE)) {
-      name = ROOT_QUEUE + "." + name;
-    }
+    name = ensureRootPrefix(name);
-    if (!name.startsWith(ROOT_QUEUE + ".") && !name.equals(ROOT_QUEUE)) {
-      name = ROOT_QUEUE + "." + name;
-    }
+    name = ensureRootPrefix(name);
+  private String ensureRootPrefix(String name) {
+    if (!name.startsWith(ROOT_QUEUE + ".") && !name.equals(ROOT_QUEUE)) {
+      name = ROOT_QUEUE + "." + name;
+    }
+    return name;
+  }
+  
-      getLeafQueue(name, true);
+      if (removeEmptyIncompatibleQueues(name)) {
+        getLeafQueue(name, true);
+      }

MOV31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS8 MOV29 INS83 INS39 INS42 MOV44 INS8 UPD83 INS43 UPD42 INS44 MOV21 INS65 INS65 INS43 INS42 INS21 INS25 INS60 INS25 INS60 INS21 INS61 INS41 INS65 INS65 INS65 INS43 INS42 INS25 INS41 INS65 INS43 INS42 INS25 INS21 INS21 INS65 INS43 INS42 INS25 MOV21 MOV51 INS21 MOV51 INS42 INS43 INS42 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS7 INS27 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS7 INS27 INS8 INS9 INS66 INS42 INS66 INS42 INS32 INS8 INS9 INS66 INS42 INS62 INS8 INS8 INS32 INS32 INS66 INS66 INS42 INS62 INS8 INS8 INS7 INS42 INS42 INS8 INS32 INS42 INS32 INS32 INS32 INS41 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS32 INS42 INS32 INS42 INS38 INS60 INS60 INS25 INS21 INS42 INS42 INS21 INS41 INS42 INS43 INS21 INS60 INS61 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS60 INS41 INS70 INS41 INS32 INS42 INS32 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS9 INS42 INS42 INS42 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS13 INS27 INS34 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS32 INS9 INS42 INS32 INS74 INS59 INS38 INS8 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS27 INS44 INS32 INS8 INS9 INS42 INS42 INS42 INS42 INS32 MOV8 INS42 INS45 INS40 INS45 INS42 INS43 INS41 INS41 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS62 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS11 INS27 INS32 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS32 INS42 INS42 INS13 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS32 INS34 INS32 INS42 INS42 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS41 INS42 INS42 INS34 INS42 INS42 INS9 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL38 DEL8 DEL25 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL42 DEL45 DEL27 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL38 DEL27 DEL8 DEL25 DEL8 DEL39