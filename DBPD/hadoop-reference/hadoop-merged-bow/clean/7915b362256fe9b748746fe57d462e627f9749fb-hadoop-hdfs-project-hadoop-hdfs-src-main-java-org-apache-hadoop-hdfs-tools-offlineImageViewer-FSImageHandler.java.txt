HDFS-6169. Move the address in WebImageViewer. Contributed by Akira Ajisaka.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1585802 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.util.List;
+import java.util.Map;
+    String op = getOp(e);
+    try {
+      String path = getPath(e);
+      handleOperation(op, path, e);
+    } catch (Exception ex) {
+      notFoundResponse(e);
+      LOG.warn(ex.getMessage());
+    } finally {
+      e.getFuture().addListener(ChannelFutureListener.CLOSE);
+    }
+  }
+
+  /** return the op parameter in upper case */
+  private String getOp(MessageEvent e) {
+    Map<String, List<String>> parameters = getDecoder(e).getParameters();
+    if (parameters.containsKey("op")) {
+      return parameters.get("op").get(0).toUpperCase();
+    } else {
+      // return "" to avoid NPE
+      return "";
+    }
+  }
+
+  private String getPath(MessageEvent e) throws FileNotFoundException {
+    String path = getDecoder(e).getPath();
+    // trim "/webhdfs/v1" to keep compatibility with WebHDFS API
+    if (path.startsWith("/webhdfs/v1/")) {
+      return path.replaceFirst("/webhdfs/v1", "");
+    } else {
+      throw new FileNotFoundException("Path: " + path + " should " +
+          "start with \"/webhdfs/v1/\"");
+    }
+  }
+
+  private QueryStringDecoder getDecoder(MessageEvent e) {
+    return new QueryStringDecoder(request.getUri());
+  }
+
+  private void handleOperation(String op, String path, MessageEvent e)
+      throws IOException {
+    HttpRequest request = (HttpRequest) e.getMessage();
+    HttpResponse response = new DefaultHttpResponse(
+        HttpVersion.HTTP_1_1, HttpResponseStatus.OK);
+    response.setHeader(HttpHeaders.Names.CONTENT_TYPE,
+        "application/json");
+    String content = null;
+
-      String uri = request.getUri();
-      QueryStringDecoder decoder = new QueryStringDecoder(uri);
-
-      String op = "null";
-      if (decoder.getParameters().containsKey("op")) {
-        op = decoder.getParameters().get("op").get(0).toUpperCase();
-      }
-      HttpResponse response = new DefaultHttpResponse(
-          HttpVersion.HTTP_1_1, HttpResponseStatus.OK);
-      String json = null;
-
-        try {
-          json = loader.listStatus(decoder.getPath());
-          response.setStatus(HttpResponseStatus.OK);
-          response.setHeader(HttpHeaders.Names.CONTENT_TYPE,
-              "application/json");
-          HttpHeaders.setContentLength(response, json.length());
-        } catch (Exception ex) {
-          LOG.warn(ex.getMessage());
-          response.setStatus(HttpResponseStatus.NOT_FOUND);
-        }
+        content = loader.listStatus(path);
-
-      e.getChannel().write(response);
-      if (json != null) {
-        e.getChannel().write(json);
-      }
-      LOG.info(response.getStatus().getCode() + " method=GET op=" + op
-          + " target=" + decoder.getPath());
-      HttpResponse response = new DefaultHttpResponse(HttpVersion.HTTP_1_1,
-          HttpResponseStatus.METHOD_NOT_ALLOWED);
-      e.getChannel().write(response);
-      LOG.info(response.getStatus().getCode() + " method="
-          + request.getMethod().getName());
+      response.setStatus(HttpResponseStatus.METHOD_NOT_ALLOWED);
-    e.getFuture().addListener(ChannelFutureListener.CLOSE);
+
+    if (content != null) {
+      HttpHeaders.setContentLength(response, content.length());
+    }
+    e.getChannel().write(response);
+
+    if (content != null) {
+      e.getChannel().write(content);
+    }
+
+    LOG.info(response.getStatus().getCode() + " method="
+        + request.getMethod().getName() + " op=" + op + " target=" + path);
+  }
+
+  private void notFoundResponse(MessageEvent e) {
+    HttpResponse response = new DefaultHttpResponse(
+        HttpVersion.HTTP_1_1, HttpResponseStatus.NOT_FOUND);
+    e.getChannel().write(response);

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 MOV78 INS83 INS39 INS42 MOV44 INS44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 MOV43 INS42 INS44 INS8 UPD83 UPD42 INS44 INS44 INS43 INS83 INS39 INS42 INS44 MOV8 INS43 INS42 INS60 INS54 INS65 INS42 INS43 INS42 INS60 INS25 INS42 INS43 INS42 INS42 INS60 INS25 INS43 INS42 INS60 INS41 INS43 INS42 INS43 INS42 INS42 MOV60 MOV21 INS60 INS25 INS25 MOV21 MOV25 MOV21 INS43 INS42 INS42 MOV43 INS59 INS8 MOV12 INS8 INS66 INS42 INS74 INS59 INS32 INS8 INS8 INS42 MOV43 INS59 INS32 INS8 INS8 INS42 INS43 INS59 MOV14 INS42 INS42 INS43 MOV59 MOV27 INS8 INS8 INS27 INS8 INS42 INS42 INS32 INS60 INS21 MOV21 MOV21 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS45 INS41 INS41 INS42 INS32 INS42 INS42 INS45 INS41 INS53 INS42 INS42 INS11 MOV32 INS42 UPD42 INS25 MOV21 INS42 INS33 MOV21 UPD42 INS42 INS42 MOV43 INS59 INS32 INS42 INS42 INS43 INS43 INS32 INS42 INS32 INS45 INS32 INS42 INS32 INS14 INS43 INS32 MOV32 INS8 MOV8 INS45 INS42 INS45 INS42 UPD40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS27 INS42 INS42 INS42 MOV21 UPD40 UPD42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS34 INS42 INS45 INS42 INS45 INS45 UPD42 INS42 INS42 INS45 UPD42 UPD42 MOV42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL34 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL60 DEL8 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25