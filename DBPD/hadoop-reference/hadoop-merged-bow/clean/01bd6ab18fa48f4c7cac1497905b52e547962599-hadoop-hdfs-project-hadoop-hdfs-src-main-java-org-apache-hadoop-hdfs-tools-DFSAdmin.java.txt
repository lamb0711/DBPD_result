HDFS-12935. Get ambiguous result for DFSAdmin command in HA mode when only one namenode is up. Contributed by Jianfei Jiang.

-import org.apache.hadoop.fs.FsTracer;
+import org.apache.hadoop.io.MultipleIOException;
+      List<IOException> exceptions = new ArrayList<>();
-        boolean saved = proxy.getProxy().saveNamespace(timeWindow, txGap);
-        if (saved) {
-          System.out.println("Save namespace successful for " +
+        try{
+          boolean saved = proxy.getProxy().saveNamespace(timeWindow, txGap);
+          if (saved) {
+            System.out.println("Save namespace successful for " +
+                proxy.getAddress());
+          } else {
+            System.out.println("No extra checkpoint has been made for "
+                + proxy.getAddress());
+          }
+        }catch (IOException ioe){
+          System.out.println("Save namespace failed for " +
-        } else {
-          System.out.println("No extra checkpoint has been made for "
-              + proxy.getAddress());
+          exceptions.add(ioe);
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);
+      }
+      List<IOException> exceptions = new ArrayList<>();
-        Boolean res = proxy.getProxy().restoreFailedStorage(arg);
-        System.out.println("restoreFailedStorage is set to " + res + " for "
-            + proxy.getAddress());
+        try{
+          Boolean res = proxy.getProxy().restoreFailedStorage(arg);
+          System.out.println("restoreFailedStorage is set to " + res + " for "
+              + proxy.getAddress());
+        } catch (IOException ioe){
+          System.out.println("restoreFailedStorage failed for "
+              + proxy.getAddress());
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);
+      List<IOException> exceptions = new ArrayList<>();
-        proxy.getProxy().refreshNodes();
-        System.out.println("Refresh nodes successful for " +
-            proxy.getAddress());
+        try{
+          proxy.getProxy().refreshNodes();
+          System.out.println("Refresh nodes successful for " +
+              proxy.getAddress());
+        }catch (IOException ioe){
+          System.out.println("Refresh nodes failed for " +
+              proxy.getAddress());
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);
-    Configuration dfsConf = dfs.getConf();
-    URI dfsUri = dfs.getUri();
-    boolean isHaEnabled = HAUtilClient.isLogicalUri(dfsConf, dfsUri);
-
-    if (isHaEnabled) {
-      ProxyAndInfo<ClientProtocol> proxy = NameNodeProxies.createNonHAProxy(
-          dfsConf, HAUtil.getAddressOfActive(getDFS()), ClientProtocol.class,
-          UserGroupInformation.getCurrentUser(), false);
-      openFilesRemoteIterator = new OpenFilesIterator(proxy.getProxy(),
-          FsTracer.get(dfsConf), openFilesTypes, path);
-    } else {
+    try{
+      printOpenFiles(openFilesRemoteIterator);
+    } catch (IOException ioe){
+      System.out.println("List open files failed.");
+      throw ioe;
-    printOpenFiles(openFilesRemoteIterator);
-   * Command to ask the namenode to set the balancer bandwidth for all of the
-   * datanodes.
+   * Command to ask the active namenode to set the balancer bandwidth.
-    Configuration dfsConf = dfs.getConf();
-    URI dfsUri = dfs.getUri();
-    boolean isHaEnabled = HAUtilClient.isLogicalUri(dfsConf, dfsUri);
-
-    if (isHaEnabled) {
-      String nsId = dfsUri.getHost();
-      List<ProxyAndInfo<ClientProtocol>> proxies =
-          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,
-          nsId, ClientProtocol.class);
-      for (ProxyAndInfo<ClientProtocol> proxy : proxies) {
-        proxy.getProxy().setBalancerBandwidth(bandwidth);
-        System.out.println("Balancer bandwidth is set to " + bandwidth +
-            " for " + proxy.getAddress());
-      }
-    } else {
+    try{
+    } catch (IOException ioe){
+      System.err.println("Balancer bandwidth is set failed.");
+      throw ioe;
+      List<IOException> exceptions = new ArrayList<>();
-        proxy.getProxy().finalizeUpgrade();
-        System.out.println("Finalize upgrade successful for " +
-            proxy.getAddress());
+        try{
+          proxy.getProxy().finalizeUpgrade();
+          System.out.println("Finalize upgrade successful for " +
+              proxy.getAddress());
+        }catch (IOException ioe){
+          System.out.println("Finalize upgrade failed for " +
+              proxy.getAddress());
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);
+      List<IOException> exceptions = new ArrayList<>();
-        proxy.getProxy().metaSave(pathname);
-        System.out.println("Created metasave file " + pathname + " in the log "
-            + "directory of namenode " + proxy.getAddress());
+        try{
+          proxy.getProxy().metaSave(pathname);
+          System.out.println("Created metasave file " + pathname
+              + " in the log directory of namenode " + proxy.getAddress());
+        } catch (IOException ioe){
+          System.out.println("Created metasave file " + pathname
+              + " in the log directory of namenode " + proxy.getAddress()
+              + " failed");
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);
+      List<IOException> exceptions = new ArrayList<>();
-        proxy.getProxy().refreshServiceAcl();
-        System.out.println("Refresh service acl successful for "
-            + proxy.getAddress());
+        try{
+          proxy.getProxy().refreshServiceAcl();
+          System.out.println("Refresh service acl successful for "
+              + proxy.getAddress());
+        }catch (IOException ioe){
+          System.out.println("Refresh service acl failed for "
+              + proxy.getAddress());
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()) {
+        throw MultipleIOException.createIOException(exceptions);
+      List<IOException> exceptions = new ArrayList<>();
-        proxy.getProxy().refreshUserToGroupsMappings();
-        System.out.println("Refresh user to groups mapping successful for "
-            + proxy.getAddress());
+        try{
+          proxy.getProxy().refreshUserToGroupsMappings();
+          System.out.println("Refresh user to groups mapping successful for "
+              + proxy.getAddress());
+        }catch (IOException ioe){
+          System.out.println("Refresh user to groups mapping failed for "
+              + proxy.getAddress());
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);
+      List<IOException> exceptions = new ArrayList<>();
-        proxy.getProxy().refreshSuperUserGroupsConfiguration();
-        System.out.println("Refresh super user groups configuration " +
-            "successful for " + proxy.getAddress());
+        try{
+          proxy.getProxy().refreshSuperUserGroupsConfiguration();
+          System.out.println("Refresh super user groups configuration " +
+              "successful for " + proxy.getAddress());
+        }catch (IOException ioe){
+          System.out.println("Refresh super user groups configuration " +
+              "failed for " + proxy.getAddress());
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);
+      List<IOException> exceptions = new ArrayList<>();
-        proxy.getProxy().refreshCallQueue();
-        System.out.println("Refresh call queue successful for "
-            + proxy.getAddress());
+        try{
+          proxy.getProxy().refreshCallQueue();
+          System.out.println("Refresh call queue successful for "
+              + proxy.getAddress());
+        }catch (IOException ioe){
+          System.out.println("Refresh call queue failed for "
+              + proxy.getAddress());
+          exceptions.add(ioe);
+        }
+      }
+      if(!exceptions.isEmpty()){
+        throw MultipleIOException.createIOException(exceptions);

MOV26 UPD40 INS54 INS54 MOV8 INS12 UPD66 MOV8 INS12 INS60 INS25 INS60 INS25 INS60 INS25 MOV21 INS44 INS8 INS44 INS8 INS60 INS25 INS60 MOV70 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS60 INS25 INS74 INS59 INS8 INS38 INS8 INS74 INS59 INS8 INS38 INS8 INS74 INS59 INS8 INS38 INS8 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS74 INS59 INS8 INS38 INS8 INS74 INS59 MOV44 INS8 INS38 INS8 INS74 INS59 INS8 INS38 INS8 INS74 INS59 INS8 INS38 INS8 INS74 INS59 INS8 INS38 INS8 INS74 INS59 INS8 INS38 INS8 INS43 INS43 INS42 INS14 INS54 INS32 INS53 INS43 INS43 INS42 INS14 INS54 INS32 INS53 INS43 INS43 INS42 INS14 INS54 INS32 INS53 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS32 INS42 INS43 INS43 INS42 INS14 INS54 INS32 INS53 UPD43 MOV43 UPD43 MOV43 INS42 INS14 MOV42 INS54 INS32 INS53 INS43 INS43 INS42 INS14 INS54 INS32 INS53 INS43 INS43 INS42 INS14 INS54 INS32 INS53 INS43 INS43 INS42 INS14 INS54 INS32 INS53 INS43 INS43 INS42 INS14 INS54 INS32 INS53 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 INS40 UPD42 MOV42 INS45 INS40 UPD42 MOV42 INS45 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 UPD42 UPD42 INS74 MOV43 MOV43 MOV8 INS12 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 INS42 INS42 INS74 MOV8 INS12 INS42 INS42 INS32 INS43 INS44 INS8 INS42 INS42 INS42 INS43 INS44 INS8 INS42 INS42 INS42 INS43 INS44 INS8 INS42 INS42 INS42 INS43 INS44 INS8 INS42 INS42 INS42 INS43 INS44 INS8 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS44 INS8 INS42 INS42 INS42 INS43 INS44 INS8 INS42 INS42 INS42 INS43 INS44 INS8 INS42 INS42 INS42 INS43 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 MOV42 UPD42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 UPD45 UPD42 UPD45 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS42 INS45 MOV32 INS45 INS45 INS32 INS45 INS32 INS45 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL66 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL40 DEL45 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL70