HDFS-11902. [READ] Merge BlockFormatProvider and FileRegionProvider.

+import org.apache.hadoop.hdfs.server.common.blockaliasmap.BlockAliasMap;
+import org.apache.hadoop.hdfs.server.common.blockaliasmap.impl.TextFileRegionAliasMap;
+import org.apache.hadoop.hdfs.server.common.BlockAlias;
-  private final BlockProvider blockProvider;
+  private RwLock lock;
+  private BlockManager bm;
+  private boolean hasDNs = false;
+  private BlockAliasMap aliasMap;
+
-      blockProvider = null;
+      aliasMap = null;
-    // load block reader into storage
-    Class<? extends BlockProvider> fmt = conf.getClass(
-        DFSConfigKeys.DFS_NAMENODE_BLOCK_PROVIDER_CLASS,
-        BlockFormatProvider.class, BlockProvider.class);
+    this.bm = bm;
+    this.lock = lock;
-    blockProvider = ReflectionUtils.newInstance(fmt, conf);
-    blockProvider.init(lock, bm, providedStorageInfo);
-    LOG.info("Loaded block provider class: " +
-        blockProvider.getClass() + " storage: " + providedStorageInfo);
+    // load block reader into storage
+    Class<? extends BlockAliasMap> aliasMapClass = conf.getClass(
+            DFSConfigKeys.DFS_PROVIDED_ALIASMAP_CLASS,
+            TextFileRegionAliasMap.class, BlockAliasMap.class);
+    aliasMap = ReflectionUtils.newInstance(aliasMapClass, conf);
+
+    LOG.info("Loaded alias map class: " +
+        aliasMap.getClass() + " storage: " + providedStorageInfo);
-        // poll service, initiate
-        blockProvider.start(context);
+        processProvidedStorageReport(context);
+  private void processProvidedStorageReport(BlockReportContext context)
+      throws IOException {
+    assert lock.hasWriteLock() : "Not holding write lock";
+    if (hasDNs) {
+      return;
+    }
+    if (providedStorageInfo.getBlockReportCount() == 0) {
+      LOG.info("Calling process first blk report from storage: "
+          + providedStorageInfo);
+      // first pass; periodic refresh should call bm.processReport
+      bm.processFirstBlockReport(providedStorageInfo,
+          new ProvidedBlockList(aliasMap.getReader(null).iterator()));
+    } else {
+      bm.processReport(providedStorageInfo,
+          new ProvidedBlockList(aliasMap.getReader(null).iterator()),
+          context);
+    }
+    hasDNs = true;
+  }
+
-    if (providedDescriptor != null) {
+    if (providedEnabled) {
+      assert lock.hasWriteLock() : "Not holding write lock";
-        blockProvider.stop();
+        hasDNs = false;
-    private final Iterator<Block> inner;
+    private final Iterator<BlockAlias> inner;
-    ProvidedBlockList(Iterator<Block> inner) {
+    ProvidedBlockList(Iterator<BlockAlias> inner) {
-          return new BlockReportReplica(inner.next());
+          return new BlockReportReplica(inner.next().getBlock());

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 MOV83 INS43 INS59 UPD83 MOV83 UPD43 MOV43 MOV59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 UPD42 UPD42 INS42 INS9 INS42 INS42 INS21 INS21 INS43 INS42 INS42 INS6 INS25 INS25 INS21 UPD74 MOV74 INS7 INS7 UPD74 INS42 INS32 INS45 INS42 INS8 INS27 INS8 INS8 INS7 INS42 UPD43 UPD74 MOV74 INS22 INS42 INS22 INS42 UPD76 UPD42 UPD42 INS42 INS42 INS41 INS32 INS34 INS21 INS21 INS21 INS42 INS9 INS6 UPD42 UPD43 INS52 INS42 INS52 INS42 UPD43 UPD40 UPD42 UPD45 INS42 INS42 INS32 INS32 INS32 INS32 INS45 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 UPD42 INS45 INS42 INS43 INS32 INS43 INS32 INS7 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS33 INS42 INS42 INS33 INS32 MOV32 INS42 DEL23 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32