HDFS-9494. Parallel optimization of DFSStripedOutputStream#flushAllInternals. Contributed by Gao Rui.

+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Callable;
+import java.util.concurrent.CompletionService;
+import java.util.concurrent.ExecutorCompletionService;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
-  /** Size of each striping cell, must be a multiple of bytesPerChecksum */
+  // Size of each striping cell, must be a multiple of bytesPerChecksum.
+  private ExecutorService flushAllExecutor;
+  private CompletionService<Void> flushAllExecutorCompletionService;
+    flushAllExecutor = Executors.newFixedThreadPool(numAllBlocks);
+    flushAllExecutorCompletionService = new
+        ExecutorCompletionService<>(flushAllExecutor);
-  private void handleStreamerFailure(String err, Exception e)
+  private void handleCurrentStreamerFailure(String err, Exception e)
-    LOG.warn("Failed: " + err + ", " + this, e);
-    getCurrentStreamer().getErrorState().setInternalError();
-    getCurrentStreamer().close(true);
-    checkStreamers();
+    handleStreamerFailure(err, e, getCurrentStreamer());
+  }
+
+  private void handleStreamerFailure(String err, Exception e,
+      StripedDataStreamer streamer) throws IOException {
+    LOG.warn("Failed: " + err + ", " + this, e);
+    streamer.getErrorState().setInternalError();
+    streamer.close(true);
+    checkStreamers();
+    currentPackets[streamer.getIndex()] = null;
-        handleStreamerFailure("offset=" + offset + ", length=" + len, e);
+        handleCurrentStreamerFailure("offset=" + offset + ", length=" + len, e);
-            handleStreamerFailure("force=" + force, e);
+            handleCurrentStreamerFailure("force=" + force, e);
-        handleStreamerFailure("oldBytes=" + oldBytes + ", len=" + len, e);
+        handleCurrentStreamerFailure("oldBytes=" + oldBytes + ", len=" + len,
+            e);
+      // shutdown executor of flushAll tasks
+      flushAllExecutor.shutdownNow();
-          handleStreamerFailure("enqueueAllCurrentPackets, i=" + i, e);
+          handleCurrentStreamerFailure("enqueueAllCurrentPackets, i=" + i, e);
+    Map<Future<Void>, Integer> flushAllFuturesMap = new HashMap<>();
+    Future<Void> future = null;
-          flushInternal();
-        } catch(Exception e) {
-          handleStreamerFailure("flushInternal " + s, e);
+          final long toWaitFor = flushInternalWithoutWaitingAck();
+          future = flushAllExecutorCompletionService.submit(
+              new Callable<Void>() {
+                @Override
+                public Void call() throws Exception {
+                  s.waitForAckedSeqno(toWaitFor);
+                  return null;
+                }
+              });
+          flushAllFuturesMap.put(future, i);
+        } catch (Exception e) {
+          handleCurrentStreamerFailure("flushInternal " + s, e);
+    for (int i = 0; i < flushAllFuturesMap.size(); i++) {
+      try {
+        future = flushAllExecutorCompletionService.take();
+        future.get();
+      } catch (InterruptedException ie) {
+        throw DFSUtilClient.toInterruptedIOException(
+            "Interrupted during waiting all streamer flush, ", ie);
+      } catch (ExecutionException ee) {
+        LOG.warn(
+            "Caught ExecutionException while waiting all streamer flush, ", ee);
+        StripedDataStreamer s = streamers.get(flushAllFuturesMap.get(future));
+        handleStreamerFailure("flushInternal " + s,
+            (Exception) ee.getCause(), s);
+      }
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS21 INS21 INS43 INS42 INS43 INS42 INS42 MOV21 INS21 INS43 INS42 INS21 INS60 INS60 MOV60 MOV24 MOV21 INS24 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS7 INS74 INS59 INS74 INS59 INS58 INS27 INS37 INS8 INS42 INS32 INS42 INS14 INS42 INS42 INS42 MOV32 INS42 INS2 INS33 INS21 INS43 INS74 INS43 INS42 INS14 INS43 INS43 INS42 INS33 INS39 INS59 INS42 INS32 INS42 INS54 INS42 INS42 INS42 INS74 INS42 UPD42 MOV42 INS42 INS32 INS32 INS42 INS43 INS43 INS42 INS74 INS42 INS42 INS42 INS34 INS42 INS42 INS8 INS12 INS12 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS21 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS7 INS32 INS43 INS42 INS53 INS43 INS42 INS21 INS60 INS21 INS60 INS21 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS32 UPD42 UPD42 INS83 INS39 INS59 INS7 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS27 INS11 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS43 INS32 UPD42 INS42 INS42 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS1 UPD42 INS43 INS43 INS31 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS21 INS41 INS32 INS33 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL32 DEL8