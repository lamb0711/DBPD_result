HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.lang.WordUtils;
+import org.apache.hadoop.conf.Configured;
+import org.apache.hadoop.fs.permission.FsPermission;
+import org.apache.hadoop.hdfs.protocol.AddPathBasedCacheDirectiveException;
+import org.apache.hadoop.hdfs.protocol.CachePoolInfo;
+import org.apache.hadoop.hdfs.protocol.RemovePathBasedCacheDescriptorException;
+import org.apache.hadoop.hdfs.server.namenode.CachePool;
+import org.apache.hadoop.ipc.RemoteException;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.util.Tool;
+
+import com.google.common.base.Joiner;
-public class CacheAdmin {
-  private static Configuration conf = new Configuration();
+public class CacheAdmin extends Configured implements Tool {
-  private static DistributedFileSystem getDFS() throws IOException {
+  /**
+   * Maximum length for printed lines
+   */
+  private static final int MAX_LINE_WIDTH = 80;
+
+  public CacheAdmin() {
+    this(null);
+  }
+
+  public CacheAdmin(Configuration conf) {
+    super(conf);
+  }
+
+  @Override
+  public int run(String[] args) throws IOException {
+    if (args.length == 0) {
+      printUsage(false);
+      return 1;
+    }
+    Command command = determineCommand(args[0]);
+    if (command == null) {
+      System.err.println("Can't understand command '" + args[0] + "'");
+      if (!args[0].startsWith("-")) {
+        System.err.println("Command names must start with dashes.");
+      }
+      printUsage(false);
+      return 1;
+    }
+    List<String> argsList = new LinkedList<String>();
+    for (int j = 1; j < args.length; j++) {
+      argsList.add(args[j]);
+    }
+    return command.run(getConf(), argsList);
+  }
+
+  public static void main(String[] argsArray) throws IOException {
+    CacheAdmin cacheAdmin = new CacheAdmin(new Configuration());
+    System.exit(cacheAdmin.run(argsArray));
+  }
+
+  private static DistributedFileSystem getDFS(Configuration conf)
+      throws IOException {
+  /**
+   * NN exceptions contain the stack trace as part of the exception message.
+   * When it's a known error, pretty-print the error and squish the stack trace.
+   */
+  private static String prettifyException(Exception e) {
+    return e.getClass().getSimpleName() + ": "
+        + e.getLocalizedMessage().split("\n")[0];
+  }
+
+  private static TableListing getOptionDescriptionListing() {
+    TableListing listing = new TableListing.Builder()
+    .addField("").addField("", true)
+    .wrapWidth(MAX_LINE_WIDTH).hideHeaders().build();
+    return listing;
+  }
+
-    int run(List<String> args) throws IOException;
+    int run(Configuration conf, List<String> args) throws IOException;
-      return "-addPath";
+      return "-addDirective";
-      return "[-addPath -path <path> -pool <pool-name>]\n";
+      return "[" + getName() + " -path <path> -pool <pool-name>]\n";
-      return getShortUsage() +
-        "Adds a new PathBasedCache directive.\n" +
-        "<path>  The new path to cache.\n" + 
-        "        Paths may be either directories or files.\n" +
-        "<pool-name> The pool which this directive will reside in.\n" + 
-        "        You must have write permission on the cache pool in order\n" +
-        "        to add new entries to it.\n";
+      TableListing listing = getOptionDescriptionListing();
+      listing.addRow("<path>", "A path to cache. The path can be " +
+          "a directory or a file.");
+      listing.addRow("<pool-name>", "The pool to which the directive will be " +
+          "added. You must have write permission on the cache pool "
+          + "in order to add new directives.");
+      return getShortUsage() + "\n" +
+        "Add a new PathBasedCache directive.\n\n" +
+        listing.toString();
-    public int run(List<String> args) throws IOException {
+    public int run(Configuration conf, List<String> args) throws IOException {
-      DistributedFileSystem dfs = getDFS();
+      DistributedFileSystem dfs = getDFS(conf);
-      PathBasedCacheDescriptor descriptor =
-          dfs.addPathBasedCacheDirective(directive);
-      System.out.println("Added PathBasedCache entry "
-          + descriptor.getEntryId());
+      try {
+        PathBasedCacheDescriptor descriptor =
+            dfs.addPathBasedCacheDirective(directive);
+        System.out.println("Added PathBasedCache entry "
+            + descriptor.getEntryId());
+      } catch (AddPathBasedCacheDirectiveException e) {
+        System.err.println(prettifyException(e));
+        return 2;
+      }
+
-      return "-removePath";
+      return "-removeDirective";
-      return "[-removePath <id>]\n";
+      return "[" + getName() + " <id>]\n";
-      return getShortUsage() +
-        "Remove a cache directive.\n" +
-        "<id>    The id of the cache directive to remove.\n" + 
-        "        You must have write permission on the pool where the\n" +
-        "        directive resides in order to remove it.  To see a list\n" +
-        "        of PathBasedCache directive IDs, use the -list command.\n";
+      TableListing listing = getOptionDescriptionListing();
+      listing.addRow("<id>", "The id of the cache directive to remove. " + 
+        "You must have write permission on the pool of the " +
+        "directive in order to remove it.  To see a list " +
+        "of PathBasedCache directive IDs, use the -list command.");
+      return getShortUsage() + "\n" +
+        "Remove a cache directive.\n\n" +
+        listing.toString();
-    public int run(List<String> args) throws IOException {
+    public int run(Configuration conf, List<String> args) throws IOException {
-      long id = Long.valueOf(idString);
+      long id;
+      try {
+        id = Long.valueOf(idString);
+      } catch (NumberFormatException e) {
+        System.err.println("Invalid directive ID " + idString + ": expected " +
+            "a numeric value.");
+        return 1;
+      }
+        System.err.println("Usage is " + getShortUsage());
-      DistributedFileSystem dfs = getDFS();
-      dfs.removePathBasedCacheDescriptor(new PathBasedCacheDescriptor(id, null,
-          null));
-      System.out.println("Removed PathBasedCache directive " + id);
+      DistributedFileSystem dfs = getDFS(conf);
+      try {
+        dfs.getClient().removePathBasedCacheDescriptor(id);
+        System.out.println("Removed PathBasedCache directive " + id);
+      } catch (RemovePathBasedCacheDescriptorException e) {
+        System.err.println(prettifyException(e));
+        return 2;
+      }
-      return "-listPaths";
+      return "-listDirectives";
-      return "[-listPaths [-path <path>] [-pool <pool-name>]]\n";
+      return "[" + getName() + " [-path <path>] [-pool <pool>]]\n";
-      return getShortUsage() +
-        "List PathBasedCache directives.\n" +
-        "<path> If a -path argument is given, we will list only\n" +
-        "        PathBasedCache entries with this path.\n" +
-        "        Note that if there is a PathBasedCache directive for <path>\n" +
-        "        in a cache pool that we don't have read access for, it\n" + 
-        "        not be listed.  If there are unreadable cache pools, a\n" +
-        "        message will be printed.\n" +
-        "        may be incomplete.\n" +
-        "<pool-name> If a -pool argument is given, we will list only path\n" +
-        "        cache entries in that pool.\n";
+      TableListing listing = getOptionDescriptionListing();
+      listing.addRow("<path>", "List only " +
+          "PathBasedCache directives with this path. " +
+          "Note that if there is a PathBasedCache directive for <path> " +
+          "in a cache pool that we don't have read access for, it " + 
+          "will not be listed.");
+      listing.addRow("<pool>", "List only path cache directives in that pool.");
+      return getShortUsage() + "\n" +
+        "List PathBasedCache directives.\n\n" +
+        listing.toString();
-    public int run(List<String> args) throws IOException {
+    public int run(Configuration conf, List<String> args) throws IOException {
-          addField("ID", Justification.RIGHT).
+          addField("ID", Justification.LEFT).
-      DistributedFileSystem dfs = getDFS();
+      DistributedFileSystem dfs = getDFS(conf);
-        System.out.print(tableListing.build());
+        System.out.print(tableListing);
+  private static class AddCachePoolCommand implements Command {
+
+    private static final String NAME = "-addPool";
+
+    @Override
+    public String getName() {
+      return NAME;
+    }
+
+    @Override
+    public String getShortUsage() {
+      return "[" + NAME + " <name> [-owner <owner>] " +
+          "[-group <group>] [-mode <mode>] [-weight <weight>]]\n";
+    }
+
+    @Override
+    public String getLongUsage() {
+      TableListing listing = getOptionDescriptionListing();
+
+      listing.addRow("<name>", "Name of the new pool.");
+      listing.addRow("<owner>", "Username of the owner of the pool. " +
+          "Defaults to the current user.");
+      listing.addRow("<group>", "Group of the pool. " +
+          "Defaults to the primary group name of the current user.");
+      listing.addRow("<mode>", "UNIX-style permissions for the pool. " +
+          "Permissions are specified in octal, e.g. 0755. " +
+          "By default, this is set to " + String.format("0%03o",
+          FsPermission.getCachePoolDefault().toShort()));
+      listing.addRow("<weight>", "Weight of the pool. " +
+          "This is a relative measure of the importance of the pool used " +
+          "during cache resource management. By default, it is set to " +
+          CachePool.DEFAULT_WEIGHT);
+
+      return getShortUsage() + "\n" +
+          "Add a new cache pool.\n\n" + 
+          listing.toString();
+    }
+
+    @Override
+    public int run(Configuration conf, List<String> args) throws IOException {
+      String owner = StringUtils.popOptionWithArgument("-owner", args);
+      if (owner == null) {
+        owner = UserGroupInformation.getCurrentUser().getShortUserName();
+      }
+      String group = StringUtils.popOptionWithArgument("-group", args);
+      if (group == null) {
+        group = UserGroupInformation.getCurrentUser().getGroupNames()[0];
+      }
+      String modeString = StringUtils.popOptionWithArgument("-mode", args);
+      int mode;
+      if (modeString == null) {
+        mode = FsPermission.getCachePoolDefault().toShort();
+      } else {
+        mode = Integer.parseInt(modeString, 8);
+      }
+      String weightString = StringUtils.popOptionWithArgument("-weight", args);
+      int weight;
+      if (weightString == null) {
+        weight = CachePool.DEFAULT_WEIGHT;
+      } else {
+        weight = Integer.parseInt(weightString);
+      }
+      String name = StringUtils.popFirstNonOption(args);
+      if (name == null) {
+        System.err.println("You must specify a name when creating a " +
+            "cache pool.");
+        return 1;
+      }
+      if (!args.isEmpty()) {
+        System.err.print("Can't understand arguments: " +
+          Joiner.on(" ").join(args) + "\n");
+        System.err.println("Usage is " + getShortUsage());
+        return 1;
+      }
+      DistributedFileSystem dfs = getDFS(conf);
+      CachePoolInfo info = new CachePoolInfo(name).
+          setOwnerName(owner).
+          setGroupName(group).
+          setMode(new FsPermission((short)mode)).
+          setWeight(weight);
+      try {
+        dfs.addCachePool(info);
+      } catch (IOException e) {
+        throw new RemoteException(e.getClass().getName(), e.getMessage());
+      }
+      System.out.println("Successfully added cache pool " + name + ".");
+      return 0;
+    }
+  }
+
+  private static class ModifyCachePoolCommand implements Command {
+
+    @Override
+    public String getName() {
+      return "-modifyPool";
+    }
+
+    @Override
+    public String getShortUsage() {
+      return "[" + getName() + " <name> [-owner <owner>] " +
+          "[-group <group>] [-mode <mode>] [-weight <weight>]]\n";
+    }
+
+    @Override
+    public String getLongUsage() {
+      TableListing listing = getOptionDescriptionListing();
+
+      listing.addRow("<name>", "Name of the pool to modify.");
+      listing.addRow("<owner>", "Username of the owner of the pool");
+      listing.addRow("<group>", "Groupname of the group of the pool.");
+      listing.addRow("<mode>", "Unix-style permissions of the pool in octal.");
+      listing.addRow("<weight>", "Weight of the pool.");
+
+      return getShortUsage() + "\n" +
+          WordUtils.wrap("Modifies the metadata of an existing cache pool. " +
+          "See usage of " + AddCachePoolCommand.NAME + " for more details",
+          MAX_LINE_WIDTH) + "\n\n" +
+          listing.toString();
+    }
+
+    @Override
+    public int run(Configuration conf, List<String> args) throws IOException {
+      String owner = StringUtils.popOptionWithArgument("-owner", args);
+      String group = StringUtils.popOptionWithArgument("-group", args);
+      String modeString = StringUtils.popOptionWithArgument("-mode", args);
+      Integer mode = (modeString == null) ?
+          null : Integer.parseInt(modeString, 8);
+      String weightString = StringUtils.popOptionWithArgument("-weight", args);
+      Integer weight = (weightString == null) ?
+          null : Integer.parseInt(weightString);
+      String name = StringUtils.popFirstNonOption(args);
+      if (name == null) {
+        System.err.println("You must specify a name when creating a " +
+            "cache pool.");
+        return 1;
+      }
+      if (!args.isEmpty()) {
+        System.err.print("Can't understand arguments: " +
+          Joiner.on(" ").join(args) + "\n");
+        System.err.println("Usage is " + getShortUsage());
+        return 1;
+      }
+      boolean changed = false;
+      CachePoolInfo info = new CachePoolInfo(name);
+      if (owner != null) {
+        info.setOwnerName(owner);
+        changed = true;
+      }
+      if (group != null) {
+        info.setGroupName(group);
+        changed = true;
+      }
+      if (mode != null) {
+        info.setMode(new FsPermission(mode.shortValue()));
+        changed = true;
+      }
+      if (weight != null) {
+        info.setWeight(weight);
+        changed = true;
+      }
+      if (!changed) {
+        System.err.println("You must specify at least one attribute to " +
+            "change in the cache pool.");
+        return 1;
+      }
+      DistributedFileSystem dfs = getDFS(conf);
+      try {
+        dfs.modifyCachePool(info);
+      } catch (IOException e) {
+        throw new RemoteException(e.getClass().getName(), e.getMessage());
+      }
+      System.out.print("Successfully modified cache pool " + name);
+      String prefix = " to have ";
+      if (owner != null) {
+        System.out.print(prefix + "owner name " + owner);
+        prefix = " and ";
+      }
+      if (group != null) {
+        System.out.print(prefix + "group name " + group);
+        prefix = " and ";
+      }
+      if (mode != null) {
+        System.out.print(prefix + "mode " + new FsPermission(mode.shortValue()));
+        prefix = " and ";
+      }
+      if (weight != null) {
+        System.out.print(prefix + "weight " + weight);
+        prefix = " and ";
+      }
+      System.out.print("\n");
+      return 0;
+    }
+  }
+
+  private static class RemoveCachePoolCommand implements Command {
+
+    @Override
+    public String getName() {
+      return "-removePool";
+    }
+
+    @Override
+    public String getShortUsage() {
+      return "[" + getName() + " <name>]\n";
+    }
+
+    @Override
+    public String getLongUsage() {
+      return getShortUsage() + "\n" +
+          WordUtils.wrap("Remove a cache pool. This also uncaches paths " +
+              "associated with the pool.\n\n", MAX_LINE_WIDTH) +
+          "<name>  Name of the cache pool to remove.\n";
+    }
+
+    @Override
+    public int run(Configuration conf, List<String> args) throws IOException {
+      String name = StringUtils.popFirstNonOption(args);
+      if (name == null) {
+        System.err.println("You must specify a name when deleting a " +
+            "cache pool.");
+        return 1;
+      }
+      if (!args.isEmpty()) {
+        System.err.print("Can't understand arguments: " +
+          Joiner.on(" ").join(args) + "\n");
+        System.err.println("Usage is " + getShortUsage());
+        return 1;
+      }
+      DistributedFileSystem dfs = getDFS(conf);
+      try {
+        dfs.removeCachePool(name);
+      } catch (IOException e) {
+        throw new RemoteException(e.getClass().getName(), e.getMessage());
+      }
+      System.out.println("Successfully removed cache pool " + name + ".");
+      return 0;
+    }
+  }
+
+  private static class ListCachePoolsCommand implements Command {
+
+    @Override
+    public String getName() {
+      return "-listPools";
+    }
+
+    @Override
+    public String getShortUsage() {
+      return "[" + getName() + " [name]]\n";
+    }
+
+    @Override
+    public String getLongUsage() {
+      TableListing listing = getOptionDescriptionListing();
+      listing.addRow("[name]", "If specified, list only the named cache pool.");
+
+      return getShortUsage() + "\n" +
+          WordUtils.wrap("Display information about one or more cache pools, " +
+              "e.g. name, owner, group, permissions, etc.", MAX_LINE_WIDTH) +
+          "\n\n" +
+          listing.toString();
+    }
+
+    @Override
+    public int run(Configuration conf, List<String> args) throws IOException {
+      String name = StringUtils.popFirstNonOption(args);
+      if (!args.isEmpty()) {
+        System.err.print("Can't understand arguments: " +
+          Joiner.on(" ").join(args) + "\n");
+        System.err.println("Usage is " + getShortUsage());
+        return 1;
+      }
+      DistributedFileSystem dfs = getDFS(conf);
+      TableListing listing = new TableListing.Builder().
+          addField("NAME", Justification.LEFT).
+          addField("OWNER", Justification.LEFT).
+          addField("GROUP", Justification.LEFT).
+          addField("MODE", Justification.LEFT).
+          addField("WEIGHT", Justification.LEFT).
+          build();
+      int numResults = 0;
+      try {
+        RemoteIterator<CachePoolInfo> iter = dfs.listCachePools();
+        while (iter.hasNext()) {
+          CachePoolInfo info = iter.next();
+          if (name == null || info.getPoolName().equals(name)) {
+            listing.addRow(new String[] {
+                info.getPoolName(),
+                info.getOwnerName(),
+                info.getGroupName(),
+                info.getMode().toString(),
+                info.getWeight().toString(),
+            });
+            ++numResults;
+            if (name != null) {
+              break;
+            }
+          }
+        }
+      } catch (IOException e) {
+        throw new RemoteException(e.getClass().getName(), e.getMessage());
+      }
+      System.out.print(String.format("Found %d result%s.\n", numResults,
+          (numResults == 1 ? "" : "s")));
+      if (numResults > 0) { 
+        System.out.print(listing);
+      }
+      // If there are no results, we return 1 (failure exit code);
+      // otherwise we return 0 (success exit code).
+      return (numResults == 0) ? 1 : 0;
+    }
+  }
+
-      return getShortUsage() +
-        "Get detailed help about a command.\n" +
-        "<command-name> The command to get detailed help for.  If no " +
-        "        command-name is specified, we will print detailed help " +
-        "        about all commands";
+      TableListing listing = getOptionDescriptionListing();
+      listing.addRow("<command-name>", "The command for which to get " +
+          "detailed help. If no command is specified, print detailed help for " +
+          "all commands");
+      return getShortUsage() + "\n" +
+        "Get detailed help about a command.\n\n" +
+        listing.toString();
-    public int run(List<String> args) throws IOException {
+    public int run(Configuration conf, List<String> args) throws IOException {
+        System.err.print("\n");
+    new AddCachePoolCommand(),
+    new ModifyCachePoolCommand(),
+    new RemoveCachePoolCommand(),
+    new ListCachePoolsCommand(),
-
-  public static void main(String[] argsArray) throws IOException {
-    if (argsArray.length == 0) {
-      printUsage(false);
-      System.exit(1);
-    }
-    Command command = determineCommand(argsArray[0]);
-    if (command == null) {
-      System.err.println("Can't understand command '" + argsArray[0] + "'");
-      if (!argsArray[0].startsWith("-")) {
-        System.err.println("Command names must start with dashes.");
-      }
-      printUsage(false);
-      System.exit(1);
-    }
-    List<String> args = new LinkedList<String>();
-    for (int j = 1; j < argsArray.length; j++) {
-      args.add(argsArray[j]);
-    }
-    System.exit(command.run(args));
-  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS43 INS31 INS31 INS31 INS31 INS31 INS55 INS55 INS55 INS55 INS42 INS42 INS29 INS83 INS39 INS59 INS83 INS42 INS8 INS83 INS42 INS44 INS8 MOV78 UPD39 UPD42 INS44 INS83 INS83 INS39 INS42 MOV44 INS43 INS8 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS8 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 INS65 INS42 INS34 INS17 MOV43 INS42 INS46 INS5 INS42 INS41 INS42 INS60 INS21 INS43 INS42 INS65 INS42 INS43 INS42 INS41 INS42 MOV60 INS41 INS44 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 INS44 MOV78 MOV43 INS78 INS43 INS44 MOV78 MOV43 MOV78 MOV43 MOV78 MOV43 INS42 INS8 INS44 INS42 INS83 INS83 INS83 INS43 INS59 INS78 INS83 MOV43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS44 INS66 INS33 INS42 INS43 INS85 INS32 INS43 MOV59 INS32 INS42 INS66 INS66 INS42 INS27 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS54 INS42 INS42 INS60 INS21 INS41 INS43 INS42 INS54 INS54 INS60 INS21 INS21 INS41 INS43 INS42 INS60 INS60 INS42 INS42 INS45 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS60 INS25 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS25 INS25 INS60 INS60 INS54 INS21 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS25 INS60 INS60 INS25 INS25 INS25 INS25 INS25 INS60 INS54 INS21 INS60 INS25 INS25 INS25 INS25 INS21 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS25 INS60 INS54 INS21 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS60 INS60 INS60 INS54 INS21 INS25 INS41 INS60 INS21 INS43 INS42 INS14 INS14 INS14 INS14 INS42 UPD40 INS41 INS41 UPD42 UPD40 MOV42 MOV42 INS32 UPD42 MOV42 INS42 UPD42 INS14 INS42 INS42 INS32 INS32 INS45 INS2 UPD42 INS32 INS42 UPD45 INS27 INS43 INS59 INS32 INS32 INS27 INS42 INS43 INS8 INS12 UPD45 INS27 INS43 INS59 INS32 INS27 INS42 INS8 INS12 INS8 INS12 UPD45 INS27 INS43 INS59 INS32 INS32 INS27 INS42 UPD43 MOV43 INS59 MOV43 MOV59 INS42 INS27 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS27 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS39 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS38 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS34 INS45 INS27 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS27 INS42 INS43 INS43 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS38 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS38 INS8 INS43 INS59 INS8 INS12 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS32 INS34 INS45 INS27 INS27 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS38 INS8 INS43 INS59 INS8 INS12 INS32 INS34 INS45 INS27 INS43 INS59 INS32 INS27 INS42 INS43 INS43 INS43 INS59 INS38 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS12 INS32 INS27 INS8 INS16 INS43 INS59 INS32 INS42 INS43 INS43 INS43 INS43 INS34 INS34 INS42 INS43 MOV14 INS42 INS42 INS42 INS32 INS42 INS32 INS34 MOV32 INS42 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 MOV32 INS45 INS45 INS32 INS42 MOV60 MOV21 INS44 INS8 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS27 INS32 INS45 INS45 INS32 INS21 INS44 INS8 INS21 MOV21 MOV21 INS44 INS8 INS45 INS32 INS45 UPD42 MOV42 INS42 INS32 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS45 MOV32 UPD45 MOV45 UPD45 MOV45 INS32 UPD42 INS42 INS32 INS45 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 INS42 INS42 INS45 INS27 MOV32 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS32 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS40 INS42 INS27 INS45 INS32 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS32 INS21 INS21 INS41 INS42 INS9 INS42 INS42 INS14 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS21 INS41 INS42 INS42 INS32 INS21 INS44 INS8 INS40 INS42 INS27 INS42 INS42 INS45 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS21 INS40 INS42 INS45 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS32 INS21 INS21 INS41 INS42 INS42 INS32 INS21 INS44 INS8 INS40 INS42 INS27 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS60 INS61 INS44 INS8 INS40 INS42 INS32 INS42 INS34 INS21 INS36 INS34 INS34 INS42 INS42 INS32 INS42 INS42 INS45 INS27 UPD45 UPD45 INS32 INS21 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS45 UPD42 INS42 INS42 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS41 INS42 INS42 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS41 INS32 INS42 INS43 INS42 INS21 INS41 INS42 UPD42 MOV42 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS32 INS45 INS45 INS45 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS7 INS42 INS42 INS45 INS42 INS7 INS42 INS42 INS45 INS42 INS7 INS7 INS42 INS42 INS45 INS42 INS7 INS7 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS53 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS36 INS33 INS32 INS42 INS42 INS45 INS42 INS36 INS33 INS32 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS32 INS34 INS43 INS42 INS32 INS7 INS32 INS7 INS32 INS7 INS32 INS7 INS32 INS34 INS42 INS42 INS32 INS43 INS42 INS53 INS45 INS42 INS32 INS7 INS32 INS7 INS32 INS7 INS32 INS7 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS32 INS43 INS42 INS53 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS42 INS42 INS32 INS42 INS74 INS59 INS32 INS8 INS43 INS42 INS53 INS42 INS42 INS45 INS42 INS36 INS32 INS27 INS42 INS45 INS45 INS45 INS42 INS42 INS32 UPD42 INS42 INS42 UPD42 INS42 INS42 INS32 INS34 INS42 MOV32 INS42 INS32 INS34 INS40 INS42 INS27 INS32 INS42 INS42 INS42 INS32 INS34 INS32 INS42 INS45 INS40 MOV42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS2 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS32 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS27 INS40 INS45 INS27 INS42 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS14 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS14 INS40 INS42 INS27 INS42 INS45 INS40 INS42 INS27 INS42 INS45 INS40 INS42 INS27 INS42 INS45 INS40 INS42 INS27 INS42 INS45 INS45 INS45 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS14 INS45 INS45 INS40 INS42 INS27 INS40 INS42 INS27 INS32 INS42 INS45 INS40 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS14 INS16 INS40 INS42 INS42 INS42 INS34 INS40 INS42 INS45 UPD42 UPD42 UPD45 INS9 INS40 INS42 INS32 INS40 INS42 INS27 INS45 INS32 MOV42 UPD42 MOV42 INS40 INS42 INS32 INS32 INS42 INS45 INS40 INS32 INS42 INS32 INS42 INS32 INS34 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS45 INS45 INS45 INS32 INS45 INS45 INS32 INS32 INS42 INS42 INS43 INS11 INS43 INS32 INS32 INS45 INS45 INS42 INS33 INS42 INS33 INS45 INS45 INS45 INS32 INS45 INS45 INS32 INS43 INS32 INS45 INS45 INS43 INS32 INS32 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS14 INS42 INS45 INS42 INS45 INS45 INS45 INS32 INS45 INS45 INS32 INS43 INS32 INS32 INS45 INS32 INS45 INS45 INS32 INS32 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS32 INS32 INS27 INS45 INS45 UPD45 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS42 INS14 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS39 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS40 INS42 INS42 INS32 INS27 INS32 INS21 INS21 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS40 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS32 INS38 INS27 INS8 INS42 INS42 INS40 INS42 INS14 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS33 INS10 INS43 INS5 INS4 INS40 INS43 INS85 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL40 DEL40 DEL45 DEL40 DEL45 DEL45 DEL27 DEL41 DEL45 DEL45 DEL27 DEL41 DEL42 DEL43 DEL42 DEL33 DEL33 DEL14 DEL45 DEL42 DEL45 DEL45 DEL45 DEL27 DEL41 DEL8 DEL60 DEL42 DEL32 DEL45 DEL45