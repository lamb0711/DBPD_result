HDDS-1544. Support default Acls for volume, bucket, keys and prefix. Contributed by Ajay Kumar, Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclScope;
+
+  private static final String ACL_SCOPE_REGEX = ".*\\[(ACCESS|DEFAULT)\\]";
+  private AclScope aclScope;
-   * @param type - Type
-   * @param name - Name of user
-   * @param acl - Rights
+   * @param type   - Type
+   * @param name   - Name of user
+   * @param acl    - Rights
+   * @param scope  - AclScope
-  public OzoneAcl(ACLIdentityType type, String name, ACLType acl) {
+  public OzoneAcl(ACLIdentityType type, String name, ACLType acl,
+      AclScope scope) {
+    aclScope = scope;
-   * @param type - Type
-   * @param name - Name of user
-   * @param acls - Rights
+   * @param type   - Type
+   * @param name   - Name of user
+   * @param acls   - Rights
+   * @param scope  - AclScope
-  public OzoneAcl(ACLIdentityType type, String name, BitSet acls) {
+  public OzoneAcl(ACLIdentityType type, String name, BitSet acls,
+      AclScope scope) {
+    aclScope = scope;
-   * Parses an ACL string and returns the ACL object.
+   * Parses an ACL string and returns the ACL object. If acl scope is not
+   * passed in input string then scope is set to ACCESS.
-  public static OzoneAcl parseAcl(String acl) throws IllegalArgumentException {
+  public static OzoneAcl parseAcl(String acl)
+      throws IllegalArgumentException {
-    for (char ch : parts[2].toCharArray()) {
+    String bits = parts[2];
+
+    // Default acl scope is ACCESS.
+    AclScope aclScope = AclScope.ACCESS;
+
+    // Check if acl string contains scope info.
+    if(parts[2].matches(ACL_SCOPE_REGEX)) {
+      int indexOfOpenBracket = parts[2].indexOf("[");
+      bits = parts[2].substring(0, indexOfOpenBracket);
+      aclScope = AclScope.valueOf(parts[2].substring(indexOfOpenBracket + 1,
+          parts[2].indexOf("]")));
+    }
+
+    // Set all acl bits.
+    for (char ch : bits.toCharArray()) {
-    return new OzoneAcl(aclType, parts[1], acls);
+    return new OzoneAcl(aclType, parts[1], acls, aclScope);
+        .setAclScope(OzoneAclScope.valueOf(acl.getAclScope().name()))
-        protoAcl.getName(), aclRights);
+        protoAcl.getName(), aclRights,
+        AclScope.valueOf(protoAcl.getAclScope().name()));
+  }
+
+  /**
+   * Helper function to convert a proto message of type {@link OzoneAclInfo}
+   * to {@link OzoneAcl} with acl scope of type ACCESS.
+   *
+   * @param protoAcl
+   * @return OzoneAcl
+   * */
+  public static OzoneAcl fromProtobufWithAccessType(OzoneAclInfo protoAcl) {
+    BitSet aclRights = BitSet.valueOf(protoAcl.getRights().toByteArray());
+    return new OzoneAcl(ACLIdentityType.valueOf(protoAcl.getType().name()),
+        protoAcl.getName(), aclRights, AclScope.ACCESS);
+  }
+
+  /**
+   * Helper function to convert an {@link OzoneAcl} to proto message of type
+   * {@link OzoneAclInfo} with acl scope of type ACCESS.
+   *
+   * @param acl
+   * @return OzoneAclInfo
+   * */
+  public static OzoneAclInfo toProtobufWithAccessType(OzoneAcl acl) {
+    OzoneAclInfo.Builder builder = OzoneAclInfo.newBuilder()
+        .setName(acl.getName())
+        .setType(OzoneAclType.valueOf(acl.getType().name()))
+        .setAclScope(OzoneAclScope.ACCESS)
+        .setRights(ByteString.copyFrom(acl.getAclBitSet().toByteArray()));
+    return builder.build();
+  }
+
+  public AclScope getAclScope() {
+    return aclScope;
-    return type + ":" + name + ":" + ACLType.getACLString(aclBitSet);
+    return type + ":" + name + ":" + ACLType.getACLString(aclBitSet)
+        + "[" + aclScope + "]";
-                        this.getType().toString());
+                        this.getType().toString(), this.getAclScope());
-        otherAcl.getAclBitSet().equals(this.getAclBitSet());
+        otherAcl.getAclBitSet().equals(this.getAclBitSet()) &&
+        otherAcl.getAclScope().equals(this.getAclScope());
+  }
+
+  /**
+   * Scope of ozone acl.
+   * */
+  public enum AclScope {
+    ACCESS,
+    DEFAULT;

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS71 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS29 INS83 INS42 INS72 INS72 INS42 INS42 INS45 INS42 INS42 INS65 INS43 INS42 INS21 INS65 INS43 INS42 INS21 INS60 INS60 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS41 INS42 INS41 INS65 INS42 INS42 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS7 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS7 UPD66 INS66 INS43 INS59 INS43 INS59 MOV32 INS8 INS32 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS43 INS59 INS14 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS43 INS59 INS32 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS40 UPD42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS32 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS32 INS32 INS42 INS34 INS39 INS59 INS7 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 MOV32 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS2 INS42 INS45 INS2 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS34 INS42 INS34 INS2 INS42 INS27 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS34 INS2 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42