HDFS-10268. Ozone: end-to-end integration for create/get volumes, buckets and keys. Contributed by Chris Nauroth.

+import static org.apache.hadoop.ozone.web.storage.ContainerProtocolCalls.*;
+import static org.apache.hadoop.ozone.web.storage.OzoneContainerTranslation.*;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+import java.util.TimeZone;
+
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.ChunkInfo;
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.GetKeyResponseProto;
+import org.apache.hadoop.hdfs.ozone.protocol.proto.ContainerProtos.KeyData;
+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.ozone.OzoneConfiguration;
+import org.apache.hadoop.ozone.OzoneConsts;
+import org.apache.hadoop.ozone.container.common.helpers.Pipeline;
+import org.apache.hadoop.ozone.container.common.transport.client.XceiverClient;
+import org.apache.hadoop.ozone.container.common.transport.client.XceiverClientManager;
+import org.apache.hadoop.ozone.protocol.LocatedContainer;
+import org.apache.hadoop.ozone.protocolPB.StorageContainerLocationProtocolClientSideTranslatorPB;
+import org.apache.hadoop.ozone.web.response.KeyInfo;
-
-import java.io.IOException;
-import java.io.OutputStream;
+import org.apache.hadoop.ozone.web.response.VolumeOwner;
+import org.apache.hadoop.util.StringUtils;
-  @Override
-  public void createVolume(VolumeArgs args) throws
-      IOException, OzoneException {
+  private final StorageContainerLocationProtocolClientSideTranslatorPB
+      storageContainerLocation;
+  private final XceiverClientManager xceiverClientManager;
+  /**
+   * Creates a new DistributedStorageHandler.
+   *
+   * @param conf configuration
+   * @param storageContainerLocation StorageContainerLocationProtocol proxy
+   */
+  public DistributedStorageHandler(OzoneConfiguration conf,
+      StorageContainerLocationProtocolClientSideTranslatorPB
+      storageContainerLocation) {
+    this.storageContainerLocation = storageContainerLocation;
+    this.xceiverClientManager = new XceiverClientManager(conf);
+  }
+
+  @Override
+  public void createVolume(VolumeArgs args) throws IOException, OzoneException {
+    String containerKey = buildContainerKey(args.getVolumeName());
+    XceiverClient xceiverClient = acquireXceiverClient(containerKey);
+    try {
+      VolumeInfo volume = new VolumeInfo();
+      volume.setVolumeName(args.getVolumeName());
+      volume.setQuota(args.getQuota());
+      volume.setOwner(new VolumeOwner(args.getUserName()));
+      volume.setCreatedOn(dateToString(new Date()));
+      volume.setCreatedBy(args.getAdminName());
+      KeyData containerKeyData = fromVolumeToContainerKeyData(
+          xceiverClient.getPipeline().getContainerName(), containerKey, volume);
+      putKey(xceiverClient, containerKeyData, args);
+    } finally {
+      xceiverClientManager.releaseClient(xceiverClient);
+    }
-
+    throw new UnsupportedOperationException("setVolumeOwner not implemented");
-
+    throw new UnsupportedOperationException("setVolumeQuota not implemented");
-    return false;
+    throw new UnsupportedOperationException("checkVolumeAccessnot implemented");
-    return null;
+    throw new UnsupportedOperationException("listVolumes not implemented");
-
+    throw new UnsupportedOperationException("deleteVolume not implemented");
-    return null;
+    String containerKey = buildContainerKey(args.getVolumeName());
+    XceiverClient xceiverClient = acquireXceiverClient(containerKey);
+    try {
+      KeyData containerKeyData = containerKeyDataForRead(
+          xceiverClient.getPipeline().getContainerName(), containerKey);
+      GetKeyResponseProto response = getKey(xceiverClient, containerKeyData,
+          args);
+      return fromContainerKeyValueListToVolume(
+          response.getKeyData().getMetadataList());
+    } finally {
+      xceiverClientManager.releaseClient(xceiverClient);
+    }
-  public void createBucket(BucketArgs args)
+  public void createBucket(final BucketArgs args)
-
+    String containerKey = buildContainerKey(args.getVolumeName(),
+        args.getBucketName());
+    XceiverClient xceiverClient = acquireXceiverClient(containerKey);
+    try {
+      BucketInfo bucket = new BucketInfo();
+      bucket.setVolumeName(args.getVolumeName());
+      bucket.setBucketName(args.getBucketName());
+      bucket.setAcls(args.getAddAcls());
+      bucket.setVersioning(args.getVersioning());
+      bucket.setStorageType(args.getStorageType());
+      KeyData containerKeyData = fromBucketToContainerKeyData(
+          xceiverClient.getPipeline().getContainerName(), containerKey, bucket);
+      putKey(xceiverClient, containerKeyData, args);
+    } finally {
+      xceiverClientManager.releaseClient(xceiverClient);
+    }
-
+    throw new UnsupportedOperationException("setBucketAcls not implemented");
-
+    throw new UnsupportedOperationException(
+        "setBucketVersioning not implemented");
-
+    throw new UnsupportedOperationException(
+        "setBucketStorageClass not implemented");
-
+    throw new UnsupportedOperationException("deleteBucket not implemented");
-
+    throw new UnsupportedOperationException(
+        "checkBucketAccess not implemented");
-    return null;
+    throw new UnsupportedOperationException("listBuckets not implemented");
-    return null;
+    String containerKey = buildContainerKey(args.getVolumeName(),
+        args.getBucketName());
+    XceiverClient xceiverClient = acquireXceiverClient(containerKey);
+    try {
+      KeyData containerKeyData = containerKeyDataForRead(
+          xceiverClient.getPipeline().getContainerName(), containerKey);
+      GetKeyResponseProto response = getKey(xceiverClient, containerKeyData,
+          args);
+      return fromContainerKeyValueListToBucket(
+          response.getKeyData().getMetadataList());
+    } finally {
+      xceiverClientManager.releaseClient(xceiverClient);
+    }
-  /**
-   * Writes a key in an existing bucket.
-   *
-   * @param args KeyArgs
-   * @return InputStream
-   * @throws OzoneException
-   */
-    return null;
+    String containerKey = buildContainerKey(args.getVolumeName(),
+        args.getBucketName(), args.getKeyName());
+    KeyInfo key = new KeyInfo();
+    key.setKeyName(args.getKeyName());
+    key.setCreatedOn(dateToString(new Date()));
+    XceiverClient xceiverClient = acquireXceiverClient(containerKey);
+    return new ChunkOutputStream(containerKey, key, xceiverClientManager,
+        xceiverClient, args);
-  /**
-   * Tells the file system that the object has been written out completely and
-   * it can do any house keeping operation that needs to be done.
-   *
-   * @param args   Key Args
-   * @param stream
-   * @throws IOException
-   */
-
+    stream.close();
-  /**
-   * Reads a key from an existing bucket.
-   *
-   * @param args KeyArgs
-   * @return LengthInputStream
-   * @throws IOException
-   */
-    return null;
+    String containerKey = buildContainerKey(args.getVolumeName(),
+        args.getBucketName(), args.getKeyName());
+    XceiverClient xceiverClient = acquireXceiverClient(containerKey);
+    boolean success = false;
+    try {
+      KeyData containerKeyData = containerKeyDataForRead(
+          xceiverClient.getPipeline().getContainerName(), containerKey);
+      GetKeyResponseProto response = getKey(xceiverClient, containerKeyData,
+          args);
+      long length = 0;
+      List<ChunkInfo> chunks = response.getKeyData().getChunksList();
+      for (ChunkInfo chunk : chunks) {
+        length += chunk.getLen();
+      }
+      success = true;
+      return new LengthInputStream(new ChunkInputStream(
+          containerKey, xceiverClientManager, xceiverClient, chunks, args),
+          length);
+    } finally {
+      if (!success) {
+        xceiverClientManager.releaseClient(xceiverClient);
+      }
+    }
-  /**
-   * Deletes an existing key.
-   *
-   * @param args KeyArgs
-   * @throws OzoneException
-   */
+    throw new UnsupportedOperationException("deleteKey not implemented");
+  }
+  @Override
+  public ListKeys listKeys(ListArgs args) throws IOException, OzoneException {
+    throw new UnsupportedOperationException("listKeys not implemented");
-   * Returns a list of Key.
+   * Acquires an {@link XceiverClient} connected to a {@link Pipeline} of nodes
+   * capable of serving container protocol operations.  The container is
+   * selected based on the specified container key.
-   * @param args KeyArgs
-   * @return BucketList
-   * @throws IOException
+   * @param containerKey container key
+   * @return XceiverClient connected to a container
+   * @throws IOException if an XceiverClient cannot be acquired
-  @Override
-  public ListKeys listKeys(ListArgs args) throws IOException, OzoneException {
-    return null;
+  private XceiverClient acquireXceiverClient(String containerKey)
+      throws IOException {
+    Set<LocatedContainer> locatedContainers =
+        storageContainerLocation.getStorageContainerLocations(
+            new HashSet<>(Arrays.asList(containerKey)));
+    Pipeline pipeline = newPipelineFromLocatedContainer(
+        locatedContainers.iterator().next());
+    return xceiverClientManager.acquireClient(pipeline);
+  }
+
+  /**
+   * Creates a container key from any number of components by combining all
+   * components with a delimiter.
+   *
+   * @param parts container key components
+   * @return container key
+   */
+  private static String buildContainerKey(String... parts) {
+    return '/' + StringUtils.join('/', parts);
+  }
+
+  /**
+   * Formats a date in the expected string format.
+   *
+   * @param date the date to format
+   * @return formatted string representation of date
+   */
+  private static String dateToString(Date date) {
+    SimpleDateFormat sdf =
+        new SimpleDateFormat(OzoneConsts.OZONE_DATE_FORMAT, Locale.US);
+    sdf.setTimeZone(TimeZone.getTimeZone(OzoneConsts.OZONE_TIME_ZONE));
+    return sdf.format(date);
+  }
+
+  /**
+   * Translates a set of container locations, ordered such that the first is the
+   * leader, into a corresponding {@link Pipeline} object.
+   *
+   * @param locatedContainer container location
+   * @return pipeline corresponding to container locations
+   */
+  private static Pipeline newPipelineFromLocatedContainer(
+      LocatedContainer locatedContainer) {
+    Set<DatanodeInfo> locations = locatedContainer.getLocations();
+    String leaderId = locations.iterator().next().getDatanodeUuid();
+    Pipeline pipeline = new Pipeline(leaderId);
+    for (DatanodeInfo location : locations) {
+      pipeline.addMember(location);
+    }
+    pipeline.setContainerName(locatedContainer.getContainerName());
+    return pipeline;

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS8 MOV78 MOV44 MOV43 MOV43 INS8 MOV78 MOV44 MOV43 MOV43 MOV78 MOV43 MOV43 MOV78 MOV44 MOV43 MOV43 MOV78 MOV44 MOV43 MOV43 INS8 MOV78 MOV43 MOV43 INS8 MOV44 MOV78 MOV44 MOV43 MOV43 MOV78 MOV44 MOV43 MOV43 MOV78 MOV44 MOV43 MOV43 MOV78 MOV44 MOV43 MOV43 MOV78 MOV44 MOV43 MOV43 INS8 MOV78 INS83 MOV43 INS42 MOV44 MOV43 MOV43 INS8 MOV78 INS83 MOV43 INS42 MOV44 MOV43 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV43 MOV43 INS8 UPD83 INS43 INS42 INS44 INS43 INS83 UPD83 INS43 UPD42 INS44 INS83 UPD83 INS43 INS42 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS21 INS60 INS60 INS54 INS53 INS53 INS53 INS53 INS53 INS60 INS60 INS54 INS83 INS60 INS60 INS54 INS53 INS53 INS53 INS53 INS53 INS53 INS60 INS60 INS54 INS60 INS60 INS21 INS21 INS60 INS41 INS21 INS60 INS60 INS60 INS54 INS53 INS53 INS42 INS43 INS42 INS42 INS60 INS60 INS42 INS43 INS42 UPD65 INS42 INS43 INS42 INS60 INS21 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS60 INS70 INS21 INS41 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS7 INS43 INS59 INS43 INS59 INS8 INS8 INS14 INS14 INS14 INS14 INS14 INS43 INS59 INS43 INS59 INS8 INS8 INS43 INS59 INS43 INS59 INS8 INS8 INS14 INS14 INS14 INS14 INS14 INS14 INS43 INS59 INS43 INS59 INS8 INS8 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS14 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS8 INS14 INS14 UPD66 INS65 INS66 INS65 INS66 INS66 INS66 UPD42 UPD66 UPD66 UPD42 INS66 INS42 INS74 INS59 INS43 INS59 INS32 UPD66 INS66 UPD42 UPD66 UPD66 INS42 INS27 UPD66 UPD42 UPD66 INS66 INS42 INS43 INS59 INS32 INS32 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS32 INS42 INS22 INS42 INS22 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 MOV41 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS60 MOV41 INS21 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS9 INS60 INS60 INS60 INS60 INS70 INS21 INS41 INS25 INS43 INS45 INS43 INS45 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS13 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS7 INS14 INS38 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS13 INS42 INS43 INS40 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS9 INS43 INS14 INS42 INS42 INS21 INS74 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL8 DEL9 DEL41 DEL33 DEL41 DEL33 DEL8 DEL8 DEL33 DEL41 DEL33 DEL8 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL33 DEL41 DEL42 DEL33 DEL42 DEL65 DEL33 DEL42 DEL39 DEL42