HDDS-1525. Mapreduce failure when using Hadoop 2.7.5

Closes #1065

+import java.util.ArrayList;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.Path;
-  public OzoneFileStatus getFileStatus(String pathKey) throws IOException {
+  public FileStatusAdapter getFileStatus(String key, URI uri,
+      Path qualifiedPath, String userName)
+      throws IOException {
-      return bucket.getFileStatus(pathKey);
+      OzoneFileStatus status = bucket.getFileStatus(key);
+      makeQualified(status, uri, qualifiedPath, userName);
+      return toFileStatusAdapter(status);
+
-            FileNotFoundException(pathKey + ": No such file or directory!");
+            FileNotFoundException(key + ": No such file or directory!");
+  public void makeQualified(FileStatus status, URI uri, Path path,
+      String username) {
+    if (status instanceof OzoneFileStatus) {
+      ((OzoneFileStatus) status)
+          .makeQualified(uri, path,
+              username, username);
+    }
+
+  }
+
-  public List<OzoneFileStatus> listStatus(String keyName, boolean recursive,
-      String startKey, long numEntries) throws IOException {
+  public List<FileStatusAdapter> listStatus(String keyName, boolean recursive,
+      String startKey, long numEntries, URI uri,
+      Path workingDir, String username) throws IOException {
-      return bucket.listStatus(keyName, recursive, startKey, numEntries);
+      List<OzoneFileStatus> statuses = bucket
+          .listStatus(keyName, recursive, startKey, numEntries);
+
+      List<FileStatusAdapter> result = new ArrayList<>();
+      for (OzoneFileStatus status : statuses) {
+        Path qualifiedPath = status.getPath().makeQualified(uri, workingDir);
+        makeQualified(status, uri, qualifiedPath, username);
+        result.add(toFileStatusAdapter(status));
+      }
+      return result;
+
+  private FileStatusAdapter toFileStatusAdapter(OzoneFileStatus status) {
+    return new FileStatusAdapter(
+        status.getLen(),
+        status.getPath(),
+        status.isDirectory(),
+        status.getReplication(),
+        status.getBlockSize(),
+        status.getModificationTime(),
+        status.getAccessTime(),
+        status.getPermission().toShort(),
+        status.getOwner(),
+        status.getGroup(),
+        status.getPath()
+    );
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS43 INS44 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS74 INS44 INS44 INS44 INS83 INS43 INS42 INS44 INS8 INS42 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS60 INS21 INS41 INS42 MOV43 INS21 INS60 INS60 INS70 INS43 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS32 MOV74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS21 INS21 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS11 INS42 INS42 INS74 INS42 INS43 INS59 INS32 INS32 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 DEL32 DEL41