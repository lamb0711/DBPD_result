Merge remote-tracking branch 'origin/trunk' into MR-2841

Conflicts:
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java

-  private final LDir finalizedDir; // directory store Finalized replica
+  // directory where finalized replicas are stored
+  private final File finalizedDir;
-    final File finalizedDir = new File(
+    this.finalizedDir = new File(
+    if (!this.finalizedDir.exists()) {
+      if (!this.finalizedDir.mkdirs()) {
+        throw new IOException("Failed to mkdirs " + this.finalizedDir);
+      }
+    }
-    final int maxBlocksPerDir = conf.getInt(
-        DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_KEY,
-        DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_DEFAULT);
-    this.finalizedDir = new LDir(finalizedDir, maxBlocksPerDir);
-    return finalizedDir.dir;
+    return finalizedDir;
-    File blockFile = finalizedDir.addBlock(b, f);
+    File blockDir = DatanodeUtil.idToBlockDir(finalizedDir, b.getBlockId());
+    if (!blockDir.exists()) {
+      if (!blockDir.mkdirs()) {
+        throw new IOException("Failed to mkdirs " + blockDir);
+      }
+    }
+    File blockFile = FsDatasetImpl.moveBlockFiles(b, f, blockDir);
-    finalizedDir.checkDirTree();
+    DiskChecker.checkDirs(finalizedDir);
-    finalizedDir.getVolumeMap(bpid, volumeMap, volume);
+    addToReplicasMap(volumeMap, finalizedDir, true);
+   * Recover an unlinked tmp file on datanode restart. If the original block
+   * does not exist, then the tmp file is renamed to be the
+   * original file name and the original name is returned; otherwise the tmp
+   * file is deleted and null is returned.
+   */
+  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {
+    File blockFile = FsDatasetUtil.getOrigFile(unlinkedTmp);
+    if (blockFile.exists()) {
+      // If the original block file still exists, then no recovery is needed.
+      if (!unlinkedTmp.delete()) {
+        throw new IOException("Unable to cleanup unlinked tmp file " +
+            unlinkedTmp);
+      }
+      return null;
+    } else {
+      if (!unlinkedTmp.renameTo(blockFile)) {
+        throw new IOException("Unable to rename unlinked tmp file " +
+            unlinkedTmp);
+      }
+      return blockFile;
+    }
+  }
+
+
+  /**
-    File blockFiles[] = FileUtil.listFiles(dir);
-    for (File blockFile : blockFiles) {
-      if (!Block.isBlockFilename(blockFile))
+    File files[] = FileUtil.listFiles(dir);
+    for (File file : files) {
+      if (file.isDirectory()) {
+        addToReplicasMap(volumeMap, file, isFinalized);
+      }
+
+      if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) {
+        file = recoverTempUnlinkedBlock(file);
+        if (file == null) { // the original block still exists, so we cover it
+          // in another iteration and can continue here
+          continue;
+        }
+      }
+      if (!Block.isBlockFilename(file))
-          blockFiles, blockFile);
-      long blockId = Block.filename2id(blockFile.getName());
+          files, file);
+      long blockId = Block.filename2id(file.getName());
-            blockFile.length(), genStamp, volume, blockFile.getParentFile());
+            file.length(), genStamp, volume, file.getParentFile());
-        File restartMeta = new File(blockFile.getParent()  +
-            File.pathSeparator + "." + blockFile.getName() + ".restart");
+        File restartMeta = new File(file.getParent()  +
+            File.pathSeparator + "." + file.getName() + ".restart");
-                validateIntegrityAndSetLength(blockFile, genStamp), 
-                genStamp, volume, blockFile.getParentFile(), null);
+                validateIntegrityAndSetLength(file, genStamp),
+                genStamp, volume, file.getParentFile(), null);
-          if (restartMeta.delete()) {
+          if (!restartMeta.delete()) {
-          // nothing to do here
+          // nothing to do hereFile dir =
-              validateIntegrityAndSetLength(blockFile, genStamp), 
-              genStamp, volume, blockFile.getParentFile());
+              validateIntegrityAndSetLength(file, genStamp),
+              genStamp, volume, file.getParentFile());
-            "on disk: " + oldReplica.getBlockFile() + " and " + blockFile );
+            "on disk: " + oldReplica.getBlockFile() + " and " + file );
-  void clearPath(File f) {
-    finalizedDir.clearPath(f);
-  }
-    

MOV31 UPD43 INS29 MOV43 UPD42 MOV44 INS43 INS8 UPD42 INS21 INS25 INS60 INS25 INS65 UPD42 UPD42 MOV42 INS60 INS25 INS7 INS38 INS8 INS42 MOV43 INS59 INS38 INS8 INS43 INS66 INS66 INS66 INS66 MOV43 INS59 INS32 INS8 INS8 INS44 UPD42 INS22 MOV14 INS32 INS25 INS42 INS32 INS32 INS25 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS9 INS42 INS32 INS42 INS42 INS25 INS41 INS25 INS41 UPD42 MOV43 INS42 INS25 INS25 INS52 INS42 INS22 UPD42 MOV42 INS38 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS38 INS8 UPD42 UPD42 INS42 INS42 INS42 INS42 INS38 INS8 INS33 INS38 INS8 INS42 INS32 INS8 INS27 INS8 INS52 INS42 INS32 INS53 INS42 INS42 INS32 INS53 INS32 INS53 INS32 INS53 INS42 INS42 INS21 INS42 INS32 INS21 INS25 MOV22 UPD42 MOV42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS32 INS42 INS42 INS42 INS7 INS27 INS8 UPD42 UPD42 UPD42 INS43 UPD43 MOV43 INS27 INS43 INS27 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS18 UPD42 INS42 UPD42 INS45 INS22 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS38 UPD42 INS52 INS42 UPD42 UPD42 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL42 DEL59 DEL60 DEL83 DEL39 DEL42 DEL40 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL14 DEL7 DEL21 DEL40 DEL42 DEL42 DEL39 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8