HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)

-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_KEY;
+import org.apache.hadoop.crypto.CryptoProtocolVersion;
-  private final CryptoCodec codec;
-  @VisibleForTesting
-  List<CipherSuite> cipherSuites;
-    this.codec = CryptoCodec.getInstance(conf);
-    this.cipherSuites = Lists.newArrayListWithCapacity(1);
-    if (codec != null) {
-      cipherSuites.add(codec.getCipherSuite());
-    }
+   * Obtain the crypto protocol version from the provided FileEncryptionInfo,
+   * checking to see if this version is supported by.
+   *
+   * @param feInfo FileEncryptionInfo
+   * @return CryptoProtocolVersion from the feInfo
+   * @throws IOException if the protocol version is unsupported.
+   */
+  private static CryptoProtocolVersion getCryptoProtocolVersion
+      (FileEncryptionInfo feInfo) throws IOException {
+    final CryptoProtocolVersion version = feInfo.getCryptoProtocolVersion();
+    if (!CryptoProtocolVersion.supports(version)) {
+      throw new IOException("Client does not support specified " +
+          "CryptoProtocolVersion " + version.getDescription() + " version " +
+          "number" + version.getVersion());
+    }
+    return version;
+  }
+
+  /**
+   * Obtain a CryptoCodec based on the CipherSuite set in a FileEncryptionInfo
+   * and the available CryptoCodecs configured in the Configuration.
+   *
+   * @param conf   Configuration
+   * @param feInfo FileEncryptionInfo
+   * @return CryptoCodec
+   * @throws IOException if no suitable CryptoCodec for the CipherSuite is
+   *                     available.
+   */
+  private static CryptoCodec getCryptoCodec(Configuration conf,
+      FileEncryptionInfo feInfo) throws IOException {
+    final CipherSuite suite = feInfo.getCipherSuite();
+    if (suite.equals(CipherSuite.UNKNOWN)) {
+      throw new IOException("NameNode specified unknown CipherSuite with ID "
+          + suite.getUnknownValue() + ", cannot instantiate CryptoCodec.");
+    }
+    final CryptoCodec codec = CryptoCodec.getInstance(conf, suite);
+    if (codec == null) {
+      throw new UnknownCipherSuiteException(
+          "No configuration found for the cipher suite "
+          + suite.getConfigSuffix() + " prefixed with "
+          + HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
+          + ". Please see the example configuration "
+          + "hadoop.security.crypto.codec.classes.EXAMPLECIPHERSUITE "
+          + "at core-default.xml for details.");
+    }
+    return codec;
+  }
+
+  /**
-      KeyVersion decrypted = decryptEncryptedDataEncryptionKey(feInfo);
-      CryptoCodec codec = CryptoCodec
-          .getInstance(conf, feInfo.getCipherSuite());
-      if (codec == null) {
-        throw new IOException("No configuration found for the cipher suite "
-            + feInfo.getCipherSuite().getConfigSuffix() + " prefixed with "
-            + HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
-            + ". Please see the example configuration "
-            + "hadoop.security.crypto.codec.classes.EXAMPLECIPHERSUITE "
-            + "at core-default.xml for details.");
-      }
+      // Currently only one version, so no special logic based on the version #
+      getCryptoProtocolVersion(feInfo);
+      final CryptoCodec codec = getCryptoCodec(conf, feInfo);
+      final KeyVersion decrypted = decryptEncryptedDataEncryptionKey(feInfo);
-      if (codec == null) {
-        throw new IOException("No configuration found for the cipher suite "
-            + HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_KEY + " value prefixed with "
-            + HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
-            + ". Please see the example configuration "
-            + "hadoop.security.crypto.codec.classes.EXAMPLECIPHERSUITE "
-            + "at core-default.xml for details.");
-      }
+      // Currently only one version, so no special logic based on the version #
+      getCryptoProtocolVersion(feInfo);
+      final CryptoCodec codec = getCryptoCodec(conf, feInfo);
-        favoredNodeStrs, cipherSuites);
+        favoredNodeStrs);
-          checksum, null, cipherSuites);
+          checksum, null);

MOV26 UPD40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS25 INS41 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS83 INS43 INS59 INS38 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 UPD42 MOV42 INS42 INS83 MOV43 INS59 INS32 INS8 INS83 MOV43 INS59 MOV27 INS8 INS42 INS42 UPD42 MOV42 INS32 INS32 INS53 UPD42 MOV42 MOV32 INS42 INS42 INS40 INS53 INS42 INS32 INS53 INS21 INS60 INS21 INS60 INS42 INS42 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS42 INS14 INS32 INS83 INS43 INS83 INS43 INS59 INS32 INS83 INS43 INS59 MOV43 INS27 MOV43 INS27 INS43 INS27 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS45 INS45 INS32 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS45 INS45 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL59 DEL23 DEL42 DEL78 DEL43 DEL74 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL45 DEL32 DEL45 DEL42 DEL45 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42