YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)

+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.AbstractYarnScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.activities.ActivitiesManager;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.YarnScheduler;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerNode;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.*;
+  @Path("/scheduler/activities")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,
+      @QueryParam("nodeId") String nodeId) {
+    YarnScheduler scheduler = rm.getRMContext().getScheduler();
+
+    if (scheduler instanceof AbstractYarnScheduler) {
+      String errMessage = "";
+
+      AbstractYarnScheduler abstractYarnScheduler =
+          (AbstractYarnScheduler) scheduler;
+
+      ActivitiesManager activitiesManager =
+          abstractYarnScheduler.getActivitiesManager();
+      if (null == activitiesManager) {
+        errMessage = "Not Capacity Scheduler";
+        return new ActivitiesInfo(errMessage, nodeId);
+      }
+
+      List<FiCaSchedulerNode> nodeList =
+          abstractYarnScheduler.getNodeTracker().getAllNodes();
+
+      boolean illegalInput = false;
+
+      if (nodeList.size() == 0) {
+        illegalInput = true;
+        errMessage = "No node manager running in the cluster";
+      } else {
+        if (nodeId != null) {
+          String hostName = nodeId;
+          String portName = "";
+          if (nodeId.contains(":")) {
+            int index = nodeId.indexOf(":");
+            hostName = nodeId.substring(0, index);
+            portName = nodeId.substring(index + 1);
+          }
+
+          boolean correctNodeId = false;
+          for (FiCaSchedulerNode node : nodeList) {
+            if ((portName.equals("") && node.getRMNode().getHostName().equals(
+                hostName)) || (!portName.equals("") && node.getRMNode()
+                .getHostName().equals(hostName) && String.valueOf(
+                node.getRMNode().getCommandPort()).equals(portName))) {
+              correctNodeId = true;
+              nodeId = node.getNodeID().toString();
+              break;
+            }
+          }
+          if (!correctNodeId) {
+            illegalInput = true;
+            errMessage = "Cannot find node manager with given node id";
+          }
+        }
+      }
+
+      if (!illegalInput) {
+        activitiesManager.recordNextNodeUpdateActivities(nodeId);
+        return activitiesManager.getActivitiesInfo(nodeId);
+      }
+
+      // Return a activities info with error message
+      return new ActivitiesInfo(errMessage, nodeId);
+    }
+
+    return null;
+  }
+
+  @GET
+  @Path("/scheduler/app-activities")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public AppActivitiesInfo getAppActivities(@Context HttpServletRequest hsr,
+      @QueryParam("appId") String appId, @QueryParam("maxTime") String time) {
+    YarnScheduler scheduler = rm.getRMContext().getScheduler();
+
+    if (scheduler instanceof AbstractYarnScheduler) {
+      AbstractYarnScheduler abstractYarnScheduler =
+          (AbstractYarnScheduler) scheduler;
+
+      ActivitiesManager activitiesManager =
+          abstractYarnScheduler.getActivitiesManager();
+      if (null == activitiesManager) {
+        String errMessage = "Not Capacity Scheduler";
+        return new AppActivitiesInfo(errMessage, appId);
+      }
+
+      if(appId == null) {
+        String errMessage = "Must provide an application Id";
+        return new AppActivitiesInfo(errMessage, null);
+      }
+
+      double maxTime = 3.0;
+
+      if (time != null) {
+        if (time.contains(".")) {
+          maxTime = Double.parseDouble(time);
+        } else {
+          maxTime = Double.parseDouble(time + ".0");
+        }
+      }
+
+      ApplicationId applicationId;
+      try {
+        applicationId = ApplicationId.fromString(appId);
+        activitiesManager.turnOnAppActivitiesRecording(applicationId, maxTime);
+        AppActivitiesInfo appActivitiesInfo =
+            activitiesManager.getAppActivitiesInfo(applicationId);
+
+        return appActivitiesInfo;
+      } catch (Exception e) {
+        String errMessage = "Cannot find application with given appId";
+        return new AppActivitiesInfo(errMessage, appId);
+      }
+
+    }
+    return null;
+  }
+
+  @GET

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS45 INS42 INS4 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS60 INS25 INS41 INS40 INS40 INS42 INS42 INS42 INS45 INS42 INS43 INS59 INS62 INS8 INS33 INS40 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS43 INS59 INS62 INS8 INS33 INS42 INS42 INS32 INS42 INS43 INS60 INS60 INS60 INS25 INS60 INS60 INS25 INS25 INS41 INS42 INS42 INS32 INS42 INS43 INS60 INS60 INS25 INS25 INS60 INS25 INS60 INS54 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS74 INS59 INS39 INS59 INS27 INS8 INS8 INS38 INS8 INS14 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS42 INS32 INS33 INS42 INS21 INS41 INS43 INS43 INS42 INS32 INS42 INS9 INS32 INS34 INS21 INS21 INS25 INS42 INS21 INS41 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS33 INS42 INS60 INS41 INS42 INS33 INS60 INS41 INS42 INS34 INS42 INS33 INS25 INS42 INS42 INS21 INS21 INS60 INS41 INS44 INS8 INS43 INS42 INS42 INS42 INS7 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS7 INS7 INS27 INS8 INS32 INS32 INS42 INS43 INS42 INS42 INS42 INS43 INS59 INS14 INS43 INS59 INS14 INS32 INS8 INS8 INS7 INS32 INS43 INS59 INS42 INS43 INS42 INS60 INS41 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS45 INS42 INS33 INS60 INS60 INS25 INS60 INS70 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS33 INS42 INS42 INS45 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS14 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS39 INS59 INS44 INS42 INS8 INS38 INS8 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS60 INS21 INS21 INS42 INS9 INS43 INS42 INS25 INS42 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS39 INS59 INS7 INS7 INS42 INS27 INS8 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS36 INS36 INS21 INS21 INS10 INS42 INS9 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS27 INS27 INS7 INS7 INS42 INS34 INS32 INS32 INS38 INS32 INS32 INS42 INS9 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42