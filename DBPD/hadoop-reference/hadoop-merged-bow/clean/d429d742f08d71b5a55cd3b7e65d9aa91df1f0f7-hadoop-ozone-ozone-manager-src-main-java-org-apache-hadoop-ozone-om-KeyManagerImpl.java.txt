HDDS-1544. Support default Acls for volume, bucket, keys and prefix. Contributed by Ajay Kumar, Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>

+import org.apache.hadoop.ozone.om.helpers.OmPrefixInfo;
+import org.apache.hadoop.ozone.om.helpers.OmVolumeArgs;
+  private final PrefixManager prefixManager;
-        conf, omId, secretManager, null);
+        conf, omId, secretManager, null, null);
-      KeyProviderCryptoExtension kmsProvider) {
+      KeyProviderCryptoExtension kmsProvider,
+      PrefixManager prefixManager) {
+    this.prefixManager = prefixManager;
-  private void validateS3Bucket(String volumeName, String bucketName)
+  private OmBucketInfo validateS3Bucket(String volumeName, String bucketName)
+    OmBucketInfo omBucketInfo = metadataManager.getBucketTable().
+        get(bucketKey);
-    if (metadataManager.getBucketTable().get(bucketKey) == null) {
+    if (omBucketInfo == null) {
+    return omBucketInfo;
+    OmBucketInfo bucketInfo;
-      OmBucketInfo bucketInfo = getBucketInfo(volumeName, bucketName);
+      bucketInfo = getBucketInfo(volumeName, bucketName);
-      keyInfo = createKeyInfo(args, locations, factor, type, size, encInfo);
+      keyInfo = createKeyInfo(args, locations, factor, type, size,
+          encInfo, bucketInfo);
-    return createKeyInfo(args, locations, factor, type, size, encInfo);
+    return createKeyInfo(args, locations, factor, type, size, encInfo,
+        getBucketInfo(args.getVolumeName(), args.getBucketName()));
-                                  List<OmKeyLocationInfo> locations,
-                                  ReplicationFactor factor,
-                                  ReplicationType type, long size,
-                                  FileEncryptionInfo encInfo) {
+      List<OmKeyLocationInfo> locations,
+      ReplicationFactor factor,
+      ReplicationType type, long size,
+      FileEncryptionInfo encInfo,
+      OmBucketInfo omBucketInfo) {
+    List<OzoneAclInfo> acls = new ArrayList<>();
-      builder.setAcls(keyArgs.getAcls().stream().map(a ->
+      acls.addAll(keyArgs.getAcls().stream().map(a ->
+
+    // Inherit DEFAULT acls from prefix.
+    boolean prefixParentFound = false;
+    if(prefixManager != null) {
+      List<OmPrefixInfo> prefixList = prefixManager.getLongestPrefixPath(
+          OZONE_URI_DELIMITER +
+              keyArgs.getVolumeName() + OZONE_URI_DELIMITER +
+              keyArgs.getBucketName() + OZONE_URI_DELIMITER +
+              keyArgs.getKeyName());
+
+      if(prefixList.size() > 0) {
+        // Add all acls from direct parent to key.
+        OmPrefixInfo prefixInfo = prefixList.get(prefixList.size() - 1);
+        if(prefixInfo  != null) {
+          acls.addAll(OzoneUtils.getDefaultAclsProto(prefixInfo.getAcls()));
+          prefixParentFound = true;
+        }
+      }
+    }
+    if(!prefixParentFound && omBucketInfo != null) {
+      acls.addAll(OzoneUtils.getDefaultAclsProto(omBucketInfo.getAcls()));
+    }
+    builder.setAcls(acls);
-    validateS3Bucket(volumeName, bucketName);
+    OmBucketInfo bucketInfo = validateS3Bucket(volumeName, bucketName);
-          .setAcls(keyArgs.getAcls().stream().map(a ->
-              OzoneAcl.toProtobuf(a)).collect(Collectors.toList()))
+          .setAcls(getAclsForKey(keyArgs, null, bucketInfo))
+  private List<OzoneAclInfo> getAclsForKey(OmKeyArgs keyArgs,
+      OmVolumeArgs volArgs, OmBucketInfo bucketInfo) {
+    List<OzoneAclInfo> acls = new ArrayList<>(keyArgs.getAcls().size());
+
+    keyArgs.getAcls().stream().map(OzoneAcl::toProtobuf).
+        collect(Collectors.toList());
+
+    // Inherit DEFAULT acls from prefix.
+    boolean prefixParentFound = false;
+    if(prefixManager != null) {
+      List<OmPrefixInfo> prefixList = prefixManager.getLongestPrefixPath(
+          OZONE_URI_DELIMITER +
+              keyArgs.getVolumeName() + OZONE_URI_DELIMITER +
+              keyArgs.getBucketName() + OZONE_URI_DELIMITER +
+              keyArgs.getKeyName());
+
+      if(prefixList.size() > 0) {
+        // Add all acls from direct parent to key.
+        OmPrefixInfo prefixInfo = prefixList.get(prefixList.size() - 1);
+        if(prefixInfo  != null) {
+          acls.addAll(OzoneUtils.getDefaultAclsProto(prefixInfo.getAcls()));
+          prefixParentFound = true;
+        }
+      }
+    }
+
+    // Inherit DEFAULT acls from bucket only if DEFAULT acls for
+    // prefix are not set.
+    if (!prefixParentFound && bucketInfo != null) {
+      acls.addAll(bucketInfo.getAcls().stream().filter(a -> a.getAclScope()
+          .equals(OzoneAcl.AclScope.DEFAULT))
+          .map(OzoneAcl::toProtobufWithAccessType)
+          .collect(Collectors.toList()));
+    }
+
+    return acls;
+  }
+
-
+    OmBucketInfo bucketInfo;
+              .setAclScope(a.getAclScope())
+                .setAclScope(a.getAclScope())

INS26 INS26 INS40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS44 INS43 INS44 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS43 INS42 INS21 INS42 INS60 INS41 INS60 INS43 INS42 INS60 INS60 INS25 INS25 INS21 INS60 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS21 INS60 INS25 INS25 INS41 INS60 INS33 INS42 INS7 INS43 INS59 INS42 MOV43 INS59 INS42 INS74 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS32 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS43 INS59 INS22 INS42 INS42 INS42 MOV32 INS42 INS42 INS21 INS32 INS43 INS43 INS42 INS14 INS42 INS9 INS42 INS33 INS60 INS25 INS38 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS32 INS42 INS32 INS42 INS9 INS42 INS33 INS60 INS25 INS38 INS27 INS21 INS42 INS42 INS52 INS42 INS7 INS42 INS32 INS32 INS42 INS42 INS74 INS74 INS59 INS27 INS8 INS42 INS42 INS33 INS32 MOV42 MOV42 MOV42 INS42 INS42 INS74 INS32 INS32 INS42 INS90 INS42 INS42 INS74 INS59 INS27 INS8 INS42 INS42 INS33 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS43 UPD42 UPD42 INS43 INS43 INS42 INS32 INS32 INS34 INS60 INS25 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS34 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS32 INS42 INS90 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS7 INS32 INS42 INS86 INS42 INS42 INS7 INS32 INS34 INS42 INS42 INS32 INS42 INS9 INS32 INS34 INS42 INS42 INS32 INS42 INS9 INS32 INS42 INS59 INS32 INS42 INS32 MOV21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 MOV32 INS42 INS32 INS42 INS42 INS32 MOV32 INS42 INS32 INS42 INS42 DEL39 DEL42 DEL59 DEL60 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21