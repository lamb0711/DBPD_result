Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1196458 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.Timer;
+import java.util.TimerTask;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ThreadFactory;
-import org.apache.hadoop.security.SecurityInfo;
-import org.apache.hadoop.yarn.conf.YarnConfiguration;
-import org.apache.hadoop.yarn.security.ContainerManagerSecurityInfo;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+
-  private static final Log LOG = LogFactory.getLog(ContainerLauncherImpl.class);
+  static final Log LOG = LogFactory.getLog(ContainerLauncherImpl.class);
+
+  int nmTimeOut;
-  //have a cache/map of UGIs so as to avoid creating too many RPC
-  //client connection objects to the same NodeManager
-  private ConcurrentMap<String, UserGroupInformation> ugiMap = 
-    new ConcurrentHashMap<String, UserGroupInformation>();
+
+  // To track numNodes.
+  Set<String> allNodes = new HashSet<String>();
+
+  // have a cache/map of proxies so as to avoid creating multiple RPC
+  // client connection objects for the same container.
+  private Map<ContainerId, ContainerManager> clientCache
+    = new HashMap<ContainerId, ContainerManager>();
+    this.nmTimeOut = conf.getInt(ContainerLauncher.MR_AM_NM_COMMAND_TIMEOUT,
+        ContainerLauncher.DEFAULT_NM__COMMAND_TIMEOUT);
+
+    ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(
+        "ContainerLauncher #%d").setDaemon(true).build();
+
-        new LinkedBlockingQueue<Runnable>());
+        new LinkedBlockingQueue<Runnable>(),
+        tf);
-            int numNodes = ugiMap.size();
+            int numNodes = allNodes.size();
-              launcherPool.setCorePoolSize(idealPoolSize + INITIAL_POOL_SIZE);
+              int newPoolSize = idealPoolSize + INITIAL_POOL_SIZE;
+              LOG.info("Setting ContainerLauncher pool size to "
+                  + newPoolSize);
+              launcherPool.setCorePoolSize(newPoolSize);
+    eventHandlingThread.setName("ContainerLauncher Event Handler");
-    launcherPool.shutdown();
+    launcherPool.shutdownNow();
-    if (UserGroupInformation.isSecurityEnabled()) {
+    synchronized (this.clientCache) {
-      Token<ContainerTokenIdentifier> token = new Token<ContainerTokenIdentifier>(
-          containerToken.getIdentifier().array(), containerToken
-              .getPassword().array(), new Text(containerToken.getKind()),
-          new Text(containerToken.getService()));
-      // the user in createRemoteUser in this context is not important
-      UserGroupInformation ugi = UserGroupInformation
-          .createRemoteUser(containerManagerBindAddr);
-      ugi.addToken(token);
-      ugiMap.putIfAbsent(containerManagerBindAddr, ugi);
+      if (this.clientCache.containsKey(containerID)) {
+        return this.clientCache.get(containerID);
+      }
-      user = ugiMap.get(containerManagerBindAddr);    
+      this.allNodes.add(containerManagerBindAddr);
+
+      if (UserGroupInformation.isSecurityEnabled()) {
+        Token<ContainerTokenIdentifier> token = new Token<ContainerTokenIdentifier>(
+            containerToken.getIdentifier().array(), containerToken
+                .getPassword().array(), new Text(containerToken.getKind()),
+            new Text(containerToken.getService()));
+        // the user in createRemoteUser in this context has to be ContainerID
+        user = UserGroupInformation.createRemoteUser(containerID.toString());
+        user.addToken(token);
+      }
+
+      ContainerManager proxy = user
+          .doAs(new PrivilegedAction<ContainerManager>() {
+            @Override
+            public ContainerManager run() {
+              YarnRPC rpc = YarnRPC.create(getConfig());
+              return (ContainerManager) rpc.getProxy(ContainerManager.class,
+                  NetUtils.createSocketAddr(containerManagerBindAddr),
+                  getConfig());
+            }
+          });
+      this.clientCache.put(containerID, proxy);
+      return proxy;
-    ContainerManager proxy =
-        user.doAs(new PrivilegedAction<ContainerManager>() {
-          @Override
-          public ContainerManager run() {
-            YarnRPC rpc = YarnRPC.create(getConfig());
-            return (ContainerManager) rpc.getProxy(ContainerManager.class,
-                NetUtils.createSocketAddr(containerManagerBindAddr),
-                getConfig());
-          }
-        });
-    return proxy;
+  }
+
+  private static class CommandTimer extends TimerTask {
+    private final Thread commandThread;
+    protected final ContainerLauncherEvent event;
+    protected final String message;
+
+    public CommandTimer(Thread thread, ContainerLauncherEvent event) {
+      this.commandThread = thread;
+      this.event = event;
+      this.message = "Couldn't complete " + event.getType() + " on "
+          + event.getContainerID() + "/" + event.getTaskAttemptID()
+          + ". Interrupting and returning";
+    }
+
+    @Override
+    public void run() {
+      LOG.warn(this.message);
+      this.commandThread.interrupt();
+    }
+      TaskAttemptId taskAttemptID = event.getTaskAttemptID();
+
+      Timer timer = new Timer(true);
-        ContainerRemoteLaunchEvent launchEv = (ContainerRemoteLaunchEvent) event;
+        ContainerRemoteLaunchEvent launchEvent
+            = (ContainerRemoteLaunchEvent) event;
-        TaskAttemptId taskAttemptID = launchEv.getTaskAttemptID();
-          
-          ContainerManager proxy = 
-            getCMProxy(containerID, containerManagerBindAddr, containerToken);
-          
+          timer.schedule(new CommandTimer(Thread.currentThread(), event),
+              nmTimeOut);
+
+          ContainerManager proxy = getCMProxy(containerID,
+              containerManagerBindAddr, containerToken);
+
+          // Interruped during getProxy, but that didn't throw exception
+          if (Thread.currentThread().isInterrupted()) {
+            // The timer cancelled the command in the mean while.
+            String message = "Start-container for " + event.getContainerID()
+                + " got interrupted. Returning.";
+            sendContainerLaunchFailedMsg(taskAttemptID, message);
+            return;
+          }
+
-              launchEv.getContainer();
+              launchEvent.getContainer();
+
+          // container started properly. Stop the timer
+          timer.cancel();
+          if (Thread.currentThread().isInterrupted()) {
+            // The timer cancelled the command in the mean while, but
+            // startContainer didn't throw exception
+            String message = "Start-container for " + event.getContainerID()
+                + " got interrupted. Returning.";
+            sendContainerLaunchFailedMsg(taskAttemptID, message);
+            return;
+          }
+
-          LOG.error(message);
-          context.getEventHandler().handle(
-              new TaskAttemptDiagnosticsUpdateEvent(taskAttemptID, message));
-          context.getEventHandler().handle(
-              new TaskAttemptEvent(taskAttemptID,
-                  TaskAttemptEventType.TA_CONTAINER_LAUNCH_FAILED));
+          sendContainerLaunchFailedMsg(taskAttemptID, message);
+        } finally {
+          timer.cancel();
-              new ContainerAllocatorEvent(event.getTaskAttemptID(),
-              ContainerAllocator.EventType.CONTAINER_DEALLOCATE));
+              new ContainerAllocatorEvent(taskAttemptID,
+                  ContainerAllocator.EventType.CONTAINER_DEALLOCATE));
+
-            ContainerManager proxy = 
-              getCMProxy(containerID, containerManagerBindAddr, containerToken);
-            // TODO:check whether container is launched
+            timer.schedule(new CommandTimer(Thread.currentThread(), event),
+                nmTimeOut);
-            // kill the remote container if already launched
-            StopContainerRequest stopRequest = recordFactory
-                .newRecordInstance(StopContainerRequest.class);
-            stopRequest.setContainerId(event.getContainerID());
-            proxy.stopContainer(stopRequest);
+            ContainerManager proxy = getCMProxy(containerID,
+                containerManagerBindAddr, containerToken);
+            if (Thread.currentThread().isInterrupted()) {
+              // The timer cancelled the command in the mean while. No need to
+              // return, send cleanedup event anyways.
+              LOG.info("Stop-container for " + event.getContainerID()
+                  + " got interrupted.");
+            } else {
+
+              // TODO:check whether container is launched
+
+              // kill the remote container if already launched
+              StopContainerRequest stopRequest = recordFactory
+                  .newRecordInstance(StopContainerRequest.class);
+              stopRequest.setContainerId(event.getContainerID());
+              proxy.stopContainer(stopRequest);
+            }
-            //ignore the cleanup failure
-            LOG.warn("cleanup failed for container " + event.getContainerID() ,
-                t);
+            // ignore the cleanup failure
+            String message = "cleanup failed for container "
+                + event.getContainerID() + " : "
+                + StringUtils.stringifyException(t);
+            context.getEventHandler()
+                .handle(
+                    new TaskAttemptDiagnosticsUpdateEvent(taskAttemptID,
+                        message));
+            LOG.warn(message);
+          } finally {
+            timer.cancel();
-    
+  }
+
+  @SuppressWarnings("unchecked")
+  void sendContainerLaunchFailedMsg(TaskAttemptId taskAttemptID,
+      String message) {
+    LOG.error(message);
+    context.getEventHandler().handle(
+        new TaskAttemptDiagnosticsUpdateEvent(taskAttemptID, message));
+    context.getEventHandler().handle(
+        new TaskAttemptEvent(taskAttemptID,
+            TaskAttemptEventType.TA_CONTAINER_LAUNCH_FAILED));

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 UPD40 INS40 UPD40 UPD40 INS40 INS40 UPD40 UPD40 INS23 INS23 INS55 INS31 INS39 INS59 INS74 INS59 UPD74 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS79 INS39 INS42 INS44 INS44 MOV8 INS42 INS43 MOV43 INS42 INS14 UPD43 UPD43 INS43 UPD42 INS21 INS60 INS21 INS51 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS45 INS43 INS42 INS43 INS42 INS42 INS74 UPD42 UPD42 INS42 UPD74 INS7 INS43 INS59 INS32 INS22 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS21 INS21 INS60 INS60 INS42 INS42 INS43 MOV43 UPD43 UPD43 INS43 INS22 INS32 INS42 INS42 INS32 INS42 INS42 INS45 UPD42 INS52 INS42 INS25 INS21 MOV25 MOV60 INS21 MOV41 INS42 INS42 INS7 INS7 INS7 INS32 INS32 MOV43 INS59 INS43 INS59 INS42 UPD42 UPD42 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS32 INS8 INS32 INS32 INS22 INS42 INS22 INS42 INS22 INS27 INS42 INS42 INS22 INS22 INS42 INS42 MOV32 INS42 INS42 INS14 INS8 INS32 INS42 INS9 INS22 INS42 INS42 INS41 INS22 INS42 INS42 INS21 INS22 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS52 INS42 INS52 INS42 INS43 INS9 UPD42 INS21 INS25 INS21 INS25 INS8 INS21 INS14 INS42 INS45 INS52 INS42 INS32 INS52 INS42 INS7 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS32 INS32 INS8 MOV60 INS21 INS32 INS8 INS12 INS8 INS43 INS22 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS14 INS42 INS32 INS42 INS60 INS21 INS41 INS42 INS42 INS32 INS42 INS60 INS21 INS41 INS32 INS42 INS42 INS21 MOV60 INS25 MOV44 INS8 INS21 INS42 INS52 INS42 MOV42 MOV42 INS32 INS43 INS32 INS42 INS42 INS42 INS43 INS59 INS32 UPD42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS8 MOV8 INS60 INS21 INS21 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 MOV21 INS43 INS59 INS32 INS32 INS42 INS42 INS45 INS32 INS45 INS45 INS32 INS45 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS45 INS32 INS45 INS32 INS42 INS42 INS43 INS42 INS42 UPD45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS21 UPD42 INS39 INS59 INS32 INS42 MOV27 INS42 INS42 INS27 INS42 INS45 INS42 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL8 DEL12