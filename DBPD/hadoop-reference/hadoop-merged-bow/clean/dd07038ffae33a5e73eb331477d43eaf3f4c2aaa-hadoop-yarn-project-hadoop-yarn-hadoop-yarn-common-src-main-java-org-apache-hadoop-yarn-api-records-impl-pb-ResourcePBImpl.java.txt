YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)

Change-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595

-
-      pb = (ResourcePBImpl)r;
+      pb = (ResourcePBImpl) r;
+      for(ResourceInformation res : r.getResources()) {
+        pb.setResourceInformation(res.getName(), res);
+      }
-    getResourceInformation(ResourceInformation.MEMORY_URI).setValue(memory);
+    resources[MEMORY_INDEX].setValue(memory);
-    getResourceInformation(ResourceInformation.VCORES_URI).setValue(vCores);
+    resources[VCORES_INDEX].setValue(vCores);
-    initResourcesMap();
+    ResourceInformation[] types = ResourceUtils.getResourceTypesArray();
-    for (ResourceInformationProto entry : p.getResourceValueMapList()) {
-      ResourceTypes type =
-          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :
-              ResourceTypes.COUNTABLE;
+    resources = new ResourceInformation[types.length];
-      // When unit not specified in proto, use the default unit.
-      String units =
-          entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(
-              entry.getKey());
-      long value = entry.hasValue() ? entry.getValue() : 0L;
-      ResourceInformation ri = ResourceInformation
-          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);
+    for (ResourceInformationProto entry : p.getResourceValueMapList()) {
-        LOG.warn("Got unknown resource type: " + ri.getName() + "; skipping");
+        LOG.warn("Got unknown resource type: " + entry.getKey() + "; skipping");
-        resources[index].setResourceType(ri.getResourceType());
-        resources[index].setUnits(ri.getUnits());
-        resources[index].setValue(value);
+        resources[index] = newDefaultInformation(types[index], entry);
+
+    resources[MEMORY_INDEX] = ResourceInformation
+        .newInstance(ResourceInformation.MEMORY_MB);
+    resources[VCORES_INDEX] = ResourceInformation
+        .newInstance(ResourceInformation.VCORES);
+
+    // Update missing resource information on respective index.
+    updateResourceInformationMap(types);
+  }
+
+  private void updateResourceInformationMap(ResourceInformation[] types) {
+    for (int i = 0; i < types.length; i++) {
+      if (resources[i] == null) {
+        resources[i] = ResourceInformation.newInstance(types[i]);
+      }
+    }
+  }
+
+  private static ResourceInformation newDefaultInformation(
+      ResourceInformation resourceInformation, ResourceInformationProto entry) {
+    ResourceInformation ri = new ResourceInformation();
+    ri.setName(resourceInformation.getName());
+    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());
+    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());
+    ri.setResourceType(entry.hasType()
+        ? ProtoUtils.convertFromProtoFormat(entry.getType())
+        : ResourceTypes.COUNTABLE);
+    ri.setUnits(
+        entry.hasUnits() ? entry.getUnits() : resourceInformation.getUnits());
+    ri.setValue(entry.hasValue() ? entry.getValue() : 0L);
+    return ri;
-    if (!resource.equals(resourceInformation.getName())) {
-      resourceInformation.setName(resource);
-    }
-    ResourceInformation storedResourceInfo = getResourceInformation(resource);
+    ResourceInformation storedResourceInfo = super.getResourceInformation(
+        resource);
-  private void initResourcesMap() {
-    if (resources == null) {
-      ResourceInformation[] types = ResourceUtils.getResourceTypesArray();
-      if (types == null) {
-        throw new YarnRuntimeException(
-            "Got null return value from ResourceUtils.getResourceTypes()");
-      }
-
-      resources = new ResourceInformation[types.length];
-      for (ResourceInformation entry : types) {
-        int index = ResourceUtils.getResourceTypeIndex().get(entry.getName());
-        resources[index] = ResourceInformation.newInstance(entry);
-      }
-    }
-  }
-
-    if(resources != null && resources.length != 0) {
+    if (resources != null && resources.length != 0) {
-}  
+}

INS31 INS31 MOV83 MOV39 UPD42 MOV42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 MOV60 MOV21 INS70 MOV21 MOV21 INS21 INS5 INS42 INS24 INS42 INS43 INS42 UPD43 MOV43 MOV42 INS60 INS21 INS21 MOV21 INS21 INS21 INS21 INS41 INS60 MOV44 MOV32 INS8 INS7 INS7 INS32 MOV43 MOV85 INS58 INS27 INS37 INS8 MOV42 UPD42 INS43 INS59 MOV32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 MOV59 INS70 INS2 INS2 INS85 UPD42 MOV42 MOV60 INS25 INS2 INS32 INS2 INS32 INS42 INS42 INS39 INS59 INS42 INS40 INS42 MOV25 INS42 UPD42 MOV42 INS14 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS32 INS42 INS42 MOV16 INS42 INS42 MOV16 INS42 INS42 MOV16 INS42 INS48 INS44 INS32 INS8 INS42 INS42 INS42 INS42 MOV27 MOV8 INS8 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS34 MOV43 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS42 INS42 INS21 MOV21 INS2 INS21 UPD42 UPD42 INS42 INS32 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS32 INS42 MOV2 INS32 INS2 INS32 INS42 INS42 MOV32 INS42 INS2 UPD42 MOV42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL2 DEL42 DEL32 DEL32 DEL2 DEL32 DEL43 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL40 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL60 DEL42 DEL33 DEL27 DEL44 DEL42 DEL39 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL70 DEL8 DEL25 DEL8 DEL31