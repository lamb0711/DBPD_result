YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)

-import org.apache.hadoop.yarn.server.timeline.GenericObjectMapper;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.GenericConverter;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.NumericValueConverter;
+import org.apache.hadoop.yarn.server.timelineservice.storage.common.ValueConverter;
+   * Get value converter associated with a column or a column prefix. If nothing
+   * matches, generic converter is returned.
+   * @param colQualifierBytes
+   * @return value converter implementation.
+   */
+  private static ValueConverter getValueConverter(byte[] colQualifierBytes) {
+    // Iterate over all the column prefixes for flow run table and get the
+    // appropriate converter for the column qualifier passed if prefix matches.
+    for (FlowRunColumnPrefix colPrefix : FlowRunColumnPrefix.values()) {
+      byte[] colPrefixBytes = colPrefix.getColumnPrefixBytes("");
+      if (Bytes.compareTo(colPrefixBytes, 0, colPrefixBytes.length,
+          colQualifierBytes, 0, colPrefixBytes.length) == 0) {
+        return colPrefix.getValueConverter();
+      }
+    }
+    // Iterate over all the columns for flow run table and get the
+    // appropriate converter for the column qualifier passed if match occurs.
+    for (FlowRunColumn column : FlowRunColumn.values()) {
+      if (Bytes.compareTo(
+          column.getColumnQualifierBytes(), colQualifierBytes) == 0) {
+        return column.getValueConverter();
+      }
+    }
+    // Return generic converter if nothing matches.
+    return GenericConverter.getInstance();
+  }
+
+  /**
+   * Checks if the converter is a numeric converter or not. For a converter to
+   * be numeric, it must implement {@link NumericValueConverter} interface.
+   * @param converter
+   * @return true, if converter is of type NumericValueConverter, false
+   * otherwise.
+   */
+  private static boolean isNumericConverter(ValueConverter converter) {
+    return (converter instanceof NumericValueConverter);
+  }
+
+  /**
+    ValueConverter converter = null;
-        addedCnt += emitCells(cells, currentColumnCells, currentAggOp);
+        if (converter != null && isNumericConverter(converter)) {
+          addedCnt += emitCells(cells, currentColumnCells, currentAggOp,
+              (NumericValueConverter)converter);
+        }
+        converter = getValueConverter(newColumnQualifier);
-      collectCells(currentColumnCells, currentAggOp, cell, alreadySeenAggDim);
+      // No operation needs to be performed on non numeric converters.
+      if (!isNumericConverter(converter)) {
+        nextCell(limit);
+        continue;
+      }
+      collectCells(currentColumnCells, currentAggOp, cell, alreadySeenAggDim,
+          (NumericValueConverter)converter);
-      emitCells(cells, currentColumnCells, currentAggOp);
+      emitCells(cells, currentColumnCells, currentAggOp,
+          (NumericValueConverter)converter);
-      Set<String> alreadySeenAggDim) throws IOException {
+      Set<String> alreadySeenAggDim, NumericValueConverter converter)
+      throws IOException {
-        Cell newMinCell = compareCellValues(currentMinCell, cell, currentAggOp);
+        Cell newMinCell = compareCellValues(currentMinCell, cell, currentAggOp,
+            converter);
-        Cell newMaxCell = compareCellValues(currentMaxCell, cell, currentAggOp);
+        Cell newMaxCell = compareCellValues(currentMaxCell, cell, currentAggOp,
+            converter);
-      AggregationOperation currentAggOp) throws IOException {
+      AggregationOperation currentAggOp, NumericValueConverter converter)
+      throws IOException {
-      Cell sumCell = processSummation(currentColumnCells);
+      Cell sumCell = processSummation(currentColumnCells, converter);
-  private Cell processSummation(SortedSet<Cell> currentColumnCells)
-      throws IOException {
+  private Cell processSummation(SortedSet<Cell> currentColumnCells,
+      NumericValueConverter converter) throws IOException {
-    long mostCurrentTimestamp = 0l;
+    long mostCurrentTimestamp = 0L;
-      currentValue = (Number) GenericObjectMapper.read(CellUtil
-          .cloneValue(cell));
+      currentValue = (Number) converter.decodeValue(CellUtil.cloneValue(cell));
-      sum = sum.longValue() + currentValue.longValue();
+      sum = converter.add(sum, currentValue);
-    Cell sumCell = createNewCell(mostRecentCell, sum);
+    byte[] sumBytes = converter.encodeValue(sum);
+    Cell sumCell = createNewCell(mostRecentCell, sumBytes);
-      AggregationOperation currentAggOp) throws IOException {
+      AggregationOperation currentAggOp, NumericValueConverter converter)
+      throws IOException {
-      long previouslyChosenCellValue = ((Number) GenericObjectMapper
-          .read(CellUtil.cloneValue(previouslyChosenCell))).longValue();
-      long currentCellValue = ((Number) GenericObjectMapper.read(CellUtil
-          .cloneValue(currentCell))).longValue();
+      Number previouslyChosenCellValue = (Number)converter.decodeValue(
+          CellUtil.cloneValue(previouslyChosenCell));
+      Number currentCellValue = (Number) converter.decodeValue(CellUtil
+          .cloneValue(currentCell));
-        if (currentCellValue < previouslyChosenCellValue) {
+        if (converter.compare(
+            currentCellValue, previouslyChosenCellValue) < 0) {
-        if (currentCellValue > previouslyChosenCellValue) {
+        if (converter.compare(
+            currentCellValue, previouslyChosenCellValue) > 0) {
-  private Cell createNewCell(Cell origCell, Number number) throws IOException {
-    byte[] newValue = GenericObjectMapper.write(number);
+  private Cell createNewCell(Cell origCell, byte[] newValue)
+      throws IOException {

INS26 INS26 UPD40 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS44 INS44 INS44 INS44 INS65 INS65 INS65 INS42 INS5 INS42 INS70 INS70 INS41 INS65 INS65 INS65 INS43 INS42 INS41 INS60 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS43 INS42 INS5 UPD42 INS66 INS66 INS42 INS66 INS39 INS85 INS44 INS32 INS8 INS44 INS32 INS8 INS32 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS36 INS43 INS59 INS42 INS42 INS42 MOV5 INS59 MOV43 MOV59 INS42 INS39 INS85 INS43 INS42 INS42 INS42 INS60 INS25 INS43 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS62 INS42 INS42 INS33 INS25 UPD34 INS42 INS32 MOV25 MOV49 INS42 INS5 INS59 INS27 INS8 INS42 INS27 INS8 INS42 INS43 INS38 INS8 MOV42 INS42 INS42 INS42 UPD42 MOV43 INS43 INS39 INS85 INS42 INS32 INS32 INS34 INS41 INS32 INS34 INS41 INS42 INS25 INS21 INS32 INS21 INS18 INS11 INS11 INS43 INS42 INS32 MOV11 INS42 MOV11 UPD27 UPD27 INS42 INS42 INS45 INS42 INS42 INS42 INS34 INS40 INS42 INS34 INS40 INS32 INS42 INS42 INS32 INS42 INS32 INS27 INS8 INS7 INS42 INS42 INS32 INS43 INS42 INS43 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS32 MOV21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL60 DEL39 DEL36 DEL42 DEL32 DEL39 DEL36 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60