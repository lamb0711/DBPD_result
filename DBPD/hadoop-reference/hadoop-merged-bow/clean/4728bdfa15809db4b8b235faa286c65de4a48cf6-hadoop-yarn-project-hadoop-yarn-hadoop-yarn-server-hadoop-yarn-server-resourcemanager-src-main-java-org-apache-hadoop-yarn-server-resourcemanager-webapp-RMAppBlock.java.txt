YARN-3248. Display count of nodes blacklisted by apps in the web UI.
Contributed by Varun Vasudev

+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.yarn.api.protocolrecords.GetContainerReportRequest;
+import org.apache.hadoop.yarn.api.records.ApplicationAttemptReport;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.api.records.ContainerReport;
+import org.apache.hadoop.yarn.exceptions.ContainerNotFoundException;
+import org.apache.hadoop.yarn.server.webapp.dao.AppAttemptInfo;
+import org.apache.hadoop.yarn.server.webapp.dao.ContainerInfo;
+import org.apache.hadoop.yarn.util.ConverterUtils;
+import java.security.PrivilegedExceptionAction;
+import java.util.Collection;
+import java.util.Set;
+
+  private static final Log LOG = LogFactory.getLog(RMAppBlock.class);
+
+
+  @Override
+  protected void generateApplicationTable(Block html,
+      UserGroupInformation callerUGI,
+      Collection<ApplicationAttemptReport> attempts) {
+    // Application Attempt Table
+    Hamlet.TBODY<Hamlet.TABLE<Hamlet>> tbody =
+        html.table("#attempts").thead().tr().th(".id", "Attempt ID")
+            .th(".started", "Started").th(".node", "Node").th(".logs", "Logs")
+            .th(".blacklistednodes", "Blacklisted Nodes")._()._().tbody();
+
+    StringBuilder attemptsTableData = new StringBuilder("[\n");
+    for (final ApplicationAttemptReport appAttemptReport : attempts) {
+      AppAttemptInfo appAttempt = new AppAttemptInfo(appAttemptReport);
+      ContainerReport containerReport = null;
+      try {
+        // AM container is always the first container of the attempt
+        final GetContainerReportRequest request =
+            GetContainerReportRequest.newInstance(ContainerId.newContainerId(
+                appAttemptReport.getApplicationAttemptId(), 1));
+        if (callerUGI == null) {
+          containerReport =
+              appBaseProt.getContainerReport(request).getContainerReport();
+        } else {
+          containerReport = callerUGI.doAs(
+              new PrivilegedExceptionAction<ContainerReport>() {
+                @Override
+                public ContainerReport run() throws Exception {
+                  ContainerReport report = null;
+                  try {
+                    report = appBaseProt.getContainerReport(request)
+                        .getContainerReport();
+                  } catch (ContainerNotFoundException ex) {
+                    LOG.warn(ex.getMessage());
+                  }
+                  return report;
+                }
+              });
+        }
+      } catch (Exception e) {
+        String message =
+            "Failed to read the AM container of the application attempt "
+                + appAttemptReport.getApplicationAttemptId() + ".";
+        LOG.error(message, e);
+        html.p()._(message)._();
+        return;
+      }
+      long startTime = 0L;
+      String logsLink = null;
+      String nodeLink = null;
+      if (containerReport != null) {
+        ContainerInfo container = new ContainerInfo(containerReport);
+        startTime = container.getStartedTime();
+        logsLink = containerReport.getLogUrl();
+        nodeLink = containerReport.getNodeHttpAddress();
+      }
+      String blacklistedNodesCount = "N/A";
+      Set<String> nodes = RMAppAttemptBlock.getBlacklistedNodes(rm,
+          ConverterUtils.toApplicationAttemptId(appAttempt.getAppAttemptId()));
+      if(nodes != null) {
+        blacklistedNodesCount = String.valueOf(nodes.size());
+      }
+
+      // AppAttemptID numerical value parsed by parseHadoopID in
+      // yarn.dt.plugins.js
+      attemptsTableData
+          .append("[\"<a href='")
+          .append(url("appattempt", appAttempt.getAppAttemptId()))
+          .append("'>")
+          .append(appAttempt.getAppAttemptId())
+          .append("</a>\",\"")
+          .append(startTime)
+          .append("\",\"<a ")
+          .append(nodeLink == null ? "#" : "href='" + nodeLink)
+          .append("'>")
+          .append(nodeLink == null ? "N/A" : StringEscapeUtils
+              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))
+          .append("</a>\",\"<a ")
+          .append(logsLink == null ? "#" : "href='" + logsLink).append("'>")
+          .append(logsLink == null ? "N/A" : "Logs").append("</a>\",").append(
+          "\"").append(blacklistedNodesCount).append("\"],\n");
+    }
+    if (attemptsTableData.charAt(attemptsTableData.length() - 2) == ',') {
+      attemptsTableData.delete(attemptsTableData.length() - 2,
+          attemptsTableData.length() - 1);
+    }
+    attemptsTableData.append("]");
+    html.script().$type("text/javascript")
+        ._("var attemptsTableData=" + attemptsTableData)._();
+
+    tbody._()._();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS60 INS70 INS25 INS21 INS21 INS21 INS42 INS42 INS57 INS42 INS42 INS43 INS43 INS74 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS32 INS32 INS32 INS43 INS42 INS42 INS43 INS74 INS42 INS32 INS42 INS42 INS14 INS83 INS43 INS42 INS60 INS60 INS54 INS60 INS60 INS60 INS25 INS60 INS60 INS25 INS21 INS32 INS13 INS21 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS42 INS40 INS43 INS43 INS32 INS42 INS43 INS45 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS39 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS27 INS32 INS32 INS42 INS27 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS33 INS60 INS25 INS44 INS8 INS42 INS34 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS33 INS60 INS21 INS21 INS21 INS42 INS42 INS45 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS32 INS42 INS45 INS32 INS34 INS42 INS42 INS27 INS27 INS32 INS42 INS45 INS45 INS42 INS32 INS42 INS43 INS42 INS83 INS43 INS59 INS27 INS8 INS8 INS43 INS42 INS60 INS21 INS21 INS41 INS43 INS59 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS34 INS42 INS42 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS45 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS45 INS42 INS42 INS32 INS34 INS42 INS32 INS42 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS16 INS32 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS27 INS45 INS45 INS32 INS42 INS45 INS45 INS42 INS42 INS42 INS74 INS1 INS32 INS42 INS16 INS42 INS33 INS32 INS42 INS43 INS43 INS31 INS32 INS42 INS45 INS27 INS45 INS27 INS32 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS32 INS42 INS16 INS42 INS33 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS60 INS54 INS41 INS32 INS42 INS45 INS27 INS45 INS32 INS43 INS59 INS8 INS12 INS42 INS32 INS42 INS16 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS42 INS45 INS27 INS45 INS27 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS32 INS42 INS42 INS42 INS33 INS45 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42