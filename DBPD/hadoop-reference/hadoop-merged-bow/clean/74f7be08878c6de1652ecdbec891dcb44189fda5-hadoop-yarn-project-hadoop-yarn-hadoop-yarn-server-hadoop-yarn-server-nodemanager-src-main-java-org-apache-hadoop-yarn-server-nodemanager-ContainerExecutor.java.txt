merge from trunk r1617527

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1617532 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import org.apache.commons.io.FileUtils;
-import org.apache.hadoop.util.Shell.ShellCommandExecutor;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch;
+  public abstract boolean isContainerProcessAlive(String user, String pid)
+      throws IOException;
+
+  /**
+   * Recover an already existing container. This is a blocking call and returns
+   * only when the container exits.  Note that the container must have been
+   * activated prior to this call.
+   * @param user the user of the container
+   * @param containerId The ID of the container to reacquire
+   * @return The exit code of the pre-existing container
+   * @throws IOException
+   */
+  public int reacquireContainer(String user, ContainerId containerId)
+      throws IOException {
+    Path pidPath = getPidFilePath(containerId);
+    if (pidPath == null) {
+      LOG.warn(containerId + " is not active, returning terminated error");
+      return ExitCode.TERMINATED.getExitCode();
+    }
+
+    String pid = null;
+    pid = ProcessIdFileReader.getProcessId(pidPath);
+    if (pid == null) {
+      throw new IOException("Unable to determine pid for " + containerId);
+    }
+
+    LOG.info("Reacquiring " + containerId + " with pid " + pid);
+    try {
+      while(isContainerProcessAlive(user, pid)) {
+        Thread.sleep(1000);
+      }
+    } catch (InterruptedException e) {
+      throw new IOException("Interrupted while waiting for process " + pid
+          + " to exit", e);
+    }
+
+    // wait for exit code file to appear
+    String exitCodeFile = ContainerLaunch.getExitCodeFile(pidPath.toString());
+    File file = new File(exitCodeFile);
+    final int sleepMsec = 100;
+    int msecLeft = 2000;
+    while (!file.exists() && msecLeft >= 0) {
+      if (!isContainerActive(containerId)) {
+        LOG.info(containerId + " was deactivated");
+        return ExitCode.TERMINATED.getExitCode();
+      }
+      try {
+        Thread.sleep(sleepMsec);
+      } catch (InterruptedException e) {
+        throw new IOException(
+            "Interrupted while waiting for exit code from " + containerId, e);
+      }
+      msecLeft -= sleepMsec;
+    }
+    if (msecLeft < 0) {
+      throw new IOException("Timeout while waiting for exit code from "
+          + containerId);
+    }
+
+    try {
+      return Integer.parseInt(FileUtils.readFileToString(file).trim());
+    } catch (NumberFormatException e) {
+      throw new IOException("Error parsing exit code from pid " + pid, e);
+    }
+  }
+
-    TERMINATED(143);
+    TERMINATED(143),
+    LOST(154);

MOV26 INS26 INS26 INS40 UPD40 INS40 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS72 INS43 INS42 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS60 INS21 INS25 INS21 INS54 INS60 INS60 INS60 INS60 INS61 INS25 INS54 INS42 INS34 INS42 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS7 INS27 INS8 INS32 INS8 INS12 INS43 INS59 INS43 INS59 INS83 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS8 INS12 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS33 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS27 INS61 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS34 INS42 INS34 INS38 INS27 INS25 INS54 INS21 INS42 INS34 INS53 INS41 INS44 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS14 INS45 INS42 INS45 INS42 INS32 INS8 INS43 INS42 INS53 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS34 INS38 INS8 INS8 INS12 INS7 INS14 INS32 INS43 INS42 INS53 INS42 INS42 INS27 INS40 INS42 INS43 INS27 INS42 INS42 INS42 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS41 INS21 INS44 INS8 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS14 INS42 INS45 INS42 INS45 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS53 INS42 INS45 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS34 INS42 INS45 INS42 INS45 INS42 INS42 INS27 INS40 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS27 INS42 INS42 INS45 INS42