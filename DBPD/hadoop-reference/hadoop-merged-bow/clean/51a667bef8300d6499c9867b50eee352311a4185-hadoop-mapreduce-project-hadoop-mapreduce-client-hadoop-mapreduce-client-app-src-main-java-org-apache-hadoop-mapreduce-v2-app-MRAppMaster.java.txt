MAPREDUCE-2762. Cleanup MR staging directory on completion. Contributed by Mahadev Konar.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185880 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.mapreduce.jobhistory.JobFinishedEvent;
+  
+  protected boolean keepJobFiles(JobConf conf) {
+    return (conf.getKeepTaskFilesPattern() != null || conf
+        .getKeepFailedTaskFiles());
+  }
+  
+  /**
+   * Create the default file System for this job.
+   * @param conf the conf object
+   * @return the default filesystem for this job
+   * @throws IOException
+   */
+  protected FileSystem getFileSystem(Configuration conf) throws IOException {
+    return FileSystem.get(conf);
+  }
+  
+  /**
+   * clean up staging directories for the job.
+   * @throws IOException
+   */
+  public void cleanupStagingDir() throws IOException {
+    /* make sure we clean the staging files */
+    String jobTempDir = null;
+    FileSystem fs = getFileSystem(getConfig());
+    try {
+      if (!keepJobFiles(new JobConf(getConfig()))) {
+        jobTempDir = getConfig().get(MRJobConfig.MAPREDUCE_JOB_DIR);
+        if (jobTempDir == null) {
+          LOG.warn("Job Staging directory is null");
+          return;
+        }
+        Path jobTempDirPath = new Path(jobTempDir);
+        LOG.info("Deleting staging directory " + fs.getDefaultUri(getConfig()) +
+            " " + jobTempDir);
+        fs.delete(jobTempDirPath, true);
+      }
+    } catch(IOException io) {
+      LOG.error("Failed to cleanup staging dir " + jobTempDir, io);
+    }
+  }
+  
+  /**
+   * Exit call. Just in a function call to enable testing.
+   */
+  protected void sysexit() {
+    System.exit(0);
+  }
+  
+  private class JobFinishEventHandler implements EventHandler<JobFinishEvent> {
+    @Override
+    public void handle(JobFinishEvent event) {
+      // job has finished
+      // this is the only job, so shut down the Appmaster
+      // note in a workflow scenario, this may lead to creation of a new
+      // job (FIXME?)
+
+      // TODO:currently just wait for some time so clients can know the
+      // final states. Will be removed once RM come on.
+      try {
+        Thread.sleep(5000);
+      } catch (InterruptedException e) {
+        e.printStackTrace();
+      }
+      LOG.info("Calling stop for all the services");
+      try {
+        stop();
+      } catch (Throwable t) {
+        LOG.warn("Graceful stop failed ", t);
+      }
+      try {
+        cleanupStagingDir();
+      } catch(IOException io) {
+        LOG.warn("Failed to delete staging dir");
+      }
+      //TODO: this is required because rpc server does not shut down
+      // in spite of calling server.stop().
+      //Bring the process down by force.
+      //Not needed after HADOOP-7140
+      LOG.info("Exiting MR AppMaster..GoodBye!");
+      sysexit();
+    }
+  }
+  
+  /**
+   * create an event handler that handles the job finish event.
+   * @return the job finish event handler.
+   */
+  protected EventHandler<JobFinishEvent> createJobFinishEventHandler() {
+    return new JobFinishEventHandler();
+  }
+
-        new EventHandler<JobFinishEvent>() {
-          @Override
-          public void handle(JobFinishEvent event) {
-            // job has finished
-            // this is the only job, so shut down the Appmaster
-            // note in a workflow scenario, this may lead to creation of a new
-            // job (FIXME?)
-
-            // TODO:currently just wait for some time so clients can know the
-            // final states. Will be removed once RM come on.
-            try {
-              Thread.sleep(5000);
-            } catch (InterruptedException e) {
-              e.printStackTrace();
-            }
-            LOG.info("Calling stop for all the services");
-            try {
-              stop();
-            } catch (Throwable t) {
-              LOG.warn("Graceful stop failed ", t);
-            }
-            //TODO: this is required because rpc server does not shut down
-            // in spite of calling server.stop().
-            //Bring the process down by force.
-            //Not needed after HADOOP-7140
-            LOG.info("Exiting MR AppMaster..GoodBye!");
-            System.exit(0);
-          }
-        });
-
+        createJobFinishEventHandler());     
+    

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS55 INS31 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS42 MOV74 MOV31 INS29 INS83 INS74 INS42 INS8 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS42 INS60 INS60 INS54 INS65 MOV21 INS65 INS65 INS43 INS43 INS41 INS42 INS36 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS66 INS42 INS43 INS59 INS43 INS59 INS8 INS12 INS66 INS54 INS21 INS66 INS66 INS42 INS42 INS14 INS27 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS25 INS44 INS8 INS8 INS12 INS32 INS43 INS32 INS27 INS32 INS42 INS32 INS38 INS8 INS43 INS42 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS32 INS21 INS25 INS60 INS21 INS21 INS42 INS32 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS14 INS7 INS27 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS9 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS40 INS32 INS43 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 DEL1 DEL14