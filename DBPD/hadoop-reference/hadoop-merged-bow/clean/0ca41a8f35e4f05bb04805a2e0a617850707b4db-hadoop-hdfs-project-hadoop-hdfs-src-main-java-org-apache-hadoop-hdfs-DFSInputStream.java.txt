HDFS-6591. while loop is executed tens of thousands of times in Hedged Read. Contributed by Liang Xie.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606927 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.CancellationException;
+import java.util.concurrent.CompletionService;
-import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutorCompletionService;
-import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicLong;
+  private long hedgedReadOpsLoopNumForTesting = 0;
-      final Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap,
-      final CountDownLatch latch) {
+      final Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap) {
-        try {
-          byte[] buf = bb.array();
-          int offset = bb.position();
-          actualGetFromOneDataNode(datanode, block, start, end, buf, offset,
-              corruptedBlockMap);
-          return bb;
-        } finally {
-          latch.countDown();
-        }
+        byte[] buf = bb.array();
+        int offset = bb.position();
+        actualGetFromOneDataNode(datanode, block, start, end, buf, offset,
+            corruptedBlockMap);
+        return bb;
+        DFSClientFaultInjector.get().fetchFromDatanodeException();
+    CompletionService<ByteBuffer> hedgedService =
+        new ExecutorCompletionService<ByteBuffer>(
+        dfsClient.getHedgedReadsThreadPool());
-    // Latch shared by all outstanding reads.  First to finish closes
-    CountDownLatch hasReceivedResult = new CountDownLatch(1);
+      // see HDFS-6591, this metric is used to verify/catch unnecessary loops
+      hedgedReadOpsLoopNumForTesting++;
-      Future<ByteBuffer> future = null;
-      // futures is null if there is no request already executing.
+      // there is no request already executing.
-        // chooseDataNode is a commitment.  If no node, we go to
-        // the NN to reget block locations.  Only go here on first read.
+        // chooseDataNode is a commitment. If no node, we go to
+        // the NN to reget block locations. Only go here on first read.
-        future = getHedgedReadFuture(chosenNode, block, start, end, bb,
-          corruptedBlockMap, hasReceivedResult);
+        Callable<ByteBuffer> getFromDataNodeCallable = getFromOneDataNode(
+            chosenNode, block, start, end, bb, corruptedBlockMap);
+        Future<ByteBuffer> firstRequest = hedgedService
+            .submit(getFromDataNodeCallable);
+        futures.add(firstRequest);
-          future.get(dfsClient.getHedgedReadTimeout(), TimeUnit.MILLISECONDS);
-          return;
-        } catch (TimeoutException e) {
+          Future<ByteBuffer> future = hedgedService.poll(
+              dfsClient.getHedgedReadTimeout(), TimeUnit.MILLISECONDS);
+          if (future != null) {
+            future.get();
+            return;
+          }
-            DFSClient.LOG.debug("Waited " + dfsClient.getHedgedReadTimeout() +
-              "ms to read from " + chosenNode.info + "; spawning hedged read");
+            DFSClient.LOG.debug("Waited " + dfsClient.getHedgedReadTimeout()
+                + "ms to read from " + chosenNode.info
+                + "; spawning hedged read");
-          futures.add(future);
-        // We are starting up a 'hedged' read.  We have a read already
+        // We are starting up a 'hedged' read. We have a read already
-          chosenNode = getBestNodeDNAddrPair(block.getLocations(), ignored);
+          try {
+            chosenNode = getBestNodeDNAddrPair(block.getLocations(), ignored);
+          } catch (IOException ioe) {
+            chosenNode = chooseDataNode(block, ignored);
+          }
-          future = getHedgedReadFuture(chosenNode, block, start, end, bb,
-            corruptedBlockMap, hasReceivedResult);
-          futures.add(future);
+          Callable<ByteBuffer> getFromDataNodeCallable = getFromOneDataNode(
+              chosenNode, block, start, end, bb, corruptedBlockMap);
+          Future<ByteBuffer> oneMoreRequest = hedgedService
+              .submit(getFromDataNodeCallable);
+          futures.add(oneMoreRequest);
-            DFSClient.LOG.debug("Failed getting node for hedged read: " +
-              ioe.getMessage());
+            DFSClient.LOG.debug("Failed getting node for hedged read: "
+                + ioe.getMessage());
-          ByteBuffer result = getFirstToComplete(futures, hasReceivedResult);
+          ByteBuffer result = getFirstToComplete(hedgedService, futures);
-          // Ignore
-        } catch (ExecutionException e) {
-          // exception already handled in the call method. getFirstToComplete
-          // will remove the failing future from the list. nothing more to do.
+          // Ignore and retry
-        // We got here if exception.  Ignore this node on next go around IFF
+        // We got here if exception. Ignore this node on next go around IFF
-      // executed if we get an error from a data node
-      block = getBlockAt(block.getStartOffset(), false);
-  private Future<ByteBuffer> getHedgedReadFuture(final DNAddrPair chosenNode,
-      final LocatedBlock block, long start,
-      final long end, final ByteBuffer bb,
-      final Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap,
-      final CountDownLatch hasReceivedResult) {
-    Callable<ByteBuffer> getFromDataNodeCallable =
-        getFromOneDataNode(chosenNode, block, start, end, bb,
-          corruptedBlockMap, hasReceivedResult);
-    return dfsClient.getHedgedReadsThreadPool().submit(getFromDataNodeCallable);
+  @VisibleForTesting
+  public long getHedgedReadOpsLoopNumForTesting() {
+    return hedgedReadOpsLoopNumForTesting;
-  private ByteBuffer getFirstToComplete(ArrayList<Future<ByteBuffer>> futures,
-      CountDownLatch latch) throws ExecutionException, InterruptedException {
-    latch.await();
-    for (Future<ByteBuffer> future : futures) {
-      if (future.isDone()) {
-        try {
-          return future.get();
-        } catch (ExecutionException e) {
-          // already logged in the Callable
-          futures.remove(future);
-          throw e;
-        }
-      }
+  private ByteBuffer getFirstToComplete(
+      CompletionService<ByteBuffer> hedgedService,
+      ArrayList<Future<ByteBuffer>> futures) throws InterruptedException {
+    if (futures.isEmpty()) {
+      throw new InterruptedException("let's retry");
-    throw new InterruptedException("latch has counted down to zero but no"
-        + "result available yet, for safety try to request another one from"
-        + "outside loop, this should be rare");
+    Future<ByteBuffer> future = null;
+    try {
+      future = hedgedService.take();
+      ByteBuffer bb = future.get();
+      futures.remove(future);
+      return bb;
+    } catch (ExecutionException e) {
+      // already logged in the Callable
+      futures.remove(future);
+    } catch (CancellationException ce) {
+      // already logged in the Callable
+      futures.remove(future);
+    }
+
+    throw new InterruptedException("let's retry");

MOV26 INS26 INS26 INS40 UPD40 INS40 UPD40 INS23 MOV31 INS31 INS31 INS83 INS39 INS59 UPD83 MOV74 UPD42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV60 INS78 INS83 INS39 INS42 MOV8 MOV83 MOV43 INS42 INS44 MOV44 MOV43 INS8 INS42 INS34 INS41 INS42 INS74 INS42 INS25 MOV60 INS54 MOV53 INS14 INS74 MOV21 INS42 UPD43 MOV43 MOV43 INS32 INS8 INS8 MOV12 INS12 MOV74 INS1 INS43 INS43 UPD42 UPD42 INS42 INS42 INS53 INS21 MOV60 INS21 INS41 INS44 INS8 INS45 INS31 UPD42 MOV42 INS42 INS74 MOV32 INS37 INS14 INS7 INS43 INS32 INS42 INS43 INS42 INS21 MOV78 INS83 MOV43 INS42 MOV43 MOV8 INS21 INS43 INS43 INS42 INS42 INS42 INS60 INS60 INS21 INS43 INS45 INS42 INS32 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 INS42 INS74 INS59 INS74 INS59 INS32 MOV8 UPD42 MOV42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS60 INS25 INS54 INS60 INS60 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 MOV74 INS59 INS27 INS8 INS8 INS12 MOV74 INS59 MOV74 INS59 INS43 INS43 INS42 MOV32 INS42 INS33 INS21 INS41 MOV21 INS44 INS8 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 UPD42 UPD42 MOV32 INS43 INS42 INS21 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 INS42 INS42 MOV42 INS42 INS7 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL31 DEL43 DEL43 DEL34 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL7 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL21 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL1 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL53 DEL45 DEL45 DEL45 DEL27 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL54 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31