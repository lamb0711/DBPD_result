HDDS-1163. Basic framework for Ozone Data Scrubber. Contributed by Supratim Deka.

-    return new File(containerData.getMetadataPath(), containerData
-        .getContainerID() + OzoneConsts.CONTAINER_EXTENSION);
+    return getContainerFile(containerData.getMetadataPath(),
+            containerData.getContainerID());
+  }
+
+  static File getContainerFile(String metadataPath, long containerId) {
+    return new File(metadataPath,
+        containerId + OzoneConsts.CONTAINER_EXTENSION);
+   * run integrity checks on the Container metadata.
+   */
+  public void check() throws StorageContainerException {
+    ContainerCheckLevel level = ContainerCheckLevel.NO_CHECK;
+    long containerId = containerData.getContainerID();
+
+    switch (containerData.getState()) {
+    case OPEN:
+      level = ContainerCheckLevel.FAST_CHECK;
+      LOG.info("Doing Fast integrity checks for Container ID : {},"
+          + " because it is OPEN", containerId);
+      break;
+    case CLOSING:
+      level = ContainerCheckLevel.FAST_CHECK;
+      LOG.info("Doing Fast integrity checks for Container ID : {},"
+          + " because it is CLOSING", containerId);
+      break;
+    case CLOSED:
+    case QUASI_CLOSED:
+      level = ContainerCheckLevel.FULL_CHECK;
+      LOG.debug("Doing Full integrity checks for Container ID : {},"
+              + " because it is in {} state", containerId,
+          containerData.getState());
+      break;
+    default:
+      throw new StorageContainerException(
+          "Invalid Container state found for Container : " + containerData
+              .getContainerID(), INVALID_CONTAINER_STATE);
+    }
+
+    if (level == ContainerCheckLevel.NO_CHECK) {
+      LOG.debug("Skipping integrity checks for Container Id : {}", containerId);
+      return;
+    }
+
+    KeyValueContainerCheck checker =
+        new KeyValueContainerCheck(containerData.getMetadataPath(), config,
+            containerId, containerData);
+
+    switch (level) {
+    case FAST_CHECK:
+      checker.fastCheck();
+      break;
+    case FULL_CHECK:
+      checker.fullCheck();
+      break;
+    case NO_CHECK:
+      LOG.debug("Skipping integrity checks for Container Id : {}", containerId);
+      break;
+    default:
+      // we should not be here at all, scuttle the ship!
+      Preconditions.checkNotNull(0, "Invalid Containercheck level");
+    }
+  }
+
+  private enum ContainerCheckLevel {
+    NO_CHECK, FAST_CHECK, FULL_CHECK
+  }
+
+  /**

INS31 INS31 INS71 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS83 INS42 INS72 INS72 INS72 INS42 INS43 INS42 INS39 INS42 INS41 INS65 INS42 INS60 INS60 INS50 INS25 INS60 INS50 INS42 INS42 INS42 INS32 INS42 INS14 INS66 INS43 INS59 INS39 INS59 INS32 INS49 INS21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS49 INS21 INS21 INS10 INS49 INS53 INS27 INS8 INS43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS42 MOV32 INS32 MOV43 INS42 INS27 INS42 INS42 INS40 INS42 MOV32 INS42 INS42 INS42 INS7 INS32 INS42 INS7 INS32 INS42 INS42 INS7 INS32 INS14 INS42 INS40 INS21 INS41 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS27 INS42 INS32 INS43 INS27 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS34 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL27 DEL14