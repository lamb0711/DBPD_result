Complete commit of prior merge.

The previous merge accidentally only committed the hdfs project instead of common and MR
as well.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1463203 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.OutputStream;
-import org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos.RequestProto;
+import org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos.RequestHeaderProto;
+import com.google.protobuf.AbstractMessageLite;
+import com.google.protobuf.CodedOutputStream;
-    private RequestProto constructRpcRequest(Method method,
-        Object[] params) throws ServiceException {
-      RequestProto rpcRequest;
-      RequestProto.Builder builder = RequestProto
+    private RequestHeaderProto constructRpcRequestHeader(Method method) {
+      RequestHeaderProto.Builder builder = RequestHeaderProto
+     
-      if (params.length != 2) { // RpcController + Message
-        throw new ServiceException("Too many parameters for request. Method: ["
-            + method.getName() + "]" + ", Expected: 2, Actual: "
-            + params.length);
-      }
-      if (params[1] == null) {
-        throw new ServiceException("null param while calling Method: ["
-            + method.getName() + "]");
-      }
-
-      Message param = (Message) params[1];
-      builder.setRequest(param.toByteString());
-      rpcRequest = builder.build();
-      return rpcRequest;
+      return builder.build();
+      
+      if (args.length != 2) { // RpcController + Message
+        throw new ServiceException("Too many parameters for request. Method: ["
+            + method.getName() + "]" + ", Expected: 2, Actual: "
+            + args.length);
+      }
+      if (args[1] == null) {
+        throw new ServiceException("null param while calling Method: ["
+            + method.getName() + "]");
+      }
-      RequestProto rpcRequest = constructRpcRequest(method, args);
+      RequestHeaderProto rpcRequestHeader = constructRpcRequestHeader(method);
+
+
+      Message theRequest = (Message) args[1];
-            new RpcRequestWrapper(rpcRequest), remoteId);
+            new RpcRequestWrapper(rpcRequestHeader, theRequest), remoteId);
-            .mergeFrom(val.responseMessage).build();
+            .mergeFrom(val.theResponseRead).build();
+  interface RpcWrapper extends Writable {
+    int getLength();
+  }
-  private static class RpcRequestWrapper implements Writable {
-    RequestProto message;
+  private static class RpcRequestWrapper implements RpcWrapper {
+    RequestHeaderProto requestHeader;
+    Message theRequest; // for clientSide, the request is here
+    byte[] theRequestRead; // for server side, the request is here
-    RpcRequestWrapper(RequestProto message) {
-      this.message = message;
+    RpcRequestWrapper(RequestHeaderProto requestHeader, Message theRequest) {
+      this.requestHeader = requestHeader;
+      this.theRequest = theRequest;
-      ((Message)message).writeDelimitedTo(
-          DataOutputOutputStream.constructOutputStream(out));
+      OutputStream os = DataOutputOutputStream.constructOutputStream(out);
+      
+      ((Message)requestHeader).writeDelimitedTo(os);
+      theRequest.writeDelimitedTo(os);
-      message = RequestProto.parseFrom(bytes);
+      requestHeader = RequestHeaderProto.parseFrom(bytes);
+      length = ProtoUtil.readRawVarint32(in);
+      theRequestRead = new byte[length];
+      in.readFully(theRequestRead);
-      return message.getDeclaringClassProtocolName() + "." +
-          message.getMethodName();
+      return requestHeader.getDeclaringClassProtocolName() + "." +
+          requestHeader.getMethodName();
+    }
+
+    @Override
+    public int getLength() {
+      int headerLen = requestHeader.getSerializedSize();
+      int reqLen;
+      if (theRequest != null) {
+        reqLen = theRequest.getSerializedSize();
+      } else if (theRequestRead != null ) {
+        reqLen = theRequestRead.length;
+      } else {
+        throw new IllegalArgumentException(
+            "getLenght on uninilialized RpcWrapper");      
+      }
+      return CodedOutputStream.computeRawVarint32Size(headerLen) +  headerLen
+          + CodedOutputStream.computeRawVarint32Size(reqLen) + reqLen;
-  private static class RpcResponseWrapper implements Writable {
-    byte[] responseMessage;
+  private static class RpcResponseWrapper implements RpcWrapper {
+    Message theResponse; // for senderSide, the response is here
+    byte[] theResponseRead; // for receiver side, the response is here
-      this.responseMessage = message.toByteArray();
+      this.theResponse = message;
-      out.writeInt(responseMessage.length);
-      out.write(responseMessage);     
+      OutputStream os = DataOutputOutputStream.constructOutputStream(out);
+      theResponse.writeDelimitedTo(os);   
-      int length = in.readInt();
-      byte[] bytes = new byte[length];
-      in.readFully(bytes);
-      responseMessage = bytes;
+      int length = ProtoUtil.readRawVarint32(in);
+      theResponseRead = new byte[length];
+      in.readFully(theResponseRead);
+    }
+    
+    @Override
+    public int getLength() {
+      int resLen;
+      if (theResponse != null) {
+        resLen = theResponse.getSerializedSize();
+      } else if (theResponseRead != null ) {
+        resLen = theResponseRead.length;
+      } else {
+        throw new IllegalArgumentException(
+            "getLenght on uninilialized RpcWrapper");      
+      }
+      return CodedOutputStream.computeRawVarint32Size(resLen) + resLen;
-        RequestProto rpcRequest = request.message;
+        RequestHeaderProto rpcRequest = request.requestHeader;
-            .mergeFrom(rpcRequest.getRequest()).build();
+            .mergeFrom(request.theRequestRead).build();
+        

INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS55 INS42 MOV43 INS31 INS43 INS23 INS23 INS31 INS43 INS23 INS31 INS31 UPD43 UPD42 INS39 INS42 INS42 UPD43 INS43 INS59 INS5 INS59 INS44 MOV78 INS83 INS39 INS42 INS8 INS42 INS43 INS59 MOV78 MOV43 INS78 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 MOV25 MOV25 INS60 UPD42 UPD42 INS42 INS42 INS39 INS85 INS42 UPD43 UPD42 MOV43 INS42 INS21 INS60 INS21 INS21 INS21 INS21 INS60 INS60 INS25 INS41 UPD42 MOV42 INS42 UPD42 INS60 INS42 MOV60 INS21 MOV21 INS42 INS60 INS25 INS41 UPD43 MOV32 UPD43 MOV43 INS59 UPD42 INS7 INS43 INS59 INS32 INS7 INS7 INS32 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS27 INS43 INS59 INS7 INS39 INS59 INS27 INS8 INS25 INS27 UPD40 UPD40 UPD42 UPD42 INS42 INS11 UPD42 INS22 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS3 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS27 INS8 INS8 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS3 UPD42 INS42 INS42 INS33 MOV21 INS27 INS8 INS8 INS32 INS42 UPD43 UPD42 UPD42 UPD42 MOV43 INS2 UPD42 INS52 INS42 UPD42 INS42 INS42 INS42 INS5 INS42 UPD42 UPD42 INS42 INS42 INS7 INS42 INS33 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 MOV5 MOV42 INS42 INS33 INS21 INS53 INS42 INS42 INS42 UPD42 UPD40 INS42 INS34 INS43 INS42 INS39 INS85 INS42 INS32 INS7 INS14 INS42 INS32 INS7 INS14 UPD40 INS42 INS42 INS42 INS42 INS40 INS43 INS45 INS42 INS42 INS42 INS40 INS43 INS45 INS40 UPD40 INS42 INS42 UPD42 INS42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL40 DEL32 DEL21 DEL42 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL32