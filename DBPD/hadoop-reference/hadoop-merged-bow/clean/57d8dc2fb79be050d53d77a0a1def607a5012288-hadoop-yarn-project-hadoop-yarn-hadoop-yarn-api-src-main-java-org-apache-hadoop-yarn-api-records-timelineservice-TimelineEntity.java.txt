YARN-3836. add equals and hashCode to TimelineEntity and other classes in the data model (Li Lu via sjlee)

(cherry picked from commit 2d4a8f4563c06339717ca9410b2794754603fba3)

+/**
+ * The basic timeline entity data structure for timeline service v2. Timeline
+ * entity objects are not thread safe and should not be accessed concurrently.
+ * All collection members will be initialized into empty collections. Two
+ * timeline entities are equal iff. their type and id are identical.
+ *
+ * All non-primitive type, non-collection members will be initialized into null.
+ * User should set the type and id of a timeline entity to make it valid (can be
+ * checked by using the {@link #isValid()} method). Callers to the getters
+ * should perform null checks for non-primitive type, non-collection members.
+ *
+ * Callers are recommended not to alter the returned collection objects from the
+ * getters.
+ */
-public class TimelineEntity {
+public class TimelineEntity implements Comparable<TimelineEntity> {
+
+    @Override
+    public int hashCode() {
+      final int prime = 31;
+      int result = 1;
+      result = prime * result + ((id == null) ? 0 : id.hashCode());
+      result =
+        prime * result + ((type == null) ? 0 : type.hashCode());
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (this == obj)
+        return true;
+      if (!(obj instanceof Identifier)) {
+        return false;
+      }
+      Identifier other = (Identifier) obj;
+      if (id == null) {
+        if (other.getId() != null) {
+          return false;
+        }
+      } else if (!id.equals(other.getId())) {
+        return false;
+      }
+      if (type == null) {
+        if (other.getType() != null) {
+          return false;
+        }
+      } else if (!type.equals(other.getType())) {
+        return false;
+      }
+      return true;
+    }
+  public boolean isValid() {
+    return (getId() != null && getType() != null);
+  }
+
+  // When get hashCode for a timeline entity, or check if two timeline entities
+  // are equal, we only compare their identifiers (id and type)
+  @Override
+  public int hashCode() {
+    return getIdentifier().hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (this == obj)
+      return true;
+    if (!(obj instanceof TimelineEntity))
+      return false;
+    TimelineEntity other = (TimelineEntity) obj;
+    return getIdentifier().equals(other.getIdentifier());
+  }
+
+  @Override
+  public int compareTo(TimelineEntity other) {
+    int comparison = getType().compareTo(other.getType());
+    if (comparison == 0) {
+      if (getCreatedTime() > other.getCreatedTime()) {
+        // Order by created time desc
+        return -1;
+      } else if (getCreatedTime() < other.getCreatedTime()) {
+        return 1;
+      } else {
+        return getId().compareTo(other.getId());
+      }
+    } else {
+      return comparison;
+    }
+  }
+

INS29 INS74 INS31 INS31 INS31 INS31 INS65 INS43 INS43 INS31 INS31 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS42 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS41 INS42 INS41 INS42 INS43 INS42 INS25 INS25 INS60 INS41 INS42 INS43 INS42 INS60 INS25 INS68 INS42 INS60 INS60 INS21 INS21 INS41 INS42 INS43 INS42 INS25 INS25 INS60 INS25 INS25 INS41 INS36 INS32 INS42 INS27 INS41 INS38 INS41 INS43 INS59 INS32 INS42 INS39 INS59 INS27 INS8 INS8 INS42 INS83 INS39 INS59 INS39 INS59 INS7 INS7 INS42 INS42 INS27 INS41 INS38 INS8 INS43 INS59 INS27 INS8 INS25 INS27 INS8 INS25 INS9 INS27 INS32 INS42 INS52 INS42 INS9 INS36 INS9 INS42 INS42 INS11 INS32 INS42 INS32 INS42 INS32 INS42 INS34 INS25 INS41 INS42 INS34 INS42 INS34 INS42 INS27 INS42 INS27 INS52 INS42 INS9 INS36 INS41 INS42 INS42 INS11 INS42 INS33 INS25 INS38 INS8 INS42 INS33 INS25 INS38 INS8 INS27 INS27 INS42 INS62 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS27 INS8 INS25 INS42 INS27 INS36 INS27 INS36 INS62 INS9 INS43 INS42 INS27 INS8 INS32 INS41 INS27 INS8 INS32 INS41 INS32 INS33 INS32 INS33 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS41 INS27 INS8 INS8 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS43 INS42 INS32 INS33 INS41 INS42 INS42 INS32 INS9 INS32 INS33 INS41 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS32 INS32 INS41 INS41 INS36 INS34 INS32 INS36 INS34 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS32 INS27 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS42 INS33 INS42 INS42 INS42