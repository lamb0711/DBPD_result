HADOOP-12082 Support multiple authentication schemes via AuthenticationFilter

-    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(
-        PseudoAuthenticationHandler.TYPE)) {
-      authHandlerClassName = PseudoAuthenticationHandler.class.getName();
-    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(
-        KerberosAuthenticationHandler.TYPE)) {
-      authHandlerClassName = KerberosAuthenticationHandler.class.getName();
-    } else {
-      authHandlerClassName = authHandlerName;
-    }
+    authHandlerClassName =
+        AuthenticationHandlerUtil
+            .getAuthenticationHandlerClassName(authHandlerName);
-      if (!token.getType().equals(authHandler.getType())) {
+      boolean match = verifyTokenType(getAuthenticationHandler(), token);
+      if (!match) {
+   * This method verifies if the specified token type matches one of the the
+   * token types supported by a specified {@link AuthenticationHandler}. This
+   * method is specifically designed to work with
+   * {@link CompositeAuthenticationHandler} implementation which supports
+   * multiple authentication schemes while the {@link AuthenticationHandler}
+   * interface supports a single type via
+   * {@linkplain AuthenticationHandler#getType()} method.
+   *
+   * @param handler The authentication handler whose supported token types
+   *                should be used for verification.
+   * @param token   The token whose type needs to be verified.
+   * @return true   If the token type matches one of the supported token types
+   *         false  Otherwise
+   */
+  protected boolean verifyTokenType(AuthenticationHandler handler,
+      AuthenticationToken token) {
+    if(!(handler instanceof CompositeAuthenticationHandler)) {
+      return handler.getType().equals(token.getType());
+    }
+    boolean match = false;
+    Collection<String> tokenTypes =
+        ((CompositeAuthenticationHandler) handler).getTokenTypes();
+    for (String tokenType : tokenTypes) {
+      if (tokenType.equals(token.getType())) {
+        match = true;
+        break;
+      }
+    }
+    return match;
+  }
+
+  /**

INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS70 INS41 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS38 INS8 INS39 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS60 INS42 INS42 INS42 INS68 INS36 INS41 INS42 INS9 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 UPD42 INS42 INS39 INS59 INS42 INS42 INS62 INS32 INS42 INS42 INS36 INS42 INS42 INS32 INS8 INS42 INS32 INS42 INS42 INS43 INS32 INS42 MOV32 INS11 INS42 INS42 INS32 INS21 INS10 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS9 DEL42 DEL43 DEL57 DEL42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL8 DEL42 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL32