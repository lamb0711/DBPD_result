YARN-2656. Made RM web services authentication filter support proxy user. Contributed by Varun Vasudev and Zhijie Shen.

-import java.util.Properties;
+import java.io.IOException;
+import javax.servlet.FilterChain;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
-import org.apache.hadoop.security.authentication.server.AuthenticationFilter;
+import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager;
+import org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticationFilter;
+import org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator;
-public class RMAuthenticationFilter extends AuthenticationFilter {
+public class RMAuthenticationFilter extends
+    DelegationTokenAuthenticationFilter {
+  static private AbstractDelegationTokenSecretManager<?> manager;
+  private static final String OLD_HEADER = "Hadoop-YARN-Auth-Delegation-Token";
-  protected Properties getConfiguration(String configPrefix,
-      FilterConfig filterConfig) throws ServletException {
-
-    // In yarn-site.xml, we can simply set type to "kerberos". However, we need
-    // to replace the name here to use the customized Kerberos + DT service
-    // instead of the standard Kerberos handler.
-
-    Properties properties = super.getConfiguration(configPrefix, filterConfig);
-    String yarnAuthHandler = properties.getProperty(AUTH_HANDLER_PROPERTY);
-    if (yarnAuthHandler == null || yarnAuthHandler.isEmpty()) {
-      // if http auth type is simple, the default authentication filter
-      // will handle it, else throw an exception
-      if (!properties.getProperty(AUTH_TYPE).equals("simple")) {
-        throw new ServletException("Authentication handler class is empty");
-      }
-    }
-    if (properties.getProperty(AUTH_TYPE).equalsIgnoreCase("kerberos")) {
-      properties.setProperty(AUTH_TYPE, yarnAuthHandler);
-    }
-    return properties;
+  public void init(FilterConfig filterConfig) throws ServletException {
+    filterConfig.getServletContext().setAttribute(
+      DelegationTokenAuthenticationFilter.DELEGATION_TOKEN_SECRET_MANAGER_ATTR,
+      manager);
+    super.init(filterConfig);
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public void doFilter(ServletRequest request, ServletResponse response,
+      FilterChain filterChain) throws IOException, ServletException {
+    HttpServletRequest req = (HttpServletRequest) request;
+    String newHeader =
+        req.getHeader(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER);
+    if (newHeader == null || newHeader.isEmpty()) {
+      // For backward compatibility, allow use of the old header field
+      // only when the new header doesn't exist
+      final String oldHeader = req.getHeader(OLD_HEADER);
+      if (oldHeader != null && !oldHeader.isEmpty()) {
+        request = new HttpServletRequestWrapper(req) {
+          @Override
+          public String getHeader(String name) {
+            if (name
+                .equals(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER)) {
+              return oldHeader;
+            }
+            return super.getHeader(name);
+          }
+        };
+      }
+    }
+    super.doFilter(request, response, filterChain);
+  }
+
+  public static void setDelegationTokenSecretManager(
+      AbstractDelegationTokenSecretManager<?> manager) {
+    RMAuthenticationFilter.manager = manager;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD43 INS23 INS23 INS31 INS31 INS31 UPD42 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS43 INS59 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 MOV43 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS76 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS21 INS21 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 MOV60 MOV25 INS21 INS74 INS42 INS21 UPD42 MOV42 INS32 INS48 INS65 INS42 INS42 INS42 INS43 INS59 INS48 INS43 INS76 INS7 INS32 INS42 INS40 INS42 INS42 MOV42 INS42 INS42 INS11 UPD42 INS60 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS42 UPD42 UPD42 INS40 UPD42 UPD42 INS83 INS43 INS59 INS27 INS42 INS42 INS42 INS32 INS27 INS38 INS21 INS42 INS42 INS42 INS42 INS33 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS14 INS43 INS42 INS1 INS42 INS31 INS78 INS83 INS43 INS42 MOV44 INS8 INS42 INS42 UPD42 INS25 INS41 INS32 INS8 INS48 INS42 INS42 INS40 INS41 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL38 DEL45 DEL14 DEL53 DEL83 DEL43 DEL42 DEL43 DEL42 DEL42 DEL48 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31