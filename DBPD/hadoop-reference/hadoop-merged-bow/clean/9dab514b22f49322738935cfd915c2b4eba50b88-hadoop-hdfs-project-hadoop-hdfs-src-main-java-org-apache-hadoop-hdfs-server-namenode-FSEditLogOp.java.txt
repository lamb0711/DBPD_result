HDFS-6038. Allow JournalNode to handle editlog produced by new release with future layoutversion. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579813 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
-  private FSEditLogOp(FSEditLogOpCodes opCode) {
+  @VisibleForTesting
+  protected FSEditLogOp(FSEditLogOpCodes opCode) {
+      if (p == null) {
+        throw new IOException("Failed to read fields from SetAclOp");
+      }
+      // write the op code first to make padding and terminator verification
+      // work
+      buf.writeInt(0); // write 0 for the length first
+      
+      // write the length back: content of the op + 4 bytes checksum - op_code
+      int length = end - start - 1;
+      buf.writeInt(length, start + 1);
+
+    private final boolean supportEditLogLength;
+      // It is possible that the logVersion is actually a future layoutversion
+      // during the rolling upgrade (e.g., the NN gets upgraded first). We
+      // assume future layout will also support length of editlog op.
+      this.supportEditLogLength = NameNodeLayoutVersion.supports(
+          NameNodeLayoutVersion.Feature.EDITLOG_LENGTH, logVersion)
+          || logVersion < NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION;
+      if (supportEditLogLength) {
+        in.readInt();
+      }
+
+     * Similar with decodeOp(), but instead of doing the real decoding, we skip
+     * the content of the op if the length of the editlog is supported.
+     * @return the last txid of the segment, or INVALID_TXID on exception
+     */
+    public long scanOp() throws IOException {
+      if (supportEditLogLength) {
+        limiter.setLimit(maxOpSize);
+        in.mark(maxOpSize);
+
+        final byte opCodeByte;
+        try {
+          opCodeByte = in.readByte(); // op code
+        } catch (EOFException e) {
+          return HdfsConstants.INVALID_TXID;
+        }
+
+        FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte);
+        if (opCode == OP_INVALID) {
+          verifyTerminator();
+          return HdfsConstants.INVALID_TXID;
+        }
+
+        int length = in.readInt(); // read the length of the op
+        long txid = in.readLong(); // read the txid
+
+        // skip the remaining content
+        IOUtils.skipFully(in, length - 8); 
+        // TODO: do we want to verify checksum for JN? For now we don't.
+        return txid;
+      } else {
+        FSEditLogOp op = decodeOp();
+        return op == null ? HdfsConstants.INVALID_TXID : op.getTransactionId();
+      }
+    }
+
+    /**

INS26 INS40 INS78 UPD83 INS23 INS31 INS42 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS43 INS8 INS25 INS21 INS60 INS21 INS42 INS21 INS25 INS65 INS65 INS42 INS25 INS27 INS8 INS32 INS39 INS59 INS32 INS7 INS42 INS8 INS66 INS66 INS66 INS42 INS8 INS8 INS42 INS33 INS53 INS42 INS42 INS34 INS42 INS27 INS42 INS42 INS42 INS27 INS22 INS27 INS21 INS21 INS21 INS60 INS54 INS60 INS25 INS60 INS60 INS21 INS41 INS60 INS41 INS14 INS42 INS42 INS34 INS42 INS34 INS52 INS42 INS32 INS27 INS32 INS32 INS32 INS83 INS39 INS59 INS8 INS12 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS32 INS42 INS43 INS59 INS16 INS43 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS21 INS41 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS27 INS40 INS32 INS42 INS7 INS43 INS42 INS41 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42