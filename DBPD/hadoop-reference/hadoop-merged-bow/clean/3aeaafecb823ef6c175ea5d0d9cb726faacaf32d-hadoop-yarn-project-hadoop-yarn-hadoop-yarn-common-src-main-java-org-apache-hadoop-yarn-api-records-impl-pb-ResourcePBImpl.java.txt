YARN-6788. [YARN-3926] Improve performance of resource profile branch
(Contributed by Sunil Govindan via Daniel Templeton)

+import org.apache.hadoop.yarn.api.records.impl.BaseResource;
-import java.util.HashMap;
+import java.util.Arrays;
-import java.util.Collections;
-public class ResourcePBImpl extends Resource {
+public class ResourcePBImpl extends BaseResource {
-  private Map<String, ResourceInformation> resources;
-  private Map<String, ResourceInformation> readOnlyResources;
-
-
-    this.readOnlyResources = null;
-    this.resources = null;
-    ResourceInformation ri =
-        this.getResourceInformation(ResourceInformation.MEMORY_MB.getName());
-    return UnitsConversionUtil
-        .convert(ri.getUnits(), ResourceInformation.MEMORY_MB.getUnits(),
-            ri.getValue());
+    ResourceInformation ri = resources[MandatoryResources.MEMORY.getId()];
+
+    if (ri.getUnits().isEmpty()) {
+      return ri.getValue();
+    }
+    return UnitsConversionUtil.convert(ri.getUnits(),
+        ResourceInformation.MEMORY_MB.getUnits(), ri.getValue());
-    getResourceInformation(ResourceInformation.MEMORY_MB.getName())
-        .setValue(memory);
+    getResourceInformation(MEMORY).setValue(memory);
-    return this.getResourceValue(ResourceInformation.VCORES.getName())
-        .intValue();
+    return (int) resources[MandatoryResources.VCORES.getId()].getValue();
-    getResourceInformation(ResourceInformation.VCORES.getName())
-        .setValue(vCores);
+    getResourceInformation(VCORES).setValue(vCores);
+    Map<String, Integer> indexMap = ResourceUtils.getResourceTypeIndex();
-      if (resources.containsKey(ri.getName())) {
-        resources.get(ri.getName()).setResourceType(ri.getResourceType());
-        resources.get(ri.getName()).setUnits(ri.getUnits());
-        resources.get(ri.getName()).setValue(value);
-      } else {
+      Integer index = indexMap.get(entry.getKey());
+      if (index == null) {
+      } else {
+        resources[index].setResourceType(ri.getResourceType());
+        resources[index].setUnits(ri.getUnits());
+        resources[index].setValue(value);
+    readOnlyResources = Arrays.copyOf(resources, resources.length);
-    initResources();
-    if (resources.containsKey(resource)) {
-      ResourceInformation.copy(resourceInformation, resources.get(resource));
-    }
+    ResourceInformation storedResourceInfo = getResourceInformation(resource);
+    ResourceInformation.copy(resourceInformation, storedResourceInfo);
-    initResources();
-    if (resources == null || (!resources.containsKey(resource))) {
-      throw new ResourceNotFoundException(
-          "Resource " + resource + " not found");
-    }
-    resources.get(resource).setValue(value);
+    getResourceInformation(resource).setValue(value);
-  public Map<String, ResourceInformation> getResources() {
+  public ResourceInformation[] getResources() {
-    return readOnlyResources;
+    return super.getResources();
-  public ResourceInformation getResourceInformation(String resource) {
+  public ResourceInformation getResourceInformation(String resource)
+      throws ResourceNotFoundException {
-    if (this.resources.containsKey(resource)) {
-      return this.resources.get(resource);
-    }
-    throw new ResourceNotFoundException("Could not find entry for " + resource);
+    return super.getResourceInformation(resource);
-  public Long getResourceValue(String resource) {
+  public long getResourceValue(String resource)
+      throws ResourceNotFoundException {
-    if (this.resources.containsKey(resource)) {
-      return this.resources.get(resource).getValue();
-    }
-    throw new ResourceNotFoundException("Could not find entry for " + resource);
+    return super.getResourceValue(resource);
-      resources = new HashMap<>();
-      Map<String, ResourceInformation> types = ResourceUtils.getResourceTypes();
+      ResourceInformation[] types = ResourceUtils.getResourceTypesArray();
-      for (Map.Entry<String, ResourceInformation> entry : types.entrySet()) {
-        resources.put(entry.getKey(),
-            ResourceInformation.newInstance(entry.getValue()));
+
+      resources = new ResourceInformation[types.length];
+      readOnlyResources = new ResourceInformation[types.length];
+      for (ResourceInformation entry : types) {
+        int index = ResourceUtils.getResourceTypeIndex().get(entry.getName());
+        resources[index] = ResourceInformation.newInstance(entry);
-      readOnlyResources = Collections.unmodifiableMap(resources);
-    if (resources != null && !resources.isEmpty()) {
-      for (Map.Entry<String, ResourceInformation> entry :
-          resources.entrySet()) {
-        ResourceInformationProto.Builder e =
-            ResourceInformationProto.newBuilder();
-        e.setKey(entry.getKey());
-        e.setUnits(entry.getValue().getUnits());
-        e.setType(
-            ProtoUtils.converToProtoFormat(entry.getValue().getResourceType()));
-        e.setValue(entry.getValue().getValue());
+    if(resources != null && resources.length != 0) {
+      for (ResourceInformation resInfo : resources) {
+        ResourceInformationProto.Builder e = ResourceInformationProto
+            .newBuilder();
+        e.setKey(resInfo.getName());
+        e.setUnits(resInfo.getUnits());
+        e.setType(ProtoUtils.converToProtoFormat(resInfo.getResourceType()));
+        e.setValue(resInfo.getValue());

MOV26 MOV26 UPD40 UPD40 UPD43 UPD42 MOV78 INS5 INS42 INS8 MOV43 MOV44 MOV43 INS8 MOV78 INS39 MOV44 MOV43 MOV8 INS25 MOV21 MOV21 INS60 INS21 INS60 MOV21 MOV43 INS85 MOV21 INS41 MOV21 MOV41 INS32 INS8 INS11 UPD74 MOV74 INS59 INS7 MOV43 INS59 INS48 INS48 INS48 INS2 INS32 INS42 INS41 INS39 INS32 INS43 INS42 INS32 INS60 INS25 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS70 INS27 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS2 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS59 INS27 MOV8 MOV8 INS42 INS42 INS42 INS40 UPD42 MOV42 MOV42 UPD42 INS5 INS7 INS7 INS44 INS42 INS8 INS40 INS34 INS42 UPD40 MOV40 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 MOV43 INS85 INS42 INS3 INS42 INS3 MOV43 MOV42 INS60 MOV21 MOV43 INS42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 INS5 INS40 INS5 INS40 INS39 INS59 UPD42 UPD42 INS2 INS2 INS2 INS43 INS85 MOV43 INS85 INS42 INS32 INS2 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 MOV42 MOV32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL32 DEL32 DEL40 DEL32 DEL52 DEL42 DEL32 DEL32 DEL32 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL32 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL36 DEL27 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL40 DEL43 DEL42 DEL43 DEL74 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL38 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32