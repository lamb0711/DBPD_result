Merge from trunk to fs-encryption branch

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1596873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.XAttr;
+import org.apache.hadoop.fs.XAttrSetFlag;
+import org.apache.hadoop.hdfs.protocol.proto.XAttrProtos.GetXAttrsResponseProto;
+import org.apache.hadoop.hdfs.protocol.proto.XAttrProtos.XAttrProto;
+import org.apache.hadoop.hdfs.protocol.proto.XAttrProtos.XAttrProto.XAttrNamespaceProto;
+import org.apache.hadoop.hdfs.protocol.proto.XAttrProtos.XAttrSetFlagProto;
+  private static final XAttr.NameSpace[] XATTR_NAMESPACE_VALUES = 
+      XAttr.NameSpace.values();
+  
+  private static XAttrNamespaceProto convert(XAttr.NameSpace v) {
+    return XAttrNamespaceProto.valueOf(v.ordinal());
+  }
+  
+  private static XAttr.NameSpace convert(XAttrNamespaceProto v) {
+    return castEnum(v, XATTR_NAMESPACE_VALUES);
+  }
+  
+  public static XAttrProto convertXAttrProto(XAttr a) {
+    XAttrProto.Builder builder = XAttrProto.newBuilder();
+    builder.setNamespace(convert(a.getNameSpace()));
+    if (a.getName() != null) {
+      builder.setName(a.getName());
+    }
+    if (a.getValue() != null) {
+      builder.setValue(getByteString(a.getValue()));
+    }
+    return builder.build();
+  }
+  
+  public static List<XAttrProto> convertXAttrProto(
+      List<XAttr> xAttrSpec) {
+    ArrayList<XAttrProto> xAttrs = Lists.newArrayListWithCapacity(
+        xAttrSpec.size());
+    for (XAttr a : xAttrSpec) {
+      XAttrProto.Builder builder = XAttrProto.newBuilder();
+      builder.setNamespace(convert(a.getNameSpace()));
+      if (a.getName() != null) {
+        builder.setName(a.getName());
+      }
+      if (a.getValue() != null) {
+        builder.setValue(getByteString(a.getValue()));
+      }
+      xAttrs.add(builder.build());
+    }
+    return xAttrs;
+  }
+  
+  /**
+   * The flag field in PB is a bitmask whose values are the same a the 
+   * emum values of XAttrSetFlag
+   */
+  public static int convert(EnumSet<XAttrSetFlag> flag) {
+    int value = 0;
+    if (flag.contains(XAttrSetFlag.CREATE)) {
+      value |= XAttrSetFlagProto.XATTR_CREATE.getNumber();
+    }
+    if (flag.contains(XAttrSetFlag.REPLACE)) {
+      value |= XAttrSetFlagProto.XATTR_REPLACE.getNumber();
+    }
+    return value;
+  }
+ 
+  public static EnumSet<XAttrSetFlag> convert(int flag) {
+    EnumSet<XAttrSetFlag> result = 
+        EnumSet.noneOf(XAttrSetFlag.class);
+    if ((flag & XAttrSetFlagProto.XATTR_CREATE_VALUE) == 
+        XAttrSetFlagProto.XATTR_CREATE_VALUE) {
+      result.add(XAttrSetFlag.CREATE);
+    }
+    if ((flag & XAttrSetFlagProto.XATTR_REPLACE_VALUE) == 
+        XAttrSetFlagProto.XATTR_REPLACE_VALUE) {
+      result.add(XAttrSetFlag.REPLACE);
+    }
+    return result;
+  }
+  
+  public static XAttr convertXAttr(XAttrProto a) {
+    XAttr.Builder builder = new XAttr.Builder();
+    builder.setNameSpace(convert(a.getNamespace()));
+    if (a.hasName()) {
+      builder.setName(a.getName());
+    }
+    if (a.hasValue()) {
+      builder.setValue(a.getValue().toByteArray());
+    }
+    return builder.build();
+  }
+  
+  public static List<XAttr> convertXAttrs(List<XAttrProto> xAttrSpec) {
+    ArrayList<XAttr> xAttrs = Lists.newArrayListWithCapacity(xAttrSpec.size());
+    for (XAttrProto a : xAttrSpec) {
+      XAttr.Builder builder = new XAttr.Builder();
+      builder.setNameSpace(convert(a.getNamespace()));
+      if (a.hasName()) {
+        builder.setName(a.getName());
+      }
+      if (a.hasValue()) {
+        builder.setValue(a.getValue().toByteArray());
+      }
+      xAttrs.add(builder.build());
+    }
+    return xAttrs;
+  }
+  
+  public static List<XAttr> convert(GetXAttrsResponseProto a) {
+    List<XAttrProto> xAttrs = a.getXAttrsList();
+    return convertXAttrs(xAttrs);
+  }
+
+  public static GetXAttrsResponseProto convertXAttrsResponse(
+      List<XAttr> xAttrs) {
+    GetXAttrsResponseProto.Builder builder = GetXAttrsResponseProto
+        .newBuilder();
+    if (xAttrs != null) {
+      builder.addAllXAttrs(convertXAttrProto(xAttrs));
+    }
+    return builder.build();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS85 INS42 INS32 INS42 INS43 INS42 INS41 INS40 INS43 INS42 INS41 INS42 INS43 INS42 INS60 INS21 INS25 INS25 INS41 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS65 INS74 INS42 INS60 INS25 INS25 INS41 INS43 INS43 INS39 INS42 INS60 INS25 INS25 INS41 INS42 INS43 INS42 INS60 INS21 INS25 INS25 INS41 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS60 INS41 INS42 INS74 INS42 INS60 INS25 INS41 INS40 INS40 INS42 INS40 INS32 INS42 INS32 INS42 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS32 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS66 INS66 INS43 INS43 INS39 INS59 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS43 INS59 INS32 INS32 INS8 INS32 INS8 INS32 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS43 INS43 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS25 INS25 INS21 INS42 INS42 INS42 INS34 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS43 INS43 INS42 INS32 INS36 INS40 INS21 INS36 INS40 INS21 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS25 INS25 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS57 INS27 INS32 INS27 INS32 INS43 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS21 INS32 INS33 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42