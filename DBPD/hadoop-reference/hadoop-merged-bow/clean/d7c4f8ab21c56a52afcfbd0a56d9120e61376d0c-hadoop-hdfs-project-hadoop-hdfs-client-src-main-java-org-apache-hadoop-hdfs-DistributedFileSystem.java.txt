HDFS-13616. Batch listing of multiple directories (#1725)


+import com.google.common.collect.Lists;
+import org.apache.hadoop.fs.PartialListing;
+import org.apache.hadoop.hdfs.protocol.BatchedDirectoryListing;
+import org.apache.hadoop.hdfs.protocol.HdfsPartialListing;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.util.NoSuchElementException;
+  @Override
+  public RemoteIterator<PartialListing<FileStatus>> batchedListStatusIterator(
+      final List<Path> paths) throws IOException {
+    List<Path> absPaths = Lists.newArrayListWithCapacity(paths.size());
+    for (Path p : paths) {
+      absPaths.add(fixRelativePart(p));
+    }
+    return new PartialListingIterator<>(absPaths, false);
+  }
+
+  @Override
+  public RemoteIterator<PartialListing<LocatedFileStatus>> batchedListLocatedStatusIterator(
+      final List<Path> paths) throws IOException {
+    List<Path> absPaths = Lists.newArrayListWithCapacity(paths.size());
+    for (Path p : paths) {
+      absPaths.add(fixRelativePart(p));
+    }
+    return new PartialListingIterator<>(absPaths, true);
+  }
+
+  private static final Logger LBI_LOG =
+      LoggerFactory.getLogger(PartialListingIterator.class);
+
+  private class PartialListingIterator<T extends FileStatus>
+      implements RemoteIterator<PartialListing<T>> {
+
+    private List<Path> paths;
+    private String[] srcs;
+    private boolean needLocation;
+    private BatchedDirectoryListing batchedListing;
+    private int listingIdx = 0;
+
+    PartialListingIterator(List<Path> paths, boolean needLocation)
+        throws IOException {
+      this.paths = paths;
+      this.srcs = new String[paths.size()];
+      for (int i = 0; i < paths.size(); i++) {
+        this.srcs[i] = getPathName(paths.get(i));
+      }
+      this.needLocation = needLocation;
+
+      // Do the first listing
+      statistics.incrementReadOps(1);
+      storageStatistics.incrementOpCounter(OpType.LIST_LOCATED_STATUS);
+      batchedListing = dfs.batchedListPaths(
+          srcs, HdfsFileStatus.EMPTY_NAME, needLocation);
+      LBI_LOG.trace("Got batchedListing: {}", batchedListing);
+      if (batchedListing == null) { // the directory does not exist
+        throw new FileNotFoundException("One or more paths do not exist.");
+      }
+    }
+
+    @Override
+    public boolean hasNext() throws IOException {
+      if (batchedListing == null) {
+        return false;
+      }
+      // If we're done with the current batch, try to get the next batch
+      if (listingIdx >= batchedListing.getListings().length) {
+        if (!batchedListing.hasMore()) {
+          LBI_LOG.trace("No more elements");
+          return false;
+        }
+        batchedListing = dfs.batchedListPaths(
+            srcs, batchedListing.getStartAfter(), needLocation);
+        LBI_LOG.trace("Got batchedListing: {}", batchedListing);
+        listingIdx = 0;
+      }
+      return listingIdx < batchedListing.getListings().length;
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public PartialListing<T> next() throws IOException {
+      if (!hasNext()) {
+        throw new NoSuchElementException("No more entries");
+      }
+      HdfsPartialListing listing = batchedListing.getListings()[listingIdx];
+      listingIdx++;
+
+      Path parent = paths.get(listing.getParentIdx());
+
+      if (listing.getException() != null) {
+        return new PartialListing<>(parent, listing.getException());
+      }
+
+      // Qualify paths for the client.
+      List<HdfsFileStatus> statuses = listing.getPartialListing();
+      List<T> qualifiedStatuses =
+          Lists.newArrayListWithCapacity(statuses.size());
+
+      for (HdfsFileStatus status : statuses) {
+        if (needLocation) {
+          qualifiedStatuses.add((T)((HdfsLocatedFileStatus) status)
+              .makeQualifiedLocated(getUri(), parent));
+        } else {
+          qualifiedStatuses.add((T)status.makeQualified(getUri(), parent));
+        }
+      }
+
+      return new PartialListing<>(parent, qualifiedStatuses);
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS23 INS55 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS43 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS42 INS73 INS74 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS42 INS43 INS74 INS83 INS74 INS42 INS42 INS60 INS70 INS41 INS42 INS43 INS74 INS83 INS74 INS42 INS42 INS60 INS70 INS41 INS42 INS42 INS32 INS42 INS43 INS43 INS74 INS83 INS74 INS59 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS79 INS83 INS74 INS42 INS43 INS8 INS42 INS43 INS43 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS14 INS42 INS43 INS43 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS14 INS42 INS42 INS57 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS34 INS74 INS42 INS39 INS42 INS42 INS21 INS21 INS24 INS21 INS21 INS21 INS21 INS21 INS25 INS42 INS42 INS25 INS25 INS41 INS42 INS42 INS45 INS43 INS43 INS42 INS25 INS60 INS21 INS60 INS25 INS60 INS60 INS70 INS41 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS74 INS42 INS9 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS74 INS42 INS9 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS58 INS27 INS37 INS8 INS7 INS32 INS32 INS7 INS32 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS42 INS42 INS38 INS8 INS43 INS59 INS37 INS43 INS59 INS27 INS8 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS22 INS42 INS22 INS3 INS39 INS59 INS42 INS32 INS42 INS21 INS22 INS42 INS42 INS42 INS34 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS33 INS53 INS42 INS33 INS41 INS42 INS22 INS25 INS21 INS21 INS21 INS42 INS22 INS32 INS53 INS42 INS42 INS2 INS42 INS42 INS42 INS32 INS32 INS33 INS41 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS5 INS32 INS42 INS34 INS42 INS42 INS7 INS52 INS42 INS42 INS42 INS42 INS40 INS42 INS14 INS9 INS32 INS42 INS38 INS8 INS7 INS32 INS7 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS8 INS8 INS43 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS2 INS32 INS43 INS45 INS42 INS42 INS32 INS21 INS41 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS42 INS22 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS43 INS32 INS43 INS32 INS42 INS36 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS43 INS42 INS42