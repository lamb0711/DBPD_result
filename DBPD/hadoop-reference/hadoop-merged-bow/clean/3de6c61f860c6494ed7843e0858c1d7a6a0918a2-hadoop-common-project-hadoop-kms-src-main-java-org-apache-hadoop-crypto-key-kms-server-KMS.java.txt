Merge r1609845 through r1612431 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1612432 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.crypto.key.KeyProviderCryptoExtension;
+import org.apache.hadoop.crypto.key.KeyProviderCryptoExtension.EncryptedKeyVersion;
+import javax.ws.rs.DefaultValue;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.LinkedList;
+  private static final String GENERATE_EEK = "GENERATE_EEK";
+  private static final String DECRYPT_EEK = "DECRYPT_EEK";
-  private KeyProvider provider;
+  private KeyProviderCryptoExtension provider;
+  @SuppressWarnings({ "rawtypes", "unchecked" })
+  @GET
+  @Path(KMSRESTConstants.KEY_RESOURCE + "/{name:.*}/" +
+      KMSRESTConstants.EEK_SUB_RESOURCE)
+  @Produces(MediaType.APPLICATION_JSON)
+  public Response generateEncryptedKeys(
+          @Context SecurityContext securityContext,
+          @PathParam("name") String name,
+          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,
+          @DefaultValue("1")
+          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)
+          throws Exception {
+    Principal user = getPrincipal(securityContext);
+    KMSClientProvider.checkNotEmpty(name, "name");
+    KMSClientProvider.checkNotNull(edekOp, "eekOp");
+
+    Object retJSON;
+    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {
+      assertAccess(KMSACLs.Type.GENERATE_EEK, user, GENERATE_EEK, name);
+
+      List<EncryptedKeyVersion> retEdeks =
+          new LinkedList<EncryptedKeyVersion>();
+      try {
+        for (int i = 0; i < numKeys; i ++) {
+          retEdeks.add(provider.generateEncryptedKey(name));
+        }
+      } catch (Exception e) {
+        throw new IOException(e);
+      }
+      KMSAudit.ok(user, GENERATE_EEK, name, "");
+      retJSON = new ArrayList();
+      for (EncryptedKeyVersion edek : retEdeks) {
+        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));
+      }
+    } else {
+      throw new IllegalArgumentException("Wrong " + KMSRESTConstants.EEK_OP +
+          " value, it must be " + KMSRESTConstants.EEK_GENERATE + " or " +
+          KMSRESTConstants.EEK_DECRYPT);
+    }
+    KMSWebApp.getGenerateEEKCallsMeter().mark();
+    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)
+        .build();
+  }
+
+  @SuppressWarnings("rawtypes")
+  @POST
+  @Path(KMSRESTConstants.KEY_VERSION_RESOURCE + "/{versionName:.*}/" +
+      KMSRESTConstants.EEK_SUB_RESOURCE)
+  @Produces(MediaType.APPLICATION_JSON)
+  public Response decryptEncryptedKey(@Context SecurityContext securityContext,
+      @PathParam("versionName") String versionName,
+      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,
+      Map jsonPayload)
+      throws Exception {
+    Principal user = getPrincipal(securityContext);
+    KMSClientProvider.checkNotEmpty(versionName, "versionName");
+    KMSClientProvider.checkNotNull(eekOp, "eekOp");
+
+    String keyName = (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);
+    String ivStr = (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);
+    String encMaterialStr = 
+        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);
+    Object retJSON;
+    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {
+      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, DECRYPT_EEK, versionName);
+      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);
+      byte[] iv = Base64.decodeBase64(ivStr);
+      KMSClientProvider.checkNotNull(encMaterialStr,
+          KMSRESTConstants.MATERIAL_FIELD);
+      byte[] encMaterial = Base64.decodeBase64(encMaterialStr);
+      KeyProvider.KeyVersion retKeyVersion =
+          provider.decryptEncryptedKey(
+              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,
+                  iv, KeyProviderCryptoExtension.EEK, encMaterial));
+      retJSON = KMSServerJSONUtils.toJSON(retKeyVersion);
+      KMSAudit.ok(user, DECRYPT_EEK, versionName, "");
+    } else {
+      throw new IllegalArgumentException("Wrong " + KMSRESTConstants.EEK_OP +
+          " value, it must be " + KMSRESTConstants.EEK_GENERATE + " or " +
+          KMSRESTConstants.EEK_DECRYPT);
+    }
+    KMSWebApp.getDecryptEEKCallsMeter().mark();
+    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)
+        .build();
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 UPD43 INS79 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS79 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 INS42 INS4 INS42 INS42 INS27 INS42 INS40 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS79 INS39 INS42 INS42 INS60 INS21 INS21 INS60 INS25 INS21 INS41 INS42 INS45 INS42 INS42 INS27 INS42 INS40 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS21 INS60 INS60 INS60 INS60 INS25 INS21 INS41 INS45 INS45 INS40 INS45 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS40 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS8 INS8 INS32 INS32 INS40 INS45 INS40 INS42 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS40 INS21 INS60 INS54 INS21 INS21 INS70 INS53 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS40 INS21 INS21 INS60 INS21 INS60 INS60 INS21 INS21 INS53 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS74 INS59 INS8 INS12 INS32 INS7 INS44 INS42 INS8 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS32 INS32 INS5 INS59 INS32 INS5 INS59 INS43 INS59 INS7 INS32 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS24 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS14 INS43 INS42 INS21 INS43 INS27 INS32 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS40 INS39 INS85 INS42 INS32 INS40 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS27 INS32 INS42 INS40 INS42 INS42 INS74 INS58 INS27 INS37 INS8 INS43 INS42 INS53 INS43 INS42 INS32 INS42 INS45 INS40 INS45 INS40 INS45 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS45 INS40 INS45 INS40 INS45 INS40 INS42 INS42 INS43 INS43 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS14 INS42 INS36 INS42 INS32 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS34 INS32 INS43 INS42 INS11 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42