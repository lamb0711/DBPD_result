Merge branch 'YARN-6592' into trunk

+import org.apache.hadoop.yarn.api.pb.PlacementConstraintFromProtoConverter;
+import org.apache.hadoop.yarn.api.pb.PlacementConstraintToProtoConverter;
+
+import org.apache.hadoop.yarn.api.resource.PlacementConstraint;
+import org.apache.hadoop.yarn.proto.YarnProtos;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
-public class RegisterApplicationMasterRequestPBImpl extends RegisterApplicationMasterRequest {
-  RegisterApplicationMasterRequestProto proto = RegisterApplicationMasterRequestProto.getDefaultInstance();
-  RegisterApplicationMasterRequestProto.Builder builder = null;
+public class RegisterApplicationMasterRequestPBImpl
+    extends RegisterApplicationMasterRequest {
+  private RegisterApplicationMasterRequestProto proto =
+      RegisterApplicationMasterRequestProto.getDefaultInstance();
+  private RegisterApplicationMasterRequestProto.Builder builder = null;
+  private Map<Set<String>, PlacementConstraint> placementConstraints = null;
-  public RegisterApplicationMasterRequestPBImpl(RegisterApplicationMasterRequestProto proto) {
+  public RegisterApplicationMasterRequestPBImpl(
+      RegisterApplicationMasterRequestProto proto) {
+    if (this.placementConstraints != null) {
+      addPlacementConstraintMap();
+    }
+  }
+
+  private void addPlacementConstraintMap() {
+    maybeInitBuilder();
+    builder.clearPlacementConstraints();
+    if (this.placementConstraints == null) {
+      return;
+    }
+    List<YarnProtos.PlacementConstraintMapEntryProto> protoList =
+        new ArrayList<>();
+    for (Map.Entry<Set<String>, PlacementConstraint> entry :
+        this.placementConstraints.entrySet()) {
+      protoList.add(
+          YarnProtos.PlacementConstraintMapEntryProto.newBuilder()
+              .addAllAllocationTags(entry.getKey())
+              .setPlacementConstraint(
+                  new PlacementConstraintToProtoConverter(
+                      entry.getValue()).convert())
+              .build());
+    }
+    builder.addAllPlacementConstraints(protoList);
-    RegisterApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;
+    RegisterApplicationMasterRequestProtoOrBuilder p =
+        viaProto ? proto : builder;
-    RegisterApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;
+    RegisterApplicationMasterRequestProtoOrBuilder p =
+        viaProto ? proto : builder;
-    RegisterApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;
+    RegisterApplicationMasterRequestProtoOrBuilder p =
+        viaProto ? proto : builder;
-}  
+
+  private void initPlacementConstraintMap() {
+    if (this.placementConstraints != null) {
+      return;
+    }
+    RegisterApplicationMasterRequestProtoOrBuilder p =
+        viaProto ? proto : builder;
+    List<YarnProtos.PlacementConstraintMapEntryProto> pcmList =
+        p.getPlacementConstraintsList();
+    this.placementConstraints = new HashMap<>();
+    for (YarnProtos.PlacementConstraintMapEntryProto e : pcmList) {
+      this.placementConstraints.put(
+          new HashSet<>(e.getAllocationTagsList()),
+          new PlacementConstraintFromProtoConverter(
+              e.getPlacementConstraint()).convert());
+    }
+  }
+
+  @Override
+  public Map<Set<String>, PlacementConstraint> getPlacementConstraints() {
+    initPlacementConstraintMap();
+    return this.placementConstraints;
+  }
+
+  @Override
+  public void setPlacementConstraints(
+      Map<Set<String>, PlacementConstraint> constraints) {
+    maybeInitBuilder();
+    if (constraints == null) {
+      builder.clearPlacementConstraints();
+    } else {
+      removeEmptyKeys(constraints);
+    }
+    this.placementConstraints = constraints;
+  }
+
+  private void removeEmptyKeys(
+      Map<Set<String>, PlacementConstraint> constraintMap) {
+    Iterator<Set<String>> iter = constraintMap.keySet().iterator();
+    while (iter.hasNext()) {
+      Set<String> aTags = iter.next();
+      if (aTags.size() == 0) {
+        iter.remove();
+      }
+    }
+  }
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS74 INS59 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS74 INS43 INS42 INS33 INS25 INS21 INS21 INS25 INS60 INS70 INS21 INS25 INS60 INS60 INS21 INS70 INS42 INS43 INS74 INS43 INS21 INS41 INS42 INS74 INS42 INS21 INS25 INS21 INS74 INS42 INS60 INS61 INS42 INS43 INS43 INS42 INS27 INS8 INS32 INS32 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS32 INS27 INS8 INS43 INS59 INS74 INS59 INS7 INS44 INS42 INS8 INS42 INS43 INS43 INS42 INS32 INS22 INS43 INS74 INS43 INS32 INS27 INS8 INS8 INS7 INS43 INS74 INS43 INS74 INS59 INS32 INS8 INS42 INS42 INS22 INS33 INS21 INS42 INS42 INS42 INS22 INS33 INS41 INS43 INS43 INS42 INS14 INS74 INS42 INS22 INS42 INS21 INS42 INS42 INS42 INS22 INS33 INS41 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS22 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS52 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS33 INS21 INS21 INS22 INS42 INS42 INS43 INS43 INS42 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS25 INS52 INS42 INS32 INS52 INS42 INS42 INS40 INS74 INS43 INS74 INS43 INS52 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS52 INS42 INS74 INS40 INS32 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS42 INS43 INS43 INS32 INS42 INS74 INS59 INS27 INS8 INS42 INS43 INS40 INS43 INS43 INS42 INS42 INS42 INS32 INS43 INS22 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS32 INS34 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS74 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS43 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL8