HDDS-1879.  Support multiple excluded scopes when choosing datanodes in NetworkTopology (#1194)


+import java.util.List;
-   * @param excludedScope the exclude scope
+   * @param excludedScopes the exclude scopes
-   *   excludedScope = /dc2
+   *   excludedScope = /dc2/rack2
-  public Node getLeaf(int leafIndex, String excludedScope,
+  public Node getLeaf(int leafIndex, List<String> excludedScopes,
-      return getLeafOnLeafParent(leafIndex, excludedScope, excludedNodes);
+      return getLeafOnLeafParent(leafIndex, excludedScopes, excludedNodes);
-    int excludedNodeCount = getExcludedScopeNodeCount(excludedScope);
+    Map<String, Integer> excludedNodeCount =
+        getExcludedScopeNodeCount(excludedScopes);
-    for(Node child : childrenMap.values()) {
+    for (Node child : childrenMap.values()) {
-      // skip nodes covered by excluded scope
-      if (excludedScope != null &&
-          excludedScope.startsWith(child.getNetworkFullPath())) {
-        leafCount -= excludedNodeCount;
+      // skip nodes covered by excluded scopes
+      for (Map.Entry<String, Integer> entry: excludedNodeCount.entrySet()) {
+        if (entry.getKey().startsWith(child.getNetworkFullPath())) {
+          leafCount -= entry.getValue();
+        }
-        return ((InnerNode)child).getLeaf(leafIndex, excludedScope,
+        return ((InnerNode)child).getLeaf(leafIndex, excludedScopes,
-  private Node getLeafOnLeafParent(int leafIndex, String excludedScope,
+  private Node getLeafOnLeafParent(int leafIndex, List<String> excludedScopes,
-      if ((excludedNodes != null && (excludedNodes.contains(node))) ||
-          (excludedScope != null &&
-              (node.getNetworkFullPath().startsWith(excludedScope)))) {
+      if (excludedNodes != null && excludedNodes.contains(node)) {
+      if (excludedScopes != null && excludedScopes.size() > 0) {
+        if (excludedScopes.stream().anyMatch(scope ->
+            node.getNetworkFullPath().startsWith(scope))) {
+          continue;
+        }
+      }
-  /** Get how many leaf nodes are covered by the excludedScope. */
-  private int getExcludedScopeNodeCount(String excludedScope) {
-    if (excludedScope == null) {
-      return 0;
+  /** Get how many leaf nodes are covered by the excludedScopes(no overlap). */
+  private Map<String, Integer> getExcludedScopeNodeCount(
+      List<String> excludedScopes) {
+    HashMap<String, Integer> nodeCounts = new HashMap<>();
+    if (excludedScopes == null || excludedScopes.isEmpty()) {
+      return nodeCounts;
-    Node excludedScopeNode = getNode(excludedScope);
-    return excludedScopeNode == null ? 0 : excludedScopeNode.getNumOfLeaves();
+
+    for (String scope: excludedScopes) {
+      Node excludedScopeNode = getNode(scope);
+      nodeCounts.put(scope, excludedScopeNode == null ? 0 :
+          excludedScopeNode.getNumOfLeaves());
+    }
+    return nodeCounts;

INS26 INS40 INS74 INS44 INS74 UPD42 INS74 UPD42 INS43 MOV43 INS43 INS74 INS42 INS60 INS70 UPD42 UPD66 UPD66 INS43 INS43 INS74 INS43 INS43 UPD66 INS42 INS42 INS43 INS43 INS74 INS59 INS27 MOV44 INS42 INS8 INS42 INS42 INS42 INS43 MOV43 INS43 INS70 INS42 INS42 INS25 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS27 INS32 UPD42 MOV60 INS21 INS42 INS42 UPD42 INS44 INS32 INS8 MOV27 INS27 INS8 INS42 INS42 INS42 INS74 UPD42 MOV42 MOV33 INS42 INS42 INS42 INS32 UPD42 INS74 INS42 INS42 INS42 INS25 MOV32 INS27 INS27 INS25 INS43 INS42 INS42 INS42 MOV16 INS43 INS43 INS43 MOV32 MOV8 INS42 INS33 INS32 INS34 INS32 INS8 INS42 UPD42 INS40 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS86 INS18 UPD42 MOV42 INS42 INS42 INS42 INS59 MOV32 INS32 INS42 UPD42 INS42 INS42 DEL39 DEL42 DEL42 DEL33 DEL27 DEL27 DEL25 DEL36 DEL36 DEL42 DEL33 DEL27 DEL36 DEL27 DEL36 DEL27 DEL39 DEL27 DEL34