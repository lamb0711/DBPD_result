YARN-3864. Implement support for querying single app and all apps for a flow run (Varun Saxena via sjlee)

-import java.util.Collections;
+import org.apache.hadoop.hbase.client.Scan;
+import org.apache.hadoop.hbase.filter.PageFilter;
+import com.google.common.base.Preconditions;
+
-        eventFilters, fieldsToRetrieve);
+        eventFilters, fieldsToRetrieve, true);
+  protected void validateParams() {
+    Preconditions.checkNotNull(userId, "userId shouldn't be null");
+    Preconditions.checkNotNull(clusterId, "clusterId shouldn't be null");
+    Preconditions.checkNotNull(entityType, "entityType shouldn't be null");
+    if (singleEntityRead) {
+      Preconditions.checkNotNull(appId, "appId shouldn't be null");
+    } else {
+      Preconditions.checkNotNull(flowId, "flowId shouldn't be null");
+    }
+  }
+
+  @Override
+  protected void augmentParams(Configuration hbaseConf, Connection conn)
+      throws IOException {
+    if (singleEntityRead) {
+      if (flowId == null || flowRunId == null) {
+        FlowContext context =
+            lookupFlowContext(clusterId, appId, hbaseConf, conn);
+        flowId = context.flowId;
+        flowRunId = context.flowRunId;
+      }
+    }
+    if (fieldsToRetrieve == null) {
+      fieldsToRetrieve = EnumSet.noneOf(Field.class);
+    }
+    if (!singleEntityRead) {
+      if (limit == null || limit < 0) {
+        limit = TimelineReader.DEFAULT_LIMIT;
+      }
+      if (createdTimeBegin == null) {
+        createdTimeBegin = DEFAULT_BEGIN_TIME;
+      }
+      if (createdTimeEnd == null) {
+        createdTimeEnd = DEFAULT_END_TIME;
+      }
+      if (modifiedTimeBegin == null) {
+        modifiedTimeBegin = DEFAULT_BEGIN_TIME;
+      }
+      if (modifiedTimeEnd == null) {
+        modifiedTimeEnd = DEFAULT_END_TIME;
+      }
+    }
+  }
+
+  @Override
-    throw new UnsupportedOperationException(
-        "we don't support multiple apps query");
+    Scan scan = new Scan();
+    if (flowRunId != null) {
+      scan.setRowPrefixFilter(ApplicationRowKey.
+          getRowKeyPrefix(clusterId, userId, flowId, flowRunId));
+    } else {
+      scan.setRowPrefixFilter(ApplicationRowKey.
+          getRowKeyPrefix(clusterId, userId, flowId));
+    }
+    scan.setFilter(new PageFilter(limit));
+    return table.getResultScanner(hbaseConf, conn, scan);

MOV26 INS26 INS26 INS40 INS40 UPD40 INS31 INS31 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS21 INS21 INS21 INS25 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS25 INS25 INS60 INS25 INS21 INS41 INS9 INS32 INS32 INS32 INS42 INS8 INS8 INS42 INS42 INS42 INS8 INS27 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS21 INS21 INS25 INS42 INS33 INS21 INS42 INS25 INS25 INS25 INS25 INS25 INS42 INS42 INS14 INS42 INS33 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS8 INS7 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 UPD43 MOV43 INS32 INS32 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS27 INS27 INS60 INS21 INS21 INS42 INS32 INS27 INS27 INS21 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS33 INS21 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS43 INS59 INS7 INS7 INS42 INS42 INS57 INS42 INS33 INS42 INS34 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS40 INS43 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL45 DEL14 DEL53