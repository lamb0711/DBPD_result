HADOOP-11446 S3AOutputStream should use shared thread pool to avoid OutOfMemoryError

+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+  private TransferManager transfers;
+  private static final AtomicInteger poolNumber = new AtomicInteger(1);
+  /**
+   * Returns a {@link java.util.concurrent.ThreadFactory} that names each created thread uniquely,
+   * with a common prefix.
+   * @param prefix The prefix of every created Thread's name
+   * @return a {@link java.util.concurrent.ThreadFactory} that names threads
+   */
+  public static ThreadFactory getNamedThreadFactory(final String prefix) {
+    SecurityManager s = System.getSecurityManager();
+    final ThreadGroup threadGroup = (s != null) ? s.getThreadGroup() : Thread.currentThread()
+        .getThreadGroup();
+
+    return new ThreadFactory() {
+      final AtomicInteger threadNumber = new AtomicInteger(1);
+      private final int poolNum = poolNumber.getAndIncrement();
+      final ThreadGroup group = threadGroup;
+
+      @Override
+      public Thread newThread(Runnable r) {
+        final String name = prefix + "-pool" + poolNum + "-t" + threadNumber.getAndIncrement();
+        return new Thread(group, r, name);
+      }
+    };
+  }
+
+  /**
+   * Get a named {@link ThreadFactory} that just builds daemon threads.
+   * @param prefix name prefix for all threads created from the factory
+   * @return a thread factory that creates named, daemon threads with
+   *         the supplied exception handler and normal priority
+   */
+  private static ThreadFactory newDaemonThreadFactory(final String prefix) {
+    final ThreadFactory namedFactory = getNamedThreadFactory(prefix);
+    return new ThreadFactory() {
+      @Override
+      public Thread newThread(Runnable r) {
+        Thread t = namedFactory.newThread(r);
+        if (!t.isDaemon()) {
+          t.setDaemon(true);
+        }
+        if (t.getPriority() != Thread.NORM_PRIORITY) {
+          t.setPriority(Thread.NORM_PRIORITY);
+        }
+        return t;
+      }
+
+    };
+  }
+
-
+    int maxThreads = conf.getInt(MAX_THREADS, DEFAULT_MAX_THREADS);
+    int coreThreads = conf.getInt(CORE_THREADS, DEFAULT_CORE_THREADS);
+    if (maxThreads == 0) {
+      maxThreads = Runtime.getRuntime().availableProcessors() * 8;
+    }
+    if (coreThreads == 0) {
+      coreThreads = Runtime.getRuntime().availableProcessors() * 8;
+    }
+    long keepAliveTime = conf.getLong(KEEPALIVE_TIME, DEFAULT_KEEPALIVE_TIME);
+    LinkedBlockingQueue<Runnable> workQueue =
+      new LinkedBlockingQueue<Runnable>(maxThreads *
+        conf.getInt(MAX_TOTAL_TASKS, DEFAULT_MAX_TOTAL_TASKS));
+    ThreadPoolExecutor tpe = new ThreadPoolExecutor(
+        coreThreads,
+        maxThreads,
+        keepAliveTime,
+        TimeUnit.SECONDS,
+        workQueue,
+        newDaemonThreadFactory("s3a-transfer-shared-"));
+    tpe.allowCoreThreadTimeOut(true);
+
+    TransferManagerConfiguration transferConfiguration = new TransferManagerConfiguration();
+    transferConfiguration.setMinimumUploadPartSize(partSize);
+    transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);
+
+    transfers = new TransferManager(s3, tpe);
+    transfers.setConfiguration(transferConfiguration);
+
-      TransferManager transferManager = new TransferManager(s3);
-      transferManager.abortMultipartUploads(bucket, purgeBefore);
-      transferManager.shutdownNow(false);
+      transfers.abortMultipartUploads(bucket, purgeBefore);
+      transfers.shutdownNow(false);
-    return new FSDataOutputStream(new S3AOutputStream(getConf(), s3, this, 
+    return new FSDataOutputStream(new S3AOutputStream(getConf(), transfers, this,

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 MOV43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS14 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS60 INS60 INS41 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS60 INS41 INS60 INS60 INS25 INS25 INS60 INS60 INS60 INS21 INS60 INS21 INS21 INS21 INS21 INS43 INS34 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS65 INS66 INS42 INS43 INS59 INS83 INS43 INS59 INS14 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS42 INS83 INS43 INS59 INS14 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS39 INS59 INS74 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS7 INS32 INS42 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS16 INS43 INS1 INS42 INS42 INS42 INS32 INS43 INS1 INS42 INS32 INS42 INS32 INS42 INS34 INS21 INS42 INS34 INS21 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS42 INS36 INS32 INS32 INS42 INS23 INS23 INS23 INS31 INS42 INS42 INS42 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS27 INS43 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS42 UPD42 INS27 INS42 INS42 INS32 INS42 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS42 INS27 INS42 INS27 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS42 UPD42 UPD42 INS42 INS33 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS60 INS41 INS42 INS42 INS43 INS42 INS60 INS25 INS25 INS41 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS34 INS42 INS42 INS42 INS83 INS43 INS59 INS14 INS42 INS43 INS59 INS38 INS8 INS27 INS8 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS32 INS40 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS40 DEL42 DEL59 DEL60