YARN-4248. REST API for submit/update/delete Reservations. (curino)

+import org.apache.hadoop.yarn.api.records.ReservationDefinition;
+import org.apache.hadoop.yarn.api.records.ReservationId;
+import org.apache.hadoop.yarn.api.records.ReservationRequest;
+import org.apache.hadoop.yarn.api.records.ReservationRequestInterpreter;
+import org.apache.hadoop.yarn.api.records.ReservationRequests;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationDefinitionInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationDeleteRequestInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationDeleteResponseInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationRequestInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationRequestsInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationSubmissionResponseInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationSubmissionRequestInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationUpdateRequestInfo;
+import org.apache.hadoop.yarn.server.resourcemanager.webapp.dao.ReservationUpdateResponseInfo;
+import org.apache.hadoop.yarn.api.protocolrecords.ReservationDeleteRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.ReservationSubmissionRequest;
+import org.apache.hadoop.yarn.api.protocolrecords.ReservationSubmissionResponse;
+import org.apache.hadoop.yarn.api.protocolrecords.ReservationUpdateRequest;
+
+  /**
+   * Function to submit a Reservation to the RM.
+   *
+   * @param resContext provides information to construct the
+   *          ReservationSubmissionRequest
+   * @param hsr the servlet request
+   * @return Response containing the status code
+   * @throws AuthorizationException
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  @POST
+  @Path("/reservation/submit")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response submitReservation(
+      ReservationSubmissionRequestInfo resContext,
+      @Context HttpServletRequest hsr) throws AuthorizationException,
+      IOException, InterruptedException {
+
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+          + "user not authenticated");
+    }
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      return Response.status(Status.FORBIDDEN).entity(msg).build();
+    }
+
+    final ReservationSubmissionRequest reservation =
+        createReservationSubmissionRequest(resContext);
+
+    ReservationSubmissionResponseInfo resRespInfo;
+    try {
+      resRespInfo =
+          callerUGI.doAs(
+           new PrivilegedExceptionAction<ReservationSubmissionResponseInfo>() {
+                @Override
+                public ReservationSubmissionResponseInfo run()
+                    throws IOException, YarnException {
+                  ReservationSubmissionResponse tempRes =
+                      rm.getClientRMService().submitReservation(reservation);
+                  return new ReservationSubmissionResponseInfo(tempRes);
+                }
+              });
+    } catch (UndeclaredThrowableException ue) {
+      if (ue.getCause() instanceof YarnException) {
+        throw new BadRequestException(ue.getCause().getMessage());
+      }
+      LOG.info("Submit reservation request failed", ue);
+      throw ue;
+    }
+
+    return Response.status(Status.OK).entity(resRespInfo).build();
+  }
+
+  private ReservationSubmissionRequest createReservationSubmissionRequest(
+      ReservationSubmissionRequestInfo resContext) {
+
+    // defending against a couple of common submission format problems
+    if (resContext == null) {
+      throw new BadRequestException(
+          "Input ReservationSubmissionContext should not be null");
+    }
+    ReservationDefinitionInfo resInfo = resContext.getReservationDefinition();
+    if (resInfo == null) {
+      throw new BadRequestException(
+          "Input ReservationDefinition should not be null");
+    }
+
+    ReservationRequestsInfo resReqsInfo = resInfo.getReservationRequests();
+
+    if (resReqsInfo == null || resReqsInfo.getReservationRequest() == null
+        || resReqsInfo.getReservationRequest().size() == 0) {
+      throw new BadRequestException("The ReservationDefinition should"
+          + " contain at least one ReservationRequest");
+    }
+
+    ReservationRequestInterpreter[] values =
+        ReservationRequestInterpreter.values();
+    ReservationRequestInterpreter resInt =
+        values[resReqsInfo.getReservationRequestsInterpreter()];
+    List<ReservationRequest> list = new ArrayList<ReservationRequest>();
+
+    for (ReservationRequestInfo resReqInfo : resReqsInfo
+        .getReservationRequest()) {
+      ResourceInfo rInfo = resReqInfo.getCapability();
+      Resource capability =
+          Resource.newInstance(rInfo.getMemory(), rInfo.getvCores());
+      int numContainers = resReqInfo.getNumContainers();
+      int minConcurrency = resReqInfo.getMinConcurrency();
+      long duration = resReqInfo.getDuration();
+      ReservationRequest rr =
+          ReservationRequest.newInstance(capability, numContainers,
+              minConcurrency, duration);
+      list.add(rr);
+    }
+    ReservationRequests reqs = ReservationRequests.newInstance(list, resInt);
+    ReservationDefinition rDef =
+        ReservationDefinition.newInstance(resInfo.getArrival(),
+            resInfo.getDeadline(), reqs, resInfo.getReservationName());
+    ReservationSubmissionRequest request =
+        ReservationSubmissionRequest.newInstance(rDef, resContext.getQueue());
+
+    return request;
+  }
+
+  /**
+   * Function to update a Reservation to the RM.
+   *
+   * @param resContext provides information to construct the
+   *          ReservationUpdateRequest
+   * @param hsr the servlet request
+   * @return Response containing the status code
+   * @throws AuthorizationException
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  @POST
+  @Path("/reservation/update")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response updateReservation(ReservationUpdateRequestInfo resContext,
+      @Context HttpServletRequest hsr) throws AuthorizationException,
+      IOException, InterruptedException {
+
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+          + "user not authenticated");
+    }
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      return Response.status(Status.FORBIDDEN).entity(msg).build();
+    }
+
+    final ReservationUpdateRequest reservation =
+        createReservationUpdateRequest(resContext);
+
+    ReservationUpdateResponseInfo resRespInfo;
+    try {
+      resRespInfo =
+          callerUGI.doAs(
+              new PrivilegedExceptionAction<ReservationUpdateResponseInfo>() {
+                @Override
+                public ReservationUpdateResponseInfo run() throws IOException,
+                    YarnException {
+                  rm.getClientRMService().updateReservation(reservation);
+                  return new ReservationUpdateResponseInfo();
+                }
+              });
+    } catch (UndeclaredThrowableException ue) {
+      if (ue.getCause() instanceof YarnException) {
+        throw new BadRequestException(ue.getCause().getMessage());
+      }
+      LOG.info("Update reservation request failed", ue);
+      throw ue;
+    }
+
+    return Response.status(Status.OK).entity(resRespInfo).build();
+  }
+
+  private ReservationUpdateRequest createReservationUpdateRequest(
+      ReservationUpdateRequestInfo resContext) throws IOException {
+
+    // defending against a couple of common submission format problems
+    if (resContext == null) {
+      throw new BadRequestException(
+          "Input ReservationSubmissionContext should not be null");
+    }
+    ReservationDefinitionInfo resInfo = resContext.getReservationDefinition();
+    if (resInfo == null) {
+      throw new BadRequestException(
+          "Input ReservationDefinition should not be null");
+    }
+    ReservationRequestsInfo resReqsInfo = resInfo.getReservationRequests();
+    if (resReqsInfo == null || resReqsInfo.getReservationRequest() == null
+        || resReqsInfo.getReservationRequest().size() == 0) {
+      throw new BadRequestException("The ReservationDefinition should"
+          + " contain at least one ReservationRequest");
+    }
+    if (resContext.getReservationId() == null) {
+      throw new BadRequestException(
+          "Update operations must specify an existing ReservaitonId");
+    }
+
+    ReservationRequestInterpreter[] values =
+        ReservationRequestInterpreter.values();
+    ReservationRequestInterpreter resInt =
+        values[resReqsInfo.getReservationRequestsInterpreter()];
+    List<ReservationRequest> list = new ArrayList<ReservationRequest>();
+
+    for (ReservationRequestInfo resReqInfo : resReqsInfo
+        .getReservationRequest()) {
+      ResourceInfo rInfo = resReqInfo.getCapability();
+      Resource capability =
+          Resource.newInstance(rInfo.getMemory(), rInfo.getvCores());
+      int numContainers = resReqInfo.getNumContainers();
+      int minConcurrency = resReqInfo.getMinConcurrency();
+      long duration = resReqInfo.getDuration();
+      ReservationRequest rr =
+          ReservationRequest.newInstance(capability, numContainers,
+              minConcurrency, duration);
+      list.add(rr);
+    }
+    ReservationRequests reqs = ReservationRequests.newInstance(list, resInt);
+    ReservationDefinition rDef =
+        ReservationDefinition.newInstance(resInfo.getArrival(),
+            resInfo.getDeadline(), reqs, resInfo.getReservationName());
+    ReservationUpdateRequest request =
+        ReservationUpdateRequest.newInstance(rDef, ReservationId
+            .parseReservationId(resContext.getReservationId()));
+
+    return request;
+  }
+
+  /**
+   * Function to delete a Reservation to the RM.
+   *
+   * @param resContext provides information to construct
+   *          the ReservationDeleteRequest
+   * @param hsr the servlet request
+   * @return Response containing the status code
+   * @throws AuthorizationException
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  @POST
+  @Path("/reservation/delete")
+  @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
+  public Response deleteReservation(ReservationDeleteRequestInfo resContext,
+      @Context HttpServletRequest hsr) throws AuthorizationException,
+      IOException, InterruptedException {
+
+    init();
+    UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true);
+    if (callerUGI == null) {
+      throw new AuthorizationException("Unable to obtain user name, "
+          + "user not authenticated");
+    }
+    if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
+      String msg = "The default static user cannot carry out this operation.";
+      return Response.status(Status.FORBIDDEN).entity(msg).build();
+    }
+
+    final ReservationDeleteRequest reservation =
+        createReservationDeleteRequest(resContext);
+
+    ReservationDeleteResponseInfo resRespInfo;
+    try {
+      resRespInfo =
+          callerUGI.doAs(
+              new PrivilegedExceptionAction<ReservationDeleteResponseInfo>() {
+                @Override
+                public ReservationDeleteResponseInfo run() throws IOException,
+                    YarnException {
+                  rm.getClientRMService().deleteReservation(reservation);
+                  return new ReservationDeleteResponseInfo();
+                }
+              });
+    } catch (UndeclaredThrowableException ue) {
+      if (ue.getCause() instanceof YarnException) {
+        throw new BadRequestException(ue.getCause().getMessage());
+      }
+      LOG.info("Update reservation request failed", ue);
+      throw ue;
+    }
+
+    return Response.status(Status.OK).entity(resRespInfo).build();
+  }
+
+  private ReservationDeleteRequest createReservationDeleteRequest(
+      ReservationDeleteRequestInfo resContext) throws IOException {
+
+    ReservationDeleteRequest request =
+        ReservationDeleteRequest.newInstance(ReservationId
+            .parseReservationId(resContext.getReservationId()));
+
+    return request;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 INS79 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS25 INS60 INS60 INS54 INS41 INS42 INS43 INS42 INS25 INS60 INS25 INS60 INS25 INS60 INS60 INS60 INS70 INS60 INS60 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS25 INS60 INS60 INS54 INS41 INS42 INS43 INS42 INS42 INS25 INS60 INS25 INS60 INS25 INS25 INS60 INS60 INS60 INS70 INS60 INS60 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS45 INS42 INS4 INS42 INS4 INS42 INS43 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS25 INS60 INS60 INS54 INS41 INS42 INS43 INS42 INS42 INS60 INS41 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS83 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS5 INS59 INS43 INS59 INS74 INS59 INS44 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS83 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS5 INS59 INS43 INS59 INS74 INS59 INS44 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS83 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS32 INS60 INS41 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS27 INS27 INS53 INS43 INS85 INS42 INS32 INS42 INS42 INS2 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS32 INS60 INS41 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS27 INS27 INS53 INS32 INS33 INS53 INS43 INS85 INS42 INS32 INS42 INS42 INS2 INS43 INS43 INS42 INS14 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS32 INS60 INS41 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS7 INS43 INS42 INS25 INS21 INS53 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS27 INS27 INS32 INS34 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS7 INS43 INS42 INS25 INS21 INS53 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS27 INS27 INS32 INS34 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS14 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS7 INS43 INS42 INS25 INS21 INS53 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS62 INS8 INS32 INS42 INS42 INS42 INS40 INS43 INS45 INS43 INS45 INS42 INS33 INS32 INS33 INS32 INS42 INS43 INS27 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS62 INS8 INS32 INS42 INS42 INS42 INS40 INS43 INS45 INS43 INS45 INS42 INS33 INS32 INS33 INS32 INS42 INS43 INS27 INS43 INS45 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS62 INS8 INS32 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS43 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS43 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS43 INS53 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS40 INS74 INS1 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS74 INS1 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS74 INS1 INS42 INS42 INS42 INS14 INS43 INS43 INS31 INS43 INS32 INS43 INS43 INS31 INS43 INS32 INS43 INS43 INS31 INS43 INS32 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS32 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS32 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS43 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS43 INS59 INS14 INS32 INS14 INS32 INS14 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42