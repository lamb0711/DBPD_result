HADOOP-14169. Implement listStatusIterator, listLocatedStatus for ViewFs. Contributed by Erik Krogen.

+import org.apache.hadoop.fs.LocatedFileStatus;
-    
-    return new RemoteIterator<FileStatus>() {
-      final RemoteIterator<FileStatus> myIter;
-      final ChRootedFs targetFs;
-      { // Init
-          myIter = fsIter;
-          targetFs = (ChRootedFs) res.targetFileSystem;
-      }
-      
+
+    return new WrappingRemoteIterator<FileStatus>(res, fsIter, f) {
-      public boolean hasNext() throws IOException {
-        return myIter.hasNext();
+      public FileStatus getViewFsFileStatus(FileStatus stat, Path newPath) {
+        return new ViewFsFileStatus(stat, newPath);
-      
+    };
+  }
+
+  @Override
+  public RemoteIterator<LocatedFileStatus> listLocatedStatus(final Path f)
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException {
+    final InodeTree.ResolveResult<AbstractFileSystem> res =
+        fsState.resolve(getUriPath(f), true);
+    final RemoteIterator<LocatedFileStatus> fsIter =
+        res.targetFileSystem.listLocatedStatus(res.remainingPath);
+    if (res.isInternalDir()) {
+      return fsIter;
+    }
+
+    return new WrappingRemoteIterator<LocatedFileStatus>(res, fsIter, f) {
-      public FileStatus next() throws IOException {
-        FileStatus status =  myIter.next();
-        String suffix = targetFs.stripOutRoot(status.getPath());
-        return new ViewFsFileStatus(status, makeQualified(
-            suffix.length() == 0 ? f : new Path(res.resolvedPath, suffix)));
+      public LocatedFileStatus getViewFsFileStatus(LocatedFileStatus stat,
+          Path newPath) {
+        return new ViewFsLocatedFileStatus(stat, newPath);
+  /**
+   * Helper class to perform some transformation on results returned
+   * from a RemoteIterator.
+   */
+  private abstract class WrappingRemoteIterator<T extends FileStatus>
+      implements RemoteIterator<T> {
+    private final String resolvedPath;
+    private final ChRootedFs targetFs;
+    private final RemoteIterator<T> innerIter;
+    private final Path originalPath;
+
+    WrappingRemoteIterator(InodeTree.ResolveResult<AbstractFileSystem> res,
+        RemoteIterator<T> innerIter, Path originalPath) {
+      this.resolvedPath = res.resolvedPath;
+      this.targetFs = (ChRootedFs)res.targetFileSystem;
+      this.innerIter = innerIter;
+      this.originalPath = originalPath;
+    }
+
+    @Override
+    public boolean hasNext() throws IOException {
+      return innerIter.hasNext();
+    }
+
+    @Override
+    public T next() throws IOException {
+      T status =  innerIter.next();
+      String suffix = targetFs.stripOutRoot(status.getPath());
+      Path newPath = makeQualified(suffix.length() == 0 ? originalPath
+          : new Path(resolvedPath, suffix));
+      return getViewFsFileStatus(status, newPath);
+    }
+
+    protected abstract T getViewFsFileStatus(T status, Path newPath);
+  }
+

INS26 INS40 INS31 INS55 MOV78 INS83 INS74 INS42 INS44 INS43 INS43 INS43 INS43 INS8 INS29 INS83 INS83 INS42 INS73 INS74 INS23 MOV23 INS23 INS23 INS31 INS31 INS31 INS31 INS43 INS43 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS41 INS65 INS42 INS43 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 MOV43 INS8 MOV78 INS83 INS43 INS42 MOV43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS42 INS42 INS42 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS8 INS14 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS21 MOV21 INS21 INS21 INS42 INS41 INS42 INS60 MOV60 INS60 INS41 INS42 INS43 INS42 INS43 INS42 UPD74 INS42 INS42 INS42 INS1 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS74 INS42 INS42 INS42 INS1 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS7 INS7 INS7 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS42 UPD43 INS31 INS40 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS40 INS42 INS40 INS42 INS43 INS43 INS31 INS40 INS42 INS42 INS42 INS22 INS40 INS22 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS78 MOV83 MOV43 UPD42 MOV42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS16 INS42 MOV43 INS42 INS43 INS42 MOV41 INS42 INS42 INS43 INS42 MOV43 INS42 INS41 MOV27 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS42 UPD42 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL40 DEL42 DEL14 DEL16 DEL32 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL42 DEL7 DEL21 DEL8 DEL28 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL1 DEL42