svn merge --reintegrate https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802 for merging HDFS Snapshot feature branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480838 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+
-class INodeDirectoryWithQuota extends INodeDirectory {
+public class INodeDirectoryWithQuota extends INodeDirectory {
-  private long nsCount = 1L;
+  private long namespace = 1L;
-  INodeDirectoryWithQuota(long nsQuota, long dsQuota,
-      INodeDirectory other) {
-    super(other);
-    INode.DirCounts counts = new INode.DirCounts();
-    other.spaceConsumedInTree(counts);
-    this.nsCount = counts.getNsCount();
-    this.diskspace = counts.getDsCount();
+  public INodeDirectoryWithQuota(INodeDirectory other, boolean adopt,
+      long nsQuota, long dsQuota) {
+    super(other, adopt);
+    final Quota.Counts counts = other.computeQuotaUsage();
+    this.namespace = counts.get(Quota.NAMESPACE);
+    this.diskspace = counts.get(Quota.DISKSPACE);
-  INodeDirectoryWithQuota(long id, PermissionStatus permissions,
+  INodeDirectoryWithQuota(long id, byte[] name, PermissionStatus permissions,
-    super(id, permissions, modificationTime);
+    super(id, name, permissions, modificationTime);
-  INodeDirectoryWithQuota(long id, String name, PermissionStatus permissions) {
-    super(id, name, permissions);
+  INodeDirectoryWithQuota(long id, byte[] name, PermissionStatus permissions) {
+    super(id, name, permissions, 0L);
-  long getNsQuota() {
+  public long getNsQuota() {
-  long getDsQuota() {
+  public long getDsQuota() {
-   *                                
-  void setQuota(long newNsQuota, long newDsQuota) {
-    nsQuota = newNsQuota;
-    dsQuota = newDsQuota;
+  public void setQuota(long nsQuota, long dsQuota) {
+    this.nsQuota = nsQuota;
+    this.dsQuota = dsQuota;
-  
-  DirCounts spaceConsumedInTree(DirCounts counts) {
-    counts.nsCount += nsCount;
-    counts.dsCount += diskspace;
+  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,
+      int lastSnapshotId) {
+    if (useCache && isQuotaSet()) {
+      // use cache value
+      counts.add(Quota.NAMESPACE, namespace);
+      counts.add(Quota.DISKSPACE, diskspace);
+    } else {
+      super.computeQuotaUsage(counts, false, lastSnapshotId);
+    }
+  @Override
+  public Content.Counts computeContentSummary(
+      final Content.Counts counts) {
+    final long original = counts.get(Content.DISKSPACE);
+    super.computeContentSummary(counts);
+    checkDiskspace(counts.get(Content.DISKSPACE) - original);
+    return counts;
+  }
+  
+  private void checkDiskspace(final long computed) {
+    if (-1 != getDsQuota() && diskspace != computed) {
+      NameNode.LOG.error("BUG: Inconsistent diskspace for directory "
+          + getFullPathName() + ". Cached = " + diskspace
+          + " != Computed = " + computed);
+    }
+  }
+
-    return nsCount;
+    return namespace;
-  long diskspaceConsumed() {
-    return diskspace;
+  @Override
+  public final void addSpaceConsumed(final long nsDelta, final long dsDelta,
+      boolean verify, int snapshotId) throws QuotaExceededException {
+    if (isQuotaSet()) { 
+      // The following steps are important: 
+      // check quotas in this inode and all ancestors before changing counts
+      // so that no change is made if there is any quota violation.
+
+      // (1) verify quota in this inode
+      if (verify) {
+        verifyQuota(nsDelta, dsDelta);
+      }
+      // (2) verify quota and then add count in ancestors 
+      super.addSpaceConsumed(nsDelta, dsDelta, verify, snapshotId);
+      // (3) add count in this inode
+      addSpaceConsumed2Cache(nsDelta, dsDelta);
+    } else {
+      super.addSpaceConsumed(nsDelta, dsDelta, verify, snapshotId);
+    }
-  void addSpaceConsumed(long nsDelta, long dsDelta) {
-    setSpaceConsumed(nsCount + nsDelta, diskspace + dsDelta);
+  protected void addSpaceConsumed2Cache(long nsDelta, long dsDelta) {
+    namespace += nsDelta;
+    diskspace += dsDelta;
-    this.nsCount = namespace;
+    this.namespace = namespace;
+  /** Verify if the namespace quota is violated after applying delta. */
+  void verifyNamespaceQuota(long delta) throws NSQuotaExceededException {
+    if (Quota.isViolated(nsQuota, namespace, delta)) {
+      throw new NSQuotaExceededException(nsQuota, namespace + delta);
+    }
+  }
+
-    long newCount = nsCount + nsDelta;
-    long newDiskspace = diskspace + dsDelta;
-    if (nsDelta>0 || dsDelta>0) {
-      if (nsQuota >= 0 && nsQuota < newCount) {
-        throw new NSQuotaExceededException(nsQuota, newCount);
-      }
-      if (dsQuota >= 0 && dsQuota < newDiskspace) {
-        throw new DSQuotaExceededException(dsQuota, newDiskspace);
-      }
+    verifyNamespaceQuota(nsDelta);
+
+    if (Quota.isViolated(dsQuota, diskspace, dsDelta)) {
+      throw new DSQuotaExceededException(dsQuota, diskspace + dsDelta);
+
+  String namespaceString() {
+    return "namespace: " + (nsQuota < 0? "-": namespace + "/" + nsQuota);
+  }
+  String diskspaceString() {
+    return "diskspace: " + (dsQuota < 0? "-": diskspace + "/" + dsQuota);
+  }
+  String quotaString() {
+    return ", Quota[" + namespaceString() + ", " + diskspaceString() + "]";
+  }
+  
+  @VisibleForTesting
+  public long getNamespace() {
+    return this.namespace;
+  }
+  
+  @VisibleForTesting
+  public long getDiskspace() {
+    return this.diskspace;
+  }

INS26 MOV31 INS40 INS83 MOV44 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS44 INS44 INS83 INS83 INS83 INS83 UPD43 UPD42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 MOV39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 UPD42 INS29 INS39 INS42 INS44 INS43 INS8 MOV29 INS39 INS42 MOV44 MOV44 MOV43 INS8 MOV43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 INS39 INS42 INS60 INS5 INS42 INS5 UPD42 UPD42 INS40 UPD43 INS39 INS42 INS39 INS42 INS25 INS41 INS42 INS40 INS83 INS43 INS42 INS60 INS21 INS21 MOV41 INS83 INS39 INS42 INS25 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS21 INS65 INS39 INS42 INS42 INS25 INS21 INS25 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS83 UPD43 MOV43 INS59 INS39 INS85 INS42 INS39 INS85 INS34 INS40 INS27 INS8 INS8 INS42 INS40 INS83 INS39 INS59 INS48 INS32 INS27 INS8 UPD42 INS32 INS8 INS8 INS7 INS7 INS66 INS32 INS8 INS32 INS32 INS8 INS27 INS27 INS27 INS22 INS22 UPD40 MOV42 INS32 INS22 UPD42 INS22 UPD42 INS42 INS32 MOV21 MOV21 INS21 INS42 INS32 INS42 INS42 INS42 INS27 INS27 INS27 INS21 INS42 INS25 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS53 INS45 INS36 INS45 INS36 INS45 INS32 INS45 INS32 INS45 INS52 INS42 INS52 INS42 MOV42 UPD42 MOV42 UPD42 UPD42 INS40 UPD42 INS40 INS52 INS42 INS52 INS42 INS42 INS32 INS32 INS48 INS42 INS42 INS40 INS32 INS42 INS38 INS32 INS42 INS42 INS32 INS42 INS8 INS48 INS32 INS48 UPD42 INS14 INS14 INS16 INS16 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS40 INS34 INS42 INS40 INS42 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS27 MOV43 INS42 MOV27 INS27 INS45 INS27 INS27 INS45 INS27 INS45 INS32 INS45 INS42 INS45 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV34 UPD42 MOV42 INS45 UPD42 MOV42 MOV42 MOV34 UPD42 MOV42 INS45 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL40 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL7 DEL40 DEL42 DEL7 DEL8 DEL39 DEL42 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL27 DEL32 DEL42 DEL39 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL27 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL27 DEL27 DEL27 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL27 DEL27 DEL27 DEL42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31