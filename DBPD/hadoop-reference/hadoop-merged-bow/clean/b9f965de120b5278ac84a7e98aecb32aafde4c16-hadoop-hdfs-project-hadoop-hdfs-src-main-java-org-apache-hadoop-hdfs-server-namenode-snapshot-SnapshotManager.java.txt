HDFS-4103. Support O(1) snapshot creation.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.server.namenode.INode;
-import org.apache.hadoop.hdfs.server.namenode.INodeFile;
-import org.apache.hadoop.hdfs.server.namenode.INodeFileUnderConstruction;
-import org.apache.hadoop.hdfs.server.namenode.INodeSymlink;
-import org.apache.hadoop.hdfs.util.ReadOnlyList;
+import org.apache.hadoop.hdfs.server.namenode.INodeDirectory.INodesInPath;
-  private final FSNamesystem namesystem;
-  public SnapshotManager(final FSNamesystem namesystem,
-      final FSDirectory fsdir) {
-    this.namesystem = namesystem;
+  public SnapshotManager(final FSDirectory fsdir) {
-  public void setSnapshottable(final String path, final int snapshotQuota
-      ) throws IOException {
-    final INodeDirectory d = INodeDirectory.valueOf(fsdir.getINode(path), path);
+  public void setSnapshottable(final String path) throws IOException {
+    final INodesInPath iip = fsdir.getINodesInPath(path);
+    final INodeDirectory d = INodeDirectory.valueOf(iip.getINode(0), path);
-      ((INodeDirectorySnapshottable)d).setSnapshotQuota(snapshotQuota);
+      ((INodeDirectorySnapshottable)d).setSnapshotQuota(
+          INodeDirectorySnapshottable.SNAPSHOT_LIMIT);
-        = INodeDirectorySnapshottable.newInstance(d, snapshotQuota);
-    fsdir.replaceINodeDirectory(path, d, s);
+        = d.replaceSelf4INodeDirectorySnapshottable(iip.getLatestSnapshot());
-
+    final INodesInPath iip = fsdir.getINodesInPath(path);
-        fsdir.getINode(path), path);
+        iip.getINode(0), path);
-    final INodeDirectory d = new INodeDirectory(s, true);
-    fsdir.replaceINodeDirectory(path, s, d);
+    s.replaceSelf(iip.getLatestSnapshot());
+    final INodesInPath i = fsdir.getMutableINodesInPath(path);
-        = INodeDirectorySnapshottable.valueOf(fsdir.getINode(path), path);
-    final Snapshot s = srcRoot.addSnapshot(snapshotID, snapshotName);
-    new SnapshotCreation().processRecursively(srcRoot, s.getRoot());
+        = INodeDirectorySnapshottable.valueOf(i.getLastINode(), path);
+    srcRoot.addSnapshot(snapshotID, snapshotName);
-  /**
-   * Create a snapshot of subtrees by recursively coping the directory
-   * structure from the source directory to the snapshot destination directory.
-   * This creation algorithm requires O(N) running time and O(N) memory,
-   * where N = # files + # directories + # symlinks. 
-   */
-  class SnapshotCreation {
-    /** Process snapshot creation recursively. */
-    private void processRecursively(final INodeDirectory srcDir,
-        final INodeDirectory dstDir) throws IOException {
-      final ReadOnlyList<INode> children = srcDir.getChildrenList(null);
-      if (!children.isEmpty()) {
-        final List<INode> inodes = new ArrayList<INode>(children.size());
-        for(final INode c : new ArrayList<INode>(ReadOnlyList.Util.asList(children))) {
-          final INode i;
-          if (c == null) {
-            i = null;
-          } else if (c instanceof INodeDirectory) {
-            //also handle INodeDirectoryWithQuota
-            i = processINodeDirectory((INodeDirectory)c);
-          } else if (c instanceof INodeFileUnderConstruction) {
-            //TODO: support INodeFileUnderConstruction
-            throw new IOException("Not yet supported.");
-          } else if (c instanceof INodeFile) {
-            i = processINodeFile(srcDir, (INodeFile)c);
-          } else if (c instanceof INodeSymlink) {
-            i = new INodeSymlink((INodeSymlink)c);
-          } else {
-            throw new AssertionError("Unknow INode type: " + c.getClass()
-                + ", inode = " + c);
-          }
-          i.setParent(dstDir);
-          inodes.add(i);
-        }
-        dstDir.setChildren(inodes);
-      }
-    }
-    
-    /**
-     * Create destination INodeDirectory and make the recursive call. 
-     * @return destination INodeDirectory.
-     */
-    private INodeDirectory processINodeDirectory(final INodeDirectory srcChild
-        ) throws IOException {
-      final INodeDirectory dstChild = new INodeDirectory(srcChild, false);
-      dstChild.setChildren(null);
-      processRecursively(srcChild, dstChild);
-      return dstChild;
-    }
-
-    /**
-     * Create destination INodeFileSnapshot and update source INode type.
-     * @return destination INodeFileSnapshot.
-     */
-    private INodeFileSnapshot processINodeFile(final INodeDirectory parent,
-        final INodeFile file) {
-      final INodeFileWithLink srcWithLink;
-      //check source INode type
-      if (file instanceof INodeFileWithLink) {
-        srcWithLink = (INodeFileWithLink)file;
-      } else {
-        //source is an INodeFile, replace the source.
-        srcWithLink = new INodeFileWithLink(file);
-        file.removeNode();
-        parent.addChild(srcWithLink, false);
-
-        //update block map
-        namesystem.getBlockManager().addBlockCollection(srcWithLink);
-      }
-      
-      //insert the snapshot to src's linked list.
-      final INodeFileSnapshot snapshot = new INodeFileSnapshot(srcWithLink); 
-      srcWithLink.insert(snapshot);
-      return snapshot;
-    }
-  }
-

MOV26 UPD40 MOV25 INS60 INS60 INS21 INS83 INS43 INS59 INS43 INS59 MOV43 INS59 INS43 INS59 MOV83 MOV43 INS59 MOV32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS32 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 MOV32 INS42 UPD42 INS34 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS34 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL9 DEL14 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL14 DEL42 DEL32 DEL21 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL40 DEL42 DEL42 DEL32 DEL14 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL9 DEL14 DEL59 DEL60 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL55