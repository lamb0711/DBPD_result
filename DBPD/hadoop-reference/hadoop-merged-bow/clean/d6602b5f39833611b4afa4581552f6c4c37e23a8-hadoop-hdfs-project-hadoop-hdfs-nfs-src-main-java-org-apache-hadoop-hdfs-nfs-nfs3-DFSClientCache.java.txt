HDFS-11575. Supporting HDFS NFS gateway with Federated HDFS. Contributed by Mukul Kumar Singh.

+import java.net.URI;
+import java.nio.file.FileSystemException;
+import java.util.HashMap;
+import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.hdfs.DFSUtilClient;
+import org.apache.hadoop.hdfs.nfs.conf.NfsConfigKeys;
- * A cache saves DFSClient objects for different users
+ * A cache saves DFSClient objects for different users.
-  @VisibleForTesting
-  final LoadingCache<String, DFSClient> clientCache;
+  private final LoadingCache<DfsClientKey, DFSClient> clientCache;
-   * Cache that maps <DFSClient, inode path> to the corresponding
+   * Cache that maps <DFSClient, inode path, nnid> to the corresponding
-  final LoadingCache<DFSInputStreamCaheKey, FSDataInputStream> inputstreamCache;
+  private final LoadingCache<DFSInputStreamCacheKey,
+                          FSDataInputStream> inputstreamCache;
-   * Time to live for a DFSClient (in seconds)
+   * Time to live for a DFSClient (in seconds).
+  private final HashMap<Integer, URI> namenodeUriMap;
-  private static class DFSInputStreamCaheKey {
-    final String userId;
-    final String inodePath;
+  private static final class DFSInputStreamCacheKey {
+    private final String userId;
+    private final String inodePath;
+    private final int namenodeId;
-    private DFSInputStreamCaheKey(String userId, String inodePath) {
+    private DFSInputStreamCacheKey(String userId, String inodePath,
+                                   int namenodeId) {
+      this.namenodeId = namenodeId;
-      if (obj instanceof DFSInputStreamCaheKey) {
-        DFSInputStreamCaheKey k = (DFSInputStreamCaheKey) obj;
-        return userId.equals(k.userId) && inodePath.equals(k.inodePath);
+      if (obj instanceof DFSInputStreamCacheKey) {
+        DFSInputStreamCacheKey k = (DFSInputStreamCacheKey) obj;
+        return userId.equals(k.userId) &&
+               inodePath.equals(k.inodePath) &&
+               (namenodeId == k.namenodeId);
-      return Objects.hashCode(userId, inodePath);
+      return Objects.hashCode(userId, inodePath, namenodeId);
-  DFSClientCache(NfsConfiguration config) {
+  private static final class DfsClientKey {
+    private final String userName;
+    private final int namenodeId;
+
+    private DfsClientKey(String userName, int namenodeId) {
+      this.userName = userName;
+      this.namenodeId = namenodeId;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (obj instanceof DfsClientKey) {
+        DfsClientKey k = (DfsClientKey) obj;
+        return userName.equals(k.userName) &&
+            (namenodeId == k.namenodeId);
+      }
+      return false;
+    }
+
+    @Override
+    public int hashCode() {
+      return Objects.hashCode(userName, namenodeId);
+    }
+  }
+
+  DFSClientCache(NfsConfiguration config) throws IOException {
-  
-  DFSClientCache(NfsConfiguration config, int clientCache) {
+
+  DFSClientCache(NfsConfiguration config, int clientCache) throws IOException {
+    namenodeUriMap = new HashMap<>();
+    prepareAddressMap();
+
-    
+
+  private void prepareAddressMap() throws IOException {
+    FileSystem fs = FileSystem.get(config);
+    String[] exportsPath =
+        config.getStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY,
+            NfsConfigKeys.DFS_NFS_EXPORT_POINT_DEFAULT);
+    for (String exportPath : exportsPath) {
+      URI exportURI = Nfs3Utils.getResolvedURI(fs, exportPath);
+      int namenodeId = Nfs3Utils.getNamenodeId(config, exportURI);
+      URI value = namenodeUriMap.get(namenodeId);
+      // if a unique nnid, add it to the map
+      if (value == null) {
+        LOG.info("Added export:" + exportPath + " FileSystem URI:" + exportURI
+              + " with namenodeId:" + namenodeId);
+        namenodeUriMap.put(namenodeId, exportURI);
+      } else {
+        // if the nnid already exists, it better be the for the same namenode
+        String msg = String.format("FS:%s, Namenode ID collision for path:%s "
+                + "nnid:%s uri being added:%s existing uri:%s", fs.getScheme(),
+            exportPath, namenodeId, exportURI, value);
+        LOG.error(msg);
+        throw new FileSystemException(msg);
+      }
+    }
+  }
+
-  
+
+  @VisibleForTesting
+  public LoadingCache<DfsClientKey, DFSClient> getClientCache() {
+    return clientCache;
+  }
+
-    ConcurrentMap<String, DFSClient> map = clientCache.asMap();
+    ConcurrentMap<DfsClientKey, DFSClient> map = clientCache.asMap();
-    for (Entry<String, DFSClient> item : map.entrySet()) {
+    for (Entry<DfsClientKey, DFSClient> item : map.entrySet()) {
-  
-  private CacheLoader<String, DFSClient> clientLoader() {
-    return new CacheLoader<String, DFSClient>() {
+
+  private CacheLoader<DfsClientKey, DFSClient> clientLoader() {
+    return new CacheLoader<DfsClientKey, DFSClient>() {
-      public DFSClient load(String userName) throws Exception {
+      public DFSClient load(final DfsClientKey key) throws Exception {
-                userName,
-                UserGroupInformation.getCurrentUser());
+            key.userName, UserGroupInformation.getCurrentUser());
-            return new DFSClient(DFSUtilClient.getNNAddress(config), config);
+            URI namenodeURI = namenodeUriMap.get(key.namenodeId);
+            if (namenodeURI == null) {
+              throw new IOException("No namenode URI found for user:" +
+                  key.userName + " namenodeId:" + key.namenodeId);
+            }
+            return new DFSClient(namenodeURI, config);
-   * This method uses the currentUser, and real user to create a proxy
+   * This method uses the currentUser, and real user to create a proxy.
-  private RemovalListener<String, DFSClient> clientRemovalListener() {
-    return new RemovalListener<String, DFSClient>() {
+  private RemovalListener<DfsClientKey, DFSClient> clientRemovalListener() {
+    return new RemovalListener<DfsClientKey, DFSClient>() {
-      public void onRemoval(RemovalNotification<String, DFSClient> notification) {
+      public void onRemoval(
+          RemovalNotification<DfsClientKey, DFSClient> notification) {
-  private RemovalListener<DFSInputStreamCaheKey, FSDataInputStream> inputStreamRemovalListener() {
-    return new RemovalListener<DFSClientCache.DFSInputStreamCaheKey, FSDataInputStream>() {
+  private RemovalListener
+      <DFSInputStreamCacheKey, FSDataInputStream> inputStreamRemovalListener() {
+    return new RemovalListener
+        <DFSClientCache.DFSInputStreamCacheKey, FSDataInputStream>() {
-          RemovalNotification<DFSInputStreamCaheKey, FSDataInputStream> notification) {
+          RemovalNotification<DFSInputStreamCacheKey, FSDataInputStream>
+                                                            notification) {
-  private CacheLoader<DFSInputStreamCaheKey, FSDataInputStream> inputStreamLoader() {
-    return new CacheLoader<DFSInputStreamCaheKey, FSDataInputStream>() {
+  private CacheLoader<DFSInputStreamCacheKey, FSDataInputStream>
+                                                      inputStreamLoader() {
+    return new CacheLoader<DFSInputStreamCacheKey, FSDataInputStream>() {
-      public FSDataInputStream load(DFSInputStreamCaheKey key) throws Exception {
-        DFSClient client = getDfsClient(key.userId);
+      public FSDataInputStream
+                    load(DFSInputStreamCacheKey key) throws Exception {
+        DFSClient client = getDfsClient(key.userId, key.namenodeId);
-  DFSClient getDfsClient(String userName) {
+  DFSClient getDfsClient(String userName, int namenodeId) {
-      client = clientCache.get(userName);
+      client = clientCache.get(new DfsClientKey(userName, namenodeId));
-  FSDataInputStream getDfsInputStream(String userName, String inodePath) {
-    DFSInputStreamCaheKey k = new DFSInputStreamCaheKey(userName, inodePath);
+  FSDataInputStream getDfsInputStream(String userName, String inodePath,
+                                      int namenodeId) {
+    DFSInputStreamCacheKey k =
+        new DFSInputStreamCacheKey(userName, inodePath, namenodeId);
-  public void invalidateDfsInputStream(String userName, String inodePath) {
-    DFSInputStreamCaheKey k = new DFSInputStreamCaheKey(userName, inodePath);
+  public void invalidateDfsInputStream(String userName, String inodePath,
+                                       int namenodeId) {
+    DFSInputStreamCacheKey k =
+        new DFSInputStreamCacheKey(userName, inodePath, namenodeId);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS23 INS55 INS31 INS31 INS83 UPD74 INS83 UPD74 INS83 INS83 INS74 INS59 INS83 UPD42 INS23 INS83 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS43 INS43 INS83 INS39 INS42 INS43 INS8 MOV78 INS83 INS74 INS42 INS8 UPD74 UPD74 UPD74 UPD74 INS44 INS44 INS44 UPD66 UPD43 UPD43 INS43 INS43 INS43 INS42 INS83 INS83 INS83 INS83 INS39 INS59 UPD42 INS44 INS83 INS83 MOV43 INS59 INS83 INS83 INS39 INS59 INS83 INS42 MOV44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 INS39 INS42 INS8 INS42 INS42 INS21 INS21 INS42 INS60 INS60 INS70 INS43 INS43 MOV43 INS41 MOV43 INS43 MOV43 MOV43 INS43 MOV43 MOV43 UPD43 MOV43 MOV43 UPD43 MOV43 INS39 INS42 INS39 INS42 INS39 INS42 UPD42 UPD66 UPD42 UPD66 INS42 INS42 INS42 INS42 INS39 INS42 INS21 INS42 INS42 INS39 INS42 INS21 INS21 INS42 INS43 INS42 INS25 INS41 INS41 INS7 INS32 INS43 INS59 INS5 INS59 INS44 INS42 INS8 INS42 INS42 INS42 UPD74 INS42 UPD66 INS42 UPD42 UPD42 MOV42 UPD42 UPD43 UPD43 INS7 INS7 INS7 INS42 INS62 INS8 INS9 INS32 INS42 INS14 INS42 INS42 INS42 INS32 MOV43 INS85 INS42 INS32 MOV43 INS42 INS60 INS60 INS60 INS25 INS43 UPD74 UPD74 UPD74 UPD74 UPD74 UPD42 UPD42 INS22 INS42 UPD43 INS42 INS22 INS42 INS22 INS42 INS42 INS43 INS60 INS41 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS43 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS8 INS42 UPD43 MOV43 INS43 MOV43 UPD43 INS43 MOV43 MOV43 UPD43 MOV43 MOV43 UPD43 MOV43 UPD43 INS42 UPD43 INS42 INS52 INS42 UPD42 UPD43 INS52 INS42 INS52 INS42 INS42 INS43 INS59 INS27 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS60 INS21 INS53 UPD42 INS42 INS44 UPD42 INS42 UPD40 UPD42 UPD42 UPD42 UPD42 INS36 INS42 INS42 INS11 INS32 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 MOV43 INS59 INS32 INS14 INS83 INS43 INS42 UPD74 UPD74 UPD43 INS14 UPD43 INS27 INS43 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 UPD43 INS43 INS43 MOV43 UPD43 UPD42 MOV43 INS43 INS42 INS42 UPD42 INS42 INS40 INS42 INS42 INS40 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS45 INS45 INS42 INS42 INS40 INS40 INS78 INS42 INS60 INS25 INS41 INS43 INS59 INS27 INS8 INS14 INS42 INS42 INS32 INS42 INS33 INS53 MOV43 INS42 MOV42 INS42 UPD42 MOV42 INS40 INS14 INS43 INS27 INS42 INS45 INS40 INS45 INS40 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL42