YARN-2837. Support TimeLine server to recover delegation token when restarting. Contributed by Zhijie Shen

-import java.io.ByteArrayInputStream;
-import java.io.DataInputStream;
-import java.net.InetSocketAddress;
+import java.util.Map.Entry;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.io.Text;
-import org.apache.hadoop.security.SecurityUtil;
-import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.delegation.DelegationKey;
+import org.apache.hadoop.util.ReflectionUtils;
-import org.apache.hadoop.yarn.util.timeline.TimelineUtils;
+import org.apache.hadoop.yarn.server.timeline.recovery.LeveldbTimelineStateStore;
+import org.apache.hadoop.yarn.server.timeline.recovery.TimelineStateStore;
+import org.apache.hadoop.yarn.server.timeline.recovery.TimelineStateStore.TimelineServiceState;
-public class TimelineDelegationTokenSecretManagerService extends AbstractService {
+public class TimelineDelegationTokenSecretManagerService extends
+    AbstractService {
-  private InetSocketAddress serviceAddr = null;
+  private TimelineStateStore stateStore = null;
+    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_RECOVERY_ENABLED,
+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_RECOVERY_ENABLED)) {
+      stateStore = createStateStore(conf);
+      stateStore.init(conf);
+    }
+
-        tokenMaxLifetime, tokenRenewInterval,
-        3600000);
-    secretManager.startThreads();
-
-    serviceAddr = TimelineUtils.getTimelineTokenServiceAddress(getConfig());
+        tokenMaxLifetime, tokenRenewInterval, 3600000, stateStore);
+  protected void serviceStart() throws Exception {
+    if (stateStore != null) {
+      stateStore.start();
+      TimelineServiceState state = stateStore.loadState();
+      secretManager.recover(state);
+    }
+
+    secretManager.startThreads();
+    super.serviceStart();
+  }
+
+  @Override
+    if (stateStore != null) {
+      stateStore.stop();
+    }
+
-  /**
-   * Ge the instance of {link #TimelineDelegationTokenSecretManager}
-   * @return the instance of {link #TimelineDelegationTokenSecretManager}
-   */
-  public TimelineDelegationTokenSecretManager getTimelineDelegationTokenSecretManager() {
-    return secretManager;
+  protected TimelineStateStore createStateStore(
+      Configuration conf) {
+    return ReflectionUtils.newInstance(
+        conf.getClass(YarnConfiguration.TIMELINE_SERVICE_STATE_STORE_CLASS,
+            LeveldbTimelineStateStore.class,
+            TimelineStateStore.class), conf);
-   * Create a timeline secret manager
-   * 
-   * @param delegationKeyUpdateInterval
-   *          the number of seconds for rolling new secret keys.
-   * @param delegationTokenMaxLifetime
-   *          the maximum lifetime of the delegation tokens
-   * @param delegationTokenRenewInterval
-   *          how often the tokens must be renewed
-   * @param delegationTokenRemoverScanInterval
-   *          how often the tokens are scanned for expired tokens
+   * Ge the instance of {link #TimelineDelegationTokenSecretManager}
+   *
+   * @return the instance of {link #TimelineDelegationTokenSecretManager}
+  public TimelineDelegationTokenSecretManager
+  getTimelineDelegationTokenSecretManager() {
+    return secretManager;
+  }
+
-    public TimelineDelegationTokenSecretManager(long delegationKeyUpdateInterval,
-        long delegationTokenMaxLifetime, long delegationTokenRenewInterval,
-        long delegationTokenRemoverScanInterval) {
+    public static final Log LOG =
+        LogFactory.getLog(TimelineDelegationTokenSecretManager.class);
+
+    private TimelineStateStore stateStore;
+
+    /**
+     * Create a timeline secret manager
+     *
+     * @param delegationKeyUpdateInterval the number of seconds for rolling new secret keys.
+     * @param delegationTokenMaxLifetime the maximum lifetime of the delegation tokens
+     * @param delegationTokenRenewInterval how often the tokens must be renewed
+     * @param delegationTokenRemoverScanInterval how often the tokens are scanned for expired tokens
+     */
+    public TimelineDelegationTokenSecretManager(
+        long delegationKeyUpdateInterval,
+        long delegationTokenMaxLifetime,
+        long delegationTokenRenewInterval,
+        long delegationTokenRemoverScanInterval,
+        TimelineStateStore stateStore) {
+      this.stateStore = stateStore;
+    @Override
+    protected void storeNewMasterKey(DelegationKey key) throws IOException {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Storing master key " + key.getKeyId());
+      }
+      try {
+        if (stateStore != null) {
+          stateStore.storeTokenMasterKey(key);
+        }
+      } catch (IOException e) {
+        LOG.error("Unable to store master key " + key.getKeyId(), e);
+      }
+    }
+
+    @Override
+    protected void removeStoredMasterKey(DelegationKey key) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Removing master key " + key.getKeyId());
+      }
+      try {
+        if (stateStore != null) {
+          stateStore.removeTokenMasterKey(key);
+        }
+      } catch (IOException e) {
+        LOG.error("Unable to remove master key " + key.getKeyId(), e);
+      }
+    }
+
+    @Override
+    protected void storeNewToken(TimelineDelegationTokenIdentifier tokenId,
+        long renewDate) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Storing token " + tokenId.getSequenceNumber());
+      }
+      try {
+        if (stateStore != null) {
+          stateStore.storeToken(tokenId, renewDate);
+        }
+      } catch (IOException e) {
+        LOG.error("Unable to store token " + tokenId.getSequenceNumber(), e);
+      }
+    }
+
+    @Override
+    protected void removeStoredToken(TimelineDelegationTokenIdentifier tokenId)
+        throws IOException {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Storing token " + tokenId.getSequenceNumber());
+      }
+      try {
+        if (stateStore != null) {
+          stateStore.removeToken(tokenId);
+        }
+      } catch (IOException e) {
+        LOG.error("Unable to remove token " + tokenId.getSequenceNumber(), e);
+      }
+    }
+
+    @Override
+    protected void updateStoredToken(TimelineDelegationTokenIdentifier tokenId,
+        long renewDate) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Updating token " + tokenId.getSequenceNumber());
+      }
+      try {
+        if (stateStore != null) {
+          stateStore.updateToken(tokenId, renewDate);
+        }
+      } catch (IOException e) {
+        LOG.error("Unable to update token " + tokenId.getSequenceNumber(), e);
+      }
+    }
+
+    public void recover(TimelineServiceState state) throws IOException {
+      LOG.info("Recovering " + getClass().getSimpleName());
+      for (DelegationKey key : state.getTokenMasterKeyState()) {
+        addKey(key);
+      }
+      this.delegationTokenSequenceNumber = state.getLatestSequenceNumber();
+      for (Entry<TimelineDelegationTokenIdentifier, Long> entry :
+          state.getTokenState().entrySet()) {
+        addPersistedDelegationToken(entry.getKey(), entry.getValue());
+      }
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS55 UPD43 INS78 INS83 INS39 INS42 INS43 INS8 INS83 INS43 INS42 INS44 INS8 MOV78 MOV78 INS83 INS83 INS42 MOV74 INS23 INS23 MOV31 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 UPD42 INS25 INS42 INS42 INS25 MOV21 INS21 INS25 INS42 INS43 INS42 INS41 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS44 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS32 INS8 INS27 INS8 INS48 INS27 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV65 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS42 INS43 INS42 INS42 INS25 INS54 INS42 INS43 INS42 INS25 INS54 INS42 INS43 INS42 INS39 INS42 INS25 INS54 INS42 INS43 INS42 INS42 INS25 INS54 INS42 INS43 INS42 INS39 INS42 INS25 INS54 INS43 INS42 INS42 INS21 INS70 INS21 INS70 INS42 INS42 INS40 INS40 INS21 INS21 INS42 INS33 INS21 INS60 INS21 INS42 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS57 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS42 INS32 INS8 INS8 INS12 INS42 INS32 INS8 INS8 INS12 INS42 INS32 INS8 INS8 INS12 INS42 INS32 INS8 INS8 INS12 INS42 INS32 INS8 INS8 INS12 INS42 INS32 INS44 INS32 INS8 INS7 INS44 INS32 INS8 INS7 INS32 INS42 INS32 INS43 INS59 INS32 INS32 INS42 INS42 INS40 INS57 INS57 INS43 INS22 INS42 INS42 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS21 INS22 INS32 INS74 INS42 INS32 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS52 INS42 INS32 INS27 INS8 INS43 INS42 INS21 INS32 INS27 INS8 INS43 INS42 INS21 INS32 INS27 INS8 INS43 INS42 INS21 INS32 INS27 INS8 INS43 INS42 INS21 INS32 INS27 INS8 INS43 INS42 INS21 INS45 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS33 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS33 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS33 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS33 INS21 INS42 INS32 INS42 INS42 INS27 INS42 INS33 INS21 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS45 INS32 INS32 INS42 INS42 INS27 INS42 INS45 INS32 INS32 INS42 INS42 INS27 INS42 INS45 INS32 INS32 INS42 INS42 INS27 INS42 INS45 INS32 INS32 INS42 INS42 INS27 INS42 INS45 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL55