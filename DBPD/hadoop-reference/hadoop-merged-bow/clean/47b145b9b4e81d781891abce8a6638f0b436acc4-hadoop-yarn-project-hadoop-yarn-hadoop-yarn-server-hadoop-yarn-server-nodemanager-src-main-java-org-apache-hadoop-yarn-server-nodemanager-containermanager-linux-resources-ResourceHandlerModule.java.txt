YARN-6757. Refactor the usage of yarn.nodemanager.linux-container-executor.cgroups.mount-path
(Contributed by Miklos Szegedi via Daniel Templeton)

+import java.io.File;
+import java.io.IOException;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Arrays;
-    getTrafficControlBandwidthHandler(Configuration conf)
-      throws ResourceHandlerException {
+      getTrafficControlBandwidthHandler(Configuration conf)
+        throws ResourceHandlerException {
-    getOutboundBandwidthResourceHandler(Configuration conf)
-      throws ResourceHandlerException {
+      getOutboundBandwidthResourceHandler(Configuration conf)
+        throws ResourceHandlerException {
-    getCgroupsMemoryResourceHandler(
+      getCgroupsMemoryResourceHandler(
+
+  /**
+   * If a cgroup mount directory is specified, it returns cgroup directories
+   * with valid names.
+   * The requirement is that each hierarchy has to be named with the comma
+   * separated names of subsystems supported.
+   * For example: /sys/fs/cgroup/cpu,cpuacct
+   * @param cgroupMountPath Root cgroup mount path (/sys/fs/cgroup in the
+   *                        example above)
+   * @return A path to cgroup subsystem set mapping in the same format as
+   *         {@link CGroupsHandlerImpl#parseMtab(String)}
+   * @throws IOException if the specified directory cannot be listed
+   */
+  public static Map<String, Set<String>> parseConfiguredCGroupPath(
+      String cgroupMountPath) throws IOException {
+    File cgroupDir = new File(cgroupMountPath);
+    File[] list = cgroupDir.listFiles();
+    if (list == null) {
+      throw new IOException("Empty cgroup mount directory specified: " +
+          cgroupMountPath);
+    }
+
+    Map<String, Set<String>> pathSubsystemMappings = new HashMap<>();
+    Set<String> validCGroups =
+        CGroupsHandler.CGroupController.getValidCGroups();
+    for (File candidate: list) {
+      Set<String> cgroupList =
+          new HashSet<>(Arrays.asList(candidate.getName().split(",")));
+      // Collect the valid subsystem names
+      cgroupList.retainAll(validCGroups);
+      if (!cgroupList.isEmpty()) {
+        if (candidate.isDirectory() && candidate.canWrite()) {
+          pathSubsystemMappings.put(candidate.getAbsolutePath(), cgroupList);
+        } else {
+          LOG.warn("The following cgroup is not a directory or it is not"
+              + " writable" + candidate.getAbsolutePath());
+        }
+      }
+    }
+    return pathSubsystemMappings;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS43 INS42 INS42 INS60 INS60 INS25 INS60 INS60 INS70 INS41 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS65 INS42 INS66 INS42 INS42 INS43 INS43 INS42 INS43 INS59 INS5 INS59 INS27 INS8 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS68 INS42 INS42 INS42 INS42 INS14 INS43 INS85 INS42 INS32 INS42 INS33 INS53 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS21 INS25 INS42 INS42 INS69 INS43 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS40 INS42 INS42 INS74 INS59 INS32 INS38 INS8 INS43 INS42 INS43 INS27 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS27 INS8 INS8 INS43 INS42 INS42 INS32 INS32 INS32 INS21 INS21 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS45 INS32 INS42 INS42