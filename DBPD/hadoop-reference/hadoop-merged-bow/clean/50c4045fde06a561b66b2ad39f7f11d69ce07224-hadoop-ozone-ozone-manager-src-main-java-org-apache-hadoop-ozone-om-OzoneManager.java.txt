HDDS-805. Block token: Client api changes for block token. Contributed by Ajay Kumar.

+import java.util.Objects;
+import org.apache.hadoop.hdds.HddsConfigKeys;
+import org.apache.hadoop.hdds.security.x509.SecurityConfig;
+import org.apache.hadoop.ozone.security.OzoneBlockTokenSecretManager;
-      secretManager;
+      delegationTokenMgr;
+  private OzoneBlockTokenSecretManager blockTokenMgr;
+  private final Text omRpcAddressTxt;
+  private final SecurityConfig secConfig;
-    if (!testSecureOmFlag) {
+    if (!testSecureOmFlag || !isOzoneSecurityEnabled()) {
-    secretManager = createSecretManager(configuration);
+    omRpcAddressTxt = new Text(OmUtils.getOmRpcAddress(configuration));
+    secConfig = new SecurityConfig(configuration);
+    if (secConfig.isGrpcBlockTokenEnabled()) {
+      blockTokenMgr = createBlockTokenSecretManager(configuration);
+    }
+    if(secConfig.isSecurityEnabled()){
+      delegationTokenMgr = createDelegationTokenSecretManager(configuration);
+    }
-    keyManager =
-        new KeyManagerImpl(scmBlockClient, metadataManager, configuration,
-            omStorage.getOmId());
+    keyManager = new KeyManagerImpl(scmBlockClient, metadataManager,
+        configuration, omStorage.getOmId(), blockTokenMgr);
-  private OzoneDelegationTokenSecretManager createSecretManager(
+  private OzoneDelegationTokenSecretManager createDelegationTokenSecretManager(
-  private void stopSecretManager() throws IOException {
-    if (secretManager != null) {
-      LOG.info("Stopping OM secret manager");
-      secretManager.stop();
+  private OzoneBlockTokenSecretManager createBlockTokenSecretManager(
+      OzoneConfiguration conf) {
+
+    long expiryTime = conf.getTimeDuration(
+        HddsConfigKeys.HDDS_BLOCK_TOKEN_EXPIRY_TIME,
+        HddsConfigKeys.HDDS_BLOCK_TOKEN_EXPIRY_TIME_DEFAULT,
+        TimeUnit.MILLISECONDS);
+    // TODO: Pass OM cert serial ID.
+    if (testSecureOmFlag) {
+      return new OzoneBlockTokenSecretManager(secConfig, expiryTime, "1");
+    }
+    Objects.nonNull(certClient);
+    return new OzoneBlockTokenSecretManager(secConfig, expiryTime,
+        certClient.getCertificate(OM_DAEMON).getSerialNumber().toString());
+  }
+
+  private void stopSecretManager() {
+    if (blockTokenMgr != null) {
+      LOG.info("Stopping OM block token manager.");
+      try {
+        blockTokenMgr.stop();
+      } catch (IOException e) {
+        LOG.error("Failed to stop block token manager", e);
+      }
+    }
+
+    if (delegationTokenMgr != null) {
+      LOG.info("Stopping OM delegation token secret manager.");
+      try {
+        delegationTokenMgr.stop();
+      } catch (IOException e) {
+        LOG.error("Failed to stop delegation token manager", e);
+      }
-  private void startSecretManager() {
-    if (secretManager != null) {
+  @VisibleForTesting
+  public void startSecretManager() {
+    try {
+      readKeyPair();
+    } catch (OzoneSecurityException e) {
+      LOG.error("Unable to read key pair for OM.", e);
+      throw new RuntimeException(e);
+    }
+    if (secConfig.isGrpcBlockTokenEnabled() && blockTokenMgr != null) {
-        readKeyPair();
-        LOG.info("Starting OM secret manager");
-        secretManager.start(keyPair);
+        LOG.info("Starting OM block token secret manager");
+        blockTokenMgr.start(keyPair);
-        // Inability to start secret manager
-        // can't be recovered from.
-        LOG.error("Error starting secret manager.", e);
+        // Unable to start secret manager.
+        LOG.error("Error starting block token secret manager.", e);
+        throw new RuntimeException(e);
+      }
+    }
+
+    if (delegationTokenMgr != null) {
+      try {
+        LOG.info("Starting OM delegation token secret manager");
+        delegationTokenMgr.start(keyPair);
+      } catch (IOException e) {
+        // Unable to start secret manager.
+        LOG.error("Error starting delegation token secret manager.", e);
+  /**
+   * For testing purpose only.
+   * */
-    // TODO: Initialize it in contructor with implementation for certClient.
+    // TODO: Initialize it in constructor with implementation for certClient.
-        .setSecretManager(secretManager)
+        .setSecretManager(delegationTokenMgr)
-    boolean shouldRun = shouldUseDelegationTokens() && isOzoneSecurityEnabled();
-    boolean running = secretManager.isRunning();
-    if (shouldRun && !running) {
-      startSecretManager();
+    boolean shouldRun = isOzoneSecurityEnabled();
+    if (shouldRun) {
+      boolean running = delegationTokenMgr.isRunning()
+          && blockTokenMgr.isRunning();
+      if(!running){
+        startSecretManager();
+      }
-    if (secretManager == null || !secretManager.isRunning()) {
+    if (delegationTokenMgr == null || !delegationTokenMgr.isRunning()) {
-    token = secretManager.createToken(owner, renewer, realUser);
+    token = delegationTokenMgr.createToken(owner, renewer, realUser);
-      expiryTime = secretManager.renewToken(token, renewer);
+      expiryTime = delegationTokenMgr.renewToken(token, renewer);
-      id = secretManager.cancelToken(token, canceller);
+      id = delegationTokenMgr.cancelToken(token, canceller);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 UPD42 INS83 INS43 INS42 INS44 INS8 INS8 INS78 UPD83 INS29 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS25 INS25 INS42 INS43 INS42 INS60 INS25 INS21 INS41 INS25 MOV25 INS42 INS54 INS25 INS65 INS25 INS27 INS7 INS7 INS32 INS8 INS32 INS8 INS42 INS39 INS59 INS42 INS8 INS32 INS14 INS27 INS8 INS8 INS12 INS27 INS27 INS8 INS66 INS42 INS8 MOV38 INS38 INS42 INS14 INS42 INS14 INS42 INS42 MOV21 INS42 INS42 INS21 INS42 INS32 INS41 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS54 UPD42 INS54 MOV21 INS44 INS8 INS32 INS27 INS42 INS33 INS54 MOV32 MOV60 MOV25 INS32 INS43 INS32 INS43 INS42 INS7 INS42 INS42 INS42 INS40 INS40 INS40 INS14 INS42 INS32 INS42 INS32 INS8 INS12 INS8 INS12 INS43 INS42 INS21 MOV53 INS42 INS42 UPD42 MOV42 MOV33 INS8 INS12 MOV38 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS32 INS43 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS21 MOV44 INS8 UPD45 MOV21 INS44 INS8 INS42 INS32 INS44 INS21 INS21 INS44 INS8 UPD42 INS27 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS43 INS42 INS21 INS42 INS42 INS45 INS42 INS43 INS42 INS53 INS32 INS32 INS43 INS42 INS21 INS53 INS32 INS32 UPD42 UPD42 INS42 INS42 INS32 UPD42 INS42 INS32 UPD45 UPD42 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 UPD42 MOV42 MOV42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 UPD45 INS43 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 DEL42 DEL43 DEL8 DEL27 DEL42 DEL32 DEL27 DEL32 DEL42 DEL27