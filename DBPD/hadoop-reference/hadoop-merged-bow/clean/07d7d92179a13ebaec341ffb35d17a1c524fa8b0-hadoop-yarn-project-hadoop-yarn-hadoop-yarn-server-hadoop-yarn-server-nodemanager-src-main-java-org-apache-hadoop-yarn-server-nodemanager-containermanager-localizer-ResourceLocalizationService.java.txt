Merge r1462698 through r1464807 from trunk.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1464815 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.DiskChecker;
-  private final LocalResourcesTracker publicRsrc;
+  private LocalResourcesTracker publicRsrc;
-    this.publicRsrc = new LocalResourcesTrackerImpl(null, dispatcher);
+  private void validateConf(Configuration conf) {
+    int perDirFileLimit =
+        conf.getInt(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY,
+          YarnConfiguration.DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY);
+    if (perDirFileLimit <= 36) {
+      LOG.error(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
+          + " parameter is configured with very low value.");
+      throw new YarnException(
+        YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
+            + " parameter is configured with a value less than 37.");
+    } else {
+      LOG.info("per directory file limit = " + perDirFileLimit);
+    }
+  }
+
+    this.validateConf(conf);
+    this.publicRsrc =
+        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);
+
-    privateRsrc.putIfAbsent(userName,
-        new LocalResourcesTrackerImpl(userName, dispatcher));
-    if (null != appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),
-        new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {
+    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,
+      dispatcher, false, super.getConfig()));
+    if (null != appRsrc.putIfAbsent(
+      ConverterUtils.toString(app.getAppId()),
+      new LocalResourcesTrackerImpl(app.getUser(), dispatcher, false, super
+        .getConfig()))) {
-                    //   should appear in logs, but it's an internal error
-                    //   that should have no effect on applications
+                    // should appear in logs, but it's an internal error
+                    // that should have no effect on applications
+            Path hierarchicalPath =
+              publicRsrc.getPathForLocalization(key, publicDirDestPath);
+            if (!hierarchicalPath.equals(publicDirDestPath)) {
+              publicDirDestPath = hierarchicalPath;
+              DiskChecker.checkDir(
+                new File(publicDirDestPath.toUri().getPath()));
+            }
+              publicRsrc.localizationCompleted(key, true);
+              LocalResourceRequest req = assoc.getResource().getRequest();
-                    assoc.getResource().getRequest(), e.getCause()));
+                    req, e.getCause()));
+              publicRsrc.localizationCompleted(req, false);
-                LocalResourceRequest req = assoc.getResource().getRequest();
-}
+}

INS26 INS40 INS31 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS60 INS25 INS21 MOV21 INS42 INS39 INS59 INS27 INS8 INS8 INS32 INS42 INS32 INS42 INS34 INS21 INS53 INS21 INS52 INS42 INS42 INS42 INS42 INS40 INS40 INS32 INS14 INS32 INS9 INS42 INS9 INS48 INS42 INS42 INS27 INS43 INS27 INS42 INS42 INS27 INS42 INS9 INS48 INS40 INS45 INS42 INS40 INS45 INS45 INS42 INS42 INS60 INS25 INS43 INS59 INS38 INS8 INS42 INS42 INS32 INS32 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS32 MOV60 INS21 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS9 INS32 INS43 INS32 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32