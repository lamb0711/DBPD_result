HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.

-          namesystem.leaseManager.addLease(cons
-              .getFileUnderConstructionFeature().getClientName(), path);
+          namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());
-        sourceNamesystem.saveFilesUnderConstruction(out, snapshotUCMap);
+        saveFilesUnderConstruction(sourceNamesystem, out, snapshotUCMap);
+
+    /**
+     * Serializes leases.
+     */
+    void saveFilesUnderConstruction(FSNamesystem fsn, DataOutputStream out,
+                                    Map<Long, INodeFile> snapshotUCMap) throws IOException {
+      // This is run by an inferior thread of saveNamespace, which holds a read
+      // lock on our behalf. If we took the read lock here, we could block
+      // for fairness if a writer is waiting on the lock.
+      final LeaseManager leaseManager = fsn.getLeaseManager();
+      final FSDirectory dir = fsn.getFSDirectory();
+      synchronized (leaseManager) {
+        Collection<Long> filesWithUC = leaseManager.getINodeIdWithLeases();
+        for (Long id : filesWithUC) {
+          // TODO: for HDFS-5428, because of rename operations, some
+          // under-construction files that are
+          // in the current fs directory can also be captured in the
+          // snapshotUCMap. We should remove them from the snapshotUCMap.
+          snapshotUCMap.remove(id);
+        }
+        out.writeInt(filesWithUC.size() + snapshotUCMap.size()); // write the size
+
+        for (Long id : filesWithUC) {
+          INodeFile file = dir.getInode(id).asFile();
+          String path = file.getFullPathName();
+          FSImageSerialization.writeINodeUnderConstruction(
+                  out, file, path);
+        }
+
+        for (Map.Entry<Long, INodeFile> entry : snapshotUCMap.entrySet()) {
+          // for those snapshot INodeFileUC, we use "/.reserved/.inodes/<inodeid>"
+          // as their paths
+          StringBuilder b = new StringBuilder();
+          b.append(FSDirectory.DOT_RESERVED_PATH_PREFIX)
+                  .append(Path.SEPARATOR).append(FSDirectory.DOT_INODES_STRING)
+                  .append(Path.SEPARATOR).append(entry.getValue().getId());
+          FSImageSerialization.writeINodeUnderConstruction(
+                  out, entry.getValue(), b.toString());
+        }
+      }
+    }

INS31 INS29 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS51 INS66 INS42 INS42 INS43 INS43 INS43 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS60 INS70 INS21 INS70 INS70 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS42 INS8 INS32 INS44 INS42 INS8 INS44 INS32 INS8 UPD42 UPD42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS27 INS43 INS42 INS60 INS60 INS21 INS74 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS43 INS43 INS43 INS59 INS32 INS32 MOV32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS40 DEL32