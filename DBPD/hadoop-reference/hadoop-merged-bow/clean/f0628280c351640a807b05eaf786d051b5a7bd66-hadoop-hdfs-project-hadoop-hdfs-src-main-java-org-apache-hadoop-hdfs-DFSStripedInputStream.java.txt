HDFS-8282. Erasure coding: move striped reading logic to StripedBlockUtil. Contributed by Zhe Zhang.

-import com.google.common.annotations.VisibleForTesting;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.ReadPortion;
+import static org.apache.hadoop.hdfs.util.StripedBlockUtil.planReadPortions;
+
-import java.util.ArrayList;
-import java.util.List;
-  /**
-   * This method plans the read portion from each block in the stripe
-   * @param dataBlkNum The number of data blocks in the striping group
-   * @param cellSize The size of each striping cell
-   * @param startInBlk Starting offset in the striped block
-   * @param len Length of the read request
-   * @param bufOffset  Initial offset in the result buffer
-   * @return array of {@link ReadPortion}, each representing the portion of I/O
-   *         for an individual block in the group
-   */
-  @VisibleForTesting
-  static ReadPortion[] planReadPortions(final int dataBlkNum,
-      final int cellSize, final long startInBlk, final int len, int bufOffset) {
-    ReadPortion[] results = new ReadPortion[dataBlkNum];
-    for (int i = 0; i < dataBlkNum; i++) {
-      results[i] = new ReadPortion();
-    }
-
-    // cellIdxInBlk is the index of the cell in the block
-    // E.g., cell_3 is the 2nd cell in blk_0
-    int cellIdxInBlk = (int) (startInBlk / (cellSize * dataBlkNum));
-
-    // blkIdxInGroup is the index of the block in the striped block group
-    // E.g., blk_2 is the 3rd block in the group
-    final int blkIdxInGroup = (int) (startInBlk / cellSize % dataBlkNum);
-    results[blkIdxInGroup].startOffsetInBlock = cellSize * cellIdxInBlk +
-        startInBlk % cellSize;
-    boolean crossStripe = false;
-    for (int i = 1; i < dataBlkNum; i++) {
-      if (blkIdxInGroup + i >= dataBlkNum && !crossStripe) {
-        cellIdxInBlk++;
-        crossStripe = true;
-      }
-      results[(blkIdxInGroup + i) % dataBlkNum].startOffsetInBlock =
-          cellSize * cellIdxInBlk;
-    }
-
-    int firstCellLen = Math.min(cellSize - (int) (startInBlk % cellSize), len);
-    results[blkIdxInGroup].offsetsInBuf.add(bufOffset);
-    results[blkIdxInGroup].lengths.add(firstCellLen);
-    results[blkIdxInGroup].readLength += firstCellLen;
-
-    int i = (blkIdxInGroup + 1) % dataBlkNum;
-    for (int done = firstCellLen; done < len; done += cellSize) {
-      ReadPortion rp = results[i];
-      rp.offsetsInBuf.add(done + bufOffset);
-      final int readLen = Math.min(len - done, cellSize);
-      rp.lengths.add(readLen);
-      rp.readLength += readLen;
-      i = (i + 1) % dataBlkNum;
-    }
-    return results;
-  }
-
-
-  /**
-   * This class represents the portion of I/O associated with each block in the
-   * striped block group.
-   */
-  static class ReadPortion {
-    /**
-     * startOffsetInBlock
-     *     |
-     *     v
-     *     |<-lengths[0]->|<-  lengths[1]  ->|<-lengths[2]->|
-     * +------------------+------------------+----------------+
-     * |      cell_0      |      cell_3      |     cell_6     |  <- blk_0
-     * +------------------+------------------+----------------+
-     *   _/                \_______________________
-     *  |                                          |
-     *  v offsetsInBuf[0]                          v offsetsInBuf[1]
-     * +------------------------------------------------------+
-     * |  cell_0     |      cell_1 and cell_2      |cell_3 ...|   <- buf
-     * |  (partial)  |    (from blk_1 and blk_2)   |          |
-     * +------------------------------------------------------+
-     */
-    private long startOffsetInBlock = 0;
-    private int readLength = 0;
-    private final List<Integer> offsetsInBuf = new ArrayList<>();
-    private final List<Integer> lengths = new ArrayList<>();
-
-    int[] getOffsets() {
-      int[] offsets = new int[offsetsInBuf.size()];
-      for (int i = 0; i < offsets.length; i++) {
-        offsets[i] = offsetsInBuf.get(i);
-      }
-      return offsets;
-    }
-
-    int[] getLengths() {
-      int[] lens = new int[this.lengths.size()];
-      for (int i = 0; i < lens.length; i++) {
-        lens[i] = this.lengths.get(i);
-      }
-      return lens;
-    }
-
-    int getReadLength() {
-      return readLength;
-    }
-
-    long getStartOffsetInBlock() {
-      return startOffsetInBlock;
-    }
-  }

MOV26 MOV26 UPD40 UPD40 DEL40 DEL26 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL24 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL27 DEL36 DEL27 DEL36 DEL11 DEL59 DEL60 DEL83 DEL39 DEL42 DEL39 DEL42 DEL42 DEL27 DEL42 DEL27 DEL36 DEL11 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL22 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL27 DEL7 DEL21 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL27 DEL42 DEL27 DEL42 DEL38 DEL27 DEL42 DEL37 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL2 DEL42 DEL22 DEL42 DEL42 DEL27 DEL7 DEL21 DEL8 DEL24 DEL39 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL42 DEL27 DEL36 DEL11 DEL27 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL2 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL42 DEL42 DEL34 DEL27 DEL36 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL40 DEL42 DEL42 DEL42 DEL27 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL27 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL36 DEL42 DEL27 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL52 DEL42 DEL22 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL55