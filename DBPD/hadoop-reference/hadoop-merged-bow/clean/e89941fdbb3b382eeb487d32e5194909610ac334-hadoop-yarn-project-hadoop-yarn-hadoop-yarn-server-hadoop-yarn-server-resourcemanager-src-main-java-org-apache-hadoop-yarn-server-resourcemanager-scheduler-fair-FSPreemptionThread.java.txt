YARN-9041. Performance Optimization of method FSPreemptionThread#identifyContainersToPreempt. Contributed by Wanqiang Ji.

-   * 2. For each {@link ResourceRequest}, iterate through matching
-   * nodes and identify containers to preempt all on one node, also
-   * optimizing for least number of AM container preemptions. Only nodes
-   * that match the locality level specified in the {@link ResourceRequest}
-   * are considered. However, if this would lead to AM preemption, and locality
-   * relaxation is allowed, then the search space is expanded to all nodes.
+   * 2. For each {@link ResourceRequest}, get the best preemptable containers.
-                identifyContainersToPreemptForOneContainer(potentialNodes, rr);
-
-        // Don't preempt AM containers just to satisfy local requests if relax
-        // locality is enabled.
-        if (bestContainers != null
-                && bestContainers.numAMContainers > 0
-                && !ResourceRequest.isAnyLocation(rr.getResourceName())
-                && rr.getRelaxLocality()) {
-          bestContainers = identifyContainersToPreemptForOneContainer(
-                  scheduler.getNodeTracker().getAllNodes(), rr);
-        }
-
+            getBestPreemptableContainers(rr, potentialNodes);
+  /**
+   * Iterate through matching nodes and identify containers to preempt all on
+   * one node, also optimizing for least number of AM container preemptions.
+   * Only nodes that match the locality level specified in the
+   * {@link ResourceRequest} are considered. However, if this would lead to
+   * AM preemption, and locality relaxation is allowed, then the search space
+   * is expanded to the remaining nodes.
+   *
+   * @param rr resource request
+   * @param potentialNodes list of {@link FSSchedulerNode}
+   * @return the list of best preemptable containers for the resource request
+   */
+  private PreemptableContainers getBestPreemptableContainers(ResourceRequest rr,
+      List<FSSchedulerNode> potentialNodes) {
+    PreemptableContainers bestContainers =
+        identifyContainersToPreemptForOneContainer(potentialNodes, rr);
+
+    if (rr.getRelaxLocality()
+        && !ResourceRequest.isAnyLocation(rr.getResourceName())
+        && bestContainers != null
+        && bestContainers.numAMContainers > 0) {
+      List<FSSchedulerNode> remainingNodes =
+          scheduler.getNodeTracker().getAllNodes();
+      remainingNodes.removeAll(potentialNodes);
+      PreemptableContainers spareContainers =
+          identifyContainersToPreemptForOneContainer(remainingNodes, rr);
+      if (spareContainers != null && spareContainers.numAMContainers
+          < bestContainers.numAMContainers) {
+        bestContainers = spareContainers;
+      }
+    }
+
+    return bestContainers;
+  }
+

INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS74 INS42 MOV60 MOV25 INS41 UPD66 INS66 INS66 INS66 MOV65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS43 INS43 MOV27 INS8 INS42 INS42 INS42 INS42 INS27 INS60 INS21 INS60 INS25 MOV32 MOV38 MOV27 INS74 INS59 INS32 INS43 INS59 INS27 MOV8 INS60 INS42 INS42 INS43 INS43 INS42 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS27 INS27 INS43 INS59 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL32 DEL27 DEL27