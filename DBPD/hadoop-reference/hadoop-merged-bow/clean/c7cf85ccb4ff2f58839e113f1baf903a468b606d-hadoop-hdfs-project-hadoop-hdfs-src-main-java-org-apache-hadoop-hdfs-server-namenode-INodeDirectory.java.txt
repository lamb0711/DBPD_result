HDFS-4507. Update quota verification for snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1451081 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.NSQuotaExceededException;
-  private void assertChildrenNonNull() {
-    if (children == null) {
-      throw new AssertionError("children is null: " + this);
-    }
-  }
-
-    return Collections.binarySearch(children, name);
+    return children == null? -1: Collections.binarySearch(children, name);
-  protected int searchChildrenForExistingINode(final INode inode) {
-    assertChildrenNonNull();
+  private int searchChildrenForExistingINode(final INode inode) {
+    Preconditions.checkNotNull(children);
-  public boolean removeChild(INode child, Snapshot latest) {
+  public boolean removeChild(INode child, Snapshot latest)
+      throws NSQuotaExceededException {
-    assertChildrenNonNull();
+    Preconditions.checkNotNull(children);
-      final long nsQuota, final long dsQuota) {
+      final long nsQuota, final long dsQuota) throws NSQuotaExceededException {
-      s.setQuota(nsQuota, dsQuota, null);
+      s.setQuota(nsQuota, dsQuota);
-      Snapshot latest) {
+      Snapshot latest) throws NSQuotaExceededException {
-    assertChildrenNonNull();
+    Preconditions.checkNotNull(children);
-  public INodeDirectory recordModification(Snapshot latest) {
+  public INodeDirectory recordModification(Snapshot latest)
+      throws NSQuotaExceededException {
-      final INode snapshotCopy) {
+      final INode snapshotCopy) throws NSQuotaExceededException {
-      if (curNode instanceof INodeDirectorySnapshottable) {
+      if (curNode instanceof INodeDirectoryWithSnapshot) {
-              ((INodeDirectorySnapshottable)curNode).getLastSnapshot());
+              ((INodeDirectoryWithSnapshot)curNode).getLastSnapshot());
-      final Snapshot latest) {
-    if (isInLatestSnapshot(latest)) {
-      return replaceSelf4INodeDirectoryWithSnapshot()
-          .addChild(node, setModTime, latest);
-    }
-
-    if (children == null) {
-      children = new ArrayList<INode>(DEFAULT_FILES_PER_DIRECTORY);
-    }
+      final Snapshot latest) throws NSQuotaExceededException {
-    node.parent = this;
-    children.add(-low - 1, node);
-    // update modification time of the parent directory
-    if (setModTime) {
-      updateModificationTime(node.getModificationTime(), latest);
+
+    if (isInLatestSnapshot(latest)) {
+      return replaceSelf4INodeDirectoryWithSnapshot()
+          .addChild(node, setModTime, latest);
-    if (node.getGroupName() == null) {
-      node.setGroup(getGroupName(), null);
+    addChild(node, low);
+    if (setModTime) {
+      // update modification time of the parent directory
+      updateModificationTime(node.getModificationTime(), latest);
-  /**
-   * Add new INode to the file tree.
-   * Find the parent and insert 
-   * 
-   * @param path file path
-   * @param newNode INode to be added
-   * @return false if the node already exists; otherwise, return true;
-   * @throws FileNotFoundException if parent does not exist or 
-   * @throws UnresolvedLinkException if any path component is a symbolic link
-   * is not a directory.
-   */
-  boolean addINode(String path, INode newNode
-      ) throws FileNotFoundException, PathIsNotDirectoryException,
-      UnresolvedLinkException {
-    byte[][] pathComponents = getPathComponents(path);        
-    if (pathComponents.length < 2) { // add root
+
+  /** The same as addChild(node, false, null, false) */
+  public boolean addChild(INode node) {
+    final int low = searchChildren(node.getLocalNameBytes());
+    if (low >= 0) {
-    newNode.setLocalName(pathComponents[pathComponents.length - 1]);
-    // insert into the parent children list
-    final INodesInPath iip =  getExistingPathINodes(pathComponents, 2, false);
-    final INodeDirectory parent = INodeDirectory.valueOf(iip.getINode(0),
-        pathComponents);
-    return parent.addChild(newNode, true, iip.getLatestSnapshot());
+    addChild(node, low);
+    return true;
+  }
+
+  /**
+   * Add the node to the children list at the given insertion point.
+   * The basic add method which actually calls children.add(..).
+   */
+  private void addChild(final INode node, final int insertionPoint) {
+    if (children == null) {
+      children = new ArrayList<INode>(DEFAULT_FILES_PER_DIRECTORY);
+    }
+    node.parent = this;
+    children.add(-insertionPoint - 1, node);
+
+    if (node.getGroupName() == null) {
+      node.setGroup(getGroupName());
+    }
-  Quota.Counts computeQuotaUsage(Quota.Counts counts) {
+  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache) {
-        child.computeQuotaUsage(counts);
+        child.computeQuotaUsage(counts, useCache);
+
+    return computeQuotaUsage4CurrentDirectory(counts);    
+  }
+
+  /** Add quota usage for this inode excluding children. */
+  public Quota.Counts computeQuotaUsage4CurrentDirectory(Quota.Counts counts) {
-  /** Set the children list. */
-  public void setChildren(List<INode> children) {
-    this.children = children;
+  /** Set the children list to null. */
+  public void clearChildren() {
+    this.children = null;
-    setChildren(null);
+    clearChildren();
-      final BlocksMapUpdateInfo collectedBlocks) {
+      final BlocksMapUpdateInfo collectedBlocks)
+          throws NSQuotaExceededException {
-      final BlocksMapUpdateInfo collectedBlocks) {
+      final BlocksMapUpdateInfo collectedBlocks)
+          throws NSQuotaExceededException {
-//      out.print(((INodeDirectoryWithQuota)this).quotaString());
+      out.print(((INodeDirectoryWithQuota)this).quotaString());

INS26 INS40 INS31 INS31 INS31 UPD83 INS43 INS43 INS43 INS43 INS43 INS43 MOV25 MOV29 INS83 MOV39 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV78 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 UPD42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD65 UPD42 MOV60 MOV25 MOV21 INS41 INS65 INS83 MOV43 INS42 INS83 INS39 INS42 MOV25 MOV21 INS21 MOV25 INS40 INS43 INS42 INS39 INS42 INS25 INS41 INS65 INS42 INS42 INS16 UPD66 INS83 INS39 UPD27 INS9 INS66 INS66 INS32 INS40 MOV27 INS8 INS32 INS66 UPD66 MOV27 INS38 MOV32 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS42 UPD42 INS32 INS42 UPD34 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS70 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 INS21 INS34 INS42 INS32 INS38 INS34 MOV44 INS42 INS8 INS32 UPD43 UPD42 MOV42 UPD42 MOV42 INS42 INS21 INS42 INS42 INS32 UPD42 INS32 INS36 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS11 INS43 INS52 INS42 UPD43 UPD42 DEL83 DEL39 DEL42 DEL42 DEL43 DEL45 DEL52 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL33 DEL42 DEL38 DEL34 DEL27 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL39 DEL85 DEL85 DEL5 DEL32 DEL40 DEL42 DEL40 DEL34 DEL27 DEL2 DEL33 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL34 DEL9 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL59 DEL60 DEL42 DEL9 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL33