HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.

-  public void solveVandermondeSystem(int[] x, byte[][] y,
+  public void solveVandermondeSystem(int[] x, byte[][] y, int[] outputOffsets,
+    int idx1, idx2;
-        for (int k = 0; k < dataLen; k++) {
-          y[j][k] = (byte) (y[j][k] ^ mulTable[x[i]][y[j - 1][k] &
+        for (idx2 = outputOffsets[j-1], idx1 = outputOffsets[j];
+             idx1 < outputOffsets[j] + dataLen; idx1++, idx2++) {
+          y[j][idx1] = (byte) (y[j][idx1] ^ mulTable[x[i]][y[j - 1][idx2] &
-        for (int k = 0; k < dataLen; k++) {
-          y[j][k] = (byte) (divTable[y[j][k] & 0x000000FF][x[j] ^
+        for (idx1 = outputOffsets[j];
+             idx1 < outputOffsets[j] + dataLen; idx1++) {
+          y[j][idx1] = (byte) (divTable[y[j][idx1] & 0x000000FF][x[j] ^
-        for (int k = 0; k < dataLen; k++) {
-          y[j][k] = (byte) (y[j][k] ^ y[j + 1][k]);
+        for (idx2 = outputOffsets[j+1], idx1 = outputOffsets[j];
+             idx1 < outputOffsets[j] + dataLen; idx1++, idx2++) {
+          y[j][idx1] = (byte) (y[j][idx1] ^ y[j + 1][idx2]);
-  public void solveVandermondeSystem(int[] x, ByteBuffer[] y,
-                                     int len, int dataLen) {
+  public void solveVandermondeSystem(int[] x, ByteBuffer[] y, int len) {
+    ByteBuffer p;
+    int idx1, idx2;
-        for (int k = 0; k < dataLen; k++) {
-          y[j].put(k, (byte) (y[j].get(k) ^ mulTable[x[i]][y[j - 1].get(k) &
+        p = y[j];
+        for (idx1 = p.position(), idx2 = y[j-1].position();
+             idx1 < p.limit(); idx1++, idx2++) {
+          p.put(idx1, (byte) (p.get(idx1) ^ mulTable[x[i]][y[j-1].get(idx2) &
+
-        for (int k = 0; k < dataLen; k++) {
-          y[j].put(k, (byte) (divTable[y[j].get(k) & 0x000000FF][x[j] ^
-              x[j - i - 1]]));
+        p = y[j];
+        for (idx1 = p.position(); idx1 < p.limit(); idx1++) {
+          p.put(idx1, (byte) (divTable[p.get(idx1) &
+              0x000000FF][x[j] ^ x[j - i - 1]]));
+
-        for (int k = 0; k < dataLen; k++) {
-          y[j].put(k, (byte) (y[j].get(k) ^ y[j + 1].get(k)));
+        p = y[j];
+        for (idx1 = p.position(), idx2 = y[j+1].position();
+             idx1 < p.limit(); idx1++, idx2++) {
+          p.put(idx1, (byte) (p.get(idx1) ^ y[j+1].get(idx2)));
+   * A "bulk" version of the substitute.
+   * Tends to be 2X faster than the "int" substitute in a loop.
+   *
+   * @param p input polynomial
+   * @param offsets
+   * @param len
+   * @param q store the return result
+   * @param offset
+   * @param x input field
+   */
+  public void substitute(byte[][] p, int[] offsets,
+                         int len, byte[] q, int offset, int x) {
+    int y = 1, iIdx, oIdx;
+    for (int i = 0; i < p.length; i++) {
+      byte[] pi = p[i];
+      for (iIdx = offsets[i], oIdx = offset;
+           iIdx < offsets[i] + len; iIdx++, oIdx++) {
+        int pij = pi[iIdx] & 0x000000FF;
+        q[oIdx] = (byte) (q[oIdx] ^ mulTable[pij][y]);
+      }
+      y = mulTable[x][y];
+    }
+  }
+
+  /**
-    int y = 1;
+    int y = 1, iIdx, oIdx;
-      int len = pi.remaining();
-      for (int j = 0; j < len; j++) {
-        int pij = pi.get(j) & 0x000000FF;
-        q.put(j, (byte) (q.get(j) ^ mulTable[pij][y]));
+      for (iIdx = pi.position(), oIdx = q.position();
+           iIdx < pi.limit(); iIdx++, oIdx++) {
+        int pij = pi.get(iIdx) & 0x000000FF;
+        q.put(oIdx, (byte) (q.get(oIdx) ^ mulTable[pij][y]));
+   * The "bulk" version of the remainder.
+   * Warning: This function will modify the "dividend" inputs.
+   */
+  public void remainder(byte[][] dividend, int[] offsets,
+                        int len, int[] divisor) {
+    int idx1, idx2;
+    for (int i = dividend.length - divisor.length; i >= 0; i--) {
+      for (int j = 0; j < divisor.length; j++) {
+        for (idx2 = offsets[j + i], idx1 = offsets[i + divisor.length - 1];
+             idx1 < offsets[i + divisor.length - 1] + len;
+             idx1++, idx2++) {
+          int ratio = divTable[dividend[i + divisor.length - 1][idx1] &
+              0x00FF][divisor[divisor.length - 1]];
+          dividend[j + i][idx2] = (byte) ((dividend[j + i][idx2] & 0x00FF) ^
+              mulTable[ratio][divisor[j]]);
+        }
+      }
+    }
+  }
+
+  /**
+    int idx1, idx2;
+    ByteBuffer b1, b2;
-      int width = dividend[i].remaining();
-        for (int k = 0; k < width; k++) {
-          int ratio = divTable[dividend[i + divisor.length - 1].get(k) &
+        b1 = dividend[i + divisor.length - 1];
+        b2 = dividend[j + i];
+        for (idx1 = b1.position(), idx2 = b2.position();
+             idx1 < b1.limit(); idx1++, idx2++) {
+          int ratio = divTable[b1.get(idx1) &
-          dividend[j + i].put(k, (byte) ((dividend[j + i].get(k) & 0x00FF) ^
+          b2.put(idx2, (byte) ((b2.get(idx2) & 0x00FF) ^

INS31 INS31 INS44 INS29 INS44 INS44 INS44 INS44 INS44 INS44 MOV29 INS83 INS39 INS42 MOV44 MOV44 MOV44 INS8 INS29 INS44 INS44 INS44 INS44 MOV29 INS83 INS39 INS42 MOV44 MOV44 INS8 INS5 INS42 INS60 INS60 INS60 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS5 INS42 INS5 INS42 INS39 INS42 INS5 INS42 INS39 INS42 INS39 INS42 INS60 INS24 INS65 INS5 INS42 INS5 INS42 INS39 INS42 INS5 INS42 INS60 INS60 INS60 INS24 INS39 INS85 INS39 INS59 INS59 INS43 INS59 INS39 INS59 INS59 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS66 INS42 INS42 INS66 INS39 INS85 INS85 INS39 INS85 INS39 INS85 INS59 INS59 INS58 INS27 INS37 INS39 INS59 INS59 INS59 MOV58 MOV27 MOV37 INS8 INS66 INS66 INS39 INS85 INS85 INS39 INS85 INS39 INS85 INS39 INS59 INS59 INS39 INS59 INS59 INS43 INS59 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS34 INS42 INS42 MOV60 INS24 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS34 INS42 INS24 MOV37 MOV37 INS8 INS42 INS34 INS5 INS7 INS7 INS37 INS37 INS7 INS7 INS7 INS27 INS37 INS37 INS8 INS42 INS27 MOV58 INS27 MOV37 INS8 INS21 INS21 INS21 MOV24 INS39 INS85 UPD42 INS2 INS42 INS2 INS42 INS42 UPD42 INS27 INS42 INS42 INS42 INS2 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS21 INS40 INS40 INS42 INS40 INS21 INS21 INS24 INS7 INS7 INS37 INS7 INS7 INS7 INS37 INS7 INS7 INS7 INS37 INS7 INS7 INS7 INS7 INS7 INS37 INS42 INS42 INS42 INS42 INS2 MOV42 INS7 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS32 INS7 INS7 INS37 INS7 INS7 INS7 INS7 INS27 INS37 INS37 INS8 INS42 INS2 INS42 INS2 UPD42 INS27 UPD42 INS42 INS42 INS2 UPD42 INS27 UPD42 INS42 INS2 INS42 INS2 UPD42 INS27 UPD42 INS42 INS42 MOV2 INS42 INS32 INS42 MOV32 UPD42 INS32 UPD42 INS42 INS42 MOV2 INS42 INS32 UPD42 INS32 UPD42 INS42 MOV2 INS42 INS32 INS42 MOV32 UPD42 INS32 UPD42 INS42 INS42 INS42 INS2 MOV11 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS11 INS42 INS2 INS42 INS2 UPD42 INS27 UPD42 INS42 INS42 INS2 INS42 INS2 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS27 INS42 INS42 INS2 MOV42 INS42 INS42 INS2 MOV42 INS42 INS27 INS42 INS42 INS2 MOV42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS2 INS42 INS42 INS32 INS34 INS39 INS36 INS42 INS27 INS42 INS27 INS2 INS42 INS7 INS42 INS27 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS32 INS42 INS34 INS42 INS42 MOV2 INS42 INS42 MOV2 INS42 INS34 INS42 INS42 MOV2 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS34 INS42 INS27 INS2 INS11 INS27 INS34 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS11 UPD42 UPD42 UPD42 INS2 INS32 INS2 INS42 INS40 INS27 INS34 MOV2 INS42 MOV39 MOV36 INS42 INS40 INS2 INS2 INS39 INS36 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS40 INS42 INS27 INS42 INS27 INS27 MOV2 INS2 INS32 INS2 INS32 INS42 INS42 INS2 INS32 INS34 INS40 INS34 INS36 INS2 UPD42 MOV2 INS42 UPD42 INS42 INS42 INS42 MOV2 INS27 INS42 UPD42 INS2 INS42 INS42 MOV2 INS42 INS42 INS42 INS42 INS27 INS2 INS2 INS2 MOV32 MOV34 INS42 INS27 INS2 INS32 INS34 INS42 INS42 INS42 INS42 UPD42 MOV2 INS42 UPD42 INS42 UPD42 INS42 INS34 MOV2 INS42 INS42 INS42 INS42 INS27 INS42 INS34 DEL39 DEL42 DEL34 DEL59 DEL58 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL2 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL2 DEL39 DEL42 DEL44 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL2 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL8 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL11 DEL32