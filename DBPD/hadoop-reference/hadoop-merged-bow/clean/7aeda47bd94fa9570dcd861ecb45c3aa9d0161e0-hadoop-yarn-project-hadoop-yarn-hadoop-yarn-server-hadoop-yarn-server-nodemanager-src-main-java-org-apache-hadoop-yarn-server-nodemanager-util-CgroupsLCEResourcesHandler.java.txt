Merge branch 'trunk' into HDFS-6581

+import org.apache.commons.io.FileUtils;
+import org.apache.hadoop.yarn.util.ResourceCalculatorPlugin;
+  private final String CPU_PERIOD_US = "cfs_period_us";
+  private final String CPU_QUOTA_US = "cfs_quota_us";
+  private final int MAX_QUOTA_US = 1000 * 1000;
+  private final int MIN_PERIOD_US = 1000;
+    this.init(lce,
+        ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, conf));
+  }
+
+  @VisibleForTesting
+  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)
+      throws IOException {
-    
+
+
+    // cap overall usage to the number of cores allocated to YARN
+    float yarnProcessors =
+        NodeManagerHardwareUtils.getContainersCores(plugin, conf);
+    int systemProcessors = plugin.getNumProcessors();
+    if (systemProcessors != (int) yarnProcessors) {
+      LOG.info("YARN containers restricted to " + yarnProcessors + " cores");
+      int[] limits = getOverallLimits(yarnProcessors);
+      updateCgroup(CONTROLLER_CPU, "", CPU_PERIOD_US, String.valueOf(limits[0]));
+      updateCgroup(CONTROLLER_CPU, "", CPU_QUOTA_US, String.valueOf(limits[1]));
+    } else if (cpuLimitsExist()) {
+      LOG.info("Removing CPU constraints for YARN containers.");
+      updateCgroup(CONTROLLER_CPU, "", CPU_QUOTA_US, String.valueOf(-1));
+    }
+  boolean cpuLimitsExist() throws IOException {
+    String path = pathForCgroup(CONTROLLER_CPU, "");
+    File quotaFile = new File(path, CONTROLLER_CPU + "." + CPU_QUOTA_US);
+    if (quotaFile.exists()) {
+      String contents = FileUtils.readFileToString(quotaFile, "UTF-8");
+      int quotaUS = Integer.parseInt(contents.trim());
+      if (quotaUS != -1) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  @VisibleForTesting
+  int[] getOverallLimits(float yarnProcessors) {
+
+    int[] ret = new int[2];
+
+    if (yarnProcessors < 0.01f) {
+      throw new IllegalArgumentException("Number of processors can't be <= 0.");
+    }
+
+    int quotaUS = MAX_QUOTA_US;
+    int periodUS = (int) (MAX_QUOTA_US / yarnProcessors);
+    if (yarnProcessors < 1.0f) {
+      periodUS = MAX_QUOTA_US;
+      quotaUS = (int) (periodUS * yarnProcessors);
+      if (quotaUS < MIN_PERIOD_US) {
+        LOG
+          .warn("The quota calculated for the cgroup was too low. The minimum value is "
+              + MIN_PERIOD_US + ", calculated value is " + quotaUS
+              + ". Setting quota to minimum value.");
+        quotaUS = MIN_PERIOD_US;
+      }
+    }
+
+    // cfs_period_us can't be less than 1000 microseconds
+    // if the value of periodUS is less than 1000, we can't really use cgroups
+    // to limit cpu
+    if (periodUS < MIN_PERIOD_US) {
+      LOG
+        .warn("The period calculated for the cgroup was too low. The minimum value is "
+            + MIN_PERIOD_US + ", calculated value is " + periodUS
+            + ". Using all available CPU.");
+      periodUS = MAX_QUOTA_US;
+      quotaUS = -1;
+    }
+
+    ret[0] = periodUS;
+    ret[1] = quotaUS;
+    return ret;
+  }
-      in = new BufferedReader(new FileReader(new File(MTAB_FILE)));
+      in = new BufferedReader(new FileReader(new File(getMtabFileName())));
-      throw new IOException("Error while reading " + MTAB_FILE, e);
+      throw new IOException("Error while reading " + getMtabFileName(), e);
-        LOG.warn("Error closing the stream: " + MTAB_FILE, e2);
+        LOG.warn("Error closing the stream: " + getMtabFileName(), e2);
-          + "cgroup for cpu controller in " + MTAB_FILE);
+          + "cgroup for cpu controller in " + getMtabFileName());
+
+  @VisibleForTesting
+  String getMtabFileName() {
+    return MTAB_FILE;
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS44 INS39 INS42 INS43 INS8 INS78 INS5 INS42 INS44 INS8 INS78 INS43 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS27 INS42 INS34 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS60 INS60 INS25 INS42 INS60 INS60 INS25 INS41 INS42 INS39 INS85 INS39 INS42 INS60 INS25 INS60 INS60 INS25 INS25 INS21 INS21 INS41 INS42 INS42 INS41 INS34 INS34 INS42 INS32 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS43 INS59 INS43 INS59 INS32 INS8 INS9 INS5 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS7 INS7 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS11 INS21 INS60 INS21 INS21 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS60 INS60 INS25 INS39 INS85 INS42 INS3 INS42 INS34 INS53 INS42 INS42 INS42 INS11 INS42 INS34 INS21 INS21 INS25 INS42 INS42 INS21 INS21 INS21 INS2 INS42 INS2 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS32 INS5 INS59 INS32 INS32 INS42 INS21 INS21 INS42 INS42 INS45 INS43 INS42 INS27 INS43 INS59 INS39 INS59 INS27 INS8 INS5 INS34 INS14 INS39 INS36 INS7 INS7 INS27 INS8 INS32 INS7 INS7 INS42 INS34 INS42 INS34 INS42 INS42 INS27 INS39 INS85 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS38 INS41 INS39 INS85 INS43 INS45 INS27 INS42 INS42 INS42 INS11 INS42 INS42 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS38 MOV43 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS34 INS9 INS42 INS42 INS42 INS39 INS36 INS32 INS7 INS45 INS42 INS45 INS42 INS45 INS34 MOV43 INS32 INS42 INS34 INS42 INS34 INS42 INS42 INS38 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS34 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS32 INS42 DEL83 DEL42 DEL42 DEL42 DEL42