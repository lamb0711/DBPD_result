MAPREDUCE-5304. mapreduce.Job killTask/failTask/getTaskCompletionEvents methods have incompatible signature changes. (kkambatl via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492360 13f79535-47bb-0310-9956-ffa450edef68

-   * @return an array of {@link TaskCompletionEvent}s
+   * @return an array of {@link org.apache.hadoop.mapred.TaskCompletionEvent}s
-  public TaskCompletionEvent[] getTaskCompletionEvents(final int startFrom) 
-      throws IOException {
+  public org.apache.hadoop.mapred.TaskCompletionEvent[]
+    getTaskCompletionEvents(final int startFrom) throws IOException {
-      return getTaskCompletionEvents(startFrom, 10);
+      TaskCompletionEvent[] events = getTaskCompletionEvents(startFrom, 10);
+      org.apache.hadoop.mapred.TaskCompletionEvent[] retEvents =
+          new org.apache.hadoop.mapred.TaskCompletionEvent[events.length];
+      for (int i = 0; i < events.length; i++) {
+        retEvents[i] = org.apache.hadoop.mapred.TaskCompletionEvent.downgrade
+            (events[i]);
+      }
+      return retEvents;
+   * @param taskId the id of the task to kill.
+   * @param shouldFail if <code>true</code> the task is failed and added
+   *                   to failed tasks list, otherwise it is just killed,
+   *                   w/o affecting job failure status.
+   */
+  @Private
+  public boolean killTask(final TaskAttemptID taskId,
+                          final boolean shouldFail) throws IOException {
+    ensureState(JobState.RUNNING);
+    try {
+      return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
+        public Boolean run() throws IOException, InterruptedException {
+          return cluster.getClient().killTask(taskId, shouldFail);
+        }
+      });
+    }
+    catch (InterruptedException ie) {
+      throw new IOException(ie);
+    }
+  }
+
+  /**
+   * Kill indicated task attempt.
-  public boolean killTask(final TaskAttemptID taskId) 
+  public void killTask(final TaskAttemptID taskId)
-    ensureState(JobState.RUNNING);
-    try {
-      return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
-        public Boolean run() throws IOException, InterruptedException {
-          return cluster.getClient().killTask(taskId, false);
-        }
-      });
-    }
-    catch (InterruptedException ie) {
-      throw new IOException(ie);
-    }
+    killTask(taskId, false);
-  public boolean failTask(final TaskAttemptID taskId) 
+  public void failTask(final TaskAttemptID taskId)
-    ensureState(JobState.RUNNING);
-    try {
-      return ugi.doAs(new PrivilegedExceptionAction<Boolean>() {
-        @Override
-        public Boolean run() throws IOException, InterruptedException {
-          return cluster.getClient().killTask(taskId, true);
-        }
-      });
-    }
-    catch (InterruptedException ie) {
-      throw new IOException(ie);
-    }
+    killTask(taskId, true);

INS31 INS31 INS5 INS29 INS78 UPD42 INS44 INS44 MOV43 MOV29 MOV83 UPD39 MOV39 MOV42 MOV44 MOV43 INS8 MOV29 MOV83 INS39 UPD42 MOV42 MOV44 MOV43 MOV8 INS43 INS85 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS39 INS42 MOV21 INS21 INS40 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS32 INS40 INS60 INS60 INS24 UPD42 INS42 INS9 MOV42 MOV42 UPD9 MOV9 MOV5 INS59 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 MOV32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS40 INS5 INS40 INS42 INS34 INS7 INS43 INS85 INS2 INS32 INS40 INS42 INS42 INS40 INS42 INS2 MOV43 MOV43 MOV43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL31 DEL1 DEL14 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL9 DEL40 DEL42 DEL42 DEL32 DEL32 DEL41