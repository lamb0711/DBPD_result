Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1202013 13f79535-47bb-0310-9956-ffa450edef68

+  static class RangeHeaderUrlOpener extends ByteRangeInputStream.URLOpener {
+    RangeHeaderUrlOpener(final URL url) {
+      super(url);
+    }
+
+    @Override
+    protected HttpURLConnection openConnection() throws IOException {
+      return (HttpURLConnection)url.openConnection();
+    }
+
+    /** Use HTTP Range header for specifying offset. */
+    @Override
+    protected HttpURLConnection openConnection(final long offset) throws IOException {
+      final HttpURLConnection conn = openConnection();
+      conn.setRequestMethod("GET");
+      if (offset != 0L) {
+        conn.setRequestProperty("Range", "bytes=" + offset + "-");
+      }
+      return conn;
+    }  
+  }
+
+  static class RangeHeaderInputStream extends ByteRangeInputStream {
+    RangeHeaderInputStream(RangeHeaderUrlOpener o, RangeHeaderUrlOpener r) {
+      super(o, r);
+    }
+
+    RangeHeaderInputStream(final URL url) {
+      this(new RangeHeaderUrlOpener(url), new RangeHeaderUrlOpener(null));
+    }
+
+    /** Expects HTTP_OK and HTTP_PARTIAL response codes. */
+    @Override
+    protected void checkResponseCode(final HttpURLConnection connection
+        ) throws IOException {
+      final int code = connection.getResponseCode();
+      if (startPos != 0 && code != HttpURLConnection.HTTP_PARTIAL) {
+        // We asked for a byte range but did not receive a partial content
+        // response...
+        throw new IOException("HTTP_PARTIAL expected, received " + code);
+      } else if (startPos == 0 && code != HttpURLConnection.HTTP_OK) {
+        // We asked for all bytes from the beginning but didn't receive a 200
+        // response (none of the other 2xx codes are valid here)
+        throw new IOException("HTTP_OK expected, received " + code);
+      }
+    }
+
+    @Override
+    protected URL getResolvedUrl(final HttpURLConnection connection) {
+      return connection.getURL();
+    }
+  }
+
-    return new FSDataInputStream(new ByteRangeInputStream(u));
+    return new FSDataInputStream(new RangeHeaderInputStream(u));

INS55 INS55 INS83 INS42 INS43 INS31 INS31 INS31 INS83 INS42 MOV43 INS31 INS31 INS31 INS31 INS40 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS44 INS44 INS8 INS42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS46 INS42 INS42 INS42 INS41 INS65 INS42 INS42 INS83 INS39 INS42 INS42 INS60 INS21 INS25 INS41 INS43 INS42 INS43 INS42 INS46 INS83 INS43 INS42 INS17 INS65 INS42 INS83 INS43 INS42 INS42 INS60 INS25 INS42 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS11 INS66 INS83 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS14 INS66 INS42 INS83 INS39 INS59 INS27 INS8 INS25 INS42 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS34 INS21 INS43 INS42 INS43 INS33 INS42 INS32 INS27 INS27 INS53 INS27 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS40 INS14 INS27 INS27 INS53 INS42 INS42 INS42 INS45 INS27 INS43 INS27 INS42 INS34 INS42 INS40 INS14 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS27 INS42 INS45 INS42