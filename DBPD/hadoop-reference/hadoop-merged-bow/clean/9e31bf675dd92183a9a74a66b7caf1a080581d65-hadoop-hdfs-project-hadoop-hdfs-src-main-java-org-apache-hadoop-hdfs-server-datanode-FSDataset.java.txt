HDFS-3021. Use generic type to declare FSDatasetInterface.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295929 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.datanode.FSDatasetInterface.FSVolumeInterface;
-class FSDataset implements FSDatasetInterface {
+class FSDataset implements FSDatasetInterface<FSDataset.FSVolume> {
-  static class Factory extends FSDatasetInterface.Factory {
+  static class Factory extends FSDatasetInterface.Factory<FSDataset> {
-    public FSDatasetInterface createFSDatasetInterface(DataNode datanode,
+    public FSDataset createFSDatasetInterface(DataNode datanode,
-    private volatile List<FSVolumeInterface> volumes = null;
+    private volatile List<FSVolume> volumes = null;
-    BlockVolumeChoosingPolicy blockChooser;
+    BlockVolumeChoosingPolicy<FSVolume> blockChooser;
-    FSVolumeSet(List<FSVolumeInterface> volumes, int failedVols,
-        BlockVolumeChoosingPolicy blockChooser) {
+    FSVolumeSet(List<FSVolume> volumes, int failedVols,
+        BlockVolumeChoosingPolicy<FSVolume> blockChooser) {
-      return (FSVolume)blockChooser.chooseVolume(volumes, blockSize);
+      return blockChooser.chooseVolume(volumes, blockSize);
-      for (FSVolumeInterface v : volumes) {
-        dfsUsed += ((FSVolume)v).getDfsUsed();
+      for (FSVolume v : volumes) {
+        dfsUsed += v.getDfsUsed();
-      for (FSVolumeInterface v : volumes) {
-        dfsUsed += ((FSVolume)v).getBlockPoolUsed(bpid);
+      for (FSVolume v : volumes) {
+        dfsUsed += v.getBlockPoolUsed(bpid);
-      for (FSVolumeInterface v : volumes) {
-        capacity += ((FSVolume)v).getCapacity();
+      for (FSVolume v : volumes) {
+        capacity += v.getCapacity();
-    private void getVolumeMap(ReplicasMap volumeMap)
-        throws IOException {
-      for (FSVolumeInterface v : volumes) {
-        ((FSVolume)v).getVolumeMap(volumeMap);
+    private void getVolumeMap(ReplicasMap volumeMap) throws IOException {
+      for (FSVolume v : volumes) {
+        v.getVolumeMap(volumeMap);
-      for (FSVolumeInterface v : volumes) {
-        ((FSVolume)v).getVolumeMap(bpid, volumeMap);
+      for (FSVolume v : volumes) {
+        v.getVolumeMap(bpid, volumeMap);
-      final List<FSVolumeInterface> volumeList = new ArrayList<FSVolumeInterface>(volumes);
+      final List<FSVolume> volumeList = new ArrayList<FSVolume>(volumes);
-        FSVolume fsv = (FSVolume)volumeList.get(idx);
+        FSVolume fsv = volumeList.get(idx);
-        List<FSVolumeInterface> newVols = new ArrayList<FSVolumeInterface>();
-        for (FSVolumeInterface vol : volumeList) {
+        final List<FSVolume> newVols = new ArrayList<FSVolume>();
+        for (FSVolume vol : volumeList) {
-      for (FSVolumeInterface v : volumes) {
-        ((FSVolume)v).addBlockPool(bpid, conf);
+      for (FSVolume v : volumes) {
+        v.addBlockPool(bpid, conf);
-      for (FSVolumeInterface v : volumes) {
-        ((FSVolume)v).shutdownBlockPool(bpid);
+      for (FSVolume v : volumes) {
+        v.shutdownBlockPool(bpid);
-      for (FSVolumeInterface volume : volumes) {
+      for (FSVolume volume : volumes) {
-          ((FSVolume)volume).shutdown();
+          volume.shutdown();
-  public List<FSVolumeInterface> getVolumes() {
+  public List<FSVolume> getVolumes() {
-    final List<FSVolumeInterface> volArray = new ArrayList<FSVolumeInterface>(
+    final List<FSVolume> volArray = new ArrayList<FSVolume>(
-    BlockVolumeChoosingPolicy blockChooserImpl =
-      (BlockVolumeChoosingPolicy) ReflectionUtils.newInstance(
-        conf.getClass(DFSConfigKeys.DFS_DATANODE_BLOCKVOLUMECHOICEPOLICY,
+    @SuppressWarnings("unchecked")
+    final BlockVolumeChoosingPolicy<FSVolume> blockChooserImpl =
+        ReflectionUtils.newInstance(conf.getClass(
+            DFSConfigKeys.DFS_DATANODE_BLOCKVOLUMECHOICEPOLICY,
-            BlockVolumeChoosingPolicy.class),
-        conf);
+            BlockVolumeChoosingPolicy.class), conf);
-      FSVolume v;
+      final FSVolume v;
-    for (FSVolumeInterface v : volumes.volumes) {
-      final FSVolume volume = (FSVolume)v;
+    for (FSVolume volume : volumes.volumes) {
-      for (FSVolumeInterface volume : volumes.volumes) {
-        if (!((FSVolume)volume).isBPDirEmpty(bpid)) {
+      for (FSVolume volume : volumes.volumes) {
+        if (!volume.isBPDirEmpty(bpid)) {
-    for (FSVolumeInterface volume : volumes.volumes) {
-      ((FSVolume)volume).deleteBPDirectories(bpid, force);
+    for (FSVolume volume : volumes.volumes) {
+      volume.deleteBPDirectories(bpid, force);

INS26 INS40 INS74 MOV43 INS43 INS74 UPD74 INS40 MOV43 INS43 UPD43 UPD74 INS74 UPD43 INS42 UPD42 UPD43 MOV43 INS43 UPD74 INS74 UPD42 UPD74 INS79 INS83 INS74 UPD42 INS42 UPD43 MOV43 MOV43 MOV32 UPD74 UPD43 INS42 INS45 MOV43 MOV43 MOV32 MOV43 INS42 MOV43 UPD42 MOV43 MOV43 MOV43 MOV43 MOV43 UPD43 MOV43 MOV43 MOV43 UPD42 UPD74 INS83 UPD42 UPD74 MOV43 INS83 UPD74 UPD43 UPD43 INS42 INS42 INS42 UPD43 MOV32 UPD43 MOV43 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 UPD74 UPD43 INS42 INS42 UPD42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL11 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL11 DEL42 DEL43 DEL42 DEL83 DEL42 DEL42 DEL11 DEL59 DEL60 DEL42 DEL11 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36