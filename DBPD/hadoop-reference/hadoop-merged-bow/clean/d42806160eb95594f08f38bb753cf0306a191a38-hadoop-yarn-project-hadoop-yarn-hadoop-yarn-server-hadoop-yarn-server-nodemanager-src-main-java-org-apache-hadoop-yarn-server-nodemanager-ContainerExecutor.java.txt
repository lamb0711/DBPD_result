YARN-8667. Cleanup symlinks when container restarted by NM.
           Contributed by Chandni Singh

+import java.util.HashMap;
+
-      for (Map.Entry<Path, List<String>> resourceEntry :
-          resources.entrySet()) {
-        for (String linkName : resourceEntry.getValue()) {
-          if (new Path(linkName).getName().equals(WILDCARD)) {
-            // If this is a wildcarded path, link to everything in the
-            // directory from the working directory
-            for (File wildLink : readDirAsUser(user, resourceEntry.getKey())) {
-              sb.symlink(new Path(wildLink.toString()),
-                  new Path(wildLink.getName()));
-            }
-          } else {
-            sb.symlink(resourceEntry.getKey(), new Path(linkName));
-          }
-        }
+      Map<Path, Path> symLinks = resolveSymLinks(resources, user);
+      for (Map.Entry<Path, Path> symLink : symLinks.entrySet()) {
+        sb.symlink(symLink.getKey(), symLink.getValue());
+   * Perform any cleanup before the next launch of the container.
+   * @param container         container
+   */
+  public void cleanupBeforeRelaunch(Container container)
+      throws IOException, InterruptedException {
+    if (container.getLocalizedResources() != null) {
+
+      Map<Path, Path> symLinks = resolveSymLinks(
+          container.getLocalizedResources(), container.getUser());
+
+      for (Map.Entry<Path, Path> symLink : symLinks.entrySet()) {
+        LOG.debug("{} deleting {}", container.getContainerId(),
+            symLink.getValue());
+        deleteAsUser(new DeletionAsUserContext.Builder()
+            .setUser(container.getUser())
+            .setSubDir(symLink.getValue())
+            .build());
+      }
+    }
+  }
+
+  /**
+
+  private Map<Path, Path> resolveSymLinks(Map<Path,
+      List<String>> resources, String user) {
+    Map<Path, Path> symLinks = new HashMap<>();
+    for (Map.Entry<Path, List<String>> resourceEntry :
+        resources.entrySet()) {
+      for (String linkName : resourceEntry.getValue()) {
+        if (new Path(linkName).getName().equals(WILDCARD)) {
+          // If this is a wildcarded path, link to everything in the
+          // directory from the working directory
+          for (File wildLink : readDirAsUser(user, resourceEntry.getKey())) {
+            symLinks.put(new Path(wildLink.toString()),
+                new Path(wildLink.getName()));
+          }
+        } else {
+          symLinks.put(resourceEntry.getKey(), new Path(linkName));
+        }
+      }
+    }
+    return symLinks;
+  }

INS26 INS40 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS74 INS42 INS44 INS44 MOV8 INS65 INS65 INS43 INS42 INS42 INS42 INS25 INS43 INS43 INS43 INS74 INS42 INS43 INS42 INS60 INS41 INS8 INS66 INS42 INS66 INS42 INS27 INS8 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS74 INS59 INS42 MOV21 INS60 INS70 INS32 INS33 INS60 INS70 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS42 INS14 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS43 INS43 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 UPD42 INS14 INS42 INS32 INS42 INS42 INS43 INS42 INS42 UPD42 UPD42 INS40