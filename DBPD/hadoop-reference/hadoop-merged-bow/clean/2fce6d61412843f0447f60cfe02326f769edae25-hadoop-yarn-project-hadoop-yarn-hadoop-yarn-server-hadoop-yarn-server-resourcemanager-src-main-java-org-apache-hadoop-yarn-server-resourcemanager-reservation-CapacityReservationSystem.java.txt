YARN-2690. [YARN-2574] Make ReservationSystem and its dependent classes independent of Scheduler type. (Anubhav Dhoot via kasha)

-import org.apache.hadoop.util.ReflectionUtils;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.QueueMetrics;
-import org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacitySchedulerConfiguration;
-  protected Plan initializePlan(String planQueueName) throws YarnException {
-    SharingPolicy adPolicy = getAdmissionPolicy(planQueueName);
-    String planQueuePath = capScheduler.getQueue(planQueueName).getQueuePath();
-    adPolicy.init(planQueuePath, capScheduler.getConfiguration());
+  protected Resource getMinAllocation() {
+    return capScheduler.getMinimumResourceCapability();
+  }
+
+  @Override
+  protected Resource getMaxAllocation() {
+    return capScheduler.getMaximumResourceCapability();
+  }
+
+  @Override
+  protected ResourceCalculator getResourceCalculator() {
+    return capScheduler.getResourceCalculator();
+  }
+
+  @Override
+  protected QueueMetrics getRootQueueMetrics() {
+    return capScheduler.getRootQueueMetrics();
+  }
+
+  @Override
+  protected String getPlanQueuePath(String planQueueName) {
+    return capScheduler.getQueue(planQueueName).getQueuePath();
+  }
+
+  @Override
+  protected Resource getPlanQueueCapacity(String planQueueName) {
+    Resource minAllocation = getMinAllocation();
+    ResourceCalculator rescCalc = getResourceCalculator();
-    // Calculate the max plan capacity
-    Resource minAllocation = capScheduler.getMinimumResourceCapability();
-    ResourceCalculator rescCalc = capScheduler.getResourceCalculator();
-    Resource totCap =
-        rescCalc.multiplyAndNormalizeDown(capScheduler.getClusterResource(),
-            planQueue.getAbsoluteCapacity(), minAllocation);
-    Plan plan =
-        new InMemoryPlan(capScheduler.getRootQueueMetrics(), adPolicy,
-            getAgent(planQueuePath), totCap, planStepSize, rescCalc,
-            minAllocation, capScheduler.getMaximumResourceCapability(),
-            planQueueName, getReplanner(planQueuePath), capScheduler
-                .getConfiguration().getMoveOnExpiry(planQueuePath));
-    LOG.info("Intialized plan {0} based on reservable queue {1}",
-        plan.toString(), planQueueName);
-    return plan;
+    return rescCalc.multiplyAndNormalizeDown(capScheduler.getClusterResource(),
+        planQueue.getAbsoluteCapacity(), minAllocation);
-  protected Planner getReplanner(String planQueueName) {
-    CapacitySchedulerConfiguration capSchedulerConfig =
-        capScheduler.getConfiguration();
-    String plannerClassName = capSchedulerConfig.getReplanner(planQueueName);
-    LOG.info("Using Replanner: " + plannerClassName + " for queue: "
-        + planQueueName);
-    try {
-      Class<?> plannerClazz =
-          capSchedulerConfig.getClassByName(plannerClassName);
-      if (Planner.class.isAssignableFrom(plannerClazz)) {
-        Planner planner =
-            (Planner) ReflectionUtils.newInstance(plannerClazz, conf);
-        planner.init(planQueueName, capSchedulerConfig);
-        return planner;
-      } else {
-        throw new YarnRuntimeException("Class: " + plannerClazz
-            + " not instance of " + Planner.class.getCanonicalName());
-      }
-    } catch (ClassNotFoundException e) {
-      throw new YarnRuntimeException("Could not instantiate Planner: "
-          + plannerClassName + " for queue: " + planQueueName, e);
-    }
-  }
-
-  @Override
-  protected ReservationAgent getAgent(String queueName) {
-    CapacitySchedulerConfiguration capSchedulerConfig =
-        capScheduler.getConfiguration();
-    String agentClassName = capSchedulerConfig.getReservationAgent(queueName);
-    LOG.info("Using Agent: " + agentClassName + " for queue: " + queueName);
-    try {
-      Class<?> agentClazz = capSchedulerConfig.getClassByName(agentClassName);
-      if (ReservationAgent.class.isAssignableFrom(agentClazz)) {
-        return (ReservationAgent) ReflectionUtils.newInstance(agentClazz, conf);
-      } else {
-        throw new YarnRuntimeException("Class: " + agentClassName
-            + " not instance of " + ReservationAgent.class.getCanonicalName());
-      }
-    } catch (ClassNotFoundException e) {
-      throw new YarnRuntimeException("Could not instantiate Agent: "
-          + agentClassName + " for queue: " + queueName, e);
-    }
-  }
-
-  @Override
-  protected SharingPolicy getAdmissionPolicy(String queueName) {
-    CapacitySchedulerConfiguration capSchedulerConfig =
-        capScheduler.getConfiguration();
-    String admissionPolicyClassName =
-        capSchedulerConfig.getReservationAdmissionPolicy(queueName);
-    LOG.info("Using AdmissionPolicy: " + admissionPolicyClassName
-        + " for queue: " + queueName);
-    try {
-      Class<?> admissionPolicyClazz =
-          capSchedulerConfig.getClassByName(admissionPolicyClassName);
-      if (SharingPolicy.class.isAssignableFrom(admissionPolicyClazz)) {
-        return (SharingPolicy) ReflectionUtils.newInstance(
-            admissionPolicyClazz, conf);
-      } else {
-        throw new YarnRuntimeException("Class: " + admissionPolicyClassName
-            + " not instance of " + SharingPolicy.class.getCanonicalName());
-      }
-    } catch (ClassNotFoundException e) {
-      throw new YarnRuntimeException("Could not instantiate AdmissionPolicy: "
-          + admissionPolicyClassName + " for queue: " + queueName, e);
-    }
+  protected ReservationSchedulerConfiguration
+      getReservationSchedulerConfiguration() {
+    return capScheduler.getConfiguration();
+
+

MOV26 UPD40 INS31 INS31 INS31 INS31 INS78 MOV43 INS42 INS78 MOV83 UPD43 MOV43 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 MOV78 INS83 INS43 INS42 INS8 MOV78 INS83 MOV43 INS42 MOV44 INS8 MOV78 MOV43 UPD42 MOV44 MOV78 INS43 INS42 INS8 INS42 INS42 UPD42 INS41 INS42 INS41 UPD42 MOV42 MOV41 INS41 MOV60 MOV41 UPD42 MOV42 MOV41 MOV32 MOV32 MOV32 MOV32 MOV32 UPD43 UPD43 MOV32 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL8 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL8 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8