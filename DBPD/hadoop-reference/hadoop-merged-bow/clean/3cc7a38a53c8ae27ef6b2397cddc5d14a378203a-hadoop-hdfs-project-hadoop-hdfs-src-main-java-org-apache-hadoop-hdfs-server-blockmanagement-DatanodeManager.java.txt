HDFS-5096. Automatically cache new data added to a cached path (contributed by Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532924 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor.CachedBlocksList;
+import org.apache.hadoop.hdfs.server.namenode.CachedBlock;
+import org.apache.hadoop.util.IntrusiveCollection;
+   * Whether we should tell datanodes what to cache in replies to
+   * heartbeat messages.
+   */
+  private boolean sendCachingCommands = false;
+
+  /**
-        
-        // Check pending caching
-        List<Block> pendingCacheList = nodeinfo.getCacheBlocks();
-        if (pendingCacheList != null) {
-          long blockIds[] = new long[pendingCacheList.size()];
-          for (int i = 0; i < pendingCacheList.size(); i++) {
-            blockIds[i] = pendingCacheList.get(i).getBlockId();
-          }
-          cmds.add(new BlockIdCommand(DatanodeProtocol.DNA_CACHE, blockPoolId,
-              blockIds));
+        DatanodeCommand pendingCacheCommand =
+            getCacheCommand(nodeinfo.getPendingCached(), nodeinfo,
+              DatanodeProtocol.DNA_CACHE, blockPoolId);
+        if (pendingCacheCommand != null) {
+          cmds.add(pendingCacheCommand);
-        // Check cached block invalidation
-        blks = nodeinfo.getInvalidateCacheBlocks();
-        if (blks != null) {
-          long blockIds[] = new long[blks.length];
-          for (int i = 0; i < blks.length; i++) {
-            blockIds[i] = blks[i].getBlockId();
-          }
-          cmds.add(new BlockIdCommand(DatanodeProtocol.DNA_UNCACHE,
-              blockPoolId, blockIds));
+        DatanodeCommand pendingUncacheCommand =
+            getCacheCommand(nodeinfo.getPendingUncached(), nodeinfo,
+              DatanodeProtocol.DNA_UNCACHE, blockPoolId);
+        if (pendingUncacheCommand != null) {
+          cmds.add(pendingUncacheCommand);
+   * Convert a CachedBlockList into a DatanodeCommand with a list of blocks.
+   *
+   * @param list       The {@link CachedBlocksList}.  This function 
+   *                   clears the list.
+   * @param datanode   The datanode.
+   * @param action     The action to perform in the command.
+   * @param poolId     The block pool id.
+   * @return           A DatanodeCommand to be sent back to the DN, or null if
+   *                   there is nothing to be done.
+   */
+  private DatanodeCommand getCacheCommand(CachedBlocksList list,
+      DatanodeDescriptor datanode, int action, String poolId) {
+    int length = list.size();
+    if (length == 0) {
+      return null;
+    }
+    // Read and clear the existing cache commands.
+    long[] blockIds = new long[length];
+    int i = 0;
+    for (Iterator<CachedBlock> iter = list.iterator();
+            iter.hasNext(); ) {
+      CachedBlock cachedBlock = iter.next();
+      blockIds[i++] = cachedBlock.getBlockId();
+      iter.remove();
+    }
+    if (!sendCachingCommands) {
+      // Do not send caching commands unless the FSNamesystem told us we
+      // should.
+      return null;
+    }
+    return new BlockIdCommand(action, poolId, blockIds);
+  }
+
+  /**
+
+  public void setSendCachingCommands(boolean sendCachingCommands) {
+    this.sendCachingCommands = sendCachingCommands;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS31 INS31 INS29 INS83 INS39 INS59 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS9 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS60 INS25 MOV60 INS60 INS24 INS25 INS41 INS39 INS42 INS21 INS66 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS42 INS39 INS59 INS27 INS8 MOV5 INS39 MOV59 INS58 INS32 INS8 INS38 INS8 INS14 INS7 INS42 INS42 INS32 INS42 INS34 INS41 INS74 INS59 INS42 INS42 INS60 INS21 INS21 INS42 INS41 MOV43 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS33 INS42 INS43 INS43 INS42 INS32 INS43 INS59 INS7 INS32 INS33 INS52 INS42 INS25 INS60 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS2 INS32 INS42 INS42 INS43 MOV27 INS8 INS43 INS59 INS42 INS42 INS42 MOV37 INS42 INS42 UPD42 MOV42 UPD42 INS32 UPD42 MOV21 UPD42 MOV42 INS42 INS32 UPD42 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS32 INS42 INS40 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL43 DEL40 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL85 DEL40 DEL3 DEL59 DEL60 DEL39 DEL58 DEL42 DEL40 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL40 DEL42 DEL42 DEL14 DEL39 DEL85 DEL42 DEL42 DEL32