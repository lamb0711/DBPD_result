Merge trunk to branch.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608603 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Set;
-import java.util.TreeSet;
-import java.util.Arrays;
-import java.util.List;
+import java.util.Collection;
+import java.util.HashSet;
-import java.util.ListIterator;
+import java.util.List;
+import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.util.StringUtils;
-  private Set<String> users;
+  private Collection<String> users;
-  private Set<String> groups;
+  private Collection<String> groups;
-    buildACL(aclString);
+    buildACL(aclString.split(" ", 2));
+  }
+  
+  /**
+   * Construct a new ACL from String representation of users and groups
+   * 
+   * The arguments are comma separated lists
+   * 
+   * @param users comma separated list of users
+   * @param groups comma separated list of groups
+   */
+  public AccessControlList(String users, String groups) {
+    buildACL(new String[] {users, groups});
-   * Build ACL from the given string, format of the string is
-   * user1,...,userN group1,...,groupN
+   * Build ACL from the given two Strings.
+   * The Strings contain comma separated values.
-   * @param aclString build ACL from this string
+   * @param aclString build ACL from array of Strings
-  private void buildACL(String aclString) {
-    users = new TreeSet<String>();
-    groups = new TreeSet<String>();
-    if (isWildCardACLValue(aclString)) {
-      allAllowed = true;
-    } else {
-      allAllowed = false;
-      String[] userGroupStrings = aclString.split(" ", 2);
-
-      if (userGroupStrings.length >= 1) {
-        List<String> usersList = new LinkedList<String>(
-          Arrays.asList(userGroupStrings[0].split(",")));
-        cleanupList(usersList);
-        addToSet(users, usersList);
+  private void buildACL(String[] userGroupStrings) {
+    users = new HashSet<String>();
+    groups = new HashSet<String>();
+    for (String aclPart : userGroupStrings) {
+      if (aclPart != null && isWildCardACLValue(aclPart)) {
+        allAllowed = true;
+        break;
+    }
+    if (!allAllowed) {      
+      if (userGroupStrings.length >= 1 && userGroupStrings[0] != null) {
+        users = StringUtils.getTrimmedStringCollection(userGroupStrings[0]);
+      } 
-      if (userGroupStrings.length == 2) {
-        List<String> groupsList = new LinkedList<String>(
-          Arrays.asList(userGroupStrings[1].split(",")));
-        cleanupList(groupsList);
-        addToSet(groups, groupsList);
-        groupsMapping.cacheGroupsAdd(groupsList);
+      if (userGroupStrings.length == 2 && userGroupStrings[1] != null) {
+        groups = StringUtils.getTrimmedStringCollection(userGroupStrings[1]);
+        groupsMapping.cacheGroupsAdd(new LinkedList<String>(groups));
-  Set<String> getUsers() {
+  Collection<String> getUsers() {
-  Set<String> getGroups() {
+  Collection<String> getGroups() {
-   * Cleanup list, remove empty strings, trim leading/trailing spaces
-   *
-   * @param list clean this list
-   */
-  private static final void cleanupList(List<String> list) {
-    ListIterator<String> i = list.listIterator();
-    while(i.hasNext()) {
-      String s = i.next();
-      if(s.length() == 0) {
-        i.remove();
-      } else {
-        s = s.trim();
-        i.set(s);
-      }
-    }
-  }
-
-  /**
-   * Add list to a set
-   *
-   * @param set add list to this set
-   * @param list add items of this list to the set
-   */
-  private static final void addToSet(Set<String> set, List<String> list) {
-    for(String s : list) {
-      set.add(s);
-    }
-  }
-
-  /**
-    buildACL(aclString);
+    buildACL(aclString.split(" ", 2));
-  private String getString(Set<String> strings) {
+  private String getString(Collection<String> strings) {

MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD74 UPD74 UPD83 UPD42 MOV44 UPD42 INS74 UPD74 MOV74 UPD43 UPD43 INS65 MOV43 INS42 UPD42 INS21 MOV5 INS42 MOV21 INS21 INS70 INS25 INS43 MOV43 UPD43 UPD74 UPD42 UPD42 UPD66 UPD66 UPD42 UPD66 INS42 INS66 INS32 UPD66 INS66 UPD42 UPD66 INS7 INS44 INS42 INS8 INS38 INS8 INS42 UPD42 UPD43 MOV32 UPD42 MOV42 INS3 UPD42 INS42 INS14 MOV43 INS42 INS25 INS42 INS25 MOV25 INS32 UPD42 MOV42 INS5 INS4 UPD74 UPD74 MOV74 INS27 MOV8 INS27 INS8 INS27 MOV42 INS42 INS45 INS34 INS43 INS85 INS42 INS42 UPD43 UPD43 INS27 INS32 INS10 MOV27 INS27 INS21 MOV27 INS27 MOV42 UPD42 UPD42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 MOV2 INS33 INS7 MOV2 INS33 INS42 INS32 UPD42 UPD42 UPD42 MOV14 UPD42 MOV42 UPD42 MOV42 INS2 UPD42 UPD42 INS2 INS42 INS42 INS34 INS42 INS34 DEL40 DEL26 DEL39 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL42 DEL32 DEL59 DEL60 DEL8 DEL61 DEL42 DEL43 DEL74 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31