HDFS-4563. Update namespace/diskspace usage after deleting snapshots.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.NSQuotaExceededException;
+import org.apache.hadoop.hdfs.protocol.QuotaExceededException;
-import org.apache.hadoop.hdfs.server.namenode.INode.Content.CountsMap.Key;
+import org.apache.hadoop.hdfs.server.namenode.Content.CountsMap.Key;
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      final long nsQuota, final long dsQuota) throws NSQuotaExceededException {
+      final long nsQuota, final long dsQuota) throws QuotaExceededException {
-      Snapshot latest) throws NSQuotaExceededException {
+      Snapshot latest) throws QuotaExceededException {
-      throws NSQuotaExceededException {
+      throws QuotaExceededException {
-      final INode snapshotCopy) throws NSQuotaExceededException {
+      final INode snapshotCopy) throws QuotaExceededException {
-      final Snapshot latest) throws NSQuotaExceededException {
+      final Snapshot latest) throws QuotaExceededException {
-  public int cleanSubtreeRecursively(final Snapshot snapshot, Snapshot prior,
-      final BlocksMapUpdateInfo collectedBlocks)
-          throws NSQuotaExceededException {
-    int total = 0;
+  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,
+      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks)
+      throws QuotaExceededException {
+    Quota.Counts counts = Quota.Counts.newInstance();
-    // to its latest previous snapshot.
+    // to its latest previous snapshot. (besides, we also need to consider nodes
+    // created after prior but before snapshot. this will be done in 
+    // INodeDirectoryWithSnapshot#cleanSubtree
-      total += child.cleanSubtree(snapshot, prior, collectedBlocks);
+      Quota.Counts childCounts = child.cleanSubtree(snapshot, prior,
+          collectedBlocks);
+      counts.add(childCounts);
-    return total;
+    return counts;
-  public int destroyAndCollectBlocks(
+  public void destroyAndCollectBlocks(
-    int total = 0;
-      total += child.destroyAndCollectBlocks(collectedBlocks);
+      child.destroyAndCollectBlocks(collectedBlocks);
-    total++;
-    return total;
-  public int cleanSubtree(final Snapshot snapshot, Snapshot prior,
+  public Quota.Counts cleanSubtree(final Snapshot snapshot, Snapshot prior,
-          throws NSQuotaExceededException {
-    int total = 0;
+      throws QuotaExceededException {
-      total += destroyAndCollectBlocks(collectedBlocks);
+      destroyAndCollectBlocks(collectedBlocks);
+      return Quota.Counts.newInstance();
-      total += cleanSubtreeRecursively(snapshot, prior, collectedBlocks);
+      Quota.Counts counts = cleanSubtreeRecursively(snapshot, prior,
+          collectedBlocks);
+      if (isQuotaSet()) {
+        ((INodeDirectoryWithQuota) this).addSpaceConsumed2Cache(
+            -counts.get(Quota.NAMESPACE), -counts.get(Quota.DISKSPACE));
+      }
+      return counts;
-    return total;

UPD40 UPD40 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS43 UPD43 UPD39 INS43 UPD43 INS8 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 UPD42 INS40 UPD42 INS25 INS43 UPD42 MOV27 MOV8 INS8 INS40 UPD42 INS32 INS60 INS41 MOV60 MOV25 MOV41 INS40 INS42 INS43 INS59 INS32 MOV32 MOV32 INS32 INS43 INS32 UPD42 INS40 INS42 MOV32 INS42 INS42 INS42 INS40 INS42 INS40 UPD42 MOV32 INS42 INS32 INS36 INS42 INS38 INS38 INS11 INS32 INS32 INS43 INS52 INS42 INS42 INS40 INS42 INS42 INS40 INS42 DEL39 DEL39 DEL34 DEL42 DEL7 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL7 DEL42 DEL37 DEL21 DEL42 DEL41 DEL39 DEL42 DEL7 DEL39 DEL34 DEL42 DEL7 DEL8