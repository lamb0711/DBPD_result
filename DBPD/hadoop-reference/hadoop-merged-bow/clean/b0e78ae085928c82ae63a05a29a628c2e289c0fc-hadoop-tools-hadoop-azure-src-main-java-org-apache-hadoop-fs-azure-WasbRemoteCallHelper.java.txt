HADOOP-14640. Azure: Support affinity for service running on localhost and reuse SPNEGO hadoop.auth cookie for authorization, SASKey and delegation token generation. Contributed by Santhosh G Nayak.

- * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p>
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+import java.net.InetAddress;
-  @VisibleForTesting
-  public void updateHttpClient(HttpClient client) {
+  @VisibleForTesting public void updateHttpClient(HttpClient client) {
-    for (int retry = 0, index =
-         random.nextInt(urls.length);; retry++, index++) {
+    /**
+     * Get the index of local url if any. If list of urls contains strings like
+     * "https://localhost:" or "http://localhost", consider it as local url and
+     * give it affinity more than other urls in the list.
+     */
+
+    int indexOfLocalUrl = -1;
+    for (int i = 0; i < urls.length; i++) {
+      if (urls[i].toLowerCase().startsWith("https://localhost:") || urls[i]
+          .toLowerCase().startsWith("http://localhost:")) {
+        indexOfLocalUrl = i;
+      }
+    }
+
+    boolean requiresNewAuth = false;
+    for (int retry = 0, index = (indexOfLocalUrl != -1)
+                                ? indexOfLocalUrl
+                                : random
+                                    .nextInt(urls.length);; retry++, index++) {
-
+      /**
+       * If the first request fails to localhost, then randomly pick the next url
+       * from the remaining urls in the list, so that load can be balanced.
+       */
+      if (indexOfLocalUrl != -1 && retry == 1) {
+        index = (index + random.nextInt(urls.length)) % urls.length;
+        if (index == indexOfLocalUrl) {
+          index = (index + 1) % urls.length;
+        }
+      }
-            getHttpRequest(urls, path, queryParams, index, httpMethod);
-
+            getHttpRequest(urls, path, queryParams, index, httpMethod,
+                requiresNewAuth);
+          requiresNewAuth =
+              (statusLine == null)
+                  || (statusLine.getStatusCode() == HttpStatus.SC_UNAUTHORIZED);
+
+        } else {
+          requiresNewAuth = false;
-      List<NameValuePair> queryParams, int urlIndex, String httpMethod)
-      throws URISyntaxException, IOException {
+      List<NameValuePair> queryParams, int urlIndex, String httpMethod,
+      boolean requiresNewAuth) throws URISyntaxException, IOException {
+    if (uriBuilder.getHost().equals("localhost")) {
+      uriBuilder.setHost(InetAddress.getLocalHost().getCanonicalHostName());
+    }
-    } catch(InterruptedIOException e) {
+    } catch (InterruptedIOException e) {

INS26 INS40 INS44 INS60 INS24 INS60 INS39 INS42 INS25 INS39 INS59 INS58 INS27 INS37 INS8 INS39 INS59 INS32 INS8 INS42 INS38 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS9 INS25 INS32 INS42 INS45 INS21 INS34 INS42 INS34 INS27 INS8 INS16 INS27 INS8 INS42 INS42 INS32 INS32 INS32 INS21 INS36 INS42 INS32 INS27 INS27 INS21 INS25 INS42 INS42 INS32 INS32 INS42 INS45 INS32 INS42 INS45 INS7 INS27 INS42 INS42 INS40 INS42 INS38 INS42 INS34 INS7 INS27 INS8 INS8 INS32 INS42 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS38 INS34 INS42 INS27 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS36 INS40 INS7 INS42 INS7 INS7 INS27 INS42 INS27 INS42 INS27 INS42 INS9 INS42 MOV32 INS36 INS40 INS36 INS36 INS27 INS27 INS27 INS42 INS34 INS42 INS33 INS32 INS40 INS42 INS42 DEL66 DEL66