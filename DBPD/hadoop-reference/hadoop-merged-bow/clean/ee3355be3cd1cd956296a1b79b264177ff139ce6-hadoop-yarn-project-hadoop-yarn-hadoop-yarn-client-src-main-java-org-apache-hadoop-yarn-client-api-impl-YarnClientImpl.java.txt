YARN-8303. YarnClient should contact TimelineReader for application/attempt/container report.

+  private AHSClient ahsV2Client;
+  private boolean timelineV2ServiceEnabled;
+
+    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {
+      timelineV2ServiceEnabled = true;
+    }
+
+    if (timelineV2ServiceEnabled) {
+      ahsV2Client = AHSClient.createAHSv2Client();
+      ahsV2Client.init(conf);
+    }
+
+      if (timelineV2ServiceEnabled) {
+        ahsV2Client.start();
+      }
+    if (timelineV2ServiceEnabled) {
+      ahsV2Client.stop();
+    }
+      if (timelineV2ServiceEnabled) {
+        try {
+          return ahsV2Client.getApplicationReport(appId);
+        } catch (Exception ex) {
+          LOG.warn("Failed to fetch application report from "
+              + "ATS v2", ex);
+        }
+      }
-      if (!historyServiceEnabled) {
-        // Just throw it as usual if historyService is not enabled.
-        throw e;
-      }
+
+      if (timelineV2ServiceEnabled) {
+        try {
+          return ahsV2Client.getApplicationAttemptReport(appAttemptId);
+        } catch (Exception ex) {
+          LOG.warn("Failed to fetch application attempt report from "
+              + "ATS v2", ex);
+        }
+      }
+      if (!historyServiceEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
-      if (!historyServiceEnabled) {
-        // Just throw it as usual if historyService is not enabled.
-        throw e;
-      }
+      if (timelineV2ServiceEnabled) {
+        try {
+          return ahsV2Client.getApplicationAttempts(appId);
+        } catch (Exception ex) {
+          LOG.warn("Failed to fetch application attempts from "
+              + "ATS v2", ex);
+        }
+      }
+      if (!historyServiceEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
-      if (!historyServiceEnabled) {
-        // Just throw it as usual if historyService is not enabled.
-        throw e;
-      }
+      if (timelineV2ServiceEnabled) {
+        try {
+          return ahsV2Client.getContainerReport(containerId);
+        } catch (Exception ex) {
+          LOG.warn("Failed to fetch container report from "
+              + "ATS v2", ex);
+        }
+      }
+      if (!historyServiceEnabled) {
+        // Just throw it as usual if historyService is not enabled.
+        throw e;
+      }
-      if (e.getClass() != ApplicationNotFoundException.class
-          || !historyServiceEnabled) {
-        // If Application is not in RM and history service is enabled then we
-        // need to check with history service else throw exception.
+      // Even if history-service is enabled, treat all exceptions still the same
+      // except the following
+      if (e.getClass() != ApplicationNotFoundException.class) {
+        throw e;
+      }
+      if (!historyServiceEnabled && !timelineV2ServiceEnabled) {
+        // if both history server and ATSv2 are not enabled throw exception.
-
-    if (historyServiceEnabled) {
-      // Check with AHS even if found in RM because to capture info of finished
-      // containers also
-      List<ContainerReport> containersListFromAHS = null;
-      try {
-        containersListFromAHS =
-            historyClient.getContainers(applicationAttemptId);
-      } catch (IOException e) {
-        // History service access might be enabled but system metrics publisher
-        // is disabled hence app not found exception is possible
-        if (appNotFoundInRM) {
-          // app not found in bothM and RM then propagate the exception.
-          throw e;
-        }
+    // Check with AHS even if found in RM because to capture info of finished
+    // containers also
+    List<ContainerReport> containersListFromAHS = null;
+    try {
+      containersListFromAHS =
+          getContainerReportFromHistory(applicationAttemptId);
+    } catch (IOException e) {
+      if (appNotFoundInRM) {
+        throw e;
+      }
+    }
+    if (null != containersListFromAHS && containersListFromAHS.size() > 0) {
+      // remove duplicates
+      Set<ContainerId> containerIdsToBeKeptFromAHS =
+          new HashSet<ContainerId>();
+      Iterator<ContainerReport> tmpItr = containersListFromAHS.iterator();
+      while (tmpItr.hasNext()) {
+        containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());
-      if (null != containersListFromAHS && containersListFromAHS.size() > 0) {
-        // remove duplicates
+      Iterator<ContainerReport> rmContainers =
+          containersForAttempt.iterator();
+      while (rmContainers.hasNext()) {
+        ContainerReport tmp = rmContainers.next();
+        containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());
+        // Remove containers from AHS as container from RM will have latest
+        // information
+      }
-        Set<ContainerId> containerIdsToBeKeptFromAHS =
-            new HashSet<ContainerId>();
-        Iterator<ContainerReport> tmpItr = containersListFromAHS.iterator();
-        while (tmpItr.hasNext()) {
-          containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());
-        }
-
-        Iterator<ContainerReport> rmContainers =
-            containersForAttempt.iterator();
-        while (rmContainers.hasNext()) {
-          ContainerReport tmp = rmContainers.next();
-          containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());
-          // Remove containers from AHS as container from RM will have latest
-          // information
-        }
-
-        if (containerIdsToBeKeptFromAHS.size() > 0
-            && containersListFromAHS.size() != containerIdsToBeKeptFromAHS
-                .size()) {
-          Iterator<ContainerReport> containersFromHS =
-              containersListFromAHS.iterator();
-          while (containersFromHS.hasNext()) {
-            ContainerReport containerReport = containersFromHS.next();
-            if (containerIdsToBeKeptFromAHS.contains(containerReport
-                .getContainerId())) {
-              containersForAttempt.add(containerReport);
-            }
+      if (containerIdsToBeKeptFromAHS.size() > 0
+          && containersListFromAHS.size() != containerIdsToBeKeptFromAHS
+              .size()) {
+        Iterator<ContainerReport> containersFromHS =
+            containersListFromAHS.iterator();
+        while (containersFromHS.hasNext()) {
+          ContainerReport containerReport = containersFromHS.next();
+          if (containerIdsToBeKeptFromAHS.contains(containerReport
+              .getContainerId())) {
+            containersForAttempt.add(containerReport);
-        } else if (containersListFromAHS.size() == containerIdsToBeKeptFromAHS
-            .size()) {
-          containersForAttempt.addAll(containersListFromAHS);
+      } else if (containersListFromAHS.size() == containerIdsToBeKeptFromAHS
+          .size()) {
+        containersForAttempt.addAll(containersListFromAHS);
+  private List<ContainerReport> getContainerReportFromHistory(
+      ApplicationAttemptId applicationAttemptId)
+      throws IOException, YarnException {
+    List<ContainerReport> containersListFromAHS = null;
+    if (timelineV2ServiceEnabled) {
+      try {
+        containersListFromAHS = ahsV2Client.getContainers(applicationAttemptId);
+      } catch (Exception e) {
+        LOG.warn("Got an error while fetching container report from ATSv2", e);
+        if (historyServiceEnabled) {
+          containersListFromAHS = historyClient.getContainers(
+              applicationAttemptId);
+        } else {
+          throw e;
+        }
+      }
+    } else if (historyServiceEnabled) {
+      containersListFromAHS = historyClient.getContainers(applicationAttemptId);
+    }
+    return containersListFromAHS;
+  }
+

INS23 INS23 INS31 INS83 INS43 INS59 INS83 INS39 INS59 MOV8 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS42 INS42 INS42 INS25 INS25 INS25 MOV60 MOV60 MOV54 MOV41 INS43 INS43 INS43 INS42 INS42 INS42 INS60 INS25 INS41 INS32 INS8 INS42 INS8 INS42 INS8 INS8 INS42 INS42 INS42 INS74 INS59 INS42 INS8 INS25 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS25 INS21 MOV25 MOV25 MOV25 INS21 INS43 INS43 INS42 INS33 INS54 INS42 INS8 INS7 INS7 INS32 INS42 INS8 INS32 INS25 INS25 INS25 INS25 INS25 INS7 INS42 INS42 INS8 INS12 INS21 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS8 INS27 INS8 INS27 INS42 INS32 INS21 INS44 INS8 INS7 INS42 INS42 INS32 INS54 INS54 INS54 INS54 INS32 INS57 INS53 MOV38 INS38 INS42 INS42 INS7 INS43 INS42 INS21 INS25 INS42 INS32 INS42 INS42 INS8 INS12 INS8 INS12 INS8 INS12 INS8 INS12 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS42 MOV8 INS8 INS42 INS42 INS42 INS41 INS44 INS8 INS41 INS44 INS8 INS41 INS44 INS8 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS53 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 DEL42 DEL42 DEL32 DEL42 DEL43 DEL57 DEL27 DEL27 DEL42 DEL25 DEL8