YARN-8298.  Added express upgrade for YARN service.
            Contributed by Chandni Singh

+
+  private ApplicationReport upgradePrecheck(Service service)
+      throws YarnException, IOException {
+    boolean upgradeEnabled = getConfig().getBoolean(
+        YARN_SERVICE_UPGRADE_ENABLED, YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);
+    if (!upgradeEnabled) {
+      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);
+    }
+    Service persistedService = ServiceApiUtil.loadService(fs,
+        service.getName());
+    if (!StringUtils.isEmpty(persistedService.getId())) {
+      cachedAppInfo.put(persistedService.getName(),
+          new AppInfo(ApplicationId.fromString(persistedService.getId()),
+              persistedService.getKerberosPrincipal().getPrincipalName()));
+    }
+
+    if (persistedService.getVersion().equals(service.getVersion())) {
+      String message = service.getName() + " is already at version "
+          + service.getVersion() + ". There is nothing to upgrade.";
+      LOG.error(message);
+      throw new YarnException(message);
+    }
+
+    Service liveService = getStatus(service.getName());
+    if (!liveService.getState().equals(ServiceState.STABLE)) {
+      String message = service.getName() + " is at " + liveService.getState()
+          + " state and upgrade can only be initiated when service is STABLE.";
+      LOG.error(message);
+      throw new YarnException(message);
+    }
+
+    Path serviceUpgradeDir = checkAppNotExistOnHdfs(service, true);
+    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());
+    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);
+
+    ApplicationReport appReport = yarnClient
+        .getApplicationReport(getAppId(service.getName()));
+    if (StringUtils.isEmpty(appReport.getHost())) {
+      throw new YarnException(service.getName() + " AM hostname is empty");
+    }
+    return appReport;
+  }
+
+  @Override
+  public int actionUpgradeExpress(String appName, File path)
+      throws IOException, YarnException {
+    Service service =
+        loadAppJsonFromLocalFS(path.getAbsolutePath(), appName, null, null);
+    service.setState(ServiceState.UPGRADING_AUTO_FINALIZE);
+    actionUpgradeExpress(service);
+    return EXIT_SUCCESS;
+  }
+
+  public int actionUpgradeExpress(Service service) throws YarnException,
+      IOException {
+    ApplicationReport appReport = upgradePrecheck(service);
+    ClientAMProtocol proxy = createAMProxy(service.getName(), appReport);
+    UpgradeServiceRequestProto.Builder requestBuilder =
+        UpgradeServiceRequestProto.newBuilder();
+    requestBuilder.setVersion(service.getVersion());
+    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {
+      requestBuilder.setAutoFinalize(true);
+    }
+    if (service.getState().equals(ServiceState.EXPRESS_UPGRADING)) {
+      requestBuilder.setExpressUpgrade(true);
+      requestBuilder.setAutoFinalize(true);
+    }
+    UpgradeServiceResponseProto responseProto = proxy.upgrade(
+        requestBuilder.build());
+    if (responseProto.hasError()) {
+      LOG.error("Service {} express upgrade to version {} failed because {}",
+          service.getName(), service.getVersion(), responseProto.getError());
+      throw new YarnException("Failed to express upgrade service " +
+          service.getName() + " to version " + service.getVersion() +
+          " because " + responseProto.getError());
+    }
+    return EXIT_SUCCESS;
+  }
+
-    boolean upgradeEnabled = getConfig().getBoolean(
-        YARN_SERVICE_UPGRADE_ENABLED,
-        YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);
-    if (!upgradeEnabled) {
-      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);
-    }
-    Service persistedService =
-        ServiceApiUtil.loadService(fs, service.getName());
-    if (!StringUtils.isEmpty(persistedService.getId())) {
-      cachedAppInfo.put(persistedService.getName(), new AppInfo(
-          ApplicationId.fromString(persistedService.getId()),
-          persistedService.getKerberosPrincipal().getPrincipalName()));
-    }
-
-    if (persistedService.getVersion().equals(service.getVersion())) {
-      String message =
-          service.getName() + " is already at version " + service.getVersion()
-              + ". There is nothing to upgrade.";
-      LOG.error(message);
-      throw new YarnException(message);
-    }
-
-    Service liveService = getStatus(service.getName());
-    if (!liveService.getState().equals(ServiceState.STABLE)) {
-      String message = service.getName() + " is at " +
-          liveService.getState()
-          + " state and upgrade can only be initiated when service is STABLE.";
-      LOG.error(message);
-      throw new YarnException(message);
-    }
-
-    Path serviceUpgradeDir = checkAppNotExistOnHdfs(service, true);
-    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());
-    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);
-
-    ApplicationReport appReport =
-        yarnClient.getApplicationReport(getAppId(service.getName()));
-    if (StringUtils.isEmpty(appReport.getHost())) {
-      throw new YarnException(service.getName() + " AM hostname is empty");
-    }
+    ApplicationReport appReport = upgradePrecheck(service);

MOV31 INS31 INS31 INS31 UPD83 INS43 UPD42 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS21 INS41 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS21 INS25 INS25 INS60 INS25 INS41 INS43 INS42 INS42 INS42 INS60 MOV60 MOV60 MOV21 MOV25 MOV60 MOV25 MOV41 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS8 INS32 INS8 INS43 INS59 INS32 INS8 INS42 INS42 INS43 INS59 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS40 INS21 INS32 INS42 INS40 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS21 INS53 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL39