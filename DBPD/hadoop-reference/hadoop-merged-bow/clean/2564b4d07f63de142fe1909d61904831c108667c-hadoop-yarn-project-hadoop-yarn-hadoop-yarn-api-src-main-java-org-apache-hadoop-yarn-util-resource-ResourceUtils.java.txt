YARN-7119. Support multiple resource types in rmadmin updateNodeResource command. Contributed by Manikandan R.

-  synchronized static void resetResourceTypes() {
+  public synchronized static void resetResourceTypes() {
-    String units;
-    for (int i = 0; i < resourceValue.length(); i++) {
+    return parseResourceValue(resourceValue)[0];
+  }
+
+  /**
+   * Extract unit and actual value from resource value.
+   * @param resourceValue Value of the resource
+   * @return Array containing unit and value. [0]=unit, [1]=value
+   * @throws IllegalArgumentExcpetion if units contain non alpha characters
+   */
+  public static String[] parseResourceValue(String resourceValue) {
+    String[] resource = new String[2];
+    int i = 0;
+    for (; i < resourceValue.length(); i++) {
-        units = resourceValue.substring(i);
-        if (StringUtils.isAlpha(units)) {
-          return units;
-        }
+        break;
-    return "";
+    String units = resourceValue.substring(i);
+
+    if((StringUtils.isAlpha(units))) {
+      resource[0] = units;
+      resource[1] = resourceValue.substring(0, i);
+      return resource;
+    } else {
+      throw new IllegalArgumentException("Units '" + units + "'"
+          + " contains non alphabet characters, which is not allowed.");
+    }
+  }
+
+  public static long getValue(String resourceValue) {
+    return Long.parseLong(parseResourceValue(resourceValue)[1]);
+  /**
+   * Are mandatory resources like memory-mb, vcores available?
+   * If not, throw exceptions. On availability, ensure those values are
+   * within boundary.
+   * @param res resource
+   * @throws IllegalArgumentException if mandatory resource is not available or
+   * value is not within boundary
+   */
+  public static void areMandatoryResourcesAvailable(Resource res) {
+    ResourceInformation memoryResourceInformation =
+        res.getResourceInformation(MEMORY);
+    if (memoryResourceInformation != null) {
+      long value = memoryResourceInformation.getValue();
+      if (value > Integer.MAX_VALUE) {
+        throw new IllegalArgumentException("Value '" + value + "' for "
+            + "resource memory is more than the maximum for an integer.");
+      }
+      if (value == 0) {
+        throw new IllegalArgumentException("Invalid value for resource '" +
+            MEMORY + "'. Value cannot be 0(zero).");
+      }
+    } else {
+      throw new IllegalArgumentException("Mandatory resource 'memory-mb' "
+          + "is missing.");
+    }
+
+    ResourceInformation vcoresResourceInformation =
+        res.getResourceInformation(VCORES);
+    if (vcoresResourceInformation != null) {
+      long value = vcoresResourceInformation.getValue();
+      if (value > Integer.MAX_VALUE) {
+        throw new IllegalArgumentException("Value '" + value + "' for resource"
+            + " vcores is more than the maximum for an integer.");
+      }
+      if (value == 0) {
+        throw new IllegalArgumentException("Invalid value for resource '" +
+            VCORES + "'. Value cannot be 0(zero).");
+      }
+    } else {
+      throw new IllegalArgumentException("Mandatory resource 'vcores' "
+          + "is missing.");
+    }
+  }

INS31 INS31 INS31 INS31 INS83 MOV83 MOV83 INS43 MOV42 INS44 INS8 INS29 INS83 INS83 INS5 INS42 MOV44 MOV8 MOV60 INS83 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 MOV43 INS85 INS60 INS60 INS25 INS43 INS42 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS25 INS60 INS25 INS42 INS2 INS66 INS42 INS66 INS66 INS42 INS66 INS5 INS59 INS39 MOV59 INS8 MOV43 INS36 INS8 INS8 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS8 INS32 INS34 INS43 INS85 INS42 INS3 MOV25 MOV32 MOV32 INS21 INS21 INS41 INS53 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS25 INS53 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS25 INS53 INS42 INS42 INS42 INS5 INS34 MOV32 INS7 INS7 INS42 INS14 INS32 INS34 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS27 INS8 INS14 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS27 INS8 INS14 INS43 INS85 INS10 INS2 INS42 INS2 INS32 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS40 INS53 INS42 INS34 INS53 INS43 INS27 INS42 INS32 INS42 INS40 INS53 INS42 INS34 INS53 INS43 INS27 INS42 INS42 INS34 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS14 INS14 INS42 INS45 INS45 INS42 INS42 INS14 INS14 INS42 INS45 INS45 INS43 INS27 INS43 INS27 INS43 INS27 INS43 INS27 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 DEL39 DEL58 DEL42 DEL41 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL45 DEL41 DEL31