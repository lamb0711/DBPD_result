YARN-3814. REST API implementation for getting raw entities in TimelineReader (Varun Saxena via sjlee)

+import java.io.IOException;
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import javax.servlet.ServletContext;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.core.Response;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity;
+import org.apache.hadoop.yarn.server.timeline.GenericObjectMapper;
+import org.apache.hadoop.yarn.server.timelineservice.storage.TimelineReader.Field;
+import org.apache.hadoop.yarn.webapp.BadRequestException;
+import org.apache.hadoop.yarn.webapp.NotFoundException;
-
+  private static final Log LOG =
+      LogFactory.getLog(TimelineReaderWebServices.class);
+
+  @Context private ServletContext ctxt;
+
+  private static final String COMMA_DELIMITER = ",";
+  private static final String COLON_DELIMITER = ":";
+  private static Set<String> parseValuesStr(String str, String delimiter) {
+    if (str == null || str.isEmpty()) {
+      return null;
+    }
+    Set<String> strSet = new HashSet<String>();
+    String[] strs = str.split(delimiter);
+    for (String aStr : strs) {
+      strSet.add(aStr.trim());
+    }
+    return strSet;
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <T> void parseKeyValues(Map<String,T> map, String str,
+      String pairsDelim, String keyValuesDelim, boolean stringValue,
+      boolean multipleValues) {
+    String[] pairs = str.split(pairsDelim);
+    for (String pair : pairs) {
+      if (pair == null || pair.trim().isEmpty()) {
+        continue;
+      }
+      String[] pairStrs = pair.split(keyValuesDelim);
+      if (pairStrs.length < 2) {
+        continue;
+      }
+      if (!stringValue) {
+        try {
+          Object value =
+              GenericObjectMapper.OBJECT_READER.readValue(pairStrs[1].trim());
+          map.put(pairStrs[0].trim(), (T) value);
+        } catch (IOException e) {
+          map.put(pairStrs[0].trim(), (T) pairStrs[1].trim());
+        }
+      } else {
+        String key = pairStrs[0].trim();
+        if (multipleValues) {
+          Set<String> values = new HashSet<String>();
+          for (int i = 1; i < pairStrs.length; i++) {
+            values.add(pairStrs[i].trim());
+          }
+          map.put(key, (T) values);
+        } else {
+          map.put(key, (T) pairStrs[1].trim());
+        }
+      }
+    }
+  }
+
+  private static Map<String, Set<String>> parseKeyStrValuesStr(String str,
+      String pairsDelim, String keyValuesDelim) {
+    if (str == null) {
+      return null;
+    }
+    Map<String, Set<String>> map = new HashMap<String, Set<String>>();
+    parseKeyValues(map, str,pairsDelim, keyValuesDelim, true, true);
+    return map;
+  }
+
+  private static Map<String, String> parseKeyStrValueStr(String str,
+      String pairsDelim, String keyValDelim) {
+    if (str == null) {
+      return null;
+    }
+    Map<String, String> map = new HashMap<String, String>();
+    parseKeyValues(map, str, pairsDelim, keyValDelim, true, false);
+    return map;
+  }
+
+  private static Map<String, Object> parseKeyStrValueObj(String str,
+      String pairsDelim, String keyValDelim) {
+    if (str == null) {
+      return null;
+    }
+    Map<String, Object> map = new HashMap<String, Object>();
+    parseKeyValues(map, str, pairsDelim, keyValDelim, false, false);
+    return map;
+  }
+
+  private static EnumSet<Field> parseFieldsStr(String str, String delimiter) {
+    if (str == null) {
+      return null;
+    }
+    String[] strs = str.split(delimiter);
+    EnumSet<Field> fieldList = EnumSet.noneOf(Field.class);
+    for (String s : strs) {
+      fieldList.add(Field.valueOf(s.trim().toUpperCase()));
+    }
+    return fieldList;
+  }
+
+  private static Long parseLongStr(String str) {
+    return str == null ? null : Long.parseLong(str.trim());
+  }
+
+  private static String parseStr(String str) {
+    return str == null ? null : str.trim();
+  }
+
+  private static UserGroupInformation getUser(HttpServletRequest req) {
+    String remoteUser = req.getRemoteUser();
+    UserGroupInformation callerUGI = null;
+    if (remoteUser != null) {
+      callerUGI = UserGroupInformation.createRemoteUser(remoteUser);
+    }
+    return callerUGI;
+  }
+
+  private TimelineReaderManager getTimelineReaderManager() {
+    return (TimelineReaderManager)
+        ctxt.getAttribute(TimelineReaderServer.TIMELINE_READER_MANAGER_ATTR);
+  }
+
-  @Produces({ MediaType.APPLICATION_JSON /* , MediaType.APPLICATION_XML */})
+  @Produces(MediaType.APPLICATION_JSON)
+
+  /**
+   * Return a set of entities that match the given parameters.
+   */
+  @GET
+  @Path("/entities/{clusterId}/{appId}/{entityType}")
+  @Produces(MediaType.APPLICATION_JSON)
+  public Set<TimelineEntity> getEntities(
+      @Context HttpServletRequest req,
+      @Context HttpServletResponse res,
+      @PathParam("clusterId") String clusterId,
+      @PathParam("appId") String appId,
+      @PathParam("entityType") String entityType,
+      @QueryParam("userId") String userId,
+      @QueryParam("flowId") String flowId,
+      @QueryParam("flowRunId") String flowRunId,
+      @QueryParam("limit") String limit,
+      @QueryParam("createdTimeStart") String createdTimeStart,
+      @QueryParam("createdTimeEnd") String createdTimeEnd,
+      @QueryParam("modifiedTimeStart") String modifiedTimeStart,
+      @QueryParam("modifiedTimeEnd") String modifiedTimeEnd,
+      @QueryParam("relatesto") String relatesTo,
+      @QueryParam("isrelatedto") String isRelatedTo,
+      @QueryParam("infofilters") String infofilters,
+      @QueryParam("conffilters") String conffilters,
+      @QueryParam("metricfilters") String metricfilters,
+      @QueryParam("eventfilters") String eventfilters,
+      @QueryParam("fields") String fields) {
+    init(res);
+    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();
+    UserGroupInformation callerUGI = getUser(req);
+    try {
+      return timelineReaderManager.getEntities(
+          callerUGI != null && (userId == null || userId.isEmpty()) ?
+          callerUGI.getUserName().trim() : parseStr(userId),
+          parseStr(clusterId), parseStr(flowId),
+          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),
+          parseLongStr(limit), parseLongStr(createdTimeStart),
+          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),
+          parseLongStr(modifiedTimeEnd),
+          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),
+          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),
+          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),
+          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),
+          parseValuesStr(metricfilters, COMMA_DELIMITER),
+          parseValuesStr(eventfilters, COMMA_DELIMITER),
+          parseFieldsStr(fields, COMMA_DELIMITER));
+    } catch (NumberFormatException e) {
+      throw new BadRequestException(
+          "createdTime or modifiedTime start/end or limit or flowId is not" +
+          " a numeric value.");
+    } catch (IllegalArgumentException e) {
+      throw new BadRequestException("Requested Invalid Field.");
+    } catch (Exception e) {
+      LOG.error("Error getting entities", e);
+      throw new WebApplicationException(e,
+          Response.Status.INTERNAL_SERVER_ERROR);
+    }
+  }
+
+  /**
+   * Return a single entity of the given entity type and Id.
+   */
+  @GET
+  @Path("/entity/{clusterId}/{appId}/{entityType}/{entityId}/")
+  @Produces(MediaType.APPLICATION_JSON)
+  public TimelineEntity getEntity(
+      @Context HttpServletRequest req,
+      @Context HttpServletResponse res,
+      @PathParam("clusterId") String clusterId,
+      @PathParam("appId") String appId,
+      @PathParam("entityType") String entityType,
+      @PathParam("entityId") String entityId,
+      @QueryParam("userId") String userId,
+      @QueryParam("flowId") String flowId,
+      @QueryParam("flowRunId") String flowRunId,
+      @QueryParam("fields") String fields) {
+    init(res);
+    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();
+    UserGroupInformation callerUGI = getUser(req);
+    TimelineEntity entity = null;
+    try {
+      entity = timelineReaderManager.getEntity(
+          callerUGI != null && (userId == null || userId.isEmpty()) ?
+          callerUGI.getUserName().trim() : parseStr(userId),
+          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId),
+          parseStr(appId), parseStr(entityType), parseStr(entityId),
+          parseFieldsStr(fields, COMMA_DELIMITER));
+    } catch (NumberFormatException e) {
+      throw new BadRequestException("flowRunId is not a numeric value.");
+    } catch (IllegalArgumentException e) {
+      throw new BadRequestException("Requested Invalid Field.");
+    } catch (Exception e) {
+      LOG.error("Error getting entity", e);
+      throw new WebApplicationException(e,
+          Response.Status.INTERNAL_SERVER_ERROR);
+    }
+    if (entity == null) {
+      throw new NotFoundException("Timeline entity {id: " + parseStr(entityId) +
+          ", type: " + parseStr(entityType) + " } is not found");
+    }
+    return entity;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS79 INS83 INS83 INS73 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS29 INS78 INS79 INS79 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS78 INS79 INS79 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS43 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS70 INS41 INS42 INS45 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS60 INS70 INS43 INS43 INS74 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS21 INS41 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS21 INS41 INS43 INS43 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS21 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS70 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS60 INS60 INS25 INS41 INS42 INS41 INS40 INS65 INS42 INS42 INS45 INS42 INS40 INS43 INS43 INS78 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS21 INS60 INS60 INS54 INS65 INS42 INS42 INS45 INS42 INS40 INS42 INS78 INS43 INS42 INS78 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS79 INS43 INS42 INS21 INS60 INS60 INS60 INS54 INS25 INS41 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS5 INS59 INS44 INS42 INS8 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS5 INS59 INS44 INS42 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS5 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS16 INS42 INS16 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS11 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS12 INS66 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS12 INS27 INS8 INS42 INS43 INS27 INS32 INS41 INS43 INS43 INS42 INS14 INS43 INS85 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS43 INS42 INS25 INS60 INS25 INS25 INS42 INS42 INS42 INS33 INS41 INS43 INS43 INS74 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS33 INS41 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS33 INS41 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS33 INS41 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS27 INS33 INS32 INS27 INS33 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS33 INS21 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS41 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS33 INS53 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS5 INS59 INS27 INS8 INS38 INS8 INS8 INS33 INS42 INS42 INS43 INS43 INS74 INS33 INS42 INS42 INS42 INS74 INS33 INS42 INS42 INS42 INS74 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS21 INS53 INS14 INS43 INS43 INS42 INS42 INS32 INS27 INS32 INS18 INS43 INS85 INS42 INS32 INS40 INS34 INS18 INS42 INS54 INS60 INS25 INS42 INS42 INS43 INS43 INS74 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS14 INS42 INS14 INS42 INS32 INS14 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS32 INS14 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS43 INS45 INS42 INS42 INS45 INS42 INS43 INS42 INS40 INS42 INS42 INS16 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS45 INS43 INS45 INS42 INS42 INS45 INS42 INS43 INS42 INS40 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS60 INS21 INS44 INS8 INS42 INS42 INS32 INS60 INS24 INS21 INS21 INS42 INS42 INS32 INS42 INS27 INS36 INS32 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS21 INS2 INS42 INS74 INS59 INS58 INS27 INS37 INS8 INS32 INS32 INS42 INS42 INS42 INS33 INS27 INS42 INS42 INS27 INS36 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS11 INS42 INS32 INS42 INS34 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS11 INS27 INS32 INS42 INS33 INS27 INS42 INS42 INS40 INS42 INS32 INS2 INS42 INS43 INS42 INS42 INS42 INS32 INS11 INS42 INS42 INS74 INS42 INS34 INS32 INS43 INS42 INS43 INS32 INS42 INS33 INS42 INS42 INS27 INS32 INS2 INS42 INS42 INS34 INS42 INS2 INS42 INS43 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS33 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS2 INS42 INS42 INS42 INS2 INS42 INS42 INS34 INS42 INS34 INS42 INS42 DEL40 DEL4