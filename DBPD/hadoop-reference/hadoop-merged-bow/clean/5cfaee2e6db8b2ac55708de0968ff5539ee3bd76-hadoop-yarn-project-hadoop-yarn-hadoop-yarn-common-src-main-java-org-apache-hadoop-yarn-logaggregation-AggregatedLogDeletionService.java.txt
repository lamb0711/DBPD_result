YARN-7495. Improve robustness of the AggregatedLogDeletionService. Contributed by Jonathan Eagles

-      } catch (IOException e) {
-        logIOException("Error reading root log dir this deletion " +
-        		"attempt is being aborted", e);
+      } catch (Throwable t) {
+        logException("Error reading root log dir this deletion " +
+            "attempt is being aborted", t);
+      FileStatus[] appDirs;
-        for(FileStatus appDir : fs.listStatus(dir)) {
-          if(appDir.isDirectory() && 
-              appDir.getModificationTime() < cutoffMillis) {
-            boolean appTerminated =
-                isApplicationTerminated(ApplicationId.fromString(appDir
-                  .getPath().getName()), rmClient);
-            if(appTerminated && shouldDeleteLogDir(appDir, cutoffMillis, fs)) {
-              try {
-                LOG.info("Deleting aggregated logs in "+appDir.getPath());
-                fs.delete(appDir.getPath(), true);
-              } catch (IOException e) {
-                logIOException("Could not delete "+appDir.getPath(), e);
-              }
-            } else if (!appTerminated){
-              try {
-                for(FileStatus node: fs.listStatus(appDir.getPath())) {
-                  if(node.getModificationTime() < cutoffMillis) {
-                    try {
-                      fs.delete(node.getPath(), true);
-                    } catch (IOException ex) {
-                      logIOException("Could not delete "+appDir.getPath(), ex);
-                    }
-                  }
+        appDirs = fs.listStatus(dir);
+      } catch (IOException e) {
+        logException("Could not read the contents of " + dir, e);
+        return;
+      }
+      for (FileStatus appDir : appDirs) {
+        deleteAppDirLogs(cutoffMillis, fs, rmClient, appDir);
+      }
+    }
+
+    private static void deleteAppDirLogs(long cutoffMillis, FileSystem fs,
+                                         ApplicationClientProtocol rmClient,
+                                         FileStatus appDir) {
+      try {
+        if (appDir.isDirectory() &&
+            appDir.getModificationTime() < cutoffMillis) {
+          ApplicationId appId = ApplicationId.fromString(
+              appDir.getPath().getName());
+          boolean appTerminated = isApplicationTerminated(appId, rmClient);
+          if (!appTerminated) {
+            // Application is still running
+            FileStatus[] logFiles;
+            try {
+              logFiles = fs.listStatus(appDir.getPath());
+            } catch (IOException e) {
+              logException("Error reading the contents of "
+                  + appDir.getPath(), e);
+              return;
+            }
+            for (FileStatus node : logFiles) {
+              if (node.getModificationTime() < cutoffMillis) {
+                try {
+                  fs.delete(node.getPath(), true);
+                } catch (IOException ex) {
+                  logException("Could not delete " + appDir.getPath(), ex);
-              } catch(IOException e) {
-                logIOException(
-                  "Error reading the contents of " + appDir.getPath(), e);
+          } else if (shouldDeleteLogDir(appDir, cutoffMillis, fs)) {
+            // Application is no longer running
+            try {
+              LOG.info("Deleting aggregated logs in " + appDir.getPath());
+              fs.delete(appDir.getPath(), true);
+            } catch (IOException e) {
+              logException("Could not delete " + appDir.getPath(), e);
+            }
-      } catch (IOException e) {
-        logIOException("Could not read the contents of " + dir, e);
+      } catch (Exception e) {
+        logException("Could not delete " + appDir.getPath(), e);
-        logIOException("Error reading the contents of " + dir.getPath(), e);
+        logException("Error reading the contents of " + dir.getPath(), e);
-  private static void logIOException(String comment, IOException e) {
-    if(e instanceof AccessControlException) {
-      String message = e.getMessage();
+  private static void logException(String comment, Throwable t) {
+    if(t instanceof AccessControlException) {
+      String message = t.getMessage();
-      LOG.error(comment, e);
+      LOG.error(comment, t);

INS31 UPD42 INS83 INS83 INS39 INS42 MOV44 INS44 INS44 INS44 INS8 UPD42 MOV44 MOV8 UPD43 UPD42 INS39 INS42 INS43 INS42 INS43 INS42 INS60 INS54 INS70 UPD42 INS42 INS42 INS5 INS59 INS8 MOV12 INS44 INS42 INS8 INS8 UPD42 INS43 INS85 INS42 INS21 INS43 INS42 INS21 INS25 UPD43 UPD42 INS42 INS7 INS41 INS42 INS32 MOV27 INS8 UPD43 UPD42 UPD42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 MOV60 INS60 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS39 INS59 MOV38 MOV8 INS25 UPD42 UPD42 INS42 UPD42 MOV32 INS42 INS32 INS60 INS54 MOV32 MOV8 UPD45 INS42 INS42 INS42 INS5 INS59 INS8 INS12 INS42 INS43 INS85 INS42 INS21 INS44 INS8 INS42 INS7 INS43 INS42 INS21 INS41 INS42 MOV32 INS42 INS32 INS42 INS27 INS42 INS45 INS32 UPD42 INS42 INS42 UPD42 DEL39 DEL42 DEL42 DEL32 DEL42 DEL27 DEL25 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL54 DEL8