YARN-10101. Support listing of aggregated logs for containers belonging to an application attempt. Contributed by Adam Antal

+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogAggregationType;
+import org.apache.hadoop.yarn.logaggregation.ContainerLogMeta;
+import org.apache.hadoop.yarn.server.webapp.dao.ContainerLogsInfo;
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.core.GenericEntity;
+import java.util.ArrayList;
+import java.util.List;
+  private static List<ContainerLogsInfo> convertToContainerLogsInfo(
+      List<ContainerLogMeta> containerLogMetas,
+      boolean emptyLocalContainerLogMeta) {
+    List<ContainerLogsInfo> containersLogsInfo = new ArrayList<>();
+    for (ContainerLogMeta meta : containerLogMetas) {
+      ContainerLogsInfo logInfo =
+          new ContainerLogsInfo(meta, ContainerLogAggregationType.AGGREGATED);
+      containersLogsInfo.add(logInfo);
+
+      if (emptyLocalContainerLogMeta) {
+        ContainerLogMeta emptyMeta =
+            new ContainerLogMeta(logInfo.getContainerId(),
+                logInfo.getNodeId() == null ? "N/A" : logInfo.getNodeId());
+        ContainerLogsInfo empty =
+            new ContainerLogsInfo(emptyMeta, ContainerLogAggregationType.LOCAL);
+        containersLogsInfo.add(empty);
+      }
+    }
+    return containersLogsInfo;
+  }
+
+  private static Response getContainerLogMeta(
+      WrappedLogMetaRequest request, boolean emptyLocalContainerLogMeta) {
+    try {
+      List<ContainerLogMeta> containerLogMeta = request.getContainerLogMetas();
+      if (containerLogMeta.isEmpty()) {
+        throw new NotFoundException("Can not get log meta for request.");
+      }
+      List<ContainerLogsInfo> containersLogsInfo = convertToContainerLogsInfo(
+          containerLogMeta, emptyLocalContainerLogMeta);
+
+      GenericEntity<List<ContainerLogsInfo>> meta =
+          new GenericEntity<List<ContainerLogsInfo>>(containersLogsInfo) {
+          };
+      Response.ResponseBuilder response = Response.ok(meta);
+      // Sending the X-Content-Type-Options response header with the value
+      // nosniff will prevent Internet Explorer from MIME-sniffing a response
+      // away from the declared content-type.
+      response.header("X-Content-Type-Options", "nosniff");
+      return response.build();
+    } catch (Exception ex) {
+      LOG.debug("Exception during request", ex);
+      throw new WebApplicationException(ex);
+    }
+  }
+
+  /**
+   * Validates whether the user has provided at least one query param for
+   * the request. Also validates that if multiple query params are provided,
+   * they do not contradict.
+   */
+  private void validateUserInput(ApplicationId applicationId,
+      ApplicationAttemptId applicationAttemptId, ContainerId containerId) {
+    // At least one field should be set
+    if (applicationId == null && applicationAttemptId == null &&
+        containerId == null) {
+      throw new IllegalArgumentException("Should set application id, " +
+          "application attempt id or container id.");
+    }
+
+    // container id should belong to the app attempt and the app id,
+    // if provided
+    if (containerId != null) {
+      if (applicationAttemptId != null && !applicationAttemptId.equals(
+          containerId.getApplicationAttemptId())) {
+        throw new IllegalArgumentException(
+            String.format(
+                "Container %s does not belong to application attempt %s!",
+                containerId, applicationAttemptId));
+      }
+      if (applicationId != null && !applicationId.equals(
+          containerId.getApplicationAttemptId().getApplicationId())) {
+        throw new IllegalArgumentException(
+            String.format(
+                "Container %s does not belong to application %s!",
+                containerId, applicationId));
+      }
+    }
+
+    // app attempt id should match the app id, if provided
+    if (applicationAttemptId != null && applicationId != null &&
+        !applicationId.equals(applicationAttemptId.getApplicationId())) {
+      throw new IllegalArgumentException(
+          String.format(
+              "Application attempt %s does not belong to application %s!",
+              applicationAttemptId, applicationId));
+    }
+  }
+
+  public Response getLogsInfo(HttpServletRequest hsr, String appIdStr,
+      String appAttemptIdStr, String containerIdStr, String nmId,
+      boolean redirectedFromNode) {
+    ApplicationId appId = null;
+    if (appIdStr != null) {
+      try {
+        appId = ApplicationId.fromString(appIdStr);
+      } catch (IllegalArgumentException iae) {
+        throw new BadRequestException(iae);
+      }
+    }
+
+    ApplicationAttemptId appAttemptId = null;
+    if (appAttemptIdStr != null) {
+      try {
+        appAttemptId = ApplicationAttemptId.fromString(appAttemptIdStr);
+      } catch (IllegalArgumentException iae) {
+        throw new BadRequestException(iae);
+      }
+    }
+
+    ContainerId containerId = null;
+    if (containerIdStr != null) {
+      try {
+        containerId = ContainerId.fromString(containerIdStr);
+      } catch (IllegalArgumentException iae) {
+        throw new BadRequestException(iae);
+      }
+    }
+
+    validateUserInput(appId, appAttemptId, containerId);
+
+    WrappedLogMetaRequest.Builder logMetaRequestBuilder =
+        WrappedLogMetaRequest.builder()
+            .setApplicationId(appId)
+            .setApplicationAttemptId(appAttemptId)
+            .setContainerId(containerIdStr);
+
+    return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId,
+        redirectedFromNode, null);
+  }
+
-   * @param containerIdStr container id
+   * @param builder builder instance for the log meta request
-      String containerIdStr, String nmId, boolean redirectedFromNode,
+      WrappedLogMetaRequest.Builder builder,
+      String nmId, boolean redirectedFromNode,
-    ContainerId containerId = null;
-    try {
-      containerId = ContainerId.fromString(containerIdStr);
-    } catch (IllegalArgumentException e) {
-      throw new BadRequestException("invalid container id, " + containerIdStr);
-    }
-    ApplicationId appId = containerId.getApplicationAttemptId()
-        .getApplicationId();
+    builder.setFactory(factory);
+
-      appInfo = appInfoProvider.getApp(req, appId.toString(), clusterId);
+      appInfo = appInfoProvider.getApp(req, builder.getAppId(), clusterId);
+      LOG.warn("Could not obtain appInfo object from provider.", ex);
-      return LogWebServiceUtils
-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
-              false);
+      return getContainerLogMeta(builder.build(), false);
-      return LogWebServiceUtils
-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,
-              false);
+      return getContainerLogMeta(builder.build(), false);
+      builder.setAppOwner(appOwner);
+      WrappedLogMetaRequest request = builder.build();
+
-        try {
-          nodeHttpAddress = appInfoProvider.getNodeHttpAddress(
-              req, appId.toString(),
-              containerId.getApplicationAttemptId().toString(),
-              containerId.toString(), clusterId);
-        } catch (Exception ex) {
-          // return log meta for the aggregated logs if exists.
-          // It will also return empty log meta for the local logs.
-          return LogWebServiceUtils
-              .getContainerLogMeta(factory, appId, appOwner, null,
-                  containerIdStr, true);
+        if (request.getContainerId() != null) {
+          try {
+            nodeHttpAddress = appInfoProvider.getNodeHttpAddress(
+                req, request.getAppId(), request.getAppAttemptId(),
+                request.getContainerId().toString(), clusterId);
+          } catch (Exception ex) {
+            LOG.warn("Could not obtain node HTTP address from provider.", ex);
+            // return log meta for the aggregated logs if exists.
+            // It will also return empty log meta for the local logs.
+            return getContainerLogMeta(request, true);
+          }
-          return LogWebServiceUtils
-              .getContainerLogMeta(factory, appId, appOwner, null,
-                  containerIdStr, true);
+          return getContainerLogMeta(request, true);
+      ContainerId containerId = request.getContainerId();
+      if (containerId == null) {
+        throw new WebApplicationException(
+            new Exception("Could not redirect to node, as app attempt or " +
+                "application logs are requested."));
+      }
-      // directly find logs from HDFS.
+      LOG.warn("Could not obtain appInfo object from provider.", ex);
+          LOG.warn("Could not obtain node HTTP address from provider.", ex);
+
+  public static WrappedLogMetaRequest.Builder createRequestFromContainerId(
+      String containerIdStr) {
+    WrappedLogMetaRequest.Builder logMetaRequestBuilder =
+        WrappedLogMetaRequest.builder();
+    try {
+      logMetaRequestBuilder.setContainerId(containerIdStr);
+    } catch (IllegalArgumentException e) {
+      throw new BadRequestException("Invalid container id: " + containerIdStr);
+    }
+    return logMetaRequestBuilder;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 MOV44 INS44 INS44 INS8 INS44 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS74 INS42 INS39 INS42 INS60 INS70 INS41 INS42 INS43 INS42 INS39 INS42 INS54 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS60 INS25 MOV60 INS25 INS21 INS60 INS41 INS43 INS42 INS21 INS40 INS43 INS42 INS60 INS54 INS41 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS8 INS12 INS66 INS66 INS66 INS42 INS42 INS42 INS27 INS8 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS32 INS43 INS59 INS32 UPD42 UPD66 INS40 INS32 INS42 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS60 INS21 INS25 INS60 INS25 INS60 INS60 INS60 INS21 INS41 MOV44 INS8 INS27 INS27 INS53 INS42 INS33 INS25 INS25 INS27 INS38 INS53 INS42 INS42 INS33 INS42 INS33 INS54 INS42 INS42 INS33 INS42 INS33 INS54 INS42 INS33 INS54 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 INS60 INS25 INS60 INS25 INS40 INS42 INS32 INS21 MOV44 INS8 INS42 INS42 INS74 INS42 INS43 INS59 INS32 INS42 INS8 INS74 INS59 INS32 INS8 INS74 INS59 INS74 INS59 INS43 INS59 INS32 INS32 INS21 INS53 INS27 INS27 INS42 INS33 INS14 INS27 INS8 INS27 INS8 INS27 INS27 INS32 INS14 INS8 INS12 INS8 INS12 MOV8 INS12 INS32 INS42 INS42 INS21 INS32 INS43 INS59 MOV27 INS8 INS43 INS59 INS27 INS8 INS21 INS42 INS42 INS32 INS53 INS43 INS42 INS42 INS14 INS42 INS42 INS42 INS60 INS60 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS53 INS43 INS43 INS42 INS32 INS43 INS74 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS14 INS42 INS33 INS42 INS33 INS43 INS27 INS27 INS38 INS53 INS27 INS38 INS53 INS42 INS33 INS42 INS33 INS42 INS42 INS32 INS43 INS32 INS21 INS44 MOV8 INS21 INS44 INS8 INS44 INS8 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 MOV25 MOV25 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS40 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS1 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS45 INS45 INS42 INS33 INS32 INS14 INS42 INS33 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS7 INS43 INS42 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS43 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS43 INS74 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS32 INS43 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS33 INS43 INS14 INS42 INS45 INS42 INS43 INS32 INS16 INS43 INS42 INS40 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS27 INS21 INS42 INS42 INS42 INS27 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS44 INS8 UPD42 INS42 INS45 INS45 INS32 INS32 INS33 INS42 INS42 INS43 INS42 INS21 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS32 MOV32 INS32 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 INS42 MOV9 UPD42 UPD42 UPD42 UPD42 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 DEL45 DEL42 DEL27 DEL12 DEL54 DEL42 DEL43 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL33 DEL42 DEL42 DEL33 DEL33 DEL42 DEL32 DEL32 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL33 DEL42