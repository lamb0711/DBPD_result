YARN-3347. Improve YARN log command to get AMContainer logs as well as running containers logs. Contributed by Xuan Gong.

+    /**
+     * Keep calling this till you get a {@link EOFException} for getting logs of
+     * the specific types for a single container.
+     * @param valueStream
+     * @param out
+     * @param logUploadedTime
+     * @param logType
+     * @throws IOException
+     */
+    public static int readContainerLogsForALogType(
+        DataInputStream valueStream, PrintStream out, long logUploadedTime,
+        List<String> logType) throws IOException {
+      byte[] buf = new byte[65535];
+
+      String fileType = valueStream.readUTF();
+      String fileLengthStr = valueStream.readUTF();
+      long fileLength = Long.parseLong(fileLengthStr);
+      if (logType.contains(fileType)) {
+        out.print("LogType:");
+        out.println(fileType);
+        if (logUploadedTime != -1) {
+          out.print("Log Upload Time:");
+          out.println(Times.format(logUploadedTime));
+        }
+        out.print("LogLength:");
+        out.println(fileLengthStr);
+        out.println("Log Contents:");
+
+        long curRead = 0;
+        long pendingRead = fileLength - curRead;
+        int toRead = pendingRead > buf.length ? buf.length : (int) pendingRead;
+        int len = valueStream.read(buf, 0, toRead);
+        while (len != -1 && curRead < fileLength) {
+          out.write(buf, 0, len);
+          curRead += len;
+
+          pendingRead = fileLength - curRead;
+          toRead = pendingRead > buf.length ? buf.length : (int) pendingRead;
+          len = valueStream.read(buf, 0, toRead);
+        }
+        out.println("End of LogType:" + fileType);
+        out.println("");
+        return 0;
+      } else {
+        long totalSkipped = 0;
+        long currSkipped = 0;
+        while (currSkipped != -1 && totalSkipped < fileLength) {
+          currSkipped = valueStream.skip(fileLength - totalSkipped);
+          totalSkipped += currSkipped;
+        }
+        return -1;
+      }
+    }
+

INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS74 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS5 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS39 INS85 INS42 INS3 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS25 INS21 INS21 INS21 INS60 INS60 INS60 INS60 INS61 INS21 INS21 INS41 INS60 INS60 INS61 INS41 INS5 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS8 INS32 INS32 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS34 INS39 INS59 INS39 INS59 INS27 INS8 INS38 INS39 INS85 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS38 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS27 INS42 INS16 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS34 INS42 INS34 INS27 INS27 INS21 INS21 INS34 INS34 INS32 INS32 INS42 INS42 INS27 INS40 INS11 INS42 INS42 INS42 INS34 INS42 INS42 INS38 INS42 INS42 INS32 INS7 INS7 INS7 INS7 INS45 INS42 INS42 INS38 INS42 INS42 INS7 INS7 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS40 INS39 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS16 INS42 INS32 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS11 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS40 INS39 INS42 INS42 INS42