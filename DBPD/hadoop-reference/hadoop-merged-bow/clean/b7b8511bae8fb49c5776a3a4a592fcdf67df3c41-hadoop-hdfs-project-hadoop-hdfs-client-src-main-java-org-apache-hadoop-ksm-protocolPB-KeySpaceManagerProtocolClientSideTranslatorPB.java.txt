HDFS-11773. Ozone: KSM : add listVolumes. Contributed by Weiwei Yang.

+import com.google.common.base.Strings;
+import com.google.common.collect.Lists;
+import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos
+    .ListVolumeRequest;
+import org.apache.hadoop.ozone.protocol.proto.KeySpaceManagerProtocolProtos
+    .ListVolumeResponse;
-                                              String prevKey, long maxKeys)
+                                              String prevKey, int maxKeys)
-    return null;
+    ListVolumeRequest.Builder builder = ListVolumeRequest.newBuilder();
+    if (!Strings.isNullOrEmpty(prefix)) {
+      builder.setPrefix(prefix);
+    }
+    if (!Strings.isNullOrEmpty(prevKey)) {
+      builder.setPrevKey(prevKey);
+    }
+    builder.setMaxKeys(maxKeys);
+    builder.setUserName(userName);
+    builder.setScope(ListVolumeRequest.Scope.VOLUMES_BY_USER);
+    return listVolume(builder.build());
-  public List<KsmVolumeArgs> listAllVolumes(String prefix, String prevKey, long
-      maxKeys) throws IOException {
-    return null;
+  public List<KsmVolumeArgs> listAllVolumes(String prefix, String prevKey,
+      int maxKeys) throws IOException {
+    ListVolumeRequest.Builder builder = ListVolumeRequest.newBuilder();
+    if (!Strings.isNullOrEmpty(prefix)) {
+      builder.setPrefix(prefix);
+    }
+    if (!Strings.isNullOrEmpty(prevKey)) {
+      builder.setPrevKey(prevKey);
+    }
+    builder.setMaxKeys(maxKeys);
+    builder.setScope(ListVolumeRequest.Scope.VOLUMES_BY_CLUSTER);
+    return listVolume(builder.build());
+  }
+
+  private List<KsmVolumeArgs> listVolume(ListVolumeRequest request)
+      throws IOException {
+    final ListVolumeResponse resp;
+    try {
+      resp = rpcProxy.listVolumes(NULL_RPC_CONTROLLER, request);
+    } catch (ServiceException e) {
+      throw ProtobufHelper.getRemoteException(e);
+    }
+
+    if (resp.getStatus() != Status.OK) {
+      throw new IOException("List volume failed, error: "
+          + resp.getStatus());
+    }
+
+    List<KsmVolumeArgs> result = Lists.newArrayList();
+    for (VolumeInfo volInfo : resp.getVolumeInfoList()) {
+      KsmVolumeArgs volArgs = KsmVolumeArgs.getFromProtobuf(volInfo);
+      result.add(volArgs);
+    }
+
+    return resp.getVolumeInfoList().stream()
+        .map(item -> KsmVolumeArgs.getFromProtobuf(item))
+        .collect(Collectors.toList());

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS83 INS74 INS42 INS44 INS43 INS8 UPD39 INS60 INS25 INS25 INS21 INS21 INS21 UPD39 INS60 INS25 INS25 INS21 INS21 INS43 INS43 INS43 INS42 INS42 INS60 INS54 INS25 INS60 INS70 INS41 INS43 INS59 INS38 INS8 INS38 INS8 INS32 INS32 INS32 INS32 INS43 INS59 INS38 INS8 INS38 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS83 INS43 INS59 INS8 INS12 INS27 INS8 INS74 INS59 INS44 INS32 INS8 INS32 INS40 INS42 INS32 INS32 INS21 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS40 INS42 INS32 INS32 INS21 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS32 INS40 INS53 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS21 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS43 INS42 INS53 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL33 DEL33