HADOOP-14788. Credentials readTokenStorageFile to stop wrapping IOEs in IOEs.
Contributed by Ajay Kumar.

+import java.lang.reflect.Constructor;
+import org.apache.hadoop.fs.PathIOException;
+
+  /**
+   * Takes an IOException, file/directory path, and method name and returns an
+   * IOException with the input exception as the cause and also include the
+   * file,method details. The new exception provides the stack trace of the
+   * place where the exception is thrown and some extra diagnostics
+   * information.
+   *
+   * Return instance of same exception if exception class has a public string
+   * constructor; Otherwise return an PathIOException.
+   * InterruptedIOException and PathIOException are returned unwrapped.
+   *
+   * @param path file/directory path
+   * @param methodName method name
+   * @param exception the caught exception.
+   * @return an exception to throw
+   */
+  public static IOException wrapException(final String path,
+      final String methodName, final IOException exception) {
+
+    if (exception instanceof InterruptedIOException
+        || exception instanceof PathIOException) {
+      return exception;
+    } else {
+      String msg = String
+          .format("Failed with %s while processing file/directory :[%s] in "
+                  + "method:[%s]",
+              exception.getClass().getName(), path, methodName);
+      try {
+        return wrapWithMessage(exception, msg);
+      } catch (Exception ex) {
+        // For subclasses which have no (String) constructor throw IOException
+        // with wrapped message
+
+        return new PathIOException(path, exception);
+      }
+    }
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <T extends IOException> T wrapWithMessage(
+      final T exception, final String msg) throws T {
+    Class<? extends Throwable> clazz = exception.getClass();
+    try {
+      Constructor<? extends Throwable> ctor = clazz
+          .getConstructor(String.class);
+      Throwable t = ctor.newInstance(msg);
+      return (T) (t.initCause(exception));
+    } catch (Throwable e) {
+      LOG.warn("Unable to wrap exception of type " +
+          clazz + ": it has no (String) constructor", e);
+      throw exception;
+    }
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS79 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS25 INS42 INS45 INS42 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS54 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS62 INS62 INS41 INS60 INS54 INS43 INS76 INS42 INS32 INS60 INS60 INS41 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS59 INS8 INS12 INS42 INS43 INS42 INS42 INS74 INS59 INS43 INS59 INS11 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS32 INS41 INS44 INS8 INS42 INS43 INS76 INS42 INS32 INS42 INS42 INS32 INS43 INS36 INS42 INS32 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS32 INS43 INS42 INS41 INS42 INS43 INS42 INS42 INS57 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS42