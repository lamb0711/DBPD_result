HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.server.namenode.INode.Content.CountsMap.Key;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot.FileDiff;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot.FileDiffList;
+import org.apache.hadoop.hdfs.server.namenode.snapshot.FileWithSnapshot.Util;
-  public short getBlockReplication() {
-    return getFileReplication(null);
+  public final short getBlockReplication() {
+    return this instanceof FileWithSnapshot?
+        Util.getBlockReplication((FileWithSnapshot)this)
+        : getFileReplication(null);
+  /** @return the diskspace required for a full block. */
+  final long getBlockDiskspace() {
+    return getPreferredBlockSize() * getBlockReplication();
+  }
+
+  @Override
+  Quota.Counts computeQuotaUsage(Quota.Counts counts) {
+    counts.add(Quota.NAMESPACE, this instanceof FileWithSnapshot?
+        ((FileWithSnapshot)this).getDiffs().asList().size() + 1: 1);
+    counts.add(Quota.DISKSPACE, diskspaceConsumed());
+    return counts;
+  }
-  long[] computeContentSummary(long[] summary) {
-    summary[0] += computeFileSize(true, null);
-    summary[1]++;
-    summary[3] += diskspaceConsumed();
-    return summary;
+  public final Content.CountsMap computeContentSummary(
+      final Content.CountsMap countsMap) {
+    computeContentSummary4Snapshot(countsMap.getCounts(Key.SNAPSHOT));
+    computeContentSummary4Current(countsMap.getCounts(Key.CURRENT));
+    return countsMap;
-  /** The same as computeFileSize(includesBlockInfoUnderConstruction, null). */
-  public long computeFileSize(boolean includesBlockInfoUnderConstruction) {
-    return computeFileSize(includesBlockInfoUnderConstruction, null);
+  @Override
+  public final Content.Counts computeContentSummary(
+      final Content.Counts counts) {
+    computeContentSummary4Snapshot(counts);
+    computeContentSummary4Current(counts);
+    return counts;
-  /** Compute file size.
-   * May or may not include BlockInfoUnderConstruction.
+  private void computeContentSummary4Snapshot(final Content.Counts counts) {
+    // file length and diskspace only counted for the latest state of the file
+    // i.e. either the current state or the last snapshot
+    if (this instanceof FileWithSnapshot) {
+      final FileWithSnapshot withSnapshot = (FileWithSnapshot)this;
+      final FileDiffList diffs = withSnapshot.getDiffs();
+      final int n = diffs.asList().size();
+      counts.add(Content.FILE, n);
+      if (n > 0 && withSnapshot.isCurrentFileDeleted()) {
+        counts.add(Content.LENGTH, diffs.getLast().getFileSize());
+      }
+
+      if (withSnapshot.isCurrentFileDeleted()) {
+        final long lastFileSize = diffs.getLast().getFileSize();
+        counts.add(Content.DISKSPACE, lastFileSize * getBlockReplication());
+      }
+    }
+  }
+
+  private void computeContentSummary4Current(final Content.Counts counts) {
+    if (this instanceof FileWithSnapshot
+        && ((FileWithSnapshot)this).isCurrentFileDeleted()) {
+      return;
+    }
+
+    counts.add(Content.LENGTH, computeFileSize());
+    counts.add(Content.FILE, 1);
+    counts.add(Content.DISKSPACE, diskspaceConsumed());
+  }
+
+  /** The same as computeFileSize(null). */
+  public final long computeFileSize() {
+    return computeFileSize(null);
+  }
+
+  /**
+   * Compute file size of the current file if the given snapshot is null;
+   * otherwise, get the file size from the given snapshot.
-  public long computeFileSize(boolean includesBlockInfoUnderConstruction,
-      Snapshot snapshot) {
+  public final long computeFileSize(Snapshot snapshot) {
+    if (snapshot != null && this instanceof FileWithSnapshot) {
+      final FileDiff d = ((FileWithSnapshot)this).getDiffs().getDiff(snapshot);
+      if (d != null) {
+        return d.getFileSize();
+      }
+    }
+
+    return computeFileSize(true, false);
+  }
+
+  /**
+   * Compute file size of the current file size
+   * but not including the last block if it is under construction.
+   */
+  public final long computeFileSizeNotIncludingLastUcBlock() {
+    return computeFileSize(false, false);
+  }
+
+  /**
+   * Compute file size of the current file.
+   * 
+   * @param includesLastUcBlock
+   *          If the last block is under construction, should it be included?
+   * @param usePreferredBlockSize4LastUcBlock
+   *          If the last block is under construction, should we use actual
+   *          block size or preferred block size?
+   *          Note that usePreferredBlockSize4LastUcBlock is ignored
+   *          if includesLastUcBlock == false.
+   * @return file size
+   */
+  private final long computeFileSize(boolean includesLastUcBlock,
+      boolean usePreferredBlockSize4LastUcBlock) {
-    long bytes = blocks[last] instanceof BlockInfoUnderConstruction
-                 && !includesBlockInfoUnderConstruction?
-                     0: blocks[last].getNumBytes();
-    for(int i = 0; i < last; i++) {
-      bytes += blocks[i].getNumBytes();
+    long size = blocks[last].getNumBytes();
+    if (blocks[last] instanceof BlockInfoUnderConstruction) {
+       if (!includesLastUcBlock) {
+         size = 0;
+       } else if (usePreferredBlockSize4LastUcBlock) {
+         size = getPreferredBlockSize();
+       }
-    return bytes;
-  }
-  
-
-  @Override
-  DirCounts spaceConsumedInTree(DirCounts counts) {
-    counts.nsCount += 1;
-    counts.dsCount += diskspaceConsumed();
-    return counts;
+    //sum other blocks
+    for(int i = 0; i < last; i++) {
+      size += blocks[i].getNumBytes();
+    }
+    return size;
-    return diskspaceConsumed(blocks);
-  }
-  
-  private long diskspaceConsumed(Block[] blkArr) {
-    long size = 0;
-    if(blkArr == null) 
-      return 0;
-    
-    for (Block blk : blkArr) {
-      if (blk != null) {
-        size += blk.getNumBytes();
-      }
-    }
-    /* If the last block is being written to, use prefferedBlockSize
-     * rather than the actual block size.
-     */
-    if (blkArr.length > 0 && blkArr[blkArr.length-1] != null && 
-        isUnderConstruction()) {
-      size += getPreferredBlockSize() - blkArr[blkArr.length-1].getNumBytes();
-    }
-    return size * getFileReplication();
+    // use preferred block size for the last block if it is under construction
+    return computeFileSize(true, true) * getBlockReplication();
-    out.print(", fileSize=" + computeFileSize(true, snapshot));
+    out.print(", fileSize=" + computeFileSize(snapshot));

MOV26 INS26 INS26 INS26 INS26 MOV31 INS40 UPD40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS29 INS83 INS39 INS42 INS8 MOV78 INS43 UPD42 MOV42 MOV44 MOV8 INS78 INS83 INS43 UPD42 INS83 INS83 UPD43 UPD42 INS83 UPD39 MOV39 UPD42 MOV42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 MOV44 INS8 INS29 INS83 INS83 INS39 INS42 INS8 UPD83 INS83 INS44 INS39 INS42 INS8 INS65 INS41 INS40 INS43 UPD42 INS21 INS42 INS40 INS83 INS43 UPD42 INS21 INS21 INS41 INS40 INS83 UPD43 INS83 INS43 INS42 INS25 INS83 INS43 INS42 INS25 INS21 INS21 INS21 INS65 INS41 INS65 MOV25 INS41 INS65 INS41 INS65 INS65 UPD65 INS65 UPD42 INS39 INS42 INS60 INS25 MOV41 INS16 INS66 INS27 INS40 INS32 INS32 UPD42 INS40 INS32 INS32 INS42 INS40 INS32 INS32 INS40 INS62 INS8 INS40 UPD27 MOV27 INS8 INS32 INS32 INS32 INS66 INS32 INS66 INS66 INS27 INS8 INS32 INS66 INS66 INS32 INS66 INS42 INS66 INS42 INS66 UPD66 INS66 UPD66 INS66 MOV39 INS59 MOV62 INS8 UPD42 INS62 INS32 MOV32 MOV32 INS32 INS42 INS42 INS40 INS16 INS42 INS42 INS40 MOV32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS52 INS43 INS60 INS60 MOV60 INS21 MOV25 INS25 INS62 INS32 INS41 INS42 INS42 INS40 INS32 UPD42 MOV42 UPD42 MOV42 INS40 INS34 INS42 INS42 INS40 MOV32 INS42 INS33 MOV27 INS62 INS60 INS25 INS42 INS9 INS9 INS42 INS9 INS9 UPD42 MOV42 MOV32 INS25 INS32 INS52 INS43 INS42 INS42 INS11 INS42 INS62 INS27 INS34 INS42 INS42 INS40 UPD42 MOV42 INS42 INS40 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 UPD39 INS32 INS27 INS8 INS32 INS8 INS52 INS43 INS36 INS42 INS42 INS42 INS52 INS43 INS83 INS43 INS59 INS27 INS8 INS38 INS8 INS25 INS42 INS9 INS9 UPD42 INS42 INS43 INS52 INS52 INS43 INS32 INS34 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS32 INS21 INS42 INS42 INS60 INS21 INS42 INS11 INS42 INS42 INS42 INS32 INS42 INS33 INS41 UPD42 MOV42 INS21 INS42 INS8 UPD42 INS42 INS42 INS32 INS42 INS43 INS52 INS42 INS42 INS32 INS42 UPD42 MOV42 INS34 INS42 INS42 INS32 INS83 INS39 INS59 INS32 INS43 INS52 INS32 INS42 INS42 INS32 INS7 INS21 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS32 INS42 INS42 INS40 INS27 INS42 INS36 INS42 INS42 UPD42 MOV42 INS42 INS34 INS7 INS36 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS11 INS42 INS32 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS52 INS42 INS43 INS52 INS42 INS42 DEL39 DEL85 DEL5 DEL42 DEL34 DEL2 DEL42 DEL9 DEL33 DEL32 DEL7 DEL21 DEL42 DEL34 DEL2 DEL37 DEL21 DEL42 DEL34 DEL2 DEL7 DEL39 DEL85 DEL5 DEL31 DEL66 DEL65 DEL29 DEL39 DEL39 DEL33 DEL32 DEL41 DEL42 DEL42 DEL40 DEL34 DEL7 DEL40 DEL7 DEL42 DEL34 DEL33 DEL27 DEL34 DEL41 DEL42 DEL33 DEL42 DEL40 DEL34 DEL27 DEL2 DEL40 DEL34 DEL27 DEL27 DEL42 DEL32 DEL27 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL32 DEL27 DEL7 DEL21 DEL8 DEL38 DEL27 DEL34 DEL16 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL9