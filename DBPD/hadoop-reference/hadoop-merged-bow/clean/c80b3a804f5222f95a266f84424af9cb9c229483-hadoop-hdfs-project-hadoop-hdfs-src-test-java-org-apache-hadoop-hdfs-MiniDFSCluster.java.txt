HDFS-9188. Make block corruption related tests FsDataset-agnostic. (lei)

-import java.io.RandomAccessFile;
-import java.nio.channels.FileChannel;
-import java.util.Random;
+import org.apache.hadoop.hdfs.server.datanode.FsDatasetTestUtils;
+import org.apache.hadoop.hdfs.server.datanode.FsDatasetTestUtils.MaterializedReplica;
+import org.apache.hadoop.hdfs.server.datanode.ReplicaNotFoundException;
-import org.apache.hadoop.util.ShutdownHookManager;
-   * Gets the rpc port used by the NameNode, because the caller 
+   * Returns the corresponding FsDatasetTestUtils for a DataNode.
+   * @param dnIdx the index of DataNode.
+   * @return a FsDatasetTestUtils for the given DataNode.
+   */
+  public FsDatasetTestUtils getFsDatasetTestUtils(int dnIdx) {
+    Preconditions.checkArgument(dnIdx < dataNodes.size());
+    return FsDatasetTestUtils.Factory.getFactory(conf)
+        .newInstance(dataNodes.get(dnIdx).datanode);
+  }
+
+  /**
+   * Returns the corresponding FsDatasetTestUtils for a DataNode.
+   * @param dn a DataNode
+   * @return a FsDatasetTestUtils for the given DataNode.
+   */
+  public FsDatasetTestUtils getFsDatasetTestUtils(DataNode dn) {
+    Preconditions.checkArgument(dn != null);
+    return FsDatasetTestUtils.Factory.getFactory(conf)
+        .newInstance(dn);
+  }
+
+  /**
+   * Gets the rpc port used by the NameNode, because the caller
-    File[] blockFiles = getAllBlockFiles(block);
-    for (File f : blockFiles) {
-      if ((deleteBlockFile && corruptBlockByDeletingBlockFile(f)) ||
-          (!deleteBlockFile && corruptBlock(f))) {
+    for (DataNode dn : getDataNodes()) {
+      try {
+        MaterializedReplica replica =
+            getFsDatasetTestUtils(dn).getMaterializedReplica(block);
+        if (deleteBlockFile) {
+          replica.deleteData();
+        } else {
+          replica.corruptData();
+        }
+      } catch (ReplicaNotFoundException e) {
+        // Ignore.
-   * @throws IOException on error accessing the given block or if
-   * the contents of the block (on the same datanode) differ.
-   * @return true if a replica was corrupted, false otherwise
-   * Types: delete, write bad data, truncate
+   * @throws IOException on error accessing the given block file.
-  public boolean corruptReplica(int i, ExtendedBlock blk)
+  public void corruptReplica(int i, ExtendedBlock blk)
-    File blockFile = getBlockFile(i, blk);
-    return corruptBlock(blockFile);
+    getMaterializedReplica(i, blk).corruptData();
-  /*
-   * Corrupt a block on a particular datanode
+  /**
+   * Corrupt a block on a particular datanode.
+   *
+   * @param dn the datanode
+   * @param blk name of the block
+   * @throws IOException on error accessing the given block file.
-  public static boolean corruptBlock(File blockFile) throws IOException {
-    if (blockFile == null || !blockFile.exists()) {
-      return false;
-    }
-    // Corrupt replica by writing random bytes into replica
-    Random random = new Random();
-    RandomAccessFile raFile = new RandomAccessFile(blockFile, "rw");
-    FileChannel channel = raFile.getChannel();
-    String badString = "BADBAD";
-    int rand = random.nextInt((int)channel.size()/2);
-    raFile.seek(rand);
-    raFile.write(badString.getBytes());
-    raFile.close();
-    LOG.warn("Corrupting the block " + blockFile);
-    return true;
+  public void corruptReplica(DataNode dn, ExtendedBlock blk)
+      throws IOException {
+    getMaterializedReplica(dn, blk).corruptData();
-  /*
-   * Corrupt a block on a particular datanode by deleting the block file
+  /**
+   * Corrupt the metadata of a block on a datanode.
+   * @param i the index of the datanode
+   * @param blk name of the block
+   * @throws IOException on error accessing the given metadata file.
-  public static boolean corruptBlockByDeletingBlockFile(File blockFile) 
-      throws IOException {
-    if (blockFile == null || !blockFile.exists()) {
-      return false;
-    }
-    return blockFile.delete();
+  public void corruptMeta(int i, ExtendedBlock blk) throws IOException {
+    getMaterializedReplica(i, blk).corruptMeta();
-  
+
+  /**
+   * Get materialized replica that can be corrupted later.
+   * @param i the index of DataNode.
+   * @param blk name of the block.
+   * @return a materialized replica.
+   * @throws ReplicaNotFoundException if the replica does not exist on the
+   * DataNode.
+   */
+  public MaterializedReplica getMaterializedReplica(
+      int i, ExtendedBlock blk) throws ReplicaNotFoundException {
+    return getFsDatasetTestUtils(i).getMaterializedReplica(blk);
+  }
+
+  /**
+   * Get materialized replica that can be corrupted later.
+   * @param dn the index of DataNode.
+   * @param blk name of the block.
+   * @return a materialized replica.
+   * @throws ReplicaNotFoundException if the replica does not exist on the
+   * DataNode.
+   */
+  public MaterializedReplica getMaterializedReplica(
+      DataNode dn, ExtendedBlock blk) throws ReplicaNotFoundException {
+    return getFsDatasetTestUtils(dn).getMaterializedReplica(blk);
+  }
+

MOV26 MOV26 MOV26 MOV31 MOV31 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS29 UPD83 INS43 INS42 INS44 INS8 INS29 MOV83 INS43 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 UPD39 INS29 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 UPD42 MOV42 INS39 INS42 INS21 INS41 INS65 INS65 INS65 INS42 UPD43 UPD42 INS21 INS41 MOV60 INS70 MOV41 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 MOV21 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 MOV21 INS65 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS43 INS42 INS42 MOV41 INS65 INS65 INS65 INS65 INS65 INS42 UPD43 UPD42 INS43 INS42 INS42 MOV41 INS66 INS42 INS66 INS66 INS32 INS32 INS66 INS42 INS66 INS66 UPD42 INS32 INS32 UPD66 INS44 INS32 INS8 UPD66 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 UPD42 INS42 INS32 UPD42 MOV42 INS42 INS27 INS32 INS42 INS22 INS42 INS42 INS27 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS42 INS54 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS40 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 MOV33 INS40 INS42 INS42 UPD42 MOV42 INS8 INS12 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV60 INS25 MOV21 INS44 INS8 UPD43 INS42 INS8 INS8 INS43 INS42 UPD42 UPD42 INS32 INS21 INS21 UPD42 MOV42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL39 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL27 DEL36 DEL42 DEL38 DEL32 DEL27 DEL36 DEL27 DEL8 DEL25 DEL8 DEL70 DEL8 DEL42 DEL43 DEL42 DEL45 DEL14 DEL66 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL41 DEL32 DEL83 DEL39 DEL42 DEL27 DEL32 DEL38 DEL27 DEL9 DEL41 DEL8 DEL25 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL45 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL39 DEL42 DEL42 DEL32 DEL11 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL31 DEL9 DEL83 DEL39 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL9 DEL41 DEL8 DEL25 DEL8