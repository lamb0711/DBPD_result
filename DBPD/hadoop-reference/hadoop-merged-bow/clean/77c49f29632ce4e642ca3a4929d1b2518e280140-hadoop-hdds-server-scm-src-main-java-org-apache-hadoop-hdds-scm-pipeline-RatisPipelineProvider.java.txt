HDDS-1406. Avoid usage of commonPool in RatisPipelineUtils. (#714)


+import org.apache.hadoop.hdds.scm.client.HddsClientUtils;
+import org.apache.hadoop.hdds.security.x509.SecurityConfig;
+import org.apache.hadoop.io.MultipleIOException;
+import org.apache.ratis.RatisHelper;
+import org.apache.ratis.client.RaftClient;
+import org.apache.ratis.grpc.GrpcTlsConfig;
+import org.apache.ratis.protocol.RaftClientReply;
+import org.apache.ratis.protocol.RaftGroup;
+import org.apache.ratis.protocol.RaftPeer;
+import org.apache.ratis.retry.RetryPolicy;
+import org.apache.ratis.rpc.SupportedRpcType;
+import org.apache.ratis.util.TimeDuration;
+import org.apache.ratis.util.function.CheckedBiConsumer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.ForkJoinWorkerThread;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+  private static final Logger LOG =
+      LoggerFactory.getLogger(RatisPipelineProvider.class);
+
+  // Set parallelism at 3, as now in Ratis we create 1 and 3 node pipelines.
+  private final int parallelismForPool = 3;
+
+  private final ForkJoinPool.ForkJoinWorkerThreadFactory factory =
+      (pool -> {
+        final ForkJoinWorkerThread worker = ForkJoinPool.
+            defaultForkJoinWorkerThreadFactory.newThread(pool);
+        worker.setName("RATISCREATEPIPELINE" + worker.getPoolIndex());
+        return worker;
+      });
+
+  private final ForkJoinPool forkJoinPool = new ForkJoinPool(
+      parallelismForPool, factory, null, false);
+
+
+
+
+  @Override
+  public void shutdown() {
+    forkJoinPool.shutdownNow();
+    try {
+      forkJoinPool.awaitTermination(60, TimeUnit.SECONDS);
+    } catch (Exception e) {
+      LOG.error("Unexpected exception occurred during shutdown of " +
+              "RatisPipelineProvider", e);
+    }
+  }
+
-    RatisPipelineUtils.createPipeline(pipeline, conf);
+    final RaftGroup group = RatisHelper.newRaftGroup(pipeline);
+    LOG.debug("creating pipeline:{} with {}", pipeline.getId(), group);
+    callRatisRpc(pipeline.getNodes(),
+        (raftClient, peer) -> {
+          RaftClientReply reply = raftClient.groupAdd(group, peer.getId());
+          if (reply == null || !reply.isSuccess()) {
+            String msg = "Pipeline initialization failed for pipeline:"
+                + pipeline.getId() + " node:" + peer.getId();
+            LOG.error(msg);
+            throw new IOException(msg);
+          }
+        });
+  }
+
+  private void callRatisRpc(List<DatanodeDetails> datanodes,
+      CheckedBiConsumer< RaftClient, RaftPeer, IOException> rpc)
+      throws IOException {
+    if (datanodes.isEmpty()) {
+      return;
+    }
+
+    final String rpcType = conf
+        .get(ScmConfigKeys.DFS_CONTAINER_RATIS_RPC_TYPE_KEY,
+            ScmConfigKeys.DFS_CONTAINER_RATIS_RPC_TYPE_DEFAULT);
+    final RetryPolicy retryPolicy = RatisHelper.createRetryPolicy(conf);
+    final List< IOException > exceptions =
+        Collections.synchronizedList(new ArrayList<>());
+    final int maxOutstandingRequests =
+        HddsClientUtils.getMaxOutstandingRequests(conf);
+    final GrpcTlsConfig tlsConfig = RatisHelper.createTlsClientConfig(new
+        SecurityConfig(conf));
+    final TimeDuration requestTimeout =
+        RatisHelper.getClientRequestTimeout(conf);
+    try {
+      forkJoinPool.submit(() -> {
+        datanodes.parallelStream().forEach(d -> {
+          final RaftPeer p = RatisHelper.toRaftPeer(d);
+          try (RaftClient client = RatisHelper
+              .newRaftClient(SupportedRpcType.valueOfIgnoreCase(rpcType), p,
+                  retryPolicy, maxOutstandingRequests, tlsConfig,
+                  requestTimeout)) {
+            rpc.accept(client, p);
+          } catch (IOException ioe) {
+            String errMsg =
+                "Failed invoke Ratis rpc " + rpc + " for " + d.getUuid();
+            LOG.error(errMsg, ioe);
+            exceptions.add(new IOException(errMsg, ioe));
+          }
+        });
+      }).get();
+    } catch (ExecutionException | RejectedExecutionException ex) {
+      LOG.error(ex.getClass().getName() + " exception occurred during " +
+          "createPipeline", ex);
+      throw new IOException(ex.getClass().getName() + " exception occurred " +
+          "during createPipeline", ex);
+    } catch (InterruptedException ex) {
+      Thread.currentThread().interrupt();
+      throw new IOException("Interrupt exception occurred during " +
+          "createPipeline", ex);
+    }
+    if (!exceptions.isEmpty()) {
+      throw MultipleIOException.createIOException(exceptions);
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS32 INS42 INS34 INS40 INS42 INS36 INS42 INS42 INS14 INS42 INS21 INS54 INS60 INS21 INS74 INS42 INS74 INS42 INS42 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS54 INS25 INS42 INS42 INS57 INS86 INS43 INS42 INS42 INS33 INS9 INS32 INS8 INS12 INS83 INS43 INS59 INS32 INS43 INS43 INS43 INS43 INS43 INS43 INS32 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS12 INS12 INS38 INS8 INS43 INS59 INS8 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 UPD42 INS32 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 INS44 INS8 INS32 INS53 INS42 INS42 INS60 INS21 INS41 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS59 INS59 INS8 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS84 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS32 INS42 INS42 INS60 INS25 INS74 INS43 INS42 INS32 INS42 INS43 INS43 INS32 INS14 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS42 INS42 INS86 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS27 INS42 INS32 INS42 INS43 INS27 INS42 INS40 INS42 INS42 INS45 INS32 INS45 INS45 INS42 INS42 INS32 INS27 INS38 INS60 INS21 INS53 INS42 INS8 INS32 INS45 INS45 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS43 INS59 INS32 INS14 INS21 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS32 INS42 INS86 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS59 INS8 INS42 INS60 INS54 INS83 INS43 INS59 INS58 INS8 INS12 INS42 INS42 INS32 INS43 INS59 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS43 INS42 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS45 INS42 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42