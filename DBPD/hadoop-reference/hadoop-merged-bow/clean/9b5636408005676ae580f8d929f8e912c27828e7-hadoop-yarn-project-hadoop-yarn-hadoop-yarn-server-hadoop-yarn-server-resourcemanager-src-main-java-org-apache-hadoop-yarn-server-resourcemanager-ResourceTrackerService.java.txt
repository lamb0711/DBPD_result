YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.

+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMAppAggregatorUpdateEvent;
+    
+    // Check & update aggregators info from request.
+    // TODO make sure it won't have race condition issue for AM failed over case
+    // that the older registration could possible override the newer one.
+    updateAppAggregatorsMap(request);
+    
+    // Return aggregators' map that NM needs to know
+    // TODO we should optimize this to only include aggreator info that NM 
+    // doesn't know yet.
+    List<ApplicationId> keepAliveApps = remoteNodeStatus.getKeepAliveApplications();
+    if (keepAliveApps != null) {
+      setAppAggregatorsMapToResponse(keepAliveApps, nodeHeartBeatResponse);
+    }
+  
+  private void setAppAggregatorsMapToResponse(
+      List<ApplicationId> liveApps, NodeHeartbeatResponse response) {
+    Map<ApplicationId, String> liveAppAggregatorsMap = new 
+        ConcurrentHashMap<ApplicationId, String>();
+    Map<ApplicationId, RMApp> rmApps = rmContext.getRMApps();
+      for (ApplicationId appId : liveApps) {
+        String appAggregatorAddr = rmApps.get(appId).getAggregatorAddr();
+        if (appAggregatorAddr != null) {
+          liveAppAggregatorsMap.put(appId, appAggregatorAddr);
+        } else {
+          // Log a debug info if aggregator address is not found.
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Aggregator for applicaton: " + appId + " hasn't registered yet!");
+          }
+        }
+      }
+    response.setAppAggregatorsMap(liveAppAggregatorsMap);
+  }
+  
+  private void updateAppAggregatorsMap(NodeHeartbeatRequest request) {
+    Map<ApplicationId, String> registeredAggregatorsMap = 
+        request.getRegisteredAggregators();
+    if (registeredAggregatorsMap != null 
+        && !registeredAggregatorsMap.isEmpty()) {
+      Map<ApplicationId, RMApp> rmApps = rmContext.getRMApps();
+      for (Map.Entry<ApplicationId, String> entry: 
+          registeredAggregatorsMap.entrySet()) {
+        ApplicationId appId = entry.getKey();
+        String aggregatorAddr = entry.getValue();
+        if (aggregatorAddr != null && !aggregatorAddr.isEmpty()) {
+          RMApp rmApp = rmApps.get(appId);
+          if (rmApp == null) {
+            LOG.warn("Cannot update aggregator info because application ID: " + 
+                appId + " is not found in RMContext!");
+          } else {
+            String previousAggregatorAddr = rmApp.getAggregatorAddr();
+            if (previousAggregatorAddr == null || 
+                previousAggregatorAddr != aggregatorAddr) {
+              // sending aggregator update event.
+              RMAppAggregatorUpdateEvent event =
+                  new RMAppAggregatorUpdateEvent(appId, aggregatorAddr);
+              rmContext.getDispatcher().getEventHandler().handle(event);
+            }
+          }
+        }
+      }
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS21 INS60 INS25 INS74 INS42 INS43 INS42 INS60 INS60 INS70 INS21 INS43 INS42 INS60 INS25 INS32 INS74 INS59 INS27 INS8 INS43 INS43 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS74 INS59 INS27 INS8 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS27 INS38 INS60 INS70 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS25 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS38 INS60 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS25 INS45 INS42 INS45 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS27 INS42 INS42 INS32 INS27 INS27 INS60 INS21 INS45 INS42 INS45 INS42 INS42 INS42 INS33 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42