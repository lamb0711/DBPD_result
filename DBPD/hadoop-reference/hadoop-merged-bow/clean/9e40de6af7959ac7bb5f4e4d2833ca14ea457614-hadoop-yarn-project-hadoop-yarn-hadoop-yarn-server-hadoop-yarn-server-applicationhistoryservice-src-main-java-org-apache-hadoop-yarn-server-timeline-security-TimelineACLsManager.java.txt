YARN-2446. Augmented Timeline service APIs to start taking in domains as a parameter while posting entities and events. Contributed by Zhijie Shen.

-import java.util.Set;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.commons.collections.map.LRUMap;
-import org.apache.hadoop.yarn.api.records.timeline.TimelineEntity;
+import org.apache.hadoop.security.authorize.AccessControlList;
+import org.apache.hadoop.yarn.api.records.ApplicationAccessType;
+import org.apache.hadoop.yarn.api.records.timeline.TimelineEntity;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
-import org.apache.hadoop.yarn.server.timeline.TimelineStore.SystemFilter;
+import org.apache.hadoop.yarn.server.timeline.TimelineStore;
+import org.apache.hadoop.yarn.util.StringHelper;
+  private static final int DOMAIN_ACCESS_ENTRY_CACHE_SIZE = 100;
+  private Map<String, AccessControlListExt> aclExts;
+  private TimelineStore store;
+  @SuppressWarnings("unchecked")
+    aclExts = Collections.synchronizedMap(
+        new LRUMap(DOMAIN_ACCESS_ENTRY_CACHE_SIZE));
+  }
+
+  public void setTimelineStore(TimelineStore store) {
+    this.store = store;
+  }
+
+  private AccessControlListExt loadDomainFromTimelineStore(
+      String domainId) throws IOException {
+    if (store == null) {
+      return null;
+    }
+    TimelineDomain domain = store.getDomain(domainId);
+    if (domain == null) {
+      return null;
+    } else {
+      return putDomainIntoCache(domain);
+    }
+  }
+
+  public void replaceIfExist(TimelineDomain domain) {
+    if (aclExts.containsKey(domain.getId())) {
+      putDomainIntoCache(domain);
+    }
+  }
+
+  private AccessControlListExt putDomainIntoCache(
+      TimelineDomain domain) {
+    Map<ApplicationAccessType, AccessControlList> acls
+    = new HashMap<ApplicationAccessType, AccessControlList>(2);
+    acls.put(ApplicationAccessType.VIEW_APP,
+        new AccessControlList(StringHelper.cjoin(domain.getReaders())));
+    acls.put(ApplicationAccessType.MODIFY_APP,
+        new AccessControlList(StringHelper.cjoin(domain.getWriters())));
+    AccessControlListExt aclExt =
+        new AccessControlListExt(domain.getOwner(), acls);
+    aclExts.put(domain.getId(), aclExt);
+    return aclExt;
+      ApplicationAccessType applicationAccessType,
-    Set<Object> values =
-        entity.getPrimaryFilters().get(
-            SystemFilter.ENTITY_OWNER.toString());
-    if (values == null || values.size() != 1) {
-      throw new YarnException("Owner information of the timeline entity "
-          + new EntityIdentifier(entity.getEntityId(), entity.getEntityType())
-          + " is corrupted.");
+    // find domain owner and acls
+    AccessControlListExt aclExt = aclExts.get(entity.getDomainId());
+    if (aclExt == null) {
+      aclExt = loadDomainFromTimelineStore(entity.getDomainId());
-    String owner = values.iterator().next().toString();
-    // TODO: Currently we just check the user is the admin or the timeline
-    // entity owner. In the future, we need to check whether the user is in the
-    // allowed user/group list
+    if (aclExt == null) {
+      throw new YarnException("Domain information of the timeline entity "
+          + new EntityIdentifier(entity.getEntityId(), entity.getEntityType())
+          + " doesn't exist.");
+    }
+    String owner = aclExt.owner;
+    AccessControlList domainACL = aclExt.acls.get(applicationAccessType);
+    if (domainACL == null) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("ACL not found for access-type " + applicationAccessType
+            + " for domain " + entity.getDomainId() + " owned by "
+            + owner + ". Using default ["
+            + YarnConfiguration.DEFAULT_YARN_APP_ACL + "]");
+      }
+      domainACL =
+          new AccessControlList(YarnConfiguration.DEFAULT_YARN_APP_ACL);
+    }
+
-            callerUGI.getShortUserName().equals(owner))) {
+            callerUGI.getShortUserName().equals(owner) ||
+            domainACL.isUserAllowed(callerUGI))) {
+  private static class AccessControlListExt {
+    private String owner;
+    private Map<ApplicationAccessType, AccessControlList> acls;
+
+    public AccessControlListExt(
+        String owner, Map<ApplicationAccessType, AccessControlList> acls) {
+      this.owner = owner;
+      this.acls = acls;
+    }
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS79 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS44 INS83 INS83 INS42 INS23 INS23 INS31 INS42 INS34 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS45 INS21 INS43 INS42 INS21 INS42 MOV43 INS42 INS42 INS25 INS60 INS25 INS43 INS42 INS25 INS42 INS43 INS42 INS60 INS21 INS21 INS60 INS21 INS41 INS43 INS42 INS60 INS25 INS60 INS60 INS25 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS7 INS42 INS7 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS42 INS32 INS8 INS42 INS74 INS59 INS32 INS32 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS42 INS32 INS22 INS42 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS42 INS32 INS21 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS14 INS42 INS42 INS40 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 UPD42 MOV42 MOV33 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS33 INS25 INS21 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS7 INS7 INS42 INS42 INS14 INS52 INS42 INS33 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS34 INS43 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 INS7 UPD40 MOV40 UPD42 MOV42 INS42 INS32 INS8 INS7 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 INS21 INS42 INS14 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD45 UPD45 INS32 INS43 INS40 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS40 INS45 UPD42 MOV42 UPD42 MOV42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL32 DEL59 DEL60 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60