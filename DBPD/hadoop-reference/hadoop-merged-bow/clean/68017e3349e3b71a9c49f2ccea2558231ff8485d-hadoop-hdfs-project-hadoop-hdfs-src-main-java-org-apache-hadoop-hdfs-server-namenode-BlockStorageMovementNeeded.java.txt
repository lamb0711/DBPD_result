HDFS-12310: [SPS]: Provide an option to track the status of in progress requests. Contributed by Surendra Singh Lilhore.

+import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants.StoragePolicySatisfyPathStatus;
+import org.apache.hadoop.util.Time;
+  private final Map<Long, StoragePolicySatisfyPathStatusInfo> spsStatus =
+      new ConcurrentHashMap<>();
+
+  // Amount of time to cache the SUCCESS status of path before turning it to
+  // NOT_AVAILABLE.
+  private static long statusClearanceElapsedTimeMs = 300000;
+
+    spsStatus.put(trackInfo.getStartId(),
+        new StoragePolicySatisfyPathStatusInfo(
+            StoragePolicySatisfyPathStatus.IN_PROGRESS));
+    spsStatus.put(id, new StoragePolicySatisfyPathStatusInfo(
+        StoragePolicySatisfyPathStatus.PENDING));
+        markSuccess(startId);
+            markSuccess(startId);
+      markSuccess(trackInfo.getStartId());
+   * Mark inode status as SUCCESS in map.
+   */
+  private void markSuccess(long startId){
+    StoragePolicySatisfyPathStatusInfo spsStatusInfo =
+        spsStatus.get(startId);
+    if (spsStatusInfo == null) {
+      spsStatusInfo = new StoragePolicySatisfyPathStatusInfo();
+      spsStatus.put(startId, spsStatusInfo);
+    }
+    spsStatusInfo.setSuccess();
+  }
+
+  /**
+      long lastStatusCleanTime = 0;
+                  spsStatus.put(startINodeId,
+                      new StoragePolicySatisfyPathStatusInfo(
+                          StoragePolicySatisfyPathStatus.IN_PROGRESS));
+                  markSuccess(startInode.getId());
+            //Clear the SPS status if status is in SUCCESS more than 5 min.
+            if (Time.monotonicNow()
+                - lastStatusCleanTime > statusClearanceElapsedTimeMs) {
+              lastStatusCleanTime = Time.monotonicNow();
+              cleanSpsStatus();
+            }
+    private synchronized void cleanSpsStatus() {
+      for (Iterator<Entry<Long, StoragePolicySatisfyPathStatusInfo>> it =
+          spsStatus.entrySet().iterator(); it.hasNext();) {
+        Entry<Long, StoragePolicySatisfyPathStatusInfo> entry = it.next();
+        if (entry.getValue().canRemove()) {
+          it.remove();
+        }
+      }
+    }
+
+
+  /**
+   * Represent the file/directory block movement status.
+   */
+  static class StoragePolicySatisfyPathStatusInfo {
+    private StoragePolicySatisfyPathStatus status =
+        StoragePolicySatisfyPathStatus.NOT_AVAILABLE;
+    private long lastStatusUpdateTime;
+
+    StoragePolicySatisfyPathStatusInfo() {
+      this.lastStatusUpdateTime = 0;
+    }
+
+    StoragePolicySatisfyPathStatusInfo(StoragePolicySatisfyPathStatus status) {
+      this.status = status;
+      this.lastStatusUpdateTime = 0;
+    }
+
+    private void setSuccess() {
+      this.status = StoragePolicySatisfyPathStatus.SUCCESS;
+      this.lastStatusUpdateTime = Time.monotonicNow();
+    }
+
+    private StoragePolicySatisfyPathStatus getStatus() {
+      return status;
+    }
+
+    /**
+     * Return true if SUCCESS status cached more then 5 min.
+     */
+    private boolean canRemove() {
+      return StoragePolicySatisfyPathStatus.SUCCESS == status
+          && (Time.monotonicNow()
+              - lastStatusUpdateTime) > statusClearanceElapsedTimeMs;
+    }
+  }
+
+  public StoragePolicySatisfyPathStatus getStatus(long id) {
+    StoragePolicySatisfyPathStatusInfo spsStatusInfo = spsStatus.get(id);
+    if(spsStatusInfo == null){
+      return StoragePolicySatisfyPathStatus.NOT_AVAILABLE;
+    }
+    return spsStatusInfo.getStatus();
+  }
+
+  @VisibleForTesting
+  public static void setStatusClearanceElapsedTimeMs(
+      long statusClearanceElapsedTimeMs) {
+    BlockStorageMovementNeeded.statusClearanceElapsedTimeMs =
+        statusClearanceElapsedTimeMs;
+  }
+
+  @VisibleForTesting
+  public static long getStatusClearanceElapsedTimeMs() {
+    return statusClearanceElapsedTimeMs;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS55 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS31 INS29 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS83 INS39 INS42 INS8 INS43 INS43 INS43 INS42 INS14 INS42 INS34 INS21 INS21 INS65 INS39 INS42 INS60 INS25 INS21 INS83 INS83 INS39 INS42 INS8 INS65 INS83 INS43 INS59 INS83 INS39 INS59 INS42 INS8 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS39 INS42 INS60 INS25 INS41 INS42 INS39 INS42 INS21 INS42 INS41 INS42 INS42 INS42 INS74 INS32 INS32 INS66 INS43 INS59 INS27 INS8 INS32 INS60 INS24 INS66 INS42 INS42 INS40 INS42 INS21 INS43 INS42 INS21 INS21 INS21 INS21 INS42 INS41 INS65 INS41 INS43 INS59 INS27 INS8 INS32 INS7 INS42 INS43 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS14 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS39 INS59 INS58 INS32 INS8 INS7 INS42 INS7 INS7 INS7 INS7 INS42 INS66 INS27 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS40 INS43 INS40 INS32 INS42 INS42 INS42 INS7 INS32 INS42 INS34 INS74 INS59 INS42 INS42 INS60 INS25 INS22 INS34 INS22 INS42 INS22 INS34 INS22 INS40 INS22 INS32 INS27 INS27 INS42 INS42 INS42 INS40 INS42 INS42 INS21 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS32 INS74 INS59 INS32 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS42 INS36 INS42 INS32 INS42 INS42 INS43 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS32 INS42 INS21 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS25 INS42 INS42 INS42 INS42 INS21 INS27 INS8 INS32 INS27 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS7 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS32 INS32 INS42 INS42 INS42 INS14 INS42 INS32 INS43 INS40 INS42 INS42 INS42