HDDS-1234. Iterate the OM DB snapshot and populate the recon container DB. Contributed by Aravindan Vijayan.

-import static org.apache.commons.compress.utils.CharsetNames.UTF_8;
+import static org.apache.hadoop.ozone.recon.ReconConstants.CONTAINER_KEY_TABLE;
+import java.io.File;
-import java.io.UnsupportedEncodingException;
-import java.nio.ByteBuffer;
-import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.hdds.conf.OzoneConfiguration;
-import org.apache.hadoop.utils.MetaStoreIterator;
-import org.apache.hadoop.utils.MetadataStore;
+import org.apache.hadoop.utils.db.DBStore;
+import org.apache.hadoop.utils.db.Table;
+import org.apache.hadoop.utils.db.Table.KeyValue;
+import org.apache.hadoop.utils.db.TableIterator;
-import com.google.common.primitives.Longs;
-
-  private final static String KEY_DELIMITER = "_";
+
+  private Table<ContainerKeyPrefix, Integer> containerKeyTable;
-  private MetadataStore containerDBStore;
+  private OzoneConfiguration configuration;
+
+  @Inject
+  private DBStore containerDbStore;
+
+  @Inject
+  public ContainerDBServiceProviderImpl(DBStore dbStore) {
+    try {
+      this.containerKeyTable = dbStore.getTable(CONTAINER_KEY_TABLE,
+          ContainerKeyPrefix.class, Integer.class);
+    } catch (IOException e) {
+      LOG.error("Unable to create Container Key Table. " + e);
+    }
+  }
+
+  /**
+   * Initialize a new container DB instance, getting rid of the old instance
+   * and then storing the passed in container prefix counts into the created
+   * DB instance.
+   * @param containerKeyPrefixCounts Map of containerId, key-prefix tuple to
+   * @throws IOException
+   */
+  @Override
+  public void initNewContainerDB(Map<ContainerKeyPrefix, Integer>
+                                     containerKeyPrefixCounts)
+      throws IOException {
+
+    File oldDBLocation = containerDbStore.getDbLocation();
+    containerDbStore = ReconContainerDBProvider.getNewDBStore(configuration);
+    containerKeyTable = containerDbStore.getTable(CONTAINER_KEY_TABLE,
+        ContainerKeyPrefix.class, Integer.class);
+
+    if (oldDBLocation.exists()) {
+      LOG.info("Cleaning up old Recon Container DB at {}.",
+          oldDBLocation.getAbsolutePath());
+      FileUtils.deleteQuietly(oldDBLocation);
+    }
+    for (Map.Entry<ContainerKeyPrefix, Integer> entry :
+        containerKeyPrefixCounts.entrySet()) {
+      containerKeyTable.put(entry.getKey(), entry.getValue());
+    }
+  }
-    byte[] containerIdBytes = Longs.toByteArray(containerKeyPrefix
-        .getContainerId());
-    byte[] keyPrefixBytes = (KEY_DELIMITER + containerKeyPrefix.getKeyPrefix())
-        .getBytes(UTF_8);
-    byte[] dbKey = ArrayUtils.addAll(containerIdBytes, keyPrefixBytes);
-    byte[] dbValue = ByteBuffer.allocate(Integer.BYTES).putInt(count).array();
-    containerDBStore.put(dbKey, dbValue);
+    containerKeyTable.put(containerKeyPrefix, count);
-    byte[] containerIdBytes = Longs.toByteArray(containerKeyPrefix
-        .getContainerId());
-    byte[] keyPrefixBytes = (KEY_DELIMITER + containerKeyPrefix
-        .getKeyPrefix()).getBytes(UTF_8);
-    byte[] dbKey = ArrayUtils.addAll(containerIdBytes, keyPrefixBytes);
-    byte[] dbValue = containerDBStore.get(dbKey);
-    return ByteBuffer.wrap(dbValue).getInt();
+    Integer count =  containerKeyTable.get(containerKeyPrefix);
+    return count == null ? Integer.valueOf(0) : count;
-  public Map<String, Integer> getKeyPrefixesForContainer(long containerId) {
+  public Map<ContainerKeyPrefix, Integer> getKeyPrefixesForContainer(
+      long containerId) throws IOException {
-    Map<String, Integer> prefixes = new HashMap<>();
-    MetaStoreIterator<MetadataStore.KeyValue> containerIterator =
-        containerDBStore.iterator();
-    byte[] containerIdPrefixBytes = Longs.toByteArray(containerId);
-    containerIterator.prefixSeek(containerIdPrefixBytes);
+    Map<ContainerKeyPrefix, Integer> prefixes = new HashMap<>();
+    TableIterator<ContainerKeyPrefix, ? extends KeyValue<ContainerKeyPrefix,
+        Integer>> containerIterator = containerKeyTable.iterator();
+    containerIterator.seek(new ContainerKeyPrefix(containerId));
-      MetadataStore.KeyValue keyValue = containerIterator.next();
-      byte[] containerKey = keyValue.getKey();
-      long containerIdFromDB = ByteBuffer.wrap(ArrayUtils.subarray(
-          containerKey, 0, Long.BYTES)).getLong();
-
+      KeyValue<ContainerKeyPrefix, Integer> keyValue = containerIterator.next();
+      ContainerKeyPrefix containerKeyPrefix = keyValue.getKey();
-      if (containerIdFromDB == containerId) {
-        byte[] keyPrefix = ArrayUtils.subarray(containerKey,
-            containerIdPrefixBytes.length + 1,
-            containerKey.length);
-        try {
-          prefixes.put(new String(keyPrefix, UTF_8),
-              ByteBuffer.wrap(keyValue.getValue()).getInt());
-        } catch (UnsupportedEncodingException e) {
-          LOG.warn("Unable to read key prefix from container DB.", e);
+      if (containerKeyPrefix.getContainerId() == containerId) {
+        if (StringUtils.isNotEmpty(containerKeyPrefix.getKeyPrefix())) {
+          prefixes.put(new ContainerKeyPrefix(containerId,
+              containerKeyPrefix.getKeyPrefix(),
+              containerKeyPrefix.getKeyVersion()),
+              keyValue.getValue());
+        } else {
+          LOG.warn("Null key prefix returned for containerId = " + containerId);

MOV26 MOV26 MOV26 INS26 INS26 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 UPD40 UPD40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 MOV83 INS74 INS59 MOV78 UPD83 MOV83 UPD43 MOV43 MOV59 INS78 UPD43 INS78 MOV83 UPD42 MOV42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 MOV29 MOV78 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 MOV29 MOV78 INS83 MOV43 INS42 MOV44 MOV43 INS8 UPD74 MOV74 INS42 INS43 INS43 INS43 INS43 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS43 INS42 INS54 INS65 INS65 INS65 INS42 INS74 INS42 INS42 INS60 INS21 MOV21 INS25 INS70 INS21 MOV60 MOV41 UPD43 UPD42 MOV42 INS42 INS42 INS42 INS42 INS8 INS12 INS66 INS66 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS43 INS59 INS7 INS7 INS32 INS8 INS44 INS32 INS8 INS32 INS43 INS16 UPD42 INS74 UPD74 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS74 INS42 INS42 INS42 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS27 INS32 INS42 MOV43 INS43 INS43 UPD43 INS43 INS76 UPD42 INS14 INS7 INS43 INS42 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS57 INS57 INS32 INS32 INS43 INS43 MOV43 INS32 UPD42 UPD42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS34 INS42 INS42 UPD42 INS42 INS74 UPD42 INS43 INS42 INS74 INS43 INS22 INS32 INS42 INS32 INS43 INS43 INS42 INS42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS42 INS32 INS32 UPD43 MOV43 INS43 INS43 INS42 INS43 INS43 INS43 INS42 UPD42 MOV32 INS25 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS57 INS57 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS8 INS8 INS43 INS43 INS45 INS42 UPD42 UPD42 MOV32 MOV21 MOV21 INS42 INS42 INS14 MOV32 INS27 UPD43 MOV43 UPD42 MOV42 MOV32 INS32 INS45 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 DEL45 DEL83 DEL23 DEL42 DEL42 DEL32 DEL39 DEL85 DEL5 DEL42 DEL32 DEL42 DEL32 DEL39 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL40 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL31 DEL83 DEL42 DEL39 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL27 DEL36 DEL32 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31 DEL43 DEL74 DEL42 DEL40 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL40 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL42 DEL14 DEL42 DEL32 DEL32 DEL45 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL40 DEL34 DEL27 DEL40 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54