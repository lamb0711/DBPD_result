YARN-2676. Enhanced Timeline auth-filter to support proxy users. Contributed by Zhijie Shen.

+import java.lang.reflect.UndeclaredThrowableException;
+import java.security.PrivilegedExceptionAction;
-import java.util.HashMap;
-import java.util.Map;
-import org.apache.hadoop.io.Text;
-import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
-import org.apache.hadoop.security.authentication.client.AuthenticationException;
+import org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticatedURL;
+import org.apache.hadoop.security.token.delegation.web.DelegationTokenAuthenticator;
+import org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticator;
+import org.apache.hadoop.security.token.delegation.web.PseudoDelegationTokenAuthenticator;
-import org.apache.hadoop.yarn.security.client.TimelineDelegationTokenSelector;
-import org.apache.hadoop.yarn.util.timeline.TimelineUtils;
-  private static final String URL_PARAM_USER_NAME = "user.name";
+  private ConnectionConfigurator connConfigurator;
+  private DelegationTokenAuthenticator authenticator;
+  private DelegationTokenAuthenticatedURL.Token token;
-  private KerberosAuthenticatedURLConnectionFactory urlFactory;
-      ConnectionConfigurator connConfigurator = newConnConfigurator(conf);
+      connConfigurator = newConnConfigurator(conf);
-        TimelineAuthenticator.setStaticConnectionConfigurator(connConfigurator);
-        urlFactory = new KerberosAuthenticatedURLConnectionFactory(connConfigurator);
-        client = new Client(new URLConnectionClientHandler(urlFactory), cc);
+        authenticator = new KerberosDelegationTokenAuthenticator();
-        client = new Client(new URLConnectionClientHandler(
-            new PseudoAuthenticatedURLConnectionFactory(connConfigurator)), cc);
+        authenticator = new PseudoDelegationTokenAuthenticator();
+      authenticator.setConnectionConfigurator(connConfigurator);
+      client = new Client(new URLConnectionClientHandler(
+          new TimelineURLConnectionFactory()), cc);
+      token = new DelegationTokenAuthenticatedURL.Token();
+
-      if (UserGroupInformation.isSecurityEnabled()) {
-        urlFactory.setService(TimelineUtils.buildTimelineTokenService(conf));
-      }
+  @SuppressWarnings("unchecked")
-      String renewer) throws IOException, YarnException {
-    return TimelineAuthenticator.getDelegationToken(resURI.toURL(),
-        urlFactory.token, renewer);
+      final String renewer) throws IOException, YarnException {
+    boolean isProxyAccess =
+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()
+        == UserGroupInformation.AuthenticationMethod.PROXY;
+    UserGroupInformation callerUGI = isProxyAccess ?
+        UserGroupInformation.getCurrentUser().getRealUser()
+        : UserGroupInformation.getCurrentUser();
+    final String doAsUser = isProxyAccess ?
+        UserGroupInformation.getCurrentUser().getShortUserName() : null;
+    try {
+      return callerUGI.doAs(
+          new PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>>() {
+        @Override
+        public Token<TimelineDelegationTokenIdentifier> run() throws Exception {
+          DelegationTokenAuthenticatedURL authUrl =
+              new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);
+          return (Token) authUrl.getDelegationToken(
+              resURI.toURL(), token, renewer, doAsUser);
+        }
+      });
+    } catch (UndeclaredThrowableException e) {
+      throw new IOException(e.getCause());
+    } catch (InterruptedException e) {
+      throw new IOException(e);
+    }
-  private static class PseudoAuthenticatedURLConnectionFactory
-    implements HttpURLConnectionFactory {
-
-    private ConnectionConfigurator connConfigurator;
-
-    public PseudoAuthenticatedURLConnectionFactory(
-        ConnectionConfigurator connConfigurator) {
-      this.connConfigurator = connConfigurator;
-    }
-
-    @Override
-    public HttpURLConnection getHttpURLConnection(URL url) throws IOException {
-      Map<String, String> params = new HashMap<String, String>();
-      params.put(URL_PARAM_USER_NAME,
-          UserGroupInformation.getCurrentUser().getShortUserName());
-      url = TimelineAuthenticator.appendParams(url, params);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("URL with delegation token: " + url);
-      }
-      return connConfigurator.configure((HttpURLConnection) url.openConnection());
-    }
-
-  }
-  private static class KerberosAuthenticatedURLConnectionFactory
+  private class TimelineURLConnectionFactory
-    private AuthenticatedURL.Token token;
-    private TimelineAuthenticator authenticator;
-    private Token<TimelineDelegationTokenIdentifier> dToken;
-    private Text service;
-    private ConnectionConfigurator connConfigurator;
-
-    public KerberosAuthenticatedURLConnectionFactory(
-        ConnectionConfigurator connConfigurator) {
-      token = new AuthenticatedURL.Token();
-      authenticator = new TimelineAuthenticator();
-      this.connConfigurator = connConfigurator;
-    }
-
-    public HttpURLConnection getHttpURLConnection(URL url) throws IOException {
+    public HttpURLConnection getHttpURLConnection(final URL url) throws IOException {
+      boolean isProxyAccess =
+          UserGroupInformation.getCurrentUser().getAuthenticationMethod()
+          == UserGroupInformation.AuthenticationMethod.PROXY;
+      UserGroupInformation callerUGI = isProxyAccess ?
+          UserGroupInformation.getCurrentUser().getRealUser()
+          : UserGroupInformation.getCurrentUser();
+      final String doAsUser = isProxyAccess ?
+          UserGroupInformation.getCurrentUser().getShortUserName() : null;
-        if (dToken == null) {
-          //TODO: need to take care of the renew case
-          dToken = selectToken();
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Timeline delegation token: " + dToken.toString());
+        return callerUGI.doAs(new PrivilegedExceptionAction<HttpURLConnection>() {
+          @Override
+          public HttpURLConnection run() throws Exception {
+            return new DelegationTokenAuthenticatedURL(
+                authenticator, connConfigurator).openConnection(url, token,
+                doAsUser);
-        }
-        if (dToken != null) {
-          Map<String, String> params = new HashMap<String, String>();
-          TimelineAuthenticator.injectDelegationToken(params, dToken);
-          url = TimelineAuthenticator.appendParams(url, params);
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("URL with delegation token: " + url);
-          }
-        }
-        return new AuthenticatedURL(
-            authenticator, connConfigurator).openConnection(url, token);
-      } catch (AuthenticationException e) {
-        LOG.error("Authentication failed when openning connection [" + url
-            + "] with token [" + token + "].", e);
+        });
+      } catch (UndeclaredThrowableException e) {
+        throw new IOException(e.getCause());
+      } catch (InterruptedException e) {
-    private Token<TimelineDelegationTokenIdentifier> selectToken() {
-      UserGroupInformation ugi;
-      try {
-        ugi = UserGroupInformation.getCurrentUser();
-      } catch (IOException e) {
-        String msg = "Error when getting the current user";
-        LOG.error(msg, e);
-        throw new YarnRuntimeException(msg, e);
-      }
-      TimelineDelegationTokenSelector tokenSelector =
-          new TimelineDelegationTokenSelector();
-      return tokenSelector.selectToken(
-          service, ugi.getCredentials().getAllTokens());
-    }
-
-    public void setService(Text service) {
-      this.service = service;
-    }
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV23 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 MOV23 INS23 INS31 INS55 UPD43 MOV59 MOV83 UPD43 MOV43 MOV59 INS79 INS78 MOV83 MOV74 MOV42 MOV44 MOV43 MOV43 INS8 INS83 INS42 MOV43 INS31 UPD42 INS40 INS42 INS45 INS42 INS83 MOV43 INS60 INS60 INS60 INS54 MOV78 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS39 INS59 INS43 INS59 INS83 MOV43 INS59 INS8 INS12 INS12 INS83 INS60 INS60 INS60 INS54 MOV21 INS25 INS21 MOV21 MOV21 INS42 INS27 UPD42 MOV42 INS42 INS16 INS42 INS16 INS41 INS44 INS8 INS44 INS8 INS39 INS59 MOV43 INS59 INS83 MOV43 INS59 INS8 INS12 INS12 INS7 MOV32 INS8 INS8 INS32 INS7 INS32 INS40 INS42 INS32 INS32 INS42 INS32 INS33 INS32 INS43 INS42 INS53 UPD43 MOV43 UPD42 MOV42 INS53 INS42 INS27 INS42 INS16 INS42 INS16 INS41 MOV44 MOV8 INS44 MOV8 INS42 MOV32 MOV21 MOV21 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 UPD42 MOV42 INS14 UPD42 INS14 INS32 INS40 INS42 INS32 MOV32 INS42 MOV32 INS33 INS32 UPD43 UPD43 MOV43 UPD42 MOV42 INS43 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD74 MOV74 INS1 MOV43 INS32 UPD43 MOV43 INS42 INS32 INS42 INS32 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 UPD42 UPD42 INS14 INS40 UPD43 MOV74 INS31 INS42 INS42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD74 MOV74 INS1 MOV43 INS32 UPD43 UPD43 MOV43 UPD43 UPD42 MOV78 INS83 MOV74 INS42 INS43 INS8 UPD43 MOV43 INS31 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS60 INS41 UPD42 MOV78 INS83 MOV43 INS42 INS43 INS8 INS43 INS59 INS11 INS42 MOV41 INS42 INS42 INS14 INS43 INS32 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 DEL40 DEL26 DEL83 DEL83 DEL42 DEL45 DEL59 DEL42 DEL42 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL8 DEL25 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL32 DEL21 DEL83 DEL83 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL11 DEL32 DEL41 DEL8 DEL31 DEL55 DEL83 DEL83 DEL42 DEL83 DEL40 DEL43 DEL23 DEL83 DEL42 DEL43 DEL23 DEL83 DEL42 DEL59 DEL23 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL44 DEL42 DEL40 DEL43 DEL14 DEL7 DEL21 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL32 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL42 DEL44 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55