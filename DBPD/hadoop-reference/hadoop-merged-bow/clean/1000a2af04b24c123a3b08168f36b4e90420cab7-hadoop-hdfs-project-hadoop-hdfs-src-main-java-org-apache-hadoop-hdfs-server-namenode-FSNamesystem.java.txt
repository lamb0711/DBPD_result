HDFS-10899. Add functionality to re-encrypt EDEKs.

+import org.apache.hadoop.crypto.key.KeyProvider.KeyVersion;
+import org.apache.hadoop.hdfs.protocol.ZoneReencryptionStatus;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants.ReencryptAction;
+      dir.ezManager.startReencryptThreads();
+
+      if (dir != null) {
+        dir.ezManager.stopReencryptThread();
+      }
+  void reencryptEncryptionZone(final String zone, final ReencryptAction action,
+      final boolean logRetryCache) throws IOException {
+    boolean success = false;
+    try {
+      Preconditions.checkNotNull(zone, "zone is null.");
+      checkSuperuserPrivilege();
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("NameNode in safemode, cannot " + action
+          + " re-encryption on zone " + zone);
+      reencryptEncryptionZoneInt(zone, action, logRetryCache);
+      success = true;
+    } finally {
+      logAuditEvent(success, action + "reencryption", zone, null, null);
+    }
+  }
+
+  BatchedListEntries<ZoneReencryptionStatus> listReencryptionStatus(
+      final long prevId) throws IOException {
+    final String operationName = "listReencryptionStatus";
+    boolean success = false;
+    checkSuperuserPrivilege();
+    checkOperation(OperationCategory.READ);
+    readLock();
+    try {
+      checkSuperuserPrivilege();
+      checkOperation(OperationCategory.READ);
+      final BatchedListEntries<ZoneReencryptionStatus> ret =
+          FSDirEncryptionZoneOp.listReencryptionStatus(dir, prevId);
+      success = true;
+      return ret;
+    } finally {
+      readUnlock(operationName);
+      logAuditEvent(success, operationName, null);
+    }
+  }
+
+  private void reencryptEncryptionZoneInt(final String zone,
+      final ReencryptAction action, final boolean logRetryCache)
+      throws IOException {
+    if (getProvider() == null) {
+      throw new IOException("No key provider configured, re-encryption "
+          + "operation is rejected");
+    }
+    FSPermissionChecker pc = getPermissionChecker();
+    // get keyVersionName out of the lock. This keyVersionName will be used
+    // as the target keyVersion for the entire re-encryption.
+    // This means all edek's keyVersion will be compared with this one, and
+    // kms is only contacted if the edek's keyVersion is different.
+    final KeyVersion kv =
+        FSDirEncryptionZoneOp.getLatestKeyVersion(dir, zone, pc);
+    provider.invalidateCache(kv.getName());
+    writeLock();
+    try {
+      checkSuperuserPrivilege();
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode(
+          "NameNode in safemode, cannot " + action + " re-encryption on zone "
+              + zone);
+      switch (action) {
+      case START:
+        FSDirEncryptionZoneOp
+            .reencryptEncryptionZone(dir, zone, kv.getVersionName(),
+                logRetryCache);
+        break;
+      case CANCEL:
+        FSDirEncryptionZoneOp
+            .cancelReencryptEncryptionZone(dir, zone, logRetryCache);
+        break;
+      default:
+        throw new IOException(
+            "Re-encryption action " + action + " is not supported");
+      }
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS74 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS60 INS54 INS43 INS43 INS83 INS39 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS54 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS25 INS60 INS60 INS21 INS21 INS54 INS21 INS42 INS42 INS39 INS59 INS8 INS8 INS42 INS42 INS83 INS43 INS59 INS39 INS59 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS27 INS8 INS43 INS59 INS83 INS43 INS59 INS32 INS32 INS8 INS8 INS32 INS21 INS25 INS42 INS9 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS40 INS42 INS21 INS21 INS60 INS21 INS41 INS21 INS21 INS32 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS21 INS21 INS50 INS21 INS32 INS42 INS32 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS7 INS32 INS32 INS32 INS83 INS74 INS59 INS7 INS42 INS32 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS32 INS42 INS40 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS27 INS42 INS33 INS33 INS42 INS42 INS40 INS43 INS43 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS27 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS42 INS32 INS14 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS40 INS42 INS42 INS42 INS42 INS45 INS42 INS45