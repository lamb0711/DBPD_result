YARN-5587. Add support for resource profiles. (vvasudev via asuresh)

+import org.apache.hadoop.yarn.api.records.ProfileCapability;
+    private String resourceProfile;
+    /**
+     * Instantiates a {@link ContainerRequest} with the given constraints and
+     * locality relaxation enabled.
+     *
+     * @param capability
+     *          The {@link ProfileCapability} to be requested for each container.
+     * @param nodes
+     *          Any hosts to request that the containers are placed on.
+     * @param racks
+     *          Any racks to request that the containers are placed on. The
+     *          racks corresponding to any hosts requested will be automatically
+     *          added to this list.
+     * @param priority
+     *          The priority at which to request the containers. Higher
+     *          priorities have lower numerical values.
+     */
+    public ContainerRequest(ProfileCapability capability, String[] nodes,
+        String[] racks, Priority priority) {
+      this(capability, nodes, racks, priority, 0, true, null);
+    }
+     *          The {@link ProfileCapability} to be requested for each container.
+     * @param nodes
+     *          Any hosts to request that the containers are placed on.
+     * @param racks
+     *          Any racks to request that the containers are placed on. The
+     *          racks corresponding to any hosts requested will be automatically
+     *          added to this list.
+     * @param priority
+     *          The priority at which to request the containers. Higher
+     *          priorities have lower numerical values.
+     * @param relaxLocality
+     *          If true, containers for this request may be assigned on hosts
+     *          and racks other than the ones explicitly requested.
+     */
+    public ContainerRequest(ProfileCapability capability, String[] nodes,
+        String[] racks, Priority priority, boolean relaxLocality) {
+      this(capability, nodes, racks, priority, 0, relaxLocality, null);
+    }
+
+    /**
+     * Instantiates a {@link ContainerRequest} with the given constraints.
+     *
+     * @param capability
-          
+
+    public ContainerRequest(ProfileCapability capability, String[] nodes,
+        String[] racks, Priority priority, long allocationRequestId,
+        boolean relaxLocality, String nodeLabelsExpression) {
+      this(capability, nodes, racks, priority, allocationRequestId,
+          relaxLocality, nodeLabelsExpression,
+          ExecutionTypeRequest.newInstance());
+    }
+
-     * 
+     *
+      this(capability, nodes, racks, priority, allocationRequestId,
+          relaxLocality, nodeLabelsExpression, executionTypeRequest,
+          ProfileCapability.DEFAULT_PROFILE);
+    }
+
+    public ContainerRequest(ProfileCapability capability, String[] nodes,
+        String[] racks, Priority priority, long allocationRequestId,
+        boolean relaxLocality, String nodeLabelsExpression,
+        ExecutionTypeRequest executionTypeRequest) {
+      this(capability.getProfileCapabilityOverride(), nodes, racks, priority,
+          allocationRequestId, relaxLocality, nodeLabelsExpression,
+          executionTypeRequest, capability.getProfileName());
+    }
+          
+    /**
+     * Instantiates a {@link ContainerRequest} with the given constraints.
+     * 
+     * @param capability
+     *          The {@link Resource} to be requested for each container.
+     * @param nodes
+     *          Any hosts to request that the containers are placed on.
+     * @param racks
+     *          Any racks to request that the containers are placed on. The
+     *          racks corresponding to any hosts requested will be automatically
+     *          added to this list.
+     * @param priority
+     *          The priority at which to request the containers. Higher
+     *          priorities have lower numerical values.
+     * @param allocationRequestId
+     *          The allocationRequestId of the request. To be used as a tracking
+     *          id to match Containers allocated against this request. Will
+     *          default to 0 if not specified.
+     * @param relaxLocality
+     *          If true, containers for this request may be assigned on hosts
+     *          and racks other than the ones explicitly requested.
+     * @param nodeLabelsExpression
+     *          Set node labels to allocate resource, now we only support
+     *          asking for only a single node label
+     * @param executionTypeRequest
+     *          Set the execution type of the container request.
+     * @param profile
+     *          Set the resource profile for the container request
+     */
+    public ContainerRequest(Resource capability, String[] nodes, String[] racks,
+        Priority priority, long allocationRequestId, boolean relaxLocality,
+        String nodeLabelsExpression,
+        ExecutionTypeRequest executionTypeRequest, String profile) {
+      this.resourceProfile = profile;
+    public String getResourceProfile() {
+      return resourceProfile;
+    }
+
+      sb.append("Resource Profile[").append(resourceProfile).append("]");
+
+  @InterfaceStability.Evolving
+  public List<? extends Collection<T>> getMatchingRequests(
+      Priority priority, String resourceName, ExecutionType executionType,
+      ProfileCapability capability) {
+    throw new UnsupportedOperationException("The sub-class extending" +
+        " AMRMClient is expected to implement this !!");
+  }
+

INS26 INS40 INS31 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 MOV29 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS44 INS83 INS43 INS42 INS8 INS40 INS43 INS76 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS53 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS39 INS42 INS17 INS43 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS17 INS43 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS17 INS43 INS42 INS5 INS42 INS5 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS42 INS41 INS21 INS42 INS74 INS42 INS42 INS42 INS42 INS14 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS34 INS9 INS33 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS43 INS85 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS42 INS43 INS85 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS85 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS43 INS85 INS43 INS85 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS42 INS32 INS43 INS43 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS45 INS45 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS45