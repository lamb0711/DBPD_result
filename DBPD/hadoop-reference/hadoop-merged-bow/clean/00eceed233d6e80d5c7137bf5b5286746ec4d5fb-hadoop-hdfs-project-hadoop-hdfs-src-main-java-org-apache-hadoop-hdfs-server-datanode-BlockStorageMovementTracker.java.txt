HDFS-12570: [SPS]: Refactor Co-ordinator datanode logic to track the block storage movements. Contributed by Rakesh R.

-import java.util.Set;
-import org.apache.hadoop.hdfs.server.datanode.StoragePolicySatisfyWorker.BlockMovementResult;
+import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.server.datanode.StoragePolicySatisfyWorker.BlockMovementAttemptFinished;
-  private final CompletionService<BlockMovementResult> moverCompletionService;
+  private final CompletionService<BlockMovementAttemptFinished> moverCompletionService;
-  // Keeps the information - trackID vs its list of blocks
-  private final Map<Long, List<Future<BlockMovementResult>>> moverTaskFutures;
-  private final Map<Long, List<BlockMovementResult>> movementResults;
+  // Keeps the information - block vs its list of future move tasks
+  private final Map<Block, List<Future<BlockMovementAttemptFinished>>> moverTaskFutures;
+  private final Map<Block, List<BlockMovementAttemptFinished>> movementResults;
-      CompletionService<BlockMovementResult> moverCompletionService,
+      CompletionService<BlockMovementAttemptFinished> moverCompletionService,
-        Future<BlockMovementResult> future = moverCompletionService.take();
+        Future<BlockMovementAttemptFinished> future =
+            moverCompletionService.take();
-          BlockMovementResult result = future.get();
+          BlockMovementAttemptFinished result = future.get();
-          long trackId = result.getTrackId();
-          List<Future<BlockMovementResult>> blocksMoving = moverTaskFutures
-              .get(trackId);
+          Block block = result.getBlock();
+          List<Future<BlockMovementAttemptFinished>> blocksMoving =
+              moverTaskFutures.get(block);
-            LOG.warn("Future task doesn't exist for trackId " + trackId);
+            LOG.warn("Future task doesn't exist for block : {} ", block);
-          List<BlockMovementResult> resultPerTrackIdList =
-              addMovementResultToTrackIdList(result);
+          List<BlockMovementAttemptFinished> resultPerTrackIdList =
+              addMovementResultToBlockIdList(result);
-          if (blocksMoving.isEmpty() || moverTaskFutures.get(trackId) == null) {
+          if (blocksMoving.isEmpty() || moverTaskFutures.get(block) == null) {
-              moverTaskFutures.remove(trackId);
+              moverTaskFutures.remove(block);
-            movementResults.remove(trackId);
+            movementResults.remove(block);
-  private List<BlockMovementResult> addMovementResultToTrackIdList(
-      BlockMovementResult result) {
-    long trackId = result.getTrackId();
-    List<BlockMovementResult> perTrackIdList;
+  private List<BlockMovementAttemptFinished> addMovementResultToBlockIdList(
+      BlockMovementAttemptFinished result) {
+    Block block = result.getBlock();
+    List<BlockMovementAttemptFinished> perBlockIdList;
-      perTrackIdList = movementResults.get(trackId);
-      if (perTrackIdList == null) {
-        perTrackIdList = new ArrayList<>();
-        movementResults.put(trackId, perTrackIdList);
+      perBlockIdList = movementResults.get(block);
+      if (perBlockIdList == null) {
+        perBlockIdList = new ArrayList<>();
+        movementResults.put(block, perBlockIdList);
-      perTrackIdList.add(result);
+      perBlockIdList.add(result);
-    return perTrackIdList;
+    return perBlockIdList;
-   * @param trackID
-   *          tracking Id
+   * @param blockID
+   *          block identifier
-  void addBlock(long trackID, Future<BlockMovementResult> futureTask) {
+  void addBlock(Block block,
+      Future<BlockMovementAttemptFinished> futureTask) {
-      List<Future<BlockMovementResult>> futures = moverTaskFutures
-          .get(Long.valueOf(trackID));
+      List<Future<BlockMovementAttemptFinished>> futures =
+          moverTaskFutures.get(block);
-        moverTaskFutures.put(trackID, futures);
+        moverTaskFutures.put(block, futures);
-   * @return the list of trackIds which are still waiting to complete all the
-   *         scheduled blocks movements.
-   */
-  Set<Long> getInProgressTrackIds() {
-    synchronized (moverTaskFutures) {
-      return moverTaskFutures.keySet();
-    }
-  }
-
-  /**

MOV26 UPD40 UPD40 UPD74 UPD74 UPD74 UPD74 UPD42 UPD43 UPD43 UPD74 UPD43 UPD74 UPD74 UPD43 UPD43 INS43 INS42 UPD74 UPD42 UPD42 UPD74 UPD42 UPD43 UPD43 UPD42 UPD42 INS43 UPD74 UPD42 UPD42 UPD66 INS42 UPD43 UPD43 UPD42 UPD42 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 UPD42 UPD74 UPD74 UPD42 UPD43 UPD42 MOV42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS43 UPD74 UPD74 UPD42 INS42 UPD42 UPD74 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 INS45 INS42 UPD42 UPD42 UPD42 DEL39 DEL45 DEL42 DEL27 DEL39 DEL39 DEL42 DEL42 DEL42 DEL32 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL51 DEL8 DEL31