HDFS-3637. Add support for encrypting the DataTransferProtocol. Contributed by Aaron T. Myers.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370354 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Closeable;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair;
-  private final LinkedListMultimap<SocketAddress, Socket> multimap;
+  private final LinkedListMultimap<SocketAddress, SocketAndStreams> multimap;
-  public synchronized Socket get(SocketAddress remote) {
+  public synchronized SocketAndStreams get(SocketAddress remote) {
-    List<Socket> socklist = multimap.get(remote);
+    List<SocketAndStreams> socklist = multimap.get(remote);
-    Iterator<Socket> iter = socklist.iterator();
+    Iterator<SocketAndStreams> iter = socklist.iterator();
-      Socket candidate = iter.next();
+      SocketAndStreams candidate = iter.next();
-      if (!candidate.isClosed()) {
+      if (!candidate.sock.isClosed()) {
-  public synchronized void put(Socket sock) {
+  public synchronized void put(Socket sock, IOStreamPair ioStreams) {
+    SocketAndStreams s = new SocketAndStreams(sock, ioStreams);
-      IOUtils.closeSocket(sock);
+      s.close();
-    multimap.put(remoteAddr, sock);
+    multimap.put(remoteAddr, new SocketAndStreams(sock, ioStreams));
-    Iterator<Entry<SocketAddress, Socket>> iter =
+    Iterator<Entry<SocketAddress, SocketAndStreams>> iter =
-    Entry<SocketAddress, Socket> entry = iter.next();
+    Entry<SocketAddress, SocketAndStreams> entry = iter.next();
-    Socket sock = entry.getValue();
-    IOUtils.closeSocket(sock);
+    SocketAndStreams s = entry.getValue();
+    s.close();
-    for (Socket sock : multimap.values()) {
-      IOUtils.closeSocket(sock);
+    for (SocketAndStreams s : multimap.values()) {
+      s.close();
+  
+  @InterfaceAudience.Private
+  static class SocketAndStreams implements Closeable {
+    public final Socket sock;
+    public final IOStreamPair ioStreams;
+    
+    public SocketAndStreams(Socket s, IOStreamPair ioStreams) {
+      this.sock = s;
+      this.ioStreams = ioStreams;
+    }
+    
+    @Override
+    public void close() {
+      if (ioStreams != null) { 
+        IOUtils.closeStream(ioStreams.in);
+        IOUtils.closeStream(ioStreams.out);
+      }
+      IOUtils.closeSocket(sock);
+    }
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS55 UPD74 UPD43 INS44 INS78 INS83 INS42 INS43 INS23 INS23 INS31 INS31 UPD43 UPD42 INS43 INS42 INS60 INS40 INS42 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 UPD74 UPD74 INS42 INS43 INS59 UPD74 UPD74 MOV74 INS43 INS42 INS42 INS42 MOV43 INS42 INS43 INS42 INS21 INS21 INS42 INS25 MOV21 UPD43 UPD43 INS42 INS42 INS14 INS14 INS74 UPD43 INS42 UPD42 UPD42 UPD42 UPD43 UPD42 INS21 INS42 INS7 INS7 INS27 INS8 UPD42 UPD42 UPD43 INS43 INS42 INS42 INS43 INS42 INS42 MOV43 MOV43 INS43 UPD42 UPD42 INS32 INS22 INS42 INS22 INS42 INS42 INS33 INS21 INS21 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS40 DEL42 DEL42 DEL42 DEL74 DEL42