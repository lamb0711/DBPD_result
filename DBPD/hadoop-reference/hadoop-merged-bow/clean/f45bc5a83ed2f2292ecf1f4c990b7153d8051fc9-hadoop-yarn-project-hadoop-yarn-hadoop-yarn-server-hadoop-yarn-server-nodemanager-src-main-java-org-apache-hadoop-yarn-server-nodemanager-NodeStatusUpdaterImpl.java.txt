YARN-4738. Notify the RM about the status of OPPORTUNISTIC containers (Konstantinos Karanasos via asuresh)

+import org.apache.hadoop.yarn.api.records.ContainerExitStatus;
+import org.apache.hadoop.yarn.security.ContainerTokenIdentifier;
+import org.apache.hadoop.yarn.server.utils.BuilderUtils;
+
+    // Account for all containers that got killed while they were still queued.
+    pendingCompletedContainers.putAll(getKilledQueuedContainerStatuses());
+
+
-  
+
+  /**
+   * Add to the container statuses the status of the containers that got killed
+   * while they were queued.
+   */
+  private Map<ContainerId, ContainerStatus> getKilledQueuedContainerStatuses() {
+    Map<ContainerId, ContainerStatus> killedQueuedContainerStatuses =
+        new HashMap<>();
+    for (Map.Entry<ContainerTokenIdentifier, String> killedQueuedContainer :
+        this.context.getQueuingContext().
+            getKilledQueuedContainers().entrySet()) {
+      ContainerTokenIdentifier containerTokenId = killedQueuedContainer
+          .getKey();
+      ContainerId containerId = containerTokenId.getContainerID();
+      ContainerStatus containerStatus = BuilderUtils.newContainerStatus(
+          containerId, ContainerState.COMPLETE,
+          killedQueuedContainer.getValue(), ContainerExitStatus.ABORTED,
+          containerTokenId.getResource(), containerTokenId.getExecutionType());
+      ApplicationId applicationId = containerId.getApplicationAttemptId()
+          .getApplicationId();
+      if (isApplicationStopped(applicationId)) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(applicationId + " is completing, " + " remove "
+              + containerId + " from NM context.");
+        }
+        this.context.getQueuingContext().getKilledQueuedContainers()
+            .remove(containerTokenId);
+        killedQueuedContainerStatuses.put(containerId, containerStatus);
+      } else {
+        if (!isContainerRecentlyStopped(containerId)) {
+          killedQueuedContainerStatuses.put(containerId, containerStatus);
+        }
+      }
+      addCompletedContainer(containerId);
+    }
+    return killedQueuedContainerStatuses;
+  }
+
+    Set<ContainerId> removedNullContainers = new HashSet<ContainerId>();
+        removedNullContainers.add(containerId);
+    // Remove null containers from queuing context for killed queued containers.
+    Iterator<ContainerTokenIdentifier> killedQueuedContIter =
+        context.getQueuingContext().getKilledQueuedContainers().keySet().
+            iterator();
+    while (killedQueuedContIter.hasNext()) {
+      if (removedNullContainers.contains(
+          killedQueuedContIter.next().getContainerID())) {
+        killedQueuedContIter.remove();
+      }
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS83 INS74 INS42 INS8 INS21 INS65 INS43 INS43 INS43 INS60 INS70 INS41 INS60 INS60 INS61 INS32 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS74 INS59 INS74 INS59 INS32 INS8 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS32 INS42 INS60 INS60 INS60 INS60 INS25 INS21 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS32 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS32 INS42 INS42 INS74 INS42 INS42 INS32 INS42 INS32 INS8 INS43 INS40 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS25 INS21 INS21 INS25 INS42 INS42 INS43 INS43 INS21 INS32 INS42 INS42 INS42 INS32 INS21 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS40 INS32 INS32 INS32 INS42 INS32 INS8 INS32 INS32 INS38 INS8 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS52 INS42