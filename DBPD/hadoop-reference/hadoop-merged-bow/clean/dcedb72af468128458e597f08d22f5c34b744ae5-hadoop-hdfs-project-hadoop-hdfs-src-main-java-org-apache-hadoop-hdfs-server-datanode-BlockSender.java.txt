Revert "HADOOP-10930. Refactor: Wrap Datanode IO related operations. Contributed by Xiaoyu Yao."

This reverts commit aeecfa24f4fb6af289920cbf8830c394e66bd78e.

+import java.io.FileDescriptor;
-import org.apache.hadoop.hdfs.server.datanode.fsdataset.ReplicaInputStreams;
+import org.apache.hadoop.io.nativeio.NativeIO;
-
-  /** InputStreams and file descriptors to read block/checksum. */
-  private ReplicaInputStreams ris;
+  /** Stream to read block data from */
+  private InputStream blockIn;
+  /** Stream to read checksum */
+  private DataInputStream checksumIn;
+  
+  /** The file descriptor of the block being sent */
+  private FileDescriptor blockInFd;
+  /** The reference to the volume where the block is located */
+  private FsVolumeReference volumeRef;
-    InputStream blockIn = null;
-    DataInputStream checksumIn = null;
-    FsVolumeReference volumeRef = null;
-      volumeRef = datanode.data.getVolume(block).obtainReference();
+      this.volumeRef = datanode.data.getVolume(block).obtainReference();
-      ris = new ReplicaInputStreams(blockIn, checksumIn, volumeRef);
+      if (blockIn instanceof FileInputStream) {
+        blockInFd = ((FileInputStream)blockIn).getFD();
+      } else {
+        blockInFd = null;
+      }
+      IOUtils.closeStream(blockIn);
-    if (ris.getDataInFd() != null &&
+    if (blockInFd != null &&
-        ris.dropCacheBehindReads(block.getBlockName(), lastCacheDropOffset,
+        NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+            block.getBlockName(), blockInFd, lastCacheDropOffset,
-
-    try {
-      ris.closeStreams();
-    } finally {
-      IOUtils.closeStream(ris);
-      ris = null;
+    
+    IOException ioe = null;
+    if(checksumIn!=null) {
+      try {
+        checksumIn.close(); // close checksum file
+      } catch (IOException e) {
+        ioe = e;
+      }
+      checksumIn = null;
+    }   
+    if(blockIn!=null) {
+      try {
+        blockIn.close(); // close data file
+      } catch (IOException e) {
+        ioe = e;
+      }
+      blockIn = null;
+      blockInFd = null;
+    }
+    if (volumeRef != null) {
+      IOUtils.cleanup(null, volumeRef);
+      volumeRef = null;
+    }
+    // throw IOException if there is any
+    if(ioe!= null) {
+      throw ioe;
-    if (checksumSize > 0 && ris.getChecksumIn() != null) {
+    if (checksumSize > 0 && checksumIn != null) {
-      ris.readDataFully(buf, dataOff, dataLen);
+      IOUtils.readFully(blockIn, buf, dataOff, dataLen);
-
+        
-        FileChannel fileCh = ((FileInputStream)ris.getDataIn()).getChannel();
+        FileChannel fileCh = ((FileInputStream)blockIn).getChannel();
-        sockOut.transferToFully(fileCh, blockInPosition, dataLen,
+        sockOut.transferToFully(fileCh, blockInPosition, dataLen, 
-              ris.getVolumeRef().getVolume().getStorageID(),
+              volumeRef.getVolume().getStorageID(),
-    if (checksumSize <= 0 && ris.getChecksumIn() == null) {
+    if (checksumSize <= 0 && checksumIn == null) {
-      ris.readChecksumFully(buf, checksumOffset, checksumLen);
+      checksumIn.readFully(buf, checksumOffset, checksumLen);
-      ris.closeChecksumStream();
+      IOUtils.closeStream(checksumIn);
+      checksumIn = null;
-    if (isLongRead() && ris.getDataInFd() != null) {
+    if (isLongRead() && blockInFd != null) {
-      ris.dropCacheBehindReads(block.getBlockName(), 0, 0,
-          POSIX_FADV_SEQUENTIAL);
+      NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+          block.getBlockName(), blockInFd, 0, 0, POSIX_FADV_SEQUENTIAL);
-          && ris.getDataIn() instanceof FileInputStream;
+          && blockIn instanceof FileInputStream;
-        FileChannel fileChannel =
-            ((FileInputStream)ris.getDataIn()).getChannel();
+        FileChannel fileChannel = ((FileInputStream)blockIn).getChannel();
-    if (ris.getDataInFd() == null) {
-      return;
-    }
+    if (blockInFd == null) return;
-          clientTraceFmt, ris.getDataInFd(), offset, readaheadLength,
-          Long.MAX_VALUE, curReadahead);
+          clientTraceFmt, blockInFd, offset, readaheadLength, Long.MAX_VALUE,
+          curReadahead);
-        ris.dropCacheBehindReads(block.getBlockName(), lastCacheDropOffset,
+        NativeIO.POSIX.getCacheManipulator().posixFadviseIfPossible(
+            block.getBlockName(), blockInFd, lastCacheDropOffset,

MOV26 INS26 MOV23 INS40 UPD40 INS23 INS23 INS23 INS29 INS83 MOV43 INS59 INS29 INS83 MOV43 INS59 UPD43 INS29 INS83 MOV43 INS59 INS65 INS42 INS65 INS42 UPD42 UPD42 INS65 INS42 INS60 INS25 INS25 INS25 INS25 INS66 INS66 UPD66 INS66 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS41 INS25 INS42 INS42 INS33 INS42 INS33 INS54 INS21 INS42 INS33 INS54 INS21 INS21 INS42 INS33 MOV21 MOV21 INS42 INS33 INS53 INS42 INS62 INS8 INS8 INS21 INS42 MOV8 INS12 INS7 INS8 INS12 INS7 INS7 INS42 INS42 INS42 INS21 INS42 INS22 INS42 INS43 MOV21 INS21 INS32 INS44 INS8 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS42 INS33 UPD42 INS33 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS7 INS32 UPD42 INS42 INS52 INS42 INS42 INS7 INS42 INS42 INS42 INS43 INS42 INS21 INS32 INS43 INS42 INS21 UPD42 UPD42 INS42 INS42 INS33 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS33 INS32 UPD42 INS42 UPD42 UPD42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS32 UPD42 INS42 INS36 INS42 INS40 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 UPD42 MOV42 INS11 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL42 DEL42 DEL32 DEL8 DEL54 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL32