YARN-1354. Recover applications upon nodemanager restart. (Contributed by Jason Lowe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615550 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.DataInputStream;
+import org.apache.hadoop.io.DataOutputBuffer;
+import org.apache.hadoop.yarn.api.records.ApplicationAccessType;
+import org.apache.hadoop.yarn.api.records.impl.pb.ApplicationIdPBImpl;
+import org.apache.hadoop.yarn.api.records.impl.pb.ProtoUtils;
+import org.apache.hadoop.yarn.proto.YarnProtos.ApplicationACLMapProto;
+import org.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.ContainerManagerApplicationProto;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.NMStateStoreService.RecoveredApplicationsState;
+import com.google.protobuf.ByteString;
+  @SuppressWarnings("unchecked")
+
+      RecoveredApplicationsState appsState = stateStore.loadApplicationsState();
+      for (ContainerManagerApplicationProto proto :
+           appsState.getApplications()) {
+        recoverApplication(proto);
+      }
+
+      String diagnostic = "Application marked finished during recovery";
+      for (ApplicationId appId : appsState.getFinishedApplications()) {
+        dispatcher.getEventHandler().handle(
+            new ApplicationFinishEvent(appId, diagnostic));
+      }
+  private void recoverApplication(ContainerManagerApplicationProto p)
+      throws IOException {
+    ApplicationId appId = new ApplicationIdPBImpl(p.getId());
+    Credentials creds = new Credentials();
+    creds.readTokenStorageStream(
+        new DataInputStream(p.getCredentials().newInput()));
+
+    List<ApplicationACLMapProto> aclProtoList = p.getAclsList();
+    Map<ApplicationAccessType, String> acls =
+        new HashMap<ApplicationAccessType, String>(aclProtoList.size());
+    for (ApplicationACLMapProto aclProto : aclProtoList) {
+      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),
+          aclProto.getAcl());
+    }
+
+    LOG.info("Recovering application " + appId);
+    ApplicationImpl app = new ApplicationImpl(dispatcher, p.getUser(), appId,
+        creds, context);
+    context.getApplications().put(appId, app);
+    app.handle(new ApplicationInitEvent(appId, acls));
+  }
+
+    if (this.context.getNMStateStore().canRecover()
+        && !this.context.getDecommissioned()) {
+      // do not cleanup apps as they can be recovered on restart
+      return;
+    }
+
+  private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,
+      String user, Credentials credentials,
+      Map<ApplicationAccessType, String> appAcls) {
+
+    ContainerManagerApplicationProto.Builder builder =
+        ContainerManagerApplicationProto.newBuilder();
+    builder.setId(((ApplicationIdPBImpl) appId).getProto());
+    builder.setUser(user);
+
+    builder.clearCredentials();
+    if (credentials != null) {
+      DataOutputBuffer dob = new DataOutputBuffer();
+      try {
+        credentials.writeTokenStorageToStream(dob);
+        builder.setCredentials(ByteString.copyFrom(dob.getData()));
+      } catch (IOException e) {
+        // should not occur
+        LOG.error("Cannot serialize credentials", e);
+      }
+    }
+
+    builder.clearAcls();
+    if (appAcls != null) {
+      for (Map.Entry<ApplicationAccessType, String> acl : appAcls.entrySet()) {
+        ApplicationACLMapProto p = ApplicationACLMapProto.newBuilder()
+            .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))
+            .setAcl(acl.getValue())
+            .build();
+        builder.addAcls(p);
+      }
+    }
+
+    return builder.build();
+  }
+
-
+          Map<ApplicationAccessType, String> appAcls =
+              container.getLaunchContext().getApplicationACLs();
+          context.getNMStateStore().storeApplication(applicationID,
+              buildAppProto(applicationID, user, credentials, appAcls));
-            new ApplicationInitEvent(applicationID, container.getLaunchContext()
-              .getApplicationACLs()));
+            new ApplicationInitEvent(applicationID, appAcls));
+        try {
+          this.context.getNMStateStore().storeFinishedApplication(appID);
+        } catch (IOException e) {
+          LOG.error("Unable to update application state in store", e);
+        }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS79 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS42 INS45 INS43 INS42 INS42 INS60 INS60 INS21 INS60 INS60 INS70 INS21 INS60 INS21 INS21 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS21 INS21 INS21 INS25 INS21 INS25 INS41 INS8 INS42 INS43 INS59 INS43 INS59 INS32 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS32 INS43 INS59 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS32 INS32 INS32 INS27 INS8 INS32 INS27 INS8 INS32 MOV21 INS60 INS70 INS60 INS70 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS38 INS41 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS60 INS54 INS42 INS42 INS42 INS33 INS70 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS43 INS59 INS44 INS32 INS8 INS43 INS32 INS43 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS32 INS45 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS36 INS42 INS43 INS59 INS8 INS12 INS44 INS32 INS8 INS54 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS45 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS11 INS42 INS42 INS14 INS21 INS21 INS44 INS8 INS74 INS42 INS42 INS42 INS60 INS21 INS8 INS12 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS43 INS32 INS32 INS43 INS42 INS21 INS43 INS43 INS43 INS43 INS59 INS32 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS32 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS43 INS42 MOV32 INS32 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL8