HDFS-5349. DNA_CACHE and DNA_UNCACHE should be by blockId only (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532116 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.protocol.proto.DatanodeProtocolProtos.BlockIdCommandProto;
+import org.apache.hadoop.hdfs.server.protocol.BlockIdCommand;
+    case BlockIdCommand:
+      return PBHelper.convert(proto.getBlkIdCmd());
-    case DatanodeProtocol.DNA_CACHE:
-      builder.setAction(BlockCommandProto.Action.CACHE);
-      break;
-    case DatanodeProtocol.DNA_UNCACHE:
-      builder.setAction(BlockCommandProto.Action.UNCACHE);
-      break;
+  
+  public static BlockIdCommandProto convert(BlockIdCommand cmd) {
+    BlockIdCommandProto.Builder builder = BlockIdCommandProto.newBuilder()
+        .setBlockPoolId(cmd.getBlockPoolId());
+    switch (cmd.getAction()) {
+    case DatanodeProtocol.DNA_CACHE:
+      builder.setAction(BlockIdCommandProto.Action.CACHE);
+      break;
+    case DatanodeProtocol.DNA_UNCACHE:
+      builder.setAction(BlockIdCommandProto.Action.UNCACHE);
+      break;
+    default:
+      throw new AssertionError("Invalid action");
+    }
+    long[] blockIds = cmd.getBlockIds();
+    for (int i = 0; i < blockIds.length; i++) {
+      builder.addBlockIds(blockIds[i]);
+    }
+    return builder.build();
+  }
+    case DatanodeProtocol.DNA_SHUTDOWN:
+      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).
+        setBlkCmd(PBHelper.convert((BlockCommand) datanodeCommand));
+      break;
-    case DatanodeProtocol.DNA_SHUTDOWN:
-      builder.setCmdType(DatanodeCommandProto.Type.BlockCommand).setBlkCmd(
-          PBHelper.convert((BlockCommand) datanodeCommand));
+      builder.setCmdType(DatanodeCommandProto.Type.BlockIdCommand).
+        setBlkIdCmd(PBHelper.convert((BlockIdCommand) datanodeCommand));
+    default:
+      throw new AssertionError("Unknown action type: " + blkCmd.getAction());
+    }
+    return new BlockCommand(action, blkCmd.getBlockPoolId(), blocks, targets);
+  }
+
+  public static BlockIdCommand convert(BlockIdCommandProto blkIdCmd) {
+    int numBlockIds = blkIdCmd.getBlockIdsCount();
+    long blockIds[] = new long[numBlockIds];
+    for (int i = 0; i < numBlockIds; i++) {
+      blockIds[i] = blkIdCmd.getBlockIds(i);
+    }
+    int action = DatanodeProtocol.DNA_UNKNOWN;
+    switch (blkIdCmd.getAction()) {
-      throw new AssertionError("Unknown action type: " + blkCmd.getAction());
+      throw new AssertionError("Unknown action type: " + blkIdCmd.getAction());
-    return new BlockCommand(action, blkCmd.getBlockPoolId(), blocks, targets);
+    return new BlockIdCommand(action, blkIdCmd.getBlockPoolId(), blockIds);

INS26 INS26 INS40 INS40 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS60 INS50 INS60 INS24 INS41 MOV49 MOV49 INS42 INS43 INS42 INS60 INS60 INS24 INS60 INS50 INS41 INS49 INS41 INS42 INS43 INS59 INS32 MOV49 INS21 INS10 MOV49 INS21 INS10 INS49 INS53 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS21 INS10 INS42 INS39 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS39 INS59 INS32 MOV49 MOV21 INS10 MOV49 MOV21 INS10 INS49 INS53 INS14 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS14 INS39 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS85 INS3 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS40 INS42 INS42 INS14 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS45 INS42 INS42 INS42 INS34 INS32 INS32 INS42 INS32 INS42 INS42 INS5 INS42 INS42 INS34 INS7 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS40 INS42 INS42 INS11 INS39 INS85 INS2 INS32 INS42 INS45 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL10 DEL42 DEL42 DEL40 DEL32 DEL21 DEL10 DEL10 DEL10