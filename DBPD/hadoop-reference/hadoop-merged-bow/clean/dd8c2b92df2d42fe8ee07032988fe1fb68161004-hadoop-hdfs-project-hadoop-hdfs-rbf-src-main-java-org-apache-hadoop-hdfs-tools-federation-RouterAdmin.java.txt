HDFS-13853. RBF: RouterAdmin update cmd is overwriting the entry not updating the existing. Contributed by Ayush Saxena.

+import java.util.LinkedList;
+import java.util.Map.Entry;
-      return "\t[-update <source> <nameservice1, nameservice2, ...> "
-          + "<destination> "
-          + "[-readonly] [-faulttolerant] [-order HASH|LOCAL|RANDOM|HASH_ALL] "
+      return "\t[-update <source>"
+          + " [<nameservice1, nameservice2, ...> <destination>] "
+          + "[-readonly true|false] [-faulttolerant true|false]"
+          + " [-order HASH|LOCAL|RANDOM|HASH_ALL] "
+          System.out.println(
+              "WARN: Changing order/destinations may lead to inconsistencies");
+    } catch (IOException ioe) {
+      exitCode = -1;
+      System.err.println(cmd.substring(1) + ": " + ioe.getLocalizedMessage());
+      printUsage(cmd);
-    GetMountTableEntriesRequest getRequest =
-        GetMountTableEntriesRequest.newInstance(mount);
-    GetMountTableEntriesResponse getResponse =
-        mountTable.getMountTableEntries(getRequest);
-    List<MountTable> results = getResponse.getEntries();
-    MountTable existingEntry = null;
-    for (MountTable result : results) {
-      if (mount.equals(result.getSourcePath())) {
-        existingEntry = result;
-      }
-    }
+    MountTable existingEntry = getMountEntry(mount, mountTable);
-    // Mandatory parameters
-    String[] nss = parameters[i++].split(",");
-    String dest = parameters[i++];
-
-    // Optional parameters
-    boolean readOnly = false;
-    boolean faultTolerant = false;
-    String owner = null;
-    String group = null;
-    FsPermission mode = null;
-    DestinationOrder order = null;
-    while (i < parameters.length) {
-      if (parameters[i].equals("-readonly")) {
-        readOnly = true;
-      } else if (parameters[i].equals("-faulttolerant")) {
-        faultTolerant = true;
-      } else if (parameters[i].equals("-order")) {
-        i++;
-        try {
-          order = DestinationOrder.valueOf(parameters[i]);
-        } catch(Exception e) {
-          System.err.println("Cannot parse order: " + parameters[i]);
-        }
-      } else if (parameters[i].equals("-owner")) {
-        i++;
-        owner = parameters[i];
-      } else if (parameters[i].equals("-group")) {
-        i++;
-        group = parameters[i];
-      } else if (parameters[i].equals("-mode")) {
-        i++;
-        short modeValue = Short.parseShort(parameters[i], 8);
-        mode = new FsPermission(modeValue);
-      } else {
-        printUsage("-update");
-        return false;
-      }
-
-      i++;
-    }
-
-    return updateMount(mount, nss, dest, readOnly, faultTolerant, order,
-        new ACLEntity(owner, group, mode));
-  }
-
-  /**
-   * Update a mount table entry.
-   *
-   * @param mount Mount point.
-   * @param nss Nameservices where this is mounted to.
-   * @param dest Destination path.
-   * @param readonly If the mount point is read only.
-   * @param order Order of the destination locations.
-   * @param aclInfo the ACL info for mount point.
-   * @return If the mount point was updated.
-   * @throws IOException Error updating the mount point.
-   */
-  public boolean updateMount(String mount, String[] nss, String dest,
-      boolean readonly, boolean faultTolerant,
-      DestinationOrder order, ACLEntity aclInfo)
-      throws IOException {
-
-    // Create a new entry
-    Map<String, String> destMap = new LinkedHashMap<>();
-    for (String ns : nss) {
-      destMap.put(ns, dest);
+    MountTable existingEntry = getMountEntry(mount, mountTable);
+    if (existingEntry == null) {
+      throw new IOException(mount + " doesn't exist.");
-    MountTable newEntry = MountTable.newInstance(mount, destMap);
+    // Check if the destination needs to be updated.
-    newEntry.setReadOnly(readonly);
-    newEntry.setFaultTolerant(faultTolerant);
-
-    if (order != null) {
-      newEntry.setDestOrder(order);
+    if (!parameters[i].startsWith("-")) {
+      String[] nss = parameters[i++].split(",");
+      String dest = parameters[i++];
+      Map<String, String> destMap = new LinkedHashMap<>();
+      for (String ns : nss) {
+        destMap.put(ns, dest);
+      }
+      final List<RemoteLocation> locations = new LinkedList<>();
+      for (Entry<String, String> entry : destMap.entrySet()) {
+        String nsId = entry.getKey();
+        String path = normalizeFileSystemPath(entry.getValue());
+        RemoteLocation location = new RemoteLocation(nsId, path, mount);
+        locations.add(location);
+      }
+      existingEntry.setDestinations(locations);
-
-    // Update ACL info of mount table entry
-    if (aclInfo.getOwner() != null) {
-      newEntry.setOwnerName(aclInfo.getOwner());
+    try {
+      while (i < parameters.length) {
+        switch (parameters[i]) {
+        case "-readonly":
+          i++;
+          existingEntry.setReadOnly(getBooleanValue(parameters[i]));
+          break;
+        case "-faulttolerant":
+          i++;
+          existingEntry.setFaultTolerant(getBooleanValue(parameters[i]));
+          break;
+        case "-order":
+          i++;
+          try {
+            existingEntry.setDestOrder(DestinationOrder.valueOf(parameters[i]));
+            break;
+          } catch (Exception e) {
+            throw new Exception("Cannot parse order: " + parameters[i]);
+          }
+        case "-owner":
+          i++;
+          existingEntry.setOwnerName(parameters[i]);
+          break;
+        case "-group":
+          i++;
+          existingEntry.setGroupName(parameters[i]);
+          break;
+        case "-mode":
+          i++;
+          short modeValue = Short.parseShort(parameters[i], 8);
+          existingEntry.setMode(new FsPermission(modeValue));
+          break;
+        default:
+          printUsage("-update");
+          return false;
+        }
+        i++;
+      }
+    } catch (IllegalArgumentException iae) {
+      throw iae;
+    } catch (Exception e) {
+      String msg = "Unable to parse arguments: " + e.getMessage();
+      if (e instanceof ArrayIndexOutOfBoundsException) {
+        msg = "Unable to parse arguments: no value provided for "
+            + parameters[i - 1];
+      }
+      throw new IOException(msg);
-
-    if (aclInfo.getGroup() != null) {
-      newEntry.setGroupName(aclInfo.getGroup());
-    }
-
-    if (aclInfo.getMode() != null) {
-      newEntry.setMode(aclInfo.getMode());
-    }
-
-        UpdateMountTableEntryRequest.newInstance(newEntry);
+        UpdateMountTableEntryRequest.newInstance(existingEntry);
+   * Parse string to boolean.
+   * @param value the string to be parsed.
+   * @return parsed boolean value.
+   * @throws Exception if other than true|false is provided.
+   */
+  private boolean getBooleanValue(String value) throws Exception {
+    if (value.equalsIgnoreCase("true")) {
+      return true;
+    } else if (value.equalsIgnoreCase("false")) {
+      return false;
+    }
+    throw new IllegalArgumentException("Invalid argument: " + value
+        + ". Please specify either true or false.");
+  }
+
+  /**
+   * Gets the mount table entry.
+   * @param mount name of the mount entry.
+   * @param mountTable the mount table.
+   * @return corresponding mount entry.
+   * @throws IOException in case of failure to retrieve mount entry.
+   */
+  private MountTable getMountEntry(String mount, MountTableManager mountTable)
+      throws IOException {
+    GetMountTableEntriesRequest getRequest =
+        GetMountTableEntriesRequest.newInstance(mount);
+    GetMountTableEntriesResponse getResponse =
+        mountTable.getMountTableEntries(getRequest);
+    List<MountTable> results = getResponse.getEntries();
+    MountTable existingEntry = null;
+    for (MountTable result : results) {
+      if (mount.equals(result.getSourcePath())) {
+        existingEntry = result;
+      }
+    }
+    return existingEntry;
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS31 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 MOV44 INS44 MOV43 INS8 INS60 MOV60 MOV21 MOV60 INS60 INS25 INS25 INS54 INS60 MOV60 MOV60 MOV25 MOV41 INS65 INS65 INS65 INS65 INS43 INS42 INS42 MOV25 INS53 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 MOV60 MOV60 MOV60 MOV60 MOV70 INS41 INS12 INS43 INS59 MOV43 INS59 INS27 INS8 INS38 INS8 INS8 INS12 INS12 MOV43 INS59 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS25 INS14 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS44 INS8 INS42 INS42 INS32 UPD42 MOV42 INS32 INS42 INS33 INS53 MOV32 MOV60 MOV60 MOV60 MOV70 MOV60 INS70 INS21 MOV61 INS44 INS8 INS44 INS8 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS45 INS41 INS32 MOV8 INS43 INS27 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 UPD45 INS83 INS74 INS44 INS32 INS8 INS32 UPD43 MOV43 UPD42 MOV42 INS53 UPD43 MOV43 UPD42 MOV42 MOV60 INS25 INS53 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS9 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS45 INS42 INS45 INS42 INS7 INS32 INS32 INS43 INS27 INS43 INS43 UPD42 INS14 INS74 INS42 UPD42 MOV42 UPD42 MOV42 INS60 INS60 INS60 INS21 INS42 INS42 INS42 INS50 UPD42 INS42 UPD42 INS43 INS62 INS8 INS14 UPD45 UPD45 INS45 UPD45 INS42 INS38 INS40 INS42 INS27 INS42 INS42 UPD42 MOV42 INS42 INS45 INS42 UPD42 MOV42 INS74 INS43 INS43 INS43 MOV43 INS59 MOV43 INS59 INS43 INS59 INS32 MOV2 INS49 MOV21 MOV21 INS10 INS49 MOV21 MOV21 INS10 INS49 MOV21 MOV54 INS49 MOV21 INS21 INS10 INS49 INS21 INS21 INS10 INS49 INS21 MOV60 MOV21 INS10 INS49 MOV21 INS41 INS42 UPD42 INS27 INS42 INS43 MOV21 INS43 INS42 INS34 INS32 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS45 MOV32 MOV2 INS45 INS37 MOV32 MOV2 INS45 INS37 INS32 INS9 INS45 INS32 INS42 INS7 INS42 INS21 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS10 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 MOV2 INS42 MOV2 INS32 INS53 INS45 INS2 INS40 INS42 INS45 INS42 INS42 MOV32 INS14 INS42 INS27 INS43 MOV27 INS42 INS34 INS42 DEL43 DEL33 DEL42 DEL7 DEL42 DEL7 DEL42 DEL7 DEL40 DEL42 DEL32 DEL21 DEL45 DEL45 DEL42 DEL7 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL45 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL42 DEL45 DEL32 DEL8 DEL8 DEL8 DEL42 DEL45 DEL32 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL39 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL44 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL31