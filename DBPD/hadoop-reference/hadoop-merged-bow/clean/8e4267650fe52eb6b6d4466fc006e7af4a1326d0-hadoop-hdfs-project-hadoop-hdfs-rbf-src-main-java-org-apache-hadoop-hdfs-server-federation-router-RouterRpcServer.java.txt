HDFS-14440. RBF: Optimize the file write process in case of multiple destinations. Contributed by Ayush Saxena.

-        // Check if this file already exists in other subclusters
-        LocatedBlocks existingLocation = getBlockLocations(src, 0, 1);
+        RemoteLocation existingLocation = getExistingLocation(src, locations);
+        // Forward to the existing location and let the NN handle the error
-          // Forward to the existing location and let the NN handle the error
-          LocatedBlock existingLocationLastLocatedBlock =
-              existingLocation.getLastLocatedBlock();
-          if (existingLocationLastLocatedBlock == null) {
-            // The block has no blocks yet, check for the meta data
-            for (RemoteLocation location : locations) {
-              RemoteMethod method = new RemoteMethod("getFileInfo",
-                  new Class<?>[] {String.class}, new RemoteParam());
-              if (rpcClient.invokeSingle(location, method) != null) {
-                createLocation = location;
-                break;
-              }
-            }
-          } else {
-            ExtendedBlock existingLocationLastBlock =
-                existingLocationLastLocatedBlock.getBlock();
-            String blockPoolId = existingLocationLastBlock.getBlockPoolId();
-            createLocation = getLocationForPath(src, true, blockPoolId);
-          }
+          LOG.debug("{} already exists in {}.", src, existingLocation);
+          createLocation = existingLocation;
+  /**
+   * Gets the remote location where the file exists.
+   * @param src the name of file.
+   * @param locations all the remote locations.
+   * @return the remote location of the file if it exists, else null.
+   * @throws IOException in case of any exception.
+   */
+  private RemoteLocation getExistingLocation(String src,
+      List<RemoteLocation> locations) throws IOException {
+    RemoteMethod method = new RemoteMethod("getFileInfo",
+        new Class<?>[] {String.class}, new RemoteParam());
+    Map<RemoteLocation, HdfsFileStatus> results = rpcClient.invokeConcurrent(
+        locations, method, false, false, HdfsFileStatus.class);
+    for (RemoteLocation loc : locations) {
+      if (results.get(loc) != null) {
+        return loc;
+      }
+    }
+    return null;
+  }
+

INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS43 MOV8 INS65 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS74 INS42 INS42 INS60 INS70 INS41 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS33 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS9 INS9 INS57 INS42 INS27 MOV8 INS43 INS32 MOV33 INS41 MOV43 INS42 INS42 INS42 INS42 INS42 INS21 MOV21 UPD42 INS42 INS32 INS42 INS42 INS45 UPD42 MOV42 INS42 INS42 DEL42 DEL43 DEL34 DEL34 DEL42 DEL42 DEL9 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL44 DEL42 DEL70 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL10 DEL32 DEL27 DEL25