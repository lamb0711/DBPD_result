HADOOP-12502 SetReplication OutOfMemoryError. Contributed by Vinayakumar B.

+import org.apache.hadoop.fs.RemoteIterator;
-    // TODO: this really should be iterative
-        processPath(item);
-        if (recursive && isPathRecursable(item)) {
-          recursePath(item);
-        }
-        postProcessPath(item);
+        processPathInternal(item);
+   * Iterates over the given expanded paths and invokes
+   * {@link #processPath(PathData)} on each element. If "recursive" is true,
+   * will do a post-visit DFS on directories.
+   * @param parent if called via a recurse, will be the parent dir, else null
+   * @param itemsIterator a iterator of {@link PathData} objects to process
+   * @throws IOException if anything goes wrong...
+   */
+  protected void processPaths(PathData parent,
+      RemoteIterator<PathData> itemsIterator) throws IOException {
+    int groupSize = getListingGroupSize();
+    if (groupSize == 0) {
+      // No grouping of contents required.
+      while (itemsIterator.hasNext()) {
+        processPaths(parent, itemsIterator.next());
+      }
+    } else {
+      List<PathData> items = new ArrayList<PathData>(groupSize);
+      while (itemsIterator.hasNext()) {
+        items.add(itemsIterator.next());
+        if (!itemsIterator.hasNext() || items.size() == groupSize) {
+          processPaths(parent, items.toArray(new PathData[items.size()]));
+          items.clear();
+        }
+      }
+    }
+  }
+
+  private void processPathInternal(PathData item) throws IOException {
+    processPath(item);
+    if (recursive && isPathRecursable(item)) {
+      recursePath(item);
+    }
+    postProcessPath(item);
+  }
+
+  /**
+   * Whether the directory listing for a path should be sorted.?
+   * @return true/false.
+   */
+  protected boolean isSorted() {
+    return false;
+  }
+
+  /**
+   * While using iterator method for listing for a path, whether to group items
+   * and process as array? If so what is the size of array?
+   * @return size of the grouping array.
+   */
+  protected int getListingGroupSize() {
+    return 0;
+  }
+
+  /**
-      processPaths(item, item.getDirectoryContents());
+      if (isSorted()) {
+        // use the non-iterative method for listing because explicit sorting is
+        // required. Iterators not guaranteed to return sorted elements
+        processPaths(item, item.getDirectoryContents());
+      } else {
+        processPaths(item, item.getDirectoryContentsIterator());
+      }

INS26 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 MOV44 INS43 MOV8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS42 INS65 INS65 INS41 INS65 INS65 INS41 INS44 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS42 INS43 INS43 INS39 INS59 INS27 INS8 INS8 INS66 INS66 INS9 INS66 INS66 INS66 INS34 INS8 INS43 INS42 INS68 INS42 INS42 INS42 INS42 INS32 INS42 INS34 INS61 INS60 INS61 MOV21 INS25 INS42 INS8 INS42 INS69 INS42 INS32 INS8 INS74 INS59 INS32 INS8 INS32 MOV8 INS8 INS21 INS43 INS42 INS42 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS21 INS25 INS42 INS21 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS32 INS38 INS27 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS3 INS5 INS32 INS43 INS85 INS42 INS42 INS42