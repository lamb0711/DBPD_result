HADOOP-10429. KeyStores should have methods to generate the materials themselves, KeyShell should use them. (tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586105 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.NoSuchAlgorithmException;
+import javax.crypto.KeyGenerator;
+
+   * Get the algorithm from the cipher.
+   *
+   * @return the algorithm name
+   */
+  private String getAlgorithm(String cipher) {
+    int slash = cipher.indexOf('/');
+    if (slash == -1) {
+      return cipher;
+    } else {
+      return cipher.substring(0, slash);
+    }
+  }
+
+  /**
+   * Generates a key material.
+   *
+   * @param size length of the key.
+   * @param algorithm algorithm to use for generating the key.
+   * @return the generated key.
+   * @throws NoSuchAlgorithmException
+   */
+  protected byte[] generateKey(int size, String algorithm)
+      throws NoSuchAlgorithmException {
+    algorithm = getAlgorithm(algorithm);
+    KeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm);
+    keyGenerator.init(size);
+    byte[] key = keyGenerator.generateKey().getEncoded();
+    return key;
+  }
+
+  /**
+   * Create a new key generating the material for it.
+   * The given key must not already exist.
+   * <p/>
+   * This implementation generates the key material and calls the
+   * {@link #createKey(String, byte[], Options)} method.
+   *
+   * @param name the base name of the key
+   * @param options the options for the new key.
+   * @return the version name of the first version of the key.
+   * @throws IOException
+   * @throws NoSuchAlgorithmException
+   */
+  public KeyVersion createKey(String name, Options options)
+      throws NoSuchAlgorithmException, IOException {
+    byte[] material = generateKey(options.getBitLength(), options.getCipher());
+    return createKey(name, material, options);
+  }
+
+  /**
+   * Roll a new version of the given key generating the material for it.
+   * <p/>
+   * This implementation generates the key material and calls the
+   * {@link #rollNewVersion(String, byte[])} method.
+   *
+   * @param name the basename of the key
+   * @return the name of the new version of the key
+   * @throws IOException
+   */
+  public KeyVersion rollNewVersion(String name) throws NoSuchAlgorithmException,
+                                                       IOException {
+    Metadata meta = getMetadata(name);
+    byte[] material = generateKey(meta.getBitLength(), meta.getCipher());
+    return rollNewVersion(name, material);
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS65 INS65 INS42 INS43 INS42 INS60 INS25 INS65 INS65 INS65 INS65 INS65 INS39 INS85 INS39 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS60 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS41 INS66 INS66 INS42 INS39 INS59 INS27 INS8 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS7 INS43 INS59 INS32 INS5 INS59 INS42 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS5 INS59 INS32 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS5 INS59 INS32 INS42 INS32 INS42 INS38 INS41 INS41 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS68 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS68 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS13 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS69 INS69 INS69 INS42 INS32 INS32 INS42 INS69 INS69 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS43 INS5 INS43 INS42 INS42 INS42 INS42 INS43 INS5 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS39 INS85