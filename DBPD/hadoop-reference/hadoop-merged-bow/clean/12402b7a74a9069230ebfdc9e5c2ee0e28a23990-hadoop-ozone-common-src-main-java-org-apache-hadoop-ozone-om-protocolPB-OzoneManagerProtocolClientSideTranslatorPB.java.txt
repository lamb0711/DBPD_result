HDDS-1072. Implement RetryProxy and FailoverProxy for OM client.

+import java.io.EOFException;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.hdds.conf.OzoneConfiguration;
+import org.apache.hadoop.io.retry.RetryPolicies;
+import org.apache.hadoop.io.retry.RetryPolicy;
+import org.apache.hadoop.io.retry.RetryProxy;
+import org.apache.hadoop.ozone.OzoneConfigKeys;
+import org.apache.hadoop.ozone.om.ha.OMFailoverProxyProvider;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+  private final OMFailoverProxyProvider omFailoverProxyProvider;
+  private static final Logger FAILOVER_PROXY_PROVIDER_LOG =
+      LoggerFactory.getLogger(OMFailoverProxyProvider.class);
+
+  public OzoneManagerProtocolClientSideTranslatorPB(
+      OzoneManagerProtocolPB proxy, String clientId) {
+    this.rpcProxy = proxy;
+    this.clientID = clientId;
+    this.omFailoverProxyProvider = null;
+  }
-   * Constructor for KeySpaceManger Client.
-   * @param rpcProxy
+   * Constructor for OM Protocol Client. This creates a {@link RetryProxy}
+   * over {@link OMFailoverProxyProvider} proxy. OMFailoverProxyProvider has
+   * one {@link OzoneManagerProtocolPB} proxy pointing to each OM node in the
+   * cluster.
-  public OzoneManagerProtocolClientSideTranslatorPB(
-      OzoneManagerProtocolPB rpcProxy, String clientId) {
-    this.rpcProxy = rpcProxy;
+  public OzoneManagerProtocolClientSideTranslatorPB(OzoneConfiguration conf,
+      String clientId, UserGroupInformation ugi) throws IOException {
+    this.omFailoverProxyProvider = new OMFailoverProxyProvider(conf, ugi);
+
+    int maxRetries = conf.getInt(
+        OzoneConfigKeys.OZONE_CLIENT_RETRY_MAX_ATTEMPTS_KEY,
+        OzoneConfigKeys.OZONE_CLIENT_RETRY_MAX_ATTEMPTS_DEFAULT);
+    int maxFailovers = conf.getInt(
+        OzoneConfigKeys.OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY,
+        OzoneConfigKeys.OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_DEFAULT);
+    int sleepBase = conf.getInt(
+        OzoneConfigKeys.OZONE_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_KEY,
+        OzoneConfigKeys.OZONE_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_DEFAULT);
+    int sleepMax = conf.getInt(
+        OzoneConfigKeys.OZONE_CLIENT_FAILOVER_SLEEP_MAX_MILLIS_KEY,
+        OzoneConfigKeys.OZONE_CLIENT_FAILOVER_SLEEP_MAX_MILLIS_DEFAULT);
+
+    this.rpcProxy = TracingUtil.createProxy(
+        createRetryProxy(omFailoverProxyProvider, maxRetries, maxFailovers,
+            sleepBase, sleepMax),
+        OzoneManagerProtocolPB.class);
+   * Creates a {@link RetryProxy} encapsulating the
+   * {@link OMFailoverProxyProvider}. The retry proxy fails over on network
+   * exception or if the current proxy is not the leader OM.
+   */
+  private OzoneManagerProtocolPB createRetryProxy(
+      OMFailoverProxyProvider failoverProxyProvider,
+      int maxRetries, int maxFailovers, int delayMillis, int maxDelayBase) {
+    RetryPolicy retryPolicyOnNetworkException = RetryPolicies
+        .failoverOnNetworkException(RetryPolicies.TRY_ONCE_THEN_FAIL,
+            maxFailovers, maxRetries, delayMillis, maxDelayBase);
+    RetryPolicy retryPolicy = new RetryPolicy() {
+      @Override
+      public RetryAction shouldRetry(Exception exception, int retries,
+          int failovers, boolean isIdempotentOrAtMostOnce)
+          throws Exception {
+        if (exception instanceof EOFException ||
+            exception instanceof  ServiceException) {
+          if (retries < maxRetries && failovers < maxFailovers) {
+            return RetryAction.FAILOVER_AND_RETRY;
+          } else {
+            FAILOVER_PROXY_PROVIDER_LOG.error("Failed to connect to OM. " +
+                "Attempted {} retries and {} failovers", retries, failovers);
+            return RetryAction.FAIL;
+          }
+        } else {
+          return retryPolicyOnNetworkException.shouldRetry(
+                  exception, retries, failovers, isIdempotentOrAtMostOnce);
+        }
+      }
+    };
+    OzoneManagerProtocolPB proxy = (OzoneManagerProtocolPB) RetryProxy.create(
+        OzoneManagerProtocolPB.class, failoverProxyProvider, retryPolicy);
+    return proxy;
+  }
+
+  @VisibleForTesting
+  public OMFailoverProxyProvider getOMFailoverProxyProvider() {
+    return omFailoverProxyProvider;
+  }
+
+  /**
-      return rpcProxy.submitRequest(NULL_RPC_CONTROLLER, payload);
+
+      OMResponse omResponse =
+          rpcProxy.submitRequest(NULL_RPC_CONTROLLER, payload);
+
+      if (omResponse.hasLeaderOMNodeId() && omFailoverProxyProvider != null) {
+        String leaderOmId = omResponse.getLeaderOMNodeId();
+
+        // Failover to the OM node returned by OMReponse leaderOMNodeId if
+        // current proxy is not pointing to that node.
+        omFailoverProxyProvider.performFailoverIfRequired(leaderOmId);
+      }
+
+      return omResponse;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS44 INS29 INS83 INS42 INS44 MOV44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS32 UPD42 INS43 INS42 INS21 INS65 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS60 INS60 INS21 INS21 INS65 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS60 INS60 INS60 INS41 INS42 INS42 INS41 INS42 INS42 INS57 INS42 INS7 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS7 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS7 INS7 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS42 INS42 INS43 UPD42 INS22 INS33 INS42 INS42 INS42 INS22 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS22 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS11 INS60 INS25 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS52 INS42 INS42 INS42 INS32 INS57 INS52 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS1 INS43 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS31 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS42 MOV32 INS32 INS27 INS60 INS21 INS42 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS43 INS42 INS42 INS42 INS33 INS43 INS59 INS32 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS62 INS62 INS25 INS41 INS42 INS43 INS42 INS43 INS27 INS8 INS8 INS32 INS42 INS42 INS27 INS27 INS41 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS40 INS42 INS42 INS27 INS42 INS42 INS45 INS45 DEL66 DEL65 DEL42 DEL65 DEL29