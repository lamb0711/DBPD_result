HDFS-13116. Ozone: Refactor Pipeline to have transport and container specific information. Contributed by Mukul Kumar Singh.

+import com.google.common.base.Preconditions;
-import org.apache.hadoop.ozone.protocol.proto.OzoneProtos;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos.ReplicationFactor;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos.ReplicationType;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos.LifeCycleState;
+import org.apache.hadoop.ozone.protocol.proto.OzoneProtos.NodeState;
-import org.apache.hadoop.scm.container.common.helpers.Pipeline;
+import org.apache.hadoop.scm.container.common.helpers.PipelineChannel;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.LinkedList;
-public class StandaloneManagerImpl implements PipelineManager {
+public class StandaloneManagerImpl extends PipelineManager {
+  private final Set<DatanodeID> standAloneMembers;
+    super();
+    this.standAloneMembers = new HashSet<>();
-   * This function is called by the Container Manager while allocating a new
-   * container. The client specifies what kind of replication pipeline is needed
-   * and based on the replication type in the request appropriate Interface is
-   * invoked.
+   * Allocates a new standalone PipelineChannel from the free nodes.
-   * @param containerName Name of the container
-   * @param replicationFactor - Replication Factor
-   * @return a Pipeline.
+   * @param factor - One
+   * @return PipelineChannel.
-  @Override
-  public Pipeline getPipeline(String containerName, OzoneProtos
-      .ReplicationFactor replicationFactor) throws IOException {
-    List<DatanodeID> datanodes = placementPolicy.chooseDatanodes(
-        replicationFactor.getNumber(), containerSize);
-    Pipeline pipeline = PipelineSelector.newPipelineFromNodes(datanodes);
-    String pipelineName = "SA-" + UUID.randomUUID().toString().substring(3);
-    pipeline.setContainerName(containerName);
-    pipeline.setPipelineName(pipelineName);
-    pipeline.setFactor(replicationFactor);
-    LOG.info("Creating new standalone pipeline: {}", pipeline.toString());
-    return pipeline;
+  public PipelineChannel allocatePipelineChannel(ReplicationFactor factor) {
+    List<DatanodeID> newNodesList = new LinkedList<>();
+    List<DatanodeID> datanodes = nodeManager.getNodes(NodeState.HEALTHY);
+    int count = getReplicationCount(factor);
+    for (DatanodeID datanode : datanodes) {
+      Preconditions.checkNotNull(datanode);
+      if (!standAloneMembers.contains(datanode)) {
+        newNodesList.add(datanode);
+        if (newNodesList.size() == count) {
+          // once a datanode has been added to a pipeline, exclude it from
+          // further allocations
+          standAloneMembers.addAll(newNodesList);
+          LOG.info("Allocating a new pipeline channel of size: {}", count);
+          String channelName =
+              "SA-" + UUID.randomUUID().toString().substring(3);
+          return PipelineSelector.newPipelineFromNodes(newNodesList,
+              LifeCycleState.OPEN, ReplicationType.STAND_ALONE,
+              ReplicationFactor.ONE, channelName);
+        }
+      }
+    }
+    return null;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS83 INS83 INS74 INS59 UPD43 UPD42 INS8 INS43 INS43 INS42 INS46 INS21 UPD42 UPD43 UPD42 INS60 INS60 INS60 INS70 INS41 INS42 INS42 INS7 UPD66 UPD42 UPD66 UPD66 UPD42 MOV74 INS59 INS74 INS59 INS39 INS59 INS44 INS42 INS8 INS33 INS22 INS14 INS42 INS14 INS43 INS43 MOV42 INS32 INS42 INS32 INS43 INS42 INS21 INS25 INS52 INS42 INS74 INS74 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS38 INS8 INS43 INS43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 MOV21 INS25 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS8 UPD42 UPD42 UPD42 INS32 INS42 MOV21 MOV21 MOV60 MOV41 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD45 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS40 INS40 INS40 INS42 DEL66 DEL66 DEL66 DEL42 DEL66 DEL65 DEL42 DEL78 DEL42 DEL32 DEL42 DEL40 DEL43 DEL42 DEL44 DEL43 DEL32 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL8