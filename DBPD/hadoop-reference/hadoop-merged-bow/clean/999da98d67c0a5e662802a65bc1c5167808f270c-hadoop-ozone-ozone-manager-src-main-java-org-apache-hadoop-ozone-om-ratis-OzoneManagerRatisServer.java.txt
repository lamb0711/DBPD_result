HDDS-915. Submit client request to OM Ratis server.
Contributed by Hanisha Koneru.

+import java.net.InetAddress;
+import java.util.concurrent.atomic.AtomicLong;
+import org.apache.ratis.protocol.RaftGroup;
+import org.apache.ratis.protocol.RaftPeer;
+  private final InetSocketAddress omRatisAddress;
+  private final RaftGroupId raftGroupId;
+  private final RaftGroup raftGroup;
+  private final RaftPeerId raftPeerId;
-  private OzoneManagerRatisServer(String omId, int port, Configuration conf)
-      throws IOException {
+  private static final AtomicLong CALL_ID_COUNTER = new AtomicLong();
+
+  private static long nextCallId() {
+    return CALL_ID_COUNTER.getAndIncrement() & Long.MAX_VALUE;
+  }
+
+  private OzoneManagerRatisServer(String omId, InetAddress addr, int port,
+      Configuration conf) throws IOException {
+    this.omRatisAddress = new InetSocketAddress(addr.getHostAddress(), port);
+    // TODO: When implementing replicated OM ratis servers, RaftGroupID
+    // should be the same across all the OMs. Add all the OM servers as Raft
+    // Peers.
+    this.raftGroupId = RaftGroupId.randomId();
+    this.raftPeerId = RaftPeerId.getRaftPeerId(omId);
+
+    RaftPeer raftPeer = new RaftPeer(raftPeerId, omRatisAddress);
+    this.raftGroup = RaftGroup.valueOf(raftGroupId, raftPeer);
-        .setServerId(RaftPeerId.valueOf(omId))
+        .setServerId(this.raftPeerId)
+        .setGroup(this.raftGroup)
-        .setStateMachineRegistry(this::getStateMachine)
+        .setStateMachine(getStateMachine(this.raftGroupId))
-      Configuration ozoneConf) throws IOException {
+      InetAddress omAddress, Configuration ozoneConf) throws IOException {
-    return new OzoneManagerRatisServer(omId, localPort, ozoneConf);
+    return new OzoneManagerRatisServer(omId, omAddress, localPort, ozoneConf);
+  }
+
+  public RaftGroup getRaftGroup() {
+    return this.raftGroup;
-    return new BaseStateMachine();
+    return  new OzoneManagerStateMachine(null);
-    RaftServerConfigKeys.Log.Appender
-        .setBufferElementLimit(properties, logAppenderQueueNumElements);
+    RaftServerConfigKeys.Log.Appender.setBufferElementLimit(properties,
+        logAppenderQueueNumElements);
-    RaftServerConfigKeys.RetryCache
-        .setExpiryTime(properties, retryCacheTimeout);
+    RaftServerConfigKeys.RetryCache.setExpiryTime(properties,
+        retryCacheTimeout);
-    TimeUnit clientRequestTimeoutUnit =
-        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DEFAULT.getUnit();
+    TimeUnit clientRequestTimeoutUnit = OMConfigKeys
+        .OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_DEFAULT .getUnit();
-        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_KEY,
-        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DEFAULT
+        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_KEY,
+        OMConfigKeys.OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_DEFAULT
-     * 1. leader election timeout
-     * 2. node failure timeout
-     * 3.
+     * 1. node failure timeout
+    // Set the ratis leader election timeout
+    TimeUnit leaderElectionMinTimeoutUnit =
+        OMConfigKeys.OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_DEFAULT
+            .getUnit();
+    long leaderElectionMinTimeoutduration = conf.getTimeDuration(
+        OMConfigKeys.OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_KEY,
+        OMConfigKeys.OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_DEFAULT
+            .getDuration(), leaderElectionMinTimeoutUnit);
+    final TimeDuration leaderElectionMinTimeout = TimeDuration.valueOf(
+        leaderElectionMinTimeoutduration, leaderElectionMinTimeoutUnit);
+    RaftServerConfigKeys.Rpc.setTimeoutMin(properties,
+        leaderElectionMinTimeout);
+    long leaderElectionMaxTimeout = leaderElectionMinTimeout.toLong(
+        TimeUnit.MILLISECONDS) + 200;
+    RaftServerConfigKeys.Rpc.setTimeoutMax(properties,
+        TimeDuration.valueOf(leaderElectionMaxTimeout, TimeUnit.MILLISECONDS));
-

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS8 INS44 INS44 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS41 INS43 INS42 INS21 INS21 INS21 INS60 INS21 INS43 INS42 INS42 INS41 INS60 INS60 INS60 INS21 INS60 INS21 INS43 INS27 INS42 INS7 INS7 INS7 INS43 INS59 INS7 INS42 INS22 INS43 INS59 INS39 INS59 INS83 INS43 INS59 INS32 INS39 INS59 INS32 INS42 INS32 INS40 INS22 INS14 INS22 INS32 INS22 INS32 INS42 INS42 INS14 INS22 INS32 INS42 INS52 INS42 UPD43 INS33 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS43 INS32 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 UPD42 UPD40 UPD40 INS40 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 UPD42 INS32 UPD40 INS40 INS42 INS42 INS42 INS40 INS42 INS22 INS32 UPD42 MOV42 INS22 INS52 INS42 MOV32 MOV42 INS22 INS52 INS42 INS52 INS42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL90