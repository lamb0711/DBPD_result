MAPREDUCE-6719. The list of -libjars archives should be replaced with a wildcard in the distributed cache to reduce the application footprint in the state store (Daniel Templeton via sjlee)

+          String name = p.getName();
+          String wildcard = null;
+
+          // If the path is wildcarded, resolve its parent directory instead
+          if (name.equals(DistributedCache.WILDCARD)) {
+            wildcard = name;
+            p = p.getParent();
+          }
+
-          String name = (null == u.getFragment())
-              ? p.getName() : u.getFragment();
+
+          if ((wildcard != null) && (u.getFragment() != null)) {
+            throw new IOException("Invalid path URI: " + p + " - cannot "
+                + "contain both a URI fragment and a wildcard");
+          } else if (wildcard != null) {
+            name = p.getName() + Path.SEPARATOR + wildcard;
+          } else if (u.getFragment() != null) {
+            name = u.getFragment();
+          }
+
+          // If it's not a JAR, add it to the link lookup.
-            linkLookup.put(p, name);
+            String old = linkLookup.put(p, name);
+
+            if ((old != null) && !name.equals(old)) {
+              LOG.warn("The same path is included more than once "
+                  + "with different links or wildcards: " + p + " [" +
+                  name + ", " + old + "]");
+            }
+        String linkName = null;
+
+        if (p.getName().equals(DistributedCache.WILDCARD)) {
+          p = p.getParent();
+          linkName = p.getName() + Path.SEPARATOR + DistributedCache.WILDCARD;
+        }
+
-        // Add URI fragment or just the filename
-        Path name = new Path((null == u.getFragment())
-          ? p.getName()
-          : u.getFragment());
-        if (name.isAbsolute()) {
-          throw new IllegalArgumentException("Resource name must be relative");
+
+        // If there's no wildcard, try using the fragment for the link
+        if (linkName == null) {
+          linkName = u.getFragment();
+
+          // Because we don't know what's in the fragment, we have to handle
+          // it with care.
+          if (linkName != null) {
+            Path linkPath = new Path(linkName);
+
+            if (linkPath.isAbsolute()) {
+              throw new IllegalArgumentException("Resource name must be "
+                  + "relative");
+            }
+
+            linkName = linkPath.toUri().getPath();
+          }
+        } else if (u.getFragment() != null) {
+          throw new IllegalArgumentException("Invalid path URI: " + p +
+              " - cannot contain both a URI fragment and a wildcard");
-        String linkName = name.toUri().getPath();
+
+        // If there's no wildcard or fragment, just link to the file name
+        if (linkName == null) {
+          linkName = p.getName();
+        }
+

INS60 INS25 INS25 INS25 MOV43 INS59 INS32 INS8 INS27 INS8 INS25 INS27 INS8 INS60 INS60 INS25 INS25 INS25 INS42 INS33 INS32 INS42 INS40 INS21 INS21 INS42 MOV33 INS21 INS25 INS27 INS8 INS42 INS33 INS21 INS43 INS59 MOV43 INS59 INS32 INS8 INS27 INS8 INS25 MOV38 INS8 INS42 INS42 INS7 INS7 INS7 INS27 INS8 MOV32 INS33 INS53 INS7 INS42 MOV42 MOV32 INS42 INS33 INS42 INS42 INS40 INS21 INS21 INS36 INS36 INS53 INS27 INS8 INS25 INS60 INS25 INS42 INS32 INS42 INS27 INS42 MOV32 INS42 INS33 INS60 MOV25 INS21 INS14 INS42 MOV32 INS7 INS7 UPD27 MOV27 INS27 INS14 INS42 INS33 INS21 INS27 MOV8 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS40 INS40 MOV43 INS59 INS7 INS43 INS27 INS42 INS42 INS42 INS32 INS42 MOV32 INS33 INS43 INS27 INS7 INS32 INS33 INS42 INS42 MOV32 INS36 INS38 INS21 INS42 INS42 INS42 INS14 UPD42 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS42 INS27 INS42 INS42 INS7 INS27 INS32 INS32 MOV43 INS42 MOV32 MOV42 INS32 INS40 INS42 INS42 MOV32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS27 INS27 UPD42 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS45 INS45 INS45 DEL36 DEL16 DEL59 DEL60 DEL25 DEL45 DEL42 DEL27 DEL36 DEL16 DEL14 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60