HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.

+ *
+ * XOR code is an important primitive code scheme in erasure coding and often
+ * used in advanced codes, like HitchHiker and LRC, though itself is rarely
+ * deployed independently.
-  @Override
-    resetBuffer(outputs[0]);
+    ByteBuffer output = outputs[0];
+    resetOutputBuffer(output);
-    int bufSize = getChunkSize();
-    for (int j = 0; j < bufSize; j++) {
-      outputs[0].put(j, inputs[0].get(j));
+    int iIdx, oIdx;
+    for (iIdx = inputs[0].position(), oIdx = output.position();
+         iIdx < inputs[0].limit(); iIdx++, oIdx++) {
+      output.put(oIdx, inputs[0].get(iIdx));
-      for (int j = 0; j < bufSize; j++) {
-        outputs[0].put(j, (byte) (outputs[0].get(j) ^ inputs[i].get(j)));
+      for (iIdx = inputs[i].position(), oIdx = output.position();
+           iIdx < inputs[i].limit();
+           iIdx++, oIdx++) {
+        output.put(oIdx, (byte) (output.get(oIdx) ^ inputs[i].get(iIdx)));
-  protected void doEncode(byte[][] inputs, byte[][] outputs) {
-    resetBuffer(outputs[0]);
+  protected void doEncode(byte[][] inputs, int[] inputOffsets, int dataLen,
+                          byte[][] outputs, int[] outputOffsets) {
+    byte[] output = outputs[0];
+    resetBuffer(output, outputOffsets[0], dataLen);
-    int bufSize = getChunkSize();
-    for (int j = 0; j < bufSize; j++) {
-      outputs[0][j] = inputs[0][j];
+    int iIdx, oIdx;
+    for (iIdx = inputOffsets[0], oIdx = outputOffsets[0];
+         iIdx < inputOffsets[0] + dataLen; iIdx++, oIdx++) {
+      output[oIdx] = inputs[0][iIdx];
-      for (int j = 0; j < bufSize; j++) {
-        outputs[0][j] ^= inputs[i][j];
+      for (iIdx = inputOffsets[i], oIdx = outputOffsets[0];
+           iIdx < inputOffsets[i] + dataLen; iIdx++, oIdx++) {
+        output[oIdx] ^= inputs[i][iIdx];
-

INS44 INS44 INS44 INS66 INS66 INS66 INS60 INS5 INS42 INS39 INS42 INS5 INS42 INS60 INS43 INS59 INS59 INS59 INS7 INS7 INS37 INS39 INS85 INS39 INS85 INS5 INS59 INS59 INS59 INS7 INS7 INS37 INS42 INS42 MOV2 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS32 UPD42 MOV32 UPD42 INS42 INS39 INS85 INS42 MOV2 INS42 INS2 INS42 UPD42 MOV42 INS42 INS42 INS2 INS42 INS2 UPD42 INS27 UPD42 INS42 INS2 INS42 INS42 INS42 UPD42 INS32 INS7 INS7 INS37 INS42 INS34 INS42 INS34 INS42 INS34 INS2 INS42 INS7 INS7 INS37 INS42 INS34 INS42 INS42 INS42 INS32 INS42 MOV32 INS42 INS32 UPD42 INS32 UPD42 INS42 INS42 INS34 INS42 INS2 INS42 INS2 UPD42 INS27 UPD42 INS42 MOV2 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS2 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS34 INS2 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS2 UPD42 MOV42 UPD42 INS2 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 MOV2 INS42 INS42 DEL42 DEL78 DEL42 DEL32 DEL59 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL32 DEL59 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL34 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL34 DEL2 DEL2