HDDS-1207. Refactor Container Report Processing logic and plugin new Replication Manager. (#662)



-package org.apache.hadoop.hdds.scm.container;
-import java.io.IOException;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.stream.Collectors;
+package org.apache.hadoop.hdds.scm.container;
-import org.apache.hadoop.hdds.scm.container.replication
-    .ReplicationActivityStatus;
-import org.apache.hadoop.hdds.scm.container.replication.ReplicationRequest;
-import org.apache.hadoop.hdds.scm.pipeline.PipelineManager;
-import org.apache.hadoop.hdds.scm.server
-    .SCMDatanodeHeartbeatDispatcher.ContainerReportFromDatanode;
+import org.apache.hadoop.hdds.scm.server.SCMDatanodeHeartbeatDispatcher
+    .ContainerReportFromDatanode;
-
-import com.google.common.base.Preconditions;
+import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
-public class ContainerReportHandler implements
-    EventHandler<ContainerReportFromDatanode> {
+public class ContainerReportHandler extends AbstractContainerReportHandler
+    implements EventHandler<ContainerReportFromDatanode> {
-  private final PipelineManager pipelineManager;
-  private final ReplicationActivityStatus replicationStatus;
+  /**
+   * Constructs ContainerReportHandler instance with the
+   * given NodeManager and ContainerManager instance.
+   *
+   * @param nodeManager NodeManager instance
+   * @param containerManager ContainerManager instance
+   */
-      final PipelineManager pipelineManager,
-      final ContainerManager containerManager,
-      final ReplicationActivityStatus replicationActivityStatus) {
-    Preconditions.checkNotNull(nodeManager);
-    Preconditions.checkNotNull(pipelineManager);
-    Preconditions.checkNotNull(containerManager);
-    Preconditions.checkNotNull(replicationActivityStatus);
+                                final ContainerManager containerManager) {
+    super(containerManager, LOG);
-    this.pipelineManager = pipelineManager;
-    this.replicationStatus = replicationActivityStatus;
+  /**
+   * Process the container reports from datanodes.
+   *
+   * @param reportFromDatanode Container Report
+   * @param publisher EventPublisher reference
+   */
-      final EventPublisher publisher) {
+                        final EventPublisher publisher) {
-
+      final List<ContainerReplicaProto> replicas =
+          containerReport.getReportsList();
+      final Set<ContainerID> containersInSCM =
+          nodeManager.getContainers(datanodeDetails);
-      final List<ContainerReplicaProto> replicas = containerReport
-          .getReportsList();
-
-      // ContainerIDs which SCM expects this datanode to have.
-      final Set<ContainerID> expectedContainerIDs = nodeManager
-          .getContainers(datanodeDetails);
-
-      // ContainerIDs that this datanode actually has.
-      final Set<ContainerID> actualContainerIDs = replicas.parallelStream()
+      final Set<ContainerID> containersInDn = replicas.parallelStream()
-      // Container replicas which SCM is not aware of.
-      final  Set<ContainerID> newReplicas =
-          new HashSet<>(actualContainerIDs);
-      newReplicas.removeAll(expectedContainerIDs);
+      final Set<ContainerID> missingReplicas = new HashSet<>(containersInSCM);
+      missingReplicas.removeAll(containersInDn);
-      // Container replicas which are missing from datanode.
-      final Set<ContainerID> missingReplicas =
-          new HashSet<>(expectedContainerIDs);
-      missingReplicas.removeAll(actualContainerIDs);
+      processContainerReplicas(datanodeDetails, replicas);
+      processMissingReplicas(datanodeDetails, missingReplicas);
+      updateDeleteTransaction(datanodeDetails, replicas, publisher);
-      processContainerReplicas(datanodeDetails, replicas, publisher);
-
-      // Remove missing replica from ContainerManager
-      for (ContainerID id : missingReplicas) {
-        try {
-          containerManager.getContainerReplicas(id)
-              .stream()
-              .filter(replica ->
-                  replica.getDatanodeDetails().equals(datanodeDetails))
-              .findFirst()
-              .ifPresent(replica -> {
-                try {
-                  containerManager.removeContainerReplica(id, replica);
-                } catch (ContainerNotFoundException |
-                    ContainerReplicaNotFoundException e) {
-                  // This should not happen, but even if it happens, not an
-                  // issue
-                }
-              });
-        } catch (ContainerNotFoundException e) {
-          LOG.warn("Cannot remove container replica, container {} not found {}",
-              id, e);
-        }
-      }
-
-      // Update the latest set of containers for this datanode in NodeManager.
-      nodeManager.setContainers(datanodeDetails, actualContainerIDs);
-
-      // Replicate if needed.
-      newReplicas.forEach(id -> checkReplicationState(id, publisher));
-      missingReplicas.forEach(id -> checkReplicationState(id, publisher));
+      /*
+       * Update the latest set of containers for this datanode in
+       * NodeManager
+       */
+      nodeManager.setContainers(datanodeDetails, containersInDn);
+  /**
+   * Processes the ContainerReport.
+   *
+   * @param datanodeDetails Datanode from which this report was received
+   * @param replicas list of ContainerReplicaProto
+   */
+      final List<ContainerReplicaProto> replicas) {
+    for (ContainerReplicaProto replicaProto : replicas) {
+      try {
+        processContainerReplica(datanodeDetails, replicaProto);
+      } catch (ContainerNotFoundException e) {
+        LOG.error("Received container report for an unknown container" +
+                " {} from datanode {}.", replicaProto.getContainerID(),
+            datanodeDetails, e);
+      } catch (IOException e) {
+        LOG.error("Exception while processing container report for container" +
+                " {} from datanode {}.", replicaProto.getContainerID(),
+            datanodeDetails, e);
+      }
+    }
+  }
+
+  /**
+   * Process the missing replica on the given datanode.
+   *
+   * @param datanodeDetails DatanodeDetails
+   * @param missingReplicas ContainerID which are missing on the given datanode
+   */
+  private void processMissingReplicas(final DatanodeDetails datanodeDetails,
+                                      final Set<ContainerID> missingReplicas) {
+    for (ContainerID id : missingReplicas) {
+      try {
+        containerManager.getContainerReplicas(id).stream()
+            .filter(replica -> replica.getDatanodeDetails()
+                .equals(datanodeDetails)).findFirst()
+            .ifPresent(replica -> {
+              try {
+                containerManager.removeContainerReplica(id, replica);
+              } catch (ContainerNotFoundException |
+                  ContainerReplicaNotFoundException ignored) {
+                // This should not happen, but even if it happens, not an issue
+              }
+            });
+      } catch (ContainerNotFoundException e) {
+        LOG.warn("Cannot remove container replica, container {} not found.",
+            id, e);
+      }
+    }
+  }
+
+  /**
+   * Updates the Delete Transaction Id for the given datanode.
+   *
+   * @param datanodeDetails DatanodeDetails
+   * @param replicas List of ContainerReplicaProto
+   * @param publisher EventPublisher reference
+   */
+  private void updateDeleteTransaction(final DatanodeDetails datanodeDetails,
-    for (ContainerReplicaProto replicaProto : replicas) {
+    for (ContainerReplicaProto replica : replicas) {
-        final ContainerID containerID = ContainerID.valueof(
-            replicaProto.getContainerID());
-
-        ReportHandlerHelper.processContainerReplica(containerManager,
-            containerID, replicaProto, datanodeDetails, publisher, LOG);
-
-        final ContainerInfo containerInfo = containerManager
-            .getContainer(containerID);
-
+        final ContainerInfo containerInfo = containerManager.getContainer(
+            ContainerID.valueof(replica.getContainerID()));
-            replicaProto.getDeleteTransactionId()) {
-          pendingDeleteStatusList
-              .addPendingDeleteStatus(replicaProto.getDeleteTransactionId(),
-                  containerInfo.getDeleteTransactionId(),
-                  containerInfo.getContainerID());
+            replica.getDeleteTransactionId()) {
+          pendingDeleteStatusList.addPendingDeleteStatus(
+              replica.getDeleteTransactionId(),
+              containerInfo.getDeleteTransactionId(),
+              containerInfo.getContainerID());
-      } catch (ContainerNotFoundException e) {
-        LOG.error("Received container report for an unknown container {} from"
-                + " datanode {} {}", replicaProto.getContainerID(),
-            datanodeDetails, e);
-      } catch (IOException e) {
-        LOG.error("Exception while processing container report for container"
-                + " {} from datanode {} {}", replicaProto.getContainerID(),
-            datanodeDetails, e);
+      } catch (ContainerNotFoundException cnfe) {
+        LOG.warn("Cannot update pending delete transaction for " +
+            "container #{}. Reason: container missing.",
+            replica.getContainerID());
-
-  private void checkReplicationState(ContainerID containerID,
-      EventPublisher publisher) {
-    try {
-      ContainerInfo container = containerManager.getContainer(containerID);
-      replicateIfNeeded(container, publisher);
-    } catch (ContainerNotFoundException ex) {
-      LOG.warn("Container is missing from containerStateManager. Can't request "
-          + "replication. {} {}", containerID, ex);
-    }
-
-  }
-
-  private void replicateIfNeeded(ContainerInfo container,
-      EventPublisher publisher) throws ContainerNotFoundException {
-    if (!container.isOpen() && replicationStatus.isReplicationEnabled()) {
-      final int existingReplicas = containerManager
-          .getContainerReplicas(container.containerID()).size();
-      final int expectedReplicas = container.getReplicationFactor().getNumber();
-      if (existingReplicas != expectedReplicas) {
-        publisher.fireEvent(SCMEvents.REPLICATE_CONTAINER,
-            new ReplicationRequest(container.getContainerID(),
-                existingReplicas, expectedReplicas));
-      }
-    }
-  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 INS43 INS31 INS31 UPD42 MOV42 INS29 MOV83 MOV42 MOV44 MOV44 INS8 INS29 INS29 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 INS8 INS29 INS42 INS44 INS44 MOV8 INS29 UPD42 INS65 INS65 INS65 INS46 MOV21 MOV21 INS65 INS65 INS65 INS65 INS65 INS65 INS83 UPD43 UPD42 INS83 INS74 INS42 INS70 INS65 INS65 INS65 INS83 INS43 INS42 INS83 MOV74 INS42 INS65 INS65 INS65 INS65 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS8 INS66 INS42 INS66 INS42 INS66 UPD42 INS43 INS43 MOV44 INS42 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS44 MOV60 MOV60 MOV60 MOV60 INS21 INS21 INS21 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS54 INS43 INS42 INS32 INS32 INS32 INS32 INS32 INS8 INS12 MOV12 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 MOV44 INS8 MOV44 INS44 UPD42 INS32 MOV21 INS43 INS42 MOV43 INS59 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 MOV42 UPD42 UPD42 INS27 MOV32 UPD42 INS42 UPD42 MOV32 UPD42 UPD42 UPD45 INS42 INS42 INS32 UPD42 UPD42 INS32 INS45 INS45 UPD45 UPD45 MOV42 MOV42 MOV32 UPD45 UPD45 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL32 DEL59 DEL60 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL27 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL40 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL32 DEL59 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12