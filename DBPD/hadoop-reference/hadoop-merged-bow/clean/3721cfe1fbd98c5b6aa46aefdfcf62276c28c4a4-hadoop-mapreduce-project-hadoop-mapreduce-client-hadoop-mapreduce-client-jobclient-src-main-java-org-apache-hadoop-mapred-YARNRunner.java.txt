MAPREDUCE-6871. Allow users to specify racks and nodes for strict locality for AMs (rkanter)

-import java.util.Collections;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+  private static final String RACK_GROUP = "rack";
+  private static final String NODE_IF_RACK_GROUP = "node1";
+  private static final String NODE_IF_NO_RACK_GROUP = "node2";
+
+  /**
+   * Matches any of the following patterns with capturing groups:
+   * <ul>
+   *  <li>/rack</li>
+   *  <li>/rack/node</li>
+   *  <li>node (assumes /default-rack)</li>
+   * </ul>
+   * The groups can be retrieved using the RACK_GROUP, NODE_IF_RACK_GROUP,
+   * and/or NODE_IF_NO_RACK_GROUP group keys.
+   */
+  private static final Pattern RACK_NODE_PATTERN =
+      Pattern.compile(
+          String.format("(?<%s>[^/]+?)|(?<%s>/[^/]+?)(?:/(?<%s>[^/]+?))?",
+          NODE_IF_NO_RACK_GROUP, RACK_GROUP, NODE_IF_RACK_GROUP));
+
-    // Setup resource requirements
-    Resource capability = recordFactory.newRecordInstance(Resource.class);
-    capability.setMemorySize(
-        conf.getInt(
-            MRJobConfig.MR_AM_VMEM_MB, MRJobConfig.DEFAULT_MR_AM_VMEM_MB
-        )
-    );
-    capability.setVirtualCores(
-        conf.getInt(
-            MRJobConfig.MR_AM_CPU_VCORES, MRJobConfig.DEFAULT_MR_AM_CPU_VCORES
-        )
-    );
-    LOG.debug("AppMaster capability = " + capability);
-
-    appContext.setResource(capability);
-    // set labels for the AM container request if present
+    // Setup the AM ResourceRequests
+    List<ResourceRequest> amResourceRequests = generateResourceRequests();
+    appContext.setAMContainerResourceRequests(amResourceRequests);
+
+    // set labels for the AM container requests if present
-      ResourceRequest amResourceRequest =
-          recordFactory.newRecordInstance(ResourceRequest.class);
-      amResourceRequest.setPriority(AM_CONTAINER_PRIORITY);
-      amResourceRequest.setResourceName(ResourceRequest.ANY);
-      amResourceRequest.setCapability(capability);
-      amResourceRequest.setNumContainers(1);
-      amResourceRequest.setNodeLabelExpression(amNodelabelExpression.trim());
-      appContext.setAMContainerResourceRequests(
-          Collections.singletonList(amResourceRequest));
+      for (ResourceRequest amResourceRequest : amResourceRequests) {
+        amResourceRequest.setNodeLabelExpression(amNodelabelExpression.trim());
+      }
+  private List<ResourceRequest> generateResourceRequests() throws IOException {
+    Resource capability = recordFactory.newRecordInstance(Resource.class);
+    capability.setMemorySize(
+        conf.getInt(
+            MRJobConfig.MR_AM_VMEM_MB, MRJobConfig.DEFAULT_MR_AM_VMEM_MB
+        )
+    );
+    capability.setVirtualCores(
+        conf.getInt(
+            MRJobConfig.MR_AM_CPU_VCORES, MRJobConfig.DEFAULT_MR_AM_CPU_VCORES
+        )
+    );
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("AppMaster capability = " + capability);
+    }
+
+    List<ResourceRequest> amResourceRequests = new ArrayList<>();
+    // Always have an ANY request
+    ResourceRequest amAnyResourceRequest =
+        createAMResourceRequest(ResourceRequest.ANY, capability);
+    Map<String, ResourceRequest> rackRequests = new HashMap<>();
+    amResourceRequests.add(amAnyResourceRequest);
+    Collection<String> amStrictResources = conf.getStringCollection(
+        MRJobConfig.AM_STRICT_LOCALITY);
+    for (String amStrictResource : amStrictResources) {
+      amAnyResourceRequest.setRelaxLocality(false);
+      Matcher matcher = RACK_NODE_PATTERN.matcher(amStrictResource);
+      if (matcher.matches()) {
+        String nodeName;
+        String rackName = matcher.group(RACK_GROUP);
+        if (rackName == null) {
+          rackName = "/default-rack";
+          nodeName = matcher.group(NODE_IF_NO_RACK_GROUP);
+        } else {
+          nodeName = matcher.group(NODE_IF_RACK_GROUP);
+        }
+        ResourceRequest amRackResourceRequest = rackRequests.get(rackName);
+        if (amRackResourceRequest == null) {
+          amRackResourceRequest = createAMResourceRequest(rackName, capability);
+          amResourceRequests.add(amRackResourceRequest);
+          rackRequests.put(rackName, amRackResourceRequest);
+        }
+        if (nodeName != null) {
+          amRackResourceRequest.setRelaxLocality(false);
+          ResourceRequest amNodeResourceRequest =
+              createAMResourceRequest(nodeName, capability);
+          amResourceRequests.add(amNodeResourceRequest);
+        }
+      } else {
+        String errMsg =
+            "Invalid resource name: " + amStrictResource + " specified.";
+        LOG.warn(errMsg);
+        throw new IOException(errMsg);
+      }
+    }
+    if (LOG.isDebugEnabled()) {
+      for (ResourceRequest amResourceRequest : amResourceRequests) {
+        LOG.debug("ResourceRequest: resource = "
+            + amResourceRequest.getResourceName() + ", locality = "
+            + amResourceRequest.getRelaxLocality());
+      }
+    }
+    return amResourceRequests;
+  }
+
+  private ResourceRequest createAMResourceRequest(String resource,
+      Resource capability) {
+    ResourceRequest resourceRequest =
+        recordFactory.newRecordInstance(ResourceRequest.class);
+    resourceRequest.setPriority(AM_CONTAINER_PRIORITY);
+    resourceRequest.setResourceName(resource);
+    resourceRequest.setCapability(capability);
+    resourceRequest.setNumContainers(1);
+    resourceRequest.setRelaxLocality(true);
+    return resourceRequest;
+  }
+

MOV26 INS26 UPD40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS74 INS42 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS65 INS42 INS42 INS32 INS60 MOV21 INS25 INS43 INS43 INS42 MOV60 MOV21 MOV21 INS25 INS60 INS60 INS60 INS21 INS60 INS70 INS25 INS41 INS42 INS43 INS42 INS43 INS42 MOV60 INS21 INS21 INS21 INS21 INS21 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS74 INS59 MOV27 INS8 INS42 INS42 INS32 INS8 INS74 INS59 INS43 INS59 INS74 INS59 INS32 INS74 INS59 INS44 INS42 INS8 INS32 INS8 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS43 INS42 INS32 UPD42 UPD42 UPD42 INS70 INS42 INS42 MOV21 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS60 INS25 INS42 INS42 INS70 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS9 INS42 INS42 UPD42 MOV42 INS44 INS42 INS8 INS42 INS42 INS74 INS42 INS40 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS43 INS59 INS32 INS8 INS8 INS44 INS42 INS8 INS43 INS42 MOV21 INS43 INS43 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS60 INS25 INS25 INS60 INS21 INS53 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS42 INS33 INS21 INS60 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS7 INS32 INS32 INS32 INS43 INS59 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25