HADOOP-14566. Add seek support for SFTP FileSystem. (#1999)


Contributed by Mikhail Pryakhin
+
+import java.io.EOFException;
+import com.jcraft.jsch.ChannelSftp;
+import com.jcraft.jsch.SftpATTRS;
+import com.jcraft.jsch.SftpException;
+
+import org.apache.hadoop.fs.FSExceptionMessages;
+import org.apache.hadoop.fs.Path;
-  public static final String E_SEEK_NOTSUPPORTED = "Seek not supported";
-  public static final String E_NULL_INPUTSTREAM = "Null InputStream";
-  public static final String E_STREAM_CLOSED = "Stream closed";
-
+  private final ChannelSftp channel;
+  private final Path path;
+  private long nextPos;
+  private long contentLength;
-  SFTPInputStream(InputStream stream,  FileSystem.Statistics stats) {
-
-    if (stream == null) {
-      throw new IllegalArgumentException(E_NULL_INPUTSTREAM);
+  SFTPInputStream(ChannelSftp channel, Path path, FileSystem.Statistics stats)
+      throws IOException {
+    try {
+      this.channel = channel;
+      this.path = path;
+      this.stats = stats;
+      this.wrappedStream = channel.get(path.toUri().getPath());
+      SftpATTRS stat = channel.lstat(path.toString());
+      this.contentLength = stat.getSize();
+    } catch (SftpException e) {
+      throw new IOException(e);
-    this.wrappedStream = stream;
-    this.stats = stats;
-
-    this.pos = 0;
-    this.closed = false;
-  public void seek(long position) throws IOException {
-    throw new IOException(E_SEEK_NOTSUPPORTED);
+  public synchronized void seek(long position) throws IOException {
+    checkNotClosed();
+    if (position < 0) {
+      throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);
+    }
+    nextPos = position;
+  }
+
+  @Override
+  public synchronized int available() throws IOException {
+    checkNotClosed();
+    long remaining = contentLength - nextPos;
+    if (remaining > Integer.MAX_VALUE) {
+      return Integer.MAX_VALUE;
+    }
+    return (int) remaining;
+  }
+
+  private void seekInternal() throws IOException {
+    if (pos == nextPos) {
+      return;
+    }
+    if (nextPos > pos) {
+      long skipped = wrappedStream.skip(nextPos - pos);
+      pos = pos + skipped;
+    }
+    if (nextPos < pos) {
+      wrappedStream.close();
+      try {
+        wrappedStream = channel.get(path.toUri().getPath());
+        pos = wrappedStream.skip(nextPos);
+      } catch (SftpException e) {
+        throw new IOException(e);
+      }
+    }
-    throw new IOException(E_SEEK_NOTSUPPORTED);
+    return false;
-  public long getPos() throws IOException {
-    return pos;
+  public synchronized long getPos() throws IOException {
+    return nextPos;
-    if (closed) {
-      throw new IOException(E_STREAM_CLOSED);
+    checkNotClosed();
+    if (this.contentLength == 0 || (nextPos >= contentLength)) {
+      return -1;
-
+    seekInternal();
+      nextPos++;
-  public synchronized int read(byte[] buf, int off, int len)
-      throws IOException {
-    if (closed) {
-      throw new IOException(E_STREAM_CLOSED);
-    }
-
-    int result = wrappedStream.read(buf, off, len);
-    if (result > 0) {
-      pos += result;
-    }
-    if (stats != null & result > 0) {
-      stats.incrementBytesRead(result);
-    }
-
-    return result;
-  }
-
+
+  private void checkNotClosed() throws IOException {
+    if (closed) {
+      throw new IOException(
+          path.toUri() + ": " + FSExceptionMessages.STREAM_IS_CLOSED
+      );
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 UPD83 UPD43 UPD83 UPD43 UPD83 MOV83 INS39 INS59 UPD83 MOV83 INS39 MOV59 INS44 MOV43 INS8 MOV78 MOV83 INS83 MOV39 MOV42 MOV44 MOV43 INS8 MOV78 MOV83 MOV83 MOV39 INS42 MOV43 INS8 INS83 INS39 INS42 MOV43 INS8 INS8 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS43 INS8 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD43 UPD42 INS43 INS42 INS54 INS21 INS25 INS21 INS21 INS60 INS25 INS41 MOV25 INS25 MOV25 INS41 INS42 INS42 MOV41 INS21 INS21 INS42 INS25 UPD42 UPD42 MOV42 INS8 INS12 INS32 INS27 INS8 INS7 INS32 INS39 INS59 INS27 INS8 INS11 INS27 INS8 INS27 INS8 INS27 INS8 INS9 UPD42 INS32 INS27 INS8 INS32 INS42 INS8 MOV21 MOV21 MOV21 INS21 INS60 MOV21 INS44 MOV8 INS42 INS42 INS34 MOV53 INS42 INS42 INS42 INS42 INS27 INS42 INS40 INS41 INS39 INS42 INS42 INS42 INS41 INS42 INS42 MOV60 MOV21 INS42 UPD42 MOV42 INS21 INS54 INS42 INS27 INS36 INS41 INS42 INS21 INS53 INS7 INS43 INS59 INS43 INS42 INS42 INS42 INS40 UPD39 UPD7 INS32 INS8 INS12 INS22 INS34 INS27 INS38 INS37 INS14 INS22 INS42 INS42 MOV22 INS32 INS42 INS42 INS32 INS32 INS42 INS43 INS40 UPD42 INS27 INS42 INS42 MOV21 INS21 INS44 MOV8 INS52 INS42 INS42 INS42 INS34 INS42 MOV43 INS27 INS52 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 UPD42 INS42 UPD42 INS27 INS42 INS42 INS7 INS7 INS43 INS42 INS32 INS45 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL45 DEL83 DEL45 DEL83 DEL42 DEL43 DEL23 DEL45 DEL42 DEL34 DEL9 DEL42 DEL33 DEL27 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL34 DEL27 DEL27 DEL8 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL14 DEL53 DEL8 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL8 DEL25 DEL8 DEL31