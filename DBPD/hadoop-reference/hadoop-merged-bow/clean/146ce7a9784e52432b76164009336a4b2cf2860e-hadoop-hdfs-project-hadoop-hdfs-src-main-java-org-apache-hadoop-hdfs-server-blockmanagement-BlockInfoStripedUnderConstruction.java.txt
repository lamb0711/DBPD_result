HDFS-7969. Erasure coding: NameNode support for lease recovery of striped block groups. Contributed by Zhe Zhang.

-public class BlockInfoStripedUnderConstruction extends BlockInfoStriped {
+public class BlockInfoStripedUnderConstruction extends BlockInfoStriped
+    implements BlockInfoUnderConstruction{
+   * Index of the primary data node doing the recovery. Useful for log
+   * messages.
+   */
+  private int primaryNodeIndex = -1;
+
+  /**
+  @Override
+  @Override
-  /** Get the number of expected locations */
+  @Override
-  /** Get block recovery ID */
+  @Override
-  /**
-   * Process the recorded replicas. When about to commit or finish the
-   * pipeline recovery sort out bad replicas.
-   * @param genStamp  The final generation stamp for the block.
-   */
+  @Override
+  public Block getTruncateBlock() {
+    return null;
+  }
+
+  @Override
+  public Block toBlock(){
+    return this;
+  }
+
+  @Override
-  /**
-   * Initialize lease recovery for this striped block.
-   */
+  @Override
-          " BlockInfoUnderConstruction.initLeaseRecovery:" +
+          " BlockInfoStripedUnderConstruction.initLeaseRecovery:" +
-    // TODO we need to implement different recovery logic here
+    boolean allLiveReplicasTriedAsPrimary = true;
+    for (ReplicaUnderConstruction replica : replicas) {
+      // Check if all replicas have been tried or not.
+      if (replica.isAlive()) {
+        allLiveReplicasTriedAsPrimary = (allLiveReplicasTriedAsPrimary &&
+            replica.getChosenAsPrimary());
+      }
+    }
+    if (allLiveReplicasTriedAsPrimary) {
+      // Just set all the replicas to be chosen whether they are alive or not.
+      for (ReplicaUnderConstruction replica : replicas) {
+        replica.setChosenAsPrimary(false);
+      }
+    }
+    long mostRecentLastUpdate = 0;
+    ReplicaUnderConstruction primary = null;
+    primaryNodeIndex = -1;
+    for(int i = 0; i < replicas.length; i++) {
+      // Skip alive replicas which have been chosen for recovery.
+      if (!(replicas[i].isAlive() && !replicas[i].getChosenAsPrimary())) {
+        continue;
+      }
+      final ReplicaUnderConstruction ruc = replicas[i];
+      final long lastUpdate = ruc.getExpectedStorageLocation()
+          .getDatanodeDescriptor().getLastUpdateMonotonic();
+      if (lastUpdate > mostRecentLastUpdate) {
+        primaryNodeIndex = i;
+        primary = ruc;
+        mostRecentLastUpdate = lastUpdate;
+      }
+    }
+    if (primary != null) {
+      primary.getExpectedStorageLocation().getDatanodeDescriptor()
+          .addBlockToBeRecovered(this);
+      primary.setChosenAsPrimary(true);
+      NameNode.blockStateChangeLog.info(
+          "BLOCK* {} recovery started, primary={}", this, primary);
+    }
-    sb.append("{UCState=").append(blockUCState).append(", replicas=[");
+    sb.append("{UCState=").append(blockUCState).
+        append(", primaryNodeIndex=").append(primaryNodeIndex).
+        append(", replicas=[");

INS43 INS23 INS31 INS31 INS31 INS42 INS29 INS83 INS39 INS59 INS78 INS78 INS78 INS78 MOV83 MOV39 MOV42 MOV8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS78 MOV65 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS60 INS70 INS25 INS60 INS60 INS21 INS24 INS25 UPD66 INS66 INS34 INS33 INS52 INS39 INS59 INS44 INS42 INS8 INS42 INS8 INS39 INS59 INS43 INS59 INS7 INS58 INS27 INS37 INS8 INS27 INS8 INS32 INS42 INS9 INS43 INS42 INS25 INS70 INS42 INS34 INS42 INS42 INS33 INS42 INS38 INS39 INS59 INS42 INS40 INS42 INS25 INS60 INS60 INS25 INS42 INS33 INS21 INS21 INS21 INS32 INS42 INS45 INS42 INS32 INS8 INS44 INS42 INS8 INS34 INS42 INS34 INS38 INS8 INS83 INS43 INS59 INS83 INS39 INS59 INS27 INS8 INS32 INS32 INS32 MOV32 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS21 INS36 INS18 INS42 INS42 INS2 INS42 INS32 INS42 INS42 INS21 INS21 INS21 INS32 INS42 INS52 INS42 INS42 INS9 INS40 INS42 INS45 INS52 INS42 UPD45 UPD45 INS7 INS42 INS32 INS27 INS42 INS42 INS32 INS42 INS7 INS7 INS7 INS32 INS42 INS42 INS36 INS42 INS42 INS9 INS32 INS38 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS2 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL29 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29