HADOOP-17058. ABFS: Support for AppendBlob in Hadoop ABFS Driver

- Contributed by Ishani Ahuja 
-                                      final String permission, final String umask) throws AzureBlobFileSystemException {
+                                      final String permission, final String umask,
+                                      final boolean isAppendBlob) throws AzureBlobFileSystemException {
+    if (isAppendBlob) {
+      abfsUriQueryBuilder.addQuery(QUERY_PARAM_BLOBTYPE, APPEND_BLOB_TYPE);
+    }
-                                  final int length, final String cachedSasToken) throws AzureBlobFileSystemException {
+                                  final int length, final String cachedSasToken, final boolean isAppendBlob) throws AzureBlobFileSystemException {
-    op.execute();
+    try {
+      op.execute();
+    } catch (AzureBlobFileSystemException e) {
+      if (isAppendBlob && appendSuccessCheckOp(op, path, (position + length))) {
+        final AbfsRestOperation successOp = new AbfsRestOperation(
+            AbfsRestOperationType.Append,
+                this,
+                HTTP_METHOD_PUT,
+                url,
+                requestHeaders, buffer, offset, length, sasTokenForReuse);
+        successOp.hardSetResult(HttpURLConnection.HTTP_OK);
+        return successOp;
+      }
+      throw e;
+    }
+
+  // For AppendBlob its possible that the append succeeded in the backend but the request failed.
+  // However a retry would fail with an InvalidQueryParameterValue
+  // (as the current offset would be unacceptable).
+  // Hence, we pass/succeed the appendblob append call
+  // in case we are doing a retry after checking the length of the file
+  public boolean appendSuccessCheckOp(AbfsRestOperation op, final String path,
+                                       final long length) throws AzureBlobFileSystemException {
+    if ((op.isARetriedRequest())
+        && (op.getResult().getStatusCode() == HttpURLConnection.HTTP_BAD_REQUEST)) {
+      final AbfsRestOperation destStatusOp = getPathStatus(path, false);
+      if (destStatusOp.getResult().getStatusCode() == HttpURLConnection.HTTP_OK) {
+        String fileLength = destStatusOp.getResult().getResponseHeader(
+            HttpHeaderConfigurations.CONTENT_LENGTH);
+        if (length <= Long.parseLong(fileLength)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+

INS31 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS25 INS83 INS39 INS42 INS54 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS25 INS41 INS42 INS8 INS8 INS12 INS42 INS42 INS27 INS8 INS9 INS21 MOV21 INS44 INS8 INS36 INS36 INS60 INS25 INS32 INS43 INS42 INS25 INS53 INS32 INS27 INS83 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS32 INS40 INS60 INS25 INS42 INS32 INS60 INS21 INS41 INS32 INS42 INS42 INS42 INS9 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS36 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS41 INS27 INS42 INS42 INS14 INS42 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS42 INS9 INS42 INS42 INS43 INS40 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42