SUBMARINE-62. PS_LAUNCH_CMD CLI description is wrong in RunJobCli. Contributed by Adam Antal

+
+  private static final String TENSORFLOW = "TensorFlow";
+  private static final String PYTORCH = "PyTorch";
+  private static final String PS = "PS";
+  private static final String WORKER = "worker";
+  private static final String TENSORBOARD = "TensorBoard";
+
-      "Can be used with TensorFlow or PyTorch frameworks.";
-  private static final String CAN_BE_USED_WITH_TF_ONLY =
-      "Can only be used with TensorFlow framework.";
+      String.format("Can be used with %s or %s frameworks.",
+          TENSORFLOW, PYTORCH);
+  private static final String TENSORFLOW_ONLY =
+      String.format("Can only be used with %s framework.", TENSORFLOW);
-
+  private static final String LOCAL_OR_ANY_FS_DIRECTORY = "Could be a local " +
+      "directory or any other directory on the file system.";
-        "Input of the job, could be local or other FS directory");
+        "Input of the job. " + LOCAL_OR_ANY_FS_DIRECTORY);
-        "Training output directory of the job, "
-            + "could be local or other FS directory. This typically includes "
-            + "checkpoint files and exported model ");
+        "Training output directory of the job. " + LOCAL_OR_ANY_FS_DIRECTORY +
+            "This typically includes checkpoint files and exported model");
-        "Model exported path (savedmodel) of the job, which is needed when "
-            + "exported model is not placed under ${checkpoint_path}"
-            + "could be local or other FS directory. " +
-            "This will be used to serve.");
+        "Model exported path (saved model) of the job, which is needed when " +
+            "exported model is not placed under ${checkpoint_path}. " +
+            LOCAL_OR_ANY_FS_DIRECTORY + "This will be used to serve");
+    options.addOption(CliConstants.PS_DOCKER_IMAGE, true,
+        getDockerImageMessage(PS));
+    options.addOption(CliConstants.WORKER_DOCKER_IMAGE, true,
+        getDockerImageMessage(WORKER));
-        "Name of queue to run the job, by default it uses default queue");
+        "Name of queue to run the job. By default, the default queue is used");
-        "Common environment variable of worker/ps");
+        "Common environment variable passed to worker / PS");
-        "Specified when user want to wait the job finish");
-    options.addOption(CliConstants.QUICKLINK, true, "Specify quicklink so YARN"
-        + "web UI shows link to given role instance and port. When "
-        + "--tensorboard is specified, quicklink to tensorboard instance will "
-        + "be added automatically. The format of quick link is: "
-        + "Quick_link_label=http(or https)://role-name:port. For example, "
-        + "if want to link to first worker's 7070 port, and text of quicklink "
-        + "is Notebook_UI, user need to specify --quicklink "
-        + "Notebook_UI=https://master-0:7070");
+        "Specified when user wants to wait for jobs to finish");
+    options.addOption(CliConstants.QUICKLINK, true, "Specify quicklink so YARN "
+        + "web UI shows link to the given role instance and port. " +
+        "When --tensorboard is specified, quicklink to the " +
+        TENSORBOARD + " instance will be added automatically. " +
+        "The format of quick link is: "
+        + "Quick_link_label=http(or https)://role-name:port. " +
+        "For example, if users want to link to the first worker's 7070 port, " +
+        "and text of quicklink is Notebook_UI, " +
+        "users need to specify --quicklink Notebook_UI=https://master-0:7070");
-        + " Argument format is \"RemoteUri:LocalFilePath[:rw] \" (ro"
-        + " permission is not supported yet)"
-        + " The RemoteUri can be a file or directory in local or"
-        + " HDFS or s3 or abfs or http .etc."
+        + " Argument format is: \"RemoteUri:LocalFilePath[:rw] \" "
+        + "(ro permission is not supported yet)."
+        + " The RemoteUri can be a local file or directory on the filesystem."
+        + " Alternatively, the following remote file systems / "
+        + "transmit mechanisms can be used: "
+        + " HDFS, S3 or abfs, HTTP, etc."
-        + " If it's a relative path, it'll be"
+        + " If it is a relative path, it will be"
-        + " but sub directory is not supported yet."
-        + " This option can be set mutiple times."
+        + " but sub-directory is not supported yet."
+        + " This option can be set multiple times."
-        "job under security environment");
+        "job under a secured environment");
-        "by the job under security environment");
+        "by the job under a secured environment");
-        "local keytab to cluster machines for service authentication. If not " +
-        "specified, pre-distributed keytab of which path specified by" +
+        "local keytab to cluster machines for service authentication. " +
+        "If not specified, pre-distributed keytab of which path specified by" +
-        "Number of worker tasks of the job, by default it's 1." +
+        getNumberOfServiceMessage(WORKER, 1) +
-        "Specify docker image for WORKER, when this is not specified, WORKER "
-            + "uses --" + CliConstants.DOCKER_IMAGE + " as default." +
+        getDockerImageMessage(WORKER) +
-        "Commandline of worker, arguments will be "
-            + "directly used to launch the worker" +
+        getLaunchCommandMessage(WORKER) +
-        "Resource of each worker, for example "
-            + "memory-mb=2048,vcores=2,yarn.io/gpu=2" +
+        getServiceResourceMessage(WORKER) +
-        "Number of PS tasks of the job, by default it's 0. " +
-            CAN_BE_USED_WITH_TF_ONLY);
+        getNumberOfServiceMessage("PS", 0) +
+            TENSORFLOW_ONLY);
-        "Specify docker image for PS, when this is not specified, PS uses --"
-            + CliConstants.DOCKER_IMAGE + " as default." +
-            CAN_BE_USED_WITH_TF_ONLY);
+        getDockerImageMessage(PS) +
+            TENSORFLOW_ONLY);
-        "Commandline of worker, arguments will be "
-            + "directly used to launch the PS" +
-            CAN_BE_USED_WITH_TF_ONLY);
+        getLaunchCommandMessage("PS") +
+            TENSORFLOW_ONLY);
-        "Resource of each PS, for example "
-            + "memory-mb=2048,vcores=2,yarn.io/gpu=2" +
-            CAN_BE_USED_WITH_TF_ONLY);
+        getServiceResourceMessage("PS") +
+            TENSORFLOW_ONLY);
-        "Should we run TensorBoard"
-            + " for this job? By default it's disabled." +
-            CAN_BE_USED_WITH_TF_ONLY);
+        "Should we run TensorBoard for this job? " +
+            "By default, TensorBoard is disabled." +
+            TENSORFLOW_ONLY);
-        "Specify resources of Tensorboard, by default it is "
+        "Specifies resources of Tensorboard. The default resource is: "
-            CAN_BE_USED_WITH_TF_ONLY);
+            TENSORFLOW_ONLY);
-        "Specify Tensorboard docker image. when this is not "
-            + "specified, Tensorboard " + "uses --" + CliConstants.DOCKER_IMAGE
-            + " as default." +
-            CAN_BE_USED_WITH_TF_ONLY);
+        getDockerImageMessage(TENSORBOARD));
+  }
+
+  private String getLaunchCommandMessage(String service) {
+    return String.format("Launch command of the %s, arguments will be "
+        + "directly used to launch the %s", service, service);
+  }
+
+  private String getServiceResourceMessage(String serviceType) {
+    return String.format("Resource of each %s process, for example: "
+        + "memory-mb=2048,vcores=2,yarn.io/gpu=2", serviceType);
+  }
+
+  private String getNumberOfServiceMessage(String serviceType,
+      int defaultValue) {
+    return String.format("Number of %s processes for the job. " +
+        "The default value is %d.", serviceType, defaultValue);
+  }
+
+  private String getDockerImageMessage(String serviceType) {
+    return String.format("Specifies docker image for the %s process. " +
+            "When not specified, %s uses --%s as a default value.",
+        serviceType, serviceType, CliConstants.DOCKER_IMAGE);

INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS43 INS43 INS83 INS83 INS83 INS43 INS59 MOV44 MOV83 MOV39 MOV42 MOV44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS32 INS42 UPD42 INS32 INS42 INS42 INS27 INS21 INS21 MOV21 MOV21 INS21 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS45 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS42 INS42 INS40 INS9 INS32 INS42 INS42 INS40 INS9 INS32 UPD45 UPD45 UPD45 MOV42 MOV42 MOV40 MOV9 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS40 INS45 INS42 UPD45 INS42 UPD45 INS27 INS42 UPD45 INS42 INS42 INS42 INS42 INS27 INS42 INS45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 INS45 INS45 UPD45 UPD45 UPD45 UPD45 UPD45 UPD45 INS32 INS32 INS32 INS32 INS32 UPD42 INS32 UPD42 INS32 UPD42 INS32 UPD42 UPD45 UPD45 UPD42 UPD45 UPD42 INS42 INS42 INS45 INS45 INS45 INS45 INS45 INS45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 MOV45 UPD45 UPD45 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS34 INS42 INS42 INS42 INS45 INS42 INS45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL40 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL40 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL40 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL31