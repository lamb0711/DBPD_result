YARN-9080.  Added clean up of bucket directories.
            Contributed by Prabhu Joseph, Peter Bacsko, Szilard Nemeth

+import org.apache.commons.lang3.mutable.MutableBoolean;
+import org.apache.commons.lang3.StringUtils;
-   * @param fs
-  void cleanLogs(Path dirpath, FileSystem fs, long retainMillis)
+  void cleanLogs(Path dirpath, long retainMillis)
+    RemoteIterator<FileStatus> iter = list(dirpath);
+    while (iter.hasNext()) {
+      FileStatus stat = iter.next();
+      Path clusterTimeStampPath = stat.getPath();
+      if (isValidClusterTimeStampDir(clusterTimeStampPath)) {
+        MutableBoolean appLogDirPresent = new MutableBoolean(false);
+        cleanAppLogDir(clusterTimeStampPath, retainMillis, appLogDirPresent);
+        if (appLogDirPresent.isFalse() &&
+            (now - stat.getModificationTime() > retainMillis)) {
+          deleteDir(clusterTimeStampPath);
+        }
+      }
+    }
+  }
+
+
+  private void cleanAppLogDir(Path dirpath, long retainMillis,
+      MutableBoolean appLogDirPresent) throws IOException {
+    long now = Time.now();
+      Path childPath = stat.getPath();
-        ApplicationId appId = parseApplicationId(dirpath.getName());
+        ApplicationId appId = parseApplicationId(childPath.getName());
-          if (shouldCleanAppLogDir(dirpath, now, fs, retainMillis)) {
-            try {
-              LOG.info("Deleting {}", dirpath);
-              if (!fs.delete(dirpath, true)) {
-                LOG.error("Unable to remove " + dirpath);
-              }
-              metrics.incrLogsDirsCleaned();
-            } catch (IOException e) {
-              LOG.error("Unable to remove " + dirpath, e);
-            }
+          appLogDirPresent.setTrue();
+          if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {
+            deleteDir(childPath);
-          cleanLogs(stat.getPath(), fs, retainMillis);
+          cleanAppLogDir(childPath, retainMillis, appLogDirPresent);
+  private void deleteDir(Path path) {
+    try {
+      LOG.info("Deleting {}", path);
+      if (fs.delete(path, true)) {
+        metrics.incrLogsDirsCleaned();
+      } else {
+        LOG.error("Unable to remove {}", path);
+      }
+    } catch (IOException e) {
+      LOG.error("Unable to remove {}", path, e);
+    }
+  }
+
+  private boolean isValidClusterTimeStampDir(Path clusterTimeStampPath)
+      throws IOException {
+    FileStatus stat = fs.getFileStatus(clusterTimeStampPath);
+    return stat.isDirectory() &&
+        StringUtils.isNumeric(clusterTimeStampPath.getName());
+  }
+
+
-        cleanLogs(doneRootPath, fs, logRetainMillis);
+        cleanLogs(doneRootPath, logRetainMillis);

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 MOV29 MOV78 MOV78 MOV39 MOV42 MOV44 MOV44 MOV43 INS8 INS83 INS39 INS42 MOV44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS60 INS60 INS61 UPD43 UPD42 INS39 INS42 INS43 INS42 INS42 MOV60 MOV60 INS61 INS43 INS42 MOV54 INS43 INS42 INS42 INS60 INS41 INS39 INS59 INS74 INS59 INS32 INS8 UPD42 INS42 MOV32 INS8 INS42 INS42 INS43 INS59 INS27 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS25 MOV60 INS60 INS25 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 MOV32 INS8 INS32 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS21 INS25 INS42 INS42 MOV32 MOV60 INS25 UPD42 MOV42 MOV42 UPD42 MOV42 MOV9 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS27 INS8 MOV27 INS8 INS8 INS45 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS36 INS21 INS21 INS25 INS21 INS45 INS42 INS43 INS9 INS42 INS42 INS27 INS32 INS32 MOV32 INS8 INS32 INS42 INS27 INS42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL65 DEL32 DEL38 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL8 DEL25 DEL8 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL8 DEL31 DEL42