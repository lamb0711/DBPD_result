HADOOP-13157. Follow-on improvements to hadoop credential commands. Contributed by Mike Yoder.

+import java.io.InputStream;
+import java.net.URL;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.commons.io.IOUtils;
+  @VisibleForTesting
+  public static final String NO_PASSWORD_WARN =
+      "WARNING: You have accepted the use of the default provider password\n" +
+      "by not configuring a password in one of the two following locations:\n";
+  @VisibleForTesting
+  public static final String NO_PASSWORD_ERROR =
+      "ERROR: The provider cannot find a password in the expected " +
+      "locations.\nPlease supply a password using one of the " +
+      "following two mechanisms:\n";
+  @VisibleForTesting
+  public static final String NO_PASSWORD_CONT =
+      "Continuing with the default provider password.\n";
+  @VisibleForTesting
+  public static final String NO_PASSWORD_INSTRUCTIONS_DOC =
+      "Please review the documentation regarding provider passwords in\n" +
+      "the keystore passwords section of the Credential Provider API\n";
+
+
+  /**
+   * The password is either found in the environment or in a file. This
+   * routine implements the logic for locating the password in these
+   * locations.
+   *
+   * @param envWithPass  The name of the environment variable that might
+   *                     contain the password. Must not be null.
+   * @param fileWithPass The name of a file that could contain the password.
+   *                     Can be null.
+   * @return The password as a char []; null if not found.
+   * @throws IOException If fileWithPass is non-null and points to a
+   * nonexistent file or a file that fails to open and be read properly.
+   */
+  public static char[] locatePassword(String envWithPass, String fileWithPass)
+      throws IOException {
+    char[] pass = null;
+    // Get the password file from the conf, if not present from the user's
+    // environment var
+    if (System.getenv().containsKey(envWithPass)) {
+      pass = System.getenv(envWithPass).toCharArray();
+    }
+    if (pass == null) {
+      if (fileWithPass != null) {
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        URL pwdFile = cl.getResource(fileWithPass);
+        if (pwdFile == null) {
+          // Provided Password file does not exist
+          throw new IOException("Password file does not exist");
+        }
+        try (InputStream is = pwdFile.openStream()) {
+          pass = IOUtils.toString(is).trim().toCharArray();
+        }
+      }
+    }
+    return pass;
+  }
+
+  private static String noPasswordInstruction(String envKey, String fileKey) {
+    return
+        "    * In the environment variable " + envKey + "\n" +
+        "    * In a file referred to by the configuration entry\n" +
+        "      " + fileKey + ".\n" +
+        NO_PASSWORD_INSTRUCTIONS_DOC;
+  }
+
+  public static String noPasswordWarning(String envKey, String fileKey) {
+    return NO_PASSWORD_WARN + noPasswordInstruction(envKey, fileKey) +
+        NO_PASSWORD_CONT;
+  }
+
+  public static String noPasswordError(String envKey, String fileKey) {
+    return NO_PASSWORD_ERROR + noPasswordInstruction(envKey, fileKey);
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS65 INS65 INS65 INS65 INS65 INS39 INS85 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS25 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS5 INS59 INS32 INS8 INS27 INS8 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS39 INS85 INS42 INS33 INS32 INS42 INS42 INS21 INS42 INS33 INS25 INS45 INS42 INS45 INS45 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS60 INS25 INS54 INS32 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS58 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS43 INS59 INS21 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS7 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42