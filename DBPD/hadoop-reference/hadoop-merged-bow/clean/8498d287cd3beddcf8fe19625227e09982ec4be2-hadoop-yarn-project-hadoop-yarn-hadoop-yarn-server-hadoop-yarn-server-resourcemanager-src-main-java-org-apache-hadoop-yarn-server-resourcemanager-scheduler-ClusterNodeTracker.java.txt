YARN-7541. Node updates don't update the maximum cluster capability for resources other than CPU and memory

+import org.apache.hadoop.yarn.api.records.ResourceInformation;
+import org.apache.hadoop.yarn.util.resource.ResourceUtils;
+import java.util.Arrays;
-  private long maxNodeMemory = -1;
-  private int maxNodeVCores = -1;
+  private final long[] maxAllocation;
+  private boolean reportedMaxAllocation = false;
+
+  public ClusterNodeTracker() {
+    maxAllocation = new long[ResourceUtils.getNumberOfKnownResourceTypes()];
+    Arrays.fill(maxAllocation, -1);
+  }
-      if (forceConfiguredMaxAllocation
-          || maxNodeMemory == -1 || maxNodeVCores == -1) {
+      if (forceConfiguredMaxAllocation || !reportedMaxAllocation) {
-      if (ret.getMemorySize() > maxNodeMemory) {
-        ret.setMemorySize(maxNodeMemory);
-      }
-      if (ret.getVirtualCores() > maxNodeVCores) {
-        ret.setVirtualCores(maxNodeVCores);
+
+      for (int i = 0; i < maxAllocation.length; i++) {
+        ResourceInformation info = ret.getResourceInformation(i);
+
+        if (info.getValue() > maxAllocation[i]) {
+          info.setValue(maxAllocation[i]);
+        }
+    ResourceInformation[] totalResources;
+
+    if (totalResource != null) {
+      totalResources = totalResource.getResources();
+    } else {
+      LOG.warn(node.getNodeName() + " reported in with null resources, which "
+          + "indicates a problem in the source code. Please file an issue at "
+          + "https://issues.apache.org/jira/secure/CreateIssue!default.jspa");
+
+      return;
+    }
+
+
-        long nodeMemory = totalResource.getMemorySize();
-        if (nodeMemory > maxNodeMemory) {
-          maxNodeMemory = nodeMemory;
-        }
-        int nodeVCores = totalResource.getVirtualCores();
-        if (nodeVCores > maxNodeVCores) {
-          maxNodeVCores = nodeVCores;
+        // If we add a node, we must have a max allocation for all resource
+        // types
+        reportedMaxAllocation = true;
+
+        for (int i = 0; i < maxAllocation.length; i++) {
+          long value = totalResources[i].getValue();
+
+          if (value > maxAllocation[i]) {
+            maxAllocation[i] = value;
+          }
-        if (maxNodeMemory == totalResource.getMemorySize()) {
-          maxNodeMemory = -1;
+        boolean recalculate = false;
+
+        for (int i = 0; i < maxAllocation.length; i++) {
+          if (totalResources[i].getValue() == maxAllocation[i]) {
+            // No need to set reportedMaxAllocation to false here because we
+            // will recalculate before we release the lock.
+            maxAllocation[i] = -1;
+            recalculate = true;
+          }
-        if (maxNodeVCores == totalResource.getVirtualCores()) {
-          maxNodeVCores = -1;
-        }
+
-        if (maxNodeMemory == -1 || maxNodeVCores == -1) {
+        if (recalculate) {
-          for (N n : nodes.values()) {
-            updateMaxResources(n, true);
-          }
+          reportedMaxAllocation = false;
+          nodes.values().forEach(n -> updateMaxResources(n, true));

INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS31 INS83 INS5 UPD39 INS83 INS42 INS8 INS8 INS39 INS85 UPD42 UPD42 INS9 INS21 INS21 MOV60 INS60 INS25 MOV21 INS54 INS7 INS32 INS5 INS59 INS27 INS8 INS8 INS8 MOV8 INS42 INS3 INS42 INS42 INS42 MOV38 INS25 INS24 INS43 INS85 UPD42 MOV42 INS42 INS33 INS21 INS21 INS41 INS25 INS5 INS32 INS27 MOV8 INS58 INS27 INS37 INS8 INS42 INS7 INS32 INS42 INS8 MOV8 INS39 INS85 INS42 INS42 MOV42 INS38 INS39 INS59 INS42 INS40 INS42 INS60 MOV25 INS42 INS32 INS42 INS42 INS27 MOV21 INS24 INS60 INS24 INS42 INS42 INS34 INS43 INS59 MOV42 UPD42 MOV42 INS32 INS45 INS45 INS45 INS58 INS27 INS37 INS8 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS32 INS2 INS42 INS42 UPD42 INS9 INS39 INS59 INS42 INS40 INS42 INS60 MOV25 INS42 INS9 INS39 INS59 INS42 INS40 INS42 MOV25 INS21 MOV21 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS34 INS39 MOV59 INS42 INS34 INS7 INS32 UPD42 UPD42 INS2 UPD42 UPD42 INS2 INS2 INS21 INS42 INS9 MOV32 INS42 INS86 INS42 INS42 INS2 UPD42 INS42 INS42 INS2 UPD42 INS42 INS42 INS7 INS59 MOV32 INS42 INS42 INS2 INS42 INS42 INS42 INS2 MOV38 INS42 INS9 INS42 INS42 INS42 INS42 INS42 DEL39 DEL34 DEL38 DEL42 DEL34 DEL38 DEL27 DEL27 DEL42 DEL34 DEL38 DEL27 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL38 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL34 DEL38 DEL7 DEL21 DEL8 DEL25 DEL42 DEL34 DEL38 DEL27 DEL42 DEL27 DEL27 DEL42 DEL43 DEL42 DEL44 DEL8 DEL70 DEL42 DEL39 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL8 DEL25 DEL39 DEL60 DEL8 DEL25 DEL8 DEL54 DEL8