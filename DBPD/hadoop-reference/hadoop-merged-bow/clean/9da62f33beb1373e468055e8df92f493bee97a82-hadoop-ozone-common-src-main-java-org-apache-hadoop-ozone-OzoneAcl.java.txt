Merge branch 'trunk' into HDDS-1535
+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLIdentityType;
+import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType;
+
+import java.util.ArrayList;
+import java.util.List;
-  private OzoneACLType type;
+  private ACLIdentityType type;
-  private OzoneACLRights rights;
+  private List<ACLType> rights;
-   * @param rights - Rights
+   * @param acl - Rights
-  public OzoneAcl(OzoneACLType type, String name, OzoneACLRights rights) {
+  public OzoneAcl(ACLIdentityType type, String name, ACLType acl) {
-    this.rights = rights;
+    this.rights = new ArrayList<>();
+    this.rights.add(acl);
-    if (type == OzoneACLType.WORLD && name.length() != 0) {
+    if (type == ACLIdentityType.WORLD && name.length() != 0) {
-    if (((type == OzoneACLType.USER) || (type == OzoneACLType.GROUP))
+    if (((type == ACLIdentityType.USER) || (type == ACLIdentityType.GROUP))
+        && (name.length() == 0)) {
+      throw new IllegalArgumentException("User or group name is required");
+    }
+  }
+
+  /**
+   * Constructor for OzoneAcl.
+   *
+   * @param type - Type
+   * @param name - Name of user
+   * @param acls - Rights
+   */
+  public OzoneAcl(ACLIdentityType type, String name, List<ACLType> acls) {
+    this.name = name;
+    this.rights = acls;
+    this.type = type;
+    if (type == ACLIdentityType.WORLD && name.length() != 0) {
+      throw new IllegalArgumentException("Unexpected name part in world type");
+    }
+    if (((type == ACLIdentityType.USER) || (type == ACLIdentityType.GROUP))
-    OzoneACLType aclType = OzoneACLType.valueOf(parts[0].toUpperCase());
-    OzoneACLRights rights = OzoneACLRights.getACLRight(parts[2].toLowerCase());
+    ACLIdentityType aclType = ACLIdentityType.valueOf(parts[0].toUpperCase());
+    List<ACLType> acls = new ArrayList<>();
+    for (char ch : parts[2].toCharArray()) {
+      acls.add(ACLType.getACLRight(String.valueOf(ch)));
+    }
-    return new OzoneAcl(aclType, parts[1], rights);
+    return new OzoneAcl(aclType, parts[1], acls);
-    return type + ":" + name + ":" + OzoneACLRights.getACLRightsString(rights);
+    return type + ":" + name + ":" + ACLType.getACLString(rights);
-  public OzoneACLRights getRights() {
+  public List<ACLType> getRights() {
-  public OzoneACLType getType() {
+  public ACLIdentityType getType() {
-    return otherAcl.getName().equals(this.getName()) &&
-        otherAcl.getRights() == this.getRights() &&
-        otherAcl.getType() == this.getType();
+    return otherAcl.toString().equals(this.toString());
-
-  /**
-   * ACL rights.
-   */
-  public enum OzoneACLRights {
-    READ, WRITE, READ_WRITE;
-
-    /**
-     * Returns the ACL rights based on passed in String.
-     *
-     * @param type ACL right string
-     *
-     * @return OzoneACLRights
-     */
-    public static OzoneACLRights getACLRight(String type) {
-      if (type == null || type.isEmpty()) {
-        throw new IllegalArgumentException("ACL right cannot be empty");
-      }
-
-      switch (type) {
-      case OzoneConsts.OZONE_ACL_READ:
-        return OzoneACLRights.READ;
-      case OzoneConsts.OZONE_ACL_WRITE:
-        return OzoneACLRights.WRITE;
-      case OzoneConsts.OZONE_ACL_READ_WRITE:
-      case OzoneConsts.OZONE_ACL_WRITE_READ:
-        return OzoneACLRights.READ_WRITE;
-      default:
-        throw new IllegalArgumentException("ACL right is not recognized");
-      }
-
-    }
-
-    /**
-     * Returns String representation of ACL rights.
-     * @param acl OzoneACLRights
-     * @return String representation of acl
-     */
-    public static String getACLRightsString(OzoneACLRights acl) {
-      switch(acl) {
-      case READ:
-        return OzoneConsts.OZONE_ACL_READ;
-      case WRITE:
-        return OzoneConsts.OZONE_ACL_WRITE;
-      case READ_WRITE:
-        return OzoneConsts.OZONE_ACL_READ_WRITE;
-      default:
-        throw new IllegalArgumentException("ACL right is not recognized");
-      }
-    }
-
-  }
-

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 UPD43 MOV83 INS74 MOV59 MOV29 MOV83 INS42 INS44 MOV44 INS44 MOV8 MOV78 MOV83 MOV43 INS42 MOV8 INS74 UPD43 UPD42 INS43 INS43 UPD43 UPD43 UPD42 INS21 INS21 INS65 UPD65 INS43 INS42 UPD42 INS74 INS42 INS21 INS21 MOV21 INS25 INS60 INS70 INS41 INS43 INS43 UPD42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 INS32 INS7 UPD66 UPD66 INS42 INS66 INS42 UPD66 UPD42 MOV42 INS43 INS43 INS7 INS7 UPD27 INS27 INS8 UPD43 INS74 INS59 INS44 MOV32 INS8 INS27 INS42 UPD42 MOV42 INS32 INS14 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS27 INS36 INS36 INS53 UPD42 INS43 INS43 UPD42 MOV42 INS14 INS39 INS42 UPD42 INS21 UPD42 INS42 INS45 INS42 INS45 INS32 MOV32 MOV42 MOV32 INS74 INS52 INS42 INS52 INS42 UPD40 INS52 INS42 INS52 INS42 INS40 MOV32 INS34 INS27 INS27 MOV14 UPD42 INS42 UPD42 MOV42 INS74 INS32 INS42 INS42 INS42 UPD42 UPD42 INS43 UPD42 UPD42 UPD45 INS36 INS36 INS32 INS34 UPD45 INS43 UPD42 MOV42 INS42 INS32 INS42 INS27 INS27 INS42 INS42 INS42 INS42 MOV42 INS32 UPD40 UPD40 INS42 INS40 INS42 INS40 INS42 INS42 INS42 DEL43 DEL23 DEL42 DEL33 DEL42 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL41 DEL40 DEL49 DEL40 DEL49 DEL40 DEL41 DEL49 DEL53 DEL50 DEL43 DEL32 DEL59 DEL60 DEL42 DEL42 DEL49 DEL40 DEL41 DEL42 DEL49 DEL40 DEL41 DEL42 DEL49 DEL40 DEL41 DEL49 DEL42 DEL43 DEL45 DEL14 DEL53 DEL50 DEL83 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL43 DEL32 DEL42 DEL42 DEL32 DEL52 DEL42 DEL32 DEL27 DEL27 DEL42 DEL42 DEL32 DEL52 DEL42 DEL32 DEL27 DEL27 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL83 DEL43 DEL42 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL71