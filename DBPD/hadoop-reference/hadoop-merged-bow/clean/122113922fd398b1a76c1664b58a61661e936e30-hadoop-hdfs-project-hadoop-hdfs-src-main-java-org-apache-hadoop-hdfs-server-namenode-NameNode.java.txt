Merging trunk to HDFS-1623 branch.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177117 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.HadoopIllegalArgumentException;
-import org.apache.hadoop.hdfs.HDFSPolicyProvider;
-import org.apache.hadoop.hdfs.protocol.UnregisteredNodeException;
-import org.apache.hadoop.hdfs.server.common.IncorrectVersionException;
+import org.apache.hadoop.hdfs.server.namenode.ha.HAContext;
-import org.apache.hadoop.hdfs.server.protocol.NodeRegistration;
-import org.apache.hadoop.ipc.RPC;
-import org.apache.hadoop.ipc.Server;
-
-
-
+  protected final Configuration conf;
+  private final HAContext haContext;
-  protected InetSocketAddress getServiceRpcServerAddress(Configuration conf)
-    throws IOException {
+  protected InetSocketAddress getServiceRpcServerAddress(Configuration conf) {
-  protected InetSocketAddress getRpcServerAddress(Configuration conf) throws IOException {
+  protected InetSocketAddress getRpcServerAddress(Configuration conf) {
-    initializeGenericKeys(conf);
-    activate(conf);
+    startCommonServices(conf);
-  /**
-   * Activate name-node servers and threads.
-   */
-  void activate(Configuration conf) throws IOException {
-    if ((isRole(NamenodeRole.NAMENODE))
-        && (UserGroupInformation.isSecurityEnabled())) {
-      namesystem.activateSecretManager();
-    }
-    namesystem.activate(conf);
-    startHttpServer(conf);
+  /** Start the services common to active and standby states */
+  private void startCommonServices(Configuration conf) throws IOException {
+    namesystem.startCommonServices(conf);
-    startTrashEmptier(conf);
-    
-    
-      LOG.info(getRole() + " service server is up at: " + rpcServer.getServiceRpcAddress()); 
+      LOG.info(getRole() + " service server is up at: "
+          + rpcServer.getServiceRpcAddress());
+    startHttpServer(conf);
-
+  
+  private void stopCommonServices() {
+    if(namesystem != null) namesystem.close();
+    if(rpcServer != null) rpcServer.stop();
+    if (plugins != null) {
+      for (ServicePlugin p : plugins) {
+        try {
+          p.stop();
+        } catch (Throwable t) {
+          LOG.warn("ServicePlugin " + p + " could not be stopped", t);
+        }
+      }
+    }   
+    stopHttpServer();
+  }
+  
+  private void stopTrashEmptier() {
+    if (this.emptier != null) {
+      emptier.interrupt();
+      emptier = null;
+    }
+  }
+  
+  
+  private void stopHttpServer() {
+    try {
+      if (httpServer != null) httpServer.stop();
+    } catch (Exception e) {
+      LOG.error("Exception while stopping httpserver", e);
+    }
+  }
-   * @throws IOException
+   * @throws IOException on error
-      throws IOException { 
+      throws IOException {
+    this.conf = conf;
-    this.state = !haEnabled ? ACTIVE_STATE : STANDBY_STATE;
+    this.haContext = new NameNodeHAContext();
+      initializeGenericKeys(conf, getNameServiceId(conf));
+      if (!haEnabled) {
+        state = ACTIVE_STATE;
+      } else {
+        state = STANDBY_STATE;;
+      }
+      state.enterState(haContext);
+    } catch (ServiceFailedException e) {
+      this.stop();
+      throw new IOException("Service failed to start", e);
+    } catch (HadoopIllegalArgumentException e) {
+      this.stop();
+      throw e;
+      LOG.info("Caught interrupted exception " + ie);
-    if (plugins != null) {
-      for (ServicePlugin p : plugins) {
-        try {
-          p.stop();
-        } catch (Throwable t) {
-          LOG.warn("ServicePlugin " + p + " could not be stopped", t);
-        }
-      }
-    }
-      if (httpServer != null) httpServer.stop();
-    } catch (Exception e) {
-      LOG.error("Exception while stopping httpserver", e);
+      state.exitState(haContext);
+    } catch (ServiceFailedException e) {
+      LOG.info("Encountered exception while exiting state " + e);
-    if(namesystem != null) namesystem.close();
-    if(emptier != null) emptier.interrupt();
-    if(rpcServer != null) rpcServer.stop();
+    stopCommonServices();
+   * @param nameserviceId name service Id
-  public static void initializeGenericKeys(Configuration conf) {
-    final String nameserviceId = DFSUtil.getNameServiceId(conf);
+  public static void initializeGenericKeys(Configuration conf, String
+      nameserviceId) {
-    
+  /** 
+   * Get the name service Id for the node
+   * @return name service Id or null if federation is not configured
+   */
+  protected String getNameServiceId(Configuration conf) {
+    return DFSUtil.getNamenodeNameServiceId(conf);
+  }
+  
-    state.setState(this, ACTIVE_STATE);
+    state.setState(haContext, ACTIVE_STATE);
-    state.setState(this, STANDBY_STATE);
+    state.setState(haContext, STANDBY_STATE);
-    state.checkOperation(this, op);
+    state.checkOperation(haContext, op);
-  public synchronized HAState getState() {
-    return state;
-  }
-  
-  public synchronized void setState(final HAState s) {
-    state = s;
+  /**
+   * Class used as expose {@link NameNode} as context to {@link HAState}
+   */
+  private class NameNodeHAContext implements HAContext {
+    @Override
+    public void setState(HAState s) {
+      state = s;
+    }
+
+    @Override
+    public HAState getState() {
+      return state;
+    }
+
+    @Override
+    public void startActiveServices() throws IOException {
+      namesystem.startActiveServices();
+      startTrashEmptier(conf);
+    }
+
+    @Override
+    public void stopActiveServices() throws IOException {
+      namesystem.stopActiveServices();
+      stopTrashEmptier();
+    }
+
+    @Override
+    public void startStandbyServices() throws IOException {
+      // TODO:HA Start reading editlog from active
+    }
+
+    @Override
+    public void stopStandbyServices() throws IOException {
+      // TODO:HA Stop reading editlog from active
+    }

MOV26 MOV26 MOV31 MOV31 UPD40 UPD40 INS23 INS23 INS31 INS31 INS31 INS31 INS55 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 MOV21 INS83 UPD42 MOV21 UPD83 UPD42 MOV25 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 MOV21 MOV29 INS83 INS39 INS42 INS8 INS44 INS29 INS83 MOV43 INS42 INS44 INS8 UPD42 UPD42 INS29 INS83 INS42 INS43 MOV31 MOV31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS21 INS25 MOV54 INS21 MOV51 INS54 INS21 MOV25 MOV25 INS65 INS43 INS42 INS65 INS65 INS43 INS42 INS41 INS65 INS42 INS78 INS78 INS78 INS83 INS39 INS42 MOV43 INS8 INS78 INS83 INS39 INS42 MOV43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 UPD66 INS32 INS27 INS8 INS66 INS7 INS8 INS12 INS12 INS8 INS12 INS32 INS42 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS65 INS66 INS65 INS42 INS42 INS42 INS21 MOV21 INS42 INS21 INS21 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS22 INS33 MOV21 INS21 INS42 INS22 INS14 INS21 MOV21 INS25 INS21 INS44 INS8 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS32 INS32 INS32 INS52 INS42 INS7 UPD42 INS52 INS42 INS43 INS32 MOV38 INS8 INS8 INS32 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS21 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS21 INS21 INS20 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS7 INS52 INS42 INS43 INS45 INS42 INS52 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL32 DEL36 DEL42 DEL42 DEL32 DEL36 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL16 DEL8 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL52 DEL52 DEL83 DEL83 DEL83