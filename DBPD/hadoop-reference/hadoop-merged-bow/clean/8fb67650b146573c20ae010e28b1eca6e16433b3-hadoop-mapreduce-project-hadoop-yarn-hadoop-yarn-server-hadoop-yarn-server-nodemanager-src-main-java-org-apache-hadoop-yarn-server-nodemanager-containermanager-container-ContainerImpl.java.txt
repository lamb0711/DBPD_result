MAPREDUCE-2691. Finish up the cleanup of distributed cache file resources and related tests. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167676 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.List;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.ContainerLocalizationCleanupEvent;
+  private final List<LocalResourceRequest> publicRsrcs =
+    new ArrayList<LocalResourceRequest>();
+  private final List<LocalResourceRequest> privateRsrcs =
+    new ArrayList<LocalResourceRequest>();
+  private final List<LocalResourceRequest> appRsrcs =
+    new ArrayList<LocalResourceRequest>();
-  @SuppressWarnings("fallthrough")
+  @SuppressWarnings({"fallthrough", "unchecked"})
+  @SuppressWarnings("unchecked") // dispatcher not typed
+  public void cleanup() {
+    Map<LocalResourceVisibility, Collection<LocalResourceRequest>> rsrc =
+      new HashMap<LocalResourceVisibility, 
+                  Collection<LocalResourceRequest>>();
+    if (!publicRsrcs.isEmpty()) {
+      rsrc.put(LocalResourceVisibility.PUBLIC, publicRsrcs);
+    }
+    if (!privateRsrcs.isEmpty()) {
+      rsrc.put(LocalResourceVisibility.PRIVATE, privateRsrcs);
+    }
+    if (!appRsrcs.isEmpty()) {
+      rsrc.put(LocalResourceVisibility.APPLICATION, appRsrcs);
+    }
+    dispatcher.getEventHandler().handle(
+        new ContainerLocalizationCleanupEvent(this, rsrc));
+  }
+
-        ArrayList<LocalResourceRequest> publicRsrc =
-          new ArrayList<LocalResourceRequest>();
-        ArrayList<LocalResourceRequest> privateRsrc =
-          new ArrayList<LocalResourceRequest>();
-        ArrayList<LocalResourceRequest> appRsrc =
-          new ArrayList<LocalResourceRequest>();
-              publicRsrc.add(req);
+              container.publicRsrcs.add(req);
-              privateRsrc.add(req);
+              container.privateRsrcs.add(req);
-              appRsrc.add(req);
+              container.appRsrcs.add(req);
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationEvent(
-               LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+          container.cleanup();
-        if (!publicRsrc.isEmpty()) {
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationRequestEvent(
-                container, publicRsrc, LocalResourceVisibility.PUBLIC));
+        Map<LocalResourceVisibility, Collection<LocalResourceRequest>> req =
+            new HashMap<LocalResourceVisibility, 
+                        Collection<LocalResourceRequest>>();
+        if (!container.publicRsrcs.isEmpty()) {
+          req.put(LocalResourceVisibility.PUBLIC, container.publicRsrcs);
-        if (!privateRsrc.isEmpty()) {
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationRequestEvent(
-                container, privateRsrc, LocalResourceVisibility.PRIVATE));
+        if (!container.privateRsrcs.isEmpty()) {
+          req.put(LocalResourceVisibility.PRIVATE, container.privateRsrcs);
-        if (!appRsrc.isEmpty()) {
-          container.dispatcher.getEventHandler().handle(
-              new ContainerLocalizationRequestEvent(
-                container, appRsrc, LocalResourceVisibility.APPLICATION));
+        if (!container.appRsrcs.isEmpty()) {
+          req.put(LocalResourceVisibility.APPLICATION, container.appRsrcs);
+        
+        container.dispatcher.getEventHandler().handle(
+              new ContainerLocalizationRequestEvent(container, req));
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-  @SuppressWarnings("unchecked") // dispatcher not typed
-      container.dispatcher.getEventHandler().handle(
-          new ContainerLocalizationEvent(
-            LocalizationEventType.CLEANUP_CONTAINER_RESOURCES, container));
+      container.cleanup();
-  @SuppressWarnings("unchecked") // dispatcher not typed
-        LOG.warn("Can't handle this event at current state", e);
+        LOG.warn("Can't handle this event at current state: Current: ["
+            + oldState + "], eventType: [" + event.getType() + "]", e);

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 MOV31 INS55 INS83 INS83 INS74 MOV59 INS83 INS83 INS74 MOV59 INS83 INS83 INS74 MOV59 MOV79 UPD42 INS83 INS42 MOV43 INS31 MOV43 INS43 INS43 UPD42 INS43 INS43 UPD42 INS43 INS43 UPD42 INS4 INS60 INS25 INS25 INS25 MOV78 INS83 INS39 INS42 MOV44 MOV44 INS8 MOV78 MOV44 MOV44 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS74 INS59 INS38 INS8 INS38 INS8 INS38 INS8 INS21 INS43 INS43 UPD74 MOV74 INS42 INS14 INS32 INS21 INS32 INS21 INS32 INS21 MOV60 INS32 INS42 INS42 UPD43 INS74 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD43 INS52 UPD42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS43 UPD74 MOV74 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 UPD42 INS74 INS59 INS42 INS42 UPD43 INS43 INS43 UPD74 MOV74 INS42 INS14 INS21 UPD42 INS42 INS42 UPD43 INS74 INS40 INS40 INS40 INS32 UPD42 UPD42 INS43 INS43 INS74 UPD42 MOV42 INS42 INS40 INS40 UPD42 MOV42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS27 INS42 INS42 INS42 INS42 INS43 INS43 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS40 INS40 INS40 DEL45 DEL40 DEL40 DEL60 DEL60 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL14 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL40 DEL14 DEL42 DEL40 DEL83 DEL42 DEL55 DEL42 DEL45 DEL79 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL42 DEL45 DEL79 DEL40 DEL42 DEL32 DEL42 DEL42 DEL43 DEL40 DEL42 DEL14 DEL42 DEL45 DEL79 DEL45