Merge trunk into HA branch


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1166495 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.ByteBuffer;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.List;
+
+
-
-
+import org.apache.hadoop.yarn.proto.YarnServiceProtos.StartContainerResponseProtoOrBuilder;
+import org.apache.hadoop.yarn.proto.YarnProtos.StringBytesMapProto;
-  
+ 
+  private Map<String, ByteBuffer> serviceResponse = null;
+
+    mergeLocalToProto();
+  private void mergeLocalToBuilder() {
+    if (this.serviceResponse != null) {
+      addServiceResponseToProto();
+    }
+  }
+  
+  private void mergeLocalToProto() {
+    if (viaProto) {
+      maybeInitBuilder();
+    }
+    mergeLocalToBuilder();
+    proto = builder.build();
+    viaProto = true;
+  }
+
-    
+   
+
+  @Override
+  public Map<String, ByteBuffer> getAllServiceResponse() {
+    initServiceResponse();
+    return this.serviceResponse;
+  }
+  @Override
+  public ByteBuffer getServiceResponse(String key) {
+    initServiceResponse();
+    return this.serviceResponse.get(key);
+  }
+  private void initServiceResponse() {
+    if (this.serviceResponse != null) {
+      return;
+    }
+    StartContainerResponseProtoOrBuilder p = viaProto ? proto : builder;
+    List<StringBytesMapProto> list = p.getServiceResponseList();
+    this.serviceResponse = new HashMap<String, ByteBuffer>();
-
-
+    for (StringBytesMapProto c : list) {
+      this.serviceResponse.put(c.getKey(), convertFromProtoFormat(c.getValue()));
+    }
+  }
+  
+  @Override
+  public void addAllServiceResponse(final Map<String, ByteBuffer> serviceResponse) {
+    if (serviceResponse == null)
+      return;
+    initServiceResponse();
+    this.serviceResponse.putAll(serviceResponse);
+  }
+  
+  private void addServiceResponseToProto() {
+    maybeInitBuilder();
+    builder.clearServiceResponse();
+    if (serviceResponse == null)
+      return;
+    Iterable<StringBytesMapProto> iterable = new Iterable<StringBytesMapProto>() {
+      
+      @Override
+      public Iterator<StringBytesMapProto> iterator() {
+        return new Iterator<StringBytesMapProto>() {
+          
+          Iterator<String> keyIter = serviceResponse.keySet().iterator();
+          
+          @Override
+          public void remove() {
+            throw new UnsupportedOperationException();
+          }
+          
+          @Override
+          public StringBytesMapProto next() {
+            String key = keyIter.next();
+            return StringBytesMapProto.newBuilder().setKey(key).setValue(convertToProtoFormat(serviceResponse.get(key))).build();
+          }
+          
+          @Override
+          public boolean hasNext() {
+            return keyIter.hasNext();
+          }
+        };
+      }
+    };
+    builder.addAllServiceResponse(iterable);
+  }
+  @Override
+  public void setServiceResponse(String key, ByteBuffer val) {
+    initServiceResponse();
+    this.serviceResponse.put(key, val);
+  }
+  @Override
+  public void removeServiceResponse(String key) {
+    initServiceResponse();
+    this.serviceResponse.remove(key);
+  }
+  @Override
+  public void clearServiceResponse() {
+    initServiceResponse();
+    this.serviceResponse.clear();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS43 INS42 INS33 INS21 INS25 INS25 INS21 INS21 INS21 INS42 INS43 INS43 INS43 INS21 INS41 INS42 INS42 INS43 INS42 INS21 INS41 INS25 INS60 INS60 INS21 INS70 INS42 INS83 INS74 INS42 INS25 INS21 INS21 INS21 INS21 INS25 INS60 INS21 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS43 INS42 INS21 INS21 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS27 INS8 INS42 INS8 INS32 INS7 INS7 INS42 INS42 INS42 INS32 INS22 INS42 INS32 INS32 INS27 INS8 INS43 INS59 INS74 INS59 INS7 INS44 INS42 INS8 INS43 INS43 INS43 INS27 INS41 INS32 INS32 INS32 INS32 INS27 INS41 INS74 INS59 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS22 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS9 INS42 INS52 INS42 INS42 INS22 INS42 INS42 INS22 INS33 INS41 INS42 INS42 INS16 INS43 INS43 INS42 INS32 INS22 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS33 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS52 INS42 INS32 INS32 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS74 INS42 INS32 INS52 INS42 INS42 INS42 INS74 INS1 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS43 INS43 INS22 INS42 INS32 INS32 INS43 INS43 INS31 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS42 INS43 INS43 INS41 INS42 INS42 INS14 INS74 INS1 INS43 INS43 INS23 INS31 INS31 INS31 INS42 INS42 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS32 INS42 INS53 INS42 INS42 INS60 INS41 INS42 INS41 INS42 INS42 INS32 INS42 INS14 INS43 INS59 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42