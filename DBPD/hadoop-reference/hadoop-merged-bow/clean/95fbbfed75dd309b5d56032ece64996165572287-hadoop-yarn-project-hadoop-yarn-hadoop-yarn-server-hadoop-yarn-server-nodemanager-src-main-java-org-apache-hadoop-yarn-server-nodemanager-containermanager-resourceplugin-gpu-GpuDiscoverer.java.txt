YARN-9118. Handle exceptions with parsing user defined GPU devices in GpuDiscoverer. Contributed by Szilard Nemeth.

-import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
-  protected static final String DEFAULT_BINARY_NAME = "nvidia-smi";
+  static final String DEFAULT_BINARY_NAME = "nvidia-smi";
-  GpuDeviceInformation lastDiscoveredGpuInformation = null;
+  private GpuDeviceInformation lastDiscoveredGpuInformation = null;
-  public synchronized GpuDeviceInformation getGpuDeviceInformation()
+  synchronized GpuDeviceInformation getGpuDeviceInformation()
-      GpuDeviceInformation info = parser.parseXml(output);
+      lastDiscoveredGpuInformation = parser.parseXml(output);
-      lastDiscoveredGpuInformation = info;
-      return info;
+      return lastDiscoveredGpuInformation;
-    List<GpuDevice> gpuDevices = new ArrayList<>();
-
-      // Get gpu device information from system.
-      if (null == lastDiscoveredGpuInformation) {
-        String msg = YarnConfiguration.NM_GPU_ALLOWED_DEVICES + " is set to "
-            + YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES
-            + ", however automatically discovering "
-            + "GPU information failed, please check NodeManager log for more"
-            + " details, as an alternative, admin can specify "
-            + YarnConfiguration.NM_GPU_ALLOWED_DEVICES
-            + " manually to enable GPU isolation.";
-        LOG.error(msg);
-        throw new YarnException(msg);
-      }
-
-      if (lastDiscoveredGpuInformation.getGpus() != null) {
-        for (int i = 0; i < lastDiscoveredGpuInformation.getGpus().size();
-             i++) {
-          List<PerGpuDeviceInformation> gpuInfos =
-              lastDiscoveredGpuInformation.getGpus();
-          gpuDevices.add(new GpuDevice(i, gpuInfos.get(i).getMinorNumber()));
-        }
-      }
-    } else{
-      for (String s : allowedDevicesStr.split(",")) {
-        if (s.trim().length() > 0) {
-          String[] kv = s.trim().split(":");
-          if (kv.length != 2) {
-            throw new YarnException(
-                "Illegal format, it should be index:minor_number format, now it="
-                    + s);
-          }
-
-          gpuDevices.add(
-              new GpuDevice(Integer.parseInt(kv[0]), Integer.parseInt(kv[1])));
-        }
-      }
-      LOG.info("Allowed GPU devices:" + gpuDevices);
+      return parseGpuDevicesFromAutoDiscoveredGpuInfo();
+    } else {
+      return parseGpuDevicesFromUserDefinedValues(allowedDevicesStr);
+  }
+
+  private List<GpuDevice> parseGpuDevicesFromAutoDiscoveredGpuInfo()
+          throws YarnException {
+    if (lastDiscoveredGpuInformation == null) {
+      String msg = YarnConfiguration.NM_GPU_ALLOWED_DEVICES + " is set to "
+          + YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES
+          + ", however automatically discovering "
+          + "GPU information failed, please check NodeManager log for more"
+          + " details, as an alternative, admin can specify "
+          + YarnConfiguration.NM_GPU_ALLOWED_DEVICES
+          + " manually to enable GPU isolation.";
+      LOG.error(msg);
+      throw new YarnException(msg);
+    }
+
+    List<GpuDevice> gpuDevices = new ArrayList<>();
+    if (lastDiscoveredGpuInformation.getGpus() != null) {
+      int numberOfGpus = lastDiscoveredGpuInformation.getGpus().size();
+      LOG.debug("Found {} GPU devices", numberOfGpus);
+      for (int i = 0; i < numberOfGpus; i++) {
+        List<PerGpuDeviceInformation> gpuInfos =
+            lastDiscoveredGpuInformation.getGpus();
+        gpuDevices.add(new GpuDevice(i, gpuInfos.get(i).getMinorNumber()));
+      }
+    }
+    return gpuDevices;
+  }
+
+  /**
+   * @param devices allowed devices coming from the config.
+   *                          Individual devices should be separated by commas.
+   *                          <br>The format of individual devices should be:
+   *                           &lt;index:&gt;&lt;minorNumber&gt;
+   * @return List of GpuDevices
+   * @throws YarnException when a GPU device is defined as a duplicate.
+   * The first duplicate GPU device will be added to the exception message.
+   */
+  private List<GpuDevice> parseGpuDevicesFromUserDefinedValues(String devices)
+      throws YarnException {
+    if (devices.trim().isEmpty()) {
+      throw GpuDeviceSpecificationException.createWithEmptyValueSpecified();
+    }
+    List<GpuDevice> gpuDevices = Lists.newArrayList();
+    for (String device : devices.split(",")) {
+      if (device.trim().length() > 0) {
+        String[] splitByColon = device.trim().split(":");
+        if (splitByColon.length != 2) {
+          throw GpuDeviceSpecificationException.
+              createWithWrongValueSpecified(device, devices);
+        }
+
+        GpuDevice gpuDevice = parseGpuDevice(device, splitByColon, devices);
+        if (!gpuDevices.contains(gpuDevice)) {
+          gpuDevices.add(gpuDevice);
+        } else {
+          throw GpuDeviceSpecificationException
+              .createWithDuplicateValueSpecified(device, devices);
+        }
+      }
+    }
+    LOG.info("Allowed GPU devices:" + gpuDevices);
-  public synchronized void initialize(Configuration conf) throws YarnException {
+  private GpuDevice parseGpuDevice(String device, String[] splitByColon,
+      String allowedDevicesStr) throws YarnException {
+    try {
+      int index = Integer.parseInt(splitByColon[0]);
+      int minorNumber = Integer.parseInt(splitByColon[1]);
+      return new GpuDevice(index, minorNumber);
+    } catch (NumberFormatException e) {
+      throw GpuDeviceSpecificationException.
+          createWithWrongValueSpecified(device, allowedDevicesStr, e);
+    }
+  }
+
+  public synchronized void initialize(Configuration conf) {
-    // Validate file existence
-
-  protected Map<String, String> getEnvironmentToRunCommand() {
+  Map<String, String> getEnvironmentToRunCommand() {
-  protected String getPathOfGpuBinary() {
+  String getPathOfGpuBinary() {

MOV26 UPD40 INS31 INS31 INS31 INS83 MOV29 INS83 INS83 INS74 INS42 MOV43 INS8 UPD83 INS42 MOV8 INS29 INS83 INS74 INS42 MOV44 MOV43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS43 INS43 MOV21 MOV60 INS25 MOV60 MOV41 INS65 INS65 INS65 INS43 INS43 UPD42 INS25 INS60 INS70 MOV21 INS41 INS42 INS43 INS42 INS5 INS42 INS43 INS42 INS42 INS54 MOV21 INS42 INS42 MOV32 INS8 INS8 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS8 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS43 INS85 INS42 INS8 INS12 INS41 INS41 INS33 INS60 INS21 INS32 INS42 INS53 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS45 INS25 INS42 INS60 INS60 INS41 INS44 INS8 UPD42 INS32 INS32 INS39 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS39 INS59 INS39 INS59 INS14 INS43 INS42 INS53 MOV32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS34 INS60 INS25 INS60 INS25 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS32 INS42 MOV5 INS59 INS27 INS8 MOV43 INS59 INS38 INS8 INS8 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS34 INS53 INS42 INS32 INS32 INS21 INS53 INS42 INS34 INS42 INS34 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL83 DEL42 DEL33 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL83 DEL83