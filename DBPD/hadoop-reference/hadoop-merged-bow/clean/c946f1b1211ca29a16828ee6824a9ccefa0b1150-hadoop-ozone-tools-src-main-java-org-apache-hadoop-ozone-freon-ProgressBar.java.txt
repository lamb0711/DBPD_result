Revert "HDDS-692. Use the ProgressBar class in the RandomKeyGenerator freon test. Contributed by Zsolt Horvath."

This reverts commit 2a7f4859912e83910f9a418f69ce6d4bd4a37815.

-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.function.Function;
- * Creates and runs a ProgressBar in new Thread which gets printed on
- * the provided PrintStream.
+ * Run an arbitrary code and print progress on the provided stream. The
+ * progressbar stops when: - the provided currentvalue is less the the maxvalue
+ * - exception thrown
-  private static final Logger LOG = LoggerFactory.getLogger(ProgressBar.class);
-  private final long maxValue;
-  private final Supplier<Long> currentValue;
-  private final Thread progressBar;
-
-  private volatile boolean running;
-
-  private volatile long startTime;
+  private PrintStream stream;
+  private AtomicLong currentValue;
+  private long maxValue;
+  private Thread progressBar;
+  private volatile boolean exception = false;
+  private long startTime;
-   * Creates a new ProgressBar instance which prints the progress on the given
-   * PrintStream when started.
-   *
-   * @param stream to display the progress
+   * @param stream Used to display the progress
-   * @param currentValue Supplier that provides the current value
-  public ProgressBar(final PrintStream stream, final Long maxValue,
-                     final Supplier<Long> currentValue) {
+  ProgressBar(PrintStream stream, long maxValue) {
+    this.stream = stream;
-    this.currentValue = currentValue;
-    this.progressBar = new Thread(getProgressBar(stream));
-    this.running = false;
+    this.currentValue = new AtomicLong(0);
+    this.progressBar = new Thread(new ProgressBarThread());
-   * Starts the ProgressBar in a new Thread.
-   * This is a non blocking call.
-   */
-  public synchronized void start() {
-    if (!running) {
-      running = true;
-      startTime = System.nanoTime();
-      progressBar.start();
-    }
-  }
-
-  /**
-   * Graceful shutdown, waits for the progress bar to complete.
-   * This is a blocking call.
-   */
-  public synchronized void shutdown() {
-    if (running) {
-      try {
-        progressBar.join();
-        running = false;
-      } catch (InterruptedException e) {
-        LOG.warn("Got interrupted while waiting for the progress bar to " +
-                "complete.");
-      }
-    }
-  }
-
-  /**
-   * Terminates the progress bar. This doesn't wait for the progress bar
-   * to complete.
-   */
-  public synchronized void terminate() {
-    if (running) {
-      try {
-        running = false;
-        progressBar.join();
-      } catch (InterruptedException e) {
-        LOG.warn("Got interrupted while waiting for the progress bar to " +
-                "complete.");
-      }
-    }
-  }
-
-  private Runnable getProgressBar(final PrintStream stream) {
-    return () -> {
-      stream.println();
-      while (running && currentValue.get() < maxValue) {
-        print(stream, currentValue.get());
-        try {
-          Thread.sleep(REFRESH_INTERVAL);
-        } catch (InterruptedException e) {
-          LOG.warn("ProgressBar was interrupted.");
-        }
-      }
-      print(stream, maxValue);
-      stream.println();
-      running = false;
-    };
-  }
-
-  /**
-   * Given current value prints the progress bar.
+   * Start a task with a progessbar without any in/out parameters Runnable used
+   * just a task wrapper.
-   * @param value current progress position
+   * @param task Runnable
-  private void print(final PrintStream stream, final long value) {
-    stream.print('\r');
-    double percent = 100.0 * value / maxValue;
-    StringBuilder sb = new StringBuilder();
-    sb.append(" " + String.format("%.2f", percent) + "% |");
+  public void start(Runnable task) {
-    for (int i = 0; i <= percent; i++) {
-      sb.append('█');
+    startTime = System.nanoTime();
+
+    try {
+
+      progressBar.start();
+      task.run();
+
+    } catch (Exception e) {
+      exception = true;
+    } finally {
+
+      try {
+        progressBar.join();
+      } catch (InterruptedException e) {
+        e.printStackTrace();
+      }
-    for (int j = 0; j < 100 - percent; j++) {
-      sb.append(' ');
-    }
-    sb.append("|  ");
-    sb.append(value + "/" + maxValue);
-    long timeInSec = TimeUnit.SECONDS.convert(
-            System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
-    String timeToPrint = String.format("%d:%02d:%02d", timeInSec / 3600,
-            (timeInSec % 3600) / 60, timeInSec % 60);
-    sb.append(" Time: " + timeToPrint);
-    stream.print(sb.toString());
-}
+
+  /**
+   * Start a task with only out parameters.
+   *
+   * @param task Supplier that represents the task
+   * @param <T> Generic return type
+   * @return Whatever the supllier produces
+   */
+  public <T> T start(Supplier<T> task) {
+
+    startTime = System.nanoTime();
+    T result = null;
+
+    try {
+
+      progressBar.start();
+      result = task.get();
+
+    } catch (Exception e) {
+      exception = true;
+    } finally {
+
+      try {
+        progressBar.join();
+      } catch (InterruptedException e) {
+        e.printStackTrace();
+      }
+
+      return result;
+    }
+  }
+
+  /**
+   * Start a task with in/out parameters.
+   *
+   * @param input Input of the function
+   * @param task A Function that does the task
+   * @param <T> type of the input
+   * @param <R> return type
+   * @return Whatever the Function returns
+   */
+  public <T, R> R start(T input, Function<T, R> task) {
+
+    startTime = System.nanoTime();
+    R result = null;
+
+    try {
+
+      progressBar.start();
+      result = task.apply(input);
+
+    } catch (Exception e) {
+      exception = true;
+      throw e;
+    } finally {
+
+      try {
+        progressBar.join();
+      } catch (InterruptedException e) {
+        e.printStackTrace();
+      }
+
+      return result;
+    }
+  }
+
+  /**
+   * Increment the progress with one step.
+   */
+  public void incrementProgress() {
+    currentValue.incrementAndGet();
+  }
+
+  private class ProgressBarThread implements Runnable {
+
+    @Override
+    public void run() {
+      try {
+
+        stream.println();
+        long value;
+
+        while ((value = currentValue.get()) < maxValue) {
+          print(value);
+
+          if (exception) {
+            break;
+          }
+          Thread.sleep(REFRESH_INTERVAL);
+        }
+
+        if (exception) {
+          stream.println();
+          stream.println("Incomplete termination, " + "check log for " +
+              "exception.");
+        } else {
+          print(maxValue);
+        }
+        stream.println();
+      } catch (InterruptedException e) {
+        stream.println(e);
+      }
+    }
+
+    /**
+     * Given current value prints the progress bar.
+     *
+     * @param value current progress position
+     */
+    private void print(long value) {
+      stream.print('\r');
+      double percent = 100.0 * value / maxValue;
+      StringBuilder sb = new StringBuilder();
+      sb.append(" " + String.format("%.2f", percent) + "% |");
+
+      for (int i = 0; i <= percent; i++) {
+        sb.append('█');
+      }
+      for (int j = 0; j < 100 - percent; j++) {
+        sb.append(' ');
+      }
+      sb.append("|  ");
+      sb.append(value + "/" + maxValue);
+      long timeInSec = TimeUnit.SECONDS.convert(
+          System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
+      String timeToPrint = String.format("%d:%02d:%02d", timeInSec / 3600,
+          (timeInSec % 3600) / 60, timeInSec % 60);
+      sb.append(" Time: " + timeToPrint);
+      stream.print(sb.toString());
+    }
+  }
+
+}

MOV26 MOV26 MOV23 UPD40 UPD40 INS31 INS31 INS55 MOV43 INS43 MOV59 INS39 MOV59 MOV21 MOV29 MOV83 MOV39 MOV42 INS44 MOV8 INS29 INS83 INS73 INS43 INS42 MOV44 MOV8 INS73 INS73 INS43 INS42 INS44 INS44 INS8 UPD42 INS83 INS42 MOV43 INS31 MOV31 UPD66 UPD66 INS66 UPD42 INS42 UPD42 INS9 MOV43 INS39 INS65 INS43 INS42 MOV21 INS54 INS65 INS65 INS65 INS65 INS42 INS42 UPD74 UPD42 INS21 INS60 INS54 INS65 INS65 INS65 UPD65 INS65 INS65 INS42 INS42 INS42 INS43 INS42 INS74 INS42 INS21 INS60 INS54 INS21 INS78 INS83 INS39 INS42 INS8 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS8 INS12 MOV8 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 UPD43 INS7 INS43 INS59 INS8 INS12 MOV8 INS66 INS42 INS66 INS42 INS66 UPD66 INS42 UPD66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS43 INS43 INS7 INS43 INS59 INS8 INS12 INS8 UPD66 INS32 INS42 INS54 INS42 INS14 INS14 MOV21 INS21 INS44 INS8 UPD42 INS42 INS32 INS42 INS42 INS33 INS21 INS21 INS44 INS8 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS21 INS44 INS8 INS54 INS41 INS42 INS42 INS8 INS12 UPD42 INS43 INS34 MOV43 INS14 INS32 INS43 INS42 INS21 INS42 INS42 INS32 INS7 INS43 INS42 MOV21 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS21 INS53 INS8 INS12 INS42 MOV21 INS60 INS61 INS25 MOV21 INS44 INS8 INS42 INS43 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS42 INS21 MOV44 INS8 INS39 INS59 INS27 MOV8 INS42 INS8 INS8 INS43 INS42 MOV21 INS42 INS42 INS9 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS9 INS32 INS21 INS42 INS36 MOV42 INS21 INS25 MOV21 MOV21 MOV21 INS42 INS32 INS42 INS42 INS32 INS7 INS32 INS42 INS8 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 MOV32 INS42 INS42 INS10 INS42 UPD42 UPD42 INS27 INS45 INS45 INS45 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL83 DEL39 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL83 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL83 DEL83 DEL83 DEL42 DEL43 DEL9 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL9 DEL7 DEL21 DEL45 DEL45 DEL27 DEL42 DEL25 DEL83 DEL42 DEL9 DEL7 DEL21 DEL45 DEL45 DEL27 DEL42 DEL38 DEL8 DEL25 DEL83 DEL31 DEL83 DEL39 DEL42 DEL66 DEL83 DEL42 DEL25 DEL42 DEL45 DEL42 DEL42 DEL9 DEL7 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL83 DEL42 DEL83 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL86 DEL41 DEL8 DEL31