merge from trunk r1598783

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598785 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
-import org.apache.hadoop.classification.InterfaceAudience.Private;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.LocalResource;
+import org.apache.hadoop.yarn.api.records.impl.pb.LocalResourcePBImpl;
+import org.apache.hadoop.yarn.proto.YarnProtos.LocalResourceProto;
+import org.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.LocalizedResourceProto;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.ResourceEventType;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.event.ResourceRecoveredEvent;
+import org.apache.hadoop.yarn.server.nodemanager.recovery.NMStateStoreService;
+  private final ApplicationId appId;
+  private NMStateStoreService stateStore;
-  public LocalResourcesTrackerImpl(String user, Dispatcher dispatcher,
-      boolean useLocalCacheDirectoryManager, Configuration conf) {
-    this(user, dispatcher,
+  public LocalResourcesTrackerImpl(String user, ApplicationId appId,
+      Dispatcher dispatcher, boolean useLocalCacheDirectoryManager,
+      Configuration conf, NMStateStoreService stateStore) {
+    this(user, appId, dispatcher,
-      useLocalCacheDirectoryManager, conf);
+      useLocalCacheDirectoryManager, conf, stateStore);
-  LocalResourcesTrackerImpl(String user, Dispatcher dispatcher,
+  LocalResourcesTrackerImpl(String user, ApplicationId appId,
+      Dispatcher dispatcher,
-      boolean useLocalCacheDirectoryManager, Configuration conf) {
+      boolean useLocalCacheDirectoryManager, Configuration conf,
+      NMStateStoreService stateStore) {
+    this.appId = appId;
+    this.stateStore = stateStore;
-        localrsrc.remove(req);
-        decrementFileCountForLocalCacheDirectory(req, rsrc);
+        removeResource(req);
-      decrementFileCountForLocalCacheDirectory(req, null);
-      localrsrc.remove(req);
+      removeResource(req);
+      break;
+    case RECOVERED:
+      if (rsrc != null) {
+        LOG.warn("Ignoring attempt to recover existing resource " + rsrc);
+        return;
+      }
+      rsrc = recoverResource(req, (ResourceRecoveredEvent) event);
+      localrsrc.put(req, rsrc);
+
+
+    if (event.getType() == ResourceEventType.LOCALIZED) {
+      if (rsrc.getLocalPath() != null) {
+        try {
+          stateStore.finishResourceLocalization(user, appId,
+              buildLocalizedResourceProto(rsrc));
+        } catch (IOException ioe) {
+          LOG.error("Error storing resource state for " + rsrc, ioe);
+        }
+      } else {
+        LOG.warn("Resource " + rsrc + " localized without a location");
+      }
+    }
+  }
+
+  private LocalizedResource recoverResource(LocalResourceRequest req,
+      ResourceRecoveredEvent event) {
+    // unique number for a resource is the directory of the resource
+    Path localDir = event.getLocalPath().getParent();
+    long rsrcId = Long.parseLong(localDir.getName());
+
+    // update ID generator to avoid conflicts with existing resources
+    while (true) {
+      long currentRsrcId = uniqueNumberGenerator.get();
+      long nextRsrcId = Math.max(currentRsrcId, rsrcId);
+      if (uniqueNumberGenerator.compareAndSet(currentRsrcId, nextRsrcId)) {
+        break;
+      }
+    }
+
+    incrementFileCountForLocalCacheDirectory(localDir.getParent());
+
+    return new LocalizedResource(req, dispatcher);
+  }
+
+  private LocalizedResourceProto buildLocalizedResourceProto(
+      LocalizedResource rsrc) {
+    return LocalizedResourceProto.newBuilder()
+        .setResource(buildLocalResourceProto(rsrc.getRequest()))
+        .setLocalPath(rsrc.getLocalPath().toString())
+        .setSize(rsrc.getSize())
+        .build();
+  }
+
+  private LocalResourceProto buildLocalResourceProto(LocalResource lr) {
+    LocalResourcePBImpl lrpb;
+    if (!(lr instanceof LocalResourcePBImpl)) {
+      lr = LocalResource.newInstance(lr.getResource(), lr.getType(),
+          lr.getVisibility(), lr.getSize(), lr.getTimestamp(),
+          lr.getPattern());
+    }
+    lrpb = (LocalResourcePBImpl) lr;
+    return lrpb.getProto();
+  }
+
+  public void incrementFileCountForLocalCacheDirectory(Path cacheDir) {
+    if (useLocalCacheDirectoryManager) {
+      Path cacheRoot = LocalCacheDirectoryManager.getCacheDirectoryRoot(
+          cacheDir);
+      if (cacheRoot != null) {
+        LocalCacheDirectoryManager dir = directoryManagers.get(cacheRoot);
+        if (dir == null) {
+          dir = new LocalCacheDirectoryManager(conf);
+          LocalCacheDirectoryManager otherDir =
+              directoryManagers.putIfAbsent(cacheRoot, dir);
+          if (otherDir != null) {
+            dir = otherDir;
+          }
+        }
+        if (cacheDir.equals(cacheRoot)) {
+          dir.incrementFileCountForPath("");
+        } else {
+          String dirStr = cacheDir.toUri().getRawPath();
+          String rootStr = cacheRoot.toUri().getRawPath();
+          dir.incrementFileCountForPath(
+              dirStr.substring(rootStr.length() + 1));
+        }
+      }
+    }
-  public boolean contains(LocalResourceRequest resource) {
-    return localrsrc.containsKey(resource);
-  }
-
-  @Override
-      localrsrc.remove(rem.getRequest());
-      decrementFileCountForLocalCacheDirectory(rem.getRequest(), rsrc);
+      removeResource(rem.getRequest());
+  private void removeResource(LocalResourceRequest req) {
+    LocalizedResource rsrc = localrsrc.remove(req);
+    decrementFileCountForLocalCacheDirectory(req, rsrc);
+    if (rsrc != null) {
+      Path localPath = rsrc.getLocalPath();
+      if (localPath != null) {
+        try {
+          stateStore.removeLocalizedResource(user, appId, localPath);
+        } catch (IOException e) {
+          LOG.error("Unable to remove resource " + rsrc + " from state store",
+              e);
+        }
+      }
+    }
+  }
+
+    Path rPath = localDirPath;
-      Path rPath = localDirPath;
+      rPath = localDirPath;
-      return rPath;
-    } else {
-      return localDirPath;
+
+    rPath = new Path(rPath,
+        Long.toString(uniqueNumberGenerator.incrementAndGet()));
+    Path localPath = new Path(rPath, req.getPath().getName());
+    LocalizedResource rsrc = localrsrc.get(req);
+    rsrc.setLocalPath(localPath);
+    LocalResource lr = LocalResource.newInstance(req.getResource(),
+        req.getType(), req.getVisibility(), req.getSize(),
+        req.getTimestamp());
+    try {
+      stateStore.startResourceLocalization(user, appId,
+          ((LocalResourcePBImpl) lr).getProto(), localPath);
+    } catch (IOException e) {
+      LOG.error("Unable to record localization start for " + rsrc, e);
+    }
+    return rPath;
-  public long nextUniqueNumber() {
-    return uniqueNumberGenerator.incrementAndGet();
-  }
-
-  @VisibleForTesting
-  @Private
-  @Override
-}
+
+  @VisibleForTesting
+  LocalCacheDirectoryManager getDirectoryManager(Path localDirPath) {
+    LocalCacheDirectoryManager mgr = null;
+    if (useLocalCacheDirectoryManager) {
+      mgr = directoryManagers.get(localDirPath);
+    }
+    return mgr;
+  }
+}

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS44 INS44 INS44 UPD83 MOV83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 MOV44 MOV8 INS83 INS43 INS42 INS44 INS8 MOV83 UPD39 MOV39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV78 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS25 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS61 INS21 INS41 INS42 UPD43 UPD42 INS42 INS43 INS42 INS60 INS25 INS21 INS41 INS43 INS42 INS25 INS43 INS42 INS60 MOV21 INS25 MOV60 INS21 INS60 INS60 INS21 INS60 INS54 MOV41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS10 INS49 INS25 INS21 INS21 INS27 INS8 INS42 INS42 INS43 INS59 INS39 INS59 INS9 INS8 INS32 INS14 UPD42 INS32 INS42 INS43 INS59 INS38 INS8 INS7 INS32 INS42 INS42 INS8 INS42 INS43 INS59 INS27 INS8 INS7 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS42 INS8 INS42 INS22 INS42 INS22 INS42 INS42 INS27 INS8 INS7 INS32 INS32 INS40 INS25 INS42 INS42 INS32 INS42 INS32 INS60 INS60 INS25 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS36 INS21 INS42 INS11 INS42 INS42 INS60 INS25 INS42 INS42 MOV32 INS42 INS33 INS60 INS25 INS21 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS33 INS21 INS52 INS42 INS52 INS42 UPD42 INS42 INS33 INS21 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS32 INS39 INS59 INS39 INS59 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS62 INS7 INS43 INS42 INS43 INS59 INS27 INS8 MOV32 INS43 INS59 INS27 INS8 INS7 INS43 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS7 INS32 INS42 INS42 INS11 INS32 INS33 INS54 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS10 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS25 UPD42 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS8 INS12 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS8 INS8 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS60 INS25 INS42 INS42 INS42 INS21 INS60 INS60 INS21 INS21 INS44 INS8 INS11 INS45 INS42 INS32 INS43 INS42 INS21 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS45 INS42 INS45 INS42 INS42 DEL42 DEL33 DEL21 DEL32 DEL42 DEL78 DEL39 DEL42 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL41 DEL8 DEL42 DEL78 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78