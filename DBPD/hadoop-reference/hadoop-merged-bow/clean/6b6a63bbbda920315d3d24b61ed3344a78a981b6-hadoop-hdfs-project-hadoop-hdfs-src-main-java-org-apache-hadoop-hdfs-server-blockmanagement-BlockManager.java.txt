Merge commit '456e901a4c5c639267ee87b8e5f1319f256d20c2' (HDFS-6407. Add sorting and pagination in the datanode tab of the NN Web UI. Contributed by Haohui Mai.) into HDFS-7285-merge

+import javax.management.ObjectName;
+
+import org.apache.hadoop.fs.FileEncryptionInfo;
+import org.apache.hadoop.hdfs.DFSUtilClient;
-import org.apache.hadoop.fs.FileEncryptionInfo;
+import org.apache.hadoop.hdfs.server.namenode.CachedBlock;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeRegistration;
+import org.apache.hadoop.metrics2.util.MBeans;
-public class BlockManager {
+public class BlockManager implements BlockStatsMXBean {
+  private final BlockReportLeaseManager blockReportLeaseManager;
+  private ObjectName mxBeanName;
-    
+    this.blockReportLeaseManager = new BlockReportLeaseManager(conf);
+
-      String thisNnId = HAUtil.getNameNodeId(conf, nsId);
-      String otherNnId = HAUtil.getNameNodeIdOfOtherNode(conf, nsId);
-      return new BlockTokenSecretManager(updateMin*60*1000L,
-          lifetimeMin*60*1000L, thisNnId.compareTo(otherNnId) < 0 ? 0 : 1, null,
-          encryptionAlgorithm);
+      // figure out which index we are of the nns
+      Collection<String> nnIds = DFSUtilClient.getNameNodeIds(conf, nsId);
+      String nnId = HAUtil.getNameNodeId(conf, nsId);
+      int nnIndex = 0;
+      for (String id : nnIds) {
+        if (id.equals(nnId)) {
+          break;
+        }
+        nnIndex++;
+      }
+      return new BlockTokenSecretManager(updateMin * 60 * 1000L,
+          lifetimeMin * 60 * 1000L, nnIndex, nnIds.size(), null, encryptionAlgorithm);
-          lifetimeMin*60*1000L, 0, null, encryptionAlgorithm);
+          lifetimeMin*60*1000L, 0, 1, null, encryptionAlgorithm);
+    mxBeanName = MBeans.register("NameNode", "BlockStats", this);
-  
+
-  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos) {
+  private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos)
+      throws IOException {
-        final BlockInfoUnderConstructionStriped uc =
-            (BlockInfoUnderConstructionStriped) blk;
+        final BlockInfoStripedUnderConstruction uc =
+            (BlockInfoStripedUnderConstruction) blk;
-        assert blk instanceof BlockInfoUnderConstructionContiguous;
-        final BlockInfoUnderConstructionContiguous uc =
-            (BlockInfoUnderConstructionContiguous) blk;
+        assert blk instanceof BlockInfoContiguousUnderConstruction;
+        final BlockInfoContiguousUnderConstruction uc =
+            (BlockInfoContiguousUnderConstruction) blk;
-  public boolean isSufficientlyReplicated(BlockInfoContiguous b) {
+  public boolean isSufficientlyReplicated(BlockInfo b) {
-      blockLog.info("BLOCK* addToInvalidates: {} {}", storedBlock,
+      blockLog.debug("BLOCK* addToInvalidates: {} {}", storedBlock,
-      blockLog.info("BLOCK* findAndMarkBlockAsCorrupt: {} not found", blk);
+      blockLog.debug("BLOCK* findAndMarkBlockAsCorrupt: {} not found", blk);
-      blockLog.info("BLOCK markBlockAsCorrupt: {} cannot be marked as" +
+      blockLog.debug("BLOCK markBlockAsCorrupt: {} cannot be marked as" +
-    blockLog.info("BLOCK* invalidateBlock: {} on {}", b, dn);
+    blockLog.debug("BLOCK* invalidateBlock: {} on {}", b, dn);
-      blockLog.info("BLOCK* invalidateBlocks: postponing " +
+      blockLog.debug("BLOCK* invalidateBlocks: postponing " +
-                blockLog.info("BLOCK* Removing {} from neededReplications as" +
+                blockLog.debug("BLOCK* Removing {} from neededReplications as" +
-              blockLog.info("BLOCK* Removing {} from neededReplications as" +
+              blockLog.debug("BLOCK* Removing {} from neededReplications as" +
-          blockLog.info("BLOCK* ask {} to replicate {} to {}", rw.srcNodes,
+          blockLog.debug("BLOCK* ask {} to replicate {} to {}", rw.srcNodes,
+  public long requestBlockReportLeaseId(DatanodeRegistration nodeReg) {
+    assert namesystem.hasReadLock();
+    DatanodeDescriptor node = null;
+    try {
+      node = datanodeManager.getDatanode(nodeReg);
+    } catch (UnregisteredNodeException e) {
+      LOG.warn("Unregistered datanode {}", nodeReg);
+      return 0;
+    }
+    if (node == null) {
+      LOG.warn("Failed to find datanode {}", nodeReg);
+      return 0;
+    }
+    // Request a new block report lease.  The BlockReportLeaseManager has
+    // its own internal locking.
+    long leaseId = blockReportLeaseManager.requestLease(node);
+    BlockManagerFaultInjector.getInstance().
+        requestBlockReportLease(node, leaseId);
+    return leaseId;
+  }
+
-          storedBlock instanceof BlockInfoUnderConstructionContiguous ||
-          storedBlock instanceof BlockInfoUnderConstructionStriped);
+          storedBlock instanceof BlockInfoContiguousUnderConstruction ||
+          storedBlock instanceof BlockInfoStripedUnderConstruction);
+      if (context != null) {
+        if (!blockReportLeaseManager.checkLease(node, startTime,
+              context.getLeaseId())) {
+          return false;
+        }
+      }
+            long leaseId = blockReportLeaseManager.removeLease(node);
+            BlockManagerFaultInjector.getInstance().
+                removeBlockReportLease(node, leaseId);
-        blockLog.info("BLOCK* markBlockReplicasAsCorrupt: mark block replica" +
+        blockLog.debug("BLOCK* markBlockReplicasAsCorrupt: mark block replica" +
-      
+
-      BlockListAsLongs newReport, 
+      BlockListAsLongs newReport,
-    Iterator<BlockInfo> it = storageInfo.new BlockIterator(delimiter.getNext(0));
+    Iterator<BlockInfo> it =
+        storageInfo.new BlockIterator(delimiter.getNext(0));
-      final Block block, final ReplicaState reportedState, 
+      final Block block, final ReplicaState reportedState,
-    if (block instanceof BlockInfoUnderConstructionContiguous ||
-        block instanceof BlockInfoUnderConstructionStriped) {
+    if (block instanceof BlockInfoContiguousUnderConstruction ||
+        block instanceof BlockInfoStripedUnderConstruction) {
-      blockLog.info("BLOCK* addStoredBlock: {} on {} size {} but it does not" +
+      blockLog.debug("BLOCK* addStoredBlock: {} on {} size {} but it does not" +
-  private void logAddStoredBlock(BlockInfo storedBlock, DatanodeDescriptor node) {
-    if (!blockLog.isInfoEnabled()) {
+  private void logAddStoredBlock(BlockInfo storedBlock,
+      DatanodeDescriptor node) {
+    if (!blockLog.isDebugEnabled()) {
-    
+
-    blockLog.info(sb.toString());
+    blockLog.debug(sb.toString());
-        blockLog.info("invalidateCorruptReplicas error in deleting bad block"
+        blockLog.debug("invalidateCorruptReplicas error in deleting bad block"
-    blockLog.info("BLOCK* chooseExcessReplicates: "
-        +"({}, {}) is added to invalidated blocks set", chosen, storedBlock);
+    blockLog.debug("BLOCK* chooseExcessReplicates: "
+        + "({}, {}) is added to invalidated blocks set", chosen, storedBlock);
+      CachedBlock cblock = namesystem.getCacheManager().getCachedBlocks()
+          .get(new CachedBlock(storedBlock.getBlockId(), (short) 0, false));
+      if (cblock != null) {
+        boolean removed = false;
+        removed |= node.getPendingCached().remove(cblock);
+        removed |= node.getCached().remove(cblock);
+        removed |= node.getPendingUncached().remove(cblock);
+        if (removed) {
+          blockLog.debug("BLOCK* removeStoredBlock: {} removed from caching "
+              + "related lists on node {}", storedBlock, node);
+        }
+      }
+
-    pendingReplications.decrement(getStoredBlock(block), node);
+    BlockInfo storedBlock = getStoredBlock(block);
+    if (storedBlock != null) {
+      pendingReplications.decrement(storedBlock, node);
+    }
-      blockLog.info("BLOCK* addBlock: logged info for {} of {} reported.",
+      blockLog.debug("BLOCK* addBlock: logged info for {} of {} reported.",
-      blockLog.info("BLOCK* addBlock: block {} on node {} size {} does not " +
+      blockLog.debug("BLOCK* addBlock: block {} on node {} size {} does not " +
-   * 
+   *
-    blockLog.info("BLOCK* {}: ask {} to delete {}", getClass().getSimpleName(),
+    blockLog.debug("BLOCK* {}: ask {} to delete {}", getClass().getSimpleName(),
-          ((BlockInfoUnderConstructionStriped)info).getBlockIndices(),
+          ((BlockInfoStripedUnderConstruction)info).getBlockIndices(),
-   * {@link BlockManager#processMisReplicatedBlock}.
+   * {@link BlockManager#processMisReplicatedBlock(BlockInfo)}.
+    MBeans.unregister(mxBeanName);
+    mxBeanName = null;
+  public BlockReportLeaseManager getBlockReportLeaseManager() {
+    return blockReportLeaseManager;
+  }
+
+  @Override // BlockStatsMXBean
+  public Map<StorageType, StorageTypeStats> getStorageTypeStats() {
+    return  datanodeManager.getDatanodeStatistics().getStorageTypeStats();
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS42 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS43 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS42 INS42 INS42 INS42 INS21 INS21 INS42 UPD43 INS43 INS42 INS6 INS60 INS54 INS25 INS60 INS21 INS41 INS60 INS25 INS21 INS21 INS42 INS41 INS42 INS43 INS43 INS43 INS41 INS7 INS8 INS7 UPD42 INS42 INS32 INS43 INS59 INS8 INS12 INS27 INS8 INS39 INS59 INS32 INS42 INS60 INS25 INS43 INS59 INS27 INS8 INS32 INS7 INS42 INS42 INS42 INS42 INS32 INS22 INS14 INS60 MOV60 INS60 INS70 MOV41 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS21 INS41 INS42 INS32 INS32 INS42 INS42 INS42 INS25 UPD42 UPD42 INS43 INS59 INS27 INS8 INS42 INS42 MOV32 INS42 INS33 MOV21 UPD42 INS68 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS52 INS42 INS43 INS42 INS74 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS42 INS45 INS45 INS52 INS7 INS43 INS42 INS21 INS41 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS27 INS8 UPD43 UPD43 UPD42 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS21 INS25 INS42 INS42 INS69 INS42 INS42 INS42 INS43 INS43 INS42 INS32 UPD42 INS42 INS34 MOV43 INS42 INS25 INS21 INS42 INS32 INS34 INS34 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 INS34 INS42 INS42 INS45 INS42 INS42 INS33 INS25 UPD42 UPD42 UPD42 INS32 INS42 INS14 INS39 INS59 INS7 INS7 INS7 INS42 INS8 INS42 UPD42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV8 INS37 INS42 INS42 UPD43 UPD43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 UPD43 UPD43 INS38 INS8 INS32 INS42 INS43 INS32 INS11 INS9 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS10 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 INS32 INS41 UPD42 INS42 INS42 INS42 INS42 INS42 INS39 INS34 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD43 UPD42 UPD43 INS42 INS42 INS42 INS42 INS32 INS9 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS60 INS21 INS45 INS45 UPD43 INS39 INS59 INS32 UPD42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 DEL34 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL34 DEL34 DEL16 DEL42 DEL42 DEL67