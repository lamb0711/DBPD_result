HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.

+import java.util.Arrays;
-import org.apache.commons.lang.StringUtils;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.hdfs.DFSUtilClient;
+import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.server.protocol.BlockStorageMovementCommand.BlockMovingInfo;
-public class IntraSPSNameNodeContext implements Context<Long> {
+public class IntraSPSNameNodeContext implements Context {
-  private SPSService<Long> service;
+  private SPSService service;
+  private final FileCollector fileCollector;
+  private final BlockMoveTaskHandler blockMoveTaskHandler;
-      BlockManager blockManager, SPSService<Long> service) {
+      BlockManager blockManager, SPSService service) {
+    fileCollector = new IntraSPSNameNodeFileIdCollector(
+        namesystem.getFSDirectory(), service);
+    blockMoveTaskHandler = new IntraSPSNameNodeBlockMoveTaskHandler(
+        blockManager, namesystem);
-   * @return object containing information regarding the file or null if file
-   *         not found.
+   * @return object containing information regarding the file.
-  public HdfsFileStatus getFileInfo(Long inodeID) throws IOException {
-    String filePath = namesystem.getFilePath(inodeID);
-    if (StringUtils.isBlank(filePath)) {
-      LOG.debug("File with inodeID:{} doesn't exists!", inodeID);
-      return null;
-    }
-    return namesystem.getFileInfo(filePath, true, true);
+  public HdfsFileStatus getFileInfo(long inodeID) throws IOException {
+    Path filePath = DFSUtilClient.makePathFromFileId(inodeID);
+    return namesystem.getFileInfo(filePath.toString(), true, true);
-  public boolean isFileExist(Long inodeId) {
+  public boolean isFileExist(long inodeId) {
-  public void removeSPSHint(Long inodeId) throws IOException {
+  public void removeSPSHint(long inodeId) throws IOException {
-  public void removeSPSPathId(Long trackId) {
+  public void removeSPSPathId(long trackId) {
+
+  @Override
+  public void scanAndCollectFiles(long filePath)
+      throws IOException, InterruptedException {
+    fileCollector.scanAndCollectFiles(filePath);
+  }
+
+  @Override
+  public void submitMoveTask(BlockMovingInfo blkMovingInfo) throws IOException {
+    blockMoveTaskHandler.submitMoveTask(blkMovingInfo);
+  }
+
+  @Override
+  public void notifyMovementTriedBlocks(Block[] moveAttemptFinishedBlks) {
+    LOG.info("Movement attempted blocks: {}",
+        Arrays.asList(moveAttemptFinishedBlks));
+  }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 MOV43 INS23 INS23 INS31 INS31 INS31 INS31 MOV43 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 MOV29 MOV78 MOV83 MOV43 MOV42 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 MOV42 INS42 INS42 INS42 MOV43 INS21 INS21 INS39 MOV60 INS41 INS39 INS39 INS39 INS42 INS39 INS42 INS42 INS42 MOV21 INS42 INS43 INS42 INS42 INS21 INS42 INS5 INS42 INS21 INS7 INS7 UPD66 UPD43 INS32 INS42 INS32 INS43 INS85 INS32 INS42 INS14 INS42 INS14 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS9 INS9 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS43 INS32 INS42 INS43 INS42 INS42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL66 DEL42 DEL43 DEL32 DEL33 DEL41 DEL8 DEL25 DEL9 DEL9 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL45