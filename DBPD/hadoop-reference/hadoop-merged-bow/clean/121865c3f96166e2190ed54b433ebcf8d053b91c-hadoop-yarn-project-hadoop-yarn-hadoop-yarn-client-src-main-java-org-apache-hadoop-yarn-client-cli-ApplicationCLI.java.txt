YARN-8299.  Added CLI and REST API for query container status.
            Contributed by Chandni Singh

+  public static final String VERSION = "version";
+  public static final String STATES = "states";
-          "List containers for application attempt.");
+          "List containers for application attempt when application " +
+          "attempt ID is provided. When application name is provided, " +
+          "then it finds the instances of the application based on app's " +
+          "own implementation, and -appTypes option must be specified " +
+          "unless it is the default yarn-service type. With app name, it " +
+          "supports optional use of -version to filter instances based on " +
+          "app version, -components to filter instances based on component " +
+          "names, -states to filter instances based on instance state.");
-      opts.getOption(LIST_CMD).setArgName("Application Attempt ID");
+      opts.getOption(LIST_CMD).setArgName("Application Name or Attempt ID");
+      opts.addOption(APP_TYPE_CMD, true, "Works with -list to " +
+          "specify the app type when application name is provided.");
+      opts.getOption(APP_TYPE_CMD).setValueSeparator(',');
+      opts.getOption(APP_TYPE_CMD).setArgs(Option.UNLIMITED_VALUES);
+      opts.getOption(APP_TYPE_CMD).setArgName("Types");
+
+      opts.addOption(VERSION, true, "Works with -list "
+          + "to filter instances based on input application version.");
+      opts.getOption(VERSION).setArgs(1);
+
+      opts.addOption(COMPONENTS, true, "Works with -list to " +
+          "filter instances based on input comma-separated list of " +
+          "component names.");
+      opts.getOption(COMPONENTS).setValueSeparator(',');
+      opts.getOption(COMPONENTS).setArgs(Option.UNLIMITED_VALUES);
+
+      opts.addOption(STATES, true, "Works with -list to " +
+          "filter instances based on input comma-separated list of " +
+          "instance states.");
+      opts.getOption(STATES).setValueSeparator(',');
+      opts.getOption(STATES).setArgs(Option.UNLIMITED_VALUES);
+
-        if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD)) {
+        if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD, APP_TYPE_CMD,
+            VERSION, COMPONENTS, STATES)) {
-        listContainers(cliParser.getOptionValue(LIST_CMD));
+        String appAttemptIdOrName = cliParser.getOptionValue(LIST_CMD);
+        try {
+          // try parsing attempt id, if it succeeds, it means it's appId
+          ApplicationAttemptId.fromString(appAttemptIdOrName);
+          listContainers(appAttemptIdOrName);
+        } catch (IllegalArgumentException e) {
+          // not appAttemptId format, it could be appName. If app-type is not
+          // provided, assume it is yarn-service type.
+          AppAdminClient client = AppAdminClient
+              .createAppAdminClient(getSingleAppTypeFromCLI(cliParser),
+                  getConf());
+          String version = cliParser.getOptionValue(VERSION);
+          String[] components = cliParser.getOptionValues(COMPONENTS);
+          String[] instanceStates = cliParser.getOptionValues(STATES);
+          try {
+            sysout.println(client.getInstances(appAttemptIdOrName,
+                components == null ? null : Arrays.asList(components),
+                version, instanceStates == null ? null :
+                    Arrays.asList(instanceStates)));
+            return 0;
+          } catch (ApplicationNotFoundException exception) {
+            System.err.println("Application with name '" + appAttemptIdOrName
+                + "' doesn't exist in RM or Timeline Server.");
+            return -1;
+          } catch (Exception ex) {
+            System.err.println(ex.getMessage());
+            return -1;
+          }
+        }

INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS45 INS42 INS42 INS45 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS27 UPD45 INS42 INS42 INS42 INS9 INS27 INS32 INS42 INS13 INS32 INS42 INS40 INS32 INS42 INS45 INS42 INS42 INS42 INS9 INS27 INS32 INS42 INS34 INS42 INS42 INS42 INS9 INS27 INS32 INS42 INS13 INS32 INS42 INS40 INS42 INS42 INS42 INS9 INS27 INS32 INS42 INS13 INS32 INS42 INS40 INS8 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 MOV25 INS60 INS54 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS21 MOV21 INS44 INS8 INS32 INS43 INS42 INS60 INS60 INS60 INS60 INS54 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS5 INS59 INS5 INS59 INS8 INS12 INS12 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS32 INS21 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS43 INS42 INS21 INS41 INS43 INS42 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS38 INS42 INS32 INS38 INS42 INS42 INS42 INS16 INS42 INS16 INS40 INS42 INS27 INS34 INS40 INS42 INS32 INS34 INS27 INS33 INS32 INS27 INS33 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 DEL45 DEL8