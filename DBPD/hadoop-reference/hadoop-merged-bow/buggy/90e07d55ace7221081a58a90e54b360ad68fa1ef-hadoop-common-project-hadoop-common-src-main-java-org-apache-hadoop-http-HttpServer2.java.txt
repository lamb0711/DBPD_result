HADOOP-11754. RM fails to start in non-secure mode due to authentication filter failure. Contributed by Haohui Mai.

+import java.util.Properties;
+import org.apache.hadoop.security.AuthenticationFilterInitializer;
+import org.apache.hadoop.security.authentication.util.FileSignerSecretProvider;
+import org.apache.hadoop.security.authentication.util.RandomSignerSecretProvider;
+import org.apache.hadoop.security.authentication.util.SignerSecretProvider;
+import org.apache.hadoop.security.authentication.util.ZKSignerSecretProvider;
+import static org.apache.hadoop.security.authentication.server
+    .AuthenticationFilter.*;
+    private boolean disallowFallbackToRandomSignerSecretProvider;
+    private String authFilterConfigurationPrefix = "hadoop.http.authentication.";
+    public Builder disallowFallbackToRandomSingerSecretProvider(boolean value) {
+      this.disallowFallbackToRandomSignerSecretProvider = value;
+      return this;
+    }
+
+    public Builder authFilterConfigurationPrefix(String value) {
+      this.authFilterConfigurationPrefix = value;
+      return this;
+    }
+
+    try {
+      SignerSecretProvider secretProvider =
+          constructSecretProvider(b, webAppContext.getServletContext());
+      this.webAppContext.getServletContext().setAttribute
+          (AuthenticationFilter.SIGNER_SECRET_PROVIDER_ATTRIBUTE,
+           secretProvider);
+    } catch(IOException e) {
+      throw e;
+    } catch (Exception e) {
+      throw new IOException(e);
+    }
+
+  private static SignerSecretProvider constructSecretProvider(final Builder b,
+      ServletContext ctx)
+      throws Exception {
+    final Configuration conf = b.conf;
+    Properties config = getFilterProperties(conf,
+                                            b.authFilterConfigurationPrefix);
+    return AuthenticationFilter.constructSecretProvider(
+        ctx, config, b.disallowFallbackToRandomSignerSecretProvider);
+  }
+
+  private static Properties getFilterProperties(Configuration conf, String
+      prefix) {
+    Properties prop = new Properties();
+    Map<String, String> filterConfig = AuthenticationFilterInitializer
+        .getFilterConfigMap(conf, prefix);
+    prop.putAll(filterConfig);
+    return prop;
+  }
+
-        Collections.<String, String> emptyMap(), new String[] { "/*" });
+                 Collections.<String, String> emptyMap(), new String[] { "/*" });

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS54 INS42 INS83 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS21 INS41 INS42 INS42 INS42 INS45 INS42 INS39 INS42 INS21 INS41 INS42 INS43 INS42 INS21 INS41 INS8 INS12 INS12 INS42 INS42 INS83 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS74 INS59 INS32 INS42 INS7 INS52 INS42 INS7 INS52 INS60 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS22 INS42 INS43 INS42 INS42 INS42 INS52 INS42 INS42