HADOOP-6551. Delegation token renewing and cancelling should provide
meaningful exceptions when there are failures instead of returning 
false. (omalley)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@911743 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.io.Text;
+
+import org.apache.hadoop.security.AccessControlException;
-   * Renew a delegation token. Canceled tokens are not renewed. Return true if
-   * the token is successfully renewed; false otherwise.
+   * Renew a delegation token.
+   * @param token the token to renew
+   * @param renewer the full principal name of the user doing the renewal
+   * @return the new expiration time
+   * @throws InvalidToken if the token is invalid
+   * @throws AccessControlException if the user can't renew token
-  public Boolean renewToken(Token<TokenIdent> token,
-      String renewer) throws InvalidToken, IOException {
+  public long renewToken(Token<TokenIdent> token,
+                         String renewer) throws InvalidToken, IOException {
-        LOG.warn("Renewal request for unknown token");
-        return false;
+        throw new InvalidToken("Renewal request for unknown token");
-      LOG.warn("Client " + renewer + " tries to renew an expired token");
-      return false;
+      throw new InvalidToken("User " + renewer + 
+                             " tried to renew an expired token");
-    if (id.getRenewer() == null || !id.getRenewer().toString().equals(renewer)) {
-      LOG.warn("Client " + renewer + " tries to renew a token with "
-          + "renewer specified as " + id.getRenewer());
-      return false;
+    if (id.getRenewer() == null) {
+      throw new AccessControlException("User " + renewer + 
+                                       " tried to renew a token without " +
+                                       "a renewer");
+    }
+    if (!id.getRenewer().toString().equals(renewer)) {
+      throw new AccessControlException("Client " + renewer + 
+                                       " tries to renew a token with " +
+                                       "renewer specified as " + 
+                                       id.getRenewer());
-      LOG.warn("Unable to find master key for keyId=" + id.getMasterKeyId() 
-          + " from cache. Failed to renew an unexpired token with sequenceNumber=" 
-          + id.getSequenceNumber() + ", issued by this key");
-      return false;
+      throw new InvalidToken("Unable to find master key for keyId=" + 
+                             id.getMasterKeyId() +
+                             " from cache. Failed to renew an unexpired token"+
+                             " with sequenceNumber=" + id.getSequenceNumber());
-      LOG.warn("Client " + renewer + " is trying to renew a token with wrong password");
-      return false;
+      throw new AccessControlException("Client " + renewer + 
+                                       " is trying to renew a token with " +
+                                       "wrong password");
-    return true;
+    return info.getRenewDate();
-   * Cancel a token by removing it from cache. Return true if 
-   * token exists in cache; false otherwise.
+   * Cancel a token by removing it from cache.
+   * @throws InvalidToken for invalid token
+   * @throws AccessControlException if the user isn't allowed to cancel
-  public Boolean cancelToken(Token<TokenIdent> token,
+  public void cancelToken(Token<TokenIdent> token,
-    if (id.getRenewer() == null) {
-      LOG.warn("Renewer is null: Invalid Identifier");
-      return false;
-    }
-      LOG.warn("owner is null: Invalid Identifier");
-      return false;
+      throw new InvalidToken("Token with no owner");
-    String renewer = id.getRenewer().toString();
-    if (!canceller.equals(owner) && !canceller.equals(renewer)) {
-      LOG.warn(canceller + " is not authorized to cancel the token");
-      return false;
+    Text renewer = id.getRenewer();
+    if (!canceller.equals(owner) && 
+        (renewer == null || !canceller.equals(renewer.toString()))) {
+      throw new AccessControlException(canceller + 
+                                      " is not authorized to cancel the token");
-    return info != null;
+    if (info == null) {
+      throw new InvalidToken("Token not found");
+    }

INS26 INS26 INS40 INS40 INS39 INS39 INS65 INS65 INS65 INS65 INS65 INS65 INS25 INS65 INS65 INS65 INS25 UPD66 MOV66 INS42 UPD66 MOV66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 MOV27 INS8 MOV38 INS32 UPD66 MOV66 INS42 UPD66 MOV66 INS42 INS66 UPD43 INS27 INS8 INS53 INS53 INS53 INS53 INS53 INS42 INS42 INS53 UPD42 MOV32 INS36 INS53 MOV42 MOV33 INS53 INS14 INS14 INS14 INS14 INS14 INS14 INS27 INS14 INS14 INS53 INS43 INS27 INS43 INS27 INS43 MOV27 INS43 MOV27 MOV32 INS43 INS27 INS43 INS45 INS27 MOV38 INS43 MOV27 INS43 INS45 INS14 INS42 UPD45 MOV45 MOV42 UPD45 MOV45 INS42 INS45 INS42 INS45 INS45 INS42 INS42 UPD45 UPD45 INS42 MOV45 MOV42 UPD45 MOV45 INS45 INS42 INS42 INS33 INS42 INS42 INS43 INS45 INS32 INS42 MOV42 INS42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41 DEL42 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL27 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL42 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL9 DEL65 DEL42 DEL43 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL27 DEL41