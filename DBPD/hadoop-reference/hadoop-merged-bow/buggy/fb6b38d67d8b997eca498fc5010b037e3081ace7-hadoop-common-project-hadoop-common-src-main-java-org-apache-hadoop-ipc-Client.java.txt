HADOOP-11772. RPC Invoker relies on static ClientCache which has synchronized(this) blocks. Contributed by Haohui Mai.

+import java.util.concurrent.Callable;
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
-  private Hashtable<ConnectionId, Connection> connections =
-    new Hashtable<ConnectionId, Connection>();
+  private final Cache<ConnectionId, Connection> connections =
+      CacheBuilder.newBuilder().build();
-      // release the resources
-      // first thing to do;take the connection out of the connection list
-      synchronized (connections) {
-        if (connections.get(remoteId) == this) {
-          connections.remove(remoteId);
-        }
-      }
+      connections.invalidate(remoteId);
-    synchronized (connections) {
-      for (Connection conn : connections.values()) {
-        conn.interrupt();
-      }
+    for (Connection conn : connections.asMap().values()) {
+      conn.interrupt();
-    while (!connections.isEmpty()) {
+    while (connections.size() > 0) {
-    return call(RPC.RpcKind.RPC_BUILTIN, param, address);
-    
-  }
-  /** Make a call, passing <code>param</code>, to the IPC server running at
-   * <code>address</code>, returning the value.  Throws exceptions if there are
-   * network problems or if the remote code threw an exception.
-   * @deprecated Use {@link #call(RPC.RpcKind, Writable,
-   *  ConnectionId)} instead 
-   */
-  @Deprecated
-  public Writable call(RPC.RpcKind rpcKind, Writable param, InetSocketAddress address)
-  throws IOException {
-      return call(rpcKind, param, address, null);
-  }
-  
-  /** Make a call, passing <code>param</code>, to the IPC server running at
-   * <code>address</code> with the <code>ticket</code> credentials, returning 
-   * the value.  
-   * Throws exceptions if there are network problems or if the remote code 
-   * threw an exception.
-   * @deprecated Use {@link #call(RPC.RpcKind, Writable, 
-   * ConnectionId)} instead 
-   */
-  @Deprecated
-  public Writable call(RPC.RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-      UserGroupInformation ticket) throws IOException {
-    ConnectionId remoteId = ConnectionId.getConnectionId(addr, null, ticket, 0,
+    ConnectionId remoteId = ConnectionId.getConnectionId(address, null, null, 0,
-    return call(rpcKind, param, remoteId);
-  }
-  
-  /** Make a call, passing <code>param</code>, to the IPC server running at
-   * <code>address</code> which is servicing the <code>protocol</code> protocol, 
-   * with the <code>ticket</code> credentials and <code>rpcTimeout</code> as 
-   * timeout, returning the value.  
-   * Throws exceptions if there are network problems or if the remote code 
-   * threw an exception. 
-   * @deprecated Use {@link #call(RPC.RpcKind, Writable,
-   *  ConnectionId)} instead 
-   */
-  @Deprecated
-  public Writable call(RPC.RpcKind rpcKind, Writable param, InetSocketAddress addr, 
-                       Class<?> protocol, UserGroupInformation ticket,
-                       int rpcTimeout) throws IOException {
-    ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
-        ticket, rpcTimeout, conf);
-    return call(rpcKind, param, remoteId);
+    return call(RpcKind.RPC_BUILTIN, param, remoteId);
+
-  
-    synchronized (connections) {
-      return connections.keySet();
-    }
+    return connections.asMap().keySet();
-  private Connection getConnection(ConnectionId remoteId,
-      Call call, int serviceClass, AtomicBoolean fallbackToSimpleAuth)
+  private Connection getConnection(
+      final ConnectionId remoteId,
+      Call call, final int serviceClass, AtomicBoolean fallbackToSimpleAuth)
-    do {
-      synchronized (connections) {
-        connection = connections.get(remoteId);
-        if (connection == null) {
-          connection = new Connection(remoteId, serviceClass);
-          connections.put(remoteId, connection);
-        }
+    while(true) {
+      try {
+        connection = connections.get(remoteId, new Callable<Connection>() {
+          @Override
+          public Connection call() throws Exception {
+            return new Connection(remoteId, serviceClass);
+          }
+        });
+      } catch (ExecutionException e) {
+        throw new IOException(e);
-    } while (!connection.addCall(call));
+      if (connection.addCall(call)) {
+        break;
+      } else {
+        connections.invalidate(remoteId);
+      }
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 MOV83 INS83 UPD74 MOV74 INS59 INS8 UPD43 UPD42 MOV42 MOV32 MOV70 INS60 MOV41 INS83 MOV43 INS83 INS61 UPD42 INS32 UPD42 MOV21 INS27 MOV43 INS59 INS9 INS8 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS34 INS42 INS32 UPD40 UPD42 INS32 INS54 MOV25 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS33 INS33 INS34 INS42 MOV42 INS42 INS8 INS12 MOV32 INS8 INS8 MOV21 INS44 INS8 INS10 INS21 INS43 INS42 INS53 INS32 INS42 INS14 INS42 INS42 INS42 INS14 MOV43 INS42 INS74 INS1 INS43 INS43 INS31 INS42 INS42 INS78 INS83 MOV43 INS42 INS43 MOV8 INS42 INS42 INS41 MOV14 DEL42 DEL33 DEL34 DEL42 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL32 DEL52 DEL27 DEL8 DEL25 DEL8 DEL51 DEL42 DEL8 DEL51 DEL32 DEL38 DEL66 DEL66 DEL66 DEL65 DEL66 DEL42 DEL40 DEL43 DEL69 DEL42 DEL43 DEL69 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL42 DEL40 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL42 DEL40 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL8 DEL51 DEL8 DEL42 DEL43 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL8 DEL51 DEL8 DEL38 DEL19