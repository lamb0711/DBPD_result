HADOOP-6920. Metrics instrumentation to move new metrics2 framework. Contributed by Luke Lu.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101682 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.metrics.MetricsContext;
-import org.apache.hadoop.metrics.MetricsRecord;
-import org.apache.hadoop.metrics.MetricsUtil;
-import org.apache.hadoop.metrics.Updater;
-import org.apache.hadoop.metrics.util.MetricsBase;
-import org.apache.hadoop.metrics.util.MetricsRegistry;
-import org.apache.hadoop.metrics.util.MetricsTimeVaryingRate;
+import org.apache.hadoop.metrics2.annotation.Metric;
+import org.apache.hadoop.metrics2.annotation.Metrics;
+import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;
+import org.apache.hadoop.metrics2.lib.MetricsRegistry;
+import org.apache.hadoop.metrics2.lib.MutableRates;
- * 
- * This class is for maintaining  the various RPC method related statistics
+ * This class is for maintaining RPC method related statistics
- * This also registers the JMX MBean for RPC.
-public class RpcDetailedMetrics implements Updater {
-  public final MetricsRegistry registry = new MetricsRegistry();
-  private final MetricsRecord metricsRecord;
-  private static final Log LOG = LogFactory.getLog(RpcDetailedMetrics.class);
-  RpcDetailedActivityMBean rpcMBean;
-  
+@Metrics(about="Per method RPC metrics", context="rpcdetailed")
+public class RpcDetailedMetrics {
+
+  @Metric MutableRates rates;
+
+  static final Log LOG = LogFactory.getLog(RpcDetailedMetrics.class);
+  final MetricsRegistry registry;
+  final String name;
+
+  RpcDetailedMetrics(int port) {
+    name = "RpcDetailedActivityForPort"+ port;
+    registry = new MetricsRegistry("rpcdetailed")
+        .tag("port", "RPC port", String.valueOf(port));
+    LOG.debug(registry.info());
+  }
+
+  public String name() { return name; }
+
+  public static RpcDetailedMetrics create(int port) {
+    RpcDetailedMetrics m = new RpcDetailedMetrics(port);
+    return DefaultMetricsSystem.instance().register(m.name, null, m);
+  }
+
-   * Statically added metrics to expose at least one metrics, without
-   * which other dynamically added metrics are not exposed over JMX.
+   * Initialize the metrics for JMX with protocol methods
+   * @param protocol the protocol class
-  final MetricsTimeVaryingRate getProtocolVersion = 
-    new MetricsTimeVaryingRate("getProtocolVersion", registry);
-  
-  public RpcDetailedMetrics(final String hostName, final String port) {
-    MetricsContext context = MetricsUtil.getContext("rpc");
-    metricsRecord = MetricsUtil.createRecord(context, "detailed-metrics");
-
-    metricsRecord.setTag("port", port);
-
-    LOG.info("Initializing RPC Metrics with hostName=" 
-        + hostName + ", port=" + port);
-
-    context.registerUpdater(this);
-    
-    // Need to clean up the interface to RpcMgt - don't need both metrics and server params
-    rpcMBean = new RpcDetailedActivityMBean(registry, hostName, port);
+  public void init(Class<?> protocol) {
+    rates.init(protocol);
-  
-  
+
-   * Push the metrics to the monitoring subsystem on doUpdate() call.
+   * Add an RPC processing time sample
+   * @param name  of the RPC call
+   * @param processingTime  the processing time
-  public void doUpdates(final MetricsContext context) {
-    
-    synchronized (this) {
-      for (MetricsBase m : registry.getMetricsList()) {
-        m.pushMetric(metricsRecord);
-      }
-    }
-    metricsRecord.update();
+  //@Override // some instrumentation interface
+  public void addProcessingTime(String name, int processingTime) {
+    rates.add(name, processingTime);
-  public void shutdown() {
-    if (rpcMBean != null) 
-      rpcMBean.shutdown();
-  }
+  /**
+   * Shutdown the instrumentation for the process
+   */
+  //@Override // some instrumentation interface
+  public void shutdown() {}

MOV23 UPD40 UPD40 UPD40 UPD40 UPD40 INS77 INS23 INS31 INS31 INS31 INS31 INS42 INS80 INS80 INS78 INS43 INS59 MOV43 INS42 INS44 INS8 MOV83 MOV43 INS42 INS8 INS83 INS83 INS43 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 UPD42 INS44 INS8 INS29 UPD66 INS42 INS45 INS42 INS45 INS42 UPD42 MOV42 INS42 UPD42 INS39 INS42 INS21 INS21 INS21 INS41 INS42 INS39 MOV60 INS41 INS65 INS65 INS74 INS42 MOV21 INS65 UPD65 INS65 UPD43 UPD42 INS39 INS42 MOV21 INS65 INS7 INS7 INS32 INS42 UPD43 INS32 INS66 INS42 INS66 INS43 INS76 INS32 INS66 INS42 UPD66 INS42 INS66 UPD42 INS66 INS42 INS27 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS14 INS32 UPD42 MOV42 INS40 INS33 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS45 INS42 MOV14 INS42 INS45 INS45 INS32 INS42 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL66 DEL83 DEL43 DEL83 DEL83 DEL42 DEL43 DEL83 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL7 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL14 DEL59 DEL23 DEL42 DEL83 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL31 DEL83 DEL52 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL8 DEL70 DEL8 DEL51 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL25