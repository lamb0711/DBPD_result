HADOOP-6408. Add a /conf servlet to dump running configuration. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@896641 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.OutputStreamWriter;
+import javax.xml.transform.TransformerException;
+import org.w3c.dom.Comment;
+   * The value reported as the setting resource when a key is set
+   * by code rather than a file resource.
+   */
+  static final String UNKNOWN_RESOURCE = "Unknown";
+
+  /**
-  
-  /**
-   * Flag to indicate if the storage of resource which updates a key needs 
-   * to be stored for each key
-   */
-  private boolean storeResource;
-  
+
+    updatingResource = new HashMap<String, String>();
-    this.storeResource = false;
-  }
-  
-  /**
-   * A new configuration with the same settings and additional facility for
-   * storage of resource to each key which loads or updates 
-   * the key most recently
-   * @param other the configuration from which to clone settings
-   * @param storeResource flag to indicate if the storage of resource to 
-   * each key is to be stored
-   */
-  private Configuration(Configuration other, boolean storeResource) {
-    this(other);
-    this.storeResource = storeResource;
-    if (storeResource) {
-      updatingResource = new HashMap<String, String>();
-    }
+
+     this.updatingResource = new HashMap<String, String>(other.updatingResource);
+      updatingResource.put(name, UNKNOWN_RESOURCE);
-        if (storeResource) {
-          for (Map.Entry<Object,Object> item: overlay.entrySet()) {
-            updatingResource.put((String) item.getKey(), "Unknown");
-          }
+        for (Map.Entry<Object,Object> item: overlay.entrySet()) {
+          updatingResource.put((String) item.getKey(), UNKNOWN_RESOURCE);
-      if (storeResource) {
-        updatingResource.remove(oldKey);
-      }
+      updatingResource.remove(oldKey);
-      if (storeResource) {
-        updatingResource.put(key, updatingResource.get(attr));
-      }
+      updatingResource.put(key, updatingResource.get(attr));
-              if (storeResource) {
-                updatingResource.put(attr, name.toString());
-              }
+              updatingResource.put(attr, name.toString());
-   * Write out the non-default properties in this configuration to the give
+   * Write out the non-default properties in this configuration to the given
+    writeXml(new OutputStreamWriter(out));
+  }
+
+  /** 
+   * Write out the non-default properties in this configuration to the given
+   * {@link Writer}.
+   * 
+   * @param out the writer to write to.
+   */
+  public synchronized void writeXml(Writer out) throws IOException {
-      
+
+        if (updatingResource != null) {
+          Comment commentNode = doc.createComment(
+            "Loaded from " + updatingResource.get(name));
+          propNode.appendChild(commentNode);
+        }
-    } catch (Exception e) {
-      throw new RuntimeException(e);
+    } catch (TransformerException te) {
+      throw new IOException(te);
+    } catch (ParserConfigurationException pe) {
+      throw new IOException(pe);
-  public static void dumpConfiguration(Configuration conf, 
+  public static void dumpConfiguration(Configuration config,
-    Configuration config = new Configuration(conf,true);
-    config.reloadConfiguration();
-    for (Map.Entry<Object,Object> item: config.getProps().entrySet()) {
-      dumpGenerator.writeStartObject();
-      dumpGenerator.writeStringField("key", (String) item.getKey());
-      dumpGenerator.writeStringField("value", 
-          config.get((String) item.getKey()));
-      dumpGenerator.writeBooleanField("isFinal",
-          config.finalParameters.contains(item.getKey()));
-      dumpGenerator.writeStringField("resource",
-          config.updatingResource.get(item.getKey()));
-      dumpGenerator.writeEndObject();
+    synchronized (config) {
+      for (Map.Entry<Object,Object> item: config.getProps().entrySet()) {
+        dumpGenerator.writeStartObject();
+        dumpGenerator.writeStringField("key", (String) item.getKey());
+        dumpGenerator.writeStringField("value", 
+                                       config.get((String) item.getKey()));
+        dumpGenerator.writeBooleanField("isFinal",
+                                        config.finalParameters.contains(item.getKey()));
+        dumpGenerator.writeStringField("resource",
+                                       config.updatingResource.get(item.getKey()));
+        dumpGenerator.writeEndObject();
+      }

INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 UPD83 INS83 INS43 MOV51 MOV8 MOV29 UPD83 INS39 UPD42 MOV44 INS43 INS8 INS29 INS83 INS44 INS42 UPD42 INS45 MOV41 UPD42 MOV42 MOV21 INS65 INS65 INS43 INS42 MOV43 UPD42 INS51 UPD66 UPD66 MOV27 UPD66 INS32 INS66 INS65 INS66 INS42 INS66 INS42 INS12 INS42 INS8 MOV42 MOV14 INS21 INS21 MOV21 MOV21 MOV21 MOV21 INS42 INS14 INS42 INS44 INS8 MOV70 INS7 INS32 MOV27 INS43 INS42 UPD43 UPD42 INS43 INS42 INS53 INS22 INS14 INS42 INS42 INS42 INS42 MOV21 MOV25 UPD42 MOV42 INS25 UPD42 INS42 INS14 INS42 INS52 INS42 INS74 INS40 MOV27 INS27 INS8 UPD43 UPD42 INS43 INS42 INS43 INS43 INS43 MOV25 INS42 INS33 INS60 INS21 UPD42 INS42 INS42 INS42 INS42 MOV27 INS43 INS59 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV38 MOV8 INS42 INS42 INS27 MOV21 INS45 INS32 INS42 INS42 INS42 DEL39 DEL52 DEL42 DEL22 DEL9 DEL42 DEL45 DEL25 DEL8 DEL42 DEL8 DEL25 DEL42 DEL8 DEL25 DEL42 DEL8 DEL25 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL17 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL9 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21