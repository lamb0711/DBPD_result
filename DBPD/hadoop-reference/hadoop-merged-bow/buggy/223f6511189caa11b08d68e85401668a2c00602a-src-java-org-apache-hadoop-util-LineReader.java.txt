HADOOP-7096. Allow setting of end-of-record delimiter for TextInputFormat. Contributed by Ahmed Radwan.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1068729 13f79535-47bb-0310-9956-ffa450edef68

+ * Depending on the constructor used, lines will either be terminated by:
+ * <ul>
+ * <li>one of the following: '\n' (LF) , '\r' (CR),
+ * or '\r\n' (CR+LF).</li>
+ * <li><em>or</em>, a custom byte sequence delimiter</li>
+ * </ul>
+ * In both cases, EOF also terminates an otherwise unterminated
+ * line.
+  // The line delimiter
+  private final byte[] recordDelimiterBytes;
+
+    this.recordDelimiterBytes = null;
+   * Create a line reader that reads from the given stream using the
+   * default buffer-size, and using a custom delimiter of array of
+   * bytes.
+   * @param in The input stream
+   * @param recordDelimiterBytes The delimiter
+   */
+  public LineReader(InputStream in, byte[] recordDelimiterBytes) {
+    this.in = in;
+    this.bufferSize = DEFAULT_BUFFER_SIZE;
+    this.buffer = new byte[this.bufferSize];
+    this.recordDelimiterBytes = recordDelimiterBytes;
+  }
+
+  /**
+   * Create a line reader that reads from the given stream using the
+   * given buffer-size, and using a custom delimiter of array of
+   * bytes.
+   * @param in The input stream
+   * @param bufferSize Size of the read buffer
+   * @param recordDelimiterBytes The delimiter
+   * @throws IOException
+   */
+  public LineReader(InputStream in, int bufferSize,
+      byte[] recordDelimiterBytes) {
+    this.in = in;
+    this.bufferSize = bufferSize;
+    this.buffer = new byte[this.bufferSize];
+    this.recordDelimiterBytes = recordDelimiterBytes;
+  }
+
+  /**
+   * Create a line reader that reads from the given stream using the
+   * <code>io.file.buffer.size</code> specified in the given
+   * <code>Configuration</code>, and using a custom delimiter of array of
+   * bytes.
+   * @param in input stream
+   * @param conf configuration
+   * @param recordDelimiterBytes The delimiter
+   * @throws IOException
+   */
+  public LineReader(InputStream in, Configuration conf,
+      byte[] recordDelimiterBytes) throws IOException {
+    this.in = in;
+    this.bufferSize = conf.getInt("io.file.buffer.size", DEFAULT_BUFFER_SIZE);
+    this.buffer = new byte[this.bufferSize];
+    this.recordDelimiterBytes = recordDelimiterBytes;
+  }
+
+
+  /**
-   * Read one line from the InputStream into the given Text.  A line
-   * can be terminated by one of the following: '\n' (LF) , '\r' (CR),
-   * or '\r\n' (CR+LF).  EOF also terminates an otherwise unterminated
-   * line.
+   * Read one line from the InputStream into the given Text.
+    if (this.recordDelimiterBytes != null) {
+      return readCustomLine(str, maxLineLength, maxBytesToConsume);
+    } else {
+      return readDefaultLine(str, maxLineLength, maxBytesToConsume);
+    }
+  }
+
+  /**
+   * Read a line terminated by one of CR, LF, or CRLF.
+   */
+  private int readDefaultLine(Text str, int maxLineLength, int maxBytesToConsume)
+  throws IOException {
+   * Read a line terminated by a custom delimiter.
+   */
+  private int readCustomLine(Text str, int maxLineLength, int maxBytesToConsume)
+      throws IOException {
+    str.clear();
+    int txtLength = 0; // tracks str.getLength(), as an optimization
+    long bytesConsumed = 0;
+    int delPosn = 0;
+    do {
+      int startPosn = bufferPosn; // starting from where we left off the last
+      // time
+      if (bufferPosn >= bufferLength) {
+        startPosn = bufferPosn = 0;
+        bufferLength = in.read(buffer);
+        if (bufferLength <= 0)
+          break; // EOF
+      }
+      for (; bufferPosn < bufferLength; ++bufferPosn) {
+        if (buffer[bufferPosn] == recordDelimiterBytes[delPosn]) {
+          delPosn++;
+          if (delPosn >= recordDelimiterBytes.length) {
+            bufferPosn++;
+            break;
+          }
+        } else {
+          delPosn = 0;
+        }
+      }
+      int readLength = bufferPosn - startPosn;
+      bytesConsumed += readLength;
+      int appendLength = readLength - delPosn;
+      if (appendLength > maxLineLength - txtLength) {
+        appendLength = maxLineLength - txtLength;
+      }
+      if (appendLength > 0) {
+        str.append(buffer, startPosn, appendLength);
+        txtLength += appendLength;
+      }
+    } while (delPosn < recordDelimiterBytes.length
+        && bytesConsumed < maxBytesToConsume);
+    if (bytesConsumed > (long) Integer.MAX_VALUE)
+      throw new IOException("Too many bytes before delimiter: " + bytesConsumed);
+    return (int) bytesConsumed;
+  }
+
+  /**

INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS5 INS59 INS29 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS42 INS44 INS44 INS44 INS43 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 UPD83 UPD42 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS39 INS85 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS5 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS5 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS5 INS42 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS65 INS65 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS21 INS60 INS60 INS60 INS19 INS25 INS41 INS7 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS39 INS85 INS7 INS7 INS7 INS7 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS39 INS85 INS7 INS7 INS7 INS7 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS39 INS85 INS7 INS7 INS7 INS7 UPD66 INS42 INS27 INS8 INS8 INS66 INS66 INS42 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS8 INS27 INS27 INS53 INS11 INS22 INS33 INS22 INS42 INS22 INS42 INS22 INS3 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS3 INS22 INS42 INS22 INS42 INS22 INS32 INS22 INS3 INS22 INS42 INS22 INS33 INS41 INS41 INS42 INS42 INS42 INS34 INS42 INS34 INS42 INS34 INS60 INS25 INS24 INS60 INS21 INS60 INS25 INS25 INS27 INS27 INS42 INS11 INS14 INS39 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS5 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS45 INS42 INS52 INS42 INS5 INS22 INS52 INS42 INS52 INS42 INS32 INS32 INS39 INS59 INS27 INS8 INS27 INS38 INS8 INS39 INS59 INS7 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS40 INS42 INS42 INS39 INS40 INS43 INS27 INS39 INS85 INS52 INS42 INS39 INS85 INS52 INS42 INS39 INS85 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS25 INS42 INS42 INS42 INS25 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS27 INS21 INS42 INS34 INS21 INS21 INS42 INS45 INS42 INS7 INS7 INS27 INS10 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS7 INS42 INS7 INS42 INS32 INS42 INS34 INS2 INS2 INS21 INS25 INS21 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS37 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS40 INS21 INS10 INS42 INS34 INS37 INS42 DEL66 DEL66 DEL66