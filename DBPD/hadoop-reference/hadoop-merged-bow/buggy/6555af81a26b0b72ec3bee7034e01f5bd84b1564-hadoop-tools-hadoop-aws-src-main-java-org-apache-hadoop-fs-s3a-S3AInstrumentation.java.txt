HADOOP-14475 Metrics of S3A don't print out when enabled. Contributed by Younger and Sean Mackrory.

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.metrics2.MetricsSource;
+import org.apache.hadoop.metrics2.MetricsSystem;
-import org.apache.hadoop.metrics2.annotation.Metrics;
+import org.apache.hadoop.metrics2.impl.MetricsSystemImpl;
-@Metrics(about = "Metrics for S3a", context = "S3AFileSystem")
-public class S3AInstrumentation {
+public class S3AInstrumentation implements Closeable, MetricsSource {
-  public static final String CONTEXT = "S3AFileSystem";
+  private static final String METRICS_SOURCE_BASENAME = "S3AMetrics";
+
+  /**
+   * {@value #METRICS_SYSTEM_NAME} The name of the s3a-specific metrics
+   * system instance used for s3a metrics.
+   */
+  public static final String METRICS_SYSTEM_NAME = "s3a-file-system";
+
+  /**
+   * {@value #CONTEXT} Currently all s3a metrics are placed in a single
+   * "context". Distinct contexts may be used in the future.
+   */
+  public static final String CONTEXT = "s3aFileSystem";
+
+  /**
+   * {@value #METRIC_TAG_FILESYSTEM_ID} The name of a field added to metrics
+   * records that uniquely identifies a specific FileSystem instance.
+   */
+  public static final String METRIC_TAG_FILESYSTEM_ID = "s3aFileSystemId";
+
+  /**
+   * {@value #METRIC_TAG_BUCKET} The name of a field added to metrics records
+   * that indicates the hostname portion of the FS URL.
+   */
+  public static final String METRIC_TAG_BUCKET = "bucket";
+
+  // metricsSystemLock must be used to synchronize modifications to
+  // metricsSystem and the following counters.
+  private static Object metricsSystemLock = new Object();
+  private static MetricsSystem metricsSystem = null;
+  private static int metricsSourceNameCounter = 0;
+  private static int metricsSourceActiveCounter = 0;
+
+  private String metricsSourceName;
+
-      new MetricsRegistry("S3AFileSystem").setContext(CONTEXT);
+      new MetricsRegistry("s3aFileSystem").setContext(CONTEXT);
-
-    registry.tag("FileSystemId",
-        "A unique identifier for the FS ",
-        fileSystemInstanceId.toString() + "-" + name.getHost());
-    registry.tag("fsURI",
-        "URI of this filesystem",
-        name.toString());
+    registry.tag(METRIC_TAG_FILESYSTEM_ID,
+        "A unique identifier for the instance",
+        fileSystemInstanceId.toString());
+    registry.tag(METRIC_TAG_BUCKET, "Hostname from the FS URL", name.getHost());
+
+    registerAsMetricsSource(name);
+  }
+
+  @VisibleForTesting
+  public MetricsSystem getMetricsSystem() {
+    synchronized (metricsSystemLock) {
+      if (metricsSystem == null) {
+        metricsSystem = new MetricsSystemImpl();
+        metricsSystem.init(METRICS_SYSTEM_NAME);
+      }
+    }
+    return metricsSystem;
+  }
+
+  /**
+   * Register this instance as a metrics source.
+   * @param name s3a:// URI for the associated FileSystem instance
+   */
+  private void registerAsMetricsSource(URI name) {
+    int number;
+    synchronized(metricsSystemLock) {
+      getMetricsSystem();
+
+      metricsSourceActiveCounter++;
+      number = ++metricsSourceNameCounter;
+    }
+    String msName = METRICS_SOURCE_BASENAME + number;
+    if (number > 1) {
+      msName = msName + number;
+    }
+    metricsSourceName = msName + "-" + name.getHost();
+    metricsSystem.register(metricsSourceName, "", this);
+  @Override
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    registry.snapshot(collector.addRecord(registry.info().name()), true);
+  }
+
+  public void close() {
+    synchronized (metricsSystemLock) {
+      metricsSystem.unregisterSource(metricsSourceName);
+      int activeSources = --metricsSourceActiveCounter;
+      if (activeSources == 0) {
+        metricsSystem.publishMetricsNow();
+        metricsSystem.shutdown();
+        metricsSystem = null;
+      }
+    }
+  }
+

MOV26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS83 INS42 INS43 INS43 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS42 INS83 INS83 INS83 MOV43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS29 INS43 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 INS42 INS45 INS65 INS42 UPD42 UPD45 INS65 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS33 INS42 INS34 INS42 INS34 INS42 INS42 INS21 INS21 INS42 INS42 INS51 INS41 INS65 INS65 INS43 INS42 INS60 INS51 INS60 INS25 MOV21 INS21 INS42 INS43 INS42 INS39 INS42 INS21 INS51 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS43 INS32 INS32 INS42 INS8 INS42 INS66 INS42 INS66 INS42 INS39 INS59 INS42 INS8 INS43 INS59 INS27 INS8 INS7 INS32 INS42 INS32 INS42 INS8 INS67 INS67 INS67 INS67 INS42 UPD45 INS42 INS42 INS42 INS45 MOV32 INS42 UPD45 INS42 INS42 INS25 INS42 INS21 INS21 INS21 INS42 INS42 INS27 INS42 INS34 INS21 INS42 MOV27 INS42 INS42 INS42 INS45 INS52 INS42 INS42 INS32 INS9 INS21 INS60 INS25 INS42 INS42 INS42 INS42 UPD42 INS27 INS8 INS32 INS37 INS7 INS42 INS42 INS7 INS42 INS42 INS42 INS32 INS32 INS39 INS59 INS27 INS8 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS38 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS38 INS42 INS34 INS21 INS21 INS21 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS42 DEL42 DEL42 DEL45 DEL80 DEL42 DEL45 DEL80 DEL77 DEL83 DEL42 DEL45 DEL42 DEL42 DEL45 DEL45 DEL32