HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.FSDataOutputStream;
+import org.apache.hadoop.fs.FSLinkResolver;
+import org.apache.hadoop.fs.FileAlreadyExistsException;
+import org.apache.hadoop.fs.FileChecksum;
+import org.apache.hadoop.fs.FileSystemLinkResolver;
-import org.apache.hadoop.fs.MD5MD5CRC32FileChecksum;
+import org.apache.hadoop.fs.ParentNotDirectoryException;
+import org.apache.hadoop.fs.UnresolvedLinkException;
+import org.apache.hadoop.fs.UnsupportedFileSystemException;
-import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
+import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
-  private Path makeAbsolute(Path f) {
-    if (f.isAbsolute()) {
-      return f;
-    } else {
-      return new Path(workingDir, f);
-    }
-  }
-
-    String result = makeAbsolute(dir).toUri().getPath();
+    String result = fixRelativePart(dir).toUri().getPath();
-    workingDir = makeAbsolute(dir);
+    workingDir = fixRelativePart(dir);
+  /**
+   * Checks that the passed URI belongs to this filesystem, resolves the path
+   * component against the current working directory if relative, and finally
+   * returns the absolute path component.
+   * 
+   * @param file URI to check and resolve
+   * @return resolved absolute path component of {file}
+   * @throws IllegalArgumentException if URI does not belong to this DFS
+   */
-    String result = makeAbsolute(file).toUri().getPath();
+    String result = file.toUri().getPath();
-      long start, long len) throws IOException {
+      final long start, final long len) throws IOException {
-    return dfs.getBlockLocations(getPathName(p), start, len);
-
+    final Path absF = fixRelativePart(p);
+    return new FileSystemLinkResolver<BlockLocation[]>() {
+      @Override
+      public BlockLocation[] doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.getBlockLocations(getPathName(p), start, len);
+      }
+      @Override
+      public BlockLocation[] next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.getFileBlockLocations(p, start, len);
+      }
+    }.resolve(this, absF);
-  public boolean recoverLease(Path f) throws IOException {
-    return dfs.recoverLease(getPathName(f));
+  public boolean recoverLease(final Path f) throws IOException {
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<Boolean>() {
+      @Override
+      public Boolean doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.recoverLease(getPathName(p));
+      }
+      @Override
+      public Boolean next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          return myDfs.recoverLease(p);
+        }
+        throw new UnsupportedOperationException("Cannot recoverLease through" +
+            " a symlink to a non-DistributedFileSystem: " + f + " -> " + p);
+      }
+    }.resolve(this, absF);
-  @SuppressWarnings("deprecation")
-  public HdfsDataInputStream open(Path f, int bufferSize) throws IOException {
+  public FSDataInputStream open(Path f, final int bufferSize)
+      throws IOException {
-    return new DFSClient.DFSDataInputStream(
-          dfs.open(getPathName(f), bufferSize, verifyChecksum));
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<FSDataInputStream>() {
+      @Override
+      public FSDataInputStream doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return new HdfsDataInputStream(
+            dfs.open(getPathName(p), bufferSize, verifyChecksum));
+      }
+      @Override
+      public FSDataInputStream next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.open(p, bufferSize);
+      }
+    }.resolve(this, absF);
-  /** This optional operation is not yet supported. */
-  public HdfsDataOutputStream append(Path f, int bufferSize,
-      Progressable progress) throws IOException {
+  public FSDataOutputStream append(Path f, final int bufferSize,
+      final Progressable progress) throws IOException {
-    return dfs.append(getPathName(f), bufferSize, progress, statistics);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<FSDataOutputStream>() {
+      @Override
+      public FSDataOutputStream doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.append(getPathName(p), bufferSize, progress, statistics);
+      }
+      @Override
+      public FSDataOutputStream next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.append(p, bufferSize);
+      }
+    }.resolve(this, absF);
-  public HdfsDataOutputStream create(Path f, FsPermission permission,
+  public FSDataOutputStream create(Path f, FsPermission permission,
-  public HdfsDataOutputStream create(Path f, FsPermission permission,
-      boolean overwrite, int bufferSize, short replication, long blockSize,
-      Progressable progress, InetSocketAddress[] favoredNodes) throws IOException {
+  public HdfsDataOutputStream create(final Path f,
+      final FsPermission permission, final boolean overwrite,
+      final int bufferSize, final short replication, final long blockSize,
+      final Progressable progress, final InetSocketAddress[] favoredNodes)
+          throws IOException {
-    final DFSOutputStream out = dfs.create(getPathName(f), permission,
-        overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)
-            : EnumSet.of(CreateFlag.CREATE),
-        true, replication, blockSize, progress, bufferSize, null, favoredNodes);
-    return new HdfsDataOutputStream(out, statistics);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<HdfsDataOutputStream>() {
+      @Override
+      public HdfsDataOutputStream doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        final DFSOutputStream out = dfs.create(getPathName(f), permission,
+            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)
+                : EnumSet.of(CreateFlag.CREATE),
+            true, replication, blockSize, progress, bufferSize, null,
+            favoredNodes);
+        return new HdfsDataOutputStream(out, statistics);
+      }
+      @Override
+      public HdfsDataOutputStream next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          return myDfs.create(p, permission, overwrite, bufferSize, replication,
+              blockSize, progress, favoredNodes);
+        }
+        throw new UnsupportedOperationException("Cannot create with" +
+            " favoredNodes through a symlink to a non-DistributedFileSystem: "
+            + f + " -> " + p);
+      }
+    }.resolve(this, absF);
-  public HdfsDataOutputStream create(Path f, FsPermission permission,
-    EnumSet<CreateFlag> cflags, int bufferSize, short replication, long blockSize,
-    Progressable progress, ChecksumOpt checksumOpt) throws IOException {
+  public FSDataOutputStream create(final Path f, final FsPermission permission,
+    final EnumSet<CreateFlag> cflags, final int bufferSize,
+    final short replication, final long blockSize, final Progressable progress,
+    final ChecksumOpt checksumOpt) throws IOException {
-    final DFSOutputStream out = dfs.create(getPathName(f), permission, cflags,
-        replication, blockSize, progress, bufferSize, checksumOpt);
-    return new HdfsDataOutputStream(out, statistics);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<FSDataOutputStream>() {
+      @Override
+      public FSDataOutputStream doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return new HdfsDataOutputStream(dfs.create(getPathName(p), permission,
+            cflags, replication, blockSize, progress, bufferSize, checksumOpt),
+            statistics);
+      }
+      @Override
+      public FSDataOutputStream next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.create(p, permission, cflags, bufferSize,
+            replication, blockSize, progress, checksumOpt);
+      }
+    }.resolve(this, absF);
-  
-  @SuppressWarnings("deprecation")
+
-    return new HdfsDataOutputStream(dfs.primitiveCreate(getPathName(f),
+    return new HdfsDataOutputStream(dfs.primitiveCreate(
+        getPathName(fixRelativePart(f)),
-   } 
+   }
-  public HdfsDataOutputStream createNonRecursive(Path f, FsPermission permission,
-      EnumSet<CreateFlag> flag, int bufferSize, short replication,
-      long blockSize, Progressable progress) throws IOException {
+  @SuppressWarnings("deprecation")
+  public FSDataOutputStream createNonRecursive(final Path f,
+      final FsPermission permission, final EnumSet<CreateFlag> flag,
+      final int bufferSize, final short replication, final long blockSize,
+      final Progressable progress) throws IOException {
-    return new HdfsDataOutputStream(dfs.create(getPathName(f), permission, flag,
-        false, replication, blockSize, progress, 
-        bufferSize, null), statistics);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<FSDataOutputStream>() {
+      @Override
+      public FSDataOutputStream doCall(final Path p) throws IOException,
+          UnresolvedLinkException {
+        return new HdfsDataOutputStream(dfs.create(getPathName(p), permission,
+            flag, false, replication, blockSize, progress, bufferSize, null),
+            statistics);
+      }
+
+      @Override
+      public FSDataOutputStream next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.createNonRecursive(p, permission, flag, bufferSize,
+            replication, blockSize, progress);
+      }
+    }.resolve(this, absF);
-                                short replication
+                                final short replication
-    return dfs.setReplication(getPathName(src), replication);
+    Path absF = fixRelativePart(src);
+    return new FileSystemLinkResolver<Boolean>() {
+      @Override
+      public Boolean doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.setReplication(getPathName(p), replication);
+      }
+      @Override
+      public Boolean next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.setReplication(p, replication);
+      }
+    }.resolve(this, absF);
-    String [] srcs = new String [psrcs.length];
-    for(int i=0; i<psrcs.length; i++) {
-      srcs[i] = getPathName(psrcs[i]);
-    }
-    dfs.concat(getPathName(trg), srcs);
+    // Make target absolute
+    Path absF = fixRelativePart(trg);
+    // Make all srcs absolute
+    Path[] srcs = new Path[psrcs.length];
+    for (int i=0; i<psrcs.length; i++) {
+      srcs[i] = fixRelativePart(psrcs[i]);
+    }
+    // Try the concat without resolving any links
+    String[] srcsStr = new String[psrcs.length];
+    try {
+      for (int i=0; i<psrcs.length; i++) {
+        srcsStr[i] = getPathName(srcs[i]);
+      }
+      dfs.concat(getPathName(trg), srcsStr);
+    } catch (UnresolvedLinkException e) {
+      // Exception could be from trg or any src.
+      // Fully resolve trg and srcs. Fail if any of them are a symlink.
+      FileStatus stat = getFileLinkStatus(absF);
+      if (stat.isSymlink()) {
+        throw new IOException("Cannot concat with a symlink target: "
+            + trg + " -> " + stat.getPath());
+      }
+      absF = fixRelativePart(stat.getPath());
+      for (int i=0; i<psrcs.length; i++) {
+        stat = getFileLinkStatus(srcs[i]);
+        if (stat.isSymlink()) {
+          throw new IOException("Cannot concat with a symlink src: "
+              + psrcs[i] + " -> " + stat.getPath());
+        }
+        srcs[i] = fixRelativePart(stat.getPath());
+      }
+      // Try concat again. Can still race with another symlink.
+      for (int i=0; i<psrcs.length; i++) {
+        srcsStr[i] = getPathName(srcs[i]);
+      }
+      dfs.concat(getPathName(absF), srcsStr);
+    }
-    return dfs.rename(getPathName(src), getPathName(dst));
+    // Both Paths have to belong to this DFS
+    final Path absSrc = fixRelativePart(src);
+    final Path absDst = fixRelativePart(dst);
+    FileSystem srcFS = getFSofPath(absSrc, getConf());
+    FileSystem dstFS = getFSofPath(absDst, getConf());
+    if (!srcFS.getUri().equals(getUri()) ||
+        !dstFS.getUri().equals(getUri())) {
+      throw new IOException("Renames across FileSystems not supported");
+    }
+    // Try the rename without resolving first
+    try {
+      return dfs.rename(getPathName(absSrc), getPathName(absDst));
+    } catch (UnresolvedLinkException e) {
+      // Fully resolve the source
+      final Path source = getFileLinkStatus(absSrc).getPath();
+      // Keep trying to resolve the destination
+      return new FileSystemLinkResolver<Boolean>() {
+        @Override
+        public Boolean doCall(final Path p)
+            throws IOException, UnresolvedLinkException {
+          return dfs.rename(getPathName(source), getPathName(p));
+        }
+        @Override
+        public Boolean next(final FileSystem fs, final Path p)
+            throws IOException {
+          return fs.rename(source, p);
+        }
+      }.resolve(this, absDst);
+    }
-  public void rename(Path src, Path dst, Options.Rename... options) throws IOException {
+  public void rename(Path src, Path dst, final Options.Rename... options)
+      throws IOException {
-    dfs.rename(getPathName(src), getPathName(dst), options);
+    // Both Paths have to belong to this DFS
+    final Path absSrc = fixRelativePart(src);
+    final Path absDst = fixRelativePart(dst);
+    FileSystem srcFS = getFSofPath(absSrc, getConf());
+    FileSystem dstFS = getFSofPath(absDst, getConf());
+    if (!srcFS.getUri().equals(getUri()) ||
+        !dstFS.getUri().equals(getUri())) {
+      throw new IOException("Renames across FileSystems not supported");
+    }
+    // Try the rename without resolving first
+    try {
+      dfs.rename(getPathName(absSrc), getPathName(absDst), options);
+    } catch (UnresolvedLinkException e) {
+      // Fully resolve the source
+      final Path source = getFileLinkStatus(absSrc).getPath();
+      // Keep trying to resolve the destination
+      new FileSystemLinkResolver<Void>() {
+        @Override
+        public Void doCall(final Path p)
+            throws IOException, UnresolvedLinkException {
+          dfs.rename(getPathName(source), getPathName(p), options);
+          return null;
+        }
+        @Override
+        public Void next(final FileSystem fs, final Path p)
+            throws IOException {
+          // Since we know it's this DFS for both, can just call doCall again
+          return doCall(p);
+        }
+      }.resolve(this, absDst);
+    }
-  public boolean delete(Path f, boolean recursive) throws IOException {
+  public boolean delete(Path f, final boolean recursive) throws IOException {
-    return dfs.delete(getPathName(f), recursive);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<Boolean>() {
+      @Override
+      public Boolean doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.delete(getPathName(p), recursive);
+      }
+      @Override
+      public Boolean next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.delete(p, recursive);
+      }
+    }.resolve(this, absF);
-    return dfs.getContentSummary(getPathName(f));
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<ContentSummary>() {
+      @Override
+      public ContentSummary doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.getContentSummary(getPathName(p));
+      }
+      @Override
+      public ContentSummary next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.getContentSummary(p);
+      }
+    }.resolve(this, absF);
-  public void setQuota(Path src, long namespaceQuota, long diskspaceQuota) 
-                       throws IOException {
-    dfs.setQuota(getPathName(src), namespaceQuota, diskspaceQuota);
-  }
-  
-  private FileStatus makeQualified(HdfsFileStatus f, Path parent) {
-    return new FileStatus(f.getLen(), f.isDir(), f.getReplication(),
-        f.getBlockSize(), f.getModificationTime(),
-        f.getAccessTime(),
-        f.getPermission(), f.getOwner(), f.getGroup(),
-        (f.getFullPath(parent)).makeQualified(
-            getUri(), getWorkingDirectory())); // fully-qualify path
+  public void setQuota(Path src, final long namespaceQuota,
+      final long diskspaceQuota) throws IOException {
+    Path absF = fixRelativePart(src);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.setQuota(getPathName(p), namespaceQuota, diskspaceQuota);
+        return null;
+      }
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        // setQuota is not defined in FileSystem, so we only can resolve
+        // within this DFS
+        return doCall(p);
+      }
+    }.resolve(this, absF);
-  private LocatedFileStatus makeQualifiedLocated(
-      HdfsLocatedFileStatus f, Path parent) {
-    return new LocatedFileStatus(f.getLen(), f.isDir(), f.getReplication(),
-        f.getBlockSize(), f.getModificationTime(),
-        f.getAccessTime(),
-        f.getPermission(), f.getOwner(), f.getGroup(),
-        null,
-        (f.getFullPath(parent)).makeQualified(
-            getUri(), getWorkingDirectory()), // fully-qualify path
-        DFSUtil.locatedBlocks2Locations(f.getBlockLocations()));
-  }
-
-  /**
-   * List all the entries of a directory
-   *
-   * Note that this operation is not atomic for a large directory.
-   * The entries of a directory may be fetched from NameNode multiple times.
-   * It only guarantees that  each name occurs once if a directory
-   * undergoes changes between the calls.
-   */
-  @Override
-  public FileStatus[] listStatus(Path p) throws IOException {
+  private FileStatus[] listStatusInternal(Path p) throws IOException {
-        stats[i] = makeQualified(partialListing[i], p);
+        stats[i] = partialListing[i].makeQualified(getUri(), p);
-      listing.add(makeQualified(fileStatus, p));
+      listing.add(fileStatus.makeQualified(getUri(), p));
-        listing.add(makeQualified(fileStatus, p));
+        listing.add(fileStatus.makeQualified(getUri(), p));
+  /**
+   * List all the entries of a directory
+   *
+   * Note that this operation is not atomic for a large directory.
+   * The entries of a directory may be fetched from NameNode multiple times.
+   * It only guarantees that  each name occurs once if a directory
+   * undergoes changes between the calls.
+   */
+  @Override
+  public FileStatus[] listStatus(Path p) throws IOException {
+    Path absF = fixRelativePart(p);
+    return new FileSystemLinkResolver<FileStatus[]>() {
+      @Override
+      public FileStatus[] doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return listStatusInternal(p);
+      }
+      @Override
+      public FileStatus[] next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.listStatus(p);
+      }
+    }.resolve(this, absF);
+  }
+
-        src = getPathName(p);
+        // Fully resolve symlinks in path first to avoid additional resolution
+        // round-trips as we fetch more batches of listings
+        src = getPathName(resolvePath(p));
-          LocatedFileStatus next = makeQualifiedLocated(
-              (HdfsLocatedFileStatus)thisListing.getPartialListing()[i++], p);
+          LocatedFileStatus next = 
+              ((HdfsLocatedFileStatus)thisListing.getPartialListing()[i++])
+              .makeQualifiedLocated(getUri(), p);
-    statistics.incrementWriteOps(1);
-    return dfs.mkdirs(getPathName(f), permission, false);
+    return mkdirsInternal(f, permission, false);
+    return mkdirsInternal(f, permission, true);
+  }
+
+  private boolean mkdirsInternal(Path f, final FsPermission permission,
+      final boolean createParent) throws IOException {
-    return dfs.mkdirs(getPathName(f), permission, true);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<Boolean>() {
+      @Override
+      public Boolean doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.mkdirs(getPathName(p), permission, createParent);
+      }
+
+      @Override
+      public Boolean next(final FileSystem fs, final Path p)
+          throws IOException {
+        // FileSystem doesn't have a non-recursive mkdir() method
+        // Best we can do is error out
+        if (!createParent) {
+          throw new IOException("FileSystem does not support non-recursive"
+              + "mkdir");
+        }
+        return fs.mkdirs(p, permission);
+      }
+    }.resolve(this, absF);
-    HdfsFileStatus fi = dfs.getFileInfo(getPathName(f));
-    if (fi != null) {
-      return makeQualified(fi, f);
-    } else {
-      throw new FileNotFoundException("File does not exist: " + f);
-    }
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<FileStatus>() {
+      @Override
+      public FileStatus doCall(final Path p) throws IOException,
+          UnresolvedLinkException {
+        HdfsFileStatus fi = dfs.getFileInfo(getPathName(p));
+        if (fi != null) {
+          return fi.makeQualified(getUri(), p);
+        } else {
+          throw new FileNotFoundException("File does not exist: " + p);
+        }
+      }
+      @Override
+      public FileStatus next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.getFileStatus(p);
+      }
+    }.resolve(this, absF);
-  public MD5MD5CRC32FileChecksum getFileChecksum(Path f) throws IOException {
+  public void createSymlink(final Path target, final Path link,
+      final boolean createParent) throws AccessControlException,
+      FileAlreadyExistsException, FileNotFoundException,
+      ParentNotDirectoryException, UnsupportedFileSystemException, 
+      IOException {
+    statistics.incrementWriteOps(1);
+    final Path absF = fixRelativePart(link);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p) throws IOException,
+          UnresolvedLinkException {
+        dfs.createSymlink(target.toString(), getPathName(p), createParent);
+        return null;
+      }
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException, UnresolvedLinkException {
+        fs.createSymlink(target, p, createParent);
+        return null;
+      }
+    }.resolve(this, absF);
+  }
+
+  @Override
+  public boolean supportsSymlinks() {
+    return true;
+  }
+
+  @Override
+  public FileStatus getFileLinkStatus(final Path f)
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, IOException {
-    return dfs.getFileChecksum(getPathName(f));
+    final Path absF = fixRelativePart(f);
+    FileStatus status = new FileSystemLinkResolver<FileStatus>() {
+      @Override
+      public FileStatus doCall(final Path p) throws IOException,
+          UnresolvedLinkException {
+        HdfsFileStatus fi = dfs.getFileLinkInfo(getPathName(p));
+        if (fi != null) {
+          return fi.makeQualified(getUri(), p);
+        } else {
+          throw new FileNotFoundException("File does not exist: " + p);
+        }
+      }
+      @Override
+      public FileStatus next(final FileSystem fs, final Path p)
+        throws IOException, UnresolvedLinkException {
+        return fs.getFileLinkStatus(p);
+      }
+    }.resolve(this, absF);
+    // Fully-qualify the symlink
+    if (status.isSymlink()) {
+      Path targetQual = FSLinkResolver.qualifySymlinkTarget(this.getUri(),
+          status.getPath(), status.getSymlink());
+      status.setSymlink(targetQual);
+    }
+    return status;
-  public void setPermission(Path p, FsPermission permission
+  public Path getLinkTarget(final Path f) throws AccessControlException,
+      FileNotFoundException, UnsupportedFileSystemException, IOException {
+    statistics.incrementReadOps(1);
+    final Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<Path>() {
+      @Override
+      public Path doCall(final Path p) throws IOException,
+          UnresolvedLinkException {
+        HdfsFileStatus fi = dfs.getFileLinkInfo(getPathName(p));
+        if (fi != null) {
+          return fi.makeQualified(getUri(), p).getSymlink();
+        } else {
+          throw new FileNotFoundException("File does not exist: " + p);
+        }
+      }
+      @Override
+      public Path next(final FileSystem fs, final Path p)
+        throws IOException, UnresolvedLinkException {
+        return fs.getLinkTarget(p);
+      }
+    }.resolve(this, absF);
+  }
+
+  @Override
+  protected Path resolveLink(Path f) throws IOException {
+    statistics.incrementReadOps(1);
+    String target = dfs.getLinkTarget(getPathName(fixRelativePart(f)));
+    if (target == null) {
+      throw new FileNotFoundException("File does not exist: " + f.toString());
+    }
+    return new Path(target);
+  }
+
+  @Override
+  public FileChecksum getFileChecksum(Path f) throws IOException {
+    statistics.incrementReadOps(1);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<FileChecksum>() {
+      @Override
+      public FileChecksum doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.getFileChecksum(getPathName(p));
+      }
+
+      @Override
+      public FileChecksum next(final FileSystem fs, final Path p)
+          throws IOException {
+        return fs.getFileChecksum(p);
+      }
+    }.resolve(this, absF);
+  }
+
+  @Override
+  public void setPermission(Path p, final FsPermission permission
-    dfs.setPermission(getPathName(p), permission);
+    Path absF = fixRelativePart(p);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.setPermission(getPathName(p), permission);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        fs.setPermission(p, permission);
+        return null;
+      }
+    }.resolve(this, absF);
-  public void setOwner(Path p, String username, String groupname
+  public void setOwner(Path p, final String username, final String groupname
-    dfs.setOwner(getPathName(p), username, groupname);
+    Path absF = fixRelativePart(p);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.setOwner(getPathName(p), username, groupname);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        fs.setOwner(p, username, groupname);
+        return null;
+      }
+    }.resolve(this, absF);
-  public void setTimes(Path p, long mtime, long atime
+  public void setTimes(Path p, final long mtime, final long atime
-    dfs.setTimes(getPathName(p), mtime, atime);
+    Path absF = fixRelativePart(p);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.setTimes(getPathName(p), mtime, atime);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        fs.setTimes(p, mtime, atime);
+        return null;
+      }
+    }.resolve(this, absF);
-   * @param bandwidth Blanacer bandwidth in bytes per second for all datanodes.
+   * @param bandwidth Balancer bandwidth in bytes per second for all datanodes.
-  public void allowSnapshot(Path path) throws IOException {
-    dfs.allowSnapshot(getPathName(path));
+  public void allowSnapshot(final Path path) throws IOException {
+    Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.allowSnapshot(getPathName(p));
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          myDfs.allowSnapshot(p);
+        } else {
+          throw new UnsupportedOperationException("Cannot perform snapshot"
+              + " operations on a symlink to a non-DistributedFileSystem: "
+              + path + " -> " + p);
+        }
+        return null;
+      }
+    }.resolve(this, absF);
-  public void disallowSnapshot(Path path) throws IOException {
-    dfs.disallowSnapshot(getPathName(path));
+  public void disallowSnapshot(final Path path) throws IOException {
+    Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.disallowSnapshot(getPathName(p));
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          myDfs.disallowSnapshot(p);
+        } else {
+          throw new UnsupportedOperationException("Cannot perform snapshot"
+              + " operations on a symlink to a non-DistributedFileSystem: "
+              + path + " -> " + p);
+        }
+        return null;
+      }
+    }.resolve(this, absF);
-  public Path createSnapshot(Path path, String snapshotName) 
+  public Path createSnapshot(final Path path, final String snapshotName) 
-    return new Path(dfs.createSnapshot(getPathName(path), snapshotName));
+    Path absF = fixRelativePart(path);
+    return new FileSystemLinkResolver<Path>() {
+      @Override
+      public Path doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return new Path(dfs.createSnapshot(getPathName(p), snapshotName));
+      }
+
+      @Override
+      public Path next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          return myDfs.createSnapshot(p);
+        } else {
+          throw new UnsupportedOperationException("Cannot perform snapshot"
+              + " operations on a symlink to a non-DistributedFileSystem: "
+              + path + " -> " + p);
+        }
+      }
+    }.resolve(this, absF);
-  public void renameSnapshot(Path path, String snapshotOldName,
-      String snapshotNewName) throws IOException {
-    dfs.renameSnapshot(getPathName(path), snapshotOldName, snapshotNewName);
+  public void renameSnapshot(final Path path, final String snapshotOldName,
+      final String snapshotNewName) throws IOException {
+    Path absF = fixRelativePart(path);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.renameSnapshot(getPathName(p), snapshotOldName, snapshotNewName);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          myDfs.renameSnapshot(p, snapshotOldName, snapshotNewName);
+        } else {
+          throw new UnsupportedOperationException("Cannot perform snapshot"
+              + " operations on a symlink to a non-DistributedFileSystem: "
+              + path + " -> " + p);
+        }
+        return null;
+      }
+    }.resolve(this, absF);
-  public void deleteSnapshot(Path snapshotDir, String snapshotName)
+  public void deleteSnapshot(final Path snapshotDir, final String snapshotName)
-    dfs.deleteSnapshot(getPathName(snapshotDir), snapshotName);
+    Path absF = fixRelativePart(snapshotDir);
+    new FileSystemLinkResolver<Void>() {
+      @Override
+      public Void doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        dfs.deleteSnapshot(getPathName(p), snapshotName);
+        return null;
+      }
+
+      @Override
+      public Void next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          myDfs.deleteSnapshot(p, snapshotName);
+        } else {
+          throw new UnsupportedOperationException("Cannot perform snapshot"
+              + " operations on a symlink to a non-DistributedFileSystem: "
+              + snapshotDir + " -> " + p);
+        }
+        return null;
+      }
+    }.resolve(this, absF);
-  public SnapshotDiffReport getSnapshotDiffReport(Path snapshotDir,
-      String fromSnapshot, String toSnapshot) throws IOException {
-    return dfs.getSnapshotDiffReport(getPathName(snapshotDir), fromSnapshot, toSnapshot);
+  public SnapshotDiffReport getSnapshotDiffReport(final Path snapshotDir,
+      final String fromSnapshot, final String toSnapshot) throws IOException {
+    Path absF = fixRelativePart(snapshotDir);
+    return new FileSystemLinkResolver<SnapshotDiffReport>() {
+      @Override
+      public SnapshotDiffReport doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.getSnapshotDiffReport(getPathName(p), fromSnapshot,
+            toSnapshot);
+      }
+
+      @Override
+      public SnapshotDiffReport next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          myDfs.getSnapshotDiffReport(p, fromSnapshot, toSnapshot);
+        } else {
+          throw new UnsupportedOperationException("Cannot perform snapshot"
+              + " operations on a symlink to a non-DistributedFileSystem: "
+              + snapshotDir + " -> " + p);
+        }
+        return null;
+      }
+    }.resolve(this, absF);
-  public boolean isFileClosed(Path src) throws IOException {
-    return dfs.isFileClosed(getPathName(src));
+  public boolean isFileClosed(final Path src) throws IOException {
+    Path absF = fixRelativePart(src);
+    return new FileSystemLinkResolver<Boolean>() {
+      @Override
+      public Boolean doCall(final Path p)
+          throws IOException, UnresolvedLinkException {
+        return dfs.isFileClosed(getPathName(p));
+      }
+
+      @Override
+      public Boolean next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          return myDfs.isFileClosed(p);
+        } else {
+          throw new UnsupportedOperationException("Cannot call isFileClosed"
+              + " on a symlink to a non-DistributedFileSystem: "
+              + src + " -> " + p);
+        }
+      }
+    }.resolve(this, absF);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS78 UPD83 INS5 INS42 MOV44 INS44 INS44 INS43 MOV29 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 INS78 MOV83 INS43 MOV42 MOV44 MOV44 INS43 INS8 INS78 INS83 INS43 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS43 INS44 INS8 MOV78 UPD43 INS44 MOV79 UPD43 INS8 INS43 INS8 INS8 MOV43 INS8 INS78 MOV44 INS8 INS78 MOV44 INS43 INS8 MOV29 MOV83 MOV39 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 UPD83 UPD42 MOV29 MOV78 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS39 INS42 MOV44 INS44 INS44 MOV43 INS8 MOV29 MOV78 INS83 MOV43 INS42 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS43 MOV43 INS8 INS78 MOV43 UPD42 INS44 INS43 INS43 INS43 INS43 INS8 INS78 INS83 INS43 INS42 MOV44 INS43 INS8 INS78 UPD43 MOV44 INS43 INS8 INS78 INS83 INS39 INS42 MOV44 INS44 INS43 INS8 MOV44 MOV44 INS8 INS78 INS83 INS39 INS42 MOV44 INS44 INS44 INS43 INS8 INS8 INS8 INS78 INS43 MOV44 INS43 INS8 INS78 MOV44 INS43 INS8 INS78 MOV44 INS43 INS8 MOV44 INS8 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS85 INS83 INS39 INS42 INS83 INS39 INS42 INS42 MOV21 INS60 INS41 INS83 INS60 INS41 INS42 INS42 INS83 INS42 MOV21 INS60 INS41 INS42 INS42 INS83 INS83 MOV21 INS60 INS41 INS42 INS83 INS43 INS42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 MOV21 INS60 INS41 UPD42 INS83 INS43 INS42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 MOV21 INS60 INS41 INS21 UPD42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 MOV21 MOV25 INS60 INS41 INS83 INS42 MOV21 INS60 INS41 MOV21 INS60 INS60 MOV24 MOV60 INS54 MOV21 INS60 INS60 INS60 INS60 INS25 INS54 INS83 MOV21 INS60 INS60 INS60 INS60 INS25 INS54 INS42 INS83 MOV21 INS60 INS41 INS42 INS42 MOV21 INS60 INS41 INS83 INS83 INS60 INS21 INS43 INS85 INS43 INS42 INS42 INS60 INS41 INS83 INS43 INS42 INS83 INS39 INS42 MOV21 INS60 INS41 MOV21 INS60 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS60 INS21 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 MOV21 INS60 INS60 INS25 INS41 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS60 INS41 INS42 INS42 INS42 INS21 INS60 INS25 INS41 INS42 UPD42 INS42 INS21 INS60 INS41 INS42 INS83 INS43 INS42 INS42 MOV21 INS60 INS21 INS83 UPD42 INS83 UPD42 MOV25 MOV21 INS60 INS21 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS42 MOV21 INS60 INS21 INS83 INS43 INS60 INS21 INS83 INS43 INS60 INS21 INS42 INS42 INS83 INS43 INS83 UPD42 INS42 INS60 INS41 INS42 INS83 INS43 INS83 INS83 UPD42 INS42 INS60 INS21 INS42 INS83 INS43 INS83 UPD42 INS42 INS60 INS21 INS83 INS43 INS83 UPD42 INS83 INS43 INS60 INS41 INS83 INS60 INS41 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS83 MOV43 INS59 INS32 MOV43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 MOV43 INS59 INS32 INS32 MOV43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS5 INS59 INS8 INS12 INS83 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS12 INS83 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS12 MOV43 INS59 INS32 MOV43 INS59 INS32 MOV43 INS59 INS32 MOV44 MOV42 INS42 MOV43 INS59 INS32 INS42 MOV43 INS59 INS32 MOV43 INS59 INS32 INS42 INS42 INS83 INS43 INS59 INS32 INS9 INS42 INS83 INS43 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS32 MOV43 INS59 INS27 INS8 INS14 INS32 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 UPD66 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 MOV34 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS3 UPD42 INS24 MOV21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS38 INS38 INS53 MOV41 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS38 INS38 INS53 MOV21 INS44 INS8 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS32 INS14 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS14 UPD42 MOV42 INS52 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS60 INS21 INS42 INS42 INS34 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS33 INS53 INS43 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS5 INS40 INS58 INS27 INS37 INS8 INS43 INS42 INS60 INS25 INS21 INS24 INS24 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS14 INS43 INS42 INS60 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS14 INS43 INS42 INS60 INS21 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 MOV44 UPD42 MOV42 UPD42 MOV42 INS74 INS1 INS42 MOV42 INS74 INS1 INS42 MOV42 INS74 INS1 UPD42 MOV42 UPD42 MOV42 INS74 INS1 INS42 MOV42 INS14 UPD42 MOV42 INS52 INS42 MOV43 INS59 INS32 INS42 INS42 INS74 INS1 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 INS42 INS42 INS74 INS1 MOV42 INS43 INS5 MOV31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS32 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS85 INS39 INS59 INS42 INS40 INS42 INS21 UPD42 INS42 MOV43 INS59 INS32 INS8 INS7 INS58 INS27 INS37 INS8 INS58 INS27 INS37 INS8 INS32 INS42 INS42 INS32 INS42 MOV32 INS32 INS42 MOV32 INS43 INS45 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS43 INS45 UPD42 INS42 INS32 INS32 UPD42 INS42 INS83 INS43 INS59 INS32 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS5 INS31 INS31 INS43 INS43 INS31 INS31 INS43 MOV43 INS31 INS31 INS43 INS43 INS31 INS31 INS74 INS1 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS31 INS31 INS42 INS32 INS43 INS27 INS43 INS43 INS31 INS31 INS43 INS43 MOV31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 MOV31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 INS43 INS43 INS31 INS31 UPD42 INS42 INS43 INS85 UPD42 INS43 INS78 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS42 INS42 MOV78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 MOV78 INS83 INS43 INS42 INS44 MOV43 INS43 MOV8 MOV78 MOV83 INS43 INS42 INS44 MOV44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 MOV43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 MOV78 INS83 INS43 INS42 INS44 MOV43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 MOV42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 UPD42 INS42 INS34 INS7 INS42 INS42 INS32 INS42 INS42 INS53 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS25 INS21 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 MOV78 UPD83 MOV83 INS43 INS42 MOV44 MOV44 INS43 INS8 INS42 INS32 INS42 INS43 INS85 INS78 INS83 INS5 INS42 INS44 MOV43 INS43 INS8 MOV78 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS42 INS42 MOV78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 MOV78 INS83 INS43 INS42 INS44 INS44 MOV43 INS8 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 MOV44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS43 INS43 INS31 INS31 UPD42 MOV42 INS42 INS32 INS32 MOV32 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS43 INS42 INS43 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS43 INS42 INS43 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 MOV8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS83 INS43 INS42 INS42 INS42 INS43 INS85 INS83 INS43 INS42 INS83 INS43 INS42 INS42 MOV41 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS53 INS42 INS83 INS43 INS42 INS42 INS42 INS83 INS43 INS42 INS83 UPD42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS53 UPD42 MOV42 INS83 INS43 INS42 INS42 INS41 INS42 UPD42 MOV42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS2 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS34 INS7 INS32 INS8 INS7 INS42 INS34 INS7 INS42 INS42 INS32 INS42 INS74 INS1 INS32 INS42 INS74 INS1 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS83 INS43 UPD42 INS83 INS43 UPD42 INS42 INS41 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS85 INS83 INS43 INS42 INS42 INS41 INS43 INS85 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS60 INS25 INS42 UPD42 INS83 UPD43 UPD42 INS83 INS43 UPD42 UPD42 MOV42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS52 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS83 UPD43 UPD42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS21 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS62 INS8 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS62 INS8 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS2 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS53 INS2 INS32 INS2 INS32 INS42 INS42 INS43 INS43 INS31 INS31 INS42 INS42 INS43 INS43 INS31 INS31 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS38 INS8 INS32 INS42 MOV43 INS59 MOV27 INS8 INS8 UPD42 INS42 INS32 INS42 INS32 INS33 INS42 INS42 INS32 INS33 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 INS33 INS42 INS42 INS32 INS33 INS42 INS33 INS42 INS42 INS32 INS33 INS42 INS33 INS42 INS42 INS32 INS33 INS42 INS33 INS42 INS42 INS62 INS8 INS8 INS33 INS42 INS33 INS42 INS42 INS62 INS8 INS8 INS33 INS42 INS42 INS42 INS62 INS8 INS8 INS42 INS33 INS42 INS42 INS62 INS8 INS8 INS33 INS42 INS33 INS42 INS42 INS62 INS8 INS8 INS33 INS42 INS42 INS42 INS62 INS8 INS8 INS33 INS42 INS42 INS42 INS62 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS41 INS43 INS27 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS41 INS43 INS27 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 INS2 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS53 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS32 INS41 INS53 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 MOV43 INS59 INS27 INS8 INS8 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS21 INS53 INS42 INS43 INS60 INS21 INS53 INS43 INS42 INS43 INS60 INS41 INS53 INS42 INS43 INS60 INS21 INS53 INS42 INS43 INS60 INS21 INS53 INS42 INS43 INS60 INS21 INS53 INS42 INS43 INS60 INS41 INS53 UPD42 INS42 INS43 INS59 INS32 INS42 INS27 INS42 INS45 INS42 UPD42 INS42 INS43 INS59 INS32 INS42 INS27 INS42 INS45 INS42 MOV42 MOV42 MOV32 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV32 UPD42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS42 INS83 INS43 INS42 INS42 INS42 MOV21 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 UPD42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS14 UPD42 MOV42 INS42 INS32 INS32 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS33 INS41 INS53 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 INS42 INS43 INS59 INS32 INS14 UPD42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS43 INS59 INS32 INS14 UPD42 INS42 INS43 INS59 INS32 INS14 UPD42 INS42 INS43 INS59 INS32 INS14 UPD42 INS42 INS43 INS59 INS32 INS14 UPD42 INS42 INS43 INS59 INS32 INS14 INS42 INS42 INS11 INS42 INS42 INS42 INS45 INS45 UPD42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 UPD42 INS42 INS45 INS2 INS45 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS36 INS32 INS43 INS27 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV32 INS42 MOV43 INS27 UPD42 MOV42 INS42 INS32 INS32 INS14 UPD42 INS32 INS42 INS43 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS27 UPD42 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS11 INS42 INS42 INS42 INS43 INS27 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 INS45 INS45 UPD42 INS45 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS43 INS27 INS42 MOV42 INS32 UPD42 MOV42 INS42 UPD42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS43 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 MOV42 INS42 INS45 INS42 UPD42 MOV42 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 DEL42 DEL32 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL32 DEL8 DEL42 DEL42 DEL14 DEL41 DEL8 DEL25 DEL40 DEL43 DEL31 DEL42 DEL45 DEL79 DEL31 DEL66 DEL65 DEL29 DEL42 DEL31 DEL83 DEL43 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL14 DEL41 DEL42 DEL42 DEL32 DEL8 DEL8 DEL31 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL36 DEL32 DEL14 DEL41 DEL8 DEL31 DEL43 DEL32 DEL32 DEL32 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL33 DEL32 DEL36 DEL32 DEL32 DEL32 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL39 DEL42 DEL39 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44