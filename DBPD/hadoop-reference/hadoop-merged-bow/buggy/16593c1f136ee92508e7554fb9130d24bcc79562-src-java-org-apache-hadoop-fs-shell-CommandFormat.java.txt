HADOOP-7180. Better support on CommandFormat on the API and exceptions.  Contributed by Daryn Sharp


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1082787 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+   * Consider using the variant that directly takes a List
-    List<String> parameters = new ArrayList<String>();
-    for(; pos < args.length; pos++) {
-      if (args[pos].charAt(0) == '-' && args[pos].length() > 1) {
-        String opt = args[pos].substring(1);
-        if (options.containsKey(opt))
-          options.put(opt, Boolean.TRUE);
-        else
-          throw new IllegalArgumentException("Illegal option " + args[pos]);
-      }
-      else
-        parameters.add(args[pos]);
-    }
-    int psize = parameters.size();
-    if (psize < minPar || psize > maxPar)
-      throw new IllegalArgumentException("Illegal number of arguments");
+    List<String> parameters = new ArrayList<String>(Arrays.asList(args));
+    parameters.subList(0, pos).clear();
+    parse(parameters);
+
+  /** Parse parameters from the given list of args.  The list is
+   *  destructively modified to remove the options.
+   * 
+   * @param args as a list of input arguments
+   */
+  public void parse(List<String> args) {
+    int pos = 0;
+    while (pos < args.size()) {
+      String arg = args.get(pos);
+      if (arg.startsWith("-") && arg.length() > 1) {
+        String opt = arg.substring(1);
+        if (!options.containsKey(opt)) {
+          throw new UnknownOptionException(arg);
+        }
+        args.remove(pos);
+        options.put(opt, Boolean.TRUE);
+      } else {
+        pos++;
+      }
+    }
+    int psize = args.size();
+    if (psize < minPar) {
+      throw new NotEnoughArgumentsException(minPar, psize);
+    }
+    if (psize > maxPar) {
+      throw new TooManyArgumentsException(maxPar, psize);
+    }
+  }
-    return options.get(option);
+    return options.containsKey(option) ? options.get(option) : false;
+  }
+  
+  /** Returns all the options that are set
+   * 
+   * @return Set<String> of the enabled options
+   */
+  public Set<String> getOpts() {
+    Set<String> optSet = new HashSet<String>();
+    for (Map.Entry<String, Boolean> entry : options.entrySet()) {
+      if (entry.getValue()) {
+        optSet.add(entry.getKey());
+      }
+    }
+    return optSet;
+  }
+  
+  /** Used when the arguments exceed their bounds 
+   */
+  public static abstract class IllegalNumberOfArgumentsException
+  extends IllegalArgumentException {
+    private static final long serialVersionUID = 0L;
+    protected int expected;
+    protected int actual;
+
+    protected IllegalNumberOfArgumentsException(int want, int got) {
+      expected = want;
+      actual = got;
+    }
+
+    public String getMessage() {
+      return "expected " + expected + " but got " + actual;
+    }
+  }
+
+  /** Used when too many arguments are supplied to a command
+   */
+  public static class TooManyArgumentsException
+  extends IllegalNumberOfArgumentsException {
+    private static final long serialVersionUID = 0L;
+
+    public TooManyArgumentsException(int expected, int actual) {
+      super(expected, actual);
+    }
+
+    public String getMessage() {
+      return "Too many arguments: " + super.getMessage();
+    }
+  }
+  
+  /** Used when too few arguments are supplied to a command
+   */
+  public static class NotEnoughArgumentsException
+  extends IllegalNumberOfArgumentsException {
+    private static final long serialVersionUID = 0L;
+
+    public NotEnoughArgumentsException(int expected, int actual) {
+      super(expected, actual);
+    }
+
+    public String getMessage() {
+      return "Not enough arguments: " + super.getMessage();
+    }
+  }
+  
+  /** Used when an unsupported option is supplied to a command
+   */
+  public static class UnknownOptionException extends IllegalArgumentException {
+    private static final long serialVersionUID = 0L;
+    protected String option = null;
+    
+    public UnknownOptionException(String unknownOption) {
+      super("Illegal option " + unknownOption);
+      option = unknownOption;
+    }
+    
+    public String getOption() {
+      return option;
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS55 INS55 INS55 INS55 MOV29 INS83 MOV74 INS42 MOV44 MOV44 INS8 INS29 INS39 INS44 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS83 INS83 INS42 MOV43 INS23 INS23 INS23 INS31 INS31 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS29 INS83 INS83 INS42 MOV43 INS23 INS23 INS31 INS31 MOV60 INS21 INS21 MOV41 INS65 INS65 INS74 INS42 INS60 INS61 INS25 INS65 INS65 INS43 INS43 INS60 INS70 INS41 INS65 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS65 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS65 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS65 INS83 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS66 INS32 INS32 INS66 INS66 INS42 INS66 INS43 INS43 INS39 INS59 INS27 INS8 MOV27 INS8 MOV27 INS8 INS16 INS66 INS66 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS66 INS42 INS34 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS42 INS41 INS66 INS42 INS34 INS39 INS42 INS39 INS42 INS46 INS42 INS41 INS66 INS42 INS34 INS39 INS42 INS39 INS42 INS46 INS42 INS41 INS66 INS42 INS34 INS42 INS42 INS33 INS43 INS42 INS46 INS21 INS42 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 MOV42 INS32 INS60 MOV25 INS53 INS53 INS32 MOV32 INS9 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS25 INS7 INS7 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS27 INS7 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 MOV43 INS59 INS8 INS8 UPD42 MOV14 INS14 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS43 INS32 INS8 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS48 INS45 INS48 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV32 MOV60 MOV25 INS21 MOV21 INS21 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS38 INS8 MOV32 MOV37 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS53 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 MOV14 INS42 INS42 INS43 INS42 INS42 DEL42 DEL42 DEL2 DEL42 DEL34 DEL13 DEL27 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL45 DEL42 DEL42 DEL2 DEL27 DEL53 DEL42 DEL42 DEL42 DEL2 DEL8 DEL21 DEL40 DEL27 DEL8 DEL24 DEL45 DEL27 DEL53