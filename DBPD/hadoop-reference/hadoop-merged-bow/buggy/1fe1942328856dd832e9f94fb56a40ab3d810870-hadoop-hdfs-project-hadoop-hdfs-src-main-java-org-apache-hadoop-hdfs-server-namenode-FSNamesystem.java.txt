HDFS-5291. Standby namenode after transition to active goes into safemode. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530112 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ipc.RetriableException;
+  /**
+   * @throws RetriableException
+   *           If 1) The NameNode is in SafeMode, 2) HA is enabled, and 3)
+   *           NameNode is in active state
+   * @throws SafeModeException
+   *           Otherwise if NameNode is in SafeMode.
+   */
+  private void checkNameNodeSafeMode(String errorMsg)
+      throws RetriableException, SafeModeException {
+    if (isInSafeMode()) {
+      SafeModeException se = new SafeModeException(errorMsg, safeMode);
+      if (haEnabled && haContext != null
+          && haContext.getState().getServiceState() == HAServiceState.ACTIVE) {
+        throw new RetriableException(se);
+      } else {
+        throw se;
+      }
+    }
+  }
+  
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set permission for " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set permission for " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set owner for " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set owner for " + src);
-          throw new SafeModeException("Zero blocklocations for " + src,
-              safeMode);
+          SafeModeException se = new SafeModeException(
+              "Zero blocklocations for " + src, safeMode);
+          if (haEnabled && haContext != null && 
+              haContext.getState().getServiceState() == HAServiceState.ACTIVE) {
+            throw new RetriableException(se);
+          } else {
+            throw se;
+          }
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot concat " + target, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot concat " + target);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set times " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set times " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create symlink " + link, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create symlink " + link);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set replication for " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set replication for " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create file" + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create file" + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-            "Cannot recover the lease of " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot recover the lease of " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot append to file" + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot append to file" + src);
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot add block to " + src, safeMode);
-    }
+    checkNameNodeSafeMode("Cannot add block to " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot add datanode; src=" + src
-            + ", blk=" + blk, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot add datanode; src=" + src + ", blk=" + blk);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot abandon block " + b +
-                                    " for fle" + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot abandon block " + b + " for fle" + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot complete file " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot complete file " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot rename " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot rename " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot rename " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot rename " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot delete " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot delete " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create directory " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create directory " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot set quota on " + path, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot set quota on " + path);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot fsync file " + src, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot fsync file " + src);
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-          "Cannot commitBlockSynchronization while in safe mode",
-          safeMode);
-      }
+      checkNameNodeSafeMode(
+          "Cannot commitBlockSynchronization while in safe mode");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot renew lease for " + holder, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot renew lease for " + holder);
-        throw new IOException("Safe mode should be turned ON " +
-                              "in order to create namespace image.");
+        throw new IOException("Safe mode should be turned ON "
+            + "in order to create namespace image.");
-   * {@link #threshold} it starts the {@link SafeModeMonitor} daemon in order
+   * {@link #threshold} it starts the SafeModeMonitor daemon in order
-   * @see ClientProtocol#setSafeMode(HdfsConstants.SafeModeAction)
-   * @see SafeModeMonitor
+   * @see ClientProtocol#setSafeMode(HdfsConstants.SafeModeAction, boolean)
-  class SafeModeInfo {
+  public class SafeModeInfo {
-      if (isInSafeMode()) {
-        throw new SafeModeException("Log not rolled", safeMode);
-      }
+      checkNameNodeSafeMode("Log not rolled");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Checkpoint not started", safeMode);
-      }
+      checkNameNodeSafeMode("Checkpoint not started");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Checkpoint not ended", safeMode);
-      }
+      checkNameNodeSafeMode("Checkpoint not ended");
-    if (isInSafeMode()) {
-      throw new SafeModeException(
-          "Cannot get next generation stamp", safeMode);
-    }
+    checkNameNodeSafeMode("Cannot get next generation stamp");
-  private long nextBlockId() throws SafeModeException {
+  private long nextBlockId() throws IOException {
-    if (isInSafeMode()) {
-      throw new SafeModeException(
-          "Cannot get next block ID", safeMode);
-    }
+    checkNameNodeSafeMode("Cannot get next block ID");
-    if (isInSafeMode()) {
-      throw new SafeModeException("Cannot get a new generation stamp and an " +
-                                "access token for block " + block, safeMode);
-    }
+    checkNameNodeSafeMode("Cannot get a new generation stamp and an "
+        + "access token for block " + block);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Pipeline not updated", safeMode);
-      }
+      checkNameNodeSafeMode("Pipeline not updated");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot issue delegation token", safeMode);
-      }
+      checkNameNodeSafeMode("Cannot issue delegation token");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot renew delegation token", safeMode);
-      }
+      checkNameNodeSafeMode("Cannot renew delegation token");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot cancel delegation token", safeMode);
-      }
+      checkNameNodeSafeMode("Cannot cancel delegation token");
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot allow snapshot for " + path,
-            safeMode);
-      }
+      checkNameNodeSafeMode("Cannot allow snapshot for " + path);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot disallow snapshot for " + path,
-            safeMode);
-      }
+      checkNameNodeSafeMode("Cannot disallow snapshot for " + path);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot create snapshot for "
-            + snapshotRoot, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot create snapshot for " + snapshotRoot);
-      if (isInSafeMode()) {
-        throw new SafeModeException("Cannot rename snapshot for " + path,
-            safeMode);
-      }
+      checkNameNodeSafeMode("Cannot rename snapshot for " + path);
-      if (isInSafeMode()) {
-        throw new SafeModeException(
-            "Cannot delete snapshot for " + snapshotRoot, safeMode);
-      }
+      checkNameNodeSafeMode("Cannot delete snapshot for " + snapshotRoot);

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS43 MOV43 INS8 INS83 INS43 INS65 INS65 INS43 INS42 INS42 INS25 INS21 INS21 INS42 INS21 INS21 INS42 INS66 INS66 INS42 INS66 INS42 MOV32 INS8 INS32 UPD66 INS32 INS32 INS32 INS60 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 UPD42 MOV42 MOV27 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS69 INS21 INS21 INS21 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 MOV27 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 MOV43 INS59 INS27 INS8 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS39 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS14 INS27 INS27 INS53 INS53 INS42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 INS45 UPD42 MOV42 MOV27 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 INS45 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 UPD42 MOV42 MOV27 MOV43 INS42 INS42 INS42 INS27 INS32 INS40 INS14 INS42 INS8 INS42 INS33 INS32 INS42 INS43 INS42 INS60 INS25 INS42 INS42 INS42 MOV43 INS59 INS27 MOV8 INS8 INS42 MOV14 INS27 INS27 INS53 INS42 INS27 INS32 INS40 INS14 INS42 INS42 INS33 INS32 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL66 DEL42 DEL65 DEL42 DEL65 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL32 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25