MAPREDUCE-2756. Better error handling in JobControl for failed jobs. Contributed by Robert Evans. 


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1164255 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Hashtable;
+import java.util.Iterator;
+import java.util.LinkedList;
-import java.util.Map;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.util.StringUtils;
+  private static final Log LOG = LogFactory.getLog(JobControl.class);
-  private Map<String, ControlledJob> waitingJobs;
-  private Map<String, ControlledJob> readyJobs;
-  private Map<String, ControlledJob> runningJobs;
-  private Map<String, ControlledJob> successfulJobs;
-  private Map<String, ControlledJob> failedJobs;
+  private LinkedList<ControlledJob> jobsInProgress = new LinkedList<ControlledJob>();
+  private LinkedList<ControlledJob> successfulJobs = new LinkedList<ControlledJob>();
+  private LinkedList<ControlledJob> failedJobs = new LinkedList<ControlledJob>();
-    this.waitingJobs = new Hashtable<String, ControlledJob>();
-    this.readyJobs = new Hashtable<String, ControlledJob>();
-    this.runningJobs = new Hashtable<String, ControlledJob>();
-    this.successfulJobs = new Hashtable<String, ControlledJob>();
-    this.failedJobs = new Hashtable<String, ControlledJob>();
-                   Map<String, ControlledJob> jobs) {
+                   LinkedList<ControlledJob> jobs) {
-      for (ControlledJob job : jobs.values()) {
+      for (ControlledJob job : jobs) {
+  synchronized private List<ControlledJob> getJobsIn(State state) {
+    LinkedList<ControlledJob> l = new LinkedList<ControlledJob>();
+    for(ControlledJob j: jobsInProgress) {
+      if(j.getJobState() == state) {
+        l.add(j);
+      }
+    }
+    return l;
+  }
+  
-    return toList(this.waitingJobs);
+    return getJobsIn(State.WAITING);
-    return toList(this.runningJobs);
+    return getJobsIn(State.RUNNING);
-    return toList(this.readyJobs);
+    return getJobsIn(State.READY);
-	
-  private static void addToQueue(ControlledJob aJob, 
-                                 Map<String, ControlledJob> queue) {
-    synchronized(queue) {
-      queue.put(aJob.getJobID(), aJob);
-    }		
-  }
-	
-  private void addToQueue(ControlledJob aJob) {
-    Map<String, ControlledJob> queue = getQueue(aJob.getJobState());
-    addToQueue(aJob, queue);	
-  }
-	
-  private Map<String, ControlledJob> getQueue(State state) {
-    Map<String, ControlledJob> retv = null;
-    if (state == State.WAITING) {
-      retv = this.waitingJobs;
-    } else if (state == State.READY) {
-      retv = this.readyJobs;
-    } else if (state == State.RUNNING) {
-      retv = this.runningJobs;
-    } else if (state == State.SUCCESS) {
-      retv = this.successfulJobs;
-    } else if (state == State.FAILED || state == State.DEPENDENT_FAILED) {
-      retv = this.failedJobs;
-    } 
-    return retv;
-  }
-    this.addToQueue(aJob);
+    jobsInProgress.add(aJob);
-  synchronized private void checkRunningJobs() 
-      throws IOException, InterruptedException {
-		
-    Map<String, ControlledJob> oldJobs = null;
-    oldJobs = this.runningJobs;
-    this.runningJobs = new Hashtable<String, ControlledJob>();
-		
-    for (ControlledJob nextJob : oldJobs.values()) {
-      nextJob.checkState();
-      this.addToQueue(nextJob);
-    }
-  }
-	
-  synchronized private void checkWaitingJobs() 
-      throws IOException, InterruptedException {
-    Map<String, ControlledJob> oldJobs = null;
-    oldJobs = this.waitingJobs;
-    this.waitingJobs = new Hashtable<String, ControlledJob>();
-		
-    for (ControlledJob nextJob : oldJobs.values()) {
-      nextJob.checkState();
-      this.addToQueue(nextJob);
-    }
-  }
-	
-  synchronized private void startReadyJobs() {
-    Map<String, ControlledJob> oldJobs = null;
-    oldJobs = this.readyJobs;
-    this.readyJobs = new Hashtable<String, ControlledJob>();
-		
-    for (ControlledJob nextJob : oldJobs.values()) {
-      //Submitting Job to Hadoop
-      nextJob.submit();
-      this.addToQueue(nextJob);
-    }	
-  }
-	
-    return this.waitingJobs.size() == 0 &&
-      this.readyJobs.size() == 0 &&
-      this.runningJobs.size() == 0;
+    return jobsInProgress.isEmpty();
-    this.runnerState = ThreadState.RUNNING;
-    while (true) {
-      while (this.runnerState == ThreadState.SUSPENDED) {
+    try {
+      this.runnerState = ThreadState.RUNNING;
+      while (true) {
+        while (this.runnerState == ThreadState.SUSPENDED) {
+          try {
+            Thread.sleep(5000);
+          }
+          catch (Exception e) {
+            //TODO the thread was interrupted, do something!!!
+          }
+        }
+        
+        synchronized(this) {
+          Iterator<ControlledJob> it = jobsInProgress.iterator();
+          while(it.hasNext()) {
+            ControlledJob j = it.next();
+            LOG.debug("Checking state of job "+j);
+            switch(j.checkState()) {
+            case SUCCESS:
+              successfulJobs.add(j);
+              it.remove();
+              break;
+            case FAILED:
+            case DEPENDENT_FAILED:
+              failedJobs.add(j);
+              it.remove();
+              break;
+            case READY:
+              j.submit();
+              break;
+            case RUNNING:
+            case WAITING:
+              //Do Nothing
+              break;
+            }
+          }
+        }
+        
+        if (this.runnerState != ThreadState.RUNNING && 
+            this.runnerState != ThreadState.SUSPENDED) {
+          break;
+        }
-					
+          //TODO the thread was interrupted, do something!!!
+        }
+        if (this.runnerState != ThreadState.RUNNING && 
+            this.runnerState != ThreadState.SUSPENDED) {
+          break;
-      try {
-        checkRunningJobs();	
-        checkWaitingJobs();
-        startReadyJobs();
-      } catch (Exception e) {
-  	    this.runnerState = ThreadState.STOPPED;
-      }
-      if (this.runnerState != ThreadState.RUNNING && 
-          this.runnerState != ThreadState.SUSPENDED) {
-        break;
-      }
-      try {
-        Thread.sleep(5000);
-      }
-      catch (Exception e) {
-				
-      }
-      if (this.runnerState != ThreadState.RUNNING && 
-          this.runnerState != ThreadState.SUSPENDED) {
-        break;
-      }
+    }catch(Throwable t) {
+      LOG.error("Error while trying to run jobs.",t);
+      //Mark all jobs as failed because we got something bad.
+      failAllJobs(t);
+  synchronized private void failAllJobs(Throwable t) {
+    String message = "Unexpected System Error Occured: "+
+    StringUtils.stringifyException(t);
+    Iterator<ControlledJob> it = jobsInProgress.iterator();
+    while(it.hasNext()) {
+      ControlledJob j = it.next();
+      try {
+        j.failJob(message);
+      } catch (IOException e) {
+        LOG.error("Error while tyring to clean up "+j.getJobName(), e);
+      } catch (InterruptedException e) {
+        LOG.error("Error while tyring to clean up "+j.getJobName(), e);
+      } finally {
+        failedJobs.add(j);
+        it.remove();
+      }
+    }
+  }

MOV26 INS26 INS26 INS26 MOV31 UPD40 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 MOV83 UPD83 MOV83 UPD83 MOV83 INS43 INS59 MOV83 UPD74 MOV74 INS59 INS83 INS74 INS59 INS83 INS74 INS59 MOV29 UPD83 INS42 MOV44 INS8 UPD83 MOV83 MOV83 UPD74 MOV74 UPD42 MOV42 MOV44 MOV8 UPD83 UPD39 UPD42 INS8 MOV83 MOV83 MOV39 UPD42 MOV42 INS44 INS8 UPD42 MOV42 INS42 INS32 UPD43 MOV43 UPD42 MOV42 INS14 UPD43 MOV43 MOV43 INS42 INS14 UPD43 MOV43 MOV43 INS42 INS14 MOV21 MOV21 MOV21 UPD74 UPD43 INS70 INS41 INS54 MOV21 INS43 INS42 INS60 INS60 INS61 INS42 INS42 INS57 UPD42 UPD74 MOV74 UPD42 UPD74 MOV74 UPD42 UPD74 MOV74 UPD43 MOV43 UPD42 UPD74 MOV44 INS42 INS8 UPD42 INS32 MOV8 INS12 UPD42 MOV42 MOV43 INS59 INS74 INS59 INS32 INS8 INS43 UPD43 MOV43 UPD43 MOV43 UPD43 MOV43 UPD42 UPD43 MOV43 UPD42 INS14 UPD42 INS25 INS42 INS40 INS42 INS40 INS42 INS40 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS44 INS8 INS42 INS27 UPD43 MOV43 MOV43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV60 INS54 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 UPD42 INS74 UPD27 MOV27 MOV8 INS43 INS42 INS21 INS21 INS45 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV43 INS59 INS8 INS12 INS12 INS8 INS43 MOV43 INS32 MOV42 INS51 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 MOV21 INS44 INS8 INS44 INS8 INS21 INS21 INS42 INS42 INS42 INS32 INS52 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 MOV43 INS42 INS21 MOV43 INS42 INS21 INS32 INS32 INS42 INS42 INS42 INS60 INS61 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS74 INS59 INS32 INS8 INS42 INS42 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS42 INS43 MOV43 INS42 INS32 INS42 INS42 INS60 MOV21 INS50 INS45 INS32 INS45 MOV32 INS42 INS42 INS42 MOV43 INS59 INS32 INS49 INS21 INS21 INS10 INS49 INS49 INS21 INS21 INS10 INS49 INS21 INS10 INS49 INS49 INS10 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 INS32 UPD42 INS42 INS27 INS42 INS42 INS42 MOV32 INS32 INS42 INS42 MOV32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL43 DEL74 DEL42 DEL59 DEL23 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL83 DEL42 DEL52 DEL42 DEL22 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL33 DEL42 DEL40 DEL27 DEL40 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL42 DEL40 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL42 DEL40 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL42 DEL40 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL42 DEL40 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL25 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL31 DEL52 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL44 DEL32 DEL42 DEL42 DEL32 DEL21 DEL52 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL32 DEL42 DEL32 DEL21 DEL52 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL34 DEL27 DEL52 DEL42 DEL22 DEL32 DEL34 DEL27 DEL27 DEL52 DEL42 DEL22 DEL32 DEL34 DEL27 DEL27 DEL41 DEL8 DEL31 DEL21 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL42 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22