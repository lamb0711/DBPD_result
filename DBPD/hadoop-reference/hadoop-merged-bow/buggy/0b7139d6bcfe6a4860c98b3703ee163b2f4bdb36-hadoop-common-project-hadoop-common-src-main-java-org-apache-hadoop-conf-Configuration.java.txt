HADOOP-8525. Provide Improved Traceability for Configuration (bobby)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359775 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
-import org.w3c.dom.Comment;
+  private static class Resource {
+    private final Object resource;
+    private final String name;
+    
+    public Resource(Object resource) {
+      this(resource, resource.toString());
+    }
+    
+    public Resource(Object resource, String name) {
+      this.resource = resource;
+      this.name = name;
+    }
+    
+    public String getName(){
+      return name;
+    }
+    
+    public Object getResource() {
+      return resource;
+    }
+    
+    @Override
+    public String toString() {
+      return name;
+    }
+  }
+  
-  private ArrayList<Object> resources = new ArrayList<Object>();
-
+  private ArrayList<Resource> resources = new ArrayList<Resource>();
+  
-   * by code rather than a file resource.
+   * by code rather than a file resource by dumpConfiguration.
+
-  private HashMap<String, String> updatingResource;
+  private HashMap<String, String[]> updatingResource;
-    String oldName, altNames[] = null;
+    String altNames[] = null;
-    updatingResource = new HashMap<String, String>();
+    updatingResource = new HashMap<String, String[]>();
-   this.resources = (ArrayList)other.resources.clone();
+   this.resources = (ArrayList<Resource>) other.resources.clone();
-     this.updatingResource = new HashMap<String, String>(other.updatingResource);
+     this.updatingResource = new HashMap<String, String[]>(other.updatingResource);
-    addResourceObject(name);
+    addResourceObject(new Resource(name));
-    addResourceObject(url);
+    addResourceObject(new Resource(url));
-    addResourceObject(file);
+    addResourceObject(new Resource(file));
-    addResourceObject(in);
+    addResourceObject(new Resource(in));
+  }
+
+  /**
+   * Add a configuration resource. 
+   * 
+   * The properties of this resource will override properties of previously 
+   * added resources, unless they were marked <a href="#Final">final</a>. 
+   * 
+   * @param in InputStream to deserialize the object from.
+   * @param name the name of the resource because InputStream.toString is not
+   * very descriptive some times.  
+   */
+  public void addResource(InputStream in, String name) {
+    addResourceObject(new Resource(in, name));
-  private synchronized void addResourceObject(Object resource) {
+  private synchronized void addResourceObject(Resource resource) {
+    set(name, value, null);
+  }
+  
+  /** 
+   * Set the <code>value</code> of the <code>name</code> property. If 
+   * <code>name</code> is deprecated or there is a deprecated name associated to it,
+   * it sets the value to both names.
+   * 
+   * @param name property name.
+   * @param value property value.
+   * @param source the place that this configuration value came from 
+   * (For debugging).
+   */
+  public void set(String name, String value, String source) {
-    updatingResource.put(name, UNKNOWN_RESOURCE);
+    if(source == null) {
+      updatingResource.put(name, new String[] {"programatically"});
+    } else {
+      updatingResource.put(name, new String[] {source});
+    }
+      String altSource = "because " + name + " is deprecated";
-    	getOverlay().setProperty(altName, value);
-        getProps().setProperty(altName, value);
+        if(!altName.equals(name)) {
+          getOverlay().setProperty(altName, value);
+          getProps().setProperty(altName, value);
+          updatingResource.put(altName, new String[] {altSource});
+        }
-   * Gets the absolute path to the resource object (file, URL, etc.), for a given
-   * property name.
+   * Gets information about why a property was set.  Typically this is the 
+   * path to the resource objects (file, URL, etc.) the property came from, but
+   * it can also indicate that it was set programatically, or because of the
+   * command line.
-   * @return null - If the property or its source wasn't found or if the property
-   * was defined in code (i.e. in a Configuration instance, not from a physical
-   * resource). Otherwise, returns the absolute path of the resource that loaded
-   * the property name, as a String.
+   * @return null - If the property or its source wasn't found. Otherwise, 
+   * returns a list of the sources of the resource.  The older sources are
+   * the first ones in the list.  So for example if a configuration is set from
+   * the command line, and then written out to a file that is read back in the
+   * first entry would indicate that it was set from the command line, while
+   * the second one would indicate the file that the new configuration was read
+   * in from.
-  public synchronized String getPropertySource(String name) {
+  public synchronized String[] getPropertySources(String name) {
-      String source = updatingResource.get(name);
-      if (source == null || source.equals(UNKNOWN_RESOURCE)) {
+      String[] source = updatingResource.get(name);
+      if(source == null) {
-        return source;
+        return Arrays.copyOf(source, source.length);
+      HashMap<String, String[]> backup = 
+        new HashMap<String, String[]>(updatingResource);
-          updatingResource.put((String) item.getKey(), UNKNOWN_RESOURCE);
+          String key = (String)item.getKey();
+          updatingResource.put(key, backup.get(key));
-                             ArrayList resources,
+                             ArrayList<Resource> resources,
-        loadResource(properties, resource, quiet);
+        loadResource(properties, new Resource(resource), quiet);
-        loadResource(properties, "hadoop-site.xml", quiet);
+        loadResource(properties, new Resource("hadoop-site.xml"), quiet);
-    for (Object resource : resources) {
+    for (Resource resource : resources) {
-  private void loadResource(Properties properties, Object name, boolean quiet) {
+  private void loadResource(Properties properties, Resource wrapper, boolean quiet) {
-      if (name instanceof URL) {                  // an URL resource
-        URL url = (URL)name;
+      Object resource = wrapper.getResource();
+      String name = wrapper.getName();
+      
+      if (resource instanceof URL) {                  // an URL resource
+        URL url = (URL)resource;
-      } else if (name instanceof String) {        // a CLASSPATH resource
-        URL url = getResource((String)name);
+      } else if (resource instanceof String) {        // a CLASSPATH resource
+        URL url = getResource((String)resource);
-      } else if (name instanceof Path) {          // a file resource
+      } else if (resource instanceof Path) {          // a file resource
-        File file = new File(((Path)name).toUri().getPath())
+        File file = new File(((Path)resource).toUri().getPath())
-      } else if (name instanceof InputStream) {
+      } else if (resource instanceof InputStream) {
-          doc = builder.parse((InputStream)name);
+          doc = builder.parse((InputStream)resource);
-          ((InputStream)name).close();
+          ((InputStream)resource).close();
-      } else if (name instanceof Element) {
-        root = (Element)name;
+      } else if (resource instanceof Element) {
+        root = (Element)resource;
-        throw new RuntimeException(name + " not found");
+        throw new RuntimeException(resource + " not found");
-          loadResource(properties, prop, quiet);
+          loadResource(properties, new Resource(prop, name), quiet);
+        LinkedList<String> source = new LinkedList<String>();
+          if ("source".equals(field.getTagName()) && field.hasChildNodes())
+            source.add(((Text)field.getFirstChild()).getData());
+        source.add(name);
-              loadProperty(properties, name, key, value, finalParameter);
+              loadProperty(properties, name, key, value, finalParameter, 
+                  source.toArray(new String[source.size()]));
-            loadProperty(properties, name, attr, value, finalParameter);
+            loadProperty(properties, name, attr, value, finalParameter, 
+                source.toArray(new String[source.size()]));
-  private void loadProperty(Properties properties, Object name, String attr,
-      String value, boolean finalParameter) {
+  private void loadProperty(Properties properties, String name, String attr,
+      String value, boolean finalParameter, String[] source) {
-        updatingResource.put(attr, name.toString());
+        updatingResource.put(attr, source);
-      if (updatingResource != null) {
-        Comment commentNode = doc.createComment(
-          "Loaded from " + updatingResource.get(name));
-        propNode.appendChild(commentNode);
-      }
+      if (updatingResource != null) {
+        String[] sources = updatingResource.get(name);
+        if(sources != null) {
+          for(String s : sources) {
+            Element sourceNode = doc.createElement("source");
+            sourceNode.appendChild(doc.createTextNode(s));
+            propNode.appendChild(sourceNode);
+          }
+        }
+      }
+      
-        dumpGenerator.writeStringField("resource",
-                                       config.updatingResource.get(item.getKey()));
+        String[] resources = config.updatingResource.get(item.getKey());
+        String resource = UNKNOWN_RESOURCE;
+        if(resources != null && resources.length > 0) {
+          resource = resources[0];
+        }
+        dumpGenerator.writeStringField("resource", resource);
-
+  
-      set(org.apache.hadoop.io.Text.readString(in), 
-          org.apache.hadoop.io.Text.readString(in));
+      String key = org.apache.hadoop.io.Text.readString(in);
+      String value = org.apache.hadoop.io.Text.readString(in);
+      set(key, value); 
+      String sources[] = WritableUtils.readCompressedStringArray(in);
+      updatingResource.put(key, sources);
+      WritableUtils.writeCompressedStringArray(out, 
+          updatingResource.get(item.getKey()));

MOV26 UPD40 INS55 INS31 INS31 INS83 INS83 INS42 INS23 INS23 INS31 INS31 INS31 INS31 INS31 UPD74 MOV74 UPD74 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS44 MOV29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS44 INS5 UPD42 INS44 INS83 INS83 MOV43 INS59 INS83 INS83 MOV43 INS59 INS83 INS42 MOV44 INS8 INS83 INS42 MOV44 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 INS43 INS5 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS43 INS42 INS25 INS43 INS85 INS74 UPD43 UPD42 UPD43 INS5 INS42 INS42 INS42 INS17 INS43 INS42 INS21 INS21 INS41 INS41 INS42 INS41 INS42 UPD74 MOV74 UPD66 INS43 INS85 INS7 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS27 INS8 INS8 INS66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 INS66 INS42 MOV43 INS43 INS44 UPD42 UPD42 INS43 INS85 INS42 INS32 INS42 INS7 INS7 INS42 INS42 INS42 INS43 INS42 INS42 INS14 MOV21 INS14 INS14 INS14 INS14 INS42 INS14 INS42 INS42 INS42 INS33 INS42 INS33 MOV21 INS21 INS60 INS60 INS42 INS43 INS42 INS60 INS60 MOV25 INS42 INS25 INS60 INS60 INS60 INS21 INS21 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS74 INS74 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS32 MOV43 INS59 INS8 INS5 MOV27 INS8 INS74 INS59 INS42 INS43 INS59 INS43 INS59 MOV62 INS25 MOV27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS52 INS42 INS52 INS42 MOV43 MOV43 INS5 MOV43 INS43 MOV22 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS3 INS42 INS42 INS27 INS25 INS43 INS85 INS41 INS43 MOV43 INS5 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV60 MOV62 MOV8 MOV25 INS60 INS21 MOV60 MOV25 INS60 INS60 INS25 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS85 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS85 INS42 UPD74 INS40 INS5 INS4 INS5 INS4 INS45 INS42 INS45 INS38 MOV8 MOV42 INS32 INS42 INS43 INS85 INS74 INS42 INS42 INS42 INS42 INS42 MOV43 UPD42 INS60 INS74 INS59 INS32 INS5 INS27 INS8 INS5 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS5 INS43 INS85 INS45 INS43 INS85 INS42 INS32 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 INS43 INS43 INS5 INS60 INS14 INS14 MOV43 INS59 UPD42 INS43 INS43 INS42 INS14 INS25 INS42 INS42 INS42 UPD42 MOV42 INS43 INS85 UPD42 MOV32 INS42 INS33 INS70 INS43 INS85 INS42 MOV32 INS42 INS42 INS42 INS27 INS27 INS21 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS85 MOV43 INS59 INS43 INS42 INS43 INS45 UPD42 INS42 INS32 MOV43 UPD42 MOV8 UPD42 INS42 INS42 INS74 INS27 INS21 UPD42 MOV42 INS44 INS42 INS8 INS42 INS42 INS33 INS40 INS34 INS7 INS42 INS42 INS42 INS42 INS3 INS42 INS42 MOV11 UPD42 INS32 INS42 INS42 INS42 INS11 UPD42 INS14 INS43 INS43 INS32 INS32 INS32 INS43 INS42 INS60 INS21 MOV21 INS42 INS2 INS5 INS4 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS42 INS34 INS43 INS85 INS42 INS42 MOV43 INS7 MOV32 INS42 INS42 INS42 INS36 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 MOV32 INS36 UPD42 UPD42 INS11 INS42 INS42 INS3 INS42 INS42 INS45 INS42 INS42 INS42 INS42 UPD42 MOV11 MOV11 INS43 INS32 INS32 INS5 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS3 INS43 INS85 INS42 INS42 UPD42 INS5 INS32 INS42 INS43 INS85 INS42 INS42 INS42 DEL42 DEL59 DEL42 DEL74 DEL40 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL41 DEL8 DEL42 DEL45 DEL42 DEL42 DEL42 DEL11 DEL32 DEL59 DEL60 DEL36 DEL42 DEL42 DEL7 DEL25 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL45 DEL27 DEL32 DEL8