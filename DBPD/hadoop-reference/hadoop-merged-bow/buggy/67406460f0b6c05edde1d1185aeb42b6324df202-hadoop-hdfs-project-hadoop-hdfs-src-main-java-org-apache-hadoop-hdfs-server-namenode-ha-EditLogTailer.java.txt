HDFS-4176. EditLogTailer should call rollEdits with a timeout. (Lei Xu)

+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
-import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import org.apache.hadoop.hdfs.HAUtil;
+   * The timeout in milliseconds of calling rollEdits RPC to Active NN.
+   * @see HDFS-4176.
+   */
+  private final long rollEditsTimeoutMs;
+
+  /**
+   * The executor to run roll edit RPC call in a daemon thread.
+   */
+  private final ExecutorService rollEditsRpcExecutor;
+
+  /**
+    rollEditsTimeoutMs = conf.getInt(
+        DFSConfigKeys.DFS_HA_TAILEDITS_ROLLEDITS_TIMEOUT_KEY,
+        DFSConfigKeys.DFS_HA_TAILEDITS_ROLLEDITS_TIMEOUT_DEFAULT) * 1000;
+
+    rollEditsRpcExecutor = Executors.newSingleThreadExecutor(
+        new ThreadFactoryBuilder().setDaemon(true).build());
+
+    rollEditsRpcExecutor.shutdown();
-  
+
+   * NameNodeProxy factory method.
+   * @return a Callable to roll logs on remote NameNode.
+   */
+  @VisibleForTesting
+  Callable<Void> getNameNodeProxy() {
+    return new MultipleNameNodeProxy<Void>() {
+      @Override
+      protected Void doWork() throws IOException {
+        cachedActiveProxy.rollEditLog();
+        return null;
+      }
+    };
+  }
+
+  /**
-  private void triggerActiveLogRoll() {
+  @VisibleForTesting
+  void triggerActiveLogRoll() {
+    Future<Void> future = null;
-      new MultipleNameNodeProxy<Void>() {
-        @Override
-        protected Void doWork() throws IOException {
-          cachedActiveProxy.rollEditLog();
-          return null;
-        }
-      }.call();
+      future = rollEditsRpcExecutor.submit(getNameNodeProxy());
+      future.get(rollEditsTimeoutMs, TimeUnit.MILLISECONDS);
-    } catch (IOException ioe) {
-      if (ioe instanceof RemoteException) {
-        ioe = ((RemoteException)ioe).unwrapRemoteException();
+    } catch (ExecutionException e) {
+      Throwable cause = e.getCause();
+      if (cause instanceof RemoteException) {
+        IOException ioe = ((RemoteException) cause).unwrapRemoteException();
-
-      LOG.warn("Unable to trigger a roll of the active NN", ioe);
+      LOG.warn("Unable to trigger a roll of the active NN", e);
+    } catch (TimeoutException e) {
+      if (future != null) {
+        future.cancel(true);
+      }
+      LOG.warn(String.format(
+          "Unable to finish rolling edits in %d ms", rollEditsTimeoutMs));
+    } catch (InterruptedException e) {
+      LOG.warn("Unable to trigger a roll of the active NN", e);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS23 INS31 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS78 INS74 INS42 MOV8 INS78 INS65 INS65 INS42 INS65 INS42 INS42 INS21 INS21 INS21 INS65 INS65 INS42 INS43 INS43 INS41 INS42 INS60 INS66 INS66 INS66 INS7 INS7 INS32 INS66 INS66 INS42 INS42 MOV14 INS74 INS59 INS8 INS12 INS12 INS42 INS27 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS33 INS21 INS21 MOV21 INS44 INS8 INS44 INS8 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS7 INS32 INS43 UPD42 INS60 INS43 INS42 INS25 INS21 INS43 INS42 INS21 INS42 INS42 INS40 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS43 INS59 INS42 INS27 INS8 INS32 INS42 INS32 INS14 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS60 UPD42 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS43 INS42 INS42 INS42 MOV43 INS59 INS32 INS42 INS42 INS45 INS42 INS42 INS42 MOV32 INS42 INS42 INS9 UPD42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL7 DEL21