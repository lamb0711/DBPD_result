HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu

+import com.google.common.base.Preconditions;
-import org.apache.hadoop.tools.DistCpOptions.FileAttribute;
-  private DistCpOptions inputOptions;
+  @VisibleForTesting
+  DistCpContext context;
+
-    if (inputOptions.shouldUseSnapshotDiff()) {
+    if (context.shouldUseSnapshotDiff()) {
-      DistCpSync distCpSync = new DistCpSync(inputOptions, getConf());
+      DistCpSync distCpSync = new DistCpSync(context, getConf());
-        throw new Exception("DistCp sync failed, input options: "
-            + inputOptions);
+        throw new Exception("DistCp sync failed, input options: " + context);
-   * @param inputOptions Options (indicating source-paths, target-location.)
-   * @param configuration The Hadoop configuration against which the Copy-mapper must run.
+   * @param configuration configuration against which the Copy-mapper must run
+   * @param inputOptions Immutable options
-  public DistCp(Configuration configuration, DistCpOptions inputOptions) throws Exception {
+  public DistCp(Configuration configuration, DistCpOptions inputOptions)
+      throws Exception {
-    this.inputOptions = inputOptions;
+    if (inputOptions != null) {
+      this.context = new DistCpContext(inputOptions);
+    }
-      inputOptions = (OptionsParser.parse(argv));
-      setOptionsForSplitLargeFile();
+      context = new DistCpContext(OptionsParser.parse(argv));
+      checkSplitLargeFile();
-      LOG.info("Input Options: " + inputOptions);
+      LOG.info("Input Options: " + context);
+    Preconditions.checkState(context != null,
+        "The DistCpContext should have been created before running DistCp!");
-    if (inputOptions.shouldBlock()) {
+    if (context.shouldBlock()) {
-    assert inputOptions != null;
+    assert context != null;
-    Path target = inputOptions.getTargetPath();
+    Path target = context.getTargetPath();
-    inputOptions.setTargetPathExists(targetExists);
+    context.setTargetPathExists(targetExists);
-   * Check if concat is supported by fs.
-   * Throws UnsupportedOperationException if not.
+   * Check splitting large files is supported and populate configs.
-  private void checkConcatSupport(FileSystem fs) {
+  private void checkSplitLargeFile() throws IOException {
+    if (!context.splitLargeFile()) {
+      return;
+    }
+
+    final Path target = context.getTargetPath();
+    final FileSystem targetFS = target.getFileSystem(getConf());
-      fs.concat(tgt, src);
+      targetFS.concat(tgt, src);
-          " is not supported since the target file system doesn't" +
-          " support concat.", use);
+              " is not supported since the target file system doesn't" +
+              " support concat.", use);
-  }
-
-  /**
-   * Set up needed options for splitting large files.
-   */
-  private void setOptionsForSplitLargeFile() throws IOException {
-    if (!inputOptions.splitLargeFile()) {
-      return;
-    }
-    Path target = inputOptions.getTargetPath();
-    FileSystem targetFS = target.getFileSystem(getConf());
-    checkConcatSupport(targetFS);
-
-    LOG.info("Enabling preserving blocksize since "
-        + DistCpOptionSwitch.BLOCKS_PER_CHUNK.getSwitch() + " is passed.");
-    inputOptions.preserve(FileAttribute.BLOCKSIZE);
-
-    LOG.info("Set " +
-        DistCpOptionSwitch.APPEND.getSwitch()
-        + " to false since " + DistCpOptionSwitch.BLOCKS_PER_CHUNK.getSwitch()
-        + " is passed.");
-    inputOptions.setAppend(false);
-
-    job.setInputFormatClass(DistCpUtils.getStrategy(getConf(), inputOptions));
+    job.setInputFormatClass(DistCpUtils.getStrategy(getConf(), context));
-                  String.valueOf(inputOptions.getMaxMaps()));
+                  String.valueOf(context.getMaxMaps()));
-    inputOptions.appendToConf(job.getConfiguration());
+    context.appendToConf(job.getConfiguration());
-    Path targetPath = inputOptions.getTargetPath();
+    Path targetPath = context.getTargetPath();
-    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {
+    if (context.shouldPreserve(
+        DistCpOptions.FileAttribute.ACL)) {
-    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) {
+    if (context.shouldPreserve(
+        DistCpOptions.FileAttribute.XATTR)) {
-    if (inputOptions.shouldAtomicCommit()) {
-      Path workDir = inputOptions.getAtomicWorkPath();
+    if (context.shouldAtomicCommit()) {
+      Path workDir = context.getAtomicWorkPath();
-    Path logPath = inputOptions.getLogPath();
+    Path logPath = context.getLogPath();
-        job.getCredentials(), inputOptions);
-    copyListing.buildListing(fileListingPath, inputOptions);
+        job.getCredentials(), context);
+    copyListing.buildListing(fileListingPath, context);
-    copyListing.buildListing(fileListingPath, inputOptions);
+    copyListing.buildListing(fileListingPath, context);

MOV26 UPD40 INS78 UPD43 UPD42 MOV43 INS42 UPD42 UPD42 INS25 INS21 INS25 INS60 INS60 MOV21 MOV21 UPD42 UPD66 UPD42 UPD66 INS27 INS8 INS32 UPD66 INS38 MOV8 INS83 MOV43 INS59 INS83 MOV43 INS59 MOV43 UPD42 INS42 INS33 MOV21 INS42 INS42 INS27 INS45 UPD42 UPD42 UPD42 INS32 INS42 INS32 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS33 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 MOV43 UPD42 UPD42 INS14 UPD42 INS14 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS43 MOV32 UPD42 UPD42 INS42 INS42 UPD42 DEL83 DEL42 DEL36 DEL66 DEL42 DEL44 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL45 DEL40 DEL42 DEL32 DEL45 DEL40 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL31