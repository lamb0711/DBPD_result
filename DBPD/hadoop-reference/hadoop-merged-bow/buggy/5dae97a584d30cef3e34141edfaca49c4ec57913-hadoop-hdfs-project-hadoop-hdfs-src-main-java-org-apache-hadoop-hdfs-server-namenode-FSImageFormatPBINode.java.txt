HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)

+import org.apache.hadoop.hdfs.StorageType;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeSection.QuotaByStorageTypeEntryProto;
+import org.apache.hadoop.hdfs.server.namenode.FsImageProto.INodeSection.QuotaByStorageTypeFeatureProto;
+import org.apache.hadoop.hdfs.util.EnumCounters;
+    public static ImmutableList<QuotaByStorageTypeEntry> loadQuotaByStorageTypeEntries(
+      QuotaByStorageTypeFeatureProto proto) {
+      ImmutableList.Builder<QuotaByStorageTypeEntry> b = ImmutableList.builder();
+      for (QuotaByStorageTypeEntryProto quotaEntry : proto.getQuotasList()) {
+        StorageType type = PBHelper.convertStorageType(quotaEntry.getStorageType());
+        long quota = quotaEntry.getQuota();
+        b.add(new QuotaByStorageTypeEntry.Builder().setStorageType(type)
+            .setQuota(quota).build());
+      }
+      return b.build();
+    }
+
-
-        dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota);
+        dir.addDirectoryWithQuotaFeature(new DirectoryWithQuotaFeature.Builder().
+            nameSpaceQuota(nsQuota).spaceQuota(dsQuota).build());
+      }
+      EnumCounters<StorageType> typeQuotas = null;
+      if (d.hasTypeQuotas()) {
+        ImmutableList<QuotaByStorageTypeEntry> qes =
+            loadQuotaByStorageTypeEntries(d.getTypeQuotas());
+        typeQuotas = new EnumCounters<StorageType>(StorageType.class,
+            HdfsConstants.QUOTA_RESET);
+        for (QuotaByStorageTypeEntry qe : qes) {
+          if (qe.getQuota() >= 0 && qe.getStorageType() != null &&
+              qe.getStorageType().supportTypeQuota()) {
+            typeQuotas.set(qe.getStorageType(), qe.getQuota());
+          }
+        }
+
+        if (typeQuotas.anyGreaterOrEqual(0)) {
+          DirectoryWithQuotaFeature q = dir.getDirectoryWithQuotaFeature();
+          if (q == null) {
+            dir.addDirectoryWithQuotaFeature(new DirectoryWithQuotaFeature.
+                Builder().typeQuotas(typeQuotas).build());
+          } else {
+            q.setQuota(typeQuotas);
+          }
+        }
-      final Quota.Counts q = root.getQuotaCounts();
-      final long nsQuota = q.get(Quota.NAMESPACE);
-      final long dsQuota = q.get(Quota.DISKSPACE);
+      final QuotaCounts q = root.getQuotaCounts();
+      final long nsQuota = q.getNameSpace();
+      final long dsQuota = q.getDiskSpace();
+      final EnumCounters<StorageType> typeQuotas = q.getTypeSpaces();
+      if (typeQuotas.anyGreaterOrEqual(0)) {
+        dir.rootDir.getDirectoryWithQuotaFeature().setQuota(typeQuotas);
+      }
+    private static QuotaByStorageTypeFeatureProto.Builder
+        buildQuotaByStorageTypeEntries(QuotaCounts q) {
+      QuotaByStorageTypeFeatureProto.Builder b =
+          QuotaByStorageTypeFeatureProto.newBuilder();
+      for (StorageType t: StorageType.getTypesSupportingQuota()) {
+        if (q.getTypeSpace(t) >= 0) {
+          QuotaByStorageTypeEntryProto.Builder eb =
+              QuotaByStorageTypeEntryProto.newBuilder().
+              setStorageType(PBHelper.convertStorageType(t)).
+              setQuota(q.getTypeSpace(t));
+          b.addQuotas(eb);
+        }
+      }
+      return b;
+    }
+
-      Quota.Counts quota = dir.getQuotaCounts();
+      QuotaCounts quota = dir.getQuotaCounts();
-          .setNsQuota(quota.get(Quota.NAMESPACE))
-          .setDsQuota(quota.get(Quota.DISKSPACE))
+          .setNsQuota(quota.getNameSpace())
+          .setDsQuota(quota.getDiskSpace())
+      if (quota.getTypeSpaces().anyGreaterOrEqual(0)) {
+        b.setTypeQuotas(buildQuotaByStorageTypeEntries(quota));
+      }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS60 INS70 INS41 INS60 INS25 INS60 INS25 INS40 INS43 INS42 INS60 INS70 INS41 INS25 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS32 INS74 INS59 INS32 INS8 UPD43 INS83 INS74 INS59 INS32 INS8 INS42 INS43 INS59 INS44 INS32 INS8 INS42 UPD43 INS32 INS8 INS43 INS43 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS43 INS43 INS42 INS33 INS42 INS42 INS60 INS21 INS70 INS25 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS34 INS21 INS40 INS42 INS32 INS43 INS42 INS42 INS42 INS25 INS42 INS32 INS42 INS34 INS21 INS40 INS42 INS42 INS42 INS42 INS43 INS59 INS39 INS59 INS32 INS42 INS42 INS74 INS59 INS7 INS44 INS42 INS8 INS32 INS8 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS43 INS43 INS42 INS32 INS42 INS14 INS43 INS42 INS25 INS42 INS42 INS34 INS60 INS25 INS32 INS42 INS42 INS32 INS34 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS74 INS57 INS40 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS8 INS40 INS42 INS42 INS42 INS42 INS43 INS59 INS32 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV42 INS42 INS42 INS43 INS43 INS43 INS27 INS32 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS40 INS42 INS32 INS42 INS42 INS42 UPD42 INS14 INS42 INS42 INS14 INS42 MOV42 INS42 INS42 INS42 INS27 INS27 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS43 INS43 INS32 INS34 INS32 INS33 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40