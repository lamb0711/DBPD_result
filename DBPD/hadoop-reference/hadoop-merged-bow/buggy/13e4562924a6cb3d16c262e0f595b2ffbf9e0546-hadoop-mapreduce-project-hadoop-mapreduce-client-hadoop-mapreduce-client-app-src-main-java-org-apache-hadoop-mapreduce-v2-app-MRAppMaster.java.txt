MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.InetSocketAddress;
+import java.util.LinkedList;
+import java.util.List;
+import org.apache.hadoop.mapreduce.jobhistory.JobHistoryParser.AMInfo;
+import org.apache.hadoop.mapreduce.jobhistory.AMStartedEvent;
+import org.apache.hadoop.net.NetUtils;
+import org.apache.hadoop.yarn.api.records.ContainerId;
-  private final long startTime = System.currentTimeMillis();
+  private final long startTime;
+  private final long appSubmitTime;
+  private final ContainerId containerID;
+  private final String nmHost;
+  private final int nmHttpPort;
+  private List<AMInfo> amInfos;
+  private Recovery recoveryServ;
+  private boolean inRecovery = false;
-  public MRAppMaster(ApplicationAttemptId applicationAttemptId) {
-    this(applicationAttemptId, new SystemClock());
+  public MRAppMaster(ApplicationAttemptId applicationAttemptId,
+      ContainerId containerId, String nmHost, int nmHttpPort, long appSubmitTime) {
+    this(applicationAttemptId, containerId, nmHost, nmHttpPort,
+        new SystemClock(), appSubmitTime);
-  public MRAppMaster(ApplicationAttemptId applicationAttemptId, Clock clock) {
+  public MRAppMaster(ApplicationAttemptId applicationAttemptId,
+      ContainerId containerId, String nmHost, int nmHttpPort, Clock clock,
+      long appSubmitTime) {
+    this.startTime = clock.getTime();
+    this.appSubmitTime = appSubmitTime;
+    this.containerID = containerId;
+    this.nmHost = nmHost;
+    this.nmHttpPort = nmHttpPort;
-      Recovery recoveryServ = new RecoveryService(appAttemptID, clock);
+      recoveryServ = new RecoveryService(appAttemptID, clock);
-      completedTasksFromPreviousRun = recoveryServ.getCompletedTasks();
+      inRecovery = true;
-        completedTasksFromPreviousRun, metrics, currentUser.getUserName());
+        completedTasksFromPreviousRun, metrics, currentUser.getUserName(),
+        appSubmitTime, amInfos);
+  public List<AMInfo> getAllAMInfos() {
+    return amInfos;
+  }
+  
-    ///////////////////// Create the job itself.
+    // Pull completedTasks etc from recovery
+    if (inRecovery) {
+      completedTasksFromPreviousRun = recoveryServ.getCompletedTasks();
+      amInfos = recoveryServ.getAMInfos();
+    }
+
+    // / Create the AMInfo for the current AppMaster
+    if (amInfos == null) {
+      amInfos = new LinkedList<AMInfo>();
+    }
+    AMInfo amInfo =
+        new AMInfo(appAttemptID, startTime, containerID, nmHost, nmHttpPort);
+    amInfos.add(amInfo);
+
+    // /////////////////// Create the job itself.
-    
+
+    // Send out an MR AM inited event for this AM and all previous AMs.
+    for (AMInfo info : amInfos) {
+      dispatcher.getEventHandler().handle(
+          new JobHistoryEvent(job.getID(), new AMStartedEvent(info
+              .getAppAttemptId(), info.getStartTime(), info.getContainerId(),
+              info.getNodeManagerHost(), info.getNodeManagerHttpPort())));
+    }
+
-      String applicationAttemptIdStr = System
-          .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);
-      if (applicationAttemptIdStr == null) {
-        String msg = ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV
-            + " is null";
+      String containerIdStr =
+          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);
+      String nodeHttpAddressStr =
+          System.getenv(ApplicationConstants.NM_HTTP_ADDRESS_ENV);
+      String appSubmitTimeStr =
+          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);
+      if (containerIdStr == null) {
+        String msg = ApplicationConstants.AM_CONTAINER_ID_ENV + " is null";
-      ApplicationAttemptId applicationAttemptId = ConverterUtils
-          .toApplicationAttemptId(applicationAttemptIdStr);
-      MRAppMaster appMaster = new MRAppMaster(applicationAttemptId);
+      if (nodeHttpAddressStr == null) {
+        String msg = ApplicationConstants.NM_HTTP_ADDRESS_ENV + " is null";
+        LOG.error(msg);
+        throw new IOException(msg);
+      }
+      if (appSubmitTimeStr == null) {
+        String msg = ApplicationConstants.APP_SUBMIT_TIME_ENV + " is null";
+        LOG.error(msg);
+        throw new IOException(msg);
+      }
+
+      ContainerId containerId = ConverterUtils.toContainerId(containerIdStr);
+      ApplicationAttemptId applicationAttemptId =
+          containerId.getApplicationAttemptId();
+      InetSocketAddress nodeHttpInetAddr =
+        NetUtils.createSocketAddr(nodeHttpAddressStr);
+      long appSubmitTime = Long.parseLong(appSubmitTimeStr);
+      
+      MRAppMaster appMaster =
+          new MRAppMaster(applicationAttemptId, containerId,
+              nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),
+              appSubmitTime);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 MOV83 MOV83 MOV39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS74 INS59 INS83 MOV43 INS59 INS83 INS39 INS59 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS83 INS74 INS42 INS8 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS9 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS21 INS43 INS43 INS41 INS25 INS25 INS60 INS21 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS42 INS42 INS42 INS42 INS8 INS27 INS8 INS43 INS59 INS32 INS44 INS42 INS8 INS22 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS21 INS21 MOV21 INS21 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS21 INS60 INS60 INS25 INS25 INS60 INS60 INS60 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS7 INS42 INS42 INS7 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV43 INS59 MOV43 INS59 INS43 INS27 INS8 INS27 INS8 INS43 MOV43 INS59 INS43 INS59 INS39 INS59 MOV43 INS42 MOV14 INS42 INS9 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS32 INS42 UPD42 UPD42 INS42 INS33 INS60 INS21 INS53 INS42 INS33 INS60 INS21 INS53 INS42 UPD42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS42 INS42 INS43 INS32 INS14 INS42 INS42 INS40 INS42 INS42 INS40 UPD40 INS43 INS43 INS59 INS32 INS14 INS43 INS59 INS32 INS14 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 INS32 INS32 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 INS40 INS45 INS42 INS40 INS45 INS42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL42 DEL59 DEL60