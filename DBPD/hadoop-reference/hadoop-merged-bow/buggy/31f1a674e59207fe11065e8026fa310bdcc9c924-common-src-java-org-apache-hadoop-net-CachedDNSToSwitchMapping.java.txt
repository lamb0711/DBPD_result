HADOOP-7314. Add support for throwing UnknownHostException when a host doesn't resolve. Contributed by Jeffrey Naisbitt.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1147317 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.InetAddress;
+import java.net.SocketException;
+import java.net.UnknownHostException;
-  public List<String> resolve(List<String> names) {
-    // normalize all input names to be in the form of IP addresses
-    names = NetUtils.normalizeHostNames(names);
-    
-    List <String> result = new ArrayList<String>(names.size());
-    if (names.isEmpty()) {
-      return result;
-    }
-
+  /**
+   * Returns the hosts from 'names' that have not been cached previously
+   */
+  private List<String> getUncachedHosts(List<String> names) {
-    
-    // Resolve those names
-    List<String> rNames = rawMapping.resolve(unCachedHosts);
-    
+    return unCachedHosts;
+  }
+
+  /**
+   * Caches the resolved hosts
+   */
+  private void cacheResolvedHosts(List<String> uncachedHosts, 
+      List<String> resolvedHosts) {
-    if (rNames != null) {
-      for (int i=0; i<unCachedHosts.size(); i++) {
-        cache.put(unCachedHosts.get(i), rNames.get(i));
+    if (resolvedHosts != null) {
+      for (int i=0; i<uncachedHosts.size(); i++) {
+        cache.put(uncachedHosts.get(i), resolvedHosts.get(i));
-    
+  }
+
+  /**
+   * Returns the cached resolution of the list of hostnames/addresses.
+   * Returns null if any of the names are not currently in the cache
+   */
+  private List<String> getCachedHosts(List<String> names) {
+    List<String> result = new ArrayList<String>(names.size());
-      //now everything is in the cache
-      } else { //resolve all or nothing
+      } else {
+
+  /**
+   * Resolves host names and adds them to the cache.
+   * Unlike the 'resolve" method, this won't hide UnknownHostExceptions
+   * 
+   * @param names to resolve
+   * @return List of resolved names
+   * @throws UnknownHostException if any hosts cannot be resolved
+   */  
+  public List<String> resolveValidHosts(List<String> names) 
+    throws UnknownHostException {
+    if (names.isEmpty()) {
+      return new ArrayList<String>();
+    }
+    List<String> addresses = new ArrayList<String>(names.size());
+    for (String name : names) {
+      addresses.add(InetAddress.getByName(name).getHostAddress());
+    }
+
+    List<String> uncachedHosts = this.getUncachedHosts(names);
+
+    // Resolve the uncached hosts
+    List<String> resolvedHosts = rawMapping.resolveValidHosts(uncachedHosts);
+    this.cacheResolvedHosts(uncachedHosts, resolvedHosts);
+    return this.getCachedHosts(addresses);
+  }
+
+  public List<String> resolve(List<String> names) {
+    // normalize all input names to be in the form of IP addresses
+    names = NetUtils.normalizeHostNames(names);
+
+    List <String> result = new ArrayList<String>(names.size());
+    if (names.isEmpty()) {
+      return result;
+    }
+
+    List<String> uncachedHosts = this.getUncachedHosts(names);
+
+    // Resolve the uncached hosts
+    List<String> resolvedHosts = rawMapping.resolve(uncachedHosts);
+    this.cacheResolvedHosts(uncachedHosts, resolvedHosts);
+    return this.getCachedHosts(names);
+
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS29 INS83 MOV74 INS42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS74 INS42 INS44 MOV8 INS29 INS83 INS74 INS42 INS44 INS43 INS8 INS74 INS44 INS8 INS65 MOV60 MOV70 INS41 INS65 INS74 INS42 MOV74 INS42 INS25 INS65 INS43 INS43 INS74 INS42 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS42 INS25 INS60 INS70 INS60 INS60 INS21 INS41 INS43 INS43 INS74 INS42 MOV21 INS60 MOV25 INS60 INS60 INS21 INS41 INS66 INS42 INS66 INS43 INS43 INS27 INS8 INS66 INS66 INS42 INS42 INS43 INS43 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS32 INS8 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS74 INS59 INS32 INS32 INS42 INS42 INS43 INS43 INS74 INS59 INS74 INS59 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS33 INS24 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS52 INS42 INS42 INS42 INS52 INS42 INS42 MOV58 INS27 MOV37 INS8 INS14 INS42 INS42 INS74 INS32 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS74 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25