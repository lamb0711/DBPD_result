HADOOP-15583. Stabilize S3A Assumed Role support.
Contributed by Steve Loughran.

+import com.amazonaws.AmazonClientException;
+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder;
+import org.apache.hadoop.fs.s3a.S3AUtils;
+import org.apache.hadoop.fs.s3a.Invoker;
+import org.apache.hadoop.fs.s3a.S3ARetryPolicy;
+  private final AWSCredentialProviderList credentialsToSTS;
+
+  private final Invoker invoker;
+
-   * @param uri URI of endpoint.
+   * @param fsUri URI of the filesystem.
-  public AssumedRoleCredentialProvider(URI uri, Configuration conf)
+  public AssumedRoleCredentialProvider(URI fsUri, Configuration conf)
-    AWSCredentialProviderList credentials = new AWSCredentialProviderList();
+    credentialsToSTS = new AWSCredentialProviderList();
-      credentials.add(createAWSCredentialProvider(conf, aClass, uri));
+      credentialsToSTS.add(createAWSCredentialProvider(conf, aClass, fsUri));
+    LOG.debug("Credentials to obtain role credentials: {}", credentialsToSTS);
-    String epr = conf.get(ASSUMED_ROLE_STS_ENDPOINT, "");
-    if (StringUtils.isNotEmpty(epr)) {
-      LOG.debug("STS Endpoint: {}", epr);
-      builder.withServiceEndpoint(epr);
-    }
-    LOG.debug("Credentials to obtain role credentials: {}", credentials);
-    builder.withLongLivedCredentialsProvider(credentials);
+    String endpoint = conf.get(ASSUMED_ROLE_STS_ENDPOINT, "");
+    String region = conf.get(ASSUMED_ROLE_STS_ENDPOINT_REGION,
+        ASSUMED_ROLE_STS_ENDPOINT_REGION_DEFAULT);
+    AWSSecurityTokenServiceClientBuilder stsbuilder =
+        STSClientFactory.builder(
+          conf,
+          fsUri.getHost(),
+          credentialsToSTS,
+          endpoint,
+          region);
+    // the STS client is not tracked for a shutdown in close(), because it
+    // (currently) throws an UnsupportedOperationException in shutdown().
+    builder.withStsClient(stsbuilder.build());
+
+    //now build the provider
+
+    // to handle STS throttling by the AWS account, we
+    // need to retry
+    invoker = new Invoker(new S3ARetryPolicy(conf), this::operationRetried);
+
-      return stsProvider.getCredentials();
+      return invoker.retryUntranslated("getCredentials",
+          true,
+          stsProvider::getCredentials);
+    } catch (IOException e) {
+      // this is in the signature of retryUntranslated;
+      // its hard to see how this could be raised, but for
+      // completeness, it is wrapped as an Amazon Client Exception
+      // and rethrown.
+      throw new AmazonClientException(
+          "getCredentials failed: " + e,
+          e);
-    stsProvider.close();
+    S3AUtils.closeAutocloseables(LOG, stsProvider, credentialsToSTS);
+  /**
+   * Callback from {@link Invoker} when an operation is retried.
+   * @param text text of the operation
+   * @param ex exception
+   * @param retries number of retries
+   * @param idempotent is the method idempotent
+   */
+  public void operationRetried(
+      String text,
+      Exception ex,
+      int retries,
+      boolean idempotent) {
+    if (retries == 0) {
+      // log on the first retry attempt of the credential access.
+      // At worst, this means one log entry every intermittent renewal
+      // time.
+      LOG.info("Retried {}", text);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 MOV43 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS42 INS42 INS42 UPD42 INS21 MOV21 INS60 INS60 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS25 UPD42 UPD66 INS7 INS43 INS59 INS43 INS59 INS7 INS12 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS42 MOV14 UPD45 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS32 INS42 INS14 INS44 INS8 INS42 INS42 INS42 UPD42 INS42 INS42 INS34 INS21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS43 INS14 INS90 INS43 INS42 INS53 INS32 UPD42 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS45 INS9 INS90 INS42 INS14 INS42 INS42 INS45 INS42 UPD42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL45 DEL32 DEL21 DEL42 DEL42