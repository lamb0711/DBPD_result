HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.io.WritableUtils;
+import org.apache.hadoop.ipc.ProtobufRpcEngine.RpcRequestMessageWrapper;
+import org.apache.hadoop.ipc.ProtobufRpcEngine.RpcResponseMessageWrapper;
+import org.apache.hadoop.ipc.RPC.RpcKind;
+import org.apache.hadoop.ipc.Server.AuthProtocol;
+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcRequestHeaderProto;
+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcRequestHeaderProto.OperationProto;
+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcResponseHeaderProto;
+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcSaslProto;
+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcSaslProto.SaslAuth;
+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcSaslProto.SaslState;
-import org.apache.hadoop.security.SaslRpcServer.SaslStatus;
+import org.apache.hadoop.util.ProtoUtil;
+import com.google.protobuf.ByteString;
+  private final AuthMethod authMethod;
-
+  private static final RpcRequestHeaderProto saslHeader =
+      ProtoUtil.makeRpcRequestHeader(RpcKind.RPC_PROTOCOL_BUFFER,
+          OperationProto.RPC_FINAL_PACKET, AuthProtocol.SASL.callId);
+  private static final RpcSaslProto negotiateRequest =
+      RpcSaslProto.newBuilder().setState(SaslState.NEGOTIATE).build();
+  
+    this.authMethod = method;
-      case DIGEST: {
+      case TOKEN: {
+        saslProtocol = "";
-      LOG.debug("Creating SASL " + mechanism
+      LOG.debug("Creating SASL " + mechanism + "(" + authMethod + ") "
-  private static void readStatus(DataInputStream inStream) throws IOException {
-    int status = inStream.readInt(); // read status
-    if (status != SaslStatus.SUCCESS.state) {
-      throw new RemoteException(WritableUtils.readString(inStream),
-          WritableUtils.readString(inStream));
-    }
-  }
-  
-
-    try {
-      byte[] saslToken = new byte[0];
-      if (saslClient.hasInitialResponse())
-        saslToken = saslClient.evaluateChallenge(saslToken);
-      while (saslToken != null) {
-        outStream.writeInt(saslToken.length);
-        outStream.write(saslToken, 0, saslToken.length);
-        outStream.flush();
-        if (LOG.isDebugEnabled())
-          LOG.debug("Have sent token of size " + saslToken.length
-              + " from initSASLContext.");
-        readStatus(inStream);
-        int len = inStream.readInt();
-        if (len == SaslRpcServer.SWITCH_TO_SIMPLE_AUTH) {
-          if (!fallbackAllowed) {
-            throw new IOException("Server asks us to fall back to SIMPLE " +
-                "auth, but this client is configured to only allow secure " +
-                "connections.");
+    
+    // track if SASL ever started, or server switched us to simple
+    boolean inSasl = false;
+    sendSaslMessage(outStream, negotiateRequest);
+    
+    // loop until sasl is complete or a rpc error occurs
+    boolean done = false;
+    do {
+      int totalLen = inStream.readInt();
+      RpcResponseMessageWrapper responseWrapper =
+          new RpcResponseMessageWrapper();
+      responseWrapper.readFields(inStream);
+      RpcResponseHeaderProto header = responseWrapper.getMessageHeader();
+      switch (header.getStatus()) {
+        case ERROR: // might get a RPC error during 
+        case FATAL:
+          throw new RemoteException(header.getExceptionClassName(),
+                                    header.getErrorMsg());
+        default: break;
+      }
+      if (totalLen != responseWrapper.getLength()) {
+        throw new SaslException("Received malformed response length");
+      }
+      
+      if (header.getCallId() != AuthProtocol.SASL.callId) {
+        throw new SaslException("Non-SASL response during negotiation");
+      }
+      RpcSaslProto saslMessage =
+          RpcSaslProto.parseFrom(responseWrapper.getMessageBytes());
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Received SASL message "+saslMessage);
+      }
+      // handle sasl negotiation process
+      RpcSaslProto.Builder response = null;
+      switch (saslMessage.getState()) {
+        case NEGOTIATE: {
+          inSasl = true;
+          // TODO: should instantiate sasl client based on advertisement
+          // but just blindly use the pre-instantiated sasl client for now
+          String clientAuthMethod = authMethod.toString();
+          SaslAuth saslAuthType = null;
+          for (SaslAuth authType : saslMessage.getAuthsList()) {
+            if (clientAuthMethod.equals(authType.getMethod())) {
+              saslAuthType = authType;
+              break;
+            }
-          if (LOG.isDebugEnabled())
-            LOG.debug("Server asks us to fall back to simple auth.");
-          saslClient.dispose();
-          return false;
-        } else if ((len == 0) && saslClient.isComplete()) {
+          if (saslAuthType == null) {
+            saslAuthType = SaslAuth.newBuilder()
+                .setMethod(clientAuthMethod)
+                .setMechanism(saslClient.getMechanismName())
+                .build();
+          }
+          
+          byte[] challengeToken = null;
+          if (saslAuthType != null && saslAuthType.hasChallenge()) {
+            // server provided the first challenge
+            challengeToken = saslAuthType.getChallenge().toByteArray();
+            saslAuthType =
+              SaslAuth.newBuilder(saslAuthType).clearChallenge().build();
+          } else if (saslClient.hasInitialResponse()) {
+            challengeToken = new byte[0];
+          }
+          byte[] responseToken = (challengeToken != null)
+              ? saslClient.evaluateChallenge(challengeToken)
+              : new byte[0];
+          
+          response = createSaslReply(SaslState.INITIATE, responseToken);
+          response.addAuths(saslAuthType);
-        saslToken = new byte[len];
-        if (LOG.isDebugEnabled())
-          LOG.debug("Will read input token of size " + saslToken.length
-              + " for processing by initSASLContext");
-        inStream.readFully(saslToken);
-        saslToken = saslClient.evaluateChallenge(saslToken);
+        case CHALLENGE: {
+          inSasl = true;
+          byte[] responseToken = saslEvaluateToken(saslMessage, false);
+          response = createSaslReply(SaslState.RESPONSE, responseToken);
+          break;
+        }
+        case SUCCESS: {
+          if (inSasl && saslEvaluateToken(saslMessage, true) != null) {
+            throw new SaslException("SASL client generated spurious token");
+          }
+          done = true;
+          break;
+        }
+        default: {
+          throw new SaslException(
+              "RPC client doesn't support SASL " + saslMessage.getState());
+        }
-      if (!saslClient.isComplete()) { // shouldn't happen
-        throw new SaslException("Internal negotiation error");
+      if (response != null) {
+        sendSaslMessage(outStream, response.build());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("SASL client context established. Negotiated QoP: "
-            + saslClient.getNegotiatedProperty(Sasl.QOP));
-      }
-      return true;
-    } catch (IOException e) {
-      try {
-        saslClient.dispose();
-      } catch (SaslException ignored) {
-        // ignore further exceptions during cleanup
-      }
-      throw e;
+    } while (!done);
+    if (!inSasl && !fallbackAllowed) {
+      throw new IOException("Server asks us to fall back to SIMPLE " +
+          "auth, but this client is configured to only allow secure " +
+          "connections.");
+    return inSasl;
+  }
+  
+  private void sendSaslMessage(DataOutputStream out, RpcSaslProto message)
+      throws IOException {
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Sending sasl message "+message);
+    }
+    RpcRequestMessageWrapper request =
+        new RpcRequestMessageWrapper(saslHeader, message);
+    out.writeInt(request.getLength());
+    request.write(out);
+    out.flush();    
+  }
+  
+  private byte[] saslEvaluateToken(RpcSaslProto saslResponse,
+      boolean done) throws SaslException {
+    byte[] saslToken = null;
+    if (saslResponse.hasToken()) {
+      saslToken = saslResponse.getToken().toByteArray();
+      saslToken = saslClient.evaluateChallenge(saslToken);
+    } else if (!done) {
+      throw new SaslException("Challenge contains no token");
+    }
+    if (done && !saslClient.isComplete()) {
+      throw new SaslException("Client is out of sync with server");
+    }
+    return saslToken;
+  }
+  
+  private RpcSaslProto.Builder createSaslReply(SaslState state,
+                                               byte[] responseToken) {
+    RpcSaslProto.Builder response = RpcSaslProto.newBuilder();
+    response.setState(state);
+    if (responseToken != null) {
+      response.setToken(ByteString.copyFrom(responseToken));
+    }
+    return response;

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV29 INS83 UPD39 MOV39 INS42 MOV44 MOV44 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 MOV60 MOV60 INS60 INS21 INS60 INS19 MOV25 INS41 INS43 INS42 INS43 INS42 MOV25 INS60 MOV21 INS21 INS21 INS39 INS85 INS43 INS42 INS39 INS42 INS42 INS60 INS25 INS25 INS41 INS40 UPD43 MOV43 UPD42 MOV42 INS5 INS42 INS60 MOV21 INS25 INS41 INS42 INS42 INS40 INS40 INS40 INS32 INS42 INS7 INS39 INS59 INS32 INS39 INS59 INS8 INS38 INS27 INS42 INS42 INS42 MOV32 INS8 INS43 INS59 INS32 INS32 INS42 INS5 INS59 INS32 INS8 INS25 INS27 INS8 INS42 UPD42 INS39 INS85 INS43 INS59 INS27 INS8 INS42 INS32 INS42 INS40 INS22 INS42 UPD42 INS21 INS42 INS9 INS42 INS42 INS42 INS42 INS9 MOV60 INS60 INS21 MOV60 INS50 INS25 MOV25 INS60 INS25 INS60 INS50 INS25 INS42 INS38 MOV38 INS21 INS42 INS42 INS14 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS33 INS42 INS42 MOV21 MOV21 INS38 INS8 INS42 MOV38 INS53 INS40 INS42 INS32 INS42 UPD42 UPD42 INS42 INS33 INS21 INS42 INS42 INS52 INS42 INS7 INS43 INS59 INS32 INS43 INS32 INS49 INS49 INS53 INS49 INS10 MOV27 INS8 INS27 INS43 INS59 MOV32 INS8 INS43 INS59 INS32 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS27 INS8 INS42 MOV32 INS43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS53 INS14 INS42 INS42 INS32 INS42 INS45 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS14 UPD42 INS32 INS53 INS32 INS40 INS42 INS42 INS32 INS21 INS40 INS42 INS33 INS42 INS42 INS42 INS21 INS60 MOV60 INS70 INS25 INS60 INS25 INS60 INS21 MOV21 INS10 INS42 INS21 INS60 MOV21 INS10 INS42 INS25 MOV21 INS10 INS53 INS42 INS33 INS21 INS42 INS14 INS43 INS45 INS42 INS42 INS32 INS45 INS42 INS45 INS43 UPD42 UPD42 MOV43 INS32 INS32 INS42 INS42 INS14 INS42 INS42 UPD42 MOV42 INS42 INS32 INS32 INS7 INS43 INS59 INS43 INS44 INS32 INS8 INS27 INS8 MOV5 INS59 INS27 INS8 INS25 MOV5 INS59 INS7 INS7 INS5 INS59 INS7 MOV27 MOV8 INS14 INS32 UPD45 INS42 INS32 UPD42 INS43 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV43 INS45 UPD45 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS9 INS42 INS42 INS32 INS42 UPD42 INS33 INS43 INS42 INS42 INS42 MOV25 UPD42 MOV42 MOV33 MOV21 INS42 INS33 INS27 INS32 MOV21 MOV21 MOV32 INS8 INS42 INS16 INS42 INS32 UPD42 UPD42 INS42 INS42 INS9 INS39 INS85 INS42 INS32 INS42 INS32 UPD42 MOV42 INS27 INS53 UPD42 INS9 INS43 INS27 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS8 INS7 INS42 INS33 INS42 INS42 INS7 INS7 INS21 INS36 INS32 INS3 UPD42 MOV42 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS9 UPD42 MOV42 INS40 UPD42 MOV42 MOV32 INS33 INS14 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS21 INS10 INS42 INS32 INS42 INS32 INS42 INS32 INS7 INS27 UPD42 MOV42 UPD42 MOV42 INS42 INS5 INS34 UPD42 UPD42 INS9 INS43 INS45 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 MOV3 INS42 INS33 INS39 INS85 INS42 INS42 INS42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 DEL39 DEL40 DEL40 DEL32 DEL34 DEL40 DEL32 DEL32 DEL32 DEL34 DEL27 DEL36 DEL10 DEL42 DEL3 DEL45 DEL40 DEL21 DEL83 DEL83 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL27 DEL32 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL25 DEL42 DEL40 DEL27 DEL42 DEL42 DEL32 DEL45 DEL32 DEL21 DEL25 DEL9 DEL41 DEL8 DEL25 DEL25 DEL8 DEL61 DEL42 DEL42 DEL45 DEL42 DEL42 DEL40 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL9 DEL41 DEL8 DEL44 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31