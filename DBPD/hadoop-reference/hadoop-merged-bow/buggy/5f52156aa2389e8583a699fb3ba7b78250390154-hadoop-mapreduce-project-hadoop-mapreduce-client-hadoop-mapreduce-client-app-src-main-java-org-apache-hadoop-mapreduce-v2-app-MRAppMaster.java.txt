MAPREDUCE-3614. Fixed MR AM to close history file quickly and send a correct final state to the RM when it is killed. Contributed by Ravi Prakash.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296747 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.mapreduce.v2.app.rm.RMCommunicator;
+  private JobHistoryEventHandler jobHistoryEventHandler;
-    JobHistoryEventHandler eventHandler = new JobHistoryEventHandler(context, 
-        getStartCount());
-    return eventHandler;
+    this.jobHistoryEventHandler = new JobHistoryEventHandler(context,
+      getStartCount());
+    return this.jobHistoryEventHandler;
+
+    public void setSignalled(boolean isSignalled) {
+      ((RMCommunicator) containerAllocator).setSignalled(true);
+    }
-          new CompositeServiceShutdownHook(appMaster));
+        new MRAppMasterShutdownHook(appMaster));
+      // Do not automatically close FileSystem objects so that in case of
+      // SIGTERM I have a chance to write out the job history. I'll be closing
+      // the objects myself.
+      conf.setBoolean("fs.automatic.close", false);
+  // The shutdown hook that runs when a signal is received AND during normal
+  // close of the JVM.
+  static class MRAppMasterShutdownHook extends Thread {
+    MRAppMaster appMaster;
+    MRAppMasterShutdownHook(MRAppMaster appMaster) {
+      this.appMaster = appMaster;
+    }
+    public void run() {
+      LOG.info("MRAppMaster received a signal. Signaling RMCommunicator and "
+        + "JobHistoryEventHandler.");
+      // Notify the JHEH and RMCommunicator that a SIGTERM has been received so
+      // that they don't take too long in shutting down
+      if(appMaster.containerAllocator instanceof ContainerAllocatorRouter) {
+        ((ContainerAllocatorRouter) appMaster.containerAllocator)
+        .setSignalled(true);
+      }
+      if(appMaster.jobHistoryEventHandler != null) {
+        appMaster.jobHistoryEventHandler.setSignalled(true);
+      }
+      appMaster.stop();
+      try {
+        //Close all the FileSystem objects
+        FileSystem.closeAll();
+      } catch (IOException ioe) {
+        LOG.warn("Failed to close all FileSystem objects", ioe);
+      }
+    }
+  }
+

INS26 INS40 INS23 INS55 INS83 MOV43 INS59 INS31 INS83 INS42 INS43 INS23 INS31 INS31 INS42 INS21 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS7 INS22 INS39 INS42 INS21 INS42 INS42 INS43 INS42 INS21 INS21 INS25 INS25 INS21 INS54 INS22 MOV14 INS52 INS42 INS32 INS21 INS42 INS7 INS32 INS62 INS8 INS27 INS8 INS32 INS8 INS12 INS52 INS42 INS36 INS42 INS9 INS32 INS22 INS42 INS42 INS42 INS27 INS40 INS43 INS21 INS40 INS33 INS21 INS42 INS42 INS21 INS44 INS8 INS11 INS42 INS42 INS45 INS9 INS52 INS42 INS45 INS45 INS42 INS32 INS32 INS32 INS43 INS42 INS21 INS43 INS42 UPD43 INS36 INS42 INS9 INS40 INS42 INS9 INS42 INS42 INS42 INS32 INS42 UPD42 INS11 INS42 INS42 INS45 INS42 INS43 INS40 INS42 DEL42 DEL59 DEL60 DEL42