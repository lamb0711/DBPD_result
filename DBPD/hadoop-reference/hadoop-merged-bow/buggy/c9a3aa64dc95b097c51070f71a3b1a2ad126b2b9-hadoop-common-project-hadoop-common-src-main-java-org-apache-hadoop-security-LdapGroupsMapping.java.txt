HADOOP-15950. Failover for LdapGroupsMapping. Contributed by Lukas Majercak.

+import java.util.Iterator;
+import javax.naming.spi.InitialContextFactory;
+import com.google.common.collect.Iterators;
+import com.sun.jndi.ldap.LdapCtxFactory;
-   * URL of the LDAP server
+   * URL of the LDAP server(s)
+  public static final String LDAP_NUM_ATTEMPTS_KEY =
+      LDAP_CONFIG_PREFIX + ".num.attempts";
+  public static final int LDAP_NUM_ATTEMPTS_DEFAULT = 3;
+
+  public static final String LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY =
+      LDAP_CONFIG_PREFIX + ".num.attempts.before.failover";
+  public static final int LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT =
+      LDAP_NUM_ATTEMPTS_DEFAULT;
+
+  public static final String LDAP_CTX_FACTORY_CLASS_KEY =
+      LDAP_CONFIG_PREFIX + ".ctx.factory.class";
+  public static final Class<? extends LdapCtxFactory>
+      LDAP_CTX_FACTORY_CLASS_DEFAULT = LdapCtxFactory.class;
+
-  
-  private String ldapUrl;
+
+  private Iterator<String> ldapUrls;
+  private String currentLdapUrl;
+
-  private int    groupHierarchyLevels;
+  private int groupHierarchyLevels;
+  private int numAttempts;
+  private int numAttemptsBeforeFailover;
+  private Class<? extends InitialContextFactory> ldapCxtFactoryClass;
-  public static final int RECONNECT_RETRY_COUNT = 3;
-  
-     * Normal garbage collection takes care of removing Context instances when they are no longer in use. 
-     * Connections used by Context instances being garbage collected will be closed automatically.
-     * So in case connection is closed and gets CommunicationException, retry some times with new new DirContext/connection. 
+     * Normal garbage collection takes care of removing Context instances when
+     * they are no longer in use. Connections used by Context instances being
+     * garbage collected will be closed automatically. So in case connection is
+     * closed and gets CommunicationException, retry some times with new new
+     * DirContext/connection.
-    for(int retry = 0; retry < RECONNECT_RETRY_COUNT; retry++) {
+
+    // Tracks the number of attempts made using the same LDAP server
+    int atemptsBeforeFailover = 1;
+
+    for (int attempt = 1; attempt <= numAttempts; attempt++,
+        atemptsBeforeFailover++) {
-        LOG.warn("Failed to get groups for user " + user + " (retry=" + retry
-            + ") by " + e);
+        LOG.warn("Failed to get groups for user {} (attempt={}/{}) using {}. " +
+            "Exception: ", user, attempt, numAttempts, currentLdapUrl, e);
+
+        if (failover(atemptsBeforeFailover, numAttemptsBeforeFailover)) {
+          atemptsBeforeFailover = 0;
+        }
-      //reset ctx so that new DirContext can be created with new connection
+      // Reset ctx so that new DirContext can be created with new connection
-    List<String> groups = new ArrayList<String>();
-    Set<String> groupDNs = new HashSet<String>();
+    List<String> groups = new ArrayList<>();
+    Set<String> groupDNs = new HashSet<>();
-    NamingEnumeration<SearchResult> groupResults = null;
+    NamingEnumeration<SearchResult> groupResults;
-        Set<String> groupset = new HashSet<String>(groups);
+        Set<String> groupset = new HashSet<>(groups);
-        groups = new ArrayList<String>(groupset);
+        groups = new ArrayList<>(groupset);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("doGetGroups(" + user + ") returned no groups because the " +
-            "user is not found.");
-      }
-      return new ArrayList<String>();
+      LOG.debug("doGetGroups({}) returned no groups because the " +
+          "user is not found.", user);
+      return new ArrayList<>();
-        groups = new ArrayList<String>();
+        groups = new ArrayList<>();
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("doGetGroups(" + user + ") returned " + groups);
-    }
+    LOG.debug("doGetGroups({}) returned {}", user, groups);
-                     throws NamingException  {
+                     throws NamingException {
-    Set<String> nextLevelGroups = new HashSet<String>();
+    Set<String> nextLevelGroups = new HashSet<>();
-  DirContext getDirContext() throws NamingException {
+  /**
+   * Check whether we should fail over to the next LDAP server.
+   * @param attemptsMadeWithSameLdap current number of attempts made
+   *                                 with using same LDAP instance
+   * @param maxAttemptsBeforeFailover maximum number of attempts
+   *                                  before failing over
+   * @return true if we should fail over to the next LDAP server
+   */
+  protected boolean failover(
+      int attemptsMadeWithSameLdap, int maxAttemptsBeforeFailover) {
+    if (attemptsMadeWithSameLdap >= maxAttemptsBeforeFailover) {
+      String previousLdapUrl = currentLdapUrl;
+      currentLdapUrl = ldapUrls.next();
+      LOG.info("Reached {} attempts on {}, failing over to {}",
+          attemptsMadeWithSameLdap, previousLdapUrl, currentLdapUrl);
+      return true;
+    }
+    return false;
+  }
+
+  private DirContext getDirContext() throws NamingException {
-      Hashtable<String, String> env = new Hashtable<String, String>();
-      env.put(Context.INITIAL_CONTEXT_FACTORY,
-          com.sun.jndi.ldap.LdapCtxFactory.class.getName());
-      env.put(Context.PROVIDER_URL, ldapUrl);
+      Hashtable<String, String> env = new Hashtable<>();
+      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());
+      env.put(Context.PROVIDER_URL, currentLdapUrl);
-  public void cacheGroupsRefresh() throws IOException {
+  public void cacheGroupsRefresh() {
-  public void cacheGroupsAdd(List<String> groups) throws IOException {
+  public void cacheGroupsAdd(List<String> groups) {
-    ldapUrl = conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);
-    if (ldapUrl == null || ldapUrl.isEmpty()) {
-      throw new RuntimeException("LDAP URL is not configured");
+    String[] urls = conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);
+    if (urls == null || urls.length == 0) {
+      throw new RuntimeException("LDAP URL(s) are not configured");
+    ldapUrls = Iterators.cycle(urls);
+    currentLdapUrl = ldapUrls.next();
-    //User search base which defaults to base dn.
+    // User search base which defaults to base dn.
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Usersearch baseDN: " + userbaseDN);
-    }
+    LOG.debug("Usersearch baseDN: {}", userbaseDN);
-    //Group search base which defaults to base dn.
+    // Group search base which defaults to base dn.
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Groupsearch baseDN: " + userbaseDN);
-    }
+    LOG.debug("Groupsearch baseDN: {}", groupbaseDN);
-    int dirSearchTimeout = conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);
+    int dirSearchTimeout = conf.getInt(DIRECTORY_SEARCH_TIMEOUT,
+        DIRECTORY_SEARCH_TIMEOUT_DEFAULT);
+    ldapCxtFactoryClass = conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,
+        LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);
+
+    this.numAttempts = conf.getInt(LDAP_NUM_ATTEMPTS_KEY,
+        LDAP_NUM_ATTEMPTS_DEFAULT);
+    this.numAttemptsBeforeFailover = conf.getInt(
+        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,
+        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);
+
+  /**
+   * Get URLs of configured LDAP servers.
+   * @return URLs of LDAP servers being used.
+   */
+  public Iterator<String> getLdapUrls() {
+    return ldapUrls;
+  }
+
-      LOG.warn("Exception while trying to get password for alias " + alias
-              + ": ", ioe);
+      LOG.warn("Exception while trying to get password for alias {}:",
+          alias, ioe);

INS26 INS26 INS26 INS26 MOV23 MOV23 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 UPD83 INS83 INS83 MOV43 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS74 INS59 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS29 INS83 INS74 INS42 INS8 UPD42 INS27 UPD42 INS42 INS27 INS42 INS42 INS42 INS27 INS43 INS76 INS42 INS57 INS43 MOV43 INS42 INS42 INS42 INS42 INS43 INS76 INS42 INS60 MOV60 MOV21 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS25 INS41 INS60 INS21 INS21 MOV21 MOV21 INS21 INS21 INS21 INS65 INS65 INS43 MOV43 INS41 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS43 INS42 INS42 INS43 INS39 INS59 UPD27 INS37 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS27 INS8 INS9 INS5 INS59 INS7 INS7 INS7 INS7 INS7 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS34 UPD42 UPD42 UPD42 INS42 MOV14 UPD42 MOV21 INS45 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS41 MOV43 INS85 INS42 INS32 INS27 INS42 INS32 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS32 INS22 INS32 INS22 INS32 UPD42 UPD34 UPD74 UPD74 MOV14 UPD74 MOV43 INS59 INS7 INS32 INS9 MOV74 INS59 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 INS40 INS34 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 MOV60 INS42 UPD74 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS14 UPD42 UPD45 INS43 INS25 UPD45 INS42 INS42 INS74 INS42 INS42 INS45 INS42 INS32 INS8 UPD42 INS14 MOV14 MOV43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 UPD74 INS42 INS74 INS42 UPD74 UPD45 MOV45 INS45 INS7 MOV43 INS42 INS34 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL33 DEL45 DEL42 DEL42 DEL42 DEL32 DEL8 DEL25 DEL74 DEL14 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL40 DEL43 DEL57 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL27