HDFS-11170. Add builder-based create API to FileSystem. Contributed by SammiChen and Wei Zhou.

+import org.apache.hadoop.fs.FSDataOutputStreamBuilder;
+  /**
+   * Same as
+   * {@link #create(Path, FsPermission, EnumSet<CreateFlag>, int, short, long,
+   * Progressable, ChecksumOpt)} with the addition of favoredNodes that is a
+   * hint to where the namenode should place the file blocks.
+   * The favored nodes hint is not persisted in HDFS. Hence it may be honored
+   * at the creation time only. And with favored nodes, blocks will be pinned
+   * on the datanodes to prevent balancing move the block. HDFS could move the
+   * blocks during replication, to move the blocks from favored nodes. A value
+   * of null means no favored nodes for this create
+   */
+  private HdfsDataOutputStream create(final Path f,
+      final FsPermission permission, EnumSet<CreateFlag> flag,
+      final int bufferSize, final short replication, final long blockSize,
+      final Progressable progress, final ChecksumOpt checksumOpt,
+      final InetSocketAddress[] favoredNodes) throws IOException {
+    statistics.incrementWriteOps(1);
+    storageStatistics.incrementOpCounter(OpType.CREATE);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<HdfsDataOutputStream>() {
+      @Override
+      public HdfsDataOutputStream doCall(final Path p) throws IOException {
+        final DFSOutputStream out = dfs.create(getPathName(f), permission,
+            flag, true, replication, blockSize, progress, bufferSize,
+            checksumOpt, favoredNodes);
+        return dfs.createWrappedOutputStream(out, statistics);
+      }
+      @Override
+      public HdfsDataOutputStream next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          return myDfs.create(p, permission, flag, bufferSize, replication,
+              blockSize, progress, checksumOpt, favoredNodes);
+        }
+        throw new UnsupportedOperationException("Cannot create with" +
+            " favoredNodes through a symlink to a non-DistributedFileSystem: "
+            + f + " -> " + p);
+      }
+    }.resolve(this, absF);
+  }
+
+
+  /**
+   * Extends FSDataOutputStreamBuilder to support special requirements
+   * of DistributedFileSystem.
+   */
+  public static class HdfsDataOutputStreamBuilder
+      extends FSDataOutputStreamBuilder {
+    private final DistributedFileSystem dfs;
+    private InetSocketAddress[] favoredNodes = null;
+
+    public HdfsDataOutputStreamBuilder(DistributedFileSystem dfs, Path path) {
+      super(dfs, path);
+      this.dfs = dfs;
+    }
+
+    protected InetSocketAddress[] getFavoredNodes() {
+      return favoredNodes;
+    }
+
+    public HdfsDataOutputStreamBuilder setFavoredNodes(
+        final InetSocketAddress[] nodes) {
+      Preconditions.checkNotNull(nodes);
+      favoredNodes = nodes.clone();
+      return this;
+    }
+
+    @Override
+    public HdfsDataOutputStream build() throws IOException {
+      return dfs.create(getPath(), getPermission(), getFlags(),
+          getBufferSize(), getReplication(), getBlockSize(),
+          getProgress(), getChecksumOpt(), getFavoredNodes());
+    }
+  }
+
+  @Override
+  public HdfsDataOutputStreamBuilder newFSDataOutputStreamBuilder(Path path) {
+    return new HdfsDataOutputStreamBuilder(this, path);
+  }

INS26 INS40 INS83 INS42 INS31 INS55 INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 MOV83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS74 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS5 INS42 INS42 INS21 INS21 INS60 INS41 INS65 INS42 INS83 INS83 INS43 INS59 INS83 INS5 INS59 INS83 INS42 INS44 INS44 INS8 INS83 INS5 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS43 INS42 INS41 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS85 INS32 INS32 INS43 INS59 INS32 INS66 INS66 INS42 INS42 INS43 INS85 INS42 INS33 INS43 INS42 INS43 INS42 INS46 INS21 INS43 INS85 INS41 INS42 INS83 INS5 INS42 INS21 INS21 INS41 INS42 INS42 INS42 INS41 INS42 INS14 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS40 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS43 INS85 INS32 INS7 INS52 INS32 INS43 INS52 INS42 INS42 INS42 INS74 INS1 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS43 INS43 INS31 INS31 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS83 INS43 INS42 INS42 INS60 INS41 INS42 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS53 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS62 INS8 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS41 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS42 INS42 DEL42