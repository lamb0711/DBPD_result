HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.

+import java.util.ArrayList;
+import java.util.List;
-  private DummyHAService svcs[];
+  private List<DummyHAService> svcs;
-    svcs = new DummyHAService[2];
-    svcs[0] = new DummyHAService(HAServiceState.INITIALIZING,
-        new InetSocketAddress("svc1", 1234));
-    svcs[0].setSharedResource(sharedResource);
-    svcs[1] = new DummyHAService(HAServiceState.INITIALIZING,
-        new InetSocketAddress("svc2", 1234));
-    svcs[1].setSharedResource(sharedResource);
-    
+    svcs = new ArrayList<DummyHAService>(2);
+    // remove any existing instances we are keeping track of
+    DummyHAService.instances.clear();
+
+    for (int i = 0; i < 2; i++) {
+      addSvcs(svcs, i);
+    }
+
-  
+
+  private void addSvcs(List<DummyHAService> svcs, int i) {
+    svcs.add(new DummyHAService(HAServiceState.INITIALIZING, new InetSocketAddress("svc" + (i + 1),
+        1234)));
+    svcs.get(i).setSharedResource(sharedResource);
+  }
+
+    start(2);
+  }
+
+  /**
+   * Set up the specified number of services and their failover controllers. svc1 is
+   * started first, so that it enters ACTIVE state, and then svc2...svcN is started, which enters
+   * STANDBY.
+   * <p>
+   * Adds any extra svc needed beyond the first two before starting the rest of the cluster.
+   * @param count number of zkfcs to start
+   */
+  public void start(int count) throws Exception {
+    // setup the expected number of zkfcs, if we need to add more. This seemed the least invasive
+    // way to add the services - otherwise its a large test rewrite or changing a lot of assumptions
+    if (count > 2) {
+      for (int i = 2; i < count; i++) {
+        addSvcs(svcs, i);
+      }
+    }
+
-    thrs = new DummyZKFCThread[2];
-    thrs[0] = new DummyZKFCThread(ctx, svcs[0]);
+    thrs = new DummyZKFCThread[count];
+    thrs[0] = new DummyZKFCThread(ctx, svcs.get(0));
-    
-    LOG.info("Adding svc1");
-    thrs[1] = new DummyZKFCThread(ctx, svcs[1]);
-    thrs[1].start();
-    waitForHAState(1, HAServiceState.STANDBY);
+
+    // add the remaining zkfc
+    for (int i = 1; i < count; i++) {
+      LOG.info("Adding svc" + i);
+      thrs[i] = new DummyZKFCThread(ctx, svcs.get(i));
+      thrs[i].start();
+      waitForHAState(i, HAServiceState.STANDBY);
+    }
-    return svcs[i];
+    return svcs.get(i);
-    svcs[idx].isHealthy = healthy;
+    svcs.get(idx).isHealthy = healthy;
-    svcs[idx].failToBecomeActive = doFail;
+    svcs.get(idx).failToBecomeActive = doFail;
-    svcs[idx].failToBecomeStandby = doFail;
+    svcs.get(idx).failToBecomeStandby = doFail;
-    svcs[idx].failToFence = doFail;
+    svcs.get(idx).failToFence = doFail;
-    svcs[idx].actUnreachable = unreachable;
+    svcs.get(idx).actUnreachable = unreachable;
-    assertArrayEquals(Ints.toByteArray(svcs[idx].index), data);
+    assertArrayEquals(Ints.toByteArray(svcs.get(idx).index), data);
-    DummyHAService svc = idx == null ? null : svcs[idx];
+    DummyHAService svc = idx == null ? null : svcs.get(idx);
+
+    @Override
+    protected List<HAServiceTarget> getAllOtherNodes() {
+      List<HAServiceTarget> services = new ArrayList<HAServiceTarget>(
+          DummyHAService.instances.size());
+      for (DummyHAService service : DummyHAService.instances) {
+        if (service != this.localTarget) {
+          services.add(service);
+        }
+      }
+      return services;
+    }

INS26 INS26 INS40 INS40 INS31 INS31 INS74 INS83 INS39 INS42 INS44 INS44 INS8 MOV29 INS83 INS39 INS42 INS43 INS8 INS29 INS44 MOV44 MOV44 MOV44 MOV44 INS31 INS43 MOV43 INS24 INS74 INS42 INS39 INS42 INS21 INS21 INS42 INS21 INS65 INS65 INS39 INS42 INS25 INS24 INS78 INS83 INS74 INS42 INS8 INS42 INS32 INS58 INS27 INS37 INS8 INS43 INS43 INS32 INS32 INS32 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS27 INS8 INS58 INS27 INS37 INS8 INS32 INS42 INS43 INS43 INS60 INS70 INS41 INS14 INS40 INS42 INS39 INS59 INS42 INS34 INS42 MOV21 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS34 INS42 INS34 INS24 INS39 INS59 INS42 INS42 INS42 MOV21 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS44 INS40 INS8 INS42 INS74 INS34 INS42 INS34 MOV43 INS40 INS14 INS42 INS42 INS42 INS58 INS27 INS37 INS8 INS42 MOV43 INS32 INS42 INS34 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS43 INS42 INS14 MOV43 INS42 INS25 INS43 MOV43 INS42 UPD42 UPD42 MOV43 INS27 INS34 INS39 INS59 INS42 INS42 INS42 INS21 INS42 INS42 INS34 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS27 INS8 INS42 INS45 INS36 INS42 INS34 INS32 INS45 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS40 INS42 INS42 INS22 INS21 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS34 INS42 INS42 INS42 DEL85 DEL85 DEL5 DEL34 DEL3 DEL42 DEL34 DEL2 DEL40 DEL42 DEL43 DEL45 DEL34 DEL14 DEL14 DEL7 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL42 DEL32 DEL21 DEL42 DEL34 DEL2 DEL40 DEL45 DEL34 DEL14 DEL14 DEL7 DEL21 DEL34 DEL42 DEL34 DEL2 DEL45 DEL34 DEL42 DEL34 DEL2 DEL34 DEL34 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2