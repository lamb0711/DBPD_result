HADOOP-6299. Reimplement the UserGroupInformation to use the OS
specific and Kerberos JAAS login. (omalley)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68

-import java.security.AccessControlException;
-import java.security.AccessController;
-import java.security.Permission;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
-import java.util.Collections;
-import java.util.HashMap;
+import java.util.IdentityHashMap;
-import javax.security.auth.Subject;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+  private static final String HADOOP_POLICY_FILE = "hadoop-policy.xml";
-  private static final Log LOG = 
-    LogFactory.getLog(ServiceAuthorizationManager.class);
+  private static Map<Class<?>, AccessControlList> protocolToAcl =
+    new IdentityHashMap<Class<?>, AccessControlList>();
-  private static Map<Class<?>, Permission> protocolToPermissionMap = 
-    Collections.synchronizedMap(new HashMap<Class<?>, Permission>());
-
-  public static void authorize(Subject user, Class<?> protocol) 
-  throws AuthorizationException {
-    Permission permission = protocolToPermissionMap.get(protocol);
-    if (permission == null) {
-      permission = new ConnectionPermission(protocol);
-      protocolToPermissionMap.put(protocol, permission);
+  public static void authorize(UserGroupInformation user, 
+                               Class<?> protocol
+                               ) throws AuthorizationException {
+    AccessControlList acl = protocolToAcl.get(protocol);
+    if (acl == null) {
+      throw new AuthorizationException("Protocol " + protocol + 
+                                       " is not known.");
+    if (!acl.isUserAllowed(user)) {
+      throw new AuthorizationException("User " + user.toString() + 
+                                       " is not authorized for protocol " + 
+                                       protocol);
+    }
+  }
+
+  public static synchronized void refresh(Configuration conf,
+                                          PolicyProvider provider) {
+    // Get the system property 'hadoop.policy.file'
+    String policyFile = 
+      System.getProperty("hadoop.policy.file", HADOOP_POLICY_FILE);
-    checkPermission(user, permission);
-  }
-  
-  /**
-   * Check if the given {@link Subject} has all of necessary {@link Permission} 
-   * set.
-   * 
-   * @param user <code>Subject</code> to be authorized
-   * @param permissions <code>Permission</code> set
-   * @throws AuthorizationException if the authorization failed
-   */
-  private static void checkPermission(final Subject user, 
-                                      final Permission... permissions) 
-  throws AuthorizationException {
-    try{
-      Subject.doAs(user, 
-                   new PrivilegedExceptionAction<Void>() {
-                     @Override
-                     public Void run() throws Exception {
-                       try {
-                         for(Permission permission : permissions) {
-                           AccessController.checkPermission(permission);
-                         }
-                       } catch (AccessControlException ace) {
-                         LOG.info("Authorization failed for " + 
-                                  UserGroupInformation.getCurrentUGI(), ace);
-                         throw new AuthorizationException(ace);
-                       }
-                      return null;
-                     }
-                   }
-                  );
-    } catch (PrivilegedActionException e) {
-      throw new AuthorizationException(e.getException());
+    // Make a copy of the original config, and load the policy file
+    Configuration policyConf = new Configuration(conf);
+    policyConf.addResource(policyFile);
+    
+    final Map<Class<?>, AccessControlList> newAcls =
+      new IdentityHashMap<Class<?>, AccessControlList>();
+
+    // Parse the config file
+    Service[] services = provider.getServices();
+    if (services != null) {
+      for (Service service : services) {
+        AccessControlList acl = 
+          new AccessControlList(
+              policyConf.get(service.getServiceKey(), 
+                             AccessControlList.WILDCARD_ACL_VALUE)
+              );
+        newAcls.put(service.getProtocol(), acl);
+      }
+
+    // Flip to the newly parsed permissions
+    protocolToAcl = newAcls;
-  

MOV23 UPD40 UPD40 UPD43 UPD74 MOV74 MOV43 UPD83 INS83 UPD42 INS8 UPD42 UPD42 INS45 MOV43 UPD43 UPD42 INS14 UPD43 INS25 INS25 UPD43 UPD42 UPD43 UPD42 INS60 INS60 INS21 INS60 INS60 INS25 INS21 UPD42 UPD74 MOV74 MOV74 UPD42 UPD43 MOV27 INS8 INS38 INS8 UPD42 UPD42 INS43 INS59 INS43 INS59 INS32 INS83 INS74 INS59 INS5 INS59 INS27 INS8 INS7 UPD43 INS43 UPD42 UPD42 UPD42 INS53 INS32 INS53 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 INS43 INS74 INS43 INS42 INS14 INS43 INS85 INS42 INS32 INS42 INS33 INS70 INS42 INS42 UPD42 INS42 UPD42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 INS43 INS42 UPD42 MOV42 INS43 INS76 UPD42 MOV42 INS74 INS42 UPD42 MOV42 UPD42 MOV42 INS44 INS42 INS8 MOV43 INS27 MOV43 INS27 UPD42 MOV42 UPD42 MOV42 INS43 INS74 INS43 UPD43 MOV43 UPD42 MOV42 INS60 INS21 INS45 INS42 INS45 INS45 INS32 INS45 INS42 INS42 INS43 INS76 UPD42 MOV42 UPD42 INS43 INS59 INS32 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL43 DEL43 DEL74 DEL42 DEL78 DEL83 DEL43 DEL42 DEL43 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL27 DEL42 DEL32 DEL21 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL33 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL8 DEL44 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8