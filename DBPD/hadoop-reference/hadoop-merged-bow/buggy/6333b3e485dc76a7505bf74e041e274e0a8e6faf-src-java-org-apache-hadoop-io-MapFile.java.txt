HADOOP-6856. Simplify constructors for SequenceFile, and MapFile. (omalley)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1002937 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.Options;
+import org.apache.hadoop.io.SequenceFile.Reader;
+import org.apache.hadoop.io.SequenceFile.Writer;
-    /** Create the named map for keys of the named class. */
+    /** Create the named map for keys of the named class. 
+     * @deprecated Use Writer(Configuration, Path, Option...) instead.
+     */
+    @Deprecated
-                  Class<? extends WritableComparable> keyClass, Class valClass)
-      throws IOException {
-      this(conf, fs, dirName,
-           WritableComparator.get(keyClass), valClass,
-           SequenceFile.getCompressionType(conf));
+                  Class<? extends WritableComparable> keyClass, 
+                  Class valClass) throws IOException {
+      this(conf, new Path(dirName), keyClass(keyClass), valueClass(valClass));
-    /** Create the named map for keys of the named class. */
+    /** Create the named map for keys of the named class. 
+     * @deprecated Use Writer(Configuration, Path, Option...) instead.
+     */
+    @Deprecated
-                  CompressionType compress, Progressable progress)
-      throws IOException {
-      this(conf, fs, dirName, WritableComparator.get(keyClass), valClass,
-           compress, progress);
+                  CompressionType compress, 
+                  Progressable progress) throws IOException {
+      this(conf, new Path(dirName), keyClass(keyClass), valueClass(valClass),
+           compressionType(compress), progressable(progress));
-    /** Create the named map for keys of the named class. */
+    /** Create the named map for keys of the named class. 
+     * @deprecated Use Writer(Configuration, Path, Option...) instead.
+     */
+    @Deprecated
-                  Progressable progress)
-      throws IOException {
-      this(conf, fs, dirName, WritableComparator.get(keyClass), valClass,
-           compress, codec, progress);
+                  Progressable progress) throws IOException {
+      this(conf, new Path(dirName), keyClass(keyClass), valueClass(valClass),
+           compressionType(compress), compressionCodec(codec), 
+           progressable(progress));
-    /** Create the named map for keys of the named class. */
+    /** Create the named map for keys of the named class. 
+     * @deprecated Use Writer(Configuration, Path, Option...) instead.
+     */
+    @Deprecated
-                  CompressionType compress)
-      throws IOException {
-      this(conf, fs, dirName, WritableComparator.get(keyClass), valClass, compress);
+                  CompressionType compress) throws IOException {
+      this(conf, new Path(dirName), keyClass(keyClass),
+           valueClass(valClass), compressionType(compress));
-    /** Create the named map using the named key comparator. */
+    /** Create the named map using the named key comparator. 
+     * @deprecated Use Writer(Configuration, Path, Option...) instead.
+     */
+    @Deprecated
-                  WritableComparator comparator, Class valClass)
-      throws IOException {
-      this(conf, fs, dirName, comparator, valClass,
-           SequenceFile.getCompressionType(conf));
+                  WritableComparator comparator, Class valClass
+                  ) throws IOException {
+      this(conf, new Path(dirName), comparator(comparator), 
+           valueClass(valClass));
-    /** Create the named map using the named key comparator. */
+
+    /** Create the named map using the named key comparator. 
+     * @deprecated Use Writer(Configuration, Path, Option...) instead.
+     */
+    @Deprecated
-                  SequenceFile.CompressionType compress)
-      throws IOException {
-      this(conf, fs, dirName, comparator, valClass, compress, null);
+                  SequenceFile.CompressionType compress) throws IOException {
+      this(conf, new Path(dirName), comparator(comparator),
+           valueClass(valClass), compressionType(compress));
-    /** Create the named map using the named key comparator. */
+
+    /** Create the named map using the named key comparator. 
+     * @deprecated Use Writer(Configuration, Path, Option...)} instead.
+     */
+    @Deprecated
-                  Progressable progress)
-      throws IOException {
-      this(conf, fs, dirName, comparator, valClass, 
-           compress, new DefaultCodec(), progress);
+                  Progressable progress) throws IOException {
+      this(conf, new Path(dirName), comparator(comparator),
+           valueClass(valClass), compressionType(compress),
+           progressable(progress));
-    /** Create the named map using the named key comparator. */
+
+    /** Create the named map using the named key comparator. 
+     * @deprecated Use Writer(Configuration, Path, Option...) instead.
+     */
+    @Deprecated
-                  Progressable progress)
-      throws IOException {
-
-      this.indexInterval = conf.getInt(INDEX_INTERVAL, this.indexInterval);
-
-      this.comparator = comparator;
-      this.lastKey = comparator.newKey();
-
-      Path dir = new Path(dirName);
-      if (!fs.mkdirs(dir)) {
-        throw new IOException("Mkdirs failed to create directory " + dir.toString());
-      }
-      Path dataFile = new Path(dir, DATA_FILE_NAME);
-      Path indexFile = new Path(dir, INDEX_FILE_NAME);
-
-      Class keyClass = comparator.getKeyClass();
-      this.data =
-        SequenceFile.createWriter
-        (fs, conf, dataFile, keyClass, valClass, compress, codec, progress);
-      this.index =
-        SequenceFile.createWriter
-        (fs, conf, indexFile, keyClass, LongWritable.class,
-         CompressionType.BLOCK, progress);
+                  Progressable progress) throws IOException {
+      this(conf, new Path(dirName), comparator(comparator),
+           valueClass(valClass), compressionType(compress),
+           compressionCodec(codec), progressable(progress));
+    // our options are a superset of sequence file writer options
+    public static interface Option extends SequenceFile.Writer.Option { }
+    
+    private static class KeyClassOption extends Options.ClassOption
+                                        implements Option {
+      KeyClassOption(Class<?> value) {
+        super(value);
+      }
+    }
+    
+    private static class ComparatorOption implements Option {
+      private final WritableComparator value;
+      ComparatorOption(WritableComparator value) {
+        this.value = value;
+      }
+      WritableComparator getValue() {
+        return value;
+      }
+    }
+
+    public static Option keyClass(Class<? extends WritableComparable> value) {
+      return new KeyClassOption(value);
+    }
+    
+    public static Option comparator(WritableComparator value) {
+      return new ComparatorOption(value);
+    }
+
+    public static SequenceFile.Writer.Option valueClass(Class<?> value) {
+      return SequenceFile.Writer.valueClass(value);
+    }
+    
+    public static 
+    SequenceFile.Writer.Option compressionType(CompressionType value) {
+      return SequenceFile.Writer.compressionType(value);
+    }
+
+    public static 
+    SequenceFile.Writer.Option compressionCodec(CompressionCodec value) {
+      return SequenceFile.Writer.compressionCodec(value);
+    }
+
+    public static SequenceFile.Writer.Option progressable(Progressable value) {
+      return SequenceFile.Writer.progressable(value);
+    }
+
+    @SuppressWarnings("unchecked")
+    public Writer(Configuration conf, 
+                  Path dirName,
+                  SequenceFile.Writer.Option... opts
+                  ) throws IOException {
+      KeyClassOption keyClassOption = 
+        Options.getOption(KeyClassOption.class, opts);
+      ComparatorOption comparatorOption =
+        Options.getOption(ComparatorOption.class, opts);
+      if ((keyClassOption == null) == (comparatorOption == null)) {
+        throw new IllegalArgumentException("key class or comparator option "
+                                           + "must be set");
+      }
+      this.indexInterval = conf.getInt(INDEX_INTERVAL, this.indexInterval);
+
+      Class<? extends WritableComparable> keyClass;
+      if (keyClassOption == null) {
+        this.comparator = comparatorOption.getValue();
+        keyClass = comparator.getKeyClass();
+      } else {
+        keyClass= 
+          (Class<? extends WritableComparable>) keyClassOption.getValue();
+        this.comparator = WritableComparator.get(keyClass);
+      }
+      this.lastKey = comparator.newKey();
+      FileSystem fs = dirName.getFileSystem(conf);
+
+      if (!fs.mkdirs(dirName)) {
+        throw new IOException("Mkdirs failed to create directory " + dirName);
+      }
+      Path dataFile = new Path(dirName, DATA_FILE_NAME);
+      Path indexFile = new Path(dirName, INDEX_FILE_NAME);
+
+      SequenceFile.Writer.Option[] dataOptions =
+        Options.prependOptions(opts, 
+                               SequenceFile.Writer.file(dataFile),
+                               SequenceFile.Writer.keyClass(keyClass));
+      this.data = SequenceFile.createWriter(conf, dataOptions);
+
+      SequenceFile.Writer.Option[] indexOptions =
+        Options.prependOptions(opts, 
+                               SequenceFile.Writer.file(indexFile),
+                               SequenceFile.Writer.keyClass(keyClass),
+                               SequenceFile.Writer.valueClass(LongWritable.class),
+                               SequenceFile.Writer.compressionType(CompressionType.BLOCK));
+      this.index = SequenceFile.createWriter(conf, indexOptions);      
+    }
+
-    /** Construct a map reader for the named map.*/
-    public Reader(FileSystem fs, String dirName, Configuration conf) throws IOException {
-      this(fs, dirName, null, conf);
-      INDEX_SKIP = conf.getInt("io.map.index.skip", 0);
+    public static interface Option extends SequenceFile.Reader.Option {}
+    
+    public static Option comparator(WritableComparator value) {
+      return new ComparatorOption(value);
-    /** Construct a map reader for the named map using the named comparator.*/
-    public Reader(FileSystem fs, String dirName, WritableComparator comparator, Configuration conf)
-      throws IOException {
-      this(fs, dirName, comparator, conf, true);
-    }
-    
-    /**
-     * Hook to allow subclasses to defer opening streams until further
-     * initialization is complete.
-     * @see #createDataFileReader(FileSystem, Path, Configuration)
-     */
-    protected Reader(FileSystem fs, String dirName,
-        WritableComparator comparator, Configuration conf, boolean open)
-      throws IOException {
-      
-      if (open) {
-        open(fs, dirName, comparator, conf);
+    static class ComparatorOption implements Option {
+      private final WritableComparator value;
+      ComparatorOption(WritableComparator value) {
+        this.value = value;
+      }
+      WritableComparator getValue() {
+        return value;
+
+    public Reader(Path dir, Configuration conf,
+                  SequenceFile.Reader.Option... opts) throws IOException {
+      ComparatorOption comparatorOption = 
+        Options.getOption(ComparatorOption.class, opts);
+      WritableComparator comparator =
+        comparatorOption == null ? null : comparatorOption.getValue();
+      INDEX_SKIP = conf.getInt("io.map.index.skip", 0);
+      open(dir, comparator, conf, opts);
+    }
+ 
+    /** Construct a map reader for the named map.
+     * @deprecated
+     */
+    @Deprecated
+    public Reader(FileSystem fs, String dirName, 
+                  Configuration conf) throws IOException {
+      this(new Path(dirName), conf);
+    }
+
+    /** Construct a map reader for the named map using the named comparator.
+     * @deprecated
+     */
+    @Deprecated
+    public Reader(FileSystem fs, String dirName, WritableComparator comparator, 
+                  Configuration conf) throws IOException {
+      this(new Path(dirName), conf, comparator(comparator));
+    }
-    protected synchronized void open(FileSystem fs, String dirName,
-        WritableComparator comparator, Configuration conf) throws IOException {
-      Path dir = new Path(dirName);
+    protected synchronized void open(Path dir,
+                                     WritableComparator comparator,
+                                     Configuration conf, 
+                                     SequenceFile.Reader.Option... options
+                                     ) throws IOException {
-      this.data = createDataFileReader(fs, dataFile, conf);
+      this.data = createDataFileReader(dataFile, conf, options);
-        this.comparator = WritableComparator.get(data.getKeyClass().asSubclass(WritableComparable.class));
+        this.comparator = 
+          WritableComparator.get(data.getKeyClass().
+                                   asSubclass(WritableComparable.class));
-      this.index = new SequenceFile.Reader(fs, indexFile, conf);
+      SequenceFile.Reader.Option[] indexOptions =
+        Options.prependOptions(options, SequenceFile.Reader.file(indexFile));
+      this.index = new SequenceFile.Reader(conf, indexOptions);
-    protected SequenceFile.Reader createDataFileReader(FileSystem fs,
-        Path dataFile, Configuration conf) throws IOException {
-      return new SequenceFile.Reader(fs, dataFile,  conf);
+    protected SequenceFile.Reader 
+      createDataFileReader(Path dataFile, Configuration conf,
+                           SequenceFile.Reader.Option... options
+                           ) throws IOException {
+      SequenceFile.Reader.Option[] newOptions =
+        Options.prependOptions(options, SequenceFile.Reader.file(dataFile));
+      return new SequenceFile.Reader(conf, newOptions);
-    SequenceFile.Reader dataReader = new SequenceFile.Reader(fs, data, conf);
+    SequenceFile.Reader dataReader = 
+      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));
-    if (!dryrun) indexWriter = SequenceFile.createWriter(fs, conf, index, keyClass, LongWritable.class);
+    if (!dryrun) {
+      indexWriter = 
+        SequenceFile.createWriter(conf, 
+                                  SequenceFile.Writer.file(index), 
+                                  SequenceFile.Writer.keyClass(keyClass), 
+                                  SequenceFile.Writer.valueClass
+                                    (LongWritable.class));
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS55 INS55 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS55 INS31 INS31 MOV44 MOV44 INS78 MOV43 INS78 MOV44 MOV43 INS78 MOV44 MOV43 MOV29 INS78 INS83 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 MOV29 INS78 INS44 MOV44 MOV43 MOV29 INS78 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 MOV29 INS78 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 MOV29 INS78 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS43 INS83 INS83 INS42 INS43 INS83 INS83 INS42 INS43 INS43 INS31 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS79 INS44 INS44 INS83 INS83 INS42 INS43 INS83 INS43 UPD42 INS44 INS8 INS83 INS42 INS43 INS23 INS31 INS31 UPD83 MOV83 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 MOV29 INS78 INS83 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS78 INS65 INS42 INS42 INS65 INS42 INS65 INS42 INS65 INS42 INS17 INS65 INS42 INS43 INS42 INS65 INS42 INS65 INS42 INS65 INS42 INS42 INS40 INS40 INS42 INS42 INS44 INS8 INS42 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS43 INS42 INS8 INS42 INS74 INS42 INS41 INS42 INS43 INS42 INS41 INS40 INS74 INS42 INS41 INS40 INS43 INS42 INS41 INS40 INS43 INS42 INS41 INS40 INS43 INS42 INS41 INS42 INS45 MOV43 INS42 INS43 INS42 INS60 INS60 INS25 INS60 INS25 INS21 INS60 INS40 INS42 INS43 INS42 INS41 UPD42 MOV42 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS43 INS42 INS8 UPD43 UPD42 UPD43 UPD42 INS60 INS60 MOV21 MOV21 INS65 INS42 INS17 INS65 INS42 UPD43 UPD42 UPD43 UPD42 INS21 INS60 UPD43 UPD42 INS60 INS41 MOV43 INS8 INS66 INS14 INS66 INS14 INS32 INS32 INS32 INS66 INS14 INS32 INS32 INS32 INS32 INS32 INS66 INS42 INS14 INS32 INS32 INS32 INS66 UPD42 MOV42 INS14 INS32 INS66 INS14 INS32 INS32 INS66 MOV14 INS32 INS32 INS32 INS32 INS66 MOV14 INS32 INS32 INS32 INS32 INS32 INS74 INS42 INS46 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS43 INS76 INS14 INS42 INS14 INS43 INS76 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS40 INS43 INS59 INS43 INS59 INS27 INS8 INS74 INS59 INS27 INS8 INS8 MOV43 MOV43 INS5 INS7 INS5 INS59 INS42 INS14 UPD42 MOV42 INS42 INS43 INS42 INS21 INS42 INS41 UPD42 INS40 INS43 INS59 INS43 INS59 INS14 INS42 INS14 INS42 INS32 UPD42 INS40 INS7 INS5 INS59 INS40 INS5 INS59 INS14 INS21 INS43 INS42 UPD42 UPD42 UPD42 INS43 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 UPD42 UPD42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS76 INS42 INS42 INS7 INS42 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS36 INS36 INS53 INS43 INS76 INS42 INS42 INS33 MOV21 INS21 INS21 INS21 INS42 INS42 INS32 INS43 INS85 INS42 INS32 MOV22 INS32 INS43 INS85 INS42 INS32 MOV22 INS43 INS42 UPD42 MOV42 INS7 INS42 INS42 INS42 INS32 MOV42 INS42 INS16 UPD42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 MOV22 INS32 INS43 INS85 INS42 INS32 MOV22 INS43 INS85 INS42 INS32 MOV43 MOV42 INS42 MOV43 INS42 INS32 MOV7 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS27 INS27 INS14 INS42 INS43 INS7 INS7 INS7 INS42 INS42 INS42 UPD42 UPD42 MOV43 UPD42 INS40 INS42 INS42 INS42 INS32 INS32 MOV42 MOV42 INS42 INS42 INS40 INS42 INS42 UPD42 MOV42 INS32 INS32 INS32 INS32 UPD42 INS42 INS22 INS42 INS42 INS42 INS57 INS42 INS27 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 UPD42 MOV42 INS42 UPD42 MOV42 INS32 MOV43 UPD42 UPD42 UPD40 MOV40 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS52 INS42 INS43 INS43 INS42 INS33 INS42 INS33 INS43 INS27 INS42 INS32 INS42 MOV32 INS42 INS11 INS22 MOV32 MOV42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 MOV57 INS40 UPD42 MOV42 INS40 INS52 INS42 INS43 INS42 INS33 INS42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS74 INS32 INS52 INS42 INS42 INS42 INS40 INS42 MOV42 INS40 MOV42 INS42 INS40 INS42 MOV57 INS43 INS76 INS42 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL33 DEL42 DEL17 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL9 DEL66 DEL66 DEL65 DEL42 DEL69 DEL69 DEL43 DEL69 DEL68 DEL65 DEL29 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL59 DEL60 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL14 DEL41 DEL42 DEL42 DEL42 DEL42 DEL21