HDFS-5746.  Add ShortCircuitSharedMemorySegment (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563362 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.SocketException;
-import java.nio.channels.AsynchronousCloseException;
-import java.util.concurrent.atomic.AtomicInteger;
+import org.apache.hadoop.util.CloseableReferenceCount;
-   * Tracks the reference count of the file descriptor, and also whether it is
-   * open or closed.
+   * The socket reference count and closed bit.
-  private static class Status {
-    /**
-     * Bit mask representing a closed domain socket. 
-     */
-    private static final int STATUS_CLOSED_MASK = 1 << 30;
-    
-    /**
-     * Status bits
-     * 
-     * Bit 30: 0 = DomainSocket open, 1 = DomainSocket closed
-     * Bits 29 to 0: the reference count.
-     */
-    private final AtomicInteger bits = new AtomicInteger(0);
-
-    Status() { }
-
-    /**
-     * Increment the reference count of the underlying file descriptor.
-     *
-     * @throws ClosedChannelException      If the file descriptor is closed.
-     */
-    void reference() throws ClosedChannelException {
-      int curBits = bits.incrementAndGet();
-      if ((curBits & STATUS_CLOSED_MASK) != 0) {
-        bits.decrementAndGet();
-        throw new ClosedChannelException();
-      }
-    }
-
-    /**
-     * Decrement the reference count of the underlying file descriptor.
-     *
-     * @param checkClosed        Whether to throw an exception if the file
-     *                           descriptor is closed.
-     *
-     * @throws AsynchronousCloseException  If the file descriptor is closed and
-     *                                     checkClosed is set.
-     */
-    void unreference(boolean checkClosed) throws AsynchronousCloseException {
-      int newCount = bits.decrementAndGet();
-      assert (newCount & ~STATUS_CLOSED_MASK) >= 0;
-      if (checkClosed && ((newCount & STATUS_CLOSED_MASK) != 0)) {
-        throw new AsynchronousCloseException();
-      }
-    }
-
-    /**
-     * Return true if the file descriptor is currently open.
-     * 
-     * @return                 True if the file descriptor is currently open.
-     */
-    boolean isOpen() {
-      return ((bits.get() & STATUS_CLOSED_MASK) == 0);
-    }
-
-    /**
-     * Mark the file descriptor as closed.
-     *
-     * Once the file descriptor is closed, it cannot be reopened.
-     *
-     * @return                         The current reference count.
-     * @throws ClosedChannelException  If someone else closes the file 
-     *                                 descriptor before we do.
-     */
-    int setClosed() throws ClosedChannelException {
-      while (true) {
-        int curBits = bits.get();
-        if ((curBits & STATUS_CLOSED_MASK) != 0) {
-          throw new ClosedChannelException();
-        }
-        if (bits.compareAndSet(curBits, curBits | STATUS_CLOSED_MASK)) {
-          return curBits & (~STATUS_CLOSED_MASK);
-        }
-      }
-    }
-
-    /**
-     * Get the current reference count.
-     *
-     * @return                 The current reference count.
-     */
-    int getReferenceCount() {
-      return bits.get() & (~STATUS_CLOSED_MASK);
-    }
-  }
-
-  /**
-   * The socket status.
-   */
-  private final Status status;
+  final CloseableReferenceCount refCount;
-  private final int fd;
+  final int fd;
-    this.status = new Status();
+    this.refCount = new CloseableReferenceCount();
+  private void unreference(boolean checkClosed) throws ClosedChannelException {
+    if (checkClosed) {
+      refCount.unreferenceCheckClosed();
+    } else {
+      refCount.unreference();
+    }
+  }
+
-    status.reference();
+    refCount.reference();
-      status.unreference(exc);
+      unreference(exc);
- /**
-  * Return true if the file descriptor is currently open.
-  *
-  * @return                 True if the file descriptor is currently open.
-  */
- public boolean isOpen() {
-   return status.isOpen();
- }
+  /**
+   * Return true if the file descriptor is currently open.
+   *
+   * @return                 True if the file descriptor is currently open.
+   */
+  public boolean isOpen() {
+    return refCount.isOpen();
+  }
-    status.reference();
+    refCount.reference();
-      status.unreference(exc);
+      unreference(exc);
-    status.reference();
+    refCount.reference();
-      status.unreference(exc);
+      unreference(exc);
-    int refCount;
+    int count;
-      refCount = status.setClosed();
+      count = refCount.setClosed();
-    while (refCount > 0) {
+    while (count > 0) {
-      refCount = status.getReferenceCount();
+      count = refCount.getReferenceCount();
-    status.reference();
+    refCount.reference();
-      status.unreference(exc);
+      unreference(exc);
-    status.reference();
+    refCount.reference();
-      status.unreference(exc);
+      unreference(exc);
-    status.reference();
+    refCount.reference();
-      status.unreference(!success);
+      unreference(!success);
-      status.reference();
+      refCount.reference();
-        status.unreference(exc);
+        unreference(exc);
-      status.reference();
+      refCount.reference();
-        status.unreference(exc);
+        unreference(exc);
-      status.reference();
+      refCount.reference();
-        status.unreference(exc);
+        unreference(exc);
-      status.reference();
+      refCount.reference();
-        status.unreference(exc);
+        unreference(exc);
-      status.reference();
-        boolean exc = true;
+      refCount.reference();
+      boolean exc = true;
-        status.unreference(exc);
+        unreference(exc);
-      status.reference();
+      refCount.reference();
-        status.unreference(exc);
+        unreference(exc);

MOV26 UPD40 MOV23 INS31 INS43 MOV59 INS83 MOV39 MOV42 MOV44 MOV43 INS8 INS42 INS25 UPD66 INS42 INS8 INS8 INS59 INS21 INS21 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS32 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL39 DEL42 DEL34 DEL34 DEL27 DEL59 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL42 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL38 DEL27 DEL36 DEL34 DEL27 DEL6 DEL42 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL36 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL32 DEL42 DEL27 DEL36 DEL34 DEL27 DEL36 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL9 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL27 DEL32 DEL42 DEL42 DEL38 DEL36 DEL27 DEL41 DEL8 DEL25 DEL8 DEL61 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL38 DEL36 DEL27 DEL41 DEL8 DEL31 DEL55 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42