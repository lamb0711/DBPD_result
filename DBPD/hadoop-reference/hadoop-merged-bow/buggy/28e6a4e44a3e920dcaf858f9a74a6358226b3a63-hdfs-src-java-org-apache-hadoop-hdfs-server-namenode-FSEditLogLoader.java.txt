HDFS-1073. Redesign the NameNode's storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.EOFException;
+import java.io.File;
+import java.io.FileInputStream;
-import java.util.zip.CheckedInputStream;
+import org.apache.hadoop.hdfs.server.namenode.FSEditLogOp.LogHeader;
+import org.apache.hadoop.hdfs.server.namenode.FSEditLogOp.Reader;
-  int loadFSEdits(EditLogInputStream edits) throws IOException {
+  int loadFSEdits(EditLogInputStream edits, long expectedStartingTxId)
+  throws IOException {
-    int numEdits = loadFSEdits(edits, true);
+    int numEdits = loadFSEdits(edits, true, expectedStartingTxId);
-  /**
-   * Read the header of fsedit log
-   * @param in fsedit stream
-   * @return the edit log version number
-   * @throws IOException if error occurs
-   */
-  int readLogVersion(DataInputStream in) throws IOException {
-    int logVersion = 0;
-    // Read log file version. Could be missing.
-    in.mark(4);
-    // If edits log is greater than 2G, available method will return negative
-    // numbers, so we avoid having to call available
-    boolean available = true;
-    try {
-      logVersion = in.readByte();
-    } catch (EOFException e) {
-      available = false;
-    }
-    if (available) {
-      in.reset();
-      logVersion = in.readInt();
-      if (logVersion < FSConstants.LAYOUT_VERSION) // future version
-        throw new IOException(
-            "Unexpected version of the file system log file: "
-            + logVersion + ". Current version = "
-            + FSConstants.LAYOUT_VERSION + ".");
-    }
-    assert logVersion <= Storage.LAST_UPGRADABLE_LAYOUT_VERSION :
-      "Unsupported version " + logVersion;
-    return logVersion;
-  }
-  
-  int loadFSEdits(EditLogInputStream edits, boolean closeOnExit) throws IOException {
+  int loadFSEdits(EditLogInputStream edits, boolean closeOnExit,
+      long expectedStartingTxId)
+  throws IOException {
-    int logVersion = 0;
-      logVersion = readLogVersion(in);
-      Checksum checksum = null;
-      if (LayoutVersion.supports(Feature.EDITS_CHESKUM, logVersion)) {
-        checksum = FSEditLog.getChecksum();
-        in = new DataInputStream(new CheckedInputStream(bin, checksum));
-      }
-
-      numEdits = loadEditRecords(logVersion, in, checksum, false);
+      LogHeader header = LogHeader.read(in);
+      numEdits = loadEditRecords(
+          header.logVersion, in, header.checksum, false,
+          expectedStartingTxId);
-    if (logVersion != FSConstants.LAYOUT_VERSION) // other version
-      numEdits++; // save this image asap
+    
-      Checksum checksum, boolean closeOnExit) throws IOException {
+                      Checksum checksum, boolean closeOnExit,
+                      long expectedStartingTxId)
+      throws IOException {
+      long txId = expectedStartingTxId - 1;
+
+          if (LayoutVersion.supports(Feature.STORED_TXIDS, logVersion)) {
+            long thisTxId = op.txid;
+            if (thisTxId != txId + 1) {
+              throw new IOException("Expected transaction ID " +
+                  (txId + 1) + " but got " + thisTxId);
+            }
+            txId = thisTxId;
+          }
+
+          case OP_START_LOG_SEGMENT:
+          case OP_END_LOG_SEGMENT: {
+            // no data in here currently.
+            numOpOther++;
+            break;
+          }
+   * Return the number of valid transactions in the file. If the file is
+   * truncated during the header, returns a value indicating that there are
+   * 0 valid transactions.
+   * @throws IOException if the file cannot be read due to an IO error (eg
+   *                     if the log does not exist)
+   */
+  static EditLogValidation validateEditLog(File f) throws IOException {
+    FileInputStream fis = new FileInputStream(f);
+    try {
+      PositionTrackingInputStream tracker = new PositionTrackingInputStream(
+          new BufferedInputStream(fis));
+      DataInputStream dis = new DataInputStream(tracker);
+      LogHeader header; 
+      try {
+        header = LogHeader.read(dis);
+      } catch (Throwable t) {
+        FSImage.LOG.debug("Unable to read header from " + f +
+            " -> no valid transactions in this file.");
+        return new EditLogValidation(0, 0);
+      }
+      
+      Reader reader = new FSEditLogOp.Reader(dis, header.logVersion, header.checksum);
+      long numValid = 0;
+      long lastPos = 0;
+      try {
+        while (true) {
+          lastPos = tracker.getPos();
+          if (reader.readOp() == null) {
+            break;
+          }
+          numValid++;
+        }
+      } catch (Throwable t) {
+        // Catch Throwable and not just IOE, since bad edits may generate
+        // NumberFormatExceptions, AssertionErrors, OutOfMemoryErrors, etc.
+        FSImage.LOG.debug("Caught exception after reading " + numValid +
+            " ops from " + f + " while determining its valid length.", t);
+      }
+      return new EditLogValidation(lastPos, numValid);
+    } finally {
+      fis.close();
+    }
+  }
+  
+  static class EditLogValidation {
+    long validLength;
+    long numTransactions;
+    
+    EditLogValidation(long validLength, long numTransactions) {
+      this.validLength = validLength;
+      this.numTransactions = numTransactions;
+    }
+  }
+
+  /**

MOV26 INS26 INS26 MOV31 UPD40 UPD40 INS40 INS40 INS55 INS44 INS44 INS8 INS44 INS83 INS43 INS42 INS44 INS8 INS83 INS42 INS23 INS23 INS31 INS39 INS42 INS39 INS42 MOV60 MOV60 MOV60 MOV54 MOV41 INS39 INS42 INS65 INS42 INS43 INS42 INS60 INS54 INS39 INS59 INS39 INS59 INS42 INS44 INS44 INS8 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 INS66 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS60 INS60 UPD42 MOV42 INS42 INS14 MOV60 INS60 MOV60 MOV54 INS60 INS60 INS60 INS54 INS41 INS21 INS7 INS7 INS42 UPD43 MOV43 INS59 INS39 INS59 INS43 INS42 INS43 MOV43 INS59 INS43 INS43 INS59 INS39 INS59 INS39 INS59 INS8 INS12 INS14 INS32 INS22 INS42 INS22 INS42 UPD42 UPD42 MOV42 INS32 INS42 INS27 INS42 INS42 INS42 INS14 INS42 INS14 INS42 UPD42 INS42 INS42 INS14 INS42 INS34 INS42 INS34 INS61 INS44 INS8 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS42 INS42 INS34 INS43 INS14 INS43 INS42 UPD43 UPD42 INS41 INS43 INS42 INS40 INS40 INS9 INS8 INS43 INS42 INS21 INS42 INS25 INS42 INS43 INS42 INS42 UPD42 UPD42 INS32 INS14 INS40 MOV21 INS25 INS21 INS42 INS32 INS32 INS8 INS49 INS49 INS8 INS10 INS42 UPD42 UPD42 INS42 INS40 INS42 INS27 INS43 INS34 INS34 INS27 INS8 INS37 INS40 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS60 INS25 INS21 INS42 INS42 INS21 INS10 INS45 INS42 INS45 INS42 UPD42 INS32 INS33 INS10 INS42 UPD45 MOV45 UPD42 MOV42 UPD45 MOV45 INS42 UPD45 MOV45 INS39 INS59 INS27 INS8 INS7 INS37 UPD42 UPD42 INS42 INS42 INS42 INS40 INS42 INS27 INS53 INS42 INS42 INS42 INS42 INS34 INS14 MOV43 INS27 INS45 INS36 INS45 INS42 INS27 INS42 INS34 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL33 DEL59 DEL60 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL37 DEL21 DEL25 DEL8 DEL10 DEL65 DEL42 DEL65 DEL65 DEL39 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL39 DEL9 DEL42 DEL9 DEL7 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL40 DEL27 DEL40 DEL27 DEL14 DEL53 DEL25 DEL8 DEL25 DEL42 DEL40 DEL27 DEL45 DEL42 DEL27 DEL6 DEL42 DEL41 DEL8