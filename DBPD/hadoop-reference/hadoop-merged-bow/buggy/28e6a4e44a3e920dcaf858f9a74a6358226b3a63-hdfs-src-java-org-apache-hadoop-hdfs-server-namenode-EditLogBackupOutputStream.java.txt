HDFS-1073. Redesign the NameNode's storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-import org.apache.hadoop.hdfs.server.protocol.NamenodeProtocol;
+import org.apache.hadoop.hdfs.server.protocol.JournalProtocol;
-  private NamenodeProtocol backupNode;          // RPC proxy to backup node
+  private JournalProtocol backupNode;        // RPC proxy to backup node
-        (NamenodeProtocol) RPC.getProxy(NamenodeProtocol.class,
-            NamenodeProtocol.versionID, bnAddress, new HdfsConfiguration());
+        RPC.getProxy(JournalProtocol.class,
+            JournalProtocol.versionID, bnAddress, new HdfsConfiguration());
-
+  
+  @Override
+  public void abort() throws IOException {
+    RPC.stopProxy(backupNode);
+    doubleBuf = null;
+  }
+
-    // XXX: this code won't work in trunk, but it's redone
-    // in HDFS-1073 where it's simpler.
+    assert out.getLength() == 0 : "Output buffer is not empty";
+    
+    int numReadyTxns = doubleBuf.countReadyTxns();
+    long firstTxToFlush = doubleBuf.getFirstReadyTxId();
+    
-    if (out.size() > 0) {
-      send(NamenodeProtocol.JA_JOURNAL);
+    if (out.getLength() > 0) {
+      assert numReadyTxns > 0;
+      
+      byte[] data = Arrays.copyOf(out.getData(), out.getLength());
+      out.reset();
+      assert out.getLength() == 0 : "Output buffer is not empty";
+
+      backupNode.journal(nnRegistration,
+          firstTxToFlush, numReadyTxns, data);
-  private void send(int ja) throws IOException {
-    try {
-      int length = out.getLength();
-      out.write(FSEditLogOpCodes.OP_INVALID.getOpCode());
-      backupNode.journal(nnRegistration, ja, length, out.getData());
-    } finally {
-      out.reset();
-    }
-  }
-
-  /**
-   * Verify that the backup node is alive.
-   */
-  boolean isAlive() {
-    try {
-      send(NamenodeProtocol.JA_IS_ALIVE);
-    } catch(IOException ei) {
-      Storage.LOG.info(bnRegistration.getRole() + " "
-                      + bnRegistration.getAddress() + " is not alive. ", ei);
-      return false;
-    }
-    return true;
+  void startLogSegment(long txId) throws IOException {
+    backupNode.startLogSegment(nnRegistration, txId);

INS26 MOV31 MOV31 INS40 UPD40 UPD43 INS78 UPD83 UPD42 MOV78 UPD83 UPD42 INS8 UPD39 INS42 INS44 MOV43 INS8 UPD42 INS42 INS21 MOV21 INS6 INS60 INS60 MOV21 INS25 INS39 UPD42 MOV42 MOV21 INS32 INS7 INS27 INS45 INS39 INS59 INS39 INS59 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 INS32 INS34 INS42 INS32 INS42 INS32 MOV32 INS34 INS6 MOV60 MOV21 INS6 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS5 INS27 INS45 INS32 INS42 INS34 INS39 INS85 INS42 INS32 INS32 INS34 UPD42 UPD42 INS42 MOV42 MOV42 MOV57 UPD40 MOV40 MOV42 MOV14 INS42 INS42 MOV32 INS32 MOV42 UPD42 MOV42 UPD43 INS42 INS42 UPD42 DEL42 DEL43 DEL32 DEL11 DEL42 DEL40 DEL32 DEL32 DEL34 DEL27 DEL8 DEL25 DEL39 DEL42 DEL44 DEL39 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL8 DEL54 DEL8 DEL66 DEL65 DEL29 DEL40 DEL42 DEL32 DEL45 DEL32 DEL45 DEL27 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL9 DEL41 DEL8