HADOOP-14274. Azure: Simplify Ranger-WASB policy model. Contributed by Sivaguru Sankaridurg

-  private void performAuthCheck(String path, String accessType,
-      String operation) throws WasbAuthorizationException, IOException {
+  /**
+   * @param requestingAccessForPath - The path to the ancestor/parent/subtree/file that needs to be
+   *                                checked before granting access to originalPath
+   * @param accessType - The type of access READ/WRITE being requested
+   * @param operation - A string describing the operation being performed ("delete", "create" etc.).
+   * @param originalPath - The originalPath that was being accessed
+   */
+  private void performAuthCheck(String requestingAccessForPath, WasbAuthorizationOperations accessType,
+      String operation, String originalPath) throws WasbAuthorizationException, IOException {
-        !this.authorizer.authorize(path, accessType)) {
+        !this.authorizer.authorize(requestingAccessForPath, accessType.toString())) {
-          + " operation for Path : " + path + " not allowed");
+          + " operation for Path : " + originalPath + " not allowed");
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.WRITE.toString(), "append");
+    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.WRITE, "append", absolutePath.toString());
+    Path ancestor = getAncestor(absolutePath);
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.WRITE.toString(), "create");
+    performAuthCheck(ancestor.toString(), WasbAuthorizationOperations.WRITE, "create", absolutePath.toString());
+      else {
+        performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.WRITE, "create", absolutePath.toString());
+      }
-   * skipParentFolderLastModifidedTimeUpdate
+   * skipParentFolderLastModifiedTimeUpdate
-   * @param skipParentFolderLastModifidedTimeUpdate If true, don't update the folder last
+   * @param skipParentFolderLastModifiedTimeUpdate If true, don't update the folder last
-      boolean skipParentFolderLastModifidedTimeUpdate) throws IOException {
+      boolean skipParentFolderLastModifiedTimeUpdate) throws IOException {
+    Path parentPath = absolutePath.getParent();
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.EXECUTE.toString(), "delete");
+    performAuthCheck(parentPath.toString(), WasbAuthorizationOperations.WRITE, "delete", absolutePath.toString());
-      Path parentPath = absolutePath.getParent();
+
-          if (!skipParentFolderLastModifidedTimeUpdate) {
+          if (!skipParentFolderLastModifiedTimeUpdate) {
-      Path parentPath = absolutePath.getParent();
-      if (!recursive && contents.length > 0) {
+      if (contents.length > 0) {
+        if (!recursive) {
+        }
+        else {
+          // Check write-permissions on sub-tree including current folder
+          // NOTE: Ideally the subtree needs read-write-execute access check.
+          // But we will simplify it to write-access check.
+          if (metaFile.isDir()) { // the absolute-path
+            performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.WRITE, "delete",
+                absolutePath.toString());
+          }
+          for (FileMetadata meta : contents) {
+            if (meta.isDir()) {
+              Path subTreeDir = keyToPath(meta.getKey());
+              performAuthCheck(subTreeDir.toString(), WasbAuthorizationOperations.WRITE, "delete",
+                  absolutePath.toString());
+            }
+          }
+        }
-        if (!skipParentFolderLastModifidedTimeUpdate) {
+        if (!skipParentFolderLastModifiedTimeUpdate) {
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.EXECUTE.toString(), "getFileStatus");
+    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, "getFileStatus",
+        absolutePath.toString());
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.EXECUTE.toString(), "list");
+    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, "liststatus", absolutePath.toString());
+  private Path getAncestor(Path f) throws IOException {
+
+    for (Path current = f.getParent(), parent = current.getParent();
+         parent != null; // Stop when you get to the root
+         current = parent, parent = current.getParent()) {
+
+      String currentKey = pathToKey(current);
+      FileMetadata currentMetadata = store.retrieveMetadata(currentKey);
+      if (currentMetadata != null) {
+        Path ancestor = keyToPath(currentMetadata.getKey());
+        LOG.debug("Found ancestor {}, for path: {}", ancestor.toString(), f.toString());
+        return ancestor;
+      }
+    }
+
+    return new Path("/");
+  }
+
+    Path ancestor = getAncestor(absolutePath);
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.EXECUTE.toString(), "mkdirs");
+    performAuthCheck(ancestor.toString(), WasbAuthorizationOperations.WRITE, "mkdirs", absolutePath.toString());
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.READ.toString(), "read");
+    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.READ, "read", absolutePath.toString());
-    Path absolutePath = makeAbsolute(src);
+    Path absoluteSrcPath = makeAbsolute(src);
+    Path srcParentFolder = absoluteSrcPath.getParent();
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.EXECUTE.toString(), "rename");
+    if (srcParentFolder == null) {
+      // Cannot rename root of file system
+      return false;
+    }
-    String srcKey = pathToKey(absolutePath);
+    performAuthCheck(srcParentFolder.toString(), WasbAuthorizationOperations.WRITE, "rename",
+        absoluteSrcPath.toString());
+
+    String srcKey = pathToKey(absoluteSrcPath);
-    Path absoluteDst = makeAbsolute(dst);
-    String dstKey = pathToKey(absoluteDst);
+    Path absoluteDstPath = makeAbsolute(dst);
+    Path dstParentFolder = absoluteDstPath.getParent();
+
+    performAuthCheck(dstParentFolder.toString(), WasbAuthorizationOperations.WRITE, "rename",
+        absoluteDstPath.toString());
+
+    String dstKey = pathToKey(absoluteDstPath);
-      // A BlobNotFound storage exception in only thrown from retrieveMetdata API when
+      // A BlobNotFound storage exception in only thrown from retrieveMetadata API when
-              + "Swallowin the exception to handle race condition gracefully", dstKey);
+              + "Swallowing the exception to handle race condition gracefully", dstKey);
-        parentOfDestMetadata = store.retrieveMetadata(pathToKey(absoluteDst.getParent()));
+        parentOfDestMetadata = store.retrieveMetadata(pathToKey(absoluteDstPath.getParent()));
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.EXECUTE.toString(), "setPermission");
-
-    performAuthCheck(absolutePath.toString(),
-        WasbAuthorizationOperations.EXECUTE.toString(), "setOwner");
-

MOV44 INS31 INS29 INS44 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS65 INS65 INS65 UPD42 INS43 INS42 UPD42 INS60 UPD42 MOV60 INS42 INS43 INS42 INS42 INS24 INS41 INS60 INS60 INS25 INS60 INS21 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS59 UPD66 UPD42 INS42 INS58 INS27 INS7 INS7 INS8 INS14 INS43 INS59 INS43 INS59 INS27 INS8 MOV43 INS43 INS59 INS32 MOV43 MOV40 INS45 INS32 INS42 INS42 INS32 INS40 INS32 INS40 INS32 INS25 UPD40 MOV40 INS45 MOV32 UPD40 MOV40 INS45 MOV32 INS43 INS59 INS59 INS42 INS33 INS42 INS42 INS42 INS32 INS60 INS60 INS25 INS43 INS45 INS42 INS42 INS32 INS40 INS32 MOV40 MOV32 UPD42 INS42 INS42 INS32 INS42 INS33 INS41 UPD40 MOV40 INS45 INS32 UPD42 INS42 INS42 INS32 INS42 INS32 INS40 INS45 INS32 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS8 INS42 INS42 INS42 MOV27 INS8 MOV42 MOV42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 INS42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS41 MOV42 INS42 UPD42 INS32 MOV38 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 MOV32 INS40 INS45 INS32 INS25 INS70 UPD42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS32 INS8 INS44 INS42 INS8 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS21 INS43 INS42 MOV25 INS42 INS42 INS32 INS42 INS32 INS8 INS42 MOV32 INS40 INS45 INS32 INS42 INS42 INS60 INS21 UPD45 UPD42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS32 INS40 INS45 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL45 DEL40 DEL40 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL32 DEL45 DEL32 DEL45 DEL40 DEL42 DEL32 DEL32 DEL45 DEL42 DEL40 DEL42 DEL32 DEL45 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL45 DEL32 DEL21