HADOOP-14394. Provide Builder pattern for DistributedFileSystem.create. (lei)

-import org.apache.commons.lang.StringUtils;
+   * Similar to {@link #create(Path, FsPermission, EnumSet, int, short, long,
+   * Progressable, ChecksumOpt, InetSocketAddress[], String)}, it provides a
+   * HDFS-specific version of {@link #createNonRecursive(Path, FsPermission,
+   * EnumSet, int, short, long, Progressable)} with a few additions.
+   *
+   * @see #create(Path, FsPermission, EnumSet, int, short, long, Progressable,
+   * ChecksumOpt, InetSocketAddress[], String) for the descriptions of
+   * additional parameters, i.e., favoredNodes and ecPolicyName.
+   */
+  private HdfsDataOutputStream createNonRecursive(final Path f,
+      final FsPermission permission, final EnumSet<CreateFlag> flag,
+      final int bufferSize, final short replication, final long blockSize,
+      final Progressable progress, final ChecksumOpt checksumOpt,
+      final InetSocketAddress[] favoredNodes, final String ecPolicyName)
+      throws IOException {
+    statistics.incrementWriteOps(1);
+    storageStatistics.incrementOpCounter(OpType.CREATE);
+    Path absF = fixRelativePart(f);
+    return new FileSystemLinkResolver<HdfsDataOutputStream>() {
+      @Override
+      public HdfsDataOutputStream doCall(final Path p) throws IOException {
+        final DFSOutputStream out = dfs.create(getPathName(f), permission,
+            flag, false, replication, blockSize, progress, bufferSize,
+            checksumOpt, favoredNodes, ecPolicyName);
+        return dfs.createWrappedOutputStream(out, statistics);
+      }
+      @Override
+      public HdfsDataOutputStream next(final FileSystem fs, final Path p)
+          throws IOException {
+        if (fs instanceof DistributedFileSystem) {
+          DistributedFileSystem myDfs = (DistributedFileSystem)fs;
+          return myDfs.createNonRecursive(p, permission, flag, bufferSize,
+              replication, blockSize, progress, checksumOpt, favoredNodes,
+              ecPolicyName);
+        }
+        throw new UnsupportedOperationException("Cannot create with" +
+            " favoredNodes through a symlink to a non-DistributedFileSystem: "
+            + f + " -> " + p);
+      }
+    }.resolve(this, absF);
+  }
+
+  /**
-   * Extends FSDataOutputStreamBuilder to support special requirements
-   * of DistributedFileSystem.
+   * HdfsDataOutputStreamBuilder provides the HDFS-specific capabilities to
+   * write file on HDFS.
-  public static class HdfsDataOutputStreamBuilder
-      extends FSDataOutputStreamBuilder {
+  public static final class HdfsDataOutputStreamBuilder
+      extends FSDataOutputStreamBuilder<
+      HdfsDataOutputStream, HdfsDataOutputStreamBuilder> {
-    private boolean shouldReplicate  = false;
-    public HdfsDataOutputStreamBuilder(DistributedFileSystem dfs, Path path) {
+    /**
+     * Construct a HdfsDataOutputStream builder for a file.
+     * @param dfs the {@link DistributedFileSystem} instance.
+     * @param path the path of the file to create / append.
+     */
+    private HdfsDataOutputStreamBuilder(DistributedFileSystem dfs, Path path) {
-    protected InetSocketAddress[] getFavoredNodes() {
+    @Override
+    protected HdfsDataOutputStreamBuilder getThisBuilder() {
+      return this;
+    }
+
+    private InetSocketAddress[] getFavoredNodes() {
-    public HdfsDataOutputStreamBuilder setFavoredNodes(
+    /**
+     * Set favored DataNodes.
+     * @param nodes the addresses of the favored DataNodes.
+     */
+    public HdfsDataOutputStreamBuilder favoredNodes(
-    protected String getEcPolicyName() {
+    /**
+     * Force closed blocks to disk.
+     *
+     * @see CreateFlag for the details.
+     */
+    public HdfsDataOutputStreamBuilder syncBlock() {
+      getFlags().add(CreateFlag.SYNC_BLOCK);
+      return this;
+    }
+
+    /**
+     * Create the block on transient storage if possible.
+     *
+     * @see CreateFlag for the details.
+     */
+    public HdfsDataOutputStreamBuilder lazyPersist() {
+      getFlags().add(CreateFlag.LAZY_PERSIST);
+      return this;
+    }
+
+    /**
+     * Append data to a new block instead of the end of the last partial block.
+     *
+     * @see CreateFlag for the details.
+     */
+    public HdfsDataOutputStreamBuilder newBlock() {
+      getFlags().add(CreateFlag.NEW_BLOCK);
+      return this;
+    }
+
+    /**
+     * Advise that a block replica NOT be written to the local DataNode.
+     *
+     * @see CreateFlag for the details.
+     */
+    public HdfsDataOutputStreamBuilder noLocalWrite() {
+      getFlags().add(CreateFlag.NO_LOCAL_WRITE);
+      return this;
+    }
+
+    @VisibleForTesting
+    String getEcPolicyName() {
-     *
-    public HdfsDataOutputStreamBuilder setEcPolicyName(
+    public HdfsDataOutputStreamBuilder ecPolicyName(
-    public boolean shouldReplicate() {
-      return shouldReplicate;
+    @VisibleForTesting
+    boolean shouldReplicate() {
+      return getFlags().contains(CreateFlag.SHOULD_REPLICATE);
-      shouldReplicate  = true;
+      getFlags().add(CreateFlag.SHOULD_REPLICATE);
+    @VisibleForTesting
+    @Override
+    protected EnumSet<CreateFlag> getFlags() {
+      return super.getFlags();
+    }
+
+    /**
+     * Build HdfsDataOutputStream to write.
+     *
+     * @return a fully-initialized OutputStream.
+     * @throws IOException on I/O errors.
+     */
-      Preconditions.checkState(
-          !(shouldReplicate() && (!StringUtils.isEmpty(getEcPolicyName()))),
-          "shouldReplicate and ecPolicyName are " +
-              "exclusive parameters. Set both is not allowed!");
-
-      EnumSet<CreateFlag> createFlags = getFlags();
-      if (shouldReplicate()) {
-        createFlags.add(CreateFlag.SHOULD_REPLICATE);
+      if (isRecursive()) {
+        return dfs.create(getPath(), getPermission(), getFlags(),
+            getBufferSize(), getReplication(), getBlockSize(),
+            getProgress(), getChecksumOpt(), getFavoredNodes(),
+            getEcPolicyName());
+      } else {
+        return dfs.createNonRecursive(getPath(), getPermission(), getFlags(),
+            getBufferSize(), getReplication(), getBlockSize(), getProgress(),
+            getChecksumOpt(), getFavoredNodes(), getEcPolicyName());
-      return dfs.create(getPath(), getPermission(), createFlags,
-          getBufferSize(), getReplication(), getBlockSize(),
-          getProgress(), getChecksumOpt(), getFavoredNodes(),
-          getEcPolicyName());
+  /**
+   * Create a HdfsDataOutputStreamBuilder to create a file on DFS.
+   * Similar to {@link #create(Path)}, file is overwritten by default.
+   *
+   * @param path the path of the file to create.
+   * @return A HdfsDataOutputStreamBuilder for creating a file.
+   */
-  public HdfsDataOutputStreamBuilder newFSDataOutputStreamBuilder(Path path) {
-    return new HdfsDataOutputStreamBuilder(this, path);
+  public HdfsDataOutputStreamBuilder createFile(Path path) {
+    return new HdfsDataOutputStreamBuilder(this, path).create().overwrite(true);

INS31 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS74 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 UPD42 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 MOV74 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS5 INS42 INS83 INS43 INS42 INS42 INS21 INS21 INS60 INS41 MOV43 INS43 INS43 INS29 UPD83 MOV78 INS83 INS43 INS42 INS8 UPD83 INS29 UPD42 INS29 INS83 INS43 INS42 INS8 INS29 MOV83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS78 UPD42 INS78 MOV39 MOV42 MOV8 INS78 INS78 INS83 INS74 INS42 INS8 INS29 INS78 INS43 INS8 INS65 INS65 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS68 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS32 INS32 INS43 INS59 INS32 UPD66 UPD66 INS42 INS42 INS65 INS65 INS65 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS21 MOV41 INS65 INS65 INS42 INS21 INS41 INS65 INS65 INS42 INS21 INS41 INS65 INS65 INS42 INS21 INS41 INS42 INS42 INS41 INS42 INS42 INS43 INS43 INS41 INS65 INS65 INS65 INS42 INS42 INS25 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS32 INS68 INS68 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS42 INS42 INS34 INS42 INS42 INS40 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS52 INS66 INS42 INS66 INS66 INS42 INS66 INS32 INS66 INS42 INS66 INS32 INS52 INS66 INS42 INS66 INS32 INS52 INS66 INS42 INS66 INS32 INS52 INS32 INS32 INS52 INS42 INS42 INS48 INS66 INS66 INS42 INS66 INS32 MOV8 INS8 INS68 INS32 INS42 INS9 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS43 INS43 INS43 INS39 INS39 INS39 INS43 INS43 INS5 INS43 INS42 INS42 INS74 INS1 INS42 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 INS40 INS42 INS42 INS41 INS42 INS69 MOV14 INS42 INS43 INS43 INS43 INS39 INS39 INS39 INS43 INS43 INS5 INS43 INS43 INS43 INS43 INS39 INS39 INS39 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS43 INS43 INS31 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS78 INS83 MOV43 INS42 INS44 INS44 INS43 INS8 MOV32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV32 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS42 INS60 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS42 INS42 INS62 INS8 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS41 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS27 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS42 INS42 DEL40 DEL26 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL42 DEL31 DEL42 DEL9 DEL7 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL36 DEL27 DEL36 DEL38 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42