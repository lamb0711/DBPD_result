HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.PrivilegedExceptionAction;
+import javax.security.sasl.SaslException;
+import javax.security.sasl.SaslServer;
+import org.apache.hadoop.ipc.Server.Connection;
+import org.apache.hadoop.security.authentication.util.KerberosName;
-  public static final int SWITCH_TO_SIMPLE_AUTH = -88;
-
+
+  @InterfaceAudience.Private
+  @InterfaceStability.Unstable
+  public AuthMethod authMethod;
+  public String mechanism;
+  public String protocol;
+  public String serverId;
+  @InterfaceAudience.Private
+  @InterfaceStability.Unstable
+  public SaslRpcServer(AuthMethod authMethod) throws IOException {
+    this.authMethod = authMethod;
+    mechanism = authMethod.getMechanismName();    
+    switch (authMethod) {
+      case SIMPLE: {
+        return; // no sasl for simple
+      }
+      case TOKEN: {
+        protocol = "";
+        serverId = SaslRpcServer.SASL_DEFAULT_REALM;
+        break;
+      }
+      case KERBEROS: {
+        String fullName = UserGroupInformation.getCurrentUser().getUserName();
+        if (LOG.isDebugEnabled())
+          LOG.debug("Kerberos principal name is " + fullName);
+        KerberosName krbName = new KerberosName(fullName);
+        serverId = krbName.getHostName();
+        if (serverId == null) {
+          serverId = "";
+        }
+        protocol = krbName.getServiceName();
+        break;
+      }
+      default:
+        // we should never be able to get here
+        throw new AccessControlException(
+            "Server does not support SASL " + authMethod);
+    }
+  }
+  
+  @InterfaceAudience.Private
+  @InterfaceStability.Unstable
+  public SaslServer create(Connection connection,
+                           SecretManager<TokenIdentifier> secretManager
+      ) throws IOException, InterruptedException {
+    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+    final CallbackHandler callback;
+    switch (authMethod) {
+      case TOKEN: {
+        secretManager.checkAvailableForRead();
+        callback = new SaslDigestCallbackHandler(secretManager, connection);
+        break;
+      }
+      case KERBEROS: {
+        if (serverId.isEmpty()) {
+          throw new AccessControlException(
+              "Kerberos principal name does NOT have the expected "
+                  + "hostname part: " + ugi.getUserName());
+        }
+        callback = new SaslGssCallbackHandler();
+        break;
+      }
+      default:
+        // we should never be able to get here
+        throw new AccessControlException(
+            "Server does not support SASL " + authMethod);
+    }
+    
+    SaslServer saslServer = ugi.doAs(
+        new PrivilegedExceptionAction<SaslServer>() {
+          @Override
+          public SaslServer run() throws SaslException  {
+            return Sasl.createSaslServer(mechanism, protocol, serverId,
+                SaslRpcServer.SASL_PROPS, callback);
+          }
+        });
+    if (saslServer == null) {
+      throw new AccessControlException(
+          "Unable to find SASL server implementation for " + mechanism);
+    }
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Created SASL server with mechanism = " + mechanism);
+    }
+    return saslServer;
+  }
+
-  @InterfaceStability.Evolving
-  public enum SaslStatus {
-    SUCCESS (0),
-    ERROR (1);
-    
-    public final int state;
-    private SaslStatus(int state) {
-      this.state = state;
-    }
-  }
-  
+    @Deprecated
+    TOKEN((byte) 82, "DIGEST-MD5"),

INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS78 INS78 INS43 INS83 INS43 INS59 INS83 INS43 INS59 MOV83 INS43 MOV59 INS78 INS78 UPD83 MOV83 UPD42 MOV42 MOV44 INS43 MOV8 INS78 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS72 INS40 INS40 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS40 INS40 INS43 INS42 INS42 INS21 INS50 INS40 INS40 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS60 INS60 INS50 INS60 INS25 INS25 INS41 INS78 INS42 INS11 INS45 UPD42 INS42 INS7 INS42 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS53 INS42 INS43 INS43 INS43 INS59 INS83 INS43 INS59 INS42 INS49 INS8 INS49 INS8 INS49 INS53 INS43 INS59 INS27 INS8 INS32 INS8 INS42 INS42 INS39 INS34 UPD42 INS42 INS32 INS42 INS41 INS42 INS21 INS21 INS10 INS42 INS60 INS25 INS60 INS21 INS25 INS21 INS10 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS10 INS42 INS25 INS21 INS10 INS14 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS21 UPD42 INS42 INS42 INS7 INS7 INS43 INS59 INS32 INS21 INS43 INS59 INS7 INS27 INS8 INS7 INS43 INS27 INS42 INS42 INS32 INS7 INS32 INS8 INS7 INS43 INS27 INS42 INS42 INS14 INS14 INS32 INS42 INS45 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS53 INS42 INS14 INS42 INS45 INS42 INS74 INS1 INS43 INS27 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS7 INS42 INS42 INS43 INS42 INS42 INS14 INS43 INS43 INS43 INS31 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS43 INS27 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS45 INS45 INS32 INS42 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 DEL83 DEL83 DEL39 DEL34 DEL38 DEL39 DEL42 DEL40 DEL78 DEL83 DEL42 DEL42 DEL34 DEL72 DEL42 DEL34 DEL72 DEL83 DEL39 DEL23 DEL31 DEL71