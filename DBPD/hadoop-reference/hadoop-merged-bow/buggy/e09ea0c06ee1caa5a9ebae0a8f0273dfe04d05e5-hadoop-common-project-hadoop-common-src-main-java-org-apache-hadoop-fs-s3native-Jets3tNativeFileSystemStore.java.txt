HADOOP-9361: Strictly define FileSystem APIs

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607596 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.EOFException;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.fs.FSExceptionMessages;
+import org.apache.hadoop.io.IOUtils;
+import org.apache.hadoop.security.AccessControlException;
+import org.jets3t.service.impl.rest.HttpException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  public static final Log LOG =
-      LogFactory.getLog(Jets3tNativeFileSystemStore.class);
+  public static final Logger LOG =
+      LoggerFactory.getLogger(Jets3tNativeFileSystemStore.class);
-      handleS3ServiceException(e);
+      handleException(e);
-    } catch (S3ServiceException e) {
-      handleS3ServiceException(e);
+    } catch (ServiceException e) {
+      handleException(e, key);
-      if (in != null) {
-        try {
-          in.close();
-        } catch (IOException e) {
-          // ignore
-        }
-      }
+      IOUtils.closeStream(in);
-    } catch (ServiceException e) {
-      handleServiceException(e);
-      throw new S3Exception(e);
+      handleException(e, key);
-    } catch (S3ServiceException e) {
-      handleS3ServiceException(e);
+    } catch (ServiceException e) {
+      handleException(e, key);
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("Getting metadata for key: " + key + " from bucket:" + bucket.getName());
-      }
+      LOG.debug("Getting metadata for key: {} from bucket: {}",
+          key, bucket.getName());
-      // Following is brittle. Is there a better way?
-      if ("NoSuchKey".equals(e.getErrorCode())) {
-        return null; //return null if key not found
+      try {
+        // process
+        handleException(e, key);
+        return null;
+      } catch (FileNotFoundException fnfe) {
+        // and downgrade missing files
+        return null;
-      handleServiceException(e);
-      return null; //never returned - keep compiler happy
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("Getting key: " + key + " from bucket:" + bucket.getName());
-      }
+      LOG.debug("Getting key: {} from bucket: {}",
+          key, bucket.getName());
-      handleServiceException(key, e);
+      handleException(e, key);
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("Getting key: " + key + " from bucket:" + bucket.getName() + " with byteRangeStart: " + byteRangeStart);
-      }
+      LOG.debug("Getting key: {} from bucket: {} with byteRangeStart: {}",
+          key, bucket.getName(), byteRangeStart);
-      handleServiceException(key, e);
-      return null; //return null if key not found
+      handleException(e, key);
+      return null;
-   *
-   * @return
-   * This method returns null if the list could not be populated
-   * due to S3 giving ServiceException
-   * @throws IOException
+   * list objects
+   * @param prefix prefix
+   * @param delimiter delimiter
+   * @param maxListingLength max no. of entries
+   * @param priorLastKey last key in any previous search
+   * @return a list of matches
+   * @throws IOException on any reported failure
-      if (prefix.length() > 0 && !prefix.endsWith(PATH_DELIMITER)) {
+      if (!prefix.isEmpty() && !prefix.endsWith(PATH_DELIMITER)) {
-    } catch (S3ServiceException e) {
-      handleS3ServiceException(e);
-      return null; //never returned - keep compiler happy
-      handleServiceException(e);
-      return null; //return null if list could not be populated
+      handleException(e, prefix);
+      return null; // never returned - keep compiler happy
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("Deleting key:" + key + "from bucket" + bucket.getName());
-      }
+      LOG.debug("Deleting key: {} from bucket: {}",
+          key, bucket.getName());
-      handleServiceException(key, e);
+      handleException(e, key);
-      handleServiceException(e);
+      handleException(e, srcKey);
-      handleServiceException(srcKey, e);
+      handleException(e, srcKey);
-      handleServiceException(e);
+      handleException(e, srcObject.getKey());
+    String key = "";
-      S3Object[] objects = s3Service.listObjects(bucket.getName(), prefix, null);
+      S3Object[] objects =
+          s3Service.listObjects(bucket.getName(), prefix, null);
-        s3Service.deleteObject(bucket, object.getKey());
+        key = object.getKey();
+        s3Service.deleteObject(bucket, key);
-      handleS3ServiceException(e);
+      handleException(e, key);
-      handleS3ServiceException(e);
+      handleException(e);
-  private void handleServiceException(String key, ServiceException e) throws IOException {
-    if ("NoSuchKey".equals(e.getErrorCode())) {
-      throw new FileNotFoundException("Key '" + key + "' does not exist in S3");
+  /**
+   * Handle any service exception by translating it into an IOException
+   * @param e exception
+   * @throws IOException exception -always
+   */
+  private void handleException(Exception e) throws IOException {
+    throw processException(e, e, "");
+  }
+  /**
+   * Handle any service exception by translating it into an IOException
+   * @param e exception
+   * @param key key sought from object store
+
+   * @throws IOException exception -always
+   */
+  private void handleException(Exception e, String key) throws IOException {
+    throw processException(e, e, key);
+  }
+
+  /**
+   * Handle any service exception by translating it into an IOException
+   * @param thrown exception
+   * @param original original exception -thrown if no other translation could
+   * be made
+   * @param key key sought from object store or "" for undefined
+   * @return an exception to throw. If isProcessingCause==true this may be null.
+   */
+  private IOException processException(Throwable thrown, Throwable original,
+      String key) {
+    IOException result;
+    if (thrown.getCause() != null) {
+      // recurse down
+      result = processException(thrown.getCause(), original, key);
+    } else if (thrown instanceof HttpException) {
+      // nested HttpException - examine error code and react
+      HttpException httpException = (HttpException) thrown;
+      String responseMessage = httpException.getResponseMessage();
+      int responseCode = httpException.getResponseCode();
+      String bucketName = "s3n://" + bucket.getName();
+      String text = String.format("%s : %03d : %s",
+          bucketName,
+          responseCode,
+          responseMessage);
+      String filename = !key.isEmpty() ? (bucketName + "/" + key) : text;
+      IOException ioe;
+      switch (responseCode) {
+        case 404:
+          result = new FileNotFoundException(filename);
+          break;
+        case 416: // invalid range
+          result = new EOFException(FSExceptionMessages.CANNOT_SEEK_PAST_EOF
+                                    +": " + filename);
+          break;
+        case 403: //forbidden
+          result = new AccessControlException("Permission denied"
+                                    +": " + filename);
+          break;
+        default:
+          result = new IOException(text);
+      }
+      result.initCause(thrown);
+    } else if (thrown instanceof S3ServiceException) {
+      S3ServiceException se = (S3ServiceException) thrown;
+      LOG.debug(
+          "S3ServiceException: {}: {} : {}",
+          se.getS3ErrorCode(), se.getS3ErrorMessage(), se, se);
+      if ("InvalidRange".equals(se.getS3ErrorCode())) {
+        result = new EOFException(FSExceptionMessages.CANNOT_SEEK_PAST_EOF);
+      } else {
+        result = new S3Exception(se);
+      }
+    } else if (thrown instanceof ServiceException) {
+      ServiceException se = (ServiceException) thrown;
+      LOG.debug("S3ServiceException: {}: {} : {}",
+          se.getErrorCode(), se.toString(), se, se);
+      result = new S3Exception(se);
+    } else if (thrown instanceof IOException) {
+      result = (IOException) thrown;
-      handleServiceException(e);
+      // here there is no exception derived yet.
+      // this means no inner cause, and no translation made yet.
+      // convert the original to an IOException -rather than just the
+      // exception at the base of the tree
+      result = new S3Exception(original);
-  }
-  private void handleS3ServiceException(S3ServiceException e) throws IOException {
-    if (e.getCause() instanceof IOException) {
-      throw (IOException) e.getCause();
-    }
-    else {
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("S3 Error code: " + e.getS3ErrorCode() + "; S3 Error message: " + e.getS3ErrorMessage());
-      }
-      throw new S3Exception(e);
-    }
-  }
-
-  private void handleServiceException(ServiceException e) throws IOException {
-    if (e.getCause() instanceof IOException) {
-      throw (IOException) e.getCause();
-    }
-    else {
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("Got ServiceException with Error code: " + e.getErrorCode() + ";and Error message: " + e.getErrorMessage());
-      }
-    }
+    return result;

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 UPD40 INS31 INS31 INS31 UPD43 INS29 MOV83 MOV39 UPD42 MOV42 MOV44 MOV43 INS8 INS29 MOV83 MOV39 UPD42 MOV42 MOV44 MOV44 MOV43 INS8 INS29 INS83 MOV43 INS42 INS44 INS44 INS44 INS8 UPD42 INS65 INS65 INS65 INS65 INS65 INS60 INS65 INS65 INS65 UPD43 INS53 INS65 INS65 INS65 INS65 UPD43 INS53 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS41 UPD42 UPD42 MOV8 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD66 INS66 INS43 INS59 INS66 INS42 INS66 INS42 INS66 UPD42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 MOV43 INS59 INS27 MOV8 INS25 INS42 MOV44 MOV44 MOV21 INS8 MOV21 MOV21 MOV21 MOV44 MOV44 INS42 INS42 INS45 UPD42 MOV42 MOV42 UPD42 MOV42 INS45 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS33 INS21 INS62 INS8 INS25 MOV43 MOV42 INS54 MOV43 MOV42 INS42 INS42 INS7 INS42 INS43 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS50 INS21 INS62 MOV8 INS25 UPD42 MOV42 UPD42 UPD42 INS42 INS45 INS42 MOV32 INS8 INS12 INS45 INS42 MOV32 INS45 INS42 MOV32 INS42 INS38 UPD42 MOV42 INS45 INS42 MOV32 INS21 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS32 INS42 INS43 INS60 INS25 INS62 INS8 INS25 UPD42 UPD42 INS42 UPD42 INS42 UPD42 INS42 MOV21 MOV41 INS44 MOV8 UPD42 INS42 UPD42 INS42 INS32 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS32 INS7 INS32 UPD42 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS34 INS7 INS34 INS7 INS34 INS7 INS7 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS42 INS43 INS60 MOV21 INS21 MOV62 INS8 INS8 MOV33 INS43 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS38 INS36 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS11 INS45 INS32 INS32 INS42 INS42 INS45 INS42 INS32 INS21 INS21 MOV42 INS43 INS59 INS7 INS42 INS21 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 MOV43 INS42 INS43 INS27 INS43 INS27 MOV43 INS42 INS43 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS7 INS7 INS42 INS42 INS11 INS45 INS32 INS32 INS42 INS42 INS42 MOV14 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS14 INS42 MOV14 INS43 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS11 INS42 INS14 INS43 INS40 UPD42 INS42 MOV43 INS42 INS43 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL25 DEL8 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL45 DEL42 DEL45 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL66 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL53 DEL45 DEL32 DEL45 DEL32 DEL27 DEL45 DEL32 DEL45 DEL32 DEL27 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL32 DEL62 DEL32 DEL25 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL11 DEL53 DEL8 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31