HADOOP-6599  Split existing RpcMetrics into RpcMetrics & RpcDetailedMetrics.
   (Suresh Srinivas via Sanjay Radia)



git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@917737 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ipc.metrics.RpcDetailedMetrics;
-  protected RpcMetrics  rpcMetrics;
+  protected RpcMetrics rpcMetrics;
+  protected RpcDetailedMetrics rpcDetailedMetrics;
-            // Discard the large buf and reset it back to
-            // smaller size to freeup heap
+            
+            // Discard the large buf and reset it back to smaller size 
+            // to free up heap
+    this.rpcDetailedMetrics = new RpcDetailedMetrics(serverName,
+                            Integer.toString(this.port));
+    if (this.rpcDetailedMetrics != null) {
+      this.rpcDetailedMetrics.shutdown();
+    }
-  private static int channelWrite(WritableByteChannel channel, 
-                                  ByteBuffer buffer) throws IOException {
+  private int channelWrite(WritableByteChannel channel, 
+                           ByteBuffer buffer) throws IOException {
-    return (buffer.remaining() <= NIO_BUFFER_LIMIT) ?
-           channel.write(buffer) : channelIO(null, channel, buffer);
+    int count =  (buffer.remaining() <= NIO_BUFFER_LIMIT) ?
+                 channel.write(buffer) : channelIO(null, channel, buffer);
+    if (count > 0) {
+      rpcMetrics.sentBytes.inc(count);
+    }
+    return count;
-  private static int channelRead(ReadableByteChannel channel, 
-                                 ByteBuffer buffer) throws IOException {
+  private int channelRead(ReadableByteChannel channel, 
+                          ByteBuffer buffer) throws IOException {
-    return (buffer.remaining() <= NIO_BUFFER_LIMIT) ?
-           channel.read(buffer) : channelIO(channel, null, buffer);
+    int count = (buffer.remaining() <= NIO_BUFFER_LIMIT) ?
+                channel.read(buffer) : channelIO(channel, null, buffer);
+    if (count > 0) {
+      rpcMetrics.receivedBytes.inc(count);
+    }
+    return count;

INS26 INS40 INS23 INS83 INS43 INS59 INS42 INS42 INS21 INS25 INS60 INS25 INS60 INS25 INS7 INS27 INS8 INS39 INS59 INS27 INS8 INS42 INS39 INS59 INS27 INS8 INS42 INS22 INS14 INS22 INS33 INS21 INS42 MOV16 INS42 INS34 INS21 INS42 MOV16 INS42 INS34 INS21 INS52 INS42 INS43 INS42 INS32 INS52 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS22 INS22 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS52 INS42 INS52 INS42 DEL83 DEL83