    HADOOP-7557 Make IPC header be extensible (sanjay radia)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295261 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos.IpcConnectionContextProto;
+import org.apache.hadoop.util.ProtoUtil;
-    private ConnectionHeader header;              // connection header
+    private IpcConnectionContextProto connectionContext;   // connection context
-      header = 
-        new ConnectionHeader(RPC.getProtocolName(protocol), ticket, authMethod);
+      connectionContext = ProtoUtil.makeIpcConnectionContext(
+          RPC.getProtocolName(protocol), ticket, authMethod);
-          writeRpcHeader(outStream);
+          writeConnectionHeader(outStream);
-              header = new ConnectionHeader(header.getProtocol(), header
-                  .getUgi(), authMethod);
+              // remake the connectionContext             
+              connectionContext = ProtoUtil.makeIpcConnectionContext(
+                  connectionContext.getProtocol(), 
+                  ProtoUtil.getUgi(connectionContext.getUserInfo()),
+                  authMethod);
-    /* Write the RPC header */
-    private void writeRpcHeader(OutputStream outStream) throws IOException {
+    /**
+     * Write the connection header - this is sent when connection is established
+     * +----------------------------------+
+     * |  "hrpc" 4 bytes                  |      
+     * +----------------------------------+
+     * |  Version (1 bytes)               |      
+     * +----------------------------------+
+     * |  Authmethod (1 byte)             |      
+     * +----------------------------------+
+     * |  IpcSerializationType (1 byte)   |      
+     * +----------------------------------+
+     */
+    private void writeConnectionHeader(OutputStream outStream)
+        throws IOException {
+      Server.IpcSerializationType.PROTOBUF.write(out);
-      header.write(buf);
+      connectionContext.writeTo(buf);
-    Class<?> protocol;
+    final Class<?> protocol;
-    private int rpcTimeout;
-    private String serverPrincipal;
-    private int maxIdleTime; //connections will be culled if it was idle for 
+    private final int rpcTimeout;
+    private final String serverPrincipal;
+    private final int maxIdleTime; //connections will be culled if it was idle for 
-    private int maxRetries; //the max. no. of retries for socket connections
-    private boolean tcpNoDelay; // if T then disable Nagle's Algorithm
-    private boolean doPing; //do we need to send ping message
-    private int pingInterval; // how often sends ping to the server in msecs
+    private final int maxRetries; //the max. no. of retries for socket connections
+    private final boolean tcpNoDelay; // if T then disable Nagle's Algorithm
+    private final boolean doPing; //do we need to send ping message
+    private final int pingInterval; // how often sends ping to the server in msecs

INS26 INS26 INS40 INS40 UPD43 INS29 UPD42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 UPD42 UPD42 INS65 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS32 UPD42 INS32 INS40 INS42 INS42 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS32 INS32 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL43 DEL32 DEL32 DEL42 DEL14