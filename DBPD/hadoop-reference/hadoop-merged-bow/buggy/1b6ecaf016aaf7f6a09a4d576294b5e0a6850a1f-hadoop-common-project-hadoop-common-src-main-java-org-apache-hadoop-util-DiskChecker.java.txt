HADOOP-13738. DiskChecker should perform some disk IO.

+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.commons.io.FileUtils;
+import org.apache.hadoop.io.IOUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+  public static final Logger LOG = LoggerFactory.getLogger(DiskChecker.class);
+
-      
+
+  // Provider that abstracts some FileOutputStream operations for
+  // testability.
+  private static AtomicReference<FileIoProvider> fileIoProvider =
+      new AtomicReference<>(new DefaultFileIoProvider());
+
+    doDiskIo(dir);
+    doDiskIo(localFS.pathToFile(dir));
+
+  // State related to running disk IO checks.
+  private static final String DISK_IO_FILE_PREFIX =
+      "DiskChecker.OK_TO_DELETE_.";
+
+  @VisibleForTesting
+  static final int DISK_IO_MAX_ITERATIONS = 3;
+
+  /**
+   * Performs some disk IO by writing to a new file in the given directory
+   * and sync'ing file contents to disk.
+   *
+   * This increases the likelihood of catching catastrophic disk/controller
+   * failures sooner.
+   *
+   * @param dir directory to be checked.
+   * @throws DiskErrorException if we hit an error while trying to perform
+   *         disk IO against the file.
+   */
+  private static void doDiskIo(File dir) throws DiskErrorException {
+    try {
+      IOException ioe = null;
+
+      for (int i = 0; i < DISK_IO_MAX_ITERATIONS; ++i) {
+        final File file = getFileNameForDiskIoCheck(dir, i+1);
+        try {
+          diskIoCheckWithoutNativeIo(file);
+          return;
+        } catch (IOException e) {
+          // Let's retry a few times before we really give up and
+          // declare the disk as bad.
+          ioe = e;
+        }
+      }
+      throw ioe;  // Just rethrow the last exception to signal failure.
+    } catch(IOException e) {
+      throw new DiskErrorException("Error checking directory " + dir, e);
+    }
+  }
+
+  /**
+   * Try to perform some disk IO by writing to the given file
+   * without using Native IO.
+   *
+   * @param file
+   * @throws IOException if there was a non-retriable error.
+   */
+  private static void diskIoCheckWithoutNativeIo(File file)
+      throws IOException {
+    FileOutputStream fos = null;
+
+    try {
+      final FileIoProvider provider = fileIoProvider.get();
+      fos = provider.get(file);
+      provider.write(fos, new byte[1]);
+      fos.getFD().sync();
+      fos.close();
+      fos = null;
+      if (!file.delete() && file.exists()) {
+        throw new IOException("Failed to delete " + file);
+      }
+      file = null;
+    } finally {
+      IOUtils.cleanup(null, fos);
+      FileUtils.deleteQuietly(file);
+    }
+  }
+
+  /**
+   * Generate a path name for a test file under the given directory.
+   *
+   * @return file object.
+   */
+  @VisibleForTesting
+  static File getFileNameForDiskIoCheck(File dir, int iterationCount) {
+    if (iterationCount < DISK_IO_MAX_ITERATIONS) {
+      // Use file names of the format prefix.001 by default.
+      return new File(dir,
+          DISK_IO_FILE_PREFIX + String.format("%03d", iterationCount));
+    } else {
+      // If the first few checks then fail, try using a randomly generated
+      // file name.
+      return new File(dir, DISK_IO_FILE_PREFIX + UUID.randomUUID());
+    }
+  }
+
+  /**
+   * An interface that abstracts operations on {@link FileOutputStream}
+   * objects for testability.
+   */
+  interface FileIoProvider {
+    FileOutputStream get(File f) throws FileNotFoundException;
+    void write(FileOutputStream fos, byte[] data) throws IOException;
+  }
+
+  /**
+   * The default implementation of {@link FileIoProvider}.
+   */
+  private static class DefaultFileIoProvider implements FileIoProvider {
+    /**
+     * See {@link FileOutputStream#FileOutputStream(File)}.
+     */
+    @Override
+    public FileOutputStream get(File f) throws FileNotFoundException {
+      return new FileOutputStream(f);
+    }
+
+    /**
+     * See {@link FileOutputStream#write(byte[])}.
+     */
+    @Override
+    public void write(FileOutputStream fos, byte[] data) throws IOException {
+      fos.write(data);
+    }
+  }
+
+  /**
+   * Replace the {@link FileIoProvider} for tests.
+   * This method MUST NOT be used outside of unit tests.
+   *
+   * @param newFosProvider
+   * @return the old FileIoProvider.
+   */
+  @VisibleForTesting
+  static FileIoProvider replaceFileOutputStreamProvider(
+      FileIoProvider newFosProvider) {
+    return fileIoProvider.getAndSet(newFosProvider);
+  }
+
+  /**
+   * Retrieve the current {@link FileIoProvider}.
+   * This method MUST NOT be used outside of unit tests.
+   *
+   * @return the current FileIoProvider.
+   */
+  @VisibleForTesting
+  static FileIoProvider getFileOutputStreamProvider() {
+    return fileIoProvider.get();
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS55 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS42 INS31 INS31 INS29 INS83 INS83 INS42 INS43 INS31 INS31 INS29 INS78 INS83 INS43 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS21 INS21 INS42 INS42 INS45 INS42 INS42 INS34 INS65 INS65 INS65 INS43 INS42 INS42 INS54 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS54 INS65 INS65 INS42 INS42 INS43 INS42 INS39 INS42 INS25 INS65 INS43 INS42 INS44 INS43 INS39 INS42 INS44 INS44 INS43 INS65 INS42 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS41 INS65 INS65 INS42 INS42 INS41 INS42 INS42 INS57 INS42 INS42 INS74 INS14 INS32 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS66 INS66 INS42 INS42 INS66 INS42 INS43 INS59 INS8 INS8 INS66 INS66 INS42 INS27 INS8 INS8 INS66 INS65 INS66 INS42 INS43 INS42 INS42 INS43 INS42 INS5 INS42 INS42 INS66 INS65 INS66 INS65 INS42 INS42 INS43 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS5 INS42 INS42 INS21 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS32 INS66 INS65 INS66 INS66 INS66 INS32 INS43 INS43 INS43 INS42 INS42 INS42 INS32 INS60 INS24 INS53 INS44 INS8 INS42 INS42 INS33 INS60 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS21 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS39 INS85 INS42 INS66 INS65 INS66 INS42 INS14 INS66 INS65 INS66 INS42 INS39 INS85 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS58 INS27 INS38 INS8 INS42 INS43 INS42 INS53 INS83 INS43 INS59 INS7 INS32 INS32 INS32 INS7 INS27 INS8 INS7 INS32 INS32 INS14 INS14 INS68 INS43 INS42 INS68 INS42 INS42 INS42 INS42 INS42 INS33 INS39 INS59 INS42 INS42 INS42 INS60 INS54 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS3 INS32 INS42 INS42 INS42 INS42 INS33 INS38 INS32 INS53 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS43 INS42 INS27 INS43 INS42 INS27 INS42 INS42 INS69 INS42 INS42 INS42 INS69 INS42 INS34 INS83 INS43 INS59 INS8 INS12 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS34 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS5 INS42 INS42 INS32 INS21 INS41 INS44 INS8 INS42 INS45 INS42 INS39 INS85 INS42 INS42 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS27 INS32 INS43 INS42 INS21 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS42 INS7 INS42 INS42