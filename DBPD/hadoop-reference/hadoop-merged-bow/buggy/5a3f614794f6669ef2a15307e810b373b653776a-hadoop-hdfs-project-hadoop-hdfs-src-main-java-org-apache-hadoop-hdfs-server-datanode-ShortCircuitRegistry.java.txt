HDFS-6061. Allow dfs.datanode.shared.file.descriptor.path to contain multiple entries and fall back when needed (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574796 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATH;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATH_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATHS;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATHS_DEFAULT;
+import java.util.Collections;
+import com.google.common.base.Splitter;
+import com.google.common.collect.Iterables;
-      String loadingFailureReason =
-          SharedFileDescriptorFactory.getLoadingFailureReason();
-      if (loadingFailureReason != null) {
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Disabling ShortCircuitRegistry because " +
-                    loadingFailureReason);
-        }
-        return;
-      }
-      String shmPath = conf.get(DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATH,
-          DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATH_DEFAULT);
-      if (shmPath.isEmpty()) {
-        LOG.debug("Disabling ShortCircuitRegistry because shmPath was not set.");
-        return;
-      }
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Disabling ShortCircuitRegistry because " +
-                    "interruptCheckMs was set to " + interruptCheck);
-        }
-        return;
+        throw new IOException(
+            DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS +
+            " was set to " + interruptCheck);
-      shmFactory = 
-          new SharedFileDescriptorFactory("HadoopShortCircuitShm_", shmPath);
+      String shmPaths[] =
+          conf.getTrimmedStrings(DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATHS);
+      if (shmPaths.length == 0) {
+        shmPaths =
+            DFS_DATANODE_SHARED_FILE_DESCRIPTOR_PATHS_DEFAULT.split(",");
+      }
+      shmFactory = SharedFileDescriptorFactory.
+          create("HadoopShortCircuitShm_", shmPaths);
+      String dswLoadingFailure = DomainSocketWatcher.getLoadingFailureReason();
+      if (dswLoadingFailure != null) {
+        throw new IOException(dswLoadingFailure);
+      }
-                  interruptCheck + ", shmPath=" + shmPath);
+                  interruptCheck + ", shmPath=" + shmFactory.getPath());
+      }
+    } catch (IOException e) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Disabling ShortCircuitRegistry", e);

INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS8 INS12 MOV60 INS25 MOV60 INS25 MOV21 MOV60 MOV25 MOV21 MOV21 MOV25 INS44 INS8 MOV27 INS8 MOV43 UPD27 MOV27 INS8 INS7 MOV43 INS27 MOV32 INS43 INS42 MOV25 INS53 UPD42 INS85 INS40 INS34 INS21 INS42 INS32 UPD42 INS42 INS33 INS53 UPD42 MOV42 MOV32 INS14 UPD42 UPD42 INS42 INS7 UPD42 MOV42 UPD42 MOV42 INS45 INS42 UPD42 UPD42 INS14 INS43 INS27 INS42 INS32 INS43 INS42 INS42 INS42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 UPD45 INS42 UPD45 INS32 INS45 INS42 INS42 INS42 DEL42 DEL33 DEL45 DEL42 DEL27 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL41 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL8 DEL25 DEL41 DEL8 DEL25 DEL41 DEL8 DEL25 DEL42 DEL43 DEL45 DEL42 DEL14 DEL7 DEL21 DEL8