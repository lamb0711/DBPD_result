HADOOP-12475. Replace guava Cache with ConcurrentHashMap for caching Connection in ipc Client (Walter Su via sjlee)

-import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
-import com.google.common.cache.Cache;
-import com.google.common.cache.CacheBuilder;
-  private final Cache<ConnectionId, Connection> connections =
-      CacheBuilder.newBuilder().build();
+  private ConcurrentMap<ConnectionId, Connection> connections =
+      new ConcurrentHashMap<>();
-      connections.invalidate(remoteId);
+      // We have marked this connection as closed. Other thread could have
+      // already known it and replace this closedConnection with a new one.
+      // We should only remove this closedConnection.
+      connections.remove(remoteId, this);
-    for (Connection conn : connections.asMap().values()) {
+    for (Connection conn : connections.values()) {
-    while (connections.size() > 0) {
+    while (!connections.isEmpty()) {
-
-    return connections.asMap().keySet();
+    return connections.keySet();
-  private Connection getConnection(
-      final ConnectionId remoteId,
-      Call call, final int serviceClass, AtomicBoolean fallbackToSimpleAuth)
+  private Connection getConnection(ConnectionId remoteId,
+      Call call, int serviceClass, AtomicBoolean fallbackToSimpleAuth)
-    while(true) {
-      try {
-        connection = connections.get(remoteId, new Callable<Connection>() {
-          @Override
-          public Connection call() throws Exception {
-            return new Connection(remoteId, serviceClass);
-          }
-        });
-      } catch (ExecutionException e) {
-        Throwable cause = e.getCause();
-        // the underlying exception should normally be IOException
-        if (cause instanceof IOException) {
-          throw (IOException) cause;
-        } else {
-          throw new IOException(cause);
+    while (true) {
+      // These lines below can be shorten with computeIfAbsent in Java8
+      connection = connections.get(remoteId);
+      if (connection == null) {
+        connection = new Connection(remoteId, serviceClass);
+        Connection existing = connections.putIfAbsent(remoteId, connection);
+        if (existing != null) {
+          connection = existing;
+
-        connections.invalidate(remoteId);
+        // This connection is closed, should be removed. But other thread could
+        // have already known this closedConnection, and replace it with a new
+        // connection. So we should call conditional remove to make sure we only
+        // remove this closedConnection.
+        connections.remove(remoteId, connection);
-    
-    //we don't invoke the method below inside "synchronized (connections)"
-    //block above. The reason for that is if the server happens to be slow,
-    //it will take longer to establish a connection and that will slow the
-    //entire system down.
+
+    // If the server happens to be slow, the method below will take longer to
+    // establish a connection.

MOV26 UPD40 UPD40 UPD74 UPD43 INS14 UPD42 INS74 INS38 INS43 MOV42 INS32 MOV42 MOV21 INS25 INS42 UPD42 INS52 MOV42 UPD42 MOV42 INS27 INS8 INS42 INS33 INS21 MOV60 MOV25 INS7 MOV43 INS27 INS42 MOV14 UPD42 INS42 INS33 INS21 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS7 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL34 DEL27 DEL42 DEL32 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL41 DEL8 DEL31 DEL1 DEL14 DEL42 DEL43 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL53 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54