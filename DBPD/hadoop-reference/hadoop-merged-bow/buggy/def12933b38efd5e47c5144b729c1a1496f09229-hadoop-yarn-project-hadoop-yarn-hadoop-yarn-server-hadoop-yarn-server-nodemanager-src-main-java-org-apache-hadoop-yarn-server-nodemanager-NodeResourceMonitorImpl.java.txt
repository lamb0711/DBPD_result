YARN-3534. Collect memory/cpu usage on the node. (Inigo Goiri via kasha)

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.server.api.records.ResourceUtilization;
+import org.apache.hadoop.yarn.util.ResourceCalculatorPlugin;
+/**
+ * Implementation of the node resource monitor. It periodically tracks the
+ * resource utilization of the node and reports it to the NM.
+ */
+  /** Logging infrastructure. */
+  final static Log LOG = LogFactory
+      .getLog(NodeResourceMonitorImpl.class);
+
+  /** Interval to monitor the node resource utilization. */
+  private long monitoringInterval;
+  /** Thread to monitor the node resource utilization. */
+  private MonitoringThread monitoringThread;
+
+  /** Resource calculator. */
+  private ResourceCalculatorPlugin resourceCalculatorPlugin;
+
+  /** Current <em>resource utilization</em> of the node. */
+  private ResourceUtilization nodeUtilization;
+
+  /**
+   * Initialize the node resource monitor.
+   */
+
+    this.monitoringThread = new MonitoringThread();
+  /**
+   * Initialize the service with the proper parameters.
+   */
+  @Override
+  protected void serviceInit(Configuration conf) throws Exception {
+    this.monitoringInterval =
+        conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,
+            YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS);
+
+    Class<? extends ResourceCalculatorPlugin> clazz =
+        conf.getClass(YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null,
+            ResourceCalculatorPlugin.class);
+
+    this.resourceCalculatorPlugin =
+        ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);
+
+    LOG.info(" Using ResourceCalculatorPlugin : "
+        + this.resourceCalculatorPlugin);
+  }
+
+  /**
+   * Check if we should be monitoring.
+   * @return <em>true</em> if we can monitor the node resource utilization.
+   */
+  private boolean isEnabled() {
+    if (resourceCalculatorPlugin == null) {
+      LOG.info("ResourceCalculatorPlugin is unavailable on this system. "
+          + this.getClass().getName() + " is disabled.");
+      return false;
+    }
+    return true;
+  }
+
+  /**
+   * Start the thread that does the node resource utilization monitoring.
+   */
+  @Override
+  protected void serviceStart() throws Exception {
+    if (this.isEnabled()) {
+      this.monitoringThread.start();
+    }
+    super.serviceStart();
+  }
+
+  /**
+   * Stop the thread that does the node resource utilization monitoring.
+   */
+  @Override
+  protected void serviceStop() throws Exception {
+    if (this.isEnabled()) {
+      this.monitoringThread.interrupt();
+      try {
+        this.monitoringThread.join(10 * 1000);
+      } catch (InterruptedException e) {
+        LOG.warn("Could not wait for the thread to join");
+      }
+    }
+    super.serviceStop();
+  }
+
+  /**
+   * Thread that monitors the resource utilization of this node.
+   */
+  private class MonitoringThread extends Thread {
+    /**
+     * Initialize the node resource monitoring thread.
+     */
+    public MonitoringThread() {
+      super("Node Resource Monitor");
+      this.setDaemon(true);
+    }
+
+    /**
+     * Periodically monitor the resource utilization of the node.
+     */
+    @Override
+    public void run() {
+      while (true) {
+        // Get node utilization and save it into the health status
+        long pmem = resourceCalculatorPlugin.getPhysicalMemorySize() -
+            resourceCalculatorPlugin.getAvailablePhysicalMemorySize();
+        long vmem =
+            resourceCalculatorPlugin.getVirtualMemorySize()
+                - resourceCalculatorPlugin.getAvailableVirtualMemorySize();
+        float cpu = resourceCalculatorPlugin.getCpuUsage();
+        nodeUtilization =
+            ResourceUtilization.newInstance(
+                (int) (pmem >> 20), // B -> MB
+                (int) (vmem >> 20), // B -> MB
+                cpu); // 1 CPU at 100% is 1
+
+        try {
+          Thread.sleep(monitoringInterval);
+        } catch (InterruptedException e) {
+          LOG.warn(NodeResourceMonitorImpl.class.getName()
+              + " is interrupted. Exiting.");
+          break;
+        }
+      }
+    }
+  }
+
+  /**
+   * Get the <em>resource utilization</em> of the node.
+   * @return <em>resource utilization</em> of the node.
+   */
+  @Override
+  public ResourceUtilization getUtilization() {
+    return this.nodeUtilization;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS55 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS83 INS42 MOV43 MOV43 INS23 INS23 INS23 INS23 INS23 MOV31 INS31 INS31 INS31 INS31 INS55 INS31 INS65 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS42 INS43 INS31 INS31 INS29 INS78 INS83 INS43 INS42 INS8 INS66 INS66 INS65 INS42 INS42 INS32 INS65 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS21 INS65 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS21 INS65 INS65 INS25 INS41 INS65 INS42 INS42 INS25 INS21 INS65 INS42 INS42 INS25 INS21 INS65 INS42 INS29 INS83 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS65 INS65 INS42 INS42 INS41 INS66 INS42 INS42 INS57 INS66 INS66 INS66 INS66 INS66 INS7 INS66 INS42 INS7 INS74 INS59 INS7 INS32 INS66 INS66 INS27 INS8 INS9 INS66 INS32 INS8 INS48 INS66 INS32 INS8 INS48 INS66 INS65 INS46 INS21 INS65 INS42 INS61 INS66 INS66 INS22 INS43 INS22 INS14 INS22 INS32 INS43 INS76 INS42 INS32 INS22 INS32 INS42 INS42 INS27 INS42 INS33 INS21 INS41 INS52 INS42 INS21 INS42 INS52 INS42 INS21 INS54 INS42 INS66 INS45 INS32 INS66 INS9 INS8 INS52 INS42 INS42 INS52 INS42 INS43 INS52 INS42 INS42 INS42 INS40 INS40 INS42 INS43 INS42 INS42 INS40 INS33 INS57 INS52 INS42 INS42 INS42 INS42 INS42 INS45 INS22 INS32 INS9 INS32 INS32 INS8 INS12 INS52 INS42 INS9 INS60 INS60 INS60 INS21 INS54 INS42 INS42 INS43 INS52 INS42 INS42 INS42 INS27 INS22 INS42 INS22 INS42 INS21 INS44 INS8 INS39 INS59 INS39 INS59 INS39 INS59 INS7 INS8 INS12 INS42 INS45 INS32 INS45 INS52 INS42 INS52 INS42 INS32 INS43 INS42 INS21 INS42 INS27 INS42 INS27 INS42 INS32 INS42 INS32 INS21 INS44 INS8 INS32 INS42 INS22 INS42 INS27 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS11 INS11 INS42 INS32 INS43 INS42 INS21 INS10 INS52 INS42 INS52 INS42 INS34 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS36 INS39 INS36 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS27 INS42 INS34 INS42 INS34 INS32 INS45 INS57 INS42 INS43 INS42 DEL83 DEL42 DEL55