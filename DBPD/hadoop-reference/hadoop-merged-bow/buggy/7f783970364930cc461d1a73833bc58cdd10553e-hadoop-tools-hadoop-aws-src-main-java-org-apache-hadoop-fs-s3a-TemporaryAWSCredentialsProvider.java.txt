Revert "HADOOP-14556. S3A to support Delegation Tokens."

This reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.

-/*
+/**
-import javax.annotation.Nullable;
-import java.io.IOException;
-
+import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.auth.BasicSessionCredentials;
+import org.apache.commons.lang3.StringUtils;
+import java.io.IOException;
-import org.apache.hadoop.fs.s3a.auth.AbstractSessionCredentialsProvider;
-import org.apache.hadoop.fs.s3a.auth.MarshalledCredentialBinding;
-import org.apache.hadoop.fs.s3a.auth.MarshalledCredentials;
-import org.apache.hadoop.fs.s3a.auth.NoAuthWithAWSException;
-import org.apache.hadoop.fs.s3a.auth.NoAwsCredentialsException;
+import org.apache.hadoop.security.ProviderUtils;
+
+import static org.apache.hadoop.fs.s3a.Constants.*;
+import static org.apache.hadoop.fs.s3a.S3AUtils.lookupPassword;
- *
- * This credential provider must not fail in creation because that will
- * break a chain of credential providers.
-public class TemporaryAWSCredentialsProvider extends
-    AbstractSessionCredentialsProvider {
+public class TemporaryAWSCredentialsProvider implements AWSCredentialsProvider {
+  private String accessKey;
+  private String secretKey;
+  private String sessionToken;
-  public static final String COMPONENT
-      = "Session credentials in Hadoop configuration";
-
-  /**
-   * Construct from just a configuration.
-   * @param conf configuration.
-   */
-  public TemporaryAWSCredentialsProvider(final Configuration conf)
+  public TemporaryAWSCredentialsProvider(Configuration conf)
-  /**
-   * Constructor: the URI will be null if the provider is inited unbonded
-   * to a filesystem.
-   * @param uri binding to a filesystem URI.
-   * @param conf configuration.
-   */
-  public TemporaryAWSCredentialsProvider(
-      @Nullable final URI uri,
-      final Configuration conf)
+  public TemporaryAWSCredentialsProvider(URI uri, Configuration conf)
-    super(uri, conf);
+
+      // determine the bucket
+      String bucket = uri != null ? uri.getHost():  "";
+      Configuration c = ProviderUtils.excludeIncompatibleCredentialProviders(
+          conf, S3AFileSystem.class);
+      this.accessKey = lookupPassword(bucket, c, ACCESS_KEY);
+      this.secretKey = lookupPassword(bucket, c, SECRET_KEY);
+      this.sessionToken = lookupPassword(bucket, c, SESSION_TOKEN);
-  /**
-   * The credentials here must include a session token, else this operation
-   * will raise an exception.
-   * @param config the configuration
-   * @return temporary credentials.
-   * @throws IOException on any failure to load the credentials.
-   * @throws NoAuthWithAWSException validation failure
-   * @throws NoAwsCredentialsException the credentials are actually empty.
-   */
-  protected AWSCredentials createCredentials(Configuration config)
-      throws IOException {
-    MarshalledCredentials creds = MarshalledCredentialBinding.fromFileSystem(
-        getUri(), config);
-    MarshalledCredentials.CredentialTypeRequired sessionOnly
-        = MarshalledCredentials.CredentialTypeRequired.SessionOnly;
-    // treat only having non-session creds as empty.
-    if (!creds.isValid(sessionOnly)) {
-      throw new NoAwsCredentialsException(COMPONENT);
+  public AWSCredentials getCredentials() {
+    if (!StringUtils.isEmpty(accessKey) && !StringUtils.isEmpty(secretKey)
+        && !StringUtils.isEmpty(sessionToken)) {
+      return new BasicSessionCredentials(accessKey, secretKey, sessionToken);
-    return MarshalledCredentialBinding.toAWSCredentials(creds,
-        sessionOnly, COMPONENT);
+    throw new CredentialInitializationException(
+        "Access key, secret key or session token is unset");
+  }
+
+  @Override
+  public void refresh() {}
+
+  @Override
+  public String toString() {
+    return getClass().getSimpleName();

MOV26 MOV26 MOV26 INS29 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 INS23 INS23 INS31 INS31 INS31 INS31 INS65 UPD42 UPD83 INS43 INS83 INS43 INS59 INS83 INS43 INS59 MOV83 MOV42 MOV44 MOV44 MOV43 INS8 MOV78 INS83 MOV43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 UPD42 INS42 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS21 MOV25 INS53 INS42 INS42 INS41 INS43 INS59 MOV43 INS59 INS7 INS7 INS7 INS27 INS14 INS32 INS42 INS42 INS16 INS42 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS38 INS38 INS38 INS41 INS43 INS45 INS32 INS42 INS27 INS32 INS45 INS42 INS42 INS42 INS57 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS32 MOV32 INS14 INS42 INS42 INS42 INS33 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD43 MOV43 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 DEL66 DEL66 DEL83 DEL83 DEL45 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL78 DEL83 DEL83 DEL38 DEL14 DEL53 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL46 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL44 DEL43 DEL42 DEL43 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31