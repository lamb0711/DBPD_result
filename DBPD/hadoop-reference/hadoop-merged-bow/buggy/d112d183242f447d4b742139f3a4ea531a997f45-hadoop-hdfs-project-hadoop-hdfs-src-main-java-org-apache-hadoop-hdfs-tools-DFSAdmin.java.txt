HDFS-8582. Support getting a list of reconfigurable config properties and do not generate spurious reconfig warnings (Lei (Eddy) Xu via Colin P.  McCabe)

-    "\t[-reconfig <datanode|...> <host:ipc_port> <start|status>]\n" +
+    "\t[-reconfig <datanode|...> <host:ipc_port> <start|status|properties>]\n" +
-    String reconfig = "-reconfig <datanode|...> <host:ipc_port> <start|status>:\n" +
-        "\tStarts reconfiguration or gets the status of an ongoing reconfiguration.\n" +
+    String reconfig = "-reconfig <datanode|...> <host:ipc_port> <start|status|properties>:\n" +
+        "\tStarts or gets the status of a reconfiguration operation, \n" +
+        "\tor gets a list of reconfigurable properties.\n" +
+    } else if ("properties".equals(op)) {
+      return getReconfigurableProperties(
+          nodeType, address, System.out, System.err);
+        if (status.getStatus() == null) {
+          // Nothing to report.
+          return 0;
+        }
-            out.print("SUCCESS: ");
+            out.printf(
+                "SUCCESS: Changed property %s%n\tFrom: \"%s\"%n\tTo: \"%s\"%n",
+                result.getKey().prop, result.getKey().oldVal,
+                result.getKey().newVal);
-            out.print("FAILED: ");
-          }
-          out.printf("Change property %s%n\tFrom: \"%s\"%n\tTo: \"%s\"%n",
-              result.getKey().prop, result.getKey().oldVal,
-              result.getKey().newVal);
-          if (result.getValue().isPresent()) {
-            out.println("\tError: " + result.getValue().get() + ".");
+            final String errorMsg = result.getValue().get();
+            out.printf(
+                  "FAILED: Change property %s%n\tFrom: \"%s\"%n\tTo: \"%s\"%n",
+                  result.getKey().prop, result.getKey().oldVal,
+                  result.getKey().newVal);
+            out.println("\tError: " + errorMsg + ".");
-      err.println("Node type " + nodeType + " does not support reconfiguration.");
+      err.println("Node type " + nodeType +
+          " does not support reconfiguration.");
+      return 1;
+    }
+    return 0;
+  }
+
+  int getReconfigurableProperties(String nodeType, String address,
+      PrintStream out, PrintStream err) throws IOException {
+    if ("datanode".equals(nodeType)) {
+      ClientDatanodeProtocol dnProxy = getDataNodeProxy(address);
+      try {
+        List<String> properties =
+            dnProxy.listReconfigurableProperties();
+        out.println(
+            "Configuration properties that are allowed to be reconfigured:");
+        for (String name : properties) {
+          out.println(name);
+        }
+      } catch (IOException e) {
+        err.println("DataNode reconfiguration: " + e + ".");
+        return 1;
+      }
+    } else {
+      err.println("Node type " + nodeType +
+          " does not support reconfiguration.");

INS31 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS41 UPD45 INS42 INS42 INS42 INS42 INS32 INS8 INS8 INS34 INS25 INS45 INS42 INS42 INS60 INS54 INS21 INS41 UPD45 UPD45 INS45 INS32 INS8 INS43 INS59 INS8 INS12 INS32 INS34 INS45 INS42 INS42 INS41 INS25 INS42 INS42 INS32 INS60 INS21 INS70 INS44 INS8 INS42 INS42 INS27 INS32 INS27 INS8 INS8 INS42 INS42 INS74 INS59 INS32 INS44 INS42 INS8 INS43 INS42 INS21 INS41 INS45 INS42 INS45 INS42 INS42 INS42 INS40 INS40 INS32 INS33 INS41 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS45 INS43 INS42 INS21 INS42 INS32 INS34 INS42 INS42 INS34 MOV38 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS60 INS21 INS21 INS42 INS42 INS42 INS45 INS42 INS45 INS83 INS43 INS59 INS32 INS32 UPD45 INS42 INS42 MOV32 INS42 INS42 INS45 INS22 INS22 INS22 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25