HADOOP-6713. The RPC server Listener thread is a scalability bottleneck. Contributed by Dmytro Molkov.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@938590 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+  private int readThreads;                        // number of read threads
+    private Reader[] readers = null;
+    private int currentReader = 0;
+    private ExecutorService readPool;
+      readers = new Reader[readThreads];
+      readPool = Executors.newFixedThreadPool(readThreads);
+      for (int i = 0; i < readThreads; i++) {
+        Selector readSelector = Selector.open();
+        Reader reader = new Reader(readSelector);
+        readers[i] = reader;
+        readPool.execute(reader);
+      }
+    
+    private class Reader implements Runnable {
+      private volatile boolean adding = false;
+      private Selector readSelector = null;
+
+      Reader(Selector readSelector) {
+        this.readSelector = readSelector;
+      }
+      public void run() {
+        LOG.info("Starting SocketReader");
+        synchronized (this) {
+          while (running) {
+            SelectionKey key = null;
+            try {
+              readSelector.select();
+              while (adding) {
+                this.wait(1000);
+              }              
+
+              Iterator<SelectionKey> iter = readSelector.selectedKeys().iterator();
+              while (iter.hasNext()) {
+                key = iter.next();
+                iter.remove();
+                if (key.isValid()) {
+                  if (key.isReadable()) {
+                    doRead(key);
+                  }
+                }
+                key = null;
+              }
+            } catch (InterruptedException e) {
+              if (running) {                      // unexpected -- log it
+                LOG.info(getName() + " caught: " +
+                         StringUtils.stringifyException(e));
+              }
+            } catch (IOException ex) {
+              LOG.error("Error in Reader", ex);
+            }
+          }
+        }
+      }
+
+      /**
+       * This gets reader into the state that waits for the new channel
+       * to be registered with readSelector. If it was waiting in select()
+       * the thread will be woken up, otherwise whenever select() is called
+       * it will return even if there is nothing to read and wait
+       * in while(adding) for finishAdd call
+       */
+      public void startAdd() {
+        adding = true;
+        readSelector.wakeup();
+      }
+      
+      public synchronized SelectionKey registerChannel(SocketChannel channel)
+                                                          throws IOException {
+          return channel.register(readSelector, SelectionKey.OP_READ);
+      }
+
+      public synchronized void finishAdd() {
+        adding = false;
+        this.notify();        
+      }
+    }
-                else if (key.isReadable())
-                  doRead(key);
-        } catch (InterruptedException e) {
-          if (running) {                          // unexpected -- log it
-            LOG.info(getName() + " caught: " +
-                     StringUtils.stringifyException(e));
-          }
-      // accept up to 10 connections
-      for (int i=0; i<10; i++) {
-        SocketChannel channel = server.accept();
-        if (channel==null) return;
+      SocketChannel channel;
+      while ((channel = server.accept()) != null) {
-        SelectionKey readKey = channel.register(getSelector(), 
-          SelectionKey.OP_READ);
-        c = new Connection(readKey, channel, System.currentTimeMillis());
-        readKey.attach(c);
-        synchronized (connectionList) {
-          connectionList.add(numConnections, c);
-          numConnections++;
+        
+        Reader reader = getReader();
+        try {
+          reader.startAdd();
+          SelectionKey readKey = reader.registerChannel(channel);
+          c = new Connection(readKey, channel, System.currentTimeMillis());
+          readKey.attach(c);
+          synchronized (connectionList) {
+            connectionList.add(numConnections, c);
+            numConnections++;
+          }
+          if (LOG.isDebugEnabled())
+            LOG.debug("Server connection from " + c.toString() +
+                "; # active connections: " + numConnections +
+                "; # queued calls: " + callQueue.size());          
+        } finally {
+          reader.finishAdd(); 
-        if (LOG.isDebugEnabled())
-          LOG.debug("Server connection from " + c.toString() +
-              "; # active connections: " + numConnections +
-              "; # queued calls: " + callQueue.size());
+      readPool.shutdown();
+    // The method that will return the next reader to work with
+    // Simplistic implementation of round robin for now
+    Reader getReader() {
+      currentReader = (currentReader + 1) % readers.length;
+      return readers[currentReader];
+    }
+    this.readThreads = conf.getInt(
+        CommonConfigurationKeys.IPC_SERVER_RPC_READ_THREADS_KEY,
+        CommonConfigurationKeys.IPC_SERVER_RPC_READ_THREADS_DEFAULT);

INS26 INS26 INS40 INS40 INS23 INS83 INS39 INS59 INS23 INS23 INS23 INS55 INS31 INS42 INS83 INS5 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS43 INS42 INS8 INS21 INS43 INS85 INS42 INS33 INS42 INS34 INS42 INS42 INS21 INS21 INS24 INS42 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS8 INS60 INS61 INS21 INS42 INS21 INS41 INS7 INS42 INS7 INS7 MOV58 INS27 MOV37 INS8 INS42 INS9 INS42 INS42 INS33 INS43 INS42 INS21 INS21 INS51 INS65 INS21 INS21 INS42 INS43 INS42 INS42 INS41 INS21 INS21 MOV43 INS59 INS27 MOV8 MOV60 INS32 INS7 INS2 INS22 INS32 INS42 INS3 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS21 INS42 INS7 INS32 INS52 INS8 INS66 INS66 INS66 INS66 INS66 INS7 INS32 INS42 INS32 INS7 INS32 UPD42 MOV42 INS36 INS33 INS54 INS42 INS42 INS42 INS27 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS40 INS5 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS7 INS32 INS22 INS42 INS42 INS42 INS45 INS61 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS9 INS52 INS42 INS7 INS43 INS8 INS8 INS36 INS40 INS43 INS85 INS42 INS42 INS32 INS42 INS42 INS14 INS2 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS8 INS42 MOV32 INS42 UPD42 INS32 INS21 MOV60 MOV21 MOV21 MOV51 MOV25 INS21 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS42 INS32 INS32 INS42 INS34 INS42 INS43 INS59 INS8 MOV12 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS61 INS60 INS61 INS44 INS8 UPD42 UPD42 UPD42 MOV42 INS32 INS42 INS8 INS74 INS59 INS32 INS8 INS43 INS42 INS21 INS42 INS42 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS21 INS25 INS21 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS7 INS32 INS32 INS8 INS7 INS42 INS42 INS45 INS42 INS52 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV25 INS42 INS33 INS42 INS42 INS8 MOV21 DEL42 DEL33 DEL27 DEL41 DEL25 DEL32 DEL40 DEL42 DEL34 DEL27 DEL24