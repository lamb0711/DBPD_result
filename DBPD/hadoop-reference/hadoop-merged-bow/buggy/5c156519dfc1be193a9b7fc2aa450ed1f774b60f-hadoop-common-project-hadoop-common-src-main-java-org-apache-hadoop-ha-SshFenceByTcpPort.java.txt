HADOOP-7983. HA: failover should be able to pass args to fencers. Contributed by Eli Collins


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238049 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetAddress;
-import java.net.UnknownHostException;
+import java.net.InetSocketAddress;
- * <code>sshfence([username@]nnhost[:ssh-port], target-port)</code>
- * where the first argument specifies the username, host, and port to ssh
- * into, and the second argument specifies the port on which the target
- * NN process is listening on.
- * <p>
- * For example, <code>sshfence(other-nn, 8020)<code> will SSH into
- * <code>other-nn<code> as the current user on the standard SSH port,
- * then kill whatever process is listening on port 8020.
+ * <code>sshfence([[username][:ssh-port]])</code>
+ * where the optional argument specifies the username and port to use
+ * with ssh.
-   * Verify that the arguments are parseable and that the host
-   * can be resolved.
+   * Verify that the argument, if given, in the conf is parseable.
-    Args args = new Args(argStr);
-    try {
-      InetAddress.getByName(args.host);
-    } catch (UnknownHostException e) {
-      throw new BadFencingConfigurationException(
-          "Unknown host: " + args.host);
+    if (argStr != null) {
+      // Use a dummy service when checking the arguments defined
+      // in the configuration are parseable.
+      Args args = new Args(new InetSocketAddress("localhost", 8020), argStr);
-  public boolean tryFence(String argsStr)
+  public boolean tryFence(InetSocketAddress serviceAddr, String argsStr)
-    Args args = new Args(argsStr);
-    
+
+    Args args = new Args(serviceAddr, argsStr);
+
-          // the NN is still listening - we are unable to fence
-          LOG.warn("Unable to fence NN - it is running but we cannot kill it");
+          // the service is still listening - we are unable to fence
+          LOG.warn("Unable to fence - it is running but we cannot kill it");
-          LOG.info("Verified that the NN is down.");
+          LOG.info("Verified that the service is down.");
-      
-    private static final Pattern USER_HOST_PORT_RE = Pattern.compile(
-      "(?:(.+?)@)?([^:]+?)(?:\\:(\\d+))?");
+    private static final Pattern USER_PORT_RE = Pattern.compile(
+      "([^:]+?)?(?:\\:(\\d+))?");
-    final String user;
-    final String host;
-    final int sshPort;
-    final int targetPort;
+    String host;
+    int targetPort;
+    String user;
+    int sshPort;
-    public Args(String args) throws BadFencingConfigurationException {
-      if (args == null) {
-        throw new BadFencingConfigurationException(
-            "Must specify args for ssh fencing configuration");
-      }
-      String[] argList = args.split(",\\s*");
-      if (argList.length != 2) {
-        throw new BadFencingConfigurationException(
-            "Incorrect number of arguments: " + args);
-      }
-      
-      // Parse SSH destination.
-      String sshDestArg = argList[0];
-      Matcher m = USER_HOST_PORT_RE.matcher(sshDestArg);
-      if (!m.matches()) {
-        throw new BadFencingConfigurationException(
-            "Unable to parse SSH destination: "+ sshDestArg);
-      }
-      if (m.group(1) != null) {
-        user = m.group(1);
-      } else {
-        user = System.getProperty("user.name");
-      }
-      
-      host = m.group(2);
+    public Args(InetSocketAddress serviceAddr, String arg) 
+        throws BadFencingConfigurationException {
+      host = serviceAddr.getHostName();
+      targetPort = serviceAddr.getPort();
+      user = System.getProperty("user.name");
+      sshPort = DEFAULT_SSH_PORT;
-      if (m.group(3) != null) {
-        sshPort = parseConfiggedPort(m.group(3));
-      } else {
-        sshPort = DEFAULT_SSH_PORT;
+      // Parse optional user and ssh port
+      if (arg != null && !"".equals(arg)) {
+        Matcher m = USER_PORT_RE.matcher(arg);
+        if (!m.matches()) {
+          throw new BadFencingConfigurationException(
+              "Unable to parse user and SSH port: "+ arg);
+        }
+        if (m.group(1) != null) {
+          user = m.group(1);
+        }
+        if (m.group(2) != null) {
+          sshPort = parseConfiggedPort(m.group(2));
+        }
-      
-      // Parse target port.
-      targetPort = parseConfiggedPort(argList[1]);

UPD40 MOV23 MOV23 INS44 UPD66 UPD66 UPD66 INS25 INS43 INS42 INS44 UPD66 INS27 INS8 INS42 MOV43 UPD42 INS43 INS42 UPD42 INS21 INS21 MOV21 MOV21 INS25 INS42 INS33 INS60 UPD45 INS42 INS7 INS7 INS27 INS8 MOV43 INS59 MOV43 INS42 INS42 INS32 INS42 INS32 INS27 INS38 MOV60 MOV25 MOV25 MOV25 INS42 INS14 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS32 MOV43 INS14 INS42 INS45 INS42 INS42 MOV21 UPD43 MOV43 INS45 INS34 UPD42 UPD42 UPD34 UPD42 MOV43 UPD42 INS32 UPD45 UPD42 INS42 MOV32 UPD45 UPD45 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL40 DEL27 DEL14 DEL53 DEL8 DEL12 DEL54 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL8 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL45 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL34 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL7 DEL21