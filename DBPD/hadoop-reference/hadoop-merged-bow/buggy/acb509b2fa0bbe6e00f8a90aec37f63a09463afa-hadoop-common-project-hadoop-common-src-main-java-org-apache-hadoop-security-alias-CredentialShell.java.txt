HADOOP-12942. hadoop credential commands non-obviously use password of "none" (Mike Yoder via lmccay)
+import com.google.common.annotations.VisibleForTesting;
-  		"[generic options]\n";
+      "[generic options]\n";
-      "   [--help]\n" +
+      "   [-help]\n" +
+  @VisibleForTesting
+  public static final String NO_VALID_PROVIDERS =
+      "There are no valid (non-transient) providers configured.\n" +
+      "No action has been taken. Use the -provider option to specify\n" +
+      "a provider. If you want to use a transient provider then you\n" +
+      "MUST use the -provider argument.";
-  /** allows stdout to be captured if necessary */
-  public PrintStream out = System.out;
-  /** allows stderr to be captured if necessary */
-  public PrintStream err = System.err;
+  /** If true, fail if the provider requires a password and none is given. */
+  private boolean strict = false;
+
+  /** Allows stdout to be captured if necessary. */
+  @VisibleForTesting public PrintStream out = System.out;
+  /** Allows stderr to be captured if necessary. */
+  @VisibleForTesting public PrintStream err = System.err;
+  private boolean isHelp = false;
-      if (command.validate()) {
+      if (!isHelp) {
+        if (command.validate()) {
-      } else {
-        exitCode = 1;
+        } else {
+          exitCode = 1;
+        }
-   * Parse the command line arguments and initialize the data
+   * Parse the command line arguments and initialize the data.
+      } else if (args[i].equals("-strict")) {
+        strict = true;
+    isHelp = true;
-    }
-    else {
+    } else {
-      		"======");
+          "======");
-      CredentialProvider provider = null;
+      CredentialProvider prov = null;
-          provider = providers.get(0);
-        }
-        else {
+          prov = providers.get(0);
+        } else {
-              provider = p;
+              prov = p;
-      return provider;
+      if (prov == null) {
+        out.println(NO_VALID_PROVIDERS);
+      }
+      return prov;
-        out.println(provider.getClass().getName() + " has been updated.");
+      out.println("Provider " + provider.toString() + " has been updated.");
-    public static final String USAGE = "list [-provider provider-path]";
+    public static final String USAGE =
+        "list [-provider provider-path] [-strict]";
-        "a particular provider - as configured in core-site.xml or " +
-        "indicated\nthrough the -provider argument.";
+        "a particular provider - as configured in core-site.xml or\n" +
+        "indicated through the -provider argument. If -strict is supplied,\n" +
+        "fail immediately if the provider requires a password and none is\n" +
+        "provided.";
-      boolean rc = true;
-      if (provider == null) {
-        out.println("There are no non-transient CredentialProviders configured.\n"
-            + "Consider using the -provider option to indicate the provider\n"
-            + "to use. If you want to list a transient provider then you\n"
-            + "you MUST use the -provider argument.");
-        rc = false;
-      }
-      return rc;
+      return (provider != null);
-        out.println("Listing aliases for CredentialProvider: " + provider.toString());
+        out.println("Listing aliases for CredentialProvider: " +
+            provider.toString());
-        out.println("Cannot list aliases for CredentialProvider: " + provider.toString()
+        out.println("Cannot list aliases for CredentialProvider: " +
+            provider.toString()
-        "delete <alias> [-f] [-provider provider-path]";
+        "delete <alias> [-f] [-provider provider-path] [-strict]";
-        "confirmation unless the -f option is specified.";
+        "confirmation unless the -f option is specified. If -strict is\n" +
+        "supplied, fail immediately if the provider requires a password\n" +
+        "and none is given.";
-    String alias = null;
-    boolean cont = true;
+    private String alias = null;
+    private boolean cont = true;
-        out.println("There are no valid CredentialProviders configured.\n"
-            + "Nothing will be deleted.\n"
-            + "Consider using the -provider option to indicate the provider"
-            + " to use.");
-      out.println("Deleting credential: " + alias + " from CredentialProvider: "
-          + provider.toString());
+      out.println("Deleting credential: " + alias +
+          " from CredentialProvider: " + provider.toString());
-          out.println(alias + " has been successfully deleted.");
+          out.println("Credential " + alias +
+              " has been successfully deleted.");
-          out.println(alias + " has NOT been deleted.");
+          out.println("Credential " + alias + " has NOT been deleted.");
-    public static final String USAGE =
-        "create <alias> [-provider provider-path]";
+    public static final String USAGE = "create <alias> [-value alias-value] " +
+        "[-provider provider-path] [-strict]";
-        "The create subcommand creates a new credential for the name specified\n" +
-        "as the <alias> argument within the provider indicated through\n" +
-        "the -provider argument.";
+        "The create subcommand creates a new credential for the name\n" +
+        "specified as the <alias> argument within the provider indicated\n" +
+        "through the -provider argument. If -strict is supplied, fail\n" +
+        "immediately if the provider requires a password and none is given.\n" +
+        "If -value is provided, use that for the value of the credential\n" +
+        "instead of prompting the user.";
-    String alias = null;
+    private String alias = null;
-      provider = getCredentialProvider();
-      if (provider == null) {
-        out.println("There are no valid CredentialProviders configured." +
-        		"\nCredential will not be created.\n"
-            + "Consider using the -provider option to indicate the provider" +
-            " to use.");
-        rc = false;
+      try {
+        provider = getCredentialProvider();
+        if (provider == null) {
+          rc = false;
+        } else if (provider.needsPassword()) {
+          if (strict) {
+            out.println(provider.noPasswordError());
+            rc = false;
+          } else {
+            out.println(provider.noPasswordWarning());
+          }
+        }
+      } catch (IOException e) {
+        e.printStackTrace(err);
-        }
-        else {
-           credential = promptForCredential();
+        } else {
+          credential = promptForCredential();
-        out.println(alias + " has been successfully created.");
+        out.println(alias + " has been successfully created.");
-        out.println(alias + " has NOT been created. " + e.getMessage());
+        out.println("Credential " + alias + " has NOT been created. " +
+            e.getMessage());
-        out.println(alias + " has NOT been created. " + e.getMessage());
+        out.println("Credential " + alias + " has NOT been created. " +
+            e.getMessage());
-      char[] newPassword1 = c.readPassword("Enter password: ");
-      char[] newPassword2 = c.readPassword("Enter password again: ");
+      char[] newPassword1 = c.readPassword("Enter alias password: ");
+      char[] newPassword2 = c.readPassword("Enter alias password again: ");
-        if (newPassword1 != null) Arrays.fill(newPassword1, ' ');
+        if (newPassword1 != null) {
+          Arrays.fill(newPassword1, ' ');
+        }
-      if (newPassword2 != null) Arrays.fill(newPassword2, ' ');
+      if (newPassword2 != null) {
+        Arrays.fill(newPassword2, ' ');
+      }
-  // to facilitate testing since Console is a final class...
+  /** To facilitate testing since Console is a final class. */

INS26 INS40 INS23 INS23 INS23 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS78 INS78 INS83 INS39 INS59 INS29 INS42 INS42 INS42 INS27 INS65 INS42 INS9 INS42 INS42 INS42 INS9 INS21 MOV43 MOV43 MOV43 MOV43 INS83 INS83 MOV43 MOV43 INS83 INS65 INS45 INS45 INS45 INS45 INS66 UPD66 UPD66 UPD66 INS7 INS25 UPD45 INS41 UPD45 INS27 INS54 MOV12 INS66 UPD45 INS25 INS42 INS9 INS27 INS8 UPD42 UPD45 UPD45 INS45 INS45 INS36 UPD45 INS45 INS45 INS45 INS45 UPD45 UPD45 UPD45 INS45 INS45 INS45 INS8 INS12 MOV21 INS38 INS8 UPD42 INS42 INS33 INS21 INS27 MOV21 INS25 INS44 INS8 MOV44 MOV44 MOV5 MOV5 INS8 INS42 MOV25 INS32 INS45 INS32 MOV42 MOV33 MOV27 MOV8 INS25 INS43 INS42 INS21 MOV21 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS32 INS8 INS42 INS32 UPD45 UPD45 INS8 INS42 INS42 MOV25 INS42 INS42 INS42 MOV21 INS25 UPD42 INS42 INS8 INS45 INS45 INS32 INS8 MOV25 INS45 INS21 INS2 INS42 INS45 INS21 INS45 INS32 INS42 INS42 INS7 INS32 INS42 INS42 INS32 INS42 INS9 UPD42 INS42 INS42 INS42 INS42 DEL32 DEL42 DEL32 DEL39 DEL42 DEL9 DEL59 DEL60 DEL27 DEL25 DEL42 DEL41 DEL42 DEL42 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL45 DEL42 DEL42 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL45 DEL45 DEL45 DEL45 DEL27