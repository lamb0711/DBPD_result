HDFS-4635. Move BlockManager#computeCapacity to LightWeightGSet. Contributed by Suresh Srinivas.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461364 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.StringUtils;
+import com.google.common.annotations.VisibleForTesting;
+
+  
+  /**
+   * Let t = percentage of max memory.
+   * Let e = round(log_2 t).
+   * Then, we choose capacity = 2^e/(size of reference),
+   * unless it is outside the close interval [1, 2^30].
+   */
+  public static int computeCapacity(double percentage, String mapName) {
+    return computeCapacity(Runtime.getRuntime().maxMemory(), percentage,
+        mapName);
+  }
+  
+  @VisibleForTesting
+  static int computeCapacity(long maxMemory, double percentage,
+      String mapName) {
+    if (percentage > 100.0 || percentage < 0.0) {
+      throw new HadoopIllegalArgumentException("Percentage " + percentage
+          + " must be greater than or equal to 0 "
+          + " and less than or equal to 100");
+    }
+    if (maxMemory < 0) {
+      throw new HadoopIllegalArgumentException("Memory " + maxMemory
+          + " must be greater than or equal to 0");
+    }
+    if (percentage == 0.0 || maxMemory == 0) {
+      return 0;
+    }
+    //VM detection
+    //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection
+    final String vmBit = System.getProperty("sun.arch.data.model");
+
+    //Percentage of max memory
+    final double percentDivisor = 100.0/percentage;
+    final double percentMemory = maxMemory/percentDivisor;
+    
+    //compute capacity
+    final int e1 = (int)(Math.log(percentMemory)/Math.log(2.0) + 0.5);
+    final int e2 = e1 - ("32".equals(vmBit)? 2: 3);
+    final int exponent = e2 < 0? 0: e2 > 30? 30: e2;
+    final int c = 1 << exponent;
+
+    if (LightWeightGSet.LOG.isDebugEnabled()) {
+      LOG.debug("Computing capacity for map " + mapName);
+      LOG.debug("VM type       = " + vmBit + "-bit");
+      LOG.debug(percentage + "% max memory = "
+          + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory, "B", 1));
+      LOG.debug("capacity      = 2^" + exponent + " = " + c + " entries");
+    }
+    return c;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS65 INS39 INS42 INS43 INS42 INS41 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS25 INS25 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS66 INS66 INS66 INS66 INS42 INS32 INS42 INS27 INS8 INS27 INS8 INS27 INS8 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS53 INS42 INS34 INS53 INS27 INS27 INS41 INS42 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS11 INS42 INS27 INS42 INS16 INS42 INS27 INS40 INS42 INS21 INS21 INS21 INS21 INS32 INS42 INS42 INS34 INS42 INS34 INS14 INS14 INS42 INS34 INS42 INS34 INS34 INS42 INS42 INS45 INS34 INS42 INS42 INS42 INS39 INS36 INS42 INS36 INS27 INS34 INS16 INS34 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS43 INS27 INS43 INS27 INS27 INS16 INS42 INS34 INS27 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS27 INS34 INS32 INS34 INS34 INS42 INS34 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS45 INS32 INS32 INS45 INS42 INS42 INS40 INS42 INS42 INS45 INS34 INS42 INS42 INS42 INS42 INS42 INS34