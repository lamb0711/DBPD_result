HDFS-6984. Serialize FileStatus via protobuf.

+import java.io.IOException;
+import java.util.EnumSet;
-public class HdfsFileStatus {
+public class HdfsFileStatus extends FileStatus {
+
+  private static final long serialVersionUID = 0x126eb82a;
-  private final byte[] path;
-  private final byte[] symlink; // symlink target encoded in java UTF8 or null
-  private final long length;
-  private final boolean isdir;
-  private final short block_replication;
-  private final long blocksize;
-  private final long modification_time;
-  private final long access_time;
-  private final FsPermission permission;
-  private final String owner;
-  private final String group;
+  private byte[] uPath;
+  private byte[] uSymlink; // symlink target encoded in java UTF8/null
-
-
+   * Set of features potentially active on an instance.
+   */
+  public enum Flags {
+    HAS_ACL,
+    HAS_CRYPT,
+    HAS_EC;
+  }
+  private final EnumSet<Flags> flags;
+
+  /**
-   * @param length the number of bytes the file has
-   * @param isdir if the path is a directory
+   * @param length            the number of bytes the file has
+   * @param isdir             if the path is a directory
-   * @param blocksize the block size
+   * @param blocksize         the block size
-      long blocksize, long modification_time, long access_time,
-      FsPermission permission, String owner, String group, byte[] symlink,
-      byte[] path, long fileId, int childrenNum, FileEncryptionInfo feInfo,
-      byte storagePolicy, ErasureCodingPolicy ecPolicy) {
-    this.length = length;
-    this.isdir = isdir;
-    this.block_replication = (short) block_replication;
-    this.blocksize = blocksize;
-    this.modification_time = modification_time;
-    this.access_time = access_time;
-    this.permission = (permission == null) ?
-        ((isdir || symlink!=null) ?
-            FsPermission.getDefault() :
-            FsPermission.getFileDefault()) :
-        permission;
-    this.owner = (owner == null) ? "" : owner;
-    this.group = (group == null) ? "" : group;
-    this.symlink = symlink;
-    this.path = path;
+                        long blocksize, long modification_time,
+                        long access_time, FsPermission permission,
+                        EnumSet<Flags> flags, String owner, String group,
+                        byte[] symlink, byte[] path, long fileId,
+                        int childrenNum, FileEncryptionInfo feInfo,
+                        byte storagePolicy, ErasureCodingPolicy ecPolicy) {
+    super(length, isdir, block_replication, blocksize, modification_time,
+        access_time, convert(isdir, symlink != null, permission, flags),
+        owner, group, null, null);
+    this.flags = flags;
+    this.uSymlink = symlink;
+    this.uPath = path;
-   * Get the length of this file, in bytes.
-   * @return the length of this file, in bytes.
+   * Set redundant flags for compatibility with existing applications.
-  public final long getLen() {
-    return length;
+  protected static FsPermission convert(boolean isdir, boolean symlink,
+      FsPermission p, EnumSet<Flags> f) {
+    if (p instanceof FsPermissionExtension) {
+      // verify flags are set consistently
+      assert p.getAclBit() == f.contains(HdfsFileStatus.Flags.HAS_ACL);
+      assert p.getEncryptedBit() == f.contains(HdfsFileStatus.Flags.HAS_CRYPT);
+      assert p.getErasureCodedBit() == f.contains(HdfsFileStatus.Flags.HAS_EC);
+      return p;
+    }
+    if (null == p) {
+      if (isdir) {
+        p = FsPermission.getDirDefault();
+      } else if (symlink) {
+        p = FsPermission.getDefault();
+      } else {
+        p = FsPermission.getFileDefault();
+      }
+    }
+    return new FsPermissionExtension(p, f.contains(Flags.HAS_ACL),
+        f.contains(Flags.HAS_CRYPT), f.contains(Flags.HAS_EC));
-  /**
-   * Is this a directory?
-   * @return true if this is a directory
-   */
-  public final boolean isDir() {
-    return isdir;
-  }
-
-  /**
-   * Is this a symbolic link?
-   * @return true if this is a symbolic link
-   */
+  @Override
-    return symlink != null;
+    return uSymlink != null;
-  /**
-   * Get the block size of the file.
-   * @return the number of bytes
-   */
-  public final long getBlockSize() {
-    return blocksize;
+  @Override
+  public boolean hasAcl() {
+    return flags.contains(Flags.HAS_ACL);
-  /**
-   * Get the replication factor of a file.
-   * @return the replication factor of a file.
-   */
-  public final short getReplication() {
-    return block_replication;
+  @Override
+  public boolean isEncrypted() {
+    return flags.contains(Flags.HAS_CRYPT);
-  /**
-   * Get the modification time of the file.
-   * @return the modification time of file in milliseconds since January 1, 1970 UTC.
-   */
-  public final long getModificationTime() {
-    return modification_time;
-  }
-
-  /**
-   * Get the access time of the file.
-   * @return the access time of file in milliseconds since January 1, 1970 UTC.
-   */
-  public final long getAccessTime() {
-    return access_time;
-  }
-
-  /**
-   * Get FsPermission associated with the file.
-   * @return permission
-   */
-  public final FsPermission getPermission() {
-    return permission;
-  }
-
-  /**
-   * Get the owner of the file.
-   * @return owner of the file
-   */
-  public final String getOwner() {
-    return owner;
-  }
-
-  /**
-   * Get the group associated with the file.
-   * @return group for the file.
-   */
-  public final String getGroup() {
-    return group;
+  @Override
+  public boolean isErasureCoded() {
+    return flags.contains(Flags.HAS_EC);
-    return path.length == 0;
+    return uPath.length == 0;
-    return DFSUtilClient.bytes2String(path);
+    return DFSUtilClient.bytes2String(uPath);
-    return path;
+    return uPath;
-  /**
-   * Get the string representation of the symlink.
-   * @return the symlink as a string.
-   */
-  public final String getSymlink() {
-    return DFSUtilClient.bytes2String(symlink);
+  @Override
+  public Path getSymlink() throws IOException {
+    if (isSymlink()) {
+      return new Path(DFSUtilClient.bytes2String(uSymlink));
+    }
+    throw new IOException("Path " + getPath() + " is not a symbolic link");
+  @Override
+  public void setSymlink(Path sym) {
+    uSymlink = DFSUtilClient.string2Bytes(sym.toString());
+  }
+
+  /**
+   * Opaque referant for the symlink, to be resolved at the client.
+   */
-    return symlink;
+    return uSymlink;
-  public final FileStatus makeQualified(URI defaultUri, Path path) {
-    return new FileStatus(getLen(), isDir(), getReplication(),
-        getBlockSize(), getModificationTime(),
-        getAccessTime(),
-        getPermission(), getOwner(), getGroup(),
-        isSymlink() ? new Path(getSymlink()) : null,
-        (getFullPath(path)).makeQualified(
-            defaultUri, null)); // fully-qualify path
+  @Override
+  public boolean equals(Object o) {
+    // satisfy findbugs
+    return super.equals(o);
+
+  @Override
+  public int hashCode() {
+    // satisfy findbugs
+    return super.hashCode();
+  }
+
+  /**
+   * Resolve the short name of the Path given the URI, parent provided. This
+   * FileStatus reference will not contain a valid Path until it is resolved
+   * by this method.
+   * @param defaultUri FileSystem to fully qualify HDFS path.
+   * @param parent Parent path of this element.
+   * @return Reference to this instance.
+   */
+  public final FileStatus makeQualified(URI defaultUri, Path parent) {
+    // fully-qualify path
+    setPath(getFullPath(parent).makeQualified(defaultUri, null));
+    return this; // API compatibility
+  }
+

INS26 INS26 MOV23 MOV23 INS40 INS40 MOV43 INS71 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS29 INS83 INS42 INS72 INS72 INS72 MOV83 MOV83 INS74 MOV59 INS44 INS8 MOV29 UPD83 MOV83 UPD83 MOV83 MOV43 UPD42 MOV42 INS44 INS44 INS44 INS44 INS8 INS78 UPD39 UPD42 INS78 INS39 UPD42 INS78 INS39 INS42 INS78 INS39 INS42 INS78 UPD43 INS43 INS8 INS78 INS83 INS39 INS42 MOV44 INS8 INS29 INS78 MOV83 INS39 UPD42 MOV42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS29 INS83 INS83 MOV43 INS42 MOV44 INS44 INS8 UPD42 INS34 UPD42 UPD42 INS65 INS42 INS42 INS42 INS43 INS43 UPD42 INS74 INS42 INS46 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS39 INS42 INS39 INS42 MOV43 INS42 INS74 INS42 INS25 INS25 MOV41 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS25 INS53 INS42 UPD42 INS21 INS65 INS42 INS43 INS42 INS41 INS42 INS41 INS65 INS65 INS65 INS65 MOV43 INS42 INS21 INS41 INS66 UPD42 MOV42 UPD42 MOV42 UPD66 UPD66 UPD66 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS33 UPD66 INS43 INS43 INS62 INS8 INS27 INS8 INS14 INS27 INS32 INS32 INS32 UPD42 MOV32 INS8 INS14 INS7 INS66 UPD42 INS42 INS48 INS48 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS32 INS52 INS42 INS42 INS42 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS6 INS6 INS6 INS41 INS33 INS42 INS25 INS43 INS42 INS32 INS32 INS32 INS42 INS33 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 UPD40 UPD42 MOV41 INS43 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS27 INS27 INS27 INS42 INS42 INS8 INS25 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS14 INS42 INS45 INS32 INS45 INS42 INS42 INS32 INS32 MOV42 MOV42 MOV33 INS32 INS32 INS32 INS32 INS32 INS32 INS21 INS42 INS8 INS8 INS43 INS32 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS7 INS21 INS21 INS42 MOV42 MOV42 UPD42 MOV42 INS42 INS32 INS7 INS7 INS42 INS42 INS42 MOV32 INS42 MOV32 DEL83 DEL83 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL43 DEL23 DEL42 DEL33 DEL27 DEL36 DEL45 DEL42 DEL16 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL39 DEL42 DEL11 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL36 DEL42 DEL27 DEL36 DEL16 DEL36 DEL42 DEL16 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL36 DEL45 DEL42 DEL16 DEL7 DEL21 DEL8 DEL66 DEL65 DEL42 DEL39 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL32 DEL8 DEL83 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL14 DEL33 DEL16 DEL32 DEL36 DEL32 DEL14 DEL41 DEL8 DEL31