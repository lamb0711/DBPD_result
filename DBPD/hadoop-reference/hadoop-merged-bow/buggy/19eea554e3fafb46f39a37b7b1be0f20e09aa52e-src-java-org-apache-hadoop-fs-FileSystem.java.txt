HADOOP-6870. Add a new API getFiles to FileSystem and FileContext. Contributed by Hairong Kuang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980271 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.NoSuchElementException;
+import java.util.Stack;
+  /**
+   * List the statuses and block locations of the files in the given path 
+   * if the path is a directory.
+   * If the given path is a file, return the file's status and block locations.
+   * if recursive is true, list all file statuses and block locations in
+   * the subtree rooted at the given path.
+   * 
+   * @param f is the path
+   * @param recursive if the subdirectories need to be traversed recursively
+   *
+   * @return an iterator that traverses statuses of the files
+   * @throws FileNotFoundException when the path does not exist;
+   *         IOException see specific implementation
+   */
+  public Iterator<LocatedFileStatus> listFiles(
+      final Path f, final boolean recursive)
+  throws FileNotFoundException, IOException {
+    return new Iterator<LocatedFileStatus>() {
+      private LinkedList<FileStatus> fileStats = new LinkedList<FileStatus>();
+      private Stack<FileStatus> dirStats = new Stack<FileStatus>();
+      
+      { // initializer
+        list(f);
+      }
+      
+      @Override
+      public boolean hasNext() {
+        if (fileStats.isEmpty()) {
+          listDir();
+        }
+        return !fileStats.isEmpty();
+      }
+      
+      /**
+       * list at least one directory until file list is not empty
+       */
+      private void listDir() {
+        while (fileStats.isEmpty() && !dirStats.isEmpty()) {
+          FileStatus dir = dirStats.pop();
+          list(dir.getPath());
+        }
+      }
+
+      /**
+       * List the given path
+       * 
+       * @param dirPath a path
+       */
+      private void list(Path dirPath) {
+        try {
+          FileStatus[] stats = listStatus(dirPath);
+          for (FileStatus stat : stats) {
+            if (stat.isFile()) {
+              fileStats.add(stat);
+            } else if (recursive) { // directory & recursive
+              dirStats.push(stat);
+            }
+          }
+        } catch (IOException ioe) {
+          throw (RuntimeException) new RuntimeException().initCause(ioe);
+        }        
+      }
+      
+      @Override
+      public LocatedFileStatus next() {
+        if (!hasNext()) {
+          throw new NoSuchElementException();
+        }
+        FileStatus status = fileStats.remove();
+        try {
+          BlockLocation[] locs = getFileBlockLocations(
+              status, 0, status.getLen());
+          return new LocatedFileStatus(status, locs);
+        } catch (IOException ioe) {
+          throw (RuntimeException) new RuntimeException().initCause(ioe);
+        }
+      }
+      
+      @Override
+      public void remove() {
+        throw new UnsupportedOperationException("Remove is not supported");
+      }
+    };
+  }
+  

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS42 INS41 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS14 INS74 INS1 INS43 INS43 INS23 INS23 INS28 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS83 INS74 INS59 INS83 INS74 INS59 INS8 INS78 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS21 INS42 INS25 INS41 INS65 INS61 INS65 INS65 INS43 INS42 INS54 INS42 INS42 INS25 INS60 INS54 INS42 INS53 INS42 INS42 INS74 INS42 INS42 INS74 INS32 INS32 INS8 INS38 INS66 INS27 INS8 INS66 INS42 INS66 INS42 INS8 INS12 INS38 INS8 INS43 INS59 INS8 INS12 INS14 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS21 INS32 INS32 INS38 INS60 INS21 INS60 INS70 INS44 INS8 INS32 INS53 INS42 INS42 INS32 INS60 INS41 INS44 INS8 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS32 INS5 INS59 INS44 INS42 INS8 INS43 INS42 INS53 INS42 INS14 INS42 INS42 INS5 INS59 INS14 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS42 INS25 INS42 INS11 INS43 INS43 INS85 INS42 INS32 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS25 INS43 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS43 INS32 INS42 INS42 INS21 INS42 INS8 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS21 INS43 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42