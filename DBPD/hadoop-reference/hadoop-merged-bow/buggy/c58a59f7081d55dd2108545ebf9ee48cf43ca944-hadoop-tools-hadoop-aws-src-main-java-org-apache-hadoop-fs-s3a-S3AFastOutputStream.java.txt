HADOOP-13171. Add StorageStatistics to S3A; instrument some more operations. Contributed by Steve Loughran.

-import org.apache.commons.lang.StringUtils;
-import org.apache.hadoop.fs.FileSystem;
+import static org.apache.hadoop.fs.s3a.Statistic.*;
-  private final FileSystem.Statistics statistics;
-  private final String serverSideEncryptionAlgorithm;
-   * @param statistics track FileSystem.Statistics on the performed operations
-   * @param serverSideEncryptionAlgorithm algorithm for server side encryption
-  public S3AFastOutputStream(AmazonS3Client client, S3AFileSystem fs,
-      String bucket, String key, Progressable progress,
-      FileSystem.Statistics statistics, CannedAccessControlList cannedACL,
-      String serverSideEncryptionAlgorithm, long partSize,
-      long multiPartThreshold, ExecutorService threadPoolExecutor)
+  public S3AFastOutputStream(AmazonS3Client client,
+      S3AFileSystem fs,
+      String bucket,
+      String key,
+      Progressable progress,
+      CannedAccessControlList cannedACL,
+      long partSize,
+      long multiPartThreshold,
+      ExecutorService threadPoolExecutor)
-    this.statistics = statistics;
-    this.serverSideEncryptionAlgorithm = serverSideEncryptionAlgorithm;
-        if (buffer.size() > 0) {
+        int size = buffer.size();
+        if (size > 0) {
+          fs.incrementPutStartStatistics(size);
-              .toByteArray()), buffer.size());
+              .toByteArray()), size);
-      statistics.incrementWriteOps(1);
+  /**
+   * Create the default metadata for a multipart upload operation.
+   * @return the metadata to use/extend.
+   */
-    ObjectMetadata om = new ObjectMetadata();
-    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {
-      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);
-    }
-    return om;
+    return fs.newObjectMetadata();
-    final ObjectMetadata om = createDefaultMetadata();
-        new InitiateMultipartUploadRequest(bucket, key, om);
+        new InitiateMultipartUploadRequest(bucket,
+            key,
+            createDefaultMetadata());
-    om.setContentLength(buffer.size());
-    final PutObjectRequest putObjectRequest = new PutObjectRequest(bucket, key,
-        new ByteArrayInputStream(buffer.toByteArray()), om);
-    putObjectRequest.setCannedAcl(cannedACL);
+    final int size = buffer.size();
+    om.setContentLength(size);
+    final PutObjectRequest putObjectRequest =
+        fs.newPutObjectRequest(key,
+            om,
+            new ByteArrayInputStream(buffer.toByteArray()));
+            fs.incrementPutStartStatistics(size);
-      LOG.warn("Interrupted object upload:" + ie, ie);
+      LOG.warn("Interrupted object upload: {}", ie, ie);
-              return client.uploadPart(request).getPartETag();
+              return fs.uploadPart(request).getPartETag();
-        LOG.warn("Interrupted partUpload:" + ie, ie);
+        LOG.warn("Interrupted partUpload: {}", ie, ie);
+        fs.incrementStatistic(OBJECT_MULTIPART_UPLOAD_ABORTED);
-            "uploaded parts: " + e2, e2);
+            "uploaded parts: {}", e2, e2);

MOV26 UPD40 INS29 MOV60 INS65 INS65 INS41 INS60 INS66 INS66 INS32 INS83 INS39 INS59 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 UPD42 UPD42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 MOV14 INS21 INS60 INS42 INS32 INS39 INS59 INS45 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS21 INS45 INS42 INS42 INS32 INS21 UPD45 INS42 INS42 INS42 MOV42 INS32 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL83 DEL83 DEL40 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL45 DEL42 DEL27 DEL45 DEL42 DEL27 DEL42