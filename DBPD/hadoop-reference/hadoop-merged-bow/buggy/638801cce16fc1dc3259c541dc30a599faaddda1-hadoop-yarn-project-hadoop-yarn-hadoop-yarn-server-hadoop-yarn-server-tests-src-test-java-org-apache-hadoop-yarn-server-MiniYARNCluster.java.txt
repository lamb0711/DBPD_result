HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.util.Shell;
+import org.apache.hadoop.util.Shell.ShellCommandExecutor;
-    this.testWorkDir = new File("target",
-        testName.replace("$", ""));
+    String testSubDir = testName.replace("$", "");
+    File targetWorkDir = new File("target", testSubDir);
-          new Path(testWorkDir.getAbsolutePath()), true);
+          new Path(targetWorkDir.getAbsolutePath()), true);
+
+    if (Shell.WINDOWS) {
+      // The test working directory can exceed the maximum path length supported
+      // by some Windows APIs and cmd.exe (260 characters).  To work around this,
+      // create a symlink in temporary storage with a much shorter path,
+      // targeting the full path to the test working directory.  Then, use the
+      // symlink as the test working directory.
+      String targetPath = targetWorkDir.getAbsolutePath();
+      File link = new File(System.getProperty("java.io.tmpdir"),
+        String.valueOf(System.currentTimeMillis()));
+      String linkPath = link.getAbsolutePath();
+
+      try {
+        FileContext.getLocalFSFileContext().delete(new Path(linkPath), true);
+      } catch (IOException e) {
+        throw new YarnException("could not cleanup symlink: " + linkPath, e);
+      }
+
+      // Guarantee target exists before creating symlink.
+      targetWorkDir.mkdirs();
+
+      ShellCommandExecutor shexec = new ShellCommandExecutor(
+        Shell.getSymlinkCommand(targetPath, linkPath));
+      try {
+        shexec.execute();
+      } catch (IOException e) {
+        throw new YarnException(String.format(
+          "failed to create symlink from %s to %s, shell output: %s", linkPath,
+          targetPath, shexec.getOutput()), e);
+      }
+
+      this.testWorkDir = link;
+    } else {
+      this.testWorkDir = targetWorkDir;
+    }
+
+
+      if (Shell.WINDOWS) {
+        // On Windows, clean up the short temporary symlink that was created to
+        // work around path length limitation.
+        String testWorkDirPath = testWorkDir.getAbsolutePath();
+        try {
+          FileContext.getLocalFSFileContext().delete(new Path(testWorkDirPath),
+            true);
+        } catch (IOException e) {
+          LOG.warn("could not cleanup symlink: " +
+            testWorkDir.getAbsolutePath());
+        }
+      }
-        dirs[i].mkdir();
+        dirs[i].mkdirs();

INS26 INS26 INS40 INS40 INS60 INS60 INS25 INS8 INS43 INS59 MOV43 INS59 INS40 INS8 INS8 MOV25 MOV21 INS25 INS42 INS42 MOV32 INS42 INS14 INS60 INS60 INS60 INS54 INS21 INS60 INS54 MOV21 INS21 INS40 INS8 INS43 INS45 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS43 INS59 INS8 INS12 INS7 INS60 INS54 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS21 INS44 INS8 INS42 INS22 INS42 INS43 INS59 INS8 INS12 INS32 INS42 INS42 INS43 INS32 INS32 INS42 INS42 INS32 INS43 INS42 INS53 INS43 INS32 INS32 INS43 INS42 INS53 INS52 INS42 INS42 INS42 MOV32 INS21 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS32 INS42 INS14 INS9 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS27 INS42 INS43 INS32 INS42 INS32 INS42 INS14 INS9 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS32 INS42 INS42 DEL45 DEL14 DEL8