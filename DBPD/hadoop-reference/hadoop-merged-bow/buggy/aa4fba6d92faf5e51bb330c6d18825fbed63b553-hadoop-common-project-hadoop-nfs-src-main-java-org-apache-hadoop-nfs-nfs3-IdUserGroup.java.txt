HDFS-5587. add debug information when NFS fails to start with duplicate user or group names. Contributed by Brandon Li

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548028 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
-  // Maps for id to name map. Guarded by this object monitor lock */
+  // Maps for id to name map. Guarded by this object monitor lock
-  public IdUserGroup() {
+  static public class DuplicateNameOrIdException extends IOException {
+    private static final long serialVersionUID = 1L;
+
+    public DuplicateNameOrIdException(String msg) {
+      super(msg);
+    }
+  }
+  
+  public IdUserGroup() throws IOException {
+  // If can't update the maps, will keep using the old ones
-      updateMaps();
+      try {
+        updateMaps();
+      } catch (IOException e) {
+        LOG.error("Can't update the maps. Will use the old ones,"
+            + " which can potentially cause problem.", e);
+      }
+  private static final String DUPLICATE_NAME_ID_DEBUG_INFO = "NFS gateway can't start with duplicate name or id on the host system.\n"
+      + "This is because HDFS (non-kerberos cluster) uses name as the only way to identify a user or group.\n"
+      + "The host system with duplicated user/group name or id might work fine most of the time by itself.\n"
+      + "However when NFS gateway talks to HDFS, HDFS accepts only user and group name.\n"
+      + "Therefore, same name means the same user or same group. To find the duplicated names/ids, one can do:\n"
+      + "<getent passwd | cut -d: -f1,3> and <getent group | cut -d: -f1,3> on Linux systms,\n"
+      + "<dscl . -list /Users UniqueID> and <dscl . -list /Groups PrimaryGroupID> on MacOS.";
+  
+   * @throws IOException 
-  private void updateMapInternal(BiMap<Integer, String> map, String name,
-      String command, String regex) throws IOException {
+  @VisibleForTesting
+  public static void updateMapInternal(BiMap<Integer, String> map, String mapName,
+      String command, String regex) throws IOException  {
-          throw new IOException("Can't parse " + name + " list entry:" + line);
+          throw new IOException("Can't parse " + mapName + " list entry:" + line);
-        LOG.debug("add " + name + ":" + nameId[0] + " id:" + nameId[1]);
+        LOG.debug("add to " + mapName + "map:" + nameId[0] + " id:" + nameId[1]);
+        // HDFS can't differentiate duplicate names with simple authentication
+        Integer key = Integer.valueOf(nameId[1]);
+        String value = nameId[0];
+        if (map.containsKey(key)) {
+          LOG.error(String.format(
+              "Got duplicate id:(%d, %s), existing entry: (%d, %s).\n%s", key,
+              value, key, map.get(key), DUPLICATE_NAME_ID_DEBUG_INFO));
+          throw new DuplicateNameOrIdException("Got duplicate id.");
+        }
+        if (map.containsValue(nameId[0])) {
+          LOG.error(String.format(
+              "Got duplicate name:(%d, %s), existing entry: (%d, %s) \n%s",
+              key, value, map.inverse().get(value), value,
+              DUPLICATE_NAME_ID_DEBUG_INFO));
+          throw new DuplicateNameOrIdException("Got duplicate name");
+        }
-      LOG.info("Updated " + name + " map size:" + map.size());
+      LOG.info("Updated " + mapName + " map size:" + map.size());
-      LOG.error("Can't update map " + name);
+      LOG.error("Can't update " + mapName + " map");
-  synchronized public void updateMaps() {
+  synchronized public void updateMaps() throws IOException {
-    try {
-      if (OS.startsWith("Linux")) {
-        updateMapInternal(uMap, "user", LINUX_GET_ALL_USERS_CMD, ":");
-        updateMapInternal(gMap, "group", LINUX_GET_ALL_GROUPS_CMD, ":");
-      } else if (OS.startsWith("Mac")) {
-        updateMapInternal(uMap, "user", MAC_GET_ALL_USERS_CMD, "\\s+");
-        updateMapInternal(gMap, "group", MAC_GET_ALL_GROUPS_CMD, "\\s+");
-      } else {
-        throw new IOException("Platform is not supported:" + OS);
-      }
-    } catch (IOException e) {
-      LOG.error("Can't update maps:" + e);
+    if (!OS.startsWith("Linux") && !OS.startsWith("Mac")) {
+      LOG.error("Platform is not supported:" + OS
+          + ". Can't update user map and group map and"
+          + " 'nobody' will be used for any user and group.");
+
+    if (OS.startsWith("Linux")) {
+      updateMapInternal(uMap, "user", LINUX_GET_ALL_USERS_CMD, ":");
+      updateMapInternal(gMap, "group", LINUX_GET_ALL_GROUPS_CMD, ":");
+    } else {
+      // Mac
+      updateMapInternal(uMap, "user", MAC_GET_ALL_USERS_CMD, "\\s+");
+      updateMapInternal(gMap, "group", MAC_GET_ALL_GROUPS_CMD, "\\s+");
+    }
+

INS26 INS40 INS55 INS23 INS83 INS83 INS42 INS43 INS23 INS31 MOV43 INS83 INS83 INS83 INS43 INS59 INS78 UPD83 INS83 INS44 INS43 MOV8 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS42 MOV44 INS8 INS42 INS42 INS27 INS65 INS42 INS43 INS42 INS42 MOV60 MOV60 MOV25 MOV21 MOV21 MOV21 INS42 INS34 UPD42 INS46 INS8 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS66 INS42 INS27 INS8 MOV32 MOV8 INS42 MOV21 INS54 INS38 INS38 INS21 INS41 INS8 INS12 INS32 MOV32 INS32 MOV21 MOV44 INS8 INS60 INS60 INS25 INS25 INS42 INS42 INS45 INS42 INS42 INS27 INS21 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS8 UPD42 INS45 INS42 INS45 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS2 INS42 INS42 INS42 INS21 INS53 INS42 INS42 INS2 INS21 INS53 UPD45 UPD42 INS45 INS42 INS42 INS27 INS42 UPD45 UPD42 UPD45 INS42 INS42 INS2 INS42 INS34 INS32 INS14 INS42 INS34 INS32 INS14 INS45 INS45 INS42 INS34 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS32 INS43 INS45 UPD42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL8 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL8