HDFS-6956. Allow dynamically changing the tracing level in Hadoop servers (cmccabe)

-import java.util.Collection;
-import java.util.HashSet;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+
+import org.apache.hadoop.tracing.SpanReceiverInfo.ConfigurationPair;
+ 
-public class SpanReceiverHost {
-  public static final String SPAN_RECEIVERS_CONF_KEY = "hadoop.trace.spanreceiver.classes";
+public class SpanReceiverHost implements TraceAdminProtocol {
+  public static final String SPAN_RECEIVERS_CONF_KEY =
+    "hadoop.trace.spanreceiver.classes";
-  private Collection<SpanReceiver> receivers = new HashSet<SpanReceiver>();
+  private final TreeMap<Long, SpanReceiver> receivers =
+      new TreeMap<Long, SpanReceiver>();
+  private Configuration config;
+  private long highestId = 1;
+  private static List<ConfigurationPair> EMPTY = Collections.emptyList();
+
-  public void loadSpanReceivers(Configuration conf) {
-    Class<?> implClass = null;
-    String[] receiverNames = conf.getTrimmedStrings(SPAN_RECEIVERS_CONF_KEY);
+  public synchronized void loadSpanReceivers(Configuration conf) {
+    config = new Configuration(conf);
+    String[] receiverNames =
+        config.getTrimmedStrings(SPAN_RECEIVERS_CONF_KEY);
-        implClass = Class.forName(className);
-        receivers.add(loadInstance(implClass, conf));
+        SpanReceiver rcvr = loadInstance(className, EMPTY);
+        Trace.addReceiver(rcvr);
+        receivers.put(highestId++, rcvr);
-      } catch (ClassNotFoundException e) {
-        LOG.warn("Class " + className + " cannot be found.", e);
-        LOG.warn("Load SpanReceiver " + className + " failed.", e);
+        LOG.error("Failed to load SpanReceiver", e);
-    for (SpanReceiver rcvr : receivers) {
-      Trace.addReceiver(rcvr);
-    }
-  private SpanReceiver loadInstance(Class<?> implClass, Configuration conf)
-      throws IOException {
+  private synchronized SpanReceiver loadInstance(String className,
+      List<ConfigurationPair> extraConfig) throws IOException {
+    Class<?> implClass = null;
-      Object o = ReflectionUtils.newInstance(implClass, conf);
+      implClass = Class.forName(className);
+      Object o = ReflectionUtils.newInstance(implClass, config);
-      impl.configure(wrapHadoopConf(conf));
+      impl.configure(wrapHadoopConf(config, extraConfig));
+    } catch (ClassCastException e) {
+      throw new IOException("Class " + className +
+          " does not implement SpanReceiver.");
+    } catch (ClassNotFoundException e) {
+      throw new IOException("Class " + className + " cannot be found.");
-      throw new IOException(e);
+      throw new IOException("Got SecurityException while loading " +
+          "SpanReceiver " + className);
-      throw new IOException(e);
+      throw new IOException("Got IllegalArgumentException while loading " +
+          "SpanReceiver " + className, e);
-      throw new IOException(e);
+      throw new IOException("Got RuntimeException while loading " +
+          "SpanReceiver " + className, e);
-
-  private static HTraceConfiguration wrapHadoopConf(final Configuration conf) {
+  private static HTraceConfiguration wrapHadoopConf(final Configuration conf,
+          List<ConfigurationPair> extraConfig) {
+    final HashMap<String, String> extraMap = new HashMap<String, String>();
+    for (ConfigurationPair pair : extraConfig) {
+      extraMap.put(pair.getKey(), pair.getValue());
+    }
+        if (extraMap.containsKey(key)) {
+          return extraMap.get(key);
+        }
+        if (extraMap.containsKey(key)) {
+          return extraMap.get(key);
+        }
-    for (SpanReceiver rcvr : receivers) {
+    for (SpanReceiver rcvr : receivers.values()) {
+    receivers.clear();
+  }
+
+  public synchronized SpanReceiverInfo[] listSpanReceivers()
+      throws IOException {
+    SpanReceiverInfo info[] = new SpanReceiverInfo[receivers.size()];
+    int i = 0;
+
+    for(Map.Entry<Long, SpanReceiver> entry : receivers.entrySet()) {
+      info[i] = new SpanReceiverInfo(entry.getKey(),
+          entry.getValue().getClass().getName());
+      i++;
+    }
+    return info;
+  }
+
+  public synchronized long addSpanReceiver(SpanReceiverInfo info)
+      throws IOException {
+    StringBuilder configStringBuilder = new StringBuilder();
+    String prefix = "";
+    for (ConfigurationPair pair : info.configPairs) {
+      configStringBuilder.append(prefix).append(pair.getKey()).
+          append(" = ").append(pair.getValue());
+      prefix = ", ";
+    }
+    SpanReceiver rcvr = null;
+    try {
+      rcvr = loadInstance(info.getClassName(), info.configPairs);
+    } catch (IOException e) {
+      LOG.info("Failed to add SpanReceiver " + info.getClassName() +
+          " with configuration " + configStringBuilder.toString(), e);
+      throw e;
+    } catch (RuntimeException e) {
+      LOG.info("Failed to add SpanReceiver " + info.getClassName() +
+          " with configuration " + configStringBuilder.toString(), e);
+      throw e;
+    }
+    Trace.addReceiver(rcvr);
+    long newId = highestId++;
+    receivers.put(newId, rcvr);
+    LOG.info("Successfully added SpanReceiver " + info.getClassName() +
+        " with configuration " + configStringBuilder.toString());
+    return newId;
+  }
+
+  public synchronized void removeSpanReceiver(long spanReceiverId)
+      throws IOException {
+    SpanReceiver rcvr = receivers.remove(spanReceiverId);
+    if (rcvr == null) {
+      throw new IOException("There is no span receiver with id " + spanReceiverId);
+    }
+    Trace.removeReceiver(rcvr);
+    rcvr.close();
+    LOG.info("Successfully removed SpanReceiver " + spanReceiverId +
+        " with class " + rcvr.getClass().getName());

INS26 INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS42 INS83 UPD74 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS44 INS83 INS83 INS5 INS42 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS43 INS8 UPD43 INS43 MOV43 INS42 INS42 INS42 INS34 INS43 INS43 INS42 INS32 INS21 INS43 UPD42 INS74 UPD42 MOV60 INS74 INS42 INS60 INS70 INS21 INS43 INS85 INS42 INS60 INS60 INS70 INS41 INS43 INS42 INS42 INS60 INS60 INS70 INS60 INS54 INS21 INS60 INS21 INS21 INS41 INS39 INS42 INS42 INS60 INS25 INS21 INS21 INS21 UPD42 INS42 UPD74 INS42 INS42 INS42 INS42 INS7 UPD42 MOV42 INS43 INS43 INS12 MOV12 INS43 INS43 INS83 INS74 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS43 INS59 INS39 INS59 INS44 INS32 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS44 INS40 INS8 INS43 INS59 INS8 INS12 INS12 INS32 INS39 INS59 INS32 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS32 UPD43 INS43 MOV43 INS42 INS14 INS42 UPD42 MOV42 MOV21 INS44 INS8 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS85 INS3 INS42 INS34 INS74 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS42 INS21 INS21 INS42 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS37 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 UPD42 INS42 INS43 INS42 UPD42 INS43 INS42 INS53 INS53 INS42 INS42 INS42 INS74 INS42 INS32 INS5 INS32 INS43 INS43 INS43 INS7 INS37 INS43 INS42 INS32 INS7 INS7 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS14 INS45 INS42 INS45 INS32 INS42 INS60 MOV21 INS21 INS42 INS14 INS14 INS43 INS43 INS43 INS42 INS42 INS32 INS32 INS43 INS85 INS42 INS42 INS40 INS42 INS42 INS2 INS14 INS42 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS32 INS42 INS43 INS59 INS32 UPD42 UPD42 INS42 MOV43 INS27 INS43 MOV27 INS27 INS27 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS25 INS42 INS42 INS42 INS43 INS32 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS37 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS45 INS45 INS42 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS32 INS45 INS32 INS45 INS32 INS45 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 INS45 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS41 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL45 DEL42 DEL45 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL43 DEL76 DEL74 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42