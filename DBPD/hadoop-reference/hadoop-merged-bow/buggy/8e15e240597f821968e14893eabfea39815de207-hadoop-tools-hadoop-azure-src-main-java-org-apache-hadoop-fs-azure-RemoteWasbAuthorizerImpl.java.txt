HADOOP-13945. Azure: Add Kerberos and Delegation token support to WASB client. Contributed by Santhosh G Nayak

Change-Id: I39fb0a3b0491bf2160571366939a0502a0045429

+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.Validate;
+import org.apache.hadoop.fs.azure.security.Constants;
+import org.apache.hadoop.fs.azure.security.SecurityUtils;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
+import org.apache.hadoop.security.authentication.client.AuthenticationException;
+import org.apache.hadoop.security.authentication.client.Authenticator;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.TokenIdentifier;
+import org.apache.hadoop.security.token.delegation.web.KerberosDelegationTokenAuthenticator;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.security.PrivilegedExceptionAction;
+import java.util.Iterator;
-  private String remoteAuthorizerServiceUrl = "";
+  public static final Logger LOG = LoggerFactory
+      .getLogger(RemoteWasbAuthorizerImpl.class);
+
+  private String remoteAuthorizerServiceUrl = null;
-      "delegation_token";
+      "delegation";
+  private String delegationToken;
+  private boolean isSecurityEnabled;
+  private boolean isKerberosSupportEnabled;
+    LOG.debug("Initializing RemoteWasbAuthorizerImpl instance");
+    Iterator<Token<? extends TokenIdentifier>> tokenIterator = null;
+    try {
+          delegationToken = SecurityUtils.getDelegationTokenFromCredentials();
+    } catch (IOException e) {
+      final String msg = "Error in fetching the WASB delegation token";
+      LOG.error(msg, e);
+      throw new IOException(msg, e);
+    }
-    remoteAuthorizerServiceUrl = conf.get(KEY_REMOTE_AUTH_SERVICE_URL);
+    remoteAuthorizerServiceUrl = SecurityUtils
+        .getRemoteAuthServiceUrls(conf);
-          + " in configuration.");
+              + " in configuration.");
+    this.isSecurityEnabled = UserGroupInformation.isSecurityEnabled();
+    this.isKerberosSupportEnabled = conf
+        .getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);
-  public boolean authorize(String wasbAbsolutePath, String accessType,
-      String delegationToken) throws WasbAuthorizationException, IOException {
+  public boolean authorize(String wasbAbsolutePath, String accessType)
+      throws WasbAuthorizationException, IOException {
+      try {
+        URIBuilder uriBuilder = new URIBuilder(remoteAuthorizerServiceUrl);
+        uriBuilder.setPath("/" + CHECK_AUTHORIZATION_OP);
+        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,
+            wasbAbsolutePath);
+        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,
+            accessType);
+        if (isSecurityEnabled && StringUtils.isNotEmpty(delegationToken)) {
+          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
+              delegationToken);
+        }
-    try {
-      URIBuilder uriBuilder = new URIBuilder(remoteAuthorizerServiceUrl);
-      uriBuilder.setPath("/" + CHECK_AUTHORIZATION_OP);
-      uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,
-          wasbAbsolutePath);
-      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,
-          accessType);
-      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,
-          delegationToken);
+        String responseBody = null;
+        UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
+        UserGroupInformation connectUgi = ugi.getRealUser();
+        if (connectUgi == null) {
+          connectUgi = ugi;
+        } else {
+          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());
+        }
+        if (isSecurityEnabled && !connectUgi.hasKerberosCredentials()) {
+          connectUgi = UserGroupInformation.getLoginUser();
+        }
+        connectUgi.checkTGTAndReloginFromKeytab();
-      String responseBody = remoteCallHelper.makeRemoteGetRequest(
-          new HttpGet(uriBuilder.build()));
+        try {
+          responseBody = connectUgi
+              .doAs(new PrivilegedExceptionAction<String>() {
+                @Override
+                public String run() throws Exception {
+                  AuthenticatedURL.Token token = null;
+                  HttpGet httpGet = new HttpGet(uriBuilder.build());
+                  if (isKerberosSupportEnabled && UserGroupInformation
+                      .isSecurityEnabled() && (delegationToken == null
+                      || delegationToken.isEmpty())) {
+                    token = new AuthenticatedURL.Token();
+                    final Authenticator kerberosAuthenticator = new KerberosDelegationTokenAuthenticator();
+                    try {
+                      kerberosAuthenticator
+                          .authenticate(uriBuilder.build().toURL(), token);
+                      Validate.isTrue(token.isSet(),
+                          "Authenticated Token is NOT present. The request cannot proceed.");
+                    } catch (AuthenticationException e){
+                      throw new IOException("Authentication failed in check authorization", e);
+                    }
+                    if (token != null) {
+                      httpGet.setHeader("Cookie",
+                          AuthenticatedURL.AUTH_COOKIE + "=" + token);
+                    }
+                  }
+                  return remoteCallHelper.makeRemoteGetRequest(httpGet);
+                }
+              });
+        } catch (InterruptedException e) {
+          LOG.error("Error in check authorization", e);
+          throw new WasbAuthorizationException("Error in check authorize", e);
+        }
-      ObjectMapper objectMapper = new ObjectMapper();
-      RemoteAuthorizerResponse authorizerResponse =
-          objectMapper.readValue(responseBody, RemoteAuthorizerResponse.class);
+        ObjectMapper objectMapper = new ObjectMapper();
+        RemoteAuthorizerResponse authorizerResponse =
+            objectMapper
+            .readValue(responseBody, RemoteAuthorizerResponse.class);
-      if (authorizerResponse == null) {
-        throw new WasbAuthorizationException(
-            "RemoteAuthorizerResponse object null from remote call");
-      } else if (authorizerResponse.getResponseCode()
-          == REMOTE_CALL_SUCCESS_CODE) {
-        return authorizerResponse.getAuthorizationResult();
-      } else {
-        throw new WasbAuthorizationException("Remote authorization"
-            + " service encountered an error "
-            + authorizerResponse.getResponseMessage());
+        if (authorizerResponse == null) {
+          throw new WasbAuthorizationException(
+              "RemoteAuthorizerResponse object null from remote call");
+        } else if (authorizerResponse.getResponseCode()
+            == REMOTE_CALL_SUCCESS_CODE) {
+          return authorizerResponse.getAuthorizationResult();
+        } else {
+          throw new WasbAuthorizationException("Remote authorization"
+              + " serivce encountered an error "
+              + authorizerResponse.getResponseMessage());
+        }
+      } catch (URISyntaxException | WasbRemoteCallException
+          | JsonParseException | JsonMappingException ex) {
+        throw new WasbAuthorizationException(ex);
-    } catch (URISyntaxException | WasbRemoteCallException
-        | JsonParseException | JsonMappingException ex) {
-      throw new WasbAuthorizationException(ex);
-    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS42 INS32 INS33 UPD45 INS42 INS42 INS42 INS42 INS21 INS60 INS54 INS21 INS21 INS42 INS42 INS57 INS32 INS74 INS59 INS8 INS12 INS7 INS7 INS43 INS42 INS42 INS45 INS43 INS74 INS42 INS33 INS21 INS44 INS8 INS22 INS32 INS22 INS32 INS25 INS60 INS60 INS60 INS25 INS25 INS21 INS54 INS42 INS42 INS43 INS76 INS7 INS43 INS42 INS60 INS21 INS53 UPD42 UPD42 UPD42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS40 INS9 INS27 INS8 MOV43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS27 INS8 INS32 INS8 INS12 INS42 INS43 INS42 INS32 INS42 INS83 INS43 INS59 INS32 INS14 INS42 INS32 MOV21 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS38 INS21 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS32 INS7 INS7 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS45 INS42 INS43 INS45 INS42 INS74 INS1 INS42 UPD45 INS43 INS43 INS31 INS42 INS42 INS78 INS83 MOV43 INS42 INS43 INS8 INS42 INS42 INS60 MOV60 INS25 INS41 INS43 INS59 INS43 INS27 INS8 INS32 INS40 INS42 INS33 INS42 INS42 MOV14 INS42 INS32 INS36 INS21 INS60 INS54 INS25 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS83 INS43 INS59 INS8 INS12 INS27 INS8 INS27 INS32 INS42 INS14 INS42 INS42 INS14 INS21 INS21 INS44 INS8 INS42 INS33 INS21 INS42 INS33 INS42 INS42 INS43 INS43 INS32 INS32 INS43 INS42 INS53 INS32 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS45 INS42 INS14 INS42 INS42 INS45 INS27 INS32 INS42 INS42 INS42 INS43 INS45 INS42 INS40 INS45 INS42 INS42 INS42 INS42 DEL45 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32