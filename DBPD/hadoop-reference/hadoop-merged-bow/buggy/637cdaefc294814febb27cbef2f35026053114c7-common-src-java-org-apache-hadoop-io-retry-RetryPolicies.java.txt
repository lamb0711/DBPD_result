HADOOP-7380. Add client failover functionality to o.a.h.io.(ipc|retry). Contributed by Aaron T. Myers


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1144043 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.net.ConnectException;
+import java.net.NoRouteToHostException;
+import java.net.SocketException;
+import java.net.UnknownHostException;
-import java.util.Set;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.ipc.StandbyException;
+  public static final Log LOG = LogFactory.getLog(RetryPolicies.class);
+  
+  public static final RetryPolicy failoverOnNetworkException(int maxFailovers) {
+    return failoverOnNetworkException(TRY_ONCE_THEN_FAIL, maxFailovers);
+  }
+  
+  public static final RetryPolicy failoverOnNetworkException(
+      RetryPolicy fallbackPolicy, int maxFailovers) {
+    return new FailoverOnNetworkExceptionRetry(fallbackPolicy, maxFailovers);
+  }
+  
-    public boolean shouldRetry(Exception e, int retries) throws Exception {
+    public RetryAction shouldRetry(Exception e, int retries, int failovers,
+        boolean isMethodIdempotent) throws Exception {
-    public boolean shouldRetry(Exception e, int retries) throws Exception {
-      return false;
+    public RetryAction shouldRetry(Exception e, int retries, int failovers,
+        boolean isMethodIdempotent) throws Exception {
+      return RetryAction.FAIL;
-    public boolean shouldRetry(Exception e, int retries) throws Exception {
-      return true;
+    public RetryAction shouldRetry(Exception e, int retries, int failovers,
+        boolean isMethodIdempotent) throws Exception {
+      return RetryAction.RETRY;
-    public boolean shouldRetry(Exception e, int retries) throws Exception {
+    public RetryAction shouldRetry(Exception e, int retries, int failovers,
+        boolean isMethodIdempotent) throws Exception {
-      return true;
+      return RetryAction.RETRY;
-    public boolean shouldRetry(Exception e, int retries) throws Exception {
+    public RetryAction shouldRetry(Exception e, int retries, int failovers,
+        boolean isMethodIdempotent) throws Exception {
-      return policy.shouldRetry(e, retries);
+      return policy.shouldRetry(e, retries, failovers, isMethodIdempotent);
-    public boolean shouldRetry(Exception e, int retries) throws Exception {
+    public RetryAction shouldRetry(Exception e, int retries, int failovers,
+        boolean isMethodIdempotent) throws Exception {
-      return policy.shouldRetry(e, retries);
+      return policy.shouldRetry(e, retries, failovers, isMethodIdempotent);
+  
+  /*
+   * Fail over and retry in the case of:
+   *   Remote StandbyException (server is up, but is not the active server)
+   *   Immediate socket exceptions (e.g. no route to host, econnrefused)
+   *   Socket exceptions after initial connection when operation is idempotent
+   * 
+   * Fail immediately in the case of:
+   *   Socket exceptions after initial connection when operation is not idempotent
+   * 
+   * Fall back on underlying retry policy otherwise.
+   */
+  static class FailoverOnNetworkExceptionRetry implements RetryPolicy {
+    
+    private RetryPolicy fallbackPolicy;
+    private int maxFailovers;
+    
+    public FailoverOnNetworkExceptionRetry(RetryPolicy fallbackPolicy,
+        int maxFailovers) {
+      this.fallbackPolicy = fallbackPolicy;
+      this.maxFailovers = maxFailovers;
+    }
+
+    @Override
+    public RetryAction shouldRetry(Exception e, int retries,
+        int failovers, boolean isMethodIdempotent) throws Exception {
+      if (failovers >= maxFailovers) {
+        LOG.info("Failovers (" + failovers + ") exceeded maximum allowed ("
+            + maxFailovers + ")");
+        return RetryAction.FAIL;
+      }
+      
+      if (e instanceof ConnectException ||
+          e instanceof NoRouteToHostException ||
+          e instanceof UnknownHostException ||
+          e instanceof StandbyException) {
+        return RetryAction.FAILOVER_AND_RETRY;
+      } else if (e instanceof SocketException ||
+                 e instanceof IOException) {
+        if (isMethodIdempotent) {
+          return RetryAction.FAILOVER_AND_RETRY;
+        } else {
+          return RetryAction.FAIL;
+        }
+      } else {
+        return fallbackPolicy.shouldRetry(e, retries, failovers,
+            isMethodIdempotent);
+      }
+    }
+    
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV55 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS83 INS43 INS42 INS44 INS44 INS8 UPD42 UPD42 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS42 INS42 INS32 INS42 INS39 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS41 INS43 INS42 INS44 INS44 INS43 INS42 INS44 INS44 INS43 INS42 INS44 INS44 INS43 INS42 INS44 INS44 INS43 INS42 INS44 INS44 INS43 INS42 INS44 INS44 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS57 INS32 INS42 INS14 INS42 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS25 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS40 INS40 INS40 INS42 INS7 INS7 INS42 INS27 INS8 INS27 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS21 INS41 INS62 INS62 INS62 INS62 INS41 INS27 INS8 INS8 INS52 INS42 INS52 INS42 INS32 INS40 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS40 INS62 INS62 INS25 INS41 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS8 INS8 INS32 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 DEL39 DEL42 DEL39 DEL42 DEL9 DEL39 DEL42 DEL9 DEL39 DEL42 DEL9 DEL39 DEL42 DEL39 DEL42