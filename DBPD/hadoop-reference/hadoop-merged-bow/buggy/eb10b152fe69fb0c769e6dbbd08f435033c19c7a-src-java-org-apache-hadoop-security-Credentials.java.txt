HADOOP-6861. Adds new non-static methods in Credentials to read and write token storage file. Contributed by Jitendra Pandey & Owen O'Malley.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@966911 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.util.Arrays;
+import org.apache.hadoop.fs.FSDataOutputStream;
-   * Convenience method for reading a file, and loading the Tokens
+   * Convenience method for reading a token storage file, and loading the Tokens
-   * @param ugi
-  public static void readTokensAndLoadInUGI(String filename, Configuration conf, 
-      UserGroupInformation ugi) throws IOException {
-    Path localTokensFile = new Path (filename);
-    FileSystem localFS = FileSystem.getLocal(conf);
-    FSDataInputStream in = localFS.open(localTokensFile);
-    Credentials ts = new Credentials();
-    ts.readFields(in);
-    for (Token<? extends TokenIdentifier> token : ts.getAllTokens()) {
-      ugi.addToken(token);
+  public void readTokenStorageFile(Path filename, 
+                                   Configuration conf) throws IOException {
+    FSDataInputStream in = filename.getFileSystem(conf).open(filename);
+    try {
+    readTokenStorageStream(in);
+    } catch(IOException ioe) {
+      throw new IOException("Exception reading " + filename, ioe);
+    } finally {
+      in.close();
+  
+  /**
+   * Convenience method for reading a token storage file directly from a 
+   * datainputstream
+   */
+  public void readTokenStorageStream(DataInputStream in) throws IOException {
+    byte[] magic = new byte[TOKEN_STORAGE_MAGIC.length];
+    in.readFully(magic);
+    if (!Arrays.equals(magic, TOKEN_STORAGE_MAGIC)) {
+      throw new IOException("Bad header found in token storage.");
+    }
+    byte version = in.readByte();
+    if (version != TOKEN_STORAGE_VERSION) {
+      throw new IOException("Unknown version " + version + 
+                            " in token storage.");
+    }
+    readFields(in);
+  }
+  
+  private static final byte[] TOKEN_STORAGE_MAGIC = "HDTS".getBytes();
+  private static final byte TOKEN_STORAGE_VERSION = 0;
+  
+  public void writeTokenStorageToStream(DataOutputStream os)
+    throws IOException {
+    os.write(TOKEN_STORAGE_MAGIC);
+    os.write(TOKEN_STORAGE_VERSION);
+    write(os);
+  }
+
+  public void writeTokenStorageFile(Path filename, 
+                                    Configuration conf) throws IOException {
+    FSDataOutputStream os = filename.getFileSystem(conf).create(filename);
+    writeTokenStorageToStream(os);
+    os.close();
+  }
+
-      WritableUtils.writeCompressedByteArray(out, e.getValue());  
+      WritableUtils.writeVInt(out, e.getValue().length);
+      out.write(e.getValue());
-      byte[] key = WritableUtils.readCompressedByteArray(in);
-      secretKeysMap.put(alias, key);
+      int len = WritableUtils.readVInt(in);
+      byte[] value = new byte[len];
+      in.readFully(value);
+      secretKeysMap.put(alias, value);
+    }
+  }
+ 
+  /**
+   * Copy all of the credentials from one credential object into another.
+   * @param other the credentials to copy
+   */
+  public void addAll(Credentials other) {
+    for(Map.Entry<Text, byte[]> secret: other.secretKeysMap.entrySet()) {
+      secretKeysMap.put(secret.getKey(), secret.getValue());
+    }
+    for(Map.Entry<Text, Token<?>> token: other.tokenMap.entrySet()){
+      tokenMap.put(token.getKey(), token.getValue());

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS23 INS23 INS31 INS31 INS31 MOV29 MOV83 INS39 INS42 INS44 MOV44 MOV43 INS8 INS29 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS43 INS8 INS83 INS83 INS83 INS5 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 MOV43 INS42 INS60 INS54 INS65 UPD43 UPD42 UPD42 MOV42 INS60 INS21 INS25 MOV60 INS25 INS21 INS39 INS85 INS42 INS32 INS42 INS34 INS43 INS42 INS42 INS21 INS21 INS21 MOV43 INS42 INS43 INS42 INS42 MOV60 INS21 INS21 INS65 INS65 MOV43 INS42 INS70 MOV70 UPD66 MOV43 INS59 INS8 INS12 INS8 INS66 INS66 UPD42 INS5 INS59 INS32 INS38 INS8 INS39 INS27 INS8 INS32 INS45 INS42 INS42 INS32 INS32 INS32 INS42 UPD43 INS32 INS32 INS66 INS42 INS66 INS44 INS32 INS8 INS42 INS32 INS21 INS44 INS8 INS21 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS32 INS53 UPD42 INS32 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS21 INS60 INS21 INS74 INS42 INS40 INS42 MOV21 INS74 INS40 UPD42 INS32 INS42 INS42 INS32 INS43 INS42 INS53 INS32 INS5 INS40 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS32 INS42 INS42 INS32 INS39 MOV5 INS59 INS32 INS43 INS43 INS5 INS43 INS43 UPD74 MOV74 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS39 INS85 INS43 INS45 INS43 INS27 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS22 UPD42 UPD42 UPD42 INS42 INS3 INS42 INS42 INS42 UPD42 INS40 UPD42 MOV42 INS39 INS85 UPD42 UPD42 INS32 INS32 INS40 INS42 UPD76 UPD42 INS42 INS32 INS32 INS43 INS27 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS42 UPD42 INS5 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS45 INS42 INS42 INS42 INS39 INS85 DEL42 DEL65 DEL42 DEL14 DEL32 DEL43 DEL42 DEL44 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL14 DEL59 DEL60 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42