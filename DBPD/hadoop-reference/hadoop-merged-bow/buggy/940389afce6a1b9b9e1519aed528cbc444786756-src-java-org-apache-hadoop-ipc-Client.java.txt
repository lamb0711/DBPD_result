HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.OutputStream;
+import java.security.PrivilegedExceptionAction;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.KerberosInfo;
+import org.apache.hadoop.security.SaslRpcClient;
+import org.apache.hadoop.security.SaslRpcServer.AuthMethod;
+import org.apache.hadoop.security.token.Token;
+import org.apache.hadoop.security.token.TokenIdentifier;
+import org.apache.hadoop.security.token.TokenSelector;
+import org.apache.hadoop.security.token.TokenInfo;
+    private String serverPrincipal;  // server's krb5 principal name
-    private ConnectionId remoteId;                // connection id
+    private final ConnectionId remoteId;                // connection id
+    private final AuthMethod authMethod; // authentication method
+    private final boolean useSasl;
+    private Token<? extends TokenIdentifier> token;
+    private SaslRpcClient saslRpcClient;
+      this.useSasl = UserGroupInformation.isSecurityEnabled();
+      if (useSasl && protocol != null) {
+        TokenInfo tokenInfo = protocol.getAnnotation(TokenInfo.class);
+        if (tokenInfo != null) {
+          TokenSelector<? extends TokenIdentifier> tokenSelector = null;
+          try {
+            tokenSelector = tokenInfo.value().newInstance();
+          } catch (InstantiationException e) {
+            throw new IOException(e.toString());
+          } catch (IllegalAccessException e) {
+            throw new IOException(e.toString());
+          }
+          InetSocketAddress addr = remoteId.getAddress();
+          token = tokenSelector.selectToken(new Text(addr.getAddress()
+              .getHostAddress() + ":" + addr.getPort()), 
+              ticket.getTokens());
+        }
+        KerberosInfo krbInfo = protocol.getAnnotation(KerberosInfo.class);
+        if (krbInfo != null) {
+          String serverKey = krbInfo.value();
+          if (serverKey != null) {
+            serverPrincipal = conf.get(serverKey);
+          }
+        }
+      }
+      
+      if (!useSasl) {
+        authMethod = AuthMethod.SIMPLE;
+      } else if (token != null) {
+        authMethod = AuthMethod.DIGEST;
+      } else {
+        authMethod = AuthMethod.KERBEROS;
+      }
+      if (LOG.isDebugEnabled())
+        LOG.debug("Use " + authMethod + " authentication for protocol "
+            + protocol.getSimpleName());
+    private synchronized void disposeSasl() {
+      if (saslRpcClient != null) {
+        try {
+          saslRpcClient.dispose();
+        } catch (IOException ignored) {
+        }
+      }
+    }
+    
-    private synchronized void setupIOstreams() {
+    private synchronized void setupIOstreams() throws InterruptedException {
+        InputStream inStream = NetUtils.getInputStream(socket);
+        OutputStream outStream = NetUtils.getOutputStream(socket);
+        writeRpcHeader(outStream);
+        if (useSasl) {
+          final InputStream in2 = inStream;
+          final OutputStream out2 = outStream;
+          remoteId.getTicket().doAs(new PrivilegedExceptionAction<Object>() {
+            @Override
+            public Object run() throws IOException {
+              saslRpcClient = new SaslRpcClient(authMethod, token,
+                  serverPrincipal);
+              saslRpcClient.saslConnect(in2, out2);
+              return null;
+            }
+          });
+          inStream = saslRpcClient.getInputStream(inStream);
+          outStream = saslRpcClient.getOutputStream(outStream);
+        }
-            (new PingInputStream(NetUtils.getInputStream(socket))));
+            (new PingInputStream(inStream)));
-            (NetUtils.getInputStream(socket)));
+            (inStream));
-            (new BufferedOutputStream(NetUtils.getOutputStream(socket)));
+            (new BufferedOutputStream(outStream));
-    /* Write the header for each connection
+    /* Write the RPC header */
+    private void writeRpcHeader(OutputStream outStream) throws IOException {
+      DataOutputStream out = new DataOutputStream(new BufferedOutputStream(outStream));
+      // Write out the header, version and authentication method
+      out.write(Server.HEADER.array());
+      out.write(Server.CURRENT_VERSION);
+      authMethod.write(out);
+      out.flush();
+    }
+    
+    /* Write the protocol header for each connection
-      // Write out the header and version
-      out.write(Server.HEADER.array());
-      out.write(Server.CURRENT_VERSION);
-
+      disposeSasl();
-    throws IOException {
+    throws IOException, InterruptedException {
-    throws IOException {
+    throws IOException, InterruptedException {
-                                   throws IOException {
+                                   throws IOException, InterruptedException {

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS43 INS43 INS43 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS8 INS43 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS42 INS42 INS42 INS21 INS25 INS25 INS25 INS25 INS42 INS43 INS42 INS42 INS60 MOV21 MOV21 INS21 INS21 INS21 INS42 INS43 INS7 INS27 INS8 INS38 INS8 INS25 INS32 INS21 INS27 INS8 INS42 INS43 INS59 INS32 INS32 INS32 INS42 INS22 INS32 INS42 INS27 INS60 INS25 INS60 INS25 INS42 INS21 INS27 INS8 INS8 INS42 INS42 INS32 INS42 INS33 INS54 INS60 INS60 INS21 INS25 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS33 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS7 INS42 INS33 INS21 INS21 INS42 INS42 INS27 INS8 INS12 INS43 INS59 INS43 INS59 INS32 INS42 INS8 INS43 INS14 INS42 INS42 INS32 INS42 INS33 INS60 INS54 INS60 INS21 INS42 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS40 INS7 INS7 INS45 INS42 INS45 INS32 INS21 INS44 INS8 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS42 INS57 INS74 INS59 INS8 INS12 INS12 INS43 INS59 INS7 INS42 INS42 INS57 INS43 INS59 INS27 INS8 INS42 INS40 INS42 INS40 INS42 INS42 INS32 INS43 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS7 INS7 INS42 INS43 INS43 INS76 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS7 INS42 INS42 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS43 INS27 INS42 INS42 INS42 INS32 INS43 INS43 INS31 INS42 INS32 INS42 INS43 INS32 INS43 INS32 INS42 INS32 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS41 INS42 INS42 INS7 INS32 INS33 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32