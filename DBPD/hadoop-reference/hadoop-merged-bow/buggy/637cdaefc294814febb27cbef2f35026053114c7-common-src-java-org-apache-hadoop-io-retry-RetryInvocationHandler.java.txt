HADOOP-7380. Add client failover functionality to o.a.h.io.(ipc|retry). Contributed by Aaron T. Myers


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1144043 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.util.StringUtils;
+import org.apache.hadoop.io.retry.RetryPolicy.RetryAction;
-  private Object implementation;
+  private FailoverProxyProvider proxyProvider;
+  private Object currentProxy;
-  public RetryInvocationHandler(Object implementation, RetryPolicy retryPolicy) {
-    this.implementation = implementation;
+  public RetryInvocationHandler(FailoverProxyProvider proxyProvider,
+      RetryPolicy retryPolicy) {
+    this.proxyProvider = proxyProvider;
+    this.currentProxy = proxyProvider.getProxy();
-  public RetryInvocationHandler(Object implementation, Map<String, RetryPolicy> methodNameToPolicyMap) {
-    this.implementation = implementation;
+  public RetryInvocationHandler(FailoverProxyProvider proxyProvider,
+      Map<String, RetryPolicy> methodNameToPolicyMap) {
+    this.proxyProvider = proxyProvider;
+    this.currentProxy = proxyProvider.getProxy();
+    int failovers = 0;
-        if (!policy.shouldRetry(e, retries++)) {
-          LOG.info("Exception while invoking " + method.getName()
-                   + " of " + implementation.getClass() + ". Not retrying."
-                   , e);
+        boolean isMethodIdempotent = proxyProvider.getInterface()
+            .getMethod(method.getName(), method.getParameterTypes())
+            .isAnnotationPresent(Idempotent.class);
+        RetryAction action = policy.shouldRetry(e, retries++, failovers,
+            isMethodIdempotent);
+        if (action == RetryAction.FAIL) {
+          LOG.warn("Exception while invoking " + method.getName()
+                   + " of " + currentProxy.getClass() + ". Not retrying.", e);
+        } else if (action == RetryAction.FAILOVER_AND_RETRY) {
+          LOG.warn("Exception while invoking " + method.getName()
+              + " of " + currentProxy.getClass()
+              + ". Trying to fail over.", e);
+          failovers++;
+          proxyProvider.performFailover(currentProxy);
+          currentProxy = proxyProvider.getProxy();
-              + " of " + implementation.getClass() + ". Retrying."
-              , e);
+              + " of " + currentProxy.getClass() + ". Retrying.", e);
-      return method.invoke(implementation, args);
+      return method.invoke(currentProxy, args);

MOV23 UPD40 INS23 INS83 INS43 INS59 MOV21 MOV21 INS42 INS42 UPD42 UPD43 UPD42 INS21 UPD43 UPD42 INS21 INS60 UPD42 INS7 UPD42 INS7 INS39 INS59 INS22 INS42 INS32 INS22 INS42 INS32 INS42 INS34 INS52 INS42 UPD42 INS42 INS42 INS52 INS42 UPD42 INS42 INS42 UPD42 INS60 INS60 INS39 INS59 INS43 INS59 INS27 INS25 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS27 INS8 INS32 INS42 INS57 INS42 INS42 INS42 MOV37 INS42 INS42 INS42 INS40 INS21 INS21 INS21 INS21 INS32 INS42 INS32 INS32 INS43 UPD42 INS32 INS37 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 INS45 MOV32 INS45 INS32 INS45 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 DEL42 DEL42 DEL32 DEL38