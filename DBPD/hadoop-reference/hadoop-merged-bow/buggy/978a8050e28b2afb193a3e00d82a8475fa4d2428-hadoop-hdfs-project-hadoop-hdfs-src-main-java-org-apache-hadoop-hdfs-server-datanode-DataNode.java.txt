HDFS-2920. fix remaining TODO items. Contributed by Aaron T. Myers and Todd Lipcon.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294923 13f79535-47bb-0310-9956-ffa450edef68

+   * Try to send an error report to the NNs associated with the given
+   * block pool.
+   * @param bpid the block pool ID
+   * @param errCode error code to send
+   * @param errMsg textual message to send
+   */
+  void trySendErrorReport(String bpid, int errCode, String errMsg) {
+    BPOfferService bpos = blockPoolManager.get(bpid);
+    if (bpos == null) {
+      throw new IllegalArgumentException("Bad block pool: " + bpid);
+    }
+    bpos.trySendErrorReport(errCode, errMsg);
+  }
+
+
+  
+  /**
-    // the first BPOS's registration
+    // the first BPOS's registration. See HDFS-2609.
-
-  /**
-   * get the name node address based on the block pool id
-   * @param bpid block pool ID
-   * @return namenode address corresponding to the bpid
-   */
-  public InetSocketAddress getNameNodeAddr(String bpid) {
-    // TODO(HA) this function doesn't make sense! used by upgrade code
-    // Should it return just the active one or simply return the BPService.
-    BPOfferService bp = blockPoolManager.get(bpid);
-    if (bp != null) {
-      return bp.getNNSocketAddress();
-    }
-    LOG.warn("No name node address found for block pool ID " + bpid);
-    return null;
-  }
-  public DatanodeProtocolClientSideTranslatorPB getBPNamenode(String bpid)
+  public DatanodeProtocolClientSideTranslatorPB getActiveNamenodeForBP(String bpid)
-    DatanodeProtocolClientSideTranslatorPB nn = getBPNamenode(block
-        .getBlockPoolId());
-    assert nn != null;
+    DatanodeProtocolClientSideTranslatorPB nn =
+      getActiveNamenodeForBP(block.getBlockPoolId());
+    if (nn == null) {
+      throw new IOException(
+          "Unable to synchronize block " + rBlock + ", since this DN "
+          + " has not acknowledged any NN as active.");
+    }
-   * name node host name as the key and block pool Id as the value
+   * name node host name as the key and block pool Id as the value.
+   * Note that, if there are multiple NNs in an NA nameservice,
+   * a given block pool may be represented twice.
-        info.put(bpos.getNNSocketAddress().getHostName(), bpos.getBlockPoolId());
+        for (BPServiceActor actor : bpos.getBPServiceActors()) {
+          info.put(actor.getNNSocketAddress().getHostName(),
+              bpos.getBlockPoolId());
+        }
-   * @return true - if BPOfferService corresponding to the namenode is alive
+   * @return true if the datanode is connected to a NameNode at the
+   * given address
-  public boolean isBPServiceAlive(InetSocketAddress addr) {
-    BPOfferService bp = blockPoolManager.get(addr);
-    return bp != null ? bp.isAlive() : false;
+  public boolean isConnectedToNN(InetSocketAddress addr) {
+    for (BPOfferService bpos : getAllBpOs()) {
+      for (BPServiceActor bpsa : bpos.getBPServiceActors()) {
+        if (addr.equals(bpsa.getNNSocketAddress())) {
+          return bpsa.isAlive();
+        }
+      }
+    }
+    return false;

MOV31 INS39 INS42 INS44 INS44 UPD42 UPD42 UPD65 INS65 INS39 INS42 INS43 INS42 INS25 INS70 INS41 INS66 UPD66 UPD66 INS42 UPD66 INS42 INS66 UPD42 MOV42 UPD27 INS27 INS8 UPD66 INS66 INS66 UPD66 INS66 INS44 INS32 INS8 INS9 UPD42 UPD42 INS53 UPD42 UPD42 INS42 INS42 MOV42 MOV33 INS53 INS43 INS42 INS42 INS70 INS14 UPD42 INS14 INS8 MOV42 INS44 INS32 INS8 INS43 INS27 INS43 INS27 INS70 INS43 INS42 INS42 UPD42 MOV42 INS25 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS45 INS44 INS32 INS8 INS42 INS32 INS8 INS43 INS42 INS42 INS42 MOV21 MOV42 INS42 INS32 INS41 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV42 UPD42 DEL83 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL45 DEL42 DEL27 DEL33 DEL41 DEL27 DEL6 DEL8 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL32 DEL9 DEL16 DEL41