HADOOP-10632. Minor improvements to Crypto input and output streams. Contributed by Yi Liu

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598485 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
-import org.apache.hadoop.conf.Configuration;
-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_CRYPTO_BUFFER_SIZE_KEY;
-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_CRYPTO_BUFFER_SIZE_DEFAULT;
-@InterfaceAudience.Public
+@InterfaceAudience.Private
-  private static final int MIN_BUFFER_SIZE = 512;
+  private final int bufferSize;
-   * {@link #org.apache.hadoop.fs.ByteBufferReadable}
+   * {@link org.apache.hadoop.fs.ByteBufferReadable}
+  /** DirectBuffer pool */
+  private final Queue<ByteBuffer> bufferPool = 
+      new ConcurrentLinkedQueue<ByteBuffer>();
+  /** Decryptor pool */
+  private final Queue<Decryptor> decryptorPool = 
+      new ConcurrentLinkedQueue<Decryptor>();
+  
-    Preconditions.checkArgument(bufferSize >= MIN_BUFFER_SIZE, 
-        "Minimum value of buffer size is 512.");
-    this.key = key;
-    this.initIV = iv;
-    this.iv = iv.clone();
-    inBuffer = ByteBuffer.allocateDirect(bufferSize);
-    outBuffer = ByteBuffer.allocateDirect(bufferSize);
-    outBuffer.limit(0);
+    this.bufferSize = CryptoStreamUtils.checkBufferSize(codec, bufferSize);
-    try {
-      decryptor = codec.getDecryptor();
-    } catch (GeneralSecurityException e) {
-      throw new IOException(e);
-    }
+    this.key = key.clone();
+    this.initIV = iv.clone();
+    this.iv = iv.clone();
+    inBuffer = ByteBuffer.allocateDirect(this.bufferSize);
+    outBuffer = ByteBuffer.allocateDirect(this.bufferSize);
+    decryptor = getDecryptor();
-    updateDecryptor();
+    resetStreamOffset(streamOffset);
-    this(in, codec, getBufferSize(codec.getConf()), key, iv);
+    this(in, codec, CryptoStreamUtils.getBufferSize(codec.getConf()), key, iv);
-        if (!usingByteBufferRead.booleanValue()) {
-          n = readFromUnderlyingStream();
+        if (!usingByteBufferRead) {
+          n = readFromUnderlyingStream(inBuffer);
-        if (usingByteBufferRead.booleanValue()) {
+        if (usingByteBufferRead) {
-          n = readFromUnderlyingStream();
+          n = readFromUnderlyingStream(inBuffer);
-      decrypt();
+      decrypt(decryptor, inBuffer, outBuffer, padding);
+      padding = afterDecryption(decryptor, inBuffer, streamOffset, iv);
-  private int readFromUnderlyingStream() throws IOException {
+  private int readFromUnderlyingStream(ByteBuffer inBuffer) throws IOException {
-      tmpBuf = new byte[inBuffer.capacity()];
+      tmpBuf = new byte[bufferSize];
-   * Do the decryption using {@link #inBuffer} as input and {@link #outBuffer} 
-   * as output.
+   * Do the decryption using inBuffer as input and outBuffer as output.
+   * Upon return, inBuffer is cleared; the decrypted data starts at 
+   * outBuffer.position() and ends at outBuffer.limit();
-  private void decrypt() throws IOException {
+  private void decrypt(Decryptor decryptor, ByteBuffer inBuffer, 
+      ByteBuffer outBuffer, byte padding) throws IOException {
-      padding = 0;
+  }
+  
+  /**
+   * This method is executed immediately after decryption. Check whether 
+   * decryptor should be updated and recalculate padding if needed. 
+   */
+  private byte afterDecryption(Decryptor decryptor, ByteBuffer inBuffer, 
+      long position, byte[] iv) throws IOException {
+    byte padding = 0;
-      updateDecryptor();
+      updateDecryptor(decryptor, position, iv);
+      padding = getPadding(position);
+      inBuffer.position(padding);
+    return padding;
-  /**
-   * Update the {@link #decryptor}. Calculate the counter and {@link #padding}.
-   */
-  private void updateDecryptor() throws IOException {
-    final long counter = streamOffset / codec.getAlgorithmBlockSize();
-    padding = (byte)(streamOffset % codec.getAlgorithmBlockSize());
-    inBuffer.position(padding); // Set proper position for input data.
+  private long getCounter(long position) {
+    return position / codec.getAlgorithmBlockSize();
+  }
+  
+  private byte getPadding(long position) {
+    return (byte)(position % codec.getAlgorithmBlockSize());
+  }
+  
+  /** Calculate the counter and iv, update the decryptor. */
+  private void updateDecryptor(Decryptor decryptor, long position, byte[] iv) 
+      throws IOException {
+    final long counter = getCounter(position);
-   * Reset the underlying stream offset, and clear {@link #inBuffer} and 
+   * Reset the underlying stream offset; clear {@link #inBuffer} and 
-    updateDecryptor();
+    updateDecryptor(decryptor, offset, iv);
+    padding = getPadding(offset);
+    inBuffer.position(padding); // Set proper position for input data.
-  /** Forcibly free the direct buffer. */
-  private void freeBuffers() {
-    final sun.misc.Cleaner inBufferCleaner =
-        ((sun.nio.ch.DirectBuffer) inBuffer).cleaner();
-    inBufferCleaner.clean();
-    final sun.misc.Cleaner outBufferCleaner =
-        ((sun.nio.ch.DirectBuffer) outBuffer).cleaner();
-    outBufferCleaner.clean();
-  }
-  
-  /** Positioned read. */
+  /** Positioned read. It is thread-safe */
-        /*
-         * Since this operation does not change the current offset of a file, 
-         * streamOffset should not be changed. We need to restore the decryptor 
-         * and outBuffer after decryption.
-         */
-        decrypt(position, buffer, offset, length);
+        // This operation does not change the current offset of the file
+        decrypt(position, buffer, offset, n);
-   * into buffer starting at offset. Restore the {@link #decryptor} and 
-   * {@link #outBuffer} after the decryption.
+   * into buffer starting at offset. It is thread-safe.
-    final byte[] tmp = getTmpBuf();
-    int unread = outBuffer.remaining();
-    if (unread > 0) { // Cache outBuffer
-      outBuffer.get(tmp, 0, unread);
-    }
-    final long curOffset = streamOffset;
-    resetStreamOffset(position);
-    
-    int n = 0;
-    while (n < length) {
-      final int toDecrypt = Math.min(length - n, inBuffer.remaining());
-      inBuffer.put(buffer, offset + n, toDecrypt);
-      // Do decryption
-      decrypt();
-      outBuffer.get(buffer, offset + n, toDecrypt);
-      n += toDecrypt;
-    }
-    
-    // After decryption
-    resetStreamOffset(curOffset);
-    if (unread > 0) { // Restore outBuffer
-      outBuffer.clear();
-      outBuffer.put(tmp, 0, unread);
-      outBuffer.flip();
+    ByteBuffer inBuffer = getBuffer();
+    ByteBuffer outBuffer = getBuffer();
+    Decryptor decryptor = null;
+    try {
+      decryptor = getDecryptor();
+      byte[] iv = initIV.clone();
+      updateDecryptor(decryptor, position, iv);
+      byte padding = getPadding(position);
+      inBuffer.position(padding); // Set proper position for input data.
+      
+      int n = 0;
+      while (n < length) {
+        int toDecrypt = Math.min(length - n, inBuffer.remaining());
+        inBuffer.put(buffer, offset + n, toDecrypt);
+        // Do decryption
+        decrypt(decryptor, inBuffer, outBuffer, padding);
+        
+        outBuffer.get(buffer, offset + n, toDecrypt);
+        n += toDecrypt;
+        padding = afterDecryption(decryptor, inBuffer, position + n, iv);
+      }
+    } finally {
+      returnBuffer(inBuffer);
+      returnBuffer(outBuffer);
+      returnDecryptor(decryptor);
-  /** Positioned read fully. */
+  /** Positioned read fully. It is thread-safe */
-        /*
-         * Since this operation does not change the current offset of the file, 
-         * streamOffset should not be changed. We need to restore the decryptor 
-         * and outBuffer after decryption.
-         */
+        // This operation does not change the current offset of the file
-      decrypt();
-      
-      buf.position(start + len);
-      buf.limit(limit);
-      len += outBuffer.remaining();
-      buf.put(outBuffer);
+      try {
+        decrypt(decryptor, inBuffer, outBuffer, padding);
+        buf.position(start + len);
+        buf.limit(limit);
+        len += outBuffer.remaining();
+        buf.put(outBuffer);
+      } finally {
+        padding = afterDecryption(decryptor, inBuffer, streamOffset - (n - len), iv);
+      }
-  private static int getBufferSize(Configuration conf) {
-    return conf.getInt(HADOOP_SECURITY_CRYPTO_BUFFER_SIZE_KEY, 
-        HADOOP_SECURITY_CRYPTO_BUFFER_SIZE_DEFAULT);
+  /** Get direct buffer from pool */
+  private ByteBuffer getBuffer() {
+    ByteBuffer buffer = bufferPool.poll();
+    if (buffer == null) {
+      buffer = ByteBuffer.allocateDirect(bufferSize);
+    }
+    
+    return buffer;
+  }
+  
+  /** Return direct buffer to pool */
+  private void returnBuffer(ByteBuffer buf) {
+    if (buf != null) {
+      buf.clear();
+      bufferPool.add(buf);
+    }
+  }
+  
+  /** Forcibly free the direct buffers. */
+  private void freeBuffers() {
+    CryptoStreamUtils.freeDB(inBuffer);
+    CryptoStreamUtils.freeDB(outBuffer);
+    cleanBufferPool();
+  }
+  
+  /** Clean direct buffer pool */
+  private void cleanBufferPool() {
+    ByteBuffer buf;
+    while ((buf = bufferPool.poll()) != null) {
+      CryptoStreamUtils.freeDB(buf);
+    }
+  }
+  
+  /** Get decryptor from pool */
+  private Decryptor getDecryptor() throws IOException {
+    Decryptor decryptor = decryptorPool.poll();
+    if (decryptor == null) {
+      try {
+        decryptor = codec.createDecryptor();
+      } catch (GeneralSecurityException e) {
+        throw new IOException(e);
+      }
+    }
+    
+    return decryptor;
+  }
+  
+  /** Return decryptor to pool */
+  private void returnDecryptor(Decryptor decryptor) {
+    if (decryptor != null) {
+      decryptorPool.add(decryptor);
+    }

MOV26 MOV26 MOV23 UPD40 UPD40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD40 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS74 INS59 MOV21 MOV25 INS44 INS44 INS44 INS44 INS44 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 MOV83 MOV39 MOV42 INS44 INS44 INS44 MOV43 INS8 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 MOV29 MOV83 MOV39 MOV42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 UPD39 UPD42 INS8 UPD42 INS65 INS43 INS43 INS42 INS14 INS65 INS43 INS43 INS42 INS14 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS65 INS43 INS42 INS43 INS42 INS39 INS42 INS5 INS42 INS42 INS60 INS25 INS41 INS39 INS42 INS41 INS39 INS42 INS41 INS65 INS43 INS42 INS39 INS42 INS5 INS42 MOV60 MOV21 MOV21 INS21 INS21 INS60 INS60 INS60 INS54 INS65 INS42 INS60 INS25 INS41 INS65 INS43 INS42 INS25 INS21 INS21 INS21 INS65 INS60 INS61 INS65 INS42 INS42 INS60 INS25 INS41 INS65 UPD43 UPD42 INS25 INS66 INS42 INS42 INS74 UPD66 MOV66 INS42 INS42 INS74 INS7 INS7 INS7 INS32 INS42 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS66 UPD66 MOV66 INS42 INS42 INS39 INS85 INS39 INS59 MOV32 INS8 INS42 UPD27 MOV27 INS11 UPD66 MOV66 INS42 INS39 INS85 UPD66 INS7 INS32 UPD66 UPD66 INS43 INS59 INS43 INS59 INS43 INS59 MOV8 INS8 UPD66 INS66 INS43 INS59 INS27 INS8 INS42 INS66 INS42 INS27 INS8 UPD66 INS32 INS32 INS32 INS66 UPD43 MOV43 INS59 INS27 INS8 INS66 INS43 INS59 INS27 INS8 INS42 INS66 UPD42 INS27 INS8 INS40 INS43 INS43 INS43 INS43 INS22 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS34 INS21 INS21 MOV21 UPD42 INS39 INS36 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS21 MOV21 INS60 MOV21 INS21 INS21 INS21 INS54 INS42 INS42 INS32 INS42 INS33 MOV21 INS42 INS33 INS21 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS36 INS33 MOV21 INS42 INS42 INS32 INS42 INS33 MOV54 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 MOV42 INS7 INS32 INS7 UPD27 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS7 MOV5 UPD39 MOV39 INS59 INS32 INS32 INS32 INS8 INS8 INS42 INS42 INS32 INS32 INS7 UPD42 MOV42 UPD42 MOV42 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 MOV42 INS7 INS7 INS42 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS42 UPD42 INS42 INS42 INS42 INS36 INS42 INS42 INS27 INS42 INS42 DEL40 DEL26 DEL83 DEL34 DEL42 DEL67 DEL42 DEL42 DEL27 DEL45 DEL32 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL67 DEL65 DEL42 DEL67 DEL65 DEL66 DEL42 DEL34 DEL7 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL67 DEL65 DEL42 DEL67 DEL65 DEL65 DEL29 DEL8 DEL31 DEL83 DEL40 DEL43 DEL42 DEL11 DEL36 DEL32 DEL59 DEL60 DEL83 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL8 DEL31 DEL42 DEL67 DEL65 DEL66 DEL42 DEL67 DEL65 DEL66 DEL83 DEL42 DEL32 DEL59 DEL60 DEL39 DEL34 DEL34 DEL42 DEL42 DEL34 DEL27 DEL8 DEL25 DEL83 DEL42 DEL59 DEL60 DEL32 DEL21 DEL83 DEL42 DEL42 DEL32 DEL21 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL39 DEL36 DEL11 DEL7 DEL40 DEL83 DEL42 DEL32 DEL41 DEL8