HADOOP-9820. RPCv9 wire protocol is insufficient to support multiplexing. Contributed by Daryn Sharp.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1512091 13f79535-47bb-0310-9956-ffa450edef68

+
+import org.apache.hadoop.ipc.ProtobufRpcEngine.RpcResponseMessageWrapper;
-        WrappedRpcServerException, IOException, InterruptedException {
+    WrappedRpcServerException, IOException, InterruptedException {
+      final RpcSaslProto saslMessage =
+          decodeProtobufFromStream(RpcSaslProto.newBuilder(), dis);
+      switch (saslMessage.getState()) {
+        case WRAP: {
+          if (!saslContextEstablished || !useWrap) {
+            throw new WrappedRpcServerException(
+                RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,
+                new SaslException("Server is not wrapping data"));
+          }
+          // loops over decoded data and calls processOneRpc
+          unwrapPacketAndProcessRpcs(saslMessage.getToken().toByteArray());
+          break;
+        }
+        default:
+          saslProcess(saslMessage);
+      }
+    }
+
+    private void saslProcess(RpcSaslProto saslMessage)
+        throws WrappedRpcServerException, IOException, InterruptedException {
-          saslResponse = processSaslMessage(dis);
+          saslResponse = processSaslMessage(saslMessage);
+        // SASL wrapping is only used if the connection has a QOP, and
+        // the value is not auth.  ex. auth-int & auth-priv
-    private RpcSaslProto processSaslMessage(DataInputStream dis)
+    private RpcSaslProto processSaslMessage(RpcSaslProto saslMessage)
-      final RpcSaslProto saslMessage =
-          decodeProtobufFromStream(RpcSaslProto.newBuilder(), dis);
-          processRpcRequestPacket(data.array());
+          processOneRpc(data.array());
-     * Process a RPC Request - if SASL wrapping is enabled, unwrap the
-     * requests and process each one, else directly process the request 
-     * @param buf - single request or SASL wrapped requests
-     * @throws IOException - connection failed to authenticate or authorize,
-     *   or the request could not be decoded into a Call
+     * Process a wrapped RPC Request - unwrap the SASL packet and process
+     * each embedded RPC request 
+     * @param buf - SASL wrapped request of one or more RPCs
+     * @throws IOException - SASL packet cannot be unwrapped
-    private void processRpcRequestPacket(byte[] buf)
-        throws WrappedRpcServerException, IOException, InterruptedException {
-      if (saslContextEstablished && useWrap) {
-        if (LOG.isDebugEnabled())
-          LOG.debug("Have read input token of size " + buf.length
-              + " for processing by saslServer.unwrap()");        
-        final byte[] plaintextData = saslServer.unwrap(buf, 0, buf.length);
-        // loops over decoded data and calls processOneRpc
-        unwrapPacketAndProcessRpcs(plaintextData);
-      } else {
-        processOneRpc(buf);
-      }
-    }
-    
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Have read input token of size " + inBuf.length
+            + " for processing by saslServer.unwrap()");
+      }
+      inBuf = saslServer.unwrap(inBuf, 0, inBuf.length);
-      DataOutputStream saslOut = new DataOutputStream(response);
-      saslOut.writeInt(token.length);
-      saslOut.write(token, 0, token.length);
+      // rebuild with sasl header and payload
+      RpcResponseHeaderProto saslHeader = RpcResponseHeaderProto.newBuilder()
+          .setCallId(AuthProtocol.SASL.callId)
+          .setStatus(RpcStatusProto.SUCCESS)
+          .build();
+      RpcSaslProto saslMessage = RpcSaslProto.newBuilder()
+          .setState(SaslState.WRAP)
+          .setToken(ByteString.copyFrom(token, 0, token.length))
+          .build();
+      RpcResponseMessageWrapper saslResponse =
+          new RpcResponseMessageWrapper(saslHeader, saslMessage);
+
+      DataOutputStream out = new DataOutputStream(response);
+      out.writeInt(saslResponse.getLength());
+      saslResponse.write(out);

INS26 INS40 MOV31 UPD42 MOV44 UPD42 INS44 INS29 MOV60 INS50 UPD43 UPD42 INS43 INS42 INS65 INS65 INS65 MOV65 INS25 INS21 INS32 INS49 INS8 INS49 INS21 UPD42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 MOV32 INS8 INS7 INS60 INS60 INS60 INS21 INS21 INS42 INS42 INS42 MOV25 INS21 INS10 MOV32 INS21 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS27 INS8 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS38 INS38 INS53 INS42 INS32 INS42 INS42 INS27 INS32 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 UPD42 MOV42 INS45 INS40 INS45 INS32 UPD42 MOV42 UPD40 MOV40 INS32 INS42 INS32 INS42 INS43 INS40 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 MOV42 INS40 INS32 UPD42 MOV42 INS40 INS42 INS42 MOV42 MOV34 MOV40 INS42 INS43 INS45 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL27 DEL83 DEL39 DEL85 DEL5 DEL42 DEL34 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL21 DEL8 DEL25 DEL32 DEL21 DEL32 DEL21