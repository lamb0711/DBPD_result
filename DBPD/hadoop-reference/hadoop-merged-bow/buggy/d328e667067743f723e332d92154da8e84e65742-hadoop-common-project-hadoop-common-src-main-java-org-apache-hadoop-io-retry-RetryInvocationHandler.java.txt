HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.util.Time;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  public static final Log LOG = LogFactory.getLog(RetryInvocationHandler.class);
+  public static final Logger LOG = LoggerFactory.getLogger(
+      RetryInvocationHandler.class);
-    final Counters counters;
+    private final Counters counters = new Counters();
+    private RetryInfo retryInfo;
+
-         Counters counters, RetryInvocationHandler<?> retryInvocationHandler) {
+         RetryInvocationHandler<?> retryInvocationHandler) {
-      this.counters = counters;
+    int getCallId() {
+      return callId;
+    }
+
+    Counters getCounters() {
+      return counters;
+    }
+
+    synchronized Long getWaitTime(final long now) {
+      return retryInfo == null? null: retryInfo.retryTime - now;
+    }
+
+        if (retryInfo != null) {
+          return processWaitTimeAndRetryInfo();
+        }
+
-            LOG.trace(this, e);
+            LOG.trace(toString(), e);
-          retryInvocationHandler.handleException(
-              method, retryPolicy, failoverCount, counters, e);
-          return CallReturn.RETRY;
+
+          retryInfo = retryInvocationHandler.handleException(
+              method, callId, retryPolicy, counters, failoverCount, e);
+          return processWaitTimeAndRetryInfo();
+    /**
+     * It first processes the wait time, if there is any,
+     * and then invokes {@link #processRetryInfo()}.
+     *
+     * If the wait time is positive, it either sleeps for synchronous calls
+     * or immediately returns for asynchronous calls.
+     *
+     * @return {@link CallReturn#RETRY} if the retryInfo is processed;
+     *         otherwise, return {@link CallReturn#WAIT_RETRY}.
+     */
+    CallReturn processWaitTimeAndRetryInfo() throws InterruptedIOException {
+      final Long waitTime = getWaitTime(Time.monotonicNow());
+      LOG.trace("#{} processRetryInfo: retryInfo={}, waitTime={}",
+          callId, retryInfo, waitTime);
+      if (waitTime != null && waitTime > 0) {
+        try {
+          Thread.sleep(retryInfo.delay);
+        } catch (InterruptedException e) {
+          Thread.currentThread().interrupt();
+          LOG.warn("Interrupted while waiting to retry", e);
+          InterruptedIOException intIOE = new InterruptedIOException(
+              "Retry interrupted");
+          intIOE.initCause(e);
+          throw intIOE;
+        }
+      }
+      processRetryInfo();
+      return CallReturn.RETRY;
+    }
+
+    synchronized void processRetryInfo() {
+      counters.retries++;
+      if (retryInfo.isFailover()) {
+        retryInvocationHandler.proxyDescriptor.failover(
+            retryInfo.expectedFailoverCount, method, callId);
+        counters.failovers++;
+      }
+      retryInfo = null;
+    }
+
-        Client.setCallIdAndRetryCount(callId, counters.retries);
+        Client.setCallIdAndRetryCount(callId, counters.retries,
+            retryInvocationHandler.asyncCallHandler);
-    synchronized void failover(long expectedFailoverCount, Method method) {
+    synchronized void failover(long expectedFailoverCount, Method method,
+                               int callId) {
-        LOG.warn("A failover has occurred since the start of "
-            + proxyInfo.getString(method.getName()));
+        LOG.warn("A failover has occurred since the start of call #" + callId
+            + " " + proxyInfo.getString(method.getName()));
+    private final long retryTime;
-    private final RetryAction failover;
-    private final RetryAction fail;
+    private final RetryAction action;
+    private final long expectedFailoverCount;
-    RetryInfo(long delay, RetryAction failover, RetryAction fail) {
+    RetryInfo(long delay, RetryAction action, long expectedFailoverCount) {
-      this.failover = failover;
-      this.fail = fail;
+      this.retryTime = Time.monotonicNow() + delay;
+      this.action = action;
+      this.expectedFailoverCount = expectedFailoverCount;
+    }
+
+    boolean isFailover() {
+      return action != null
+          && action.action ==  RetryAction.RetryDecision.FAILOVER_AND_RETRY;
+    }
+
+    boolean isFail() {
+      return action != null
+          && action.action ==  RetryAction.RetryDecision.FAIL;
-        Counters counters, boolean idempotentOrAtMostOnce) throws Exception {
+        Counters counters, boolean idempotentOrAtMostOnce,
+        long expectedFailoverCount) throws Exception {
+      RetryAction max = null;
-      RetryAction failover = null;
-      RetryAction retry = null;
-      RetryAction fail = null;
-        if (a.action == RetryAction.RetryDecision.FAIL) {
-          fail = a;
-        } else {
+        if (a.action != RetryAction.RetryDecision.FAIL) {
-          if (a.action == RetryAction.RetryDecision.FAILOVER_AND_RETRY) {
-            failover = a;
-          } else {
-            retry = a;
-          }
+
+        if (max == null || max.action.compareTo(a.action) < 0) {
+          max = a;
+        }
-      return new RetryInfo(maxRetryDelay, failover,
-          failover == null && retry == null? fail: null);
+      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount);
-  private Call newCall(Method method, Object[] args, boolean isRpc, int callId,
-                       Counters counters) {
+  private Call newCall(Method method, Object[] args, boolean isRpc,
+                       int callId) {
-      return asyncCallHandler.newAsyncCall(method, args, isRpc, callId,
-          counters, this);
+      return asyncCallHandler.newAsyncCall(method, args, isRpc, callId, this);
-      return new Call(method, args, isRpc, callId, counters, this);
+      return new Call(method, args, isRpc, callId, this);
-    final Counters counters = new Counters();
-    final Call call = newCall(method, args, isRpc, callId, counters);
+    final Call call = newCall(method, args, isRpc, callId);
-  private void handleException(final Method method, final RetryPolicy policy,
-      final long expectedFailoverCount, final Counters counters,
-      final Exception ex) throws Exception {
-    final RetryInfo retryInfo = RetryInfo.newRetryInfo(policy, ex, counters,
-        proxyDescriptor.idempotentOrAtMostOnce(method));
-    counters.retries++;
-
-    if (retryInfo.fail != null) {
+  private RetryInfo handleException(final Method method, final int callId,
+      final RetryPolicy policy, final Counters counters,
+      final long expectFailoverCount, final Exception e) throws Exception {
+    final RetryInfo retryInfo = RetryInfo.newRetryInfo(policy, e,
+        counters, proxyDescriptor.idempotentOrAtMostOnce(method),
+        expectFailoverCount);
+    if (retryInfo.isFail()) {
-      if (retryInfo.fail.reason != null) {
-        LOG.warn("Exception while invoking "
+      if (retryInfo.action.reason != null) {
+        LOG.warn("Exception while invoking call #" + callId + " "
-            + ". Not retrying because " + retryInfo.fail.reason, ex);
+            + ". Not retrying because " + retryInfo.action.reason, e);
-      throw ex;
+      throw e;
-    // retry
-    final boolean isFailover = retryInfo.failover != null;
-
-    log(method, isFailover, counters.failovers, retryInfo.delay, ex);
-
-    if (retryInfo.delay > 0) {
-      try {
-        Thread.sleep(retryInfo.delay);
-      } catch (InterruptedException e) {
-        Thread.currentThread().interrupt();
-        LOG.warn("Interrupted while waiting to retry", e);
-        InterruptedIOException intIOE = new InterruptedIOException(
-            "Retry interrupted");
-        intIOE.initCause(e);
-        throw intIOE;
-      }
-    }
-
-    if (isFailover) {
-      proxyDescriptor.failover(expectedFailoverCount, method);
-      counters.failovers++;
-    }
+    log(method, retryInfo.isFailover(), counters.failovers, retryInfo.delay, e);
+    return retryInfo;

MOV26 MOV26 INS26 UPD40 INS40 UPD40 MOV44 UPD43 INS23 INS31 INS31 INS31 INS31 INS31 INS23 INS23 INS31 INS31 INS43 INS44 UPD42 INS83 MOV43 MOV59 INS83 INS43 INS59 INS39 INS42 INS8 MOV43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS43 INS42 INS43 INS8 INS83 INS39 INS42 INS8 INS44 MOV83 MOV83 INS39 INS59 INS83 INS83 MOV43 MOV59 INS39 INS39 INS42 INS8 INS39 INS42 INS8 INS44 MOV60 INS42 INS83 INS39 INS42 UPD42 UPD42 INS41 UPD42 UPD42 INS42 INS42 INS41 INS41 INS42 INS83 INS39 INS42 INS41 INS65 INS65 INS42 INS42 INS60 INS21 INS25 INS21 MOV41 MOV21 INS25 INS21 INS39 INS42 INS42 UPD42 UPD42 MOV43 INS42 INS39 UPD42 INS21 INS41 INS41 INS39 INS42 INS32 INS42 INS42 INS42 INS16 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS83 INS43 INS59 INS32 INS27 MOV8 INS32 INS32 INS8 INS7 INS7 INS27 INS27 MOV43 INS42 INS42 INS32 UPD42 INS27 INS33 INS27 INS25 INS68 INS67 INS67 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS21 MOV21 INS42 INS33 INS27 INS22 INS42 UPD42 INS27 INS27 INS27 INS27 UPD42 INS25 INS25 UPD42 INS42 UPD42 INS42 UPD42 INS42 MOV42 INS42 INS33 INS40 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS34 INS32 UPD42 INS32 INS42 INS52 INS42 UPD42 INS42 INS33 INS40 INS40 INS42 INS33 INS40 INS40 UPD27 MOV27 MOV8 INS27 MOV8 UPD40 INS42 INS33 INS41 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS27 INS27 INS32 INS41 UPD45 INS42 INS45 INS42 INS33 INS32 INS34 UPD42 INS42 INS7 INS32 INS40 INS42 INS40 UPD42 UPD45 INS42 INS45 UPD40 INS42 INS32 INS42 MOV42 MOV42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL32 DEL42 DEL43 DEL23 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL40 DEL40 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL16 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL83 DEL60 DEL42 DEL39 DEL40 DEL33 DEL27 DEL83 DEL39 DEL42 DEL40 DEL33 DEL27 DEL59 DEL60 DEL40 DEL34 DEL27 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25