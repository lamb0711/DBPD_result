HADOOP-9361: Strictly define FileSystem APIs

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607596 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.ConnectException;
+import org.apache.hadoop.fs.FileAlreadyExistsException;
+import org.apache.hadoop.fs.ParentNotDirectoryException;
+import org.apache.hadoop.net.NetUtils;
+  public static final String FS_FTP_USER_PREFIX = "fs.ftp.user.";
+  public static final String FS_FTP_HOST = "fs.ftp.host";
+  public static final String FS_FTP_HOST_PORT = "fs.ftp.host.port";
+  public static final String FS_FTP_PASSWORD_PREFIX = "fs.ftp.password.";
+  public static final String E_SAME_DIRECTORY_ONLY =
+      "only same directory renames are supported";
-    host = (host == null) ? conf.get("fs.ftp.host", null) : host;
+    host = (host == null) ? conf.get(FS_FTP_HOST, null) : host;
-    conf.set("fs.ftp.host", host);
+    conf.set(FS_FTP_HOST, host);
-    conf.set("fs.ftp.user." + host, userPasswdInfo[0]);
+    conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);
-      conf.set("fs.ftp.password." + host, userPasswdInfo[1]);
+      conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);
-      conf.set("fs.ftp.password." + host, null);
+      conf.set(FS_FTP_PASSWORD_PREFIX + host, null);
-    String host = conf.get("fs.ftp.host");
-    int port = conf.getInt("fs.ftp.host.port", FTP.DEFAULT_PORT);
-    String user = conf.get("fs.ftp.user." + host);
-    String password = conf.get("fs.ftp.password." + host);
+    String host = conf.get(FS_FTP_HOST);
+    int port = conf.getInt(FS_FTP_HOST_PORT, FTP.DEFAULT_PORT);
+    String user = conf.get(FS_FTP_USER_PREFIX + host);
+    String password = conf.get(FS_FTP_PASSWORD_PREFIX + host);
-      throw new IOException("Server - " + host
-          + " refused connection on port - " + port);
+      throw NetUtils.wrapException(host, port,
+                   NetUtils.UNKNOWN_HOST, 0,
+                   new ConnectException("Server response " + reply));
-          + port);
+          + port + " as user '" + user + "'");
-      throw new IOException("Path " + file + " is a directory.");
+      throw new FileNotFoundException("Path " + file + " is a directory.");
-    if (exists(client, file)) {
-      if (overwrite) {
-        delete(client, file);
+    FileStatus status;
+    try {
+      status = getFileStatus(client, file);
+    } catch (FileNotFoundException fnfe) {
+      status = null;
+    }
+    if (status != null) {
+      if (overwrite && !status.isDirectory()) {
+        delete(client, file, false);
-        throw new IOException("File already exists: " + file);
+        throw new FileAlreadyExistsException("File already exists: " + file);
+   * @throws IOException on IO problems other than FileNotFoundException
-  private boolean exists(FTPClient client, Path file) {
+  private boolean exists(FTPClient client, Path file) throws IOException {
-    } catch (IOException ioe) {
-      throw new FTPException("Failed to get file status", ioe);
-  /** @deprecated Use delete(Path, boolean) instead */
-  @Deprecated
-  private boolean delete(FTPClient client, Path file) throws IOException {
-    return delete(client, file, false);
-  }
-
-    FileStatus fileStat = getFileStatus(client, absolute);
-    if (fileStat.isFile()) {
-      return client.deleteFile(pathName);
+    try {
+      FileStatus fileStat = getFileStatus(client, absolute);
+      if (fileStat.isFile()) {
+        return client.deleteFile(pathName);
+      }
+    } catch (FileNotFoundException e) {
+      //the file is not there
+      return false;
-      throw new IOException(String.format(
+      throw new ParentNotDirectoryException(String.format(
+   * Probe for a path being a parent of another
+   * @param parent parent path
+   * @param child possible child path
+   * @return true if the parent's path matches the start of the child's
+   */
+  private boolean isParentOf(Path parent, Path child) {
+    URI parentURI = parent.toUri();
+    String parentPath = parentURI.getPath();
+    if (!parentPath.endsWith("/")) {
+      parentPath += "/";
+    }
+    URI childURI = child.toUri();
+    String childPath = childURI.getPath();
+    return childPath.startsWith(parentPath);
+  }
+
+  /**
-      throw new IOException("Source path " + src + " does not exist");
+      throw new FileNotFoundException("Source path " + src + " does not exist");
+    }
+    if (isDirectory(absoluteDst)) {
+      // destination is a directory: rename goes underneath it with the
+      // source name
+      absoluteDst = new Path(absoluteDst, absoluteSrc.getName());
-      throw new IOException("Destination path " + dst
-          + " already exist, cannot rename!");
+      throw new FileAlreadyExistsException("Destination path " + dst
+          + " already exists");
-    String from = src.getName();
-    String to = dst.getName();
-    if (!parentSrc.equals(parentDst)) {
-      throw new IOException("Cannot rename parent(source): " + parentSrc
-          + ", parent(destination):  " + parentDst);
+    if (isParentOf(absoluteSrc, absoluteDst)) {
+      throw new IOException("Cannot rename " + absoluteSrc + " under itself"
+      + " : "+ absoluteDst);
+
+    if (!parentSrc.equals(parentDst)) {
+      throw new IOException("Cannot rename source: " + absoluteSrc
+          + " to " + absoluteDst
+          + " -"+ E_SAME_DIRECTORY_ONLY);
+    }
+    String from = absoluteSrc.getName();
+    String to = absoluteDst.getName();

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV43 INS29 UPD42 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS60 INS54 INS65 INS42 INS54 INS65 UPD65 MOV65 INS65 INS65 UPD43 UPD42 UPD42 INS60 INS60 INS25 INS60 INS60 MOV41 INS25 INS25 INS60 INS60 MOV43 MOV43 INS43 INS59 INS8 INS12 INS27 INS42 INS66 INS8 INS12 INS66 INS42 UPD66 INS42 INS66 INS66 UPD42 INS43 INS59 MOV43 INS59 INS38 INS8 INS43 INS59 MOV43 INS59 INS32 INS8 INS32 INS8 INS43 INS59 INS43 INS59 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS33 MOV60 MOV25 INS44 INS8 UPD42 MOV42 INS42 INS32 INS42 INS32 INS32 INS21 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS21 INS42 UPD42 MOV42 UPD42 MOV42 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS21 INS27 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS7 INS42 INS42 INS42 INS42 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS34 INS14 UPD43 INS42 INS32 INS42 INS7 INS42 INS38 INS42 INS9 INS42 INS45 UPD43 INS42 INS14 INS43 MOV43 INS27 MOV43 INS42 INS42 UPD43 MOV43 MOV27 UPD42 INS42 INS42 INS42 INS42 INS33 INS32 UPD43 UPD42 INS43 INS42 INS32 INS42 UPD45 INS45 INS42 INS45 INS45 INS42 UPD45 UPD42 UPD45 UPD42 INS45 INS42 UPD42 UPD45 UPD42 INS45 INS42 INS45 INS42 INS42 MOV9 UPD43 UPD42 INS42 INS42 INS42 UPD42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL29 DEL42 DEL78 DEL8 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60