HADOOP-12847. hadoop daemonlog should support https and SPNEGO for Kerberized cluster. (Wei-Chiu Chuang via Yongjun Zhang)

-import java.io.*;
-import java.net.*;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
+import java.net.URL;
+import java.net.URLConnection;
-import javax.servlet.*;
-import javax.servlet.http.*;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLSocketFactory;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import com.google.common.annotations.VisibleForTesting;
-import org.apache.commons.logging.*;
-import org.apache.commons.logging.impl.*;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.commons.logging.impl.Jdk14Logger;
+import org.apache.commons.logging.impl.Log4JLogger;
+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.conf.Configured;
+import org.apache.hadoop.security.authentication.client.AuthenticatedURL;
+import org.apache.hadoop.security.authentication.client.KerberosAuthenticator;
+import org.apache.hadoop.security.ssl.SSLFactory;
+import org.apache.hadoop.util.Tool;
-      + "\t[-getlevel <host:httpPort> <classname>]\n"
-      + "\t[-setlevel <host:httpPort> <classname> <level>]\n";
+      + "\t[-getlevel <host:port> <classname> [-protocol (http|https)]\n"
+      + "\t[-setlevel <host:port> <classname> <level> "
+      + "[-protocol (http|https)]\n";
+  public static final String PROTOCOL_HTTP = "http";
+  public static final String PROTOCOL_HTTPS = "https";
-  public static void main(String[] args) {
-    if (args.length == 3 && "-getlevel".equals(args[0])) {
-      process("http://" + args[1] + "/logLevel?log=" + args[2]);
-      return;
-    }
-    else if (args.length == 4 && "-setlevel".equals(args[0])) {
-      process("http://" + args[1] + "/logLevel?log=" + args[2]
-              + "&level=" + args[3]);
-      return;
-    }
-
-    System.err.println(USAGES);
-    System.exit(-1);
+  public static void main(String[] args) throws Exception {
+    CLI cli = new CLI(new Configuration());
+    System.exit(cli.run(args));
-  private static void process(String urlstring) {
-    try {
-      URL url = new URL(urlstring);
-      System.out.println("Connecting to " + url);
-      URLConnection connection = url.openConnection();
-      connection.connect();
+  /**
+   * Valid command line options.
+   */
+  private enum Operations {
+    GETLEVEL,
+    SETLEVEL,
+    UNKNOWN
+  }
-      BufferedReader in = new BufferedReader(new InputStreamReader(
-          connection.getInputStream(), Charsets.UTF_8));
-      for(String line; (line = in.readLine()) != null; )
+  private static void printUsage() {
+    System.err.println(USAGES);
+  }
+
+  public static boolean isValidProtocol(String protocol) {
+    return ((protocol.equals(PROTOCOL_HTTP) ||
+      protocol.equals(PROTOCOL_HTTPS)));
+  }
+
+  @VisibleForTesting
+  static class CLI extends Configured implements Tool {
+    private Operations operation = Operations.UNKNOWN;
+    private String protocol;
+    private String hostName;
+    private String className;
+    private String level;
+
+    CLI(Configuration conf) {
+      setConf(conf);
+    }
+
+    @Override
+    public int run(String[] args) throws Exception {
+      try {
+        parseArguments(args);
+        sendLogLevelRequest();
+      } catch (HadoopIllegalArgumentException e) {
+        printUsage();
+        throw e;
+      }
+      return 0;
+    }
+
+    /**
+     * Send HTTP/HTTPS request to the daemon.
+     * @throws HadoopIllegalArgumentException if arguments are invalid.
+     * @throws Exception if unable to connect
+     */
+    private void sendLogLevelRequest()
+        throws HadoopIllegalArgumentException, Exception {
+      switch (operation) {
+      case GETLEVEL:
+        doGetLevel();
+        break;
+      case SETLEVEL:
+        doSetLevel();
+        break;
+      default:
+        throw new HadoopIllegalArgumentException(
+          "Expect either -getlevel or -setlevel");
+      }
+    }
+
+    public void parseArguments(String[] args) throws
+        HadoopIllegalArgumentException {
+      if (args.length == 0) {
+        throw new HadoopIllegalArgumentException("No arguments specified");
+      }
+      int nextArgIndex = 0;
+      while (nextArgIndex < args.length) {
+        if (args[nextArgIndex].equals("-getlevel")) {
+          nextArgIndex = parseGetLevelArgs(args, nextArgIndex);
+        } else if (args[nextArgIndex].equals("-setlevel")) {
+          nextArgIndex = parseSetLevelArgs(args, nextArgIndex);
+        } else if (args[nextArgIndex].equals("-protocol")) {
+          nextArgIndex = parseProtocolArgs(args, nextArgIndex);
+        } else {
+          throw new HadoopIllegalArgumentException(
+              "Unexpected argument " + args[nextArgIndex]);
+        }
+      }
+
+      // if operation is never specified in the arguments
+      if (operation == Operations.UNKNOWN) {
+        throw new HadoopIllegalArgumentException(
+            "Must specify either -getlevel or -setlevel");
+      }
+
+      // if protocol is unspecified, set it as http.
+      if (protocol == null) {
+        protocol = PROTOCOL_HTTP;
+      }
+    }
+
+    private int parseGetLevelArgs(String[] args, int index) throws
+        HadoopIllegalArgumentException {
+      // fail if multiple operations are specified in the arguments
+      if (operation != Operations.UNKNOWN) {
+        throw new HadoopIllegalArgumentException(
+            "Redundant -getlevel command");
+      }
+      // check number of arguments is sufficient
+      if (index+2 >= args.length) {
+        throw new HadoopIllegalArgumentException(
+            "-getlevel needs two parameters");
+      }
+      operation = Operations.GETLEVEL;
+      hostName = args[index+1];
+      className = args[index+2];
+      return index+3;
+    }
+
+    private int parseSetLevelArgs(String[] args, int index) throws
+        HadoopIllegalArgumentException {
+      // fail if multiple operations are specified in the arguments
+      if (operation != Operations.UNKNOWN) {
+        throw new HadoopIllegalArgumentException(
+            "Redundant -setlevel command");
+      }
+      // check number of arguments is sufficient
+      if (index+3 >= args.length) {
+        throw new HadoopIllegalArgumentException(
+            "-setlevel needs three parameters");
+      }
+      operation = Operations.SETLEVEL;
+      hostName = args[index+1];
+      className = args[index+2];
+      level = args[index+3];
+      return index+4;
+    }
+
+    private int parseProtocolArgs(String[] args, int index) throws
+        HadoopIllegalArgumentException {
+      // make sure only -protocol is specified
+      if (protocol != null) {
+        throw new HadoopIllegalArgumentException(
+            "Redundant -protocol command");
+      }
+      // check number of arguments is sufficient
+      if (index+1 >= args.length) {
+        throw new HadoopIllegalArgumentException(
+            "-protocol needs one parameter");
+      }
+      // check protocol is valid
+      protocol = args[index+1];
+      if (!isValidProtocol(protocol)) {
+        throw new HadoopIllegalArgumentException(
+            "Invalid protocol: " + protocol);
+      }
+      return index+2;
+    }
+
+    /**
+     * Send HTTP/HTTPS request to get log level.
+     *
+     * @throws HadoopIllegalArgumentException if arguments are invalid.
+     * @throws Exception if unable to connect
+     */
+    private void doGetLevel() throws Exception {
+      process(protocol + "://" + hostName + "/logLevel?log=" + className);
+    }
+
+    /**
+     * Send HTTP/HTTPS request to set log level.
+     *
+     * @throws HadoopIllegalArgumentException if arguments are invalid.
+     * @throws Exception if unable to connect
+     */
+    private void doSetLevel() throws Exception {
+      process(protocol + "://" + hostName + "/logLevel?log=" + className
+          + "&level=" + level);
+    }
+
+    /**
+     * Connect to the URL. Supports HTTP/HTTPS and supports SPNEGO
+     * authentication. It falls back to simple authentication if it fails to
+     * initiate SPNEGO.
+     *
+     * @param url the URL address of the daemon servlet
+     * @return a connected connection
+     * @throws Exception if it can not establish a connection.
+     */
+    private URLConnection connect(URL url) throws Exception {
+      AuthenticatedURL.Token token = new AuthenticatedURL.Token();
+      AuthenticatedURL aUrl;
+      SSLFactory clientSslFactory;
+      URLConnection connection;
+      // If https is chosen, configures SSL client.
+      if (PROTOCOL_HTTPS.equals(url.getProtocol())) {
+        clientSslFactory = new SSLFactory(
+            SSLFactory.Mode.CLIENT, this.getConf());
+        clientSslFactory.init();
+        SSLSocketFactory sslSocketF = clientSslFactory.createSSLSocketFactory();
+
+        aUrl = new AuthenticatedURL(
+            new KerberosAuthenticator(), clientSslFactory);
+        connection = aUrl.openConnection(url, token);
+        HttpsURLConnection httpsConn = (HttpsURLConnection) connection;
+        httpsConn.setSSLSocketFactory(sslSocketF);
+      } else {
+        aUrl = new AuthenticatedURL(new KerberosAuthenticator());
+        connection = aUrl.openConnection(url, token);
+      }
+
+      connection.connect();
+      return connection;
+    }
+
+    /**
+     * Configures the client to send HTTP/HTTPS request to the URL.
+     * Supports SPENGO for authentication.
+     * @param urlString URL and query string to the daemon's web UI
+     * @throws Exception if unable to connect
+     */
+    private void process(String urlString) throws Exception {
+      URL url = new URL(urlString);
+      System.out.println("Connecting to " + url);
+
+      URLConnection connection = connect(url);
+
+      // read from the servlet
+      BufferedReader in = new BufferedReader(
+          new InputStreamReader(connection.getInputStream(), Charsets.UTF_8));
+      for (String line;;) {
+        line = in.readLine();
+        if (line == null) {
+          break;
+        }
+      }
-    } catch (IOException ioe) {
-      System.err.println("" + ioe);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 UPD40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS71 INS31 INS31 INS55 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV29 INS83 INS83 MOV39 MOV42 MOV44 INS43 INS8 INS29 INS83 INS42 INS72 INS72 INS72 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS39 INS42 MOV44 INS8 INS78 INS83 INS42 INS43 INS43 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS60 INS21 INS65 INS42 INS42 INS42 MOV21 UPD42 INS41 INS42 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS44 INS43 MOV8 UPD45 UPD45 INS45 INS43 INS59 INS32 INS66 INS36 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS5 INS42 INS42 INS54 INS41 INS65 INS65 INS65 INS42 INS42 INS50 INS5 INS42 INS42 INS25 INS60 INS61 INS25 INS25 INS5 INS42 INS39 INS42 INS42 INS25 INS25 INS21 INS21 INS21 INS41 INS5 INS42 INS39 INS42 INS42 INS25 INS25 INS21 INS21 INS21 INS21 MOV41 INS5 INS42 INS39 INS42 INS42 INS25 INS25 INS21 INS25 INS41 INS65 INS65 INS65 INS42 INS21 INS65 INS65 INS65 INS42 MOV21 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS42 INS60 INS60 INS60 INS60 INS25 MOV21 INS41 INS65 INS65 INS65 UPD43 MOV43 UPD42 MOV42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS36 INS42 INS32 INS43 INS85 INS8 INS12 INS34 INS66 INS42 INS66 INS42 INS66 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS53 INS43 INS85 INS27 INS8 INS39 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS43 INS85 INS27 INS8 INS27 INS8 INS7 INS7 INS7 INS27 INS43 INS85 INS27 INS8 INS27 INS8 INS7 INS7 INS7 INS7 INS27 INS43 INS85 INS27 INS8 INS27 INS8 INS7 INS38 INS8 INS27 INS66 INS42 INS66 INS42 INS66 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS32 INS8 INS8 INS42 INS66 INS66 INS42 INS66 INS42 INS66 UPD42 INS43 INS8 INS43 INS14 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS42 INS32 INS42 INS32 INS14 INS42 MOV40 UPD34 MOV34 INS53 INS42 INS34 INS42 INS40 INS25 INS42 INS40 INS53 INS42 INS33 INS21 INS42 INS42 INS40 INS53 INS27 INS40 INS53 INS42 INS40 INS42 INS2 INS42 INS2 INS42 INS34 INS42 INS42 INS40 INS53 INS27 INS40 INS53 INS42 INS40 INS42 INS2 INS42 INS2 INS42 INS2 INS42 INS34 INS42 INS42 INS33 INS53 INS27 MOV40 INS53 INS42 INS2 INS32 INS53 INS42 INS34 INS42 INS27 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 MOV21 INS60 INS21 INS21 INS60 INS21 INS21 INS21 INS42 INS21 INS25 MOV25 INS42 INS43 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS43 INS45 INS14 INS32 INS8 INS25 INS14 INS7 INS14 INS42 INS34 INS14 MOV42 INS27 INS42 INS27 INS14 INS42 INS34 INS14 MOV42 INS27 MOV42 INS27 INS42 INS27 INS14 INS42 INS34 INS14 MOV42 INS27 INS42 INS42 INS14 INS42 INS45 INS42 INS45 INS42 INS42 UPD45 INS42 INS42 INS42 INS43 INS42 INS42 INS7 INS43 INS59 INS7 INS7 INS43 INS59 INS32 INS7 INS7 INS43 UPD42 INS42 MOV7 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS45 INS2 INS42 MOV45 INS21 INS32 INS8 INS25 INS43 INS45 INS42 INS42 INS43 INS45 INS43 INS45 INS42 INS34 INS42 INS34 INS43 INS45 INS43 INS45 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS45 INS43 INS45 INS42 INS34 INS43 INS27 INS40 INS42 INS14 UPD42 UPD42 INS42 INS42 INS32 INS42 INS14 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS42 MOV33 INS10 INS42 INS42 INS42 INS42 INS7 INS2 MOV42 INS45 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS40 INS32 INS42 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS2 INS42 INS45 INS21 INS53 INS42 INS52 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS2 INS42 INS42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL34 DEL38 DEL83 DEL42 DEL36 DEL27 DEL44 DEL40 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL83 DEL83 DEL27 DEL34 DEL2 DEL32 DEL27 DEL42 DEL45 DEL34 DEL2 DEL45 DEL34 DEL2 DEL27 DEL32 DEL21 DEL8 DEL34 DEL27 DEL45 DEL42 DEL34 DEL2 DEL32 DEL27 DEL41 DEL8 DEL25 DEL25 DEL8 DEL31