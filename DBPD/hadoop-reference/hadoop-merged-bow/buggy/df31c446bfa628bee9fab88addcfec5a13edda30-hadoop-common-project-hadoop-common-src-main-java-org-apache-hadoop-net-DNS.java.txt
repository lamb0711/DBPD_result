HADOOP-12437. Allow SecurityUtil to lookup alternate hostnames. (Contributed by Arpit Agarwal)

+import com.google.common.net.InetAddresses;
+import com.sun.istack.Nullable;
+import java.util.Arrays;
+import java.util.List;
-  public static String reverseDns(InetAddress hostIp, String ns)
+  public static String reverseDns(InetAddress hostIp, @Nullable String ns)
+   * @param tryfallbackResolution
+   *            if true and if reverse DNS resolution fails then attempt to
+   *            resolve the hostname with
+   *            {@link InetAddress#getCanonicalHostName()} which includes
+   *            hosts file resolution.
-  public static String[] getHosts(String strInterface, String nameserver)
-    throws UnknownHostException {
-    String[] ips = getIPs(strInterface);
-    Vector<String> hosts = new Vector<String>();
-    for (int ctr = 0; ctr < ips.length; ctr++) {
+  public static String[] getHosts(String strInterface,
+                                  @Nullable String nameserver,
+                                  boolean tryfallbackResolution)
+      throws UnknownHostException {
+    final List<String> hosts = new Vector<String>();
+    final List<InetAddress> addresses =
+        getIPsAsInetAddressList(strInterface, true);
+    for (InetAddress address : addresses) {
-        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),
-                             nameserver));
-      } catch (UnknownHostException ignored) {
+        hosts.add(reverseDns(address, nameserver));
-    if (hosts.isEmpty()) {
-      LOG.warn("Unable to determine hostname for interface " + strInterface);
-      return new String[] { cachedHostname };
-    } else {
-      return hosts.toArray(new String[hosts.size()]);
+    if (hosts.isEmpty() && tryfallbackResolution) {
+      for (InetAddress address : addresses) {
+        final String canonicalHostName = address.getCanonicalHostName();
+        // Don't use the result if it looks like an IP address.
+        if (!InetAddresses.isInetAddress(canonicalHostName)) {
+          hosts.add(canonicalHostName);
+        }
+      }
+
+    if (hosts.isEmpty()) {
+      LOG.warn("Unable to determine hostname for interface " +
+          strInterface);
+      hosts.add(cachedHostname);
+    }
+    return hosts.toArray(new String[hosts.size()]);
-    return getHosts(strInterface, null);
+    return getHosts(strInterface, null, false);
-  public static String getDefaultHost(String strInterface, String nameserver)
+  public static String getDefaultHost(@Nullable String strInterface,
+                                      @Nullable String nameserver,
+                                      boolean tryfallbackResolution)
-    if ("default".equals(strInterface)) {
+    if (strInterface == null || "default".equals(strInterface)) {
-    if ("default".equals(nameserver)) {
-      return getDefaultHost(strInterface);
+    if (nameserver != null && "default".equals(nameserver)) {
+      nameserver = null;
-    String[] hosts = getHosts(strInterface, nameserver);
+    String[] hosts = getHosts(strInterface, nameserver, tryfallbackResolution);
-  public static String getDefaultHost(String strInterface)
+  public static String getDefaultHost(@Nullable String strInterface)
-    return getDefaultHost(strInterface, null);
+    return getDefaultHost(strInterface, null, false);
+  /**
+   * Returns the default (first) host name associated by the provided
+   * nameserver with the address bound to the specified network interface.
+   *
+   * @param strInterface
+   *            The name of the network interface to query (e.g. eth0)
+   * @param nameserver
+   *            The DNS host name
+   * @throws UnknownHostException
+   *             If one is encountered while querying the default interface
+   */
+  public static String getDefaultHost(@Nullable String strInterface,
+                                      @Nullable String nameserver)
+      throws UnknownHostException {
+    return getDefaultHost(strInterface, nameserver, false);
+  }
+
+  /**
+   * Returns all the IPs associated with the provided interface, if any, as
+   * a list of InetAddress objects.
+   *
+   * @param strInterface
+   *            The name of the network interface or sub-interface to query
+   *            (eg eth0 or eth0:0) or the string "default"
+   * @param returnSubinterfaces
+   *            Whether to return IPs associated with subinterfaces of
+   *            the given interface
+   * @return A list of all the IPs associated with the provided
+   *         interface. The local host IP is returned if the interface
+   *         name "default" is specified or there is an I/O error looking
+   *         for the given interface.
+   * @throws UnknownHostException
+   *             If the given interface is invalid
+   *
+   */
+  public static List<InetAddress> getIPsAsInetAddressList(String strInterface,
+      boolean returnSubinterfaces) throws UnknownHostException {
+    if ("default".equals(strInterface)) {
+      return Arrays.asList(InetAddress.getByName(cachedHostAddress));
+    }
+    NetworkInterface netIf;
+    try {
+      netIf = NetworkInterface.getByName(strInterface);
+      if (netIf == null) {
+        netIf = getSubinterface(strInterface);
+      }
+    } catch (SocketException e) {
+      LOG.warn("I/O error finding interface " + strInterface +
+          ": " + e.getMessage());
+      return Arrays.asList(InetAddress.getByName(cachedHostAddress));
+    }
+    if (netIf == null) {
+      throw new UnknownHostException("No such interface " + strInterface);
+    }
+
+    // NB: Using a LinkedHashSet to preserve the order for callers
+    // that depend on a particular element being 1st in the array.
+    // For example, getDefaultIP always returns the first element.
+    LinkedHashSet<InetAddress> allAddrs = new LinkedHashSet<InetAddress>();
+    allAddrs.addAll(Collections.list(netIf.getInetAddresses()));
+    if (!returnSubinterfaces) {
+      allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));
+    }
+    return new Vector<InetAddress>(allAddrs);
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV44 INS31 INS31 INS44 MOV60 INS44 INS44 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS74 INS42 MOV44 INS44 INS43 INS8 INS78 INS65 INS78 MOV43 INS39 INS42 INS70 INS25 INS25 MOV41 INS78 INS42 INS78 UPD42 INS39 INS42 INS25 INS78 INS43 INS42 INS65 INS65 INS65 INS65 INS42 INS78 INS43 INS42 INS78 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS39 INS42 INS42 INS25 INS60 INS54 INS25 INS60 INS21 INS25 INS41 INS42 INS42 INS66 INS66 INS65 INS66 INS66 INS42 INS83 INS74 INS83 INS74 INS44 INS42 INS8 INS27 INS8 MOV32 MOV8 INS42 INS42 INS27 MOV8 INS27 INS8 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 MOV32 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS74 INS59 INS32 INS38 INS8 INS14 INS68 INS43 INS43 INS43 INS43 UPD42 INS43 INS42 INS54 INS32 INS42 INS70 INS21 INS9 INS27 INS32 INS27 MOV32 INS21 INS9 INS42 INS42 INS42 INS9 INS41 INS42 INS42 INS21 INS25 INS44 INS8 INS42 INS33 INS53 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS21 UPD74 MOV74 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 INS9 INS42 MOV8 MOV12 INS42 INS42 INS44 INS42 INS8 INS32 INS42 INS33 INS45 UPD42 MOV42 MOV42 INS42 INS33 INS7 INS42 INS32 INS7 INS27 INS8 INS43 INS42 INS21 INS41 INS14 INS42 INS42 INS74 INS42 INS42 INS32 INS32 INS43 INS43 INS42 INS60 MOV25 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS32 INS42 INS33 INS21 INS42 INS32 INS32 MOV43 INS27 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS83 MOV43 INS59 INS38 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS21 INS42 INS32 INS45 INS42 INS45 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL41 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL25 DEL32 DEL41 DEL8