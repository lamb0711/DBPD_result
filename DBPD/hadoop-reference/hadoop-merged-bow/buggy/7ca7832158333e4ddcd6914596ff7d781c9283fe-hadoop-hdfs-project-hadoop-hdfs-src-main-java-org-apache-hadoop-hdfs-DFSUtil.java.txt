HDFS-2231. Configuration changes for HA namenode. Contributed by Suresh Srinivas.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1182626 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_FEDERATION_NAMESERVICES;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_FEDERATION_NAMESERVICE_ID;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_BACKUP_ADDRESS_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY;
-
+import static org.apache.hadoop.hdfs.DFSConfigKeys.*;
+  /**
+   * Address matcher for matching an address to local address
+   */
+  static final AddressMatcher LOCAL_ADDRESS_MATCHER = new AddressMatcher() {
+    public boolean match(InetSocketAddress s) {
+      return NetUtils.isLocalAddress(s.getAddress());
+    };
+  };
-      
+  
+  /**
+   * Namenode HighAvailability related configuration.
+   * Returns collection of namenode Ids from the configuration. One logical id
+   * for each namenode in the in the HA setup.
+   * 
+   * @param conf configuration
+   * @return collection of namenode Ids
+   */
+  public static Collection<String> getNameNodeIds(Configuration conf) {
+    return conf.getStringCollection(DFS_HA_NAMENODES_KEY);
+  }
-      if (keySuffix != null) {
-        key += "." + keySuffix;
-      }
+      key = addSuffix(key, keySuffix);
+  /** Add non empty and non null suffix to a key */
+  private static String addSuffix(String key, String suffix) {
+    if (suffix == null || suffix.length() == 0) {
+      return key;
+    }
+    if (!suffix.startsWith(".")) {
+      key += ".";
+    }
+    return key += suffix;
+  }
+  
+  /** Concatenate list of suffix strings '.' separated */
+  private static String concatSuffixes(String... suffixes) {
+    if (suffixes == null) {
+      return null;
+    }
+    String ret = "";
+    for (int i = 0; i < suffixes.length - 1; i++) {
+      ret = addSuffix(ret, suffixes[i]);
+    }
+    return addSuffix(ret, suffixes[suffixes.length - 1]);
+  }
+  
+  /**
+   * Return configuration key of format key.suffix1.suffix2...suffixN
+   */
+  public static String addKeySuffixes(String key, String... suffixes) {
+    String keySuffix = concatSuffixes(suffixes);
+    return addSuffix(key, keySuffix);
+  }
+  
+    Collection<String> namenodeIds = getNameNodeIds(conf);
-    // Configuration with a single namenode
-    if (nameserviceIds == null || nameserviceIds.isEmpty()) {
+    final boolean federationEnabled = nameserviceIds != null
+        && !nameserviceIds.isEmpty();
+    final boolean haEnabled = namenodeIds != null
+        && !namenodeIds.isEmpty();
+    
+    // Configuration with no federation and ha, return default address
+    if (!federationEnabled && !haEnabled) {
-    } else {
-      // Get the namenodes for all the configured nameServiceIds
-      for (String nameserviceId : nameserviceIds) {
-        String address = getConfValue(null, nameserviceId, conf, keys);
+      return isas;
+    }
+    
+    if (!federationEnabled) {
+      nameserviceIds = new ArrayList<String>();
+      nameserviceIds.add(null);
+    }
+    if (!haEnabled) {
+      namenodeIds = new ArrayList<String>();
+      namenodeIds.add(null);
+    }
+    
+    // Get configuration suffixed with nameserviceId and/or namenodeId
+    for (String nameserviceId : nameserviceIds) {
+      for (String nnId : namenodeIds) {
+        String keySuffix = concatSuffixes(nameserviceId, nnId);
+        String address = getConfValue(null, keySuffix, conf, keys);
-   * Given the InetSocketAddress for any configured communication with a 
-   * namenode, this method returns the corresponding nameservice ID,
-   * by doing a reverse lookup on the list of nameservices until it
-   * finds a match.
+   * Given the InetSocketAddress this method returns the nameservice Id
+   * corresponding to the key with matching address, by doing a reverse 
+   * lookup on the list of nameservices until it finds a match.
+   * 
-   * to check pre-Federated configurations.
+   * to check pre-Federation, non-HA configurations.
-  public static String getNameServiceIdFromAddress(Configuration conf, 
-      InetSocketAddress address, String... keys) {
-    Collection<String> nameserviceIds = getNameServiceIds(conf);
-
+  public static String getNameServiceIdFromAddress(final Configuration conf, 
+      final InetSocketAddress address, String... keys) {
-    if (nameserviceIds == null || nameserviceIds.isEmpty()) {
-      // client should try {@link isDefaultNamenodeAddress} instead
+    if (!isFederationEnabled(conf)) {
-    }
-    // Get the candidateAddresses for all the configured nameServiceIds
-    for (String nameserviceId : nameserviceIds) {
-      for (String key : keys) {
-        String candidateAddress = conf.get(
-            getNameServiceIdKey(key, nameserviceId));
-        if (candidateAddress != null
-            && address.equals(NetUtils.createSocketAddr(candidateAddress)))
-          return nameserviceId;
-      }
-    }
-    // didn't find a match
-    // client should try {@link isDefaultNamenodeAddress} instead
-    return null;
+    }    
+    String[] ids = getSuffixIDs(conf, address, keys);
+    return (ids != null && ids.length > 0) ? ids[0] : null;
-
+  
-   * return server http or https address from the configuration
+   * return server http or https address from the configuration for a
+   * given namenode rpc address.
-   * @param namenode - namenode address
+   * @param namenodeAddr - namenode RPC address
-      InetSocketAddress namenode, Configuration conf, boolean httpsAddress) {
+      InetSocketAddress namenodeAddr, Configuration conf, boolean httpsAddress) {
-    
-    String httpAddressKey = (UserGroupInformation.isSecurityEnabled() 
-        && httpsAddress) ? DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY
-        : DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY;
-    String httpAddressDefault = (UserGroupInformation.isSecurityEnabled() 
-        && httpsAddress) ? DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT
-        : DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_DEFAULT;
-    if(namenode != null) {
+    boolean securityOn = UserGroupInformation.isSecurityEnabled();
+    String httpAddressKey = (securityOn && httpsAddress) ? 
+        DFS_NAMENODE_HTTPS_ADDRESS_KEY : DFS_NAMENODE_HTTP_ADDRESS_KEY;
+    String httpAddressDefault = (securityOn && httpsAddress) ? 
+        DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT : DFS_NAMENODE_HTTP_ADDRESS_DEFAULT;
+    if (namenodeAddr != null) {
-          conf, namenode,
+          conf, namenodeAddr,
-        httpAddress = conf.get(DFSUtil.getNameServiceIdKey(
+        httpAddress = conf.get(DFSUtil.addKeySuffixes(
-
-   * @return key specific to a nameserviceId from a generic key
-   */
-  public static String getNameServiceIdKey(String key, String nameserviceId) {
-    return key + "." + nameserviceId;
-  }
-  
-  /**
-   * value of "key.nameserviceId" and if found sets that value into generic key 
-   * in the conf. Note that this only modifies the runtime conf.
+   * value of "key.nameserviceId.namenodeId" and if found sets that value into 
+   * generic key in the conf. Note that this only modifies the runtime conf.
-   *          nameservice Id to construct the node specific key.
+   *          nameservice Id to construct the node specific key. Pass null if
+   *          federation is not configuration.
+   * @param nnId
+   *          namenode Id to construct the node specific key. Pass null if
+   *          HA is not configured.
-      String nameserviceId, String... keys) {
+      String nameserviceId, String nnId, String... keys) {
-      String value = conf.get(getNameServiceIdKey(key, nameserviceId));
+      String value = conf.get(addKeySuffixes(key, nameserviceId, nnId));
-    return capacity <= 0 ? 100 : ((float)used * 100.0f)/(float)capacity; 
+    return capacity <= 0 ? 100 : (used * 100.0f)/capacity; 
-    return capacity <= 0 ? 0 : ((float)remaining * 100.0f)/(float)capacity; 
+    return capacity <= 0 ? 0 : (remaining * 100.0f)/capacity; 
-    return (ClientDatanodeProtocol)RPC.getProxy(ClientDatanodeProtocol.class,
+    return RPC.getProxy(ClientDatanodeProtocol.class,
-   * Returns true if HA for namenode is configured.
-   * @param conf Configuration
-   * @return true if HA is configured in the configuration; else false.
+   * Returns true if federation configuration is enabled
-  public static boolean isHAEnabled(Configuration conf) {
-    // TODO:HA configuration changes pending
-    return false;
+  public static boolean isFederationEnabled(Configuration conf) {
+    Collection<String> collection = getNameServiceIds(conf);
+    return collection != null && collection.size() != 0;
-   * Get name service Id for the {@link NameNode} based on namenode RPC address
+   * Get nameservice Id for the {@link NameNode} based on namenode RPC address
-   * Get name service Id for the BackupNode based on backup node RPC address
+   * Get nameservice Id for the BackupNode based on backup node RPC address
-   * Get name service Id for the secondary node based on secondary http address
+   * Get nameservice Id for the secondary node based on secondary http address
-   * nodes address with the configured addresses. When a match is found, it
+   * node's address with the configured addresses. When a match is found, it
-   * @return name service Id on success, null on failure.
+   * @return nameservice Id on success, null if federation is not configured.
-    
-    Collection<String> ids = getNameServiceIds(conf);
-    if (ids == null || ids.size() == 0) {
-      // Not federation configuration, hence no nameservice Id
+    if (!isFederationEnabled(conf)) {
+    nameserviceId = getSuffixIDs(conf, addressKey, LOCAL_ADDRESS_MATCHER)[0];
+    if (nameserviceId == null) {
+      String msg = "Configuration " + addressKey + " must be suffixed with" +
+      		" nameserviceId for federation configuration.";
+      throw new HadoopIllegalArgumentException(msg);
+    }
+    return nameserviceId;
+  }
+  
+  /**
+   * Returns nameservice Id and namenode Id when the local host matches the
+   * configuration parameter {@code addressKey}.<nameservice Id>.<namenode Id>
+   * 
+   * @param conf Configuration
+   * @param addressKey configuration key corresponding to the address.
+   * @param matcher matching criteria for matching the address
+   * @return Array with nameservice Id and namenode Id on success. First element
+   *         in the array is nameservice Id and second element is namenode Id.
+   *         Null value indicates that the configuration does not have the the
+   *         Id.
+   * @throws HadoopIllegalArgumentException on error
+   */
+  static String[] getSuffixIDs(final Configuration conf, final String addressKey,
+      final AddressMatcher matcher) {
+    Collection<String> nsIds = getNameServiceIds(conf);
+    boolean federationEnabled = true;
+    if (nsIds == null || nsIds.size() == 0) {
+      federationEnabled = false; // federation not configured
+      nsIds = new ArrayList<String>();
+      nsIds.add(null);
+    }
-    // Match the rpc address with that of local address
+    boolean haEnabled = true;
+    Collection<String> nnIds = getNameNodeIds(conf);
+    if (nnIds == null || nnIds.size() == 0) {
+      haEnabled = false; // HA not configured
+      nnIds = new ArrayList<String>();
+      nnIds.add(null);
+    }
+    
+    // Match the address from addressKey.nsId.nnId based on the given matcher
+    String nameserviceId = null;
+    String namenodeId = null;
-    for (String id : ids) {
-      String addr = conf.get(getNameServiceIdKey(addressKey, id));
-      InetSocketAddress s = NetUtils.createSocketAddr(addr);
-      if (NetUtils.isLocalAddress(s.getAddress())) {
-        nameserviceId = id;
-        found++;
+    for (String nsId : nsIds) {
+      for (String nnId : nnIds) {
+        String key = addKeySuffixes(addressKey, nsId, nnId);
+        String addr = conf.get(key);
+        InetSocketAddress s = null;
+        try {
+          s = NetUtils.createSocketAddr(addr);
+        } catch (Exception e) {
+          continue;
+        }
+        if (matcher.match(s)) {
+          nameserviceId = nsId;
+          namenodeId = nnId;
+          found++;
+        }
-      throw new HadoopIllegalArgumentException(
-          "Configuration has multiple RPC addresses that matches "
-              + "the local node's address. Please configure the system with "
-              + "the parameter " + DFS_FEDERATION_NAMESERVICE_ID);
+      String msg = "Configuration has multiple addresses that match "
+          + "local node's address. Please configure the system with "
+          + (federationEnabled ? DFS_FEDERATION_NAMESERVICE_ID : "")
+          + (haEnabled ? (" and " + DFS_HA_NAMENODE_ID_KEY) : "");
+      throw new HadoopIllegalArgumentException(msg);
-    if (found == 0) {
-      throw new HadoopIllegalArgumentException("Configuration address "
-          + addressKey + " is missing in configuration with name service Id");
+    return new String[] { nameserviceId, namenodeId };
+  }
+  
+  /**
+   * For given set of {@code keys} adds nameservice Id and or namenode Id
+   * and returns {nameserviceId, namenodeId} when address match is found.
+   * @see #getSuffixIDs(Configuration, String, AddressMatcher)
+   */
+  static String[] getSuffixIDs(final Configuration conf,
+      final InetSocketAddress address, final String... keys) {
+    AddressMatcher matcher = new AddressMatcher() {
+     @Override
+      public boolean match(InetSocketAddress s) {
+        return address.equals(s);
+      } 
+    };
+    
+    for (String key : keys) {
+      String[] ids = getSuffixIDs(conf, key, matcher);
+      if (ids != null && (ids [0] != null || ids[1] != null)) {
+        return ids;
+      }
-    return nameserviceId;
+    return null;
+  }
+  
+  private interface AddressMatcher {
+    public boolean match(InetSocketAddress s);

MOV31 MOV31 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS29 INS83 INS83 INS43 INS59 INS29 INS83 MOV83 INS74 INS42 MOV44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 UPD42 MOV29 INS83 INS83 MOV43 INS42 INS44 INS44 MOV44 INS8 INS44 INS29 INS83 INS83 INS39 INS42 MOV44 INS8 UPD83 INS5 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS5 INS42 INS44 INS44 INS44 INS8 INS83 INS42 INS31 INS65 INS42 INS42 INS14 INS65 INS65 INS65 MOV43 MOV43 INS41 INS65 INS42 INS43 INS42 INS43 INS42 MOV25 INS25 INS41 INS65 MOV42 MOV43 INS42 INS25 MOV60 INS24 INS41 UPD65 UPD42 INS60 INS60 INS60 INS60 INS25 INS25 INS70 INS83 INS43 INS42 INS83 INS43 INS42 INS25 INS60 INS41 UPD42 INS60 INS65 INS43 INS42 INS65 MOV60 INS41 INS21 INS65 INS65 INS65 MOV43 INS85 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS60 INS60 MOV60 INS70 INS25 INS41 INS65 INS65 INS43 INS85 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS70 MOV41 INS83 INS39 INS42 INS44 INS66 INS43 INS1 INS66 INS66 INS66 INS42 INS66 INS66 INS32 INS66 INS42 INS42 INS8 INS38 INS8 INS7 INS66 INS27 INS8 INS58 INS27 INS37 INS8 INS32 UPD66 INS43 INS59 INS32 INS74 INS59 INS83 INS39 INS59 INS83 INS39 INS59 UPD27 INS38 INS8 INS38 INS8 MOV44 INS42 MOV8 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS38 MOV8 INS5 INS59 INS16 UPD66 INS66 UPD42 UPD66 INS39 INS59 UPD66 UPD66 UPD66 INS66 INS42 INS66 INS66 INS42 MOV32 INS66 INS27 UPD66 UPD66 UPD66 UPD66 UPD66 INS38 INS7 UPD66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS66 UPD66 INS66 INS42 INS66 INS42 INS42 INS42 INS74 INS59 INS39 INS59 INS27 INS8 INS39 INS59 INS74 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS44 INS42 INS8 MOV27 INS8 INS3 INS66 INS65 INS66 INS66 INS68 INS42 INS42 INS42 INS42 INS43 INS59 MOV44 INS42 INS8 INS43 INS42 INS42 INS31 INS42 UPD42 MOV42 UPD42 MOV42 MOV21 INS27 INS41 INS32 INS21 INS42 INS42 INS42 INS33 INS41 INS42 INS45 INS39 INS59 UPD42 MOV42 INS27 INS42 INS21 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS27 INS42 INS27 INS38 INS38 INS41 INS42 INS21 INS21 INS42 INS21 INS21 INS32 MOV43 INS85 INS42 INS32 INS36 INS2 INS33 INS42 MOV32 UPD42 MOV27 MOV27 UPD42 INS27 INS27 INS32 INS42 INS2 UPD42 INS33 INS60 INS53 INS66 INS43 INS43 INS42 INS32 INS42 INS9 INS27 INS27 INS21 INS21 INS21 INS42 INS9 INS43 INS43 INS42 INS32 INS27 INS27 INS21 INS21 INS21 INS42 INS42 INS33 INS42 INS42 INS33 INS43 INS42 INS70 INS60 INS53 INS5 INS4 INS66 INS42 INS69 INS69 INS69 INS42 INS42 INS14 INS60 INS25 INS42 MOV83 INS39 INS42 MOV44 INS8 UPD7 UPD42 MOV32 INS34 INS42 INS42 INS42 INS45 INS7 INS33 INS42 INS34 INS40 INS34 INS7 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS38 INS27 INS38 INS42 INS42 INS42 INS7 INS32 INS7 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS33 INS32 INS34 UPD42 MOV42 UPD42 MOV42 INS32 INS34 MOV43 INS59 INS14 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS7 INS7 INS32 INS42 INS44 INS42 INS8 INS43 INS59 INS14 INS43 INS85 INS42 INS42 INS43 INS43 INS43 INS43 INS1 INS5 INS59 INS27 INS8 UPD42 INS41 INS32 UPD42 UPD42 INS42 INS45 INS42 INS32 INS40 INS34 INS42 INS33 INS32 INS42 INS33 INS32 INS42 INS14 INS42 INS42 INS33 INS42 INS14 INS42 INS42 INS33 UPD42 INS60 INS27 INS27 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS27 MOV43 INS42 INS42 INS42 INS42 INS9 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS42 INS9 INS42 INS14 INS42 INS42 INS33 INS43 INS42 INS60 INS60 INS60 INS54 INS25 INS42 INS42 INS27 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS31 INS43 INS85 INS42 INS32 INS27 INS36 INS41 MOV32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS2 INS42 INS42 INS42 INS42 INS74 INS74 INS43 INS59 INS43 INS42 INS33 INS40 INS34 INS42 INS42 UPD42 INS42 INS42 UPD45 MOV45 MOV42 INS45 UPD45 MOV45 INS74 INS74 INS42 INS43 INS59 INS43 INS59 MOV43 INS59 INS8 INS12 INS32 INS8 INS27 INS36 INS36 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS27 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS32 INS42 UPD42 INS42 INS43 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS42 INS21 INS21 MOV21 INS45 INS45 INS16 INS16 INS42 INS43 INS42 INS41 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS18 INS7 INS7 INS42 INS42 INS45 INS42 INS36 INS45 INS42 INS32 INS2 INS33 INS2 INS33 UPD42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45 DEL42 DEL27 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL42 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL66 DEL42 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL41 DEL25 DEL8 DEL70 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL39 DEL42 DEL11 DEL42 DEL43 DEL11 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL27 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL45 DEL45 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL34 DEL27 DEL14 DEL53 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8