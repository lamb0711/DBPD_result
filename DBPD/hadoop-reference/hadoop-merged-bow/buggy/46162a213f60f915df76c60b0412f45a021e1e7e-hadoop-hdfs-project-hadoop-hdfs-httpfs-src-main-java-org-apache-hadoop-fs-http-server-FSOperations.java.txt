HDFS-6430. HTTPFS - Implement XAttr support. (Yi Liu via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605118 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.XAttrCodec;
+import org.apache.hadoop.fs.XAttrSetFlag;
+import java.util.EnumSet;
+import java.util.Map.Entry;
+   * Converts xAttrs to a JSON object.
+   *
+   * @param xAttrs file xAttrs.
+   * @param encoding format of xattr values.
+   *
+   * @return The JSON representation of the xAttrs.
+   * @throws IOException 
+   */
+  @SuppressWarnings({"unchecked", "rawtypes"})
+  private static Map xAttrsToJSON(Map<String, byte[]> xAttrs, 
+      XAttrCodec encoding) throws IOException {
+    Map jsonMap = new LinkedHashMap();
+    JSONArray jsonArray = new JSONArray();
+    if (xAttrs != null) {
+      for (Entry<String, byte[]> e : xAttrs.entrySet()) {
+        Map json = new LinkedHashMap();
+        json.put(HttpFSFileSystem.XATTR_NAME_JSON, e.getKey());
+        if (e.getValue() != null) {
+          json.put(HttpFSFileSystem.XATTR_VALUE_JSON, 
+              XAttrCodec.encodeValue(e.getValue(), encoding));
+        }
+        jsonArray.add(json);
+      }
+    }
+    jsonMap.put(HttpFSFileSystem.XATTRS_JSON, jsonArray);
+    return jsonMap;
+  }
+
+  /**
+   * Converts xAttr names to a JSON object.
+   *
+   * @param names file xAttr names.
+   *
+   * @return The JSON representation of the xAttr names.
+   * @throws IOException 
+   */
+  @SuppressWarnings({"unchecked", "rawtypes"})
+  private static Map xAttrNamesToJSON(List<String> names) throws IOException {
+    Map jsonMap = new LinkedHashMap();
+    jsonMap.put(HttpFSFileSystem.XATTRNAMES_JSON, JSONArray.toJSONString(names));
+    return jsonMap;
+  }
+
+  /**
+  /**
+   * Executor that performs a setxattr FileSystemAccess files system operation.
+   */
+  @InterfaceAudience.Private
+  public static class FSSetXAttr implements 
+      FileSystemAccess.FileSystemExecutor<Void> {
+
+    private Path path;
+    private String name;
+    private byte[] value;
+    private EnumSet<XAttrSetFlag> flag;
+
+    public FSSetXAttr(String path, String name, String encodedValue, 
+        EnumSet<XAttrSetFlag> flag) throws IOException {
+      this.path = new Path(path);
+      this.name = name;
+      this.value = XAttrCodec.decodeValue(encodedValue);
+      this.flag = flag;
+    }
+
+    @Override
+    public Void execute(FileSystem fs) throws IOException {
+      fs.setXAttr(path, name, value, flag);
+      return null;
+    }
+  }
+
+  /**
+   * Executor that performs a removexattr FileSystemAccess files system 
+   * operation.
+   */
+  @InterfaceAudience.Private
+  public static class FSRemoveXAttr implements 
+      FileSystemAccess.FileSystemExecutor<Void> {
+
+    private Path path;
+    private String name;
+
+    public FSRemoveXAttr(String path, String name) {
+      this.path = new Path(path);
+      this.name = name;
+    }
+
+    @Override
+    public Void execute(FileSystem fs) throws IOException {
+      fs.removeXAttr(path, name);
+      return null;
+    }
+  }
+
+  /**
+   * Executor that performs listing xattrs FileSystemAccess files system 
+   * operation.
+   */
+  @SuppressWarnings("rawtypes")
+  @InterfaceAudience.Private
+  public static class FSListXAttrs implements 
+      FileSystemAccess.FileSystemExecutor<Map> {
+    private Path path;
+
+    /**
+     * Creates listing xattrs executor.
+     *
+     * @param path the path to retrieve the xattrs.
+     */
+    public FSListXAttrs(String path) {
+      this.path = new Path(path);
+    }
+
+    /**
+     * Executes the filesystem operation.
+     *
+     * @param fs filesystem instance to use.
+     *
+     * @return Map a map object (JSON friendly) with the xattr names.
+     *
+     * @throws IOException thrown if an IO error occured.
+     */
+    @Override
+    public Map execute(FileSystem fs) throws IOException {
+      List<String> names = fs.listXAttrs(path);
+      return xAttrNamesToJSON(names);
+    }
+  }
+
+  /**
+   * Executor that performs getting xattrs FileSystemAccess files system 
+   * operation.
+   */
+  @SuppressWarnings("rawtypes")
+  @InterfaceAudience.Private
+  public static class FSGetXAttrs implements 
+      FileSystemAccess.FileSystemExecutor<Map> {
+    private Path path;
+    private List<String> names;
+    private XAttrCodec encoding;
+
+    /**
+     * Creates getting xattrs executor.
+     *
+     * @param path the path to retrieve the xattrs.
+     */
+    public FSGetXAttrs(String path, List<String> names, XAttrCodec encoding) {
+      this.path = new Path(path);
+      this.names = names;
+      this.encoding = encoding;
+    }
+
+    /**
+     * Executes the filesystem operation.
+     *
+     * @param fs filesystem instance to use.
+     *
+     * @return Map a map object (JSON friendly) with the xattrs.
+     *
+     * @throws IOException thrown if an IO error occured.
+     */
+    @Override
+    public Map execute(FileSystem fs) throws IOException {
+      Map<String, byte[]> xattrs = null;
+      if (names != null && !names.isEmpty()) {
+        xattrs = fs.getXAttrs(path, names);
+      } else {
+        xattrs = fs.getXAttrs(path);
+      }
+      return xAttrsToJSON(xattrs, encoding);
+    }
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS55 INS55 INS55 INS55 INS29 INS79 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS79 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS23 INS23 INS23 INS31 INS31 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS23 INS31 INS31 INS29 INS79 INS78 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS29 INS79 INS78 INS83 INS83 INS42 INS74 INS23 INS23 INS23 INS31 INS31 INS65 INS65 INS65 INS65 INS65 INS42 INS4 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS4 INS42 INS74 INS42 INS42 INS60 INS21 INS41 INS65 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS5 INS59 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS45 INS40 INS43 INS43 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS65 INS42 INS45 INS40 INS43 INS43 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS45 INS45 INS43 INS43 INS5 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS45 INS45 INS43 INS43 INS43 INS59 INS32 INS42 INS66 INS40 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS43 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS21 INS41 INS66 INS66 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS21 INS41 INS66 INS66 INS40 INS42 INS42 INS42 INS65 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS42 INS60 INS41 INS66 INS66 INS40 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS65 INS65 INS43 INS42 INS74 INS42 INS43 INS42 INS21 INS21 INS21 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS42 INS42 INS39 INS85 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS33 INS70 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS7 INS7 INS7 INS7 INS42 INS32 INS33 INS42 INS42 INS7 INS7 INS42 INS32 INS33 INS66 INS42 INS66 INS42 INS7 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS74 INS59 INS32 INS42 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS42 INS7 INS7 INS7 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS74 INS59 INS27 INS8 INS8 INS32 INS43 INS43 INS44 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS22 INS14 INS22 INS42 INS22 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS14 INS22 INS42 INS42 INS42 INS42 INS42 INS22 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS22 INS14 INS22 INS42 INS22 INS42 INS43 INS43 INS5 INS42 INS33 INS27 INS38 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS60 INS21 INS25 INS21 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS39 INS85 INS42 INS33 INS32 INS7 INS7 INS43 INS43 INS5 INS43 INS59 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS39 INS85 INS42 INS42 INS14 INS42 INS42 INS40 INS32 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS32 INS42 INS42 INS42