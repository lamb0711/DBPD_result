HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.io.IOUtils;
-
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-        LOG.error("Deleting corruped rename pending file "
-            + redoFile + "\n" + contents);
+        LOG.error("Deleting corruped rename pending file {} \n {}",
+            redoFile, contents);
-      if (LOG.isDebugEnabled()){
-        LOG.debug("Preparing to write atomic rename state to " + path.toString());
-      }
+      LOG.debug("Preparing to write atomic rename state to {}", path.toString());
-        IOUtils.cleanup(LOG, output);
+        NativeAzureFileSystem.cleanup(LOG, output);
-          LOG.error("Internal error: Exceeded maximum rename pending file size of "
-              + MAX_RENAME_PENDING_FILE_SIZE + " bytes.");
+          LOG.error("Internal error: Exceeded maximum rename pending file size of {} bytes.",
+              MAX_RENAME_PENDING_FILE_SIZE);
-  public static final Log LOG = LogFactory.getLog(NativeAzureFileSystem.class);
+  public static final Logger LOG = LoggerFactory.getLogger(NativeAzureFileSystem.class);
-      int result = 0;
-      result = in.read();
-      if (result != -1) {
-        pos++;
-        if (statistics != null) {
-          statistics.incrementBytesRead(1);
+      try {
+        int result = 0;
+        result = in.read();
+        if (result != -1) {
+          pos++;
+          if (statistics != null) {
+            statistics.incrementBytesRead(1);
+          }
-      }
-
-      return result;
+        return result;
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for read on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-      int result = 0;
-      result = in.read(b, off, len);
-      if (result > 0) {
-        pos += result;
-      }
+      try {
+        int result = 0;
+        result = in.read(b, off, len);
+        if (result > 0) {
+          pos += result;
+        }
-      if (null != statistics) {
-        statistics.incrementBytesRead(result);
-      }
+        if (null != statistics) {
+          statistics.incrementBytesRead(result);
+        }
-      // Return to the caller with the result.
-      return result;
+        // Return to the caller with the result.
+        return result;
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for read on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-     if (LOG.isDebugEnabled()) {
-       LOG.debug(String.format("Seek to position %d. Bytes skipped %d", pos,
-         this.pos));
-     }
+     LOG.debug("Seek to position {}. Bytes skipped {}", pos,
+         this.pos);
-      out.write(b);
+      try {
+        out.write(b);
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for write on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-      out.write(b);
+      try {
+        out.write(b);
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for write on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-      out.write(b, off, len);
+      try {
+        out.write(b, off, len);
+      } catch(IOException e) {
+        if (e.getCause() instanceof StorageException) {
+          StorageException storageExcp  = (StorageException) e.getCause();
+          LOG.error("Encountered Storage Exception for write on Blob : {}"
+              + " Exception details: {} Error Code : {}",
+              key, e.getMessage(), storageExcp.getErrorCode());
+        }
+        throw e;
+      }
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("NativeAzureFileSystem. Initializing.");
-      LOG.debug("  blockSize  = "
-          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));
-    }
+
+    LOG.debug("NativeAzureFileSystem. Initializing.");
+    LOG.debug("  blockSize  = {}",
+        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));
+
-        LOG.warn("Got unexpected exception trying to get lease on "
-          + pathToKey(parent) + ". " + e.getMessage());
+        LOG.warn("Got unexpected exception trying to get lease on {} . {}",
+          pathToKey(parent), e.getMessage());
-        LOG.warn("Unable to free lease because: " + e.getMessage());
+        LOG.warn("Unable to free lease because: {}", e.getMessage());
-        IOUtils.cleanup(LOG, out);
+        NativeAzureFileSystem.cleanup(LOG, out);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Creating file: " + f.toString());
-    }
+    LOG.debug("Creating file: {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Deleting file: " + f.toString());
-    }
+    LOG.debug("Deleting file: {}", f.toString());
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Found an implicit parent directory while trying to"
-                + " delete the file " + f + ". Creating the directory blob for"
-                + " it in " + parentKey + ".");
-          }
+          LOG.debug("Found an implicit parent directory while trying to"
+              + " delete the file {}. Creating the directory blob for"
+              + " it in {}.", f, parentKey);
+
+      LOG.debug("Directory Delete encountered: {}", f.toString());
-          if (LOG.isDebugEnabled()) {
-            LOG.debug("Found an implicit parent directory while trying to"
-                + " delete the directory " + f
-                + ". Creating the directory blob for" + " it in " + parentKey
-                + ".");
-          }
+          LOG.debug("Found an implicit parent directory while trying to"
+              + " delete the directory {}. Creating the directory blob for"
+              + " it in {}. ", f, parentKey);
+
+    LOG.debug("Delete Successful for : {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Getting the file status for " + f.toString());
-    }
+    LOG.debug("Getting the file status for {}", f.toString());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Path " + f.toString() + "is a folder.");
-        }
+
+        LOG.debug("Path {} is a folder.", f.toString());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Found the path: " + f.toString() + " as a file.");
-      }
+      LOG.debug("Found the path: {} as a file.", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Listing status for " + f.toString());
-    }
+    LOG.debug("Listing status for {}", f.toString());
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Found path as a file");
-        }
+
+        LOG.debug("Found path as a file");
+
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Found path as a directory with " + status.size()
-            + " files in it.");
-      }
+
+      LOG.debug("Found path as a directory with {}"
+          + " files in it.", status.size());
+
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Did not find any metadata for path: " + key);
-      }
+      LOG.debug("Did not find any metadata for path: {}", key);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Creating directory: " + f.toString());
-    }
+
+
+    LOG.debug("Creating directory: {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Opening file: " + f.toString());
-    }
+
+    LOG.debug("Opening file: {}", f.toString());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Moving " + src + " to " + dst);
-    }
+    LOG.debug("Moving {} to {}", src, dst);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Destination " + dst
-            + " is a directory, adjusted the destination to be " + dstKey);
-      }
+      LOG.debug("Destination {} "
+          + " is a directory, adjusted the destination to be {}", dst, dstKey);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Destination " + dst
-            + " is an already existing file, failing the rename.");
-      }
+      LOG.debug("Destination {}"
+          + " is an already existing file, failing the rename.", dst);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Parent of the destination " + dst
-              + " doesn't exist, failing the rename.");
-        }
+        LOG.debug("Parent of the destination {}"
+            + " doesn't exist, failing the rename.", dst);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Parent of the destination " + dst
-              + " is a file, failing the rename.");
-        }
+        LOG.debug("Parent of the destination {}"
+            + " is a file, failing the rename.", dst);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Source " + src + " doesn't exist, failing the rename.");
-      }
+      LOG.debug("Source {} doesn't exist, failing the rename.", src);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Source " + src + " found as a file, renaming.");
-      }
+      LOG.debug("Source {} found as a file, renaming.", src);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Renamed " + src + " to " + dst + " successfully.");
-      }
+
+      LOG.debug("Renamed {} to {} successfully.", src, dst);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Renamed " + src + " to " + dst + " successfully.");
-    }
+    LOG.debug("Renamed {} to {} successfully.", src, dst);
-            LOG.warn("Got unexpected exception trying to get lease on "
-                + parentKey + ". " + e.getMessage());
+            LOG.warn("Got unexpected exception trying to get lease on {}. {}",
+                parentKey, e.getMessage());
-              LOG.error("Unable to free lease on " + parentKey, e);
+              LOG.error("Unable to free lease on {}", parentKey, e);
-    if (LOG.isDebugEnabled()) {
-        LOG.debug("Submitting metrics when file system closed took "
-                + (System.currentTimeMillis() - startTime) + " ms.");
-    }
+    LOG.debug("Submitting metrics when file system closed took {} ms.",
+        (System.currentTimeMillis() - startTime));
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Deleting dangling file " + file.getKey());
-      }
+
+      LOG.debug("Deleting dangling file {}", file.getKey());
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Recovering " + file.getKey());
-      }
+
+      LOG.debug("Recovering {}", file.getKey());
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Recovering files with dangling temp data in " + root);
-    }
+
+    LOG.debug("Recovering files with dangling temp data in {}", root);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Deleting files with dangling temp data in " + root);
-    }
+
+    LOG.debug("Deleting files with dangling temp data in {}", root);
-}
+
+  private static void cleanup(Logger log, java.io.Closeable closeable) {
+    if (closeable != null) {
+      try {
+        closeable.close();
+      } catch(IOException e) {
+        if (log != null) {
+          log.debug("Exception in closing {}", closeable, e);
+        }
+      }
+    }
+  }
+}

MOV26 MOV26 UPD40 UPD40 INS31 UPD43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 UPD42 INS8 INS8 INS8 INS8 INS8 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 MOV21 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 INS43 INS42 INS43 INS42 INS25 MOV21 UPD42 UPD42 INS54 INS54 MOV21 INS54 INS54 INS54 INS32 INS32 MOV8 INS21 MOV21 INS42 INS40 INS27 INS8 MOV8 INS12 MOV8 INS12 MOV8 INS12 MOV8 INS12 MOV8 INS12 INS45 MOV32 MOV42 UPD42 MOV42 INS45 MOV32 INS45 MOV32 INS21 INS45 MOV32 INS45 MOV32 MOV21 INS45 INS32 MOV21 MOV21 MOV42 UPD42 MOV42 INS45 MOV32 INS45 MOV32 INS45 INS42 INS42 MOV21 MOV8 MOV41 MOV8 INS45 INS42 INS42 INS45 MOV36 INS32 INS45 INS42 INS45 INS42 INS42 INS33 INS54 INS45 MOV32 INS44 INS8 INS44 INS8 UPD45 MOV45 MOV42 MOV22 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS32 MOV8 MOV42 MOV42 MOV42 MOV42 MOV8 MOV41 MOV21 MOV21 MOV42 UPD42 MOV42 INS45 MOV32 INS45 MOV32 INS8 INS12 INS43 INS42 INS25 INS53 INS43 INS42 INS25 INS53 INS43 INS42 INS25 INS53 INS43 INS42 INS25 INS53 INS43 INS42 INS25 INS53 MOV25 INS42 INS42 INS45 MOV32 MOV60 MOV60 MOV21 INS45 MOV32 MOV41 MOV32 INS45 INS42 INS27 INS42 INS42 MOV8 INS25 INS45 INS42 INS21 INS44 INS8 INS45 INS42 INS42 UPD42 INS42 INS62 INS8 INS42 INS42 INS62 INS8 INS42 INS42 INS62 INS8 INS42 INS42 INS62 INS8 INS42 INS42 INS62 INS8 INS42 MOV27 MOV8 MOV27 MOV42 MOV42 UPD45 UPD45 MOV45 INS45 INS42 MOV41 MOV38 MOV8 INS45 INS42 INS45 INS42 INS42 INS32 INS43 INS42 INS25 INS32 INS43 INS60 INS21 INS32 INS43 INS60 INS21 INS32 INS43 INS60 INS21 INS32 INS43 INS60 INS21 INS32 INS43 INS60 INS21 MOV21 MOV21 INS45 INS32 UPD45 MOV41 INS42 INS42 INS42 INS27 INS8 INS45 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS45 MOV32 MOV32 INS45 MOV32 UPD42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS27 INS42 INS32 INS32 INS42 INS42 INS11 INS42 INS42 INS27 INS42 MOV32 INS32 MOV42 MOV42 INS27 INS42 INS42 INS27 INS42 INS42 UPD45 INS42 INS32 INS43 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS43 INS32 INS45 INS45 INS42 INS42 INS42 INS42 MOV45 UPD45 MOV45 INS45 MOV45 UPD45 MOV45 INS45 UPD45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 MOV42 MOV42 INS45 INS42 DEL40 DEL26 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL27 DEL45 DEL27 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL27 DEL42 DEL45 DEL45 DEL42 DEL45 DEL27 DEL8 DEL25 DEL42 DEL42 DEL32 DEL27 DEL42 DEL45 DEL45 DEL42 DEL45 DEL27 DEL25 DEL8 DEL45 DEL27 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL32 DEL25 DEL8 DEL25 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL27 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL8