HADOOP-12723 S3A: Add ability to plug in any AWSCredentialsProvider. Contributed by Steven Wong.

+import com.amazonaws.auth.AWSCredentialsProvider;
-
-
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.StringUtils;
-    AWSAccessKeys creds = getAWSAccessKeys(name, conf);
-
-    AWSCredentialsProviderChain credentials = new AWSCredentialsProviderChain(
-        new BasicAWSCredentialsProvider(
-            creds.getAccessKey(), creds.getAccessSecret()),
-        new InstanceProfileCredentialsProvider(),
-        new AnonymousAWSCredentialsProvider()
-    );
-
+    AWSCredentialsProvider credentials = getAWSCredentialsProvider(name, conf);
+
-      AWSCredentialsProviderChain credentials, ClientConfiguration awsConf)
+      AWSCredentialsProvider credentials, ClientConfiguration awsConf)
+   * Create the standard credential provider, or load in one explicitly
+   * identified in the configuration.
+   * @param binding the S3 binding/bucket.
+   * @param conf configuration
+   * @return a credential provider
+   * @throws IOException on any problem. Class construction issues may be
+   * nested inside the IOE.
+   */
+  private AWSCredentialsProvider getAWSCredentialsProvider(URI binding,
+      Configuration conf) throws IOException {
+    AWSCredentialsProvider credentials;
+
+    String className = conf.getTrimmed(AWS_CREDENTIALS_PROVIDER);
+    if (StringUtils.isEmpty(className)) {
+      AWSAccessKeys creds = getAWSAccessKeys(binding, conf);
+      credentials = new AWSCredentialsProviderChain(
+          new BasicAWSCredentialsProvider(
+              creds.getAccessKey(), creds.getAccessSecret()),
+          new InstanceProfileCredentialsProvider(),
+          new AnonymousAWSCredentialsProvider()
+      );
+
+    } else {
+      try {
+        LOG.debug("Credential provider class is {}", className);
+        credentials = (AWSCredentialsProvider) Class.forName(className)
+            .getDeclaredConstructor(URI.class, Configuration.class)
+            .newInstance(this.uri, conf);
+      } catch (ClassNotFoundException e) {
+        throw new IOException(className + " not found.", e);
+      } catch (NoSuchMethodException | SecurityException e) {
+        throw new IOException(className + " constructor exception.", e);
+      } catch (ReflectiveOperationException | IllegalArgumentException e) {
+        throw new IOException(className + " instantiation exception.", e);
+      }
+      LOG.debug("Using {} for {}.", credentials, this.uri);
+    }
+
+    return credentials;
+  }
+
+  /**
-        .append(statistics.toString())
+        .append(statistics)

INS26 INS40 INS31 MOV60 INS29 INS83 INS43 INS42 INS44 INS44 INS43 INS8 UPD43 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS43 UPD42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS60 INS21 INS54 INS21 UPD42 INS42 INS42 INS42 MOV43 INS59 INS7 INS8 INS12 INS12 INS12 INS32 MOV42 INS42 INS32 INS42 MOV14 INS21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS45 INS42 INS22 INS42 INS42 INS42 INS32 INS7 INS43 INS42 INS53 INS84 INS42 INS53 INS84 INS42 INS53 INS52 INS42 INS42 INS42 INS45 INS42 INS42 INS11 INS42 INS14 INS43 INS43 INS14 INS43 INS43 INS14 INS43 INS32 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS22 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS57 INS57 INS52 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32