HADOOP-6106. Provides an option in ShellCommandExecutor to timeout commands that do not complete within a certain amount of time. Contributed by Sreekanth Ramakrishnan.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@788600 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Timer;
+import java.util.TimerTask;
+import java.util.concurrent.atomic.AtomicBoolean;
+  /**Time after which the executing script would be timedout*/
+  protected long timeOutInterval = 0L;
+  /** If or not script timed out*/
+  private AtomicBoolean timedOut;
+
+
+  /**If or not script finished executing*/
+  private volatile AtomicBoolean completed;
-    boolean completed = false;
+    Timer timeOutTimer = null;
+    ShellTimeoutTimerTask timeoutTimerTask = null;
+    timedOut = new AtomicBoolean(false);
+    completed = new AtomicBoolean(false);
+    if (timeOutInterval > 0) {
+      timeOutTimer = new Timer();
+      timeoutTimerTask = new ShellTimeoutTimerTask(
+          this);
+      //One time scheduling.
+      timeOutTimer.schedule(timeoutTimerTask, timeOutInterval);
+    }
-      exitCode = process.waitFor();
+      exitCode  = process.waitFor();
-      completed = true;
+      completed.set(true);
+      //the timeout thread handling
+      //taken care in finally block
+      if ((timeOutTimer!=null) && !timedOut.get()) {
+        timeOutTimer.cancel();
+      }
-      if (!completed) {
+      if (!completed.get()) {
+    
-      command = execString.clone();
-    }
-
-    public ShellCommandExecutor(String[] execString, File dir) {
-      this(execString);
-      this.setWorkingDirectory(dir);
-    }
-
-    public ShellCommandExecutor(String[] execString, File dir, 
-                                 Map<String, String> env) {
-      this(execString, dir);
-      this.setEnvironment(env);
+      this(execString, null);
+    public ShellCommandExecutor(String[] execString, File dir) {
+      this(execString, dir, null);
+    }
+   
+    public ShellCommandExecutor(String[] execString, File dir, 
+                                 Map<String, String> env) {
+      this(execString, dir, env , 0L);
+    }
+
+    /**
+     * Create a new instance of the ShellCommandExecutor to execute a command.
+     * 
+     * @param execString The command to execute with arguments
+     * @param dir If not-null, specifies the directory which should be set
+     *            as the current working directory for the command.
+     *            If null, the current working directory is not modified.
+     * @param env If not-null, environment of the command will include the
+     *            key-value pairs specified in the map. If null, the current
+     *            environment is not modified.
+     * @param timeout Specifies the time in milliseconds, after which the
+     *                command will be killed and the status marked as timedout.
+     *                If 0, the command will not be timed out. 
+     */
+    public ShellCommandExecutor(String[] execString, File dir, 
+        Map<String, String> env, long timeout) {
+      command = execString.clone();
+      if (dir != null) {
+        setWorkingDirectory(dir);
+      }
+      if (env != null) {
+        setEnvironment(env);
+      }
+      timeOutInterval = timeout;
+    }
+        
+
+  /**
+   * To check if the passed script to shell command executor timed out or
+   * not.
+   * 
+   * @return if the script timed out.
+   */
+  public boolean isTimedOut() {
+    return timedOut.get();
+  }
+  
+  /**
+   * Set if the command has timed out.
+   * 
+   */
+  private void setTimedOut() {
+    this.timedOut.set(true);
+  }
+  
-    return execCommand(null, cmd);
+    return execCommand(null, cmd, 0L);
+   * @param timeout time in milliseconds after which script should be marked timeout
+   * @return the output of the executed command.o
+   */
+  
+  public static String execCommand(Map<String, String> env, String[] cmd,
+      long timeout) throws IOException {
+    ShellCommandExecutor exec = new ShellCommandExecutor(cmd, null, env, 
+                                                          timeout);
+    exec.execute();
+    return exec.getOutput();
+  }
+
+  /** 
+   * Static method to execute a shell command. 
+   * Covers most of the simple cases without requiring the user to implement  
+   * the <code>Shell</code> interface.
+   * @param env the map of environment key=value
+   * @param cmd shell command to execute.
-    ShellCommandExecutor exec = new ShellCommandExecutor(cmd);
-    if (env != null) {
-      exec.setEnvironment(env);
+    return execCommand(env, cmd, 0L);
+  }
+  
+  /**
+   * Timer which is used to timeout scripts spawned off by shell.
+   */
+  private static class ShellTimeoutTimerTask extends TimerTask {
+
+    private Shell shell;
+
+    public ShellTimeoutTimerTask(Shell shell) {
+      this.shell = shell;
-    exec.execute();
-    return exec.getOutput();
+
+    @Override
+    public void run() {
+      Process p = shell.getProcess();
+      try {
+        p.exitValue();
+      } catch (Exception e) {
+        //Process has not terminated.
+        //So check if it has completed 
+        //if not just destroy it.
+        if (p != null && !shell.completed.get()) {
+          shell.setTimedOut();
+          p.destroy();
+        }
+      }
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS55 INS29 INS83 INS39 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS31 INS31 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 MOV8 INS8 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS65 INS42 INS34 INS65 INS42 INS42 INS65 INS42 INS42 INS60 INS60 INS21 INS21 INS25 MOV44 MOV83 MOV42 MOV44 MOV44 INS8 INS83 INS42 INS44 MOV44 MOV44 INS8 INS29 MOV44 INS44 INS44 INS44 INS65 INS65 INS41 INS65 INS21 INS65 INS65 INS65 INS65 INS65 INS42 INS74 INS42 INS5 INS42 INS39 INS42 INS42 INS60 INS41 INS65 INS42 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS66 INS66 INS66 INS43 INS59 INS43 INS59 INS7 INS7 INS27 INS8 INS17 MOV17 INS5 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS39 INS42 MOV21 INS25 INS25 INS21 INS66 INS66 INS66 INS32 INS66 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 INS43 INS43 INS85 MOV43 INS59 INS32 INS66 INS42 INS42 INS43 INS42 INS21 INS42 INS60 INS54 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS14 INS42 INS14 INS42 INS34 INS21 INS21 INS21 INS25 INS42 INS33 INS42 INS33 INS43 INS85 INS42 INS42 INS42 INS34 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS43 INS43 INS43 INS27 INS8 MOV27 INS8 INS7 INS42 INS42 INS22 INS42 INS9 INS34 INS42 INS42 INS42 INS42 MOV42 INS14 INS42 INS42 INS42 INS34 INS42 INS7 INS43 INS59 INS8 INS12 INS43 INS9 INS43 INS9 INS7 INS7 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS21 MOV21 INS42 INS42 INS52 INS42 MOV43 MOV42 INS33 INS42 INS42 INS22 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS36 INS38 INS21 INS32 INS32 INS52 INS42 INS42 INS42 INS32 INS43 INS42 INS25 INS43 INS43 INS52 INS27 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS27 INS38 INS21 INS21 INS42 INS33 INS32 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL42 DEL52 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL52 DEL42 DEL42 DEL17 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25