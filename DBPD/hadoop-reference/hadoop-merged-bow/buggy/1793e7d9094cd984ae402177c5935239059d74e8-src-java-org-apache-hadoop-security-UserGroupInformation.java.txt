HADOOP-6510. Adds a way for superusers to impersonate other users in a secure environment. Contributed by Jitendra Nath Pandey.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@907549 13f79535-47bb-0310-9956-ffa450edef68

+  private static class RealUser implements Principal {
+    private final UserGroupInformation realUser;
+    
+    RealUser(UserGroupInformation realUser) {
+      this.realUser = realUser;
+    }
+    
+    public String getName() {
+      return realUser.getUserName();
+    }
+    
+    public UserGroupInformation getRealUser() {
+      return realUser;
+    }
+    
+    @Override
+    public boolean equals(Object o) {
+      if (this == o) {
+        return true;
+      } else if (o == null || getClass() != o.getClass()) {
+        return false;
+      } else {
+        return realUser.equals(((RealUser) o).realUser);
+      }
+    }
+    
+    @Override
+    public int hashCode() {
+      return realUser.hashCode();
+    }
+    
+    @Override
+    public String toString() {
+      return realUser.toString();
+    }
+  }
+  
+
+  /* Create a proxy user using username of the effective user and the ugi of the
+   * real user.
+   *
+   * @param effective
+   *          user, UGI for real user.
+   * @return
+   */
+  public static UserGroupInformation createProxyUser(String user,
+      UserGroupInformation realUser) {
+    if (user == null || "".equals(user)) {
+      throw new IllegalArgumentException("Null user");
+    }
+    if (realUser == null) {
+      throw new IllegalArgumentException("Null real user");
+    }
+    Subject subject = new Subject();
+    subject.getPrincipals().add(new User(user));
+    subject.getPrincipals().add(new RealUser(realUser));
+    return new UserGroupInformation(subject);
+  }
+
+  public UserGroupInformation getRealUser() {
+    for (RealUser p: subject.getPrincipals(RealUser.class)) {
+      return p.getRealUser();
+    }
+    return null;
+  }
+
+
+
+  /**
+   * Create a proxy user UGI for testing HDFS and MapReduce
+   * 
+   * @param user
+   *          the full user principal name for effective user
+   * @param realUser
+   *          UGI of the real user
+   * @param userGroups
+   *          the names of the groups that the user belongs to
+   * @return a fake user for running unit tests
+   */
+  @InterfaceAudience.LimitedPrivate( { HDFS, MAPREDUCE })
+  public static UserGroupInformation createProxyUserForTesting(String user,
+      UserGroupInformation realUser, String[] userGroups) {
+    ensureInitialized();
+    UserGroupInformation ugi = createProxyUser(user, realUser);
+    // make sure that the testing object is setup
+    if (!(groups instanceof TestingGroups)) {
+      groups = new TestingGroups();
+    }
+    // add the user groups
+    ((TestingGroups) groups).setUserGroups(ugi.getShortUserName(), userGroups);
+    return ugi;
+  }
+  
-    return getUserName();
+    if (getRealUser() != null) {
+      return getUserName() + " via " +  getRealUser().toString();
+    } else {
+      return getUserName();
+    }
+

INS83 INS42 INS55 INS31 INS31 INS31 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS29 INS79 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS8 INS42 INS83 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS60 INS21 INS21 INS41 INS42 INS70 INS41 INS65 INS65 INS65 INS65 INS65 INS40 INS4 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS21 INS60 INS25 INS21 INS41 INS25 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS25 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS32 INS14 INS44 INS32 INS8 INS33 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS43 INS59 INS38 INS8 INS32 INS42 INS27 INS8 MOV8 INS42 INS7 INS32 INS42 INS42 INS27 INS8 INS25 INS32 INS32 INS27 INS32 INS53 INS42 INS33 INS53 INS42 INS42 INS14 INS32 INS42 INS14 INS32 INS42 INS14 INS43 INS42 INS43 INS42 INS42 INS42 INS57 INS41 INS42 INS42 INS42 INS42 INS32 INS36 INS21 INS36 INS42 INS32 INS42 INS32 INS33 INS41 INS22 INS42 INS42 INS42 INS52 INS42 INS41 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS45 INS42 INS42 INS14 INS14 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS62 INS7 INS11 INS42 INS42 INS42 INS27 INS52 INS42 INS9 INS27 INS27 INS41 INS41 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS14 INS43 INS42 INS32 INS45 INS32 INS42 INS33 INS32 INS32 INS9 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS36 INS42 INS11 INS43 INS42 INS42 DEL83 DEL42