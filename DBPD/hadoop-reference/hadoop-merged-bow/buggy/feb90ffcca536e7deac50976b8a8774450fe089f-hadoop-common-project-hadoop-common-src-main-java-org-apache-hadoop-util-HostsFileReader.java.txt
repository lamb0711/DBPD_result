YARN-4002. Make ResourceTrackerService#nodeHeartbeat more concurrent. Contributed by Rohith Sharma K S & Zhiguo Hong

+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
+  private WriteLock writeLock;
+  private ReadLock readLock;
+    ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
+    this.writeLock = rwLock.writeLock();
+    this.readLock = rwLock.readLock();
+    ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
+    this.writeLock = rwLock.writeLock();
+    this.readLock = rwLock.readLock();
-  public synchronized void refresh() throws IOException {
-    LOG.info("Refreshing hosts (include/exclude) list");
-    Set<String> newIncludes = new HashSet<String>();
-    Set<String> newExcludes = new HashSet<String>();
-    boolean switchIncludes = false;
-    boolean switchExcludes = false;
-    if (!includesFile.isEmpty()) {
-      readFileToSet("included", includesFile, newIncludes);
-      switchIncludes = true;
+  public void refresh() throws IOException {
+    this.writeLock.lock();
+    try {
+      refresh(includesFile, excludesFile);
+    } finally {
+      this.writeLock.unlock();
-    if (!excludesFile.isEmpty()) {
-      readFileToSet("excluded", excludesFile, newExcludes);
-      switchExcludes = true;
-    }
+  }
-    if (switchIncludes) {
-      // switch the new hosts that are to be included
-      includes = newIncludes;
-    }
-    if (switchExcludes) {
-      // switch the excluded hosts
-      excludes = newExcludes;
+  public void refresh(String includeFiles, String excludeFiles)
+      throws IOException {
+    LOG.info("Refreshing hosts (include/exclude) list");
+    this.writeLock.lock();
+    try {
+      // update instance variables
+      updateFileNames(includeFiles, excludeFiles);
+      Set<String> newIncludes = new HashSet<String>();
+      Set<String> newExcludes = new HashSet<String>();
+      boolean switchIncludes = false;
+      boolean switchExcludes = false;
+      if (includeFiles != null && !includeFiles.isEmpty()) {
+        readFileToSet("included", includeFiles, newIncludes);
+        switchIncludes = true;
+      }
+      if (excludeFiles != null && !excludeFiles.isEmpty()) {
+        readFileToSet("excluded", excludeFiles, newExcludes);
+        switchExcludes = true;
+      }
+
+      if (switchIncludes) {
+        // switch the new hosts that are to be included
+        includes = newIncludes;
+      }
+      if (switchExcludes) {
+        // switch the excluded hosts
+        excludes = newExcludes;
+      }
+    } finally {
+      this.writeLock.unlock();
-  public synchronized void refresh(InputStream inFileInputStream,
+  public void refresh(InputStream inFileInputStream,
-    Set<String> newIncludes = new HashSet<String>();
-    Set<String> newExcludes = new HashSet<String>();
-    boolean switchIncludes = false;
-    boolean switchExcludes = false;
-    if (inFileInputStream != null) {
-      readFileToSetWithFileInputStream("included", includesFile,
-          inFileInputStream, newIncludes);
-      switchIncludes = true;
-    }
-    if (exFileInputStream != null) {
-      readFileToSetWithFileInputStream("excluded", excludesFile,
-          exFileInputStream, newExcludes);
-      switchExcludes = true;
-    }
-    if (switchIncludes) {
-      // switch the new hosts that are to be included
-      includes = newIncludes;
-    }
-    if (switchExcludes) {
-      // switch the excluded hosts
-      excludes = newExcludes;
+    this.writeLock.lock();
+    try {
+      Set<String> newIncludes = new HashSet<String>();
+      Set<String> newExcludes = new HashSet<String>();
+      boolean switchIncludes = false;
+      boolean switchExcludes = false;
+      if (inFileInputStream != null) {
+        readFileToSetWithFileInputStream("included", includesFile,
+            inFileInputStream, newIncludes);
+        switchIncludes = true;
+      }
+      if (exFileInputStream != null) {
+        readFileToSetWithFileInputStream("excluded", excludesFile,
+            exFileInputStream, newExcludes);
+        switchExcludes = true;
+      }
+      if (switchIncludes) {
+        // switch the new hosts that are to be included
+        includes = newIncludes;
+      }
+      if (switchExcludes) {
+        // switch the excluded hosts
+        excludes = newExcludes;
+      }
+    } finally {
+      this.writeLock.unlock();
-  public synchronized Set<String> getHosts() {
-    return includes;
+  public Set<String> getHosts() {
+    this.readLock.lock();
+    try {
+      return includes;
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized Set<String> getExcludedHosts() {
-    return excludes;
+  public Set<String> getExcludedHosts() {
+    this.readLock.lock();
+    try {
+      return excludes;
+    } finally {
+      this.readLock.unlock();
+    }
-  public synchronized void setIncludesFile(String includesFile) {
+  public void getHostDetails(Set<String> includes, Set<String> excludes) {
+    this.readLock.lock();
+    try {
+      includes.addAll(this.includes);
+      excludes.addAll(this.excludes);
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  public void setIncludesFile(String includesFile) {
-  public synchronized void setExcludesFile(String excludesFile) {
+  public void setExcludesFile(String excludesFile) {
-  public synchronized void updateFileNames(String includesFile,
-      String excludesFile) {
-    setIncludesFile(includesFile);
-    setExcludesFile(excludesFile);
+  public void updateFileNames(String includeFiles, String excludeFiles) {
+    this.writeLock.lock();
+    try {
+      setIncludesFile(includeFiles);
+      setExcludesFile(excludeFiles);
+    } finally {
+      this.writeLock.unlock();
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 MOV83 INS39 INS42 INS43 INS8 INS44 INS44 INS8 INS8 UPD83 MOV83 MOV74 MOV42 INS8 INS8 MOV83 INS39 INS42 INS44 INS44 INS8 UPD83 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS60 INS21 INS21 INS42 INS21 INS54 INS43 INS42 INS43 INS42 MOV21 INS21 INS54 MOV21 INS21 INS54 INS21 INS54 INS21 INS54 INS74 INS42 INS74 INS42 INS21 INS54 UPD42 UPD42 INS21 INS54 INS43 INS59 INS7 INS7 INS43 INS59 INS7 INS7 INS32 INS8 INS8 INS42 INS42 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS32 MOV8 INS8 INS43 INS43 INS43 INS43 INS32 INS8 INS8 INS32 INS8 INS8 INS42 INS42 INS14 INS22 INS32 INS22 INS32 INS42 INS42 INS14 INS22 INS32 INS22 INS32 INS22 INS42 INS21 INS21 INS22 INS42 INS21 INS21 INS22 INS42 INS21 INS22 INS42 INS21 INS22 INS42 INS21 INS42 INS42 INS42 INS42 INS22 INS42 INS21 INS21 INS21 INS22 INS42 MOV21 MOV21 INS21 INS43 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS32 INS32 INS52 INS42 INS32 INS27 INS27 INS32 INS52 INS42 INS32 INS52 INS42 INS32 INS52 INS42 INS32 INS52 INS42 INS32 INS32 INS32 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS27 INS38 INS27 INS38 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS22 INS42 UPD42 UPD42 INS22 INS42 INS52 INS42 INS42 INS33 MOV32 INS42 INS33 MOV32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 DEL83 DEL38 DEL38 DEL83 DEL31 DEL83 DEL83 DEL83 DEL8 DEL31