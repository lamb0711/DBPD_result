HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.regex.Pattern;
+ * PathData ensures that the returned path string will be the same as the
+ * one passed in during initialization (unlike Path objects which can
+ * modify the path string).
+  /* True if the URI scheme was not present in the pathString but inferred.
+   */
+  private boolean inferredSchemeFromPath = false;
+
+  /**
+   *  Pre-compiled regular expressions to detect path formats.
+   */
+  private static final Pattern potentialUri =
+      Pattern.compile("^[a-zA-Z][a-zA-Z0-9+-.]+:");
+  private static final Pattern windowsNonUriAbsolutePath1 =
+      Pattern.compile("^/?[a-zA-Z]:\\\\");
+  private static final Pattern windowsNonUriAbsolutePath2 =
+      Pattern.compile("^/?[a-zA-Z]:/");
+
-   * @param localPath a local File
+   * @param localPath a local URI
-  public PathData(File localPath, Configuration conf) throws IOException {
-    this(FileSystem.getLocal(conf), localPath.toString());
+  public PathData(URI localPath, Configuration conf) throws IOException {
+    this(FileSystem.getLocal(conf), localPath.getPath());
+   * Validates the given Windows path.
+   * Throws IOException on failure.
+   * @param pathString a String of the path suppliued by the user.
+   */
+  private void ValidateWindowsPath(String pathString)
+  throws IOException
+  {
+    if (windowsNonUriAbsolutePath1.matcher(pathString).find()) {
+      // Forward slashes disallowed in a backslash-separated path.
+      if (pathString.indexOf('/') != -1) {
+        throw new IOException("Invalid path string " + pathString);
+      }
+
+      inferredSchemeFromPath = true;
+      return;
+    }
+
+    // Is it a forward slash-separated absolute path?
+    if (windowsNonUriAbsolutePath2.matcher(pathString).find()) {
+      inferredSchemeFromPath = true;
+      return;
+    }
+
+    // Does it look like a URI? If so then just leave it alone.
+    if (potentialUri.matcher(pathString).find()) {
+      return;
+    }
+
+    // Looks like a relative path on Windows.
+    return;
+  }
+
+  /**
+
+    if (Path.WINDOWS) {
+      ValidateWindowsPath(pathString);
+    }
-   * @param child a path contained within this directory
+   * @param childPath a path contained within this directory
-    if (scheme == null) {
+    // Drop the scheme if it was inferred to ensure fidelity between
+    // the input and output path strings.
+    if ((scheme == null) || (inferredSchemeFromPath)) {
+      if (Path.isWindowsAbsolutePath(decodedRemainder, true)) {
+        // Strip the leading '/' added in stringToUri so users see a valid
+        // Windows path.
+        decodedRemainder = decodedRemainder.substring(1);
+      }
+  /** Normalize the given Windows path string. This does the following:
+   *    1. Adds "file:" scheme for absolute paths.
+   *    2. Ensures the scheme-specific part starts with '/' per RFC2396.
+   *    3. Replaces backslash path separators with forward slashes.
+   *    @param pathString Path string supplied by the user.
+   *    @return normalized absolute path string. Returns the input string
+   *            if it is not a Windows absolute path.
+   */
+  private static String normalizeWindowsPath(String pathString)
+  throws IOException
+  {
+    if (!Path.WINDOWS) {
+      return pathString;
+    }
+
+    boolean slashed =
+        ((pathString.length() >= 1) && (pathString.charAt(0) == '/'));
+
+    // Is it a backslash-separated absolute path?
+    if (windowsNonUriAbsolutePath1.matcher(pathString).find()) {
+      // Forward slashes disallowed in a backslash-separated path.
+      if (pathString.indexOf('/') != -1) {
+        throw new IOException("Invalid path string " + pathString);
+      }
+
+      pathString = pathString.replace('\\', '/');
+      return "file:" + (slashed ? "" : "/") + pathString;
+    }
+
+    // Is it a forward slash-separated absolute path?
+    if (windowsNonUriAbsolutePath2.matcher(pathString).find()) {
+      return "file:" + (slashed ? "" : "/") + pathString;
+    }
+
+    // Is it a backslash-separated relative file path (no scheme and
+    // no drive-letter specifier)?
+    if ((pathString.indexOf(':') == -1) && (pathString.indexOf('\\') != -1)) {
+      pathString = pathString.replace('\\', '/');
+    }
+
+    return pathString;
+  }
+
-   *  that have non-standard sematics. e.g. /, ?, #. A custom parsing
-   *  is needed to prevent misbihaviors.
+   *  that have non-standard semantics. e.g. /, ?, #. A custom parsing
+   *  is needed to prevent misbehavior.
-  private static URI stringToUri(String pathString) {
+  private static URI stringToUri(String pathString) throws IOException {
-
+    pathString = normalizeWindowsPath(pathString);
+
-
-    // uri path is the rest of the string. ? or # are not interpreated,
+    // uri path is the rest of the string. ? or # are not interpreted,

INS26 INS40 INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS66 INS66 INS66 INS42 INS9 INS65 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD43 INS65 INS65 INS43 INS42 INS42 INS25 INS25 INS25 INS41 INS25 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS60 INS25 INS25 INS25 INS41 INS42 INS21 INS66 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 UPD66 UPD42 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS32 INS8 INS32 INS8 INS40 INS8 UPD42 INS27 INS8 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS38 INS8 INS39 INS59 INS32 INS8 INS32 INS8 INS27 INS8 INS42 UPD66 UPD66 INS7 UPD42 INS32 INS42 INS25 INS21 INS41 INS32 INS42 INS21 INS41 INS32 INS42 INS41 INS21 INS36 INS36 INS25 MOV41 INS40 INS41 INS42 INS36 INS32 INS42 INS25 INS21 INS41 INS32 INS42 INS41 INS36 INS36 INS21 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS7 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS32 MOV27 INS42 INS32 MOV8 INS42 INS27 INS42 INS42 INS42 INS27 INS8 INS7 INS27 INS42 INS42 INS42 INS27 INS27 INS27 INS7 INS42 INS42 INS32 INS38 INS53 INS42 INS9 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS9 INS21 INS36 INS36 INS32 INS38 INS53 INS42 INS32 INS45 INS36 INS42 INS45 INS36 INS42 INS32 INS38 INS32 INS38 INS42 INS32 INS42 INS42 INS13 INS34 INS14 INS7 INS27 INS27 INS42 INS42 INS13 INS34 INS14 INS42 INS42 INS13 INS13 INS16 INS16 INS42 INS42 INS13 INS34 INS42 INS42 INS13 INS34 INS42 INS42 INS13 INS13 INS43 INS27 INS42 INS32 INS32 INS34 INS32 INS13 INS43 INS27 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS42 INS45 INS42