HDFS-10823. Implement HttpFSFileSystem#listStatusIterator.

+import org.apache.hadoop.fs.FilterFileSystem;
+import java.io.FileNotFoundException;
+  /**
+   * Serializes a DirectoryEntries object into the JSON for a
+   * WebHDFS {@link org.apache.hadoop.hdfs.protocol.DirectoryListing}.
+   * <p>
+   * These two classes are slightly different, due to the impedance
+   * mismatches between the WebHDFS and FileSystem APIs.
+   * @param entries
+   * @return json
+   */
+  private static Map<String, Object> toJson(FileSystem.DirectoryEntries
+      entries) {
+    Map<String, Object> json = new LinkedHashMap<>();
+    Map<String, Object> inner = new LinkedHashMap<>();
+    Map<String, Object> fileStatuses = toJson(entries.getEntries());
+    inner.put(HttpFSFileSystem.PARTIAL_LISTING_JSON, fileStatuses);
+    inner.put(HttpFSFileSystem.REMAINING_ENTRIES_JSON, entries.hasMore() ? 1
+        : 0);
+    json.put(HttpFSFileSystem.DIRECTORY_LISTING_JSON, inner);
+    return json;
+  }
+
+   * Executor that performs a batched directory listing.
+   */
+  @InterfaceAudience.Private
+  public static class FSListStatusBatch implements FileSystemAccess
+      .FileSystemExecutor<Map> {
+    private final Path path;
+    private final byte[] token;
+
+    public FSListStatusBatch(String path, byte[] token) throws IOException {
+      this.path = new Path(path);
+      this.token = token.clone();
+    }
+
+    /**
+     * Simple wrapper filesystem that exposes the protected batched
+     * listStatus API so we can use it.
+     */
+    private static class WrappedFileSystem extends FilterFileSystem {
+      public WrappedFileSystem(FileSystem f) {
+        super(f);
+      }
+
+      @Override
+      public DirectoryEntries listStatusBatch(Path f, byte[] token) throws
+          FileNotFoundException, IOException {
+        return super.listStatusBatch(f, token);
+      }
+    }
+
+    @Override
+    public Map execute(FileSystem fs) throws IOException {
+      WrappedFileSystem wrappedFS = new WrappedFileSystem(fs);
+      FileSystem.DirectoryEntries entries =
+          wrappedFS.listStatusBatch(path, token);
+      return toJson(entries);
+    }
+  }
+
+  /**

INS26 INS26 INS40 INS40 INS31 INS55 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS29 INS78 INS83 INS83 INS42 INS74 INS23 INS23 INS31 INS55 INS31 INS65 INS65 INS65 INS43 INS43 INS43 INS43 INS42 INS60 INS60 INS60 INS21 INS21 INS21 INS41 INS65 INS40 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS83 INS5 INS59 INS83 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS83 INS42 INS43 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS40 INS74 INS59 INS74 INS59 INS74 INS59 INS32 INS32 INS32 INS42 INS66 INS40 INS42 INS42 INS42 INS39 INS85 INS42 INS43 INS42 INS5 INS42 INS42 INS21 INS21 INS65 INS42 INS83 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS43 INS42 INS42 INS60 INS60 INS41 INS40 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS16 INS42 INS42 INS40 INS42 INS42 INS39 INS85 INS7 INS7 INS66 INS66 INS43 INS42 INS46 INS42 INS42 INS43 INS42 INS5 INS42 INS42 INS42 INS41 INS42 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS32 INS32 INS34 INS34 INS22 INS14 INS22 INS32 INS42 INS42 INS42 INS39 INS85 INS48 INS42 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42