HADOOP-6184. Provide an API to dump Configuration in a JSON format. Contributed by V.V.Chaitanya Krishna.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@807149 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Writer;
+import org.codehaus.jackson.JsonFactory;
+import org.codehaus.jackson.JsonGenerator;
-   * Configurtion objects
+   * Configuration objects
+  /**
+   * Flag to indicate if the storage of resource which updates a key needs 
+   * to be stored for each key
+   */
+  private boolean storeResource;
+  
+  /**
+   * Stores the mapping of key to the resource which modifies or loads 
+   * the key most recently
+   */
+  private HashMap<String, String> updatingResource;
+  
+    this.storeResource = false;
+  }
+  
+  /**
+   * A new configuration with the same settings and additional facility for
+   * storage of resource to each key which loads or updates 
+   * the key most recently
+   * @param other the configuration from which to clone settings
+   * @param storeResource flag to indicate if the storage of resource to 
+   * each key is to be stored
+   */
+  private Configuration(Configuration other, boolean storeResource) {
+    this(other);
+    this.storeResource = storeResource;
+    if (storeResource) {
+      updatingResource = new HashMap<String, String>();
+    }
-      if (overlay!= null)
+      if (overlay!= null) {
+        if (storeResource) {
+          for (Map.Entry<Object,Object> item: overlay.entrySet()) {
+            updatingResource.put((String) item.getKey(), "Unknown");
+          }
+        }
+      }
+            if (storeResource) {
+              updatingResource.put(attr, name.toString());
+            }
+   *  Writes out all the parameters and their properties (final and resource) to
+   *  the given {@link Writer}
+   *  The format of the output would be 
+   *  { "properties" : [ {key1,value1,key1.isFinal,key1.resource}, {key2,value2,
+   *  key2.isFinal,key2.resource}... ] } 
+   *  It does not output the parameters of the configuration object which is 
+   *  loaded from an input stream.
+   * @param out the Writer to write to
+   * @throws IOException
+   */
+  public static void dumpConfiguration(Configuration conf, 
+      Writer out) throws IOException {
+    Configuration config = new Configuration(conf,true);
+    config.reloadConfiguration();
+    JsonFactory dumpFactory = new JsonFactory();
+    JsonGenerator dumpGenerator = dumpFactory.createJsonGenerator(out);
+    dumpGenerator.writeStartObject();
+    dumpGenerator.writeFieldName("properties");
+    dumpGenerator.writeStartArray();
+    dumpGenerator.flush();
+    for (Map.Entry<Object,Object> item: config.getProps().entrySet()) {
+      dumpGenerator.writeStartObject();
+      dumpGenerator.writeStringField("key", (String) item.getKey());
+      dumpGenerator.writeStringField("value", 
+          config.get((String) item.getKey()));
+      dumpGenerator.writeBooleanField("isFinal",
+          config.finalParameters.contains(item.getKey()));
+      dumpGenerator.writeStringField("resource",
+          config.updatingResource.get(item.getKey()));
+      dumpGenerator.writeEndObject();
+    }
+    dumpGenerator.writeEndArray();
+    dumpGenerator.writeEndObject();
+    dumpGenerator.flush();
+  }
+  
+  /**

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS29 INS83 INS39 INS59 INS29 INS83 INS74 INS59 INS29 INS83 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS65 INS42 INS65 INS43 INS43 INS43 INS42 INS21 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS17 INS21 INS25 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS60 INS60 INS21 INS21 INS21 INS21 INS70 INS21 INS21 INS21 UPD66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS7 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS7 INS42 INS8 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS44 INS32 INS8 INS32 INS32 INS32 INS22 INS9 INS22 INS42 INS21 INS25 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS7 MOV27 INS8 INS43 INS42 INS9 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS14 MOV21 MOV25 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS11 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS74 INS42 INS8 INS43 INS32 INS42 INS42 INS11 INS40 INS42 INS32 INS40 INS42 INS32 INS43 INS43 INS43 INS70 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS21 INS25 INS43 INS43 INS43 INS32 INS42 INS8 INS40 INS42 INS42 INS42 INS42 INS11 INS45 INS21 INS43 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42