HDFS-1073. Redesign the NameNode's storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.server.common.HdfsConstants.NamenodeRole;
+import org.apache.hadoop.hdfs.server.common.Storage;
+import org.apache.hadoop.hdfs.server.protocol.JournalProtocol;
-import org.apache.hadoop.hdfs.server.common.Storage;
-import org.apache.hadoop.hdfs.server.common.HdfsConstants.NamenodeRole;
-import org.apache.hadoop.hdfs.server.namenode.CheckpointSignature;
-import org.apache.hadoop.hdfs.server.namenode.FSImage.CheckpointStates;
-import org.apache.hadoop.hdfs.DFSConfigKeys;
-import org.apache.hadoop.conf.Configuration;
-public class BackupNode extends NameNode {
+public class BackupNode extends NameNode implements JournalProtocol {
-    BackupImage bnImage = new BackupImage();
+    BackupImage bnImage = new BackupImage(conf);
-    bnImage.recoverCreateRead(FSNamesystem.getNamespaceDirs(conf),
-                              FSNamesystem.getNamespaceEditsDirs(conf));
+    bnImage.recoverCreateRead();
+  
+  @Override
+  public long getProtocolVersion(String protocol, long clientVersion)
+      throws IOException {
+    if (protocol.equals(JournalProtocol.class.getName())) {
+      return JournalProtocol.versionID;
+    } else {
+      return super.getProtocolVersion(protocol, clientVersion);
+    }
+  }
+
-  }
+  }  
-  @Override // NamenodeProtocol
+  /////////////////////////////////////////////////////
+  // BackupNodeProtocol implementation for backup node.
+  /////////////////////////////////////////////////////
+
+  @Override
-                      int jAction,
-                      int length,
-                      byte[] args) throws IOException {
+      long firstTxId, int numTxns,
+      byte[] records) throws IOException {
-    BackupImage bnImage = (BackupImage)getFSImage();
-    switch(jAction) {
-      case (int)JA_IS_ALIVE:
-        return;
-      case (int)JA_JOURNAL:
-        bnImage.journal(length, args);
-        return;
-      case (int)JA_JSPOOL_START:
-        bnImage.startJournalSpool(nnReg);
-        return;
-      case (int)JA_CHECKPOINT_TIME:
-        bnImage.setCheckpointTime(length, args);
-        setRegistration(); // keep registration up to date
-        return;
-      default:
-        throw new IOException("Unexpected journal action: " + jAction);
-    }
+    getBNImage().journal(firstTxId, numTxns, records);
+  }
+
+  @Override
+  public void startLogSegment(NamenodeRegistration registration, long txid)
+      throws IOException {
+    verifyRequest(registration);
+  
+    getBNImage().namenodeStartedLogSegment(txid);
+  }
+
+  //////////////////////////////////////////////////////
+  
+  
+  BackupImage getBNImage() {
+    return (BackupImage)getFSImage();
-    if(namesystem == null || namesystem.dir == null || getFSImage() == null)
-      return true;
-    return fsImage.getEditLog().getNumEditStreams() == 0;
+    
+    // BN always checkpoints on startup in order to get in sync with namespace
+    return true;
-  CheckpointStates getCheckpointState() {
-    return getFSImage().getCheckpointState();
-  }
-
-  void setCheckpointState(CheckpointStates cs) {
-    getFSImage().setCheckpointState(cs);
-  }
-
+    NNStorage storage = bnImage.getStorage();
-    if(bnImage.getStorage().getNamespaceID() == 0) // new backup storage
-      bnImage.getStorage().setStorageInfo(nsInfo);
-    else if(bnImage.getStorage().getNamespaceID() != nsInfo.getNamespaceID())
-      throw new IOException("Incompatible namespaceIDs"
-          + ": active node namespaceID = " + nsInfo.getNamespaceID() 
-          + "; backup node namespaceID = " + bnImage.getStorage().getNamespaceID());
-
+    if (storage.getNamespaceID() == 0) { // new backup storage
+      storage.setStorageInfo(nsInfo);
+      storage.setBlockPoolID(nsInfo.getBlockPoolID());
+      storage.setClusterID(nsInfo.getClusterID());
+    } else {
+      nsInfo.validateStorage(storage);
+    }
-  /**
-   * Reset node namespace state in memory and in storage directories.
-   * @throws IOException
-   */
-  void resetNamespace() throws IOException {
-    ((BackupImage)getFSImage()).reset();
-  }
-
-  /**
-   * Get size of the local journal (edit log).
-   * @return size of the current journal
-   * @throws IOException
-   */
-  long journalSize() throws IOException {
-    return namesystem.getEditLogSize();
-  }
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 INS43 INS31 INS31 INS31 INS42 INS78 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 MOV44 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 INS44 INS44 MOV44 MOV43 INS8 INS78 INS83 MOV39 UPD42 MOV42 MOV44 INS44 MOV43 MOV8 INS43 INS42 MOV8 INS42 INS43 INS42 UPD39 UPD42 INS25 INS39 INS42 INS39 INS42 UPD42 MOV21 MOV25 INS21 INS42 UPD43 UPD42 INS39 INS42 INS21 INS42 INS41 MOV41 INS60 INS42 INS32 INS8 INS8 MOV32 UPD42 INS32 MOV11 INS43 INS59 INS8 INS8 INS42 INS42 INS32 INS41 INS41 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 MOV32 INS21 INS21 INS21 INS21 INS42 INS57 UPD42 MOV42 INS40 INS48 UPD42 MOV42 UPD42 UPD42 MOV42 MOV32 INS32 INS32 INS32 INS43 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL39 DEL42 DEL36 DEL42 DEL32 DEL21 DEL66 DEL65 DEL66 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL39 DEL42 DEL11 DEL49 DEL41 DEL39 DEL42 DEL11 DEL49 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL39 DEL42 DEL11 DEL49 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL39 DEL42 DEL11 DEL49 DEL21 DEL42 DEL32 DEL21 DEL41 DEL49 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL27 DEL42 DEL32 DEL33 DEL27 DEL27 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL41 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL31 DEL42 DEL32 DEL21 DEL42 DEL32 DEL32 DEL32 DEL27 DEL42 DEL43 DEL45 DEL45 DEL27 DEL32 DEL45 DEL32 DEL32 DEL27 DEL14 DEL53 DEL25 DEL66 DEL65 DEL42 DEL65 DEL29 DEL39 DEL42 DEL31