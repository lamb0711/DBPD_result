HDFS-7701. Support reporting per storage type quota and usage with hadoop/hdfs shell. (Contributed by Peter Shi)

+import java.util.ArrayList;
+import java.util.List;
+import org.apache.hadoop.fs.StorageType;
+  private static final String OPTION_TYPE = "t";
-          + "] <path> ...";
+          + "] [-" + OPTION_TYPE + " [<storage type>]] <path> ...";
-          "The -" + OPTION_HEADER + " option displays a header line.";
+          "The -" + OPTION_HEADER + " option displays a header line.\n" +
+          "The -" + OPTION_TYPE + " option displays quota by storage types.\n" +
+          "It must be used with -" + OPTION_QUOTA + " option.\n" +
+          "If a comma-separated list of storage types is given after the -" +
+          OPTION_TYPE + " option, \n" +
+          "it displays the quota and usage for the specified types. \n" +
+          "Otherwise, it displays the quota and usage for all the storage \n" +
+          "types that support quota";
+  private boolean showQuotabyType;
+  private List<StorageType> storageTypes = null;
+    cf.addOptionWithValue(OPTION_TYPE);
-    if (cf.getOpt(OPTION_HEADER)) {
-      out.println(ContentSummary.getHeader(showQuotas) + "PATHNAME");
+
+    if (showQuotas) {
+      String types = cf.getOptValue(OPTION_TYPE);
+
+      if (null != types) {
+        showQuotabyType = true;
+        storageTypes = getAndCheckStorageTypes(types);
+      } else {
+        showQuotabyType = false;
+      }
+
+    if (cf.getOpt(OPTION_HEADER)) {
+      if (showQuotabyType) {
+        out.println(ContentSummary.getStorageTypeHeader(storageTypes) + "PATHNAME");
+      } else {
+        out.println(ContentSummary.getHeader(showQuotas) + "PATHNAME");
+      }
+    }
+  }
+
+  private List<StorageType> getAndCheckStorageTypes(String types) {
+    if ("".equals(types) || "all".equalsIgnoreCase(types)) {
+      return StorageType.getTypesSupportingQuota();
+    }
+
+    String[] typeArray = StringUtils.split(types, ',');
+    List<StorageType> stTypes = new ArrayList<>();
+
+    for (String t : typeArray) {
+      stTypes.add(StorageType.parseStorageType(t));
+    }
+
+    return stTypes;
-    out.println(summary.toString(showQuotas, isHumanReadable()) + src);
+    out.println(summary.toString(showQuotas, isHumanReadable(),
+        showQuotabyType, storageTypes) + src);
+
+  /**
+   * should print quota by storage types
+   * @return true if enables quota by storage types
+   */
+  @InterfaceAudience.Private
+  boolean isShowQuotabyType() {
+    return showQuotabyType;
+  }
+
+  /**
+   * show specified storage types
+   * @return specified storagetypes
+   */
+  @InterfaceAudience.Private
+  List<StorageType> getStorageTypes() {
+    return storageTypes;
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 MOV43 INS59 INS43 INS83 INS39 INS59 INS83 INS74 INS59 INS83 INS74 INS42 INS44 INS8 INS29 INS78 INS39 INS42 INS8 INS29 INS78 INS74 INS42 INS8 INS42 INS45 INS42 INS42 INS43 INS43 INS42 INS33 INS21 INS25 INS43 INS43 INS43 INS42 INS25 INS60 INS60 INS70 INS41 INS65 INS65 INS40 INS41 INS65 INS65 INS40 INS43 INS43 INS41 INS45 INS42 UPD45 UPD45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS45 INS45 INS42 INS42 INS32 INS42 INS8 INS8 INS42 INS42 INS42 INS27 INS8 INS5 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS25 INS32 INS32 INS41 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS43 INS59 INS27 INS8 INS8 INS42 INS8 MOV8 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS21 INS21 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS32 INS42 INS9 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS42 INS42 INS42