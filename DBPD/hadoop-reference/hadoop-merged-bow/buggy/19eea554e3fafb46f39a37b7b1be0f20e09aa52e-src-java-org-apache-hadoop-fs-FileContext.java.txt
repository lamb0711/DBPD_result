HADOOP-6870. Add a new API getFiles to FileSystem and FileContext. Contributed by Hairong Kuang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980271 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.NoSuchElementException;
+import java.util.Stack;
-import java.util.regex.Pattern;
+   * List the statuses and block locations of the files in the given path 
+   * if the path is a directory.
+   * If the given path is a file, return the file's status and block locations.
+   * if recursive is true, list all file statuses and block locations in
+   * the subtree rooted at the given path.
+   * Files across symbolic links are also returned.
+   * 
+   * @param f is the path
+   * @param recursive if the subdirectories need to be traversed recursively
+   *
+   * @return an iterator that traverses statuses of the files
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
+   */
+  public Iterator<LocatedFileStatus> listFiles(
+      final Path f, final boolean recursive) throws AccessControlException,
+      FileNotFoundException, UnsupportedFileSystemException, 
+      IOException {
+    return new Iterator<LocatedFileStatus>() {
+      private Stack<Path> dirs = new Stack<Path>();
+      private Stack<Path> symLinks = new Stack<Path>();
+      Iterator<LocatedFileStatus> itor = listLocatedStatus(f);
+      LocatedFileStatus curFile;
+
+      @Override
+      public boolean hasNext() {
+        try {
+          while (curFile == null) {
+            if (itor.hasNext()) {
+              handleFileStat(itor.next());
+            } else if (!dirs.isEmpty()) {
+              Path dirPath = dirs.pop(); 
+              itor = listLocatedStatus(dirPath);
+            } else if (!symLinks.isEmpty()) {
+              Path symLink = symLinks.pop();
+              FileStatus stat = getFileStatus(symLink);
+              if (stat.isFile() || (recursive && stat.isDirectory())) {
+                itor = listLocatedStatus(stat.getPath());
+              }
+            } else {
+              return false;
+            }
+          }
+          return true;
+        } catch (IOException ioe) {
+          throw (RuntimeException)new RuntimeException().initCause(ioe);
+        }
+      }
+
+      private void handleFileStat(LocatedFileStatus stat) throws IOException {
+        if (stat.isFile()) { // file
+          curFile = stat;
+        } else if (stat.isSymlink()) { // symbolic link
+          symLinks.push(stat.getSymlink());
+        } else if (recursive) { // directory
+          dirs.push(stat.getPath());
+        }
+      }
+
+      @Override
+      public LocatedFileStatus next() {
+        if (hasNext()) {
+          LocatedFileStatus result = curFile;
+          curFile = null;
+          return result;
+        } 
+        throw new java.util.NoSuchElementException("No more entry in " + f);
+      }
+
+      @Override
+      public void remove() {
+        throw new UnsupportedOperationException("Remove is not supported");
+
+      }
+    };
+  }
+  
+  /**
+   * List the statuses of the files/directories in the given path if the path is
+   * a directory. Each returned status contains a file's block locations.
+   * 
+   * @param f is the path
+   *
+   * @return an iterator that traverses statuses of the files/directories 
+   *         in the given path
+   *
+   * @throws AccessControlException If access is denied
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+   *           not supported
+   * @throws IOException If an I/O error occurred
+   * 
+   * Exceptions applicable to file systems accessed over RPC:
+   * @throws RpcClientException If an exception occurred in the RPC client
+   * @throws RpcServerException If an exception occurred in the RPC server
+   * @throws UnexpectedServerException If server implementation throws 
+   *           undeclared exception to RPC server
+   */
+  public Iterator<LocatedFileStatus> listLocatedStatus(final Path f) throws
+      AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, IOException {
+    final Path absF = fixRelativePart(f);
+    return new FSLinkResolver<Iterator<LocatedFileStatus>>() {
+      public Iterator<LocatedFileStatus> next(
+          final AbstractFileSystem fs, final Path p) 
+        throws IOException, UnresolvedLinkException {
+        return fs.listLocatedStatus(p);
+      }
+    }.resolve(this, absF);
+  }
+
+  /**

MOV26 INS26 INS26 INS40 INS40 UPD40 INS31 INS31 INS29 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS43 INS43 INS43 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS42 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS42 INS42 INS42 INS42 INS60 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS14 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS83 INS43 INS59 INS32 INS74 INS1 INS42 INS42 INS32 INS14 INS42 INS52 INS42 INS43 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS42 INS42 INS74 INS1 INS42 INS42 INS83 INS74 INS59 INS83 INS74 INS59 INS74 INS59 INS43 INS59 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS74 INS31 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS54 INS43 INS42 INS42 INS25 INS42 INS42 INS25 INS53 INS42 INS53 INS42 INS43 INS43 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS32 INS8 INS25 INS32 INS8 INS14 INS14 INS42 INS42 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS43 INS43 INS43 INS43 INS61 INS41 INS44 INS8 INS42 INS42 INS21 INS32 INS8 INS25 INS42 INS60 INS21 INS41 INS43 INS27 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS8 INS9 INS43 INS42 INS53 INS7 INS42 INS42 INS21 INS42 INS8 INS43 INS59 INS7 INS42 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS25 INS42 INS11 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS33 INS32 INS8 INS25 INS43 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS21 INS38 INS8 INS25 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS60 INS21 INS38 INS8 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS7 INS32 INS60 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS36 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42