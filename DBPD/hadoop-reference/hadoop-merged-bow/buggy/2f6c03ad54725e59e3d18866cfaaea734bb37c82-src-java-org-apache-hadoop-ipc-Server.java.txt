HADOOP-7146. RPC server leaks file descriptors. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1127811 13f79535-47bb-0310-9956-ffa450edef68

-        Selector readSelector = Selector.open();
-        Reader reader = new Reader("Socket Reader #" + (i + 1) + " for port " + port,
-                                   readSelector);
+        Reader reader = new Reader(
+            "Socket Reader #" + (i + 1) + " for port " + port);
-      private Selector readSelector = null;
+      private final Selector readSelector;
-      Reader(String name, Selector readSelector) {
+      Reader(String name) throws IOException {
-        this.readSelector = readSelector;
+
+        this.readSelector = Selector.open();
+      
-        synchronized (this) {
-          while (running) {
-            SelectionKey key = null;
-            try {
-              readSelector.select();
-              while (adding) {
-                this.wait(1000);
-              }              
+        try {
+          doRunLoop();
+        } finally {
+          try {
+            readSelector.close();
+          } catch (IOException ioe) {
+            LOG.error("Error closing read selector in " + this.getName(), ioe);
+          }
+        }
+      }
-              Iterator<SelectionKey> iter = readSelector.selectedKeys().iterator();
-              while (iter.hasNext()) {
-                key = iter.next();
-                iter.remove();
-                if (key.isValid()) {
-                  if (key.isReadable()) {
-                    doRead(key);
-                  }
+      private synchronized void doRunLoop() {
+        while (running) {
+          SelectionKey key = null;
+          try {
+            readSelector.select();
+            while (adding) {
+              this.wait(1000);
+            }              
+
+            Iterator<SelectionKey> iter = readSelector.selectedKeys().iterator();
+            while (iter.hasNext()) {
+              key = iter.next();
+              iter.remove();
+              if (key.isValid()) {
+                if (key.isReadable()) {
+                  doRead(key);
-                key = null;
-            } catch (InterruptedException e) {
-              if (running) {                      // unexpected -- log it
-                LOG.info(getName() + " caught: " +
-                         StringUtils.stringifyException(e));
-              }
-            } catch (IOException ex) {
-              LOG.error("Error in Reader", ex);
+              key = null;
+          } catch (InterruptedException e) {
+            if (running) {                      // unexpected -- log it
+              LOG.info(getName() + " unexpectedly interrupted", e);
+            }
+          } catch (IOException ex) {
+            LOG.error("Error in Reader", ex);
-    private Selector writeSelector;
+    private final Selector writeSelector;
+      try {
+        doRunLoop();
+      } finally {
+        LOG.info("Stopping " + this.getName());
+        try {
+          writeSelector.close();
+        } catch (IOException ioe) {
+          LOG.error("Couldn't close write selector in " + this.getName(), ioe);
+        }
+      }
+    }
+    
+    private void doRunLoop() {
-          LOG.warn("Exception in Responder " + 
-                   StringUtils.stringifyException(e));
+          LOG.warn("Exception in Responder", e);
-      LOG.info("Stopping " + this.getName());
-            LOG.info(getName() + " caught: " +
-                     StringUtils.stringifyException(e));
+            LOG.info(getName() + " unexpectedly interrupted", e);
-          LOG.info(getName() + " caught: " +
-                   StringUtils.stringifyException(e));
+          LOG.info(getName() + " caught an exception", e);

INS31 INS31 INS83 MOV78 INS83 INS39 INS42 INS8 UPD83 UPD42 INS83 INS43 INS83 INS39 INS42 INS8 UPD83 INS83 UPD42 MOV8 MOV21 MOV21 INS54 UPD42 MOV42 MOV21 INS54 INS8 INS8 INS8 INS8 INS21 MOV21 INS54 MOV32 INS21 INS54 INS32 INS8 INS12 INS32 INS8 INS12 INS42 INS21 INS44 INS8 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS21 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS45 MOV42 INS27 MOV42 INS42 INS42 INS27 INS42 INS45 INS32 MOV32 UPD45 MOV45 INS45 INS32 INS52 INS42 INS27 MOV42 INS52 INS42 INS27 MOV42 MOV32 UPD45 MOV45 MOV32 UPD45 MOV45 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL27 DEL52 DEL51 DEL8 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL27