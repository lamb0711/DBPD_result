HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.InetAddress;
-import java.net.Socket;
-import java.net.InetSocketAddress;
-import java.net.SocketTimeoutException;
-import java.net.UnknownHostException;
-import java.io.IOException;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InterruptedIOException;
-
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Socket;
+import java.net.SocketTimeoutException;
+import java.net.UnknownHostException;
+import java.util.Map.Entry;
-import java.util.Map.Entry;
+import java.util.concurrent.TimeUnit;
-import org.apache.commons.logging.*;
-
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.io.DataOutputBuffer;
+import org.apache.hadoop.io.IOUtils;
+import org.apache.hadoop.io.Writable;
+import org.apache.hadoop.io.WritableUtils;
+import org.apache.hadoop.io.retry.RetryPolicies;
+import org.apache.hadoop.io.retry.RetryPolicy;
+import org.apache.hadoop.io.retry.RetryPolicy.RetryAction;
-import org.apache.hadoop.io.IOUtils;
-import org.apache.hadoop.io.Writable;
-import org.apache.hadoop.io.WritableUtils;
-import org.apache.hadoop.io.DataOutputBuffer;
-import org.apache.hadoop.security.token.TokenSelector;
+import org.apache.hadoop.security.token.TokenSelector;
-  public static final Log LOG =
-    LogFactory.getLog(Client.class);
+  public static final Log LOG = LogFactory.getLog(Client.class);
+
-    private int maxRetries; //the max. no. of retries for socket connections
-    // the max. no. of retries for socket connections on time out exceptions
+    private final RetryPolicy connectionRetryPolicy;
-      this.maxRetries = remoteId.getMaxRetries();
+      this.connectionRetryPolicy = remoteId.connectionRetryPolicy;
-          handleConnectionFailure(ioFailures++, maxRetries, ie);
+          handleConnectionFailure(ioFailures++, ie);
-      LOG.info("Retrying connect to server: " + server + 
-          ". Already tried " + curRetries + " time(s).");
+      LOG.info("Retrying connect to server: " + server + ". Already tried "
+          + curRetries + " time(s); maxRetries=" + maxRetries);
+    }
+
+    private void handleConnectionFailure(int curRetries, IOException ioe
+        ) throws IOException {
+      closeConnection();
+
+      final RetryAction action;
+      try {
+        action = connectionRetryPolicy.shouldRetry(ioe, curRetries, 0, true);
+      } catch(Exception e) {
+        throw e instanceof IOException? (IOException)e: new IOException(e);
+      }
+      if (action.action == RetryAction.RetryDecision.FAIL) {
+        if (action.reason != null) {
+          LOG.warn("Failed to connect to server: " + server + ": "
+              + action.reason, ioe);
+        }
+        throw ioe;
+      }
+
+      try {
+        Thread.sleep(action.delayMillis);
+      } catch (InterruptedException e) {
+        throw (IOException)new InterruptedIOException("Interrupted: action="
+            + action + ", retry policy=" + connectionRetryPolicy).initCause(e);
+      }
+      LOG.info("Retrying connect to server: " + server + ". Already tried "
+          + curRetries + " time(s); retry policy is " + connectionRetryPolicy);
+        if (response == null) {
+          throw new IOException("Response is null.");
+        }
+
-    private final int maxRetries; //the max. no. of retries for socket connections
+    private final RetryPolicy connectionRetryPolicy;
-                 int maxRetries, int maxRetriesOnSocketTimeouts,
+                 RetryPolicy connectionRetryPolicy, int maxRetriesOnSocketTimeouts,
-      this.maxRetries = maxRetries;
+      this.connectionRetryPolicy = connectionRetryPolicy;
-    int getMaxRetries() {
-      return maxRetries;
-    }
-    
+    static ConnectionId getConnectionId(InetSocketAddress addr,
+        Class<?> protocol, UserGroupInformation ticket, int rpcTimeout,
+        Configuration conf) throws IOException {
+      return getConnectionId(addr, protocol, ticket, rpcTimeout, null, conf);
+    }
+
-    public static ConnectionId getConnectionId(InetSocketAddress addr,
+    static ConnectionId getConnectionId(InetSocketAddress addr,
-        Configuration conf) throws IOException {
+        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {
+
+      if (connectionRetryPolicy == null) {
+        final int max = conf.getInt(
+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,
+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);
+        connectionRetryPolicy = RetryPolicies.retryUpToMaximumCountWithFixedSleep(
+            max, 1, TimeUnit.SECONDS);
+      }
+
-          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,
-              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),
+          connectionRetryPolicy,
-            && this.maxRetries == that.maxRetries
+            && isEqual(this.connectionRetryPolicy, that.connectionRetryPolicy)
-      int result = 1;
+      int result = connectionRetryPolicy.hashCode();
-      result = PRIME * result + maxRetries;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 MOV31 INS23 INS31 MOV83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS44 INS42 INS42 INS39 INS42 INS43 INS42 INS42 INS21 INS60 INS54 INS25 INS54 INS21 INS42 UPD42 INS43 INS42 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS43 INS42 INS25 INS42 INS32 INS83 INS43 INS59 INS8 INS12 INS27 INS8 INS8 INS12 INS32 INS42 INS42 INS43 INS76 INS42 INS42 INS32 INS42 INS27 INS8 INS40 INS42 INS42 UPD42 MOV42 INS21 INS44 INS8 INS40 INS40 INS25 INS53 INS21 INS44 INS8 INS42 INS42 INS27 INS25 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS60 INS21 INS42 INS32 UPD42 UPD45 INS42 INS7 INS43 INS42 INS53 INS27 INS8 INS42 INS32 INS43 INS42 INS53 INS45 INS42 INS45 INS42 INS45 INS42 INS27 INS8 UPD42 INS83 INS39 INS59 INS7 INS42 INS42 INS42 INS32 INS42 INS16 INS40 INS33 INS21 INS42 INS42 INS40 INS42 INS11 INS42 INS33 INS53 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS9 INS62 INS11 INS14 INS32 INS43 INS32 INS14 INS42 INS42 INS42 INS34 INS40 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS45 INS42 INS45 INS40 INS43 INS27 INS42 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS22 INS40 MOV52 UPD42 MOV42 DEL39 DEL59 DEL23 DEL42 DEL42 DEL32 DEL42 DEL39 DEL39 DEL42 DEL39 DEL42 DEL42 DEL83 DEL22 DEL40 DEL27 DEL34 DEL42 DEL42 DEL42 DEL27 DEL42 DEL27 DEL7 DEL21