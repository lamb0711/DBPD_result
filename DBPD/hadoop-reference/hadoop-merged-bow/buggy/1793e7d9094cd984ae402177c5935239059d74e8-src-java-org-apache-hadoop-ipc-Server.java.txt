HADOOP-6510. Adds a way for superusers to impersonate other users in a secure environment. Contributed by Jitendra Nath Pandey.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@907549 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.security.authorize.ProxyUsers;
+    
+    private UserGroupInformation getAuthorizedUgi(String authorizedId)
+        throws IOException {
+      if (authMethod == SaslRpcServer.AuthMethod.DIGEST) {
+        TokenIdentifier tokenId = SaslRpcServer.getIdentifier(authorizedId,
+            secretManager);
+        return tokenId.getUser();
+      } else {
+        return UserGroupInformation.createRemoteUser(authorizedId);
+      }
+    }
-          user = UserGroupInformation.createRemoteUser(saslServer
-              .getAuthorizationID());
+          user = getAuthorizedUgi(saslServer.getAuthorizationID());
-      } else if (protocolUser != null && !protocolUser.equals(user)) {
-        throw new AccessControlException("Authenticated user (" + user
-            + ") doesn't match what the client claims to be (" + protocolUser
-            + ")");
+      } else if ((protocolUser != null)
+          && (!protocolUser.getUserName().equals(user.getUserName()))) {
+        if (authMethod == AuthMethod.DIGEST) {
+          // Not allowed to doAs if token authentication is used
+          throw new AccessControlException("Authenticated user (" + user
+              + ") doesn't match what the client claims to be (" + protocolUser
+              + ")");
+        } else {
+          //Effective user can be different from authenticated user
+          //for simple auth or kerberos auth
+          user = UserGroupInformation.createProxyUser(protocolUser
+              .getUserName(), user);
+        }
+        // If auth method is DIGEST, the token was obtained by the
+        // real user for the effective user, therefore not required to
+        // authorize real user. doAs is allowed only for simple or kerberos
+        // authentication
+        if (user != null && user.getRealUser() != null
+            && (authMethod != AuthMethod.DIGEST)) {
+          ProxyUsers.authorize(user, this.getHostAddress(), conf);
+        }

INS26 INS40 INS31 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS43 INS42 INS42 INS25 INS42 INS27 INS8 INS8 INS25 INS42 INS40 INS60 INS41 INS41 INS27 INS8 INS25 INS43 INS59 INS32 INS32 INS36 INS36 MOV25 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV27 INS38 INS27 INS8 INS27 INS36 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS21 INS27 INS27 INS27 INS32 INS32 INS42 INS32 INS7 INS42 INS33 INS32 INS33 INS42 INS40 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS32 MOV42 MOV42 UPD42 MOV42 DEL42 DEL32 DEL38 DEL27