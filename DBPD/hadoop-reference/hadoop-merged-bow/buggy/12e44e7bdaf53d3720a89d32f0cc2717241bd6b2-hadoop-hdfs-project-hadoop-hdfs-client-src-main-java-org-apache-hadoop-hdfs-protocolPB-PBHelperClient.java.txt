HDFS-6984. Serialize FileStatus via protobuf.

+import org.apache.hadoop.hdfs.protocol.proto.AclProtos.FsPermissionProto;
-import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.FsPermissionProto;
-    return new FsPermissionExtension((short)p.getPerm());
+    return new FsPermission((short)p.getPerm());
+    EnumSet<HdfsFileStatus.Flags> flags = status.hasFlags()
+        ? convertFlags(status.getFlags())
+        : convertFlags(status.getPermission());
+        flags,
-    return FsPermissionProto.newBuilder().setPerm(p.toExtendedShort()).build();
+    return FsPermissionProto.newBuilder().setPerm(p.toShort()).build();
-    if (fs == null)
+    if (fs == null) {
+    }
+    EnumSet<HdfsFileStatus.Flags> flags = fs.hasFlags()
+        ? convertFlags(fs.getFlags())
+        : convertFlags(fs.getPermission());
-        convert(fs.getPermission()), fs.getOwner(), fs.getGroup(),
+        convert(fs.getPermission()),
+        flags,
+        fs.getOwner(), fs.getGroup(),
+  private static EnumSet<HdfsFileStatus.Flags> convertFlags(int flags) {
+    EnumSet<HdfsFileStatus.Flags> f =
+        EnumSet.noneOf(HdfsFileStatus.Flags.class);
+    for (HdfsFileStatusProto.Flags pbf : HdfsFileStatusProto.Flags.values()) {
+      if ((pbf.getNumber() & flags) != 0) {
+        switch (pbf) {
+        case HAS_ACL:
+          f.add(HdfsFileStatus.Flags.HAS_ACL);
+          break;
+        case HAS_CRYPT:
+          f.add(HdfsFileStatus.Flags.HAS_CRYPT);
+          break;
+        case HAS_EC:
+          f.add(HdfsFileStatus.Flags.HAS_EC);
+          break;
+        default:
+          // ignore unknown
+          break;
+        }
+      }
+    }
+    return f;
+  }
+
+  private static EnumSet<HdfsFileStatus.Flags> convertFlags(
+      FsPermissionProto pbp) {
+    EnumSet<HdfsFileStatus.Flags> f =
+        EnumSet.noneOf(HdfsFileStatus.Flags.class);
+    FsPermission p = new FsPermissionExtension((short)pbp.getPerm());
+    if (p.getAclBit()) {
+      f.add(HdfsFileStatus.Flags.HAS_ACL);
+    }
+    if (p.getEncryptedBit()) {
+      f.add(HdfsFileStatus.Flags.HAS_CRYPT);
+    }
+    if (p.getErasureCodedBit()) {
+      f.add(HdfsFileStatus.Flags.HAS_EC);
+    }
+    return f;
+  }
+
+    int flags = fs.hasAcl()   ? HdfsFileStatusProto.Flags.HAS_ACL_VALUE   : 0;
+    flags |= fs.isEncrypted() ? HdfsFileStatusProto.Flags.HAS_CRYPT_VALUE : 0;
+    flags |= fs.isErasureCoded() ? HdfsFileStatusProto.Flags.HAS_EC_VALUE : 0;
+    builder.setFlags(flags);

MOV26 UPD40 INS31 INS31 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS60 INS60 INS43 INS43 INS39 INS42 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS60 INS60 INS25 INS25 INS25 INS41 INS60 INS21 INS21 INS21 INS74 INS59 INS8 INS74 INS59 INS42 INS40 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS40 INS42 INS74 INS59 INS43 INS59 INS32 INS8 INS32 INS8 INS32 INS8 INS42 INS39 INS59 INS7 INS7 INS32 INS43 INS43 INS43 INS42 INS16 INS42 INS41 INS43 INS43 INS42 INS16 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS40 INS42 INS25 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS16 INS42 INS16 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS32 MOV33 INS42 INS40 INS32 INS32 INS32 INS42 INS40 INS42 INS42 INS57 INS40 INS27 INS8 INS42 INS40 INS42 INS42 INS57 MOV43 INS11 INS32 INS32 INS32 INS32 INS40 INS34 INS32 INS40 INS34 INS32 INS40 INS34 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS36 INS34 INS50 INS43 INS39 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS10 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 DEL41