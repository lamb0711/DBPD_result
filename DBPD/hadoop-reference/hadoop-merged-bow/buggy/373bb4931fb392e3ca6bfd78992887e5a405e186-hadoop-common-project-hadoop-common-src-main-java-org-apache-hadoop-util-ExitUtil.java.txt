YARN-679. Add an entry point that can start any Yarn service. Contributed by Steve Loughran.

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
- * Facilitates hooking process termination for tests and debugging.
+ * Facilitates hooking process termination for tests, debugging
+ * and embedding.
+ * 
+ * Hadoop code that attempts to call {@link System#exit(int)} 
+ * or {@link Runtime#halt(int)} MUST invoke it via these methods.
-@InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce"})
+@InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce", "YARN"})
-  private final static Log LOG = LogFactory.getLog(ExitUtil.class.getName());
+  private static final Logger
+      LOG = LoggerFactory.getLogger(ExitUtil.class.getName());
-  public static class ExitException extends RuntimeException {
+  private ExitUtil() {
+  }
+
+  /**
+   * An exception raised when a call to {@link #terminate(int)} was
+   * called and system exits were blocked.
+   */
+  public static class ExitException extends RuntimeException
+      implements ExitCodeProvider {
+    /**
+     * The status code.
+     */
+
+    public ExitException(int status,
+        String message,
+        Throwable cause) {
+      super(message, cause);
+      this.status = status;
+    }
+
+    public ExitException(int status, Throwable cause) {
+      super(cause);
+      this.status = status;
+    }
+
+    @Override
+    public int getExitCode() {
+      return status;
+    }
+
+    /**
+     * String value does not include exception type, just exit code and message.
+     * @return the exit code and any message
+     */
+    @Override
+    public String toString() {
+      String message = getMessage();
+      if (message == null) {
+        message = super.toString();
+      }
+      return Integer.toString(status) + ": " + message;
+    }
-  public static class HaltException extends RuntimeException {
+  /**
+   * An exception raised when a call to {@link #terminate(int)} was
+   * called and system halts were blocked.
+   */
+  public static class HaltException extends RuntimeException
+      implements ExitCodeProvider {
+    public HaltException(int status, Throwable cause) {
+      super(cause);
+      this.status = status;
+    }
+
+
+    public HaltException(int status,
+        String message,
+        Throwable cause) {
+      super(message, cause);
+      this.status = status;
+    }
+
+    @Override
+    public int getExitCode() {
+      return status;
+    }
+
+    /**
+     * String value does not include exception type, just exit code and message.
+     * @return the exit code and any message
+     */
+    @Override
+    public String toString() {
+      String message = getMessage();
+      if (message == null) {
+        message = super.toString();
+      }
+      return Integer.toString(status) + ": " + message;
+    }
+
-   * @return true if terminate has been called
+   * @return true if terminate has been called.
-   * @return true if halt has been called
+   * @return true if halt has been called.
-   * @return the first ExitException thrown, null if none thrown yet
+   * @return the first ExitException thrown, null if none thrown yet.
-   * @return the first {@code HaltException} thrown, null if none thrown yet
+   * @return the first {@code HaltException} thrown, null if none thrown yet.
-   * Terminate the current process. Note that terminate is the *only* method
-   * that should be used to terminate the daemon processes.
-   *
-   * @param status
-   *          exit code
-   * @param msg
-   *          message used to create the {@code ExitException}
-   * @throws ExitException
-   *           if System.exit is disabled for test purposes
+   * Inner termination: either exit with the exception's exit code,
+   * or, if system exits are disabled, rethrow the exception.
+   * @param ee exit exception
-  public static void terminate(int status, String msg) throws ExitException {
-    LOG.info("Exiting with status " + status);
+  public static synchronized void terminate(ExitException ee)
+      throws ExitException {
+    int status = ee.getExitCode();
+    String msg = ee.getMessage();
+    if (status != 0) {
+      //exit indicates a problem, log it
+      LOG.debug("Exiting with status {}: {}",  status, msg, ee);
+      LOG.info("Exiting with status {}: {}", status, msg);
+    }
-      ExitException ee = new ExitException(status, msg);
-      LOG.fatal("Terminate called", ee);
-      if (null == firstExitException) {
+      LOG.error("Terminate called", ee);
+      if (!terminateCalled()) {
-   *
-   * @param status
-   *          exit code
-   * @param msg
-   *          message used to create the {@code HaltException}
-   * @throws HaltException
-   *           if Runtime.getRuntime().halt() is disabled for test purposes
+   * The exception argument is rethrown if JVM halting is disabled.
+   * @param ee the exception containing the status code, message and any stack
+   * trace.
+   * @throws HaltException if {@link Runtime#halt(int)} is disabled.
-  public static void halt(int status, String msg) throws HaltException {
-    LOG.info("Halt with status " + status + " Message: " + msg);
+  public static synchronized void halt(HaltException ee) throws HaltException {
+    int status = ee.getExitCode();
+    String msg = ee.getMessage();
+    try {
+      if (status != 0) {
+        //exit indicates a problem, log it
+        LOG.debug("Halt with status {}: {}", status, msg, ee);
+        LOG.info("Halt with status {}: {}", status, msg, msg);
+      }
+    } catch (Exception ignored) {
+      // ignore exceptions here, as it may be due to an out of memory situation
+    }
-      HaltException ee = new HaltException(status, msg);
-      LOG.fatal("Halt called", ee);
-      if (null == firstHaltException) {
+      LOG.error("Halt called", ee);
+      if (!haltCalled()) {
-   * Like {@link terminate(int, String)} but uses the given throwable to
-   * initialize the ExitException.
-   *
-   * @param status
-   * @param t
-   *          throwable used to create the ExitException
-   * @throws ExitException
-   *           if System.exit is disabled for test purposes
+   * Like {@link #terminate(int, String)} but uses the given throwable to
+   * build the message to display or throw as an
+   * {@link ExitException}.
+   * <p>
+   * @param status exit code to use if the exception is not an ExitException.
+   * @param t throwable which triggered the termination. If this exception
+   * is an {@link ExitException} its status overrides that passed in.
+   * @throws ExitException if {@link System#exit(int)}  is disabled.
-    terminate(status, StringUtils.stringifyException(t));
+    if (t instanceof ExitException) {
+      terminate((ExitException) t);
+    } else {
+      terminate(new ExitException(status, t));
+    }
-   * @param status
-   * @param t
-   * @throws ExitException
+   * @param status exit code to use if the exception is not a HaltException.
+   * @param t throwable which triggered the termination. If this exception
+   * is a {@link HaltException} its status overrides that passed in.
+   * @throws HaltException if {@link System#exit(int)}  is disabled.
-    halt(status, StringUtils.stringifyException(t));
+    if (t instanceof HaltException) {
+      halt((HaltException) t);
+    } else {
+      halt(new HaltException(status, t));
+    }
-   * Like {@link terminate(int, String)} without a message.
+   * Like {@link #terminate(int, Throwable)} without a message.
-   * @param status
-   * @throws ExitException
-   *           if System.exit is disabled for test purposes
+   * @param status exit code
+   * @throws ExitException if {@link System#exit(int)} is disabled.
-    terminate(status, "ExitException");
+    terminate(status, "");
+  }
+
+  /**
+   * Terminate the current process. Note that terminate is the *only* method
+   * that should be used to terminate the daemon processes.
+   *
+   * @param status exit code
+   * @param msg message used to create the {@code ExitException}
+   * @throws ExitException if {@link System#exit(int)} is disabled.
+   */
+  public static void terminate(int status, String msg) throws ExitException {
+    terminate(new ExitException(status, msg));
-   * @param status
-   * @throws ExitException
+   * @param status status code
+   * @throws HaltException if {@link Runtime#halt(int)} is disabled.
-    halt(status, "HaltException");
+    halt(status, "");
+  }
+
+  /**
+   * Forcibly terminates the currently running Java virtual machine.
+   * @param status status code
+   * @param message message
+   * @throws HaltException if {@link Runtime#halt(int)} is disabled.
+   */
+  public static void halt(int status, String message) throws HaltException {
+    halt(new HaltException(status, message));
+  }
+
+  /**
+   * Handler for out of memory events -no attempt is made here
+   * to cleanly shutdown or support halt blocking; a robust
+   * printing of the event to stderr is all that can be done.
+   * @param oome out of memory event
+   */
+  public static void haltOnOutOfMemory(OutOfMemoryError oome) {
+    //After catching an OOM java says it is undefined behavior, so don't
+    //even try to clean up or we can get stuck on shutdown.
+    try {
+      System.err.println("Halting due to Out Of Memory Error...");
+    } catch (Throwable err) {
+      //Again we done want to exit because of logging issues.
+    }
+    Runtime.getRuntime().halt(-1);

MOV26 MOV26 UPD40 UPD40 INS31 INS31 INS31 INS31 INS83 UPD43 INS83 INS42 INS8 INS29 INS43 INS31 INS31 INS31 INS31 INS29 INS43 INS31 INS31 INS31 INS31 INS83 INS44 MOV43 INS83 INS44 INS8 MOV44 MOV44 INS43 MOV44 MOV44 MOV44 INS29 INS83 INS83 INS39 INS42 MOV44 MOV44 MOV43 INS8 MOV44 INS29 INS83 INS83 INS39 INS42 MOV44 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 UPD66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS45 UPD42 INS65 INS42 INS29 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS83 INS42 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS43 INS42 INS8 UPD65 UPD65 MOV43 INS42 INS60 INS60 INS25 UPD65 MOV43 INS42 INS60 INS60 INS54 INS25 MOV21 INS42 INS25 MOV65 INS25 MOV65 INS65 MOV65 INS65 INS21 MOV65 MOV65 INS65 INS65 INS65 INS43 INS42 INS42 INS21 INS65 INS65 INS43 INS42 INS54 INS21 INS68 INS68 UPD42 UPD42 INS66 INS65 INS66 INS66 INS65 INS39 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS39 INS42 INS43 INS42 INS46 INS21 INS42 INS41 INS65 INS65 INS42 INS42 INS60 INS25 INS41 INS66 INS65 INS66 INS66 INS39 INS42 INS43 INS42 INS46 INS21 INS39 INS42 INS43 INS42 INS43 INS42 INS46 INS21 INS42 INS41 INS65 INS65 INS42 INS42 INS60 INS25 INS41 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD42 UPD66 INS39 INS59 INS43 INS59 INS27 INS8 UPD66 INS66 UPD42 UPD66 UPD66 MOV66 INS66 INS65 UPD66 INS39 INS59 INS43 INS59 INS8 INS12 INS42 INS8 UPD66 INS65 INS66 INS66 INS66 UPD66 INS66 INS65 INS66 INS66 INS65 UPD66 INS62 INS8 INS8 INS66 INS66 INS66 INS65 INS66 UPD42 INS66 INS65 INS66 INS62 INS8 INS8 INS66 INS66 INS65 UPD66 INS42 INS66 UPD66 INS42 INS66 INS65 INS66 INS32 INS66 UPD42 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS8 INS12 INS32 INS42 INS42 INS69 INS42 INS42 INS69 INS68 INS66 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS66 INS66 INS43 INS59 INS27 INS8 INS27 INS68 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS7 INS42 INS66 INS66 INS43 INS59 INS27 INS8 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS21 MOV21 INS68 INS42 INS32 MOV42 INS42 INS32 INS25 INS44 INS8 MOV21 MOV25 MOV53 INS68 INS42 INS42 INS68 INS42 INS43 INS21 INS21 INS42 INS68 INS42 INS43 INS21 INS21 INS68 INS68 UPD45 INS68 INS42 MOV14 INS68 UPD45 INS68 INS42 INS14 INS21 INS44 INS8 INS32 INS42 INS38 INS39 INS39 INS42 INS69 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS45 INS42 INS42 INS69 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS42 INS42 INS69 INS42 INS42 INS42 INS42 INS27 INS8 INS43 INS42 INS38 INS42 INS69 INS69 INS42 INS42 INS69 INS42 INS32 INS32 INS42 INS42 INS69 INS42 INS32 INS32 INS42 INS69 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS43 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS34 INS39 INS52 INS42 INS52 INS42 INS42 INS7 INS42 INS42 INS42 INS39 INS52 INS42 INS52 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 UPD42 INS32 INS39 INS42 INS34 MOV21 INS21 INS42 UPD42 INS32 INS39 INS43 INS39 MOV42 INS11 UPD42 MOV42 INS14 INS39 MOV42 INS11 UPD42 MOV42 INS14 INS39 INS43 INS39 INS39 INS39 INS39 INS42 INS40 INS42 INS45 INS42 INS42 INS48 INS42 INS48 INS42 INS32 INS42 INS42 INS43 INS42 INS43 INS42 INS42 MOV43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL45 DEL42 DEL27 DEL42 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL65 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL42 DEL27 DEL33 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL25 DEL8 DEL66 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL66