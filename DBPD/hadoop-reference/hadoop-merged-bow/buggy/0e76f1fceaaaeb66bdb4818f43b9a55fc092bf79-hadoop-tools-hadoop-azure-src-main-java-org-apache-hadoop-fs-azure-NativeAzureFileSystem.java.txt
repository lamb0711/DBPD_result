HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.

+
-        this.committed = false;  
+        this.committed = false;
-          this.committed = false;    	  
+          this.committed = false;
-            this.committed = false;	
+            this.committed = false;
-        Throwable innerException = checkForAzureStorageException(e);
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
-          if (isFileNotFoundException((StorageException) innerException)) {
+          if (NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
-        Throwable innerException = checkForAzureStorageException(e);
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
-          if (isFileNotFoundException((StorageException) innerException)) {
+          if (NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
-        Throwable innerException = checkForAzureStorageException(e);
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
-             && isFileNotFoundException((StorageException) innerException)) {
+            && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
-    /*
-     * Helper method to recursively check if the cause of the exception is
-     * a Azure storage exception.
-     */
-    private Throwable checkForAzureStorageException(IOException e) {
-
-      Throwable innerException = e.getCause();
-
-      while (innerException != null
-              && !(innerException instanceof StorageException)) {
-        innerException = innerException.getCause();
-      }
-
-      return innerException;
-    }
-
-    /*
-     * Helper method to check if the AzureStorageException is
-     * because backing blob was not found.
-     */
-    private boolean isFileNotFoundException(StorageException e) {
-
-      String errorCode = ((StorageException) e).getErrorCode();
-      if (errorCode != null
-          && (errorCode.equals(StorageErrorCodeStrings.BLOB_NOT_FOUND)
-              || errorCode.equals(StorageErrorCodeStrings.RESOURCE_NOT_FOUND)
-              || errorCode.equals(StorageErrorCode.BLOB_NOT_FOUND.toString())
-              || errorCode.equals(StorageErrorCode.RESOURCE_NOT_FOUND.toString()))) {
-
-        return true;
-      }
-
-      return false;
-    }
-    FileMetadata metaFile = store.retrieveMetadata(key);
+    FileMetadata metaFile = null;
+    try {
+      metaFile = store.retrieveMetadata(key);
+    } catch (IOException e) {
+
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+        return false;
+      }
+      throw e;
+    }
-        FileMetadata parentMetadata = store.retrieveMetadata(parentKey);
+
+        FileMetadata parentMetadata = null;
+        try {
+          parentMetadata = store.retrieveMetadata(parentKey);
+        } catch (IOException e) {
+
+          Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
+
+          if (innerException instanceof StorageException) {
+            // Invalid State.
+            // A FileNotFoundException is not thrown here as the API returns false
+            // if the file not present. But not retrieving metadata here is an
+            // unrecoverable state and can only happen if there is a race condition
+            // hence throwing a IOException
+            if (NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+              throw new IOException("File " + f + " has a parent directory "
+                  + parentPath + " whose metadata cannot be retrieved. Can't resolve");
+            }
+          }
+          throw e;
+        }
+
+        // Invalid State.
+        // A FileNotFoundException is not thrown here as the API returns false
+        // if the file not present. But not retrieving metadata here is an
+        // unrecoverable state and can only happen if there is a race condition
+        // hence throwing a IOException
+        if (parentMetadata == null) {
+          throw new IOException("File " + f + " has a parent directory "
+              + parentPath + " whose metadata cannot be retrieved. Can't resolve");
+        }
+
+
-      store.delete(key);
-      instrumentation.fileDeleted();
+
+      try {
+        store.delete(key);
+        instrumentation.fileDeleted();
+      } catch(IOException e) {
+
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
+
+        if (innerException instanceof StorageException
+            && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+          return false;
+        }
+
+       throw e;
+      }
-        FileMetadata parentMetadata = store.retrieveMetadata(parentKey);
+        FileMetadata parentMetadata = null;
+
+        try {
+          parentMetadata = store.retrieveMetadata(parentKey);
+        } catch (IOException e) {
+
+          Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
+
+          if (innerException instanceof StorageException) {
+            // Invalid State.
+            // A FileNotFoundException is not thrown here as the API returns false
+            // if the file not present. But not retrieving metadata here is an
+            // unrecoverable state and can only happen if there is a race condition
+            // hence throwing a IOException
+            if (NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+              throw new IOException("File " + f + " has a parent directory "
+                  + parentPath + " whose metadata cannot be retrieved. Can't resolve");
+            }
+          }
+          throw e;
+        }
+
+        // Invalid State.
+        // A FileNotFoundException is not thrown here as the API returns false
+        // if the file not present. But not retrieving metadata here is an
+        // unrecoverable state and can only happen if there is a race condition
+        // hence throwing a IOException
+        if (parentMetadata == null) {
+          throw new IOException("File " + f + " has a parent directory "
+              + parentPath + " whose metadata cannot be retrieved. Can't resolve");
+        }
-      PartialListing listing = store.listAll(key, AZURE_LIST_ALL, 1,
-          priorLastKey);
+      PartialListing listing = null;
+      try {
+        listing = store.listAll(key, AZURE_LIST_ALL, 1,
+            priorLastKey);
+      } catch(IOException e) {
+
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
+
+        if (innerException instanceof StorageException
+            && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+          return false;
+        }
+
+        throw e;
+      }
+
+      if (listing == null) {
+        return false;
+      }
+
-          store.delete(key + suffix);
-          instrumentation.fileDeleted();
+          try {
+            store.delete(key + suffix);
+            instrumentation.fileDeleted();
+          } catch(IOException e) {
+
+            Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
+
+            if (innerException instanceof StorageException
+                && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+              return false;
+            }
+
+            throw e;
+          }
-      store.delete(key);
+
+      try {
+        store.delete(key);
+      } catch(IOException e) {
+
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(e);
+
+        if (innerException instanceof StorageException
+            && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+          return false;
+        }
+
+        throw e;
+      }
-  public FileStatus getFileStatus(Path f) throws IOException {
+  public FileStatus getFileStatus(Path f) throws FileNotFoundException, IOException {
-    FileMetadata meta = store.retrieveMetadata(key);
+    FileMetadata meta = null;
+    try {
+      meta = store.retrieveMetadata(key);
+    } catch(Exception ex) {
+
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+          throw new FileNotFoundException(String.format("%s is not found", key));
+       }
+
+      throw ex;
+    }
+
-  public FileStatus[] listStatus(Path f) throws IOException {
+  public FileStatus[] listStatus(Path f) throws FileNotFoundException, IOException {
-    FileMetadata meta = store.retrieveMetadata(key);
+    FileMetadata meta = null;
+    try {
+      meta = store.retrieveMetadata(key);
+    } catch (IOException ex) {
+
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+        throw new FileNotFoundException(String.format("%s is not found", f));
+      }
+
+      throw ex;
+    }
+
-      PartialListing listing = store.list(key, AZURE_LIST_ALL, 1, partialKey);
+      PartialListing listing = null;
+
+      try {
+        listing  = store.list(key, AZURE_LIST_ALL, 1, partialKey);
+      } catch (IOException ex) {
+
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+        if (innerException instanceof StorageException
+            && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+            throw new FileNotFoundException(String.format("%s is not found", key));
+        }
+
+        throw ex;
+      }
+      // NOTE: We don't check for Null condition as the Store API should return
+      // an empty list if there are not listing.
-        listing = store.list(key, AZURE_LIST_ALL, 1, partialKey);
+       listing = null;
+       try {
+         listing = store.list(key, AZURE_LIST_ALL, 1, partialKey);
+       } catch (IOException ex) {
+         Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+         if (innerException instanceof StorageException
+             && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+           throw new FileNotFoundException(String.format("%s is not found", key));
+         }
+
+         throw ex;
+       }
+      // NOTE: We don't check for Null condition as the Store API should return
+      // and empty list if there are not listing.
+
-  public FSDataInputStream open(Path f, int bufferSize) throws IOException {
+  public FSDataInputStream open(Path f, int bufferSize) throws FileNotFoundException, IOException {
-    FileMetadata meta = store.retrieveMetadata(key);
+    FileMetadata meta = null;
+    try {
+      meta = store.retrieveMetadata(key);
+    } catch(Exception ex) {
+
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+        throw new FileNotFoundException(String.format("%s is not found", key));
+      }
+
+      throw ex;
+    }
+
+    DataInputStream inputStream = null;
+    try {
+      inputStream = store.retrieve(key);
+    } catch(Exception ex) {
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+        throw new FileNotFoundException(String.format("%s is not found", key));
+      }
+
+      throw ex;
+    }
+
-        new NativeAzureFsInputStream(store.retrieve(key), key, meta.getLength()), bufferSize));
+        new NativeAzureFsInputStream(inputStream, key, meta.getLength()), bufferSize));
-  public boolean rename(Path src, Path dst) throws IOException {
+  public boolean rename(Path src, Path dst) throws FileNotFoundException, IOException {
-    FileMetadata dstMetadata = store.retrieveMetadata(dstKey);
+    FileMetadata dstMetadata = null;
+    try {
+      dstMetadata = store.retrieveMetadata(dstKey);
+    } catch (IOException ex) {
+
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      // A BlobNotFound storage exception in only thrown from retrieveMetdata API when
+      // there is a race condition. If there is another thread which deletes the destination
+      // file or folder, then this thread calling rename should be able to continue with
+      // rename gracefully. Hence the StorageException is swallowed here.
+      if (innerException instanceof StorageException) {
+        if (NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+          LOG.debug("BlobNotFound exception encountered for Destination key : {}. "
+              + "Swallowin the exception to handle race condition gracefully", dstKey);
+        }
+      } else {
+        throw ex;
+      }
+    }
+
-      FileMetadata parentOfDestMetadata =
-          store.retrieveMetadata(pathToKey(absoluteDst.getParent()));
+      FileMetadata parentOfDestMetadata = null;
+      try {
+        parentOfDestMetadata = store.retrieveMetadata(pathToKey(absoluteDst.getParent()));
+      } catch (IOException ex) {
+
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+        if (innerException instanceof StorageException
+            && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+          LOG.debug("Parent of destination {} doesn't exists. Failing rename", dst);
+          return false;
+        }
+
+        throw ex;
+      }
+
-    FileMetadata srcMetadata = store.retrieveMetadata(srcKey);
+    FileMetadata srcMetadata = null;
+    try {
+      srcMetadata = store.retrieveMetadata(srcKey);
+    } catch (IOException ex) {
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+        LOG.debug("Source {} doesn't exists. Failing rename", src);
+        return false;
+      }
+
+      throw ex;
+    }
+
-      store.rename(srcKey, dstKey);
+      try {
+        store.rename(srcKey, dstKey);
+      } catch(IOException ex) {
+
+        Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+        if (innerException instanceof StorageException
+            && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+          LOG.debug("BlobNotFoundException encountered. Failing rename", src);
+          return false;
+        }
+
+        throw ex;
+      }
-  public void setPermission(Path p, FsPermission permission) throws IOException {
+  public void setPermission(Path p, FsPermission permission) throws FileNotFoundException, IOException {
-    FileMetadata metadata = store.retrieveMetadata(key);
+    FileMetadata metadata = null;
+    try {
+      metadata = store.retrieveMetadata(key);
+    } catch (IOException ex) {
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+        throw new FileNotFoundException(String.format("File %s doesn't exists.", p));
+      }
+
+      throw ex;
+    }
+
-    FileMetadata metadata = store.retrieveMetadata(key);
+    FileMetadata metadata = null;
+
+    try {
+      metadata = store.retrieveMetadata(key);
+    } catch (IOException ex) {
+      Throwable innerException = NativeAzureFileSystem.checkForAzureStorageException(ex);
+
+      if (innerException instanceof StorageException
+          && NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {
+
+        throw new FileNotFoundException(String.format("File %s doesn't exists.", p));
+      }
+
+      throw ex;
+    }
+
+
+
+  /*
+   * Helper method to recursively check if the cause of the exception is
+   * a Azure storage exception.
+   */
+  private static Throwable checkForAzureStorageException(Exception e) {
+
+    Throwable innerException = e.getCause();
+
+    while (innerException != null
+            && !(innerException instanceof StorageException)) {
+      innerException = innerException.getCause();
+    }
+
+    return innerException;
+  }
+
+  /*
+   * Helper method to check if the AzureStorageException is
+   * because backing blob was not found.
+   */
+  private static boolean isFileNotFoundException(StorageException e) {
+
+    String errorCode = ((StorageException) e).getErrorCode();
+    if (errorCode != null
+        && (errorCode.equals(StorageErrorCodeStrings.BLOB_NOT_FOUND)
+            || errorCode.equals(StorageErrorCodeStrings.RESOURCE_NOT_FOUND)
+            || errorCode.equals(StorageErrorCode.BLOB_NOT_FOUND.toString())
+            || errorCode.equals(StorageErrorCode.RESOURCE_NOT_FOUND.toString()))) {
+
+      return true;
+    }
+
+    return false;
+  }
+

MOV31 MOV31 INS43 INS43 INS43 INS43 INS43 INS83 INS44 INS83 INS54 INS42 INS54 INS42 INS60 INS54 INS42 INS54 INS60 INS54 INS42 INS54 INS54 INS42 INS60 INS54 INS60 INS54 INS43 INS42 MOV43 INS8 INS12 INS43 INS8 INS12 MOV43 INS59 INS8 INS12 INS8 INS12 INS43 INS59 INS8 INS12 MOV43 INS8 INS12 INS8 INS12 MOV43 INS59 INS8 INS12 MOV43 INS59 INS8 INS12 INS42 INS33 INS21 MOV44 INS8 INS54 INS54 INS25 INS54 INS42 INS33 INS21 INS44 INS8 MOV42 INS33 INS21 INS44 INS8 INS60 INS54 INS25 INS33 INS21 INS44 INS8 INS42 INS42 INS33 INS21 INS44 INS8 INS33 INS21 INS44 INS8 INS33 INS21 INS44 INS8 INS8 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS21 INS44 INS8 INS7 INS60 INS25 INS53 INS8 INS12 INS8 INS12 INS27 INS8 INS8 INS12 INS7 INS43 INS42 INS60 INS25 INS53 INS7 INS43 INS42 INS60 INS25 INS53 MOV43 INS59 MOV8 INS12 INS42 INS8 INS7 INS43 INS42 INS60 INS25 INS53 INS7 INS43 INS42 INS60 INS25 INS53 INS7 INS43 INS42 INS60 INS25 INS54 INS7 INS43 INS42 INS60 INS25 INS53 MOV21 INS54 INS7 INS43 INS42 MOV60 INS25 INS53 INS7 INS43 INS42 MOV60 INS25 INS53 INS42 MOV32 INS43 INS59 INS27 INS8 INS42 INS54 INS25 MOV21 MOV21 INS44 INS8 INS54 INS25 INS33 INS21 INS44 INS8 INS42 INS33 INS41 MOV21 INS44 INS8 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 MOV32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS33 INS44 INS8 INS21 INS54 INS42 MOV32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 MOV32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 MOV32 INS42 INS43 INS59 INS62 INS8 INS8 INS43 INS8 INS12 INS42 MOV32 INS42 INS43 INS59 INS27 INS8 INS42 MOV8 INS12 INS42 INS32 INS42 UPD43 INS27 INS8 INS42 INS42 MOV32 INS42 UPD43 INS27 INS8 INS42 INS42 INS42 INS32 INS62 INS32 INS41 MOV43 INS8 INS12 INS27 INS8 INS43 INS42 INS60 INS25 INS53 INS8 INS12 INS27 INS8 INS7 INS43 INS42 INS60 INS25 INS53 INS9 INS8 INS43 INS42 INS60 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS62 INS32 INS53 INS42 INS42 MOV32 INS62 INS32 INS53 INS43 INS42 INS60 INS25 INS53 INS7 INS8 INS12 INS42 INS42 INS32 INS62 INS32 INS53 INS42 INS42 INS32 INS62 INS32 INS53 INS42 INS42 INS32 INS42 INS43 INS25 INS53 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS32 INS62 INS32 INS21 INS41 INS44 INS8 INS42 INS42 INS42 UPD42 UPD42 INS32 INS62 INS32 INS53 UPD42 UPD42 INS62 INS32 INS53 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS9 INS33 INS21 INS44 INS8 INS42 INS33 INS53 INS42 INS43 INS59 INS27 INS8 INS42 INS33 INS21 INS44 INS8 INS42 INS33 INS53 INS42 MOV32 INS42 INS43 INS59 INS27 INS8 INS42 INS54 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS14 UPD42 UPD42 UPD42 INS42 INS43 INS42 INS42 INS11 INS14 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS14 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS7 INS43 INS42 INS60 INS25 INS53 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS32 INS9 INS43 INS42 INS60 INS25 INS53 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS14 UPD42 UPD42 UPD42 INS42 INS43 INS42 INS42 INS11 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS7 INS43 INS42 INS60 INS25 INS53 INS14 INS42 INS42 INS32 INS62 INS32 INS41 INS7 INS43 INS42 INS60 INS25 INS53 INS14 INS42 INS42 INS32 INS62 INS32 INS41 MOV8 INS12 INS42 INS42 INS32 INS62 INS32 INS41 INS42 INS43 INS42 INS43 INS32 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS32 INS62 INS32 INS53 INS7 INS43 INS42 INS60 MOV25 INS53 INS42 INS43 INS42 INS43 INS32 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS11 INS21 INS42 MOV32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS42 INS42 MOV32 INS42 INS43 INS59 INS62 INS8 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS9 INS42 MOV32 INS42 INS43 INS59 INS62 INS8 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS9 INS44 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS9 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS14 INS42 INS32 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS62 INS32 INS21 INS41 INS42 INS42 INS42 INS32 INS62 INS32 INS21 INS41 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS43 INS25 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS43 INS25 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS53 INS42 INS43 INS42 INS42 INS43 INS42 INS43 INS32 MOV42 MOV42 MOV42 MOV42 MOV34 MOV42 INS42 INS42 INS32 INS62 INS32 INS53 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS32 INS9 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS32 INS9 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS14 INS45 INS45 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS11 INS53 INS42 INS42 INS11 INS53 INS42 INS42 INS32 INS62 INS32 INS41 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS43 INS42 INS14 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 INS9 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS27 INS42 INS43 INS27 INS42 INS43 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42