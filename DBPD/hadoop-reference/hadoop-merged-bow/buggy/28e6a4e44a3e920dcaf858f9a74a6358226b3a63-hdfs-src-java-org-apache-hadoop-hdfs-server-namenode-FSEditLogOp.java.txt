HDFS-1073. Redesign the NameNode's storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.zip.CheckedInputStream;
+import org.apache.hadoop.hdfs.protocol.FSConstants;
-import org.apache.hadoop.hdfs.server.common.GenerationStamp;
+import org.apache.hadoop.hdfs.server.common.GenerationStamp;
+import org.apache.hadoop.hdfs.server.common.Storage;
+  long txid;
+
-        instances.put(OP_CHECKPOINT_TIME, new CheckpointTimeOp());
-        instances.put(OP_JSPOOL_START, new JSpoolStartOp());
+        instances.put(OP_START_LOG_SEGMENT,
+                      new LogSegmentOp(OP_START_LOG_SEGMENT));
+        instances.put(OP_END_LOG_SEGMENT,
+                      new LogSegmentOp(OP_END_LOG_SEGMENT));
+    this.txid = 0;
+  }
+
+  public void setTransactionId(long txid) {
+    this.txid = txid;
+  
+  static class LogSegmentOp extends FSEditLogOp {
+    private LogSegmentOp(FSEditLogOpCodes code) {
+      super(code);
+      assert code == OP_START_LOG_SEGMENT ||
+             code == OP_END_LOG_SEGMENT : "Bad op: " + code;
+    }
+
+    static LogSegmentOp getInstance(FSEditLogOpCodes code) {
+      return (LogSegmentOp)opInstances.get().get(code);
+    }
+
+    public void readFields(DataInputStream in, int logVersion)
+        throws IOException {
+      // no data stored in these ops yet
+    }
+
+    @Override
+    void writeFields(DataOutputStream out) throws IOException {
+      // no data stored
+    }
+  }
-  static class JSpoolStartOp extends FSEditLogOp {
-    private JSpoolStartOp() {
-      super(OP_JSPOOL_START);
-    }
-
-    static JSpoolStartOp getInstance() {
-      return (JSpoolStartOp)opInstances.get().get(OP_JSPOOL_START);
-    }
-
-    @Override 
-    void writeFields(DataOutputStream out) throws IOException {
-    }
-    
-    @Override
-    void readFields(DataInputStream in, int logVersion)
-        throws IOException {
-    }
-  }
-
-  static class CheckpointTimeOp extends FSEditLogOp {
-    long checkpointTime;
-
-    private CheckpointTimeOp() {
-      super(OP_CHECKPOINT_TIME);            
-    }
-    
-    CheckpointTimeOp setCheckpointTime(long time) {
-      this.checkpointTime = time;
-      return this;
-    }
-
-    static CheckpointTimeOp getInstance() {
-      return (CheckpointTimeOp)opInstances.get()
-        .get(OP_CHECKPOINT_TIME);
-    }
-
-    @Override 
-    void writeFields(DataOutputStream out) throws IOException {
-      new LongWritable(checkpointTime).write(out);
-    }
-    
-    @Override
-    void readFields(DataInputStream in, int logVersion)
-        throws IOException {
-      this.checkpointTime = readLong(in);
-    }
-  }
-
+  
+  /**
+   * Class to encapsulate the header at the top of a log file.
+   */
+  static class LogHeader {
+    final int logVersion;
+    final Checksum checksum;
+
+    public LogHeader(int logVersion, Checksum checksum) {
+      this.logVersion = logVersion;
+      this.checksum = checksum;
+    }
+
+    static LogHeader read(DataInputStream in) throws IOException {
+      int logVersion = 0;
+
+      logVersion = FSEditLogOp.LogHeader.readLogVersion(in);
+      Checksum checksum = null;
+      if (LayoutVersion.supports(Feature.EDITS_CHESKUM, logVersion)) {
+        checksum = FSEditLog.getChecksum();
+      }
+      return new LogHeader(logVersion, checksum);
+    }
+    
+    /**
+     * Read the header of fsedit log
+     * @param in fsedit stream
+     * @return the edit log version number
+     * @throws IOException if error occurs
+     */
+    private static int readLogVersion(DataInputStream in) throws IOException {
+      int logVersion = 0;
+      // Read log file version. Could be missing.
+      in.mark(4);
+      // If edits log is greater than 2G, available method will return negative
+      // numbers, so we avoid having to call available
+      boolean available = true;
+      try {
+        logVersion = in.readByte();
+      } catch (EOFException e) {
+        available = false;
+      }
+      if (available) {
+        in.reset();
+        logVersion = in.readInt();
+        if (logVersion < FSConstants.LAYOUT_VERSION) // future version
+          throw new IOException(
+              "Unexpected version of the file system log file: "
+              + logVersion + ". Current version = "
+              + FSConstants.LAYOUT_VERSION + ".");
+      }
+      assert logVersion <= Storage.LAST_UPGRADABLE_LAYOUT_VERSION :
+        "Unsupported version " + logVersion;
+      return logVersion;
+    }
+  }
+      buf.writeLong(op.txid);
-      this.in = in;
+      if (checksum != null) {
+        this.in = new DataInputStream(
+            new CheckedInputStream(in, checksum));
+      } else {
+        this.in = in;
+      }
+
+      if (LayoutVersion.supports(Feature.STORED_TXIDS, logVersion)) {
+        // Read the txid
+        op.setTransactionId(in.readLong());
+      }
+
-      validateChecksum(in, checksum);
+      validateChecksum(in, checksum, op.txid);
-                                  Checksum checksum)
+                                  Checksum checksum,
+                                  long txid)
-              calculatedChecksum + " but read checksum " + readChecksum, -1);
+              calculatedChecksum + " but read checksum " + readChecksum, txid);

MOV26 INS26 INS26 INS26 MOV55 MOV55 INS40 INS40 INS40 INS23 INS31 MOV31 INS39 INS59 INS83 INS39 INS42 INS44 INS8 UPD42 INS29 INS42 INS23 INS31 INS42 INS21 INS39 INS42 INS21 UPD42 INS44 UPD43 INS44 INS83 INS65 INS83 UPD39 INS83 INS43 INS59 INS83 INS42 MOV44 INS44 UPD43 UPD42 MOV44 MOV43 INS29 INS83 INS83 UPD39 MOV39 UPD42 MOV42 MOV44 MOV43 INS8 INS44 INS7 INS7 INS43 INS42 INS6 UPD42 INS43 INS42 INS66 UPD42 INS42 INS42 INS43 INS42 INS21 UPD42 INS60 INS21 INS60 INS25 INS41 INS65 INS65 INS65 INS65 UPD43 UPD42 INS60 INS21 INS60 INS54 INS25 INS6 INS41 INS21 INS25 INS25 INS39 INS42 INS22 INS34 INS22 INS42 INS42 UPD42 INS27 INS27 INS42 UPD42 MOV42 INS7 INS39 INS59 INS7 INS43 INS59 INS32 INS8 INS14 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 INS39 INS59 INS32 INS39 INS59 INS8 INS12 INS42 INS8 INS27 INS27 INS42 INS32 INS27 INS8 INS8 INS32 INS8 INS52 INS42 INS52 INS42 INS27 INS27 INS45 INS42 UPD43 UPD42 INS22 INS42 INS42 INS34 INS42 INS32 UPD42 MOV42 INS42 INS33 INS42 UPD42 MOV42 INS40 UPD42 MOV42 INS21 INS43 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS9 MOV21 INS44 INS8 INS21 MOV21 INS25 INS42 INS40 INS45 INS42 INS42 INS42 INS40 INS42 INS33 INS21 MOV21 INS42 INS42 INS40 INS42 INS21 INS40 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS52 INS42 INS40 INS42 INS42 INS7 INS42 INS7 INS43 INS42 INS21 INS32 INS27 INS53 INS7 INS32 INS42 INS32 INS42 INS32 INS42 INS7 INS42 INS42 INS42 INS42 INS40 INS14 INS22 INS14 INS42 INS42 INS32 UPD42 UPD42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS9 INS42 INS43 INS27 INS52 INS42 INS43 INS14 INS42 INS42 UPD43 INS42 UPD43 INS42 INS42 INS45 INS42 INS45 INS40 INS45 INS42 INS43 INS42 INS42 INS42 UPD42 UPD42 INS42 DEL42 DEL78 DEL42 DEL42 DEL43 DEL83 DEL42 DEL42 DEL46 DEL8 DEL31 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL41 DEL43 DEL32 DEL42 DEL32 DEL11 DEL41 DEL42 DEL43 DEL42 DEL14 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL42 DEL78 DEL8 DEL31 DEL42 DEL78 DEL39 DEL42 DEL8 DEL31 DEL34 DEL38