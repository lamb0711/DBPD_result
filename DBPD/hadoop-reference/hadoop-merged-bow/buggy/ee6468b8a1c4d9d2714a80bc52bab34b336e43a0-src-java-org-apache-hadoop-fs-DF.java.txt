HADOOP-5958. Use JDK 1.6 File APIs in DF.java wherever possible. Contributed by Aaron Kimball.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@890576 13f79535-47bb-0310-9956-ffa450edef68

-/** Filesystem disk space usage statistics.  Uses the unix 'df' program.
- * Tested on Linux, FreeBSD, Cygwin. */
+/** Filesystem disk space usage statistics.
+ * Uses the unix 'df' program to get mount points, and java.io.File for
+ * space utilization. Tested on Linux, FreeBSD, Cygwin. */
-  public static final long DF_INTERVAL_DEFAULT = 3 * 1000; // default DF refresh interval 
-  
-  private String dirPath;
+
+  /** Default DF refresh interval. */
+  public static final long DF_INTERVAL_DEFAULT = 3 * 1000;
+
+  private final String dirPath;
+  private final File dirFile;
-  private long capacity;
-  private long used;
-  private long available;
-  private int percentUsed;
+    this.dirFile = new File(this.dirPath);
+  /** @return the canonical path to the volume we're checking. */
-  
-  public String getFilesystem() throws IOException { 
-    run(); 
-    return filesystem; 
-  }
-  
-  public long getCapacity() throws IOException { 
-    run(); 
-    return capacity; 
-  }
-  
-  public long getUsed() throws IOException { 
-    run(); 
-    return used;
-  }
-  
-  public long getAvailable() throws IOException { 
-    run(); 
-    return available;
-  }
-  
-  public int getPercentUsed() throws IOException {
+
+  /** @return a string indicating which filesystem volume we're checking. */
+  public String getFilesystem() throws IOException {
-    return percentUsed;
+    return filesystem;
+  /** @return the capacity of the measured filesystem in bytes. */
+  public long getCapacity() {
+    return dirFile.getTotalSpace();
+  }
+
+  /** @return the total used space on the filesystem in bytes. */
+  public long getUsed() {
+    return dirFile.getTotalSpace() - dirFile.getFreeSpace();
+  }
+
+  /** @return the usable space remaining on the filesystem in bytes. */
+  public long getAvailable() {
+    return dirFile.getUsableSpace();
+  }
+
+  /** @return the amount of the volume full, as a percent. */
+  public int getPercentUsed() {
+    double cap = (double) getCapacity();
+    double used = (cap - (double) getAvailable());
+    return (int) (used * 100.0 / cap);
+  }
+
+  /** @return the filesystem mount point for the indicated volume */
-      capacity / 1024 + "\t" +
-      used / 1024 + "\t" +
-      available / 1024 + "\t" +
-      percentUsed + "%\t" +
+      getCapacity() / 1024 + "\t" +
+      getUsed() / 1024 + "\t" +
+      getAvailable() / 1024 + "\t" +
+      getPercentUsed() + "%\t" +
-        this.capacity = Long.parseLong(tokens.nextToken()) * 1024;
-        this.available = Long.parseLong(tokens.nextToken()) * 1024;
-        this.percentUsed = Integer.parseInt(tokens.nextToken());
+        Long.parseLong(tokens.nextToken()); // capacity
+        Long.parseLong(tokens.nextToken()); // available
+        Integer.parseInt(tokens.nextToken()); // pct used
-        this.used = this.capacity - this.available;
-        this.capacity = Long.parseLong(tokens.nextToken()) * 1024;
-        this.used = Long.parseLong(tokens.nextToken()) * 1024;
-        this.available = Long.parseLong(tokens.nextToken()) * 1024;
-        this.percentUsed = Integer.parseInt(tokens.nextToken());
+        Long.parseLong(tokens.nextToken()); // capacity
+        Long.parseLong(tokens.nextToken()); // used
+        Long.parseLong(tokens.nextToken()); // available
+        Integer.parseInt(tokens.nextToken()); // pct used

INS23 INS29 INS83 MOV83 UPD83 MOV83 INS43 MOV59 INS29 INS29 INS29 INS29 INS29 INS29 INS8 INS29 UPD66 INS66 UPD66 INS65 INS42 UPD42 INS21 INS65 INS65 INS65 INS41 INS65 INS41 INS65 INS41 INS65 INS60 INS60 MOV41 INS65 MOV21 MOV21 INS66 INS7 INS66 INS66 INS66 INS32 INS66 INS27 INS66 INS32 INS66 INS39 INS59 INS39 INS59 INS11 INS66 INS22 INS14 UPD42 MOV42 INS42 INS32 INS32 UPD42 MOV42 INS42 INS42 INS11 INS42 INS36 INS39 INS36 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS52 INS42 INS43 INS22 UPD42 MOV42 INS42 INS42 INS42 INS39 INS32 INS27 INS27 INS42 INS52 INS42 UPD42 MOV42 INS42 INS11 INS27 INS42 INS32 INS39 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 DEL39 DEL42 DEL59 DEL23 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL23 DEL42 DEL43 DEL32 DEL21 DEL42 DEL41 DEL42 DEL43 DEL32 DEL21 DEL42 DEL41 DEL42 DEL43 DEL32 DEL21 DEL42 DEL41 DEL42 DEL42 DEL43 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL34 DEL27 DEL7 DEL52 DEL42 DEL22 DEL34 DEL27 DEL7 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL34 DEL27 DEL7 DEL52 DEL42 DEL22 DEL34 DEL27 DEL7 DEL52 DEL42 DEL22 DEL34 DEL27 DEL7 DEL52 DEL42 DEL22 DEL7