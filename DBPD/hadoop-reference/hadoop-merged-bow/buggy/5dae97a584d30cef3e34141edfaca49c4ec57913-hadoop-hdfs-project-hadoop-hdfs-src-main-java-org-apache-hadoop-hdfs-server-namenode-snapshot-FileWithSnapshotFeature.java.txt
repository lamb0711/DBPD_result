HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)

+import org.apache.hadoop.hdfs.server.blockmanagement.BlockStoragePolicySuite;
-import org.apache.hadoop.hdfs.server.namenode.Quota;
+import org.apache.hadoop.hdfs.server.namenode.QuotaCounts;
+import org.apache.hadoop.hdfs.StorageType;
+import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
+import org.apache.hadoop.hdfs.util.EnumCounters;
-  public Quota.Counts cleanFile(final INodeFile file, final int snapshotId,
+  public QuotaCounts cleanFile(final BlockStoragePolicySuite bsps,
+      final INodeFile file, final int snapshotId,
-      collectBlocksAndClear(file, collectedBlocks, removedINodes);
-      return Quota.Counts.newInstance();
+      collectBlocksAndClear(bsps, file, collectedBlocks, removedINodes);
+      return new QuotaCounts.Builder().build();
-      return diffs.deleteSnapshotDiff(snapshotId, priorSnapshotId, file,
+      return diffs.deleteSnapshotDiff(bsps, snapshotId, priorSnapshotId, file,
-  public Quota.Counts updateQuotaAndCollectBlocks(INodeFile file,
+  public QuotaCounts updateQuotaAndCollectBlocks(BlockStoragePolicySuite bsps, INodeFile file,
+
+    byte storagePolicyID = file.getStoragePolicyID();
+    BlockStoragePolicy bsp = null;
+    EnumCounters<StorageType> typeSpaces =
+        new EnumCounters<StorageType>(StorageType.class);
+    if (storagePolicyID != BlockStoragePolicySuite.ID_UNSPECIFIED) {
+      bsp = bsps.getPolicy(file.getStoragePolicyID());
+    }
+
-        oldDiskspace = file.computeFileSize(true, true) * replication;
-      } else if (replication > currentRepl) {  
-        oldDiskspace = oldDiskspace / file.getBlockReplication() * replication;
+        long oldFileSizeNoRep = file.computeFileSize(true, true);
+        oldDiskspace =  oldFileSizeNoRep * replication;
+
+        if (bsp != null) {
+          List<StorageType> oldTypeChosen = bsp.chooseStorageTypes(replication);
+          for (StorageType t : oldTypeChosen) {
+            if (t.supportTypeQuota()) {
+              typeSpaces.add(t, -oldFileSizeNoRep);
+            }
+          }
+        }
+      } else if (replication > currentRepl) {
+        long oldFileSizeNoRep = file.diskspaceConsumedNoReplication();
+        oldDiskspace = oldFileSizeNoRep * replication;
+
+        if (bsp != null) {
+          List<StorageType> oldTypeChosen = bsp.chooseStorageTypes(replication);
+          for (StorageType t : oldTypeChosen) {
+            if (t.supportTypeQuota()) {
+              typeSpaces.add(t, -oldFileSizeNoRep);
+            }
+          }
+          List<StorageType> newTypeChosen = bsp.chooseStorageTypes(currentRepl);
+          for (StorageType t: newTypeChosen) {
+            if (t.supportTypeQuota()) {
+              typeSpaces.add(t, oldFileSizeNoRep);
+            }
+          }
+        }
-        file, removed, collectedBlocks, removedINodes);
+        bsps, file, removed, collectedBlocks, removedINodes);
-    return Quota.Counts.newInstance(0, dsDelta);
+    return new QuotaCounts.Builder().
+        spaceCount(dsDelta).
+        typeCounts(typeSpaces).
+        build();
-  public void collectBlocksAndClear(final INodeFile file,
+  public void collectBlocksAndClear(final BlockStoragePolicySuite bsps, final INodeFile file,
-      file.destroyAndCollectBlocks(info, removedINodes);
+      file.destroyAndCollectBlocks(bsps, info, removedINodes);

INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 UPD43 INS44 UPD43 INS44 INS44 INS42 INS83 INS43 INS42 INS42 INS43 INS42 INS60 INS60 INS60 INS25 INS83 INS43 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS43 INS42 INS14 INS42 INS40 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS57 INS7 INS32 INS42 INS42 INS42 INS14 UPD42 INS42 INS43 INS43 INS43 INS42 INS32 INS60 INS25 INS14 UPD42 MOV42 MOV42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS27 INS8 INS60 INS25 INS43 INS40 INS42 INS42 INS42 MOV32 INS42 INS33 INS60 INS70 INS39 INS59 INS27 INS8 INS40 INS42 INS74 INS59 INS44 INS42 INS8 INS42 INS32 INS42 INS33 INS60 INS70 INS60 INS70 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 UPD42 MOV42 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS42 INS38 INS32 INS32 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL40 DEL42 DEL42 DEL32 DEL27 DEL40 DEL34 DEL32