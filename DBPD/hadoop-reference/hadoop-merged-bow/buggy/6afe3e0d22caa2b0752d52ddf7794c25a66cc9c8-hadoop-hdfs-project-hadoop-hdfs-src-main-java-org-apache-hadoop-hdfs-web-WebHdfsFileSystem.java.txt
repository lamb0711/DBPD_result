HDFS-2527. WebHdfs: remove the use of "Range" header in Open; use ugi username if renewer parameter is null in GetDelegationToken; response OK when setting replication for non-files; rename GETFILEBLOCKLOCATIONS to GET_BLOCK_LOCATIONS and state that it is a private unstable API; replace isDirectory and isSymlink with enum {FILE, DIRECTORY, SYMLINK} in HdfsFileStatus JSON object. 


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1197329 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.MalformedURLException;
+import java.util.StringTokenizer;
-import org.apache.hadoop.hdfs.web.resources.TokenArgumentParam;
+import org.apache.hadoop.hdfs.web.resources.TokenArgumentParam;
-        f.getBlockSize(), f.getModificationTime(),
-        f.getAccessTime(),
+        f.getBlockSize(), f.getModificationTime(), f.getAccessTime(),
+        f.isSymlink() ? new Path(f.getSymlink()) : null,
-    ByteRangeInputStream str = getByteRangeInputStream(url);
-    return new FSDataInputStream(str);
+    return new FSDataInputStream(new OffsetUrlInputStream(
+        new OffsetUrlOpener(url), new OffsetUrlOpener(null)));
-  private class URLOpener extends ByteRangeInputStream.URLOpener {
-
-    public URLOpener(URL u) {
-      super(u);
+  class OffsetUrlOpener extends ByteRangeInputStream.URLOpener {
+    /** The url with offset parameter */
+    private URL offsetUrl;
+  
+    OffsetUrlOpener(final URL url) {
+      super(url);
+    /** Open connection with offset url. */
-    public HttpURLConnection openConnection() throws IOException {
+    protected HttpURLConnection openConnection() throws IOException {
+
+    /** Setup offset url before open connection. */
+    @Override
+    protected HttpURLConnection openConnection(final long offset) throws IOException {
+      offsetUrl = offset == 0L? url: new URL(url + "&" + new OffsetParam(offset));
+      final HttpURLConnection conn = openConnection();
+      conn.setRequestMethod("GET");
+      return conn;
+    }  
-  
-  private ByteRangeInputStream getByteRangeInputStream(URL url) {
-    return new ByteRangeInputStream(new URLOpener(url), new URLOpener(null));
+
+  private static final String OFFSET_PARAM_PREFIX = OffsetParam.NAME + "=";
+
+  /** Remove offset parameter, if there is any, from the url */
+  static URL removeOffsetParam(final URL url) throws MalformedURLException {
+    String query = url.getQuery();
+    if (query == null) {
+      return url;
+    }
+    final String lower = query.toLowerCase();
+    if (!lower.startsWith(OFFSET_PARAM_PREFIX)
+        && !lower.contains("&" + OFFSET_PARAM_PREFIX)) {
+      return url;
+    }
+
+    //rebuild query
+    StringBuilder b = null;
+    for(final StringTokenizer st = new StringTokenizer(query, "&");
+        st.hasMoreTokens();) {
+      final String token = st.nextToken();
+      if (!token.toLowerCase().startsWith(OFFSET_PARAM_PREFIX)) {
+        if (b == null) {
+          b = new StringBuilder("?").append(token);
+        } else {
+          b.append('&').append(token);
+        }
+      }
+    }
+    query = b == null? "": b.toString();
+
+    final String urlStr = url.toString();
+    return new URL(urlStr.substring(0, urlStr.indexOf('?')) + query);
+  }
+
+  static class OffsetUrlInputStream extends ByteRangeInputStream {
+    OffsetUrlInputStream(URLOpener o, URLOpener r) {
+      super(o, r);
+    }
+    
+    @Override
+    protected void checkResponseCode(final HttpURLConnection connection
+        ) throws IOException {
+      validateResponse(GetOpParam.Op.OPEN, connection);
+    }
+
+    /** Remove offset parameter before returning the resolved url. */
+    @Override
+    protected URL getResolvedUrl(final HttpURLConnection connection
+        ) throws MalformedURLException {
+      return removeOffsetParam(connection.getURL());
+    }
-    final HttpOpParam.Op op = GetOpParam.Op.GETFILEBLOCKLOCATIONS;
+    final HttpOpParam.Op op = GetOpParam.Op.GET_BLOCK_LOCATIONS;

MOV26 INS26 INS26 INS40 INS40 INS23 INS31 INS55 INS42 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 UPD42 MOV42 MOV44 INS43 MOV8 INS83 INS42 MOV43 INS31 INS31 INS31 INS41 INS29 INS83 INS43 INS59 UPD42 INS29 UPD83 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS27 INS65 INS42 INS83 INS43 INS42 INS60 INS25 INS60 INS25 INS60 INS24 INS21 INS60 INS41 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS14 INS65 INS42 INS42 INS83 INS43 UPD42 INS65 INS65 INS42 INS42 INS83 INS39 INS42 INS42 INS21 INS60 INS21 INS41 INS40 INS45 INS66 INS42 INS43 INS59 INS27 INS8 INS83 INS43 INS59 INS27 INS8 INS43 INS59 INS58 INS32 INS8 INS7 INS83 INS43 INS59 INS14 MOV43 INS42 MOV43 INS42 INS46 INS42 INS83 INS43 INS42 INS42 INS21 INS65 INS42 INS42 INS83 INS43 INS42 INS42 INS41 INS16 MOV43 INS14 INS66 INS42 UPD42 INS66 INS66 INS7 INS83 INS43 INS59 INS32 INS42 UPD42 MOV42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS38 INS38 INS41 INS42 INS42 INS33 INS83 INS43 INS59 INS42 INS42 INS60 INS25 INS42 INS16 INS42 INS42 INS32 MOV43 INS27 INS42 INS42 INS42 INS32 INS66 INS42 INS32 UPD40 INS32 INS14 INS33 INS43 INS14 INS14 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS14 INS83 INS43 INS59 INS38 INS8 INS27 INS45 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS43 INS32 UPD42 MOV42 INS43 INS42 INS43 INS33 INS27 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS45 INS42 INS42 INS32 INS32 INS25 INS42 INS33 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 MOV43 INS27 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS8 INS8 INS42 INS42 INS13 INS42 INS45 INS14 INS42 INS42 INS42 INS33 INS21 INS21 INS43 INS42 INS7 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS13 INS43 INS45 INS42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL14 DEL41 DEL83 DEL42 DEL83 DEL43 DEL42 DEL14 DEL33 DEL14 DEL14 DEL41 DEL83 DEL31