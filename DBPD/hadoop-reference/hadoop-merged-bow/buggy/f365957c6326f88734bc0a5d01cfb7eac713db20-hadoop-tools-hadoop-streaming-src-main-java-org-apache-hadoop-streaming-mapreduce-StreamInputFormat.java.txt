HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();
S3A to implement S3 Select through this API.

The new openFile() API is asynchronous, and implemented across FileSystem and FileContext.

The MapReduce V2 inputs are moved to this API, and you can actually set must/may
options to pass in.

This is more useful for setting things like s3a seek policy than for S3 select,
as the existing input format/record readers can't handle S3 select output where
the stream is shorter than the file length, and splitting plain text is suboptimal.
Future work is needed there.

In the meantime, any/all filesystem connectors are now free to add their own filesystem-specific
configuration parameters which can be set in jobs and used to set filesystem input stream
options (seek policy, retry, encryption secrets, etc).

Contributed by Steve Loughran

+import org.apache.hadoop.fs.FutureDataInputStreamBuilder;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.impl.FutureIOSupport;
+import org.apache.hadoop.mapreduce.MRJobConfig;
-    FileSystem fs = split.getPath().getFileSystem(conf);
-    FSDataInputStream in = fs.open(split.getPath());
+    Path path = split.getPath();
+    FileSystem fs = path.getFileSystem(conf);
+    // open the file
+    final FutureDataInputStreamBuilder builder = fs.openFile(path);
+    FutureIOSupport.propagateOptions(builder, conf,
+        MRJobConfig.INPUT_FILE_OPTION_PREFIX,
+        MRJobConfig.INPUT_FILE_MANDATORY_PREFIX);
+    FSDataInputStream in = FutureIOSupport.awaitFuture(builder.build());

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 MOV60 INS60 INS21 INS60 INS43 INS83 INS43 INS59 INS32 MOV43 INS59 INS42 UPD42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL32