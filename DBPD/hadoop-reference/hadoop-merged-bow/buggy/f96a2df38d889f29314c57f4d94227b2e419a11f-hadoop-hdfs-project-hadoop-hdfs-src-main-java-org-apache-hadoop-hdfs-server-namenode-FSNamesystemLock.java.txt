HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.

+import org.apache.hadoop.ipc.Server;
+import static org.apache.hadoop.ipc.ProcessingDetails.Timing;
-    coarseLock.readLock().lock();
-    if (coarseLock.getReadHoldCount() == 1) {
-      readLockHeldTimeStampNanos.set(timer.monotonicNowNanos());
-    }
+    doLock(false);
-    coarseLock.readLock().lockInterruptibly();
-    if (coarseLock.getReadHoldCount() == 1) {
-      readLockHeldTimeStampNanos.set(timer.monotonicNowNanos());
-    }
+    doLockInterruptibly(false);
-    coarseLock.writeLock().lock();
-    if (coarseLock.getWriteHoldCount() == 1) {
-      writeLockHeldTimeStampNanos = timer.monotonicNowNanos();
-    }
+    doLock(true);
-    coarseLock.writeLock().lockInterruptibly();
-    if (coarseLock.getWriteHoldCount() == 1) {
-      writeLockHeldTimeStampNanos = timer.monotonicNowNanos();
-    }
+    doLockInterruptibly(true);
+    updateProcessingDetails(
+        isWrite ? Timing.LOCKEXCLUSIVE : Timing.LOCKSHARED, value);
+  }
+
+  private void doLock(boolean isWrite) {
+    long startNanos = timer.monotonicNowNanos();
+    if (isWrite) {
+      coarseLock.writeLock().lock();
+    } else {
+      coarseLock.readLock().lock();
+    }
+    updateLockWait(startNanos, isWrite);
+  }
+
+  private void doLockInterruptibly(boolean isWrite)
+      throws InterruptedException {
+    long startNanos = timer.monotonicNowNanos();
+    if (isWrite) {
+      coarseLock.writeLock().lockInterruptibly();
+    } else {
+      coarseLock.readLock().lockInterruptibly();
+    }
+    updateLockWait(startNanos, isWrite);
+  }
+
+  private void updateLockWait(long startNanos, boolean isWrite) {
+    long now = timer.monotonicNowNanos();
+    updateProcessingDetails(Timing.LOCKWAIT, now - startNanos);
+    if (isWrite) {
+      if (coarseLock.getWriteHoldCount() == 1) {
+        writeLockHeldTimeStampNanos = now;
+      }
+    } else {
+      if (coarseLock.getReadHoldCount() == 1) {
+        readLockHeldTimeStampNanos.set(now);
+      }
+    }
+  }
+
+  private static void updateProcessingDetails(Timing type, long deltaNanos) {
+    Server.Call call = Server.getCurCall().get();
+    if (call != null) {
+      call.getProcessingDetails().add(type, deltaNanos, TimeUnit.NANOSECONDS);
+    }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS8 INS8 INS8 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS21 INS21 INS21 INS42 INS21 INS21 INS39 INS42 INS60 INS25 INS21 INS39 INS42 INS60 INS25 INS21 INS39 INS42 INS39 INS42 INS60 INS21 INS25 INS43 INS42 INS39 INS42 INS60 INS25 INS32 INS32 INS32 INS32 INS32 INS39 INS59 INS42 MOV8 MOV8 INS32 INS39 INS59 INS42 MOV8 MOV8 INS32 INS39 INS59 INS32 INS42 INS8 INS8 INS42 INS43 INS59 INS27 INS8 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS16 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 MOV32 INS42 INS40 INS27 INS25 INS25 INS40 INS42 INS32 INS42 INS33 INS21 INS42 INS40 INS40 INS42 INS42 MOV27 INS8 MOV27 INS8 INS32 INS42 INS32 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25