HADOOP-10048. LocalDirAllocator should avoid holding locks while accessing the filesystem. Contributed by Jason Lowe.

+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
-
-    private int dirNumLastAccessed;
-    private FileSystem localFS;
-    private DF[] dirDF = new DF[0];
-    private String[] localDirs = new String[0];
-    private String savedLocalDirs = "";
+
+    // NOTE: the context must be accessed via a local reference as it
+    //       may be updated at any time to reference a different context
+    private AtomicReference<Context> currentContext;
+
+    private static class Context {
+      private AtomicInteger dirNumLastAccessed = new AtomicInteger(0);
+      private FileSystem localFS;
+      private DF[] dirDF;
+      private Path[] localDirs;
+      private String savedLocalDirs;
+
+      public int getAndIncrDirNumLastAccessed() {
+        return getAndIncrDirNumLastAccessed(1);
+      }
+
+      public int getAndIncrDirNumLastAccessed(int delta) {
+        if (localDirs.length < 2 || delta == 0) {
+          return dirNumLastAccessed.get();
+        }
+        int oldval, newval;
+        do {
+          oldval = dirNumLastAccessed.get();
+          newval = (oldval + delta) % localDirs.length;
+        } while (!dirNumLastAccessed.compareAndSet(oldval, newval));
+        return oldval;
+      }
+    }
+      this.currentContext = new AtomicReference<Context>(new Context());
-    private synchronized void confChanged(Configuration conf) 
+    private Context confChanged(Configuration conf)
+      Context ctx = currentContext.get();
-      if (!newLocalDirs.equals(savedLocalDirs)) {
-        localDirs = StringUtils.getTrimmedStrings(newLocalDirs);
-        localFS = FileSystem.getLocal(conf);
-        int numDirs = localDirs.length;
-        ArrayList<String> dirs = new ArrayList<String>(numDirs);
+      if (!newLocalDirs.equals(ctx.savedLocalDirs)) {
+        ctx = new Context();
+        String[] dirStrings = StringUtils.getTrimmedStrings(newLocalDirs);
+        ctx.localFS = FileSystem.getLocal(conf);
+        int numDirs = dirStrings.length;
+        ArrayList<Path> dirs = new ArrayList<Path>(numDirs);
-            Path tmpDir = new Path(localDirs[i]);
-            if(localFS.mkdirs(tmpDir)|| localFS.exists(tmpDir)) {
+            Path tmpDir = new Path(dirStrings[i]);
+            if(ctx.localFS.mkdirs(tmpDir)|| ctx.localFS.exists(tmpDir)) {
-
-                  ? new File(localFS.makeQualified(tmpDir).toUri())
-                  : new File(localDirs[i]);
+                    ? new File(ctx.localFS.makeQualified(tmpDir).toUri())
+                    : new File(dirStrings[i]);
-                dirs.add(tmpFile.getPath());
+                dirs.add(new Path(tmpFile.getPath()));
-
-                LOG.warn( localDirs[i] + " is not writable\n", de);
+                LOG.warn(dirStrings[i] + " is not writable\n", de);
-              LOG.warn( "Failed to create " + localDirs[i]);
+              LOG.warn("Failed to create " + dirStrings[i]);
-            LOG.warn( "Failed to create " + localDirs[i] + ": " +
+            LOG.warn("Failed to create " + dirStrings[i] + ": " +
-        localDirs = dirs.toArray(new String[dirs.size()]);
-        dirDF = dfList.toArray(new DF[dirs.size()]);
-        savedLocalDirs = newLocalDirs;
-        
+        ctx.localDirs = dirs.toArray(new Path[dirs.size()]);
+        ctx.dirDF = dfList.toArray(new DF[dirs.size()]);
+        ctx.savedLocalDirs = newLocalDirs;
+
-          dirNumLastAccessed = dirIndexRandomizer.nextInt(dirs.size());
+          ctx.dirNumLastAccessed.set(dirIndexRandomizer.nextInt(dirs.size()));
+
+        currentContext.set(ctx);
+
+      return ctx;
-    private Path createPath(String path, 
+    private Path createPath(Path dir, String path,
-      Path file = new Path(new Path(localDirs[dirNumLastAccessed]),
-                                    path);
+      Path file = new Path(dir, path);
-      return dirNumLastAccessed;
+      return currentContext.get().dirNumLastAccessed.get();
-    public synchronized Path getLocalPathForWrite(String pathStr, long size, 
+    public Path getLocalPathForWrite(String pathStr, long size,
-      confChanged(conf);
-      int numDirs = localDirs.length;
+      Context ctx = confChanged(conf);
+      int numDirs = ctx.localDirs.length;
-        long[] availableOnDisk = new long[dirDF.length];
+        long[] availableOnDisk = new long[ctx.dirDF.length];
-        for(int i =0; i < dirDF.length; ++i) {
-          availableOnDisk[i] = dirDF[i].getAvailable();
+        for(int i =0; i < ctx.dirDF.length; ++i) {
+          availableOnDisk[i] = ctx.dirDF[i].getAvailable();
-          dirNumLastAccessed = dir;
-          returnPath = createPath(pathStr, checkWrite);
+          ctx.dirNumLastAccessed.set(dir);
+          returnPath = createPath(ctx.localDirs[dir], pathStr, checkWrite);
-        while (numDirsSearched < numDirs && returnPath == null) {
-          long capacity = dirDF[dirNumLastAccessed].getAvailable();
+        int dirNum = ctx.getAndIncrDirNumLastAccessed();
+        while (numDirsSearched < numDirs) {
+          long capacity = ctx.dirDF[dirNum].getAvailable();
-            returnPath = createPath(pathStr, checkWrite);
+            returnPath =
+                createPath(ctx.localDirs[dirNum], pathStr, checkWrite);
+            if (returnPath != null) {
+              ctx.getAndIncrDirNumLastAccessed(numDirsSearched);
+              break;
+            }
-          dirNumLastAccessed++;
-          dirNumLastAccessed = dirNumLastAccessed % numDirs; 
+          dirNum++;
+          dirNum = dirNum % numDirs;
-        } 
+        }
-    public synchronized Path getLocalPathToRead(String pathStr, 
+    public Path getLocalPathToRead(String pathStr,
-      confChanged(conf);
-      int numDirs = localDirs.length;
+      Context ctx = confChanged(conf);
+      int numDirs = ctx.localDirs.length;
-        Path file = new Path(localDirs[numDirsSearched], pathStr);
-        if (localFS.exists(file)) {
+        Path file = new Path(ctx.localDirs[numDirsSearched], pathStr);
+        if (ctx.localFS.exists(file)) {
-      private final String[] rootDirs;
+      private final Path[] rootDirs;
-      private PathIterator(FileSystem fs, String pathStr, String[] rootDirs)
+      private PathIterator(FileSystem fs, String pathStr, Path[] rootDirs)
-    synchronized Iterable<Path> getAllLocalPathsToRead(String pathStr,
+    Iterable<Path> getAllLocalPathsToRead(String pathStr,
-      confChanged(conf);
+      Context ctx = confChanged(conf);
-      return new PathIterator(localFS, pathStr, localDirs);
+      return new PathIterator(ctx.localFS, pathStr, ctx.localDirs);
-    public synchronized boolean ifExists(String pathStr,Configuration conf) {
+    public boolean ifExists(String pathStr, Configuration conf) {
+      Context ctx = currentContext.get();
-        int numDirs = localDirs.length;
+        int numDirs = ctx.localDirs.length;
-          Path file = new Path(localDirs[numDirsSearched], pathStr);
-          if (localFS.exists(file)) {
+          Path file = new Path(ctx.localDirs[numDirsSearched], pathStr);
+          if (ctx.localFS.exists(file)) {

INS26 INS26 INS40 INS40 MOV23 INS55 INS74 INS83 INS83 INS42 MOV23 MOV23 INS23 MOV23 MOV23 INS31 INS31 INS43 INS44 INS43 INS43 UPD42 INS43 INS83 MOV5 INS59 UPD5 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS21 INS42 INS60 INS41 INS43 INS42 INS60 INS60 UPD5 INS60 INS60 INS42 INS42 INS42 UPD42 INS14 INS42 MOV43 INS41 INS39 INS42 INS25 INS60 INS19 INS41 INS7 INS43 INS59 INS42 INS42 INS32 INS43 INS59 INS43 INS59 UPD43 UPD5 INS43 INS59 INS43 INS59 INS43 INS34 INS32 INS27 INS8 INS39 INS59 INS59 INS8 INS38 INS42 INS22 INS14 INS42 INS42 INS32 INS60 INS21 INS22 INS42 INS42 INS42 MOV32 UPD40 INS60 INS42 INS42 MOV32 UPD40 UPD42 UPD43 INS42 INS42 MOV32 INS40 INS40 INS42 INS42 INS32 UPD42 MOV42 INS42 INS34 INS27 INS27 INS41 INS42 INS42 INS21 INS21 INS32 INS52 INS42 INS74 INS14 INS42 INS42 INS40 MOV5 INS59 UPD74 MOV74 INS32 INS42 INS32 INS42 MOV5 INS39 INS59 INS27 MOV43 UPD42 INS42 INS42 INS40 INS34 INS42 INS34 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS43 INS43 INS43 UPD42 INS14 INS42 MOV32 INS40 UPD40 UPD43 INS40 INS40 INS40 INS42 INS42 INS42 INS42 INS42 UPD40 INS42 INS32 MOV42 MOV42 INS40 UPD40 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS43 UPD42 UPD74 MOV74 INS32 MOV5 UPD40 INS32 INS42 INS42 MOV43 INS42 INS42 INS36 INS40 INS42 UPD43 INS5 INS40 INS42 MOV32 INS40 INS42 INS42 INS25 UPD42 UPD42 INS40 INS40 INS27 UPD42 MOV43 MOV43 INS85 INS2 INS27 INS8 UPD42 INS42 INS42 INS40 INS40 INS42 INS40 UPD42 INS42 INS33 INS21 INS10 INS40 INS43 INS40 INS40 INS2 INS32 INS42 UPD42 INS40 INS42 INS42 INS42 INS42 UPD42 INS14 UPD42 INS43 MOV32 MOV43 MOV43 INS42 UPD42 UPD42 INS40 DEL39 DEL43 DEL85 DEL5 DEL34 DEL3 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL45 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL7 DEL42 DEL42 DEL2 DEL14 DEL42 DEL83 DEL21 DEL42 DEL42 DEL42 DEL7 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL83 DEL21 DEL42 DEL42 DEL83 DEL21 DEL42 DEL42 DEL83 DEL42 DEL42