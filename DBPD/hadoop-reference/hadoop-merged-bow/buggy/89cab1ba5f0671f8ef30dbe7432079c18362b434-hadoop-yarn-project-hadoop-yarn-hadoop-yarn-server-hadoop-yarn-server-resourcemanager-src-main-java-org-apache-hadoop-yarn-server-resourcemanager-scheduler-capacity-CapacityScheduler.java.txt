YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan

+import java.util.Arrays;
+import org.apache.hadoop.yarn.api.records.ContainerResourceChangeRequest;
+import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNodeDecreaseContainerEvent;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;
+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedContainerChangeRequest;
+  // Note: when AM asks to decrease container or release container, we will
+  // acquire scheduler lock
-      List<ResourceRequest> ask, List<ContainerId> release, 
-      List<String> blacklistAdditions, List<String> blacklistRemovals) {
+      List<ResourceRequest> ask, List<ContainerId> release,
+      List<String> blacklistAdditions, List<String> blacklistRemovals,
+      List<ContainerResourceChangeRequest> increaseRequests,
+      List<ContainerResourceChangeRequest> decreaseRequests) {
+    
+    // Pre-process increase requests
+    List<SchedContainerChangeRequest> normalizedIncreaseRequests =
+        checkAndNormalizeContainerChangeRequests(increaseRequests, true);
+    
+    // Pre-process decrease requests
+    List<SchedContainerChangeRequest> normalizedDecreaseRequests =
+        checkAndNormalizeContainerChangeRequests(decreaseRequests, false);
+      // Process resource requests
-
+      
+      // Process increase resource requests
+      if (application.updateIncreaseRequests(normalizedIncreaseRequests)
+          && (updateDemandForQueue == null)) {
+        updateDemandForQueue = (LeafQueue) application.getQueue();
+      }
+      
+      // Decrease containers
+      decreaseContainers(normalizedDecreaseRequests, application);
+    
+    // Processing the newly increased containers
+    List<Container> newlyIncreasedContainers =
+        nm.pullNewlyIncreasedContainers();
+    for (Container container : newlyIncreasedContainers) {
+      containerIncreasedOnNode(container.getId(), node, container);
+    }
+  
+  @Lock(CapacityScheduler.class)
+  @Override
+  protected synchronized void decreaseContainer(
+      SchedContainerChangeRequest decreaseRequest,
+      SchedulerApplicationAttempt attempt) {
+    RMContainer rmContainer = decreaseRequest.getRMContainer();
+
+    // Check container status before doing decrease
+    if (rmContainer.getState() != RMContainerState.RUNNING) {
+      LOG.info("Trying to decrease a container not in RUNNING state, container="
+          + rmContainer + " state=" + rmContainer.getState().name());
+      return;
+    }
+    
+    // Delta capacity of this decrease request is 0, this decrease request may
+    // just to cancel increase request
+    if (Resources.equals(decreaseRequest.getDeltaCapacity(), Resources.none())) {
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("Decrease target resource equals to existing resource for container:"
+            + decreaseRequest.getContainerId()
+            + " ignore this decrease request.");
+      }
+      return;
+    }
+
+    // Save resource before decrease
+    Resource resourceBeforeDecrease =
+        Resources.clone(rmContainer.getContainer().getResource());
+
+    FiCaSchedulerApp app = (FiCaSchedulerApp)attempt;
+    LeafQueue queue = (LeafQueue) attempt.getQueue();
+    queue.decreaseContainer(clusterResource, decreaseRequest, app);
+    
+    // Notify RMNode the container will be decreased
+    this.rmContext.getDispatcher().getEventHandler()
+        .handle(new RMNodeDecreaseContainerEvent(decreaseRequest.getNodeId(),
+            Arrays.asList(rmContainer.getContainer())));
+    
+    LOG.info("Application attempt " + app.getApplicationAttemptId()
+        + " decreased container:" + decreaseRequest.getContainerId() + " from "
+        + resourceBeforeDecrease + " to "
+        + decreaseRequest.getTargetCapacity());
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS44 INS44 INS79 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS74 INS42 INS74 INS42 INS60 INS60 INS60 INS70 INS42 INS57 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS25 INS60 INS60 INS60 INS21 INS21 INS21 INS43 INS43 INS43 INS43 INS74 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS43 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS25 INS21 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS32 INS32 INS40 INS21 INS41 INS42 INS42 INS32 INS32 INS25 INS41 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS32 INS43 INS42 INS43 INS32 INS32 INS42 INS43 INS32 INS32 INS45 INS32 INS45 INS32 INS45 INS42 INS45 INS32 INS32 INS36 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS7 INS42 INS42 INS45 INS42 INS45 INS32 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS33 INS42 INS11 INS32 INS42 INS42 INS42 INS27 INS43 INS32 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42