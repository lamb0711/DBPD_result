HADOOP-10803. Update OpensslCipher#getInstance to accept CipherSuite#name format. (yliu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609403 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.StringTokenizer;
-  public static final int AES_CTR = 0;
-  public static final int PADDING_NOPADDING = 0;
+  private static enum AlgMode {
+    AES_CTR;
+    
+    static int get(String algorithm, String mode) 
+        throws NoSuchAlgorithmException {
+      try {
+        return AlgMode.valueOf(algorithm + "_" + mode).ordinal();
+      } catch (Exception e) {
+        throw new NoSuchAlgorithmException("Doesn't support algorithm: " + 
+            algorithm + " and mode: " + mode);
+      }
+    }
+  }
+  
+  private static enum Padding {
+    NoPadding;
+    
+    static int get(String padding) throws NoSuchPaddingException {
+      try {
+        return Padding.valueOf(padding).ordinal();
+      } catch (Exception e) {
+        throw new NoSuchPaddingException("Doesn't support padding: " + padding);
+      }
+    }
+  }
-  private final int algorithm;
+  private final int alg;
-  private OpensslCipher(long context, int algorithm, int padding) {
+  private OpensslCipher(long context, int alg, int padding) {
-    this.algorithm = algorithm;
+    this.alg = alg;
-   * algorithm.
+   * transformation.
-   * @param algorithm currently only supports {@link #AES_CTR}
-   * @param padding currently only supports {@link #PADDING_NOPADDING}
-   * @return OpensslCipher an <code>OpensslCipher<code> object 
-   * @throws NoSuchAlgorithmException
-   * @throws NoSuchPaddingException
+   * @param transformation the name of the transformation, e.g., 
+   * AES/CTR/NoPadding.
+   * @return OpensslCipher an <code>OpensslCipher<code> object
+   * @throws NoSuchAlgorithmException if <code>transformation</code> is null, 
+   * empty, in an invalid format, or if Openssl doesn't implement the 
+   * specified algorithm.
+   * @throws NoSuchPaddingException if <code>transformation</code> contains 
+   * a padding scheme that is not available.
-  public static final OpensslCipher getInstance(int algorithm, 
-      int padding) throws NoSuchAlgorithmException, NoSuchPaddingException {
-    long context = initContext(algorithm, padding);
-    return new OpensslCipher(context, algorithm, padding);
+  public static final OpensslCipher getInstance(String transformation) 
+      throws NoSuchAlgorithmException, NoSuchPaddingException {
+    Transform transform = tokenizeTransformation(transformation);
+    int algMode = AlgMode.get(transform.alg, transform.mode);
+    int padding = Padding.get(transform.padding);
+    long context = initContext(algMode, padding);
+    return new OpensslCipher(context, algMode, padding);
+  }
+  
+  /** Nested class for algorithm, mode and padding. */
+  private static class Transform {
+    final String alg;
+    final String mode;
+    final String padding;
+    
+    public Transform(String alg, String mode, String padding) {
+      this.alg = alg;
+      this.mode = mode;
+      this.padding = padding;
+    }
+  }
+  
+  private static Transform tokenizeTransformation(String transformation) 
+      throws NoSuchAlgorithmException {
+    if (transformation == null) {
+      throw new NoSuchAlgorithmException("No transformation given.");
+    }
+    
+    /*
+     * Array containing the components of a Cipher transformation:
+     * 
+     * index 0: algorithm (e.g., AES)
+     * index 1: mode (e.g., CTR)
+     * index 2: padding (e.g., NoPadding)
+     */
+    String[] parts = new String[3];
+    int count = 0;
+    StringTokenizer parser = new StringTokenizer(transformation, "/");
+    while (parser.hasMoreTokens() && count < 3) {
+      parts[count++] = parser.nextToken().trim();
+    }
+    if (count != 3 || parser.hasMoreTokens()) {
+      throw new NoSuchAlgorithmException("Invalid transformation format: " + 
+          transformation);
+    }
+    return new Transform(parts[0], parts[1], parts[2]);
-    context = init(context, mode, algorithm, padding, key, iv);
+    context = init(context, mode, alg, padding, key, iv);

INS26 INS40 INS71 INS71 INS55 INS31 MOV29 INS83 INS83 INS42 INS72 INS31 INS83 INS83 INS42 INS72 INS31 INS44 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS83 INS39 INS42 INS44 INS43 INS8 UPD42 UPD42 INS43 INS42 INS60 INS60 INS60 MOV60 MOV41 INS65 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS60 INS61 INS25 INS41 INS43 INS42 INS43 INS42 INS42 INS54 INS43 INS42 INS42 INS54 UPD66 UPD42 UPD66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS42 INS43 INS59 INS39 INS59 INS39 INS59 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS27 INS8 INS5 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS27 INS8 INS14 INS42 INS42 INS8 INS12 INS42 INS8 INS12 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS33 INS53 INS43 INS85 INS42 INS3 INS42 INS34 INS42 INS42 INS14 INS32 INS27 INS21 INS27 INS32 INS53 INS43 INS2 INS2 INS2 INS41 INS44 INS8 INS41 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 UPD42 INS22 INS42 INS22 INS42 INS22 INS42 INS14 INS42 INS5 INS34 INS43 INS42 INS45 INS42 INS42 INS42 INS34 INS7 INS42 INS34 INS42 INS42 INS14 INS42 INS42 INS34 INS42 INS34 INS42 INS34 UPD42 INS32 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS45 INS43 INS85 INS42 INS2 INS32 INS43 INS27 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS37 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS43 INS27 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL67 DEL65 DEL42 DEL66 DEL42 DEL67 DEL65 DEL65 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL8