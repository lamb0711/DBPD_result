Merge HDFS-2006 HDFS XAttrs branch to Trunk


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import org.apache.hadoop.fs.XAttr;
+import org.apache.hadoop.fs.XAttrSetFlag;
+import org.apache.hadoop.hdfs.XAttrHelper;
+import com.google.common.collect.Lists;
+  private final int inodeXAttrsLimit; //inode xattrs max limit
+    this.inodeXAttrsLimit = conf.getInt(
+        DFSConfigKeys.DFS_NAMENODE_MAX_XATTRS_PER_INODE_KEY,
+        DFSConfigKeys.DFS_NAMENODE_MAX_XATTRS_PER_INODE_DEFAULT);
+    Preconditions.checkArgument(this.inodeXAttrsLimit >= 0,
+        "Cannot set a negative limit on the number of xattrs per inode (%s).",
+        DFSConfigKeys.DFS_NAMENODE_MAX_XATTRS_PER_INODE_KEY);
+  
+  void removeXAttr(String src, XAttr xAttr) throws IOException {
+    writeLock();
+    try {
+      XAttr removedXAttr = unprotectedRemoveXAttr(src, xAttr);
+      if (removedXAttr != null) {
+        fsImage.getEditLog().logRemoveXAttr(src, removedXAttr);
+      } else {
+        NameNode.stateChangeLog.info("DIR* FSDirectory.removeXAttr: XAttr " +
+        		XAttrHelper.getPrefixName(xAttr) + 
+        		" does not exist on the path " + src);
+      }
+    } finally {
+      writeUnlock();
+    }
+  }
+  
+  XAttr unprotectedRemoveXAttr(String src,
+      XAttr xAttr) throws IOException {
+    assert hasWriteLock();
+    INodesInPath iip = getINodesInPath4Write(normalizePath(src), true);
+    INode inode = resolveLastINode(src, iip);
+    int snapshotId = iip.getLatestSnapshotId();
+    List<XAttr> existingXAttrs = XAttrStorage.readINodeXAttrs(inode);
+    List<XAttr> newXAttrs = filterINodeXAttr(existingXAttrs, xAttr);
+    if (existingXAttrs.size() != newXAttrs.size()) {
+      XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);
+      return xAttr;
+    }
+    return null;
+  }
+  
+  List<XAttr> filterINodeXAttr(List<XAttr> existingXAttrs, 
+      XAttr xAttr) throws QuotaExceededException {
+    if (existingXAttrs == null || existingXAttrs.isEmpty()) {
+      return existingXAttrs;
+    }
+    
+    List<XAttr> xAttrs = Lists.newArrayListWithCapacity(existingXAttrs.size());
+    for (XAttr a : existingXAttrs) {
+      if (!(a.getNameSpace() == xAttr.getNameSpace()
+          && a.getName().equals(xAttr.getName()))) {
+        xAttrs.add(a);
+      }
+    }
+    
+    return xAttrs;
+  }
+  
+  void setXAttr(String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag,
+      boolean logRetryCache) throws IOException {
+    writeLock();
+    try {
+      unprotectedSetXAttr(src, xAttr, flag);
+      fsImage.getEditLog().logSetXAttr(src, xAttr, logRetryCache);
+    } finally {
+      writeUnlock();
+    }
+  }
+  
+  void unprotectedSetXAttr(String src, XAttr xAttr, 
+      EnumSet<XAttrSetFlag> flag) throws IOException {
+    assert hasWriteLock();
+    INodesInPath iip = getINodesInPath4Write(normalizePath(src), true);
+    INode inode = resolveLastINode(src, iip);
+    int snapshotId = iip.getLatestSnapshotId();
+    List<XAttr> existingXAttrs = XAttrStorage.readINodeXAttrs(inode);
+    List<XAttr> newXAttrs = setINodeXAttr(existingXAttrs, xAttr, flag);
+    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);
+  }
+  
+  List<XAttr> setINodeXAttr(List<XAttr> existingXAttrs, XAttr xAttr, 
+      EnumSet<XAttrSetFlag> flag) throws QuotaExceededException, IOException {
+    List<XAttr> xAttrs = Lists.newArrayListWithCapacity(
+        existingXAttrs != null ? existingXAttrs.size() + 1 : 1);
+    boolean exist = false;
+    if (existingXAttrs != null) {
+      for (XAttr a: existingXAttrs) {
+        if ((a.getNameSpace() == xAttr.getNameSpace()
+            && a.getName().equals(xAttr.getName()))) {
+          exist = true;
+        } else {
+          xAttrs.add(a);
+        }
+      }
+    }
+    
+    XAttrSetFlag.validate(xAttr.getName(), exist, flag);
+    xAttrs.add(xAttr);
+    
+    if (xAttrs.size() > inodeXAttrsLimit) {
+      throw new IOException("Cannot add additional XAttr to inode, "
+          + "would exceed limit of " + inodeXAttrsLimit);
+    }
+    
+    return xAttrs;
+  }
+  
+  List<XAttr> getXAttrs(String src) throws IOException {
+    String srcs = normalizePath(src);
+    readLock();
+    try {
+      INodesInPath iip = getLastINodeInPath(srcs, true);
+      INode inode = resolveLastINode(src, iip);
+      int snapshotId = iip.getPathSnapshotId();
+      return XAttrStorage.readINodeXAttrs(inode, snapshotId);
+    } finally {
+      readUnlock();
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS44 INS44 INS43 INS8 INS74 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS74 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS74 INS42 INS44 INS43 INS8 INS42 INS21 INS21 INS43 INS42 INS43 INS42 INS42 INS21 INS54 INS42 INS43 INS42 INS43 INS42 INS42 INS6 INS60 INS60 INS60 INS60 INS60 INS25 INS41 INS43 INS43 INS74 INS42 INS43 INS42 INS42 INS25 INS60 INS70 INS41 INS43 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS42 INS21 INS54 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS6 INS60 INS60 INS60 INS60 INS60 INS21 INS43 INS43 INS74 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS60 INS60 INS25 INS21 INS21 INS25 INS41 INS43 INS43 INS43 INS42 INS42 INS60 INS21 INS54 INS7 INS32 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS27 INS8 INS33 INS42 INS42 INS43 INS43 INS42 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS43 INS32 INS8 INS8 INS42 INS42 INS43 INS43 INS32 INS43 INS59 INS43 INS59 INS39 INS59 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS74 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS22 INS32 INS42 INS42 INS27 INS45 INS40 INS42 INS60 INS25 INS21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS32 INS21 INS41 INS42 INS42 INS27 INS32 INS41 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS9 INS42 INS33 INS70 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS53 INS42 INS42 INS32 INS42 INS60 INS60 INS60 INS41 INS21 INS52 INS42 INS42 INS42 INS40 INS40 INS22 INS34 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS8 INS32 INS32 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS32 INS52 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS34 INS43 INS42 INS25 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS32 INS42 INS42 INS42 INS33 INS32 INS34 INS42 INS36 INS8 INS8 INS42 INS45 INS45 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS27 INS27 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS21 INS21 INS42 INS42 INS45 INS32 INS45 INS42 INS32 INS32 INS32 INS42 INS32 INS27 INS32 INS7 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42