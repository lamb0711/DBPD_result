HADOOP-11157. ZKDelegationTokenSecretManager never shuts down listenerThreadPool. Contributed by Arun Suresh.

+import java.util.concurrent.TimeUnit;
+import org.apache.curator.framework.recipes.cache.ChildData;
+import org.apache.hadoop.security.token.Token;
+  public static final String ZK_DTSM_ZK_SHUTDOWN_TIMEOUT = ZK_CONF_PREFIX
+      + "zkShutdownTimeout";
+  public static final int ZK_DTSM_ZK_SHUTDOWN_TIMEOUT_DEFAULT = 10000;
+  private final long shutdownTimeout;
+    shutdownTimeout = conf.getLong(ZK_DTSM_ZK_SHUTDOWN_TIMEOUT,
+        ZK_DTSM_ZK_SHUTDOWN_TIMEOUT_DEFAULT);
-    listenerThreadPool = Executors.newFixedThreadPool(2);
+    listenerThreadPool = Executors.newSingleThreadExecutor();
-        keyCache.start(StartMode.POST_INITIALIZED_EVENT);
+        keyCache.start(StartMode.BUILD_INITIAL_CACHE);
-        tokenCache.start(StartMode.POST_INITIALIZED_EVENT);
+        tokenCache.start(StartMode.BUILD_INITIAL_CACHE);
-              processTokenAddOrUpdate(event.getData().getData());
+              processTokenAddOrUpdate(event.getData());
-              processTokenAddOrUpdate(event.getData().getData());
+              processTokenAddOrUpdate(event.getData());
-              processTokenRemoved(event.getData().getData());
+              processTokenRemoved(event.getData());
-    allKeys.put(key.getKeyId(), key);
+    synchronized (this) {
+      allKeys.put(key.getKeyId(), key);
+    }
-        allKeys.remove(keyId);
+        synchronized (this) {
+          allKeys.remove(keyId);
+        }
-  private void processTokenAddOrUpdate(byte[] data) throws IOException {
-    ByteArrayInputStream bin = new ByteArrayInputStream(data);
+  private void processTokenAddOrUpdate(ChildData data) throws IOException {
+    ByteArrayInputStream bin = new ByteArrayInputStream(data.getData());
-      currentTokens.put(ident, tokenInfo);
+      synchronized (this) {
+        currentTokens.put(ident, tokenInfo);
+        // The cancel task might be waiting
+        notifyAll();
+      }
-  private void processTokenRemoved(byte[] data) throws IOException {
-    ByteArrayInputStream bin = new ByteArrayInputStream(data);
+  private void processTokenRemoved(ChildData data) throws IOException {
+    ByteArrayInputStream bin = new ByteArrayInputStream(data.getData());
-    currentTokens.remove(ident);
+    synchronized (this) {
+      currentTokens.remove(ident);
+      // The cancel task might be waiting
+      notifyAll();
+    }
+    super.stopThreads();
-      if (!isExternalClient && (zkClient != null)) {
-        zkClient.close();
-      }
-      if (delTokSeqCounter != null) {
-        delTokSeqCounter.close();
-      }
-      if (keyIdSeqCounter != null) {
-        keyIdSeqCounter.close();
-      }
-      if (keyCache != null) {
-        keyCache.close();
-      }
-      LOG.error("Could not stop Curator Framework", e);
-      // Ignore
+      LOG.error("Could not stop Delegation Token Cache", e);
-    super.stopThreads();
+    try {
+      if (delTokSeqCounter != null) {
+        delTokSeqCounter.close();
+      }
+    } catch (Exception e) {
+      LOG.error("Could not stop Delegation Token Counter", e);
+    }
+    try {
+      if (keyIdSeqCounter != null) {
+        keyIdSeqCounter.close();
+      }
+    } catch (Exception e) {
+      LOG.error("Could not stop Key Id Counter", e);
+    }
+    try {
+      if (keyCache != null) {
+        keyCache.close();
+      }
+    } catch (Exception e) {
+      LOG.error("Could not stop KeyCache", e);
+    }
+    try {
+      if (!isExternalClient && (zkClient != null)) {
+        zkClient.close();
+      }
+    } catch (Exception e) {
+      LOG.error("Could not stop Curator Framework", e);
+    }
+    if (listenerThreadPool != null) {
+      listenerThreadPool.shutdown();
+      try {
+        // wait for existing tasks to terminate
+        if (!listenerThreadPool.awaitTermination(shutdownTimeout,
+            TimeUnit.MILLISECONDS)) {
+          LOG.error("Forcing Listener threadPool to shutdown !!");
+          listenerThreadPool.shutdownNow();
+        }
+      } catch (InterruptedException ie) {
+        listenerThreadPool.shutdownNow();
+        Thread.currentThread().interrupt();
+      }
+    }
+    } catch (InterruptedException e) {
+      // The ExpirationThread is just finishing.. so dont do anything..
+      LOG.debug("Thread interrupted while performing token counter increment", e);
+      Thread.currentThread().interrupt();
+    } catch (InterruptedException e) {
+      // The ExpirationThread is just finishing.. so dont do anything..
+      LOG.debug("Thread interrupted while performing keyId increment", e);
+      Thread.currentThread().interrupt();
-    allKeys.put(key.getKeyId(), key);
-    allKeys.put(key.getKeyId(), key);
-    currentTokens.put(ident, tokenInfo);
-    currentTokens.put(ident, tokenInfo);
+  @Override
+  public synchronized TokenIdent cancelToken(Token<TokenIdent> token,
+      String canceller) throws IOException {
+    ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());
+    DataInputStream in = new DataInputStream(buf);
+    TokenIdent id = createIdentifier();
+    id.readFields(in);
+    try {
+      if (!currentTokens.containsKey(id)) {
+        // See if token can be retrieved and placed in currentTokens
+        getTokenInfo(id);
+      }
+      return super.cancelToken(token, canceller);
+    } catch (Exception e) {
+      LOG.error("Exception while checking if token exist !!", e);
+      return id;
+    }
+  }
+
+
+  @VisibleForTesting
+  public ExecutorService getListenerThreadPool() {
+    return listenerThreadPool;
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 MOV25 MOV54 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS27 INS42 INS34 INS42 INS21 INS51 INS43 INS43 INS51 INS54 INS54 INS54 INS54 INS25 INS42 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS54 INS42 INS42 INS41 INS42 INS45 INS7 INS52 INS8 INS42 INS42 INS52 INS8 INS8 INS12 INS8 INS12 INS8 INS12 INS8 INS12 INS27 INS8 INS12 INS12 INS43 INS43 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS12 INS42 UPD42 INS42 INS32 MOV21 INS51 MOV21 INS21 MOV25 INS44 INS8 MOV25 INS44 INS8 MOV25 INS44 INS8 MOV25 INS44 INS8 INS42 INS33 INS21 INS54 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS25 INS41 INS44 INS8 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS52 INS8 INS32 INS32 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS32 INS8 INS12 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS21 INS43 INS32 INS43 INS42 INS42 INS38 INS8 INS48 INS43 INS42 INS21 INS41 MOV42 MOV32 INS51 INS42 INS42 MOV21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS25 INS44 INS8 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS52 INS8 MOV32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS38 INS8 INS43 INS42 INS21 INS21 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 UPD40 UPD40 MOV21 MOV42 MOV42 INS42 INS32 INS21 INS21 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 MOV21 MOV21 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 UPD42 UPD42 UPD42 DEL34 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21