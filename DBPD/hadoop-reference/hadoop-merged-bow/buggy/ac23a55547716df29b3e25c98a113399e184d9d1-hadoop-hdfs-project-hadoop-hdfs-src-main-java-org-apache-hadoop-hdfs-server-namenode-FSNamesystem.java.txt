Merge HDFS-2006 HDFS XAttrs branch to Trunk


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.XAttr;
+import org.apache.hadoop.fs.XAttrSetFlag;
-  private final AclConfigFlag aclConfigFlag;
+  private final NNConf nnConf;
-      this.aclConfigFlag = new AclConfigFlag(conf);
+      this.nnConf = new NNConf(conf);
-      cacheManager.stopMonitorThread();
-      cacheManager.clearDirectiveStats();
+      if (cacheManager != null) {
+        cacheManager.stopMonitorThread();
+        cacheManager.clearDirectiveStats();
+      }
-    aclConfigFlag.checkForApiCall();
+    nnConf.checkAclsConfigFlag();
-    aclConfigFlag.checkForApiCall();
+    nnConf.checkAclsConfigFlag();
-    aclConfigFlag.checkForApiCall();
+    nnConf.checkAclsConfigFlag();
-    aclConfigFlag.checkForApiCall();
+    nnConf.checkAclsConfigFlag();
-    aclConfigFlag.checkForApiCall();
+    nnConf.checkAclsConfigFlag();
-    aclConfigFlag.checkForApiCall();
+    nnConf.checkAclsConfigFlag();
+  
+  /**
+   * Set xattr for a file or directory.
+   * 
+   * @param src
+   *          - path on which it sets the xattr
+   * @param xAttr
+   *          - xAttr details to set
+   * @param flag
+   *          - xAttrs flags
+   * @throws AccessControlException
+   * @throws SafeModeException
+   * @throws UnresolvedLinkException
+   * @throws IOException
+   */
+  void setXAttr(String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag)
+      throws AccessControlException, SafeModeException,
+      UnresolvedLinkException, IOException {
+    CacheEntry cacheEntry = RetryCache.waitForCompletion(retryCache);
+    if (cacheEntry != null && cacheEntry.isSuccess()) {
+      return; // Return previous response
+    }
+    boolean success = false;
+    try {
+      setXAttrInt(src, xAttr, flag, cacheEntry != null);
+      success = true;
+    } catch (AccessControlException e) {
+      logAuditEvent(false, "setXAttr", src);
+      throw e;
+    } finally {
+      RetryCache.setState(cacheEntry, success);
+    }
+  }
+  
+  private void setXAttrInt(String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag,
+      boolean logRetryCache) throws IOException {
+    nnConf.checkXAttrsConfigFlag();
+    checkXAttrSize(xAttr);
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr);
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot set XAttr on " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      if (isPermissionEnabled) {
+        checkOwner(pc, src);
+        checkPathAccess(pc, src, FsAction.WRITE);
+      }
+      dir.setXAttr(src, xAttr, flag, logRetryCache);
+      resultingStat = getAuditFileInfo(src, false);
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "setXAttr", src, null, resultingStat);
+  }
+
+  /**
+   * Verifies that the combined size of the name and value of an xattr is within
+   * the configured limit. Setting a limit of zero disables this check.
+   */
+  private void checkXAttrSize(XAttr xAttr) {
+    if (nnConf.xattrMaxSize == 0) {
+      return;
+    }
+    int size = xAttr.getName().getBytes(Charsets.UTF_8).length;
+    if (xAttr.getValue() != null) {
+      size += xAttr.getValue().length;
+    }
+    if (size > nnConf.xattrMaxSize) {
+      throw new HadoopIllegalArgumentException(
+          "The XAttr is too big. The maximum combined size of the"
+          + " name and value is " + nnConf.xattrMaxSize
+          + ", but the total size is " + size);
+    }
+  }
+  
+  List<XAttr> getXAttrs(String src, List<XAttr> xAttrs) throws IOException {
+    nnConf.checkXAttrsConfigFlag();
+    FSPermissionChecker pc = getPermissionChecker();
+    boolean getAll = xAttrs == null || xAttrs.isEmpty();
+    List<XAttr> filteredXAttrs = null;
+    if (!getAll) {
+      filteredXAttrs = XAttrPermissionFilter.filterXAttrsForApi(pc, xAttrs);
+      if (filteredXAttrs.isEmpty()) {
+        return filteredXAttrs;
+      }
+    }
+    checkOperation(OperationCategory.READ);
+    readLock();
+    try {
+      checkOperation(OperationCategory.READ);
+      if (isPermissionEnabled) {
+        checkPathAccess(pc, src, FsAction.READ);
+      }
+      List<XAttr> all = dir.getXAttrs(src);
+      List<XAttr> filteredAll = XAttrPermissionFilter.
+          filterXAttrsForApi(pc, all);
+      if (getAll) {
+        return filteredAll;
+      } else {
+        if (filteredAll == null || filteredAll.isEmpty()) {
+          return null;
+        }
+        List<XAttr> toGet = Lists.newArrayListWithCapacity(filteredXAttrs.size());
+        for (XAttr xAttr : filteredXAttrs) {
+          for (XAttr a : filteredAll) {
+            if (xAttr.getNameSpace() == a.getNameSpace()
+                && xAttr.getName().equals(a.getName())) {
+              toGet.add(a);
+              break;
+            }
+          }
+        }
+        return toGet;
+      }
+    } catch (AccessControlException e) {
+      logAuditEvent(false, "getXAttrs", src);
+      throw e;
+    } finally {
+      readUnlock();
+    }
+  }
+  
+  void removeXAttr(String src, XAttr xAttr) throws IOException {
+    nnConf.checkXAttrsConfigFlag();
+    HdfsFileStatus resultingStat = null;
+    FSPermissionChecker pc = getPermissionChecker();
+    try {
+      XAttrPermissionFilter.checkPermissionForApi(pc, xAttr);
+    } catch (AccessControlException e) {
+      logAuditEvent(false, "removeXAttr", src);
+      throw e;
+    }
+    checkOperation(OperationCategory.WRITE);
+    byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src);
+    writeLock();
+    try {
+      checkOperation(OperationCategory.WRITE);
+      checkNameNodeSafeMode("Cannot remove XAttr entry on " + src);
+      src = FSDirectory.resolvePath(src, pathComponents, dir);
+      if (isPermissionEnabled) {
+        checkOwner(pc, src);
+        checkPathAccess(pc, src, FsAction.WRITE);
+      }
+      
+      dir.removeXAttr(src, xAttr);
+      resultingStat = getAuditFileInfo(src, false);
+    } catch (AccessControlException e) {
+      logAuditEvent(false, "removeXAttr", src);
+      throw e;
+    } finally {
+      writeUnlock();
+    }
+    getEditLog().logSync();
+    logAuditEvent(true, "removeXAttr", src, null, resultingStat);
+  }
-

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 UPD43 INS29 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS74 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 UPD42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS60 INS54 INS43 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS42 INS21 INS21 INS60 INS60 INS21 INS21 INS60 INS21 INS54 INS21 INS21 INS65 INS43 INS42 INS25 INS60 INS25 INS25 INS43 INS43 INS43 INS42 INS74 INS42 INS42 INS21 INS60 INS60 INS60 INS25 INS21 INS21 INS54 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS60 INS54 INS21 INS60 INS21 INS54 INS21 INS21 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS12 INS8 INS42 INS42 INS43 INS43 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS5 INS59 INS32 INS8 INS8 INS32 INS32 INS66 INS66 INS42 INS27 INS8 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS42 INS42 INS43 INS43 INS32 INS43 INS59 INS39 INS59 INS74 INS59 INS38 INS8 INS32 INS32 INS8 INS12 INS8 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS5 INS59 INS32 INS8 INS12 INS8 INS32 INS32 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS41 INS42 INS9 INS21 INS21 INS44 INS8 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS25 INS21 INS21 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS40 INS34 INS41 INS42 INS22 INS32 INS33 INS21 INS42 INS40 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS43 INS43 INS42 INS33 INS42 INS21 INS25 INS42 INS40 INS42 INS21 INS25 INS60 INS60 INS25 INS44 INS8 INS21 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS40 INS39 INS85 INS85 INS42 INS32 INS42 INS21 INS21 INS21 INS25 INS21 INS21 INS44 INS8 INS21 INS32 INS42 INS42 INS9 INS45 INS42 INS33 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS7 INS42 INS8 INS32 INS7 INS32 INS42 INS32 INS42 INS42 INS42 INS7 INS14 INS42 INS27 INS32 INS42 INS42 INS7 INS32 INS8 INS32 INS42 INS8 INS74 INS59 INS74 INS59 INS42 INS8 INS8 INS43 INS42 INS21 INS53 INS32 INS42 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS42 INS32 INS32 INS7 INS42 INS8 INS32 INS7 INS43 INS42 INS21 INS53 INS32 INS42 INS42 INS33 MOV21 MOV21 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS22 INS43 INS27 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS42 INS40 INS21 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS41 INS25 INS60 INS70 INS41 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS27 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 UPD43 INS42 INS33 INS42 INS9 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS27 INS40 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS9 INS45 INS42 INS42 INS9 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS9 INS42 INS9 INS45 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS40 INS27 INS32 INS41 INS43 INS43 INS42 INS32 INS43 INS42 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS44 INS42 INS8 INS42 INS42 INS43 INS42 INS25 INS42 INS27 INS8 INS27 INS32 INS21 INS10 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42