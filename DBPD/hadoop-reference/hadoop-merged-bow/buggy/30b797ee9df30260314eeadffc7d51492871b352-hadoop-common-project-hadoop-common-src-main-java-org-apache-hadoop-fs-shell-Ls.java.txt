HADOOP-8934. Shell command ls should include sort options (Jonathan Allen via aw)

+import java.util.Arrays;
+import java.util.Comparator;
-  
-  public static final String NAME = "ls";
-  public static final String USAGE = "[-d] [-h] [-R] [<path> ...]";
-  public static final String DESCRIPTION =
-		    "List the contents that match the specified file pattern. If " +
-		    "path is not specified, the contents of /user/<currentUser> " +
-		    "will be listed. Directory entries are of the form:\n" +
-		    "\tpermissions - userId groupId sizeOfDirectory(in bytes) modificationDate(yyyy-MM-dd HH:mm) directoryName\n\n" +
-		    "and file entries are of the form:\n" +
-		    "\tpermissions numberOfReplicas userId groupId sizeOfFile(in bytes) modificationDate(yyyy-MM-dd HH:mm) fileName\n" +
-		    "-d:  Directories are listed as plain files.\n" +
-		    "-h:  Formats the sizes of files in a human-readable fashion " +
-		    "rather than a number of bytes.\n" +
-		    "-R:  Recursively list the contents of directories.";
-		  
-  
-  protected final SimpleDateFormat dateFormat =
+  private static final String OPTION_DIRECTORY = "d";
+  private static final String OPTION_HUMAN = "h";
+  private static final String OPTION_RECURSIVE = "R";
+  private static final String OPTION_REVERSE = "r";
+  private static final String OPTION_MTIME = "t";
+  private static final String OPTION_ATIME = "u";
+  private static final String OPTION_SIZE = "S";
+
+  public static final String NAME = "ls";
+  public static final String USAGE = "[-" + OPTION_DIRECTORY + "] [-"
+      + OPTION_HUMAN + "] " + "[-" + OPTION_RECURSIVE + "] [-" + OPTION_MTIME
+      + "] [-" + OPTION_SIZE + "] [-" + OPTION_REVERSE + "] " + "[-"
+      + OPTION_ATIME + "] [<path> ...]";
+
+  public static final String DESCRIPTION =
+      "List the contents that match the specified file pattern. If " +
+          "path is not specified, the contents of /user/<currentUser> " +
+          "will be listed. For a directory a list of its direct children " +
+          "is returned (unless -" + OPTION_DIRECTORY +
+          " option is specified).\n\n" +
+          "Directory entries are of the form:\n" +
+          "\tpermissions - userId groupId sizeOfDirectory(in bytes) modificationDate(yyyy-MM-dd HH:mm) directoryName\n\n" +
+          "and file entries are of the form:\n" +
+          "\tpermissions numberOfReplicas userId groupId sizeOfFile(in bytes) modificationDate(yyyy-MM-dd HH:mm) fileName\n\n" +
+          "  -" + OPTION_DIRECTORY +
+          "  Directories are listed as plain files.\n" +
+          "  -" + OPTION_HUMAN +
+          "  Formats the sizes of files in a human-readable fashion\n" +
+          "      rather than a number of bytes.\n" +
+          "  -" + OPTION_RECURSIVE +
+          "  Recursively list the contents of directories.\n" +
+          "  -" + OPTION_MTIME +
+          "  Sort files by modification time (most recent first).\n" +
+          "  -" + OPTION_SIZE +
+          "  Sort files by size.\n" +
+          "  -" + OPTION_REVERSE +
+          "  Reverse the order of the sort.\n" +
+          "  -" + OPTION_ATIME +
+          "  Use time of last access instead of modification for\n" +
+          "      display and sorting.";
+
+  protected static final SimpleDateFormat dateFormat =
+  private boolean orderReverse;
+  private boolean orderTime;
+  private boolean orderSize;
+  private boolean useAtime;
+  private Comparator<PathData> orderComparator;
-    CommandFormat cf = new CommandFormat(0, Integer.MAX_VALUE, "d", "h", "R");
+    CommandFormat cf = new CommandFormat(0, Integer.MAX_VALUE,
+        OPTION_DIRECTORY, OPTION_HUMAN, OPTION_RECURSIVE, OPTION_REVERSE,
+        OPTION_MTIME, OPTION_SIZE, OPTION_ATIME);
-    dirRecurse = !cf.getOpt("d");
-    setRecursive(cf.getOpt("R") && dirRecurse);
-    humanReadable = cf.getOpt("h");
+    dirRecurse = !cf.getOpt(OPTION_DIRECTORY);
+    setRecursive(cf.getOpt(OPTION_RECURSIVE) && dirRecurse);
+    humanReadable = cf.getOpt(OPTION_HUMAN);
+    orderReverse = cf.getOpt(OPTION_REVERSE);
+    orderTime = cf.getOpt(OPTION_MTIME);
+    orderSize = !orderTime && cf.getOpt(OPTION_SIZE);
+    useAtime = cf.getOpt(OPTION_ATIME);
+
+    initialiseOrderComparator();
+  }
+
+  /**
+   * Should the contents of the directory be shown or just the directory?
+   * @return true if directory contents, false if just directory
+   */
+  @InterfaceAudience.Private
+  boolean isDirRecurse() {
+    return this.dirRecurse;
+  }
+
+  /**
+   * Should file sizes be returned in human readable format rather than bytes?
+   * @return true is human readable, false if bytes
+   */
+  @InterfaceAudience.Private
+  boolean isHumanReadable() {
+    return this.humanReadable;
+  }
+
+  /**
+   * Should directory contents be displayed in reverse order
+   * @return true reverse order, false default order
+   */
+  @InterfaceAudience.Private
+  boolean isOrderReverse() {
+    return this.orderReverse;
+  }
+
+  /**
+   * Should directory contents be displayed in mtime order.
+   * @return true mtime order, false default order
+   */
+  @InterfaceAudience.Private
+  boolean isOrderTime() {
+    return this.orderTime;
+  }
+
+  /**
+   * Should directory contents be displayed in size order.
+   * @return true size order, false default order
+   */
+  @InterfaceAudience.Private
+  boolean isOrderSize() {
+    return this.orderSize;
+  }
+
+  /**
+   * Should access time be used rather than modification time.
+   * @return true use access time, false use modification time
+   */
+  @InterfaceAudience.Private
+  boolean isUseAtime() {
+    return this.useAtime;
+      Arrays.sort(items, getOrderComparator());
-        dateFormat.format(new Date(stat.getModificationTime())),
-        item
-    );
+        dateFormat.format(new Date(isUseAtime()
+            ? stat.getAccessTime()
+            : stat.getModificationTime())),
+        item);
+   * Get the comparator to be used for sorting files.
+   * @return comparator
+   */
+  private Comparator<PathData> getOrderComparator() {
+    return this.orderComparator;
+  }
+
+  /**
+   * Initialise the comparator to be used for sorting files. If multiple options
+   * are selected then the order is chosen in the following precedence: -
+   * Modification time (or access time if requested) - File size - File name
+   */
+  private void initialiseOrderComparator() {
+    if (isOrderTime()) {
+      // mtime is ordered latest date first in line with the unix ls -t command
+      this.orderComparator = new Comparator<PathData>() {
+        public int compare(PathData o1, PathData o2) {
+          Long o1Time = (isUseAtime() ? o1.stat.getAccessTime()
+              : o1.stat.getModificationTime());
+          Long o2Time = (isUseAtime() ? o2.stat.getAccessTime()
+              : o2.stat.getModificationTime());
+          return o2Time.compareTo(o1Time) * (isOrderReverse() ? -1 : 1);
+        }
+      };
+    } else if (isOrderSize()) {
+      // size is ordered largest first in line with the unix ls -S command
+      this.orderComparator = new Comparator<PathData>() {
+        public int compare(PathData o1, PathData o2) {
+          Long o1Length = o1.stat.getLen();
+          Long o2Length = o2.stat.getLen();
+          return o2Length.compareTo(o1Length) * (isOrderReverse() ? -1 : 1);
+        }
+      };
+    } else {
+      this.orderComparator = new Comparator<PathData>() {
+        public int compare(PathData o1, PathData o2) {
+          return o1.compareTo(o2) * (isOrderReverse() ? -1 : 1);
+        }
+      };
+    }
+  }
+
+  /**
-    
+

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS43 INS43 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS74 INS59 INS29 INS78 INS39 INS42 INS8 INS29 INS78 INS39 INS42 INS8 INS29 INS78 INS39 INS42 INS8 INS29 INS78 INS39 INS42 INS8 INS29 INS78 INS39 INS42 INS8 INS29 INS78 INS39 INS42 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS40 INS41 INS65 INS65 INS40 INS41 INS65 INS65 INS40 INS41 INS65 INS65 INS40 INS41 INS65 INS65 INS40 INS41 INS65 INS65 INS40 INS41 INS65 INS65 INS43 INS43 INS41 INS65 INS25 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS45 INS42 INS45 INS27 INS42 INS45 UPD45 UPD45 INS45 INS42 UPD45 INS45 INS42 UPD45 UPD45 INS45 INS42 UPD45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS45 INS45 INS42 INS42 MOV43 INS7 INS7 INS7 INS7 INS32 INS66 INS66 INS22 INS66 INS66 INS22 INS66 INS66 INS22 INS66 INS66 INS22 INS66 INS66 INS22 INS66 INS66 INS22 INS66 INS66 INS42 INS42 INS22 INS66 INS66 INS66 INS32 INS8 INS25 MOV45 MOV45 INS45 INS45 INS42 INS32 INS42 INS32 INS42 INS27 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS21 INS52 INS42 INS42 INS21 INS32 INS8 INS8 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS32 INS42 INS42 INS42 INS32 INS7 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS22 INS14 INS7 INS7 INS42 INS16 INS52 INS42 INS74 INS1 INS22 INS14 INS22 INS14 INS32 INS32 MOV32 INS43 INS43 INS31 INS52 INS42 INS74 INS1 INS52 INS42 INS74 INS1 INS42 INS42 INS42 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS42 INS43 INS42 INS60 INS60 INS41 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS43 INS42 INS43 INS42 INS60 INS60 INS41 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS36 INS42 INS42 INS36 INS32 INS36 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS42 INS42 INS27 INS16 INS16 INS42 INS42 INS42 INS16 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS36 INS32 INS36 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS38 INS34 INS40 INS42 INS40 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS16 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS34 INS32 INS38 INS34 INS32 INS38 INS34 INS42 INS34 INS42 INS34 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45