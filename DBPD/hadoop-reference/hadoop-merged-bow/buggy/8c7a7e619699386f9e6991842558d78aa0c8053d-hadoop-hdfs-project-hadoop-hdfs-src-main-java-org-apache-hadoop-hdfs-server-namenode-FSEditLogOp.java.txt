HDFS-5025. Record ClientId and CallId in EditLog to enable rebuilding retry cache in case of HA failover. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508332 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.zip.CheckedInputStream;
-import java.util.zip.Checksum;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ADD;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ALLOCATE_BLOCK_ID;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_ALLOW_SNAPSHOT;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_CANCEL_DELEGATION_TOKEN;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_CLEAR_NS_QUOTA;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_CLOSE;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_CONCAT_DELETE;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_CREATE_SNAPSHOT;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_DELETE;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_DELETE_SNAPSHOT;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_DISALLOW_SNAPSHOT;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_END_LOG_SEGMENT;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_GET_DELEGATION_TOKEN;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_INVALID;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_MKDIR;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_REASSIGN_LEASE;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_RENAME;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_RENAME_OLD;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_RENAME_SNAPSHOT;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_RENEW_DELEGATION_TOKEN;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_GENSTAMP_V1;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_GENSTAMP_V2;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_NS_QUOTA;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_OWNER;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_PERMISSIONS;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_QUOTA;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_REPLICATION;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_START_LOG_SEGMENT;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SYMLINK;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_TIMES;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_UPDATE_BLOCKS;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_UPDATE_MASTER_KEY;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.EOFException;
+import java.io.IOException;
+import java.util.zip.CheckedInputStream;
+import java.util.zip.Checksum;
-import org.apache.hadoop.fs.ChecksumException;
-import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier;
+import org.apache.hadoop.fs.ChecksumException;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.DeprecatedUTF8;
+import org.apache.hadoop.hdfs.protocol.ClientProtocol;
-import org.apache.hadoop.util.PureJavaCrc32;
-
-import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.*;
-import org.apache.hadoop.security.token.delegation.DelegationKey;
+import org.apache.hadoop.hdfs.security.token.delegation.DelegationTokenIdentifier;
+import org.apache.hadoop.hdfs.util.XMLUtils;
+import org.apache.hadoop.hdfs.util.XMLUtils.InvalidXmlException;
+import org.apache.hadoop.hdfs.util.XMLUtils.Stanza;
+import org.apache.hadoop.io.ArrayWritable;
-import org.apache.hadoop.io.ArrayWritable;
-import org.apache.hadoop.hdfs.util.XMLUtils;
-import org.apache.hadoop.hdfs.util.XMLUtils.InvalidXmlException;
-import org.apache.hadoop.hdfs.util.XMLUtils.Stanza;
-import org.apache.hadoop.hdfs.DFSConfigKeys;
-import org.apache.hadoop.hdfs.DeprecatedUTF8;
+import org.apache.hadoop.ipc.ClientId;
+import org.apache.hadoop.ipc.RpcConstants;
+import org.apache.hadoop.security.token.delegation.DelegationKey;
+import org.apache.hadoop.util.PureJavaCrc32;
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.EOFException;
-
+  byte[] rpcClientId = RpcConstants.DUMMY_CLIENT_ID;
+  int rpcCallId = RpcConstants.INVALID_CALL_ID;
+  
+  public boolean hasRpcIds() {
+    return rpcClientId != RpcConstants.DUMMY_CLIENT_ID
+        && rpcCallId != RpcConstants.INVALID_CALL_ID;
+  }
+  
+  /** this has to be called after calling {@link #hasRpcIds()} */
+  public byte[] getClientId() {
+    Preconditions.checkState(rpcClientId != RpcConstants.DUMMY_CLIENT_ID);
+    return rpcClientId;
+  }
+  
+  public void setRpcClientId(byte[] clientId) {
+    this.rpcClientId = clientId;
+  }
+  
+  /** this has to be called after calling {@link #hasRpcIds()} */
+  public int getCallId() {
+    Preconditions.checkState(rpcCallId != RpcConstants.INVALID_CALL_ID);
+    return rpcCallId;
+  }
+  
+  public void setRpcCallId(int callId) {
+    this.rpcCallId = callId;
+  }
+  private static void writeRpcIds(final byte[] clientId, final int callId,
+      DataOutputStream out) throws IOException {
+    FSImageSerialization.writeBytes(clientId, out);
+    FSImageSerialization.writeInt(callId, out);
+  }
+  
+  void readRpcIds(DataInputStream in, int logVersion)
+      throws IOException {
+    if (LayoutVersion.supports(Feature.EDITLOG_SUPPORT_RETRYCACHE,
+        logVersion)) {
+      this.rpcClientId = FSImageSerialization.readBytes(in);
+      this.rpcCallId = FSImageSerialization.readInt(in);
+    }
+  }
+  
+  void readRpcIdsFromXml(Stanza st) {
+    this.rpcClientId = st.hasChildren("RPC_CLIENTID") ? 
+        ClientId.toBytes(st.getValue("RPC_CLIENTID"))
+        : RpcConstants.DUMMY_CLIENT_ID;
+    this.rpcCallId = st.hasChildren("RPC_CALLID") ? 
+        Integer.valueOf(st.getValue("RPC_CALLID"))
+        : RpcConstants.INVALID_CALL_ID;
+  }
+  
+  private static void appendRpcIdsToString(final StringBuilder builder,
+      final byte[] clientId, final int callId) {
+    builder.append(", RpcClientId=");
+    builder.append(ClientId.toString(clientId));
+    builder.append(", RpcCallId=");
+    builder.append(callId);
+  }
+  
+  private static void appendRpcIdsToXml(ContentHandler contentHandler,
+      final byte[] clientId, final int callId) throws SAXException {
+    XMLUtils.addSaxString(contentHandler, "RPC_CLIENTID",
+        ClientId.toString(clientId));
+    XMLUtils.addSaxString(contentHandler, "RPC_CALLID", 
+        Integer.valueOf(callId).toString());
+  }
+  
-
+    
-    public 
-    void writeFields(DataOutputStream out) throws IOException {
+    public void writeFields(DataOutputStream out) throws IOException {
+        // write clientId and callId
+        writeRpcIds(rpcClientId, rpcCallId, out);
+        // read clientId and callId
+        readRpcIds(in, logVersion);
+      if (this.opCode == OP_ADD) {
+        appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      }
+      if (this.opCode == OP_ADD) {
+        appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      }
-    @Override void fromXml(Stanza st) throws InvalidXmlException {
+    @Override 
+    void fromXml(Stanza st) throws InvalidXmlException {
+      readRpcIdsFromXml(st);
+  /**
+   * {@literal @AtMostOnce} for {@link ClientProtocol#startFile} and
+   * {@link ClientProtocol#appendFile}
+   */
+  /**
+   * Although {@link ClientProtocol#appendFile} may also log a close op, we do
+   * not need to record the rpc ids here since a successful appendFile op will
+   * finally log an AddOp.
+   */
+  /**
+   * {@literal @AtMostOnce} for {@link ClientProtocol#updatePipeline}, but 
+   * {@literal @Idempotent} for some other ops.
+   */
-    
+      // clientId and callId
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      readRpcIds(in, logVersion);
-        .append(Arrays.toString(blocks))
-        .append("]");
+        .append(Arrays.toString(blocks));
+      appendRpcIdsToString(sb, rpcClientId, rpcCallId);
+      sb.append("]");
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      readRpcIdsFromXml(st);
+  /** {@literal @Idempotent} for {@link ClientProtocol#setReplication} */
+  /** {@literal @AtMostOnce} for {@link ClientProtocol#concat} */
-    public 
-    void writeFields(DataOutputStream out) throws IOException {
+    public void writeFields(DataOutputStream out) throws IOException {
+      
+      // rpc ids
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      readRpcIdsFromXml(st);
+  /** {@literal @AtMostOnce} for {@link ClientProtocol#rename} */
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
-    @Override void fromXml(Stanza st) throws InvalidXmlException {
+    @Override 
+    void fromXml(Stanza st) throws InvalidXmlException {
+      
+      readRpcIdsFromXml(st);
+  /** {@literal @AtMostOnce} for {@link ClientProtocol#delete} */
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      
+      readRpcIdsFromXml(st);
-    
+
+  /** {@literal @Idempotent} for {@link ClientProtocol#mkdirs} */
+  /**
+   * The corresponding operations are either {@literal @Idempotent} (
+   * {@link ClientProtocol#updateBlockForPipeline},
+   * {@link ClientProtocol#recoverLease}, {@link ClientProtocol#addBlock}) or
+   * already bound with other editlog op which records rpc ids (
+   * {@link ClientProtocol#startFile}). Thus no need to record rpc ids here.
+   */
+  /** Similar with {@link SetGenstampV1Op} */
+  /** {@literal @Idempotent} for {@link ClientProtocol#addBlock} */
+  /** {@literal @Idempotent} for {@link ClientProtocol#setPermission} */
+  /** {@literal @Idempotent} for {@link ClientProtocol#setOwner} */
-
+  
+  /** {@literal @Idempotent} for {@link ClientProtocol#setQuota} */
+  /** {@literal @Idempotent} for {@link ClientProtocol#setTimes} */
+  /** {@literal @AtMostOnce} for {@link ClientProtocol#createSymlink} */
-    public 
-    void writeFields(DataOutputStream out) throws IOException {
+    public void writeFields(DataOutputStream out) throws IOException {
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
-    @Override void fromXml(Stanza st) throws InvalidXmlException {
+    @Override 
+    void fromXml(Stanza st) throws InvalidXmlException {
+      
+      readRpcIdsFromXml(st);
+  /** {@literal @AtMostOnce} for {@link ClientProtocol#rename2} */
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      readRpcIdsFromXml(st);
-
+ 
+  /**
+   * {@literal @Idempotent} for {@link ClientProtocol#recoverLease}. In the
+   * meanwhile, startFile and appendFile both have their own corresponding
+   * editlog op.
+   */
+  /** {@literal @Idempotent} for {@link ClientProtocol#getDelegationToken} */
+  /** {@literal @Idempotent} for {@link ClientProtocol#renewDelegationToken} */
+  /** {@literal @Idempotent} for {@link ClientProtocol#cancelDelegationToken} */
-   * Operation corresponding to creating a snapshot
+   * Operation corresponding to creating a snapshot.
+   * {@literal @AtMostOnce} for {@link ClientProtocol#createSnapshot}.
+      
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      
+      readRpcIdsFromXml(st);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
-   * Operation corresponding to delete a snapshot
+   * Operation corresponding to delete a snapshot.
+   * {@literal @AtMostOnce} for {@link ClientProtocol#deleteSnapshot}.
+      
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      
+      readRpcIdsFromXml(st);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
-   * Operation corresponding to rename a snapshot
+   * Operation corresponding to rename a snapshot.
+   * {@literal @AtMostOnce} for {@link ClientProtocol#renameSnapshot}.
+      
+      // read RPC ids if necessary
+      readRpcIds(in, logVersion);
+      
+      writeRpcIds(rpcClientId, rpcCallId, out);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+      
+      readRpcIdsFromXml(st);
+      appendRpcIdsToString(builder, rpcClientId, rpcCallId);
-  static class AllowSnapshotOp extends FSEditLogOp {
+  static class AllowSnapshotOp extends FSEditLogOp { // @Idempotent
-  static class DisallowSnapshotOp extends FSEditLogOp {
+  static class DisallowSnapshotOp extends FSEditLogOp { // @Idempotent

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS5 INS59 INS39 INS59 INS83 INS39 INS42 INS8 INS29 INS83 INS5 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS44 INS43 INS8 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS31 INS31 INS31 INS31 MOV31 MOV31 MOV31 MOV31 INS39 INS85 INS42 INS40 INS42 INS40 INS41 INS65 INS39 INS85 INS21 INS41 INS5 INS42 INS21 INS65 INS21 INS41 INS39 INS42 INS21 INS83 INS5 INS42 INS83 INS39 INS42 INS43 INS42 INS42 INS21 INS21 INS43 INS42 INS39 INS42 INS42 INS25 INS43 INS42 INS21 INS21 INS83 INS43 INS42 INS83 INS5 INS42 INS83 INS39 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS83 INS5 INS42 INS83 INS39 INS42 INS42 INS21 INS21 INS65 INS65 INS65 INS65 INS65 INS65 MOV78 MOV44 MOV43 MOV78 MOV44 MOV43 MOV78 MOV44 MOV43 INS65 MOV78 MOV44 MOV43 MOV78 MOV44 MOV43 MOV21 MOV78 MOV44 MOV43 MOV21 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 MOV78 INS39 INS42 MOV44 MOV44 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 MOV78 INS39 INS42 MOV44 MOV43 INS8 MOV78 MOV43 MOV78 MOV43 MOV78 MOV78 INS27 INS66 INS65 INS66 INS32 INS42 INS39 INS85 INS7 INS66 INS65 INS66 INS32 INS42 INS7 INS39 INS85 INS42 INS32 INS32 INS42 INS32 INS8 INS42 INS7 INS7 INS42 INS39 INS85 INS32 INS32 INS32 INS32 INS42 INS39 INS85 INS32 INS32 INS25 INS25 INS21 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS21 INS21 INS21 INS21 INS21 INS65 INS66 INS65 INS66 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS66 INS65 INS66 INS21 INS21 INS21 MOV21 MOV21 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS21 INS21 INS21 INS21 INS21 INS65 INS66 INS65 INS66 INS21 INS21 INS21 INS21 INS21 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 MOV21 MOV21 INS21 MOV21 MOV21 INS21 MOV21 MOV21 INS21 MOV21 MOV21 INS21 INS21 UPD66 INS65 INS66 INS65 INS66 INS21 INS21 INS21 INS21 INS21 UPD66 INS65 INS66 INS65 INS66 INS21 INS21 INS21 INS21 INS21 INS27 INS27 INS68 INS42 INS42 INS27 INS22 INS42 INS68 INS42 INS42 INS27 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS21 INS21 INS22 INS16 INS22 INS16 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS27 INS8 INS27 INS8 INS32 INS66 INS67 INS67 INS67 INS66 INS67 INS66 INS32 INS32 MOV32 INS32 INS32 INS32 INS32 INS66 INS67 INS66 INS67 INS32 INS32 INS32 INS32 INS32 INS66 INS67 INS32 INS32 INS32 INS32 INS32 MOV7 INS32 INS66 INS67 INS32 INS32 INS32 INS32 INS66 INS67 INS66 INS67 INS67 INS67 INS67 INS42 INS66 INS67 INS66 INS67 INS66 INS67 INS66 INS67 INS66 INS67 INS66 INS67 INS32 INS32 INS32 INS32 INS32 INS66 INS67 INS32 INS32 INS32 INS32 INS32 INS66 INS67 INS66 INS67 INS66 INS67 INS66 INS67 INS66 INS67 INS32 INS32 INS32 INS32 INS32 INS66 INS67 INS32 INS32 INS32 INS32 INS32 INS66 INS67 INS32 INS32 INS32 INS32 INS32 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS52 INS42 INS42 INS42 INS40 INS52 INS42 INS7 INS7 INS52 INS42 INS32 INS32 INS40 INS52 INS42 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS21 INS22 INS42 INS21 INS22 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 MOV45 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS22 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS32 INS52 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL45 DEL32 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL39 DEL42 DEL8 DEL31