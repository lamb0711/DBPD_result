MAPREDUCE-3240. Fixed NodeManager to be able to forcefully cleanup its containers (process-trees) irrespective of whether the container succeeded, or killed. Contributed by Hitesh Shah.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189711 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.reflect.Field;
-
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
+import org.apache.hadoop.yarn.server.nodemanager.util.ProcessIdFileReader;
-  protected ConcurrentMap<ContainerId, ShellCommandExecutor> launchCommandObjs =
-      new ConcurrentHashMap<ContainerId, ShellCommandExecutor>();
+  private ConcurrentMap<ContainerId, Path> pidFiles =
+      new ConcurrentHashMap<ContainerId, Path>();
+
+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+  private final ReadLock readLock = lock.readLock();
+  private final WriteLock writeLock = lock.writeLock();
-    KILLED(137);
+    FORCE_KILLED(137),
+    TERMINATED(143);
+   * Get the pidFile of the container.
+   * @param containerId
+   * @return the path of the pid-file for the given containerId.
+   */
+  protected Path getPidFilePath(ContainerId containerId) {
+    try {
+      readLock.lock();
+      return (this.pidFiles.get(containerId));
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  /**
+   * Is the container still active?
+   * @param containerId
+   * @return true if the container is active else false.
+   */
+  protected boolean isContainerActive(ContainerId containerId) {
+    try {
+      readLock.lock();
+      return (this.pidFiles.containsKey(containerId));
+    } finally {
+      readLock.unlock();
+    }
+  }
+
+  /**
+   * Mark the container as active
+   * 
+   * @param containerId
+   *          the ContainerId
+   * @param pidFilePath
+   *          Path where the executor should write the pid of the launched
+   *          process
+   */
+  public void activateContainer(ContainerId containerId, Path pidFilePath) {
+    try {
+      writeLock.lock();
+      this.pidFiles.put(containerId, pidFilePath);
+    } finally {
+      writeLock.unlock();
+    }
+  }
+
+  /**
+   * Mark the container as inactive.
+   * Done iff the container is still active. Else treat it as
+   * a no-op
+   */
+  public void deactivateContainer(ContainerId containerId) {
+    try {
+      writeLock.lock();
+      this.pidFiles.remove(containerId);
+    } finally {
+      writeLock.unlock();
+    }
+  }
+
+  /**
-    ShellCommandExecutor shExec = launchCommandObjs.get(containerID);
-    if (shExec == null) {
+    Path pidFile = pidFiles.get(containerID);
+    if (pidFile == null) {
-    Process proc = shExec.getProcess();
-    if (proc == null) {
-      // This happens if the command is not yet started
-      return pid;
-    }
-      Field pidField = proc.getClass().getDeclaredField("pid");
-      pidField.setAccessible(true);
-      pid = ((Integer) pidField.get(proc)).toString();
-    } catch (SecurityException e) {
-      // SecurityManager not expected with yarn. Ignore.
-    } catch (NoSuchFieldException e) {
-      // Yarn only on UNIX for now. Ignore.
-    } catch (IllegalArgumentException e) {
-      ;
-    } catch (IllegalAccessException e) {
-      ;
+      pid = ProcessIdFileReader.getProcessId(pidFile);
+    } catch (IOException e) {
+      LOG.error("Got exception reading pid from pid-file " + pidFile, e);

MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 UPD83 UPD74 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS72 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 MOV29 INS83 MOV43 INS42 MOV44 INS8 UPD43 UPD42 INS42 INS42 INS14 INS42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 INS42 INS34 INS65 INS65 INS65 INS42 INS43 INS42 INS54 INS65 INS65 INS65 INS43 INS42 INS54 INS65 INS65 INS65 UPD43 MOV43 UPD42 MOV42 INS43 INS42 INS54 INS65 UPD43 MOV43 UPD42 MOV42 INS54 MOV60 INS60 MOV25 INS54 MOV41 UPD42 UPD74 INS43 UPD42 UPD42 UPD42 UPD42 INS66 INS42 INS66 UPD42 MOV42 INS8 INS8 INS66 INS42 INS66 UPD42 MOV42 INS8 INS8 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 INS42 INS8 INS8 INS66 INS66 INS66 UPD42 INS8 INS8 INS43 INS59 INS8 MOV12 UPD43 UPD42 MOV42 INS21 INS41 MOV21 INS21 INS41 INS21 INS21 INS21 INS21 INS21 INS21 INS21 UPD42 MOV42 INS42 INS32 UPD42 INS21 UPD42 INS32 INS36 INS32 INS36 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS7 UPD43 INS21 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS32 INS22 UPD42 MOV42 UPD42 MOV42 INS22 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS52 INS42 INS52 INS42 INS45 INS42 DEL42 DEL9 DEL20 DEL83 DEL42 DEL43 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL43 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL11 DEL36 DEL32 DEL7 DEL21 DEL8 DEL44 DEL8 DEL12 DEL44 DEL8 DEL12 DEL43 DEL42 DEL44 DEL20 DEL8 DEL12 DEL54 DEL8 DEL31