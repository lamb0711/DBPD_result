HDFS-7816. Unable to open webhdfs paths with "+". Contributed by Haohui Mai

+import org.apache.commons.io.Charsets;
+import java.nio.charset.Charset;
-    this.path = QueryStringDecoder.decodeComponent(decoder.path().substring(WEBHDFS_PREFIX_LENGTH));
+    this.path = decodeComponent(decoder.path().substring
+        (WEBHDFS_PREFIX_LENGTH), Charsets.UTF_8);
+
+  /**
+   * The following function behaves exactly the same as netty's
+   * <code>QueryStringDecoder#decodeComponent</code> except that it
+   * does not decode the '+' character as space. WebHDFS takes this scheme
+   * to maintain the backward-compatibility for pre-2.7 releases.
+   */
+  private static String decodeComponent(final String s, final Charset charset) {
+    if (s == null) {
+      return "";
+    }
+    final int size = s.length();
+    boolean modified = false;
+    for (int i = 0; i < size; i++) {
+      final char c = s.charAt(i);
+      if (c == '%' || c == '+') {
+        modified = true;
+        break;
+      }
+    }
+    if (!modified) {
+      return s;
+    }
+    final byte[] buf = new byte[size];
+    int pos = 0;  // position in `buf'.
+    for (int i = 0; i < size; i++) {
+      char c = s.charAt(i);
+      if (c == '%') {
+        if (i == size - 1) {
+          throw new IllegalArgumentException("unterminated escape sequence at" +
+                                                 " end of string: " + s);
+        }
+        c = s.charAt(++i);
+        if (c == '%') {
+          buf[pos++] = '%';  // "%%" -> "%"
+          break;
+        }
+        if (i == size - 1) {
+          throw new IllegalArgumentException("partial escape sequence at end " +
+                                                 "of string: " + s);
+        }
+        c = decodeHexNibble(c);
+        final char c2 = decodeHexNibble(s.charAt(++i));
+        if (c == Character.MAX_VALUE || c2 == Character.MAX_VALUE) {
+          throw new IllegalArgumentException(
+              "invalid escape sequence `%" + s.charAt(i - 1) + s.charAt(
+                  i) + "' at index " + (i - 2) + " of: " + s);
+        }
+        c = (char) (c * 16 + c2);
+        // Fall through.
+      }
+      buf[pos++] = (byte) c;
+    }
+    return new String(buf, 0, pos, charset);
+  }
+
+  /**
+   * Helper to decode half of a hexadecimal number from a string.
+   * @param c The ASCII character of the hexadecimal number to decode.
+   * Must be in the range {@code [0-9a-fA-F]}.
+   * @return The hexadecimal value represented in the ASCII character
+   * given, or {@link Character#MAX_VALUE} if the character is invalid.
+   */
+  private static char decodeHexNibble(final char c) {
+    if ('0' <= c && c <= '9') {
+      return (char) (c - '0');
+    } else if ('a' <= c && c <= 'f') {
+      return (char) (c - 'a' + 10);
+    } else if ('A' <= c && c <= 'F') {
+      return (char) (c - 'A' + 10);
+    } else {
+      return Character.MAX_VALUE;
+    }
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS25 INS60 INS60 INS24 INS25 INS60 INS60 INS24 INS41 INS65 INS65 INS65 INS83 INS39 INS42 INS25 INS66 INS66 INS66 INS66 INS42 INS42 INS27 INS8 INS83 INS39 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS83 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS14 INS66 INS42 INS66 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS27 INS8 INS25 INS42 INS33 INS41 INS42 INS32 INS42 INS9 INS39 INS59 INS42 INS42 INS42 INS60 INS25 INS42 INS41 INS39 INS85 INS42 INS3 INS42 INS34 INS39 INS59 INS42 INS42 INS42 INS60 INS25 INS21 INS43 INS42 INS34 INS42 INS42 INS66 INS67 INS27 INS27 INS41 INS27 INS8 INS25 INS40 INS45 INS42 INS42 INS42 INS34 INS83 INS39 INS59 INS27 INS8 INS42 INS5 INS42 INS42 INS34 INS39 INS59 INS27 INS8 INS7 INS42 INS42 INS42 INS13 INS42 INS42 INS13 INS11 INS27 INS27 INS41 INS27 INS8 INS8 INS42 INS32 INS27 INS27 INS21 INS10 INS39 INS85 INS42 INS32 INS42 INS13 INS25 INS21 INS25 INS25 INS21 INS60 INS25 INS21 INS2 INS11 INS39 INS36 INS13 INS42 INS42 INS13 INS11 INS27 INS27 INS41 INS41 INS42 INS42 INS42 INS42 INS13 INS42 INS13 INS7 INS42 INS42 INS42 INS27 INS8 INS7 INS27 INS8 INS27 INS8 INS7 INS83 INS39 INS59 INS27 INS8 INS7 INS42 INS37 INS39 INS42 INS27 INS39 INS36 INS13 INS42 INS42 INS13 INS11 INS40 INS42 INS9 INS42 INS27 INS53 INS42 INS32 INS42 INS13 INS21 INS10 INS42 INS27 INS53 INS42 INS32 INS42 INS32 INS27 INS27 INS53 INS42 INS11 INS42 INS42 INS13 INS27 INS39 INS36 INS42 INS34 INS14 INS42 INS42 INS38 INS7 INS42 INS34 INS14 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS40 INS14 INS39 INS36 INS27 INS34 INS27 INS43 INS27 INS42 INS2 INS13 INS43 INS27 INS42 INS42 INS38 INS43 INS27 INS27 INS42 INS13 INS27 INS34 INS42 INS45 INS45 INS42 INS42 INS37 INS42 INS45 INS45 INS42 INS42 INS42 INS45 INS32 INS32 INS45 INS36 INS45 INS42 INS27 INS42 INS42 INS13 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS34 INS42 INS34 INS42 INS34 DEL42