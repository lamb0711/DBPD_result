HADOOP-12911. Upgrade Hadoop MiniKDC with Kerby. Contributed by Jiajia Li

-import org.apache.commons.io.FileUtils;
-import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.text.StrSubstitutor;
-import org.apache.directory.api.ldap.model.schema.SchemaManager;
-import org.apache.directory.api.ldap.schemaextractor.SchemaLdifExtractor;
-import org.apache.directory.api.ldap.schemaextractor.impl.DefaultSchemaLdifExtractor;
-import org.apache.directory.api.ldap.schemaloader.LdifSchemaLoader;
-import org.apache.directory.api.ldap.schemamanager.impl.DefaultSchemaManager;
-import org.apache.directory.server.constants.ServerDNConstants;
-import org.apache.directory.server.core.DefaultDirectoryService;
-import org.apache.directory.server.core.api.CacheService;
-import org.apache.directory.server.core.api.DirectoryService;
-import org.apache.directory.server.core.api.InstanceLayout;
-import org.apache.directory.server.core.api.schema.SchemaPartition;
-import org.apache.directory.server.core.kerberos.KeyDerivationInterceptor;
-import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmIndex;
-import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmPartition;
-import org.apache.directory.server.core.partition.ldif.LdifPartition;
-import org.apache.directory.server.kerberos.KerberosConfig;
-import org.apache.directory.server.kerberos.kdc.KdcServer;
-import org.apache.directory.server.kerberos.shared.crypto.encryption.KerberosKeyFactory;
-import org.apache.directory.server.kerberos.shared.keytab.Keytab;
-import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;
-import org.apache.directory.server.protocol.shared.transport.AbstractTransport;
-import org.apache.directory.server.protocol.shared.transport.TcpTransport;
-import org.apache.directory.server.protocol.shared.transport.UdpTransport;
-import org.apache.directory.server.xdbm.Index;
-import org.apache.directory.shared.kerberos.KerberosTime;
-import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
-import org.apache.directory.shared.kerberos.components.EncryptionKey;
-import org.apache.directory.api.ldap.model.entry.DefaultEntry;
-import org.apache.directory.api.ldap.model.entry.Entry;
-import org.apache.directory.api.ldap.model.ldif.LdifEntry;
-import org.apache.directory.api.ldap.model.ldif.LdifReader;
-import org.apache.directory.api.ldap.model.name.Dn;
-import org.apache.directory.api.ldap.model.schema.registries.SchemaLoader;
+import org.apache.kerby.kerberos.kerb.KrbException;
+import org.apache.kerby.kerberos.kerb.server.KdcConfigKey;
+import org.apache.kerby.kerberos.kerb.server.SimpleKdcServer;
+import org.apache.kerby.util.IOUtil;
+import org.apache.kerby.util.NetworkUtil;
-import java.io.BufferedReader;
-import java.io.StringReader;
-import java.lang.reflect.Method;
-import java.net.InetSocketAddress;
-import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.UUID;
- * MiniKdc sets 2 System properties when started and un-sets them when stopped:
+ * MiniKdc sets one System property when started and un-set when stopped:
- *   <li>java.security.krb5.conf: set to the MiniKDC real/host/port</li>
-  public static void main(String[] args) throws  Exception {
+  public static void main(String[] args) throws Exception {
-  private DirectoryService ds;
-  private KdcServer kdc;
+  private SimpleKdcServer simpleKdc;
+  private String transport;
+  private boolean krb5Debug;
+  public void setTransport(String transport) {
+    this.transport = transport;
+  }
-    if (! workDir.exists()
-            && ! workDir.mkdirs()) {
-      throw new RuntimeException("Cannot create directory " + workDir);
+    if (!this.workDir.exists()
+            && !this.workDir.mkdirs()) {
+      throw new RuntimeException("Cannot create directory " + this.workDir);
+    krb5conf = new File(System.getProperty(JAVA_SECURITY_KRB5_CONF));
-    if (kdc != null) {
+    if (simpleKdc != null) {
-    initDirectoryService();
-    initKDCServer();
+    simpleKdc = new SimpleKdcServer();
+    prepareKdcServer();
+    simpleKdc.init();
+    resetDefaultRealm();
+    simpleKdc.start();
+    LOG.info("MiniKdc stated.");
-  private void initDirectoryService() throws Exception {
-    ds = new DefaultDirectoryService();
-    ds.setInstanceLayout(new InstanceLayout(workDir));
-
-    CacheService cacheService = new CacheService();
-    ds.setCacheService(cacheService);
-
-    // first load the schema
-    InstanceLayout instanceLayout = ds.getInstanceLayout();
-    File schemaPartitionDirectory = new File(
-            instanceLayout.getPartitionsDirectory(), "schema");
-    SchemaLdifExtractor extractor = new DefaultSchemaLdifExtractor(
-            instanceLayout.getPartitionsDirectory());
-    extractor.extractOrCopy();
-
-    SchemaLoader loader = new LdifSchemaLoader(schemaPartitionDirectory);
-    SchemaManager schemaManager = new DefaultSchemaManager(loader);
-    schemaManager.loadAllEnabled();
-    ds.setSchemaManager(schemaManager);
-    // Init the LdifPartition with schema
-    LdifPartition schemaLdifPartition = new LdifPartition(schemaManager);
-    schemaLdifPartition.setPartitionPath(schemaPartitionDirectory.toURI());
-
-    // The schema partition
-    SchemaPartition schemaPartition = new SchemaPartition(schemaManager);
-    schemaPartition.setWrappedPartition(schemaLdifPartition);
-    ds.setSchemaPartition(schemaPartition);
-
-    JdbmPartition systemPartition = new JdbmPartition(ds.getSchemaManager());
-    systemPartition.setId("system");
-    systemPartition.setPartitionPath(new File(
-            ds.getInstanceLayout().getPartitionsDirectory(),
-            systemPartition.getId()).toURI());
-    systemPartition.setSuffixDn(new Dn(ServerDNConstants.SYSTEM_DN));
-    systemPartition.setSchemaManager(ds.getSchemaManager());
-    ds.setSystemPartition(systemPartition);
-
-    ds.getChangeLog().setEnabled(false);
-    ds.setDenormalizeOpAttrsEnabled(true);
-    ds.addLast(new KeyDerivationInterceptor());
-
-    // create one partition
-    String orgName= conf.getProperty(ORG_NAME).toLowerCase(Locale.ENGLISH);
-    String orgDomain = conf.getProperty(ORG_DOMAIN).toLowerCase(Locale.ENGLISH);
-
-    JdbmPartition partition = new JdbmPartition(ds.getSchemaManager());
-    partition.setId(orgName);
-    partition.setPartitionPath(new File(
-            ds.getInstanceLayout().getPartitionsDirectory(), orgName).toURI());
-    partition.setSuffixDn(new Dn("dc=" + orgName + ",dc=" + orgDomain));
-    ds.addPartition(partition);
-    // indexes
-    Set<Index<?, ?, String>> indexedAttributes = new HashSet<Index<?, ?, String>>();
-    indexedAttributes.add(new JdbmIndex<String, Entry>("objectClass", false));
-    indexedAttributes.add(new JdbmIndex<String, Entry>("dc", false));
-    indexedAttributes.add(new JdbmIndex<String, Entry>("ou", false));
-    partition.setIndexedAttributes(indexedAttributes);
-
-    // And start the ds
-    ds.setInstanceId(conf.getProperty(INSTANCE));
-    ds.startup();
-    // context entry, after ds.startup()
-    Dn dn = new Dn("dc=" + orgName + ",dc=" + orgDomain);
-    Entry entry = ds.newEntry(dn);
-    entry.add("objectClass", "top", "domain");
-    entry.add("dc", orgName);
-    ds.getAdminSession().add(entry);
+  private void resetDefaultRealm() throws IOException {
+    InputStream templateResource = new FileInputStream(
+            getKrb5conf().getAbsolutePath());
+    String content = IOUtil.readInput(templateResource);
+    content = content.replaceAll("default_realm = .*\n",
+            "default_realm = " + getRealm() + "\n");
+    IOUtil.writeFile(content, getKrb5conf());
-  /**
-   * Convenience method that returns a resource as inputstream from the
-   * classpath.
-   * <p>
-   * It first attempts to use the Thread's context classloader and if not
-   * set it uses the class' classloader.
-   *
-   * @param resourceName resource to retrieve.
-   *
-   * @throws IOException thrown if resource cannot be loaded
-   * @return inputstream with the resource.
-   */
-  public static InputStream getResourceAsStream(String resourceName)
-      throws IOException {
-    ClassLoader cl = Thread.currentThread().getContextClassLoader();
-    if (cl == null) {
-      cl = MiniKdc.class.getClassLoader();
-    }
-    InputStream is = cl.getResourceAsStream(resourceName);
-    if (is == null) {
-      throw new IOException("Can not read resource file '" +
-          resourceName + "'");
-    }
-    return is;
-  }
-
-  private void initKDCServer() throws Exception {
-    String orgName= conf.getProperty(ORG_NAME);
-    String orgDomain = conf.getProperty(ORG_DOMAIN);
-    String bindAddress = conf.getProperty(KDC_BIND_ADDRESS);
-    final Map<String, String> map = new HashMap<String, String>();
-    map.put("0", orgName.toLowerCase(Locale.ENGLISH));
-    map.put("1", orgDomain.toLowerCase(Locale.ENGLISH));
-    map.put("2", orgName.toUpperCase(Locale.ENGLISH));
-    map.put("3", orgDomain.toUpperCase(Locale.ENGLISH));
-    map.put("4", bindAddress);
-
-    InputStream is1 = getResourceAsStream("minikdc.ldiff");
-
-    SchemaManager schemaManager = ds.getSchemaManager();
-    LdifReader reader = null;
-
-    try {
-      final String content = StrSubstitutor.replace(IOUtils.toString(is1), map);
-      reader = new LdifReader(new StringReader(content));
-
-      for (LdifEntry ldifEntry : reader) {
-        ds.getAdminSession().add(new DefaultEntry(schemaManager,
-                ldifEntry.getEntry()));
-      }
-    } finally {
-      IOUtils.closeQuietly(reader);
-      IOUtils.closeQuietly(is1);
-    }
-
-    KerberosConfig kerberosConfig = new KerberosConfig();
-    kerberosConfig.setMaximumRenewableLifetime(Long.parseLong(conf
-        .getProperty(MAX_RENEWABLE_LIFETIME)));
-    kerberosConfig.setMaximumTicketLifetime(Long.parseLong(conf
-        .getProperty(MAX_TICKET_LIFETIME)));
-    kerberosConfig.setSearchBaseDn(String.format("dc=%s,dc=%s", orgName,
-        orgDomain));
-    kerberosConfig.setPaEncTimestampRequired(false);
-    kdc = new KdcServer(kerberosConfig);
-    kdc.setDirectoryService(ds);
-
+  private void prepareKdcServer() throws Exception {
-    String transport = conf.getProperty(TRANSPORT);
-    AbstractTransport absTransport;
-    if (transport.trim().equals("TCP")) {
-      absTransport = new TcpTransport(bindAddress, port, 3, 50);
-    } else if (transport.trim().equals("UDP")) {
-      absTransport = new UdpTransport(port);
-    } else {
-      throw new IllegalArgumentException("Invalid transport: " + transport);
+    simpleKdc.setWorkDir(workDir);
+    simpleKdc.setKdcHost(getHost());
+    simpleKdc.setKdcRealm(realm);
+    if (transport == null) {
+      transport = conf.getProperty(TRANSPORT);
-    kdc.addTransports(absTransport);
-    kdc.setServiceName(conf.getProperty(INSTANCE));
-    kdc.start();
-    // if using ephemeral port, update port number for binding
-      InetSocketAddress addr =
-          (InetSocketAddress)absTransport.getAcceptor().getLocalAddress();
-      port = addr.getPort();
+      port = NetworkUtil.getServerPort();
-
-    StringBuilder sb = new StringBuilder();
-    InputStream is2 = getResourceAsStream("minikdc-krb5.conf");
-
-    BufferedReader r = null;
-
-    try {
-      r = new BufferedReader(new InputStreamReader(is2, Charsets.UTF_8));
-      String line = r.readLine();
-
-      while (line != null) {
-        sb.append(line).append("{3}");
-        line = r.readLine();
+    if (transport != null) {
+      if (transport.trim().equals("TCP")) {
+        simpleKdc.setKdcTcpPort(port);
+        simpleKdc.setAllowUdp(false);
+      } else if (transport.trim().equals("UDP")) {
+        simpleKdc.setKdcUdpPort(port);
+        simpleKdc.setAllowTcp(false);
+      } else {
+        throw new IllegalArgumentException("Invalid transport: " + transport);
-    } finally {
-      IOUtils.closeQuietly(r);
-      IOUtils.closeQuietly(is2);
-    }
-
-    krb5conf = new File(workDir, "krb5.conf").getAbsoluteFile();
-    FileUtils.writeStringToFile(krb5conf,
-            MessageFormat.format(sb.toString(), getRealm(), getHost(),
-                    Integer.toString(getPort()), System.getProperty("line.separator")));
-    System.setProperty(JAVA_SECURITY_KRB5_CONF, krb5conf.getAbsolutePath());
-
-    System.setProperty(SUN_SECURITY_KRB5_DEBUG, conf.getProperty(DEBUG,
-            "false"));
-
-    // refresh the config
-    Class<?> classRef;
-    if (System.getProperty("java.vendor").contains("IBM")) {
-      classRef = Class.forName("com.ibm.security.krb5.internal.Config");
-      classRef = Class.forName("sun.security.krb5.Config");
+      throw new IllegalArgumentException("Need to set transport!");
-    Method refreshMethod = classRef.getMethod("refresh", new Class[0]);
-    refreshMethod.invoke(classRef, new Object[0]);
-
-    LOG.info("MiniKdc listening at port: {}", getPort());
-    LOG.info("MiniKdc setting JVM krb5.conf to: {}",
-            krb5conf.getAbsolutePath());
+    simpleKdc.getKdcConfig().setString(KdcConfigKey.KDC_SERVICE_NAME,
+            conf.getProperty(INSTANCE));
+    if (conf.getProperty(DEBUG) != null) {
+      krb5Debug = getAndSet(SUN_SECURITY_KRB5_DEBUG, conf.getProperty(DEBUG));
+    }
-    if (kdc != null) {
-      System.getProperties().remove(JAVA_SECURITY_KRB5_CONF);
-      System.getProperties().remove(SUN_SECURITY_KRB5_DEBUG);
-      kdc.stop();
+    if (simpleKdc != null) {
-        ds.shutdown();
-      } catch (Exception ex) {
-        LOG.error("Could not shutdown ApacheDS properly: {}", ex.toString(),
-                ex);
+        simpleKdc.stop();
+      } catch (KrbException e) {
+        e.printStackTrace();
+      } finally {
+        if(conf.getProperty(DEBUG) != null) {
+          System.setProperty(SUN_SECURITY_KRB5_DEBUG,
+                  Boolean.toString(krb5Debug));
+        }
+    try {
+      // Will be fixed in next Kerby version.
+      Thread.sleep(1000);
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    }
+    LOG.info("MiniKdc stopped.");
-    String orgName= conf.getProperty(ORG_NAME);
-    String orgDomain = conf.getProperty(ORG_DOMAIN);
-    String baseDn = "ou=users,dc=" + orgName.toLowerCase(Locale.ENGLISH)
-                    + ",dc=" + orgDomain.toLowerCase(Locale.ENGLISH);
-    String content = "dn: uid=" + principal + "," + baseDn + "\n" +
-            "objectClass: top\n" +
-            "objectClass: person\n" +
-            "objectClass: inetOrgPerson\n" +
-            "objectClass: krb5principal\n" +
-            "objectClass: krb5kdcentry\n" +
-            "cn: " + principal + "\n" +
-            "sn: " + principal + "\n" +
-            "uid: " + principal + "\n" +
-            "userPassword: " + password + "\n" +
-            "krb5PrincipalName: " + principal + "@" + getRealm() + "\n" +
-            "krb5KeyVersionNumber: 0";
-
-    for (LdifEntry ldifEntry : new LdifReader(new StringReader(content))) {
-      ds.getAdminSession().add(new DefaultEntry(ds.getSchemaManager(),
-              ldifEntry.getEntry()));
-    }
+    simpleKdc.createPrincipal(principal, password);
-   * Creates  multiple principals in the KDC and adds them to a keytab file.
+   * Creates multiple principals in the KDC and adds them to a keytab file.
-   * @param keytabFile keytab file to add the created principal.s
+   * @param keytabFile keytab file to add the created principals.
-  public void createPrincipal(File keytabFile, String ... principals)
+  public synchronized void createPrincipal(File keytabFile,
+                                           String ... principals)
-    String generatedPassword = UUID.randomUUID().toString();
-    Keytab keytab = new Keytab();
-    List<KeytabEntry> entries = new ArrayList<KeytabEntry>();
-    for (String principal : principals) {
-      createPrincipal(principal, generatedPassword);
-      principal = principal + "@" + getRealm();
-      KerberosTime timestamp = new KerberosTime();
-      for (Map.Entry<EncryptionType, EncryptionKey> entry : KerberosKeyFactory
-              .getKerberosKeys(principal, generatedPassword).entrySet()) {
-        EncryptionKey ekey = entry.getValue();
-        byte keyVersion = (byte) ekey.getKeyVersion();
-        entries.add(new KeytabEntry(principal, 1L, timestamp, keyVersion,
-                ekey));
-      }
+    simpleKdc.createPrincipals(principals);
+    if (keytabFile.exists() && !keytabFile.delete()) {
+      LOG.error("Failed to delete keytab file: " + keytabFile);
-    keytab.setEntries(entries);
-    keytab.write(keytabFile);
+    for (String principal : principals) {
+      simpleKdc.getKadmin().exportKeytab(keytabFile, principal);
+    }
+  }
+
+  /**
+   * Set the System property; return the old value for caching.
+   *
+   * @param sysprop property
+   * @param debug true or false
+   * @return the previous value
+   */
+  private boolean getAndSet(String sysprop, String debug) {
+    boolean old = Boolean.getBoolean(sysprop);
+    System.setProperty(sysprop, debug);
+    return old;

MOV23 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 UPD43 MOV43 INS83 INS39 INS59 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 INS39 INS42 MOV43 INS8 INS83 INS39 INS42 MOV43 INS8 MOV29 INS83 INS83 INS39 INS42 INS8 MOV29 UPD42 MOV44 MOV44 MOV43 INS8 MOV29 MOV44 MOV44 MOV43 INS29 INS83 INS39 INS42 INS44 MOV44 INS8 UPD66 UPD42 UPD42 UPD42 INS42 MOV43 INS42 MOV21 INS21 MOV41 INS21 INS21 INS21 INS21 MOV60 MOV60 INS21 MOV21 MOV21 MOV21 MOV21 MOV25 INS25 MOV25 MOV21 INS25 INS25 MOV21 INS54 MOV21 MOV21 INS21 INS25 INS65 INS65 INS65 INS65 MOV43 INS42 UPD42 MOV60 MOV21 INS41 INS7 INS7 INS32 INS32 INS32 MOV43 INS7 MOV27 INS8 UPD27 INS8 INS27 INS8 INS27 INS8 INS8 INS12 UPD66 UPD66 INS32 INS27 INS8 MOV44 INS42 INS66 INS42 INS66 INS42 INS66 INS66 UPD39 INS42 INS22 INS42 INS42 INS14 UPD42 INS42 INS14 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 UPD42 INS42 INS32 UPD42 UPD42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 INS21 UPD42 MOV25 INS32 UPD42 INS40 INS32 INS33 MOV21 UPD42 MOV42 MOV33 INS54 MOV21 INS44 INS8 UPD45 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS38 INS21 UPD42 INS32 UPD42 INS42 INS42 INS42 INS52 INS42 MOV43 MOV32 INS43 UPD43 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 INS27 INS42 INS7 UPD42 MOV42 INS42 MOV42 MOV42 UPD42 MOV42 INS7 INS8 INS12 INS8 INS32 INS43 INS42 MOV21 UPD42 UPD42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS22 UPD42 UPD42 INS42 INS42 UPD42 INS32 UPD42 UPD45 MOV45 MOV32 UPD45 MOV45 UPD42 MOV32 INS42 INS32 INS21 UPD43 INS45 INS42 INS32 MOV21 INS44 INS8 INS25 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 UPD42 INS42 UPD42 MOV42 INS52 INS42 INS52 INS42 INS22 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS21 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 INS32 INS43 INS42 MOV21 INS27 INS8 UPD42 UPD42 UPD45 MOV45 UPD42 MOV42 UPD42 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS33 MOV21 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL83 DEL42 DEL8 DEL31 DEL42 DEL43 DEL42 DEL32 DEL40 DEL42 DEL43 DEL42 DEL43 DEL74 DEL45 DEL9 DEL14 DEL45 DEL42 DEL43 DEL57 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL34 DEL14 DEL7 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL32 DEL32 DEL45 DEL42 DEL45 DEL32 DEL7 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL40 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL14 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL27 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL76 DEL76 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL76 DEL76 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL45 DEL9 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL45 DEL9 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL45 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL70 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL14 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL43 DEL42 DEL45 DEL14 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL76 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL8 DEL42 DEL42 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL25 DEL43 DEL42 DEL42 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL45 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL40 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL45 DEL40 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL45 DEL42 DEL45 DEL42 DEL32 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL39 DEL32 DEL11 DEL42 DEL42 DEL43 DEL42 DEL34 DEL42 DEL42 DEL42 DEL14 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL27 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8