HADOOP-10158. SPNEGO should work with multiple interfaces/SPNs. Contributed by Daryn Sharp.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593362 13f79535-47bb-0310-9956-ffa450edef68

+
-import java.security.Principal;
+import java.util.ArrayList;
-import java.util.HashSet;
+import java.util.List;
+import java.util.regex.Pattern;
-  private String principal;
-  private LoginContext loginContext;
+  private Subject serverSubject = new Subject();
+  private List<LoginContext> loginContexts = new ArrayList<LoginContext>();
-      principal = config.getProperty(PRINCIPAL, principal);
+      String principal = config.getProperty(PRINCIPAL);
+      
+      // use all SPNEGO principals in the keytab if a principal isn't
+      // specifically configured
+      final String[] spnegoPrincipals;
+      if (principal.equals("*")) {
+        spnegoPrincipals = KerberosUtil.getPrincipalNames(
+            keytab, Pattern.compile("HTTP/.*"));
+        if (spnegoPrincipals.length == 0) {
+          throw new ServletException("Principals do not exist in the keytab");
+        }
+      } else {
+        spnegoPrincipals = new String[]{principal};
+      }
-      Set<Principal> principals = new HashSet<Principal>();
-      principals.add(new KerberosPrincipal(principal));
-      Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>());
-
-      KerberosConfiguration kerberosConfiguration = new KerberosConfiguration(keytab, principal);
-
-      LOG.info("Login using keytab "+keytab+", for principal "+principal);
-      loginContext = new LoginContext("", subject, null, kerberosConfiguration);
-      loginContext.login();
-
-      Subject serverSubject = loginContext.getSubject();
+      for (String spnegoPrincipal : spnegoPrincipals) {
+        LOG.info("Login using keytab {}, for principal {}",
+            keytab, principal);
+        final KerberosConfiguration kerberosConfiguration =
+            new KerberosConfiguration(keytab, spnegoPrincipal);
+        final LoginContext loginContext =
+            new LoginContext("", serverSubject, null, kerberosConfiguration);
+        try {
+          loginContext.login();
+        } catch (LoginException le) {
+          LOG.warn("Failed to login as [{}]", spnegoPrincipal, le);
+          throw new AuthenticationException(le);          
+        }
+        loginContexts.add(loginContext);
+      }
-      LOG.info("Initialized, principal [{}] from keytab [{}]", principal, keytab);
-    try {
-      if (loginContext != null) {
+    keytab = null;
+    serverSubject = null;
+    for (LoginContext loginContext : loginContexts) {
+      try {
-        loginContext = null;
+      } catch (LoginException ex) {
+        LOG.warn(ex.getMessage(), ex);
-    } catch (LoginException ex) {
-      LOG.warn(ex.getMessage(), ex);
+    loginContexts.clear();
-   * Returns the Kerberos principal used by the authentication handler.
+   * Returns the Kerberos principals used by the authentication handler.
-   * @return the Kerberos principal used by the authentication handler.
+   * @return the Kerberos principals used by the authentication handler.
-  protected String getPrincipal() {
-    return principal;
+  protected Set<KerberosPrincipal> getPrincipals() {
+    return serverSubject.getPrincipals(KerberosPrincipal.class);
-      Subject serverSubject = loginContext.getSubject();
+      final String serverName = request.getServerName();
-              if (IBM_JAVA) {
-                // IBM JDK needs non-null credentials to be passed to createContext here, with
-                // SPNEGO mechanism specified, otherwise JGSS will use its default mechanism
-                // only, which is Kerberos V5.
-                gssCreds = gssManager.createCredential(null, GSSCredential.INDEFINITE_LIFETIME,
-                    new Oid[]{KerberosUtil.getOidInstance("GSS_SPNEGO_MECH_OID"),
-                        KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID")},
-                    GSSCredential.ACCEPT_ONLY);
-              }
+              gssCreds = gssManager.createCredential(
+                  gssManager.createName(
+                      KerberosUtil.getServicePrincipal("HTTP", serverName),
+                      KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL")),
+                  GSSCredential.INDEFINITE_LIFETIME,
+                  new Oid[]{
+                    KerberosUtil.getOidInstance("GSS_SPNEGO_MECH_OID"),
+                    KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID")},
+                  GSSCredential.ACCEPT_ONLY);

MOV26 INS26 MOV23 UPD40 UPD40 INS40 MOV43 INS74 INS8 UPD74 MOV74 UPD42 UPD42 INS14 INS43 MOV43 UPD42 INS14 INS21 INS21 INS70 INS21 UPD43 MOV43 INS42 INS74 MOV60 INS7 INS7 INS44 INS42 MOV8 INS32 UPD66 UPD66 UPD42 INS32 INS43 INS43 INS60 INS25 INS70 INS42 INS33 INS42 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS42 INS43 INS59 INS83 INS5 INS59 INS32 INS8 INS8 INS44 INS42 INS8 INS42 MOV8 MOV43 INS83 MOV43 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS42 INS45 MOV21 INS25 INS21 MOV43 INS42 MOV21 MOV60 INS60 INS54 INS21 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 INS7 INS27 INS8 INS7 UPD42 MOV42 INS83 INS83 INS43 INS59 INS8 INS12 INS32 UPD42 UPD42 INS42 INS32 INS40 INS34 INS53 INS42 INS3 INS45 INS42 INS42 INS42 INS42 INS14 MOV21 INS44 INS8 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS14 INS5 INS4 UPD42 MOV43 MOV45 UPD42 MOV42 MOV33 MOV42 INS43 INS42 MOV21 INS53 INS42 INS42 INS45 INS43 INS45 INS43 INS85 INS42 UPD42 MOV42 INS14 INS42 UPD42 MOV42 UPD42 UPD45 UPD42 UPD42 INS43 INS42 INS42 MOV21 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS45 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL42 DEL14 DEL32 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL9 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL43 DEL42 DEL43 DEL74 DEL14 DEL14 DEL59 DEL60 DEL42 DEL14 DEL7 DEL21 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL42 DEL43 DEL33 DEL42 DEL8 DEL25