HADOOP-10607. Create API to separate credential/password storage from
applications. (Larry McCay via omalley)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603491 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.security.alias.CredentialProvider;
+import org.apache.hadoop.security.alias.CredentialProvider.CredentialEntry;
+import org.apache.hadoop.security.alias.CredentialProviderFactory;
+   * Get the value for a known password configuration element.
+   * In order to enable the elimination of clear text passwords in config,
+   * this method attempts to resolve the property name as an alias through
+   * the CredentialProvider API and conditionally fallsback to config.
+   * @param name property name
+   * @return password
+   */
+  public char[] getPassword(String name) throws IOException {
+    char[] pass = null;
+
+    pass = getPasswordFromCredenitalProviders(name);
+
+    if (pass == null) {
+      pass = getPasswordFromConfig(name);
+    }
+
+    return pass;
+  }
+
+  /**
+   * Try and resolve the provided element name as a credential provider
+   * alias.
+   * @param name alias of the provisioned credential
+   * @return password or null if not found
+   * @throws IOException
+   */
+  protected char[] getPasswordFromCredenitalProviders(String name)
+      throws IOException {
+    char[] pass = null;
+    try {
+      List<CredentialProvider> providers =
+          CredentialProviderFactory.getProviders(this);
+
+      if (providers != null) {
+        for (CredentialProvider provider : providers) {
+          try {
+            CredentialEntry entry = provider.getCredentialEntry(name);
+            if (entry != null) {
+              pass = entry.getCredential();
+              break;
+            }
+          }
+          catch (IOException ioe) {
+            throw new IOException("Can't get key " + name + " from key provider" +
+            		"of type: " + provider.getClass().getName() + ".", ioe);
+          }
+        }
+      }
+    }
+    catch (IOException ioe) {
+      throw new IOException("Configuration problem with provider path.", ioe);
+    }
+
+    return pass;
+  }
+
+  /**
+   * Fallback to clear text passwords in configuration.
+   * @param name
+   * @return clear text password or null
+   */
+  protected char[] getPasswordFromConfig(String name) {
+    char[] pass = null;
+    if (getBoolean(CredentialProvider.CLEAR_TEXT_FALLBACK, true)) {
+      String passStr = get(name);
+      if (passStr != null) {
+        pass = passStr.toCharArray();
+      }
+    }
+    return pass;
+  }
+
+  /**

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS83 INS5 INS42 INS44 INS8 INS65 INS65 INS65 INS39 INS85 INS43 INS42 INS42 INS60 INS21 INS25 INS41 INS65 INS65 INS65 INS65 INS39 INS85 INS43 INS42 INS42 INS60 INS54 INS41 INS65 INS65 INS65 INS39 INS85 INS43 INS42 INS60 INS25 INS41 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS5 INS59 INS7 INS27 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS5 INS59 INS8 INS12 INS42 INS66 INS42 INS66 INS42 INS5 INS59 INS32 INS8 INS42 INS39 INS85 INS42 INS33 INS42 INS32 INS42 INS33 INS21 INS39 INS85 INS42 INS33 INS60 INS25 INS44 INS8 INS39 INS85 INS42 INS33 INS42 INS40 INS9 INS60 INS25 INS42 INS42 INS7 INS74 INS59 INS27 INS8 INS43 INS42 INS53 INS43 INS59 INS27 INS8 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS44 INS42 INS8 INS43 INS45 INS42 INS42 INS42 INS7 INS43 INS42 INS54 INS42 INS42 INS32 INS42 INS8 INS12 INS42 INS42 INS60 INS25 INS44 INS8 INS43 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS33 INS21 INS10 INS42 INS14 INS42 INS42 INS42 INS7 INS43 INS27 INS42 INS42 INS32 INS42 INS45 INS42 INS45 INS45 INS32 INS45 INS42 INS42 INS32 INS42 INS42 INS42