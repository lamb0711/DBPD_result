HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.

+import java.util.ArrayList;
+import com.microsoft.windowsazure.storage.blob.CloudBlob;
+import com.microsoft.windowsazure.storage.blob.PageRange;
- * 
+ *
-    public abstract CloudBlockBlobWrapper getBlockBlobReference(
+    public abstract CloudBlobWrapper getBlockBlobReference(
+  
+    /**
+     * Returns a wrapper for a CloudPageBlob.
+     *
+     * @param relativePath
+     *            A <code>String</code> that represents the name of the blob, relative to the container 
+     *
+     * @throws StorageException
+     *             If a storage service error occurred.
+     * 
+     * @throws URISyntaxException
+     *             If URI syntax exception occurred.            
+     */
+    public abstract CloudBlobWrapper getPageBlobReference(String relativePath)
+        throws URISyntaxException, StorageException;
-
+  
+  
-   * A thin wrapper over the {@link CloudBlockBlob} class that simply redirects
-   * calls to the real object except in unit tests.
+   * A thin wrapper over the {@link CloudBlob} class that simply redirects calls
+   * to the real object except in unit tests.
-  public abstract static class CloudBlockBlobWrapper implements ListBlobItem {
+  public interface CloudBlobWrapper extends ListBlobItem {
-    public abstract URI getUri();
+    URI getUri();
-    public abstract HashMap<String, String> getMetadata();
+    HashMap<String, String> getMetadata();
-    public abstract void setMetadata(HashMap<String, String> metadata);
+    void setMetadata(HashMap<String, String> metadata);
-     * Copies an existing blob's contents, properties, and metadata to this
-     * instance of the <code>CloudBlob</code> class, using the specified
-     * operation context.
-     * 
-     * @param sourceBlob
-     *          A <code>CloudBlob</code> object that represents the source blob
-     *          to copy.
+     * Copies an existing blob's contents, properties, and metadata to this instance of the <code>CloudBlob</code>
+     * class, using the specified operation context.
+     *
+     * @param source
+     *            A <code>java.net.URI</code> The URI of a source blob.
-     *          An {@link OperationContext} object that represents the context
-     *          for the current operation. This object is used to track requests
-     *          to the storage service, and to provide additional runtime
-     *          information about the operation.
-     * 
+     *            An {@link OperationContext} object that represents the context for the current operation. This object
+     *            is used to track requests to the storage service, and to provide additional runtime information about
+     *            the operation.
+     *
-     *           If a storage service error occurred.
+     *             If a storage service error occurred.
-     * 
+     *
-    public abstract void startCopyFromBlob(CloudBlockBlobWrapper sourceBlob,
-        OperationContext opContext) throws StorageException, URISyntaxException;
-
+    public abstract void startCopyFromBlob(URI source,
+        OperationContext opContext)
+        throws StorageException, URISyntaxException;
+    
-    public abstract CopyState getCopyState();
+    CopyState getCopyState();
+
+    /**
+     * Downloads a range of bytes from the blob to the given byte buffer, using the specified request options and
+     * operation context.
+     *
+     * @param offset
+     *            The byte offset to use as the starting point for the source.
+     * @param length
+     *            The number of bytes to read.
+     * @param buffer
+     *            The byte buffer, as an array of bytes, to which the blob bytes are downloaded.
+     * @param bufferOffset
+     *            The byte offset to use as the starting point for the target.
+     * @param options
+     *            A {@link BlobRequestOptions} object that specifies any additional options for the request. Specifying
+     *            <code>null</code> will use the default request options from the associated service client (
+     *            {@link CloudBlobClient}).
+     * @param opContext
+     *            An {@link OperationContext} object that represents the context for the current operation. This object
+     *            is used to track requests to the storage service, and to provide additional runtime information about
+     *            the operation.
+     *
+     * @throws StorageException
+     *             If a storage service error occurred.
+     */
+    void downloadRange(final long offset, final long length,
+        final OutputStream outStream, final BlobRequestOptions options,
+        final OperationContext opContext)
+            throws StorageException, IOException;
-    public abstract void delete(OperationContext opContext)
+    void delete(OperationContext opContext, SelfRenewingLease lease)
-     * @return <code>true</code> if the blob exists, other wise
+     * @return <code>true</code> if the blob exists, otherwise
-     *           f a storage service error occurred.
+     *           If a storage service error occurred.
-    public abstract boolean exists(OperationContext opContext)
+    boolean exists(OperationContext opContext)
-    public abstract void downloadAttributes(OperationContext opContext)
+    void downloadAttributes(OperationContext opContext)
-    public abstract BlobProperties getProperties();
+    BlobProperties getProperties();
-    public abstract InputStream openInputStream(BlobRequestOptions options,
+    InputStream openInputStream(BlobRequestOptions options,
-     * Creates and opens an output stream to write data to the block blob using
-     * the specified operation context.
-     * 
-     * @param opContext
-     *          An {@link OperationContext} object that represents the context
-     *          for the current operation. This object is used to track requests
-     *          to the storage service, and to provide additional runtime
-     *          information about the operation.
-     * 
-     * @return A {@link BlobOutputStream} object used to write data to the blob.
-     * 
-     * @throws StorageException
-     *           If a storage service error occurred.
-     */
-    public abstract OutputStream openOutputStream(BlobRequestOptions options,
-        OperationContext opContext) throws StorageException;
-
-    /**
-     * Uploads the source stream data to the blob, using the specified operation
-     * context.
-     * 
-     * @param sourceStream
-     *          An <code>InputStream</code> object that represents the input
-     *          stream to write to the block blob.
-     * @param opContext
-     *          An {@link OperationContext} object that represents the context
-     *          for the current operation. This object is used to track requests
-     *          to the storage service, and to provide additional runtime
-     *          information about the operation.
-     * 
-     * @throws IOException
-     *           If an I/O error occurred.
-     * @throws StorageException
-     *           If a storage service error occurred.
-     */
-    public abstract void upload(InputStream sourceStream,
-        OperationContext opContext) throws StorageException, IOException;
-
-    /**
-    public abstract void uploadMetadata(OperationContext opContext)
+    void uploadMetadata(OperationContext opContext)
-    public abstract void uploadProperties(OperationContext opContext)
+    void uploadProperties(OperationContext opContext,
+        SelfRenewingLease lease)
+    SelfRenewingLease acquireLease() throws StorageException;
+    
-    public abstract void setStreamMinimumReadSizeInBytes(
+    void setStreamMinimumReadSizeInBytes(
-    public abstract void setWriteBlockSizeInBytes(int writeBlockSizeBytes);
+    void setWriteBlockSizeInBytes(int writeBlockSizeBytes);
+    CloudBlob getBlob();
-}
+
+  /**
+   * A thin wrapper over the {@link CloudBlockBlob} class that simply redirects calls
+   * to the real object except in unit tests.
+   */
+  public abstract interface CloudBlockBlobWrapper
+      extends CloudBlobWrapper {
+    /**
+     * Creates and opens an output stream to write data to the block blob using the specified 
+     * operation context.
+     * 
+     * @param opContext
+     *            An {@link OperationContext} object that represents the context for the current operation. This object
+     *            is used to track requests to the storage service, and to provide additional runtime information about
+     *            the operation.
+     * 
+     * @return A {@link BlobOutputStream} object used to write data to the blob.
+     * 
+     * @throws StorageException
+     *             If a storage service error occurred.
+     */
+    OutputStream openOutputStream(
+        BlobRequestOptions options,
+        OperationContext opContext) throws StorageException;
+  }
+
+  /**
+   * A thin wrapper over the {@link CloudPageBlob} class that simply redirects calls
+   * to the real object except in unit tests.
+   */
+  public abstract interface CloudPageBlobWrapper
+      extends CloudBlobWrapper {
+    /**
+     * Creates a page blob using the specified request options and operation context.
+     *
+     * @param length
+     *            The size, in bytes, of the page blob.
+     * @param options
+     *            A {@link BlobRequestOptions} object that specifies any additional options for the request. Specifying
+     *            <code>null</code> will use the default request options from the associated service client (
+     *            {@link CloudBlobClient}).
+     * @param opContext
+     *            An {@link OperationContext} object that represents the context for the current operation. This object
+     *            is used to track requests to the storage service, and to provide additional runtime information about
+     *            the operation.
+     *
+     * @throws IllegalArgumentException
+     *             If the length is not a multiple of 512.
+     *
+     * @throws StorageException
+     *             If a storage service error occurred.
+     */
+    void create(final long length, BlobRequestOptions options,
+            OperationContext opContext) throws StorageException;
+    
+
+    /**
+     * Uploads a range of contiguous pages, up to 4 MB in size, at the specified offset in the page blob, using the
+     * specified lease ID, request options, and operation context.
+     * 
+     * @param sourceStream
+     *            An <code>InputStream</code> object that represents the input stream to write to the page blob.
+     * @param offset
+     *            The offset, in number of bytes, at which to begin writing the data. This value must be a multiple of
+     *            512.
+     * @param length
+     *            The length, in bytes, of the data to write. This value must be a multiple of 512.
+     * @param options
+     *            A {@link BlobRequestOptions} object that specifies any additional options for the request. Specifying
+     *            <code>null</code> will use the default request options from the associated service client (
+     *            {@link CloudBlobClient}).
+     * @param opContext
+     *            An {@link OperationContext} object that represents the context for the current operation. This object
+     *            is used to track requests to the storage service, and to provide additional runtime information about
+     *            the operation.
+     * 
+     * @throws IllegalArgumentException
+     *             If the offset or length are not multiples of 512, or if the length is greater than 4 MB.
+     * @throws IOException
+     *             If an I/O exception occurred.
+     * @throws StorageException
+     *             If a storage service error occurred.
+     */
+    void uploadPages(final InputStream sourceStream, final long offset,
+        final long length, BlobRequestOptions options,
+        OperationContext opContext) throws StorageException, IOException;
+
+    /**
+     * Returns a collection of page ranges and their starting and ending byte offsets using the specified request
+     * options and operation context.
+     *
+     * @param options
+     *            A {@link BlobRequestOptions} object that specifies any additional options for the request. Specifying
+     *            <code>null</code> will use the default request options from the associated service client (
+     *            {@link CloudBlobClient}).
+     * @param opContext
+     *            An {@link OperationContext} object that represents the context for the current operation. This object
+     *            is used to track requests to the storage service, and to provide additional runtime information about
+     *            the operation.
+     *
+     * @return An <code>ArrayList</code> object that represents the set of page ranges and their starting and ending
+     *         byte offsets.
+     *
+     * @throws StorageException
+     *             If a storage service error occurred.
+     */
+
+    ArrayList<PageRange> downloadPageRanges(BlobRequestOptions options,
+            OperationContext opContext) throws StorageException;
+    
+    void uploadMetadata(OperationContext opContext)
+        throws StorageException; 
+  }
+}

INS26 INS26 INS26 INS40 INS40 INS40 MOV31 INS55 INS55 INS31 UPD42 INS31 INS31 INS29 INS83 INS83 INS42 INS43 MOV31 INS29 INS83 INS83 INS42 INS43 INS31 INS31 INS31 INS31 UPD43 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS43 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS42 INS43 INS43 INS42 INS65 INS42 INS65 INS42 INS29 INS39 INS42 INS44 INS44 INS44 INS43 INS29 INS39 INS42 MOV44 INS44 INS44 INS44 MOV44 INS43 INS43 INS29 INS74 INS42 INS44 MOV44 MOV43 INS39 INS42 INS44 INS43 UPD42 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS42 INS65 UPD66 UPD66 UPD43 UPD42 INS65 INS65 INS65 INS65 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS66 MOV65 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS83 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS83 INS83 INS39 INS42 INS83 INS39 INS42 INS43 INS42 INS42 INS42 INS65 INS65 INS65 INS65 MOV65 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 UPD66 UPD42 UPD66 UPD66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 UPD42 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 UPD66 UPD66 UPD42 UPD66 INS42 INS42 INS42 INS42 UPD66 UPD66 INS42 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL66 DEL66 DEL66 DEL83 DEL83 DEL66 DEL83 DEL83 DEL39 DEL42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL66 DEL83 DEL83