YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)

Change-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc

+import org.apache.hadoop.yarn.proto.YarnServerCommonProtos;
+import org.apache.hadoop.yarn.server.records.Version;
+import org.apache.hadoop.yarn.server.records.impl.pb.VersionPBImpl;
+import org.apache.hadoop.yarn.server.resourcemanager.RMContext;
-public class LeveldbConfigurationStore implements YarnConfigurationStore {
+public class LeveldbConfigurationStore extends YarnConfigurationStore {
-  private static final String LOG_PREFIX = "log.";
-  private static final String LOG_COMMITTED_TXN = "committedTxn";
+  private static final String LOG_KEY = "log";
+  private static final String VERSION_KEY = "version";
-  // Txnid for the last transaction logged to the store.
-  private long txnId = 0;
-  private long minTxn = 0;
-  private LinkedList<LogMutation> pendingMutations = new LinkedList<>();
+  private LogMutation pendingMutation;
+  private static final Version CURRENT_VERSION_INFO = Version
+      .newInstance(0, 1);
-  public void initialize(Configuration config, Configuration schedConf)
-      throws IOException {
+  public void initialize(Configuration config, Configuration schedConf,
+      RMContext rmContext) throws IOException {
-      this.txnId = Long.parseLong(new String(db.get(bytes(LOG_COMMITTED_TXN)),
-          StandardCharsets.UTF_8));
-      DBIterator itr = db.iterator();
-      itr.seek(bytes(LOG_PREFIX + txnId));
-      // Seek to first uncommitted log
-      itr.next();
-      while (itr.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = itr.next();
-        if (!new String(entry.getKey(), StandardCharsets.UTF_8)
-            .startsWith(LOG_PREFIX)) {
-          break;
-        }
-        pendingMutations.add(deserLogMutation(entry.getValue()));
-        txnId++;
-      }
-      // Get the earliest txnId stored in logs
-      itr.seekToFirst();
-      if (itr.hasNext()) {
-        Map.Entry<byte[], byte[]> entry = itr.next();
-        byte[] key = entry.getKey();
-        String logId = new String(key, StandardCharsets.UTF_8);
-        if (logId.startsWith(LOG_PREFIX)) {
-          minTxn = Long.parseLong(logId.substring(logId.indexOf('.') + 1));
-        }
-      }
-          YarnConfiguration.RM_SCHEDCONF_LEVELDB_MAX_LOGS,
+          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,
-        int key1Txn = Integer.MAX_VALUE;
-        int key2Txn = Integer.MAX_VALUE;
-        if (key1Str.startsWith(LOG_PREFIX)) {
-          key1Txn = Integer.parseInt(key1Str.substring(
-              key1Str.indexOf('.') + 1));
+        if (key1Str.equals(key2Str)) {
+          return 0;
+        } else if (key1Str.equals(VERSION_KEY)) {
+          return -1;
+        } else if (key2Str.equals(VERSION_KEY)) {
+          return 1;
+        } else if (key1Str.equals(LOG_KEY)) {
+          return -1;
+        } else if (key2Str.equals(LOG_KEY)) {
+          return 1;
-        if (key2Str.startsWith(LOG_PREFIX)) {
-          key2Txn = Integer.parseInt(key2Str.substring(
-              key2Str.indexOf('.') + 1));
-        }
-        // TODO txnId could overflow, in theory
-        if (key1Txn == Integer.MAX_VALUE && key2Txn == Integer.MAX_VALUE) {
-          if (key1Str.equals(key2Str) && key1Str.equals(LOG_COMMITTED_TXN)) {
-            return 0;
-          } else if (key1Str.equals(LOG_COMMITTED_TXN)) {
-            return -1;
-          } else if (key2Str.equals(LOG_COMMITTED_TXN)) {
-            return 1;
-          }
-          return key1Str.compareTo(key2Str);
-        }
-        return key1Txn - key2Txn;
+        return key1Str.compareTo(key2Str);
-        return "logComparator";
+        return "keyComparator";
+
-          initBatch.put(bytes(LOG_COMMITTED_TXN), bytes("0"));
-  public synchronized long logMutation(LogMutation logMutation)
-      throws IOException {
-    logMutation.setId(++txnId);
-    WriteBatch logBatch = db.createWriteBatch();
-    logBatch.put(bytes(LOG_PREFIX + txnId), serLogMutation(logMutation));
-    if (txnId - minTxn >= maxLogs) {
-      logBatch.delete(bytes(LOG_PREFIX + minTxn));
-      minTxn++;
+  public void logMutation(LogMutation logMutation) throws IOException {
+    LinkedList<LogMutation> logs = deserLogMutations(db.get(bytes(LOG_KEY)));
+    logs.add(logMutation);
+    if (logs.size() > maxLogs) {
+      logs.removeFirst();
-    db.write(logBatch);
-    pendingMutations.add(logMutation);
-    return txnId;
+    db.put(bytes(LOG_KEY), serLogMutations(logs));
+    pendingMutation = logMutation;
-  public synchronized boolean confirmMutation(long id, boolean isValid)
-      throws IOException {
+  public void confirmMutation(boolean isValid) throws IOException {
-      LogMutation mutation = deserLogMutation(db.get(bytes(LOG_PREFIX + id)));
-          mutation.getUpdates().entrySet()) {
+          pendingMutation.getUpdates().entrySet()) {
-    updateBatch.put(bytes(LOG_COMMITTED_TXN), bytes(String.valueOf(id)));
-    // Assumes logMutation and confirmMutation are done in the same
-    // synchronized method. For example,
-    // {@link MutableCSConfigurationProvider#mutateConfiguration(
-    // UserGroupInformation user, SchedConfUpdateInfo confUpdate)}
-    pendingMutations.removeFirst();
-    return true;
+    pendingMutation = null;
-  private byte[] serLogMutation(LogMutation mutation) throws IOException {
+  private byte[] serLogMutations(LinkedList<LogMutation> mutations) throws
+      IOException {
-      oos.writeObject(mutation);
+      oos.writeObject(mutations);
-  private LogMutation deserLogMutation(byte[] mutation) throws IOException {
+  private LinkedList<LogMutation> deserLogMutations(byte[] mutations) throws
+      IOException {
-        new ByteArrayInputStream(mutation))) {
-      return (LogMutation) input.readObject();
+        new ByteArrayInputStream(mutations))) {
+      return (LinkedList<LogMutation>) input.readObject();
-    itr.seek(bytes(LOG_COMMITTED_TXN));
+    itr.seek(bytes(LOG_KEY));
-  public List<LogMutation> getPendingMutations() {
-    return new LinkedList<>(pendingMutations);
-  }
-
-  @Override
+  // TODO: following is taken from LeveldbRMStateStore
+  @Override
+  public Version getConfStoreVersion() throws Exception {
+    Version version = null;
+    try {
+      byte[] data = db.get(bytes(VERSION_KEY));
+      if (data != null) {
+        version = new VersionPBImpl(YarnServerCommonProtos.VersionProto
+            .parseFrom(data));
+      }
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+    return version;
+  }
+
+  @Override
+  public void storeVersion() throws Exception {
+    String key = VERSION_KEY;
+    byte[] data = ((VersionPBImpl) CURRENT_VERSION_INFO).getProto()
+        .toByteArray();
+    try {
+      db.put(bytes(key), data);
+    } catch (DBException e) {
+      throw new IOException(e);
+    }
+  }
+
+  @Override
+  public Version getCurrentVersion() {
+    return CURRENT_VERSION_INFO;
+  }
+

INS26 INS26 INS26 INS26 MOV23 MOV23 MOV31 MOV31 INS40 INS40 INS40 INS40 INS31 INS31 INS31 MOV43 MOV43 MOV43 INS83 INS83 INS43 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 INS44 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV44 MOV43 INS8 UPD39 UPD42 MOV74 UPD42 INS78 INS83 INS43 INS42 INS43 INS8 INS78 UPD39 UPD42 INS43 INS8 INS43 UPD42 UPD42 UPD45 UPD42 UPD45 UPD42 INS42 INS42 INS32 INS43 INS42 MOV21 INS54 INS60 MOV21 INS25 INS21 MOV21 INS74 UPD42 MOV5 UPD42 INS42 INS42 INS42 MOV60 INS54 INS41 INS42 INS42 MOV60 INS60 INS54 UPD42 MOV42 INS42 INS42 INS34 INS34 INS42 INS8 MOV12 INS74 INS59 INS27 INS8 INS32 INS7 INS7 INS43 INS43 INS43 INS8 INS12 INS42 MOV43 MOV5 INS59 INS8 INS12 INS42 MOV21 MOV21 MOV21 MOV21 INS43 INS43 INS42 INS32 UPD42 UPD42 INS42 INS32 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS33 INS42 MOV42 INS42 UPD42 INS33 MOV60 MOV25 INS44 INS8 UPD42 INS42 INS42 INS32 MOV21 INS44 INS8 UPD42 MOV42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV5 INS27 INS43 INS42 INS53 MOV32 INS42 INS43 INS42 INS53 MOV22 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 INS74 UPD42 INS42 INS33 INS42 INS14 INS36 INS42 UPD42 UPD42 INS32 INS42 INS42 INS14 UPD42 UPD42 MOV42 INS40 INS40 INS42 UPD42 UPD42 INS43 INS43 UPD42 UPD42 INS32 INS43 INS42 INS11 MOV42 INS42 INS43 INS42 INS25 MOV41 INS42 MOV42 INS42 INS42 UPD42 INS14 INS42 INS43 INS42 INS42 MOV32 MOV8 INS25 UPD45 INS43 INS32 INS42 MOV32 MOV8 INS25 INS42 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS41 MOV32 MOV8 MOV25 INS38 UPD42 UPD42 INS41 INS34 INS34 UPD42 UPD42 DEL39 DEL34 DEL39 DEL42 DEL34 DEL83 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL40 DEL14 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL32 DEL40 DEL43 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL32 DEL40 DEL14 DEL32 DEL38 DEL10 DEL8 DEL25 DEL42 DEL37 DEL21 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL40 DEL14 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL13 DEL32 DEL34 DEL27 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL13 DEL32 DEL34 DEL27 DEL32 DEL32 DEL7 DEL21 DEL39 DEL42 DEL40 DEL59 DEL60 DEL39 DEL42 DEL40 DEL59 DEL60 DEL25 DEL25 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL25 DEL8 DEL25 DEL42 DEL42 DEL27 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL32 DEL21 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL9 DEL41 DEL43 DEL43 DEL40 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL13 DEL32 DEL34 DEL27 DEL32 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL32 DEL42 DEL42 DEL42 DEL38 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL27 DEL42 DEL27 DEL42 DEL37 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL43 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL14