HADOOP-6904. Support method based RPC compatiblity. Contributed by Hairong Kuang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1064919 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.hadoop.security.authorize.AuthorizationException;
-import org.apache.hadoop.security.authorize.ServiceAuthorizationManager;
-import org.apache.hadoop.metrics.util.MetricsTimeVaryingRate;
-  private static final Log LOG = LogFactory.getLog(RPC.class);
+  static final Log LOG = LogFactory.getLog(RPC.class);
-  
-  public static Object waitForProxy(
-      Class<?> protocol,
+
+  /**
+   * Get a proxy connection to a remote server
+   * 
+   * @param protocol protocol class
+   * @param clientVersion client version
+   * @param addr remote address
+   * @param conf configuration to use
+   * @return the proxy
+   * @throws IOException if the far end through a RemoteException
+   */
+  public static <T> T waitForProxy(
+      Class<T> protocol,
-    return waitForProxy(protocol, clientVersion, addr, conf, Long.MAX_VALUE);
+    return waitForProtocolProxy(protocol, clientVersion, addr, conf).getProxy();
+  }
+
+  /**
+   * Get a protocol proxy that contains a proxy connection to a remote server
+   * and a set of methods that are supported by the server
+   * 
+   * @param protocol protocol class
+   * @param clientVersion client version
+   * @param addr remote address
+   * @param conf configuration to use
+   * @return the protocol proxy
+   * @throws IOException if the far end through a RemoteException
+   */
+  public static <T> ProtocolProxy<T> waitForProtocolProxy(Class<T> protocol,
+                             long clientVersion,
+                             InetSocketAddress addr,
+                             Configuration conf) throws IOException {
+    return waitForProtocolProxy(
+        protocol, clientVersion, addr, conf, Long.MAX_VALUE);
+   * 
-  public static Object waitForProxy(Class<?> protocol, long clientVersion,
+  public static <T> T waitForProxy(Class<T> protocol, long clientVersion,
-    return waitForProxy(protocol, clientVersion, addr, conf, 0, connTimeout);
+    return waitForProtocolProxy(protocol, clientVersion, addr,
+        conf, connTimeout).getProxy();
-    /**
-     * Get a proxy connection to a remote server
-     * @param protocol protocol class
-     * @param clientVersion client version
-     * @param addr remote address
-     * @param conf configuration to use
-     * @param rpcTimeout timeout for each RPC
-     * @param timeout time in milliseconds before giving up
-     * @return the proxy
-     * @throws IOException if the far end through a RemoteException
-     */
-    public static Object waitForProxy(Class<?> protocol, long clientVersion,
+
+  /**
+   * Get a protocol proxy that contains a proxy connection to a remote server
+   * and a set of methods that are supported by the server
+   * 
+   * @param protocol protocol class
+   * @param clientVersion client version
+   * @param addr remote address
+   * @param conf configuration to use
+   * @param connTimeout time in milliseconds before giving up
+   * @return the protocol proxy
+   * @throws IOException if the far end through a RemoteException
+   */
+  public static <T> ProtocolProxy<T> waitForProtocolProxy(Class<T> protocol,
+                             long clientVersion,
+                             InetSocketAddress addr, Configuration conf,
+                             long connTimeout) throws IOException { 
+    return waitForProtocolProxy(protocol, clientVersion, addr, conf, 0, connTimeout);
+  }
+  
+  /**
+   * Get a proxy connection to a remote server
+   * 
+   * @param protocol protocol class
+   * @param clientVersion client version
+   * @param addr remote address
+   * @param conf configuration to use
+   * @param rpcTimeout timeout for each RPC
+   * @param timeout time in milliseconds before giving up
+   * @return the proxy
+   * @throws IOException if the far end through a RemoteException
+   */
+  public static <T> T waitForProxy(Class<T> protocol,
+                             long clientVersion,
+                             InetSocketAddress addr, Configuration conf,
+                             int rpcTimeout,
+                             long timeout) throws IOException {
+    return waitForProtocolProxy(protocol, clientVersion, addr,
+        conf, rpcTimeout, timeout).getProxy();
+  }
+
+  /**
+   * Get a protocol proxy that contains a proxy connection to a remote server
+   * and a set of methods that are supported by the server
+   * 
+   * @param protocol protocol class
+   * @param clientVersion client version
+   * @param addr remote address
+   * @param conf configuration to use
+   * @param rpcTimeout timeout for each RPC
+   * @param timeout time in milliseconds before giving up
+   * @return the proxy
+   * @throws IOException if the far end through a RemoteException
+   */
+  public static <T> ProtocolProxy<T> waitForProtocolProxy(Class<T> protocol,
+                               long clientVersion,
-        return getProxy(protocol, clientVersion, addr, 
+        return getProtocolProxy(protocol, clientVersion, addr, 
-   * talking to a server at the named address. */
-  public static Object getProxy(Class<?> protocol, long clientVersion,
+   * talking to a server at the named address. 
+   * @param <T>*/
+  public static <T> T getProxy(Class<T> protocol,
+                                long clientVersion,
+                                InetSocketAddress addr, Configuration conf,
+                                SocketFactory factory) throws IOException {
+    return getProtocolProxy(
+        protocol, clientVersion, addr, conf, factory).getProxy();
+  }
+
+  /**
+   * Get a protocol proxy that contains a proxy connection to a remote server
+   * and a set of methods that are supported by the server
+   * 
+   * @param protocol protocol class
+   * @param clientVersion client version
+   * @param addr remote address
+   * @param conf configuration to use
+   * @param factory socket factory
+   * @return the protocol proxy
+   * @throws IOException if the far end through a RemoteException
+   */
+  public static <T> ProtocolProxy<T> getProtocolProxy(Class<T> protocol,
+                                long clientVersion,
-    return getProxy(protocol, clientVersion, addr, ugi, conf, factory);
+    return getProtocolProxy(protocol, clientVersion, addr, ugi, conf, factory);
-   * talking to a server at the named address. */
-  public static Object getProxy(Class<?> protocol, long clientVersion,
+   * talking to a server at the named address. 
+   * @param <T>*/
+  public static <T> T getProxy(Class<T> protocol,
+                                long clientVersion,
-    return getProxy(protocol, clientVersion, addr, ticket, conf, factory, 0);
+    return getProtocolProxy(
+        protocol, clientVersion, addr, ticket, conf, factory).getProxy();
+  }
+
+  /**
+   * Get a protocol proxy that contains a proxy connection to a remote server
+   * and a set of methods that are supported by the server
+   * 
+   * @param protocol protocol class
+   * @param clientVersion client version
+   * @param addr remote address
+   * @param ticket user group information
+   * @param conf configuration to use
+   * @param factory socket factory
+   * @return the protocol proxy
+   * @throws IOException if the far end through a RemoteException
+   */
+  public static <T> ProtocolProxy<T> getProtocolProxy(Class<T> protocol,
+                                long clientVersion,
+                                InetSocketAddress addr,
+                                UserGroupInformation ticket,
+                                Configuration conf,
+                                SocketFactory factory) throws IOException {
+    return getProtocolProxy(
+        protocol, clientVersion, addr, ticket, conf, factory, 0);
+   * @param <T>
-  public static Object getProxy(Class<?> protocol, long clientVersion,
+  public static <T> T getProxy(Class<T> protocol,
+                                long clientVersion,
+                                InetSocketAddress addr,
+                                UserGroupInformation ticket,
+                                Configuration conf,
+                                SocketFactory factory,
+                                int rpcTimeout) throws IOException {
+    return getProtocolProxy(protocol, clientVersion, addr, ticket,
+             conf, factory, rpcTimeout).getProxy();
+  }
+  
+  /**
+   * Get a protocol proxy that contains a proxy connection to a remote server
+   * and a set of methods that are supported by the server
+   * 
+   * @param protocol protocol
+   * @param clientVersion client's version
+   * @param addr server address
+   * @param ticket security ticket
+   * @param conf configuration
+   * @param factory socket factory
+   * @param rpcTimeout max time for each rpc; 0 means no timeout
+   * @return the proxy
+   * @throws IOException if any error occurs
+   */
+   public static <T> ProtocolProxy<T> getProtocolProxy(Class<T> protocol,
+                                long clientVersion,
+   /**
+    * Construct a client-side proxy object with the default SocketFactory
+    * @param <T>
+    * 
+    * @param protocol
+    * @param clientVersion
+    * @param addr
+    * @param conf
+    * @return a proxy instance
+    * @throws IOException
+    */
+   public static <T> T getProxy(Class<T> protocol,
+                                 long clientVersion,
+                                 InetSocketAddress addr, Configuration conf)
+     throws IOException {
+
+     return getProtocolProxy(protocol, clientVersion, addr, conf).getProxy();
+   }
+
-   * Construct a client-side proxy object with the default SocketFactory
+   * Get a protocol proxy that contains a proxy connection to a remote server
+   * and a set of methods that are supported by the server
-   * @return a proxy instance
+   * @return a protocol proxy
-  public static Object getProxy(Class<?> protocol, long clientVersion,
+  public static <T> ProtocolProxy<T> getProtocolProxy(Class<T> protocol,
+                                long clientVersion,
-    return getProxy(protocol, clientVersion, addr, conf, NetUtils
+    return getProtocolProxy(protocol, clientVersion, addr, conf, NetUtils

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS73 INS43 INS42 MOV44 INS44 INS44 INS44 MOV43 INS8 INS29 INS73 INS74 UPD42 MOV44 INS44 INS44 INS44 INS43 INS73 UPD43 INS44 INS29 INS83 INS83 INS73 INS74 INS42 INS44 MOV44 MOV44 MOV44 INS44 MOV43 INS8 MOV29 INS83 INS83 INS73 INS43 INS42 MOV44 MOV44 MOV44 MOV44 INS44 INS44 INS43 INS8 INS29 INS73 INS74 UPD42 MOV29 INS83 INS83 INS73 INS43 INS42 MOV44 INS44 INS44 INS44 MOV44 INS43 INS8 INS29 INS73 INS74 UPD42 INS44 MOV29 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS44 MOV44 INS44 INS44 INS43 INS8 INS29 INS73 INS74 UPD42 INS44 INS44 INS44 INS44 INS44 INS43 MOV29 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS29 INS73 INS74 UPD42 INS73 UPD43 INS44 INS29 INS83 INS83 INS73 INS74 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 UPD74 INS39 INS42 INS43 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS43 UPD74 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS42 UPD42 INS74 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS43 INS74 INS42 INS39 INS42 INS41 INS42 INS42 UPD74 INS39 INS42 INS39 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS43 UPD74 INS65 INS42 INS42 UPD74 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS43 INS74 INS42 INS65 INS42 INS42 INS74 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS43 UPD74 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS65 INS42 INS42 INS74 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS43 UPD74 INS65 INS42 UPD42 INS74 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS43 INS74 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS43 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 MOV42 INS42 INS43 INS42 INS42 INS43 INS43 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS32 INS43 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 MOV42 INS42 INS43 INS66 INS43 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 MOV42 INS42 INS43 INS43 INS66 INS43 INS43 INS42 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 MOV42 INS42 INS43 INS42 INS42 INS42 INS42 INS66 INS42 INS66 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 UPD42 MOV42 INS42 INS43 INS66 INS42 INS66 INS43 INS43 INS32 INS66 INS66 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV42 MOV42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL76 DEL43 DEL76 DEL34 DEL32 DEL76 DEL43 DEL76 DEL76 DEL43 DEL43 DEL76 DEL43 DEL76 DEL32