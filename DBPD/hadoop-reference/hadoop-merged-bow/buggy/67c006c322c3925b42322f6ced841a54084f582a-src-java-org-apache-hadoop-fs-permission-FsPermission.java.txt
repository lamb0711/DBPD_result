HADOOP-6521. User specified umask using deprecated dfs.umask must override server configured using new dfs.umaskmode for backward compatibility. Contributed by Suresh Srinivas.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@937559 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+  private static final Log LOG = LogFactory.getLog(FsPermission.class);
+
-    // Attempt to pull value from configuration, trying new key first and then
-    // deprecated key, along with a warning, if not present
+    // To ensure backward compatibility first use the deprecated key.
+    // If the deprecated key is not present then check for the new key
-      if(confUmask != null) { // UMASK_LABEL is set
-        try {
-          if(conf.deprecatedKeyWasSet(DEPRECATED_UMASK_LABEL)) 
-            umask = Integer.parseInt(confUmask); // Evaluate as decimal value
-          else
-            return new FsPermission(confUmask);
-        } catch(IllegalArgumentException iae) {
-          // Provide more explanation for user-facing message
-          String type = iae instanceof NumberFormatException ? "decimal" 
-                                                          : "octal or symbolic";
-          
-          throw new IllegalArgumentException("Unable to parse " + confUmask + 
-                                              " as " + type + " umask.");
+      int oldUmask = conf.getInt(DEPRECATED_UMASK_LABEL, Integer.MIN_VALUE);
+      try {
+        if(confUmask != null) {
+          umask = new UmaskParser(confUmask).getUMask();
-      } 
+      } catch(IllegalArgumentException iae) {
+        // Provide more explanation for user-facing message
+        String type = iae instanceof NumberFormatException ? "decimal"
+            : "octal or symbolic";
+        String error = "Unable to parse configuration " + UMASK_LABEL
+            + " with value " + confUmask + " as " + type + " umask.";
+        LOG.warn(error);
+        
+        // If oldUmask is not set, then throw the exception
+        if (oldUmask == Integer.MIN_VALUE) {
+          throw new IllegalArgumentException(error);
+        }
+      }
+        
+      if(oldUmask != Integer.MIN_VALUE) { // Property was set with old key
+        if (umask != oldUmask) {
+          LOG.warn(DEPRECATED_UMASK_LABEL
+              + " configuration key is deprecated. " + "Convert to "
+              + UMASK_LABEL + ", using octal or symbolic umask "
+              + "specifications.");
+          // Old and new umask values do not match - Use old umask
+          umask = oldUmask;
+        }
+      }
-    conf.setInt(UMASK_LABEL, umask.toShort());
+    conf.set(UMASK_LABEL, String.format("%1$03o", umask.toShort()));
+    conf.setInt(DEPRECATED_UMASK_LABEL, umask.toShort());

INS26 INS26 INS40 INS40 INS23 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS32 INS21 INS42 INS42 INS57 INS32 INS32 MOV43 INS60 MOV54 INS25 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS32 INS39 INS59 INS27 INS8 UPD42 UPD42 INS45 INS42 INS42 INS42 INS32 INS42 INS40 MOV25 INS42 INS42 INS42 INS40 MOV27 INS8 INS60 INS21 INS25 INS27 INS21 INS43 INS59 INS32 INS27 INS8 INS42 INS42 INS21 INS21 MOV7 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS40 INS53 INS32 INS7 UPD45 MOV45 INS42 INS45 MOV42 MOV45 MOV42 MOV45 INS14 INS42 INS42 INS27 INS42 INS42 INS14 UPD42 MOV43 INS42 INS42 INS45 INS45 INS42 INS45 INS45 INS43 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL14 DEL41 DEL27 DEL14 DEL53 DEL42