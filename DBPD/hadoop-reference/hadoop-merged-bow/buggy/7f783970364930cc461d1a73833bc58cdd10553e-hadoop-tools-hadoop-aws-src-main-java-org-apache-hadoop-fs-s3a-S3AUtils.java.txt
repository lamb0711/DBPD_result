Revert "HADOOP-14556. S3A to support Delegation Tokens."

This reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.

+import com.amazonaws.auth.InstanceProfileCredentialsProvider;
-import com.google.common.annotations.VisibleForTesting;
-import org.apache.hadoop.fs.s3a.auth.IAMInstanceCredentialsProvider;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-  /**
-   * Error message when the AWS provider list built up contains a forbidden
-   * entry.
-   */
-  @VisibleForTesting
-  public static final String E_FORBIDDEN_AWS_PROVIDER
-      = "AWS provider class cannot be used";
-        StringUtils.isNotEmpty(path)? (" on " + path) : "",
+        path != null ? (" on " + path) : "",
-   * The standard AWS provider list for AWS connections.
-   */
-  public static final List<Class<?>>
-      STANDARD_AWS_PROVIDERS = Collections.unmodifiableList(
-      Arrays.asList(
-          TemporaryAWSCredentialsProvider.class,
-          SimpleAWSCredentialsProvider.class,
-          EnvironmentVariableCredentialsProvider.class,
-          IAMInstanceCredentialsProvider.class));
-
-  /**
-   * @param binding Binding URI -may be null
+   * @param binding Binding URI, may contain user:pass login details;
+   * may be null
-      @Nullable URI binding,
-      Configuration conf) throws IOException {
-    // this will reject any user:secret entries in the URI
-    S3xLoginHelper.rejectSecretsInURIs(binding);
-    AWSCredentialProviderList credentials =
-        buildAWSProviderList(binding,
-            conf,
-            AWS_CREDENTIALS_PROVIDER,
-            STANDARD_AWS_PROVIDERS,
-            new HashSet<>());
+      URI binding, Configuration conf) throws IOException {
+    AWSCredentialProviderList credentials = new AWSCredentialProviderList();
+
+    Class<?>[] awsClasses = loadAWSProviderClasses(conf,
+        AWS_CREDENTIALS_PROVIDER);
+    if (awsClasses.length == 0) {
+      credentials.add(new SimpleAWSCredentialsProvider(binding, conf));
+      credentials.add(new EnvironmentVariableCredentialsProvider());
+      credentials.add(InstanceProfileCredentialsProvider.getInstance());
+    } else {
+      for (Class<?> aClass : awsClasses) {
+        credentials.add(createAWSCredentialProvider(conf,
+            aClass,
+            binding));
+      }
+    }
-        binding, credentials);
+        S3xLoginHelper.toString(binding), credentials);
-  public static List<Class<?>> loadAWSProviderClasses(Configuration conf,
+  public static Class<?>[] loadAWSProviderClasses(Configuration conf,
-      return Arrays.asList(conf.getClasses(key, defaultValue));
+      return conf.getClasses(key, defaultValue);
-   * Load list of AWS credential provider/credential provider factory classes;
-   * support a forbidden list to prevent loops, mandate full secrets, etc.
-   * @param binding Binding URI -may be null
-   * @param conf configuration
-   * @param key key
-   * @param forbidden a possibly empty set of forbidden classes.
-   * @param defaultValues list of default providers.
-   * @return the list of classes, possibly empty
-   * @throws IOException on a failure to load the list.
-   */
-  public static AWSCredentialProviderList buildAWSProviderList(
-      @Nullable final URI binding,
-      final Configuration conf,
-      final String key,
-      final List<Class<?>> defaultValues,
-      final Set<Class<?>> forbidden) throws IOException {
-
-    // build up the base provider
-    List<Class<?>> awsClasses = loadAWSProviderClasses(conf,
-        key,
-        defaultValues.toArray(new Class[defaultValues.size()]));
-    // and if the list is empty, switch back to the defaults.
-    // this is to address the issue that configuration.getClasses()
-    // doesn't return the default if the config value is just whitespace.
-    if (awsClasses.isEmpty()) {
-      awsClasses = defaultValues;
-    }
-    // iterate through, checking for blacklists and then instantiating
-    // each provider
-    AWSCredentialProviderList providers = new AWSCredentialProviderList();
-    for (Class<?> aClass : awsClasses) {
-
-      if (forbidden.contains(aClass)) {
-        throw new IOException(E_FORBIDDEN_AWS_PROVIDER
-            + " in option " + key + ": " + aClass);
-      }
-      providers.add(createAWSCredentialProvider(conf,
-          aClass, binding));
-    }
-    return providers;
-  }
-
-  /**
-   * <li>a public constructor accepting
-   *    org.apache.hadoop.conf.Configuration</li>
-  private static AWSCredentialsProvider createAWSCredentialProvider(
+  public static AWSCredentialsProvider createAWSCredentialProvider(
-      @Nullable URI uri) throws IOException {
-    AWSCredentialsProvider credentials = null;
+      URI uri) throws IOException {
+    AWSCredentialsProvider credentials;
-          + "of a supported signature, or a public factory method named "
-          + "getInstance that accepts no arguments.",
-          className, AWS_CREDENTIALS_PROVIDER));
+          + "accepting Configuration, or a public factory method named "
+          + "getInstance that accepts no arguments, or a public default "
+          + "constructor.", className, AWS_CREDENTIALS_PROVIDER));
-   * Set a key if the value is non-empty.
-   * @param config config to patch
-   * @param key key to set
-   * @param val value to probe and set
-   * @param origin origin
-   * @return true if the property was set
-   */
-  public static boolean setIfDefined(Configuration config, String key,
-      String val, String origin) {
-    if (StringUtils.isNotEmpty(val)) {
-      config.set(key, val, origin);
-      return true;
-    } else {
-      return false;
-    }
-  }
-
-  /**
-  public static String getServerSideEncryptionKey(String bucket,
+  static String getServerSideEncryptionKey(String bucket,
-  public static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,
+  static S3AEncryptionMethods getEncryptionAlgorithm(String bucket,
-      LOG.debug("Using SSE-C with {}", diagnostics);
+    LOG.debug("Using SSE-C with {}", diagnostics);

MOV26 UPD40 INS31 MOV29 INS83 INS83 MOV43 MOV42 MOV44 MOV44 MOV43 INS8 INS5 UPD83 MOV60 MOV60 INS25 INS21 MOV41 MOV74 INS85 MOV21 INS66 UPD66 INS5 INS27 INS8 MOV8 INS32 UPD42 MOV74 INS85 UPD42 INS40 INS34 MOV21 INS21 INS21 MOV70 INS42 INS42 INS45 INS32 UPD42 MOV42 UPD42 INS32 INS32 INS42 INS42 INS42 MOV32 INS27 UPD42 UPD42 INS14 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS32 MOV43 INS42 INS33 MOV43 INS42 INS42 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 UPD45 UPD45 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL57 DEL57 DEL42 DEL43 DEL57 DEL32 DEL32 DEL59 DEL23 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL42 DEL78 DEL33 DEL42 DEL43 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL9 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83