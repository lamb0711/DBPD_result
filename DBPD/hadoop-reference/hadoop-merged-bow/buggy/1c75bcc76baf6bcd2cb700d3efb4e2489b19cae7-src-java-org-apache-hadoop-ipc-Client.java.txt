HADOOP-6907. Rpc client doesn't use the per-connection conf to figure out server's Kerberos principal. Contributed by Kan Zhang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@991780 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
-  final private int maxIdleTime; //connections will be culled if it was idle for 
-                           //maxIdleTime msecs
-  final private int maxRetries; //the max. no. of retries for socket connections
-  private boolean tcpNoDelay; // if T then disable Nagle's Algorithm
-  private int pingInterval; // how often sends ping to the server in msecs
-  final private boolean doPing; //do we need to send ping message
+    private int maxIdleTime; //connections will be culled if it was idle for 
+    //maxIdleTime msecs
+    private int maxRetries; //the max. no. of retries for socket connections
+    private boolean tcpNoDelay; // if T then disable Nagle's Algorithm
+    private boolean doPing; //do we need to send ping message
+    private int pingInterval; // how often sends ping to the server in msecs
+      this.maxIdleTime = remoteId.getMaxIdleTime();
+      this.maxRetries = remoteId.getMaxRetries();
+      this.tcpNoDelay = remoteId.getTcpNoDelay();
+      this.doPing = remoteId.getDoPing();
+      this.pingInterval = remoteId.getPingInterval();
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("The ping interval is" + this.pingInterval + "ms.");
+      }
+
-          String serverKey = krbInfo.serverPrincipal();
-          if (serverKey == null) {
-            throw new IOException(
-                "Can't obtain server Kerberos config key from KerberosInfo");
-          }
-          serverPrincipal = SecurityUtil.getServerPrincipal(
-              conf.get(serverKey), server.getAddress().getCanonicalHostName());
+          serverPrincipal = remoteId.getServerPrincipal();
-            LOG.debug("RPC Server Kerberos principal name for protocol="
+            LOG.debug("RPC Server's Kerberos principal name for protocol="
-    this.maxIdleTime = 
-      conf.getInt("ipc.client.connection.maxidletime", 10000); //10s
-    this.maxRetries = conf.getInt("ipc.client.connect.max.retries", 10);
-    this.tcpNoDelay = conf.getBoolean("ipc.client.tcpnodelay", false);
-    this.doPing = conf.getBoolean("ipc.client.ping", true);
-    this.pingInterval = getPingInterval(conf);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("The ping interval is" + this.pingInterval + "ms.");
-    }
-   * @deprecated Use {@link #call(Writable, InetSocketAddress, Class, UserGroupInformation, int)} instead 
+   * @deprecated Use {@link #call(Writable, ConnectionId)} instead 
-   * @deprecated Use {@link #call(Writable, InetSocketAddress, Class, UserGroupInformation, int)} instead 
+   * @deprecated Use {@link #call(Writable, ConnectionId)} instead 
-    return call(param, addr, null, ticket, 0);
+    ConnectionId remoteId = ConnectionId.getConnectionId(addr, null, ticket, 0,
+        conf);
+    return call(param, remoteId);
-   * with the <code>ticket</code> credentials, returning the value.  
+   * with the <code>ticket</code> credentials and <code>rpcTimeout</code> as 
+   * timeout, returning the value.  
-   * threw an exception. */
+   * threw an exception. 
+   * @deprecated Use {@link #call(Writable, ConnectionId)} instead 
+   */
+  @Deprecated
+    ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+        ticket, rpcTimeout, conf);
+    return call(param, remoteId);
+  }
+
+  /**
+   * Make a call, passing <code>param</code>, to the IPC server running at
+   * <code>address</code> which is servicing the <code>protocol</code> protocol,
+   * with the <code>ticket</code> credentials, <code>rpcTimeout</code> as
+   * timeout and <code>conf</code> as conf for this connection, returning the
+   * value. Throws exceptions if there are network problems or if the remote
+   * code threw an exception.
+   */
+  public Writable call(Writable param, InetSocketAddress addr, 
+                       Class<?> protocol, UserGroupInformation ticket,
+                       int rpcTimeout, Configuration conf)  
+                       throws InterruptedException, IOException {
+    ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+        ticket, rpcTimeout, conf);
+    return call(param, remoteId);
+  }
+  
+  /** Make a call, passing <code>param</code>, to the IPC server defined by
+   * <code>remoteId</code>, returning the value.  
+   * Throws exceptions if there are network problems or if the remote code 
+   * threw an exception. */
+  public Writable call(Writable param, ConnectionId remoteId)  
+      throws InterruptedException, IOException {
-    Connection connection = getConnection(
-        addr, protocol, ticket, rpcTimeout, call);
+    Connection connection = getConnection(remoteId, call);
-          throw wrapException(addr, call.error);
+          throw wrapException(remoteId.getAddress(), call.error);
-   * Makes a set of calls in parallel.  Each parameter is sent to the
-   * corresponding address.  When all values are available, or have timed out
-   * or errored, the collected results are returned in an array.  The array
-   * contains nulls for calls that timed out or errored.
-   * @deprecated Use {@link #call(Writable[], InetSocketAddress[], Class, UserGroupInformation)} instead 
+   * @deprecated Use {@link #call(Writable[], InetSocketAddress[], 
+   * Class, UserGroupInformation, Configuration)} instead 
-    return call(params, addresses, null, null);
+    return call(params, addresses, null, null, conf);
+  /**  
+   * @deprecated Use {@link #call(Writable[], InetSocketAddress[], 
+   * Class, UserGroupInformation, Configuration)} instead 
+   */
+  @Deprecated
+  public Writable[] call(Writable[] params, InetSocketAddress[] addresses, 
+                         Class<?> protocol, UserGroupInformation ticket)
+    throws IOException, InterruptedException {
+    return call(params, addresses, protocol, ticket, conf);
+  }
+  
+
-  public Writable[] call(Writable[] params, InetSocketAddress[] addresses, 
-                         Class<?> protocol, UserGroupInformation ticket)
-    throws IOException, InterruptedException {
+  public Writable[] call(Writable[] params, InetSocketAddress[] addresses,
+      Class<?> protocol, UserGroupInformation ticket, Configuration conf)
+      throws IOException, InterruptedException {
-          Connection connection = 
-            getConnection(addresses[i], protocol, ticket, 0, call);
+          ConnectionId remoteId = ConnectionId.getConnectionId(addresses[i],
+              protocol, ticket, 0, conf);
+          Connection connection = getConnection(remoteId, call);
+  // for unit testing only
+  @InterfaceAudience.Private
+  @InterfaceStability.Unstable
+  Set<ConnectionId> getConnectionIds() {
+    synchronized (connections) {
+      return connections.keySet();
+    }
+  }
+  
-   * pool.  Connections to a given host/port are reused. */
-  private Connection getConnection(InetSocketAddress addr,
-                                   Class<?> protocol,
-                                   UserGroupInformation ticket,
-                                   int rpcTimeout,
+   * pool.  Connections to a given ConnectionId are reused. */
+  private Connection getConnection(ConnectionId remoteId,
-    ConnectionId remoteId = new ConnectionId(
-        addr, protocol, ticket, rpcTimeout);
-
+  
-  private static class ConnectionId {
+  static class ConnectionId {
+    private String serverPrincipal;
+    private int maxIdleTime; //connections will be culled if it was idle for 
+    //maxIdleTime msecs
+    private int maxRetries; //the max. no. of retries for socket connections
+    private boolean tcpNoDelay; // if T then disable Nagle's Algorithm
+    private boolean doPing; //do we need to send ping message
+    private int pingInterval; // how often sends ping to the server in msecs
-                 UserGroupInformation ticket, int rpcTimeout) {
+                 UserGroupInformation ticket, int rpcTimeout,
+                 String serverPrincipal, int maxIdleTime, 
+                 int maxRetries, boolean tcpNoDelay,
+                 boolean doPing, int pingInterval) {
+      this.serverPrincipal = serverPrincipal;
+      this.maxIdleTime = maxIdleTime;
+      this.maxRetries = maxRetries;
+      this.tcpNoDelay = tcpNoDelay;
+      this.doPing = doPing;
+      this.pingInterval = pingInterval;
-    @Override
-    public boolean equals(Object obj) {
-     if (obj instanceof ConnectionId) {
-       ConnectionId id = (ConnectionId) obj;
-       return address.equals(id.address) && protocol == id.protocol && 
-              ((ticket != null && ticket.equals(id.ticket)) ||
-               (ticket == id.ticket)) && rpcTimeout == id.rpcTimeout;
-     }
-     return false;
+    String getServerPrincipal() {
+      return serverPrincipal;
-    @Override  // simply use the default Object#hashcode() ?
+    int getMaxIdleTime() {
+      return maxIdleTime;
+    }
+    
+    int getMaxRetries() {
+      return maxRetries;
+    }
+    
+    boolean getTcpNoDelay() {
+      return tcpNoDelay;
+    }
+    
+    boolean getDoPing() {
+      return doPing;
+    }
+    
+    int getPingInterval() {
+      return pingInterval;
+    }
+    
+    static ConnectionId getConnectionId(InetSocketAddress addr,
+        Class<?> protocol, UserGroupInformation ticket, int rpcTimeout,
+        Configuration conf) throws IOException {
+      String remotePrincipal = getRemotePrincipal(conf, addr, protocol);
+      return new ConnectionId(addr, protocol, ticket,
+          rpcTimeout, remotePrincipal,
+          conf.getInt("ipc.client.connection.maxidletime", 10000), // 10s
+          conf.getInt("ipc.client.connect.max.retries", 10),
+          conf.getBoolean("ipc.client.tcpnodelay", false),
+          conf.getBoolean("ipc.client.ping", true),
+          Client.getPingInterval(conf));
+    }
+    
+    private static String getRemotePrincipal(Configuration conf,
+        InetSocketAddress address, Class<?> protocol) throws IOException {
+      if (protocol == null) {
+        return null;
+      }
+      KerberosInfo krbInfo = protocol.getAnnotation(KerberosInfo.class);
+      if (krbInfo != null) {
+        String serverKey = krbInfo.serverPrincipal();
+        if (serverKey == null) {
+          throw new IOException(
+              "Can't obtain server Kerberos config key from protocol="
+                  + protocol.getCanonicalName());
+        }
+        return SecurityUtil.getServerPrincipal(conf.get(serverKey), address
+            .getAddress().getCanonicalHostName());
+      }
+      return null;
+    }
+    
+    static boolean isEqual(Object a, Object b) {
+      return a == null ? b == null : a.equals(b);
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (obj == this) {
+        return true;
+      }
+      if (obj instanceof ConnectionId) {
+        ConnectionId that = (ConnectionId) obj;
+        return isEqual(this.address, that.address)
+            && this.doPing == that.doPing
+            && this.maxIdleTime == that.maxIdleTime
+            && this.maxRetries == that.maxRetries
+            && this.pingInterval == that.pingInterval
+            && isEqual(this.protocol, that.protocol)
+            && this.rpcTimeout == that.rpcTimeout
+            && isEqual(this.serverPrincipal, that.serverPrincipal)
+            && this.tcpNoDelay == that.tcpNoDelay
+            && isEqual(this.ticket, that.ticket);
+      }
+      return false;
+    }
+    
+    @Override
-      return (address.hashCode() + PRIME * (
-                PRIME * (
-                  PRIME * System.identityHashCode(protocol) ^
-                  System.identityHashCode(ticket)
-                ) ^ System.identityHashCode(rpcTimeout)
-              ));
+      int result = 1;
+      result = PRIME * result + ((address == null) ? 0 : address.hashCode());
+      result = PRIME * result + (doPing ? 1231 : 1237);
+      result = PRIME * result + maxIdleTime;
+      result = PRIME * result + maxRetries;
+      result = PRIME * result + pingInterval;
+      result = PRIME * result + ((protocol == null) ? 0 : protocol.hashCode());
+      result = PRIME * result + rpcTimeout;
+      result = PRIME * result
+          + ((serverPrincipal == null) ? 0 : serverPrincipal.hashCode());
+      result = PRIME * result + (tcpNoDelay ? 1231 : 1237);
+      result = PRIME * result + ((ticket == null) ? 0 : ticket.hashCode());
+      return result;

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS23 INS23 MOV23 INS23 MOV23 INS8 INS29 MOV78 INS83 MOV43 INS42 MOV44 MOV44 MOV44 MOV43 MOV43 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS43 INS42 INS44 MOV44 MOV44 MOV44 MOV44 INS44 INS43 INS43 INS8 INS44 INS78 INS5 INS44 INS44 INS44 INS44 INS43 INS43 INS44 INS78 INS78 INS74 INS42 INS8 INS44 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 MOV59 INS83 INS39 MOV59 INS83 INS39 MOV59 MOV21 MOV21 MOV21 MOV65 INS65 INS60 INS41 INS65 INS65 INS42 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS41 INS43 INS42 INS42 INS43 INS85 INS5 INS42 INS5 INS42 INS74 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS40 INS40 INS43 INS43 INS51 INS43 INS42 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS42 INS8 INS83 INS43 INS42 MOV44 MOV44 MOV44 MOV44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS21 INS21 INS21 INS21 INS21 MOV25 INS66 INS65 INS66 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS42 INS43 INS76 INS42 INS43 INS59 INS32 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 MOV43 INS59 INS32 UPD66 UPD66 INS42 INS42 INS43 INS85 INS43 INS85 INS43 INS76 INS42 INS42 INS42 INS42 INS42 INS8 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 INS42 INS41 INS41 INS41 INS41 INS41 INS41 INS42 INS43 INS42 INS42 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS25 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS41 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS7 INS7 INS7 INS7 INS7 INS68 INS42 INS42 INS32 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS41 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS14 INS42 INS42 INS43 INS76 INS27 INS8 INS43 INS59 MOV27 INS8 INS33 INS42 INS42 INS16 INS27 INS8 INS39 INS59 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS7 INS42 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS22 INS32 INS42 MOV69 INS69 INS42 INS42 INS42 INS33 INS42 INS34 INS42 INS42 MOV69 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS69 INS69 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 MOV32 MOV32 MOV32 MOV32 INS32 INS42 INS42 INS33 INS41 INS42 INS42 INS32 MOV60 INS25 INS41 INS27 INS27 INS32 INS42 INS52 INS41 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS27 UPD43 UPD43 INS43 INS43 INS43 INS5 INS5 INS43 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS57 MOV27 INS8 INS32 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS9 INS27 INS27 INS36 INS27 INS36 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS36 INS27 INS42 INS27 INS36 INS27 INS36 INS27 INS36 INS42 INS33 UPD42 UPD42 INS42 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS43 INS53 INS42 INS42 MOV32 INS32 UPD42 INS27 INS32 MOV42 INS42 INS16 MOV42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS16 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 MOV42 INS60 INS42 INS14 INS32 INS42 INS27 MOV27 INS42 INS22 INS40 INS36 INS34 MOV32 INS42 INS34 INS34 INS36 INS34 INS32 INS36 INS34 INS32 INS42 INS34 INS34 INS36 INS34 INS32 MOV43 MOV43 INS59 MOV43 INS27 INS42 INS42 MOV27 INS32 INS22 UPD40 INS52 INS42 INS27 INS27 MOV42 INS42 INS27 INS42 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 INS42 INS32 INS45 INS32 INS27 INS27 INS42 INS22 INS40 INS52 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS27 MOV32 INS22 UPD40 MOV40 INS52 INS42 UPD45 INS27 INS27 UPD42 INS22 UPD40 INS52 INS42 INS27 INS27 INS22 INS40 INS52 INS42 MOV27 UPD27 MOV27 INS22 INS40 INS52 INS42 INS22 INS40 INS52 INS42 UPD42 INS22 UPD40 INS22 UPD40 INS52 INS42 INS52 INS42 INS52 INS42 DEL83 DEL83 DEL39 DEL23 DEL83 DEL83 DEL39 DEL23 DEL83 DEL83 DEL39 DEL23 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL42 DEL43 DEL69 DEL39 DEL69 DEL66 DEL42 DEL42 DEL42 DEL66 DEL66 DEL66 DEL66 DEL65 DEL43 DEL39 DEL33 DEL34 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL33 DEL42 DEL27 DEL36 DEL42 DEL27 DEL36 DEL27 DEL36 DEL42 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL27 DEL36 DEL27 DEL42 DEL32 DEL27 DEL36 DEL27 DEL27 DEL36 DEL41