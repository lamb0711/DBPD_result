HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();
S3A to implement S3 Select through this API.

The new openFile() API is asynchronous, and implemented across FileSystem and FileContext.

The MapReduce V2 inputs are moved to this API, and you can actually set must/may
options to pass in.

This is more useful for setting things like s3a seek policy than for S3 select,
as the existing input format/record readers can't handle S3 select output where
the stream is shorter than the file length, and splitting plain text is suboptimal.
Future work is needed there.

In the meantime, any/all filesystem connectors are now free to add their own filesystem-specific
configuration parameters which can be set in jobs and used to set filesystem input stream
options (seek policy, retry, encryption secrets, etc).

Contributed by Steve Loughran

+import org.apache.hadoop.fs.Path;
+import com.google.common.base.Preconditions;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
-  public S3AReadOpContext(boolean isS3GuardEnabled, Invoker invoker,
-      Invoker s3guardInvoker, @Nullable FileSystem.Statistics stats,
-      S3AInstrumentation instrumentation, FileStatus dstFileStatus) {
+
+  /**
+   * Path of read.
+   */
+  private final Path path;
+
+  /**
+   * Initial input policy of the stream.
+   */
+  private final S3AInputPolicy inputPolicy;
+
+  /**
+   * Readahead for GET operations/skip, etc.
+   */
+  private final long readahead;
+
+  /**
+   * Instantiate.
+   * @param path path of read
+   * @param isS3GuardEnabled true iff S3Guard is enabled.
+   * @param invoker invoker for normal retries.
+   * @param s3guardInvoker S3Guard-specific retry invoker.
+   * @param stats statistics (may be null)
+   * @param instrumentation FS instrumentation
+   * @param dstFileStatus target file status
+   * @param inputPolicy the input policy
+   * @param readahead readahead for GET operations/skip, etc.
+   */
+  public S3AReadOpContext(
+      final Path path,
+      boolean isS3GuardEnabled,
+      Invoker invoker,
+      Invoker s3guardInvoker,
+      @Nullable FileSystem.Statistics stats,
+      S3AInstrumentation instrumentation,
+      FileStatus dstFileStatus,
+      S3AInputPolicy inputPolicy,
+      final long readahead) {
-  }
-
-  public S3AReadOpContext(boolean isS3GuardEnabled, Invoker invoker,
-      @Nullable FileSystem.Statistics stats, S3AInstrumentation instrumentation,
-      FileStatus dstFileStatus) {
-    super(isS3GuardEnabled, invoker, stats, instrumentation, dstFileStatus);
+    this.path = checkNotNull(path);
+    Preconditions.checkArgument(readahead >= 0,
+        "invalid readahead %d", readahead);
+    this.inputPolicy = checkNotNull(inputPolicy);
+    this.readahead = readahead;
-   * Get invoker to use for read operations.  When S3Guard is enabled we use
-   * the S3Guard invoker, which deals with things like FileNotFoundException
+   * Get invoker to use for read operations.
+   * When S3Guard is enabled we use the S3Guard invoker,
+   * which deals with things like FileNotFoundException
+
+  /**
+   * Get the path of this read.
+   * @return path.
+   */
+  public Path getPath() {
+    return path;
+  }
+
+  /**
+   * Get the IO policy.
+   * @return the initial input policy.
+   */
+  public S3AInputPolicy getInputPolicy() {
+    return inputPolicy;
+  }
+
+  /**
+   * Get the readahead for this operation.
+   * @return a value >= 0
+   */
+  public long getReadahead() {
+    return readahead;
+  }
+
+  @Override
+  public String toString() {
+    final StringBuilder sb = new StringBuilder(
+        "S3AReadOpContext{");
+    sb.append("path=").append(path);
+    sb.append(", inputPolicy=").append(inputPolicy);
+    sb.append(", readahead=").append(readahead);
+    sb.append('}');
+    return sb.toString();
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS44 INS44 INS44 INS29 MOV83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS83 INS43 INS42 INS43 INS42 INS83 INS39 INS42 INS21 INS21 INS21 INS21 INS65 INS65 INS42 INS41 INS65 INS65 UPD42 MOV42 INS41 INS65 INS65 INS41 UPD42 MOV42 INS42 INS60 INS21 INS21 INS21 INS21 INS41 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS7 INS32 INS7 INS7 UPD66 INS66 UPD66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS83 INS43 INS59 INS32 INS32 INS32 INS32 INS32 INS22 INS32 INS42 INS42 INS27 INS45 INS42 INS22 INS32 INS22 INS42 UPD42 MOV42 INS42 INS14 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS13 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS34 INS52 INS42 INS42 INS42 INS52 INS42 INS43 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 MOV42 DEL42 DEL39 DEL42 DEL44 DEL43 DEL42 DEL44 DEL78 DEL40 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL46 DEL8 DEL31