HADOOP-10632. Minor improvements to Crypto input and output streams. Contributed by Yi Liu

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598485 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.nio.ByteBuffer;
+import javax.crypto.Cipher;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+import com.google.common.base.Preconditions;
+
+@InterfaceAudience.Private
-  public Encryptor getEncryptor() throws GeneralSecurityException {
-    return new JCEAESCTREncryptor(provider);
+  public Encryptor createEncryptor() throws GeneralSecurityException {
+    return new JCEAESCTRCipher(Cipher.ENCRYPT_MODE, provider);
-  public Decryptor getDecryptor() throws GeneralSecurityException {
-    return new JCEAESCTRDecryptor(provider);
+  public Decryptor createDecryptor() throws GeneralSecurityException {
+    return new JCEAESCTRCipher(Cipher.DECRYPT_MODE, provider);
+  }
+  
+  private static class JCEAESCTRCipher implements Encryptor, Decryptor {
+    private final Cipher cipher;
+    private final int mode;
+    private boolean contextReset = false;
+    
+    public JCEAESCTRCipher(int mode, String provider) 
+        throws GeneralSecurityException {
+      this.mode = mode;
+      if (provider == null || provider.isEmpty()) {
+        cipher = Cipher.getInstance("AES/CTR/NoPadding");
+      } else {
+        cipher = Cipher.getInstance("AES/CTR/NoPadding", provider);
+      }
+    }
+
+    @Override
+    public void init(byte[] key, byte[] iv) throws IOException {
+      Preconditions.checkNotNull(key);
+      Preconditions.checkNotNull(iv);
+      contextReset = false;
+      try {
+        cipher.init(mode, new SecretKeySpec(key, "AES"), 
+            new IvParameterSpec(iv));
+      } catch (Exception e) {
+        throw new IOException(e);
+      }
+    }
+
+    /**
+     * AES-CTR will consume all of the input data. It requires enough space in 
+     * the destination buffer to encrypt entire input buffer.
+     */
+    @Override
+    public void encrypt(ByteBuffer inBuffer, ByteBuffer outBuffer)
+        throws IOException {
+      process(inBuffer, outBuffer);
+    }
+    
+    /**
+     * AES-CTR will consume all of the input data. It requires enough space in
+     * the destination buffer to decrypt entire input buffer.
+     */
+    @Override
+    public void decrypt(ByteBuffer inBuffer, ByteBuffer outBuffer)
+        throws IOException {
+      process(inBuffer, outBuffer);
+    }
+    
+    private void process(ByteBuffer inBuffer, ByteBuffer outBuffer)
+        throws IOException {
+      try {
+        int inputSize = inBuffer.remaining();
+        // Cipher#update will maintain crypto context.
+        int n = cipher.update(inBuffer, outBuffer);
+        if (n < inputSize) {
+          /**
+           * Typically code will not get here. Cipher#update will consume all 
+           * input data and put result in outBuffer. 
+           * Cipher#doFinal will reset the crypto context.
+           */
+          contextReset = true;
+          cipher.doFinal(inBuffer, outBuffer);
+        }
+      } catch (Exception e) {
+        throw new IOException(e);
+      }
+    }
+    
+    @Override
+    public boolean isContextReset() {
+      return contextReset;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS78 INS55 INS40 MOV78 UPD42 MOV43 MOV78 UPD42 MOV43 INS83 INS83 INS42 INS43 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS9 INS39 INS42 INS43 INS42 INS42 INS21 INS25 INS42 INS5 INS42 INS5 INS42 INS42 INS21 INS21 INS21 INS54 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS43 INS42 INS43 INS42 INS42 INS54 INS42 INS41 UPD43 INS40 UPD43 INS40 INS42 INS7 INS27 INS8 INS8 INS39 INS85 INS39 INS85 INS32 INS32 INS7 INS8 INS12 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS42 INS42 INS32 INS42 INS42 INS8 INS12 INS42 UPD42 UPD42 INS22 INS42 INS27 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS60 INS60 INS25 INS44 INS8 INS52 INS42 INS42 INS33 INS42 INS42 INS7 INS7 INS32 INS43 INS42 INS53 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS14 INS14 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS21 INS42 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS43 INS42 INS45 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42