HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import org.apache.hadoop.fs.FileUtil;
-  public static final String CONTAINER_SCRIPT = "launch_container.sh";
+  public static final String CONTAINER_SCRIPT = Shell.WINDOWS ?
+    "launch_container.cmd" : "launch_container.sh";
-            containerLogDir.toUri().getPath()));
+            containerLogDir.toString()));
-                containerLogDir.toUri().getPath())
+                containerLogDir.toString())
-  private static class ShellScriptBuilder {
-    
-    private final StringBuilder sb;
-  
-    public ShellScriptBuilder() {
-      this(new StringBuilder("#!/bin/bash\n\n"));
-    }
-  
-    protected ShellScriptBuilder(StringBuilder sb) {
-      this.sb = sb;
-    }
-  
-    public ShellScriptBuilder env(String key, String value) {
-      line("export ", key, "=\"", value, "\"");
-      return this;
-    }
-  
-    public ShellScriptBuilder symlink(Path src, String dst) throws IOException {
-      return symlink(src, new Path(dst));
-    }
-  
-    public ShellScriptBuilder symlink(Path src, Path dst) throws IOException {
+  private static abstract class ShellScriptBuilder {
+
+    private static final String LINE_SEPARATOR =
+        System.getProperty("line.separator");
+    private final StringBuilder sb = new StringBuilder();
+
+    public abstract void command(List<String> command);
+
+    public abstract void env(String key, String value);
+
+    public final void symlink(Path src, Path dst) throws IOException {
-        line("mkdir -p ", dst.getParent().toString());
+        mkdir(dst.getParent());
-      line("ln -sf \"", src.toUri().getPath(), "\" \"", dst.toString(), "\"");
-      return this;
+      link(src, dst);
-  
-    public void write(PrintStream out) throws IOException {
-      out.append(sb);
-    }
-  
-    public void line(String... command) {
-      for (String s : command) {
-        sb.append(s);
-      }
-      sb.append("\n");
-    }
-  
+
+    public final void write(PrintStream out) throws IOException {
+      out.append(sb);
+    }
+
+    protected final void line(String... command) {
+      for (String s : command) {
+        sb.append(s);
+      }
+      sb.append(LINE_SEPARATOR);
+    }
+
+    protected abstract void link(Path src, Path dst) throws IOException;
+
+    protected abstract void mkdir(Path path);
+  }
+
+  private static final class UnixShellScriptBuilder extends ShellScriptBuilder {
+
+    public UnixShellScriptBuilder(){
+      line("#!/bin/bash");
+      line();
+    }
+
+    @Override
+    public void command(List<String> command) {
+      line("exec /bin/bash -c \"", StringUtils.join(" ", command), "\"");
+    }
+
+    @Override
+    public void env(String key, String value) {
+      line("export ", key, "=\"", value, "\"");
+    }
+
+    @Override
+    protected void link(Path src, Path dst) throws IOException {
+      line("ln -sf \"", src.toUri().getPath(), "\" \"", dst.toString(), "\"");
+    }
+
+    @Override
+    protected void mkdir(Path path) {
+      line("mkdir -p ", path.toString());
+    }
+  }
+
+  private static final class WindowsShellScriptBuilder
+      extends ShellScriptBuilder {
+
+    public WindowsShellScriptBuilder() {
+      line("@setlocal");
+      line();
+    }
+
+    @Override
+    public void command(List<String> command) {
+      line("@call ", StringUtils.join(" ", command));
+    }
+
+    @Override
+    public void env(String key, String value) {
+      line("@set ", key, "=", value);
+    }
+
+    @Override
+    protected void link(Path src, Path dst) throws IOException {
+      line(String.format("@%s symlink \"%s\" \"%s\"", Shell.WINUTILS,
+        new File(dst.toString()).getPath(),
+        new File(src.toUri().getPath()).getPath()));
+    }
+
+    @Override
+    protected void mkdir(Path path) {
+      line("@if not exist ", path.toString(), " mkdir ", path.toString());
+    }
-      Path pwd, List<Path> appDirs) {
+      Path pwd, List<Path> appDirs) throws IOException {
+    // TODO: Remove Windows check and use this approach on all platforms after
+    // additional testing.  See YARN-358.
+    if (Shell.WINDOWS) {
+      String inputClassPath = environment.get(Environment.CLASSPATH.name());
+      environment.put(Environment.CLASSPATH.name(),
+          FileUtil.createJarWithClassPath(inputClassPath, pwd));
+    }
+
-    ShellScriptBuilder sb = new ShellScriptBuilder();
+    ShellScriptBuilder sb = Shell.WINDOWS ? new WindowsShellScriptBuilder() :
+      new UnixShellScriptBuilder();
-          sb.symlink(entry.getKey(), linkName);
+          sb.symlink(entry.getKey(), new Path(linkName));
-    ArrayList<String> cmd = new ArrayList<String>(2 * command.size() + 5);
-    cmd.add("exec /bin/bash ");
-    cmd.add("-c ");
-    cmd.add("\"");
-    for (String cs : command) {
-      cmd.add(cs.toString());
-      cmd.add(" ");
-    }
-    cmd.add("\"");
-    sb.line(cmd.toArray(new String[cmd.size()]));
+    sb.command(command);
+

INS26 INS26 INS40 INS40 MOV31 INS55 INS55 INS83 INS23 INS31 INS31 INS83 INS83 INS83 INS42 MOV43 INS31 INS31 MOV31 INS31 INS31 INS83 INS83 INS83 INS42 MOV43 INS31 INS31 INS31 INS31 INS31 INS43 INS16 INS83 INS83 INS83 MOV43 INS59 INS83 INS39 UPD42 INS44 UPD83 INS83 INS39 UPD42 INS44 INS83 INS39 INS83 UPD83 INS83 UPD83 MOV83 INS83 INS39 UPD42 MOV42 INS44 MOV44 INS43 INS83 INS83 INS39 INS42 INS44 INS83 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS39 INS78 INS83 INS39 INS42 MOV44 INS44 MOV43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS25 INS60 INS40 INS45 INS45 INS42 INS32 INS14 INS74 INS42 INS43 INS42 INS43 INS42 INS21 INS43 INS42 UPD43 INS42 MOV43 INS42 INS21 INS21 INS42 INS74 INS42 INS21 INS42 INS42 INS43 INS42 MOV21 INS42 INS43 INS42 INS21 INS21 INS21 INS42 INS74 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS21 INS40 INS8 MOV43 INS59 INS42 INS42 INS45 MOV43 INS43 INS43 INS42 INS42 INS32 INS42 UPD42 INS32 INS32 INS43 INS43 INS32 INS42 INS42 INS32 INS32 INS32 INS43 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS60 INS21 MOV42 INS16 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS45 INS32 INS45 INS32 MOV43 INS59 INS32 INS40 INS14 INS14 MOV32 MOV32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS40 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS43 INS43 UPD42 INS14 INS42 INS14 INS42 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS32 INS43 INS32 INS40 INS42 MOV32 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 UPD42 INS42 INS42 INS14 INS43 INS42 INS42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL43 DEL45 DEL14 DEL17 DEL8 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL45 DEL32 DEL52 DEL41 DEL45 DEL42 DEL43 DEL52 DEL41 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL34 DEL42 DEL42 DEL32 DEL27 DEL34 DEL27 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL85 DEL5 DEL42 DEL32 DEL3 DEL32