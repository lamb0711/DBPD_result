hadoop-12050. Enable MaxInactiveInterval for hadoop http auth token. Contributed by Huizhi Lu.

+   * Constant for the configuration property
+   * that indicates the max inactive interval of the generated token.
+   */
+  public static final String
+      AUTH_TOKEN_MAX_INACTIVE_INTERVAL = "token.MaxInactiveInterval";
+
+  /**
+  private long maxInactiveInterval;
+    maxInactiveInterval = Long.parseLong(config.getProperty(
+        AUTH_TOKEN_MAX_INACTIVE_INTERVAL, "1800")) * 1000; // 30 minutes;
+   * Returns the max inactive interval time of the generated tokens.
+   *
+   * @return the max inactive interval time of the generated tokens in seconds.
+   */
+  protected long getMaxInactiveInterval() {
+    return maxInactiveInterval / 1000;
+  }
+
+  /**
-  public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
-      throws IOException, ServletException {
+  public void doFilter(ServletRequest request,
+                       ServletResponse response,
+                       FilterChain filterChain)
+                           throws IOException, ServletException {
-            LOG.debug("Request [{}] triggering authentication", getRequestURL(httpRequest));
+            LOG.debug("Request [{}] triggering authentication",
+                getRequestURL(httpRequest));
-          if (token != null && token.getExpires() != 0 &&
-              token != AuthenticationToken.ANONYMOUS) {
-            token.setExpires(System.currentTimeMillis() + getValidity() * 1000);
+          if (token != null && token != AuthenticationToken.ANONYMOUS) {
+            if (token.getMaxInactives() != 0) {
+              token.setMaxInactives(System.currentTimeMillis()
+                  + getMaxInactiveInterval() * 1000);
+            }
+            if (token.getExpires() != 0) {
+              token.setExpires(System.currentTimeMillis()
+                  + getValidity() * 1000);
+            }
-            LOG.debug("Request [{}] user [{}] authenticated", getRequestURL(httpRequest), token.getUserName());
+            LOG.debug("Request [{}] user [{}] authenticated",
+                getRequestURL(httpRequest), token.getUserName());
-              return (authToken != AuthenticationToken.ANONYMOUS) ? authToken : null;
+              return (authToken != AuthenticationToken.ANONYMOUS) ?
+                  authToken : null;
-          if (newToken && !token.isExpired() && token != AuthenticationToken.ANONYMOUS) {
+
+          // If cookie persistence is configured to false,
+          // it means the cookie will be a session cookie.
+          // If the token is an old one, renew the its maxInactiveInterval.
+          if (!newToken && !isCookiePersistent()
+              && getMaxInactiveInterval() > 0) {
+            token.setMaxInactives(System.currentTimeMillis()
+                + getMaxInactiveInterval() * 1000);
+            newToken = true;
+          }
+          if (newToken && !token.isExpired()
+              && token != AuthenticationToken.ANONYMOUS) {
-   * @param path the cokie path.
+   * @param path the cookie path.
-   * @param token the token.
-   * @param expires the cookie expiration time.

INS23 INS23 INS31 INS29 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS65 INS42 INS42 INS45 INS42 INS21 INS65 INS65 INS41 INS66 INS66 INS7 INS66 INS66 INS27 UPD66 INS42 INS27 INS42 INS34 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS25 INS25 MOV27 INS8 INS27 INS8 MOV27 INS25 MOV25 INS38 INS38 INS27 INS21 INS21 INS27 INS8 MOV27 INS42 INS32 INS32 INS34 INS32 INS7 INS32 INS34 INS21 INS42 INS42 INS42 INS42 INS27 INS42 INS9 INS42 INS42 INS32 INS32 INS27 INS42 INS42 INS27 INS42 INS42 INS32 INS34 INS32 INS27 INS42 INS42 INS42 INS32 INS34 INS42 DEL27 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65