HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.SafeModeException;
+import org.apache.hadoop.io.retry.DefaultFailoverProxyProvider;
+import com.google.protobuf.ServiceException;
+  /**
+   * Return the default retry policy used in RPC.
+   * 
+   * If dfs.client.retry.policy.enabled == false, use TRY_ONCE_THEN_FAIL.
+   * 
+   * Otherwise, first unwrap ServiceException if possible, and then 
+   * (1) use multipleLinearRandomRetry for
+   *     - SafeModeException, or
+   *     - IOException other than RemoteException, or
+   *     - ServiceException; and
+   * (2) use TRY_ONCE_THEN_FAIL for
+   *     - non-SafeMode RemoteException, or
+   *     - non-IOException.
+   *     
+   * Note that dfs.client.retry.max < 0 is not allowed.
+   */
+  private static RetryPolicy getDefaultRpcRetryPolicy(Configuration conf) {
+    final RetryPolicy multipleLinearRandomRetry = getMultipleLinearRandomRetry(conf);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("multipleLinearRandomRetry = " + multipleLinearRandomRetry);
+    }
+    if (multipleLinearRandomRetry == null) {
+      //no retry
+      return RetryPolicies.TRY_ONCE_THEN_FAIL;
+    } else {
+      return new RetryPolicy() {
+        @Override
+        public RetryAction shouldRetry(Exception e, int retries, int failovers,
+            boolean isMethodIdempotent) throws Exception {
+          if (e instanceof ServiceException) {
+            //unwrap ServiceException
+            final Throwable cause = e.getCause();
+            if (cause != null && cause instanceof Exception) {
+              e = (Exception)cause;
+            }
+          }
+
+          //see (1) and (2) in the javadoc of this method.
+          final RetryPolicy p;
+          if (e instanceof RemoteException) {
+            final RemoteException re = (RemoteException)e;
+            p = SafeModeException.class.getName().equals(re.getClassName())?
+                multipleLinearRandomRetry: RetryPolicies.TRY_ONCE_THEN_FAIL;
+          } else if (e instanceof IOException || e instanceof ServiceException) {
+            p = multipleLinearRandomRetry;
+          } else { //non-IOException
+            p = RetryPolicies.TRY_ONCE_THEN_FAIL;
+          }
+
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("RETRY " + retries + ") policy="
+                + p.getClass().getSimpleName() + ", exception=" + e);
+          }
+          LOG.info("RETRY " + retries + ") policy="
+              + p.getClass().getSimpleName() + ", exception=" + e);
+          return p.shouldRetry(e, retries, failovers, isMethodIdempotent);
+        }
+      };
+    }
+  }
+
+  /**
+   * Return the MultipleLinearRandomRetry policy specified in the conf,
+   * or null if the feature is disabled.
+   * If the policy is specified in the conf but the policy cannot be parsed,
+   * the default policy is returned.
+   * 
+   * Conf property: N pairs of sleep-time and number-of-retries
+   *   dfs.client.retry.policy = "s1,n1,s2,n2,..."
+   */
+  private static RetryPolicy getMultipleLinearRandomRetry(Configuration conf) {
+    final boolean enabled = conf.getBoolean(
+        DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY,
+        DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT);
+    if (!enabled) {
+      return null;
+    }
+
+    final String policy = conf.get(
+        DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,
+        DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT);
+
+    final RetryPolicy r = RetryPolicies.MultipleLinearRandomRetry.parseCommaSeparatedString(policy);
+    return r != null? r: RetryPolicies.MultipleLinearRandomRetry.parseCommaSeparatedString(
+        DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT);
+  }
+
-    ClientNamenodeProtocolPB proxy = (ClientNamenodeProtocolPB) NameNodeProxies
-        .createNameNodeProxy(address, conf, ugi, ClientNamenodeProtocolPB.class, 0);
+    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);
+
+    final RetryPolicy defaultPolicy = getDefaultRpcRetryPolicy(conf);
+    final long version = RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);
+    ClientNamenodeProtocolPB proxy = RPC.getProtocolProxy(
+        ClientNamenodeProtocolPB.class, version, address, ugi, conf,
+        NetUtils.getDefaultSocketFactory(conf), 0, defaultPolicy).getProxy();
+
+
-          .retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,
+          .retryByRemoteException(defaultPolicy,
-          RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);
+          defaultPolicy, exceptionToPolicyMap);
-      proxy = (ClientNamenodeProtocolPB) RetryProxy
-          .create(ClientNamenodeProtocolPB.class, proxy, methodNameToPolicyMap);
+      proxy = (ClientNamenodeProtocolPB) RetryProxy.create(
+          ClientNamenodeProtocolPB.class,
+          new DefaultFailoverProxyProvider<ClientNamenodeProtocolPB>(
+              ClientNamenodeProtocolPB.class, proxy),
+          methodNameToPolicyMap,
+          defaultPolicy);

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS42 INS43 INS42 INS60 INS25 INS25 INS65 INS42 INS43 INS42 INS60 INS25 INS60 INS60 INS41 INS21 INS60 INS60 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS83 INS43 INS59 INS32 INS8 INS27 INS8 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS83 INS39 INS59 INS38 INS8 INS83 INS43 INS59 INS83 INS43 INS59 INS16 INS32 INS83 INS43 INS59 INS83 INS39 INS59 MOV43 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS33 INS41 INS41 INS42 INS32 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS42 INS32 INS42 INS42 INS42 MOV57 INS57 INS42 INS42 INS32 INS42 MOV32 INS32 INS42 INS42 INS32 INS40 INS14 INS42 INS42 INS40 INS40 INS33 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS42 INS33 INS40 INS42 INS40 INS43 INS42 INS42 UPD42 UPD42 INS32 INS42 INS43 INS42 INS42 INS27 MOV43 INS1 INS42 INS42 UPD42 MOV42 INS57 INS42 MOV42 INS42 MOV42 INS32 MOV34 INS42 INS42 INS45 INS42 INS31 INS43 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV43 INS32 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS57 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS25 INS60 INS25 INS25 INS21 INS41 INS43 INS74 INS57 INS42 INS42 INS62 INS8 INS83 INS43 INS59 INS62 INS8 INS25 INS32 INS8 INS32 INS32 INS42 INS43 MOV43 INS43 INS42 INS43 INS60 INS25 INS42 INS42 INS42 INS43 INS60 INS21 INS27 INS8 INS8 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS42 INS83 INS43 INS59 INS7 INS62 INS62 INS21 INS21 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS32 INS27 INS62 INS21 INS42 INS42 INS11 INS42 INS16 INS42 INS43 INS42 INS43 INS7 INS7 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS7 INS43 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS42 INS32 INS32 INS42 INS43 INS42 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL40 DEL40