HADOOP-13560. S3ABlockOutputStream to support huge (many GB) file writes. Contributed by Steve Loughran

+  /** The minimum multipart size which S3 supports. */
+  public static final int MULTIPART_MIN_SIZE = 5 * 1024 * 1024;
+
-  // should we upload directly from memory rather than using a file buffer
+  // switch to the fast block-by-block upload mechanism
+  @Deprecated
+  /**
+   * What buffer to use.
+   * Default is {@link #FAST_UPLOAD_BUFFER_DISK}
+   * Value: {@value}
+   */
+  @InterfaceStability.Unstable
+  public static final String FAST_UPLOAD_BUFFER =
+      "fs.s3a.fast.upload.buffer";
+
+  /**
+   * Buffer blocks to disk: {@value}.
+   * Capacity is limited to available disk space.
+   */
+
+  @InterfaceStability.Unstable
+  public static final String FAST_UPLOAD_BUFFER_DISK = "disk";
+
+  /**
+   * Use an in-memory array. Fast but will run of heap rapidly: {@value}.
+   */
+  @InterfaceStability.Unstable
+  public static final String FAST_UPLOAD_BUFFER_ARRAY = "array";
+
+  /**
+   * Use a byte buffer. May be more memory efficient than the
+   * {@link #FAST_UPLOAD_BUFFER_ARRAY}: {@value}.
+   */
+  @InterfaceStability.Unstable
+  public static final String FAST_UPLOAD_BYTEBUFFER = "bytebuffer";
+
+  /**
+   * Default buffer option: {@value}.
+   */
+  @InterfaceStability.Unstable
+  public static final String DEFAULT_FAST_UPLOAD_BUFFER =
+      FAST_UPLOAD_BUFFER_DISK;
+
+  /**
+   * Maximum Number of blocks a single output stream can have
+   * active (uploading, or queued to the central FileSystem
+   * instance's pool of queued operations.
+   * This stops a single stream overloading the shared thread pool.
+   * {@value}
+   * <p>
+   * Default is {@link #DEFAULT_FAST_UPLOAD_ACTIVE_BLOCKS}
+   */
+  @InterfaceStability.Unstable
+  public static final String FAST_UPLOAD_ACTIVE_BLOCKS =
+      "fs.s3a.fast.upload.active.blocks";
+
+  /**
+   * Limit of queued block upload operations before writes
+   * block. Value: {@value}
+   */
+  @InterfaceStability.Unstable
+  public static final int DEFAULT_FAST_UPLOAD_ACTIVE_BLOCKS = 4;
+
-  public static final long DEFAULT_PURGE_EXISTING_MULTIPART_AGE = 14400;
+  public static final long DEFAULT_PURGE_EXISTING_MULTIPART_AGE = 86400;
+
+  /**
+   * Maximum number of partitions in a multipart upload: {@value}.
+   */
+  @InterfaceAudience.Private
+  public static final int MAX_MULTIPART_COUNT = 10000;

INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS29 INS83 INS83 INS83 INS39 INS59 INS78 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS39 INS59 INS29 INS78 INS83 INS83 INS83 INS39 INS59 INS65 INS42 INS27 INS42 INS65 INS40 INS42 INS42 INS45 INS65 INS40 INS42 INS42 INS45 INS65 INS40 INS42 INS42 INS45 INS65 INS40 INS42 INS42 INS45 INS65 INS40 INS42 INS42 INS42 INS65 INS40 INS42 INS42 INS45 INS65 INS40 INS42 INS34 UPD34 INS65 INS40 INS42 INS34 INS66 INS34 INS34 INS34 INS66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS67 INS67 INS67 INS42 INS42 INS42