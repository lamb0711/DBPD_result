YARN-326. Add multi-resource scheduling to the fair scheduler. (sandyr via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489070 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.hadoop.yarn.util.BuilderUtils;
-  public Resource getMinimumMemoryAllocation() {
+  public Resource getMinimumAllocation() {
-    return Resources.createResource(mem);
+    int cpu = getInt(
+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,
+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
+    return Resources.createResource(mem, cpu);
-  public Resource getMaximumMemoryAllocation() {
+  public Resource getMaximumAllocation() {
-    return Resources.createResource(mem);
+    int cpu = getInt(
+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,
+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);
+    return Resources.createResource(mem, cpu);
+  
+  /**
+   * Parses a resource config value of a form like "1024", "1024 mb",
+   * or "1024 mb, 3 vcores". If no units are given, megabytes are assumed.
+   * 
+   * @throws AllocationConfigurationException
+   */
+  public static Resource parseResourceConfigValue(String val)
+      throws AllocationConfigurationException {
+    try {
+      int memory = findResource(val, "mb");
+      int vcores = findResource(val, "vcores");
+      return BuilderUtils.newResource(memory, vcores);
+    } catch (AllocationConfigurationException ex) {
+      throw ex;
+    } catch (Exception ex) {
+      throw new AllocationConfigurationException(
+          "Error reading resource config", ex);
+    }
+  }
+  
+  private static int findResource(String val, String units)
+    throws AllocationConfigurationException {
+    Pattern pattern = Pattern.compile("(\\d+) ?" + units);
+    Matcher matcher = pattern.matcher(val);
+    if (!matcher.find()) {
+      throw new AllocationConfigurationException("Missing resource: " + units);
+    }
+    return Integer.parseInt(matcher.group(1));
+  }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 UPD42 UPD42 INS29 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS60 INS60 INS65 INS65 INS42 INS43 INS42 INS42 INS54 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS39 INS59 INS39 INS59 INS66 INS66 INS42 INS42 INS8 INS12 INS12 INS42 INS42 INS43 INS59 INS43 INS59 INS38 INS8 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS60 INS60 INS41 INS44 INS8 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS32 INS42 INS40 INS40 INS42 INS40 INS40 INS39 INS59 INS39 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS34 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS45 INS42 INS43 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS43 INS45 INS42 INS42 INS45 INS42 INS42