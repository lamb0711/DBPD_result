HDFS-10320. Rack failures may result in NN terminate. (Xiao Chen via mingma)

-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-  public static final Log LOG =
-    LogFactory.getLog(NetworkTopology.class);
+  public static final Logger LOG =
+      LoggerFactory.getLogger(NetworkTopology.class);
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("NetworkTopology became:\n" + this.toString());
-      }
+      LOG.debug("NetworkTopology became:\n{}", this.toString());
-      if(LOG.isDebugEnabled()) {
-        LOG.debug("NetworkTopology became:\n" + this.toString());
-      }
+      LOG.debug("NetworkTopology became:\n{}", this.toString());
-  /** randomly choose one node from <i>scope</i>
-   * if scope starts with ~, choose one from the all nodes except for the
-   * ones in <i>scope</i>; otherwise, choose one from <i>scope</i>
+  /**
+   * Randomly choose a node.
+   *
+   *
+   * @see #chooseRandom(String, Collection)
-  public Node chooseRandom(String scope) {
+  public Node chooseRandom(final String scope) {
+    return chooseRandom(scope, null);
+  }
+
+  /**
+   * Randomly choose one node from <i>scope</i>.
+   *
+   * If scope starts with ~, choose one from the all nodes except for the
+   * ones in <i>scope</i>; otherwise, choose one from <i>scope</i>.
+   * If excludedNodes is given, choose a node that's not in excludedNodes.
+   *
+   * @param scope range of nodes from which a node will be chosen
+   * @param excludedNodes nodes to be excluded from
+   * @return the chosen node
+   */
+  public Node chooseRandom(final String scope,
+      final Collection<Node> excludedNodes) {
-        return chooseRandom(NodeBase.ROOT, scope.substring(1));
+        return chooseRandom(NodeBase.ROOT, scope.substring(1), excludedNodes);
-        return chooseRandom(scope, null);
+        return chooseRandom(scope, null, excludedNodes);
-  private Node chooseRandom(String scope, String excludedScope){
+  private Node chooseRandom(final String scope, String excludedScope,
+      final Collection<Node> excludedNodes) {
-      return node;
+      return excludedNodes != null && excludedNodes.contains(node) ?
+          null : node;
-      throw new InvalidTopologyException(
-          "Failed to find datanode (scope=\"" + String.valueOf(scope) +
-          "\" excludedScope=\"" + String.valueOf(excludedScope) + "\").");
+      LOG.warn("Failed to find datanode (scope=\"{}\" excludedScope=\"{}\").",
+          String.valueOf(scope), String.valueOf(excludedScope));
+      return null;
-    int leaveIndex = r.nextInt(numOfDatanodes);
-    return innerNode.getLeaf(leaveIndex, node);
+    Node ret = null;
+    final int availableNodes;
+    if (excludedScope == null) {
+      availableNodes = countNumOfAvailableNodes(scope, excludedNodes);
+    } else {
+      availableNodes =
+          countNumOfAvailableNodes("~" + excludedScope, excludedNodes);
+    }
+    LOG.debug("Choosing random from {} available nodes on node {},"
+        + " scope={}, excludedScope={}, excludeNodes={}", availableNodes,
+        innerNode.toString(), scope, excludedScope, excludedNodes);
+    if (availableNodes > 0) {
+      do {
+        int leaveIndex = r.nextInt(numOfDatanodes);
+        ret = innerNode.getLeaf(leaveIndex, node);
+        if (excludedNodes == null || !excludedNodes.contains(ret)) {
+          break;
+        } else {
+          LOG.debug("Node {} is excluded, continuing.", ret);
+        }
+        // We've counted numOfAvailableNodes inside the lock, so there must be
+        // at least 1 satisfying node. Keep trying until we found it.
+      } while (true);
+    }
+    LOG.debug("chooseRandom returning {}", ret);
+    return ret;
+  @VisibleForTesting
-      for (Node node : excludedNodes) {
-        node = getNode(NodeBase.getPath(node));
-        if (node == null) {
-          continue;
-        }
-        if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)
-            .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {
-          excludedCountInScope++;
-        } else {
-          excludedCountOffScope++;
+      if (excludedNodes != null) {
+        for (Node node : excludedNodes) {
+          node = getNode(NodeBase.getPath(node));
+          if (node == null) {
+            continue;
+          }
+          if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)
+              .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {
+            excludedCountInScope++;
+          } else {
+            excludedCountOffScope++;
+          }

MOV26 MOV26 UPD40 UPD40 INS31 UPD43 INS29 INS83 MOV43 INS42 INS44 MOV8 INS43 INS44 INS44 INS78 UPD42 INS65 MOV65 MOV65 INS65 INS83 INS43 INS42 INS65 INS65 INS65 INS42 INS83 INS83 INS74 INS42 INS83 INS83 INS74 INS42 INS60 INS60 INS25 INS21 INS25 INS21 INS42 UPD42 UPD42 INS66 INS68 INS42 UPD66 UPD66 UPD66 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS43 INS43 INS43 INS43 INS59 INS83 INS39 INS59 INS27 INS8 INS8 INS32 INS27 INS8 INS32 INS42 MOV21 MOV21 INS42 INS69 INS69 INS42 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS33 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS19 INS42 INS42 INS45 INS42 INS25 INS43 INS43 INS8 INS16 INS32 INS33 INS7 INS7 INS45 INS45 INS42 INS42 INS8 INS9 INS27 INS8 INS45 MOV32 INS45 MOV32 INS42 INS42 INS41 INS27 INS33 INS42 INS42 INS42 INS45 MOV32 MOV32 INS42 INS32 INS42 INS32 MOV60 INS21 INS25 INS42 INS33 MOV70 INS32 INS27 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS7 INS27 INS8 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS42 INS45 INS42 INS42 MOV32 INS27 INS38 INS10 INS21 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL43 DEL45 DEL45 DEL45 DEL27 DEL14 DEL53