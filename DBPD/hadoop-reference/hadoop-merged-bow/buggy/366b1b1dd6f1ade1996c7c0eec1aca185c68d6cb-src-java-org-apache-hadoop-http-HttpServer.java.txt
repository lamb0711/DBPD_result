HADOOP-6151. Added a input filter to all of the http servlets that quotes
html characters in the parameters, to prevent cross site scripting 
attacks. (omalley)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816703 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Enumeration;
-import java.nio.channels.ServerSocketChannel;
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequestWrapper;
+    addGlobalFilter("safety", QuotingInputFilter.class.getName(), null);
-      PrintWriter out = new PrintWriter(response.getOutputStream());
+      PrintWriter out = new PrintWriter
+                    (HtmlQuoting.quoteOutputStream(response.getOutputStream()));
+  
+  /**
+   * A Servlet input filter that quotes all HTML active characters in the
+   * parameter names and values. The goal is to quote the characters to make
+   * all of the servlets resistant to cross-site scripting attacks.
+   */
+  public static class QuotingInputFilter implements Filter {
+
+    public static class RequestQuoter extends HttpServletRequestWrapper {
+      private final HttpServletRequest rawRequest;
+      public RequestQuoter(HttpServletRequest rawRequest) {
+        super(rawRequest);
+        this.rawRequest = rawRequest;
+      }
+      
+      /**
+       * Return the set of parameter names, quoting each name.
+       */
+      @SuppressWarnings("unchecked")
+      @Override
+      public Enumeration<String> getParameterNames() {
+        return new Enumeration<String>() {
+          private Enumeration<String> rawIterator = 
+            rawRequest.getParameterNames();
+          @Override
+          public boolean hasMoreElements() {
+            return rawIterator.hasMoreElements();
+          }
+
+          @Override
+          public String nextElement() {
+            return HtmlQuoting.quoteHtmlChars(rawIterator.nextElement());
+          }
+        };
+      }
+      
+      /**
+       * Unquote the name and quote the value.
+       */
+      @Override
+      public String getParameter(String name) {
+        return HtmlQuoting.quoteHtmlChars(rawRequest.getParameter
+                                     (HtmlQuoting.unquoteHtmlChars(name)));
+      }
+      
+      @Override
+      public String[] getParameterValues(String name) {
+        String unquoteName = HtmlQuoting.unquoteHtmlChars(name);
+        String[] unquoteValue = rawRequest.getParameterValues(unquoteName);
+        String[] result = new String[unquoteValue.length];
+        for(int i=0; i < result.length; ++i) {
+          result[i] = HtmlQuoting.quoteHtmlChars(unquoteValue[i]);
+        }
+        return result;
+      }
+
+      @SuppressWarnings("unchecked")
+      @Override
+      public Map<String, String> getParameterMap() {
+        Map<String, String> result = new HashMap<String,String>();
+        Map<String, String> raw = rawRequest.getParameterMap();
+        for (Map.Entry<String,String> item: raw.entrySet()) {
+          result.put(HtmlQuoting.quoteHtmlChars(item.getKey()), 
+                     HtmlQuoting.quoteHtmlChars(item.getValue()));
+        }
+        return result;
+      }
+    }
+
+    @Override
+    public void init(FilterConfig config) throws ServletException {
+    }
+
+    @Override
+    public void destroy() {
+    }
+
+    @Override
+    public void doFilter(ServletRequest request, 
+                         ServletResponse response,
+                         FilterChain chain
+                         ) throws IOException, ServletException {
+      HttpServletRequestWrapper quoted = 
+        new RequestQuoter((HttpServletRequest) request);
+      chain.doFilter(quoted, response);
+    }
+
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS55 INS29 INS83 INS83 INS42 INS43 INS55 INS31 INS31 INS31 INS21 INS65 INS42 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS32 INS66 INS66 INS66 INS42 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS29 INS79 INS78 INS83 INS74 INS42 INS8 INS29 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS5 INS42 INS44 INS8 INS79 INS78 INS83 INS74 INS42 INS8 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS42 INS45 INS32 INS33 INS42 INS42 INS43 INS42 INS46 INS21 INS65 INS42 INS45 INS42 INS43 INS43 INS41 INS65 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS85 INS43 INS42 INS60 INS60 INS60 INS24 INS41 INS42 INS45 INS42 INS43 INS43 INS43 INS60 INS60 INS70 INS41 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS57 INS42 INS42 INS42 INS7 INS66 INS42 INS42 INS14 INS66 INS42 INS32 INS42 INS42 INS43 INS59 INS5 INS59 INS5 INS59 INS58 INS27 INS38 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS32 INS22 INS42 INS74 INS1 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS43 INS11 INS42 INS42 INS42 MOV32 INS52 INS42 INS43 INS43 INS23 INS31 INS31 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS40 INS42 INS34 INS7 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS42 INS43 INS42 INS42 INS42 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS43 INS85 INS2 INS32 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42