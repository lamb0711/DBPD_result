HADOOP-7271. Standardize shell command error messages.  Contributed by Daryn Sharp


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101653 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.apache.hadoop.fs.shell.PathData;
+import org.apache.hadoop.fs.shell.PathExceptions.PathNotFoundException;
-	throw new IOException(srcpath + ": No such file or directory");
+        throw new PathNotFoundException(srcstr);
-      throw new FileNotFoundException("Cannot access "+srcPath.toString());
+      throw new PathNotFoundException(path);
-        throw new FileNotFoundException("Cannot access " + src
-                                        + ": No such file or directory.");
+        throw new PathNotFoundException(src);
-    Path f = new Path(argv[++i]);
-    FileSystem srcFs = f.getFileSystem(getConf());
+    PathData item = new PathData(argv[++i], getConf());
+    
+    if ((flag != 'e') && !item.exists) { 
+      // TODO: it's backwards compat, but why is this throwing an exception?
+      // it's not like the shell test cmd
+      throw new PathNotFoundException(item.toString());
+    }
-        return srcFs.exists(f) ? 0 : 1;
+        return item.exists ? 0 : 1;
-        return srcFs.getFileStatus(f).getLen() == 0 ? 0 : 1;
+        return (item.stat.getLen() == 0) ? 0 : 1;
-        return srcFs.getFileStatus(f).isDirectory() ? 0 : 1;
+        return item.stat.isDirectory() ? 0 : 1;
-      throw new IOException("cannot stat `" + src + "': No such file or directory");
+      throw new PathNotFoundException(src);
-          throw new FileNotFoundException(srcs[i] + 
-          ": No such file or directory");
+          throw new PathNotFoundException(srcs[i].toString());
-        //
+        // 
-        System.err.println(cmd.substring(1) + ": " +
-                           e.getLocalizedMessage());
+        displayError(cmd, e);
-      } catch (RemoteException e) {
-        LOG.debug("Error copying " + argv[i], e);
-        //
-        // This is a error returned by hadoop server. Print
-        // out the first line of the error mesage.
-        //
-        exitCode = -1;
-        try {
-          String[] content;
-          content = e.getLocalizedMessage().split("\n");
-          System.err.println(cmd.substring(1) + ": " +
-                             content[0]);
-        } catch (Exception ex) {
-          System.err.println(cmd.substring(1) + ": " +
-                             ex.getLocalizedMessage());
-        }
-        //
-        // IO exception encountered locally.
-        //
-        System.err.println(cmd.substring(1) + ": " +
-                           e.getLocalizedMessage());
+        displayError(cmd, e);
-      throw new FileNotFoundException("cannot remove "
-          + src + ": No such file or directory.");
+      throw new PathNotFoundException(src.toString());
-      } catch (RemoteException e) {
-        LOG.debug("Error", e);
-        //
-        // This is a error returned by hadoop server. Print
-        // out the first line of the error message.
-        //
-        exitCode = -1;
-        try {
-          String[] content;
-          content = e.getLocalizedMessage().split("\n");
-          System.err.println(cmd.substring(1) + ": " +
-                             content[0]);
-        } catch (Exception ex) {
-          System.err.println(cmd.substring(1) + ": " +
-                             ex.getLocalizedMessage());
-        }
-        //
-        // IO exception encountered locally.
-        //
-        String content = e.getLocalizedMessage();
-        if (content != null) {
-          content = content.split("\n")[0];
-        }
-        System.err.println(cmd.substring(1) + ": " +
-                          content);
+        displayError(cmd, e);
-    } catch (RemoteException e) {
-      LOG.debug("Error", e);
-      //
-      // This is a error returned by hadoop server. Print
-      // out the first line of the error mesage, ignore the stack trace.
-      exitCode = -1;
-      try {
-        String[] content;
-        content = e.getLocalizedMessage().split("\n");
-        System.err.println(cmd.substring(1) + ": " + 
-                           content[0]);
-      } catch (Exception ex) {
-        System.err.println(cmd.substring(1) + ": " + 
-                           ex.getLocalizedMessage());  
-      }
-    } catch (IOException e) {
-      LOG.debug("Error", e);
-      //
-      // IO exception encountered locally.
-      // 
-      exitCode = -1;
-      System.err.println(cmd.substring(1) + ": " + 
-                         e.getLocalizedMessage());  
-      System.err.println(cmd.substring(1) + ": " + re.getLocalizedMessage());  
+      displayError(cmd, re);
+  // TODO: this is a quick workaround to accelerate the integration of
+  // redesigned commands.  this will be removed this once all commands are
+  // converted.  this change will avoid having to change the hdfs tests
+  // every time a command is converted to use path-based exceptions
+  private static Pattern[] fnfPatterns = {
+    Pattern.compile("File (.*) does not exist\\."),
+    Pattern.compile("File does not exist: (.*)"),
+    Pattern.compile("`(.*)': specified destination directory doest not exist")
+  };
+  private void displayError(String cmd, Exception e) {
+    String message = e.getLocalizedMessage().split("\n")[0];
+    for (Pattern pattern : fnfPatterns) {
+      Matcher matcher = pattern.matcher(message);
+      if (matcher.matches()) {
+        message = new PathNotFoundException(matcher.group(1)).getMessage();
+        break;
+      }
+    }
+    System.err.println(cmd.substring(1) + ": " + message);  
+  }
+  

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS5 INS59 INS83 INS39 INS42 INS44 MOV44 INS8 INS25 INS43 INS85 INS42 INS4 INS43 INS42 UPD42 INS60 INS70 MOV21 UPD43 INS27 INS8 MOV8 INS42 INS32 INS32 INS32 INS42 MOV43 INS59 INS44 INS42 INS8 UPD42 UPD42 INS36 INS38 INS53 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS2 INS43 INS42 INS60 INS25 UPD43 MOV32 INS27 INS40 INS14 INS40 INS36 UPD43 INS42 MOV12 MOV32 INS34 INS42 INS43 INS59 INS32 INS8 INS42 UPD43 INS42 UPD42 INS42 INS42 INS13 INS43 INS32 INS27 INS40 UPD42 MOV44 INS42 INS42 INS32 INS42 INS42 INS21 INS10 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV34 MOV21 MOV21 UPD43 INS32 MOV21 MOV21 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS7 UPD43 INS42 UPD43 INS42 INS40 UPD42 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS43 INS32 UPD43 INS32 INS42 INS42 INS42 INS34 UPD42 MOV2 INS42 DEL42 DEL45 DEL27 DEL45 DEL42 DEL42 DEL32 DEL27 DEL45 DEL42 DEL45 DEL27 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL45 DEL27 DEL40 DEL42 DEL34 DEL32 DEL45 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL42 DEL34 DEL2 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL12 DEL42 DEL42 DEL45 DEL42 DEL42 DEL2 DEL27 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL40 DEL42 DEL34 DEL32 DEL45 DEL42 DEL32 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL34 DEL32 DEL45 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL42 DEL34 DEL2 DEL27 DEL32 DEL21 DEL8 DEL54 DEL8 DEL12 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL45 DEL32 DEL34 DEL2 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL40 DEL42 DEL42 DEL42 DEL34 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL12 DEL40 DEL42 DEL34 DEL32 DEL45 DEL42 DEL32 DEL27 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL42 DEL34 DEL2