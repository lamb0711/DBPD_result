HDFS-6061. Allow dfs.datanode.shared.file.descriptor.path to contain multiple entries and fall back when needed (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574796 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
-import com.google.common.base.Preconditions;
-
+  public static final Log LOG = LogFactory.getLog(SharedFileDescriptorFactory.class);
+   * Create a new SharedFileDescriptorFactory.
+   *
+   * @param prefix       The prefix to prepend to all the file names created
+   *                       by this factory.
+   * @param paths        An array of paths to use.  We will try each path in 
+   *                       succession, and return a factory using the first 
+   *                       usable path.
+   * @return             The factory.
+   * @throws IOException If a factory could not be created for any reason.
+   */
+  public static SharedFileDescriptorFactory create(String prefix,
+      String paths[]) throws IOException {
+    String loadingFailureReason = getLoadingFailureReason();
+    if (loadingFailureReason != null) {
+      throw new IOException(loadingFailureReason);
+    }
+    if (paths.length == 0) {
+      throw new IOException("no SharedFileDescriptorFactory paths were " +
+          "configured.");
+    }
+    StringBuilder errors = new StringBuilder();
+    String strPrefix = "";
+    for (String path : paths) {
+      try {
+        FileInputStream fis = 
+            new FileInputStream(createDescriptor0(prefix + "test", path, 1));
+        fis.close();
+        deleteStaleTemporaryFiles0(prefix, path);
+        return new SharedFileDescriptorFactory(prefix, path);
+      } catch (IOException e) {
+        errors.append(strPrefix).append("Error creating file descriptor in ").
+               append(path).append(": ").append(e.getMessage());
+        strPrefix = ", ";
+      }
+    }
+    throw new IOException(errors.toString());
+  }
+
+  /**
-  public SharedFileDescriptorFactory(String prefix, String path)
-      throws IOException {
-    Preconditions.checkState(getLoadingFailureReason() == null);
+  private SharedFileDescriptorFactory(String prefix, String path) {
-    deleteStaleTemporaryFiles0(prefix, path);
+  }
+
+  public String getPath() {
+    return path;

MOV26 INS26 UPD40 INS40 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS44 INS44 MOV43 INS8 UPD83 INS83 INS43 INS42 INS8 INS42 INS42 INS32 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS85 INS60 INS25 INS25 INS60 INS60 INS70 INS53 INS42 INS41 INS42 INS42 INS57 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS14 INS42 INS43 INS42 INS42 MOV32 INS42 INS33 INS53 INS40 INS34 INS53 INS42 INS42 INS14 INS42 INS42 INS45 INS43 INS42 INS54 INS43 INS32 INS42 INS14 INS14 INS43 INS42 INS8 INS12 INS42 INS42 INS42 INS43 INS42 INS43 INS27 INS42 INS60 INS21 MOV21 INS41 INS44 INS8 INS42 INS42 INS45 INS45 INS43 INS59 INS32 INS14 INS43 INS42 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS7 INS43 INS32 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS27 INS42 INS34 INS32 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 DEL42 DEL42 DEL33 DEL27 DEL32 DEL21