MAPREDUCE-3146. Added a MR specific command line to dump logs for a given TaskAttemptID. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195349 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import org.apache.hadoop.mapreduce.v2.LogParams;
+import org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskAttemptReportRequest;
+import org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetTaskAttemptReportResponse;
+import org.apache.hadoop.mapreduce.v2.api.records.AMInfo;
+import org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptReport;
+import org.apache.hadoop.yarn.util.BuilderUtils;
+  public LogParams getLogFilePath(JobID oldJobID, TaskAttemptID oldTaskAttemptID)
+      throws YarnRemoteException, IOException {
+    org.apache.hadoop.mapreduce.v2.api.records.JobId jobId =
+        TypeConverter.toYarn(oldJobID);
+    GetJobReportRequest request =
+        recordFactory.newRecordInstance(GetJobReportRequest.class);
+    request.setJobId(jobId);
-}
+    JobReport report =
+        ((GetJobReportResponse) invoke("getJobReport",
+            GetJobReportRequest.class, request)).getJobReport();
+    if (EnumSet.of(JobState.SUCCEEDED, JobState.FAILED, JobState.KILLED,
+        JobState.ERROR).contains(report.getJobState())) {
+      if (oldTaskAttemptID != null) {
+        GetTaskAttemptReportRequest taRequest =
+            recordFactory.newRecordInstance(GetTaskAttemptReportRequest.class);
+        taRequest.setTaskAttemptId(TypeConverter.toYarn(oldTaskAttemptID));
+        TaskAttemptReport taReport =
+            ((GetTaskAttemptReportResponse) invoke("getTaskAttemptReport",
+                GetTaskAttemptReportRequest.class, taRequest))
+                .getTaskAttemptReport();
+        if (taReport.getContainerId() == null
+            || taReport.getNodeManagerHost() == null) {
+          throw new IOException("Unable to get log information for task: "
+              + oldTaskAttemptID);
+        }
+        return new LogParams(
+            taReport.getContainerId().toString(),
+            taReport.getContainerId().getApplicationAttemptId()
+                .getApplicationId().toString(),
+            BuilderUtils.newNodeId(taReport.getNodeManagerHost(),
+                taReport.getNodeManagerPort()).toString(), report.getUser());
+      } else {
+        if (report.getAMInfos() == null || report.getAMInfos().size() == 0) {
+          throw new IOException("Unable to get log information for job: "
+              + oldJobID);
+        }
+        AMInfo amInfo = report.getAMInfos().get(report.getAMInfos().size() - 1);
+        return new LogParams(
+            amInfo.getContainerId().toString(),
+            amInfo.getAppAttemptId().getApplicationId().toString(),
+            BuilderUtils.newNodeId(amInfo.getNodeManagerHost(),
+                amInfo.getNodeManagerPort()).toString(), report.getUser());
+      }
+    } else {
+      throw new IOException("Cannot get log path for a in-progress job");
+    }
+  }
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS21 INS60 INS25 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS8 INS8 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS57 INS36 INS42 INS42 INS42 INS40 INS40 INS40 INS40 INS42 INS42 INS27 INS8 INS8 INS14 INS43 INS11 INS42 INS33 INS60 INS21 INS60 INS25 INS41 INS25 INS60 INS41 INS43 INS45 INS42 INS43 INS32 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS14 INS27 INS8 INS43 INS59 INS14 INS42 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS53 INS43 INS32 INS32 INS32 INS32 INS27 INS27 INS53 INS42 INS42 INS32 INS43 INS32 INS32 INS32 INS32 INS43 INS42 INS42 INS57 INS42 INS42 INS42 INS36 INS42 INS32 INS33 INS32 INS33 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS32 INS34 INS14 INS32 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS11 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS43 INS32 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS42 INS42 INS43 INS42