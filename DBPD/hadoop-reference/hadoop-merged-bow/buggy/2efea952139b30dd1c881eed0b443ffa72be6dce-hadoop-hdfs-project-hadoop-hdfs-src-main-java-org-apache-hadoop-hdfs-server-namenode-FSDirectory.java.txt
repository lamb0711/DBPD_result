HDFS-6391. Get the Key/IV from the NameNode for encrypted files in DFSClient. Contributed by Charles Lamb and Andrew Wang.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1606220 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.server.common.HdfsServerConstants.CRYPTO_XATTR_ENCRYPTION_ZONE;
+import static org.apache.hadoop.hdfs.server.common.HdfsServerConstants.CRYPTO_XATTR_FILE_ENCRYPTION_INFO;
+import com.google.protobuf.InvalidProtocolBufferException;
-import org.apache.hadoop.crypto.CryptoCodec;
+import org.apache.hadoop.fs.FileEncryptionInfo;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos;
+import org.apache.hadoop.hdfs.protocolPB.PBHelper;
-import static org.apache.hadoop.hdfs.protocol.HdfsConstants.CRYPTO_XATTR_KEY_ID;
-import static org.apache.hadoop.hdfs.protocol.HdfsConstants.CRYPTO_XATTR_IV;
-import static org.apache.hadoop.hdfs.protocol.HdfsConstants.CRYPTO_XATTR_KEY_VERSION_ID;
-
-  private final CryptoCodec codec;
-    this.codec = CryptoCodec.getInstance(conf);
+
-  HdfsFileStatus getFileInfo(String src, boolean resolveLink) 
-      throws UnresolvedLinkException {
+  HdfsFileStatus getFileInfo(String src, boolean resolveLink)
+    throws UnresolvedLinkException, IOException {
+
+      final int snapshotId = inodesInPath.getPathSnapshotId();
-          HdfsFileStatus.EMPTY_NAME, -1L, 0, null /* key */, null /* IV */);
+          HdfsFileStatus.EMPTY_NAME, -1L, 0, null);
-       int snapshot) {
+       int snapshot) throws IOException {
-         
+
+     FileEncryptionInfo feInfo = getFileEncryptionInfo(node, snapshot);
+
-        HdfsConstants.KEY,  // key
-        HdfsConstants.IV); // IV
+        feInfo);
+      final FileEncryptionInfo feInfo = getFileEncryptionInfo(node, snapshot);
+
-          inSnapshot);
+          inSnapshot, feInfo);
-        
+
+    final FileEncryptionInfo feInfo = getFileEncryptionInfo(node, snapshot);
+
-          node.getId(), loc, childrenNum, null /* key */, null /* IV */);
+          node.getId(), loc, childrenNum, feInfo);
-        XAttrHelper.buildXAttr(CRYPTO_XATTR_KEY_ID, keyId.getBytes());
+        XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());
-        XAttrHelper.buildXAttr(CRYPTO_XATTR_KEY_ID, null);
+        XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, null);
+  /**
+   * Set the FileEncryptionInfo for an INode.
+   */
+  void setFileEncryptionInfo(String src, FileEncryptionInfo info)
+      throws IOException {
+    // Make the PB for the xattr
+    final HdfsProtos.FileEncryptionInfoProto proto = PBHelper.convert(info);
+    final byte[] protoBytes = proto.toByteArray();
+    final XAttr fileEncryptionAttr =
+        XAttrHelper.buildXAttr(CRYPTO_XATTR_FILE_ENCRYPTION_INFO, protoBytes);
+    final List<XAttr> xAttrs = Lists.newArrayListWithCapacity(1);
+    xAttrs.add(fileEncryptionAttr);
+
+    writeLock();
+    try {
+      unprotectedSetXAttrs(src, xAttrs, EnumSet.of(XAttrSetFlag.CREATE));
+    } finally {
+      writeUnlock();
+    }
+  }
+
+  /**
+   * Return the FileEncryptionInfo for an INode, or null if the INode is not
+   * an encrypted file.
+   */
+  FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId)
+      throws IOException {
+    if (!inode.isFile()) {
+      return null;
+    }
+    readLock();
+    try {
+      List<XAttr> xAttrs = XAttrStorage.readINodeXAttrs(inode, snapshotId);
+      if (xAttrs == null) {
+        return null;
+      }
+      for (XAttr x : xAttrs) {
+        if (XAttrHelper.getPrefixName(x)
+            .equals(CRYPTO_XATTR_FILE_ENCRYPTION_INFO)) {
+          try {
+            HdfsProtos.FileEncryptionInfoProto proto =
+                HdfsProtos.FileEncryptionInfoProto.parseFrom(x.getValue());
+            FileEncryptionInfo feInfo = PBHelper.convert(proto);
+            return feInfo;
+          } catch (InvalidProtocolBufferException e) {
+            throw new IOException("Could not parse file encryption info for " +
+                "inode " + inode, e);
+          }
+        }
+      }
+      return null;
+    } finally {
+      readUnlock();
+    }
+  }
+

MOV26 MOV26 MOV26 MOV26 INS26 INS26 UPD40 UPD40 INS40 INS40 UPD40 UPD40 INS31 INS31 INS43 INS43 INS29 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS60 INS60 INS65 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS21 INS21 INS54 INS65 UPD42 MOV42 INS43 INS42 INS39 INS42 INS42 INS25 INS21 INS54 INS43 INS59 INS83 INS43 INS59 MOV43 INS66 INS42 INS42 INS83 INS43 INS59 INS83 INS5 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS32 INS32 INS8 INS8 INS66 INS66 INS42 INS38 INS8 INS32 INS8 INS8 INS60 INS42 INS42 INS32 INS42 INS60 INS42 INS42 INS32 INS40 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS41 INS42 INS60 INS25 INS70 INS41 INS21 INS83 INS39 INS59 INS42 INS42 INS42 INS83 INS43 INS59 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS32 INS42 INS42 INS33 INS74 INS59 INS27 INS8 INS44 INS42 INS8 INS33 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS8 INS32 INS42 INS42 INS54 INS42 INS42 INS42 INS8 INS12 INS60 INS60 INS41 INS44 INS8 INS43 INS59 INS43 INS59 INS42 INS43 INS42 INS53 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS45 INS42 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL33 DEL40 DEL40 DEL33 DEL33