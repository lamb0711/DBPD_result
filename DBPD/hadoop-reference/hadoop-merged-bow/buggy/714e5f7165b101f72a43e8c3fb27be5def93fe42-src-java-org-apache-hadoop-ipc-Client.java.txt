HADOOP-6889. Make RPC to have an option to timeout. Contributed by Hairong Kuang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@982681 13f79535-47bb-0310-9956-ffa450edef68

+    private int rpcTimeout;
-      
+      this.rpcTimeout = remoteId.getRpcTimeout();
-       * if the connection is not going to be closed, send a ping.
+       * if the connection is not going to be closed or 
+       * is not configured to have a RPC timeout, send a ping.
+       * (if rpcTimeout is not set to be 0, then RPC should timeout.
-        if (shouldCloseConnection.get() || !running.get()) {
+        if (shouldCloseConnection.get() || !running.get() || rpcTimeout > 0) {
+          if (rpcTimeout > 0) {
+            pingInterval = rpcTimeout;  // rpcTimeout overwrites pingInterval
+          }
-    return call(param, addr, null, ticket);
+    return call(param, addr, null, ticket, 0);
-                       Class<?> protocol, UserGroupInformation ticket)  
+                       Class<?> protocol, UserGroupInformation ticket,
+                       int rpcTimeout)  
-    Connection connection = getConnection(addr, protocol, ticket, call);
+    Connection connection = getConnection(
+        addr, protocol, ticket, rpcTimeout, call);
-            getConnection(addresses[i], protocol, ticket, call);
+            getConnection(addresses[i], protocol, ticket, 0, call);
+                                   int rpcTimeout,
-    ConnectionId remoteId = new ConnectionId(addr, protocol, ticket);
+    ConnectionId remoteId = new ConnectionId(
+        addr, protocol, ticket, rpcTimeout);
+    private int rpcTimeout;
-                 UserGroupInformation ticket) {
+                 UserGroupInformation ticket, int rpcTimeout) {
+      this.rpcTimeout = rpcTimeout;
+    private int getRpcTimeout() {
+      return rpcTimeout;
+    }
-               (ticket == id.ticket));
+               (ticket == id.ticket)) && rpcTimeout == id.rpcTimeout;
-    @Override
+    @Override  // simply use the default Object#hashcode() ?
-      return (address.hashCode() + PRIME * System.identityHashCode(protocol)) ^ 
-             (ticket == null ? 0 : ticket.hashCode());
+      return (address.hashCode() + PRIME * (
+                PRIME * (
+                  PRIME * System.identityHashCode(protocol) ^
+                  System.identityHashCode(ticket)
+                ) ^ System.identityHashCode(rpcTimeout)
+              ));

INS23 INS44 INS44 INS23 INS31 INS83 INS39 INS59 INS39 INS42 INS39 INS42 INS83 INS39 INS59 INS44 INS83 INS39 INS42 INS8 INS42 INS21 MOV43 INS42 INS39 INS42 INS21 INS41 INS7 INS34 INS7 INS42 INS36 INS22 INS32 INS42 MOV43 INS42 INS22 INS42 UPD27 MOV27 INS52 INS42 INS42 INS42 INS27 INS52 INS42 INS27 MOV32 INS27 INS42 INS34 INS25 MOV27 INS27 INS42 INS36 INS27 INS8 INS42 INS40 INS27 INS42 INS34 INS21 INS27 INS32 INS7 UPD42 MOV42 MOV36 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS34 UPD27 INS32 INS42 INS42 INS42 DEL33 DEL27 DEL34 DEL32 DEL16 DEL36