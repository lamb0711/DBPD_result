   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem
   (Suresh Srinivas via Sanjay Radia)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.fs.InvalidPathException;
+import org.apache.hadoop.security.AccessControlException;
- * This class provides an interface for implementors of a Hadoop filesystem
+ * This class provides an interface for implementors of a Hadoop file system
- * instead they access files across all filesystems using {@link FileContext}.
+ * instead they access files across all file systems using {@link FileContext}.
- * matches the "this" filesystem (ie same scheme and authority) 
+ * matches the "this" file system (ie same scheme and authority) 
- * to the root of the "this" filesystem .
+ * to the root of the "this" file system .
-  /** Recording statistics per a filesystem class. */
+  /** Recording statistics per a file system class. */
-  /** Cache of constructors for each filesystem class. */
+  /** Cache of constructors for each file system class. */
-   * Create a file system instance for the specified uri using the conf.
-   * The conf is used to find the class name that implements the filesystem.
-   * The conf is also passed to the filesystem for its configuration.
-   * @param uri
-   * @param conf
-   * @return
-   * @throws IOException
+   * Create a file system instance for the specified uri using the conf. The
+   * conf is used to find the class name that implements the file system. The
+   * conf is also passed to the file system for its configuration.
+   *
+   * @param uri URI of the file system
+   * @param conf Configuration for the file system
+   * 
+   * @return Returns the file system for the given URI
+   *
+   * @throws UnsupportedFileSystemException file system for <code>uri</code> is
+   *           not found
-  private static AbstractFileSystem createFileSystem(URI uri,
-    Configuration conf) throws IOException {
+  private static AbstractFileSystem createFileSystem(URI uri, Configuration conf)
+      throws UnsupportedFileSystemException {
-      throw new IOException("No AbstractFileSystem for scheme: "
-          + uri.getScheme());
+      throw new UnsupportedFileSystemException(
+          "No AbstractFileSystem for scheme: " + uri.getScheme());
-  protected static synchronized void printStatistics() throws IOException {
+  protected static synchronized void printStatistics() {
-  
-   * The main factory method for creating a filesystem.
-   * Get a filesystem for the URI's scheme and authority.
-   * The scheme of the URI determines a configuration property name,
-   * <tt>fs.AbstractFileSystem.<i>scheme</i>.impl</tt> whose value names
-   * the AbstractFileSystem class. 
-   * The entire URI and conf is passed to the AbstractFileSystem factory
-   * method.
+   * The main factory method for creating a file system. Get a file system for
+   * the URI's scheme and authority. The scheme of the <code>uri</code>
+   * determines a configuration property name,
+   * <tt>fs.AbstractFileSystem.<i>scheme</i>.impl</tt> whose value names the
+   * AbstractFileSystem class.
+   * 
+   * The entire URI and conf is passed to the AbstractFileSystem factory method.
+   * 
-   * @param conf which is passed to the filesystem impl.
+   * @param conf which is passed to the file system impl.
+   * 
+   * @return file system for the given URI.
+   * 
+   * @throws UnsupportedFileSystemException if the file system for
+   *           <code>uri</code> is not supported.
-    throws IOException {
+      throws UnsupportedFileSystemException {
-   * @throws URISyntaxException
+   *
+   * @throws URISyntaxException <code>uri</code> has syntax error
-      final boolean authorityNeeded, final int defaultPort) throws URISyntaxException {
+      final boolean authorityNeeded, final int defaultPort)
+      throws URISyntaxException {
-      throw new IllegalArgumentException("Uri without scheme: " + uri);
+      throw new HadoopIllegalArgumentException("Uri without scheme: " + uri);
-      throw new IllegalArgumentException("Uri scheme " + uri
+      throw new HadoopIllegalArgumentException("Uri scheme " + uri
-   * part of the given URI is stripped out and default filesystem port is used
+   * part of the given URI is stripped out and default file system port is used
+   * 
-   * @throws URISyntaxException 
+   * 
+   * @throws URISyntaxException <code>uri</code> has syntax error
-    // A filesystem implementation that requires authority must always
+    // A file system implementation that requires authority must always
-      throw new IllegalArgumentException(
+      throw new HadoopIllegalArgumentException(
-        throw new IllegalArgumentException("Scheme with non-null authority: "
+        throw new HadoopIllegalArgumentException("Scheme with non-null authority: "
-      throw new IllegalArgumentException("Uri without authority: " + uri);
+      throw new HadoopIllegalArgumentException("Uri without authority: " + uri);
-   * The default port of this filesystem.
-   * @return default port of this filesystem's Uri scheme
-   * A uri with a port of -1 => default port;
+   * The default port of this file system.
+   * 
+   * @return default port of this file system's Uri scheme
+   *         A uri with a port of -1 => default port;
-   * @return the uri of this filesystem.
+   * 
+   * @return the uri of this file system.
+   * 
+   * @throws InvalidPathException if the path is invalid
-        throw new IllegalArgumentException("relative paths not allowed:" + 
+        throw new InvalidPathException("relative paths not allowed:" + 
-        throw new IllegalArgumentException(
+        throw new InvalidPathException(
-      throw new IllegalArgumentException("Wrong FS: " + path + 
-                                    ", expected: "+this.getUri());
+      throw new InvalidPathException("Wrong FS: " + path + ", expected: "
+          + this.getUri());
-      throw new IllegalArgumentException("Wrong FS: "+path+
-                                       ", expected: "+this.getUri());
+      throw new InvalidPathException("Wrong FS: " + path + ", expected: "
+          + this.getUri());
-   * Get the path-part of a pathname. Checks that URI matches this filesystem
+   * Get the path-part of a pathname. Checks that URI matches this file system
-   * @param p
+   * 
+   * @param p path
+   * 
-      throw new IllegalArgumentException("Path part " + s + " from URI" +
-          p + " is not a valid filename.");
+      throw new InvalidPathException("Path part " + s + " from URI" + p
+          + " is not a valid filename.");
-   * that we use as the starting workingDir. For other file systems
+   * that is used as the starting workingDir. For other file systems
-   * @return the initial workingDir if the filesystem if it has such a notion
-   * otherwise return a null.
+   * @return the initial workingDir if the file system has such a notion
+   *         otherwise return a null.
-   * Return the current user's home directory in this filesystem.
+   * Return the current user's home directory in this file system.
+   * 
+   * @return current user's home directory.
+   * 
-   * @throws IOException
+   * 
+   * @throws IOException an I/O error occurred
-    final EnumSet<CreateFlag> createFlag, Options.CreateOpts... opts)
-    throws IOException, UnresolvedLinkException {
+      final EnumSet<CreateFlag> createFlag, Options.CreateOpts... opts)
+      throws AccessControlException, FileAlreadyExistsException,
+      FileNotFoundException, ParentNotDirectoryException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {
-          throw new IllegalArgumentException("multiple varargs of same kind");
+          throw new HadoopIllegalArgumentException(
+              "BlockSize option is set multiple times");
-          throw new IllegalArgumentException("multiple varargs of same kind");
+          throw new HadoopIllegalArgumentException(
+              "BufferSize option is set multiple times");
-          throw new IllegalArgumentException("multiple varargs of same kind");
+          throw new HadoopIllegalArgumentException(
+              "ReplicationFactor option is set multiple times");
-          throw new IllegalArgumentException("multiple varargs of same kind");
+          throw new HadoopIllegalArgumentException(
+              "BytesPerChecksum option is set multiple times");
-          throw new IllegalArgumentException("multiple varargs of same kind");
+          throw new HadoopIllegalArgumentException(
+              "Perms option is set multiple times");
-          throw new IllegalArgumentException("multiple varargs of same kind");
+          throw new HadoopIllegalArgumentException(
+              "Progress option is set multiple times");
-          throw new IllegalArgumentException("multiple varargs of same kind");
+          throw new HadoopIllegalArgumentException(
+              "CreateParent option is set multiple times");
-        throw new IllegalArgumentException("Unkown CreateOpts of type " +
+        throw new HadoopIllegalArgumentException("Unkown CreateOpts of type " +
-      throw new IllegalArgumentException("no permission supplied");
+      throw new HadoopIllegalArgumentException("no permission supplied");
-      throw new IllegalArgumentException(
+      throw new HadoopIllegalArgumentException(
-      EnumSet<CreateFlag> flag, FsPermission absolutePermission, int bufferSize,
-      short replication, long blockSize, Progressable progress,
-      int bytesPerChecksum, boolean createParent) 
-      throws IOException, UnresolvedLinkException;
+      EnumSet<CreateFlag> flag, FsPermission absolutePermission,
+      int bufferSize, short replication, long blockSize, Progressable progress,
+      int bytesPerChecksum, boolean createParent)
+      throws AccessControlException, FileAlreadyExistsException,
+      FileNotFoundException, ParentNotDirectoryException,
+      UnsupportedFileSystemException, UnresolvedLinkException, IOException;
-   * f must be fully qualified and the permission is absolute (ie umask has been
-   * applied).
+   * f must be fully qualified and the permission is absolute (i.e. 
+   * umask has been applied).
-  protected abstract void mkdir(final Path dir,
-      final FsPermission permission, final boolean createParent)
-    throws IOException, UnresolvedLinkException;
+  protected abstract void mkdir(final Path dir, final FsPermission permission,
+      final boolean createParent) throws AccessControlException,
+      FileAlreadyExistsException, FileNotFoundException,
+      UnresolvedLinkException, IOException;
-   * this filesystem.
+   * this file system.
-    throws IOException, UnresolvedLinkException;
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException;
-   * filesystem.
+   * file system.
-  protected FSDataInputStream open(final Path f) 
-    throws IOException, UnresolvedLinkException {
+  protected FSDataInputStream open(final Path f) throws AccessControlException,
+      FileNotFoundException, UnresolvedLinkException, IOException {
-   * filesystem.
-   * @throws UnresolvedLinkException 
+   * file system.
-    throws IOException, UnresolvedLinkException;
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException;
-   * for this filesystem.
+   * for this file system.
-    final short replication) throws IOException, UnresolvedLinkException;
+      final short replication) throws AccessControlException,
+      FileNotFoundException, UnresolvedLinkException, IOException;
-   * f must be for this filesystem.
+   * f must be for this file system.
-    final Options.Rename... options) 
-    throws IOException, UnresolvedLinkException {
+      final Options.Rename... options) throws AccessControlException,
+      FileAlreadyExistsException, FileNotFoundException,
+      ParentNotDirectoryException, UnresolvedLinkException, IOException {
-   * f must be for this filesystem and NO OVERWRITE is performed.
+   * f must be for this file system and NO OVERWRITE is performed.
-   * Filesystems that do not have a built in overwrite need implement only this
+   * File systems that do not have a built in overwrite need implement only this
-    throws IOException, UnresolvedLinkException;
+      throws AccessControlException, FileAlreadyExistsException,
+      FileNotFoundException, ParentNotDirectoryException,
+      UnresolvedLinkException, IOException;
-   * f must be for this filesystem.
+   * f must be for this file system.
-    boolean overwrite) throws IOException, UnresolvedLinkException {
+      boolean overwrite) throws AccessControlException,
+      FileAlreadyExistsException, FileNotFoundException,
+      ParentNotDirectoryException, UnresolvedLinkException, IOException {
-   * must be for this filesystem.
+   * must be for this file system.
-      final FsPermission permission) 
-      throws IOException, UnresolvedLinkException;
+      final FsPermission permission) throws AccessControlException,
+      FileNotFoundException, UnresolvedLinkException, IOException;
-   * be for this filesystem.
+   * be for this file system.
-      final String groupname) throws IOException, UnresolvedLinkException;
+      final String groupname) throws AccessControlException,
+      FileNotFoundException, UnresolvedLinkException, IOException;
-   * for this filesystem.
+   * for this file system.
-    final long atime) throws IOException, UnresolvedLinkException;
+    final long atime) throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException;
-   * this filesystem.
+   * this file system.
-    throws IOException, UnresolvedLinkException;
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException;
-  protected abstract FileStatus getFileStatus(final Path f) 
-    throws IOException, UnresolvedLinkException;
+  protected abstract FileStatus getFileStatus(final Path f)
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException;
-    throws IOException, UnresolvedLinkException {
+      throws AccessControlException, FileNotFoundException,
+      UnsupportedFileSystemException, IOException {
-   * Path f must be for this filesystem.
+   * Path f must be for this file system.
-    final long start, final long len) 
-    throws IOException, UnresolvedLinkException;
+      final long start, final long len) throws AccessControlException,
+      FileNotFoundException, UnresolvedLinkException, IOException;
-   * filesystem.
+   * file system.
-  protected FsStatus getFsStatus(final Path f) 
-    throws IOException, UnresolvedLinkException {
+  protected FsStatus getFsStatus(final Path f) throws AccessControlException,
+      FileNotFoundException, UnresolvedLinkException, IOException {
-  protected abstract FsStatus getFsStatus() throws IOException;
+  protected abstract FsStatus getFsStatus() throws AccessControlException,
+      FileNotFoundException, IOException;
-   * filesystem.
+   * file system.
-  protected abstract FileStatus[] listStatus(final Path f) 
-    throws IOException, UnresolvedLinkException;
+  protected abstract FileStatus[] listStatus(final Path f)
+      throws AccessControlException, FileNotFoundException,
+      UnresolvedLinkException, IOException;
-   * must be for this filesystem.
+   * must be for this file system.
-    throws IOException;
+      throws AccessControlException, IOException;

