HADOOP-9016. HarFsInputStream.skip(long) must never return negative value. (Ivan A. Veselovsky via jeagles)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535086 13f79535-47bb-0310-9956-ffa450edef68

-      private FSDataInputStream underLyingStream;
+      private final FSDataInputStream underLyingStream;
-      private byte[] oneBytebuff = new byte[1];
+      private final byte[] oneBytebuff = new byte[1];
+      
+        if (length < 0) {
+          throw new IllegalArgumentException("Negative length ["+length+"]");
+        }
-        if (remaining > (long)Integer.MAX_VALUE) {
+        if (remaining > Integer.MAX_VALUE) {
+      // NB: currently this method actually never executed becusae
+      // java.io.DataInputStream.read(byte[]) directly delegates to 
+      // method java.io.InputStream.read(byte[], int, int).
+      // However, potentially it can be invoked, so leave it intact for now.
-        int ret = read(b, 0, b.length);
-        if (ret != -1) {
+        final int ret = read(b, 0, b.length);
+        if (ret > 0) {
-          if (position + tmpN > end) {
-            tmpN = end - position;
-          }
+          final long actualRemaining = end - position; 
+          if (tmpN > actualRemaining) {
+            tmpN = actualRemaining;
+          }   
-        }
-        return (tmpN < 0)? -1 : 0;
-      }
+        }   
+        // NB: the contract is described in java.io.InputStream.skip(long):
+        // this method returns the number of bytes actually skipped, so,
+        // the return value should never be negative. 
+        return 0;
+      }   
-      public synchronized void seek(long pos) throws IOException {
-        if (pos < 0 || (start + pos > end)) {
-          throw new IOException("Failed to seek: EOF");
-        }
+      public synchronized void seek(final long pos) throws IOException {
+        validatePosition(pos);
+      private void validatePosition(final long pos) throws IOException {
+        if (pos < 0) {
+          throw new IOException("Negative position: "+pos);
+         }
+         final long length = end - start;
+         if (pos > length) {
+           throw new IOException("Position behind the end " +
+               "of the stream (length = "+length+"): " + pos);
+         }
+      }
+
-          nlength = (int) (end - (start + pos));
+          // length corrected to the real remaining length:
+          nlength = (int) (end - start - pos);
+        }
+        if (nlength <= 0) {
+          // EOS:
+          return -1;

INS31 INS83 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS25 INS83 INS21 INS83 INS39 INS42 INS42 MOV25 INS60 INS25 INS25 INS27 INS8 INS83 UPD27 INS34 INS32 MOV27 INS83 INS39 INS59 INS27 INS8 INS27 INS8 INS42 INS34 INS53 INS40 INS34 INS60 INS42 INS42 INS42 INS27 INS42 INS42 INS53 INS42 INS34 INS41 INS14 INS83 INS39 INS59 INS42 INS42 INS14 MOV38 INS43 INS27 INS42 MOV27 MOV42 UPD42 INS27 INS43 INS27 INS42 INS45 INS42 INS45 INS45 INS42 INS42 INS27 INS42 INS45 INS42 INS42 INS45 INS45 MOV42 MOV42 DEL39 DEL40 DEL11 DEL34 DEL38 DEL42 DEL27 DEL42 DEL34 DEL27 DEL36 DEL34 DEL16 DEL42 DEL42 DEL27 DEL42 DEL27 DEL36 DEL27 DEL45 DEL27 DEL36