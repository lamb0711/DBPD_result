HADOOP-11754. RM fails to start in non-secure mode due to authentication filter failure. Contributed by Haohui Mai.

+import javax.servlet.ServletContext;
-  private boolean randomSecret;
-  private boolean customSecretProvider;
-
-    } catch (ClassNotFoundException ex) {
-      throw new ServletException(ex);
-    } catch (InstantiationException ex) {
-      throw new ServletException(ex);
-    } catch (IllegalAccessException ex) {
+    } catch (ClassNotFoundException | InstantiationException |
+        IllegalAccessException ex) {
-      Class<? extends SignerSecretProvider> providerClass
-              = getProviderClass(config);
+      // As tomcat cannot specify the provider object in the configuration.
+      // It'll go into this path
-        secretProvider = providerClass.newInstance();
-      } catch (InstantiationException ex) {
-        throw new ServletException(ex);
-      } catch (IllegalAccessException ex) {
-        throw new ServletException(ex);
-      }
-      try {
-        secretProvider.init(config, filterConfig.getServletContext(), validity);
+        secretProvider = constructSecretProvider(
+            filterConfig.getServletContext(),
+            config, false);
-    } else {
-      customSecretProvider = true;
-  @SuppressWarnings("unchecked")
-  private Class<? extends SignerSecretProvider> getProviderClass(Properties config)
-          throws ServletException {
-    String providerClassName;
-    String signerSecretProviderName
-            = config.getProperty(SIGNER_SECRET_PROVIDER, null);
-    // fallback to old behavior
-    if (signerSecretProviderName == null) {
-      String signatureSecretFile = config.getProperty(
-          SIGNATURE_SECRET_FILE, null);
-      // The precedence from high to low : file, random
-      if (signatureSecretFile != null) {
-        providerClassName = FileSignerSecretProvider.class.getName();
-      } else {
-        providerClassName = RandomSignerSecretProvider.class.getName();
-        randomSecret = true;
+  public static SignerSecretProvider constructSecretProvider(
+      ServletContext ctx, Properties config,
+      boolean disallowFallbackToRandomSecretProvider) throws Exception {
+    String name = config.getProperty(SIGNER_SECRET_PROVIDER, "file");
+    long validity = Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY,
+                                                      "36000")) * 1000;
+
+    if (!disallowFallbackToRandomSecretProvider
+        && "file".equals(name)
+        && config.getProperty(SIGNATURE_SECRET_FILE) == null) {
+      name = "random";
+    }
+
+    SignerSecretProvider provider;
+    if ("file".equals(name)) {
+      provider = new FileSignerSecretProvider();
+      try {
+        provider.init(config, ctx, validity);
+      } catch (Exception e) {
+        if (!disallowFallbackToRandomSecretProvider) {
+          LOG.info("Unable to initialize FileSignerSecretProvider, " +
+                       "falling back to use random secrets.");
+          provider = new RandomSignerSecretProvider();
+          provider.init(config, ctx, validity);
+        } else {
+          throw e;
+        }
+    } else if ("random".equals(name)) {
+      provider = new RandomSignerSecretProvider();
+      provider.init(config, ctx, validity);
+    } else if ("zookeeper".equals(name)) {
+      provider = new ZKSignerSecretProvider();
+      provider.init(config, ctx, validity);
-      if ("random".equals(signerSecretProviderName)) {
-        providerClassName = RandomSignerSecretProvider.class.getName();
-        randomSecret = true;
-      } else if ("file".equals(signerSecretProviderName)) {
-        providerClassName = FileSignerSecretProvider.class.getName();
-      } else if ("zookeeper".equals(signerSecretProviderName)) {
-        providerClassName = ZKSignerSecretProvider.class.getName();
-      } else {
-        providerClassName = signerSecretProviderName;
-        customSecretProvider = true;
-      }
+      provider = (SignerSecretProvider) Thread.currentThread().
+          getContextClassLoader().loadClass(name).newInstance();
+      provider.init(config, ctx, validity);
-    try {
-      return (Class<? extends SignerSecretProvider>) Thread.currentThread().
-              getContextClassLoader().loadClass(providerClassName);
-    } catch (ClassNotFoundException ex) {
-      throw new ServletException(ex);
-    }
+    return provider;
-    return randomSecret;
+    return secretProvider.getClass() == RandomSignerSecretProvider.class;
-    return customSecretProvider;
+    Class<?> clazz = secretProvider.getClass();
+    return clazz != FileSignerSecretProvider.class && clazz !=
+        RandomSignerSecretProvider.class && clazz != ZKSignerSecretProvider
+        .class;
-    if (secretProvider != null) {
-      secretProvider.destroy();
-    }

INS26 INS40 INS31 INS83 INS83 MOV43 INS42 INS44 MOV44 INS44 UPD43 MOV43 MOV8 INS43 INS42 INS39 INS42 UPD42 INS25 INS60 INS25 INS41 INS60 INS8 INS42 INS39 INS59 INS27 MOV8 MOV43 INS59 INS32 INS8 MOV25 INS42 INS27 UPD74 MOV74 INS59 INS27 MOV54 UPD42 INS32 INS42 INS27 INS38 INS32 INS27 INS42 INS45 INS42 UPD42 MOV42 MOV21 INS54 INS32 MOV57 UPD76 INS42 INS32 INS27 INS27 INS84 INS42 INS42 INS42 INS45 INS32 INS34 INS42 INS45 INS42 INS42 INS32 MOV33 INS8 INS12 UPD45 UPD42 INS21 MOV8 INS42 INS42 INS42 INS42 INS27 INS27 INS42 MOV57 MOV43 MOV43 MOV43 INS42 INS42 INS32 MOV42 MOV42 MOV42 INS42 INS45 INS42 INS14 INS21 INS44 INS8 INS32 UPD42 INS21 INS21 INS42 MOV57 INS42 MOV57 INS7 MOV42 MOV42 UPD42 MOV42 INS45 INS43 INS32 INS43 INS42 INS25 UPD42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS32 INS42 MOV32 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS38 MOV8 INS8 INS43 UPD42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 MOV11 INS42 INS42 INS42 INS42 INS42 UPD42 INS9 INS42 INS21 INS53 INS42 INS43 MOV43 INS32 INS32 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS27 UPD42 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 INS45 INS45 INS43 INS42 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL33 DEL32 DEL59 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL42 DEL9 DEL42 DEL32 DEL42 DEL9 DEL7 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL9 DEL7 DEL41 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL45 DEL32 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL45 DEL79 DEL83 DEL42 DEL43 DEL76 DEL74 DEL42 DEL31 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25