HADOOP-10213. Fix bugs parsing ACL spec in FsShell setfacl. Contributed by Vinay.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559793 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.hadoop.fs.permission.AclEntryScope.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.util.StringUtils;
+
+  /**
+   * Parses a string representation of an ACL spec into a list of AclEntry
+   * objects. Example: "user::rwx,user:foo:rw-,group::r--,other::---"
+   * 
+   * @param aclSpec
+   *          String representation of an ACL spec.
+   * @param includePermission
+   *          for setAcl operations this will be true. i.e. AclSpec should
+   *          include permissions.<br>
+   *          But for removeAcl operation it will be false. i.e. AclSpec should
+   *          not contain permissions.<br>
+   *          Example: "user:foo,group:bar"
+   * @return Returns list of AclEntries parsed
+   */
+  public static List<AclEntry> parseAclSpec(String aclSpec,
+      boolean includePermission) {
+    List<AclEntry> aclEntries = new ArrayList<AclEntry>();
+    Collection<String> aclStrings = StringUtils.getStringCollection(aclSpec,
+        ",");
+    for (String aclStr : aclStrings) {
+      AclEntry.Builder builder = new AclEntry.Builder();
+      // Here "::" represent one empty string.
+      // StringUtils.getStringCollection() will ignore this.
+      String[] split = aclStr.split(":");
+      int expectedAclSpecLength = 2;
+      if (includePermission) {
+        expectedAclSpecLength = 3;
+      }
+      if (split.length != expectedAclSpecLength
+          && !(split.length == expectedAclSpecLength + 1 && "default"
+              .equals(split[0]))) {
+        throw new HadoopIllegalArgumentException("Invalid <aclSpec> : "
+            + aclStr);
+      }
+      int index = 0;
+      if (split.length == expectedAclSpecLength + 1) {
+        assert "default".equals(split[0]);
+        // default entry
+        index++;
+        builder.setScope(AclEntryScope.DEFAULT);
+      }
+      String type = split[index++];
+      AclEntryType aclType = null;
+      try {
+        aclType = Enum.valueOf(AclEntryType.class, type.toUpperCase());
+        builder.setType(aclType);
+      } catch (IllegalArgumentException iae) {
+        throw new HadoopIllegalArgumentException(
+            "Invalid type of acl in <aclSpec> :" + aclStr);
+      }
+
+      String name = split[index++];
+      if (!name.isEmpty()) {
+        builder.setName(name);
+      }
+
+      if (expectedAclSpecLength == 3) {
+        String permission = split[index++];
+        FsAction fsAction = FsAction.getFsAction(permission);
+        if (null == fsAction) {
+          throw new HadoopIllegalArgumentException(
+              "Invalid permission in <aclSpec> : " + aclStr);
+        }
+        builder.setPermission(fsAction);
+      }
+      aclEntries.add(builder.build());
+    }
+    return aclEntries;
+  }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS31 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS39 INS42 INS60 INS60 INS70 INS41 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS60 INS60 INS25 INS25 INS60 INS25 INS60 INS60 INS54 INS60 INS25 INS25 INS21 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS59 INS5 INS59 INS39 INS59 INS42 INS8 INS27 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS38 INS8 INS27 INS8 INS32 INS43 INS43 INS40 INS42 INS14 INS43 INS85 INS42 INS32 INS42 INS34 INS21 INS27 INS38 INS53 INS42 INS34 INS40 INS27 INS6 INS21 INS21 INS42 INS42 INS2 INS42 INS42 INS33 INS21 INS21 INS44 INS8 INS42 INS42 INS2 INS32 INS21 INS42 INS34 INS60 INS60 INS25 INS21 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS7 INS40 INS42 INS36 INS14 INS42 INS34 INS32 INS37 INS32 INS42 INS37 INS7 INS32 INS43 INS42 INS53 INS42 INS37 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS40 INS42 INS34 INS27 INS43 INS27 INS45 INS42 INS2 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS32 INS33 INS42 INS53 INS42 INS42 INS42 INS27 INS32 INS42 INS45 INS42 INS42 INS34 INS42 INS42 INS57 INS32 INS43 INS27 INS42 INS37 INS42 INS42 INS42 INS14 INS40 INS27 INS45 INS42 INS2 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS27 INS42 INS34 INS42 INS34 INS42 INS42 INS45 INS42