HADOOP-9194. RPC Support for QoS. (Junping Du via llu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461370 13f79535-47bb-0310-9956-ffa450edef68

+    private int serviceClass;
-    public Connection(ConnectionId remoteId) throws IOException {
+    public Connection(ConnectionId remoteId, int serviceClass) throws IOException {
+      this.serviceClass = serviceClass;
-     * |  Version (1 bytes)               |      
+     * |  Version (1 byte)                |
+     * +----------------------------------+
+     * |  Service Class (1 byte)          |
+      out.write(serviceClass);
-   * Same as {@link #call(RPC.RpcKind, Writable, InetSocketAddress, 
+   * Same as {@link #call(RPC.RpcKind, Writable, InetSocketAddress,
-  public Writable call(Writable param, InetSocketAddress addr, 
+  public Writable call(Writable param, InetSocketAddress addr,
-      int rpcTimeout, Configuration conf)  
+      int rpcTimeout, Configuration conf)
-        ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+    ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+   * Same as {@link #call(Writable, InetSocketAddress,
+   * Class, UserGroupInformation, int, Configuration)}
+   * except that specifying serviceClass.
+   */
+  public Writable call(Writable param, InetSocketAddress addr,
+      Class<?> protocol, UserGroupInformation ticket,
+      int rpcTimeout, int serviceClass, Configuration conf)
+      throws InterruptedException, IOException {
+    ConnectionId remoteId = ConnectionId.getConnectionId(addr, protocol,
+        ticket, rpcTimeout, conf);
+    return call(RPC.RpcKind.RPC_BUILTIN, param, remoteId, serviceClass);
+  }
+
+  /**
-  /** 
+  /**
-   * 
+   *
+    return call(rpcKind, rpcRequest, remoteId, RPC.RPC_SERVICE_CLASS_DEFAULT);
+  }
+
+  /** 
+   * Make a call, passing <code>rpcRequest</code>, to the IPC server defined by
+   * <code>remoteId</code>, returning the rpc respond.
+   * 
+   * @param rpcKind
+   * @param rpcRequest -  contains serialized method and method parameters
+   * @param remoteId - the target rpc server
+   * @param serviceClass - service class for RPC
+   * @returns the rpc response
+   * Throws exceptions if there are network problems or if the remote code 
+   * threw an exception.
+   */
+  public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,
+      ConnectionId remoteId, int serviceClass)
+      throws InterruptedException, IOException {
-    Connection connection = getConnection(remoteId, call);
+    Connection connection = getConnection(remoteId, call, serviceClass);
-                                   Call call)
+                                   Call call, int serviceClass)
-          connection = new Connection(remoteId);
+          connection = new Connection(remoteId, serviceClass);

INS31 INS31 INS23 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 MOV29 INS83 INS43 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS29 INS44 INS44 INS83 INS39 INS59 INS44 INS65 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS60 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS21 INS21 INS66 INS65 INS66 INS42 INS42 INS43 INS76 INS42 INS42 INS43 INS59 INS32 INS40 INS42 INS42 INS32 INS66 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 MOV43 INS7 UPD66 INS66 INS66 INS32 INS68 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS22 INS42 INS42 INS42 INS42 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS43 INS43 INS43 INS43 INS39 INS43 INS42 INS42 INS42 INS42 INS42 MOV43 INS42