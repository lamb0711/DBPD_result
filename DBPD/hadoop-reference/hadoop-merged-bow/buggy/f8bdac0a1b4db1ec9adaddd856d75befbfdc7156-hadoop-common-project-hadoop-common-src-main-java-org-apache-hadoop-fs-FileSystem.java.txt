HADOOP-8906. paths with multiple globs are unreliable. Contributed by Daryn Sharp.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1397704 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
-    List<String> filePatterns = GlobExpander.expand(filename);
-    if (filePatterns.size() == 1) {
-      return globStatusInternal(pathPattern, filter);
-    } else {
-      List<FileStatus> results = new ArrayList<FileStatus>();
-      for (String filePattern : filePatterns) {
-        FileStatus[] files = globStatusInternal(new Path(filePattern), filter);
-        for (FileStatus file : files) {
-          results.add(file);
-        }
-      }
-      return results.toArray(new FileStatus[results.size()]);
-    }
-  }
-
-  private FileStatus[] globStatusInternal(Path pathPattern, PathFilter filter)
-      throws IOException {
-    Path[] parents = new Path[1];
-    int level = 0;
-    String filename = pathPattern.toUri().getPath();
+    List<FileStatus> allMatches = null;
-    // path has only zero component
-    if (filename.isEmpty() || Path.SEPARATOR.equals(filename)) {
-      return getFileStatus(new Path[]{pathPattern});
-    }
-
-    // path has at least one component
-    String[] components = filename.split(Path.SEPARATOR);
-    // get the first component
-    if (pathPattern.isAbsolute()) {
-      parents[0] = new Path(Path.SEPARATOR);
-      level = 1;
-    } else {
-      parents[0] = new Path(Path.CUR_DIR);
-    }
-
-    // glob the paths that match the parent path, i.e., [0, components.length-1]
-    boolean[] hasGlob = new boolean[]{false};
-    Path[] parentPaths = globPathsLevel(parents, components, level, hasGlob);
-    FileStatus[] results;
-    if (parentPaths == null || parentPaths.length == 0) {
-      results = null;
-    } else {
-      // Now work on the last component of the path
-      GlobFilter fp = new GlobFilter(components[components.length - 1], filter);
-      if (fp.hasPattern()) { // last component has a pattern
-        // list parent directories and then glob the results
-        try {
-          results = listStatus(parentPaths, fp);
-        } catch (FileNotFoundException e) {
-          results = null;
+    List<String> filePatterns = GlobExpander.expand(filename);
+    for (String filePattern : filePatterns) {
+      Path path = new Path(filePattern.isEmpty() ? Path.CUR_DIR : filePattern);
+      List<FileStatus> matches = globStatusInternal(path, filter);
+      if (matches != null) {
+        if (allMatches == null) {
+          allMatches = matches;
+        } else {
+          allMatches.addAll(matches);
-        hasGlob[0] = true;
-      } else { // last component does not have a pattern
-        // remove the quoting of metachars in a non-regexp expansion
-        String name = unquotePathComponent(components[components.length - 1]);
-        // get all the path names
-        ArrayList<Path> filteredPaths = new ArrayList<Path>(parentPaths.length);
-        for (int i = 0; i < parentPaths.length; i++) {
-          parentPaths[i] = new Path(parentPaths[i], name);
-          if (fp.accept(parentPaths[i])) {
-            filteredPaths.add(parentPaths[i]);
-          }
-        }
-        // get all their statuses
-        results = getFileStatus(
-            filteredPaths.toArray(new Path[filteredPaths.size()]));
-
-    // Decide if the pathPattern contains a glob or not
-    if (results == null) {
-      if (hasGlob[0]) {
-        results = new FileStatus[0];
-      }
-    } else {
-      if (results.length == 0 ) {
-        if (!hasGlob[0]) {
-          results = null;
-        }
-      } else {
-        Arrays.sort(results);
-      }
+    
+    FileStatus[] results = null;
+    if (allMatches != null) {
+      results = allMatches.toArray(new FileStatus[allMatches.size()]);
+    } else if (filePatterns.size() > 1) {
+      // no matches with multiple expansions is a non-matching glob 
+      results = new FileStatus[0];
-  /*
-   * For a path of N components, return a list of paths that match the
-   * components [<code>level</code>, <code>N-1</code>].
-   */
-  private Path[] globPathsLevel(Path[] parents, String[] filePattern,
-      int level, boolean[] hasGlob) throws IOException {
-    if (level == filePattern.length - 1)
-      return parents;
-    if (parents == null || parents.length == 0) {
-      return null;
+  // sort gripes because FileStatus Comparable isn't parameterized...
+  @SuppressWarnings("unchecked") 
+  private List<FileStatus> globStatusInternal(Path pathPattern,
+      PathFilter filter) throws IOException {
+    boolean patternHasGlob = false;       // pathPattern has any globs
+    List<FileStatus> matches = new ArrayList<FileStatus>();
+
+    // determine starting point
+    int level = 0;
+    String baseDir = Path.CUR_DIR;
+    if (pathPattern.isAbsolute()) {
+      level = 1; // need to skip empty item at beginning of split list
+      baseDir = Path.SEPARATOR;
-    GlobFilter fp = new GlobFilter(filePattern[level]);
-    if (fp.hasPattern()) {
-      try {
-        parents = FileUtil.stat2Paths(listStatus(parents, fp));
-      } catch (FileNotFoundException e) {
-        parents = null;
+    
+    // parse components and determine if it's a glob
+    String[] components = null;
+    GlobFilter[] filters = null;
+    String filename = pathPattern.toUri().getPath();
+    if (!filename.isEmpty() && !Path.SEPARATOR.equals(filename)) {
+      components = filename.split(Path.SEPARATOR);
+      filters = new GlobFilter[components.length];
+      for (int i=level; i < components.length; i++) {
+        filters[i] = new GlobFilter(components[i]);
+        patternHasGlob |= filters[i].hasPattern();
-      hasGlob[0] = true;
-    } else { // the component does not have a pattern
-      // remove the quoting of metachars in a non-regexp expansion
-      String name = unquotePathComponent(filePattern[level]);
-      for (int i = 0; i < parents.length; i++) {
-        parents[i] = new Path(parents[i], name);
+      if (!patternHasGlob) {
+        baseDir = unquotePathComponent(filename);
+        components = null; // short through to filter check
-    return globPathsLevel(parents, filePattern, level + 1, hasGlob);
+    
+    // seed the parent directory path, return if it doesn't exist
+    try {
+      matches.add(getFileStatus(new Path(baseDir)));
+    } catch (FileNotFoundException e) {
+      return patternHasGlob ? matches : null;
+    }
+    
+    // skip if there are no components other than the basedir
+    if (components != null) {
+      // iterate through each path component
+      for (int i=level; (i < components.length) && !matches.isEmpty(); i++) {
+        List<FileStatus> children = new ArrayList<FileStatus>();
+        for (FileStatus match : matches) {
+          // don't look for children in a file matched by a glob
+          if (!match.isDirectory()) {
+            continue;
+          }
+          try {
+            if (filters[i].hasPattern()) {
+              // get all children matching the filter
+              FileStatus[] statuses = listStatus(match.getPath(), filters[i]);
+              children.addAll(Arrays.asList(statuses));
+            } else {
+              // the component does not have a pattern
+              String component = unquotePathComponent(components[i]);
+              Path child = new Path(match.getPath(), component);
+              children.add(getFileStatus(child));
+            }
+          } catch (FileNotFoundException e) {
+            // don't care
+          }
+        }
+        matches = children;
+      }
+    }
+    // remove anything that didn't match the filter
+    if (!matches.isEmpty()) {
+      Iterator<FileStatus> iter = matches.iterator();
+      while (iter.hasNext()) {
+        if (!filter.accept(iter.next().getPath())) {
+          iter.remove();
+        }
+      }
+    }
+    // no final paths, if there were any globs return empty list
+    if (matches.isEmpty()) {
+      return patternHasGlob ? matches : null;
+    }
+    Collections.sort(matches);
+    return matches;
-   * Return a list of file status objects that corresponds to the list of paths
-   * excluding those non-existent paths.
-   * 
-   * @param paths
-   *          the list of paths we want information from
-   * @return a list of FileStatus objects
-   * @throws IOException
-   *           see specific implementation
-   */
-  private FileStatus[] getFileStatus(Path[] paths) throws IOException {
-    if (paths == null) {
-      return null;
-    }
-    ArrayList<FileStatus> results = new ArrayList<FileStatus>(paths.length);
-    for (int i = 0; i < paths.length; i++) {
-      try {
-        results.add(getFileStatus(paths[i]));
-      } catch (FileNotFoundException e) { // do nothing
-      }
-    }
-    return results.toArray(new FileStatus[results.size()]);
-  }
-  
-  /**

INS26 INS40 INS31 INS79 MOV83 INS74 MOV42 MOV44 MOV44 MOV43 INS8 INS60 MOV70 INS60 INS25 INS41 INS42 INS45 INS43 INS43 MOV60 MOV60 MOV60 MOV60 INS25 MOV60 MOV60 MOV60 INS25 INS54 INS25 INS25 INS25 INS21 MOV41 INS74 INS59 MOV5 INS59 INS27 INS8 INS25 MOV42 INS42 MOV42 INS39 INS74 MOV43 MOV32 MOV8 INS5 UPD27 MOV27 INS8 INS8 INS12 INS27 INS8 INS38 INS8 INS32 INS8 INS32 INS42 INS43 INS43 INS42 INS33 INS60 INS25 INS42 INS33 INS42 INS33 INS21 UPD27 MOV27 MOV8 UPD42 INS9 INS43 INS43 UPD42 UPD42 INS40 MOV21 INS33 MOV43 INS85 INS42 INS33 INS38 INS38 MOV21 MOV21 MOV24 INS25 MOV21 MOV44 INS8 INS42 INS33 INS24 INS32 INS60 INS61 INS42 INS42 INS41 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV43 INS59 MOV74 INS27 INS8 INS7 INS42 INS42 MOV32 MOV32 INS38 INS8 MOV41 INS58 INS27 MOV37 INS8 UPD42 MOV42 INS42 UPD74 MOV74 INS59 INS32 INS8 INS16 INS42 INS14 UPD42 INS42 INS33 INS25 INS42 INS32 UPD42 INS40 UPD42 MOV32 UPD42 INS3 UPD40 INS21 INS42 MOV21 MOV21 UPD42 UPD42 INS32 INS16 INS39 INS59 INS36 INS38 MOV60 INS70 INS21 UPD43 INS42 INS32 INS42 INS42 INS25 INS42 INS42 INS33 MOV43 INS16 INS42 INS27 INS8 INS8 UPD42 MOV42 MOV42 MOV3 INS5 INS40 INS42 INS7 UPD42 MOV42 INS14 INS42 INS42 INS33 INS42 INS42 INS27 INS32 INS74 MOV44 INS42 INS8 INS7 UPD42 INS42 INS42 INS38 INS8 INS32 INS40 INS42 INS42 INS33 INS21 MOV21 MOV5 MOV43 INS85 INS42 INS32 UPD42 INS32 UPD42 MOV43 INS42 INS42 UPD40 MOV40 INS42 INS42 INS43 INS43 UPD42 UPD42 INS25 INS54 INS42 INS42 INS32 INS21 INS42 INS42 INS7 UPD42 UPD42 MOV43 MOV2 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS74 INS38 INS8 INS8 MOV12 INS42 INS42 INS32 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS43 INS32 INS18 MOV25 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS2 INS60 INS21 INS60 MOV21 INS42 INS42 MOV5 INS59 INS32 MOV43 MOV43 INS59 INS32 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS14 INS42 INS42 INS32 UPD42 MOV42 INS32 INS2 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS42 INS42 DEL42 DEL14 DEL42 DEL8 DEL70 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL32 DEL41 DEL8 DEL25 DEL39 DEL85 DEL5 DEL39 DEL85 DEL5 DEL9 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL33 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL33 DEL34 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL3 DEL32 DEL32 DEL43 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL34 DEL2 DEL9 DEL7 DEL21 DEL42 DEL42 DEL2 DEL42 DEL43 DEL42 DEL42 DEL2 DEL42 DEL14 DEL7 DEL39 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL43 DEL85 DEL5 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32 DEL41 DEL8 DEL25 DEL42 DEL34 DEL2 DEL42 DEL43 DEL40 DEL14 DEL7 DEL21 DEL8 DEL42 DEL34 DEL2 DEL42 DEL43 DEL40 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL8 DEL8 DEL12 DEL54 DEL42 DEL34 DEL2 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL40 DEL14 DEL59 DEL60 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL34 DEL2 DEL25 DEL8 DEL40 DEL34 DEL27 DEL42 DEL34 DEL2 DEL38 DEL8 DEL25 DEL8 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL85 DEL5 DEL42 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL34 DEL27 DEL27 DEL42 DEL41 DEL25 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL40 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL32 DEL21 DEL8 DEL54 DEL8 DEL24 DEL8 DEL31