HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Map;
-import org.apache.hadoop.ipc.RPC;
+import com.google.common.base.Joiner;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
-   * @return collection of nameservice Ids
+   * @return collection of nameservice Ids, or null if not specified
-    return conf.getStringCollection(DFS_FEDERATION_NAMESERVICES);
+    return conf.getTrimmedStringCollection(DFS_FEDERATION_NAMESERVICES);
+  }
+
+  /**
+   * @return <code>coll</code> if it is non-null and non-empty. Otherwise,
+   * returns a list with a single null value.
+   */
+  private static Collection<String> emptyAsSingletonNull(Collection<String> coll) {
+    if (coll == null || coll.isEmpty()) {
+      return Collections.singletonList(null);
+    } else {
+      return coll;
+    }
+   * @param nsId the nameservice ID to look at, or null for non-federated 
-  public static Collection<String> getNameNodeIds(Configuration conf) {
-    return conf.getStringCollection(DFS_HA_NAMENODES_KEY);
+  static Collection<String> getNameNodeIds(Configuration conf, String nsId) {
+    String key = addSuffix(DFS_HA_NAMENODES_KEY, nsId);
+    return conf.getTrimmedStringCollection(key);
-
+  
-    if (suffix == null || suffix.length() == 0) {
+    if (suffix == null || suffix.isEmpty()) {
-    if (!suffix.startsWith(".")) {
-      key += ".";
-    }
-    return key += suffix;
+    assert !suffix.startsWith(".") :
+      "suffix '" + suffix + "' should not already have '.' prepended.";
+    return key + "." + suffix;
-    String ret = "";
-    for (int i = 0; i < suffixes.length - 1; i++) {
-      ret = addSuffix(ret, suffixes[i]);
-    }
-    return addSuffix(ret, suffixes[suffixes.length - 1]);
+    return Joiner.on(".").skipNulls().join(suffixes);
-   * Returns list of InetSocketAddress for a given set of keys.
+   * Returns the configured address for all NameNodes in the cluster.
-   * @param defaultAddress default address to return in case key is not found
+   * @param defaultAddress default address to return in case key is not found.
-   * @return list of InetSocketAddress corresponding to the key
+   * @return a map(nameserviceId to map(namenodeId to InetSocketAddress))
-  private static List<InetSocketAddress> getAddresses(Configuration conf,
+  private static Map<String, Map<String, InetSocketAddress>>
+    getAddresses(Configuration conf,
-    Collection<String> namenodeIds = getNameNodeIds(conf);
-    List<InetSocketAddress> isas = new ArrayList<InetSocketAddress>();
+    
+    // Look for configurations of the form <key>[.<nameserviceId>][.<namenodeId>]
+    // across all of the configured nameservices and namenodes.
+    Map<String, Map<String, InetSocketAddress>> ret = Maps.newHashMap();
+    for (String nsId : emptyAsSingletonNull(nameserviceIds)) {
+      Map<String, InetSocketAddress> isas =
+        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);
+      if (!isas.isEmpty()) {
+        ret.put(nsId, isas);
+      }
+    }
+    return ret;
+  }
-    final boolean federationEnabled = nameserviceIds != null
-        && !nameserviceIds.isEmpty();
-    final boolean haEnabled = namenodeIds != null
-        && !namenodeIds.isEmpty();
-    
-    // Configuration with no federation and ha, return default address
-    if (!federationEnabled && !haEnabled) {
-      String address = getConfValue(defaultAddress, null, conf, keys);
-      if (address == null) {
-        return null;
-      }
-      isas.add(NetUtils.createSocketAddr(address));
-      return isas;
-    }
-    
-    if (!federationEnabled) {
-      nameserviceIds = new ArrayList<String>();
-      nameserviceIds.add(null);
-    }
-    if (!haEnabled) {
-      namenodeIds = new ArrayList<String>();
-      namenodeIds.add(null);
-    }
-    
-    // Get configuration suffixed with nameserviceId and/or namenodeId
-    if (federationEnabled && haEnabled) {
-      for (String nameserviceId : nameserviceIds) {
-        for (String nnId : namenodeIds) {
-          String keySuffix = concatSuffixes(nameserviceId, nnId);
-          String address = getConfValue(null, keySuffix, conf, keys);
-          if (address != null) {
-            isas.add(NetUtils.createSocketAddr(address));
-          }
-        }
-      }
-    } else if (!federationEnabled && haEnabled) {
-      for (String nnId : namenodeIds) {
-        String address = getConfValue(null, nnId, conf, keys);
-        if (address != null) {
-          isas.add(NetUtils.createSocketAddr(address));
-        }
-      }
-    } else if (federationEnabled && !haEnabled) {
-      for (String nameserviceId : nameserviceIds) {
-          String address = getConfValue(null, nameserviceId, conf, keys);
-          if (address != null) {
-            isas.add(NetUtils.createSocketAddr(address));
-          }
+  private static Map<String, InetSocketAddress> getAddressesForNameserviceId(
+      Configuration conf, String nsId, String defaultValue,
+      String[] keys) {
+    Collection<String> nnIds = getNameNodeIds(conf, nsId);
+    Map<String, InetSocketAddress> ret = Maps.newHashMap();
+    for (String nnId : emptyAsSingletonNull(nnIds)) {
+      String suffix = concatSuffixes(nsId, nnId);
+      String address = getConfValue(defaultValue, suffix, conf, keys);
+      if (address != null) {
+        InetSocketAddress isa = NetUtils.createSocketAddr(address);
+        ret.put(nnId, isa);
-    return isas;
+    return ret;
-  public static List<InetSocketAddress> getHaNnRpcAddresses(
-      Configuration conf) throws IOException {
-    List<InetSocketAddress> addressList = getAddresses(conf, null,
-        DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY);
-    if (addressList == null) {
-      throw new IOException("Incorrect configuration: HA name node addresses "
-          + DFS_NAMENODE_RPC_ADDRESS_KEY + " is not configured.");
-    }
-    return addressList;
+  public static Map<String, Map<String, InetSocketAddress>> getHaNnRpcAddresses(
+      Configuration conf) {
+    return getAddresses(conf, null, DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY);
-  public static List<InetSocketAddress> getBackupNodeAddresses(
+  public static Map<String, Map<String, InetSocketAddress>> getBackupNodeAddresses(
-    List<InetSocketAddress> addressList = getAddresses(conf,
+    Map<String, Map<String, InetSocketAddress>> addressList = getAddresses(conf,
-    if (addressList == null) {
+    if (addressList.isEmpty()) {
-  public static List<InetSocketAddress> getSecondaryNameNodeAddresses(
+  public static Map<String, Map<String, InetSocketAddress>> getSecondaryNameNodeAddresses(
-    List<InetSocketAddress> addressList = getAddresses(conf, null,
+    Map<String, Map<String, InetSocketAddress>> addressList = getAddresses(conf, null,
-    if (addressList == null) {
+    if (addressList.isEmpty()) {
-  public static List<InetSocketAddress> getNNServiceRpcAddresses(
+  public static Map<String, Map<String, InetSocketAddress>> getNNServiceRpcAddresses(
-    List<InetSocketAddress> addressList = getAddresses(conf, defaultAddress,
+    Map<String, Map<String, InetSocketAddress>> addressList =
+      getAddresses(conf, defaultAddress,
-    if (addressList == null) {
+    if (addressList.isEmpty()) {
+   * Flatten the given map, as returned by other functions in this class,
+   * into a flat list of {@link ConfiguredNNAddress} instances.
+   */
+  public static List<ConfiguredNNAddress> flattenAddressMap(
+      Map<String, Map<String, InetSocketAddress>> map) {
+    List<ConfiguredNNAddress> ret = Lists.newArrayList();
+    
+    for (Map.Entry<String, Map<String, InetSocketAddress>> entry :
+      map.entrySet()) {
+      String nsId = entry.getKey();
+      Map<String, InetSocketAddress> nnMap = entry.getValue();
+      for (Map.Entry<String, InetSocketAddress> e2 : nnMap.entrySet()) {
+        String nnId = e2.getKey();
+        InetSocketAddress addr = e2.getValue();
+        
+        ret.add(new ConfiguredNNAddress(nsId, nnId, addr));
+      }
+    }
+    return ret;
+  }
+
+  /**
+   * Format the given map, as returned by other functions in this class,
+   * into a string suitable for debugging display. The format of this string
+   * should not be considered an interface, and is liable to change.
+   */
+  public static String addressMapToString(
+      Map<String, Map<String, InetSocketAddress>> map) {
+    StringBuilder b = new StringBuilder();
+    for (Map.Entry<String, Map<String, InetSocketAddress>> entry :
+         map.entrySet()) {
+      String nsId = entry.getKey();
+      Map<String, InetSocketAddress> nnMap = entry.getValue();
+      b.append("Nameservice <").append(nsId).append(">:").append("\n");
+      for (Map.Entry<String, InetSocketAddress> e2 : nnMap.entrySet()) {
+        b.append("  NN ID ").append(e2.getKey())
+          .append(" => ").append(e2.getValue()).append("\n");
+      }
+    }
+    return b.toString();
+  }
+
+  /**
+   * Represent one of the NameNodes configured in the cluster.
+   */
+  public static class ConfiguredNNAddress {
+    private final String nameserviceId;
+    private final String namenodeId;
+    private final InetSocketAddress addr;
+
+    private ConfiguredNNAddress(String nameserviceId, String namenodeId,
+        InetSocketAddress addr) {
+      this.nameserviceId = nameserviceId;
+      this.namenodeId = namenodeId;
+      this.addr = addr;
+    }
+
+    public String getNameserviceId() {
+      return nameserviceId;
+    }
+
+    public String getNamenodeId() {
+      return namenodeId;
+    }
+
+    public InetSocketAddress getAddress() {
+      return addr;
+    }
+  }
+
+  /**
-    if (!isFederationEnabled(conf)) {
-      return null;
-    }    
-    return (ids != null && ids.length > 0) ? ids[0] : null;
+    return (ids != null) ? ids[0] : null;
-
-  /**
-   * Returns true if federation configuration is enabled
-   */
-  public static boolean isFederationEnabled(Configuration conf) {
-    Collection<String> collection = getNameServiceIds(conf);
-    return collection != null && collection.size() != 0;
-  }
-    if (!isFederationEnabled(conf)) {
-      return null;
-    }
-    nameserviceId = getSuffixIDs(conf, addressKey, LOCAL_ADDRESS_MATCHER)[0];
-    if (nameserviceId == null) {
-      String msg = "Configuration " + addressKey + " must be suffixed with" +
-      		" nameserviceId for federation configuration.";
-      throw new HadoopIllegalArgumentException(msg);
-    }
-    return nameserviceId;
+    String nnId = conf.get(DFS_HA_NAMENODE_ID_KEY);
+    
+    return getSuffixIDs(conf, addressKey, null, nnId, LOCAL_ADDRESS_MATCHER)[0];
+   * @param knownNsId only look at configs for the given nameservice, if not-null
+   * @param knownNNId only look at configs for the given namenode, if not null
+      String knownNsId, String knownNNId,
-    Collection<String> nsIds = getNameServiceIds(conf);
-    boolean federationEnabled = true;
-    if (nsIds == null || nsIds.size() == 0) {
-      federationEnabled = false; // federation not configured
-      nsIds = new ArrayList<String>();
-      nsIds.add(null);
-    }
-    
-    boolean haEnabled = true;
-    Collection<String> nnIds = getNameNodeIds(conf);
-    if (nnIds == null || nnIds.size() == 0) {
-      haEnabled = false; // HA not configured
-      nnIds = new ArrayList<String>();
-      nnIds.add(null);
-    }
-    
-    // Match the address from addressKey.nsId.nnId based on the given matcher
-    for (String nsId : nsIds) {
-      for (String nnId : nnIds) {
+    
+    Collection<String> nsIds = getNameServiceIds(conf);
+    for (String nsId : emptyAsSingletonNull(nsIds)) {
+      if (knownNsId != null && !knownNsId.equals(nsId)) {
+        continue;
+      }
+      
+      Collection<String> nnIds = getNameNodeIds(conf, nsId);
+      for (String nnId : emptyAsSingletonNull(nnIds)) {
+        if (knownNNId != null && !knownNNId.equals(nnId)) {
+          continue;
+        }
-          + (federationEnabled ? DFS_FEDERATION_NAMESERVICE_ID : "")
-          + (haEnabled ? (" and " + DFS_HA_NAMENODE_ID_KEY) : "");
+          + DFS_FEDERATION_NAMESERVICE_ID + " and "
+          + DFS_HA_NAMENODE_ID_KEY;
-      String[] ids = getSuffixIDs(conf, key, matcher);
+      String[] ids = getSuffixIDs(conf, key, null, null, matcher);

MOV26 MOV26 INS26 INS26 INS26 MOV31 INS40 UPD40 UPD40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS29 MOV83 MOV83 INS74 INS42 INS44 INS8 INS44 MOV29 INS83 INS83 MOV43 INS42 MOV44 INS8 MOV29 MOV83 MOV83 INS74 MOV42 MOV44 MOV44 MOV44 INS8 INS83 INS83 INS74 INS42 MOV44 INS44 INS44 INS44 INS8 MOV29 INS83 INS83 INS74 INS42 MOV44 INS8 INS74 INS74 INS74 INS29 INS83 INS83 UPD74 MOV74 INS42 INS44 INS8 INS29 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS44 INS44 MOV60 INS65 INS43 INS43 MOV74 INS42 INS25 INS65 INS43 INS42 INS60 INS6 MOV25 MOV41 INS43 INS43 INS74 MOV60 INS60 INS70 MOV41 INS43 MOV43 INS43 INS43 INS42 MOV43 INS42 INS5 INS42 MOV60 INS60 MOV70 INS41 INS43 INS43 INS74 INS41 INS43 INS43 INS74 INS43 INS43 INS74 INS43 INS43 INS74 INS65 INS43 INS74 INS42 INS60 INS70 MOV41 INS65 INS42 INS74 INS42 INS60 INS70 MOV41 MOV65 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 MOV43 INS59 INS83 INS42 MOV44 INS44 INS44 MOV8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS8 INS60 INS41 INS65 INS65 INS43 INS42 INS43 INS42 UPD66 INS66 INS66 INS42 MOV42 INS27 INS8 INS8 INS42 INS66 INS42 MOV43 INS59 MOV38 INS27 INS27 UPD66 UPD66 UPD66 INS42 INS42 UPD43 MOV43 INS43 MOV43 INS74 MOV59 INS44 INS32 INS8 UPD42 INS42 INS42 UPD42 MOV42 INS43 INS85 INS74 INS59 MOV44 INS32 MOV8 INS42 INS42 MOV42 INS43 INS43 INS43 MOV32 INS42 INS42 UPD43 MOV43 INS43 MOV43 INS74 INS32 INS42 INS42 UPD43 MOV43 INS43 MOV43 INS74 INS32 INS42 INS42 INS43 INS43 MOV43 INS74 INS32 INS66 INS66 INS65 INS66 INS42 INS43 INS43 INS74 UPD74 MOV74 INS59 INS44 INS32 INS8 UPD42 INS66 INS66 INS66 INS43 INS43 INS74 INS43 INS59 INS44 INS32 INS8 INS32 UPD66 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS21 MOV41 INS41 INS41 MOV43 INS59 INS2 INS42 INS66 INS42 INS66 INS42 INS42 INS32 UPD42 INS27 INS32 INS41 INS41 INS42 INS42 INS32 UPD42 UPD42 MOV32 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS42 INS42 UPD42 INS42 UPD43 MOV43 INS43 INS74 UPD42 INS32 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS60 INS25 INS42 UPD42 UPD43 MOV43 MOV43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS43 INS43 INS74 INS42 INS42 UPD42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 INS60 MOV70 INS42 INS42 UPD43 MOV43 INS43 INS43 INS42 INS42 INS14 INS74 INS42 INS42 INS42 INS60 MOV60 INS21 INS70 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS42 INS42 INS42 INS32 MOV32 MOV34 INS42 INS42 INS25 MOV60 UPD42 MOV42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 UPD42 INS42 UPD43 MOV43 INS43 MOV43 UPD42 MOV42 UPD42 MOV42 INS42 INS74 MOV59 INS38 INS8 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 MOV43 MOV43 MOV27 INS8 INS42 INS42 UPD43 MOV43 INS43 MOV43 INS42 INS42 UPD43 MOV43 INS43 MOV43 INS42 INS42 INS43 INS43 MOV43 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS74 MOV43 INS59 INS74 INS59 INS44 INS32 UPD42 INS42 INS42 INS43 INS43 INS43 INS74 INS43 INS59 UPD74 INS32 INS44 INS32 INS8 INS22 INS42 INS22 INS42 INS22 INS42 MOV27 MOV42 INS42 INS42 INS33 INS42 INS27 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS33 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 INS42 INS43 INS43 MOV43 UPD42 INS32 MOV21 UPD42 INS60 MOV21 UPD42 INS42 UPD42 INS42 INS42 INS42 INS40 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS74 INS42 INS42 INS42 INS60 MOV21 INS42 INS40 INS42 INS43 INS43 INS43 UPD42 MOV42 INS42 INS32 UPD43 INS43 INS43 UPD42 INS32 INS32 INS42 INS45 INS74 INS42 INS42 INS42 INS21 INS52 INS42 INS52 INS42 INS52 INS42 INS27 INS38 INS18 INS42 INS42 INS25 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 MOV43 INS43 INS59 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS43 INS43 INS43 INS32 INS42 INS33 INS32 INS42 INS27 INS8 INS42 MOV45 MOV42 INS33 INS33 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS42 UPD42 INS42 INS42 INS32 UPD42 INS14 INS32 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS27 INS38 INS18 UPD42 UPD42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS32 INS42 INS33 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 DEL83 DEL34 DEL27 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL42 DEL45 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL40 DEL34 DEL27 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL8 DEL24 DEL8 DEL31 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL42 DEL33 DEL42 DEL32 DEL33 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL70 DEL8 DEL74 DEL74 DEL42 DEL74 DEL14 DEL59 DEL60 DEL83 DEL39 DEL60 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL32 DEL38 DEL27 DEL59 DEL60 DEL42 DEL38 DEL42 DEL38 DEL27 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL38 DEL42 DEL74 DEL14 DEL7 DEL21 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL27 DEL8 DEL42 DEL38 DEL42 DEL27 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL33 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL42 DEL42 DEL38 DEL27 DEL8 DEL25 DEL25 DEL25 DEL8 DEL31 DEL74 DEL74 DEL42 DEL33 DEL27 DEL74 DEL74 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL33 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL74 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL41 DEL42 DEL42 DEL32 DEL38 DEL33 DEL41 DEL8 DEL25 DEL40 DEL34 DEL27 DEL27 DEL29 DEL83 DEL83 DEL39 DEL42 DEL31 DEL42 DEL32 DEL38 DEL33 DEL41 DEL8 DEL25 DEL42 DEL2 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL42 DEL42 DEL33 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL45 DEL16 DEL36 DEL42 DEL27 DEL36 DEL45 DEL16 DEL36