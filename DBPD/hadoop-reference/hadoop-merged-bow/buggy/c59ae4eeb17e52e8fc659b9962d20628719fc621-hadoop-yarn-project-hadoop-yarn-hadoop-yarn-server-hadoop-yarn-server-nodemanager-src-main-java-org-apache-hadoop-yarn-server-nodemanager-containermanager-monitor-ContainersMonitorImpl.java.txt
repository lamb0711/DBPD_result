YARN-1643. Make ContainersMonitor support changing monitoring size of an allocated container. Contributed by Meng Ding and Wangda Tan

-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.yarn.api.records.Resource;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.container.Container;
-  final List<ContainerId> containersToBeRemoved;
-  final Map<ContainerId, ProcessTreeInfo> containersToBeAdded;
-  Map<ContainerId, ProcessTreeInfo> trackingContainers =
-      new HashMap<ContainerId, ProcessTreeInfo>();
+  @VisibleForTesting
+  final Map<ContainerId, ProcessTreeInfo> trackingContainers =
+      new ConcurrentHashMap<>();
-  final ContainerExecutor containerExecutor;
+  private final ContainerExecutor containerExecutor;
+  private static float vmemRatio;
+  private volatile boolean stopped = false;
+
-    this.containersToBeAdded = new HashMap<ContainerId, ProcessTreeInfo>();
-    this.containersToBeRemoved = new ArrayList<ContainerId>();
-    float vmemRatio = conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,
+    vmemRatio = conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,
+      stopped = true;
-  private static class ProcessTreeInfo {
+  @VisibleForTesting
+  static class ProcessTreeInfo {
-    public long getVmemLimit() {
+    /**
+     * @return Virtual memory limit for the process tree in bytes
+     */
+    public synchronized long getVmemLimit() {
-    public long getPmemLimit() {
+    public synchronized long getPmemLimit() {
-     * Return the number of cpu vcores assigned
-     * @return
+     * @return Number of cpu vcores assigned
-    public int getCpuVcores() {
+    public synchronized int getCpuVcores() {
-  }
+    /**
+     * Set resource limit for enforcement
+     * @param pmemLimit
+     *          Physical memory limit for the process tree in bytes
+     * @param vmemLimit
+     *          Virtual memory limit for the process tree in bytes
+     * @param cpuVcores
+     *          Number of cpu vcores assigned
+     */
+    public synchronized void setResourceLimit(
+        long pmemLimit, long vmemLimit, int cpuVcores) {
+      this.pmemLimit = pmemLimit;
+      this.vmemLimit = vmemLimit;
+      this.cpuVcores = cpuVcores;
+    }
+  }
-      while (true) {
-
+      while (!stopped && !Thread.currentThread().isInterrupted()) {
-        // Add new containers
-        synchronized (containersToBeAdded) {
-          for (Entry<ContainerId, ProcessTreeInfo> entry : containersToBeAdded
-              .entrySet()) {
-            ContainerId containerId = entry.getKey();
-            ProcessTreeInfo processTreeInfo = entry.getValue();
-            LOG.info("Starting resource-monitoring for " + containerId);
-            trackingContainers.put(containerId, processTreeInfo);
-          }
-          containersToBeAdded.clear();
-        }
-
-        // Remove finished containers
-        synchronized (containersToBeRemoved) {
-          for (ContainerId containerId : containersToBeRemoved) {
-            if (containerMetricsEnabled) {
-              ContainerMetrics.forContainer(
-                  containerId, containerMetricsPeriodMs).finished();
-            }
-            trackingContainers.remove(containerId);
-            LOG.info("Stopping resource-monitoring for " + containerId);
-          }
-          containersToBeRemoved.clear();
-        }
-
-        for (Iterator<Map.Entry<ContainerId, ProcessTreeInfo>> it =
-            trackingContainers.entrySet().iterator(); it.hasNext();) {
-
-          Map.Entry<ContainerId, ProcessTreeInfo> entry = it.next();
+        for (Entry<ContainerId, ProcessTreeInfo> entry : trackingContainers
+            .entrySet()) {
-                  int cpuVcores = ptInfo.getCpuVcores();
-                  final int vmemLimit = (int) (ptInfo.getVmemLimit() >> 20);
-                  final int pmemLimit = (int) (ptInfo.getPmemLimit() >> 20);
-                  usageMetrics.recordResourceLimit(
-                      vmemLimit, pmemLimit, cpuVcores);
-              it.remove();
+              trackingContainers.remove(containerId);
+  private void changeContainerResource(
+      ContainerId containerId, Resource resource) {
+    Container container = context.getContainers().get(containerId);
+    // Check container existence
+    if (container == null) {
+      LOG.warn("Container " + containerId.toString() + "does not exist");
+      return;
+    }
+    container.setResource(resource);
+  }
+
+  private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {
+    if (!containerMetricsEnabled || monitoringEvent == null) {
+      return;
+    }
+
+    ContainerId containerId = monitoringEvent.getContainerId();
+    ContainerMetrics usageMetrics = ContainerMetrics
+        .forContainer(containerId, containerMetricsPeriodMs);
+
+    int vmemLimitMBs;
+    int pmemLimitMBs;
+    int cpuVcores;
+    switch (monitoringEvent.getType()) {
+    case START_MONITORING_CONTAINER:
+      ContainerStartMonitoringEvent startEvent =
+          (ContainerStartMonitoringEvent) monitoringEvent;
+      usageMetrics.recordStateChangeDurations(
+          startEvent.getLaunchDuration(),
+          startEvent.getLocalizationDuration());
+      cpuVcores = startEvent.getCpuVcores();
+      vmemLimitMBs = (int) (startEvent.getVmemLimit() >> 20);
+      pmemLimitMBs = (int) (startEvent.getPmemLimit() >> 20);
+      usageMetrics.recordResourceLimit(
+          vmemLimitMBs, pmemLimitMBs, cpuVcores);
+      break;
+    case STOP_MONITORING_CONTAINER:
+      usageMetrics.finished();
+      break;
+    case CHANGE_MONITORING_CONTAINER_RESOURCE:
+      ChangeMonitoringContainerResourceEvent changeEvent =
+          (ChangeMonitoringContainerResourceEvent) monitoringEvent;
+      Resource resource = changeEvent.getResource();
+      pmemLimitMBs = resource.getMemory();
+      vmemLimitMBs = (int) (pmemLimitMBs * vmemRatio);
+      cpuVcores = resource.getVirtualCores();
+      usageMetrics.recordResourceLimit(
+          vmemLimitMBs, pmemLimitMBs, cpuVcores);
+      break;
+    default:
+      break;
+    }
+  }
+
+  @SuppressWarnings("unchecked")
-
+    ContainerId containerId = monitoringEvent.getContainerId();
+      if (monitoringEvent.getType() == ContainersMonitorEventType
+          .CHANGE_MONITORING_CONTAINER_RESOURCE) {
+        // Nothing to enforce. Update container resource immediately.
+        ChangeMonitoringContainerResourceEvent changeEvent =
+            (ChangeMonitoringContainerResourceEvent) monitoringEvent;
+        changeContainerResource(containerId, changeEvent.getResource());
+      }
-    ContainerId containerId = monitoringEvent.getContainerId();
-
-      if (containerMetricsEnabled) {
-        ContainerMetrics usageMetrics = ContainerMetrics
-            .forContainer(containerId, containerMetricsPeriodMs);
-        usageMetrics.recordStateChangeDurations(
-            startEvent.getLaunchDuration(),
-            startEvent.getLocalizationDuration());
-      }
-
-      synchronized (this.containersToBeAdded) {
-        ProcessTreeInfo processTreeInfo =
-            new ProcessTreeInfo(containerId, null, null,
-                startEvent.getVmemLimit(), startEvent.getPmemLimit(),
-                startEvent.getCpuVcores());
-        this.containersToBeAdded.put(containerId, processTreeInfo);
-      }
+      LOG.info("Starting resource-monitoring for " + containerId);
+      updateContainerMetrics(monitoringEvent);
+      trackingContainers.put(containerId,
+          new ProcessTreeInfo(containerId, null, null,
+              startEvent.getVmemLimit(), startEvent.getPmemLimit(),
+              startEvent.getCpuVcores()));
-      synchronized (this.containersToBeRemoved) {
-        this.containersToBeRemoved.add(containerId);
+      LOG.info("Stopping resource-monitoring for " + containerId);
+      updateContainerMetrics(monitoringEvent);
+      trackingContainers.remove(containerId);
+      break;
+    case CHANGE_MONITORING_CONTAINER_RESOURCE:
+      ChangeMonitoringContainerResourceEvent changeEvent =
+          (ChangeMonitoringContainerResourceEvent) monitoringEvent;
+      ProcessTreeInfo processTreeInfo = trackingContainers.get(containerId);
+      if (processTreeInfo == null) {
+        LOG.warn("Failed to track container "
+            + containerId.toString()
+            + ". It may have already completed.");
+        break;
+      LOG.info("Changing resource-monitoring for " + containerId);
+      updateContainerMetrics(monitoringEvent);
+      long pmemLimit = changeEvent.getResource().getMemory() * 1024L * 1024L;
+      long vmemLimit = (long) (pmemLimit * vmemRatio);
+      int cpuVcores = changeEvent.getResource().getVirtualCores();
+      processTreeInfo.setResourceLimit(pmemLimit, vmemLimit, cpuVcores);
+      changeContainerResource(containerId, changeEvent.getResource());

MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS23 INS31 INS31 INS78 INS83 UPD83 MOV83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS78 INS31 INS83 INS39 INS42 MOV44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS79 INS42 UPD42 INS14 INS42 INS42 INS9 INS21 INS42 INS29 INS83 INS83 INS29 INS83 INS83 INS39 INS42 MOV8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS43 INS42 INS60 INS25 INS21 INS43 INS42 INS25 MOV60 MOV60 INS60 INS60 INS60 INS50 INS42 INS45 INS60 INS25 INS74 INS7 INS65 INS65 INS65 INS65 UPD65 UPD65 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 UPD42 MOV42 INS43 INS59 INS27 INS8 INS32 UPD42 MOV42 INS27 MOV8 INS39 INS59 INS39 INS59 INS39 INS59 INS32 INS49 INS60 MOV21 INS21 INS21 INS21 INS21 INS10 INS49 INS21 INS10 INS49 INS60 INS60 INS21 INS21 INS21 INS21 INS10 INS49 INS10 INS43 INS59 MOV38 INS8 MOV21 INS21 INS21 INS10 MOV21 INS21 MOV21 INS10 INS49 INS60 INS60 INS25 INS21 INS21 INS60 INS60 INS60 INS21 INS21 INS43 INS42 MOV32 INS21 INS66 INS66 INS66 INS42 INS66 INS42 UPD66 INS42 INS66 INS7 INS7 INS7 INS27 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 INS42 INS42 INS38 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS7 INS7 INS32 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS7 INS7 INS7 INS32 INS42 INS42 INS32 MOV25 INS41 INS32 INS32 INS32 INS42 INS43 INS59 MOV43 MOV59 INS27 INS8 INS32 INS32 INS39 INS59 INS39 INS59 INS39 INS59 INS32 MOV32 INS42 INS7 INS22 INS42 INS22 INS42 INS22 INS42 INS38 INS38 MOV70 INS32 INS42 INS42 INS32 INS42 INS42 INS33 UPD42 MOV42 INS42 INS11 INS42 INS32 INS42 INS11 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS11 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 INS42 INS42 INS42 INS11 INS32 INS42 INS33 MOV21 INS10 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS42 INS11 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS32 MOV32 MOV8 INS42 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS42 INS39 INS36 INS39 INS36 INS43 INS42 INS42 INS42 INS42 INS42 INS39 INS36 INS42 INS42 INS32 INS40 INS60 INS21 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS34 INS34 INS39 INS36 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS45 INS32 INS45 UPD42 MOV42 INS27 INS27 UPD42 MOV42 INS27 INS42 INS42 INS43 INS59 INS32 INS42 INS42 UPD42 INS27 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS42 UPD42 INS42 DEL43 DEL43 DEL74 DEL42 DEL59 DEL23 DEL43 DEL43 DEL43 DEL74 DEL42 DEL43 DEL43 DEL43 DEL74 DEL14 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL39 DEL42 DEL59 DEL60 DEL83 DEL39 DEL42 DEL9 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL39 DEL42 DEL39 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL11 DEL59 DEL60 DEL83 DEL39 DEL42 DEL39 DEL42 DEL42 DEL32 DEL34 DEL27 DEL36 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL8 DEL25 DEL52 DEL42 DEL22 DEL60 DEL8 DEL51 DEL10 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL21 DEL8 DEL51