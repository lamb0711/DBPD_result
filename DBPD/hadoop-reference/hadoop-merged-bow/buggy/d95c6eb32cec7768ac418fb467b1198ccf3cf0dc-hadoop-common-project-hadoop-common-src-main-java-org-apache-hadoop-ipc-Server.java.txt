HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.

+  /**
+   * Return the priority level assigned by call queue to an RPC
+   * Returns 0 in case no priority is assigned.
+   */
+  public static int getPriorityLevel() {
+    Call call = CurCall.get();
+    return call != null? call.getPriorityLevel() : 0;
+  }
+
+  void updateMetrics(String name, int queueTime, int processingTime) {
+    rpcMetrics.addRpcQueueTime(queueTime);
+    rpcMetrics.addRpcProcessingTime(processingTime);
+    rpcDetailedMetrics.addProcessingTime(name, processingTime);
+    callQueue.addResponseTime(name, getPriorityLevel(), queueTime,
+        processingTime);
+
+    if (isLogSlowRPC()) {
+      logSlowRpcCalls(name, processingTime);
+    }
+  }
+
+  private String getQueueClassPrefix() {
+    return CommonConfigurationKeys.IPC_NAMESPACE + "." + port;
+  }
+
-  private String getQueueClassPrefix() {
-    return CommonConfigurationKeys.IPC_CALLQUEUE_NAMESPACE + "." + port;
+  static Class<? extends RpcScheduler> getSchedulerClass(
+      String prefix, Configuration conf) {
+    String schedulerKeyname = prefix + "." + CommonConfigurationKeys
+        .IPC_SCHEDULER_IMPL_KEY;
+    Class<?> schedulerClass = conf.getClass(schedulerKeyname, null);
+    // Patch the configuration for legacy fcq configuration that does not have
+    // a separate scheduler setting
+    if (schedulerClass == null) {
+      String queueKeyName = prefix + "." + CommonConfigurationKeys
+          .IPC_CALLQUEUE_IMPL_KEY;
+      Class<?> queueClass = conf.getClass(queueKeyName, null);
+      if (queueClass != null) {
+        if (queueClass.getCanonicalName().equals(
+            FairCallQueue.class.getCanonicalName())) {
+          conf.setClass(schedulerKeyname, DecayRpcScheduler.class,
+              RpcScheduler.class);
+        }
+      }
+    }
+    schedulerClass = conf.getClass(schedulerKeyname,
+        DefaultRpcScheduler.class);
+
+    return CallQueueManager.convertSchedulerClass(schedulerClass);
-    callQueue.swapQueue(getQueueClass(prefix, conf), maxQueueSize, prefix, conf);
+    callQueue.swapQueue(getSchedulerClass(prefix, conf),
+        getQueueClass(prefix, conf), maxQueueSize, prefix, conf);
+    private int priorityLevel;
+    // the priority level assigned by scheduler, 0 by default
-    }    
+    }
+
+    @Override
+    public int getPriorityLevel() {
+      return this.priorityLevel;
+    }
+
+    public void setPriorityLevel(int priorityLevel) {
+      this.priorityLevel = priorityLevel;
+    }
+      // Save the priority level assignment by the scheduler
+      call.setPriorityLevel(callQueue.getPriorityLevel(call));
+
-      // If rpc queue is full, we will ask the client to back off.
-      boolean isCallQueued = callQueue.offer(call);
-      if (!isCallQueued) {
+      // If rpc scheduler indicates back off based on performance
+      // degradation such as response time or rpc queue is full,
+      // we will ask the client to back off.
+      if (callQueue.shouldBackOff(call) || !callQueue.offer(call)) {
+        getSchedulerClass(prefix, conf),

MOV31 INS31 INS31 INS31 INS29 INS83 INS83 INS39 INS42 INS8 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS8 INS23 INS31 INS31 INS65 INS60 INS41 INS43 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS25 INS43 INS76 INS43 INS42 INS43 INS42 INS60 INS60 INS25 INS21 INS41 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS66 INS66 INS43 INS59 INS16 INS42 INS32 INS32 INS32 INS32 INS32 INS8 INS42 INS43 INS42 INS42 INS43 INS59 INS74 INS59 INS27 INS8 INS7 INS32 INS42 INS42 INS41 INS39 INS42 INS21 INS21 INS42 INS42 INS32 INS27 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 UPD40 INS42 INS42 INS42 INS27 INS43 INS76 INS42 INS32 INS42 INS33 INS60 INS60 INS25 INS42 INS32 INS42 INS42 INS42 INS32 INS22 INS7 INS32 INS27 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS33 INS43 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS32 INS32 INS38 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS76 INS42 INS32 INS42 INS33 INS25 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS42 INS42 INS33 INS32 INS8 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS57 INS42 INS32 INS43 INS42 INS42 INS42 INS57 INS57 INS42 INS43 INS43 INS42 INS42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL38