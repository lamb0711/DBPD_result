HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68

-   * Ints representing the sub directory path from base dir to the directory
-   * containing this replica.
+   * Whether or not this replica's parent directory includes subdirs, in which
+   * case we can generate them based on the replica's block ID
-  private int[] subDirs;
+  private boolean hasSubdirs;
-    if (subDirs == null) {
-      return null;
-    }
-
-    StringBuilder sb = new StringBuilder();
-    for (int i : subDirs) {
-      sb.append(DataStorage.BLOCK_SUBDIR_PREFIX);
-      sb.append(i);
-      sb.append("/");
-    }
-    File ret = new File(baseDir, sb.toString());
-    return ret;
+    return hasSubdirs ? DatanodeUtil.idToBlockDir(baseDir,
+        getBlockId()) : baseDir;
-      subDirs = null;
-    ReplicaDirInfo replicaDirInfo = parseSubDirs(dir);
-    this.subDirs = replicaDirInfo.subDirs;
+    ReplicaDirInfo dirInfo = parseBaseDir(dir);
+    this.hasSubdirs = dirInfo.hasSubidrs;
-      if (!internedBaseDirs.containsKey(replicaDirInfo.baseDirPath)) {
+      if (!internedBaseDirs.containsKey(dirInfo.baseDirPath)) {
-        File baseDir = new File(replicaDirInfo.baseDirPath);
-        internedBaseDirs.put(replicaDirInfo.baseDirPath, baseDir);
+        File baseDir = new File(dirInfo.baseDirPath);
+        internedBaseDirs.put(dirInfo.baseDirPath, baseDir);
-      this.baseDir = internedBaseDirs.get(replicaDirInfo.baseDirPath);
+      this.baseDir = internedBaseDirs.get(dirInfo.baseDirPath);
-  
+
-    @VisibleForTesting
-    
-    @VisibleForTesting
-    public int[] subDirs;
+    public boolean hasSubidrs;
+
+    public ReplicaDirInfo (String baseDirPath, boolean hasSubidrs) {
+      this.baseDirPath = baseDirPath;
+      this.hasSubidrs = hasSubidrs;
+    }
-  public static ReplicaDirInfo parseSubDirs(File dir) {
-    ReplicaDirInfo ret = new ReplicaDirInfo();
+  public static ReplicaDirInfo parseBaseDir(File dir) {
-    List<Integer> subDirList = new ArrayList<Integer>();
+    boolean hasSubdirs = false;
-      // Prepend the integer into the list.
-      subDirList.add(0, Integer.parseInt(currentDir.getName().replaceFirst(
-          DataStorage.BLOCK_SUBDIR_PREFIX, "")));
+      hasSubdirs = true;
-    ret.subDirs = new int[subDirList.size()];
-    for (int i = 0; i < subDirList.size(); i++) {
-      ret.subDirs[i] = subDirList.get(i);
-    }
-    ret.baseDirPath = currentDir.getAbsolutePath();
-    
-    return ret;
+    return new ReplicaDirInfo(currentDir.getAbsolutePath(), hasSubdirs);

INS55 INS31 INS39 MOV78 MOV83 MOV83 MOV42 MOV23 MOV23 INS31 MOV78 INS83 INS83 MOV43 INS42 MOV44 INS8 UPD42 INS41 INS39 MOV83 INS42 INS44 INS44 INS8 MOV60 INS60 MOV61 MOV41 UPD66 UPD66 INS16 UPD42 INS43 INS42 INS39 INS42 MOV21 MOV21 INS39 INS59 INS14 INS42 INS32 INS42 UPD42 UPD40 UPD42 MOV42 INS42 INS9 MOV43 MOV32 INS42 INS42 INS42 INS42 INS32 UPD42 UPD42 INS22 INS42 INS22 INS42 INS7 UPD42 MOV42 INS52 INS42 INS52 INS42 INS42 INS9 UPD40 MOV43 UPD40 UPD40 MOV43 UPD40 DEL39 DEL85 DEL5 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL44 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL41 DEL42 DEL33 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL78 DEL39 DEL85 DEL5 DEL40 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL40 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL45 DEL32 DEL32 DEL32 DEL42 DEL42 DEL78 DEL55 DEL83 DEL42 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL8 DEL24 DEL40 DEL7 DEL21 DEL8 DEL31