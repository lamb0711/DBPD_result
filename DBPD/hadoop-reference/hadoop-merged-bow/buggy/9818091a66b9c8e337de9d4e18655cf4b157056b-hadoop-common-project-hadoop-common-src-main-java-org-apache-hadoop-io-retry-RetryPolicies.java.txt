HADOOP-7896. HA: if both NNs are in Standby mode, client needs to try failing back and forth several times with sleeps. Contributed by Aaron T. Myers


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1214076 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+
+  private static final Random RAND = new Random();
+  
-    return new FailoverOnNetworkExceptionRetry(fallbackPolicy, maxFailovers);
+    return failoverOnNetworkException(fallbackPolicy, maxFailovers, 0, 0);
+  }
+  
+  public static final RetryPolicy failoverOnNetworkException(
+      RetryPolicy fallbackPolicy, int maxFailovers, long delayMillis,
+      long maxDelayBase) {
+    return new FailoverOnNetworkExceptionRetry(fallbackPolicy, maxFailovers,
+        delayMillis, maxDelayBase);
-      try {
-        timeUnit.sleep(calculateSleepTime(retries));
-      } catch (InterruptedException ie) {
-        // retry
-      }
-      return RetryAction.RETRY;
+      return new RetryAction(RetryAction.RetryDecision.RETRY,
+          timeUnit.toMillis(calculateSleepTime(retries)));
-    private Random r = new Random();
+    
-      return sleepTime*r.nextInt(1<<(retries+1));
+      return calculateExponentialTime(sleepTime, retries + 1);
-  /*
+  /**
+   * The first failover is immediate, while all subsequent failovers wait an
+   * exponentially-increasing random amount of time.
+   * 
+    private long delayMillis;
+    private long maxDelayBase;
+      this(fallbackPolicy, maxFailovers, 0, 0);
+    }
+    
+    public FailoverOnNetworkExceptionRetry(RetryPolicy fallbackPolicy,
+        int maxFailovers, long delayMillis, long maxDelayBase) {
+      this.delayMillis = delayMillis;
+      this.maxDelayBase = maxDelayBase;
-          e instanceof StandbyException) {
-        return RetryAction.FAILOVER_AND_RETRY;
+          e instanceof StandbyException ||
+          isWrappedStandbyException(e)) {
+        return new RetryAction(
+            RetryAction.RetryDecision.FAILOVER_AND_RETRY,
+            // retry immediately if this is our first failover, sleep otherwise
+            failovers == 0 ? 0 :
+                calculateExponentialTime(delayMillis, failovers, maxDelayBase));
+
+  /**
+   * Return a value which is <code>time</code> increasing exponentially as a
+   * function of <code>retries</code>, +/- 0%-50% of that value, chosen
+   * randomly.
+   * 
+   * @param time the base amount of time to work with
+   * @param retries the number of retries that have so occurred so far
+   * @param cap value at which to cap the base sleep time
+   * @return an amount of time to sleep
+   */
+  @VisibleForTesting
+  public static long calculateExponentialTime(long time, int retries,
+      long cap) {
+    long baseTime = Math.min(time * ((long)1 << retries), cap);
+    return (long) (baseTime * (RAND.nextFloat() + 0.5));
+  }
+
+  private static long calculateExponentialTime(long time, int retries) {
+    return calculateExponentialTime(time, retries, Long.MAX_VALUE);
+  }
+  
+  private static boolean isWrappedStandbyException(Exception e) {
+    if (!(e instanceof RemoteException)) {
+      return false;
+    }
+    Exception unwrapped = ((RemoteException)e).unwrapRemoteException(
+        StandbyException.class);
+    return unwrapped instanceof StandbyException;
+  }

INS26 INS40 MOV23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS44 INS44 INS29 INS23 INS23 INS31 INS29 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 UPD42 INS42 INS43 INS42 INS39 INS42 INS41 INS39 INS42 INS39 INS42 MOV8 INS65 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS44 INS44 INS65 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS60 INS41 INS39 INS42 INS39 INS42 INS41 INS43 INS42 INS25 INS60 INS41 INS42 INS32 MOV25 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS42 INS39 INS42 INS17 INS39 INS42 INS39 INS42 INS21 INS21 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS39 INS59 INS11 INS32 INS42 INS38 INS8 INS43 INS59 INS62 INS42 INS42 INS42 INS34 INS34 INS42 INS42 INS14 MOV32 INS42 INS42 INS42 INS34 INS34 INS7 INS7 INS42 INS32 INS39 INS36 INS42 INS42 INS42 INS40 INS36 INS41 INS42 INS42 INS32 INS42 INS43 INS43 INS40 MOV32 UPD42 UPD42 MOV27 INS22 INS42 INS22 INS42 INS32 INS42 INS42 INS27 INS42 INS27 INS62 INS9 INS36 INS42 INS57 INS42 INS42 UPD42 INS52 INS42 INS52 INS42 INS42 INS42 INS14 INS42 INS36 INS42 INS36 INS42 INS43 INS11 INS43 INS43 INS40 INS16 INS27 INS27 INS42 INS43 INS42 INS42 INS42 INS27 INS34 INS32 INS11 INS42 INS32 INS34 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS39 INS34 INS42 INS42 DEL21 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL40 DEL41 DEL8 DEL34 DEL36 DEL27 DEL42 DEL27 DEL40