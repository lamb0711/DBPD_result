HDFS-7158. Reduce the memory usage of WebImageViewer. Contributed by Haohui Mai.

+import org.apache.hadoop.hdfs.web.JsonUtil;
+import org.apache.hadoop.ipc.RemoteException;
+import org.jboss.netty.channel.ChannelFuture;
+import javax.management.Query;
+
-public class FSImageHandler extends SimpleChannelUpstreamHandler {
+class FSImageHandler extends SimpleChannelUpstreamHandler {
-  private final FSImageLoader loader;
+  private final FSImageLoader image;
-  public FSImageHandler(FSImageLoader loader) throws IOException {
-    this.loader = loader;
+  FSImageHandler(FSImageLoader image) throws IOException {
+    this.image = image;
-    String op = getOp(e);
+    ChannelFuture future = e.getFuture();
-      String path = getPath(e);
-      handleOperation(op, path, e);
-    } catch (Exception ex) {
-      notFoundResponse(e);
-      LOG.warn(ex.getMessage());
+      future = handleOperation(e);
-      e.getFuture().addListener(ChannelFutureListener.CLOSE);
+      future.addListener(ChannelFutureListener.CLOSE);
-  /** return the op parameter in upper case */
-  private String getOp(MessageEvent e) {
-    Map<String, List<String>> parameters = getDecoder(e).getParameters();
-    if (parameters.containsKey("op")) {
-      return parameters.get("op").get(0).toUpperCase();
-    } else {
-      // return "" to avoid NPE
-      return "";
-    }
-  }
-
-  private String getPath(MessageEvent e) throws FileNotFoundException {
-    String path = getDecoder(e).getPath();
-    // trim "/webhdfs/v1" to keep compatibility with WebHDFS API
-    if (path.startsWith("/webhdfs/v1/")) {
-      return path.replaceFirst("/webhdfs/v1", "");
-    } else {
-      throw new FileNotFoundException("Path: " + path + " should " +
-          "start with \"/webhdfs/v1/\"");
-    }
-  }
-
-  private QueryStringDecoder getDecoder(MessageEvent e) {
-    HttpRequest request = (HttpRequest) e.getMessage();
-    return new QueryStringDecoder(request.getUri());
-  }
-
-  private void handleOperation(String op, String path, MessageEvent e)
+  private ChannelFuture handleOperation(MessageEvent e)
-        HttpVersion.HTTP_1_1, HttpResponseStatus.OK);
-    response.setHeader(HttpHeaders.Names.CONTENT_TYPE,
-        "application/json");
-    String content = null;
+            HttpVersion.HTTP_1_1, HttpResponseStatus.OK);
+    response.setHeader(HttpHeaders.Names.CONTENT_TYPE, "application/json");
-    if (request.getMethod() == HttpMethod.GET){
-      if (op.equals("GETFILESTATUS")) {
-        content = loader.getFileStatus(path);
-      } else if (op.equals("LISTSTATUS")) {
-        content = loader.listStatus(path);
-      } else if (op.equals("GETACLSTATUS")) {
-        content = loader.getAclStatus(path);
-      } else {
-        response.setStatus(HttpResponseStatus.BAD_REQUEST);
-      }
-    } else {
-      // only HTTP GET is allowed since fsimage is read-only.
+    if (request.getMethod() != HttpMethod.GET) {
+      return e.getChannel().write(response);
-    if (content != null) {
-      HttpHeaders.setContentLength(response, content.length());
+    QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());
+    final String op = getOp(decoder);
+
+    String content;
+    String path = null;
+    try {
+      path = getPath(decoder);
+      if ("GETFILESTATUS".equals(op)) {
+        content = image.getFileStatus(path);
+      } else if ("LISTSTATUS".equals(op)) {
+        content = image.listStatus(path);
+      } else if ("GETACLSTATUS".equals(op)) {
+        content = image.getAclStatus(path);
+      } else {
+        throw new IllegalArgumentException("Invalid value for webhdfs parameter" + " \"op\"");
+      }
+    } catch (IllegalArgumentException ex) {
+      response.setStatus(HttpResponseStatus.BAD_REQUEST);
+      content = JsonUtil.toJsonString(ex);
+    } catch (FileNotFoundException ex) {
+      response.setStatus(HttpResponseStatus.NOT_FOUND);
+      content = JsonUtil.toJsonString(ex);
+    } catch (Exception ex) {
+      content = JsonUtil.toJsonString(ex);
+
+    HttpHeaders.setContentLength(response, content.length());
-
-    if (content != null) {
-      e.getChannel().write(content);
-    }
+    ChannelFuture future = e.getChannel().write(content);
+
+    return future;
-  private void notFoundResponse(MessageEvent e) {
-    HttpResponse response = new DefaultHttpResponse(
-        HttpVersion.HTTP_1_1, HttpResponseStatus.NOT_FOUND);
-    e.getChannel().write(response);
+  private static String getOp(QueryStringDecoder decoder) {
+    Map<String, List<String>> parameters = decoder.getParameters();
+    return parameters.containsKey("op")
+            ? parameters.get("op").get(0).toUpperCase() : null;
+  }
+
+  private static String getPath(QueryStringDecoder decoder)
+          throws FileNotFoundException {
+    String path = decoder.getPath();
+    if (path.startsWith("/webhdfs/v1/")) {
+      return path.substring(11);
+    } else {
+      throw new FileNotFoundException("Path: " + path + " should " +
+              "start with \"/webhdfs/v1/\"");
+    }

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS43 INS8 INS83 MOV8 INS83 UPD42 UPD42 INS42 MOV60 MOV60 MOV21 INS25 INS60 INS60 INS60 INS60 INS54 MOV21 MOV21 INS60 MOV21 INS41 UPD43 UPD42 MOV60 UPD43 UPD42 UPD43 UPD27 MOV27 MOV8 MOV43 INS59 INS83 MOV43 INS59 MOV43 INS59 MOV43 INS59 INS8 INS12 INS12 INS12 INS43 INS59 INS42 UPD42 INS16 UPD42 MOV43 UPD42 UPD42 INS42 MOV32 INS21 INS41 INS42 MOV14 INS42 INS32 MOV42 INS42 MOV33 INS21 INS25 INS44 MOV8 INS44 INS8 MOV44 INS8 INS42 INS42 MOV32 MOV32 MOV32 INS33 UPD42 INS7 INS32 INS42 INS42 INS7 INS32 MOV8 MOV25 INS43 INS42 INS21 INS43 INS42 INS21 INS21 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 MOV45 INS42 INS42 INS42 INS7 INS42 INS32 INS7 INS7 UPD42 INS34 MOV42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS45 INS42 INS8 INS42 INS32 INS42 INS42 INS40 INS42 INS32 INS42 INS32 INS45 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS14 UPD42 INS43 INS27 UPD42 INS42 INS45 INS45 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL45 DEL42 DEL45 DEL59 DEL60 DEL42 DEL32 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL66 DEL65 DEL29 DEL42 DEL32 DEL45 DEL41 DEL8 DEL25 DEL8 DEL42 DEL32 DEL45 DEL45 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31