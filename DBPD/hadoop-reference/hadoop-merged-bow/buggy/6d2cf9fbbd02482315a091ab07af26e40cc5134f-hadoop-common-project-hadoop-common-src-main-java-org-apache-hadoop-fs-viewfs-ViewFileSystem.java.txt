HADOOP-11812. Implement listLocatedStatus for ViewFileSystem to speed up split calculation (gera)

+import org.apache.hadoop.fs.LocatedFileStatus;
+import org.apache.hadoop.fs.PathFilter;
+import org.apache.hadoop.fs.RemoteIterator;
-    String s = makeAbsolute(p).toUri().getPath();
-    return s;
+    return makeAbsolute(p).toUri().getPath();
-         flags, bufferSize, replication, blockSize, progress);
+        flags, bufferSize, replication, blockSize, progress);
-         overwrite, bufferSize, replication, blockSize, progress);
+        overwrite, bufferSize, replication, blockSize, progress);
-          new ViewFsFileStatus(fs, res.remainingPath), start, len);
+        new ViewFsFileStatus(fs, res.remainingPath), start, len);
+
+  private static FileStatus fixFileStatus(FileStatus orig,
+      Path qualified) throws IOException {
+    // FileStatus#getPath is a fully qualified path relative to the root of
+    // target file system.
+    // We need to change it to viewfs URI - relative to root of mount table.
+
+    // The implementors of RawLocalFileSystem were trying to be very smart.
+    // They implement FileStatus#getOwner lazily -- the object
+    // returned is really a RawLocalFileSystem that expect the
+    // FileStatus#getPath to be unchanged so that it can get owner when needed.
+    // Hence we need to interpose a new ViewFileSystemFileStatus that
+    // works around.
+    if ("file".equals(orig.getPath().toUri().getScheme())) {
+      orig = wrapLocalFileStatus(orig, qualified);
+    }
+
+    orig.setPath(qualified);
+    return orig;
+  }
+
+  private static FileStatus wrapLocalFileStatus(FileStatus orig,
+      Path qualified) {
+    return orig instanceof LocatedFileStatus
+        ? new ViewFsLocatedFileStatus((LocatedFileStatus)orig, qualified)
+        : new ViewFsFileStatus(orig, qualified);
+  }
+
+
-    InodeTree.ResolveResult<FileSystem> res = 
+    InodeTree.ResolveResult<FileSystem> res =
-    
-    // FileStatus#getPath is a fully qualified path relative to the root of 
-    // target file system.
-    // We need to change it to viewfs URI - relative to root of mount table.
-    
-    // The implementors of RawLocalFileSystem were trying to be very smart.
-    // They implement FileStatus#getOwener lazily -- the object
-    // returned is really a RawLocalFileSystem that expect the
-    // FileStatus#getPath to be unchanged so that it can get owner when needed.
-    // Hence we need to interpose a new ViewFileSystemFileStatus that 
-    // works around.
-    return new ViewFsFileStatus(status, this.makeQualified(f));
+    return fixFileStatus(status, this.makeQualified(f));
-      ChRootedFileSystem targetFs;
-      targetFs = (ChRootedFileSystem) res.targetFileSystem;
-          String suffix = targetFs.stripOutRoot(status.getPath());
-          statusLst[i++] = new ViewFsFileStatus(status, this.makeQualified(
-              suffix.length() == 0 ? f : new Path(res.resolvedPath, suffix)));
+          statusLst[i++] = fixFileStatus(status,
+              getChrootedPath(res, status, f));
+  public RemoteIterator<LocatedFileStatus>listLocatedStatus(final Path f,
+      final PathFilter filter) throws FileNotFoundException, IOException {
+    final InodeTree.ResolveResult<FileSystem> res = fsState
+        .resolve(getUriPath(f), true);
+    final RemoteIterator<LocatedFileStatus> statusIter = res.targetFileSystem
+        .listLocatedStatus(res.remainingPath);
+
+    if (res.isInternalDir()) {
+      return statusIter;
+    }
+
+    return new RemoteIterator<LocatedFileStatus>() {
+      @Override
+      public boolean hasNext() throws IOException {
+        return statusIter.hasNext();
+      }
+
+      @Override
+      public LocatedFileStatus next() throws IOException {
+        final LocatedFileStatus status = statusIter.next();
+        return (LocatedFileStatus)fixFileStatus(status,
+            getChrootedPath(res, status, f));
+      }
+    };
+  }
+
+  private Path getChrootedPath(InodeTree.ResolveResult<FileSystem> res,
+      FileStatus status, Path f) throws IOException {
+    final String suffix = ((ChRootedFileSystem)res.targetFileSystem)
+        .stripOutRoot(status.getPath());
+    return this.makeQualified(
+        suffix.length() == 0 ? f : new Path(res.resolvedPath, suffix));
+  }
+
+  @Override

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS44 MOV44 INS44 INS43 MOV8 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS74 INS42 INS43 INS42 INS42 INS41 MOV32 INS42 INS42 INS32 INS8 INS32 INS42 INS42 INS42 INS16 INS32 INS42 INS42 INS42 INS42 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS8 INS14 INS43 INS43 INS42 INS83 MOV32 INS45 INS42 INS32 INS21 INS42 INS42 INS42 INS62 INS14 INS14 INS42 INS42 MOV32 INS70 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS41 INS74 INS1 INS40 INS42 INS32 INS42 INS7 INS42 INS43 INS43 INS11 INS42 MOV43 INS42 INS42 INS44 INS42 INS8 INS40 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS40 INS42 INS40 INS42 INS43 INS43 INS31 INS31 INS36 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS43 INS42 MOV21 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 MOV11 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS41 INS42 INS42 INS42 INS60 INS41 MOV2 INS32 INS32 INS83 INS43 INS59 INS11 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL14 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL70 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21