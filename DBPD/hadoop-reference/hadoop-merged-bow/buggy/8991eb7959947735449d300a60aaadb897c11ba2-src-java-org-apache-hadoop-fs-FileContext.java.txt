HADOOP-6678. Remove FileContext#isFile, isDirectory and exists. Contributed by Eli Collins.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@939140 13f79535-47bb-0310-9956-ffa450edef68

-   * getFsStatus, getFileStatus, isDirectory, isFile, exists, and listStatus.
+   * getFsStatus, getFileStatus, exists, and listStatus.
-
-  /**
-   * Does the file exist?
-   * Note: Avoid using this method if you already have FileStatus in hand.
-   * Instead reuse the FileStatus 
-   * @param f the  file or dir to be checked
-   *
-   * @throws AccessControlException If access is denied
-   * @throws IOException If an I/O error occurred
-   * 
-   * Exceptions applicable to file systems accessed over RPC:
-   * @throws RpcClientException If an exception occurred in the RPC client
-   * @throws RpcServerException If an exception occurred in the RPC server
-   * @throws UnexpectedServerException If server implementation throws 
-   *           undeclared exception to RPC server
-   */
-  public boolean exists(final Path f) throws AccessControlException,
-      IOException {
-    try {
-      return getFileStatus(f) != null;
-    } catch (FileNotFoundException e) {
-      return false;
-    } catch (UnsupportedFileSystemException e) {
-      return false;
-    } catch (UnresolvedLinkException e) {
-      return false;
-    }
-  }
-
-  /**
-   * Is a directory?
-   * Note: Avoid using this method if you already have FileStatus in hand.
-   * Instead reuse the FileStatus 
-   * returned by getFileStatus() or listStatus() methods.
-   * 
-   * @param f Path to evaluate
-   *
-   * @return True iff the named path is a directory.
-   *
-   * @throws AccessControlException If access is denied
-   * @throws UnsupportedFileSystemException If file system for <code>f</code> is
-   *           not supported
-   * @throws IOException If an I/O error occurred
-   * 
-   * Exceptions applicable to file systems accessed over RPC:
-   * @throws RpcClientException If an exception occurred in the RPC client
-   * @throws RpcServerException If an exception occurred in the RPC server
-   * @throws UnexpectedServerException If server implementation throws 
-   *           undeclared exception to RPC server
-   */
-  public boolean isDirectory(final Path f) throws AccessControlException,
-      UnsupportedFileSystemException, IOException {
-    try {
-      final Path absF = fixRelativePart(f);
-      return getFileStatus(absF).isDir();
-    } catch (FileNotFoundException e) {
-      return false;
-    }
-  }
-
-  /** True iff the named path is a regular file.
-   * Note: Avoid using this method  if you already have FileStatus in hand
-   * Instead reuse the FileStatus returned by getFileStatus() or listStatus()
-   * methods.
-   *
-   * @param f Path to evaluate
-   *
-   * @throws AccessControlException If access is denied
-   * @throws UnsupportedFileSystemException If file system for <code>f</code>
-   *         is not supported
-   * @throws IOException If an I/O error occurred
-   * 
-   * Exceptions applicable to file systems accessed over RPC:
-   * @throws RpcClientException If an exception occurred in the RPC client
-   * @throws RpcServerException If an exception occurred in the RPC server
-   * @throws UnexpectedServerException If server implementation throws 
-   *           undeclared exception to RPC server
-   */
-  public boolean isFile(final Path f) throws AccessControlException,
-      UnsupportedFileSystemException, IOException {
-    try {
-      final Path absF = fixRelativePart(f);
-      return !getFileStatus(absF).isDir();
-    } catch (FileNotFoundException e) {
-      return false;               // f does not exist
-    }
-  }
-    if (!exists(f)) {
+    if (!this.util().exists(f)) {
+     * Does the file exist?
+     * Note: Avoid using this method if you already have FileStatus in hand.
+     * Instead reuse the FileStatus 
+     * @param f the  file or dir to be checked
+     *
+     * @throws AccessControlException If access is denied
+     * @throws IOException If an I/O error occurred
+     * @throws UnsupportedFileSystemException If file system for <code>f</code> is
+     *           not supported
+     * 
+     * Exceptions applicable to file systems accessed over RPC:
+     * @throws RpcClientException If an exception occurred in the RPC client
+     * @throws RpcServerException If an exception occurred in the RPC server
+     * @throws UnexpectedServerException If server implementation throws 
+     *           undeclared exception to RPC server
+     */
+    public boolean exists(final Path f) throws AccessControlException,
+      UnsupportedFileSystemException, IOException {
+      try {
+        FileStatus fs = FileContext.this.getFileStatus(f);
+        assert fs != null;
+        return true;
+      } catch (FileNotFoundException e) {
+        return false;
+      }
+    }
+    
+    /**
-      checkDest(qSrc.getName(), qDst, false);
-      if (isDirectory(qSrc)) {
+      checkDest(qSrc.getName(), qDst, overwrite);
+      FileStatus fs = FileContext.this.getFileStatus(qSrc);
+      if (fs.isDir()) {
-  
-  //
-  // Check destionation. Throw IOException if destination already exists
-  // and overwrite is not true
-  //
+
+  /**
+   * Check if copying srcName to dst would overwrite an existing 
+   * file or directory.
+   * @param srcName File or directory to be copied.
+   * @param dst Destination to copy srcName to.
+   * @param overwrite Whether it's ok to overwrite an existing file. 
+   * @throws AccessControlException If access is denied.
+   * @throws IOException If dst is an existing directory, or dst is an 
+   * existing file and the overwrite option is not passed.
+   */
-    if (exists(dst)) {
-      if (isDirectory(dst)) {
-      // TBD not very clear
+    FileStatus dstFs = getFileStatus(dst);
+    try {
+      if (dstFs.isDir()) {
+        // Recurse to check if dst/srcName exists.
+    } catch (FileNotFoundException e) {
+      // dst does not exist - OK to copy.

MOV31 INS29 MOV43 INS65 INS65 INS65 INS65 INS65 INS65 INS60 INS54 UPD66 MOV8 INS65 INS60 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS43 INS59 MOV8 INS12 INS42 INS66 UPD42 UPD66 INS66 MOV12 INS43 INS59 INS42 INS42 INS32 INS44 INS8 INS32 INS60 INS6 INS41 MOV8 INS42 INS42 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV42 INS43 INS42 INS52 INS42 INS43 INS59 INS27 INS9 MOV43 MOV42 INS52 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 MOV33 MOV42 INS42 INS52 MOV42 MOV42 INS42 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL41 DEL8 DEL54 DEL8 DEL31 DEL9 DEL41 DEL8 DEL32 DEL27 DEL41 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL12 DEL9 DEL32 DEL25