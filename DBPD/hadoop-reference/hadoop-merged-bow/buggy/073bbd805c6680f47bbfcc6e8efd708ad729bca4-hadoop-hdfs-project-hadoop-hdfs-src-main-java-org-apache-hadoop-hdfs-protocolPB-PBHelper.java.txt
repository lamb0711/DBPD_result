HDFS-7081. Add new DistributedFileSystem API for getting all the existing storage policies. Contributed by Jing Zhao.

-import org.apache.hadoop.hdfs.BlockStoragePolicy;
+import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
+import org.apache.hadoop.hdfs.protocol.proto.HdfsProtos.BlockStoragePolicyProto;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockStoragePolicySuite;
+  public static BlockStoragePolicy[] convertStoragePolicies(
+      List<BlockStoragePolicyProto> policyProtos) {
+    if (policyProtos == null || policyProtos.size() == 0) {
+      return new BlockStoragePolicy[0];
+    }
+    BlockStoragePolicy[] policies = new BlockStoragePolicy[policyProtos.size()];
+    int i = 0;
+    for (BlockStoragePolicyProto proto : policyProtos) {
+      policies[i++] = convert(proto);
+    }
+    return policies;
+  }
+
+  public static BlockStoragePolicy convert(BlockStoragePolicyProto proto) {
+    List<StorageTypeProto> cList = proto.getCreationPolicy()
+        .getStorageTypesList();
+    StorageType[] creationTypes = convertStorageTypes(cList, cList.size());
+    List<StorageTypeProto> cfList = proto.hasCreationFallbackPolicy() ? proto
+        .getCreationFallbackPolicy().getStorageTypesList() : null;
+    StorageType[] creationFallbackTypes = cfList == null ? StorageType
+        .EMPTY_ARRAY : convertStorageTypes(cfList, cfList.size());
+    List<StorageTypeProto> rfList = proto.hasReplicationFallbackPolicy() ?
+        proto.getReplicationFallbackPolicy().getStorageTypesList() : null;
+    StorageType[] replicationFallbackTypes = rfList == null ? StorageType
+        .EMPTY_ARRAY : convertStorageTypes(rfList, rfList.size());
+    return new BlockStoragePolicy((byte) proto.getPolicyId(), proto.getName(),
+        creationTypes, creationFallbackTypes, replicationFallbackTypes);
+  }
+
+  public static BlockStoragePolicyProto convert(BlockStoragePolicy policy) {
+    BlockStoragePolicyProto.Builder builder = BlockStoragePolicyProto
+        .newBuilder().setPolicyId(policy.getId()).setName(policy.getName());
+    // creation storage types
+    StorageTypesProto creationProto = convert(policy.getStorageTypes());
+    Preconditions.checkArgument(creationProto != null);
+    builder.setCreationPolicy(creationProto);
+    // creation fallback
+    StorageTypesProto creationFallbackProto = convert(
+        policy.getCreationFallbacks());
+    if (creationFallbackProto != null) {
+      builder.setCreationFallbackPolicy(creationFallbackProto);
+    }
+    // replication fallback
+    StorageTypesProto replicationFallbackProto = convert(
+        policy.getReplicationFallbacks());
+    if (replicationFallbackProto != null) {
+      builder.setReplicationFallbackPolicy(replicationFallbackProto);
+    }
+    return builder.build();
+  }
+
+  public static StorageTypesProto convert(StorageType[] types) {
+    if (types == null || types.length == 0) {
+      return null;
+    }
+    List<StorageTypeProto> list = convertStorageTypes(types);
+    return StorageTypesProto.newBuilder().addAllStorageTypes(list).build();
+  }
+
-            : BlockStoragePolicy.ID_UNSPECIFIED);
+            : BlockStoragePolicySuite.ID_UNSPECIFIED);

INS26 INS26 UPD40 INS40 INS40 INS31 INS31 INS31 INS31 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS85 INS74 INS42 INS25 INS60 INS60 INS70 INS41 INS42 INS43 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS41 INS42 INS43 INS42 INS60 INS60 INS21 INS21 INS60 INS25 INS60 INS25 INS41 INS42 INS5 INS42 INS25 INS60 INS41 INS42 INS43 INS43 INS27 INS8 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS42 INS74 INS59 INS5 INS59 INS74 INS59 INS5 INS59 INS74 INS59 INS5 INS59 INS14 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS43 INS85 INS27 INS8 INS74 INS59 INS32 INS42 INS42 INS27 INS27 INS41 INS43 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS16 INS43 INS85 INS42 INS16 INS43 INS43 INS42 INS16 INS43 INS85 INS42 INS16 INS43 INS11 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS27 INS27 INS41 INS43 INS43 INS42 INS32 INS32 INS42 INS42 INS33 INS32 INS34 INS3 INS42 INS5 INS32 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS33 INS42 INS27 INS40 INS32 INS42 INS42 INS32 INS32 INS33 INS42 INS27 INS40 INS32 INS42 INS39 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS33 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS33 INS40 INS34 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD40 INS42 INS42 INS5 INS34 INS43 INS85 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS37 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42