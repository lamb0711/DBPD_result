HADOOP-13155. Implement TokenRenewer to renew and cancel delegation tokens in KMS. Contributed by Xiao Chen.

+import org.apache.hadoop.security.token.TokenRenewer;
+import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenIdentifier;
+import org.apache.hadoop.util.KMSUtil;
-  public static final String TOKEN_KIND = "kms-dt";
+  public static final String TOKEN_KIND_STR = "kms-dt";
+  public static final Text TOKEN_KIND = new Text(TOKEN_KIND_STR);
+  /**
+   * The KMS implementation of {@link TokenRenewer}.
+   */
+  public static class KMSTokenRenewer extends TokenRenewer {
+    private static final Logger LOG =
+        LoggerFactory.getLogger(KMSTokenRenewer.class);
+
+    @Override
+    public boolean handleKind(Text kind) {
+      return kind.equals(TOKEN_KIND);
+    }
+
+    @Override
+    public boolean isManaged(Token<?> token) throws IOException {
+      return true;
+    }
+
+    @Override
+    public long renew(Token<?> token, Configuration conf) throws IOException {
+      LOG.debug("Renewing delegation token {}", token);
+      KeyProvider keyProvider = KMSUtil.createKeyProvider(conf,
+          KeyProviderFactory.KEY_PROVIDER_PATH);
+      if (!(keyProvider instanceof
+          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {
+        LOG.warn("keyProvider {} cannot renew dt.", keyProvider == null ?
+            "null" : keyProvider.getClass());
+        return 0;
+      }
+      return ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)
+          keyProvider).renewDelegationToken(token);
+    }
+
+    @Override
+    public void cancel(Token<?> token, Configuration conf) throws IOException {
+      LOG.debug("Canceling delegation token {}", token);
+      KeyProvider keyProvider = KMSUtil.createKeyProvider(conf,
+          KeyProviderFactory.KEY_PROVIDER_PATH);
+      if (!(keyProvider instanceof
+          KeyProviderDelegationTokenExtension.DelegationTokenExtension)) {
+        LOG.warn("keyProvider {} cannot cancel dt.", keyProvider == null ?
+            "null" : keyProvider.getClass());
+        return;
+      }
+      ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)
+          keyProvider).cancelDelegationToken(token);
+    }
+  }
+
+  public long renewDelegationToken(final Token<?> dToken) throws IOException {
+    try {
+      final String doAsUser = getDoAsUser();
+      final DelegationTokenAuthenticatedURL.Token token =
+          generateDelegationToken(dToken);
+      final URL url = createURL(null, null, null, null);
+      LOG.debug("Renewing delegation token {} with url:{}, as:{}",
+          token, url, doAsUser);
+      final DelegationTokenAuthenticatedURL authUrl =
+          new DelegationTokenAuthenticatedURL(configurator);
+      return actualUgi.doAs(
+          new PrivilegedExceptionAction<Long>() {
+            @Override
+            public Long run() throws Exception {
+              return authUrl.renewDelegationToken(url, token, doAsUser);
+            }
+          }
+      );
+    } catch (Exception ex) {
+      if (ex instanceof IOException) {
+        throw (IOException) ex;
+      } else {
+        throw new IOException(ex);
+      }
+    }
+  }
+
+  @Override
+  public Void cancelDelegationToken(final Token<?> dToken) throws IOException {
+    try {
+      final String doAsUser = getDoAsUser();
+      final DelegationTokenAuthenticatedURL.Token token =
+          generateDelegationToken(dToken);
+      return actualUgi.doAs(
+          new PrivilegedExceptionAction<Void>() {
+            @Override
+            public Void run() throws Exception {
+              final URL url = createURL(null, null, null, null);
+              LOG.debug("Cancelling delegation token {} with url:{}, as:{}",
+                  dToken, url, doAsUser);
+              final DelegationTokenAuthenticatedURL authUrl =
+                  new DelegationTokenAuthenticatedURL(configurator);
+              authUrl.cancelDelegationToken(url, token, doAsUser);
+              return null;
+            }
+          }
+      );
+    } catch (Exception ex) {
+      if (ex instanceof IOException) {
+        throw (IOException) ex;
+      } else {
+        throw new IOException(ex);
+      }
+    }
+  }
+
+  /**
+   * Get the doAs user name.
+   *
+   * 'actualUGI' is the UGI of the user creating the client
+   * It is possible that the creator of the KMSClientProvier
+   * calls this method on behalf of a proxyUser (the doAsUser).
+   * In which case this call has to be made as the proxy user.
+   *
+   * @return the doAs user name.
+   * @throws IOException
+   */
+  private String getDoAsUser() throws IOException {
+    UserGroupInformation currentUgi = UserGroupInformation.getCurrentUser();
+    return (currentUgi.getAuthenticationMethod() ==
+        UserGroupInformation.AuthenticationMethod.PROXY)
+        ? currentUgi.getShortUserName() : null;
+  }
+
+  /**
+   * Generate a DelegationTokenAuthenticatedURL.Token from the given generic
+   * typed delegation token.
+   *
+   * @param dToken The delegation token.
+   * @return The DelegationTokenAuthenticatedURL.Token, with its delegation
+   *         token set to the delegation token passed in.
+   */
+  private DelegationTokenAuthenticatedURL.Token generateDelegationToken(
+      final Token<?> dToken) {
+    DelegationTokenAuthenticatedURL.Token token =
+        new DelegationTokenAuthenticatedURL.Token();
+    Token<AbstractDelegationTokenIdentifier> dt =
+        new Token<>(dToken.getIdentifier(), dToken.getPassword(),
+            dToken.getKind(), dToken.getService());
+    token.setDelegationToken(dt);
+    return token;
+  }
+
+  @Override
-        // 'actualUGI' is the UGI of the user creating the client 
-        // It is possible that the creator of the KMSClientProvier
-        // calls this method on behalf of a proxyUser (the doAsUser).
-        // In which case this call has to be made as the proxy user.
-        UserGroupInformation currentUgi = UserGroupInformation.getCurrentUser();
-        final String doAsUser = (currentUgi.getAuthenticationMethod() ==
-            UserGroupInformation.AuthenticationMethod.PROXY)
-                                ? currentUgi.getShortUserName() : null;
-
+        final String doAsUser = getDoAsUser();

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS55 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 MOV43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS8 UPD42 INS42 INS42 INS14 INS65 INS42 INS83 INS83 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS42 INS83 INS74 INS42 INS42 INS54 INS42 INS42 INS83 INS74 INS42 INS42 INS54 INS65 INS65 INS65 INS42 MOV60 INS41 INS65 INS65 INS65 INS40 INS83 INS74 INS42 INS60 INS60 INS21 INS41 INS43 INS42 INS66 INS65 INS66 INS42 INS42 INS32 INS42 INS43 INS42 INS41 INS42 INS74 INS42 INS42 INS41 INS42 INS74 INS42 INS43 INS42 INS42 INS21 INS60 INS25 INS41 INS42 INS74 INS42 INS43 INS42 INS42 INS21 INS60 INS25 INS21 INS43 INS76 INS8 INS12 INS43 INS76 INS8 INS12 INS66 INS66 INS66 INS66 INS66 INS66 INS42 MOV16 INS66 INS66 INS42 INS66 INS66 INS66 INS43 INS76 INS43 INS59 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS57 INS42 INS32 INS43 INS76 INS9 INS43 INS76 INS42 INS32 INS43 INS59 INS38 INS8 INS32 INS43 INS76 INS42 INS32 INS43 INS59 INS38 INS8 INS32 INS42 INS60 INS60 INS60 INS21 INS60 INS41 INS44 INS8 INS42 INS60 INS60 INS41 INS44 INS8 INS42 INS40 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS36 INS21 INS41 INS36 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS36 INS21 INS41 INS36 INS42 INS42 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS83 INS43 INS59 INS32 INS43 INS42 INS25 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS43 INS42 INS25 INS43 INS42 INS42 INS74 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS40 INS62 INS32 INS34 INS11 INS42 INS42 INS42 INS40 INS62 INS32 INS11 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS62 INS8 INS8 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS14 INS42 INS62 INS8 INS8 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS45 INS16 INS43 INS42 INS42 INS43 INS42 INS42 INS45 INS16 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS33 INS33 INS43 INS42 INS74 INS1 INS42 INS43 INS53 INS53 INS42 INS42 INS42 INS74 INS1 INS42 INS43 INS53 INS53 INS42 INS43 INS40 INS27 INS45 INS32 INS40 INS40 INS27 INS45 INS32 INS40 INS42 INS43 INS43 INS31 INS42 INS11 INS14 INS43 INS43 INS31 INS42 INS11 INS14 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS60 INS21 INS60 INS21 INS41 INS42 INS42 INS32 INS83 INS43 INS59 INS32 INS83 INS43 INS59 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS33 INS33 INS43 INS42 INS42