HADOOP-8608. Add Configuration API for parsing time durations.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477869 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.TimeUnit;
+  enum ParsedTimeDuration {
+    NS {
+      TimeUnit unit() { return TimeUnit.NANOSECONDS; }
+      String suffix() { return "ns"; }
+    },
+    US {
+      TimeUnit unit() { return TimeUnit.MICROSECONDS; }
+      String suffix() { return "us"; }
+    },
+    MS {
+      TimeUnit unit() { return TimeUnit.MILLISECONDS; }
+      String suffix() { return "ms"; }
+    },
+    S {
+      TimeUnit unit() { return TimeUnit.SECONDS; }
+      String suffix() { return "s"; }
+    },
+    M {
+      TimeUnit unit() { return TimeUnit.MINUTES; }
+      String suffix() { return "m"; }
+    },
+    H {
+      TimeUnit unit() { return TimeUnit.HOURS; }
+      String suffix() { return "h"; }
+    },
+    D {
+      TimeUnit unit() { return TimeUnit.DAYS; }
+      String suffix() { return "d"; }
+    };
+    abstract TimeUnit unit();
+    abstract String suffix();
+    static ParsedTimeDuration unitFor(String s) {
+      for (ParsedTimeDuration ptd : values()) {
+        // iteration order is in decl order, so SECONDS matched last
+        if (s.endsWith(ptd.suffix())) {
+          return ptd;
+        }
+      }
+      return null;
+    }
+    static ParsedTimeDuration unitFor(TimeUnit unit) {
+      for (ParsedTimeDuration ptd : values()) {
+        if (ptd.unit() == unit) {
+          return ptd;
+        }
+      }
+      return null;
+    }
+  }
+
+  /**
+   * Set the value of <code>name</code> to the given time duration. This
+   * is equivalent to <code>set(&lt;name&gt;, value + &lt;time suffix&gt;)</code>.
+   * @param name Property name
+   * @param value Time duration
+   * @param unit Unit of time
+   */
+  public void setTimeDuration(String name, long value, TimeUnit unit) {
+    set(name, value + ParsedTimeDuration.unitFor(unit).suffix());
+  }
+
+  /**
+   * Return time duration in the given time unit. Valid units are encoded in
+   * properties as suffixes: nanoseconds (ns), microseconds (us), milliseconds
+   * (ms), seconds (s), minutes (m), hours (h), and days (d).
+   * @param name Property name
+   * @param defaultValue Value returned if no mapping exists.
+   * @param unit Unit to convert the stored property, if it exists.
+   * @throws NumberFormatException If the property stripped of its unit is not
+   *         a number
+   */
+  public long getTimeDuration(String name, long defaultValue, TimeUnit unit) {
+    String vStr = get(name);
+    if (null == vStr) {
+      return defaultValue;
+    }
+    vStr = vStr.trim();
+    ParsedTimeDuration vUnit = ParsedTimeDuration.unitFor(vStr);
+    if (null == vUnit) {
+      LOG.warn("No unit for " + name + "(" + vStr + ") assuming " + unit);
+      vUnit = ParsedTimeDuration.unitFor(unit);
+    } else {
+      vStr = vStr.substring(0, vStr.lastIndexOf(vUnit.suffix()));
+    }
+    return unit.convert(Long.parseLong(vStr), vUnit.unit());
+  }
+

INS26 INS40 INS71 INS31 INS31 INS42 INS72 INS72 INS72 INS72 INS72 INS72 INS72 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS42 INS1 INS42 INS1 INS42 INS1 INS42 INS1 INS42 INS1 INS42 INS1 INS42 INS1 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS43 INS42 INS60 INS25 INS21 INS60 INS25 INS41 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS43 INS42 INS70 INS41 INS42 INS43 INS42 INS70 INS41 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS7 INS43 INS59 INS27 INS8 INS8 INS32 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS43 INS42 INS8 INS42 INS44 INS32 INS8 INS33 INS42 INS44 INS32 INS8 INS33 INS42 INS42 INS27 INS42 INS42 INS32 INS33 INS42 INS41 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS21 INS21 INS21 INS42 INS42 INS32 INS32 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS43 INS42 INS42 INS25 INS43 INS42 INS42 INS25 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS40 INS45 INS40 INS45 INS40 INS45 INS40 INS45 INS40 INS45 INS40 INS45 INS40 INS45 INS42 INS32 INS8 INS42 INS27 INS8 INS32 INS42 INS42 INS42 INS27 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS41 INS32 INS42 INS41 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42