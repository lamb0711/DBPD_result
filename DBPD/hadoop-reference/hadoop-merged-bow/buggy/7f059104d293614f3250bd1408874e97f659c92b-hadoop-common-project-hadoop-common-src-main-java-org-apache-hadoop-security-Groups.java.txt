HADOOP-10142. Avoid groups lookup for unprivileged users such as dr.who (vinay via cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548763 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import org.apache.hadoop.HadoopIllegalArgumentException;
+import org.apache.hadoop.util.StringUtils;
+  private final Map<String, List<String>> staticUserToGroupsMap = 
+      new HashMap<String, List<String>>();
-    
+    parseStaticMapping(conf);
+
+
+  /*
+   * Parse the hadoop.user.group.static.mapping.overrides configuration to
+   * staticUserToGroupsMap
+   */
+  private void parseStaticMapping(Configuration conf) {
+    String staticMapping = conf.get(
+        CommonConfigurationKeys.HADOOP_USER_GROUP_STATIC_OVERRIDES,
+        CommonConfigurationKeys.HADOOP_USER_GROUP_STATIC_OVERRIDES_DEFAULT);
+    Collection<String> mappings = StringUtils.getStringCollection(
+        staticMapping, ";");
+    for (String users : mappings) {
+      Collection<String> userToGroups = StringUtils.getStringCollection(users,
+          "=");
+      if (userToGroups.size() < 1 || userToGroups.size() > 2) {
+        throw new HadoopIllegalArgumentException("Configuration "
+            + CommonConfigurationKeys.HADOOP_USER_GROUP_STATIC_OVERRIDES
+            + " is invalid");
+      }
+      String[] userToGroupsArray = userToGroups.toArray(new String[userToGroups
+          .size()]);
+      String user = userToGroupsArray[0];
+      List<String> groups = Collections.emptyList();
+      if (userToGroupsArray.length == 2) {
+        groups = (List<String>) StringUtils
+            .getStringCollection(userToGroupsArray[1]);
+      }
+      staticUserToGroupsMap.put(user, groups);
+    }
+  }
+    // No need to lookup for groups of static users
+    List<String> staticMapping = staticUserToGroupsMap.get(user);
+    if (staticMapping != null) {
+      return staticMapping;
+    }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS74 INS59 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS74 INS42 INS14 INS21 INS43 INS42 INS60 INS60 INS70 INS60 INS25 INS42 INS42 INS43 INS43 INS74 INS32 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS27 INS8 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS60 INS60 INS60 INS25 INS21 INS43 INS43 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS43 INS43 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS74 INS59 INS27 INS8 INS5 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS27 INS27 INS53 INS43 INS85 INS42 INS32 INS42 INS42 INS2 INS43 INS43 INS42 INS32 INS40 INS34 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS34 INS32 INS34 INS14 INS42 INS42 INS42 INS3 INS42 INS34 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS43 INS27 INS5 INS32 INS42 INS11 INS42 INS45 INS40 INS45 INS43 INS85 INS42 INS42 INS74 INS32 INS42 INS43 INS43 INS42 INS42 INS2 INS42 INS42 INS42 INS34