HADOOP-13037. Refactor Azure Data Lake Store as an independent FileSystem. Contributed by Vishwajeet Dusane

-import org.apache.hadoop.fs.adl.AdlFileSystem;
- * Utility class to configure real Adls storage to run Live test suite against.
+ * Configure Adl storage file system.
-  private AdlStorageConfiguration() {}
-
-      "dfs.adl.test.contract" + ".enable";
+      "dfs.adl.test.contract.enable";
+
+  private static final String KEY_FILE_SYSTEM_IMPL = "fs.contract.test.fs";
+  private static final String KEY_FILE_SYSTEM = "test.fs.adl.name";
-  public static Configuration getConfiguration() {
-    Configuration localConf = new Configuration();
-    localConf.addResource(TEST_CONFIGURATION_FILE_NAME);
-    localConf.addResource(TEST_SUPPORTED_TEST_CONFIGURATION_FILE_NAME);
-    return localConf;
+  private AdlStorageConfiguration() {
-  public static boolean isContractTestEnabled() {
+  public synchronized static Configuration getConfiguration() {
+    Configuration newConf = new Configuration();
+    newConf.addResource(TEST_CONFIGURATION_FILE_NAME);
+    newConf.addResource(TEST_SUPPORTED_TEST_CONFIGURATION_FILE_NAME);
+    return newConf;
+  }
+
+  public synchronized static boolean isContractTestEnabled() {
-  public static FileSystem createAdlStorageConnector()
+  public synchronized static FileSystem createStorageConnector()
-    if(!isContractTestEnabled()) {
+    if (!isContractTestEnabled()) {
-    AdlFileSystem fileSystem = new AdlFileSystem();
-    fileSystem.initialize(new URI(conf.get("fs.defaultFS")), conf);
-    return fileSystem;
+    String fileSystem = conf.get(KEY_FILE_SYSTEM);
+    if (fileSystem == null || fileSystem.trim().length() == 0) {
+      throw new IOException("Default file system not configured.");
+    }
+    String fileSystemImpl = conf.get(KEY_FILE_SYSTEM_IMPL);
+    if (fileSystemImpl == null || fileSystemImpl.trim().length() == 0) {
+      throw new IOException(
+          "Configuration " + KEY_FILE_SYSTEM_IMPL + "does not exist.");
+    }
+    FileSystem fs = null;
+    try {
+      fs = (FileSystem) Class.forName(fileSystemImpl).newInstance();
+    } catch (Exception e) {
+      throw new IOException("Could not instantiate the filesystem.");
+    }
+
+    fs.initialize(new URI(conf.get(KEY_FILE_SYSTEM)), conf);
+    return fs;

MOV31 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 UPD42 UPD66 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS60 INS25 INS60 INS25 INS60 INS54 UPD42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 UPD43 MOV43 INS59 INS8 INS12 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS32 INS27 INS27 INS53 UPD42 INS42 INS33 INS21 INS44 INS8 UPD42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS14 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS14 INS7 INS43 INS42 INS53 INS32 INS42 INS43 INS45 INS32 INS42 INS43 INS27 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS43 INS32 UPD43 MOV43 INS45 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 DEL40 DEL26 DEL45 DEL45 DEL27 DEL42 DEL14 DEL59 DEL60 DEL45