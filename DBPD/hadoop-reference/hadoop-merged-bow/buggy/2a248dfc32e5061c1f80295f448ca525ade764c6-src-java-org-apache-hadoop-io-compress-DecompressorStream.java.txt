HADOOP-6835. Add support for concatenated gzip input. Contributed by Greg Roelofs


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@961532 13f79535-47bb-0310-9956-ffa450edef68

-  
-  public DecompressorStream(InputStream in, Decompressor decompressor, int bufferSize) throws IOException {
+  private int lastBytesSent = 0;
+
+  public DecompressorStream(InputStream in, Decompressor decompressor,
+                            int bufferSize)
+  throws IOException {
-  public DecompressorStream(InputStream in, Decompressor decompressor) throws IOException {
+  public DecompressorStream(InputStream in, Decompressor decompressor)
+  throws IOException {
- * @throws IOException
+   * @throws IOException
-    
+
-      if (decompressor.finished() || decompressor.needsDictionary()) {
+      if (decompressor.needsDictionary()) {
-      if (decompressor.needsInput()) {
-        getCompressedData();
+
+      if (decompressor.finished()) {
+        // First see if there was any leftover buffered input from previous
+        // stream; if not, attempt to refill buffer.  If refill -> EOF, we're
+        // all done; else reset, fix up input buffer, and get ready for next
+        // concatenated substream/"member".
+        int nRemaining = decompressor.getRemaining();
+        if (nRemaining == 0) {
+          int m = getCompressedData();
+          if (m == -1) {
+            // apparently the previous end-of-stream was also end-of-file:
+            // return success, as if we had never called getCompressedData()
+            eof = true;
+            return -1;
+          }
+          decompressor.reset();
+          decompressor.setInput(buffer, 0, m);
+          lastBytesSent = m;
+        } else {
+          // looks like it's a concatenated stream:  reset low-level zlib (or
+          // other engine) and buffers, then "resend" remaining input data
+          decompressor.reset();
+          int leftoverOffset = lastBytesSent - nRemaining;
+          assert (leftoverOffset >= 0);
+          // this recopies userBuf -> direct buffer if using native libraries:
+          decompressor.setInput(buffer, leftoverOffset, nRemaining);
+          // NOTE:  this is the one place we do NOT want to save the number
+          // of bytes sent (nRemaining here) into lastBytesSent:  since we
+          // are resending what we've already sent before, offset is nonzero
+          // in general (only way it could be zero is if it already equals
+          // nRemaining), which would then screw up the offset calculation
+          // _next_ time around.  IOW, getRemaining() is in terms of the
+          // original, zero-offset bufferload, so lastBytesSent must be as
+          // well.  Cheesy ASCII art:
+          //
+          //          <------------ m, lastBytesSent ----------->
+          //          +===============================================+
+          // buffer:  |1111111111|22222222222222222|333333333333|     |
+          //          +===============================================+
+          //     #1:  <-- off -->|<-------- nRemaining --------->
+          //     #2:  <----------- off ----------->|<-- nRem. -->
+          //     #3:  (final substream:  nRemaining == 0; eof = true)
+          //
+          // If lastBytesSent is anything other than m, as shown, then "off"
+          // will be calculated incorrectly.
+        }
+      } else if (decompressor.needsInput()) {
+        int m = getCompressedData();
+        if (m == -1) {
+          throw new EOFException("Unexpected end of input stream");
+        }
+        decompressor.setInput(buffer, 0, m);
+        lastBytesSent = m;
-    
+
-  
-  protected void getCompressedData() throws IOException {
+
+  protected int getCompressedData() throws IOException {
-    int n = in.read(buffer, 0, buffer.length);
-    if (n == -1) {
-      throw new EOFException("Unexpected end of input stream");
-    }
-
-    decompressor.setInput(buffer, 0, n);
+    // note that the _caller_ is now required to call setInput() or throw
+    return in.read(buffer, 0, buffer.length);
-  
+

INS23 INS31 INS83 INS39 INS59 INS83 INS39 INS42 MOV43 INS8 INS42 INS34 MOV21 INS41 INS8 MOV32 MOV25 INS25 MOV32 MOV32 INS8 INS25 INS60 INS25 MOV32 INS8 INS39 INS59 INS27 INS8 INS8 INS60 INS25 INS21 INS21 INS42 INS32 INS42 INS34 INS60 MOV25 INS21 INS21 INS21 INS21 INS60 INS6 INS21 INS39 INS59 INS27 MOV8 INS32 INS7 INS42 INS42 INS39 INS59 INS27 INS32 INS32 INS7 INS32 INS39 INS59 INS36 INS32 INS42 INS32 INS42 INS38 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 MOV32 INS42 MOV38 INS41 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS38 INS42 INS42 INS42 INS34 INS42 INS9 INS34 DEL27 DEL8 DEL83 DEL39 DEL42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL27 DEL25 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL8 DEL31