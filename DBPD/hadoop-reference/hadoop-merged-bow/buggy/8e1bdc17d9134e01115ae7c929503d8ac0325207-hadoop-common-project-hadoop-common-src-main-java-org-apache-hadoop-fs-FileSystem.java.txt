HADOOP-12107. long running apps may have a huge number of StatisticsData instances under FileSystem (Sangjin Lee via Ming Ma)

-import java.lang.ref.WeakReference;
+import java.lang.ref.PhantomReference;
+import java.lang.ref.ReferenceQueue;
-import java.util.LinkedList;
-      /**
-       * Stores a weak reference to the thread owning this StatisticsData.
-       * This allows us to remove StatisticsData objects that pertain to
-       * threads that no longer exist.
-       */
-      final WeakReference<Thread> owner;
-
-      StatisticsData(WeakReference<Thread> owner) {
-        this.owner = owner;
-      }
-    
+
-     * List of all thread-local data areas.  Protected by the Statistics lock.
+     * Set of all thread-local data areas.  Protected by the Statistics lock.
+     * The references to the statistics data are kept using phantom references
+     * to the associated threads. Proper clean-up is performed by the cleaner
+     * thread when the threads are garbage collected.
-    private LinkedList<StatisticsData> allData;
+    private final Set<StatisticsDataReference> allData;
+
+    /**
+     * Global reference queue and a cleaner thread that manage statistics data
+     * references from all filesystem instances.
+     */
+    private static final ReferenceQueue<Thread> STATS_DATA_REF_QUEUE;
+    private static final Thread STATS_DATA_CLEANER;
+
+    static {
+      STATS_DATA_REF_QUEUE = new ReferenceQueue<Thread>();
+      // start a single daemon cleaner thread
+      STATS_DATA_CLEANER = new Thread(new StatisticsDataReferenceCleaner());
+      STATS_DATA_CLEANER.
+          setName(StatisticsDataReferenceCleaner.class.getName());
+      STATS_DATA_CLEANER.setDaemon(true);
+      STATS_DATA_CLEANER.start();
+    }
-      this.rootData = new StatisticsData(null);
+      this.rootData = new StatisticsData();
-      this.allData = null;
+      this.allData = new HashSet<StatisticsDataReference>();
-      this.rootData = new StatisticsData(null);
+      this.rootData = new StatisticsData();
+      this.allData = new HashSet<StatisticsDataReference>();
+    }
+
+    /**
+     * A phantom reference to a thread that also includes the data associated
+     * with that thread. On the thread being garbage collected, it is enqueued
+     * to the reference queue for clean-up.
+     */
+    private class StatisticsDataReference extends PhantomReference<Thread> {
+      private final StatisticsData data;
+
+      public StatisticsDataReference(StatisticsData data, Thread thread) {
+        super(thread, STATS_DATA_REF_QUEUE);
+        this.data = data;
+      }
+
+      public StatisticsData getData() {
+        return data;
+      }
+
+      /**
+       * Performs clean-up action when the associated thread is garbage
+       * collected.
+       */
+      public void cleanUp() {
+        // use the statistics lock for safety
+        synchronized (Statistics.this) {
+          /*
+           * If the thread that created this thread-local data no longer exists,
+           * remove the StatisticsData from our list and fold the values into
+           * rootData.
+           */
+          rootData.add(data);
+          allData.remove(this);
+        }
+      }
+    }
+
+    /**
+     * Background action to act on references being removed.
+     */
+    private static class StatisticsDataReferenceCleaner implements Runnable {
+      @Override
+      public void run() {
+        while (true) {
+          try {
+            StatisticsDataReference ref =
+                (StatisticsDataReference)STATS_DATA_REF_QUEUE.remove();
+            ref.cleanUp();
+          } catch (Throwable th) {
+            // the cleaner thread should continue to run even if there are
+            // exceptions, including InterruptedException
+            LOG.warn("exception in the cleaner thread but it will continue to "
+                + "run", th);
+          }
+        }
+      }
-        data = new StatisticsData(
-            new WeakReference<Thread>(Thread.currentThread()));
+        data = new StatisticsData();
+        StatisticsDataReference ref =
+            new StatisticsDataReference(data, Thread.currentThread());
-          if (allData == null) {
-            allData = new LinkedList<StatisticsData>();
-          }
-          allData.add(data);
+          allData.add(ref);
-      if (allData != null) {
-        for (Iterator<StatisticsData> iter = allData.iterator();
-            iter.hasNext(); ) {
-          StatisticsData data = iter.next();
-          visitor.accept(data);
-          if (data.owner.get() == null) {
-            /*
-             * If the thread that created this thread-local data no
-             * longer exists, remove the StatisticsData from our list
-             * and fold the values into rootData.
-             */
-            rootData.add(data);
-            iter.remove();
-          }
-        }
+      for (StatisticsDataReference ref: allData) {
+        StatisticsData data = ref.getData();
+        visitor.accept(data);
-        private StatisticsData total = new StatisticsData(null);
+        private StatisticsData total = new StatisticsData();
-        private StatisticsData total = new StatisticsData(null);
+        private StatisticsData total = new StatisticsData();
+
+    @VisibleForTesting
+    synchronized int getAllThreadLocalDataSize() {
+      return allData.size();
+    }

MOV26 UPD40 UPD40 INS23 INS23 INS28 INS55 INS55 INS31 INS83 UPD74 INS29 INS83 INS83 INS83 UPD74 MOV74 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS8 MOV21 INS29 INS83 INS42 UPD74 MOV74 INS23 INS31 INS31 INS31 INS29 INS83 INS83 INS42 INS43 INS31 INS78 INS83 INS39 INS42 INS8 UPD43 INS43 INS65 UPD43 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 MOV21 INS65 UPD43 INS83 INS83 MOV43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 MOV43 INS42 INS8 INS29 INS83 INS39 INS42 MOV8 INS65 INS42 INS78 INS83 INS39 INS42 INS8 INS70 INS42 INS41 UPD66 INS66 INS66 INS66 UPD42 INS42 INS66 INS66 UPD42 INS7 INS7 INS32 INS32 INS32 INS7 INS66 INS66 INS66 UPD42 INS42 MOV43 INS42 INS43 INS42 INS46 INS21 INS41 INS65 INS51 INS66 INS42 INS61 INS44 INS42 INS8 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS22 INS14 INS14 INS42 INS42 INS42 INS7 INS42 INS66 INS66 INS52 MOV8 INS9 INS8 INS60 INS51 INS43 INS42 INS60 MOV21 INS42 INS42 UPD74 MOV74 INS43 INS14 INS57 INS42 INS52 INS42 MOV43 INS74 MOV43 UPD42 INS74 INS22 INS42 INS42 INS54 INS43 INS59 INS52 INS8 INS42 INS43 INS59 UPD43 INS42 INS43 INS43 INS42 INS43 INS43 INS43 INS43 INS52 INS42 INS8 INS12 INS14 INS42 INS42 INS14 MOV21 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS52 INS60 INS21 INS44 INS8 MOV43 INS43 INS42 MOV32 UPD42 UPD42 MOV43 MOV43 INS43 INS59 INS32 INS43 INS42 INS21 UPD42 MOV42 UPD42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 MOV43 MOV43 INS43 INS32 INS42 INS42 INS27 INS42 MOV42 INS42 INS42 INS42 INS45 INS45 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL59 DEL23 DEL42 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL33 DEL33 DEL33 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL32 DEL33 DEL27 DEL25 DEL14 DEL14 DEL52 DEL42 DEL33 DEL27 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL33 DEL27 DEL43 DEL74 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL8 DEL25 DEL33 DEL33