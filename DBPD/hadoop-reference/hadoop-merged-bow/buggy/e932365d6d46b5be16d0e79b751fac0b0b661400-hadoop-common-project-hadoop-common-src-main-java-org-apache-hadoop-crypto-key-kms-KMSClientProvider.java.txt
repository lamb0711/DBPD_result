HADOOP-10698. KMS, add proxyuser support. (tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618217 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.security.UserGroupInformation;
+import java.security.PrivilegedExceptionAction;
+  private UserGroupInformation loginUgi;
+    loginUgi = UserGroupInformation.getCurrentUser();
-  private HttpURLConnection createConnection(URL url, String method)
+  private HttpURLConnection createConnection(final URL url, String method)
-      DelegationTokenAuthenticatedURL authUrl =
-          new DelegationTokenAuthenticatedURL(configurator);
-      conn = authUrl.openConnection(url, authToken);
-    } catch (AuthenticationException ex) {
+      // if current UGI is different from UGI at constructor time, behave as
+      // proxyuser
+      UserGroupInformation currentUgi = UserGroupInformation.getCurrentUser();
+      final String doAsUser =
+          (loginUgi.getShortUserName().equals(currentUgi.getShortUserName()))
+          ? null : currentUgi.getShortUserName();
+
+      // creating the HTTP connection using the current UGI at constructor time
+      conn = loginUgi.doAs(new PrivilegedExceptionAction<HttpURLConnection>() {
+        @Override
+        public HttpURLConnection run() throws Exception {
+          DelegationTokenAuthenticatedURL authUrl =
+              new DelegationTokenAuthenticatedURL(configurator);
+          return authUrl.openConnection(url, authToken, doAsUser);
+        }
+      });
+    } catch (IOException ex) {
+      throw ex;
+    } catch (Exception ex) {
-        es = conn.getErrorStream();
-        ObjectMapper mapper = new ObjectMapper();
-        Map json = mapper.readValue(es, Map.class);
-        String exClass = (String) json.get(
-            KMSRESTConstants.ERROR_EXCEPTION_JSON);
-        String exMsg = (String)
-            json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);
-        try {
-          ClassLoader cl = KMSClientProvider.class.getClassLoader();
-          Class klass = cl.loadClass(exClass);
-          Constructor constr = klass.getConstructor(String.class);
-          toThrow = (Exception) constr.newInstance(exMsg);
-        } catch (Exception ex) {
+        String contentType = conn.getHeaderField(CONTENT_TYPE);
+        if (contentType != null &&
+            contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) {
+          es = conn.getErrorStream();
+          ObjectMapper mapper = new ObjectMapper();
+          Map json = mapper.readValue(es, Map.class);
+          String exClass = (String) json.get(
+              KMSRESTConstants.ERROR_EXCEPTION_JSON);
+          String exMsg = (String)
+              json.get(KMSRESTConstants.ERROR_MESSAGE_JSON);
+          try {
+            ClassLoader cl = KMSClientProvider.class.getClassLoader();
+            Class klass = cl.loadClass(exClass);
+            Constructor constr = klass.getConstructor(String.class);
+            toThrow = (Exception) constr.newInstance(exMsg);
+          } catch (Exception ex) {
+            toThrow = new IOException(MessageFormat.format(
+                "HTTP status [{0}], {1}", status, conn.getResponseMessage()));
+          }
+        } else {

INS26 INS26 INS40 INS40 INS23 INS83 INS43 INS59 INS42 INS42 INS21 INS83 INS7 INS8 INS12 INS42 INS32 INS60 INS60 INS21 INS44 INS8 INS42 INS42 INS43 INS59 INS83 INS43 INS59 INS7 INS43 INS42 INS53 UPD43 INS8 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS32 INS42 INS42 UPD42 MOV60 INS60 INS25 MOV21 INS42 INS42 INS36 INS33 INS32 INS42 INS42 INS14 INS43 INS59 INS27 MOV8 INS8 INS32 INS42 INS42 INS74 INS1 INS42 INS42 INS32 INS27 INS32 INS21 INS32 INS42 INS32 INS43 INS43 INS31 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 MOV8 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS41 INS43 INS32 INS32 INS42 INS42 INS42 INS45 INS42 INS32 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS42 DEL42 DEL32 DEL7 DEL21