HADOOP-10300. Allowed deferred sending of call responses. (Daryn Sharp via yliu)

+    private AtomicInteger responseWaitCount = new AtomicInteger(1);
+    public void setResponse(Throwable t) throws IOException {
+      setupResponse(new ByteArrayOutputStream(), this,
+          RpcStatusProto.FATAL, RpcErrorCodeProto.ERROR_RPC_SERVER,
+          null, t.getClass().getName(), StringUtils.stringifyException(t));
+    }
+
+    /**
+     * Allow a IPC response to be postponed instead of sent immediately
+     * after the handler returns from the proxy method.  The intended use
+     * case is freeing up the handler thread when the response is known,
+     * but an expensive pre-condition must be satisfied before it's sent
+     * to the client.
+     */
+    @InterfaceStability.Unstable
+    @InterfaceAudience.LimitedPrivate({"HDFS"})
+    public void postponeResponse() {
+      int count = responseWaitCount.incrementAndGet();
+      assert count > 0 : "response has already been sent";
+    }
+
+    @InterfaceStability.Unstable
+    @InterfaceAudience.LimitedPrivate({"HDFS"})
+    public void sendResponse() throws IOException {
+      int count = responseWaitCount.decrementAndGet();
+      assert count >= 0 : "response has already been sent";
+      if (count == 0) {
+        if (rpcResponse == null) {
+          // needed by postponed operations to indicate an exception has
+          // occurred.  it's too late to re-encode the response so just
+          // drop the connection.
+          connection.close();
+        } else {
+          connection.sendResponse(this);
+        }
+      }
+    }
+
-    private final Call saslCall = new Call(AuthProtocol.SASL.callId,
-        RpcConstants.INVALID_RETRY_COUNT, null, this);
-    private final ByteArrayOutputStream saslResponse = new ByteArrayOutputStream();
-    
-    
+
+      final Call saslCall = new Call(AuthProtocol.SASL.callId,
+          RpcConstants.INVALID_RETRY_COUNT, null, this);
+      final ByteArrayOutputStream saslResponse = new ByteArrayOutputStream();
-      responder.doRespond(saslCall);
+      saslCall.sendResponse();
-    
+
-      responder.doRespond(authFailedCall);
+      authFailedCall.sendResponse();
-    
+
-        responder.doRespond(fakeCall);
+        fakeCall.sendResponse();
-        responder.doRespond(fakeCall);
+        fakeCall.sendResponse();
-        
-        responder.doRespond(fakeCall);
+        fakeCall.sendResponse();
-      responder.doRespond(fakeCall);
+      fakeCall.sendResponse();
-        responder.doRespond(call);
+        call.sendResponse();
+    private void sendResponse(Call call) throws IOException {
+      responder.doRespond(call);
+    }
+
-            responder.doRespond(call);
+            call.sendResponse();
-  private void setupResponse(ByteArrayOutputStream responseBuf,
+  private static void setupResponse(ByteArrayOutputStream responseBuf,
-  private void wrapWithSasl(ByteArrayOutputStream response, Call call)
+  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)

INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS79 INS83 INS39 INS42 INS8 INS78 INS79 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS14 INS43 INS42 INS42 INS21 INS65 INS40 INS40 INS4 INS60 INS6 INS40 INS40 INS4 INS42 INS60 INS6 INS25 INS60 INS60 INS43 INS42 INS42 MOV21 INS43 INS34 INS42 INS32 INS66 INS66 INS66 INS66 INS66 INS45 INS39 INS59 INS27 INS45 INS45 INS39 INS59 INS27 INS45 INS27 INS8 INS83 MOV43 MOV59 INS83 MOV43 MOV59 INS42 INS42 INS42 INS14 INS52 INS40 INS40 INS33 INS32 INS32 INS42 INS32 INS42 INS34 INS42 INS32 INS42 INS34 INS42 INS34 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS21 INS42 INS42 INS42 INS42 INS33 INS21 INS21 UPD42 UPD42 INS32 INS32 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 UPD42 UPD42 UPD42 UPD42 DEL83 DEL83 DEL23 DEL83 DEL83 DEL23 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42