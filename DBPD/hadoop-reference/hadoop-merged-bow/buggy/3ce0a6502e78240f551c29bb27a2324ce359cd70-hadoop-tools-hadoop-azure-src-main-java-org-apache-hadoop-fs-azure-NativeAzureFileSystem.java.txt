HADOOP-12533. Introduce FileNotFoundException in WASB for read and seek API. Contributed by Dushyanth.

+import java.io.EOFException;
+import org.apache.hadoop.fs.FSExceptionMessages;
-
+import com.microsoft.azure.storage.StorageErrorCode;
-import com.microsoft.azure.storage.core.*;
+import com.microsoft.azure.storage.StorageErrorCodeStrings;
+import org.apache.hadoop.io.IOUtils;
-
-    public synchronized int read() throws IOException {
+    public synchronized int read() throws FileNotFoundException, IOException {
-        if (e.getCause() instanceof StorageException) {
-          StorageException storageExcp  = (StorageException) e.getCause();
+
+        Throwable innerException = checkForAzureStorageException(e);
+
+        if (innerException instanceof StorageException) {
+
-              key, e.getMessage(), storageExcp.getErrorCode());
+              key, e, ((StorageException) innerException).getErrorCode());
+
+          if (isFileNotFoundException((StorageException) innerException)) {
+            throw new FileNotFoundException(String.format("%s is not found", key));
+          }
-        throw e;
+
+       throw e;
-    public synchronized int read(byte[] b, int off, int len) throws IOException {
+    public synchronized int read(byte[] b, int off, int len) throws FileNotFoundException, IOException {
-        if (e.getCause() instanceof StorageException) {
-          StorageException storageExcp  = (StorageException) e.getCause();
+
+        Throwable innerException = checkForAzureStorageException(e);
+
+        if (innerException instanceof StorageException) {
+
-              key, e.getMessage(), storageExcp.getErrorCode());
+              key, e, ((StorageException) innerException).getErrorCode());
+
+          if (isFileNotFoundException((StorageException) innerException)) {
+            throw new FileNotFoundException(String.format("%s is not found", key));
+          }
-        throw e;
+
+       throw e;
-    public void close() throws IOException {
-      in.close();
-      closed = true;
+    public synchronized void close() throws IOException {
+      if (!closed) {
+        closed = true;
+        IOUtils.closeStream(in);
+        in = null;
+      }
-    public synchronized void seek(long pos) throws IOException {
-     in.close();
-     in = store.retrieve(key);
-     this.pos = in.skip(pos);
-     LOG.debug("Seek to position {}. Bytes skipped {}", pos,
-         this.pos);
+    public synchronized void seek(long pos) throws FileNotFoundException, EOFException, IOException {
+      try {
+        checkNotClosed();
+        if (pos < 0) {
+          throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);
+        }
+        IOUtils.closeStream(in);
+        in = store.retrieve(key);
+        this.pos = in.skip(pos);
+        LOG.debug("Seek to position {}. Bytes skipped {}", pos,
+          this.pos);
+      } catch(IOException e) {
+
+        Throwable innerException = checkForAzureStorageException(e);
+
+        if (innerException instanceof StorageException
+             && isFileNotFoundException((StorageException) innerException)) {
+          throw new FileNotFoundException(String.format("%s is not found", key));
+        }
+
+        throw e;
+      }
+
+    /*
+     * Helper method to recursively check if the cause of the exception is
+     * a Azure storage exception.
+     */
+    private Throwable checkForAzureStorageException(IOException e) {
+
+      Throwable innerException = e.getCause();
+
+      while (innerException != null
+              && !(innerException instanceof StorageException)) {
+        innerException = innerException.getCause();
+      }
+
+      return innerException;
+    }
+
+    /*
+     * Helper method to check if the AzureStorageException is
+     * because backing blob was not found.
+     */
+    private boolean isFileNotFoundException(StorageException e) {
+
+      String errorCode = ((StorageException) e).getErrorCode();
+      if (errorCode != null
+          && (errorCode.equals(StorageErrorCodeStrings.BLOB_NOT_FOUND)
+              || errorCode.equals(StorageErrorCodeStrings.RESOURCE_NOT_FOUND)
+              || errorCode.equals(StorageErrorCode.BLOB_NOT_FOUND.toString())
+              || errorCode.equals(StorageErrorCode.RESOURCE_NOT_FOUND.toString()))) {
+
+        return true;
+      }
+
+      return false;
+    }
+
+    /*
+     * Helper method to check if a stream is closed.
+     */
+    private void checkNotClosed() throws IOException {
+      if (closed) {
+        throw new IOException(FSExceptionMessages.STREAM_IS_CLOSED);
+      }
+    }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS31 INS31 INS31 INS43 INS43 INS83 INS8 INS43 INS43 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS25 INS42 INS42 INS54 INS42 INS43 INS42 MOV60 INS61 INS41 INS43 INS42 INS60 INS25 INS41 INS42 INS25 INS38 INS8 MOV8 INS12 INS42 INS43 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS9 INS42 INS8 INS8 INS42 MOV21 MOV21 INS21 INS21 INS25 INS44 INS8 INS42 UPD42 MOV32 INS27 INS38 INS21 INS42 INS42 INS32 INS27 INS36 INS41 INS53 MOV60 INS25 MOV53 INS60 INS7 INS32 INS27 INS8 INS43 INS42 INS60 INS25 INS53 INS42 INS33 INS36 INS7 INS36 INS42 INS42 INS33 INS27 INS9 INS14 INS43 MOV62 INS8 INS43 INS59 UPD42 UPD42 INS42 INS42 INS33 INS42 INS42 INS34 INS53 UPD42 UPD42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS62 INS42 INS32 INS11 INS32 INS32 INS32 INS32 INS43 INS40 INS42 INS42 INS32 INS42 MOV21 INS25 INS42 INS42 INS32 INS42 INS25 INS14 INS42 INS42 INS32 INS62 INS32 INS53 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS32 INS8 INS43 INS40 INS42 INS42 INS42 INS43 INS42 INS11 INS14 INS42 INS42 INS40 INS42 INS40 INS42 MOV42 INS42 INS11 INS53 MOV42 INS42 INS11 INS53 INS42 INS42 INS43 INS42 INS43 INS32 INS36 MOV43 INS42 INS14 INS36 MOV43 INS42 INS14 INS42 INS42 INS42 INS42 INS45 INS42 MOV11 INS43 INS32 MOV11 INS43 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL8