YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.
(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)

Conflicts:

	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java

+import java.util.HashMap;
+import java.util.Map;
-import org.apache.commons.logging.LogFactory;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.apache.commons.logging.LogFactory;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
-  private Set<String> excludes;
+  // exclude host list with optional timeout.
+  // If the value is null, it indicates default timeout.
+  private Map<String, Integer> excludes;
-    excludes = new HashSet<String>();
+    excludes = new HashMap<String, Integer>();
-    excludes = new HashSet<String>();
+    excludes = new HashMap<String, Integer>();
+  public static void readFileToMap(String type,
+      String filename, Map<String, Integer> map) throws IOException {
+    File file = new File(filename);
+    FileInputStream fis = new FileInputStream(file);
+    readFileToMapWithFileInputStream(type, filename, fis, map);
+  }
+
+  public static void readFileToMapWithFileInputStream(String type,
+      String filename, InputStream inputStream, Map<String, Integer> map)
+          throws IOException {
+    // The input file could be either simple text or XML.
+    boolean xmlInput = filename.toLowerCase().endsWith(".xml");
+    if (xmlInput) {
+      readXmlFileToMapWithFileInputStream(type, filename, inputStream, map);
+    } else {
+      HashSet<String> nodes = new HashSet<String>();
+      readFileToSetWithFileInputStream(type, filename, inputStream, nodes);
+      for (String node : nodes) {
+        map.put(node, null);
+      }
+    }
+  }
+
+  public static void readXmlFileToMapWithFileInputStream(String type,
+      String filename, InputStream fileInputStream, Map<String, Integer> map)
+          throws IOException {
+    Document dom;
+    DocumentBuilderFactory builder = DocumentBuilderFactory.newInstance();
+    try {
+      DocumentBuilder db = builder.newDocumentBuilder();
+      dom = db.parse(fileInputStream);
+      // Examples:
+      // <host><name>host1</name></host>
+      // <host><name>host2</name><timeout>123</timeout></host>
+      // <host><name>host3</name><timeout>-1</timeout></host>
+      // <host><name>host4, host5,host6</name><timeout>1800</timeout></host>
+      Element doc = dom.getDocumentElement();
+      NodeList nodes = doc.getElementsByTagName("host");
+      for (int i = 0; i < nodes.getLength(); i++) {
+        Node node = nodes.item(i);
+        if (node.getNodeType() == Node.ELEMENT_NODE) {
+          Element e= (Element) node;
+          // Support both single host and comma-separated list of hosts.
+          String v = readFirstTagValue(e, "name");
+          String[] hosts = StringUtils.getTrimmedStrings(v);
+          String str = readFirstTagValue(e, "timeout");
+          Integer timeout = (str == null)? null : Integer.parseInt(str);
+          for (String host : hosts) {
+            map.put(host, timeout);
+            LOG.info("Adding a node \"" + host + "\" to the list of "
+                + type + " hosts from " + filename);
+          }
+        }
+      }
+    } catch (IOException|SAXException|ParserConfigurationException e) {
+      LOG.fatal("error parsing " + filename, e);
+      throw new RuntimeException(e);
+    } finally {
+      fileInputStream.close();
+    }
+  }
+
+  static String readFirstTagValue(Element e, String tag) {
+    NodeList nodes = e.getElementsByTagName(tag);
+    return (nodes.getLength() == 0)? null : nodes.item(0).getTextContent();
+  }
+
-      Set<String> newExcludes = new HashSet<String>();
+      Map<String, Integer> newExcludes = new HashMap<String, Integer>();
-        readFileToSet("excluded", excludeFiles, newExcludes);
+        readFileToMap("excluded", excludeFiles, newExcludes);
-      Set<String> newExcludes = new HashSet<String>();
+      Map<String, Integer> newExcludes = new HashMap<String, Integer>();
-        readFileToSetWithFileInputStream("excluded", excludesFile,
+        readFileToMapWithFileInputStream("excluded", excludesFile,
-      return excludes;
+      return excludes.keySet();
-      excludes.addAll(this.excludes);
+      excludes.addAll(this.excludes.keySet());
+    } finally {
+      this.readLock.unlock();
+    }
+  }
+
+  public void getHostDetails(Set<String> includeHosts,
+                             Map<String, Integer> excludeHosts) {
+    this.readLock.lock();
+    try {
+      includeHosts.addAll(this.includes);
+      excludeHosts.putAll(this.excludes);

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 UPD74 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD43 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS60 INS41 MOV74 INS42 INS74 INS42 INS21 INS54 UPD42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS43 INS43 INS39 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS43 INS59 INS16 INS8 INS43 INS43 INS43 INS32 MOV8 INS8 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 MOV60 INS21 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS21 INS60 INS60 INS24 INS44 INS8 INS21 INS42 INS42 INS32 INS36 INS33 INS32 INS60 MOV21 INS21 INS42 INS42 INS42 INS22 INS42 INS21 INS21 UPD74 UPD74 INS43 INS42 INS43 INS42 INS32 INS42 INS45 INS32 INS74 INS32 INS44 INS42 INS8 INS42 INS42 INS43 INS59 INS7 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS84 INS42 INS21 INS53 INS32 INS42 INS42 INS42 INS27 INS32 INS42 UPD74 INS74 INS59 INS32 INS32 INS52 INS42 INS32 INS32 UPD43 INS43 UPD43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 UPD42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS25 INS43 INS43 INS43 INS32 INS14 INS42 INS42 INS32 INS34 INS42 INS42 INS34 UPD43 INS43 MOV21 INS43 INS43 INS43 INS42 INS14 MOV21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS22 UPD42 UPD42 INS22 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS42 INS42 INS42 UPD42 INS42 UPD74 INS42 INS42 INS42 INS74 INS22 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS32 INS40 INS60 INS60 INS60 INS60 INS60 INS70 INS45 INS42 INS42 UPD43 INS43 UPD42 INS43 INS43 INS43 UPD42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS5 INS59 INS43 INS59 INS43 INS59 INS44 INS42 INS8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS16 INS43 INS42 INS21 INS21 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS36 INS33 INS32 INS42 INS32 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS33 INS45 INS42 INS45 INS42 INS45 INS42 DEL42