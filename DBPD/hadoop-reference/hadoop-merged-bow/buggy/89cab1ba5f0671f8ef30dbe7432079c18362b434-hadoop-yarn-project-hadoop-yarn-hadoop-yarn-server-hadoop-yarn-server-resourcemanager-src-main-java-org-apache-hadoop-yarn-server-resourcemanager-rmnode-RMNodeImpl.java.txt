YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan

+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import org.apache.hadoop.yarn.api.records.Container;
+  
+  private final Map<ContainerId, Container> toBeDecreasedContainers =
+      new HashMap<>();
+  
+  private final Map<ContainerId, Container> nmReportedIncreasedContainers =
+      new HashMap<>();
+      .addTransition(NodeState.RUNNING, NodeState.RUNNING,
+          RMNodeEventType.DECREASE_CONTAINER,
+          new DecreaseContainersTransition())
+  
+  @VisibleForTesting
+  public Collection<Container> getToBeDecreasedContainers() {
+    return toBeDecreasedContainers.values(); 
+  }
+  
+  @Override
+  public void updateNodeHeartbeatResponseForContainersDecreasing(
+      NodeHeartbeatResponse response) {
+    this.writeLock.lock();
+    
+    try {
+      response.addAllContainersToDecrease(toBeDecreasedContainers.values());
+      toBeDecreasedContainers.clear();
+    } finally {
+      this.writeLock.unlock();
+    }
+  }
+  
+  public static class DecreaseContainersTransition
+      implements SingleArcTransition<RMNodeImpl, RMNodeEvent> {
+ 
+    @Override
+    public void transition(RMNodeImpl rmNode, RMNodeEvent event) {
+      RMNodeDecreaseContainerEvent de = (RMNodeDecreaseContainerEvent) event;
+
+      for (Container c : de.getToBeDecreasedContainers()) {
+        rmNode.toBeDecreasedContainers.put(c.getId(), c);
+      }
+    }
+  }
+      rmNode.handleReportedIncreasedContainers(
+          statusEvent.getNMReportedIncreasedContainers());
+  
+  private void handleReportedIncreasedContainers(
+      List<Container> reportedIncreasedContainers) {
+    for (Container container : reportedIncreasedContainers) {
+      ContainerId containerId = container.getId();
+
+      // Don't bother with containers already scheduled for cleanup, or for
+      // applications already killed. The scheduler doens't need to know any
+      // more about this container
+      if (containersToClean.contains(containerId)) {
+        LOG.info("Container " + containerId + " already scheduled for "
+            + "cleanup, no further processing");
+        continue;
+      }
+
+      ApplicationId containerAppId =
+          containerId.getApplicationAttemptId().getApplicationId();
+
+      if (finishedApplications.contains(containerAppId)) {
+        LOG.info("Container " + containerId
+            + " belongs to an application that is already killed,"
+            + " no further processing");
+        continue;
+      }
+      
+      this.nmReportedIncreasedContainers.put(containerId, container);
+    }
+  }
+  @Override
+  public List<Container> pullNewlyIncreasedContainers() {
+    try {
+      writeLock.lock();
+
+      if (nmReportedIncreasedContainers.isEmpty()) {
+        return Collections.EMPTY_LIST;
+      } else {
+        List<Container> container =
+            new ArrayList<Container>(nmReportedIncreasedContainers.values());
+        nmReportedIncreasedContainers.clear();
+        return container;
+      }
+      
+    } finally {
+      writeLock.unlock();
+    }
+   }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS83 INS42 INS23 INS23 INS31 INS31 INS55 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV83 INS83 INS42 INS74 INS31 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS42 INS43 INS43 INS41 INS42 INS43 INS42 INS21 INS54 INS43 INS43 INS43 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS74 INS42 INS70 INS42 INS43 INS43 INS54 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS32 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS70 INS21 INS43 INS43 INS44 INS42 INS8 INS42 INS42 INS8 INS8 INS43 INS43 INS42 INS42 INS22 INS42 INS21 INS21 INS21 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS32 INS42 INS42 INS43 INS42 INS60 INS25 INS60 INS25 INS21 INS21 INS25 INS21 INS42 INS42 INS52 INS42 INS32 INS32 INS32 INS42 INS42 INS11 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS32 INS32 INS32 INS8 INS8 INS32 INS42 INS42 INS32 INS42 INS42 INS22 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS18 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS18 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS60 INS21 INS41 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS52 INS42 INS40 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS27 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS42 INS45 INS45 INS45 INS42 INS45 INS45 INS42 INS42 INS74 INS32 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 MOV14 UPD40 UPD40 MOV14 UPD40 UPD40 MOV14 UPD40 MOV14 UPD40 UPD40 MOV14 UPD40 UPD40 UPD40 MOV14 UPD40 UPD40 INS14 INS43 INS42 DEL42