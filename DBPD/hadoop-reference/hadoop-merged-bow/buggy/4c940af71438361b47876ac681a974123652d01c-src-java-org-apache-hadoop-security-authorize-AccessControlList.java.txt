HADOOP-6715. Fixes AccessControlList.toString() to return a descriptive String representation of the ACL. Contributed by Ravi Gummadi

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984652 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.io.Writable;
-public class AccessControlList {
+public class AccessControlList implements Writable {
+  private static final int INITIAL_CAPACITY = 256;
+    buildACL(aclString);
+  }
+
+  // build ACL from the given string
+  private void buildACL(String aclString) {
+      allAllowed = false;
-  
+
+  /**
+   * Returns descriptive way of users and groups that are part of this ACL.
+   * Use {@link #getAclString()} to get the exact String that can be given to
+   * the constructor of AccessControlList to create a new instance.
+   */
-    StringBuilder sb = new StringBuilder();
-    boolean first = true;
-    for(String user: users) {
-      if (!first) {
-        sb.append(",");
-      } else {
-        first = false;
-      }
-      sb.append(user);
+    String str = null;
+
+    if (allAllowed) {
+      str = "All users are allowed";
-    if (!groups.isEmpty()) {
+    else if (users.isEmpty() && groups.isEmpty()) {
+      str = "No users are allowed";
+    }
+    else {
+      String usersStr = null;
+      String groupsStr = null;
+      if (!users.isEmpty()) {
+        usersStr = users.toString();
+      }
+      if (!groups.isEmpty()) {
+        groupsStr = groups.toString();
+      }
+
+      if (!users.isEmpty() && !groups.isEmpty()) {
+        str = "Users " + usersStr + " and members of the groups "
+            + groupsStr + " are allowed";
+      }
+      else if (!users.isEmpty()) {
+        str = "Users " + usersStr + " are allowed";
+      }
+      else {// users is empty array and groups is nonempty
+        str = "Members of the groups "
+            + groupsStr + " are allowed";
+      }
+    }
+
+    return str;
+  }
+
+  /**
+   * Returns the access control list as a String that can be used for building a
+   * new instance by sending it to the constructor of {@link AccessControlList}.
+   */
+  public String getAclString() {
+    StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);
+    if (allAllowed) {
+      sb.append('*');
+    }
+    else {
+      sb.append(getUsersString());
+      sb.append(getGroupsString());
-    first = true;
-    for(String group: groups) {
+    return sb.toString();
+  }
+
+  /**
+   * Serializes the AccessControlList object
+   */
+  public void write(DataOutput out) throws IOException {
+    String aclString = getAclString();
+    Text.writeString(out, aclString);
+  }
+
+  /**
+   * Deserializes the AccessControlList object
+   */
+  public void readFields(DataInput in) throws IOException {
+    String aclString = Text.readString(in);
+    buildACL(aclString);
+  }
+
+  // Returns comma-separated concatenated single String of the set 'users'
+  private String getUsersString() {
+    return getString(users);
+  }
+
+  // Returns comma-separated concatenated single String of the set 'groups'
+  private String getGroupsString() {
+    return getString(groups);
+  }
+
+  // Returns comma-separated concatenated single String of all strings of
+  // the given set
+  private String getString(Set<String> strings) {
+    StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);
+    boolean first = true;
+    for(String str: strings) {
-      sb.append(group);
+      sb.append(str);
-    return sb.toString();    
+    return sb.toString();

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS83 INS39 INS59 MOV29 INS83 INS42 INS44 INS8 UPD83 INS39 UPD42 INS29 INS43 INS8 INS29 INS83 MOV43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 MOV8 INS42 INS34 INS43 INS42 INS21 INS65 INS42 INS60 INS25 INS41 INS65 MOV60 INS25 INS41 INS65 INS43 INS42 INS42 INS60 INS21 INS65 INS43 INS42 INS42 INS60 INS21 INS42 INS41 INS42 INS41 INS42 INS74 INS42 INS60 INS42 INS32 INS66 INS66 INS65 INS66 INS66 MOV43 INS59 INS42 INS8 INS25 INS42 INS66 INS66 INS65 INS66 MOV43 INS42 INS8 INS8 INS32 INS66 INS42 INS43 INS59 INS32 INS66 INS42 INS43 INS59 INS32 INS32 INS32 INS43 INS43 INS43 INS59 UPD42 INS42 INS42 INS21 INS68 INS42 INS33 INS21 INS27 INS8 INS8 INS42 INS21 INS21 MOV21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS7 INS42 INS7 INS32 INS32 INS21 INS60 INS60 INS25 INS25 INS25 MOV43 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS9 INS42 INS45 INS42 INS42 INS42 INS42 INS7 MOV43 INS59 INS43 INS59 INS38 INS8 MOV38 INS8 INS27 INS8 INS25 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 INS42 INS45 INS42 INS33 INS42 INS42 INS33 INS32 INS21 INS21 INS38 INS38 INS21 INS38 INS8 INS8 INS42 INS42 INS42 INS42 INS7 INS7 INS32 INS32 INS7 INS32 INS21 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS27 INS42 INS27 INS45 INS42 INS45 INS45 INS42 INS45 DEL42 DEL44 DEL42 DEL42 DEL38 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL42