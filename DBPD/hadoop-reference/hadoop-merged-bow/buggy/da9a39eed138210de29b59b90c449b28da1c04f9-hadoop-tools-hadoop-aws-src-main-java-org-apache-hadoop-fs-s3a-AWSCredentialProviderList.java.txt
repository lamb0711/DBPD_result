HADOOP-15583. Stabilize S3A Assumed Role support.
Contributed by Steve Loughran.

+import java.io.Closeable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+
-import org.apache.commons.lang3.StringUtils;
-import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.classification.InterfaceStability;
-import org.apache.hadoop.io.IOUtils;
-
+import com.google.common.base.Preconditions;
-import java.io.Closeable;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.stream.Collectors;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.fs.s3a.auth.NoAuthWithAWSException;
+import org.apache.hadoop.io.IOUtils;
+  static final String
+      CREDENTIALS_REQUESTED_WHEN_CLOSED
+      = "Credentials requested after provider list was closed";
+
+  private final AtomicInteger refCount = new AtomicInteger(1);
+
+  private final AtomicBoolean closed = new AtomicBoolean(false);
+
+    if (isClosed()) {
+      return;
+    }
+    if (isClosed()) {
+      LOG.warn(CREDENTIALS_REQUESTED_WHEN_CLOSED);
+      throw new NoAuthWithAWSException(
+          CREDENTIALS_REQUESTED_WHEN_CLOSED);
+    }
-    throw new AmazonClientException(message, lastException);
-
+    throw new NoAuthWithAWSException(message, lastException);
-      throw new AmazonClientException(NO_AWS_CREDENTIAL_PROVIDERS);
+      throw new NoAuthWithAWSException(NO_AWS_CREDENTIAL_PROVIDERS);
-    return "AWSCredentialProviderList: " +
-        StringUtils.join(providers, " ");
+    return "AWSCredentialProviderList[" +
+        "refcount= " + refCount.get() + ": [" +
+        StringUtils.join(providers, ", ") + ']';
+  }
+
+  /**
+   * Get a reference to this object with an updated reference count.
+   *
+   * @return a reference to this
+   */
+  public synchronized AWSCredentialProviderList share() {
+    Preconditions.checkState(!closed.get(), "Provider list is closed");
+    refCount.incrementAndGet();
+    return this;
+  }
+
+  /**
+   * Get the current reference count.
+   * @return the current ref count
+   */
+  @VisibleForTesting
+  public int getRefCount() {
+    return refCount.get();
+  }
+
+  /**
+   * Get the closed flag.
+   * @return true iff the list is closed.
+   */
+  @VisibleForTesting
+  public boolean isClosed() {
+    return closed.get();
-    for(AWSCredentialsProvider p: providers) {
+    synchronized (this) {
+      if (closed.get()) {
+        // already closed: no-op
+        return;
+      }
+      int remainder = refCount.decrementAndGet();
+      if (remainder != 0) {
+        // still actively used, or somehow things are
+        // now negative
+        LOG.debug("Not closing {}", this);
+        return;
+      }
+      // at this point, the closing is going to happen
+      LOG.debug("Closing {}", this);
+      closed.set(true);
+    }
+
+    // do this outside the synchronized block.
+    for (AWSCredentialsProvider p : providers) {
-        IOUtils.closeStream((Closeable)p);
+        IOUtils.closeStream((Closeable) p);
+      } else if (p instanceof AutoCloseable) {
+        S3AUtils.closeAutocloseables(LOG, (AutoCloseable)p);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS42 INS14 INS25 INS25 INS65 INS65 INS42 INS21 INS21 INS41 INS65 INS65 INS42 INS41 INS65 INS65 INS42 INS41 INS51 MOV70 INS43 INS34 INS43 INS9 INS32 INS8 INS32 INS8 INS66 INS66 INS32 INS32 INS52 INS66 INS66 INS32 INS66 INS66 INS32 INS52 INS8 INS42 INS42 INS42 INS41 INS42 INS21 INS53 UPD43 INS27 INS32 INS45 INS13 INS42 INS42 INS38 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS60 INS25 INS21 INS21 INS32 INS14 UPD42 UPD45 MOV45 INS45 INS42 INS42 UPD45 INS32 INS32 INS8 INS39 INS59 INS27 INS8 INS32 INS32 INS25 INS42 INS42 INS42 INS43 INS42 UPD43 INS42 INS42 INS42 INS42 INS41 INS42 INS32 INS42 INS34 INS21 INS41 INS42 INS42 INS45 INS52 INS42 INS42 INS9 INS62 INS8 INS42 UPD42 INS42 INS42 INS32 INS42 INS43 INS21 INS42 INS42 INS45 INS52 INS42 INS32 INS42 INS42 INS42 INS11 INS43 INS42 INS42 DEL8