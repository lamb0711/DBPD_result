Merged src/core, src/test/core, src/contrib/eclipse-plugin, and
src/contrib/ec2 from trunk 776174:784663


git-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import java.util.HashSet;
-  private static final String FS_DEFAULT_NAME_KEY = "fs.default.name";
+  public static final String FS_DEFAULT_NAME_KEY = "fs.default.name";
-  private static final Cache CACHE = new Cache();
+  static final Cache CACHE = new Cache();
-  private static class ClientFinalizer extends Thread {
-    public synchronized void run() {
-      try {
-        FileSystem.closeAll();
-      } catch (IOException e) {
-        LOG.info("FileSystem.closeAll() threw an exception:\n" + e);
-      }
-    }
-  }
-  private static final ClientFinalizer clientFinalizer = new ClientFinalizer();
-
+   * @deprecated Consider using {@link #create(Path, FsPermission, EnumSet, int, short, long, Progressable)} instead.
-  public abstract FSDataOutputStream create(Path f,
+  public FSDataOutputStream create(Path f,
-      Progressable progress) throws IOException;
+      Progressable progress) throws IOException{
+    return create(f, permission, overwrite ? EnumSet.of(CreateFlag.OVERWRITE)
+        : EnumSet.of(CreateFlag.CREATE), bufferSize, replication, blockSize,
+        progress);
+  }
+  
+  /**
+   * Opens an FSDataOutputStream at the indicated Path with write-progress
+   * reporting.
+   * @param f the file name to open.
+   * @param permission
+   * @param flag determines the semantic of this create.
+   * @param bufferSize the size of the buffer to be used.
+   * @param replication required block replication for the file.
+   * @param blockSize
+   * @param progress
+   * @throws IOException
+   * @see #setPermission(Path, FsPermission)
+   * @see CreateFlag
+   */
+  public abstract FSDataOutputStream create(Path f, FsPermission permission,
+      EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize,
+      Progressable progress) throws IOException ;
+  
+    private final ClientFinalizer clientFinalizer = new ClientFinalizer();
+
+    private final Set<Key> toAutoClose = new HashSet<Key>();
+
+        if (conf.getBoolean("fs.automatic.close", true)) {
+          toAutoClose.add(key);
+        }
+        toAutoClose.remove(key);
+      closeAll(false);
+    }
+
+    /**
+     * Close all FileSystem instances in the Cache.
+     * @param onlyAutomatic only close those that are marked for automatic closing
+     */
+    synchronized void closeAll(boolean onlyAutomatic) throws IOException {
-      for(; !map.isEmpty(); ) {
-        Map.Entry<Key, FileSystem> e = map.entrySet().iterator().next();
-        final Key key = e.getKey();
-        final FileSystem fs = e.getValue();
+
+      // Make a copy of the keys in the map since we'll be modifying
+      // the map while iterating over it, which isn't safe.
+      List<Key> keys = new ArrayList<Key>();
+      keys.addAll(map.keySet());
+
+      for (Key key : keys) {
+        final FileSystem fs = map.get(key);
+
+        if (onlyAutomatic && !toAutoClose.contains(key)) {
+          continue;
+        }
+    private class ClientFinalizer extends Thread {
+      public synchronized void run() {
+        try {
+          closeAll(true);
+        } catch (IOException e) {
+          LOG.info("FileSystem.Cache.closeAll() threw an exception:\n" + e);
+        }
+      }
+    }
+

INS26 INS26 INS40 INS40 INS31 UPD83 INS8 INS29 MOV83 UPD83 MOV83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 MOV23 INS23 INS31 INS55 INS65 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS83 INS83 INS74 INS59 INS83 INS39 INS42 INS43 INS8 INS29 INS44 INS83 INS42 MOV43 INS31 INS66 INS65 INS66 INS32 INS66 INS66 INS42 INS66 INS42 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS42 INS14 INS42 INS21 INS65 INS65 INS39 INS42 INS60 INS21 INS70 INS83 INS83 INS39 INS42 INS8 INS68 INS42 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS69 INS69 INS42 INS42 INS42 INS42 INS74 INS32 INS66 INS42 INS66 INS74 INS59 INS32 INS44 INS42 MOV8 INS54 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS32 INS32 INS43 INS43 INS43 INS43 INS25 INS21 INS42 INS9 INS43 MOV43 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS25 INS8 INS12 INS43 INS43 INS43 INS39 INS39 INS39 INS43 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS42 INS74 MOV42 UPD42 MOV42 INS42 INS83 MOV43 INS27 INS8 INS21 MOV44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS9 INS21 INS42 INS42 INS42 INS43 MOV43 UPD42 INS32 INS42 INS38 INS18 INS32 INS21 INS32 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS9 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS27 INS45 INS42 DEL83 DEL83 DEL83 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL55 DEL83 DEL83 DEL40 DEL43 DEL42 DEL43 DEL74 DEL32 DEL32 DEL42 DEL32 DEL83 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL38 DEL24