HADOOP-4952. Add new improved file system interface FileContext for the application writer. Contributed by Sanjay Radia.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816398 13f79535-47bb-0310-9956-ffa450edef68

-    workingDir = new Path(System.getProperty("user.dir")).makeQualified(this);
+    workingDir = getInitialWorkingDirectory();
-   * For open()'s FSInputStream
+   * For open()'s FSInputStream.
-    FileInputStream fis;
+    private FileInputStream fis;
-    FileOutputStream fos;
+    private FileOutputStream fos;
-                                   short replication, long blockSize, Progressable progress)
+    short replication, long blockSize, Progressable progress)
-      EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize,
-      Progressable progress) throws IOException {
+    EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize,
+    Progressable progress) throws IOException {
+    return primitiveCreate(f,
+        permission.applyUMask(FsPermission.getUMask(getConf())), flag,
+        bufferSize,  replication,  blockSize,  progress,  -1);
-      if(flag.contains(CreateFlag.APPEND)){
-        if (!exists(f)){
-          if(flag.contains(CreateFlag.CREATE))
-            return create(f, false, bufferSize, replication, blockSize, progress);
-        }
-        return append(f, bufferSize, progress);
-    }
-   
-    FSDataOutputStream out = create(f,
-        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication, blockSize, progress);
-    setPermission(f, permission);
-    return out;
+    
+     
+
+  @Override
+  protected FSDataOutputStream primitiveCreate(Path f,
+      FsPermission absolutePermission, EnumSet<CreateFlag> flag,
+      int bufferSize, short replication, long blockSize, Progressable progress,
+      int bytesPerChecksum) throws IOException {
+    
+    if(flag.contains(CreateFlag.APPEND)){
+      if (!exists(f)){
+        if(flag.contains(CreateFlag.CREATE)) {
+          return create(f, false, bufferSize, replication, blockSize, null);
+        }
+      }
+      return append(f, bufferSize, null);
+    }
+ 
+    FSDataOutputStream out = create(f, flag.contains(CreateFlag.OVERWRITE),
+                                 bufferSize, replication, blockSize, progress);
+    setPermission(f, absolutePermission);
+    return out;
+  }
+
-          new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };
+        new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };
-    if(b)
+    if(b) {
+    }
+
+  @Override
+  protected boolean primitiveMkdir(Path f, FsPermission absolutePermission)
+    throws IOException {
+    boolean b = mkdirs(f);
+    setPermission(f, absolutePermission);
+    return b;
+  }
+  
+  
-    return new Path(System.getProperty("user.home")).makeQualified(this);
+    return this.makeQualified(new Path(System.getProperty("user.home")));
+  
+  @Override
+  protected Path getInitialWorkingDirectory() {
+    return this.makeQualified(new Path(System.getProperty("user.dir")));
+  }
-      throw new FileNotFoundException( "File " + f + " does not exist.");
+      throw new FileNotFoundException("File " + f + " does not exist.");
-            f.lastModified(), new Path(f.getPath()).makeQualified(fs));
+            f.lastModified(), fs.makeQualified(new Path(f.getPath())));
-  public void setOwner(Path p, String username, String groupname
-      ) throws IOException {
+  public void setOwner(Path p, String username, String groupname)
+    throws IOException {
-  public void setPermission(Path p, FsPermission permission
-      ) throws IOException {
+  public void setPermission(Path p, FsPermission permission)
+    throws IOException {
+

MOV31 INS31 INS31 INS31 INS83 INS42 INS8 MOV29 INS78 INS83 INS43 INS42 INS44 MOV44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 UPD83 UPD42 INS44 INS44 INS78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS78 UPD83 INS43 INS42 INS21 INS83 INS83 INS42 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS42 INS41 INS43 INS42 INS39 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS21 INS41 INS42 INS42 INS41 INS7 UPD66 INS42 INS43 INS43 INS42 INS32 INS42 INS8 INS42 INS42 INS39 INS59 INS32 INS42 MOV14 MOV32 MOV14 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS38 UPD42 MOV21 INS42 INS32 INS42 INS42 INS42 INS52 INS52 MOV14 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS8 INS41 MOV32 INS33 DEL42 DEL41 DEL42 DEL52 DEL42 DEL52 DEL42 DEL7 DEL21 DEL42