HADOOP-13171. Add StorageStatistics to S3A; instrument some more operations. Contributed by Steve Loughran.

-import com.amazonaws.services.s3.model.DeleteObjectRequest;
+import com.amazonaws.services.s3.model.UploadPartRequest;
+import com.amazonaws.services.s3.model.UploadPartResult;
+import org.apache.hadoop.fs.GlobalStorageStatistics;
+import org.apache.hadoop.fs.LocatedFileStatus;
+import org.apache.hadoop.fs.PathFilter;
+import org.apache.hadoop.fs.RemoteIterator;
+import org.apache.hadoop.fs.StorageStatistics;
+import static org.apache.hadoop.fs.s3a.Statistic.*;
+  private S3AStorageStatistics storageStatistics;
+      storageStatistics = (S3AStorageStatistics)
+          GlobalStorageStatistics.INSTANCE
+              .put(S3AStorageStatistics.NAME,
+                  new GlobalStorageStatistics.StorageStatisticsProvider() {
+                    @Override
+                    public StorageStatistics provide() {
+                      return new S3AStorageStatistics();
+                    }
+                  });
+   * Get S3A Instrumentation. For test purposes.
+   * @return this instance's instrumentation.
+   */
+  public S3AInstrumentation getInstrumentation() {
+    return instrumentation;
+  }
+
+  /**
-      return new FSDataOutputStream(new S3AFastOutputStream(s3, this, bucket,
-          key, progress, statistics, cannedACL,
-          serverSideEncryptionAlgorithm, partSize, multiPartThreshold,
-          threadPoolExecutor), statistics);
+      return new FSDataOutputStream(
+          new S3AFastOutputStream(s3,
+              this,
+              bucket,
+              key,
+              progress,
+              cannedACL,
+              partSize,
+              multiPartThreshold,
+              threadPoolExecutor),
+          statistics);
-            transfers,
-            bucket,
-            progress,
-            cannedACL,
-            statistics,
-            serverSideEncryptionAlgorithm),
+            progress
+        ),
+    incrementStatistic(INVOCATION_RENAME);
-      ObjectListing objects = s3.listObjects(request);
-      statistics.incrementReadOps(1);
+      ObjectListing objects = listObjects(request);
-          objects = s3.listNextBatchOfObjects(objects);
-          statistics.incrementReadOps(1);
+          objects = continueListObjects(objects);
+   * Increment a statistic by 1.
+   * @param statistic The operation to increment
+   */
+  protected void incrementStatistic(Statistic statistic) {
+    incrementStatistic(statistic, 1);
+  }
+
+  /**
+   * Increment a statistic by a specific value.
+   * @param statistic The operation to increment
+   * @param count the count to increment
+   */
+  protected void incrementStatistic(Statistic statistic, long count) {
+    instrumentation.incrementCounter(statistic, count);
+    storageStatistics.incrementCounter(statistic, count);
+  }
+
+  /**
-  private ObjectMetadata getObjectMetadata(String key) {
+  protected ObjectMetadata getObjectMetadata(String key) {
+    incrementStatistic(OBJECT_METADATA_REQUESTS);
-    statistics.incrementReadOps(1);
+    incrementReadOperations();
+   * Initiate a {@code listObjects} operation, incrementing metrics
+   * in the process.
+   * @param request request to initiate
+   * @return the results
+   */
+  protected ObjectListing listObjects(ListObjectsRequest request) {
+    incrementStatistic(OBJECT_LIST_REQUESTS);
+    incrementReadOperations();
+    return s3.listObjects(request);
+  }
+
+  /**
+   * List the next set of objects.
+   * @param objects paged result
+   * @return the next result object
+   */
+  protected ObjectListing continueListObjects(ObjectListing objects) {
+    incrementStatistic(OBJECT_LIST_REQUESTS);
+    incrementReadOperations();
+    return s3.listNextBatchOfObjects(objects);
+  }
+
+  /**
+   * Increment read operations.
+   */
+  public void incrementReadOperations() {
+    statistics.incrementReadOps(1);
+  }
+
+  /**
+   * Increment the write operation counter.
+   * This is somewhat inaccurate, as it appears to be invoked more
+   * often than needed in progress callbacks.
+   */
+  public void incrementWriteOperations() {
+    statistics.incrementWriteOps(1);
+  }
+
+  /**
+   * Delete an object.
+   * Increments the {@code OBJECT_DELETE_REQUESTS} and write
+   * operation statistics.
+   * @param key key to blob to delete.
+   */
+  private void deleteObject(String key) {
+    incrementWriteOperations();
+    incrementStatistic(OBJECT_DELETE_REQUESTS);
+    s3.deleteObject(bucket, key);
+  }
+
+  /**
+   * Perform a bulk object delete operation.
+   * Increments the {@code OBJECT_DELETE_REQUESTS} and write
+   * operation statistics.
+   * @param deleteRequest keys to delete on the s3-backend
+   */
+  private void deleteObjects(DeleteObjectsRequest deleteRequest) {
+    incrementWriteOperations();
+    incrementStatistic(OBJECT_DELETE_REQUESTS, 1);
+    s3.deleteObjects(deleteRequest);
+  }
+
+  /**
+   * Create a putObject request.
+   * Adds the ACL and metadata
+   * @param key key of object
+   * @param metadata metadata header
+   * @param srcfile source file
+   * @return the request
+   */
+  public PutObjectRequest newPutObjectRequest(String key,
+      ObjectMetadata metadata, File srcfile) {
+    PutObjectRequest putObjectRequest = new PutObjectRequest(bucket, key,
+        srcfile);
+    putObjectRequest.setCannedAcl(cannedACL);
+    putObjectRequest.setMetadata(metadata);
+    return putObjectRequest;
+  }
+
+  /**
+   * Create a {@link PutObjectRequest} request.
+   * The metadata is assumed to have been configured with the size of the
+   * operation.
+   * @param key key of object
+   * @param metadata metadata header
+   * @param inputStream source data.
+   * @return the request
+   */
+  PutObjectRequest newPutObjectRequest(String key,
+      ObjectMetadata metadata, InputStream inputStream) {
+    PutObjectRequest putObjectRequest = new PutObjectRequest(bucket, key,
+        inputStream, metadata);
+    putObjectRequest.setCannedAcl(cannedACL);
+    return putObjectRequest;
+  }
+
+  /**
+   * Create a new object metadata instance.
+   * Any standard metadata headers are added here, for example:
+   * encryption.
+   * @return a new metadata instance
+   */
+  public ObjectMetadata newObjectMetadata() {
+    final ObjectMetadata om = new ObjectMetadata();
+    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {
+      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);
+    }
+    return om;
+  }
+
+  /**
+   * Create a new object metadata instance.
+   * Any standard metadata headers are added here, for example:
+   * encryption.
+   *
+   * @param length length of data to set in header.
+   * @return a new metadata instance
+   */
+  public ObjectMetadata newObjectMetadata(long length) {
+    final ObjectMetadata om = newObjectMetadata();
+    om.setContentLength(length);
+    return om;
+  }
+
+  /**
+   * PUT an object, incrementing the put requests and put bytes
+   * counters.
+   * It does not update the other counters,
+   * as existing code does that as progress callbacks come in.
+   * Byte length is calculated from the file length, or, if there is no
+   * file, from the content length of the header.
+   * @param putObjectRequest the request
+   * @return the upload initiated
+   */
+  public Upload putObject(PutObjectRequest putObjectRequest) {
+    long len;
+    if (putObjectRequest.getFile() != null) {
+      len = putObjectRequest.getFile().length();
+    } else {
+      len = putObjectRequest.getMetadata().getContentLength();
+    }
+    incrementPutStartStatistics(len);
+    return transfers.upload(putObjectRequest);
+  }
+
+  /**
+   * Upload part of a multi-partition file.
+   * Increments the write and put counters
+   * @param request request
+   * @return the result of the operation.
+   */
+  public UploadPartResult uploadPart(UploadPartRequest request) {
+    incrementPutStartStatistics(request.getPartSize());
+    return s3.uploadPart(request);
+  }
+
+  /**
+   * At the start of a put/multipart upload operation, update the
+   * relevant counters.
+   *
+   * @param bytes bytes in the request.
+   */
+  public void incrementPutStartStatistics(long bytes) {
+    LOG.debug("PUT start {} bytes", bytes);
+    incrementWriteOperations();
+    incrementStatistic(OBJECT_PUT_REQUESTS);
+    if (bytes > 0) {
+      incrementStatistic(OBJECT_PUT_BYTES, bytes);
+    }
+  }
+
+  /**
+   * Callback for use in progress callbacks from put/multipart upload events.
+   * Increments those statistics which are expected to be updated during
+   * the ongoing upload operation.
+   * @param key key to file that is being written (for logging)
+   * @param bytes bytes successfully uploaded.
+   */
+  public void incrementPutProgressStatistics(String key, long bytes) {
+    LOG.debug("PUT {}: {} bytes", key, bytes);
+    incrementWriteOperations();
+    if (bytes > 0) {
+      statistics.incrementBytesWritten(bytes);
+    }
+  }
+
+  /**
-      DeleteObjectsRequest deleteRequest
-          = new DeleteObjectsRequest(bucket).withKeys(keysToDelete);
-      s3.deleteObjects(deleteRequest);
+      deleteObjects(new DeleteObjectsRequest(bucket).withKeys(keysToDelete));
-      statistics.incrementWriteOps(1);
-      int writeops = 0;
-
-        s3.deleteObject(
-            new DeleteObjectRequest(bucket, keyVersion.getKey()));
-        writeops++;
+        deleteObject(keyVersion.getKey());
-      statistics.incrementWriteOps(writeops);
-        s3.deleteObject(bucket, key);
+        deleteObject(key);
-        statistics.incrementWriteOps(1);
-        List<DeleteObjectsRequest.KeyVersion> keys = new ArrayList<>();
-        ObjectListing objects = s3.listObjects(request);
-        statistics.incrementReadOps(1);
+        ObjectListing objects = listObjects(request);
+        List<DeleteObjectsRequest.KeyVersion> keys =
+            new ArrayList<>(objects.getObjectSummaries().size());
-            objects = s3.listNextBatchOfObjects(objects);
-            statistics.incrementReadOps(1);
+            objects = continueListObjects(objects);
-      s3.deleteObject(bucket, key);
-      statistics.incrementWriteOps(1);
+      deleteObject(key);
-
-      createFakeDirectory(bucket, key);
+      createFakeDirectory(key);
+    incrementStatistic(INVOCATION_LIST_STATUS);
-      ObjectListing objects = s3.listObjects(request);
-      statistics.incrementReadOps(1);
+      ObjectListing objects = listObjects(request);
-            continue;
-          }
-
-          if (objectRepresentsDirectory(summary.getKey(), summary.getSize())) {
-            result.add(new S3AFileStatus(true, true, keyPath));
-            LOG.debug("Adding: fd: {}", keyPath);
-            result.add(new S3AFileStatus(summary.getSize(),
-                dateToLong(summary.getLastModified()), keyPath,
-                getDefaultBlockSize(fQualified)));
-            LOG.debug("Adding: fi: {}", keyPath);
+            S3AFileStatus status = createFileStatus(keyPath, summary,
+                getDefaultBlockSize(keyPath));
+            result.add(status);
+            LOG.debug("Adding: {}", status);
-          if (keyPath.equals(f)) {
-            continue;
+          if (!keyPath.equals(f)) {
+            result.add(new S3AFileStatus(true, false, keyPath));
+            LOG.debug("Adding: rd: {}", keyPath);
-          result.add(new S3AFileStatus(true, false, keyPath));
-          LOG.debug("Adding: rd: {}", keyPath);
-          objects = s3.listNextBatchOfObjects(objects);
-          statistics.incrementReadOps(1);
+          objects = continueListObjects(objects);
-
-
-   * directories. Has the semantics of Unix @{code 'mkdir -p'}.
+   * directories. Has the semantics of Unix {@code 'mkdir -p'}.
-
+    incrementStatistic(INVOCATION_MKDIRS);
-      createFakeDirectory(bucket, key);
+      createFakeDirectory(key);
+    incrementStatistic(INVOCATION_GET_FILE_STATUS);
-        ObjectMetadata meta = s3.getObjectMetadata(bucket, key);
-        statistics.incrementReadOps(1);
+        ObjectMetadata meta = getObjectMetadata(key);
-          ObjectMetadata meta = s3.getObjectMetadata(bucket, newKey);
-          statistics.incrementReadOps(1);
+          ObjectMetadata meta = getObjectMetadata(newKey);
-      ObjectListing objects = s3.listObjects(request);
-      statistics.incrementReadOps(1);
+      ObjectListing objects = listObjects(request);
-    String key = pathToKey(dst);
+    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);
+    final String key = pathToKey(dst);
-    final ObjectMetadata om = new ObjectMetadata();
-    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {
-      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);
-    }
-    PutObjectRequest putObjectRequest = new PutObjectRequest(bucket, key, srcfile);
-    putObjectRequest.setCannedAcl(cannedACL);
-    putObjectRequest.setMetadata(om);
-
-    ProgressListener progressListener = new ProgressListener() {
-      public void progressChanged(ProgressEvent progressEvent) {
-        switch (progressEvent.getEventType()) {
-          case TRANSFER_PART_COMPLETED_EVENT:
-            statistics.incrementWriteOps(1);
-            break;
-          default:
-            break;
-        }
-      }
-    };
-
-    statistics.incrementWriteOps(1);
-    Upload up = transfers.upload(putObjectRequest);
-    up.addProgressListener(progressListener);
+    final ObjectMetadata om = newObjectMetadata();
+    PutObjectRequest putObjectRequest = newPutObjectRequest(key, om, srcfile);
+    Upload up = putObject(putObjectRequest);
+    ProgressableProgressListener listener = new ProgressableProgressListener(
+        this, key, up, null);
+    up.addProgressListener(listener);
+    listener.uploadCompleted();
-      ObjectMetadata srcom = s3.getObjectMetadata(bucket, srcKey);
+      ObjectMetadata srcom = getObjectMetadata(srcKey);
-              statistics.incrementWriteOps(1);
+              incrementWriteOperations();
-        statistics.incrementWriteOps(1);
+        incrementWriteOperations();
-  private boolean objectRepresentsDirectory(final String name, final long size) {
-    return !name.isEmpty()
-        && name.charAt(name.length() - 1) == '/'
-        && size == 0L;
-  }
-
-  // Handles null Dates that can be returned by AWS
-  private static long dateToLong(final Date date) {
-    if (date == null) {
-      return 0L;
-    }
-
-    return date.getTime();
-  }
-
+    LOG.debug("Finished write to {}", key);
-          s3.deleteObject(bucket, key + "/");
-          statistics.incrementWriteOps(1);
+          deleteObject(key + "/");
-  private void createFakeDirectory(final String bucketName, final String objectName)
-      throws AmazonClientException, AmazonServiceException {
+  private void createFakeDirectory(final String objectName)
+      throws AmazonClientException, AmazonServiceException,
+      InterruptedIOException {
-      createEmptyObject(bucketName, objectName + "/");
+      createEmptyObject(objectName + "/");
-      createEmptyObject(bucketName, objectName);
+      createEmptyObject(objectName);
-  private void createEmptyObject(final String bucketName, final String objectName)
-      throws AmazonClientException, AmazonServiceException {
+  private void createEmptyObject(final String objectName)
+      throws AmazonClientException, AmazonServiceException,
+      InterruptedIOException {
-    final ObjectMetadata om = new ObjectMetadata();
-    om.setContentLength(0L);
-    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {
-      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);
+    PutObjectRequest putObjectRequest = newPutObjectRequest(objectName,
+        newObjectMetadata(0L),
+        im);
+    Upload upload = putObject(putObjectRequest);
+    try {
+      upload.waitForUploadResult();
+    } catch (InterruptedException e) {
+      throw new InterruptedIOException("Interrupted creating " + objectName);
-    PutObjectRequest putObjectRequest =
-        new PutObjectRequest(bucketName, objectName, im, om);
-    putObjectRequest.setCannedAcl(cannedACL);
-    s3.putObject(putObjectRequest);
-    statistics.incrementWriteOps(1);
+    incrementPutProgressStatistics(objectName, 0);
-    ObjectMetadata ret = new ObjectMetadata();
-
-    // Non null attributes
-    ret.setContentLength(source.getContentLength());
+    ObjectMetadata ret = newObjectMetadata(source.getContentLength());
+   * Override superclass so as to add statistic collection.
+   * {@inheritDoc}
+   */
+  @Override
+  public FileStatus[] globStatus(Path pathPattern) throws IOException {
+    incrementStatistic(INVOCATION_GLOB_STATUS);
+    return super.globStatus(pathPattern);
+  }
+
+  /**
+   * Override superclass so as to add statistic collection.
+   * {@inheritDoc}
+   */
+  @Override
+  public FileStatus[] globStatus(Path pathPattern, PathFilter filter)
+      throws IOException {
+    incrementStatistic(INVOCATION_GLOB_STATUS);
+    return super.globStatus(pathPattern, filter);
+  }
+
+  /**
+   * Override superclass so as to add statistic collection.
+   * {@inheritDoc}
+   */
+  @Override
+  public RemoteIterator<LocatedFileStatus> listLocatedStatus(Path f)
+      throws FileNotFoundException, IOException {
+    incrementStatistic(INVOCATION_LIST_LOCATED_STATUS);
+    return super.listLocatedStatus(f);
+  }
+
+  @Override
+  public RemoteIterator<LocatedFileStatus> listFiles(Path f,
+      boolean recursive) throws FileNotFoundException, IOException {
+    incrementStatistic(INVOCATION_LIST_FILES);
+    return super.listFiles(f, recursive);
+  }
+
+  /**
+   * Override superclass so as to add statistic collection.
+   * {@inheritDoc}
+   */
+  @Override
+  public boolean exists(Path f) throws IOException {
+    incrementStatistic(INVOCATION_EXISTS);
+    return super.exists(f);
+  }
+
+  /**
+   * Override superclass so as to add statistic collection.
+   * {@inheritDoc}
+   */
+  @Override
+  public boolean isDirectory(Path f) throws IOException {
+    incrementStatistic(INVOCATION_IS_DIRECTORY);
+    return super.isDirectory(f);
+  }
+
+  /**
+   * Override superclass so as to add statistic collection.
+   * {@inheritDoc}
+   */
+  @Override
+  public boolean isFile(Path f) throws IOException {
+    incrementStatistic(INVOCATION_IS_FILE);
+    return super.isFile(f);
+  }
+
+  /**

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS8 INS29 INS83 UPD39 MOV39 UPD42 MOV42 MOV44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 MOV8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 UPD83 MOV83 INS43 INS42 INS44 INS44 INS44 INS8 INS29 INS43 INS42 INS44 INS44 INS44 INS8 INS29 UPD83 MOV83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 MOV43 INS42 INS44 MOV8 INS29 UPD83 MOV83 INS43 INS42 INS44 INS8 INS29 INS83 MOV39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV21 INS43 INS83 INS39 INS42 MOV44 MOV43 MOV43 INS43 INS8 INS29 INS78 INS83 INS5 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS29 INS78 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS65 INS65 INS42 INS41 INS21 INS65 INS65 UPD43 UPD42 INS21 INS65 INS65 INS65 INS43 INS42 MOV39 UPD42 MOV42 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS21 INS41 INS65 INS65 INS65 INS42 MOV43 INS42 INS21 INS21 INS41 INS65 MOV21 INS65 MOV21 INS65 INS65 INS43 INS42 INS21 INS21 MOV21 INS65 INS65 MOV43 INS42 INS21 INS21 MOV21 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 MOV60 MOV21 INS21 INS41 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV21 INS41 INS65 INS65 INS42 MOV60 MOV25 INS41 INS65 INS65 INS65 INS42 INS39 INS42 INS60 INS21 INS41 INS65 INS65 INS65 INS43 INS42 INS60 INS21 INS41 INS65 INS65 INS65 INS42 INS43 INS42 INS21 INS41 INS65 INS65 INS39 INS42 INS21 INS21 INS21 INS25 INS65 INS65 INS65 MOV43 INS42 INS39 UPD42 MOV42 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS60 INS60 INS21 UPD42 MOV42 UPD42 MOV42 MOV60 INS60 INS60 INS54 MOV21 MOV21 INS65 INS42 INS43 INS85 INS43 INS42 INS42 INS21 INS41 INS65 INS42 INS43 INS85 INS43 INS42 INS43 INS42 INS42 INS21 INS41 INS65 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS21 INS41 INS42 INS43 INS43 INS43 INS42 INS39 INS42 INS42 INS42 INS21 INS41 INS65 INS42 INS43 INS42 INS42 INS21 INS41 INS65 INS42 INS43 INS42 INS42 INS21 INS41 INS65 INS42 INS43 INS42 INS42 INS21 INS41 INS66 INS66 INS42 INS32 INS66 INS42 INS66 UPD42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS32 INS32 INS32 INS32 INS66 INS65 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS32 MOV32 INS66 INS42 INS66 INS66 INS32 INS32 MOV32 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS32 INS32 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS32 INS32 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS32 INS42 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS83 INS43 INS59 INS32 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS39 INS59 UPD27 INS8 INS32 MOV32 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS32 INS66 INS66 INS42 INS66 INS32 INS32 INS32 INS27 INS8 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS32 INS32 INS27 INS8 MOV21 MOV21 INS32 UPD66 INS65 INS66 INS32 INS32 INS32 INS83 MOV43 INS59 INS43 INS59 UPD43 INS32 MOV43 MOV59 INS43 INS59 INS8 INS12 MOV43 INS66 INS65 INS42 INS42 INS32 INS48 INS66 INS65 INS42 INS42 INS42 INS32 INS48 INS66 INS65 INS42 INS42 INS42 INS32 INS48 INS42 INS42 INS42 INS32 INS48 INS66 INS65 INS42 INS32 INS48 INS66 INS65 INS42 INS32 INS48 INS66 INS65 INS42 INS32 INS48 INS21 INS42 INS42 INS42 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS66 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS66 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS34 INS21 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS34 MOV21 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS32 INS21 INS44 INS8 UPD42 UPD42 UPD34 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS32 MOV21 INS42 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD43 INS52 INS42 INS42 INS33 MOV43 INS42 INS42 INS32 INS42 MOV42 MOV42 INS32 INS43 INS42 INS53 UPD42 INS42 INS11 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 MOV32 INS60 UPD42 MOV42 INS42 INS34 INS42 INS42 INS42 INS14 INS43 INS32 INS32 INS42 INS32 INS42 INS43 INS59 MOV43 INS43 INS27 INS42 INS40 INS42 INS40 INS14 INS42 INS42 INS42 INS42 MOV32 UPD42 UPD42 INS42 MOV42 INS32 UPD42 INS42 INS45 INS42 INS43 INS1 UPD42 MOV42 UPD42 MOV42 INS32 INS8 INS38 INS40 INS31 INS32 INS42 INS21 INS60 INS21 INS21 MOV32 MOV21 MOV21 INS78 INS83 INS43 INS42 INS8 UPD42 INS42 INS42 INS7 MOV43 INS59 INS32 INS32 UPD42 INS42 INS42 INS41 MOV42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL83 DEL42 DEL42 DEL32 DEL42 DEL49 DEL10 DEL49 DEL10 DEL50 DEL42 DEL34 DEL41 DEL32 DEL41 DEL34 DEL42 DEL59 DEL60 DEL42 DEL34 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL37 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL34 DEL59 DEL60 DEL34 DEL32 DEL21 DEL7 DEL21 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL18 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL43 DEL9 DEL9 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL18 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL34 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL83 DEL83 DEL44 DEL32 DEL38 DEL32 DEL34 DEL27 DEL32 DEL13 DEL27 DEL27 DEL42 DEL34 DEL27 DEL27 DEL41 DEL8 DEL31 DEL39 DEL42 DEL83 DEL43 DEL42 DEL44 DEL31 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL83 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL42 DEL83 DEL44 DEL60 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL14 DEL21