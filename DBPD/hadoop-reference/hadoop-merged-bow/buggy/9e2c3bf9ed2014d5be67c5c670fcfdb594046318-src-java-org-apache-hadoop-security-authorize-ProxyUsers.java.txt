HADOOP-6791.  Refresh for proxy superuser config

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951081 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.util.StringUtils;
-  /*
+  private static final String CONF_HOSTS = ".hosts";
+  public static final String CONF_GROUPS = ".groups";
+  public static final String CONF_HADOOP_PROXYUSER = "hadoop.proxyuser.";
+  public static final String CONF_HADOOP_PROXYUSER_RE = "hadoop\\.proxyuser\\.";
+  private static Configuration conf=null;
+  // list of groups and hosts per proxyuser
+  private static Map<String, Collection<String>> proxyGroups = 
+    new HashMap<String, Collection<String>>();
+  private static Map<String, Collection<String>> proxyHosts = 
+    new HashMap<String, Collection<String>>();
+
+  /**
+   * reread the conf and get new values for "hadoop.proxyuser.*.groups/hosts"
+   */
+  public static synchronized void refreshSuperUserGroupsConfiguration(Configuration cn) {
+    conf = cn;
+
+    // remove alle existing stuff
+    proxyGroups.clear();
+    proxyHosts.clear();
+
+    // get all the new keys for groups
+    String regex = CONF_HADOOP_PROXYUSER_RE+"[^.]*\\"+CONF_GROUPS;
+    Map<String,String> allMatchKeys = conf.getValByRegex(regex);
+    for(Entry<String, String> entry : allMatchKeys.entrySet()) {
+      proxyGroups.put(entry.getKey(), 
+          StringUtils.getStringCollection(entry.getValue()));
+    }
+
+    // now hosts
+    regex = CONF_HADOOP_PROXYUSER_RE+"[^.]*\\"+CONF_HOSTS;
+    allMatchKeys = conf.getValByRegex(regex);
+    for(Entry<String, String> entry : allMatchKeys.entrySet()) {
+      proxyHosts.put(entry.getKey(),
+          StringUtils.getStringCollection(entry.getValue()));
+    }
+  }
+
+  /**
-    return "hadoop.proxyuser."+userName+".groups";
+    return ProxyUsers.CONF_HADOOP_PROXYUSER+userName+ProxyUsers.CONF_GROUPS;
-  /*
+  /**
-    return "hadoop.proxyuser."+userName+".hosts";
+    return ProxyUsers.CONF_HADOOP_PROXYUSER+userName+ProxyUsers.CONF_HOSTS;
-  /*
+  /**
-   * @param conf configuration
+   * @param newConf configuration
-  public static void authorize(UserGroupInformation user, String remoteAddress,
-      Configuration conf) throws AuthorizationException {
+  public static synchronized void authorize(UserGroupInformation user, 
+      String remoteAddress, Configuration newConf) throws AuthorizationException {
+
+    if(conf == null) {
+      refreshSuperUserGroupsConfiguration(newConf); 
+    }
+    boolean ipAuthorized = false;
-    Collection<String> allowedUserGroups = conf
-        .getStringCollection(getProxySuperuserGroupConfKey(superUser
-            .getShortUserName()));
+    Collection<String> allowedUserGroups = proxyGroups.get(
+        getProxySuperuserGroupConfKey(superUser.getShortUserName()));
+    
-    Collection<String> ipList = conf
-        .getStringCollection(getProxySuperuserIpConfKey(superUser
-            .getShortUserName()));
+    Collection<String> ipList = proxyHosts.get(
+        getProxySuperuserIpConfKey(superUser.getShortUserName()));
+    
-          return;
+          ipAuthorized = true;
-    throw new AuthorizationException("Unauthorized connection for super-user: "
-        + superUser.getUserName() + " from IP " + remoteAddress);
+    if(!ipAuthorized) {
+      throw new AuthorizationException("Unauthorized connection for super-user: "
+          + superUser.getUserName() + " from IP " + remoteAddress);
+    }

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS29 INS83 INS83 INS83 INS39 INS42 MOV44 INS8 INS29 INS43 MOV44 INS29 INS43 MOV44 INS29 INS83 INS44 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS33 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS74 INS42 INS14 INS65 UPD42 INS21 INS21 INS21 INS60 INS60 INS70 INS21 INS21 INS70 INS65 INS65 INS65 INS42 INS65 INS65 INS65 INS42 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS25 INS60 INS25 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS74 INS66 INS7 INS32 INS32 INS43 INS59 INS74 INS59 INS44 INS32 INS8 INS7 INS7 INS44 INS32 INS8 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS27 INS8 INS39 INS59 INS38 INS8 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS43 INS43 MOV43 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS42 INS27 INS42 INS32 INS74 INS42 INS42 INS42 INS21 INS40 INS40 INS40 INS40 INS42 INS33 INS21 INS42 INS9 INS42 MOV53 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 MOV43 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS32 INS32 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS7 INS42 INS9 DEL45 DEL45 DEL45 DEL45 DEL41