MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import com.google.common.collect.Maps;
+  private static final int NO_XATTRS = -1;
+  private Map<String, byte[]> xAttrs;
+  
+  /**
+   * Returns all xAttrs.
+   * 
+   * @return Map<String, byte[]> containing all xAttrs
+   */
+  public Map<String, byte[]> getXAttrs() {
+    return xAttrs;
+  }
+  
+  /**
+   * Sets optional xAttrs.
+   * 
+   * @param xAttrs Map<String, byte[]> containing all xAttrs
+   */
+  public void setXAttrs(Map<String, byte[]> xAttrs) {
+    this.xAttrs = xAttrs;
+  }
+    
+    if (xAttrs != null) {
+      out.writeInt(xAttrs.size());
+      Iterator<Entry<String, byte[]>> iter = xAttrs.entrySet().iterator();
+      while (iter.hasNext()) {
+        Entry<String, byte[]> entry = iter.next();
+        WritableUtils.writeString(out, entry.getKey());
+        final byte[] value = entry.getValue();
+        if (value != null) {
+          out.writeInt(value.length);
+          if (value.length > 0) {
+            out.write(value);
+          }
+        } else {
+          out.writeInt(-1);
+        }
+      }
+    } else {
+      out.writeInt(NO_XATTRS);
+    }
+    
+    int xAttrsSize = in.readInt();
+    if (xAttrsSize != NO_XATTRS) {
+      xAttrs = Maps.newHashMap();
+      for (int i = 0; i < xAttrsSize; ++i) {
+        final String name = WritableUtils.readString(in);
+        final int valueLen = in.readInt();
+        byte[] value = null;
+        if (valueLen > -1) {
+          value = new byte[valueLen];
+          if (valueLen > 0) {
+            in.readFully(value);
+          }
+        }
+        xAttrs.put(name, value);
+      }
+    } else {
+      xAttrs = null;
+    }
-    return Objects.equal(aclEntries, other.aclEntries);
+    return Objects.equal(aclEntries, other.aclEntries) &&
+        Objects.equal(xAttrs, other.xAttrs);
-    return Objects.hashCode(super.hashCode(), aclEntries);
+    return Objects.hashCode(super.hashCode(), aclEntries, xAttrs);
+    sb.append(", xAttrs = " + xAttrs);

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS74 INS59 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS38 INS43 INS43 INS5 INS42 INS65 INS65 INS43 INS43 INS5 INS41 INS65 INS65 INS74 INS42 INS21 INS25 INS60 INS25 INS21 INS34 INS42 INS42 INS39 INS85 INS66 INS66 INS42 INS42 INS39 INS85 INS42 INS66 INS42 INS66 INS43 INS43 INS5 INS7 INS27 INS8 INS8 INS39 INS59 INS27 INS8 INS8 INS27 INS32 INS42 INS42 INS39 INS85 INS22 INS42 INS42 INS33 INS21 INS60 INS61 INS21 INS42 INS32 INS42 INS42 INS21 INS24 INS21 MOV32 INS32 INS42 INS42 INS42 INS27 INS52 INS42 INS32 INS74 INS59 INS32 INS8 INS32 INS42 INS42 INS7 INS58 INS27 INS38 INS8 INS7 INS42 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS21 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS21 INS42 INS33 INS42 INS42 INS42 INS43 INS43 INS5 INS32 INS42 INS74 INS59 INS32 INS83 INS5 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS34 INS83 INS43 INS59 INS83 INS39 INS59 INS5 INS59 INS27 INS8 INS32 INS42 INS42 INS39 INS85 INS42 INS42 INS43 INS43 INS5 INS42 INS32 INS42 INS42 INS42 INS32 INS39 INS85 INS42 INS32 INS42 INS33 INS21 INS25 INS21 INS42 INS42 INS32 INS42 INS32 INS39 INS85 INS42 INS33 INS42 INS38 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS7 INS27 INS8 INS42 INS42 INS40 INS40 INS34 INS21 INS42 INS42 INS38 INS42 INS3 INS42 INS34 INS21 INS32 INS34 INS5 INS42 INS32 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS42