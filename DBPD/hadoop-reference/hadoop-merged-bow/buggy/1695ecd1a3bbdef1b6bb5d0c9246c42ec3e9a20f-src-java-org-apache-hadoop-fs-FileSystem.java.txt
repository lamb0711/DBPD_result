HADOOP-6240. Add new FileContext rename operation that posix compliant that allows overwriting existing destination. Contributed by Suresh Srinivas.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816794 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.Options.Rename;
+   * @throws IOException on failure
+   * @return true if rename is successful
-    
+
+  /**
+   * Renames Path src to Path dst
+   * <ul>
+   * <li
+   * <li>Fails if src is a file and dst is a directory.
+   * <li>Fails if src is a directory and dst is a file.
+   * <li>Fails if the parent of dst does not exist or is a file.
+   * </ul>
+   * <p>
+   * If OVERWRITE option is not passed as an argument, rename fails
+   * if the dst already exists.
+   * <p>
+   * If OVERWRITE option is passed as an argument, rename overwrites
+   * the dst if it is a file or an empty directory. Rename fails if dst is
+   * a non-empty directory.
+   * <p>
+   * Note that atomicity of rename is dependent on the file system
+   * implementation. Please refer to the file system documentation for
+   * details. This default implementation is non atomic.
+   * <p>
+   * This method is deprecated since it is a temporary method added to 
+   * support the transition from FileSystem to FileContext for user 
+   * applications.
+   * 
+   * @param src path to be renamed
+   * @param dst new path after rename
+   * @throws IOException on failure
+   */
+  @Deprecated
+  protected void rename(final Path src, final Path dst,
+      final Rename... options) throws IOException {
+    // Default implementation
+    final FileStatus srcStatus = getFileStatus(src);
+    if (srcStatus == null) {
+      throw new FileNotFoundException("rename source " + src + " not found.");
+    }
+
+    boolean overwrite = false;
+    if (null != options) {
+      for (Rename option : options) {
+        if (option == Rename.OVERWRITE) {
+          overwrite = true;
+        }
+      }
+    }
+
+    FileStatus dstStatus;
+    try {
+      dstStatus = getFileStatus(dst);
+    } catch (IOException e) {
+      dstStatus = null;
+    }
+    if (dstStatus != null) {
+      if (srcStatus.isDir() != dstStatus.isDir()) {
+        throw new IOException("Source " + src + " Destination " + dst
+            + " both should be either file or directory");
+      }
+      if (!overwrite) {
+        throw new FileAlreadyExistsException("rename destination " + dst
+            + " already exists.");
+      }
+      // Delete the destination that is a file or an empty directory
+      if (dstStatus.isDir()) {
+        FileStatus[] list = listStatus(dst);
+        if (list != null && list.length != 0) {
+          throw new IOException(
+              "rename cannot overwrite non empty destination directory " + dst);
+        }
+      }
+      delete(dst, false);
+    } else {
+      final Path parent = dst.getParent();
+      final FileStatus parentStatus = getFileStatus(parent);
+      if (parentStatus == null) {
+        throw new FileNotFoundException("rename destination parent " + parent
+            + " not found.");
+      }
+      if (!parentStatus.isDir()) {
+        throw new ParentNotDirectoryException("rename destination parent " + parent
+            + " is a file.");
+      }
+    }
+    if (!rename(src, dst)) {
+      throw new IOException("rename from " + src + " to " + dst + " failed.");
+    }
+  }
+  

INS26 INS40 INS31 INS29 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS60 INS25 INS60 INS25 INS60 INS54 INS25 INS25 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS83 INS43 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS8 INS12 INS27 INS8 INS8 INS38 INS8 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS9 INS33 INS42 INS70 INS42 INS42 INS21 INS44 INS8 INS42 INS33 INS25 INS25 INS25 INS21 INS60 INS60 INS25 INS25 INS32 INS53 INS42 INS42 INS14 INS44 INS42 INS8 INS7 INS43 INS42 INS21 INS27 INS8 INS38 INS8 INS32 INS8 INS32 INS83 INS43 INS59 INS83 INS43 INS59 INS27 INS8 INS38 INS8 INS42 INS42 INS42 INS14 INS43 INS27 INS43 INS42 INS25 INS42 INS32 INS42 INS7 INS32 INS32 INS53 INS42 INS53 INS42 INS42 INS60 INS25 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS32 INS53 INS43 INS27 INS42 INS45 INS42 INS45 INS42 INS27 INS8 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS42 INS14 INS14 INS5 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS40 INS21 INS43 INS27 INS43 INS27 INS43 INS85 INS42 INS32 INS27 INS27 INS53 INS43 INS27 INS43 INS27 INS7 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS33 INS40 INS34 INS14 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS9 INS43 INS27 INS42 INS45 INS42