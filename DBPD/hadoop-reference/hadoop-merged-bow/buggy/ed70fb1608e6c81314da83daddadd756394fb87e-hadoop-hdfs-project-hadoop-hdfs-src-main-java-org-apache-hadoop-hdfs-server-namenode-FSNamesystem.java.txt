HDFS-4860. Add additional attributes to JMX beans. Contributed by Trevor Lorimer

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1500139 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.hdfs.server.namenode.JournalSet.JournalAndStream;
+import org.apache.hadoop.util.StringUtils;
+  public int getNumDecomLiveDataNodes() {
+    final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
+    getBlockManager().getDatanodeManager().fetchDatanodes(live, null, true);
+    int liveDecommissioned = 0;
+    for (DatanodeDescriptor node : live) {
+      liveDecommissioned += node.isDecommissioned() ? 1 : 0;
+    }
+    return liveDecommissioned;
+  }
+
+  @Override // FSNamesystemMBean
+  public int getNumDecomDeadDataNodes() {
+    final List<DatanodeDescriptor> dead = new ArrayList<DatanodeDescriptor>();
+    getBlockManager().getDatanodeManager().fetchDatanodes(dead, null, true);
+    int deadDecommissioned = 0;
+    for (DatanodeDescriptor node : dead) {
+      deadDecommissioned += node.isDecommissioned() ? 1 : 0;
+    }
+    return deadDecommissioned;
+  }
+
+  @Override // FSNamesystemMBean
+  @Override // NameNodeMXBean
+  public String getNodeUsage() {
+    float median = 0;
+    float max = 0;
+    float min = 0;
+    float dev = 0;
+
+    final Map<String, Map<String,Object>> info =
+        new HashMap<String, Map<String,Object>>();
+    final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>();
+    blockManager.getDatanodeManager().fetchDatanodes(live, null, true);
+
+    if (live.size() > 0) {
+      float totalDfsUsed = 0;
+      float[] usages = new float[live.size()];
+      int i = 0;
+      for (DatanodeDescriptor dn : live) {
+        usages[i++] = dn.getDfsUsedPercent();
+        totalDfsUsed += dn.getDfsUsedPercent();
+      }
+      totalDfsUsed /= live.size();
+      Arrays.sort(usages);
+      median = usages[usages.length / 2];
+      max = usages[usages.length - 1];
+      min = usages[0];
+
+      for (i = 0; i < usages.length; i++) {
+        dev += (usages[i] - totalDfsUsed) * (usages[i] - totalDfsUsed);
+      }
+      dev = (float) Math.sqrt(dev / usages.length);
+    }
+
+    final Map<String, Object> innerInfo = new HashMap<String, Object>();
+    innerInfo.put("min", StringUtils.format("%.2f%%", min));
+    innerInfo.put("median", StringUtils.format("%.2f%%", median));
+    innerInfo.put("max", StringUtils.format("%.2f%%", max));
+    innerInfo.put("stdDev", StringUtils.format("%.2f%%", dev));
+    info.put("nodeUsage", innerInfo);
+
+    return JSON.toString(info);
+  }
+
+  @Override  // NameNodeMXBean
+  public String getNameJournalStatus() {
+    List<Map<String, String>> jasList = new ArrayList<Map<String, String>>();
+    FSEditLog log = getFSImage().getEditLog();
+    if (log != null) {
+      boolean openForWrite = log.isOpenForWrite();
+      for (JournalAndStream jas : log.getJournals()) {
+        final Map<String, String> jasMap = new HashMap<String, String>();
+        String manager = jas.getManager().toString();
+
+        jasMap.put("required", String.valueOf(jas.isRequired()));
+        jasMap.put("disabled", String.valueOf(jas.isDisabled()));
+        jasMap.put("manager", manager);
+
+        if (jas.isDisabled()) {
+          jasMap.put("stream", "Failed");
+        } else if (openForWrite) {
+          EditLogOutputStream elos = jas.getCurrentStream();
+          if (elos != null) {
+            jasMap.put("stream", elos.generateHtmlReport());
+          } else {
+            jasMap.put("stream", "not currently writing");
+          }
+        } else {
+          jasMap.put("stream", "open for read");
+        }
+        jasList.add(jasMap);
+      }
+    }
+    return JSON.toString(jasList);
+  }
+
+  @Override  // NameNodeMXBean
+  public String getNNStarted() {
+    return getStartTime().toString();
+  }
+
+  @Override  // NameNodeMXBean
+  public String getCompileInfo() {
+    return VersionInfo.getDate() + " by " + VersionInfo.getUser() +
+        " from " + VersionInfo.getBranch();
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS60 INS21 INS60 INS70 INS41 INS42 INS60 INS21 INS60 INS70 INS41 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS25 INS60 INS21 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS83 INS74 INS59 INS32 INS39 INS59 INS44 INS42 INS8 INS42 INS83 INS74 INS59 INS32 INS39 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS32 INS27 INS8 INS83 INS74 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS74 INS59 INS43 INS59 INS27 INS8 INS32 INS32 INS27 INS43 INS43 INS42 INS14 INS32 INS42 INS42 INS33 INS9 INS42 INS34 INS43 INS42 INS21 INS43 INS43 INS42 INS14 INS32 INS42 INS42 INS33 INS9 INS42 INS34 INS43 INS42 INS21 INS42 INS34 INS42 INS34 INS42 INS34 INS42 INS34 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS42 INS14 INS32 INS42 INS42 INS33 INS9 INS32 INS34 INS60 INS60 INS60 INS70 INS21 INS21 INS21 INS21 INS21 INS24 INS21 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS60 INS70 INS42 INS42 INS42 INS32 INS42 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS7 INS42 INS42 INS74 INS32 INS42 INS42 INS7 INS42 INS42 INS43 INS43 INS43 INS74 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS39 INS59 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS7 INS32 INS7 INS7 INS7 INS7 INS27 INS37 INS8 INS7 INS42 INS42 INS42 INS74 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS43 INS43 INS74 INS32 INS42 INS39 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS16 INS43 INS43 INS42 INS42 INS16 INS42 INS42 INS42 INS43 INS43 INS74 INS43 INS43 INS42 INS34 INS39 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS2 INS42 INS2 INS42 INS2 INS42 INS34 INS42 INS40 INS42 INS21 INS42 INS11 INS43 INS43 INS43 INS42 INS42 INS42 INS43 INS74 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS25 INS21 INS42 INS42 INS32 INS34 INS34 INS42 INS42 INS32 INS34 INS34 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS5 INS32 INS42 INS7 INS7 INS42 INS42 INS42 INS27 INS42 INS27 INS42 INS34 INS7 INS39 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS83 INS74 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS8 INS25 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS42 INS2 INS32 INS42 INS32 INS40 INS34 INS40 INS34 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS21 INS42 INS8 INS8 INS42 INS42 INS42 INS42 INS37 INS42 INS42 INS42 INS42 INS36 INS36 INS42 INS40 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS60 INS25 INS21 INS42 INS27 INS27 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS43 INS59 INS27 INS8 INS8 INS32 INS2 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS45 INS42 INS42