HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.

+import com.google.common.annotations.VisibleForTesting;
+import java.io.InterruptedIOException;
-import java.util.LinkedList;
+import java.util.Iterator;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.atomic.AtomicLong;
-  static final Logger LOG = LoggerFactory.getLogger(AsyncCallHandler.class);
+  public static final Logger LOG = LoggerFactory.getLogger(
+      AsyncCallHandler.class);
-    private final Queue<T> queue = new LinkedList<>();
-    private long emptyStartTime = Time.monotonicNow();
+    private final Queue<T> queue = new ConcurrentLinkedQueue<>();
+    private final AtomicLong emptyStartTime
+        = new AtomicLong(Time.monotonicNow());
-    synchronized int size() {
-      return queue.size();
+    Iterator<T> iterator() {
+      return queue.iterator();
-    synchronized boolean isEmpty(long time) {
-      return queue.isEmpty() && Time.monotonicNow() - emptyStartTime > time;
+    boolean isEmpty(long time) {
+      return Time.monotonicNow() - emptyStartTime.get() > time
+          && queue.isEmpty();
-    synchronized void offer(T c) {
+    void offer(T c) {
-    synchronized T poll() {
-      Preconditions.checkState(!queue.isEmpty());
-      final T t = queue.poll();
+    void checkEmpty() {
-        emptyStartTime = Time.monotonicNow();
+        emptyStartTime.set(Time.monotonicNow());
-      return t;
-  static class AsyncCallQueue {
+  class AsyncCallQueue {
-    void checkCalls() {
-      final int size = queue.size();
-      for (int i = 0; i < size; i++) {
-        final AsyncCall c = queue.poll();
-        if (!c.isDone()) {
-          queue.offer(c); // the call is not done yet, add it back.
+    long checkCalls() {
+      final long startTime = Time.monotonicNow();
+      long minWaitTime = Processor.MAX_WAIT_PERIOD;
+
+      for (final Iterator<AsyncCall> i = queue.iterator(); i.hasNext();) {
+        final AsyncCall c = i.next();
+        if (c.isDone()) {
+          i.remove(); // the call is done, remove it from the queue.
+          queue.checkEmpty();
+        } else {
+          final Long waitTime = c.getWaitTime(startTime);
+          if (waitTime != null && waitTime > 0 && waitTime < minWaitTime) {
+            minWaitTime = waitTime;
+          }
+      return minWaitTime;
-      static final long GRACE_PERIOD = 10*1000L;
-      static final long SLEEP_PERIOD = 100L;
+      static final long GRACE_PERIOD = 3*1000L;
+      static final long MAX_WAIT_PERIOD = 100L;
+                final long waitTime = checkCalls();
+                tryStop(this);
+
-                  Thread.sleep(SLEEP_PERIOD);
+                  synchronized (AsyncCallHandler.this) {
+                    AsyncCallHandler.this.wait(waitTime);
+                  }
-                  return;
-
-                checkCalls();
-                tryStop(this);
-              RetryInvocationHandler.Counters counters,
-      super(method, args, isRpc, callId, counters, retryInvocationHandler);
+      super(method, args, isRpc, callId, retryInvocationHandler);
+      LOG.debug("#{}: {}", getCallId(), r.getState());
+        case WAIT_RETRY:
+    CallReturn processWaitTimeAndRetryInfo() {
+      final Long waitTime = getWaitTime(Time.monotonicNow());
+      LOG.trace("#{} processRetryInfo: waitTime={}", getCallId(), waitTime);
+      if (waitTime != null && waitTime > 0) {
+        return CallReturn.WAIT_RETRY;
+      }
+      processRetryInfo();
+      return CallReturn.RETRY;
+    }
+
+    @Override
-        LOG.trace("invoke: lowerLayerAsyncGet.isDone()? {}", isDone);
+        LOG.trace("#{} invoke: lowerLayerAsyncGet.isDone()? {}",
+            getCallId(), isDone);
-      LOG.trace("invoke: ASYNC_INVOKED");
+      LOG.trace("#{} invoke: ASYNC_INVOKED", getCallId());
-        if (counters.isZeros()) {
+        if (getCounters().isZeros()) {
-          LOG.trace("invoke: initAsyncCall");
+          LOG.trace("#{} invoke: initAsyncCall", getCallId());
-                         int callId, RetryInvocationHandler.Counters counters,
+                         int callId,
-    return new AsyncCall(method, args, isRpc, callId, counters,
+    return new AsyncCall(method, args, isRpc, callId,
+
+  @VisibleForTesting
+  public static long getGracePeriod() {
+    return AsyncCallQueue.Processor.GRACE_PERIOD;
+  }

INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS40 INS31 INS83 INS31 MOV43 INS78 INS83 INS83 INS39 INS42 INS8 INS83 INS43 INS74 INS42 INS39 UPD42 INS8 UPD39 INS78 INS43 INS42 INS8 INS42 INS41 INS42 INS14 INS43 MOV43 INS25 INS60 INS24 INS41 INS21 INS42 INS42 INS60 INS21 INS25 INS21 INS41 INS40 UPD74 INS43 MOV32 INS42 MOV32 MOV32 INS8 UPD39 INS39 INS59 INS58 INS32 MOV8 INS42 UPD42 INS32 INS49 INS83 INS43 INS59 INS32 INS27 INS8 INS32 INS40 MOV43 UPD43 INS42 UPD42 MOV21 UPD42 MOV32 UPD42 MOV42 INS40 INS83 INS74 INS59 INS42 INS42 UPD34 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS27 INS27 INS41 INS42 UPD45 INS32 UPD42 INS43 INS43 INS42 INS32 MOV32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS34 INS40 INS42 INS32 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS21 INS60 INS25 INS42 INS42 UPD45 INS32 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 INS83 INS43 INS59 INS27 INS8 INS42 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS42 INS32 INS27 INS27 INS21 UPD45 INS32 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS7 INS42 INS42 INS33 INS42 INS34 INS42 INS42 MOV54 INS60 INS83 INS39 INS59 INS8 INS42 MOV32 INS51 INS52 INS8 INS42 MOV21 INS52 UPD42 UPD42 INS42 DEL39 DEL83 DEL39 DEL42 DEL83 DEL42 DEL83 DEL83 DEL38 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL83 DEL42 DEL42 DEL32 DEL38 DEL42 DEL39 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL24 DEL21 DEL42 DEL8 DEL41 DEL40 DEL43 DEL42 DEL44 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42