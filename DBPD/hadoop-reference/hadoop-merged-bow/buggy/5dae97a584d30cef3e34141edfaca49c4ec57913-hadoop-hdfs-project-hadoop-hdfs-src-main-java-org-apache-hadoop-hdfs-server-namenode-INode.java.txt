HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)

+import org.apache.hadoop.hdfs.protocol.HdfsConstants;
-   * 
+   *
+   * @param bsps
+   *          block storage policy suite to calculate intended storage type usage
-  public abstract Quota.Counts cleanSubtree(final int snapshotId,
+  public abstract QuotaCounts cleanSubtree(final BlockStoragePolicySuite bsps,
+      final int snapshotId,
-   * 
+   *
+   * @param bsps
+   *          block storage policy suite to calculate intended storage type usage
+   *          This is needed because INodeReference#destroyAndCollectBlocks() needs
+   *          to call INode#cleanSubtree(), which calls INode#computeQuotaUsage().
+      BlockStoragePolicySuite bsps,
-    final Quota.Counts q = getQuotaCounts();
+    final QuotaCounts q = getQuotaCounts();
-        counts.get(Content.DIRECTORY), q.get(Quota.NAMESPACE),
-        counts.get(Content.DISKSPACE), q.get(Quota.DISKSPACE));
+        counts.get(Content.DIRECTORY), q.getNameSpace(),
+        counts.get(Content.DISKSPACE), q.getDiskSpace());
+    // TODO: storage type quota reporting HDFS-7701.
-  
+
-   * Check and add namespace/diskspace consumed to itself and the ancestors.
+   * Check and add namespace/diskspace/storagetype consumed to itself and the ancestors.
-  public void addSpaceConsumed(long nsDelta, long dsDelta, boolean verify) 
-      throws QuotaExceededException {
-    addSpaceConsumed2Parent(nsDelta, dsDelta, verify);
+  public void addSpaceConsumed(QuotaCounts counts, boolean verify)
+    throws QuotaExceededException {
+    addSpaceConsumed2Parent(counts, verify);
-   * Check and add namespace/diskspace consumed to itself and the ancestors.
+   * Check and add namespace/diskspace/storagetype consumed to itself and the ancestors.
-  void addSpaceConsumed2Parent(long nsDelta, long dsDelta, boolean verify) 
-      throws QuotaExceededException {
+  void addSpaceConsumed2Parent(QuotaCounts counts, boolean verify)
+    throws QuotaExceededException {
-      parent.addSpaceConsumed(nsDelta, dsDelta, verify);
+      parent.addSpaceConsumed(counts, verify);
-  public Quota.Counts getQuotaCounts() {
-    return Quota.Counts.newInstance(-1, -1);
+  public QuotaCounts getQuotaCounts() {
+    return new QuotaCounts.Builder().
+        nameCount(HdfsConstants.QUOTA_RESET).
+        spaceCount(HdfsConstants.QUOTA_RESET).
+        typeCounts(HdfsConstants.QUOTA_RESET).
+        build();
-  
+
-    final Quota.Counts q = getQuotaCounts();
-    return q.get(Quota.NAMESPACE) >= 0 || q.get(Quota.DISKSPACE) >= 0;
+    final QuotaCounts qc = getQuotaCounts();
+    return qc.anyNsSpCountGreaterOrEqual(0) || qc.anyTypeCountGreaterOrEqual(0);
-  
+
-  public final Quota.Counts computeQuotaUsage() {
-    return computeQuotaUsage(new Quota.Counts(), true);
+  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps) {
+    return computeQuotaUsage(bsps, new QuotaCounts.Builder().build(), true);
-   * 
+   *
+   * @param bsps Block storage policy suite to calculate intended storage type usage
-  public abstract Quota.Counts computeQuotaUsage(Quota.Counts counts,
-      boolean useCache, int lastSnapshotId);
+  public abstract QuotaCounts computeQuotaUsage(
+    BlockStoragePolicySuite bsps,
+    QuotaCounts counts, boolean useCache, int lastSnapshotId);
-  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,
-      boolean useCache) {
-    return computeQuotaUsage(counts, useCache, Snapshot.CURRENT_STATE_ID);
+  public final QuotaCounts computeQuotaUsage(
+    BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache) {
+    return computeQuotaUsage(bsps, counts, useCache, Snapshot.CURRENT_STATE_ID);
-  
+

INS26 INS40 UPD43 INS44 INS44 MOV29 MOV29 UPD43 UPD43 INS44 UPD43 INS44 UPD43 INS44 INS65 INS42 INS83 INS43 INS42 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS65 INS42 INS43 INS42 UPD43 INS42 INS43 INS42 UPD43 INS42 INS66 INS42 INS42 INS66 INS66 INS66 INS42 UPD43 UPD66 INS42 UPD66 INS42 INS32 UPD43 INS42 INS42 INS66 INS42 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 UPD42 INS32 INS32 INS42 INS32 INS42 UPD42 UPD42 INS32 INS42 INS40 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 MOV42 INS34 MOV14 INS42 UPD42 INS32 INS42 INS40 UPD43 INS14 UPD42 MOV42 INS40 UPD40 INS43 INS40 DEL40 DEL40 DEL40 DEL40 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL40 DEL40 DEL34 DEL38 DEL34 DEL38 DEL32 DEL40 DEL40 DEL32 DEL34 DEL27 DEL40 DEL32 DEL34 DEL27 DEL40 DEL40 DEL40 DEL40 DEL40