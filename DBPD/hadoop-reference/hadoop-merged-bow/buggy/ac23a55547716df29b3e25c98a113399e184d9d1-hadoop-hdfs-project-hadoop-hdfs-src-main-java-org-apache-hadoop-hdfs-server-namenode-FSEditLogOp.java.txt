Merge HDFS-2006 HDFS XAttrs branch to Trunk


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_SET_XATTR;
+import static org.apache.hadoop.hdfs.server.namenode.FSEditLogOpCodes.OP_REMOVE_XATTR;
+import org.apache.hadoop.fs.XAttrCodec;
+import org.apache.hadoop.fs.XAttr;
+import org.apache.hadoop.hdfs.protocol.proto.XAttrProtos.XAttrEditLogProto;
+      inst.put(OP_SET_XATTR, new SetXAttrOp());
+      inst.put(OP_REMOVE_XATTR, new RemoveXAttrOp());
+  
+  static class RemoveXAttrOp extends FSEditLogOp {
+    XAttr xAttr;
+    String src;
+    
+    private RemoveXAttrOp() {
+      super(OP_REMOVE_XATTR);
+    }
+    
+    static RemoveXAttrOp getInstance() {
+      return new RemoveXAttrOp();
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      XAttrEditLogProto p = XAttrEditLogProto.parseDelimitedFrom(in);
+      src = p.getSrc();
+      xAttr = PBHelper.convertXAttr(p.getXAttr());
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      XAttrEditLogProto.Builder b = XAttrEditLogProto.newBuilder();
+      if (src != null) {
+        b.setSrc(src);
+      }
+      b.setXAttr(PBHelper.convertXAttrProto(xAttr));
+      b.build().writeDelimitedTo(out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "SRC", src);
+      appendXAttrToXml(contentHandler, xAttr);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      src = st.getValue("SRC");
+      xAttr = readXAttrFromXml(st);
+    }
+  }
+  
+  static class SetXAttrOp extends FSEditLogOp {
+    XAttr xAttr;
+    String src;
+    
+    private SetXAttrOp() {
+      super(OP_SET_XATTR);
+    }
+    
+    static SetXAttrOp getInstance() {
+      return new SetXAttrOp();
+    }
+
+    @Override
+    void readFields(DataInputStream in, int logVersion) throws IOException {
+      XAttrEditLogProto p = XAttrEditLogProto.parseDelimitedFrom(in);
+      src = p.getSrc();
+      xAttr = PBHelper.convertXAttr(p.getXAttr());
+      readRpcIds(in, logVersion);
+    }
+
+    @Override
+    public void writeFields(DataOutputStream out) throws IOException {
+      XAttrEditLogProto.Builder b = XAttrEditLogProto.newBuilder();
+      if (src != null) {
+        b.setSrc(src);
+      }
+      b.setXAttr(PBHelper.convertXAttrProto(xAttr));
+      b.build().writeDelimitedTo(out);
+      // clientId and callId
+      writeRpcIds(rpcClientId, rpcCallId, out);
+    }
+
+    @Override
+    protected void toXml(ContentHandler contentHandler) throws SAXException {
+      XMLUtils.addSaxString(contentHandler, "SRC", src);
+      appendXAttrToXml(contentHandler, xAttr);
+      appendRpcIdsToXml(contentHandler, rpcClientId, rpcCallId);
+    }
+
+    @Override
+    void fromXml(Stanza st) throws InvalidXmlException {
+      src = st.getValue("SRC");
+      xAttr = readXAttrFromXml(st);
+      readRpcIdsFromXml(st);
+    }
+  }
+  
+  private static void appendXAttrToXml(ContentHandler contentHandler,
+      XAttr xAttr) throws SAXException {
+    contentHandler.startElement("", "", "XATTR", new AttributesImpl());
+    XMLUtils.addSaxString(contentHandler, "NAMESPACE", 
+        xAttr.getNameSpace().toString());
+    XMLUtils.addSaxString(contentHandler, "NAME", xAttr.getName());
+    if (xAttr.getValue() != null) {
+      try {
+        XMLUtils.addSaxString(contentHandler, "VALUE", 
+            XAttrCodec.encodeValue(xAttr.getValue(), XAttrCodec.HEX));
+      } catch (IOException e) {
+        throw new SAXException(e);
+      }
+    }
+    contentHandler.endElement("", "", "XATTR");
+  }
+  
+  private static XAttr readXAttrFromXml(Stanza st) 
+      throws InvalidXmlException {
+    if (!st.hasChildren("XATTR")) {
+      return null;
+    }
+    
+    Stanza a = st.getChildren("XATTR").get(0);
+    XAttr.Builder builder = new XAttr.Builder();
+    builder.setNameSpace(XAttr.NameSpace.valueOf(a.getValue("NAMESPACE"))).
+        setName(a.getValue("NAME"));
+    String v = a.getValueOrNull("VALUE");
+    if (v != null) {
+      try {
+        builder.setValue(XAttrCodec.decodeValue(v));
+      } catch (IOException e) {
+        throw new InvalidXmlException(e.toString());
+      }
+    }
+    return builder.build();
+  }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS55 INS55 INS31 INS31 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS43 INS59 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS42 INS43 INS59 INS43 INS59 INS83 INS42 INS8 INS83 INS43 INS42 INS8 INS78 INS39 INS42 INS44 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS39 INS42 INS44 INS43 INS8 INS43 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS25 INS21 INS42 INS43 INS42 INS42 INS25 INS60 INS60 INS21 INS60 INS25 INS41 INS21 INS21 INS42 INS42 INS42 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS46 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS42 INS60 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS42 INS43 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS32 INS32 INS32 INS27 INS8 INS32 INS42 INS38 INS8 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS42 INS14 INS42 INS43 INS59 INS7 INS7 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS32 INS32 INS42 INS7 INS7 INS42 INS14 INS42 INS43 INS59 INS7 INS7 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS7 INS7 INS32 INS42 INS42 INS45 INS45 INS45 INS14 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS32 INS33 INS54 INS42 INS42 INS45 INS45 INS45 INS32 INS41 INS42 INS42 INS32 INS40 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS40 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS45 INS33 INS32 INS42 INS34 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS45 INS8 INS12 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS45 INS40 INS40 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS53 INS42 INS42 INS45 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS45 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS40 INS43 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42