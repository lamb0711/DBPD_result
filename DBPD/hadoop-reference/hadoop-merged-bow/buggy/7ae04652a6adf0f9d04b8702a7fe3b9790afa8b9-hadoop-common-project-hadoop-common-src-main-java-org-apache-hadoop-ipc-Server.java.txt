    HADOOP-7557 Make IPC header be extensible (sanjay radia)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295261 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.DataOutput;
+import org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos.IpcConnectionContextProto;
+import org.apache.hadoop.util.ProtoUtil;
+   * Serialization type for ConnectionContext and RpcPayloadHeader
+   */
+  public enum IpcSerializationType {
+    // Add new serialization type to the end without affecting the enum order
+    PROTOBUF;
+    
+    void write(DataOutput out) throws IOException {
+      out.writeByte(this.ordinal());
+    }
+    
+    static IpcSerializationType fromByte(byte b) {
+      return IpcSerializationType.values()[b];
+    }
+  }
+  
+  /**
-  public static final byte CURRENT_VERSION = 6;
+  // 7 : Changed Ipc Connection Header to use Protocol buffers
+  public static final byte CURRENT_VERSION = 7;
-    private boolean rpcHeaderRead = false; // if initial rpc header is read
-    private boolean headerRead = false;  //if the connection header that
-                                         //follows version is read.
+    private boolean connectionHeaderRead = false; // connection  header is read?
+    private boolean connectionContextRead = false; //if connection context that
+                                            //follows connection header is read
-    ConnectionHeader header = new ConnectionHeader();
+    IpcConnectionContextProto connectionContext;
-    private ByteBuffer rpcHeaderBuffer;
+    private ByteBuffer connectionHeaderBuf = null;
-        if (!rpcHeaderRead) {
+        if (!connectionHeaderRead) {
-          if (rpcHeaderBuffer == null) {
-            rpcHeaderBuffer = ByteBuffer.allocate(2);
+          if (connectionHeaderBuf == null) {
+            connectionHeaderBuf = ByteBuffer.allocate(3);
-          count = channelRead(channel, rpcHeaderBuffer);
-          if (count < 0 || rpcHeaderBuffer.remaining() > 0) {
+          count = channelRead(channel, connectionHeaderBuf);
+          if (count < 0 || connectionHeaderBuf.remaining() > 0) {
-          int version = rpcHeaderBuffer.get(0);
-          byte[] method = new byte[] {rpcHeaderBuffer.get(1)};
+          int version = connectionHeaderBuf.get(0);
+          byte[] method = new byte[] {connectionHeaderBuf.get(1)};
+          
+          IpcSerializationType serializationType = IpcSerializationType
+              .fromByte(connectionHeaderBuf.get(2));
+          if (serializationType != IpcSerializationType.PROTOBUF) {
+            respondUnsupportedSerialization(serializationType);
+            return -1;
+          }
+          
-          rpcHeaderBuffer = null;
-          rpcHeaderRead = true;
+          connectionHeaderBuf = null;
+          connectionHeaderRead = true;
-          boolean isHeaderRead = headerRead;
+          boolean isHeaderRead = connectionContextRead;
+    private void respondUnsupportedSerialization(IpcSerializationType st) throws IOException {
+      String errMsg = "Server IPC version " + CURRENT_VERSION
+          + " do not support serilization " + st.toString();
+      ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+
+      Call fakeCall = new Call(-1, null, this);
+      setupResponse(buffer, fakeCall, Status.FATAL, null,
+          IpcException.class.getName(), errMsg);
+      responder.doRespond(fakeCall);
+    }
+    
-    /// Reads the connection header following version
-    private void processHeader(byte[] buf) throws IOException {
+    /** Reads the connection context following the connection header */
+    private void processConnectionContext(byte[] buf) throws IOException {
-      header.readFields(in);
-      protocolName = header.getProtocol();
+      connectionContext = IpcConnectionContextProto.parseFrom(in);
+      protocolName = connectionContext.hasProtocol() ? connectionContext
+          .getProtocol() : null;
-      
-      UserGroupInformation protocolUser = header.getUgi();
+      UserGroupInformation protocolUser = ProtoUtil.getUgi(connectionContext);
-      if (headerRead) {
+      if (connectionContextRead) {
-        processHeader(buf);
-        headerRead = true;
+        processConnectionContext(buf);
+        connectionContextRead = true;
-              + " for protocol " + header.getProtocol()
-              + " is unauthorized for user " + user);
+              + " for protocol " + connectionContext.getProtocol()
+              + " is unauthorized for user " + user);      
-        authorize(user, header, getHostInetAddress());
+        authorize(user, protocolName, getHostInetAddress());
-          LOG.debug("Successfully authorized " + header);
+          LOG.debug("Successfully authorized " + connectionContext);
-
-          if (LOG.isDebugEnabled())
+          if (LOG.isDebugEnabled()) {
-          
+          }
-   * @param connection incoming connection
+   * @param protocolName - the protocol
-  public void authorize(UserGroupInformation user, 
-                        ConnectionHeader connection,
-                        InetAddress addr
-                        ) throws AuthorizationException {
+  private void authorize(UserGroupInformation user, String protocolName,
+      InetAddress addr) throws AuthorizationException {
+      if (protocolName == null) {
+        throw new AuthorizationException("Null protocol not authorized");
+      }
-        protocol = getProtocolClass(connection.getProtocol(), getConf());
+        protocol = getProtocolClass(protocolName, getConf());
-                                         connection.getProtocol());
+                                         protocolName);

INS26 INS26 INS26 INS40 INS40 INS40 INS71 INS29 INS83 INS42 INS72 INS31 INS31 INS31 UPD83 INS65 INS42 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS8 UPD34 UPD43 INS83 INS39 INS42 INS44 INS43 INS8 INS29 UPD42 UPD43 UPD42 INS66 INS43 INS42 INS42 INS21 INS42 INS39 INS42 INS41 UPD42 UPD42 UPD42 INS42 UPD42 INS33 INS43 INS42 INS42 INS60 INS60 INS60 INS21 INS21 INS65 UPD42 UPD66 UPD42 INS42 INS32 INS2 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS66 INS7 UPD42 INS25 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS16 INS27 INS8 INS52 INS42 INS42 INS42 INS45 INS42 INS45 INS32 INS43 INS43 INS38 INS33 INS52 INS57 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS32 INS33 UPD42 INS42 INS42 INS33 INS53 UPD42 INS60 INS25 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 INS14 MOV5 INS43 INS59 INS27 INS8 INS42 INS8 MOV43 INS45 UPD42 INS42 INS42 INS32 INS42 INS40 INS21 INS41 UPD42 UPD42 UPD42 MOV21 UPD42 MOV42 INS43 UPD42 UPD42 MOV5 INS42 INS42 INS32 INS32 INS38 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS34 INS42 INS42 INS34 UPD42 UPD34 UPD42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32