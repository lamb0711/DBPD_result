HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) 


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import org.apache.hadoop.ipc.RPC.RpcInvoker;
+  
+  static class RpcKindMapValue {
+    final Class<? extends Writable> rpcRequestWrapperClass;
+    final RpcInvoker rpcInvoker;
+    RpcKindMapValue (Class<? extends Writable> rpcRequestWrapperClass,
+          RpcInvoker rpcInvoker) {
+      this.rpcInvoker = rpcInvoker;
+      this.rpcRequestWrapperClass = rpcRequestWrapperClass;
+    }   
+  }
+  static Map<RpcKind, RpcKindMapValue> rpcKindMap = new
+      HashMap<RpcKind, RpcKindMapValue>(4);
+  
+  
+
+  /**
+   * Register a RPC kind and the class to deserialize the rpc request.
+   * 
+   * Called by static initializers of rpcKind Engines
+   * @param rpcKind
+   * @param rpcRequestWrapperClass - this class is used to deserialze the
+   *  the rpc request.
+   *  @param rpcInvoker - use to process the calls on SS.
+   */
+  
+  public static void registerProtocolEngine(RpcKind rpcKind, 
+          Class<? extends Writable> rpcRequestWrapperClass,
+          RpcInvoker rpcInvoker) {
+    RpcKindMapValue  old = 
+        rpcKindMap.put(rpcKind, new RpcKindMapValue(rpcRequestWrapperClass, rpcInvoker));
+    if (old != null) {
+      rpcKindMap.put(rpcKind, old);
+      throw new IllegalArgumentException("ReRegistration of rpcKind: " +
+          rpcKind);      
+    }
+    LOG.info("rpcKind=" + rpcKind + 
+        ", rpcRequestWrapperClass=" + rpcRequestWrapperClass + 
+        ", rpcInvoker=" + rpcInvoker);
+  }
+  
+  public Class<? extends Writable> getRpcRequestWrapper(
+      RpcKind rpcKind) {
+    if (rpcRequestClass != null)
+       return rpcRequestClass;
+    RpcKindMapValue val = rpcKindMap.get(rpcKind);
+    return (val == null) ? null : val.rpcRequestWrapperClass; 
+  }
+  
+  public static RpcInvoker  getRpcInvoker(RpcKind rpcKind) {
+    RpcKindMapValue val = rpcKindMap.get(rpcKind);
+    return (val == null) ? null : val.rpcInvoker; 
+  }
+  
-  private Class<? extends Writable> paramClass;   // class of call parameters
+  private Class<? extends Writable> rpcRequestClass;   // class used for deserializing the rpc request
+      // If we know the rpc kind, get its class so that we can deserialize
+      // (Note it would make more sense to have the handler deserialize but 
+      // we continue with this original design.
+      Class<? extends Writable> rpcRequestClass = 
+          getRpcRequestWrapper(header.getkind());
+      if (rpcRequestClass == null) {
+        LOG.warn("Unknown rpc kind "  + header.getkind() + 
+            " from client " + getHostAddress());
+        final Call readParamsFailedCall = 
+            new Call(header.getCallId(), null, this);
+        ByteArrayOutputStream responseBuffer = new ByteArrayOutputStream();
+
+        setupResponse(responseBuffer, readParamsFailedCall, Status.FATAL, null,
+            IOException.class.getName(),
+            "Unknown rpc kind "  + header.getkind());
+        responder.doRespond(readParamsFailedCall);
+        return;   
+      }
-        rpcRequest = ReflectionUtils.newInstance(paramClass, conf);
+        rpcRequest = ReflectionUtils.newInstance(rpcRequestClass, conf);
-              value = call(call.connection.protocolName, call.rpcRequest, 
+              value = call(call.rpcKind, call.connection.protocolName, call.rpcRequest, 
-                       return call(call.connection.protocolName, 
+                       return call(call.rpcKind, call.connection.protocolName, 
-    this(bindAddress, port, paramClass, handlerCount, -1, -1, conf, Integer.toString(port), null);
+    this(bindAddress, port, paramClass, handlerCount, -1, -1, conf, Integer
+        .toString(port), null);
-  /** Constructs a server listening on the named port and address.  Parameters passed must
+  /** 
+   * Constructs a server listening on the named port and address.  Parameters passed must
+   * 
+   * If rpcRequestClass is null then the rpcRequestClass must have been 
+   * registered via {@link #registerProtocolEngine(RpcPayloadHeader.RpcKind,
+   *  Class, RPC.RpcInvoker)}
+   * This parameter has been retained for compatibility with existing tests
+   * and usage.
-  protected Server(String bindAddress, int port, 
-                  Class<? extends Writable> paramClass, int handlerCount, int numReaders, int queueSizePerHandler,
-                  Configuration conf, String serverName, SecretManager<? extends TokenIdentifier> secretManager) 
+  protected Server(String bindAddress, int port,
+      Class<? extends Writable> rpcRequestClass, int handlerCount,
+      int numReaders, int queueSizePerHandler, Configuration conf,
+      String serverName, SecretManager<? extends TokenIdentifier> secretManager)
-    this.paramClass = paramClass;
+    this.rpcRequestClass = rpcRequestClass; 
-   * @deprecated Use {@link #call(String, Writable, long)} instead
+   * @deprecated Use  {@link #call(RpcPayloadHeader.RpcKind, String,
+   *  Writable, long)} instead
-    return call(null, param, receiveTime);
+    return call(RpcKind.RPC_BUILTIN, null, param, receiveTime);
-  public abstract Writable call(String protocol,
-                               Writable param, long receiveTime)
-  throws IOException;
+  public abstract Writable call(RpcKind rpcKind, String protocol,
+      Writable param, long receiveTime) throws IOException;
-  }      
+  }

INS26 INS26 INS40 INS40 INS55 INS23 INS31 INS31 INS31 INS83 INS42 INS23 INS23 INS31 INS83 INS74 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 MOV74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS74 INS44 INS83 INS74 INS59 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS43 INS43 INS43 INS42 INS14 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS43 INS42 INS60 INS25 INS21 INS43 INS42 INS25 INS60 INS41 INS42 INS43 INS42 INS60 INS41 INS43 INS76 UPD42 UPD42 INS43 INS42 INS43 INS76 INS42 INS42 INS42 INS74 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS74 INS34 INS66 INS66 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS76 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS27 INS41 INS43 INS59 INS16 INS42 INS43 INS59 INS16 INS42 INS43 INS60 INS25 INS66 INS66 INS65 INS66 INS66 UPD66 INS42 INS42 INS43 INS43 INS76 INS42 INS7 INS7 INS43 INS43 INS43 INS42 INS43 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS42 INS42 INS27 INS42 INS33 INS42 INS42 INS42 INS32 INS36 INS33 INS40 INS42 INS42 INS32 INS36 INS33 INS40 INS42 INS74 INS59 INS27 INS8 INS68 UPD42 INS40 INS42 INS42 INS43 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS14 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS43 INS76 INS42 INS32 INS42 INS33 INS21 INS60 INS60 INS21 INS21 INS41 INS42 INS69 INS69 INS69 UPD42 INS69 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS33 INS42 INS33 INS42 INS43 INS42 INS32 INS32 INS83 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS43 INS43 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS40 INS33 INS32 INS27 INS42 INS42 INS42 INS40 INS42 INS40 INS40 INS45 INS32 INS45 INS32 INS43 INS32 INS33 INS52 INS43 INS57 INS42 INS45 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS40 INS40