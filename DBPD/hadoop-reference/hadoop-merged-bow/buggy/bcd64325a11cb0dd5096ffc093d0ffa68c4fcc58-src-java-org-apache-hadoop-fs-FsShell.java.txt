Merged src/core, src/test/core, src/contrib/eclipse-plugin, and
src/contrib/ec2 from trunk 776174:784663


git-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68

+  static final String DU_USAGE="-du [-s] [-h] <paths...>";
-   * @param src a file pattern specifying source files
+   * @param cmd
+   * @param pos ignore anything before this pos in cmd
-  void du(String src) throws IOException {
-    Path srcPath = new Path(src);
-    FileSystem srcFs = srcPath.getFileSystem(getConf());
-    Path[] pathItems = FileUtil.stat2Paths(srcFs.globStatus(srcPath), 
-                                           srcPath);
-    FileStatus items[] = srcFs.listStatus(pathItems);
-    if ((items == null) || ((items.length == 0) && 
-        (!srcFs.exists(srcPath)))){
-      throw new FileNotFoundException("Cannot access " + src
-            + ": No such file or directory.");
-    } else {
-      System.out.println("Found " + items.length + " items");
-      int maxLength = 10;
-      
-      long length[] = new long[items.length];
-      for (int i = 0; i < items.length; i++) {
-        length[i] = items[i].isDir() ?
-          srcFs.getContentSummary(items[i].getPath()).getLength() :
-          items[i].getLen();
-        int len = String.valueOf(length[i]).length();
-        if (len > maxLength) maxLength = len;
+  void du(String[] cmd, int pos) throws IOException {
+    CommandFormat c = new CommandFormat(
+      "du", 0, Integer.MAX_VALUE, "h", "s");
+    List<String> params;
+    try {
+      params = c.parse(cmd, pos);
+    } catch (IllegalArgumentException iae) {
+      System.err.println("Usage: java FsShell " + DU_USAGE);
+      throw iae;
+    }
+    boolean humanReadable = c.getOpt("h");
+    boolean summary = c.getOpt("s");
+
+    // Default to cwd
+    if (params.isEmpty()) {
+      params.add(".");
+    }
+
+    List<UsagePair> usages = new ArrayList<UsagePair>();
+
+    for (String src : params) {
+      Path srcPath = new Path(src);
+      FileSystem srcFs = srcPath.getFileSystem(getConf());
+      FileStatus globStatus[] = srcFs.globStatus(srcPath);
+      FileStatus statusToPrint[];
+
+      if (summary) {
+        statusToPrint = globStatus;
+      } else {
+        Path statPaths[] = FileUtil.stat2Paths(globStatus, srcPath);
+        statusToPrint = srcFs.listStatus(statPaths);
-      for(int i = 0; i < items.length; i++) {
-        System.out.printf("%-"+ (maxLength + BORDER) +"d", length[i]);
-        System.out.println(items[i].getPath());
+      if ((statusToPrint == null) || ((statusToPrint.length == 0) &&
+                                      (!srcFs.exists(srcPath)))){
+        throw new FileNotFoundException("Cannot access " + src
+                                        + ": No such file or directory.");
+      }
+
+      if (!summary) {
+        System.out.println("Found " + statusToPrint.length + " items");
+      }
+
+      for (FileStatus stat : statusToPrint) {
+        long length;
+        if (summary || stat.isDir()) {
+          length = srcFs.getContentSummary(stat.getPath()).getLength();
+        } else {
+          length = stat.getLen();
+        }
+
+        usages.add(new UsagePair(String.valueOf(stat.getPath()), length));
+    printUsageSummary(usages, humanReadable);
-   * @param src a file pattern specifying source files
+   * @param cmd
+   * @param pos ignore anything before this pos in cmd
-  void dus(String src) throws IOException {
-    Path srcPath = new Path(src);
-    FileSystem srcFs = srcPath.getFileSystem(getConf());
-    FileStatus status[] = srcFs.globStatus(new Path(src));
-    if (status==null || status.length==0) {
-      throw new FileNotFoundException("Cannot access " + src + 
-          ": No such file or directory.");
+  void dus(String[] cmd, int pos) throws IOException {
+    String newcmd[] = new String[cmd.length + 1];
+    System.arraycopy(cmd, 0, newcmd, 0, cmd.length);
+    newcmd[cmd.length] = "-s";
+    du(newcmd, pos);
+  }
+
+  private void printUsageSummary(List<UsagePair> usages,
+                                 boolean humanReadable) {
+    int maxColumnWidth = 0;
+    for (UsagePair usage : usages) {
+      String toPrint = humanReadable ?
+        StringUtils.humanReadableInt(usage.bytes) : String.valueOf(usage.bytes);
+      if (toPrint.length() > maxColumnWidth) {
+        maxColumnWidth = toPrint.length();
+      }
-    for(int i=0; i<status.length; i++) {
-      long totalSize = srcFs.getContentSummary(status[i].getPath()).getLength();
-      String pathStr = status[i].getPath().toString();
-      System.out.println(("".equals(pathStr)?".":pathStr) + "\t" + totalSize);
+
+    for (UsagePair usage : usages) {
+      String toPrint = humanReadable ?
+        StringUtils.humanReadableInt(usage.bytes) : String.valueOf(usage.bytes);
+      System.out.printf("%-"+ (maxColumnWidth + BORDER) +"s", toPrint);
+      System.out.println(usage.path);
-      in.seek(offset);
-      IOUtils.copyBytes(in, System.out, 1024, false);
-      offset = in.getPos();
-      in.close();
+      try {
+        in.seek(offset);
+        IOUtils.copyBytes(in, System.out, 1024);
+        offset = in.getPos();
+      } finally {
+        in.close();
+      }
-        } else if ("-du".equals(cmd)) {
-          du(argv[i]);
-        } else if ("-dus".equals(cmd)) {
-          dus(argv[i]);
-        if (i < argv.length) {
-          exitCode = doall(cmd, argv, i);
-        } else {
-          du(".");
-        }
+        du(argv, i);
-        if (i < argv.length) {
-          exitCode = doall(cmd, argv, i);
-        } else {
-          dus(".");
-        }         
+        dus(argv, i);
+
+
+  /**
+   * Utility class for a line of du output
+   */
+  private static class UsagePair {
+    public String path;
+    public long bytes;
+
+    public UsagePair(String path, long bytes) {
+      this.path = path;
+      this.bytes = bytes;
+    }
+  }

INS23 INS31 INS31 INS55 INS83 INS83 INS43 INS59 INS44 INS44 INS8 MOV29 MOV39 MOV42 MOV44 INS44 MOV43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS42 INS23 INS23 INS31 INS42 INS42 INS45 INS65 INS5 INS42 INS39 INS42 INS60 INS60 INS54 MOV60 MOV60 INS25 INS60 INS70 MOV21 INS65 INS5 UPD42 INS39 INS42 INS60 INS21 INS21 INS21 INS74 INS42 INS39 INS42 INS60 INS70 INS70 INS65 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS42 INS44 INS44 INS8 INS42 UPD42 UPD66 UPD43 MOV43 MOV85 INS43 INS59 INS74 INS59 INS8 INS12 UPD39 UPD39 INS32 INS8 INS74 INS59 MOV44 INS42 INS8 INS42 UPD42 UPD66 INS43 INS85 MOV43 MOV59 INS32 INS7 INS32 INS43 INS43 INS39 INS59 INS44 INS42 INS8 INS44 INS42 INS8 INS66 INS42 INS42 INS42 INS43 INS42 INS39 INS42 INS21 INS21 UPD42 INS42 INS42 INS14 INS43 INS43 UPD42 MOV42 INS21 INS44 INS8 UPD42 INS32 UPD42 INS32 INS42 INS42 INS21 INS43 INS43 INS42 INS14 MOV60 MOV60 INS60 INS60 INS25 INS25 INS25 INS70 UPD42 INS42 INS42 MOV42 UPD42 INS85 INS3 INS42 INS42 UPD42 MOV42 INS34 UPD42 MOV42 INS34 INS40 INS2 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV34 INS43 INS42 INS60 INS25 INS43 INS42 MOV60 MOV21 INS21 INS54 INS42 INS7 INS7 INS43 INS45 INS34 INS40 INS45 INS45 INS42 INS42 INS7 INS43 INS42 MOV21 INS53 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS74 MOV43 MOV59 INS43 INS59 INS42 INS8 INS8 MOV27 MOV8 INS38 INS8 INS44 INS42 INS8 INS5 INS27 INS42 INS40 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS32 INS8 INS8 INS22 INS42 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS43 INS43 INS42 INS85 MOV32 INS42 INS42 INS85 INS21 INS60 INS21 INS42 INS21 MOV43 INS42 INS60 INS25 INS21 INS43 INS85 INS40 INS34 INS42 INS42 INS16 INS32 INS42 INS21 INS42 UPD42 INS16 UPD42 INS42 INS40 INS42 INS40 MOV21 MOV21 MOV21 MOV21 MOV25 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD40 INS42 INS42 INS7 MOV43 INS59 INS7 INS32 UPD39 MOV39 INS59 INS27 INS8 INS8 INS32 UPD42 MOV42 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS32 INS32 INS45 INS36 INS45 MOV32 MOV8 UPD45 INS42 INS42 INS42 INS42 INS85 INS32 INS42 INS32 UPD42 INS40 INS42 INS27 UPD42 MOV42 INS42 INS32 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 UPD42 MOV42 INS42 INS40 INS27 MOV32 MOV8 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS45 INS40 INS45 UPD42 MOV42 INS42 INS7 MOV7 INS43 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 MOV8 UPD40 INS42 INS32 UPD42 INS32 INS42 UPD42 MOV42 INS42 INS32 MOV32 MOV8 INS32 INS42 INS42 INS42 INS42 INS42 MOV32 MOV8 INS42 UPD42 MOV42 INS32 INS42 INS42 MOV8 MOV8 INS32 UPD42 MOV42 MOV42 MOV42 INS32 UPD42 MOV42 MOV42 MOV42 DEL40 DEL45 DEL34 DEL85 DEL39 DEL85 DEL5 DEL40 DEL3 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL2 DEL42 DEL32 DEL5 DEL60 DEL85 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL2 DEL32 DEL16 DEL7 DEL21 DEL42 DEL42 DEL42 DEL2 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL21 DEL25 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL40 DEL45 DEL42 DEL42 DEL27 DEL36 DEL45 DEL27 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL43 DEL43 DEL42 DEL14 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL16 DEL36 DEL45 DEL42 DEL42 DEL43 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL85 DEL42 DEL14 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL39 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL42 DEL2 DEL32 DEL32 DEL32 DEL59 DEL60 DEL8 DEL24 DEL8 DEL31 DEL9 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL32 DEL7 DEL42 DEL40 DEL27 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL7 DEL42 DEL40 DEL27 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8