HDFS-5594. FileSystem API for ACLs. Contributed by Chris Nauroth.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1549910 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Arrays;
-import java.util.Collections;
-import java.util.concurrent.atomic.AtomicInteger;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclReadFlag;
+import org.apache.hadoop.fs.permission.AclStatus;
+import org.apache.hadoop.fs.permission.AclWriteFlag;
+  /**
+   * Modifies ACL entries of files and directories.  This method can add new ACL
+   * entries or modify the permissions on existing ACL entries.  All existing
+   * ACL entries that are not specified in this call are retained without
+   * changes.  (Modifications are merged into the current ACL.)
+   *
+   * @param path Path to modify
+   * @param aclSpec List<AclEntry> describing modifications
+   * @param flags EnumSet<AclWriteFlag> containing flags (such as recursive)
+   * @throws IOException if an ACL could not be modified
+   */
+  public void modifyAclEntries(Path path, List<AclEntry> aclSpec,
+      EnumSet<AclWriteFlag> flags) throws IOException {
+    throw new UnsupportedOperationException(getClass().getSimpleName()
+        + " doesn't support modifyAclEntries");
+  }
+
+  /**
+   * Removes ACL entries from files and directories.  Other ACL entries are
+   * retained.
+   *
+   * @param path Path to modify
+   * @param aclSpec List<AclEntry> describing entries to remove
+   * @param flags EnumSet<AclWriteFlag> containing flags (such as recursive)
+   * @throws IOException if an ACL could not be modified
+   */
+  public void removeAclEntries(Path path, List<AclEntry> aclSpec,
+      EnumSet<AclWriteFlag> flags) throws IOException {
+    throw new UnsupportedOperationException(getClass().getSimpleName()
+        + " doesn't support removeAclEntries");
+  }
+
+  /**
+   * Removes all default ACL entries from files and directories.
+   *
+   * @param path Path to modify
+   * @param flags EnumSet<AclWriteFlag> containing flags (such as recursive)
+   * @throws IOException if an ACL could not be modified
+   */
+  public void removeDefaultAcl(Path path, EnumSet<AclWriteFlag> flags)
+      throws IOException {
+    throw new UnsupportedOperationException(getClass().getSimpleName()
+        + " doesn't support removeDefaultAcl");
+  }
+
+  /**
+   * Removes all but the base ACL entries of files and directories.  The entries
+   * for user, group, and others are retained for compatibility with permission
+   * bits.
+   *
+   * @param path Path to modify
+   * @param flags EnumSet<AclWriteFlag> containing flags (such as recursive)
+   * @throws IOException if an ACL could not be removed
+   */
+  public void removeAcl(Path path, EnumSet<AclWriteFlag> flags)
+      throws IOException {
+    throw new UnsupportedOperationException(getClass().getSimpleName()
+        + " doesn't support removeAcl");
+  }
+
+  /**
+   * Fully replaces ACL of files and directories, discarding all existing
+   * entries.
+   *
+   * @param path Path to modify
+   * @param aclSpec List<AclEntry> describing modifications, must include entries
+   *   for user, group, and others for compatibility with permission bits.
+   * @param flags EnumSet<AclWriteFlag> containing flags (such as recursive)
+   * @throws IOException if an ACL could not be modified
+   */
+  public void setAcl(Path path, List<AclEntry> aclSpec,
+      EnumSet<AclWriteFlag> flags) throws IOException {
+    throw new UnsupportedOperationException(getClass().getSimpleName()
+        + " doesn't support setAcl");
+  }
+
+  /**
+   * Gets the ACLs of files and directories.
+   *
+   * @param path Path to get
+   * @param flags EnumSet<AclReadFlag> containing flags (such as recursive)
+   * @return RemoteIterator<AclStatus> which returns each AclStatus
+   * @throws IOException if an ACL could not be read
+   */
+  public RemoteIterator<AclStatus> listAclStatus(Path path,
+      EnumSet<AclReadFlag> flags) throws IOException {
+    throw new UnsupportedOperationException(getClass().getSimpleName()
+        + " doesn't support listAclStatus");
+  }
+

MOV26 MOV26 MOV26 INS26 UPD40 INS40 UPD40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS74 INS42 INS42 INS53 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS74 INS42 INS42 INS53 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS42 INS53 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS42 INS53 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS74 INS42 INS74 INS42 INS42 INS53 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS74 INS42 INS42 INS53 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS43 INS14 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS43 INS14 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS14 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS14 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS43 INS14 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS43 INS14 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS27 INS42 INS42 INS43 INS27 INS42 INS32 INS45 INS42 INS32 INS45 INS42 INS32 INS45 INS42 INS32 INS45 INS42 INS32 INS45 INS42 INS32 INS45 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42