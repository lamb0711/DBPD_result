AVRO-6422. Make RPC backend plugable.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889889 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.logging.*;
+
-public class AvroRpc {
+class AvroRpcEngine implements RpcEngine {
+  private static final Log LOG = LogFactory.getLog(RPC.class);
+
+  // the implementation we tunnel through
+  private static final RpcEngine ENGINE = new WritableRpcEngine();
+
-      this.tunnel = (TunnelProtocol)RPC.getProxy(TunnelProtocol.class, VERSION,
-                                                 addr, ticket, conf, factory);
+      this.tunnel =
+        (TunnelProtocol)ENGINE.getProxy(TunnelProtocol.class, VERSION,
+                                        addr, ticket, conf, factory);
-    public void close() throws IOException {}
-  }
-    
-  /** Construct a client-side proxy object that implements the named protocol,
-   * talking to a server at the named address. */
-  public static Object getProxy(Class<?> protocol,
-                                InetSocketAddress addr,
-                                Configuration conf)
-    throws IOException {
-    UserGroupInformation ugi = null;
-    try {
-      ugi = UserGroupInformation.login(conf);
-    } catch (LoginException le) {
-      throw new RuntimeException("Couldn't login!");
+    public void close() throws IOException {
+      ENGINE.stopProxy(tunnel);
-    return getProxy(protocol, addr, ugi, conf,
-                    NetUtils.getDefaultSocketFactory(conf));
-  public static Object getProxy
-    (final Class<?> protocol, final InetSocketAddress addr,
-     final UserGroupInformation ticket,
-     final Configuration conf, final SocketFactory factory)
+  public Object getProxy(Class protocol, long clientVersion,
+                         InetSocketAddress addr, UserGroupInformation ticket,
+                         Configuration conf, SocketFactory factory)
-
-      (protocol.getClassLoader(), new Class[] { protocol },
-       new InvocationHandler() {
-         public Object invoke(Object proxy, Method method, Object[] args) 
-           throws Throwable {
-           return new ReflectRequestor
-             (protocol,
-              new ClientTransceiver(addr, ticket, conf, factory))
-             .invoke(proxy, method, args);
-         }
-       });
+      (protocol.getClassLoader(),
+       new Class[] { protocol },
+       new Invoker(protocol, addr, ticket, conf, factory));
+  }
+
+  /** Stop this proxy. */
+  public void stopProxy(Object proxy) {
+    try {
+      ((Invoker)Proxy.getInvocationHandler(proxy)).close();
+    } catch (IOException e) {
+      LOG.warn("Error while stopping "+proxy, e);
+    }
+  }
+
+  private static class Invoker implements InvocationHandler, Closeable {
+    private final ClientTransceiver tx;
+    private final ReflectRequestor requestor;
+    public Invoker(Class<?> protocol, InetSocketAddress addr,
+                   UserGroupInformation ticket, Configuration conf,
+                   SocketFactory factory) throws IOException {
+      this.tx = new ClientTransceiver(addr, ticket, conf, factory);
+      this.requestor = new ReflectRequestor(protocol, tx);
+    }
+    @Override public Object invoke(Object proxy, Method method, Object[] args) 
+      throws Throwable {
+      return requestor.invoke(proxy, method, args);
+    }
+    public void close() throws IOException {
+      tx.close();
+    }
-  /** Construct a server for a protocol implementation instance listening on a
-   * port and address. */
-  public static Server getServer(Object impl, String bindAddress, int port,
-                                 Configuration conf) 
-    throws IOException {
-    return RPC.getServer(new TunnelResponder(impl.getClass(), impl),
-                         bindAddress, port, conf);
-
+  public Object[] call(Method method, Object[][] params,
+                       InetSocketAddress[] addrs, UserGroupInformation ticket,
+                       Configuration conf) throws IOException {
+    throw new UnsupportedOperationException();
-  public static RPC.Server getServer(Object impl, String bindAddress, int port,
-                                     int numHandlers, boolean verbose,
-                                     Configuration conf) 
-    throws IOException {
-    return RPC.getServer(new TunnelResponder(impl.getClass(), impl),
-                         bindAddress, port, numHandlers, verbose, conf);
+  public RPC.Server getServer(Class iface, Object impl, String bindAddress,
+                              int port, int numHandlers, boolean verbose,
+                              Configuration conf) throws IOException {
+    return ENGINE.getServer(TunnelProtocol.class,
+                            new TunnelResponder(iface, impl),
+                            bindAddress, port, numHandlers, verbose, conf);

INS26 INS40 INS42 INS43 INS23 INS23 INS31 INS31 INS55 INS42 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV29 INS83 MOV43 MOV42 INS44 INS44 INS44 INS44 MOV44 INS44 MOV43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS42 MOV43 INS43 INS23 INS23 INS31 MOV31 INS31 INS5 INS42 INS44 INS44 INS44 INS42 INS42 INS32 INS42 INS42 INS14 MOV43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS41 INS65 UPD43 MOV43 UPD42 MOV42 INS54 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 MOV44 MOV44 INS44 MOV44 MOV44 MOV43 MOV8 INS78 INS8 INS83 INS39 INS42 INS43 MOV8 MOV43 INS85 INS43 INS42 INS5 UPD42 INS5 INS42 UPD43 UPD42 INS43 INS42 INS53 INS43 INS42 INS42 INS42 INS57 INS43 INS21 INS42 MOV42 INS42 INS32 INS66 UPD42 INS8 INS12 INS42 INS42 UPD42 MOV42 INS42 UPD43 MOV43 UPD42 MOV42 INS21 INS21 INS42 INS41 INS42 INS21 UPD42 MOV42 INS43 INS85 INS85 MOV43 INS85 UPD42 INS42 INS14 INS42 INS43 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 MOV3 INS14 INS21 INS44 INS8 UPD42 INS7 INS7 INS32 INS32 MOV42 UPD43 MOV43 UPD42 INS57 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS21 INS22 MOV14 INS22 INS14 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS43 INS42 INS42 INS36 UPD42 MOV42 INS42 INS32 INS52 INS42 INS52 INS42 MOV43 INS42 INS42 INS42 UPD42 INS11 UPD42 MOV42 INS42 INS27 UPD42 MOV42 INS43 INS32 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 DEL83 DEL42 DEL83 DEL42 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL1 DEL14 DEL32 DEL41 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL44 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL83 DEL76 DEL74 DEL42 DEL44 DEL83 DEL42 DEL44 DEL83 DEL43 DEL42 DEL44 DEL83 DEL44 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL43 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL42 DEL42 DEL42 DEL32 DEL41 DEL83 DEL42 DEL42 DEL32