MAPREDUCE-778. Rumen Anonymizer. (Amar Kamat and Chris Douglas via amarrk)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1215141 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.tools.rumen.datatypes.NodeName;
-   static final Map<List<String>, List<String>> layersCache = 
-    new HashMap<List<String>, List<String>>();
+   static final Map<List<String>, List<NodeName>> layersCache = 
+    new HashMap<List<String>, List<NodeName>>();
-  List<String> layers = Collections.emptyList();
+  List<NodeName> layers = Collections.emptyList();
-  public List<String> getLayers() {
+  public List<NodeName> getLayers() {
-        List<String> found = layersCache.get(layers);
+        List<NodeName> found = layersCache.get(layers);
-          List<String> clone = new ArrayList<String>(layers.size());
-          for (String s : layers) {
-            clone.add(s.intern());
-          }
+          List<NodeName> clone = new ArrayList<NodeName>(layers.size());
+          clone.add(new NodeName(layers.get(0).intern(), null)); 
+          clone.add(new NodeName(null, layers.get(1).intern()));
+          
-          List<String> readonlyLayers = Collections.unmodifiableList(clone);
-          layersCache.put(readonlyLayers, readonlyLayers);
+          List<NodeName> readonlyLayers = Collections.unmodifiableList(clone);
+          List<String> readonlyLayersKey = Collections.unmodifiableList(layers);
+          layersCache.put(readonlyLayersKey, readonlyLayers);
-  @SuppressWarnings("unused")
-  private void compareStrings(List<String> c1, List<String> c2, TreePath loc,
-      String eltname) throws DeepInequalityException {
+  private void compareStrings(List<NodeName> c1, List<NodeName> c2, 
+                              TreePath loc, String eltname) 
+  throws DeepInequalityException {
-    if (c1 == null || c2 == null || !c1.equals(c2)) {
+    if (c1 == null || c2 == null || (c1.size() != c2.size())) {
+    
+    for (NodeName n1 : c1) {
+      boolean found = false;
+      for (NodeName n2 : c2) {
+        if (n1.getValue().equals(n2.getValue())) {
+          found = true;
+          break;
+        }
+      }
+      
+      if (!found) {
+        throw new DeepInequalityException(eltname 
+                  + " miscompared [" + n1.getValue() +"]", recursePath);
+      }
+    }

INS26 INS40 UPD74 UPD74 UPD74 UPD74 UPD43 UPD43 UPD74 UPD74 INS70 UPD43 UPD74 UPD42 UPD42 UPD43 UPD43 INS44 INS42 INS8 UPD42 UPD74 UPD42 UPD42 INS36 INS43 INS42 INS60 INS70 INS25 UPD43 INS27 INS42 INS39 INS59 INS44 INS42 INS8 INS38 INS8 UPD42 INS32 INS32 INS42 INS9 INS43 INS42 INS25 INS42 INS53 UPD74 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS32 INS8 INS14 UPD43 INS21 MOV21 INS60 INS32 INS42 INS32 INS21 INS10 INS43 INS27 INS42 UPD42 UPD74 INS32 INS74 MOV74 INS59 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS32 INS45 UPD43 INS42 INS42 INS14 INS14 INS43 INS43 INS42 INS32 UPD42 INS42 INS9 INS42 INS42 UPD42 UPD74 INS43 INS32 INS33 INS43 INS33 INS32 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 MOV42 INS32 INS42 INS42 INS32 MOV42 UPD42 INS42 INS42 INS34 UPD42 MOV42 INS42 INS34 DEL32 DEL43 DEL42 DEL44 DEL42 DEL8 DEL70 DEL42 DEL45 DEL79 DEL32 DEL38