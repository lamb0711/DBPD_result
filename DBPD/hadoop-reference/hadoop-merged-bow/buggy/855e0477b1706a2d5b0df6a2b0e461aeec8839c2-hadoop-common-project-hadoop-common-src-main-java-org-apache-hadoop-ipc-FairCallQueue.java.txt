HADOOP-14035. Reduce fair call queue backoff's impact on clients. Contributed by Daryn Sharp.

+import org.apache.hadoop.ipc.CallQueueManager.CallQueueOverflowException;
-   * Put and offer follow the same pattern:
+   * Add, put, and offer follow the same pattern:
-   * - Put will move on to the next queue until it lands on the last queue
+   * - Add will move on to the next queue, throw on last queue overflow
+   * - Put will move on to the next queue, block on last queue overflow
+
+  @Override
+  public boolean add(E e) {
+    final int priorityLevel = e.getPriorityLevel();
+    // try offering to all queues.
+    if (!offerQueues(priorityLevel, e, true)) {
+      // only disconnect the lowest priority users that overflow the queue.
+      throw (priorityLevel == queues.size() - 1)
+          ? CallQueueOverflowException.DISCONNECT
+          : CallQueueOverflowException.KEEPALIVE;
+    }
+    return true;
+  }
+
-    int priorityLevel = e.getPriorityLevel();
-
-    final int numLevels = this.queues.size();
-    while (true) {
-      BlockingQueue<E> q = this.queues.get(priorityLevel);
-      boolean res = q.offer(e);
-      if (!res) {
-        // Update stats
-        this.overflowedCalls.get(priorityLevel).getAndIncrement();
-
-        // If we failed to insert, try again on the next level
-        priorityLevel++;
-
-        if (priorityLevel == numLevels) {
-          // That was the last one, we will block on put in the last queue
-          // Delete this line to drop the call
-          this.queues.get(priorityLevel-1).put(e);
-          break;
-        }
-      } else {
-        break;
-      }
+    final int priorityLevel = e.getPriorityLevel();
+    // try offering to all but last queue, put on last.
+    if (!offerQueues(priorityLevel, e, false)) {
+      putQueue(queues.size() - 1, e);
+  }
-
+  /**
+   * Put the element in a queue of a specific priority.
+   * @param priority - queue priority
+   * @param e - element to add
+   */
+  @VisibleForTesting
+  void putQueue(int priority, E e) throws InterruptedException {
+    queues.get(priority).put(e);
+  /**
+   * Offer the element to queue of a specific priority.
+   * @param priority - queue priority
+   * @param e - element to add
+   * @return boolean if added to the given queue
+   */
+  @VisibleForTesting
+  boolean offerQueue(int priority, E e) {
+    boolean ret = queues.get(priority).offer(e);
+    if (ret) {
+      signalNotEmpty();
+    }
+    return ret;
+  }
+
+  /**
+   * Offer the element to queue of the given or lower priority.
+   * @param priority - starting queue priority
+   * @param e - element to add
+   * @param includeLast - whether to attempt last queue
+   * @return boolean if added to a queue
+   */
+  private boolean offerQueues(int priority, E e, boolean includeLast) {
+    int lastPriority = queues.size() - (includeLast ? 1 : 2);
+    for (int i=priority; i <= lastPriority; i++) {
+      if (offerQueue(i, e)) {
+        return true;
+      }
+      // Update stats
+      overflowedCalls.get(i).getAndIncrement();
+    }
+    return false;
+  }
+

INS26 INS40 INS31 INS31 INS31 INS31 INS31 MOV29 MOV78 MOV83 INS39 INS42 MOV44 INS8 INS78 INS83 MOV39 MOV42 INS44 INS43 INS8 INS29 INS78 INS39 INS42 INS44 INS44 MOV43 INS8 INS29 INS78 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 MOV60 INS25 INS41 INS42 INS43 INS42 INS42 MOV60 INS25 INS65 INS65 INS65 INS42 INS39 INS42 INS43 INS42 INS21 MOV21 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS43 INS42 MOV60 INS25 INS41 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS39 INS42 INS60 INS24 INS41 UPD66 INS66 UPD66 INS83 INS38 INS8 INS9 INS42 INS38 INS8 INS66 INS42 INS66 INS42 INS66 MOV42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS8 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS58 INS27 INS37 INS8 INS9 INS32 INS53 UPD42 INS32 INS21 INS32 INS42 INS42 UPD42 INS21 INS42 INS27 INS39 INS59 INS42 INS42 INS42 INS25 INS21 INS42 INS42 INS42 INS9 INS16 INS42 UPD42 INS42 INS42 INS42 INS9 INS32 INS42 MOV42 UPD42 MOV42 INS32 INS32 INS32 INS36 INS42 INS42 INS32 MOV8 INS32 INS36 INS40 INS40 INS42 INS27 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 MOV42 INS41 INS32 INS42 INS27 INS32 INS34 INS42 INS34 INS34 INS9 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS34 INS42 INS42 DEL52 DEL42 DEL22 DEL10 DEL9 DEL42 DEL43 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL42 DEL38 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL42 DEL42 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL34 DEL27 DEL32 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL8 DEL31