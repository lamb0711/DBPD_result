HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)

+import org.apache.hadoop.hdfs.protocol.BlockStoragePolicy;
+import org.apache.hadoop.hdfs.StorageType;
-  public Quota.Counts cleanSubtree(final int snapshot, int priorSnapshotId,
+  public QuotaCounts cleanSubtree(BlockStoragePolicySuite bsps, final int snapshot,
+                                  int priorSnapshotId,
-      return sf.cleanFile(this, snapshot, priorSnapshotId, collectedBlocks,
+      return sf.cleanFile(bsps, this, snapshot, priorSnapshotId, collectedBlocks,
-    Quota.Counts counts = Quota.Counts.newInstance();
+    QuotaCounts counts = new QuotaCounts.Builder().build();
-        computeQuotaUsage(counts, false);
-        destroyAndCollectBlocks(collectedBlocks, removedINodes);
+        computeQuotaUsage(bsps, counts, false);
+        destroyAndCollectBlocks(bsps, collectedBlocks, removedINodes);
-  public void destroyAndCollectBlocks(BlocksMapUpdateInfo collectedBlocks,
-      final List<INode> removedINodes) {
+  public void destroyAndCollectBlocks(BlockStoragePolicySuite bsps,
+      BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes) {
+  // This is the only place that needs to use the BlockStoragePolicySuite to
+  // derive the intended storage type usage for quota by storage type
-  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,
-      boolean useCache, int lastSnapshotId) {
+  public final QuotaCounts computeQuotaUsage(
+      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,
+      int lastSnapshotId) {
-    final long dsDelta;
+    final long dsDeltaNoReplication;
+    short dsReplication;
-        dsDelta = diskspaceConsumed();
+        dsDeltaNoReplication = diskspaceConsumedNoReplication();
+        dsReplication = getBlockReplication();
-        dsDelta = computeFileSize(true, false) * getFileReplication();
-      } else {      
+        dsDeltaNoReplication = computeFileSize(true, false);
+        dsReplication = getFileReplication();
+      } else {
-        dsDelta = diskspaceConsumed(sid);
+        dsDeltaNoReplication = diskspaceConsumedNoReplication(sid);
+        dsReplication = getReplication(sid);
-      dsDelta = diskspaceConsumed();
+      dsDeltaNoReplication = diskspaceConsumedNoReplication();
+      dsReplication = getBlockReplication();
-    counts.add(Quota.NAMESPACE, nsDelta);
-    counts.add(Quota.DISKSPACE, dsDelta);
+    counts.addNameSpace(nsDelta);
+    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);
+
+    if (getStoragePolicyID() != BlockStoragePolicySuite.ID_UNSPECIFIED){
+      BlockStoragePolicy bsp = bsps.getPolicy(getStoragePolicyID());
+      List<StorageType> storageTypes = bsp.chooseStorageTypes(dsReplication);
+      for (StorageType t : storageTypes) {
+        if (!t.supportTypeQuota()) {
+          continue;
+        }
+        counts.addTypeSpace(t, dsDeltaNoReplication);
+      }
+    }
+    return diskspaceConsumedNoReplication() * getBlockReplication();
+  }
+
+  public final long diskspaceConsumedNoReplication() {
-      return computeFileSize(true, true) * getBlockReplication();
+      return computeFileSize(true, true);
-    return size * getBlockReplication();
+    return size;
-          * getFileReplication(lastSnapshotId);
+        * getFileReplication(lastSnapshotId);
-  
+
+  public final short getReplication(int lastSnapshotId) {
+    if (lastSnapshotId != CURRENT_STATE_ID) {
+      return getFileReplication(lastSnapshotId);
+    } else {
+      return getBlockReplication();
+    }
+  }
+
+  public final long diskspaceConsumedNoReplication(int lastSnapshotId) {
+    if (lastSnapshotId != CURRENT_STATE_ID) {
+      return computeFileSize(lastSnapshotId);
+    } else {
+      return diskspaceConsumedNoReplication();
+    }
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 UPD43 INS44 INS44 UPD43 INS44 MOV29 INS83 INS83 INS39 INS42 INS8 UPD42 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS42 UPD43 INS60 INS25 MOV41 INS41 INS39 INS42 INS25 INS39 INS42 INS25 INS42 UPD43 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS42 INS27 INS8 INS8 INS27 INS8 INS8 INS42 UPD42 INS42 INS21 UPD42 UPD42 INS27 INS32 INS40 INS60 INS60 INS70 INS32 INS42 INS42 INS41 INS41 INS42 INS42 INS41 INS41 INS14 UPD42 INS7 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS42 MOV32 INS32 INS32 INS32 INS32 INS42 INS43 INS21 UPD42 INS42 MOV32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS7 INS21 INS21 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS32 INS42 INS42 UPD42 INS42 INS32 INS7 INS7 INS42 INS32 INS18 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 MOV32 INS42 MOV32 UPD42 INS42 INS32 INS42 INS42 UPD42 INS42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL27 DEL40 DEL40 DEL42 DEL42 DEL27