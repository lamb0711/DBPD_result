HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.lang.mutable.MutableBoolean;
+import org.apache.hadoop.hdfs.ShortCircuitShm.Slot;
+import org.apache.hadoop.hdfs.ShortCircuitShm.SlotId;
-        setDatanodeID(datanode).
+      if (curPeer.fromCache) remainingCacheTries--;
+      Slot slot = null;
+      ShortCircuitCache cache = clientContext.getShortCircuitCache();
-        ShortCircuitReplicaInfo info = requestFileDescriptors(peer);
+        MutableBoolean usedPeer = new MutableBoolean(false);
+        slot = cache.allocShmSlot(datanode, peer, usedPeer,
+            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),
+            clientName);
+        if (usedPeer.booleanValue()) {
+          if (LOG.isTraceEnabled()) {
+            LOG.trace(this + ": allocShmSlot used up our previous socket " +
+              peer.getDomainSocket() + ".  Allocating a new one...");
+          }
+          curPeer = nextDomainPeer();
+          if (curPeer == null) break;
+          peer = (DomainPeer)curPeer.peer;
+        }
+        ShortCircuitReplicaInfo info = requestFileDescriptors(peer, slot);
+        if (slot != null) {
+          cache.freeSlot(slot);
+        }
+   * @param peer   The peer to use for communication.
+   * @param slot   If non-null, the shared memory slot to associate with the 
+   *               new ShortCircuitReplica.
+   * 
-  private ShortCircuitReplicaInfo requestFileDescriptors(DomainPeer peer)
-        throws IOException {
+  private ShortCircuitReplicaInfo requestFileDescriptors(DomainPeer peer,
+          Slot slot) throws IOException {
+    ShortCircuitCache cache = clientContext.getShortCircuitCache();
-    new Sender(out).requestShortCircuitFds(block, token, 1);
+    SlotId slotId = slot == null ? null : slot.getSlotId();
+    new Sender(out).requestShortCircuitFds(block, token, slotId, 1);
-        ExtendedBlockId key = new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId());
-        replica = new ShortCircuitReplica(key, fis[0], fis[1],
-            clientContext.getShortCircuitCache(), Time.monotonicNow());
+        ExtendedBlockId key =
+            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId());
+        replica = new ShortCircuitReplica(key, fis[0], fis[1], cache,
+            Time.monotonicNow(), slot);
-      LOG.warn(this + "unknown response code " + resp.getStatus() + " while " +
-          "attempting to set up short-circuit access. " + resp.getMessage());
+      LOG.warn(this + ": unknown response code " + resp.getStatus() +
+          " while attempting to set up short-circuit access. " +
+          resp.getMessage());
+      if (curPeer.fromCache) remainingCacheTries--;
+        if (curPeer.fromCache) remainingCacheTries--;
-  private static class BlockReaderPeer {
+  public static class BlockReaderPeer {
-        remainingCacheTries--;
-        remainingCacheTries--;

INS26 INS26 INS26 INS40 INS40 INS40 INS44 UPD83 INS65 INS65 INS43 INS42 INS60 INS60 MOV32 INS42 INS66 INS42 INS66 INS66 INS42 INS43 INS59 INS43 INS59 UPD42 INS25 INS60 INS60 INS42 INS42 INS32 INS42 INS42 INS16 INS42 INS25 UPD42 UPD42 INS40 INS21 INS43 INS59 INS43 INS59 INS42 INS42 INS27 INS33 INS32 INS40 MOV21 UPD42 UPD42 INS37 INS42 INS42 INS33 INS42 INS42 INS32 INS60 INS21 INS25 INS42 INS33 INS42 INS42 UPD45 UPD45 INS25 INS42 INS42 INS42 INS43 INS59 INS7 INS32 INS8 INS25 INS40 MOV21 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS25 INS21 INS25 INS21 INS27 INS8 INS42 INS42 INS43 INS9 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS8 INS7 INS27 INS10 INS7 INS42 INS42 INS33 INS21 INS42 INS43 INS32 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS33 INS42 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS52 INS45 INS32 INS45 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45