HADOOP-7460. Support pluggable trash policies. Contributed by Usman Masoon.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149760 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_CHECKPOINT_INTERVAL_DEFAULT;
-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_CHECKPOINT_INTERVAL_KEY;
-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_DEFAULT;
-import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY;
-
-import java.io.FileNotFoundException;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.fs.permission.FsAction;
-import org.apache.hadoop.fs.permission.FsPermission;
-import org.apache.hadoop.util.StringUtils;
-/** Provides a <i>trash</i> feature.  Files are moved to a user's trash
- * directory, a subdirectory of their home directory named ".Trash".  Files are
- * initially moved to a <i>current</i> sub-directory of the trash directory.
- * Within that sub-directory their original path is preserved.  Periodically
- * one may checkpoint the current trash and remove older checkpoints.  (This
- * design permits trash management without enumeration of the full trash
- * content, without date support in the filesystem, and without clock
- * synchronization.)
+/** 
+ * Provides a trash facility which supports pluggable Trash policies. 
+ *
+ * See the implementation of the configured TrashPolicy for more
+ * details.
-  private static final Log LOG =
-    LogFactory.getLog(Trash.class);
+  private TrashPolicy trashPolicy; // configured trash policy instance
-  private static final Path CURRENT = new Path("Current");
-  private static final Path TRASH = new Path(".Trash/");
-  
-
-  private static final FsPermission PERMISSION =
-    new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE);
-
-  private static final DateFormat CHECKPOINT = new SimpleDateFormat("yyMMddHHmmss");
-  private static final int MSECS_PER_MINUTE = 60*1000;
-
-  private final FileSystem fs;
-  private final Path trash;
-  private final Path current;
-  private final long deletionInterval;
-  private final Path homesParent;
-
-  /** Construct a trash can accessor.
+  /** 
+   * Construct a trash can accessor.
+   * @param fs the FileSystem
+   * @param conf a Configuration
-    this.fs = fs;
-    this.trash = new Path(fs.getHomeDirectory(), TRASH);
-    this.homesParent = fs.getHomeDirectory().getParent();
-    this.current = new Path(trash, CURRENT);
-    this.deletionInterval = (long) (conf.getFloat(FS_TRASH_INTERVAL_KEY,
-                                         FS_TRASH_INTERVAL_DEFAULT) *
-                                MSECS_PER_MINUTE);
+    trashPolicy = TrashPolicy.getInstance(conf, fs, fs.getHomeDirectory());
-  
+
-   * 
+   *
-  private Trash(Path home, Configuration conf) throws IOException {
-    super(conf);
-    this.fs = home.getFileSystem(conf);
-    this.trash = new Path(home, TRASH);
-    this.homesParent = home.getParent();
-    this.current = new Path(trash, CURRENT);
-    this.deletionInterval = (long) (conf.getFloat(FS_TRASH_INTERVAL_KEY,
-                                         FS_TRASH_INTERVAL_DEFAULT) *
-                                MSECS_PER_MINUTE);
-  }
-  
-  private Path makeTrashRelativePath(Path basePath, Path rmFilePath) {
-    return new Path(basePath + rmFilePath.toUri().getPath());
-  }
-
-    return (deletionInterval != 0);
+    return trashPolicy.isEnabled();
-    if (!isEnabled())
-      return false;
-
-    if (!path.isAbsolute())                       // make path absolute
-      path = new Path(fs.getWorkingDirectory(), path);
-
-    if (!fs.exists(path))                         // check that path exists
-      throw new FileNotFoundException(path.toString());
-
-    String qpath = fs.makeQualified(path).toString();
-
-    if (qpath.startsWith(trash.toString())) {
-      return false;                               // already in trash
-    }
-
-    if (trash.getParent().toString().startsWith(qpath)) {
-      throw new IOException("Cannot move \"" + path +
-                            "\" to the trash, as it contains the trash");
-    }
-
-    Path trashPath = makeTrashRelativePath(current, path);
-    Path baseTrashPath = makeTrashRelativePath(current, path.getParent());
-    
-    IOException cause = null;
-
-    // try twice, in case checkpoint between the mkdirs() & rename()
-    for (int i = 0; i < 2; i++) {
-      try {
-        if (!fs.mkdirs(baseTrashPath, PERMISSION)) {      // create current
-          LOG.warn("Can't create(mkdir) trash directory: "+baseTrashPath);
-          return false;
-        }
-      } catch (IOException e) {
-        LOG.warn("Can't create trash directory: "+baseTrashPath);
-        cause = e;
-        break;
-      }
-      try {
-        //
-        // if the target path in Trash already exists, then append with 
-        // a current time in millisecs.
-        //
-        String orig = trashPath.toString();
-        
-        while(fs.exists(trashPath)) {
-          trashPath = new Path(orig + System.currentTimeMillis());
-        }
-        
-        if (fs.rename(path, trashPath))           // move to current trash
-          return true;
-      } catch (IOException e) {
-        cause = e;
-      }
-    }
-    throw (IOException)
-      new IOException("Failed to move to trash: "+path).initCause(cause);
+    return trashPolicy.moveToTrash(path);
-    if (!fs.exists(current))                      // no trash, no checkpoint
-      return;
-
-    Path checkpoint;
-    synchronized (CHECKPOINT) {
-      checkpoint = new Path(trash, CHECKPOINT.format(new Date()));
-    }
-
-    if (fs.rename(current, checkpoint)) {
-      LOG.info("Created trash checkpoint: "+checkpoint.toUri().getPath());
-    } else {
-      throw new IOException("Failed to checkpoint trash: "+checkpoint);
-    }
+    trashPolicy.createCheckpoint();
-  /** Delete old checkpoints. */
+  /** Delete old checkpoint(s). */
-    FileStatus[] dirs = null;
-    
-    try {
-      dirs = fs.listStatus(trash);            // scan trash sub-directories
-    } catch (FileNotFoundException fnfe) {
-      return;
-    }
-
-    long now = System.currentTimeMillis();
-    for (int i = 0; i < dirs.length; i++) {
-      Path path = dirs[i].getPath();
-      String dir = path.toUri().getPath();
-      String name = path.getName();
-      if (name.equals(CURRENT.getName()))         // skip current
-        continue;
-
-      long time;
-      try {
-        synchronized (CHECKPOINT) {
-          time = CHECKPOINT.parse(name).getTime();
-        }
-      } catch (ParseException e) {
-        LOG.warn("Unexpected item in trash: "+dir+". Ignoring.");
-        continue;
-      }
-
-      if ((now - deletionInterval) > time) {
-        if (fs.delete(path, true)) {
-          LOG.info("Deleted trash checkpoint: "+dir);
-        } else {
-          LOG.warn("Couldn't delete checkpoint: "+dir+" Ignoring.");
-        }
-      }
-    }
+    trashPolicy.deleteCheckpoint();
-  //
-  // get the current working directory
-  //
+  /** get the current working directory */
-    return current;
+    return trashPolicy.getCurrentTrashDir();
+  }
+
+  /** get the configured trash policy */
+  TrashPolicy getTrashPolicy() {
+    return trashPolicy;
-   * users, intended to be run by the superuser.  Only one checkpoint is kept
-   * at a time.
+   * users, intended to be run by the superuser.
-    return new Emptier(getConf());
-  }
-
-  private class Emptier implements Runnable {
-
-    private Configuration conf;
-    private long emptierInterval;
-
-    Emptier(Configuration conf) throws IOException {
-      this.conf = conf;
-      this.emptierInterval = (long) (conf.getFloat(FS_TRASH_CHECKPOINT_INTERVAL_KEY,
-                                     FS_TRASH_CHECKPOINT_INTERVAL_DEFAULT) *
-                                     MSECS_PER_MINUTE);
-      if (this.emptierInterval > deletionInterval ||
-          this.emptierInterval == 0) {
-        LOG.warn("The configured interval for checkpoint is " +
-                 this.emptierInterval + " minutes." +
-                 " Using interval of " + deletionInterval +
-                 " minutes that is used for deletion instead");
-        this.emptierInterval = deletionInterval;
-      }
-    }
-
-    public void run() {
-      if (emptierInterval == 0)
-        return;                                   // trash disabled
-      long now = System.currentTimeMillis();
-      long end;
-      while (true) {
-        end = ceiling(now, emptierInterval);
-        try {                                     // sleep for interval
-          Thread.sleep(end - now);
-        } catch (InterruptedException e) {
-          break;                                  // exit on interrupt
-        }
-
-        try {
-          now = System.currentTimeMillis();
-          if (now >= end) {
-
-            FileStatus[] homes = null;
-            try {
-              homes = fs.listStatus(homesParent);         // list all home dirs
-            } catch (IOException e) {
-              LOG.warn("Trash can't list homes: "+e+" Sleeping.");
-              continue;
-            }
-
-            for (FileStatus home : homes) {         // dump each trash
-              if (!home.isDirectory())
-                continue;
-              try {
-                Trash trash = new Trash(home.getPath(), conf);
-                trash.expunge();
-                trash.checkpoint();
-              } catch (IOException e) {
-                LOG.warn("Trash caught: "+e+". Skipping "+home.getPath()+".");
-              } 
-            }
-          }
-        } catch (Exception e) {
-          LOG.warn("RuntimeException during Trash.Emptier.run(): ", e); 
-        }
-      }
-      try {
-        fs.close();
-      } catch(IOException e) {
-        LOG.warn("Trash cannot close FileSystem: ", e);
-      }
-    }
-
-    private long ceiling(long time, long interval) {
-      return floor(time, interval) + interval;
-    }
-    private long floor(long time, long interval) {
-      return (time / interval) * interval;
-    }
-
+    return trashPolicy.getEmptier();
-

INS23 INS31 INS31 INS31 MOV83 INS43 MOV59 INS29 UPD83 MOV83 MOV42 MOV44 MOV44 MOV43 MOV8 INS8 MOV29 MOV83 MOV39 MOV42 MOV43 INS8 INS29 MOV43 INS42 INS8 INS29 UPD43 UPD42 UPD66 UPD66 UPD66 UPD42 MOV42 UPD42 MOV65 INS65 INS65 MOV46 INS41 MOV21 MOV21 INS65 INS41 INS65 UPD42 INS42 INS66 INS42 INS66 INS32 INS32 UPD66 INS32 INS66 INS32 INS66 UPD42 UPD66 INS32 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL40 DEL40 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL34 DEL27 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL39 DEL32 DEL42 DEL27 DEL36 DEL11 DEL29 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL36 DEL11 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL14 DEL41 DEL8 DEL31 DEL42 DEL34 DEL27 DEL36 DEL42 DEL32 DEL38 DEL9 DEL41 DEL25 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL7 DEL21 DEL25 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL9 DEL41 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL10 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL27 DEL14 DEL7 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL43 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL42 DEL42 DEL32 DEL11 DEL53 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL32 DEL38 DEL41 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL14 DEL7 DEL21 DEL8 DEL51 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL12 DEL54 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL18 DEL25 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL51 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL18 DEL8 DEL12 DEL54 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL42 DEL42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL66 DEL42 DEL43 DEL32 DEL14 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL36 DEL11 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL27 DEL52 DEL42 DEL22 DEL34 DEL27 DEL27 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL34 DEL27 DEL41 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL59 DEL60 DEL9 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL10 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL18 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL18 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL41 DEL8 DEL31 DEL55