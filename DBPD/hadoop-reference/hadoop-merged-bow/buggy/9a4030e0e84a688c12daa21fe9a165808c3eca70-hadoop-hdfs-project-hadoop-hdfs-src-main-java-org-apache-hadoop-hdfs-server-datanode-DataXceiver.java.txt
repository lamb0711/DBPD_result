HDFS-4356. BlockReaderLocal should use passed file descriptors rather than paths. Contributed by Colin Patrick McCabe.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1432335 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos.Status.ERROR_UNSUPPORTED;
+import java.io.FileDescriptor;
+import java.io.FileInputStream;
+import org.apache.hadoop.hdfs.server.datanode.DataNode.ShortCircuitFdsUnsupportedException;
+import org.apache.hadoop.hdfs.server.datanode.DataNode.ShortCircuitFdsVersionException;
+import org.apache.hadoop.net.unix.DomainSocket;
+  public void requestShortCircuitFds(final ExtendedBlock blk,
+      final Token<BlockTokenIdentifier> token,
+      int maxVersion) throws IOException {
+    updateCurrentThreadName("Passing file descriptors for block " + blk);
+    BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder();
+    FileInputStream fis[] = null;
+    try {
+      if (peer.getDomainSocket() == null) {
+        throw new IOException("You cannot pass file descriptors over " +
+            "anything but a UNIX domain socket.");
+      }
+      fis = datanode.requestShortCircuitFdsForRead(blk, token, maxVersion);
+      bld.setStatus(SUCCESS);
+      bld.setShortCircuitAccessVersion(DataNode.CURRENT_BLOCK_FORMAT_VERSION);
+    } catch (ShortCircuitFdsVersionException e) {
+      bld.setStatus(ERROR_UNSUPPORTED);
+      bld.setShortCircuitAccessVersion(DataNode.CURRENT_BLOCK_FORMAT_VERSION);
+      bld.setMessage(e.getMessage());
+    } catch (ShortCircuitFdsUnsupportedException e) {
+      bld.setStatus(ERROR_UNSUPPORTED);
+      bld.setMessage(e.getMessage());
+    } catch (InvalidToken e) {
+      bld.setStatus(ERROR_ACCESS_TOKEN);
+      bld.setMessage(e.getMessage());
+    } catch (IOException e) {
+      bld.setStatus(ERROR);
+      bld.setMessage(e.getMessage());
+    }
+    try {
+      bld.build().writeDelimitedTo(socketOut);
+      if (fis != null) {
+        FileDescriptor fds[] = new FileDescriptor[fis.length];
+        for (int i = 0; i < fds.length; i++) {
+          fds[i] = fis[i].getFD();
+        }
+        byte buf[] = new byte[] { (byte)0 };
+        peer.getDomainSocket().
+          sendFileDescriptors(fds, buf, 0, buf.length);
+      }
+    } finally {
+      if (ClientTraceLog.isInfoEnabled()) {
+        DatanodeRegistration dnR = datanode.getDNRegistrationForBP(blk
+            .getBlockPoolId());
+        BlockSender.ClientTraceLog.info(String.format(
+          String.format(
+            "src: %s, dest: %s, op: %s, blockid: %s, srvID: %s, " +
+              "success: %b",
+            "127.0.0.1",                   // src IP
+            "127.0.0.1",                   // dst IP
+            "REQUEST_SHORT_CIRCUIT_FDS",   // operation
+            blk.getBlockId(),             // block id
+            dnR.getStorageID(),
+            (fis != null)
+          )));
+      }
+      if (fis != null) {
+        IOUtils.cleanup(LOG, fis);
+      }
+    }
+  }
+
+  @Override

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS83 INS43 INS42 INS83 INS74 INS42 INS39 INS42 INS42 INS21 INS60 INS60 INS54 INS54 INS42 INS43 INS43 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS12 INS12 INS8 INS8 INS42 INS42 INS42 INS27 INS40 INS42 INS32 INS42 INS42 INS85 INS33 INS25 INS21 INS21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS21 INS25 INS25 INS25 INS45 INS42 INS42 INS42 INS27 INS8 INS7 INS32 INS32 INS43 INS42 INS21 INS21 INS21 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS21 INS43 INS42 INS21 INS21 INS32 INS27 INS8 INS32 INS8 INS27 INS8 INS32 INS33 INS53 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS33 INS60 INS24 INS60 INS21 INS42 INS42 INS60 INS21 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS58 INS27 INS37 INS8 INS39 INS59 INS32 INS43 INS59 INS32 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS85 INS3 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS85 INS3 INS32 INS42 INS42 INS42 INS34 INS40 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS5 INS40 INS42 INS34 INS7 INS5 INS4 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS2 INS32 INS39 INS85 INS11 INS42 INS42 INS42 INS42 INS27 INS45 INS45 INS45 INS32 INS32 INS36 INS42 INS42 INS42 INS2 INS42 INS39 INS34 INS45 INS45 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS33