HDFS-11182. Update DataNode to use DatasetVolumeChecker. Contributed by Arpit Agarwal.

+import java.util.HashSet;
-import java.util.concurrent.ThreadLocalRandom;
+import org.apache.hadoop.hdfs.server.datanode.checker.DatasetVolumeChecker;
-  private Thread checkDiskErrorThread = null;
-  protected final int checkDiskErrorInterval;
-  private boolean checkDiskErrorFlag = false;
-  private Object checkDiskErrorMutex = new Object();
-  private long lastDiskErrorCheck;
+  private volatile long lastDiskErrorCheck;
+  private final DatasetVolumeChecker volumeChecker;
-  DataNode(final Configuration conf) {
+  DataNode(final Configuration conf) throws DiskErrorException {
-    this.checkDiskErrorInterval =
-        ThreadLocalRandom.current().nextInt(5000, (int) (5000 * 1.25));
+    volumeChecker = new DatasetVolumeChecker(conf, new Timer());
-    this.checkDiskErrorInterval =
-        ThreadLocalRandom.current().nextInt(5000, (int) (5000 * 1.25));
+    this.volumeChecker = new DatasetVolumeChecker(conf, new Timer());
-    // Interrupt the checkDiskErrorThread and terminate it.
-    if(this.checkDiskErrorThread != null) {
-      this.checkDiskErrorThread.interrupt();
-    }
-    
+    volumeChecker.shutdownAndWait(1, TimeUnit.SECONDS);
+
-    synchronized(checkDiskErrorMutex) {
-      checkDiskErrorFlag = true;
-      if(checkDiskErrorThread == null) {
-        startCheckDiskErrorThread();
-        checkDiskErrorThread.start();
-        LOG.info("Starting CheckDiskError Thread");
-      }
-    }
+    volumeChecker.checkAllVolumesAsync(
+        data, (healthyVolumes, failedVolumes) -> {
+          if (failedVolumes.size() > 0) {
+            LOG.warn("checkDiskErrorAsync callback got {} failed volumes: {}",
+                failedVolumes.size(), failedVolumes);
+          } else {
+            LOG.debug("checkDiskErrorAsync: no volume failures detected");
+          }
+          lastDiskErrorCheck = Time.monotonicNow();
+          handleVolumeFailures(failedVolumes);
+        });
-  
+
-   * Check the disk error
+   * Check the disk error synchronously.
-  private void checkDiskError() {
-    Set<StorageLocation> unhealthyLocations = data.checkDataDir();
-    if (unhealthyLocations != null && !unhealthyLocations.isEmpty()) {
+  @VisibleForTesting
+  public void checkDiskError() throws IOException {
+    Set<FsVolumeSpi> unhealthyVolumes;
+    try {
+      unhealthyVolumes = volumeChecker.checkAllVolumes(data);
+      lastDiskErrorCheck = Time.monotonicNow();
+    } catch (InterruptedException e) {
+      LOG.error("Interruped while running disk check", e);
+      throw new IOException("Interrupted while running disk check", e);
+    }
+
+    if (unhealthyVolumes.size() > 0) {
+      LOG.warn("checkDiskError got {} failed volumes - {}",
+          unhealthyVolumes.size(), unhealthyVolumes);
+      handleVolumeFailures(unhealthyVolumes);
+    } else {
+      LOG.debug("checkDiskError encountered no failures");
+    }
+  }
+
+  private void handleVolumeFailures(Set<FsVolumeSpi> unhealthyVolumes) {
+    data.handleVolumeFailures(unhealthyVolumes);
+    Set<StorageLocation> unhealthyLocations = new HashSet<>(
+        unhealthyVolumes.size());
+
+    if (!unhealthyVolumes.isEmpty()) {
+      StringBuilder sb = new StringBuilder("DataNode failed volumes:");
+      for (FsVolumeSpi vol : unhealthyVolumes) {
+        unhealthyLocations.add(vol.getStorageLocation());
+        sb.append(vol.getStorageLocation()).append(";");
+      }
+
-      StringBuilder sb = new StringBuilder("DataNode failed volumes:");
-      for (StorageLocation location : unhealthyLocations) {
-        sb.append(location + ";");
-      }
+      LOG.info(sb.toString());
-  /**
-   * Starts a new thread which will check for disk error check request 
-   * every 5 sec
-   */
-  private void startCheckDiskErrorThread() {
-    checkDiskErrorThread = new Thread(new Runnable() {
-          @Override
-          public void run() {
-            while(shouldRun) {
-              boolean tempFlag ;
-              synchronized(checkDiskErrorMutex) {
-                tempFlag = checkDiskErrorFlag;
-                checkDiskErrorFlag = false;
-              }
-              if(tempFlag) {
-                try {
-                  checkDiskError();
-                } catch (Exception e) {
-                  LOG.warn("Unexpected exception occurred while checking disk error  " + e);
-                  checkDiskErrorThread = null;
-                  return;
-                }
-                synchronized(checkDiskErrorMutex) {
-                  lastDiskErrorCheck = Time.monotonicNow();
-                }
-              }
-              try {
-                Thread.sleep(checkDiskErrorInterval);
-              } catch (InterruptedException e) {
-                LOG.debug("InterruptedException in check disk error thread", e);
-                checkDiskErrorThread = null;
-                return;
-              }
-            }
-          }
-    });
-  }
-  
-    synchronized(checkDiskErrorMutex) {
-      return lastDiskErrorCheck;
-    }
+    return lastDiskErrorCheck;

MOV26 INS26 MOV31 UPD40 INS40 INS23 UPD83 UPD83 UPD39 MOV59 MOV83 UPD83 MOV83 UPD43 MOV43 MOV59 INS43 MOV21 MOV78 MOV83 MOV39 UPD42 MOV42 INS43 INS8 UPD42 INS44 MOV8 UPD42 UPD42 INS42 MOV21 INS21 UPD42 INS42 MOV60 INS54 INS25 INS74 INS42 INS21 INS32 UPD66 INS74 INS8 INS12 INS27 INS8 INS8 INS43 INS43 INS32 INS38 MOV54 INS42 INS14 INS14 INS42 UPD42 INS34 INS40 INS42 INS42 INS42 INS86 INS43 INS43 UPD42 MOV21 MOV21 MOV44 INS8 INS32 INS34 MOV21 MOV21 MOV21 INS42 INS42 INS42 INS42 INS42 INS14 MOV32 INS21 INS43 INS42 INS14 UPD42 INS43 INS42 INS14 INS59 INS59 INS8 INS42 INS42 MOV21 INS53 INS42 INS42 INS74 INS32 UPD42 UPD42 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS25 MOV21 INS21 UPD42 INS32 UPD42 INS32 INS14 INS45 INS32 INS42 UPD42 UPD42 UPD45 INS43 UPD42 MOV42 UPD42 MOV42 UPD43 UPD42 INS21 INS42 INS42 INS32 INS42 INS42 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 INS32 INS34 MOV21 MOV21 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS42 INS45 INS42 UPD42 MOV42 INS32 INS42 INS42 MOV42 MOV42 INS32 INS42 INS42 INS45 INS32 INS42 UPD42 UPD45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL42 DEL59 DEL39 DEL42 DEL9 DEL59 DEL23 DEL23 DEL83 DEL39 DEL23 DEL42 DEL43 DEL14 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL34 DEL39 DEL34 DEL34 DEL27 DEL36 DEL11 DEL32 DEL42 DEL42 DEL32 DEL42 DEL34 DEL39 DEL34 DEL34 DEL27 DEL36 DEL11 DEL32 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL32 DEL42 DEL42 DEL9 DEL7 DEL21 DEL42 DEL33 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL66 DEL39 DEL42 DEL9 DEL45 DEL42 DEL27 DEL42 DEL42 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL8 DEL51 DEL42 DEL8 DEL43 DEL42 DEL44 DEL42 DEL33 DEL7 DEL21 DEL41 DEL8 DEL12 DEL54 DEL42 DEL8 DEL51 DEL8 DEL25 DEL8 DEL42 DEL33 DEL7 DEL21 DEL41 DEL8 DEL12 DEL54 DEL8 DEL61 DEL8 DEL31 DEL1 DEL14 DEL14 DEL7 DEL21 DEL8 DEL66 DEL65 DEL29 DEL32 DEL42 DEL33 DEL27 DEL38 DEL27 DEL42 DEL45 DEL27 DEL42 DEL51 DEL8