MAPREDUCE-5899. Support incremental data copy in DistCp. Contributed by Jing Zhao.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596931 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Arrays;
+import java.util.EnumSet;
+
+import org.apache.hadoop.fs.FileChecksum;
-import org.apache.hadoop.fs.permission.AclEntry;
-import java.io.*;
-import java.util.EnumSet;
-import java.util.Arrays;
-import java.util.List;
-
+  /**
+   * Indicate the action for each file
+   */
+  static enum FileAction {
+    SKIP,         // Skip copying the file since it's already in the target FS
+    APPEND,       // Only need to append new data to the file in the target FS 
+    OVERWRITE,    // Overwrite the whole file
+  }
+
+  private boolean append = false;
+    append = conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);
-      if (skipFile(sourceFS, sourceCurrStatus, target)) {
+      FileAction action = checkUpdate(sourceFS, sourceCurrStatus, target);
+      if (action == FileAction.SKIP) {
-      }
-      else {
+      } else {
-                          fileAttributes);
+            action, fileAttributes);
-
-  private void copyFileWithRetry(String description, FileStatus sourceFileStatus,
-               Path target, Context context,
-               EnumSet<DistCpOptions.FileAttribute> fileAttributes) throws IOException {
-
+  private void copyFileWithRetry(String description,
+      FileStatus sourceFileStatus, Path target, Context context,
+      FileAction action, EnumSet<DistCpOptions.FileAttribute> fileAttributes)
+      throws IOException {
-      bytesCopied = (Long)new RetriableFileCopyCommand(skipCrc, description)
-                       .execute(sourceFileStatus, target, context, fileAttributes);
+      bytesCopied = (Long) new RetriableFileCopyCommand(skipCrc, description,
+          action).execute(sourceFileStatus, target, context, fileAttributes);
-  private boolean skipFile(FileSystem sourceFS, FileStatus source, Path target)
-                                          throws IOException {
-    return     targetFS.exists(target)
-            && !overWrite
-            && !mustUpdate(sourceFS, source, target);
+  private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,
+      Path target) throws IOException {
+    final FileStatus targetFileStatus;
+    try {
+      targetFileStatus = targetFS.getFileStatus(target);
+    } catch (FileNotFoundException e) {
+      return FileAction.OVERWRITE;
+    }
+    if (targetFileStatus != null && !overWrite) {
+      if (canSkip(sourceFS, source, targetFileStatus)) {
+        return FileAction.SKIP;
+      } else if (append) {
+        long targetLen = targetFileStatus.getLen();
+        if (targetLen < source.getLen()) {
+          FileChecksum sourceChecksum = sourceFS.getFileChecksum(
+              source.getPath(), targetLen);
+          if (sourceChecksum != null
+              && sourceChecksum.equals(targetFS.getFileChecksum(target))) {
+            // We require that the checksum is not null. Thus currently only
+            // DistributedFileSystem is supported
+            return FileAction.APPEND;
+          }
+        }
+      }
+    }
+    return FileAction.OVERWRITE;
-  private boolean mustUpdate(FileSystem sourceFS, FileStatus source, Path target)
-                                    throws IOException {
-    final FileStatus targetFileStatus = targetFS.getFileStatus(target);
-
-    return     syncFolders
-            && (
-                   targetFileStatus.getLen() != source.getLen()
-                || (!skipCrc &&
-                       !DistCpUtils.checksumsAreEqual(sourceFS,
-                          source.getPath(), null, targetFS, target))
-                || (source.getBlockSize() != targetFileStatus.getBlockSize() &&
-                      preserve.contains(FileAttribute.BLOCKSIZE))
-               );
+  private boolean canSkip(FileSystem sourceFS, FileStatus source, 
+      FileStatus target) throws IOException {
+    if (!syncFolders) {
+      return true;
+    }
+    boolean sameLength = target.getLen() == source.getLen();
+    boolean sameBlockSize = source.getBlockSize() == target.getBlockSize()
+        || !preserve.contains(FileAttribute.BLOCKSIZE);
+    if (sameLength && sameBlockSize) {
+      return skipCrc ||
+          DistCpUtils.checksumsAreEqual(sourceFS, source.getPath(), null,
+              targetFS, target.getPath());
+    } else {
+      return false;
+    }

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 UPD40 INS40 UPD40 UPD40 INS40 INS71 INS23 INS31 INS29 INS83 INS42 INS72 INS72 INS72 INS83 INS39 INS59 INS44 INS83 INS43 INS42 MOV44 MOV44 MOV44 MOV43 INS8 UPD42 INS44 INS65 INS42 INS42 INS42 INS42 INS9 INS21 INS43 INS42 INS42 INS60 INS54 INS25 INS41 INS43 INS42 INS25 INS60 INS25 INS66 INS7 INS42 INS83 MOV43 INS59 INS8 INS12 INS27 INS8 INS40 INS42 INS38 INS8 INS39 INS39 INS59 INS27 INS8 INS8 INS42 INS32 INS60 INS42 INS21 INS44 INS8 INS27 MOV38 INS25 INS42 INS41 INS42 INS27 INS42 UPD27 MOV27 UPD42 MOV42 INS42 INS41 INS41 INS42 INS42 INS32 INS9 INS43 INS59 INS27 INS7 UPD43 MOV43 UPD42 MOV42 INS41 INS42 INS33 INS32 INS8 INS25 INS9 INS32 INS32 UPD27 INS38 INS27 INS9 INS40 INS42 INS42 INS42 INS32 INS42 INS40 INS42 MOV32 UPD42 INS40 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS41 INS42 INS8 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS60 INS25 UPD42 MOV42 MOV42 MOV42 MOV32 MOV33 MOV42 INS32 INS42 INS39 INS59 UPD27 MOV27 INS8 MOV42 INS42 INS42 INS42 MOV32 INS42 INS60 INS25 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS27 INS32 INS41 MOV42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS32 INS40 MOV42 INS42 INS42 INS42 MOV42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL44 DEL32 DEL42 DEL32 DEL38 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL38 DEL32 DEL38 DEL27 DEL36 DEL27 DEL36 DEL27 DEL36 DEL27 DEL41