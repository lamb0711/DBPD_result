YARN-2820. Retry in FileSystemRMStateStore when FS's operations fail due to IOException. Contributed by Zhihai Xu.

+  private int fsNumRetries;
+  private long fsRetryInterval;
+    fsNumRetries =
+        conf.getInt(YarnConfiguration.FS_RM_STATE_STORE_NUM_RETRIES,
+            YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_NUM_RETRIES);
+    fsRetryInterval =
+        conf.getLong(YarnConfiguration.FS_RM_STATE_STORE_RETRY_INTERVAL_MS,
+                YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_INTERVAL_MS);
-    fs.mkdirs(rmDTSecretManagerRoot);
-    fs.mkdirs(rmAppRoot);
-    fs.mkdirs(amrmTokenSecretManagerRoot);
+    mkdirsWithRetries(rmDTSecretManagerRoot);
+    mkdirsWithRetries(rmAppRoot);
+    mkdirsWithRetries(amrmTokenSecretManagerRoot);
-    fs.close();
+    closeWithRetries();
-    FileStatus status = getFileStatus(versionNodePath);
+    FileStatus status = getFileStatusWithRetries(versionNodePath);
-      byte[] data = readFile(versionNodePath, status.getLen());
+      byte[] data = readFileWithRetries(versionNodePath, status.getLen());
-    if (fs.exists(versionNodePath)) {
+    if (existsWithRetries(versionNodePath)) {
-      writeFile(versionNodePath, data);
+      writeFileWithRetries(versionNodePath, data);
-    FileStatus status = getFileStatus(epochNodePath);
+    FileStatus status = getFileStatusWithRetries(epochNodePath);
-      byte[] data = readFile(epochNodePath, status.getLen());
+      byte[] data = readFileWithRetries(epochNodePath, status.getLen());
-      writeFile(epochNodePath, storeData);
+      writeFileWithRetries(epochNodePath, storeData);
-    FileStatus status = getFileStatus(amrmTokenSecretManagerStateDataDir);
+    FileStatus status = getFileStatusWithRetries(
+        amrmTokenSecretManagerStateDataDir);
-    byte[] data = readFile(amrmTokenSecretManagerStateDataDir, status.getLen());
+    byte[] data = readFileWithRetries(amrmTokenSecretManagerStateDataDir,
+            status.getLen());
-      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {
+      for (FileStatus appDir : listStatusWithRetries(rmAppRoot)) {
-        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {
+        for (FileStatus childNodeStatus :
+            listStatusWithRetries(appDir.getPath())) {
-          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {
+          if (checkAndRemovePartialRecordWithRetries(
+              childNodeStatus.getPath())) {
-          byte[] childData =
-              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());
+          byte[] childData = readFileWithRetries(childNodeStatus.getPath(),
+              childNodeStatus.getLen());
-        fs.listStatus(path, new PathFilter() {
+        listStatusWithRetries(path, new PathFilter() {
-    FileStatus[] childNodes = fs.listStatus(rmDTSecretManagerRoot);
+    FileStatus[] childNodes = listStatusWithRetries(rmDTSecretManagerRoot);
-      if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {
+      if (checkAndRemovePartialRecordWithRetries(childNodeStatus.getPath())) {
-      byte[] childData = readFile(childNodePath, childNodeStatus.getLen());
+      byte[] childData = readFileWithRetries(childNodePath,
+          childNodeStatus.getLen());
-      DataInputStream fsIn = new DataInputStream(is);
-      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){
-        DelegationKey key = new DelegationKey();
-        key.readFields(fsIn);
-        rmState.rmSecretManagerState.masterKeyState.add(key);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Loaded delegation key: keyId=" + key.getKeyId()
-              + ", expirationDate=" + key.getExpiryDate());
-        }
-      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {
-        RMDelegationTokenIdentifierData identifierData =
-            new RMDelegationTokenIdentifierData();
-        identifierData.readFields(fsIn);
-        RMDelegationTokenIdentifier identifier =
-            identifierData.getTokenIdentifier();
-        long renewDate = identifierData.getRenewDate();
+      try (DataInputStream fsIn = new DataInputStream(is)) {
+        if (childNodeName.startsWith(DELEGATION_KEY_PREFIX)) {
+          DelegationKey key = new DelegationKey();
+          key.readFields(fsIn);
+          rmState.rmSecretManagerState.masterKeyState.add(key);
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Loaded delegation key: keyId=" + key.getKeyId()
+                + ", expirationDate=" + key.getExpiryDate());
+          }
+        } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {
+          RMDelegationTokenIdentifierData identifierData =
+              new RMDelegationTokenIdentifierData();
+          identifierData.readFields(fsIn);
+          RMDelegationTokenIdentifier identifier =
+              identifierData.getTokenIdentifier();
+          long renewDate = identifierData.getRenewDate();
-        rmState.rmSecretManagerState.delegationTokenState.put(identifier,
-          renewDate);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Loaded RMDelegationTokenIdentifier: " + identifier
-              + " renewDate=" + renewDate);
+          rmState.rmSecretManagerState.delegationTokenState.put(identifier,
+            renewDate);
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Loaded RMDelegationTokenIdentifier: " + identifier
+                + " renewDate=" + renewDate);
+          }
+        } else {
+          LOG.warn("Unknown file for recovering RMDelegationTokenSecretManager");
-      } else {
-        LOG.warn("Unknown file for recovering RMDelegationTokenSecretManager");
-      fsIn.close();
-    fs.mkdirs(appDirPath);
+    mkdirsWithRetries(appDirPath);
-      writeFile(nodeCreatePath, appStateData);
+      writeFileWithRetries(nodeCreatePath, appStateData);
-      writeFile(nodeCreatePath, attemptStateData);
+      writeFileWithRetries(nodeCreatePath, attemptStateData);
-    deleteFile(nodeRemovePath);
+    deleteFileWithRetries(nodeRemovePath);
-    deleteFile(nodeCreatePath);
+    deleteFileWithRetries(nodeCreatePath);
-      writeFile(nodeCreatePath, identifierData.toByteArray());
+      writeFileWithRetries(nodeCreatePath, identifierData.toByteArray());
-        if (!createFile(latestSequenceNumberPath)) {
+        if (!createFileWithRetries(latestSequenceNumberPath)) {
-        if (!renameFile(dtSequenceNumberPath, latestSequenceNumberPath)) {
+        if (!renameFileWithRetries(dtSequenceNumberPath,
+            latestSequenceNumberPath)) {
-    DataOutputStream fsOut = new DataOutputStream(os);
-    LOG.info("Storing RMDelegationKey_" + masterKey.getKeyId());
-    masterKey.write(fsOut);
-    writeFile(nodeCreatePath, os.toByteArray());
-    fsOut.close();
+    try (DataOutputStream fsOut = new DataOutputStream(os)) {
+      LOG.info("Storing RMDelegationKey_" + masterKey.getKeyId());
+      masterKey.write(fsOut);
+      writeFileWithRetries(nodeCreatePath, os.toByteArray());
+    }
-    deleteFile(nodeCreatePath);
+    deleteFileWithRetries(nodeCreatePath);
-  public synchronized void deleteStore() throws IOException {
-    if (fs.exists(rootDirPath)) {
-      fs.delete(rootDirPath, true);
+  public synchronized void deleteStore() throws Exception {
+    if (existsWithRetries(rootDirPath)) {
+      deleteFileWithRetries(rootDirPath);
+  private boolean checkAndRemovePartialRecordWithRetries(final Path record)
+      throws Exception {
+    return new FSAction<Boolean>() {
+      @Override
+      public Boolean run() throws Exception {
+        return checkAndRemovePartialRecord(record);
+      }
+    }.runWithRetries();
+  }
+
+  private void mkdirsWithRetries(final Path appDirPath) throws Exception {
+    new FSAction<Void>() {
+      @Override
+      public Void run() throws Exception {
+        fs.mkdirs(appDirPath);
+        return null;
+      }
+    }.runWithRetries();
+  }
+
+  private void writeFileWithRetries(final Path outputPath,final byte[] data)
+      throws Exception {
+    new FSAction<Void>() {
+      @Override
+      public Void run() throws Exception {
+        writeFile(outputPath, data);
+        return null;
+      }
+    }.runWithRetries();
+  }
+
+  private void deleteFileWithRetries(final Path deletePath) throws Exception {
+    new FSAction<Void>() {
+      @Override
+      public Void run() throws Exception {
+        deleteFile(deletePath);
+        return null;
+      }
+    }.runWithRetries();
+  }
+
+  private boolean renameFileWithRetries(final Path src, final Path dst)
+      throws Exception {
+    return new FSAction<Boolean>() {
+      @Override
+      public Boolean run() throws Exception {
+        return renameFile(src, dst);
+      }
+    }.runWithRetries();
+  }
+
+  private boolean createFileWithRetries(final Path newFile) throws Exception {
+    return new FSAction<Boolean>() {
+      @Override
+      public Boolean run() throws Exception {
+        return createFile(newFile);
+      }
+    }.runWithRetries();
+  }
+
+  private FileStatus getFileStatusWithRetries(final Path path)
+      throws Exception {
+    return new FSAction<FileStatus>() {
+      @Override
+      public FileStatus run() throws Exception {
+        return getFileStatus(path);
+      }
+    }.runWithRetries();
+  }
+
+  private boolean existsWithRetries(final Path path) throws Exception {
+    return new FSAction<Boolean>() {
+      @Override
+      public Boolean run() throws Exception {
+        return fs.exists(path);
+      }
+    }.runWithRetries();
+  }
+
+  private byte[] readFileWithRetries(final Path inputPath, final long len)
+      throws Exception {
+    return new FSAction<byte[]>() {
+      @Override
+      public byte[] run() throws Exception {
+        return readFile(inputPath, len);
+      }
+    }.runWithRetries();
+  }
+
+  private FileStatus[] listStatusWithRetries(final Path path)
+      throws Exception {
+    return new FSAction<FileStatus[]>() {
+      @Override
+      public FileStatus[] run() throws Exception {
+        return fs.listStatus(path);
+      }
+    }.runWithRetries();
+  }
+
+  private FileStatus[] listStatusWithRetries(final Path path,
+      final PathFilter filter) throws Exception {
+    return new FSAction<FileStatus[]>() {
+      @Override
+      public FileStatus[] run() throws Exception {
+        return fs.listStatus(path, filter);
+      }
+    }.runWithRetries();
+  }
+
+  private void closeWithRetries() throws Exception {
+    new FSAction<Void>() {
+      @Override
+      public Void run() throws Exception {
+        fs.close();
+        return null;
+      }
+    }.runWithRetries();
+  }
+
+  private abstract class FSAction<T> {
+    abstract T run() throws Exception;
+
+    T runWithRetries() throws Exception {
+      int retry = 0;
+      while (true) {
+        try {
+          return run();
+        } catch (IOException e) {
+          LOG.info("Exception while executing a FS operation.", e);
+          if (++retry > fsNumRetries) {
+            LOG.info("Maxed out FS retries. Giving up!");
+            throw e;
+          }
+          LOG.info("Retrying operation on FS. Retry no. " + retry);
+          Thread.sleep(fsRetryInterval);
+        }
+      }
+    }
+  }
+
-    // use writeFile to make sure .new file is created atomically
-    writeFile(newPath, data);
+    // use writeFileWithRetries to make sure .new file is created atomically
+    writeFileWithRetries(newPath, data);
-    if (fs.exists(dstPath)) {
-      deleteFile(dstPath);
+    if (existsWithRetries(dstPath)) {
+      deleteFileWithRetries(dstPath);
-    fs.rename(srcPath, dstPath);
+    renameFileWithRetries(srcPath, dstPath);
-      writeFile(nodeCreatePath, stateData);
+      writeFileWithRetries(nodeCreatePath, stateData);
+  @VisibleForTesting
+  public int getNumRetries() {
+    return fsNumRetries;
+  }
+
+  @VisibleForTesting
+  public long getRetryInterval() {
+    return fsRetryInterval;
+  }

INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS31 INS31 INS83 INS39 INS59 INS83 INS39 INS59 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS43 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS5 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS43 INS8 INS83 INS83 INS42 INS73 INS31 INS31 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS21 INS54 INS42 INS83 INS43 INS42 INS42 INS41 INS83 INS43 INS42 INS42 INS21 INS83 INS43 INS42 INS83 INS5 INS42 INS42 INS21 INS83 INS43 INS42 INS42 INS21 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS83 INS43 INS42 INS42 INS41 INS42 INS83 INS43 INS42 INS42 INS41 INS83 INS43 INS42 INS42 INS41 INS39 INS85 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS41 INS43 INS85 INS83 INS43 INS42 INS42 INS41 INS43 INS85 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS41 INS42 INS21 INS42 INS83 INS43 INS42 INS43 INS43 INS42 INS43 INS8 INS42 INS41 INS42 INS41 INS7 INS7 INS32 INS32 INS58 INS8 INS42 INS32 INS42 INS32 INS42 INS39 INS85 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS60 INS61 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 UPD42 UPD42 INS42 UPD42 INS54 INS42 INS42 UPD42 UPD42 MOV43 MOV59 MOV21 MOV21 MOV21 UPD42 UPD42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS39 INS59 INS9 INS8 UPD42 UPD42 UPD42 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS58 INS8 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS74 INS1 INS42 INS34 INS54 UPD42 UPD42 UPD42 UPD42 MOV43 MOV59 MOV25 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS43 INS31 INS43 INS5 INS31 INS43 INS5 INS31 INS43 INS5 INS31 INS43 INS43 MOV31 INS8 INS12 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS42 INS78 INS83 INS43 INS42 INS43 INS8 INS42 INS39 INS85 INS78 INS83 INS5 INS42 INS43 INS8 INS42 INS43 INS85 INS78 INS83 INS5 INS42 INS43 INS8 INS42 INS43 INS85 INS78 INS83 INS5 INS42 INS43 INS8 INS42 INS42 UPD83 INS43 INS42 INS41 INS44 INS8 UPD42 INS42 INS42 INS42 INS41 INS42 INS42 INS42 MOV21 INS41 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS21 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS42 INS41 INS42 INS39 INS85 INS42 INS41 INS42 INS42 INS43 INS85 INS42 INS41 INS42 INS42 INS43 INS85 INS42 INS41 INS42 INS41 INS32 MOV43 INS42 INS21 INS25 INS21 INS21 MOV32 UPD42 UPD42 INS32 INS33 INS32 INS33 INS32 INS33 INS32 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS33 INS42 INS32 INS27 INS8 INS32 INS32 UPD42 MOV42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS38 INS42 INS21 INS53 INS42 INS42 INS27 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS45 INS42 UPD42 MOV42 INS42 INS42 INS45 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL60 DEL42 DEL42 DEL32 DEL21 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL9 DEL83 DEL39 DEL42 DEL42 DEL42