HADOOP-11620. Add support for load balancing across a group of KMS for HA. Contributed by Arun Suresh.

+import java.net.MalformedURLException;
+import com.google.common.base.Strings;
+    /**
+     * This provider expects URIs in the following form :
+     * kms://<PROTO>@<AUTHORITY>/<PATH>
+     *
+     * where :
+     * - PROTO = http or https
+     * - AUTHORITY = <HOSTS>[:<PORT>]
+     * - HOSTS = <HOSTNAME>[;<HOSTS>]
+     * - HOSTNAME = string
+     * - PORT = integer
+     *
+     * If multiple hosts are provider, the Factory will create a
+     * {@link LoadBalancingKMSClientProvider} that round-robins requests
+     * across the provided list of hosts.
+     */
-    public KeyProvider createProvider(URI providerName, Configuration conf)
+    public KeyProvider createProvider(URI providerUri, Configuration conf)
-      if (SCHEME_NAME.equals(providerName.getScheme())) {
-        return new KMSClientProvider(providerName, conf);
+      if (SCHEME_NAME.equals(providerUri.getScheme())) {
+        URL origUrl = new URL(extractKMSPath(providerUri).toString());
+        String authority = origUrl.getAuthority();
+        // check for ';' which delimits the backup hosts
+        if (Strings.isNullOrEmpty(authority)) {
+          throw new IOException(
+              "No valid authority in kms uri [" + origUrl + "]");
+        }
+        // Check if port is present in authority
+        // In the current scheme, all hosts have to run on the same port
+        int port = -1;
+        String hostsPart = authority;
+        if (authority.contains(":")) {
+          String[] t = authority.split(":");
+          try {
+            port = Integer.parseInt(t[1]);
+          } catch (Exception e) {
+            throw new IOException(
+                "Could not parse port in kms uri [" + origUrl + "]");
+          }
+          hostsPart = t[0];
+        }
+        return createProvider(providerUri, conf, origUrl, port, hostsPart);
+
+    private KeyProvider createProvider(URI providerUri, Configuration conf,
+        URL origUrl, int port, String hostsPart) throws IOException {
+      String[] hosts = hostsPart.split(";");
+      if (hosts.length == 1) {
+        return new KMSClientProvider(providerUri, conf);
+      } else {
+        KMSClientProvider[] providers = new KMSClientProvider[hosts.length];
+        for (int i = 0; i < hosts.length; i++) {
+          try {
+            providers[i] =
+                new KMSClientProvider(
+                    new URI("kms", origUrl.getProtocol(), hosts[i], port,
+                        origUrl.getPath(), null, null), conf);
+          } catch (URISyntaxException e) {
+            throw new IOException("Could not instantiate KMSProvider..", e);
+          }
+        }
+        return new LoadBalancingKMSClientProvider(providers, conf);
+      }
+    }
-    Path path = ProviderUtils.unnestUri(uri);
-    URL url = path.toUri().toURL();
-    kmsUrl = createServiceURL(url);
-    if ("https".equalsIgnoreCase(url.getProtocol())) {
+    kmsUrl = createServiceURL(extractKMSPath(uri));
+    if ("https".equalsIgnoreCase(new URL(kmsUrl).getProtocol())) {
-  private String createServiceURL(URL url) throws IOException {
-    String str = url.toExternalForm();
+  private static Path extractKMSPath(URI uri) throws MalformedURLException, IOException {
+    return ProviderUtils.unnestUri(uri);
+  }
+
+  private static String createServiceURL(Path path) throws IOException {
+    String str = new URL(path.toString()).toExternalForm();
+
+  @VisibleForTesting
+  String getKMSUrl() {
+    return kmsUrl;
+  }

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS83 INS83 MOV43 INS42 INS44 INS43 INS43 INS8 INS83 INS78 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS43 INS42 INS42 INS42 INS41 UPD43 UPD42 INS42 INS42 INS41 INS65 UPD42 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 INS39 INS42 INS43 INS42 INS42 INS60 INS25 INS42 MOV32 UPD42 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS8 INS42 INS42 INS42 INS5 INS59 INS27 MOV8 INS8 INS42 INS60 INS60 INS25 INS60 INS60 INS25 INS41 INS43 INS85 INS42 INS32 INS40 INS34 INS60 INS24 INS41 INS32 INS14 INS14 UPD42 INS43 INS59 INS43 INS59 INS32 INS8 INS39 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS42 INS45 INS5 INS59 INS58 INS27 INS37 INS8 INS14 INS42 UPD42 MOV42 INS43 INS42 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS53 INS42 INS38 INS42 INS42 INS42 INS42 INS42 INS45 INS60 INS54 INS21 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 INS54 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS14 INS34 INS5 INS59 INS8 INS12 INS7 INS42 INS5 INS40 INS42 INS34 INS8 INS12 INS42 INS42 INS32 INS42 INS43 INS27 INS43 INS85 INS42 INS32 INS21 INS44 INS8 INS42 INS2 INS43 INS85 INS21 INS44 INS8 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS45 INS7 INS43 INS42 INS53 INS42 INS34 INS42 INS7 INS43 INS42 INS53 INS42 INS32 INS42 INS14 INS2 INS14 INS42 INS14 INS42 INS42 INS2 INS43 INS27 INS42 INS42 INS43 INS14 INS42 INS43 INS45 INS42 INS42 INS34 INS42 INS45 INS42 INS45 INS42 INS43 INS45 INS32 INS2 INS42 INS32 INS33 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42