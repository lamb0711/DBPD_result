HDFS-1073. Redesign the NameNode's storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_BACKUP_HTTP_ADDRESS_DEFAULT;
+import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_BACKUP_HTTP_ADDRESS_KEY;
+import static org.apache.hadoop.hdfs.server.common.Util.now;
+
+import java.io.IOException;
-import java.util.Collection;
+import java.util.List;
-
-import org.apache.hadoop.hdfs.protocol.FSConstants;
-import org.apache.hadoop.hdfs.server.common.HdfsConstants.NamenodeRole;
-import static org.apache.hadoop.hdfs.server.common.Util.now;
-import org.apache.hadoop.hdfs.server.namenode.FSImage.CheckpointStates;
-import org.apache.hadoop.hdfs.server.namenode.NNStorage.NameNodeDirType;
-import org.apache.hadoop.hdfs.server.namenode.NNStorage.NameNodeFile;
-import org.apache.hadoop.hdfs.server.protocol.CheckpointCommand;
-import org.apache.hadoop.hdfs.server.protocol.NamenodeProtocol;
-import org.apache.hadoop.hdfs.server.protocol.NamenodeCommand;
-import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.server.common.HdfsConstants.NamenodeRole;
+import org.apache.hadoop.hdfs.server.protocol.CheckpointCommand;
+import org.apache.hadoop.hdfs.server.protocol.NamenodeCommand;
+import org.apache.hadoop.hdfs.server.protocol.NamenodeProtocol;
+import org.apache.hadoop.hdfs.server.protocol.RemoteEditLog;
+import org.apache.hadoop.hdfs.server.protocol.RemoteEditLogManifest;
+import org.apache.hadoop.io.MD5Hash;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_BACKUP_HTTP_ADDRESS_KEY;
-import static org.apache.hadoop.hdfs.DFSConfigKeys.DFS_NAMENODE_BACKUP_HTTP_ADDRESS_DEFAULT;
+
+import com.google.common.collect.Lists;
-  private long checkpointSize;    // size (in MB) of current Edit Log
+  private long checkpointTxnCount;    // size (in MB) of current Edit Log
+      LOG.warn("Checkpointer got exception", e);
+  @SuppressWarnings("deprecation")
-    checkpointSize = conf.getLong(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_SIZE_KEY, 
-                                  DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_SIZE_DEFAULT);
+    checkpointTxnCount = conf.getLong(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_TXNS_KEY, 
+                                  DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_TXNS_DEFAULT);
+    SecondaryNameNode.warnForDeprecatedConfigs(conf);
-    LOG.info("Log Size Trigger  : " + checkpointSize + " bytes " +
-             "(" + checkpointSize/1024 + " KB)");
+    LOG.info("Log Size Trigger  : " + checkpointTxnCount + " txns ");
-    if(!backupNode.shouldCheckpointAtStartup())
+    if (!backupNode.shouldCheckpointAtStartup()) {
+    }
-          long size = getJournalSize();
-          if(size >= checkpointSize)
+          long txns = countUncheckpointedTxns();
+          if(txns >= checkpointTxnCount)
-  private long getJournalSize() throws IOException {
-    // If BACKUP node has been loaded
-    // get edits size from the local file. ACTIVE has the same.
-    if(backupNode.isRole(NamenodeRole.BACKUP)
-        && getFSImage().getEditLog().isOpen())
-      return backupNode.journalSize();
-    // Go to the ACTIVE node for its size
-    return getNamenode().journalSize(backupNode.getRegistration());
-  }
-
-  /**
-   * Download <code>fsimage</code> and <code>edits</code>
-   * files from the remote name-node.
-   */
-  private void downloadCheckpoint(CheckpointSignature sig) throws IOException {
-    // Retrieve image file
-    String fileid = "getimage=1";
-    Collection<File> list = getFSImage()
-      .getStorage().getFiles(NameNodeFile.IMAGE, NameNodeDirType.IMAGE);
-    File[] files = list.toArray(new File[list.size()]);
-    assert files.length > 0 : "No checkpoint targets.";
-    String nnHttpAddr = backupNode.nnHttpAddress;
-    TransferFsImage.getFileClient(nnHttpAddr, fileid, files, false);
-    LOG.info("Downloaded file " + files[0].getName() + " size " +
-             files[0].length() + " bytes.");
-
-    // Retrieve edits file
-    fileid = "getedit=1";
-    list = getFSImage()
-      .getStorage().getFiles(NameNodeFile.EDITS, NameNodeDirType.EDITS);
-    files = list.toArray(new File[list.size()]);
-    assert files.length > 0 : "No checkpoint targets.";
-    TransferFsImage.getFileClient(nnHttpAddr, fileid, files, false);
-    LOG.info("Downloaded file " + files[0].getName() + " size " +
-        files[0].length() + " bytes.");
-  }
-
-  /**
-   * Copy the new image into remote name-node.
-   */
-  private void uploadCheckpoint(CheckpointSignature sig) throws IOException {
-    // Use the exact http addr as specified in config to deal with ip aliasing
-    InetSocketAddress httpSocAddr = backupNode.getHttpAddress();
-    int httpPort = httpSocAddr.getPort();
-    String fileid = "putimage=1&port=" + httpPort +
-      "&machine=" + infoBindAddress +
-      "&token=" + sig.toString() +
-      "&newChecksum=" + getFSImage().getStorage().getImageDigest().toString();
-    LOG.info("Posted URL " + backupNode.nnHttpAddress + fileid);
-    TransferFsImage.getFileClient(backupNode.nnHttpAddress, 
-        fileid, (File[])null, false);
+  private long countUncheckpointedTxns() throws IOException {
+    long curTxId = getNamenode().getTransactionID();
+    long uncheckpointedTxns = curTxId -
+      getFSImage().getStorage().getMostRecentCheckpointTxId();
+    assert uncheckpointedTxns >= 0;
+    return uncheckpointedTxns;
+    BackupImage bnImage = getFSImage();
+    NNStorage bnStorage = bnImage.getStorage();
+
+    bnImage.freezeNamespaceAtNextRoll();
+    
+    bnImage.waitUntilNamespaceFrozen();
+    
-    assert FSConstants.LAYOUT_VERSION == sig.getLayoutVersion() :
-      "Signature should have current layout version. Expected: "
-      + FSConstants.LAYOUT_VERSION + " actual "+ sig.getLayoutVersion();
-    assert !backupNode.isRole(NamenodeRole.CHECKPOINT) ||
-      cpCmd.isImageObsolete() : "checkpoint node should always download image.";
-    backupNode.setCheckpointState(CheckpointStates.UPLOAD_START);
-    if(cpCmd.isImageObsolete()) {
-      // First reset storage on disk and memory state
-      backupNode.resetNamespace();
-      downloadCheckpoint(sig);
+
+    // Make sure we're talking to the same NN!
+    sig.validateStorageInfo(bnImage);
+
+    long lastApplied = bnImage.getLastAppliedTxId();
+    LOG.debug("Doing checkpoint. Last applied: " + lastApplied);
+    RemoteEditLogManifest manifest =
+      getNamenode().getEditLogManifest(bnImage.getLastAppliedTxId());
+
+    if (!manifest.getLogs().isEmpty()) {
+      RemoteEditLog firstRemoteLog = manifest.getLogs().get(0);
+      // we don't have enough logs to roll forward using only logs. Need
+      // to download and load the image.
+      if (firstRemoteLog.getStartTxId() > lastApplied + 1) {
+        LOG.info("Unable to roll forward using only logs. Downloading " +
+            "image with txid " + sig.mostRecentCheckpointTxId);
+        MD5Hash downloadedHash = TransferFsImage.downloadImageToStorage(
+            backupNode.nnHttpAddress, sig.mostRecentCheckpointTxId,
+            bnStorage, true);
+        bnImage.saveDigestAndRenameCheckpointImage(
+            sig.mostRecentCheckpointTxId, downloadedHash);
+        
+        LOG.info("Loading image with txid " + sig.mostRecentCheckpointTxId);
+        File file = bnStorage.findImageFile(sig.mostRecentCheckpointTxId);
+        bnImage.reloadFromImageFile(file);
+      }
+      
+      lastApplied = bnImage.getLastAppliedTxId();
+      if (firstRemoteLog.getStartTxId() > lastApplied + 1) {
+        throw new IOException("No logs to roll forward from " + lastApplied);
+      }
+  
+      // get edits files
+      for (RemoteEditLog log : manifest.getLogs()) {
+        TransferFsImage.downloadEditsToStorage(
+            backupNode.nnHttpAddress, log, bnStorage);
+      }
+  
+      rollForwardByApplyingLogs(manifest, bnImage);
-    BackupImage bnImage = getFSImage();
-    bnImage.getStorage().setBlockPoolID(backupNode.getBlockPoolId());
-    bnImage.getStorage().setClusterID(backupNode.getClusterId());
-    bnImage.loadCheckpoint(sig);
-    sig.validateStorageInfo(bnImage);
-    bnImage.saveCheckpoint();
+    long txid = bnImage.getLastAppliedTxId();
+    bnImage.saveFSImageInAllDirs(txid);
+    bnStorage.writeAll();
-    if(cpCmd.needToReturnImage())
-      uploadCheckpoint(sig);
+    if(cpCmd.needToReturnImage()) {
+      TransferFsImage.uploadImageFromStorage(
+          backupNode.nnHttpAddress, getImageListenAddress(),
+          bnStorage, txid);
+    }
-    bnImage.convergeJournalSpool();
+    if (backupNode.getRole() == NamenodeRole.BACKUP) {
+      bnImage.convergeJournalSpool();
+    }
-    if(backupNode.isRole(NamenodeRole.CHECKPOINT))
-        getFSImage().getEditLog().close();
+    
+    long imageSize = bnImage.getStorage().getFsImageName(txid).length();
-        + " New Image Size: " + bnImage.getStorage().getFsImageName().length());
+        + " New Image Size: " + imageSize);
+  }
+
+  private InetSocketAddress getImageListenAddress() {
+    InetSocketAddress httpSocAddr = backupNode.getHttpAddress();
+    int httpPort = httpSocAddr.getPort();
+    return new InetSocketAddress(infoBindAddress, httpPort);
+  }
+
+  static void rollForwardByApplyingLogs(
+      RemoteEditLogManifest manifest,
+      FSImage dstImage) throws IOException {
+    NNStorage dstStorage = dstImage.getStorage();
+  
+    List<File> editsFiles = Lists.newArrayList();
+    for (RemoteEditLog log : manifest.getLogs()) {
+      File f = dstStorage.findFinalizedEditsFile(
+          log.getStartTxId(), log.getEndTxId());
+      if (log.getStartTxId() > dstImage.getLastAppliedTxId()) {
+        editsFiles.add(f);
+      }
+    }
+    LOG.info("Checkpointer about to load edits from " +
+        editsFiles.size() + " file(s).");
+    dstImage.loadEdits(editsFiles);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS79 MOV83 MOV39 UPD42 MOV42 MOV43 INS8 MOV60 MOV21 INS83 INS43 INS42 INS8 UPD83 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 MOV43 INS8 UPD42 INS42 INS45 INS21 INS60 MOV60 INS6 INS41 INS60 INS21 INS21 INS60 INS21 INS60 INS25 INS60 INS25 INS60 INS42 MOV60 MOV60 MOV41 UPD43 UPD42 INS43 INS42 MOV60 MOV60 INS70 MOV21 MOV21 INS32 INS8 INS39 INS59 INS39 INS27 INS42 INS43 INS59 INS32 INS32 INS39 INS59 INS32 INS43 INS59 INS38 INS8 INS39 INS59 INS8 INS27 INS8 INS39 INS59 INS14 UPD42 UPD42 MOV42 INS43 UPD74 MOV74 INS59 INS44 INS32 INS8 UPD42 INS42 INS42 INS42 INS27 MOV21 INS42 INS32 UPD42 INS27 INS42 INS34 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS32 MOV32 INS60 INS25 INS21 INS25 INS70 MOV21 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS21 INS32 INS40 MOV21 INS42 INS32 INS43 INS42 INS42 UPD42 MOV42 UPD42 UPD43 INS42 INS32 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS60 INS25 UPD42 UPD42 UPD42 INS21 UPD40 UPD40 MOV45 UPD42 MOV42 UPD45 MOV45 MOV32 UPD42 MOV42 INS42 MOV32 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 INS42 INS32 INS42 INS32 INS32 UPD42 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS44 INS32 INS8 INS32 UPD42 MOV42 UPD42 MOV42 MOV32 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 MOV43 INS59 INS27 INS8 UPD45 UPD45 INS32 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS32 INS27 INS21 INS60 MOV21 INS21 INS60 MOV21 INS42 INS32 INS32 INS27 INS53 INS43 INS42 INS42 INS42 MOV21 INS42 INS42 INS42 INS42 UPD42 INS40 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 INS32 MOV21 INS42 UPD42 INS42 INS42 INS45 INS42 INS32 INS42 INS34 INS42 INS42 INS42 INS34 INS32 INS43 INS59 INS32 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS34 INS14 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS42 INS42 INS32 UPD42 UPD42 UPD40 INS42 INS42 INS42 INS27 INS42 INS32 UPD42 UPD42 INS42 MOV43 INS27 INS42 UPD42 INS40 UPD42 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 INS45 INS45 INS40 INS42 INS42 INS40 INS40 INS42 INS9 INS45 INS40 UPD42 MOV42 UPD42 MOV42 INS40 INS45 INS42 UPD42 UPD42 UPD42 UPD42 DEL45 DEL42 DEL34 DEL27 DEL27 DEL45 DEL27 DEL40 DEL40 DEL42 DEL42 DEL40 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL41 DEL25 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL45 DEL59 DEL60 DEL40 DEL34 DEL27 DEL45 DEL6 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL45 DEL42 DEL34 DEL2 DEL32 DEL45 DEL42 DEL34 DEL2 DEL32 DEL45 DEL27 DEL32 DEL21 DEL42 DEL45 DEL7 DEL21 DEL42 DEL32 DEL32 DEL42 DEL40 DEL40 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL85 DEL5 DEL32 DEL3 DEL32 DEL7 DEL21 DEL40 DEL34 DEL27 DEL45 DEL6 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL42 DEL45 DEL40 DEL42 DEL27 DEL32 DEL21 DEL8 DEL31 DEL40 DEL32 DEL27 DEL40 DEL45 DEL32 DEL27 DEL6 DEL38 DEL32 DEL27 DEL45 DEL6 DEL32 DEL8 DEL25 DEL42 DEL32 DEL32 DEL21 DEL40 DEL21 DEL42 DEL32 DEL40 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL21 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL3 DEL42 DEL43 DEL42 DEL40 DEL59 DEL42 DEL42 DEL9 DEL42 DEL34 DEL2 DEL45 DEL42 DEL34 DEL2 DEL42 DEL32 DEL40 DEL85 DEL5 DEL33 DEL11 DEL9