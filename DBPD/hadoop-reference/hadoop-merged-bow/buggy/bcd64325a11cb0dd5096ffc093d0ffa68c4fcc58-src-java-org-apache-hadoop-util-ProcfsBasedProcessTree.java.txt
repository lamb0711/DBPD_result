Merged src/core, src/test/core, src/contrib/eclipse-plugin, and
src/contrib/ec2 from trunk 776174:784663


git-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68

+  // to enable testing, using this variable which can be configured
+  // to a test directory.
+  private String procfsDir;
+  
+    this(pid, setsidUsed, sigkillInterval, PROCFS);
+  }
+
+  /**
+   * Build a new process tree rooted at the pid.
+   * 
+   * This method is provided mainly for testing purposes, where
+   * the root of the proc file system can be adjusted.
+   * 
+   * @param pid root of the process tree
+   * @param setsidUsed true, if setsid was used for the root pid
+   * @param sigkillInterval how long to wait between a SIGTERM and SIGKILL 
+   *                        when killing a process tree
+   * @param procfsDir the root of a proc file system - only used for testing. 
+   */
+  public ProcfsBasedProcessTree(String pid, boolean setsidUsed,
+                                long sigkillInterval, String procfsDir) {
+    this.procfsDir = procfsDir;
-
+  
+      
+      // cache the processTree to get the age for processes
+      Map<Integer, ProcessInfo> oldProcs = 
+              new HashMap<Integer, ProcessInfo>(processTree);
-        if (constructProcessInfo(pInfo) != null) {
+        if (constructProcessInfo(pInfo, procfsDir) != null) {
+      // update age values.
+      for (Map.Entry<Integer, ProcessInfo> procs : processTree.entrySet()) {
+        ProcessInfo oldInfo = oldProcs.get(procs.getKey());
+        if (oldInfo != null) {
+          if (procs.getValue() != null) {
+            procs.getValue().updateAge(oldInfo);  
+          }
+        }
+      }
+
+    // include all processes.. all processes will be older than 0.
+    return getCumulativeVmem(0);
+  }
+
+  /**
+   * Get the cumulative virtual memory used by all the processes in the
+   * process-tree that are older than the passed in age.
+   * 
+   * @param olderThanAge processes above this age are included in the
+   *                      memory addition
+   * @return cumulative virtual memory used by the process-tree in bytes,
+   *          for processes older than this age.
+   */
+  public long getCumulativeVmem(int olderThanAge) {
-      if (p != null) {
+      if ((p != null) && (p.getAge() > olderThanAge)) {
-
+  
-    String[] processDirs = (new File(PROCFS)).list();
+    String[] processDirs = (new File(procfsDir)).list();
-        if ((new File(PROCFS + dir)).isDirectory()) {
+        if ((new File(procfsDir, dir)).isDirectory()) {
+    return constructProcessInfo(pinfo, PROCFS);
+  }
+
+  /**
+   * Construct the ProcessInfo using the process' PID and procfs rooted at the
+   * specified directory and return the same. It is provided mainly to assist
+   * testing purposes.
+   * 
+   * Returns null on failing to read from procfs,
+   *
+   * @param pinfo ProcessInfo that needs to be updated
+   * @param procfsDir root of the proc file system
+   * @return updated ProcessInfo, null on errors.
+   */
+  private static ProcessInfo constructProcessInfo(ProcessInfo pinfo, 
+                                                    String procfsDir) {
-    // Read "/proc/<pid>/stat" file
+    // Read "procfsDir/<pid>/stat" file - typically /proc/<pid>/stat
-      fReader = new FileReader(PROCFS + pinfo.getPid() + "/stat");
+      File pidDir = new File(procfsDir, String.valueOf(pinfo.getPid()));
+      fReader = new FileReader(new File(pidDir, "/stat"));
-        pinfo.update(m.group(2), Integer.parseInt(m.group(3)), Integer
+        pinfo.updateProcessInfo(m.group(2), Integer.parseInt(m.group(3)), Integer
-
+    // how many times has this process been seen alive
+    private int age; 
+      // seeing this the first time.
+      this.age = 1;
+    public int getAge() {
+      return age;
+    }
+    
-    public void update(String name, Integer ppid, Integer pgrpId,
+    public void updateProcessInfo(String name, Integer ppid, Integer pgrpId,
+    public void updateAge(ProcessInfo oldInfo) {
+      this.age = oldInfo.age + 1;
+    }
+    

INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS8 INS29 INS44 MOV29 INS83 INS39 INS42 INS8 INS29 INS44 MOV29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS44 INS23 INS31 INS31 INS42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS21 INS41 INS65 INS65 INS65 INS39 INS42 INS42 INS43 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS83 INS39 INS59 INS83 INS39 INS42 INS8 UPD42 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS7 INS32 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS32 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS21 INS41 INS43 INS42 INS21 INS22 INS42 INS60 INS70 INS42 INS34 MOV32 INS42 INS42 INS42 INS60 INS7 INS42 INS42 INS7 INS52 INS42 INS74 INS59 INS44 INS32 INS8 INS27 UPD42 INS43 INS59 INS22 INS34 INS22 INS27 INS43 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS60 INS25 INS36 INS36 INS42 INS42 INS14 INS14 INS52 INS42 INS52 INS42 INS40 INS34 INS42 INS42 INS42 INS74 INS42 INS43 INS43 INS43 INS43 INS59 INS27 INS8 MOV27 INS27 INS42 MOV32 INS43 INS42 INS32 MOV43 INS14 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS25 INS32 INS42 UPD42 INS42 INS42 INS42 MOV32 INS43 INS42 INS45 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS21 UPD42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL27 DEL42 DEL45 DEL27 DEL14