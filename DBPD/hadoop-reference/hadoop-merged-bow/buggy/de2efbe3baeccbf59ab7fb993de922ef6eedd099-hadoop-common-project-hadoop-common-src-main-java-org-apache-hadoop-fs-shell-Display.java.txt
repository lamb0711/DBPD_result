HADOOP-8597. Permit FsShell's text command to read Avro files.  Contributed by Ivan Vladimirov.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1383607 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
+import org.apache.avro.file.DataFileReader;
+import org.apache.avro.file.FileReader;
+import org.apache.avro.generic.GenericDatumReader;
+import org.apache.avro.generic.GenericDatumWriter;
+import org.apache.avro.io.DatumWriter;
+import org.apache.avro.io.EncoderFactory;
+import org.apache.avro.io.JsonEncoder;
+import org.apache.avro.Schema;
+import org.codehaus.jackson.JsonEncoding;
+import org.codehaus.jackson.JsonFactory;
+import org.codehaus.jackson.JsonGenerator;
+import org.codehaus.jackson.util.MinimalPrettyPrinter;
-   * encodings. 
+   * and Avro encodings. 
-      "The allowed formats are zip and TextRecordInputStream.";
+      "The allowed formats are zip and TextRecordInputStream and Avro.";
+        case 0x4f62: { // 'O' 'b'
+          if (i.readByte() == 'j') {
+            i.close();
+            return new AvroFileInputStream(item.stat);
+          }
+          break;
+        }
+
+  /**
+   * This class transforms a binary Avro data file into an InputStream
+   * with data that is in a human readable JSON format.
+   */
+  protected static class AvroFileInputStream extends InputStream {
+    private int pos;
+    private byte[] buffer;
+    private ByteArrayOutputStream output;
+    private FileReader fileReader;
+    private DatumWriter<Object> writer;
+    private JsonEncoder encoder;
+
+    public AvroFileInputStream(FileStatus status) throws IOException {
+      pos = 0;
+      buffer = new byte[0];
+      GenericDatumReader<Object> reader = new GenericDatumReader<Object>();
+      fileReader =
+        DataFileReader.openReader(new File(status.getPath().toUri()), reader);
+      Schema schema = fileReader.getSchema();
+      writer = new GenericDatumWriter<Object>(schema);
+      output = new ByteArrayOutputStream();
+      JsonGenerator generator =
+        new JsonFactory().createJsonGenerator(output, JsonEncoding.UTF8);
+      MinimalPrettyPrinter prettyPrinter = new MinimalPrettyPrinter();
+      prettyPrinter.setRootValueSeparator(System.getProperty("line.separator"));
+      generator.setPrettyPrinter(prettyPrinter);
+      encoder = EncoderFactory.get().jsonEncoder(schema, generator);
+    }
+
+    /**
+     * Read a single byte from the stream.
+     */
+    @Override
+    public int read() throws IOException {
+      if (pos < buffer.length) {
+        return buffer[pos++];
+      }
+      if (!fileReader.hasNext()) {
+        return -1;
+      }
+      writer.write(fileReader.next(), encoder);
+      encoder.flush();
+      if (!fileReader.hasNext()) {
+        // Write a new line after the last Avro record.
+        output.write(System.getProperty("line.separator").getBytes());
+        output.flush();
+      }
+      pos = 0;
+      buffer = output.toByteArray();
+      output.reset();
+      return read();
+    }
+
+    /**
+      * Close the stream.
+      */
+    @Override
+    public void close() throws IOException {
+      fileReader.close();
+      output.close();
+      super.close();
+    }
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS55 INS29 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS65 INS42 INS83 INS39 INS59 INS83 INS5 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 UPD66 INS66 INS66 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS21 INS21 INS60 INS21 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS21 INS65 INS42 INS42 INS25 INS25 INS21 INS21 INS25 INS21 INS21 INS21 INS41 INS65 INS42 INS42 INS21 INS21 INS21 UPD45 INS49 INS8 INS42 INS42 INS42 INS7 INS7 INS74 INS59 INS7 INS43 INS59 INS7 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS7 INS66 INS27 INS8 INS38 INS8 INS32 INS32 INS38 INS8 INS7 INS7 INS32 INS32 INS66 INS32 INS32 INS48 INS34 INS25 INS10 INS42 INS34 INS42 INS3 INS43 INS43 INS42 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS41 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS21 INS21 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS5 INS34 INS42 INS42 INS74 INS42 INS42 INS14 INS42 INS42 INS42 INS74 INS42 INS43 INS14 INS42 INS42 INS40 INS43 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS38 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS13 INS21 INS41 INS39 INS85 INS43 INS43 INS43 INS32 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS37 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS40 INS42 INS42 INS42 INS42 INS45 INS42