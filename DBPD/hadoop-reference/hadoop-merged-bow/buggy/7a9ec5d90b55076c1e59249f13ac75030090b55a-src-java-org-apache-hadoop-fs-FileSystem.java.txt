Reverting HADOOP-5901. FileSystem.fixName() has unexpected behaviour.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@890941 13f79535-47bb-0310-9956-ffa450edef68

-import java.net.URISyntaxException;
-    try {
-      String uri = conf.get(FS_DEFAULT_NAME_KEY, null);
-      checkName(uri);
-      return new URI(uri);
-    } catch (Exception e) {
-      // fs.default.name not set, or set to an invalid value. Create
-      // one based on a known-good URI
-      return URI.create(DEFAULT_FS);
-    }
+    return URI.create(fixName(conf.get(FS_DEFAULT_NAME_KEY, DEFAULT_FS)));
-   * @throws IOException if the URI is invalid.
-  public static void setDefaultUri(Configuration conf, String uri)
-      throws IOException {
-    checkName(uri);
-    setDefaultUri(conf, URI.create(uri));
+  public static void setDefaultUri(Configuration conf, String uri) {
+    setDefaultUri(conf, URI.create(fixName(uri)));
-
-  /** Checks that a FileSystem name is given in an understandable format.
-   * The old "local" alias for "file:///" is unsupported, as are any
-   * URIs without a scheme component.
-   * @throws IOException if a name is in an unsupported format
-   */
-  private static void checkName(String name) throws IOException {
-    if (null == name) {
-      throw new IOException("Null FS name provided to checkName()");
-    } else if ("local".equals(name)) {
-      throw new IOException ("FileSystem 'local' is not supported; use 'file:///'");
-    } else {
-      // Try parsing this into a URI
-      try {
-        URI uri = new URI(name);
-
-        // No scheme; don't know how to parse this.
-        if (null == uri.getScheme()) {
-          throw new IOException("FileSystem name '" + name
-              + "' is provided in an unsupported format. (Try 'hdfs://"
-              + name + "' instead?)");
-        }
-
-        // This may have been a misparse. java.net.URI specifies that
-        // a URI is of the form:
-        // URI ::= [SCHEME-PART:]SCHEME-SPECIFIC-PART
-        //
-        // The scheme-specific-part may be parsed in numerous ways, but if
-        // it starts with a '/' character, that makes it a "hierarchical URI",
-        // subject to the following parsing:
-        // SCHEME-SPECIFIC-PART ::= "//" AUTHORITY-PART
-        // AUTHORITY-PART ::= [USER-INFO-PART] HOSTNAME [ ":" PORT ]
-        //
-        // In Hadoop, we require a host-based authority as well.
-        // java.net.URI parses left-to-right, so deprecated hostnames of the
-        // form 'foo:8020' will have 'foo' as their scheme and '8020' as their
-        // scheme-specific-part. We don't want this behavior.
-        if (null == uri.getAuthority()) {
-          throw new IOException("FileSystem name '" + name
-              + "' is provided in an unsupported format. (Try 'hdfs://"
-              + name + "' instead?)");
-        }
-      } catch (URISyntaxException use) {
-        throw new IOException("FileSystem name cannot be understood as a URI", use);
-      }
+  
+  /** Update old-format filesystem names, for back-compatibility.  This should
+   * eventually be replaced with a checkName() method that throws an exception
+   * for old-format names. */ 
+  private static String fixName(String name) {
+    // convert old-format name to new-format name
+    if (name.equals("local")) {         // "local" is now "file:///".
+      LOG.warn("\"local\" is a deprecated filesystem name."
+               +" Use \"file:///\" instead.");
+      name = "file:///";
+    } else if (name.indexOf('/')==-1) {   // unqualified is "hdfs://"
+      LOG.warn("\""+name+"\" is a deprecated filesystem name."
+               +" Use \"hdfs://"+name+"/\" instead.");
+      name = "hdfs://"+name;
+    return name;

MOV43 UPD42 INS41 INS25 INS41 INS32 UPD66 UPD66 UPD66 INS32 INS8 INS25 INS42 INS42 INS42 INS32 INS42 INS42 MOV45 INS21 INS21 MOV27 INS8 INS42 INS32 INS32 INS32 INS7 INS38 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS42 MOV42 UPD42 MOV42 INS42 INS27 INS42 INS45 UPD42 UPD42 INS13 INS34 INS32 INS7 INS45 INS45 INS42 INS42 INS27 INS42 INS27 UPD45 MOV45 MOV42 INS45 UPD45 MOV45 MOV42 UPD45 MOV45 UPD45 MOV45 MOV42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL41 DEL8 DEL12 DEL54 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL66 DEL65 DEL39 DEL42 DEL43 DEL33 DEL33 DEL42 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL27 DEL14 DEL53 DEL8 DEL25 DEL33 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25