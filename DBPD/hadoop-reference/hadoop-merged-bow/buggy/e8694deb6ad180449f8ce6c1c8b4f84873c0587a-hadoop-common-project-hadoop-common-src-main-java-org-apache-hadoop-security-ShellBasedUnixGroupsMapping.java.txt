HADOOP-13817. Add a finite shell command timeout to ShellBasedUnixGroupsMapping. (harsh)

+import java.util.Arrays;
+import java.util.concurrent.TimeUnit;
+
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Joiner;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.conf.Configured;
+import org.apache.hadoop.fs.CommonConfigurationKeys;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-public class ShellBasedUnixGroupsMapping
+public class ShellBasedUnixGroupsMapping extends Configured
-  
-  private static final Log LOG =
-    LogFactory.getLog(ShellBasedUnixGroupsMapping.class);
+
+  @VisibleForTesting
+  protected static final Logger LOG =
+      LoggerFactory.getLogger(ShellBasedUnixGroupsMapping.class);
+
+  private long timeout = 0L;
+  private static final List<String> EMPTY_GROUPS = new LinkedList<>();
+
+  @Override
+  public void setConf(Configuration conf) {
+    super.setConf(conf);
+    if (conf != null) {
+      timeout = conf.getTimeDuration(
+          CommonConfigurationKeys.
+              HADOOP_SECURITY_GROUP_SHELL_COMMAND_TIMEOUT_SECS,
+          CommonConfigurationKeys.
+              HADOOP_SECURITY_GROUP_SHELL_COMMAND_TIMEOUT_SECS_DEFAULT,
+          TimeUnit.SECONDS);
+    }
+  }
-        Shell.getGroupsForUserCommand(userName), null, null, 0L);
+        getGroupsForUserCommand(userName), null, null, timeout);
+  }
+
+  /**
+   * Returns just the shell command to be used to fetch a user's groups list.
+   * This is mainly separate to make some tests easier.
+   * @param userName The username that needs to be passed into the command built
+   * @return An appropriate shell command with arguments
+   */
+  protected String[] getGroupsForUserCommand(String userName) {
+    return Shell.getGroupsForUserCommand(userName);
-        Shell.getGroupsIDForUserCommand(userName), null, null, 0L);
+        getGroupsIDForUserCommand(userName), null, null, timeout);
+  }
+
+  /**
+   * Returns just the shell command to be used to fetch a user's group IDs list.
+   * This is mainly separate to make some tests easier.
+   * @param userName The username that needs to be passed into the command built
+   * @return An appropriate shell command with arguments
+   */
+  protected String[] getGroupsIDForUserCommand(String userName) {
+    return Shell.getGroupsIDForUserCommand(userName);
-        LOG.warn("unable to return groups for user " + user, pge);
-        return new LinkedList<>();
+        LOG.warn("unable to return groups for user {}", user, pge);
+        return EMPTY_GROUPS;
+      }
+    } catch (IOException ioe) {
+      // If its a shell executor timeout, indicate so in the message
+      // but treat the result as empty instead of throwing it up,
+      // similar to how partial resolution failures are handled above
+      if (executor.isTimedOut()) {
+        LOG.warn(
+            "Unable to return groups for user '{}' as shell group lookup " +
+            "command '{}' ran longer than the configured timeout limit of " +
+            "{} seconds.",
+            user,
+            Joiner.on(' ').join(executor.getExecString()),
+            timeout
+        );
+        return EMPTY_GROUPS;
+      } else {
+        // If its not an executor timeout, we should let the caller handle it
+        throw ioe;
-   * @throws PartialGroupNameException
+   * @throws PartialGroupNameException if the resolution fails or times out
-      LOG.warn("Some group names for '" + userName + "' are not resolvable. "
-          + errMessage);
+      LOG.warn("Some group names for '{}' are not resolvable. {}",
+          userName, errMessage);
+      ShellCommandExecutor partialResolver = createGroupIDExecutor(userName);
-        ShellCommandExecutor exec2 = createGroupIDExecutor(userName);
-        exec2.execute();
-        return parsePartialGroupNames(groupNames, exec2.getOutput());
+        partialResolver.execute();
+        return parsePartialGroupNames(
+            groupNames, partialResolver.getOutput());
-        throw new PartialGroupNameException("failed to get group id list for " +
-        "user '" + userName + "'", ece);
+        throw new PartialGroupNameException(
+            "failed to get group id list for user '" + userName + "'", ece);
-        throw new PartialGroupNameException("can't execute the shell command to"
-        + " get the list of group id for user '" + userName + "'", ioe);
+        String message =
+            "Can't execute the shell command to " +
+            "get the list of group id for user '" + userName + "'";
+        if (partialResolver.isTimedOut()) {
+          message +=
+              " because of the command taking longer than " +
+              "the configured timeout: " + timeout + " seconds";
+        }
+        throw new PartialGroupNameException(message, ioe);
-  private List<String> resolveFullGroupNames(String groupNames) {
+  @VisibleForTesting
+  protected List<String> resolveFullGroupNames(String groupNames) {

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 INS43 INS23 INS23 INS31 INS31 INS31 INS42 INS78 UPD83 UPD43 INS83 INS39 INS59 INS83 INS83 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS8 INS29 INS83 INS5 INS42 INS44 MOV8 INS8 INS29 INS83 INS5 INS42 INS44 MOV8 INS78 UPD83 INS42 UPD42 INS42 INS34 INS43 INS43 INS42 MOV14 INS42 INS43 INS42 INS21 INS25 INS41 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS41 INS65 INS65 INS65 INS43 INS85 INS43 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS48 INS27 INS8 INS14 INS66 INS66 INS42 INS66 INS66 INS42 INS42 MOV32 INS14 INS66 INS66 INS42 INS66 INS66 INS42 INS42 MOV32 INS12 INS66 INS42 INS42 INS42 INS33 INS21 MOV43 INS32 INS33 INS33 INS42 MOV43 INS32 INS33 INS33 INS42 INS44 INS8 MOV60 INS7 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS42 INS32 INS42 INS32 INS8 INS8 INS45 INS42 INS42 UPD42 INS42 INS42 INS40 INS40 INS40 INS42 INS42 INS21 INS41 INS53 INS60 INS25 INS53 INS32 INS42 INS42 UPD42 INS43 INS59 INS32 INS8 INS14 INS42 INS42 INS42 INS27 INS42 INS32 INS42 UPD42 MOV43 INS42 INS42 INS27 INS42 INS42 INS21 MOV43 INS42 MOV42 INS45 INS42 INS45 INS45 INS45 INS32 INS42 INS32 UPD45 MOV45 MOV27 MOV42 MOV45 INS7 INS42 INS42 INS13 INS42 INS42 UPD45 UPD45 INS42 INS27 INS27 INS42 INS45 INS45 INS45 DEL33 DEL33 DEL34 DEL14 DEL33 DEL33 DEL34 DEL14 DEL45 DEL42 DEL27 DEL45 DEL42 DEL45 DEL42 DEL27 DEL45 DEL27 DEL27 DEL14 DEL53