YARN-5864. Capacity Scheduler - Queue Priorities. (wangda)

+import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainerReservedEvent;
-    
+
-  
+
-  public FiCaSchedulerApp(ApplicationAttemptId applicationAttemptId, 
+  public FiCaSchedulerApp(ApplicationAttemptId applicationAttemptId,
-  
+
-  
+
-  
+
-  
+
+
+  /**
+   * Move reservation from one node to another
+   * Comparing to unreserve container on source node and reserve a new
+   * container on target node. This method will not create new RMContainer
+   * instance. And this operation is atomic.
+   *
+   * @param reservedContainer to be moved reserved container
+   * @param sourceNode source node
+   * @param targetNode target node
+   *
+   * @return succeeded or not
+   */
+  public boolean moveReservation(RMContainer reservedContainer,
+      FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode) {
+    try {
+      writeLock.lock();
+      if (!sourceNode.getPartition().equals(targetNode.getPartition())) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug(
+              "Failed to move reservation, two nodes are in different partition");
+        }
+        return false;
+      }
+
+      // Update reserved container to node map
+      Map<NodeId, RMContainer> map = reservedContainers.get(
+          reservedContainer.getReservedSchedulerKey());
+      if (null == map) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("Cannot find reserved container map.");
+        }
+        return false;
+      }
+
+      // Check if reserved container changed
+      if (sourceNode.getReservedContainer() != reservedContainer) {
+        if (LOG.isDebugEnabled()) {
+          LOG.debug("To-be-moved container already updated.");
+        }
+        return false;
+      }
+
+      // Check if target node is empty, acquires lock of target node to make sure
+      // reservation happens transactional
+      synchronized (targetNode){
+        if (targetNode.getReservedContainer() != null) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Target node is already occupied before moving");
+          }
+        }
+
+        try {
+          targetNode.reserveResource(this,
+              reservedContainer.getReservedSchedulerKey(), reservedContainer);
+        } catch (IllegalStateException e) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Reserve on target node failed, e=", e);
+          }
+          return false;
+        }
+
+        // Set source node's reserved container to null
+        sourceNode.setReservedContainer(null);
+        map.remove(sourceNode.getNodeID());
+
+        // Update reserved container
+        reservedContainer.handle(
+            new RMContainerReservedEvent(reservedContainer.getContainerId(),
+                reservedContainer.getReservedResource(), targetNode.getNodeID(),
+                reservedContainer.getReservedSchedulerKey()));
+
+        // Add to target node
+        map.put(targetNode.getNodeID(), reservedContainer);
+
+        return true;
+      }
+    } finally {
+      writeLock.unlock();
+    }
+  }

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS54 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS8 INS8 INS21 INS25 INS60 INS25 INS25 INS51 INS21 INS32 INS38 INS8 INS74 INS59 INS27 INS8 INS27 INS8 INS42 INS8 INS32 INS42 INS42 INS32 INS25 INS41 INS43 INS43 INS43 INS42 INS32 INS33 INS42 INS25 INS41 INS32 INS42 INS25 INS41 INS25 INS54 INS21 INS21 INS21 INS21 INS41 INS42 INS42 INS32 INS42 INS32 INS32 INS8 INS9 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS9 INS42 INS42 INS32 INS8 INS9 INS27 INS8 INS8 INS12 INS32 INS32 INS32 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS21 INS32 INS33 INS25 INS21 INS44 INS8 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS32 INS8 INS32 INS43 INS42 INS25 INS41 INS42 INS42 INS43 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS21 INS42 INS42 INS52 INS32 INS42 INS42 INS32 INS8 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS45 INS32 INS42 INS42 INS45 INS42