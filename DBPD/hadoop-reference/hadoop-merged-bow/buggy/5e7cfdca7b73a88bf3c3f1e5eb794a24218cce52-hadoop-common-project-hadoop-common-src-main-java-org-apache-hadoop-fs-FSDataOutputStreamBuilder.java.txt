HADOOP-14394. Provide Builder pattern for DistributedFileSystem.create. (lei)

+import org.apache.hadoop.HadoopIllegalArgumentException;
+import javax.annotation.Nonnull;
-/** Base of specific file system FSDataOutputStreamBuilder. */
+/**
+ * Builder for {@link FSDataOutputStream} and its subclasses.
+ *
+ * It is used to create {@link FSDataOutputStream} when creating a new file or
+ * appending an existing file on {@link FileSystem}.
+ *
+ * By default, it does not create parent directory that do not exist.
+ * {@link FileSystem#createNonRecursive(Path, boolean, int, short, long,
+ * Progressable)}.
+ *
+ * To create missing parent directory, use {@link #recursive()}.
+ */
-public class FSDataOutputStreamBuilder {
-  private Path path = null;
+public abstract class FSDataOutputStreamBuilder
+    <S extends FSDataOutputStream, B extends FSDataOutputStreamBuilder<S, B>> {
+  private final FileSystem fs;
+  private final Path path;
-  private Integer bufferSize;
-  private Short replication;
-  private Long blockSize;
+  private int bufferSize;
+  private short replication;
+  private long blockSize;
+  /** set to true to create missing directory. */
+  private boolean recursive = false;
+  private final EnumSet<CreateFlag> flags = EnumSet.noneOf(CreateFlag.class);
-  private EnumSet<CreateFlag> flags = null;
-  private final FileSystem fs;
+  /**
+   * Return the concrete implementation of the builder instance.
+   */
+  protected abstract B getThisBuilder();
-  protected FSDataOutputStreamBuilder(FileSystem fileSystem, Path p) {
+  /**
+   * Constructor.
+   */
+  protected FSDataOutputStreamBuilder(@Nonnull FileSystem fileSystem,
+      @Nonnull Path p) {
+    Preconditions.checkNotNull(fileSystem);
+    Preconditions.checkNotNull(p);
+    bufferSize = fs.getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,
+        IO_FILE_BUFFER_SIZE_DEFAULT);
+    replication = fs.getDefaultReplication(path);
+    blockSize = fs.getDefaultBlockSize(p);
+  }
+
+  protected FileSystem getFS() {
+    return fs;
-      return FsPermission.getFileDefault();
+      permission = FsPermission.getFileDefault();
-  public FSDataOutputStreamBuilder setPermission(final FsPermission perm) {
+  /**
+   * Set permission for the file.
+   */
+  public B permission(@Nonnull final FsPermission perm) {
-    return this;
+    return getThisBuilder();
-    if (bufferSize == null) {
-      return fs.getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,
-          IO_FILE_BUFFER_SIZE_DEFAULT);
-    }
-  public FSDataOutputStreamBuilder setBufferSize(int bufSize) {
+  /**
+   * Set the size of the buffer to be used.
+   */
+  public B bufferSize(int bufSize) {
-    return this;
+    return getThisBuilder();
-    if (replication == null) {
-      return fs.getDefaultReplication(getPath());
-    }
-  public FSDataOutputStreamBuilder setReplication(short replica) {
+  /**
+   * Set replication factor.
+   */
+  public B replication(short replica) {
-    return this;
+    return getThisBuilder();
-    if (blockSize == null) {
-      return fs.getDefaultBlockSize(getPath());
-    }
-  public FSDataOutputStreamBuilder setBlockSize(long blkSize) {
+  /**
+   * Set block size.
+   */
+  public B blockSize(long blkSize) {
-    return this;
+    return getThisBuilder();
+  }
+
+  /**
+   * Return true to create the parent directories if they do not exist.
+   */
+  protected boolean isRecursive() {
+    return recursive;
+  }
+
+  /**
+   * Create the parent directory if they do not exist.
+   */
+  public B recursive() {
+    recursive = true;
+    return getThisBuilder();
-  public FSDataOutputStreamBuilder setProgress(final Progressable prog) {
+  /**
+   * Set the facility of reporting progress.
+   */
+  public B progress(@Nonnull final Progressable prog) {
-    return this;
+    return getThisBuilder();
-    if (flags == null) {
-      return EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE);
-    }
-  public FSDataOutputStreamBuilder setFlags(
-      final EnumSet<CreateFlag> enumFlags) {
-    Preconditions.checkNotNull(enumFlags);
-    flags = enumFlags;
-    return this;
+  /**
+   * Create an FSDataOutputStream at the specified path.
+   */
+  public B create() {
+    flags.add(CreateFlag.CREATE);
+    return getThisBuilder();
+  }
+
+  /**
+   * Set to true to overwrite the existing file.
+   * Set it to false, an exception will be thrown when calling {@link #build()}
+   * if the file exists.
+   */
+  public B overwrite(boolean overwrite) {
+    if (overwrite) {
+      flags.add(CreateFlag.OVERWRITE);
+    } else {
+      flags.remove(CreateFlag.OVERWRITE);
+    }
+    return getThisBuilder();
+  }
+
+  /**
+   * Append to an existing file (optional operation).
+   */
+  public B append() {
+    flags.add(CreateFlag.APPEND);
+    return getThisBuilder();
-  public FSDataOutputStreamBuilder setChecksumOpt(
-      final ChecksumOpt chksumOpt) {
+  /**
+   * Set checksum opt.
+   */
+  public B checksumOpt(@Nonnull final ChecksumOpt chksumOpt) {
-    return this;
+    return getThisBuilder();
-  public FSDataOutputStream build() throws IOException {
-    return fs.create(getPath(), getPermission(), getFlags(), getBufferSize(),
-        getReplication(), getBlockSize(), getProgress(), getChecksumOpt());
-  }
+  /**
+   * Create the FSDataOutputStream to write on the file system.
+   *
+   * @throws HadoopIllegalArgumentException if the parameters are not valid.
+   * @throws IOException on errors when file system creates or appends the file.
+   */
+  public abstract S build() throws IOException;

INS26 INS26 MOV23 MOV23 INS40 INS40 INS83 INS73 INS73 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 MOV43 INS42 INS74 INS83 INS43 INS39 INS39 INS83 INS39 MOV59 INS29 INS39 INS59 INS83 INS29 INS83 INS83 INS43 INS42 INS29 INS83 MOV43 INS42 INS8 INS29 INS43 UPD42 INS8 INS29 UPD43 UPD42 INS8 INS29 UPD43 UPD42 MOV83 MOV39 MOV42 INS8 INS29 UPD43 UPD42 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 UPD43 UPD42 MOV83 MOV74 MOV42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 UPD43 UPD42 INS29 MOV83 INS43 INS42 INS8 INS29 UPD43 UPD42 INS29 INS83 INS83 INS43 INS42 MOV43 UPD66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 MOV43 INS43 INS43 INS42 INS65 INS42 INS9 INS32 INS65 INS42 INS65 INS78 INS43 INS78 MOV43 INS21 INS21 INS21 INS21 INS21 INS41 INS65 INS42 INS78 MOV41 INS65 UPD42 MOV41 INS65 UPD42 MOV41 INS65 UPD42 INS65 INS41 INS65 INS42 INS21 INS41 INS65 UPD42 INS78 MOV41 INS65 INS42 INS21 INS41 INS65 UPD42 INS39 INS42 INS25 INS65 INS42 INS21 INS41 INS65 UPD42 INS78 INS65 INS65 INS65 INS42 INS42 INS42 INS42 INS68 INS68 INS42 INS42 INS66 INS42 INS42 INS57 INS66 INS66 INS42 INS42 INS42 INS32 INS32 INS7 INS7 INS7 INS42 INS66 INS42 INS32 INS66 INS32 INS66 INS32 INS66 INS32 INS66 INS42 INS66 INS7 INS32 INS66 INS42 INS32 INS66 INS32 INS32 INS66 INS66 INS65 INS66 INS42 INS8 INS8 INS32 INS66 INS32 INS32 INS66 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS69 INS69 INS69 INS69 INS69 INS69 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV40 INS42 INS68 MOV21 MOV21 INS42 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS42 MOV43 INS39 INS39 INS39 INS39 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS32 INS42 INS42 MOV32 UPD42 UPD42 INS40 INS42 INS42 INS40 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL33 DEL41 DEL52 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL8 DEL52 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL52 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL52 DEL52 DEL42 DEL33 DEL27 DEL40 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL7 DEL52 DEL52 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31