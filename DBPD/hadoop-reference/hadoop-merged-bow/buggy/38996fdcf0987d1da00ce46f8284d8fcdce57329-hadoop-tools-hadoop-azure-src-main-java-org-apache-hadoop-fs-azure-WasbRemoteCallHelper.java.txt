HADOOP-14443. Azure: Support retry and client side failover for authorization, SASKey and delegation token generation. Contributed by Santhosh G Nayak

- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+import org.apache.hadoop.fs.azure.security.Constants;
+import org.apache.hadoop.io.retry.RetryPolicy;
+import org.apache.http.NameValuePair;
-import org.apache.http.client.ClientProtocolException;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.client.utils.URIBuilder;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import java.io.InterruptedIOException;
+import java.net.URISyntaxException;
+import java.util.List;
+import java.util.Random;
-class WasbRemoteCallHelper {
+public class WasbRemoteCallHelper {
+  public static final Logger LOG =
+      LoggerFactory.getLogger(WasbRemoteCallHelper.class);
+   * Application Json content type.
+   */
+  private static final String APPLICATION_JSON = "application/json";
+
+  /**
+   * Max content length of the response.
+   */
+  private static final int MAX_CONTENT_LENGTH = 1024;
+
+  /**
+  private Random random = new Random();
+
+  private RetryPolicy retryPolicy = null;
+
+  public WasbRemoteCallHelper(RetryPolicy retryPolicy) {
+    this.client = HttpClientBuilder.create().build();
+    this.retryPolicy = retryPolicy;
+  }
+
-  public WasbRemoteCallHelper() {
-    this.client = HttpClientBuilder.create().build();
-  }
-
-   * @param getRequest - HttpGet request object constructed by caller.
+   *
+   * @param urls        - Service urls to be used, if one fails try another.
+   * @param path        - URL endpoint for the resource.
+   * @param queryParams - list of query parameters
+   * @param httpMethod  - http Method to be used.
-   *  is expected to semantically understand the response.
-   * @throws WasbRemoteCallException
-   * @throws IOException
+   * is expected to semantically understand the response.
+   * @throws IOException when there an error in executing the remote http request.
-  public String makeRemoteGetRequest(HttpGet getRequest)
-      throws WasbRemoteCallException, IOException {
+  public String makeRemoteRequest(String[] urls, String path,
+      List<NameValuePair> queryParams, String httpMethod) throws IOException {
-    try {
+    return retryableRequest(urls, path, queryParams, httpMethod);
+  }
-      final String APPLICATION_JSON = "application/json";
-      final int MAX_CONTENT_LENGTH = 1024;
+  protected String retryableRequest(String[] urls, String path,
+      List<NameValuePair> queryParams, String httpMethod) throws IOException {
+    HttpResponse response = null;
+    HttpUriRequest httpRequest = null;
-      getRequest.setHeader("Accept", APPLICATION_JSON);
-
-      HttpResponse response = client.execute(getRequest);
-
-      StatusLine statusLine = response.getStatusLine();
-      if (statusLine == null || statusLine.getStatusCode() != HttpStatus.SC_OK) {
-        throw new WasbRemoteCallException(getRequest.getURI().toString() + ":" +
-            ((statusLine!=null) ? statusLine.toString() : "NULL")
-        );
-      }
-
-      Header contentTypeHeader = response.getFirstHeader("Content-Type");
-      if (contentTypeHeader == null
-          || !APPLICATION_JSON.equals(contentTypeHeader.getValue())) {
-        throw new WasbRemoteCallException(getRequest.getURI().toString() + ":" +
-            "Content-Type mismatch: expected: " + APPLICATION_JSON +
-            ", got " + ((contentTypeHeader!=null) ? contentTypeHeader.getValue() : "NULL")
-        );
-      }
-
-      Header contentLengthHeader = response.getFirstHeader("Content-Length");
-      if (contentLengthHeader == null) {
-        throw new WasbRemoteCallException(getRequest.getURI().toString() + ":" +
-            "Content-Length header missing"
-        );
+    for (int retry = 0, index =
+         random.nextInt(urls.length);; retry++, index++) {
+      if (index >= urls.length) {
+        index = index % urls.length;
-        if (Integer.parseInt(contentLengthHeader.getValue()) > MAX_CONTENT_LENGTH) {
-          throw new WasbRemoteCallException(getRequest.getURI().toString() + ":" +
-              "Content-Length:" + contentLengthHeader.getValue() +
-              "exceeded max:" + MAX_CONTENT_LENGTH
-          );
+        httpRequest =
+            getHttpRequest(urls, path, queryParams, index, httpMethod);
+
+        httpRequest.setHeader("Accept", APPLICATION_JSON);
+        response = client.execute(httpRequest);
+        StatusLine statusLine = response.getStatusLine();
+        if (statusLine == null
+            || statusLine.getStatusCode() != HttpStatus.SC_OK) {
+          throw new WasbRemoteCallException(
+              httpRequest.getURI().toString() + ":" + ((statusLine != null)
+                                                       ? statusLine.toString()
+                                                       : "NULL"));
+        }
+
+        Header contentTypeHeader = response.getFirstHeader("Content-Type");
+        if (contentTypeHeader == null || !APPLICATION_JSON
+            .equals(contentTypeHeader.getValue())) {
+          throw new WasbRemoteCallException(
+              httpRequest.getURI().toString() + ":"
+                  + "Content-Type mismatch: expected: " + APPLICATION_JSON
+                  + ", got " + ((contentTypeHeader != null) ? contentTypeHeader
+                  .getValue() : "NULL"));
+        }
+
+        Header contentLengthHeader = response.getFirstHeader("Content-Length");
+        if (contentLengthHeader == null) {
+          throw new WasbRemoteCallException(
+              httpRequest.getURI().toString() + ":"
+                  + "Content-Length header missing");
+        }
+
+        try {
+          if (Integer.parseInt(contentLengthHeader.getValue())
+              > MAX_CONTENT_LENGTH) {
+            throw new WasbRemoteCallException(
+                httpRequest.getURI().toString() + ":" + "Content-Length:"
+                    + contentLengthHeader.getValue() + "exceeded max:"
+                    + MAX_CONTENT_LENGTH);
+          }
+        } catch (NumberFormatException nfe) {
+          throw new WasbRemoteCallException(
+              httpRequest.getURI().toString() + ":"
+                  + "Invalid Content-Length value :" + contentLengthHeader
+                  .getValue());
+        }
+
+        BufferedReader rd = null;
+        StringBuilder responseBody = new StringBuilder();
+        try {
+          rd = new BufferedReader(
+              new InputStreamReader(response.getEntity().getContent(),
+                  StandardCharsets.UTF_8));
+          String responseLine = "";
+          while ((responseLine = rd.readLine()) != null) {
+            responseBody.append(responseLine);
+          }
+        } finally {
+          rd.close();
+        }
+        return responseBody.toString();
+      } catch (URISyntaxException uriSyntaxEx) {
+        throw new WasbRemoteCallException("Encountered URISyntaxException "
+            + "while building the HttpGetRequest to remote service",
+            uriSyntaxEx);
+      } catch (IOException e) {
+        LOG.debug(e.getMessage(), e);
+        try {
+          shouldRetry(e, retry, (httpRequest != null)
+                                ? httpRequest.getURI().toString()
+                                : urls[index]);
+        } catch (IOException ioex) {
+          String message =
+              "Encountered error while making remote call to " + String
+                  .join(",", urls) + " retried " + retry + " time(s).";
+          LOG.error(message, ioex);
+          throw new WasbRemoteCallException(message, ioex);
-      catch (NumberFormatException nfe) {
-        throw new WasbRemoteCallException(getRequest.getURI().toString() + ":" +
-            "Invalid Content-Length value :" + contentLengthHeader.getValue()
-        );
-      }
-
-      BufferedReader rd = new BufferedReader(
-          new InputStreamReader(response.getEntity().getContent(),
-              StandardCharsets.UTF_8));
-      StringBuilder responseBody = new StringBuilder();
-      String responseLine = "";
-      while ((responseLine = rd.readLine()) != null) {
-        responseBody.append(responseLine);
-      }
-      rd.close();
-      return responseBody.toString();
-
-    } catch (ClientProtocolException clientProtocolEx) {
-      throw new WasbRemoteCallException(getRequest.getURI().toString() + ":" +
-          "Encountered ClientProtocolException while making remote call", clientProtocolEx);
-    } catch (IOException ioEx) {
-      throw new WasbRemoteCallException(getRequest.getURI().toString() + ":" +
-          "Encountered IOException while making remote call", ioEx);
-}
+
+  protected HttpUriRequest getHttpRequest(String[] urls, String path,
+      List<NameValuePair> queryParams, int urlIndex, String httpMethod)
+      throws URISyntaxException, IOException {
+    URIBuilder uriBuilder = null;
+    uriBuilder =
+        new URIBuilder(urls[urlIndex]).setPath(path).setParameters(queryParams);
+    HttpUriRequest httpUriRequest = null;
+    switch (httpMethod) {
+    case HttpPut.METHOD_NAME:
+      httpUriRequest = new HttpPut(uriBuilder.build());
+      break;
+    case HttpPost.METHOD_NAME:
+      httpUriRequest = new HttpPost(uriBuilder.build());
+      break;
+    default:
+      httpUriRequest = new HttpGet(uriBuilder.build());
+      break;
+    }
+    return httpUriRequest;
+  }
+
+  private void shouldRetry(final IOException ioe, final int retry,
+      final String url) throws IOException {
+    CharSequence authenticationExceptionMessage =
+        Constants.AUTHENTICATION_FAILED_ERROR_MESSAGE;
+    if (ioe instanceof WasbRemoteCallException && ioe.getMessage()
+        .equals(authenticationExceptionMessage)) {
+      throw ioe;
+    }
+    try {
+      final RetryPolicy.RetryAction a = (retryPolicy != null)
+                                        ? retryPolicy
+                                            .shouldRetry(ioe, retry, 0, true)
+                                        : RetryPolicy.RetryAction.FAIL;
+
+      boolean isRetry = a.action == RetryPolicy.RetryAction.RetryDecision.RETRY;
+      boolean isFailoverAndRetry =
+          a.action == RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;
+
+      if (isRetry || isFailoverAndRetry) {
+        LOG.debug("Retrying connect to Remote service:{}. Already tried {}"
+                + " time(s); retry policy is {}, " + "delay {}ms.", url, retry,
+            retryPolicy, a.delayMillis);
+
+        Thread.sleep(a.delayMillis);
+        return;
+      }
+    } catch(InterruptedIOException e) {
+      LOG.warn(e.getMessage(), e);
+      Thread.currentThread().interrupt();
+      return;
+    } catch (Exception e) {
+      LOG.warn("Original exception is ", ioe);
+      throw new WasbRemoteCallException(e.getMessage(), e);
+    }
+    LOG.debug("Not retrying anymore, already retried the urls {} time(s)",
+        retry);
+    throw new WasbRemoteCallException(
+        url + ":" + "Encountered IOException while making remote call", ioe);
+  }
+}

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS83 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS83 MOV43 MOV59 INS29 INS83 INS83 INS83 INS39 MOV59 INS83 INS43 INS59 INS83 INS43 INS59 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS66 INS66 INS42 INS42 INS32 INS65 INS65 INS42 INS42 INS14 INS42 INS42 INS33 INS43 INS42 INS21 MOV65 INS65 INS65 INS65 INS65 MOV65 INS65 INS42 INS5 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS42 INS41 INS5 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS60 INS60 INS24 INS42 INS5 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS60 INS21 INS60 INS50 INS41 INS83 INS43 INS42 INS83 INS39 INS42 INS83 INS43 INS42 INS42 INS60 INS25 INS54 INS21 INS53 INS42 INS42 INS57 INS66 INS66 INS43 INS42 INS7 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS43 INS85 INS42 INS43 INS43 INS42 INS32 INS43 INS85 INS42 INS43 INS43 INS42 MOV43 INS59 INS43 INS59 INS58 INS37 INS37 MOV8 INS43 INS85 INS42 INS43 INS43 INS42 INS43 INS59 INS7 INS43 INS59 INS42 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS12 INS12 INS32 INS14 INS43 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS33 INS39 INS59 INS59 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS42 INS33 INS40 INS7 INS40 INS7 INS7 INS42 INS42 INS40 INS62 INS32 INS53 INS60 INS60 INS60 INS25 INS44 INS8 INS44 INS8 INS42 INS42 INS45 INS42 INS43 INS27 INS42 INS42 INS52 INS42 INS42 INS34 INS42 INS32 INS27 INS8 INS12 INS12 INS32 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 MOV43 INS32 INS42 INS42 INS42 INS83 INS43 INS59 INS39 INS59 INS39 INS59 INS27 INS8 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS53 INS42 INS42 INS45 INS45 INS42 INS42 INS40 INS42 INS40 INS21 INS21 INS21 INS54 MOV44 INS8 MOV44 INS8 INS14 INS42 INS42 INS43 INS32 INS43 INS32 MOV43 INS32 INS42 INS42 INS40 INS42 INS16 INS42 INS27 INS42 INS27 INS42 INS42 INS21 INS21 INS41 INS42 INS32 INS32 INS42 INS32 INS14 INS7 INS7 INS7 INS8 INS8 UPD43 UPD42 INS53 UPD42 INS21 INS54 INS43 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS32 INS40 INS40 INS40 INS40 INS40 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS43 INS32 INS42 INS42 INS27 INS42 INS32 UPD42 INS42 INS32 INS33 INS21 MOV60 MOV61 MOV21 UPD42 INS14 INS32 INS8 MOV12 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS34 INS9 INS42 INS42 INS27 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 UPD42 MOV42 INS7 MOV43 INS27 INS42 INS42 INS42 INS32 INS42 INS21 INS44 INS42 INS33 INS45 INS45 INS45 MOV43 INS42 MOV14 INS45 INS45 INS42 INS42 INS32 INS43 INS42 INS60 INS21 INS53 INS42 INS42 INS42 INS42 INS16 INS42 INS43 INS59 INS32 INS14 MOV43 MOV32 INS36 INS32 INS2 UPD42 MOV42 INS42 INS27 INS42 INS42 INS42 INS42 MOV43 INS42 INS42 UPD42 UPD42 UPD42 MOV32 INS27 MOV32 MOV42 INS42 INS42 INS45 MOV32 UPD45 MOV45 INS42 UPD45 MOV45 UPD42 INS42 INS33 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 UPD42 DEL42 DEL66 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL42 DEL42 DEL83 DEL60 DEL83 DEL39 DEL60 DEL42 DEL32 DEL59 DEL60 DEL32 DEL27 DEL42 DEL14 DEL53 DEL32 DEL45 DEL45 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12