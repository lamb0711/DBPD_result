MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.List;
+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+    case AM_STARTED:
+      handleAMStartedEvent((AMStartedEvent) event);
+      break;
+    attemptInfo.containerId = event.getContainerId();
+  
+  private void handleAMStartedEvent(AMStartedEvent event) {
+    AMInfo amInfo = new AMInfo();
+    amInfo.appAttemptId = event.getAppAttemptId();
+    amInfo.startTime = event.getStartTime();
+    amInfo.containerId = event.getContainerId();
+    amInfo.nodeManagerHost = event.getNodeManagerHost();
+    amInfo.nodeManagerHttpPort = event.getNodeManagerHttpPort();
+    if (info.amInfos == null) {
+      info.amInfos = new LinkedList<AMInfo>();
+    }
+    info.amInfos.add(amInfo);
+    info.latestAmInfo = amInfo;
+  }
+    List<AMInfo> amInfos;
+    AMInfo latestAmInfo;
-
+      for (AMInfo amInfo : amInfos) {
+        amInfo.printAll();
+      }
+    /** @return the AMInfo for the job's AppMaster */
+    public List<AMInfo> getAMInfos() { return amInfos; }
+    /** @return the AMInfo for the newest AppMaster */
+    public AMInfo getLatestAMInfo() { return latestAmInfo; };
+    ContainerId containerId;
+      System.out.println("CONTIANER_ID:" + containerId);
+    /** @return the ContainerId for the tracker */
+    public ContainerId getContainerId() { return containerId; }
+
+  /**
+   * Stores AM information
+   */
+  public static class AMInfo {
+    ApplicationAttemptId appAttemptId;
+    long startTime;
+    ContainerId containerId;
+    String nodeManagerHost;
+    int nodeManagerHttpPort;
+
+    /**
+     * Create a AM Info which will store AM level information on a history
+     * parse.
+     */
+    public AMInfo() {
+      startTime = -1;
+      nodeManagerHost = "";
+      nodeManagerHttpPort = -1;
+    }
+
+    public AMInfo(ApplicationAttemptId appAttemptId, long startTime,
+        ContainerId containerId, String nodeManagerHost, int nodeManagerHttpPort) {
+      this.appAttemptId = appAttemptId;
+      this.startTime = startTime;
+      this.containerId = containerId;
+      this.nodeManagerHost = nodeManagerHost;
+      this.nodeManagerHttpPort = nodeManagerHttpPort;
+    }
+
+    /**
+     * Print all the information about this AM.
+     */
+    public void printAll() {
+      System.out.println("APPLICATION_ATTEMPT_ID:" + appAttemptId.toString());
+      System.out.println("START_TIME: " + startTime);
+      System.out.println("CONTAINER_ID: " + containerId.toString());
+      System.out.println("NODE_MANAGER_HOST: " + nodeManagerHost);
+      System.out.println("NODE_MANAGER_HTTP_PORT: " + nodeManagerHttpPort);
+    }
+
+    /** @return the ApplicationAttemptId */
+    public ApplicationAttemptId getAppAttemptId() {
+      return appAttemptId;
+    }
+
+    /** @return the start time of the AM */
+    public long getStartTime() {
+      return startTime;
+    }
+
+    /** @return the container id for the AM */
+    public ContainerId getContainerId() {
+      return containerId;
+    }
+
+    /** @return the host name for the node manager on which the AM is running */
+    public String getNodeManagerHost() {
+      return nodeManagerHost;
+    }
+
+    /** @return the http port for the node manager running the AM */
+    public int getNodeManagerHttpPort() {
+      return nodeManagerHttpPort;
+    }
+  }
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS55 INS83 INS39 INS42 INS44 INS8 INS23 INS23 INS31 INS31 INS23 INS31 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS21 INS43 INS42 INS60 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS21 INS74 INS59 INS43 INS59 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS43 INS59 INS29 INS83 INS43 INS42 INS8 INS65 INS43 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS29 INS83 INS42 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS21 INS49 INS10 INS7 INS42 INS43 INS59 INS7 INS7 INS7 INS7 INS7 INS27 INS8 INS32 INS7 INS43 INS43 INS42 INS42 INS42 INS70 INS65 INS43 INS43 INS41 INS65 INS42 INS41 INS42 INS42 INS21 INS65 INS42 INS41 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS21 INS21 INS21 INS43 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS21 INS65 INS21 INS21 INS21 INS21 INS21 INS65 INS42 INS41 INS65 INS41 INS65 INS42 INS41 INS65 INS42 INS41 INS65 INS41 INS42 INS32 INS40 INS32 INS42 INS42 INS14 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS32 INS40 INS33 INS21 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS44 INS42 INS8 INS66 INS42 INS42 INS42 INS66 INS42 INS32 INS66 INS42 INS66 INS66 INS7 INS7 INS7 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS7 INS66 INS32 INS32 INS32 INS32 INS32 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS11 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS40 INS42 INS27 INS42 INS38 INS42 INS45 INS42 INS38 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS40 INS42 INS27 INS43 INS42 INS42 INS40 INS14 INS42 INS32 INS45 INS42 INS34 INS34 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS45 INS32 INS45 INS42 INS45 INS32 INS45 INS42 INS45 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42