HADOOP-10835. Implement HTTP proxyuser support in HTTP authentication client/server libraries. (tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617384 13f79535-47bb-0310-9956-ffa450edef68

+import com.google.common.annotations.VisibleForTesting;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.security.SaslRpcServer;
+import org.apache.hadoop.security.UserGroupInformation;
+import org.apache.hadoop.security.authentication.server.AuthenticationToken;
+import org.apache.hadoop.security.authorize.AuthorizationException;
+import org.apache.hadoop.security.authorize.ProxyUsers;
+import org.apache.http.NameValuePair;
+import org.apache.http.client.utils.URLEncodedUtils;
+import org.codehaus.jackson.map.ObjectMapper;
+import javax.servlet.FilterChain;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.io.Writer;
+import java.nio.charset.Charset;
+import java.security.Principal;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+  private static final String APPLICATION_JSON_MIME = "application/json";
+  private static final String ERROR_EXCEPTION_JSON = "exception";
+  private static final String ERROR_MESSAGE_JSON = "message";
+
+  private static final Charset UTF8_CHARSET = Charset.forName("UTF-8");
+
+  private static final ThreadLocal<UserGroupInformation> UGI_TL =
+      new ThreadLocal<UserGroupInformation>();
+  public static final String PROXYUSER_PREFIX = "proxyuser";
+
+  private SaslRpcServer.AuthMethod handlerAuthMethod;
+
+  /**
+   * Returns the proxyuser configuration. All returned properties must start
+   * with <code>proxyuser.</code>'
+   * <p/>
+   * Subclasses may override this method if the proxyuser configuration is 
+   * read from other place than the filter init parameters.
+   *
+   * @param filterConfig filter configuration object
+   * @return the proxyuser configuration properties.
+   * @throws ServletException thrown if the configuration could not be created.
+   */
+  protected Configuration getProxyuserConfiguration(FilterConfig filterConfig)
+      throws ServletException {
+    // this filter class gets the configuration from the filter configs, we are
+    // creating an empty configuration and injecting the proxyuser settings in
+    // it. In the initialization of the filter, the returned configuration is
+    // passed to the ProxyUsers which only looks for 'proxyusers.' properties.
+    Configuration conf = new Configuration(false);
+    Enumeration<?> names = filterConfig.getInitParameterNames();
+    while (names.hasMoreElements()) {
+      String name = (String) names.nextElement();
+      if (name.startsWith(PROXYUSER_PREFIX + ".")) {
+        String value = filterConfig.getInitParameter(name);
+        conf.set(name, value);
+      }
+    }
+    return conf;
+  }
+
+
+    AuthenticationHandler handler = getAuthenticationHandler();
-    if (dtSecretManager != null && getAuthenticationHandler()
+    if (dtSecretManager != null && handler
-      DelegationTokenAuthenticationHandler handler =
+      DelegationTokenAuthenticationHandler dtHandler =
-      handler.setExternalDelegationTokenSecretManager(dtSecretManager);
+      dtHandler.setExternalDelegationTokenSecretManager(dtSecretManager);
+    }
+    if (handler instanceof PseudoAuthenticationHandler ||
+        handler instanceof PseudoDelegationTokenAuthenticationHandler) {
+      setHandlerAuthMethod(SaslRpcServer.AuthMethod.SIMPLE);
+    }
+    if (handler instanceof KerberosAuthenticationHandler ||
+        handler instanceof KerberosDelegationTokenAuthenticationHandler) {
+      setHandlerAuthMethod(SaslRpcServer.AuthMethod.KERBEROS);
+    }
+
+    // proxyuser configuration
+    Configuration conf = getProxyuserConfiguration(filterConfig);
+    ProxyUsers.refreshSuperUserGroupsConfiguration(conf, PROXYUSER_PREFIX);
+  }
+
+  protected void setHandlerAuthMethod(SaslRpcServer.AuthMethod authMethod) {
+    this.handlerAuthMethod = authMethod;
+  }
+
+  @VisibleForTesting
+  static String getDoAs(HttpServletRequest request) {
+    List<NameValuePair> list = URLEncodedUtils.parse(request.getQueryString(),
+        UTF8_CHARSET);
+    if (list != null) {
+      for (NameValuePair nv : list) {
+        if (DelegationTokenAuthenticatedURL.DO_AS.equals(nv.getName())) {
+          return nv.getValue();
+        }
+      }
+    }
+    return null;
+  }
+
+  static UserGroupInformation getHttpUserGroupInformationInContext() {
+    return UGI_TL.get();
+  }
+
+  @Override
+  protected void doFilter(FilterChain filterChain, HttpServletRequest request,
+      HttpServletResponse response) throws IOException, ServletException {
+    boolean requestCompleted = false;
+    UserGroupInformation ugi = null;
+    AuthenticationToken authToken = (AuthenticationToken)
+        request.getUserPrincipal();
+    if (authToken != null && authToken != AuthenticationToken.ANONYMOUS) {
+      // if the request was authenticated because of a delegation token,
+      // then we ignore proxyuser (this is the same as the RPC behavior).
+      ugi = (UserGroupInformation) request.getAttribute(
+          DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE);
+      if (ugi == null) {
+        String realUser = request.getUserPrincipal().getName();
+        ugi = UserGroupInformation.createRemoteUser(realUser,
+            handlerAuthMethod);
+        String doAsUser = getDoAs(request);
+        if (doAsUser != null) {
+          ugi = UserGroupInformation.createProxyUser(doAsUser, ugi);
+          try {
+            ProxyUsers.authorize(ugi, request.getRemoteHost());
+          } catch (AuthorizationException ex) {
+            String msg = String.format(
+                "User '%s' from host '%s' not allowed to impersonate user '%s'",
+                realUser, request.getRemoteHost(), doAsUser);
+            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
+            response.setContentType(APPLICATION_JSON_MIME);
+            Map<String, String> json = new HashMap<String, String>();
+            json.put(ERROR_EXCEPTION_JSON,
+                AuthorizationException.class.getName());
+            json.put(ERROR_MESSAGE_JSON, msg);
+            Writer writer = response.getWriter();
+            ObjectMapper jsonMapper = new ObjectMapper();
+            jsonMapper.writeValue(writer, json);
+            requestCompleted = true;
+          }
+        }
+      }
+      UGI_TL.set(ugi);
+    }
+    if (!requestCompleted) {
+      final UserGroupInformation ugiF = ugi;
+      try {
+        request = new HttpServletRequestWrapper(request) {
+
+          @Override
+          public String getAuthType() {
+            return (ugiF != null) ? handlerAuthMethod.toString() : null;
+          }
+
+          @Override
+          public String getRemoteUser() {
+            return (ugiF != null) ? ugiF.getShortUserName() : null;
+          }
+
+          @Override
+          public Principal getUserPrincipal() {
+            return (ugiF != null) ? new Principal() {
+              @Override
+              public String getName() {
+                return ugiF.getUserName();
+              }
+            } : null;
+          }
+        };
+        super.doFilter(filterChain, request, response);
+      } finally {
+        UGI_TL.remove();
+      }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS74 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS45 INS40 INS42 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS60 INS60 INS61 INS41 INS60 INS25 INS25 INS60 INS21 INS43 INS42 INS21 INS42 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS42 INS42 INS45 INS42 INS42 INS74 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS74 INS59 INS32 INS8 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS43 INS59 INS32 INS40 INS7 INS42 INS74 INS59 INS27 INS8 INS33 INS32 INS42 INS42 INS42 INS39 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS38 INS8 INS43 INS43 INS42 INS42 INS14 INS43 INS76 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 MOV32 INS62 INS62 INS21 INS62 INS62 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS42 INS9 INS42 INS42 INS33 INS42 INS42 INS11 INS27 INS27 INS21 INS25 INS21 INS42 INS60 INS54 INS42 INS42 INS43 INS9 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS43 INS42 INS43 INS32 INS42 INS43 INS42 INS43 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS44 INS42 INS8 INS43 INS32 INS42 INS33 INS42 INS40 INS7 INS27 INS8 INS32 INS83 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS11 INS42 INS42 INS27 INS60 INS21 UPD42 UPD42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS11 INS42 INS33 INS60 INS21 INS60 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS43 INS32 INS42 INS45 INS43 INS59 INS32 INS42 INS32 INS8 INS43 INS32 INS43 INS59 INS7 INS43 INS59 INS27 INS8 INS7 INS48 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS41 INS42 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS54 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS8 INS12 INS43 INS42 INS1 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS60 INS21 INS21 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS32 INS32 INS74 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS7 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS9 INS16 INS16 INS16 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS42 INS42 INS74 INS57 INS42 INS42 INS42 INS43 INS36 INS32 INS33 INS36 INS32 INS33 INS36 INS14 INS33 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS31 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS41 INS32 INS42 INS42