HADOOP-13037. Refactor Azure Data Lake Store as an independent FileSystem. Contributed by Vishwajeet Dusane

- *     http://www.apache.org/licenses/LICENSE-2.0
+ *    http://www.apache.org/licenses/LICENSE-2.0
- *
-package org.apache.hadoop.fs.common;
-
-import com.eclipsesource.json.JsonObject;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.adl.TestableAdlFileSystem;
-import org.apache.hadoop.hdfs.client.HdfsClientConfigKeys;
-import org.apache.hadoop.hdfs.web.oauth2.ConfCredentialBasedAccessTokenProvider;
-import org.apache.hadoop.hdfs.web.oauth2.CredentialBasedAccessTokenProvider;
-import org.apache.hadoop.hdfs.web.oauth2.OAuth2Constants;
-import org.junit.After;
-import org.junit.Before;
+package org.apache.hadoop.fs.adl;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.adl.common.CustomMockTokenProvider;
+import org.apache.hadoop.fs.adl.oauth2.AzureADTokenProvider;
+import static org.apache.hadoop.fs.adl.AdlConfKeys
+    .AZURE_AD_TOKEN_PROVIDER_CLASS_KEY;
+
+import com.squareup.okhttp.mockwebserver.MockWebServer;
+
+import org.junit.After;
+import org.junit.Before;
+
- * adls backend is also managed within AdlMockWebServer implementation.
+ * adls backend is also managed within AdlMockWebServer implementation using
+ * {@link org.apache.hadoop.fs.adl.common.CustomMockTokenProvider}.
-
-  public static MockResponse getTokenResponse() {
-    JsonObject jsonObject = new JsonObject()
-        .set(OAuth2Constants.EXPIRES_IN, "0987654321")
-        .set("token_type", "bearer").set(OAuth2Constants.ACCESS_TOKEN, "123");
-    MockResponse oauth2Response = new MockResponse();
-    oauth2Response.addHeader("Content-Type", "application/json");
-    oauth2Response.setResponseCode(200);
-    oauth2Response.setBody(jsonObject.toString());
-    return oauth2Response;
+  public void setConf(Configuration conf) {
+    this.conf = conf;
-
-    server.enqueue(getTokenResponse());
-    conf.set(HdfsClientConfigKeys.OAUTH_CLIENT_ID_KEY, "MY_CLIENTID");
-    conf.set(HdfsClientConfigKeys.ACCESS_TOKEN_PROVIDER_KEY,
-        ConfCredentialBasedAccessTokenProvider.class.getName());
-    conf.set(HdfsClientConfigKeys.DFS_WEBHDFS_OAUTH_ENABLED_KEY, "true");
-    conf.set(HdfsClientConfigKeys.OAUTH_REFRESH_URL_KEY, "http://localhost:" +
-        port + "/refresh");
-    conf.set(CredentialBasedAccessTokenProvider.OAUTH_CREDENTIAL_KEY,
-        "credential");
+    conf.setClass(AZURE_AD_TOKEN_PROVIDER_CLASS_KEY,
+        CustomMockTokenProvider.class, AzureADTokenProvider.class);

MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS39 INS42 INS44 INS8 UPD66 INS65 INS66 INS43 INS42 MOV21 INS40 UPD42 MOV42 INS7 INS22 INS42 UPD42 INS42 MOV57 INS57 INS52 INS42 UPD43 INS43 UPD42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL45 DEL45 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL42 DEL40 DEL45 DEL32 DEL42 DEL45 DEL45 DEL32 DEL42 DEL40 DEL45 DEL32 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL42 DEL42 DEL40 DEL45 DEL42 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21