HDFS-11210. Enhance key rolling to guarantee new KeyVersion is returned from generateEncryptedKeys after a key is rolled.

+import java.util.ArrayList;
-import java.util.HashSet;
+import java.util.HashMap;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+  private static final int LOCK_ARRAY_SIZE = 16;
+  // Using a mask assuming array size is the power of 2, of MAX_VALUE.
+  private static final int MASK = LOCK_ARRAY_SIZE == Integer.MAX_VALUE ?
+      LOCK_ARRAY_SIZE :
+      LOCK_ARRAY_SIZE - 1;
+  // Stripped rwlocks based on key name to synchronize the queue from
+  // the sync'ed rw-thread and the background async refill thread.
+  private final List<ReadWriteLock> lockArray =
+      new ArrayList<>(LOCK_ARRAY_SIZE);
+    private AtomicBoolean canceled = new AtomicBoolean(false);
+
+    public void cancel() {
+      canceled.set(true);
+    }
+
+    public boolean isCanceled() {
+      return canceled.get();
+    }
+  }
+
+  private void readLock(String keyName) {
+    getLock(keyName).readLock().lock();
+  }
+
+  private void readUnlock(String keyName) {
+    getLock(keyName).readLock().unlock();
+  }
+
+  private void writeUnlock(String keyName) {
+    getLock(keyName).writeLock().unlock();
+  }
+
+  private void writeLock(String keyName) {
+    getLock(keyName).writeLock().lock();
+  }
+
+  /**
+   * Get the stripped lock given a key name.
+   *
+   * @param keyName The key name.
+   */
+  private ReadWriteLock getLock(String keyName) {
+    return lockArray.get(indexFor(keyName));
+  }
+
+  private static int indexFor(String keyName) {
+    return keyName.hashCode() & MASK;
-    private HashSet<String> keysInProgress = new HashSet<String>();
+    private HashMap<String, Runnable> keysInProgress = new HashMap<>();
-      if (keysInProgress.add(((NamedRunnable)e).name)) {
+      if (!keysInProgress.containsKey(((NamedRunnable)e).name)) {
+        keysInProgress.put(((NamedRunnable)e).name, e);
+    public Runnable deleteByName(String name) {
+      NamedRunnable e = (NamedRunnable) keysInProgress.remove(name);
+      if (e != null) {
+        e.cancel();
+        super.remove(e);
+      }
+      return e;
+    }
+    for (int i = 0; i < LOCK_ARRAY_SIZE; ++i) {
+      lockArray.add(i, new ReentrantReadWriteLock());
+    }
-  public void drain(String keyName ) {
+  public void drain(String keyName) {
-      keyQueues.get(keyName).clear();
+      Runnable e;
+      while ((e = queue.deleteByName(keyName)) != null) {
+        executor.remove(e);
+      }
+      writeLock(keyName);
+      try {
+        keyQueues.get(keyName).clear();
+      } finally {
+        writeUnlock(keyName);
+      }
-    // We can't do keyQueues.get(keyName).size() here,
-    // since that will have the side effect of populating the cache.
-    Map<String, LinkedBlockingQueue<E>> map =
-        keyQueues.getAllPresent(Arrays.asList(keyName));
-    if (map.get(keyName) == null) {
-      return 0;
+    readLock(keyName);
+    try {
+      // We can't do keyQueues.get(keyName).size() here,
+      // since that will have the side effect of populating the cache.
+      Map<String, LinkedBlockingQueue<E>> map =
+          keyQueues.getAllPresent(Arrays.asList(keyName));
+      if (map.get(keyName) == null) {
+        return 0;
+      }
+      return map.get(keyName).size();
+    } finally {
+      readUnlock(keyName);
-    return map.get(keyName).size();
+        readLock(keyName);
+        readUnlock(keyName);
-              if (keyQueue.size() < threshold) {
-                refiller.fillQueueForKey(name, keyQueue,
-                    cacheSize - keyQueue.size());
+              writeLock(keyName);
+              try {
+                if (keyQueue.size() < threshold && !isCanceled()) {
+                  refiller.fillQueueForKey(name, keyQueue,
+                      cacheSize - keyQueue.size());
+                }
+                if (isCanceled()) {
+                  keyQueue.clear();
+                }
+              } finally {
+                writeUnlock(keyName);

INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS74 INS59 INS23 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS31 INS8 INS42 INS34 INS42 INS16 INS43 INS43 INS42 INS14 INS83 INS43 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS21 INS65 INS65 INS42 INS43 INS42 INS41 INS43 INS42 INS41 UPD74 INS83 INS43 INS42 INS44 INS8 INS24 INS54 INS21 INS54 INS27 INS42 INS27 INS42 INS42 INS74 INS42 INS42 INS42 INS14 INS21 INS41 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS66 INS42 INS66 INS42 INS32 INS42 INS27 UPD43 MOV43 INS43 INS42 MOV43 INS42 INS60 INS25 INS41 INS58 INS27 INS38 INS8 INS8 MOV12 INS32 MOV8 INS8 INS42 INS40 INS42 INS34 INS43 INS43 INS9 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 UPD42 INS42 UPD74 INS38 INS43 INS59 INS27 INS8 INS42 INS39 INS59 INS42 INS42 INS42 INS21 INS60 INS61 INS21 MOV54 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 UPD43 MOV32 INS21 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS42 INS34 INS32 INS43 INS59 INS27 INS8 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS43 INS32 INS32 INS48 INS42 INS42 INS42 INS14 INS42 INS42 INS36 INS33 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS21 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS7 INS32 INS32 INS32 INS32 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS8 INS43 INS42 INS21 INS54 INS42 INS32 MOV8 INS8 INS42 INS42 INS25 INS21 INS27 INS32 INS8 INS32 MOV27 INS38 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS42