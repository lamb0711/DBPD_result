HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.
Contributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.

+import java.net.URI;
+import org.apache.hadoop.io.Text;
+import org.apache.hadoop.security.token.TokenIdentifier;
+import org.apache.hadoop.util.KMSUtil;
+  private final Text dtService; // service in token.
+  private final Text canonicalService; // credentials alias for token.
-  public LoadBalancingKMSClientProvider(KMSClientProvider[] providers,
-      Configuration conf) {
-    this(shuffle(providers), Time.monotonicNow(), conf);
+  public LoadBalancingKMSClientProvider(URI providerUri,
+      KMSClientProvider[] providers, Configuration conf) {
+    this(providerUri, providers, Time.monotonicNow(), conf);
+    this(URI.create("kms://testing"), providers, seed, conf);
+  }
+
+  private LoadBalancingKMSClientProvider(URI uri,
+      KMSClientProvider[] providers, long seed, Configuration conf) {
-    this.providers = providers;
+    // uri is the token service so it can be instantiated for renew/cancel.
+    dtService = KMSClientProvider.getDtService(uri);
+    // if provider not in conf, new client will alias on uri else addr.
+    if (KMSUtil.getKeyProviderUri(conf) == null) {
+      canonicalService = dtService;
+    } else {
+      // canonical service (credentials alias) will be the first underlying
+      // provider's service.  must be deterministic before shuffle so multiple
+      // calls for a token do not obtain another unnecessary token.
+      canonicalService = new Text(providers[0].getCanonicalServiceName());
+    }
+
+    // shuffle unless seed is 0 which is used by tests for determinism.
+    this.providers = (seed != 0) ? shuffle(providers) : providers;
+    for (KMSClientProvider provider : providers) {
+      provider.setClientTokenProvider(this);
+    }
+    LOG.debug("Created LoadBalancingKMSClientProvider for KMS url: {} with {} "
+            + "providers. delegation token service: {}, canonical service: {}",
+        uri, providers.length, dtService, canonicalService);
+  @Override
+  public org.apache.hadoop.security.token.Token<? extends TokenIdentifier>
+      selectDelegationToken(Credentials creds) {
+    Token<? extends TokenIdentifier> token =
+        KMSClientProvider.selectDelegationToken(creds, canonicalService);
+    // fallback to querying each sub-provider.
+    if (token == null) {
+      for (KMSClientProvider provider : getProviders()) {
+        token = provider.selectDelegationToken(creds);
+        if (token != null) {
+          break;
+        }
+      }
+    }
+    return token;
+  }
+
-  public Token<?>[]
-      addDelegationTokens(final String renewer, final Credentials credentials)
-          throws IOException {
-    return doOp(new ProviderCallable<Token<?>[]>() {
+  public String getCanonicalServiceName() {
+    return canonicalService.toString();
+  }
+
+  @Override
+  public Token<?> getDelegationToken(String renewer) throws IOException {
+    return doOp(new ProviderCallable<Token<?>>() {
-      public Token<?>[] call(KMSClientProvider provider) throws IOException {
-        return provider.addDelegationTokens(renewer, credentials);
+      public Token<?> call(KMSClientProvider provider) throws IOException {
+        Token<?> token = provider.getDelegationToken(renewer);
+        // override sub-providers service with our own so it can be used
+        // across all providers.
+        token.setService(dtService);
+        LOG.debug("New token service set. Token: ({})", token);
+        return token;

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 MOV78 INS42 INS44 INS44 INS44 INS8 INS83 INS44 INS78 INS83 INS74 INS42 MOV44 INS8 MOV78 INS83 MOV43 INS42 INS8 MOV78 INS83 MOV74 UPD42 MOV42 MOV44 MOV43 MOV8 INS42 INS42 INS42 INS42 INS43 INS42 INS5 INS42 INS39 INS42 INS43 INS42 INS17 INS43 INS42 INS21 INS25 INS21 INS70 INS21 INS42 INS43 INS76 UPD42 INS60 INS25 INS41 INS41 INS43 INS42 INS42 INS42 INS43 MOV85 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS27 INS8 INS8 INS7 INS44 INS42 INS8 INS32 INS40 INS43 INS74 INS59 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS32 INS32 INS33 INS21 MOV21 MOV22 INS16 INS43 INS42 INS21 INS42 INS42 INS27 INS42 INS40 INS42 INS42 INS42 INS43 INS76 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS36 MOV32 INS42 INS42 INS32 INS45 INS45 INS42 INS43 INS42 INS42 INS42 INS42 INS44 INS32 INS8 UPD74 INS42 INS42 INS42 INS14 INS27 INS42 INS42 INS52 INS42 INS43 INS42 INS42 INS21 INS25 INS74 INS43 INS32 INS42 INS34 INS42 INS7 INS27 INS8 INS43 INS76 INS78 MOV74 INS42 INS2 INS42 INS42 INS32 INS42 INS33 INS10 INS42 INS42 INS60 INS21 INS21 INS41 INS42 INS34 INS42 INS42 INS42 MOV74 INS59 INS32 INS32 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS45 INS42 MOV42 UPD42 MOV42 MOV42 DEL42 DEL83 DEL83 DEL85 DEL5 DEL85 DEL5 DEL32 DEL41 DEL83 DEL5 DEL31