HADOOP-6234. Add new option dfs.umaskmode to set umask in configuration to use octal or symbolic instead of decimal. Contributed by Jakob Homan.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812652 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.fs.permission.ChmodParser;
-  private static Pattern chmodNormalPattern =
-   Pattern.compile("\\G\\s*([ugoa]*)([+=-]+)([rwxXt]+)([,\\s]*)\\s*");
-  private static Pattern chmodOctalPattern =
-            Pattern.compile("^\\s*[+]?([01]?)([0-7]{3})\\s*$");
+  private static  ChmodParser pp;
+  
-    private short userMode;
-    private short groupMode;
-    private short othersMode;
-    private short stickyMode;
-    private char userType = '+';
-    private char groupType = '+';
-    private char othersType = '+';
-    private char stickyBitType = '+';
-
-    private void applyNormalPattern(String modeStr, Matcher matcher)
-                                    throws IOException {
-      // Are there multiple permissions stored in one chmod?
-      boolean commaSeperated = false;
-
-      for(int i=0; i < 1 || matcher.end() < modeStr.length(); i++) {
-        if (i>0 && (!commaSeperated || !matcher.find())) {
-          patternError(modeStr);
-        }
-
-        /* groups : 1 : [ugoa]*
-         *          2 : [+-=]
-         *          3 : [rwxXt]+
-         *          4 : [,\s]*
-         */
-
-        String str = matcher.group(2);
-        char type = str.charAt(str.length() - 1);
-
-        boolean user, group, others, stickyBit;
-        user = group = others = stickyBit = false;
-
-        for(char c : matcher.group(1).toCharArray()) {
-          switch (c) {
-          case 'u' : user = true; break;
-          case 'g' : group = true; break;
-          case 'o' : others = true; break;
-          case 'a' : break;
-          default  : throw new RuntimeException("Unexpected");          
-          }
-        }
-
-        if (!(user || group || others)) { // same as specifying 'a'
-          user = group = others = true;
-        }
-
-        short mode = 0;
-
-        for(char c : matcher.group(3).toCharArray()) {
-          switch (c) {
-          case 'r' : mode |= 4; break;
-          case 'w' : mode |= 2; break;
-          case 'x' : mode |= 1; break;
-          case 'X' : mode |= 8; break;
-          case 't' : stickyBit = true; break;
-          default  : throw new RuntimeException("Unexpected");
-          }
-        }
-
-        if ( user ) {
-          userMode = mode;
-          userType = type;
-        }
-
-        if ( group ) {
-          groupMode = mode;
-          groupType = type;
-        }
-
-        if ( others ) {
-          othersMode = mode;
-          othersType = type;
-          
-          stickyMode = (short) (stickyBit ? 1 : 0);
-          stickyBitType = type;
-        }
-
-        commaSeperated = matcher.group(4).contains(",");
-      }
-    }
-
-    private void applyOctalPattern(String modeStr, Matcher matcher) {
-      userType = groupType = othersType = '=';
-
-      // Check if sticky bit is specified
-      String sb = matcher.group(1);
-      if(!sb.isEmpty()) {
-        stickyMode = Short.valueOf(sb.substring(0, 1));
-        stickyBitType = '=';
-      }
-
-      String str = matcher.group(2);
-      userMode = Short.valueOf(str.substring(0, 1));
-      groupMode = Short.valueOf(str.substring(1, 2));
-      othersMode = Short.valueOf(str.substring(2, 3));      
-    }
-
-    private void patternError(String mode) throws IOException {
-      throw new IOException("chmod : mode '" + mode + 
-                            "' does not match the expected pattern.");      
-    }
-
-      Matcher matcher = null;
-
-      if ((matcher = chmodNormalPattern.matcher(modeStr)).find()) {
-        applyNormalPattern(modeStr, matcher);
-      } else if ((matcher = chmodOctalPattern.matcher(modeStr)).matches()) {
-        applyOctalPattern(modeStr, matcher);
-      } else {
-        patternError(modeStr);
+      try {
+        pp = new ChmodParser(modeStr);
+      } catch(IllegalArgumentException iea) {
+        patternError(iea.getMessage());
-    private int applyChmod(char type, int mode, int existing, boolean exeOk) {
-      boolean capX = false;
-
-      if ((mode&8) != 0) { // convert X to x;
-        capX = true;
-        mode &= ~8;
-        mode |= 1;
-      }
-
-      switch (type) {
-      case '+' : mode = mode | existing; break;
-      case '-' : mode = (~mode) & existing; break;
-      case '=' : break;
-      default  : throw new RuntimeException("Unexpected");      
-      }
-
-      // if X is specified add 'x' only if exeOk or x was already set.
-      if (capX && !exeOk && (mode&1) != 0 && (existing&1) == 0) {
-        mode &= ~1; // remove x
-      }
-
-      return mode;
+    private void patternError(String mode) throws IOException {
+     throw new IOException("chmod : mode '" + mode + 
+         "' does not match the expected pattern.");      
-
+    
-      FsPermission perms = file.getPermission();
-      int existing = perms.toShort();
-      boolean exeOk = file.isDir() || (existing & 0111) != 0;
-      int newperms = ( applyChmod(stickyBitType, stickyMode,
-                             (existing>>>9), false) << 9 |
-                       applyChmod(userType, userMode,
-                             (existing>>>6)&7, exeOk) << 6 |
-                       applyChmod(groupType, groupMode,
-                             (existing>>>3)&7, exeOk) << 3 |
-                       applyChmod(othersType, othersMode, existing&7, exeOk));
+      int newperms = pp.applyNewPermission(file);
-      if (existing != newperms) {
+      if (file.getPermission().toShort() != newperms) {

INS26 MOV23 INS40 UPD43 INS31 UPD42 UPD42 INS42 MOV44 MOV44 MOV43 INS8 MOV46 INS54 INS8 INS12 MOV21 INS44 INS8 INS32 INS32 INS7 UPD43 MOV43 UPD42 MOV42 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 UPD42 MOV42 INS14 UPD42 INS32 INS43 INS42 UPD42 MOV42 MOV32 INS42 UPD42 UPD42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL9 DEL7 DEL7 DEL7 DEL7 DEL34 DEL34 DEL42 DEL42 DEL32 DEL7 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL13 DEL59 DEL23 DEL83 DEL39 DEL42 DEL13 DEL59 DEL23 DEL83 DEL39 DEL42 DEL13 DEL59 DEL23 DEL83 DEL39 DEL42 DEL13 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL37 DEL42 DEL34 DEL27 DEL42 DEL38 DEL42 DEL42 DEL32 DEL38 DEL27 DEL36 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL59 DEL60 DEL39 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL42 DEL59 DEL60 DEL39 DEL42 DEL44 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL42 DEL13 DEL49 DEL42 DEL9 DEL7 DEL21 DEL10 DEL13 DEL49 DEL42 DEL9 DEL7 DEL21 DEL10 DEL13 DEL49 DEL42 DEL9 DEL7 DEL21 DEL10 DEL13 DEL49 DEL10 DEL49 DEL42 DEL43 DEL45 DEL14 DEL53 DEL50 DEL8 DEL70 DEL42 DEL42 DEL42 DEL27 DEL36 DEL38 DEL42 DEL42 DEL42 DEL9 DEL7 DEL7 DEL7 DEL21 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL44 DEL42 DEL42 DEL34 DEL32 DEL42 DEL32 DEL42 DEL13 DEL49 DEL42 DEL34 DEL7 DEL21 DEL10 DEL13 DEL49 DEL42 DEL34 DEL7 DEL21 DEL10 DEL13 DEL49 DEL42 DEL34 DEL7 DEL21 DEL10 DEL13 DEL49 DEL42 DEL34 DEL7 DEL21 DEL10 DEL13 DEL49 DEL42 DEL9 DEL7 DEL21 DEL10 DEL49 DEL42 DEL43 DEL45 DEL14 DEL53 DEL50 DEL8 DEL70 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL39 DEL42 DEL34 DEL34 DEL16 DEL36 DEL11 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL34 DEL32 DEL42 DEL45 DEL32 DEL7 DEL21 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL13 DEL7 DEL7 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL13 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL34 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL34 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL34 DEL32 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL34 DEL38 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL42 DEL13 DEL49 DEL42 DEL42 DEL42 DEL27 DEL7 DEL21 DEL10 DEL13 DEL49 DEL42 DEL42 DEL38 DEL36 DEL42 DEL27 DEL7 DEL21 DEL10 DEL13 DEL49 DEL10 DEL49 DEL42 DEL43 DEL45 DEL14 DEL53 DEL50 DEL42 DEL42 DEL38 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL27 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL27 DEL42 DEL34 DEL38 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL36 DEL9 DEL32 DEL34 DEL27 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL36 DEL34 DEL27 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL42 DEL32 DEL27 DEL36 DEL42