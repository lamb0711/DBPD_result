HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)

+import org.apache.hadoop.hdfs.protocol.QuotaByStorageTypeExceededException;
+import org.apache.hadoop.hdfs.StorageType;
+import org.apache.hadoop.hdfs.util.EnumCounters;
-  public static final long DEFAULT_DISKSPACE_QUOTA = HdfsConstants.QUOTA_RESET;
+  public static final long DEFAULT_SPACE_QUOTA = HdfsConstants.QUOTA_RESET;
-  /** Name space quota */
-  private long nsQuota = DEFAULT_NAMESPACE_QUOTA;
-  /** Name space count */
-  private long namespace = 1L;
-  /** Disk space quota */
-  private long dsQuota = DEFAULT_DISKSPACE_QUOTA;
-  /** Disk space count */
-  private long diskspace = 0L;
-  
-  DirectoryWithQuotaFeature(long nsQuota, long dsQuota) {
-    this.nsQuota = nsQuota;
-    this.dsQuota = dsQuota;
+  private QuotaCounts quota;
+  private QuotaCounts usage;
+
+  public static class Builder {
+    private QuotaCounts quota;
+    private QuotaCounts usage;
+
+    public Builder() {
+      this.quota = new QuotaCounts.Builder().nameCount(DEFAULT_NAMESPACE_QUOTA).
+          spaceCount(DEFAULT_SPACE_QUOTA).typeCounts(DEFAULT_SPACE_QUOTA).build();
+      this.usage = new QuotaCounts.Builder().nameCount(1).build();
+    }
+
+    public Builder nameSpaceQuota(long nameSpaceQuota) {
+      this.quota.setNameSpace(nameSpaceQuota);
+      return this;
+    }
+
+    public Builder spaceQuota(long spaceQuota) {
+      this.quota.setDiskSpace(spaceQuota);
+      return this;
+    }
+
+    public Builder typeQuotas(EnumCounters<StorageType> typeQuotas) {
+      this.quota.setTypeSpaces(typeQuotas);
+      return this;
+    }
+
+    public Builder typeQuota(StorageType type, long quota) {
+      this.quota.setTypeSpace(type, quota);
+      return this;
+    }
+
+    public DirectoryWithQuotaFeature build() {
+      return new DirectoryWithQuotaFeature(this);
+    }
+  }
+
+  private DirectoryWithQuotaFeature(Builder builder) {
+    this.quota = builder.quota;
+    this.usage = builder.usage;
-  Quota.Counts getQuota() {
-    return Quota.Counts.newInstance(nsQuota, dsQuota);
+  QuotaCounts getQuota() {
+    return new QuotaCounts.Builder().quotaCount(this.quota).build();
-  
+
+   * @param type Storage type quota to be set
+   * * To set traditional space/namespace quota, type must be null
-  void setQuota(long nsQuota, long dsQuota) {
-    this.nsQuota = nsQuota;
-    this.dsQuota = dsQuota;
+  void setQuota(long nsQuota, long dsQuota, StorageType type) {
+    if (type != null) {
+      this.quota.setTypeSpace(type, dsQuota);
+    } else {
+      setQuota(nsQuota, dsQuota);
+    }
-  
-  Quota.Counts addNamespaceDiskspace(Quota.Counts counts) {
-    counts.add(Quota.NAMESPACE, namespace);
-    counts.add(Quota.DISKSPACE, diskspace);
+
+  void setQuota(long nsQuota, long dsQuota) {
+    this.quota.setNameSpace(nsQuota);
+    this.quota.setDiskSpace(dsQuota);
+  }
+
+  void setQuota(long dsQuota, StorageType type) {
+    this.quota.setTypeSpace(type, dsQuota);
+  }
+
+  // Set in a batch only during FSImage load
+  void setQuota(EnumCounters<StorageType> typeQuotas) {
+    this.quota.setTypeSpaces(typeQuotas);
+  }
+
+  QuotaCounts addNamespaceDiskspace(QuotaCounts counts) {
+    counts.add(this.usage);
-  
+
-    if (-1 != getQuota().get(Quota.DISKSPACE) && diskspace != computed) {
+    if (-1 != quota.getDiskSpace() && usage.getDiskSpace() != computed) {
-          + dir.getFullPathName() + ". Cached = " + diskspace
+          + dir.getFullPathName() + ". Cached = " + usage.getDiskSpace()
-  void addSpaceConsumed(final INodeDirectory dir, final long nsDelta,
-      final long dsDelta, boolean verify) throws QuotaExceededException {
-    if (dir.isQuotaSet()) { 
-      // The following steps are important: 
+  void addSpaceConsumed(final INodeDirectory dir, final QuotaCounts counts,
+      boolean verify) throws QuotaExceededException {
+    if (dir.isQuotaSet()) {
+      // The following steps are important:
-
-        verifyQuota(nsDelta, dsDelta);
+        verifyQuota(counts);
-      // (2) verify quota and then add count in ancestors 
-      dir.addSpaceConsumed2Parent(nsDelta, dsDelta, verify);
+      // (2) verify quota and then add count in ancestors
+      dir.addSpaceConsumed2Parent(counts, verify);
-      addSpaceConsumed2Cache(nsDelta, dsDelta);
+      addSpaceConsumed2Cache(counts);
-      dir.addSpaceConsumed2Parent(nsDelta, dsDelta, verify);
+      dir.addSpaceConsumed2Parent(counts, verify);
-  /** Update the size of the tree
+  /** Update the space/namespace/type usage of the tree
-   * @param nsDelta the change of the tree size
-   * @param dsDelta change to disk space occupied
+   * @param delta the change of the namespace/space/type usage
-  public void addSpaceConsumed2Cache(long nsDelta, long dsDelta) {
-    namespace += nsDelta;
-    diskspace += dsDelta;
+  public void addSpaceConsumed2Cache(QuotaCounts delta) {
+    usage.add(delta);
-  
+
+   * @param typeUsed counters of storage type usage
-  void setSpaceConsumed(long namespace, long diskspace) {
-    this.namespace = namespace;
-    this.diskspace = diskspace;
+  void setSpaceConsumed(long namespace, long diskspace,
+      EnumCounters<StorageType> typeUsed) {
+    usage.setNameSpace(namespace);
+    usage.setDiskSpace(diskspace);
+    usage.setTypeSpaces(typeUsed);
-  
+
+  void setSpaceConsumed(QuotaCounts c) {
+    usage.setNameSpace(c.getNameSpace());
+    usage.setDiskSpace(c.getDiskSpace());
+    usage.setTypeSpaces(c.getTypeSpaces());
+  }
+
-  public Quota.Counts getSpaceConsumed() {
-    return Quota.Counts.newInstance(namespace, diskspace);
+  public QuotaCounts getSpaceConsumed() {
+    return new QuotaCounts.Builder().quotaCount(usage).build();
-    if (Quota.isViolated(nsQuota, namespace, delta)) {
-      throw new NSQuotaExceededException(nsQuota, namespace + delta);
+    if (Quota.isViolated(quota.getNameSpace(), usage.getNameSpace(), delta)) {
+      throw new NSQuotaExceededException(quota.getNameSpace(),
+          usage.getNameSpace() + delta);
-    if (Quota.isViolated(dsQuota, diskspace, delta)) {
-      throw new DSQuotaExceededException(dsQuota, diskspace + delta);
+    if (Quota.isViolated(quota.getDiskSpace(), usage.getDiskSpace(), delta)) {
+      throw new DSQuotaExceededException(quota.getDiskSpace(),
+          usage.getDiskSpace() + delta);
+    }
+  }
+
+  private void verifyQuotaByStorageType(EnumCounters<StorageType> typeDelta)
+      throws QuotaByStorageTypeExceededException {
+    if (!isQuotaByStorageTypeSet()) {
+      return;
+    }
+    for (StorageType t: StorageType.getTypesSupportingQuota()) {
+      if (!isQuotaByStorageTypeSet(t)) {
+        continue;
+      }
+      if (Quota.isViolated(quota.getTypeSpace(t), usage.getTypeSpace(t),
+          typeDelta.get(t))) {
+        throw new QuotaByStorageTypeExceededException(
+          quota.getTypeSpace(t), usage.getTypeSpace(t) + typeDelta.get(t), t);
+      }
-   * @throws QuotaExceededException if namespace or diskspace quotas is
-   *         violated after applying the deltas.
+   * @throws QuotaExceededException if namespace, diskspace or storage type quotas
+   * is violated after applying the deltas.
-  void verifyQuota(long nsDelta, long dsDelta) throws QuotaExceededException {
-    verifyNamespaceQuota(nsDelta);
-    verifyDiskspaceQuota(dsDelta);
+  void verifyQuota(QuotaCounts counts) throws QuotaExceededException {
+    verifyNamespaceQuota(counts.getNameSpace());
+    verifyDiskspaceQuota(counts.getDiskSpace());
+    verifyQuotaByStorageType(counts.getTypeSpaces());
-  
+
-    return nsQuota >= 0 || dsQuota >= 0;
+    return quota.anyNsSpCountGreaterOrEqual(0) ||
+        quota.anyTypeCountGreaterOrEqual(0);
+  }
+
+  boolean isQuotaByStorageTypeSet() {
+    return quota.anyTypeCountGreaterOrEqual(0);
+  }
+
+  boolean isQuotaByStorageTypeSet(StorageType t) {
+    return quota.getTypeSpace(t) >= 0;
-    return "namespace: " + (nsQuota < 0? "-": namespace + "/" + nsQuota);
+    return "namespace: " + (quota.getNameSpace() < 0? "-":
+        usage.getNameSpace() + "/" + quota.getNameSpace());
-    return "diskspace: " + (dsQuota < 0? "-": diskspace + "/" + dsQuota);
+    return "diskspace: " + (quota.getDiskSpace() < 0? "-":
+        usage.getDiskSpace() + "/" + quota.getDiskSpace());
-  
+
+  private String quotaByStorageTypeString() {
+    StringBuilder sb = new StringBuilder();
+    for (StorageType t : StorageType.getTypesSupportingQuota()) {
+      sb.append("StorageType: " + t +
+          (quota.getTypeSpace(t) < 0? "-":
+          usage.getTypeSpace(t) + "/" + usage.getTypeSpace(t)));
+    }
+    return sb.toString();
+  }
+
-    return "Quota[" + namespaceString() + ", " + diskspaceString() + "]";
+    return "Quota[" + namespaceString() + ", " + diskspaceString() +
+        ", " + quotaByStorageTypeString() + "]";
-}
+}

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS43 INS43 INS83 INS83 INS42 MOV23 MOV23 MOV31 INS31 INS31 INS31 INS31 INS31 INS83 INS42 INS44 INS8 UPD43 MOV29 INS39 INS42 MOV44 MOV44 INS44 INS8 MOV44 INS44 INS39 INS42 MOV44 INS44 INS8 INS39 INS42 INS44 INS8 UPD43 MOV29 MOV83 MOV39 MOV42 MOV44 INS8 MOV29 INS39 INS42 MOV44 MOV44 INS44 MOV8 INS44 UPD43 INS83 INS39 INS42 INS44 INS43 INS8 INS39 INS42 INS8 INS39 INS42 INS44 INS8 MOV43 MOV43 INS83 INS43 INS42 INS8 UPD42 INS42 UPD42 INS42 UPD42 INS43 INS43 INS83 UPD42 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS21 INS21 INS42 INS65 INS43 INS42 INS25 INS39 INS42 INS43 INS42 INS21 INS74 INS42 INS21 INS42 UPD43 INS43 INS42 INS43 UPD42 INS21 INS65 INS74 INS42 INS21 INS43 INS42 INS21 INS42 INS74 INS42 INS42 INS25 INS70 INS43 INS42 INS21 INS41 INS43 INS42 INS41 INS42 INS60 INS70 INS41 INS42 UPD42 INS42 UPD42 INS42 INS39 INS42 INS21 INS41 INS42 INS39 INS42 INS21 INS41 INS42 INS74 INS42 INS21 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS41 INS42 INS41 INS42 INS7 INS7 INS42 INS66 INS66 INS42 INS27 INS8 INS8 INS32 INS32 INS42 INS32 INS43 INS43 INS32 INS42 INS42 UPD66 UPD42 UPD66 INS42 INS32 INS42 INS66 INS43 INS43 INS32 INS32 INS32 INS42 INS32 INS32 INS32 INS43 INS43 INS38 INS8 INS44 INS32 INS8 UPD66 UPD66 INS42 INS32 INS32 INS42 INS27 INS43 INS59 INS44 INS32 INS8 INS32 INS32 INS52 INS32 INS52 INS43 INS43 INS32 INS52 INS42 INS32 INS52 INS14 INS22 INS40 INS22 INS40 INS32 UPD42 INS42 INS33 INS21 INS21 INS22 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 UPD42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS41 INS43 INS42 INS42 INS42 INS25 INS25 INS32 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS34 INS32 INS34 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS21 INS42 INS42 INS45 INS32 INS32 INS32 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS43 INS52 INS52 INS42 INS52 INS42 INS14 UPD42 MOV42 INS22 INS32 INS32 MOV52 UPD42 MOV42 MOV52 UPD42 MOV42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS38 INS8 INS32 INS8 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS42 INS42 INS42 INS43 INS42 INS32 INS42 UPD42 INS32 INS42 UPD42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS43 INS52 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS43 INS32 INS32 INS32 INS18 INS42 INS42 INS32 INS32 INS32 INS53 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS14 INS42 INS34 INS40 INS52 INS42 INS32 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS32 INS32 INS32 INS32 INS32 INS45 INS42 INS36 INS32 INS42 INS42 INS43 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS43 INS32 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS14 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS45 INS27 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS32 INS45 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL66 DEL65 DEL29 DEL39 DEL34 DEL66 DEL65 DEL29 DEL39 DEL42 DEL66 DEL65 DEL29 DEL39 DEL34 DEL42 DEL42 DEL40 DEL40 DEL42 DEL22 DEL42 DEL7 DEL22 DEL42 DEL7 DEL40 DEL40 DEL40 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL32 DEL40 DEL42 DEL42 DEL39 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL66 DEL65 DEL39 DEL42 DEL42 DEL7 DEL42 DEL42 DEL7 DEL39 DEL42 DEL44 DEL31 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL40 DEL40 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42