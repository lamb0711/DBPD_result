YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu

+
+import java.util.Map;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.util.Shell.CommandExecutor;
-      List<String> localDirs, List<String> logDirs)
+      LocalDirsHandlerService dirsHandler)
+    List<String> localDirs = dirsHandler.getLocalDirs();
+    List<String> logDirs = dirsHandler.getLogDirs();
+    
-
+    
-      String userName, String appId, Path containerWorkDir,
+      String user, String appId, Path containerWorkDir,
-
+    
-      Path userdir = new Path(usersdir, userName);
+      Path userdir = new Path(usersdir, user);
-      createDir(containerDir, dirPerm, true, userName);
+      createDir(containerDir, dirPerm, true, user);
-    createContainerLogDirs(appIdStr, containerIdStr, logDirs, userName);
+    createContainerLogDirs(appIdStr, containerIdStr, logDirs, user);
-    createDir(tmpDir, dirPerm, false, userName);
+    createDir(tmpDir, dirPerm, false, user);
-    // copy launch script to work dir
-    Path launchDst =
-        new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT);
-    copyFile(nmPrivateContainerScriptPath, launchDst, userName);
-    copyFile(nmPrivateTokensPath, tokenDst, userName);
+    copyFile(nmPrivateTokensPath, tokenDst, user);
+
+    // copy launch script to work dir
+    Path launchDst =
+        new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT);
+    copyFile(nmPrivateContainerScriptPath, launchDst, user);
-
+    
-    ShellCommandExecutor shExec = null;
+    Shell.CommandExecutor shExec = null;
-      setScriptExecutable(launchDst, userName);
-      setScriptExecutable(sb.getWrapperScriptPath(), userName);
+      setScriptExecutable(launchDst, user);
+      setScriptExecutable(sb.getWrapperScriptPath(), user);
-      // Setup command to run
-      String[] command = getRunCommand(sb.getWrapperScriptPath().toString(),
-        containerIdStr, userName, pidFile, this.getConf());
-
-      LOG.info("launchContainer: " + Arrays.toString(command));
-      shExec = new ShellCommandExecutor(
-          command,
+      shExec = buildCommandExecutor(sb.getWrapperScriptPath().toString(),
+          containerIdStr, user, pidFile,
-          container.getLaunchContext().getEnvironment());      // sanitized env
+          container.getLaunchContext().getEnvironment());
+      
-      ; //
+      if (shExec != null) shExec.close();
+  protected CommandExecutor buildCommandExecutor(String wrapperScriptPath, 
+      String containerIdStr, String user, Path pidFile, File wordDir, 
+      Map<String, String> environment) 
+          throws IOException {
+    
+    String[] command = getRunCommand(wrapperScriptPath,
+        containerIdStr, user, pidFile, this.getConf());
+
+      LOG.info("launchContainer: " + Arrays.toString(command));
+      return new ShellCommandExecutor(
+          command,
+          wordDir,
+          environment); 
+  }
+
-  private void killContainer(String pid, Signal signal) throws IOException {
+  protected void killContainer(String pid, Signal signal) throws IOException {

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS44 MOV60 MOV21 INS83 INS43 INS42 MOV44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 UPD83 INS43 UPD42 INS60 INS60 INS43 INS42 INS42 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS42 INS60 MOV21 INS41 UPD42 MOV42 INS74 INS59 INS74 INS59 INS42 UPD43 INS42 INS42 INS42 INS42 INS43 INS43 INS43 MOV5 INS59 INS14 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 INS25 INS42 INS42 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS27 INS21 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 UPD42 UPD42 INS32 INS42 INS33 INS32 MOV43 UPD42 INS42 MOV32 INS42 INS42 INS42 MOV14 MOV32 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL14 DEL20