HADOOP-15583. Stabilize S3A Assumed Role support.
Contributed by Steve Loughran.

+import java.nio.file.AccessDeniedException;
+import com.amazonaws.auth.AWSCredentialsProvider;
+import org.apache.hadoop.fs.s3a.AWSCredentialProviderList;
+import org.apache.hadoop.fs.s3a.auth.RolePolicies;
-import static org.apache.hadoop.fs.s3a.S3AUtils.translateException;
+import static org.apache.hadoop.fs.s3a.S3AUtils.*;
+  private AWSCredentialProviderList credentials;
+   * @param bucket Optional bucket to use to look up per-bucket proxy secrets
+   * @param credentials credentials.
-  private static DynamoDB createDynamoDB(Configuration conf, String s3Region)
+  private static DynamoDB createDynamoDB(
+      final Configuration conf,
+      final String s3Region,
+      final String bucket,
+      final AWSCredentialsProvider credentials)
-        .createDynamoDBClient(s3Region);
+        .createDynamoDBClient(s3Region, bucket, credentials);
+  /**
+   * {@inheritDoc}.
+   * The credentials for authenticating with S3 are requested from the
+   * FS via {@link S3AFileSystem#shareCredentials(String)}; this will
+   * increment the reference counter of these credentials.
+   * @param fs {@code S3AFileSystem} associated with the MetadataStore
+   * @throws IOException on a failure
+   */
-      region = owner.getBucketLocation();
+      try {
+        region = owner.getBucketLocation();
+      } catch (AccessDeniedException e) {
+        // access denied here == can't call getBucket. Report meaningfully
+        URI uri = owner.getUri();
+        LOG.error("Failed to get bucket location from S3 bucket {}",
+            uri);
+        throw (IOException)new AccessDeniedException(
+            "S3 client role lacks permission "
+                + RolePolicies.S3_GET_BUCKET_LOCATION + " for " + uri)
+            .initCause(e);
+      }
-    dynamoDB = createDynamoDB(conf, region);
+    credentials = owner.shareCredentials("s3guard");
+    dynamoDB = createDynamoDB(conf, region, bucket, credentials);
+   * It also creates a new credential provider list from the configuration,
+   * using the base fs.s3a.* options, as there is no bucket to infer per-bucket
+   * settings from.
-    dynamoDB = createDynamoDB(conf, region);
+    credentials = createAWSCredentialProviderSet(null, conf);
+    dynamoDB = createDynamoDB(conf, region, null, credentials);
-    if (dynamoDB != null) {
-      LOG.debug("Shutting down {}", this);
-      dynamoDB.shutdown();
-      dynamoDB = null;
+    try {
+      if (dynamoDB != null) {
+        LOG.debug("Shutting down {}", this);
+        dynamoDB.shutdown();
+        dynamoDB = null;
+      }
+    } finally {
+      closeAutocloseables(LOG, credentials);
+      credentials = null;
-  }
+}

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS23 INS83 INS43 INS59 INS44 INS44 INS29 INS42 INS42 INS65 INS65 INS83 INS83 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS65 INS65 INS65 INS21 INS21 INS54 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS65 INS66 INS66 INS66 INS65 INS66 INS66 INS42 INS66 INS65 INS66 INS42 INS66 INS8 INS7 INS66 INS66 INS66 INS7 INS8 INS8 INS68 INS66 INS54 MOV21 INS42 INS32 INS42 INS32 MOV25 INS21 INS21 INS42 INS42 INS42 INS42 INS69 MOV8 INS12 INS42 INS42 INS45 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS32 INS7 MOV43 INS44 INS8 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS60 INS21 INS53 INS42 INS43 INS59 INS32 INS11 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS43 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS27 INS42 INS45 INS40 INS45 INS42