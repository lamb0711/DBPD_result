HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)

-import com.amazonaws.AmazonServiceException;
+import static org.apache.hadoop.fs.s3a.S3AUtils.*;
-    if (LOG.isDebugEnabled()){
-      LOG.debug("Initialized S3AFastOutputStream for bucket '{}' key '{}'",
-          bucket, key);
-    }
+    LOG.debug("Initialized S3AFastOutputStream for bucket '{}' key '{}'",
+        bucket, key);
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Total length of initial buffer: {}", allBytes.length);
-      }
+      LOG.debug("Total length of initial buffer: {}", allBytes.length);
-        if (LOG.isDebugEnabled()) {
-          LOG.debug("Initial buffer: processing from byte {} to byte {}",
-              processedPos, (processedPos + partSize - 1));
-        }
+        LOG.debug("Initial buffer: processing from byte {} to byte {}",
+            processedPos, (processedPos + partSize - 1));
-
+  /**
+   * Close the stream. This will not return until the upload is complete
+   * or the attempt to perform the upload has failed.
+   * Exceptions raised in this method are indicative that the write has
+   * failed and data is at risk of being lost.
+   * @throws IOException on any failure.
+   */
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Upload complete for bucket '{}' key '{}'", bucket, key);
-      }
+      LOG.debug("Upload complete for bucket '{}' key '{}'", bucket, key);
-    } catch (AmazonServiceException ase) {
-      throw new IOException("Unable to initiate MultiPartUpload (server side)" +
-          ": " + ase, ase);
-      throw new IOException("Unable to initiate MultiPartUpload (client side)" +
-          ": " + ace, ace);
+      throw translateException("initiate MultiPartUpload", key, ace);
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Executing regular upload for bucket '{}' key '{}'", bucket,
-          key);
-    }
+    LOG.debug("Executing regular upload for bucket '{}' key '{}'",
+        bucket, key);
-      throw new IOException("Regular upload failed", ee.getCause());
+      throw extractException("regular upload", key, ee);
+
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Initiated multi-part upload for bucket '{}' key '{}' with " +
-            "id '{}'", bucket, key, uploadId);
-      }
+      LOG.debug("Initiated multi-part upload for bucket '{}' key '{}' with " +
+          "id '{}'", bucket, key, uploadId);
-    public void uploadPartAsync(ByteArrayInputStream inputStream,
+    private void uploadPartAsync(ByteArrayInputStream inputStream,
-              if (LOG.isDebugEnabled()) {
-                LOG.debug("Uploading part {} for id '{}'", currentPartNumber,
-                    uploadId);
-              }
+              LOG.debug("Uploading part {} for id '{}'", currentPartNumber,
+                  uploadId);
-    public List<PartETag> waitForAllPartUploads() throws IOException {
+    private List<PartETag> waitForAllPartUploads() throws IOException {
+        return null;
-        throw new IOException("Part upload failed in multi-part upload with " +
-            "id '" +uploadId + "':" + ee, ee);
+        throw extractException("Multi-part upload with id '" + uploadId + "'",
+            key, ee);
-      //should not happen?
-      return null;
-    public void complete(List<PartETag> partETags) {
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Completing multi-part upload for key '{}', id '{}'", key,
-            uploadId);
+    private void complete(List<PartETag> partETags) throws IOException {
+      try {
+        LOG.debug("Completing multi-part upload for key '{}', id '{}'",
+            key, uploadId);
+        client.completeMultipartUpload(
+            new CompleteMultipartUploadRequest(bucket,
+                key,
+                uploadId,
+                partETags));
+      } catch (AmazonClientException e) {
+        throw translateException("Completing multi-part upload", key, e);
-      final CompleteMultipartUploadRequest completeRequest =
-          new CompleteMultipartUploadRequest(bucket, key, uploadId, partETags);
-      client.completeMultipartUpload(completeRequest);
-

MOV26 UPD40 MOV8 INS29 MOV21 INS25 INS65 INS65 MOV21 MOV8 UPD83 UPD83 UPD83 MOV43 MOV27 MOV8 MOV8 INS66 INS66 INS66 INS66 INS42 INS66 MOV21 MOV21 INS54 MOV21 MOV60 MOV21 MOV21 MOV60 INS61 MOV21 MOV21 INS21 MOV21 MOV8 INS12 MOV27 MOV8 INS32 MOV32 INS21 INS44 INS8 MOV21 MOV21 INS42 MOV42 MOV42 MOV42 MOV27 MOV42 MOV42 INS32 INS32 MOV41 INS32 INS43 INS42 INS53 UPD43 MOV43 UPD43 MOV43 INS42 INS45 INS42 INS42 INS42 INS45 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 MOV14 UPD42 MOV42 INS32 INS42 UPD42 MOV42 INS42 INS27 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS42 MOV8 UPD45 MOV45 MOV42 UPD45 MOV45 INS42 MOV41 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL42 DEL32 DEL25 DEL42 DEL32 DEL8 DEL25 DEL61 DEL25 DEL8 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL45 DEL45 DEL42 DEL27 DEL42 DEL14 DEL42 DEL42 DEL32 DEL8 DEL25 DEL42 DEL43 DEL45 DEL32 DEL14 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL27 DEL42 DEL27 DEL42 DEL14 DEL42 DEL42 DEL32 DEL25 DEL83 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21