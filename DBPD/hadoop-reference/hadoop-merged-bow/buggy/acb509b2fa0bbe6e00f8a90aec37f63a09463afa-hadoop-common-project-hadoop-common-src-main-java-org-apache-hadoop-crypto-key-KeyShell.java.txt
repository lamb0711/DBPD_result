HADOOP-12942. hadoop credential commands non-obviously use password of "none" (Mike Yoder via lmccay)
+import com.google.common.annotations.VisibleForTesting;
+  @VisibleForTesting public static final String NO_VALID_PROVIDERS =
+      "There are no valid (non-transient) providers configured.\n" +
+      "No action has been taken. Use the -provider option to specify\n" +
+      "a provider. If you want to use a transient provider then you\n" +
+      "MUST use the -provider argument.";
-  /** allows stdout to be captured if necessary */
-  public PrintStream out = System.out;
-  /** allows stderr to be captured if necessary */
-  public PrintStream err = System.err;
+  /** If true, fail if the provider requires a password and none is given. */
+  private boolean strict = false;
+
+  /** allows stdout to be captured if necessary. */
+  @VisibleForTesting public PrintStream out = System.out;
+  /** allows stderr to be captured if necessary. */
+  @VisibleForTesting public PrintStream err = System.err;
-          command.execute();
+        command.execute();
-   * Parse the command line arguments and initialize the data
+   * Parse the command line arguments and initialize the data.
+      } else if (args[i].equals("-strict")) {
+        strict = true;
-      		"======");
+          "======");
-      KeyProvider provider = null;
+      KeyProvider prov = null;
-          provider = providers.get(0);
+          prov = providers.get(0);
-              provider = p;
+              prov = p;
-      return provider;
+      if (prov == null) {
+        out.println(NO_VALID_PROVIDERS);
+      }
+      return prov;
-        out.println(provider + " has been updated.");
+      out.println(provider + " has been updated.");
-        "list [-provider <provider>] [-metadata] [-help]";
+        "list [-provider <provider>] [-strict] [-metadata] [-help]";
-        "the metadata.";
+        "the metadata. If -strict is supplied, fail immediately if\n" +
+        "the provider requires a password and none is given.";
-        out.println("There are no non-transient KeyProviders configured.\n"
-          + "Use the -provider option to specify a provider. If you\n"
-          + "want to list a transient provider then you must use the\n"
-          + "-provider argument.");
-    public static final String USAGE = "roll <keyname> [-provider <provider>] [-help]";
+    public static final String USAGE =
+        "roll <keyname> [-provider <provider>] [-strict] [-help]";
-      "The roll subcommand creates a new version for the specified key\n" +
-      "within the provider indicated using the -provider argument\n";
+        "The roll subcommand creates a new version for the specified key\n" +
+        "within the provider indicated using the -provider argument.\n" +
+        "If -strict is supplied, fail immediately if the provider requires\n" +
+        "a password and none is given.";
-    String keyName = null;
+    private String keyName = null;
-        out.println("There are no valid KeyProviders configured. The key\n" +
-          "has not been rolled. Use the -provider option to specify\n" +
-          "a provider.");
-          "See the usage description by using -help.");
+            "See the usage description by using -help.");
-        "delete <keyname> [-provider <provider>] [-f] [-help]";
+        "delete <keyname> [-provider <provider>] [-strict] [-f] [-help]";
-        "user confirmation unless -f is specified.";
+        "user confirmation unless -f is specified. If -strict is\n" +
+        "supplied, fail immediately if the provider requires a\n" +
+        "password and none is given.";
-    String keyName = null;
-    boolean cont = true;
+    private String keyName = null;
+    private boolean cont = true;
-        out.println("There are no valid KeyProviders configured. Nothing\n"
-          + "was deleted. Use the -provider option to specify a provider.");
-      "create <keyname> [-cipher <cipher>] [-size <size>]\n" +
-      "                     [-description <description>]\n" +
-      "                     [-attr <attribute=value>]\n" +
-      "                     [-provider <provider>] [-help]";
+        "create <keyname> [-cipher <cipher>] [-size <size>]\n" +
+        "                     [-description <description>]\n" +
+        "                     [-attr <attribute=value>]\n" +
+        "                     [-provider <provider>] [-strict]\n" +
+        "                     [-help]";
-      "The create subcommand creates a new key for the name specified\n" +
-      "by the <keyname> argument within the provider specified by the\n" +
-      "-provider argument. You may specify a cipher with the -cipher\n" +
-      "argument. The default cipher is currently \"AES/CTR/NoPadding\".\n" +
-      "The default keysize is 128. You may specify the requested key\n" +
-      "length using the -size argument. Arbitrary attribute=value\n" +
-      "style attributes may be specified using the -attr argument.\n" +
-      "-attr may be specified multiple times, once per attribute.\n";
+        "The create subcommand creates a new key for the name specified\n" +
+        "by the <keyname> argument within the provider specified by the\n" +
+        "-provider argument. You may specify a cipher with the -cipher\n" +
+        "argument. The default cipher is currently \"AES/CTR/NoPadding\".\n" +
+        "The default keysize is 128. You may specify the requested key\n" +
+        "length using the -size argument. Arbitrary attribute=value\n" +
+        "style attributes may be specified using the -attr argument.\n" +
+        "-attr may be specified multiple times, once per attribute.\n";
-    final String keyName;
-    final Options options;
+    private final String keyName;
+    private final Options options;
-      provider = getKeyProvider();
-      if (provider == null) {
-        out.println("There are no valid KeyProviders configured. No key\n" +
-          " was created. You can use the -provider option to specify\n" +
-          " a provider to use.");
-        rc = false;
+      try {
+        provider = getKeyProvider();
+        if (provider == null) {
+          rc = false;
+        } else if (provider.needsPassword()) {
+          if (strict) {
+            out.println(provider.noPasswordError());
+            rc = false;
+          } else {
+            out.println(provider.noPasswordWarning());
+          }
+        }
+      } catch (IOException e) {
+        e.printStackTrace(err);
-          " with -help.");
+            " with -help.");

INS26 INS40 INS23 INS23 INS78 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS78 INS78 INS42 INS42 INS42 INS27 INS65 INS42 INS9 INS42 INS42 MOV43 MOV43 MOV43 MOV43 INS83 MOV43 MOV43 INS83 INS83 INS83 INS83 INS45 INS45 INS45 INS45 INS66 UPD66 UPD66 UPD66 INS25 UPD45 UPD45 UPD45 INS54 INS27 INS8 UPD42 UPD45 INS45 UPD45 INS45 INS45 UPD45 INS45 INS45 UPD45 INS45 INS8 INS12 UPD42 INS42 INS33 INS21 MOV21 INS25 INS44 INS8 INS32 MOV27 INS8 INS25 INS43 INS42 INS21 INS42 INS42 INS42 INS21 INS32 INS8 INS42 INS32 INS7 INS42 INS42 MOV25 INS42 INS42 INS42 UPD42 INS42 INS9 INS42 INS8 INS21 INS32 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS25 INS32 INS8 MOV25 INS2 INS42 INS45 INS21 INS42 INS42 INS7 INS42 INS9 DEL42 DEL42 DEL45 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL45 DEL27 DEL32 DEL21 DEL42 DEL42 DEL45 DEL45 DEL27 DEL32 DEL21 DEL45 DEL45 DEL45 DEL27