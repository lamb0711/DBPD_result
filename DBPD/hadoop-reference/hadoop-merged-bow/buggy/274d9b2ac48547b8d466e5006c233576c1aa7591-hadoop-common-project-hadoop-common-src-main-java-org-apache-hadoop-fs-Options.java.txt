HADOOP-10426. Declare CreateOpts.getOpt(..) with generic type argument, removes unused FileContext.getFileStatus(..) and fixes various javac warnings.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581437 13f79535-47bb-0310-9956-ffa450edef68

-     * @param theClass is the desired class of the opt
+     * @param clazz is the desired class of the opt
-    protected static CreateOpts getOpt(Class<? extends CreateOpts> theClass,  CreateOpts ...opts) {
+    static <T extends CreateOpts> T getOpt(Class<T> clazz, CreateOpts... opts) {
-      CreateOpts result = null;
+      T result = null;
-        if (opts[i].getClass() == theClass) {
-          if (result != null) 
-            throw new IllegalArgumentException("multiple blocksize varargs");
-          result = opts[i];
+        if (opts[i].getClass() == clazz) {
+          if (result != null) {
+            throw new IllegalArgumentException("multiple opts varargs: " + clazz);
+          }
+
+          @SuppressWarnings("unchecked")
+          T t = (T)opts[i];
+          result = t;
-    protected static <T extends CreateOpts> CreateOpts[] setOpt(T newValue,
-        CreateOpts ...opts) {
+    static <T extends CreateOpts> CreateOpts[] setOpt(final T newValue,
+        final CreateOpts... opts) {
+      final Class<?> clazz = newValue.getClass();
-          if (opts[i].getClass() == newValue.getClass()) {
-            if (alreadyInOpts) 
-              throw new IllegalArgumentException("multiple opts varargs");
+          if (opts[i].getClass() == clazz) {
+            if (alreadyInOpts) {
+              throw new IllegalArgumentException("multiple opts varargs: " + clazz);
+            }
-        CreateOpts[] newOpts = new CreateOpts[opts.length + 1];
-        System.arraycopy(opts, 0, newOpts, 0, opts.length);
-        newOpts[opts.length] = newValue;
+        final int oldLength = opts == null? 0: opts.length;
+        CreateOpts[] newOpts = new CreateOpts[oldLength + 1];
+        if (oldLength > 0) {
+          System.arraycopy(opts, 0, newOpts, 0, oldLength);
+        }
+        newOpts[oldLength] = newValue;
-      // The following is done to avoid unnecessary creation of new objects.
-      // tri-state variable: 0 default, 1 userBytesPerChecksum, 2 userOpt
-      short whichSize;
-      // true default, false userOpt
-      boolean useDefaultType;
-      
+      final boolean useDefaultType;
+      final DataChecksum.Type type;
+      if (userOpt != null 
+          && userOpt.getChecksumType() != DataChecksum.Type.DEFAULT) {
+        useDefaultType = false;
+        type = userOpt.getChecksumType();
+      } else {
+        useDefaultType = true;
+        type = defaultOpt.getChecksumType();
+      }
+
-        whichSize = 1; // userBytesPerChecksum
-      } else if (userOpt != null && userOpt.getBytesPerChecksum() > 0) {
-        whichSize = 2; // userOpt
-      } else {
-        whichSize = 0; // default
-      }
-
-      // checksum type - order of preference
-      //   user specified value in checksumOpt
-      //   default.
-      if (userOpt != null &&
-            userOpt.getChecksumType() != DataChecksum.Type.DEFAULT) {
-        useDefaultType = false;
-      } else {
-        useDefaultType = true;
-      }
-
-      // Short out the common and easy cases
-      if (whichSize == 0 && useDefaultType) {
-        return defaultOpt;
-      } else if (whichSize == 2 && !useDefaultType) {
-        return userOpt;
-      }
-
-      // Take care of the rest of combinations
-      DataChecksum.Type type = useDefaultType ? defaultOpt.getChecksumType() :
-          userOpt.getChecksumType();
-      if (whichSize == 0) {
-        return new ChecksumOpt(type, defaultOpt.getBytesPerChecksum());
-      } else if (whichSize == 1) {
+      } else if (userOpt != null && userOpt.getBytesPerChecksum() > 0) {
+        return !useDefaultType? userOpt
+            : new ChecksumOpt(type, userOpt.getBytesPerChecksum());
-        return new ChecksumOpt(type, userOpt.getBytesPerChecksum());
+        return useDefaultType? defaultOpt
+            : new ChecksumOpt(type, defaultOpt.getBytesPerChecksum());

INS73 INS43 MOV25 INS42 INS43 INS42 UPD74 UPD42 INS83 INS83 MOV43 INS60 MOV25 UPD42 INS42 INS43 UPD43 INS83 INS74 INS59 INS83 INS83 MOV27 INS25 UPD42 MOV42 UPD42 INS43 INS76 INS42 MOV32 INS60 INS25 INS21 INS21 MOV27 MOV8 MOV8 INS42 INS83 INS39 INS59 MOV5 INS27 INS8 INS7 INS7 UPD42 INS60 INS42 INS16 INS42 INS34 MOV21 INS42 MOV32 INS42 MOV32 INS16 INS16 INS8 INS79 INS43 INS59 INS27 INS34 INS40 MOV5 INS42 MOV38 INS42 MOV14 INS42 INS42 MOV14 MOV53 INS42 INS45 INS42 INS42 INS11 INS42 INS42 INS42 INS33 INS42 INS42 INS43 MOV2 INS8 INS27 INS42 MOV53 INS45 INS42 INS27 INS45 INS42 DEL83 DEL43 DEL76 DEL45 DEL83 DEL42 DEL43 DEL45 DEL40 DEL40 DEL40 DEL39 DEL42 DEL59 DEL60 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL34 DEL27 DEL42 DEL27 DEL42 DEL41 DEL8 DEL42 DEL34 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL25 DEL42 DEL16 DEL42 DEL34 DEL27 DEL42 DEL34 DEL27 DEL25