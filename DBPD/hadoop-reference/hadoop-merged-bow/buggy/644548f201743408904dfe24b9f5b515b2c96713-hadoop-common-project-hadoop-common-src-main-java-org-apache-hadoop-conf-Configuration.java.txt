HADOOP-11506. Configuration variable expansion regex expensive for long values. (Gera Shegalov via gera)

-  
+
-  
-  private static final Pattern VAR_PATTERN =
-      Pattern.compile("\\$\\{[^\\}\\$\u0020]+\\}");
+  private static final int SUB_START_IDX = 0;
+  private static final int SUB_END_IDX = SUB_START_IDX + 1;
+
+  /**
+   * This is a manual implementation of the following regex
+   * "\\$\\{[^\\}\\$\u0020]+\\}". It can be 15x more efficient than
+   * a regex matcher as demonstrated by HADOOP-11506. This is noticeable with
+   * Hadoop apps building on the assumption Configuration#get is an O(1)
+   * hash table lookup, especially when the eval is a long string.
+   *
+   * @param eval a string that may contain variables requiring expansion.
+   * @return a 2-element int array res such that
+   * eval.substring(res[0], res[1]) is "var" for the left-most occurrence of
+   * ${var} in eval. If no variable is found -1, -1 is returned.
+   */
+  private static int[] findSubVariable(String eval) {
+    int[] result = {-1, -1};
+
+    int matchStart;
+    int leftBrace;
+
+    // scanning for a brace first because it's less frequent than $
+    // that can occur in nested class names
+    //
+    match_loop:
+    for (matchStart = 1, leftBrace = eval.indexOf('{', matchStart);
+         // minimum left brace position (follows '$')
+         leftBrace > 0
+         // right brace of a smallest valid expression "${c}"
+         && leftBrace + "{c".length() < eval.length();
+         leftBrace = eval.indexOf('{', matchStart)) {
+      int matchedLen = 0;
+      if (eval.charAt(leftBrace - 1) == '$') {
+        int subStart = leftBrace + 1; // after '{'
+        for (int i = subStart; i < eval.length(); i++) {
+          switch (eval.charAt(i)) {
+            case '}':
+              if (matchedLen > 0) { // match
+                result[SUB_START_IDX] = subStart;
+                result[SUB_END_IDX] = subStart + matchedLen;
+                break match_loop;
+              }
+              // fall through to skip 1 char
+            case ' ':
+            case '$':
+              matchStart = i + 1;
+              continue match_loop;
+            default:
+              matchedLen++;
+          }
+        }
+        // scanned from "${"  to the end of eval, and no reset via ' ', '$':
+        //    no match!
+        break match_loop;
+      } else {
+        // not a start of a variable
+        //
+        matchStart = leftBrace + 1;
+      }
+    }
+    return result;
+  }
+
+  /**
+   * Attempts to repeatedly expand the value {@code expr} by replacing the
+   * left-most substring of the form "${var}" in the following precedence order
+   * <ol>
+   *   <li>by the value of the Java system property "var" if defined</li>
+   *   <li>by the value of the configuration key "var" if defined</li>
+   * </ol>
+   *
+   * If var is unbounded the current state of expansion "prefix${var}suffix" is
+   * returned.
+   *
+   * If a cycle is detected: replacing var1 requires replacing var2 ... requires
+   * replacing var1, i.e., the cycle is shorter than
+   * {@link Configuration#MAX_SUBST} then the original expr is returned.
+   *
+   * @param expr the literal value of a config key
+   * @return null if expr is null, otherwise the value resulting from expanding
+   * expr using the algorithm above.
+   * @throws IllegalArgumentException when more than
+   * {@link Configuration#MAX_SUBST} replacements are required
+   */
-    Matcher match = VAR_PATTERN.matcher("");
-    Set<String> evalSet = new HashSet<String>();
-    for(int s=0; s<MAX_SUBST; s++) {
-      if (evalSet.contains(eval)) {
-        // Cyclic resolution pattern detected. Return current expression.
+    Set<String> evalSet = null;
+    for(int s = 0; s < MAX_SUBST; s++) {
+      final int[] varBounds = findSubVariable(eval);
+      if (varBounds[SUB_START_IDX] == -1) {
-      evalSet.add(eval);
-      match.reset(eval);
-      if (!match.find()) {
-        return eval;
-      }
-      String var = match.group();
-      var = var.substring(2, var.length()-1); // remove ${ .. }
+      final String var = eval.substring(varBounds[SUB_START_IDX],
+          varBounds[SUB_END_IDX]);
+
+      // prevent recursive resolution
+      //
+      final int dollar = varBounds[SUB_START_IDX] - "${".length();
+      final int afterRightBrace = varBounds[SUB_END_IDX] + "}".length();
+      final String refVar = eval.substring(dollar, afterRightBrace);
+      if (evalSet == null) {
+        evalSet = new HashSet<String>();
+      }
+      if (!evalSet.add(refVar)) {
+        return expr; // return original expression if there is a loop
+      }
+
-      eval = eval.substring(0, match.start())+val+eval.substring(match.end());
+      eval = eval.substring(0, dollar)
+             + val
+             + eval.substring(afterRightBrace);

INS23 INS23 INS31 MOV83 MOV83 MOV83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS42 INS34 UPD42 MOV42 INS27 INS65 INS65 INS65 INS39 INS85 MOV43 INS42 INS60 INS60 INS60 INS30 INS41 INS65 INS65 INS65 INS65 INS24 INS42 INS34 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS5 INS59 INS39 INS59 INS39 INS59 INS42 INS24 INS42 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS65 INS66 MOV58 MOV27 MOV37 INS8 INS39 INS85 INS42 INS4 INS42 INS42 INS7 INS7 INS27 INS7 INS8 INS66 INS67 INS67 INS33 MOV60 INS25 INS60 MOV60 MOV54 MOV25 MOV25 INS60 MOV60 INS60 INS25 INS25 MOV21 INS38 INS38 INS42 INS34 INS42 INS32 INS27 INS27 INS42 INS32 INS60 INS25 INS42 INS42 INS42 INS42 INS83 INS5 INS27 MOV8 INS83 INS43 INS59 INS83 INS39 INS59 INS83 INS39 INS83 INS43 INS59 INS27 INS8 INS38 INS8 INS34 INS34 INS42 INS42 INS13 INS42 INS42 INS34 INS27 INS32 INS42 INS42 INS13 INS42 INS39 INS59 INS27 INS8 INS8 INS39 INS85 UPD42 INS2 INS38 INS42 INS42 INS32 INS42 INS27 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS21 INS32 INS41 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS13 INS60 INS24 INS10 INS21 UPD42 UPD42 INS42 INS42 INS34 UPD42 MOV42 UPD42 MOV42 INS2 INS2 INS2 INS32 INS2 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS42 INS42 INS42 INS42 UPD45 MOV45 INS42 INS42 INS42 INS27 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS42 INS45 UPD42 MOV42 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS42 INS27 INS39 INS59 INS42 INS32 INS42 INS50 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS49 INS25 INS49 INS49 INS21 INS18 INS49 INS21 INS42 INS34 INS42 INS42 INS42 INS13 INS27 INS8 INS13 INS13 INS7 INS42 INS37 INS42 INS34 INS21 INS21 INS10 INS42 INS27 INS42 INS7 INS7 INS42 INS42 INS34 INS2 INS42 INS2 INS27 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL23 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL41 DEL8 DEL25 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL38 DEL25 DEL42 DEL34 DEL32 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL24