HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcRequestHeaderProto;
+import org.apache.hadoop.ipc.protobuf.RpcHeaderProtos.RpcResponseHeaderProto;
-import com.google.protobuf.AbstractMessageLite;
+import com.google.protobuf.GeneratedMessage;
-  private static class RpcRequestWrapper implements RpcWrapper {
-    RequestHeaderProto requestHeader;
+  private static abstract class RpcMessageWithHeader<T extends GeneratedMessage>
+    implements RpcWrapper {
+    T requestHeader;
-    @SuppressWarnings("unused")
-    public RpcRequestWrapper() {
+    public RpcMessageWithHeader() {
-    RpcRequestWrapper(RequestHeaderProto requestHeader, Message theRequest) {
+    public RpcMessageWithHeader(T requestHeader, Message theRequest) {
-      int length = ProtoUtil.readRawVarint32(in);
-      byte[] bytes = new byte[length];
-      in.readFully(bytes);
-      requestHeader = RequestHeaderProto.parseFrom(bytes);
-      length = ProtoUtil.readRawVarint32(in);
-      theRequestRead = new byte[length];
-      in.readFully(theRequestRead);
-    }
-    
-    @Override
-    public String toString() {
-      return requestHeader.getDeclaringClassProtocolName() + "." +
-          requestHeader.getMethodName();
+      requestHeader = parseHeaderFrom(readVarintBytes(in));
+      theRequestRead = readMessageRequest(in);
+    abstract T parseHeaderFrom(byte[] bytes) throws IOException;
+
+    byte[] readMessageRequest(DataInput in) throws IOException {
+      return readVarintBytes(in);
+    }
+
+    private static byte[] readVarintBytes(DataInput in) throws IOException {
+      final int length = ProtoUtil.readRawVarint32(in);
+      final byte[] bytes = new byte[length];
+      in.readFully(bytes);
+      return bytes;
+    }
+
+    public T getMessageHeader() {
+      return requestHeader;
+    }
+
+    public byte[] getMessageBytes() {
+      return theRequestRead;
+    }
+    
-            "getLenght on uninilialized RpcWrapper");      
+            "getLength on uninitialized RpcWrapper");      
+  
+  private static class RpcRequestWrapper
+  extends RpcMessageWithHeader<RequestHeaderProto> {
+    @SuppressWarnings("unused")
+    public RpcRequestWrapper() {}
+    
+    public RpcRequestWrapper(
+        RequestHeaderProto requestHeader, Message theRequest) {
+      super(requestHeader, theRequest);
+    }
+    
+    @Override
+    RequestHeaderProto parseHeaderFrom(byte[] bytes) throws IOException {
+      return RequestHeaderProto.parseFrom(bytes);
+    }
+    
+    @Override
+    public String toString() {
+      return requestHeader.getDeclaringClassProtocolName() + "." +
+          requestHeader.getMethodName();
+    }
+  }
+
+  @InterfaceAudience.LimitedPrivate({"RPC"})
+  public static class RpcRequestMessageWrapper
+  extends RpcMessageWithHeader<RpcRequestHeaderProto> {
+    public RpcRequestMessageWrapper() {}
+    
+    public RpcRequestMessageWrapper(
+        RpcRequestHeaderProto requestHeader, Message theRequest) {
+      super(requestHeader, theRequest);
+    }
+    
+    @Override
+    RpcRequestHeaderProto parseHeaderFrom(byte[] bytes) throws IOException {
+      return RpcRequestHeaderProto.parseFrom(bytes);
+    }
+  }
+
+  @InterfaceAudience.LimitedPrivate({"RPC"})
+  public static class RpcResponseMessageWrapper
+  extends RpcMessageWithHeader<RpcResponseHeaderProto> {
+    public RpcResponseMessageWrapper() {}
+    
+    public RpcResponseMessageWrapper(
+        RpcResponseHeaderProto responseHeader, Message theRequest) {
+      super(responseHeader, theRequest);
+    }
+    
+    @Override
+    byte[] readMessageRequest(DataInput in) throws IOException {
+      // error message contain no message body
+      switch (requestHeader.getStatus()) {
+        case ERROR:
+        case FATAL:
+          return null;
+        default:
+          return super.readMessageRequest(in);
+      }
+    }
+    
+    @Override
+    RpcResponseHeaderProto parseHeaderFrom(byte[] bytes) throws IOException {
+      return RpcResponseHeaderProto.parseFrom(bytes);
+    }
+  }
-  private static class RpcResponseWrapper implements RpcWrapper {
+  @InterfaceAudience.LimitedPrivate({"RPC"}) // temporarily exposed 
+  public static class RpcResponseWrapper implements RpcWrapper {
-    @SuppressWarnings("unused")
-            "getLenght on uninilialized RpcWrapper");      
+            "getLength on uninitialized RpcWrapper");      

MOV26 INS26 INS26 INS40 INS40 UPD40 INS55 INS55 INS55 INS83 INS42 INS73 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS42 INS74 MOV31 INS31 INS31 MOV31 INS79 INS83 INS83 INS42 INS74 INS31 INS31 INS31 INS79 INS83 INS83 INS42 INS74 INS31 INS31 INS31 INS31 INS79 UPD83 INS42 INS43 INS43 INS83 INS42 INS8 INS83 INS42 INS44 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 MOV5 INS42 INS44 INS43 INS8 INS83 UPD83 INS5 UPD42 INS83 INS43 INS42 INS8 INS83 INS5 INS42 INS8 INS43 INS43 INS83 INS42 MOV44 INS44 INS8 MOV78 MOV43 INS42 INS44 INS43 INS8 INS40 INS4 INS43 INS43 INS83 INS42 INS8 INS83 INS42 INS44 INS44 INS8 INS78 INS43 INS42 INS44 INS43 INS8 INS40 INS4 INS43 INS43 INS83 INS42 INS8 INS83 INS42 INS44 INS44 INS8 INS78 INS5 INS42 INS44 INS43 INS8 INS78 INS43 INS42 INS44 INS43 INS8 INS40 INS4 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS5 INS42 INS42 INS43 INS42 INS42 INS41 INS39 INS85 INS41 INS42 INS41 INS39 INS85 INS41 INS42 INS42 INS43 INS42 INS46 INS5 INS42 INS42 INS41 INS45 INS42 INS42 INS43 INS42 INS43 INS42 INS46 INS42 INS42 INS5 INS42 INS42 INS41 INS45 INS42 INS42 INS43 INS42 INS43 INS42 INS46 INS42 INS39 INS85 INS43 INS42 INS42 INS50 INS42 INS42 INS5 INS42 INS42 INS41 INS45 INS42 INS42 INS7 INS7 INS39 INS85 INS42 INS32 INS83 INS83 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 MOV32 INS42 INS42 INS42 INS42 INS39 INS85 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS49 INS49 INS41 INS49 INS41 INS39 INS85 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS48 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 UPD45 DEL42 DEL42 DEL39 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL3 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL45 DEL79