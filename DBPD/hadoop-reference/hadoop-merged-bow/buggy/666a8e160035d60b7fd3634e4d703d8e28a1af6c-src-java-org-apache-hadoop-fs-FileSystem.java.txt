HADOOP-6890. Part 2: Incoport the change made in FileContext into FileSystem. Contributed by Hairong Kuang.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@981676 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.LinkedList;
+   * List the statuses of the files/directories in the given path if the path is
+   * a directory. 
+   * Return the file's status and block locations If the path is a file.
+   * 
+   * If a returned status is a file, it contains the file's block locations.
+   * 
+   * @param f is the path
+   * @param filter path filter
+   *
+   * @return an iterator that traverses statuses of the files/directories 
+   *         in the given path
+   * If any IO exception (for example the input directory gets deleted while
+   * listing is being executed), next() or hasNext() of the returned iterator
+   * may throw a RuntimeException with the IO exception as the cause.
+   *
+   * @throws FileNotFoundException If <code>f</code> does not exist
+   * @throws IOException If an I/O error occurred
+   */
+  public Iterator<LocatedFileStatus> listLocatedStatus(final Path f)
+  throws FileNotFoundException, IOException {
+    return listLocatedStatus(f, DEFAULT_FILTER);
+  }
+
+  /**
+   * Listing a directory
+   * The returned results include its block location if it is a file
+   * The results are filtered by the given path filter
+   * @param f a path
+   * @param filter a path filter
+   * @return an iterator that traverses statuses of the files/directories 
+   *         in the given path
+   * @throws FileNotFoundException if <code>f</code> does not exist
+   * @throws IOException if any I/O error occurred
+   */
+  protected Iterator<LocatedFileStatus> listLocatedStatus(final Path f,
+      final PathFilter filter)
+  throws FileNotFoundException, IOException {
+    return new Iterator<LocatedFileStatus>() {
+      private final FileStatus[] stats = listStatus(f, filter);
+      private int i = 0;
+
+      /**
+       *  {@inheritDoc}
+       *  @return {@inheritDog} 
+       *  @throws Runtimeexception if any IOException occurs during traversal;
+       *  the IOException is set as the cause of the RuntimeException
+       */
+      @Override
+      public boolean hasNext() {
+        return i<stats.length;
+      }
+
+      /**
+       *  {@inheritDoc}
+       *  @return {@inheritDoc} 
+       *  @throws Runtimeexception if any IOException occurs during traversal;
+       *  the IOException is set as the cause of the RuntimeException
+       *  @exception {@inheritDoc}
+       */
+      @Override
+      public LocatedFileStatus next() {
+        if (!hasNext()) {
+          throw new NoSuchElementException("No more entry in " + f);
+        }
+        FileStatus result = stats[i++];
+        try {
+          BlockLocation[] locs = result.isFile() ?
+            getFileBlockLocations(result.getPath(), 0, result.getLen()) :
+            null;
+          return new LocatedFileStatus(result, locs);
+        } catch (IOException ioe) {
+          throw (RuntimeException)new RuntimeException().initCause(ioe);
+        }
+      }
+      
+      @Override
+      public void remove() {
+        throw new UnsupportedOperationException("Remove is not supported");
+      }
+    };
+  }
+
+  /**
-   * Files across symbolic links are also returned.
-      private LinkedList<FileStatus> fileStats = new LinkedList<FileStatus>();
-      private Stack<FileStatus> dirStats = new Stack<FileStatus>();
-      
-      { // initializer
-        list(f);
-      }
-      
+      private Stack<Iterator<LocatedFileStatus>> itors = 
+        new Stack<Iterator<LocatedFileStatus>>();
+      Iterator<LocatedFileStatus> curItor = listLocatedStatus(f);
+      LocatedFileStatus curFile;
+     
-        if (fileStats.isEmpty()) {
-          listDir();
+        while (curFile == null) {
+          if (curItor.hasNext()) {
+            handleFileStat(curItor.next());
+          } else if (!itors.empty()) {
+            curItor = itors.pop();
+          } else {
+            return false;
+          }
-        return !fileStats.isEmpty();
-      }
-      
-      /**
-       * list at least one directory until file list is not empty
-       */
-      private void listDir() {
-        while (fileStats.isEmpty() && !dirStats.isEmpty()) {
-          FileStatus dir = dirStats.pop();
-          list(dir.getPath());
-        }
+        return true;
-       * List the given path
-       * 
-       * @param dirPath a path
+       * Process the input stat.
+       * If it is a file, return the file stat.
+       * If it is a directory, tranverse the directory if recursive is true;
+       * ignore it if recursive is false.
+       * @param stat input status
+       * @throws RuntimeException if any io error occurs; the io exception
+       * is set as the cause of RuntimeException
-      private void list(Path dirPath) {
+      private void handleFileStat(LocatedFileStatus stat) {
-          FileStatus[] stats = listStatus(dirPath);
-          for (FileStatus stat : stats) {
-            if (stat.isFile()) {
-              fileStats.add(stat);
-            } else if (recursive) { // directory & recursive
-              dirStats.push(stat);
-            }
+          if (stat.isFile()) { // file
+            curFile = stat;
+          } else if (recursive) { // directory
+            itors.push(curItor);
+            curItor = listLocatedStatus(stat.getPath());
-          throw (RuntimeException) new RuntimeException().initCause(ioe);
-        }        
+          throw (RuntimeException)new RuntimeException().initCause(ioe);
+        }
-      
+
-        if (!hasNext()) {
-          throw new NoSuchElementException();
-        }
-        FileStatus status = fileStats.remove();
-        try {
-          BlockLocation[] locs = getFileBlockLocations(
-              status, 0, status.getLen());
-          return new LocatedFileStatus(status, locs);
-        } catch (IOException ioe) {
-          throw (RuntimeException) new RuntimeException().initCause(ioe);
-        }
+        if (hasNext()) {
+          LocatedFileStatus result = curFile;
+          curFile = null;
+          return result;
+        } 
+        throw new java.util.NoSuchElementException("No more entry in " + f);
-      
+

INS31 INS31 INS29 INS83 INS74 INS42 INS44 INS43 INS43 INS8 INS29 UPD83 INS74 UPD42 INS44 INS44 INS43 INS43 MOV29 INS83 MOV74 INS42 MOV44 MOV44 MOV43 MOV43 INS8 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS42 INS42 INS41 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS74 INS1 INS23 INS23 INS43 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 MOV83 UPD83 MOV83 MOV5 INS59 INS83 INS39 INS59 INS42 INS42 INS83 INS74 INS59 INS74 INS59 MOV43 INS59 INS29 INS78 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 UPD42 MOV42 INS32 UPD42 MOV42 INS34 MOV43 INS74 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS65 INS65 INS65 INS42 INS61 INS41 INS65 INS65 INS65 INS43 INS42 INS54 INS65 INS65 INS65 INS65 INS42 INS42 INS25 INS53 INS42 INS53 INS42 MOV42 UPD42 MOV42 INS27 MOV43 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS65 INS66 INS65 INS66 INS42 INS66 INS66 INS27 INS8 INS9 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS8 MOV12 INS65 INS66 INS65 INS66 INS42 INS66 INS66 INS66 INS32 INS8 INS14 INS14 INS42 INS40 UPD42 INS2 INS42 INS42 MOV43 INS74 INS42 INS33 INS25 INS25 INS42 INS60 INS21 INS41 INS43 INS27 INS43 INS45 INS42 INS37 INS43 INS43 INS32 INS8 INS25 MOV32 INS8 INS25 INS43 INS59 INS7 INS42 INS40 INS45 INS42 INS42 INS27 INS42 INS16 INS43 INS42 INS42 INS42 INS42 INS42 INS21 INS38 INS8 INS8 INS21 INS42 INS8 INS42 INS42 INS42 INS42 INS33 INS45 INS42 INS32 INS32 INS33 INS42 INS32 INS32 INS21 INS41 INS7 INS21 INS21 INS42 INS42 MOV42 INS32 MOV34 MOV32 INS42 INS32 INS42 INS42 INS7 INS9 INS42 INS42 INS32 INS7 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL32 DEL21 DEL8 DEL28 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL38 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL70 DEL8 DEL54 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL42 DEL66