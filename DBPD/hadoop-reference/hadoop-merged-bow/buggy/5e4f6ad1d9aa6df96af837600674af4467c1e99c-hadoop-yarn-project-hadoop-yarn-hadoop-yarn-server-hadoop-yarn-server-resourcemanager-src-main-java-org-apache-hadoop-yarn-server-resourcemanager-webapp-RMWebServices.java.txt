YARN-791. Changed RM APIs and web-services related to nodes to ensure that both are consistent with each other. Contributed by Sandy Ryza.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1500994 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.EnumSet;
+import org.apache.hadoop.yarn.server.resourcemanager.RMServerUtils;
-   * If no params are given, returns all active nodes, which includes
-   * nodes in the NEW and RUNNING states. If state param is "all", returns all
-   * nodes in all states. Otherwise, if the state param is set to a state name,
-   * returns all nodes that are in that state.
+   * Returns all nodes in the cluster. If the states param is given, returns
+   * all nodes that are in the comma-separated list of states.
-  public NodesInfo getNodes(@QueryParam("state") String state) {
+  public NodesInfo getNodes(@QueryParam("states") String states) {
-    NodeState acceptedState = null;
-    boolean all = false;
-    
-    if (state != null && !state.isEmpty()) {
-      if (state.equalsIgnoreCase("all")) {
-        all = true;
-      } else {
-        acceptedState = NodeState.valueOf(state.toUpperCase());
+    EnumSet<NodeState> acceptedStates;
+    if (states == null) {
+      acceptedStates = EnumSet.allOf(NodeState.class);
+    } else {
+      acceptedStates = EnumSet.noneOf(NodeState.class);
+      for (String stateStr : states.split(",")) {
+        acceptedStates.add(NodeState.valueOf(stateStr.toUpperCase()));
-    // getRMNodes() contains nodes that are NEW, RUNNING OR UNHEALTHY
-    NodesInfo allNodes = new NodesInfo();
-    for (RMNode ni : this.rm.getRMContext().getRMNodes().values()) {
-      if (all || (acceptedState == null && ni.getState() != NodeState.UNHEALTHY)
-          || acceptedState == ni.getState()) {
-        NodeInfo nodeInfo = new NodeInfo(ni, sched);
-        allNodes.add(nodeInfo);
+    Collection<RMNode> rmNodes = RMServerUtils.queryRMNodes(this.rm.getRMContext(),
+        acceptedStates);
+    NodesInfo nodesInfo = new NodesInfo();
+    for (RMNode rmNode : rmNodes) {
+      NodeInfo nodeInfo = new NodeInfo(rmNode, sched);
+      if (EnumSet.of(NodeState.LOST, NodeState.DECOMMISSIONED, NodeState.REBOOTED)
+          .contains(rmNode.getState())) {
+        nodeInfo.setNodeHTTPAddress(EMPTY);
+      nodesInfo.add(nodeInfo);
-    // getInactiveNodes() contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED
-    if (all || (acceptedState != null &&
-        (acceptedState == NodeState.DECOMMISSIONED ||
-         acceptedState == NodeState.LOST ||
-         acceptedState == NodeState.REBOOTED))) {
-      for (RMNode ni : this.rm.getRMContext().getInactiveRMNodes().values()) {
-        if (all || acceptedState == ni.getState()) {
-          NodeInfo nodeInfo = new NodeInfo(ni, sched);
-          nodeInfo.setNodeHTTPAddress(EMPTY);
-          allNodes.add(nodeInfo);
-        }
-      }
-    }
-    
-    return allNodes;
+    return nodesInfo;

INS26 INS26 INS26 INS40 INS40 INS40 UPD42 INS60 INS70 UPD66 UPD66 UPD45 INS74 INS27 INS8 INS74 INS59 MOV44 INS42 INS8 UPD42 INS43 INS43 UPD42 UPD42 MOV42 MOV33 INS21 INS21 INS70 INS43 MOV43 INS42 MOV32 MOV32 UPD42 UPD42 MOV60 INS25 MOV21 INS42 INS42 INS7 INS7 INS44 INS32 INS8 INS42 INS42 UPD42 INS42 MOV43 INS32 INS8 INS42 INS32 INS42 INS32 INS43 INS42 UPD42 MOV42 UPD42 MOV42 UPD45 MOV45 MOV21 INS32 UPD42 MOV42 INS32 MOV21 UPD42 UPD42 MOV42 UPD42 MOV42 INS57 INS42 INS42 INS57 INS42 INS32 MOV43 UPD42 UPD42 MOV42 UPD42 MOV42 INS40 INS40 INS40 UPD42 MOV42 MOV42 MOV43 INS43 INS42 INS42 INS32 INS42 MOV42 MOV42 MOV32 UPD42 DEL66 DEL66 DEL33 DEL39 DEL42 DEL9 DEL59 DEL60 DEL27 DEL32 DEL38 DEL27 DEL42 DEL32 DEL7 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL40 DEL27 DEL27 DEL36 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL40 DEL27 DEL27 DEL36 DEL27 DEL36 DEL27 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25