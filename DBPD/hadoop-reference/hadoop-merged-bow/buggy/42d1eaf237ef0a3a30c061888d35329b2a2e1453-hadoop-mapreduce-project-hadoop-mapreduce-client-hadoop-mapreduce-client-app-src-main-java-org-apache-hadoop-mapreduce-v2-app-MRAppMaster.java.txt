MAPREDUCE-4729. job history UI not showing all job attempts. Contributed by Vinod Kumar Vavilapalli


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1404817 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import org.apache.commons.io.IOUtils;
+import org.apache.hadoop.fs.FSDataInputStream;
+import org.apache.hadoop.mapreduce.jobhistory.EventReader;
+import org.apache.hadoop.mapreduce.jobhistory.EventType;
+import org.apache.hadoop.mapreduce.jobhistory.HistoryEvent;
+import org.apache.hadoop.util.StringInterner;
+    amInfos = new LinkedList<AMInfo>();
+
+    } else {
+      // Get the amInfos anyways irrespective of whether recovery is enabled or
+      // not IF this is not the first AM generation
+      if (appAttemptID.getAttemptId() != 1) {
+        amInfos.addAll(readJustAMInfos());
+      }
-    // / Create the AMInfo for the current AppMaster
-    if (amInfos == null) {
-      amInfos = new LinkedList<AMInfo>();
-    }
+    // Current an AMInfo for the current AM generation.
+  private List<AMInfo> readJustAMInfos() {
+    List<AMInfo> amInfos = new ArrayList<AMInfo>();
+    FSDataInputStream inputStream = null;
+    try {
+      inputStream =
+          RecoveryService.getPreviousJobHistoryFileStream(getConfig(),
+            appAttemptID);
+      EventReader jobHistoryEventReader = new EventReader(inputStream);
+
+      // All AMInfos are contiguous. Track when the first AMStartedEvent
+      // appears.
+      boolean amStartedEventsBegan = false;
+
+      HistoryEvent event;
+      while ((event = jobHistoryEventReader.getNextEvent()) != null) {
+        if (event.getEventType() == EventType.AM_STARTED) {
+          if (!amStartedEventsBegan) {
+            // First AMStartedEvent.
+            amStartedEventsBegan = true;
+          }
+          AMStartedEvent amStartedEvent = (AMStartedEvent) event;
+          amInfos.add(MRBuilderUtils.newAMInfo(
+            amStartedEvent.getAppAttemptId(), amStartedEvent.getStartTime(),
+            amStartedEvent.getContainerId(),
+            StringInterner.weakIntern(amStartedEvent.getNodeManagerHost()),
+            amStartedEvent.getNodeManagerPort(),
+            amStartedEvent.getNodeManagerHttpPort()));
+        } else if (amStartedEventsBegan) {
+          // This means AMStartedEvents began and this event is a
+          // non-AMStarted event.
+          // No need to continue reading all the other events.
+          break;
+        }
+      }
+    } catch (IOException e) {
+      LOG.warn("Could not parse the old history file. "
+          + "Will not have old AMinfos ", e);
+    } finally {
+      if (inputStream != null) {
+        IOUtils.closeQuietly(inputStream);
+      }
+    }
+    return amInfos;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS83 INS74 INS42 INS8 MOV21 INS43 INS43 INS60 INS60 INS54 INS41 INS8 INS42 INS42 INS74 INS59 INS43 INS59 INS8 INS12 INS8 INS42 INS25 INS43 INS43 INS42 INS14 INS42 INS42 INS33 INS21 INS60 INS60 INS60 INS61 INS44 INS8 INS25 INS27 INS8 INS42 INS42 INS74 INS7 INS43 INS59 INS39 INS59 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS27 INS8 INS32 INS34 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS14 INS42 INS9 INS42 INS42 INS36 INS33 INS25 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS7 INS27 INS8 INS25 INS42 INS42 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS32 INS40 INS25 INS60 INS21 INS42 INS8 INS45 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS8 INS43 INS59 INS32 INS10 INS42 INS21 INS42 INS42 INS11 INS42 INS42 INS32 INS7 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL33 DEL27 DEL8 DEL25