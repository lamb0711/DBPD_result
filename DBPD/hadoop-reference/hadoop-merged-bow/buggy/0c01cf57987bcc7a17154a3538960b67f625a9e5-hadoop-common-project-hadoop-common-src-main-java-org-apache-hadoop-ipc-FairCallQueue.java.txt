HADOOP-14033. Reduce fair call queue lock contention. Contributed by Daryn Sharp.

-import java.util.concurrent.locks.ReentrantLock;
-import java.util.concurrent.locks.Condition;
+import java.util.concurrent.Semaphore;
-  /* Read locks */
-  private final ReentrantLock takeLock = new ReentrantLock();
-  private final Condition notEmpty = takeLock.newCondition();
+  /* Track available permits for scheduled objects.  All methods that will
+   * mutate a subqueue must acquire or release a permit on the semaphore.
+   * A semaphore is much faster than an exclusive lock because producers do
+   * not contend with consumers and consumers do not block other consumers
+   * while polling.
+   */
+  private final Semaphore semaphore = new Semaphore(0);
-    takeLock.lock();
-    try {
-      notEmpty.signal();
-    } finally {
-      takeLock.unlock();
-    }
+    semaphore.release();
-   * Returns the first non-empty queue with equal to <i>startIdx</i>, or
-   * or scans from highest to lowest priority queue.
+   * Returns an element first non-empty queue equal to the priority returned
+   * by the multiplexer or scans from highest to lowest priority queue.
-   * @param startIdx the queue number to start searching at
+   * Caller must always acquire a semaphore permit before invoking.
+   *
-  private BlockingQueue<E> getFirstNonEmptyQueue(int startIdx) {
-    BlockingQueue<E> queue = this.queues.get(startIdx);
-    if (queue.size() != 0) {
-      return queue;
-    }
-    final int numQueues = this.queues.size();
-    for(int i=0; i < numQueues; i++) {
-      queue = this.queues.get(i);
-      if (queue.size() != 0) {
-        return queue;
+  private E removeNextElement() {
+    int priority = multiplexer.getAndAdvanceCurrentIndex();
+    E e = queues.get(priority).poll();
+    if (e == null) {
+      for (int idx = 0; e == null && idx < queues.size(); idx++) {
+        e = queues.get(idx).poll();
-
-    // All queues were empty
-    return null;
+    // guaranteed to find an element if caller acquired permit.
+    assert e != null : "consumer didn't acquire semaphore!";
+    return e;
-
-    signalNotEmpty();
-
+    if (ret) {
+      signalNotEmpty();
+    }
-
-    signalNotEmpty();
-
+    if (ret) {
+      signalNotEmpty();
+    }
-    int startIdx = this.multiplexer.getAndAdvanceCurrentIndex();
-
-    takeLock.lockInterruptibly();
-    try {
-      // Wait while queue is empty
-      for (;;) {
-        BlockingQueue<E> q = this.getFirstNonEmptyQueue(startIdx);
-        if (q != null) {
-          // Got queue, so return if we can poll out an object
-          E e = q.poll();
-          if (e != null) {
-            return e;
-          }
-        }
-
-        notEmpty.await();
-      }
-    } finally {
-      takeLock.unlock();
-    }
+    semaphore.acquire();
+    return removeNextElement();
-  public E poll(long timeout, TimeUnit unit)
-      throws InterruptedException {
-
-    int startIdx = this.multiplexer.getAndAdvanceCurrentIndex();
-
-    long nanos = unit.toNanos(timeout);
-    takeLock.lockInterruptibly();
-    try {
-      for (;;) {
-        BlockingQueue<E> q = this.getFirstNonEmptyQueue(startIdx);
-        if (q != null) {
-          E e = q.poll();
-          if (e != null) {
-            // Escape condition: there might be something available
-            return e;
-          }
-        }
-
-        if (nanos <= 0) {
-          // Wait has elapsed
-          return null;
-        }
-
-        try {
-          // Now wait on the condition for a bit. If we get
-          // spuriously awoken we'll re-loop
-          nanos = notEmpty.awaitNanos(nanos);
-        } catch (InterruptedException ie) {
-          notEmpty.signal(); // propagate to a non-interrupted thread
-          throw ie;
-        }
-      }
-    } finally {
-      takeLock.unlock();
-    }
+  public E poll(long timeout, TimeUnit unit) throws InterruptedException {
+    return semaphore.tryAcquire(timeout, unit) ? removeNextElement() : null;
-    int startIdx = this.multiplexer.getAndAdvanceCurrentIndex();
-
-    BlockingQueue<E> q = this.getFirstNonEmptyQueue(startIdx);
-    if (q == null) {
-      return null; // everything is empty
-    }
-
-    // Delegate to the sub-queue's poll, which could still return null
-    return q.poll();
+    return semaphore.tryAcquire() ? removeNextElement() : null;
-    BlockingQueue<E> q = this.getFirstNonEmptyQueue(0);
-    if (q == null) {
-      return null;
-    } else {
-      return q.peek();
+    E e = null;
+    for (int i=0; e == null && i < queues.size(); i++) {
+      e = queues.get(i).peek();
+    return e;
-    int size = 0;
-    for (BlockingQueue<E> q : this.queues) {
-      size += q.size();
-    }
-    return size;
+    return semaphore.availablePermits();
-    int sum = 0;
-    for (BlockingQueue<E> q : this.queues) {
-      sum += q.drainTo(c, maxElements);
+    // initially take all permits to stop consumers from modifying queues
+    // while draining.  will restore any excess when done draining.
+    final int permits = semaphore.drainPermits();
+    final int numElements = Math.min(maxElements, permits);
+    int numRemaining = numElements;
+    for (int i=0; numRemaining > 0 && i < queues.size(); i++) {
+      numRemaining -= queues.get(i).drainTo(c, numRemaining);
-    return sum;
+    int drained = numElements - numRemaining;
+    if (permits > drained) { // restore unused permits.
+      semaphore.release(permits - drained);
+    }
+    return drained;
-    int sum = 0;
-    for (BlockingQueue<E> q : this.queues) {
-      sum += q.drainTo(c);
-    }
-    return sum;
+    return drainTo(c, Integer.MAX_VALUE);

UPD40 INS31 INS31 INS31 INS31 INS31 UPD43 INS8 INS43 UPD42 INS8 MOV78 MOV43 MOV78 MOV83 MOV43 MOV42 MOV44 MOV44 MOV43 INS8 MOV29 MOV78 INS83 MOV43 INS42 INS8 MOV29 MOV78 INS83 MOV43 INS42 INS8 MOV29 MOV78 INS83 INS39 INS42 INS8 MOV29 MOV78 MOV83 INS39 UPD42 MOV42 MOV44 MOV44 INS8 INS8 UPD42 UPD42 MOV21 INS65 MOV42 INS60 INS60 INS25 INS6 MOV41 INS25 INS25 MOV21 INS41 INS41 INS41 MOV60 INS24 MOV41 INS41 MOV60 MOV60 MOV60 INS24 INS60 INS25 MOV41 INS41 UPD43 INS34 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS39 INS59 MOV43 MOV59 INS27 INS8 MOV27 INS45 INS42 INS8 INS42 INS8 INS32 INS16 INS16 MOV43 MOV58 INS27 MOV37 INS8 INS32 INS83 INS83 INS39 INS59 INS39 INS58 INS27 INS37 INS8 INS39 INS59 INS27 INS8 UPD42 INS32 UPD42 UPD42 UPD42 INS42 INS32 UPD42 INS32 INS42 INS33 INS24 MOV21 MOV21 UPD42 UPD42 UPD42 MOV42 INS32 INS32 INS33 INS32 INS32 INS33 INS33 INS27 INS27 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS32 UPD42 INS42 INS39 INS59 INS27 INS27 INS42 MOV21 INS42 INS27 INS42 INS42 MOV21 MOV42 MOV42 INS40 INS42 INS42 INS32 INS42 INS58 INS27 INS37 MOV8 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV33 INS42 INS32 INS42 UPD42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV34 INS42 INS34 INS42 INS32 UPD7 INS42 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS39 INS59 INS27 INS27 INS42 INS42 INS42 UPD42 INS32 INS42 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS27 INS42 INS34 INS42 INS33 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL65 DEL42 DEL65 DEL42 DEL43 DEL43 DEL74 DEL52 DEL42 DEL22 DEL32 DEL52 DEL42 DEL22 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL41 DEL8 DEL25 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL24 DEL33 DEL41 DEL8 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL32 DEL32 DEL39 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL27 DEL8 DEL25 DEL8 DEL25 DEL42 DEL34 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL32 DEL59 DEL42 DEL43 DEL42 DEL43 DEL74 DEL52 DEL42 DEL34 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL8 DEL70 DEL8 DEL31 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8