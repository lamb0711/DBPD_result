HDFS-6808. Add command line option to ask DataNode reload configuration. (Lei Xu via Colin McCabe)

+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Optional;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Maps;
+import org.apache.hadoop.util.Time;
+import org.apache.hadoop.conf.ReconfigurationUtil.PropertyChange;
+import java.io.IOException;
+import java.util.Collections;
+import java.util.Map;
+  // Use for testing purpose.
+  private ReconfigurationUtil reconfigurationUtil = new ReconfigurationUtil();
+
+  /** Background thread to reload configuration. */
+  private Thread reconfigThread = null;
+  private volatile boolean shouldRun = true;
+  private Object reconfigLock = new Object();
+
+  /**
+   * The timestamp when the <code>reconfigThread</code> starts.
+   */
+  private long startTime = 0;
+
+  /**
+   * The timestamp when the <code>reconfigThread</code> finishes.
+   */
+  private long endTime = 0;
+
+  /**
+   * A map of <changed property, error message>. If error message is present,
+   * it contains the messages about the error occurred when applies the particular
+   * change. Otherwise, it indicates that the change has been successfully applied.
+   */
+  private Map<PropertyChange, Optional<String>> status = null;
+  @VisibleForTesting
+  public void setReconfigurationUtil(ReconfigurationUtil ru) {
+    reconfigurationUtil = Preconditions.checkNotNull(ru);
+  }
+
+  @VisibleForTesting
+  public Collection<PropertyChange> getChangedProperties(
+      Configuration newConf, Configuration oldConf) {
+    return reconfigurationUtil.parseChangedProperties(newConf, oldConf);
+  }
+
+  /**
+   * A background thread to apply configuration changes.
+   */
+  private static class ReconfigurationThread extends Thread {
+    private ReconfigurableBase parent;
+
+    ReconfigurationThread(ReconfigurableBase base) {
+      this.parent = base;
+    }
+
+    // See {@link ReconfigurationServlet#applyChanges}
+    public void run() {
+      LOG.info("Starting reconfiguration task.");
+      Configuration oldConf = this.parent.getConf();
+      Configuration newConf = new Configuration();
+      Collection<PropertyChange> changes =
+          this.parent.getChangedProperties(newConf, oldConf);
+      Map<PropertyChange, Optional<String>> results = Maps.newHashMap();
+      for (PropertyChange change : changes) {
+        String errorMessage = null;
+        if (!this.parent.isPropertyReconfigurable(change.prop)) {
+          errorMessage = "Property " + change.prop +
+              " is not reconfigurable";
+          LOG.info(errorMessage);
+          results.put(change, Optional.of(errorMessage));
+          continue;
+        }
+        LOG.info("Change property: " + change.prop + " from \""
+            + ((change.oldVal == null) ? "<default>" : change.oldVal)
+            + "\" to \"" + ((change.newVal == null) ? "<default>" : change.newVal)
+            + "\".");
+        try {
+          this.parent.reconfigurePropertyImpl(change.prop, change.newVal);
+        } catch (ReconfigurationException e) {
+          errorMessage = e.toString();
+        }
+        results.put(change, Optional.fromNullable(errorMessage));
+      }
+
+      synchronized (this.parent.reconfigLock) {
+        this.parent.endTime = Time.monotonicNow();
+        this.parent.status = Collections.unmodifiableMap(results);
+        this.parent.reconfigThread = null;
+      }
+    }
+  }
+
+  /**
+   * Start a reconfiguration task to reload configuration in background.
+   */
+  public void startReconfigurationTask() throws IOException {
+    synchronized (reconfigLock) {
+      if (!shouldRun) {
+        String errorMessage = "The server is stopped.";
+        LOG.warn(errorMessage);
+        throw new IOException(errorMessage);
+      }
+      if (reconfigThread != null) {
+        String errorMessage = "Another reconfiguration task is running.";
+        LOG.warn(errorMessage);
+        throw new IOException(errorMessage);
+      }
+      reconfigThread = new ReconfigurationThread(this);
+      reconfigThread.setDaemon(true);
+      reconfigThread.setName("Reconfiguration Task");
+      reconfigThread.start();
+      startTime = Time.monotonicNow();
+    }
+  }
+
+  public ReconfigurationTaskStatus getReconfigurationTaskStatus() {
+    synchronized (reconfigLock) {
+      if (reconfigThread != null) {
+        return new ReconfigurationTaskStatus(startTime, 0, null);
+      }
+      return new ReconfigurationTaskStatus(startTime, endTime, status);
+    }
+  }
+
+  public void shutdownReconfigurationTask() {
+    Thread tempThread;
+    synchronized (reconfigLock) {
+      shouldRun = false;
+      if (reconfigThread == null) {
+        return;
+      }
+      tempThread = reconfigThread;
+      reconfigThread = null;
+    }
+
+    try {
+      tempThread.join();
+    } catch (InterruptedException e) {
+    }
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS55 INS31 INS31 INS31 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS29 INS83 INS39 INS42 INS43 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS14 INS65 INS42 INS42 INS33 INS42 INS9 INS42 INS42 INS14 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS43 INS43 INS74 INS42 INS33 INS42 INS43 INS42 INS21 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS41 INS65 INS42 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS65 INS42 INS51 INS42 INS51 INS60 INS51 INS54 INS43 INS66 INS43 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS7 INS42 INS42 INS42 INS42 INS32 INS66 INS42 INS42 INS43 INS42 INS21 INS21 INS60 INS60 INS60 INS60 INS70 INS51 INS66 INS42 INS8 INS42 INS8 INS43 INS59 INS42 INS8 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS43 INS59 INS43 INS59 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS22 INS8 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS25 INS41 INS42 INS42 INS21 INS25 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS43 INS74 INS42 INS32 INS43 INS42 INS60 INS25 INS21 INS54 INS21 INS22 INS42 INS21 INS21 INS21 INS38 INS8 INS27 INS8 INS7 INS32 INS32 INS32 INS7 INS27 INS8 INS14 INS7 INS27 INS8 INS7 INS7 INS32 INS43 INS42 INS52 INS42 INS22 INS42 INS43 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS43 INS59 INS38 INS8 INS32 INS8 INS12 INS32 INS52 INS42 INS7 INS7 INS7 INS42 INS60 INS21 INS53 INS42 INS33 INS60 INS21 INS53 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS43 INS42 INS42 INS42 INS42 INS9 INS42 INS33 INS41 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS52 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS21 INS21 INS21 INS18 INS42 INS42 INS27 INS21 INS44 INS8 INS42 INS42 INS42 INS32 INS22 INS32 INS22 INS32 INS22 INS33 INS43 INS59 INS32 INS14 INS43 INS59 INS32 INS14 INS43 INS52 INS42 INS42 INS14 INS42 INS22 INS42 INS40 INS7 INS32 INS32 INS45 INS40 INS45 INS36 INS45 INS36 INS45 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS34 INS33 INS52 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS16 INS16 INS22 INS42 INS40 INS40 INS42 INS7 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS45 INS40 INS45 INS42 INS42 INS42 INS36 INS45 INS40 INS36 INS45 INS40 INS52 INS42 INS42 INS32 INS27 INS27 INS42 INS42 INS40 INS33 INS40 INS33