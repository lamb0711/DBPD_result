HADOOP-14028. S3A BlockOutputStreams doesn't delete temporary files in multipart uploads or handle part upload failures.
Contributed by Steve Loughran.

(cherry picked from commit 29fe5af017b945d8750c074ca39031b5b777eddd)

+    Preconditions.checkNotNull(srcfile);
-  PutObjectRequest newPutObjectRequest(String key,
+  private PutObjectRequest newPutObjectRequest(String key,
+    Preconditions.checkNotNull(inputStream);
-   * PUT an object, incrementing the put requests and put bytes
+   * Start a transfer-manager managed async PUT of an object,
+   * incrementing the put requests and put bytes
+   * Because the operation is async, any stream supplied in the request
+   * must reference data (files, buffers) which stay valid until the upload
+   * completes.
+   * <i>Important: this call will close any input stream in the request.</i>
-   * Increments the write and put counters
+   * Increments the write and put counters.
+   * <i>Important: this call does not close any input stream in the request.</i>
-     * The metadata is assumed to have been configured with the size of the
-     * operation.
+     * If {@code length} is set, the metadata is configured with the size of
+     * the upload.
-      return newPutObjectRequest(key, newObjectMetadata(length), inputStream);
+      PutObjectRequest request = newPutObjectRequest(key,
+          newObjectMetadata(length), inputStream);
+      return request;
+    }
+
+    /**
+     * Create a {@link PutObjectRequest} request to upload a file.
+     * @param sourceFile source file
+     * @return the request
+     */
+    PutObjectRequest newPutRequest(File sourceFile) {
+      int length = (int) sourceFile.length();
+      PutObjectRequest request = newPutObjectRequest(key,
+          newObjectMetadata(length), sourceFile);
+      return request;
+      LOG.debug("Completing multipart upload {} with {} parts",
+          uploadId, partETags.size());
-     * @return the result
+      LOG.debug("Aborting multipart upload {}", uploadId);
+     * Exactly one of: {@code uploadStream} or {@code sourceFile}
+     * must be specified.
-     * @param uploadStream source of data to upload
+     * @param uploadStream source of data to upload
+     * @param sourceFile optional source file.
-        InputStream uploadStream,
-        int partNumber,
-        int size) {
+        int partNumber, int size, InputStream uploadStream, File sourceFile) {
-      Preconditions.checkNotNull(uploadStream);
+      // exactly one source must be set; xor verifies this
+      Preconditions.checkArgument((uploadStream != null) ^ (sourceFile != null),
+          "Data source");
-      Preconditions.checkArgument(partNumber> 0 && partNumber <=10000,
+      Preconditions.checkArgument(partNumber > 0 && partNumber <= 10000,
-      return new UploadPartRequest()
+      UploadPartRequest request = new UploadPartRequest()
-          .withInputStream(uploadStream)
+      if (uploadStream != null) {
+        // there's an upload stream. Bind to it.
+        request.setInputStream(uploadStream);
+      } else {
+        request.setFile(sourceFile);
+      }
+      return request;
+
+    /**
+     * PUT an object directly (i.e. not via the transfer manager).
+     * @param putObjectRequest the request
+     * @return the upload initiated
+     * @throws IOException on problems
+     */
+    PutObjectResult putObject(PutObjectRequest putObjectRequest)
+        throws IOException {
+      try {
+        return putObjectDirect(putObjectRequest);
+      } catch (AmazonClientException e) {
+        throw translateException("put", putObjectRequest.getKey(), e);
+      }
+    }

INS83 INS31 MOV44 INS31 INS21 INS21 INS29 INS43 INS42 INS44 INS8 MOV65 INS44 INS29 INS43 INS42 INS44 INS43 INS8 INS32 INS32 INS66 UPD66 INS66 INS66 INS66 INS66 UPD66 INS66 INS60 INS65 INS65 INS65 INS42 INS43 INS42 INS60 INS60 INS41 INS21 INS21 INS65 INS43 INS42 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS66 INS65 UPD66 UPD66 INS43 INS59 INS42 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS39 INS59 INS43 INS59 INS42 INS32 INS32 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS8 INS12 INS66 INS42 INS42 MOV32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS45 INS42 INS66 INS66 UPD42 INS27 INS45 INS42 INS42 MOV32 INS42 INS33 INS21 INS21 INS41 INS44 INS8 INS39 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS36 INS36 UPD42 UPD42 INS32 INS32 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS27 INS27 UPD42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS33 INS42 INS45 INS32 INS42 INS42 INS42 DEL66 DEL65 DEL42 DEL32 DEL41