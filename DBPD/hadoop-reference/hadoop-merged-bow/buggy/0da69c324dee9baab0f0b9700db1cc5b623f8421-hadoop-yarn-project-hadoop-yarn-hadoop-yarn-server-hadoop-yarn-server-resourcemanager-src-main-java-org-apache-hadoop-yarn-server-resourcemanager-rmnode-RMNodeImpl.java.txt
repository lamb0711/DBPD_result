YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.
(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)

Conflicts:

	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java

+import java.util.Objects;
+  private Integer decommissioningTimeout;
-
+      .addTransition(NodeState.DECOMMISSIONING, NodeState.DECOMMISSIONING,
+         RMNodeEventType.FINISHED_CONTAINERS_PULLED_BY_AM,
+         new AddContainersToBeRemovedFromNMTransition())
-            " on Node  " + this.nodeId);
+            " on Node  " + this.nodeId + " oldState " + oldState);
+    case DECOMMISSIONING:
+      metrics.decrDecommissioningNMs();
+      break;
+    case DECOMMISSIONED:
+      metrics.decrDecommisionedNMs();
+      break;
+      Integer timeout = null;
+      if (RMNodeDecommissioningEvent.class.isInstance(event)) {
+        RMNodeDecommissioningEvent e = ((RMNodeDecommissioningEvent) event);
+        timeout = e.getDecommissioningTimeout();
+      }
+      // Pick up possible updates on decommissioningTimeout.
+      if (rmNode.getState() == NodeState.DECOMMISSIONING) {
+        if (!Objects.equals(rmNode.getDecommissioningTimeout(), timeout)) {
+          LOG.info("Update " + rmNode.getNodeID() +
+                   " DecommissioningTimeout to be " + timeout);
+          rmNode.decommissioningTimeout = timeout;
+        } else {
+          LOG.info(rmNode.getNodeID() + " is already DECOMMISSIONING");
+        }
+        return;
+      }
+      rmNode.decommissioningTimeout = timeout;
-      if (isNodeDecommissioning) {
-        List<ApplicationId> runningApps = rmNode.getRunningApps();
-
-        List<ApplicationId> keepAliveApps = statusEvent.getKeepAliveAppIds();
-
-        // no running (and keeping alive) app on this node, get it
-        // decommissioned.
-        // TODO may need to check no container is being scheduled on this node
-        // as well.
-        if ((runningApps == null || runningApps.size() == 0)
-            && (keepAliveApps == null || keepAliveApps.size() == 0)) {
-          RMNodeImpl.deactivateNode(rmNode, NodeState.DECOMMISSIONED);
-          return NodeState.DECOMMISSIONED;
-        }
-
-        // TODO (in YARN-3223) if node in decommissioning, get node resource
-        // updated if container get finished (keep available resource to be 0)
-      }
+
+  @Override
+  public Integer getDecommissioningTimeout() {
+    return decommissioningTimeout;
+  }

INS26 INS40 INS23 INS31 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS42 INS42 MOV10 MOV49 INS42 INS42 INS41 INS21 INS10 INS49 INS49 INS21 INS10 INS60 INS25 INS25 INS21 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS32 INS8 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS57 INS42 INS42 INS60 INS21 INS32 INS40 INS25 INS41 INS40 INS42 INS43 INS43 INS59 INS7 INS42 INS42 INS38 INS8 INS8 INS42 INS42 INS42 INS36 INS42 INS32 INS32 INS21 INS21 INS21 INS11 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS7 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS45 INS32 INS45 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS40 MOV32 MOV42 MOV40 INS40 INS40 INS14 UPD40 MOV14 INS43 UPD40 UPD40 MOV14 INS42 UPD40 UPD40 MOV14 UPD40 MOV14 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL36 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL40 DEL41 DEL8 DEL25 DEL8 DEL25