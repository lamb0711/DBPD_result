HADOOP-7233. Refactor ls to conform to new FsCommand class.  Contributed by Daryn Sharp


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1095761 13f79535-47bb-0310-9956-ffa450edef68

-    
-  /**
-   * Get a listing of all files in that match the file pattern <i>srcf</i>.
-   * @param srcf a file pattern specifying source files
-   * @param recursive if need to list files in subdirs
-   * @throws IOException  
-   * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)
-   */
-  private int ls(String srcf, boolean recursive) throws IOException {
-    Path srcPath = new Path(srcf);
-    FileSystem srcFs = srcPath.getFileSystem(this.getConf());
-    FileStatus[] srcs = srcFs.globStatus(srcPath);
-    if (srcs==null || srcs.length==0) {
-      throw new FileNotFoundException("Cannot access " + srcf + 
-          ": No such file or directory.");
-    }
- 
-    boolean printHeader = (srcs.length == 1) ? true: false;
-    int numOfErrors = 0;
-    for(int i=0; i<srcs.length; i++) {
-      numOfErrors += ls(srcs[i], srcFs, recursive, printHeader);
-    }
-    return numOfErrors == 0 ? 0 : -1;
-  }
-
-  /* list all files under the directory <i>src</i>
-   * ideally we should provide "-l" option, that lists like "ls -l".
-   */
-  private int ls(FileStatus src, FileSystem srcFs, boolean recursive,
-      boolean printHeader) throws IOException {
-    final String cmd = recursive? "lsr": "ls";
-    final FileStatus[] items = shellListStatus(cmd, srcFs, src);
-    if (items == null) {
-      return 1;
-    } else {
-      int numOfErrors = 0;
-      if (!recursive && printHeader) {
-        if (items.length != 0) {
-          System.out.println("Found " + items.length + " items");
-        }
-      }
-      
-      int maxReplication = 3, maxLen = 10, maxOwner = 0,maxGroup = 0;
-
-      for(int i = 0; i < items.length; i++) {
-        FileStatus stat = items[i];
-        int replication = String.valueOf(stat.getReplication()).length();
-        int len = String.valueOf(stat.getLen()).length();
-        int owner = String.valueOf(stat.getOwner()).length();
-        int group = String.valueOf(stat.getGroup()).length();
-        
-        if (replication > maxReplication) maxReplication = replication;
-        if (len > maxLen) maxLen = len;
-        if (owner > maxOwner)  maxOwner = owner;
-        if (group > maxGroup)  maxGroup = group;
-      }
-      
-      for (int i = 0; i < items.length; i++) {
-        FileStatus stat = items[i];
-        Path cur = stat.getPath();
-        String mdate = dateForm.format(new Date(stat.getModificationTime()));
-        
-        System.out.print((stat.isDirectory() ? "d" : "-") + 
-          stat.getPermission() + " ");
-        System.out.printf("%"+ maxReplication + 
-          "s ", (stat.isFile() ? stat.getReplication() : "-"));
-        if (maxOwner > 0)
-          System.out.printf("%-"+ maxOwner + "s ", stat.getOwner());
-        if (maxGroup > 0)
-          System.out.printf("%-"+ maxGroup + "s ", stat.getGroup());
-        System.out.printf("%"+ maxLen + "d ", stat.getLen());
-        System.out.print(mdate + " ");
-        System.out.println(cur.toUri().getPath());
-        if (recursive && stat.isDirectory()) {
-          numOfErrors += ls(stat,srcFs, recursive, printHeader);
-        }
-      }
-      return numOfErrors;
-    }
-  }
-
-      "[-D <property=value>] [-ls <path>] [-lsr <path>] [-df [<path>]] [-du [-s] [-h] <path>]\n\t" +
+      "[-D <property=value>] [-df [<path>]] [-du [-s] [-h] <path>]\n\t" +
-        
-    String ls = "-ls <path>: \tList the contents that match the specified file pattern. If\n" + 
-      "\t\tpath is not specified, the contents of /user/<currentUser>\n" +
-      "\t\twill be listed. Directory entries are of the form \n" +
-      "\t\t\tdirName (full path) <dir> \n" +
-      "\t\tand file entries are of the form \n" + 
-      "\t\t\tfileName(full path) <r n> size \n" +
-      "\t\twhere n is the number of replicas specified for the file \n" + 
-      "\t\tand size is the size of the file, in bytes.\n";
-
-    String lsr = "-lsr <path>: \tRecursively list the contents that match the specified\n" +
-      "\t\tfile pattern.  Behaves very similarly to hadoop fs -ls,\n" + 
-      "\t\texcept that the data is shown for all the entries in the\n" +
-      "\t\tsubtree.\n";
-
-      System.out.println(instance.getDescription());
+      printHelp(instance);
-    } else if ("ls".equals(cmd)) {
-      System.out.println(ls);
-    } else if ("lsr".equals(cmd)) {
-      System.out.println(lsr);
-        System.out.println(instance.getUsage());
+        System.out.println("\t[" + instance.getUsage() + "]");
-      System.out.println(ls);
-      System.out.println(lsr);
-        instance = commandFactory.getInstance(thisCmdName);
-        System.out.println(instance.getDescription());
+        printHelp(commandFactory.getInstance(thisCmdName));
+  // TODO: will eventually auto-wrap the text, but this matches the expected
+  // output for the hdfs tests...
+  private void printHelp(Command instance) {
+    boolean firstLine = true;
+    for (String line : instance.getDescription().split("\n")) {
+      String prefix;
+      if (firstLine) {
+        prefix = instance.getUsage() + ":\t";
+        firstLine = false;
+      } else {
+        prefix = "\t\t";
+      }
+      System.out.println(prefix + line);
+    }    
+  }
+  
-        } else if ("-ls".equals(cmd)) {
-          exitCode = ls(argv[i], false);
-        } else if ("-lsr".equals(cmd)) {
-          exitCode = ls(argv[i], true);
-    } else if ("-ls".equals(cmd) || "-lsr".equals(cmd) ||
-               "-du".equals(cmd) || "-dus".equals(cmd) ||
+    } else if ("-du".equals(cmd) || "-dus".equals(cmd) ||
-      System.err.println("           [-ls <path>]");
-      System.err.println("           [-lsr <path>]");
-      } else if ("-ls".equals(cmd)) {
-        if (i < argv.length) {
-          exitCode = doall(cmd, argv, i);
-        } else {
-          exitCode = ls(Path.CUR_DIR, false);
-        } 
-      } else if ("-lsr".equals(cmd)) {
-        if (i < argv.length) {
-          exitCode = doall(cmd, argv, i);
-        } else {
-          exitCode = ls(Path.CUR_DIR, true);
-        } 

INS31 MOV83 UPD39 MOV39 UPD42 MOV42 MOV44 INS8 MOV25 UPD43 UPD42 MOV60 INS70 MOV27 INS8 UPD42 INS44 MOV32 MOV42 INS8 INS21 MOV32 MOV8 UPD42 INS9 MOV43 UPD42 MOV42 UPD42 INS45 MOV60 INS25 MOV21 MOV25 INS32 MOV32 MOV8 MOV43 INS42 INS8 INS8 MOV27 MOV8 UPD45 INS42 INS42 MOV32 MOV8 UPD42 MOV21 MOV21 MOV21 UPD42 MOV25 MOV27 MOV8 INS7 INS7 INS7 INS42 UPD42 MOV32 MOV8 MOV32 MOV8 INS42 INS27 INS42 INS9 INS42 INS45 MOV32 MOV8 MOV27 MOV8 MOV32 UPD45 MOV45 MOV32 MOV8 MOV32 MOV8 UPD42 UPD42 MOV32 MOV8 MOV32 MOV8 MOV32 MOV8 MOV32 MOV8 MOV32 MOV8 MOV32 MOV8 MOV27 MOV8 MOV44 MOV32 MOV44 MOV32 INS32 INS27 INS42 INS32 INS45 MOV32 INS45 MOV42 MOV42 MOV42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL40 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL52 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL34 DEL27 DEL34 DEL34 DEL38 DEL16 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL45 DEL45 DEL16 DEL59 DEL60 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL34 DEL41 DEL8 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL38 DEL42 DEL27 DEL40 DEL34 DEL27 DEL40 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL42 DEL34 DEL59 DEL42 DEL34 DEL59 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL25 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL25 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL25 DEL42 DEL42 DEL27 DEL42 DEL42 DEL7 DEL21 DEL25 DEL8 DEL24 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL40 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL25 DEL42 DEL34 DEL27 DEL40 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL32 DEL21 DEL25 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL27 DEL59 DEL60 DEL42 DEL45 DEL45 DEL45 DEL45 DEL27 DEL59 DEL60 DEL45 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL45 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL7 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL21 DEL8 DEL25 DEL25 DEL40 DEL34 DEL27 DEL36 DEL9 DEL9 DEL16 DEL40 DEL42 DEL43 DEL42 DEL42 DEL2 DEL40 DEL42 DEL42 DEL42 DEL32 DEL45 DEL45 DEL16 DEL36 DEL27 DEL32 DEL40 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL16 DEL36 DEL32 DEL40 DEL42 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL32 DEL45 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL2 DEL9 DEL32 DEL7 DEL21 DEL8 DEL45 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL2 DEL9 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL40 DEL42 DEL45 DEL32 DEL21 DEL40 DEL42 DEL45 DEL32 DEL21 DEL45 DEL42 DEL42 DEL32 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL40 DEL9 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL45 DEL42 DEL42 DEL32 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL40 DEL9 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25