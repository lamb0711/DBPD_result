HDFS-10630. Federation State Store FS Implementation. Contributed by Jason Kace and Inigo Goiri.

(cherry picked from commit c6e0bd640cdaf83a660fa050809cad6f1d4c6f4d)

-
+import java.io.IOException;
+import java.util.Collection;
+import java.util.LinkedList;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hdfs.DFSConfigKeys;
+import org.apache.hadoop.hdfs.server.federation.store.driver.StateStoreDriver;
+import org.apache.hadoop.hdfs.server.federation.store.records.BaseRecord;
+import org.apache.hadoop.util.ReflectionUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.annotations.VisibleForTesting;
- * StateStoreDriver} and maintain the connection to the data store. There
- * are multiple state store driver connections supported:
+ * StateStoreDriver} and maintain the connection to the data store. There are
+ * multiple state store driver connections supported:
- * <li>File {@link org.apache.hadoop.hdfs.server.federation.store.driver.impl.
+ * <li>File
+ * {@link org.apache.hadoop.hdfs.server.federation.store.driver.impl.
- * <li>ZooKeeper {@link org.apache.hadoop.hdfs.server.federation.store.driver.
- * impl.StateStoreZooKeeperImpl StateStoreZooKeeperImpl}
+ * <li>ZooKeeper
+ * {@link org.apache.hadoop.hdfs.server.federation.store.driver.impl.
+ * StateStoreZooKeeperImpl StateStoreZooKeeperImpl}
- * The service also supports the dynamic registration of data interfaces such as
- * the following:
+ * The service also supports the dynamic registration of record stores like:
- * <li>{@link MembershipStateStore}: state of the Namenodes in the
+ * <li>{@link MembershipStore}: state of the Namenodes in the
- * <li>{@link RouterStateStore}: State of the routers in the federation.
+  private static final Logger LOG =
+      LoggerFactory.getLogger(StateStoreService.class);
+
+
+  /** State Store configuration. */
+  private Configuration conf;
+
-  // Stub class
-  public StateStoreService(String name) {
-    super(name);
+  /** Driver for the back end connection. */
+  private StateStoreDriver driver;
+
+  /** Service to maintain data store connection. */
+  private StateStoreConnectionMonitorService monitorService;
+
+
+  public StateStoreService() {
+    super(StateStoreService.class.getName());
+  }
+
+  /**
+   * Initialize the State Store and the connection to the backend.
+   *
+   * @param config Configuration for the State Store.
+   * @throws IOException
+   */
+  @Override
+  protected void serviceInit(Configuration config) throws Exception {
+    this.conf = config;
+
+    // Create implementation of State Store
+    Class<? extends StateStoreDriver> driverClass = this.conf.getClass(
+        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS,
+        DFSConfigKeys.FEDERATION_STORE_DRIVER_CLASS_DEFAULT,
+        StateStoreDriver.class);
+    this.driver = ReflectionUtils.newInstance(driverClass, this.conf);
+
+    if (this.driver == null) {
+      throw new IOException("Cannot create driver for the State Store");
+    }
+
+    // Check the connection to the State Store periodically
+    this.monitorService = new StateStoreConnectionMonitorService(this);
+    this.addService(monitorService);
+
+    super.serviceInit(this.conf);
+  }
+
+  @Override
+  protected void serviceStart() throws Exception {
+    loadDriver();
+    super.serviceStart();
+  }
+
+  @Override
+  protected void serviceStop() throws Exception {
+    closeDriver();
+
+    super.serviceStop();
+  }
+
+  /**
+   * List of records supported by this State Store.
+   *
+   * @return List of supported record classes.
+   */
+  public Collection<Class<? extends BaseRecord>> getSupportedRecords() {
+    // TODO add list of records
+    return new LinkedList<>();
+  }
+
+  /**
+   * Load the State Store driver. If successful, refresh cached data tables.
+   */
+  public void loadDriver() {
+    synchronized (this.driver) {
+      if (!isDriverReady()) {
+        String driverName = this.driver.getClass().getSimpleName();
+        if (this.driver.init(conf, getIdentifier(), getSupportedRecords())) {
+          LOG.info("Connection to the State Store driver {} is open and ready",
+              driverName);
+        } else {
+          LOG.error("Cannot initialize State Store driver {}", driverName);
+        }
+      }
+    }
+  }
+
+  /**
+   * Check if the driver is ready to be used.
+   *
+   * @return If the driver is ready.
+   */
+  public boolean isDriverReady() {
+    return this.driver.isDriverReady();
+  }
+
+  /**
+   * Manually shuts down the driver.
+   *
+   * @throws Exception If the driver cannot be closed.
+   */
+  @VisibleForTesting
+  public void closeDriver() throws Exception {
+    if (this.driver != null) {
+      this.driver.close();
+    }
+  }
+
+  /**
+   * Get the state store driver.
+   *
+   * @return State store driver.
+   */
+  public StateStoreDriver getDriver() {
+    return this.driver;
-}
+
+}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS83 INS42 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS83 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS29 INS78 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS8 MOV66 MOV65 UPD66 MOV66 UPD66 MOV66 MOV66 UPD66 MOV66 MOV65 UPD66 MOV66 MOV65 MOV66 MOV66 UPD66 MOV66 MOV66 MOV66 MOV65 MOV66 MOV66 MOV66 MOV65 MOV66 MOV66 MOV65 MOV66 UPD66 MOV66 INS42 INS42 INS32 INS65 INS42 INS42 INS65 INS42 INS42 INS65 INS42 INS42 INS46 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS25 INS21 INS21 INS21 INS42 INS42 INS21 INS21 INS42 INS42 INS21 INS21 INS65 INS65 INS43 INS74 INS41 INS65 INS51 INS65 INS65 INS41 INS65 INS65 INS42 INS42 INS25 INS65 INS65 INS42 INS41 UPD42 INS42 INS42 INS57 UPD66 MOV66 UPD66 MOV66 INS66 INS32 INS66 INS42 INS66 INS42 INS42 INS7 INS74 INS59 INS7 INS27 INS8 INS7 INS32 INS48 INS32 INS48 INS32 INS48 INS66 INS66 INS42 INS43 INS76 INS14 INS66 INS22 INS8 INS66 INS66 INS32 INS66 INS42 INS66 INS27 INS8 INS66 INS66 INS22 INS43 INS57 INS42 INS22 INS42 INS43 INS76 INS42 INS32 INS22 INS32 INS22 INS33 INS53 INS22 INS14 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS52 INS42 INS25 INS22 INS42 INS22 INS33 INS21 INS52 INS42 INS42 INS43 INS52 INS42 INS42 INS43 INS22 INS42 INS40 INS40 INS57 INS52 INS42 INS42 INS42 INS42 INS22 INS52 INS42 INS14 INS52 INS42 INS43 INS52 INS52 INS42 INS42 INS43 INS38 INS8 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS52 INS42 INS43 INS52 INS42 INS43 INS45 INS42 INS42 INS32 INS60 INS25 INS22 INS42 INS42 INS42 INS42 MOV43 INS59 INS32 INS8 INS8 INS52 INS42 INS42 INS32 INS22 INS42 INS42 INS32 INS32 INS21 INS21 INS32 INS42 INS52 INS42 INS42 INS42 INS32 INS32 INS22 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS52 INS42 DEL66 DEL42 DEL65 DEL65 DEL29 DEL83 DEL42 DEL42 DEL42 DEL44 DEL42 DEL46 DEL8