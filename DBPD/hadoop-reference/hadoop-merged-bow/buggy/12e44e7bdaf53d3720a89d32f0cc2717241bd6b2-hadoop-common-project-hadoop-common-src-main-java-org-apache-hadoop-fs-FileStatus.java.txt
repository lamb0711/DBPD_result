HDFS-6984. Serialize FileStatus via protobuf.

+import java.util.Collections;
+import java.util.EnumSet;
+import java.util.Set;
+import org.apache.hadoop.fs.FSProtos.FileStatusProto;
-import org.apache.hadoop.io.Text;
+import org.apache.hadoop.fs.protocolPB.PBHelper;
-  
+  private Set<AttrFlags> attr;
+
+  private enum AttrFlags {
+    HAS_ACL,
+    HAS_CRYPT,
+    HAS_EC,
+  };
+  private static final Set<AttrFlags> NONE = Collections.<AttrFlags>emptySet();
+  private static Set<AttrFlags> flags(boolean acl, boolean crypt, boolean ec) {
+    if (!(acl || crypt || ec)) {
+      return NONE;
+    }
+    EnumSet<AttrFlags> ret = EnumSet.noneOf(AttrFlags.class);
+    if (acl) {
+      ret.add(AttrFlags.HAS_ACL);
+    }
+    if (crypt) {
+      ret.add(AttrFlags.HAS_CRYPT);
+    }
+    if (ec) {
+      ret.add(AttrFlags.HAS_EC);
+    }
+    return ret;
+  }
+
+    this(length, isdir, block_replication, blocksize, modification_time,
+        access_time, permission, owner, group, symlink, path,
+        false, false, false);
+  }
+
+  public FileStatus(long length, boolean isdir, int block_replication,
+      long blocksize, long modification_time, long access_time,
+      FsPermission permission, String owner, String group, Path symlink,
+      Path path, boolean hasAcl, boolean isEncrypted, boolean isErasureCoded) {
-    } else if (symlink!=null) {
+    } else if (symlink != null) {
+    attr = flags(hasAcl, isEncrypted, isErasureCoded);
+
-    return permission.getAclBit();
+    return attr.contains(AttrFlags.HAS_ACL);
-    return permission.getEncryptedBit();
+    return attr.contains(AttrFlags.HAS_CRYPT);
-    return permission.getErasureCodedBit();
+    return attr.contains(AttrFlags.HAS_EC);
-  
-  //////////////////////////////////////////////////
-  // Writable
-  //////////////////////////////////////////////////
-  @Override
-  public void write(DataOutput out) throws IOException {
-    Text.writeString(out, getPath().toString(), Text.DEFAULT_MAX_LEN);
-    out.writeLong(getLen());
-    out.writeBoolean(isDirectory());
-    out.writeShort(getReplication());
-    out.writeLong(getBlockSize());
-    out.writeLong(getModificationTime());
-    out.writeLong(getAccessTime());
-    getPermission().write(out);
-    Text.writeString(out, getOwner(), Text.DEFAULT_MAX_LEN);
-    Text.writeString(out, getGroup(), Text.DEFAULT_MAX_LEN);
-    out.writeBoolean(isSymlink());
-    if (isSymlink()) {
-      Text.writeString(out, getSymlink().toString(), Text.DEFAULT_MAX_LEN);
-    }
-  }
-
-  @Override
-  public void readFields(DataInput in) throws IOException {
-    String strPath = Text.readString(in, Text.DEFAULT_MAX_LEN);
-    this.path = new Path(strPath);
-    this.length = in.readLong();
-    this.isdir = in.readBoolean();
-    this.block_replication = in.readShort();
-    blocksize = in.readLong();
-    modification_time = in.readLong();
-    access_time = in.readLong();
-    permission.readFields(in);
-    owner = Text.readString(in, Text.DEFAULT_MAX_LEN);
-    group = Text.readString(in, Text.DEFAULT_MAX_LEN);
-    if (in.readBoolean()) {
-      this.symlink = new Path(Text.readString(in, Text.DEFAULT_MAX_LEN));
-    } else {
-      this.symlink = null;
-    }
-  }
-    if (o == null) {
+    if (!(o instanceof FileStatus)) {
-    if (!(o instanceof FileStatus)) {
-      return false;
-    }
-      sb.append("; symlink=" + symlink);
+      try {
+        sb.append("; symlink=" + getSymlink());
+      } catch (IOException e) {
+        throw new RuntimeException("Unexpected exception", e);
+      }
+  /**
+   * Read instance encoded as protobuf from stream.
+   * @param in Input stream
+   * @see PBHelper#convert(FileStatus)
+   * @deprecated Use the {@link PBHelper} and protobuf serialization directly.
+   */
+  @Override
+  @Deprecated
+  public void readFields(DataInput in) throws IOException {
+    int size = in.readInt();
+    if (size < 0) {
+      throw new IOException("Can't read FileStatusProto with negative " +
+          "size of " + size);
+    }
+    byte[] buf = new byte[size];
+    in.readFully(buf);
+    FileStatusProto proto = FileStatusProto.parseFrom(buf);
+    FileStatus other = PBHelper.convert(proto);
+    isdir = other.isDirectory();
+    length = other.getLen();
+    isdir = other.isDirectory();
+    block_replication = other.getReplication();
+    blocksize = other.getBlockSize();
+    modification_time = other.getModificationTime();
+    access_time = other.getAccessTime();
+    setPermission(other.getPermission());
+    setOwner(other.getOwner());
+    setGroup(other.getGroup());
+    setSymlink((other.isSymlink() ? other.getSymlink() : null));
+    setPath(other.getPath());
+    attr = flags(other.hasAcl(), other.isEncrypted(), other.isErasureCoded());
+    assert (isDirectory() && getSymlink() == null) || !isDirectory();
+  }
+
+  /**
+   * Write instance encoded as protobuf to stream.
+   * @param out Output stream
+   * @see PBHelper#convert(FileStatus)
+   * @deprecated Use the {@link PBHelper} and protobuf serialization directly.
+   */
+  @Override
+  @Deprecated
+  public void write(DataOutput out) throws IOException {
+    FileStatusProto proto = PBHelper.convert(this);
+    int size = proto.getSerializedSize();
+    out.writeInt(size);
+    out.write(proto.toByteArray());
+  }
+

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 UPD40 INS23 INS71 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS42 INS72 INS72 INS72 INS83 INS83 INS83 INS74 INS59 INS83 UPD83 MOV83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS44 INS44 MOV29 INS83 INS39 INS42 INS8 MOV29 INS83 INS39 INS42 INS8 MOV29 INS83 INS39 INS42 INS8 MOV25 INS29 INS78 INS29 MOV78 INS78 INS83 INS39 INS42 MOV44 MOV43 INS8 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS43 INS39 INS42 INS39 INS42 INS39 INS42 INS25 INS60 INS25 INS25 INS25 INS41 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS41 INS41 INS41 INS65 INS65 INS65 INS65 INS42 INS60 INS25 INS60 INS21 INS60 INS21 INS21 MOV21 INS6 INS65 INS65 INS65 INS65 INS42 INS60 INS60 INS21 INS21 INS42 INS42 INS42 INS42 UPD42 MOV42 INS43 UPD42 MOV42 INS42 INS42 INS38 INS8 INS74 INS59 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS9 INS7 INS32 INS32 INS32 INS8 INS66 INS42 INS66 INS68 INS66 INS65 INS66 INS39 INS59 INS27 INS8 INS5 INS59 INS32 UPD43 INS43 INS59 INS32 INS32 INS32 INS32 INS27 INS66 INS42 INS66 INS68 INS66 INS65 INS66 INS43 INS59 INS39 INS59 INS32 INS32 INS42 INS36 INS41 INS43 INS43 INS42 INS32 MOV21 MOV21 MOV21 INS42 INS32 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS42 INS40 UPD42 MOV42 UPD42 MOV42 UPD40 MOV40 INS54 INS42 INS42 INS69 INS42 INS42 INS32 INS42 INS34 INS53 INS39 INS85 INS42 INS3 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 UPD42 INS32 INS42 INS32 INS42 INS32 INS42 INS36 INS42 INS32 INS42 INS32 INS36 INS38 INS42 INS42 INS69 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS42 UPD42 MOV42 INS42 INS57 INS42 INS42 INS42 INS42 INS8 INS12 INS43 INS42 INS42 INS14 INS5 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS16 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 INS32 INS27 INS32 INS43 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 UPD42 UPD42 INS40 UPD42 UPD42 INS40 UPD42 UPD42 INS40 MOV21 INS44 INS8 INS42 INS43 INS27 INS39 INS85 INS32 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS27 INS42 INS42 INS42 INS43 INS42 INS53 INS42 INS45 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV32 INS33 INS42 INS14 INS32 INS43 INS45 INS42 INS42 INS42 DEL42 DEL32 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL8 DEL40 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL14 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL40 DEL32 DEL7 DEL42 DEL42 DEL40 DEL32 DEL7 DEL52 DEL42 DEL22 DEL33 DEL32 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL40 DEL32 DEL14 DEL7 DEL21 DEL8 DEL8 DEL25