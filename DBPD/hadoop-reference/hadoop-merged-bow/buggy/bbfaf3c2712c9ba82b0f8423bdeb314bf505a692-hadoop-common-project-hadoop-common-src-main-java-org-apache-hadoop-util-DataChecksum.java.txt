HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.

-      String fileName, long basePos)
-  throws ChecksumException {
+      String fileName, long basePos) throws ChecksumException {
-      verifyChunkedSums(
-          data.array(), data.arrayOffset() + data.position(), data.remaining(),
-          checksums.array(), checksums.arrayOffset() + checksums.position(),
-          fileName, basePos);
+      final int dataOffset = data.arrayOffset() + data.position();
+      final int crcsOffset = checksums.arrayOffset() + checksums.position();
+      verifyChunked(type, summer, data.array(), dataOffset, data.remaining(),
+          bytesPerChecksum, checksums.array(), crcsOffset, fileName, basePos);
-      return;
+    } else {
+      verifyChunked(type, summer, data, bytesPerChecksum, checksums, fileName,
+          basePos);
-    
-    int startDataPos = data.position();
+  }
+
+  static void verifyChunked(final Type type, final Checksum algorithm,
+      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,
+      final String filename, final long basePos) throws ChecksumException {
+    final byte[] bytes = new byte[bytesPerCrc];
+    final int dataOffset = data.position();
+    final int dataLength = data.remaining();
-    checksums.mark();
+    crcs.mark();
+
-      byte[] buf = new byte[bytesPerChecksum];
-      byte[] sum = new byte[type.size];
-      while (data.remaining() > 0) {
-        int n = Math.min(data.remaining(), bytesPerChecksum);
-        checksums.get(sum);
-        data.get(buf, 0, n);
-        summer.reset();
-        summer.update(buf, 0, n);
-        int calculated = (int)summer.getValue();
-        int stored = (sum[0] << 24 & 0xff000000) |
-          (sum[1] << 16 & 0xff0000) |
-          (sum[2] << 8 & 0xff00) |
-          sum[3] & 0xff;
-        if (calculated != stored) {
-          long errPos = basePos + data.position() - startDataPos - n;
-          throw new ChecksumException(
-              "Checksum error: "+ fileName + " at "+ errPos +
-              " exp: " + stored + " got: " + calculated, errPos);
+      int i = 0;
+      for(final int n = dataLength - bytesPerCrc + 1; i < n; i += bytesPerCrc) {
+        data.get(bytes);
+        algorithm.reset();
+        algorithm.update(bytes, 0, bytesPerCrc);
+        final int computed = (int)algorithm.getValue();
+        final int expected = crcs.getInt();
+
+        if (computed != expected) {
+          long errPos = basePos + data.position() - dataOffset - bytesPerCrc;
+          throwChecksumException(type, algorithm, filename, errPos, expected,
+              computed);
+        }
+      }
+
+      final int remainder = dataLength - i;
+      if (remainder > 0) {
+        data.get(bytes, 0, remainder);
+        algorithm.reset();
+        algorithm.update(bytes, 0, remainder);
+        final int computed = (int)algorithm.getValue();
+        final int expected = crcs.getInt();
+
+        if (computed != expected) {
+          long errPos = basePos + data.position() - dataOffset - remainder;
+          throwChecksumException(type, algorithm, filename, errPos, expected,
+              computed);
-      checksums.reset();
+      crcs.reset();
-  
+
-  private void verifyChunkedSums(
-      byte[] data, int dataOff, int dataLen,
-      byte[] checksums, int checksumsOff, String fileName,
-      long basePos) throws ChecksumException {
-    if (type.size == 0) return;
+  static void verifyChunked(final Type type, final Checksum algorithm,
+      final byte[] data, final int dataOffset, final int dataLength,
+      final int bytesPerCrc, final byte[] crcs, final int crcsOffset,
+      final String filename, final long basePos) throws ChecksumException {
+    final int dataEnd = dataOffset + dataLength;
+    int i = dataOffset;
+    int j = crcsOffset;
+    for(final int n = dataEnd-bytesPerCrc+1; i < n; i += bytesPerCrc, j += 4) {
+      algorithm.reset();
+      algorithm.update(data, i, bytesPerCrc);
+      final int computed = (int)algorithm.getValue();
+      final int expected = ((crcs[j] << 24) + ((crcs[j + 1] << 24) >>> 8))
+          + (((crcs[j + 2] << 24) >>> 16) + ((crcs[j + 3] << 24) >>> 24));
-    if (NativeCrc32.isAvailable()) {
-      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,
-          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);
-      return;
-    }
-    
-    int remaining = dataLen;
-    int dataPos = 0;
-    while (remaining > 0) {
-      int n = Math.min(remaining, bytesPerChecksum);
-      
-      summer.reset();
-      summer.update(data, dataOff + dataPos, n);
-      dataPos += n;
-      remaining -= n;
-      
-      int calculated = (int)summer.getValue();
-      int stored = (checksums[checksumsOff] << 24 & 0xff000000) |
-        (checksums[checksumsOff + 1] << 16 & 0xff0000) |
-        (checksums[checksumsOff + 2] << 8 & 0xff00) |
-        checksums[checksumsOff + 3] & 0xff;
-      checksumsOff += 4;
-      if (calculated != stored) {
-        long errPos = basePos + dataPos - n;
-        throw new ChecksumException(
-            "Checksum error: "+ fileName + " at "+ errPos +
-            " exp: " + stored + " got: " + calculated, errPos);
+      if (computed != expected) {
+        final long errPos = basePos + i - dataOffset;
+        throwChecksumException(type, algorithm, filename, errPos, expected,
+            computed);
+    final int remainder = dataEnd - i;
+    if (remainder > 0) {
+      algorithm.reset();
+      algorithm.update(data, i, remainder);
+      final int computed = (int)algorithm.getValue();
+      final int expected = ((crcs[j] << 24) + ((crcs[j + 1] << 24) >>> 8))
+          + (((crcs[j + 2] << 24) >>> 16) + ((crcs[j + 3] << 24) >>> 24));
+
+      if (computed != expected) {
+        final long errPos = basePos + i - dataOffset;
+        throwChecksumException(type, algorithm, filename, errPos, expected,
+            computed);
+      }
+    }
+  }
+
+  private static void throwChecksumException(Type type, Checksum algorithm,
+      String filename, long errPos, int expected, int computed)
+          throws ChecksumException {
+    throw new ChecksumException("Checksum " + type
+        + " not matched for file " + filename + " at position "+ errPos
+        + String.format(": expected=%X but computed=%X", expected, computed)
+        + ", algorithm=" + algorithm.getClass().getSimpleName(), errPos);

INS31 INS31 INS31 INS8 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 INS44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 MOV29 INS83 INS39 INS42 INS44 INS44 MOV44 INS44 INS44 INS44 MOV44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 MOV43 INS8 MOV25 MOV25 MOV25 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 UPD42 INS83 UPD42 INS83 INS43 UPD42 INS83 UPD42 INS83 MOV60 MOV60 MOV60 MOV21 INS21 INS54 INS83 INS43 INS42 INS83 INS43 INS42 INS83 UPD42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 INS39 INS42 INS83 UPD42 INS83 INS39 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS42 INS60 INS60 INS60 INS24 INS60 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 MOV53 INS8 INS42 INS42 INS42 INS42 INS83 INS83 INS83 INS32 INS8 MOV8 INS42 INS42 INS42 INS83 INS39 INS59 INS39 INS59 INS39 INS59 INS58 INS27 INS7 INS7 INS8 INS83 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS60 INS60 INS21 UPD42 UPD42 INS42 MOV32 INS42 INS42 INS60 INS24 MOV60 INS25 INS42 INS27 INS42 INS42 INS42 INS42 INS83 INS39 INS59 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS34 MOV21 INS21 MOV60 MOV60 INS25 INS42 INS27 INS42 INS34 INS21 INS21 INS60 INS60 INS25 INS83 INS39 INS59 INS83 INS39 INS59 INS32 INS42 INS39 INS59 INS58 INS27 INS7 INS8 INS83 INS27 INS8 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS32 INS32 INS83 INS83 INS27 INS8 INS42 INS42 INS32 INS32 INS83 INS39 INS59 INS83 INS39 INS59 MOV27 INS8 UPD45 INS42 INS45 UPD42 UPD45 INS32 UPD45 INS32 INS42 MOV27 INS42 MOV27 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS83 INS39 INS59 INS42 INS42 INS42 INS42 INS21 INS21 INS21 MOV60 INS60 MOV25 INS42 INS27 UPD42 MOV42 MOV34 INS21 INS21 INS21 INS60 INS60 INS25 UPD42 INS27 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD27 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS27 UPD42 UPD42 MOV60 INS21 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS32 INS32 INS83 INS83 INS39 INS59 INS42 INS42 INS32 INS32 INS32 INS83 MOV39 INS59 INS83 INS39 INS59 INS27 INS8 INS42 INS42 INS36 INS36 INS83 INS39 INS59 INS32 INS39 INS32 INS36 INS36 INS83 INS32 INS42 INS42 INS27 INS34 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS34 INS42 UPD42 INS11 INS42 INS32 UPD42 UPD42 INS21 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS11 INS42 INS32 INS42 INS42 INS60 MOV21 UPD42 INS27 INS27 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS32 INS39 INS32 INS42 INS42 INS39 MOV59 MOV36 MOV36 MOV36 INS36 INS27 INS42 INS36 INS36 INS36 INS36 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS27 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS27 UPD27 UPD27 INS27 INS42 INS42 INS27 INS27 INS27 INS27 UPD42 UPD42 INS27 INS42 MOV2 MOV34 INS36 UPD34 INS36 UPD34 INS36 INS34 INS2 INS34 INS36 INS34 INS36 INS34 INS36 INS34 UPD42 INS27 INS42 UPD42 UPD42 INS27 INS27 INS27 INS42 INS42 INS27 INS27 INS27 INS42 INS32 MOV2 UPD34 MOV34 MOV2 UPD34 MOV34 MOV2 UPD34 MOV34 INS2 INS34 INS2 INS34 INS2 INS34 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS27 INS42 INS27 INS42 INS27 UPD42 UPD42 UPD42 INS42 INS34 INS42 INS34 INS42 INS34 DEL41 DEL42 DEL42 DEL32 DEL21 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL39 DEL42 DEL39 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL34 DEL2 DEL34 DEL27 DEL34 DEL27 DEL36 DEL42 DEL34 DEL2 DEL34 DEL27 DEL34 DEL27 DEL36 DEL42 DEL34 DEL2 DEL34 DEL27 DEL34 DEL27 DEL36 DEL42 DEL34 DEL2 DEL34 DEL27 DEL27 DEL59 DEL60 DEL8 DEL61 DEL8 DEL54 DEL8 DEL39 DEL39 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL42 DEL34 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL27 DEL34 DEL27 DEL27 DEL27 DEL27 DEL45 DEL42 DEL42 DEL40 DEL34 DEL27 DEL41 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL27 DEL60 DEL42 DEL42 DEL42 DEL27 DEL42 DEL32 DEL21 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL31