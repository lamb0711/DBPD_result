HADOOP-10561. Copy command with preserve option should handle Xattrs. Contributed by Yi Liu.

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602225 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.EnumSet;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.NoSuchElementException;
-  private boolean preserve = false;
-    this.preserve = preserve;
+    if (preserve) {
+      preserve(FileAttribute.TIMESTAMPS);
+      preserve(FileAttribute.OWNERSHIP);
+      preserve(FileAttribute.PERMISSION);
+    } else {
+      preserveStatus.clear();
+    }
+  }
+  
+  protected static enum FileAttribute {
+    TIMESTAMPS, OWNERSHIP, PERMISSION, XATTR;
+
+    public static FileAttribute getAttribute(char symbol) {
+      for (FileAttribute attribute : values()) {
+        if (attribute.name().charAt(0) == Character.toUpperCase(symbol)) {
+          return attribute;
+        }
+      }
+      throw new NoSuchElementException("No attribute for " + symbol);
+    }
+  }
+  
+  private EnumSet<FileAttribute> preserveStatus = 
+      EnumSet.noneOf(FileAttribute.class);
+  
+  /**
+   * Checks if the input attribute should be preserved or not
+   *
+   * @param attribute - Attribute to check
+   * @return boolean true if attribute should be preserved, false otherwise
+   */
+  private boolean shouldPreserve(FileAttribute attribute) {
+    return preserveStatus.contains(attribute);
+  }
+  
+  /**
+   * Add file attributes that need to be preserved. This method may be
+   * called multiple times to add attributes.
+   *
+   * @param fileAttribute - Attribute to add, one at a time
+   */
+  protected void preserve(FileAttribute fileAttribute) {
+    for (FileAttribute attribute : preserveStatus) {
+      if (attribute.equals(fileAttribute)) {
+        return;
+      }
+    }
+    preserveStatus.add(fileAttribute);
-      if(preserve) {
+      if (shouldPreserve(FileAttribute.TIMESTAMPS)) {
+      }
+      if (shouldPreserve(FileAttribute.OWNERSHIP)) {
+      }
+      if (shouldPreserve(FileAttribute.PERMISSION)) {
+      if (shouldPreserve(FileAttribute.XATTR)) {
+        Map<String, byte[]> srcXAttrs = src.fs.getXAttrs(src.path);
+        if (srcXAttrs != null) {
+          Iterator<Entry<String, byte[]>> iter = srcXAttrs.entrySet().iterator();
+          while (iter.hasNext()) {
+            Entry<String, byte[]> entry = iter.next();
+            target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());
+          }
+        }
+      }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS71 INS23 INS31 MOV29 INS83 INS39 INS42 MOV44 INS8 INS83 INS83 INS42 INS72 INS72 INS72 INS72 INS31 MOV83 INS74 INS59 INS29 INS83 INS39 INS42 INS44 INS8 INS29 UPD42 INS44 INS25 INS42 INS42 INS42 INS42 INS83 INS83 INS43 INS42 INS44 INS8 INS43 INS43 INS42 INS32 INS65 INS65 INS65 INS43 INS42 INS41 INS65 INS65 INS43 INS42 INS70 INS42 INS8 INS8 INS42 INS39 INS42 INS70 INS53 INS42 INS42 INS42 INS42 INS57 INS66 INS42 INS66 INS66 INS42 INS32 INS66 INS66 INS42 INS66 INS42 INS44 INS42 INS8 INS32 INS21 INS21 INS21 INS21 INS44 INS32 INS8 INS14 INS43 INS42 INS42 INS42 INS43 INS42 INS25 INS42 INS42 INS42 INS25 INS25 INS25 INS32 INS32 INS32 INS32 INS43 INS42 INS42 INS25 INS43 INS27 INS42 INS42 INS32 INS8 INS32 INS32 INS8 INS32 INS8 INS32 INS8 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS42 INS42 INS27 INS8 INS42 INS45 INS42 INS42 INS42 INS42 INS41 INS42 INS40 INS42 INS40 MOV21 INS42 INS40 MOV21 INS42 INS40 INS60 INS25 INS32 INS32 INS41 INS74 INS59 INS27 INS8 INS32 INS42 INS34 INS42 INS42 INS42 INS42 INS43 INS43 INS5 INS42 INS32 INS42 INS33 INS60 INS61 INS42 INS42 INS42 INS42 INS39 INS85 INS40 INS42 INS40 INS74 INS59 INS32 INS8 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS21 INS42 INS43 INS43 INS5 INS32 INS42 INS74 INS59 INS32 INS42 INS42 INS39 INS85 INS42 INS42 INS43 INS43 INS5 INS42 INS32 INS40 INS42 INS40 INS32 INS32 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL9 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42