HADOOP-9574. Added new methods in AbstractDelegationTokenSecretManager for helping YARN ResourceManager to reuse code for RM restart. Contributed by Jian He.


git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487692 13f79535-47bb-0310-9956-ffa450edef68

-  
+
+  // HDFS
-  
+
+  // HDFS
+  // RM
+  protected void storeNewMasterKey(DelegationKey key) throws IOException {
+    return;
+  }
+
+  // RM
+  protected void removeStoredMasterKey(DelegationKey key) {
+    return;
+  }
+
+  // RM
+  protected void storeNewToken(TokenIdent ident, long renewDate) {
+    return;
+  }
+  // RM
+  protected void removeStoredToken(TokenIdent ident) throws IOException {
+
+  }
+  // RM
+  protected void updateStoredToken(TokenIdent ident, long renewDate) {
+    return;
+  }
+
+  /**
+   * This method is intended to be used for recovering persisted delegation
+   * tokens
+   * @param identifier identifier read from persistent storage
+   * @param renewDate token renew time
+   * @throws IOException
+   */
+  public synchronized void addPersistedDelegationToken(
+      TokenIdent identifier, long renewDate) throws IOException {
+    if (running) {
+      // a safety check
+      throw new IOException(
+          "Can't add persisted delegation token to a running SecretManager.");
+    }
+    int keyId = identifier.getMasterKeyId();
+    DelegationKey dKey = allKeys.get(keyId);
+    if (dKey == null) {
+      LOG.warn("No KEY found for persisted identifier " + identifier.toString());
+      return;
+    }
+    byte[] password = createPassword(identifier.getBytes(), dKey.getKey());
+    if (identifier.getSequenceNumber() > this.delegationTokenSequenceNumber) {
+      this.delegationTokenSequenceNumber = identifier.getSequenceNumber();
+    }
+    if (currentTokens.get(identifier) == null) {
+      currentTokens.put(identifier, new DelegationTokenInformation(renewDate,
+          password));
+    } else {
+      throw new IOException(
+          "Same delegation token being added twice.");
+    }
+  }
+
+    storeNewMasterKey(newKey);
+        // ensure the tokens generated by this current key can be recovered
+        // with this current key after this current key is rolled
+        if(!e.getValue().equals(currentKey))
+          removeStoredMasterKey(e.getValue());
+    storeNewToken(identifier, now + tokenRenewInterval);
+    updateStoredToken(id, renewTime);
+    removeStoredToken(id);
+      removeStoredToken(ident);

INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS43 INS42 INS42 INS41 INS43 INS42 INS41 INS43 INS42 INS39 INS42 INS41 INS43 INS42 INS42 INS43 INS42 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS42 INS25 INS60 INS60 INS25 INS60 INS25 INS25 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS8 INS39 INS59 INS43 INS59 INS27 INS8 INS5 INS59 INS27 INS8 INS27 INS8 INS8 INS32 INS32 INS32 INS32 INS53 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS39 INS85 INS42 INS32 INS32 INS22 INS21 INS32 INS33 INS21 INS53 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS21 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS52 INS42 INS7 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS22 INS32 INS42 INS42 INS42 INS14 INS43 INS45 INS25 INS42 INS42 INS42 INS45 INS32 INS52 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS38 INS21 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42