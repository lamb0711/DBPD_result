JCR-3165 Consolidate compare behaviour for Value(s) and Comparable(s)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1209402 13f79535-47bb-0310-9956-ffa450edef68

-import static javax.jcr.PropertyType.DATE;
-import static javax.jcr.PropertyType.DECIMAL;
-import static javax.jcr.PropertyType.DOUBLE;
-import static javax.jcr.PropertyType.LONG;
+import java.util.Arrays;
-            int ta = a.getType();
-            int tb = b.getType();
-
-            if ((ta == DECIMAL || ta == DOUBLE || ta == LONG)
-                    && (tb == DECIMAL || tb == DOUBLE || tb == LONG)) {
-                return a.getDecimal().compareTo(b.getDecimal());
-            } else if (ta == DATE && tb == DATE) {
-                return a.getDate().compareTo(b.getDate());
-            } else {
-                return a.getString().compareTo(b.getString());
-            }
+            return Util.compare(a, b);
-            throw new RuntimeException(
-                    "Unable to compare values " + a + " and " + b, e);
+            throw new RuntimeException("Unable to compare values " + a
+                    + " and " + b, e);
+    public int compare(Value[] a, Value[] b) {
+        try {
+            return Util.compare(a, b);
+        } catch (RepositoryException e) {
+            throw new RuntimeException("Unable to compare values "
+                    + Arrays.toString(a) + " and " + Arrays.toString(b), e);
+        }
+    }
+
-            for (int i = 0; i < a.length; i++) {
-                for (int j = 0; j < b.length; j++) {
-                    if (compare(a[i], b[j]) == 0) {
-                        return true;
-                    }
-                }
-            }
+            return compare(a, b) == 0;
+        } else if (JCR_OPERATOR_GREATER_THAN.equals(operator)) {
+            return compare(a, b) > 0;
+        } else if (JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO.equals(operator)) {
+            return compare(a, b) >= 0;
+        } else if (JCR_OPERATOR_LESS_THAN.equals(operator)) {
+            return compare(a, b) < 0;
+        } else if (JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO.equals(operator)) {
+            return compare(a, b) <= 0;
+        } else if (JCR_OPERATOR_NOT_EQUAL_TO.equals(operator)) {
+            return compare(a, b) != 0;
-        return false; // FIXME
+        // TODO JCR_OPERATOR_LIKE
+        throw new IllegalArgumentException("Unknown comparison operator: "
+                + operator);
-
-}
+}
