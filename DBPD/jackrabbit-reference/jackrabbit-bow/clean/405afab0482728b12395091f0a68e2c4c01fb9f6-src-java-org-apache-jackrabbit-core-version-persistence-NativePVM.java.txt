- fixing deadlock in persistence version manager
- fixing issues with frozen version histories

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@122850 13f79535-47bb-0310-9956-ffa450edef68

+ * <p>
+ * todo: the persistence is not synchronized yet and could lead to multi-threading issues
+     * the nodetype name of a persistent frozen history
+     */
+    protected static final QName NT_REP_FROZEN_HISTORY = new QName(NamespaceRegistryImpl.NS_REP_URI, "frozenVersionHistory");
+
+    /**
-            idsByExternal.put(id.externalId, id);
-            idsByInternal.put(id.internalId, id);
+            synchronized(idsByExternal) {
+                idsByExternal.put(id.externalId, id);
+                idsByInternal.put(id.internalId, id);
+            }
-        return (PersistentId) idsByExternal.get(uuid);
+        synchronized(idsByExternal) {
+            return (PersistentId) idsByExternal.get(uuid);
+        }
-        PersistentId id = (PersistentId) idsByExternal.get(uuid);
-        return id != null && id.type == type ? id : null;
+        synchronized(idsByExternal) {
+            PersistentId id = (PersistentId) idsByExternal.get(uuid);
+            return id != null && id.type == type ? id : null;
+        }
-    public synchronized InternalVersionHistory createVersionHistory(NodeImpl node)
+    public InternalVersionHistory createVersionHistory(NodeImpl node)
-    public synchronized InternalVersionHistory getVersionHistory(String histId)
+    public InternalVersionHistory getVersionHistory(String histId)
-    public synchronized boolean hasVersionHistory(String histId) {
+    public boolean hasVersionHistory(String histId) {
-    public synchronized Iterator getVersionHistoryIds() throws RepositoryException {
+    public Iterator getVersionHistoryIds() throws RepositoryException {
-    public synchronized int getNumVersionHistories() throws RepositoryException {
+    public int getNumVersionHistories() throws RepositoryException {
-    public synchronized InternalVersion getVersion(String histId, String versionId)
+    public InternalVersion getVersion(String histId, String versionId)
-    public synchronized InternalVersion getVersion(String versionId)
+    public InternalVersion getVersion(String versionId)
-    public synchronized boolean hasVersion(String versionId) {
+    public boolean hasVersion(String versionId) {
-    public synchronized boolean hasItem(String externalId) {
+    public boolean hasItem(String externalId) {
-    public synchronized InternalVersionItem getItemByExternal(String externalId)
+    public InternalVersionItem getItemByExternal(String externalId)
-    public synchronized InternalVersionItem getItemByInternal(String internalId)
+    public InternalVersionItem getItemByInternal(String internalId)
-    synchronized private InternalVersionItem getItem(PersistentId pid)
+    private InternalVersionItem getItem(PersistentId pid)
-    public synchronized InternalVersion checkin(NodeImpl node) throws RepositoryException {
+    public InternalVersion checkin(NodeImpl node) throws RepositoryException {
-        private static final int TYPE_FROZEN_HISTORY = 3;
+        private static final int TYPE_FROZEN_HISTORY = 4;
-            } else if (state.getNodeTypeName().equals(NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD)) {
+            } else if (state.getNodeTypeName().equals(NT_REP_FROZEN_HISTORY)) {
