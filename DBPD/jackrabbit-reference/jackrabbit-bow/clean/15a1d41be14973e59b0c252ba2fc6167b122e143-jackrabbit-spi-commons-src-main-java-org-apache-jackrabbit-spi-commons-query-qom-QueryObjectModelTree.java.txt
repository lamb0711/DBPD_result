JCR-1104: JSR 283 support
- Implemented SameNode, ChildNode and DescendantNode
- Added test cases

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633394 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Name;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Arrays;
+import java.util.Iterator;
+    /**
+     * All selectors available in this query object model. Key=Name
+     */
+    private final Map selectors = new HashMap();
+
+        for (Iterator it = Arrays.asList(source.getSelectors()).iterator(); it.hasNext(); ) {
+            SelectorImpl selector = (SelectorImpl) it.next();
+            selectors.put(selector.getSelectorQName(), selector);
+        }
+        if (selectors.size() == 1) {
+            // there is only one selector, which is also a default selector
+            selectors.put(null, selectors.values().iterator().next());
+        }
+    /**
+     * Returns the selector with the given <code>name</code> or
+     * <code>null</code> if there is no selector with this name.
+     *
+     * @param name the name of a selector.
+     * @return the selector or <code>null</code> if there is no such selector.
+     */
+    public SelectorImpl getSelector(Name name) {
+        return (SelectorImpl) selectors.get(name);
+    }
+
-        // TODO: validate query
+        // TODO: validate query completely.
+        // checks currently implemented:
+        // - check for selector names
+        try {
+            accept(new DefaultTraversingQOMTreeVisitor() {
+                public Object visit(ChildNodeImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(ColumnImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(DescendantNodeImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(EquiJoinConditionImpl node, Object data)
+                        throws Exception {
+                    checkSelector(node.getSelector1QName());
+                    return checkSelector(node.getSelector2QName());
+                }
+
+                public Object visit(FullTextSearchImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(FullTextSearchScoreImpl node, Object data)
+                        throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(NodeLocalNameImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(NodeNameImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(PropertyExistenceImpl node, Object data)
+                        throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(PropertyValueImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(SameNodeImpl node, Object data) throws Exception {
+                    return checkSelector(node.getSelectorQName());
+                }
+
+                public Object visit(SameNodeJoinConditionImpl node, Object data)
+                        throws Exception {
+                    checkSelector(node.getSelector1QName());
+                    return checkSelector(node.getSelector2QName());
+                }
+
+                private Object checkSelector(Name selectorName)
+                        throws InvalidQueryException {
+                    if (!selectors.containsKey(selectorName)) {
+                        String msg = "Unknown selector: ";
+                        if (selectorName != null) {
+                            msg += QueryObjectModelTree.this.getJCRName(selectorName);
+                        } else {
+                            msg += "<default>";
+                        }
+                        throw new InvalidQueryException(msg);
+                    }
+                    return null;
+                }
+            }, null);
+        } catch (Exception e) {
+            throw new InvalidQueryException(e.getMessage());
+        }
