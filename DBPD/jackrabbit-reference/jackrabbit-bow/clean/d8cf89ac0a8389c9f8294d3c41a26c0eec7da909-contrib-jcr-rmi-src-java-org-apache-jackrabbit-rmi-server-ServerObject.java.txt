JCR-231: Avoid using the RangedIterator.getSize() method that might return -1.
Made some small cleanups in the getRemoteXxxArray methods.
Moved a part of the code from ServerQueryResult.getRows() up to ServerObject.getRemotRowArray() for consistency.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293078 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import javax.jcr.query.RowIterator;
+import org.apache.jackrabbit.rmi.remote.RemoteRow;
-        if (iterator == null) {
+        if (iterator != null) {
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(factory.getRemoteProperty(iterator.nextProperty()));
+            }
+            return (RemoteProperty[]) remotes.toArray(new RemoteProperty[remotes.size()]);
+        } else {
-
-        RemoteProperty[] remotes = new RemoteProperty[(int) iterator.getSize()];
-        for (int i = 0; iterator.hasNext(); i++) {
-            remotes[i] = factory.getRemoteProperty(iterator.nextProperty());
-        }
-        return remotes;
-            RemoteNode[] remotes = new RemoteNode[(int) iterator.getSize()];
-            for (int i = 0; iterator.hasNext(); i++) {
-                remotes[i] = getRemoteNode(iterator.nextNode());
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(getRemoteNode(iterator.nextNode()));
-            return remotes;
+            return (RemoteNode[]) remotes.toArray(new RemoteNode[remotes.size()]);
-            RemoteVersion[] remotes = new RemoteVersion[(int) iterator.getSize()];
-            for (int i = 0; iterator.hasNext(); i++) {
-                remotes[i] = factory.getRemoteVersion(iterator.nextVersion());
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(factory.getRemoteVersion(iterator.nextVersion()));
-            return remotes;
+            return (RemoteVersion[]) remotes.toArray(new RemoteVersion[remotes.size()]);
-            RemoteNodeType[] remotes =
-                new RemoteNodeType[(int) iterator.getSize()];
-            for (int i = 0; iterator.hasNext(); i++) {
-                remotes[i] = factory.getRemoteNodeType(iterator.nextNodeType());
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(factory.getRemoteNodeType(iterator.nextNodeType()));
-            return remotes;
+            return (RemoteNodeType[]) remotes.toArray(new RemoteNodeType[remotes.size()]);
+    /**
+     * Utility method for creating an array of remote references for
+     * local query result rows. The remote references are created using the
+     * remote adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty iterator.
+     *
+     * @param iterator local query result row iterator
+     * @return remote query result row array
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteRow[] getRemoteRowArray(RowIterator iterator)
+            throws RemoteException {
+        if (iterator != null) {
+            ArrayList remotes = new ArrayList();
+            while (iterator.hasNext()) {
+                remotes.add(getFactory().getRemoteRow(iterator.nextRow()));
+            }
+            return (RemoteRow[]) remotes.toArray(new RemoteRow[remotes.size()]);
+        } else {
+            return new RemoteRow[0]; // for safety
+        }
+    }
+
