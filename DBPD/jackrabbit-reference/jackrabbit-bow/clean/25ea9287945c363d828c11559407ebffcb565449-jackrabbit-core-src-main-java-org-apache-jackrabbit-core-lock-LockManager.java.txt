JCR-2183 - Provide overridables for lock checking
- Add public LockInfo class
- Make AbstractLockInfo package private
- Rename internal LockInfo classes to avoid confusion
- Add overridable in LockManagerImpl with default implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@790892 13f79535-47bb-0310-9956-ffa450edef68

-     * Returns <code>true</code> if the specified session holds a lock on the
-     * given node; otherwise returns <code>false</code>.
-     * <p/>
-     * Note that <code>isLockHolder(session, node)==true</code> implies
-     * <code>holdsLock(node)==true</code>.
-     * @param session session
-     * @param node node
-     * @return if the specified session holds a lock on the given node;
-     *         otherwise returns <code>false</code>
-     * @throws javax.jcr.RepositoryException If an exception occurs.
-     */
-    boolean isLockHolder(Session session, NodeImpl node) throws RepositoryException;
-
-    /**
+     * Returns <code>true</code> if the specified session is allowed to unlock
+     * the node; otherwise returns <code>false</code>.
+     * @param session session
+     * @param node node
+     * @return <code>true</code> if the session is allowed access to the node;
+     *         <code>false</code> otherwise
+     * @throws LockException if write access to the specified path is not allowed
+     * @throws RepositoryException if some other error occurs
+     */
+    void checkUnlock(Session session, NodeImpl node) 
+    		throws LockException, RepositoryException;
+    
+    /**
-    void lockTokenAdded(SessionImpl session, String lt) throws LockException, RepositoryException;
+    void addLockToken(SessionImpl session, String lt) throws LockException, RepositoryException;
-    void lockTokenRemoved(SessionImpl session, String lt) throws LockException, RepositoryException;
+    void removeLockToken(SessionImpl session, String lt) throws LockException, RepositoryException;
