JCR-422: Implement a backup tool

Clean search indexes in the backup repository

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776373 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.io.OutputStream;
-import org.apache.commons.io.IOUtils;
+import org.apache.commons.io.FileUtils;
-     * The target repository directory must not already exist. It will be
+     * The target repository directory should not already exist. It will be
-     * @throws IOException if the target directory can not be initialized
+     * @throws IOException if the target repository can not be initialized
-        if (!source.isDirectory()) {
-            throw new RepositoryException("Not a directory: " + source);
-        }
-
-        File sx = new File(source, "repository.xml");
-        if (!sx.isFile()) {
-            throw new RepositoryException(
-                    "Not a repository directory: " + source);
-        }
-
-        if (target.exists()) {
-            throw new RepositoryException("Target directory exists: " + target);
-        }
-        target.mkdirs();
-
-        File tx = new File(target, "repository.xml");
-        OutputStream output = new FileOutputStream(tx);
-        try {
-            InputStream input =
-                RepositoryImpl.class.getResourceAsStream("repository.xml");
-            try {
-                IOUtils.copy(input, output);
-            } finally {
-                input.close();
-            }
-        } finally {
-            output.close();
-        }
-
-        sourceConfig = RepositoryConfig.create(sx.getPath(), source.getPath());
-        targetConfig = RepositoryConfig.create(tx.getPath(), target.getPath());
+        this(RepositoryConfig.create(source), RepositoryConfig.install(target));
+
+            // Remove index directories to force re-indexing on next startup
+            // TODO: There should be a cleaner way to do this
+            File targetDir = new File(targetConfig.getHomeDir());
+            File repoDir = new File(targetDir, "repository");
+            FileUtils.deleteQuietly(new File(repoDir, "index"));
+            File[] workspaces = new File(targetDir, "workspaces").listFiles();
+            if (workspaces != null) {
+                for (File workspace : workspaces) {
+                    FileUtils.deleteQuietly(new File(workspace, "index"));
+                }
+            }
