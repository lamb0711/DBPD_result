JCR-3165 Consolidate compare behaviour for Value(s) and Comparable(s)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1209402 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Fieldable;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.IndexReader;
-import org.apache.jackrabbit.core.value.InternalValue;
-import org.slf4j.LoggerFactory;
-import org.slf4j.Logger;
-
-import java.util.regex.Pattern;
+import java.util.regex.Pattern;
+import javax.jcr.RepositoryException;
-import javax.jcr.RepositoryException;
+
+import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Fieldable;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.Query;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-     *
-     * @param old the document to dispose.
+     * 
+     * @param old
+     *            the document to dispose.
-     *
-     * @param doc the document to check.
+     * 
+     * @param doc
+     *            the document to check.
-     *
-     * @param name    the property name.
-     * @param version the index format version.
+     * 
+     * @param name
+     *            the property name.
+     * @param version
+     *            the index format version.
-    public static Query createMatchAllQuery(
-            String name, IndexFormatVersion version, PerQueryCache cache) {
+    public static Query createMatchAllQuery(String name,
+            IndexFormatVersion version, PerQueryCache cache) {
-            return new JackrabbitTermQuery(new Term(FieldNames.PROPERTIES_SET, name));
+            return new JackrabbitTermQuery(new Term(FieldNames.PROPERTIES_SET,
+                    name));
-     *
-     * @param t the cause.
+     * 
+     * @param t
+     *            the cause.
-     *
-     * @param reader the index reader to close or release.
-     * @throws IOException if an error occurs while closing or releasing the
-     *                     index reader.
+     * 
+     * @param reader
+     *            the index reader to close or release.
+     * @throws IOException
+     *             if an error occurs while closing or releasing the index
+     *             reader.
-     *
-     * @param value an internal value.
+     * 
+     * @param value
+     *            an internal value.
-     * @throws RepositoryException if retrieving the <code>Comparable</code> fails.
+     * @throws RepositoryException
+     *             if retrieving the <code>Comparable</code> fails.
-    public static Comparable getComparable(InternalValue value) throws RepositoryException {
+    public static Comparable getComparable(InternalValue value)
+            throws RepositoryException {
-            case PropertyType.BINARY:
-                return null;
-            case PropertyType.BOOLEAN:
-                return value.getBoolean();
-            case PropertyType.DATE:
-                return value.getDate().getTimeInMillis();
-            case PropertyType.DOUBLE:
-                return value.getDouble();
-            case PropertyType.LONG:
-                return value.getLong();
-            case PropertyType.DECIMAL:
-                return value.getDecimal();
-            case PropertyType.NAME:
-                return value.getName().toString();
-            case PropertyType.PATH:
-                return value.getPath().toString();
-            case PropertyType.URI:
-            case PropertyType.WEAKREFERENCE:
-            case PropertyType.REFERENCE:
-            case PropertyType.STRING:
-                return value.getString();
-            default:
-                return null;
+        case PropertyType.BINARY:
+            return null;
+        case PropertyType.BOOLEAN:
+            return value.getBoolean();
+        case PropertyType.DATE:
+            return value.getDate().getTimeInMillis();
+        case PropertyType.DOUBLE:
+            return value.getDouble();
+        case PropertyType.LONG:
+            return value.getLong();
+        case PropertyType.DECIMAL:
+            return value.getDecimal();
+        case PropertyType.NAME:
+            return value.getName().toString();
+        case PropertyType.PATH:
+            return value.getPath().toString();
+        case PropertyType.URI:
+        case PropertyType.WEAKREFERENCE:
+        case PropertyType.REFERENCE:
+        case PropertyType.STRING:
+            return value.getString();
+        default:
+            return null;
-     *
-     * @param value an internal value.
+     * 
+     * @param value
+     *            an internal value.
-     * @throws ValueFormatException if the given <code>value</code> cannot be
-     *                              converted into a comparable (i.e.
-     *                              unsupported type).
-     * @throws RepositoryException  if an error occurs while converting the
-     *                              value.
+     * @throws ValueFormatException
+     *             if the given <code>value</code> cannot be converted into a
+     *             comparable (i.e. unsupported type).
+     * @throws RepositoryException
+     *             if an error occurs while converting the value.
-            case PropertyType.BOOLEAN:
-                return value.getBoolean();
-            case PropertyType.DATE:
-                return value.getDate().getTimeInMillis();
-            case PropertyType.DOUBLE:
-                return value.getDouble();
-            case PropertyType.LONG:
-                return value.getLong();
-            case PropertyType.DECIMAL:
-                return value.getDecimal();
-            case PropertyType.NAME:
-            case PropertyType.PATH:
-            case PropertyType.URI:
-            case PropertyType.WEAKREFERENCE:
-            case PropertyType.REFERENCE:
-            case PropertyType.STRING:
-                return value.getString();
-            default:
-                throw new RepositoryException("Unsupported type: "
-                        + PropertyType.nameFromValue(value.getType()));
+        case PropertyType.BOOLEAN:
+            return value.getBoolean();
+        case PropertyType.DATE:
+            return value.getDate().getTimeInMillis();
+        case PropertyType.DOUBLE:
+            return value.getDouble();
+        case PropertyType.LONG:
+            return value.getLong();
+        case PropertyType.DECIMAL:
+            return value.getDecimal();
+        case PropertyType.NAME:
+        case PropertyType.PATH:
+        case PropertyType.URI:
+        case PropertyType.WEAKREFERENCE:
+        case PropertyType.REFERENCE:
+        case PropertyType.STRING:
+            return value.getString();
+        default:
+            throw new RepositoryException("Unsupported type: "
+                    + PropertyType.nameFromValue(value.getType()));
-     * Compares values <code>c1</code> and <code>c2</code>. If the
-     * values have differing types, then the order is defined on
-     * the type itself by calling <code>compareTo()</code> on the respective
-     * type class names.
-     *
-     * @param c1 the first value.
-     * @param c2 the second value.
+     * Compares values <code>c1</code> and <code>c2</code>. If the values have
+     * differing types, then the order is defined on the type itself by calling
+     * <code>compareTo()</code> on the respective type class names.
+     * 
+     * @param c1
+     *            the first value.
+     * @param c2
+     *            the second value.
-     *         <code>c2</code><br> a positive integer if <code>c1</code>
-     *         should come after <code>c2</code><br> <code>0</code> if they
-     *         are equal.
+     *         <code>c2</code><br>
+     *         a positive integer if <code>c1</code> should come after
+     *         <code>c2</code><br>
+     *         <code>0</code> if they are equal.
-     * Compares two arrays of comparables.
+     * Compares two arrays of Comparable(s) in the same style as
+     * {@link #compare(Value[], Value[])}.
+     * 
+     * The 2 methods *have* to work in the same way for the sort to be
+     * consistent
+     * Compares two arrays of Value(s) in the same style as
+     * {@link #compare(Comparable[], Comparable[])}.
+     * 
+     * The 2 methods *have* to work in the same way for the sort to be
+     * consistent
+     */
+    public static int compare(Value[] a, Value[] b) throws RepositoryException {
+        if (a == null) {
+            return -1;
+        }
+        if (b == null) {
+            return 1;
+        }
+        for (int i = 0; i < a.length && i < b.length; i++) {
+            int d = compare(a[i], b[i]);
+            if (d != 0) {
+                return d;
+            }
+        }
+        return a.length - b.length;
+    }
+
+    /**
-     *
-     * @param v1 the first value.
-     * @param v2 the second value.
+     * 
+     * @param v1
+     *            the first value.
+     * @param v2
+     *            the second value.
-     * @throws ValueFormatException if the given <code>value</code> cannot be
-     *                              converted into a comparable (i.e.
-     *                              unsupported type).
-     * @throws RepositoryException  if an error occurs while converting the
-     *                              value.
+     * @throws ValueFormatException
+     *             if the given <code>value</code> cannot be converted into a
+     *             comparable (i.e. unsupported type).
+     * @throws RepositoryException
+     *             if an error occurs while converting the value.
-    public static int compare(Value v1, Value v2)
-            throws ValueFormatException, RepositoryException {
+    public static int compare(Value v1, Value v2) throws ValueFormatException,
+            RepositoryException {
-            case PropertyType.BOOLEAN:
-                c2 = v2.getBoolean();
-                break;
-            case PropertyType.DATE:
-                c2 = v2.getDate().getTimeInMillis();
-                break;
-            case PropertyType.DOUBLE:
-                c2 = v2.getDouble();
-                break;
-            case PropertyType.LONG:
-                c2 = v2.getLong();
-                break;
-            case PropertyType.DECIMAL:
-                c2 = v2.getDecimal();
-                break;
-            case PropertyType.NAME:
-                if (v2.getType() == PropertyType.URI) {
-                    String s = v2.getString();
-                    if (s.startsWith("./")) {
-                        s = s.substring(2);
-                    }
-                    // need to decode
-                    try {
-                        c2 = URLDecoder.decode(s, "UTF-8");
-                    } catch (UnsupportedEncodingException e) {
-                        throw new RepositoryException(e);
-                    }
-                } else {
-                    c2 = v2.getString();
+        case PropertyType.BOOLEAN:
+            c2 = v2.getBoolean();
+            break;
+        case PropertyType.DATE:
+            c2 = v2.getDate().getTimeInMillis();
+            break;
+        case PropertyType.DOUBLE:
+            c2 = v2.getDouble();
+            break;
+        case PropertyType.LONG:
+            c2 = v2.getLong();
+            break;
+        case PropertyType.DECIMAL:
+            c2 = v2.getDecimal();
+            break;
+        case PropertyType.NAME:
+            if (v2.getType() == PropertyType.URI) {
+                String s = v2.getString();
+                if (s.startsWith("./")) {
+                    s = s.substring(2);
-                break;
-            case PropertyType.PATH:
-            case PropertyType.REFERENCE:
-            case PropertyType.WEAKREFERENCE:
-            case PropertyType.URI:
-            case PropertyType.STRING:
+                // need to decode
+                try {
+                    c2 = URLDecoder.decode(s, "UTF-8");
+                } catch (UnsupportedEncodingException e) {
+                    throw new RepositoryException(e);
+                }
+            } else {
-                break;
-            default:
-                throw new RepositoryException("Unsupported type: "
-                        + PropertyType.nameFromValue(v2.getType()));
+            }
+            break;
+        case PropertyType.PATH:
+        case PropertyType.REFERENCE:
+        case PropertyType.WEAKREFERENCE:
+        case PropertyType.URI:
+        case PropertyType.STRING:
+            c2 = v2.getString();
+            break;
+        default:
+            throw new RepositoryException("Unsupported type: "
+                    + PropertyType.nameFromValue(v2.getType()));
-     *
-     * @param likePattern the pattern.
+     * 
+     * @param likePattern
+     *            the pattern.
-                            case '_':
-                                regexp.append('.');
-                                break;
-                            case '%':
-                                regexp.append(".*");
-                                break;
-                            default:
-                                regexp.append('\\').append(likePattern.charAt(i));
+                        case '_':
+                            regexp.append('.');
+                            break;
+                        case '%':
+                            regexp.append(".*");
+                            break;
+                        default:
+                            regexp.append('\\').append(likePattern.charAt(i));
-     *
-     * @param value a value.
+     * 
+     * @param value
+     *            a value.
