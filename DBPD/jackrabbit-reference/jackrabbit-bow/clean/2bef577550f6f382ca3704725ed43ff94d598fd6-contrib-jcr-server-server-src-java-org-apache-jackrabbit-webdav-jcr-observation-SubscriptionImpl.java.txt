JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
-import org.apache.jackrabbit.webdav.DavResourceLocator;
-import org.apache.jackrabbit.webdav.DavConstants;
-import org.apache.jackrabbit.webdav.observation.*;
-import org.apache.jackrabbit.webdav.util.XmlUtil;
-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.DavResourceLocator;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.observation.EventBundle;
+import org.apache.jackrabbit.webdav.observation.EventDiscovery;
+import org.apache.jackrabbit.webdav.observation.EventType;
+import org.apache.jackrabbit.webdav.observation.Filter;
+import org.apache.jackrabbit.webdav.observation.ObservationConstants;
+import org.apache.jackrabbit.webdav.observation.ObservationResource;
+import org.apache.jackrabbit.webdav.observation.Subscription;
+import org.apache.jackrabbit.webdav.observation.SubscriptionInfo;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.log4j.Logger;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
-import javax.jcr.observation.*;
-import javax.jcr.observation.EventListener;
-import java.util.*;
+import javax.jcr.observation.Event;
+import javax.jcr.observation.EventIterator;
+import javax.jcr.observation.EventListener;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+    private long expirationTime;
-     * for the {@link org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery} webdav property that in included
-     * in the response body of a sucessful SUBSCRIBE request or as part of a
-     * PROPFIND response.
+     * for the {@link org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery}
+     * webdav property that in included in the response body of a sucessful SUBSCRIBE
+     * request or as part of a PROPFIND response.
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
-    public Element toXml() {
-        Element subscr = new Element(XML_SUBSCRIPTION, NAMESPACE);
-        Element[] elems = info.toXml();
-        for (int i = 0; i < elems.length; i++) {
-            subscr.addContent(elems[i]);
-        }
+    public Element toXml(Document document) {
+        Element subscr = DomUtil.createElement(document, XML_SUBSCRIPTION, NAMESPACE);
-        Element id = new Element(XML_SUBSCRIPTIONID);
-        id.addContent(XmlUtil.hrefToXml(subscriptionId));
-        subscr.addContent(id);
+        subscr.appendChild(info.toXml(document));
+        subscr.appendChild(DomUtil.depthToXml(info.isDeep(), document));
+        subscr.appendChild(DomUtil.timeoutToXml(info.getTimeOut(), document));
+
+        Element id = DomUtil.addChildElement(subscr, XML_SUBSCRIPTIONID, NAMESPACE);
+        id.appendChild(DomUtil.hrefToXml(subscriptionId, document));
+    //--------------------------------------------< implementation specific >---
-        if (timeout == DavConstants.UNDEFINED_TIMEOUT) {
-            info.setTimeOut(DEFAULT_TIMEOUT);
+        if (timeout <= 0) {
+            timeout = DEFAULT_TIMEOUT;
+        expirationTime = System.currentTimeMillis() + timeout;
-    int getEventTypes() {
-        Iterator xmlTypes = info.getEventTypes().iterator();
-        int eventTypes = 0;
-        while (xmlTypes.hasNext()) {
-            eventTypes |= nametoTypeConstant(((Element)xmlTypes.next()).getName());
+    int getEventTypes() throws DavException {
+        EventType[] eventTypes = info.getEventTypes();
+        int events = 0;
+        for (int i = 0; i < eventTypes.length; i++) {
+            events |= getEventType(eventTypes[i].getName());
-        return eventTypes;
+        return events;
-        return info.getFilters(XML_UUID);
+        return getFilterValues(XML_UUID);
-        return info.getFilters(XML_NODETYPE_NAME);
+        return getFilterValues(XML_NODETYPE_NAME);
+    }
+
+    private String[] getFilterValues(String filterLocalName) {
+        Filter[] filters = info.getFilters(filterLocalName, NAMESPACE);
+        List values = new ArrayList();
+        for (int i = 0; i < filters.length; i++) {
+            String val = filters[i].getValue();
+            if (val != null) {
+                values.add(val);
+            }
+        }
+        return (values.size() > 0) ? (String[])values.toArray(new String[values.size()]) : null;
-        return System.currentTimeMillis() > info.getTimeOut() + System.currentTimeMillis();
+        return System.currentTimeMillis() > expirationTime;
-            ed.addEventBundle(eb.toXml());
+            ed.addEventBundle(eb);
-            eventBundles.add(new EventBundle(events));
+            eventBundles.add(new EventBundleImpl(events));
-     * @param jcrEventType
+     * @param eventType The jcr event type
-    static Element typeConstantToXml(int jcrEventType) {
+    private static String getEventName(int eventType) {
-        switch (jcrEventType) {
+        switch (eventType) {
-        return new Element(eventName, NAMESPACE);
+        return eventName;
-     * @param eventTypeName
+     * @param eventName
-     * @throws IllegalArgumentException if the given element cannot be translated
+     * @throws DavException if the given element cannot be translated
-    static int nametoTypeConstant(String eventTypeName) {
+    private static int getEventType(String eventName) throws DavException {
-        if (EVENT_NODEADDED.equals(eventTypeName)) {
+        if (EVENT_NODEADDED.equals(eventName)) {
-        } else if (EVENT_NODEREMOVED.equals(eventTypeName)) {
+        } else if (EVENT_NODEREMOVED.equals(eventName)) {
-        } else if (EVENT_PROPERTYADDED.equals(eventTypeName)) {
+        } else if (EVENT_PROPERTYADDED.equals(eventName)) {
-        } else if (EVENT_PROPERTYCHANGED.equals(eventTypeName)) {
+        } else if (EVENT_PROPERTYCHANGED.equals(eventName)) {
-        } else if (EVENT_PROPERTYREMOVED.equals(eventTypeName)) {
+        } else if (EVENT_PROPERTYREMOVED.equals(eventName)) {
-            throw new IllegalArgumentException("Invalid event type: "+eventTypeName);
+            throw new DavException(DavServletResponse.SC_UNPROCESSABLE_ENTITY, "Invalid event type: "+eventName);
-    private class EventBundle {
+    private class EventBundleImpl implements EventBundle {
-        private EventBundle(EventIterator events) {
+        private EventBundleImpl(EventIterator events) {
-        private Element toXml() {
-            Element bundle = new Element(XML_EVENTBUNDLE, NAMESPACE);
+        public Element toXml(Document document) {
+            Element bundle = DomUtil.createElement(document, XML_EVENTBUNDLE, NAMESPACE);
-
-                Element eventElem = new Element(XML_EVENT, NAMESPACE);
+                Element eventElem = DomUtil.addChildElement(bundle, XML_EVENT, NAMESPACE);
-                eventElem.addContent(XmlUtil.hrefToXml(eHref));
+                eventElem.appendChild(DomUtil.hrefToXml(eHref, document));
-                Element eType = new Element(XML_EVENTTYPE, NAMESPACE).addContent(typeConstantToXml(event.getType()));
-                eventElem.addContent(eType);
+                Element eType = DomUtil.addChildElement(eventElem, XML_EVENTTYPE, NAMESPACE);
+                DomUtil.addChildElement(eType, getEventName(event.getType()), NAMESPACE);
-                Element eUserId = new Element(XML_EVENTUSERID, NAMESPACE).setText(event.getUserID());
-                eventElem.addContent(eUserId);
+                DomUtil.addChildElement(eventElem, XML_EVENTUSERID, NAMESPACE, event.getUserID());
+
