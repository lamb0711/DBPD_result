JCR-3729 - S3 Datastore optimizations


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1577127 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-
-
+import java.util.Set;
-     * @param store {@link CachingDataStore}
-     * @param homeDir path of repository home dir.
-     * @param config path of config property file.
+     * @param store
+     *            {@link CachingDataStore}
+     * @param homeDir
+     *            path of repository home dir.
+     * @param config
+     *            path of config property file.
-     * @param identifier identifier of record.
+     * @param identifier
+     *            identifier of record.
-     * @throws DataStoreException if record not found or any error.
+     * @throws DataStoreException
+     *             if record not found or any error.
-     * @param identifier identifier of record.
+     * @param identifier
+     *            identifier of record.
-     * @throws DataStoreException if record not found or any error.
+     * @throws DataStoreException
+     *             if record not found or any error.
-     * @param identifier identifier of record.
+     * @param identifier
+     *            identifier of record.
-     * @throws DataStoreException if record not found or any error.
+     * @throws DataStoreException
+     *             if record not found or any error.
-     * @param identifier key of the file 
-     * @param file file that would be stored in backend.
-     * @throws DataStoreException for any error.
+     * @param identifier
+     *            key of the file
+     * @param file
+     *            file that would be stored in backend.
+     * @throws DataStoreException
+     *             for any error.
-     * Returns identifiers of all records that exists in backend. 
+     * Write file to backend in asynchronous mode. Backend implmentation may
+     * choose not to write asynchronously but it requires to call
+     * {@link AsyncUploadCallback#call(DataIdentifier, File, com.day.crx.cloud.s3.ds.AsyncUploadCallback.RESULT)}
+     * after upload succeed or failed.
+     * 
+     * @param identifier
+     * @param file
+     * @param callback
+     *            Callback interface to called after upload succeed or failed.
+     * @throws DataStoreException
+     */
+    void writeAsync(DataIdentifier identifier, File file,
+            AsyncUploadCallback callback) throws DataStoreException;
+
+    /**
+     * Returns identifiers of all records that exists in backend.
+     * 
-     * Update timestamp of record identified by identifier if minModifiedDate is
-     * greater than record's lastModified else no op.
+     * This method check the existence of record in backend. Return true if
+     * records exists else false. This method also touch record identified by
+     * identifier if touch is true.
-     * @throws DataStoreException if record not found.
+     * @param identifier
+     * @throws DataStoreException
-    void touch(DataIdentifier identifier, long minModifiedDate)
+    boolean exists(DataIdentifier identifier, boolean touch)
+
-     * This method check the existence of record in backend. 
-     * @param identifier identifier to be checked. 
+     * This method check the existence of record in backend.
+     * 
+     * @param identifier
+     *            identifier to be checked.
+     * 
+     * 
-     * @return list of identifiers which are deleted. 
+     * @return {@link Set} of identifiers which are deleted.
-    List<DataIdentifier> deleteAllOlderThan(long timestamp) throws DataStoreException;
+    Set<DataIdentifier> deleteAllOlderThan(long timestamp)
+            throws DataStoreException;
+     * 
+
