improved handling of (potentially large) binary data on import

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@345037 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.TransientFileFactory;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileInputStream;
-     * @throws javax.jcr.ValueFormatException
+     * @throws ValueFormatException
-     * @throws javax.jcr.ValueFormatException
+     * @throws ValueFormatException
-     * @throws javax.jcr.ValueFormatException
+     * @throws ValueFormatException
-     * @throws javax.jcr.ValueFormatException
+     * @throws ValueFormatException
-     * <code>{@link javax.jcr.Value#getString()}</code> will be used.
+     * <code>{@link Value#getString()}</code> will be used.
-     * @throws javax.jcr.RepositoryException   if an error occured during the serialization.
+     * @throws RepositoryException   if an error occured during the serialization.
-     * <code>{@link javax.jcr.Value#getString()}</code> will be used for
-     * serialization.
+     * <code>{@link Value#getString()}</code> will be used for serialization.
-     * @throws java.io.IOException           if an i/o error occured during the
+     * @throws IOException           if an i/o error occured during the
-     * @throws javax.jcr.RepositoryException   if an error occured during the serialization.
+     * @throws RepositoryException   if an error occured during the serialization.
-     * @throws javax.jcr.ValueFormatException if the string data is not of the required
+     * @throws ValueFormatException if the string data is not of the required
-     * @throws javax.jcr.RepositoryException  if an error occured during the
+     * @throws RepositoryException  if an error occured during the
-     * @throws java.io.IOException          if an i/o error occured during the
+     * @throws IOException          if an i/o error occured during the
-     * @throws javax.jcr.ValueFormatException if the string data is not of the required
+     * @throws ValueFormatException if the string data is not of the required
-     * @throws javax.jcr.RepositoryException  if an error occured during the
+     * @throws RepositoryException  if an error occured during the
-/*
-            // @todo decode to temp file and pass FileInputStream to BinaryValue constructor
-            File tmpFile = File.createTempFile("bin", null);
+
+            // decode to temp file
+            TransientFileFactory fileFactory = TransientFileFactory.getInstance();
+            final File tmpFile = fileFactory.createTransientFile("bin", null, null);
-            tmpFile.deleteOnExit();
-            Base64.decode(reader, out);
-            out.close();
-            return new BinaryValue(new FileInputStream(tmpFile));
-*/
-            ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            Base64.decode(reader, baos);
-            // no need to close ByteArrayOutputStream
-            //baos.close();
-            return new BinaryValue(baos.toByteArray());
+            try {
+                Base64.decode(reader, out);
+            } finally {
+                out.close();
+            }
+
+            // create an InputStream that keeps a hard reference to the temp file
+            // in order to prevent its automatic deletion once the associated
+            // File object is reclaimed by the garbage collector;
+            // pass InputStream to BinaryValue constructor
+            return new BinaryValue(new InputStream() {
+                File f = tmpFile;
+                InputStream in = new FileInputStream(f);
+
+                public int available() throws IOException {
+                    return in.available();
+                }
+
+                public void close() throws IOException {
+                    in.close();
+                    // now it's safe to prepare temp file to be gc'ed
+                    f = null;
+                }
+
+                public synchronized void mark(int readlimit) {
+                    in.mark(readlimit);
+                }
+
+                public boolean markSupported() {
+                    return in.markSupported();
+                }
+
+                public int read(byte b[]) throws IOException {
+                    return in.read(b);
+                }
+
+                public int read(byte b[], int off, int len) throws IOException {
+                    return in.read(b, off, len);
+                }
+
+                public synchronized void reset() throws IOException {
+                    in.reset();
+                }
+
+                public long skip(long n) throws IOException {
+                    return in.skip(n);
+                }
+
+                public int read() throws IOException {
+                    return in.read();
+                }
+            });
