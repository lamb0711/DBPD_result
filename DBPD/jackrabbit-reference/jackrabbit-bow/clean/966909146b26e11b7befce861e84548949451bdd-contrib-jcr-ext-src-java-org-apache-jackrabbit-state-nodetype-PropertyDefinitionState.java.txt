JCR-EXT: Cleanups and improvements for the simple node type state implementation.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@328809 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-import java.util.Vector;
-
-    private int requiredType;
-
-    /** List of value constraint strings. */
-    private List valueConstraints;
+    private int requiredType = PropertyType.UNDEFINED;
-    private boolean multiple;
-
-    /** Creates an empty property definition state instance. */
-    public PropertyDefinitionState() {
-        super();
-        requiredType = PropertyType.UNDEFINED;
-        valueConstraints = new Vector();
-        multiple = false;
-    }
+    private boolean multiple = false;
-     * Returns the property value constraint strings. The returned
-     * array can be modified freely as it is freshly instantiated and
-     * not a part of the property definition state.
-     *
-     * @return value constraints
-     */
-    public String[] getValueConstraints() {
-        return (String[])
-            valueConstraints.toArray(new String[valueConstraints.size()]);
-    }
-
-    /**
-     * Adds a constraint string to the list of property value constraints.
-     *
-     * @param constraint constraint string
-     */
-    public void addValueConstraints(String constraint) {
-        valueConstraints.add(constraint);
-    }
-
-    /**
+    public boolean equals(Object object) {
+        if (this == object) {
+            return true;
+        } else if (object instanceof PropertyDefinitionState) {
+            PropertyDefinitionState that = (PropertyDefinitionState) object;
+            return super.equals(that)
+                && this.multiple == that.multiple
+                && this.requiredType == that.requiredType;
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        int code = super.hashCode();
+        code = code * 17 + (multiple ? 1 : 0);
+        code = code * 17 + requiredType;
+        return code;
+    }
+
