JCR-2744: Avoid element arrays in PathImpl

Get rid of separate Path.Element objects by making AbstractPath implement both Path and Path.Element

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@997384 13f79535-47bb-0310-9956-ffa450edef68

-    private final Element element;
+    /**
+     * Name of the last path element.
+     */
+    private final Name name;
-    public NamePath(Path parent, Element element) {
+    /**
+     * Optional index of the last path element. Set to
+     * {@link Path#INDEX_UNDEFINED} if not explicitly specified,
+     * otherwise contains the 1-based index.
+     */
+    private final int index;
+
+    public NamePath(Path parent, Name name, int index) {
-        assert element.denotesName();
-        this.element = element;
+        assert name != null;
+        assert index >= 0;
+        this.name = name;
+        this.index = index;
+    protected String getElementString() {
+        if (index > Path.INDEX_DEFAULT) {
+            return name + "[" + index + "]";
+        } else {
+            return name.toString();
+        }
+    }
+
-        return element.getName();
+        return name;
-        return element.getIndex();
+        return index;
-        return element.getNormalizedIndex();
+        if (index != INDEX_UNDEFINED) {
+            return index;
+        } else {
+            return INDEX_DEFAULT;
+        }
-            return new NamePath(normalized, element);
+            return new NamePath(normalized, name, index);
-            return new NamePath(parent.getCanonicalPath(), element);
+            return new NamePath(parent.getCanonicalPath(), name, index);
-    public Element getNameElement() {
-        return element;
-    }
-
-    public Path getLastElement() {
-        return new NamePath(null, element);
-    }
-
-    public String getString() {
+    public AbstractPath getLastElement() {
-            return parent.getString() + Path.DELIMITER + element.getString();
+            return new NamePath(null, name, index);
-            return element.getString();
+            return this;
-                && element.equals(path.getNameElement()) 
+                && name.equals(path.getName())
+                && getNormalizedIndex() == path.getNormalizedIndex()
-        return super.hashCode() * 37 + element.hashCode();
+        return super.hashCode() * 37 + name.hashCode() + getNormalizedIndex();
