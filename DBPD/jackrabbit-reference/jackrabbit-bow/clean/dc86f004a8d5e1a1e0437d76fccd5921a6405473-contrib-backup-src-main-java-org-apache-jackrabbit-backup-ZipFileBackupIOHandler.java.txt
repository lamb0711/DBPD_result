JCR-442: Committed Nicolas' latest contrib/backup changes (patch-backup-060728.txt) with some modifications.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@426435 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Array;
+import java.util.zip.CRC32;
+import java.util.zip.CheckedInputStream;
+import java.util.zip.Checksum;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+    
+    private static int BUFFER_SIZE = 1024;
-    int maxFileSize;
-    File zip;
-    FileInputStream fin;
-    FileChannel fc;
-    private ByteBuffer buffer;
-	private FileOutputStream fout;
-
-	
-	public ZipFileBackupIOHandler(String zipFile) {
-		this.zip = new File(zipFile);
-        this.buffer = ByteBuffer.allocateDirect(2048);        
-	}
-
-	public void setMaxFileSize(int i) {
-		this.maxFileSize = i;
+    private File zip;
+  //  private FileInputStream fin;
+ //   private ByteBuffer buffer;
+    private FileOutputStream fout;
+    private ZipOutputStream zipOut;
+    
+    
+    public ZipFileBackupIOHandler(String zipFile) throws FileNotFoundException {
+        this.zip = new File(zipFile);
+      //  this.buffer = ByteBuffer.allocateDirect(2048);        
-    public int getMaxFileSize() {
-        return this.maxFileSize;
-    }
-
-    public void close() {
-        // TODO Auto-generated method stub
-        
+    public void close() throws IOException {
+        zipOut.finish();
+        zipOut.close();    
-    public void init() {
+  ///  private void init() {
-        this.buffer.clear();
-    }
+       // this.buffer.clear();
+    //}
-    public void initBackup() throws FileNotFoundException {
-        this.fout = new FileOutputStream(this.zip);
-        this.fc = this.fin.getChannel();      
-    }
-    
-    public void initRestore() {
-        try {
-			this.fin = new FileInputStream(this.zip);
-		} catch (FileNotFoundException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-        this.fc = this.fin.getChannel();
+    public void initBackup() throws IOException {
+        boolean a = this.zip.createNewFile(); 
+        if (!a) {
+            throw new IOException();
+        }
+        
+        this.fout = new FileOutputStream(this.zip);
+        this.zipOut = new ZipOutputStream(this.fout);
+    }
+    
+    public void initRestore() throws FileNotFoundException {
+  //      this.fin = new FileInputStream(this.zip);
+      //  this.fcin = this.fin.getChannel();
+        //Restore zipFile
-
-    
-    
-    /*  private void writeFile(String string, String content) {
+    /*private void writeFile(String string, String content) {
+    
+    public void read() {
+    }
+    
+    
+    public void write(String name, File f) throws IOException {
+       zipOut.flush();
+       ZipEntry e = new ZipEntry(name);
+       zipOut.putNextEntry(e);
+       
+       Checksum crc = new CRC32();
+       CheckedInputStream i = new CheckedInputStream(new FileInputStream(f), crc);
+       
+       byte[] buffer = new byte[BUFFER_SIZE]; 
+       
+       int len;  
+       while ( (len = i.read(buffer, 0, BUFFER_SIZE)) != -1) {
+           zipOut.write(buffer,0, len); 
+        }
+       
+       //Checksum management
+       // TODO Is crc up to date? To be checked...
+       long check = crc.getValue();
+       e.setCrc(check);
+       zipOut.closeEntry(); 
+    }
+
+  
+    /**
+     * 
+     * TODO: refactor this method with the one upper.
+     * 
+     * 
+     * Used for small I/O operations (no NIO used there). Take a file and zip it.
+     * 
+     * Most I/O operations are operated on RAM.
+     * 
+     */
+    public void write(String name, ByteArrayOutputStream fos) throws IOException {       
+        zipOut.flush();
+        ZipEntry e = new ZipEntry(name);
+        zipOut.putNextEntry(e);
+        
+        Checksum crc = new CRC32();
+        
+        InputStream io = new ByteArrayInputStream(fos.toByteArray());
+        
+        CheckedInputStream i = new CheckedInputStream(io, crc);
+        
+        byte[] buffer = new byte[BUFFER_SIZE]; 
+        int len;  
+        while ( (len = i.read(buffer, 0, BUFFER_SIZE)) != -1) {
+            zipOut.write(buffer,0, len); 
+         }
+    
+        //Checksum management
+        // TODO Is crc up to date? To be checked...
+        long check = crc.getValue();
+        e.setCrc(check);
+        zipOut.closeEntry(); 
+     }
+   
