JCR-433: Make primary NodeTypeDefs automatically subtype nt:base

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@423074 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.SortedSet;
+import java.util.TreeSet;
-    private HashSet supertypes;
+
+    /**
+     * Ordered array of supertype names. Empty if no supertypes have been
+     * specified. Never <code>null</code>.
+     */
+    private QName[] supertypes;
+
-        supertypes = new HashSet();
+        supertypes = QName.EMPTY_ARRAY;
-            dependencies.addAll(supertypes);
+            dependencies.addAll(Arrays.asList(supertypes));
-        supertypes.clear();
-        supertypes.addAll(Arrays.asList(names));
+        // Optimize common cases (zero or one supertypes)
+        if (names.length == 0) {
+            supertypes = QName.EMPTY_ARRAY;
+        } else if (names.length == 1) {
+            supertypes = new QName[] { names[0] };
+        } else {
+            // Sort and remove duplicates
+            SortedSet types = new TreeSet();
+            types.addAll(Arrays.asList(names));
+            supertypes = (QName[]) types.toArray(new QName[types.size()]);
+        }
-     * Returns an array containing the names of the supertypes or
-     * <code>null</code> if not set.
+     * Returns an array containing the names of the supertypes. If no
+     * supertypes have been specified, then an empty array is returned
+     * for mixin types and the <code>nt:base</code> primary type and
+     * an array containing just <code>nt:base<code> for other primary types.
+     * <p>
+     * The returned array must not be modified by the application.
-     * @return an array listing the names of the supertypes or
-     *         <code>null</code> if not set.
+     * @return a sorted array of supertype names
-        if (supertypes.isEmpty()) {
-            return QName.EMPTY_ARRAY;
+        if (supertypes.length > 0
+                || isMixin() || QName.NT_BASE.equals(getName())) {
+            return supertypes;
+        } else {
+            return new QName[] { QName.NT_BASE };
-        return (QName[]) supertypes.toArray(new QName[supertypes.size()]);
-        clone.supertypes = (HashSet) supertypes.clone();
+        clone.supertypes = supertypes; // immutable, thus ok to share
-                    && supertypes.equals(other.supertypes)
+                    && Arrays.equals(getSupertypes(), other.getSupertypes())
