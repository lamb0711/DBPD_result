JCR-3040: JMX Stats for the Session

Separate the time series collection from JMX support

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1180887 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.core.jmx;
+package org.apache.jackrabbit.core.stats;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.TimeUnit;
- * exposes the collected time series through the {@link TimeSeriesMBean}
+ * exposes the collected time series through the {@link TimeSeries}
-public class TimeSeriesRecorder implements TimeSeriesMBean {
+class TimeSeriesRecorder implements TimeSeries {
+
+    /** Event counter */
+    private final AtomicLong counter = new AtomicLong();
-    public TimeSeriesRecorder(
-            final AtomicLong counter, ScheduledExecutorService executor) {
-        executor.scheduleAtFixedRate(new Runnable() {
-            public void run() {
-                eventsPerSecond[seconds++] = counter.getAndSet(0);
-                if (seconds == eventsPerSecond.length) {
-                    seconds = 0;
-                    eventsPerMinute[minutes++] = sum(eventsPerSecond);
-                }
-                if (minutes == eventsPerMinute.length) {
-                    minutes = 0;
-                    eventsPerHour[hours++] = sum(eventsPerMinute);
-                }
-                if (hours == eventsPerHour.length) {
-                    hours = 0;
-                    eventsPerWeek[weeks++] = sum(eventsPerHour);
-                }
-                if (weeks == eventsPerWeek.length) {
-                    weeks = 0;
-                }
-            }
-        }, 1, 1, TimeUnit.SECONDS);
+    /**
+     * Returns the {@link AtomicLong} instance used to count events for
+     * the time series.
+     *
+     * @return event counter
+     */
+    public AtomicLong getCounter() {
+        return counter;
+    }
+
+    /**
+     * Records the number of counted events over the past second and resets
+     * the counter. This method should be scheduled to be called once per
+     * second.
+     */
+    public synchronized void recordOneSecond() {
+        eventsPerSecond[seconds++] = counter.getAndSet(0);
+        if (seconds == eventsPerSecond.length) {
+            seconds = 0;
+            eventsPerMinute[minutes++] = sum(eventsPerSecond);
+        }
+        if (minutes == eventsPerMinute.length) {
+            minutes = 0;
+            eventsPerHour[hours++] = sum(eventsPerMinute);
+        }
+        if (hours == eventsPerHour.length) {
+            hours = 0;
+            eventsPerWeek[weeks++] = sum(eventsPerHour);
+        }
+        if (weeks == eventsPerWeek.length) {
+            weeks = 0;
+        }
