- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
-import org.apache.jackrabbit.core.NamespaceResolver;
-import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.NamespaceResolver;
+import org.apache.jackrabbit.core.Path;
+import org.apache.log4j.Logger;
+import java.io.*;
+import java.util.Iterator;
-import java.util.Iterator;
-import java.io.FileInputStream;
-import java.io.InputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.BufferedOutputStream;
-import java.io.FileOutputStream;
-import java.io.File;
- *
- * @author Marcel Reutegger
- * @version $Revision:  $, $Date:  $
-    /** Default logger instance for this class */
+    /**
+     * Default logger instance for this class
+     */
-    /** Location of the file that persists the uri / prefix mappings */
+    /**
+     * Location of the file that persists the uri / prefix mappings
+     */
-    /** Map of uris indexed by prefixes */
+    /**
+     * Map of uris indexed by prefixes
+     */
-    /** Map of prefixes indexed by uris */
+    /**
+     * Map of prefixes indexed by uris
+     */
-    /** Current prefix count. */
+    /**
+     * Current prefix count.
+     */
-	storage = file;
-	load();
+        storage = file;
+        load();
-     *
-	if (!prefixToURI.containsKey(prefix)) {
-	    throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
-	}
-	return (String) prefixToURI.get(prefix);
+        if (!prefixToURI.containsKey(prefix)) {
+            throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
+        }
+        return (String) prefixToURI.get(prefix);
-     *
-	String prefix = (String) uriToPrefix.get(uri);
-	if (prefix == null) {
-	    // make sure prefix is not taken
-	    while (prefixToURI.get(String.valueOf(prefixCount)) != null) {
-		prefixCount++;
-	    }
-	    prefix = String.valueOf(prefixCount);
-	    prefixToURI.put(prefix, uri);
-	    uriToPrefix.put(uri, prefix);
-	    log.debug("adding new namespace mapping: " + prefix + " -> " + uri);
-	    try {
-		store();
-	    } catch (IOException e) {
-		throw new NamespaceException("Could not obtain a prefix for uri: " + uri, e);
-	    }
-	}
-	return prefix;
+        String prefix = (String) uriToPrefix.get(uri);
+        if (prefix == null) {
+            // make sure prefix is not taken
+            while (prefixToURI.get(String.valueOf(prefixCount)) != null) {
+                prefixCount++;
+            }
+            prefix = String.valueOf(prefixCount);
+            prefixToURI.put(prefix, uri);
+            uriToPrefix.put(uri, prefix);
+            log.debug("adding new namespace mapping: " + prefix + " -> " + uri);
+            try {
+                store();
+            } catch (IOException e) {
+                throw new NamespaceException("Could not obtain a prefix for uri: " + uri, e);
+            }
+        }
+        return prefix;
-     * @param name the property name to translate
+     *
+     * @param name     the property name to translate
-	    throws MalformedPathException {
-	Path path = Path.create(name, resolver, false);
-	try {
-	    return path.toJCRPath(this);
-	} catch (NoPrefixDeclaredException e) {
-	    // should never happen actually, because we create yet unknown
-	    // uri mappings on the fly.
-	    throw new MalformedPathException(e.toString());
-	}
+            throws MalformedPathException {
+        Path path = Path.create(name, resolver, false);
+        try {
+            return path.toJCRPath(this);
+        } catch (NoPrefixDeclaredException e) {
+            // should never happen actually, because we create yet unknown
+            // uri mappings on the fly.
+            throw new MalformedPathException(e.toString());
+        }
-	if (storage.exists()) {
-	    InputStream in = new FileInputStream(storage);
-	    try {
-		Properties props = new Properties();
-		log.debug("loading namespace mappings...");
-		props.load(in);
+        if (storage.exists()) {
+            InputStream in = new FileInputStream(storage);
+            try {
+                Properties props = new Properties();
+                log.debug("loading namespace mappings...");
+                props.load(in);
-		// read mappings from properties
-		Iterator iter = props.keySet().iterator();
-		while (iter.hasNext()) {
-		    String prefix = (String) iter.next();
-		    String uri = props.getProperty(prefix);
+                // read mappings from properties
+                Iterator iter = props.keySet().iterator();
+                while (iter.hasNext()) {
+                    String prefix = (String) iter.next();
+                    String uri = props.getProperty(prefix);
-		    prefixToURI.put(prefix, uri);
-		    uriToPrefix.put(uri, prefix);
-		}
-		prefixCount = props.size();
-		log.debug("namespace mappings loaded.");
-	    } finally {
-		in.close();
-	    }
-	}
+                    prefixToURI.put(prefix, uri);
+                    uriToPrefix.put(uri, prefix);
+                }
+                prefixCount = props.size();
+                log.debug("namespace mappings loaded.");
+            } finally {
+                in.close();
+            }
+        }
+     *
-	Properties props = new Properties();
+        Properties props = new Properties();
-	// store mappings in properties
-	Iterator iter = prefixToURI.keySet().iterator();
-	while (iter.hasNext()) {
-	    String prefix = (String) iter.next();
-	    String uri = (String) prefixToURI.get(prefix);
-	    props.setProperty(prefix, uri);
-	}
+        // store mappings in properties
+        Iterator iter = prefixToURI.keySet().iterator();
+        while (iter.hasNext()) {
+            String prefix = (String) iter.next();
+            String uri = (String) prefixToURI.get(prefix);
+            props.setProperty(prefix, uri);
+        }
-	storage.getParentFile().mkdirs();
-	OutputStream out = new BufferedOutputStream(new FileOutputStream(storage));
+        storage.getParentFile().mkdirs();
+        OutputStream out = new BufferedOutputStream(new FileOutputStream(storage));
-	try {
-	    props.store(out, null);
-	} finally {
-	    // make sure stream is closed
-	    out.close();
-	}
+        try {
+            props.store(out, null);
+        } finally {
+            // make sure stream is closed
+            out.close();
+        }
