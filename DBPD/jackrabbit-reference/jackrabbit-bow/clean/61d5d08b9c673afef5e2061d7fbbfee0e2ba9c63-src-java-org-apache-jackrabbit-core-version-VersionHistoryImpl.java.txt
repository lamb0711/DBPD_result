- adjusting version labels to spec 0.16.2

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153381 13f79535-47bb-0310-9956-ffa450edef68

-        InternalVersion v = history.getVersionByLabel(label);
-        if (v == null) {
-            throw new VersionException("No version with label '" + label + "' exists in this version history.");
+        try {
+            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
+            InternalVersion v = history.getVersionByLabel(qLabel);
+            if (v == null) {
+                throw new VersionException("No version with label '" + label + "' exists in this version history.");
+            }
+            return (Version) session.getNodeByUUID(v.getId());
+        } catch (IllegalNameException e) {
+            throw new RepositoryException(e);
+        } catch (UnknownPrefixException e) {
+            throw new RepositoryException(e);
-        return (Version) session.getNodeByUUID(v.getId());
-            history.addVersionLabel(name, label, move);
+            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
+            history.addVersionLabel(name, qLabel, move);
-        history.removeVersionLabel(label);
+        try {
+            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
+            history.removeVersionLabel(qLabel);
+        } catch (IllegalNameException e) {
+            throw new RepositoryException(e);
+        } catch (UnknownPrefixException e) {
+            throw new RepositoryException(e);
+        }
-        return history.getVersionLabels();
+        try {
+            QName[] labels = history.getVersionLabels();
+            String[] ret = new String[labels.length];
+            for (int i=0; i<labels.length; i++) {
+                ret[i] = labels[i].toJCRName(session.getNamespaceResolver());
+            }
+            return ret;
+        } catch (NoPrefixDeclaredException e) {
+            throw new IllegalArgumentException("Unable to resolve label name: " + e.toString());
+        }
-        return ((VersionImpl) version).getInternalVersion().getLabels();
+        try {
+            QName[] labels = ((VersionImpl) version).getInternalVersion().getLabels();
+            String[] ret = new String[labels.length];
+            for (int i=0; i<labels.length; i++) {
+                ret[i] = labels[i].toJCRName(session.getNamespaceResolver());
+            }
+            return ret;
+        } catch (NoPrefixDeclaredException e) {
+            throw new IllegalArgumentException("Unable to resolve label name: " + e.toString());
+        }
-        return history.getVersionByLabel(label)!=null;
+        try {
+            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
+            return history.getVersionByLabel(qLabel)!=null;
+        } catch (IllegalNameException e) {
+            throw new IllegalArgumentException("Unable to resolve label: " + e);
+        } catch (UnknownPrefixException e) {
+            throw new IllegalArgumentException("Unable to resolve label: " + e);
+        }
-        return ((VersionImpl) version).getInternalVersion().hasLabel(label);
+        try {
+            QName qLabel = QName.fromJCRName(label, session.getNamespaceResolver());
+            return ((VersionImpl) version).getInternalVersion().hasLabel(qLabel);
+        } catch (IllegalNameException e) {
+            throw new RepositoryException(e);
+        } catch (UnknownPrefixException e) {
+            throw new RepositoryException(e);
+        }
