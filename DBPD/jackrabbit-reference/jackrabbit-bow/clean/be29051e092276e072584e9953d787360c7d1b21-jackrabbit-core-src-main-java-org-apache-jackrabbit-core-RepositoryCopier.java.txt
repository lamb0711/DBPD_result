JCR-442: Implement a backup tool

Add online backup functionality to RepositoryCopier. It's now possible to copy a (read-only) repository while it's still running.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@801968 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.data.DataStore;
-import org.apache.jackrabbit.core.version.InternalVersionManagerImpl;
+ * <p>
+ * No cluster journal records are written in the target repository. If the
+ * target repository is clustered, it should be the only node in the cluster.
+ * <p>
+ * The target repository needs to be fully reindexed after the copy operation.
+ * The static copy() methods will remove the target search index folders from
+ * their default locations to trigger automatic reindexing when the repository
+ * is next started.
-     * Source repository configuration
+     * Source repository.
-    private final RepositoryConfig sourceConfig;
+    private final RepositoryImpl source;
-     * Target repository configuration
+     * Target repository.
-    private final RepositoryConfig targetConfig;
+    private final RepositoryImpl target;
-     * Creates a tool for copying the full contents of the source repository.
-     * The given source repository directory is expected to contain the
-     * repository configuration as a <code>repository.xml</code> file.
-     * The target repository directory should not already exist. It will be
-     * automatically created with default repository configuration.
+     * Copies the contents of the repository in the given source directory
+     * to a repository in the given target directory.
-     * @throws RepositoryException if the repositories can not be accessed
+     * @throws RepositoryException if the copy operation fails
-    public RepositoryCopier(File source, File target)
+    public static void copy(File source, File target)
-        this(RepositoryConfig.create(source), RepositoryConfig.install(target));
+        copy(RepositoryConfig.create(source), RepositoryConfig.install(target));
+    }
+
+    /**
+     * Copies the contents of the repository with the given configuration
+     * to a repository in the given target directory.
+     *
+     * @param source source repository configuration
+     * @param target target repository directory
+     * @throws RepositoryException if the copy operation fails
+     * @throws IOException if the target repository can not be initialized
+     */
+    public static void copy(RepositoryConfig source, File target)
+            throws RepositoryException, IOException {
+        copy(source, RepositoryConfig.install(target));
+    }
+
+    /**
+     * Copies the contents of the source repository with the given
+     * configuration to a target repository with the given configuration.
+     *
+     * @param source source repository configuration
+     * @param target target repository directory
+     * @throws RepositoryException if the copy operation fails
+     */
+    public static void copy(RepositoryConfig source, RepositoryConfig target)
+            throws RepositoryException {
+        RepositoryImpl repository = RepositoryImpl.create(source);
+        try {
+            copy(repository, target);
+        } finally {
+            repository.shutdown();
+        }
+    }
+
+    /**
+     * Copies the contents of the given source repository to a repository in
+     * the given target directory.
+     * <p>
+     * The source repository <strong>must not be modified</strong> while
+     * the copy operation is running to avoid an inconsistent copy.
+     *
+     * @param source source repository directory
+     * @param target target repository directory
+     * @throws RepositoryException if the copy operation fails
+     * @throws IOException if the target repository can not be initialized
+     */
+    public static void copy(RepositoryImpl source, File target)
+            throws RepositoryException, IOException {
+        copy(source, RepositoryConfig.install(target));
+    }
+
+    /**
+     * Copies the contents of the given source repository to a target
+     * repository with the given configuration.
+     * <p>
+     * The source repository <strong>must not be modified</strong> while
+     * the copy operation is running to avoid an inconsistent copy.
+     *
+     * @param source source repository directory
+     * @param target target repository directory
+     * @throws RepositoryException if the copy operation fails
+     * @throws IOException if the target repository can not be initialized
+     */
+    public static void copy(RepositoryImpl source, RepositoryConfig target)
+            throws RepositoryException {
+        RepositoryImpl repository = RepositoryImpl.create(target);
+        try {
+            new RepositoryCopier(source, repository).copy();
+        } finally {
+            repository.shutdown();
+        }
+
+        // Remove index directories to force re-indexing on next startup
+        // TODO: There should be a cleaner way to do this
+        File targetDir = new File(target.getHomeDir());
+        File repoDir = new File(targetDir, "repository");
+        FileUtils.deleteQuietly(new File(repoDir, "index"));
+        File[] workspaces = new File(targetDir, "workspaces").listFiles();
+        if (workspaces != null) {
+            for (File workspace : workspaces) {
+                FileUtils.deleteQuietly(new File(workspace, "index"));
+            }
+        }
-     * @param source source repository configuration
-     * @param target target repository configuration
-     * @throws RepositoryException if the repositories can not be accessed
+     * @param source source repository
+     * @param target target repository
-    public RepositoryCopier(RepositoryConfig source, RepositoryConfig target)
-            throws RepositoryException {
-        sourceConfig = source;
-        targetConfig = target;
+    public RepositoryCopier(RepositoryImpl source, RepositoryImpl target) {
+        this.source = source;
+        this.target = target;
+     * <p>
+     * The source repository <strong>must not be modified</strong> while
+     * the copy operation is running to avoid an inconsistent copy.
+     * <p>
+     * This method leaves the search indexes of the target repository in
+     * an 
-                sourceConfig.getHomeDir(), targetConfig.getHomeDir());
-
-        RepositoryImpl source = RepositoryImpl.create(sourceConfig);
+                source.repConfig.getHomeDir(),
+                target.repConfig.getHomeDir());
-            RepositoryImpl target = RepositoryImpl.create(targetConfig);
-            try {
-                copyNamespaces(
-                        source.getNamespaceRegistry(),
-                        target.getNamespaceRegistry());
-                copyNodeTypes(
-                        source.getNodeTypeRegistry(),
-                        target.getNodeTypeRegistry());
-                copyVersionStore(
-                        source.getVersionManagerImpl(),
-                        target.getVersionManagerImpl(),
-                        target.getDataStore());
-                copyWorkspaces(source, target);
-            } catch (Exception e) {
-                throw new RepositoryException("Failed to copy content", e);
-            } finally {
-                target.shutdown();
-            }
-
-            // Remove index directories to force re-indexing on next startup
-            // TODO: There should be a cleaner way to do this
-            File targetDir = new File(targetConfig.getHomeDir());
-            File repoDir = new File(targetDir, "repository");
-            FileUtils.deleteQuietly(new File(repoDir, "index"));
-            File[] workspaces = new File(targetDir, "workspaces").listFiles();
-            if (workspaces != null) {
-                for (File workspace : workspaces) {
-                    FileUtils.deleteQuietly(new File(workspace, "index"));
-                }
-            }
-        } finally {
-            source.shutdown();
+            copyNamespaces();
+            copyNodeTypes();
+            copyVersionStore();
+            copyWorkspaces();
+        } catch (Exception e) {
+            throw new RepositoryException("Failed to copy content", e);
-    private void copyNamespaces(
-            NamespaceRegistry source, NamespaceRegistry target)
-            throws RepositoryException {
-        logger.info("Copying registered namespaces");
+    private void copyNamespaces() throws RepositoryException {
+        NamespaceRegistry sourceRegistry = source.getNamespaceRegistry();
+        NamespaceRegistry targetRegistry = target.getNamespaceRegistry();
-        Collection<String> existing = Arrays.asList(target.getURIs());
-        for (String uri : source.getURIs()) {
+        logger.info("Copying registered namespaces");
+        Collection<String> existing = Arrays.asList(targetRegistry.getURIs());
+        for (String uri : sourceRegistry.getURIs()) {
-                target.registerNamespace(source.getPrefix(uri), uri);
+                targetRegistry.registerNamespace(
+                        sourceRegistry.getPrefix(uri), uri);
-    private void copyNodeTypes(NodeTypeRegistry source, NodeTypeRegistry target)
-            throws RepositoryException, InvalidNodeTypeDefException {
-        logger.info("Copying registered node types");
+    private void copyNodeTypes() throws RepositoryException {
+        NodeTypeRegistry sourceRegistry = source.getNodeTypeRegistry();
+        NodeTypeRegistry targetRegistry = target.getNodeTypeRegistry();
+        logger.info("Copying registered node types");
-            Arrays.asList(target.getRegisteredNodeTypes());
+            Arrays.asList(targetRegistry.getRegisteredNodeTypes());
-        for (Name name : source.getRegisteredNodeTypes()) {
+        for (Name name : sourceRegistry.getRegisteredNodeTypes()) {
-                register.add(source.getNodeTypeDef(name));
+                register.add(sourceRegistry.getNodeTypeDef(name));
-        target.registerNodeTypes(register);
+        try {
+            targetRegistry.registerNodeTypes(register);
+        } catch (InvalidNodeTypeDefException e) {
+            throw new RepositoryException("Unable to copy node types", e);
+        }
-    private void copyVersionStore(
-            InternalVersionManagerImpl source,
-            InternalVersionManagerImpl target, DataStore store)
-            throws Exception {
+    private void copyVersionStore() throws RepositoryException {
-
-                source.getPersistenceManager(),
-                target.getPersistenceManager(), store);
+                source.getVersionManagerImpl().getPersistenceManager(),
+                target.getVersionManagerImpl().getPersistenceManager(),
+                target.getDataStore());
-    private void copyWorkspaces(RepositoryImpl source, RepositoryImpl target)
-            throws Exception {
+    private void copyWorkspaces() throws RepositoryException {
