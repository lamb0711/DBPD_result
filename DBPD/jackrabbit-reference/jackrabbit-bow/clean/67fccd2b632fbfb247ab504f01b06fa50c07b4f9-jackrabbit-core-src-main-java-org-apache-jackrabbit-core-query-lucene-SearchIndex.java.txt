JCR-1747: org.apache.jackrabbit.core.query.lucene.SearchIndex with in-memory lucene index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@718218 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.lucene.directory.DirectoryManager;
+import org.apache.jackrabbit.core.query.lucene.directory.FSDirectoryManager;
+     * The name of the directory manager class implementation.
+     */
+    private String directoryManagerClass = FSDirectoryManager.class.getName();
+
+    /**
+     * The directory manager.
+     */
+    private DirectoryManager directoryManager;
+
+    /**
-
-        File indexDir = new File(path);
+        directoryManager = createDirectoryManager();
-            File mapFile = new File(indexDir, NS_MAPPING_FILE);
+            File mapFile = new File(new File(path), NS_MAPPING_FILE);
-        index = new MultiIndex(indexDir, this, excludedIDs, nsMappings);
+        index = new MultiIndex(this, excludedIDs);
+     * @return the directory manager for this search index.
+     */
+    public DirectoryManager getDirectoryManager() {
+        return directoryManager;
+    }
+
+    /**
+     * @return an initialized {@link DirectoryManager}.
+     * @throws IOException if the directory manager cannot be instantiated or
+     *          an exception occurs while initializing the manager.
+     */
+    protected DirectoryManager createDirectoryManager()
+            throws IOException {
+        try {
+            Class clazz = Class.forName(directoryManagerClass);
+            if (!DirectoryManager.class.isAssignableFrom(clazz)) {
+                throw new IOException(directoryManagerClass +
+                        " is not a DirectoryManager implementation");
+            }
+            DirectoryManager df = (DirectoryManager) clazz.newInstance();
+            df.init(this);
+            return df;
+        } catch (IOException e) {
+            throw e;
+        } catch (Exception e) {
+            IOException ex = new IOException();
+            ex.initCause(e);
+            throw ex;
+        }
+    }
+
+    /**
+    /**
+     * @return the name of the directory manager class.
+     */
+    public String getDirectoryManagerClass() {
+        return directoryManagerClass;
+    }
+
+    /**
+     * Sets name of the directory manager class. The class must implement
+     * {@link DirectoryManager}.
+     *
+     * @param className the name of the class that implements directory manager.
+     */
+    public void setDirectoryManagerClass(String className) {
+        this.directoryManagerClass = className;
+    }
+
