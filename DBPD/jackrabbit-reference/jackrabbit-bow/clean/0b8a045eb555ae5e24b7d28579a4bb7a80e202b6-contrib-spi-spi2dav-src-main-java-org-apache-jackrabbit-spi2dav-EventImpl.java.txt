work in progress

- add 'isSessionScoped' to LockInfo and RepositoryService.lock
- add index to NodeInfo
- evaluate EventIds upon call to getId, getParentId
- convert Method-Not-Allowed to ConstraintViolation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@467911 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.PropertyId;
-    private final ItemId itemId;
-    private final NodeId parentId;
+
+    private final SessionInfo sessionInfo;
+    private final URIResolver uriResolver;
+
+    private final String href;
+        this.uriResolver = uriResolver;
+        this.sessionInfo = sessionInfo;
-        String href = DomUtil.getChildTextTrim(eventElement, DavConstants.XML_HREF, DavConstants.NAMESPACE);
-        if (type == Event.NODE_ADDED || type == Event.NODE_REMOVED) {
-            itemId = uriResolver.getNodeId(href, sessionInfo);
-            String parentHref = Text.getRelativeParent(href, 1, true);
-            parentId = uriResolver.getNodeId(parentHref, sessionInfo);
-        } else {
-            itemId = uriResolver.getPropertyId(href, sessionInfo);
-            parentId = ((PropertyId)itemId).getParentId();
-        }
-        qPath = uriResolver.getQPath(Text.unescape(href), sessionInfo);
+        href = DomUtil.getChildTextTrim(eventElement, DavConstants.XML_HREF, DavConstants.NAMESPACE);
+        qPath = uriResolver.getQPath(href, sessionInfo);
-        return itemId;
+        try {
+            if (type == Event.NODE_ADDED || type == Event.NODE_REMOVED) {
+                return uriResolver.getNodeId(href, sessionInfo);
+            } else {
+                return uriResolver.getPropertyId(href, sessionInfo);
+            }
+        } catch (RepositoryException e) {
+            // should never occur
+            log.error("Internal error, while building id of Event.", e);
+            // TODO: check
+            throw new IllegalStateException();
+        }
-        return parentId;
+        try {
+            String parentHref = Text.getRelativeParent(href, 1, true);
+            return uriResolver.getNodeId(parentHref, sessionInfo);
+        } catch (RepositoryException e) {
+            // should never occur
+            log.error("Internal error, while building parentId of Event.", e);
+            // TODO: check
+            throw new IllegalStateException();
+        }
-        return itemId.getUUID();
+        return getItemId().getUUID();
