JCR-808: Applied patch from Christoph Kiehl to get better error messages for non-trivial nodetype changes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@526703 13f79535-47bb-0310-9956-ffa450edef68

-            // check supertypes (MAJOR modification)
-            if (supertypesChanged()) {
-                type = MAJOR;
+            // check supertypes
+            int tmpType = supertypesDiff(); 
+            if (tmpType > type) {
+                type = tmpType;
-            if (oldDef.isMixin() != newDef.isMixin()) {
-                type = MAJOR;
+            tmpType = mixinFlagDiff();
+            if (tmpType > type) {
+                type = tmpType;
-            int tmpType = buildPropDefDiffs();
+            tmpType = buildPropDefDiffs();
-    public boolean supertypesChanged() {
-        return !Arrays.equals(oldDef.getSupertypes(), newDef.getSupertypes());
+    public int mixinFlagDiff() {
+        return oldDef.isMixin() != newDef.isMixin() ? MAJOR : NONE;
-    public boolean propertyDefsChanged() {
-        return !Arrays.equals(oldDef.getPropertyDefs(), newDef.getPropertyDefs());
-    }
-
-    /**
-     * @return
-     */
-    public boolean childNodeDefsChanged() {
-        return !Arrays.equals(oldDef.getChildNodeDefs(), newDef.getChildNodeDefs());
+    public int supertypesDiff() {
+        return !Arrays.equals(oldDef.getSupertypes(), newDef.getSupertypes()) ? MAJOR : NONE;
+    
+    public String toString() {
+        String result = this.getClass().getSimpleName() + "[\n\tnodeTypeName="
+                + oldDef.getName();
+        
+        result += ",\n\tmixinFlagDiff=" + modificationTypeToString(mixinFlagDiff());
+        result += ",\n\tsupertypesDiff=" + modificationTypeToString(supertypesDiff());
+
+        result += ",\n\tpropertyDifferences=[\n";
+        result += toString(propDefDiffs);
+        result += "\t]";
+
+        result += ",\n\tchildNodeDifferences=[\n";
+        result += toString(childNodeDefDiffs);
+        result += "\t]\n";
+        result += "]\n";
+
+        return result;
+    }
+
+    private String toString(List childItemDefDiffs) {
+        String result = "";
+        for (Iterator iter = childItemDefDiffs.iterator(); iter.hasNext();) {
+            ChildItemDefDiff propDefDiff = (ChildItemDefDiff) iter.next();
+            result += "\t\t" + propDefDiff;
+            if (iter.hasNext()) {
+                result += ",";
+            }
+            result += "\n";
+        }
+        return result;
+    }
+
+    private String modificationTypeToString(int modifcationType) {
+        String typeString = "unknown";
+        switch (modifcationType) {
+            case NONE:
+                typeString = "NONE";
+                break;
+            case TRIVIAL:
+                typeString = "TRIVIAL";
+                break;
+            case MINOR:
+                typeString = "MINOR";
+                break;
+            case MAJOR:
+                typeString = "MAJOR";
+                break;
+        }
+        return typeString;
+    }
+
+
+
+        public String toString() {
+            String typeString = modificationTypeToString(getType());
+
+            String operationString;
+            if (isAdded()) {
+                operationString = "ADDED";
+            } else if (isModified()) {
+                operationString = "MODIFIED";
+            } else if (isRemoved()) {
+                operationString = "REMOVED";
+            } else {
+                operationString = "NONE";
+            }
+
+            ItemDef itemDefinition = (oldDef != null) ? oldDef : newDef;
+
+            return getClass().getSimpleName() + "[itemName="
+                    + itemDefinition.getName() + ", type=" + typeString
+                    + ", operation=" + operationString + "]";
+        }
+
