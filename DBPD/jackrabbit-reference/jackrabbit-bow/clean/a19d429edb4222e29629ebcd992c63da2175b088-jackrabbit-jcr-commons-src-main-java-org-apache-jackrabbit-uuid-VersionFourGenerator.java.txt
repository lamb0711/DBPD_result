JCR-1206: Use SecureRandom to generate UUIDs by default. Also includes a workaround for systems where SecureRandom initialization is very slow.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@594470 13f79535-47bb-0310-9956-ffa450edef68

-import java.security.NoSuchAlgorithmException;
-import java.security.NoSuchProviderException;
- * random implementation is avialable or an Exception is raised a java.util.Random
+ * random implementation is available or an Exception is raised a java.util.Random
-    private static final Random regularRandom = new Random();
+    private static Random regularRandom = new Random();
-    private static Random secureRandom;
+    private static SecureRandom secureRandom;
+    
+    /**
+     * Flag to indicate if the secureRandom instance was initialized
+     */
+    private static volatile boolean secureRandomSeeded;
+    
+    /**
+     * The maximum number of milliseconds to wait for the the initialization
+     */
+    private static final int MAX_SEED_TIME = 1000;
-     * <p>Returns a new version four UUID.</p>
+     * Returns a new version four UUID.
+     * A cryptographically secure pseudorandom number generator 
+     * is used to generate the values (because otherwise the probability 
+     * of duplicates may be significantly higher).
+     * See also: https://issues.apache.org/jira/browse/JCR-1206
+     * and http://en.wikipedia.org/wiki/UUID
-    public Object nextIdentifier() {
-        return nextUUID(false);
+    public UUID nextIdentifier() {
+        return nextUUID(true);
-    public Object nextIdentifier(boolean secure) {
+    public UUID nextIdentifier(boolean secure) {
+    
+    /**
+     * Initialize the secure random and seed it.
+     */
+    private static synchronized void initSecureRandom() {
+        if (secureRandom != null) {
+            return;
+        }
+        try {
+            if (usePRNGPackage != null) {
+                secureRandom = SecureRandom.getInstance(usePRNG, usePRNGPackage);
+            } else {
+                secureRandom = SecureRandom.getInstance(usePRNG);
+            }
+        } catch (Exception e) {
+            // Fall back to default SecureRandom
+            secureRandom = new SecureRandom();
+        }
+        // Can not do that in a static initializer block, because
+        // threads are not started after the initializer block exits
+        Thread t = new Thread() {
+            public void run() {
+                // Seed it with 32 bytes. May be slow on some systems,
+                // see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6202721
+                byte[] seed = secureRandom.generateSeed(32);
+                secureRandom.setSeed(seed);
+                secureRandomSeeded = true;
+            }
+        };
+        secureRandomSeeded = false;
+        t.start();
+        try {
+            t.join(MAX_SEED_TIME);
+        } catch (InterruptedException e) {
+            // ignore
+        }
+        if (!secureRandomSeeded) {
+            // Alternative seed algorithm if the default is very slow
+            secureRandom.setSeed(System.currentTimeMillis());
+            // Thread timing (a second thread is already running)
+            for (int j = 0; j < 16; j++) {
+                int i = 0;
+                long start = System.currentTimeMillis();
+                while (start == System.currentTimeMillis()) {
+                    i++;
+                }
+                // Supplement the existing seed
+                secureRandom.setSeed(i);
+            }
+        }
+    }
-            //Initialize the secure random if null.
-            if (secureRandom == null) {
-                try {
-                    if (usePRNGPackage != null) {
-                        secureRandom = SecureRandom.getInstance(usePRNG, usePRNGPackage);
-                    } else {
-                        secureRandom = SecureRandom.getInstance(usePRNG);
-                    }
-                } catch (NoSuchAlgorithmException nsae) {
-                    secure = false; //Fail back to default PRNG/Random
-                } catch (NoSuchProviderException nspe) {
-                    secure = false; //Fail back to default PRNG/Random
-                }
-                secureRandom.nextBytes(raw);
-            }
-        }
-
-        if (!secure) {
+            initSecureRandom();
+            secureRandom.nextBytes(raw);
+        } else {
