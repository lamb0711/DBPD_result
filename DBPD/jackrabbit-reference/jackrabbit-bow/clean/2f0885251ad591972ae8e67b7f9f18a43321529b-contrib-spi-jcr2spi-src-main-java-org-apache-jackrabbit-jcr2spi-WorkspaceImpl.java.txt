Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManager;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateFactory;
-    /**
-     * The hierarchy manager that reflects workspace state only
-     * (i.e. that is isolated from transient changes made through
-     * the session).
-     */
-    private HierarchyManager hierManager;
-    private ItemStateValidator validator;
-
-                session.getItemManager(), session.getItemStateManager(), wspManager);
+                session.getItemManager(), session.getHierarchyManager(), wspManager);
-        if (hierManager == null) {
-            hierManager = new HierarchyManagerImpl(getItemStateManager(), getNamespaceResolver());
-        }
-        return hierManager;
-    }
-
-    /**
-     * @see ManagerProvider#getItemStateManager()
-     */
-    public ItemStateManager getItemStateManager() {
-        return wspManager;
+        return wspManager.getHierarchyManager();
+    
+    ItemStateFactory getItemStateFactory() {
+        return wspManager.getItemStateFactory();
+    }
-     * Validator for the <code>Workspace</code>. It contrast from {@link SessionImpl#getValidator()}
-     * in terms of <code>HierarchyManager</code> and <code>ItemManager</code>.
+     * Returns the validator of the session
+     *
-        if (validator == null) {
-            validator = new ItemStateValidator(getNodeTypeRegistry(), this);
-        }
-        return validator;
+        return session.getValidator();
-        LockManager lMgr = new LockManagerImpl(wspManager, itemManager);
+        LockManager lMgr = new LockManagerImpl(wspManager, itemManager, session.getCacheBehaviour());
