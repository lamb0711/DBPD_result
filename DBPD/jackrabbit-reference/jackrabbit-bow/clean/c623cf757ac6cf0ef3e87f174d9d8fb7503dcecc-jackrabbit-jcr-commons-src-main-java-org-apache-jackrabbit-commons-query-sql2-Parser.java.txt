JCR-2923 SQL2 parser: improved error message for ambiguous properties in joins

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1083721 13f79535-47bb-0310-9956-ffa450edef68

+        int columnParseIndex = parseIndex;
-        Column[] columnArray = resolveColumns(list);
+        Column[] columnArray = resolveColumns(columnParseIndex, list);
-                    // TODO verify "." is correct
-                a = parseCondition(factory.propertyValue(getOnlySelectorName(), identifier));
+                a = parseCondition(factory.propertyValue(getOnlySelectorName(identifier), identifier));
-                a = parseCondition(factory.propertyValue(getOnlySelectorName(), name));
+                a = parseCondition(factory.propertyValue(getOnlySelectorName(name), name));
-                        getOnlySelectorName(), name,
+                        getOnlySelectorName(name), name,
-                c = factory.sameNode(getOnlySelectorName(), name);
+                c = factory.sameNode(getOnlySelectorName(name), name);
-                c = factory.childNode(getOnlySelectorName(), name);
+                c = factory.childNode(getOnlySelectorName(name), name);
-                c = factory.descendantNode(getOnlySelectorName(), name);
+                c = factory.descendantNode(getOnlySelectorName(name), name);
-                op = factory.nodeName(getOnlySelectorName());
+                op = factory.nodeName(getOnlySelectorName("NAME()"));
-                op = factory.nodeLocalName(getOnlySelectorName());
+                op = factory.nodeLocalName(getOnlySelectorName("LOCALNAME()"));
-                op = factory.fullTextSearchScore(getOnlySelectorName());
+                op = factory.fullTextSearchScore(getOnlySelectorName("SCORE()"));
-            return factory.propertyValue(getOnlySelectorName(), name);
+            return factory.propertyValue(getOnlySelectorName(name), name);
-    private Column[] resolveColumns(ArrayList<ColumnOrWildcard> list) throws RepositoryException {
-        ArrayList<Column> columns = new ArrayList<Column>();
-        for (ColumnOrWildcard c : list) {
-            if (c.propertyName == null) {
-                for (Selector selector : selectors) {
-                    if (c.selectorName == null
-                            || c.selectorName
-                                    .equals(selector.getSelectorName())) {
-                        Column column = factory.column(selector
-                                .getSelectorName(), null, null);
-                        columns.add(column);
+    private Column[] resolveColumns(int columnParseIndex, ArrayList<ColumnOrWildcard> list) throws RepositoryException {
+        int oldParseIndex = parseIndex;
+        // set the parse index to the column list, to get a more meaningful error message
+        // if something is wrong
+        this.parseIndex = columnParseIndex;
+        try {
+            ArrayList<Column> columns = new ArrayList<Column>();
+            for (ColumnOrWildcard c : list) {
+                if (c.propertyName == null) {
+                    for (Selector selector : selectors) {
+                        if (c.selectorName == null
+                                || c.selectorName
+                                        .equals(selector.getSelectorName())) {
+                            Column column = factory.column(selector
+                                    .getSelectorName(), null, null);
+                            columns.add(column);
+                        }
-                }
-            } else {
-                Column column;
-                if (c.selectorName != null) {
-                    column = factory.column(c.selectorName, c.propertyName, c.columnName);
-                } else if (c.columnName != null) {
-                    column = factory.column(getOnlySelectorName(), c.propertyName, c.columnName);
-                    column = factory.column(getOnlySelectorName(), c.propertyName, c.propertyName);
+                    Column column;
+                    if (c.selectorName != null) {
+                        column = factory.column(c.selectorName, c.propertyName, c.columnName);
+                    } else if (c.columnName != null) {
+                        column = factory.column(getOnlySelectorName(c.propertyName), c.propertyName, c.columnName);
+                    } else {
+                        column = factory.column(getOnlySelectorName(c.propertyName), c.propertyName, c.propertyName);
+                    }
+                    columns.add(column);
-                columns.add(column);
+            Column[] array = new Column[columns.size()];
+            columns.toArray(array);
+            return array;
+        } finally {
+            this.parseIndex = oldParseIndex;
-        Column[] array = new Column[columns.size()];
-        columns.toArray(array);
-        return array;
-    private static class ColumnOrWildcard {
-        private String selectorName;
-        private String propertyName;
-        private String columnName;
+    static class ColumnOrWildcard {
+        String selectorName;
+        String propertyName;
+        String columnName;
+     * @param name the property name
-    private String getOnlySelectorName() throws RepositoryException {
+    private String getOnlySelectorName(String propertyName) throws RepositoryException {
-            throw getSyntaxError("Need to specify the selector name because the query contains more than one selector.");
+            throw getSyntaxError("Need to specify the selector name for \"" + propertyName + "\" because the query contains more than one selector.");
