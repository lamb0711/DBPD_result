- add methods for observation to client
- minor improvements to observation impl in jcr-server
- fix client LockMethod and adjust LockDiscovery accordingly
- fix client MergeMethod adjust corresponding Info object accordingly
- improve UpdateInfo
- use CodedURLHeader instaed of building locktoken header manually

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@421206 13f79535-47bb-0310-9956-ffa450edef68

+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-     * Retrieve the {@link org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery} object for the given
-     * resource. Note, that the discovery object will be empty if there are
-     * no subscriptions present.
+     * Retrieve the {@link org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery}
+     * object for the given resource. Note, that the discovery object will be empty
+     * if there are no subscriptions present.<br>
+     * Note that all subscriptions present on the given resource are returned.
+     * However, the subscription id will not be visible in order to avoid abuse
+     * by clients not having registered the subscription originally.
-        // todo: is it correct to return subscriptions made by another session?
-        SubscriptionImpl subscription;
+        Subscription subscription;
-            subscription = new SubscriptionImpl(info, resource);
-            registerSubscription(subscription, resource);
+            SubscriptionImpl newSubs = new SubscriptionImpl(info, resource);
+            registerSubscription(newSubs, resource);
-            subscriptions.put(subscription.getSubscriptionId(), subscription);
-            resource.getSession().addReference(subscription.getSubscriptionId());
+            subscriptions.put(newSubs.getSubscriptionId(), newSubs);
+            resource.getSession().addReference(newSubs.getSubscriptionId());
+            subscription = newSubs;
-            subscription = validate(subscriptionId, resource);
-            subscription.setInfo(info);
-            registerSubscription(subscription, resource);
+            SubscriptionImpl existing = validate(subscriptionId, resource);
+            existing.setInfo(info);
+            registerSubscription(existing, resource);
+
+            subscription = new WrappedSubscription(existing);
-            oMgr.addEventListener(subscription, subscription.getEventTypes(),
+            oMgr.addEventListener(subscription, subscription.getJcrEventTypes(),
+    //----------------------------------------------< private inner classes >---
+    /**
+     * Private inner class wrapping around an <code>Subscription</code> as
+     * present in the internal map. This allows to hide the subscription Id
+     * from other sessions, that did create the subscription.
+     */
+    private class WrappedSubscription implements Subscription {
+
+        private final Subscription delegatee;
+
+        private WrappedSubscription(Subscription subsc) {
+            this.delegatee = subsc;
+        }
+
+        public String getSubscriptionId() {
+            // always return null, since the subscription id must not be exposed
+            // but to the client, that created the subscription.
+            return null;
+        }
+
+        public Element toXml(Document document) {
+            return delegatee.toXml(document);
+        }
+    }
+
-                    subsForResource[i] = (Subscription) subscriptions.get(idIterator.next());
+                    SubscriptionImpl s = (SubscriptionImpl) subscriptions.get(idIterator.next());
+                    subsForResource[i] = new WrappedSubscription(s);
