JCR-442: Committed Nicolas' latest contrib/backup changes (patch-backup-060719.txt)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@423575 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.util.Collection;
-import org.apache.jackrabbit.core.RepositoryImpl;
-import org.apache.jackrabbit.core.config.ConfigurationParser;
-import org.apache.jackrabbit.core.config.RepositoryConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.jackrabbit.core.config.PersistenceManagerConfig;
- * The contained configuration information are: the home directory and name
- * of the repository, the access manager, file system and versioning
- * configuration, repository index configuration, the workspace directory,
- * the default workspace name, and the workspace configuration template. In
- * addition the workspace configuration object keeps track of all configured
- * workspaces.
+ * It will send different backup object, according to the expected type
+ * (ManagerBackup or WorkspaceBackup for instance).
+ *
-	
-	/** the default logger */
-    private static Logger log = LoggerFactory.getLogger(BackupConfig.class);
+    
+    private PersistenceManagerConfig pmc;
+    private File workFolder;
+    private Collection allResources;
+    private String xml;
+     * @throws IllegalAccessException 
+     * @throws InstantiationException 
+     * @throws ClassNotFoundException 
+     * @throws SizeException 
+     * @throws IOException 
-    public static BackupConfig create(String file, String home)
-            throws ConfigurationException {
+    public static BackupConfig create(String file)
+            throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, SizeException, IOException {
-        return create(new InputSource(uri.toString()), home);
+        return create(new InputSource(uri.toString()));
+     * @throws IllegalAccessException 
+     * @throws InstantiationException 
+     * @throws ClassNotFoundException 
+     * @throws SizeException 
+     * @throws IOException 
-    public static BackupConfig create(URI uri, String home)
-            throws ConfigurationException {
-        return create(new InputSource(uri.toString()), home);
+    public static BackupConfig create(URI uri)
+            throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, SizeException, IOException {
+        return create(new InputSource(uri.toString()));
+     * @throws IllegalAccessException 
+     * @throws InstantiationException 
+     * @throws ClassNotFoundException 
+     * @throws SizeException 
+     * @throws IOException 
-            throws ConfigurationException {
-        return create(new InputSource(input), home);
+            throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, SizeException, IOException {
+        return create(new InputSource(input));
-     * home directory path will be used as the ${rep.home} parser variable.
+     * home directory workFolder will be used as the ${rep.home} parser variable.
-     * directories, etc.). The {@link ConfigurationParser} class should be
+     * directories, etc.). The {@link RepositoryConfigurationParser} class should be
+     * @throws IllegalAccessException 
+     * @throws InstantiationException 
+     * @throws ClassNotFoundException 
+     * @throws SizeException 
+     * @throws IOException 
-    public static BackupConfig create(InputSource xml, String home)
-            throws ConfigurationException {
-        Properties variables = new Properties();
-        variables.setProperty(
-                ConfigurationParser.REPOSITORY_HOME_VARIABLE, home);
-        ConfigurationParser parser = new ConfigurationParser(variables);
+    public static BackupConfig create(InputSource xml)
+            throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, SizeException, IOException {
+        BackupConfigurationParser parser = new BackupConfigurationParser(new Properties());
-        // TODO: Fix this
-        // BackupConfig config = parser.parseBackupConfig(xml);
-        // config.init();
-        // return config;
-        return null;
+        BackupConfig config = parser.parseBackupConfig(xml);
+        
+        return config;
+    }
+    
+ 
+
+    //TODO see if path is really useful?
+    public BackupConfig(PersistenceManagerConfig pmc, File path, Collection allResources) throws IOException {
+        
+        //Logic application: not in the parser: this code has to be here
+        if (!(path.isDirectory() && path.canWrite())) {
+            throw new IOException();
+        }     
+        
+        this.pmc = pmc;
+        this.workFolder = path;
+        this.allResources = allResources;
-
-    public BackupConfig() {
-        // TODO Auto-generated constructor stub
+    public Collection getAllResources() {
+        return allResources;
+    public File getWorkFolder() {
+        return workFolder;
+    }
+
+    public PersistenceManagerConfig getPmc() {
+        return pmc;
+    }
+
+    /*
+     * Useful?
+     */
-    public void setRepo(RepositoryImpl impl) {
-        // TODO Auto-generated method stub
+    public String getXml() {
+        return xml;
+
