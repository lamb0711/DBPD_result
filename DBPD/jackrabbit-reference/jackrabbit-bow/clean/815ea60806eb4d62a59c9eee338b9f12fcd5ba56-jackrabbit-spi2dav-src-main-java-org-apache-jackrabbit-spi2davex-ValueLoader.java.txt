JCR-4066: spi2dav: use HttpClient4 based WebDAV API in remoting code

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1774468 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HttpClient;
-import org.apache.commons.httpclient.methods.GetMethod;
-import org.apache.commons.httpclient.methods.HeadMethod;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+
+import org.apache.http.Header;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpHead;
+import org.apache.http.protocol.HttpContext;
-import org.apache.jackrabbit.webdav.client.methods.DavMethodBase;
-import org.apache.jackrabbit.webdav.client.methods.PropFindMethod;
+import org.apache.jackrabbit.webdav.client.methods.HttpPropfind;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.PropertyType;
-import javax.jcr.RepositoryException;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Map;
-
+    private final HttpContext context;
-    ValueLoader(HttpClient client) {
+    ValueLoader(HttpClient client, HttpContext context) {
+        this.context = context;
-        GetMethod method = new GetMethod(uri);
+        HttpGet request = new HttpGet(uri);
-            int statusCode = client.executeMethod(method);
+            HttpResponse response = client.execute(request, context);
+            int statusCode = response.getStatusLine().getStatusCode();
-                target.setStream(method.getResponseBodyAsStream());
+                target.setStream(response.getEntity().getContent());
-                throw ExceptionConverter.generate(new DavException(statusCode, ("Unable to load binary at " + uri + " - Status line = " + method.getStatusLine().toString())));
+                throw ExceptionConverter.generate(new DavException(statusCode, ("Unable to load binary at " + uri + " - Status line = " + response.getStatusLine())));
-            method.releaseConnection();
+            request.releaseConnection();
-        HeadMethod method = new HeadMethod(uri);
+        HttpHead request = new HttpHead(uri);
-            int statusCode = client.executeMethod(method);
+            HttpResponse response = client.execute(request, context);
+            int statusCode = response.getStatusLine().getStatusCode();
-                    Header hdr = method.getResponseHeader(name);
+                    Header hdr = response.getFirstHeader(name);
-                throw ExceptionConverter.generate(new DavException(statusCode, ("Unable to load headers at " + uri + " - Status line = " + method.getStatusLine().toString())));
+                throw ExceptionConverter.generate(new DavException(statusCode, ("Unable to load headers at " + uri + " - Status line = " + response.getStatusLine().toString())));
-            method.releaseConnection();
+            request.releaseConnection();
-        DavMethodBase method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, nameSet, DavConstants.DEPTH_0);
-            client.executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPropfind(uri, nameSet, DavConstants.DEPTH_0);
+            HttpResponse response = client.execute(request, context);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            MultiStatusResponse[] responses = request.getResponseBodyAsMultiStatus(response).getResponses();
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
