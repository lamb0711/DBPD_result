JCR-EXT: Improvements in node type handling.
	* SessionHelper.java: Added proper equals and hashCode implementations.
	* SessionItemDefinition.java: Added proper equals and hashCode implementations.
	* SessionNodeType.java: Added proper equals and hashCode implementations.
	* SessionNodeTypeManager.java: Added proper equals and hashCode implementations.
	* package.html: Removed note about state caching.
	* Switched to using the generic node type base classes for general functionality.
	* Protected and finalized implementation classes.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169256 13f79535-47bb-0310-9956-ffa450edef68

- * the JCR ItemDef interface.
+ * the JCR ItemDefinition interface.
-public class SessionItemDefinition implements ItemDefinition {
+class SessionItemDefinition implements ItemDefinition {
+    /**
+     * Compares objects for equality. Returns <code>true</code> if the
+     * given object is a SessionItemDefinition with the same underlying item
+     * definition state, session, and declaring node type.
+     * <p>
+     * Note that the item definition state class does not override the equals
+     * method and thus the mutable state instances are compared for
+     * reference equality.
+     *
+     * @param that the object to compare this object with
+     * @return <code>true</code> if the objects are equal,
+     *         <code>false</code> otherwise
+     * @see Object#equals(Object)
+     */
+    public boolean equals(Object that) {
+        if (this == that) {
+            return true;
+        } else if (that instanceof SessionItemDefinition) {
+            return state.equals(((SessionItemDefinition) that).state)
+                && helper.equals(((SessionItemDefinition) that).helper)
+                && type.equals(((SessionItemDefinition) that).type);
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * Returns a hash code for this object. To satisfy the equality
+     * constraints the returned hash code is a combination of the
+     * hash codes of the underlying node type state, session, and declaring
+     * node type.
+     *
+     * @return hash code
+     * @see Object#hashCode()
+     */
+    public int hashCode() {
+        int code = 17;
+        code = code * 37 + state.hashCode();
+        code = code * 37 + helper.hashCode();
+        code = code * 37 + type.hashCode();
+        return code;
+    }
+
