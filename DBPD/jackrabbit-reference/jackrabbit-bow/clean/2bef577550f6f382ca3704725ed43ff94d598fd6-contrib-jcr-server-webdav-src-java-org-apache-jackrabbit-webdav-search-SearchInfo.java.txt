JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.*;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-public class SearchInfo implements SearchConstants {
+public class SearchInfo implements SearchConstants, XmlSerializable {
-    private final Element languageElem;
+    private final String language;
+    private final Namespace languageNamespace;
+    private final String query;
-        languageElem = new Element(language, languageNamespace).setText(query);
-    }
-
-    /**
-     * Create a new <code>SearchInfo</code> from the specifying document
-     * retrieved from the request body.
-     *
-     * @param searchDocument
-     * @throws IllegalArgumentException if the root element's name is other than
-     * 'searchrequest' or if it does not contain a single child element specifying
-     * the query language to be used.
-     */
-    public SearchInfo(Document searchDocument) {
-        Element searchRequest = searchDocument.getRootElement();
-        if (searchRequest == null || !XML_SEARCHREQUEST.equals(searchRequest.getName()))  {
-            throw new IllegalArgumentException("The root element must be 'searchrequest'.");
-        } else if (searchRequest.getChildren().size() != 1) {
-            throw new IllegalArgumentException("A single child element is expected with the 'searchrequest'.");
-        }
-        Element child = (Element)searchRequest.getChildren().get(0);
-        languageElem = (Element) child.detach();
+        this.language = language;
+        this.languageNamespace = languageNamespace;
+        this.query = query;
-        return languageElem.getName();
+        return language;
-        return languageElem.getNamespace();
+        return languageNamespace;
-        return languageElem.getText();
+        return query;
+     * @param document
-    public Document toXml() {
-        Element sRequestElem = new Element(XML_SEARCHREQUEST, NAMESPACE);
-        sRequestElem.addContent(languageElem);
-        return new Document(sRequestElem);
+    public Element toXml(Document document) {
+        Element sRequestElem = DomUtil.createElement(document, XML_SEARCHREQUEST, NAMESPACE);
+        DomUtil.addChildElement(sRequestElem, language, languageNamespace, query);
+        return sRequestElem;
+    }
+
+    /**
+     * Create a new <code>SearchInfo</code> from the specifying document
+     * retrieved from the request body.
+     *
+     * @param searchRequest
+     * @throws IllegalArgumentException if the root element's name is other than
+     * 'searchrequest' or if it does not contain a single child element specifying
+     * the query language to be used.
+     */
+    public static SearchInfo createFromXml(Element searchRequest) {
+        if (searchRequest == null || !XML_SEARCHREQUEST.equals(searchRequest.getLocalName()))  {
+            throw new IllegalArgumentException("The root element must be 'searchrequest'.");
+        }
+        Element first = DomUtil.getFirstChildElement(searchRequest);
+        if (first != null) {
+            return new SearchInfo(first.getLocalName(), DomUtil.getNamespace(first), DomUtil.getText(first));
+        } else {
+            throw new IllegalArgumentException("A single child element is expected with the 'DAV:searchrequest'.");
+        }
