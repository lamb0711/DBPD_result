Applying patch for JCR-1624 provided by Stephane Landelle

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@661049 13f79535-47bb-0310-9956-ffa450edef68

+import net.sf.cglib.proxy.Callback;
-import net.sf.cglib.proxy.LazyLoader;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.jackrabbit.ocm.manager.beanconverter.BeanConverter;
-import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjectsUtil;
-import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjects;
-import org.apache.jackrabbit.ocm.manager.objectconverter.ObjectConverter;
+import org.apache.jackrabbit.ocm.mapper.model.BeanDescriptor;
+import org.apache.jackrabbit.ocm.mapper.model.ClassDescriptor;
-import org.apache.jackrabbit.ocm.reflection.ReflectionUtils;
-public class ProxyManagerImpl implements ProxyManager
-{
-
-	private final static Log log = LogFactory.getLog(ProxyManagerImpl.class);
-
-
+public class ProxyManagerImpl implements ProxyManager {
-	 *
-	 * @see org.apache.jackrabbit.ocm.manager.objectconverter.ProxyManager#createBeanProxy(javax.jcr.Session, org.apache.jackrabbit.ocm.manager.objectconverter.ObjectConverter, java.lang.Class, java.lang.String)
+	 * @see org.apache.jackrabbit.ocm.manager.objectconverter.ProxyManager#createBeanProxy(javax.jcr.Session,
+	 *      org.apache.jackrabbit.ocm.manager.objectconverter.ObjectConverter,
+	 *      java.lang.Class, java.lang.String)
-	public  Object createBeanProxy(Session session, ObjectConverter objectConverter, Class beanClass, String path)
-	{
-
-       try {
-			if (!session.itemExists(path)) {
+	public Object createBeanProxy(BeanConverter beanConverter, String path, Session session, Node parentNode,
+			BeanDescriptor beanDescriptor, ClassDescriptor beanClassDescriptor, Class beanClass, Object parent) {
+		try {
+			if (path == null || !session.itemExists(path)) {
-		LazyLoader loader = new BeanLazyLoader(objectConverter, session, beanClass, path) ;
-		return  Enhancer.create(beanClass, loader);
+		Callback loader = new BeanLazyLoader(beanConverter, session, parentNode, beanDescriptor, beanClassDescriptor, beanClass, parent);
+		return Enhancer.create(beanClass, getInterfaces(beanClass), loader);
-	 *
-	 * @see org.apache.jackrabbit.ocm.manager.objectconverter.ProxyManager#createCollectionProxy(javax.jcr.Session, org.apache.jackrabbit.ocm.manager.collectionconverter.CollectionConverter, javax.jcr.Node, org.apache.jackrabbit.ocm.mapper.model.CollectionDescriptor, java.lang.Class)
+	 * @see org.apache.jackrabbit.ocm.manager.objectconverter.ProxyManager#createCollectionProxy(javax.jcr.Session,
+	 *      org.apache.jackrabbit.ocm.manager.collectionconverter.CollectionConverter,
+	 *      javax.jcr.Node,
+	 *      org.apache.jackrabbit.ocm.mapper.model.CollectionDescriptor,
+	 *      java.lang.Class)
-	public  Object createCollectionProxy(Session session, CollectionConverter collectionConverter, Node parentNode,  CollectionDescriptor collectionDescriptor, Class collectionFieldClass)
-	{
+	public Object createCollectionProxy(Session session, CollectionConverter collectionConverter, Node parentNode,
+			CollectionDescriptor collectionDescriptor, Class collectionFieldClass) {
-		if (collectionConverter.isNull(session, parentNode, collectionDescriptor, collectionFieldClass)) 	{
+		if (collectionConverter.isNull(session, parentNode, collectionDescriptor, collectionFieldClass)) {
-		//ManageableObjects manageableCollection = ManageableObjectsUtil.getManageableObjects(collectionFieldClass);
-
-		LazyLoader loader = new CollectionLazyLoader(collectionConverter, session, parentNode, collectionDescriptor, collectionFieldClass);
-		return  Enhancer.create(collectionFieldClass, loader);
+		Callback loader = new CollectionLazyLoader(collectionConverter, session, parentNode, collectionDescriptor, collectionFieldClass);
+		return Enhancer.create(collectionFieldClass, getInterfaces(collectionFieldClass), loader);
+	}
+	
+	private Class<?>[] getInterfaces(Class<?> collectionFieldClass) {
+		
+		Class<?>[] interfaces = null;
+		if (collectionFieldClass.isInterface()) {
+			// if collectionFieldClass is an interface, simply use it
+			interfaces = new Class<?>[] { collectionFieldClass };
+		} else {
+			// else, use all interfaces
+			interfaces = collectionFieldClass.getInterfaces();
+		}
+		return (Class<?>[]) ArrayUtils.add(interfaces, OcmProxy.class);
