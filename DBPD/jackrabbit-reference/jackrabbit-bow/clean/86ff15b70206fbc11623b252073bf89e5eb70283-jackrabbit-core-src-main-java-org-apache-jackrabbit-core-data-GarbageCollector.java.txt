JCR-926: BLOBFileValue and InternalValue refactoring, improved garbage collector for the global data store

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@570336 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.observation.SynchronousEventListener;
-import javax.jcr.observation.EventListener;
-    private static final int WAIT_FOR_EVENT_LISTENERS = 5000;
-
+    
+    private final int sleepBetweenEvents;
-    // TODO How long do we have to wait for the observation listeners?
-    public GarbageCollector(int sleepBetweenNodes, ScanEventListener callback) {
+    /**
+     * Create a new garbage collector. 
+     * To display the progress, a callback object may be used.
+     * 
+     * @param callback if set, this is called while scanning
+     * @param sleepBetweenNodes the number of milliseconds to sleep in the main scan loop (0 if the scan should run at full speed)
+     * @param sleepBetweenEvents the number of milliseconds to sleep while processing events (0 to avoid delays in the application)
+     */
+    public GarbageCollector(ScanEventListener callback, int sleepBetweenNodes, int sleepBetweenEvents) {
+        this.sleepBetweenEvents = sleepBetweenEvents;
-        recurse(session.getRootNode());
+        recurse(session.getRootNode(), sleepBetweenNodes);
-        try {
-            Thread.sleep(WAIT_FOR_EVENT_LISTENERS);
-        } catch (InterruptedException e) {
-            // ignore
-        }
-    private void recurse(final Node n) throws RepositoryException,
+    private void recurse(final Node n, int sleep) throws RepositoryException,
-        if (sleepBetweenNodes > 0) {
+        if (sleep > 0) {
-                Thread.sleep(sleepBetweenNodes);
+                Thread.sleep(sleep);
-            recurse(it.nextNode());
+            recurse(it.nextNode(), sleep);
+     * A SynchronousEventListener is used to make sure this method is called before the main iteration ends.
-    class Listener implements EventListener {
+    class Listener implements SynchronousEventListener {
+            if(sleepBetweenEvents > 0) {
+                try {
+                    Thread.sleep(sleepBetweenEvents);
+                } catch (InterruptedException e) {
+                    // ignore
+                }
+            }
-                            recurse(n);
+                            recurse(n, sleepBetweenEvents);
