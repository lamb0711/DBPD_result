JCR-2688: Provide utility for handling large number of child nodes/properties
applied Jukka's patch with some modifications

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@982695 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.jackrabbit.commons.iterator.Iterators.filterIterator;
-import static org.apache.jackrabbit.commons.iterator.Iterators.nodes;
-import static org.apache.jackrabbit.commons.iterator.Iterators.properties;
-
-import org.apache.jackrabbit.commons.iterator.Predicate;
+import java.util.NoSuchElementException;
+    @SuppressWarnings("unchecked")
-        return getSizedIterator(nodes(nodes), nodes.getSize());
+        return getSizedIterator(nodes, nodes.getSize());
-     * Returns a {@link SizedIterator} of the properties of <code>node</code> which
-     * excludes the <code>jcr.primaryType</code> property.
+     * Returns a {@link SizedIterator} of the properties of <code>node</code>
+     * which excludes the <code>jcr.primaryType</code> property.
-    protected SizedIterator<Property> getProperties(final Node node) throws RepositoryException {
+    protected SizedIterator<Property> getProperties(Node node) throws RepositoryException {
-        Iterator<Property> filtered = filterIterator(properties(properties), new Predicate<Property>() {
-            public boolean evaluate(Property property) {
-                try {
-                    return !JcrConstants.JCR_PRIMARYTYPE.equals(property.getName());
+        Iterator<Property> filteredIterator = new Iterator<Property>() {
+            Property next = null;
+
+            public boolean hasNext() {
+                while (next == null && properties.hasNext()) {
+                    Property p = properties.nextProperty();
+                    try {
+                        if (!JcrConstants.JCR_PRIMARYTYPE.equals(p.getName())) {
+                            next = p;
+                        }
+                    }
+                    catch (RepositoryException ignore) {
+                        next = p;
+                    }
-                catch (RepositoryException ignore) {
-                    return true;
+
+                return next != null;
+            }
+
+            public Property next() {
+                if (hasNext()) {
+                    Property property = next;
+                    next = null;
+                    return property;
+                }
+                else {
+                    throw new NoSuchElementException();
-        });
+
+            public void remove() {
+                throw new UnsupportedOperationException();
+            }
+        };
-        return getSizedIterator(filtered, size > 0 ? size - 1 : size);
+        return getSizedIterator(filteredIterator, size > 0 ? size - 1 : size);
-     * correctly reflect the number of items in <code>iterator</code>.ï¿½
+     * correctly reflect the number of items in <code>iterator</code>.
