fixing timing issue which could cause that invalid ItemImpl instances were served from the ItemManager cache.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@124016 13f79535-47bb-0310-9956-ffa450edef68

-        // notify the listeners that this instance has been
-        // permanently invalidated
+        /**
+         * notify the listeners that this instance has been
+         * permanently invalidated
+         */
-        // the state of this item has been discarded, probably as a result
-        // of calling Node.revert() or ItemImpl.setRemoved()
+        /**
+         * the state of this item has been discarded, probably as a result
+         * of calling Node.revert() or ItemImpl.setRemoved()
+         */
-                    /**
-                     * persistent item that has been transiently modified
-                     */
+                /**
+                 * persistent item that has been transiently modified
+                 */
-                    /**
-                     * persistent item that has been transiently modified or removed
-                     * and the underlying persistent state has been externally
-                     * modified since the transient modification/removal.
-                     */
+                /**
+                 * persistent item that has been transiently modified or removed
+                 * and the underlying persistent state has been externally
+                 * modified since the transient modification/removal.
+                 */
-                    // the state is a transient wrapper for the underlying
-                    // persistent state, therefor restore the
-                    // persistent state and resurrect this item instance
-                    // if necessary
+                    /**
+                     * the state is a transient wrapper for the underlying
+                     * persistent state, therefore restore the
+                     * persistent state and resurrect this item instance
+                     * if necessary
+                     */
-                    /**
-                     * persistent item that has been transiently modified or removed
-                     * and the underlying persistent state has been externally
-                     * destroyed since the transient modification/removal.
-                     */
+                /**
+                 * persistent item that has been transiently modified or removed
+                 * and the underlying persistent state has been externally
+                 * destroyed since the transient modification/removal.
+                 */
-                    // set state of this instance to 'destroyed'
+                    /**
+                     * first notify the listeners that this instance has been
+                     * permanently invalidated
+                     */
+                    notifyDestroyed();
+                    // now set state of this instance to 'destroyed'
-                    // dispose state
+                    // finally dispose state
-                    // notify the listeners that this instance has been
-                    // permanently invalidated
-                    notifyDestroyed();
-                    /**
-                     * new item that has been transiently added
-                     */
+                /**
+                 * new item that has been transiently added
+                 */
-                    // set state of this instance to 'destroyed'
+                    /**
+                     * first notify the listeners that this instance has been
+                     * permanently invalidated
+                     */
+                    notifyDestroyed();
+                    // now set state of this instance to 'destroyed'
-                    // dispose state
+                    // finally dispose state
-                    // notify the listeners that this instance has been
-                    // permanently invalidated
-                    notifyDestroyed();
-        // render this instance 'invalid'
-        status = STATUS_INVALIDATED;
-        // notify the listeners
+        /**
+         * first notify the listeners that this instance has been
+         * invalidated
+         */
+        // now render this instance 'invalid'
+        status = STATUS_INVALIDATED;
