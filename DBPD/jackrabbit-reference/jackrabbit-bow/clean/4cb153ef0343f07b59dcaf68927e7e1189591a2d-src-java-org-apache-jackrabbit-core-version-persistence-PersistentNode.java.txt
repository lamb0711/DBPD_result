- adding versioning configuratuin
- adapting versioning to new persistence manager api

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126386 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.PropertyType;
-import javax.jcr.nodetype.NodeDef;
-import javax.jcr.nodetype.PropertyDef;
-import java.util.HashSet;
-     * the node type manager
-     */
-    private final NodeTypeManagerImpl ntMgr;
-
-    /**
-     * @param ntMgr
-                             NodeTypeManagerImpl ntMgr,
-        this.ntMgr = ntMgr;
-    protected void setPropertyValue(QName name, InternalValue value)
+    protected void setPropertyValue(UpdateOperation upd, QName name, InternalValue value)
-        setPropertyValues(name, value.getType(), new InternalValue[]{value}, false);
+        setPropertyValues(upd, name, value.getType(), new InternalValue[]{value}, false);
-    protected void setPropertyValues(QName name, int type, InternalValue[] values)
+    protected void setPropertyValues(UpdateOperation upd, QName name, int type, InternalValue[] values)
-        setPropertyValues(name, type, values, true);
+        setPropertyValues(upd, name, type, values, true);
-    protected void setPropertyValues(QName name, int type, InternalValue[] values, boolean multiple)
+    protected void setPropertyValues(UpdateOperation upd, QName name, int type, InternalValue[] values, boolean multiple)
-        PropertyState prop = getOrCreatePropertyState(name, type, multiple);
+        PropertyState prop = getOrCreatePropertyState(upd, name, type, multiple);
+
-    private PropertyState getOrCreatePropertyState(QName name, int type, boolean multiValued)
+    private PropertyState getOrCreatePropertyState(UpdateOperation upd, QName name, int type, boolean multiValued)
-                propState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                if (propState.getStatus()==ItemState.STATUS_EXISTING) {
+                    propState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                }
+                // although this is not quite correct, we mark node as modified aswell
+                if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
+                    nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                }
-            PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
-            //@todo create property state inside an update
-            PropertyState propState = new PropertyState(name, nodeState.getUUID(),
-                    PropertyState.STATUS_NEW, false);
+            PropertyState propState = upd.createNew(name, nodeState.getUUID());
-            propState.setDefinitionId(new PropDefId(def.unwrap()));
-
+            propState.setDefinitionId(PropDefId.valueOf("0"));
-            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+            if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
+                nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+            }
-     * retrieves the property definition for the given contraints
-     *
-     * @param propertyName
-     * @param type
-     * @param multiValued
-     * @return
-     * @throws RepositoryException
-     */
-    protected PropertyDefImpl getApplicablePropertyDef(QName propertyName,
-                                                       int type, boolean multiValued)
-            throws RepositoryException {
-        PropDef pd = getEffectiveNodeType().getApplicablePropertyDef(propertyName, type, multiValued);
-        return ntMgr.getPropDef(new PropDefId(pd));
-    }
-
-    /**
-     * Retrieves the node definition for the given contraints.
-     *
-     * @param nodeName
-     * @param nodeTypeName
-     * @return
-     * @throws RepositoryException
-     */
-    protected NodeDefImpl getApplicableChildNodeDef(QName nodeName, QName nodeTypeName)
-            throws RepositoryException {
-        ChildNodeDef cnd = getEffectiveNodeType().getApplicableChildNodeDef(nodeName, nodeTypeName);
-        return ntMgr.getNodeDef(new NodeDefId(cnd));
-    }
-
-    /**
-     * Returns the effective (i.e. merged and resolved) node type representation
-     * of this node's primary and mixin node types.
-     *
-     * @return the effective node type
-     * @throws RepositoryException
-     */
-    protected EffectiveNodeType getEffectiveNodeType() throws RepositoryException {
-        // build effective node type of mixins & primary type
-        NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
-        // existing mixin's
-        HashSet set = new HashSet(nodeState.getMixinTypeNames());
-        // primary type
-        set.add(nodeState.getNodeTypeName());
-        try {
-            return ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
-        } catch (NodeTypeConflictException ntce) {
-            String msg = "internal error: failed to build effective node type for node " + nodeState.getUUID();
-            throw new RepositoryException(msg, ntce);
-        }
-    }
-
-    /**
-    protected boolean removeNode(QName name) throws RepositoryException {
-        return removeNode(name, 1);
+    protected boolean removeNode(UpdateOperation upd, QName name) throws RepositoryException {
+        return removeNode(upd, name, 1);
-    protected boolean removeNode(QName name, int index) throws RepositoryException {
-        if (nodeState.removeChildNodeEntry(name, index)) {
-            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-            return true;
-        } else {
-            return false;
+    protected boolean removeNode(UpdateOperation upd, QName name, int index) throws RepositoryException {
+        try {
+            NodeState.ChildNodeEntry entry = nodeState.getChildNodeEntry(name, index);
+            if (entry == null) {
+                return false;
+            } else {
+                ItemState state = stateMgr.getItemState(new NodeId(entry.getUUID()));
+                upd.destroy(state);
+                nodeState.removeChildNodeEntry(name, index);
+                nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                return true;
+            }
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
-            return new PersistentNode(stateMgr, ntMgr, state);
+            return new PersistentNode(stateMgr, state);
-            return new PersistentNode(stateMgr, ntMgr, state);
+            return new PersistentNode(stateMgr, state);
-    protected PersistentNode addNode(QName nodeName, QName nodeTypeName)
+    protected PersistentNode addNode(UpdateOperation upd, QName nodeName, QName nodeTypeName)
-        NodeTypeImpl nodeType = ntMgr.getNodeType(nodeTypeName);
-        NodeDefImpl def;
-        try {
-            def = getApplicableChildNodeDef(name, nodeType == null ? null : nodeType.getQName());
-        } catch (RepositoryException re) {
-            // hack, use nt:unstructured as parent
-            try {
-                NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
-                EffectiveNodeType ent = ntReg.getEffectiveNodeType(new QName[]{NodeTypeRegistry.NT_UNSTRUCTURED});
-                ChildNodeDef cnd = ent.getApplicableChildNodeDef(name, nodeTypeName);
-                def = ntMgr.getNodeDef(new NodeDefId(cnd));
-            } catch (NodeTypeConflictException e) {
-                String msg = "no definition found in parent node's node type for new node";
-                throw new ConstraintViolationException(msg, re);
-            }
-        }
-
-        if (nodeType == null) {
-            // use default node type
-            nodeType = (NodeTypeImpl) def.getDefaultPrimaryType();
-        }
-        return createChildNode(nodeName, def, nodeType, null);
+        return createChildNode(upd, nodeName, nodeTypeName, null);
-     * @param def
-     * @param nodeType
-     * @throws RepositoryException
-    private PersistentNode createChildNode(QName name, NodeDefImpl def,
-                                           NodeTypeImpl nodeType, String uuid)
-            throws RepositoryException {
+    private PersistentNode createChildNode(UpdateOperation upd, QName name, QName nodeTypeName, String uuid) {
-        NodeState state = null;
-        //@todo create node state inside an update
-        state = new NodeState(uuid, nodeType.getQName(), parentUUID,
-                NodeState.STATUS_NEW, false);
-        state.setDefinitionId(new NodeDefId(def.unwrap()));
+        NodeState state = upd.createNew(uuid, nodeTypeName, parentUUID);
+        state.setDefinitionId(NodeDefId.valueOf("0"));
-        PersistentNode node = new PersistentNode(stateMgr, ntMgr, state);
+        PersistentNode node = new PersistentNode(stateMgr, state);
-        nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-
-        // add 'auto-create' properties defined in node type
-        PropertyDef[] pda = nodeType.getAutoCreatePropertyDefs();
-        for (int i = 0; i < pda.length; i++) {
-            PropertyDefImpl pd = (PropertyDefImpl) pda[i];
-            node.getOrCreatePropertyState(pd.getQName(), pd.getRequiredType(), pd.isMultiple());
+        if (nodeState.getStatus()==ItemState.STATUS_EXISTING) {
+            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-
-        // recursively add 'auto-create' child nodes defined in node type
-        NodeDef[] nda = nodeType.getAutoCreateNodeDefs();
-        for (int i = 0; i < nda.length; i++) {
-            NodeDefImpl nd = (NodeDefImpl) nda[i];
-            node.createChildNode(nd.getQName(), nd, (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
-        }
-
-        // store primary type
-        node.setPropertyValue(ItemImpl.PROPNAME_PRIMARYTYPE, InternalValue.create(nodeType.getQName()));
-                children[i] = new PersistentNode(stateMgr, ntMgr, state);
+                children[i] = new PersistentNode(stateMgr, state);
-    protected void store() throws RepositoryException {
+    protected void store(UpdateOperation upd) throws RepositoryException {
-            UpdateOperation update = stateMgr.beginUpdate();
-            store(nodeState, update);
-            update.end();
+            store(upd, nodeState);
-    private void store(NodeState state, UpdateOperation update)
+    private void store(UpdateOperation update, NodeState state)
-        if (state.isTransient()) {
+        if (state.getStatus()!=ItemState.STATUS_EXISTING) {
-                if (pstate.isTransient()) {
+                if (pstate.getStatus()!=ItemState.STATUS_EXISTING) {
-                store(nstate, update);
+                store(update, nstate);
-        if (state.isTransient()) {
+        if (state.getStatus()!=ItemState.STATUS_EXISTING) {
-                if (pstate.isTransient()) {
+                if (pstate.getStatus()!=ItemState.STATUS_EXISTING) {
-    protected void copyFrom(PropertyImpl prop) throws RepositoryException {
+    protected void copyFrom(UpdateOperation upd, PropertyImpl prop) throws RepositoryException {
-            setPropertyValues(prop.getQName(), type, values);
+            setPropertyValues(upd, prop.getQName(), type, values);
-            setPropertyValue(prop.getQName(), prop.internalGetValue());
+            setPropertyValue(upd, prop.getQName(), prop.internalGetValue());
-    /**
-     * sets the mixing node type and adds the respective property
-     *
-     * @param mixins
-     * @throws RepositoryException
-     */
-    protected void setMixinNodeTypes(QName[] mixins) throws RepositoryException {
-        HashSet set = new HashSet();
-        InternalValue[] values = new InternalValue[mixins.length];
-        for (int i = 0; i < mixins.length; i++) {
-            set.add(mixins[i]);
-            values[i] = InternalValue.create(mixins[i]);
-        }
-        nodeState.setMixinTypeNames(set);
-        setPropertyValues(ItemImpl.PROPNAME_MIXINTYPES, PropertyType.NAME, values);
-    }
