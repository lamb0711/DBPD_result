JCR-1024: Only load root node definition when required

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@555290 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-import java.util.Collections;
-import java.util.ArrayList;
-    private final QNodeDefinition rootNodeDefintion;
+    private QNodeDefinition rootNodeDefinition;
-    public ItemDefinitionProviderImpl(QNodeDefinition rootNodeDefintion, 
-                                      EffectiveNodeTypeProvider entProvider,
+    public ItemDefinitionProviderImpl(EffectiveNodeTypeProvider entProvider,
-        this.rootNodeDefintion = rootNodeDefintion;
-    public QNodeDefinition getRootNodeDefinition() {
-        return rootNodeDefintion;
+    public QNodeDefinition getRootNodeDefinition() throws RepositoryException {
+        if (rootNodeDefinition == null) {
+            rootNodeDefinition = service.getNodeDefinition(
+                    sessionInfo, service.getRootId(sessionInfo));
+        }
+        return rootNodeDefinition;
+        if (nodeState.getHierarchyEntry().getParent() == null) {
+            return getRootNodeDefinition();
+        }
-    /**
-     * Returns all applicable property definitions for a property with the
-     * specified name, type and multiValued characteristics.
-     *
-     * @param ent
-     * @param name
-     * @param type
-     * @param multiValued
-     * @return
-     * @throws ConstraintViolationException
-     */
-    private static QPropertyDefinition[] getQPropertyDefinitions(EffectiveNodeType ent,
-                                                                 QName name, int type,
-                                                                 boolean multiValued)
-            throws ConstraintViolationException {
-        QPropertyDefinition named[] = ent.getNamedQPropertyDefinitions(name);
-        QPropertyDefinition unnamed[] = ent.getUnnamedQPropertyDefinitions();
-        QPropertyDefinition all[] = new QPropertyDefinition[named.length + unnamed.length];
-        for (int i = 0; i < all.length; i++) {
-            if (i < named.length) {
-                all[i] = named[i];
-            }
-            else {
-                all[i] = unnamed[i - named.length];
-            }
-        }
-
-        QPropertyDefinition result[] = getMatchingPropDefs(all, type, multiValued);
-        if (result.length == 0) {
-            throw new ConstraintViolationException("no matching property definition found for " + name);
-        }
-        else {
-            return result;
-        }
-    }
-
-
-    private static QPropertyDefinition[] getMatchingPropDefs(QPropertyDefinition[] defs, int type, boolean multiValued) {
-        List result = Collections.EMPTY_LIST;
-
-        for (int i = 0; i < defs.length; i++) {
-            QItemDefinition qDef = defs[i];
-            if (!qDef.definesNode()) {
-                QPropertyDefinition pd = (QPropertyDefinition)qDef;
-                int reqType = pd.getRequiredType();
-                // match type
-                if (reqType == PropertyType.UNDEFINED || type == PropertyType.UNDEFINED || reqType == type) {
-                    // match multiValued flag
-                    if (multiValued == pd.isMultiple()) {
-                        // found match
-                        if (result.isEmpty()) {
-                            result = Collections.singletonList(pd);
-                        }
-                        else {
-                            if (result.size() == 1) {
-                                result = new ArrayList(result);
-                            }
-                            result.add(pd);
-                        }
-                    }
-                }
-            }
-        }
-        return (QPropertyDefinition[])result.toArray(QPropertyDefinition.EMPTY_ARRAY);
-    }
