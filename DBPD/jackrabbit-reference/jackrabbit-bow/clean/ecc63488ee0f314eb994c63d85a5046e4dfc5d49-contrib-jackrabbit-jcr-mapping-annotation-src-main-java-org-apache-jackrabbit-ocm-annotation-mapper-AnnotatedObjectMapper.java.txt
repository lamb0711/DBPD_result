continue to work on the annotation support - Mainly : 
1/ Add Bean annotation. 
2/ Review other annotation in order to have the same name used in the xml mapping. 
3/ Drop AnnoterObjectContentManagerImpl. We can use the ObjectContentManagerImpl with the annotation mapper. 


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@563260 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileInputStream;
-import javax.jcr.NamespaceException;
-import org.apache.commons.beanutils.PropertyUtils;
+import org.apache.jackrabbit.ocm.annotation.Bean;
+import org.apache.jackrabbit.ocm.annotation.Node;
+import org.apache.jackrabbit.ocm.exception.IncorrectPersistentClassException;
+import org.apache.jackrabbit.ocm.mapper.model.BeanDescriptor;
-import org.apache.jackrabbit.ocm.nodemanagement.impl.jackrabbit.NodeTypeManagerImpl;
-			List<String> annotatedClassNames) throws ClassNotFoundException {
+			List<String> annotatedClassNames, 
+			NodeTypeManager nodeTypeManager ) throws ClassNotFoundException {
-			NodeTypeManager nodeTypeManager = new NodeTypeManagerImpl();
-
-		for (ClassDescriptor descriptor : descriptorMap.values()) {
-			Class<?> clazz;
-			try {
-				clazz = Class.forName(descriptor.getClassName());
-				log.info("Registering Namespace "
-						+ AnnotationHelper.getJcrNode(clazz).namespace()
-						+ " with prefix "
-						+ AnnotationHelper.getJcrNode(clazz).prefix());
-				session.getWorkspace().getNamespaceRegistry()
-						.registerNamespace(
-								AnnotationHelper.getJcrNode(clazz).prefix(),
-								AnnotationHelper.getJcrNode(clazz).namespace());
-			} catch (NamespaceException e) {
-				log.info("Unable to register namespace, " + e.getMessage());
-			} catch (Exception e2) {
-				throw new RuntimeException(e2);
-			}
-		}
-	private ClassDescriptor buildClassDescriptor(Class clazz)
-			throws ClassNotFoundException {
+	private ClassDescriptor buildClassDescriptor(Class clazz) throws ClassNotFoundException {
+		Node annotationNode =  (Node) clazz.getAnnotation(Node.class);
-		descriptor.setJcrNodeType(AnnotationHelper.getJcrNodeType(clazz));
-		descriptor.setJcrSuperTypes("nt:base");
+		descriptor.setJcrNodeType(annotationNode.jcrNodeType());
+		descriptor.setJcrSuperTypes(annotationNode.jcrSuperTypes());		
+		descriptor.setJcrMixinTypes(annotationNode.jcrMixinTypes());
+		descriptor.setExtend(annotationNode.extend());		
+		descriptor.setAbstract(annotationNode.isAbstract());
-
-		// TODO add mixin support
-		// descriptor.setMixin(AnnotationHelper.getJcrNode(clazz).mixin());
-
+		
+		addBeanDescriptors(descriptor, clazz);
-	private void addCollectionDescriptors(ClassDescriptor descriptor,
-			Class clazz) {
+	private void addCollectionDescriptors(ClassDescriptor descriptor,Class clazz) {
-		PropertyDescriptor[] propertyDescriptors = beanInfo
-				.getPropertyDescriptors();
+		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
-			Collection jcrChildNode = propertyDescriptor.getReadMethod()
-					.getAnnotation(Collection.class);
+			Collection jcrChildNode = propertyDescriptor.getReadMethod().getAnnotation(Collection.class);
-				ClassDescriptor classDescriptor = descriptorMap
-						.get(targetClass);
+				ClassDescriptor classDescriptor = descriptorMap.get(targetClass);
-				collectionDescriptor.setJcrName(AnnotationHelper
-						.getJcrNodeType(targetClass));
-				collectionDescriptor.setDefaultPrimaryType(AnnotationHelper
-						.getJcrNodeType(targetClass));
-				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode
-						.sameNameSiblings());
-				collectionDescriptor.setJcrAutoCreated(jcrChildNode
-						.autoCreate());
+				if (jcrChildNode.jcrName() != null && ! jcrChildNode.jcrName().equals(""))
+				{
+				   collectionDescriptor.setJcrName(jcrChildNode.jcrName());
+				}
+				else
+				{
+				   collectionDescriptor.setJcrName(propertyDescriptor.getName());
+				}
+				
+				Node annotationNode = (Node) targetClass.getAnnotation(Node.class);
+				collectionDescriptor.setDefaultPrimaryType(annotationNode.jcrNodeType());
+				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode.sameNameSiblings());
+				collectionDescriptor.setJcrAutoCreated(jcrChildNode.autoCreate());
-				collectionDescriptor.setJcrOnParentVersion(jcrChildNode
-						.onParentVersion());
+				collectionDescriptor.setJcrOnParentVersion(jcrChildNode.onParentVersion());
-				collectionDescriptor.setAutoRetrieve(jcrChildNode
-						.autoRetrieve());
+				collectionDescriptor.setAutoRetrieve(jcrChildNode.autoRetrieve());
-				collectionDescriptor.setCollectionClassName(propertyDescriptor
-						.getReadMethod().getReturnType().getName());
+				collectionDescriptor.setCollectionClassName(propertyDescriptor.getReadMethod().getReturnType().getName());
-				collectionDescriptor.setJcrNodeType(AnnotationHelper
-						.getJcrNodeType(targetClass));
-				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode
-						.sameNameSiblings());
+				collectionDescriptor.setJcrNodeType(annotationNode.jcrNodeType());
+				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode.sameNameSiblings());
+	
+	private void addBeanDescriptors(ClassDescriptor descriptor,Class clazz) {
+		BeanInfo beanInfo;
+		try {
+			beanInfo = Introspector.getBeanInfo(clazz);
+		} catch (IntrospectionException e) {
+			throw new RuntimeException(e);
+		}
+		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
+		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
+			Bean jcrChildNode = propertyDescriptor.getReadMethod().getAnnotation(Bean.class);
+			if (jcrChildNode != null) {
+				
+				BeanDescriptor beanDescriptor = new BeanDescriptor();
+				beanDescriptor.setFieldName(propertyDescriptor.getName());
+				if (jcrChildNode.jcrName() != null && ! jcrChildNode.jcrName().equals(""))
+				{
+				   beanDescriptor.setJcrName(jcrChildNode.jcrName());
+				}
+				else
+				{
+					beanDescriptor.setJcrName(propertyDescriptor.getName());
+				}
+				
+				beanDescriptor.setProxy(jcrChildNode.proxy());				
+				beanDescriptor.setConverter(jcrChildNode.converter().getName());
+				beanDescriptor.setAutoInsert(jcrChildNode.autoInsert());
+				beanDescriptor.setAutoRetrieve(jcrChildNode.autoRetrieve());
+				beanDescriptor.setAutoUpdate(jcrChildNode.autoUpdate());
+				beanDescriptor.setJcrNodeType(jcrChildNode.jcrType());
+				beanDescriptor.setJcrAutoCreated(jcrChildNode.jcrAutoCreated());
+				beanDescriptor.setJcrMandatory(jcrChildNode.jcrMandatory());
+				beanDescriptor.setJcrOnParentVersion(jcrChildNode.jcrOnParentVersion());
+				beanDescriptor.setJcrProtected(jcrChildNode.jcrProtected());			            
+				beanDescriptor.setJcrSameNameSiblings(jcrChildNode.jcrSameNameSiblings());				
+
+				descriptor.addBeanDescriptor(beanDescriptor);
+			}
+		}
+
+	}
+	
-				FieldDescriptor fieldDescriptor = new FieldDescriptor();
-				PropertyUtils.getPropertyDescriptors(clazz);
+				FieldDescriptor fieldDescriptor = new FieldDescriptor();				
-				fieldDescriptor.setPath(jcrProperty.path());
-				fieldDescriptor.setId(jcrProperty.id());
-				fieldDescriptor.setFieldType(propertyDescriptor.getReadMethod().getReturnType().getName());
+				fieldDescriptor.setId(jcrProperty.id());				
+				fieldDescriptor.setPath(jcrProperty.path());
+				fieldDescriptor.setUuid(jcrProperty.uuid());
-				fieldDescriptor.setJcrMandatory(jcrProperty.mandatory());
-				fieldDescriptor.setJcrAutoCreated(jcrProperty.autoCreated());
-				fieldDescriptor.setJcrMultiple(jcrProperty.mutiple());
+				// It is not possible to set a null value into a annotation attribute.
+				// If the converter == Object.class, it shoudl be considered as null
+				if (! jcrProperty.converter().equals(Object.class))
+				{
+				    fieldDescriptor.setConverter(jcrProperty.converter().getName());
+				}
+				fieldDescriptor.setJcrDefaultValue(jcrProperty.jcrDefaultValue());			
+				fieldDescriptor.setJcrValueConstraints(jcrProperty.jcrDefaultValue());
+				fieldDescriptor.setJcrType(jcrProperty.jcrType());
+				
+				fieldDescriptor.setJcrAutoCreated(jcrProperty.jcrAutoCreated());
+				fieldDescriptor.setJcrMandatory(jcrProperty.jcrMandatory());
+				fieldDescriptor.setJcrOnParentVersion(jcrProperty.jcrOnParentVersion());
+				fieldDescriptor.setJcrProtected(jcrProperty.jcrProtected());
+				fieldDescriptor.setJcrMultiple(jcrProperty.jcrMultiple());
+				
+	}    
+    
+
+    	
+	public ClassDescriptor getClassDescriptorByClass(Class clazz) {
+		ClassDescriptor descriptor = (ClassDescriptor) descriptorMap.get(clazz);
+		 if (descriptor==null) {
+				throw new IncorrectPersistentClassException("Class of type: " + clazz.getName() + " has no descriptor.");
+		   }
+	       return descriptor ;
-	public ClassDescriptor getClassDescriptorByClass(Class arg0) {
-		return descriptorMap.get(arg0);
-	}
-
-	public ClassDescriptor getClassDescriptorByNodeType(String arg0) {
-		return nodeTypeMap.get(arg0);
+	public ClassDescriptor getClassDescriptorByNodeType(String jcrNodeType) {
+		ClassDescriptor descriptor =  nodeTypeMap.get(jcrNodeType);
+		 if (descriptor==null) {
+			 throw new IncorrectPersistentClassException("Node type: " + jcrNodeType + " has no descriptor.");
+		   }
+	       return descriptor ;
+		
