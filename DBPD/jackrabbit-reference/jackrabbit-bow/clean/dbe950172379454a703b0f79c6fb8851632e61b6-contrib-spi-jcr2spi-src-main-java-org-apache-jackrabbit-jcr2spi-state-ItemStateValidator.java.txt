remove ItemStateException (and subclasses) and replace their usage with RepositoryException and subclasses respectively

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520315 13f79535-47bb-0310-9956-ffa450edef68

-                    } catch (ItemStateException e) {
+                    } catch (RepositoryException e) {
-        try {
-            NodeState parent = propState.getParent();
-            QPropertyDefinition def = propState.getDefinition();
-            checkWriteProperty(parent, propState.getQName(), def, options);
-        } catch (NoSuchItemStateException e) {
-            throw new ItemNotFoundException(e);
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+        NodeState parent = propState.getParent();
+        QPropertyDefinition def = propState.getDefinition();
+        checkWriteProperty(parent, propState.getQName(), def, options);
-        try {
-            checkIsWritable(targetState.getParent(), options);
-        } catch (NoSuchItemStateException e) {
-            throw new ItemNotFoundException(e);
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+        checkIsWritable(targetState.getParent(), options);
-            } catch (ItemNotFoundException infe) {
+            } catch (ItemNotFoundException e) {
-                throw new RepositoryException(msg, infe);
+                throw new RepositoryException(msg, e);
-        try {
-            NodeState nodeState = (itemState.isNode()) ? (NodeState)itemState : itemState.getParent();
-            mgrProvider.getVersionManager().checkIsCheckedOut(nodeState);
-        } catch (NoSuchItemStateException e) {
-            throw new ItemNotFoundException(e);
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+
+        NodeState nodeState = (itemState.isNode()) ? (NodeState)itemState : itemState.getParent();
+        mgrProvider.getVersionManager().checkIsCheckedOut(nodeState);
-        try {
-            // make sure there's no foreign lock present the node (or the parent node
-            // in case the state represents a PropertyState).
-            NodeState nodeState = (itemState.isNode()) ? ((NodeState)itemState) : itemState.getParent();
-            mgrProvider.getLockManager().checkLock(nodeState);
-        } catch (NoSuchItemStateException e) {
-            throw new ItemNotFoundException(e);
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+        // make sure there's no foreign lock present the node (or the parent node
+        // in case the state represents a PropertyState).
+        NodeState nodeState = (itemState.isNode()) ? ((NodeState)itemState) : itemState.getParent();
+        mgrProvider.getLockManager().checkLock(nodeState);
-            } catch (ItemStateException e) {
-                // should not occur. existance has been asserted before
-                throw new RepositoryException(e);
+                throw new ItemExistsException("Property '" + pe.getQName() + "' already exists.");
+            } catch (ItemNotFoundException e) {
+                // apparently conflicting entry does not exist any more
+                // ignore and return
-            throw new ItemExistsException("Property '" + pe.getQName() + "' already exists.");
-            } catch (NoSuchItemStateException e) {
+            } catch (ItemNotFoundException e) {
-            } catch (ItemStateException e) {
-                // should not occur, since existence has been asserted before
-                throw new RepositoryException(e);
