JCR-1169 Distribution of commons classes (adjust jackrabbit-core)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@590014 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.NameFactoryImpl;
+import org.apache.jackrabbit.name.PathBuilder;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.conversion.MalformedPathException;
+import org.apache.jackrabbit.conversion.NameResolver;
+import javax.jcr.NamespaceException;
-    private NamespaceResolver resolver;
+    private NameResolver resolver;
-     * The QName of the node type in the from clause.
+     * The Name of the node type in the from clause.
-    private QName nodeTypeName;
+    private Name nodeTypeName;
-                               NamespaceResolver resolver,
+                               NameResolver resolver,
-                                            NamespaceResolver resolver,
+                                            NameResolver resolver,
-                    parser.setNamespaceResolver(resolver);
+                    parser.setNameResolver(resolver);
-    public static String toString(QueryRootNode root, NamespaceResolver resolver)
+    public static String toString(QueryRootNode root, NameResolver resolver)
-                root.addSelectProperty(new QName(QName.NS_REP_URI, "excerpt(.)"));
+                root.addSelectProperty(NameFactoryImpl.getInstance().create(Name.NS_REP_URI, "excerpt(.)"));
-                if (!node.getName().equals(QName.NT_BASE)) {
+                if (!node.getName().equals(NameConstants.NT_BASE)) {
-            final QName[] tmp = new QName[2];
+            final Name[] tmp = new Name[2];
-            QName identifier = tmp[0];
+            Name identifier = tmp[0];
-            if (identifier != null && identifier.equals(QName.JCR_PATH)) {
+            if (identifier != null && identifier.equals(NameConstants.JCR_PATH)) {
-                        QName.JCR_PRIMARYTYPE, type,
+                        NameConstants.JCR_PRIMARYTYPE, type,
-        final QName[] identifier = new QName[1];
+        final Name[] identifier = new Name[1];
-                Path.PathBuilder builder = new Path.PathBuilder();
+                PathBuilder builder = new PathBuilder();
-                                                      QName propertyName,
+                                                      Name propertyName,
-                Path.PathBuilder builder = new Path.PathBuilder();
+                PathBuilder builder = new PathBuilder();
-                QName qName = null;
+                Name qName = null;
-                        qName = NameFormat.parse(name, resolver);
+                        qName = resolver.getQName(name);
+                    } catch (NamespaceException e) {
+                        throw new IllegalArgumentException("Illegal name: " + name);
