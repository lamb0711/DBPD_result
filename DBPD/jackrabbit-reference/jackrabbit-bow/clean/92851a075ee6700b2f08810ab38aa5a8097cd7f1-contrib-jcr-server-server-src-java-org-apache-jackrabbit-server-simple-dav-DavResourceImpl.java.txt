[JCR-103] Add plugable mechanism for import/export of dav resources

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160914 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.JCRConstants;
+import org.apache.jackrabbit.server.io.ImportContext;
+import org.apache.jackrabbit.server.io.ImportNCResourceChain;
+import org.apache.jackrabbit.server.io.ImportCollectionChain;
+import org.apache.log4j.Logger;
-public class DavResourceImpl implements DavResource {
+public class DavResourceImpl implements DavResource, JCRConstants {
+
+    /** the default logger */
+    private static final Logger log = Logger.getLogger(DavResourceImpl.class);
-        if (node.isNodeType("nt:resource") || node.isNodeType("nt:file")) {
+        if (node.isNodeType(NT_RESOURCE) || node.isNodeType(NT_FILE)) {
-	    Node file;
-	    boolean makeVersionable = true; // todo: to be configurable somewhere
-	    if (node.hasNode(fileName)) {
-		file = node.getNode(fileName);
-		if (file.hasNode("jcr:content")) {
-		    // remove an existing repository entry for 'overwriting' is not possible
-		    file.getNode("jcr:content").remove();
-		}
-	    } else {
-		file = node.addNode(fileName, "nt:file");
-		if (makeVersionable) {
-		    file.addMixin("mix:versionable");
-		}
-	    }
-
-	    if (fileName.endsWith(".xml")) {
-		importXml(file, in, "text/xml");
-	    } else {
-		// todo: retrieve proper mimetype from filename
-		importFile(file, in, "application/octet-stream");
-	    }
+            ImportContext ctx = new ImportContext(node);
+            ctx.setInputStream(in);
+            ctx.setSystemId(fileName);
+            ImportNCResourceChain.getChain().execute(ctx);
+            log.error("Error while executing import chain: " + e.toString());
+            log.error("Error while executing import chain: " + e.toString());
+            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
+        } catch (Exception e) {
+            log.error("Error while executing import chain: " + e.toString());
-     * Imports a xml into the repository
-     *
-     * @param parentNode
-     * @param in
-     * @param contentType
-     * @throws RepositoryException
-     * @throws IOException
-     */
-    private void importXml(Node parentNode, InputStream in, String contentType)
-	    throws RepositoryException, IOException {
-	Node content = parentNode.addNode("jcr:content", "nt:unstructured");
-	content.setProperty("jcr:mimeType", contentType);
-	content.setProperty("jcr:lastModified", Calendar.getInstance());
-	session.getRepositorySession().importXML(content.getPath(), in);
-    }
-
-    /**
-     * Imports a plain file to the repository
-     *
-     * @param parentNode
-     * @param in
-     * @param contentType
-     * @throws RepositoryException
-     */
-    private void importFile(Node parentNode, InputStream in, String contentType)
-	    throws RepositoryException {
-	Node content = parentNode.addNode("jcr:content", "nt:resource");
-	content.setProperty("jcr:mimeType", contentType);
-	content.setProperty("jcr:encoding", "");
-	content.setProperty("jcr:data", in);
-	content.setProperty("jcr:lastModified", Calendar.getInstance());
-    }
-
-    /**
-            node.addNode(member.getDisplayName(), "nt:folder");
+            ImportContext ctx = new ImportContext(node);
+            ctx.setSystemId(member.getDisplayName());
+            ImportCollectionChain.getChain().execute(ctx);
+            log.error("Error while executing import chain: " + e.toString());
+            log.error("Error while executing import chain: " + e.toString());
+        } catch (Exception e) {
+            log.error("Error while executing import chain: " + e.toString());
+            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
-            } else {
-                // not-jcr lockable >> check for webdav lock
+            }
+
+            // could not retrieve jcr-lock (either not jcr-lockable or the lock has
+            // been created before the node was made jcr-lockable. test if a simple
+            // webdav lock is present.
+            if (lock == null) {
-	if (isLockable(lockInfo.getType(), lockInfo.getScope())) {
-	    if (isJsrLockable()) {
+        if (isLockable(lockInfo.getType(), lockInfo.getScope())) {
+            // todo: deal with existing locks, that may have been created, before the node was jcr-lockable...            
+            if (isJsrLockable()) {
-		// create a new lock which creates a random lock token
+		// create a new webdav lock
-        /* since lock is always has infinite timeout >> no extra refresh needed
-           return a lockdiscovery with the lock-info and the default scope and type */
-        ActiveLock lock = getLock(Type.WRITE, Scope.EXCLUSIVE);
+        ActiveLock lock = getLock(lockInfo.getType(), lockInfo.getScope());
-           throw new DavException(DavServletResponse.SC_PRECONDITION_FAILED, "No lock present on resource " + getResourcePath());
+           throw new DavException(DavServletResponse.SC_PRECONDITION_FAILED, "No lock with the given type/scope present on resource " + getResourcePath());
+        /* since lock has infinite lock (simple) or undefined timeout (jcr)
+           return the lock as retrieved from getLock. */
