JCR-1011: JCR2SPI: add configurable cache for Item instances (ItemManager)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@619416 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.ItemStateCreationListener;
-import org.apache.commons.collections.map.ReferenceMap;
+import javax.jcr.Workspace;
-import java.util.Map;
-public class ItemManagerImpl implements Dumpable, ItemManager {
+public class ItemManagerImpl implements Dumpable, ItemManager, ItemStateCreationListener {
-    private Map itemCache;
+    private final ItemCache itemCache;
+     * @param cache the ItemCache to be used.
-    ItemManagerImpl(HierarchyManager hierMgr, SessionImpl session) {
+    ItemManagerImpl(HierarchyManager hierMgr, SessionImpl session, ItemCache cache) {
-        /* Setup item cache with weak keys (ItemState) and weak values (Item).*/
-        itemCache = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);
+        itemCache = cache;
+
+        // start listening to creation of ItemStates upon batch-reading in the
+        // workspace item state factory.
+        Workspace wsp = session.getWorkspace();
+        if (wsp instanceof WorkspaceImpl) {
+            ((WorkspaceImpl) wsp).getItemStateFactory().addCreationListener(this);
+        }
+        // stop listening
+        Workspace wsp = session.getWorkspace();
+        if (wsp instanceof WorkspaceImpl) {
+            ((WorkspaceImpl) wsp).getItemStateFactory().removeCreationListener(this);
+        }
+        // aftwards clear the cache.
-        Item item = retrieveItem(itemState);
+        Item item = itemCache.getItem(itemState);
-    //----------------------------------------------< ItemLifeCycleListener >---
-    /**
-     * @see ItemLifeCycleListener#itemCreated(Item)
-     */
-    public void itemCreated(Item item) {
-        if (!(item instanceof ItemImpl)) {
-            String msg = "Incompatible Item object: " + ItemImpl.class.getName() + " expected.";
-            throw new IllegalArgumentException(msg);
-        }
-        if (log.isDebugEnabled()) {
-            log.debug("created item " + item);
-        }
-        // add instance to cache
-        cacheItem(((ItemImpl)item).getItemState(), item);
-    }
-
-    /**
-     * @see ItemLifeCycleListener#itemInvalidated(Item)
-     */
-    public void itemInvalidated(Item item) {
-        if (!(item instanceof ItemImpl)) {
-            String msg = "Incompatible Item object: " + ItemImpl.class.getName() + " expected.";
-            throw new IllegalArgumentException(msg);
-        }
-        if (log.isDebugEnabled()) {
-            log.debug("invalidated item " + item);
-        }
-        // remove instance from cache
-        evictItem(((ItemImpl)item).getItemState());
-    }
-
-    /**
-     * @see ItemLifeCycleListener#itemDestroyed(Item)
-     */
-    public void itemDestroyed(Item item) {
-        if (!(item instanceof ItemImpl)) {
-            String msg = "Incompatible Item object: " + ItemImpl.class.getName() + " expected.";
-            throw new IllegalArgumentException(msg);
-        }
-        if (log.isDebugEnabled()) {
-            log.debug("destroyed item " + item);
-        }
-        // we're no longer interested in this item
-        ((ItemImpl)item).removeLifeCycleListener(this);
-        // remove instance from cache
-        evictItem(((ItemImpl)item).getItemState());
-    }
-
-        Iterator iter = itemCache.keySet().iterator();
-        while (iter.hasNext()) {
-            ItemState state = (ItemState) iter.next();
-            Item item = (Item) itemCache.get(state);
-            if (item.isNode()) {
-                ps.print("Node: ");
-            } else {
-                ps.print("Property: ");
-            }
-            if (item.isNew()) {
-                ps.print("new ");
-            } else if (item.isModified()) {
-                ps.print("modified ");
-            } else {
-                ps.print("- ");
-            }
-            ps.println(state + "\t" + LogUtil.safeGetJCRPath(state, session.getPathResolver()) + " (" + item + ")");
+        if (itemCache instanceof Dumpable) {
+            ((Dumpable) itemCache).dump(ps);
+        } else {
+            ps.println("ItemCache (" + itemCache.toString() + ")");
-        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{this};
+        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{itemCache};
-        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{this};
+        ItemLifeCycleListener[] listeners = new ItemLifeCycleListener[]{itemCache};
-    //-------------------------------------------------< item cache methods >---
+    //------------------------------------------< ItemStateCreationListener >---
-     * Puts the reference of an item in the cache with
-     * the item's path as the key.
-     * @param item the item to cache
+     * @param state
-    private void cacheItem(ItemState state, Item item) {
-        if (itemCache.containsKey(state)) {
-            log.warn("overwriting cached item " + state);
+    public void created(ItemState state) {
+        if (state.isNode()) {
+            try {
+                createNodeInstance((NodeState) state);
+            } catch (RepositoryException e) {
+                // log warning and ignore
+                log.warn("Unable to create Node instance: " + e.getMessage());
+            }
+        } else {
+            createPropertyInstance((PropertyState) state);
-        if (log.isDebugEnabled()) {
-            log.debug("caching item " + state);
-        }
-        itemCache.put(state, item);
-    /**
-     * Returns an item reference from the cache.
-     *
-     * @param state State of the item that should be retrieved.
-     * @return the item reference stored in the corresponding cache entry
-     *         or <code>null</code> if there's no corresponding cache entry.
-     */
-    private Item retrieveItem(ItemState state) {
-        return (Item) itemCache.get(state);
-    }
-
-    /**
-     * Removes a cache entry for a specific item.
-     *
-     * @param itemState state of the item to remove from the cache
-     */
-    private void evictItem(ItemState itemState) {
-        if (log.isDebugEnabled()) {
-            log.debug("removing item " + itemState + " from cache");
-        }
-        itemCache.remove(itemState);
+    public void statusChanged(ItemState state, int previousStatus) {
+        // nothing to do -> Item is listening to status changes and forces
+        // cleanup of cache entries through it's own status changes.
