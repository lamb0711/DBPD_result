Refactoring step 3 (JCR-53)
 - Moved workspace.xml parsing to ConfigurationParser
 - Replaced createFileSystem with BeanConfig code
 - Added a TestAll suite for the config package

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156058 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileReader;
+import java.io.IOException;
+import java.io.InputStream;
-import java.util.List;
-import org.apache.commons.collections.BeanMap;
+import org.jdom.Document;
+import org.jdom.JDOMException;
+import org.jdom.input.SAXBuilder;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+    /**
+     * public id
+     */
+    public static final String PUBLIC_ID = "-//The Apache Software Foundation//DTD Workspace//EN";
+
+    public static final String CONFIG_DTD_RESOURCE_PATH =
+            "org/apache/jackrabbit/core/config/config.dtd";
+
+    protected static final String FILE_SYSTEM_ELEMENT = "FileSystem";
+    private static final String PERSISTENCE_MANAGER_ELEMENT = "PersistenceManager";
+    private static final String SEARCH_INDEX_ELEMENT = "SearchIndex";
+
+    /**
+     * wellknown variables (will be replaced with their respective values
+     * whereever they occur within the configuration)
+     */
+    public static final String WORKSPACE_HOME_VARIABLE = "${wsp.home}";
+    public static final String WORKSPACE_NAME_VARIABLE = "${wsp.name}";
-    private Map variables;
+    private Properties variables;
-    public ConfigurationParser(Map variables) {
+    public ConfigurationParser(Properties variables) {
-     * Creates a new <code>PersistenceManagerConfig</code>.
+     * Creates a new <code>WorkspaceConfig</code> instance. The configuration
+     * is read from the specified configuration file.
-     * @param config the config root element for this <code>PersistenceManagerConfig</code>.
+     * @param configFilePath path to the configuration file
+     * @param wspHomeDir     workspace home directory
+     * @return a new <code>WorkspaceConfig</code> instance
+     * @throws RepositoryException If an error occurs
-    public AccessManagerConfig parseAccessManagerConfig(Element config) {
-        // FQN of persistence manager class
-        String className = config.getAttributeValue(CLASS_ATTRIBUTE);
-
-        // read the PersistenceManager properties from the
-        // <param/> elements in the config
-        Properties params = parseParameters(config);
-
-        return new AccessManagerConfig(className, params);
+    public static WorkspaceConfig parseWorkspaceConfig(
+            String configFilePath, String wspHomeDir)
+            throws RepositoryException {
+        try {
+            File config = new File(configFilePath);
+            InputSource is = new InputSource(new FileReader(config));
+            is.setSystemId(config.toURI().toString());
+            return parseWorkspaceConfig(is, wspHomeDir);
+        } catch (IOException ioe) {
+            String msg = "error while reading config file " + configFilePath;
+            throw new RepositoryException(msg, ioe);
+        }
-     * Creates a new <code>PersistenceManagerConfig</code>.
+     * Creates a new <code>WorkspaceConfig</code> instance. The configuration
+     * is read from the specified input source.
-     * @param config the config root element for this <code>PersistenceManagerConfig</code>.
+     * @param is         <code>InputSource</code> where the configuration is read from
+     * @param wspHomeDir workspace home directory
+     * @return a new <code>WorkspaceConfig</code> instance
+     * @throws RepositoryException If an error occurs
-    public PersistenceManagerConfig parsePersistenceManagerConfig(Element config) {
-        // FQN of persistence manager class
-        String className = config.getAttributeValue(CLASS_ATTRIBUTE);
+    public static WorkspaceConfig parseWorkspaceConfig(
+            InputSource xml, String home)
+            throws RepositoryException {
+        try {
+            SAXBuilder builder = new SAXBuilder();
+            builder.setEntityResolver(new EntityResolver() {
+                public InputSource resolveEntity(String publicId, String systemId)
+                throws SAXException, IOException {
+                    if (publicId.equals(PUBLIC_ID)) {
+                        // load dtd resource
+                        return new InputSource(getClass().getClassLoader().getResourceAsStream(CONFIG_DTD_RESOURCE_PATH));
+                    } else {
+                        // use the default behaviour
+                        return null;
+                    }
+                }
+            });
+            Document config = builder.build(xml);
-        // read the PersistenceManager properties from the
-        // <param/> elements in the config
-        Properties params = parseParameters(config);
+            Properties variables = new Properties();
+            variables.setProperty(WORKSPACE_HOME_VARIABLE, home);
+            ConfigurationParser parser = new ConfigurationParser(variables);
+            return parser.parseWorkspaceConfig(config);
+        } catch (JDOMException ex) {
+            throw new RepositoryException(ex);
+        } catch (IOException ex) {
+            throw new RepositoryException(ex);
+        }
+    }
-        return new PersistenceManagerConfig(className, params);
+    /**
+     * Initializes this <code>WorkspaceConfig</code> object.
+     *
+     * @param config
+     * @throws RepositoryException
+     */
+    public WorkspaceConfig parseWorkspaceConfig(Document config)
+            throws RepositoryException {
+        try {
+            String wspHomeDir = variables.getProperty(WORKSPACE_HOME_VARIABLE);
+
+            Element wspElem = config.getRootElement();
+            // name
+            String wspName = wspElem.getAttributeValue(NAME_ATTRIBUTE);
+            if (wspName == null) {
+                // init with wsp home dirname
+                wspName = new File(wspHomeDir).getName();
+            } else {
+                wspName = replaceVariables(wspName);
+            }
+
+            // set name variable
+            Properties newVariables = new Properties(variables);
+            newVariables.put(WORKSPACE_NAME_VARIABLE, wspName);
+            ConfigurationParser parser = new ConfigurationParser(newVariables);
+
+            // file system
+            BeanConfig fsc = parser.parseBeanConfig(wspElem, FILE_SYSTEM_ELEMENT);
+            FileSystem wspFS = (FileSystem) fsc.newInstance();
+
+            // persistence manager config
+            BeanConfig pmc =
+                parser.parseBeanConfig(wspElem, PERSISTENCE_MANAGER_ELEMENT);
+
+            // search config (optional)
+            Element searchElem = wspElem.getChild(SEARCH_INDEX_ELEMENT);
+            SearchConfig sc = null;
+            if (searchElem != null) {
+                sc = parser.parseSearchConfig(searchElem);
+            }
+            
+            return new WorkspaceConfig(wspHomeDir, wspName, wspFS, pmc, sc);
+        } catch (ClassNotFoundException ex) {
+            throw new RepositoryException(ex);
+        } catch (InstantiationException ex) {
+            throw new RepositoryException(ex);
+        } catch (IllegalAccessException ex) {
+            throw new RepositoryException(ex);
+        } catch (ClassCastException ex) {
+            throw new RepositoryException(ex);
+        }
-        // create FileSystem
-        Element fsElement = config.getChild(AbstractConfig.FILE_SYSTEM_ELEMENT);
-        FileSystem fs = createFileSystem(fsElement);
+        try {
+            // create FileSystem
+            BeanConfig fsc = parseBeanConfig(config, FILE_SYSTEM_ELEMENT);
+            FileSystem fs = (FileSystem) fsc.newInstance();
-        // handler class name
-        String handlerClassName = config.getAttributeValue(CLASS_ATTRIBUTE,
-                DEFAULT_QUERY_HANDLER);
+            // handler class name
+            String handlerClassName = config.getAttributeValue(CLASS_ATTRIBUTE,
+                    DEFAULT_QUERY_HANDLER);
-        // gather params
-        Properties params = parseParameters(config);
+            // gather params
+            Properties params = parseParameters(config);
-        return new SearchConfig(fs, handlerClassName, params);
+            return new SearchConfig(fs, handlerClassName, params);
+        } catch (ClassNotFoundException ex) {
+            throw new RepositoryException(ex);
+        } catch (InstantiationException ex) {
+            throw new RepositoryException(ex);
+        } catch (IllegalAccessException ex) {
+            throw new RepositoryException(ex);
+        } catch (ClassCastException ex) {
+            throw new RepositoryException(ex);
+        }
-        // home dir
-        File homeDir = new File(replaceVariables(config.getAttributeValue(ROOTPATH_ATTRIBUTE)));
+        try {
+            // home dir
+            File homeDir = new File(replaceVariables(config.getAttributeValue(ROOTPATH_ATTRIBUTE)));
-        // create FileSystem
-        Element fsElement = config.getChild(AbstractConfig.FILE_SYSTEM_ELEMENT);
-        FileSystem fs = createFileSystem(fsElement);
+            // create FileSystem
+            BeanConfig fsc = parseBeanConfig(config, FILE_SYSTEM_ELEMENT);
+            FileSystem fs = (FileSystem) fsc.newInstance();
-        // persistence manager config
-        Element pmElem = config.getChild(WorkspaceConfig.PERSISTENCE_MANAGER_ELEMENT);
-        PersistenceManagerConfig pmConfig =
-            parsePersistenceManagerConfig(pmElem);
+            // persistence manager config
+            BeanConfig pmc = parseBeanConfig(config, PERSISTENCE_MANAGER_ELEMENT);
-        return new VersioningConfig(homeDir, fs, pmConfig);
+            return new VersioningConfig(homeDir, fs, pmc);
+        } catch (ClassNotFoundException ex) {
+            throw new RepositoryException(ex);
+        } catch (InstantiationException ex) {
+            throw new RepositoryException(ex);
+        } catch (IllegalAccessException ex) {
+            throw new RepositoryException(ex);
+        } catch (ClassCastException ex) {
+            throw new RepositoryException(ex);
+        }
+    }
+
+    public BeanConfig parseBeanConfig(Element parent, String name)
+            throws RepositoryException {
+        Element element = parent.getChild(name);
+        if (element != null) {
+            String className = element.getAttributeValue(CLASS_ATTRIBUTE);
+            Properties properties = parseParameters(element);
+            return new BeanConfig(className, properties);
+        } else {
+            return null;
+        }
-     * Creates a {@link org.apache.jackrabbit.core.fs.FileSystem} instance
-     * based on the config <code>fsConfig</code>.
-     *
-     * @param fsConfig  a {@link #FILE_SYSTEM_ELEMENT}.
-     * @return a {@link org.apache.jackrabbit.core.fs.FileSystem} instance.
-     * @throws RepositoryException if an error occurs while creating the
-     *                             {@link org.apache.jackrabbit.core.fs.FileSystem}.
-     */
-    public FileSystem createFileSystem(Element fsConfig) throws RepositoryException {
-        FileSystem fs;
-        String className = "";
-        try {
-            // create the file system object
-            className = fsConfig.getAttributeValue(CLASS_ATTRIBUTE);
-            Class c = Class.forName(className);
-            fs = (FileSystem) c.newInstance();
-
-            // set the properties of the file system object from the
-            // param elements in the config
-            BeanMap bm = new BeanMap(fs);
-            List paramList = fsConfig.getChildren(PARAM_ELEMENT);
-            for (Iterator i = paramList.iterator(); i.hasNext();) {
-                Element param = (Element) i.next();
-                String paramName = param.getAttributeValue(NAME_ATTRIBUTE);
-                String paramValue = param.getAttributeValue(VALUE_ATTRIBUTE);
-                // replace variables in param value
-                bm.put(paramName, replaceVariables(paramValue));
-            }
-            fs.init();
-        } catch (Exception e) {
-            String msg = "Cannot instantiate implementing class " + className;
-            throw new RepositoryException(msg, e);
-        }
-        return fs;
-    }
-
-    /**
