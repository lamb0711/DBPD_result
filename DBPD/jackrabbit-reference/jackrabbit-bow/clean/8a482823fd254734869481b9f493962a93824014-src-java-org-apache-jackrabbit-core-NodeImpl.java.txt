changing implementation according to latest spec 
(work in progress...)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@149516 13f79535-47bb-0310-9956-ffa450edef68

-            throws ItemExistsException, PathNotFoundException,
-            ConstraintViolationException, RepositoryException {
+            throws ItemExistsException, PathNotFoundException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
-            throws ItemExistsException, PathNotFoundException,
-            ConstraintViolationException, RepositoryException {
+            throws ItemExistsException, PathNotFoundException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
+        // make sure that parent node is checked-out
+        if (!parentNode.internalIsCheckedOut()) {
+            String msg = safeGetJCRPath() + ": cannot add a child to a checked-in node";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+
-        // check state of this instance
-        sanityCheck();
-
-            type = PropertyType.STRING;
+            type = PropertyType.UNDEFINED;
-        // check state of this instance
-        sanityCheck();
-
-            type = PropertyType.STRING;
+            type = PropertyType.UNDEFINED;
+        return internalSetProperty(name, values, type);
+    }
+    /**
+     * Sets the internal value of a property without checking any constraints.
+     * <p/>
+     * Note that no type conversion is being performed, i.e. it's the caller's
+     * responsibility to make sure that the type of the given values is compatible
+     * with the specified property's definition.
+     *
+     * @param name
+     * @param values
+     * @param type
+     * @return
+     * @throws ValueFormatException
+     * @throws RepositoryException
+     */
+    protected Property internalSetProperty(QName name, InternalValue[] values,
+                                           int type)
+            throws ValueFormatException, RepositoryException {
-     * @see Node#addNode(String)
+     * Same as <code>{@link Node#addNode(String)}</code> except that
+     * this method takes a <code>QName</code> name argument instead of a
+     * <code>String</code>.
+     *
+     * @param nodeName
+     * @return
+     * @throws ItemExistsException
+     * @throws VersionException
+     * @throws ConstraintViolationException
+     * @throws LockException
+     * @throws RepositoryException
-            throws ItemExistsException, ConstraintViolationException,
-            RepositoryException {
+            throws ItemExistsException, VersionException,
+            ConstraintViolationException, LockException,  RepositoryException {
+        // make sure this node is checked-out
+        if (!internalIsCheckedOut()) {
+            String msg = safeGetJCRPath() + ": cannot add node to a checked-in node";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+
-     * @see Node#addNode(String, String)
+     * Same as <code>{@link Node#addNode(String, String)}</code> except that
+     * this method takes a <code>QName</code> arguments instead of a
+     * <code>String</code>s.
+     *
+     * @param nodeName
+     * @param nodeTypeName
+     * @return
+     * @throws ItemExistsException
+     * @throws NoSuchNodeTypeException
+     * @throws VersionException
+     * @throws ConstraintViolationException
+     * @throws LockException
+     * @throws RepositoryException
-            throws ItemExistsException, NoSuchNodeTypeException,
-            ConstraintViolationException, RepositoryException {
+            throws ItemExistsException, NoSuchNodeTypeException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
+        // make sure this node is checked-out
+        if (!internalIsCheckedOut()) {
+            String msg = safeGetJCRPath() + ": cannot add node to a checked-in node";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+
-     * Same as <code>{@link Node#setProperty(String, String)}</code> except that
-     * this method takes a <code>QName</code> instead of a <code>String</code>
-     * value.
-     *
-     * @param name
-     * @param value
-     * @return
-     * @throws ValueFormatException
-     * @throws RepositoryException
-     */
-    public PropertyImpl setProperty(String name, QName value) throws ValueFormatException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
-    }
-
-    /**
-     * Same as <code>{@link Node#setProperty(String, String[])}</code> except that
-     * this method takes an array of  <code>QName</code> instead of a
-     * <code>String</code> values.
-     *
-     * @param name
-     * @param values
-     * @return
-     * @throws ValueFormatException
-     * @throws RepositoryException
-     */
-    public PropertyImpl setProperty(String name, QName[] values) throws ValueFormatException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, true, status);
-        try {
-            prop.setValue(values);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
-    }
-
-    /**
+     * @throws VersionException
+     * @throws LockException
-            throws ValueFormatException, RepositoryException {
+            throws ValueFormatException, VersionException, LockException,
+            RepositoryException {
+        // make sure this node is checked-out
+        if (!internalIsCheckedOut()) {
+            String msg = safeGetJCRPath() + ": cannot set property of a checked-in node";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+
-            type = PropertyType.STRING;
+            type = PropertyType.UNDEFINED;
+     * @throws VersionException
+     * @throws LockException
-            throws ValueFormatException, RepositoryException {
+            throws ValueFormatException, VersionException, LockException,
+            RepositoryException {
-        int type = (value == null) ? PropertyType.STRING : value.getType();
+        // make sure this node is checked-out
+        if (!internalIsCheckedOut()) {
+            String msg = safeGetJCRPath() + ": cannot set property of a checked-in node";
+            log.error(msg);
+            throw new VersionException(msg);
+        }
+
+        int type = (value == null) ? PropertyType.UNDEFINED : value.getType();
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = safeGetJCRPath() + ": cannot add a child to a checked-in node";
-            log.error(msg);
-            throw new VersionException(msg);
-        }
-
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = safeGetJCRPath() + ": cannot add a child to a checked-in node";
-            log.error(msg);
-            throw new VersionException(msg);
-        }
-
-        int type = (value == null) ? PropertyType.STRING : value.getType();
+        int type = (value == null) ? PropertyType.UNDEFINED : value.getType();
