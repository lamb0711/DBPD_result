work in progress

- wrong resolution of relative path (partially tested only)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@475873 13f79535-47bb-0310-9956-ffa450edef68

-            return Path.create(getQPath(), p, true);
+            return getQPath(p);
+        } catch (MalformedPathException e) {
+            String msg = "Invalid relative path: " + relativePath;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
+        }
+    }
+
+    /**
+     *
+     * @param relativePath
+     * @return
+     * @throws RepositoryException
+     */
+    private Path getQPath(Path relativePath) throws RepositoryException {
+        try {
+            // shortcut
+            if (relativePath.getLength() == 1 && relativePath.getNameElement() == Path.CURRENT_ELEMENT) {
+                return getQPath();
+            }
+            return Path.create(getQPath(), relativePath, true);
-            Path p = getQPath(relPath);
-            // if relative path is just the last path element -> simply retrieve
-            // the corresponding child-node.
-            if (p.getLength() == 1) {
-                Path.PathElement pe = p.getNameElement();
-                if (pe.denotesName()) {
-                    // check if node entry exists
+            Path rp = PathFormat.parse(relPath, session.getNamespaceResolver());
+            // shortcut
+            if (rp.getLength() == 1) {
+                Path.PathElement pe = rp.getNameElement();
+                if (pe == Path.CURRENT_ELEMENT) {
+                    targetState = getNodeState();
+                } else if (pe == Path.PARENT_ELEMENT) {
+                    targetState = getNodeState().getParent();
+                } else if (pe.denotesName()) {
+                    // if relative path is just a 'name' -> retrieve the corresponding
+                    // child-node (if existing).
+                Path p = getQPath(rp);
-     *         <code>null</code> if no property exists at <code>relPath</code>
+     * <code>null</code> if no property exists at <code>relPath</code>
-     *                             relative path
+     * relative path
+        PropertyState targetState = null;
-            /**
-             * first check if relPath is just a name (in which case we don't
-             * have to build & resolve absolute path)
-             */
-            if (relPath.indexOf('/') == -1) {
-                QName propName = NameFormat.parse(relPath, session.getNamespaceResolver());
-                // check if property entry exists
-                if (getNodeState().hasPropertyName(propName)) {
-                    try {
-                        return getNodeState().getPropertyState(propName);
-                    } catch (ItemStateException e) {
-                        // should not occur due, since existance has been checked
-                        throw new RepositoryException(e);
+            Path rp = PathFormat.parse(relPath, session.getNamespaceResolver());
+            if (rp.getLength() == 1) {
+                // a single path element must always denote a name. '.' and '..'
+                // will never point to a property.
+                if (rp.getNameElement().denotesName()) {
+                    QName propName = rp.getNameElement().getName();
+                    // check if property entry exists
+                    if (getNodeState().hasPropertyName(propName)) {
+                        try {
+                            targetState = getNodeState().getPropertyState(propName);
+                        } catch (ItemStateException e) {
+                            // should not occur due, since existance has been checked
+                            throw new RepositoryException(e);
+                        } // else: there's no property with that name
-                } else {
-                    // there's no property with that name
-                    return null;
+                } // else: return null.
+            } else {
+                // build and resolve absolute path
+                Path p = getQPath(rp).getCanonicalPath();
+                try {
+                    ItemState itemState = session.getHierarchyManager().getItemState(p);
+                    if (!itemState.isNode()) {
+                        targetState = (PropertyState) itemState;
+                    } // else: not a property
+                } catch (PathNotFoundException e) {
+                    // ignore -> return null;
-            /**
-             * build and resolve absolute path
-             */
-            Path p = getQPath(relPath).getCanonicalPath();
-            try {
-                ItemState itemState = session.getHierarchyManager().getItemState(p);
-                if (!itemState.isNode()) {
-                    return (PropertyState) itemState;
-                } else {
-                    // not a property
-                    return null;
-                }
-            } catch (PathNotFoundException pnfe) {
-                return null;
-            }
-        } catch (NameException e) {
-            String msg = "failed to resolve path " + relPath + " relative to " + safeGetJCRPath();
+        } catch (MalformedPathException e) {
+            String msg = "failed to resolve property path " + relPath + " relative to " + safeGetJCRPath();
+        return targetState;
