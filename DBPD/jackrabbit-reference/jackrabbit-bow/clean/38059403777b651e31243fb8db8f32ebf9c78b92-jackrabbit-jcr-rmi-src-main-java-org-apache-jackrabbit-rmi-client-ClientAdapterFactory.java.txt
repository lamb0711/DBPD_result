JCRRMI-27: JSR-283: Support AccessControlManager

Merged revisions 925218 and 925223 (by Felix) from commons/jcr-rmi/trunk to trunk/jackrabbit-jcr-rmi.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@927849 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.Principal;
+import java.util.Iterator;
+
+import javax.jcr.security.AccessControlEntry;
+import javax.jcr.security.AccessControlManager;
+import javax.jcr.security.AccessControlPolicy;
+import javax.jcr.security.AccessControlPolicyIterator;
+import javax.jcr.security.Privilege;
+import org.apache.jackrabbit.rmi.client.principal.ClientGroup;
+import org.apache.jackrabbit.rmi.client.principal.ClientPrincipal;
+import org.apache.jackrabbit.rmi.client.principal.ClientPrincipalIterator;
+import org.apache.jackrabbit.rmi.client.security.ClientAccessControlEntry;
+import org.apache.jackrabbit.rmi.client.security.ClientAccessControlList;
+import org.apache.jackrabbit.rmi.client.security.ClientAccessControlManager;
+import org.apache.jackrabbit.rmi.client.security.ClientAccessControlPolicy;
+import org.apache.jackrabbit.rmi.client.security.ClientAccessControlPolicyIterator;
+import org.apache.jackrabbit.rmi.client.security.ClientPrivilege;
+import org.apache.jackrabbit.rmi.remote.principal.RemoteGroup;
+import org.apache.jackrabbit.rmi.remote.principal.RemotePrincipal;
+import org.apache.jackrabbit.rmi.remote.security.RemoteAccessControlEntry;
+import org.apache.jackrabbit.rmi.remote.security.RemoteAccessControlList;
+import org.apache.jackrabbit.rmi.remote.security.RemoteAccessControlManager;
+import org.apache.jackrabbit.rmi.remote.security.RemoteAccessControlPolicy;
+import org.apache.jackrabbit.rmi.remote.security.RemotePrivilege;
+    /**
+     * {@inheritDoc}
+     */
+    public AccessControlManager getAccessControlManager(
+            RemoteAccessControlManager remote) {
+        return new ClientAccessControlManager(remote, this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public AccessControlPolicy getAccessControlPolicy(
+            RemoteAccessControlPolicy remote) {
+        if (remote instanceof RemoteAccessControlList) {
+            return new ClientAccessControlList(
+                (RemoteAccessControlList) remote, this);
+        }
+        return new ClientAccessControlPolicy(remote, this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public AccessControlPolicy[] getAccessControlPolicy(
+            RemoteAccessControlPolicy[] remote) {
+        final AccessControlPolicy[] local = new AccessControlPolicy[remote.length];
+        for (int i = 0; i < local.length; i++) {
+            local[i] = getAccessControlPolicy(remote[i]);
+        }
+        return local;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public AccessControlPolicyIterator getAccessControlPolicyIterator(
+            RemoteIterator remote) {
+        return new ClientAccessControlPolicyIterator(remote, this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public AccessControlEntry getAccessControlEntry(
+            RemoteAccessControlEntry remote) {
+        return new ClientAccessControlEntry(remote, this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public AccessControlEntry[] getAccessControlEntry(
+            RemoteAccessControlEntry[] remote) {
+        final AccessControlEntry[] local = new AccessControlEntry[remote.length];
+        for (int i = 0; i < local.length; i++) {
+            local[i] = getAccessControlEntry(remote[i]);
+        }
+        return local;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Principal getPrincipal(RemotePrincipal remote) {
+        if (remote instanceof RemoteGroup) {
+            return new ClientGroup(remote, this);
+        }
+        return new ClientPrincipal(remote);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @SuppressWarnings("unchecked")
+    public Iterator<Principal> getPrincipalIterator(RemoteIterator remote) {
+        return new ClientPrincipalIterator(remote, this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Privilege getPrivilege(RemotePrivilege remote) {
+        return new ClientPrivilege(remote, this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Privilege[] getPrivilege(RemotePrivilege[] remote) {
+        final Privilege[] local = new Privilege[remote.length];
+        for (int i = 0; i < local.length; i++) {
+            local[i] = getPrivilege(remote[i]);
+        }
+        return local;
+    }
+
