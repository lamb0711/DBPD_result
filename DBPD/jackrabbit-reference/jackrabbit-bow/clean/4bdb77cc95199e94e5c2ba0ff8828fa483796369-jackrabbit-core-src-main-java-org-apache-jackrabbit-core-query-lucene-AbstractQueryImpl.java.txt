JCR-2715: Improved join query performance

Extend LuceneQueryFactory to handle more QOM constraints.
Simplify handling of bind variables.
Improve OperandEvaluator, including its javadocs.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1026361 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.ExecutableQuery;
-import org.apache.jackrabbit.core.query.PropertyTypeRegistry;
-import org.apache.jackrabbit.core.session.SessionContext;
-import org.apache.jackrabbit.spi.Name;
+import java.util.Map;
-import javax.jcr.Value;
+import javax.jcr.Value;
-import java.util.Set;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.Collections;
+import org.apache.jackrabbit.core.query.ExecutableQuery;
+import org.apache.jackrabbit.core.query.PropertyTypeRegistry;
+import org.apache.jackrabbit.core.session.SessionContext;
-    /**
-     * Set&lt;Name>, where Name is a variable name in the query statement.
-     */
-    private final Set<Name> variableNames = new HashSet<Name>();
-
-    /**
-     * Binding of variable name to value. Maps {@link Name} to {@link Value}.
-     */
-    private final Map<Name, Value> bindValues = new HashMap<Name, Value>();
+    /** Bind variables of this query */
+    private final Map<String, Value> variables;
-            PropertyTypeRegistry propReg) {
+            PropertyTypeRegistry propReg, Map<String, Value> variables) {
+        this.variables = variables;
-    public void bindValue(Name varName, Value value)
+    public void bindValue(String varName, Value value)
-        if (!variableNames.contains(varName)) {
-            throw new IllegalArgumentException("not a valid variable in this query");
+        if (variables.containsKey(varName)) {
+            variables.put(varName, value);
-            bindValues.put(varName, value);
+            throw new IllegalArgumentException(
+                    varName + " is not a valid variable in this query");
-    public Name[] getBindVariableNames() throws RepositoryException {
-        return variableNames.toArray(new Name[variableNames.size()]);
-    }
-
-    /**
-     * Adds a name to the set of variables.
-     *
-     * @param varName the name of the variable.
-     */
-    protected void addVariableName(Name varName) {
-        variableNames.add(varName);
-    }
-
-    /**
-     * @return an unmodifieable map, which contains the variable names and their
-     *         respective value.
-     */
-    protected Map<Name, Value> getBindVariableValues() {
-        return Collections.unmodifiableMap(bindValues);
+    public Map<String, Value> getBindVariables() {
+        return variables;
