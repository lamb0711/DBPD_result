JCR-2206: Replace NodeReferencesId with NodeId

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@793243 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.id.NodeReferencesId;
-import org.apache.jackrabbit.core.state.NodeReferences;
-import org.apache.jackrabbit.uuid.UUID;
-     * Deserializes a <code>NodeReferences</code> from the data input stream.
-     *
-     * @param in the input stream
-     * @param id the id of the nodereference to deserialize
-     * @param pMgr the persistence manager
-     * @return the node references
-     * @throws IOException in an I/O error occurs.
-     */
-    public NodeReferences readState(DataInputStream in, NodeReferencesId id,
-                                    PersistenceManager pMgr)
-            throws IOException {
-        NodeReferences state = new NodeReferences(id);
-        int count = in.readInt();   // count & version
-        // int version = (count >> 24) | 0x0ff;
-        count &= 0x00ffffff;
-        for (int i = 0; i < count; i++) {
-            state.addReference(readPropertyId(in));    // propertyId
-        }
-        return state;
-    }
-
-    /**
-     * Serializes a <code>NodeReferences</code> to the data output stream.
-     *
-     * @param out the output stream
-     * @param state the state to write.
-     * @throws IOException in an I/O error occurs.
-     */
-    public void writeState(DataOutputStream out, NodeReferences state)
-            throws IOException {
-        // references
-        Collection<PropertyId> c = state.getReferences();
-        out.writeInt(c.size() | (VERSION_CURRENT << 24)); // count
-        for (Iterator<PropertyId> iter = c.iterator(); iter.hasNext();) {
-            PropertyId propId = iter.next();
-            writePropertyId(out, propId);
-        }
-    }
-
-    /**
