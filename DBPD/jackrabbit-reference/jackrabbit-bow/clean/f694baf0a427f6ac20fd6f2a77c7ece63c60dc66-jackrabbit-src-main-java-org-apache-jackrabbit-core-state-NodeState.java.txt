- use copy-on-write in NodeState for: child node entries, mixin type names and property names.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378574 13f79535-47bb-0310-9956-ffa450edef68

-    private HashSet mixinTypeNames = new HashSet();
+    private Set mixinTypeNames = Collections.EMPTY_SET;
+     * Set to <code>true</code> if {@link #childNodeEntries} are shared between
+     * different <code>NodeState</code> instance.
+     */
+    private boolean sharedChildNodeEntries = false;
+
+    /**
+     * Set to <code>true</code> if {@link #propertyNames} is shared between
+     * different <code>NodeState</code> instances.
+     */
+    private boolean sharedPropertyNames = false;
+
+    /**
-            mixinTypeNames = (HashSet) nodeState.mixinTypeNames.clone();
+            mixinTypeNames = nodeState.mixinTypeNames;
-            propertyNames = (HashSet) nodeState.propertyNames.clone();
-            childNodeEntries = (ChildNodeEntries) nodeState.childNodeEntries.clone();
+            propertyNames = nodeState.propertyNames;
+            sharedPropertyNames = nodeState.sharedPropertyNames = true;
+            childNodeEntries = nodeState.childNodeEntries;
+            sharedChildNodeEntries = nodeState.sharedChildNodeEntries = true;
-        mixinTypeNames.clear();
-        mixinTypeNames.addAll(names);
+        if (names instanceof HashSet) {
+            mixinTypeNames = (Set) ((HashSet) names).clone();
+        } else {
+            mixinTypeNames = new HashSet(names);
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+        if (sharedChildNodeEntries) {
+            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
+            sharedChildNodeEntries = false;
+        }
+            sharedChildNodeEntries = false;
-            childNodeEntries.removeAll();
+            if (sharedChildNodeEntries) {
+                childNodeEntries = new ChildNodeEntries();
+                sharedChildNodeEntries = false;
+            } else {
+                childNodeEntries.removeAll();
+            }
+
+        if (sharedPropertyNames) {
+            propertyNames = (HashSet) propertyNames.clone();
+            sharedPropertyNames = false;
+        }
+        if (sharedPropertyNames) {
+            propertyNames = (HashSet) propertyNames.clone();
+            sharedPropertyNames = false;
+        }
-        propertyNames.clear();
+        if (sharedPropertyNames) {
+            propertyNames = new HashSet();
+            sharedPropertyNames = false;
+        } else {
+            propertyNames.clear();
+        }
-            propNames = (HashSet) names.clone();
+            propertyNames = (HashSet) names.clone();
+            sharedPropertyNames = false;
+        } else {
+            if (sharedPropertyNames) {
+                propertyNames = new HashSet();
+                sharedPropertyNames = false;
+            } else {
+                propertyNames.clear();
+            }
+            propertyNames.addAll(propNames);
-        propertyNames.clear();
-        propertyNames.addAll(propNames);
