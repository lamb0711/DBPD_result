- exists must also catch PathNotFoundException
- restore(NodeId, VersionId, boolean) must also cover Node.restore taking a relative path that may point to a non-existing node.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@516352 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.MalformedPathException;
+        } catch (PathNotFoundException e) {
+            return false;
-                Node n = getNode(nodeId, sInfo);
-                Node v = getNode(versionId, sInfo);
-                n.restore(v.getName(), removeExisting);
+                Version v = (Version) getNode(versionId, sInfo);
+                if (exists(sessionInfo, nodeId)) {
+                    Node n = getNode(nodeId, sInfo);
+                    n.restore(v, removeExisting);
+                } else {
+                    try {
+                        // restore with rel-Path part
+                        Node n = null;
+                        Path relPath = null;
+                        Path path = nodeId.getPath();
+                        if (nodeId.getUniqueID() != null) {
+                            n = getNode(idFactory.createNodeId(nodeId.getUniqueID()), sInfo);
+                            relPath = (path.isAbsolute()) ? Path.ROOT.computeRelativePath(nodeId.getPath()) : path;
+                        } else {
+                            int degree = 0;
+                            while (degree < path.getLength()) {
+                                Path ancestorPath = path.getAncestor(degree);
+                                NodeId parentId = idFactory.createNodeId(nodeId.getUniqueID(), ancestorPath);
+                                if (exists(sessionInfo, parentId)) {
+                                    n = getNode(parentId, sInfo);
+                                    relPath = ancestorPath.computeRelativePath(path);
+                                }
+                                degree++;
+                            }
+                        }
+                        if (n == null) {
+                            throw new PathNotFoundException("Path not found " + nodeId);
+                        } else {
+                            n.restore(v, PathFormat.format(relPath, sInfo.getNamespaceResolver()), removeExisting);
+                        }
+                    } catch (MalformedPathException e) {
+                        throw new RepositoryException(e);
+                    } catch (NoPrefixDeclaredException e) {
+                        throw new RepositoryException(e);
+                    }
+                }
