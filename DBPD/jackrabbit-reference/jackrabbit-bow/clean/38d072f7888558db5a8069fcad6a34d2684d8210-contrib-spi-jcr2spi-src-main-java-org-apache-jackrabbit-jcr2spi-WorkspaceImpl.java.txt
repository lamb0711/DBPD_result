work in progress

- Restore: pass NodeState(s) and Path instead of NodeId(s)
- LockManager: make sure lockmanager only remembers workspace states
- LockManager: make sure operations are executed using workspace states
- LockManager: improve isLocked/getLock/checkIsLocked and respect locks that
have been accessed before.
- VersionManager: make sure operations are executed using workspace states
- VersionManager: add checkIsCheckedOut
- VersionManager: force manager to have a WorkspaceManager
- NodeReferences:
  > make interface package protected
  > clarify method naming
  > add implementation to WorkspaceItemStateFactory
  > add NodeReferences field to NodeState
  > TO_IMPROVE: references are currently always retrieve from the SPI.
- ItemStateManager + NodeReferences
  > rename interfaces methods
  > change method signature to take NodeState instead of NodeId
  > 'getReferences' returns the property states directly

- remove some JR DIFFs. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432234 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.ItemStateValidator;
+import org.apache.jackrabbit.jcr2spi.state.NodeState;
+    /**
+     * The name of this <code>Workspace</code>.
+     */
+    /**
+     * The Session that created this <code>Workspace</code> object
+     */
+    /**
+     * WorkspaceManager acting as ItemStateManager on the workspace level
+     * and as connection to the SPI implementation.
+     */
-
-    private QueryManager qManager;
-    private ObservationManager obsManager;
+    private ObservationManager obsManager;
+    private QueryManager qManager;
+    private ItemStateValidator validator;
-
-        NodeId[] versionIds = new NodeId[versions.length];
+        NodeState[] versionStates = new NodeState[versions.length];
-                versionIds[i] = (NodeId) vState.getId();
+                versionStates[i] = (NodeState) vState;
-        getVersionManager().restore(versionIds, removeExisting);
+        getVersionManager().restore(versionStates, removeExisting);
+
+
+            // make sure the given import target is accessible, not locked and checked out.
+            int options = ItemStateValidator.CHECK_ACCESS | ItemStateValidator.CHECK_LOCK | ItemStateValidator.CHECK_VERSIONING;
+            getValidator().checkIsWritable((NodeState) parentState, options);
+
+            // build the content handler
+        session.checkSupportedOption(Repository.LEVEL_2_SUPPORTED);
+        session.checkIsAlive();
+
-        ItemState parentState = getHierarchyManager().getItemState(parentPath);
-        if (parentState.isNode()) {
-            wspManager.importXml((NodeId) parentState.getId(), in, uuidBehavior);
+        ItemState itemState = getHierarchyManager().getItemState(parentPath);
+        if (itemState.isNode()) {
+            // make sure the given import target is accessible, not locked and checked out.
+            NodeState parentState = (NodeState) itemState;
+            int options = ItemStateValidator.CHECK_ACCESS | ItemStateValidator.CHECK_LOCK | ItemStateValidator.CHECK_VERSIONING;
+            getValidator().checkIsWritable(parentState, options);
+
+            // run the import
+            wspManager.importXml(parentState, in, uuidBehavior);
+
+    /**
+     * Validator for the <code>Workspace</code>. It contrast from {@link SessionImpl#getValidator()}
+     * in terms of <code>HierarchyManager</code> and <code>ItemManager</code>.
+     * @return
+     */
+    private ItemStateValidator getValidator() {
+        if (validator == null) {
+            validator = new ItemStateValidator(getNodeTypeRegistry(), this);
+        }
+        return validator;
+    }
-     * @param stateMgr
+     * @param wspManager
-    protected VersionManager createVersionManager(UpdatableItemStateManager stateMgr) {
+    protected VersionManager createVersionManager(WorkspaceManager wspManager) {
-            return new VersionManagerImpl(stateMgr);
+            return new VersionManagerImpl(wspManager);
