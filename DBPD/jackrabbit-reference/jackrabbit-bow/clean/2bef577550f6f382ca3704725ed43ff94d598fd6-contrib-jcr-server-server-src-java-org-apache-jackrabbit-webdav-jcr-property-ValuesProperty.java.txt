JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.jdom.Element;
+import org.apache.log4j.Logger;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import javax.jcr.PropertyType;
-    private final Element[] value;
+    private static Logger log = Logger.getLogger(ValuesProperty.class);
+
+    private final Value[] jcrValues;
-
-	Element[] propValue = new Element[values.length];
-	for (int i = 0; i < values.length; i++) {
-	    propValue[i] = new Element(XML_VALUE, ItemResourceConstants.NAMESPACE);
-	    propValue[i].addContent(ValueHelper.serialize(values[i], false));
-	}
-	value = propValue;
+	jcrValues = values;
-    public ValuesProperty(DavProperty property) {
+    public ValuesProperty(DavProperty property) throws RepositoryException {
-	Element[] elems = new Element[0];
-	if (property.getValue() instanceof List) {
+	List valueElements = new ArrayList();
+        Object propValue = property.getValue();
+        if (propValue != null) {
+            if (isValueElement(propValue)) {
+                valueElements.add(propValue);
+            } else if (propValue instanceof List) {
-	    ArrayList valueElements = new ArrayList();
-		if (el instanceof Element && XML_VALUE.equals(((Element)el).getName())) {
+                    if (isValueElement(propValue)) {
+            }
+        }
-	    elems = (Element[])valueElements.toArray(new Element[valueElements.size()]);
-	} else {
-	    new IllegalArgumentException("ValuesProperty may only be created with a property that has a list of 'value' elements as content.");
+        Element[] elems = (Element[])valueElements.toArray(new Element[valueElements.size()]);
+	jcrValues = new Value[elems.length];
+	for (int i = 0; i < elems.length; i++) {
+            String value = DomUtil.getText(elems[i]);
+	    jcrValues[i] = ValueHelper.deserialize(value, PropertyType.STRING, false);
-	// finally set the value to the DavProperty
-	value = elems;
+	}
+
+    private static boolean isValueElement(Object obj) {
+        return obj instanceof Element && XML_VALUE.equals(((Element)obj).getLocalName());
-     * @throws RepositoryException
+     * @throws ValueFormatException if convertion of the internal jcr values to
+     * the specified value type fails.
-    public Value[] getValues(int propertyType) throws ValueFormatException, RepositoryException {
-	Element[] propValue = (Element[])getValue();
-	Value[] values = new Value[propValue.length];
-	for (int i = 0; i < propValue.length; i++) {
-	    values[i] = ValueHelper.deserialize(propValue[i].getText(), propertyType, false);
+    public Value[] getValues(int propertyType) throws ValueFormatException {
+        Value[] vs = new Value[jcrValues.length];
+        for (int i = 0; i < jcrValues.length; i++) {
+            vs[i] = ValueHelper.convert(jcrValues[i], propertyType);
-	return values;
+	return jcrValues;
-     * Returns an array of {@link Element}s representing the value of this
+     * Returns an array of {@link Value}s representing the value of this
-     * @return an array of {@link Element}s
+     * @return an array of {@link Value}s
+     * @see #getValues(int)
-	return value;
+	return jcrValues;
+
+    public Element toXml(Document document) {
+        Element elem = getName().toXml(document);
+        for (int i = 0; i < jcrValues.length; i++) {
+            try {
+                DomUtil.addChildElement(elem, XML_VALUE, ItemResourceConstants.NAMESPACE, jcrValues[i].getString());
+            } catch (RepositoryException e) {
+                log.error("Unexpected Error while converting jcr value to String: " + e.getMessage());
+    }
+        }
+        return elem;
+    }
+
