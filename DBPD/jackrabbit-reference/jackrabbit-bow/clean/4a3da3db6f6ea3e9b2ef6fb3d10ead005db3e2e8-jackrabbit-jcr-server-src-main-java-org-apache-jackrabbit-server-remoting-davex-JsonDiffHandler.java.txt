JCR-2113 : JSR 283 Access Control Management (contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1656464 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-            ImportNode n = new ImportNode(key);
-            if (!st.isEmpty()) {
-                ImportItem obj = st.peek();
-                if (obj instanceof ImportNode) {
-                    ((ImportNode) obj).addNode(n);
-                } else {
-                    throw new DiffException("Invalid DIFF format: The JSONArray may only contain simple values.");
-                }
-            }
+        	ImportNode n;
+        	if (st.isEmpty()) {
+        		try {
+            		n = new ImportNode(parent.getPath(), key);        			
+        		} catch (RepositoryException e) {
+        			throw new DiffException(e.getMessage(), e);
+        		}
+
+        	} else {
+        		ImportItem obj = st.peek();
+                n = new ImportNode(obj.getPath(), key);                                                    
+                if (obj instanceof ImportNode) {                        
+                	((ImportNode) obj).addNode(n);                    
+                } else {                
+                	throw new DiffException("Invalid DIFF format: The JSONArray may only contain simple values.");                    
+                }        		
+        	}
-        public void array() throws IOException {
-            ImportMvProp prop = new ImportMvProp(key);
+        public void array() throws IOException {            
+            ImportMvProp prop = new ImportMvProp(obj.getPath(), key);
-                ((ImportNode) obj).addProp(new ImportProp(key, v));
+                ((ImportNode) obj).addProp(new ImportProp(obj.getPath(), key, v));
+        final String parentPath;
-
-        private ImportItem(String name) throws IOException {
+        final String path;
+        
+        private ImportItem(String parentPath, String name) throws IOException {
+            this.parentPath = parentPath;
+            this.path = parentPath+"/"+name;
+        String getPath() {
+        	return path;
+        }
+        
-        private ImportNode(String name) throws IOException {
-            super(name);
+        private ImportNode(String parentPath, String name) throws IOException {
+            super(parentPath, name);
-        }
-
+        }        
+        
-        private ImportProperty(String name) throws IOException {
-            super(name);
+        private ImportProperty(String parentPath, String name) throws IOException {
+            super(parentPath, name);
-        private ImportProp(String name, Value v) throws IOException {
-            super(name);
-            this.value = v;
+        private ImportProp(String parentPath, String name, Value value) throws IOException {
+            super(parentPath, name);
+            try {
+                if (value == null) {
+            		this.value = extractValuesFromRequest(getPath())[0];
+            	} else {
+            		this.value = value;
+            	}                        	
+            } catch (RepositoryException e) {
+            	throw new DiffException(e.getMessage(), e);
+            }
-            try {
+            try {            	
-        private ImportMvProp(String name) throws IOException {
-            super(name);
+        private ImportMvProp(String parentPath, String name) throws IOException {
+            super(parentPath, name);
+            	// Multi-valued property with values present in the request multi-part             	
+            	if (values.size() == 0) {            	
+            		values = Arrays.asList(extractValuesFromRequest(getPath()));            	   
+            	}
+            	
