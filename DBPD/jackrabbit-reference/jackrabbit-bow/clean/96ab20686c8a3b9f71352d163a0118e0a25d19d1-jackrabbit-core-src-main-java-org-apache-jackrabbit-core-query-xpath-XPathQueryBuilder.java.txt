JCR-739: String literal must not interpret entity references

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506382 13f79535-47bb-0310-9956-ffa450edef68

-            queryNode.setStringValue(unescapeQuotes(
-                    decodePredefinedEntities(node.getValue())));
+            queryNode.setStringValue(unescapeQuotes(node.getValue()));
-                                    queryNode,
-                                    unescapeQuotes(decodePredefinedEntities(
-                                            literal.getValue())));
+                                    queryNode, unescapeQuotes(literal.getValue()));
-                            like.setStringValue(unescapeQuotes(
-                                    decodePredefinedEntities(literal.getValue())));
+                            like.setStringValue(unescapeQuotes(literal.getValue()));
-                            value = decodePredefinedEntities(value);
-
-    /**
-     * Decodes a string literal with predefined entities. Predefined entities
-     * are:
-     * <ul>
-     * <li>&amp;lt; : &lt;</li>
-     * <li>&amp;gt; : &gt;</li>
-     * <li>&amp;amp; : &amp;</li>
-     * <li>&amp;quote; : "</li>
-     * <li>&amp;apos; : '</li>
-     * </ul>
-     * @param literal a string literal that may contain predefined entities.
-     * @return the decoded string.
-     * @throws IllegalArgumentException if the string <code>literal</code> is
-     *                                  malformed.
-     */
-    private String decodePredefinedEntities(String literal) throws IllegalArgumentException {
-        int idx = literal.indexOf('&');
-        if (idx == -1) {
-            return literal;
-        }
-        int endIndex = -1;
-        StringBuffer buf = new StringBuffer();
-        buf.append(literal.substring(0, idx));
-        while (idx != -1) {
-            endIndex = literal.indexOf(';', idx);
-            if (endIndex == -1) {
-                throw new IllegalArgumentException(literal);
-            }
-            String entity = literal.substring(idx + 1, endIndex);
-            if (entity.equals("lt")) {
-                buf.append('<');
-            } else if (entity.equals("gt")) {
-                buf.append('>');
-            } else if (entity.equals("amp")) {
-                buf.append('&');
-            } else if (entity.equals("quot")) {
-                buf.append('"');
-            } else if (entity.equals("apos")) {
-                buf.append('\'');
-            } else {
-                throw new IllegalArgumentException(literal);
-            }
-            idx = literal.indexOf('&', idx + 1);
-            if (idx != -1) {
-                buf.append(literal.substring(endIndex + 1, idx));
-            }
-        }
-        // write remaining
-        buf.append(literal.substring(endIndex + 1));
-        return buf.toString();
-    }
