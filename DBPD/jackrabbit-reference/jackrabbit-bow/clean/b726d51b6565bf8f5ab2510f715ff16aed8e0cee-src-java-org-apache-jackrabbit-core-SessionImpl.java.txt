reimplementing Session.importXML & friends due to spec changes 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@154700 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.xml.SessionImporter;
+import org.apache.jackrabbit.core.xml.Importer;
-import org.apache.xerces.util.XMLChar;
-import javax.jcr.*;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.Credentials;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.InvalidSerializedDataException;
+import javax.jcr.Item;
+import javax.jcr.ItemExistsException;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.LoginException;
+import javax.jcr.NamespaceException;
+import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.Repository;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.SimpleCredentials;
+import javax.jcr.Workspace;
-import java.util.*;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
-    protected final TransientNamespaceMappings nsMappings;
+    protected final LocalNamespaceMappings nsMappings;
-        nsMappings = new TransientNamespaceMappings(rep.getNamespaceRegistry());
+        nsMappings = new LocalNamespaceMappings(rep.getNamespaceRegistry());
-        nsMappings = new TransientNamespaceMappings(rep.getNamespaceRegistry());
+        nsMappings = new LocalNamespaceMappings(rep.getNamespaceRegistry());
-        return new ImportHandler(parent, rep.getNamespaceRegistry(), this);
+        SessionImporter importer = new SessionImporter(parent, this, Importer.IMPORT_UUID_CREATE_NEW);
+        return new ImportHandler(importer, getNamespaceResolver(), rep.getNamespaceRegistry());
-        OutputFormat format = new OutputFormat("xml", "UTF-8", true);
+        boolean indenting = true;
+        OutputFormat format = new OutputFormat("xml", "UTF-8", indenting);
-        OutputFormat format = new OutputFormat("xml", "UTF-8", true);
+        boolean indenting = true;
+        OutputFormat format = new OutputFormat("xml", "UTF-8", indenting);
-
-    //--------------------------------------------------------< inner classes >
-    class TransientNamespaceMappings implements NamespaceResolver {
-
-        // the global persistent namespace registry
-        private NamespaceRegistryImpl nsReg;
-
-        // local prefix/namespace mappings
-        private HashMap prefixToURI = new HashMap();
-        private HashMap uriToPrefix = new HashMap();
-
-        // prefixes in global namespace registry hidden by local mappings
-        private Set hiddenPrefixes = new HashSet();
-
-        TransientNamespaceMappings(NamespaceRegistryImpl nsReg) {
-            this.nsReg = nsReg;
-        }
-
-        void setNamespacePrefix(String prefix, String uri)
-                throws NamespaceException, RepositoryException {
-            if (prefix == null || uri == null) {
-                throw new IllegalArgumentException("prefix/uri can not be null");
-            }
-            if (NS_EMPTY_PREFIX.equals(prefix)
-                    || NS_DEFAULT_URI.equals(uri)) {
-                throw new NamespaceException("default namespace is reserved and can not be changed");
-            }
-            // special case: prefixes xml*
-            if (prefix.toLowerCase().startsWith(NS_XML_PREFIX)) {
-                throw new NamespaceException("reserved prefix: " + prefix);
-            }
-            // check if the prefix is a valid XML prefix
-            if (!XMLChar.isValidNCName(prefix)) {
-                throw new NamespaceException("invalid prefix: " + prefix);
-            }
-
-            // check if namespace exists (the following call will
-            // trigger a NamespaceException if it doesn't)
-            String globalPrefix = nsReg.getPrefix(uri);
-
-            // check new prefix for collision
-            String globalURI = null;
-            try {
-                globalURI = nsReg.getURI(prefix);
-            } catch (NamespaceException nse) {
-                // ignore
-            }
-            if (globalURI != null) {
-                // prefix is already mapped in global namespace registry;
-                // check if it is redundant or if it refers to a namespace
-                // that has been locally remapped, thus hiding it
-                if (!hiddenPrefixes.contains(prefix)) {
-                    if (uri.equals(globalURI) && prefix.equals(globalPrefix)) {
-                        // redundant mapping, silently ignore
-                        return;
-                    }
-                    // we don't allow to hide a namespace because we can't
-                    // guarantee that there are no references to it
-                    // (in names of nodes/properties/node types etc.)
-                    throw new NamespaceException(prefix + ": prefix is already mapped to the namespace: " + globalURI);
-                }
-            }
-
-            // check if namespace is already locally mapped
-            String oldPrefix = (String) uriToPrefix.get(uri);
-            if (oldPrefix != null) {
-                if (oldPrefix.equals(prefix)) {
-                    // redundant mapping, silently ignore
-                    return;
-                }
-                // resurrect hidden global prefix
-                hiddenPrefixes.remove(nsReg.getPrefix(uri));
-                // remove old mapping
-                uriToPrefix.remove(uri);
-                prefixToURI.remove(oldPrefix);
-            }
-
-            // check if prefix is already locally mapped
-            String oldURI = (String) prefixToURI.get(prefix);
-            if (oldURI != null) {
-                // resurrect hidden global prefix
-                hiddenPrefixes.remove(nsReg.getPrefix(oldURI));
-                // remove old mapping
-                uriToPrefix.remove(oldURI);
-                prefixToURI.remove(prefix);
-            }
-
-            if (!prefix.equals(globalPrefix)) {
-                // store new mapping
-                prefixToURI.put(prefix, uri);
-                uriToPrefix.put(uri, prefix);
-                hiddenPrefixes.add(globalPrefix);
-            }
-        }
-
-        String[] getPrefixes() throws RepositoryException {
-            if (prefixToURI.isEmpty()) {
-                // shortcut
-                return nsReg.getPrefixes();
-            }
-
-            HashSet prefixes = new HashSet();
-            // global prefixes
-            String[] globalPrefixes = nsReg.getPrefixes();
-            for (int i = 0; i < globalPrefixes.length; i++) {
-                if (!hiddenPrefixes.contains(globalPrefixes[i])) {
-                    prefixes.add(globalPrefixes[i]);
-                }
-            }
-            // local prefixes
-            prefixes.addAll(prefixToURI.keySet());
-
-            return (String[]) prefixes.toArray(new String[prefixes.size()]);
-        }
-
-        //------------------------------------------------< NamespaceResolver >
-        /**
-         * @see NamespaceResolver#getURI
-         */
-        public String getURI(String prefix) throws NamespaceException {
-            if (prefixToURI.isEmpty()) {
-                // shortcut
-                return nsReg.getURI(prefix);
-            }
-            // check local mappings
-            if (prefixToURI.containsKey(prefix)) {
-                return (String) prefixToURI.get(prefix);
-            }
-
-            // check global mappings
-            if (!hiddenPrefixes.contains(prefix)) {
-                return nsReg.getURI(prefix);
-            }
-
-            throw new NamespaceException(prefix + ": unknown prefix");
-        }
-
-        /**
-         * @see NamespaceResolver#getPrefix
-         */
-        public String getPrefix(String uri) throws NamespaceException {
-            if (prefixToURI.isEmpty()) {
-                // shortcut
-                return nsReg.getPrefix(uri);
-            }
-
-            // check local mappings
-            if (uriToPrefix.containsKey(uri)) {
-                return (String) uriToPrefix.get(uri);
-            }
-
-            // check global mappings
-            return nsReg.getPrefix(uri);
-        }
-    }
