JCR-2249: Remove duplicate code in InternalValueFactory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802755 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.util.ISO8601;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import javax.jcr.PropertyType;
-import javax.jcr.ValueFormatException;
-import java.io.UnsupportedEncodingException;
-import java.math.BigDecimal;
+import java.math.BigDecimal;
- * <code>InternalValueFactory</code>...
+ * <code>InternalValueFactory</code> implements a {@link QValueFactory} that
+ * creates {@link InternalValue} instances for binary values.
-    /**
-     * logger instance
-     */
-    private static final Logger log = LoggerFactory.getLogger(InternalValueFactory.class);
-
-    public QValue create(String value, int type) throws ValueFormatException, RepositoryException {
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        try {
-            switch (type) {
-                case PropertyType.BOOLEAN:
-                    return InternalValue.create(Boolean.valueOf(value).booleanValue());
-                case PropertyType.DATE: {
-                    Calendar cal = ISO8601.parse(value);
-                    if (cal == null) {
-                        throw new ValueFormatException("not a valid date: " + value);
-                    }
-                    return InternalValue.create(cal);
-                }
-                case PropertyType.DOUBLE:
-                    return InternalValue.create(Double.parseDouble(value));
-                case PropertyType.LONG:
-                    return InternalValue.create(Long.parseLong(value));
-                case PropertyType.DECIMAL:
-                    return InternalValue.create(new BigDecimal(value));
-                case PropertyType.PATH:
-                    return InternalValue.create(PathFactoryImpl.getInstance().create(value));
-                case PropertyType.NAME:
-                    return InternalValue.create(NameFactoryImpl.getInstance().create(value));
-                case PropertyType.STRING:
-                    return InternalValue.create(value);
-                case PropertyType.URI:
-                    return InternalValue.create(URI.create(value));
-                case PropertyType.REFERENCE:
-                    return InternalValue.create(new NodeId(value));
-                case PropertyType.WEAKREFERENCE:
-                    return InternalValue.create(new NodeId(value), true);
-                case PropertyType.BINARY:
-                    return InternalValue.create(value.getBytes("UTF-8"));
-                // default: invalid type specified -> see below.
-            }
-        } catch (NumberFormatException ex) {
-            // given String value cannot be converted to Decimal
-            throw new ValueFormatException(ex);
-        } catch (IllegalArgumentException ex) {
-            // given String value cannot be converted to Long/Double/Path/Name
-            throw new ValueFormatException(ex);
-        } catch (UnsupportedEncodingException ex) {
-            throw new RepositoryException(ex);
-        }
-
-        // invalid type specified:
-        throw new IllegalArgumentException("illegal type " + type);    }
-
+
+    protected QValue createReference(String ref, boolean weak) {
+        return InternalValue.create(new NodeId(ref), weak);
+    }
+
+    protected QValue createString(String value) {
+        return InternalValue.create(value);
+    }
