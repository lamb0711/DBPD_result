webapp: adding some better error reporting  (tobi)
webapp: adding support for late repository retrieval (tobi)
server: workspace not passed to Repository.login in webdav/simple/DavSessionProviderImpl
JCR-280 - IllegalArgumentException when retrieving DateHeader 
JCR-282 - respect maximal value for timeout
JCR-276 - SimpleWebdavServlet: avoid 404 on the root collection after successful connection to it.


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@349905 13f79535-47bb-0310-9956-ffa450edef68

-    // todo: implement correctly
-    public final static String INIT_PARAM_LOG4J_CONFIG = "log4j-config";
-
-    public final static String INIT_PARAM_MISSING_AUTH_MAPPING = "missing-auth-mapping";
+    //public final static String INIT_PARAM_MISSING_AUTH_MAPPING = "missing-auth-mapping";
-    private String repositoryName;
+    private static final String CTX_ATTR_REPOSITORY_NAME = "jcr.repository.name";
+
+    private static final String CTX_ATTR_REPOSITORY_RMI_URI = "jcr.repository.rmiURI";
+
+    private static final String CTX_ATTR_REPOSITORY_JNDI_CONTEXT = "jcr.repository.jndiContext";
-        repositoryName = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_NAME);
+        // fetching the name
+        String repositoryName = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_NAME);
-        Repository repository = null;
+        getServletContext().setAttribute(CTX_ATTR_REPOSITORY_NAME, repositoryName);
-        // try to retrieve via rmi
-        if (repository == null) {
-            String rmiURI = getRMIUri();
-            if (rmiURI != null) {
-                repository = getRepositoryByRMI(rmiURI);
-            }
-        }
-        // try to retrieve via jndi
-        if (repository == null) {
-            InitialContext context = getInitialContext();
-            if (context != null) {
-                repository = getRepositoryByJNDI(context);
-            }
-        }
-        // error
-        if (repository == null) {
-            log.error("Unable to retrieve repository");
-            throw new ServletException("Unable to retrieve repository");
-        }
-        getServletContext().setAttribute(CTX_ATTR_REPOSITORY, repository);
-        log.info(repository.getDescriptor(Repository.REP_NAME_DESC) + " v" + repository.getDescriptor(Repository.REP_VERSION_DESC));
+        // fetching the rmiuri
+        getServletContext().setAttribute(CTX_ATTR_REPOSITORY_RMI_URI, getRMIUri());
+
+        // setup initial context
+        getServletContext().setAttribute(CTX_ATTR_REPOSITORY_JNDI_CONTEXT, getInitialContext());
-    private InitialContext getInitialContext() throws ServletException {
+    private InitialContext getInitialContext() {
-	    throw new ServletException(e);
+	    return null;
-    private Repository getRepositoryByJNDI(InitialContext jndiContext) {
+    private static Repository getRepositoryByJNDI(ServletContext ctx) {
+        String repositoryName = (String) ctx.getAttribute(CTX_ATTR_REPOSITORY_NAME);
+        InitialContext jndiContext = (InitialContext) ctx.getAttribute(CTX_ATTR_REPOSITORY_JNDI_CONTEXT);
+        if (jndiContext == null) {
+            return null;
+        }
-    private Repository getRepositoryByRMI(String rmiURI) {
+    private static Repository getRepositoryByRMI(ServletContext ctx) {
+        String rmiURI = (String) ctx.getAttribute(CTX_ATTR_REPOSITORY_RMI_URI);
+        if (rmiURI == null) {
+            return null;
+        }
+     * @throws IllegalStateException if the repository is not available in the context.
-	return (Repository) ctx.getAttribute(CTX_ATTR_REPOSITORY);
+        Repository repository = (Repository) ctx.getAttribute(CTX_ATTR_REPOSITORY);
+        if (repository != null) {
+            return repository;
+        } else {
+            repository = getRepositoryByRMI(ctx);
+        }
+        // try to retrieve via jndi
+        if (repository == null) {
+            repository = getRepositoryByJNDI(ctx);
+        }
+        // error
+        if (repository == null) {
+            log.fatal("The repository is not available. Check config of 'RepositoryAccessServlet'.");
+            throw new IllegalStateException("The repository is not available.");
+        } else {
+            ctx.setAttribute(CTX_ATTR_REPOSITORY, repository);
+            log.info(repository.getDescriptor(Repository.REP_NAME_DESC) + " v" + repository.getDescriptor(Repository.REP_VERSION_DESC));
+            return repository;
+        }
