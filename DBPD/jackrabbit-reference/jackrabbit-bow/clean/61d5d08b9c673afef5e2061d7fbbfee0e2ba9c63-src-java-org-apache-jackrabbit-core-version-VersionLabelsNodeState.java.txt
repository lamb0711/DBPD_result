- adjusting version labels to spec 0.16.2

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153381 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.jackrabbit.core.state.NodeState;
-import java.util.Iterator;
- * This Class implements a virtual node state that represents a version.
- * since some properties like 'jcr:versionLabels', 'jcr:predecessors' etc. can
- * change over time, we treat them specially.
+ * This Class implements a virtual node state that represents a nt:versionLabels.
+ * node state.
-        try {
-            return vh.hasVersion(propName) && vh.getVersion(propName).getLabels().length>0;
-        } catch (VersionException e) {
-            return false;
-        }
+        return vh.getVersionByLabel(propName) != null;
-         Iterator iter = vh.getVersions();
-        while (iter.hasNext()) {
-            InternalVersion v = (InternalVersion) iter.next();
-            if (v.getLabels().length>0) {
-                list.add(createPropertyEntry(v.getName()));
-            }
+        QName[] labels = vh.getVersionLabels();
+        for (int i=0; i<labels.length; i++) {
+            list.add(createPropertyEntry(labels[i]));
-        } else if (vh.hasVersion(name)) {
-            try {
-                String[] labels = vh.getVersion(name).getLabels();
-                if (labels.length>0) {
+        } else {
+            InternalVersion v = vh.getVersionByLabel(name);
+            if (v != null) {
+                try {
-                        state = stateMgr.createPropertyState(this, name, PropertyType.STRING, true);
+                        state = stateMgr.createPropertyState(this, name, PropertyType.REFERENCE, false);
-                    state.setValues(InternalValue.create(labels));
+                    state.setValues(new InternalValue[]{InternalValue.create(UUID.fromString(v.getId()))});
+                } catch (VersionException e) {
+                    throw new NoSuchItemStateException(name.toString(), e);
+                } catch (RepositoryException e) {
+                    throw new NoSuchItemStateException(name.toString(), e);
-            } catch (VersionException e) {
-                throw new NoSuchItemStateException(name.toString(), e);
-            } catch (RepositoryException e) {
-                throw new NoSuchItemStateException(name.toString(), e);
