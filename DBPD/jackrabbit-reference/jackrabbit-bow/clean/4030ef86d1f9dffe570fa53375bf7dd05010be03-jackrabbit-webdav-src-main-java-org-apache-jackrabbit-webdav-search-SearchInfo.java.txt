Use namespace prefixes supplied with request to execute the query.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@483369 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.DavConstants;
+import org.w3c.dom.Attr;
+
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.Set;
+import java.util.HashSet;
+    /**
+     * Set of namespace uri String which are ignored in the search request.
+     */
+    private static final Set IGNORED_NAMESPACES;
+
+    static {
+        Set s = new HashSet();
+        s.add(Namespace.XMLNS_NAMESPACE.getURI());
+        s.add(Namespace.XML_NAMESPACE.getURI());
+        s.add(DavConstants.NAMESPACE.getURI());
+        IGNORED_NAMESPACES = Collections.unmodifiableSet(s);
+    }
+
+    private final Map namespaces;
+
+    /**
+     * Create a new <code>SearchInfo</code> instance.
+     *
+     * @param language
+     * @param languageNamespace
+     * @param query
+     * @param namespaces the re-mapped namespaces. Key=prefix, value=uri.
+     */
+    public SearchInfo(String language, Namespace languageNamespace, String query, Map namespaces) {
+        this.language = language;
+        this.languageNamespace = languageNamespace;
+        this.query = query;
+        this.namespaces = Collections.unmodifiableMap(new HashMap(namespaces));
+    }
-        this.language = language;
-        this.languageNamespace = languageNamespace;
-        this.query = query;
+        this(language,  languageNamespace, query, Collections.EMPTY_MAP);
+     * Returns the namespaces that have been re-mapped by the user.
+     *
+     * @return map of namespace to prefix mappings. Key=prefix, value=uri.
+     */
+    public Map getNamespaces() {
+        return namespaces;
+    }
+
+    /**
+        for (Iterator it = namespaces.keySet().iterator(); it.hasNext(); ) {
+            String prefix = (String) it.next();
+            String uri = (String) namespaces.get(prefix);
+            DomUtil.setNamespaceAttribute(sRequestElem, prefix, uri);
+        }
+        Attr[] nsAttributes = DomUtil.getNamespaceAttributes(searchRequest);
+        Map namespaces = new HashMap();
+        for (int i = 0; i < nsAttributes.length; i++) {
+            // filter out xmlns namespace and DAV namespace
+            if (!IGNORED_NAMESPACES.contains(nsAttributes[i].getValue())) {
+                namespaces.put(nsAttributes[i].getLocalName(), nsAttributes[i].getValue());
+            }
+        }
-            return new SearchInfo(first.getLocalName(), DomUtil.getNamespace(first), DomUtil.getText(first));
+            return new SearchInfo(first.getLocalName(), DomUtil.getNamespace(first), DomUtil.getText(first), namespaces);
