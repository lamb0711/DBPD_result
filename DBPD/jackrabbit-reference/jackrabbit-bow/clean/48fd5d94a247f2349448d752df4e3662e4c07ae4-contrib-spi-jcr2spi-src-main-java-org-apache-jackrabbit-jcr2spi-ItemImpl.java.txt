work in progress

- removeVersion missing
- LockManager/VersionManager: should not rely on observation (todo added)
- Add Operation.persisted() (Impl. still missing) in analogy to ChangeLog.persisted.
- ItemImpl.refresh behaves according to CacheBehaviour flag.
- NodeState: fix classcastexception when accessing state from propertiesInAttic
- ItemState: rename 'refresh()' to 'reload()
- ItemState: move code common to PropertyState and NodeState to ItemState
- ItemState: rename 'reset' to 'merge'
- add common interface ChildItemEntry
- SessionItemStateManager: avoid traversing twice during 'undo'

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477095 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.config.CacheBehaviour;
-        // check if item has been removed
+        // check if item has been removed by this or another session
+        /* If 'keepChanges' is true, items that do not have changes pending have
+           their state refreshed to reflect the current saved state */
-            state.refresh();
+            if (state.getStatus() != Status.NEW  &&
+                session.getCacheBehaviour() != CacheBehaviour.OBSERVATION) {
+                // merge current transient modifications with latest changes
+                // from the 'server'.
+                // Note, that with Observation-CacheBehaviour no manuel refresh
+                // is required. changes get pushed automatically.
+                state.reload(true);
+            }
-            // check status of this item's state
+            // check status of item state
-            // reset all transient modifications from this item and its decendants.
+            /*
+            Reset all transient modifications from this item and its decendants.
+            */
-            // now refresh to persistent state as present on the server
-            state.refresh();
+            /* Unless the session is in 'observation' mode, mark all states
+               within this tree 'invalidated' in order to have them refreshed
+               from the server upon the next access.*/
+            if (session.getCacheBehaviour() != CacheBehaviour.OBSERVATION) {
+                state.invalidate(true);
+            }
-            state.refresh();
+            state.reload(false);
