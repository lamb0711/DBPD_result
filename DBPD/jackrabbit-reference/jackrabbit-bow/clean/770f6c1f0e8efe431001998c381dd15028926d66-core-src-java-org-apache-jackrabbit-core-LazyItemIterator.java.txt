optimized LazyItemIterator and made it more forgiving

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@216177 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Item;
-import java.util.ArrayList;
-import java.util.Iterator;
+import java.util.ArrayList;
+ * <p/>
+ * <strong>Important:</strong> <code>Item</code>s that appear to be nonexistent
+ * for some reason (e.g. because of insufficient access rights or because they
+ * have been removed since the iterator has been retrieved) are silently
+ * skipped. As a result the size of the iterator as reported by
+ * {@link #getSize()} might appear to be shrinking while iterating over the
+ * items.
+ * todo should getSize() better always return -1?
+ *
+ * @see #getSize()
+    /** Logger instance for this class */
-    /**
-     * the item manager that is used to fetch the items
-     */
+    /** the item manager that is used to lazily fetch the items */
-    /**
-     * the list of item ids
-     */
+    /** the list of item ids */
-    /**
-     * the position of the next item
-     */
-    private int pos = 0;
+    /** the position of the next item */
+    private int pos;
+
+    /** prefetched item to be returned on <code>{@link #next()}</code> */
+    private Item next;
-        this(itemMgr, idList, false);
+        this.itemMgr = itemMgr;
+        this.idList = new ArrayList(idList);
+        // prefetch first item
+        pos = 0;
+        prefetchNext();
-     * Creates a new <code>LazyItemIterator</code> instance.
-     *
-     * @param itemMgr        item manager
-     * @param idList         list of item id's
-     * @param skipInexistent if <code>true</code> the id's of those items
-     *                       that appear to be non-existent will be filtered
-     *                       out silently; otherwise such entries will cause
-     *                       a <code>NoSuchElementException</code> on
-     *                       <code>{@link #next()}</code> .
+     * Prefetches next item.
+     * <p/>
+     * {@link #next} is set to the next available item in this iterator or to
+     * <code>null</code> in case there are no more items.
-    public LazyItemIterator(ItemManager itemMgr, List idList,
-                            boolean skipInexistent) {
-        this.itemMgr = itemMgr;
-        if (skipInexistent) {
-            // check existence of all items first
-            this.idList = new ArrayList();
-            Iterator iter = idList.iterator();
-            while (iter.hasNext()) {
-                ItemId id = (ItemId) iter.next();
-                if (itemMgr.itemExists(id)) {
-                    this.idList.add(id);
-                }
+    private void prefetchNext() {
+        // reset
+        next = null;
+        while (next == null && pos < idList.size()) {
+            ItemId id = (ItemId) idList.get(pos);
+            if (!itemMgr.itemExists(id)) {
+                log.debug("ignoring nonexistent item " + id);
+                // remove invalid id
+                idList.remove(pos);
+                // try next
+                continue;
-        } else {
-            this.idList = idList;
+            try {
+                next = itemMgr.getItem(id);
+            } catch (RepositoryException e) {
+                // should never get here since existence has already been checked...
+                log.error("failed to fetch item " + id + ", skipping...", e);
+                // remove invalid id
+                idList.remove(pos);
+                // try next
+            }
-    //------------------------------------------------------< RangeIterator >---
+    //--------------------------------------------------------< RangeIterator >
+     * <p/>
+     * Note that the size of the iterator as reported by {@link #getSize()}
+     * might appear to be shrinking while iterating because items that for
+     * some reason cannot be retrieved through this iterator are silently
+     * skipped, thus reducing the size of this iterator.
+     *
+     * todo better to always return -1?
-            throw new IllegalArgumentException("skipNum must be a positive number");
+            throw new IllegalArgumentException("skipNum must not be negative");
-        if (pos + skipNum > idList.size()) {
-            throw new NoSuchElementException("skipNum + pos greater than size");
+        if (skipNum == 0) {
+            return;
-        pos += skipNum;
+        if (next == null) {
+            throw new NoSuchElementException();
+        }
+
+        // reset
+        next = null;
+        // skip the first (skipNum - 1) items without actually retrieving them
+        while (--skipNum > 0) {
+            pos++;
+            if (pos >= idList.size()) {
+                // skipped past last item
+                throw new NoSuchElementException();
+            }
+            ItemId id = (ItemId) idList.get(pos);
+            // eliminate invalid items from this iterator
+            while (!itemMgr.itemExists(id)) {
+                log.debug("ignoring nonexistent item " + id);
+                // remove invalid id
+                idList.remove(pos);
+                if (pos >= idList.size()) {
+                    // skipped past last item
+                    throw new NoSuchElementException();
+                }
+                id = (ItemId) idList.get(pos);
+                // try next
+                continue;
+            }
+        }
+        // prefetch final item (the one to be returned on next())
+        pos++;
+        prefetchNext();
-        return pos < idList.size();
+        return next != null;
-        if (pos >= idList.size()) {
+        if (next == null) {
-        ItemId id = (ItemId) idList.get(pos++);
-        try {
-            return itemMgr.getItem(id);
-        } catch (RepositoryException e) {
-            log.debug("failed to fetch item " + id, e);
-            throw new NoSuchElementException(e.getMessage());
-        }
+        Item item = next;
+        pos++;
+        prefetchNext();
+        return item;
