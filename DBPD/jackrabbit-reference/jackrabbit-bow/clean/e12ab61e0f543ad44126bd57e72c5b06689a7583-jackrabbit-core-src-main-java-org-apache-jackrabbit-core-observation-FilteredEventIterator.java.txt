JCR-3172: implement PERSIST events for the EventJournal

Add PERSIST events to EventJournal, add a minimal test case

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1212472 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.NoSuchElementException;
+import javax.jcr.observation.Event;
+     * @param includePersistEvent whether or not to include the {@link Event#PERSIST} event
-            SessionImpl session, Iterator<?> eventStates,
+            SessionImpl session, Iterator<EventState> eventStates,
-            final EventFilter filter, final Set<?> denied) {
-        super(new FilteredRangeIterator(eventStates, new Predicate() {
+            final EventFilter filter, final Set<?> denied, boolean includePersistEvent) {
+        super(new FilteredRangeIterator(wrapAndAddPersist(eventStates, includePersistEvent), new Predicate() {
+    /**
+     * Optionally wrap the iterator into one that adds PERSIST events
+     */
+    private static Iterator<EventState> wrapAndAddPersist(final Iterator<EventState> states,
+            boolean includePersistEvents) {
+        if (includePersistEvents) {
+            return new PersistEventAddingWrapper(states);
+        }
+        else {
+            return states;
+        }
+    }
+
+    /**
+     * A wrapper around {@link Iterator} that adds a "PERSIST" event at the end.
+     */
+    private static class PersistEventAddingWrapper implements Iterator<EventState> {
+
+        private Iterator<EventState> states;
+        private boolean persistSent = false;
+        private EventState previous = null;
+
+        public PersistEventAddingWrapper(Iterator<EventState> states) {
+            this.states = states;
+        }
+
+        public boolean hasNext() {
+            if (states.hasNext()) {
+                return true;
+            } else {
+                return !persistSent;
+            }
+        }
+
+        public EventState next() {
+            if (states.hasNext()) {
+                previous = states.next();
+                return previous;
+            }
+            else if (persistSent || previous == null) {
+                // we are at the end; either because we already sent
+                // PERSIST, or because the iterator was empty anyway
+                throw new NoSuchElementException();
+            }
+            else {
+                persistSent = true;
+                return EventState.persist(previous.getSession(), previous.isExternal());
+            }
+        }
+
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }
