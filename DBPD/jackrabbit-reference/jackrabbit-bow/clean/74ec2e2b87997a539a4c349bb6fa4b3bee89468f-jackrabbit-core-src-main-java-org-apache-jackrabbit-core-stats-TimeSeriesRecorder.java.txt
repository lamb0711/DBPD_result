JCR-3040 JMX Stats for the Session
 - integration work

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1182466 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.stats.TimeSeries;
+import org.apache.jackrabbit.api.stats.RepositoryStatistics.Type;
+
-    /** Event counter */
+    /** Type */
+    private final Type type;
+    
+    /** Value */
-    /** Number of events per second over the last minute. */
-    private final long[] eventsPerSecond = new long[60];
+    /** Measured value per second over the last minute. */
+    private final long[] valuePerSecond = new long[60];
-    /** Number of events per minute over the last hour. */
-    private final long[] eventsPerMinute = new long[60];
+    /** Measured value per minute over the last hour. */
+    private final long[] valuePerMinute = new long[60];
-    /** Number of events per hour over the last week. */
-    private final long[] eventsPerHour = new long[7 * 24];
+    /** Measured value per hour over the last week. */
+    private final long[] valuePerHour = new long[7 * 24];
-    /** Number of events per week over the last three years. */
-    private final long[] eventsPerWeek = new long[3 * 52];
+    /** Measured value per week over the last three years. */
+    private final long[] valuePerWeek = new long[3 * 52];
-    /** Current second (index in {@link #eventsPerSecond}) */
+    /** Current second (index in {@link #valuePerSecond}) */
-    /** Current minute (index in {@link #eventsPerMinute}) */
+    /** Current minute (index in {@link #valuePerMinute}) */
-    /** Current hour (index in {@link #eventsPerHour}) */
+    /** Current hour (index in {@link #valuePerHour}) */
-    /** Current week (index in {@link #eventsPerWeek}) */
+    /** Current week (index in {@link #valuePerWeek}) */
+    public TimeSeriesRecorder(Type type) {
+        this.type = type;
+    }
+
-     * Returns the {@link AtomicLong} instance used to count events for
+     * Returns the {@link AtomicLong} instance used to measure the value for
-     * @return event counter
+     * @return value
-     * Records the number of counted events over the past second and resets
+     * Records the number of measured values over the past second and resets
-        eventsPerSecond[seconds++] = counter.getAndSet(0);
-        if (seconds == eventsPerSecond.length) {
+        if (type.isResetValueEachSecond()) {
+            valuePerSecond[seconds++] = counter.getAndSet(0);
+        } else {
+            valuePerSecond[seconds++] = counter.get();
+        }
+        if (seconds == valuePerSecond.length) {
-            eventsPerMinute[minutes++] = sum(eventsPerSecond);
+            valuePerMinute[minutes++] = aggregate(valuePerSecond);
-        if (minutes == eventsPerMinute.length) {
+        if (minutes == valuePerMinute.length) {
-            eventsPerHour[hours++] = sum(eventsPerMinute);
+            valuePerHour[hours++] = aggregate(valuePerMinute);
-        if (hours == eventsPerHour.length) {
+        if (hours == valuePerHour.length) {
-            eventsPerWeek[weeks++] = sum(eventsPerHour);
+            valuePerWeek[weeks++] = aggregate(valuePerHour);
-        if (weeks == eventsPerWeek.length) {
+        if (weeks == valuePerWeek.length) {
-    public synchronized long[] getEventsPerSecond() {
-        return cyclicCopyFrom(eventsPerSecond, seconds);
+    public synchronized long[] getValuePerSecond() {
+        return cyclicCopyFrom(valuePerSecond, seconds);
-    public synchronized long[] getEventsPerMinute() {
-        return cyclicCopyFrom(eventsPerMinute, minutes);
+    public synchronized long[] getValuePerMinute() {
+        return cyclicCopyFrom(valuePerMinute, minutes);
-    public synchronized long[] getEventsPerHour() {
-        return cyclicCopyFrom(eventsPerHour, hours);
+    public synchronized long[] getValuePerHour() {
+        return cyclicCopyFrom(valuePerHour, hours);
-    public synchronized long[] getEventsPerWeek() {
-        return cyclicCopyFrom(eventsPerWeek, weeks);
+    public synchronized long[] getValuePerWeek() {
+        return cyclicCopyFrom(valuePerWeek, weeks);
-    private static long sum(long[] array) {
+    private long aggregate(long[] array) {
+
-        return sum;
+        if (type.isResetValueEachSecond()) {
+            return sum;
+        }
+        return sum / array.length;
