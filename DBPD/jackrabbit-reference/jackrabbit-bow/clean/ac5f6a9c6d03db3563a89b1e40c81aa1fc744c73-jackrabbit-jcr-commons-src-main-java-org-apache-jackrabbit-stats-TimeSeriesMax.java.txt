JCR-3860: Properly expose missing values in TimeSeries implementations
Add encoding for default value so clients get a chance to identify them. Default is 0 for backward compatibility.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1706408 13f79535-47bb-0310-9956-ffa450edef68

+import static java.util.Arrays.fill;
+
-    private final MaxValue max = new MaxValue(0);
-    private final long[] perSecond = new long[60];
-    private final long[] perMinute = new long[60];
-    private final long[] perHour = new long[7 * 24];
-    private final long[] perWeek = new long[3 * 52];
+    private final MaxValue max;
+    private final long missingValue;
+    private final long[] perSecond;
+    private final long[] perMinute;
+    private final long[] perHour;
+    private final long[] perWeek;
+    public TimeSeriesMax() {
+        this(0);
+    }
+
+    public TimeSeriesMax(long missingValue) {
+        this.missingValue = missingValue;
+        max = new MaxValue(missingValue);
+        perSecond = newArray(60, missingValue);
+        perMinute = newArray(60, missingValue);
+        perHour = newArray(7 * 24, missingValue);
+        perWeek = newArray(3 * 52, missingValue);
+    }
+
+    private static long[] newArray(int size, long value) {
+        long[] array = new long[size];
+        fill(array, value);
+        return array;
+    }
+
-        perSecond[seconds++] = max.getAndSetValue(0);
+        perSecond[seconds++] = max.getAndSetValue(missingValue);
+    public long getMissingValue() {
+        return missingValue;
+    }
+
+    @Override
-    private static long max(long[] array) {
-        long max = Long.MIN_VALUE;
+    private long max(long[] array) {
+        long max = missingValue;
-            if (v > max) {
+            if (max == missingValue) {
+            } else if (v != missingValue) {
+                max = Math.max(max, v);
-    private static class MaxValue {
-        private long value;
+    private class MaxValue {
+        private long max;
-        public MaxValue(long value) {
-            this.value = value;
+        public MaxValue(long max) {
+            this.max = max;
-            long v = this.value;
-            this.value = value;
+            long v = max;
+            max = value;
-            if (value > this.value) {
-                this.value = value;
+            if (max == missingValue) {
+                max = value;
+            } else if (value != missingValue) {
+                max = Math.max(max, value);
