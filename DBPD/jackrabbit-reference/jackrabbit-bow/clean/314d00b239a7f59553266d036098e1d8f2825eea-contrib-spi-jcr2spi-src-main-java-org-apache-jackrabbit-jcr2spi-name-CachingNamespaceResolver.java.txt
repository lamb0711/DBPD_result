replacing deprecated calls in NamespaceResolver

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@425032 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.PathFormat;
-import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.name.NameCache;
-class CachingNamespaceResolver implements NamespaceResolver, NamespaceListener {
+class CachingNamespaceResolver implements NamespaceResolver, NamespaceListener, NameCache {
-     * @inheritDoc
+     * Disposes this <code>CachingNamespaceResolver</code>.
+     */
+    public void dispose() {
+        base.removeListener(this);
+    }
+
+    //--------------------------------------------------< NamespaceResolver >---
+    /**
+     * @see NamespaceResolver#getURI(String)
-     * @inheritDoc
+     * @see NamespaceResolver#getPrefix(String)
-     * @inheritDoc
+     * @see NamespaceResolver#getQName(String)
+     * @deprecated
-     * @inheritDoc
+     * @see NamespaceResolver#getJCRName(QName)
+     * @deprecated
-    /**
-     * @inheritDoc
-     * As currently paths are not cached, the call is delegated to
-     * {@link PathFormat#parse(String, NamespaceResolver)}.
-     */
-    public Path getQPath(String jcrPath) throws MalformedPathException {
-        return PathFormat.parse(jcrPath, this);
-    }
-
-    /**
-     * @inheritDoc
-     * As currently paths are not cached, the call is delegated to
-     * {@link PathFormat#format(Path, NamespaceResolver)}.
-     */
-    public String getJCRPath(Path qPath) throws NoPrefixDeclaredException {
-        return PathFormat.format(qPath, this);
-    }
-
-    /**
-     * Disposes this <code>CachingNamespaceResolver</code>.
-     */
-    public void dispose() {
-        base.removeListener(this);
-    }
-
+
+    //----------------------------------------------------------< NameCache >---
+    /**
+     * @inheritDoc
+     */
+    public synchronized QName retrieveName(String jcrName) {
+        return (QName) jcrNameToQName.get(jcrName);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public synchronized String retrieveName(QName name) {
+        return (String) qnameToJCRName.get(name);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public synchronized void cacheName(String jcrName, QName name) {
+        qnameToJCRName.put(name, jcrName);
+        jcrNameToQName.put(jcrName, name);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public synchronized void evictAllNames() {
+        qnameToJCRName.clear();
+        jcrNameToQName.clear();
+    }
