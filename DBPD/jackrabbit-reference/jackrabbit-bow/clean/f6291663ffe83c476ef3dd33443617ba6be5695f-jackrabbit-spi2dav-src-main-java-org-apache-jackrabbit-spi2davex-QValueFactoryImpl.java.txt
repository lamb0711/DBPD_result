JCR-2028: JSR 283 JCR Path

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772659 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NameFactory;
-import org.apache.jackrabbit.spi.PathFactory;
-import org.apache.jackrabbit.spi.QPropertyDefinition;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
+import org.apache.jackrabbit.spi.commons.value.AbstractQValueFactory;
+import org.apache.jackrabbit.spi.commons.value.AbstractQValue;
-import org.apache.jackrabbit.uuid.UUID;
+import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.DavException;
-class QValueFactoryImpl implements QValueFactory {
-
-    private static final PathFactory PATH_FACTORY = PathFactoryImpl.getInstance();
-    private static final NameFactory NAME_FACTORY = NameFactoryImpl.getInstance();
-    private static final String DEFAULT_ENCODING = "UTF-8";
+class QValueFactoryImpl extends AbstractQValueFactory {
-        return new QValueImpl(new Double(value));
+        return new QValueImpl(Double.valueOf(value));
-        return new QValueImpl(new Long(value));
+        return new QValueImpl(Long.valueOf(value));
-    /**
-     * @see QValueFactory#computeAutoValues(QPropertyDefinition)
-     */
-    public QValue[] computeAutoValues(QPropertyDefinition propertyDefinition) throws RepositoryException {
-        Name nodeType = propertyDefinition.getDeclaringNodeType();
-        Name name = propertyDefinition.getName();
-
-        if (NameConstants.NT_HIERARCHYNODE.equals(nodeType) && NameConstants.JCR_CREATED.equals(name)) {
-            return new QValue[] { create(Calendar.getInstance()) };
-        } else if (NameConstants.NT_RESOURCE.equals(nodeType) && NameConstants.JCR_LASTMODIFIED.equals(name)) {
-            return new QValue[] { create(Calendar.getInstance()) };
-        } else if (NameConstants.MIX_REFERENCEABLE.equals(nodeType) && NameConstants.JCR_UUID.equals(name)) {
-            return new QValue[] { create(UUID.randomUUID().toString(), PropertyType.STRING) };
-        } else {
-            throw new RepositoryException("createFromDefinition not implemented for: " + name);
-        }
-    }
-
-    private static class QValueImpl implements QValue, Serializable {
+    private static class QValueImpl extends AbstractQValue implements Serializable {
-        private final Object val;
-        private final int type;
-
-            val = value;
-            this.type = type;
+            super(value, type);
-            val = value;
-            type = PropertyType.LONG;
+            super(value);
-            val = value;
-            type = PropertyType.DOUBLE;
+            super(value);
-            val = value;
-            type = PropertyType.BOOLEAN;
+            super(value);
-            val = value;
-            this.type = PropertyType.DATE;
+            super(value);
-            val = value;
-            type = PropertyType.NAME;
+            super(value);
-            val = value;
-            type = PropertyType.PATH;
+            super(value);
-        protected String getQString(int type) throws RepositoryException {
-            return getString();
-        }
-         * @see QValue#getType()
-         */
-        public int getType() {
-            return type;
-        }
-
-        /**
-         * @see QValue#getLength()
-         */
-        public long getLength() throws RepositoryException {
-            return getString().length();
-        }
-
-        /**
-                return new ByteArrayInputStream(getString().getBytes(QValueFactoryImpl.DEFAULT_ENCODING));
+                return new ByteArrayInputStream(getString().getBytes(DEFAULT_ENCODING));
-
-        public boolean getBoolean() throws RepositoryException {
-            if (val instanceof Boolean) {
-                return ((Boolean) val).booleanValue();
-            } else {
-                return new Boolean(getString()).booleanValue();
-            }
-        }
-
-        /**
-         * @see QValue#getName()
-         */
-        public Name getName() throws RepositoryException {
-            if (val instanceof Name) {
-                return (Name) val;
-            } else {
-                try {
-                    return NAME_FACTORY.create(getString());
-                } catch (IllegalArgumentException e) {
-                    throw new ValueFormatException("not a valid Name value: " + getString(), e);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#getPath()
-         */
-        public Path getPath() throws RepositoryException {
-            if (val instanceof Path) {
-                return (Path) val;
-            } else {
-                try {
-                    return PATH_FACTORY.create(getString());
-                } catch (IllegalArgumentException e) {
-                    throw new ValueFormatException("not a valid Path value: " + getString(), e);
-                }
-            }
-        }
-
-        /**
-         * @see QValue#discard()
-         */
-        public void discard() {
-            // nothing to do
-        }
-
-        //---------------------------------------------------------< Object >---
-        /**
-         * Returns the string representation of this internal value.
-         *
-         * @return string representation of this internal value.
-         * @see Object#toString() 
-         */
-        public String toString() {
-            return val.toString();
-        }
-
-        /**
-         * @see Object#equals(Object)
-         */
-        public boolean equals(Object obj) {
-            if (this == obj) {
-                return true;
-            }
-            if (obj instanceof QValueImpl) {
-                QValueImpl other = (QValueImpl) obj;
-                if (type == other.type && type != PropertyType.UNDEFINED) {
-                    return getString().equals(other.getString());
-                }
-                try {
-                    int type = getType();
-                    return type == other.getType() && getQString(type).equals(other.getQString(type));
-                } catch (RepositoryException e) {
-                    // should never get here. return false.
-                }
-            }
-            return false;
-        }
-
-        /**
-         * @return the hashCode of the internal value object.
-         * @see Object#hashCode()
-         */
-        public int hashCode() {
-            return val.hashCode();
-        }
-                return formattedStr.equals(other.getString()) &&
-                       other.getType() == PropertyType.DATE;
+                return other.getType() == PropertyType.DATE && formattedStr.equals(other.getString());
