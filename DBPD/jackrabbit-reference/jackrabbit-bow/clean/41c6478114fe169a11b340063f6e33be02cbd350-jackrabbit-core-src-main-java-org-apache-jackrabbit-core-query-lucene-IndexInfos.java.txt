JCR-3299: Adding new index infos generation is not atomic

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1327914 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.EOFException;
+import java.util.Arrays;
-        long gen = getCurrentGeneration(getFileNames(dir, baseName), baseName);
-        if (gen == -1) {
+        long gens[] = getGenerations(getFileNames(dir, baseName), baseName);
+        if (gens.length == 0) {
-            this.generation = gen;
-            read();
+            // read most recent generation
+            for (int i = gens.length - 1; i >= 0; i--) {
+                try {
+                    this.generation = gens[i];
+                    read();
+                    break;
+                } catch (EOFException e) {
+                    String fileName = getFileName(gens[i]);
+                    log.warn("deleting invalid index infos file: " + fileName);
+                    dir.deleteFile(fileName);
+                    // reset generation
+                    this.generation = 0;
+                }
+            }
-     * Returns the most current generation of the given files.
+     * Returns the generations fo the given files in ascending order.
-     * @param fileNames the file names from where to obtain the generation.
+     * @param fileNames the file names from where to obtain the generations.
-     * @return the most current generation.
+     * @return the generations in ascending order.
-    private static long getCurrentGeneration(String[] fileNames, String base) {
-        long max = -1;
-        int i = 0;
-        while (i < fileNames.length) {
-            long gen = generationFromFileName(fileNames[i], base);
-            if (gen > max) {
-                max = gen;
-            }
-            i++;
+    private static long[] getGenerations(String[] fileNames, String base) {
+        long[] gens = new long[fileNames.length];
+        for (int i = 0; i < fileNames.length; i++) {
+            gens[i] = generationFromFileName(fileNames[i], base);
-        return max;
+        Arrays.sort(gens);
+        return gens;
