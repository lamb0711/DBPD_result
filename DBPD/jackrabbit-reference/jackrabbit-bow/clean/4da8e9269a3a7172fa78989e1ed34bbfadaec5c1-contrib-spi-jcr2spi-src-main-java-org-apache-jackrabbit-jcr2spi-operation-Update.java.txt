work in progress

- operations: rename getAffectedIds to getAffectedStates
- operations: return ItemState params instead of ids whereever possible and
  let OperationVisitor deal with all kind of issues arising with SPI ids.
- AddNode/AddProperty operations: don't list state to be created as affected. Not required since operations are collected upon refresh/save, in which case a 'new' item can never be the starting point.
- transient move: let parent NodeState handle the move/renaming of child states
- transient reorder: let parent NodeState handle the reorder logic
- NodeState: remove unused methods and mark setParent private
- NodeImpl: protected getNodeId() no more used by subclasses in version package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431887 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.jcr2spi.state.NodeState;
-    private final NodeId nodeId;
+    private final NodeState nodeState;
-    private Update(NodeId nodeId, String srcWorkspaceName) {
-        this.nodeId = nodeId;
+    private Update(NodeState nodeState, String srcWorkspaceName) {
+        this.nodeState = nodeState;
-        this.addAffectedItemId(nodeId);
+        this.addAffectedItemState(nodeState);
-    public NodeId getNodeId() {
-        return nodeId;
+    public NodeState getNodeState() {
+        return nodeState;
-     * @param nodeId
+     * @param nodeState
-    public static Operation create(NodeId nodeId, String srcWorkspaceName) {
-        Update up = new Update(nodeId, srcWorkspaceName);
+    public static Operation create(NodeState nodeState, String srcWorkspaceName) {
+        Update up = new Update(nodeState, srcWorkspaceName);
