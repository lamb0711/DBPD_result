- added command line interface (o.a.j.chain.cli)
- removed jmeter dependencies
- added CLI i18n support 
- added info commands (ls, cat, etc.) (o.a.j.chain.info) 
- added literal and context attributes to commands
- added testing
- added javadocs

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@231495 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.chain.ContextHelper;
+import org.apache.jackrabbit.chain.CtxHelper;
+import org.apache.jackrabbit.chain.JcrCommandException;
- * Login command.
+ * Login command. <br>
+ * The Command attributes are set from the specified literal values, or from the
+ * context attributes stored under the given keys.
-public class Login implements Command {
-	/** user */
-	private String user;
+public class Login implements Command
+{
-	/** password */
-	private String password;
+    // ---------------------------- < literals >
-	/** workspace */
-	private String workspace;
+    /** user */
+    private String user;
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see org.apache.commons.chain.Command#execute(org.apache.commons.chain.Context)
-	 */
-	public boolean execute(Context ctx) throws Exception {
-		Session session = null;
-		Repository repo = ContextHelper.getRepository(ctx);
+    /** password */
+    private String password;
+
+    /** workspace */
+    private String workspace;
+
+    // ---------------------------- < keys >
+    /** user key */
+    private String userKey;
+
+    /** password key */
+    private String passwordKey;
+
+    /** workspace key */
+    private String workspaceKey;
+
+    /**
+     * @inheritDoc
+     */
+    public boolean execute(Context ctx) throws Exception
+    {
+        if (CtxHelper.getSession(ctx) != null)
+        {
+            throw new JcrCommandException("already.logged.in");
+        }
+
+        String anon = "anonymous";
+
+        String user = CtxHelper.getAttr(this.user, this.userKey, anon,
+            ctx);
+
+        String password = CtxHelper.getAttr(this.password,
+            this.passwordKey, anon, ctx);
+
+        String workspace = CtxHelper.getAttr(this.workspace,
+            this.workspaceKey, ctx);
+
+        Session session = null;
+        Repository repo = CtxHelper.getRepository(ctx);
+
+        if (repo == null)
+        {
+            throw new JcrCommandException("repository.not.in.context");
+        }
-				.toCharArray());
+            .toCharArray());
-		if (this.workspace == null) {
-			session = repo.login(credentials);
-		} else {
-			session = repo.login(credentials, workspace);
-		}
-		ContextHelper.setSession(ctx, session);
-		ContextHelper.setCurrentNode(ctx, session.getRootNode());
-		return false;
-	}
+        if (workspace == null)
+        {
+            session = repo.login(credentials);
+        } else
+        {
+            session = repo.login(credentials, workspace);
+        }
+        CtxHelper.setSession(ctx, session);
+        CtxHelper.setCurrentNode(ctx, session.getRootNode());
+        return false;
+    }
-	/**
-	 * @return Returns the password.
-	 */
-	public String getPassword() {
-		return password;
-	}
+    /**
+     * @return Returns the password.
+     */
+    public String getPassword()
+    {
+        return password;
+    }
-	/**
-	 * @param password
-	 *            The password to set.
-	 */
-	public void setPassword(String password) {
-		this.password = password;
-	}
+    /**
+     * @param password
+     *            The password to set.
+     */
+    public void setPassword(String password)
+    {
+        this.password = password;
+    }
-	/**
-	 * @return Returns the user.
-	 */
-	public String getUser() {
-		return user;
-	}
+    /**
+     * @return Returns the user.
+     */
+    public String getUser()
+    {
+        return user;
+    }
-	/**
-	 * @param user
-	 *            The user to set.
-	 */
-	public void setUser(String user) {
-		this.user = user;
-	}
+    /**
+     * @param user
+     *            The user to set.
+     */
+    public void setUser(String user)
+    {
+        this.user = user;
+    }
-	/**
-	 * @return Returns the workspace.
-	 */
-	public String getWorkspace() {
-		return workspace;
-	}
+    /**
+     * @return Returns the workspace.
+     */
+    public String getWorkspace()
+    {
+        return workspace;
+    }
-	/**
-	 * @param workspace
-	 *            The workspace to set.
-	 */
-	public void setWorkspace(String workspace) {
-		this.workspace = workspace;
-	}
+    /**
+     * @param workspace
+     *            The workspace to set.
+     */
+    public void setWorkspace(String workspace)
+    {
+        this.workspace = workspace;
+    }
+
+    /**
+     * @return Returns the passwordKey.
+     */
+    public String getPasswordKey()
+    {
+        return passwordKey;
+    }
+
+    /**
+     * @param passwordKey
+     *            Set the context attribute key for the password attribute.
+     */
+    public void setPasswordKey(String passwordKey)
+    {
+        this.passwordKey = passwordKey;
+    }
+
+    /**
+     * @return Returns the userKey.
+     */
+    public String getUserKey()
+    {
+        return userKey;
+    }
+
+    /**
+     * @param userKey
+     *            Set the context attribute key for the user attribute.
+     */
+    public void setUserKey(String userKey)
+    {
+        this.userKey = userKey;
+    }
+
+    /**
+     * @return Returns the workspaceKey.
+     */
+    public String getWorkspaceKey()
+    {
+        return workspaceKey;
+    }
+
+    /**
+     * @param workspaceKey
+     *            Set the context attribute key for the workspace attribute.
+     */
+    public void setWorkspaceKey(String workspaceKey)
+    {
+        this.workspaceKey = workspaceKey;
+    }
