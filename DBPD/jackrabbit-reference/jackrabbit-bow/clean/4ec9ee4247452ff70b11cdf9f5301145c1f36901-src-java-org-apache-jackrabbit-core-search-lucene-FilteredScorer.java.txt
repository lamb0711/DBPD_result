- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.search.Scorer;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.Scorer;
-import org.apache.lucene.index.IndexReader;
- *
- * @version $Revision: 1.1 $, $Date: 2004/01/23 15:55:40 $
- * @author Marcel Reutegger
-    /** The <code>Scorer</code> of the real lucene query */
+    /**
+     * The <code>Scorer</code> of the real lucene query
+     */
-    /** The {@link org.apache.jackrabbit.core.search.lucene.PackageFilter} for filtering the hits */
+    /**
+     * The {@link org.apache.jackrabbit.core.search.lucene.PackageFilter} for filtering the hits
+     */
-    /** The <code>IndexReader</code> for reading from the search index */
+    /**
+     * The <code>IndexReader</code> for reading from the search index
+     */
-    /** The <code>HitCollector</code> with filtering facility */
+    /**
+     * The <code>HitCollector</code> with filtering facility
+     */
+     *
-	super(Similarity.getDefault());
-	this.delegatee = delegatee;
-	this.filter = filter;
-	this.reader = reader;
+        super(Similarity.getDefault());
+        this.delegatee = delegatee;
+        this.filter = filter;
+        this.reader = reader;
-	return delegatee.explain(doc);
+        return delegatee.explain(doc);
-     * @param hc the <code>HitCollector</code> from the underlying
-     *   lucene query.
+     *
+     * @param hc     the <code>HitCollector</code> from the underlying
+     *               lucene query.
-     *   e.g. while reading from the search index.
+     *                     e.g. while reading from the search index.
-	if (collector == null) {
-	    collector = new FilteredHitCollector();
-	}
-	collector.setDelegatee(hc);
-	delegatee.score(collector, maxDoc);
+        if (collector == null) {
+            collector = new FilteredHitCollector();
+        }
+        collector.setDelegatee(hc);
+        delegatee.score(collector, maxDoc);
-	/** The unfiltered <code>HitCollector</code>. */
-	private HitCollector delegateeCollector;
+        /**
+         * The unfiltered <code>HitCollector</code>.
+         */
+        private HitCollector delegateeCollector;
-	/** The filter */
-	private BitSet filterBitSet;
+        /**
+         * The filter
+         */
+        private BitSet filterBitSet;
-	/**
-	 * Creates a new <code>FilteredHitCollector</code>.
-	 * @throws IOException if an error occurs while
-	 *   calculating the filter.
-	 */
-	FilteredHitCollector() throws IOException {
-	    filterBitSet = filter.bits(reader);
-	}
+        /**
+         * Creates a new <code>FilteredHitCollector</code>.
+         *
+         * @throws IOException if an error occurs while
+         *                     calculating the filter.
+         */
+        FilteredHitCollector() throws IOException {
+            filterBitSet = filter.bits(reader);
+        }
-	/**
-	 * Sets the currently used unfiltered <code>HitCollector</code>.
-	 * @param hc the new <code>HitCollector</code>.
-	 */
-	private void setDelegatee(HitCollector hc) {
-	    delegateeCollector = hc;
-	}
+        /**
+         * Sets the currently used unfiltered <code>HitCollector</code>.
+         *
+         * @param hc the new <code>HitCollector</code>.
+         */
+        private void setDelegatee(HitCollector hc) {
+            delegateeCollector = hc;
+        }
-	/**
-	 * Collects the document with number <code>doc</code>.
-	 * This hit collector first applies the filter on the
-	 * document and only passes the collect call to the
-	 * underlying <code>HitCollector</code> if the filter
-	 * allows the document.
-	 * @param doc the document in question for filtering.
-	 * @param score the score for this document.
-	 */
-	public void collect(int doc, float score) {
-	    // only forward the collect call if the filter
-	    // allows the document.
-	    if (filterBitSet.get(doc)) {
-		delegateeCollector.collect(doc, score);
-	    }
-	}
+        /**
+         * Collects the document with number <code>doc</code>.
+         * This hit collector first applies the filter on the
+         * document and only passes the collect call to the
+         * underlying <code>HitCollector</code> if the filter
+         * allows the document.
+         *
+         * @param doc   the document in question for filtering.
+         * @param score the score for this document.
+         */
+        public void collect(int doc, float score) {
+            // only forward the collect call if the filter
+            // allows the document.
+            if (filterBitSet.get(doc)) {
+                delegateeCollector.collect(doc, score);
+            }
+        }
