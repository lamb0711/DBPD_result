work in progress

- invalidation of itemstates in case of CacheBehaviour != Observation
- CacheBehaviour.Observation not dependent on Observation-RepositoryDescriptor
- SPI-observation may be implemented even if Observation is not supported according
  jcr-Repository descriptor

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@478211 13f79535-47bb-0310-9956-ffa450edef68

-    private CacheBehaviour cacheBehaviour = CacheBehaviour.OBSERVATION;
+    private final CacheBehaviour cacheBehaviour;
-    public WorkspaceManager(RepositoryService service, SessionInfo sessionInfo) throws RepositoryException {
+    public WorkspaceManager(RepositoryService service, CacheBehaviour cacheBehaviour,
+                            SessionInfo sessionInfo) throws RepositoryException {
+        this.cacheBehaviour = cacheBehaviour;
-        externalChangeFeed = createChangeFeed(repositoryDescriptors, EXTERNAL_EVENT_POLLING_INTERVAL);
+        externalChangeFeed = createChangeFeed(EXTERNAL_EVENT_POLLING_INTERVAL);
+    /**
+     *
+     * @return
+     * @throws RepositoryException
+     */
+    /**
+     *
+     * @param statement
+     * @param language
+     * @return
+     * @throws RepositoryException
+     */
-    public EventFilter createEventFilter(int eventTypes,
-                                         Path path,
-                                         boolean isDeep,
-                                         String[] uuids,
-                                         QName[] nodeTypes,
+    public EventFilter createEventFilter(int eventTypes, Path path, boolean isDeep,
+                                         String[] uuids, QName[] nodeTypes,
-            throws UnsupportedRepositoryOperationException {
+        throws UnsupportedRepositoryOperationException {
-
-    //----------------------------------------------------< package private >---
-
-    /**
-     * Returns the current cache behaviour. Defaults to {@link
-     * CacheBehaviour#OBSERVATION} unless otherwise set using {@link
-     * #setCacheBehaviour(CacheBehaviour)}.
-     *
-     * @return the current cache behaviour.
-     */
-    CacheBehaviour getCacheBehaviour() {
-        return cacheBehaviour;
-    }
-
-    /**
-     * Sets the cache behaviour for this WorkspaceManager.
-     *
-     * @param behaviour the cache behaviour.
-     */
-    void setCacheBehaviour(CacheBehaviour behaviour) {
-        this.cacheBehaviour = behaviour;
-    }
-
+    /**
+     *
+     * @return
+     */
-        WorkspaceItemStateManager ism = new WorkspaceItemStateManager(this, isf, service.getIdFactory());
+        WorkspaceItemStateManager ism = new WorkspaceItemStateManager(this, cacheBehaviour, isf, service.getIdFactory());
-     * @param descriptors the repository descriptors.
-    private Thread createChangeFeed(Map descriptors, int pollingInterval) {
-        String desc = (String) descriptors.get(Repository.OPTION_OBSERVATION_SUPPORTED);
-        Thread t = null;
-        if (Boolean.valueOf(desc).booleanValue()) {
-            t = new Thread(new ExternalChangePolling(pollingInterval));
-            t.setName("External Change Polling");
-            t.setDaemon(true);
-            t.start();
-        }
+    private Thread createChangeFeed(int pollingInterval) {
+        Thread t = new Thread(new ExternalChangePolling(pollingInterval));
+        t.setName("External Change Polling");
+        t.setDaemon(true);
+        t.start();
+                } catch (UnsupportedRepositoryOperationException e) {
+                    log.error("SPI implementation does not support observation: " + e);
+                    // terminate
+                    break;
