JCR-2085: test case (TCK) maintenance for JCR 2.0
- more query tests
- storing of JQOM and SQL2 as node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@786480 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.name.NameConstants;
-     * The query factory which is responsible to create query instances base
-     * on the passed query language.
-     */
-    private final QueryFactory queryFactory;
-
-    /**
-                        session, qomTree, Query.JCR_SQL2);
+                        session, qomTree, Query.JCR_JQOM, null);
-        this.queryFactory = new CompoundQueryFactory(Arrays.asList(
-                new QOMQueryFactory(qomFactory, session.getValueFactory()),
-                new AQTQueryFactory() {
-                    public Query createQuery(String statement, String language)
-                            throws InvalidQueryException, RepositoryException {
-                        return searchMgr.createQuery(session, itemMgr, statement, language);
-                    }
-                }));
-        return queryFactory.createQuery(statement, language);
+        QueryFactory qf = new QueryFactoryImpl(language);
+        return qf.createQuery(statement, language);
-        // TODO: support SQL2 and QOM
-        return searchMgr.createQuery(session, itemMgr, node);
+        if (!node.isNodeType(session.getJCRName(NameConstants.NT_QUERY))) {
+            throw new InvalidQueryException("node is not of type nt:query");
+        }
+        String statement = node.getProperty(session.getJCRName(NameConstants.JCR_STATEMENT)).getString();
+        String language = node.getProperty(session.getJCRName(NameConstants.JCR_LANGUAGE)).getString();
+
+        QueryFactory qf = new QueryFactoryImpl(node, language);
+        return qf.createQuery(statement, language);
-        List<String> languages = queryFactory.getSupportedLanguages();
+        List<String> languages = new QueryFactoryImpl(Query.JCR_JQOM).getSupportedLanguages();
+
+    private class QueryFactoryImpl extends CompoundQueryFactory {
+
+        public QueryFactoryImpl(String language) {
+            this(null, language);
+        }
+
+        public QueryFactoryImpl(final Node node, final String language) {
+            super(Arrays.asList(
+                new QOMQueryFactory(new QueryObjectModelFactoryImpl(
+                        session, session.getValueFactory()) {
+                    protected QueryObjectModel createQuery(QueryObjectModelTree qomTree)
+                            throws InvalidQueryException, RepositoryException {
+                        return searchMgr.createQueryObjectModel(
+                                session, qomTree, language, node);
+                    }
+                }, session.getValueFactory()),
+                new AQTQueryFactory() {
+                    public Query createQuery(String statement,
+                                             String language)
+                            throws InvalidQueryException, RepositoryException {
+                        return searchMgr.createQuery(session, itemMgr, statement, language, node);
+                    }
+                }));
+        }
+    }
