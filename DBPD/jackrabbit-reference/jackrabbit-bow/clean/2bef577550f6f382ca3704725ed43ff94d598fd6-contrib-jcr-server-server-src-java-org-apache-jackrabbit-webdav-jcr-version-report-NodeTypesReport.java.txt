JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.version.report.*;
+import org.apache.jackrabbit.webdav.version.report.Report;
+import org.apache.jackrabbit.webdav.version.report.ReportType;
+import org.apache.jackrabbit.webdav.version.report.ReportInfo;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.Namespace;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-import javax.jcr.nodetype.*;
-import javax.jcr.*;
-import java.util.*;
+import javax.jcr.Session;
+import javax.jcr.RepositoryException;
+import javax.jcr.nodetype.NodeTypeIterator;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.NodeDefinition;
+import javax.jcr.nodetype.PropertyDefinition;
+import javax.jcr.nodetype.NodeTypeManager;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
- * &lt;!ELEMENT nodetype ( nodetype-name ) &gt;
- * &lt;!ELEMENT nodetype-name (#PCDATA) &gt;
+ * &lt;!ELEMENT nodetype ( nodetypename ) &gt;
+ * &lt;!ELEMENT nodetypename (#PCDATA) &gt;
-    private ReportInfo info;
+    private NodeTypeIterator ntIter;
-     * @param resource
-     * @throws IllegalArgumentException if the resource or the session retrieved
-     * from the specified resource is <code>null</code>
-     * @see Report#setResource(org.apache.jackrabbit.webdav.version.DeltaVResource)
+     * Always returns <code>false</code>.
+     *
+     * @return false
+     * @see org.apache.jackrabbit.webdav.version.report.Report#isMultiStatusReport()
-    public void setResource(DeltaVResource resource) {
-        if (resource == null) {
-            throw new IllegalArgumentException("Resource must not be null.");
-        }
-        DavSession session = resource.getSession();
-        if (session == null || session.getRepositorySession() == null) {
-            throw new IllegalArgumentException("The resource must provide a non-null session object in order to create the nodetypes report.");
-        }
-        this.session = session.getRepositorySession();
+    public boolean isMultiStatusReport() {
+        return false;
-     * @param info
-     * @throws IllegalArgumentException if the specified info does not contain
-     * a {@link org.apache.jackrabbit.webdav.jcr.ItemResourceConstants#NAMESPACE dcr}:{@link NodeTypeConstants#XML_NODETYPES nodetypes} element.
-     * @see Report#setInfo(org.apache.jackrabbit.webdav.version.report.ReportInfo)
+     * @see Report#init(org.apache.jackrabbit.webdav.version.DeltaVResource, org.apache.jackrabbit.webdav.version.report.ReportInfo)
-    public void setInfo(ReportInfo info) {
-        if (info == null || !"nodetypes".equals(info.getReportElement().getName())) {
-            throw new IllegalArgumentException("dcr:nodetypes element expected.");
+    public void init(DeltaVResource resource, ReportInfo info) throws DavException {
+        if (resource == null) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Resource must not be null.");
-        this.info = info;
+        if (!getType().isRequestedReportType(info)) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "dcr:nodetypes element expected.");
+        }
+        DavSession davSession = resource.getSession();
+        if (davSession == null || davSession.getRepositorySession() == null) {
+            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "The resource must provide a non-null session object in order to create the nodetypes report.");
+    }
+        session = davSession.getRepositorySession();
+        try {
+            ntIter = getNodeTypes(session, info);
+        } catch (RepositoryException e) {
+            throw new JcrDavException(e);
+        }
+        if (session == null || ntIter == null) {
+            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);
+        }
+     * @param document
-     * @throws DavException if the specified nodetypes are not known or if another
-     * error occurs while retrieving the nodetype definitions.
-     * @see org.apache.jackrabbit.webdav.version.report.Report#toXml()
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
-    public Document toXml() throws DavException {
-        if (info == null || session == null) {
-            throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR, "Error while running nodetypes report");
-        }
-        try {
-            Element report = new Element(XML_NODETYPES);
-            // make sure all namespace declarations are present on the root element.
-            // since the nodetype-manager uses session-local jcr names, prefix/namespace
-            // pairs are retrieved from the session and not from the namespace registry.
-            String[] prefixes = session.getNamespacePrefixes();
-            for (int i = 0; i < prefixes.length; i++) {
-                report.addNamespaceDeclaration(Namespace.getNamespace(prefixes[i], session.getNamespaceURI(prefixes[i])));
-            }
-            // retrieve the requested nodetypes
-            NodeTypeIterator ntIter = getNodeTypes();
+    public Element toXml(Document document) {
+        Element report = document.createElement(NODETYPES_ELEMENT);
+        // loop over the nodetypes to be returned in the report
-                Element ntDef = new Element(XML_NODETYPE);
+            Element ntDef = document.createElement(NODETYPE_ELEMENT);
-                Element supertypes = new Element(SUPERTYPES_ELEMENT);
+            Element supertypes = DomUtil.addChildElement(ntDef, SUPERTYPES_ELEMENT, null);
-		    supertypes.addContent(new Element(SUPERTYPE_ELEMENT).setText(snts[i].getName()));
+                DomUtil.addChildElement(supertypes, SUPERTYPE_ELEMENT, null, snts[i].getName());
-		ntDef.addContent(supertypes);
-			ntDef.addContent(NodeDefinitionImpl.create(cnd[i]).toXml());
+                    ntDef.appendChild(NodeDefinitionImpl.create(cnd[i]).toXml(document));
-			ntDef.addContent(PropertyDefinitionImpl.create(pd[i]).toXml());
+                    ntDef.appendChild(PropertyDefinitionImpl.create(pd[i]).toXml(document));
-                report.addContent(ntDef);
-            }
-
-            Document reportDoc = new Document(report);
-            return reportDoc;
-        } catch (RepositoryException e) {
-            throw new JcrDavException(e);
+            report.appendChild(ntDef);
+        return report;
-    private NodeTypeIterator getNodeTypes() throws RepositoryException, DavException {
+    private static NodeTypeIterator getNodeTypes(Session session, ReportInfo info) throws RepositoryException, DavException {
-        Iterator it = info.getReportElement().getChildren().iterator();
-        while (it.hasNext() && ntIter == null) {
-            Element elem = (Element) it.next();
-            if (elem.getNamespace().equals(NAMESPACE)) {
-                String name = elem.getName();
-                if (XML_REPORT_ALLNODETYPES.equals(name)) {
+
+        // check the simple types first...
+        if (info.containsContentElement(XML_REPORT_ALLNODETYPES, NAMESPACE)) {
-                } else if (XML_REPORT_MIXINNODETYPES.equals(name)) {
+        } else if (info.containsContentElement(XML_REPORT_MIXINNODETYPES, NAMESPACE)) {
-                } else if (XML_REPORT_PRIMARYNODETYPES.equals(name)) {
+        } else if (info.containsContentElement(XML_REPORT_PRIMARYNODETYPES, NAMESPACE)) {
-            }
-        }
-            List elemList = info.getReportElement().getChildren(XML_NODETYPE, NAMESPACE);
+            List elemList = info.getContentElements(XML_NODETYPE, NAMESPACE);
+
+            // todo: find better solution...
-                String nodetypeName = ((Element)elemIter.next()).getChildText(XML_NODETYPENAME, NAMESPACE);
+                Element el = ((Element)elemIter.next());
+                String nodetypeName = DomUtil.getChildTextTrim(el, XML_NODETYPENAME, NAMESPACE);
