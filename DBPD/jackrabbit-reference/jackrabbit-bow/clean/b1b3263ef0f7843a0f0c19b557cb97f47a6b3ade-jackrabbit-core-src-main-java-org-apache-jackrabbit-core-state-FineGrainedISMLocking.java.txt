JCR-2855: Writers blocked forever when waiting on update operations

Automatically clear a downgraded activeWriterId when the last reader lock is released.

Also add generics.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1066059 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.atomic.AtomicInteger;
+     * Number of current readers.
+     */
+    private final AtomicInteger readerCount = new AtomicInteger(0);
+
+    /**
-    private List waitingReaders = Collections.synchronizedList(new LinkedList());
+    private List<Sync> waitingReaders =
+        Collections.synchronizedList(new LinkedList<Sync>());
-    private List waitingWriters = new LinkedList();
+    private List<Sync> waitingWriters = new LinkedList<Sync>();
+            readerCount.incrementAndGet();
+                    readerCount.incrementAndGet();
+            readerCount.incrementAndGet();
+                if (readerCount.decrementAndGet() == 0 && activeWriter == null) {
+                    activeWriterId = null;
+                }
-        Iterator it = waitingReaders.iterator();
+        Iterator<Sync> it = waitingReaders.iterator();
-            ((Sync) it.next()).release();
+            it.next().release();
-            Iterator it = waitingWriters.iterator();
+            Iterator<Sync> it = waitingWriters.iterator();
-                ((Sync) it.next()).release();
+                it.next().release();
-        private final Map[] slots = new Map[0x10];
+        @SuppressWarnings("unchecked")
+        private final Map<ItemId, Integer>[] slots = new Map[0x10];
-                slots[i] = new HashMap();
+                slots[i] = new HashMap<ItemId, Integer>();
-            Map locks = slots[slotIndex(id)];
+            Map<ItemId, Integer> locks = slots[slotIndex(id)];
-            Map locks = slots[slotIndex(id)];
+            Map<ItemId, Integer> locks = slots[slotIndex(id)];
-                Map locks = slots[i];
-                if (!locks.isEmpty()) {
-                    Iterator it = locks.keySet().iterator();
-                    while (it.hasNext()) {
-                        ItemId id = (ItemId) it.next();
-                        if (FineGrainedISMLocking.hasDependency(changes, id)) {
-                            return true;
-                        }
+                Map<ItemId, Integer> locks = slots[i];
+                for (ItemId id : locks.keySet()) {
+                    if (FineGrainedISMLocking.hasDependency(changes, id)) {
+                        return true;
