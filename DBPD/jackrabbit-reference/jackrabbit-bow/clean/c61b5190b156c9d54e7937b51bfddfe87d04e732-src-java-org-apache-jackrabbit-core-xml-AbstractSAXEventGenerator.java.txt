- improved reusability of sax event generators
- some javadoc corrections 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@165316 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.BaseException;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.PropertyImpl;
-import org.apache.jackrabbit.core.QName;
-import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.NamespaceResolver;
+import javax.jcr.NamespaceException;
+import javax.jcr.Node;
+import javax.jcr.Property;
+import javax.jcr.Session;
- * <li><code>{@link #entering(NodeImpl, int)}</code></li>
- * <li><code>{@link #enteringProperties(NodeImpl, int)}</code></li>
- * <li><code>{@link #leavingProperties(NodeImpl, int)}</code></li>
- * <li><code>{@link #leaving(NodeImpl, int)}</code></li>
- * <li><code>{@link #entering(PropertyImpl, int)}</code></li>
- * <li><code>{@link #leaving(PropertyImpl, int)}</code></li>
+ * <li><code>{@link #entering(Node, int)}</code></li>
+ * <li><code>{@link #enteringProperties(Node, int)}</code></li>
+ * <li><code>{@link #leavingProperties(Node, int)}</code></li>
+ * <li><code>{@link #leaving(Node, int)}</code></li>
+ * <li><code>{@link #entering(Property, int)}</code></li>
+ * <li><code>{@link #leaving(Property, int)}</code></li>
-    protected final SessionImpl session;
+    /**
+     * the session to be used for resolving namespace mappings
+     */
+    protected final Session session;
+    /**
+     * the session's namespace resolver
+     */
+    protected final NamespaceResolver nsResolver;
+
+    /**
+     * the content handler to feed the SAX events to
+     */
-    protected final NodeImpl startNode;
+
+    protected final Node startNode;
+     * The jcr:primaryType property name (allowed for session-local prefix mappings)
+     */
+    protected final String jcrPrimaryType;
+    /**
+     * The jcr:mixinTypes property name (allowed for session-local prefix mappings)
+     */
+    protected final String jcrMixinTypes;
+    /**
+     * The jcr:uuid property name (allowed for session-local prefix mappings)
+     */
+    protected final String jcrUUID;
+    /**
+     * The jcr:root node name (allowed for session-local prefix mappings)
+     */
+    protected final String jcrRoot;
+    /**
+     * The jcr:xmltext node name (allowed for session-local prefix mappings)
+     */
+    protected final String jcrXMLText;
+    /**
+     * The jcr:xmlCharacters property name (allowed for session-local prefix mappings)
+     */
+    protected final String jcrXMLCharacters;
+
+    /**
-     * @param session        the session to be used for resolving namespace mappings
+     * @throws RepositoryException if an error occurs
-    protected AbstractSAXEventGenerator(NodeImpl node, boolean noRecurse,
+    protected AbstractSAXEventGenerator(Node node, boolean noRecurse,
-                                        SessionImpl session,
-                                        ContentHandler contentHandler) {
-        this.session = session;
+                                        ContentHandler contentHandler)
+            throws RepositoryException {
+        session = node.getSession();
+        nsResolver = new SessionNamespaceResolver();
+
+
+        // resolve the names of some wellknown properties
+        // allowing for session-local prefix mappings
+        try {
+            jcrPrimaryType = JCR_PRIMARYTYPE.toJCRName(nsResolver);
+            jcrMixinTypes = JCR_MIXINTYPES.toJCRName(nsResolver);
+            jcrUUID = JCR_UUID.toJCRName(nsResolver);
+            jcrRoot = JCR_ROOT.toJCRName(nsResolver);
+            jcrXMLText = JCR_XMLTEXT.toJCRName(nsResolver);
+            jcrXMLCharacters = JCR_XMLCHARACTERS.toJCRName(nsResolver);
+        } catch (BaseException e) {
+            // should never get here...
+            String msg = "internal error: failed to resolve namespace mappings";
+            log.error(msg, e);
+            throw new RepositoryException(msg, e);
+        }
-    protected void process(NodeImpl node, int level)
+    protected void process(Node node, int level)
-        if (node.hasProperty(JCR_PRIMARYTYPE)) {
-            process(node.getProperty(JCR_PRIMARYTYPE), level + 1);
+        if (node.hasProperty(jcrPrimaryType)) {
+            process(node.getProperty(jcrPrimaryType), level + 1);
-            String msg = "internal error: missing jcr:primaryType property on node " + node.safeGetJCRPath();
+            String msg = "internal error: missing jcr:primaryType property on node "
+                    + node.getPath();
-        if (node.hasProperty(JCR_MIXINTYPES)) {
-            process(node.getProperty(JCR_MIXINTYPES), level + 1);
+        if (node.hasProperty(jcrMixinTypes)) {
+            process(node.getProperty(jcrMixinTypes), level + 1);
-        if (node.hasProperty(JCR_UUID)) {
-            process(node.getProperty(JCR_UUID), level + 1);
+        if (node.hasProperty(jcrUUID)) {
+            process(node.getProperty(jcrUUID), level + 1);
-            PropertyImpl prop = (PropertyImpl) propIter.nextProperty();
-            QName name = prop.getQName();
-            if (JCR_PRIMARYTYPE.equals(name)
-                    || JCR_MIXINTYPES.equals(name)
-                    || JCR_UUID.equals(name)) {
+            Property prop = propIter.nextProperty();
+            String name = prop.getName();
+            if (jcrPrimaryType.equals(name)
+                    || jcrMixinTypes.equals(name)
+                    || jcrUUID.equals(name)) {
-                NodeImpl childNode = (NodeImpl) nodeIter.nextNode();
+                Node childNode = nodeIter.nextNode();
-    protected void process(PropertyImpl prop, int level)
+    protected void process(Property prop, int level)
-    protected abstract void entering(NodeImpl node, int level)
+    protected abstract void entering(Node node, int level)
-    protected abstract void enteringProperties(NodeImpl node, int level)
+    protected abstract void enteringProperties(Node node, int level)
-    protected abstract void leavingProperties(NodeImpl node, int level)
+    protected abstract void leavingProperties(Node node, int level)
-    protected abstract void leaving(NodeImpl node, int level)
+    protected abstract void leaving(Node node, int level)
-    protected abstract void entering(PropertyImpl prop, int level)
+    protected abstract void entering(Property prop, int level)
-    protected abstract void leaving(PropertyImpl prop, int level)
+    protected abstract void leaving(Property prop, int level)
+
+    //--------------------------------------------------------< inner classes >
+    /**
+     * internal helper class that exposes the <code>NamespaceResolver</code>
+     * interface on a <code>Session</code>
+     */
+    private class SessionNamespaceResolver implements NamespaceResolver {
+
+        /**
+         * {@inheritDoc}
+         */
+        public String getPrefix(String uri) throws NamespaceException {
+            try {
+                return session.getNamespacePrefix(uri);
+            } catch (RepositoryException re) {
+                // should never get here...
+                String msg = "internal error: failed to resolve namespace uri";
+                log.error(msg, re);
+                throw new NamespaceException(msg, re);
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public String getURI(String prefix) throws NamespaceException {
+            try {
+                return session.getNamespaceURI(prefix);
+            } catch (RepositoryException re) {
+                // should never get here...
+                String msg = "internal error: failed to resolve namespace prefix";
+                log.error(msg, re);
+                throw new NamespaceException(msg, re);
+            }
+        }
+    }
