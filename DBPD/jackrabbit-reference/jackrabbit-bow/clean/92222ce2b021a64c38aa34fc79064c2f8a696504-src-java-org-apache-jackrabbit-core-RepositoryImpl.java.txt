changed configuration layout and bootstrapping of repository:
- added jndi support
- workspace configuration is now separated from repository config
  

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@54857 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.BeanMap;
+import org.apache.jackrabbit.core.config.RepositoryConfig;
+import org.apache.jackrabbit.core.config.WorkspaceConfig;
-import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.ItemStateProvider;
+import org.apache.jackrabbit.core.state.PersistentItemStateManager;
+import org.apache.jackrabbit.core.state.ReferenceManager;
-    private static final String DEFAULT_WORKSPACE_NAME = "default";
-
-    private static final String VERSION_WORKSPACE_NAME = "default";
+    /**
+     * hardcoded uuid of the repository root node
+     */
+    private static final String ROOT_NODE_UUID = "ac3b5c25-613d-4798-8494-ffbcca9c5c6c";
+    // configuration of the repository
+    private final RepositoryConfig repConfig;
-    // map of workspace names and workspace definitions
-    private final HashMap wspDefs = new HashMap();
+    // map of workspace names and workspace configurations
+    private final HashMap wspConfigs = new HashMap();
-     * Package private constructor.
+     * private constructor
-     * @param repStore
-     * @param swda
+     * @param repConfig
-    RepositoryImpl(FileSystem repStore, StableWorkspaceDef[] swda) throws RepositoryException {
+    private RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {
+        this.repConfig = repConfig;
+        repStore = repConfig.getFileSystem();
-        this.repStore = repStore;
-                    rootNodeUUID = new UUID(new String(chars)).toString();
+                    /**
+                     * use hard-coded uuid for root node rather than generating
+                     * a different uuid per repository instance; using a
+                     * hard-coded uuid makes it easier to copy/move entire
+                     * workspaces from one repository instance to another.
+                     */
+                    //rootNodeUUID = new UUID(new String(chars)).toString();
+                    rootNodeUUID = ROOT_NODE_UUID;
-        for (int i = 0; i < swda.length; i++) {
-            StableWorkspaceDef swd = swda[i];
-            if (wspDefs.containsKey(swd.getName())) {
-                String msg = "workspace '" + swd.getName() + "' already defined";
-                log.error(msg);
-                throw new RepositoryException(msg);
-            }
-            wspDefs.put(swd.getName(), swd);
-            DynamicWorkspaceDef[] dwda = swd.getDynWorkspaces();
-            for (int j = 0; j < dwda.length; j++) {
-                DynamicWorkspaceDef dwd = dwda[j];
-                if (wspDefs.containsKey(dwd.getName())) {
-                    String msg = "workspace '" + dwd.getName() + "' already defined";
-                    log.error(msg);
-                    throw new RepositoryException(msg);
-                }
-                wspDefs.put(dwd.getName(), dwd);
-            }
-        }
-        WorkspaceDef wd = (WorkspaceDef) wspDefs.get(DEFAULT_WORKSPACE_NAME);
-        if (wd == null || wd.isDynamic()) {
-            String msg = "mandatory stable workspace 'default' not defined";
-            log.error(msg);
-            throw new RepositoryException(msg);
+        Iterator iter = repConfig.getWorkspaceConfigs().iterator();
+        while (iter.hasNext()) {
+            WorkspaceConfig config = (WorkspaceConfig) iter.next();
+            wspConfigs.put(config.getName(), config);
-        SessionImpl sysSession = getSystemSession(DEFAULT_WORKSPACE_NAME);
+        SessionImpl sysSession = getSystemSession(repConfig.getDefaultWorkspaceName());
-        SessionImpl verSession = getSystemSession(VERSION_WORKSPACE_NAME);
+        SessionImpl verSession = getSystemSession(repConfig.getDefaultWorkspaceName());
-                verSession.getWorkspace().clone(DEFAULT_WORKSPACE_NAME,
+                verSession.getWorkspace().clone(repConfig.getDefaultWorkspaceName(),
-        Iterator iter = wspDefs.values().iterator();
+        iter = wspConfigs.values().iterator();
-            String wspName = ((WorkspaceDef) iter.next()).getName();
+            String wspName = ((WorkspaceConfig) iter.next()).getName();
+    /**
+     * Creates a new <code>RepositoryImpl</code> instance.
+     * <p/>
+     * todo prevent multiple instantiation from same configuration as this could lead to data corruption/loss
+     *
+     * @param config the configuration of the repository
+     * @return a new <code>RepositoryImpl</code> instance
+     * @throws RepositoryException If an error occurs
+     */
+    public static RepositoryImpl create(RepositoryConfig config)
+            throws RepositoryException {
+        return new RepositoryImpl(config);
+    }
+
+    RepositoryConfig getConfig() {
+        return repConfig;
+    }
+
-        WorkspaceDef wd = (WorkspaceDef) wspDefs.get(workspaceName);
-        if (wd == null) {
+        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
+        if (wspConfig == null) {
-            if (wd.isDynamic()) {
-/*
-		// create dynamic (i.e. transparent) state manager backed
-		// by a 'master' state manager
-		DynamicWorkspaceDef dwd = (DynamicWorkspaceDef) wd;
-		StableWorkspaceDef swd = (StableWorkspaceDef) wspDefs.get(dwd.getStableWorkspace());
-		stateMgr = new TransparentItemStateManager(dwd.getFS(), getWorkspaceStateManager(swd));
-*/
-                // @todo implement dynamic workspace support
-                throw new RepositoryException("dynamic workspaces are not supported");
-            } else {
-                // create stable (i.e. opaque) state manager
-                StableWorkspaceDef swd = (StableWorkspaceDef) wd;
-                PersistenceManager persistMgr = createPersistenceManager(swd);
-                try {
-                    stateMgr = new PersistentItemStateManager(persistMgr, rootNodeUUID, ntReg);
-                } catch (ItemStateException ise) {
-                    String msg = "failed to instantiate the persistent state manager";
-                    log.error(msg, ise);
-                    throw new RepositoryException(msg, ise);
-                }
+            // create state manager
+            try {
+                stateMgr = new PersistentItemStateManager(wspConfig.getPersistenceManager(), rootNodeUUID, ntReg);
+            } catch (ItemStateException ise) {
+                String msg = "failed to instantiate the persistent state manager";
+                log.error(msg, ise);
+                throw new RepositoryException(msg, ise);
-        WorkspaceDef wd = (WorkspaceDef) wspDefs.get(workspaceName);
-        if (wd == null) {
+        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
+        if (wspConfig == null) {
-            refMgr = new ReferenceManager(createPersistenceManager(wd));
+            refMgr = new ReferenceManager(wspConfig.getPersistenceManager());
-        if (!wspDefs.containsKey(workspaceName)) {
+        if (!wspConfigs.containsKey(workspaceName)) {
+        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
-                StableWorkspaceDef wspDef = (StableWorkspaceDef) wspDefs.get(workspaceName);
-                if (wspDef.getSearchIndexPath() == null) {
+                if (wspConfig.getSearchIndexDir() == null) {
-                        wspDef.getWorkspaceStore(), wspDef.getSearchIndexPath());
+                        wspConfig.getFileSystem(), wspConfig.getSearchIndexDir());
+        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
+        if (wspConfig == null) {
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
-            systemSession = new SystemSession(this, workspaceName);
+            systemSession = new SystemSession(this, wspConfig);
-     * @param wspDef
-     * @return
-     * @throws RepositoryException
-     */
-    private PersistenceManager createPersistenceManager(WorkspaceDef wspDef) throws RepositoryException {
-        PersistenceManager persistMgr;
-        String className = wspDef.getPersistenceManagerClass();
-        try {
-            // Create the persistence manager object
-            Class c = Class.forName(className);
-            persistMgr = (PersistenceManager) c.newInstance();
-            // set the properties of the persistence manager object from the
-            // param hashmap
-            BeanMap bm = new BeanMap(persistMgr);
-            HashMap params = wspDef.getPersistenceManagerParams();
-            Iterator iter = params.keySet().iterator();
-            while (iter.hasNext()) {
-                Object name = iter.next();
-                Object value = params.get(name);
-                bm.put(name, value);
-            }
-            persistMgr.init(wspDef);
-        } catch (Exception e) {
-            log.error("Cannot instantiate implementing class " + className, e);
-            throw new RepositoryException("Cannot instantiate implementing class " + className, e);
-        }
-        return persistMgr;
-    }
-
-    /**
-            workspaceName = DEFAULT_WORKSPACE_NAME;
+            workspaceName = repConfig.getDefaultWorkspaceName();
-        if (!wspDefs.containsKey(workspaceName)) {
+        WorkspaceConfig wspConfig = (WorkspaceConfig) wspConfigs.get(workspaceName);
+        if (wspConfig == null) {
-            return new SessionImpl(this, ANONYMOUS_CREDENTIALS, workspaceName);
+            return new SessionImpl(this, ANONYMOUS_CREDENTIALS, wspConfig);
-            return new SessionImpl(this, credentials, workspaceName);
+            return new SessionImpl(this, credentials, wspConfig);
