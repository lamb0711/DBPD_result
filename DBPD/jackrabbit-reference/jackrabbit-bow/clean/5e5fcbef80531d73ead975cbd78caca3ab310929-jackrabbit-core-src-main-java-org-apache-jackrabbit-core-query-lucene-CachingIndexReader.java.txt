JCR-2025: Optimize concurrent queries

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@756432 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.document.FieldSelector;
+import org.apache.lucene.document.Field;
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.commons.collections.map.LRUMap;
+import java.util.Collections;
+     * Maps document number to node UUID.
+     */
+    private final Map docNumber2uuid;
+
+    /**
+     * A cache of TermDocs that are regularly read from the index.
+     */
+    private final TermDocsCache termDocsCache;
+
+    /**
+        // limit cache to 1% of maxDoc(), but at least 10.
+        this.docNumber2uuid = Collections.synchronizedMap(new LRUMap(
+                Math.max(10, delegatee.maxDoc() / 100)));
+        this.termDocsCache = new TermDocsCache(delegatee, FieldNames.PROPERTIES);
+     * Uses the {@link #docNumber2uuid} cache for document lookups that are only
+     * interested in the {@link FieldSelectors#UUID}.
+     *
+     * @param n the document number.
+     * @param fieldSelector the field selector.
+     * @return the document.
+     * @throws CorruptIndexException if the index is corrupt.
+     * @throws IOException if an error occurs while reading from the index.
+     */
+    public Document document(int n, FieldSelector fieldSelector)
+            throws CorruptIndexException, IOException {
+        if (fieldSelector == FieldSelectors.UUID) {
+            Integer docNum = new Integer(n);
+            Document doc;
+            UUID uuid = (UUID) docNumber2uuid.get(docNum);
+            if (uuid == null) {
+                doc = super.document(n, fieldSelector);
+                uuid = UUID.fromString(doc.get(FieldNames.UUID));
+                docNumber2uuid.put(docNum, uuid);
+            } else {
+                doc = new Document();
+                doc.add(new Field(FieldNames.UUID, uuid.toString(),
+                        Field.Store.YES, Field.Index.NO_NORMS));
+            }
+            return doc;
+        } else {
+            return super.document(n, fieldSelector);
+        }
+    }
+
+    /**
-     * {@link #EMPTY} is returned.
+     * {@link EmptyTermDocs#INSTANCE} is returned.
-                        return EMPTY;
+                        return EmptyTermDocs.INSTANCE;
-        return super.termDocs(term);
+        return termDocsCache.termDocs(term);
-
-    /**
-     * Implements an empty TermDocs.
-     */
-    static final TermDocs EMPTY = new TermDocs() {
-
-        public void seek(Term term) {
-        }
-
-        public void seek(TermEnum termEnum) {
-        }
-
-        public int doc() {
-            return -1;
-        }
-
-        public int freq() {
-            return -1;
-        }
-
-        public boolean next() {
-            return false;
-        }
-
-        public int read(int[] docs, int[] freqs) {
-            return 0;
-        }
-
-        public boolean skipTo(int target) {
-            return false;
-        }
-
-        public void close() {
-        }
-    };
