JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.JDOMException;
-import org.jdom.input.SAXBuilder;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.ParserConfigurationException;
-import java.util.Iterator;
+import java.util.ArrayList;
+import java.io.InputStream;
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        factory.setNamespaceAware(true);
-            Document doc = new SAXBuilder().build(configURL);
-            Element root = doc.getRootElement();
+            InputStream in = configURL.openStream();
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document document = builder.parse(in);
+            Element config = document.getDocumentElement();
-            Element ioElem = root.getChild("iomanager");
-            if (ioElem != null) {
-                Object inst = buildClassFromConfig(ioElem.getChild("class"));
+            if (config == null) {
+                log.error("Resource configuration: mandatory 'iomanager' element is missing.");
+                return;
+            }
+
+            Element el = DomUtil.getChildElement(config, "iomanager", null);
+            if (el != null) {
+                Object inst = buildClassFromConfig(el);
-            Element collection = root.getChild("collection");
-            Element noncollection = root.getChild("noncollection");
-            if (collection != null && noncollection != null) {
-                log.warn("Resource configuration may only contain a collection OR a noncollection element -> entries are ignored");
-            } else {
-                if (collection != null) {
-                    Element nts = collection.getChild("nodetypes");
-                    nodetypeNames = parseNodeTypesEntry(nts);
+            el = DomUtil.getChildElement(config, "collection", null);
+            if (el != null) {
+                nodetypeNames = parseNodeTypesEntry(el);
-                } else if (noncollection != null) {
-                    Element nts = noncollection.getChild("nodetypes");
-                    nodetypeNames = parseNodeTypesEntry(nts);
+            } else if ((el = DomUtil.getChildElement(config, "noncollection", null)) != null) {
+                nodetypeNames = parseNodeTypesEntry(el);
-            }
+            // todo: should check if both 'noncollection' and 'collection' are present and write a warning
-            Element filter = root.getChild("filter");
-            if (filter != null) {
-                Object inst = buildClassFromConfig(filter.getChild("class"));
+            el = DomUtil.getChildElement(config, "filter", null);
+            if (el != null) {
+                Object inst = buildClassFromConfig(el);
-                    Element nts = filter.getChild("nodetypes");
-                    itemFilter.setFilteredNodetypes(parseNodeTypesEntry(nts));
-                    parseNamespacesEntry(filter.getChild("namespaces"), itemFilter);
+                    itemFilter.setFilteredNodetypes(parseNodeTypesEntry(el));
+                    parseNamespacesEntry(el);
-            log.error("Invalid resource configuration: " + e.getMessage());
-        } catch (JDOMException e) {
-            log.error("Invalid resource configuration: " + e.getMessage());
+            log.debug("Invalid resource configuration: " + e.getMessage());
+        } catch (ParserConfigurationException e) {
+            log.warn("Failed to parse resource configuration: " + e.getMessage());
+        } catch (SAXException e) {
+            log.warn("Failed to parse resource configuration: " + e.getMessage());
-    private Object buildClassFromConfig(Element classElement) {
+    private Object buildClassFromConfig(Element parent) {
-        if (classElement == null) {
-            return instance;
-        }
+        Element classElem = DomUtil.getChildElement(parent, "class", null);
+        if (classElem != null) {
+            // contains a 'class' child node
-            String className = classElement.getAttributeValue("name");
+                String className = DomUtil.getAttribute(classElem, "name", null);
+        }
-    private void parseNamespacesEntry(Element child, ItemFilter filter) {
-        if (child == null) {
-            return;
+    private void parseNamespacesEntry(Element parent) {
+        Element namespaces = DomUtil.getChildElement(parent, "namespaces", null);
+        if (namespaces != null) {
+            List l = new ArrayList();
+            // retrieve prefix child elements
+            ElementIterator it = DomUtil.getChildren(namespaces, "prefix", null);
+            while (it.hasNext()) {
+                Element e = it.nextElement();
+                l.add(DomUtil.getText(e));
+            }
+            String[] prefixes = (String[])l.toArray(new String[l.size()]);
+            l.clear();
+            // retrieve uri child elements
+            it = DomUtil.getChildren(namespaces, "uri", null);
+            while (it.hasNext()) {
+                Element e = it.nextElement();
+                l.add(DomUtil.getText(e));
+            }
+            String[] uris = (String[])l.toArray(new String[l.size()]);
+            itemFilter.setFilteredPrefixes(prefixes);
+            itemFilter.setFilteredURIs(uris);
-        List l = child.getChildren("prefix");
-        Iterator it = l.iterator();
-        String[] prefixes = new String[l.size()];
-        int i = 0;
-        while(it.hasNext()) {
-            prefixes[i++] = ((Element) it.next()).getText();
-        }
-
-        l = child.getChildren("uri");
-        it = l.iterator();
-        String[] uris = new String[l.size()];
-        i = 0;
-        while(it.hasNext()) {
-            uris[i++] = ((Element) it.next()).getText();
-        }
-
-        filter.setFilteredPrefixes(prefixes);
-        filter.setFilteredURIs(uris);
-    private String[] parseNodeTypesEntry(Element child) {
-        if (child == null) {
-            return new String[0];
+    private String[] parseNodeTypesEntry(Element parent) {
+        String[] ntNames;
+        Element nodetypes = DomUtil.getChildElement(parent, "nodetypes", null);
+        if (nodetypes != null) {
+            List l = new ArrayList();
+            ElementIterator it = DomUtil.getChildren(nodetypes, "nodetype", null);
+            while (it.hasNext()) {
+                Element e = it.nextElement();
+                l.add(DomUtil.getText(e));
-        List l = child.getChildren("nodetype");
-        Iterator it = l.iterator();
-        String[] ntNames = new String[l.size()];
-        int i = 0;
-        while(it.hasNext()) {
-            ntNames[i++] = ((Element) it.next()).getText();
+            ntNames = (String[])l.toArray(new String[l.size()]);
+        } else {
+            ntNames = new String[0];
