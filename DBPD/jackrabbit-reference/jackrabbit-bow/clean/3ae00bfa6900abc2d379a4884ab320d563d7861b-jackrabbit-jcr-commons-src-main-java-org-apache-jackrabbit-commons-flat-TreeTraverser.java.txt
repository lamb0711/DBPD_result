JCR-2688: Provide utility for handling large number of child nodes/properties
applied Jukka's patch with some modifications

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@982695 13f79535-47bb-0310-9956-ffa450edef68

-import static org.apache.jackrabbit.commons.iterator.Iterators.empty;
-import static org.apache.jackrabbit.commons.iterator.Iterators.iteratorChain;
-import static org.apache.jackrabbit.commons.iterator.Iterators.properties;
-import static org.apache.jackrabbit.commons.iterator.Iterators.singleton;
+import java.util.Collections;
+    @SuppressWarnings("unchecked")
-                return iteratorChain(singleton(node), chain(childIterators(node)));
+                return chain(singleton(node), chain(childIterators(node)));
-        }
-        catch (RepositoryException e) {
+        } catch (RepositoryException e) {
-    private Iterator<Iterator<Node>> childIterators(final Node node) {
+    private Iterator<Iterator<Node>> childIterators(Node node) {
+            final NodeIterator childNodes = node.getNodes();
-                private final NodeIterator childNodes = node.getNodes();
-
-
-
-        }
-        catch (RepositoryException e) {
+        } catch (RepositoryException e) {
+            @SuppressWarnings("unchecked")
-                    return properties(n.getProperties());
-                }
-                catch (RepositoryException e) {
+                    return n.getProperties();
+                } catch (RepositoryException e) {
+    // -----------------------------------------------------< utility >---
+
+    private static <T> Iterator<T> empty() {
+        return Collections.<T>emptySet().iterator();
+    }
+
+    private <T> Iterator<T> singleton(T value) {
+        return Collections.singleton(value).iterator();
+    }
+
+
