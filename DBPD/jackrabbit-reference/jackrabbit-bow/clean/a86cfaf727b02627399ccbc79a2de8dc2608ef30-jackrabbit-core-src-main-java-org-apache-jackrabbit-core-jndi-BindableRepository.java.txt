JCR-1664: JNDI Referenceable Issues

Updated BindableRepository to better support subclasses.

Also some minor updates like making BindableRepositoryFactory.cache final.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@683268 13f79535-47bb-0310-9956-ffa450edef68

- * {@link #create(String, String) create} method and during
- * serialization and JNDI "referenciation".
+ * construction, deserialization, and JNDI "referenciation".
-    private transient JackrabbitRepository delegatee;
+    private transient JackrabbitRepository repository;
-     * Creates a BindableRepository instance with the given configuration
-     * information, but does not create the underlying repository instance.
+     * Creates a BindableRepository instance with the configuration
+     * information in the given JNDI reference.
-     * @param configFilePath repository configuration file path
-     * @param repHomeDir     repository home directory path
+     * @param reference JNDI reference
+     * @throws RepositoryException if the repository can not be started
-    protected void init() throws RepositoryException {
-        delegatee = getRepository(reference);
+    private void init() throws RepositoryException {
+        repository = createRepository();
-     * Creates a repository instance based on the given reference. Can be
-     * overridden by subclasses to return different repositories. The default
-     * implementation returns a {@link RepositoryImpl} instance.
+     * Creates a repository instance based on the contained JNDI reference.
+     * Can be overridden by subclasses to return different repositories.
+     * A subclass can access the JNDI reference through the
+     * {@link #getReference()} method. The default implementation
+     * returns a {@link RepositoryImpl} instance.
-     * @param reference repository reference
-    protected JackrabbitRepository getRepository(Reference reference)
+    protected JackrabbitRepository createRepository()
+    /**
+     * Returns the underlying repository instance. Can be used by subclasses
+     * to access the repository instance.
+     *
+     * @return repository instance
+     */
+    protected JackrabbitRepository getRepository() {
+        return repository;
+    }
+
-        return delegatee.login(credentials, workspaceName);
+        return repository.login(credentials, workspaceName);
-        return delegatee.getDescriptor(key);
+        return repository.getDescriptor(key);
-        return delegatee.getDescriptorKeys();
+        return repository.getDescriptorKeys();
-        delegatee.shutdown();
+        repository.shutdown();
