work in progress

- Completeness/Freshness of Namespace Registry

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477172 13f79535-47bb-0310-9956-ffa450edef68

+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    private static Logger log = LoggerFactory.getLogger(NamespaceRegistryImpl.class);
+
-    public NamespaceRegistryImpl(NamespaceStorage storage, Map nsValues, boolean level2Repository) {
+    /**
+     * Create a new <code>NamespaceRegistryImpl</code>.
+     *
+     * @param storage
+     * @param level2Repository
+     * @throws RepositoryException
+     */
+    public NamespaceRegistryImpl(NamespaceStorage storage, boolean level2Repository)
+        throws RepositoryException {
+
-        load(nsValues);
+
+        load();
-    private void load(Map nsValues) {
+    /**
+     * Load all mappings from the <code>NamespaceStorage</code> and update this
+     * registry.
+     *
+     * @throws RepositoryException
+     */
+    private void load() throws RepositoryException {
+        Map nsValues = storage.getRegisteredNamespaces();
-            if (!prefixToURI.containsKey(prefix)) {
-                String uri = (String) nsValues.get(prefix);
-                prefixToURI.put(prefix, uri);
-                uriToPrefix.put(uri, prefix);
-            }
+            String uri = (String) nsValues.get(prefix);
+            addMapping(prefix, uri);
+     * Add a namespace with the given uri and prefix. If for the given
+     * <code>uri</code> is already registered with a different prefix, the
+     * existing mapping gets replaced.
+     *
+     * @param prefix
+     * @param uri
+     */
+    private void addMapping(String prefix, String uri) {
+        if (uriToPrefix.containsKey(uri)) {
+            String oldPrefix = (String) uriToPrefix.get(uri);
+            replaceMapping(oldPrefix, prefix, uri);
+        } else {
+            prefixToURI.put(prefix, uri);
+            uriToPrefix.put(uri, prefix);
+            notifyNamespaceAdded(prefix, uri);
+        }
+    }
+
+    /**
+     * Remove the entries with the given prefix and uri from the registry
+     * and inform all listeners.
+     *
+     * @param prefix
+     * @param uri
+     */
+    private void removeMapping(String prefix, String uri) {
+        prefixToURI.remove(prefix).toString();
+        uriToPrefix.remove(uri);
+        // notify listeners
+        notifyNamespaceRemoved(uri);
+    }
+
+    /**
+     * Replace an existing registered namespace with the given <code>oldPrefix</code>
+     * by an entry with the new prefix. Subsequently all listeners are informed
+     * about the remapped namespace.
+     *
+     * @param oldPrefix
+     * @param prefix
+     * @param uri
+     */
+    private void replaceMapping(String oldPrefix, String prefix, String uri) {
+        if (oldPrefix.equals(prefix)) {
+            // mapping already existing -> nothing to do.
+            return;
+        }
+        prefixToURI.remove(oldPrefix);
+        prefixToURI.put(prefix, uri);
+        uriToPrefix.put(uri, prefix);
+        // notify: remapped existing namespace uri to new prefix
+        notifyNamespaceRemapped(oldPrefix, prefix, uri);
+    }
+
+    //--------------------------------------------------< NamespaceRegistry >---
+    /**
-
-        // remove old prefix mapping
-        if (oldPrefix != null) {
-            prefixToURI.remove(oldPrefix);
-            uriToPrefix.remove(uri);
-        }
-        // add new prefix mapping
-        prefixToURI.put(prefix, uri);
-        uriToPrefix.put(uri, prefix);
-
-        // notify listeners
-        if (oldPrefix != null) {
-            // remapped existing namespace uri to new prefix
-            notifyNamespaceRemapped(oldPrefix, prefix, uri);
+        if (oldPrefix == null) {
+            addMapping(prefix, uri);
-            // added new namespace uri mapped to prefix
-            notifyNamespaceAdded(prefix, uri);
+            replaceMapping(oldPrefix, prefix, uri);
-        storage.unregisterNamespace(prefixToURI.get(prefix).toString());
+        String uri = prefixToURI.get(prefix).toString();
+        storage.unregisterNamespace(uri);
-        // update caches
-        String uri = prefixToURI.remove(prefix).toString();
-        uriToPrefix.remove(uri);
-
-        // notify listeners
-        notifyNamespaceRemoved(uri);
+        // update caches and notify listeners
+        removeMapping(prefix, uri);
-
+        if (!prefixToURI.containsKey(prefix)) {
+            // reload mappings in order to make sure, the NamespaceRegistry is
+            // up to date, and try to retrieve the uri again.
+            try {
+                load();
+            } catch (RepositoryException ex) {
+                log.warn("Internal error while loading registered namespaces.");
+            }
+        }
+
+
+        if (!uriToPrefix.containsKey(uri)) {
+            // reload mappings in order to make sure, the NamespaceRegistry is
+            // up to date, and try to retrieve the prefix again.
+            try {
+                load();
+            } catch (RepositoryException ex) {
+                log.warn("Internal error while loading registered namespaces.");
+            }
+        }
+
+    /**
+     * {@inheritDoc}
+     */
+    /**
+     * {@inheritDoc}
+     */
+    /**
+     * {@inheritDoc}
+     */
-}
+}
