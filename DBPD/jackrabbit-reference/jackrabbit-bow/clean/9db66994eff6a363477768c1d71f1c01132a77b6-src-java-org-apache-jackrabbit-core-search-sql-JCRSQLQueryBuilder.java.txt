Changed semantics of SQL operators: <, >, <=, >=, <>, = to general comparison.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159585 13f79535-47bb-0310-9956-ffa450edef68

-        QueryNode predicateNode = null;
+        QueryNode predicateNode;
-            final QName[] tmp = new QName[1];
+            final QName[] tmp = new QName[2];
+            final ASTLiteral[] value = new ASTLiteral[1];
-                    // only assign first identifier
-                    tmp[0] = (tmp[0] == null) ? node.getName() : tmp[0];
+                    if (tmp[0] == null) {
+                        tmp[0] = node.getName();
+                    } else if (tmp[1] == null) {
+                        tmp[1] = node.getName();
+                    }
+                    return data;
+                }
+
+                public Object visit(ASTLiteral node, Object data) {
+                    value[0] = node;
-                if (node.children[1] instanceof ASTIdentifier) {
+                if (tmp[1] != null) {
-                    createPathQuery(((ASTLiteral) node.children[1]).getValue(), parent.getType());
+                    createPathQuery(value[0].getValue(), parent.getType());
-                        identifier, QueryConstants.OPERATION_GE_VALUE, (ASTLiteral) node.children[1]);
+                        identifier, QueryConstants.OPERATION_GE_GENERAL, (ASTLiteral) node.children[1]);
-                        identifier, QueryConstants.OPERATION_LE_VALUE, (ASTLiteral) node.children[2]);
+                        identifier, QueryConstants.OPERATION_LE_GENERAL, (ASTLiteral) node.children[2]);
-            } else if (type == QueryConstants.OPERATION_EQ_VALUE) {
-                if (node.children[1] instanceof ASTIdentifier) {
-                    // simply ignore, this is a join of a mixin node type
-                } else {
-                    predicateNode = createRelationQueryNode(parent,
-                            identifier, type, (ASTLiteral) node.children[1]);
-                }
-            } else if (type == QueryConstants.OPERATION_GE_VALUE
-                    || type == QueryConstants.OPERATION_GT_VALUE
-                    || type == QueryConstants.OPERATION_LE_VALUE
-                    || type == QueryConstants.OPERATION_LT_VALUE
-                    || type == QueryConstants.OPERATION_NE_VALUE) {
+            } else if (type == QueryConstants.OPERATION_GE_GENERAL
+                    || type == QueryConstants.OPERATION_GT_GENERAL
+                    || type == QueryConstants.OPERATION_LE_GENERAL
+                    || type == QueryConstants.OPERATION_LT_GENERAL
+                    || type == QueryConstants.OPERATION_NE_GENERAL
+                    || type == QueryConstants.OPERATION_EQ_GENERAL) {
-                        identifier, type, (ASTLiteral) node.children[1]);
-            } else if (type == QueryConstants.OPERATION_EQ_GENERAL
-                    || type == QueryConstants.OPERATION_NE_GENERAL) {
-                predicateNode = createRelationQueryNode(parent,
-                        identifier, type, (ASTLiteral) node.children[0]);
+                        identifier, type, value[0]);
-                ASTLiteral pattern = (ASTLiteral) node.children[1];
+                ASTLiteral pattern = value[0];
