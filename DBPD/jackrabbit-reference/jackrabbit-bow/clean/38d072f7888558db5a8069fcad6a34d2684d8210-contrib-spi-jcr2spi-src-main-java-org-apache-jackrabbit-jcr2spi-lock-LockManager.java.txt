work in progress

- Restore: pass NodeState(s) and Path instead of NodeId(s)
- LockManager: make sure lockmanager only remembers workspace states
- LockManager: make sure operations are executed using workspace states
- LockManager: improve isLocked/getLock/checkIsLocked and respect locks that
have been accessed before.
- VersionManager: make sure operations are executed using workspace states
- VersionManager: add checkIsCheckedOut
- VersionManager: force manager to have a WorkspaceManager
- NodeReferences:
  > make interface package protected
  > clarify method naming
  > add implementation to WorkspaceItemStateFactory
  > add NodeReferences field to NodeState
  > TO_IMPROVE: references are currently always retrieve from the SPI.
- ItemStateManager + NodeReferences
  > rename interfaces methods
  > change method signature to take NodeState instead of NodeId
  > 'getReferences' returns the property states directly

- remove some JR DIFFs. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432234 13f79535-47bb-0310-9956-ffa450edef68

+     * Removes the lock on a node.
+     *
+     * @param nodeState
+     * @throws LockException if this node is not locked or the session does not
+     * have the correct lock token
+     * @see javax.jcr.Node#unlock
+     */
+    void unlock(NodeState nodeState) throws LockException, RepositoryException;
+
+
+    /**
-     * Removes the lock on a node.
-     *
-     * @param nodeState
-     * @throws LockException if this node is not locked or the session does not
-     * have the correct lock token
-     * @see javax.jcr.Node#unlock
-     */
-    void unlock(NodeState nodeState) throws LockException, RepositoryException;
-
-    /**
-     * Check whether the node given is locked by somebody else than the
+     * Check whether the given node state is locked by somebody else than the
