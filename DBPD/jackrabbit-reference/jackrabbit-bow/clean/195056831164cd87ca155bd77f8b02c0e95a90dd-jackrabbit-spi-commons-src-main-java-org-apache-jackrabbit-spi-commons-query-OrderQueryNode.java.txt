JCR-800: Child Axis support in order by clause

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@744884 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.name.PathBuilder;
+import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
+     * @deprecated use {@link #addOrderSpec(Path , boolean)} instead.
+        addOrderSpec(createPath(property), ascending);
+    }
+
+    /**
+     * Adds an order specification to this query node.
+     *
+     * @param property  the relative path of the property.
+     * @param ascending if <code>true</code> values of this properties are
+     *                  ordered ascending; descending if <code>false</code>.
+     */
+    public void addOrderSpec(Path property, boolean ascending) {
-         * The name of the property
+         * The relative path to of the property
-        private final Name property;
+        private final Path property;
+         * @deprecated use {@link OrderSpec#OrderSpec(Path, boolean)} instead.
+            this(createPath(property), ascending);
+        }
+
+        /**
+         * Creates a new <code>OrderSpec</code> for <code>property</code>.
+         *
+         * @param property  the relative path of the property.
+         * @param ascending if <code>true</code> the property is ordered
+         *                  ascending, otherwise descending.
+         */
+        public OrderSpec(Path property, boolean ascending) {
+         * @deprecated use {@link #getPropertyPath()} instead.
+            return property.getNameElement().getName();
+        }
+
+        /**
+         * Returns the relative path of the property.
+         *
+         * @return the relative path of the property.
+         */
+        public Path getPropertyPath() {
+    //--------------------------------< internal >------------------------------
+
+    /**
+     * Creates a path with a single element out of the given <code>name</code>.
+     *
+     * @param name the name to create the path from.
+     * @return a path with a single element.
+     */
+    private static Path createPath(Name name) {
+        try {
+            PathBuilder builder = new PathBuilder();
+            builder.addLast(name);
+            return builder.getPath();
+        } catch (MalformedPathException e) {
+            // never happens, we just added an element
+            throw new InternalError();
+        }
+    }
