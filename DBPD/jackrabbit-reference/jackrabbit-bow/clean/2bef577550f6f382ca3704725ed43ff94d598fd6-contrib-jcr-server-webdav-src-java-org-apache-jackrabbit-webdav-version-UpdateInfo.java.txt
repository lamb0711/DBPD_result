JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-import java.util.Iterator;
+import java.util.ArrayList;
-public class UpdateInfo implements DeltaVConstants {
+public class UpdateInfo implements DeltaVConstants, XmlSerializable {
+    private final DavPropertyNameSet propertyNameSet;
-         if (updateElement == null || !updateElement.getName().equals(DeltaVConstants.XML_UPDATE)) {
+        if (!DomUtil.matches(updateElement, XML_UPDATE, NAMESPACE)) {
-        List targetList;
-        if (!(targetList = updateElement.getChildren(XML_VERSION, NAMESPACE)).isEmpty()) {
-            Iterator it = targetList.iterator();
-            versionHref = new String[targetList.size()];
-            int i = 0;
+        boolean done = false;
+        ElementIterator it = DomUtil.getChildren(updateElement, XML_VERSION, NAMESPACE);
-                Element versionElem = (Element) it.next();
-                versionHref[i] = versionElem.getChildText(DavConstants.XML_HREF, NAMESPACE);
-                i++;
-            }
-        } else if (!(targetList = updateElement.getChildren(XML_LABEL_NAME, NAMESPACE)).isEmpty()) {
-            Iterator it = targetList.iterator();
-            labelName = new String[targetList.size()];
-            int i = 0;
+            List hrefList = new ArrayList();
+            Element el = it.nextElement();
+            hrefList.add(DomUtil.getChildText(el, DavConstants.XML_HREF, DavConstants.NAMESPACE));
+            versionHref = (String[])hrefList.toArray(new String[hrefList.size()]);
+            done = true;
+        }
+
+        // alternatively 'DAV:label-name' elements may be present.
+        if (!done) {
+            it = DomUtil.getChildren(updateElement, XML_LABEL_NAME, NAMESPACE);
-                Element labelNameElem = (Element) it.next();
-                labelName[i] = labelNameElem.getText();
-                i++;
+                List labelList = new ArrayList();
+                Element el = it.nextElement();
+                labelList.add(DomUtil.getText(el));
+                labelName = (String[])labelList.toArray(new String[labelList.size()]);
+                done = true;
-        } else if (updateElement.getChild(XML_WORKSPACE, NAMESPACE) != null) {
-            workspaceHref = updateElement.getChild(XML_WORKSPACE, NAMESPACE).getChildText(DavConstants.XML_HREF, NAMESPACE);
+        }
+
+        // last possibility: a DAV:workspace element
+        if (!done) {
+            Element wspElem = DomUtil.getChildElement(updateElement, XML_WORKSPACE, NAMESPACE);
+            if (wspElem != null) {
+                workspaceHref = DomUtil.getChildTextTrim(wspElem, DavConstants.XML_HREF, DavConstants.NAMESPACE);
+        }
-        this.updateElement = (Element) updateElement.detach();
+        // if property name set if present
+        if (DomUtil.hasChildElement(updateElement, DavConstants.XML_PROP, DavConstants.NAMESPACE)) {
+            Element propEl = DomUtil.getChildElement(updateElement, DavConstants.XML_PROP, DavConstants.NAMESPACE);
+            propertyNameSet = new DavPropertyNameSet(propEl);
+            updateElement.removeChild(propEl);
+        } else {
+            propertyNameSet = new DavPropertyNameSet();
+        }
+        this.updateElement = updateElement;
-     * in the set. Otherwise an empty set is returned.
+     * in the set. Otherwise an empty set is returned.<p/>
+     *
+     * <b>WARNING:</b> modifying the DavPropertyNameSet returned by this method does
+     * not modify this <code>UpdateInfo</code>.
-        Element propElement = updateElement.getChild(DavConstants.XML_PROP, DavConstants.NAMESPACE);
-        if (propElement != null) {
-            return new DavPropertyNameSet(propElement);
-        } else {
-            return new DavPropertyNameSet();
-        }
+        return propertyNameSet;
+
+    /**
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
+     */
+    public Element toXml(Document document) {
+        Element elem = (Element)document.importNode(updateElement, true);
+        if (!propertyNameSet.isEmpty()) {
+            elem.appendChild(propertyNameSet.toXml(document));
+        }
+        return elem;
+    }
+
