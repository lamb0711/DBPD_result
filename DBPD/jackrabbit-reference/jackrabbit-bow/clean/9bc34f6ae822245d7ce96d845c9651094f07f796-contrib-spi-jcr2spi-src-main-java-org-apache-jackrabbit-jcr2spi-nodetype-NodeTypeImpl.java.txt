- new interface EffectiveNodeTypeProvider
- new interface ItemDefinitionProvider
- limit access to NodeTypeRegistry and simplify the NodeTypeRegistry
  interface.
- avoid duplicate code dealing with logic of EffectiveNodeType
  and retrieval of QItemDefinitions.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520408 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.ManagerProvider;
-    /**
-     * Namespace resolver used to translate qualified names to JCR names
-     */
-    private final NamespaceResolver nsResolver;
-    /**
-     * ValueFactory used to convert JCR values to qualified ones in order to
-     * determine whether a property specified by name and value(s) would be allowed.
-     *
-     * @see NodeType#canSetProperty(String, Value)
-     * @see NodeType#canSetProperty(String, Value[])
-     */
-    private final ValueFactory valueFactory;
-    /**
-     * ValueFactory used to convert JCR values to qualified ones in order to
-     * determine value constraints within the NodeType interface.
-     */
-    private final QValueFactory qValueFactory;
+    private final ManagerProvider mgrProvider;
-                 NodeTypeManagerImpl ntMgr, NamespaceResolver nsResolver,
-                 ValueFactory valueFactory, QValueFactory qValueFactory) {
+                 NodeTypeManagerImpl ntMgr, ManagerProvider mgrProvider) {
-        this.nsResolver = nsResolver;
-        this.valueFactory = valueFactory;
-        this.qValueFactory = qValueFactory;
+        this.mgrProvider = mgrProvider;
+    private NamespaceResolver nsResolver() {
+        return mgrProvider.getNamespaceResolver();
+    }
+
+    private ItemDefinitionProvider definitionProvider() {
+        return mgrProvider.getItemDefinitionProvider();
+    }
+
+    /**
+     * ValueFactory used to convert JCR values to qualified ones in order to
+     * determine whether a property specified by name and value(s) would be allowed.
+     *
+     * @see NodeType#canSetProperty(String, Value)
+     * @see NodeType#canSetProperty(String, Value[])
+     */
+    private ValueFactory valueFactory() throws RepositoryException {
+        return mgrProvider.getJcrValueFactory();
+    }
+
+    /**
+     * ValueFactory used to convert JCR values to qualified ones in order to
+     * determine value constraints within the NodeType interface.
+     */
+    private QValueFactory qValueFactory() throws RepositoryException {
+        return mgrProvider.getQValueFactory();
+    }
+    
-        return ent.getApplicablePropertyDefinition(propertyName, type, multiValued);
+        return definitionProvider().getQPropertyDefinition(getQName(), propertyName, type, multiValued);
-            return NameFormat.format(ntd.getQName(), nsResolver);
+            return NameFormat.format(ntd.getQName(), nsResolver());
-                return NameFormat.format(piName, nsResolver);
+                return NameFormat.format(piName, nsResolver());
-            ntName = NameFormat.parse(nodeTypeName, nsResolver);
+            ntName = NameFormat.parse(nodeTypeName, nsResolver());
-        QNodeDefinition[] cnda = ent.getAllNodeDefs();
+        QNodeDefinition[] cnda = ent.getAllQNodeDefinitions();
-        QPropertyDefinition[] pda = ent.getAllPropDefs();
+        QPropertyDefinition[] pda = ent.getAllQPropertyDefinitions();
-            QName name = NameFormat.parse(propertyName, nsResolver);
+            QName name = NameFormat.parse(propertyName, nsResolver());
-                v =  ValueHelper.convert(value, def.getRequiredType(), valueFactory);
+                v =  ValueHelper.convert(value, def.getRequiredType(), valueFactory());
-            QValue qValue = ValueFormat.getQValue(v, nsResolver, qValueFactory);
+            QValue qValue = ValueFormat.getQValue(v, nsResolver(), qValueFactory());
-            QName name = NameFormat.parse(propertyName, nsResolver);
+            QName name = NameFormat.parse(propertyName, nsResolver());
-                    Value v = ValueHelper.convert(values[i], targetType, valueFactory);
-                    QValue qValue = ValueFormat.getQValue(v, nsResolver, qValueFactory);
+                    Value v = ValueHelper.convert(values[i], targetType, valueFactory());
+                    QValue qValue = ValueFormat.getQValue(v, nsResolver(), qValueFactory());
-            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver),
-                ntMgr.getNodeTypeRegistry());
+            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver()), definitionProvider());
-            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver),
-                NameFormat.parse(nodeTypeName, nsResolver), ntMgr.getNodeTypeRegistry());
+            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver()),
+                NameFormat.parse(nodeTypeName, nsResolver()), definitionProvider());
-            ent.checkRemoveItemConstraints(NameFormat.parse(itemName, nsResolver));
+            ent.checkRemoveItemConstraints(NameFormat.parse(itemName, nsResolver()));
