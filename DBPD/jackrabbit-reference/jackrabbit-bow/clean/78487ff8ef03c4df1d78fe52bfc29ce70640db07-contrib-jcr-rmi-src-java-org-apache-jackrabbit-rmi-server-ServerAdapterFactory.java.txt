JCR-RMI: Use remote iterators instead of arrays to avoid memory and network problems with large result sets.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@365458 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NodeIterator;
+import javax.jcr.PropertyIterator;
+import javax.jcr.nodetype.NodeTypeIterator;
+import javax.jcr.query.RowIterator;
+import javax.jcr.version.VersionIterator;
+import org.apache.jackrabbit.rmi.remote.ArrayIterator;
+import org.apache.jackrabbit.rmi.remote.BufferIterator;
+import org.apache.jackrabbit.rmi.remote.RemoteIterator;
+import org.apache.jackrabbit.rmi.server.iterator.ServerNodeIterator;
+import org.apache.jackrabbit.rmi.server.iterator.ServerNodeTypeIterator;
+import org.apache.jackrabbit.rmi.server.iterator.ServerPropertyIterator;
+import org.apache.jackrabbit.rmi.server.iterator.ServerRowIterator;
+import org.apache.jackrabbit.rmi.server.iterator.ServerVersionIterator;
+     * The default maximum buffer size used for local iterator buffers.
+     */
+    private static final int MAX_BUFFER_SIZE = 100;
+
+    /**
+
+    /**
+     * Optimizes the given remote iterator for transmission across the
+     * network. This method retrieves the first set of elements from
+     * the iterator by calling {@link RemoteIterator#nextObjects()} and
+     * then asks for the total size of the iterator. If the size is unkown
+     * or greater than the length of the retrieved array, then the elements,
+     * the size, and the remote iterator reference are wrapped into a
+     * {@link BufferIterator} instance that gets passed over the network.
+     * If the retrieved array of elements contains all the elements in the
+     * iterator, then the iterator instance is discarded and just the elements
+     * are wrapped into a {@link ArrayIterator} instance to be passed to the
+     * client.
+     *
+     * @param remote remote iterator
+     * @return optimized remote iterator
+     * @throws RemoteException on RMI errors
+     */
+    private RemoteIterator optimizeIterator(RemoteIterator remote)
+            throws RemoteException {
+        Object[] elements = remote.nextObjects();
+        long size = remote.getSize();
+        if (size == -1 || (elements != null && size > elements.length)) {
+            return new BufferIterator(elements, size, remote);
+        } else {
+            return new ArrayIterator(elements);
+        }
+    }
+
+    /**
+     * Creates a {@link ServerNodeIterator} instance. {@inheritDoc}
+     */
+    public RemoteIterator getRemoteNodeIterator(NodeIterator iterator)
+            throws RemoteException {
+        return optimizeIterator(
+                new ServerNodeIterator(iterator, this, MAX_BUFFER_SIZE));
+    }
+
+    /**
+     * Creates a {@link ServerPropertyIterator} instance. {@inheritDoc}
+     */
+    public RemoteIterator getRemotePropertyIterator(PropertyIterator iterator)
+            throws RemoteException {
+        return optimizeIterator(
+                new ServerPropertyIterator(iterator, this, MAX_BUFFER_SIZE));
+    }
+
+    /**
+     * Creates a {@link ServerVersionIterator} instance. {@inheritDoc}
+     */
+    public RemoteIterator getRemoteVersionIterator(VersionIterator iterator)
+            throws RemoteException {
+        return optimizeIterator(
+                new ServerVersionIterator(iterator, this, MAX_BUFFER_SIZE));
+    }
+
+    /**
+     * Creates a {@link ServerNodeTypeIterator} instance. {@inheritDoc}
+     */
+    public RemoteIterator getRemoteNodeTypeIterator(NodeTypeIterator iterator)
+            throws RemoteException {
+        return optimizeIterator(
+                new ServerNodeTypeIterator(iterator, this, MAX_BUFFER_SIZE));
+    }
+
+    /**
+     * Creates a {@link ServerRowIterator} instance. {@inheritDoc}
+     */
+    public RemoteIterator getRemoteRowIterator(RowIterator iterator)
+            throws RemoteException {
+        return optimizeIterator(
+                new ServerRowIterator(iterator, this, MAX_BUFFER_SIZE));
+    }
+
