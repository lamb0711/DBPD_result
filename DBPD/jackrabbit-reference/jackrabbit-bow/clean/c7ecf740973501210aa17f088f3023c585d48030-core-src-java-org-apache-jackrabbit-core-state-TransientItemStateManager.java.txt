- fixed Serializable support of ItemId, ItemState and derived classes
- new internal utility interface util.Dumpable providing diagnostic
  output
- added Dumpable support to several internal components
- extracted ItemStateStore interface from ItemStateMap concrete class


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@230483 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.Dumpable;
-class TransientItemStateManager implements ItemStateManager {
+class TransientItemStateManager implements ItemStateManager, Dumpable {
-    private final ItemStateMap atticMap;
+    private final ItemStateStore atticStore;
-    private final ItemStateMap transientMap;
+    private final ItemStateStore transientStore;
-        transientMap = new ItemStateMap();
-        atticMap = new ItemStateMap();
+        transientStore = new ItemStateMap();
+        atticStore = new ItemStateMap();
+    //-------------------------------------------------------------< Dumpable >
-     * Dumps the state of this <code>TransientItemStateManager</code> instance
-     * (used for diagnostic purposes).
-     *
-     * @param ps
+     * {@inheritDoc}
-    void dump(PrintStream ps) {
+    public void dump(PrintStream ps) {
-        transientMap.dump(ps);
+        if (transientStore instanceof Dumpable) {
+            ((Dumpable) transientStore).dump(ps);
+        } else {
+            ps.println(transientStore.toString());
+        }
-        atticMap.dump(ps);
+        if (atticStore instanceof Dumpable) {
+            ((Dumpable) atticStore).dump(ps);
+        } else {
+            ps.println(atticStore.toString());
+        }
-        ItemState state = transientMap.get(id);
+        ItemState state = transientStore.get(id);
-        return transientMap.contains(id);
+        return transientStore.contains(id);
-        return !transientMap.isEmpty();
+        return !transientStore.isEmpty();
-        return !atticMap.isEmpty();
+        return !atticStore.isEmpty();
-        return transientMap.size();
+        return transientStore.size();
-        return atticMap.size();
+        return atticStore.size();
-        return transientMap.values().iterator();
+        return transientStore.values().iterator();
-        return atticMap.values().iterator();
+        return atticStore.values().iterator();
-        synchronized (transientMap) {
-            if (transientMap.contains(id)) {
+        synchronized (transientStore) {
+            if (transientStore.contains(id)) {
-            transientMap.put(state);
+            transientStore.put(state);
-        synchronized (transientMap) {
-            if (transientMap.contains(id)) {
+        synchronized (transientStore) {
+            if (transientStore.contains(id)) {
-            transientMap.put(state);
+            transientStore.put(state);
-        synchronized (transientMap) {
-            if (transientMap.contains(id)) {
+        synchronized (transientStore) {
+            if (transientStore.contains(id)) {
-            transientMap.put(state);
+            transientStore.put(state);
-        synchronized (transientMap) {
-            if (transientMap.contains(id)) {
+        synchronized (transientStore) {
+            if (transientStore.contains(id)) {
-            transientMap.put(state);
+            transientStore.put(state);
-        transientMap.remove(state.getId());
+        transientStore.remove(state.getId());
-        transientMap.remove(state.getId());
+        transientStore.remove(state.getId());
-        atticMap.put(state);
+        atticStore.put(state);
-        atticMap.remove(state.getId());
+        atticStore.remove(state.getId());
-        Collection tmp = new ArrayList(transientMap.values());
+        Collection tmp = new ArrayList(transientStore.values());
-        tmp = new ArrayList(atticMap.values());
+        tmp = new ArrayList(atticStore.values());
-            ItemState state = atticMap.get(id);
+            ItemState state = atticStore.get(id);
-            return atticMap.contains(id);
+            return atticStore.contains(id);
