JCR-890: concurrent read-only access to a session

Add WorkspaceImpl into SessionContext

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@985296 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.lock.LockManager;
-import org.xml.sax.InputSource;
-     * the Workspace associated with this session
-     */
-    protected final WorkspaceImpl wsp;
-
-    /**
-        this.context = new SessionContext(repositoryContext, this);
+        this.context = new SessionContext(repositoryContext, this, wspConfig);
-        wsp = createWorkspaceInstance(wspConfig);
-                wsp.getItemStateManager(),
-                repositoryContext.getNodeTypeRegistry());
-        wsp.getItemStateManager().addListener(mgr);
+                context.getWorkspace().getItemStateManager(),
+                context.getNodeTypeRegistry());
+        context.getWorkspace().getItemStateManager().addListener(mgr);
-     * Creates the workspace instance backing this session.
-     *
-     * @param wspConfig The workspace configuration
-     * @return An instance of the {@link WorkspaceImpl} class or an extension
-     *         thereof.
-     * @throws RepositoryException if the workspace can not be accessed
-     */
-    protected WorkspaceImpl createWorkspaceInstance(WorkspaceConfig wspConfig)
-            throws RepositoryException {
-        return new WorkspaceImpl(wspConfig, context);
-    }
-
-    /**
-                    repositoryContext.getRepository().getObservationDispatcher(wspName),
+                    context.getRepository().getObservationDispatcher(wspName),
-                    repositoryContext.getClusterNode());
+                    context.getRepositoryContext().getClusterNode());
-        return repositoryContext.getInternalVersionManager();
+        return context.getRepositoryContext().getInternalVersionManager();
-                new File(repositoryContext.getRepository().getConfig().getHomeDir()),
-                repositoryContext.getFileSystem(),
+                new File(context.getRepository().getConfig().getHomeDir()),
+                context.getRepositoryContext().getFileSystem(),
-        return wsp.getRetentionRegistry();
+        return context.getWorkspace().getRetentionRegistry();
-     * Returns the names of all workspaces of this repository with respect of the
-     * access rights of this session.
-     *
-     * @return the names of all accessible workspaces
-     * @throws RepositoryException if an error occurs
-     */
-    protected String[] getWorkspaceNames() throws RepositoryException {
-        // filter workspaces according to access rights
-        List<String> names = new ArrayList<String>();
-        for (String name : repositoryContext.getWorkspaceManager().getWorkspaceNames()) {
-            try {
-                if (context.getAccessManager().canAccess(name)) {
-                    names.add(name);
-                }
-            } catch (NoSuchWorkspaceException e) {
-                log.warn("Workspace disappeared unexpectedly: " + name, e);
-            }
-        }
-        return names.toArray(new String[names.size()]);
-    }
-
-    /**
-     * Creates a workspace with the given name.
-     *
-     * @param workspaceName name of the new workspace
-     * @throws AccessDeniedException if the current session is not allowed to
-     *                               create the workspace
-     * @throws RepositoryException   if a workspace with the given name
-     *                               already exists or if another error occurs
-     */
-    protected void createWorkspace(String workspaceName)
-            throws AccessDeniedException, RepositoryException {
-        // @todo verify that this session has the right privileges for this operation
-        repositoryContext.getWorkspaceManager().createWorkspace(workspaceName);
-    }
-
-    /**
-     * Creates a workspace with the given name and a workspace configuration
-     * template.
-     *
-     * @param workspaceName  name of the new workspace
-     * @param configTemplate the configuration template of the new workspace
-     * @throws AccessDeniedException if the current session is not allowed to
-     *                               create the workspace
-     * @throws RepositoryException   if a workspace with the given name already
-     *                               exists or if another error occurs
-     */
-    protected void createWorkspace(
-            String workspaceName, InputSource configTemplate)
-            throws AccessDeniedException, RepositoryException {
-        // @todo verify that this session has the right privileges for this operation
-        repositoryContext.getWorkspaceManager().createWorkspace(
-                workspaceName, configTemplate);
-    }
-
-    /**
-        return getWorkspaceImpl();
-    }
-
-    WorkspaceImpl getWorkspaceImpl() {
-        return wsp;
+        return context.getWorkspace();
-        SessionImporter importer = new SessionImporter(parent, this, uuidBehavior, wsp.getConfig().getImportConfig());
+        SessionImporter importer = new SessionImporter(
+                parent, this, uuidBehavior,
+                context.getWorkspace().getConfig().getImportConfig());
-            wsp.dispose();
+            context.getWorkspace().dispose();
-            wsp.getLockManager().addLockToken(lt);
+            getWorkspace().getLockManager().addLockToken(lt);
-            return wsp.getLockManager().getLockTokens();
+            return getWorkspace().getLockManager().getLockTokens();
-            wsp.getLockManager().removeLockToken(lt);
+            getWorkspace().getLockManager().removeLockToken(lt);
-     * Return the lock manager for this session.
-     * @return lock manager for this session
-     */
-    public LockManager getLockManager() throws RepositoryException {
-        return wsp.getInternalLockManager();
-    }
-
-    /**
-            return getLockManager().getLocks(this);
+            return context.getWorkspace().getInternalLockManager().getLocks(this);
