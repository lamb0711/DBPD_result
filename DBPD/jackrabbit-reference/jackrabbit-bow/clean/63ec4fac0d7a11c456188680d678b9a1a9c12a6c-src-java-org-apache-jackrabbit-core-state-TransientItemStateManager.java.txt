redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-class TransientItemStateManager extends ItemStateCache implements ItemStateProvider {
+class TransientItemStateManager extends ItemStateCache implements ItemStateManager {
-        ps.println("entries in cache:");
+        ps.print("[transient] ");
+        super.dump(ps);
-        Iterator iter = keys();
-        while (iter.hasNext()) {
-            ItemId id = (ItemId) iter.next();
-            ItemState state = retrieve(id);
-            dumpItemState(id, state, ps);
-        }
-
-        ps.println();
-        ps.println("entries in attic:");
-        ps.println();
-        iter = attic.keys();
-        while (iter.hasNext()) {
-            ItemId id = (ItemId) iter.next();
-            ItemState state = attic.retrieve(id);
-            dumpItemState(id, state, ps);
-        }
-    }
-
-    private void dumpItemState(ItemId id, ItemState state, PrintStream ps) {
-        ps.print(state.isNode() ? "Node: " : "Prop: ");
-        switch (state.getStatus()) {
-            case ItemState.STATUS_EXISTING:
-                ps.print("[existing]           ");
-                break;
-            case ItemState.STATUS_EXISTING_MODIFIED:
-                ps.print("[existing, modified] ");
-                break;
-            case ItemState.STATUS_EXISTING_REMOVED:
-                ps.print("[existing, removed]  ");
-                break;
-            case ItemState.STATUS_NEW:
-                ps.print("[new]                ");
-                break;
-            case ItemState.STATUS_STALE_DESTROYED:
-                ps.print("[stale, destroyed]   ");
-                break;
-            case ItemState.STATUS_STALE_MODIFIED:
-                ps.print("[stale, modified]    ");
-                break;
-            case ItemState.STATUS_UNDEFINED:
-                ps.print("[undefined]          ");
-                break;
-        }
-        ps.println(id + " (" + state + ")");
+        ps.print("[attic]     ");
+        attic.dump(ps);
-     * @see ItemStateProvider#getItemState(ItemId)
+     * @see ItemStateManager#getItemState(ItemId)
-     * @see ItemStateProvider#hasItemState(ItemId)
+     * @see ItemStateManager#hasItemState(ItemId)
-     * @see ItemStateProvider#getItemStateInAttic(ItemId)
+     * @see ItemStateManager#getNodeReferences
-    public ItemState getItemStateInAttic(ItemId id)
+    public NodeReferences getNodeReferences(NodeId targetId)
-        ItemState state = attic.retrieve(id);
-        if (state != null) {
-            return state;
-        } else {
-            throw new NoSuchItemStateException(id.toString());
-        }
+
+        throw new ItemStateException("getNodeReferences() not implemented");
-     * @see ItemStateProvider#hasItemStateInAttic(ItemId)
+     * @see ItemStateManager#beginUpdate
-    public boolean hasItemStateInAttic(ItemId id) {
-        return attic.isCached(id);
+    public UpdateOperation beginUpdate() throws ItemStateException {
+        throw new ItemStateException("beginUpdate() not implemented");
+
-        NodeState state = new NodeState(uuid, nodeTypeName, parentUUID, initialStatus);
+        NodeState state = new NodeState(uuid, nodeTypeName, parentUUID, initialStatus, true);
-        NodeState state = new NodeState(overlayedState, initialStatus);
+        NodeState state = new NodeState(overlayedState, initialStatus, true);
-        PropertyState state = new PropertyState(propName, parentUUID, initialStatus);
+        PropertyState state = new PropertyState(propName, parentUUID, initialStatus, true);
-        PropertyState state = new PropertyState(overlayedState, initialStatus);
+        PropertyState state = new PropertyState(overlayedState, initialStatus, true);
+    /**
+     * Return the attic item state provider that holds all items
+     * moved into the attic.
+     * @return attic
+     */
+    ItemStateManager getAttic() {
+        return attic;
+    }
+
-    class Attic extends ItemStateCache {
+    class Attic extends ItemStateCache implements ItemStateManager {
+
+        /**
+         * @see ItemStateManager#getItemState
+         */
+        public ItemState getItemState(ItemId id)
+                throws NoSuchItemStateException, ItemStateException {
+
+            ItemState state = retrieve(id);
+            if (state != null) {
+                return state;
+            } else {
+                throw new NoSuchItemStateException(id.toString());
+            }
+        }
+
+        /**
+         * @see ItemStateManager#hasItemState
+         */
+        public boolean hasItemState(ItemId id) {
+            return isCached(id);
+        }
+
+        /**
+         * @see ItemStateManager#getNodeReferences
+         */
+        public NodeReferences getNodeReferences(NodeId targetId)
+                throws NoSuchItemStateException, ItemStateException {
+
+            throw new ItemStateException("getNodeReferences() not implemented");
+        }
+
+        /**
+         * @see ItemStateManager#beginUpdate
+         */
+        public UpdateOperation beginUpdate() throws ItemStateException {
+            throw new ItemStateException("beginUpdate() not implemented");
+        }
