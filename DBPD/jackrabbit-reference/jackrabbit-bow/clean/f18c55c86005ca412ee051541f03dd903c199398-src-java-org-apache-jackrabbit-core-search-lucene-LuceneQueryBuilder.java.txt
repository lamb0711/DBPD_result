fixed JCR-42: Workspace.move() and Session.move() allow moves to an invalid path
minor other changes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153279 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.IllegalNameException;
-import org.apache.jackrabbit.core.UnknownPrefixException;
-import org.apache.jackrabbit.core.QName;
-import org.apache.jackrabbit.core.NoPrefixDeclaredException;
-import org.apache.jackrabbit.core.NamespaceRegistryImpl;
+import org.apache.jackrabbit.core.*;
-import javax.jcr.RepositoryException;
-import javax.jcr.query.InvalidQueryException;
-import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.RepositoryException;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.query.InvalidQueryException;
+import java.util.Arrays;
-import java.util.Arrays;
-    /** Logger for this class */
+    /**
+     * Logger for this class
+     */
-    /** QName for jcr:primaryType */
-    private static QName primaryType = new QName(NamespaceRegistryImpl.NS_JCR_URI, "primaryType");
+    /**
+     * QName for jcr:primaryType
+     */
+    private static QName primaryType = NodeTypeRegistry.JCR_PRIMARY_TYPE;
-    /** Root node of the abstract query tree */
+    /**
+     * Root node of the abstract query tree
+     */
-    /** Session of the user executing this query */
+    /**
+     * Session of the user executing this query
+     */
-    /** Namespace mappings to internal prefixes */
+    /**
+     * Namespace mappings to internal prefixes
+     */
-    /** The analyzer instance to use for contains function query parsing */
+    /**
+     * The analyzer instance to use for contains function query parsing
+     */
-    /** Exceptions thrown during tree translation */
+    /**
+     * Exceptions thrown during tree translation
+     */
-     * @param root the root node of the abstract query tree.
-     * @param session of the user executing this query.
+     *
+     * @param root       the root node of the abstract query tree.
+     * @param session    of the user executing this query.
-     * @param analyzer for parsing the query statement of the contains function.
+     * @param analyzer   for parsing the query statement of the contains function.
-     * @param root the root node of the abstract query tree.
-     * @param session of the user executing the query.
+     *
+     * @param root       the root node of the abstract query tree.
+     * @param session    of the user executing the query.
-     * @param analyzer for parsing the query statement of the contains function.
+     * @param analyzer   for parsing the query statement of the contains function.
+     *
-            field = NodeTypeRegistry.JCR_PRIMARY_TYPE.toJCRName(nsMappings);
+            field = primaryType.toJCRName(nsMappings);
-                b.add(new TermQuery(new Term(field, (String)it.next())), false, false);
+                b.add(new TermQuery(new Term(field, (String) it.next())), false, false);
