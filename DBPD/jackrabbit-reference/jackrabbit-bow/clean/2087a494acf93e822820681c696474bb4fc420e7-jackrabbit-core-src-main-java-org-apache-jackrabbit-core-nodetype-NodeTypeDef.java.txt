JCR-2064 Add new JSR283 features to CND reader/writer
JCR-2153 Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()
JCR-2158 Consolidate CND related classes from SPI and Core


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785777 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-
-import javax.jcr.PropertyType;
-import java.util.Iterator;
+import javax.jcr.PropertyType;
+
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.apache.jackrabbit.spi.QNodeTypeDefinition;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
+import org.apache.jackrabbit.spi.QValueConstraint;
+import org.apache.jackrabbit.spi.commons.QNodeTypeDefinitionImpl;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
+
-    private HashSet propDefs;
-    private HashSet nodeDefs;
-    private Set dependencies;
+    private Set<PropDef> propDefs;
+    private Set<NodeDef> nodeDefs;
+    private Set<Name> dependencies;
-        nodeDefs = new HashSet();
-        propDefs = new HashSet();
+        nodeDefs = new HashSet<NodeDef>();
+        propDefs = new HashSet<PropDef>();
+    }
+
+    /**
+     * Creates a node type def from a spi QNodeTypeDefinition
+     * @param def definition
+     */
+    public NodeTypeDef(QNodeTypeDefinition def) {
+        name = def.getName();
+        primaryItemName = def.getPrimaryItemName();
+        supertypes = def.getSupertypes();
+        mixin = def.isMixin();
+        orderableChildNodes = def.hasOrderableChildNodes();
+        abstractStatus = def.isAbstract();
+        queryable = def.isQueryable();
+        nodeDefs = new HashSet<NodeDef>();
+        for (QNodeDefinition nd: def.getChildNodeDefs()) {
+            nodeDefs.add(new NodeDefImpl(nd));
+        }
+        propDefs = new HashSet<PropDef>();
+        for (QPropertyDefinition pd: def.getPropertyDefs()) {
+            propDefs.add(new PropDefImpl(pd));
+        }
+    }
+
+    /**
+     * Returns the QNodeTypeDefintion for this NodeTypeDef
+     * @return the QNodeTypeDefintion
+     */
+    public QNodeTypeDefinition getQNodeTypeDefinition() {
+        QNodeDefinition[] qNodeDefs = new QNodeDefinition[nodeDefs.size()];
+        int i=0;
+        for (NodeDef nd: nodeDefs) {
+            qNodeDefs[i++] = ((NodeDefImpl) nd).getQNodeDefinition();
+        }
+        QPropertyDefinition[] qPropDefs = new QPropertyDefinition[nodeDefs.size()];
+        i=0;
+        for (PropDef pd: propDefs) {
+            qPropDefs[i++] = ((PropDefImpl) pd).getQPropertyDefinition();
+        }
+
+        return new QNodeTypeDefinitionImpl(
+                getName(),
+                getSupertypes(),
+                null,
+                isMixin(),
+                isAbstract(),
+                isQueryable(),
+                hasOrderableChildNodes(),
+                getPrimaryItemName(),
+                qPropDefs,
+                qNodeDefs
+        );
-            dependencies = new HashSet();
+            dependencies = new HashSet<Name>();
-            for (Iterator iter = nodeDefs.iterator(); iter.hasNext();) {
-                NodeDef nd = (NodeDef) iter.next();
+            for (NodeDef nd: nodeDefs) {
-                for (int j = 0; j < ntNames.length; j++) {
-                    if (ntNames[j] != null && !name.equals(ntNames[j])) {
-                        dependencies.add(ntNames[j]);
+                for (Name ntName1 : ntNames) {
+                    if (ntName1 != null && !name.equals(ntName1)) {
+                        dependencies.add(ntName1);
-            for (Iterator iter = propDefs.iterator(); iter.hasNext();) {
-                PropDef pd = (PropDef) iter.next();
+            for (PropDef pd : propDefs) {
-                    ValueConstraint[] ca = pd.getValueConstraints();
+                    QValueConstraint[] ca = pd.getValueConstraints();
-                        for (int j = 0; j < ca.length; j++) {
-                            ReferenceConstraint rc = (ReferenceConstraint) ca[j];
-                            if (!name.equals(rc.getNodeTypeName())) {
-                                dependencies.add(rc.getNodeTypeName());
+                        for (QValueConstraint aCa : ca) {
+                            Name rcName = NameFactoryImpl.getInstance().create(aCa.getString());
+                            if (!name.equals(rcName)) {
+                                dependencies.add(rcName);
-            SortedSet types = new TreeSet();
+            SortedSet<Name> types = new TreeSet<Name>();
-            supertypes = (Name[]) types.toArray(new Name[types.size()]);
+            supertypes = types.toArray(new Name[types.size()]);
-        return (PropDef[]) propDefs.toArray(new PropDef[propDefs.size()]);
+        return propDefs.toArray(new PropDef[propDefs.size()]);
-        return (NodeDef[]) nodeDefs.toArray(new NodeDef[nodeDefs.size()]);
+        return nodeDefs.toArray(new NodeDef[nodeDefs.size()]);
-        clone.nodeDefs = (HashSet) nodeDefs.clone();
-        clone.propDefs = (HashSet) propDefs.clone();
+        clone.nodeDefs = new HashSet<NodeDef>();
+        // todo: itemdefs should be cloned as well, since mutable
+        clone.nodeDefs = new HashSet<NodeDef>(nodeDefs);
+        clone.propDefs = new HashSet<PropDef>(propDefs);
