simplified and adapted bdb-persistence to latest modifications in core (r329224)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@329242 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.jackrabbit.core.NodeId;
-import org.apache.jackrabbit.core.nodetype.NodeDefId;
-import org.apache.jackrabbit.core.state.NodeState;
-import org.apache.jackrabbit.name.QName;
-
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.util.Serializer;
-        // check uuid
-        String s = in.readString();
-        if (!state.getUUID().equals(s)) {
-            String msg = "invalid serialized state: uuid mismatch";
+        try {
+            Serializer.deserialize(state, in);
+        } catch (Exception e) {
+            // since the TupleInput methods do not throw any
+            // exceptions the above call should neither...
+            String msg = "error while deserializing node state";
-            throw new RuntimeException(msg);
-        }
-
-        // deserialize node state
-
-        // primaryType
-        s = in.readString();
-        state.setNodeTypeName(QName.valueOf(s));
-        // parentUUID
-        s = in.readString();
-        if (s.length() > 0) {
-            state.setParentUUID(s);
-        }
-        // definitionId
-        s = in.readString();
-        state.setDefinitionId(NodeDefId.valueOf(s));
-        // mixin types
-        int count = in.readInt(); // count
-        Set set = new HashSet(count);
-        for (int i = 0; i < count; i++) {
-            set.add(QName.valueOf(in.readString())); // name
-        }
-        if (set.size() > 0) {
-            state.setMixinTypeNames(set);
-        }
-        // properties (names)
-        count = in.readInt(); // count
-        for (int i = 0; i < count; i++) {
-            state.addPropertyName(QName.valueOf(in.readString())); // name
-        }
-        // child nodes (list of name/uuid pairs)
-        count = in.readInt(); // count
-        for (int i = 0; i < count; i++) {
-            QName name = QName.valueOf(in.readString()); // name
-            String s1 = in.readString(); // uuid
-            state.addChildNodeEntry(name, s1);
+            throw new RuntimeException(msg, e);
-
-        NodeState state = (NodeState) o;
-
-        // uuid
-        out.writeString(state.getUUID());
-        // primaryType
-        out.writeString(state.getNodeTypeName().toString());
-        // parentUUID
-        out.writeString(state.getParentUUID() == null ? "" : state.getParentUUID());
-        // definitionId
-        out.writeString(state.getDefinitionId().toString());
-        // mixin types
-        Collection c = state.getMixinTypeNames();
-        out.writeInt(c.size()); // count
-        for (Iterator iter = c.iterator(); iter.hasNext();) {
-            out.writeString(iter.next().toString()); // name
+        try {
+            Serializer.serialize((NodeState) o, out);
+        } catch (Exception e) {
+            // since the TupleOutput methods do not throw any
+            // exceptions the above call should neither...
+            String msg = "error while serializing node state";
+            log.debug(msg);
+            throw new RuntimeException(msg, e);
-        // properties (names)
-        c = state.getPropertyNames();
-        out.writeInt(c.size()); // count
-        for (Iterator iter = c.iterator(); iter.hasNext();) {
-            QName propName = (QName) iter.next();
-            out.writeString(propName.toString()); // name
-        }
-        // child nodes (list of name/uuid pairs)
-        c = state.getChildNodeEntries();
-        out.writeInt(c.size()); // count
-        for (Iterator iter = c.iterator(); iter.hasNext();) {
-            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) iter.next();
-            out.writeString(entry.getName().toString()); // name
-            out.writeString(entry.getUUID()); // uuid
-        }
-
