JCR-2115 new property types
JCR-1609  new Property Types

add constructor, create methods and special getters for Decimal and URI type

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779658 13f79535-47bb-0310-9956-ffa450edef68

+                    return new QValueImpl(new BigDecimal(value));
-                    // TODO implement
-                    throw new UnsupportedOperationException("Not implemented yet, see JCR-1609: new Property Types");
+                    return new QValueImpl(URI.create(value));
-        // TODO implement
-        throw new UnsupportedOperationException("Not implemented yet, see JCR-1609: new Property Types");
+        return new QValueImpl(value);
-        // TODO implement
-        throw new UnsupportedOperationException("Not implemented yet, see JCR-1609: new Property Types");
+        return new QValueImpl(value);
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
-        if (value == null) {
-            throw new IllegalArgumentException("Cannot create QValue from null value.");
-        }
+        protected QValueImpl(BigDecimal value) {
+            super(value);
+        }
+
+        protected QValueImpl(URI value) {
+            super(value);
+        }
+
+         * @see org.apache.jackrabbit.spi.QValue#getDecimal()
+         */
+        public BigDecimal getDecimal() throws RepositoryException {
+            if (val instanceof BigDecimal) {
+                return (BigDecimal) val;
+            } else if (val instanceof Double) {
+                return new BigDecimal((Double) val);
+            } else if (val instanceof Long) {
+                return new BigDecimal((Long) val);
+            } else if (val instanceof Calendar) {
+                return new BigDecimal(((Calendar) val).getTimeInMillis());
+            } else {
+                try {
+                    return new BigDecimal(getString());
+                } catch (NumberFormatException e) {
+                    throw new ValueFormatException("not a valid decimal string: " + getString(), e);
+                }
+            }
+        }
+
+        /**
+            } else if (val instanceof BigDecimal) {
+                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+00:00"));
+                cal.setTimeInMillis(((BigDecimal) val).longValue());
+                return cal;
+            } else if (val instanceof BigDecimal) {
+                return ((BigDecimal) val).doubleValue();
+            } else if (val instanceof BigDecimal) {
+                return ((BigDecimal) val).longValue();
