JCR-405: PROPPATCH doesn't respect document order
minor improvements within 'jcr' package:
- reorder nodes
- fixing creation/replacement of multivalued JCR properties
- contentlength for single value JCR properties
- improve spooling of resource content

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397835 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.io.OutputContext;
-import org.apache.jackrabbit.webdav.property.DavPropertyIterator;
+import org.apache.jackrabbit.server.io.IOUtil;
+import org.apache.xml.serialize.OutputFormat;
+import org.apache.xml.serialize.XMLSerializer;
+import org.w3c.dom.Document;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.List;
-     * logic is applyed to obtain the stream:<ul>
-     * <li>Property is not multivalue: Return the {@link javax.jcr.Value#getStream()
+     * logic is applyed to spool the property content:
+     * <ul>
+     * <li>Property is not multi valued: Return the {@link javax.jcr.Value#getStream()
-     * <li>Property is multivalue: Return stream that provides the system view of
-     * that item.</li>
+     * <li>Property is multivalue: Return the xml representation of the values.</li>
-     * @return
+     * @param outputContext
+     * @see DavResource#spool(OutputContext)
-    InputStream getStream() {
+    public void spool(OutputContext outputContext) throws IOException {
+        // write properties
+        super.spool(outputContext);
+        // spool content
-        if (exists()) {
-            try {
-                // NOTE: stream cannot be obtained for multivalue properties
-                if (!isMultiple()) {
+        try {
+            OutputStream out = outputContext.getOutputStream();
+            if (out != null && exists()) {
+                if (isMultiple()) {
+                    Document doc = DomUtil.BUILDER_FACTORY.newDocumentBuilder().newDocument();
+                    doc.appendChild(getProperty(JCR_VALUES).toXml(doc));
+                    OutputFormat format = new OutputFormat("xml", "UTF-8", false);
+                    XMLSerializer serializer = new XMLSerializer(out, format);
+                    serializer.setNamespaces(true);
+                    serializer.asDOMSerializer().serialize(doc);
+                } else {
+                    if (in != null) {
+                        IOUtil.spool(in, out);
+                    }
-            } catch (ValueFormatException e) {
-                // should not occur
-                log.error("Cannot obtain stream from resource: " + e.getMessage());
-            } catch (RepositoryException e) {
-                log.error("Cannot obtain stream from resource: " + e.getMessage());
+            }
+        } catch (ParserConfigurationException e) {
+            log.error("Error while spooling multivalued resource: " + e.getMessage());
+        } catch (ValueFormatException e) {
+            // should not occur
+            log.error("Cannot obtain stream from resource: " + e.getMessage());
+        } catch (RepositoryException e) {
+            log.error("Cannot obtain stream from resource: " + e.getMessage());
+        } finally {
+            if (in != null) {
+                in.close();
-        return in;
-     * Loops over the given <code>Set</code>s and alters the properties accordingly.
+     * Loops over the given <code>List</code> and alters the properties accordingly.
-     * @param setProperties
-     * @param removePropertyNames
+     * @param changeList
-     * @see DavResource#alterProperties(DavPropertySet, DavPropertyNameSet)
+     * @see DavResource#alterProperties(List)
-    public MultiStatusResponse alterProperties(DavPropertySet setProperties,
-                                DavPropertyNameSet removePropertyNames)
-        throws DavException {
-
-        // altering any properties fails if an attempt is made to remove a property
-        if (removePropertyNames != null && !removePropertyNames.isEmpty()) {
-            Iterator it = removePropertyNames.iterator();
-            while (it.hasNext()) {
+    public MultiStatusResponse alterProperties(List changeList) throws DavException {
+        Iterator it = changeList.iterator();
+        while (it.hasNext()) {
+            Object propEntry = it.next();
+            if (propEntry instanceof DavPropertyName) {
+                // altering any properties fails if an attempt is made to remove
+                // a property
+            } else if (propEntry instanceof DavProperty) {
+                DavProperty prop = (DavProperty) propEntry;
+                internalSetProperty(prop);
+            } else {
+                throw new IllegalArgumentException("unknown object in change list: " + propEntry.getClass().getName());
-
-        // only set/add >> existance of resource is checked inside internal method
-        DavPropertyIterator setIter = setProperties.iterator();
-        while (setIter.hasNext()) {
-            DavProperty prop = setIter.nextProperty();
-            internalSetProperty(prop);
-        }
-                    properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, contentType));
-                } // else: no contenttype for multivalue properties
+                } else {
+                    contentType = "text/xml";
+                }
+                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, contentType));
+                
-                    properties.add(new DefaultDavProperty(JCR_LENGTH, String.valueOf(prop.getLength()), true));
+                    long length = prop.getLength();
+                    properties.add(new DefaultDavProperty(JCR_LENGTH, String.valueOf(length), true));
+                    if (prop.getLength() > IOUtil.UNDEFINED_LENGTH) {
+                        properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLENGTH, String.valueOf(length)));
+                    }
