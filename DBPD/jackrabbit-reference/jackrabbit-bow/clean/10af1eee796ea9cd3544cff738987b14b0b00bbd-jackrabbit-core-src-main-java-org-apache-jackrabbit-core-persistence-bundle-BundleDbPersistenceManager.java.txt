JCR-1474 consistency check fails with derbypm


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@649733 13f79535-47bb-0310-9956-ffa450edef68

-     * @param minBlobSize the minimum blobsize in bytes.
+     * @param minBlobSize the minimum blob size in bytes.
-     * Indicates if the username should be included when retrieving the tables
+     * Indicates if the user name should be included when retrieving the tables
-     * @param id
-     *            node id for the bundle to check
-     * @param bundle
-     *            the bundle to check
-     * @param fix
-     *            if true, repair things that can be repaired
-     * @param modifications
-     *            if <code>fix == true</code>, collect the repaired
-     *            {@linkplain NodePropBundle bundles} here
+     * @param id node id for the bundle to check
+     * @param bundle the bundle to check
+     * @param fix if <code>true</code>, repair things that can be repaired
+     * @param modifications if <code>fix == true</code>, collect the repaired
+     * {@linkplain NodePropBundle bundles} here
-    protected void checkBundleConsistency(NodeId id, NodePropBundle bundle, boolean fix, Collection modifications) {
+    protected void checkBundleConsistency(NodeId id, NodePropBundle bundle,
+                                          boolean fix, Collection modifications) {
-            // skip check for system nodes (root, system root, version storage, nodetypes)
+            // skip check for system nodes (root, system root, version storage, node types)
-            DataInputStream din = null;
-                String sql;
-                if (getStorageModel() == SM_BINARY_KEYS) {
-                    sql = "select NODE_ID, BUNDLE_DATA from " + schemaObjectPrefix + "BUNDLE";
-                } else {
-                    sql = "select NODE_ID_HI, NODE_ID_LO, BUNDLE_DATA from " + schemaObjectPrefix + "BUNDLE";
-                }
+                String sql = "select count(*) from " + schemaObjectPrefix + "BUNDLE";
+                try {
+                    rs = stmt.getResultSet();
+                    if (!rs.next()) {
+                        log.error("Could not retrieve total number of bundles. empty result set.");
+                        return;
+                    }
+                    total = rs.getInt(1);
+                } finally {
+                    closeResultSet(rs);
+                }
+                if (getStorageModel() == SM_BINARY_KEYS) {
+                    sql = "select NODE_ID from " + schemaObjectPrefix + "BUNDLE";
+                } else {
+                    sql = "select NODE_ID_HI, NODE_ID_LO from " + schemaObjectPrefix + "BUNDLE";
+                }
+                stmt = connectionManager.executeStmt(sql, new Object[0]);
-                // iterate over all nodebundles in the db
+                // iterate over all node bundles in the db
-                    Blob blob;
-                        blob = rs.getBlob(2);
-                        blob = rs.getBlob(3);
-                    din = new DataInputStream(blob.getBinaryStream());
+
+                    // issuing 2nd statement to circumvent issue JCR-1474
+                    ResultSet bRs = null;
+                    byte[] data = null;
+                    try {
+                        Statement bSmt = connectionManager.executeStmt(bundleSelectSQL, getKey(id.getUUID()));
+                        bRs = bSmt.getResultSet();
+                        if (!bRs.next()) {
+                            throw new SQLException("bundle cannot be retrieved?");
+                        }
+                        Blob blob = bRs.getBlob(1);
+                        data = getBytes(blob);
+                    } finally {
+                        closeResultSet(bRs);
+                    }
+
+
-                        // check bundle will log any problems itself
+                        // checkBundle will log any problems itself
+                        DataInputStream din = new DataInputStream(new ByteArrayInputStream(data));
-                            din = new DataInputStream(blob.getBinaryStream());
+                            din = new DataInputStream(new ByteArrayInputStream(data));
-                        log.info(name + ": checked " + count + " bundles...");
+                        log.info(name + ": checked " + count + "/" + total + " bundles...");
-                IOUtils.closeQuietly(din);
-            ListNodeIdIterator it = new ListNodeIdIterator(result);
-            return it;
+            return new ListNodeIdIterator(result);
+     * Reads the blob's bytes and returns it. this is a helper method to
+     * circumvent issue JCR-1039 and JCR-1474
+     * @param blob blob to read
+     * @return bytes of the blob
+     * @throws SQLException if an SQL error occurs
+     * @throws IOException if an I/O error occurs
+     */
+    private byte[] getBytes(Blob blob) throws SQLException, IOException {
+        InputStream in = null;
+        try {
+            long length = blob.length();
+            byte[] bytes = new byte[(int) length];
+            in = blob.getBinaryStream();
+            int read, pos = 0;
+            while ((read = in.read(bytes, pos, bytes.length - pos)) > 0) {
+                pos += read;
+            }
+            return bytes;
+        } finally {
+            IOUtils.closeQuietly(in);
+        }
+    }
+
+    /**
-     *                           detailed informations about it (slower)
+     *                           detailed information about it (slower)
-        byte[] bytes = null;
-            // JCR-1039: pre-fetch/buffer blob data
-            long length = b.length();
-            bytes = new byte[(int) length];
-            in = b.getBinaryStream();
-            int read, pos = 0;
-            while ((read = in.read(bytes, pos, bytes.length - pos)) > 0) {
-                pos += read;
-            }
+            byte[] bytes = getBytes(b);
-            bundle.setSize(length);
+            bundle.setSize(bytes.length);
-     * @param se the exception
+     * @param e the exception
-    protected void logException(String message, SQLException se) {
+    protected void logException(String message, SQLException e) {
-        log.error("       Reason: " + se.getMessage());
-        log.error("   State/Code: " + se.getSQLState() + "/" + se.getErrorCode());
-        log.debug("   dump:", se);
+        log.error("       Reason: " + e.getMessage());
+        log.error("   State/Code: " + e.getSQLState() + "/" + e.getErrorCode());
+        log.debug("   dump:", e);
-     * This helper class is used by {@link BundleDbPersistenceManager#getAllNodeIds()}.
+     * This helper class is used by {@link BundleDbPersistenceManager#getAllNodeIds}.
