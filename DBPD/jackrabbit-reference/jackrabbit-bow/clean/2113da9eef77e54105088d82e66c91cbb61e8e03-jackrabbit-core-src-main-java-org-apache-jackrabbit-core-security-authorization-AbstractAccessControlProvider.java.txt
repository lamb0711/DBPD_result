JCR-1104 : JSR 283 support (security work in progress)

> introduce AccessManager.canRead(Path)
> retrieve Policy/ACE from ACProvider by Path rather than by ID
> add CompiledPermission.canReadAll for optimization
> fix ACLTemplate (various bugs) and add additional tests
> get rid of deprecated AccessManager.isGranted(ItemId, int) wherever possible
  and mark/simplify other usages
  - ItemManager
  - BatchedItemOperations
  - add TODO with QueryResultImpl that still uses the isGranted method.
  - EventConsumer: still uses isGranted. but various calls were replaced by private
    canRead -> simplify later optimization.
> remove unused ACLCache.java
> ItemManager:
  - make getItem consistent with itemExists (check perm even if obtained from cache)
  - replace getItemState by getItemData
  - get rid of duplicate code
  - add canRead(ItemData, Path) which is used (almost) everywhere and avoid permission
    check for NEW,non-protected items
  - consequently getItem(ItemId, boolean) is not required any more.
  - upon building LazyItemIterator for children: omit the duplicate permission
    check while building the set of childIds.
    the perm-check is executed upon the subsequent ItemManager.getItem call anyway 
> NodeImpl: createChildNode called ItemManager.getItem for an new item that has
  not yet been added as CNE to its parent -> replace by ItemManager.createItemInstance
  which omits the permission check.
> ItemImpl: 
  - fix javadoc
  - replace removed method ItemMgr.getItem(ItemId, boolean) by getItem(ItemId)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@649172 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeId;
+    private Principal everyone;
+    /**
+     * Simple test if the specified path points to an item that defines AC
+     * information.
+     * 
+     * @param absPath
+     * @return
+     */
+    protected abstract boolean isAcItem(Path absPath) throws RepositoryException;
+
+    /**
+     *
+     * @param principals
+     * @return
+     */
+    /**
+     *
+     * @return
+     */
+            public boolean canReadAll() throws RepositoryException {
+                return true;
+            }
-    protected static CompiledPermissions getReadOnlyPermissions() {
+    /**
+     * Simple implementation to determine if the given set of principals
+     * only will result in read-only access.
+     *
+     * @param principals
+     * @return true if the given set only contains the everyone group.
+     */
+    protected boolean isReadOnly(Set principals) {
+        // TODO: improve. need to detect if 'anonymous' is included.
+        return principals.size() == 1 && principals.contains(everyone);
+    }
+
+    /**
+     *
+     * @return
+     */
+    protected CompiledPermissions getReadOnlyPermissions() {
-                return permissions == Permission.READ;
+                if (isAcItem(absPath)) {
+                    // read-only never has read-AC permission
+                    return false;
+                } else {
+                    return permissions == Permission.READ;
+                }
-                return PrivilegeRegistry.READ;
+                if (isAcItem(absPath)) {
+                    return PrivilegeRegistry.NO_PRIVILEGE;
+                } else {
+                    return PrivilegeRegistry.READ;
+                }
+            }
+            public boolean canReadAll() throws RepositoryException {
+                return false;
+        everyone = session.getPrincipalManager().getEveryone();
+
-     * @see AccessControlProvider#getPolicy(NodeId)
+     * @see AccessControlProvider#getPolicy(Path)
+     * @param absPath
-    public AccessControlPolicy getPolicy(NodeId nodeId) throws ItemNotFoundException, RepositoryException {
+    public AccessControlPolicy getPolicy(Path absPath) throws ItemNotFoundException, RepositoryException {
-     * @see AccessControlProvider#getAccessControlEntries(NodeId)
+     * @see AccessControlProvider#getAccessControlEntries(Path)
+     * @param absPath
-    public AccessControlEntry[] getAccessControlEntries(NodeId nodeId) throws RepositoryException {
+    public AccessControlEntry[] getAccessControlEntries(Path absPath) throws RepositoryException {
