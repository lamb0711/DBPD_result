- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Tobias Strasser
- * @version $Revision: 1.12 $, $Date: 2004/09/14 08:50:07 $
-	    new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenUUID");
+            new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenUUID");
-	    new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenPrimaryType");
+            new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenPrimaryType");
-	    new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenMixinTypes");
+            new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenMixinTypes");
-	    new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenChildHistories");
+            new QName(NamespaceRegistryImpl.NS_JCR_URI, "frozenChildHistories");
-		      NodeState state, NodeDef definition,
-		      ItemLifeCycleListener[] listeners)
-	    throws RepositoryException {
-	super(itemMgr, session, id, state, definition, listeners);
+                      NodeState state, NodeDef definition,
+                      ItemLifeCycleListener[] listeners)
+            throws RepositoryException {
+        super(itemMgr, session, id, state, definition, listeners);
-	    throws RepositoryException {
-	if (isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
-	    internalSetProperty(VersionImpl.PROPNAME_FROZEN_UUID,
-		    InternalValue.create(node.getUUID()));
-	}
-	internalSetProperty(VersionImpl.PROPNAME_FROZEN_PRIMARY_TYPE,
-		InternalValue.create(node.getProperty(VersionImpl.PROPNAME_PRIMARYTYPE).getValue(),
-			PropertyType.NAME, session.getNamespaceResolver()));
+            throws RepositoryException {
+        if (isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
+            internalSetProperty(VersionImpl.PROPNAME_FROZEN_UUID,
+                    InternalValue.create(node.getUUID()));
+        }
+        internalSetProperty(VersionImpl.PROPNAME_FROZEN_PRIMARY_TYPE,
+                InternalValue.create(node.getProperty(VersionImpl.PROPNAME_PRIMARYTYPE).getValue(),
+                        PropertyType.NAME, session.getNamespaceResolver()));
-	if (node.hasProperty(VersionImpl.PROPNAME_MIXINTYPES)) {
-	    Value[] values = node.getProperty(VersionImpl.PROPNAME_MIXINTYPES).getValues();
-	    InternalValue[] ivalues = new InternalValue[values.length];
-	    for (int i = 0; i < values.length; i++) {
-		ivalues[i] = InternalValue.create(values[i], PropertyType.NAME,
-			session.getNamespaceResolver());
-	    }
-	    internalSetProperty(VersionImpl.PROPNAME_FROZEN_MIXIN_TYPES, ivalues);
-	}
+        if (node.hasProperty(VersionImpl.PROPNAME_MIXINTYPES)) {
+            Value[] values = node.getProperty(VersionImpl.PROPNAME_MIXINTYPES).getValues();
+            InternalValue[] ivalues = new InternalValue[values.length];
+            for (int i = 0; i < values.length; i++) {
+                ivalues[i] = InternalValue.create(values[i], PropertyType.NAME,
+                        session.getNamespaceResolver());
+            }
+            internalSetProperty(VersionImpl.PROPNAME_FROZEN_MIXIN_TYPES, ivalues);
+        }
-	// copy over the 'special' properties. please note, that they are not
-	// copied in the loop below, since they have a OPV of initialze or compute.
-	initFrozenState(node);
+        // copy over the 'special' properties. please note, that they are not
+        // copied in the loop below, since they have a OPV of initialze or compute.
+        initFrozenState(node);
-	// iterate over the properties
-	PropertyIterator piter = node.getProperties();
-	while (piter.hasNext()) {
-	    PropertyImpl prop = (PropertyImpl) piter.nextProperty();
-	    switch (prop.getDefinition().getOnParentVersion()) {
-		case OnParentVersionAction.ABORT:
-		    throw new RepositoryException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
-		case OnParentVersionAction.COMPUTE:
-		case OnParentVersionAction.IGNORE:
-		case OnParentVersionAction.INITIALIZE:
-		    break;
-		case OnParentVersionAction.VERSION:
-		case OnParentVersionAction.COPY:
-		    internalCopyPropertyFrom(prop);
-		    break;
-	    }
-	}
+        // iterate over the properties
+        PropertyIterator piter = node.getProperties();
+        while (piter.hasNext()) {
+            PropertyImpl prop = (PropertyImpl) piter.nextProperty();
+            switch (prop.getDefinition().getOnParentVersion()) {
+                case OnParentVersionAction.ABORT:
+                    throw new RepositoryException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
+                case OnParentVersionAction.COMPUTE:
+                case OnParentVersionAction.IGNORE:
+                case OnParentVersionAction.INITIALIZE:
+                    break;
+                case OnParentVersionAction.VERSION:
+                case OnParentVersionAction.COPY:
+                    internalCopyPropertyFrom(prop);
+                    break;
+            }
+        }
-	// iterate over the nodes
-	NodeIterator niter = node.getNodes();
-	while (niter.hasNext()) {
-	    NodeImpl child = (NodeImpl) niter.nextNode();
-	    switch (child.getDefinition().getOnParentVersion()) {
-		case OnParentVersionAction.ABORT:
-		    throw new RepositoryException("Checkin aborted due to OPV in " + child.safeGetJCRPath());
-		case OnParentVersionAction.COMPUTE:
-		case OnParentVersionAction.IGNORE:
-		case OnParentVersionAction.INITIALIZE:
-		    break;
-		case OnParentVersionAction.VERSION:
-		    if (child.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
-			version(child);
-		    }
-		    // else ignore
-		    break;
-		case OnParentVersionAction.COPY:
-		    copy(child);
-		    break;
-	    }
-	}
+        // iterate over the nodes
+        NodeIterator niter = node.getNodes();
+        while (niter.hasNext()) {
+            NodeImpl child = (NodeImpl) niter.nextNode();
+            switch (child.getDefinition().getOnParentVersion()) {
+                case OnParentVersionAction.ABORT:
+                    throw new RepositoryException("Checkin aborted due to OPV in " + child.safeGetJCRPath());
+                case OnParentVersionAction.COMPUTE:
+                case OnParentVersionAction.IGNORE:
+                case OnParentVersionAction.INITIALIZE:
+                    break;
+                case OnParentVersionAction.VERSION:
+                    if (child.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
+                        version(child);
+                    }
+                    // else ignore
+                    break;
+                case OnParentVersionAction.COPY:
+                    copy(child);
+                    break;
+            }
+        }
-	// create nt:frozenVersionableChild (not defined yet in spec)
-	NodeTypeImpl nt = session.getNodeTypeManager().getNodeType(NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD);
-	QName name = node.getQName();
-	NodeDefImpl def = getApplicableChildNodeDef(name, nt.getQName());
-	NodeImpl newChild = createChildNode(name, def, nt, null);
-	newChild.internalSetProperty(VersionImpl.PROPNAME_VERSION_HISTORY,
-		InternalValue.create(new UUID(node.getVersionHistory().getUUID())));
-	newChild.internalSetProperty(VersionImpl.PROPNAME_BASE_VERSION,
-		InternalValue.create(new UUID(node.getBaseVersion().getUUID())));
+        // create nt:frozenVersionableChild (not defined yet in spec)
+        NodeTypeImpl nt = session.getNodeTypeManager().getNodeType(NodeTypeRegistry.NT_FROZEN_VERSIONABLE_CHILD);
+        QName name = node.getQName();
+        NodeDefImpl def = getApplicableChildNodeDef(name, nt.getQName());
+        NodeImpl newChild = createChildNode(name, def, nt, null);
+        newChild.internalSetProperty(VersionImpl.PROPNAME_VERSION_HISTORY,
+                InternalValue.create(new UUID(node.getVersionHistory().getUUID())));
+        newChild.internalSetProperty(VersionImpl.PROPNAME_BASE_VERSION,
+                InternalValue.create(new UUID(node.getBaseVersion().getUUID())));
-	NodeTypeImpl nt = session.getNodeTypeManager().getNodeType(NodeTypeRegistry.NT_FROZEN);
-	QName name = node.getQName();
-	NodeDefImpl def = getApplicableChildNodeDef(name, nt.getQName());
-	FrozenNode newChild = (FrozenNode) createChildNode(name, def, nt, null);
-	newChild.createFrozenState((NodeImpl) node);
+        NodeTypeImpl nt = session.getNodeTypeManager().getNodeType(NodeTypeRegistry.NT_FROZEN);
+        QName name = node.getQName();
+        NodeDefImpl def = getApplicableChildNodeDef(name, nt.getQName());
+        FrozenNode newChild = (FrozenNode) createChildNode(name, def, nt, null);
+        newChild.createFrozenState((NodeImpl) node);
