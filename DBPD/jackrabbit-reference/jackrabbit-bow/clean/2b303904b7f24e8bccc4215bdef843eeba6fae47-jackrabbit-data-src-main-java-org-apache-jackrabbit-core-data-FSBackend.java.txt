JCR-4018: Consistent Async Upload Executor handling in Backend implementations

Slightly modified patch from Woonsan Ko

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1760825 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.concurrent.Executor;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadPoolExecutor;
-import org.apache.jackrabbit.core.data.util.NamedThreadFactory;
-public class FSBackend implements Backend {
+public class FSBackend extends AbstractBackend {
-    private CachingDataStore store;
-
-    private String homeDir;
-
-    private String config;
-
-    private Executor asyncWriteExecuter;
-
+        super.init(store, homeDir, config);
-        this.config = config;
-        this.store = store;
-        this.homeDir = homeDir;
+        setDataStore(store);
+        setHomeDir(homeDir);
-                + config + ". [" + FS_BACKEND_PATH + "] property not found.");
+                + getConfig() + ". [" + FS_BACKEND_PATH + "] property not found.");
-        asyncWriteExecuter = createAsyncWriteExecutor();
-
-        asyncWriteExecuter.execute(new Runnable() {
+        getAsyncWriteExecutor().execute(new Runnable() {
-            asyncWriteExecuter.execute(new Runnable() {
+            getAsyncWriteExecutor().execute(new Runnable() {
-    public void close() throws DataStoreException {
-        Executor asyncExecutor = getAsyncWriteExecutor();
-
-        if (asyncExecutor != null && asyncExecutor instanceof ExecutorService) {
-            ((ExecutorService) asyncExecutor).shutdownNow();
-        }
-    }
-
-    @Override
-     * Creates a {@link Executor}.
-     * This method is invoked during the initialization for asynchronous write/touch job executions.
-     * @return a {@link Executor}
-     */
-    protected Executor createAsyncWriteExecutor() {
-        Executor asyncExecutor;
-
-        if (store.getAsyncUploadLimit() > 0) {
-            asyncExecutor = Executors.newFixedThreadPool(10,
-                    new NamedThreadFactory("fs-write-worker"));
-        } else {
-            asyncExecutor = new ImmediateExecutor();
-        }
-
-        return asyncExecutor;
-    }
-
-    /**
-     * Returns ThreadPoolExecutor used to execute asynchronous write or touch jobs.
-     * @return ThreadPoolExecutor used to execute asynchronous write or touch jobs
-     */
-    protected Executor getAsyncWriteExecutor() {
-        return asyncWriteExecuter;
-    }
-
-    /**
-                    if (store.confirmDelete(id)) {
-                        store.deleteFromCache(id);
+                    if (getDataStore().confirmDelete(id)) {
+                        getDataStore().deleteFromCache(id);
-
-    /**
-     * This class implements {@link Executor} interface to run {@code command} right away,
-     * resulting in non-asynchronous mode executions.
-     */
-    private class ImmediateExecutor implements Executor {
-        @Override
-        public void execute(Runnable command) {
-            command.run();
-        }
-    }
-
