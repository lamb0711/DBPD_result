re-implemented handling of values on import to allow import of large binary properties 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160072 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.InternalValue;
+import java.io.IOException;
+import java.io.Reader;
-    public static final int IMPORT_UUID_CREATE_NEW = Workspace.IMPORT_UUID_CREATE_NEW;
-    public static final int IMPORT_UUID_COLLISION_REMOVE_EXISTING = Workspace.IMPORT_UUID_COLLISION_REMOVE_EXISTING;
-    public static final int IMPORT_UUID_COLLISION_REPLACE_EXISTING = Workspace.IMPORT_UUID_COLLISION_REPLACE_EXISTING;
-    public static final int IMPORT_UUID_COLLISION_THROW = Workspace.IMPORT_UUID_COLLISION_THROW;
+    public static final int IMPORT_UUID_CREATE_NEW =
+            Workspace.IMPORT_UUID_CREATE_NEW;
+    public static final int IMPORT_UUID_COLLISION_REMOVE_EXISTING =
+            Workspace.IMPORT_UUID_COLLISION_REMOVE_EXISTING;
+    public static final int IMPORT_UUID_COLLISION_REPLACE_EXISTING =
+            Workspace.IMPORT_UUID_COLLISION_REPLACE_EXISTING;
+    public static final int IMPORT_UUID_COLLISION_THROW =
+            Workspace.IMPORT_UUID_COLLISION_THROW;
-        private InternalValue[] values;
+        private TextValue[] values;
-        public PropInfo(QName name, int type, InternalValue[] values) {
+        public PropInfo(QName name, int type, TextValue[] values) {
-        public void setValues(InternalValue[] values) {
+        public void setValues(TextValue[] values) {
-        public InternalValue[] getValues() {
+        public TextValue[] getValues() {
+
+    /**
+     * <code>TextValue</code> represents a serialized property value read
+     * from a System or Document View XML document.
+     */
+    public interface TextValue {
+        /**
+         * Returns the length of the serialized value.
+         * @return the length of the serialized value
+         * @throws IllegalStateException if the serialized value is not
+         *                               available anymore (e.g. because it
+         *                               been discarded)
+         * @throws IOException if an I/O error occurs
+         */
+        public long length() throws IllegalStateException, IOException;
+
+        /**
+         * Retrieves the serialized value.
+         * @return the serialized value
+         * @throws IllegalStateException if the serialized value is not
+         *                               available anymore (e.g. because it
+         *                               been discarded)
+         * @throws IOException if an I/O error occurs
+         */
+        public String retrieve() throws IllegalStateException, IOException;
+
+        /**
+         * Returns a <code>Reader</code> for reading the serialized value.
+         * @return a <code>Reader</code> for reading the serialized value.
+         * @throws IllegalStateException if the serialized value is not
+         *                               available anymore (e.g. because it
+         *                               been discarded)
+         * @throws IOException if an I/O error occurs
+         */
+        public Reader reader() throws IllegalStateException, IOException;
+    }
