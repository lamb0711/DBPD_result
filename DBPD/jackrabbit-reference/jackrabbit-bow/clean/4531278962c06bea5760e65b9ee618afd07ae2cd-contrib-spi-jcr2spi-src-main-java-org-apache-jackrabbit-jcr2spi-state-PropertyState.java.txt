work in progress

- LazyItemIterator: fixing wrong usage in ItemManagerImpl
- LazyItemIterator: removing TODOs and workaround

- ItemStateFactory: remove unused method 
  'createPropertyState(PropertyId propertyId, ItemStateManager ism)'

- TransientItemStateFactory: slightly modify methods, adding additional
  parameters that are already known upon creation of the states and must
  not be changed later on (-> removing setters on NodeState/PropertyState)

- TransientItemStateManager:
  > rename create-methods to createNew...
  > adjust parameters according to modifications in TransientISF

- NodeState:
  > set QNodeDefinition upon creation
  > modify 'moveChildNodeEntry': additing 'newDefinition' parameter
  > remove 'setParent'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- PropertyState:
  > set QPropertyDefinition upon creation
  > 'multiValued' field is therefore redundant -> remove
  > remove 'setMultiValued'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- SetPropertyValue: 'isMultiValued()' is redundant. removed and replaced
  usage with 'getPropertyState().isMultiValued()'

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432630 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.RepositoryException;
-import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeConflictException;
-import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeRegistry;
-import org.apache.jackrabbit.jcr2spi.nodetype.EffectiveNodeType;
-     * Flag indicating if this is a multivalue property
-     */
-    private boolean multiValued;
-
-    /**
-     * @param overlayedState the backing property state being overlayed
-     * @param initialStatus  the initial status of the property state object
-     * @param isTransient    flag indicating whether this state is transient or not
+     * @param overlayedState
+     * @param parent
+     * @param initialStatus
+     * @param isTransient
+     * @param idFactory
-     * @param name          the name of the property
-     * @param initialStatus the initial status of the property state object
-     * @param isTransient   flag indicating whether this state is transient or
-     *                      not
+     * @param name
+     * @param parent
+     * @param definition
+     * @param initialStatus
+     * @param isTransient
+     * @param idFactory
-    protected PropertyState(QName name, NodeState parent, int initialStatus,
+    protected PropertyState(QName name, NodeState parent, QPropertyDefinition definition, int initialStatus,
+        this.def = definition;
+
-        multiValued = false;
-            multiValued = propState.multiValued;
-        return multiValued;
+        return def.isMultiple();
-     * Sets the flag indicating whether this property is multi-valued.
-     *
-     * @param multiValued flag indicating whether this property is multi-valued
-     */
-    void setMultiValued(boolean multiValued) {
-        this.multiValued = multiValued;
-    }
-
-
-    /**
-     * property state or <code>null</code> if the definition has not been
-     * set before (i.e. the corresponding item has not been accessed before).
+     * property state. Note that the definition has been set upon creation of
+     * this <code>PropertyState</code>.
-     * @see #getDefinition(NodeTypeRegistry) for the corresponding method
-     * that never returns <code>null</code>.
-     * Returns the definition applicable to this property state. Since the definition
-     * is not defined upon state creation this state may have to retrieve
-     * the definition from the given <code>NodeTypeRegistry</code> first.
-     *
-     * @param ntRegistry
-     * @return definition of this state
-     * @see #getDefinition()
-     */
-    public QPropertyDefinition getDefinition(NodeTypeRegistry ntRegistry)
-        throws RepositoryException {
-        if (def == null) {
-            try {
-                NodeState parentState = getParent();
-                if (parentState == null) {
-                    String msg = "Internal error: cannot determine definition for orphaned state.";
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
-                }
-                EffectiveNodeType ent = ntRegistry.getEffectiveNodeType(parentState.getNodeTypeNames());
-                setDefinition(ent.getApplicablePropertyDefinition(getQName(), getType(), isMultiValued()));
-            } catch (NodeTypeConflictException e) {
-                String msg = "internal error: failed to build effective node type.";
-                log.debug(msg);
-                throw new RepositoryException(msg, e);
-            }
-        }
-        return def;
-    }
-
-    /**
-     * Sets the id of the definition applicable to this property state.
-     *
-     * @param def the id of the definition
-     */
-    void setDefinition(QPropertyDefinition def) {
-        this.def = def;
-    }
-
-    /**
