JCR-256: Improve jcr decorator in jcr-ext
- added decoration for all required jcr interfaces
- added more factory methods to DecoratorFactory
- renamed SimpleDecoratorFactory to DefaultDecoratorFactory
- removed ChainedDecoratorFactory and ChainedItemDecorator
- added sample decorator: TrussDecoratorFactory

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@326437 13f79535-47bb-0310-9956-ffa450edef68

- * TODO
-public class ItemDecorator implements Item {
+public class ItemDecorator extends AbstractDecorator implements Item {
-    private DecoratorFactory factory;
+    /**
+     * The underlying item to decorate.
+     */
+    protected final Item item;
-    private Session session;
-
-    private Item item;
-        this.factory = factory;
-        this.session = session;
+        super(factory, session);
+     * Returns the underlying item that <code>this</code>
+     * <code>ItemDecorator</code> decorates.
+     *
+     * @return the underlying item.
+     */
+    public Item unwrap() {
+        return item;
+    }
+
+    /**
+     * Returns the underlying <code>item</code> of the <code>item</code>
+     * that decorates it. Unwrapping <code>null</code> returns <code>null</code>.
+     *
+     * @param item decorates the underlying item.
+     * @return the underlying item.
+     * @throws IllegalStateException if <code>item</code> is not of type
+     *                               {@link ItemDecorator}.
+     */
+    public static Item unwrap(Item item) {
+        if (item == null) {
+            return null;
+        }
+        if (item instanceof ItemDecorator) {
+            item = ((ItemDecorator) item).unwrap();
+        } else {
+            throw new IllegalStateException("item is not of type ItemDecorator");
+        }
+        return item;
+    }
+
+    /**
-    public boolean isSame(Item otherItem) {
-        // TODO Auto-generated method stub
-        return false;
+    public boolean isSame(Item otherItem) throws RepositoryException {
+        return item.isSame(unwrap(otherItem));
-        item.accept(visitor);
+        item.accept(factory.getItemVisitorDecorator(session, visitor));
+    public boolean equals(Object obj) {
+        if (obj instanceof ItemDecorator) {
+            ItemDecorator other = (ItemDecorator)obj;
+            return item.equals(other.unwrap());
+        }
+        return false;
+    }
+
+    public int hashCode() {
+        return item.hashCode();
+    }
