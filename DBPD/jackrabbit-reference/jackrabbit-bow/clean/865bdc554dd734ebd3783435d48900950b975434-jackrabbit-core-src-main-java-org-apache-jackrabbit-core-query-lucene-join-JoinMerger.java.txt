JCR-2715: Improved join query performance

Optimize handling of cases where the other join source produces no results.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1023801 13f79535-47bb-0310-9956-ffa450edef68

+        RowIterator joinRows;
-            return mergeRight(map, rightRows);
+            joinRows = mergeRight(map, rightRows);
-            return mergeLeft(leftRows, map, outer);
+            joinRows = mergeLeft(leftRows, map, outer);
+        return new SimpleQueryResult(columnNames, selectorNames, joinRows);
-    private QueryResult mergeLeft(
+    private RowIterator mergeLeft(
-        System.out.println("Available right matches " + rightRowMap.keySet());
-        List<Row> rows = new ArrayList<Row>();
-        for (Row leftRow : new RowIterable(leftRows)) {
-            System.out.println("Finding matchers for left row " + leftRow);
-            for (String value : getLeftValues(leftRow)) {
-                System.out.println(" - checking for matches for " + value);
-                List<Row> rightRows = rightRowMap.get(value);
-                if (rightRows != null) {
-                    for (Row rightRow : rightRows) {
-                        System.out.println(" -> found matching row " + rightRow);
-                        rows.add(mergeRow(leftRow, rightRow));
+        if (!rightRowMap.isEmpty()) {
+            List<Row> rows = new ArrayList<Row>();
+            for (Row leftRow : new RowIterable(leftRows)) {
+                for (String value : getLeftValues(leftRow)) {
+                    List<Row> rightRows = rightRowMap.get(value);
+                    if (rightRows != null) {
+                        for (Row rightRow : rightRows) {
+                            rows.add(mergeRow(leftRow, rightRow));
+                        }
+                    } else if (outer) {
+                        rows.add(mergeRow(leftRow, null));
-                } else if (outer) {
-                    rows.add(mergeRow(leftRow, null));
+            return new RowIteratorAdapter(rows);
+        } else if (outer) {
+            return new RowIteratorAdapter(leftRows) {
+                @Override
+                public Object next() {
+                    return mergeRow((Row) super.next(), null);
+                }
+            };
+        } else {
+            return new RowIteratorAdapter(Collections.emptySet());
-        return new SimpleQueryResult(
-                columnNames, selectorNames, new RowIteratorAdapter(rows));
-    private QueryResult mergeRight(
+    private RowIterator mergeRight(
-        List<Row> rows = new ArrayList<Row>();
-        for (Row rightRow : new RowIterable(rightRows)) {
-            for (String value : getRightValues(rightRow)) {
-                List<Row> leftRows = leftRowMap.get(value);
-                if (leftRows != null) {
-                    for (Row leftRow : leftRows) {
-                        rows.add(mergeRow(leftRow, rightRow));
+        if (leftRowMap.isEmpty()) {
+            List<Row> rows = new ArrayList<Row>();
+            for (Row rightRow : new RowIterable(rightRows)) {
+                for (String value : getRightValues(rightRow)) {
+                    List<Row> leftRows = leftRowMap.get(value);
+                    if (leftRows != null) {
+                        for (Row leftRow : leftRows) {
+                            rows.add(mergeRow(leftRow, rightRow));
+                        }
+                    } else {
+                        rows.add(mergeRow(null, rightRow));
-                } else {
-                    rows.add(mergeRow(null, rightRow));
+            return new RowIteratorAdapter(rows);
+        } else {
+            return new RowIteratorAdapter(rightRows) {
+                @Override
+                public Object next() {
+                    return mergeRow(null, (Row) super.next());
+                }
+            };
-        return new SimpleQueryResult(
-                columnNames, selectorNames, new RowIteratorAdapter(rows));
-     * @throws RepositoryException if the rows can't be joined
-    private Row mergeRow(Row left, Row right) throws RepositoryException {
+    private Row mergeRow(Row left, Row right) {
-                columns, evaluator, left, leftSelectors, right, rightSelectors);
+                columns, evaluator,
+                left, leftSelectors, right, rightSelectors);
