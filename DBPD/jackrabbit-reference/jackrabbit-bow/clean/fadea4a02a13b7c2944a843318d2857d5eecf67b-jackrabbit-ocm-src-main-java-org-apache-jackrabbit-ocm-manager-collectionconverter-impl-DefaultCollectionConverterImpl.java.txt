Patch provided by Boni Gopalan for issue JCR-1784 (The UUID of the collection elements changes on update). I didn't modify the class AbstractMapperImpl. This modification is not necessary.
I also added unit tests for the annotation support. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@702237 13f79535-47bb-0310-9956-ffa450edef68

-        if (!elementClassDescriptor.hasIdField()) {
+        if (!elementClassDescriptor.hasIdField() && !elementClassDescriptor.hasUUIdField()) {
+        List<String> validUuidsForTheNode = new ArrayList<String>();
-
-
-            if (elementClassDescriptor.hasIdField()) {
+            
+            if (elementClassDescriptor.hasUUIdField()){
+            	elementJcrName = collectionDescriptor.getJcrElementName();
+            	elementJcrName = (elementJcrName == null)? COLLECTION_ELEMENT_NAME : elementJcrName;
+                String uuidFieldName = elementClassDescriptor.getUuidFieldDescriptor().getFieldName();
+                Object objUuid = ReflectionUtils.getNestedProperty(item, uuidFieldName);
+            	String currentItemUuid = (objUuid == null) ? null : objUuid.toString();
+            	if (currentItemUuid != null){
+            		//The Node already exists so we need to update the existing node 
+            		//rather than to replace it.
+            		Node nodeToUpdate = collectionNode.getSession().getNodeByUUID(currentItemUuid);
+            		objectConverter.update(session, currentItemUuid, item);
+            		validUuidsForTheNode.add(currentItemUuid);
+            	}
+            	else{
+            		objectConverter.insert(session, collectionNode, elementJcrName, item);
+            		validUuidsForTheNode.add(ReflectionUtils.getNestedProperty(item, uuidFieldName).toString());
+            	}
+            	
+            }
+            else if (elementClassDescriptor.hasIdField()) {
+        if (elementClassDescriptor.hasUUIdField()) {
+            NodeIterator nodeIterator = collectionNode.getNodes();
+            List<Node> removeNodes = new ArrayList<Node>();
+            while (nodeIterator.hasNext()) {
+            	Node currentNode = nodeIterator.nextNode();
+            	if (!validUuidsForTheNode.contains(currentNode.getUUID())) {
+                    removeNodes.add(currentNode);
+                }
+            }
+            for (Node aNode : removeNodes){
+            	aNode.remove();
+            }
+            return;
+        }
+        
+        // Delete JCR nodes that are not present in the collection
-}
+}
