Implement Serializable for QValue classes. Added test case for binary QValue.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@512786 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Serializable;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
-    private static class QValueImpl implements QValue {
+    private static class QValueImpl implements QValue, Serializable {
+
+        //---------------------------------------------------< Serializable >---
+
-    private static class BinaryQValue implements QValue {
+    private static class BinaryQValue implements QValue, Serializable {
-        private final File file;
+        private transient File file;
-        private final boolean temp;
+        private transient boolean temp;
-        private String text = null;
+        private transient String text = null;
+
+        //-----------------------------< Serializable >-------------------------
+
+        private void writeObject(ObjectOutputStream out)
+                throws IOException {
+            out.defaultWriteObject();
+            // write hasFile marker
+            out.writeBoolean(file != null);
+            // then write file if necessary
+            if (file != null) {
+                byte[] buffer = new byte[4096];
+                int bytes;
+                InputStream stream = new FileInputStream(file);
+                while ((bytes = stream.read(buffer)) >= 0) {
+                    // Write a segment of the input stream
+                    if (bytes > 0) {
+                        // just to ensure that no 0 is written
+                        out.writeInt(bytes);
+                        out.write(buffer, 0, bytes);
+                    }
+                }
+                // Write the end of stream marker
+                out.writeInt(0);
+                // close stream
+                stream.close();
+            }
+        }
+
+        private void readObject(ObjectInputStream in)
+                throws IOException, ClassNotFoundException {
+            in.defaultReadObject();
+            boolean hasFile = in.readBoolean();
+            if (hasFile) {
+                file = File.createTempFile("binary-qvalue", "bin");
+
+                OutputStream out = new FileOutputStream(file);
+                byte[] buffer = new byte[4096];
+                for (int bytes = in.readInt(); bytes > 0; bytes = in.readInt()) {
+                    if (buffer.length < bytes) {
+                        buffer = new byte[bytes];
+                    }
+                    in.readFully(buffer, 0, bytes);
+                    out.write(buffer, 0, bytes);
+                }
+                out.close();
+            }
+            // deserialized value is always temp
+            temp = true;
+        }
