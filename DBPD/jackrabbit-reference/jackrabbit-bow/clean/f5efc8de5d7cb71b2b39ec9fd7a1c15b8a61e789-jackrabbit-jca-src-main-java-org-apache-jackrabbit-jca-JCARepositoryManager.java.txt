JCR-555: Improved reusability of the JCA package

Merge the classpath: repository config code from jca to core. Streamline the remaining jca code.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@923678 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.io.IOUtils;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Collection;
-import java.util.Iterator;
-    private final Map<Reference, Reference> references;
+    private final Map<Map<String, String>, Repository> repositories =
+        new HashMap<Map<String, String>, Repository>();
-        this.references = new HashMap<Reference, Reference>();
-     * @param homeDir   The location of the repository.
-     * @param configFile The path to the repository configuration file. If the file is located on
-     *                   the classpath, the path should be prepended with
-     *                   JCARepositoryManager.CLASSPATH_CONFIG_PREFIX.
+     * @param parameters repository parameters
-    public Repository createRepository(String homeDir, String configFile)
-            throws RepositoryException {
-        Reference ref = getReference(homeDir, configFile);
-        return ref.create();
+    public synchronized Repository createRepository(
+            Map<String, String> parameters) throws RepositoryException {
+        Repository repository = repositories.get(parameters);
+        if (repository == null) {
+            repository =  JcrUtils.getRepository(parameters);
+            repositories.put(parameters, repository);
+        }
+        return repository;
-    public void shutdown() {
-        Collection<Reference> references = this.references.values();
-        Iterator<Reference> iter = references.iterator();
-        while (iter.hasNext()) {
-            Reference ref = iter.next();
-            ref.shutdown();
+    public synchronized void shutdown() {
+        for (Repository repository : repositories.values()) {
+            if (repository instanceof JackrabbitRepository) {
+                ((JackrabbitRepository) repository).shutdown();
+            }
-        this.references.clear();
-    }
-
-    /**
-     * Return the reference.
-     *
-     * @param homeDir   The location of the repository.
-     * @param configFile The path to the repository configuration file.
-     */
-    private synchronized Reference getReference(String homeDir, String configFile) {
-        Reference ref = new Reference(homeDir, configFile);
-        Reference other = references.get(ref);
-
-        if (other == null) {
-            references.put(ref, ref);
-            return ref;
-        } else {
-            return other;
-        }
+        repositories.clear();
-    /**
-     * Repository reference implementation.
-     */
-    private final class Reference {
-        /**
-         * Home directory.
-         */
-        private final String homeDir;
-
-        /**
-         * Configuration file.
-         *
-         * Configuration files located on the classpath begin with
-         * JCARepositoryManager.CLASSPATH_CONFIG_PREFIX.
-         */
-        private String configFile;
-
-        /**
-         * Repository instance.
-         */
-        private Repository repository;
-
-        /**
-         * Construct the manager.
-         */
-        private Reference(String homeDir, String configFile) {
-            this.homeDir = homeDir;
-            this.configFile = configFile;
-            this.repository = null;
-        }
-
-        /**
-         * Return the repository.
-         */
-        public Repository create() throws RepositoryException {
-            if (repository == null) {
-                File dir = new File(homeDir);
-                dir.mkdirs();
-
-                File xml;
-                if (configFile.startsWith(CLASSPATH_CONFIG_PREFIX)) {
-                    String source =
-                        configFile.substring(CLASSPATH_CONFIG_PREFIX.length());
-                    xml = new File(homeDir, "repository.xml");
-                    copyConfigFile(source, xml);
-                } else {
-                    xml = new File(configFile);
-                }
-
-                Map<String, String> parameters = new HashMap<String, String>();
-                parameters.put(
-                        "org.apache.jackrabbit.repository.home",
-                        dir.getPath());
-                parameters.put(
-                        "org.apache.jackrabbit.repository.conf",
-                        xml.getPath());
-                repository = JcrUtils.getRepository(parameters);
-            }
-
-            return repository;
-        }
-
-        private void copyConfigFile(String source, File target)
-                throws RepositoryException {
-            ClassLoader cl = Thread.currentThread().getContextClassLoader();
-            if (cl == null) {
-                cl = this.getClass().getClassLoader();
-            }
-
-            InputStream input = cl.getResourceAsStream(source);
-            if (input != null) {
-                try {
-                    try {
-                        OutputStream output = new FileOutputStream(target);
-                        try {
-                            IOUtils.copy(input, output);
-                        } finally {
-                            output.close();
-                        }
-                    } finally {
-                        input.close();
-                    }
-                } catch (IOException e) {
-                    throw new RepositoryException(
-                            "Failed to copy configuration to " + target, e);
-                }
-            } else {
-                throw new RepositoryException(
-                        "Repository configuration not found: " + source);
-            }
-        }
-
-        /**
-         * Shutdown the repository.
-         */
-        public void shutdown() {
-            if (repository instanceof JackrabbitRepository) {
-                ((JackrabbitRepository) repository).shutdown();
-            }
-        }
-
-        /**
-         * Return the hash code.
-         */
-        public int hashCode() {
-            int result = homeDir != null ? homeDir.hashCode() : 0;
-            result = 37 * result + (configFile != null ? configFile.hashCode() : 0);
-            return result;
-        }
-
-        /**
-         * Return true if equals.
-         */
-        public boolean equals(Object o) {
-            if (o == this) {
-                return true;
-            } else if (o instanceof Reference) {
-                return equals((Reference) o);
-            } else {
-                return false;
-            }
-        }
-
-        /**
-         * Return true if equals.
-         */
-        private boolean equals(Reference o) {
-            return equals(homeDir, o.homeDir)
-                && equals(configFile, o.configFile);
-        }
-
-        /**
-         * Return true if equals.
-         */
-        private boolean equals(String s1, String s2) {
-            if (s1 == s2) {
-                return true;
-            } else if ((s1 == null) || (s2 == null)) {
-                return false;
-            } else {
-                return s1.equals(s2);
-            }
-        }
-    }
-
-    public void autoShutdownRepository(String homeDir, String configFile) {
+    public synchronized void autoShutdownRepository(
+            Map<String, String> parameters) {
-            Reference ref = getReference(homeDir, configFile);
-            ref.shutdown();
+            Repository repository = repositories.get(parameters);
+            if (repository instanceof JackrabbitRepository) {
+                ((JackrabbitRepository) repository).shutdown();
+            }
