JCR-2111: JSR 283 Node Identifier

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@774702 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.Text;
-    /**
-     * Subclassed need to define a PathFactory used to create IDs
-     *
-     * @return a implementation of <code>PathFactory</code>.
-     */
-    protected abstract PathFactory getPathFactory();
+    private static final char DELIMITER = '@';
+    //----------------------------------------------------------< IdFactory >---
+    /**
+     * @see IdFactory#toJcrIdentifier(NodeId)
+     */
+    public String toJcrIdentifier(NodeId nodeId) {
+        // TODO improve
+        String uniqueId = nodeId.getUniqueID();
+        Path path = nodeId.getPath();
+        if (path == null) {
+            return uniqueId;
+        } else if (uniqueId == null) {
+            return DELIMITER + path.toString();
+        } else {
+            StringBuffer bf = new StringBuffer();
+            bf.append(Text.escape(uniqueId, DELIMITER));
+            bf.append(DELIMITER);
+            bf.append(path.toString());
+            return bf.toString();
+        }
+    }
+
+    /**
+     * @see IdFactory#fromJcrIdentifier(String)
+     */
+    public NodeId fromJcrIdentifier(String jcrIdentifier) {
+        // TODO improve
+        int pos = jcrIdentifier.indexOf(DELIMITER);
+        switch (pos) {
+            case -1:
+                return createNodeId(jcrIdentifier);
+            case 0:
+                return createNodeId((String) null, getPathFactory().create(jcrIdentifier.substring(1)));
+            default:
+                String uniqueId = Text.unescape(jcrIdentifier.substring(0, pos), DELIMITER);
+                Path path = getPathFactory().create(jcrIdentifier.substring(pos+1));
+                return createNodeId(uniqueId, path);
+        }        
+    }
+
+    //--------------------------------------------------------------------------
+    /**
+     * Subclassed need to define a PathFactory used to create IDs
+     *
+     * @return a implementation of <code>PathFactory</code>.
+     */
+    protected abstract PathFactory getPathFactory();
+
