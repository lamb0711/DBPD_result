Add better suppport of Map. From now, it is not necessary to use an id for object that will be used inside a map. 

See the AnnotationHashMapTest to get an example. 



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689932 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ItemExistsException;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.lock.LockException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.version.VersionException;
-        Iterator collectionIterator = objects.getIterator();
+        if (objects instanceof ManageableCollection)
+           insertManageableCollection(session, objects, collectionNode, elementClassDescriptor);
+        else 
+           insertManageableMap(session, objects, collectionNode);
+        	
+    }
+
+	private void insertManageableCollection(Session session,
+			ManageableObjects objects, Node collectionNode,
+			ClassDescriptor elementClassDescriptor) {
+		Iterator collectionIterator = objects.getIterator();
-    }
+	}
+	
+	private void insertManageableMap(Session session, ManageableObjects objects, Node collectionNode) {
+
+		
+		Map map = (Map) objects.getObjects(); 
+		for (Object key : map.keySet())
+		{
+			Object item = map.get(key);
+			objectConverter.insert(session, collectionNode, key.toString(), item);
+			
+		}
+	}
+    	if (objects instanceof ManageableCollection)
+           updateManagableCollection(session, parentNode, collectionDescriptor, objects, jcrName);
+    	else
+    	   updateManagableMap(session, parentNode, collectionDescriptor, objects, jcrName);
+    		
+    }
-        ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass( ReflectionUtils.forName(collectionDescriptor.getElementClassName()));
+	private void updateManagableCollection(Session session, Node parentNode,
+			CollectionDescriptor collectionDescriptor,
+			ManageableObjects objects, String jcrName)
+			throws PathNotFoundException, RepositoryException,
+			VersionException, LockException, ConstraintViolationException,
+			ItemExistsException {
+		ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass( ReflectionUtils.forName(collectionDescriptor.getElementClassName()));
-        //  If the collection elements have not an id, it is not possible to find the matching JCR nodes => delete the complete collection
+        //  If the collection elements have not an id, it is not possible to find the matching JCR nodes 
+        //  => delete the complete collection
-    }
+	}
+	
+	
+	private void updateManagableMap(Session session, Node parentNode,
+									CollectionDescriptor collectionDescriptor,
+									ManageableObjects objects, String jcrName)
+									throws PathNotFoundException, RepositoryException,
+									VersionException, LockException, ConstraintViolationException,
+									ItemExistsException {
+		
+		
+		ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass( ReflectionUtils.forName(collectionDescriptor.getElementClassName()));
+        Node collectionNode = parentNode.getNode(jcrName);
+
+        Map map = (Map) objects.getObjects(); 
+        Map updatedItems = new HashMap();
+		for (Object key : map.keySet())
+		{
+			Object item = map.get(key);
+			// Update existing JCR Nodes
+            if (collectionNode.hasNode(key.toString())) {
+                objectConverter.update(session, collectionNode, key.toString(), item);
+            }
+            else {
+                // Add new collection elements
+                objectConverter.insert(session, collectionNode, key.toString(), item);
+            } 
+            updatedItems.put(key.toString(), item);
+		}
+
+		// Delete the nodes that are not present in the Map 
+        NodeIterator nodeIterator = collectionNode.getNodes();
+        List removeNodes = new ArrayList();
+        while (nodeIterator.hasNext()) {
+            Node child = nodeIterator.nextNode();
+            if (!updatedItems.containsKey(child.getName())) {
+                    removeNodes.add(child);
+            }
+        }
+        for(int i = 0; i < removeNodes.size(); i++) {
+            ((Node) removeNodes.get(i)).remove();
+        }
+
+	}
-            else {
-            	ClassDescriptor elementClassDescriptor = mapper.getClassDescriptorByClass(elementClass);
-            	if (!elementClassDescriptor.hasIdField())
-            	{
-            		throw new JcrMappingException("Impossible to use a map for the field : "
-            				                      + collectionDescriptor.getFieldName()
-            				                      + " in the class : " + collectionDescriptor.getCollectionClassName()
-            				                      + ". The element objects have no id field (check their OCM mapping).");
-            	}
-            	Object elementId = ReflectionUtils.getNestedProperty(item,
-            			                           elementClassDescriptor.getIdFieldDescriptor().getFieldName());
-                ((ManageableMap) objects).addObject(elementId, item);
-            }
+            else 
+            	((ManageableMap) objects).addObject(itemNode.getName(), item);
+
