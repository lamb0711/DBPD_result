Speed up indexing using a volatile index with redo log.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156632 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.store.Directory;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.Term;
+import org.apache.jackrabbit.core.fs.FileSystemException;
+ * Implements an in-memory index with a redo log.
-    VolatileIndex(Analyzer analyzer) throws IOException {
+    /** The redo log */
+    private final RedoLog redoLog;
+
+    /**
+     * Creates a new <code>VolatileIndex</code> using an <code>analyzer</code>
+     * and a redo <code>log</code>.
+     * @param analyzer the analyzer to use.
+     * @param log the redo log.
+     * @throws IOException if an error occurs while opening the index.
+     */
+    VolatileIndex(Analyzer analyzer, RedoLog log) throws IOException {
+        redoLog = log;
-    long size() throws IOException {
-        Directory dir = getDirectory();
-        String[] files = dir.list();
-        long size = 0;
-        for (int i = 0; i < files.length; i++) {
-            size += dir.fileLength(files[i]);
+    /**
+     * Returns the redo log of this volatile index.
+     * @return the redo log of this volatile index.
+     */
+    RedoLog getRedoLog() {
+        return redoLog;
+    }
+
+    /**
+     * Overwrites the default implementation by writing an entry to the
+     * redo log and then calling the <code>super.addDocument()</code> method.
+     * @param doc the document to add to the index.
+     * @throws IOException if an error occurs while writing to the redo log
+     * or the index.
+     */
+    void addDocument(Document doc) throws IOException {
+        try {
+            redoLog.nodeAdded(doc.get(FieldNames.UUID));
+            redoLog.flush();
+        } catch (FileSystemException e) {
+            throw new IOException(e.getMessage());
-        return size;
+        super.addDocument(doc);
+    }
+
+    /**
+     * Overwrites the default implementation by writing an entry to the redo
+     * log and then calling the <code>super.removeDocument()</code> method.
+     * @param idTerm the uuid term of the document to remove.
+     * @throws IOException if an error occurs while writing to the redo log
+     * or the index.
+     * @return the number of deleted documents
+     */
+    int removeDocument(Term idTerm) throws IOException {
+        try {
+            redoLog.nodeRemoved(idTerm.text());
+            redoLog.flush();
+        } catch (FileSystemException e) {
+            throw new IOException(e.getMessage());
+        }
+        return super.removeDocument(idTerm);
