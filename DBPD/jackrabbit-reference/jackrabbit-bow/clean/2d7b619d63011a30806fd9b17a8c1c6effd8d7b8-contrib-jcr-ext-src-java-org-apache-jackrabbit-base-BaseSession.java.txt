JCR-EXT: Cleaning up and upgrading to 0.16.4.1 (work in progress, does not compile!)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169146 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ValueFactory;
- * General base class for implementing the JCR Session interface.
+ * Session base class.
-    /**
-     * The default constructor is protected to signify that this
-     * class needs to be subclassed to be of any real use.
-     */
+    /** Protected constructor. This class is only useful when extended. */
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported operation. {@inheritDoc} */
-    public String getUserId() {
+    /** Not implemented. {@inheritDoc} */
+    public String getUserID() {
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-     * Calls
+     * Implemented by calling
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getRootNode()</code> or
+     * <code>getRootNode().getNode(absPath.substring(1))</code> depending
+     * on the given absolute path.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        if (absPath == null || !absPath.startsWith("/")) {
+            throw new IllegalArgumentException("Invalid path: " + absPath);
+        } else if (absPath.equals("/")) {
+            return getRootNode();
+        } else {
+            return getRootNode().getNode(absPath.substring(1));
+        }
-     * Calls <code>getItem(absPath)</code> and returns <code>true</code>
-     * if a {@link PathNotFoundException PathNotFoundException} is not thrown.
-     * Throws a {@link RuntimeException RuntimeException} if a general
-     * {@link RepositoryException RepositoryException} is thrown by getItem().
+     * Implemented by calling <code>getItem(absPath)</code> and returning
+     * <code>true</code> unless a
+     * {@link PathNotFoundException PathNotFoundException} is thrown.
-    public boolean itemExists(String absPath) {
+    public boolean itemExists(String absPath) throws RepositoryException {
-        } catch (RepositoryException e) {
-            throw new RuntimeException(e);
-    /** Unsupported repository operation.{@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported repository operation. {@inheritDoc} */
-    public ContentHandler getImportContentHandler(String parentAbsPath)
+    /** Not implemented. {@inheritDoc} */
+    public ContentHandler getImportContentHandler(
+            String parentAbsPath, int uuidBehaviour)
-     * Calls
+     * Implemented by calling
-    public void importXML(String parentAbsPath, InputStream in)
+    public void importXML(
+            String parentAbsPath, InputStream in, int uuidBehaviour)
-            ContentHandler handler = getImportContentHandler(parentAbsPath);
+            ContentHandler handler =
+                getImportContentHandler(parentAbsPath, uuidBehaviour);
-                    "Unable to deserialize a SAX stream: " + e.getMessage());
+                    "Unable to configure a SAX transformer: " + e.getMessage());
-    /** Unsupported repository operation. {@inheritDoc} */
-    public void exportSysView(String absPath, ContentHandler contentHandler,
+    /** Not implemented. {@inheritDoc} */
+    public void exportSystemView(
+            String absPath, ContentHandler contentHandler,
-     * Calls
+     * Implemented by calling
-    public void exportSysView(String absPath, OutputStream out,
+    public void exportSystemView(String absPath, OutputStream out,
-            exportDocView(absPath, serializer.asContentHandler(),
+            exportSystemView(
+                    absPath, serializer.asContentHandler(),
-                    "Unable to serialize a system view SAX stream: "
-                    + e.getMessage());
+                    "Unable to serialize a SAX stream: " + e.getMessage());
-    /** Unsupported repository operation. {@inheritDoc} */
-    public void exportDocView(String absPath, ContentHandler contentHandler,
+    /** Not implemented. {@inheritDoc} */
+    public void exportDocumentView(
+            String absPath, ContentHandler contentHandler,
-     * Calls
+     * Implemented by calling
-    public void exportDocView(String absPath, OutputStream out,
+    public void exportDocumentView(
+            String absPath, OutputStream out,
-            exportDocView(absPath, serializer.asContentHandler(),
+            exportDocumentView(
+                    absPath, serializer.asContentHandler(),
-                    "Unable to serialize a document view SAX stream: "
-                    + e.getMessage());
+                    "Unable to serialize a SAX stream: " + e.getMessage());
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported repository operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** Unsupported operation. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
+    public ValueFactory getValueFactory()
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        throw new UnsupportedRepositoryOperationException();
+    }
+
+    /** Always returns <code>true</code>. {@inheritDoc} */
+    public boolean isLive() {
+        return true;
+    }
