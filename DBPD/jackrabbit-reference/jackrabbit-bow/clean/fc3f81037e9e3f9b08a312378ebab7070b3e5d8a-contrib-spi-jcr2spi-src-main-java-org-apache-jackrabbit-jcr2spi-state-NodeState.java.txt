work in progress

- replace usage of UUID by uniqueID unless refering to 'jcr:uuid'
- PropertyImpl.checkValidReference: don't rely on Node-value to be NodeImpl
- spi.Event: getUUID() not used -> remove


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@483477 13f79535-47bb-0310-9956-ffa450edef68

-     * The UUID of this node state or <code>null</code> if this node state
-     * cannot be identified with a uuid.
+     * The unique ID of this node state or <code>null</code> if this node state
+     * cannot be identified with a unique ID.
-    private String uuid;
+    private String uniqueID;
-     * @param uuid          the uuid of this NodeState or <code>null</code> if
+     * @param uuid          the uniqueID of this NodeState or <code>null</code> if
-    protected NodeState(QName name, String uuid, NodeState parent,
+    protected NodeState(QName name, String uniqueID, NodeState parent,
-        this.uuid = uuid;
+        this.uniqueID = uniqueID;
-                uuid = wspState.uuid;
+                uniqueID = wspState.uniqueID;
-            setUUID(nState.uuid);
+            setUniqueID(nState.uniqueID);
-                    if (!childNodeEntries().contains(childName, index, cne.getUUID())) {
+                    if (!childNodeEntries().contains(childName, index, cne.getUniqueID())) {
-                        childNodeEntries().add(childName, cne.getUUID(), index);
+                        childNodeEntries().add(childName, cne.getUniqueID(), index);
-                        toRemove = !nState.childNodeEntries().contains(childName, index, cne.getUUID());
+                        toRemove = !nState.childNodeEntries().contains(childName, index, cne.getUniqueID());
-        if (uuid != null) {
-            return idFactory.createNodeId(uuid);
+        if (uniqueID != null) {
+            return idFactory.createNodeId(uniqueID);
-     * @return the UUID of this node state or <code>null</code> if this
-     * node cannot be identified with a UUID.
+     * @return the unique ID of this node state or <code>null</code> if this
+     * node cannot be identified with a unique ID.
-    public String getUUID() {
-        return uuid;
+    public String getUniqueID() {
+        return uniqueID;
-     * Modify the uuid of this state and make sure, that the parent state
-     * contains a proper childNodeEntry for this state. If the given uuid is
-     * not different from the uuid of this state, the method returns silently
+     * Modify the uniqueID of this state and make sure, that the parent state
+     * contains a proper childNodeEntry for this state. If the given uniqueID is
+     * not different from the uniqueID of this state, the method returns silently
-     * @param uuid
+     * @param uniqueID
-    private void setUUID(String uuid) {
-        String oldUUID = this.uuid;
-        boolean mod = (oldUUID == null) ? uuid != null : !oldUUID.equals(uuid);
+    private void setUniqueID(String uniqueID) {
+        String oldUniqueID = this.uniqueID;
+        boolean mod = (oldUniqueID == null) ? uniqueID != null : !oldUniqueID.equals(uniqueID);
-            this.uuid = uuid;
+            this.uniqueID = uniqueID;
-        String uuid = nodeId.getUUID();
+        String uid = nodeId.getUniqueID();
-        if (uuid != null && path == null) {
-            // retrieve child-entry by uuid
-            cne = childNodeEntries().get(null, uuid);
+        if (uid != null && path == null) {
+            // retrieve child-entry by uid
+            cne = childNodeEntries().get(null, uid);
-                if (QName.JCR_UUID.equals(propName) && uuid == null) {
+                if (QName.JCR_UUID.equals(propName) && uniqueID == null) {
-                    setUUID(ps.getValue().getString());
+                    setUniqueID(ps.getValue().getString());
-                    setUUID(null);
+                    setUniqueID(null);
-                String uuid = (evId.getPath() != null) ? null : evId.getUUID();
+                String uniqueID = (evId.getPath() != null) ? null : evId.getUniqueID();
-                ChildNodeEntry cne = (uuid != null) ? childNodeEntries().get(name, uuid) : childNodeEntries().get(name, index);
+                ChildNodeEntry cne = (uniqueID != null) ? childNodeEntries().get(name, uniqueID) : childNodeEntries().get(name, index);
-                    cne = childNodeEntries().add(name, uuid, index);
+                    cne = childNodeEntries().add(name, uniqueID, index);
-        // remember parent states that have need to adjust their uuid/mixintypes
+        // remember parent states that have need to adjust their uniqueID/mixintypes
-                    if (overlayed.getUUID() != null) {
+                    if (overlayed.getUniqueID() != null) {
-                // make sure the new state gets updated (e.g. uuid created by server)
+                // make sure the new state gets updated (e.g. uniqueID created by server)
-           need their uuid or mixin-types being adjusted because that property
+           need their uniqueID or mixin-types being adjusted because that property
-                        String uuid = (props[i].getStatus() == Status.REMOVED) ? null : props[i].getValue().getString();
-                        sState.setUUID(uuid);
-                        overlayed.setUUID(uuid);
+                        String uniqueID = (props[i].getStatus() == Status.REMOVED) ? null : props[i].getValue().getString();
+                        sState.setUniqueID(uniqueID);
+                        overlayed.setUniqueID(uniqueID);
