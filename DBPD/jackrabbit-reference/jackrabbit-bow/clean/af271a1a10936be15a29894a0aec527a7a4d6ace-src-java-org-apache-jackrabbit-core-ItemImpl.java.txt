JAAS support 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155344 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.security.AccessManager;
+import org.apache.jackrabbit.core.state.ItemState;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.ItemStateListener;
+import org.apache.jackrabbit.core.state.NodeReferences;
+import org.apache.jackrabbit.core.state.NodeReferencesId;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.state.SessionItemStateManager;
-import javax.jcr.*;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.Item;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.ItemVisitor;
+import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.PropertyType;
+import javax.jcr.ReferentialIntegrityException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+         * for every transient item:
+         * - if it is 'modified' check the WRITE permission
+         *
-         * - if it is 'new', check that its node type satisfies the
+         * - if it is 'new' check that its node type satisfies the
-         * - if new child nodes have been added to the node in question,
-         *   check the WRITE permission
-         * - if child items have been removed from the node in question,
-         *   check the WRITE permission
-         * - check the WRITE permission
-        AccessManagerImpl accessMgr = session.getAccessManager();
+        AccessManager accessMgr = session.getAccessManager();
+            if (itemState.getStatus() != ItemState.STATUS_NEW) {
+                // transient item is not 'new', therefore it has to be 'modified'
+
+                // check WRITE permission
+                ItemId id = itemState.getId();
+                if (!accessMgr.isGranted(itemState.getId(), AccessManager.WRITE)) {
+                    String msg = itemMgr.safeGetJCRPath(id) + ": not allowed modify item";
+                    log.debug(msg);
+                    throw new AccessDeniedException(msg);
+                }
+            }
+
-                // check child removals
-                if (!nodeState.getRemovedChildNodeEntries().isEmpty() || !nodeState.getRemovedPropertyEntries().isEmpty()) {
-                    // check WRITE permission
-                    if (!accessMgr.isGranted(id, AccessManager.WRITE)) {
-                        String msg = node.safeGetJCRPath() + ": not allowed to remove a child item";
-                        log.debug(msg);
-                        throw new AccessDeniedException(msg);
-                    }
-
-                    /**
-                     * no need to check the protected flag as this is checked
-                     * in NodeImpl.remove(String)
-                     */
-                }
-
-                // check child additions
-                // added child nodes
-                Iterator addedIter = nodeState.getAddedChildNodeEntries().iterator();
-                while (addedIter.hasNext()) {
-                    NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) addedIter.next();
-                    Node childNode = (Node) itemMgr.getItem(new NodeId(entry.getUUID()));
-                    NodeDef childDef = childNode.getDefinition();
-                    if (!childDef.isAutoCreate()) {
-                        // check WRITE permission
-                        if (!accessMgr.isGranted(id, AccessManager.WRITE)) {
-                            String msg = node.safeGetJCRPath() + ": not allowed to add node " + childNode.getName();
-                            log.debug(msg);
-                            throw new AccessDeniedException(msg);
-                        }
-                    }
-                }
-                NodeId nodeId = new NodeId(propState.getParentUUID());
-                if (!def.isAutoCreate()) {
-                    // check WRITE permission on property
-                    if (!accessMgr.isGranted(propId, AccessManager.WRITE)) {
-                        String msg = itemMgr.safeGetJCRPath(nodeId) + ": not allowed to set property " + prop.getName();
-                        log.debug(msg);
-                        throw new AccessDeniedException(msg);
-                    }
-                    if (propState.getOverlayedState() == null) {
-                        // property has been added, check WRITE permission on parent
-                        if (!accessMgr.isGranted(nodeId, AccessManager.WRITE)) {
-                            String msg = itemMgr.safeGetJCRPath(nodeId) + ": not allowed to set property " + prop.getName();
-                            log.debug(msg);
-                            throw new AccessDeniedException(msg);
-                        }
-                    }
-                }
-
