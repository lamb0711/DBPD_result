JCR-1007: Move common implementations of SPI interfaces to spi-commons module

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@553507 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.spi.rmi.common;
+package org.apache.jackrabbit.spi.commons;
-import org.apache.jackrabbit.spi.ItemId;
+import org.apache.jackrabbit.spi.IdFactory;
+import org.apache.jackrabbit.util.IteratorHelper;
-import java.util.Arrays;
-    public static NodeInfo createSerializableNodeInfo(NodeInfo nodeInfo, final SerializableIdFactory idFactory) {
+    public static NodeInfo createSerializableNodeInfo(
+            NodeInfo nodeInfo, final IdFactory idFactory) {
-            PropertyId[] serRefs = new PropertyId[refs.length];
-            for (int i = 0; i < serRefs.length; i++) {
-                serRefs[i] = idFactory.createSerializablePropertyId(refs[i]);
+            List serRefs = new ArrayList();
+            for (int i = 0; i < refs.length; i++) {
+                NodeId parentId = refs[i].getParentId();
+                parentId = idFactory.createNodeId(
+                        parentId.getUniqueID(), parentId.getPath());
+                serRefs.add(idFactory.createPropertyId(parentId, refs[i].getQName()));
-                parentId = idFactory.createSerializableNodeId(nodeInfo.getParentId());
+                parentId = nodeInfo.getParentId();
+                parentId = idFactory.createNodeId(
+                        parentId.getUniqueID(), parentId.getPath());
+            NodeId nodeId = nodeInfo.getId();
+            nodeId = idFactory.createNodeId(nodeId.getUniqueID(), nodeId.getPath());
-                    nodeInfo.getPath(),
-                    idFactory.createSerializableNodeId(nodeInfo.getId()),
+                    nodeInfo.getPath(), nodeId,
-                    nodeInfo.getMixins(), serRefs,
+                    nodeInfo.getMixins(), serRefs.iterator(),
-                        public ItemId nextId() {
-                            return idFactory.createSerializablePropertyId(
-                                    (PropertyId) super.next());
+                        public Object next() {
+                            PropertyId propId = (PropertyId) super.next();
+                            NodeId parentId = propId.getParentId();
+                            idFactory.createNodeId(
+                                    parentId.getUniqueID(), parentId.getPath());
+                            return idFactory.createPropertyId(
+                                    parentId, propId.getQName());
-    private NodeInfoImpl(NodeId parentId, QName name, Path path, NodeId id,
+    public NodeInfoImpl(NodeId parentId, QName name, Path path, NodeId id,
-                         PropertyId[] references, Iterator propertyIds) {
+                         Iterator references, Iterator propertyIds) {
-        this.references = Arrays.asList(references);
+        this.references = new ArrayList();
+        while (references.hasNext()) {
+            this.references.add(references.next());
+        }
