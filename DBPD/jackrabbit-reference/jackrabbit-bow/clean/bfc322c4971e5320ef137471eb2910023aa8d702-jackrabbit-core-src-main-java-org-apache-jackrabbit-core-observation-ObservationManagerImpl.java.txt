JCR-1849: JSR 283: EventJournal

Adjust the EventJournal implementation to the JCR 2.0 PFD version.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@770224 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.cluster.ClusterNode;
+import org.apache.jackrabbit.core.security.principal.AdminPrincipal;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.observation.EventJournal;
+import javax.security.auth.Subject;
+     * The cluster node where this session is running.
+     */
+    private final ClusterNode clusterNode;
+
+    /**
-    public ObservationManagerImpl(ObservationDispatcher dispatcher,
-                           SessionImpl session,
-                           ItemManager itemMgr) throws NullPointerException {
+    public ObservationManagerImpl(
+            ObservationDispatcher dispatcher, SessionImpl session,
+            ItemManager itemMgr, ClusterNode clusterNode) {
+        this.clusterNode = clusterNode;
+    /**
+     * Returns the event journal for this workspace. The events are filtered
+     * according to the passed criteria.
+     *
+     * @param eventTypes A combination of one or more event type constants encoded as a bitmask.
+     * @param absPath an absolute path.
+     * @param isDeep a <code>boolean</code>.
+     * @param uuid array of UUIDs.
+     * @param nodeTypeName array of node type names.
+     * @return the event journal for this repository.
+     * @throws UnsupportedRepositoryOperationException if this repository does
+     *          not support an event journal (cluster journal disabled).
+     * @throws RepositoryException if another error occurs.
+     */
+    public EventJournal getEventJournal(
+            int eventTypes, String absPath, boolean isDeep,
+            String[] uuid, String[] nodeTypeName)
+            throws RepositoryException {
+        if (clusterNode == null) {
+            throw new UnsupportedRepositoryOperationException(
+                    "Event journal is only available in cluster deployments");
+        }
+
+        Subject subject = session.getSubject();
+        if (subject.getPrincipals(AdminPrincipal.class).isEmpty()) {
+            throw new RepositoryException("Only administrator session may " +
+                    "access EventJournal");
+        }
+
+        ObservationManagerImpl obsMgr = (ObservationManagerImpl) session.getWorkspace().getObservationManager();
+        EventFilter filter = obsMgr.createEventFilter(eventTypes, absPath,
+                isDeep, uuid, nodeTypeName, false);
+        return new EventJournalImpl(filter, clusterNode.getJournal(),
+                clusterNode.getId());
+    }
+
+    /**
+     * Returns an unfiltered event journal for this workspace.
+     *
+     * @return the event journal for this repository.
+     * @throws UnsupportedRepositoryOperationException if this repository does
+     *          not support an event journal (cluster journal disabled).
+     * @throws RepositoryException if another error occurs.
+     */
+    public EventJournal getEventJournal() throws RepositoryException {
+        return getEventJournal(-1, "/", true, null, null);
+    }
+
+
