JCR-1547: JCR2SPI: remove dependency to state-package within nodetype package

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@650514 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.hierarchy.PropertyEntry;
-import org.apache.jackrabbit.jcr2spi.state.NodeState;
-import org.apache.jackrabbit.jcr2spi.state.PropertyState;
+import org.apache.jackrabbit.spi.PropertyId;
+import org.apache.jackrabbit.spi.NodeId;
-    public QNodeDefinition getQNodeDefinition(NodeState nodeState) throws RepositoryException {
-        if (nodeState.getHierarchyEntry().getParent() == null) {
+    public QNodeDefinition getQNodeDefinition(Name[] parentNodeTypeNames,
+                                              Name nodeName, Name ntName,
+                                              NodeId nodeId) throws RepositoryException {
+        if (parentNodeTypeNames == null) {
-            /*
-             Don't use 'getEffectiveNodeType(NodeState.getAllNodeTypeNames()) here:
-             for NEW-states the definition is always set upon creation.
-             for all other states the definion must be retrieved only taking
-             the effective nodetypes present on the parent into account
-             any kind of transiently added mixins must not have an effect
-             on the definition retrieved for an state that has been persisted
-             before. The effective NT must be evaluated as if it had been
-             evaluated upon creating the workspace state.
-             */
-            EffectiveNodeType ent = entProvider.getEffectiveNodeType(nodeState.getParent().getNodeTypeNames());
-            EffectiveNodeType entTarget = getEffectiveNodeType(nodeState.getNodeTypeName());
-            definition = getQNodeDefinition(ent, entTarget, nodeState.getName());
+            EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentNodeTypeNames);
+            EffectiveNodeType entTarget = getEffectiveNodeType(ntName);
+            definition = getQNodeDefinition(ent, entTarget, nodeName);
-            definition = service.getNodeDefinition(sessionInfo, nodeState.getNodeEntry().getWorkspaceId());
+            definition = service.getNodeDefinition(sessionInfo, nodeId);
-    public QNodeDefinition getQNodeDefinition(NodeState parentState, Name name, Name nodeTypeName)
+   public QNodeDefinition getQNodeDefinition(Name[] parentNodeTypeNames, Name name, Name nodeTypeName)
-       EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentState.getAllNodeTypeNames());
+       EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentNodeTypeNames);
-    public QPropertyDefinition getQPropertyDefinition(PropertyState propertyState) throws RepositoryException {
+    public QPropertyDefinition getQPropertyDefinition(Name[] parentNodeTypeNames,
+                                                      Name propertyName,
+                                                      int propertType,
+                                                      boolean isMultiValued,
+                                                      PropertyId propertyId) throws RepositoryException {
-            /*
-             Don't use 'getEffectiveNodeType(NodeState) here:
-             for NEW-states the definition is always set upon creation.
-             for all other states the definion must be retrieved only taking
-             the effective nodetypes present on the parent into account
-             any kind of transiently added mixins must not have an effect
-             on the definition retrieved for an state that has been persisted
-             before. The effective NT must be evaluated as if it had been
-             evaluated upon creating the workspace state.
-             */
-            EffectiveNodeType ent = entProvider.getEffectiveNodeType(propertyState.getParent().getNodeTypeNames());
-            definition = getQPropertyDefinition(ent, propertyState.getName(), propertyState.getType(), propertyState.isMultiValued(), true);
+            EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentNodeTypeNames);
+            definition = getQPropertyDefinition(ent, propertyName, propertType, isMultiValued, true);
-            definition = service.getPropertyDefinition(sessionInfo, ((PropertyEntry) propertyState.getHierarchyEntry()).getWorkspaceId());
+            definition = service.getPropertyDefinition(sessionInfo, propertyId);
-    public QPropertyDefinition getQPropertyDefinition(NodeState parentState,
+    public QPropertyDefinition getQPropertyDefinition(Name[] parentNodeTypeNames,
-        EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentState.getAllNodeTypeNames());
+        EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentNodeTypeNames);
-    public QPropertyDefinition getQPropertyDefinition(NodeState parentState,
+    public QPropertyDefinition getQPropertyDefinition(Name[] parentNodeTypeNames,
-        EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentState.getAllNodeTypeNames());
+        EffectiveNodeType ent = entProvider.getEffectiveNodeType(parentNodeTypeNames);
