JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.jdom.Element;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+
+import java.util.ArrayList;
+import java.util.List;
-public class MergeInfo implements DeltaVConstants {
+public class MergeInfo implements DeltaVConstants, XmlSerializable {
-    private Element mergeElement;
+    private final Element mergeElement;
+    private final DavPropertyNameSet propertyNameSet;
-        if (mergeElement == null || !mergeElement.getName().equals(XML_MERGE)) {
+        if (!DomUtil.matches(mergeElement, XML_MERGE, NAMESPACE)) {
-        this.mergeElement = (Element) mergeElement.detach();
+
+        // if property name set if present
+        Element propElem = DomUtil.getChildElement(mergeElement, DavConstants.XML_PROP, DavConstants.NAMESPACE);
+        if (propElem != null) {
+            propertyNameSet = new DavPropertyNameSet(propElem);
+            mergeElement.removeChild(propElem);
+        } else {
+            propertyNameSet = new DavPropertyNameSet();
+        }
+        this.mergeElement = mergeElement;
-    public String getSourceHref() {
-        Element source = mergeElement.getChild(DavConstants.XML_SOURCE, DavConstants.NAMESPACE);
-        if (source != null) {
-            return source.getChildText(DavConstants.XML_HREF, DavConstants.NAMESPACE);
+    public String[] getSourceHrefs() {
+        List sourceHrefs = new ArrayList();
+        Element srcElem = DomUtil.getChildElement(mergeElement, DavConstants.XML_SOURCE, DavConstants.NAMESPACE);
+        if (srcElem != null) {
+            ElementIterator it = DomUtil.getChildren(srcElem, DavConstants.XML_HREF, DavConstants.NAMESPACE);
+            while (it.hasNext()) {
+                String href = DomUtil.getTextTrim(it.nextElement());
+                if (href != null) {
+                    sourceHrefs.add(href);
-        return null;
+            }
+        }
+        return (String[])sourceHrefs.toArray(new String[sourceHrefs.size()]);
-        return mergeElement.getChild(XML_N0_AUTO_MERGE, NAMESPACE) != null;
+        return DomUtil.hasChildElement(mergeElement, XML_N0_AUTO_MERGE, NAMESPACE);
-        return mergeElement.getChild(XML_N0_CHECKOUT, NAMESPACE) != null;
+        return DomUtil.hasChildElement(mergeElement, XML_N0_CHECKOUT, NAMESPACE);
-     * in the set. Otherwise an empty set is returned.
+     * in the set. Otherwise an empty set is returned.<br>
+     *
+     * <b>WARNING:</b> modifying the DavPropertyNameSet returned by this method does
+     * not modify this <code>UpdateInfo</code>.
-        Element propElement = mergeElement.getChild(DavConstants.XML_PROP, DavConstants.NAMESPACE);
-        if (propElement != null) {
-            return new DavPropertyNameSet(propElement);
-        } else {
-            return new DavPropertyNameSet();
-        }
+        return propertyNameSet;
+
+    /**
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
+     */
+    public Element toXml(Document document) {
+        Element elem = (Element)document.importNode(mergeElement, true);
+        if (!propertyNameSet.isEmpty()) {
+            elem.appendChild(propertyNameSet.toXml(document));
+        }
+        return elem;
+    }
+
