JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Namespace;
-import org.apache.jackrabbit.webdav.DavConstants;
+import org.apache.jackrabbit.webdav.xml.Namespace;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
-public class DavPropertySet {
+public class DavPropertySet extends PropContainer {
-    private final HashMap map = new HashMap();
+    private final Map map = new HashMap();
-     * Checks if this set contains the property with the specified name.
-     *
-     * @param name The name of the property
-     *
-     * @return <code>true</code> if this set contains the property;
-     *         <code>false</code> otherwise.
-     */
-    public boolean contains(DavPropertyName name) {
-        return map.containsKey(name);
-    }
-
-    /**
-     * Checks if this set contains the property with the specified name and the
-     * default WebDAV {@link org.apache.jackrabbit.webdav.DavConstants#NAMESPACE namespace}.
-     *
-     * @param name The name of the property
-     *
-     * @return <code>true</code> if this set contains the property;
-     *         <code>false</code> otherwise.
-     */
-    public boolean contains(String name) {
-        return contains(DavPropertyName.create(name, DavConstants.NAMESPACE));
-    }
-
-    /**
-     * Return true if this property set is empty.
-     *
-     * @return true if the internal map contains no elements.
-     */
-    public boolean isEmpty() {
-        return map.isEmpty();
-    }
-
-    /**
+    //------------------------------------------------------< PropContainer >---
+    /**
+     * Checks if this set contains the property with the specified name.
+     *
+     * @param name The name of the property
+     * @return <code>true</code> if this set contains the property;
+     *         <code>false</code> otherwise.
+     * @see PropContainer#contains(DavPropertyName)
+     */
+    public boolean contains(DavPropertyName name) {
+        return map.containsKey(name);
+    }
+
+    /**
+     * @param contentEntry NOTE, that the given object must be an instance of
+     * <code>DavProperty</code> in order to be successfully added to this set.
+     * @return true if the specified object is an instance of <code>DavProperty</code>
+     * and false otherwise.
+     * @see PropContainer#addContent(Object)
+     */
+    public boolean addContent(Object contentEntry) {
+        if (contentEntry instanceof DavProperty) {
+            add((DavProperty)contentEntry);
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * @see PropContainer#isEmpty()
+     */
+    public boolean isEmpty() {
+        return map.isEmpty();
+    }
+
+    /**
+     * @see PropContainer#getContentSize()
+     */
+    public int getContentSize() {
+        return map.size();
+    }
+
+    /**
+     * @see PropContainer#getContent()
+     */
+    public Collection getContent() {
+        return map.values();
+    }
+
