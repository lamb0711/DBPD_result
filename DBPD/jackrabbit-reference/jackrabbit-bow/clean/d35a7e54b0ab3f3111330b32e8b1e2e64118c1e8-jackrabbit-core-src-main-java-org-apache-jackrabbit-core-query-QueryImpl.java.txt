JCR-890: concurrent read-only access to a session

Use the SessionContext and SessionOperations in search

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983708 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.ItemManager;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Name;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_LANGUAGE;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_STATEMENT;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.NT_QUERY;
+
+import java.text.NumberFormat;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-
-import java.text.NumberFormat;
+
+import org.apache.jackrabbit.core.session.SessionContext;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-     * The session of the user executing this query
+     * Component context of the current session
-    protected SessionImpl session;
+    protected SessionContext sessionContext;
-    public void init(SessionImpl session,
-                     ItemManager itemMgr,
-                     QueryHandler handler,
-                     String statement,
-                     String language,
-                     Node node) throws InvalidQueryException {
+    public void init(
+            SessionContext sessionContext, QueryHandler handler,
+            String statement, String language, Node node)
+            throws InvalidQueryException {
-        this.session = session;
+        this.sessionContext = sessionContext;
-        this.query = handler.createExecutableQuery(session, itemMgr, statement, language);
+        this.query = handler.createExecutableQuery(sessionContext, statement, language);
+        NamePathResolver resolver = sessionContext.getSessionImpl();
-            Path p = session.getQPath(absPath).getNormalizedPath();
+            Path p = resolver.getQPath(absPath).getNormalizedPath();
-            String relPath = session.getJCRPath(p).substring(1);
-            Node queryNode = session.getRootNode().addNode(
-                    relPath, session.getJCRName(NameConstants.NT_QUERY));
+            String relPath = resolver.getJCRPath(p).substring(1);
+            Node queryNode =
+                sessionContext.getSessionImpl().getRootNode().addNode(
+                        relPath, resolver.getJCRName(NT_QUERY));
-            queryNode.setProperty(session.getJCRName(NameConstants.JCR_LANGUAGE), language);
-            queryNode.setProperty(session.getJCRName(NameConstants.JCR_STATEMENT), statement);
+            queryNode.setProperty(resolver.getJCRName(JCR_LANGUAGE), language);
+            queryNode.setProperty(resolver.getJCRName(JCR_STATEMENT), statement);
+        NameResolver resolver = sessionContext.getSessionImpl();
-            strNames[i] = session.getJCRName(names[i]);
+            strNames[i] = resolver.getJCRName(names[i]);
-            query.bindValue(session.getQName(varName), value);
+            query.bindValue(sessionContext.getSessionImpl().getQName(varName), value);
