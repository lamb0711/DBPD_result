JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1082239 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashSet;
+import java.util.Set;
-     * Privileges contained in this entry
+     * All privileges contained in this entry
-     * PrivilegeBits calculated from the privileges
+     * PrivilegeBits calculated from built-in privileges
+     * Calculated set of non-aggregate custom privileges (see also privilegeBits
+     * above for the built-in privileges) used upon ac evaluation.
+     */
+    private Set<Privilege> customPrivs;
+
+    /**
-     * 
+     *
-    protected AccessControlEntryImpl(AccessControlEntryImpl base, Privilege[] privileges, boolean isAllow) throws AccessControlException {
-        // make sure no abstract privileges are passed.
-        for (Privilege privilege : privileges) {
-            if (privilege.isAbstract()) {
-                throw new AccessControlException("Privilege " + privilege + " is abstract.");
-            }
-        }
-        this.principal = base.principal;
-        this.privileges = privileges;
-        this.privilegeBits = getPrivilegeManager().getBits(privileges);
-        this.allow = isAllow;
+    protected AccessControlEntryImpl(AccessControlEntryImpl base, Privilege[] privileges, boolean isAllow)
+            throws AccessControlException, RepositoryException {
+        this(base.principal, privileges, isAllow, (base.restrictions.isEmpty()) ? null : Collections.<String, Value>emptyMap());
-        if (base.restrictions == null) {
-            this.restrictions = Collections.emptyMap();
-        } else {
-            this.restrictions = new HashMap<Name, Value>(base.restrictions.size());
+        if (!base.restrictions.isEmpty()) {
-            for (Name name : restrictions.keySet()) {
-                Value value = restrictions.get(name);
+            for (Name name : base.restrictions.keySet()) {
+                Value value = base.restrictions.get(name);
-     * @return the int representation of the privileges defined for this entry.
+     * @return the permission bits that correspond to the privileges defined by this entry.
+     * @return A collection of all non-aggregate custom privileges defined by
+     * this entry including those contained in the aggregated custom privileges.
+     */
+    public Set<Privilege> getCustomPrivileges() {
+        if (customPrivs == null) {
+            customPrivs = new HashSet<Privilege>();
+            for (Privilege p : privileges) {
+                try {
+                    if (getPrivilegeManager().isCustomPrivilege(p)) {
+                        if (p.isAggregate()) {
+                            for (Privilege aggr : p.getAggregatePrivileges()) {
+                                if (!aggr.isAggregate()) {
+                                    customPrivs.add(p);
+                                }
+                            }
+                        } else {
+                            customPrivs.add(p);
+
+                        }
+                    }
+                } catch (AccessControlException e) {
+                    // ignore.
+                }
+            }
+        }
+        return customPrivs;
+    }
+
+    /**
-        h = 37 * h + privilegeBits;
+        for (Privilege p : privileges) {
+            h = 37 * h + p.hashCode();
+        }
-            AccessControlEntryImpl tmpl = (AccessControlEntryImpl) obj;
-            return principal.getName().equals(tmpl.principal.getName()) &&
-                   privilegeBits == tmpl.privilegeBits && allow == tmpl.allow &&
-                   restrictions.equals(tmpl.restrictions);
+            AccessControlEntryImpl other = (AccessControlEntryImpl) obj;
+            return principal.getName().equals(other.principal.getName()) &&
+                   privilegeBits == other.privilegeBits &&
+                   allow == other.allow &&
+                   restrictions.equals(other.restrictions) &&
+                   equalCustomPrivileges(other);
+
+    private boolean equalCustomPrivileges(AccessControlEntryImpl other) {
+        Set<Privilege> a1 = getCustomPrivileges();
+        Set<Privilege> a2 = other.getCustomPrivileges();
+        return a1.size() == a2.size() && a1.containsAll(a2);
+    }
