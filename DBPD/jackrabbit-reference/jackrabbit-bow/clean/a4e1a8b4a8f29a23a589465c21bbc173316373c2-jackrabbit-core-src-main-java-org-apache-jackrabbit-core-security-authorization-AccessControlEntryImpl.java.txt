JCR-2887 - Split PrivilegeRegistry in a per-session manager instance and a repository level registry  (WIP)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1181645 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
-     * All privileges contained in this entry
+     * All privileges contained in this entry.
-    private final Privilege[] privileges;
+    private Privilege[] privileges;
-     * @throws AccessControlException if either principal or privileges are invalid.
-     * @throws RepositoryException if another error occurs.
-     */
-    protected AccessControlEntryImpl(Principal principal, Privilege[] privileges)
-            throws AccessControlException, RepositoryException {
-        this(principal, privileges, true, null);
-    }
-
-    /**
-     * Construct an access control entry for the given principal and privileges.
-     *
-     * @param principal Principal for this access control entry.
-     * @param privileges Privileges for this access control entry.
-        if (principal == null) {
-            throw new IllegalArgumentException();
+        if (principal == null || privileges == null) {
+            throw new AccessControlException();
-        this.privilegeBits = getPrivilegeManager().getBits(privileges);
+        this.privilegeBits = getPrivilegeManager().getBits(privileges).unmodifiable();
+     * Construct an access control entry for the given principal and privileges.
+     *
+     * @param principal Principal for this access control entry.
+     * @param privilegesBits Privileges for this access control entry.
+     * @param isAllow <code>true</code> if this ACE grants the specified
+     * privileges to the specified principal; <code>false</code> otherwise.
+     * @param restrictions A map of restriction name (String) to restriction
+     * (Value). See {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getRestrictionNames()}
+     * and {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlList#getRestrictionType(String)}.
+     * @throws RepositoryException if another error occurs.
+     */
+    protected AccessControlEntryImpl(Principal principal, PrivilegeBits privilegesBits,
+                                     boolean isAllow, Map<String, Value> restrictions)
+            throws RepositoryException {
+        if (principal == null || privilegesBits == null) {
+            throw new IllegalArgumentException();
+        }
+        this.principal = principal;
+        this.privilegeBits = privilegesBits.unmodifiable();
+        this.allow = isAllow;
+
+        if (restrictions == null) {
+            this.restrictions = Collections.emptyMap();
+        } else {
+            this.restrictions = new HashMap<Name, Value>(restrictions.size());
+            // validate the passed restrictions and fill the map
+            for (String name : restrictions.keySet()) {
+                Value value = ValueHelper.copy(restrictions.get(name), getValueFactory());
+                this.restrictions.put(getResolver().getQName(name), value);
+            }
+        }
+    }
+
+    /**
+     *
+     * @param base
+     * @param privilegeBits
+     * @param isAllow
+     * @throws AccessControlException
+     */
+    protected AccessControlEntryImpl(AccessControlEntryImpl base, PrivilegeBits privilegeBits, boolean isAllow)
+            throws AccessControlException, RepositoryException {
+        this(base.principal, privilegeBits, isAllow, (base.restrictions.isEmpty()) ? null : Collections.<String, Value>emptyMap());
+
+        if (!base.restrictions.isEmpty()) {
+            // validate the passed restrictions and fill the map
+            for (Name name : base.restrictions.keySet()) {
+                Value value = ValueHelper.copy(base.restrictions.get(name), getValueFactory());
+                this.restrictions.put(name, value);
+            }
+        }
+    }
+
+    /**
-        for (Privilege p : privileges) {
-            h = 37 * h + p.hashCode();
-        }
+        h = 37 * h + privilegeBits.hashCode();
+        if (privileges == null) {
+            Set<Privilege> ps = getPrivilegeManager().getPrivileges(privilegeBits);
+            privileges = ps.toArray(new Privilege[ps.size()]);
+        }
