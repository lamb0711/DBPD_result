JCR-256: Improve jcr decorator in jcr-ext
- added decoration for all required jcr interfaces
- added more factory methods to DecoratorFactory
- renamed SimpleDecoratorFactory to DefaultDecoratorFactory
- removed ChainedDecoratorFactory and ChainedItemDecorator
- added sample decorator: TrussDecoratorFactory

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@326437 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.MergeException;
-public class NodeDecorator extends ChainedItemDecorator implements Node {
+public class NodeDecorator extends ItemDecorator implements Node {
-    private DecoratorFactory factory;
+    protected Node node;
-    private Session session;
-
-    private Node node;
-
-    public NodeDecorator(
-            ItemDecorator decorator,
-            DecoratorFactory factory, Session session, Node node) {
-        super(decorator);
-        this.factory = factory;
-        this.session = session;
+    public NodeDecorator(DecoratorFactory factory, Session session, Node node) {
+        super(factory, session, node);
+    /**
+     * Returns the underlying <code>Node</code> of the <code>node</code>
+     * that decorates it. Unwrapping <code>null</code> returns <code>null</code>.
+     *
+     * @param node decorates the underlying node.
+     * @return the underlying node.
+     * @throws IllegalStateException if <code>node</code> is not of type
+     *                               {@link NodeDecorator}.
+     */
+    public static Node unwrap(Node node) {
+        if (node == null) {
+            return null;
+        }
+        if (node instanceof NodeDecorator) {
+            node = (Node) ((NodeDecorator) node).unwrap();
+        } else {
+            throw new IllegalStateException("node is not of type NodeDecorator");
+        }
+        return node;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    /**
+     * @inheritDoc
+     */
-    public void orderBefore(String arg0, String arg1)
+    /**
+     * @inheritDoc
+     */
+    public void orderBefore(String srcChildRelPath, String destChildRelPath)
-            ConstraintViolationException, ItemNotFoundException, LockException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-
+            ConstraintViolationException, ItemNotFoundException,
+            LockException, RepositoryException {
+        node.orderBefore(srcChildRelPath, destChildRelPath);
-    public Property setProperty(String arg0, Value arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, Value value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, Value arg1, int arg2)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, Value value, int type)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value, type);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, Value[] arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, Value[] values)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, values);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, Value[] arg1, int arg2)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, Value[] values, int type)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, values, type);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, String[] arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, String[] values)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, values);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, String[] arg1, int arg2)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, String[] values, int type)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, values, type);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, String arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, String value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, String arg1, int arg2)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, String value, int type)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value, type);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, InputStream arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, InputStream value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, boolean arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, boolean value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, double arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, double value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, long arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, long value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, Calendar arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, Calendar value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, value);
+        return factory.getPropertyDecorator(session, prop);
-    public Property setProperty(String arg0, Node arg1)
+    /**
+     * @inheritDoc
+     */
+    public Property setProperty(String name, Node value)
-        // TODO Auto-generated method stub
-        return null;
+        Property prop = node.setProperty(name, NodeDecorator.unwrap(value));
+        return factory.getPropertyDecorator(session, prop);
-    public Node getNode(String arg0) throws PathNotFoundException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-        return null;
+    /**
+     * @inheritDoc
+     */
+    public Node getNode(String relPath) throws PathNotFoundException, RepositoryException {
+        Node n = node.getNode(relPath);
+        return factory.getNodeDecorator(session, n);
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return new DecoratingNodeIterator(factory, session, node.getNodes());
-    public NodeIterator getNodes(String arg0) throws RepositoryException {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
-    public Property getProperty(String arg0) throws PathNotFoundException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
-    public PropertyIterator getProperties() throws RepositoryException {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
-    public PropertyIterator getProperties(String arg0)
+    /**
+     * @inheritDoc
+     */
+    public NodeIterator getNodes(String namePattern)
-        // TODO Auto-generated method stub
-        return null;
+        return new DecoratingNodeIterator(factory, session, node.getNodes(namePattern));
+    /**
+     * @inheritDoc
+     */
+    public Property getProperty(String relPath)
+            throws PathNotFoundException, RepositoryException {
+        Property prop = node.getProperty(relPath);
+        return factory.getPropertyDecorator(session, prop);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public PropertyIterator getProperties() throws RepositoryException {
+        return new DecoratingPropertyIterator(factory, session, node.getProperties());
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public PropertyIterator getProperties(String namePattern)
+            throws RepositoryException {
+        return new DecoratingPropertyIterator(factory, session, node.getProperties(namePattern));
+    }
+
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return factory.getItemDecorator(session, node.getPrimaryItem());
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return node.getUUID();
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return 0;
+        return node.getIndex();
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return new DecoratingPropertyIterator(factory, session, node.getReferences());
-    public boolean hasNode(String arg0) throws RepositoryException {
-        // TODO Auto-generated method stub
-        return false;
+    /**
+     * @inheritDoc
+     */
+    public boolean hasNode(String relPath) throws RepositoryException {
+        return node.hasNode(relPath);
-    public boolean hasProperty(String arg0) throws RepositoryException {
-        // TODO Auto-generated method stub
-        return false;
+    /**
+     * @inheritDoc
+     */
+    public boolean hasProperty(String relPath) throws RepositoryException {
+        return node.hasProperty(relPath);
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return false;
+        return node.hasNodes();
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return false;
+        return node.hasProperties();
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return node.getPrimaryNodeType();
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return node.getMixinNodeTypes();
-    public boolean isNodeType(String arg0) throws RepositoryException {
-        // TODO Auto-generated method stub
-        return false;
+    /**
+     * @inheritDoc
+     */
+    public boolean isNodeType(String nodeTypeName) throws RepositoryException {
+        return node.isNodeType(nodeTypeName);
-    public void addMixin(String arg0) throws NoSuchNodeTypeException,
-            VersionException, ConstraintViolationException, LockException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-
+    /**
+     * @inheritDoc
+     */
+    public void addMixin(String mixinName)
+            throws NoSuchNodeTypeException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
+        node.addMixin(mixinName);
-    public void removeMixin(String arg0) throws NoSuchNodeTypeException,
-            VersionException, ConstraintViolationException, LockException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-
+    /**
+     * @inheritDoc
+     */
+    public void removeMixin(String mixinName)
+            throws NoSuchNodeTypeException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
+        node.removeMixin(mixinName);
-    public boolean canAddMixin(String arg0) throws NoSuchNodeTypeException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-        return false;
+    /**
+     * @inheritDoc
+     */
+    public boolean canAddMixin(String mixinName)
+            throws NoSuchNodeTypeException, RepositoryException {
+        return node.canAddMixin(mixinName);
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return node.getDefinition();
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        Version version = node.checkin();
+        return factory.getVersionDecorator(session, version);
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-
+        node.checkout();
-    public void doneMerge(Version arg0) throws VersionException,
-            InvalidItemStateException, UnsupportedRepositoryOperationException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-
+    /**
+     * @inheritDoc
+     */
+    public void doneMerge(Version version)
+            throws VersionException, InvalidItemStateException,
+            UnsupportedRepositoryOperationException, RepositoryException {
+        node.doneMerge(VersionDecorator.unwrap(version));
-    public void cancelMerge(Version arg0) throws VersionException,
-            InvalidItemStateException, UnsupportedRepositoryOperationException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-
+    /**
+     * @inheritDoc
+     */
+    public void cancelMerge(Version version)
+            throws VersionException, InvalidItemStateException,
+            UnsupportedRepositoryOperationException, RepositoryException {
+        node.cancelMerge(VersionDecorator.unwrap(version));
-    public void update(String arg0) throws NoSuchWorkspaceException,
-            AccessDeniedException, LockException, InvalidItemStateException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-
-    }
-
-    public NodeIterator merge(String arg0, boolean arg1)
+    /**
+     * @inheritDoc
+     */
+    public void update(String srcWorkspaceName)
-            VersionException, LockException, InvalidItemStateException,
-            RepositoryException {
-        // TODO Auto-generated method stub
-        return null;
+            LockException, InvalidItemStateException, RepositoryException {
+        node.update(srcWorkspaceName);
-    public String getCorrespondingNodePath(String arg0)
+    /**
+     * @inheritDoc
+     */
+    public NodeIterator merge(String srcWorkspace, boolean bestEffort)
+            throws NoSuchWorkspaceException, AccessDeniedException,
+            MergeException, LockException, InvalidItemStateException,
+            RepositoryException {
+        NodeIterator nodes = node.merge(srcWorkspace, bestEffort);
+        return new DecoratingNodeIterator(factory, session, nodes);
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public String getCorrespondingNodePath(String workspaceName)
-        // TODO Auto-generated method stub
-        return null;
+        return node.getCorrespondingNodePath(workspaceName);
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return false;
+        return node.isCheckedOut();
-    public void restore(String arg0, boolean arg1) throws VersionException,
-            ItemExistsException, UnsupportedRepositoryOperationException,
-            LockException, InvalidItemStateException, RepositoryException {
-        // TODO Auto-generated method stub
-
+    /**
+     * @inheritDoc
+     */
+    public void restore(String versionName, boolean removeExisting)
+            throws VersionException, ItemExistsException,
+            UnsupportedRepositoryOperationException, LockException,
+            InvalidItemStateException, RepositoryException {
+        node.restore(versionName, removeExisting);
-    public void restore(Version arg0, boolean arg1) throws VersionException,
-            ItemExistsException, UnsupportedRepositoryOperationException,
-            LockException, RepositoryException {
-        // TODO Auto-generated method stub
-
+    /**
+     * @inheritDoc
+     */
+    public void restore(Version version, boolean removeExisting)
+            throws VersionException, ItemExistsException,
+            UnsupportedRepositoryOperationException, LockException,
+            RepositoryException {
+        node.restore(VersionDecorator.unwrap(version), removeExisting);
-    public void restore(Version arg0, String arg1, boolean arg2)
+    /**
+     * @inheritDoc
+     */
+    public void restore(Version version,
+                        String relPath,
+                        boolean removeExisting)
-        // TODO Auto-generated method stub
-
+        node.restore(VersionDecorator.unwrap(version), relPath, removeExisting);
-    public void restoreByLabel(String arg0, boolean arg1)
+    /**
+     * @inheritDoc
+     */
+    public void restoreByLabel(String versionLabel, boolean removeExisting)
-        // TODO Auto-generated method stub
-
+        node.restoreByLabel(versionLabel, removeExisting);
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        VersionHistory hist = node.getVersionHistory();
+        return factory.getVersionHistoryDecorator(session, hist);
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
-        return null;
+        return factory.getVersionDecorator(session, node.getBaseVersion());
-    public Lock lock(boolean arg0, boolean arg1)
+    /**
+     * @inheritDoc
+     */
+    public Lock lock(boolean isDeep, boolean isSessionScoped)
-        Lock lock = node.lock(arg0, arg1);
-        return factory.getLockDecorator(this, lock);
+        Lock lock = node.lock(isDeep, isSessionScoped);
+        return factory.getLockDecorator(session, lock);
+    /**
+     * @inheritDoc
+     */
-        return node.getLock();
+        Lock lock = node.getLock();
+        return factory.getLockDecorator(session, lock);
+    /**
+     * @inheritDoc
+     */
+    /**
+     * @inheritDoc
+     */
-        // TODO Auto-generated method stub
+    /**
+     * @inheritDoc
+     */
-
