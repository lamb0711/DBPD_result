JCR-2946 - Improve implementation of DavResource#getProperty(DavPropertyName)
JCR-2948 - Add possibility to PROPFIND the JCR_NODETYPES_CND_LN property

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1155296 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.jcr.property.JcrDavPropertyNameSet;
+import org.apache.jackrabbit.webdav.observation.ObservationConstants;
-import org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery;
+import org.apache.jackrabbit.webdav.security.SecurityConstants;
+     * @param factory
+     * @param item
+    @Override
+    public DavProperty<?> getProperty(DavPropertyName name) {
+        DavProperty prop = super.getProperty(name);
+        if (prop == null) {
+            if (JCR_DEFINITION.equals(name)) {
+                if (exists()) {
+                    try {
+
+                        // protected 'definition' property revealing the item definition
+                        ItemDefinitionImpl val;
+                        if (item.isNode()) {
+                            val = NodeDefinitionImpl.create(((Node)item).getDefinition());
+                        } else {
+                            val = PropertyDefinitionImpl.create(((Property)item).getDefinition());
+                        }
+                        prop = new DefaultDavProperty<ItemDefinitionImpl>(JCR_DEFINITION, val, true);
+                    } catch (RepositoryException e) {
+                        // should not get here
+                        log.error("Error while accessing item definition: " + e.getMessage());
+                    }
+                }
+            } else if (JCR_ISNEW.equals(name)) {
+                // transaction resource additional protected properties
+                if (exists() && item.isNew()) {
+                    prop = new DefaultDavProperty<String>(JCR_ISNEW, null, true);
+                }
+            } else if (JCR_ISMODIFIED.equals(name)) {
+                // transaction resource additional protected properties
+                if (exists() && item.isModified()) {
+                    prop = new DefaultDavProperty<String>(JCR_ISMODIFIED, null, true);
+                }
+            } else if (ObservationConstants.SUBSCRIPTIONDISCOVERY.equals(name)) {
+                // observation resource
+                prop = subsMgr.getSubscriptionDiscovery(this);
+            } else if (SecurityConstants.CURRENT_USER_PRIVILEGE_SET.equals(name)) {
+                // TODO complete set of properties defined by RFC 3744
+                Privilege[] allPrivs = new Privilege[] {PRIVILEGE_JCR_READ,
+                        PRIVILEGE_JCR_ADD_NODE,
+                        PRIVILEGE_JCR_SET_PROPERTY,
+                        PRIVILEGE_JCR_REMOVE};
+                List<Privilege> currentPrivs = new ArrayList<Privilege>();
+                for (Privilege priv : allPrivs) {
+                    try {
+                        String path = getLocator().getRepositoryPath();
+                        getRepositorySession().checkPermission(path, priv.getName());
+                        currentPrivs.add(priv);
+                    } catch (AccessControlException e) {
+                        // ignore
+                        log.debug(e.toString());
+                    } catch (RepositoryException e) {
+                        // ignore
+                        log.debug(e.toString());
+                    }
+                }
+                prop =  new CurrentUserPrivilegeSetProperty(currentPrivs.toArray(new Privilege[currentPrivs.size()]));
+            }
+        }
+
+        return prop;
+    }
+
-     * NOTE: the displayname is not equivalent to {@link Item#getName() item name}
+     * NOTE: the display name is not equivalent to {@link Item#getName() item name}
+    @Override
+    protected void initPropertyNames() {
+        super.initPropertyNames();
+        if (exists()) {
+            names.addAll(JcrDavPropertyNameSet.EXISTING_ITEM_BASE_SET);
+            try {
+                if (item.getDepth() > 0) {
+                    names.add(JCR_PARENT);
+                }
+            } catch (RepositoryException e) {
+                log.warn("Error while accessing node depth: " + e.getMessage());
+            }
+            if (item.isNew()) {
+                names.add(JCR_ISNEW);
+            } else if (item.isModified()) {
+                names.add(JCR_ISMODIFIED);
+            }
+        } else {
+            names.addAll(JcrDavPropertyNameSet.ITEM_BASE_SET);
+        }
+    }
+
-                properties.add(new DefaultDavProperty<String>(JCR_DEPTH, String.valueOf(item.getDepth())));
+                int depth = item.getDepth();
+                properties.add(new DefaultDavProperty<String>(JCR_DEPTH, String.valueOf(depth)));
-                if (item.getDepth() > 0) {
+                if (depth > 0) {
-                // protected 'definition' property revealing the item definition
-                ItemDefinitionImpl val;
-                if (item.isNode()) {
-                    val = NodeDefinitionImpl.create(((Node)item).getDefinition());
-                } else {
-                    val = PropertyDefinitionImpl.create(((Property)item).getDefinition());
-                }
-                properties.add(new DefaultDavProperty<ItemDefinitionImpl>(JCR_DEFINITION, val, true));
-
-            // transaction resource additional protected properties
-            if (item.isNew()) {
-                properties.add(new DefaultDavProperty<String>(JCR_ISNEW, null, true));
-            } else if (item.isModified()) {
-                properties.add(new DefaultDavProperty<String>(JCR_ISMODIFIED, null, true));
-            }
-
-        // observation resource
-        SubscriptionDiscovery subsDiscovery = subsMgr.getSubscriptionDiscovery(this);
-        properties.add(subsDiscovery);
-
-        // TODO complete set of properties defined by RFC 3744
-        Privilege[] allPrivs = new Privilege[] {PRIVILEGE_JCR_READ,
-                                                PRIVILEGE_JCR_ADD_NODE,
-                                                PRIVILEGE_JCR_SET_PROPERTY,
-                                                PRIVILEGE_JCR_REMOVE};
-        List<Privilege> currentPrivs = new ArrayList<Privilege>();
-        for (Privilege priv : allPrivs) {
-            try {
-                String path = getLocator().getRepositoryPath();
-                getRepositorySession().checkPermission(path, priv.getName());
-                currentPrivs.add(priv);
-            } catch (AccessControlException e) {
-                // ignore
-                log.debug(e.toString());
-            } catch (RepositoryException e) {
-                // ignore
-                log.debug(e.toString());
-            }
-        }
-        properties.add(new CurrentUserPrivilegeSetProperty(currentPrivs.toArray(new Privilege[currentPrivs.size()])));
