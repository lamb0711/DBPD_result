Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.version.AbstractVersion;
+import org.apache.jackrabbit.core.version.AbstractVersionHistory;
-    private final SessionImpl session;
+    protected final SessionImpl session;
-    ItemManager(ItemStateManager itemStateProvider, HierarchyManager hierMgr,
-                SessionImpl session, NodeDefinition rootNodeDef,
-                String rootNodeUUID) {
+    protected ItemManager(ItemStateManager itemStateProvider, HierarchyManager hierMgr,
+                          SessionImpl session, NodeDefinition rootNodeDef,
+                          String rootNodeUUID) {
-            return new VersionImpl(this, session, id, state, def, listeners, version);
+            return createVersionInstance(id, state, def, listeners);
-            return new VersionHistoryImpl(this, session, id, state, def, listeners, history);
+            return createVersionHistoryInstance(id, state, def, listeners);
-
+    /**
+     * Create a version instance.
+     * @param id node id
+     * @param state node state
+     * @param def node definition
+     * @param listeners listeners
+     * @return version instance
+     * @throws RepositoryException if an error occurs
+     */
+    protected AbstractVersion createVersionInstance(
+            NodeId id, NodeState state, NodeDefinition def,
+            ItemLifeCycleListener[] listeners) throws RepositoryException {
+
+        InternalVersion version =
+                session.getVersionManager().getVersion(id.getUUID());
+        return new VersionImpl(this, session, id, state, def, listeners, version);
+    }
+
+    /**
+     * Create a version history instance.
+     * @param id node id
+     * @param state node state
+     * @param def node definition
+     * @param listeners listeners
+     * @return version instance
+     * @throws RepositoryException if an error occurs
+     */
+    protected AbstractVersionHistory createVersionHistoryInstance(
+            NodeId id, NodeState state, NodeDefinition def,
+            ItemLifeCycleListener[] listeners) throws RepositoryException {
+
+        InternalVersionHistory history =
+                session.getVersionManager().getVersionHistory(id.getUUID());
+        return new VersionHistoryImpl(this, session, id, state, def, listeners, history);
+    }
+
