JCR-160: Query index not in sync with workspace
- Improve error handling for uuids that have no node representation anymore, because they have been deleted in the meantime.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@209739 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.NodeIterator;
-class NodeIteratorImpl implements NodeIterator {
+class NodeIteratorImpl implements ScoreNodeIterator {
-    private int pos = 0;
+    protected int pos = 0;
+
+    /** Reference to the next node instance */
+    private NodeImpl next;
+        fetchNext();
+     * Returns the next <code>Node</code> in the result set.
+     *
+     * @return the next <code>Node</code> in the result set.
+     * @throws NoSuchElementException if iteration has no more <code>Node</code>s.
+     */
+    public NodeImpl nextNodeImpl() throws NoSuchElementException {
+        if (next == null) {
+            throw new NoSuchElementException();
+        }
+        NodeImpl n = next;
+        fetchNext();
+        return n;
+    }
+
+    /**
-     * Returns the number of <code>Node</code>s in this
-     * <code>NodeIterator</code>.
-     * @return the number of <code>Node</code>s in this
-     *   <code>NodeIterator</code>.
+     * Returns the number of nodes in this iterator.
+     * </p>
+     * Note: The number returned by this method may differ from the number
+     * of nodes actually returned by calls to hasNext() / getNextNode()! This
+     * is because this iterator works on a lazy instantiation basis and while
+     * iterating over the nodes some of them might have been deleted in the
+     * meantime. Those will not be returned by getNextNode().
+     *
+     * @return the number of node in this iterator.
-        return pos < uuids.length;
+        return next != null;
-    float getScore() throws NoSuchElementException {
+    public float getScore() throws NoSuchElementException {
-        return scores[pos].floatValue();
+        return scores[pos - 1].floatValue();
-     * Returns the next <code>Node</code> in the result set.
-     * @return the next <code>Node</code> in the result set.
-     * @throws NoSuchElementException if iteration has no more
-     *   <code>Node</code>s.
+     * Clears {@link #next} and tries to fetch the next Node instance.
+     * When this method returns {@link #next} refers to the next available
+     * node instance in this iterator. If {@link #next} is null when this
+     * method returns, then there are no more valid element in this iterator.
-    NodeImpl nextNodeImpl() throws NoSuchElementException {
-        if (pos >= uuids.length) {
-            throw new NoSuchElementException();
-        }
-        try {
-            return (NodeImpl) itemMgr.getItem(new NodeId(uuids[pos++]));
-        } catch (RepositoryException e) {
-            log.error("Exception retrieving Node with UUID: "
-                    + uuids[pos - 1] + ": " + e.toString());
-            throw new NoSuchElementException();
+    protected void fetchNext() {
+        // reset
+        next = null;
+        while (next == null && pos < uuids.length) {
+            try {
+                next = (NodeImpl) itemMgr.getItem(new NodeId(uuids[pos++]));
+            } catch (RepositoryException e) {
+                log.error("Exception retrieving Node with UUID: "
+                        + uuids[pos - 1] + ": " + e.toString());
+                // try next
+            }
