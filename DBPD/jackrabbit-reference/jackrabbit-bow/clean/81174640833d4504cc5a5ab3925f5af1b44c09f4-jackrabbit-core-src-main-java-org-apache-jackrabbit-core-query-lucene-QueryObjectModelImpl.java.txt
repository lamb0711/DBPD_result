JCR-1104: JSR 283 support
- support for prepared queries has been moved to existing Query interface
- removed PreparedQuery again

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@632309 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.ExecutablePreparedQuery;
-import javax.jcr.Value;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.HashSet;
-import java.util.Set;
- * <code>PreparedQueryImpl</code>...
+ * <code>QueryObjectModelImpl</code>...
-public class PreparedQueryImpl
-        extends AbstractQueryImpl
-        implements ExecutablePreparedQuery {
+public class QueryObjectModelImpl extends AbstractQueryImpl {
-     * Set&lt;Name>, where Name is a variable name in the QOM tree.
-     */
-    private final Set variableNames = new HashSet();
-
-    /**
-     * Binding of variable name to value. Maps {@link Name} to {@link Value}.
-     */
-    private final Map bindValues = new HashMap();
-
-    /**
-    public PreparedQueryImpl(SessionImpl session,
-                             ItemManager itemMgr,
-                             SearchIndex index,
-                             PropertyTypeRegistry propReg,
-                             QueryObjectModelTree qomTree) {
+    public QueryObjectModelImpl(SessionImpl session,
+                                ItemManager itemMgr,
+                                SearchIndex index,
+                                PropertyTypeRegistry propReg,
+                                QueryObjectModelTree qomTree) {
-        extractBindVariableNames(qomTree, variableNames);
+        extractBindVariableNames();
-                propReg, index.getSynonymProvider(), bindValues);
+                propReg, index.getSynonymProvider(), getBindVariableValues());
-    //-----------------------< ExecutablePreparedQuery >------------------------
-
-    /**
-     * Binds the given <code>value</code> to the variable named
-     * <code>varName</code>.
-     *
-     * @param varName name of variable in query
-     * @param value   value to bind
-     * @throws IllegalArgumentException if <code>varName</code> is not a valid
-     *                                  variable in this query.
-     * @throws RepositoryException      if an error occurs.
-     */
-    public void bindValue(Name varName, Value value)
-            throws IllegalArgumentException, RepositoryException {
-        if (!variableNames.contains(varName)) {
-            throw new IllegalArgumentException("not a valid variable in this query");
-        } else {
-            bindValues.put(varName, value);
-        }
-    }
-
-     * Extracts all {@link BindVariableValueImpl} from the <code>qomTree</code>
-     * into the <code>bindVariablesNames</code> set.
-     *
-     * @param qomTree            the QOM tree.
-     * @param bindVariableNames where to put the bind variable names.
+     * Extracts all {@link BindVariableValueImpl} from the {@link #qomTree}
+     * and adds it to the set of known variable names.
-    private void extractBindVariableNames(QueryObjectModelTree qomTree,
-                                           final Set bindVariableNames) {
+    private void extractBindVariableNames() {
-                    bindVariableNames.add(node.getBindVariableQName());
+                    addVariableName(node.getBindVariableQName());
