JCR-1674: Provide means for exception handling for QueryNodeVisitor implementations

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@677226 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Map;
+
+import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
+import javax.jcr.query.InvalidQueryException;
+
+import org.apache.commons.collections.map.ReferenceMap;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PathFactory;
-import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.NameFactory;
-import org.apache.jackrabbit.spi.PathFactory;
-import org.apache.commons.collections.map.ReferenceMap;
-
-import javax.jcr.query.InvalidQueryException;
-import javax.jcr.RepositoryException;
-import javax.jcr.NamespaceException;
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.List;
-import java.util.Map;
-        rqn.acceptOperands(new DefaultQueryNodeVisitor() {
-            public Object visit(PropertyFunctionQueryNode node, Object data) {
-                String functionName = node.getFunctionName();
-                if ((functionName.equals(PropertyFunctionQueryNode.LOWER_CASE)
-                        || functionName.equals(PropertyFunctionQueryNode.UPPER_CASE))
-                            && rqn.getValueType() != QueryConstants.TYPE_STRING) {
-                    String msg = "Upper and lower case function are only supported with String literals";
-                    exceptions.add(new InvalidQueryException(msg));
+        try {
+            rqn.acceptOperands(new DefaultQueryNodeVisitor() {
+                public Object visit(PropertyFunctionQueryNode node, Object data) {
+                    String functionName = node.getFunctionName();
+                    if ((functionName.equals(PropertyFunctionQueryNode.LOWER_CASE)
+                            || functionName.equals(PropertyFunctionQueryNode.UPPER_CASE))
+                                && rqn.getValueType() != QueryConstants.TYPE_STRING) {
+                        String msg = "Upper and lower case function are only supported with String literals";
+                        exceptions.add(new InvalidQueryException(msg));
+                    }
+                    return data;
-                return data;
-            }
-        }, null);
+            }, null);
+        }
+        catch (RepositoryException e) {
+            exceptions.add(e);
+        }
