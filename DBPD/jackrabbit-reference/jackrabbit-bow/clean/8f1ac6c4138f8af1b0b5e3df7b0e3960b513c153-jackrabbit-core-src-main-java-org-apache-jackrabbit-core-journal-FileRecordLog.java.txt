JCR-1850: Journal: Use buffered input / output streams

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@713072 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.BufferedOutputStream;
+import java.io.ByteArrayOutputStream;
-            DataInputStream in = new DataInputStream(new FileInputStream(logFile));
+            DataInputStream in = new DataInputStream(
+                    new BufferedInputStream(new FileInputStream(logFile), 128));
-            DataOutputStream out = new DataOutputStream(new FileOutputStream(logFile));
+            DataOutputStream out = new DataOutputStream(
+                    new BufferedOutputStream(new FileOutputStream(logFile), 128));
-        DataOutputStream out = new DataOutputStream(new FileOutputStream(logFile, true));
+        OutputStream out = new FileOutputStream(logFile, true);
-            out.writeUTF(journalId);
-            out.writeUTF(producerId);
-            out.writeInt(length);
+            DataBuffer buffer = new DataBuffer();
+            buffer.writeUTF(journalId);
+            buffer.writeUTF(producerId);
+            buffer.writeInt(length);
+            buffer.copy(out);
+
+    /**
+     * A simple helper class that writes to a buffer. The current buffer can
+     * be {@link #copy copied} to an output stream.
+     */
+    private static final class DataBuffer extends DataOutputStream {
+
+        public DataBuffer() {
+            super(new ByteArrayOutputStream());
+        }
+
+        /**
+         * Copies the bytes the are currently held in the buffer to the given
+         * output stream.
+         *
+         * @param out the output stream where the buffered data is written.
+         * @throws IOException if an error occurs while writing data to
+         *          <code>out</code>.
+         */
+        public void copy(OutputStream out) throws IOException {
+            byte[] buffer = ((ByteArrayOutputStream) super.out).toByteArray();
+            out.write(buffer);
+        }
+    }
