JCR-832 BundleDBPersistenceManager does not free blobStore resources


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@604211 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.persistence.util.BLOBStore;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+     * default logger
+     */
+    private static Logger log = LoggerFactory.getLogger(NodePropBundle.class);
+
+    /**
+     * the bundle binding that handles this bundle
+     */
+    private final BundleBinding binding;
+
+    /**
+     * @param binding the bundle binding
-    public NodePropBundle(NodeId id) {
+    public NodePropBundle(BundleBinding binding, NodeId id) {
+        this.binding = binding;
+     * @param binding the bundle binding
-    public NodePropBundle(NodeState state) {
-        this((NodeId) state.getId());
+    public NodePropBundle(BundleBinding binding, NodeState state) {
+        this(binding, (NodeId) state.getId());
-            old.destroy();
+            old.destroy(binding.getBlobStore());
-            pe.destroy();
+            pe.destroy(binding.getBlobStore());
+         * @param blobStore the blobstore that will destroy the blobs
-        private void destroy() {
-            if (type == PropertyType.BINARY) {
-                // destroy binary property values
-                for (int i=0; i<values.length; i++) {
-                    values[i].getBLOBFileValue().delete(true);
+        private void destroy(BLOBStore blobStore) {
+            // delete blobs if needed
+            if (blobIds != null) {
+                for (int i=0; i<blobIds.length; i++) {
+                    if (blobIds[i] != null) {
+                        try {
+                            blobStore.remove(blobIds[i]);
+                            log.debug("removed blob {}", blobIds[i]);
+                        } catch (Exception e) {
+                            log.error("Ingoring error while removing blob {}", blobIds[i], e);
+                        }
+                    }
-
-
-
-
