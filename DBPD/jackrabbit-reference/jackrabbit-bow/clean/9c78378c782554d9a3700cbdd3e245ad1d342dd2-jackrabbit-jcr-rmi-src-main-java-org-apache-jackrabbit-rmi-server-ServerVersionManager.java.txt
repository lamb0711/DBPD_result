JCR-3206 JSR-283 support for RMI / Implementation of the missing versioning parts

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1377571 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Node;
+import javax.jcr.Session;
+import javax.jcr.version.Version;
+    private final Session session;    
+    
-
-    public ServerVersionManager(
+    
+    public ServerVersionManager(Session session,
+        this.session = session;
-            return getFactory().getRemoteNode(manager.getActivity());
+            Node activity = manager.getActivity();
+            if (activity == null) {
+                return null;
+            } else {
+                return getFactory().getRemoteNode(activity);
+            }
-	public void cancelMerge(String absPath, RemoteVersion version)
-			throws RepositoryException, RemoteException {
-	}
+    public void cancelMerge(String absPath, String versionIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.cancelMerge(absPath, version);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
-	public void doneMerge(String absPath, RemoteVersion version)
-			throws RepositoryException, RemoteException {
-	}
+    public void doneMerge(String absPath, String versionIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.doneMerge(absPath, version);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void restore(String[] versionIdentifiers, boolean removeExisting)
+            throws RepositoryException, RemoteException {
+        try {
+            Version[] versions = new Version[versionIdentifiers.length];
+            for (int i = 0; i < versions.length; i++) {
+                Version version = (Version) session.getNodeByIdentifier(versionIdentifiers[i]);
+                versions[i] = version;
+            }
+            manager.restore(versions, removeExisting);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void restore(String versionIdentifier, boolean removeExisting)
+            throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.restore(version, removeExisting);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public RemoteNode setActivity(String activityNodeIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Node newActivityNode;
+            if (activityNodeIdentifier == null) {
+                newActivityNode = null;
+            } else {
+                newActivityNode = session.getNodeByIdentifier(activityNodeIdentifier);
+            }
+            Node oldActivityNode = manager.setActivity(newActivityNode);
+            if (oldActivityNode == null) {
+                return null;
+            } else {
+                return getFactory().getRemoteNode(oldActivityNode);
+            }
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void removeActivity(String activityNodeIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Node activityNode = session.getNodeByIdentifier(activityNodeIdentifier);
+            manager.removeActivity(activityNode);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public RemoteIterator merge(String activityNodeIdentifier)
+            throws RepositoryException, RemoteException {
+        try {
+            Node activityNode = session.getNodeByIdentifier(activityNodeIdentifier);
+            return getFactory().getRemoteNodeIterator(manager.merge(activityNode));
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    @Override
+    public void restoreVI(String absPath, String versionIdentifier,
+            boolean removeExisting) throws RepositoryException, RemoteException {
+        try {
+            Version version = (Version) session.getNodeByIdentifier(versionIdentifier);
+            manager.restore(absPath, version, removeExisting);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
