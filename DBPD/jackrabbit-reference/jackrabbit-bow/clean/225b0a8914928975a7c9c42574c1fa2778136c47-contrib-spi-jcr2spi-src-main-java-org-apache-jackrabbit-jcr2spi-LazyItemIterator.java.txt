work in progress

- HierarchyManager: changes methods to take ItemState instead of ItemId
- HierarchyManager: remove log-utility methods (saveGetJCRPath)
- HierarchyManager: remove CachingHierachyManager. not used
- ItemManager: changes methods to take ItemState instead of ItemId
- ItemStateValidator: remove utility methods not related to validation
- new class LogUtil that provides static saveGetJCRPath methods previously
  present on HierarchyManager, ItemStateValidator
- NodeState: add method 'getPropertyEntries()'
- create interface ChildPropertyEntry
- let PropertyReference implement ChildPropertyEntry

TODO: query/NodeIteratorImpl needs to be fixed. 


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429652 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.ItemId;
+import org.apache.jackrabbit.jcr2spi.state.ItemState;
- * {@link #getSize()} might appear to be shrinking while iterating over the
- * items.
- * todo should getSize() better always return -1?
- *
- * @see #getSize()
+ * {@link #getSize()} always returns -1.
+    private static final long UNDEFINED_SIZE = -1;
+
-    /** the list of item ids */
-    private final List idList;
+    /** the list of item states */
+    private final List stateList;
-     * @param ids Collection of item id's
+     * @param stateList Collection of item states
-    public LazyItemIterator(ItemManager itemMgr, Collection ids) {
+    public LazyItemIterator(ItemManager itemMgr, Collection stateList) {
-        this.idList = new ArrayList(ids);
+        this.stateList = new ArrayList(stateList);
-        while (next == null && pos < idList.size()) {
-            ItemId id = (ItemId) idList.get(pos);
+        while (next == null && pos < stateList.size()) {
+            ItemState state = (ItemState) stateList.get(pos);
-                next = itemMgr.getItem(id);
+                next = itemMgr.getItem(state);
-                log.debug("ignoring nonexistent item " + id);
+                log.debug("ignoring nonexistent item " + state);
-                idList.remove(pos);
+                stateList.remove(pos);
-                log.error("failed to fetch item " + id + ", skipping...", e);
+                log.error("failed to fetch item " + state + ", skipping...", e);
-                idList.remove(pos);
+                stateList.remove(pos);
-     * Note that the size of the iterator as reported by {@link #getSize()}
-     * might appear to be shrinking while iterating because items that for
-     * some reason cannot be retrieved through this iterator are silently
-     * skipped, thus reducing the size of this iterator.
-     *
-     * todo better to always return -1?
+     * Always returns -1
-        return idList.size();
+        // DIFF JR always return -1, since original list may contains items that
+        // are not accessible due to access constraints
+        return UNDEFINED_SIZE;
-            if (pos >= idList.size()) {
+            if (pos >= stateList.size()) {
-            ItemId id = (ItemId) idList.get(pos);
+            ItemState state = (ItemState) stateList.get(pos);
-            while (!itemMgr.itemExists(id)) {
-                log.debug("ignoring nonexistent item " + id);
+            while (!itemMgr.itemExists(state)) {
+                log.debug("ignoring nonexistent item " + state);
-                idList.remove(pos);
-                if (pos >= idList.size()) {
+                stateList.remove(pos);
+                if (pos >= stateList.size()) {
-                id = (ItemId) idList.get(pos);
+                state = (ItemState) stateList.get(pos);
