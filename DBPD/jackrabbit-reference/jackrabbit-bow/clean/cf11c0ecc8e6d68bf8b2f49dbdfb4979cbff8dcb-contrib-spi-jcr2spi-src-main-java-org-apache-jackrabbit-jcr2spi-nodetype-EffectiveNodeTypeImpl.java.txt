work in progress

- minor improvement and some sync



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497068 13f79535-47bb-0310-9956-ffa450edef68

-    // node type registry
-    private final NodeTypeRegistry ntReg;
-
-    private EffectiveNodeTypeImpl(NodeTypeRegistry ntReg) {
-        this.ntReg = ntReg;
+    private EffectiveNodeTypeImpl() {
-     * @param ntdMap
+     * @param ntdMap 
-        EffectiveNodeTypeImpl ent = new EffectiveNodeTypeImpl(ntReg);
+        EffectiveNodeTypeImpl ent = new EffectiveNodeTypeImpl();
-     * @return
+     * @return a new EffectiveNodeType
-    static EffectiveNodeType create(NodeTypeRegistryImpl ntReg) {
-        return new EffectiveNodeTypeImpl(ntReg);
+    static EffectiveNodeType create() {
+        return new EffectiveNodeTypeImpl();
-    public void checkAddNodeConstraints(QName name)
+    public boolean includesNodeTypes(QName[] nodeTypeNames) {
+        return allNodeTypes.containsAll(Arrays.asList(nodeTypeNames));
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public void checkAddNodeConstraints(QName name, NodeTypeRegistry ntReg)
-            getApplicableNodeDefinition(name, null);
+            getApplicableNodeDefinition(name, null, ntReg);
-    public void checkAddNodeConstraints(QName name, QName nodeTypeName)
+    public void checkAddNodeConstraints(QName name, QName nodeTypeName, NodeTypeRegistry ntReg)
-        QNodeDefinition nd = getApplicableNodeDefinition(name, nodeTypeName);
+        QNodeDefinition nd = getApplicableNodeDefinition(name, nodeTypeName, ntReg);
-    public QNodeDefinition getApplicableNodeDefinition(QName name, QName nodeTypeName)
+    public QNodeDefinition getApplicableNodeDefinition(QName name, QName nodeTypeName,
+                                                       NodeTypeRegistry ntReg)
+        EffectiveNodeType entTarget;
+        if (nodeTypeName != null) {
+            entTarget = ntReg.getEffectiveNodeType(nodeTypeName);
+        } else {
+            entTarget = null;
+        }
+
-                QItemDefinition qDef = defs[i];
-                if (qDef.definesNode()) {
-                    QNodeDefinition nd = (QNodeDefinition) qDef;
+                QItemDefinition def = defs[i];
+                if (def.definesNode()) {
+                    QNodeDefinition nd = (QNodeDefinition) def;
-                    if (nodeTypeName != null) {
-                        try {
-                            // check node type constraints
-                            checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
-                        } catch (ConstraintViolationException cve) {
-                            // ignore and try next
-                            continue;
+                    if (entTarget != null && nd.getRequiredPrimaryTypes() != null) {
+                        // check 'required primary types' constraint
+                        if (entTarget.includesNodeTypes(nd.getRequiredPrimaryTypes())) {
+                            // found named node definition
+                            return nd;
-                        // found node definition
-                        return nd;
-            if (nodeTypeName != null) {
-                try {
-                    // check node type constraint
-                    checkRequiredPrimaryType(nodeTypeName, nd.getRequiredPrimaryTypes());
-                } catch (ConstraintViolationException e) {
-                    // ignore and try next
-                    continue;
+            if (entTarget != null && nd.getRequiredPrimaryTypes() != null) {
+                // check 'required primary types' constraint
+                if (entTarget.includesNodeTypes(nd.getRequiredPrimaryTypes())) {
+                    // found residual node definition
+                    return nd;
-                // found residual node definition
-                return nd;
-                                            boolean multiValued)
-            throws ConstraintViolationException {
+                                                               boolean multiValued)
+        throws ConstraintViolationException {
-    private QItemDefinition[] getAllItemDefs() {
-        if (namedItemDefs.size() == 0 && unnamedItemDefs.size() == 0) {
-            return QItemDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            defs.addAll((List) iter.next());
-        }
-        defs.addAll(unnamedItemDefs);
-        if (defs.size() == 0) {
-            return QItemDefinition.EMPTY_ARRAY;
-        }
-        return (QItemDefinition[]) defs.toArray(new QItemDefinition[defs.size()]);
-    }
-    private boolean hasNamedItemDef(QName name) {
-        return namedItemDefs.containsKey(name);
-    }
-
-    private QNodeDefinition[] getNamedNodeDefs() {
-        if (namedItemDefs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
-                if (qDef.definesNode()) {
-                    defs.add(qDef);
-                }
-            }
-        }
-        if (defs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
-    }
-
-    private QNodeDefinition[] getNamedNodeDefs(QName name) {
-        List list = (List) namedItemDefs.get(name);
-        if (list == null || list.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(list.size());
-        Iterator iter = list.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
-            if (qDef.definesNode()) {
-                defs.add(qDef);
-            }
-        }
-        if (defs.size() == 0) {
-            return QNodeDefinition.EMPTY_ARRAY;
-        }
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
-    }
-
-    private QPropertyDefinition[] getNamedPropDefs() {
-        if (namedItemDefs.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
-                if (!qDef.definesNode()) {
-                    defs.add(qDef);
-                }
-            }
-        }
-        if (defs.size() == 0) {
-            return QPropertyDefinition.EMPTY_ARRAY;
-        }
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
-    }
-
-     * @param nodeTypeName
-     * @param requiredPrimaryTypes
-     * @throws ConstraintViolationException
-     * @throws NoSuchNodeTypeException
-     */
-    private void checkRequiredPrimaryType(QName nodeTypeName, QName[] requiredPrimaryTypes)
-            throws ConstraintViolationException, NoSuchNodeTypeException {
-        if (requiredPrimaryTypes == null) {
-            // no constraint
-            return;
-        }
-        EffectiveNodeType ent = ntReg.getEffectiveNodeType(nodeTypeName);
-        for (int i = 0; i < requiredPrimaryTypes.length; i++) {
-            if (!ent.includesNodeType(requiredPrimaryTypes[i])) {
-                throw new ConstraintViolationException("node type constraint not satisfied: " + requiredPrimaryTypes[i]);
-            }
-        }
-    }
-
-    /**
-        EffectiveNodeTypeImpl clone = new EffectiveNodeTypeImpl(ntReg);
+        EffectiveNodeTypeImpl clone = new EffectiveNodeTypeImpl();
