JCR-2957 - Improve password hashing

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1099352 13f79535-47bb-0310-9956-ffa450edef68

+import java.security.SecureRandom;
-    private final String cryptedPassword;
+    private final String salt;
+
+    private final String hashedPassword;
+     * @deprecated
-        cryptedPassword = crypt(password, algorithm);
+        salt = null; // backwards compatibility.
+        hashedPassword = generateHash(password, algorithm, salt);
-     * given <code>userId</code> and <code>cryptedPassword</code> strings.
+     * given <code>userId</code> and <code>hashedPassword</code> strings.
-     * and calls {@link Text#digest(String, byte[])} using the
+     * and calls {@link Text#digest} using the
-     * @param cryptedPassword
+     * @param hashedPassword
-    public CryptedSimpleCredentials(String userId, String cryptedPassword) throws NoSuchAlgorithmException, UnsupportedEncodingException {
+    public CryptedSimpleCredentials(String userId, String hashedPassword) throws NoSuchAlgorithmException, UnsupportedEncodingException {
-        if (cryptedPassword == null) {
+        if (hashedPassword == null) {
-        String algo =  extractAlgorithm(cryptedPassword);
+        String algo =  extractAlgorithm(hashedPassword);
-            // password is plain text including those starting with {invalidAlgorithm}
+            // password is plain text (including those starting with {invalidAlgorithm})
-            this.cryptedPassword = crypt(cryptedPassword, algorithm);
+            salt = generateSalt();
+            this.hashedPassword = generateHash(hashedPassword, algorithm, salt);
-            // password is already encrypted and started with {validAlgorithm}
+            // password is already hashed and started with {validAlgorithm}
-            this.cryptedPassword = cryptedPassword;
+            salt = extractSalt(hashedPassword, algorithm);
+            this.hashedPassword = hashedPassword;
-        return cryptedPassword;
+        return hashedPassword;
-            return cryptedPassword.equals(crypt(String.valueOf(credentials.getPassword()), algorithm));
+            return hashedPassword.equals(generateHash(String.valueOf(credentials.getPassword()), algorithm, salt));
-     * @return Digest of the given password with leading algorithm information.
+     * @param salt The salt to be used for the digest.
+     * @return Digest of the given password with leading algorithm and optionally
+     * salt information.
-    private static String crypt(String pwd, String algorithm)
+    private static String generateHash(String pwd, String algorithm, String salt)
-        password.append(Text.digest(algorithm, pwd.getBytes("UTF-8")));
+        if (salt != null && salt.length() > 0) {
+            password.append(salt).append("-");
+            StringBuilder data = new StringBuilder();
+            data.append(salt).append(pwd);
+            password.append(Text.digest(algorithm, data.toString().getBytes("UTF-8")));
+        } else {
+            password.append(Text.digest(algorithm, pwd.getBytes("UTF-8")));            
+        }
-     * leading <code>{algorith}</code> such as created by {@link #crypt(String, String)
+     * leading <code>{algorithm}</code> such as created by {@link #generateHash(String, String, String)
-     * @param cryptedPwd
+     * @param hashedPwd
-    private static String extractAlgorithm(String cryptedPwd) {
-        int end = cryptedPwd.indexOf("}");
-        if (cryptedPwd.startsWith("{") && end > 0) {
-            String algorithm = cryptedPwd.substring(1, end);
+    private static String extractAlgorithm(String hashedPwd) {
+        int end = hashedPwd.indexOf("}");
+        if (hashedPwd.startsWith("{") && end > 0) {
+            String algorithm = hashedPwd.substring(1, end);
+
+    /**
+     * Extract the salt from the password hash.
+     *
+     * @param hashedPwd
+     * @param algorithm
+     * @return salt or <code>null</code>
+     */
+    private static String extractSalt(String hashedPwd, String algorithm) {
+        int start = algorithm.length()+2;
+        int end = hashedPwd.indexOf("-", start);
+        if (end > -1) {
+            return hashedPwd.substring(start, end);
+        }
+
+        // no salt 
+        return null;
+    }
+
+    /**
+     * Generate a new random salt for password digest.
+     *
+     * @return a new random salt.
+     */
+    private static String generateSalt() {
+        SecureRandom random = new SecureRandom();
+        byte salt[] = new byte[8];
+        random.nextBytes(salt);
+
+        StringBuffer res = new StringBuffer(salt.length * 2);
+        for (byte b : salt) {
+            res.append(Text.hexTable[(b >> 4) & 15]);
+            res.append(Text.hexTable[b & 15]);
+        }
+        return res.toString();
+    }
