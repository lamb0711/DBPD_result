JCR-1010: Test failures with spi2jcr in AddEventListenerTest

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@553547 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.NameFormat;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
+import javax.jcr.Session;
+import javax.jcr.Node;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.nodetype.NodeType;
+    private final SessionInfoImpl sessionInfo;
+
-    EventSubscription(IdFactory idFactory, NamespaceResolver nsResolver) {
+    EventSubscription(IdFactory idFactory, SessionInfoImpl sessionInfo) {
-        this.nsResolver = nsResolver;
+        this.sessionInfo = sessionInfo;
+        this.nsResolver = sessionInfo.getNamespaceResolver();
+                Session session = sessionInfo.getSession();
+                Node node = null;
+                        node = session.getItem(e.getPath()).getParent();
+                        node = session.getItem(e.getPath()).getParent();
+                QName nodeTypeName = null;
+                QName[] mixinTypes = new QName[0];
+                if (node != null) {
+                    try {
+                        parentId = idFactory.createNodeId(node.getUUID(), null);
+                    } catch (UnsupportedRepositoryOperationException ex) {
+                        // not referenceable
+                    }
+                    nodeTypeName = NameFormat.parse(
+                            node.getPrimaryNodeType().getName(), nsResolver);
+                    mixinTypes = getNodeTypeNames(
+                            node.getMixinNodeTypes(), nsResolver);
+                }
-                        null, new QName[0], e.getUserID());
+                        nodeTypeName, mixinTypes, e.getUserID());
+
+    /**
+     * Returns the qualified names of the passed node types using the namespace
+     * resolver to parse the names.
+     *
+     * @param nt         the node types
+     * @param nsResolver the namespace resolver.
+     * @return the qualified names of the node types.
+     * @throws IllegalNameException   if a node type returns an illegal name.
+     * @throws UnknownPrefixException if the nameo of a node type contains a
+     *                                prefix that is not known to <code>nsResolver</code>.
+     */
+    private static QName[] getNodeTypeNames(NodeType[] nt,
+                                     NamespaceResolver nsResolver)
+            throws IllegalNameException, UnknownPrefixException {
+        QName[] names = new QName[nt.length];
+        for (int i = 0; i < nt.length; i++) {
+            QName ntName = NameFormat.parse(nt[i].getName(), nsResolver);
+            names[i] = ntName;
+        }
+        return names;
+    }
