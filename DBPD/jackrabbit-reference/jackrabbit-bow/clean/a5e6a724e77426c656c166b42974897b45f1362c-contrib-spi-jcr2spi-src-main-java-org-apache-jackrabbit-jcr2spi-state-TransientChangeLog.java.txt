- Remove node id from NodeState
- Add node name and uuid to NodeState
- Remove unnecessary calls to getId()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431348 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.Path;
-        NodeId id;
-        if (uuid == null) {
-            id = idFactory.createNodeId(parent.getNodeId(), Path.create(name, 0));
-        } else {
-            id = idFactory.createNodeId(uuid);
-        }
-        NodeState nodeState = new NodeState(id, parent, null,
+        NodeState nodeState = new NodeState(name, uuid, parent, null,
-        // TODO: remove from added set of change log
+        addedStates.remove(created);
-        // TODO: remove from modified set of change log
+        modifiedStates.remove(modified);
-        // TODO: remove from deleted set of change log
+        deletedStates.remove(destroyed);
+        switch (state.getStatus()) {
+            case ItemState.STATUS_EXISTING:
+                if (previousStatus == ItemState.STATUS_EXISTING_MODIFIED) {
+                    // was modified and is now refreshed
+                    modifiedStates.remove(state);
+                } else if (previousStatus == ItemState.STATUS_EXISTING_REMOVED) {
+                    // was removed and is now refreshed
+                    deletedStates.remove(state);
+                } else if (previousStatus == ItemState.STATUS_STALE_MODIFIED) {
+                    // was modified and state and is now refreshed
+                    modifiedStates.remove(state);
+                }
+                break;
+            case ItemState.STATUS_EXISTING_MODIFIED:
+                modifiedStates.add(state);
+                break;
+            case ItemState.STATUS_EXISTING_REMOVED:
+                // check if modified earlier
+                if (previousStatus == ItemState.STATUS_EXISTING_MODIFIED) {
+                    modifiedStates.remove(state);
+                }
+                deletedStates.add(state);
+                break;
+            case ItemState.STATUS_REMOVED:
+                // remove from added
+                addedStates.remove(state);
+                break;
+            case ItemState.STATUS_STALE_DESTROYED:
+                // state is now stale. keep in modified. wait until refreshed.
+                // TODO: how is a stale destroyed state refreshed?
+                break;
+            case ItemState.STATUS_STALE_MODIFIED:
+                // state is now stale. keep in modified. wait until refreshed
+                break;
+            case ItemState.STATUS_NEW:
+                // should never happen
+                log.warn("ItemState changed status to 'new'");
+                break;
+            case ItemState.STATUS_UNDEFINED:
+                // should never happen
+                log.warn("ItemState changed status to 'undefined'");
+                break;
+            default:
+                log.warn("ItemState has invalid status: " + state.getStatus());
+        }
