work in progress

- MKCOL fails if resource already exists => problem with SNSs
- make sure resource hrefs are always cached without trailing /


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@463335 13f79535-47bb-0310-9956-ffa450edef68

-    private final HttpClient client;
+    private final HostConfiguration hostConfig;
+    private final HashMap clients = new HashMap();
-            HostConfiguration hostConfig = new HostConfiguration();
+            hostConfig = new HostConfiguration();
-            client = new HttpClient(new MultiThreadedHttpConnectionManager());
-            client.setHostConfiguration(hostConfig);
-            // always send authentication not waiting for 401
-            client.getParams().setAuthenticationPreemptive(true);
-
+    private static boolean isSameResource(String requestURI, MultiStatusResponse response) {
+        String href = response.getHref();
+        if (href.endsWith("/")) {
+            href = href.substring(0, href.length() - 1);
+        }
+        return requestURI.equals(href);
+    }
+
-        // NOTE: null credentials only work if 'missing-auth-mapping' param is
-        // set on the server
-        client.getState().setCredentials(AuthScope.ANY, credentials);
-        return client;
+        if (clients.containsKey(credentials)) {
+            return (HttpClient) clients.get(credentials);
+        } else {
+            HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
+            client.setHostConfiguration(hostConfig);
+            // always send authentication not waiting for 401
+            client.getParams().setAuthenticationPreemptive(true);
+            // NOTE: null credentials only work if 'missing-auth-mapping' param is
+            // set on the server
+            client.getState().setCredentials(AuthScope.ANY, credentials);
+
+            clients.put(credentials, client);
+            return client;
+        }
-            return parentUri + NameFormat.format(childName, nsResolver);
+            return parentUri + "/" + NameFormat.format(childName, nsResolver);
-                String respHref = responses[i].getHref();
-                if (uri.equals(respHref)) {
+                if (isSameResource(uri, responses[i])) {
-                String uri = getItemUri(parentId, nodeName, sessionInfo);
+                // TODO: TOBEFIXED. WebDAV does not allow MKCOL for existing resource -> problem with SNS
+                // use fake name instead (see also #importXML)
+                QName fakeName = new QName(QName.NS_DEFAULT_URI, UUID.randomUUID().toString());
+                String uri = getItemUri(parentId, fakeName, sessionInfo);
-                if (nodetypeName != null || uuid != null) {
-                    Document body = DomUtil.BUILDER_FACTORY.newDocumentBuilder().newDocument();
-                    Element nodeElement = DomUtil.addChildElement(body, NODE_ELEMENT, SV_NAMESPACE);
-                    DomUtil.setAttribute(nodeElement, NAME_ATTRIBUTE, SV_NAMESPACE, Text.getName(uri, true));
+                Document body = DomUtil.BUILDER_FACTORY.newDocumentBuilder().newDocument();
+                Element nodeElement = DomUtil.addChildElement(body, NODE_ELEMENT, SV_NAMESPACE);
+                String nameAttr = NameFormat.format(nodeName, nsResolver);
+                DomUtil.setAttribute(nodeElement, NAME_ATTRIBUTE, SV_NAMESPACE, nameAttr);
-                    if (nodetypeName != null) {
-                        Element propElement = DomUtil.addChildElement(nodeElement, PROPERTY_ELEMENT, SV_NAMESPACE);
-                        DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, NameFormat.format(QName.JCR_PRIMARYTYPE, nsResolver));
-                        DomUtil.setAttribute(propElement, TYPE_ATTRIBUTE, SV_NAMESPACE, PropertyType.nameFromValue(PropertyType.NAME));
-                        DomUtil.addChildElement(propElement, VALUE_ELEMENT, SV_NAMESPACE, NameFormat.format(nodetypeName, nsResolver));
-                    }
-                    if (uuid != null) {
-                        Element propElement = DomUtil.addChildElement(nodeElement, PROPERTY_ELEMENT, SV_NAMESPACE);
-                        DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, NameFormat.format(QName.JCR_UUID, nsResolver));
-                        DomUtil.setAttribute(propElement, TYPE_ATTRIBUTE, SV_NAMESPACE, PropertyType.nameFromValue(PropertyType.STRING));
-                        DomUtil.addChildElement(propElement, VALUE_ELEMENT, SV_NAMESPACE, uuid);
-                    }
-                    method.setRequestBody(body);
+                // nodetype must never be null
+                Element propElement = DomUtil.addChildElement(nodeElement, PROPERTY_ELEMENT, SV_NAMESPACE);
+                DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, NameFormat.format(QName.JCR_PRIMARYTYPE, nsResolver));
+                DomUtil.setAttribute(propElement, TYPE_ATTRIBUTE, SV_NAMESPACE, PropertyType.nameFromValue(PropertyType.NAME));
+                DomUtil.addChildElement(propElement, VALUE_ELEMENT, SV_NAMESPACE, NameFormat.format(nodetypeName, nsResolver));
+                // optional uuid
+                if (uuid != null) {
+                    propElement = DomUtil.addChildElement(nodeElement, PROPERTY_ELEMENT, SV_NAMESPACE);
+                    DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, NameFormat.format(QName.JCR_UUID, nsResolver));
+                    DomUtil.setAttribute(propElement, TYPE_ATTRIBUTE, SV_NAMESPACE, PropertyType.nameFromValue(PropertyType.STRING));
+                    DomUtil.addChildElement(propElement, VALUE_ELEMENT, SV_NAMESPACE, uuid);
+                method.setRequestBody(body);
