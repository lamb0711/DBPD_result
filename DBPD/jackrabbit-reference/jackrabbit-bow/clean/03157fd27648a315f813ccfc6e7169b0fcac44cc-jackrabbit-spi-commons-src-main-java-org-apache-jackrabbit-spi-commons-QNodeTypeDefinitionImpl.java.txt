Fixing issues with empty (null) fields


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@798306 13f79535-47bb-0310-9956-ffa450edef68

-        this(resolver.getQName(def.getName()),
-                getNames(def.getDeclaredSupertypeNames(), resolver), null, def.isMixin(),
-                def.isAbstract(), def.isQueryable(), def.hasOrderableChildNodes(),
+        this(resolver.getQName(def.getName()), def, resolver, qValueFactory);
+    }
+
+    /**
+     * Internal constructor to avoid resolving def.getName() 3 times.
+     * @param name name of the definition
+     * @param def node type definition
+     * @param resolver resolver
+     * @param qValueFactory value factory
+     * @throws RepositoryException if an error occurs
+     */
+    private QNodeTypeDefinitionImpl(Name name, NodeTypeDefinition def,
+                                   NamePathResolver resolver,
+                                   QValueFactory qValueFactory)
+            throws RepositoryException {
+        this(name,
+                getNames(def.getDeclaredSupertypeNames(), resolver),
+                null,
+                def.isMixin(),
+                def.isAbstract(),
+                def.isQueryable(),
+                def.hasOrderableChildNodes(),
-                createQPropertyDefinitions(def.getDeclaredPropertyDefinitions(), resolver, qValueFactory),
-                createQNodeDefinitions(def.getDeclaredChildNodeDefinitions(), resolver));
+                createQPropertyDefinitions(name, def.getDeclaredPropertyDefinitions(), resolver, qValueFactory),
+                createQNodeDefinitions(name, def.getDeclaredChildNodeDefinitions(), resolver));
-    private static QPropertyDefinition[] createQPropertyDefinitions(PropertyDefinition[] pds,
+    private static QPropertyDefinition[] createQPropertyDefinitions(Name declName,
+                                                                    PropertyDefinition[] pds,
+        if (pds == null || pds.length == 0) {
+            return QPropertyDefinition.EMPTY_ARRAY;
+        }
-            Name declName = resolver.getQName(propDef.getDeclaringNodeType().getName());
-            QValue[] defVls = ValueFormat.getQValues(propDef.getDefaultValues(), resolver, qValueFactory);
+            // check if propDef provides declaring node type and if it matches 'this' one.
+            if (propDef.getDeclaringNodeType() != null) {
+                if (!declName.equals(resolver.getQName(propDef.getDeclaringNodeType().getName()))) {
+                    throw new RepositoryException("Property definition specified invalid declaring nodetype: "
+                            + propDef.getDeclaringNodeType().getName() + ", but should be " + declName);
+                }
+            }
+            QValue[] defVls = propDef.getDefaultValues() == null
+                    ? QValue.EMPTY_ARRAY
+                    : ValueFormat.getQValues(propDef.getDefaultValues(), resolver, qValueFactory);
-            QValueConstraint[] constraints = new QValueConstraint[jcrConstraints.length];
-            for (int j=0; j<constraints.length; j++) {
-                constraints[j] = ValueConstraint.create(propDef.getRequiredType(), jcrConstraints[j], resolver);
+            QValueConstraint[] constraints = QValueConstraint.EMPTY_ARRAY;
+            if (jcrConstraints != null && jcrConstraints.length > 0) {
+                constraints = new QValueConstraint[jcrConstraints.length];
+                for (int j=0; j<constraints.length; j++) {
+                    constraints[j] = ValueConstraint.create(propDef.getRequiredType(), jcrConstraints[j], resolver);
+                }
-    private static QNodeDefinition[] createQNodeDefinitions(NodeDefinition[] nds, NamePathResolver resolver) throws RepositoryException {
+    private static QNodeDefinition[] createQNodeDefinitions(Name declName,
+                                                            NodeDefinition[] nds,
+                                                            NamePathResolver resolver)
+            throws RepositoryException {
+        if (nds == null || nds.length == 0) {
+            return QNodeDefinition.EMPTY_ARRAY;
+        }
-            Name declName = resolver.getQName(nodeDef.getDeclaringNodeType().getName());
+            // check if propDef provides declaring node type and if it matches 'this' one.
+            if (nodeDef.getDeclaringNodeType() != null) {
+                if (!declName.equals(resolver.getQName(nodeDef.getDeclaringNodeType().getName()))) {
+                    throw new RepositoryException("Childnode definition specified invalid declaring nodetype: "
+                            + nodeDef.getDeclaringNodeType().getName() + ", but should be " + declName);
+                }
+            }
