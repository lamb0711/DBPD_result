JCR-1591: JSR 283: NodeType Management
JCR-2091: Searchability settings in PropertyDefinition


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@774303 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.qom.QueryObjectModelConstants;
+    /*
+     * The 'fulltext searchable' flag.
+     */
+    private boolean fullTextSearchable = true;
+
+    /*
+     * The 'query orderable' flag.
+     */
+    private boolean queryOrderable = true;
+
+    /*
+     * The 'query operators.
+     */
+    private String[] queryOperators = new String[]{
+            QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO,
+            QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN,
+            QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO,
+            QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN,
+            QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO,
+            QueryObjectModelConstants.JCR_OPERATOR_LIKE,
+            QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO
+    };
+
+
+    /**
+     * Sets the 'fulltext searchable' flag.
+     *
+     * @param fullTextSearchable
+     */
+    public void setFullTextSearchable(boolean fullTextSearchable) {
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+        this.fullTextSearchable = fullTextSearchable;
+    }
+
+    /**
+     * Sets the 'fulltext searchable' flag.
+     *
+     * @param queryOrderable
+     */
+    public void setQueryOrderable(boolean queryOrderable) {
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+        this.queryOrderable = queryOrderable;
+    }
+
+    /**
+     * Sets the 'available' query operators.
+     *
+     * @param queryOperators
+     */
+    public void setAvailableQueryOperators(String[] queryOperators) {
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+        if (queryOperators != null) {
+            this.queryOperators = queryOperators;
+        } else {
+            this.queryOperators = new String[0];
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public String[] getAvailableQueryOperators() {
+        return queryOperators;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean isFullTextSearchable() {
+        return fullTextSearchable;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean isQueryOrderable() {
+        return queryOrderable;
+    }
+
-                    && multiple == other.multiple;
+                    && multiple == other.multiple
+                    && Arrays.equals(queryOperators, other.queryOperators)
+                    && queryOrderable == other.queryOrderable
+                    && fullTextSearchable == other.fullTextSearchable;
