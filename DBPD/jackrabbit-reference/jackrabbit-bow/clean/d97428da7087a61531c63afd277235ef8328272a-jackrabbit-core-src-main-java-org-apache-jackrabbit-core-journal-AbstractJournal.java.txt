JCR-3427: JCR-3138 may cause resource starvation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1387021 13f79535-47bb-0310-9956-ffa450edef68

-        if (internalVersionManager != null) {
-            VersioningLock.ReadLock lock =
-                internalVersionManager.acquireReadLock();
-            try {
+        for (;;) {
+            if (internalVersionManager != null) {
+                VersioningLock.ReadLock lock =
+                        internalVersionManager.acquireReadLock();
+                try {
+                    internalSync();
+                } finally {
+                    lock.release();
+                }
+            } else {
-            } finally {
-                lock.release();
-        } else {
-            internalSync();
+            if (syncAgainOnNewRecords()) {
+                // sync again if there are more records available
+                RecordIterator it = getRecords(getMinimalRevision());
+                try {
+                    if (it.hasNext()) {
+                        continue;
+                    }
+                } finally {
+                    it.close();
+                }
+            }
+            break;
-        for (;;) {
-            RecordIterator iterator = getRecords(startRevision);
-            long stopRevision = Long.MIN_VALUE;
-    
-            try {
-                while (iterator.hasNext()) {
-                    Record record = iterator.nextRecord();
-                    if (record.getJournalId().equals(id)) {
-                        log.info("Record with revision '" + record.getRevision()
-                                + "' created by this journal, skipped.");
-                    } else {
-                        RecordConsumer consumer = getConsumer(record.getProducerId());
-                        if (consumer != null) {
-                            try {
-                                consumer.consume(record);
-                            } catch (IllegalStateException e) {
-                                log.error("Could not synchronize to revision: " + record.getRevision() + " due illegal state of RecordConsumer.");
-                                return;
-                            }
+        RecordIterator iterator = getRecords(startRevision);
+        long stopRevision = Long.MIN_VALUE;
+
+        try {
+            while (iterator.hasNext()) {
+                Record record = iterator.nextRecord();
+                if (record.getJournalId().equals(id)) {
+                    log.info("Record with revision '" + record.getRevision()
+                            + "' created by this journal, skipped.");
+                } else {
+                    RecordConsumer consumer = getConsumer(record.getProducerId());
+                    if (consumer != null) {
+                        try {
+                            consumer.consume(record);
+                        } catch (IllegalStateException e) {
+                            log.error("Could not synchronize to revision: " + record.getRevision() + " due illegal state of RecordConsumer.");
+                            return;
-                    stopRevision = record.getRevision();
-            } finally {
-                iterator.close();
+                stopRevision = record.getRevision();
-    
-            if (stopRevision > 0) {
-                for (RecordConsumer consumer : consumers.values()) {
-                    consumer.setRevision(stopRevision);
-                }
-                log.info("Synchronized to revision: " + stopRevision);
+        } finally {
+            iterator.close();
+        }
-                if (syncAgainOnNewRecords()) {
-                    // changes detected, sync again
-                    startRevision = stopRevision;
-                    continue;
-                }
+        if (stopRevision > 0) {
+            for (RecordConsumer consumer : consumers.values()) {
+                consumer.setRevision(stopRevision);
-            break;
+            log.info("Synchronized to revision: " + stopRevision);
