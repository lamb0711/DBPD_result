JCR-2313 - Improvements to user management (2) [work in progress] 
-> see issue for details

JCR-2333 - ItemImpl#validateTransientItems: Incomplete validation of mandatory child item
-> patch2

JCR-2195 - Provide possibility to import protected items using Session/Workspace import functionality
-> deal with reference properties
-> make import handlers configurable
-> add userimporter

JCR-171 - Make the extraction of Session UserIDs from Subjects configurable
-> extend SecurityManagerConfig and retrieve uid from principal name if configured
     class is present in the subject

JCR-2351 - Make Authorizable.setProperty more noisy in case of failure

JCR-2331 - Configurable DefaultPolicy replacing Initialization within the ACProvider
-> initial steps. remove code that relies on the default-init
-> add TODOs

JCR-2291 - Issues with compiled permissions of ACL provider
-> remove code searching for DENY-read entries in case of default initialization of ac entries

and here and there minor improvement, usage of generics etc....

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@828791 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import org.apache.jackrabbit.core.config.ImportConfig;
+    private final List<ProtectedNodeImporter> pnImporters = new ArrayList();
-     * Importer for protected nodes.
+     * Available importers for protected properties.
-    private final ProtectedNodeImporter pnImporter;
+    private final List<ProtectedPropertyImporter> ppImporters = new ArrayList();
-     * Importer for protected properties.
+     * Currently active importer for protected nodes.
-    private final ProtectedPropertyImporter ppImporter;
+    private ProtectedNodeImporter pnImporter = null;
-        this(importTargetNode, session, uuidBehavior, null, null);
+        this(importTargetNode, session, uuidBehavior, null);
-     * @param pnImporter importer for protected nodes
-     * @param ppImporter importer for protected properties
+     * @param config
-                           int uuidBehavior,
-                           ProtectedNodeImporter pnImporter,
-                           ProtectedPropertyImporter ppImporter) {
+                           int uuidBehavior, ImportConfig config) {
-        this.ppImporter = ppImporter == null
-                ? new DefaultProtectedPropertyImporter(session, session, false)
-                : ppImporter;
-        this.pnImporter = pnImporter == null
-                ? new DefaultProtectedNodeImporter(session, session, false, uuidBehavior)
-                : pnImporter;
+
+        if (config != null) {
+            List<ProtectedNodeImporter> ln = config.getProtectedNodeImporters();
+            for (ProtectedNodeImporter pni : ln) {
+                if (pni.init(session, session, false, uuidBehavior, refTracker)) {
+                    pnImporters.add(pni);
+                }
+            }
+            List<ProtectedPropertyImporter> lp = config.getProtectedPropertyImporters();
+            for (ProtectedPropertyImporter ppi : lp) {
+                if (ppi.init(session, session, false, uuidBehavior, refTracker)) {
+                    ppImporters.add(ppi);
+                }
+            }
+        }
+
+        // missing config -> initialize defaults.
+        if (pnImporters.isEmpty()) {
+            ProtectedNodeImporter def = new DefaultProtectedNodeImporter();
+            if (def.init(session, session, false, uuidBehavior, refTracker)) {
+                pnImporters.add(def);
+            }
+        }
+        if (ppImporters.isEmpty()) {
+            DefaultProtectedPropertyImporter def = new DefaultProtectedPropertyImporter();
+            if (def.init(session, session, false, uuidBehavior, refTracker)) {
+                ppImporters.add(def);
+            }
+        }
-            pnImporter.startChildInfo(nodeInfo, propInfos);
+            if (pnImporter != null) {
+                pnImporter.startChildInfo(nodeInfo, propInfos);
+            }
-            if (pnImporter.start(parent)) {
-                log.debug("Protected node -> delegated to ProtectedPropertyImporter");
-                pnImporter.startChildInfo(nodeInfo, propInfos);
-            } /* else: p-i-Importer isn't able to deal with the protected tree.
-                 skip the tree below the protected parent */
+            for (ProtectedNodeImporter pni : pnImporters) {
+                if (pni.start(parent)) {
+                    log.debug("Protected node -> delegated to ProtectedPropertyImporter");
+                    pnImporter = pni;
+                    pnImporter.startChildInfo(nodeInfo, propInfos);
+                    break;
+                } /* else: p-i-Importer isn't able to deal with the protected tree.
+                     try next. and if none can handle the passed parent the
+                     tree below will be skipped */
+            }
-                if (ppImporter.handlePropInfo(node, pi, def)) {
-                    // TODO: deal with reference props within the imported tree?                    
-                    log.debug("Protected property -> delegated to ProtectedPropertyImporter");
-                } // else: p-i-Importer isn't able to deal with this property
+                for (ProtectedPropertyImporter ppi : ppImporters) {
+                    if (ppi.handlePropInfo(node, pi, def)) {
+                        log.debug("Protected property -> delegated to ProtectedPropertyImporter");
+                        break;
+                    } /* else: p-i-Importer isn't able to deal with this property.
+                         try next pp-importer */
+
+                }
-            pnImporter.endChildInfo();
+            if (pnImporter != null) {
+                pnImporter.endChildInfo();
+            }
-            pnImporter.end(parent);
-            // TODO: deal with reference props within the imported tree?
+            if (pnImporter != null) {
+                pnImporter.end(parent);
+                // and reset the pnImporter field waiting for the next protected
+                // parent -> selecting again from available importers
+                pnImporter = null;
+            }
-        Iterator iter = refTracker.getProcessedReferences();
+        // 1. let protected property/node importers handle protected ref-properties
+        //    and (protected) properties underneith a protected parent node.
+        for (ProtectedPropertyImporter ppi : ppImporters) {
+            ppi.processReferences();
+        }
+        for (ProtectedNodeImporter pni : pnImporters) {
+            pni.processReferences();
+        }
+
+        // 2. regular non-protected properties.
+        Iterator<Object> iter = refTracker.getProcessedReferences();
-            Property prop = (Property) iter.next();
+            Object ref = iter.next();
+            if (!(ref instanceof Property)) {
+                continue;
+            }
+
+            Property prop = (Property) ref;
