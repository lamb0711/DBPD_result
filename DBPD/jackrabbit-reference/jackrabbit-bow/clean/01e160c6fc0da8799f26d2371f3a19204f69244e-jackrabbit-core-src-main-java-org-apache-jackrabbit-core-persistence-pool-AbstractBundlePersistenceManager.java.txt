JCR-2762: Optimize bundle serialization

Avoid the extra byte in front of many names by writing out explicit counts before mixin types and properties.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022909 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_MIXINTYPES;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_PRIMARYTYPE;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_UUID;
+
+import org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-        if (bundle == null) {
-            throw new NoSuchItemStateException(id.toString());
-        }
-        PropertyState state = bundle.createPropertyState(this, id.getName());
-        if (state == null) {
-            // check if autocreated property state
-            if (id.getName().equals(NameConstants.JCR_UUID)) {
-                state = createNew(id);
+        if (bundle != null) {
+            PropertyState state = createNew(id);
+            PropertyEntry p = bundle.getPropertyEntry(id.getName());
+            if (p != null) {
+                state.setMultiValued(p.isMultiValued());
+                state.setType(p.getType());
+                state.setValues(p.getValues());
+                state.setModCount(p.getModCount());
+            } else if (id.getName().equals(JCR_UUID)) {
-                state.setValues(new InternalValue[]{InternalValue.create(id.getParentId().toString())});
-            } else if (id.getName().equals(NameConstants.JCR_PRIMARYTYPE)) {
-                state = createNew(id);
+                state.setValues(new InternalValue[] {
+                        InternalValue.create(id.getParentId().toString()) });
+            } else if (id.getName().equals(JCR_PRIMARYTYPE)) {
-                state.setValues(new InternalValue[]{InternalValue.create(bundle.getNodeTypeName())});
-            } else if (id.getName().equals(NameConstants.JCR_MIXINTYPES)) {
-                Set<Name> mixins = bundle.getMixinTypeNames();
-                state = createNew(id);
+                state.setValues(new InternalValue[] {
+                        InternalValue.create(bundle.getNodeTypeName()) });
+            } else if (id.getName().equals(JCR_MIXINTYPES)) {
-                state.setValues(InternalValue.create(mixins.toArray(new Name[mixins.size()])));
+                Set<Name> mixins = bundle.getMixinTypeNames();
+                state.setValues(InternalValue.create(
+                        mixins.toArray(new Name[mixins.size()])));
-            bundle.addProperty(state, getBlobStore());
+            return state;
+        } else {
+            throw new NoSuchItemStateException(id.toString());
-        return state;
-        return bundle != null && bundle.hasProperty(id.getName());
+        if (bundle != null) {
+            Name name = id.getName();
+            return bundle.hasProperty(name)
+                || JCR_PRIMARYTYPE.equals(name)
+                || (JCR_UUID.equals(name) && bundle.isReferenceable())
+                || (JCR_MIXINTYPES.equals(name)
+                        && !bundle.getMixinTypeNames().isEmpty());
+        } else {
+            return false;
+        }
-                if (id.getName().equals(NameConstants.JCR_PRIMARYTYPE)
-                    || id.getName().equals(NameConstants.JCR_MIXINTYPES)
-                    || id.getName().equals(NameConstants.JCR_UUID)) {
+                if (id.getName().equals(JCR_PRIMARYTYPE)
+                    || id.getName().equals(JCR_MIXINTYPES)
+                    || id.getName().equals(JCR_UUID)) {
-                if (id.getName().equals(NameConstants.JCR_PRIMARYTYPE)
-                    || id.getName().equals(NameConstants.JCR_MIXINTYPES)
-                    || id.getName().equals(NameConstants.JCR_UUID)) {
+                if (id.getName().equals(JCR_PRIMARYTYPE)
+                    || id.getName().equals(JCR_MIXINTYPES)
+                    || id.getName().equals(JCR_UUID)) {
