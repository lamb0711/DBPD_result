JCR-265: Bug with textfilters and classloaders

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@330282 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.TextFilter;
+import java.util.StringTokenizer;
+import java.util.ArrayList;
+import java.util.Collections;
+     * Default text filters.
+     */
+    public static final String DEFAULT_TEXT_FILTERS = TextPlainTextFilter.class.getName();
+
+    /**
+     * List of {@link org.apache.jackrabbit.core.query.TextFilter} instance.
+     */
+    private List textFilters;
+
+    /**
+        setTextFilterClasses(DEFAULT_TEXT_FILTERS);
+     * Returns an unmodifiable list of {@link TextFilter} configured for
+     * this search index.
+     *
+     * @return unmodifiable list of text filters.
+     */
+    List getTextFilters() {
+        return textFilters;
+    }
+
+    /**
-                nsMappings);
+                nsMappings, textFilters);
+
+    /**
+     * Sets a new set of text filter classes that are in use for indexing
+     * binary properties. The <code>filterClasses</code> must be a comma
+     * separated <code>String</code> of fully qualified class names implementing
+     * {@link org.apache.jackrabbit.core.query.TextFilter}. Each class must
+     * provide a default constructor.
+     * </p>
+     * Filter class names that cannot be resolved are skipped and a warn message
+     * is logged.
+     *
+     * @param filterClasses comma separated list of filter class names
+     */
+    public void setTextFilterClasses(String filterClasses) {
+        List filters = new ArrayList();
+        StringTokenizer tokenizer = new StringTokenizer(filterClasses, ",ï¿½\t\n\r\f");
+        while (tokenizer.hasMoreTokens()) {
+            String className = tokenizer.nextToken();
+            try {
+                Class filterClass = Class.forName(className);
+                TextFilter filter = (TextFilter) filterClass.newInstance();
+                filters.add(filter);
+            } catch (Exception e) {
+                log.warn("Invalid TextFilter class: " + className, e);
+            }
+        }
+        textFilters = Collections.unmodifiableList(filters);
+    }
+
+    /**
+     * Returns the fully qualified class names of the text filter instances
+     * currently in use. The names are comma separated.
+     *
+     * @return class names of the text filters in use.
+     */
+    public String getTextFilterClasses() {
+        StringBuffer names = new StringBuffer();
+        String delim = "";
+        for (Iterator it = textFilters.iterator(); it.hasNext(); ) {
+            names.append(delim);
+            names.append(it.next().getClass().getName());
+            delim = ",";
+        }
+        return names.toString();
+    }
