JCR-2183 - Provide overridables for lock checking
- Add public LockInfo class
- Make AbstractLockInfo package private
- Rename internal LockInfo classes to avoid confusion
- Add overridable in LockManagerImpl with default implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@790892 13f79535-47bb-0310-9956-ffa450edef68

-        return new XALock(this, info, node);
+        return new XALockImpl(this, info, node);
-        return new XALock(this, info, holder);
+        return new XALockImpl(this, info, holder);
-        XALock[] locks = new XALock[infos.length];
+        XALockImpl[] locks = new XALockImpl[infos.length];
-            locks[i] = new XALock(this, info, holder);
+            locks[i] = new XALockImpl(this, info, holder);
-    public boolean isLockHolder(Session session, NodeImpl node)
-            throws RepositoryException {
-        AbstractLockInfo info;
-        if (isInXA()) {
-            info = xaEnv.getLockInfo(node);
-        } else {
-            info = lockMgr.getLockInfo(node.getNodeId());
-        }
-        return info != null && info.getId().equals(node.getId())
-                && info.getLockHolder() == session;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
+            if (info != null && !info.isLockHolder(node.getSession())) {
+                throw new LockException("Node locked.");
+            }
-            info = lockMgr.getLockInfo(node.getNodeId());
-        }
-        if (info != null && info.getLockHolder() != node.getSession()) {
-            throw new LockException("Node locked.");
+        	lockMgr.checkLock(node);
-        SessionImpl sessionImpl = (SessionImpl) session;
-        checkLock(sessionImpl.getItemManager().getNode(path));
+        if (isInXA()) {
+	        SessionImpl sessionImpl = (SessionImpl) session;
+	        checkLock(sessionImpl.getItemManager().getNode(path));
+        } else {
+        	lockMgr.checkLock(path, session);
+        }
-
+    
-    public void lockTokenAdded(SessionImpl session, String lt) throws RepositoryException {
+    public void checkUnlock(Session session, NodeImpl node)
+    		throws LockException, RepositoryException {
+
-            xaEnv.addLockToken(session, lt);
+            AbstractLockInfo info = xaEnv.getLockInfo(node);
+            if (info == null || !info.getId().equals(node.getId())) {
+    	        throw new LockException("Node not locked: " + node);
+            }
+    	    if (!info.isLockHolder(session)) {
+    	        throw new LockException("Node not locked by session: " + node);
+    	    }
-            lockMgr.lockTokenAdded(session, lt);
+        	lockMgr.checkUnlock(session, node);
-    public void lockTokenRemoved(SessionImpl session, String lt) throws RepositoryException {
+    public void addLockToken(SessionImpl session, String lt) throws RepositoryException {
+        if (isInXA()) {
+            xaEnv.addLockToken(session, lt);
+        } else {
+            lockMgr.addLockToken(session, lt);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void removeLockToken(SessionImpl session, String lt) throws RepositoryException {
-            lockMgr.lockTokenRemoved(session, lt);
+            lockMgr.removeLockToken(session, lt);
-            return info instanceof XAEnvironment.LockInfo;
+            return info instanceof XAEnvironment.XALockInfo;
