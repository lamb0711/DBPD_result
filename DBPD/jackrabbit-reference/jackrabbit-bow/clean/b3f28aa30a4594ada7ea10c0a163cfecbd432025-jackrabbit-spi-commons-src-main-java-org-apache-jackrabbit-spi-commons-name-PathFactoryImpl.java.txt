JCR-2744: Avoid element arrays in PathImpl

Get rid of separate Path.Element objects by making AbstractPath implement both Path and Path.Element

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@997384 13f79535-47bb-0310-9956-ffa450edef68

-    private static final String CURRENT_LITERAL = ".";
-    private static final String PARENT_LITERAL = "..";
-
-    private static final NameFactory NAME_FACTORY = NameFactoryImpl.getInstance();
-    private final static Name CURRENT_NAME = NAME_FACTORY.create(Name.NS_DEFAULT_URI, CURRENT_LITERAL);
-    private final static Name PARENT_NAME = NAME_FACTORY.create(Name.NS_DEFAULT_URI, PARENT_LITERAL);
-    private final static Name ROOT_NAME = NAME_FACTORY.create(Name.NS_DEFAULT_URI, "");
-
-        if (ROOT_NAME.equals(name)) {
+        if (RootPath.NAME.equals(name)) {
-        NameElement element = NameElement.create(name, index);
-        Path path = new NamePath(parent, element).getNormalizedPath();
+        Path path = new NamePath(parent, name, index);
-        return create(name, Path.INDEX_UNDEFINED);
+        if (name != null) {
+            return create(name, Path.INDEX_UNDEFINED);
+        } else {
+            throw new IllegalArgumentException("PathFactory.create(null)");
+        }
-        if (index < Path.INDEX_UNDEFINED) {
+        if (name == null) {
+            throw new IllegalArgumentException("PathFactory.create(null, index");
+        } else if (index < Path.INDEX_UNDEFINED) {
-        } else if (CURRENT_NAME.equals(name)) {
+        } else if (CurrentPath.NAME.equals(name)) {
-                return new CurrentPath(null);
+                return CurrentPath.CURRENT_PATH;
-        } else if (PARENT_NAME.equals(name)) {
+        } else if (ParentPath.NAME.equals(name)) {
-                return new ParentPath(null);
+                return ParentPath.PARENT_PATH;
-        } else if (ROOT_NAME.equals(name)) {
+        } else if (RootPath.NAME.equals(name)) {
-                return RootPath.INSTANCE;
+                return RootPath.ROOT_PATH;
-            return new NamePath(null, NameElement.create(name, index));
+            return new NamePath(null, name, index);
-            return new CurrentPath(null);
+            return CurrentPath.CURRENT_PATH;
-            return new IdentifierPath(element);
+            return new IdentifierPath(element.getIdentifier());
-            return new NamePath(null, element);
+            return new NamePath(null, element.getName(), element.getIndex());
-            return new ParentPath(null);
+            return ParentPath.PARENT_PATH;
-            return RootPath.INSTANCE;
+            return RootPath.ROOT_PATH;
-                path = new IdentifierPath(element);
+                path = new IdentifierPath(element.getIdentifier());
-                path = new NamePath(path, element);
+                path = new NamePath(path, element.getName(), element.getIndex());
-                path = RootPath.INSTANCE;
+                path = RootPath.ROOT_PATH;
-        } else if (name.equals(PARENT_NAME)) {
-            return ParentElement.INSTANCE;
-        } else if (name.equals(CURRENT_NAME)) {
-            return CurrentElement.INSTANCE;
-        } else if (name.equals(ROOT_NAME)) {
-            return RootElement.INSTANCE;
+        } else if (name.equals(ParentPath.NAME)) {
+            return ParentPath.PARENT_PATH;
+        } else if (name.equals(CurrentPath.NAME)) {
+            return CurrentPath.CURRENT_PATH;
+        } else if (name.equals(RootPath.NAME)) {
+            return RootPath.ROOT_PATH;
-            return NameElement.create(name, Path.INDEX_UNDEFINED);
+            return new NamePath(null, name, Path.INDEX_UNDEFINED);
-        } else if (name.equals(PARENT_NAME)
-                || name.equals(CURRENT_NAME)
-                || name.equals(ROOT_NAME)) {
+        } else if (name.equals(ParentPath.NAME)
+                || name.equals(CurrentPath.NAME)
+                || name.equals(RootPath.NAME)) {
-            return NameElement.create(name, index);
+            return new NamePath(null, name, index);
-            return new IdentifierElement(identifier);
+            return new IdentifierPath(identifier);
-        if (elementString.equals(ROOT_NAME.toString())) {
-            return RootElement.INSTANCE;
-        } else if (elementString.equals(CURRENT_LITERAL)) {
-            return CurrentElement.INSTANCE;
-        } else if (elementString.equals(PARENT_LITERAL)) {
-            return ParentElement.INSTANCE;
+        if (elementString.equals(RootPath.NAME.toString())) {
+            return RootPath.ROOT_PATH;
+        } else if (elementString.equals(CurrentPath.CURRENT_PATH.getString())) {
+            return CurrentPath.CURRENT_PATH;
+        } else if (elementString.equals(ParentPath.PARENT_PATH.getString())) {
+            return ParentPath.PARENT_PATH;
-            return new IdentifierElement(elementString.substring(1, elementString.length()-1));
+            return new IdentifierPath(
+                    elementString.substring(1, elementString.length()-1));
+        NameFactory factory = NameFactoryImpl.getInstance();
-            Name name = NAME_FACTORY.create(elementString);
-            return NameElement.create(name, Path.INDEX_UNDEFINED);
+            Name name = factory.create(elementString);
+            return new NamePath(null, name, Path.INDEX_UNDEFINED);
-        Name name = NAME_FACTORY.create(elementString.substring(0, pos));
+        Name name = factory.create(elementString.substring(0, pos));
-            return NameElement.create(name, index);
+            return new NamePath(null, name, index);
-        return CurrentElement.INSTANCE;
+        return CurrentPath.CURRENT_PATH;
-        return ParentElement.INSTANCE;
+        return ParentPath.PARENT_PATH;
-        return RootElement.INSTANCE;
+        return RootPath.ROOT_PATH;
-        return RootPath.INSTANCE;
+        return RootPath.ROOT_PATH;
