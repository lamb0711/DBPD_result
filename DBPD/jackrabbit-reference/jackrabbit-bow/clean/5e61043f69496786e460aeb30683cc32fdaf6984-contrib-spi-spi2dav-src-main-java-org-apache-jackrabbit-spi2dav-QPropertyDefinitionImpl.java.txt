work in progress

- SPI: replace String/Stream for values by QValue interface
- SPI: add factory for QValue
  > adjust commons and add implementation
  > adjust usages of former QValue object with jcr2spi, spi2dav
- RepositoryService.getChildInfos returns Iterator instead of Collection
- spi2dav: add implementation for new query interfaces

- TODO: 
  improve conversion of jcr-value to q-value and vice-versa




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497885 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.value.QValue;
+import javax.jcr.Value;
-import java.io.InputStream;
-    QPropertyDefinitionImpl(QName declaringNodeType, Element pdefElement, NamespaceResolver nsResolver)
+    QPropertyDefinitionImpl(QName declaringNodeType, Element pdefElement,
+                            NamespaceResolver nsResolver, QValueFactory qValueFactory)
-            defaultValues = new QValue[0];
+            // No default value defined at all.
+            defaultValues = null;
-                QValue qValue = ValueFormat.getQValue(DomUtil.getText(it.nextElement()), requiredType, nsResolver);
+                String jcrVal = DomUtil.getText(it.nextElement());
+                QValue qValue;
+                if (requiredType == PropertyType.BINARY) {
+                    // TODO: improve
+                    Value v = ValueFactoryImpl.getInstance().createValue(jcrVal, requiredType);
+                    qValue = ValueFormat.getQValue(v, nsResolver, qValueFactory);
+                } else {
+                    qValue = ValueFormat.getQValue(jcrVal, requiredType, nsResolver, qValueFactory);
+                }
+                // in case of name and path constraint, the value must be
+                // converted to be in qualified format
-                   qValue = ValueFormat.getQValue(qValue, constType, nsResolver).getString();
+                   qValue = ValueFormat.getQValue(qValue, constType, nsResolver, qValueFactory).getString();
-    public String[] getDefaultValues() {
-        String[] strs = new String[defaultValues.length];
-        for (int i = 0; i < defaultValues.length; i++) {
-            try {
-                strs[i] = defaultValues[i].getString();
-            } catch (RepositoryException e) {
-                log.error("Internal error while retrieving default values.", e);
-            }
-        }
-        return strs;
-    }
-
-    public InputStream[] getDefaultValuesAsStream() {
-        InputStream[] ins = new InputStream[defaultValues.length];
-        for (int i = 0; i < defaultValues.length; i++) {
-            try {
-                ins[i] = defaultValues[i].getStream();
-            } catch (RepositoryException e) {
-                log.error("Internal error while retrieving default values.", e);
-            }
-        }
-        return ins;
+    public QValue[] getDefaultValues() {
+        return defaultValues;
