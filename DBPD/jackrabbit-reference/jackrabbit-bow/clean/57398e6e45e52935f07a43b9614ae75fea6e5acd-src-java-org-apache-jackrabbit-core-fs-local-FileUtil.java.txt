set svn:eol-style on all text files to native



git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47223 13f79535-47bb-0310-9956-ffa450edef68

-/*
- * Copyright 2004 The Apache Software Foundation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.jackrabbit.core.fs.local;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-
-/**
- * A <code>FileUtil</code> ...
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.11 $, $Date: 2004/08/02 16:19:52 $
- */
-
-public final class FileUtil {
-
-    /**
-     * private constructor
-     */
-    private FileUtil() {
-    }
-
-    /**
-     * @param src
-     * @param dest
-     * @throws IOException
-     */
-    public static void copy(File src, File dest) throws IOException {
-	if (!src.canRead()) {
-	    throw new IOException(src.getPath() + " can't be read from.");
-	}
-	if (src.isDirectory()) {
-	    // src is a folder
-	    if (dest.isFile()) {
-		throw new IOException("can't copy a folder to a file");
-	    }
-	    if (!dest.exists()) {
-		dest.mkdirs();
-	    }
-	    if (!dest.canWrite()) {
-		throw new IOException("can't write to " + dest.getPath());
-	    }
-	    File[] children = src.listFiles();
-	    for (int i = 0; i < children.length; i++) {
-		copy(children[i], new File(dest, children[i].getName()));
-	    }
-	} else {
-	    // src is a file
-	    File destParent;
-	    if (dest.isDirectory()) {
-		// dest is a folder
-		destParent = dest;
-		dest = new File(destParent, src.getName());
-	    } else {
-		destParent = dest.getParentFile();
-	    }
-	    if (!destParent.canWrite()) {
-		throw new IOException("can't write to " + destParent.getPath());
-	    }
-
-	    FileInputStream fis = new FileInputStream(src);
-	    FileOutputStream fos = new FileOutputStream(dest);
-
-	    byte[] buffer = new byte[8192];
-	    int read = 0;
-	    while ((read = fis.read(buffer)) > 0) {
-		fos.write(buffer, 0, read);
-	    }
-
-	    fis.close();
-	    fos.close();
-	}
-    }
-
-    /**
-     * @param f
-     * @throws IOException
-     */
-    public static void delete(File f) throws IOException {
-	if (f.isDirectory()) {
-	    // it's a folder, list children first
-	    File[] children = f.listFiles();
-	    for (int i = 0; i < children.length; i++) {
-		delete(children[i]);
-	    }
-	}
-	f.delete();
-    }
-}
+/*
+ * Copyright 2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.core.fs.local;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+/**
+ * A <code>FileUtil</code> ...
+ *
+ * @author Stefan Guggisberg
+ * @version $Revision: 1.11 $, $Date: 2004/08/02 16:19:52 $
+ */
+
+public final class FileUtil {
+
+    /**
+     * private constructor
+     */
+    private FileUtil() {
+    }
+
+    /**
+     * @param src
+     * @param dest
+     * @throws IOException
+     */
+    public static void copy(File src, File dest) throws IOException {
+	if (!src.canRead()) {
+	    throw new IOException(src.getPath() + " can't be read from.");
+	}
+	if (src.isDirectory()) {
+	    // src is a folder
+	    if (dest.isFile()) {
+		throw new IOException("can't copy a folder to a file");
+	    }
+	    if (!dest.exists()) {
+		dest.mkdirs();
+	    }
+	    if (!dest.canWrite()) {
+		throw new IOException("can't write to " + dest.getPath());
+	    }
+	    File[] children = src.listFiles();
+	    for (int i = 0; i < children.length; i++) {
+		copy(children[i], new File(dest, children[i].getName()));
+	    }
+	} else {
+	    // src is a file
+	    File destParent;
+	    if (dest.isDirectory()) {
+		// dest is a folder
+		destParent = dest;
+		dest = new File(destParent, src.getName());
+	    } else {
+		destParent = dest.getParentFile();
+	    }
+	    if (!destParent.canWrite()) {
+		throw new IOException("can't write to " + destParent.getPath());
+	    }
+
+	    FileInputStream fis = new FileInputStream(src);
+	    FileOutputStream fos = new FileOutputStream(dest);
+
+	    byte[] buffer = new byte[8192];
+	    int read = 0;
+	    while ((read = fis.read(buffer)) > 0) {
+		fos.write(buffer, 0, read);
+	    }
+
+	    fis.close();
+	    fos.close();
+	}
+    }
+
+    /**
+     * @param f
+     * @throws IOException
+     */
+    public static void delete(File f) throws IOException {
+	if (f.isDirectory()) {
+	    // it's a folder, list children first
+	    File[] children = f.listFiles();
+	    for (int i = 0; i < children.length; i++) {
+		delete(children[i]);
+	    }
+	}
+	f.delete();
+    }
+}
