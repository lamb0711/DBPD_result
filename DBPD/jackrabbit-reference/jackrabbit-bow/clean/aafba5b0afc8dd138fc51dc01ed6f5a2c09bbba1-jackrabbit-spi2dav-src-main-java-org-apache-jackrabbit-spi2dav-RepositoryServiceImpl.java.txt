JCR-3574: leverage WebDAV 3 compliance class to use absolute paths in Destination header field

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1469312 13f79535-47bb-0310-9956-ffa450edef68

+    /* DAV conformance levels */
+    private Set<String> remoteDavComplianceClasses = null;
+
+        if (isDavClass3(sessionInfo)) {
+            destUri = obtainAbsolutePathFromUri(destUri);
+        }
+        if (isDavClass3(sessionInfo)) {
+            destUri = obtainAbsolutePathFromUri(destUri);
+        }
+    private Set<String> getDavComplianceClasses(SessionInfo sessionInfo) throws RepositoryException {
+        if (this.remoteDavComplianceClasses == null) {
+            OptionsMethod method = new OptionsMethod(uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName()));
+            try {
+                getClient(sessionInfo).executeMethod(method);
+                method.checkSuccess();
+                Header davHeader = method.getResponseHeader("DAV");
+                if (davHeader!= null) {
+                    // TODO: think about coded-URLs containing a comma
+                    String[] classes = davHeader.getValue().split(",");
+                    this.remoteDavComplianceClasses = new HashSet<String>();
+                    for (String c : classes) {
+                        this.remoteDavComplianceClasses.add(c.trim());
+                    }
+                }
+            } catch (IOException e) {
+                throw new RepositoryException(e);
+            } catch (DavException e) {
+                throw ExceptionConverter.generate(e);
+            } finally {
+                method.releaseConnection();
+            }
+        }
+        return this.remoteDavComplianceClasses;
+    }
+
+    private boolean isDavClass3(SessionInfo sessionInfo) {
+        try {
+            return getDavComplianceClasses(sessionInfo).contains("3");
+        }
+        catch (RepositoryException ex) {
+            log.warn("failure to obtain OPTIONS response", ex);
+            return false;
+        }
+    }
+
+    private static String obtainAbsolutePathFromUri(String uri) {
+        try {
+            java.net.URI u = new java.net.URI(uri);
+            StringBuilder sb = new StringBuilder();
+            sb.append(u.getRawPath());
+            if (u.getRawQuery() != null) {
+                sb.append("?" + u.getRawQuery());
+            }
+            return sb.toString();
+        }
+        catch (java.net.URISyntaxException ex) {
+            log.warn("parsing " + uri, ex);
+            return uri;
+        }
+    }
+    
+            if (isDavClass3(sessionInfo)) {
+                destUri = obtainAbsolutePathFromUri(destUri);
+            }
