Cleanup log call by using the message pattern mechanism of SLF4J

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@514657 13f79535-47bb-0310-9956-ffa450edef68

-        log.debug("RepositoryClassLoader: " + this + " ready");
+        log.debug("RepositoryClassLoader: {} ready", this);
-        log.debug("findClass: Try to find class " + name);
+        log.debug("findClass: Try to find class {}", name);
-        log.debug("findResource: Try to find resource " + name);
+        log.debug("findResource: Try to find resource {}", name);
-            log.debug("findResource: Getting resource from " + res + ", " +
-                "created " + new Date(res.getLastModificationTime()));
+            log.debug("findResource: Getting resource from {}, created {}",
+                res, new Date(res.getLastModificationTime()));
-        log.debug("findResources: Try to find resources for " + name);
+        log.debug("findResources: Try to find resources for {}", name);
-            log.debug("findResources: Trying " + cp);
+            log.debug("findResources: Trying {}", cp);
-                log.debug("findResources: Adding resource from " + res + ", " +
-                    "created " + new Date(res.getLastModificationTime()));
+                log.debug("findResources: Adding resource from {}, created {}",
+                    res, new Date(res.getLastModificationTime()));
-            log.debug("addURL: Adding URL " + url);
+            log.debug("addURL: Adding URL {}", url);
-            log.warn("addURL: " + url + " is not a Repository URL, ignored");
+            log.warn("addURL: {} is not a Repository URL, ignored", url);
-        log.debug("addURL: Adding Handle " + path);
+        log.debug("addURL: Adding Handle {}", path);
-            log.debug("addHandle: Cannot get a ClassPathEntry for " + path);
+            log.debug("addHandle: Cannot get a ClassPathEntry for {}", path);
-            log.debug("Resource " + name + " no cached");
+            log.debug("Resource {} not cached", name);
-        log.debug("addHandle: Adding path " + cpe.getPath());
+        log.debug("addHandle: Adding path {}", cpe.getPath());
-                log.debug("Adding path " + entry);
+                log.debug("Adding path {}", entry);
-                log.debug("Cannot get a ClassPathEntry for " + entry);
+                log.debug("Cannot get a ClassPathEntry for {}", entry);
-        log.debug("findClassPrivileged: Try to find path " + path +
-            " for class " + name);
+        log.debug("findClassPrivileged: Try to find path {} for class {}",
+            path, name);
-                 log.debug("findClassPrivileged: Loading class from " +
-                     res + ", created " + new Date(res.getLastModificationTime()));
+                 log.debug(
+                    "findClassPrivileged: Loading class from {}, created {}",
+                    res, new Date(res.getLastModificationTime()));
-                     log.warn("defineClass returned null for class " + name);
+                     log.warn("defineClass returned null for class {}", name);
-            log.info("Resource '" + name + "' known to not exist in class path");
+            log.debug("Resource '{}' known to not exist in class path", name);
-            log.debug("Checking " + cp);
+            log.debug("Checking {}", cp);
-                log.debug("Found resource in " + res + ", " +
-                    "created " + new Date(res.getLastModificationTime()));
+                log.debug("Found resource in {}, created ", res, new Date(
+                    res.getLastModificationTime()));
-        log.debug("No classpath entry contains " + name);
+        log.debug("No classpath entry contains {}", name);
-        log.debug("defineClass(" + name + ", " + res + ")");
+        log.debug("defineClass({}, {})", name, res);
