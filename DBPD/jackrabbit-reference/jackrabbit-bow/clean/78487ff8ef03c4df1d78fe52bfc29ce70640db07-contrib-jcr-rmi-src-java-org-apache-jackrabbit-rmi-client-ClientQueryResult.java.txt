JCR-RMI: Use remote iterators instead of arrays to avoid memory and network problems with large result sets.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@365458 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.Node;
-import javax.jcr.query.Row;
-import org.apache.jackrabbit.rmi.iterator.ArrayNodeIterator;
-import org.apache.jackrabbit.rmi.iterator.ArrayRowIterator;
-import org.apache.jackrabbit.rmi.remote.RemoteNode;
-import org.apache.jackrabbit.rmi.remote.RemoteRow;
-            RemoteRow[] remotes =  remote.getRows();
-            if (remotes != null) {
-                Row[] rows = new Row[remotes.length];
-                for (int i = 0; i < rows.length; i++) {
-                    rows[i] = getFactory().getRow(remotes[i]);
-                }
-                return new ArrayRowIterator(rows);
-            } else {
-                return new ArrayRowIterator(new Row[0]);
-            }
+            return getFactory().getRowIterator(remote.getRows());
-            RemoteNode[] remotes = remote.getNodes();
-            if (remotes != null) {
-                Node[] nodes = new Node[remotes.length];
-                for (int i = 0; i < nodes.length; i++) {
-                    nodes[i] = getNode(session, remotes[i]);
-                }
-                return new ArrayNodeIterator(nodes);
-            } else {
-                return new ArrayNodeIterator(new Node[0]);
-            }
-        } catch (RemoteException ex) {
-            throw new RemoteRepositoryException(ex);
+            return getFactory().getNodeIterator(session, remote.getNodes());
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
