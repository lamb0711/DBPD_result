JCR-952: Support lower and upper case functions in "order by" clause

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1051916 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.List;
-
-import javax.jcr.RepositoryException;
-
-import org.apache.jackrabbit.spi.commons.name.PathBuilder;
+import org.apache.jackrabbit.spi.commons.name.PathBuilder;
+
+import javax.jcr.RepositoryException;
+import java.util.ArrayList;
+import java.util.List;
-    private final List specs = new ArrayList();
+    private final List<OrderSpec> specs = new ArrayList<OrderSpec>();
+     * Create and add a new (empty) order specification to this query node.
+     */
+    public void newOrderSpec() {
+        specs.add(new OrderSpec((Path) null, true));
+    }
+
+    /**
+     * Set the last order specification of this query node to ascending/descending
+     * @see OrderSpec#setAscending(boolean)
+     *
+     * @param value  <code>true</code>true> for ascending and <code>false</code> for
+     * descending.
+     * @throws  IllegalStateException  if no order specification is set
+     */
+    public void setAscending(boolean value) {
+        if (specs.size() == 0) {
+            throw new IllegalStateException("No order specification set");
+        }
+
+        OrderSpec orderSpec = specs.get(specs.size() - 1);
+        orderSpec.setAscending(value);
+    }
+
+    /**
+     * Set the path of the last order specification of this query node.
+     * @see OrderSpec#setPath(org.apache.jackrabbit.spi.Path)
+     *
+     * @param path  a path
+     * @throws  IllegalStateException  if no order specification is set
+     */
+    public void setPath(Path path) {
+        if (specs.size() == 0) {
+            throw new IllegalStateException("No order specification set");
+        }
+
+        OrderSpec orderSpec = specs.get(specs.size() - 1);
+        orderSpec.setPath(path);
+    }
+
+    /**
+     * Set the function of the last order specification of this query node.
+     * @see OrderSpec#setFunction(String)
+     *
+     * @param name  a function name
+     * @throws  IllegalStateException  if no order specification is set
+     */
+    public void setFunction(String name) {
+        if (specs.size() == 0) {
+            throw new IllegalStateException("No order specification set");
+        }
+        
+        OrderSpec orderSpec = specs.get(specs.size() - 1);
+        orderSpec.setFunction(name);
+    }
+
+    /**
+     * Checks whether all order specifications of this query node have at least
+     * its path specified (i.e. non <code>null</code>.)
+     *
+     * @return  <code>true</code> iff all order specification of this query node are valid.
+     */
+    public boolean isValid() {
+        for (OrderSpec spec : specs) {
+            if (spec.getPropertyPath() == null) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    /**
-        return ((OrderSpec) specs.get(i)).ascending;
+        return specs.get(i).ascending;
-        return (OrderSpec[]) specs.toArray(new OrderSpec[specs.size()]);
+        return specs.toArray(new OrderSpec[specs.size()]);
-        private final Path property;
+        private Path property;
-         * If <code>true</code> this property is orderd ascending
+         * If <code>true</code> this property is ordered ascending
+         * The function applied to the property
+         */
+        private String function;
+
+        /**
+         * Set a new value for the path
+         *
+         * @param path  a path
+         */
+        public void setPath(Path path) {
+            this.property = path;
+        }
+
+        /**
+         * Set a new value for a function
+         *
+         * @param name a function name
+         */
+        public void setFunction(String name) {
+            this.function = name;
+        }
+
+        /**
+         * @return  name of the function 
+         */
+        public String getFunction() {
+            return function;
+        }
+        
+        /**
+
