JCR-1104 - JSR 283 support
- shareble nodes (work in progress)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638398 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashSet;
+    
+    /**
+     * Shared set, consisting of the parent ids of this shareable node. This
+     * entry is {@link Collections.EMPTY_SET} if this node is not shareable.
+     */
+    private Set sharedSet = Collections.EMPTY_SET; 
+    
+    /**
+     * Flag indicating whether we are using a read-write shared set.
+     */
+    private boolean sharedSetRW; 
+            sharedSet = nodeState.sharedSet;
+    
+    /**
+     * Return a flag indicating whether this state is shareable, i.e. whether
+     * there is at least one member inside its shared set.
+     */
+    public synchronized boolean isShareable() {
+        return sharedSet != Collections.EMPTY_SET;
+    }
+    
+    /**
+     * Add a parent to the shared set.
+     * 
+     * @param parentId parent id to add to the shared set
+     * @return <code>true</code> if the parent was successfully added;
+     *         <code>false</code> otherwise
+     */
+    public synchronized boolean addShare(NodeId parentId) {
+        // check first before making changes
+        if (sharedSet.contains(parentId)) {
+            return false;
+        }
+        if (!sharedSetRW) {
+            sharedSet = new LinkedHashSet();
+            sharedSetRW = true;
+        }
+        return sharedSet.add(parentId);
+    }
+    
+    /**
+     * Return a flag whether the given parent id appears in the shared set.
+     * 
+     * @param parentId parent id
+     * @return <code>true</code> if the parent id appears in the shared set;
+     *         <code>false</code> otherwise.
+     */
+    public synchronized boolean containsShare(NodeId parentId) {
+        return sharedSet.contains(parentId);
+    }
+    
+    /**
+     * Return the shared set as an unmodifiable collection.
+     * 
+     * @return unmodifiable collection
+     */
+    public Set getSharedSet() {
+        if (sharedSet != Collections.EMPTY_SET) {
+            return Collections.unmodifiableSet(sharedSet);
+        }
+        return Collections.EMPTY_SET;
+    }
+    
+    /**
+     * Set the shared set of this state to the shared set of another state.
+     * This state will get a deep copy of the shared set given.
+     * 
+     * @param set shared set
+     */
+    public synchronized void setSharedSet(Set set) {
+        if (set != Collections.EMPTY_SET) {
+            sharedSet = new LinkedHashSet(set);
+            sharedSetRW = true;
+        } else {
+            sharedSet = Collections.EMPTY_SET;            
+        }
+    }
+
+    /**
+     * Remove a parent from the shared set. Returns the number of
+     * elements in the shared set. If this number is <code>0</code>,
+     * the shared set is empty, i.e. there are no more parent items
+     * referencing this item and the state is free floating.
+     * 
+     * @param parentId parent id to remove from the shared set
+     * @return the number of elements left in the shared set
+     */
+    public synchronized int removeShare(NodeId parentId) {
+        // check first before making changes
+        if (sharedSet.contains(parentId)) {
+            if (!sharedSetRW) {
+                sharedSet = new LinkedHashSet(sharedSet);
+                sharedSetRW = true;
+            }
+            sharedSet.remove(parentId);
+            if (parentId.equals(this.parentId)) {
+                if (!sharedSet.isEmpty()) {
+                    this.parentId = (NodeId) sharedSet.iterator().next();
+                } else {
+                    this.parentId = null;
+                }
+            }
+        }
+        return sharedSet.size();
+    }
