JCR-1159 SPI: improve description of locking methods on RepositoryService

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@582813 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.Item;
+     * @throws RepositoryException If an error occurs.
-    public IdFactory getIdFactory();
+    public IdFactory getIdFactory() throws RepositoryException;
+     * @throws RepositoryException If an error occurs.
-    public QValueFactory getQValueFactory();
+    public QValueFactory getQValueFactory() throws RepositoryException;
-     * @throws RepositoryException
+     * @throws javax.jcr.RepositoryException
-     * @throws RepositoryException
+     * @throws javax.jcr.RepositoryException
-     * @throws RepositoryException
+     * @throws javax.jcr.RepositoryException
-     * @throws RepositoryException
+     * @throws javax.jcr.RepositoryException
-     * @see Item#save()
-     * @see Session#save()
+     * @see javax.jcr.Item#save()
+     * @see javax.jcr.Session#save()
-     * Retrieve available lock information for the given <code>NodeId</code>.
+     * Returns the lock information that applies to <code>Node</code> identified
+     * by the given <code>NodeId</code> or <code>null</code>. If the implementation
+     * does not support locking at all, this method always returns <code>null</code>.
-     * @return
-     * @throws LockException
-     * @throws RepositoryException
+     * @return The lock information for the Node identified by the given
+     * <code>nodeId</code> or <code>null</code> if no lock applies to that Node.
+     * @throws javax.jcr.AccessDeniedException
+     * @throws javax.jcr.RepositoryException If some other error occurs.
-    public LockInfo getLockInfo(SessionInfo sessionInfo, NodeId nodeId) throws LockException, RepositoryException;
+    public LockInfo getLockInfo(SessionInfo sessionInfo, NodeId nodeId) throws AccessDeniedException, RepositoryException;
-     * @return returns the <code>LockInfo</code> associated with this lock.
-     * @throws javax.jcr.UnsupportedRepositoryOperationException
-     * @throws javax.jcr.lock.LockException
+     * @return The <code>LockInfo</code> associated with the new lock
+     * that has been created.
+     * @throws javax.jcr.UnsupportedRepositoryOperationException If this SPI
+     * implementation does not support locking at all.
+     * @throws javax.jcr.lock.LockException If the Node identified by the given
+     * id cannot be locked due to an existing lock or due to missing mixin type.
-     * @throws javax.jcr.InvalidItemStateException
-     * @throws javax.jcr.RepositoryException
+     * @throws javax.jcr.RepositoryException If another error occurs.
-    public LockInfo lock(SessionInfo sessionInfo, NodeId nodeId, boolean deep, boolean sessionScoped) throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, InvalidItemStateException, RepositoryException;
+    public LockInfo lock(SessionInfo sessionInfo, NodeId nodeId, boolean deep, boolean sessionScoped) throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, RepositoryException;
-     * @throws javax.jcr.lock.LockException
-     * @throws javax.jcr.RepositoryException
-     * @see javax.jcr.lock.Lock#refresh()
+     * @throws javax.jcr.UnsupportedRepositoryOperationException If this SPI
+     * implementation does not support locking at all.
+     * @throws javax.jcr.lock.LockException If the Node identified by the given
+     * id is not locked (any more) or if the <code>SessionInfo</code> does not
+     * contain the token associated with the lock to be refreshed.
+     * @throws javax.jcr.AccessDeniedException
+     * @throws javax.jcr.RepositoryException If another error occurs.
+     * @see javax.jcr.lock.Lock
-    public void refreshLock(SessionInfo sessionInfo, NodeId nodeId) throws LockException, RepositoryException;
+    public void refreshLock(SessionInfo sessionInfo, NodeId nodeId) throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, RepositoryException;
-     * @throws javax.jcr.UnsupportedRepositoryOperationException
-     * @throws javax.jcr.lock.LockException
+     * @throws javax.jcr.UnsupportedRepositoryOperationException If this SPI
+     * implementation does not support locking at all.
+     * @throws javax.jcr.lock.LockException If the Node identified by the given
+     * id is not locked or if the <code>SessionInfo</code> does not contain the
+     * token associated with the lock to be released.
-     * @throws javax.jcr.InvalidItemStateException
-     * @throws javax.jcr.RepositoryException
+     * @throws javax.jcr.RepositoryException If another error occurs.
-    public void unlock(SessionInfo sessionInfo, NodeId nodeId) throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, InvalidItemStateException, RepositoryException;
+    public void unlock(SessionInfo sessionInfo, NodeId nodeId) throws UnsupportedRepositoryOperationException, LockException, AccessDeniedException, RepositoryException;
