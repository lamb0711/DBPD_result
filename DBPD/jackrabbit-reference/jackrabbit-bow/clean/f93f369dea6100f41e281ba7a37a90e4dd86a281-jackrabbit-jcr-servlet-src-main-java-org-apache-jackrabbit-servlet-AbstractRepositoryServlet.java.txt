JCR-956: Use the existing RepositoryFactory interface instead of recreating it as an abstract factory method of AbstractRepositoryServlet. As a bonus this automatically makes all repository binding servlets use lazy loading for the repository.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@606928 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.repository.ProxyRepository;
+import org.apache.jackrabbit.commons.repository.RepositoryFactory;
+
- * {@link #getRepository()} method to actually make the repository available.
+ * {@link #getRepositoryFactory()} method that returns a factory for
+ * retrieving the actual content repository.
+ * <p>
+ * The {@link Repository} instance bound to the servlet context is actually
+ * a {@link ProxyRepository} that uses the given {@link RepositoryFactory}
+ * for late binding of the underlying content repository.
-     * Retrieves a repository and binds it in servlet context attribute.
+     * Binds a {@link ProxyRepository} with the factory returned by
+     * {@link #getRepositoryFactory()} in the configured servlet
+     * context attribute.
-     * @throws ServletException if the repository can not be retrieved
+     * @throws ServletException if the factory could not be retrieved
-        getServletContext().setAttribute(getAttributeName(), getRepository());
+        getServletContext().setAttribute(
+                getAttributeName(),
+                new ProxyRepository(getRepositoryFactory()));
-     * Returns the repository instance to be bound in the servlet context.
-     * This method is invoked once during servlet initialization and is the
-     * only method that a subclass needs to implement.
-     * <p>
-     * Note that the returned repository can be (and often is) a proxy
-     * instance that accesses the actual repository only on demand. This
-     * allows late binding of the repository even though this method gets
-     * called already during servlet initialization.
+     * Returns the repository factory that will be used by the
+     * {@link ProxyRepository} bound to the servlet context.
-     * @return repository instance
-     * @throws ServletException if the repository is not available
+     * @return repository factory
+     * @throws ServletException if the factory could not be created
-    protected abstract Repository getRepository() throws ServletException;
+    protected abstract RepositoryFactory getRepositoryFactory()
+        throws ServletException;
+     * @throws ServletException on servlet errors
-            throws IOException {
-        String name = getAttributeName();
-        Repository repository = (Repository)
-            getServletContext().getAttribute(name);
+            throws IOException, ServletException {
+        Repository repository = new ServletRepository(this);
+            // TODO: Using UTF-8 instead of ISO-8859-1 would be better, but
+            // would require re-implementing the Properties.store() method
-            descriptors.store(response.getOutputStream(), name);
+            descriptors.store(response.getOutputStream(), getAttributeName());
