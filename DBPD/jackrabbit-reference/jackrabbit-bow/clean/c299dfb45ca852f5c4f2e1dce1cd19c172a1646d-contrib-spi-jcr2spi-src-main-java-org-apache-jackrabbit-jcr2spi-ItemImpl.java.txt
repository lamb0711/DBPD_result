work in progress

- event processing upon saving transient modifications
- extend ItemState.refresh: add Event and ev. ChangeLog as param
- EventImpl: parentId missing
- remove ItemStateListener
- all state changes are covered by ItemStateLifeCycleListener.statusChanged(ItemState, int)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@453514 13f79535-47bb-0310-9956-ffa450edef68

-            /** TODO should reset Item#status field to STATUS_NORMAL
-             * of all descendent non-transient instances; maybe also
-             * have to reset stale ItemState instances */
-     * {@inheritDoc}
+     *
+     * @param state
+     * @param previousStatus
-    public void stateCreated(ItemState created) {
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDestroyed(ItemState destroyed) {
-        // underlying state has been permanently destroyed
-
-        // dispose state
-        if (state == destroyed) {
-            state.removeListener(this);
-            state = null;
-        }
-        /**
-         * notify the listeners that this instance has been
-         * permanently invalidated
-         */
-        notifyDestroyed();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateModified(ItemState modified) {
-    }
-
-        // TODO: remove this ItemImpl as listener from ItemState when it is destroyed?
+        // TODO: ev. assert that state is this.state?
+
+            /**
+             * Nothing to do for
+             * - ItemState.STATUS_EXISTING : modifications reverted or saved
+             * - ItemState.STATUS_EXISTING_MODIFIED : transient modification
+             * - ItemState.STATUS_STALE_MODIFIED : external modifications while transient changes pending
+             * - ItemState.MODIFIED : externaly modified -> marker for sessionISM states only
+             */
-                // this item was modified and is now reverted or has been saved
-                // -> nothing to do
-                break;
-                // item was modified and is not existing-modified
-                // -> nothing to do
+            case ItemState.STATUS_STALE_MODIFIED:
+            case ItemState.STATUS_MODIFIED:
+            /**
+             * Notify listeners that this item is transiently or permanently
+             * destroyed.
+             * - STATUS_EXISTING_REMOVED : transient removal
+             * - STATUS_REMOVED : permanent removal. item will never get back to life
+             * - STATUS_STALE_DESTROYED : permanent removal. item will never get back to life
+             */
-                // item is transiently removed
-                // notify listeners of this item that this item has been destroyed
-            case ItemState.STATUS_NEW:
-                // should never happen. an item cannot change its state to new
-                log.warn("invalid state change to STATUS_NEW");
-                break;
-                // item has been removed permanently
-                notifyDestroyed();
-                break;
-                // item has been removed permanently while there were transient
-                // changes pending
+                state.removeListener(this);
+                this.state = null;
-            case ItemState.STATUS_STALE_MODIFIED:
-                // item has been modified externaly while there were transient
-                // changes pending
-                // -> nothing to do
+            /**
+             * Invalid status. A state can never change its state to 'New'.
+             */
+            case ItemState.STATUS_NEW:
+                // should never happen.
+                log.error("invalid state change to STATUS_NEW");
