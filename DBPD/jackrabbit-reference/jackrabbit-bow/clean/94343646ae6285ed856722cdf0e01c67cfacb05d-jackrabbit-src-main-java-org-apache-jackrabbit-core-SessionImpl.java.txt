explicitly check for absolute path rather than relying on implicit check when path is resolved

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@350252 13f79535-47bb-0310-9956-ffa450edef68

-        Path targetPath = null;
+        Path targetPath;
+        try {
+            targetPath = Path.create(absPath, getNamespaceResolver(), true);
+        } catch (MalformedPathException mpe) {
+            String msg = "invalid path: " + absPath;
+            log.debug(msg, mpe);
+            throw new RepositoryException(msg);
+        }
+        if (!targetPath.isAbsolute()) {
+            throw new RepositoryException("not an absolute path: " + absPath);
+        }
+
-                targetPath = Path.create(absPath, getNamespaceResolver(), true);
-            } catch (MalformedPathException mpe) {
-                String msg = "invalid path: " + absPath;
-                log.warn(msg, mpe);
-                throw new RepositoryException(msg);
-                if (targetPath == null) {
-                    targetPath = Path.create(absPath, getNamespaceResolver(), true);
-                }
-            } catch (MalformedPathException mpe) {
-                String msg = "invalid path: " + absPath;
-                log.warn(msg, mpe);
-                throw new RepositoryException(msg);
-                if (targetPath == null) {
-                    targetPath = Path.create(absPath, getNamespaceResolver(), true);
-                }
-            } catch (MalformedPathException mpe) {
-                String msg = "invalid path: " + absPath;
-                log.warn(msg, mpe);
-                throw new RepositoryException(msg);
-                if (targetPath == null) {
-                    targetPath = Path.create(absPath, getNamespaceResolver(), true);
-                }
-            } catch (MalformedPathException mpe) {
-                String msg = "invalid path: " + absPath;
-                log.warn(msg, mpe);
-                throw new RepositoryException(msg);
-            return getItemManager().getItem(Path.create(absPath, getNamespaceResolver(), true));
+            Path p = Path.create(absPath, getNamespaceResolver(), true);
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + absPath);
+            }
+            return getItemManager().getItem(p);
-            return getItemManager().itemExists(Path.create(absPath, getNamespaceResolver(), true));
+            Path p = Path.create(absPath, getNamespaceResolver(), true);
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + absPath);
+            }
+            return getItemManager().itemExists(p);
+            if (!srcPath.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + srcAbsPath);
+            }
+            if (!destPath.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + destAbsPath);
+            }
-            item = getItemManager().getItem(Path.create(parentAbsPath, getNamespaceResolver(), true));
+            Path p = Path.create(parentAbsPath, getNamespaceResolver(), true);
+            if (!p.isAbsolute()) {
+                throw new RepositoryException("not an absolute path: " + parentAbsPath);
+            }
+            item = getItemManager().getItem(p);
