JCR-890: concurrent read-only access to a session

Add WorkspaceImpl into SessionContext

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@985296 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.jackrabbit.core.lock.LockManagerImpl;
+import org.apache.jackrabbit.core.lock.XALockManager;
+import org.apache.jackrabbit.core.state.ItemStateCacheFactory;
+import org.apache.jackrabbit.core.state.XAItemStateManager;
+     * The component context of this session.
+     */
+    protected final SessionContext context;
+
+    /**
-     * The component context of the repository that created this workspace.
-     */
-    protected final RepositoryContext repositoryContext;
-
-    /**
-     * The component context of this session.
-     */
-    protected final SessionContext sessionContext;
-
-    /**
-     * Protected constructor.
+     * Creates a new workspace instance
+     * @param context component context of this session
-     * @param sessionContext component context of this session
+     * @throws RepositoryException if the workspace can not be accessed 
-    protected WorkspaceImpl(
-            WorkspaceConfig wspConfig, SessionContext sessionContext)
+    public WorkspaceImpl(
+            SessionContext context, WorkspaceConfig wspConfig)
+        this.context = context;
-        this.sessionContext = sessionContext;
-        this.repositoryContext = sessionContext.getRepositoryContext();
-                repositoryContext.getRootNodeId(), this.stateMgr);
+                context.getRootNodeId(), this.stateMgr);
-        this.session = sessionContext.getSessionImpl();
+        this.session = context.getSessionImpl();
-        sessionContext.getSessionState().checkAlive();
+        context.getSessionState().checkAlive();
-            throws AccessDeniedException, UnsupportedRepositoryOperationException,
-            RepositoryException {
+            throws AccessDeniedException, RepositoryException {
-        session.createWorkspace(name);
+        WorkspaceManager manager =
+            context.getRepositoryContext().getWorkspaceManager();
+
+        // TODO verify that this session has the right privileges
+        // for this operation
+        manager.createWorkspace(name);
-            tmpSession = repositoryContext.getWorkspaceManager().createSession(
-                    session.getSubject(), name);
+            tmpSession = manager.createSession(session.getSubject(), name);
-           Node root = session.getRootNode();
+           Node root = getSession().getRootNode();
-        repositoryContext.getRepository().getWorkspaceInfo(name);
+        context.getRepository().getWorkspaceInfo(name);
-                new SessionLockManager(sessionContext, session.getLockManager());
+                new SessionLockManager(context, getInternalLockManager());
-            versionMgr = new VersionManagerImpl(sessionContext, stateMgr, hierMgr);
+            versionMgr = new VersionManagerImpl(context, stateMgr, hierMgr);
-     * @throws UnsupportedRepositoryOperationException if the repository does
-     * not support the creation of workspaces.
-            throws AccessDeniedException,
-            UnsupportedRepositoryOperationException,
-            RepositoryException {
+            throws AccessDeniedException, RepositoryException {
-        session.createWorkspace(name);
+        // TODO verify that this session has the right privileges
+        // for this operation
+        context.getRepositoryContext().getWorkspaceManager().createWorkspace(name);
-    public void createWorkspace(String workspaceName, InputSource configTemplate)
+    public void createWorkspace(
+            String workspaceName, InputSource configTemplate)
-        session.createWorkspace(workspaceName, configTemplate);
+        // TODO verify that this session has the right privileges
+        // for this operation
+        context.getRepositoryContext().getWorkspaceManager().createWorkspace(
+                workspaceName, configTemplate);
+
-            srcPath = session.getQPath(srcAbsPath).getNormalizedPath();
+            srcPath = context.getQPath(srcAbsPath).getNormalizedPath();
-            destPath = session.getQPath(destAbsPath).getNormalizedPath();
+            destPath = context.getQPath(destAbsPath).getNormalizedPath();
-            new BatchedItemOperations(stateMgr, sessionContext);
+            new BatchedItemOperations(stateMgr, context);
-                    srcWsp.sessionContext.getAccessManager(),
+                    srcWsp.context.getAccessManager(),
-            return session.getJCRPath(hierMgr.getPath(id));
+            return context.getJCRPath(hierMgr.getPath(id));
-            srcPath = session.getQPath(srcAbsPath).getNormalizedPath();
+            srcPath = context.getQPath(srcAbsPath).getNormalizedPath();
-            destPath = session.getQPath(destAbsPath).getNormalizedPath();
+            destPath = context.getQPath(destAbsPath).getNormalizedPath();
-            new BatchedItemOperations(stateMgr, sessionContext);
+            new BatchedItemOperations(stateMgr, context);
-            return session.getJCRPath(hierMgr.getPath(id));
+            return context.getJCRPath(hierMgr.getPath(id));
-            lockMgr = repositoryContext.getRepository().getLockManager(
-                    wspConfig.getName());
+            lockMgr =
+                context.getRepository().getLockManager(wspConfig.getName());
+            // FIXME Shouldn't need to use instanceof here
+            if (context.getSessionImpl() instanceof XASessionImpl) {
+                lockMgr = new XALockManager((LockManagerImpl) lockMgr);
+            }
-                repositoryContext.getRepository().getRetentionRegistry(wspConfig.getName());
+                context.getRepository().getRetentionRegistry(wspConfig.getName());
-        // check state of this instance
-        sanityCheck();
-
-        return repositoryContext.getNamespaceRegistry();
+        return context.getRepositoryContext().getNamespaceRegistry();
-        return sessionContext.getNodeTypeManager();
+        return context.getNodeTypeManager();
-        if (!sessionContext.getAccessManager().canAccess(srcWorkspace)) {
+        if (!context.getAccessManager().canAccess(srcWorkspace)) {
-            srcSession = repositoryContext.getWorkspaceManager().createSession(
-                    session.getSubject(), srcWorkspace);
+            WorkspaceManager manager =
+                context.getRepositoryContext().getWorkspaceManager();
+            srcSession = manager.createSession(session.getSubject(), srcWorkspace);
-        if (!sessionContext.getAccessManager().canAccess(srcWorkspace)) {
+        if (!context.getAccessManager().canAccess(srcWorkspace)) {
-            srcSession = repositoryContext.getWorkspaceManager().createSession(
-                    session.getSubject(), srcWorkspace);
+            WorkspaceManager manager =
+                context.getRepositoryContext().getWorkspaceManager();
+            srcSession = manager.createSession(session.getSubject(), srcWorkspace);
-            srcPath = session.getQPath(srcAbsPath).getNormalizedPath();
+            srcPath = context.getQPath(srcAbsPath).getNormalizedPath();
-            destPath = session.getQPath(destAbsPath).getNormalizedPath();
+            destPath = context.getQPath(destAbsPath).getNormalizedPath();
-            new BatchedItemOperations(stateMgr, sessionContext);
+            new BatchedItemOperations(stateMgr, context);
-        return sessionContext.getObservationManager();
+        return context.getObservationManager();
-                searchManager = repositoryContext.getRepository().getSearchManager(wspConfig.getName());
+                searchManager =
+                    context.getRepository().getSearchManager(wspConfig.getName());
-            queryManager = new QueryManagerImpl(sessionContext, searchManager);
+            queryManager = new QueryManagerImpl(context, searchManager);
-     * {@inheritDoc}
+     * Returns the names of all workspaces of this repository with respect of the
+     * access rights of this session.
+     *
+     * @return the names of all accessible workspaces
+     * @throws RepositoryException if an error occurs
-        return session.getWorkspaceNames();
+        // filter workspaces according to access rights
+        List<String> names = new ArrayList<String>();
+        WorkspaceManager manager =
+            context.getRepositoryContext().getWorkspaceManager();
+        for (String name : manager.getWorkspaceNames()) {
+            try {
+                if (context.getAccessManager().canAccess(name)) {
+                    names.add(name);
+                }
+            } catch (NoSuchWorkspaceException e) {
+                log.warn("Workspace disappeared unexpectedly: " + name, e);
+            }
+        }
+        return names.toArray(new String[names.size()]);
+
-            parentPath = session.getQPath(parentAbsPath).getNormalizedPath();
+            parentPath = context.getQPath(parentAbsPath).getNormalizedPath();
-                parentPath, this, sessionContext,
+                parentPath, this, context,
-        return new ImportHandler(importer, session);
+        return new ImportHandler(importer, getSession());
-        WorkspaceManager manager = repositoryContext.getWorkspaceManager();
+        WorkspaceManager manager =
+            context.getRepositoryContext().getWorkspaceManager();
-     * state manager. May be overridden by subclasses.
-     * @param shared shared item state manager
+     * state manager.
+     *
+     * @throws RepositoryException if the workspace can not be accessed 
-        return LocalItemStateManager.createInstance(
-                getSharedItemStateManager(), this,
-                repositoryContext.getItemStateCacheFactory());
+        SharedItemStateManager sism = getSharedItemStateManager();
+        ItemStateCacheFactory iscf =
+            context.getRepositoryContext().getItemStateCacheFactory();
+
+        // FIXME We should be able to avoid the instanceof operator here
+        if (context.getSessionImpl() instanceof XASessionImpl) {
+            return XAItemStateManager.createInstance(
+                    sism, this, null, iscf);
+        } else {
+            return LocalItemStateManager.createInstance(
+                    sism, this, iscf);
+        }
+
