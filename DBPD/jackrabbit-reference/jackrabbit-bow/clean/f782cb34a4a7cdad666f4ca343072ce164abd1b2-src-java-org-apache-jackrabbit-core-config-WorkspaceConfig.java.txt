Refactoring step 3 (JCR-53)
 - Moved workspace.xml parsing to ConfigurationParser
 - Replaced createFileSystem with BeanConfig code
 - Added a TestAll suite for the config package

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156058 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
-import javax.jcr.RepositoryException;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Properties;
-public class WorkspaceConfig extends AbstractConfig {
-    private static Logger log = Logger.getLogger(WorkspaceConfig.class);
-
-    /**
-     * name of workspace configuration file
-     */
-    public static final String CONFIG_FILE_NAME = "workspace.xml";
-
-    /**
-     * public id
-     */
-    public static final String PUBLIC_ID = "-//The Apache Software Foundation//DTD Workspace//EN";
-
-    static final String PERSISTENCE_MANAGER_ELEMENT = "PersistenceManager";
-    private static final String SEARCH_INDEX_ELEMENT = "SearchIndex";
-
-    /**
-     * wellknown variables (will be replaced with their respective values
-     * whereever they occur within the configuration)
-     */
-    public static final String WORKSPACE_HOME_VARIABLE = "${wsp.home}";
-    public static final String WORKSPACE_NAME_VARIABLE = "${wsp.name}";
-
-    private final Properties vars;
+public class WorkspaceConfig {
-    private PersistenceManagerConfig pmConfig;
+    private BeanConfig pmc;
-    /**
-     * private constructor.
-     *
-     * @param is
-     * @param wspHomeDir
-     * @throws RepositoryException
-     */
-    private WorkspaceConfig(InputSource is, String wspHomeDir)
-            throws RepositoryException {
-        super(is);
-        this.wspHomeDir = wspHomeDir;
-        // initialize variables
-        vars = new Properties();
-        vars.put(WORKSPACE_HOME_VARIABLE, wspHomeDir);
-        // read config
-        init(config);
-    }
-
-    /**
-     * Initializes this <code>WorkspaceConfig</code> object.
-     *
-     * @param config
-     * @throws RepositoryException
-     */
-    protected void init(Document config) throws RepositoryException {
-        Element wspElem = config.getRootElement();
-        // name
-        wspName = wspElem.getAttributeValue(NAME_ATTRIB);
-        if (wspName == null) {
-            // init with wsp home dirname
-            wspName = new File(wspHomeDir).getName();
-        } else {
-            ConfigurationParser parser = new ConfigurationParser(vars);
-            wspName = parser.replaceVariables(wspName);
-        }
-
-        // set name variable
-        vars.put(WORKSPACE_NAME_VARIABLE, wspName);
-        ConfigurationParser parser = new ConfigurationParser(vars);
-
-        // file system
-        Element fsElem = wspElem.getChild(FILE_SYSTEM_ELEMENT);
-        wspFS = parser.createFileSystem(fsElem);
-
-        // persistence manager config
-        Element pmElem = wspElem.getChild(PERSISTENCE_MANAGER_ELEMENT);
-        pmConfig = parser.parsePersistenceManagerConfig(pmElem);
-
-        // search config (optional)
-        Element searchElem = wspElem.getChild(SEARCH_INDEX_ELEMENT);
-        if (searchElem != null) {
-            searchConfig = parser.parseSearchConfig(searchElem);
-        }
-    }
-
-    /**
-     * Creates a new <code>WorkspaceConfig</code> instance. The configuration
-     * is read from the specified configuration file.
-     *
-     * @param configFilePath path to the configuration file
-     * @param wspHomeDir     workspace home directory
-     * @return a new <code>WorkspaceConfig</code> instance
-     * @throws RepositoryException If an error occurs
-     */
-    public static WorkspaceConfig create(String configFilePath, String wspHomeDir)
-            throws RepositoryException {
-        try {
-            File config = new File(configFilePath);
-            InputSource is = new InputSource(new FileReader(config));
-            is.setSystemId(config.toURI().toString());
-            return new WorkspaceConfig(is, wspHomeDir);
-        } catch (IOException ioe) {
-            String msg = "error while reading config file " + configFilePath;
-            log.debug(msg);
-            throw new RepositoryException(msg, ioe);
-        }
-    }
-
-    /**
-     * Creates a new <code>WorkspaceConfig</code> instance. The configuration
-     * is read from the specified input source.
-     *
-     * @param is         <code>InputSource</code> where the configuration is read from
-     * @param wspHomeDir workspace home directory
-     * @return a new <code>WorkspaceConfig</code> instance
-     * @throws RepositoryException If an error occurs
-     */
-    public static WorkspaceConfig create(InputSource is, String wspHomeDir)
-            throws RepositoryException {
-        return new WorkspaceConfig(is, wspHomeDir);
+    public WorkspaceConfig(String home, String name, FileSystem fs, BeanConfig pmc, SearchConfig sc) {
+        this.wspHomeDir = home;
+        this.wspName = name;
+        this.wspFS = fs;
+        this.pmc = pmc;
+        this.searchConfig = sc;
-        return pmConfig;
+        return new PersistenceManagerConfig(pmc);
-    //------------------------------------------------------< EntityResolver >
-    /**
-     * @see org.xml.sax.EntityResolver#resolveEntity(String, String)
-     */
-    public InputSource resolveEntity(String publicId, String systemId)
-            throws SAXException, IOException {
-        if (publicId.equals(PUBLIC_ID)) {
-            // load dtd resource
-            return new InputSource(getClass().getClassLoader().getResourceAsStream(CONFIG_DTD_RESOURCE_PATH));
-        } else {
-            // use the default behaviour
-            return null;
-        }
-    }
