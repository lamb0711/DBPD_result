JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.conversion.NameResolver;
-        QName name = getQName();
-        try {
-            return NameFormat.format(name, session.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException npde) {
-            // should never get here...
-            String msg = "Internal error: encountered unregistered namespace " + name.getNamespaceURI();
-            log.debug(msg);
-            throw new RepositoryException(msg, npde);
-        }
+        Name name = getQName();
+        return session.getNameResolver().getJCRName(name);
-            qValues = ValueFormat.getQValues(vs, session.getNamespaceResolver(), session.getQValueFactory());
+            qValues = ValueFormat.getQValues(vs, session.getNamePathResolver(), session.getQValueFactory());
-                        qValue = ValueFormat.getQValue(v, session.getNamespaceResolver(), session.getQValueFactory());
+                        qValue = ValueFormat.getQValue(v, session.getNamePathResolver(), session.getQValueFactory());
-            checkValidReference(value, reqType, session.getNamespaceResolver());
+            checkValidReference(value, reqType, session.getNameResolver());
-        return ValueFormat.getJCRValue(value, session.getNamespaceResolver(), session.getJcrValueFactory());
+        return ValueFormat.getJCRValue(value, session.getNamePathResolver(), session.getJcrValueFactory());
-            values[i] = ValueFormat.getJCRValue(qValues[i], session.getNamespaceResolver(), session.getJcrValueFactory());
+            values[i] = ValueFormat.getJCRValue(qValues[i], session.getNamePathResolver(), session.getJcrValueFactory());
-                Value jcrValue = ValueFormat.getJCRValue(value, session.getNamespaceResolver(), session.getJcrValueFactory());
+                Value jcrValue = ValueFormat.getJCRValue(value, session.getNamePathResolver(), session.getJcrValueFactory());
-     * Returns the QName defined with this <code>PropertyState</code>
+     * Returns the Name defined with this <code>PropertyState</code>
-     * @see PropertyState#getQName()
-     * @see ItemImpl#getQName()
+     * @see PropertyState#getName()
+     * @see ItemImpl#getName()
-    QName getQName() {
-        return getPropertyState().getQName();
+    Name getQName() {
+        return getPropertyState().getName();
-            qValue = ValueFormat.getQValue(v, session.getNamespaceResolver(), session.getQValueFactory());
+            qValue = ValueFormat.getQValue(v, session.getNamePathResolver(), session.getQValueFactory());
-            qValue = ValueFormat.getQValue(value, session.getNamespaceResolver(), session.getQValueFactory());
+            qValue = ValueFormat.getQValue(value, session.getNamePathResolver(), session.getQValueFactory());
-    static void checkValidReference(Node value, int propertyType, NamespaceResolver nsResolver) throws ValueFormatException, RepositoryException {
+    static void checkValidReference(Node value, int propertyType, NameResolver resolver) throws ValueFormatException, RepositoryException {
-            try {
-                String jcrName = NameFormat.format(QName.MIX_REFERENCEABLE, nsResolver);
-                if (!value.isNodeType(jcrName)) {
-                    throw new ValueFormatException("Target node must be of node type mix:referenceable");
-                }
-            } catch (NoPrefixDeclaredException e) {
-                throw new RepositoryException(e);
+            String jcrName = resolver.getJCRName(NameConstants.MIX_REFERENCEABLE);
+            if (!value.isNodeType(jcrName)) {
+                throw new ValueFormatException("Target node must be of node type mix:referenceable");
