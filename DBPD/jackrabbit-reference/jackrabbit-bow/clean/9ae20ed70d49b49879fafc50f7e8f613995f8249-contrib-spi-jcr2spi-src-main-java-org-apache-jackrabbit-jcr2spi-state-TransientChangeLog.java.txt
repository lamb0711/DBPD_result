- implement an ItemStateFactory (ISF) for transient space
- extends ISF with transient specific methods to create new item states
- remove ItemStateManager interface from ChangeLog again

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429615 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
-public class TransientChangeLog extends ChangeLog implements TransientItemStateManager {
+public class TransientChangeLog extends ChangeLog
+        implements TransientItemStateManager, TransientItemStateFactory, ItemStateListener {
+     * The parent item state manager, which return item states that are then
+     * overlayed by transient item states created by this TransientChangeLog.
+     */
+    private final ItemStateManager parent;
+
+    /**
-    TransientChangeLog(IdFactory idFactory) {
+    TransientChangeLog(IdFactory idFactory, ItemStateManager parent) {
+        this.parent = parent;
-        if (!addedStates.containsKey(state.getId())) {
-            modifiedStates.put(state.getId(), state);
+        if (!addedStates.contains(state)) {
+            modifiedStates.add(state);
-        if (addedStates.remove(state.getId()) == null) {
-            modifiedStates.remove(state.getId());
-            deletedStates.put(state.getId(), state);
+        if (addedStates.remove(state)) {
+            modifiedStates.remove(state);
+            deletedStates.add(state);
+    //-----------------------< ItemStateManager >-------------------------------
+
+    /**
+     * Return an item state given its id. Returns <code>null</code>
+     * if the item state is neither in the added nor in the modified
+     * section. Throws a <code>NoSuchItemStateException</code> if
+     * the item state is in the deleted section.
+     *
+     * @return item state or <code>null</code>
+     * @throws NoSuchItemStateException if the item has been deleted
+     * @see ItemStateManager#getItemState(ItemId)
+     */
+    public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {
+        // TODO: this is expensive. Improvement: Lookup item, then check its state
+        ItemState state = null;
+        for (Iterator it = addedStates.iterator(); it.hasNext(); ) {
+            ItemState s = (ItemState) it.next();
+            if (s.getId().equals(id)) {
+                state = s;
+                break;
+            }
+        }
+        if (state == null) {
+            for (Iterator it = modifiedStates.iterator(); it.hasNext(); ) {
+                ItemState s = (ItemState) it.next();
+                if (s.getId().equals(id)) {
+                    state = s;
+                    break;
+                }
+            }
+            if (state == null) {
+                for (Iterator it = deletedStates.iterator(); it.hasNext(); ) {
+                    ItemState s = (ItemState) it.next();
+                    if (s.getId().equals(id)) {
+                        throw new NoSuchItemStateException("State has been marked destroyed: " + id);
+                    }
+                }
+            }
+        }
+        return state;
+    }
+
+    /**
+     * Return a flag indicating whether a given item state exists.
+     *
+     * @return <code>true</code> if item state exists within this
+     *         log; <code>false</code> otherwise
+     * @see ItemStateManager#hasItemState(ItemId)
+     */
+    public boolean hasItemState(ItemId id) {
+        // TODO: too expensive. lookup item and check status
+        for (Iterator it = addedStates.iterator(); it.hasNext(); ) {
+            ItemState s = (ItemState) it.next();
+            if (s.getId().equals(id)) {
+                return true;
+            }
+        }
+        for (Iterator it = modifiedStates.iterator(); it.hasNext(); ) {
+            ItemState s = (ItemState) it.next();
+            if (s.getId().equals(id)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Return a node references object given its id. Returns
+     * <code>null</code> if the node reference is not in the modified
+     * section.
+     *
+     * @return node references or <code>null</code>
+     * @see ItemStateManager#getNodeReferences(NodeId)
+     */
+    public NodeReferences getNodeReferences(NodeId id) {
+        // TODO: improve
+        for (Iterator it = modifiedRefs.iterator(); it.hasNext(); ) {
+            NodeReferences refs = (NodeReferences) it.next();
+            if (refs.getId().equals(id)) {
+                return refs;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Returns <code>false</code> if the node reference is not in the modified
+     * section.
+     *
+     * @return false if no references are present in this changelog for the
+     * given id.
+     * @see ItemStateManager#hasNodeReferences(NodeId)
+     */
+    public boolean hasNodeReferences(NodeId id) {
+        return getNodeReferences(id) != null;
+    }
+
+     * TODO: remove this method
-        ItemStateFactory isf = null; // TODO: probably not correct
-        return new NodeState(id, parent, nodeTypeName, ItemState.STATUS_NEW, true, isf);
+        // TODO: replace with call to createNewNodeState() and finally remove method
+        return new NodeState(id, parent, nodeTypeName, ItemState.STATUS_NEW, true, this);
+     * TODO: remove this method
-            if ((state = (NodeState) addedStates.get(id)) != null
-                    || (state = (NodeState) modifiedStates.get(id)) != null) {
-                String msg = "there's already a node state instance with id " + id;
-                log.warn(msg);
-                return state;
-            }
+//            if ((state = (NodeState) addedStates.get(id)) != null
+//                    || (state = (NodeState) modifiedStates.get(id)) != null) {
+//                String msg = "there's already a node state instance with id " + id;
+//                log.warn(msg);
+//                return state;
+//            }
-            state = new NodeState(overlayedState, ItemState.STATUS_EXISTING_MODIFIED, true);
+            state = new NodeState(overlayedState, null, ItemState.STATUS_EXISTING_MODIFIED, true, this);
-            modifiedStates.put(id, state);
+            modifiedStates.add(state);
+     * TODO: remove this method
+     * TODO: remove this method
-            if ((state = (PropertyState) addedStates.get(id)) != null
-                    || (state = (PropertyState) modifiedStates.get(id)) != null) {
-                String msg = "there's already a property state instance with id " + id;
-                log.warn(msg);
-                return state;
-            }
+//            if ((state = (PropertyState) addedStates.get(id)) != null
+//                    || (state = (PropertyState) modifiedStates.get(id)) != null) {
+//                String msg = "there's already a property state instance with id " + id;
+//                log.warn(msg);
+//                return state;
+//            }
-            state = new PropertyState(overlayedState, ItemState.STATUS_EXISTING_MODIFIED, true);
+            state = new PropertyState(overlayedState, null, ItemState.STATUS_EXISTING_MODIFIED, true);
-            modifiedStates.put(id, state);
+            modifiedStates.add(state);
-        if (addedStates.remove(state.getId()) == null) {
-            modifiedStates.remove(state.getId());
+        if (addedStates.remove(state)) {
+            modifiedStates.remove(state);
-        if (addedStates.remove(state.getId()) == null) {
-            modifiedStates.remove(state.getId());
+        if (addedStates.remove(state)) {
+            modifiedStates.remove(state);
-        deletedStates.put(state.getId(), state);
+        deletedStates.add(state);
-        deletedStates.remove(state.getId());
+        deletedStates.remove(state);
+    //----------------------< TransientItemStateFactory >-----------------------
+
+    /**
+     * @inheritDoc
+     * @see TransientItemStateFactory#createNewNodeState(QName, String, NodeState)
+     */
+    public NodeState createNewNodeState(QName name, String uuid, NodeState parent) {
+        NodeId id;
+        if (uuid == null) {
+            id = idFactory.createNodeId(parent.getNodeId(), Path.create(name, 0));
+        } else {
+            id = idFactory.createNodeId(uuid);
+        }
+        NodeState nodeState = new NodeState(id, parent, null, ItemState.STATUS_NEW, true, this);
+        // get a notification when this item state is saved or invalidated
+        nodeState.addListener(this);
+        added(nodeState);
+        return nodeState;
+    }
+
+    /**
+     * @inheritDoc
+     * @see TransientItemStateFactory#createNewPropertyState(QName, NodeState)
+     */
+    public PropertyState createNewPropertyState(QName name, NodeState parent) {
+        PropertyId id = idFactory.createPropertyId(parent.getNodeId(), name);
+        PropertyState propState = new PropertyState(id, parent, ItemState.STATUS_NEW, true);
+        // get a notification when this item state is saved or invalidated
+        propState.addListener(this);
+        added(propState);
+        return propState;
+    }
+
+    /**
+     * @inheritDoc
+     * @see TransientItemStateFactory#createNodeState(NodeId, ItemStateManager)
+     */
+    public NodeState createNodeState(NodeId nodeId, ItemStateManager ism)
+            throws NoSuchItemStateException, ItemStateException {
+        // retrieve state to overlay
+        NodeState overlayedState = (NodeState) parent.getItemState(nodeId);
+        NodeId parentId = overlayedState.getParent().getNodeId();
+        NodeState parentState = (NodeState) ism.getItemState(parentId);
+        return new NodeState(overlayedState, parentState, ItemState.STATUS_EXISTING, true, this);
+    }
+
+    /**
+     * @inheritDoc
+     * @see TransientItemStateFactory#createNodeState(NodeId, NodeState)
+     */
+    public NodeState createNodeState(NodeId nodeId, NodeState parentState)
+            throws NoSuchItemStateException, ItemStateException {
+        // retrieve state to overlay
+        NodeState overlayedState = (NodeState) parent.getItemState(nodeId);
+        return new NodeState(overlayedState, parentState, ItemState.STATUS_EXISTING, true, this);
+    }
+
+    /**
+     * @inheritDoc
+     * @see TransientItemStateFactory#createPropertyState(PropertyId, ItemStateManager)
+     */
+    public PropertyState createPropertyState(PropertyId propertyId,
+                                             ItemStateManager ism)
+            throws NoSuchItemStateException, ItemStateException {
+        // retrieve state to overlay
+        PropertyState overlayedState = (PropertyState) parent.getItemState(propertyId);
+        NodeId parentId = overlayedState.getParent().getNodeId();
+        NodeState parentState = (NodeState) ism.getItemState(parentId);
+        return new PropertyState(overlayedState, parentState, ItemState.STATUS_EXISTING, true);
+    }
+
+    /**
+     * @inheritDoc
+     * @see TransientItemStateFactory#createPropertyState(PropertyId, NodeState)
+     */
+    public PropertyState createPropertyState(PropertyId propertyId,
+                                             NodeState parentState)
+            throws NoSuchItemStateException, ItemStateException {
+        // retrieve state to overlay
+        PropertyState overlayedState = (PropertyState) parent.getItemState(propertyId);
+        return new PropertyState(overlayedState, parentState, ItemState.STATUS_EXISTING, true);
+    }
+
+    //---------------------------< ItemStateListener >--------------------------
+
+    /**
+     * @inheritDoc
+     * @see ItemStateListener#stateCreated(ItemState)
+     */
+    public void stateCreated(ItemState created) {
+        // TODO: remove from added set of change log
+    }
+
+    /**
+     * @inheritDoc
+     * @see ItemStateListener#stateModified(ItemState)
+     */
+    public void stateModified(ItemState modified) {
+        // TODO: remove from modified set of change log
+    }
+
+    /**
+     * @inheritDoc
+     * @see ItemStateListener#stateDestroyed(ItemState)
+     */
+    public void stateDestroyed(ItemState destroyed) {
+        // TODO: remove from deleted set of change log
+    }
+
+    /**
+     * @inheritDoc
+     * @see ItemStateListener#stateDiscarded(ItemState)
+     */
+    public void stateDiscarded(ItemState discarded) {
+        // TODO: remove from modified (and deleted?) set of change log
+    }
+
-            ItemState state = (ItemState) deletedStates.get(id);
+            // TODO: too expensive. rather lookup item and check state
+            ItemState state = null;
+            for (Iterator it = deletedStates.iterator(); it.hasNext(); ) {
+                ItemState s = (ItemState) it.next();
+                if (s.getId().equals(id)) {
+                    state = s;
+                }
+            }
-            return deletedStates.containsKey(id);
+            // TODO: too expensive. rather lookup item and check state
+            for (Iterator it = deletedStates.iterator(); it.hasNext(); ) {
+                ItemState s = (ItemState) it.next();
+                if (s.getId().equals(id)) {
+                    return true;
+                }
+            }
+            return false;
