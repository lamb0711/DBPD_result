JCR-1166: JCR2SPI does not provide actual size on RangeIterator.getSize()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@599349 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * The number of items.
+     * Note, that the size may change over the time due to the lazy behaviour
+     * of this iterator that may only upon iteration found out, that a
+     * hierarchy entry has been invalidated or removed in the mean time.
+     */
+    private long size;
-        // prefetch first item
+        if (hierarchyEntryIterator instanceof RangeIterator) {
+            size = ((RangeIterator) hierarchyEntryIterator).getSize();
+        } else {
+            size = UNDEFINED_SIZE;
+        }
+        // prefetch first item
-        this.iter = entries.iterator();
-
-        // prefetch first item
+        iter = entries.iterator();
+        size = entries.size();
+        // prefetch first item
-                // try the next
+                // reduce the size ... and try the next one
+                size--;
-                // try the next
+                // reduce the size... and try the next one
+                size--;
-     * Always returns -1.
+     * Returns the number of <code>Item</code>s in this iterator or -1 if the
+     * size is unkown.
+     * </p>
+     * Note: The number returned by this method may differ from the number
+     * of <code>Item</code>s actually returned by calls to hasNext() / getNextNode().
+     * This is caused by the lazy instantiation behaviour of this iterator,
+     * that may detect only upon iteration that an Item has been invalidated
+     * or removed in the mean time. As soon as an invalid <code>Item</code> is
+     * detected, the size of this iterator is adjusted.
-     * @return always returns -1.
+     * @return the number of <code>Item</code>s in this iterator.
-        // Always returns -1, since the entry-iterator may contains items that
-        // are not accessible due to access constraints. -1 seems preferable
-        // to returning a size that is not correct.
-        return LazyItemIterator.UNDEFINED_SIZE;
+        return size;
