work in progress

- Restore: pass NodeState(s) and Path instead of NodeId(s)
- LockManager: make sure lockmanager only remembers workspace states
- LockManager: make sure operations are executed using workspace states
- LockManager: improve isLocked/getLock/checkIsLocked and respect locks that
have been accessed before.
- VersionManager: make sure operations are executed using workspace states
- VersionManager: add checkIsCheckedOut
- VersionManager: force manager to have a WorkspaceManager
- NodeReferences:
  > make interface package protected
  > clarify method naming
  > add implementation to WorkspaceItemStateFactory
  > add NodeReferences field to NodeState
  > TO_IMPROVE: references are currently always retrieve from the SPI.
- ItemStateManager + NodeReferences
  > rename interfaces methods
  > change method signature to take NodeState instead of NodeId
  > 'getReferences' returns the property states directly

- remove some JR DIFFs. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432234 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeId;
-
-import java.util.Collection;
+import java.util.Iterator;
-public interface NodeReferences {
+interface NodeReferences {
-    // TODO: probably not needed with spi -> remove
-    // DIFF JR: return NodeId instead of NodeReferenceId
-     * Returns the identifier of this node references object.
+     * Returns a flag indicating whether the <code>Node</code> identified by this
+     * <code>NodeReferences</code> object is referenced by any Property.
-     * @return the id of this node references object.
+     * @return <code>true</code> if this object will return a non-empty iterator
+     * upon calls to {@link #iterator()}, <code>false</code> otherwise.
-    public NodeId getId();
+    public boolean isEmpty();
-     * Returns a flag indicating whether this object holds any references
-     *
-     * @return <code>true</code> if this object holds references,
-     *         <code>false</code> otherwise
+     * @return an iterator over the <code>PropertyId</code>s refering to the
+     * node state identified by this <code>NodeReference</code>.
-    public boolean hasReferences();
-
-    /**
-     * @return the collection of states referring to the node identified by this
-     * <code>NodeReference</code>.
-     */
-    public Collection getReferences();
+    public Iterator iterator();
