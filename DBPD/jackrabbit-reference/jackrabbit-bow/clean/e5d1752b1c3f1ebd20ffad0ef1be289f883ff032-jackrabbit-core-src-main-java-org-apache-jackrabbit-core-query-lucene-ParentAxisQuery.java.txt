JCR-2415: Update Lucene to 3.0
- Merge all from JCR-2415-lucene-3.0 at 1064038 (reintegration)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1064058 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import java.util.BitSet;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
+import org.apache.jackrabbit.core.query.lucene.hits.AbstractHitCollector;
-import org.apache.lucene.search.HitCollector;
+import java.io.IOException;
+import java.util.BitSet;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+@SuppressWarnings("serial")
-    protected Weight createWeight(Searcher searcher) {
+    public Weight createWeight(Searcher searcher) {
-    private class ParentAxisWeight implements Weight {
+    private class ParentAxisWeight extends Weight {
-        public Scorer scorer(IndexReader reader) throws IOException {
-            contextScorer = contextQuery.weight(searcher).scorer(reader);
+        public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,
+                boolean topScorer) throws IOException {
+            contextScorer = contextQuery.weight(searcher).scorer(reader, scoreDocsInOrder, topScorer);
-        /**
-         * {@inheritDoc}
-         */
-        public boolean next() throws IOException {
+        @Override
+        public int nextDoc() throws IOException {
+            if (nextDoc == NO_MORE_DOCS) {
+                return nextDoc;
+            }
+
-            return nextDoc > -1;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public int doc() {
+            if (nextDoc < 0) {
+                nextDoc = NO_MORE_DOCS;
+            }
-        /**
-         * {@inheritDoc}
-         */
+        @Override
+        public int docID() {
+            return nextDoc;
+        }
+
+        @Override
-        /**
-         * {@inheritDoc}
-         */
-        public boolean skipTo(int target) throws IOException {
+        @Override
+        public int advance(int target) throws IOException {
+            if (nextDoc == NO_MORE_DOCS) {
+                return nextDoc;
+            }
+
-            return nextDoc > -1;
-        }
-
-        /**
-         * {@inheritDoc}
-         *
-         * @throws UnsupportedOperationException this implementation always
-         *                                       throws an <code>UnsupportedOperationException</code>.
-         */
-        public Explanation explain(int doc) throws IOException {
-            throw new UnsupportedOperationException();
+            if (nextDoc < 0) {
+                nextDoc = NO_MORE_DOCS;
+            }
+            return nextDoc;
-                contextScorer.score(new HitCollector() {
+                if (contextScorer != null) {
+                    contextScorer.score(new AbstractHitCollector() {
+                        private int[] docs = new int[1];
-                    private int[] docs = new int[1];
-
-                    public void collect(int doc, float score) {
-                        try {
-                            docs = hResolver.getParents(doc, docs);
-                            if (docs.length == 1) {
-                                // optimize single value
-                                hits.set(docs[0]);
-                                if (firstScore == null) {
-                                    firstScore = score;
-                                } else if (firstScore != score) {
-                                    scores.put(doc, score);
-                                }
-                            } else {
-                                for (int docNum : docs) {
-                                    hits.set(docNum);
+                        @Override
+                        protected void collect(int doc, float score) {
+                            try {
+                                docs = hResolver.getParents(doc, docs);
+                                if (docs.length == 1) {
+                                    // optimize single value
+                                    hits.set(docs[0]);
+                                } else {
+                                    for (int docNum : docs) {
+                                        hits.set(docNum);
+                                        if (firstScore == null) {
+                                            firstScore = score;
+                                        } else if (firstScore != score) {
+                                            scores.put(doc, score);
+                                        }
+                                    }
+                            } catch (IOException e) {
+                                ex[0] = e;
-                        } catch (IOException e) {
-                            ex[0] = e;
-                    }
-                });
+                    });
+                }
-                    Hits nameHits = new ScorerHits(nameQuery.weight(searcher).scorer(reader));
+                    Hits nameHits = new ScorerHits(nameQuery.weight(searcher).scorer(reader, true, false));
