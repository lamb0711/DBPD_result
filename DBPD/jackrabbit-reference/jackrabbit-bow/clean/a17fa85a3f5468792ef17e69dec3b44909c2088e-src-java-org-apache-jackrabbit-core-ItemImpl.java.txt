fixing JIRA issue JCR-27: ArrayIndexOutofBoundException while setting a reference property
http://nagoya.apache.org/jira/browse/JCR-27

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@111495 13f79535-47bb-0310-9956-ffa450edef68

-         * - check if the property value satisfies the value constraints specified
-         *   in the property's definition
+         * - check if the property value satisfies the value constraints
+         *   specified in the property's definition
-                // if the transient node was added (i.e. if it is 'new'),
-                // check its node's node type against the required node type
-                // in its definition
+                /**
+                 * if the transient node was added (i.e. if it is 'new'),
+                 * check its node's node type against the required node type
+                 * in its definition
+                 */
-                        // the transient node's node type does not satisfy the
-                        // 'required primary types' constraint
+                        /**
+                         * the transient node's node type does not satisfy the
+                         * 'required primary types' constraint
+                         */
-                    // no need to check the protected flag
-                    // as this is checked in NodeImpl.remove(String)
+                    /**
+                     * no need to check the protected flag as this is checked
+                     * in NodeImpl.remove(String)
+                     */
-                // check value constraints
-                // (no need to check value constraints of protected properties
-                // as those are set by the implementation only, i.e. they
-                // cannot be set by the user through the api)
+                /**
+                 * check value constraints
+                 * (no need to check value constraints of protected properties
+                 * as those are set by the implementation only, i.e. they
+                 * cannot be set by the user through the api)
+                 */
-                        // need to manually check REFERENCE value constraints
-                        // as this requires a session (target node needs to
-                        // be checked)
-                        if (def.getRequiredType() == PropertyType.REFERENCE) {
+                        /**
+                         * need to manually check REFERENCE value constraints
+                         * as this requires a session (target node needs to
+                         * be checked)
+                         */
+                        if (constraints.length > 0
+                                && def.getRequiredType() == PropertyType.REFERENCE) {
-                                    // constraints are OR-ed, i.e. at least one
-                                    // has to be satisfied
+                                    /**
+                                     * constraints are OR-ed, i.e. at least one
+                                     * has to be satisfied
+                                     */
-                                        // a REFERENCE value constraint specifies
-                                        // the name of the required node type of
-                                        // the target node
+                                        /**
+                                         * a REFERENCE value constraint specifies
+                                         * the name of the required node type of
+                                         * the target node
+                                         */
-                // no need to check the protected flag
-                // as this is checked in PropertyImpl.setValue(Value)
+                /**
+                 * no need to check the protected flag* as this is checked
+                 * in PropertyImpl.setValue(Value)
+                 */
-                // all changes are persisted, now dispatch events
-                // forward this to the session to let it decide on the right time for those
-                // events to be dispatched in case of transactional support
+                /**
+                 * all changes are persisted, now dispatch events;
+                 * forward this to the session to let it decide on the right
+                 * time for those events to be dispatched in case of
+                 * transactional support
+                 */
