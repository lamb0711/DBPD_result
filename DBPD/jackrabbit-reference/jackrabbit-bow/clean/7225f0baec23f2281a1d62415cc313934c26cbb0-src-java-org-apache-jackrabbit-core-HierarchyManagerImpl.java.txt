- added HierarchyManager.isAncestor(NodeId, ItemId) method
- some small javadoc fixes


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@164473 13f79535-47bb-0310-9956-ffa450edef68

-    public NodeId[] listParents(ItemId id) throws ItemNotFoundException, RepositoryException {
+    public NodeId[] listParents(ItemId id)
+            throws ItemNotFoundException, RepositoryException {
-    public ItemId[] listChildren(NodeId id) throws ItemNotFoundException, RepositoryException {
+    public ItemId[] listChildren(NodeId id)
+            throws ItemNotFoundException, RepositoryException {
-                NodeState.ChildNodeEntry nodeEntry = parentState.getChildNodeEntry(name, index);
+                NodeState.ChildNodeEntry nodeEntry =
+                        parentState.getChildNodeEntry(name, index);
-                    parentState = (NodeState) getItemState(new NodeId(nodeEntry.getUUID()));
+                    parentState =
+                            (NodeState) getItemState(new NodeId(nodeEntry.getUUID()));
-    public synchronized Path getPath(ItemId id) throws ItemNotFoundException, RepositoryException {
+    public synchronized Path getPath(ItemId id)
+            throws ItemNotFoundException, RepositoryException {
-                        String msg = "failed to build path of " + id + ": " + parent.getUUID() + " has no child entry for " + uuid;
+                        String msg = "failed to build path of " + id + ": "
+                                + parent.getUUID() + " has no child entry for "
+                                + uuid;
-                    NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) entries.get(0);
+                    NodeState.ChildNodeEntry entry =
+                            (NodeState.ChildNodeEntry) entries.get(0);
-    public QName getName(ItemId itemId) throws ItemNotFoundException, RepositoryException {
+    public QName getName(ItemId itemId)
+            throws ItemNotFoundException, RepositoryException {
-            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) entries.get(0);
+            NodeState.ChildNodeEntry entry =
+                    (NodeState.ChildNodeEntry) entries.get(0);
-    public synchronized Path[] getAllPaths(ItemId id) throws ItemNotFoundException, RepositoryException {
+    public boolean isAncestor(NodeId nodeId, ItemId itemId)
+            throws ItemNotFoundException, RepositoryException {
+        try {
+            ItemState state = getItemState(itemId, true);
+            String parentUUID = state.getParentUUID();
+            while (parentUUID != null) {
+                if (parentUUID.equals(nodeId.getUUID())) {
+                    return true;
+                }
+                state = getItemState(new NodeId(parentUUID), true);
+                parentUUID = state.getParentUUID();
+            }
+            return false;
+        } catch (NoSuchItemStateException nsise) {
+            String msg = "failed to determine degree of relationship of "
+                    + nodeId + " and " + itemId;
+            log.debug(msg);
+            throw new ItemNotFoundException(msg, nsise);
+        } catch (ItemStateException ise) {
+            String msg = "failed to determine degree of relationship of "
+                    + nodeId + " and " + itemId;
+            log.debug(msg);
+            throw new RepositoryException(msg, ise);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public synchronized Path[] getAllPaths(ItemId id)
+            throws ItemNotFoundException, RepositoryException {
-                PropertyState propState = (PropertyState) getItemState(id, includeZombies);
+                PropertyState propState =
+                        (PropertyState) getItemState(id, includeZombies);
-                NodeState parent = (NodeState) getItemState(new NodeId(parentUUID), includeZombies);
+                NodeState parent =
+                        (NodeState) getItemState(new NodeId(parentUUID), includeZombies);
-                        NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) riter.next();
+                        NodeState.ChildNodeEntry entry =
+                                (NodeState.ChildNodeEntry) riter.next();
-                    NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) entries.get(i);
+                    NodeState.ChildNodeEntry entry =
+                            (NodeState.ChildNodeEntry) entries.get(i);
