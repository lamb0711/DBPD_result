JCR-247: Child axis support for XPath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477599 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
+import org.apache.jackrabbit.name.MalformedPathException;
-     * The name of the property
+     * Acts as an syntetic placeholder for a location step that matches any
+     * name. This is required becase a JCR path does not allow a QName with
+     * a single '*' (star) character.
-    private QName property;
+    public static final QName STAR_NAME_TEST = new QName(QName.NS_REP_URI, "__star__");
+
+    /**
+     * The relative path to the property.
+     */
+    private Path relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, long value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, long value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, double value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, double value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, Date value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, Date value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * @param property  the name of a property.
+     * @param relPath   the relative path to a property.
-    public RelationQueryNode(QueryNode parent, QName property, String value, int operation) {
+    public RelationQueryNode(QueryNode parent, Path relPath, String value, int operation) {
-        this.property = property;
+        this.relPath = relPath;
-     * Returns the name of the property in this relation query node.
+     * Returns the name of the property in this relation query node. Please
+     * note that this method does not return the full relative path that
+     * reference the property to match, but only the name of the final name
+     * element of the path returned by {@link #getRelativePath()}.
+     * @deprecated Use {@link #getRelativePath()} instead.
-        return property;
+        return relPath == null ? null : relPath.getNameElement().getName();
+     * @deprecated Use {@link #setRelativePath(Path)} instead.
-        property = name;
+        Path.PathBuilder builder = new Path.PathBuilder();
+        builder.addLast(name);
+        try {
+            this.relPath = builder.getPath();
+        } catch (MalformedPathException e) {
+            // path is always valid
+        }
+    }
+
+    /**
+     * @return the relative path that references the property in this relation.
+     */
+    public Path getRelativePath() {
+        return relPath;
+    }
+
+    /**
+     * Sets the relative path to the property in this relation.
+     *
+     * @param relPath the relative path to a property.
+     * @throws IllegalArgumentException if <code>relPath</code> is absolute.
+     */
+    public void setRelativePath(Path relPath) {
+        if (relPath != null && relPath.isAbsolute()) {
+            throw new IllegalArgumentException("relPath must be relative");
+        }
+        this.relPath = relPath;
+    }
+
+    /**
+     * Adds a path element to the existing relative path. To add a path element
+     * which matches all node names use {@link #STAR_NAME_TEST}.
+     *
+     * @param element the path element to append.
+     */
+    public void addPathElement(Path.PathElement element) {
+        Path.PathBuilder builder = new Path.PathBuilder();
+        if (relPath != null) {
+            builder.addAll(relPath.getElements());
+        }
+        builder.addLast(element);
+        try {
+            relPath = builder.getPath();
+        } catch (MalformedPathException e) {
+            // path is always valid
+        }
+        // try to normalize the path
+        try {
+            relPath = relPath.getNormalizedPath();
+        } catch (MalformedPathException e) {
+            // just keep the original in that case
+        }
-                    && (property == null ? other.property == null : property.equals(other.property));
+                    && (relPath == null ? other.relPath== null : relPath.equals(other.relPath));
