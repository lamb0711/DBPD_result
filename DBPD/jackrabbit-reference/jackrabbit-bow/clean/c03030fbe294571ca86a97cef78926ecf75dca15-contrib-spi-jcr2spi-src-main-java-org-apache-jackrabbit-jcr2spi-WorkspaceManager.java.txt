work in progress

- avoid usage of JCR event types for SPI events (and vice versa)
- fix checkPermission

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@449676 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.MalformedPathException;
-                    Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED;
+                Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED;
-                    l, allTypes, true, null, null);
+                l, allTypes, true, null, null);
-
-        // TODO: 'createNodeId' is basically wrong since isGranted is unspecific for any item.
-        ItemId id = getIdFactory().createNodeId(parentState.getNodeId(), relPath);
-        return service.isGranted(sessionInfo, id, actions);
+        // TODO: TOBEFIXED. 
+        ItemState wspState = parentState.getOverlayedState();
+        if (wspState == null) {
+            Path.PathBuilder pb = new Path.PathBuilder();
+            pb.addAll(relPath.getElements());
+            while (wspState == null) {
+                pb.addFirst(parentState.getName());
+
+                parentState = parentState.getParent();
+                wspState = parentState.getOverlayedState();
+            }
+            try {
+                relPath = pb.getPath();
+            } catch (MalformedPathException e) {
+                throw new RepositoryException(e);
+            }
+        }
+
+
+        if (wspState == null) {
+            // internal error. should never occur
+            throw new RepositoryException("Internal error: Unable to retrieve overlayed state in hierarchy.");
+        } else {
+            NodeId parentId = ((NodeState)parentState).getNodeId();
+            // TODO: 'createNodeId' is basically wrong since isGranted is unspecific for any item.
+            ItemId id = getIdFactory().createNodeId(parentId, relPath);
+            return service.isGranted(sessionInfo, id, actions);
+        }
-        return service.isGranted(sessionInfo, itemState.getId(), actions);
+        ItemState wspState = itemState.getOverlayedState();
+        // a 'new' state can always be read, written and removed
+        // TODO: correct?
+        if (wspState == null) {
+            return true;
+        }
+        return service.isGranted(sessionInfo, wspState.getId(), actions);
-        return service.isGranted(sessionInfo, itemState.getId(), AccessManager.READ);
+        ItemState wspState = itemState.getOverlayedState();
+        // a 'new' state can always be read
+        if (wspState == null) {
+            return true;
+        }
+        return service.isGranted(sessionInfo, wspState.getId(), AccessManager.READ);
-        return service.isGranted(sessionInfo, itemState.getId(), AccessManager.REMOVE);
+        ItemState wspState = itemState.getOverlayedState();
+        // a 'new' state can always be removed again
+        if (wspState == null) {
+            return true;
+        }
+        return service.isGranted(sessionInfo, wspState.getId(), AccessManager.REMOVE);
-        // TODO check retrieval of nodeId
