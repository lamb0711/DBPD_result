JCR-2746: Sleep in possibly endless loop in ObservationDispatcher

Move the sleep to the end of SessionState.perform() after all the relevant locks have been released

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1000950 13f79535-47bb-0310-9956-ffa450edef68

-        int size = eventQueueSize.addAndGet(events.size());
-        if (size > MAX_QUEUED_EVENTS) {
+        eventQueueSize.addAndGet(events.size());
+    }
+
+    /**
+     * Checks if the observation event queue contains more than the
+     * configured {@link #MAX_QUEUED_EVENTS maximum number of events},
+     * and delays the current thread in such cases. No delay is added
+     * if the current thread is the observation thread, for example if
+     * an observation listener writes to the repository.
+     * <p>
+     * This method should only be called outside the scope of internal
+     * repository access locks.
+     */
+    public void delayIfEventQueueOverloaded() {
+        if (eventQueueSize.get() > MAX_QUEUED_EVENTS) {
-                if (eventQueueSize.get() > MAX_QUEUED_EVENTS) {
-                    // slow down the current session
-                    // but not here, because locks are held
-                    // (that may block an observation listener, which is not what we want)
-                    events.getSession().delayNextOperation(notificationThread, 100);
+                try {
+                    Thread.sleep(100);
+                } catch (InterruptedException e) {
+                    log.warn("Interrupted while rate-limiting writes", e);
