JCR-1138: Add AbstractBundlePersistenceManager.getAllNodeIds

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@577297 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeIdIterator;
-abstract public class AbstractBundlePersistenceManager implements 
+public abstract class AbstractBundlePersistenceManager implements 
-    private PropDefId ID_JCR_UUID;
+    private PropDefId idJcrUUID;
-    private PropDefId ID_JCR_PRIMARYTYPE;
+    private PropDefId idJcrPrimaryType;
-    private PropDefId ID_JCR_MIXINTYPES;
+    private PropDefId idJcrMixinTypes;
-        this.bundleCacheSize = Long.parseLong(bundleCacheSize)*1024*1024;
+        this.bundleCacheSize = Long.parseLong(bundleCacheSize) * 1024 * 1024;
-    abstract public NodeReferences load(NodeReferencesId targetId)
+    public abstract NodeReferences load(NodeReferencesId targetId)
-            ID_JCR_UUID = context.getNodeTypeRegistry().getEffectiveNodeType(QName.MIX_REFERENCEABLE).getApplicablePropertyDef(
+            idJcrUUID = context.getNodeTypeRegistry().getEffectiveNodeType(QName.MIX_REFERENCEABLE).getApplicablePropertyDef(
-            ID_JCR_PRIMARYTYPE = context.getNodeTypeRegistry().getEffectiveNodeType(QName.NT_BASE).getApplicablePropertyDef(
+            idJcrPrimaryType = context.getNodeTypeRegistry().getEffectiveNodeType(QName.NT_BASE).getApplicablePropertyDef(
-            ID_JCR_MIXINTYPES = context.getNodeTypeRegistry().getEffectiveNodeType(QName.NT_BASE).getApplicablePropertyDef(
+            idJcrMixinTypes = context.getNodeTypeRegistry().getEffectiveNodeType(QName.NT_BASE).getApplicablePropertyDef(
-                state.setDefinitionId(ID_JCR_UUID);
+                state.setDefinitionId(idJcrUUID);
-                state.setDefinitionId(ID_JCR_PRIMARYTYPE);
+                state.setDefinitionId(idJcrPrimaryType);
-                state.setDefinitionId(ID_JCR_MIXINTYPES);
+                state.setDefinitionId(idJcrMixinTypes);
-        return bundle !=null && bundle.hasProperty(id.getName());
+        return bundle != null && bundle.hasProperty(id.getName());
+
+    /**
+     * Get all node ids. 
+     * A typical application will call this method multiple times, where 'after'
+     * is the last row read. The maxCount parameter defines the maximum number of 
+     * node ids returned, 0 meaning no limit. The order of the node ids is specific for the 
+     * given persistent manager. Items that are added concurrently may not be included.
+     * 
+     * @param after the lower limit, or null for no limit.
+     * @param maxCount the maximum number of node ids to return, or 0 for no limit.
+     * @return an iterator of all bundles.
+     * @throws ItemStateException if an error while loading occurs.
+     */
+    public abstract NodeIdIterator getAllNodeIds(NodeId after, int maxCount)
+            throws ItemStateException;
+
