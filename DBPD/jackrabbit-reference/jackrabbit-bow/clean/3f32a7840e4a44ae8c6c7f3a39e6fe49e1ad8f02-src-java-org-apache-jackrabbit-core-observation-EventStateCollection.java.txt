Initial checkin of QueryManager with support for JCRQL (search implementation is not complete, some features are missing: searching for distinct same name sibling, sorting not yet implemented, indexing contains potential for optimizing)

Changed observation to support SynchronousEventListeners. The search registers itself as synchronous event listener. Also changed access checking on events sent out, because checking access on removed nodes need to be performed before they actually get removed.

Extended config.xml, which allows now to specify an index location for the QueryManager.

Added jar files needed for search.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47399 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.ItemState;
-import org.apache.jackrabbit.core.state.NodeState;
-import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.*;
+import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
-import javax.jcr.Session;
- * @author mreutegg
+ * @author Marcel Reutegger
-public final class EventStateCollection {
+final public class EventStateCollection {
+     * The <code>ObservationManagerFactory</code> that notifies the EventListeners.
+     */
+    private final ObservationManagerFactory dispatcher;
+
+    /**
-    private final Session session;
+    private final SessionImpl session;
+
+    /**
+     * The ItemStateProvider of the session that creates the events.
+     */
+    private final ItemStateProvider provider;
+
+    /**
+     * The HierarchyManager of the session that creates the events.
+     */
+    private final HierarchyManager hmgr;
-    public EventStateCollection(Session session) {
+    EventStateCollection(ObservationManagerFactory dispatcher,
+			 SessionImpl session,
+			 ItemStateProvider provider,
+			 HierarchyManager hmgr) {
+	this.dispatcher = dispatcher;
+	this.provider = provider;
+	this.hmgr = hmgr;
-     * @throws RepositoryException if an error occurs.
-	if (status == ItemState.STATUS_EXISTING_MODIFIED
-		|| status == ItemState.STATUS_NEW) {
+	if (status == ItemState.STATUS_EXISTING_MODIFIED ||
+		status == ItemState.STATUS_NEW) {
+		NodeState currentNode = (NodeState) state;
+		QName nodeTypeName = currentNode.getNodeTypeName();
+                NodeTypeImpl nodeType = session.getNodeTypeManager().getNodeType(nodeTypeName);
+                Path parentPath = hmgr.getPath(currentNode.getId());
-		NodeState currentNode = (NodeState) state;
-		    events.add(EventState.createPropertyAdded(currentNode.getUUID(),
+		    events.add(EventState.propertyAdded(currentNode.getUUID(),
+			    parentPath,
+			    nodeType,
-		    events.add(EventState.createPropertyRemoved(currentNode.getUUID(),
+		    events.add(EventState.propertyRemoved(currentNode.getUUID(),
+			    parentPath,
+			    nodeType,
-		    events.add(EventState.createChildNodeAdded(currentNode.getUUID(),
+		    events.add(EventState.childNodeAdded(currentNode.getUUID(),
+			    parentPath,
+			    child.getUUID(),
+			    nodeType,
-		    events.add(EventState.createChildNodeRemoved(currentNode.getUUID(),
+		    events.add(EventState.childNodeRemoved(currentNode.getUUID(),
+			    parentPath,
+			    child.getUUID(),
+			    nodeType,
-		    events.add(EventState.createPropertyChanged(state.getParentUUID(),
-			    ((PropertyState) state).getName(),
-			    session));
+		    NodeId parentId = new NodeId(state.getParentUUID());
+		    try {
+			NodeState parentState = (NodeState)provider.getItemState(parentId);
+			Path parentPath = hmgr.getPath(parentId);
+			events.add(EventState.propertyChanged(state.getParentUUID(),
+				parentPath,
+				((PropertyState) state).getName(),
+				session.getNodeTypeManager().getNodeType(parentState.getNodeTypeName()),
+				session));
+		    } catch (ItemStateException e) {
+			// should never happen
+			log.error("internal error: item state exception", e);
+		    }
+		}
+	    }
+	} else if (status == ItemState.STATUS_EXISTING_REMOVED) {
+	    if (state.isNode()) {
+		// zombie nodes
+		NodeState currentNode = (NodeState) state;
+		QName nodeTypeName = currentNode.getNodeTypeName();
+		NodeTypeImpl nodeType = session.getNodeTypeManager().getNodeType(nodeTypeName);
+
+		// FIXME replace by HierarchyManager.getPath(ItemId id, boolean includeZombie)
+		// when available.
+		Path[] parentPaths = hmgr.getAllPaths(currentNode.getId(), true);   // include zombie
+		for (int i = 0; i < parentPaths.length; i++) {
+		    List removedNodes = currentNode.getRemovedChildNodeEntries();
+		    for (Iterator it = removedNodes.iterator(); it.hasNext();) {
+			NodeState.ChildNodeEntry child = (NodeState.ChildNodeEntry) it.next();
+			events.add(EventState.childNodeRemoved(currentNode.getUUID(),
+				parentPaths[i],
+				child.getUUID(),
+				child.getName(),
+				nodeType,
+				session));
+		    }
+     * Prepares the events for dispatching.
+     */
+    public void prepare() throws RepositoryException {
+     	dispatcher.prepareEvents(this);
+    }
+
+    /**
+     * Dispatches the events to the {@link javax.jcr.observation.EventListener}s.
+     */
+    public void dispatch() {
+	dispatcher.dispatchEvents(this);
+    }
+
+    /**
