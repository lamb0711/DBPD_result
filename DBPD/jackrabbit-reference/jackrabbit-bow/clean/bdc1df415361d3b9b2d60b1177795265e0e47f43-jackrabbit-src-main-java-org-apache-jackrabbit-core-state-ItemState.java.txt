JCR-552 Move listeners from item state to item state managers


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@438851 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.util.WeakIdentityCollection;
-import java.util.Collection;
-public abstract class ItemState implements ItemStateListener, Serializable {
+public abstract class ItemState implements Serializable {
-     * Listeners (weak references)
+     * Parent container.
-    private final transient Collection listeners = new WeakIdentityCollection(5);
+    private transient ItemStateListener container;
-        // prepare this instance so it can be gc'ed
-        synchronized (listeners) {
-            listeners.clear();
-        }
-        this.overlayedState.addListener(this);
-        this.overlayedState.addListener(this);
-            // de-register listener on overlayed state...
-            overlayedState.removeListener(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been discarded.
+     * Return a flag indicating whether this state is connected to some other state.
+     * @return <code>true</code> if this state is connected, <code>false</code> otherwise.
+     */
+    protected boolean isConnected() {
+        return overlayedState != null;
+    }
+
+    /**
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDiscarded(this);
-            }
+        if (container != null) {
+            container.stateDiscarded(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been created.
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateCreated(this);
-            }
+        if (container != null) {
+            container.stateCreated(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been updated.
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateModified(this);
-            }
+        if (container != null) {
+            container.stateModified(this);
-     * Notify the listeners that the persistent state this object is
-     * representing has been destroyed.
+     * Notify the parent container about changes to this state.
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDestroyed(this);
-            }
+        if (container != null) {
+            container.stateDestroyed(this);
-     * Add an <code>ItemStateListener</code>
-     *
-     * @param listener the new listener to be informed on modifications
+     * Set the parent container that will receive notifications about changes to this state.
+     * @param container container to be informed on modifications
-    public void addListener(ItemStateListener listener) {
-        synchronized (listeners) {
-            assert (!listeners.contains(listener));
-            listeners.add(listener);
+    public void setContainer(ItemStateListener container) {
+        if (this.container != null) {
+            throw new IllegalStateException("State already connected to a container: " + this.container);
+        this.container = container;
-     * Remove an <code>ItemStateListener</code>
-     *
-     * @param listener an existing listener
+     * Return the parent container that will receive notifications about changes to this state. Returns
+     * <code>null</code> if none has been yet assigned.
+     * @return container or <code>null</code>
-    public void removeListener(ItemStateListener listener) {
-        synchronized (listeners) {
-            listeners.remove(listener);
-        }
+    public ItemStateListener getContainer() {
+        return container;
-    //----------------------------------------------------< ItemStateListener >
-    /**
-     * {@inheritDoc}
-     */
-    public void stateCreated(ItemState created) {
-        // underlying state has been permanently created
-        status = STATUS_EXISTING;
-        pull();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDestroyed(ItemState destroyed) {
-        // underlying state has been permanently destroyed
-        if (isTransient) {
-            status = STATUS_STALE_DESTROYED;
-        } else {
-            status = STATUS_EXISTING_REMOVED;
-            notifyStateDestroyed();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateModified(ItemState modified) {
-        // underlying state has been modified
-        if (isTransient) {
-            status = STATUS_STALE_MODIFIED;
-        } else {
-            synchronized (this) {
-                // this instance represents existing state, update it
-                pull();
-                notifyStateUpdated();
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        // underlying persistent state has been discarded, discard this instance too
-        discard();
-    }
-
