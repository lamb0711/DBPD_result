work in progress

- LazyItemIterator: fixing wrong usage in ItemManagerImpl
- LazyItemIterator: removing TODOs and workaround

- ItemStateFactory: remove unused method 
  'createPropertyState(PropertyId propertyId, ItemStateManager ism)'

- TransientItemStateFactory: slightly modify methods, adding additional
  parameters that are already known upon creation of the states and must
  not be changed later on (-> removing setters on NodeState/PropertyState)

- TransientItemStateManager:
  > rename create-methods to createNew...
  > adjust parameters according to modifications in TransientISF

- NodeState:
  > set QNodeDefinition upon creation
  > modify 'moveChildNodeEntry': additing 'newDefinition' parameter
  > remove 'setParent'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- PropertyState:
  > set QPropertyDefinition upon creation
  > 'multiValued' field is therefore redundant -> remove
  > remove 'setMultiValued'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- SetPropertyValue: 'isMultiValued()' is redundant. removed and replaced
  usage with 'getPropertyState().isMultiValued()'

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432630 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
- * {@link #createNodeState(QName, String, QName, NodeState)} and
- * {@link #createPropertyState(NodeState, QName)}.
+ * {@link #createNewNodeState(QName,String,QName,NodeState)} and
+ * {@link #createNewPropertyState(NodeState, QName)}.
+     * @param definition   The qualified definition for the new node state.
-    public NodeState createNodeState(QName nodeName,
-                                     String uuid,
-                                     QName nodeTypeName,
-                                     NodeState parent) {
-        NodeState nodeState = isf.createNewNodeState(nodeName, uuid, parent);
-        nodeState.setNodeTypeName(nodeTypeName);
+    NodeState createNewNodeState(QName nodeName, String uuid, QName nodeTypeName,
+                                 QNodeDefinition definition, NodeState parent) {
+        NodeState nodeState = isf.createNewNodeState(nodeName, uuid, parent, nodeTypeName, definition);
+
-     * @param parent   the node state where to the new property is added.
+     * @param parent   the node state where to the new property is added.
+     * @param definition
-    public PropertyState createPropertyState(NodeState parent, QName propName)
+    PropertyState createNewPropertyState(QName propName, NodeState parent, QPropertyDefinition definition)
-        PropertyState propState = isf.createNewPropertyState(propName, parent);
+        PropertyState propState = isf.createNewPropertyState(propName, parent, definition);
+
-         * @see TransientItemStateFactory#createNewNodeState(QName, String, NodeState)
+         * @see TransientItemStateFactory#createNewNodeState(QName, String, NodeState, QName, QNodeDefinition)
-        public NodeState createNewNodeState(QName name, String uuid, NodeState parent) {
-            NodeState nodeState = new NodeState(name, uuid, parent, null,
-                    ItemState.STATUS_NEW, true, this, idFactory);
+        public NodeState createNewNodeState(QName name, String uuid,
+                                            NodeState parent, QName nodetypeName,
+                                            QNodeDefinition definition) {
+            NodeState nodeState = new NodeState(name, uuid, parent, nodetypeName,
+                definition, ItemState.STATUS_NEW, true, this, idFactory);
-         * @see TransientItemStateFactory#createNewPropertyState(QName, NodeState)
+         * @see TransientItemStateFactory#createNewPropertyState(QName, NodeState, QPropertyDefinition)
-        public PropertyState createNewPropertyState(QName name, NodeState parent) {
+        public PropertyState createNewPropertyState(QName name, NodeState parent, QPropertyDefinition definition) {
-                    ItemState.STATUS_NEW, true, idFactory);
+                definition, ItemState.STATUS_NEW, true, idFactory);
-         * @see TransientItemStateFactory#createNodeState(NodeId, ItemStateManager)
+         * @see ItemStateFactory#createNodeState(NodeId, ItemStateManager)
-         * @see TransientItemStateFactory#createNodeState(NodeId, NodeState)
+         * @see ItemStateFactory#createNodeState(NodeId, NodeState)
-         * @see TransientItemStateFactory#createPropertyState(PropertyId, ItemStateManager)
-         */
-        public PropertyState createPropertyState(PropertyId propertyId,
-                                                 ItemStateManager ism)
-                throws NoSuchItemStateException, ItemStateException {
-            // retrieve state to overlay
-            PropertyState overlayedState = (PropertyState) parent.getItemState(propertyId);
-            NodeId parentId = overlayedState.getParent().getNodeId();
-            NodeState parentState = (NodeState) ism.getItemState(parentId);
-            PropertyState propState = new PropertyState(overlayedState, parentState,
-                    ItemState.STATUS_EXISTING, true, idFactory);
-            propState.addListener(listener);
-            return propState;
-        }
-
-        /**
-         * @inheritDoc
-         * @see TransientItemStateFactory#createPropertyState(PropertyId, NodeState)
+         * @see ItemStateFactory#createPropertyState(PropertyId, NodeState)
