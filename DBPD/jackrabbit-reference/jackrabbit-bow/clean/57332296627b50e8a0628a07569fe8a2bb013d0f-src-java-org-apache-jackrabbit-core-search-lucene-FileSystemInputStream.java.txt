- FileSystemInputStream implementation is not stable when used on top of a BufferedInputStream

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56670 13f79535-47bb-0310-9956-ffa450edef68

+    /** The underlying resource. */
+    /** The underlying input stream of the <code>FileSystemResource</code>. */
+    /** Current position in the stream. */
+    /**
+     * Creates a new <code>FileSystemInputStream</code> based on the
+     * {@link org.apache.jackrabbit.core.fs.FileSystemResource} <code>res</code>.
+     * @param res the resource this stream is based on.
+     * @throws IOException if an error occurs creating the stream on the
+     *   resource.
+     */
+    /**
+     * Reads <code>length</code> bytes into the array <code>b</code> starting
+     * at <code>offset</code>.
+     * @param b the byte array to write the date into.
+     * @param offset the offset where to start writing the data.
+     * @param length number of bytes to read in / write to <code>b</code>
+     * @throws IOException if an error occurs reading from the stream or
+     *   if the stream is unable to read <code>length</code> bytes.
+     */
-        position += in.read(b, offset, length);
+        int total = 0;
+        int read;
+        while ((read = in.read(b, offset, length)) > 0) {
+            total += read;
+            offset += read;
+            length -= read;
+            position += read;
+        }
+        if (length > 0) {
+            throw new IOException("readInternal: Unable to read " + (total + length)
+                    + " bytes. Only read " + total);
+        }
+    /**
+     * Closes this <code>FileSystemInputStream</code> and also the underlying
+     * <code>InputStream</code>.
+     * @throws IOException if an error occurs while closing the underlying
+     *  <code>InputStream</code>.
+     */
+    /**
+     * Sets the current position to <code>pos</code>. The next read operation
+     * will occur at the position <code>pos</code>.
+     * @param pos the position where to seek to.
+     * @throws IOException if an error occurs while seeking, or if pos &gt;
+     *   {@link #getFilePointer()}.
+     */
+        long skip;
-            in.skip(pos - position);
-            position = pos;
+            skip = pos - position;
-            in.skip(pos);
-            position = pos;
+            skip = pos;
+        while (skip > 0) {
+            long skipped = in.skip(skip);
+            if (skipped == 0) {
+                throw new IOException("seekInternal: Unable to skip " + skip + " bytes.");
+            }
+            skip -= skipped;
+        }
+        position = pos;
+    /**
+     * Clones this <code>FileSystemInputStream</code>.
+     * @return a clone of this <code>FileSystemInputStream</code>.
+     */
-        clone.position = 0;
+    /**
+     * Opens a new <code>InputStream</code> on the underlying resource if
+     * necessary.
+     * @throws IOException if an error occurs creating a new
+     *   <code>InputStream</code>.
+     */
+                long skip = position;
+                while (skip > 0) {
+                    long skipped = in.skip(skip);
+                    if (skipped == 0) {
+                        throw new IOException("checkOpen: Unable to skip " + position + " bytes.");
+                    }
+                    skip -= skipped;
+                }
