- adapting tck to latest api 0.16.4.1

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@165159 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.BinaryValue;
-import javax.jcr.BooleanValue;
-import javax.jcr.DateValue;
-import javax.jcr.DoubleValue;
-import javax.jcr.LongValue;
-import javax.jcr.NameValue;
-import javax.jcr.PathValue;
+import org.apache.jackrabbit.core.util.ISO8601;
+
-import javax.jcr.StringValue;
-import javax.jcr.util.ISO8601;
-    public static Value getValueOfType(int type) throws ValueFormatException {
+    public static Value getValueOfType(Session session, int type)
+            throws ValueFormatException, UnsupportedOperationException, RepositoryException {
-                return new BinaryValue("abc");
+                return session.getValueFactory().createValue("abc", PropertyType.BINARY);
-                return new BooleanValue(true);
+                return session.getValueFactory().createValue(true);
-                return new DateValue(Calendar.getInstance());
+                return session.getValueFactory().createValue(Calendar.getInstance());
-                return new DoubleValue(1.0);
+                return session.getValueFactory().createValue(1.0);
-                return new LongValue(1);
+                return session.getValueFactory().createValue(1);
-                return NameValue.valueOf("abc");
+                return session.getValueFactory().createValue("abc", PropertyType.NAME);
-                return PathValue.valueOf("/abc");
+                return session.getValueFactory().createValue("/abc", PropertyType.PATH);
-                return new StringValue("abc");
+                return session.getValueFactory().createValue("abc");
-    public static Value getValueAccordingToValueConstraints(PropertyDefinition propDef,
+    public static Value getValueAccordingToValueConstraints(Session session,
+                                                            PropertyDefinition propDef,
-                            return new BinaryValue(content.toString());
+                            return session.getValueFactory().createValue(content.toString(), PropertyType.BINARY);
-                            return new BinaryValue("0");
+                            return session.getValueFactory().createValue("0", PropertyType.BINARY);
-                            return new BinaryValue(content.toString());
+                            return session.getValueFactory().createValue(content.toString(), PropertyType.BINARY);
-                        return new BooleanValue(value);
+                        return session.getValueFactory().createValue(value);
-                        return new BooleanValue(!value);
+                        return session.getValueFactory().createValue(!value);
-                            return new DateValue(absMin);
+                            return session.getValueFactory().createValue(absMin);
-                            return new DateValue(absMax);
+                            return session.getValueFactory().createValue(absMax);
-                            return new DateValue(Calendar.getInstance());
+                            return session.getValueFactory().createValue(Calendar.getInstance());
-                            return new DateValue(absMin);
+                            return session.getValueFactory().createValue(absMin);
-                            return new DateValue(absMax);
+                            return session.getValueFactory().createValue(absMax);
-                            return new DoubleValue(absMax - 1);
+                            return session.getValueFactory().createValue(absMax - 1.0);
-                            return new DoubleValue(absMin + 1);
+                            return session.getValueFactory().createValue(absMin + 1.0);
-                            return new DoubleValue(d);
+                            return session.getValueFactory().createValue(d);
-                            return new DoubleValue(absMin - 1);
+                            return session.getValueFactory().createValue(absMin - 1.0);
-                            return new DoubleValue(absMax + 1);
+                            return session.getValueFactory().createValue(absMax + 1.0);
-                            return new LongValue(absMax - 1);
+                            return session.getValueFactory().createValue(absMax - 1);
-                            return new LongValue(absMin + 1);
+                            return session.getValueFactory().createValue(absMin + 1);
-                            return new LongValue(x);
+                            return session.getValueFactory().createValue(x);
-                            return new LongValue(absMin - 1);
+                            return session.getValueFactory().createValue(absMin - 1);
-                            return new LongValue(absMax + 1);
+                            return session.getValueFactory().createValue(absMax + 1);
-                        return NameValue.valueOf(name.toString());
+                        return session.getValueFactory().createValue(name.toString(), PropertyType.NAME);
-                        return PathValue.valueOf(pathStr);
+                        return session.getValueFactory().createValue(pathStr, PropertyType.PATH);
-                        return new StringValue(value.toString());
+                        return session.getValueFactory().createValue(value.toString());
