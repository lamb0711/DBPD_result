JCR-2087: parametrize generic types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816719 13f79535-47bb-0310-9956-ffa450edef68

-        propertiesInAttic = new HashMap();
+        propertiesInAttic = new HashMap<Name, PropertyEntry>();
-            for (Iterator it = getAllChildEntries(true); it.hasNext();) {
-                HierarchyEntry ce = (HierarchyEntry) it.next();
+            for (Iterator<HierarchyEntry> it = getAllChildEntries(true); it.hasNext();) {
+                HierarchyEntry ce = it.next();
-        for (Iterator it = getAllChildEntries(false); it.hasNext();) {
-            HierarchyEntry ce = (HierarchyEntry) it.next();
+        for (Iterator<HierarchyEntry> it = getAllChildEntries(false); it.hasNext();) {
+            HierarchyEntry ce = it.next();
-        for (Iterator it = getAllChildEntries(true); it.hasNext();) {
+        for (Iterator<HierarchyEntry> it = getAllChildEntries(true); it.hasNext();) {
-        for (Iterator it = getAllChildEntries(true); it.hasNext();) {
+        for (Iterator<HierarchyEntry> it = getAllChildEntries(true); it.hasNext();) {
-                List siblings = entry.childNodeEntries.get(name);
+                List<NodeEntry> siblings = entry.childNodeEntries.get(name);
-                List siblings = entry.childNodeEntries.get(name);
+                List<NodeEntry> siblings = entry.childNodeEntries.get(name);
-        List namedEntries = childNodeEntries.get(nodeName);
+        List<NodeEntry> namedEntries = childNodeEntries.get(nodeName);
-        List entries = childNodeEntries.get(nodeName);
+        List<NodeEntry> entries = childNodeEntries.get(nodeName);
-                NodeEntry ne = (NodeEntry) entries.get(i);
+                NodeEntry ne = entries.get(i);
-    public synchronized Iterator getNodeEntries() throws RepositoryException {
-        Collection entries = new ArrayList();
+    public synchronized Iterator<NodeEntry> getNodeEntries() throws RepositoryException {
+        Collection<NodeEntry> entries = new ArrayList<NodeEntry>();
-    public synchronized List getNodeEntries(Name nodeName) throws RepositoryException {
-        List namedEntries = getCompleteChildNodeEntries().get(nodeName);
+    public synchronized List<NodeEntry> getNodeEntries(Name nodeName) throws RepositoryException {
+        List<NodeEntry> namedEntries = getCompleteChildNodeEntries().get(nodeName);
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
-            List entries = new ArrayList();
+            List<NodeEntry> entries = new ArrayList<NodeEntry>();
-            Object[] arr = namedEntries.toArray();
+            NodeEntry[] arr = namedEntries.toArray(new NodeEntry[namedEntries.size()]);
-                NodeEntry cne = (NodeEntry) arr[i];
+                NodeEntry cne = arr[i];
-    public void setNodeEntries(Iterator childInfos) throws RepositoryException {
+    public void setNodeEntries(Iterator<ChildInfo> childInfos) throws RepositoryException {
-            List remaining = new ArrayList();
+            List<ChildInfo> remaining = new ArrayList<ChildInfo>();
-                ChildInfo ci = (ChildInfo) childInfos.next();
+                ChildInfo ci = childInfos.next();
-    public synchronized Iterator getPropertyEntries() {
-        Collection props;
+    public synchronized Iterator<PropertyEntry> getPropertyEntries() {
+        Collection<PropertyEntry> props;
-            props = new ArrayList();
+            props = new ArrayList<PropertyEntry>();
-    public void setPropertyEntries(Collection propNames) throws ItemExistsException, RepositoryException {
-        Set diff = new HashSet();
+    public void setPropertyEntries(Collection<Name> propNames) throws ItemExistsException, RepositoryException {
+        Set<Name> diff = new HashSet<Name>();
-        for (Iterator it = propNames.iterator(); it.hasNext();) {
-            Name propName = (Name) it.next();
+        for (Iterator<Name> it = propNames.iterator(); it.hasNext();) {
+            Name propName = it.next();
-                // anyway and not need exists to explicitely load the corresponding
+                // anyway and not need exists to explicitly load the corresponding
-            for (Iterator it = diff.iterator(); it.hasNext();) {
-                Name propName = (Name) it.next();
+            for (Iterator<Name> it = diff.iterator(); it.hasNext();) {
+                Name propName = it.next();
-            PropertyEntry atticEntry = (PropertyEntry) propertiesInAttic.get(propName);
+            PropertyEntry atticEntry = propertiesInAttic.get(propName);
-            for (Iterator it = getAllChildEntries(true); it.hasNext();) {
-                HierarchyEntry ce = (HierarchyEntry) it.next();
+            for (Iterator<HierarchyEntry> it = getAllChildEntries(true); it.hasNext();) {
+                HierarchyEntry ce = it.next();
-        PropertyEntry child = (PropertyEntry) propertiesInAttic.get(childName);
+        PropertyEntry child = propertiesInAttic.get(childName);
-            Collection attic = propertiesInAttic.values();
-            chain.addIterator(new ArrayList(attic).iterator());
+            Collection<PropertyEntry> attic = propertiesInAttic.values();
+            chain.addIterator(new ArrayList<PropertyEntry>(attic).iterator());
-            Collection props = properties.getPropertyEntries();
+            Collection<PropertyEntry> props = properties.getPropertyEntries();
-        List sns = new ArrayList(childNodeEntries.get(cne.getName()));
+        List<NodeEntry> sns = new ArrayList<NodeEntry>(childNodeEntries.get(cne.getName()));
-            List atticSiblings = childNodeAttic.get(cne.getName());
-            for (Iterator it = atticSiblings.iterator(); it.hasNext();) {
-                NodeEntryImpl sibl = (NodeEntryImpl) it.next();
+            List<NodeEntryImpl> atticSiblings = childNodeAttic.get(cne.getName());
+            for (Iterator<NodeEntryImpl> it = atticSiblings.iterator(); it.hasNext();) {
+                NodeEntryImpl sibl = it.next();
-            for (Iterator it = sns.iterator(); it.hasNext(); ) {
-                NodeEntry entry = (NodeEntry) it.next();
+            for (Iterator<NodeEntry> it = sns.iterator(); it.hasNext(); ) {
+                NodeEntry entry = it.next();
-    private boolean containsAtticChild(List siblings, Name childName, int childIndex) {
+    private boolean containsAtticChild(List<NodeEntry> siblings, Name childName, int childIndex) {
-            List siblingsInAttic = childNodeAttic.get(childName);
+            List<NodeEntryImpl> siblingsInAttic = childNodeAttic.get(childName);
-            for (Iterator it = siblings.iterator(); it.hasNext();) {
-                NodeEntryImpl child = (NodeEntryImpl) it.next();
-                if (!EntryValidation.isValidNodeEntry(child) || (child.revertInfo != null && child.revertInfo.oldIndex == childIndex)) {
+            for (Iterator<NodeEntry> it = siblings.iterator(); it.hasNext();) {
+                NodeEntry child = it.next();
+                if (!EntryValidation.isValidNodeEntry(child) || ((NodeEntryImpl)child).revertInfo != null && ((NodeEntryImpl)child).revertInfo.oldIndex == childIndex) {
-        for (Iterator it = operation.getAddedStates().iterator(); it.hasNext();) {
-            HierarchyEntry he = ((ItemState) it.next()).getHierarchyEntry();
+        for (Iterator<ItemState> it = operation.getAddedStates().iterator(); it.hasNext();) {
+            HierarchyEntry he = it.next().getHierarchyEntry();
-                        properties.add((PropertyEntry) propertiesInAttic.remove(propName));
+                        properties.add(propertiesInAttic.remove(propName));
