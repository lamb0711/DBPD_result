security: work in progress

- change ACEditor to take jcr path
- extract common, abstract policy entry impl
- add more tests
- add JackrabbitAccessControlManager for policy editing
- various minor changes, fixes, improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@644215 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.observation.ObservationManager;
-    private SessionImpl systemSession;
-    private ObservationManager obsMgr;
-
-     /**
+    /**
-        if (initialized) {
-            throw new IllegalStateException("already initialized");
-        }
-        if (systemSession instanceof SessionImpl) {
-            this.systemSession = (SessionImpl) systemSession;
-            obsMgr = systemSession.getWorkspace().getObservationManager();
+        super.init(systemSession, options);
-            userAdminGroup = (options.containsKey(USER_ADMIN_GROUP_NAME)) ? options.get(USER_ADMIN_GROUP_NAME).toString() : USER_ADMIN_GROUP_NAME;
-            groupAdminGroup = (options.containsKey(GROUP_ADMIN_GROUP_NAME)) ? options.get(GROUP_ADMIN_GROUP_NAME).toString() : GROUP_ADMIN_GROUP_NAME;
+         if (systemSession instanceof SessionImpl) {
+             SessionImpl sImpl = (SessionImpl) systemSession;
+             userAdminGroup = (options.containsKey(USER_ADMIN_GROUP_NAME)) ? options.get(USER_ADMIN_GROUP_NAME).toString() : USER_ADMIN_GROUP_NAME;
+             groupAdminGroup = (options.containsKey(GROUP_ADMIN_GROUP_NAME)) ? options.get(GROUP_ADMIN_GROUP_NAME).toString() : GROUP_ADMIN_GROUP_NAME;
-            // make sure the groups exist (and ev. create them).
-            // TODO: review again.
-            UserManager uMgr = this.systemSession.getUserManager();
-            if (!initGroup(uMgr, userAdminGroup)) {
-                log.warn("Unable to initialize User admininistrator group -> no user admins.");
-                userAdminGroup = null;
-            }
-            if (!initGroup(uMgr, groupAdminGroup)) {
-                log.warn("Unable to initialize Group admininistrator group -> no group admins.");
-                groupAdminGroup = null;
-            }
+             // make sure the groups exist (and ev. create them).
+             // TODO: review again.
+             UserManager uMgr = sImpl.getUserManager();
+             if (!initGroup(uMgr, userAdminGroup)) {
+                 log.warn("Unable to initialize User admininistrator group -> no user admins.");
+                 userAdminGroup = null;
+             }
+             if (!initGroup(uMgr, groupAdminGroup)) {
+                 log.warn("Unable to initialize Group admininistrator group -> no group admins.");
+                 groupAdminGroup = null;
+             }
-            usersPath = this.systemSession.getQPath(USERS_PATH);
-            groupsPath = this.systemSession.getQPath(GROUPS_PATH);
+             usersPath = sImpl.getQPath(USERS_PATH);
+             groupsPath = sImpl.getQPath(GROUPS_PATH);
-        } else {
-            throw new RepositoryException("SessionImpl (system session) expected.");
-        }
-        initialized = true;
-    }
+         } else {
+             throw new RepositoryException("SessionImpl (system session) expected.");
+         }
+     }
-            UserManager uMgr = systemSession.getUserManager();
+            UserManager uMgr = session.getUserManager();
-                userNode = (NodeImpl) systemSession.getNode(path);
+                userNode = (NodeImpl) session.getNode(path);
-        String propPath = systemSession.getJCRPath(memberPath);
-        if (systemSession.propertyExists(propPath)) {
+        String propPath = session.getJCRPath(memberPath);
+        if (session.propertyExists(propPath)) {
-            Property membersProp = systemSession.getProperty(propPath);
+            Property membersProp = session.getProperty(propPath);
-            return values.contains(systemSession.getValueFactory().createValue(userNode));
+            return values.contains(session.getValueFactory().createValue(userNode));
-        String absPath = systemSession.getJCRPath(path.getNormalizedPath());
-        if (systemSession.nodeExists(absPath)) {
-            return systemSession.getNode(absPath);
-        } else if (systemSession.propertyExists(absPath)) {
-            return systemSession.getProperty(absPath).getParent();
+        String absPath = resolver.getJCRPath(path.getNormalizedPath());
+        if (session.nodeExists(absPath)) {
+            return session.getNode(absPath);
+        } else if (session.propertyExists(absPath)) {
+            return session.getProperty(absPath).getParent();
-            if (systemSession.nodeExists(pPath)) {
-                return systemSession.getNode(pPath);
+            if (session.nodeExists(pPath)) {
+                return session.getNode(pPath);
-        String absPath = systemSession.getJCRPath(path.getNormalizedPath());
+        String absPath = resolver.getJCRPath(path.getNormalizedPath());
-        return systemSession.nodeExists(absPath);
+        return session.nodeExists(absPath);
-            obsMgr.addEventListener(this, events, GROUPS_PATH, true, null, null, false);
+            observationMgr.addEventListener(this, events, GROUPS_PATH, true, null, null, false);
-                    int relDepth = systemSession.getHierarchyManager().getRelativeDepth(userNode.getNodeId(), authN.getNodeId());
+                    int relDepth = session.getHierarchyManager().getRelativeDepth(userNode.getNodeId(), authN.getNodeId());
-                obsMgr.removeEventListener(this);
+                observationMgr.removeEventListener(this);
