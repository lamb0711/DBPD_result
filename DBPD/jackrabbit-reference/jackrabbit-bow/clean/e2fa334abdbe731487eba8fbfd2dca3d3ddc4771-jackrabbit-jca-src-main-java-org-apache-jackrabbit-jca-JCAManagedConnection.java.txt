JCR-861 Connector should support LocalTransaction as well as XATransaction

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1436323 13f79535-47bb-0310-9956-ffa450edef68

+import javax.transaction.xa.XAException;
+import javax.transaction.xa.Xid;
+
+import java.util.concurrent.atomic.AtomicInteger;
+     * The LocalTransactionAdapter wraps the internal XAResource and uses the XA Method's to
+     * fulfill the LocalTransaction calls.
+     */
+    private static class LocalTransactionAdapter implements javax.resource.spi.LocalTransaction {
+
+        /**
+         * Internal {@link Xid} implementation.
+         */
+        class XidImpl implements Xid {
+        
+            private final byte[] globalTxId;
+        
+            public XidImpl(byte[] globalTxId) {
+                this.globalTxId = globalTxId;
+            }
+        
+            /**
+             * {@inheritDoc}
+             */
+            public int getFormatId() {
+                return 0;
+            }
+        
+            /**
+             * {@inheritDoc}
+             */
+            public byte[] getBranchQualifier() {
+                return new byte[0];
+            }
+        
+            /**
+             * {@inheritDoc}
+             */
+            public byte[] getGlobalTransactionId() {
+                return globalTxId;
+            }
+        }
+
+        /**
+         * Global static counter for the internal Xid's
+         */
+        private static AtomicInteger globalCounter = new AtomicInteger();
+
+        private XAResource resource;
+        private Xid xid;
+
+        public LocalTransactionAdapter(XAResource xaResource) {
+            this.resource = xaResource;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public void begin() throws ResourceException {
+            try {
+                this.xid = new XidImpl(intToByteArray(globalCounter.getAndIncrement()));
+                resource.start(xid, XAResource.TMNOFLAGS);
+            } catch (XAException e) {
+                throw new ResourceException(e.getMessage());
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public void commit() throws ResourceException {
+            try {
+                resource.end(xid, XAResource.TMSUCCESS);
+                resource.commit(xid, true);
+            } catch (XAException e) {
+                throw new ResourceException(e.getMessage());
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public void rollback() throws ResourceException {
+            try {
+                resource.end(xid, XAResource.TMFAIL);
+                resource.rollback(xid);
+            } catch (XAException e) {
+                throw new ResourceException(e.getMessage());
+            }
+        }
+        
+        /**
+         * Converts the given int (global transaction id) to a byte[]
+         * 
+         * @param value
+         * @return byte[]
+         */
+        private static byte[] intToByteArray(int value) {
+            byte[] b = new byte[4];
+            for (int i = 0; i < 4; i++) {
+                int offset = (b.length - 1 - i) * 8;
+                b[i] = (byte) ((value >>> offset) & 0xFF);
+            }
+            return b;
+        }
+    }
+
+    /**
+    private LocalTransactionAdapter localTransactionAdapter;
+
-            this.xaResource =  new TransactionBoundXAResource(this, (XAResource) session);
+            this.xaResource = new TransactionBoundXAResource(this, (XAResource) session);
+        this.localTransactionAdapter = new LocalTransactionAdapter(xaResource);
-        throw new UnsupportedOperationException("Local transaction is not supported");
+        return localTransactionAdapter;
