- JCR-73: some javadoc improvements
- slightly changed semantics of identifier computation in PropDefImpl & NodeDefImpl


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@164485 13f79535-47bb-0310-9956-ffa450edef68

- * This class implements the <code>PropDef</code> interface and holds the
- * property definition specific attributes.
+ * This class implements the <code>PropDef</code> interface and additionally
+ * provides setter methods for the various property definition attributes.
-     * The value constrsints.
+     * The value constraints.
-     * The id of this property definition.
+     * The identifier of this property definition. The identifier is lazily 
+     * computed based on the characteristics of this property definition and
+     * reset on every attribute change.
-    private PropDefId id;
+    private PropDefId id = null;
+
+    /**
+     * Default constructor.
+     */
+    public PropDefImpl() {
+    }
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+    //------------------------------------------------< ItemDefImpl overrides >
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
-        if (id != null) {
-            throw new IllegalStateException("Unable to set attribute. Property definition already compiled.");
-        }
+        // reset id field in order to force lazy recomputation of identifier
+        id = null;
+    //--------------------------------------------------------------< PropDef >
+     * <p/>
+     * The identifier is computed based on the characteristics of this property
+     * definition, i.e. modifying attributes of this property definition will
+     * have impact on the identifier returned by this method.
+            // generate new identifier based on this property definition
+     *
+     * @return always <code>false</code>
+    //-------------------------------------------< java.lang.Object overrides >
-     * Checks if this property definition is equal to the given one. Two
-     * property definitions are equal if they are the same object or if all
-     * their attributes are equal.
+     * Compares two property definitions for equality. Returns <code>true</code>
+     * if the given object is a property defintion and has the same attributes
+     * as this property definition.
-     * @param obj the object to compare to
-     * @return <code>true</code> if this property definition is equals to obj;
-     *         <code>false</code> otherwise.
+     * @param obj the object to compare this property definition with
+     * @return <code>true</code> if the object is equal to this property definition,
+     *         <code>false</code> otherwise
+     * @see Object#equals(Object)
-
