JCR-2185: Encapsulate RepositoryHelper field

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@791180 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+import java.util.HashMap;
-     * The repository instance.
+     * Map of repository instances. Key = repository home, value = repository
+     * instance.
-    private Repository repository;
+    private static final Map<String, Repository> REPOSITORY_INSTANCES = new HashMap<String, Repository>();
+
+    static {
+        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
+            public void run() {
+                synchronized (REPOSITORY_INSTANCES) {
+                    for (Repository repo : REPOSITORY_INSTANCES.values()) {
+                        if (repo instanceof RepositoryImpl) {
+                            ((RepositoryImpl) repo).shutdown();
+                        }
+                    }
+                }
+            }
+        }));
+    }
-        if (repository == null) {
-            try {
-                String dir = settings.getProperty(PROP_REPOSITORY_HOME);
-                if (dir == null) {
-                    dir = new File("target", "repository").getPath();
-                }
-
-                String xml = settings.getProperty(PROP_REPOSITORY_CONFIG);
-                if (xml == null) {
-                    xml = new File(dir, "repository.xml").getPath();
-                }
-
-                repository = createRepository(dir, xml);
-                Session session = repository.login(superuser);
-                try {
-                    prepareTestContent(session);
-                } finally {
-                    session.logout();
-                }
-            } catch (Exception e) {
-                RepositoryStubException exception =
-                    new RepositoryStubException("Failed to start repository");
-                exception.initCause(e);
-                throw exception;
+        try {
+            String dir = settings.getProperty(PROP_REPOSITORY_HOME);
+            if (dir == null) {
+                dir = new File("target", "repository").getAbsolutePath();
+            } else {
+                dir = new File(dir).getAbsolutePath();
+
+            String xml = settings.getProperty(PROP_REPOSITORY_CONFIG);
+            if (xml == null) {
+                xml = new File(dir, "repository.xml").getPath();
+            }
+
+            return getOrCreateRepository(dir, xml);
+
+        } catch (Exception e) {
+            RepositoryStubException exception =
+                    new RepositoryStubException("Failed to start repository");
+            exception.initCause(e);
+            throw exception;
-        return repository;
+    protected Repository getOrCreateRepository(String dir, String xml)
+            throws Exception {
+        synchronized (REPOSITORY_INSTANCES) {
+            Repository repo = REPOSITORY_INSTANCES.get(dir);
+            if (repo == null) {
+                repo = createRepository(dir, xml);
+                Session session = repo.login(superuser);
+                try {
+                    prepareTestContent(session);
+                } finally {
+                    session.logout();
+                }
+
+                REPOSITORY_INSTANCES.put(dir, repo);
+            }
+            return repo;
+        }
+    }
+
