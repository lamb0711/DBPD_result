JCR-2762: Optimize bundle serialization

Avoid the extra byte in front of all node identifiers by using variable-length counts before the child node list and the shared set.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022908 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.jackrabbit.core.persistence.util.BundleBinding.NULL_NODE_ID;
+
+import java.util.Collections;
-        NodeId childId = readNodeId();
-        while (childId != null) {
-            bundle.addChildNodeEntry(readQName(), childId);
-            childId = readNodeId();
-        }
+        readChildNodeEntries(bundle);
-        Set<NodeId> sharedSet = new HashSet<NodeId>();
-        if (version >= BundleBinding.VERSION_2) {
-            // shared set (list of parent uuids)
-            NodeId parentId = readNodeId();
-            while (parentId != null) {
-                sharedSet.add(parentId);
-                parentId = readNodeId();
-            }
-        }
-        bundle.setSharedSet(sharedSet);
+        readSharedSet(bundle);
+    private void readSharedSet(NodePropBundle bundle) throws IOException {
+        Set<NodeId> sharedSet;
+        if (version >= BundleBinding.VERSION_3) {
+            int n = readVarInt();
+            if (n == 0) {
+                sharedSet = Collections.emptySet();
+            } else if (n == 1) {
+                sharedSet = Collections.singleton(readNodeId());
+            } else {
+                sharedSet = new HashSet<NodeId>();
+                for (int i = 0; i < n; i++) {
+                    sharedSet.add(readNodeId());
+                }
+            }
+        } else if (version == BundleBinding.VERSION_2) {
+            // shared set (list of parent uuids)
+            NodeId parentId = readNodeId();
+            if (parentId != null) {
+                sharedSet = new HashSet<NodeId>();
+                do {
+                    sharedSet.add(parentId);
+                    parentId = readNodeId();
+                } while (parentId != null);
+            } else {
+                sharedSet = Collections.emptySet();
+            }
+        } else {
+            sharedSet = Collections.emptySet();
+        }
+        bundle.setSharedSet(sharedSet);
+    }
+
+    private void readChildNodeEntries(NodePropBundle bundle) throws IOException {
+        if (version >= BundleBinding.VERSION_3) {
+            int n = readVarInt();
+            for (int i = 0; i < n; i++) {
+                NodeId id = readNodeId();
+                Name name = readQName();
+                bundle.addChildNodeEntry(name, id);
+            }
+        } else {
+            NodeId childId = readNodeId();
+            while (childId != null) {
+                bundle.addChildNodeEntry(readQName(), childId);
+                childId = readNodeId();
+            }
+        }
+    }
+
-        if (in.readBoolean()) {
+        if (version >= BundleBinding.VERSION_3 || in.readBoolean()) {
-            return new NodeId(msb, lsb);
+            if (msb != NULL_NODE_ID.getMostSignificantBits()
+                    || lsb != NULL_NODE_ID.getLeastSignificantBits()) {
+                return new NodeId(msb, lsb);
+            } else {
+                return null;
+            }
