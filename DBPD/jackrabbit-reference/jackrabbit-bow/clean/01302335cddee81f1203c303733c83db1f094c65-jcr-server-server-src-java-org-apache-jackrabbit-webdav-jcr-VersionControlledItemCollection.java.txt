JCR-417 (preparation):
- add AbstractLocatorFactory
- add separate loc-factory to simple project => reducing dependency
  to 'jcr' package.

JCR-544
- add separate workspace resource representing the jcr workspace
- move Workspace.restore call to workspace resource.
- consequently RootItemCollection not used any more

minor improvements
- root, workspace resource must not support 'observation' -> moving
  constant to item-resources
- get rid of 'setModificationTime'



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@448257 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.property.DavPropertyNameSet;
-import javax.jcr.Workspace;
-import javax.jcr.observation.Event;
-import javax.jcr.observation.EventIterator;
-    //--------------------------------< VersionControlledResource interface >---
+    //--------------------------------------< VersionableResource interface >---
+    //--------------------------------< VersionControlledResource interface >---
-     * <li>{@link Workspace#restore(javax.jcr.version.Version[], boolean)}</li>
-                VersionHistory vh = node.getVersionHistory();
-                Version[] versions = new Version[hrefs.length];
-                for (int  i = 0; i < hrefs.length; i++) {
-                    String itemPath = getLocatorFromHref(hrefs[i]).getRepositoryPath();
-                    versions[i] = vh.getVersion(getItemName(itemPath));
+                if (hrefs.length != 1) {
+                    throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Invalid update request body missing version href or containing multiple version hrefs.");
-                if (versions.length == 1) {
-                    String relPath = DomUtil.getChildText(udElem, XML_RELPATH, NAMESPACE);
-                    if (relPath == null) {
-                        node.restore(versions[0], removeExisting);
-                    } else {
-                        node.restore(versions[0], relPath, removeExisting);
-                    }
+
+                String versionPath = getLocatorFromHref(hrefs[0]).getRepositoryPath();
+                String versionName = getItemName(versionPath);
+
+                String relPath = DomUtil.getChildText(udElem, XML_RELPATH, NAMESPACE);
+                if (relPath == null) {
+                    // restore version by name
+                    node.restore(versionName, removeExisting);
-                    getRepositorySession().getWorkspace().restore(versions, removeExisting);
+                    Version v = node.getVersionHistory().getVersion(versionName);
+                    node.restore(v, relPath, removeExisting);
+
-                if (labels.length == 1) {
-                    node.restoreByLabel(labels[0], removeExisting);
-                } else {
-                    Version[] vs = new Version[labels.length];
-                    VersionHistory vh = node.getVersionHistory();
-                    for (int  i = 0; i < labels.length; i++) {
-                        vs[i] = vh.getVersionByLabel(labels[i]);
-                    }
-                    getRepositorySession().getWorkspace().restore(vs, removeExisting);
+                if (labels.length != 1) {
+                    throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Invalid update request body: Multiple labels specified.");
+                node.restoreByLabel(labels[0], removeExisting);
+
-
-    /**
-     * Register the specified event listener with the observation manager present
-     * the repository session.
-     *
-     * @param listener
-     * @param nodePath
-     * @throws javax.jcr.RepositoryException
-     */
-    private void registerEventListener(EventListener listener, String nodePath) throws RepositoryException {
-        getRepositorySession().getWorkspace().getObservationManager().addEventListener(listener, EListener.ALL_EVENTS, nodePath, true, null, null, false);
-    }
-
-    /**
-     * Unregister the specified event listener with the observation manager present
-     * the repository session.
-     *
-     * @param listener
-     * @throws javax.jcr.RepositoryException
-     */
-    private void unregisterEventListener(EventListener listener) throws RepositoryException {
-        getRepositorySession().getWorkspace().getObservationManager().removeEventListener(listener);
-    }
-
-    //------------------------------------------------------< inner classes >---
-    /**
-     * Simple EventListener that creates a new {@link org.apache.jackrabbit.webdav.MultiStatusResponse} object
-     * for each event and adds it to the specified {@link org.apache.jackrabbit.webdav.MultiStatus}.
-     */
-    private class EListener implements EventListener {
-
-        private static final int ALL_EVENTS = Event.NODE_ADDED | Event.NODE_REMOVED | Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED;
-
-        private final DavPropertyNameSet propNameSet;
-        private MultiStatus ms;
-
-        private EListener(DavPropertyNameSet propNameSet, MultiStatus ms) {
-            this.propNameSet = propNameSet;
-            this.ms = ms;
-        }
-
-        /**
-         * @see EventListener#onEvent(javax.jcr.observation.EventIterator)
-         */
-        public void onEvent(EventIterator events) {
-            while (events.hasNext()) {
-                try {
-                    Event e = events.nextEvent();
-                    DavResourceLocator loc = getLocatorFromItemPath(e.getPath());
-                    DavResource res = createResourceFromLocator(loc);
-                    ms.addResponse(new MultiStatusResponse(res, propNameSet));
-
-                } catch (DavException e) {
-                    // should not occur
-                    log.error("Error while building MultiStatusResponse from Event: " + e.getMessage());
-                } catch (RepositoryException e) {
-                    // should not occur
-                    log.error("Error while building MultiStatusResponse from Event: " + e.getMessage());
-                }
-            }
-        }
-    }
