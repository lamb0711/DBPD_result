[JCR-317] replace UUID strings by UUID classes in NodeId, etc..

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378221 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeId;
-     * key = versionId (String)
+     * key = versionId (NodeId)
-    private String historyId;
+    private NodeId historyId;
-     * the if of the versionable node
+     * the id of the versionable node
-    private String versionableId;
+    private NodeId versionableId;
-        historyId = node.getUUID();
+        historyId = node.getNodeId();
-        versionableId = (String) node.getPropertyValue(QName.JCR_VERSIONABLEUUID).internalValue();
+        versionableId = NodeId.valueOf(node.getPropertyValue(QName.JCR_VERSIONABLEUUID).toString());
-                    InternalVersionImpl v = (InternalVersionImpl) getVersion(ref.toString());
+                    InternalVersionImpl v = (InternalVersionImpl) getVersion(new NodeId(ref));
-        InternalVersionImpl v = (InternalVersionImpl) tempVersionCache.remove(child.getUUID());
+        InternalVersionImpl v = (InternalVersionImpl) tempVersionCache.remove(child.getNodeId());
-    public String getId() {
+    public NodeId getId() {
-    public boolean hasVersion(String uuid) {
-        return versionCache.containsKey(uuid);
+    public boolean hasVersion(NodeId id) {
+        return versionCache.containsKey(id);
-    public InternalVersion getVersion(String uuid) {
-        return (InternalVersion) versionCache.get(uuid);
+    public InternalVersion getVersion(NodeId id) {
+        return (InternalVersion) versionCache.get(id);
-    public String getVersionableUUID() {
-        return versionableId;
+    public UUID getVersionableUUID() {
+        return versionableId.getUUID();
-    public String getVersionLabelsUUID() {
-        return labelNode.getUUID();
+    public NodeId getVersionLabelsId() {
+        return labelNode.getNodeId();
-                labelNode.setPropertyValue(label, InternalValue.create(new UUID(version.getId())));
+                labelNode.setPropertyValue(label, InternalValue.create(version.getId().getUUID()));
-            String predId = preds[i].getString();
+            UUID predId = UUID.fromString(preds[i].getString());
-            if (!versionCache.containsKey(predId)) {
+            if (!versionCache.containsKey(new NodeId(predId))) {
-            predecessors[i] = InternalValue.create(new UUID(predId));
+            predecessors[i] = InternalValue.create(predId);
-        String versionId = UUID.randomUUID().toString();
+        NodeId versionId = new NodeId(UUID.randomUUID());
-                                             String historyId, QName name,
+                                             NodeId historyId, QName name,
-        pNode.setPropertyValue(QName.JCR_VERSIONABLEUUID, InternalValue.create(nodeState.getUUID()));
+        String versionableUUID = nodeState.getNodeId().getUUID().toString();
+        pNode.setPropertyValue(QName.JCR_VERSIONABLEUUID, InternalValue.create(versionableUUID));
-        String versionId = UUID.randomUUID().toString();
-
+        NodeId versionId = new NodeId(UUID.randomUUID());
-        node.setPropertyValue(QName.JCR_FROZENUUID, InternalValue.create(nodeState.getUUID()));
+        node.setPropertyValue(QName.JCR_FROZENUUID, InternalValue.create(versionableUUID));
