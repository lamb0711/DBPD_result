JCR-63: /contrib/orm-persistence/ OJBPersistenceManager
committing patch posted by Edgar Poce on behalf of Serge Huber 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158047 13f79535-47bb-0310-9956-ffa450edef68

+
-import org.apache.jackrabbit.core.state.AbstractPersistenceManager;
+import org.apache.jackrabbit.core.state.ChangeLog;
+import org.apache.jackrabbit.core.state.ItemState;
+import org.apache.jackrabbit.core.state.PersistenceManager;
+import org.apache.ojb.broker.PersistenceBrokerException;
-public class OJBPersistenceManager extends AbstractPersistenceManager {
+public class OJBPersistenceManager implements PersistenceManager
+{
-    private PersistenceBroker broker = null;
-    public OJBPersistenceManager() {
+    public OJBPersistenceManager()
+    {
-    public void init(PMContext context) throws Exception {
-        if (initialized) {
+    public void init(PMContext context) throws Exception
+    {
+        // FIXME: A config param to set the broker name would be handy
+        if (initialized)
+        {
-        broker = PersistenceBrokerFactory.defaultPersistenceBroker();
-    public void close() throws Exception {
+    public void close() throws Exception
+    {
+        // Nothing to do
-        ItemStateException {
-        log.debug("Request for " + nodeId.getUUID());
-        OJBNodeState nodeState = new OJBNodeState();
-        nodeState.setUuid(nodeId.getUUID());
-        QueryByIdentity query = new QueryByIdentity(nodeState);
-        OJBNodeState result = (OJBNodeState) broker.getObjectByQuery(query);
-        if (result == null) {
-            throw new NoSuchItemStateException(nodeId.getUUID());
+            ItemStateException
+    {
+        PersistenceBroker broker = PersistenceBrokerFactory
+                .defaultPersistenceBroker();
+        try
+        {
+            log.debug("Request for " + nodeId.getUUID());
+            OJBNodeState nodeState = new OJBNodeState();
+            nodeState.setUuid(nodeId.getUUID());
+            QueryByIdentity query = new QueryByIdentity(nodeState);
+            OJBNodeState result = (OJBNodeState) broker.getObjectByQuery(query);
+            if (result == null)
+            {
+                throw new NoSuchItemStateException(nodeId.getUUID());
+            }
+            NodeState state = createNew(nodeId);
+            result.toPersistentNodeState(state);
+            return state;
+        } catch (PersistenceBrokerException e)
+        {
+            throw new ItemStateException(e);
+        } finally
+        {
+            if (broker != null)
+                broker.close();
-        NodeState state = createNew(nodeId);
-        result.toPersistentNodeState(state);
-        return state;
-    public PropertyState load(PropertyId propId) throws
-        NoSuchItemStateException, ItemStateException {
-        log.debug("Request for property " + propId);
-        ORMPropertyState propState = new ORMPropertyState(propId);
-        QueryByIdentity query = new QueryByIdentity(propState);
-        PropertyState state = createNew(propId);
-        ORMPropertyState result = (ORMPropertyState) broker.getObjectByQuery(
-            query);
-        if (result == null) {
-            throw new NoSuchItemStateException("Couldn't find property " +
-                                               propId);
-        }
-        result.toPersistentPropertyState(state);
-        if (result.getType().intValue() == PropertyType.BINARY) {
-            // we must now load the binary values.
-            ArrayList internalValueList = new ArrayList();
-            Criteria criteria = new Criteria();
-            criteria.addEqualTo("parentUUID", state.getParentUUID());
-            criteria.addEqualTo("propertyName", state.getName().toString());
-            QueryByCriteria blobQuery = new QueryByCriteria(ORMBlobValue.class,
-                criteria);
-            Iterator resultIter = broker.getCollectionByQuery(blobQuery).
-                iterator();
-            while (resultIter.hasNext()) {
-                ORMBlobValue ormBlobValue = (ORMBlobValue) resultIter.next();
-                ByteArrayInputStream in = new ByteArrayInputStream(ormBlobValue.
-                    getBlobValue());
-                try {
-                    BLOBFileValue blobValue = new BLOBFileValue(in);
-                    internalValueList.add(blobValue);
-                } catch (Throwable t) {
-                    throw new ItemStateException(
-                        "Error while trying to load blob value", t);
-                }
+    public PropertyState load(PropertyId propId)
+            throws NoSuchItemStateException, ItemStateException
+    {
+        PersistenceBroker broker = PersistenceBrokerFactory
+                .defaultPersistenceBroker();
+        try
+        {
+            log.debug("Request for property " + propId);
+            ORMPropertyState propState = new ORMPropertyState(propId);
+            QueryByIdentity query = new QueryByIdentity(propState);
+            PropertyState state = createNew(propId);
+            ORMPropertyState result = (ORMPropertyState) broker
+                    .getObjectByQuery(query);
+            if (result == null)
+            {
+                throw new NoSuchItemStateException("Couldn't find property "
+                        + propId);
-            state.setValues( (InternalValue[]) internalValueList.toArray(new
-                InternalValue[internalValueList.size()]));
+            result.toPersistentPropertyState(state);
+            if (result.getType().intValue() == PropertyType.BINARY)
+            {
+                // we must now load the binary values.
+                ArrayList internalValueList = new ArrayList();
+                Criteria criteria = new Criteria();
+                criteria.addEqualTo("parentUUID", state.getParentUUID());
+                criteria.addEqualTo("propertyName", state.getName().toString());
+                QueryByCriteria blobQuery = new QueryByCriteria(
+                        ORMBlobValue.class, criteria);
+                Iterator resultIter = broker.getCollectionByQuery(blobQuery)
+                        .iterator();
+                while (resultIter.hasNext())
+                {
+                    ORMBlobValue ormBlobValue = (ORMBlobValue) resultIter
+                            .next();
+                    ByteArrayInputStream in = new ByteArrayInputStream(
+                            ormBlobValue.getBlobValue());
+                    try
+                    {
+                        internalValueList.add(InternalValue.create(in));
+                    } catch (Throwable t)
+                    {
+                        throw new ItemStateException(
+                                "Error while trying to load blob value", t);
+                    }
+                }
+                state.setValues((InternalValue[]) internalValueList
+                        .toArray(new InternalValue[internalValueList.size()]));
+            }
+            return state;
+        } catch (PersistenceBrokerException e)
+        {
+            throw new ItemStateException(e);
+        } finally
+        {
+            if (broker != null)
+                broker.close();
-        return state;
-    public NodeReferences load(NodeReferencesId targetId) throws
-        NoSuchItemStateException, ItemStateException {
-        ORMNodeReference nodeRef = new ORMNodeReference();
-        nodeRef.setTargetId(targetId.toString());
-        QueryByCriteria query = new QueryByCriteria(nodeRef);
-        Iterator resultIter = broker.getCollectionByQuery(query).iterator();
-        NodeReferences refs = new NodeReferences(targetId);
-        while (resultIter.hasNext()) {
-            ORMNodeReference curNodeReference = (ORMNodeReference) resultIter.
-                next();
-            refs.addReference(new PropertyId(curNodeReference.
-                                             getPropertyParentUUID(),
-                                             QName.valueOf(curNodeReference.
-                getPropertyName())));
+    public NodeReferences load(NodeReferencesId targetId)
+            throws NoSuchItemStateException, ItemStateException
+    {
+        PersistenceBroker broker = PersistenceBrokerFactory
+                .defaultPersistenceBroker();
+        try
+        {
+            ORMNodeReference nodeRef = new ORMNodeReference();
+            nodeRef.setTargetId(targetId.toString());
+            QueryByCriteria query = new QueryByCriteria(nodeRef);
+            Iterator resultIter = broker.getCollectionByQuery(query).iterator();
+            NodeReferences refs = new NodeReferences(targetId);
+            while (resultIter.hasNext())
+            {
+                ORMNodeReference curNodeReference = (ORMNodeReference) resultIter
+                        .next();
+                refs.addReference(new PropertyId(curNodeReference
+                        .getPropertyParentUUID(), QName
+                        .valueOf(curNodeReference.getPropertyName())));
+            }
+            return refs;
+        } catch (PersistenceBrokerException e)
+        {
+            throw new ItemStateException(e);
+        } finally
+        {
+            if (broker != null)
+                broker.close();
-        return refs;
-    public boolean exists(NodeId id) throws ItemStateException {
-        OJBNodeState nodeState = new OJBNodeState(id);
-        QueryByIdentity query = new QueryByIdentity(nodeState);
-        OJBNodeState result = (OJBNodeState) broker.getObjectByQuery(query);
-        if (result == null) {
-            return false;
-        } else {
-            return true;
+    public boolean exists(NodeId id) throws ItemStateException
+    {
+        PersistenceBroker broker = PersistenceBrokerFactory
+                .defaultPersistenceBroker();
+        try
+        {
+            OJBNodeState nodeState = new OJBNodeState(id);
+            QueryByIdentity query = new QueryByIdentity(nodeState);
+            OJBNodeState result = (OJBNodeState) broker.getObjectByQuery(query);
+            if (result == null)
+            {
+                return false;
+            } else
+            {
+                return true;
+            }
+        } catch (PersistenceBrokerException e)
+        {
+            throw new ItemStateException(e);
+        } finally
+        {
+            if (broker != null)
+                broker.close();
-    public boolean exists(PropertyId id) throws ItemStateException {
-        ORMPropertyState propState = new ORMPropertyState(id);
-        // QueryByCriteria query = new QueryByCriteria(propState);
-        QueryByIdentity query = new QueryByIdentity(propState);
-        ORMPropertyState result = (ORMPropertyState) broker.
-            getObjectByQuery(query);
-        if (result == null) {
-            return false;
-        } else {
-            return true;
+    public boolean exists(PropertyId id) throws ItemStateException
+    {
+        PersistenceBroker broker = PersistenceBrokerFactory
+                .defaultPersistenceBroker();
+        try
+        {
+            ORMPropertyState propState = new ORMPropertyState(id);
+            // QueryByCriteria query = new QueryByCriteria(propState);
+            QueryByIdentity query = new QueryByIdentity(propState);
+            ORMPropertyState result = (ORMPropertyState) broker
+                    .getObjectByQuery(query);
+            if (result == null)
+            {
+                return false;
+            } else
+            {
+                return true;
+            }
+        } catch (PersistenceBrokerException e)
+        {
+            throw new ItemStateException(e);
+        } finally
+        {
+            if (broker != null)
+                broker.close();
-    public boolean exists(NodeReferencesId targetId)
-        throws ItemStateException {
-        ORMNodeReference nodeRef = new ORMNodeReference();
-        nodeRef.setTargetId(targetId.toString());
-        QueryByCriteria query = new QueryByCriteria(nodeRef);
-        Iterator resultIter = broker.getCollectionByQuery(query).iterator();
-        NodeReferences refs = new NodeReferences(targetId);
-        if (resultIter.hasNext()) {
-            return true;
+    public boolean exists(NodeReferencesId targetId) throws ItemStateException
+    {
+        PersistenceBroker broker = PersistenceBrokerFactory
+                .defaultPersistenceBroker();
+        try
+        {
+
+            ORMNodeReference nodeRef = new ORMNodeReference();
+            nodeRef.setTargetId(targetId.toString());
+            QueryByCriteria query = new QueryByCriteria(nodeRef);
+            Iterator resultIter = broker.getCollectionByQuery(query).iterator();
+            NodeReferences refs = new NodeReferences(targetId);
+            if (resultIter.hasNext())
+            {
+                return true;
+            }
+            return false;
+        } catch (PersistenceBrokerException e)
+        {
+            throw new ItemStateException(e);
+        } finally
+        {
+            if (broker != null)
+                broker.close();
-        return false;
-    public void store(NodeState state) throws ItemStateException {
+    private void store(NodeState state, PersistenceBroker broker)
+            throws ItemStateException
+    {
-        broker.beginTransaction();
-        if (result == null) {
+        if (result == null)
+        {
-        broker.commitTransaction();
-    public void store(PropertyState state) throws ItemStateException {
+    private void store(PropertyState state, PersistenceBroker broker)
+            throws ItemStateException
+    {
-        broker.beginTransaction();
-        ORMPropertyState result = (ORMPropertyState) broker.getObjectByQuery(
-            query);
-        if (result == null) {
+        ORMPropertyState result = (ORMPropertyState) broker
+                .getObjectByQuery(query);
+        if (result == null)
+        {
-        if (values != null) {
-            for (int i = 0; i < values.length; i++) {
+        if (values != null)
+        {
+            for (int i = 0; i < values.length; i++)
+            {
-                if (val != null) {
-                    if (state.getType() == PropertyType.BINARY) {
+                if (val != null)
+                {
+                    if (state.getType() == PropertyType.BINARY)
+                    {
-                        criteria.addEqualTo("parentUUID", state.getParentUUID());
-                        criteria.addEqualTo("propertyName",
-                                            state.getName().toString());
+                        criteria
+                                .addEqualTo("parentUUID", state.getParentUUID());
+                        criteria.addEqualTo("propertyName", state.getName()
+                                .toString());
-                            ORMBlobValue.class, criteria);
+                                ORMBlobValue.class, criteria);
-                            blobQuery).iterator();
+                                blobQuery).iterator();
-                        if (resultIter.hasNext()) {
+                        if (resultIter.hasNext())
+                        {
-                        } else {
+                        } else
+                        {
-                            ormBlobValue.setPropertyName(state.getName().
-                                toString());
+                            ormBlobValue.setPropertyName(state.getName()
+                                    .toString());
-                        BLOBFileValue blobVal = (BLOBFileValue) val.
-                            internalValue();
+                        BLOBFileValue blobVal = (BLOBFileValue) val
+                                .internalValue();
-                        try {
+                        try
+                        {
-                        } catch (Throwable t) {
-                            broker.abortTransaction();
+                        } catch (Throwable t)
+                        {
+                            // The caller is responsible of aborting the
+                            // transaction
+                            // broker.abortTransaction();
-        broker.commitTransaction();
-    public void store(NodeReferences refs) throws ItemStateException {
+    private void store(NodeReferences refs, PersistenceBroker broker)
+            throws ItemStateException
+    {
+        // destroy all the references before saving
+        destroy(refs, broker);
+        
-        broker.beginTransaction();
-        while (nodeRefPropIdIter.hasNext()) {
+        while (nodeRefPropIdIter.hasNext())
+        {
-            ORMNodeReference curNodeReference = new ORMNodeReference(refs.
-                getTargetId().toString(), curPropertyId.getParentUUID(),
-                curPropertyId.getName().toString());
+            ORMNodeReference curNodeReference = new ORMNodeReference(refs
+                    .getTargetId().toString(), curPropertyId.getParentUUID(),
+                    curPropertyId.getName().toString());
-        broker.commitTransaction();
-    public void destroy(NodeState state) throws ItemStateException {
+    private void destroy(NodeState state, PersistenceBroker broker)
+            throws ItemStateException
+    {
-        broker.beginTransaction();
+        
+        // Destroy node
-        if (result == null) {
+        if (result == null)
+        {
-        broker.commitTransaction();
-    public void destroy(PropertyState state) throws
-        ItemStateException {
+    private void destroy(PropertyState state, PersistenceBroker broker)
+            throws ItemStateException
+    {
-        broker.beginTransaction();
-        if (state.getType() == PropertyType.BINARY) {
+        if (state.getType() == PropertyType.BINARY)
+        {
-                criteria);
+                    criteria);
-        broker.commitTransaction();
-    public void destroy(NodeReferences refs) throws ItemStateException {
-        broker.beginTransaction();
+    private void destroy(NodeReferences refs, PersistenceBroker broker)
+            throws ItemStateException
+    {
-        while (resultIter.hasNext()) {
-            ORMNodeReference curNodeReference = (ORMNodeReference) resultIter.
-                next();
+        while (resultIter.hasNext())
+        {
+            ORMNodeReference curNodeReference = (ORMNodeReference) resultIter
+                    .next();
-        broker.commitTransaction();
+    /**
+     * @see PersistenceManager#createNew
+     */
+    public NodeState createNew(NodeId id)
+    {
+        return new NodeState(id.getUUID(), null, null, NodeState.STATUS_NEW,
+                false);
+    }
+
+    /**
+     * @see PersistenceManager#createNew
+     */
+    public PropertyState createNew(PropertyId id)
+    {
+        return new PropertyState(id.getName(), id.getParentUUID(),
+                PropertyState.STATUS_NEW, false);
+    }
+
+    /**
+     * @see PersistenceManager#store(ChangeLog)
+     * 
+     * This method ensures that changes are either written completely to the
+     * underlying persistence layer, or not at all.
+     */
+    public void store(ChangeLog changeLog) throws ItemStateException
+    {
+        PersistenceBroker broker = PersistenceBrokerFactory
+                .defaultPersistenceBroker();
+        try
+        {
+            broker.beginTransaction() ;
+            Iterator iter = changeLog.deletedStates();
+            while (iter.hasNext())
+            {
+                ItemState state = (ItemState) iter.next();
+                if (state.isNode())
+                {
+                    destroy((NodeState) state, broker);
+                } else
+                {
+                    destroy((PropertyState) state, broker);
+                }
+            }
+            iter = changeLog.addedStates();
+            while (iter.hasNext())
+            {
+                ItemState state = (ItemState) iter.next();
+                if (state.isNode())
+                {
+                    store((NodeState) state, broker);
+                } else
+                {
+                    store((PropertyState) state, broker);
+                }
+            }
+            iter = changeLog.modifiedStates();
+            while (iter.hasNext())
+            {
+                ItemState state = (ItemState) iter.next();
+                if (state.isNode())
+                {
+                    store((NodeState) state, broker);
+                } else
+                {
+                    store((PropertyState) state, broker);
+                }
+            }
+            iter = changeLog.modifiedRefs();
+            while (iter.hasNext())
+            {
+                NodeReferences refs = (NodeReferences) iter.next();
+                if (refs.hasReferences())
+                {
+                    store(refs, broker);
+                } else
+                {
+                    destroy(refs, broker);
+                }
+            }
+            broker.commitTransaction() ;
+        } catch (ItemStateException e)
+        {
+            if (broker != null)
+                broker.abortTransaction();
+            throw e;
+        } catch (PersistenceBrokerException e)
+        {
+            if (broker != null)
+                broker.abortTransaction();
+            throw new ItemStateException("Unable to store", e);
+        } finally
+        {
+            if (broker != null)
+                broker.close();
+        }
+
+    }
