JCR-45 fixes:
- fixing references into version storage
- fixing inter-version storage references

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156188 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.ArrayList;
+import java.util.Iterator;
-public class LazyItemIterator implements NodeIterator, PropertyIterator {
+class LazyItemIterator implements NodeIterator, PropertyIterator {
+    /**
+     * the item manager that is used to fetch the items
+     */
+
+    /**
+     * the list of item ids
+     */
-    private int pos;
+
+    /**
+     * the position of the next item
+     */
+    private int pos = 0;
-    LazyItemIterator(ItemManager itemMgr, List idList) {
-        this.itemMgr = itemMgr;
-        this.idList = new ArrayList(idList);
-        pos = -1;
+    public LazyItemIterator(ItemManager itemMgr, List idList) {
+        this(itemMgr, idList, false);
-    //---------------------------------------------------------< NodeIterator >
+    /**
+     * Creates a new <code>LazyItemIterator</code> instance.
+     *
+     * @param itemMgr item manager
+     * @param idList  list of item id's
+     */
+    public LazyItemIterator(ItemManager itemMgr, List idList, boolean skipInexistent) {
+        this.itemMgr = itemMgr;
+        if (skipInexistent) {
+            // check all items first
+            this.idList = new ArrayList();
+            Iterator iter = idList.iterator();
+            while (iter.hasNext()) {
+                ItemId id = (ItemId) iter.next();
+                if (itemMgr.itemExists(id)) {
+                    this.idList.add(id);
+                }
+            }
+        } else {
+            this.idList = idList;
+        }
+    }
+
+    //-------------------------------------------------------< NodeIterator >---
+    /**
+     * {@inheritDoc}
+     */
-    //-----------------------------------------------------< PropertyIterator >
+    //---------------------------------------------------< PropertyIterator >---
+    /**
+     * {@inheritDoc}
+     */
-    //--------------------------------------------------------< RangeIterator >
+    //------------------------------------------------------< RangeIterator >---
+    /**
+     * {@inheritDoc}
+     */
-        return pos + 1;
+        return pos;
+    /**
+     * {@inheritDoc}
+     */
+    /**
+     * {@inheritDoc}
+     */
-        if (pos + skipNum >= idList.size()) {
-            pos = idList.size() - 1;
-            throw new NoSuchElementException();
+        if (pos + skipNum > idList.size()) {
+            throw new NoSuchElementException("skipNum + pos greater than size");
-    //-------------------------------------------------------------< Iterator >
+    //-----------------------------------------------------------< Iterator >---
+    /**
+     * {@inheritDoc}
+     */
-        return pos < idList.size() - 1;
+        return pos < idList.size();
+    /**
+     * {@inheritDoc}
+     */
-        if (pos >= idList.size() - 1) {
+        if (pos >= idList.size()) {
-        while (true) {
-            pos++;
-            try {
-                return itemMgr.getItem((ItemId) idList.get(pos));
-            } catch (AccessDeniedException ade) {
-                // silently ignore and try next
-                continue;
-            } catch (RepositoryException re) {
-                // FIXME: not quite correct
-                throw new NoSuchElementException(re.getMessage());
-            }
+        try {
+            return itemMgr.getItem((ItemId) idList.get(pos++));
+        } catch (RepositoryException e) {
+            throw new NoSuchElementException(e.getMessage());
+    /**
+     * {@inheritDoc}
+     *
+     * @throws UnsupportedOperationException allways, since not implemented
+     */
