work in progress

jcr2spi
- HierarchyManager: fixing methods with ItemId param
- HierarchyManagerImpl(s): removing unused methods
- ItemManagerImpl: replacing NodeId as cacheKey
- ItemImpl: remove ISM field

jcr2spi/xml
- ImporterImpl renamed to SessionImporter (used for s-import only)
- xml import: Use UUID String instead of creating NodeIds
- ReferenceChangeTracker: remove usage of spi NodeId

jcr2spi/state
- SessionItemStateManager: ValueFactory not needed since QPropertyDefinition returns qualified values.

jcr2spi/util
- LogUtil: add 'saveGetJCRName' utility method

jcr2spi/locking
- locking: LockManager to use NodeState instead of NodeId
- locking: removing locktoken from Session checks if Session is lock holder

jcr2spi/query
- NodeIteratorImpl: fix commented code, that allows to retrieve
  search results from IdIterator returned from QueryInfo
- minor reformatting, javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430791 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.ItemId;
+
-    public NodeId getRootNodeId() {
-        return rootNodeId;
-    }
-
-    /**
-     * Return an item state, given its item id.
-     * <p/>
-     * Low-level hook provided for specialized derived classes.
-     *
-     * @param id item id
-     * @return item state
-     * @throws NoSuchItemStateException if the item does not exist
-     * @throws ItemStateException       if an error occurs
-     * @see ZombieHierarchyManager#getItemState(ItemId)
-     */
-    protected ItemState getItemState(ItemId id)
-            throws NoSuchItemStateException, ItemStateException {
-        return itemStateManager.getItemState(id);
-    }
-
-    /**
-     * Determines whether an item state for a given item id exists.
-     * <p/>
-     * Low-level hook provided for specialized derived classes.
-     *
-     * @param id item id
-     * @return <code>true</code> if an item state exists, otherwise
-     *         <code>false</code>
-     * @see ZombieHierarchyManager#hasItemState(ItemId)
-     */
-    protected boolean hasItemState(ItemId id) {
-        return itemStateManager.hasItemState(id);
-    }
-
+    // TODO: review the overridables as soon as status of ZombiHierarchyManager is clear
+    // TODO: review the overridables as soon as status of ZombiHierarchyManager is clear
+    // TODO: review the overridables as soon as status of ZombiHierarchyManager is clear
+    // TODO: review the overridables as soon as status of ZombiHierarchyManager is clear
-
-     * @see HierarchyManager#getQName(ItemState)
-     */
-    public QName getQName(ItemState itemState)
-            throws ItemNotFoundException, RepositoryException {
-        if (itemState.isNode()) {
-            NodeState parentState = itemState.getParent();
-            if (parentState == null) {
-                // shortcut. the given state represents the root or an orphaned node
-                return QName.ROOT;
-            }
-
-            NodeId nodeId = ((NodeState)itemState).getNodeId();
-            ChildNodeEntry entry = getChildNodeEntry(parentState, nodeId);
-            if (entry == null) {
-                String msg = "failed to resolve name of " + nodeId;
-                log.debug(msg);
-                throw new RepositoryException(msg);
-            }
-            return entry.getName();
-        } else {
-            return ((PropertyState)itemState).getQName();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
+     * @see HierarchyManager#getRelativeDepth(NodeState, ItemState)
-    public int getRelativeDepth(NodeId ancestorId, ItemId descendantId)
+    public int getRelativeDepth(NodeState ancestor, ItemState descendant)
-        if (ancestorId.equals(descendantId)) {
+        if (ancestor.equals(descendant)) {
-        try {
-            ItemState state = getItemState(descendantId);
-            NodeId parentId = getParentId(state);
-            while (parentId != null) {
-                if (parentId.equals(ancestorId)) {
-                    return depth;
-                }
-                depth++;
-                state = getItemState(parentId);
-                parentId = getParentId(state);
+        NodeState parent = descendant.getParent();
+        while (parent != null) {
+            if (parent.equals(ancestor)) {
+                return depth;
-            // not an ancestor
-            return -1;
-        } catch (NoSuchItemStateException nsise) {
-            String msg = "failed to determine depth of " + descendantId
-                    + " relative to " + ancestorId;
-            log.debug(msg);
-            throw new ItemNotFoundException(msg, nsise);
-        } catch (ItemStateException ise) {
-            String msg = "failed to determine depth of " + descendantId
-                    + " relative to " + ancestorId;
-            log.debug(msg);
-            throw new RepositoryException(msg, ise);
+            depth++;
+            descendant = parent;
+            parent = descendant.getParent();
+        // not an ancestor
+        return -1;
