JCR-417 (preparation):
- add AbstractLocatorFactory
- add separate loc-factory to simple project => reducing dependency
  to 'jcr' package.

JCR-544
- add separate workspace resource representing the jcr workspace
- move Workspace.restore call to workspace resource.
- consequently RootItemCollection not used any more

minor improvements
- root, workspace resource must not support 'observation' -> moving
  constant to item-resources
- get rid of 'setModificationTime'



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@448257 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.DavCompliance;
+import org.apache.jackrabbit.webdav.io.OutputContext;
+import org.apache.jackrabbit.webdav.observation.ObservationResource;
+import org.apache.jackrabbit.webdav.observation.SubscriptionManager;
+import org.apache.jackrabbit.webdav.observation.Subscription;
+import org.apache.jackrabbit.webdav.observation.SubscriptionInfo;
+import org.apache.jackrabbit.webdav.observation.EventDiscovery;
+import org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery;
-import org.apache.jackrabbit.webdav.jcr.version.report.LocateByUuidReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.NodeTypesReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.RegisteredNamespacesReport;
-import org.apache.jackrabbit.webdav.jcr.version.report.RepositoryDescriptorsReport;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.property.DavPropertyName;
-import org.apache.jackrabbit.webdav.version.report.ReportType;
-import org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty;
+import java.io.IOException;
-    ItemResourceConstants {
+    ObservationResource, ItemResourceConstants {
+    private SubscriptionManager subsMgr;
-	// initialize the supported locks and reports
+        // initialize the supported locks and reports
-        return ItemResourceConstants.COMPLIANCE_CLASS;
+        String cc = super.getComplianceClass() + "," + DavCompliance.OBSERVATION;
+        return cc;
+     * Spools the properties of this resource to the context. Note that subclasses
+     * are in charge of spooling the data to the output stream provided by the
+     * context.
+     *
+     * @see DavResource#spool(OutputContext)
+     */
+    public void spool(OutputContext outputContext) throws IOException {
+        if (!initedProps) {
+            initProperties();
+        }
+        // export properties
+        outputContext.setModificationTime(getModificationTime());
+        DavProperty etag = getProperty(DavPropertyName.GETETAG);
+        if (etag != null) {
+            outputContext.setETag(String.valueOf(etag.getValue()));
+        }
+        DavProperty contentType = getProperty(DavPropertyName.GETCONTENTTYPE);
+        if (contentType != null) {
+            outputContext.setContentType(String.valueOf(contentType.getValue()));
+        }
+        DavProperty contentLength = getProperty(DavPropertyName.GETCONTENTLENGTH);
+        if (contentLength != null) {
+            try {
+                long length = Long.parseLong(contentLength.getValue() + "");
+                if (length > 0) {
+                    outputContext.setContentLength(length);
+                }
+            } catch (NumberFormatException e) {
+                log.error("Could not build content length from property value '" + contentLength.getValue() + "'");
+            }
+        }
+        DavProperty contentLanguage = getProperty(DavPropertyName.GETCONTENTLANGUAGE);
+        if (contentLanguage != null) {
+            outputContext.setContentLanguage(contentLanguage.getValue().toString());
+        }
+    }
+
+    /**
-        String resourcePath = getResourcePath();
-        // No special treatment for the root-item needed, because this is
-        // covered by the RootItemCollection itself.
-        String parentResourcePath = Text.getRelativeParent(resourcePath, 1);
-        String parentWorkspacePath = getLocator().getWorkspacePath();
-
-        DavResourceLocator parentLoc = getLocator().getFactory().createResourceLocator(getLocator().getPrefix(), parentWorkspacePath, parentResourcePath);
+        String parentPath = Text.getRelativeParent(getResourcePath(), 1);
+        DavResourceLocator parentLoc = getLocator().getFactory().createResourceLocator(getLocator().getPrefix(), getLocator().getWorkspacePath(), parentPath);
+    //--------------------------------------< ObservationResource interface >---
+    /**
+     * @see ObservationResource#init(SubscriptionManager)
+     */
+    public void init(SubscriptionManager subsMgr) {
+        this.subsMgr = subsMgr;
+    }
+
+    /**
+     * @see ObservationResource#subscribe(org.apache.jackrabbit.webdav.observation.SubscriptionInfo, String)
+     * @see SubscriptionManager#subscribe(org.apache.jackrabbit.webdav.observation.SubscriptionInfo, String, org.apache.jackrabbit.webdav.observation.ObservationResource)
+     */
+    public Subscription subscribe(SubscriptionInfo info, String subscriptionId)
+            throws DavException {
+        return subsMgr.subscribe(info, subscriptionId, this);
+    }
+
+    /**
+     * @see ObservationResource#unsubscribe(String)
+     * @see SubscriptionManager#unsubscribe(String, org.apache.jackrabbit.webdav.observation.ObservationResource)
+     */
+    public void unsubscribe(String subscriptionId) throws DavException {
+        subsMgr.unsubscribe(subscriptionId, this);
+    }
+
+    /**
+     * @see ObservationResource#poll(String)
+     * @see SubscriptionManager#poll(String, org.apache.jackrabbit.webdav.observation.ObservationResource)
+     */
+    public EventDiscovery poll(String subscriptionId) throws DavException {
+        return subsMgr.poll(subscriptionId, this);
+    }
+
-     * Define the set of reports supported by this resource.
-     *
-     * @see org.apache.jackrabbit.webdav.version.report.SupportedReportSetProperty
-     * @see AbstractResource#initSupportedReports()
-     */
-    protected void initSupportedReports() {
-        if (exists()) {
-            supportedReports = new SupportedReportSetProperty(new ReportType[] {
-                ReportType.EXPAND_PROPERTY,
-                NodeTypesReport.NODETYPES_REPORT,
-                LocateByUuidReport.LOCATE_BY_UUID_REPORT,
-                RegisteredNamespacesReport.REGISTERED_NAMESPACES_REPORT,
-                RepositoryDescriptorsReport.REPOSITORY_DESCRIPTORS_REPORT
-            });
-        }
-    }
-
-    /**
-            
+
+        // observation resource
+        SubscriptionDiscovery subsDiscovery = subsMgr.getSubscriptionDiscovery(this);
+        properties.add(subsDiscovery);
+
-	DavResourceLocator locator = getLocator();
-        if (locator != null && locator.getWorkspaceName() != null) {
-            DavResourceLocator wspLocator = locator.getFactory().createResourceLocator(locator.getPrefix(), locator.getWorkspacePath(), ItemResourceConstants.ROOT_ITEM_PATH);
+        DavResourceLocator locator = getLocator();
+        if (locator != null && locator.getWorkspacePath() != null) {
+            String wspPath = locator.getWorkspacePath();
+            DavResourceLocator wspLocator = locator.getFactory().createResourceLocator(locator.getPrefix(), wspPath, wspPath);
-	log.info(workspaceHref);
+        log.debug(workspaceHref);
