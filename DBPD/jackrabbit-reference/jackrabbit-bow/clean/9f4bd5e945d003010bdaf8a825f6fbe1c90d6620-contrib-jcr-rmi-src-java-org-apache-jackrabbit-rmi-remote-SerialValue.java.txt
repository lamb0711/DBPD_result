Improved javadocs.
Cleaner null value handling.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155790 13f79535-47bb-0310-9956-ffa450edef68

- * Serializable {@link javax.jcr.Value Value} decorator. A SerialValue
- * decorator makes it possible to serialize the contents of a Value object
- * even if the object itself is not serializable.
+ * Serializable {@link Value Value} decorator. A SerialValue decorator
+ * makes it possible to serialize the contents of a Value object even
+ * if the object itself is not serializable. For example the standard
+ * JCR Value classes are not serializable.
+ * <p>
+ * Note that a decorator object keeps a reference to the underlying value
+ * object and uses the standard value access methods to perform serialization.
+ * Serialization therefore affects the internal state of the underlying value!
+ * On the other hand, the internal state of a value might interfere with the
+ * serialization decorator. The safest course of action is to only decorate
+ * and serialize fresh value objects and to discard them after serialization.
-    static final long serialVersionUID = 8070492457339121953L;    
+    static final long serialVersionUID = 8070492457339121953L;
-     * Creates a SerialValue decorator for the given Value object.
+     * Creates a serialization decorator for the given value.
-     * Utility method for decorating an array of Value objects.
+     * Utility method for decorating an array of values. The
+     * returned array will contain SerialValue decorators for
+     * all the given values. Note that the contents of the
+     * original values will only be copied when the decorators
+     * are serialized.
+     * <p>
+     * If the given array is <code>null</code>, then an empty
+     * array is returned.
-     * @param values the Value objects to be decorated
-     * @return array of SerialValue decorators
+     * @param values the values to be decorated
+     * @return array of decorated values
-        if (values == null) {
+        if (values != null) {
+            Value[] serials = new Value[values.length];
+            for (int i = 0; i < values.length; i++) {
+                serials[i] = new SerialValue(values[i]);
+            }
+            return serials;
+        } else {
-
-        Value[] serials = new Value[values.length];
-        for (int i = 0; i < values.length; i++) {
-            serials[i] = new SerialValue(values[i]);
-        }
-        return serials;
-        } catch (RepositoryException ex) { // Is this possible?
+        } catch (RepositoryException ex) {
-    /* (non-Javadoc)
-     * @see javax.jcr.Value#getBoolean()
+    /**
+     * Forwards the method call to the decorated value.
+     * {@inheritDoc}
-    /* (non-Javadoc)
-     * @see javax.jcr.Value#getDate()
+    /**
+     * Forwards the method call to the decorated value.
+     * {@inheritDoc}
-    /* (non-Javadoc)
-     * @see javax.jcr.Value#getDouble()
+    /**
+     * Forwards the method call to the decorated value.
+     * {@inheritDoc}
-    /* (non-Javadoc)
-     * @see javax.jcr.Value#getLong()
+    /**
+     * Forwards the method call to the decorated value.
+     * {@inheritDoc}
-    /* (non-Javadoc)
-     * @see javax.jcr.Value#getStream()
+    /**
+     * Forwards the method call to the decorated value.
+     * {@inheritDoc}
-    /* (non-Javadoc)
-     * @see javax.jcr.Value#getString()
+    /**
+     * Forwards the method call to the decorated value.
+     * {@inheritDoc}
-    /* (non-Javadoc)
-     * @see javax.jcr.Value#getType()
+    /**
+     * Forwards the method call to the decorated value.
+     * {@inheritDoc}
