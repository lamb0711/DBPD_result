Webdav Simple: Delegate PROPPATCH to (extended) IOHandlers

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431546 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.server.io.PropertyManager;
+import org.apache.jackrabbit.server.io.PropertyHandler;
+import org.apache.jackrabbit.server.io.PropertyManagerImpl;
+    private PropertyManager propManager;
-     * &lt;!ELEMENT config (iomanager, (collection | noncollection)?, filter?) &gt;
+     * &lt;!ELEMENT config (iomanager, propertymanager, (collection | noncollection)?, filter?) &gt;
+     * &lt;!ELEMENT propertymanager (class, propertyhandler*) &gt;
+     * &lt;!ELEMENT propertyhandler (class) &gt;
-                log.error("Resource configuration: mandatory 'iomanager' element is missing.");
+                log.warn("Resource configuration: mandatory 'config' element is missing.");
-                            this.ioManager.addIOHandler((IOHandler) inst);
+                            ioManager.addIOHandler((IOHandler) inst);
-                            log.error("Resource configuration: the handler is not a valid IOHandler.");
+                            log.warn("Resource configuration: the handler is not a valid IOHandler.");
-                    log.error("Resource configuration: 'iomanager' does not define a valid IOManager.");
+                    log.warn("Resource configuration: 'iomanager' does not define a valid IOManager.");
-                log.error("Resource configuration: mandatory 'iomanager' element is missing.");
+                log.warn("Resource configuration: 'iomanager' element is missing.");
+            }
+
+            el = DomUtil.getChildElement(config, "propertymanager", null);
+            if (el != null) {
+                Object inst = buildClassFromConfig(el);
+                if (inst != null && inst instanceof PropertyManager) {
+                    propManager = (PropertyManager)inst;
+                    // get optional 'iohandler' child elements and populate the
+                    // ioManager with the instances
+                    ElementIterator iohElements = DomUtil.getChildren(el, "propertyhandler", null);
+                    while (iohElements.hasNext()) {
+                        Element iohEl = iohElements.nextElement();
+                        inst = buildClassFromConfig(iohEl);
+                        if (inst != null && inst instanceof PropertyHandler) {
+                            propManager.addPropertyHandler((PropertyHandler) inst);
+                        } else {
+                            log.warn("Resource configuration: the handler is not a valid PropertyHandler.");
+                        }
+                    }
+                } else {
+                    log.warn("Resource configuration: 'propertymanager' does not define a valid PropertyManager.");
+                }
+            } else {
+                log.debug("Resource configuration: 'propertymanager' element is missing.");
-
+    /**
+     *
+     * @return
+     */
+     *
+     * @return
+     */
+    public PropertyManager getPropertyManager() {
+        if (propManager == null) {
+            log.debug("ResourceConfig: missing property-manager > building default.");
+            propManager = PropertyManagerImpl.getDefaultManager();
+        }
+        return propManager;
+    }
+
+    /**
