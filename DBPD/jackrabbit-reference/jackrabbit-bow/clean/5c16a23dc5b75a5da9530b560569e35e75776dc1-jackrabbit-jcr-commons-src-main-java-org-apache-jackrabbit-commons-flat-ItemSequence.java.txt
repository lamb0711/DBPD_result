JCR-2711: BTreeManager needs more flexible mechanism for ignoring (internal) properties

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@984729 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.commons.flat.TreeTraverser.ErrorHandler;
-import org.apache.jackrabbit.commons.flat.TreeTraverser.InclusionPolicy;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.Set;
-import java.util.Comparator;
-import java.util.Iterator;
+import org.apache.jackrabbit.commons.flat.TreeTraverser.ErrorHandler;
+import org.apache.jackrabbit.commons.flat.TreeTraverser.InclusionPolicy;
-     * Create a new {@link NodeSequence} instance with the same parametrization
+     * Create a new {@link NodeSequence} instance with the same parameterization
+        private final InclusionPolicy<Node> inclusionPolicy = new InclusionPolicy<Node>() {
+            public boolean include(Node node) throws RepositoryException {
+                return treeManager.isLeaf(node);
+            }
+        };
-            return TreeTraverser.nodeIterator(root, errorHandler, new InclusionPolicy() {
-                public boolean include(Node node) throws RepositoryException {
-                    return treeManager.isLeaf(node);
-                }
-            });
+            return TreeTraverser.nodeIterator(root, errorHandler, inclusionPolicy);
+        private final InclusionPolicy<Property> inclusionPolicy = new InclusionPolicy<Property>() {
+            private final Set<String> ignoredProperties = treeManager.getIgnoredProperties();
+            public boolean include(Property property) throws RepositoryException {
+                return !ignoredProperties.contains(property.getName());
+            }
+        };
-            return TreeTraverser.propertyIterator(getNodeSequence().iterator(), errorHandler);
+            return TreeTraverser.propertyIterator(getNodeSequence().iterator(), errorHandler, inclusionPolicy);
