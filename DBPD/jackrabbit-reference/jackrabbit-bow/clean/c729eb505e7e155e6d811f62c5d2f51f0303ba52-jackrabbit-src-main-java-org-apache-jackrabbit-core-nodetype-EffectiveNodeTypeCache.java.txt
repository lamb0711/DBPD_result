- some minor nodetype enhancements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@377806 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.HashSet;
+
-        private final TreeSet set;
+        private final QName[] names;
+
+        /**
+         * the weight of this key
+         */
-
-            set = new TreeSet();
-            for (int i = 0; i < ntNames.length; i++) {
-                // add name to this sorted set
-                set.add(ntNames[i]);
-            }
+            names = new QName[ntNames.length];
+            System.arraycopy(ntNames, 0, names, 0, names.length);
+            Arrays.sort(names);
-            this.weight = weight;
-            set = new TreeSet(ntNames);
+            this((QName[]) ntNames.toArray(new QName[ntNames.size()]), weight);
-        String getKey() {
-            return set.toString();
+        Object getKey() {
+            return names;
-         * @return
+         * @return the weight of this key
-            return set.size();
-        }
-
-        Iterator iterator() {
-            return Collections.unmodifiableSortedSet(set).iterator();
-        }
-
-        Set getSet() {
-            return Collections.unmodifiableSortedSet(set);
+            return names.length;
-            return (QName[]) set.toArray(new QName[set.size()]);
+            return names;
-            return set.containsAll(otherKey.getSet());
+            Set tmp = new HashSet(Arrays.asList(names));
+            for (int i=0; i<otherKey.names.length; i++) {
+                if (!tmp.contains(otherKey.names[i])) {
+                    return false;
+                }
+            }
+            return true;
-            Set tmp = (Set) set.clone();
-            tmp.removeAll(otherKey.getSet());
+            Set tmp = new HashSet(Arrays.asList(names));
+            tmp.removeAll(Arrays.asList(otherKey.names));
-         * @return
+         * @return the result of the comparison
-            if (getWeight() > other.getWeight()) {
+            if (weight > other.weight) {
-            } else if (getWeight() < other.getWeight()) {
+            } else if (weight < other.weight) {
-            return getKey().compareTo(other.getKey());
+            if (Arrays.equals(names, other.names)) {
+                return 0;
+            } else {
+                return -1;
+            }
-            Iterator i = set.iterator();
-            while (i.hasNext()) {
+            for (int i=0; i<names.length; i++) {
-                Object obj = i.next();
-                if (obj != null) {
-                    h += obj.hashCode();
-                }
+                h += names[i].hashCode();
-                return set.equals(other.set);
+                return Arrays.equals(names, other.names);
-            return set.toString() + " (" + weight + ")";
+            return names.toString() + " (" + weight + ")";
