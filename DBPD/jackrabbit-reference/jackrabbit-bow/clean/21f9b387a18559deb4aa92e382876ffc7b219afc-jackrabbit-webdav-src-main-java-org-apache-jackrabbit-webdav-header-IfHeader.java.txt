JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 1: jackrabbit-webdav]

in addition:
- fix indention
- minor improvements in comments
- use foreach loops where possible
- introduce PropEntry marker interface as common base for DavProperty and DavPropertyName
- add o.a.j.webdav.lock.Type.hashCode

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915333 13f79535-47bb-0310-9956-ffa450edef68

-    private List allTokens = new ArrayList();
+    private List<String> allTokens = new ArrayList<String>();
-    private List allNotTokens = new ArrayList();
+    private List<String> allNotTokens = new ArrayList<String>();
-        for (int i = 0; i < tokens.length; i++) {
+        for (String token : tokens) {
-            b.append(tokens[i]);
+            b.append(token);
-    public Iterator getAllTokens() {
+    public Iterator<String> getAllTokens() {
-    public Iterator getAllNotTokens() {
+    public Iterator<String> getAllNotTokens() {
-                // read next non-whitespace
+                // read next non-white space
-                // read next non-whitespace
+                // read next non white space
+        @Override
+        @Override
+        @Override
+        @Override
+        @Override
-    private static class IfList extends ArrayList {
-
-        /**
-         * Throws an <code>IllegalStateException</code> because only
-         * {@link IfListEntry} objects are supported in this list.
-         *
-         * @param o The <code>Object</code> to add.
-         * @return <code>true</code> if successful
-         *
-         * @throws IllegalStateException because only {@link IfListEntry}
-         *      objects are supported in this list.
-         */
-        public boolean add(Object o) {
-            throw new IllegalArgumentException("Only IfListEntry instances allowed");
-        }
-
-        /**
-         * Throws an <code>IllegalStateException</code> because only
-         * {@link IfListEntry} objects are supported in this list.
-         *
-         * @param index The position at which to add the object.
-         * @param element The <code>Object</code> to add.
-         *
-         * @throws IllegalStateException because only {@link IfListEntry}
-         *      objects are supported in this list.
-         */
-        public void add(int index, Object element) {
-            throw new IllegalArgumentException("Only IfListEntry instances allowed");
-        }
+    private static class IfList extends ArrayList<IfListEntry> {
-         * @return <code>true</code> (as per the general contract of
-         *      Collection.add).
+         * @return <code>true</code> (as per the general contract of Collection.add).
+        @Override
+        @Override
-                IfListEntry ile = (IfListEntry) get(i);
+                IfListEntry ile = get(i);
-    private static class IfHeaderList extends ArrayList implements IfHeaderInterface {
+    private static class IfHeaderList extends ArrayList<IfList> implements IfHeaderInterface {
-            for (int i=0; i < size(); i++) {
-                IfList il = (IfList) get(i);
+            for (IfList il : this) {
-                    log.debug("matches: Found match with "+il);
+                    log.debug("matches: Found match with " + il);
-    private static class IfHeaderMap extends HashMap implements IfHeaderInterface {
+    private static class IfHeaderMap extends HashMap<String, IfHeaderList> implements IfHeaderInterface {
-            IfHeaderList list = (IfHeaderList) get(resource);
+            IfHeaderList list = get(resource);
