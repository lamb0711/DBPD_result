applying patch from angela, fixing:

[JCR-122] cannot PUT changes to a resource in the simple webdav server
[JCR-123] Webdav: Error when accessing Simple-Server
[JCR-126] Jcr-Server Module: Remove Dependency from Jackrabbit-Core


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@180346 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.chain.Command;
-import org.apache.commons.chain.Context;
-import org.apache.jackrabbit.webdav.util.Text;
-import org.apache.jackrabbit.JcrConstants;
+import org.apache.jackrabbit.util.Text;
+import java.util.HashSet;
- * directory listing of all child nodes. All child nodes having the
- * {@link #getCollectionNodeType()} result in a directory link.
+ * directory listing of all child nodes. If {@link #isCollectionNodeType(String)}
+ * returns true, when passed the primary node type of a child node, the result
+ * will be a directory link.<p/>
+ * The corresponding mapping is retrieved from the catalog. By default if no
+ * behaviour is specified, nodes are displayed as directories.
-public class DirListingExportCommand implements Command, JcrConstants {
+public class DirListingExportCommand extends AbstractCommand {
-     * the node type of a collection
+     * define which node types define collection resources
-    private String collectionNodeType = NT_FOLDER;
+    private HashSet collectionNodeTypes = new HashSet();
+
+    /**
+     * define which node types don't define collection resources
+     */
+    private HashSet nonCollectionNodeTypes = new HashSet();
-     * Creates a DirListingExportCommand with the given collection node type.
+     * Returns true if the given the node type name denotes a collection.
-     * @param collectionNodeType
+     * @return true if the given the node type name denotes a collection node.
-    public DirListingExportCommand(String collectionNodeType) {
-        this.collectionNodeType = collectionNodeType;
+    public boolean isCollectionNodeType(String nodeTypeName) {
+        if (nonCollectionNodeTypes.isEmpty()) {
+            // check collection-set
+            return collectionNodeTypes.contains(nodeTypeName);
+        } else {
+            // check non-collection-set
+            return !nonCollectionNodeTypes.contains(nodeTypeName);
+        }
-     * Returns the node type of a collection node.
+     * Defines the given node type names to represent collection nodes.
+     * Child nodes having this node type result in a directory link.
-     * @return the node type of a collection node.
+     * @param nodeTypeNames comma separated String value
-    public String getCollectionNodeType() {
-        return collectionNodeType;
+    public void setCollectionNodeTypes(String nodeTypeNames) {
+        String[] names = nodeTypeNames.split(",");
+        for (int i = 0; i < names.length; i++) {
+            collectionNodeTypes.add(names[i].trim());
+        }
-     * Sets the node type of collection nodes. child nodes having this node
-     * type result in a directory link.
+     * Defines the given node type names to represent non-collection nodes.
+     * Child nodes having this node type will never result in a directory
+     * link.
-     * @param collectionNodeType
+     * @param nodeTypeNames comma separated String value
-    public void setCollectionNodeType(String collectionNodeType) {
-        this.collectionNodeType = collectionNodeType;
+    public void setNonCollectionNodeTypes(String nodeTypeNames) {
+        String[] names = nodeTypeNames.split(",");
+        for (int i = 0; i < names.length; i++) {
+             nonCollectionNodeTypes.add(names[i].trim());
+        }
-    public boolean execute(Context context) throws Exception {
+    public boolean execute(AbstractContext context) throws Exception {
-            if (child.getPrimaryNodeType().getName().equals(collectionNodeType)) {
+            if (isCollectionNodeType(child.getPrimaryNodeType().getName())) {
