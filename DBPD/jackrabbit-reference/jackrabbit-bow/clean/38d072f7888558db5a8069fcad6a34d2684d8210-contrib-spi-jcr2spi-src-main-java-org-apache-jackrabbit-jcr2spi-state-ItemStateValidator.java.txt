work in progress

- Restore: pass NodeState(s) and Path instead of NodeId(s)
- LockManager: make sure lockmanager only remembers workspace states
- LockManager: make sure operations are executed using workspace states
- LockManager: improve isLocked/getLock/checkIsLocked and respect locks that
have been accessed before.
- VersionManager: make sure operations are executed using workspace states
- VersionManager: add checkIsCheckedOut
- VersionManager: force manager to have a WorkspaceManager
- NodeReferences:
  > make interface package protected
  > clarify method naming
  > add implementation to WorkspaceItemStateFactory
  > add NodeReferences field to NodeState
  > TO_IMPROVE: references are currently always retrieve from the SPI.
- ItemStateManager + NodeReferences
  > rename interfaces methods
  > change method signature to take NodeState instead of NodeId
  > 'getReferences' returns the property states directly

- remove some JR DIFFs. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432234 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeId;
-            // TODO build Id instead 
-            Path relPath = Path.create(nodeName, org.apache.jackrabbit.name.Path.INDEX_UNDEFINED);
+            Path relPath = Path.create(nodeName, Path.INDEX_UNDEFINED);
-        // shortcut: if state is new, its ancestor must be checkout
-        if (itemState.getStatus() == ItemState.STATUS_NEW) {
-            return;
-        }
-        if (!mgrProvider.getVersionManager().isCheckedOut(nodeState)) {
-            throw new VersionException(safeGetJCRPath(nodeState) + " is checked-in");
-        }
+        mgrProvider.getVersionManager().checkIsCheckedOut(nodeState);
-        NodeId targetId = targetState.getNodeId();
-            if (stateMgr.hasNodeReferences(targetId)) {
+            if (stateMgr.hasReferingStates(targetState)) {
-                    NodeReferences refs = stateMgr.getNodeReferences(targetId);
-                    if (refs.hasReferences()) {
+                    if (!stateMgr.getReferingStates(targetState).isEmpty()) {
