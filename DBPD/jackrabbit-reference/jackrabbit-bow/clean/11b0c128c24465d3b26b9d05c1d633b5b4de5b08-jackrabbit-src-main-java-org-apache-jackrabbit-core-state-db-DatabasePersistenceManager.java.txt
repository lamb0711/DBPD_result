JCR-313: More javadocs.
Added a DatabasePersistenceManager.closeConnection() method to simplify the DerbyPersistenceManager shutdown sequence.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@386845 13f79535-47bb-0310-9956-ffa450edef68

-            con.close();
+            closeConnection(con);
+
-     * Initialize the JDBC connection.
+     * Abstract factory method for creating a new database connection. This
+     * method is called by {@link #init(PMContext)} when the persistence
+     * manager is started. The returned connection should come with the default
+     * JDBC settings, as the {@link #init(PMContext)} method will explicitly
+     * set the <code>autoCommit</code> and other properties as needed.
+     * <p>
+     * Note that the returned database connection is kept during the entire
+     * lifetime of the persistence manager, after which it is closed by
+     * {@link #close()} using the {@link #closeConnection(Connection)} method.
-    abstract Connection getConnection() throws Exception;
+    protected abstract Connection getConnection() throws Exception;
+
+    /**
+     * Closes the given database connection. This method is called by
+     * {@link #close()} to close the connection acquired using
+     * {@link #getConnection()} when the persistence manager was started.
+     * <p>
+     * The default implementation just calls the {@link Connection#close()}
+     * method of the given connection, but subclasses can override this
+     * method to provide more extensive database and connection cleanup.
+     * 
+     * @param connection
+     * @throws Exception
+     */
+    protected void closeConnection(Connection connection) throws Exception {
+        connection.close();
+    }
