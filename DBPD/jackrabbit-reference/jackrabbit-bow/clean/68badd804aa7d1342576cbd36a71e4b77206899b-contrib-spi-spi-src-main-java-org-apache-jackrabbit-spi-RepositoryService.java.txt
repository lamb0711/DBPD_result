javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@555523 13f79535-47bb-0310-9956-ffa450edef68

+     * Return all workspace names available for the given <code>SessionInfo</code>.
+     *
-     * @return An array of workspace ids.
+     * @return An array of workspace names.
+     * Returns true if all actions defined in the specified array are granted
+     * to given <code>SessionInfo</code>. False otherwise.
+     *
-     * Batch must be executed at once or non must be executed upon calling
-     * {@link #submit(Batch)}.
+     * {@link Batch} must be executed at once or non must be executed upon
+     * calling {@link #submit(Batch)}.
+     * @see Batch
-     * Completes the this Batch or discard all the previous modifications.
+     * Completes the given {@link Batch} or discard all the previous modifications.
+     * See {@link #createBatch(ItemId, SessionInfo)} for additional information
+     * regarding batch creation.
+     * @see Batch
+     * Moves the node identified by the given <code>srcNodeId</code> (and its
+     * entire subtree) to the new location defined by <code>destParentNodeId</code>
+     * and a new name (<code>destName</code>).
+     *
+     * Clone the subtree identified by the given <code>srcNodeId</code>
+     * in workspace named <code>srcWorkspaceName</code> to the destination
+     * in the workspace specified by the given <code>SessionInfo</code>. The
+     * destination is composed by the given parent id and the new name
+     * as indicated by <code>destName</code>.<p/>
+     * Note, that <code>srcWorkspaceName</code> may be the same as the one
+     * specified within the <code>SessionInfo</code>. In this case the copy
+     * corresponds to a copy within a single workspace.
+     *
+     * Updates the node identified by the given <code>NodeId</code> replacing
+     * it (an the complete subtree) with a clone of its corresponding node
+     * present in the workspace with the given <code>srcWorkspaceName</code>.
+     *
+     * Clone the subtree identified by the given <code>srcNodeId</code>
+     * in workspace named <code>srcWorkspaceName</code> to the destination
+     * in the workspace specified by the given <code>SessionInfo</code>. The
+     * destination is composed by the given parent id and the new name
+     * as indicated by <code>destName</code>.
+     *
+     * Remove the version inditified by the specified <code>versionId</code>.
-     * @param versionHistoryId
+     * @param versionHistoryId <code>NodeId</code> identifying the version
+     * history the version identified by <code>versionId</code> belongs to.
+     * Restores the node identified by <code>nodeId</code> to the state defined
+     * by the version with the specified <code>versionId</code>.
+     *
-     * @param removeExisting
+     * @param removeExisting boolean flag indicating how to deal with an
+     * identifier collision that may occur if a node exists outside the subtree
+     * to be restored with the same identified as a node that would be
+     * introduces by the restore. If the <code>removeExisting</code> is
+     * <code>true</code> the restored node takes precedence and the
+     * existing node is removed. Otherwise the restore failes.
+     * Restore multiple versions at once. The versions to be restored are
+     * identified by the given array of <code>NodeId</code>s.
+     *
-     * @param removeExisting
+     * @param removeExisting boolean flag indicating how to deal with an
+     * identifier collision that may occur if a node exists outside the subtrees
+     * to be restored with the same identified as any node that would be
+     * introduces by the restore. If the <code>removeExisting</code> is
+     * <code>true</code> the node to be restored takes precedence and the
+     * existing node is removed. Otherwise the restore failes.
+     * Merge the node identified by the given <code>NodeId</code> and its subtree
+     * with the corresponding node present in the workspace with the name of
+     * <code>srcWorkspaceName</code>.
+     *
+     * Resolve an existing merge conflict present with the node identified by
+     * the given <code>NodeId</code>.
+     *
-     * @param predecessorIds
+     * @param predecessorIds The complete set of predecessor id including those
+     * that have been added in order to resolve a merge conflict.
+     * Add the given version label in the persistent layer.
+     *
-     * @param versionHistoryId
-     * @param versionId
-     * @param label
-     * @param moveLabel
+     * @param versionHistoryId <code>NodeId</code> identifying the version
+     * history the version identified by <code>versionId</code> belongs to.
+     * @param versionId <code>NodeId</code> identifying the version the
+     * label belongs to.
+     * @param label The label to be added.
+     * @param moveLabel If the label is already assigned to a version within
+     * the same version history this parameter has the following effect: If <code>true</code>
+     * the label already present gets moved to be now be a label of the version
+     * indicated by <code>versionId</code>. If <code>false</code> this method
+     * fails and the label remains with the original version.
+     * Remove the given version label in the persistent layer.
+     *
-     * @param versionHistoryId
-     * @param versionId
-     * @param label
+     * @param versionHistoryId <code>NodeId</code> identifying the version
+     * history the version identified by <code>versionId</code> belongs to.
+     * @param versionId <code>NodeId</code> identifying the version the
+     * label belongs to.
+     * @param label The label to be removed.
+     * Execute the given query statement with the specified query language. The
+     * additional <code>namespaces</code> parameter provides a mapping of prefix
+     * to namespace uri in order to be able to properly resolve prefix:localname
+     * patterns present within the query statement.
+     *
-     * @param statement
-     * @param language
-     * @param namespaces  the locally re-mapped namespace which may be used in
-     *                    the query <code>statement</code>.
+     * @param statement the query statement to be execute.
+     * @param language the query language used to parse the query <code>statement</code>.
+     * @param namespaces the locally re-mapped namespace which may be used in
+     * the query <code>statement</code>.
-     * Register a new namespace with the given prefix and uri
+     * Register a new namespace with the given prefix and uri.
-     * @param prefix
-     * @param uri
+     * @param prefix Prefix of the namespace to be registered.
+     * @param uri Namespace URI to be registered.
-     * Unregister the namespace identified by the given prefix
+     * Unregister the namespace identified by the given uri
-     * @param uri
+     * @param uri Namespace URI to be unregistered.
