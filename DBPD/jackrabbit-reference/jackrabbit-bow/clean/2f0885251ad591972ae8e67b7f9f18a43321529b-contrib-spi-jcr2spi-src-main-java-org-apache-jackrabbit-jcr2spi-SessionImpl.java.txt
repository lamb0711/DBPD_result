Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManager;
+import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyEntry;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
-import org.apache.jackrabbit.jcr2spi.state.NoSuchItemStateException;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateException;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateFactory;
-    private final HierarchyManager hierarchyManager;
-
-        itemStateManager = createSessionItemStateManager(workspace.getUpdatableItemStateManager());
-        hierarchyManager = createHierarchyManager();
-        itemManager = createItemManager();
+        itemStateManager = createSessionItemStateManager(workspace.getUpdatableItemStateManager(), workspace.getItemStateFactory());
+        itemManager = createItemManager(getHierarchyManager());
-        try {
-            ItemState state = getItemStateManager().getRootState();
-            return (Node) itemManager.getItem(state);
-        } catch (ItemStateException e) {
-            String msg = "Failed to retrieve root node.";
-            log.error(msg, e);
-            throw new RepositoryException(msg, e);
-        }
+
+        NodeEntry re = getHierarchyManager().getRootEntry();
+        return (Node) itemManager.getItem(re);
-            ItemState state = getItemStateManager().getItemState(id);
-            Item item = getItemManager().getItem(state);
+            HierarchyEntry hierarchyEntry = getHierarchyManager().getHierarchyEntry(id);
+            Item item = getItemManager().getItem(hierarchyEntry);
-        } catch (AccessDeniedException ade) {
+        } catch (PathNotFoundException e) {
-        } catch (NoSuchItemStateException e) {
+        } catch (AccessDeniedException e) {
-        } catch (ItemStateException e) {
-            String msg = "Failed to retrieve item state of item " + id;
-            log.error(msg, e);
-            throw new RepositoryException(msg, e);
-            log.warn("Unable to remove lock token '" +lt+ "' from this session.", e);
+            log.warn("Unable to remove lock token '" +lt+ "' from this session. (" + e.getMessage() + ")");
-    protected SessionItemStateManager createSessionItemStateManager(UpdatableItemStateManager workspaceStateManager) throws RepositoryException {
-        return new SessionItemStateManager(workspaceStateManager, getIdFactory(), getValidator(), getQValueFactory());
+    protected SessionItemStateManager createSessionItemStateManager(UpdatableItemStateManager workspaceStateManager, ItemStateFactory isf) throws RepositoryException {
+        return new SessionItemStateManager(workspaceStateManager, getValidator(), getQValueFactory(), isf);
-
-    protected HierarchyManager createHierarchyManager() {
-        return new HierarchyManagerImpl(getItemStateManager(), getNamespaceResolver());
-    }
-
-    protected ItemManager createItemManager() {
-        return new ItemManagerImpl(getHierarchyManager(), this);
+    
+    protected ItemManager createItemManager(HierarchyManager hierarchyManager) {
+        return new ItemManagerImpl(hierarchyManager, this);
+    /**
+     * @see ManagerProvider#getNamespaceResolver()
+     */
+    /**
+     * @see ManagerProvider#getHierarchyManager()
+     */
-        return hierarchyManager;
+        return workspace.getHierarchyManager();
-    public ItemStateManager getItemStateManager() {
-        return itemStateManager;
-    }
-
+    /**
+     * @see ManagerProvider#getLockManager()
+     */
+     * @see ManagerProvider#getAccessManager()
+     * @see ManagerProvider#getVersionManager()
