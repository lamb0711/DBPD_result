- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

+import EDU.oswego.cs.dl.util.concurrent.FIFOReadWriteLock;
+import org.apache.log4j.Logger;
-import org.apache.lucene.search.Query;
-import org.apache.log4j.Logger;
-//import org.apache.lucene.search.Sort;
-//import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.Query;
-import EDU.oswego.cs.dl.util.concurrent.FIFOReadWriteLock;
-
- * @author Marcel Reutegger
- * @version $Revision:  $, $Date:  $
-    /** 512k default size */
+    /**
+     * 512k default size
+     */
-	//volatileIndex = new VolatileIndex(analyzer);
-	persistentIndex = new PersistentIndex(location, analyzer);
-	persistentIndex.setUseCompoundFile(true);
-	this.location = location;
-	this.analyzer = analyzer;
+        //volatileIndex = new VolatileIndex(analyzer);
+        persistentIndex = new PersistentIndex(location, analyzer);
+        persistentIndex.setUseCompoundFile(true);
+        this.location = location;
+        this.analyzer = analyzer;
-	try {
-	    readWriteLock.writeLock().acquire();
-	} catch (InterruptedException e) {
-	    // FIXME: ??? do logging, simply return?
-	    return;
-	}
+        try {
+            readWriteLock.writeLock().acquire();
+        } catch (InterruptedException e) {
+            // FIXME: ??? do logging, simply return?
+            return;
+        }
-	try {
-	    persistentIndex.addDocument(doc);
-	} finally {
-	    readWriteLock.writeLock().release();
-	}
+        try {
+            persistentIndex.addDocument(doc);
+        } finally {
+            readWriteLock.writeLock().release();
+        }
-	/*
-	volatileIndex.addDocument(doc);
-	if (volatileIndex.size() > mergeSize) {
-	    persistentIndex.mergeIndex(volatileIndex);
-	    // create new volatile index
-	    volatileIndex = new VolatileIndex(analyzer);
-	}
-	*/
+        /*
+        volatileIndex.addDocument(doc);
+        if (volatileIndex.size() > mergeSize) {
+            persistentIndex.mergeIndex(volatileIndex);
+            // create new volatile index
+            volatileIndex = new VolatileIndex(analyzer);
+        }
+        */
-	try {
-	    readWriteLock.writeLock().acquire();
-	} catch (InterruptedException e) {
-	    // FIXME: ??? do logging, simply return?
-	    return;
-	}
+        try {
+            readWriteLock.writeLock().acquire();
+        } catch (InterruptedException e) {
+            // FIXME: ??? do logging, simply return?
+            return;
+        }
-	try {
-	    persistentIndex.removeDocument(idTerm);
-	} finally {
-	    readWriteLock.writeLock().release();
-	}
+        try {
+            persistentIndex.removeDocument(idTerm);
+        } finally {
+            readWriteLock.writeLock().release();
+        }
-	//volatileIndex.removeDocument(idTerm);
+        //volatileIndex.removeDocument(idTerm);
-	/*
-	try {
-	    persistentIndex.mergeIndex(volatileIndex);
-	} catch (IOException e) {
-	    // FIXME do logging
-	}
-	volatileIndex.close();
-	*/
-	log.info("Closing index: " + location);
-    	persistentIndex.close();
+        /*
+        try {
+            persistentIndex.mergeIndex(volatileIndex);
+        } catch (IOException e) {
+            // FIXME do logging
+        }
+        volatileIndex.close();
+        */
+        log.info("Closing index: " + location);
+        persistentIndex.close();
-			     String[] orderProps,
-			     boolean ascending) throws IOException {
+                             String[] orderProps,
+                             boolean ascending) throws IOException {
-	    readWriteLock.readLock().acquire();
-	} catch (InterruptedException e) {
-	    // FIXME: ??? do logging, simply return?
-	    return null;
-	}
+            readWriteLock.readLock().acquire();
+        } catch (InterruptedException e) {
+            // FIXME: ??? do logging, simply return?
+            return null;
+        }
-	/*
-	SortField[] sortFields = new SortField[orderProps.length];
-	for (int i = 0; i < orderProps.length; i++) {
-	    sortFields[i] = new SortField(orderProps[i], SortField.STRING, !ascending);
-	}
-        */
-	Hits hits = null;
-	try {
-	    hits = persistentIndex.getIndexSearcher().search(query
-		    /*, new Sort(sortFields) */);
-	} finally {
-	    readWriteLock.readLock().release();
-	}
+        /*
+        SortField[] sortFields = new SortField[orderProps.length];
+        for (int i = 0; i < orderProps.length; i++) {
+            sortFields[i] = new SortField(orderProps[i], SortField.STRING, !ascending);
+        }
+*/
+        Hits hits = null;
+        try {
+            hits = persistentIndex.getIndexSearcher().search(query
+                    /*, new Sort(sortFields) */);
+        } finally {
+            readWriteLock.readLock().release();
+        }
-	return hits;
+        return hits;
-	return analyzer;
+        return analyzer;
