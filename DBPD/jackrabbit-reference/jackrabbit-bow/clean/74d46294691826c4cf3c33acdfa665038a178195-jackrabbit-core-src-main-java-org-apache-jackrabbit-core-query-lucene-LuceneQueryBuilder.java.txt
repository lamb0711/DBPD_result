JCR-2836: Unclosed threads in Jackrabbit

Remove the use of ThreadLocal variables in PerQueryCache to avoid leaking memory in container environments.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1055117 13f79535-47bb-0310-9956-ffa450edef68

+    private final PerQueryCache cache;
+
-                               IndexFormatVersion indexFormatVersion) {
+                               IndexFormatVersion indexFormatVersion,
+                               PerQueryCache cache) {
+        this.cache = cache;
-                                    IndexFormatVersion indexFormatVersion)
+                                    IndexFormatVersion indexFormatVersion,
+                                    PerQueryCache cache)
-                analyzer, propReg, synonymProvider, indexFormatVersion);
+                analyzer, propReg, synonymProvider, indexFormatVersion,
+                cache);
-                    fieldname, analyzer, synonymProvider);
+                    fieldname, analyzer, synonymProvider, cache);
-                Query refPropQuery = Util.createMatchAllQuery(refProperty, indexFormatVersion);
+                Query refPropQuery = Util.createMatchAllQuery(refProperty, indexFormatVersion, cache);
-                            transform[0], session, nsMappings);
+                            transform[0], session, nsMappings, cache);
-                        or.add(new RangeQuery(lower, upper, true, transform[0]), Occur.SHOULD);
+                        or.add(new RangeQuery(lower, upper, true, transform[0], cache), Occur.SHOULD);
-                        or.add(new RangeQuery(lower, upper, false, transform[0]), Occur.SHOULD);
+                        or.add(new RangeQuery(lower, upper, false, transform[0], cache), Occur.SHOULD);
-                        or.add(new RangeQuery(lower, upper, true, transform[0]), Occur.SHOULD);
+                        or.add(new RangeQuery(lower, upper, true, transform[0], cache), Occur.SHOULD);
-                        query = Util.createMatchAllQuery(field, indexFormatVersion);
+                        query = Util.createMatchAllQuery(field, indexFormatVersion, cache);
-                        query = new WildcardQuery(FieldNames.PROPERTIES, field, stringValues[0], transform[0]);
+                        query = new WildcardQuery(FieldNames.PROPERTIES, field, stringValues[0], transform[0], cache);
-                        or.add(new RangeQuery(lower, upper, false, transform[0]), Occur.SHOULD);
+                        or.add(new RangeQuery(lower, upper, false, transform[0], cache), Occur.SHOULD);
-                    notQuery.add(Util.createMatchAllQuery(field, indexFormatVersion), Occur.SHOULD);
+                    notQuery.add(Util.createMatchAllQuery(field, indexFormatVersion, cache), Occur.SHOULD);
-                    notQuery.add(Util.createMatchAllQuery(field, indexFormatVersion), Occur.SHOULD);
+                    notQuery.add(Util.createMatchAllQuery(field, indexFormatVersion, cache), Occur.SHOULD);
-                    query = new NotQuery(Util.createMatchAllQuery(field, indexFormatVersion));
+                    query = new NotQuery(Util.createMatchAllQuery(field, indexFormatVersion, cache));
-                    query = Util.createMatchAllQuery(field, indexFormatVersion);
+                    query = Util.createMatchAllQuery(field, indexFormatVersion, cache);
-                    query = Util.createMatchAllQuery(field, indexFormatVersion);
+                    query = Util.createMatchAllQuery(field, indexFormatVersion, cache);
