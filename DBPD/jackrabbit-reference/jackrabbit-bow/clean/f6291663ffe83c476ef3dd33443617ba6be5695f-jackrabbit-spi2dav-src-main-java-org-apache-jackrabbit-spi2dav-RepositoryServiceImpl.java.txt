JCR-2028: JSR 283 JCR Path

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772659 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.conversion.IdentifierResolver;
-
+    //----------------------------------------------< NamespaceResolverImpl >---
+    /**
+     * NamespaceResolver implementation that uses a sessionInfo to determine
+     * namespace mappings either from cache or from the server.
+     */
+    //---------------------------------------------< IdentifierResolverImpl >---
+    private class IdentifierResolverImpl implements IdentifierResolver {
+
+        private final SessionInfo sessionInfo;
+        
+        private IdentifierResolverImpl(SessionInfo sessionInfo) {
+            this.sessionInfo = sessionInfo;
+        }
+
+        private Path buildPath(String uniqueID) throws RepositoryException {
+            String uri = uriResolver.getItemUri(getIdFactory().createNodeId(uniqueID), sessionInfo.getWorkspaceName(), sessionInfo);
+            return uriResolver.getQPath(uri, sessionInfo);
+        }
+
+        private Path resolvePath(String jcrPath) throws RepositoryException {
+            return ((SessionInfoImpl) sessionInfo).getNamePathResolver().getQPath(jcrPath);
+        }
+        
+        /**
+         * @inheritDoc
+         */
+        public Path getPath(String identifier) throws MalformedPathException {
+            try {
+                int pos = identifier.indexOf('/');
+                if (pos == -1) {
+                    // unique id identifier
+                    return buildPath(identifier);
+                } else if (pos == 0) {
+                    // jcr-path identifier
+                    return resolvePath(identifier);
+                } else {
+                    Path p1 = buildPath(identifier.substring(0, pos));
+                    Path p2 = resolvePath(identifier.substring(pos));
+                    return getPathFactory().create(p1, p2, true);
+                }
+            } catch (RepositoryException e) {
+                throw new MalformedPathException(identifier);
+            }
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public void checkFormat(String identifier) throws MalformedPathException {
+            // cannot be determined. assume ok.
+        }
+    }
-            pResolver = new ParsingPathResolver(getPathFactory(), nResolver);
+            IdentifierResolver idResolver = new IdentifierResolverImpl(sessionInfo);
+            pResolver = new ParsingPathResolver(getPathFactory(), nResolver, idResolver);
+        public Path getQPath(String path, boolean normalizeIdentifier) throws MalformedPathException, IllegalNameException, NamespaceException {
+            return pResolver.getQPath(path, normalizeIdentifier);
+        }
+
+        /**
+         * @inheritDoc
+         */
+    /**
+     * Namespace Cache
+     */
