Optimize queries with 'order by' clause

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@264730 13f79535-47bb-0310-9956-ffa450edef68

+ * <p/>
+ * <b>Important:</b> The ScoreDocComparator returned by {@link #newComparator}
+ * does not implement the contract for {@link ScoreDocComparator#sortValue(ScoreDoc)}
+ * properly. The method will always return an empty String to save memory consumption
+ * on large property ranges. Those values are only of relevance when queries
+ * are executed with a <code>MultiSearcher</code>, which is currently not the
+ * case in Jackrabbit.
-    public ScoreDocComparator newComparator(IndexReader reader, String propertyName)
+    public ScoreDocComparator newComparator(final IndexReader reader, String propertyName)
-            public final int compare (final ScoreDoc i, final ScoreDoc j) {
-              final int fi = index.order[i.doc];
-              final int fj = index.order[j.doc];
-              if (fi < fj) {
-                  return -1;
-              } else if  (fi > fj) {
-                  return 1;
-              } else {
-                  return 0;
-              }
+            public final int compare(final ScoreDoc i, final ScoreDoc j) {
+                final int fi = index.order[i.doc];
+                final int fj = index.order[j.doc];
+                if (fi < fj) {
+                    return -1;
+                } else if (fi > fj) {
+                    return 1;
+                } else {
+                    return 0;
+                }
-            public Comparable sortValue (final ScoreDoc i) {
-              return index.lookup[index.order[i.doc]];
+            /**
+             * Always returns an empty String.
+             * @param i the score doc.
+             * @return an empty String.
+             */
+            public Comparable sortValue(final ScoreDoc i) {
+                // return dummy value
+                return "";
