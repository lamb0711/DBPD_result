Simplify ChildNodeEntries in NodeState.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431870 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ListIterator;
-     * Returns a list of child node entries that do not exist in the overlayed
-     * node state but have been added to <i>this</i> node state.
+     * Returns a collection of child node entries that do not exist in the
+     * overlayed node state but have been added to <i>this</i> node state.
-     * @return list of added child node entries
+     * @return collection of added child node entries
-    public synchronized List getAddedChildNodeEntries() {
+    public synchronized Collection getAddedChildNodeEntries() {
-     * Returns a list of child node entries, that exist in the overlayed node state
+     * Returns a collection of child node entries, that exist in the overlayed node state
-     * @return list of removed child node entries
+     * @return collection of removed child node entries
-    public synchronized List getRemovedChildNodeEntries() {
+    public synchronized Collection getRemovedChildNodeEntries() {
+
-    private class ChildNodeEntries implements List, Cloneable {
+    private class ChildNodeEntries implements Collection {
-         * Returns a list of <code>ChildNodeEntry</code>s who do only exist in
+         * Returns a Collection of <code>ChildNodeEntry</code>s who do only exist in
-        List removeAll(ChildNodeEntries other) {
+        Collection removeAll(ChildNodeEntries other) {
-        public Object get(int index) {
-            return entries.getValue(index);
-        }
-
-        public int indexOf(Object o) {
-            if (o instanceof ChildNodeEntry) {
-                return entries.indexOf(((ChildNodeEntry) o).getId());
-            } else {
-                return -1;
-            }
-        }
-
-        public int lastIndexOf(Object o) {
-            // entries are unique
-            return indexOf(o);
-        }
-
-        public ListIterator listIterator() {
-            return new EntriesIterator();
-        }
-
-        public ListIterator listIterator(int index) {
-            if (index < 0 || index >= entries.size()) {
-                throw new IndexOutOfBoundsException();
-            }
-            ListIterator iter = new EntriesIterator();
-            while (index-- > 0) {
-                iter.next();
-            }
-            return iter;
-        }
-
-        public List subList(int fromIndex, int toIndex) {
-            // @todo FIXME does not fulfil the contract of List.subList(int,int)
-            return Collections.unmodifiableList(new ArrayList(this).subList(fromIndex, toIndex));
-        }
-
-        public void add(int index, Object element) {
-            throw new UnsupportedOperationException();
-        }
-
-        public boolean addAll(int index, Collection c) {
-            throw new UnsupportedOperationException();
-        }
-
-        public Object remove(int index) {
-            throw new UnsupportedOperationException();
-        }
-
-        public boolean remove(Object o) {
+       public boolean remove(Object o) {
-        public Object set(int index, Object element) {
-            throw new UnsupportedOperationException();
-        }
-
-        //------------------------------------------------< Cloneable support >
-        /**
-         * Returns a shallow copy of this <code>ChildNodeEntries</code> instance;
-         * the entries themselves are not cloned.
-         *
-         * @return a shallow copy of this instance.
-         */
-        protected Object clone() {
-            ChildNodeEntries clone = new ChildNodeEntries();
-            clone.entries = (LinkedMap) entries.clone();
-            clone.nameMap = new HashMap(nameMap.size());
-            for (Iterator it = nameMap.keySet().iterator(); it.hasNext();) {
-                Object key = it.next();
-                Object obj = nameMap.get(key);
-                if (obj instanceof ArrayList) {
-                    // clone List
-                    obj = ((ArrayList) obj).clone();
-                }
-                clone.nameMap.put(key, obj);
-            }
-            return clone;
-        }
-
-        class EntriesIterator implements ListIterator {
+
+        class EntriesIterator implements Iterator {
-            public boolean hasPrevious() {
-                return mapIter.hasPrevious();
-            }
-
-            public int nextIndex() {
-                return entries.indexOf(mapIter.getKey()) + 1;
-            }
-
-            public Object previous() {
-                mapIter.previous();
-                return mapIter.getValue();
-            }
-
-            public int previousIndex() {
-                return entries.indexOf(mapIter.getKey()) - 1;
-            }
-
-            public void add(Object o) {
-                throw new UnsupportedOperationException();
-            }
-
-
-            public void set(Object o) {
-                throw new UnsupportedOperationException();
-            }
