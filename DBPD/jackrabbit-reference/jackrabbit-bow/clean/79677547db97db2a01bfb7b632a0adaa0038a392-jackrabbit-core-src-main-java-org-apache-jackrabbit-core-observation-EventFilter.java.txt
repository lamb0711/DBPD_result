JCR-3747: Implement JackrabbitObservationManager
Initial implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1577244 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.List;
+import javax.jcr.RepositoryException;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.observation.Event;
+
-import javax.jcr.RepositoryException;
-import javax.jcr.nodetype.NodeType;
-import javax.jcr.observation.Event;
-
-     * Only allow Items with the specified <code>path</code>
+     * Only allow Items with the specified <code>paths</code>
-    private final Path path;
+    private final List<Path> paths;
+     * If <code>noExternal</code> is true this filter will block events from
+     * other cluster nodes.
+     */
+    private final boolean noExternal;
+
+    /**
-     * @param path       only allow {@link javax.jcr.Item} with
-     *                   <code>path</code>.
+     * @param paths      only allow {@link javax.jcr.Item} with a path in
+     *                   <code>paths</code>.
-                Path path,
+                List<Path> paths,
-                boolean noLocal) {
+                boolean noLocal,
+                boolean noExternal) {
-        this.path = path;
+        this.paths = paths;
+        this.noExternal = noExternal;
+        if (noExternal && eventState.isExternal()) {
+            return true;
+        }
+
-        // finally check path
+        // finally check paths
-        boolean match = eventPath.equals(path);
-        if (!match && isDeep) {
-            match = eventPath.isDescendantOf(path);
+        boolean match = false;
+        for (Path path : paths) {
+            if (eventPath.equals(path) || isDeep && eventPath.isDescendantOf(path)) {
+                match = true;
+                break;
+            }
-            super(null, 0, null, true, null, null, true);
+            super(null, 0, Collections.<Path>emptyList(), true, null, null, true, true);
