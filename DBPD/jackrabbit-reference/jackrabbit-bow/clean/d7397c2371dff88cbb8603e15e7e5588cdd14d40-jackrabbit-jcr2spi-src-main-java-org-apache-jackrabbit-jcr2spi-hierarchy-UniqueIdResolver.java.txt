JCR-1819 : Add specific deep loading of Nodes and Properties
JCR-1843 : wrong status change upon conflicting removal (CacheBehaviour.OBSERVATION)
JCR-1293 : ReorderReferenceableSNSTest failure
JCR-1811 : ExportSysViewTest#testExportSysView_handler_session_saveBinary_occasionally failing


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@709211 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-    public NodeEntry lookup(NodeId nodeId) {
-        if (nodeId.getPath() != null) {
+    public NodeEntry lookup(String uniqueId) {
+        if (uniqueId == null) {
-        NodeEntry entry = (NodeEntry) lookUp.get(nodeId.getUniqueID());
-        return (entry != null) ? entry : null;
+        return (NodeEntry) lookUp.get(uniqueId);
-        NodeEntry entry = lookup(nodeId);
+        NodeEntry entry = lookup(nodeId.getUniqueID());
-        if (Status.isTerminal(state.getStatus())) {
-            if (state.isNode()) {
-                NodeState nodeState = (NodeState) state;
-                String uniqueID = nodeState.getUniqueID();
-                if (uniqueID != null) {
-                    lookUp.remove(uniqueID);
+        synchronized (lookUp) {
+            if (Status.isTerminal((state.getStatus()))) {
+                if (state.isNode()) {
+                    NodeEntry entry = (NodeEntry) state.getHierarchyEntry();
+                    String uniqueID = entry.getUniqueID();
+                    if (uniqueID != null) {
+                        NodeEntry mapEntry = (NodeEntry) lookUp.get(uniqueID);
+                        if (mapEntry == entry) {
+                            lookUp.remove(uniqueID);
+                        } // else: removed entry is not present in lookup but
+                          //       only it's replacement -> ignore
+                    }
-            }
-            state.removeListener(this);
-        } else {
-            putToCache(state);
+                // stop listening if a state reached status REMOVED.
+                if (Status.REMOVED == state.getStatus()) {
+                    state.removeListener(this);
+                }
+            } // else: any other status than REMOVED -> ignore.
-     * Updates the internal id-lookup if the created state is a NodeState that
-     * is identified by a uniqueID.
+     * Nothing to do. The lookUp is filled entry creation and/or modification
+     * of its uniqueID
-        putToCache(state);
+        if (state.isNode()) {
+            NodeEntry entry = (NodeEntry) state.getHierarchyEntry();
+            String uniqueID = entry.getUniqueID();
+            if (uniqueID != null) {
+                if (!lookUp.containsKey(uniqueID) || lookUp.get(uniqueID) != entry) {
+                    log.error("Created NodeState identified by UniqueID that is not contained in the lookup.");
+                }
+            }
+        }
-                // get an previous entry first and remove it before adding the
-                // new one. otherwise the newly added entry will be removed
-                // again upon removal of the original entry.
-                Object previous = lookUp.get(uniqueID);
-                if (previous != null) {
-                    lookUp.remove(uniqueID);
-                    ((NodeEntry) previous).remove();
-                }
-                lookUp.put(uniqueID, entry);
+                putToLookup(uniqueID, entry);
-                if (previous != entry) {
-                    // changed entry was not in this cache -> return.
-                    return;
-                } else {
+                if (previous == entry) {
-                }
+                } // else: previousUniqueID points to another entry -> ignore
-                Object previous = lookUp.put(uniqueID, entry);
-                if (previous != null && previous != entry) {
-                    // some other entry existed before with the same uniqueID
-                    ((NodeEntry) previous).remove();
-                }
+                putToLookup(uniqueID, entry);
-    //------------------------------------------------------------< private >---
-    /**
-     * Put the given <code>ItemState</code> in the internal cache.
-     *
-     * @param state
-     */
-    private void putToCache(ItemState state) {
-        if (!state.isNode()) {
-            return;
-        }
-        if (state.getStatus() == Status.EXISTING || state.getStatus() == Status.MODIFIED) {
-            NodeEntry entry = ((NodeState)state).getNodeEntry();
-            // NOTE: uniqueID is retrieved from the state and not from the NodeId.
-            String uniqueID = entry.getUniqueID();
-            synchronized (lookUp) {
-                if (uniqueID != null) {
-                    if (lookUp.get(uniqueID) != entry) {
-                        lookUp.put(uniqueID, entry);
-                    }
-                } else {
-                    // ev. uniqueID was removed -> remove the entry from the lookUp
-                    if (lookUp.containsValue(entry)) {
-                        for (Iterator it = lookUp.entrySet().iterator(); it.hasNext();) {
-                            Map.Entry next = (Map.Entry) it.next();
-                            if (next.getValue() == entry) {
-                                it.remove();
-                                break;
-                            }
-                        }
-                    }
+    //------------------------------------------------------------< private >---
+    private void putToLookup(String uniqueID, NodeEntry entry) {
+        Object previous = lookUp.put(uniqueID, entry);
+        if (previous != null) {
+            // some other entry existed before with the same uniqueID
+            if (!sameEntry((NodeEntry) previous, entry)) {
+                // if the new entry represents the externally moved/renamed
+                // correspondance of the previous the latter needs to marked
+                // removed/stale-destroyed.
+                // otherwise (both represent the same entry) the creation
+                // of entry is the result of gc of the node or any of the
+                // ancestors. in this case there is not need to 'remove'
+                // the previous entry. instead it is just removed from this
+                // cache and left for collection.
+                ((NodeEntry) previous).remove();
+            } else {
+                log.debug("Replacement of NodeEntry identified by UniqueID");
+            }
+        }
+    }
+
+    private static boolean sameEntry(NodeEntry previous, NodeEntry entry) {
+        if (previous == entry) {
+            return true;
+        } else if (Status.REMOVED != previous.getStatus() &&
+                previous.getName().equals(entry.getName())) {
+
+            NodeEntry parent = previous.getParent();
+            NodeEntry parent2 = entry.getParent();
+            if (parent == parent2) {
+                return true;
+            } else {
+                try {
+                    return parent.getPath().equals(parent2.getPath());
+                } catch (RepositoryException e) {
+                    // TODO: add some fallback
+        return false;
