JCR-3117 Stats for the PersistenceManager

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1186195 13f79535-47bb-0310-9956-ffa450edef68

-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
-import org.apache.jackrabbit.core.state.ItemState;
+import org.apache.jackrabbit.core.state.ItemState;
-import org.apache.jackrabbit.core.state.NodeReferences;
-import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.state.NodeReferences;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.stats.PersistenceManagerStatCore;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+    /** statistics object */
+    private PersistenceManagerStatCore pmStatCore;
+
+        pmStatCore = context.getPersistenceManagerStatCore();
-        } else if (bundle == null) {
-            bundle = loadBundle(id);
-            if (bundle != null) {
-                bundle.markOld();
-                bundles.put(id, bundle, bundle.getSize());
-            } else {
-                bundles.put(id, MISSING, 16);
+        }
+        if (bundle != null) {
+            return bundle;
+        }
+        // cache miss
+        if (pmStatCore != null && pmStatCore.isEnabled()) {
+            long t = System.currentTimeMillis();
+            try {
+                return getBundleCacheMiss(id);
+            } finally {
+                t = System.currentTimeMillis() - t;
+                pmStatCore.onReadCacheMiss(t);
+        } else {
+            return getBundleCacheMiss(id);
+        }
+    }
+
+    /**
+     * Called when the bundle is not present in the cache, so we'll need to load
+     * it from the PM impl.
+     * 
+     * This also updates the cache.
+     * 
+     * @param id
+     * @return
+     * @throws ItemStateException
+     */
+    private NodePropBundle getBundleCacheMiss(NodeId id)
+            throws ItemStateException {
+        NodePropBundle bundle = loadBundle(id);
+        if (bundle != null) {
+            bundle.markOld();
+            bundles.put(id, bundle, bundle.getSize());
+        } else {
+            bundles.put(id, MISSING, 16);
+
+        long time = System.currentTimeMillis();
-        log.debug("stored bundle {}", bundle.getId());
+        log.debug("stored bundle {} in {} ms", new Object[] { bundle.getId(),
+                System.currentTimeMillis() - time });
+        if (pmStatCore != null && pmStatCore.isEnabled()) {
+            pmStatCore.onBundleWrite(System.currentTimeMillis() - time);
+        }
+        pmStatCore.cacheAccessed(accessCount);
