Removed JDOM dependency from nodetype XML handling (JCR-54)
 - converted all JDOM references to the equivalent standard DOM code
 - Moved the rest of XML references out of the NodeTypeDefStore class
 - Added the NodeTypeFormatter facade class
 - Made a number of small changes and restructurings to better match the DOM API
 - Added a mostly complete test case in src/test/o.a.j/core/nodetype/xml
   (the tests in .../test/api/nodetype are more concerned with the nodetype
   API than the XML handling)
 - Added a simple ValueConstraint.equals() method to simplify the test cases
   (fixes a problem in NodeTypeDef.equals())


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157940 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
-import org.jdom.Element;
+import org.w3c.dom.Element;
-    /** Name of the property definition element. */
-    public static final String PROPERTYDEF_ELEMENT = "propertyDef";
-
-    private PropDefFormat(
+    protected PropDefFormat(
-     * Creates a property definition reader. The internal property
-     * definition instance is created using the given node type name
-     * as the name of the declaring node type.
-     *
-     * @param resolver namespace resolver
-     * @param element property definition element
-     */
-    public PropDefFormat(NamespaceResolver resolver, Element element) {
-        this(resolver, element, new PropDef());
-    }
-
-    /**
-     * Creates a property definition writer. The internal property
-     * definition element is instantiated as an empty <code>propertyDef</code>
-     * element.
-     *
-     * @param resolver namespace resolver
-     * @param def property definition
-     */
-    public PropDefFormat(NamespaceResolver resolver, PropDef def) {
-        this(resolver, new Element(PROPERTYDEF_ELEMENT), def);
-    }
-
-    /**
-     * Returns the property definition instance.
-     *
-     * @return property definition
-     */
-    public PropDef getPropDef() {
-        return def;
-    }
-
-    /**
-     *                                    definition element is invalid
+     *                                     definition element is invalid
-    public void read(QName type) throws InvalidNodeTypeDefException {
+    protected void read(QName type) throws InvalidNodeTypeDefException {
-    public void write() {
+    protected void write() {
-     *                                    definition element is invalid
+     *                                     definition element is invalid
-     *                                    definition element is invalid
+     *                                      definition element is invalid
-        Vector vector = new Vector();
-
-        Element constraints = getChild(VALUECONSTRAINTS_ELEMENT);
+        Collection constraints = getGrandChildContents(
+                VALUECONSTRAINTS_ELEMENT, VALUECONSTRAINT_ELEMENT);
-            int type = def.getRequiredType();
+            Vector vector = new Vector();
-            Iterator iterator =
-                constraints.getChildren(VALUECONSTRAINT_ELEMENT).iterator();
+            int type = def.getRequiredType();
+            Iterator iterator = constraints.iterator();
-                Element constraint = (Element) iterator.next();
-                String value = constraint.getTextTrim();
+                String constraint = (String) iterator.next();
-                            type, value, getNamespaceResolver()));
+                            type, constraint, getNamespaceResolver()));
-                            "Invalid property value constraint " + value, e);
+                            "Invalid value constraint " + constraint, e);
-        }
-        def.setValueConstraints(
-                (ValueConstraint[]) vector.toArray(new ValueConstraint[0]));
+            def.setValueConstraints(
+                    (ValueConstraint[]) vector.toArray(new ValueConstraint[0]));
+        }
-        Element values = new Element(VALUECONSTRAINTS_ELEMENT);
-
-        for (int i = 0; i < constraints.length; i++) {
-            Element value = new Element(VALUECONSTRAINT_ELEMENT);
-            value.setText(constraints[i].getDefinition());
-            values.addContent(value);
+        if (constraints != null && constraints.length > 0) {
+            Vector values = new Vector();
+            for (int i = 0; i < constraints.length; i++) {
+                values.add(constraints[i].getDefinition());
+            }
+            setGrandChildContents(
+                    VALUECONSTRAINTS_ELEMENT, VALUECONSTRAINT_ELEMENT, values);
-
-        addChild(values);
-        Vector vector = new Vector();
+        Collection defaults = getGrandChildContents(
+                DEFAULTVALUES_ELEMENT, DEFAULTVALUE_ELEMENT);
+        if (defaults != null) {
+            Vector vector = new Vector();
-        Element values = getChild(DEFAULTVALUES_ELEMENT);
-        if (values != null) {
-
-            Iterator iterator =
-                values.getChildren(DEFAULTVALUE_ELEMENT).iterator();
+            Iterator iterator = defaults.iterator();
-                Element value = (Element) iterator.next();
-                vector.add(InternalValue.valueOf(value.getTextTrim(), type));
+                String value = (String) iterator.next();
+                vector.add(InternalValue.valueOf(value, type));
-        }
-        def.setDefaultValues(
-                (InternalValue[]) vector.toArray(new InternalValue[0]));
+            def.setDefaultValues(
+                    (InternalValue[]) vector.toArray(new InternalValue[0]));
+        }
-        Element values = new Element(DEFAULTVALUES_ELEMENT);
-
-        for (int i = 0; i < defaults.length; i++) {
-            Element value = new Element(DEFAULTVALUE_ELEMENT);
-            value.setText(defaults[i].toString());
-            values.addContent(value);
+        if (defaults != null && defaults.length > 0) {
+            Vector values = new Vector();
+            for (int i = 0; i < defaults.length; i++) {
+                values.add(defaults[i].toString());
+            }
+            setGrandChildContents(
+                    DEFAULTVALUES_ELEMENT, DEFAULTVALUE_ELEMENT, values);
-
-        addChild(values);
-     *                                    definition element is invalid
+     *                                     definition element is invalid
