grouped frequently used constants scattered around in various source files into Constants interface

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153503 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.InternalValue;
-import org.apache.jackrabbit.core.NamespaceRegistryImpl;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.QName;
-import org.apache.jackrabbit.core.state.UpdatableItemStateManager;
+import org.apache.jackrabbit.core.*;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
+import org.apache.jackrabbit.core.state.UpdatableItemStateManager;
-import org.apache.jackrabbit.core.version.*;
+import org.apache.jackrabbit.core.version.InternalVersion;
+import org.apache.jackrabbit.core.version.InternalVersionHistory;
+import org.apache.jackrabbit.core.version.InternalVersionItem;
+import org.apache.jackrabbit.core.version.PersistentVersionManager;
-class InternalVersionHistoryImpl extends InternalVersionItemImpl implements InternalVersionHistory {
+class InternalVersionHistoryImpl extends InternalVersionItemImpl
+        implements InternalVersionHistory, Constants {
-            PersistentNode lNode = labelNode.addNode(label, NodeTypeRegistry.NT_UNSTRUCTURED);
+            PersistentNode lNode = labelNode.addNode(label, NT_UNSTRUCTURED);
-        Value[] preds = src.getProperty(VersionManager.PROPNAME_PREDECESSORS).getValues();
+        Value[] preds = src.getProperty(JCR_PREDECESSORS).getValues();
-        QName nodeName = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, versionId);
+        QName nodeName = new QName(NS_DEFAULT_URI, versionId);
-        vNode.setPropertyValue(VersionManager.PROPNAME_CREATED, InternalValue.create(Calendar.getInstance()));
-        vNode.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.STRING, predecessors);
+        vNode.setPropertyValue(JCR_CREATED, InternalValue.create(Calendar.getInstance()));
+        vNode.setPropertyValues(JCR_PREDECESSORS, PropertyType.STRING, predecessors);
-        InternalFrozenNodeImpl.checkin(vNode, VersionManager.NODENAME_FROZEN, src, false, false);
+        InternalFrozenNodeImpl.checkin(vNode, JCR_FROZENNODE, src, false, false);
-        pNode.addNode(NativePVM.NODENAME_VERSION_LABELS, NodeTypeRegistry.NT_UNSTRUCTURED);
+        pNode.addNode(NativePVM.NODENAME_VERSION_LABELS, NT_UNSTRUCTURED);
-        QName nodeName = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, versionId);
+        QName nodeName = new QName(NS_DEFAULT_URI, versionId);
-        vNode.setPropertyValue(NativePVM.PROPNAME_VERSION_NAME, InternalValue.create(VersionManager.NODENAME_ROOTVERSION));
+        vNode.setPropertyValue(NativePVM.PROPNAME_VERSION_NAME, InternalValue.create(JCR_ROOTVERSION));
-        vNode.setPropertyValue(VersionManager.PROPNAME_CREATED, InternalValue.create(Calendar.getInstance()));
-        vNode.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
+        vNode.setPropertyValue(JCR_CREATED, InternalValue.create(Calendar.getInstance()));
+        vNode.setPropertyValues(JCR_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
-        InternalFrozenNodeImpl.checkin(vNode, VersionManager.NODENAME_FROZEN, src, true, false);
+        InternalFrozenNodeImpl.checkin(vNode, JCR_FROZENNODE, src, true, false);
