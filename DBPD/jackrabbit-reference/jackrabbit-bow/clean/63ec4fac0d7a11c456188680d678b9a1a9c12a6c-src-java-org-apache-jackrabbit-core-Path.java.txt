redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.regex.Pattern;
+import java.util.regex.Pattern;
- * <code>isAbsolute()</code>:<br>
+ * <code>absolute()</code>:<br>
- * <p>
+ * <p/>
- * I.e. is always the opposite of <code>isAbsolute</code>.
- * <p>
- * <code>isNormalized()</code>:<br>
+ * I.e. is always the opposite of <code>absolute</code>.
+ * <p/>
+ * <code>normalized()</code>:<br>
- * <p>
+ * <p/>
- * <p>
- *
+ * <p/>
+ * <p/>
- *
+ * <p/>
- *           path ::= properpath ['/']
- *     properpath ::= abspath | relpath
- *        abspath ::= '/' relpath
- *        relpath ::= [relpath '/'] pathelement
- *    pathelement ::= name ['[' number ']']
- *         number ::= << An integer > 0 >>
- *
- *           name ::= [prefix ':'] simplename
- *         prefix ::= << Any valid XML Name >>
- *     simplename ::= nonspacestring [[string] nonspacestring]
- *         string ::= [string] char
- *           char ::= nonspace | space
+ * path ::= properpath ['/']
+ * properpath ::= abspath | relpath
+ * abspath ::= '/' relpath
+ * relpath ::= [relpath '/'] pathelement
+ * pathelement ::= name ['[' number ']']
+ * number ::= << An integer > 0 >>
+ * <p/>
+ * name ::= [prefix ':'] simplename
+ * prefix ::= << Any valid XML Name >>
+ * simplename ::= nonspacestring [[string] nonspacestring]
+ * string ::= [string] char
+ * char ::= nonspace | space
- *          space ::= << ' ' (the space character) >>
- *       nonspace ::= << Any Unicode character except
- *                    '/', ':', '[', ']', '*',
- *                    '''(the single quote),
- *                    '"'(the double quote),
- *                    any whitespace character >>
+ * space ::= << ' ' (the space character) >>
+ * nonspace ::= << Any Unicode character except
+ * '/', ':', '[', ']', '*',
+ * '''(the single quote),
+ * '"'(the double quote),
+ * any whitespace character >>
-    private final boolean isNormalized;
+    private final boolean normalized;
-    private final boolean isAbsolute;
+    private final boolean absolute;
-        if (elements==null || elements.length==0) {
+        if (elements == null || elements.length == 0) {
-        this.isAbsolute = elements[0].denotesRoot();
-        this.isNormalized = isNormalized;
+        this.absolute = elements[0].denotesRoot();
+        this.normalized = isNormalized;
-            ? parse(jcrPath, null, resolver).getNormalizedPath()
-            : parse(jcrPath, null, resolver);
+                ? parse(jcrPath, null, resolver).getNormalizedPath()
+                : parse(jcrPath, null, resolver);
-            ? pb.getPath().getNormalizedPath()
-            : pb.getPath();
+                ? pb.getPath().getNormalizedPath()
+                : pb.getPath();
-        return isAbsolute && elements.length == 1;
+        return absolute && elements.length == 1;
-        return isAbsolute;
+        return absolute;
-        return isAbsolute && isNormalized;
+        return absolute && normalized;
-        return isNormalized;
+        return normalized;
-     * <p>
+     * <p/>
-     * @see #isNormalized()
+     * @see #isNormalized()
-            } else if (elem.denotesParent() && last!=null && !last.denotesParent()) {
+            } else if (elem.denotesParent() && last != null && !last.denotesParent()) {
-                queue.add(last=elem);
+                queue.add(last = elem);
-        return new Path(elements, isNormalized);
+        return new Path(elements, normalized);
+         *
+         *
+         *
+         *
+         *
+         *
+         *
+         *
-            /** FIXME the [1] subscript should only be suppressed if the item
+            /**
+             * FIXME the [1] subscript should only be suppressed if the item
-            isNormalized = master.isNormalized;
+            isNormalized = master.normalized;
-                if (resolver==null) {
+                if (resolver == null) {
