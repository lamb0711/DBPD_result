JCR-890: concurrent read-only access to a session

Turn Item.save() into a managed operation.

Introduce SessionContext to avoid having to pass a yet another reference around.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@956912 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.session.SessionContext;
-import org.apache.jackrabbit.core.session.SessionState;
-import javax.jcr.InvalidItemStateException;
-import javax.jcr.nodetype.NoSuchNodeTypeException;
-     * The state of this session.
+     * The component context of this session.
-    protected volatile SessionState state = new ActiveSessionState();
+    protected final SessionContext context = new SessionContext(this);
+        this.context.setSessionState(new ActiveSessionState());
-                itemStateMgr, hierMgr, this,
+                itemStateMgr, hierMgr, context,
+    private void perform(SessionOperation operation)
+            throws RepositoryException {
+        context.getSessionState().perform(operation);
+    }
+
-        state.perform(new SessionOperation("sanity check"));
+        perform(new SessionOperation("sanity check"));
-        state.perform(new SessionOperation("save") {
+        perform(new SessionOperation("save") {
-        state.perform(new SessionOperation("refresh") {
+        perform(new SessionOperation("refresh") {
-        return state.isAlive();
+        return context.getSessionState().isAlive();
-        state = new ClosedSessionState();
+        context.setSessionState(new ClosedSessionState());
