JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NameException;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.conversion.NamePathResolver;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.NameFactoryImpl;
+import org.apache.jackrabbit.spi.Name;
-    private final QName name;
-    private final QName[] supertypes;
+    private final Name name;
+    private final Name[] supertypes;
-    private final QName primaryItemName;
+    private final Name primaryItemName;
-    public QNodeTypeDefinitionImpl(Element ntdElement, NamespaceResolver nsResolver,
+    public QNodeTypeDefinitionImpl(Element ntdElement, NamePathResolver resolver,
-            name = NameFormat.parse(ntdElement.getAttribute(NAME_ATTRIBUTE), nsResolver);
+            name = resolver.getQName(ntdElement.getAttribute(NAME_ATTRIBUTE));
-            primaryItemName = NameFormat.parse(ntdElement.getAttribute(PRIMARYITEMNAME_ATTRIBUTE), nsResolver);
+            primaryItemName = resolver.getQName(ntdElement.getAttribute(PRIMARYITEMNAME_ATTRIBUTE));
-                QName st = NameFormat.parse(DomUtil.getTextTrim(stIter.nextElement()), nsResolver);
+                Name st = resolver.getQName(DomUtil.getTextTrim(stIter.nextElement()));
-            supertypes = (QName[]) qNames.toArray(new QName[qNames.size()]);
+            supertypes = (Name[]) qNames.toArray(new Name[qNames.size()]);
-            supertypes = QName.EMPTY_ARRAY;
+            supertypes = Name.EMPTY_ARRAY;
-            itemDefs.add(new QNodeDefinitionImpl(name, it.nextElement(), nsResolver));
+            itemDefs.add(new QNodeDefinitionImpl(name, it.nextElement(), resolver));
-            itemDefs.add(new QPropertyDefinitionImpl(name, it.nextElement(), nsResolver, qValueFactory));
+            itemDefs.add(new QPropertyDefinitionImpl(name, it.nextElement(), resolver, qValueFactory));
-     * @see QNodeTypeDefinition#getQName() 
+     * @see QNodeTypeDefinition#getName()
-    public QName getQName() {
+    public Name getName() {
-    public QName[] getSupertypes() {
+    public Name[] getSupertypes() {
-                || isMixin() || QName.NT_BASE.equals(getQName())) {
+                || isMixin() || NameConstants.NT_BASE.equals(getName())) {
-            return new QName[] { QName.NT_BASE };
+            return new Name[] { NameConstants.NT_BASE };
-    public QName getPrimaryItemName() {
+    public Name getPrimaryItemName() {
-                QName ntName = nodeDefs[i].getDefaultPrimaryType();
+                Name ntName = nodeDefs[i].getDefaultPrimaryType();
-                QName[] ntNames = nodeDefs[i].getRequiredPrimaryTypes();
+                Name[] ntNames = nodeDefs[i].getRequiredPrimaryTypes();
-                            QName ntName = QName.valueOf(ca[j]);
+                            // TODO: don't rely on a specific factory
+                            Name ntName = NameFactoryImpl.getInstance().create(ca[j]);
-            return (name == null ? other.getQName() == null : name.equals(other.getQName()))
+            return (name == null ? other.getName() == null : name.equals(other.getName()))
