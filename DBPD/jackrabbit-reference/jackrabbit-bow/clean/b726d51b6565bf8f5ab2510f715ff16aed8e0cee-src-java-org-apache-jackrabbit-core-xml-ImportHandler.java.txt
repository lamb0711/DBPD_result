reimplementing Session.importXML & friends due to spec changes 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@154700 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.*;
+import org.apache.jackrabbit.core.BaseException;
+import org.apache.jackrabbit.core.Constants;
+import org.apache.jackrabbit.core.NamespaceRegistryImpl;
+import org.apache.jackrabbit.core.NamespaceResolver;
+import org.apache.jackrabbit.core.QName;
-import org.xml.sax.*;
+import org.xml.sax.Attributes;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.ErrorHandler;
+import org.xml.sax.Locator;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
+import org.xml.sax.helpers.NamespaceSupport;
- * data in System View XML or Document View XML. The actual task of importing
- * is delegated to specialized <code>ContentHandler</code>s (i.e.
- * <code>SysViewImportHandler</code> and <code>DocViewImportHandler</code>).
+ * data in System View XML or Document View XML. Processing of the XML is handled
+ * by specialized <code>ContentHandler</code>s (i.e. <code>SysViewImportHandler</code>
+ * and <code>DocViewImportHandler</code>).
+ * <p/>
+ * The actual task of importing though is delegated to the implementation of
+ * the <code>{@link Importer}</code> interface.
+    protected final Importer importer;
+    protected final NamespaceRegistryImpl nsReg;
+    protected final NamespaceResolver nsResolver;
+
-
-    protected SessionImpl session;
-    protected NodeImpl importTargetNode;
-    protected NamespaceRegistryImpl nsReg;
-    public ImportHandler(NodeImpl importTargetNode,
-                         NamespaceRegistryImpl nsReg,
-                         SessionImpl session) {
-        this.importTargetNode = importTargetNode;
-        this.session = session;
+    protected final NamespaceContext nsContext;
+
+    /**
+     * this flag is used to determine whether a namespace context needs to be
+     * started in the startElement event or if the namespace context has already
+     * been started in a preceeding startPrefixMapping event;
+     * the flag is set per element in the first startPrefixMapping event and is
+     * cleared again in the following startElement event;
+     */
+    protected boolean nsContextStarted;
+
+    public ImportHandler(Importer importer, NamespaceResolver nsResolver,
+                         NamespaceRegistryImpl nsReg) {
+        this.importer = importer;
+        this.nsResolver = nsResolver;
+
+        nsContext = new NamespaceContext();
+
+        /**
+         * start initial context containing existing mappings reflected
+         * by nsResolver
+         */
+        nsContext.reset();
+        nsContext.pushContext();
+        try {
+            String[] uris = nsReg.getURIs();
+            for (int i = 0; i < uris.length; i++) {
+                nsContext.declarePrefix(nsResolver.getPrefix(uris[i]), uris[i]);
+            }
+        } catch (RepositoryException re) {
+            throw new SAXException(re);
+        }
+
+        // initialize flag
+        nsContextStarted = false;
+        // cleanup
+        nsContext.reset();
+        // check if new context needs to be started
+        if (!nsContextStarted) {
+            // entering new namespace context
+            nsContext.pushContext();
+            nsContextStarted = true;
+        }
+
-            String oldPrefix = session.getNamespacePrefix(uri);
-            // namespace is already registered; check prefix
-            if (!"".equals(prefix) && !oldPrefix.equals(prefix)) {
-                /**
-                 * namespace is mapped to different prefix;
-                 * try to remap it to given prefix
-                 */
-                try {
-                    session.setNamespacePrefix(prefix, uri);
-                } catch (RepositoryException re) {
-                    throw new SAXException("failed to remap namespace " + uri
-                            + " to prefix " + prefix, re);
-                }
-            }
+            // this will trigger NamespaceException if namespace is unknown
+            nsContext.getPrefix(uri);
-            // namespace is not yet registered, try to register it
+            // namespace is not yet registered ...
+            String newPrefix;
-                 * the xml document specifies a default namespace (i.e. an empty prefix);
-                 * we need to create a random prefix as the empty prefix is reserved
-                 * according to the JCR spec.
+                 * the xml document specifies a default namespace
+                 * (i.e. an empty prefix); we need to create a random
+                 * prefix as the empty prefix is reserved according
+                 * to the JCR spec.
-                prefix = nsReg.getUniquePrefix(uri);
+                newPrefix = nsReg.getUniquePrefix(uri);
+            } else {
+                newPrefix = prefix;
+            // register new namespace
-                nsReg.registerNamespace(prefix, uri);
+                nsReg.registerNamespace(newPrefix, uri);
-                throw new SAXException("failed to register namespace " + uri + " with prefix " + prefix, re);
+                throw new SAXException(re);
-        } catch (RepositoryException re) {
-            throw new SAXException("failed to check prefix for namespace " + uri, re);
+        // map namespace in this context to given prefix
+        nsContext.declarePrefix(prefix, uri);
+    }
+
+    /**
+     * @see ContentHandler#endPrefixMapping(String)
+     */
+    public void endPrefixMapping(String prefix) throws SAXException {
+        /**
+         * nothing to do here as namespace context has already been popped
+         * in endElement event
+         */
+        // check if new context needs to be started
+        if (!nsContextStarted) {
+            // there hasn't been a preceeding startPrefixMapping event
+            // so enter new namespace context
+            nsContext.pushContext();
+        } else {
+            // reset flag
+            nsContextStarted = false;
+        }
+
-                    nsURI = QName.fromJCRName(qName, session.getNamespaceResolver()).getNamespaceURI();
+                    nsURI = QName.fromJCRName(qName, nsResolver).getNamespaceURI();
-                targetHandler = new SysViewImportHandler(importTargetNode, session);
+                targetHandler = new SysViewImportHandler(importer, nsContext);
-                targetHandler = new DocViewImportHandler(importTargetNode, session);
+                targetHandler = new DocViewImportHandler(importer, nsContext);
+        // leaving element, pop namespace context
+        nsContext.popContext();
+
+
+    //--------------------------------------------------------< inner classes >
+    class NamespaceContext implements NamespaceResolver {
+
+        private final NamespaceSupport nsContext;
+
+        /**
+         * NamespaceSupport doesn't accept "" as default uri;
+         * internally we're using " " instead
+         */
+        private static final String DUMMY_DEFAULT_URI = " ";
+        private static final String DEFAULT_URI = Constants.NS_DEFAULT_URI;
+
+        private static final String EMPTY_PREFIX = "";
+
+        NamespaceContext() {
+            nsContext = new NamespaceSupport();
+        }
+
+        /**
+         * @see NamespaceSupport#popContext()
+         */
+        void popContext() {
+            nsContext.popContext();
+        }
+
+        /**
+         * @see NamespaceSupport#pushContext()
+         */
+        void pushContext() {
+            nsContext.pushContext();
+        }
+
+        /**
+         * @see NamespaceSupport#reset()
+         */
+        void reset() {
+            nsContext.reset();
+        }
+
+        /**
+         * @see NamespaceSupport#declarePrefix(String, String)
+         */
+        boolean declarePrefix(String prefix, String uri) {
+            uri = DEFAULT_URI.equals(uri) ? DUMMY_DEFAULT_URI : uri;
+            return nsContext.declarePrefix(prefix, uri);
+        }
+
+        //------------------------------------------------< NamespaceResolver >
+        /**
+         * @see NamespaceResolver#getURI(String)
+         */
+        public String getURI(String prefix) throws NamespaceException {
+            String uri = nsContext.getURI(prefix);
+            if (uri == null) {
+                throw new NamespaceException("unknown prefix");
+            }
+            return DUMMY_DEFAULT_URI.equals(uri) ? DEFAULT_URI : uri;
+        }
+
+        /**
+         * @see NamespaceResolver#getPrefix(String)
+         */
+        public String getPrefix(String uri) throws NamespaceException {
+            uri = DEFAULT_URI.equals(uri) ? DUMMY_DEFAULT_URI : uri;
+            String prefix = nsContext.getPrefix(uri);
+            if (prefix == null) {
+                /**
+                 * NamespaceSupport#getPrefix will never return the empty
+                 * (default) prefix; we have to do a reverse-lookup to check
+                 * whether it's the current default namespace
+                 */
+                if (uri.equals(nsContext.getURI(EMPTY_PREFIX))) {
+                    return EMPTY_PREFIX;
+                }
+                throw new NamespaceException("unknown uri");
+            }
+            return prefix;
+        }
+
+    }
