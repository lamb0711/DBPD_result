JCR-2887 - Split PrivilegeRegistry in a per-session manager instance and a repository level registry  (WIP)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1181645 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+    private static final Map<Long, PrivilegeBits> BUILT_IN = new HashMap<Long, PrivilegeBits>();
+    static {
+        BUILT_IN.put(EMPTY.longValue(), EMPTY);
+    }
+
-            return new PrivilegeBits(d.next());
-        }
-    }
-        
-    /**
-     * Returns an unmodifiable instance.
-     *
-     * @return an unmodifiable <code>PrivilegeBits</code> instance.
-     */
-    PrivilegeBits unmodifiable() {
-        if (d instanceof ModifiableData) {
-            return (d.isSimple()) ? getInstance(d.longValue()) : getInstance(d.longValues());
-        } else {
-            return this;
+            PrivilegeBits pb = new PrivilegeBits(d.next());
+            if (pb.d.isSimple()) {
+                BUILT_IN.put(pb.longValue(), pb);
+            }
+            return pb;
-     * Package private method used by <code>PrivilegeRegistry</code> to create
-     * an instance of privilege bits for the specified long value.
+     * Package private method used by <code>PrivilegeRegistry</code> to get or
+     * create an instance of privilege bits for the specified long value.
-            return new PrivilegeBits(new UnmodifiableData(bits));
+            PrivilegeBits pb = BUILT_IN.get(bits);
+            if (pb == null) {
+                pb = new PrivilegeBits(new UnmodifiableData(bits));
+                BUILT_IN.put(bits, pb);
+            }
+            return pb;
+     * Returns an unmodifiable instance.
+     *
+     * @return an unmodifiable <code>PrivilegeBits</code> instance.
+     */
+    public PrivilegeBits unmodifiable() {
+        if (d instanceof ModifiableData) {
+            return (d.isSimple()) ? getInstance(d.longValue()) : getInstance(d.longValues());
+        } else {
+            return this;
+        }
+    }
+
+    /**
+     * Returns <code>true</code> if this privilege bits instance can be altered.
+     *
+     * @return true if this privilege bits instance can be altered.
+     */
+    public boolean isModifiable() {
+        return (d instanceof ModifiableData);
+    }
+
+    /**
-        } else if (d.isSimple()) {
-            return (d.longValue() & READ) == READ;
-            return (d.longValues()[0] & READ) == READ;
+            return d.includesRead();
+        abstract boolean includesRead();
+
+        boolean equalData(Data d) {
+            if (isSimple() != d.isSimple()) {
+                return false;
+            }
+            if (isSimple()) {
+                return longValue() == d.longValue();
+            } else {
+                return Arrays.equals(longValues(), d.longValues());
+            }
+        }
+
-
-        //---------------------------------------------------------< Object >---
-        @Override
-        public boolean equals(Object o) {
-            if (o == this) {
-                return true;
-            } else if (o instanceof Data) {
-                Data d = (Data) o;
-                if (isSimple() != d.isSimple()) {
-                    return false;
-                }
-                if (isSimple()) {
-                    return longValue() == d.longValue();
-                } else {
-                    return Arrays.equals(longValues(), d.longValues());
-                }
-            } else {
-                return false;
-            }
-        }
+        private final boolean includesRead;
+            includesRead  = (bits & READ) == READ;
+            includesRead = (bitsArr[0] & READ) == READ;
+        @Override
+        boolean includesRead() {
+            return includesRead;
+        }
+
-            return (isSimple) ? new Long(bits).hashCode() : bitsArr.hashCode();
+            return (isSimple) ? new Long(bits).hashCode() : Arrays.hashCode(bitsArr);
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (o == this) {
+                return true;
+            } else if (o instanceof UnmodifiableData) {
+                UnmodifiableData d = (UnmodifiableData) o;
+                if (isSimple != d.isSimple) {
+                    return false;
+                }
+                if (isSimple) {
+                    return bits == d.bits;
+                } else {
+                    return Arrays.equals(bitsArr, d.bitsArr);
+                }
+            } else if (o instanceof ModifiableData) {
+                return equalData((Data) o);
+            } else {
+                return false;
+            }
+        @Override
+        boolean includesRead() {
+            return (bits[0] & READ) == READ;
+        }
+
+
+        @Override
+        public boolean equals(Object o) {
+            if (o == this) {
+                return true;
+            } else if (o instanceof ModifiableData) {
+                ModifiableData d = (ModifiableData) o;
+                return Arrays.equals(bits, d.bits);
+            } else if (o instanceof UnmodifiableData) {
+                return equalData((Data) o);
+            } else {
+                return false;
+            }
+        }
