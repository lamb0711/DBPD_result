- Remove node id from NodeState
- Add node name and uuid to NodeState
- Remove unnecessary calls to getId()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431348 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.MalformedPathException;
+     * A current element Path instance.
+     */
+    private static final Path CURRENT_PATH;
+
+    static {
+        try {
+            Path.PathBuilder builder = new Path.PathBuilder();
+            builder.addFirst(Path.CURRENT_ELEMENT);
+            CURRENT_PATH = builder.getPath();
+        } catch (MalformedPathException e) {
+            // path is always valid
+            throw new InternalError("unable to create path from '.'");
+        }
+    }
+
+    /**
-     * TODO: id is not stable unless sole uuid.
-     * The id of this node state.
+     * The UUID of this node state or <code>null</code> if this node state
+     * cannot be identified with a uuid.
-    private NodeId id;
+    private String uuid;
+
+    /**
+     * The name of this node
+     */
+    private QName name;
-     * @param id            id of this NodeState
+     * @param name          the name of this NodeState
+     * @param uuid          the uuid of this NodeState or <code>null</code> if
+     *                      this node state cannot be identified with a UUID.
-    public NodeState(NodeId id, NodeState parent, QName nodeTypeName,
-                     int initialStatus, boolean isTransient,
+    public NodeState(QName name, String uuid, NodeState parent,
+                     QName nodeTypeName, int initialStatus, boolean isTransient,
-        this.id = id;
+        this.name = name;
+        this.uuid = uuid;
-            id = nodeState.id;
+            name = nodeState.name;
+            uuid = nodeState.uuid;
-        return id;
+        return getNodeId();
+     *
-        return id;
+        if (uuid != null) {
+            return idFactory.createNodeId(uuid);
+        } else if (parent != null) {
+            // find this in parent child node entries
+            for (Iterator it = parent.getChildNodeEntries(name).iterator(); it.hasNext(); ) {
+                ChildNodeEntry cne = (ChildNodeEntry) it.next();
+                try {
+                    if (cne.getNodeState() == this) {
+                        Path relPath = Path.create(cne.getName(), cne.getIndex());
+                        return idFactory.createNodeId(parent.getNodeId(), relPath);
+                    }
+                } catch (ItemStateException e) {
+                    log.warn("Unable to access child node entry: " + cne.getId());
+                }
+            }
+        } else {
+            // root node
+            return idFactory.createNodeId((String) null, CURRENT_PATH);
+        }
+        // TODO: replace with ItemStateException instead of error.
+        throw new InternalError("Unable to retrieve NodeId for NodeState");
