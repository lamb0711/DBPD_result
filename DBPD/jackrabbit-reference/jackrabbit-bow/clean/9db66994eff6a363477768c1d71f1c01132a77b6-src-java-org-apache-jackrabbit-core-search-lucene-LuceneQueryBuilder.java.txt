Changed semantics of SQL operators: <, >, <=, >=, <>, = to general comparison.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159585 13f79535-47bb-0310-9956-ffa450edef68

-            // the default lucene query parser recognizes 'AND', 'OR' and
-            // 'NOT' as keywords. when the whole statement is lowercased, this
-            // will not happen ;)
-            textsearch = textsearch.toLowerCase();
+            // the default lucene query parser recognizes 'AND' and 'NOT' as
+            // keywords.
+            textsearch = textsearch.replaceAll("AND", "and");
+            textsearch = textsearch.replaceAll("NOT", "not");
+            case QueryConstants.OPERATION_GE_GENERAL:   // >=
+                // search in single and multi valued properties
+                or = new BooleanQuery();
+                for (int i = 0; i < stringValues.length; i++) {
+                    or.add(new RangeQuery(new Term(field, stringValues[i]), null, true), false, false);
+                    or.add(new RangeQuery(new Term(mvpField, stringValues[i]), null, true), false, false);
+                }
+                query = or;
+                break;
+            case QueryConstants.OPERATION_GT_GENERAL:      // >
+                or = new BooleanQuery();
+                for (int i = 0; i < stringValues.length; i++) {
+                    or.add(new RangeQuery(new Term(field, stringValues[i]), null, false), false, false);
+                    or.add(new RangeQuery(new Term(mvpField, stringValues[i]), null, false), false, false);
+                }
+                query = or;
+                break;
+            case QueryConstants.OPERATION_LE_GENERAL:      // <=
+                or = new BooleanQuery();
+                for (int i = 0; i < stringValues.length; i++) {
+                    or.add(new RangeQuery(null, new Term(field, stringValues[i]), true), false, false);
+                    or.add(new RangeQuery(null, new Term(mvpField, stringValues[i]), true), false, false);
+                }
+                query = or;
+                break;
+            case QueryConstants.OPERATION_LT_GENERAL:      // <
+                or = new BooleanQuery();
+                for (int i = 0; i < stringValues.length; i++) {
+                    or.add(new RangeQuery(null, new Term(field, stringValues[i]), false), false, false);
+                    or.add(new RangeQuery(null, new Term(mvpField, stringValues[i]), false), false, false);
+                }
+                query = or;
+                break;
