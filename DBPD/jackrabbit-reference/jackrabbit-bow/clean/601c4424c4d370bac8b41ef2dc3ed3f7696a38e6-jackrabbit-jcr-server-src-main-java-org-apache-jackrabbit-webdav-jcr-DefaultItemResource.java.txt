JCR-2344: ClassCastException org.apache.xerces.parsers.XIncludeAwareParserConfiguration cannot be cast to org.apache.xerces.xni.parser.XMLParserConfiguration when deploying in JBoss 5.1

Replace our last Xerces dependency with the SerializingContentHandler class.

Tested against regressions with the litmus and jcr2dav test suites.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@935544 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.xml.SerializingContentHandler;
-import org.apache.xml.serialize.OutputFormat;
-import org.apache.xml.serialize.XMLSerializer;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.SAXException;
+import javax.jcr.Binary;
-import javax.jcr.ValueFormatException;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.sax.SAXResult;
+
-        InputStream in = null;
+        OutputStream out = outputContext.getOutputStream();
+        if (out != null && exists()) {
+            if (isMultiple()) {
+                spoolMultiValued(out);
+            } else {
+                spoolSingleValued(out);
+            }
+        }
+    }
+
+    private void spoolMultiValued(OutputStream out) {
-            OutputStream out = outputContext.getOutputStream();
-            if (out != null && exists()) {
-                if (isMultiple()) {
-                    Document doc = DomUtil.BUILDER_FACTORY.newDocumentBuilder().newDocument();
-                    doc.appendChild(getProperty(JCR_VALUES).toXml(doc));
-                    OutputFormat format = new OutputFormat("xml", "UTF-8", false);
-                    XMLSerializer serializer = new XMLSerializer(out, format);
-                    serializer.setNamespaces(true);
-                    serializer.asDOMSerializer().serialize(doc);
-                } else {
-                    in = ((Property)item).getStream();
-                    if (in != null) {
-                        IOUtil.spool(in, out);
-                    }
-                }
-            }
+            Document doc =
+                DomUtil.BUILDER_FACTORY.newDocumentBuilder().newDocument();
+            doc.appendChild(getProperty(JCR_VALUES).toXml(doc));
+
+            ContentHandler handler =
+                SerializingContentHandler.getSerializer(out);
+
+            Transformer transformer =
+                TransformerFactory.newInstance().newTransformer();
+            transformer.transform(
+                    new DOMSource(doc), new SAXResult(handler));
+        } catch (SAXException e) {
+            log.error("Failed to set up XML serializer for " + item, e);
+        } catch (TransformerConfigurationException e) {
+            log.error("Failed to set up XML transformer for " + item, e);
-            log.error("Error while spooling multivalued resource: " + e.getMessage());
-        } catch (ValueFormatException e) {
-            // should not occur
-            log.error("Cannot obtain stream from resource: " + e.getMessage());
-        } catch (RepositoryException e) {
-            log.error("Cannot obtain stream from resource: " + e.getMessage());
-        } finally {
-            if (in != null) {
-                in.close();
+            log.error("Failed to set up XML document for " + item, e);
+        } catch (TransformerException e) {
+            log.error("Failed to serialize the values of " + item, e);
+        }
+    }
+
+    private void spoolSingleValued(OutputStream out) throws IOException {
+        try {
+            Binary binary = ((Property) item).getBinary();
+            try {
+                InputStream in = binary.getStream();
+                try {
+                    IOUtil.spool(in, out);
+                } finally {
+                    in.close();
+                }
+            } finally {
+                binary.dispose();
+        } catch (RepositoryException e) {
+            log.error("Cannot obtain stream from " + item, e);
-            } else if (propEntry instanceof DavProperty) {
+            } else if (propEntry instanceof DavProperty<?>) {
