JCR-97: Various checkstyle conformance improvements.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@386994 13f79535-47bb-0310-9956-ffa450edef68

-    public final static char SINGLE_QUOTE = '\'';
-    public final static char DOUBLE_QUOTE = '\"';
-    public final static char BEGIN_NODE_TYPE_NAME = '[';
-    public final static char END_NODE_TYPE_NAME = ']';
-    public final static char EXTENDS = '>';
-    public final static char LIST_DELIMITER = ',';
-    public final static char PROPERTY_DEFINITION = '-';
-    public final static char CHILD_NODE_DEFINITION = '+';
-    public final static char BEGIN_TYPE = '(';
-    public final static char END_TYPE = ')';
-    public final static char DEFAULT = '=';
-    public final static char CONSTRAINT = '<';
+    public static final char SINGLE_QUOTE = '\'';
+    public static final char DOUBLE_QUOTE = '\"';
+    public static final char BEGIN_NODE_TYPE_NAME = '[';
+    public static final char END_NODE_TYPE_NAME = ']';
+    public static final char EXTENDS = '>';
+    public static final char LIST_DELIMITER = ',';
+    public static final char PROPERTY_DEFINITION = '-';
+    public static final char CHILD_NODE_DEFINITION = '+';
+    public static final char BEGIN_TYPE = '(';
+    public static final char END_TYPE = ')';
+    public static final char DEFAULT = '=';
+    public static final char CONSTRAINT = '<';
-    public final static String[] ORDERABLE = new String[] {"orderable", "ord", "o"};
-    public final static String[] MIXIN = new String[]{"mixin", "mix", "m"};
+    public static final String[] ORDERABLE = new String[] {"orderable", "ord", "o"};
+    public static final String[] MIXIN = new String[]{"mixin", "mix", "m"};
-    public final static String[] PRIMARY = new String[]{"primary", "pri", "!"};
-    public final static String[] AUTOCREATED = new String[]{"autocreated", "aut", "a"};
-    public final static String[] MANDATORY = new String[]{"mandatory", "man", "m"};
-    public final static String[] PROTECTED = new String[]{"protected", "pro", "p"};
-    public final static String[] MULTIPLE = new String[]{"multiple", "mul", "*"};
+    public static final String[] PRIMARY = new String[]{"primary", "pri", "!"};
+    public static final String[] AUTOCREATED = new String[]{"autocreated", "aut", "a"};
+    public static final String[] MANDATORY = new String[]{"mandatory", "man", "m"};
+    public static final String[] PROTECTED = new String[]{"protected", "pro", "p"};
+    public static final String[] MULTIPLE = new String[]{"multiple", "mul", "*"};
-    public final static String[] COPY = new String[]{"copy", "Copy", "COPY"};
-    public final static String[] VERSION = new String[]{"version", "Version", "VERSION"};
-    public final static String[] INITIALIZE = new String[]{"initialize", "Initialize", "INITIALIZE"};
-    public final static String[] COMPUTE = new String[]{"compute", "Compute", "COMPUTE"};
-    public final static String[] IGNORE = new String[]{"ignore", "Ignore", "IGNORE"};
-    public final static String[] ABORT = new String[]{"abort", "Abort", "ABORT"};
+    public static final String[] COPY = new String[]{"copy", "Copy", "COPY"};
+    public static final String[] VERSION = new String[]{"version", "Version", "VERSION"};
+    public static final String[] INITIALIZE = new String[]{"initialize", "Initialize", "INITIALIZE"};
+    public static final String[] COMPUTE = new String[]{"compute", "Compute", "COMPUTE"};
+    public static final String[] IGNORE = new String[]{"ignore", "Ignore", "IGNORE"};
+    public static final String[] ABORT = new String[]{"abort", "Abort", "ABORT"};
-    public final static String[] ATTRIBUTE = new String[]{"primary", "pri", "!",
+    public static final String[] ATTRIBUTE = new String[]{"primary", "pri", "!",
-    public final static String[] STRING = {"string", "String", "STRING"};
-    public final static String[] BINARY = {"binary", "Binary", "BINARY"};
-    public final static String[] LONG = {"long", "Long", "LONG"};
-    public final static String[] DOUBLE = {"double", "Double", "DOUBLE"};
-    public final static String[] BOOLEAN = {"boolean", "Boolean", "BOOLEAN"};
-    public final static String[] DATE = {"date", "Date", "DATE"};
-    public final static String[] NAME = {"name", "Name", "NAME"};
-    public final static String[] PATH = {"path", "Path", "PATH"};
-    public final static String[] REFERENCE = {"reference", "Reference", "REFERENCE"};
+    public static final String[] STRING = {"string", "String", "STRING"};
+    public static final String[] BINARY = {"binary", "Binary", "BINARY"};
+    public static final String[] LONG = {"long", "Long", "LONG"};
+    public static final String[] DOUBLE = {"double", "Double", "DOUBLE"};
+    public static final String[] BOOLEAN = {"boolean", "Boolean", "BOOLEAN"};
+    public static final String[] DATE = {"date", "Date", "DATE"};
+    public static final String[] NAME = {"name", "Name", "NAME"};
+    public static final String[] PATH = {"path", "Path", "PATH"};
+    public static final String[] REFERENCE = {"reference", "Reference", "REFERENCE"};
-    public final static String[] UNDEFINED = new String[]{"undefined", "Undefined", "UNDEFINED", "*"};
+    public static final String[] UNDEFINED = new String[]{"undefined", "Undefined", "UNDEFINED", "*"};
-    public final static String EOF = "eof";
+    public static final String EOF = "eof";
-    public Lexer(Reader r, String systemId){
+    public Lexer(Reader r, String systemId) {
-        st.wordChars('a','z');
-        st.wordChars('A','Z');
-        st.wordChars(':',':');
+        st.wordChars('a', 'z');
+        st.wordChars('A', 'Z');
+        st.wordChars(':', ':');
-            if (tokenType == StreamTokenizer.TT_EOF){
+            if (tokenType == StreamTokenizer.TT_EOF) {
-            } else if(tokenType == StreamTokenizer.TT_WORD || tokenType == SINGLE_QUOTE || tokenType == DOUBLE_QUOTE){
+            } else if (tokenType == StreamTokenizer.TT_WORD || tokenType == SINGLE_QUOTE || tokenType == DOUBLE_QUOTE) {
-                return new String(new char[]{(char)tokenType});
+                return new String(new char[] {(char) tokenType});
-        } catch (IOException e){
+        } catch (IOException e) {
-}
+}
