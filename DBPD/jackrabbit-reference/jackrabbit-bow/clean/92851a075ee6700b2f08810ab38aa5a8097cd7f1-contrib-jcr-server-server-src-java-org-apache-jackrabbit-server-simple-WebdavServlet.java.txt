[JCR-103] Add plugable mechanism for import/export of dav resources

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160914 13f79535-47bb-0310-9956-ffa450edef68

+import java.net.URL;
+import org.apache.jackrabbit.webdav.lock.LockManager;
+import org.apache.commons.chain.config.ConfigParser;
+import org.apache.commons.chain.Catalog;
+import org.apache.commons.chain.impl.CatalogFactoryBase;
+    /** init param file of the commons chain catalog*/
+    public static final String INIT_PARAM_CHAIN_CATALOG = "chain-catalog";
+
-    private SimpleLockManager lockManager;
+    private LockManager lockManager;
+    private static Catalog chainCatalog;
+
-	lockManager = new SimpleLockManager();
-        resourceFactory = new ResourceFactoryImpl(lockManager);
-        locatorFactory = new LocatorFactoryImpl(resourcePathPrefix);
+        try {
+            String chain = getInitParameter(INIT_PARAM_CHAIN_CATALOG);
+            URL chainUrl = getServletContext().getResource(chain);
+            ConfigParser parser = new ConfigParser();
+            parser.parse(chainUrl);
+            chainCatalog = CatalogFactoryBase.getInstance().getCatalog();
+        } catch (Exception e) {
+            throw new ServletException(e);
+        }
+        log.info(INIT_PARAM_CHAIN_CATALOG + " = '" + chainCatalog + "'");
-            WebdavRequest webdavRequest = new WebdavRequestImpl(request, locatorFactory);
+            WebdavRequest webdavRequest = new WebdavRequestImpl(request, getLocatorFactory());
-	    getDavSessionProvider().acquireSession(webdavRequest);
+	    getSessionProvider().acquireSession(webdavRequest);
-	    getDavSessionProvider().releaseSession(webdavRequest);
+	    getSessionProvider().releaseSession(webdavRequest);
-        return resourceFactory.createResource(locator, request, response);
+        return getResourceFactory().createResource(locator, request, response);
+     * Returns the <code>DavLocatorFactory</code>. If no locator factory has
+     * been set or created a new instance of {@link LocatorFactoryImpl} is
+     * returned.
+     *
+     * @return the locator factory
+     */
+    public DavLocatorFactory getLocatorFactory() {
+	if (locatorFactory == null) {
+	    locatorFactory = new LocatorFactoryImpl(resourcePathPrefix);
+	}
+	return locatorFactory;
+    }
+
+    /**
+     * Set the locator factory
+     *
+     * @param locatorFactory
+     */
+    public void setLocatorFactory(DavLocatorFactory locatorFactory) {
+	this.locatorFactory = locatorFactory;
+    }
+
+    /**
+     * Returns the <code>LockManager</code>. If no lock manager has
+     * been set or created a new instance of {@link SimpleLockManager} is
+     * returned.
+     *
+     * @return the lock manager
+     */
+    public LockManager getLockManager() {
+	if (lockManager == null) {
+	    lockManager = new SimpleLockManager();
+	}
+	return lockManager;
+    }
+
+    /**
+     * Set the lock manager
+     *
+     * @param lockManager
+     */
+    public void setLockManager(LockManager lockManager) {
+	this.lockManager = lockManager;
+    }
+
+    /**
+     * Returns the <code>DavResourceFactory</code>. If no request factory has
+     * been set or created a new instance of {@link ResourceFactoryImpl} is
+     * returned.
+     *
+     * @return the resource factory
+     */
+    public DavResourceFactory getResourceFactory() {
+	if (resourceFactory == null) {
+	    resourceFactory = new ResourceFactoryImpl(getLockManager());
+	}
+	return resourceFactory;
+    }
+
+    /**
+     * Set the resource factory
+     *
+     * @param resourceFactory
+     */
+    public void setResourceFactory(DavResourceFactory resourceFactory) {
+	this.resourceFactory = resourceFactory;
+    }
+
+    /**
-     * return.
+     * returned.
-    public DavSessionProvider getDavSessionProvider() {
+    public DavSessionProvider getSessionProvider() {
-    public void setDavSessionProvider(DavSessionProvider sessionProvider) {
+    public void setSessionProvider(DavSessionProvider sessionProvider) {
