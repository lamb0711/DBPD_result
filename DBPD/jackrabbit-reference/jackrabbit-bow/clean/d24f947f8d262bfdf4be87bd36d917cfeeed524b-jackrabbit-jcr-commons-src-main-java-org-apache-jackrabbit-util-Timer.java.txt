JCR-1486: Introduce Timer idle time

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638790 13f79535-47bb-0310-9956-ffa450edef68

- * in the <code>Timer</code> instance.
+ * in the <code>Timer</code> instance after a certain {@link #IDLE_TIME}.
+     * Idle time in milliseconds. When a timer instance is idle for this amount
+     * of time the underlying timer is canceled.
+     */
+    static final int IDLE_TIME = 3 * 1000;
+
+    /**
+     * The interval at which the idle checker task runs.
+     */
+    static final int CHECKER_INTERVAL = 1000;
+
+    /**
+     * The time when the last task was scheduled.
+     */
+    private long lastTaskScheduled;
+
+    /**
+                // run idle checker every second
+                Task idleChecker = new IdleCheckerTask();
+                idleChecker.setTimer(this);
+                delegatee.schedule(idleChecker, IDLE_TIME, CHECKER_INTERVAL);
+            lastTaskScheduled = System.currentTimeMillis();
+     * @return <code>true</code> if this timer has a running backround thread
+     *         for scheduled tasks. This method is only for test purposes.
+     */
+    boolean isRunning() {
+        synchronized (this) {
+            return delegatee != null;
+        }
+    }
+
+    /**
-            if (--numScheduledTasks == 0) {
-                delegatee.cancel();
-                delegatee = null;
-            }
+            --numScheduledTasks;
+
+    /**
+     * Checks if the enclosing timer had been idle for at least
+     * {@link Timer#IDLE_TIME} and cancels it in that case.
+     */
+    private class IdleCheckerTask extends Task {
+
+        public void run() {
+            synchronized (Timer.this) {
+                if (numScheduledTasks == 0 &&
+                        System.currentTimeMillis() > lastTaskScheduled + IDLE_TIME) {
+                    delegatee.cancel();
+                    delegatee = null;
+                }
+            }
+        }
+    }
