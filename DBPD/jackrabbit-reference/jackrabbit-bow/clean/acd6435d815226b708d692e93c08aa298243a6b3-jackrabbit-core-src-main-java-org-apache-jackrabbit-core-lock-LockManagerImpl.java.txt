JCR-2554 Added two ReentrantLocks (Thread, Xid) in LockManagerImpl

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@925982 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.TransactionContext;
+import javax.transaction.xa.Xid;
+import java.util.Arrays;
-     * Lock to path map.
+     * Thread aware lock to path map.
+    
+    /**
+     * Xid aware lock to path map.
+     */
+    private final ReentrantLock xidlockMapLock = new ReentrantLock(){
+
+    	/**
+    	 * The actice Xid of this {@link ReentrantLock}
+    	 */
+        private Xid activeXid;
+
+        /**
+         * Check if the given Xid comes from the same globalTX
+         * @param otherXid
+         * @return true if same globalTX otherwise false
+         */
+        boolean isSameGlobalTx(Xid otherXid) {
+    	    return (activeXid == otherXid) || Arrays.equals(activeXid.getGlobalTransactionId(), otherXid.getGlobalTransactionId());
+    	}
+        
+        /**
+         * {@inheritDoc}
+         */
+        public void acquire() throws InterruptedException {
+        	if (Thread.interrupted()) throw new InterruptedException();
+        	Xid currentXid = TransactionContext.getCurrentXid();
+            synchronized(this) {
+            	if (currentXid == activeXid || (activeXid != null && isSameGlobalTx(currentXid))) { 
+                ++holds_;
+            	} else {
+            		try {  
+            			while (activeXid != null) 
+            				wait(); 
+            			activeXid = currentXid;
+            			holds_ = 1;
+            		} catch (InterruptedException ex) {
+            			notify();
+            			throw ex;
+            		}
+            	}
+            }
+        }
+        
+        /**
+         * {@inheritDoc}
+         */
+        public synchronized void release()  {
+        	Xid currentXid = TransactionContext.getCurrentXid();
+            if (activeXid != null && !isSameGlobalTx(currentXid))
+                throw new Error("Illegal Lock usage"); 
+
+              if (--holds_ == 0) {
+                activeXid = null;
+                notify(); 
+              }
+        }
+    };
-                lockMapLock.acquire();
+            	if (TransactionContext.getCurrentXid() == null) {
+            		lockMapLock.acquire();
+            	} else {
+            		xidlockMapLock.acquire();
+            	}
-        lockMapLock.release();
+    	if (TransactionContext.getCurrentXid() == null) {
+    		lockMapLock.release();
+    	} else {
+    		xidlockMapLock.release();
+    	}
