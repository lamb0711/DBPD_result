jcr-commands 
 - naming and packaging reviewed
 - now commands only read parameters from the context because commands shouldn't have a state of their own but use only the context.
 - i18n reorganized in one single resources file
 - batch mode added
 - cover most of jcr operations (versioning, locking, etc.)
 - commands simplified. Most commands don't have default values.
 - logging added

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@294914 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.chain.command.info;
+package org.apache.jackrabbit.command.info;
+import java.util.ResourceBundle;
+import org.apache.commons.chain.Command;
-import org.apache.jackrabbit.chain.CtxHelper;
-import org.apache.jackrabbit.chain.JcrCommandException;
-import org.apache.jackrabbit.chain.cli.AbstractParameter;
-import org.apache.jackrabbit.chain.cli.Argument;
-import org.apache.jackrabbit.chain.cli.CommandLine;
-import org.apache.jackrabbit.chain.cli.CommandLineFactory;
-import org.apache.jackrabbit.chain.cli.Flag;
-import org.apache.jackrabbit.chain.cli.Option;
+import org.apache.jackrabbit.command.CommandException;
+import org.apache.jackrabbit.command.CommandHelper;
+import org.apache.jackrabbit.command.cli.AbstractParameter;
+import org.apache.jackrabbit.command.cli.Argument;
+import org.apache.jackrabbit.command.cli.CommandLine;
+import org.apache.jackrabbit.command.cli.CommandLineFactory;
+import org.apache.jackrabbit.command.cli.Flag;
+import org.apache.jackrabbit.command.cli.Option;
-public class Help extends AbstractInfoCommand
+public class Help implements Command
+    /** bundle */
+    private static ResourceBundle bundle = CommandHelper.getBundle();
+
-    private String command;
+    /** command key */
+    private String commandKey = "command";
-        PrintWriter out = CtxHelper.getOutput(ctx);
+        String command = (String) ctx.get(this.commandKey) ;
+        PrintWriter out = CommandHelper.getOutput(ctx);
-     * @throws JcrCommandException
+     * @throws CommandException
-    private void helpAll(Context ctx) throws JcrCommandException
+    private void helpAll(Context ctx) throws CommandException
-        PrintWriter out = CtxHelper.getOutput(ctx);
+        PrintWriter out = CommandHelper.getOutput(ctx);
-     * @throws JcrCommandException
+     * @throws CommandException
-    private void helpCommand(Context ctx) throws JcrCommandException
+    private void helpCommand(Context ctx) throws CommandException
-        PrintWriter out = CtxHelper.getOutput(ctx);
+        PrintWriter out = CommandHelper.getOutput(ctx);
+        
+        String cmdName = (String) ctx.get(this.commandKey) ;
-        CommandLine desc = factory.getCommandLine(this.command);
+        CommandLine desc = factory.getCommandLine(cmdName);
-        out.println(bundle.getString("description") + ": ");
+        out.println(bundle.getString("word.description") + ": ");
-        out.print(bundle.getString("usage") + ":");
+        out.print(bundle.getString("word.usage") + ":");
-
-        if (desc.getAlias().size()>0) {
-            out.print(bundle.getString("alias") + ":");
+        if (desc.getAlias().size() > 0)
+        {
+            out.print(bundle.getString("word.alias") + ":");
-            out.println("<" + bundle.getString("arguments") + ">");
+            out.println("<" + bundle.getString("word.arguments") + ">");
-            out.println("<" + bundle.getString("options") + ">");
+            out.println("<" + bundle.getString("word.options") + ">");
-            out.println("<" + bundle.getString("flags") + ">");
+            out.println("<" + bundle.getString("word.flags") + ">");
-private void printParam(Context ctx, Collection params)
+    private void printParam(Context ctx, Collection params)
-        PrintWriter out = CtxHelper.getOutput(ctx);
-                bundle.getString("name"), bundle.getString("arg.name"),
-                bundle.getString("required"), bundle.getString("description")
+                bundle.getString("word.name"), bundle.getString("word.argument"),
+                bundle.getString("word.required"), bundle.getString("word.description")
-    }    public String getCommand()
-    {
-        return command;
-    public void setCommand(String command)
+    /**
+     * @return Returns the commandKey.
+     */
+    public String getCommandKey()
-        this.command = command;
+        return commandKey;
+    }
+
+    /**
+     * @param commandKey
+     *            The commandKey to set.
+     */
+    public void setCommandKey(String commandKey)
+    {
+        this.commandKey = commandKey;
