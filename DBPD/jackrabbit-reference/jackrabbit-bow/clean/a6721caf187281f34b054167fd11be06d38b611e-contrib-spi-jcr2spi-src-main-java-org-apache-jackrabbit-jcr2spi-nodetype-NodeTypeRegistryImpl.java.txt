work in progress

- resolve some TODOs
- replace // JR DIFF comments
- remove unused/unimplemented validation methods from NodeTypeRegistry, that should
  be implemented on serverside
- Validation of NodeTypeDefinition: check if autocreated props defined default-value
  is not required on the client-side.
- LockManagerImpl: be prepared for observation not being supported by spi.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@479569 13f79535-47bb-0310-9956-ffa450edef68

-            // DIFF JACKRABBIT: we cannot determine built-in vs. custom nodetypes.
-            // TODO: 'false' flag maybe not totally correct....
-            Map defMap = validator.validateNodeTypeDefs(nodeTypeDefs, new HashMap(registeredNTDefs), false);
+            /* Note: since the client reads all nodetypes from the server, it is
+             * not able to distinguish between built-in and custom-defined
+             * nodetypes (compared to Jackrabbit-core) */
+            Map defMap = validator.validateNodeTypeDefs(nodeTypeDefs, new HashMap(registeredNTDefs));
-        // DIFF JR: 'finally' for resetting 'checkAutoCreated' not needed any more...
-        EffectiveNodeTypeImpl ent = validator.validateNodeTypeDef(ntDef, registeredNTDefs, true);
+        EffectiveNodeTypeImpl ent = validator.validateNodeTypeDef(ntDef, registeredNTDefs);
-        Map defMap = validator.validateNodeTypeDefs(ntDefs, registeredNTDefs, true);
+        Map defMap = validator.validateNodeTypeDefs(ntDefs, registeredNTDefs);
-        // DIFF JACKRABBIT: detection of built-in NodeTypes not possible
-        // omit check for build-in nodetypes which would cause failure
-        // make sure node type is not currently in use
-        checkForReferencesInContent(nodeTypeName);
-
+        // NOTE: conflict with existing content not asserted on client
-            // DIFF JR: no distiction of built-in nts
-        // make sure node types are not currently in use
-        for (Iterator iter = nodeTypeNames.iterator(); iter.hasNext();) {
-            QName ntName = (QName) iter.next();
-            checkForReferencesInContent(ntName);
-        }
-
-
-
+        // NOTE: conflict with existing content not asserted on client
-        // DIFF JACKRABBIT: detection of built-in NodeTypes not possible
-        // omit check for build-in nodetypes which would cause failure
-
-        /**
-         * validate new node type definition
-         */
-        EffectiveNodeTypeImpl ent = validator.validateNodeTypeDef(ntd, registeredNTDefs, true);
-
-        // DIFF JACKRABBIT: removed check for severity of nt modification
+        /* validate new node type definition */
+        EffectiveNodeTypeImpl ent = validator.validateNodeTypeDef(ntd, registeredNTDefs);
-        // DIFF JACKRABBIT: check for registered name removed, since duplicate code
-
-        // DIFF JACKRABBIT: detection of built-in NodeTypes not possible
-        // omit check for build-in nodetypes which would cause failure
-
+        /*
+         * NOTE: detection of built-in NodeTypes not possible, since the client
+         * reads all nodetypes from the 'server' only without being able to
+         * destinguish between built-in and custom-defined nodetypes.
+         */
-        /**
+        /*
-        /**
+        /*
-    /**
-     * Checks whether there is existing content that would conflict with the
-     * given node type definition.
-     * <p/>
-     * This method is not implemented yet and always throws a
-     * <code>RepositoryException</code>.
-     * <p/>
-     * TODO
-     * <ol>
-     * <li>apply deep locks on root nodes in every workspace or alternatively
-     * put repository in 'exclusive' or 'single-user' mode
-     * <li>check if the given node type (or any node type that has
-     * dependencies on this node type) is currently referenced by nodes
-     * in the repository.
-     * <li>check if applying the changed definitions to the affected items would
-     * violate existing node type constraints
-     * <li>apply and persist changes to affected nodes (e.g. update
-     * definition id's, etc.)
-     * </ul>
-     * <p/>
-     * the above checks/actions are absolutely necessary in order to
-     * guarantee integrity of repository content.
-     *
-     * @param ntd The node type definition replacing the former node type
-     *            definition of the same name.
-     * @throws RepositoryException If there is conflicting content or if the
-     *                             check failed for some other reason.
-     */
-    private void checkForConflictingContent(QNodeTypeDefinition ntd)
-            throws RepositoryException {
-        /**
-         * collect names of node types that have dependencies on the given
-         * node type
-         */
-        //Set dependentNTs = getDependentNodeTypes(ntd.getQName());
-
-        throw new RepositoryException("not yet implemented");
-    }
-
-    /**
-     * Checks whether there is existing content that directly or indirectly
-     * refers to the specified node type.
-     * <p/>
-     * This method is not implemented yet and always throws a
-     * <code>RepositoryException</code>.
-     * <p/>
-     * TODO:
-     * <ol>
-     * <li>apply deep locks on root nodes in every workspace or alternatively
-     * put repository in 'single-user' mode
-     * <li>check if the given node type is currently referenced by nodes
-     * in the repository.
-     * <li>remove the node type if it is not currently referenced, otherwise
-     * throw exception
-     * </ul>
-     * <p/>
-     * the above checks are absolutely necessary in order to guarantee
-     * integrity of repository content.
-     *
-     * @param nodeTypeName The name of the node type to be checked.
-     * @throws RepositoryException If the specified node type is currently
-     *                             being referenced or if the check failed for
-     *                             some other reason.
-     */
-    private void checkForReferencesInContent(QName nodeTypeName)
-            throws RepositoryException {
-        throw new RepositoryException("not yet implemented");
-    }
