JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

- clustering support
- move definition & def-reader/writer to spi-commons

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1095338 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.privilege.PrivilegeDefinition;
-        ClusterRecordProcessor, WorkspaceEventChannel  {
+        ClusterRecordProcessor, WorkspaceEventChannel, PrivilegeEventChannel  {
+     * Privilege listener.
+     */
+    private PrivilegeEventListener privilegeListener;
+
+    /**
+    //----------------------------------------------< PrivilegeEventChannel >---
+    /**
+     * {@inheritDoc}
+     * @see PrivilegeEventChannel#registeredPrivileges(java.util.Collection)
+     */
+    public void registeredPrivileges(Collection<PrivilegeDefinition> definitions) {
+        if (status != STARTED) {
+            log.info("not started: nodetype operation ignored.");
+            return;
+        }
+        ClusterRecord record = null;
+        boolean succeeded = false;
+
+        try {
+            record = new PrivilegeRecord(definitions, producer.append());
+            record.write();
+            record.update();
+            setRevision(record.getRevision());
+            succeeded = true;
+        } catch (JournalException e) {
+            String msg = "Unable to create log entry: " + e.getMessage();
+            log.error(msg);
+        } catch (Throwable e) {
+            String msg = "Unexpected error while creating log entry.";
+            log.error(msg, e);
+        } finally {
+            if (!succeeded && record != null) {
+                record.cancelUpdate();
+            }
+        }
+    }
+
+    public void setListener(PrivilegeEventListener listener) {
+        privilegeListener = listener;
+    }
+
+    //--------------------------------------------------------------------------
+    public void process(PrivilegeRecord record) {
+        if (privilegeListener == null) {
+            String msg = "Privilege listener unavailable.";
+            log.error(msg);
+            return;
+        }
+        try {
+            privilegeListener.externalRegisteredPrivileges(record.getDefinitions());
+        } catch (RepositoryException e) {
+            String msg = "Unable to deliver privilege registration operation: " + e.getMessage();
+            log.error(msg);
+        }
+    }
+
