JCR-1795: advertise RFC 4918 compliance (compliance class 3), clean up code handling compliance classes, add support in OptionsMethod, add test case

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@703185 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Set;
-    private final HashSet allowedMethods = new HashSet();
+    private final Set allowedMethods = new HashSet();
+    private final Set complianceClasses = new HashSet();
-     *
-     * @return
+    /**
+     * Checks if the specified compliance class is supported by the resource
+     * identified by the original URI.
+     *
+     * @param complianceClass WebDAV compliance class
+     * @return true if the given compliance class is contained in the 'DAV' response header.
+     */
+    public boolean hasComplianceClass(String complianceClass) {
+        checkUsed();
+        return complianceClasses.contains(complianceClass);
+    }
+
+
+    /**
+     * Returns an array of String listing the WebDAV compliance classes.
+     *
+     * @return all compliance classes supported by the resource specified by the original URI.
+     */
+    public String[] getComplianceClasses() {
+        checkUsed();
+        return (String[]) complianceClasses.toArray(new String[complianceClasses.size()]);
+    }
-     * This implementation will parse the <tt>Allow</tt> header to obtain
-     * the set of methods supported by the resource identified by the Request-URI.
+     * This implementation will parse the <tt>Allow</tt> and <tt>DAV</tt> headers to obtain
+     * the set of HTTP methods and WebDAV compliance classes supported by the resource
+     * identified by the Request-URI.
+        Header dav = getResponseHeader("DAV");
+        if (dav != null) {
+            String[] classes = dav.getValue().split(",");
+            for (int i = 0; i < classes.length; i++) {
+                complianceClasses.add(classes[i].trim());
+            }
+        }
