JCR-EXT: Cleaning up and upgrading to 0.16.4.1 (work in progress, does not compile!)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@169146 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.BinaryValue;
-import javax.jcr.BooleanValue;
-import javax.jcr.DateValue;
-import javax.jcr.DoubleValue;
-import javax.jcr.Item;
-import javax.jcr.LongValue;
-import javax.jcr.ReferenceValue;
+import javax.jcr.PropertyType;
-import javax.jcr.StringValue;
+import javax.jcr.ValueFactory;
-import javax.jcr.nodetype.PropertyDef;
+import javax.jcr.nodetype.PropertyDefinition;
- * TODO
+ * Property base class.
-    protected BaseProperty(Item item) {
-        super(item);
+    /** Protected constructor. This class is only useful when extended. */
+    protected BaseProperty() {
+    /**
+     * Implemented by calling <code>visitor.visit(this)</code>.
+     * {@inheritDoc}
+     */
+    /** Always returns <code>false</code>. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setValue(getSession().getValueFactory().createValue(value))</code>.
+     * {@inheritDoc}
+     */
-        setValue(new StringValue(value));
+        setValue(getSession().getValueFactory().createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>setValue(stringValues)</code> with
+     * an array of Values that were created from the given strings by
+     * <code>getSession().getValueFactory().createValue(values[i]))</code>.
+     * {@inheritDoc}
+     */
+        ValueFactory factory = getSession().getValueFactory();
-            stringValues[i] = new StringValue(values[i]);
+            stringValues[i] = factory.createValue(values[i]);
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setValue(getSession().getValueFactory().createValue(value))</code>.
+     * {@inheritDoc}
+     */
-        setValue(new BinaryValue(value));
+        setValue(getSession().getValueFactory().createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setValue(getSession().getValueFactory().createValue(value))</code>.
+     * {@inheritDoc}
+     */
-        setValue(new LongValue(value));
+        setValue(getSession().getValueFactory().createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setValue(getSession().getValueFactory().createValue(value))</code>.
+     * {@inheritDoc}
+     */
-        setValue(new DoubleValue(value));
+        setValue(getSession().getValueFactory().createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setValue(getSession().getValueFactory().createValue(value))</code>.
+     * {@inheritDoc}
+     */
-        setValue(new DateValue(value));
+        setValue(getSession().getValueFactory().createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setValue(getSession().getValueFactory().createValue(value))</code>.
+     * {@inheritDoc}
+     */
-        setValue(new BooleanValue(value));
+        setValue(getSession().getValueFactory().createValue(value));
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>setValue(getSession().getValueFactory().createValue(value))</code>.
+     * {@inheritDoc}
+     */
-        try {
-            setValue(new ReferenceValue(value));
-        } catch (IllegalArgumentException e) {
-            throw new ValueFormatException("Invalid reference target", e);
-        }
+        setValue(getSession().getValueFactory().createValue(value));
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /** Not implemented. {@inheritDoc} */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getValue().getString()</code>.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getValue().getStream()</code>.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getValue().getLong()</code>.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getValue().getDouble()</code>.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getValue().getDate()</code>.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getValue().getBoolean()</code>.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling
+     * <code>getSession().getNodeByUUID(getString())</code>.
+     * {@inheritDoc}
+     */
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getType()</code> and returning
+     * <code>-1</code> if type is binary or <code>getString().length()</code>
+     * otherwise.
+     * {@inheritDoc}
+     */
-        throw new UnsupportedRepositoryOperationException();
+        if (getType() == PropertyType.BINARY) {
+            return -1;
+        } else {
+            return getString().length();
+        }
-    /** {@inheritDoc} */
-    public PropertyDef getDefinition() throws RepositoryException {
+    /** Not implemented. {@inheritDoc} */
+    public PropertyDefinition getDefinition() throws RepositoryException {
-    /** {@inheritDoc} */
+    /**
+     * Implemented by calling <code>getValue().getType()</code>.
+     * {@inheritDoc}
+     */
