JCR-956: Extract shared functionality to base classes.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@543865 13f79535-47bb-0310-9956-ffa450edef68

-import java.rmi.Remote;
-import java.rmi.RemoteException;
-import javax.servlet.http.HttpServlet;
-import org.apache.jackrabbit.commons.servlet.ServletRepository;
- *      "<code>org/apache/jackrabbit/rmi/remote/RepoteRepository</code>".
+ *      "<code>org/apache/jackrabbit/rmi/remote/RemoteRepository</code>".
-public class JNDIRMIBindingServlet extends HttpServlet {
+public class JNDIRMIBindingServlet extends RemoteBindingServlet {
-    private static final long serialVersionUID = -8981536241655836775L;
+    private static final long serialVersionUID = 3387067305901189614L;
-     * The remote repository reference. Kept to avoid it from being
-     * collected as garbage when no clients are connected.
-     */
-    private Remote remote;
-
-    /**
-            RemoteAdapterFactory factory = getRemoteAdapterFactory();
-            remote = factory.getRemoteRepository(new ServletRepository(this));
-            context.bind(location, remote);
-        } catch (RemoteException e) {
-            throw new ServletException(
-                    "Failed to create the remote repository reference", e);
+            context.bind(location, getRemoteRepository());
-    /**
-     * Instantiates and returns the configured remote adapter factory.
-     *
-     * @return remote adapter factory
-     * @throws ServletException if the factory could not be instantiated
-     */
-    private RemoteAdapterFactory getRemoteAdapterFactory()
-            throws ServletException {
-        String name = getInitParameter(RemoteAdapterFactory.class.getName());
-        if (name == null) {
-            name = JackrabbitServerAdapterFactory.class.getName();
-        }
-        try {
-            Class factoryClass = Class.forName(name);
-            return (RemoteAdapterFactory) factoryClass.newInstance();
-        } catch (ClassNotFoundException e) {
-            throw new ServletException(
-                    "Remote adapter factory class not found: " + name, e);
-        } catch (InstantiationException e) {
-            throw new ServletException(
-                    "Failed to instantiate the adapter factory: " + name, e);
-        } catch (IllegalAccessException e) {
-            throw new ServletException(
-                    "Adapter factory constructor is not public: " + name, e);
-        } catch (ClassCastException e) {
-            throw new ServletException(
-                    "Invalid remote adapter factory class: " + name, e);
-        }
-    }
-
