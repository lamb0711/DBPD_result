JCR-73: Improved PersistenceManager javadocs.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159570 13f79535-47bb-0310-9956-ffa450edef68

- * <code>PersistenceManager</code> ...
+ * Persistence manager interface. Persistence managers are
+ * internal Jackrabbit components that handle the persistent
+ * storage of content nodes and properties. A persistence
+ * manager knows how to retrieve the persistent states of
+ * content items and how to atomically save a set of changes
+ * to the persistent state.
+ * <p>
+ * Each workspace of a Jackrabbit content repository uses separate
+ * persistence manager to store the content in that workspace. Also
+ * the Jackrabbit version handler uses a separate persistence manager.
+ * The persistence managers in use are configured in the Jackrabbit
+ * XML configuration files. The configured persistence managers are
+ * instantiated and initialized using the JavaBeans conventions.
+ *
+ * <h2>Persistence manager life cycle</h2>
+ * <p>
+ * The life cycle of a persistence manager instance contains four phases:
+ * <ol>
+ *   <li>Instantiation, where the instance is created and possible
+ *       configuration properties are set using the JavaBean conventions.
+ *       During this phase the persistence manager should not attempt to
+ *       reference any external resources. 
+ *   <li>Initialization, where the {@link #init(PMContext) init} method
+ *       is invoked to bind the persistence manager with a given
+ *       {@link PMContext context}.
+ *   <li>Normal usage, where the various create, load, exists, and store
+ *       methods of the persistence manager are used to manage the
+ *       persistent content items.
+ *   <li>Closing, where the {@link #close() close} method is invoked
+ *       to close the persistence manager and release all acquired
+ *       resources.
+ * </ol>
-     * Initialize this persistent manager.
+     * Initializes the persistence manager. The persistence manager is
+     * permanently bound to the given context, and any required external
+     * resources are acquired.
+     * <p>
+     * An appropriate exception is thrown if the persistence manager
+     * initialization fails for whatever reason. In this case the
+     * state of the persistence manager is undefined and the instance
+     * should be discarded.
+     *
-     * @throws Exception if an error occurs
+     * @throws Exception if the persistence manager intialization failed
-     * Close this persistence manager. After having closed a persistence
-     * manager, further operations on this object are treated as illegal
-     * and throw
-     * @throws Exception if an error occurs
+     * Closes the persistence manager. The consistency of the persistent
+     * storage is guaranteed and all acquired resources are released.
+     * It is an error to invoke any methods on a closed persistence manager,
+     * and implementations are free to enforce this constraint by throwing
+     * IllegalStateExceptions in such cases.
+     * <p>
+     * An appropriate exception is thrown if the persistence manager
+     * could not be closed properly. In this case the state of the
+     * persistence manager is undefined and the instance should be
+     * discarded.
+     *
+     * @throws Exception if the persistence manager failed to close properly
-     * Create a new node state instance.
+     * Creates a new node state instance with the given id.
+     *
-     * @return node state instance.
+     * @return node state instance
-     * Create a new property state instance.
+     * Creates a new property state instance with the given id.
+     *
-     * @return property state instance.
+     * @return property state instance
+     *
-     * @throws NoSuchItemStateException if the item does not exist
-     * @throws ItemStateException if an error occurs
+     * @throws NoSuchItemStateException if the node state does not exist
+     * @throws ItemStateException if another error occurs
+     *
-     * @throws NoSuchItemStateException if the item does not exist
-     * @throws ItemStateException if an error occurs
+     * @throws NoSuchItemStateException if the property state does not exist
+     * @throws ItemStateException if another error occurs
-     * @param id node target id
-     * @throws NoSuchItemStateException if the item does not exist
-     * @throws ItemStateException if an error occurs
+     *
+     * @param id reference target node id
+     * @throws NoSuchItemStateException if the target node does not exist
+     * @throws ItemStateException if another error occurs
-     * Determines if there's <code>NodeState</code> data
-     * for the given item.
-     * @param id
-     * @return
-     * @throws ItemStateException
+     * Checks whether the identified node exists.
+     *
+     * @param id node id
+     * @return <code>true</code> if the node exists,
+     *         <code>false</code> otherwise
+     * @throws ItemStateException on persistence manager errors
-     * Determines if there's <code>PropertyState</code> data
-     * for the given item.
-     * @param id
-     * @return
-     * @throws ItemStateException
+     * Checks whether the identified property exists.
+     *
+     * @param id property id
+     * @return <code>true</code> if the property exists,
+     *         <code>false</code> otherwise
+     * @throws ItemStateException on persistence manager errors
-     * Determines if there's <code>NodeReferences</code> data for
-     * the given target id.
+     * Checks whether references of the identified target node exist.
-     * @param targetId
-     * @return
-     * @throws ItemStateException
+     * @param targetId target node id
+     * @return <code>true</code> if the references exist,
+     *         <code>false</code> otherwise
+     * @throws ItemStateException on persistence manager errors
-     * Save all states and node references, atomically.
+     * Atomically saves the given set of changes.
+     *
-     * @throws ItemStateException if an error occurs
+     * @throws ItemStateException if the changes could not be saved
+
