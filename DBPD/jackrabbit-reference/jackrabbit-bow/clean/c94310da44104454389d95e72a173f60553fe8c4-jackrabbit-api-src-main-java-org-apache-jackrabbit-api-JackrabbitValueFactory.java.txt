JCR-4355: Javadoc fixes and improvements for new direct binary access API

Patch provided by Alexander Klimetschek, with review and contribution from Julian Reschke

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1838616 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.InputStream;
+import org.apache.jackrabbit.api.binary.BinaryDownloadOptions;
- * provide.  A {@link ValueFactory} may also implement this interface without
- * supporting all of the capabilities in this interface.  Each method of the
+ * provide. A {@link ValueFactory} may also implement this interface without
+ * supporting all of the capabilities in this interface. Each method of the
+ *
- * Currently this interface defines the following optional features:
+ * This interface defines the following optional features:
- *     <li>Direct Binary Access - enable a client to upload or download binaries
+ *     <li>
+ *         Direct Binary Access - enable a client to upload or download binaries
+ *     </li>
+ *
- * <p>
+ *
- * upload or download binaries directly to/from a storage location.  For
- * example, this might be a cloud storage providing high-bandwidth direct
- * network access.  This API allows for requests to be authenticated and for
- * access permission checks to take place within the repository, but for clients
- * to then access the storage location directly.
+ * upload or download binaries directly to/from a storage location. For example,
+ * this might be a cloud storage providing high-bandwidth direct network access.
+ * This API allows for requests to be authenticated and for access permission
+ * checks to take place within the repository, but for clients to then access
+ * the storage location directly.
+ *
- * The feature consists of two parts, direct binary upload and direct binary
- * download.
+ * The feature consists of two parts, download and upload.
+ *
+ * <h3>Direct Binary Download</h3>
+ *
+ * This feature enables remote clients to download binaries directly from a
+ * storage location without streaming the binary through the Jackrabbit-based
+ * application.
+ *
+ * For an existing {@link Binary} value that implements {@link BinaryDownload},
+ * a read-only URI (see {@link BinaryDownload#getURI(BinaryDownloadOptions)})
+ * can be retrieved and passed to a remote client, such as a browser.
- * <p>
+ *
+ *
- * When adding binaries already present on the same JVM or server as Jackrabbit
- * or Oak, for example because they were generated locally, please use the
- * regular JCR API for {@link javax.jcr.Property#setValue(Binary) adding
- * binaries through input streams} instead. This feature is solely designed for
- * remote clients.
+ * Note: When adding binaries already present on the same JVM/server as
+ * the JCR repository, for example because they were generated locally, please
+ * use the regular JCR API {@link ValueFactory#createBinary(InputStream)}
+ * instead. This feature is solely designed for remote clients.
+ *
- *         BinaryUpload information} to the remote client.
+ *         BinaryUpload instructions} to the remote client.
- *         directly to the binary storage provider.  The {@link BinaryUpload}
+ *         directly to the binary storage provider. The {@link BinaryUpload}
- *         how to complete the upload successfully. For more information, see
- *         the BinaryUpload documentation.
+ *         how to complete the upload successfully.
- *         application that step 2 is complete.  The upload token returned in
+ *         application that step 2 is complete. The upload token returned in
- *         BinaryUpload#getUploadToken()} is passed by the client to {@link
+ *         BinaryUpload#getUploadToken()} is passed by the application to {@link
- *         and {@link Session#save() persist} it.
+ *         and persist it using {@link Session#save}.
- * <p>
- * <h3>Direct Binary Download</h3>
- * <p>
- * The direct binary download process is described in detail in {@link
- * BinaryDownload}.
+
-     * Initiate a transaction to upload binary data directly to a storage
-     * location.  {@link IllegalArgumentException} will be thrown if an upload
-     * cannot be supported for the required parameters, or if the parameters are
-     * otherwise invalid.  For example, if the value of {@code maxSize} exceeds
-     * the size limits for a single binary upload for the implementation or the
-     * service provider, or if the value of {@code maxSize} divided by {@code
-     * maxParts} exceeds the size limit for an upload or upload part of the
-     * implementation or the service provider, {@link IllegalArgumentException}
-     * may be thrown.
-     * <p>
-     * Each service provider has specific limitations on upload sizes,
-     * multi-part upload support, part sizes, etc. which can result in {@link
-     * IllegalArgumentException} being thrown.  You should consult the
-     * documentation for your underlying implementation and your service
-     * provider for details.
-     * <p>
-     * If this call is successful, a {@link BinaryUpload} is returned
-     * which contains the information a client needs to successfully complete
-     * a direct upload.
+     * Initiate a transaction to upload a binary directly to a storage
+     * location and return {@link BinaryUpload} instructions for a remote client.
+     * Returns {@code null} if the feature is not available.
-     * @param maxSize The expected maximum size of the binary to be uploaded by
-     *         the client.  If the actual size of the binary is known, this
-     *         size should be used; otherwise, the client should make a best
-     *         guess.  If a client calls this method with one size and then
-     *         later determines that the guess was too small, the transaction
-     *         should be restarted by calling this method again with the correct
-     *         size.
+     * <p>
+     * {@link IllegalArgumentException} will be thrown if an upload
+     * cannot be supported for the required parameters, or if the parameters are
+     * otherwise invalid. Each service provider has specific limitations.
+     *
+     * @param maxSize The exact size of the binary to be uploaded or the
+     *                estimated maximum size if the exact size is unknown.
+     *                If the estimation was too small, the transaction
+     *                should be restarted by invoking this method again
+     *                using the correct size.
-     *         accept.  The implementation will ensure that an upload of size
-     *         {@code maxSize} can be completed by splitting the value of {@code
-     *         maxSize} into parts, such that the size of the largest part does
-     *         not exceed any known implementation or service provider
-     *         limitations on upload part size and such that the number of parts
-     *         does not exceed the value of {@code maxURIs}.  If this is not
-     *         possible, {@link IllegalArgumentException} will be thrown.  A
-     *         client may specify -1 for this value, indicating that any number
-     *         of URIs may be returned.
-     * @return A {@link BinaryUpload} that can be used by the client to complete
-     *         the upload via a call to {@link #completeBinaryUpload(String)},
+     *                accept, for example due to message size limitations.
+     *                A value of -1 indicates no limit.
+     *                Upon a successful return, it is ensured that an upload
+     *                of {@code maxSize} can be completed by splitting the
+     *                binary into {@code maxURIs} parts, otherwise
+     *                {@link IllegalArgumentException} will be thrown.
+     *
+     * @return A {@link BinaryUpload} providing the upload instructions,
+     *
-     *         invalid or if a valid upload cannot be completed given the
-     *         provided arguments.
-     * @throws AccessDeniedException if it is determined that insufficient
-     *         permission exists to perform the upload.
+     *         invalid or if an upload cannot be completed given the
+     *         provided arguments. For example, if the value of {@code maxSize}
+     *         exceeds the size limits for a single binary upload for the
+     *         implementation or the service provider, or if the value of
+     *         {@code maxSize} divided by {@code maxParts} exceeds the size
+     *         limit for an upload or upload part.
+     *
+     * @throws AccessDeniedException if the session has insufficient
+     *         permission to perform the upload.
-     * Complete a transaction to upload binary data directly to a storage
-     * location.  The client must provide a valid {@code uploadToken} that can
-     * only be obtained via a previous call to {@link
-     * #initiateBinaryUpload(long, int)}.  If the {@code uploadToken} is
-     * unreadable or invalid, {@link IllegalArgumentException} will be thrown.
-     * <p>
-     * Calling this method does not associate the returned {@link Binary} with
-     * any location in the repository.  It is the responsibility of the client
-     * to do this if desired.
-     * <p>
-     * The {@code uploadToken} can be obtained from the {@link
-     * BinaryUpload} returned from a prior call to {@link
-     * #initiateBinaryUpload(long, int)}.  Clients should treat the {@code
-     * uploadToken} as an immutable string, and should expect that
-     * implementations will sign the string and verify the signature when this
-     * method is called.
+     * Complete the transaction of uploading a binary directly to a storage
+     * location and return a {@link Binary} to set as value for a binary
+     * JCR property. The binary is not automatically associated with
+     * any location in the JCR.
-     * @param uploadToken A String that is used to identify the direct upload
-     *         transaction.
+     * <p>
+     * The client must provide a valid upload token, obtained from
+     * {@link BinaryUpload#getUploadToken()} when this transaction was initialized
+     * using {@link #initiateBinaryUpload(long, int)}.
+     * If the {@code uploadToken} is unreadable or invalid,
+     * an {@link IllegalArgumentException} will be thrown.
+     *
+     * @param uploadToken A String identifying the upload transaction.
+     *
-     * @throws IllegalArgumentException if the {@code uploadToken} is
-     *         unreadable or invalid.
-     * @throws RepositoryException if a repository access error occurs.
+     *
+     * @throws IllegalArgumentException if the {@code uploadToken} is invalid or
+     *         does not identify a known binary upload.
+     * @throws RepositoryException if another error occurs.
