JCR-2183 - Provide overridables for lock checking
- Add public LockInfo class
- Make AbstractLockInfo package private
- Rename internal LockInfo classes to avoid confusion
- Add overridable in LockManagerImpl with default implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@790892 13f79535-47bb-0310-9956-ffa450edef68

-public abstract class AbstractLockInfo {
+abstract class AbstractLockInfo implements LockInfo {
+    
-     * Session currently holding lock
-     */
-    protected SessionImpl lockHolder;
-
-    /**
-    protected boolean live;
+    private boolean live;
+
+    /**
+     * Session currently holding lock
+     */
+    private SessionImpl lockHolder;
+    
+    /**
+     * {@inheritDoc}
+     */
+    public boolean isLockHolder(Session session) {
+    	return lockHolder == session;
+    }
+    
+    /**
+     * {@inheritDoc}
+     */
+    public String getLockOwner() {
+    	return lockOwner;
+    }
+    
+    /**
+     * {@inheritDoc}
+     */
+    public boolean isDeep() {
+    	return deep;
+    }
-
+    
-     * Return the lock token as seen by the session passed as parameter. If
-     * this session is currently holding the lock, it will get the lock token
-     * itself, otherwise a <code>null</code> string.
-     *
-     * @param session The session asking for the lock token.
-     * @return lock token.
+     * {@inheritDoc}
-        if (session.equals(lockHolder)) {
+    	if (isLockHolder(session)) {
+    
+    /**
+     * Return the lock token.
+     * 
+     * @return lock token
+     */
+    public String getLockToken() {
+    	return lockToken.toString();
+    }
