JCR-428 BLOBFileValues might be discarded to early

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@408647 13f79535-47bb-0310-9956-ffa450edef68

-     * flag indicating if this instance is backed by a temporarily allocated resource/buffer
+     * flag indicating if this instance represents a <i>temporary</i> value
+     * whose dynamically allocated resources can be explicitly freed on
+     * {@link #discard()}.
-     * underlying blob file value
-     */
-    private final BLOBFileValue blob;
-
-    /**
+     * <p/>
+     * The new instance represents a <i>temporary</i> value whose dynamically
+     * allocated resources will be freed explicitly on {@link #discard()}.
+        this(in, true);
+    }
+
+    /**
+     * Creates a new <code>BLOBFileValue</code> instance from an
+     * <code>InputStream</code>. The contents of the stream is spooled
+     * to a temporary file or to a byte buffer if its size is smaller than
+     * {@link #MAX_BUFFER_SIZE}.
+     * <p/>
+     * The <code>temp</code> parameter governs whether dynamically allocated
+     * resources will be freed explicitly on {@link #discard()}. Note that any
+     * dynamically allocated resources (temp file/buffer) will be freed
+     * implicitly once this instance has been gc'ed.
+     *
+     * @param in stream to be represented as a <code>BLOBFileValue</code> instance
+     * @param temp flag indicating whether this instance represents a
+     *             <i>temporary</i> value whose resources can be explicitly freed
+     *             on {@link #discard()}.
+     * @throws IOException if an error occurs while reading from the stream or
+     *                     writing to the temporary file
+     */
+    public BLOBFileValue(InputStream in, boolean temp) throws IOException {
-        blob = null;
-        // this instance is backed by a temporarily allocated resource/buffer
-        temp = true;
+        this.temp = temp;
-        blob = null;
-        blob = null;
-        blob = null;
-     * Creates a new <code>BLOBFileValue</code> instance from a existing blob.
-     *
-     * @param blob the existing blob
-     */
-    public BLOBFileValue(BLOBFileValue blob) {
-        // this instance is backed by a blob
-        this.blob = blob;
-        // set 'real' file to null
-        file = null;
-        fsResource = null;
-        // this instance is not backed by temporarily allocated resource/buffer
-        temp = false;
-    }
-
-
-    /**
-        } else if (blob != null) {
-            return blob.getLength();
-        } else if (blob != null) {
-            blob.discard();
-        } else if (blob != null) {
-            blob.delete(pruneEmptyParentDirs);
-        if (blob != null) {
-            blob.spool(out);
-            return;
-        }
-
-                // ignore
-        } else if (blob != null) {
-            return blob.toString();
-                    && (blob == null ? other.blob == null : blob.equals(other.blob))
-        } else if (blob != null) {
-            return blob.getStream();
-
-    /**
-     * Creates a copy of this blob file value that has the 'temporary' field
-     * cleared. if the 'temp' flag is not set, <code>this</code> is returned.
-     *
-     * @return a new value based on this one.
-     */
-    public BLOBFileValue copy() {
-        return temp ? new BLOBFileValue(this) : this;
-    }
-}
+}
