JCR-2715: Improved join query performance

Simplify selector query construction in LuceneQueryFactory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1024260 13f79535-47bb-0310-9956-ffa450edef68

+import static org.apache.jackrabbit.core.query.lucene.FieldNames.PROPERTIES;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_MIXINTYPES;
+import static org.apache.jackrabbit.spi.commons.name.NameConstants.JCR_PRIMARYTYPE;
+import static org.apache.lucene.search.BooleanClause.Occur.SHOULD;
+
+import javax.jcr.query.qom.Selector;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+     * Node type manager
+     */
+    private final NodeTypeManager ntManager;
+
+    /**
+    private final String mixinTypesField;
+
+    private final String primaryTypeField;
+
-            Map<Name, Value> bindVariables) {
+            Map<Name, Value> bindVariables) throws RepositoryException {
+        this.ntManager = session.getWorkspace().getNodeTypeManager();
+        this.mixinTypesField = nsMappings.translateName(JCR_MIXINTYPES);
+        this.primaryTypeField = nsMappings.translateName(JCR_PRIMARYTYPE);
-        List<Term> terms = new ArrayList<Term>();
-        String mixinTypesField = npResolver.getJCRName(NameConstants.JCR_MIXINTYPES);
-        String primaryTypeField = npResolver.getJCRName(NameConstants.JCR_PRIMARYTYPE);
+        return create(ntManager.getNodeType(selector.getNodeTypeName()));
+    }
-        NodeTypeManager ntMgr = session.getWorkspace().getNodeTypeManager();
-        NodeType base = null;
-        try {
-            base = ntMgr.getNodeType(session.getJCRName(selector.getNodeTypeQName()));
-        } catch (RepositoryException e) {
-            // node type does not exist
-        }
-
-        if (base != null && base.isMixin()) {
+    private Term createNodeTypeTerm(NodeType type) throws RepositoryException {
+        String field;
+        if (type.isMixin()) {
-            Term t = new Term(FieldNames.PROPERTIES,
-                    FieldNames.createNamedValue(mixinTypesField,
-                            npResolver.getJCRName(selector.getNodeTypeQName())));
-            terms.add(t);
+            field = mixinTypesField;
-            Term t = new Term(FieldNames.PROPERTIES,
-                    FieldNames.createNamedValue(primaryTypeField,
-                            npResolver.getJCRName(selector.getNodeTypeQName())));
-            terms.add(t);
+            field = primaryTypeField;
+        String name = nsMappings.translateName(session.getQName(type.getName()));
+        return new Term(PROPERTIES, FieldNames.createNamedValue(field, name));
+    }
-        // now search for all node types that are derived from base
-        if (base != null) {
-            NodeTypeIterator allTypes = ntMgr.getAllNodeTypes();
-            while (allTypes.hasNext()) {
-                NodeType nt = allTypes.nextNodeType();
-                NodeType[] superTypes = nt.getSupertypes();
-                if (Arrays.asList(superTypes).contains(base)) {
-                    Name n = session.getQName(nt.getName());
-                    String ntName = nsMappings.translateName(n);
-                    Term t;
-                    if (nt.isMixin()) {
-                        // search on jcr:mixinTypes
-                        t = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(mixinTypesField, ntName));
-                    } else {
-                        // search on jcr:primaryType
-                        t = new Term(FieldNames.PROPERTIES,
-                                FieldNames.createNamedValue(primaryTypeField, ntName));
-                    }
-                    terms.add(t);
-                }
+    private Query create(NodeType type) throws RepositoryException {
+        List<Term> terms = new ArrayList<Term>();
+
+        String name = type.getName();
+        NodeTypeIterator allTypes = ntManager.getAllNodeTypes();
+        while (allTypes.hasNext()) {
+            NodeType nt = allTypes.nextNodeType();
+            if (nt.isNodeType(name)) {
+                terms.add(createNodeTypeTerm(nt));
-        Query q;
+
-            q = new JackrabbitTermQuery(terms.get(0));
+            return new JackrabbitTermQuery(terms.get(0));
-                b.add(new JackrabbitTermQuery(term), BooleanClause.Occur.SHOULD);
+                b.add(new JackrabbitTermQuery(term), SHOULD);
-            q = b;
+            return b;
-        return q;
