JCR-249, JCR-253

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@331281 13f79535-47bb-0310-9956-ffa450edef68

-    private InputStream in;
+    private File content;
-     *
-     * @return
-     * @see org.apache.jackrabbit.webdav.DavResource#getStream()
+        if (!initedProps)  {
-        return in;
+        }
+        if (content != null) {
+            try {
+                return new FileInputStream(content);
+            } catch (FileNotFoundException e) {
+                // should not occur
+                log.error(e.getMessage());
+            }
+        }
+        return null;
-     * In order to add / set any other repository property on the underlaying
+     * In order to add / set any other repository property on the underlying
-     * @param inputCxt
+     * @param inputContext
-    public void addMember(DavResource resource, InputContext inputCxt)
+    public void addMember(DavResource resource, InputContext inputContext)
-            InputStream in = (inputCxt != null) ? inputCxt.getInputStream() : null;
+            InputStream in = (inputContext != null) ? inputContext.getInputStream() : null;
+            String memberName = getItemName(resource.getLocator().getJcrPath());
-                    n.addNode(getItemName(itemPath));
+                    n.addNode(memberName);
-                    n.setProperty(getItemName(itemPath), in);
+                    n.setProperty(memberName, in);
-     * @see org.apache.jackrabbit.webdav.DavResource#addMember(org.apache.jackrabbit.webdav.DavResource)
-     */
-    public void addMember(DavResource resource) throws DavException {
-        InputContext ctx = new InputContext();
-        ctx.setInputStream(resource.getStream());
-        addMember(resource, ctx);
-    }
-
-    /**
-     * while deleting the underlaying item.
+     * while deleting the underlying item.
-     * on the underlaying repository item fails, <code>null</code> is return.
+     * on the underlying repository item fails, <code>null</code> is return.
-     * Creates a lock on this resource by locking the underlaying
+     * Creates a lock on this resource by locking the underlying
-     * {@link javax.jcr.lock lock} present on the underlaying {@link javax.jcr.Node node}
+     * {@link javax.jcr.lock lock} present on the underlying {@link javax.jcr.Node node}
-     * Remove the write lock from this resource by unlocking the underlaying
+     * Remove the write lock from this resource by unlocking the underlying
-     * underlaying repository node allow to reorder this nodes children.
+     * underlying repository node allow to reorder this nodes children.
-     * resource: write locks (exclusive or exclusive session-scoped) in case the underlaying
+     * resource: write locks (exclusive or exclusive session-scoped) in case the underlying
-                File tmpfile = File.createTempFile(prefix, null, null);
-                tmpfile.deleteOnExit();
-                FileOutputStream out = new FileOutputStream(tmpfile);
+                content = File.createTempFile(prefix, null, null);
+                content.deleteOnExit();
+                FileOutputStream out = new FileOutputStream(content);
-                in = new FileInputStream(tmpfile);
-
-                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLENGTH, new Long(tmpfile.length())));
+                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLENGTH, new Long(content.length())));
