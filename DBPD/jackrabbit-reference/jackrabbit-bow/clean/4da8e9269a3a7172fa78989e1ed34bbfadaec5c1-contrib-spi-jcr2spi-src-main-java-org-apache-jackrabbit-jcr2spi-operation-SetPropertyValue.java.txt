work in progress

- operations: rename getAffectedIds to getAffectedStates
- operations: return ItemState params instead of ids whereever possible and
  let OperationVisitor deal with all kind of issues arising with SPI ids.
- AddNode/AddProperty operations: don't list state to be created as affected. Not required since operations are collected upon refresh/save, in which case a 'new' item can never be the starting point.
- transient move: let parent NodeState handle the move/renaming of child states
- transient reorder: let parent NodeState handle the reorder logic
- NodeState: remove unused methods and mark setParent private
- NodeImpl: protected getNodeId() no more used by subclasses in version package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431887 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.PropertyId;
-    private final PropertyId propertyId;
+    private final PropertyState propertyState;
-    private SetPropertyValue(PropertyId propertyId, int propertyType, QValue[] values, boolean isMultiValued) {
-        this.propertyId = propertyId;
+    private SetPropertyValue(PropertyState propertyState, int propertyType, QValue[] values, boolean isMultiValued) {
+        this.propertyState = propertyState;
-        addAffectedItemId(propertyId);
+        
+        addAffectedItemState(propertyState);
-    public PropertyId getPropertyId() {
-        return propertyId;
+    public PropertyState getPropertyState() {
+        return propertyState;
-        SetPropertyValue sv = new SetPropertyValue(propState.getPropertyId(), valueType, iva, propState.isMultiValued());
+        SetPropertyValue sv = new SetPropertyValue(propState, valueType, iva, propState.isMultiValued());
