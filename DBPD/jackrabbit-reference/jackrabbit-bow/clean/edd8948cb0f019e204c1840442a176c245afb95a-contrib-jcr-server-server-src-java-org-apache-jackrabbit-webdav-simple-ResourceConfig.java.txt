JCR-249, JCR-253

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@331281 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.server.io.IOManager;
+import org.apache.jackrabbit.server.io.DefaultIOManager;
+import org.jdom.JDOMException;
+import java.io.IOException;
+    private IOManager ioManager;
-     * &lt;!ELEMENT config ((collection | noncollection)?, filter?) &gt;
+     * &lt;!ELEMENT config (iomanager, (collection | noncollection)?, filter?) &gt;
+     * &lt;!ELEMENT iomanager (class) &gt;
+            Element ioElem = root.getChild("iomanager");
+            if (ioElem != null) {
+                Object inst = buildClassFromConfig(ioElem.getChild("class"));
+                if (inst != null && inst instanceof IOManager) {
+                   ioManager = (IOManager)inst;
+                }
+            } else {
+                log.error("Resource configuration: mandatory 'iomanager' element is missing.");
+            }
+
-                resourceFilter = buildResourceFilter(filter.getChild("class"));
+                Object inst = buildClassFromConfig(filter.getChild("class"));
+                if (inst != null && inst instanceof ResourceFilter) {
+                    resourceFilter = (ResourceFilter)inst;
+                }
-        } catch (Exception e) {
-            log.warn("Error while reading resource configuration: " + e.getMessage());
+        } catch (IOException e) {
+            log.error("Invalid resource configuration: " + e.getMessage());
+        } catch (JDOMException e) {
+            log.error("Invalid resource configuration: " + e.getMessage());
-    private ResourceFilter buildResourceFilter(Element classElement) {
+    private Object buildClassFromConfig(Element classElement) {
+        Object instance = null;
-            return null;
+            return instance;
-                Class cl = Class.forName(className);
-                Class[] interfaces = cl.getInterfaces();
-                boolean isfilterClass = false;
-                for (int i = 0; i < interfaces.length && !isfilterClass; i++) {
-                    isfilterClass = (interfaces[i].equals(ResourceFilter.class));
-                }
-                if (isfilterClass) {
-                    return (ResourceFilter) cl.newInstance();
+                Class c = Class.forName(className);
+                instance = c.newInstance();
-                    log.warn("Class '" + className + "' specified does not represent a resource filter > using default.");
-                }
-            } else {
-                log.warn("Invalid filter configuration: missing 'class' element");
+                log.error("Invalid configuration: missing 'class' element");
-            log.warn("Error while reading filter configuration. Using empty filter instead.");
+            log.error("Error while create class instance: " + e.getMessage());
-        return null;
+        return instance;
+
+    public IOManager getIOManager() {
+        if (ioManager == null) {
+            log.debug("ResourceConfig: missing io-manager > building DefaultIOManager ");
+            ioManager = new DefaultIOManager();
+        }
+        return ioManager;
+    }
+
