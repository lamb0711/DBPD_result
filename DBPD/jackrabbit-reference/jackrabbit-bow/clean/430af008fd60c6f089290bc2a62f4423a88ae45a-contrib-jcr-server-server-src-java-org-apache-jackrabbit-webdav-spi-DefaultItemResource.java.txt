- refactoring of DavSession acquisition in jcr-server (JCR-66)
- some cleanup

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157746 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.spi.property.ValuesProperty;
+import org.apache.jackrabbit.webdav.spi.property.LengthsProperty;
-import org.jdom.Element;
-                prop.setValue(new ValuesProperty(property).getValues());
+                prop.setValue(new ValuesProperty(property).getValues(prop.getType()));
-
-    //------------------------------------------------------< inner classes >---
-    /**
-     * <code>ValuesProperty</code> extends {@link DavProperty} providing
-     * utilities to handle the multiple values of the property item represented
-     * by this resource.
-     */
-    private class ValuesProperty extends AbstractDavProperty {
-
-        private final Element[] value;
-
-        /**
-         * Wrap the specified <code>DavProperty</code> in a new <code>ValuesProperty</code>.
-         *
-         * @param property
-         */
-        private ValuesProperty(DavProperty property) {
-            super(JCR_VALUES, false);
-
-            if (!JCR_VALUES.equals(property.getName())) {
-               throw new IllegalArgumentException("ValuesProperty may only be created with a property that has name="+JCR_VALUES.getName());
-            }
-
-            Element[] elems = new Element[0];
-            if (property.getValue() instanceof List) {
-                Iterator elemIt = ((List)property.getValue()).iterator();
-                ArrayList valueElements = new ArrayList();
-                while (elemIt.hasNext()) {
-                    Object el = elemIt.next();
-                    /* make sure, only Elements with name 'value' are used for
-                     * the 'value' field. any other content (other elements, text,
-                     * comment etc.) is ignored. NO bad-request/conflict error is
-                     * thrown.
-                     */
-                    if (el instanceof Element && "value".equals(((Element)el).getName())) {
-                        valueElements.add(el);
-                    }
-                }
-                /* fill the 'value' with the valid 'value' elements found before */
-                elems = (Element[])valueElements.toArray(new Element[valueElements.size()]);
-            } else {
-                new IllegalArgumentException("ValuesProperty may only be created with a property that has a list of 'value' elements as content.");
-            }
-            // finally set the value to the DavProperty
-            value = elems;
-        }
-
-        /**
-         * Create a new <code>ValuesProperty</code> from the given {@link Value Value
-         * array}.
-         *
-         * @param values Array of Value objects as obtained from the JCR property.
-         */
-        private ValuesProperty(Value[] values) throws ValueFormatException, RepositoryException {
-            super(JCR_VALUES, false);
-
-            Element[] propValue = new Element[values.length];
-            for (int i = 0; i < values.length; i++) {
-                propValue[i] = new Element(XML_VALUE, ItemResourceConstants.NAMESPACE);
-                propValue[i].addContent(values[i].getString());
-            }
-            // finally set the value to the DavProperty
-            value = propValue;
-        }
-
-        /**
-         * Converts the value of this property to a {@link javax.jcr.Value value array}.
-         * Please note, that the convertion is done by using the {@link ValueHelper}
-         * class that is not part of the JSR170 API.
-         *
-         * @return Array of Value objects
-         * @throws RepositoryException
-         */
-        private Value[] getValues() throws ValueFormatException, RepositoryException {
-            Element[] propValue = (Element[])getValue();
-            Value[] values = new Value[propValue.length];
-            for (int i = 0; i < propValue.length; i++) {
-                values[i] = ValueHelper.convert(propValue[i].getText(), ((Property)item).getType());
-            }
-            return values;
-        }
-
-        /**
-         * Returns an array of {@link Element}s representing the value of this
-         * property.
-         *
-         * @return an array of {@link Element}s
-         */
-        public Object getValue() {
-            return value;
-        }
-    }
-
-    /**
-     * <code>LengthsProperty</code> extends {@link DavProperty} providing
-     * utilities to handle the multiple lengths of the property item represented
-     * by this resource.
-     */
-    private class LengthsProperty extends AbstractDavProperty {
-
-        private final Element[] value;
-
-        /**
-         * Create a new <code>LengthsProperty</code> from the given long array.
-         *
-         * @param lengths as retrieved from the JCR property
-         */
-        private LengthsProperty(long[] lengths) {
-            super(JCR_LENGTHS, false);
-
-            Element[] elems = new Element[lengths.length];
-            for (int i = 0; i < lengths.length; i++) {
-                elems[i] = new Element(XML_LENGTH, ItemResourceConstants.NAMESPACE);
-                elems[i].addContent(String.valueOf(lengths[i]));
-            }
-            this.value = elems;
-        }
-
-        /**
-         * Returns an array of {@link Element}s representing the value of this
-         * property.
-         *
-         * @return an array of {@link Element}s
-         */
-        public Object getValue() {
-            return value;
-        }
-    }
