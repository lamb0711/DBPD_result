JCR-3206 JSR-283 support for RMI / Implementation of the missing versioning parts

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1377571 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.UnsupportedRepositoryOperationException;
+import org.apache.jackrabbit.rmi.remote.RemoteIterator;
+import org.apache.jackrabbit.rmi.remote.RemoteNode;
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            remote.cancelMerge(absPath, version.getIdentifier());
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            remote.doneMerge(absPath, version.getIdentifier());
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
-            return getFactory().getNode(session, remote.getActivity());
+            RemoteNode activity = remote.getActivity();
+            if (activity == null) {
+                return null;
+            } else {
+                return getFactory().getNode(session, activity);
+            }
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            RemoteIterator iterator = remote.merge(activityNode.getIdentifier());
+            return getFactory().getNodeIterator(session, iterator);
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            remote.removeActivity(activityNode.getIdentifier());
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            String[] versionIdentifiers = new String[versions.length];
+            for (int i = 0; i < versions.length; i++) {
+                versionIdentifiers[i] = versions[i].getIdentifier();
+            }
+            remote.restore(versionIdentifiers, removeExisting);
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            remote.restore(version.getIdentifier(), removeExisting);
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            remote.restoreVI(absPath, version.getIdentifier(), removeExisting);
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
-        throw new UnsupportedRepositoryOperationException("TODO: JCR-3206");
+        try {
+            RemoteNode remoteActivity;
+            if (activity == null) {
+                remoteActivity = remote.setActivity(null);
+            } else {
+                remoteActivity = remote.setActivity(activity.getIdentifier());
+            }
+            if (remoteActivity == null) {
+                return null;
+            } else {
+                return getFactory().getNode(session, remoteActivity);
+            }
+        } catch (RemoteException e) {
+            throw new RemoteRepositoryException(e);
+        }
