Implemented support for value comparison and general comparison using multi valued properties.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126294 13f79535-47bb-0310-9956-ffa450edef68

-            appendName(node.getProperty(), resolver, sb);
+            if (node.getOperation() == OPERATION_EQ_VALUE) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" = ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_EQ_GENERAL) {
+                appendValue(node, sb);
+                sb.append(" IN ");
+                appendName(node.getProperty(), resolver, sb);
+            } else if (node.getOperation() == OPERATION_GE_VALUE) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" >= ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_GT_VALUE) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" > ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_LE_VALUE) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" <= ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_LIKE) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" LIKE ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_LT_VALUE) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" < ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_NE_VALUE) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" <> ");
+                appendValue(node, sb);
+            } else if (node.getOperation() == OPERATION_NE_GENERAL) {
+                appendValue(node, sb);
+                sb.append(" NOT IN ");
+                appendName(node.getProperty(), resolver, sb);
+            } else if (node.getOperation() == OPERATION_NULL) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" IS NULL");
+            } else if (node.getOperation() == OPERATION_NOT_NULL) {
+                appendName(node.getProperty(), resolver, sb);
+                sb.append(" IS NOT NULL");
+            } else {
+                exceptions.add(new InvalidQueryException("Invalid operation: " + node.getOperation()));
+            }
+
+            if (node.getOperation() == OPERATION_LIKE && node.getStringValue().indexOf('\\') > -1) {
+                sb.append(" ESCAPE '\\'");
+            }
-
-        if (node.getOperation() == OPERATION_EQ) {
-            sb.append(" = ");
-            appendValue(node, sb);
-        } else if (node.getOperation() == OPERATION_GE) {
-            sb.append(" >= ");
-            appendValue(node, sb);
-        } else if (node.getOperation() == OPERATION_GT) {
-            sb.append(" > ");
-            appendValue(node, sb);
-        } else if (node.getOperation() == OPERATION_LE) {
-            sb.append(" <= ");
-            appendValue(node, sb);
-        } else if (node.getOperation() == OPERATION_LIKE) {
-            sb.append(" LIKE ");
-            appendValue(node, sb);
-        } else if (node.getOperation() == OPERATION_LT) {
-            sb.append(" < ");
-            appendValue(node, sb);
-        } else if (node.getOperation() == OPERATION_NE) {
-            sb.append(" <> ");
-            appendValue(node, sb);
-        } else if (node.getOperation() == OPERATION_NULL) {
-            sb.append(" IS NULL");
-        } else if (node.getOperation() == OPERATION_NOT_NULL) {
-            sb.append(" IS NOT NULL");
-        } else {
-            exceptions.add(new InvalidQueryException("Invalid operation: " + node.getOperation()));
-        }
-
-        if (node.getOperation() == OPERATION_LIKE && node.getStringValue().indexOf('\\') > -1) {
-            sb.append(" ESCAPE '\\'");
-        }
-
