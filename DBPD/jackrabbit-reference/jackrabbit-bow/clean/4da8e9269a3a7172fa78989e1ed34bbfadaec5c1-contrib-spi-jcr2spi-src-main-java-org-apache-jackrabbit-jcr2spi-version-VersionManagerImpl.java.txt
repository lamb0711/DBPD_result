work in progress

- operations: rename getAffectedIds to getAffectedStates
- operations: return ItemState params instead of ids whereever possible and
  let OperationVisitor deal with all kind of issues arising with SPI ids.
- AddNode/AddProperty operations: don't list state to be created as affected. Not required since operations are collected upon refresh/save, in which case a 'new' item can never be the starting point.
- transient move: let parent NodeState handle the move/renaming of child states
- transient reorder: let parent NodeState handle the reorder logic
- NodeState: remove unused methods and mark setParent private
- NodeImpl: protected getNodeId() no more used by subclasses in version package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431887 13f79535-47bb-0310-9956-ffa450edef68

-        Operation ci = Checkin.create(nodeState.getNodeId());
+        Operation ci = Checkin.create(nodeState);
-        Operation co = Checkout.create(nodeState.getNodeId());
+        Operation co = Checkout.create(nodeState);
-    public void removeVersion(NodeId versionHistoryId, NodeId versionId) throws RepositoryException {
-        Operation op = Remove.create(versionId, versionHistoryId);
+    public void removeVersion(NodeState versionHistoryState, NodeState versionState) throws RepositoryException {
+        Operation op = Remove.create(versionState);
-    public void addVersionLabel(NodeId versionHistoryId, NodeId versionId, QName qLabel, boolean moveLabel) throws RepositoryException {
-        Operation op = AddLabel.create(versionHistoryId, versionId, qLabel, moveLabel);
+    public void addVersionLabel(NodeState versionHistoryState, NodeState versionState, QName qLabel, boolean moveLabel) throws RepositoryException {
+        Operation op = AddLabel.create(versionHistoryState, versionState, qLabel, moveLabel);
-    public void removeVersionLabel(NodeId versionHistoryId, NodeId versionId, QName qLabel) throws RepositoryException {
-        Operation op = RemoveLabel.create(versionHistoryId, versionId, qLabel);
+    public void removeVersionLabel(NodeState versionHistoryState, NodeState versionState, QName qLabel) throws RepositoryException {
+        Operation op = RemoveLabel.create(versionHistoryState, versionState, qLabel);
-    public Collection merge(NodeId nodeId, String workspaceName, boolean bestEffort) throws RepositoryException {
+    public Collection merge(NodeState nodeState, String workspaceName, boolean bestEffort) throws RepositoryException {
-        Operation op = Merge.create(nodeId, workspaceName, bestEffort, mergeFailedCollector);
+        Operation op = Merge.create(nodeState, workspaceName, bestEffort, mergeFailedCollector);
-    public void resolveMergeConflict(NodeId nodeId, NodeId versionId, boolean done) throws RepositoryException {
-        Operation op = ResolveMergeConflict.create(nodeId, versionId, done);
+    public void resolveMergeConflict(NodeState nodeState, NodeState versionState, boolean done) throws RepositoryException {
+        Operation op = ResolveMergeConflict.create(nodeState, versionState, done);
