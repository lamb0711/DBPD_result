- added new files-system based PersistenceManager 
  (org.apache.jackrabbit.core.state.obj.ObjectPersistenceManager)
  implementation that uses more efficient serialization format
- misc. minor fixes
- updated todo.txt and tasks.xml


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55707 13f79535-47bb-0310-9956-ffa450edef68

-                    /**
-                     * use hard-coded uuid for root node rather than generating
-                     * a different uuid per repository instance; using a
-                     * hard-coded uuid makes it easier to copy/move entire
-                     * workspaces from one repository instance to another.
-                     */
-                    //rootNodeUUID = new UUID(new String(chars)).toString();
-                    rootNodeUUID = ROOT_NODE_UUID;
-
+                    rootNodeUUID = new UUID(new String(chars)).toString();
+/*
+*/
+                /**
+                 * use hard-coded uuid for root node rather than generating
+                 * a different uuid per repository instance; using a
+                 * hard-coded uuid makes it easier to copy/move entire
+                 * workspaces from one repository instance to another.
+                 */
+                rootNodeUUID = ROOT_NODE_UUID;
-                        writer.write(rootUUID.toString());
+                        writer.write(rootNodeUUID);
-        // persist repository properties
-        try {
-            storeRepProps();
-        } catch (RepositoryException e) {
-            log.error("failed to persist repository properties", e);
-        }
-
-         * todo free resources, shutdown workspaces, close sessions,
-         * shutdown item state mgr's, persistence mgr's, etc.
+         * todo close sessions, close item state mgr's, free resources, etc.
+
+        for (Iterator it = wspConfigs.values().iterator(); it.hasNext();) {
+            WorkspaceConfig wspConfig = (WorkspaceConfig) it.next();
+            try {
+                // close workspace file system
+                wspConfig.getFileSystem().close();
+            } catch (FileSystemException e) {
+                log.error("Error while closing filesystem of workspace " + wspConfig.getName(), e);
+            }
+            try {
+                // close persistence manager
+                wspConfig.getPersistenceManager().close();
+            } catch (Exception e) {
+                log.error("Error while closing persistence manager of workspace " + wspConfig.getName(), e);
+            }
+        }
+
+        // persist repository properties
-            // close master file system (this will also invalidate sub file systems)
+            storeRepProps();
+        } catch (RepositoryException e) {
+            log.error("failed to persist repository properties", e);
+        }
+
+        try {
+            // close repository file system
-            log.error("Error while closing filesystem", e);
+            log.error("Error while closing repository filesystem", e);
