JCR-54: Switched from JDOM to standard DOM in Jackrabbit configuration handling.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160449 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.JDOMException;
-import org.jdom.input.SAXBuilder;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
-        Element element = parent.getChild(SEARCH_INDEX_ELEMENT);
-        if (element != null) {
-            // Search implementation class
-            String className =
-                getAttribute(element, CLASS_ATTRIBUTE, DEFAULT_QUERY_HANDLER);
+        NodeList children = parent.getChildNodes();
+        for (int i = 0; i < children.getLength(); i++) {
+            Node child = children.item(i);
+            if (child.getNodeType() == Node.ELEMENT_NODE
+                    && SEARCH_INDEX_ELEMENT.equals(child.getNodeName())) {
+                Element element = (Element) child;
-            // Search parameters
-            Properties parameters = parseParameters(element);
+                // Search implementation class
+                String className = getAttribute(
+                        element, CLASS_ATTRIBUTE, DEFAULT_QUERY_HANDLER);
-            // File system implementation
-            FileSystemConfig fsc = new FileSystemConfig(
-                    parseBeanConfig(element, FILE_SYSTEM_ELEMENT));
+                // Search parameters
+                Properties parameters = parseParameters(element);
-            return new SearchConfig(className, parameters, fsc);
-        } else {
-            return null;
+                // File system implementation
+                FileSystemConfig fsc = new FileSystemConfig(
+                        parseBeanConfig(element, FILE_SYSTEM_ELEMENT));
+
+                return new SearchConfig(className, parameters, fsc);
+            }
+        return null;
-        Iterator iterator = element.getChildren(PARAM_ELEMENT).iterator();
-        while (iterator.hasNext()) {
-            Element parameter = (Element) iterator.next();
-            String name = parameter.getAttributeValue(NAME_ATTRIBUTE);
-            if (name == null) {
-                throw new ConfigurationException("Parameter name not set.");
+        NodeList children = element.getChildNodes();
+        for (int i = 0; i < children.getLength(); i++) {
+            Node child = children.item(i);
+            if (child.getNodeType() == Node.ELEMENT_NODE
+                    && PARAM_ELEMENT.equals(child.getNodeName())) {
+                Element parameter = (Element) child;
+                String name = parameter.getAttribute(NAME_ATTRIBUTE);
+                if (name == null) {
+                    throw new ConfigurationException("Parameter name not set");
+                }
+                String value = parameter.getAttribute(VALUE_ATTRIBUTE);
+                if (value == null) {
+                    throw new ConfigurationException("Parameter value not set");
+                }
+                parameters.put(name, replaceVariables(value));
-            String value = parameter.getAttributeValue(VALUE_ATTRIBUTE);
-            if (value == null) {
-                throw new ConfigurationException("Parameter value not set.");
-            }
-            parameters.put(name, replaceVariables(value));
-            SAXBuilder builder = new SAXBuilder();
+            DocumentBuilderFactory factory =
+                DocumentBuilderFactory.newInstance();
+            DocumentBuilder builder = factory.newDocumentBuilder();
-            Document document = builder.build(xml);
-            return document.getRootElement();
-        } catch (JDOMException e) {
+            Document document = builder.parse(xml);
+            return document.getDocumentElement();
+        } catch (ParserConfigurationException e) {
+            throw new ConfigurationException(
+                    "Unable to create configuration XML parser", e);
+        } catch (SAXException e) {
-        Element element = parent.getChild(name);
-        if (element != null) {
-            return element;
-        } else {
-            throw new ConfigurationException(
-                    "Configuration element " + name + " not found in "
-                    + parent.getName() + ".");
+        NodeList children = parent.getChildNodes();
+        for (int i = 0; i < children.getLength(); i++) {
+            Node child = children.item(i);
+            if (child.getNodeType() == Node.ELEMENT_NODE
+                    && name.equals(child.getNodeName())) {
+                return (Element) child;
+            }
+        throw new ConfigurationException(
+                "Configuration element " + name + " not found in "
+                + parent.getNodeName() + ".");
-        String value = element.getAttributeValue(name);
+        String value = element.getAttribute(name);
-                    + element.getName() + ".");
+                    + element.getNodeName() + ".");
-        String value = element.getAttributeValue(name);
+        String value = element.getAttribute(name);
