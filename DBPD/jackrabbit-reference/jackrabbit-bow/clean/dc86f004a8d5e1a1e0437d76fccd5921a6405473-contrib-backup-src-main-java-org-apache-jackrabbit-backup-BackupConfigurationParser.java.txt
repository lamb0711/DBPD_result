JCR-442: Committed Nicolas' latest contrib/backup changes (patch-backup-060728.txt) with some modifications.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@426435 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.BufferedReader;
+import org.apache.jackrabbit.core.config.RepositoryConfigurationParser;
-    
-    /*
-     * A static method to get the XML conf file and return it as a String. 
-     * It is static since it doesn't have to be used with this configuration XML file.
-     * 
-     * TODO: where is the best place for this method?
-     * 
-     * @param the InputSource 
-     */
-    public static String toXmlString(InputSource xml) throws IOException {
-        
-        String line;
-        StringBuffer content = new StringBuffer();
-        BufferedReader readBuffer = new BufferedReader(xml.getCharacterStream());
-        
-        while((line = readBuffer.readLine()) != null){
-            content.append(line);
-            content.append("\r\n");
-        }
-        readBuffer.close();
-        return content.toString();
-    } 
-    
-   
+ 
+     * @param myFile 
+     * @param repoConfFile 
-     * @throws SizeException 
-    public BackupConfig parseBackupConfig(InputSource xml)
-            throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, SizeException, IOException {
-     
+    public BackupConfig parseBackupConfig(InputSource xml, String myFile, String repoConfFile, String login, String password)
+            throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+     //TODO refactor dependency between this method and BackupConfig
-        return new BackupConfig(pmc, path, allResources);
+        return new BackupConfig(pmc, path, allResources, myFile, repoConfFile, login, password);
-     * For now only support of all workspace backup. I think it is actually simpler to manage on the end-user side.
+     * For now only support of all workspace backup. I think it is actually simpler to manage on the end-user side. Be careful the objects aren't usable yet
-    private Collection parseResourcesConfig( Element root) throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, SizeException {
+    private Collection parseResourcesConfig(Element root) throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException  {
-         *      addResource to ManagerBackup
+         *      addResource to BackupManager
-            objects.addElement( (Backup) c.newInstance());
-            
-            
+            objects.addElement( (Backup) c.newInstance());        
+    
+    /**
+     * Parses the PersistenceManager config.
+     *
+     * @param parent parent of the <code>PersistenceManager</code> element
+     * @return persistence manager configuration
+     * @throws ConfigurationException if the configuration is broken
+     */
+    protected PersistenceManagerConfig parsePersistenceManagerConfig(
+            Element parent) throws ConfigurationException {
+        return new PersistenceManagerConfig(
+                parseBeanConfig(parent, RepositoryConfigurationParser.PERSISTENCE_MANAGER_ELEMENT));
+    }
