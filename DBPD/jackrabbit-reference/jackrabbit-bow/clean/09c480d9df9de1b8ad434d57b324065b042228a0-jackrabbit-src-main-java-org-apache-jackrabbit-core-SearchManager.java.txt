Open up some access modifiers to allow for better extension of the default query handler.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@350022 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.AbstractQueryImpl;
+     * Name of the parameter that indicates the query implementation class.
+     */
+    private static final String PARAM_QUERY_IMPL = "queryClass";
+
+    /**
+     * Name of the default query implementation class.
+     */
+    private static final String DEFAULT_QUERY_IMPL_CLASS = QueryImpl.class.getName();
+
+    /**
+     * Fully qualified name of the query implementation class.
+     * This class must extend {@link org.apache.jackrabbit.core.query.AbstractQueryImpl}!
+     */
+    private final String queryImplClassName;
+
+    /**
+        queryImplClassName = config.getParameters().getProperty(PARAM_QUERY_IMPL, DEFAULT_QUERY_IMPL_CLASS);
+
-        return new QueryImpl(session, itemMgr, handler, statement, language);
+        AbstractQueryImpl query = createQueryInstance();
+        query.init(session, itemMgr, handler, statement, language);
+        return query;
-        return new QueryImpl(session, itemMgr, handler, node);
+        AbstractQueryImpl query = createQueryInstance();
+        query.init(session, itemMgr, handler, node);
+        return query;
+    /**
+     * Creates a new instance of an {@link AbstractQueryImpl} which is not
+     * initialized.
+     *
+     * @return an new query instance.
+     * @throws RepositoryException if an error occurs while creating a new query
+     *                             instance.
+     */
+    protected AbstractQueryImpl createQueryInstance() throws RepositoryException {
+        try {
+            Object obj = Class.forName(queryImplClassName).newInstance();
+            if (obj instanceof AbstractQueryImpl) {
+                return (AbstractQueryImpl) obj;
+            } else {
+                throw new IllegalArgumentException(queryImplClassName +
+                        " is not of type " + AbstractQueryImpl.class.getName());
+            }
+        } catch (Throwable t) {
+            throw new RepositoryException("Unable to create query: " + t.toString());
+        }
+    }
