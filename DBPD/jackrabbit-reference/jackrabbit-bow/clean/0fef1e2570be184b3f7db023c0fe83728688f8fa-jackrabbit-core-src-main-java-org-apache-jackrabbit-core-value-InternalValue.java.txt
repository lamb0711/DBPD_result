JCR-2149 Data Store: remove kill switch "InternalValue.USE_DATA_STORE"

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@784691 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.io.IOUtils;
-import java.io.File;
-     * If set to 'true', the data store is used when configured in repository.xml
-     */
-    public static final boolean USE_DATA_STORE =
-        Boolean.valueOf(System.getProperty("org.jackrabbit.useDataStore", "true")).booleanValue();
-
-    /**
-                if (USE_DATA_STORE) {
-                    BLOBFileValue blob = null;
-                    if (value instanceof BinaryValueImpl) {
-                        BinaryValueImpl bin = (BinaryValueImpl) value;
-                        DataIdentifier identifier = bin.getDataIdentifier();
-                        if (identifier != null) {
-                            // access the record to ensure it is not garbage collected
-                            if (store.getRecordIfStored(identifier) != null) {
-                                // it exists - so we don't need to stream it again
-                                // but we need to create a new object because the original
-                                // one might be in a different data store (repository)
-                                blob = BLOBInDataStore.getInstance(store, identifier);
-                            }
+                BLOBFileValue blob = null;
+                if (value instanceof BinaryValueImpl) {
+                    BinaryValueImpl bin = (BinaryValueImpl) value;
+                    DataIdentifier identifier = bin.getDataIdentifier();
+                    if (identifier != null) {
+                        // access the record to ensure it is not garbage collected
+                        if (store.getRecordIfStored(identifier) != null) {
+                            // it exists - so we don't need to stream it again
+                            // but we need to create a new object because the original
+                            // one might be in a different data store (repository)
+                            blob = BLOBInDataStore.getInstance(store, identifier);
-                    if (blob == null) {
-                        blob = getBLOBFileValue(store, value.getBinary().getStream(), true);
-                    }
-                    result = new InternalValue(blob);
-                } else if (value instanceof BLOBFileValue) {
-                    result = new InternalValue((BLOBFileValue) value);
-                } else {
-                    InputStream stream = value.getBinary().getStream();
-                    try {
-                        result = createTemporary(stream);
-                    } finally {
-                        IOUtils.closeQuietly(stream);
-                    }
+                if (blob == null) {
+                    blob = getBLOBFileValue(store, value.getBinary().getStream(), true);
+                }
+                result = new InternalValue(blob);
-        if (USE_DATA_STORE) {
-            return new InternalValue(BLOBInMemory.getInstance(value));
-        }
-        return new InternalValue(new BLOBValue(value));
+        return new InternalValue(BLOBInMemory.getInstance(value));
-        if (USE_DATA_STORE) {
-            return new InternalValue(getBLOBFileValue(null, value, true));
-        }
-        try {
-            return new InternalValue(new BLOBValue(value, true));
-        } catch (IOException e) {
-            throw new RepositoryException("Error creating temporary file", e);
-        }
+        return new InternalValue(getBLOBFileValue(null, value, true));
-        if (USE_DATA_STORE) {
-            return new InternalValue(getBLOBFileValue(store, value, false));
-        }
-        try {
-            return new InternalValue(new BLOBValue(value, false));
-        } catch (IOException e) {
-            throw new RepositoryException("Error creating file", e);
-        }
+        return new InternalValue(getBLOBFileValue(store, value, false));
-        if (USE_DATA_STORE) {
-            return new InternalValue(getBLOBFileValue(null, value, false));
-        }
-        try {
-            return new InternalValue(new BLOBValue(value, false));
-        } catch (IOException e) {
-            throw new RepositoryException("Error creating file", e);
-        }
+        return new InternalValue(getBLOBFileValue(null, value, false));
-        if (USE_DATA_STORE) {
-            return new InternalValue(BLOBInResource.getInstance(value));
-        }
-        return new InternalValue(new BLOBValue(value));
-    }
-
-    /**
-     * @param value
-     * @return
-     * @throws IOException
-     */
-    public static InternalValue create(File value) throws IOException {
-        assert !USE_DATA_STORE;
-        return new InternalValue(new BLOBValue(value));
+        return new InternalValue(BLOBInResource.getInstance(value));
-        assert USE_DATA_STORE && store != null;
-        if (USE_DATA_STORE) {
-            if (v.isImmutable()) {
-                return this;
-            }
+        if (v.isImmutable()) {
+            return this;
-        assert USE_DATA_STORE;
-                return new BLOBValue(getString().getBytes(InternalValueFactory.DEFAULT_ENCODING));
+                byte[] data = getString().getBytes(InternalValueFactory.DEFAULT_ENCODING);
+                return BLOBInMemory.getInstance(data);
