- Use custom collection implementation for item state listeners.
reduces memory consumption caused by those collections to about 1/3.
Performance of common operations on the WeakIdentityCollection scale linearly and outperforms the previously used ReferenceMap until it contains aprox. 100 listeners. Most item states only contain few listeners.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378539 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.map.ReferenceMap;
+import org.apache.jackrabbit.util.WeakIdentityCollection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.Collection;
-    private final transient Map listeners =
-            Collections.synchronizedMap(
-                    new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK));
+    private final transient Collection listeners = new WeakIdentityCollection(5);
-        listeners.clear();
+        synchronized (listeners) {
+            listeners.clear();
+        }
-        ItemStateListener[] la = new ItemStateListener[listeners.size()];
-        Iterator iter = listeners.values().iterator();
-        int cnt = 0;
-        while (iter.hasNext()) {
-            la[cnt++] = (ItemStateListener) iter.next();
+        ItemStateListener[] la;
+        synchronized (listeners) {
+            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        ItemStateListener[] la = new ItemStateListener[listeners.size()];
-        Iterator iter = listeners.values().iterator();
-        int cnt = 0;
-        while (iter.hasNext()) {
-            la[cnt++] = (ItemStateListener) iter.next();
+        ItemStateListener[] la;
+        synchronized (listeners) {
+            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        ItemStateListener[] la = new ItemStateListener[listeners.size()];
-        Iterator iter = listeners.values().iterator();
-        int cnt = 0;
-        while (iter.hasNext()) {
-            la[cnt++] = (ItemStateListener) iter.next();
+        ItemStateListener[] la;
+        synchronized (listeners) {
+            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        ItemStateListener[] la = new ItemStateListener[listeners.size()];
-        Iterator iter = listeners.values().iterator();
-        int cnt = 0;
-        while (iter.hasNext()) {
-            la[cnt++] = (ItemStateListener) iter.next();
+        ItemStateListener[] la;
+        synchronized (listeners) {
+            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        if (!listeners.containsKey(listener)) {
-            listeners.put(listener, listener);
+        synchronized (listeners) {
+            assert (!listeners.contains(listener));
+            listeners.add(listener);
-        listeners.remove(listener);
+        synchronized (listeners) {
+            listeners.remove(listener);
+        }
