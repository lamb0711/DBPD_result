JCR-442: Committed patch-060808-backup.txt from Nicolas.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429606 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.io.ObjectInputStream;
+import java.util.HashMap;
+import java.util.zip.ZipException;
+import javax.jcr.NamespaceRegistry;
+import org.apache.jackrabbit.core.config.RepositoryConfig;
+import org.apache.jackrabbit.core.fs.BasedFileSystem;
+import org.apache.jackrabbit.core.fs.FileSystem;
+import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
+import org.apache.jackrabbit.core.nodetype.InvalidNodeTypeDefException;
+import org.apache.jackrabbit.core.nodetype.NodeTypeDefStore;
+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
- 
+    private String repoConfFile;
+    private String home;
+
-     * @throws RepositoryException 
-     * @throws LoginException 
+     * @throws RepositoryException
+     * @throws LoginException
-    public RepositoryBackup(RepositoryImpl repo, BackupConfig conf) throws LoginException, RepositoryException {
-        super(repo, conf);
+    public RepositoryBackup(RepositoryImpl repo, BackupConfig conf, String login, String password) throws LoginException, RepositoryException {
+        super(repo, conf, login, password);
-    
+
+    public RepositoryBackup(String repoConfFile, String home) {
+        super();
+        this.repoConfFile = repoConfFile;
+        this.home = home;
+    }
-     * 
+     *
-     * @throws IOException 
-     * @throws RepositoryException 
-     * 
-     * 
+     * @throws IOException
+     * @throws RepositoryException
+     *
+     *
-        
-        File file = this.conf.getRepoConfFile();
+
+        File file = this.getConf().getRepoConfFile();
-        
-        //Properties
-        Properties p = new Properties();
-        String[] keys = repo.getDescriptorKeys();
-        for (int i = 0; i < keys.length; i++) {
-            p.setProperty(keys[i], repo.getDescriptor(keys[i]));
-        }
-        ByteArrayOutputStream bos = new ByteArrayOutputStream();
-        p.store(bos,"");
-        h.write("repository_properties", bos);
-        
-        // Root node ID
-        NodeImpl nod = (NodeImpl) this.getSession().getRootNode();
-        NodeId n = nod.getNodeId();
-        
-        //We persist the string as a serialized object to avoid compatibility issue
-        String s = n.toString();
-        ByteArrayOutputStream fos = new ByteArrayOutputStream();
-        ObjectOutputStream oos = new ObjectOutputStream(fos);
-        oos.writeObject(s);       
-        h.write("repository_rootNode", fos);
-    public void restore(BackupIOHandler h) {
-        // TODO Auto-generated method stub
-        
+    public void restore(BackupIOHandler h) throws ZipException, IOException, RepositoryException {
+
+       //Restore repository.xml
+       File f = new File(this.repoConfFile);
+       h.read("repository_xml", f);
+
+       // Launch the repository and launch it.
+       RepositoryConfig repoConf = RepositoryConfig.create(this.repoConfFile, this.home);
+       this.setRepo(RepositoryImpl.create(repoConf));
+       
+       
+//       this.getRepo().setNodeTypeRegistry(createNodeTypeRegistry(nsReg, new BasedFileSystem(this.getRepo().getStore()), "/nodetypes"));
+          /*
+           * 1. Create a NodeTypeRegistry specific for the restore (redefines only the load built in types path)
+           * 2. Update the NodeTypeRegistry in repo
+           */
+  
+       
-}
+
+}
