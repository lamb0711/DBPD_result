work in progress

- additional create method

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431341 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.Reader;
+import java.io.StringReader;
-     * @param qValue
+     * @param values
-    public static QValue create(String qValue, int type) {
-        if (qValue == null) {
+    public static QValue[] create(String[] values) {
+        QValue[] ret = new QValue[values.length];
+        for (int i = 0; i < values.length; i++) {
+            ret[i] = new QValue(values[i]);
+        }
+        return ret;
+    }
+
+    /**
+     * @param value
+     * @return
+     */
+    public static QValue create(String value, int type) {
+        if (value == null) {
-                return new QValue(Boolean.valueOf(qValue).booleanValue());
+                return new QValue(Boolean.valueOf(value).booleanValue());
-                return new QValue(ISO8601.parse(qValue));
+                return new QValue(ISO8601.parse(value));
-                return new QValue(Double.valueOf(qValue).doubleValue());
+                return new QValue(Double.valueOf(value).doubleValue());
-                return new QValue(Long.valueOf(qValue).longValue());
+                return new QValue(Long.valueOf(value).longValue());
-                return new QValue(qValue, true);
+                return new QValue(value, true);
-                return new QValue(Path.valueOf(qValue));
+                return new QValue(Path.valueOf(value));
-                return new QValue(QName.valueOf(qValue));
+                return new QValue(QName.valueOf(value));
-                return new QValue(qValue);
+                return new QValue(value);
+     * @param values
+     * @return
+     */
+    public static QValue[] create(String[] values, int type) {
+        QValue[] ret = new QValue[values.length];
+        for (int i = 0; i < values.length; i++) {
+            ret[i] = QValue.create(values[i], type);
+        }
+        return ret;
+    }
+
+    /**
-    public static QValue create(InputStream value, int type) throws IOException, RepositoryException {
+    public static QValue create(InputStream value, int type) throws IOException {
-                    throw new RepositoryException(DEFAULT_ENCODING + " not supported on this platform", e);
+                    throw new IllegalArgumentException(DEFAULT_ENCODING + " not supported on this platform: " + e.getMessage());
-                    throw new RepositoryException("conversion from stream to string failed", e);
+                    throw new IllegalArgumentException("conversion from stream to string failed: " + e.getMessage());
+     * @param values
+     * @return
+     */
+    public static QValue[] create(InputStream[] values, int type) throws IOException {
+        QValue[] ret = new QValue[values.length];
+        for (int i = 0; i < values.length; i++) {
+            ret[i] = QValue.create(values[i], type);
+        }
+        return ret;
+    }
+
+    /**
-     * @param values
-     * @return
-     */
-    public static QValue[] create(String[] values) {
-        QValue[] ret = new QValue[values.length];
-        for (int i = 0; i < values.length; i++) {
-            ret[i] = new QValue(values[i]);
-        }
-        return ret;
-    }
-
-    /**
-     * @param values
-     * @return
-     */
-    public static QValue[] create(Calendar[] values) {
-        QValue[] ret = new QValue[values.length];
-        for (int i = 0; i < values.length; i++) {
-            ret[i] = new QValue(values[i]);
-        }
-        return ret;
-    }
-
-    /**
+    //--------------------------------------------------------------------------
