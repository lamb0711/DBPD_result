JCR-2640: Internal repository context

Decouple SessionImpl from the details of workspace and data store handling in RepositoryImpl.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@948851 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-
-import javax.jcr.Session;
-import org.apache.jackrabbit.core.RepositoryImpl.WorkspaceInfo;
-import org.apache.jackrabbit.core.data.GarbageCollector;
-import org.apache.jackrabbit.core.persistence.IterablePersistenceManager;
-import org.apache.jackrabbit.core.persistence.PersistenceManager;
-import org.apache.jackrabbit.core.version.InternalVersionManagerImpl;
-        if (rep == null) {
+        if (rep != null) {
+            return rep.createDataStoreGarbageCollector();
+        } else {
-        ArrayList<PersistenceManager> pmList = new ArrayList<PersistenceManager>();
-        InternalVersionManagerImpl vm =
-            rep.getRepositoryContext().getInternalVersionManager();
-        PersistenceManager pm = vm.getPersistenceManager();
-        pmList.add(pm);
-        String[] wspNames = rep.getWorkspaceNames();
-        Session[] sessions = new Session[wspNames.length];
-        for (int i = 0; i < wspNames.length; i++) {
-            String wspName = wspNames[i];
-            WorkspaceInfo wspInfo = rep.getWorkspaceInfo(wspName);
-            // this will initialize the workspace if required
-            SessionImpl session = SystemSession.create(
-                    rep.getRepositoryContext(), wspInfo.getConfig());
-            // mark this session as 'active' so the workspace does not get disposed
-            // by the workspace-janitor until the garbage collector is done
-            rep.onSessionCreated(session);
-            // the workspace could be disposed again, so re-initialize if required
-            // afterwards it will not be disposed because a session is registered
-            wspInfo.initialize();
-            sessions[i] = session;
-            pm = wspInfo.getPersistenceManager();
-            pmList.add(pm);
-        }
-        IterablePersistenceManager[] ipmList = new IterablePersistenceManager[pmList.size()];
-        for (int i = 0; i < pmList.size(); i++) {
-            pm = pmList.get(i);
-            if (!(pm instanceof IterablePersistenceManager)) {
-                ipmList = null;
-                break;
-            }
-            ipmList[i] = (IterablePersistenceManager) pm;
-        }
-        GarbageCollector gc = new GarbageCollector(
-                rep.getRepositoryContext().getDataStore(),
-                null, ipmList, sessions);
-        return gc;
