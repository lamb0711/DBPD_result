JCR-1705: Reduce memory usage of transient nodes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@691603 13f79535-47bb-0310-9956-ffa450edef68

-    private Set mixinTypeNames = Collections.EMPTY_SET;
+    private NameSet mixinTypeNames = new NameSet();
-     * Set to <code>true</code> if {@link #childNodeEntries} are shared between
-     * different <code>NodeState</code> instance.
-     */
-    private boolean sharedChildNodeEntries = false;
-
-    /**
-    private HashSet propertyNames = new HashSet();
-
-    /**
-     * Set to <code>true</code> if {@link #propertyNames} is shared between
-     * different <code>NodeState</code> instances.
-     */
-    private boolean sharedPropertyNames = false;
+    private NameSet propertyNames = new NameSet();
-            mixinTypeNames = nodeState.mixinTypeNames;
+            mixinTypeNames = (NameSet) nodeState.mixinTypeNames.clone();
-            propertyNames = nodeState.propertyNames;
-            sharedPropertyNames = true;
-            nodeState.sharedPropertyNames = true;
-            childNodeEntries = nodeState.childNodeEntries;
-            sharedChildNodeEntries = true;
-            nodeState.sharedChildNodeEntries = true;
+            propertyNames = (NameSet) nodeState.propertyNames.clone();
+            childNodeEntries = (ChildNodeEntries) nodeState.childNodeEntries.clone();
-        return Collections.unmodifiableSet(mixinTypeNames);
+        return mixinTypeNames;
-        if (names instanceof HashSet) {
-            mixinTypeNames = (Set) ((HashSet) names).clone();
-        } else {
-            mixinTypeNames = new HashSet(names);
-        }
+        mixinTypeNames.replaceAll(names);
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-        if (sharedChildNodeEntries) {
-            childNodeEntries = (ChildNodeEntries) childNodeEntries.clone();
-            sharedChildNodeEntries = false;
-        }
-            sharedChildNodeEntries = false;
-            if (sharedChildNodeEntries) {
-                childNodeEntries = new ChildNodeEntries();
-                sharedChildNodeEntries = false;
-            } else {
-                childNodeEntries.removeAll();
-            }
+            childNodeEntries.removeAll();
-        return Collections.unmodifiableSet(propertyNames);
+        return propertyNames;
-        if (sharedPropertyNames) {
-            propertyNames = (HashSet) propertyNames.clone();
-            sharedPropertyNames = false;
-        }
-        if (sharedPropertyNames) {
-            propertyNames = (HashSet) propertyNames.clone();
-            sharedPropertyNames = false;
-        }
-        if (sharedPropertyNames) {
-            propertyNames = new HashSet();
-            sharedPropertyNames = false;
-        } else {
-            propertyNames.clear();
-        }
+        propertyNames.removeAll();
-        if (propNames instanceof HashSet) {
-            HashSet names = (HashSet) propNames;
-            propertyNames = (HashSet) names.clone();
-            sharedPropertyNames = false;
-        } else {
-            if (sharedPropertyNames) {
-                propertyNames = new HashSet();
-                sharedPropertyNames = false;
-            } else {
-                propertyNames.clear();
-            }
-            propertyNames.addAll(propNames);
-        }
+        propertyNames.replaceAll(propNames);
-            return Collections.unmodifiableSet(propertyNames);
+            return propertyNames;
