security: work in progress

- change ACEditor to take jcr path
- extract common, abstract policy entry impl
- add more tests
- add JackrabbitAccessControlManager for policy editing
- various minor changes, fixes, improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@644215 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.api.security.principal.PrincipalManager;
-import org.apache.jackrabbit.api.security.principal.PrincipalManager;
+import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
-import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
+import org.apache.jackrabbit.core.security.authorization.PolicyEntry;
-import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
+import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
-import javax.jcr.ItemNotFoundException;
+import javax.jcr.PropertyType;
+import javax.jcr.PathNotFoundException;
-    // TODO: must make sure, that store paths/globs do not contain remapped prefixes from the session
-
-    private final SessionImpl session;
-    private final Path acRootPath;
+    private final String acRootPath;
-        this.session = session;
-        this.acRootPath = acRootPath;
+        this.acRootPath = session.getJCRPath(acRootPath);
-    PolicyTemplateImpl editPolicyTemplate(Principal principal) throws RepositoryException {
+    PolicyTemplate getPolicyTemplate(Principal principal) throws RepositoryException {
-        NodeId nid = getAcId(principal);
-        if (nid == null) {
-            nid = createAcNode(principal).getNodeId();
-        }
-        PolicyTemplate pt = getPolicyTemplate(nid);
-        if (pt instanceof PolicyTemplateImpl) {
-            return (PolicyTemplateImpl) pt;
+        String nPath = getPathToAcNode(principal);
+        if (session.nodeExists(nPath)) {
+            return getPolicyTemplate(nPath);
-            // should never get here.
-            throw new AccessControlException();
+            // no policy for the given principal
+            log.debug("No combined policy template for Principal " + principal.getName());
+            return null;
-    PolicyTemplateImpl getPolicyTemplate(Principal principal) throws RepositoryException {
-        if (!session.getPrincipalManager().hasPrincipal(principal.getName())) {
-            throw new AccessControlException("Unknown principal.");
-        }
-
-        NodeId nid = getAcId(principal);
-        if (nid != null) {
-            PolicyTemplate pt = getPolicyTemplate(nid);
-            if (pt instanceof PolicyTemplateImpl) {
-                return (PolicyTemplateImpl) pt;
-            }
-        }
-
-        // no policy for the given principal
-        log.debug("No combined policy template for Principal " + principal.getName());
-        return null;
-    }
-
-     * @see AccessControlEditor#getPolicyTemplate(NodeId)
+     * @see AccessControlEditor#getPolicyTemplate(String)
-    public PolicyTemplate getPolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException {
-        checkProtectsNode(id);
+    public PolicyTemplate getPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
+        checkProtectsNode(nodePath);
-        NodeImpl acNode = getAcNode(id);
+        NodeImpl acNode = getAcNode(nodePath);
-            if (isAccessControlled(acNode)) {
-                return buildTemplate(acNode);
-            } else {
-                log.debug("No local policy defined for Node " + id);
-                return null;
+            return createTemplate(acNode);
+        } else {
+            // nodeID not below rep:accesscontrol -> delegate to ACLEditor
+            return super.getPolicyTemplate(nodePath);
+        }
+    }
+
+    /**
+     * @see AccessControlEditor#editPolicyTemplate(String)
+     */
+    public PolicyTemplate editPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
+        checkProtectsNode(nodePath);
+
+        if (Text.isDescendant(acRootPath, nodePath)) {
+            NodeImpl acNode = getAcNode(nodePath);
+            if (acNode == null) {
+                // check validity and create the ac node
+                getPrincipal(nodePath);
+                acNode = createAcNode(nodePath);
+            return createTemplate(acNode);
-            return super.getPolicyTemplate(id);
+            return super.editPolicyTemplate(nodePath);
-     * @see AccessControlEditor#editPolicyTemplate(NodeId)
+     * @see AccessControlEditor#editPolicyTemplate(Principal)
-    public PolicyTemplate editPolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException {
-        checkProtectsNode(id);
-
-        NodeImpl acNode = getAcNode(id);
-        if (acNode != null) {
-            return buildTemplate(acNode);
-        } else {
-            // nodeID not below rep:accesscontrol -> delegate to ACLEditor
-            return super.editPolicyTemplate(id);
+    public PolicyTemplate editPolicyTemplate(Principal principal) throws RepositoryException {
+        if (!session.getPrincipalManager().hasPrincipal(principal.getName())) {
+            throw new AccessControlException("Unknown principal.");
+        String nPath = getPathToAcNode(principal);
+        if (!session.nodeExists(nPath)) {
+            createAcNode(nPath);
+        }
+        return getPolicyTemplate(nPath);
-     * @see AccessControlEditor#setPolicyTemplate(NodeId, PolicyTemplate)
+     * @see AccessControlEditor#setPolicyTemplate(String,PolicyTemplate)
-    public void setPolicyTemplate(NodeId id, PolicyTemplate template) throws AccessControlException, ItemNotFoundException, RepositoryException {
-        checkProtectsNode(id);
+    public void setPolicyTemplate(String nodePath, PolicyTemplate template) throws AccessControlException, PathNotFoundException, RepositoryException {
+        checkProtectsNode(nodePath);
-            if (!id.equals(at.getNodeId())) {
+            if (!nodePath.equals(at.getPath())) {
-            NodeImpl acNode = getAcNode(id);
+            NodeImpl acNode = getAcNode(nodePath);
-                throw new ItemNotFoundException("No such node " + id);
+                throw new PathNotFoundException("No such node " + nodePath);
-            PolicyEntryImpl[] aces = (PolicyEntryImpl[]) template.getEntries();
+            PolicyEntry[] aces = (PolicyEntry[]) template.getEntries();
-                PolicyEntryImpl ace = aces[i];
+                PolicyEntryImpl ace = (PolicyEntryImpl) aces[i];
-                    vs[i] = vf.createValue(privs[j].getName());
+                    vs[j] = vf.createValue(privs[j].getName());
-                setSecurityProperty(aceNode, P_NODE_PATH, vf.createValue(ace.getNodePath()));                
+
+                // remove local namespace remapping from the node path before
+                // storing the path value.
+                String pathValue = systemResolver.getJCRPath(session.getQPath(ace.getNodePath()));
+                setSecurityProperty(aceNode, P_NODE_PATH, vf.createValue(pathValue, PropertyType.PATH));
+
+                // TODO: TOBEFIXED respect namespace sensitive parts of the glob
-            super.setPolicyTemplate(id, template);
+            super.setPolicyTemplate(nodePath, template);
-     * @see AccessControlEditor#removePolicyTemplate(NodeId)
+     * @see AccessControlEditor#removePolicyTemplate(String)
+     * @param nodePath
-    public PolicyTemplate removePolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException {
-        checkProtectsNode(id);
+    public PolicyTemplate removePolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
+        checkProtectsNode(nodePath);
-        NodeImpl acNode = getAcNode(id);
+        NodeImpl acNode = getAcNode(nodePath);
-                PolicyTemplate tmpl = buildTemplate(acNode);
+                PolicyTemplate tmpl = createTemplate(acNode);
-                log.debug("No policy present to remove at " + id);
+                log.debug("No policy present to remove at " + nodePath);
-            return super.removePolicyTemplate(id);
+            return super.removePolicyTemplate(nodePath);
-    // TODO: check if get/add/remove entries are properly handled by super-class
-
-     * @param nodeId
+     * @param nodePath
-     * @throws AccessControlException
+     * @throws PathNotFoundException
-    private NodeImpl getAcNode(NodeId nodeId) throws AccessControlException, RepositoryException {
-        NodeImpl n = session.getNodeById(nodeId);
-        Path p = session.getHierarchyManager().getPath(n.getNodeId());
-        if (p.isDescendantOf(acRootPath)) {
-            return n;
+    private NodeImpl getAcNode(String nodePath) throws PathNotFoundException, RepositoryException {
+        if (Text.isDescendant(acRootPath, nodePath)) {
+            return (NodeImpl) session.getNode(nodePath);
-    private NodeId getAcId(Principal principal) throws RepositoryException {
-        Path acPath = session.getQPath(getPathToAcNode(principal));
-        return session.getHierarchyManager().resolveNodePath(acPath);
-    }
-
-    private NodeImpl createAcNode(Principal principal) throws RepositoryException {
-        String acPath = getPathToAcNode(principal);
+    private NodeImpl createAcNode(String acPath) throws RepositoryException {
-     * @param id
+     * @param nodePath
-    private void checkProtectsNode(NodeId id) throws RepositoryException {
-        NodeImpl node = session.getNodeById(id);
-        if (node.isNodeType(NT_REP_ACL) || node.isNodeType(NT_REP_ACE)) {
-            throw new AccessControlException("Node " + id + " defines ACL or ACE.");
+    private void checkProtectsNode(String nodePath) throws RepositoryException {
+        if (session.nodeExists(nodePath)) {
+            NodeImpl n = (NodeImpl) session.getNode(nodePath);
+            if (n.isNodeType(NT_REP_ACL) || n.isNodeType(NT_REP_ACE)) {
+                throw new AccessControlException("Node " + nodePath + " defines ACL or ACE.");
+            }
+    /**
+     *
+     * @param principal
+     * @return
+     * @throws RepositoryException
+     */
-        StringBuffer princPath = new StringBuffer(session.getJCRPath(acRootPath));
+        StringBuffer princPath = new StringBuffer(acRootPath);
+    private Principal getPrincipal(String pathToACNode) throws RepositoryException {
+        String name = Text.unescapeIllegalJcrChars(Text.getName(pathToACNode));
+        PrincipalManager pMgr = session.getPrincipalManager();
+        if (!pMgr.hasPrincipal(name)) {
+            throw new AccessControlException("Unknown principal.");
+        }
+        return pMgr.getPrincipal(name);
+    }
+
-    private PolicyTemplate buildTemplate(NodeImpl acNode) throws RepositoryException {
+    /**
+     *
+     * @param acNode
+     * @return
+     * @throws RepositoryException
+     */
+    private PolicyTemplate createTemplate(NodeImpl acNode) throws RepositoryException {
+        if (!acNode.isNodeType(NT_REP_ACCESS_CONTROL)) {
+            throw new RepositoryException("Expected node of type rep:AccessControl.");
+        }
+
-        return new PolicyTemplateImpl(getEntries(acNode, principal), principal, acNode.getNodeId());
-    }
-    private List getEntries(NodeImpl acNode, Principal principal) throws RepositoryException {
+        // build the list of policy entries;
-        if (acNode.isNodeType(NT_REP_ACCESS_CONTROL) && acNode.hasNode(N_POLICY)) {
+        if (acNode.hasNode(N_POLICY)) {
-                PolicyEntryImpl ace = createFromNode(aceNode, principal);
+                PolicyEntryImpl ace = createEntry(aceNode, principal);
-        return entries;
+        return new PolicyTemplateImpl(entries, principal, acNode.getPath());
-    private PolicyEntryImpl createFromNode(NodeImpl node, Principal principal) throws RepositoryException {
+    /**
+     *
+     * @param node
+     * @param principal
+     * @return
+     * @throws RepositoryException
+     */
+    private PolicyEntryImpl createEntry(NodeImpl node, Principal principal) throws RepositoryException {
-        String nodePath = node.getProperty(P_NODE_PATH).getString();
-        String glob = node.getProperty(P_GLOB).getString();
+        String pV = node.getProperty(P_NODE_PATH).getString();
+        String nodePath = session.getJCRPath(systemResolver.getQPath(pV));
-        // TODO: mk sure principal and principal-name in node match
+        // TODO: make sure local namespace remappings are respected.
+        String glob = node.getProperty(P_GLOB).getString();
