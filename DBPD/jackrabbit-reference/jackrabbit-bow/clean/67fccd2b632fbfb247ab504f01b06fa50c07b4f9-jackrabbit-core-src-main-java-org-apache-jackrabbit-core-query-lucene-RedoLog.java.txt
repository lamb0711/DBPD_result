JCR-1747: org.apache.jackrabbit.core.query.lucene.SearchIndex with in-memory lucene index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@718218 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.store.Directory;
+import org.apache.jackrabbit.core.query.lucene.directory.IndexOutputStream;
+import org.apache.jackrabbit.core.query.lucene.directory.IndexInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
+     * Default name of the redo log file
+     */
+    private static final String REDO_LOG = "redo.log";
+
+    /**
-     * The log file
+     * The directory where the log file is stored.
-    private final File logFile;
+    private final Directory dir;
-     * Creates a new <code>RedoLog</code> instance based on the file
-     * <code>logFile</code>
-     * @param log the redo log file.
+     * Creates a new <code>RedoLog</code> instance, which stores its log in the
+     * given directory.
+     *
+     * @param dir the directory where the redo log file is located.
+     * @throws IOException if an error occurs while reading the redo log.
-    RedoLog(File log) throws IOException {
-        this.logFile = log;
-        // create the log file if not there
-        if (!log.exists()) {
-            log.getParentFile().mkdirs();
-            log.createNewFile();
-        }
+    RedoLog(Directory dir) throws IOException {
+        this.dir = dir;
-        // truncate file
-        new FileOutputStream(logFile).close();
+        dir.deleteFile(REDO_LOG);
-            OutputStream os = new FileOutputStream(logFile, true);
+            OutputStream os = new IndexOutputStream(dir.createOutput(REDO_LOG));
-        InputStream in = new FileInputStream(logFile);
+        if (!dir.fileExists(REDO_LOG)) {
+            return;
+        }
+        InputStream in = new IndexInputStream(dir.openInput(REDO_LOG));
