JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1092723 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.security.AccessControlException;
-import java.util.Collections;
-import java.util.HashSet;
-    /**
-     * Adds the given <code>privileges</code> to the specified
-     * <code>target</code> set if they are not present in the specified
-     * <code>complement</code> set.
-     * 
-     * @param privileges
-     * @param target
-     * @param complement
-     */
-    protected static void updatePrivileges(Collection<Privilege> privileges, Set<Privilege> target, Set<Privilege> complement) {
-        for (Privilege p : privileges) {
-            if (!complement.contains(p)) {
-                target.add(p);
-            }
-        }
-    }
-
-        return getResult(absPath).getPrivileges();
+        Set<Privilege> pvs = getPrivilegeSet(absPath);
+        return PrivilegeRegistry.getBits(pvs.toArray(new Privilege[pvs.size()]));
-        int builtin = getPrivilegeManagerImpl().getBits(privileges);
-        if ((result.allowPrivileges | ~builtin) == -1) {
-            // in addition check all custom privileges
-            for (Privilege p : privileges) {
-                if (getPrivilegeManagerImpl().isCustomPrivilege(p)) {
-                    if (!result.customAllow.contains(p)) {
-                        if (p.isAggregate()) {
-                            // test if aggregated privs were granted individually.
-                            for (Privilege aggr : p.getAggregatePrivileges()) {
-                                if (!aggr.isAggregate() && !result.customAllow.contains(aggr)) {
-                                    // an aggregated custom priv is not allowed -> return false
-                                    return false;
-                                }
-                            }
-                        } else {
-                            // simple custom allow not allowed -> return false
-                            return false;
-                        }
-                    } // else: custom privilege allowed -> continue.
-                } // else: not a custom priv -> already covered.
-            }
-            return true;
-        } else {
-            return false;
-        }
+        PrivilegeBits bits = getPrivilegeManagerImpl().getBits(privileges);
+        return result.allowPrivileges.includes(bits);
-        Set<Privilege> privileges = new HashSet<Privilege>();
-        privileges.addAll(getPrivilegeManagerImpl().getPrivileges(result.getPrivileges()));
-        privileges.addAll(result.customAllow);
-        return privileges;
+        return getPrivilegeManagerImpl().getPrivileges(result.allowPrivileges);
-        public static final Result EMPTY = new Result(Permission.NONE, Permission.NONE, PrivilegeRegistry.NO_PRIVILEGE, PrivilegeRegistry.NO_PRIVILEGE);
+        public static final Result EMPTY = new Result(Permission.NONE, Permission.NONE, PrivilegeBits.EMPTY, PrivilegeBits.EMPTY);
-        private final int allowPrivileges;
-        private final int denyPrivileges;
-
-        private final Set<Privilege> customAllow;
-        private final Set<Privilege> customDeny;
+        private final PrivilegeBits allowPrivileges;
+        private final PrivilegeBits denyPrivileges;
+        /**
+         * @deprecated
+         */
-            this(allows, denies, allowPrivileges, denyPrivileges, Collections.<Privilege>emptySet(), Collections.<Privilege>emptySet());
+            this(allows, denies, PrivilegeBits.getInstance(allowPrivileges), PrivilegeBits.getInstance(denyPrivileges));
-        public Result(int allows, int denies, int allowPrivileges, int denyPrivileges,
-                      Set<Privilege> customAllow, Set<Privilege> customDeny) {
+        public Result(int allows, int denies, PrivilegeBits allowPrivileges, PrivilegeBits denyPrivileges) {
-
-            this.customAllow = customAllow;
-            this.customDeny = customDeny;
+        /**
+         * @deprecated jackrabbit 2.3 (throws UnsupportedOperationException, use getPrivilegeBits instead)
+         */
+            throw new UnsupportedOperationException("use #getPrivilegeBits instead.");
+        }
+
+        public PrivilegeBits getPrivilegeBits() {
-            int cAPrivs = allowPrivileges | Permission.diff(other.allowPrivileges, denyPrivileges);
-            int cDPrivs = denyPrivileges | Permission.diff(other.denyPrivileges, allowPrivileges);
-            Set<Privilege> combinedAllow = new HashSet<Privilege>();
-            combinedAllow.addAll(customAllow);
-            updatePrivileges(other.customAllow, combinedAllow, customDeny);
+            PrivilegeBits cAPrivs = PrivilegeBits.getInstance(allowPrivileges);
+            cAPrivs.addDifference(other.allowPrivileges, denyPrivileges);
+            PrivilegeBits cdPrivs = PrivilegeBits.getInstance(denyPrivileges);
+            cdPrivs.addDifference(other.denyPrivileges, allowPrivileges);
-            Set<Privilege> combinedDeny = new HashSet<Privilege>();
-            combinedDeny.addAll(customDeny);
-            updatePrivileges(other.customDeny, combinedDeny, customAllow);
-            return new Result(cAllows, cDenies, cAPrivs, cDPrivs, customAllow, customDeny);
+            return new Result(cAllows, cDenies, allowPrivileges, denyPrivileges);
-                h = 37 * h + allowPrivileges;
-                h = 37 * h + denyPrivileges;
-                h = 37 * h + customAllow.hashCode();
-                h = 37 * h + customDeny.hashCode();
+                h = 37 * h + allowPrivileges.hashCode();
+                h = 37 * h + denyPrivileges.hashCode();
-                       allowPrivileges == other.allowPrivileges &&
-                       denyPrivileges == other.denyPrivileges &&
-                       customAllow.equals(other.customAllow) &&
-                       customDeny.equals(other.customDeny);
+                       allowPrivileges.equals(other.allowPrivileges) &&
+                       denyPrivileges.equals(other.denyPrivileges);
