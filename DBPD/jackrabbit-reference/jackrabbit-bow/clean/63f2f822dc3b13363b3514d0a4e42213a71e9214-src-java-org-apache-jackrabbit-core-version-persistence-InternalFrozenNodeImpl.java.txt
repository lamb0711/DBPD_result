grouped frequently used constants scattered around in various source files into Constants interface

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153503 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.version.*;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
+import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.version.InternalFreeze;
+import org.apache.jackrabbit.core.version.InternalFrozenNode;
+import org.apache.jackrabbit.core.version.InternalVersionItem;
+import org.apache.jackrabbit.core.version.PersistentVersionManager;
-import javax.jcr.RepositoryException;
-import javax.jcr.PropertyType;
-import javax.jcr.PropertyIterator;
+import javax.jcr.PropertyIterator;
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+import javax.jcr.nodetype.NodeType;
-import javax.jcr.nodetype.NodeType;
-import java.util.List;
+import java.util.List;
-class InternalFrozenNodeImpl extends InternalFreezeImpl implements InternalFrozenNode {
+class InternalFrozenNodeImpl extends InternalFreezeImpl
+        implements InternalFrozenNode, Constants {
-                                 PersistentNode node,
-                                 String id,
-                                 InternalVersionItem parent) throws RepositoryException {
+                                     PersistentNode node,
+                                     String id,
+                                     InternalVersionItem parent) throws RepositoryException {
-            if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_UUID)) {
+            if (prop.getName().equals(JCR_FROZENUUID)) {
-                frozenUUID = node.getPropertyValue(VersionManager.PROPNAME_FROZEN_UUID).internalValue().toString();
-            } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE)) {
+                frozenUUID = node.getPropertyValue(JCR_FROZENUUID).internalValue().toString();
+            } else if (prop.getName().equals(JCR_FROZENPRIMARYTYPE)) {
-                frozenPrimaryType = (QName) node.getPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE).internalValue();
-            } else if (prop.getName().equals(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES)) {
+                frozenPrimaryType = (QName) node.getPropertyValue(JCR_FROZENPRIMARYTYPE).internalValue();
+            } else if (prop.getName().equals(JCR_FROZENMIXINTYPES)) {
-                InternalValue[] values = node.getPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES);
+                InternalValue[] values = node.getPropertyValues(JCR_FROZENMIXINTYPES);
-            } else if (prop.getName().equals(ItemImpl.PROPNAME_PRIMARYTYPE)) {
+            } else if (prop.getName().equals(JCR_PRIMARYTYPE)) {
-            } else if (prop.getName().equals(ItemImpl.PROPNAME_UUID)) {
+            } else if (prop.getName().equals(JCR_UUID)) {
-        if (childNodes[i].hasProperty(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE)) {
+        if (childNodes[i].hasProperty(JCR_FROZEN_PRIMARY_TYPE)) {
-        } else if (childNodes[i].hasProperty(VersionManager.PROPNAME_VERSION_HISTORY)) {
+        } else if (childNodes[i].hasProperty(JCR_VERSION_HISTORY)) {
-            int i=0;
+            int i = 0;
-        if (src.isNodeType(NodeTypeRegistry.MIX_REFERENCEABLE)) {
-            node.setPropertyValue(VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(src.getUUID()));
+        if (src.isNodeType(MIX_REFERENCEABLE)) {
+            node.setPropertyValue(JCR_FROZENUUID, InternalValue.create(src.getUUID()));
-        node.setPropertyValue(VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE,
+        node.setPropertyValue(JCR_FROZENPRIMARYTYPE,
-        if (src.hasProperty(NodeImpl.PROPNAME_MIXINTYPES)) {
+        if (src.hasProperty(NodeImpl.JCR_MIXINTYPES)) {
-            node.setPropertyValues(VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, ivalues);
+            node.setPropertyValues(JCR_FROZENMIXINTYPES, PropertyType.NAME, ivalues);
-                        if (child.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
+                        if (child.isNodeType(MIX_VERSIONABLE)) {
-                            newChild.setPropertyValue(VersionManager.PROPNAME_VERSION_HISTORY,
+                            newChild.setPropertyValue(JCR_VERSIONHISTORY,
-                            newChild.setPropertyValue(VersionManager.PROPNAME_BASE_VERSION,
+                            newChild.setPropertyValue(JCR_BASEVERSION,
