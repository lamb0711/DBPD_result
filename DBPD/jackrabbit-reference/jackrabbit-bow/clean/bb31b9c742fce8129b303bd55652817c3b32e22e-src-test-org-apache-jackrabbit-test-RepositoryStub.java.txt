Extended helper and stub classes to support multiple instantiation. stub now also supports configuration on the api level.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@125509 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
-    protected static RepositoryStub instance;
-
-     * <li>If none of the above is found, a {@link RepositoryStubException} is thrown.
+     * The properties are then overlayed with the the key / values from
+     * <code>configuration</code> map.
+     * @param configuration a <code>Map</code> of additional configuration entries.
-    public static synchronized RepositoryStub getInstance() throws RepositoryStubException {
-        if (instance == null) {
-            Properties props = null;
-            String implProp = System.getProperty(STUB_IMPL_SYS_PROPS);
-            if (implProp != null) {
-                File implPropFile = new File(implProp);
-                if (implPropFile.exists()) {
-                    props = new Properties();
-                    try {
-                        props.load(new FileInputStream(implPropFile));
-                    } catch (IOException e) {
-                        throw new RepositoryStubException("Unable to load config file: "
-                                + implProp + " " + e.toString());
-                    }
-                } else {
-                    throw new RepositoryStubException("File does not exist: " + implProp);
+    static synchronized RepositoryStub getInstance(Map configuration)
+        throws RepositoryStubException {
+        Properties props = null;
+        RepositoryStub stub = null;
+        String implProp = System.getProperty(STUB_IMPL_SYS_PROPS);
+        if (implProp != null) {
+            File implPropFile = new File(implProp);
+            if (implPropFile.exists()) {
+                props = new Properties();
+                try {
+                    props.load(new FileInputStream(implPropFile));
+                } catch (IOException e) {
+                    throw new RepositoryStubException("Unable to load config file: "
+                            + implProp + " " + e.toString());
+            } else {
+                throw new RepositoryStubException("File does not exist: " + implProp);
+        }
-            if (props == null) {
-                InputStream is = RepositoryStub.class.getClassLoader().getResourceAsStream(STUB_IMPL_PROPS);
-                if (is == null) {
-                    throw new RepositoryStubException(STUB_IMPL_PROPS + " not found in classpath!");
-                }
+        if (props == null) {
+            InputStream is = RepositoryStub.class.getClassLoader().getResourceAsStream(STUB_IMPL_PROPS);
+            if (is != null) {
-
-            try {
-                String className = props.getProperty(PROP_STUB_IMPL_CLASS);
-                if (className == null || className.length() == 0) {
-                    throw new RepositoryStubException("Property " + PROP_STUB_IMPL_CLASS + " not defined!");
-                }
-                Class stubClass = Class.forName(className);
-                Constructor constr = stubClass.getConstructor(new Class[]{Properties.class});
-                instance = (RepositoryStub) constr.newInstance(new Object[]{props});
-            } catch (ClassCastException e) {
-                throw new RepositoryStubException(e.toString());
-            } catch (NoSuchMethodException e) {
-                throw new RepositoryStubException(e.toString());
-            } catch (ClassNotFoundException e) {
-                throw new RepositoryStubException(e.toString());
-            } catch (InstantiationException e) {
-                throw new RepositoryStubException(e.toString());
-            } catch (IllegalAccessException e) {
-                throw new RepositoryStubException(e.toString());
-            } catch (InvocationTargetException e) {
-                throw new RepositoryStubException(e.toString());
-            }
-        return instance;
+
+        // overlay with configuration parameter
+        props.putAll(configuration);
+
+        try {
+            String className = props.getProperty(PROP_STUB_IMPL_CLASS);
+            if (className == null || className.length() == 0) {
+                throw new RepositoryStubException("Property " + PROP_STUB_IMPL_CLASS + " not defined!");
+            }
+            Class stubClass = Class.forName(className);
+            Constructor constr = stubClass.getConstructor(new Class[]{Properties.class});
+            stub = (RepositoryStub) constr.newInstance(new Object[]{props});
+        } catch (ClassCastException e) {
+            throw new RepositoryStubException(e.toString());
+        } catch (NoSuchMethodException e) {
+            throw new RepositoryStubException(e.toString());
+        } catch (ClassNotFoundException e) {
+            throw new RepositoryStubException(e.toString());
+        } catch (InstantiationException e) {
+            throw new RepositoryStubException(e.toString());
+        } catch (IllegalAccessException e) {
+            throw new RepositoryStubException(e.toString());
+        } catch (InvocationTargetException e) {
+            throw new RepositoryStubException(e.toString());
+        }
+
+        return stub;
