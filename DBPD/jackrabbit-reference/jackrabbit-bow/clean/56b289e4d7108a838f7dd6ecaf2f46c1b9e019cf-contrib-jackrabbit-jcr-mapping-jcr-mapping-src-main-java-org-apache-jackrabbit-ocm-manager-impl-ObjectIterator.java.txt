FELIX-1107 ObjectIterator may return null, which is not readily expected from an Iterator

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@572347 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.NoSuchElementException;
+import javax.jcr.RepositoryException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.jackrabbit.ocm.exception.ObjectContentManagerException;
- * ObjectIterator is a wrapper class for JCR NodeIterator
+ * ObjectIterator is a wrapper class for JCR NodeIterator, which returns
+ * mapped objects. Note, though, that this iterator may not return the same
+ * number of objects as the underlying node iterator as not all nodes may
+ * successfully be mapped to objects. Any problems mapping nodes to objects are
+ * logged at INFO level.
+ * <p>
+ * This Iterator implementation does not support removing elements, therefore
+ * the {@link #remove()} method throws a <code>UnsupportOperationException</code>.
+    private static final Log log = LogFactory.getLog(ObjectIterator.class);
+    
-	private Class objectClass;
-
+    private Object nextResult;
-	 * @param objectClass the object class used to instantiate the objects
-	public ObjectIterator(NodeIterator iterator, Class objectClass, ObjectConverter converter, Session session)
+	public ObjectIterator(NodeIterator iterator, ObjectConverter converter, Session session)
-		this.objectClass = objectClass;
+		
+		// get first result
+        seek();
-	/**
-	 * 
-	 * @see java.util.Iterator#hasNext()
-	 */
-	public boolean hasNext()
-	{
-		return nodeIterator.hasNext();
-	}
-	/**
-	 * 
-	 * @see java.util.Iterator#next()
-	 */
-	public Object next() 
-	{
+	public boolean hasNext() {
+        return nextResult != null;
+    }
+    
+	
+    public Object next() {
+        if (nextResult == null) {
+            throw new NoSuchElementException();
+        }
+        
+        Object result = nextResult;
+        seek();
+        return result;
+    }
-		try
-		{
-			Node node = nodeIterator.nextNode();
-			return objectConverter.getObject(session, node.getPath());
-		}
-		catch (Exception e)
-		{
-           return null;			
-		}
-
-	}
-
-	/**
-	 * 
-	 * @see java.util.Iterator#remove()
-	 */
-	public void remove()
-	{
-		nodeIterator.remove();
-	}
-
+    
+    public void remove() {
+        throw new UnsupportedOperationException();
+    }
+    
+    
+    private void seek() {
+        while (nodeIterator.hasNext()) {
+            try {
+                Node node = nodeIterator.nextNode();
+                Object value = objectConverter.getObject(session, node.getPath());
+                if (value != null) {
+                    nextResult = value;
+                    return;
+                }
+            } catch (RepositoryException re) {
+                log.info("Repository access issue trying to map node to an object", re);
+            } catch (ObjectContentManagerException ocme) {
+                log.info("Mapping Failure", ocme);
+            } catch (Throwable t) {
+                log.info("Unexpected Problem while trying to map a node to an object", t);
+            }
+        }
+        
+        // no more results
+        nextResult = null;
+    }
