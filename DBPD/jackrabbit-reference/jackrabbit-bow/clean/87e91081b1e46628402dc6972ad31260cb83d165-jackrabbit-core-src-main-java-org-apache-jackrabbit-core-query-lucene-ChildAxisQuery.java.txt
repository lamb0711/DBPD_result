JCR-1365: Query path constraints like foo//*/bar do not scale

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@620859 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.query.lucene.hits.HitsIntersection;
+import org.apache.jackrabbit.uuid.UUID;
+import org.apache.lucene.search.MatchAllDocsQuery;
-import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+     * @return the name test or <code>null</code> if none was specified.
+     */
+    String getNameTest() {
+        return nameTest;
+    }
+
+    /**
+     * @return the position check or {@link LocationStepQueryNode#NONE} is none
+     *         was specified.
+     */
+    int getPosition() {
+        return position;
+    }
+
+    /**
+        // only try to compact if no position is specified
+        if (position == LocationStepQueryNode.NONE) {
+            if (cQuery instanceof DescendantSelfAxisQuery) {
+                DescendantSelfAxisQuery dsaq = (DescendantSelfAxisQuery) cQuery;
+                if (dsaq.subQueryMatchesAll()) {
+                    Query sub;
+                    if (nameTest == null) {
+                        sub = new MatchAllDocsQuery();
+                    } else {
+                        sub = new TermQuery(new Term(FieldNames.LABEL, nameTest));
+                    }
+                    return new DescendantSelfAxisQuery(dsaq.getContextQuery(),
+                            sub, dsaq.getMinLevels() + 1).rewrite(reader);
+                }
+            }
+        }
+
+        // if we get here we could not compact the query
-            return new ChildAxisScorer(searcher.getSimilarity(), reader);
+            return new ChildAxisScorer(searcher.getSimilarity(),
+                    reader, (HierarchyResolver) reader);
+         * The <code>HierarchyResolver</code> of the index.
+         */
+        private final HierarchyResolver hResolver;
+
+        /**
+         * @param hResolver  the hierarchy resolver of <code>reader</code>.
-        protected ChildAxisScorer(Similarity similarity, IndexReader reader) {
+        protected ChildAxisScorer(Similarity similarity,
+                                  IndexReader reader,
+                                  HierarchyResolver hResolver) {
+            this.hResolver = hResolver;
-                List uuids = new ArrayList();
+                Map uuids = new HashMap();
-                int i = contextHits.next();
-                while (i > -1) {
-                    String uuid = reader.document(i).get(FieldNames.UUID);
-                    uuids.add(uuid);
-                    i = contextHits.next();
+                for (int i = contextHits.next(); i > -1; i = contextHits.next()) {
+                    String uuid = reader.document(i, FieldSelectors.UUID).get(FieldNames.UUID);
+                    uuids.put(new Integer(i), uuid);
-
-                TermDocs docs = reader.termDocs();
-                try {
-                    for (Iterator it = uuids.iterator(); it.hasNext();) {
-                        docs.seek(new Term(FieldNames.PARENT, (String) it.next()));
-                        while (docs.next()) {
-                            childrenHits.set(docs.doc());
+                if (nameTestScorer != null) {
+                    Hits nameHits = new ScorerHits(nameTestScorer);
+                    for (int h = nameHits.next(); h > -1; h = nameHits.next()) {
+                        if (uuids.containsKey(new Integer(hResolver.getParent(h)))) {
+                            childrenHits.set(h);
-                } finally {
-                    docs.close();
+                } else {
+                    // get child node entries for each hit
+                    for (Iterator it = uuids.values().iterator(); it.hasNext(); ) {
+                        String uuid = (String) it.next();
+                        NodeId id = new NodeId(UUID.fromString(uuid));
+                        try {
+                            NodeState state = (NodeState) itemMgr.getItemState(id);
+                            Iterator entries = state.getChildNodeEntries().iterator();
+                            while (entries.hasNext()) {
+                                NodeId childId = ((NodeState.ChildNodeEntry) entries.next()).getId();
+                                Term uuidTerm = new Term(FieldNames.UUID, childId.getUUID().toString());
+                                TermDocs docs = reader.termDocs(uuidTerm);
+                                try {
+                                    if (docs.next()) {
+                                        childrenHits.set(docs.doc());
+                                    }
+                                } finally {
+                                    docs.close();
+                                }
+                            }
+                        } catch (ItemStateException e) {
+                            // does not exist anymore -> ignore
+                        }
+                    }
-                if (nameTestScorer != null) {
-                    hits = new HitsIntersection(childrenHits, new ScorerHits(nameTestScorer));
-                } else {
-                    hits = childrenHits;
-                }
+                hits = childrenHits;
-                Document node = reader.document(i);
+                Document node = reader.document(i, FieldSelectors.UUID_AND_PARENT);
