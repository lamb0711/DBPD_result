Remote JCR search: 
- put column names in responsedescription
- modify result property: name, value a enclosed by separate column element. type is added as attribute to the value element.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397830 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ValueFormatException;
+    private static final String COLUMN = "column";
-        super(SEARCH_RESULT_PROPERTY, true);
-        if (!SEARCH_RESULT_PROPERTY.equals(property.getName())) {
-	    throw new IllegalArgumentException("SearchResultProperty may only be created with a property that has name="+SEARCH_RESULT_PROPERTY.getName());
+        super(property.getName(), true);
+        if (!SEARCH_RESULT_PROPERTY.equals(getName())) {
+	    throw new IllegalArgumentException("SearchResultProperty may only be created from a property named " + SEARCH_RESULT_PROPERTY.toString());
-
-        if (property.getValue() instanceof List) {
-            List l = (List) property.getValue();
-
-            String name = null;
-            String value = null;
-            int i = 0;
-            Iterator elemIt = l.iterator();
+        Object propValue = property.getValue();
+        if (propValue instanceof List) {
+            Iterator elemIt = ((List)propValue).iterator();
-                    String txt = DomUtil.getText((Element)el);
-                    if (JCR_NAME.getName().equals(((Element)el).getLocalName())) {
-                        name = txt;
-                    } else if (JCR_VALUE.getName().equals(((Element)el).getLocalName())) {
-                        value = txt;
-                    } else if (JCR_TYPE.getName().equals(((Element)el).getLocalName())) {
-                        int type = PropertyType.valueFromName(txt);
-                        if (name == null) {
-                            throw new IllegalArgumentException("SearchResultProperty requires a set of 'dcr:name','dcr:value' and 'dcr:type' xml elements.");
-                        }
-                        colList.add(name);
-                        valList.add((value == null) ? null : ValueHelper.deserialize(value, type, false));
-                        // reset...
-                        name = null;
-                        value = null;
-                        i++;
-                    }
+                    parseColumnElement((Element)el, colList, valList);
+        } else if (propValue instanceof Element) {
+            parseColumnElement((Element)property.getValue(), colList, valList);
-            new IllegalArgumentException("SearchResultProperty requires a list of 'dcr:name','dcr:value' and 'dcr:type' xml elements.");
+            new IllegalArgumentException("SearchResultProperty requires a list of 'dcr:column' xml elements.");
+    private void parseColumnElement(Element columnElement, List columnNames, List values) throws ValueFormatException, RepositoryException {
+        if (!DomUtil.matches(columnElement, COLUMN, ItemResourceConstants.NAMESPACE)) {
+            log.debug("dcr:column element expected within search result.");
+            return;
+        }
+        columnNames.add(DomUtil.getChildText(columnElement, JCR_NAME.getName(), JCR_NAME.getNamespace()));
+
+        Value jcrValue;
+        Element valueElement = DomUtil.getChildElement(columnElement, JCR_VALUE.getName(), JCR_VALUE.getNamespace());
+        if (valueElement != null) {
+            String typeStr = DomUtil.getAttribute(valueElement, ATTR_VALUE_TYPE, ItemResourceConstants.NAMESPACE);
+            jcrValue = ValueHelper.deserialize(DomUtil.getText(valueElement), PropertyType.valueFromName(typeStr), true);
+        } else {
+            jcrValue = null;
+        }
+        values.add(jcrValue);
+    }
+
-     *   col-name  |   bla   |   bli   |  dcr:path  |  dcr:score
+     *   col-name  |   bla   |   bli   |  jcr:path  |  jcr:score
-     * &lt;dcr:name&gt;bla&lt;dcr:name/&gt;
-     * &lt;dcr:value&gt;xxx&lt;dcr:value/&gt;
-     * &lt;dcr:type&gt;String&lt;dcr:value/&gt;
-     * &lt;dcr:name&gt;bli&lt;dcr:name/&gt;
-     * &lt;dcr:value&gt;111&lt;dcr:value/&gt;
-     * &lt;dcr:type&gt;Long&lt;dcr:value/&gt;
-     * &lt;dcr:name&gt;jcr:path&lt;dcr:name/&gt;
-     * &lt;dcr:value&gt;/aNode&lt;dcr:value/&gt;
-     * &lt;dcr:type&gt;Path&lt;dcr:value/&gt;
-     * &lt;dcr:name&gt;jcr:score&lt;dcr:name/&gt;
-     * &lt;dcr:value&gt;1&lt;dcr:value/&gt;
-     * &lt;dcr:type&gt;Long&lt;dcr:value/&gt;
+     * &lt;dcr:search-result-property xmlns:dcr="http://www.day.com/jcr/webdav/1.0"&gt;
+     *    &lt;dcr:column&gt;
+     *       &lt;dcr:name&gt;bla&lt;dcr:name/&gt;
+     *       &lt;dcr:value dcr:type="String"&gt;xxx&lt;dcr:value/&gt;
+     *    &lt;/dcr:column&gt;
+     *    &lt;dcr:column&gt;
+     *       &lt;dcr:name&gt;bli&lt;dcr:name/&gt;
+     *       &lt;dcr:value dcr:type="Long"&gt;111&lt;dcr:value/&gt;
+     *    &lt;/dcr:column&gt;
+     *    &lt;dcr:column&gt;
+     *       &lt;dcr:name&gt;jcr:path&lt;dcr:name/&gt;
+     *       &lt;dcr:value dcr:type="Path"&gt;/aNode&lt;dcr:value/&gt;
+     *    &lt;/dcr:column&gt;
+     *    &lt;dcr:column&gt;
+     *       &lt;dcr:name&gt;jcr:score&lt;dcr:name/&gt;
+     *       &lt;dcr:value dcr:type="Long"&gt;1&lt;dcr:value/&gt;
+     *    &lt;/dcr:column&gt;
+     * &lt;/dcr:search-result-property&gt;
-            String valueStr = null;
+
+            Element columnEl = DomUtil.addChildElement(elem, COLUMN, ItemResourceConstants.NAMESPACE);
+            DomUtil.addChildElement(columnEl, JCR_NAME.getName(), JCR_NAME.getNamespace(), propertyName);
-                    valueStr = propertyValue.getString();
+                    String serializedValue = ValueHelper.serialize(propertyValue, true);
+                    Element xmlValue = DomUtil.addChildElement(columnEl, XML_VALUE, ItemResourceConstants.NAMESPACE, serializedValue);
+                    String type = PropertyType.nameFromValue(propertyValue.getType());
+                    DomUtil.setAttribute(xmlValue, ATTR_VALUE_TYPE, ItemResourceConstants.NAMESPACE, type);
-                    log.error(e.getMessage());
+                    log.error(e.toString());
-            String type = (propertyValue == null) ? PropertyType.TYPENAME_STRING : PropertyType.nameFromValue(propertyValue.getType());
-
-            Element child = JCR_NAME.toXml(document);
-            DomUtil.setText(child, propertyName);
-            elem.appendChild(child);
-
-            child = JCR_VALUE.toXml(document);
-            DomUtil.setText(child, valueStr);
-            elem.appendChild(child);
-
-            child = JCR_TYPE.toXml(document);
-            DomUtil.setText(child, type);
-            elem.appendChild(child);
