fixed: move, reorder (work in progress)
fixed: locktoken transfer
fixed: recursive transient removal of invalidated tree fails (restoreTests)
improve: simplify usage of workspace operations
fixed: store original itemId with transient operations in order to properly reflect the changelog upon batch creation
fixed: workspace import doesn't invalidate
fixed: session import uuid handling




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@513279 13f79535-47bb-0310-9956-ffa450edef68

-        // Need to use the workspace-ISF in order not to create yet another
-        // session-state.
+        // Need to use the workspace-ISF in order not to create a session-state.
-
+        ItemId id = (overlayedState == null) ? getId() : overlayedState.getId();
-            overlayed = wspIsf.createNodeState((NodeId) getId(), (NodeEntry) getHierarchyEntry());
+            overlayed = wspIsf.createNodeState((NodeId) id, (NodeEntry) getHierarchyEntry());
-            overlayed = wspIsf.createPropertyState((PropertyId) getId(), (PropertyEntry) getHierarchyEntry());
+            overlayed = wspIsf.createPropertyState((PropertyId) id, (PropertyEntry) getHierarchyEntry());
-    EffectiveNodeType getEffectiveNodeType() throws RepositoryException {
+    EffectiveNodeType getEffectiveParentNodeType() throws RepositoryException {
-            EffectiveNodeType ent = getNodeTypeRegistry().getEffectiveNodeType(getParent().getNodeTypeNames());
-            return ent;
+            /*
+            for NEW-states the definition is always set upon creation.
+            for all other states the definion must be retrieved only taking
+            the effective nodetypes present on the parent into account
+            any kind of transiently added mixins must not have an effect
+            on the definition retrieved for an state that has been persisted
+            before. The effective NT must be evaluated as if it had been
+            evaluated upon creating the workspace state.
+            */
+            return getNodeTypeRegistry().getEffectiveNodeType(getParent().getNodeTypeNames());
