JCR-4086: spi2dav: code reformat to reduce scope of changes for JCR-4066

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1774443 13f79535-47bb-0310-9956-ffa450edef68

-        }
-        catch (URISyntaxException ex) {
+        } catch (URISyntaxException ex) {
-     *
-     * @param method
-     * @param sessionInfo
-     * @throws RepositoryException
-        return obtain(((SessionInfoImpl)sessionInfo).getCredentials(), workspaceName);
+        return obtain(((SessionInfoImpl) sessionInfo).getCredentials(), workspaceName);
-                throw new LoginException("Login failed: Unknown workspace '" + workspaceName+ "'.");
+                throw new LoginException("Login failed: Unknown workspace '" + workspaceName + "'.");
-                throw new LoginException("Login failed: Unknown workspace '" + workspaceName+ "'.");
+                throw new LoginException("Login failed: Unknown workspace '" + workspaceName + "'.");
-        }
-        else {
+        } else {
-            QValue[] vs = new QValue[] {getQValueFactory().create(nid.getUniqueID(), PropertyType.STRING)};
+            QValue[] vs = new QValue[] { getQValueFactory().create(nid.getUniqueID(), PropertyType.STRING) };
-        QValue[] vs = new QValue[] {getQValueFactory().create(nInfo.getNodetype())};
+        QValue[] vs = new QValue[] { getQValueFactory().create(nInfo.getNodetype()) };
-                values = new QValue[] {v};
+                values = new QValue[] { v };
-        update(uri, null, new String[] {workspUri}, UpdateInfo.UPDATE_BY_WORKSPACE, false, sessionInfo);
+        update(uri, null, new String[] { workspUri }, UpdateInfo.UPDATE_BY_WORKSPACE, false, sessionInfo);
-            }  else {
+            } else {
-            long davTimeout = (timeoutHint == Long.MAX_VALUE) ? INFINITE_TIMEOUT : timeoutHint*1000;
+            long davTimeout = (timeoutHint == Long.MAX_VALUE) ? INFINITE_TIMEOUT : timeoutHint * 1000;
-        return new LockInfoImpl(activeLock, holder == null ? nodeId : holder, ((SessionInfoImpl)sessionInfo).getAllLockTokens());
+        return new LockInfoImpl(activeLock, holder == null ? nodeId : holder, ((SessionInfoImpl) sessionInfo).getAllLockTokens());
-        update(uri, relPath, new String[] {vUri}, UpdateInfo.UPDATE_BY_VERSION, removeExisting, sessionInfo);
+        update(uri, relPath, new String[] { vUri }, UpdateInfo.UPDATE_BY_VERSION, removeExisting, sessionInfo);
-
-        }
-        catch (UnsupportedRepositoryOperationException ex) {
+        } catch (UnsupportedRepositoryOperationException ex) {
-        }  finally {
+        } finally {
-        }  finally {
+        } finally {
-        }  finally {
+        } finally {
-             DavPropertySet setProperties = new DavPropertySet();
-             setProperties.add(createRegisterNodeTypesProperty(sessionInfo, nodeTypeDefinitions, allowUpdate));
-             String uri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
-             method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
-             initMethod(method, sessionInfo, true);
-             getClient(sessionInfo).executeMethod(method);
-             method.checkSuccess();
-         } catch (IOException e) {
-             throw new RepositoryException(e);
-         } catch (DavException e) {
-             throw ExceptionConverter.generate(e);
-         } finally {
-             if (method != null) {
+            DavPropertySet setProperties = new DavPropertySet();
+            setProperties.add(createRegisterNodeTypesProperty(sessionInfo, nodeTypeDefinitions, allowUpdate));
+            String uri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
+            method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
+            initMethod(method, sessionInfo, true);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
-             }
-         }
+            }
+        }
-             DavPropertySet setProperties = new DavPropertySet();
-             setProperties.add(createUnRegisterNodeTypesProperty(sessionInfo, nodeTypeNames));
-             String uri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
-             method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
-             initMethod(method, sessionInfo, true);
-             getClient(sessionInfo).executeMethod(method);
-             method.checkSuccess();
-         } catch (IOException e) {
-             throw new RepositoryException(e);
-         } catch (DavException e) {
-             throw ExceptionConverter.generate(e);
-         } finally {
-             if (method != null) {
-                 method.releaseConnection();
-             }
-         }
+            DavPropertySet setProperties = new DavPropertySet();
+            setProperties.add(createUnRegisterNodeTypesProperty(sessionInfo, nodeTypeNames));
+            String uri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
+            method = new PropPatchMethod(uri, setProperties, new DavPropertyNameSet());
+            initMethod(method, sessionInfo, true);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
-             method = new MkWorkspaceMethod(uriResolver.getWorkspaceUri(name));
-             initMethod(method, sessionInfo, true);
-             getClient(sessionInfo).executeMethod(method);
-             method.checkSuccess();
-         } catch (IOException e) {
-             throw new RepositoryException(e);
-         } catch (DavException e) {
-             throw ExceptionConverter.generate(e);
-         } finally {
-             if (method != null) {
-                 method.releaseConnection();
-             }
-         }
+            method = new MkWorkspaceMethod(uriResolver.getWorkspaceUri(name));
+            initMethod(method, sessionInfo, true);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
-             method = new DeleteMethod(uriResolver.getWorkspaceUri(name));
-             initMethod(method, sessionInfo, true);
-             getClient(sessionInfo).executeMethod(method);
-             method.checkSuccess();
-         } catch (IOException e) {
-             throw new RepositoryException(e);
-         } catch (DavException e) {
-             throw ExceptionConverter.generate(e);
-         } finally {
-             if (method != null) {
-                 method.releaseConnection();
-             }
-         }
+            method = new DeleteMethod(uriResolver.getWorkspaceUri(name));
+            initMethod(method, sessionInfo, true);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+               method.releaseConnection();
+            }
+        }
-
-
-        }
-        catch (RepositoryException ex) {
+        } catch (RepositoryException ex) {
-        }
-        catch (java.net.URISyntaxException ex) {
+        } catch (java.net.URISyntaxException ex) {
