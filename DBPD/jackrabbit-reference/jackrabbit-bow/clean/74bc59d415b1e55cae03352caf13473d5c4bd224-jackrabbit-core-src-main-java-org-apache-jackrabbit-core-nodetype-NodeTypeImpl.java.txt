JCR-2105: JSR 283 NodeType Management (work in progress)
- missing implementations in NodeType.java
JCR-1483: Move common node type functionality to jackrabbit-spi-commons
- move jsr 283 nodetype management impl that can be shared between jackrabbit-core and jackrabbit-jcr2spi to jackrabbit-spi-commons

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@773838 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.nodetype.NodeTypeIterator;
+import org.apache.jackrabbit.spi.commons.nodetype.AbstractNodeType;
-import org.apache.jackrabbit.commons.iterator.NodeTypeIteratorAdapter;
-public class NodeTypeImpl implements NodeType, NodeTypeDefinition {
+public class NodeTypeImpl extends AbstractNodeType implements NodeType, NodeTypeDefinition {
+        super(ntMgr);
-    /**
-     * Returns the node types derived from this node type.
-     *
-     * @param directOnly if <code>true</code> only direct subtypes will be considered
-     *
-     * @return an <code>NodeTypeIterator</code>.
-     * @see #getSubtypes
-     * @see #getDeclaredSubtypes
-     */
-    public NodeTypeIterator getSubtypes(boolean directOnly) {
-        NodeTypeIterator iter;
-        try {
-            iter = ntMgr.getAllNodeTypes();
-        } catch (RepositoryException e) {
-            // should never get here
-            log.error("failed to retrieve registered node types", e);
-            return NodeTypeIteratorAdapter.EMPTY;
-        }
-
-        ArrayList<NodeType> result = new ArrayList<NodeType>();
-        String thisName = getName();
-        while (iter.hasNext()) {
-            NodeType nt = iter.nextNodeType();
-            if (!nt.getName().equals(thisName)) {
-                if (directOnly) {
-                    // direct subtypes only
-                    String[] names = nt.getDeclaredSupertypeNames();
-                    for (int i = 0; i < names.length; i++) {
-                        if (names[i].equals(thisName)) {
-                            result.add(nt);
-                            break;
-                        }
-                    }
-                } else {
-                    // direct and indirect subtypes
-                    if (nt.isNodeType(thisName)) {
-                        result.add(nt);
-                    }
-                }
-            }
-        }
-        return new NodeTypeIteratorAdapter(result);
-    }
-
-    /**
-     * Returns the <i>direct</i> subtypes of this node type in the node type inheritance hierarchy,
-     * that is, those which actually declared this node type in their list of supertypes.
-     *
-     * @see #getSubtypes
-     *
-     * @return an <code>NodeTypeIterator</code>.
-     * @since JCR 2.0
-     */
-    public NodeTypeIterator getDeclaredSubtypes() {
-        return getSubtypes(true);
-    }
-
-    /**
-     * Returns all subtypes of this node type in the node type inheritance hierarchy.
-     *
-     * @see #getDeclaredSubtypes
-     *
-     * @return a <code>NodeTypeIterator</code>.
-     * @since JCR 2.0
-     */
-    public NodeTypeIterator getSubtypes() {
-        return getSubtypes(false);
-    }
