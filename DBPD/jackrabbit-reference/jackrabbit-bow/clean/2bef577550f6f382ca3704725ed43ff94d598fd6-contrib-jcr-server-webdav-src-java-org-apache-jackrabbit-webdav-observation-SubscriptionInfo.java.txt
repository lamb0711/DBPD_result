JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.util.XmlUtil;
-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import java.util.ArrayList;
- * that forms the request body of a SUBSCRIBE request.
+ * that forms the request body of a SUBSCRIBE request.<br>
+ * The following xml layout is defined for the subscription info:
+ * <pre>
+ * &lt;!ELEMENT subscriptioninfo ( eventtype, nolocal?, filter? ) &gt;
+ * &lt;!ELEMENT eventtype ANY &gt;
+ *
+ * ANY defines any sequence of elements where at least one defines a valid
+ * eventtype. Note that a single eventtype must not occur multiple times.
+
+ * &lt;!ELEMENT nolocal EMPTY &gt;
+ * &lt;!ELEMENT filter ANY &gt;
+ *
+ * ANY: any sequence of elements identifying a filter for event listening but
+ * at least a single element.
+ * </pre>
-public class SubscriptionInfo implements ObservationConstants {
+public class SubscriptionInfo implements ObservationConstants, XmlSerializable {
-    private Element info;
-    private List eventTypes;
-    private long timeout;
-    private boolean isDeep;
+    private final EventType[] eventTypes;
+    private final Filter[] filters;
+    private final boolean noLocal;
+    private final boolean isDeep;
+    private final long timeout;
+
+    /**
+     * Create a new <code>SubscriptionInfo</code>
+     *
+     * @param eventTypes
+     * @param isDeep
+     * @param timeout
+     */
+    public SubscriptionInfo(EventType[] eventTypes, boolean isDeep, long timeout) {
+        this(eventTypes, null, false, isDeep, timeout);
+    }
+
+    /**
+     * Create a new <code>SubscriptionInfo</code>
+     *
+     * @param eventTypes
+     * @param filters
+     * @param noLocal
+     * @param isDeep
+     * @param timeout
+     */
+    public SubscriptionInfo(EventType[] eventTypes, Filter[] filters, boolean noLocal, boolean isDeep, long timeout) {
+        if (eventTypes == null || eventTypes.length == 0) {
+            throw new IllegalArgumentException("'subscriptioninfo' must at least indicate a single event type.");
+        }
+
+        this.eventTypes = eventTypes;
+        this.noLocal = noLocal;
+
+        if (filters != null) {
+            this.filters = filters;
+        } else {
+            this.filters = new Filter[0];
+        }
+
+        this.isDeep = isDeep;
+        this.timeout = timeout;
+    }
-        if (!XML_SUBSCRIPTIONINFO.equals(reqInfo.getName())) {
+        if (!DomUtil.matches(reqInfo, XML_SUBSCRIPTIONINFO, NAMESPACE)) {
-        if (reqInfo.getChild(XML_EVENTTYPE, NAMESPACE) == null ) {
+        List typeList = new ArrayList();
+        Element el = DomUtil.getChildElement(reqInfo, XML_EVENTTYPE, NAMESPACE);
+        if (el != null) {
+            ElementIterator it = DomUtil.getChildren(el);
+            while (it.hasNext()) {
+                Element typeElem = it.nextElement();
+                EventType et = new SimpleEventType(typeElem.getLocalName(), DomUtil.getNamespace(typeElem));
+                typeList.add(et);
+            }
+        } else {
-        eventTypes = reqInfo.getChild(XML_EVENTTYPE, NAMESPACE).getChildren();
-        if (eventTypes.size() == 0) {
+        if (typeList.isEmpty()) {
+        eventTypes = (EventType[]) typeList.toArray(new EventType[typeList.size()]);
-        // detach the request info, in order to remove the reference to the parent
-        this.info = (Element)reqInfo.detach();
+        List filters = new ArrayList();
+        el = DomUtil.getChildElement(reqInfo, XML_FILTER, NAMESPACE);
+        if (el != null) {
+            ElementIterator it = DomUtil.getChildren(el);
+            while (it.hasNext()) {
+                Filter f = new Filter(it.nextElement());
+                filters.add(f);
+            }
+        }
+        this.filters = (Filter[])filters.toArray(new Filter[filters.size()]);
+
+        this.noLocal = DomUtil.hasChildElement(reqInfo, XML_NOLOCAL, NAMESPACE);
-        setTimeOut(timeout);
+        this.timeout = timeout;
-     * Return list of event types Xml elements present in the subscription info.
-     * NOTE: the elements need to be detached in order to be added as content
-     * to any other Xml element.
+     * Return array of event type names present in the subscription info.
-     * @return List of Xml elements defining which events this subscription should
-     * listen to.
+     * @return array of String defining the names of the events this subscription
+     * should listen to.
-    public List getEventTypes() {
+    public EventType[] getEventTypes() {
+     * Return all filters defined for this <code>SubscriptionInfo</code>
+     *
+     * @return all filters or an empty Filter array.
+     */
+    public Filter[] getFilters() {
+        return filters;
+    }
+
+    /**
-     * @param name the filter elments must provide.
+     * @param localName the filter elments must provide.
+     * @param namespace
-    public String[] getFilters(String name) {
-        String[] filters = null;
-        Element filter = info.getChild(XML_FILTER);
-        if (filter != null) {
-            List li = filter.getChildren(name);
-            if (!li.isEmpty()) {
-                filters = new String[li.size()];
+    public Filter[] getFilters(String localName, Namespace namespace) {
+        List l = new ArrayList();
-                    filters[i] = ((Element)li.get(i)).getText();
+            if (filters[i].isMatchingFilter(localName, namespace)) {
+               l.add(filters[i]);
-        }
-        return filters;
+        return (Filter[])l.toArray(new Filter[l.size()]);
-        return info.getChild(XML_NOLOCAL, NAMESPACE) != null;
+        return noLocal;
-     * Set the timeout. NOTE: no validation is made.
-     *
-     * @param timeout as defined by the {@link org.apache.jackrabbit.webdav.DavConstants#HEADER_TIMEOUT}.
-     */
-    public void setTimeOut(long timeout) {
-        this.timeout = timeout;
-    }
-
-    /**
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
-    public Element[] toXml() {
-        Element[] elems = { info, XmlUtil.depthToXml(isDeep), XmlUtil.timeoutToXml(timeout)};
-        return elems;
+    public Element toXml(Document document) {
+        Element subscrInfo = DomUtil.createElement(document, XML_SUBSCRIPTIONINFO, NAMESPACE);
+        Element eventType = DomUtil.addChildElement(subscrInfo, XML_EVENTTYPE, NAMESPACE);
+        for (int i = 0; i < eventTypes.length; i++) {
+            eventType.appendChild(eventTypes[i].toXml(document));
+        }
+
+        if (filters.length > 0) {
+            Element filter = DomUtil.addChildElement(subscrInfo, XML_FILTER, NAMESPACE);
+            for (int i = 0; i < filters.length; i++) {
+                filter.appendChild(filters[i].toXml(document));
+            }
+        }
+
+        if (noLocal) {
+            DomUtil.addChildElement(subscrInfo, XML_NOLOCAL, NAMESPACE);
+        }
+        return subscrInfo;
+    }
+
+    //--------------------------------------------------------< inner class >---
+    /**
+     * Simple EventType implementation that only consists of a qualified event
+     * name.
+     */
+    private class SimpleEventType implements EventType {
+
+        private String localName;
+        private Namespace namespace;
+
+        SimpleEventType(String localName, Namespace namespace) {
+            this.localName = localName;
+            this.namespace = namespace;
+        }
+
+        public Element toXml(Document document) {
+            return DomUtil.createElement(document, localName, namespace);
+        }
+
+        public String getName() {
+            return localName;
+        }
+
+        public Namespace getNamespace() {
+            return namespace;
+        }
