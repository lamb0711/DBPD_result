- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Date;
+import java.util.Date;
- *
- * @author Marcel Reutegger
- * @version $Revision:  $, $Date:  $
-    /** The name of the property */
+    /**
+     * The name of the property
+     */
-	super(parent);
-	this.property = property;
-	this.valueLong = value;
-	this.operation = operation;
-	this.type = TYPE_LONG;
+        super(parent);
+        this.property = property;
+        this.valueLong = value;
+        this.operation = operation;
+        this.type = TYPE_LONG;
-	super(parent);
-	this.property = property;
-	this.valueDouble = value;
-	this.operation = operation;
-	this.type = TYPE_DOUBLE;
+        super(parent);
+        this.property = property;
+        this.valueDouble = value;
+        this.operation = operation;
+        this.type = TYPE_DOUBLE;
-	super(parent);
-	this.property = property;
-	this.valueDate = value;
-	this.operation = operation;
-	this.type = TYPE_DATE;
+        super(parent);
+        this.property = property;
+        this.valueDate = value;
+        this.operation = operation;
+        this.type = TYPE_DATE;
-	super(parent);
-	this.property = property;
-	this.valueString = value;
-	this.operation = operation;
-	this.type = TYPE_STRING;
+        super(parent);
+        this.property = property;
+        this.valueString = value;
+        this.operation = operation;
+        this.type = TYPE_STRING;
-	return visitor.visit(this, data);
+        return visitor.visit(this, data);
+     *
-	return type;
+        return type;
+     *
-	return property;
+        return property;
-	return valueLong;
+        return valueLong;
-	return valueDouble;
+        return valueDouble;
-	return valueString;
+        return valueString;
-	return valueDate;
+        return valueDate;
+     *
-	return operation;
+        return operation;
+     *
-	StringBuffer sb = new StringBuffer();
-	if (property.indexOf(' ') > -1) {
-	    sb.append("\"" + property + "\"");
-	} else {
-	    sb.append(property);
-	}
+        StringBuffer sb = new StringBuffer();
+        if (property.indexOf(' ') > -1) {
+            sb.append("\"" + property + "\"");
+        } else {
+            sb.append(property);
+        }
-	if (operation == OPERATION_EQ) {
-	    sb.append("=");
-	} else if (operation == OPERATION_GE) {
-	    sb.append(">=");
-	} else if (operation == OPERATION_GT) {
-	    sb.append(">");
-	} else if (operation == OPERATION_LE) {
-	    sb.append("<=");
-	} else if (operation == OPERATION_LIKE) {
-	    sb.append(" LIKE ");
-	} else if (operation == OPERATION_LT) {
-	    sb.append("<");
-	} else if (operation == OPERATION_NE) {
-	    sb.append("<>");
-	} else {
-	    throw new RuntimeException("invalid operation: " + operation);
-	}
+        if (operation == OPERATION_EQ) {
+            sb.append("=");
+        } else if (operation == OPERATION_GE) {
+            sb.append(">=");
+        } else if (operation == OPERATION_GT) {
+            sb.append(">");
+        } else if (operation == OPERATION_LE) {
+            sb.append("<=");
+        } else if (operation == OPERATION_LIKE) {
+            sb.append(" LIKE ");
+        } else if (operation == OPERATION_LT) {
+            sb.append("<");
+        } else if (operation == OPERATION_NE) {
+            sb.append("<>");
+        } else {
+            throw new RuntimeException("invalid operation: " + operation);
+        }
-	if (type == TYPE_LONG) {
-	    sb.append(valueLong);
-	} else if (type == TYPE_DOUBLE) {
-	    sb.append(valueDouble);
-	} else if (type == TYPE_STRING) {
-	    sb.append("\"").append(valueString).append("\"");
-	} else if (type == TYPE_DATE) {
-	    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
-	    cal.setTime(valueDate);
-	    sb.append(ISO8601.format(cal));
-	} else {
-	   throw new RuntimeException("Invalid type: " + type);
-	}
-	return sb.toString();
+        if (type == TYPE_LONG) {
+            sb.append(valueLong);
+        } else if (type == TYPE_DOUBLE) {
+            sb.append(valueDouble);
+        } else if (type == TYPE_STRING) {
+            sb.append("\"").append(valueString).append("\"");
+        } else if (type == TYPE_DATE) {
+            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
+            cal.setTime(valueDate);
+            sb.append(ISO8601.format(cal));
+        } else {
+            throw new RuntimeException("Invalid type: " + type);
+        }
+        return sb.toString();
+     *
-	// todo implement
-	return "";
+        // todo implement
+        return "";
