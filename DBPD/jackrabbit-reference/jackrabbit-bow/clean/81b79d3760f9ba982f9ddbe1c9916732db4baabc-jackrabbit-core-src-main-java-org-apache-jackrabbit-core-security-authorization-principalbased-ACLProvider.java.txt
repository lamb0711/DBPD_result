 JCR-1588: JSR 283: Access Control

- minor improvement, javadoc, java 5, tests


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@792160 13f79535-47bb-0310-9956-ffa450edef68

-    public CompiledPermissions compilePermissions(Set principals) throws RepositoryException {
+    public CompiledPermissions compilePermissions(Set<Principal> principals) throws RepositoryException {
-    public boolean canAccessRoot(Set principals) throws RepositoryException {
+    public boolean canAccessRoot(Set<Principal> principals) throws RepositoryException {
-        private final Set principals;
-        private final Set acPaths;
-        private ACLProvider.Entries entries;
+        private final Set<Principal> principals;
+        private final Set<String> acPaths;
+        private List<AccessControlEntry> entries;
-        private CompiledPermissionImpl(Set principals) throws RepositoryException {
+        private CompiledPermissionImpl(Set<Principal> principals) throws RepositoryException {
-        private CompiledPermissionImpl(Set principals, boolean listenToEvents) throws RepositoryException {
+        private CompiledPermissionImpl(Set<Principal> principals, boolean listenToEvents) throws RepositoryException {
-                result = entries.getResult(item, item.getPath(), isAcItem);
+                result = getResult(item, item.getPath(), isAcItem);
-                result = entries.getResult(null, jcrPath, isAcItem);
+                result = getResult(null, jcrPath, isAcItem);
+
+        /**
+         * Loop over all entries and evaluate allows/denies for those matching
+         * the given jcrPath.
+         *
+         * @param target Existing target item for which the permissions will be
+         * evaluated or <code>null</code>.
+         * @param targetPath Path used for the evaluation; pointing to an
+         * existing or non-existing item.
+         * @param isAcItem
+         * @return
+         * @throws RepositoryException
+         */
+        private Result getResult(Item target,
+                                 String targetPath,
+                                 boolean isAcItem) throws RepositoryException {
+            int allows = Permission.NONE;
+            int denies = Permission.NONE;
+            int allowPrivileges = PrivilegeRegistry.NO_PRIVILEGE;
+            int denyPrivileges = PrivilegeRegistry.NO_PRIVILEGE;
+            int parentAllows = PrivilegeRegistry.NO_PRIVILEGE;
+            int parentDenies = PrivilegeRegistry.NO_PRIVILEGE;
+
+            String parentPath = Text.getRelativeParent(targetPath, 1);
+            for (AccessControlEntry entry : entries) {
+                if (!(entry instanceof ACLTemplate.Entry)) {
+                    log.warn("Unexpected AccessControlEntry instance -> ignore");
+                    continue;
+                }
+                ACLTemplate.Entry entr = (ACLTemplate.Entry) entry;
+                int privs = entr.getPrivilegeBits();
+
+                if (!"".equals(parentPath) && entr.matches(parentPath)) {
+                    if (entr.isAllow()) {
+                        parentAllows |= Permission.diff(privs, parentDenies);
+                    } else {
+                        parentDenies |= Permission.diff(privs, parentAllows);
+                    }
+                }
+
+                boolean matches = (target != null) ? entr.matches(target) : entr.matches(targetPath);
+                if (matches) {
+                    if (entr.isAllow()) {
+                        allowPrivileges |= Permission.diff(privs, denyPrivileges);
+                        int permissions = PrivilegeRegistry.calculatePermissions(allowPrivileges, parentAllows, true, isAcItem);
+                        allows |= Permission.diff(permissions, denies);
+                    } else {
+                        denyPrivileges |= Permission.diff(privs, allowPrivileges);
+                        int permissions = PrivilegeRegistry.calculatePermissions(denyPrivileges, parentDenies, false, isAcItem);
+                        denies |= Permission.diff(permissions, allows);
+                    }
+                }
+            }
+            return new Result(allows, denies, allowPrivileges, denyPrivileges);
+        }
+
-        private ACLProvider.Entries reload() throws RepositoryException {
+        private List<AccessControlEntry> reload() throws RepositoryException {
-            List allACEs = new ArrayList();
+            List<AccessControlEntry> allACEs = new ArrayList<AccessControlEntry>();
-            return new ACLProvider.Entries(allACEs);
+            return allACEs;
-     * Utility class that raps a list of access control entries and evaluates
-     * them for a specified item/path.
-     */
-    private class Entries {
-
-        private final List entries;
-
-        /**
-         *
-         * @param entries
-         */
-        private Entries(List entries) {
-            this.entries = entries;
-        }
-
-        /**
-         * Loop over all entries and evaluate allows/denies for those matching
-         * the given jcrPath.
-         *
-         * @param target Existing target item for which the permissions will be
-         * evaluated or <code>null</code>.
-         * @param targetPath Path used for the evaluation; pointing to an
-         * existing or non-existing item.
-         * @param isAcItem
-         * @return
-         * @throws RepositoryException
-         */
-        private AbstractCompiledPermissions.Result getResult(Item target,
-                                                             String targetPath,
-                                                             boolean isAcItem) throws RepositoryException {
-            int allows = Permission.NONE;
-            int denies = Permission.NONE;
-            int allowPrivileges = PrivilegeRegistry.NO_PRIVILEGE;
-            int denyPrivileges = PrivilegeRegistry.NO_PRIVILEGE;
-            int parentAllows = PrivilegeRegistry.NO_PRIVILEGE;
-            int parentDenies = PrivilegeRegistry.NO_PRIVILEGE;
-
-            String parentPath = Text.getRelativeParent(targetPath, 1);
-            for (Iterator it = entries.iterator(); it.hasNext() && allows != Permission.ALL;) {
-                ACLTemplate.Entry entr = (ACLTemplate.Entry) it.next();
-                int privs = entr.getPrivilegeBits();
-
-                if (!"".equals(parentPath) && entr.matches(parentPath)) {
-                    if (entr.isAllow()) {
-                        parentAllows |= Permission.diff(privs, parentDenies);
-                    } else {
-                        parentDenies |= Permission.diff(privs, parentAllows);
-                    }
-                }
-
-                boolean matches = (target != null) ? entr.matches(target) : entr.matches(targetPath);
-                if (matches) {
-                    if (entr.isAllow()) {
-                        allowPrivileges |= Permission.diff(privs, denyPrivileges);
-                        int permissions = PrivilegeRegistry.calculatePermissions(allowPrivileges, parentAllows, true, isAcItem);
-                        allows |= Permission.diff(permissions, denies);
-                    } else {
-                        denyPrivileges |= Permission.diff(privs, allowPrivileges);
-                        int permissions = PrivilegeRegistry.calculatePermissions(denyPrivileges, parentDenies, false, isAcItem);
-                        denies |= Permission.diff(permissions, allows);
-                    }
-                }
-            }
-            return new AbstractCompiledPermissions.Result(allows, denies, allowPrivileges, denyPrivileges);
-        }
-    }
-
-    /**
