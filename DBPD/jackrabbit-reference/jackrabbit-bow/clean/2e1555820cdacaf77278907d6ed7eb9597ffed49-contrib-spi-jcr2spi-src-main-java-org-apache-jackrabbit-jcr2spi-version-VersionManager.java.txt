work in progress

- javadoc


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@483030 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.ReferentialIntegrityException;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.ItemExistsException;
+import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.MergeException;
+import javax.jcr.lock.LockException;
+import javax.jcr.version.Version;
-    // TODO fix method definitions (throw clauses)
-
-    public void checkin(NodeState nodeState) throws RepositoryException;
-
-    public void checkout(NodeState nodeState) throws RepositoryException;
-
-    public boolean isCheckedOut(NodeState nodeState) throws RepositoryException;
-
-    public void checkIsCheckedOut(NodeState nodeState) throws VersionException, RepositoryException;
-
-    public void removeVersion(NodeState versionHistoryState, NodeState versionState) throws RepositoryException;
-
-    public void addVersionLabel(NodeState versionHistoryState, NodeState versionState, QName qLabel, boolean moveLabel) throws RepositoryException;
-
-    public void removeVersionLabel(NodeState versionHistoryState, NodeState versionState, QName qLabel) throws RepositoryException;
-
-    public void restore(NodeState nodeState, Path relativePath, NodeState versionState, boolean removeExisting) throws RepositoryException;
-
-    public void restore(NodeState[] versionStates, boolean removeExisting) throws RepositoryException;
+    /**
+     * @param nodeState
+     * @throws VersionException
+     * @throws UnsupportedRepositoryOperationException
+     * @throws InvalidItemStateException
+     * @throws LockException
+     * @throws RepositoryException
+     * @see javax.jcr.Node#checkin()
+     */
+    public void checkin(NodeState nodeState) throws VersionException, UnsupportedRepositoryOperationException, InvalidItemStateException, LockException, RepositoryException;
-     *
+     * @param nodeState
+     * @throws UnsupportedRepositoryOperationException
+     * @throws LockException
+     * @throws RepositoryException
+     * @see javax.jcr.Node#checkout()
+     */
+    public void checkout(NodeState nodeState) throws UnsupportedRepositoryOperationException, LockException, RepositoryException;
+
+    /**
+     * @param nodeState
+     * @return
+     * @throws RepositoryException
+     * @see javax.jcr.Node#isCheckedOut()
+     */
+    public boolean isCheckedOut(NodeState nodeState) throws RepositoryException;
+
+    /**
+     * @param nodeState
+     * @throws VersionException If the <code>Node</code> represented by the given
+     * <code>NodeState</code> is checkedin.
+     * @throws RepositoryException If another error occurs.
+     * @see javax.jcr.Node#isCheckedOut()
+     */
+    public void checkIsCheckedOut(NodeState nodeState) throws VersionException, RepositoryException;
+
+    /**
+     * @param versionHistoryState
+     * @param versionState
+     * @throws ReferentialIntegrityException
+     * @throws AccessDeniedException
+     * @throws UnsupportedRepositoryOperationException
+     * @throws VersionException
+     * @throws RepositoryException
+     * @see javax.jcr.version.VersionHistory#removeVersion(String)
+     */
+    public void removeVersion(NodeState versionHistoryState, NodeState versionState) throws ReferentialIntegrityException, AccessDeniedException, UnsupportedRepositoryOperationException, VersionException, RepositoryException;
+
+    /**
+     * @param versionHistoryState
+     * @param versionState
+     * @param qLabel
+     * @param moveLabel
+     * @throws VersionException
+     * @throws RepositoryException
+     * @see javax.jcr.version.VersionHistory#addVersionLabel(String, String, boolean)
+     */
+    public void addVersionLabel(NodeState versionHistoryState, NodeState versionState, QName qLabel, boolean moveLabel) throws VersionException, RepositoryException;
+
+    /**
+     * @param versionHistoryState
+     * @param versionState
+     * @param qLabel
+     * @throws VersionException
+     * @throws RepositoryException
+     * @see javax.jcr.version.VersionHistory#removeVersionLabel(String)
+     */
+    public void removeVersionLabel(NodeState versionHistoryState, NodeState versionState, QName qLabel) throws VersionException, RepositoryException;
+
+    /**
+     * @param nodeState
+     * @param relativePath
+     * @param versionState
+     * @param removeExisting
+     * @throws VersionException
+     * @throws ItemExistsException
+     * @throws UnsupportedRepositoryOperationException
+     * @throws LockException
+     * @throws InvalidItemStateException
+     * @throws RepositoryException
+     * @see javax.jcr.Node#restore(String, boolean)
+     * @see javax.jcr.Node#restore(Version, boolean)
+     * @see javax.jcr.Node#restore(Version, String, boolean)
+     * @see javax.jcr.Node#restoreByLabel(String, boolean)
+     */
+    public void restore(NodeState nodeState, Path relativePath, NodeState versionState, boolean removeExisting) throws VersionException, ItemExistsException, UnsupportedRepositoryOperationException, LockException, InvalidItemStateException, RepositoryException;
+
+    /**
+     * @param versionStates
+     * @param removeExisting
+     * @throws ItemExistsException
+     * @throws UnsupportedRepositoryOperationException
+     * @throws VersionException
+     * @throws LockException
+     * @throws InvalidItemStateException
+     * @throws RepositoryException
+     * @see javax.jcr.Workspace#restore(Version[], boolean)
+     */
+    public void restore(NodeState[] versionStates, boolean removeExisting) throws ItemExistsException, UnsupportedRepositoryOperationException, VersionException, LockException, InvalidItemStateException, RepositoryException;
+
+    /**
+     * @throws NoSuchWorkspaceException
+     * @throws AccessDeniedException
+     * @throws MergeException
+     * @throws LockException
+     * @throws InvalidItemStateException
+     * @throws RepositoryException
+     * @see javax.jcr.Node#merge(String, boolean) 
-    public IdIterator merge(NodeState nodeState, String workspaceName, boolean bestEffort) throws RepositoryException;
+    public IdIterator merge(NodeState nodeState, String workspaceName, boolean bestEffort) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException;
-     * 
+     * @throws VersionException
+     * @throws InvalidItemStateException
+     * @throws UnsupportedRepositoryOperationException
+     * @see javax.jcr.Node#cancelMerge(Version)
+     * @see javax.jcr.Node#doneMerge(Version)
-    public void resolveMergeConflict(NodeState nodeState, NodeState versionState, boolean done) throws RepositoryException;
+    public void resolveMergeConflict(NodeState nodeState, NodeState versionState, boolean done) throws VersionException, InvalidItemStateException, UnsupportedRepositoryOperationException, RepositoryException;
