JCR-405: PROPPATCH doesn't respect document order
minor improvements within 'jcr' package:
- reorder nodes
- fixing creation/replacement of multivalued JCR properties
- contentlength for single value JCR properties
- improve spooling of resource content

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397835 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.property.DavPropertySet;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import java.util.ArrayList;
-     *
-     * @param setProperties
-     * @param removePropertyNames
+     * @param changeList
-    public MultiStatusResponse alterProperties(DavPropertySet setProperties, DavPropertyNameSet removePropertyNames) throws DavException {
+    public MultiStatusResponse alterProperties(List changeList) throws DavException {
-        resolveMergeConflict(setProperties, removePropertyNames);
+        resolveMergeConflict(changeList);
-        return super.alterProperties(setProperties, removePropertyNames);
+        return super.alterProperties(changeList);
-     * @param setProperties
-     * @param removePropertyNames
+     * @param changeList
-    private void resolveMergeConflict(DavPropertySet setProperties,
-                                     DavPropertyNameSet removePropertyNames)
-        throws DavException {
-
+    private void resolveMergeConflict(List changeList) throws DavException {
-
-            if (removePropertyNames.contains(AUTO_MERGE_SET)) {
+            DavProperty autoMergeSet = null;
+            DavProperty predecessorSet = null;
+            /* find DAV:auto-merge-set entries. If none exists no attempt is made
+               to resolve merge conflict > return silently */
+            for (int i = 0; i < changeList.size(); i++) {
+                Object propEntry = changeList.get(i);
+                // If DAV:auto-merge-set is DavPropertyName all remaining merge
+                // conflicts are resolved with 'cancel'
+                if (propEntry instanceof DavPropertyName && AUTO_MERGE_SET.equals(propEntry)) {
+                    // retrieve the current jcr:mergeFailed property values
+                    if (!n.hasProperty(JcrConstants.JCR_MERGEFAILED)) {
+                        throw new DavException(DavServletResponse.SC_CONFLICT, "Attempt to resolve non-existing merge conflicts.");
+                    }
+                    Value[] mergeFailed = n.getProperty(JcrConstants.JCR_MERGEFAILED).getValues();
+                    for (int j = 0; j < mergeFailed.length; j++) {
+                        n.cancelMerge((Version)getRepositorySession().getNodeByUUID(mergeFailed[j].getString()));
+                    }
+                    // remove this entry from the changeList
+                    changeList.remove(propEntry);
+                } else if (propEntry instanceof DavProperty) {
+                    if (AUTO_MERGE_SET.equals(((DavProperty)propEntry).getName())) {
+                        autoMergeSet = (DavProperty)propEntry;
+                    } else if (PREDECESSOR_SET.equals(((DavProperty)propEntry).getName())) {
+                        predecessorSet = (DavProperty)propEntry;
+                    }
+                }
+            }
+
+            // If DAV:auto-merge-set is a DavProperty merge conflicts need to be
+            // resolved individually according to the DAV:predecessor-set property.
+            if (autoMergeSet != null) {
-                Value[] mergeFailed = n.getProperty(JcrConstants.JCR_MERGEFAILED).getValues();
-                // resolve all remaining merge conflicts with 'cancel'
-                for (int i = 0; i < mergeFailed.length; i++) {
-                    n.cancelMerge((Version)getRepositorySession().getNodeByUUID(mergeFailed[i].getString()));
-                }
-                // adjust removeProperty set
-                removePropertyNames.remove(AUTO_MERGE_SET);
-
-            } else if (setProperties.contains(AUTO_MERGE_SET) && setProperties.contains(PREDECESSOR_SET)){
-                // retrieve the current jcr:mergeFailed property values
-                if (!n.hasProperty(JcrConstants.JCR_MERGEFAILED)) {
-                    throw new DavException(DavServletResponse.SC_CONFLICT, "Attempt to resolve non-existing merge conflicts.");
-                }
-                Value[] mergeFailed = n.getProperty(JcrConstants.JCR_MERGEFAILED).getValues();
-
-
-                // check which mergeFailed entries have been removed from the
-                // auto-merge-set (cancelMerge) and have been moved over to the
-                // predecessor set (doneMerge)
-                List mergeset = new HrefProperty(setProperties.get(AUTO_MERGE_SET)).getHrefs();
-                List predecSet = new HrefProperty(setProperties.get(PREDECESSOR_SET)).getHrefs();
+                List mergeset = new HrefProperty(autoMergeSet).getHrefs();
+                List predecSet = (predecessorSet == null) ? new ArrayList() : new HrefProperty(predecessorSet).getHrefs();
+                // loop over the mergeFailed values (versions) and test whether they are
+                // removed from the DAV:auto-merge-set thus indicating resolution.
+                Value[] mergeFailed = n.getProperty(JcrConstants.JCR_MERGEFAILED).getValues();
+                    // in order to be able to compare to the entries in the HrefProperty.
-                    // thus indicating that the merge-conflict needs to be resolved.
+                    // thus indicating that this merge conflict needs to be resolved.
-                        // Test if the 'href' has been moved over to the
-                        // predecessor-set (thus 'doneMerge' is appropriate) or
-                        // if it is not present in the predecessor set and the
-                        // the conflict is resolved by 'cancelMerge'.
+                        // If the conflict value has been moved over from DAV:auto-merge-set
+                        // to the predecessor-set, resolution with 'doneMerge' is
+                        // appropriate. If the value has been removed from the
+                        // merge-set but not added to the predecessors 'cancelMerge'
+                        // must be called.
-                // adjust setProperty set
-                setProperties.remove(AUTO_MERGE_SET);
-                setProperties.remove(PREDECESSOR_SET);
+                // after successful resolution of merge-conflicts according to
+                // DAV:auto-merge-set and DAV:predecessor-set remove these entries
+                // from the changeList.
+                changeList.remove(autoMergeSet);
+                if (predecessorSet != null) {
+                    changeList.remove(predecessorSet);
+                }
-            /* else: no (valid) attempt to resolve merge conflict > return silently */
