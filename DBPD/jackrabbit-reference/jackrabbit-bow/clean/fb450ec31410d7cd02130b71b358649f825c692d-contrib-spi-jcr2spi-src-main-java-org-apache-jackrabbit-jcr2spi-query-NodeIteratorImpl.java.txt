spi - QueryInfo: change to return QueryResultRowIterator
spi - QueryResultRow/QueryResultRowIterator: new
jcr2spi - Update implementation accordingly (note jcr:score now is returned with property type Double)
spi2dav - Minor changes to keep it compiling; full implementation of changed interface to be done


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497844 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.ItemManager;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.spi.IdIterator;
-import org.apache.jackrabbit.spi.NodeId;
-import org.apache.jackrabbit.spi.QueryInfo;
-import org.apache.jackrabbit.spi.ItemId;
-import org.slf4j.LoggerFactory;
-import org.slf4j.Logger;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+import javax.jcr.Item;
-import javax.jcr.Item;
-import java.util.NoSuchElementException;
-import java.util.Iterator;
+import org.apache.jackrabbit.jcr2spi.ItemManager;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.spi.QueryInfo;
+import org.apache.jackrabbit.spi.QueryResultRow;
+import org.apache.jackrabbit.spi.QueryResultRowIterator;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-    /** The query result info */
-    private final QueryInfo queryInfo;
-
-    /** The ItemId's of the result nodes */
-    private final IdIterator ids;
-
-    /** Index of the jcr:score column. */
-    private final int scoreIndex;
+    /** The QueryResultRows */
+    private final QueryResultRowIterator rows;
+    /** Score for the next node */
+    private double nextScore;
+
-        this.queryInfo = queryInfo;
-        this.ids = queryInfo.getNodeIds();
+        this.rows = queryInfo.getRows();
-        QName[] columnNames = queryInfo.getColumnNames();
-        int idx = -1;
-        for (int i = 0; i < columnNames.length; i++) {
-            if (columnNames[i].getNamespaceURI().equals(QName.NS_JCR_URI)
-                && columnNames[i].getLocalName().startsWith(QName.JCR_SCORE.getLocalName())) {
-                idx = i;
-                break;
-            }
-        }
-        if (idx == -1) {
-            throw new RepositoryException("no jcr:score column in query result");
-        }
-        this.scoreIndex = idx;
-    public float getScore() throws NoSuchElementException {
+    public double getScore() throws NoSuchElementException {
-        String scoreString = queryInfo.getValues(nextId)[scoreIndex];
-        try {
-            return Float.parseFloat(scoreString);
-        } catch (NumberFormatException e) {
-            throw new NoSuchElementException();
-        }
+        return nextScore;
-            ids.skip(skipNum - 1);
+            rows.skip(skipNum - 1);
-        if (ids.getSize() != -1) {
-            return ids.getSize() - invalid;
+        if (rows.getSize() != -1) {
+            return rows.getSize() - invalid;
-        while (next == null && ids.hasNext()) {
+        nextScore = 0;
+        
+        while (next == null && rows.hasNext()) {
-                ItemId id = ids.nextId();
-                if (!id.denotesNode()) {
-                    log.error("NodeId expected. Found PropertyId: " + id);
-                    continue;
-                }
-                nextId = (NodeId)id;
+                QueryResultRow row = rows.nextQueryResultRow();
+                nextId = row.getNodeId();
+                    nextScore = row.getScore();
