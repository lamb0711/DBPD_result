JCR-2313 - Improvements to user management (2) [work in progress] 

- remove 'administrators' group from set of pre-installed users as it has no special meaning
   neither within the user administration nor within the ac-evaluation code.

- remove SystemUserManager and move the special admin-handling to the UserManagerImpl
- add explicit check for uuid-conflict to UserManagerImpl#createAuthorizableNode
- make sure the admin-user is properly recreated upon reconfiguration of the usersPath (UserManager config) 
- make sure the admin-user is created in case of other uuid-conflict

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@881215 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.security.SystemPrincipal;
+     * boolean flag indicating whether the editing session is a system session.
+     */
+    private final boolean isSystemUserManager;
+
+    /**
+
+        /**
+         * evaluate if the editing session is a system session. since the
+         * SystemSession class is package protected the session object cannot
+         * be checked for the property instance.
+         * 
+         * workaround: compare the class name and check if the subject contains
+         * the system principal.
+         */
+        isSystemUserManager = "org.apache.jackrabbit.core.SystemSession".equals(session.getClass().getName()) && 
+                !session.getSubject().getPrincipals(SystemPrincipal.class).isEmpty();
-        return internalGetAuthorizable(id);
+        Authorizable a = internalGetAuthorizable(id);
+        /**
+         * Extra check for the existance of the administrator user that must
+         * always exist.
+         * In case it got removed if must be recreated using a system session.
+         * Since a regular session may lack read permission on the admin-user's
+         * node an explicit test for the current editing session being
+         * a system session is performed.
+         */
+        if (a == null && adminId.equals(id) && isSystemUserManager) {
+            log.info("Admin user does not exist.");
+            a = createAdmin();
+        }
+
+        return a;
+     * Create the administrator user. If the node to be created collides
+     * with an existing node (ItemExistsException) the existing node gets removed
+     * and the admin user node is (re)created.
+     * <p/>
+     * Collision with an existing node may occur under the following circumstances:
+     *
+     * <ul>
+     * <li>The <code>usersPath</code> has been modified in the user manager
+     * configuration after a successful repository start that already created
+     * the administrator user.</li>
+     * <li>The NodeId created by {@link #buildNodeId(String)} by conincidence
+     * collides with another NodeId created during the regular node creation
+     * process.</li>
+     * </ul>
+     *
+     * @param adminId
+     * @param pw
+     * @return
+     * @throws RepositoryException
+     */
+    private User createAdmin() throws RepositoryException {
+        User admin;
+        try {
+            admin = createUser(adminId, adminId);
+            if (!isAutoSave()) {
+                session.save();
+            }
+            log.info("... created admin user with id \'" + adminId + "\' and default pw.");
+        } catch (ItemExistsException e) {
+            NodeImpl conflictingNode = session.getNodeById(buildNodeId(adminId));
+            String conflictPath = conflictingNode.getPath();
+            log.error("Detected conflicting node " + conflictPath + " of node type " + conflictingNode.getPrimaryNodeType().getName() + ".");
+
+            // TODO move conflicting node of type rep:User instead of removing and recreating.
+            conflictingNode.remove();
+            log.info("Removed conflicting node at " + conflictPath);
+
+            admin = createUser(adminId, adminId);
+            if (!isAutoSave()) {
+                session.save();
+            }
+            log.info("Resolved conflict and (re)created admin user with id \'" + adminId + "\' and default pw.");          
+        }
+        return admin;
+    }
+
+    /**
-            // finally create the authorizable node
-                    String msg = "Failed to create authorizable node: Detected conflicting node of unexpected nodetype '" + colliding.getPrimaryNodeType().getName() + "'.";
+                    String msg = "Failed to create authorizable with id '" + id + "' : Detected conflicting node of unexpected nodetype '" + colliding.getPrimaryNodeType().getName() + "'.";
+
+            // check for collision with existing node outside of the user/group tree
+            if (session.getItemManager().itemExists(nid)) {
+                String msg = "Failed to create authorizable with id '" + id + "' : Detected conflict with existing node (NodeID: " + nid + ")";
+                log.error(msg);
+                throw new ItemExistsException(msg);
+            }
+
+            // finally create the authorizable node
