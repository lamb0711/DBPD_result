JCR-4008: Restore TestCachingFDS.testDeleteRecord() to fix it with disabling AsyncUpload in unit tests

Patch from Woonsan Ko

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1759933 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
-    private ThreadPoolExecutor asyncWriteExecuter;
+    private Executor asyncWriteExecuter;
-        asyncWriteExecuter = (ThreadPoolExecutor) Executors.newFixedThreadPool(
-            10, new NamedThreadFactory("fs-write-worker"));
+        asyncWriteExecuter = createAsyncWriteExecutor();
-        asyncWriteExecuter.shutdownNow();
+        Executor asyncExecutor = getAsyncWriteExecutor();
+        if (asyncExecutor != null && asyncExecutor instanceof ExecutorService) {
+            ((ExecutorService) asyncExecutor).shutdownNow();
+        }
+     * Creates a {@link Executor}.
+     * This method is invoked during the initialization for asynchronous write/touch job executions.
+     * @return a {@link Executor}
+     */
+    protected Executor createAsyncWriteExecutor() {
+        Executor asyncExecutor;
+
+        if (store.getAsyncUploadLimit() > 0) {
+            asyncExecutor = Executors.newFixedThreadPool(10,
+                    new NamedThreadFactory("fs-write-worker"));
+        } else {
+            asyncExecutor = new ImmediateExecutor();
+        }
+
+        return asyncExecutor;
+    }
+
+    /**
+     * Returns ThreadPoolExecutor used to execute asynchronous write or touch jobs.
+     * @return ThreadPoolExecutor used to execute asynchronous write or touch jobs
+     */
+    protected Executor getAsyncWriteExecutor() {
+        return asyncWriteExecuter;
+    }
+
+    /**
+    /**
+     * This class implements {@link Executor} interface to run {@code command} right away,
+     * resulting in non-asynchronous mode executions.
+     */
+    private class ImmediateExecutor implements Executor {
+        @Override
+        public void execute(Runnable command) {
+            command.run();
+        }
+    }
+
