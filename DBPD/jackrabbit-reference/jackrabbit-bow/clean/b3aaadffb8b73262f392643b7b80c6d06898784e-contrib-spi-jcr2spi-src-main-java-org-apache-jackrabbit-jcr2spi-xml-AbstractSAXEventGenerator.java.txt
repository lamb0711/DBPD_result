work in progress

- sync (JCR-482)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@447377 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.SessionNamespaceResolver;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.SessionNamespaceResolver;
+
+import org.xml.sax.helpers.AttributesImpl;
+import java.util.HashMap;
+import java.util.Map;
+
+     * the set of namespace declarations that have already been serialized
+     */
+    protected NamespaceStack namespaces;
+
+    /**
+        // start with an empty set of known prefixes
+        this.namespaces = new NamespaceStack(null);
+     * Adds explicit <code>xmlns:prefix="uri"</code> attributes to the
+     * XML element as required (e.g., normally just on the root
+     * element). The effect is the same as setting the
+     * "<code>http://xml.org/sax/features/namespace-prefixes</code>"
+     * property on an SAX parser.
+     *
+     * @param level level of the current XML element
+     * @param attributes attributes of the current XML element
+     * @throws RepositoryException on a repository error
+     */
+    protected void addNamespacePrefixes(int level, AttributesImpl attributes)
+            throws RepositoryException {
+        String[] prefixes = session.getNamespacePrefixes();
+        NamespaceStack newNamespaces = null;
+
+        for (int i = 0; i < prefixes.length; i++) {
+            String prefix = prefixes[i];
+
+            if (prefix.length() > 0
+                    && !QName.NS_XML_PREFIX.equals(prefix)) {
+                String uri = session.getNamespaceURI(prefix);
+
+                // get the matching namespace from previous declarations
+                String mappedToNs = this.namespaces.getNamespaceURI(prefix);
+
+                if (!uri.equals(mappedToNs)) {
+                    // when not the same, add a declaration
+                    attributes.addAttribute(
+                        QName.NS_XMLNS_URI,
+                        prefix,
+                        QName.NS_XMLNS_PREFIX + ":" + prefix,
+                        "CDATA",
+                        uri);
+
+                    if (newNamespaces == null) {
+                        // replace current namespace stack when needed
+                        newNamespaces = new NamespaceStack(this.namespaces);
+                        this.namespaces = newNamespaces;
+                    }
+
+                    // remember the new declaration
+                    newNamespaces.setNamespacePrefix(prefix, uri);
+                }
+            }
+        }
+    }
+
+    /**
-                Node childNode = nodeIter.nextNode();
+                Node childNode = nodeIter.nextNode();
+                // remember the current namespace declarations
+                NamespaceStack previousNamespaces = this.namespaces;
+
+
+                // restore the effective namespace declarations
+                // (from before visiting the child node)
+                this.namespaces = previousNamespaces;
+    /**
+     * Implements a simple stack of namespace declarations.
+     */
+    private static class NamespaceStack {
+
+        /**
+         * Parent stack (may be <code>null</code>)
+         */
+        private final NamespaceStack parent;
+
+        /**
+         * Local namespace declarations.
+         */
+        private final Map namespaces;
+
+        /**
+         * Instantiate a new stack
+         *
+         * @param parent parent stack (may be <code>null</code> for the initial stack)
+         */
+        public NamespaceStack(NamespaceStack parent) {
+            this.parent = parent;
+            this.namespaces = new HashMap();
+        }
+
+        /**
+         * Obtain namespace URI for a prefix
+         *
+         * @param prefix prefix
+         * @return namespace URI (or <code>null</code> when unknown)
+         */
+        public String getNamespaceURI(String prefix) {
+            String namespace = (String) namespaces.get(prefix);
+            if (namespace != null) {
+                // found in this element, return right away
+                return namespace;
+            } else if (parent != null) {
+                // ask parent, when present
+                return parent.getNamespaceURI(prefix);
+            } else {
+                return null;
+            }
+        }
+
+        /**
+         * Add a new prefix mapping
+         *
+         * @param prefix namespace prefix
+         * @param uri namespace URI
+         */
+        public void setNamespacePrefix(String prefix, String uri) {
+            namespaces.put(prefix, uri);
+        }
+
+    }
+
