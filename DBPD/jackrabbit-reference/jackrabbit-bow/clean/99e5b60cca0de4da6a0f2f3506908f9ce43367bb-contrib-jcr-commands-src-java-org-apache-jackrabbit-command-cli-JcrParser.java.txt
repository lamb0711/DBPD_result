jcr-commands 
 - naming and packaging reviewed
 - now commands only read parameters from the context because commands shouldn't have a state of their own but use only the context.
 - i18n reorganized in one single resources file
 - batch mode added
 - cover most of jcr operations (versioning, locking, etc.)
 - commands simplified. Most commands don't have default values.
 - logging added

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@294914 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.chain.cli;
+package org.apache.jackrabbit.command.cli;
-import org.apache.commons.beanutils.BeanUtils;
- * User's Input Parser. <br>
- * 
- * <ul>
- * <li>Lookup the CommandLine.</li>
- * <li>Populate CommandLine</li>
- * <li>Validate CommandLine</li>
- * <li>Get a Chain Command either from the the Catalog or by creating a new
- * Instance.</li>
- * </ul>
- * 
+ * Input Parser
-            parser.parse(JcrParser.class.getResource("chains.xml"));
+            parser.parse(JcrParser.class.getResource("command.xml"));
-            throw new JcrParserException("parse.input.empty");
+            throw new JcrParserException("exception.parse.input.empty");
-        // parse command line
+        // Get the command line descriptor
-        // populate with params
+        // populate with the given params
-        // populate with params
+        // validate the command line
-        createCommand();
-
-    }
-
-    /**
-     * If the CommandLine specifies an implementation a new Command instance
-     * will created an populated with the given parameters. If the CommandLine
-     * doesn't specify an implementation the parser will lookup the Command in
-     * the Catalog, and the attributes will be used to populate the Context.
-     * 
-     * @throws ConfigurationException
-     *             if the Command can not be instantiated or found in the
-     *             Catalog
-     */
-    private void createCommand() throws ConfigurationException
-    {
-        if (cl.getImpl() != null)
+        String impl = cl.getImpl();
+        if (impl == null)
-            try
-            {
-                log.debug("create command instance " + cl.getName());
-                // Get command
-                cmd = (Command) Class.forName(cl.getImpl()).newInstance();
+            impl = cl.getName();
+        }
+        cmd = catalog.getCommand(impl);
-                Map attrs = BeanUtils.describe(cmd);
-
-                Iterator iter = cl.getAllParameters();
-
-                while (iter.hasNext())
-                {
-                    AbstractParameter param = (AbstractParameter) iter.next();
-
-                    // Command attribute
-                    String commandAttr = param.getCommandAttribute();
-                    if (commandAttr == null)
-                    {
-                        commandAttr = param.getName();
-                    }
-
-                    // Check that the Command has the attribute
-                    if (!attrs.containsKey(commandAttr))
-                    {
-                        throw new ConfigurationException(
-                            "no.attribute.for.name", new String[]
-                            {
-                                    param.getName(), cmd.getClass().getName()
-                            });
-                    }
-
-                    BeanUtils.setProperty(cmd, commandAttr, param.getValue());
-                }
-
-            } catch (Exception e)
-            {
-                throw new ConfigurationException("parse.instantiate.command",
-                    e, new String[]
-                    {
-                        cl.getImpl()
-                    });
-            }
-        } else
+        if (cmd == null)
-            log.debug("lookup command " + cl.getName() + "in default catalog");
-            cmd = catalog.getCommand(cl.getName());
-            if (cmd == null)
-            {
-                throw new ConfigurationException(
-                    "no.command.in.catalog.for.name", new String[]
-                    {
-                        cl.getName()
-                    });
-            }
+            throw new JcrParserException("no chain command for name " + impl);
-        boolean exit = false;
-        if (cl.getImpl() == null)
+        Iterator iter = cl.getAllParameters();
+        while (iter.hasNext())
-            Iterator iter = cl.getAllParameters();
-            while (iter.hasNext())
-            {
-                AbstractParameter param = (AbstractParameter) iter.next();
-                log.debug("add ctx attr: " + param.getName() + "="
-                        + param.getValue());
-                ctx.put(param.getName(), param.getValue());
-            }
+            AbstractParameter param = (AbstractParameter) iter.next();
+            log.debug("add ctx attr: " + param.getContextKey() + "=" + param.getValue());
+            ctx.put(param.getContextKey(), param.getValue());
-    public void dePopulateContext(Context ctx)
+    public void depopulateContext(Context ctx)
-        if (cl.getImpl() == null)
+        Iterator iter = cl.getAllParameters();
+        while (iter.hasNext())
-            Iterator iter = cl.getAllParameters();
-            while (iter.hasNext())
-            {
-                AbstractParameter param = (AbstractParameter) iter.next();
-                log.debug("remove ctx attr: " + param.getName() + "="
-                        + param.getValue());
-                ctx.remove(param.getName());
-            }
+            AbstractParameter param = (AbstractParameter) iter.next();
+            String ctxKey = param.getContextKey() ;
+            log.debug("remove ctx attr: " + ctxKey + "=" + param.getValue());
+            ctx.remove(ctxKey);
