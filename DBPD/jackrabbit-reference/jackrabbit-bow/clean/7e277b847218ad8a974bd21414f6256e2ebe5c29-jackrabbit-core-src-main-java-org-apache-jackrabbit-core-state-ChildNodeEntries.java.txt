JCR-1705: Reduce memory usage of transient nodes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@691603 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.EmptyLinkedMap;
+import java.util.Map;
-    // insertion-ordered map of entries (key=NodeId, value=entry)
+    /**
+     * Insertion-ordered map of entries
+     * (key=NodeId, value=entry)
+     */
-    // map used for lookup by name
-    // (key=name, value=either a single entry or a list of sns entries)
-    private HashMap nameMap;
+
+    /**
+     * Map used for lookup by name
+     * (key=name, value=either a single entry or a list of sns entries)
+     */
+    private Map nameMap;
+
+    /**
+     * Indicates whether the entries and nameMap are shared with another
+     * ChildNodeEntries instance.
+     */
+    private boolean shared;
-        entries = new LinkedMap();
-        nameMap = new HashMap();
+        init();
+        ensureModifiable();
+        ensureModifiable();
-        nameMap.clear();
-        entries.clear();
+        init();
+
-        ChildNodeEntries clone = new ChildNodeEntries();
-        clone.entries = (LinkedMap) entries.clone();
-        clone.nameMap = new HashMap(nameMap.size());
-        for (Iterator it = nameMap.keySet().iterator(); it.hasNext();) {
-            Object key = it.next();
-            Object obj = nameMap.get(key);
-            if (obj instanceof ArrayList) {
-                // clone List
-                obj = ((ArrayList) obj).clone();
+        try {
+            ChildNodeEntries clone = (ChildNodeEntries) super.clone();
+            if (nameMap != Collections.EMPTY_MAP) {
+                clone.shared = true;
+                shared = true;
-            clone.nameMap.put(key, obj);
+            return clone;
+        } catch (CloneNotSupportedException e) {
+            // never happens, this class is cloneable
+            throw new InternalError();
-        return clone;
+    }
+
+    //-------------------------------------------------------------< internal >
+
+    /**
+     * Initializes the name and entries map with unmodifiable empty instances.
+     */
+    private void init() {
+        nameMap = Collections.EMPTY_MAP;
+        entries = EmptyLinkedMap.INSTANCE;
+        shared = false;
+    }
+
+    /**
+     * Ensures that the {@link #nameMap} and {@link #entries} map are
+     * modifiable.
+     */
+    private void ensureModifiable() {
+        if (nameMap == Collections.EMPTY_MAP) {
+            nameMap = new HashMap();
+            entries = new LinkedMap();
+        } else if (shared) {
+            entries = (LinkedMap) entries.clone();
+            nameMap = (Map) ((HashMap) nameMap).clone();
+            for (Iterator it = nameMap.entrySet().iterator(); it.hasNext(); ) {
+                Map.Entry entry = (Map.Entry) it.next();
+                Object value = entry.getValue();
+                if (value instanceof ArrayList) {
+                    entry.setValue(((ArrayList) value).clone());
+                }
+            }
+            shared = false;
+        }
