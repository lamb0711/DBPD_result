JCR-1483: Move common node type functionality to jackrabbit-spi-commons
- replaced NodeTypeDef (jackrabbit-core) with QNodeTypeDefinition
- QNodeTypeDefinitionImpl is not immutable, hence no cloning needed anymore
- introduced QNodeTypeDefinitionBuilder
- moved constructors of Q*DefinitionImpl classes in spi2jcr to spi-commons
- fixed a bug in RepositoryServiceImpl in spi2jcr

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816551 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.Value;
-import javax.jcr.ValueFormatException;
-import javax.jcr.nodetype.NodeDefinition;
-import javax.jcr.nodetype.PropertyDefinition;
-import org.apache.jackrabbit.core.value.InternalValue;
-import org.apache.jackrabbit.spi.QValueConstraint;
-import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.QNodeTypeDefinitionImpl;
+import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
-                NodeTypeDef def = ntReg.getNodeTypeDef(name);
+                QNodeTypeDefinition def = ntReg.getNodeTypeDef(name);
-            List<NodeTypeDef> nodeTypeDefs = new ArrayList<NodeTypeDef>();
+            List<QNodeTypeDefinition> nodeTypeDefs = new ArrayList<QNodeTypeDefinition>();
-                    NodeTypeDef[] defs = ntr.getNodeTypeDefs();
+                    QNodeTypeDefinition[] defs = ntr.getNodeTypeDefs();
-                        nodeTypeDefs.add(new NodeTypeDef(ntDef));
+                        nodeTypeDefs.add(ntDef);
-                List<NodeTypeDef> newNodeTypeDefs = new ArrayList<NodeTypeDef>();
-                List<NodeTypeDef> registeredNodeTypeDefs = new ArrayList<NodeTypeDef>();
-                for (NodeTypeDef nodeTypeDef: nodeTypeDefs) {
+                List<QNodeTypeDefinition> newNodeTypeDefs = new ArrayList<QNodeTypeDefinition>();
+                List<QNodeTypeDefinition> registeredNodeTypeDefs = new ArrayList<QNodeTypeDefinition>();
+                for (QNodeTypeDefinition nodeTypeDef: nodeTypeDefs) {
-                for (NodeTypeDef nodeTypeDef: registeredNodeTypeDefs) {
+                for (QNodeTypeDefinition nodeTypeDef: registeredNodeTypeDefs) {
-     * @param defs a collection of <code>NodeTypeDef<code> objects
+     * @param defs a collection of <code>QNodeTypeDefinition<code> objects
-    private Collection<NodeType> registerNodeTypes(List<NodeTypeDef> defs)
+    private Collection<NodeType> registerNodeTypes(List<QNodeTypeDefinition> defs)
-        for (NodeTypeDef def : defs) {
+        for (QNodeTypeDefinition def : defs) {
-        List<NodeTypeDef> addedDefs = new ArrayList<NodeTypeDef>();
-        List<NodeTypeDef> modifiedDefs = new ArrayList<NodeTypeDef>();
+        List<QNodeTypeDefinition> addedDefs = new ArrayList<QNodeTypeDefinition>();
+        List<QNodeTypeDefinition> modifiedDefs = new ArrayList<QNodeTypeDefinition>();
-            // convert to NodeTypeDef
-            NodeTypeDef def = toNodeTypeDef(definition);
+            // convert to QNodeTypeDefinition
+            QNodeTypeDefinition def = toNodeTypeDef(definition);
-            for (NodeTypeDef nodeTypeDef: modifiedDefs) {
+            for (QNodeTypeDefinition nodeTypeDef: modifiedDefs) {
-    private NodeTypeDef toNodeTypeDef(NodeTypeDefinition definition)
+    private QNodeTypeDefinition toNodeTypeDef(NodeTypeDefinition definition)
-        NodeTypeDef def = new NodeTypeDef();
-
-        // name
-        String name = definition.getName();
-        if (name == null) {
-            throw new InvalidNodeTypeDefinitionException("No node type name specified");
-        }
-        try {
-            def.setName(session.getQName(name));
-        } catch (NamespaceException e) {
-            throw new InvalidNodeTypeDefinitionException("Invalid name: " + name, e);
-        } catch (NameException e) {
-            throw new InvalidNodeTypeDefinitionException("Invalid name: " + name, e);
-        }
-
-        // supertypes
-        String[] names = definition.getDeclaredSupertypeNames();
-        Name[] qnames = new Name[names.length];
-        for (int i = 0; i < names.length; i++) {
-            try {
-                qnames[i] = session.getQName(names[i]);
-            } catch (NamespaceException e) {
-                throw new InvalidNodeTypeDefinitionException("Invalid supertype name: " + names[i], e);
-            } catch (NameException e) {
-                throw new InvalidNodeTypeDefinitionException("Invalid supertype name: " + names[i], e);
-            }
-        }
-        def.setSupertypes(qnames);
-
-        // primary item
-        name = definition.getPrimaryItemName();
-        if (name != null) {
-            try {
-                def.setPrimaryItemName(session.getQName(name));
-            } catch (NamespaceException e) {
-                throw new InvalidNodeTypeDefinitionException("Invalid primary item name: " + name, e);
-            } catch (NameException e) {
-                throw new InvalidNodeTypeDefinitionException("Invalid primary item name: " + name, e);
-            }
-        }
-
-        // misc. flags
-        def.setMixin(definition.isMixin());
-        def.setAbstract(definition.isAbstract());
-        def.setOrderableChildNodes(definition.hasOrderableChildNodes());
-
-        // child nodes
-        NodeDefinition[] ndefs = definition.getDeclaredChildNodeDefinitions();
-        if (ndefs != null) {
-            QNodeDefinition[] qndefs = new QNodeDefinition[ndefs.length];
-            for (int i = 0; i < ndefs.length; i++) {
-                QNodeDefinitionBuilder qndef = new QNodeDefinitionBuilder();
-                // declaring node type
-                qndef.setDeclaringNodeType(def.getName());
-                // name
-                name = ndefs[i].getName();
-                if (name != null) {
-                    if (name.equals("*")) {
-                        qndef.setName(NameConstants.ANY_NAME);
-                    } else {
-                        try {
-                            qndef.setName(session.getQName(name));
-                        } catch (NamespaceException e) {
-                            throw new InvalidNodeTypeDefinitionException("Invalid node name: " + name, e);
-                        } catch (NameException e) {
-                            throw new InvalidNodeTypeDefinitionException("Invalid node name: " + name, e);
-                        }
-                    }
-                }
-                // default primary type
-                name = ndefs[i].getDefaultPrimaryTypeName();
-                if (name != null) {
-                    try {
-                        qndef.setDefaultPrimaryType(session.getQName(name));
-                    } catch (NamespaceException e) {
-                        throw new InvalidNodeTypeDefinitionException("Invalid default primary type: " + name, e);
-                    } catch (NameException e) {
-                        throw new InvalidNodeTypeDefinitionException("Invalid default primary type: " + name, e);
-                    }
-                }
-                // required primary types
-                names = ndefs[i].getRequiredPrimaryTypeNames();
-                qnames = new Name[names.length];
-                for (int j = 0; j < names.length; j++) {
-                    try {
-                        qnames[j] = session.getQName(names[j]);
-                    } catch (NamespaceException e) {
-                        throw new InvalidNodeTypeDefinitionException("Invalid required primary type: " + names[j], e);
-                    } catch (NameException e) {
-                        throw new InvalidNodeTypeDefinitionException("Invalid required primary type: " + names[j], e);
-                    }
-                }
-                qndef.setRequiredPrimaryTypes(qnames);
-
-                // misc. flags/attributes
-                qndef.setAutoCreated(ndefs[i].isAutoCreated());
-                qndef.setMandatory(ndefs[i].isMandatory());
-                qndef.setProtected(ndefs[i].isProtected());
-                qndef.setOnParentVersion(ndefs[i].getOnParentVersion());
-                qndef.setAllowsSameNameSiblings(ndefs[i].allowsSameNameSiblings());
-
-                qndefs[i] = qndef.build();
-            }
-            def.setChildNodeDefs(qndefs);
-        }
-
-        // properties
-        PropertyDefinition[] pdefs = definition.getDeclaredPropertyDefinitions();
-        if (pdefs != null) {
-            QPropertyDefinition[] qpdefs = new QPropertyDefinition[pdefs.length];
-            for (int i = 0; i < pdefs.length; i++) {
-                QPropertyDefinitionBuilder qpdef = new QPropertyDefinitionBuilder();
-                // declaring node type
-                qpdef.setDeclaringNodeType(def.getName());
-                // name
-                name = pdefs[i].getName();
-                if (name != null) {
-                    if (name.equals("*")) {
-                        qpdef.setName(NameConstants.ANY_NAME);
-                    } else {
-                        try {
-                            qpdef.setName(session.getQName(name));
-                        } catch (NamespaceException e) {
-                            throw new InvalidNodeTypeDefinitionException("Invalid property name: " + name, e);
-                        } catch (NameException e) {
-                            throw new InvalidNodeTypeDefinitionException("Invalid property name: " + name, e);
-                        }
-                    }
-                }
-                // misc. flags/attributes
-                int type = pdefs[i].getRequiredType();
-                qpdef.setRequiredType(type);
-                qpdef.setAutoCreated(pdefs[i].isAutoCreated());
-                qpdef.setMandatory(pdefs[i].isMandatory());
-                qpdef.setProtected(pdefs[i].isProtected());
-                qpdef.setOnParentVersion(pdefs[i].getOnParentVersion());
-                qpdef.setMultiple(pdefs[i].isMultiple());
-                // value constraints
-                String[] constraints = pdefs[i].getValueConstraints();
-                if (constraints != null) {
-                    QValueConstraint[] qconstraints = new QValueConstraint[constraints.length];
-                    for (int j = 0; j < constraints.length; j++) {
-                        try {
-                            qconstraints[j] = ValueConstraint.create(type, constraints[j], session);
-                        } catch (InvalidConstraintException e) {
-                            throw new InvalidNodeTypeDefinitionException(
-                                    "Invalid value constraint: " + constraints[j], e);
-                        }
-                    }
-                    qpdef.setValueConstraints(qconstraints);
-                }
-                // default values
-                Value[] values = pdefs[i].getDefaultValues();
-                if (values != null) {
-                    InternalValue[] qvalues = new InternalValue[values.length];
-                    for (int j = 0; j < values.length; j++) {
-                        try {
-                            qvalues[j] = InternalValue.create(values[j], session);
-                        } catch (ValueFormatException e) {
-                            throw new InvalidNodeTypeDefinitionException(
-                                    "Invalid default value format: " + values[j], e);
-                        }
-                    }
-                    qpdef.setDefaultValues(qvalues);
-                }
-
-                qpdefs[i] = qpdef.build();
-            }
-            def.setPropertyDefs(qpdefs);
-        }
-
-        return def;
+        return new QNodeTypeDefinitionImpl(definition, session, QValueFactoryImpl.getInstance());
