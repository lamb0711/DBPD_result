JCR-2113 : JSR 283 Access Control Management (improve privilege discovery as discussed during f2f meeting with alfusainey and david, january 21)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1653976 13f79535-47bb-0310-9956-ffa450edef68

-    public PrivilegeDefinition[] getPrivileges(SessionInfo sessionInfo, NodeId nodeId) throws RepositoryException {
+    public Name[] getPrivilegeNames(SessionInfo sessionInfo, NodeId nodeId) throws RepositoryException {
-        return internalGetUserPrivilegeDefinitions(sessionInfo, uri);
-    }
-    
-    private PrivilegeDefinition[] internalGetUserPrivilegeDefinitions(SessionInfo sessionInfo, String uri) throws RepositoryException {
+
-        
-        // TODO
-        return new PrivilegeDefinition[0];
+        try {
+            method = new PropFindMethod(uri, nameSet, DEPTH_0);
+            getClient(sessionInfo).executeMethod(method);
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length < 1) {
+                throw new PathNotFoundException("Unable to retrieve privileges definitions.");
+            }
+
+            DavPropertyName displayName = SecurityConstants.SUPPORTED_PRIVILEGE_SET;
+            DavProperty<?> p = responses[0].getProperties(DavServletResponse.SC_OK).get(displayName);
+            if (p == null) {
+                return new Name[0];
+            } else {
+                Collection<Privilege> privs = new CurrentUserPrivilegeSetProperty(p).getValue();
+                Set<Name> privNames = new HashSet<Name>(privs.size());
+                for (Privilege priv : privs) {
+                    privNames.add(nameFactory.create(priv.getNamespace().getURI(), priv.getName()));
+                }
+                return privNames.toArray(new Name[privNames.size()]);
+            }
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
