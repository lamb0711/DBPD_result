Removed JDOM dependency from nodetype XML handling (JCR-54)
 - converted all JDOM references to the equivalent standard DOM code
 - Moved the rest of XML references out of the NodeTypeDefStore class
 - Added the NodeTypeFormatter facade class
 - Made a number of small changes and restructurings to better match the DOM API
 - Added a mostly complete test case in src/test/o.a.j/core/nodetype/xml
   (the tests in .../test/api/nodetype are more concerned with the nodetype
   API than the XML handling)
 - Added a simple ValueConstraint.equals() method to simplify the test cases
   (fixes a problem in NodeTypeDef.equals())


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157940 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NamespaceRegistry;
-import org.apache.jackrabbit.core.NamespaceRegistryImpl;
-import org.apache.jackrabbit.core.NamespaceResolver;
-import org.apache.jackrabbit.core.nodetype.xml.NodeTypeFormat;
-import org.apache.jackrabbit.core.nodetype.xml.AdditionalNamespaceResolver;
-import org.apache.log4j.Logger;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.JDOMException;
-import org.jdom.Namespace;
-import org.jdom.input.SAXBuilder;
-import org.jdom.output.Format;
-import org.jdom.output.XMLOutputter;
+import org.apache.jackrabbit.core.nodetype.xml.NodeTypeFormatter;
-    private static Logger log = Logger.getLogger(NodeTypeDefStore.class);
-    private static final String ROOT_ELEMENT = "nodeTypes";
+    /** Map of node type names to node type definitions. */
+    private final HashMap ntDefs;
-    // map of node type names and node type definitions
-    private HashMap ntDefs;
+    /** The node type definition file formatter. */
+    private final NodeTypeFormatter formatter;
-    NodeTypeDefStore() {
+    NodeTypeDefStore() throws RepositoryException {
+        formatter = new NodeTypeFormatter();
-     * @throws RepositoryException
-            throws IOException, InvalidNodeTypeDefException, RepositoryException {
-        SAXBuilder builder = new SAXBuilder();
-        Element root;
-        try {
-            Document doc = builder.build(in);
-            root = doc.getRootElement();
-        } catch (JDOMException jde) {
-            String msg = "internal error: failed to parse persistent node type definitions";
-            log.debug(msg);
-            throw new RepositoryException(msg, jde);
-        }
-
-        // read definitions
-        NamespaceResolver resolver = new AdditionalNamespaceResolver(root);
-        Iterator iter =
-            root.getChildren(NodeTypeFormat.NODETYPE_ELEMENT).iterator();
-        while (iter.hasNext()) {
-            NodeTypeFormat format =
-                new NodeTypeFormat(resolver, (Element) iter.next());
-            format.read();
-            add(format.getNodeType());
+            throws IOException, InvalidNodeTypeDefException,
+            RepositoryException {
+        Collection types = formatter.read(in);
+        Iterator iterator = types.iterator();
+        while (iterator.hasNext()) {
+            add((NodeTypeDef) iterator.next());
-    void store(OutputStream out, NamespaceRegistryImpl nsReg)
+    void store(OutputStream out, NamespaceRegistry registry)
-        Element root = new Element(ROOT_ELEMENT);
-
-        // namespace declarations
-        String[] prefixes = nsReg.getPrefixes();
-        for (int i = 0; i < prefixes.length; i++) {
-            String prefix = prefixes[i];
-            if ("".equals(prefix)) {
-                continue;
-            }
-            String uri = nsReg.getURI(prefix);
-            root.addNamespaceDeclaration(Namespace.getNamespace(prefix, uri));
-        }
-
-        // node type definitions
-        Iterator iter = all().iterator();
-        while (iter.hasNext()) {
-            NodeTypeFormat format =
-                new NodeTypeFormat(nsReg, (NodeTypeDef) iter.next());
-            format.write();
-            root.addContent(format.getElement());
-        }
-
-        XMLOutputter serializer = new XMLOutputter(Format.getPrettyFormat());
-        serializer.output(new Document(root), out);
+        formatter.write(out, registry, ntDefs.values());
