makeshift implementation of Workspace.getImportContentHandler();
will be replaced later with proper implementation

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157346 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.xml.Importer;
-import org.apache.jackrabbit.core.xml.WorkspaceImporter;
+import org.xml.sax.Attributes;
+import org.xml.sax.Locator;
+        /**
+         * the following code (importing through temporary session) is
+         * just a work-around; a specialized WorkspaceImporter that by-passes
+         * the transient layer should be used instead.
+         *
+         * todo replace with specialized WorkspaceImporter once fully implemented
+         */
+
+        // create temporary session in order to prevent state changes
+        // of the current session
+        final SessionImpl tmpSession = rep.createSession(session.getSubject(), getName());
+        final ContentHandler handler =
+                tmpSession.getImportContentHandler(parentAbsPath);
+        return new ContentHandler() {
+            public void endDocument() throws SAXException {
+                handler.endDocument();
+                // save changes & logout
+                try {
+                    tmpSession.save();
+                } catch (RepositoryException re) {
+                    throw new SAXException(re);
+                } finally {
+                    tmpSession.logout();
+                }
+            }
+
+            public void startDocument() throws SAXException {
+                handler.startDocument();
+            }
+
+            public void characters(char ch[], int start, int length) throws SAXException {
+                handler.characters(ch, start, length);
+            }
+
+            public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {
+                handler.ignorableWhitespace(ch, start, length);
+            }
+
+            public void endPrefixMapping(String prefix) throws SAXException {
+                handler.endPrefixMapping(prefix);
+            }
+
+            public void skippedEntity(String name) throws SAXException {
+                handler.endPrefixMapping(name);
+            }
+
+            public void setDocumentLocator(Locator locator) {
+                handler.setDocumentLocator(locator);
+            }
+
+            public void processingInstruction(String target, String data) throws SAXException {
+                handler.processingInstruction(target, data);
+            }
+
+            public void startPrefixMapping(String prefix, String uri) throws SAXException {
+                handler.startPrefixMapping(prefix, uri);
+            }
+
+            public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
+                handler.endElement(namespaceURI, localName, qName);
+            }
+
+            public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
+                handler.startElement(namespaceURI, localName, qName, atts);
+            }
+        };
+/*
+*/
