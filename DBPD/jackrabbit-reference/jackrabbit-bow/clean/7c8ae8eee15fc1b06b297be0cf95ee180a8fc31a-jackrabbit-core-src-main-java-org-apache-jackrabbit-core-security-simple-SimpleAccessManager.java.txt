JCR-1588: 283 Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689499 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
-import org.apache.jackrabbit.api.jsr283.security.AccessControlException;
+import org.apache.jackrabbit.core.security.authorization.NamedAccessControlPolicyImpl;
-import org.apache.jackrabbit.core.security.authorization.PolicyTemplate;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import java.security.Principal;
+     * The policy returned upon {@link #getEffectivePolicies(String)}
+     */
+    private static final AccessControlPolicy POLICY = new NamedAccessControlPolicyImpl("Simple AccessControlPolicy");
+
+    /**
+    private PrivilegeRegistry privilegeRegistry;
-    //--------------------------------------------------------< AccessManager >
+    //------------------------------------------------------< AccessManager >---
+        privilegeRegistry = new PrivilegeRegistry(resolver);
-            int bits = PrivilegeRegistry.getBits(privileges);
+            int bits = privilegeRegistry.getBits(privileges);
-            return new Privilege[] {PrivilegeRegistry.READ_PRIVILEGE};
+            return privilegeRegistry.getPrivileges(PrivilegeRegistry.READ);
-            return new Privilege[] {PrivilegeRegistry.ALL_PRIVILEGE};
+            return privilegeRegistry.getPrivileges(PrivilegeRegistry.ALL);
-            return new Privilege[] {PrivilegeRegistry.ALL_PRIVILEGE};
+            return privilegeRegistry.getPrivileges(PrivilegeRegistry.ALL);
-    public AccessControlPolicy getEffectivePolicy(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
+    public AccessControlPolicy[] getEffectivePolicies(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
-        return new AccessControlPolicy() {
-            public String getName() throws RepositoryException {
-                return "Simple AccessControlPolicy";
-            }
-            public String getDescription() throws RepositoryException {
-                return null;
-            }
-        };
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public AccessControlEntry[] getEffectiveAccessControlEntries(String absPath) throws PathNotFoundException, AccessDeniedException, RepositoryException {
-        checkInitialized();
-        checkPrivileges(absPath, PrivilegeRegistry.READ_AC);
-
-        return new AccessControlEntry[0];
-    }
-
-    //-------------------------------------< JackrabbitAccessControlManager >---
-    /**
-     * {@inheritDoc}
-     */
-    public PolicyTemplate editPolicy(String absPath) throws AccessDeniedException, AccessControlException, UnsupportedRepositoryOperationException, RepositoryException {
-        checkInitialized();
-        checkPrivileges(absPath, PrivilegeRegistry.MODIFY_AC);
-
-        throw new UnsupportedRepositoryOperationException("Editing is not supported");
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public PolicyTemplate editPolicy(Principal principal) throws AccessDeniedException, AccessControlException, UnsupportedRepositoryOperationException, RepositoryException {
-        throw new UnsupportedRepositoryOperationException("Editing is not supported");
+        return new AccessControlPolicy[] {POLICY};
-     * {@inheritDoc}
+     * @see AbstractAccessControlManager#checkInitialized()
+    /**
+     * @see AbstractAccessControlManager#checkPrivileges(String, int)
+     */
+    /**
+     * @see AbstractAccessControlManager#getPrivilegeRegistry()
+     */
+    protected PrivilegeRegistry getPrivilegeRegistry()
+            throws RepositoryException {
+        checkInitialized();
+        return privilegeRegistry;
+    }
+
+    /**
+     * @see AbstractAccessControlManager#checkValidNodePath(String)
+     */
