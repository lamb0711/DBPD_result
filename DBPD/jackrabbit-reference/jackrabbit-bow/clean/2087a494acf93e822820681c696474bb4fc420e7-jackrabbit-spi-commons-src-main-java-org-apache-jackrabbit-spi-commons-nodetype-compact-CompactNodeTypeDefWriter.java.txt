JCR-2064 Add new JSR283 features to CND reader/writer
JCR-2153 Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()
JCR-2158 Consolidate CND related classes from SPI and Core


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785777 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
-import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.Set;
-import javax.jcr.ValueFactory;
+import javax.jcr.query.qom.QueryObjectModelConstants;
+import org.apache.jackrabbit.spi.QValueConstraint;
-import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
+import org.apache.jackrabbit.spi.commons.nodetype.InvalidConstraintException;
+import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
+import org.apache.jackrabbit.spi.commons.query.qom.Operator;
-    private final HashSet usedNamespaces = new HashSet();
+    private final Set<String> usedNamespaces = new HashSet<String>();
-     * Creates a new nodetype writer
+     * Creates a new nodetype writer that does not include namepsaces.
-     * @param out the underlying writer
-     * @param r the namespace resolver
-     * @param npResolver
-     * @param valueFactory
+     * @param out the underlaying writer
+     * @param r the naespace resolver
+     * @param npResolver name-path resolver
-    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r, NamePathResolver npResolver,
-            ValueFactory valueFactory) {
-        this(out, r, npResolver, valueFactory, false);
+    public CompactNodeTypeDefWriter(Writer out,
+                                    NamespaceResolver r,
+                                    NamePathResolver npResolver) {
+        this(out, r, npResolver, false);
-     * @param npResolver
-     * @param valueFactory
+     * @param npResolver name-path resolver
-    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r, NamePathResolver npResolver,
-            ValueFactory valueFactory, boolean includeNS) {
+    public CompactNodeTypeDefWriter(Writer out,
+                                    NamespaceResolver r,
+                                    NamePathResolver npResolver,
+                                    boolean includeNS) {
-     * @param l
-     * @param r
-     * @param npResolver
-     * @param valueFactory
-     * @param out
-     * @throws IOException
+     * @param defs collection of definitions
+     * @param r namespace resolver
+     * @param npResolver name-path resolver
+     * @param out output writer
+     * @throws IOException if an I/O error occurs
-    public static void write(List l, NamespaceResolver r, NamePathResolver npResolver,
-            ValueFactory valueFactory, Writer out)
+    public static void write(Collection<QNodeTypeDefinition> defs,
+                             NamespaceResolver r,
+                             NamePathResolver npResolver,
+                             Writer out)
-        CompactNodeTypeDefWriter w = new CompactNodeTypeDefWriter(out, r, npResolver, valueFactory, true);
-        Iterator iter = l.iterator();
-        while (iter.hasNext()) {
-            QNodeTypeDefinition def = (QNodeTypeDefinition) iter.next();
+        CompactNodeTypeDefWriter w = new CompactNodeTypeDefWriter(out, r, npResolver, true);
+        for (QNodeTypeDefinition def : defs) {
-     * @param ntd
-     * @throws IOException
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
+     * Write one QNodeTypeDefinition to this writer
+     *
+     * @param defs node type definitions
+     * @throws IOException if an I/O error occurs
+     */
+    public void write(Collection<QNodeTypeDefinition> defs) throws IOException {
+        for (QNodeTypeDefinition def : defs) {
+            write(def);
+        }
+    }
+
+    /**
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
-        Name[] sta = ntd.getSupertypes();
-        for (int i = 0; i < sta.length; i++) {
+        for (Name name : ntd.getSupertypes()) {
-            out.write(resolve(sta[i]));
+            out.write(resolve(name));
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
+        List<String> options = new LinkedList<String>();
+        if (ntd.isAbstract()) {
+            options.add(Lexer.ABSTRACT[0]);
+        }
-            out.write("\n" + INDENT);
-            out.write("orderable");
-            if (ntd.isMixin()) {
-                out.write(" mixin");
+            options.add(Lexer.ORDERABLE[0]);
+        }
+        if (ntd.isMixin()) {
+            options.add(Lexer.MIXIN[0]);
+        }
+        if (!ntd.isQueryable()) {
+            options.add(Lexer.NOQUERY[0]);
+        }
+        if (ntd.getPrimaryItemName() != null) {
+            options.add(Lexer.PRIMARYITEM[0]);
+            options.add(resolve(ntd.getPrimaryItemName()));
+        }
+        for (int i = 0; i < options.size(); i++) {
+            if (i == 0) {
+                out.write("\n" + INDENT);
+            } else {
+                out.write(" ");
-        } else if (ntd.isMixin()) {
-            out.write("\n" + INDENT);
-            out.write("mixin");
+            out.write(options.get(i));
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
-        QPropertyDefinition[] pda = ntd.getPropertyDefs();
-        for (int i = 0; i < pda.length; i++) {
-            QPropertyDefinition pd = pda[i];
-            writePropDef(ntd, pd);
+        for (QPropertyDefinition pd : ntd.getPropertyDefs()) {
+            writePropDef(pd);
+     * @param ntd node type definition
+     * @throws IOException if an I/O error occurs
-        QNodeDefinition[] nda = ntd.getChildNodeDefs();
-        for (int i = 0; i < nda.length; i++) {
-            QNodeDefinition nd = nda[i];
-            writeNodeDef(ntd, nd);
+        for (QNodeDefinition nd : ntd.getChildNodeDefs()) {
+            writeNodeDef(nd);
-     * @param pd
+     * @param pd property definition
+     * @throws IOException if an I/O error occurs
-    private void writePropDef(QNodeTypeDefinition ntd, QPropertyDefinition pd) throws IOException {
+    private void writePropDef(QPropertyDefinition pd) throws IOException {
-        out.write(ntd.getPrimaryItemName() != null && ntd.getPrimaryItemName().equals(pd.getName()) ? " primary" : "");
+        if (!pd.isFullTextSearchable()) {
+            out.write(" nofulltext");
+        }
+        if (!pd.isQueryOrderable()) {
+            out.write(" noqueryorder");
+        }
+        String[] qops = pd.getAvailableQueryOperators();
+        if (qops != null && qops.length > 0) {
+            List<String> opts = new ArrayList<String>(Arrays.asList(qops));
+            List<String> defaultOps = Arrays.asList(Operator.getAllQueryOperators());
+            if (!opts.containsAll(defaultOps)) {
+                out.write(" queryops '");
+                String delim = "";
+                for (String opt: opts) {
+                    out.write(delim);
+                    delim= ", ";
+                    if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_EQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_NOT_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_NOTEQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN)) {
+                        out.write(Lexer.QUEROPS_GREATERTHAN);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_GREATERTHANOREQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN)) {
+                        out.write(Lexer.QUEROPS_LESSTHAN);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO)) {
+                        out.write(Lexer.QUEROPS_LESSTHANOREQUAL);
+                    } else if (opt.equals(QueryObjectModelConstants.JCR_OPERATOR_LIKE)) {
+                        out.write(Lexer.QUEROPS_LIKE);
+                    }
+                }
+                out.write("'");
+            }
+        }
-     * @param dva
+     * @param dva default value
+     * @throws IOException if an I/O error occurs
-            for (int i = 0; i < dva.length; i++) {
+            for (QValue value : dva) {
-                    String str = ValueFormat.getJCRString(dva[i], npResolver);
+                    String str = ValueFormat.getJCRString(value, npResolver);
-                    out.write(escape(dva[i].toString()));
+                    out.write(escape(value.toString()));
-     * @param vca
+     * @param vca value constraint
+     * @param type value type
+     * @throws IOException if an I/O error occurs
-    private void writeValueConstraints(String[] vca, int type) throws IOException {
+    private void writeValueConstraints(QValueConstraint[] vca, int type) throws IOException {
-    private String convertConstraint(String vc, int type) {
-        if (type == PropertyType.REFERENCE
-                || type == PropertyType.WEAKREFERENCE
-                || type == PropertyType.NAME
-                || type == PropertyType.PATH) {
-            if (type == PropertyType.REFERENCE
-                    || type == PropertyType.WEAKREFERENCE) {
-                type = PropertyType.NAME;
-            }
-
-            try {
-                QValue qv = QValueFactoryImpl.getInstance().create(vc, type);
-                vc = ValueFormat.getJCRString(qv, npResolver);
-            }
-            catch (RepositoryException e) {
-                // ignore -> return unconverted constraint
-            }
+    /**
+     * Converts the constraint to a jcr value
+     * @param vc value constraint string
+     * @param type value type
+     * @return converted value
+     */
+    private String convertConstraint(QValueConstraint vc, int type) {
+        try {
+            ValueConstraint c = ValueConstraint.create(type, vc.getString());
+            return c.getDefinition(npResolver);
+        } catch (InvalidConstraintException e) {
+            // ignore -> return unconverted constraint
+            return vc.getString();
-
-        return vc;
-     * @param nd
+     * @param nd node definition
+     * @throws IOException if an I/O error occurs
-    private void writeNodeDef(QNodeTypeDefinition ntd, QNodeDefinition nd) throws IOException {
+    private void writeNodeDef(QNodeDefinition nd) throws IOException {
-        out.write(ntd.getPrimaryItemName() != null && ntd.getPrimaryItemName().equals(nd.getName()) ? " primary" : "");
-     * @param name
-     * @throws IOException
+     * @param name name
+     * @throws IOException if an I/O error occurs
-     * @param reqTypes
+     * @param reqTypes required type names
+     * @throws IOException if an I/O error occurs
-            for (int i = 0; i < reqTypes.length; i++) {
+            for (Name reqType : reqTypes) {
-                out.write(resolve(reqTypes[i]));
+                out.write(resolve(reqType));
-     * @param defType
+     * @param defType default type name
+     * @throws IOException if an I/O error occurs
-     * @param name
+     * @param name name to resolve
+     * @throws IOException if an I/O error occurs
-     * @param s
+     * @param s string
