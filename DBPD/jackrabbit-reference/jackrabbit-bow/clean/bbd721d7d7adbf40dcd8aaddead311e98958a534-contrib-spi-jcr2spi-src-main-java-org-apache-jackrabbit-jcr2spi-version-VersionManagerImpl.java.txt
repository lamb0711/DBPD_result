JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

-        NodeState wspState = getWorkspaceState(nodeState);
-        Operation ci = Checkin.create(wspState, this);
+        Operation ci = Checkin.create(nodeState, this);
-        NodeState wspState = getWorkspaceState(nodeState);
-        Operation co = Checkout.create(wspState, this);
+        Operation co = Checkout.create(nodeState, this);
-        NodeState wspVersionState = getWorkspaceState(versionState);
-        Operation op = RemoveVersion.create(wspVersionState, getWorkspaceState(versionHistoryState), this);
+        Operation op = RemoveVersion.create(versionState, versionHistoryState, this);
-        NodeState wspVHState = getWorkspaceState(versionHistoryState);
-        NodeState wspVState = getWorkspaceState(versionState);
-        Operation op = AddLabel.create(wspVHState, wspVState, qLabel, moveLabel);
+        Operation op = AddLabel.create(versionHistoryState, versionState, qLabel, moveLabel);
-        NodeState wspVHState = getWorkspaceState(versionHistoryState);
-        NodeState wspVState = getWorkspaceState(versionState);
-        Operation op = RemoveLabel.create(wspVHState, wspVState, qLabel);
+        Operation op = RemoveLabel.create(versionHistoryState, versionState, qLabel);
-        NodeState wspState = getWorkspaceState(nodeState);
-        NodeState wspVState = getWorkspaceState(versionState);
-        Operation op = Restore.create(wspState, relativePath, wspVState, removeExisting);
+        Operation op = Restore.create(nodeState, relativePath, versionState, removeExisting);
-        NodeState[] wspStates = new NodeState[versionStates.length];
-        for (int i = 0; i < versionStates.length; i++) {
-            wspStates[i] = getWorkspaceState(versionStates[i]);
-        }
-
-        Operation op = Restore.create(wspStates, removeExisting);
+        Operation op = Restore.create(versionStates, removeExisting);
-        NodeState wspState = getWorkspaceState(nodeState);
-        Merge op = Merge.create(wspState, workspaceName, bestEffort, this);
+        Merge op = Merge.create(nodeState, workspaceName, bestEffort, this);
-        NodeState wspState = getWorkspaceState(nodeState);
-        NodeId vId = getWorkspaceState(versionState).getNodeId();
+        NodeId vId = versionState.getNodeId();
-        PropertyState mergeFailedState = wspState.getPropertyState(QName.JCR_MERGEFAILED);
+        PropertyState mergeFailedState = nodeState.getPropertyState(QName.JCR_MERGEFAILED);
-        PropertyState predecessorState = wspState.getPropertyState(QName.JCR_PREDECESSORS);
+        PropertyState predecessorState = nodeState.getPropertyState(QName.JCR_PREDECESSORS);
-        Operation op = ResolveMergeConflict.create(wspState, mergeFailedIds, predecessorIds, done);
+        Operation op = ResolveMergeConflict.create(nodeState, mergeFailedIds, predecessorIds, done);
-    public NodeEntry getVersionableNodeState(NodeState versionState) throws RepositoryException {
+    public NodeEntry getVersionableNodeEntry(NodeState versionState) throws RepositoryException {
-    public NodeEntry getVersionHistoryNodeState(NodeState versionableState) throws RepositoryException {
+    public NodeEntry getVersionHistoryEntry(NodeState versionableState) throws RepositoryException {
-
-    //------------------------------------------------------------< private >---
-    /**
-     * If the given <code>NodeState</code> has an overlayed state, the overlayed
-     * (workspace) state will be returned. Otherwise the given state is returned.
-     *
-     * @param nodeState
-     * @return The overlayed state or the given state, if this one does not have
-     * an overlayed state.
-     */
-    private NodeState getWorkspaceState(NodeState nodeState) {
-        return (NodeState) nodeState.getWorkspaceState();
-    }
