Cleanup log call by using the message pattern mechanism of SLF4J

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@514657 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-        log.debug("DynamicRepositoryClassLoader: " + this + " ready");
+        log.debug("DynamicRepositoryClassLoader: {} ready", this);
-        log.debug("DynamicRepositoryClassLoader: Copied " + old + ". Do not use " +
-                "that anymore");
+        log.debug(
+            "DynamicRepositoryClassLoader: Copied {}. Do not use that anymore",
+            old);
-            log.debug("shouldReload: Expiring cache entry " + res);
+            log.debug("shouldReload: Expiring cache entry {}", res);
-        log.debug("reinstantiate: Copying " + this + " with parent " + parent);
+        log.debug("reinstantiate: Copying {} with parent {}", this, parent);
-        log.debug("reconfigure: Reconfiguring the with " + classPath);
+        if (log.isDebugEnabled()) {
+            log.debug("reconfigure: Reconfiguring the with {}",
+                Arrays.asList(classPath));
+        }
-        log.debug("reconfigure: Class loader is dirty now: " +
-                (isDirty() ? "yes" : "no"));
+        log.debug("reconfigure: Class loader is dirty now: {}", (isDirty()
+                ? "yes"
+                : "no"));
+            String path;
-                String path = event.getPath();
-                log.debug("onEvent: Item " + path + " has been modified, " +
-                        "checking with cache");
-
-                ClassLoaderResource resource =
-                    (ClassLoaderResource) modTimeCache.get(path);
-                if (resource != null) {
-                    log.debug("pageModified: Expiring cache entry "+ resource);
-                    expireResource(resource);
-                } else {
-                    // might be in not-found cache - remove from there
-                    if (event.getType() == Event.NODE_ADDED ||
-                            event.getType() == Event.PROPERTY_ADDED) {
-                        log.debug("pageModified: Clearing not-found cache " +
-                                "for possible new class");
-                        cleanCache();
-                    }
-                }
-
+                path = event.getPath();
-                //
+                log.warn("onEvent: Cannot get path of event, ignoring", re);
+                continue;
+                
+            log.debug(
+                "onEvent: Item {} has been modified, checking with cache", path);
+
+            ClassLoaderResource resource = (ClassLoaderResource) modTimeCache.get(path);
+            if (resource != null) {
+                log.debug("pageModified: Expiring cache entry {}", resource);
+                expireResource(resource);
+            } else {
+                // might be in not-found cache - remove from there
+                if (event.getType() == Event.NODE_ADDED
+                    || event.getType() == Event.PROPERTY_ADDED) {
+                    log.debug("pageModified: Clearing not-found cache for possible new class");
+                    cleanCache();
+                }
+            }
+
-    //----------- PatternPath.Listener interface -------------------------
+    // ----------- PatternPath.Listener interface -------------------------
-        log.debug("expireResource: Loader dirty: " + isDirty());
+        log.debug("expireResource: Loader dirty: {}", new Boolean(isDirty()));
-                log.debug("resetClassPathEntries: Cloning " + entry);
+                log.debug("resetClassPathEntries: Cloning {}", entry);
