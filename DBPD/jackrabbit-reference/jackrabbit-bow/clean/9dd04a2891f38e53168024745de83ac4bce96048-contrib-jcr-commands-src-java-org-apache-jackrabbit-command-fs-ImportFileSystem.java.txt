jcr-97: Improve Checkstyle conformance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312896 13f79535-47bb-0310-9956-ffa450edef68

- * This command imports data from the file system. <br>
- * If the given path refers to a file it's imported to a node of type nt:file
- * under the current working node. <br>
+ * Import data from the file system. <br>
+ * If the given path refers to a file it's imported to a <code>Node</code> of
+ * type nt:file under the current working <code>Node<code>.<br>
- * imported
+ * imported.
-public class ImportFileSystem implements Command
-{
-	/** logger */
-	private static Log log = LogFactory.getLog(ImportFileSystem.class);
+public class ImportFileSystem implements Command {
+    /** logger */
+    private static Log log = LogFactory.getLog(ImportFileSystem.class);
-	/** extension to mime type mapping */
-	private static Properties mimeTypes;
+    /** extension to mime type mapping */
+    private static Properties mimeTypes;
-	static
-	{
-		try
-		{
-			mimeTypes = new Properties();
-			mimeTypes.load(ImportFileSystem.class
-					.getResourceAsStream("mimetypes.properties"));
-		} catch (Exception e)
-		{
-			log.error("unable to load mime types", e);
-		}
-	}
+    static {
+        try {
+            mimeTypes = new Properties();
+            mimeTypes.load(ImportFileSystem.class
+                .getResourceAsStream("mimetypes.properties"));
+        } catch (Exception e) {
+            log.error("unable to load mime types", e);
+        }
+    }
-	// ---------------------------- < keys >
+    // ---------------------------- < keys >
-	/** File system path key */
-	private String srcFsPathKey = "srcFsPath";
+    /** File system path key */
+    private String srcFsPathKey = "srcFsPath";
-	public boolean execute(Context ctx) throws Exception
-	{
-		String file = (String) ctx.get(this.srcFsPathKey);
-		Node parent = CommandHelper.getCurrentNode(ctx);
+    /**
+     * {@inheritDoc}
+     */
+    public boolean execute(Context ctx) throws Exception {
+        String file = (String) ctx.get(this.srcFsPathKey);
+        Node parent = CommandHelper.getCurrentNode(ctx);
-		if (log.isDebugEnabled())
-		{
-			log.debug("importing filesystem from " + file + " to node "
-					+ parent);
-		}
+        if (log.isDebugEnabled()) {
+            log.debug("importing filesystem from " + file + " to node "
+                    + parent);
+        }
-		if (file == null)
-		{
-			throw new CommandException("exception.fspath.is.null");
-		}
+        if (file == null) {
+            throw new CommandException("exception.fspath.is.null");
+        }
-		File f = new File(file);
+        File f = new File(file);
-		if (!f.exists())
-		{
-			throw new CommandException("exception.file.not.found", new String[]
-			{ file });
-		}
+        if (!f.exists()) {
+            throw new CommandException("exception.file.not.found",
+                new String[] {
+                    file
+                });
+        }
-		if (f.isFile())
-		{
-			this.importFile(parent, f);
-		} else
-		{
-			Node folder = parent.addNode(f.getName(), "nt:folder");
-			this.importFolder(folder, f);
-		}
+        if (f.isFile()) {
+            this.importFile(parent, f);
+        } else {
+            Node folder = parent.addNode(f.getName(), "nt:folder");
+            this.importFolder(folder, f);
+        }
-		return false;
-	}
+        return false;
+    }
-	/**
-	 * Imports a File.
-	 * 
-	 * @param parentnode
-	 *            Parent Repository Node
-	 * @param file
-	 *            File to be imported
-	 * @throws RepositoryException
-	 *             on repository errors, IOException on io errors
-	 */
+    /**
+     * Imports a File.
+     * @param parentnode
+     *        Parent <code>Node</code>
+     * @param file
+     *        <code>File</code> to be imported
+     * @throws RepositoryException
+     *         on <code>Repository</code> errors
+     * @throws IOException
+     *         on io errors
+     */
-	private void importFile(Node parentnode, File file)
-			throws RepositoryException, IOException
-	{
-		String mimeType = null;
-		String extension = getExtension(file.getName());
-		if (extension != null)
-		{
-			mimeType = mimeTypes.getProperty(extension);
-		}
-		if (mimeType == null)
-		{
-			mimeType = "application/octet-stream";
-		}
+    private void importFile(Node parentnode, File file)
+            throws RepositoryException, IOException {
+        String mimeType = null;
+        String extension = getExtension(file.getName());
+        if (extension != null) {
+            mimeType = mimeTypes.getProperty(extension);
+        }
+        if (mimeType == null) {
+            mimeType = "application/octet-stream";
+        }
-		Node fileNode = parentnode.addNode(file.getName(), "nt:file");
-		Node resNode = fileNode.addNode("jcr:content", "nt:resource");
-		resNode.setProperty("jcr:mimeType", mimeType);
-		resNode.setProperty("jcr:encoding", "");
-		resNode.setProperty("jcr:data", new FileInputStream(file));
-		Calendar lastModified = Calendar.getInstance();
-		lastModified.setTimeInMillis(file.lastModified());
-		resNode.setProperty("jcr:lastModified", lastModified);
-	}
+        Node fileNode = parentnode.addNode(file.getName(), "nt:file");
+        Node resNode = fileNode.addNode("jcr:content", "nt:resource");
+        resNode.setProperty("jcr:mimeType", mimeType);
+        resNode.setProperty("jcr:encoding", "");
+        resNode.setProperty("jcr:data", new FileInputStream(file));
+        Calendar lastModified = Calendar.getInstance();
+        lastModified.setTimeInMillis(file.lastModified());
+        resNode.setProperty("jcr:lastModified", lastModified);
+    }
-	/**
-	 * Import a Folder.
-	 * 
-	 * @param parentnode
-	 *            Parent Repository Node
-	 * @param directory
-	 *            Directory to be traversed
-	 * @throws RepositoryException
-	 *             on repository errors, IOException on io errors
-	 */
+    /**
+     * Import a Folder.
+     * @param parentnode
+     *        Parent <code>Node</code>
+     * @param directory
+     *        File system directory to traverse
+     * @throws RepositoryException
+     *         on repository errors
+     * @throws IOException
+     *         on io errors
+     */
+    private void importFolder(Node parentnode, File directory)
+            throws RepositoryException, IOException {
+        File[] direntries = directory.listFiles();
+        for (int i = 0; i < direntries.length; i++) {
+            File direntry = direntries[i];
+            if (direntry.isDirectory()) {
+                Node childnode = parentnode.addNode(direntry.getName(),
+                    "nt:folder");
+                importFolder(childnode, direntry);
+            } else {
+                importFile(parentnode, direntry);
+            }
+        }
+    }
-	private void importFolder(Node parentnode, File directory)
-			throws RepositoryException, IOException
-	{
-		File[] direntries = directory.listFiles();
-		for (int i = 0; i < direntries.length; i++)
-		{
-			File direntry = direntries[i];
-			if (direntry.isDirectory())
-			{
-				Node childnode = parentnode.addNode(direntry.getName(),
-						"nt:folder");
-				importFolder(childnode, direntry);
-			} else
-			{
-				importFile(parentnode, direntry);
-			}
-		}
-	}
+    /**
+     * @param name
+     *        the file name
+     * @return the extension for the given file name
+     */
+    private String getExtension(String name) {
+        String ext = null;
+        if (name.lastIndexOf('.') != -1) {
+            ext = name.substring(name.lastIndexOf('.') + 1);
+        }
+        return ext;
+    }
-	private String getExtension(String name)
-	{
-		String ext = null;
-		if (name.lastIndexOf('.') != -1)
-		{
-			ext = name.substring(name.lastIndexOf('.') + 1);
-		}
-		return ext;
-	}
+    /**
+     * @return the from key
+     */
+    public String getSrcFsPathKey() {
+        return srcFsPathKey;
+    }
-	/**
-	 * @return Returns the fromKey.
-	 */
-	public String getSrcFsPathKey()
-	{
-		return srcFsPathKey;
-	}
-
-	/**
-	 * @param fromKey
-	 *            Set the context attribute key for the from attribute.
-	 */
-	public void setSrcFsPathKey(String fromKey)
-	{
-		this.srcFsPathKey = fromKey;
-	}
+    /**
+     * @param fromKey
+     *        the from key to set
+     */
+    public void setSrcFsPathKey(String fromKey) {
+        this.srcFsPathKey = fromKey;
+    }
