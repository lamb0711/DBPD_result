- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.24 $, $Date: 2004/08/02 16:19:45 $
-	dependencies = null;
-	name = null;
-	nodeDefs = new ChildNodeDef[0];
-	propDefs = new PropDef[0];
-	supertypes = new QName[0];
-	mixin = false;
-	orderableChildNodes = false;
+        dependencies = null;
+        name = null;
+        nodeDefs = new ChildNodeDef[0];
+        propDefs = new PropDef[0];
+        supertypes = new QName[0];
+        mixin = false;
+        orderableChildNodes = false;
-	// create a shallow copy
-	NodeTypeDef clone = (NodeTypeDef) super.clone();
-	// clear dependencies (will be lazily built)
-	clone.resetDependencies();
-	return clone;
+        // create a shallow copy
+        NodeTypeDef clone = (NodeTypeDef) super.clone();
+        // clear dependencies (will be lazily built)
+        clone.resetDependencies();
+        return clone;
-	if (dependencies == null) {
-	    dependencies = new HashSet();
-	    for (int i = 0; i < supertypes.length; i++) {
-		dependencies.add(supertypes[i]);
-	    }
-	    for (int i = 0; i < nodeDefs.length; i++) {
-		QName ntName = nodeDefs[i].getDefaultPrimaryType();
-		if (ntName != null && !name.equals(ntName)) {
-		    dependencies.add(ntName);
-		}
-		QName[] ntNames = nodeDefs[i].getRequiredPrimaryTypes();
-		for (int j = 0; j < ntNames.length; j++) {
-		    if (ntNames[j] != null && !name.equals(ntNames[j])) {
-			dependencies.add(ntNames[j]);
-		    }
-		}
-	    }
-	}
-	return dependencies;
+        if (dependencies == null) {
+            dependencies = new HashSet();
+            for (int i = 0; i < supertypes.length; i++) {
+                dependencies.add(supertypes[i]);
+            }
+            for (int i = 0; i < nodeDefs.length; i++) {
+                QName ntName = nodeDefs[i].getDefaultPrimaryType();
+                if (ntName != null && !name.equals(ntName)) {
+                    dependencies.add(ntName);
+                }
+                QName[] ntNames = nodeDefs[i].getRequiredPrimaryTypes();
+                for (int j = 0; j < ntNames.length; j++) {
+                    if (ntNames[j] != null && !name.equals(ntNames[j])) {
+                        dependencies.add(ntNames[j]);
+                    }
+                }
+            }
+        }
+        return dependencies;
-	dependencies = null;
+        dependencies = null;
-	this.name = name;
+        this.name = name;
-	resetDependencies();
-	supertypes = names;
+        resetDependencies();
+        supertypes = names;
-	this.mixin = mixin;
+        this.mixin = mixin;
-	this.orderableChildNodes = orderableChildNodes;
+        this.orderableChildNodes = orderableChildNodes;
-	propDefs = defs;
+        propDefs = defs;
-	resetDependencies();
-	nodeDefs = defs;
+        resetDependencies();
+        nodeDefs = defs;
-	return name;
+        return name;
-	return supertypes;
+        return supertypes;
-	return mixin;
+        return mixin;
-	return orderableChildNodes;
+        return orderableChildNodes;
-	return propDefs;
+        return propDefs;
-	return nodeDefs;
+        return nodeDefs;
