JCR-1868: Inconsistent state when removing mix:lockable from a locked Node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@719577 13f79535-47bb-0310-9956-ffa450edef68

-            // build effective node type of remaining mixin's & primary type
-            Name[] allRemaining = (Name[]) mixinValue.toArray(new Name[mixinValue.size() + 1]);
-            allRemaining[mixinValue.size()] = primaryTypeName;
-            EffectiveNodeType entRemaining = session.getEffectiveNodeTypeProvider().getEffectiveNodeType(allRemaining);
-
+            EffectiveNodeType entRemaining = getRemainingENT(mixinValue);
+        /*
+         * mix:lockable: the mixin cannot be removed if the node is currently
+         * locked even if the editing session is the lock holder.
+         */
+        if (mixin.isNodeType((NameConstants.MIX_LOCKABLE))) {
+            EffectiveNodeType entRemaining = getRemainingENT(mixinValue);
+            if (!entRemaining.includesNodeType(NameConstants.MIX_LOCKABLE) && isLocked()) {
+                throw new ConstraintViolationException(mixinName + " can not be removed: the node is locked.");
+            }
+        }
+
+     * Build the effective node type of remaining mixin's & primary type
+     *
+     * @param remainingMixins
+     * @return effective node type
+     * @throws ConstraintViolationException
+     * @throws NoSuchNodeTypeException
+     */
+    private EffectiveNodeType getRemainingENT(List remainingMixins)
+            throws ConstraintViolationException, NoSuchNodeTypeException {
+        Name[] allRemaining = (Name[]) remainingMixins.toArray(new Name[remainingMixins.size() + 1]);
+        allRemaining[remainingMixins.size()] = primaryTypeName;
+        return session.getEffectiveNodeTypeProvider().getEffectiveNodeType(allRemaining);
+    }
+
+    /**
