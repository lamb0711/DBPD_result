work in progress

- QName.create: only partial check for 'null' value
- QName.equals: fixed for values of type DATE
- QName.equals: also compare type

TODO: check hashCode() again.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@483124 13f79535-47bb-0310-9956-ffa450edef68

-        return new QValue(value);
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        return new QValue(value, PropertyType.STRING);
-            ret[i] = new QValue(values[i]);
+            ret[i] = create(values[i]);
-                return new QValue(value, true);
+                return new QValue(value, PropertyType.REFERENCE);
-                return new QValue(value);
+                return new QValue(value, PropertyType.STRING);
-        return new QValue(value);
+        return new QValue(ISO8601.format(value), PropertyType.DATE);
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
-            
+
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
-            ret[i] = new QValue(values[i]);
+            ret[i] = create(values[i]);
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
+        if (value == null) {
+            throw new IllegalArgumentException("Cannot create QValue from null value.");
+        }
-        if (type == PropertyType.DATE) {
-            return ISO8601.format((Calendar) val);
-        } else if (type == PropertyType.BINARY) {
+        if (type == PropertyType.BINARY) {
-                return new QValue((Calendar) val);
+                return new QValue((String) val, PropertyType.DATE);
-                return new QValue((String) val, true);
+                return new QValue((String) val, PropertyType.REFERENCE);
-                return new QValue((String) val);
+                return new QValue((String) val, PropertyType.STRING);
-        if (type == PropertyType.DATE) {
-            return ISO8601.format((Calendar) val);
-        } else {
-            return val.toString();
-        }
+        return val.toString();
-            return val.equals(other.val);
+            return val.equals(other.val) && type == other.type;
-    //-------------------------------------------------------< implementation >
-    private QValue(String value) {
+    //-----------------------------------------------------< implementation >---
+    private QValue(String value, int type) {
-        type = PropertyType.STRING;
-    }
-
-    private QValue(String value, boolean isReference) {
-        val = value;
-        type = (isReference) ? PropertyType.REFERENCE : PropertyType.STRING;
+        this.type = type;
-        val = value;
+        val = ISO8601.format(value);
-        val = (value == null) ? null : value.toString();
+        val = value.toString();
-         *
-         * @see #delete()
-         * @see #delete(boolean)
-         * Deletes the persistent resource backing this <code>BLOBFileValue</code>.
-         *
-         * @param pruneEmptyParentDirs if <code>true</code>, empty parent directories
-         *                             will automatically be deleted
-         */
-        private void delete(boolean pruneEmptyParentDirs) {
-            if (file != null) {
-                // this instance is backed by a 'real' file
-                file.delete();
-                if (pruneEmptyParentDirs) {
-                    // prune empty parent directories
-                    File parent = file.getParentFile();
-                    while (parent != null && parent.delete()) {
-                        parent = parent.getParentFile();
-                    }
-                }
-            } else {
-                // this instance is backed by an in-memory buffer
-                buffer = EMPTY_BYTE_ARRAY;
-            }
-        }
-
-        /**
-}
+}
