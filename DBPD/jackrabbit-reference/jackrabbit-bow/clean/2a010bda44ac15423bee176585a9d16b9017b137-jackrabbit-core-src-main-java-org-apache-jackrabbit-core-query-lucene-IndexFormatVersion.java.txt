JCR-1104: JSR 283 support (work in progress)
- length query

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@645417 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import org.apache.lucene.index.TermPositions;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermEnum;
- * This class indicates the lucene index format that is used. Version 1 formats
- * do not have the <code>PROPERTIES_SET</code> lucene fieldname and queries
- * assuming this format also run on newer versions. When the index is recreated
- * from scratch, the Version 2 format will automatically be used. This format is
- * faster certain queries, so if the index does not contain
- * <code>PROPERTIES_SET</code> fieldname and re-indexing is an option, this is
- * advisable. Existing indexes are not automatically upgraded to a newer
- * version!
+ * This class indicates the lucene index format that is used.
+ * <ul>
+ * <li><b>Version 1</b> is the initial index format, which is used for Jackrabbit
+ * releases 1.0 to 1.3.x. Unless a re-index happens upgraded Jackrabbit
+ * instances will still use this version.</li>
+ * <li><b>Version 2</b> is the index format introduced with Jackrabbit 1.4.x. It
+ * adds a <code>PROPERTIES_SET</code> field which contains all property names of
+ * a node. This speeds up queries that check the existence of a property.</li>
+ * <li><b>Version 3</b> is the index format introduced with Jackrabbit 1.5.x. It
+ * adds support for length queries using the newly added
+ * <code>PROPERTY_LENGTHS</code> field. Furthermore a Payload is added to
+ * <code>PROPERTIES</code> fields to indicate the property type.</li>
+ * </ul>
+ * Please note that existing indexes are not automatically upgraded to a newer
+ * version! If you want to take advantage of a certain 'feature' in an index
+ * format version you need to re-index the repository.
-     * V2 is the index format for Jackrabbit releases >= 1.4
+     * V2 is the index format for Jackrabbit releases 1.4.x
+     * V3 is the index format for Jackrabbit releases >= 1.5
+     */
+    public static final IndexFormatVersion V3 = new IndexFormatVersion(3);
+
+    /**
-    public static IndexFormatVersion getVersion(IndexReader indexReader) {
-        Collection fields = indexReader.getFieldNames(IndexReader.FieldOption.ALL);
-        if (fields.contains(FieldNames.PROPERTIES_SET)
-                || indexReader.numDocs() == 0) {
+    public static IndexFormatVersion getVersion(IndexReader indexReader)
+            throws IOException {
+        Collection fields = indexReader.getFieldNames(
+                IndexReader.FieldOption.ALL);
+        if (hasPayloads(indexReader) || indexReader.numDocs() == 0) {
+            return IndexFormatVersion.V3;
+        } else if (fields.contains(FieldNames.PROPERTIES_SET)) {
+
+    /**
+     * @param reader the index reader.
+     * @return <code>true</code> if the {@link FieldNames#PROPERTIES} fields
+     *         contain payloads; <code>false</code> otherwise.
+     * @throws IOException if an error occurs while reading from the index.
+     */
+    public static boolean hasPayloads(IndexReader reader) throws IOException {
+        TermPositions tp = reader.termPositions();
+        try {
+            TermEnum terms = reader.terms(
+                    new Term(FieldNames.PROPERTIES, ""));
+            try {
+                if (terms.next() && terms.term().field() == FieldNames.PROPERTIES) {
+                    tp.seek(terms);
+                    if (tp.next()) {
+                        tp.nextPosition();
+                        return tp.isPayloadAvailable();
+                    }
+                }
+            } finally {
+                terms.close();
+            }
+        } finally {
+            tp.close();
+        }
+        return false;
+    }
