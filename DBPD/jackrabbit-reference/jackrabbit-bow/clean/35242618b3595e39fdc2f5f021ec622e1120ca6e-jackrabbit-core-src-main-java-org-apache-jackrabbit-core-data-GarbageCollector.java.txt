JCR-3369: Garbage collector improvements
- applying patch from Mete Atamel

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1356612 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.SessionImpl;
-    private static final Logger LOG = LoggerFactory.getLogger(GarbageCollector.class);
+    static final Logger LOG = LoggerFactory.getLogger(GarbageCollector.class);
-    private final Session[] sessionList;
+    private final SessionImpl[] sessionList;
+    private volatile RepositoryException observationException;
+
-            Session[] sessionList) {
+            SessionImpl[] sessionList) {
-            for (Session s : sessionList) {
+            for (SessionImpl s : sessionList) {
-    private void scanNodes(Session session) throws RepositoryException {
+    private void scanNodes(SessionImpl session) throws RepositoryException {
-        // add a listener to get 'new' nodes
-        // actually, new nodes are not the problem, but moved nodes
-        listeners.add(new Listener(session));
+        // add a listener to get 'moved' nodes
+        Session clonedSession = session.createSession(session.getWorkspace().getName());
+        listeners.add(new Listener(this, clonedSession));
-                try {
-                    listener.stop();
-                } catch (Exception e) {
-                    throw new RepositoryException(e);
-                }
+                listener.stop();
+        checkObservationException();
+        checkObservationException();
+    private void checkObservationException() throws RepositoryException {
+        RepositoryException e = observationException;
+        if (e != null) {
+            observationException = null;
+            String message = "Exception while processing concurrent events";
+            LOG.warn(message, e);
+            e = new RepositoryException(message, e);
+        }
+    }
+
+    void onObservationException(Exception e) {
+        if (e instanceof RepositoryException) {
+            observationException = (RepositoryException) e;
+        } else {
+            observationException = new RepositoryException(e);
+        }
+    }
+
+        private final GarbageCollector gc;
-
-        private Exception lastException;
-
-        Listener(Session session)
+        Listener(GarbageCollector gc, Session session)
+            this.gc = gc;
-            manager.addEventListener(this, Event.NODE_ADDED, "/", true, null,
+            manager.addEventListener(this, Event.NODE_MOVED, "/", true, null,
-        void stop() throws Exception {
-            if (lastException != null) {
-                throw lastException;
-            }
+        void stop() throws RepositoryException {
-                    lastException = e;
+                    gc.onObservationException(e);
+                    try {
+                        stop();
+                    } catch (RepositoryException e2) {
+                        LOG.warn("Exception removing the observation listener - ignored", e2);
+                    }
