JCR-956: Changed the JNDI repository proxy to use lazy loading only for the lookup within a JNDI context, not for instantiating the JNDI context itself. Otherwise clients in different threads or in different class loaders (for example when accessing the repository proxy from another webapp) may end up using separate JNDI contexts.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@543779 13f79535-47bb-0310-9956-ffa450edef68

+import javax.naming.NamingException;
+import javax.servlet.ServletException;
-    protected Repository getRepository() {
-        String location = Repository.class.getName().replace('.', '/');
-        Hashtable environment = new Hashtable();
-        Enumeration names = getInitParameterNames();
-        while (names.hasMoreElements()) {
-            String name = (String) names.nextElement();
-            if (name.equals("location")) {
-                location = getInitParameter(name);
-            } else if (!name.equals(Repository.class.getName())) {
-                environment.put(name, getInitParameter(name));
+    protected Repository getRepository() throws ServletException {
+        try {
+            String location = Repository.class.getName().replace('.', '/');
+            Hashtable environment = new Hashtable();
+            Enumeration names = getInitParameterNames();
+            while (names.hasMoreElements()) {
+                String name = (String) names.nextElement();
+                if (name.equals("location")) {
+                    location = getInitParameter(name);
+                } else if (!name.equals(Repository.class.getName())) {
+                    environment.put(name, getInitParameter(name));
+                }
+            return new JNDIRepository(
+                    new InitialContext(environment), location);
+        } catch (NamingException e) {
+            throw new ServletException(
+                    "Repository not found: Invalid JNDI context", e);
-        return new JNDIRepository(environment, location);
