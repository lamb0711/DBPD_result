- Implement SessionItemStateManager.getRootState()
- Use ItemState from TransientItemStateManager and check status in methods SessionItemStateManager.getItemState() and SessionItemStateManager.hasItemState()
- Rename some methods in TransientItemStateManager to clarify their use.
- Remove unused metho TransientItemStateManager.moveItemStateToAttic().

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432523 13f79535-47bb-0310-9956-ffa450edef68

-     * The root node state or <code>null</code> if it hasn't been retrieved yet.
-     */
-    private NodeState rootNodeState;
-
-    /**
-        // TODO
-        return null;
+        // always retrieve from transientStateMgr
+        return transientStateMgr.getRootState();
-        // first check if the specified item has been transiently removed
-        if (transientStateMgr.getAttic().hasItemState(id)) {
-            /**
-             * check if there's new transient state for the specified item
-             * (e.g. if a property with name 'x' has been removed and a new
-             * property with same name has been created);
-             * this will throw a NoSuchItemStateException if there's no new
-             * transient state
-             */
-            return transientStateMgr.getItemState(id);
+        ItemState itemState = transientStateMgr.getItemState(id);
+        // check status of ItemState. Transient ISM also returns removed ItemStates
+        if (itemState.isValid()) {
+            return itemState;
+        } else {
+            throw new NoSuchItemStateException(id.toString());
-
-        // check if there's transient state for the specified item
-        if (transientStateMgr.hasItemState(id)) {
-            return transientStateMgr.getItemState(id);
-        }
-
-        // check if there's persistent state for the specified item
-        if (workspaceItemStateMgr.hasItemState(id)) {
-            return workspaceItemStateMgr.getItemState(id);
-        }
-
-        throw new NoSuchItemStateException(id.toString());
-        // first check if the specified item has been transiently removed
-        if (transientStateMgr.getAttic().hasItemState(id)) {
-            /**
-             * check if there's new transient state for the specified item
-             * (e.g. if a property with name 'x' has been removed and a new
-             * property with same name has been created);
-             */
-            return transientStateMgr.hasItemState(id);
-        }
-        // check if there's transient state for the specified item
+        // first check if the specified item exists at all in the transient ISM
-            return true;
+            // retrieve item and check state
+            try {
+                ItemState itemState = transientStateMgr.getItemState(id);
+                if (itemState.isValid()) {
+                    return true;
+                }
+            } catch (ItemStateException e) {
+                // has been removed in the meantime
+            }
-        // check if there's persistent state for the specified item
-        return workspaceItemStateMgr.hasItemState(id);
+        return false;
-        // DIFF JACKRABBIT: return transientStateMgr.hasAnyItemStates();
-        return transientStateMgr.getEntriesCount() > 0;
+        return transientStateMgr.hasPendingChanges();
-        // DIFF JACKRABBIT: if (!transientStateMgr.hasAnyItemStates()) {
-        if (transientStateMgr.getEntriesCount() == 0) {
+        if (!transientStateMgr.hasPendingChanges()) {
-            Iterator iter = transientStateMgr.getEntries();
+            Iterator iter = transientStateMgr.getModifiedOrAddedItemStates();
-        if (!transientStateMgr.hasEntriesInAttic()) {
+        if (!transientStateMgr.hasDeletedItemStates()) {
-            Iterator iter = transientStateMgr.getEntriesInAttic();
+            Iterator iter = transientStateMgr.getDeletedItemStates();
