JCR-821: Document View Import: ISO 9075-encoded element/attribute names may lead to illegal node/property names

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@523372 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.IllegalNameException;
+     * Parses the given string as a list of JCR names. Any whitespace sequence
+     * is supported as a names separator instead of just a single space to
+     * be more liberal in what we accept. The current namespace context is
+     * used to convert the prefixed name strings to QNames.
+     *
+     * @param value string value
+     * @return the parsed names
+     * @throws SAXException if an invalid name was encountered
+     */
+    private QName[] parseNames(String value) throws SAXException {
+        String[] names = value.split("\\p{Space}+");
+        QName[] qnames = new QName[names.length];
+        for (int i = 0; i < names.length; i++) {
+            try {
+                qnames[i] = NameFormat.parse(names[i], nsContext);
+            } catch (NameException ne) {
+                throw new SAXException("Invalid name: " + names[i], ne);
+            }
+        }
+        return qnames;
+    }
+
+    /**
+    /**
+     * Processes the given <code>name</code>, i.e. decodes it and checks
+     * the format of the decoded name.
+     *
+     * @param name name to process
+     * @return the decoded and valid jcr name or the original name if it is
+     *         not encoded or if the resulting decoded name would be illegal.
+     */
+    private QName processName(QName name) {
+        QName decoded = ISO9075.decode(name);
+        if (decoded != name) {
+            // only need to check format of decoded name since
+            // an xml name is always a legal jcr name
+            // (http://issues.apache.org/jira/browse/JCR-821)
+            try {
+                NameFormat.checkFormat(decoded.getLocalName());
+                return decoded;
+            } catch (IllegalNameException ine) {
+                // decoded name would be illegal according to jsr 170,
+                // use encoded name as a fallback
+                log.warn("encountered illegal encoded name '"
+                        + name.getLocalName() + "': "
+                        + ine.getMessage());
+            }
+        }
+        return name;
+    }
+
-            // decode node name
-            nodeName = ISO9075.decode(nodeName);
+            // process node name
+            nodeName = processName(nodeName);
-                // decode property name
-                propName = ISO9075.decode(propName);
+                // process property name
+                propName = processName(propName);
-     * Parses the given string as a list of JCR names. Any whitespace sequence
-     * is supported as a names separator instead of just a single space to
-     * be more liberal in what we accept. The current namespace context is
-     * used to convert the prefixed name strings to QNames.
-     *
-     * @param value string value
-     * @return the parsed names
-     * @throws SAXException if an invalid name was encountered
-     */
-    private QName[] parseNames(String value) throws SAXException {
-        String[] names = value.split("\\p{Space}+");
-        QName[] qnames = new QName[names.length];
-        for (int i = 0; i < names.length; i++) {
-            try {
-                qnames[i] = NameFormat.parse(names[i], nsContext);
-            } catch (NameException ne) {
-                throw new SAXException("Invalid name: " + names[i], ne);
-            }
-        }
-        return qnames;
-    }
-
-    /**
