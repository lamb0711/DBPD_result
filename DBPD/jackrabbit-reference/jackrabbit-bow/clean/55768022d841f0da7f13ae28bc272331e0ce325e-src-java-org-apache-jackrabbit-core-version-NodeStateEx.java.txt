[JCR-127] Speedup Startup
          Removing one layer in versioning, thus mapping virtual items
          directly from the peristence layer.


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@191172 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.core.version.persistence;
+package org.apache.jackrabbit.core.version;
-import org.apache.jackrabbit.core.nodetype.NodeDefId;
-import org.apache.jackrabbit.core.nodetype.PropDefId;
+import org.apache.jackrabbit.core.Constants;
+import org.apache.jackrabbit.core.nodetype.PropDef;
+import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
+import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.core.nodetype.NodeDef;
+import java.util.HashSet;
- * This Class provides some basic node operations directly on the persistent
- * state.
+ * This Class provides some basic node operations directly on the node state.
-public class PersistentNode {
+class NodeStateEx implements Constants {
+     * the node type registry for resolving item defs
+     */
+    private final NodeTypeRegistry ntReg;
+
+    /**
-    private QName name = null;
+    private QName name;
-    protected PersistentNode(UpdatableItemStateManager stateMgr,
-                             NodeState nodeState) {
+    public NodeStateEx(UpdatableItemStateManager stateMgr,
+                       NodeTypeRegistry ntReg,
+                       NodeState nodeState, QName name) {
+        this.ntReg = ntReg;
+        this.name = name;
-    protected QName getName() {
+    public QName getName() {
-                name = ((NodeState.ChildNodeEntry) parent.getChildNodeEntries(nodeState.getUUID()).get(0)).getName();
+                name = ((NodeState.ChildNodeEntry)
+                        parent.getChildNodeEntries(nodeState.getUUID()).get(0)).getName();
-    protected String getUUID() {
+    public String getUUID() {
-    protected String getParentUUID() {
+    /**
+     * Returns the parent uuid of this node
+     *
+     * @return
+     */
+    public String getParentUUID() {
-    protected NodeState getState() {
+    /**
+     * Returns the node state wrpaee
+     * @return
+     */
+    public NodeState getState() {
-    protected PropertyState[] getProperties() throws ItemStateException {
+    public PropertyState[] getProperties() throws ItemStateException {
-    protected boolean hasProperty(QName name) {
+    public boolean hasProperty(QName name) {
-    protected InternalValue[] getPropertyValues(QName name) {
+    public InternalValue[] getPropertyValues(QName name) {
-    protected InternalValue getPropertyValue(QName name) {
+    public InternalValue getPropertyValue(QName name) {
-    protected void setPropertyValue(QName name, InternalValue value)
+    public void setPropertyValue(QName name, InternalValue value)
-    protected void setPropertyValues(QName name, int type, InternalValue[] values)
+    public void setPropertyValues(QName name, int type, InternalValue[] values)
-    protected void setPropertyValues(QName name, int type, InternalValue[] values, boolean multiple)
+    public void setPropertyValues(QName name, int type, InternalValue[] values, boolean multiple)
-            propState.setDefinitionId(PropDefId.valueOf("0"));
+
+            PropDef pd = getEffectiveNodeType().getApplicablePropertyDef(name, type, multiValued);
+            propState.setDefinitionId(pd.getId());
+
+     * Returns the effective (i.e. merged and resolved) node type representation
+     * of this node's primary and mixin node types.
+     *
+     * @return the effective node type
+     * @throws RepositoryException
+     */
+    public EffectiveNodeType getEffectiveNodeType() throws RepositoryException {
+
+        // build effective node type of mixins & primary type
+        // existing mixin's
+        HashSet set = new HashSet((nodeState).getMixinTypeNames());
+        // primary type
+        set.add(nodeState.getNodeTypeName());
+        try {
+            return ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+        } catch (NodeTypeConflictException ntce) {
+            String msg = "internal error: failed to build effective node type for node " + nodeState.getUUID();
+            throw new RepositoryException(msg, ntce);
+        }
+    }
+
+
+
+    /**
-    protected boolean hasNode(QName name) {
+    public boolean hasNode(QName name) {
-    protected boolean removeNode(QName name) throws RepositoryException {
+    public boolean removeNode(QName name) throws RepositoryException {
-    protected boolean removeNode(QName name, int index) throws RepositoryException {
+    public boolean removeNode(QName name, int index) throws RepositoryException {
+     * removes the property with the given name and 1-based index
+     *
+     * @param name
+     * @return
+     * @throws RepositoryException
+     */
+    public boolean removeProperty(QName name) throws RepositoryException {
+        try {
+            NodeState.PropertyEntry entry = nodeState.getPropertyEntry(name);
+            if (entry == null) {
+                return false;
+            } else {
+                PropertyId propId = new PropertyId(nodeState.getUUID(), name);
+                ItemState state = stateMgr.getItemState(propId);
+                stateMgr.destroy(state);
+                nodeState.removePropertyEntry(name);
+                nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                return true;
+            }
+        } catch (ItemStateException e) {
+            throw new RepositoryException(e);
+        }
+    }
+
+    /**
-    protected PersistentNode getNode(QName name, int index) throws RepositoryException {
+    public NodeStateEx getNode(QName name, int index) throws RepositoryException {
-            return new PersistentNode(stateMgr, state);
-        } catch (ItemStateException e) {
-            throw new RepositoryException("Unable to getNode: " + e.toString());
-        }
-    }
-
-    /**
-     * returns the node with the given uuid.
-     *
-     * @param uuid
-     * @return
-     * @throws RepositoryException
-     */
-    protected PersistentNode getNodeByUUID(String uuid) throws RepositoryException {
-        try {
-            NodeState state = (NodeState) stateMgr.getItemState(new NodeId(uuid));
-            return new PersistentNode(stateMgr, state);
+            return new NodeStateEx(stateMgr, ntReg, state, name);
-    protected PersistentNode addNode(QName nodeName, QName nodeTypeName, String uuid)
+    public NodeStateEx addNode(QName nodeName, QName nodeTypeName,
+                                  String uuid, boolean referenceable)
-        return createChildNode(nodeName, nodeTypeName, uuid);
+        NodeStateEx node = createChildNode(nodeName, nodeTypeName, uuid);
+        if (referenceable) {
+            node.setPropertyValue(JCR_UUID, InternalValue.create(node.getUUID()));
+        }
+        return node;
-    private PersistentNode createChildNode(QName name, QName nodeTypeName, String uuid) {
+    private NodeStateEx createChildNode(QName name, QName nodeTypeName, String uuid)
+            throws RepositoryException {
-        state.setDefinitionId(NodeDefId.valueOf("0"));
+
+        NodeDef cnd = getEffectiveNodeType().getApplicableChildNodeDef(name, nodeTypeName);
+        state.setDefinitionId(cnd.getId());
-        PersistentNode node = new PersistentNode(stateMgr, state);
-        // add new child node entry
+        NodeStateEx node = new NodeStateEx(stateMgr, ntReg, state, name);
+        node.setPropertyValue(JCR_PRIMARYTYPE, InternalValue.create(nodeTypeName));
+
+        // add new child node entryn
-    protected PersistentNode[] getChildNodes() throws RepositoryException {
+    public NodeStateEx[] getChildNodes() throws RepositoryException {
-            PersistentNode[] children = new PersistentNode[entries.size()];
+            NodeStateEx[] children = new NodeStateEx[entries.size()];
-                children[i] = new PersistentNode(stateMgr, state);
+                children[i] = new NodeStateEx(stateMgr, ntReg, state, entry.getName());
-    protected void store() throws RepositoryException {
+    public void store() throws RepositoryException {
-    protected void reload() throws RepositoryException {
+    public void reload() throws RepositoryException {
-    protected void copyFrom(PropertyImpl prop) throws RepositoryException {
+    public void copyFrom(PropertyImpl prop) throws RepositoryException {
