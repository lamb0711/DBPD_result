JCR-4502: ISO8601: add convenience methods that do not require passing a Calendar - also add support for java.time.Clock

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1870503 13f79535-47bb-0310-9956-ffa450edef68

+import java.time.Clock;
+     * Formats a clock time instant into an ISO8601-compliant date/time string.
+     * 
+     * @param clock
+     *            clock to obtain time and time zone from
+     * @return the formatted date/time string.
+     * @throws IllegalArgumentException
+     *             if the calendar cannot be represented as defined by ISO 8601
+     *             (i.e. year with more than four digits).
+     */
+    public static String format(Clock clock) throws IllegalArgumentException {
+        return format(clock.millis(), clock.getZone().getRules().getOffset(clock.instant()).getTotalSeconds());
+    }
+
+    /**
-     * @param tzOffsetInMillis
-     *            timezone offset from UTC in milliseconds
+     * @param tzOffsetInSeconds
+     *            timezone offset from UTC in seconds
-    public static String format(Date date, int tzOffsetInMillis) throws IllegalArgumentException {
+    public static String format(Date date, int tzOffsetInSeconds) throws IllegalArgumentException {
-        return format(date.getTime(), tzOffsetInMillis);
+        return format(date.getTime(), tzOffsetInSeconds);
-     * @param tzOffsetInMillis
-     *            timezone offset from UTC in milliseconds
+     * @param tzOffsetInSeconds
+     *            timezone offset from UTC in seconds
-    public static String format(long millisSinceEpoch, int tzOffsetInMillis) throws IllegalArgumentException {
+    public static String format(long millisSinceEpoch, int tzOffsetInSeconds) throws IllegalArgumentException {
-        cal.setTimeZone(tzOffsetInMillis == 0 ? UTC : new SimpleTimeZone(tzOffsetInMillis, ""));
+        cal.setTimeZone(tzOffsetInSeconds == 0 ? UTC : new SimpleTimeZone(tzOffsetInSeconds * 1000, ""));
