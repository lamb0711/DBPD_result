JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1082239 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.security.AccessControlException;
+import javax.jcr.security.Privilege;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+     * 
+     * @return
+     */
+    protected abstract PrivilegeManagerImpl getPrivilegeManagerImpl() throws RepositoryException;
+
+    /**
+    /**
+     * Adds the given <code>privileges</code> to the specified
+     * <code>target</code> set if they are not present in the specified
+     * <code>complement</code> set.
+     * 
+     * @param privileges
+     * @param target
+     * @param complement
+     */
+    protected static void updatePrivileges(Collection<Privilege> privileges, Set<Privilege> target, Set<Privilege> complement) {
+        for (Privilege p : privileges) {
+            if (!complement.contains(p)) {
+                target.add(p);
+            }
+        }
+    }
+
+     * @see CompiledPermissions#hasPrivileges(Path, Privilege[])
+     */
+    public boolean hasPrivileges(Path absPath, Privilege[] privileges) throws RepositoryException {
+        Result result = getResult(absPath);
+        int builtin = getPrivilegeManagerImpl().getBits(privileges);
+
+        if ((result.allowPrivileges | ~builtin) == -1) {
+            // in addition check all custom privileges
+            for (Privilege p : privileges) {
+                if (getPrivilegeManagerImpl().isCustomPrivilege(p)) {
+                    if (!result.customAllow.contains(p)) {
+                        if (p.isAggregate()) {
+                            // test if aggregated privs were granted individually.
+                            for (Privilege aggr : p.getAggregatePrivileges()) {
+                                if (!aggr.isAggregate() && !result.customAllow.contains(aggr)) {
+                                    // an aggregated custom priv is not allowed -> return false
+                                    return false;
+                                }
+                            }
+                        } else {
+                            // simple custom allow not allowed -> return false
+                            return false;
+                        }
+                    } // else: custom privilege allowed -> continue.
+                } // else: not a custom priv -> already covered.
+            }
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * @see CompiledPermissions#getPrivilegeSet(Path)
+     */
+    public Set<Privilege> getPrivilegeSet(Path absPath) throws RepositoryException {
+        Result result = getResult(absPath);
+        Set<Privilege> privileges = new HashSet<Privilege>();
+        privileges.addAll(getPrivilegeManagerImpl().getPrivileges(result.getPrivileges()));
+        privileges.addAll(result.customAllow);
+        return privileges;
+    }
+
+    /**
-     *
+     * Result of permission (and optionally privilege) evaluation for a given path.
+        private final Set<Privilege> customAllow;
+        private final Set<Privilege> customDeny;
+
+            this(allows, denies, allowPrivileges, denyPrivileges, Collections.<Privilege>emptySet(), Collections.<Privilege>emptySet());
+        }
+
+        public Result(int allows, int denies, int allowPrivileges, int denyPrivileges,
+                      Set<Privilege> customAllow, Set<Privilege> customDeny) {
+
+            this.customAllow = customAllow;
+            this.customDeny = customDeny;
-            return new Result(cAllows, cDenies, cAPrivs, cDPrivs);
+
+            Set<Privilege> combinedAllow = new HashSet<Privilege>();
+            combinedAllow.addAll(customAllow);
+            updatePrivileges(other.customAllow, combinedAllow, customDeny);
+
+            Set<Privilege> combinedDeny = new HashSet<Privilege>();
+            combinedDeny.addAll(customDeny);
+            updatePrivileges(other.customDeny, combinedDeny, customAllow);
+            return new Result(cAllows, cDenies, cAPrivs, cDPrivs, customAllow, customDeny);
+                h = 37 * h + customAllow.hashCode();
+                h = 37 * h + customDeny.hashCode();
-                       denyPrivileges == other.denyPrivileges;
+                       denyPrivileges == other.denyPrivileges &&
+                       customAllow.equals(other.customAllow) &&
+                       customDeny.equals(other.customDeny);
