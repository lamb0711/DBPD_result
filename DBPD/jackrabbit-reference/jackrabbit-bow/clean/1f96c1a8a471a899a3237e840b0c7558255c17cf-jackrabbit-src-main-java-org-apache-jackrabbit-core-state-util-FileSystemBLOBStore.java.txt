JCR-595 Refactoring of the Persistence Managers (+changing some eol-styles)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@467925 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.PropertyId;
-import org.apache.jackrabbit.core.fs.FileSystemPathUtil;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
-
-import java.io.BufferedOutputStream;
-import java.io.InputStream;
-import java.io.OutputStream;
- * <code>FileSystemBLOBStore</code> is a <code>ResourceBasedBLOBStore</code>
- * implementation that stores BLOB data in a <code>FileSystem</code>.
+ * Legacy class kept for backward compatibility reasons.
+ * @deprecated use {@link org.apache.jackrabbit.core.persistence.util.FileSystemBLOBStore}
+ *             instead.
-public class FileSystemBLOBStore implements ResourceBasedBLOBStore {
+public class FileSystemBLOBStore extends org.apache.jackrabbit.core.persistence.util.FileSystemBLOBStore {
-    /**
-     * the file system where the BLOBs are stored
-     */
-    private final FileSystem fs;
-
-    /**
-     * Creates a new <code>FileSystemBLOBStore</code> instance.
-     *
-     * @param fs file system for storing the BLOB data
-     */
-        this.fs = fs;
+        super(fs);
-
-    //------------------------------------------------------------< BLOBStore >
-    /**
-     * {@inheritDoc}
-     */
-    public String createId(PropertyId id, int index) {
-        // the blobId is an absolute file system path
-        StringBuffer sb = new StringBuffer();
-        sb.append(FileSystem.SEPARATOR_CHAR);
-        char[] chars = id.getParentId().getUUID().toString().toCharArray();
-        int cnt = 0;
-        for (int i = 0; i < chars.length; i++) {
-            if (chars[i] == '-') {
-                continue;
-            }
-            //if (cnt > 0 && cnt % 4 == 0) {
-            if (cnt == 2 || cnt == 4) {
-                sb.append(FileSystem.SEPARATOR_CHAR);
-            }
-            sb.append(chars[i]);
-            cnt++;
-        }
-        sb.append(FileSystem.SEPARATOR_CHAR);
-        sb.append(FileSystemPathUtil.escapeName(id.getName().toString()));
-        sb.append('.');
-        sb.append(index);
-        sb.append(".bin");
-        return sb.toString();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public InputStream get(String blobId) throws Exception {
-        return getResource(blobId).getInputStream();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void put(String blobId, InputStream in, long size) throws Exception {
-        OutputStream out = null;
-        // the blobId is an absolute file system path
-        FileSystemResource internalBlobFile = new FileSystemResource(fs, blobId);
-        internalBlobFile.makeParentDirs();
-        try {
-            out = new BufferedOutputStream(internalBlobFile.getOutputStream());
-            byte[] buffer = new byte[8192];
-            int read;
-            while ((read = in.read(buffer)) > 0) {
-                out.write(buffer, 0, read);
-            }
-        } finally {
-            if (out != null) {
-                out.close();
-            }
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean remove(String blobId) throws Exception {
-        // the blobId is an absolute file system path
-        FileSystemResource res = new FileSystemResource(fs, blobId);
-        if (!res.exists()) {
-            return false;
-        }
-        // delete resource and prune empty parent folders
-        res.delete(true);
-        return true;
-    }
-
-    //-----------------------------------------------< ResourceBasedBLOBStore >
-    /**
-     * {@inheritDoc}
-     */
-    public FileSystemResource getResource(String blobId)
-            throws Exception {
-        // the blobId is an absolute file system path
-        return new FileSystemResource(fs, blobId);
-    }
-}
+}
