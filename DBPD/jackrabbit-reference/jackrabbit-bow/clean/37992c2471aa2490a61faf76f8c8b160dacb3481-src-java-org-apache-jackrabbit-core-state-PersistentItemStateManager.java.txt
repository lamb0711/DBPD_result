first implementation of jta support

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55234 13f79535-47bb-0310-9956-ffa450edef68

-        implements ItemStateProvider, ItemStateListener {
+        implements PersistentItemStateProvider, ItemStateListener {
-    private final PersistenceManager persistMgr;
+    protected final PersistenceManager persistMgr;
+
+    /**
+     * Create a <code>PersistentNodeState</code> instance. May be overridden by
+     * subclasses.
+     *
+     * @param uuid UUID
+     * @return persistent node state instance
+     */
+    protected PersistentNodeState createNodeStateInstance(String uuid) {
+        return new PersistentNodeState(uuid, persistMgr);
+    }
+
+    /**
+     * Create a <code>PersistentPropertyState</code> instance. May be overridden
+     * by subclasses.
+     *
+     * @param name       qualified name
+     * @param parentUUID parent UUID
+     * @return persistent property state instance
+     */
+    protected PersistentPropertyState createPropertyStateInstance(QName name,
+                                                                  String parentUUID) {
+
+        return new PersistentPropertyState(name, parentUUID, persistMgr);
+    }
+
+    /**
+     * @param id
+     * @return
+     * @throws NoSuchItemStateException
+     * @throws ItemStateException
+     */
+    protected PersistentNodeState getNodeState(NodeId id)
+            throws NoSuchItemStateException, ItemStateException {
+        // check cache
+        if (isCached(id)) {
+            return (PersistentNodeState) retrieve(id);
+        }
+        // load from persisted state
+        PersistentNodeState state = createNodeStateInstance(id.getUUID());
+        persistMgr.load(state);
+        state.setStatus(ItemState.STATUS_EXISTING);
+        // put it in cache
+        cache(state);
+        // register as listener
+        state.addListener(this);
+        return state;
+    }
+
+    /**
+     * @param id
+     * @return
+     * @throws NoSuchItemStateException
+     * @throws ItemStateException
+     */
+    protected PersistentPropertyState getPropertyState(PropertyId id)
+            throws NoSuchItemStateException, ItemStateException {
+        // check cache
+        if (isCached(id)) {
+            return (PersistentPropertyState) retrieve(id);
+        }
+        // load from persisted state
+        PersistentPropertyState state = createPropertyStateInstance(id.getName(), id.getParentUUID());
+        persistMgr.load(state);
+        state.setStatus(ItemState.STATUS_EXISTING);
+        // put it in cache
+        cache(state);
+        // register as listener
+        state.addListener(this);
+        return state;
+    }
+
-    public ItemState getItemState(ItemId id)
+    public synchronized ItemState getItemState(ItemId id)
-    //---------------< methods for listing and retrieving ItemState instances >
+    //------------------------------------------< PersistentItemStateProvider >
-     * @param id
-     * @return
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
-     */
-    synchronized PersistentNodeState getNodeState(NodeId id)
-            throws NoSuchItemStateException, ItemStateException {
-        // check cache
-        if (isCached(id)) {
-            return (PersistentNodeState) retrieve(id);
-        }
-        // load from persisted state
-        PersistentNodeState state = persistMgr.loadNodeState(id.getUUID());
-        state.setStatus(ItemState.STATUS_EXISTING);
-        // put it in cache
-        cache(state);
-        // register as listener
-        state.addListener(this);
-        return state;
-    }
-
-    /**
-     * @param id
-     * @return
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
-     */
-    synchronized PersistentPropertyState getPropertyState(PropertyId id)
-            throws NoSuchItemStateException, ItemStateException {
-        // check cache
-        if (isCached(id)) {
-            return (PersistentPropertyState) retrieve(id);
-        }
-        // load from persisted state
-        PersistentPropertyState state = persistMgr.loadPropertyState(id.getParentUUID(), id.getName());
-        state.setStatus(ItemState.STATUS_EXISTING);
-        // put it in cache
-        cache(state);
-        // register as listener
-        state.addListener(this);
-        return state;
-    }
-
-    //-------------------------< methods for creating new ItemState instances >
-    /**
-     * Creates a <code>PersistentNodeState</code> instance representing new,
-     * i.e. not yet existing state. Call <code>{@link PersistentNodeState#store()}</code>
-     * on the returned object to make it persistent.
-     *
-     * @param uuid
-     * @param nodeTypeName
-     * @param parentUUID
-     * @return
-     * @throws ItemStateException
+     * @see PersistentItemStateProvider#createNodeState
-        PersistentNodeState state = persistMgr.createNodeStateInstance(uuid, nodeTypeName);
+        PersistentNodeState state = createNodeStateInstance(uuid);
+        state.setNodeTypeName(nodeTypeName);
-     * Creates a <code>PersistentPropertyState</code> instance representing new,
-     * i.e. not yet existing state. Call <code>{@link PersistentPropertyState#store()}</code>
-     * on the returned object to make it persistent.
-     *
-     * @param parentUUID
-     * @param propName
-     * @return
-     * @throws ItemStateException
+     * @see PersistentItemStateProvider#createPropertyState
-        PersistentPropertyState state = persistMgr.createPropertyStateInstance(propName, parentUUID);
+        PersistentPropertyState state = createPropertyStateInstance(propName, parentUUID);
