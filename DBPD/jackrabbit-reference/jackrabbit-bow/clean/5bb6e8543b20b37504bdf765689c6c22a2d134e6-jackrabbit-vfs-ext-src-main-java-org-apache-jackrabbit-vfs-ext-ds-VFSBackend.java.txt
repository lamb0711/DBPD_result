JCR-4005: TestVFSDataStore.testDeleteRecord() fails occasionally

Apply patch by Woonsan Ko

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1757309 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
-    private ThreadPoolExecutor asyncWriteExecuter;
+    private Executor asyncWriteExecutor;
-        asyncWriteExecuter = createAsyncWriteExecuter();
+        asyncWriteExecutor = createAsyncWriteExecutor();
-        getAsyncWriteExecuter().execute(new AsyncUploadJob(identifier, file, callback));
+        getAsyncWriteExecutor().execute(new AsyncUploadJob(identifier, file, callback));
-        getAsyncWriteExecuter().execute(new AsyncTouchJob(identifier, minModifiedDate, callback));
+        getAsyncWriteExecutor().execute(new AsyncTouchJob(identifier, minModifiedDate, callback));
-        getAsyncWriteExecuter().shutdownNow();
+        Executor asyncExecutor = getAsyncWriteExecutor();
+
+        if (asyncExecutor != null && asyncExecutor instanceof ExecutorService) {
+            ((ExecutorService) asyncExecutor).shutdownNow();
+        }
-    protected ThreadPoolExecutor createAsyncWriteExecuter() {
-        return (ThreadPoolExecutor) Executors.newFixedThreadPool(asyncWritePoolSize,
-                new NamedThreadFactory("vfs-write-worker"));
+    protected Executor createAsyncWriteExecutor() {
+        Executor asyncExecutor;
+
+        if (getAsyncWritePoolSize() > 0) {
+            asyncExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(getAsyncWritePoolSize(),
+                    new NamedThreadFactory("vfs-write-worker"));
+        } else {
+            asyncExecutor = new ImmediateExecutor();
+        }
+
+        return asyncExecutor;
-    protected ThreadPoolExecutor getAsyncWriteExecuter() {
-        return asyncWriteExecuter;
+    protected Executor getAsyncWriteExecutor() {
+        return asyncWriteExecutor;
+    }
+
+    /**
+     * Returns the approximate number of threads that are actively executing asynchronous writing tasks.
+     * @return the approximate number of threads that are actively executing asynchronous writing tasks
+     */
+    protected int getAsyncWriteExecutorActiveCount() {
+        Executor asyncExecutor = getAsyncWriteExecutor();
+
+        if (asyncExecutor != null && asyncExecutor instanceof ThreadPoolExecutor) {
+            return ((ThreadPoolExecutor) asyncExecutor).getActiveCount();
+        }
+
+        return 0;
+     * This class implements {@link Executor} interface to run {@code command} right away,
+     * resulting in non-asynchronous mode executions.
+     */
+    private class ImmediateExecutor implements Executor {
+        @Override
+        public void execute(Runnable command) {
+            command.run();
+        }
+    }
+
+    /**
