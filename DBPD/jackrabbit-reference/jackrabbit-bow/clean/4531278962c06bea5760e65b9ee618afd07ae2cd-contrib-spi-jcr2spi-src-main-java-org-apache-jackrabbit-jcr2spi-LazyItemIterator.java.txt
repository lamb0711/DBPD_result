work in progress

- LazyItemIterator: fixing wrong usage in ItemManagerImpl
- LazyItemIterator: removing TODOs and workaround

- ItemStateFactory: remove unused method 
  'createPropertyState(PropertyId propertyId, ItemStateManager ism)'

- TransientItemStateFactory: slightly modify methods, adding additional
  parameters that are already known upon creation of the states and must
  not be changed later on (-> removing setters on NodeState/PropertyState)

- TransientItemStateManager:
  > rename create-methods to createNew...
  > adjust parameters according to modifications in TransientISF

- NodeState:
  > set QNodeDefinition upon creation
  > modify 'moveChildNodeEntry': additing 'newDefinition' parameter
  > remove 'setParent'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- PropertyState:
  > set QPropertyDefinition upon creation
  > 'multiValued' field is therefore redundant -> remove
  > remove 'setMultiValued'
  > remove 'setDefinition'
  > remove 'getDefinition(NodeTypeRegistry). since definition is set upon
    creation, there is no need for this fallback method.

- SetPropertyValue: 'isMultiValued()' is redundant. removed and replaced
  usage with 'getPropertyState().isMultiValued()'

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432630 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ChildItemReference;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateException;
-import java.util.ArrayList;
+import java.util.ArrayList;
-            // TODO: make sure only ItemStates or ChildItemReferences are used, not both!
-            // TODO: check constructors of LazyItemIterator
-            Object refOrState = stateList.get(pos);
+            ItemState state = (ItemState) stateList.get(pos);
-                ItemState state;
-                if (refOrState instanceof ChildItemReference) {
-                    state = ((ChildItemReference) refOrState).resolve();
-                } else {
-                    state = (ItemState) refOrState;
-                }
-                log.debug("ignoring nonexistent item " + refOrState);
+                log.debug("ignoring nonexistent item " + state);
-                log.error("failed to fetch item " + refOrState + ", skipping...", e);
-                // remove invalid id
-                stateList.remove(pos);
-                // try next
-            } catch (ItemStateException e) {
-                log.debug("ignoring nonexistent item " + refOrState);
+                log.error("failed to fetch item " + state + ", skipping...", e);
