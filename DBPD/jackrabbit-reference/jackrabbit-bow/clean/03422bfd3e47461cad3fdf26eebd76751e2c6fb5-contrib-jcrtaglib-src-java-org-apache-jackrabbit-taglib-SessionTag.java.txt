maven 2 descriptor
remove commons logging dependency
remove spring dependency
and some minor changes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@472354 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Properties;
+import javax.naming.InitialContext;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.log4j.Logger;
-    private static Log log = LogFactory.getLog(SessionTag.class);
+	private static Logger log = Logger.getLogger(SessionTag.class);
+	
+	/**
+	 * jcr repository
+	 */
+	private static Map repositories = new HashMap() ;
+	
+	/**
+	 * JNDI address where a Repository is registered
+	 */
+	private String jndiAddress = JCRTagConstants.REPOSITORY_JNDI_ADDRESS ;
+	/**
+	 * JNDI properties to create the initial context
+	 */
+	private String jndiProperties = JCRTagConstants.REPOSITORY_JNDI_PROPERTIES ;
+	
-     * Name of the jndi address of a repository other than the default.
-     */
-    private String repositoryJNDI = JCRTagConstants.JNDI_DEFAULT_REPOSITORY;;
-
-    /**
-        this.repositoryJNDI = JCRTagConstants.JNDI_DEFAULT_REPOSITORY;
-     * Sets the repository JNDI address
-     * 
-     * @param repository
-     */
-    public void setRepositoryJNDI(String repository)
-    {
-        this.repositoryJNDI = repository;
-    }
-
-    /**
-        Repository repo = (Repository) JCRTagUtils.lookup(this.repositoryJNDI);
+        Repository repo = (Repository) this.getRepository();
+    
+    /**
+     * get a repository either from a cache or via JNDI
+     * 
+     * @return
+     */
+    private Repository getRepository() {
+    	String address = (String) JCRTagUtils.lookup(this.jndiAddress) ;
+    	String props = (String) JCRTagUtils.lookup(this.jndiProperties) ;
+    	String key = props + address; 
+    	
+    	// lookup cached repository
+    	if (repositories.get(key)== null) {
+    		try {
+            	InitialContext ctx = null ;
+            	if (props!=null) {
+            		Properties properties = new Properties() ;
+                	InputStream is = new ByteArrayInputStream(props.getBytes("UTF-8")) ;
+                	properties.load(is) ;
+                	ctx = new InitialContext(properties) ; 
+            	} else {
+            		ctx = new InitialContext();
+            	}
+            	Repository repo = (Repository) ctx.lookup(address) ;
+            	 if (repo!=null) {
+            		 synchronized (this) {
+            			 repositories.put(key, repo) ;	
+        			}
+            	 }
+    		} catch (Exception e) {
+				log.error("unable to get repository", e);
+			}
+    	}
+ 		return (Repository) repositories.get(key) ;
+    }
+
+	public void setJndiAddress(String jndiAddress) {
+		this.jndiAddress = jndiAddress;
+	}
+
+	public void setJndiProperties(String jndiProperties) {
+		this.jndiProperties = jndiProperties;
+	}
