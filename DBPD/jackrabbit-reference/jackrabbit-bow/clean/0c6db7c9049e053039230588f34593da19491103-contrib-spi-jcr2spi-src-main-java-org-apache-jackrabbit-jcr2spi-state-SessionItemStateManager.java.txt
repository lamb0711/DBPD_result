work in progress

- remove 'add' and 'set' methods on NodeState/PropertyState, that were
  used for initialization and did not mark the state modified. this
  was confusing, since similar methods called 'markmodified'.
  replaced by an 'init' method.
- SessionISM: fix options for addMixin (should not check for protected)
- move validation of PropertyState from ItemStateValidator to state.
- add TODO: TransientISM must clean up operations upon status changes.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@453120 13f79535-47bb-0310-9956-ffa450edef68

-                setPropertyStateValue(propState, newVals, PropertyType.REFERENCE);
+                // TODO improve
+                int options = ItemStateValidator.CHECK_LOCK //| ItemStateValidator.CHECK_COLLISION
+                    | ItemStateValidator.CHECK_VERSIONING | ItemStateValidator.CHECK_CONSTRAINTS;
+                setPropertyStateValue(propState, newVals, PropertyType.REFERENCE, options);
-            List originalMixins = Arrays.asList(nState.getMixinTypeNames());
+            List originalMixins = new ArrayList();
+            originalMixins.addAll(Arrays.asList(nState.getMixinTypeNames()));
-                    setPropertyStateValue(pState, QValue.create(mixinNames), PropertyType.NAME);
+                    int options = ItemStateValidator.CHECK_LOCK | ItemStateValidator.CHECK_VERSIONING;
+                    setPropertyStateValue(pState, QValue.create(mixinNames), PropertyType.NAME, options);
-        setPropertyStateValue(pState, operation.getValues(), operation.getPropertyType());
+        // TODO improve
+        int options = ItemStateValidator.CHECK_LOCK //| ItemStateValidator.CHECK_COLLISION
+            | ItemStateValidator.CHECK_VERSIONING | ItemStateValidator.CHECK_CONSTRAINTS;
+        setPropertyStateValue(pState, operation.getValues(), operation.getPropertyType(), options);
-        throw new UnsupportedOperationException("Internal error: Update cannot be handled by session ItemStateManager.");
+        // TODO: TOBEFIXED. not correct.
+        workspaceItemStateMgr.execute(operation);
-        // make sure the arguements are consistent and do not violate the
-        // given property definition.
-        validator.validate(propertyType, values, pDef);
-
-        propState.setType(propertyType);
-        propState.setValues(values);
+        propState.setValues(values, propertyType);
-    private void setPropertyStateValue(PropertyState propState, QValue[] iva, int valueType) throws ValueFormatException, LockException, ConstraintViolationException, AccessDeniedException, ItemExistsException, UnsupportedRepositoryOperationException, VersionException, RepositoryException {
+    private void setPropertyStateValue(PropertyState propState, QValue[] iva,
+                                       int valueType, int options)
+        throws ValueFormatException, LockException, ConstraintViolationException, AccessDeniedException, ItemExistsException, UnsupportedRepositoryOperationException, VersionException, RepositoryException {
-        // TODO improve
-        int options = ItemStateValidator.CHECK_LOCK //| ItemStateValidator.CHECK_COLLISION
-            | ItemStateValidator.CHECK_VERSIONING | ItemStateValidator.CHECK_CONSTRAINTS;
-        // make sure property is valid according to its definition
-        validator.validate(valueType, iva, propState.getDefinition());
-
-
-        propState.setValues(iva);
-        propState.setType(valueType);
+        propState.setValues(iva, valueType);
