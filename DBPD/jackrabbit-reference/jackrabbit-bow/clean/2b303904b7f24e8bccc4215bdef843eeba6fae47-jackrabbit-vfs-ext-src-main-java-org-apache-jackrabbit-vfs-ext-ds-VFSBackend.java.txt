JCR-4018: Consistent Async Upload Executor handling in Backend implementations

Slightly modified patch from Woonsan Ko

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1760825 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
+import org.apache.jackrabbit.core.data.AbstractBackend;
-import org.apache.jackrabbit.core.data.Backend;
-import org.apache.jackrabbit.core.data.util.NamedThreadFactory;
-public class VFSBackend implements Backend {
+public class VFSBackend extends AbstractBackend {
-     * {@link CachingDataStore} instance using this backend.
-     */
-    private CachingDataStore store;
-
-    /**
-     * The pool size of asynchronous write pooling executor.
-     */
-    private int asyncWritePoolSize = DEFAULT_ASYNC_WRITE_POOL_SIZE;
-
-    /**
-     * Asynchronous write pooling executor.
-     */
-    private Executor asyncWriteExecutor;
-
-    /**
-     * Returns the pool size of the async write pool executor.
-     * @return the pool size of the async write pool executor
-     */
-    public int getAsyncWritePoolSize() {
-        return asyncWritePoolSize;
-    }
-
-    /**
-     * Sets the pool size of the async write pool executor.
-     * @param asyncWritePoolSize pool size of the async write pool executor
-     */
-    public void setAsyncWritePoolSize(int asyncWritePoolSize) {
-        this.asyncWritePoolSize = asyncWritePoolSize;
-    }
-
-    /**
-        this.store = store;
+        super.init(store, homeDir, config);
-
-        asyncWriteExecutor = createAsyncWriteExecutor();
-    public void close() throws DataStoreException {
-        Executor asyncExecutor = getAsyncWriteExecutor();
-
-        if (asyncExecutor != null && asyncExecutor instanceof ExecutorService) {
-            ((ExecutorService) asyncExecutor).shutdownNow();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-     * Creates a {@link ThreadPoolExecutor}.
-     * This method is invoked during the initialization for asynchronous write/touch job executions.
-     * @return a {@link ThreadPoolExecutor}
-     */
-    protected Executor createAsyncWriteExecutor() {
-        Executor asyncExecutor;
-
-        if (getAsyncWritePoolSize() > 0) {
-            asyncExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(getAsyncWritePoolSize(),
-                    new NamedThreadFactory("vfs-write-worker"));
-        } else {
-            asyncExecutor = new ImmediateExecutor();
-        }
-
-        return asyncExecutor;
-    }
-
-    /**
-     * Returns ThreadPoolExecutor used to execute asynchronous write or touch jobs.
-     * @return ThreadPoolExecutor used to execute asynchronous write or touch jobs
-     */
-    protected Executor getAsyncWriteExecutor() {
-        return asyncWriteExecutor;
-    }
-
-    /**
-     * @param time the new last modified date
-     * @param file the file object
+     * @param fileObject the file object
-                    if (store.confirmDelete(identifier)) {
-                        store.deleteFromCache(identifier);
+                    if (getDataStore().confirmDelete(identifier)) {
+                        getDataStore().deleteFromCache(identifier);
-     * This class implements {@link Executor} interface to run {@code command} right away,
-     * resulting in non-asynchronous mode executions.
-     */
-    private class ImmediateExecutor implements Executor {
-        @Override
-        public void execute(Runnable command) {
-            command.run();
-        }
-    }
-
-    /**
