- new interface EffectiveNodeTypeProvider
- new interface ItemDefinitionProvider
- limit access to NodeTypeRegistry and simplify the NodeTypeRegistry
  interface.
- avoid duplicate code dealing with logic of EffectiveNodeType
  and retrieval of QItemDefinitions.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520408 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.nodetype.EffectiveNodeTypeProvider;
-                   EffectiveNodeType entExisting = session.getValidator().getEffectiveNodeType(existing);
-                   if (def.isProtected() && entExisting.includesNodeType(nodeInfo.getNodeTypeName()))
-                   {
+                   EffectiveNodeTypeProvider provider = session.getEffectiveNodeTypeProvider();
+                   EffectiveNodeType entExisting = provider.getEffectiveNodeType(existing);
+                   if (def.isProtected() && entExisting.includesNodeType(nodeInfo.getNodeTypeName())) {
-                   if (def.isAutoCreated() && entExisting.includesNodeType(nodeInfo.getNodeTypeName()))
-                   {
+                   if (def.isAutoCreated() && entExisting.includesNodeType(nodeInfo.getNodeTypeName())) {
-                            propDef = session.getValidator().getApplicablePropertyDefinition(newName, conflicting.getType(), false, parent);
+                            propDef = session.getItemDefinitionProvider().getQPropertyDefinition(parent, newName, conflicting.getType(), false);
-                            propDef = session.getValidator().getApplicablePropertyDefinition(newName, conflicting.getType(), true, parent);
+                            propDef = session.getItemDefinitionProvider().getQPropertyDefinition(parent, newName, conflicting.getType(), true);
-                        propDef = session.getValidator().getApplicablePropertyDefinition(newName, conflicting.getType(), true, parent);
+                        propDef = session.getItemDefinitionProvider().getQPropertyDefinition(parent, newName, conflicting.getType(), true);
-        QNodeDefinition def = session.getValidator().getApplicableNodeDefinition(nodeInfo.getName(), nodeInfo.getNodeTypeName(), parent);
+        QNodeDefinition def = session.getItemDefinitionProvider().getQNodeDefinition(parent, nodeInfo.getName(), nodeInfo.getNodeTypeName());
-               def = session.getValidator().getApplicablePropertyDefinition(propName, infoType, parentState);
+               def = session.getItemDefinitionProvider().getQPropertyDefinition(parentState, propName, infoType);
-               def = session.getValidator().getApplicablePropertyDefinition(propName, infoType, true, parentState);
+               def = session.getItemDefinitionProvider().getQPropertyDefinition(parentState, propName, infoType, true);
-            EffectiveNodeType ent = session.getValidator().getEffectiveNodeType(ntNames);
+            EffectiveNodeType ent = session.getEffectiveNodeTypeProvider().getEffectiveNodeType(ntNames);
