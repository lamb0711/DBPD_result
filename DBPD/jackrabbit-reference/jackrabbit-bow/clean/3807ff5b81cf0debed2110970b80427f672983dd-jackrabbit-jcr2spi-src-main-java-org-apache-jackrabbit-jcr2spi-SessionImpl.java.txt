JCR-2003: JCR2SPI / SPI: Add support for JCR 2.0
JCR-1104: JSR 283 support

- move methods to the correct place
- add Javadoc and TODOs
- add trivial implementations on SessionImpl
- rename ManagerProvider#getLockManager to #getLockStateManager

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772128 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Property;
-        return (itemMgr.nodeExists(qPath)) ? true : itemMgr.propertyExists(qPath);
+        return itemMgr.nodeExists(qPath) || itemMgr.propertyExists(qPath);
-            getLockManager().addLockToken(lt);
+            getLockStateManager().addLockToken(lt);
-        return getLockManager().getLockTokens();
+        return getLockStateManager().getLockTokens();
-            getLockManager().removeLockToken(lt);
+            getLockStateManager().removeLockToken(lt);
-    //-------------------------------------------------< NamespaceResolver >--
+    /**
+     * @see Session#getAccessControlManager()
+     */
+    public AccessControlManager getAccessControlManager()
+            throws RepositoryException {
+        throw new UnsupportedRepositoryOperationException("JCR-1104");
+    }
+
+    /**
+     * @see Session#getNode(String) 
+     */
+    public Node getNode(String absPath) throws RepositoryException {
+        checkIsAlive();
+        try {
+            Path qPath = getQPath(absPath).getNormalizedPath();
+            ItemManager itemMgr = getItemManager();
+            return itemMgr.getNode(qPath);
+        } catch (AccessDeniedException ade) {
+            throw new PathNotFoundException(absPath);
+        }
+    }
+
+    /**
+     * @see Session#getNodeByIdentifier(String)
+     */
+    public Node getNodeByIdentifier(String id) throws RepositoryException {
+        // TODO: implementation missing
+        throw new UnsupportedRepositoryOperationException("JCR-1104");
+    }
+
+    /**
+     * @see Session#getProperty(String)
+     */
+    public Property getProperty(String absPath) throws RepositoryException {
+        checkIsAlive();
+        try {
+            Path qPath = getQPath(absPath).getNormalizedPath();
+            ItemManager itemMgr = getItemManager();
+            return itemMgr.getProperty(qPath);
+        } catch (AccessDeniedException ade) {
+            throw new PathNotFoundException(absPath);
+        }
+    }
+
+    /**
+     * @see Session#getRetentionManager()
+     */
+    public RetentionManager getRetentionManager()
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        // TODO: implementation missing
+        throw new UnsupportedRepositoryOperationException("JCR-1104");
+    }
+
+    /**
+     * @see Session#hasCapability(String, Object, Map)
+     */
+    public boolean hasCapability(String methodName, Object target, Map arguments)
+            throws RepositoryException {
+        // TODO: implementation missing
+        return true;
+    }
+
+    /**
+     * @see Session#hasPermission(String, String)
+     */
+    public boolean hasPermission(String absPath, String actions)
+            throws RepositoryException {
+        // TODO: implementation missing
+        throw new UnsupportedRepositoryOperationException("JCR-1104");
+    }
+
+    /**
+     * @see Session#nodeExists(String)
+     */
+    public boolean nodeExists(String absPath) throws RepositoryException {
+        checkIsAlive();
+        Path qPath = getQPath(absPath).getNormalizedPath();
+        ItemManager itemMgr = getItemManager();
+        return itemMgr.nodeExists(qPath);
+    }
+
+    /**
+     * @see Session#propertyExists(String)
+     */
+    public boolean propertyExists(String absPath) throws RepositoryException {
+        checkIsAlive();
+        Path qPath = getQPath(absPath).getNormalizedPath();
+        ItemManager itemMgr = getItemManager();
+        return itemMgr.propertyExists(qPath);
+    }
+
+    /**
+     * @see Session#removeItem(String)
+     */
+    public void removeItem(String absPath) throws RepositoryException {
+        Item item = getItem(absPath);
+        item.remove();
+    }
+
+    //--------------------------------------------------< NamespaceResolver >---
-    //---------------------------------------------------< ManagerProvider > ---
-
+    //----------------------------------------------------< ManagerProvider >---
+    /**
+     * @see ManagerProvider#getNamePathResolver()
+     */
-     * @see ManagerProvider#getLockManager()
+     * @see ManagerProvider#getLockStateManager()
-    public LockStateManager getLockManager() {
-        return workspace.getLockManager();
+    public LockStateManager getLockStateManager() {
+        return workspace.getLockStateManager();
-
-    public AccessControlManager getAccessControlManager()
-            throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException("JCR-1104");
-    }
-
-    public Node getNodeByIdentifier(String id) throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException("JCR-1104");
-    }
-
-    public RetentionManager getRetentionManager()
-            throws UnsupportedRepositoryOperationException, RepositoryException {
-        throw new UnsupportedRepositoryOperationException("JCR-1104");
-    }
-
-    public boolean hasCapability(String methodName, Object target, Map arguments)
-            throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException("JCR-1104");
-    }
-
-    public boolean hasPermission(String absPath, String actions)
-            throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException("JCR-1104");
-    }
-
