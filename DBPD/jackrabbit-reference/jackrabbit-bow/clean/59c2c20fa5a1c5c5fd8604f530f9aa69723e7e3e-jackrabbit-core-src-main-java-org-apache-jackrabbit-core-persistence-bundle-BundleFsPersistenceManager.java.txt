JCR-1138: Add AbstractBundlePersistenceManager.getAllNodeIds

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@577297 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.NodeIdIterator;
+import org.apache.jackrabbit.uuid.UUID;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.NoSuchElementException;
-}
+    /**
+     * {@inheritDoc}
+     */
+    public NodeIdIterator getAllNodeIds(NodeId bigger, int maxCount)
+            throws ItemStateException {
+        ArrayList list = new ArrayList();
+        try {
+            getListRecursive(list, "", bigger == null ? null : bigger.getUUID(), maxCount);
+            return new FileNodeIdIterator(list);
+        } catch (FileSystemException e) {
+            String msg = "failed to read node list: " + bigger + ": " + e;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        }
+    }
+    
+    /**
+     * {@inheritDoc}
+     */    
+    protected UUID getUUIDFromFileName(String fileName) {
+        StringBuffer buff = new StringBuffer(35);
+        if (!fileName.endsWith("." + NODEFILENAME)) {
+            return null;
+        }
+        for (int i = 0; i < fileName.length(); i++) {
+            char c = fileName.charAt(i);
+            if (c == '.') {
+                break;
+            }
+            if (c != '/') {
+                buff.append(c);
+                int len = buff.length();
+                if (len == 8 || len == 13 || len == 18 || len == 23) {
+                    buff.append('-');
+                }
+            }
+        }
+        String u = buff.toString();
+        return new UUID(u);
+    }    
+    
+    private void getListRecursive(ArrayList list, String path, UUID bigger,
+            int maxCount) throws FileSystemException {
+        if (maxCount > 0 && list.size() >= maxCount) {
+            return;
+        }
+        String[] files = itemFs.listFiles(path);
+        Arrays.sort(files);
+        for (int i = 0; i < files.length; i++) {
+            String f = files[i];
+            UUID u = getUUIDFromFileName(path + FileSystem.SEPARATOR + f);
+            if (u == null) {
+                continue;
+            }
+            if (bigger != null && bigger.toString().compareTo(u.toString()) < 0) {
+                continue;
+            }
+            NodeId n = new NodeId(u);
+            list.add(n);
+            if (maxCount > 0 && list.size() >= maxCount) {
+                return;
+            }
+        }
+        String[] dirs = itemFs.listFolders(path);
+        Arrays.sort(dirs);
+        for (int i = 0; i < dirs.length; i++) {
+            getListRecursive(list, path + FileSystem.SEPARATOR + dirs[i],
+                    bigger, maxCount);
+        }
+    }
+    
+    private static class FileNodeIdIterator implements NodeIdIterator {
+
+        private final ArrayList list;
+        private int pos;
+
+        FileNodeIdIterator(ArrayList list) {
+            this.list = list;
+        }
+
+        public NodeId nextNodeId() throws NoSuchElementException {
+            if (pos < list.size()) {
+                return (NodeId) list.get(pos++);
+            }
+            throw new NoSuchElementException();
+        }
+
+        public boolean hasNext() {
+            return pos < list.size();
+        }
+
+        public Object next() {
+            return nextNodeId();
+        }
+
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+        
+    }
+
+}
