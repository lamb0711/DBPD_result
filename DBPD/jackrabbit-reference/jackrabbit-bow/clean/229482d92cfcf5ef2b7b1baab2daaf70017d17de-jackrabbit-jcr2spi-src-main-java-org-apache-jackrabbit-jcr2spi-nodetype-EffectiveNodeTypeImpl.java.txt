JCR-2087: parametrize generic types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816643 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-    private final TreeSet mergedNodeTypes = new TreeSet();
+    private final TreeSet<Name> mergedNodeTypes = new TreeSet<Name>();
-    private final TreeSet inheritedNodeTypes = new TreeSet();
+    private final TreeSet<Name> inheritedNodeTypes = new TreeSet<Name>();
-    private final TreeSet allNodeTypes = new TreeSet();
+    private final TreeSet<Name> allNodeTypes = new TreeSet<Name>();
-    private final Map namedItemDefs = new HashMap();
+    private final Map<Name, List<QItemDefinition>> namedItemDefs = new HashMap<Name, List<QItemDefinition>>();
-    private final List unnamedItemDefs = new ArrayList();
+    private final List<QItemDefinition> unnamedItemDefs = new ArrayList<QItemDefinition>();
-    private Set supportedMixins;
+    private Set<Name> supportedMixins;
-    EffectiveNodeTypeImpl(TreeSet mergedNodeTypes, TreeSet inheritedNodeTypes,
-                          TreeSet allNodeTypes, Map namedItemDefs,
-                          List unnamedItemDefs, Set supportedMixins) {
+    EffectiveNodeTypeImpl(TreeSet<Name> mergedNodeTypes, TreeSet<Name> inheritedNodeTypes,
+                          TreeSet<Name> allNodeTypes, Map<Name, List<QItemDefinition>> namedItemDefs,
+                          List<QItemDefinition> unnamedItemDefs, Set<Name> supportedMixins) {
-        Iterator iter = namedItemDefs.keySet().iterator();
-        while (iter.hasNext()) {
-            Object key = iter.next();
-            List list = (List) namedItemDefs.get(key);
-            this.namedItemDefs.put(key, new ArrayList(list));
+        for (Map.Entry<Name, List<QItemDefinition>> entry : namedItemDefs.entrySet()) {
+            this.namedItemDefs.put(entry.getKey(), new ArrayList<QItemDefinition>(entry.getValue()));
-            this.supportedMixins = new HashSet();
+            this.supportedMixins = new HashSet<Name>();
-        return (Name[]) inheritedNodeTypes.toArray(new Name[inheritedNodeTypes.size()]);
+        return inheritedNodeTypes.toArray(new Name[inheritedNodeTypes.size()]);
-        return (Name[]) allNodeTypes.toArray(new Name[allNodeTypes.size()]);
+        return allNodeTypes.toArray(new Name[allNodeTypes.size()]);
-        return (Name[]) mergedNodeTypes.toArray(new Name[mergedNodeTypes.size()]);
+        return mergedNodeTypes.toArray(new Name[mergedNodeTypes.size()]);
-        ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
-        Iterator iter = unnamedItemDefs.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size() + unnamedItemDefs.size());
+        for (QItemDefinition qDef : unnamedItemDefs) {
-        iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
+        
+        for (List<QItemDefinition> list : namedItemDefs.values()) {
+            for (QItemDefinition qDef : list) {
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
+        return defs.toArray(new QNodeDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(namedItemDefs.size() + unnamedItemDefs.size());
-        Iterator iter = unnamedItemDefs.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size() + unnamedItemDefs.size());
+        for (QItemDefinition qDef : unnamedItemDefs) {
-        iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
+        for (List<QItemDefinition> list : namedItemDefs.values()) {
+            for (QItemDefinition qDef : list) {
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
+        return defs.toArray(new QPropertyDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size());
+        for (List<QItemDefinition> list : namedItemDefs.values()) {
+            for (QItemDefinition qDef : list) {
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
+        return defs.toArray(new QNodeDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size());
+        for (List<QItemDefinition> list : namedItemDefs.values()) {
+            for (QItemDefinition qDef : list) {
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
+        return defs.toArray(new QPropertyDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size());
+        for (List<QItemDefinition> list : namedItemDefs.values()) {
+            for (QItemDefinition qDef : list) {
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
+        return defs.toArray(new QPropertyDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            List list = (List) iter.next();
-            Iterator iter1 = list.iterator();
-            while (iter1.hasNext()) {
-                QItemDefinition qDef = (QItemDefinition) iter1.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size());
+        for (List<QItemDefinition> list : namedItemDefs.values()) {
+            for (QItemDefinition qDef : list) {
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
+        return defs.toArray(new QNodeDefinition[defs.size()]);
-        List list = (List) namedItemDefs.get(name);
+        List<QItemDefinition> list = namedItemDefs.get(name);
-        ArrayList defs = new ArrayList(list.size());
-        Iterator iter = list.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(list.size());
+        for (QItemDefinition qDef : list) {
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
+        return defs.toArray(new QNodeDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(unnamedItemDefs.size());
-        Iterator iter = unnamedItemDefs.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(unnamedItemDefs.size());
+        for (QItemDefinition qDef : unnamedItemDefs) {
-        return (QNodeDefinition[]) defs.toArray(new QNodeDefinition[defs.size()]);
+        return defs.toArray(new QNodeDefinition[defs.size()]);
-        List list = (List) namedItemDefs.get(name);
+        List<QItemDefinition> list = namedItemDefs.get(name);
-        ArrayList defs = new ArrayList(list.size());
-        Iterator iter = list.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(list.size());
+        for (QItemDefinition qDef : list) {
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
+        return defs.toArray(new QPropertyDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(unnamedItemDefs.size());
-        Iterator iter = unnamedItemDefs.iterator();
-        while (iter.hasNext()) {
-            QItemDefinition qDef = (QItemDefinition) iter.next();
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(unnamedItemDefs.size());
+        for (QItemDefinition qDef : unnamedItemDefs) {
-        return (QPropertyDefinition[]) defs.toArray(new QPropertyDefinition[defs.size()]);
+        return defs.toArray(new QPropertyDefinition[defs.size()]);
-        ArrayList defs = new ArrayList(namedItemDefs.size());
-        Iterator iter = namedItemDefs.values().iterator();
-        while (iter.hasNext()) {
-            defs.addAll((List) iter.next());
+        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size());
+        for (List<QItemDefinition> list : namedItemDefs.values()) {
+            defs.addAll(list);
-        return (QItemDefinition[]) defs.toArray(new QItemDefinition[defs.size()]);
+        return defs.toArray(new QItemDefinition[defs.size()]);
-        List list = (List) namedItemDefs.get(name);
+        List<QItemDefinition> list = namedItemDefs.get(name);
-        return (QItemDefinition[]) list.toArray(new QItemDefinition[list.size()]);
+        return list.toArray(new QItemDefinition[list.size()]);
-        return (QItemDefinition[]) unnamedItemDefs.toArray(new QItemDefinition[unnamedItemDefs.size()]);
+        return unnamedItemDefs.toArray(new QItemDefinition[unnamedItemDefs.size()]);
-        // the 'clone' to avoid a potentially inconsistant state
+        // the 'clone' to avoid a potentially inconsistent state
-            List existingDefs = (List) namedItemDefs.get(name);
+            List<QItemDefinition> existingDefs = namedItemDefs.get(name);
-                        QItemDefinition qItemDef = (QItemDefinition) existingDefs.get(j);
+                        QItemDefinition qItemDef = existingDefs.get(j);
-                existingDefs = new ArrayList();
+                existingDefs = new ArrayList<QItemDefinition>();
-            Iterator iter = unnamedItemDefs.iterator();
-            while (iter.hasNext()) {
-                QItemDefinition existing = (QItemDefinition) iter.next();
+            for (QItemDefinition existing : unnamedItemDefs) {
