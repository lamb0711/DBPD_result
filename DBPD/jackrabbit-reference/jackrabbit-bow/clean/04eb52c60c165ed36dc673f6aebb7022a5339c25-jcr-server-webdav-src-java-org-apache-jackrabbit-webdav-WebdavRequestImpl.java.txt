JCR-405: PROPPATCH doesn't respect document order
minor improvements within 'jcr' package:
- reorder nodes
- fixing creation/replacement of multivalued JCR properties
- contentlength for single value JCR properties
- improve spooling of resource content

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397835 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+    private List proppatchList;
+     * @deprecated use {@link #getPropPatchChangeList()} instead
+     * @deprecated use {@link #getPropPatchChangeList()} instead
+     /**
+      * Return a {@link List} of property change operations. Each entry
+      * is either of type {@link DavPropertyName}, indicating a &lt;remove&gt;
+      * operation, or of type {@link DavProperty}, indicating a &lt;set&gt;
+      * operation. Note that ordering is significant here.
+      *
+      * @return the list of change operations entries in the PROPPATCH request body
+      * @see DavServletRequest#getPropPatchChangeList()
+      */
+     public List getPropPatchChangeList() throws DavException {
+         if (proppatchList == null) {
+             parsePropPatchRequest();
+         }
+         return proppatchList;
+     }
+
+        proppatchList = new ArrayList();
+
-            // we should also check for correct namespace
-            log.warn("PropPatch-Request has no <propertyupdate> tag.");
+            log.warn("PropPatch-Request has no <DAV:propertyupdate> tag.");
-        ElementIterator it = DomUtil.getChildren(root, XML_SET, NAMESPACE);
+        ElementIterator it = DomUtil.getChildren(root);
-            Element propEl = DomUtil.getChildElement(it.nextElement(), XML_PROP, NAMESPACE);
-            if (propEl != null) {
-                ElementIterator properties = DomUtil.getChildren(propEl);
-                while (properties.hasNext()) {
-                   proppatchSet.add(DefaultDavProperty.createFromXml(properties.nextElement()));
+            Element el = it.nextElement();
+            if (DomUtil.matches(el, XML_SET, NAMESPACE)) {
+                Element propEl = DomUtil.getChildElement(el, XML_PROP, NAMESPACE);
+                if (propEl != null) {
+                    ElementIterator properties = DomUtil.getChildren(propEl);
+                    while (properties.hasNext()) {
+                        DavProperty davProp = DefaultDavProperty.createFromXml(properties.nextElement());
+                        proppatchSet.add(davProp);
+                        proppatchList.add(davProp);
+                    }
-            }
-        }
-
-        // get <remove> properties
-        it = DomUtil.getChildren(root, XML_REMOVE, NAMESPACE);
-        while (it.hasNext()) {
-            Element propEl = DomUtil.getChildElement(it.nextElement(), XML_PROP, NAMESPACE);
-            if (propEl != null) {
-                ElementIterator names = DomUtil.getChildren(propEl);
-                while (names.hasNext()) {
-                    proppatchRemove.add(DavPropertyName.createFromXml(names.nextElement()));
+            } else if (DomUtil.matches(el, XML_REMOVE, NAMESPACE)) {
+                Element propEl = DomUtil.getChildElement(el, XML_PROP, NAMESPACE);
+                if (propEl != null) {
+                    ElementIterator properties = DomUtil.getChildren(propEl);
+                    while (properties.hasNext()) {
+                        DavProperty davProp = DefaultDavProperty.createFromXml(properties.nextElement());
+                        proppatchSet.add(davProp);
+                        proppatchList.add(davProp.getName());
+                    }
+            } else {
+                log.debug("Unknown element in DAV:propertyupdate: " + el.getNodeName());
+                // unknown child elements are ignored
