JCR-2087: parametrize generic types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816627 13f79535-47bb-0310-9956-ffa450edef68

-        QNodeTypeDefinition def = (QNodeTypeDefinition) registeredNTDefs.get(nodeTypeName);
+        QNodeTypeDefinition def = registeredNTDefs.get(nodeTypeName);
-        QNodeTypeDefinition ntd = (QNodeTypeDefinition) registeredNTDefs.remove(name);
+        QNodeTypeDefinition ntd = registeredNTDefs.remove(name);
-    private class NodeTypeDefinitionMap implements Map, Dumpable {
+    private class NodeTypeDefinitionMap implements Map<Name, QNodeTypeDefinition>, Dumpable {
+        @SuppressWarnings("unchecked")
+        private Collection<QNodeTypeDefinition> getValues() {
+            return nodetypeDefinitions.values();
+        }
+
+        @SuppressWarnings("unchecked")
+        private Set<Name> getKeySet() {
+            return nodetypeDefinitions.keySet();
+        }
+
-        private Set getDependentNodeTypes(Name nodeTypeName) throws NoSuchNodeTypeException {
+        private Set<Name> getDependentNodeTypes(Name nodeTypeName) throws NoSuchNodeTypeException {
-            HashSet names = new HashSet();
-            Iterator iter = nodetypeDefinitions.values().iterator();
+            HashSet<Name> names = new HashSet<Name>();
+            Iterator<QNodeTypeDefinition> iter = getValues().iterator();
-                QNodeTypeDefinition ntd = (QNodeTypeDefinition) iter.next();
+                QNodeTypeDefinition ntd = iter.next();
-        private void updateInternalMap(Iterator definitions) {
-            // since definition were retrieved from the storage, valiation
+        private void updateInternalMap(Iterator<QNodeTypeDefinition> definitions) {
+            // since definition were retrieved from the storage, validation
-                internalRegister((QNodeTypeDefinition) definitions.next(), null);
+                internalRegister(definitions.next(), null);
-        public Set keySet() {
+        public Set<Name> keySet() {
-                Iterator it = storage.getAllDefinitions();
+                Iterator<QNodeTypeDefinition> it = storage.getAllDefinitions();
-            return nodetypeDefinitions.keySet();
+            return getKeySet();
-        public Collection values() {
+        public Collection<QNodeTypeDefinition> values() {
-            return nodetypeDefinitions.values();
+            return getValues();
-        public Object put(Object key, Object value) {
-            return nodetypeDefinitions.put(key, value);
+        public QNodeTypeDefinition put(Name key, QNodeTypeDefinition value) {
+            return (QNodeTypeDefinition) nodetypeDefinitions.put(key, value);
-        public void putAll(Map t) {
+        public void putAll(Map<? extends Name, ? extends QNodeTypeDefinition> t) {
-        public Set entrySet() {
+        @SuppressWarnings("unchecked")
+        public Set<Map.Entry<Name, QNodeTypeDefinition>> entrySet() {
-        public Object get(Object key) {
+        public QNodeTypeDefinition get(Object key) {
-                    Iterator it = storage.getDefinitions(new Name[] {(Name) key});
+                    Iterator<QNodeTypeDefinition> it = storage.getDefinitions(new Name[] {(Name) key});
-        public Object remove(Object key) {
+        public QNodeTypeDefinition remove(Object key) {
-            Iterator iter = nodetypeDefinitions.values().iterator();
+            Iterator<QNodeTypeDefinition> iter = getValues().iterator();
-                QNodeTypeDefinition ntd = (QNodeTypeDefinition) iter.next();
+                QNodeTypeDefinition ntd = iter.next();
