JCR-694: Remove query handler idleTime

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@492164 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.util.Timer;
-import java.util.Collections;
-import java.util.Map;
-import java.util.WeakHashMap;
-     * Class instance that is shared for all <code>SearchManager</code> instances.
-     * Each workspace will schedule a task to check if the query handler can
-     * be shutdown after it had been idle for some time.
-     */
-    private static final Timer IDLE_TIMER = new Timer(true);
-
-    /**
-     * Idle time in seconds after which the query handler is shut down.
-     */
-    private static final int DEFAULT_IDLE_TIME = -1;
-
-    /**
-     * The time when the query handler was last accessed.
-     */
-    private long lastAccess = System.currentTimeMillis();
-
-    /**
-     * Task that checks if the query handler can be shut down because it
-     * had been idle for {@link #idleTime} seconds.
-     */
-    private final Timer.Task idleChecker;
-
-    /**
-     * Idle time in seconds. After the query handler had been idle for this
-     * amount of time it is shut down. Defaults to -1 and causes the search
-     * manager to never shut down.
-     */
-    private int idleTime;
-
-    /**
-     * Weakly references all {@link javax.jcr.query.Query} instances created
-     * by this <code>SearchManager</code>.
-     * If this map is empty and this search manager had been idle for at least
-     * {@link #idleTime} seconds, then the query handler is shut down.
-     */
-    private final Map activeQueries = Collections.synchronizedMap(new WeakHashMap() {
-
-    });
-
-    /**
-        String idleTimeString = params.getProperty(PARAM_IDLE_TIME, String.valueOf(DEFAULT_IDLE_TIME));
-        try {
-            idleTime = Integer.decode(idleTimeString).intValue();
-        } catch (NumberFormatException e) {
-            idleTime = DEFAULT_IDLE_TIME;
+        if (params.containsKey(PARAM_IDLE_TIME)) {
+            String msg = "Parameter 'idleTime' is not supported anymore. " +
+                    "Please use 'maxIdleTime' in the repository configuration.";
+            log.warn(msg);
-
-        idleChecker = new Timer.Task() {
-            public void run() {
-                if (lastAccess + (idleTime * 1000) < System.currentTimeMillis()) {
-                    int inUse = activeQueries.size();
-                    if (inUse == 0) {
-                        try {
-                            shutdownQueryHandler();
-                        } catch (IOException e) {
-                            log.warn("Unable to shutdown idle query handler", e);
-                        }
-                    } else {
-                        log.debug("SearchManager is idle but " + inUse
-                                + " queries are still in use.");
-                    }
-                }
-            }
-        };
-
-        if (idleTime > -1) {
-            IDLE_TIMER.schedule(idleChecker, 0, 1000);
-        }
-            idleChecker.cancel();
-        ensureInitialized();
-        ensureInitialized();
-                ensureInitialized();
-                // track query instances
-                activeQueries.put(obj, null);
-    private synchronized void shutdownQueryHandler() throws IOException {
+    private void shutdownQueryHandler() throws IOException {
-
-    /**
-     * Ensures that the query handler is initialized and updates the last
-     * access to the current time.
-     *
-     * @throws RepositoryException if the query handler cannot be initialized.
-     */
-    private synchronized void ensureInitialized() throws RepositoryException {
-        lastAccess = System.currentTimeMillis();
-        if (handler == null) {
-            initializeQueryHandler();
-        }
-    }
