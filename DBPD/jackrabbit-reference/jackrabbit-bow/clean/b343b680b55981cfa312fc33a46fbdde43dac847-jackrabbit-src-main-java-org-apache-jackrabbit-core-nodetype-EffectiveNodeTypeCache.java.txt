fixing minor issues with recent changes in nodetype package (r377806)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@380724 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.TreeSet;
+import java.util.Arrays;
-import java.util.Set;
-import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Set;
+import java.util.TreeSet;
-    /** ordered set of keys */
+    /**
+     * ordered set of keys
+     */
-    /** cache of pre-built aggregations of node types */
+    /**
+     * cache of pre-built aggregations of node types
+     */
-         * set of node type names, sorted in ascending order
+         * array of node type names, sorted in ascending order
-         * The key is the string representation of this sorted set
-         * (e.g. the key for a set containing entries "c", "b" and "a" would
-         * be "[a, b, c]").
-         *
-         * @return string representation of this sorted set
-         * @see java.util.AbstractCollection#toString
-         */
-        Object getKey() {
-            return names;
-        }
-
-        /**
-        int size() {
-            return names.length;
-        }
-
-        QName[] toArray() {
+        /**
+         * @return the node type names of this key
+         */
+        QName[] getNames() {
-            for (int i=0; i<otherKey.names.length; i++) {
+            for (int i = 0; i < otherKey.names.length; i++) {
+        //-------------------------------------------------------< Comparable >
+
+            // compare weights
-            if (Arrays.equals(names, other.names)) {
-                return 0;
-            } else {
-                return -1;
+
+            // compare arrays of names
+            int len1 = names.length;
+            int len2 = other.names.length;
+            int len = Math.min(len1, len2);
+
+            for (int i = 0; i < len; i++) {
+                QName name1 = names[i];
+                QName name2 = other.names[i];
+                int result = name1.compareTo(name2);
+                if (result != 0) {
+                    return result;
+                }
+            return len1 - len2;
+        //---------------------------------------< java.lang.Object overrides >
-            for (int i=0; i<names.length; i++) {
+            for (int i = 0; i < names.length; i++) {
-            return names.toString() + " (" + weight + ")";
+            return Arrays.asList(names).toString() + " (" + weight + ")";
