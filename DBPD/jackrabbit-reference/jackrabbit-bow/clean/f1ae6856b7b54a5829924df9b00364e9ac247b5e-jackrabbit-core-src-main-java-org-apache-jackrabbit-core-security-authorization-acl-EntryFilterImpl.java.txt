JCR-2841 - Avoid path resolution in case of non-wildcard ACEs (follow-up to JCR-2573)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1049520 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.id.ItemId;
-import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
- * <code>PrincipalEntryFilter</code>...
+ * <code>EntryFilterImpl</code>...
-    private final Path path;
-    private final PathResolver resolver;
+    private final PathProvider pathProvider;
-    EntryFilterImpl(Collection<String> principalNames, Path path, PathResolver resolver) {
+    EntryFilterImpl(Collection<String> principalNames, final ItemId id, final SessionImpl sessionImpl) {
-        this.path = path;
-        this.resolver = resolver;
+        this.pathProvider = new PathProvider() {
+            public String getPath() throws RepositoryException {
+                Path p = sessionImpl.getHierarchyManager().getPath(id);
+                return sessionImpl.getJCRPath(p);
+            }
+        };
+    }
+
+    EntryFilterImpl(Collection<String> principalNames, final Path absPath, final PathResolver pathResolver) {
+        this.principalNames = principalNames;
+        this.pathProvider = new PathProvider() {
+            public String getPath() throws RepositoryException {
+                return pathResolver.getJCRPath(absPath);
+            }
+        };
-            if (((ACLTemplate.Entry) ace).getRestrictions().isEmpty()) {
+            ACLTemplate.Entry entry = (ACLTemplate.Entry) ace;
+            if (!entry.hasRestrictions()) {
-                    return ((ACLTemplate.Entry) ace).matches(getPath());
-                } catch (NamespaceException e) {
+                    return entry.matches(getPath());
+                } catch (RepositoryException e) {
-    String getPath() throws NamespaceException {
+    String getPath() throws RepositoryException {
-            itemPath = resolver.getJCRPath(path);
+            itemPath = pathProvider.getPath();
+
+    //--------------------------------------------------------------------------
+    /**
+     * Interface for lazy calculation of the JCR path used for evaluation of ACE
+     * matching in case of entries defining restriction(s).
+     */
+    private interface PathProvider {
+
+        String getPath() throws RepositoryException;
+
+    }
