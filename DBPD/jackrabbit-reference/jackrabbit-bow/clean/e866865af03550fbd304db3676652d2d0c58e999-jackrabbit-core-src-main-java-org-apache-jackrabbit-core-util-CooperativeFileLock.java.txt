JCR-2431 CooperativeFileLock improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@889270 13f79535-47bb-0310-9956-ffa450edef68

- * The file lock is used to ensure a resource is only open once at any time. 
- * It uses a cooperative locking protocol. 
+ * The file lock is used to ensure a resource is only open once at any time.
+ * It uses a cooperative locking protocol.
-    
+
+    private Thread watchdog;
+
-     * 
+     *
-     * 
+     *
+        } finally {
+            stop = true;
+            locked = false;
-        stop = true;
-        locked = false;
-    }
-
-    /**
-     * This finalizer unlocks the file if necessary.
-     */
-    protected void finalize() {
-        if (locked) {
-            release();
+        try {
+            if (watchdog != null) {
+                watchdog.interrupt();
+            }
+        } catch (Exception e) {
+            LOG.debug("Error stopping watchdog " + fileName, e);
-     * 
+     *
-                throw error("Lock file modified in the future: dist=" + dist);
+                // lock file modified in the future -
+                // wait for a bit longer than usual
+                try {
+                    Thread.sleep(2 * LOCK_SLEEP);
+                } catch (Exception e) {
+                    LOG.debug("Sleep", e);
+                }
+                return;
-            sleep(2 * LOCK_SLEEP);
-            if (!load().equals(properties)) {
-                throw error("Locked by another process");
+            // wait twice the watchdog sleep time
+            for (int i = 0; i < 8; i++) {
+                sleep(LOCK_SLEEP / 4);
+                if (!load().equals(properties)) {
+                    throw error("Locked by another process");
+                }
-        Thread watchdog = new Thread(new Runnable() {
+        watchdog = new Thread(new Runnable() {
+                        } catch (OutOfMemoryError e) {
+                            // ignore
+                        } catch (InterruptedException e) {
+                            // ignore
+                        } catch (NullPointerException e) {
+                            // ignore
-    
+
-     * 
+     *
-    
+
-     * 
+     *
-    }    
-    
+    }
+
