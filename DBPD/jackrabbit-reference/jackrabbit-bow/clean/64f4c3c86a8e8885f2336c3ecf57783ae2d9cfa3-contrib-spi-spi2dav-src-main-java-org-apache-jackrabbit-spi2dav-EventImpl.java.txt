work in progress

- missing escaping of item name when building uri.
- let RS parse the eventdiscovery. don't pass sessioninfo and resolvers
  to the various event related classes.
- removing of id/uri-cache entries must remove the corresponding
  entry in the other cache as well.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@472821 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.SessionInfo;
-import org.apache.jackrabbit.webdav.observation.EventType;
-import org.apache.jackrabbit.webdav.observation.DefaultEventType;
-import org.apache.jackrabbit.webdav.DavConstants;
-import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.jcr.observation.SubscriptionImpl;
-import org.apache.jackrabbit.util.Text;
-import javax.jcr.RepositoryException;
-
-    private final Element eventElement;
+    private final ItemId eventId;
+    private final Path eventPath;
+    private final NodeId parentId;
-    private final SessionInfo sessionInfo;
-    private final URIResolver uriResolver;
+    private final Element eventElement;
-    private final String href;
-    private final Path qPath;
+    public EventImpl(ItemId eventId, Path eventPath, NodeId parentId, int eventType,
+                     Element eventElement) {
+        this.eventId = eventId;
+        this.eventPath = eventPath;
+        this.parentId = parentId;
+        type = getSpiEventType(eventType);
-    public EventImpl(Element eventElement, URIResolver uriResolver,
-                     SessionInfo sessionInfo) throws RepositoryException, DavException {
-        this.uriResolver = uriResolver;
-        this.sessionInfo = sessionInfo;
-
-        Element typeEl = DomUtil.getChildElement(eventElement, XML_EVENTTYPE, NAMESPACE);
-        EventType[] et = DefaultEventType.createFromXml(typeEl);
-        if (et.length == 0 || et.length > 1) {
-            throw new IllegalArgumentException("Ambigous event type definition: expected one single eventtype.");
-        }
-        type = getSpiEventType(SubscriptionImpl.getJcrEventType(et[0]));
-
-        href = DomUtil.getChildTextTrim(eventElement, DavConstants.XML_HREF, DavConstants.NAMESPACE);
-        qPath = uriResolver.getQPath(href, sessionInfo);
-        return qPath;
+        return eventPath;
-        try {
-            if (type == Event.NODE_ADDED || type == Event.NODE_REMOVED) {
-                return uriResolver.getNodeId(href, sessionInfo);
-            } else {
-                return uriResolver.getPropertyId(href, sessionInfo);
-            }
-        } catch (RepositoryException e) {
-            // should never occur
-            log.error("Internal error, while building id of Event.", e);
-            // TODO: check
-            throw new IllegalStateException();
-        }
+        return eventId;
-        try {
-            String parentHref = Text.getRelativeParent(href, 1, true);
-            return uriResolver.getNodeId(parentHref, sessionInfo);
-        } catch (RepositoryException e) {
-            // should never occur
-            log.error("Internal error, while building parentId of Event.", e);
-            // TODO: check
-            throw new IllegalStateException();
-        }
+        return parentId;
