JCR-2066 NodeTypeRegistry could auto-subtype from nt:base


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@786003 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.TreeSet;
+import javax.jcr.Session;
+import javax.jcr.nodetype.NodeTypeDefinition;
+import org.apache.jackrabbit.spi.commons.QNodeTypeDefinitionImpl;
+import org.apache.jackrabbit.spi.commons.conversion.DefaultNamePathResolver;
+import org.apache.jackrabbit.spi.commons.namespace.SessionNamespaceResolver;
+import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
-    // TODO: valueFactory not needed any more -> remove from constructor and write calls...
-
+     * Creates a new nodetype writer based on a session
+     *
+     * @param out the underlaying writer
+     * @param s repository session
+     * @param includeNS if <code>true</code> all used namespace decl. are also
+     *                  written to the writer
+     */
+    public CompactNodeTypeDefWriter(Writer out, Session s, boolean includeNS) {
+        this(out, new SessionNamespaceResolver(s), new DefaultNamePathResolver(s), includeNS);
+    }
+
+    /**
+     * Creates a new nodetype writer based on a namespace resolver
+     *
+     * @param out the underlaying writer
+     * @param r the naespace resolver
+     * @param includeNS if <code>true</code> all used namespace decl. are also
+     *                  written to the writer
+     */
+    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r, boolean includeNS) {
+        this(out, r, new DefaultNamePathResolver(r), includeNS);
+    }
+
+    /**
+     *                  written to the writer
-     * Write one QNodeTypeDefinition to this writer
+     * Write a collection of QNodeTypeDefinitions to this writer
+     * Write one NodeTypeDefinition to this writer
+     *
+     * @param nt node type definition
+     * @throws IOException if an I/O error occurs
+     */
+    public void write(NodeTypeDefinition nt) throws IOException {
+        try {
+            write(new QNodeTypeDefinitionImpl(nt, npResolver, QValueFactoryImpl.getInstance()));
+        } catch (RepositoryException e) {
+            throw new IOException("Error during internal conversion of nodetype definition:" + e.toString());
+        }
+    }
+
+    /**
-        String delim = " > ";
+        // get ordered list of supertypes, omitting nt:Base
+        TreeSet<Name> supertypes = new TreeSet<Name>();
-            out.write(delim);
-            out.write(resolve(name));
-            delim = ", ";
+            if (!name.equals(NameConstants.NT_BASE)) {
+                supertypes.add(name);
+            }
+        }
+        if (!supertypes.isEmpty()) {
+            String delim = " > ";
+            for (Name name : supertypes) {
+                out.write(delim);
+                out.write(resolve(name));
+                delim = ", ";
+            }
