JCR-2453 - Break the spi2dav dependency to jcr-server

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1002639 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.webdav.ValueUtil;
-import org.apache.jackrabbit.webdav.xml.DomUtil;
-import java.util.ArrayList;
-import java.util.List;
- * <code>ValuesProperty</code> extends {@link org.apache.jackrabbit.webdav.property.DavProperty} providing
- * utilities to handle the multiple values of the property item represented
- * by this resource.
+ * <code>ValuesProperty</code> implements {@link org.apache.jackrabbit.webdav.property.DavProperty}
+ * providing utilities to handle the value(s) of a JCR property item resource.
+ * In case the property is multivalued the DavProperty value consists of
+ * an element named {@link #JCR_VALUES} otherwise its name is {@link #JCR_VALUE}.
-        // retrieve jcr-values from child 'value'-element(s)
-        List<Element> valueElements = new ArrayList<Element>();
-        Object propValue = property.getValue();
-        if (propValue == null) {
-            jcrValues = new Value[0];
-        } else { /* not null propValue */
-            if (isValueElement(propValue)) {
-                valueElements.add((Element) propValue);
-            } else if (propValue instanceof List) {
-                for (Object el : ((List<?>) property.getValue())) {
-                    /* make sure, only Elements with name 'value' are used for
-                    * the 'value' field. any other content (other elements, text,
-                    * comment etc.) is ignored. NO bad-request/conflict error is
-                    * thrown.
-                    */
-                    if (isValueElement(el)) {
-                        valueElements.add((Element) el);
-                    }
-                }
-            }
-            /* fill the 'value' with the valid 'value' elements found before */
-            jcrValues = new Value[valueElements.size()];
-            int i = 0;
-            for (Element element : valueElements) {
-                jcrValues[i] = getJcrValue(element, defaultType, valueFactory);
-                i++;
-            }
-        }
-    }
-
-    private static boolean isValueElement(Object obj) {
-        return obj instanceof Element && XML_VALUE.equals(((Element)obj).getLocalName());
+        jcrValues = ValueUtil.valuesFromXml(property.getValue(), defaultType, valueFactory);
-     *
-     * @param valueElement
-     * @param defaultType
-     * @return
-     * @throws ValueFormatException
-     * @throws RepositoryException
-     */
-    private static Value getJcrValue(Element valueElement, int defaultType,
-                                     ValueFactory valueFactory)
-        throws ValueFormatException, RepositoryException {
-        if (valueElement == null) {
-            return null;
-        }
-        // make sure the value is never 'null'
-        String value = DomUtil.getText(valueElement, "");
-        String typeStr = DomUtil.getAttribute(valueElement, ATTR_VALUE_TYPE, ItemResourceConstants.NAMESPACE);
-        int type = (typeStr == null) ? defaultType : PropertyType.valueFromName(typeStr);
-        // deserialize value ->> see #toXml where values are serialized
-        return ValueHelper.deserialize(value, type, true, valueFactory);
-    }
-
-    /**
-     * @throws ValueFormatException if convertion of the internal jcr values to
+     * @throws ValueFormatException if converting the internal jcr values to
-        return jcrValues;
+        return vs;
-                String type = PropertyType.nameFromValue(v.getType());
-                String serializedValue = ValueHelper.serialize(v, true);
-                Element xmlValue = DomUtil.createElement(document, XML_VALUE, ItemResourceConstants.NAMESPACE, serializedValue);
-                DomUtil.setAttribute(xmlValue, ATTR_VALUE_TYPE, ItemResourceConstants.NAMESPACE, type);
+                Element xmlValue = ValueUtil.valueToXml(v, document);
