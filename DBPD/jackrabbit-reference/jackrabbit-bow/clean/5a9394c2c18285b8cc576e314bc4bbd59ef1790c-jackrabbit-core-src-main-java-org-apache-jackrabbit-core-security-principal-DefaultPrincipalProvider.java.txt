JCR-2313 - Improvements to user management (2) [work in progress] 
-> see issue for details

JCR-2333 - ItemImpl#validateTransientItems: Incomplete validation of mandatory child item
-> patch2

JCR-2195 - Provide possibility to import protected items using Session/Workspace import functionality
-> deal with reference properties
-> make import handlers configurable
-> add userimporter

JCR-171 - Make the extraction of Session UserIDs from Subjects configurable
-> extend SecurityManagerConfig and retrieve uid from principal name if configured
     class is present in the subject

JCR-2351 - Make Authorizable.setProperty more noisy in case of failure

JCR-2331 - Configurable DefaultPolicy replacing Initialization within the ACProvider
-> initial steps. remove code that relies on the default-init
-> add TODOs

JCR-2291 - Issues with compiled permissions of ACL provider
-> remove code searching for DENY-read entries in case of default initialization of ac entries

and here and there minor improvement, usage of generics etc....

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@828791 13f79535-47bb-0310-9956-ffa450edef68

-import java.security.Principal;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Set;
-
-import javax.jcr.RepositoryException;
-import javax.jcr.Session;
-import javax.jcr.observation.Event;
-import javax.jcr.observation.EventIterator;
-import javax.jcr.observation.EventListener;
-
+import org.apache.jackrabbit.core.security.SystemPrincipal;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.observation.Event;
+import javax.jcr.observation.EventIterator;
+import javax.jcr.observation.EventListener;
+import javax.security.auth.Subject;
+import java.security.Principal;
+import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.Map;
+import java.util.Set;
+
-    private final String pGroupName;
+    private final String pMembers;
-            ntNames[0] = resolver.getJCRName(UserManagerImpl.NT_REP_USER);
-            pGroupName = resolver.getJCRName(UserManagerImpl.P_GROUPS);
+            ntNames[0] = resolver.getJCRName(UserManagerImpl.NT_REP_GROUP);
+            pMembers = resolver.getJCRName(UserManagerImpl.P_MEMBERS);
-            ntNames[0] = "rep:User";
-            pGroupName = "rep:groups";
+            ntNames[0] = "rep:Group";
+            pMembers = "rep:members";
-        // find common ancestor of all user and group nodes.
-        String userPath = userManager.getUsersPath();
-        String obsPath = userPath;
-        while (!Text.isDescendant(obsPath, groupPath)) {
-            obsPath = Text.getRelativeParent(obsPath, 1);
-        }       
-                obsPath,
+                groupPath,
-     * Always returns true.
-     *
-        // by default (UserAccessControlProvider) READ-privilege is granted to
-        // everybody -> omit any (expensive) checks.
-        return true;
-        /*
-        // TODO: uncomment code if it turns out that the previous assumption is problematic.
-        // check if the session is granted read to the node.
+        // check if the session can read the user/group associated with the
+        // given principal
-                UserManager umgr = ((SessionImpl)session).getUserManager();
+                UserManager umgr = sImpl.getUserManager();
-        */
-                    if (pGroupName.equals(Text.getName(ev.getPath()))) {
+                    if (pMembers.equals(Text.getName(ev.getPath()))) {
-        Set<Principal> membership = new LinkedHashSet<Principal>();
+        final Set<Principal> membership = new LinkedHashSet<Principal>();
-                Authorizable auth = userManager.getAuthorizable(princ);
+                final Authorizable auth = userManager.getAuthorizable(princ);
-                Iterator itr = userManager.findAuthorizables(pPrincipalName, simpleFilter, UserManager.SEARCH_TYPE_USER);
+                Iterator<Authorizable> itr = userManager.findAuthorizables(pPrincipalName, simpleFilter, UserManager.SEARCH_TYPE_USER);
-                Iterator itr = userManager.findAuthorizables(pPrincipalName, simpleFilter, UserManager.SEARCH_TYPE_GROUP);
+                Iterator<Authorizable> itr = userManager.findAuthorizables(pPrincipalName, simpleFilter, UserManager.SEARCH_TYPE_GROUP);
-        private final Iterator authorizableItr;
+        private final Iterator<Authorizable> authorizableItr;
-        private PrincipalIteratorImpl(Iterator authorizableItr, boolean addEveryone) {
+        private PrincipalIteratorImpl(Iterator<Authorizable> authorizableItr, boolean addEveryone) {
-                    Principal p = ((Authorizable) authorizableItr.next()).getPrincipal();
+                    Principal p = authorizableItr.next().getPrincipal();
