optimized performance of Item.save() if a large number of items 
were removed

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@202365 13f79535-47bb-0310-9956-ffa450edef68

-     * @param id
-     * @return
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
+     * Return an item state, given its item id.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
+     *
+     * @param id item id
+     * @return item state
+     * @throws NoSuchItemStateException if the item does not exist
+     * @throws ItemStateException       if an error occurs
+     * @see ZombieHierarchyManager#getItemState(ItemId)
-     * @param id
-     * @return
+     * Determines whether an item state for a given item id exists.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
+     *
+     * @param id item id
+     * @return <code>true</code> if an item state exists, otherwise
+     *         <code>false</code>
+     * @see ZombieHierarchyManager#hasItemState(ItemId)
+     * Returns the <code>parentUUID</code> of the given item.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
-     * @param state
-     * @return
+     * @param state item state
+     * @return <code>parentUUID</code> of the given item
+     * @see ZombieHierarchyManager#getParentUUID(ItemState)
+     * Returns the <code>ChildNodeEntry</code> of <code>parent</code> with the
+     * specified <code>uuid</code> or <code>null</code> if there's no such entry.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
-     * @param parent
-     * @return
+     * @param parent node state
+     * @param uuid   uuid of child node entry
+     * @return the <code>ChildNodeEntry</code> of <code>parent</code> with
+     *         the specified <code>uuid</code> or <code>null</code> if there's
+     *         no such entry.
+     * @see ZombieHierarchyManager#getChildNodeEntry(NodeState, String)
+     * Returns the <code>ChildNodeEntry</code> of <code>parent</code> with the
+     * specified <code>name</code> and <code>index</code> or <code>null</code>
+     * if there's no such entry.
+     * <p/>
+     * Low-level hook provided for specialized derived classes.
-     * @param parent
-     * @param name
-     * @param index
-     * @return
+     * @param parent node state
+     * @param name   name of child node entry
+     * @param index  name of child node entry
+     * @return the <code>ChildNodeEntry</code> of <code>parent</code> with
+     *         the specified <code>name</code> and <code>index</code> or
+     *         <code>null</code> if there's no such entry.
+     * @see ZombieHierarchyManager#getChildNodeEntry(NodeState, QName, int)
-     * @param id   item id
+     * @param id   intermediate item id
+     * @return the id of the item denoted by <code>path</code>
+     * @return the id of the item denoted by <code>path</code>
+        // shortcut
+        if (id.equals(rootNodeId)) {
+            return 0;
+        }
-            if (parentUUID != null) {
-                return getDepth(new NodeId(parentUUID)) + 1;
+            int depth = 0;
+            while (parentUUID != null) {
+                depth++;
+                state = getItemState(new NodeId(parentUUID));
+                parentUUID = getParentUUID(state);
-            return 0;
+            return depth;
+    public int getRelativeDepth(NodeId ancestorId, ItemId descendantId)
+            throws ItemNotFoundException, RepositoryException {
+        if (ancestorId.equals(descendantId)) {
+            return 0;
+        }
+        int depth = 1;
+        try {
+            ItemState state = getItemState(descendantId);
+            String parentUUID = getParentUUID(state);
+            while (parentUUID != null) {
+                if (parentUUID.equals(ancestorId.getUUID())) {
+                    return depth;
+                }
+                depth++;
+                state = getItemState(new NodeId(parentUUID));
+                parentUUID = getParentUUID(state);
+            }
+            // not an ancestor
+            return -1;
+        } catch (NoSuchItemStateException nsise) {
+            String msg = "failed to determine depth of " + descendantId
+                    + " relative to " + ancestorId;
+            log.debug(msg);
+            throw new ItemNotFoundException(msg, nsise);
+        } catch (ItemStateException ise) {
+            String msg = "failed to determine depth of " + descendantId
+                    + " relative to " + ancestorId;
+            log.debug(msg);
+            throw new RepositoryException(msg, ise);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+        if (nodeId.equals(itemId)) {
+            // can't be ancestor of self
+            return false;
+        }
-            if (parentUUID != null) {
+            while (parentUUID != null) {
-                return isAncestor(nodeId, new NodeId(parentUUID));
+                state = getItemState(new NodeId(parentUUID));
+                parentUUID = getParentUUID(state);
+            // not an ancestor
