BLOBFileValue: fixed equals() plus minor corrections of javadoc & inline comments

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160265 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
-import java.io.ByteArrayInputStream;
-    /** the property type */
+    /**
+     * the property type
+     */
-    /** the default encoding */
+    /**
+     * the default encoding
+     */
-    /** empty array */
+    /**
+     * empty array
+     */
-    /** max size for keeping tmp data in memory */
+    /**
+     * max size for keeping tmp data in memory
+     */
-    /** underlaying file */
+    /**
+     * underlying file
+     */
-    /** flag indicating if file is a temp file */
+    /**
+     * flag indicating if this instance is backed by a temp file
+     */
-    /** buffer for small data */
+    /**
+     * buffer for small-sized data
+     */
-    /** underlaying file system resource */
+    /**
+     * underlying file system resource
+     */
-    /** converted text */
+    /**
+     * converted text
+     */
-     * to a temporary file or to a byte buffer, if smaller than
+     * to a temporary file or to a byte buffer if its size is smaller than
+                    // spool to temp file
-                    // create temp file
+                    // threshold for keeping data in memory exceeded;
+                    // create temp file and spool buffer contents
-                } else if (len + read > buffer.length) {
-                    byte[] newBuffer = new byte[len+read];
+                } else {
+                    // reallocate new buffer and spool old buffer contents
+                    byte[] newBuffer = new byte[len + read];
-                throw new IOException(fsResource.getPath() + ": the specified resource does not exist");
+                throw new IOException(fsResource.getPath()
+                        + ": the specified resource does not exist");
-            throw new IOException(fsResource.getPath() + ": the specified resource does not exist");
+            throw new IOException(fsResource.getPath()
+                    + ": the specified resource does not exist");
-                    && (fsResource == null ? other.fsResource == null : fsResource.equals(other.fsResource)));
+                    && (fsResource == null ? other.fsResource == null : fsResource.equals(other.fsResource))
+                    && buffer.equals(other.buffer));
+            // this instance is backed by a in-memory buffer
-     * @param pruneEmptyParentDirs if <code>true</code>, empty parent directories will
-     *                             automatically be deleted
+     * @param pruneEmptyParentDirs if <code>true</code>, empty parent directories
+     *                             will automatically be deleted
+            // this instance is backed by a in-memory buffer
-                throw new RepositoryException("file backing binary value not found", fnfe);
+                throw new RepositoryException("file backing binary value not found",
+                        fnfe);
-                throw new RepositoryException(fsResource.getPath() + ": the specified resource does not exist", fse);
+                throw new RepositoryException(fsResource.getPath()
+                        + ": the specified resource does not exist", fse);
+            // this instance is backed by a in-memory buffer
-            byte[] buffer = new byte[8192];
+            byte[] buffer = new byte[0x2000];
-            } catch (IOException ioe) {
+            } catch (IOException ignore) {
-    //-----------------------------------------< java.lang.Object overrides >---
+    //-------------------------------------------< java.lang.Object overrides >
-            // this instance is backed to a byte buffer
+            // this instance is backed by a in-memory buffer
-    //--------------------------------------------------------------< Value >---
+    //----------------------------------------------------------------< Value >
-    public String getString() throws ValueFormatException, IllegalStateException, RepositoryException {
+    public String getString()
+            throws ValueFormatException, IllegalStateException,
+            RepositoryException {
-                throw new RepositoryException(DEFAULT_ENCODING + " not supported on this platform", e);
+                throw new RepositoryException(DEFAULT_ENCODING
+                        + " not supported on this platform", e);
-    public InputStream getStream() throws ValueFormatException, IllegalStateException, RepositoryException {
+    public InputStream getStream()
+            throws ValueFormatException, IllegalStateException,
+            RepositoryException {
-                throw new RepositoryException("file backing binary value not found", fnfe);
+                throw new RepositoryException("file backing binary value not found",
+                        fnfe);
-                throw new RepositoryException(fsResource.getPath() + ": the specified resource does not exist", fse);
+                throw new RepositoryException(fsResource.getPath()
+                        + ": the specified resource does not exist", fse);
-    public double getDouble() throws ValueFormatException, IllegalStateException, RepositoryException {
+    public double getDouble()
+            throws ValueFormatException, IllegalStateException,
+            RepositoryException {
-    public Calendar getDate() throws ValueFormatException, IllegalStateException, RepositoryException {
+    public Calendar getDate()
+            throws ValueFormatException, IllegalStateException,
+            RepositoryException {
-    public long getLong() throws ValueFormatException, IllegalStateException, RepositoryException {
+    public long getLong()
+            throws ValueFormatException, IllegalStateException,
+            RepositoryException {
-    public boolean getBoolean() throws ValueFormatException, IllegalStateException, RepositoryException {
+    public boolean getBoolean()
+            throws ValueFormatException, IllegalStateException,
+            RepositoryException {
