JCR-EXT: Cleanups and improvements for the simple node type state implementation.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@328809 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashSet;
-import java.util.Set;
+import java.util.Arrays;
-    private QName defaultPrimaryTypeName;
+    private QName defaultPrimaryTypeName = null;
-    private Set requiredPrimaryTypeNames;
+    private QName[] requiredPrimaryTypeNames = new QName[0];
-    private boolean allowsSameNameSiblings;
-
-    /** Creates an empty node definition state instance. */
-    public NodeDefinitionState() {
-        super();
-        defaultPrimaryTypeName = null;
-        requiredPrimaryTypeNames = new HashSet();
-        allowsSameNameSiblings = false;
-    }
+    private boolean allowsSameNameSiblings = false;
-        return (QName[]) requiredPrimaryTypeNames.toArray(
-                new QName[requiredPrimaryTypeNames.size()]);
+        return requiredPrimaryTypeNames;
-     * Adds a type name to the list of required primary types.
+     * Sets the list of required primary types.
-     * @param requiredPrimaryTypeName type name
+     * @param requiredPrimaryTypeNames type names
-    public void addRequiredPrimaryTypeName(QName requiredPrimaryTypeName) {
-        requiredPrimaryTypeNames.add(requiredPrimaryTypeName);
+    public void setRequiredPrimaryTypeName(QName[] requiredPrimaryTypeNames) {
+        this.requiredPrimaryTypeNames = requiredPrimaryTypeNames;
+        Arrays.sort(this.requiredPrimaryTypeNames);
+    public boolean equals(Object object) {
+        return (this == object)
+            || (object != null && new StateComparator().compare(this, object) == 0);
+    }
+
+    public int hashCode() {
+        int code = super.hashCode();
+        code = code * 17 + (allowsSameNameSiblings ? 1 : 0);
+        code = code * 17 + ((defaultPrimaryTypeName != null) ? defaultPrimaryTypeName.hashCode() : 0);
+        for (int i = 0; i < requiredPrimaryTypeNames.length; i++) {
+            code = code * 17 + requiredPrimaryTypeNames[i].hashCode();
+        }
+        return code;
+    }
+
