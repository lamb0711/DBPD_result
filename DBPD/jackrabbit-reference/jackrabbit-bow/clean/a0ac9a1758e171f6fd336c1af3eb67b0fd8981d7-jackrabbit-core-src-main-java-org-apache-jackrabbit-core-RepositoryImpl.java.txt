JCR-1590: JSR 283: Locking

Added a timeout handler to LockManagerImpl. It runs as a scheduled task (at one second intervals) inside a new repository-wide ScheduledExecutorService instance.

Adjusted the TCK test for this and fixed some jcr2spi assumptions about this (the lock can expire from under the SPI layer).

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@805431 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.Executors;
+import java.util.concurrent.RejectedExecutionHandler;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+     * Scheduled executor service.
+     */
+    private final ScheduledExecutorService executor;
+
+    /**
+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(
+                Runtime.getRuntime().availableProcessors() * 2,
+                new ThreadPoolExecutor.CallerRunsPolicy());
+        this.executor = executor;
+        // Shut down the executor service 
+        executor.shutdown();
+        try {
+            // Wait for all remaining background threads to terminate
+            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
+                log.warn("Attempting to forcibly shutdown runaway threads");
+                executor.shutdownNow();
+            }
+        } catch (InterruptedException e) {
+            log.warn("Interrupted while waiting for background threads", e);
+        }
+
-                    lockMgr = new LockManagerImpl(getSystemSession(), fs);
+                    lockMgr =
+                        new LockManagerImpl(getSystemSession(), fs, executor);
