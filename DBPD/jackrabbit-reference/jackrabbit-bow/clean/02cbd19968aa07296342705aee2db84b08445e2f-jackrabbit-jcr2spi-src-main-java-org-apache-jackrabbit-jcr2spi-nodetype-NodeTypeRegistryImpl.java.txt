JCR-2105: JSR 283 NodeType Management (work in progress)
JCR-1483: Move common node type functionality to jackrabbit-spi-commons

NOTE: intermediate checkin to avoid additional conflicts with stefans work


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@774294 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.nodetype.InvalidNodeTypeDefException;
+import javax.jcr.nodetype.InvalidNodeTypeDefinitionException;
+import javax.jcr.nodetype.NodeTypeExistsException;
-   /**
-     * @see NodeTypeRegistry#registerNodeType(QNodeTypeDefinition)
-     */
-    public synchronized EffectiveNodeType registerNodeType(QNodeTypeDefinition ntDef)
-            throws InvalidNodeTypeDefException, RepositoryException {
-        // validate the new nodetype definition
-        EffectiveNodeType ent = validator.validateNodeTypeDef(ntDef, registeredNTDefs);
-
-        // persist new node type definition
-        storage.registerNodeTypes(new QNodeTypeDefinition[] {ntDef});
-
-        // update internal caches
-        internalRegister(ntDef, ent);
-
-        // notify listeners
-        notifyRegistered(ntDef.getName());
-        return ent;
-    }
-
-     * @see NodeTypeRegistry#registerNodeTypes(Collection)
+     * @see NodeTypeRegistry#registerNodeTypes(Collection, boolean)
-    public synchronized void registerNodeTypes(Collection ntDefs)
-            throws InvalidNodeTypeDefException, RepositoryException {
+    public synchronized void registerNodeTypes(Collection<QNodeTypeDefinition> ntDefs, boolean allowUpdate) throws NodeTypeExistsException, InvalidNodeTypeDefinitionException, RepositoryException {
+        List<Name> added = new ArrayList<Name>();
+        List<Name> modified = new ArrayList<Name>();
+        for (QNodeTypeDefinition def : ntDefs) {
+            Name name = def.getName();
+            if (isRegistered(name)) {
+                modified.add(name);
+            } else {
+                added.add(name);
+            }
+        }
-        storage.registerNodeTypes((QNodeTypeDefinition[])ntDefs.toArray(new QNodeTypeDefinition[ntDefs.size()]));
+        storage.registerNodeTypes(ntDefs.toArray(new QNodeTypeDefinition[ntDefs.size()]), allowUpdate);
-        // update internal cache
+        // update internal cache:
+        // unregister modified node type definition
+        internalUnregister(modified);
+        // register all new and modified definition
-        for (Iterator iter = ntDefs.iterator(); iter.hasNext();) {
-            Name ntName = ((QNodeTypeDefinition)iter.next()).getName();
+        for (Name ntName : added) {
-    }
-
-    /**
-     * @see NodeTypeRegistry#unregisterNodeType(Name)
-     */
-    public void unregisterNodeType(Name nodeTypeName) throws NoSuchNodeTypeException, RepositoryException {
-        HashSet ntNames = new HashSet();
-        ntNames.add(nodeTypeName);
-        unregisterNodeTypes(ntNames);
+        for (Name ntName : modified) {
+            notifyReRegistered(ntName);
+        }
-    public synchronized void unregisterNodeTypes(Collection nodeTypeNames)
+    public synchronized void unregisterNodeTypes(Collection<Name> nodeTypeNames)
-        for (Iterator iter = nodeTypeNames.iterator(); iter.hasNext();) {
-            Name ntName = (Name) iter.next();
-
+        for (Name ntName : nodeTypeNames) {
-        storage.unregisterNodeTypes((Name[]) nodeTypeNames.toArray(new Name[nodeTypeNames.size()]));
+        storage.unregisterNodeTypes(nodeTypeNames.toArray(new Name[nodeTypeNames.size()]));
-     * @see NodeTypeRegistry#reregisterNodeType(QNodeTypeDefinition)
-     */
-    public synchronized EffectiveNodeType reregisterNodeType(QNodeTypeDefinition ntd)
-            throws NoSuchNodeTypeException, InvalidNodeTypeDefException,
-            RepositoryException {
-        Name name = ntd.getName();
-        if (!registeredNTDefs.containsKey(name)) {
-            throw new NoSuchNodeTypeException(name.toString());
-        }
-        /* validate new node type definition */
-        EffectiveNodeType ent = validator.validateNodeTypeDef(ntd, registeredNTDefs);
-
-        // first call reregistering on storage
-        storage.reregisterNodeTypes(new QNodeTypeDefinition[]{ntd});
-
-        // unregister old node type definition
-        internalUnregister(name);
-        // register new definition
-        internalRegister(ntd, ent);
-
-        // notify listeners
-        notifyReRegistered(name);
-        return ent;
-    }
-
-    /**
-    private void internalUnregister(Collection ntNames) {
-        for (Iterator iter = ntNames.iterator(); iter.hasNext();) {
-            Name name = (Name) iter.next();
+    private void internalUnregister(Collection<Name> ntNames) {
+        for (Name name : ntNames) {
