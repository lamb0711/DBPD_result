JCR-1677: Allow workspace creation over cluster

Patch by Matej Knopp

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@711238 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.cluster.WorkspaceEventChannel;
+import org.apache.jackrabbit.core.cluster.WorkspaceListener;
+import org.apache.jackrabbit.core.xml.ClonedInputSource;
+import java.io.StringReader;
-        implements JackrabbitRepository, SessionListener, EventListener {
+        implements JackrabbitRepository, SessionListener, EventListener, WorkspaceListener {
+     * Chanel for posting create workspace messages.
+     */
+    private WorkspaceEventChannel createWorkspaceEventChannel;
+
+    /**
+                
+                createWorkspaceEventChannel = clusterNode;
+                clusterNode.setListener(this);
+            // needed to get newly created workspace config file content when runnin in clustered environment
+            StringBuffer workspaceConfigContent = clusterNode != null ? new StringBuffer() : null;
+
-            WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName);
+            WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName, workspaceConfigContent);
+            WorkspaceInfo info = createWorkspaceInfo(config);
+            wspInfos.put(workspaceName, info);
+
+            if (workspaceConfigContent != null && createWorkspaceEventChannel != null) {
+                // notify other cluster node that workspace has been created
+                InputSource s = new InputSource(new StringReader(workspaceConfigContent.toString()));
+                createWorkspaceEventChannel.workspaceCreated(workspaceName, new ClonedInputSource(s));
+            }
+        }
+    }
+
+    public void externalWorkspaceCreated(String workspaceName,
+            InputSource configTemplate) throws RepositoryException {
+
+        createWorkspaceInternal(workspaceName, configTemplate);
+    }
+
+    /**
+     * Creates a workspace with the given name and given workspace configuration
+     * template.
+     * 
+     * The difference between this method and {@link #createWorkspace(String, InputSource)}
+     * is that the later notifies the other cluster node that workspace has been created
+     * whereas this method only creates the workspace.
+     *
+     * @param workspaceName  name of the new workspace
+     * @param configTemplate the workspace configuration template of the new
+     *                       workspace
+     * @throws RepositoryException if a workspace with the given name already
+     *                             exists or if another error occurs
+     * @see SessionImpl#createWorkspace(String,InputSource)
+     */
+    private void createWorkspaceInternal(String workspaceName,
+                                   InputSource configTemplate)
+            throws RepositoryException {
+        synchronized (wspInfos) {
+            if (wspInfos.containsKey(workspaceName)) {
+                throw new RepositoryException("workspace '"
+                        + workspaceName + "' already exists.");
+            }
+
+            // create the workspace configuration
+            WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName, configTemplate);
-
+    
-        synchronized (wspInfos) {
-            if (wspInfos.containsKey(workspaceName)) {
-                throw new RepositoryException("workspace '"
-                        + workspaceName + "' already exists.");
-            }
-            // create the workspace configuration
-            WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName, configTemplate);
-            WorkspaceInfo info = createWorkspaceInfo(config);
-            wspInfos.put(workspaceName, info);
+        if (createWorkspaceEventChannel == null) {
+            createWorkspaceInternal(workspaceName, configTemplate);
+        }
+        else {
+        
+            ClonedInputSource template = new ClonedInputSource(configTemplate);
+            createWorkspaceInternal(workspaceName, template.cloneInputSource());
+            createWorkspaceEventChannel.workspaceCreated(workspaceName, template);
