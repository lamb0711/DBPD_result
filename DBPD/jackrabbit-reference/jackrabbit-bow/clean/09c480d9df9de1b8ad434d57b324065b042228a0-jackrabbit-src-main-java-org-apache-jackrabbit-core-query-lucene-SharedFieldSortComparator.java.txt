Open up some access modifiers to allow for better extension of the default query handler.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@350022 13f79535-47bb-0310-9956-ffa450edef68

-class SharedFieldSortComparator extends SortComparator {
+public class SharedFieldSortComparator extends SortComparator {
+     * If <code>true</code> <code>ScoreDocComparator</code> will returns term
+     * values when {@link org.apache.lucene.search.ScoreDocComparator#sortValue(org.apache.lucene.search.ScoreDoc)}
+     * is called, otherwise only a dummy value is returned.
+     */
+    private final boolean createComparatorValues;
+
+    /**
+     *
+        this(fieldname, false);
+    }
+
+    /**
+     * Creates a new <code>SharedFieldSortComparator</code> for a given shared
+     * field.
+     *
+     * @param fieldname              the shared field.
+     * @param createComparatorValues if <code>true</code> creates values
+     * for the <code>ScoreDocComparator</code>s.
+     * @see #createComparatorValues
+     */
+    public SharedFieldSortComparator(String fieldname, boolean createComparatorValues) {
+        this.createComparatorValues = createComparatorValues;
-                        propertyName, SharedFieldSortComparator.this);
+                        FieldNames.createNamedValue(propertyName, ""),
+                        SharedFieldSortComparator.this,
+                        createComparatorValues);
-             * Always returns an empty String.
+             * Returns an empty if no lookup table is available otherwise
+             * the index term for the score doc <code>i</code>.
+             *
-             * @return an empty String.
+             * @return the sort value if available.
-                // return dummy value
-                return "";
+                if (index.lookup != null) {
+                    return index.lookup[index.order[i.doc]];
+                } else {
+                    // return dummy value
+                    return "";
+                }
