JCR-469: Problem with child order after restoring of parent


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@416629 13f79535-47bb-0310-9956-ffa450edef68

+        // the absense of an index does not make sense here, so check
+        if (index <= 0) {
+            index = 1;
+        }
+
-        // check state of this instance
-        sanityCheck();
-
-        if (!getPrimaryNodeType().hasOrderableChildNodes()) {
-            throw new UnsupportedRepositoryOperationException("child node ordering not supported on node " + safeGetJCRPath());
-        }
-
-        // check arguments
-        if (srcName.equals(destName)) {
-            // there's nothing to do
-            return;
-        }
+        orderBefore(insertName, beforeName);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @param srcName
+     * @param dstName
+     */
+    public synchronized void orderBefore(Path.PathElement srcName,
+                                         Path.PathElement dstName)
+            throws UnsupportedRepositoryOperationException, VersionException,
+            ConstraintViolationException, ItemNotFoundException, LockException,
+            RepositoryException {
+
+        // check state of this instance
+        sanityCheck();
+
+        if (!getPrimaryNodeType().hasOrderableChildNodes()) {
+            throw new UnsupportedRepositoryOperationException("child node ordering not supported on node " + safeGetJCRPath());
+        }
+
+        // check arguments
+        if (srcName.equals(dstName)) {
+            // there's nothing to do
+            return;
+        }
-        if (!hasNode(srcName)) {
+        if (!hasNode(srcName.getName(), srcName.getIndex())) {
-        if (destName != null && !hasNode(destName)) {
+        if (dstName != null && !hasNode(dstName.getName(), dstName.getIndex())) {
-                    + " has no child node with name " + destName);
+                    + " has no child node with name " + dstName);
-                if (entry.getName().equals(insertName.getName())
-                        && (entry.getIndex() == insertName.getIndex()
-                        || insertName.getIndex() == 0 && entry.getIndex() == 1)) {
+                if (entry.getName().equals(srcName.getName())
+                        && (entry.getIndex() == srcName.getIndex()
+                        || srcName.getIndex() == 0 && entry.getIndex() == 1)) {
-            if (destInd == -1 && beforeName != null) {
-                if (entry.getName().equals(beforeName.getName())
-                        && (entry.getIndex() == beforeName.getIndex()
-                        || beforeName.getIndex() == 0 && entry.getIndex() == 1)) {
+            if (destInd == -1 && dstName != null) {
+                if (entry.getName().equals(dstName.getName())
+                        && (entry.getIndex() == dstName.getIndex()
+                        || dstName.getIndex() == 0 && entry.getIndex() == 1)) {
+            NodeImpl restoredChild = null;
-                NodeImpl n = addNode(f.getName(), f);
-                n.restoreFrozenState(f, vsel, restored, removeExisting);
+                restoredChild = addNode(f.getName(), f);
+                restoredChild.restoreFrozenState(f, vsel, restored, removeExisting);
-                NodeImpl node;
-                    node = addNode(child.getName(), v.getFrozenNode());
+                    restoredChild = addNode(child.getName(), v.getFrozenNode());
-                    node = session.getNodeById(nodeId);
+                    restoredChild = session.getNodeById(nodeId);
-                        node.internalRestore(v, vsel, removeExisting);
+                        restoredChild.internalRestore(v, vsel, removeExisting);
-                        log.error("  child path: " + node.safeGetJCRPath());
+                        log.error("  child path: " + restoredChild.safeGetJCRPath());
+            // ensure proper odering (issue JCR-469)
+            if (restoredChild != null
+                    && getPrimaryNodeType().hasOrderableChildNodes()) {
+                orderBefore(restoredChild.getPrimaryPath().getNameElement(), null);
+            }
