JCR-1589: JSR 283 Retention & Hold Management (work in progress)
JCR-1957: Move common validation checks to a single place

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@738422 13f79535-47bb-0310-9956-ffa450edef68

-     * option for <code>{@link #checkAddNode}</code> and
-     * <code>{@link #checkRemoveNode}</code> methods:<p/>
-     * check access rights
-     */
-    public static final int CHECK_ACCESS = 1;
-    /**
-     * option for <code>{@link #checkAddNode}</code> and
-     * <code>{@link #checkRemoveNode}</code> methods:<p/>
-     * check lock status
-     */
-    public static final int CHECK_LOCK = 2;
-    /**
-     * option for <code>{@link #checkAddNode}</code> and
-     * <code>{@link #checkRemoveNode}</code> methods:<p/>
-     * check checked-out status
-     */
-    public static final int CHECK_VERSIONING = 4;
-    /**
-     * option for <code>{@link #checkAddNode}</code> and
-     * <code>{@link #checkRemoveNode}</code> methods:<p/>
-     * check constraints defined in node type
-     */
-    public static final int CHECK_CONSTRAINTS = 16;
-    /**
-     * option for <code>{@link #checkRemoveNode}</code> method:<p/>
-     * check that target node is not being referenced
-     */
-    public static final int CHECK_REFERENCES = 8;
-
-    /**
-     * lock manager used for checking locking status
-     */
-    protected final LockManager lockMgr;
-    /**
-     * current session used for checking access rights and locking status
+     * current session used for checking access rights
+     * @throws RepositoryException
-                                 HierarchyManager hierMgr) {
-        super(ntReg, hierMgr, session);
+                                 HierarchyManager hierMgr) throws RepositoryException {
+        super(ntReg, hierMgr, session, lockMgr, session.getAccessManager(), session.getRetentionRegistry());
-        this.lockMgr = lockMgr;
-                | CHECK_VERSIONING | CHECK_CONSTRAINTS);
+                | CHECK_VERSIONING | CHECK_CONSTRAINTS | CHECK_HOLD | CHECK_RETENTION);
-                | CHECK_VERSIONING | CHECK_CONSTRAINTS);
+                | CHECK_VERSIONING | CHECK_CONSTRAINTS | CHECK_HOLD | CHECK_RETENTION);
-                CHECK_ACCESS | CHECK_LOCK | CHECK_VERSIONING | CHECK_CONSTRAINTS);
+                CHECK_ACCESS | CHECK_LOCK | CHECK_VERSIONING | CHECK_CONSTRAINTS |
+                        CHECK_HOLD | CHECK_RETENTION);
-                | CHECK_VERSIONING | CHECK_CONSTRAINTS);
+                | CHECK_VERSIONING | CHECK_CONSTRAINTS | CHECK_HOLD | CHECK_RETENTION);
-                | CHECK_CONSTRAINTS | CHECK_REFERENCES);
+                | CHECK_CONSTRAINTS | CHECK_REFERENCES | CHECK_HOLD | CHECK_RETENTION);
-     *                     <li><code>{@link #CHECK_REFERENCES}</code></li>
+     *                     <li><code>{@link #CHECK_HOLD}</code>: check for effective holds preventing the add operation</li>
+     *                     <li><code>{@link #CHECK_RETENTION}</code>: check for effective retention policy preventing the add operation</code></li>
-            AccessManager accessMgr = session.getAccessManager();
+
+        if ((options & CHECK_HOLD) == CHECK_HOLD) {
+            if (retentionReg.hasEffectiveHold(parentPath, false)) {
+                throw new RepositoryException("Unable to add node. Parent is affected by a hold.");
+            }
+        }
+        if ((options & CHECK_RETENTION) == CHECK_RETENTION) {
+            if (retentionReg.hasEffectiveRetention(parentPath, false)) {
+                throw new RepositoryException("Unable to add node. Parent is affected by a retention.");
+            }
+        }
+     *                    <li><code>{@link #CHECK_HOLD}</code>: check for effective holds preventing the add operation</li>
+     *                    <li><code>{@link #CHECK_RETENTION}</code: check for effective retention policy preventing the add operation</code></li>
+     *                    <li><code>{@link #CHECK_HOLD}</code>: check for effective holds preventing the add operation</li>
+     *                    <li><code>{@link #CHECK_RETENTION}</code>: check for effective retention policy preventing the add operation</code></li>
-            AccessManager accessMgr = session.getAccessManager();
+
+        if ((options & CHECK_HOLD) == CHECK_HOLD) {
+            if (retentionReg.hasEffectiveHold(targetPath, true)) {
+                throw new RepositoryException("Unable to perform removal. Node is affected by a hold.");
+            }
+        }
+        if ((options & CHECK_RETENTION) == CHECK_RETENTION) {
+            if (retentionReg.hasEffectiveRetention(targetPath, true)) {
+                throw new RepositoryException("Unable to perform removal. Node is affected by a retention.");
+            }
+        }
+     * <li>the node must not be affected by a hold or a retention policy</li>
-        AccessManager accessMgr = session.getAccessManager();
+
+        if (retentionReg.hasEffectiveHold(nodePath, false)) {
+            throw new RepositoryException("Unable to write. Node is affected by a hold.");
+        }
+        if (retentionReg.hasEffectiveRetention(nodePath, false)) {
+            throw new RepositoryException("Unable to write. Node is affected by a retention.");
+        }
-        AccessManager accessMgr = session.getAccessManager();
-                    // (access rights, locking & versioning status);
+                    // (access rights, locking & versioning status as well
+                    //  as retention and hold);
-                            | CHECK_VERSIONING);
+                            | CHECK_VERSIONING
+                            | CHECK_HOLD
+                            | CHECK_RETENTION
+                    );
-                        // node type constraints)
+                        // node type constraints and retention/hold)
-                                | CHECK_CONSTRAINTS);
+                                | CHECK_CONSTRAINTS
+                                | CHECK_HOLD
+                                | CHECK_RETENTION);
