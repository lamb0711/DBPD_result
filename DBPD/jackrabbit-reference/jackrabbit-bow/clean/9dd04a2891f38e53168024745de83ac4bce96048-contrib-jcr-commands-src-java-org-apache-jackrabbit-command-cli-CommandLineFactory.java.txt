jcr-97: Improve Checkstyle conformance

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312896 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.command.CommandException;
- * Command line factory.
+ * Command line factory
-public class CommandLineFactory
-{
-	/** logger */
-	private static Log log = LogFactory.getLog(CommandLineFactory.class);
+public class CommandLineFactory {
+    /** logger */
+    private static Log log = LogFactory.getLog(CommandLineFactory.class);
-	private static ResourceBundle bundle = CommandHelper.getBundle();
+    /** resource bundle */
+    private static ResourceBundle bundle = CommandHelper.getBundle();
-	/** file name */
-	private static String COMMAND_LINE_FILE = "command-line.xml";
+    /** file name */
+    private static final String COMMAND_LINE_FILE = "command-line.xml";
-	/** rules file name */
-	private static String COMMAND_LINE_RULES_FILE = "command-line-rules.xml";
+    /** rules file name */
+    private static final String COMMAND_LINE_RULES_FILE = "command-line-rules.xml";
-	/** singleton */
-	private static CommandLineFactory singleton;
+    /** singleton */
+    private static CommandLineFactory singleton;
-	/** command cache */
-	private Map cache = new TreeMap();
+    /** command cache */
+    private Map cache = new TreeMap();
-	/** alias cache */
-	private Map alias = new HashMap();
+    /** alias cache */
+    private Map alias = new HashMap();
-	/**
-	 * private Constructor
-	 */
-	private CommandLineFactory()
-	{
-		super();
-	}
+    /**
+     * private constructor
+     */
+    private CommandLineFactory() {
+        super();
+    }
-	/**
-	 * @return CliCommandFactory singleton
-	 */
-	public static CommandLineFactory getInstance()
-	{
-		if (singleton == null)
-		{
-			try
-			{
-				CommandLineFactory factory = new CommandLineFactory();
-				factory.init();
-				singleton = factory;
-			} catch (Exception e)
-			{
-				log.error(bundle.getString("exception.unabletoinit"), e);
-				e.printStackTrace();
-			}
-		}
-		return singleton;
-	}
+    /**
+     * @return singleton
+     */
+    public static CommandLineFactory getInstance() {
+        if (singleton == null) {
+            try {
+                CommandLineFactory factory = new CommandLineFactory();
+                factory.init();
+                singleton = factory;
+            } catch (Exception e) {
+                log.error(bundle.getString("exception.unabletoinit"), e);
+                e.printStackTrace();
+            }
+        }
+        return singleton;
+    }
-	/**
-	 * @return all registered commands
-	 * @throws CommandException
-	 */
-	public Collection getCommandLines() throws CommandException
-	{
-		List cls = new ArrayList();
-		Iterator iter = cache.values().iterator();
-		while (iter.hasNext())
-		{
-			CommandLine cl = (CommandLine) iter.next();
-			cls.add(cl.clone());
-		}
-		return cls;
-	}
+    /**
+     * @return all registered <code>Command</code> s
+     */
+    public Collection getCommandLines() {
+        List cls = new ArrayList();
+        Iterator iter = cache.values().iterator();
+        while (iter.hasNext()) {
+            CommandLine cl = (CommandLine) iter.next();
+            cls.add(cl.clone());
+        }
+        return cls;
+    }
-	/**
-	 * @param name
-	 * @return a new Command Line Instance for the given command name
-	 * @throws JcrParserException
-	 */
-	public CommandLine getCommandLine(String name) throws JcrParserException
-	{
-		log.debug("lookup command " + name);
-		// get Command line
-		CommandLine original = (CommandLine) cache.get(name);
+    /**
+     * Get the <code>Command</code> for the given name
+     * @param name
+     *        the <code>Command</code> name
+     * @return a new Command Line Instance for the given command name
+     * @throws JcrParserException
+     *         if there's no <code>Command</code> for the given name
+     */
+    public CommandLine getCommandLine(String name) throws JcrParserException {
+        log.debug("lookup command " + name);
+        // get Command line
+        CommandLine original = (CommandLine) cache.get(name);
-		if (original == null)
-		{
-			log.debug("lookup alias " + name);
-			original = (CommandLine) alias.get(name);
-		}
+        if (original == null) {
+            log.debug("lookup alias " + name);
+            original = (CommandLine) alias.get(name);
+        }
-		if (original == null)
-		{
-			log.warn("command not found " + name);
-			throw new JcrParserException("exception.no.command.for.name",
-					new String[]
-					{ name });
-		}
+        if (original == null) {
+            log.warn("command not found " + name);
+            throw new JcrParserException("exception.no.command.for.name",
+                new String[] {
+                    name
+                });
+        }
-		// Return a clone
-		return (CommandLine) original.clone();
-	}
+        // Return a clone
+        return (CommandLine) original.clone();
+    }
-	/**
-	 * Parse configuration file
-	 * 
-	 * @throws IOException
-	 * @throws SAXException
-	 * @throws ConfigurationException
-	 */
-	private void init() throws IOException, SAXException,
-			ConfigurationException
-	{
-		// Configure Digester from XML ruleset
-		URL rulesFile = getClass().getResource(COMMAND_LINE_RULES_FILE);
-		URL clFile = getClass().getResource(COMMAND_LINE_FILE);
+    /**
+     * parses the configuration file
+     * @throws ConfigurationException
+     *         an <code>Exception</code> occurs while parsing
+     */
+    private void init() throws ConfigurationException {
+        try {
+            // Configure Digester from XML ruleset
+            URL rulesFile = getClass().getResource(COMMAND_LINE_RULES_FILE);
+            URL clFile = getClass().getResource(COMMAND_LINE_FILE);
-		// init digester
-		Digester digester = DigesterLoader.createDigester(rulesFile);
+            // init digester
+            Digester digester = DigesterLoader.createDigester(rulesFile);
-		// Push empty List onto Digester's Stack
-		List cls = new ArrayList();
-		digester.push(cls);
+            // Push empty List onto Digester's Stack
+            List cls = new ArrayList();
+            digester.push(cls);
-		// Parse the XML document
-		InputStream input = clFile.openStream();
-		digester.parse(input);
-		input.close();
+            // Parse the XML document
+            InputStream input = clFile.openStream();
+            digester.parse(input);
+            input.close();
-		// Add to cache
-		Iterator iter = cls.iterator();
-		while (iter.hasNext())
-		{
-			CommandLine cl = (CommandLine) iter.next();
-			cache.put(cl.getName(), cl);
-			// Add to alias cache
-			Iterator aliasIt = cl.getAlias().iterator();
-			while (aliasIt.hasNext())
-			{
-				String aliasName = (String) aliasIt.next();
-				if (alias.containsKey(aliasName))
-				{
-					throw new ConfigurationException(
-							"exception.alias.already.in.use", new String[]
-							{ aliasName, cl.getName() });
-				}
-				alias.put(aliasName, cl);
-			}
-		}
-	}
+            // Add to cache
+            Iterator iter = cls.iterator();
+            while (iter.hasNext()) {
+                CommandLine cl = (CommandLine) iter.next();
+                cache.put(cl.getName(), cl);
+                // Add to alias cache
+                Iterator aliasIt = cl.getAlias().iterator();
+                while (aliasIt.hasNext()) {
+                    String aliasName = (String) aliasIt.next();
+                    if (alias.containsKey(aliasName)) {
+                        throw new ConfigurationException(
+                            "exception.alias.already.in.use", new String[] {
+                                    aliasName, cl.getName()
+                            });
+                    }
+                    alias.put(aliasName, cl);
+                }
+            }
+        } catch (IOException e) {
+            throw new ConfigurationException(e.getLocalizedMessage());
+        } catch (SAXException e) {
+            throw new ConfigurationException(e.getLocalizedMessage());
+        }
+    }
