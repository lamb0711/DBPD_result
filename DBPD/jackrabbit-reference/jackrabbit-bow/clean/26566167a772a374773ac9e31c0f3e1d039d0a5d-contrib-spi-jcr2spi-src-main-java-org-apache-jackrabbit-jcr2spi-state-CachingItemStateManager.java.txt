TransientItemStatemanager now also extends from CachingItemStateManager.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431601 13f79535-47bb-0310-9956-ffa450edef68

-public class CachingItemStateManager implements ItemStateManager, ItemStateLifeCycleListener {
+public class CachingItemStateManager implements ItemStateManager {
-     * The root node of the workspace.
+     * The root node of the workspace or <code>null</code> if it has not been
+     * retrieved yet.
-    private final NodeState root;
+    private NodeState root;
+     * An {@link ItemStateLifeCycleListener} to maintain the LRU and UUID
+     * reference cache.
+     */
+    private final ItemStateLifeCycleListener lifeCycleListener;
+
+    /**
-     * @throws NoSuchItemStateException if the root node cannot be obtained.
-     * @throws ItemStateException       if any other error occurs while
-     *                                  obtaining the root node.
-    public CachingItemStateManager(ItemStateFactory isf, IdFactory idFactory)
-            throws ItemStateException, NoSuchItemStateException {
+    public CachingItemStateManager(ItemStateFactory isf, IdFactory idFactory) {
-        // initialize root
-        root = isf.createNodeState(idFactory.createNodeId((String) null, Path.ROOT), this);
-        root.addListener(this);
+        this.lifeCycleListener = new ISLifeCycleListener();
+        if (root == null) {
+            root = isf.createNodeState(idFactory.createNodeId((String) null, Path.ROOT), this);
+            root.addListener(lifeCycleListener);
+        }
-    //------------------------< ItemStateListener >-----------------------------
-
-    public void statusChanged(ItemState state, int previousStatus) {
-        if (state.getStatus() == ItemState.STATUS_REMOVED ||
-                state.getStatus() == ItemState.STATUS_STALE_DESTROYED) {
-            recentlyUsed.remove(state);
-            if (state.isNode()) {
-                NodeState nodeState = (NodeState) state;
-                if (nodeState.getUUID() != null) {
-                    uuid2NodeState.remove(nodeState.getUUID());
-                }
-            }
-        }
-    }
-
-    public void stateCreated(ItemState created) {
-    }
-
-    public void stateModified(ItemState modified) {
-    }
-
-    public void stateDestroyed(ItemState destroyed) {
-    }
-
-    public void stateDiscarded(ItemState discarded) {
-    }
-
+     * @return the item state factory of this <code>ItemStateManager</code>.
+     */
+    protected final ItemStateFactory getItemStateFactory() {
+        return isf;
+    }
+
+    /**
-        NodeState nodeState = root;
+        NodeState nodeState = getRootState();
-                nodeState.addListener(this);
+                nodeState.addListener(lifeCycleListener);
-            state = root;
+            try {
+                state = getRootState();
+            } catch (ItemStateException e) {
+                log.warn("unable to get root node state:" + e.getMessage());
+                return null;
+            }
+
+    //------------------------< ItemStateListener >-----------------------------
+
+    private class ISLifeCycleListener implements ItemStateLifeCycleListener {
+
+        public void statusChanged(ItemState state, int previousStatus) {
+            if (state.getStatus() == ItemState.STATUS_REMOVED ||
+                    state.getStatus() == ItemState.STATUS_STALE_DESTROYED) {
+                recentlyUsed.remove(state);
+                if (state.isNode()) {
+                    NodeState nodeState = (NodeState) state;
+                    if (nodeState.getUUID() != null) {
+                        uuid2NodeState.remove(nodeState.getUUID());
+                    }
+                }
+            }
+        }
+
+        public void stateCreated(ItemState created) {
+        }
+
+        public void stateModified(ItemState modified) {
+        }
+
+        public void stateDestroyed(ItemState destroyed) {
+        }
+
+        public void stateDiscarded(ItemState discarded) {
+        }
+    }
