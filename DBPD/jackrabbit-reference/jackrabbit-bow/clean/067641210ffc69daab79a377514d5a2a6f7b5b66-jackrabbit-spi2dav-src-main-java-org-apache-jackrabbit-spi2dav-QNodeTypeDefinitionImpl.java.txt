JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 3: jackrabbit-spi2dav]

in addition:
- minor improvements in comments, typos
- use foreach loops where possible
- remove redundant casts
- remove unused field in NodeInfoImp
- remove unused method in ReadTest
- add WeakReference test to BatchTest

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915358 13f79535-47bb-0310-9956-ffa450edef68

-    private Set dependencies;
+    private Set<Name> dependencies;
-            List qNames = new ArrayList();
+            List<Name> qNames = new ArrayList<Name>();
-            supertypes = (Name[]) qNames.toArray(new Name[qNames.size()]);
+            supertypes = qNames.toArray(new Name[qNames.size()]);
-            mixin = Boolean.valueOf(ntdElement.getAttribute(ISMIXIN_ATTRIBUTE)).booleanValue();
+            mixin = Boolean.valueOf(ntdElement.getAttribute(ISMIXIN_ATTRIBUTE));
-            orderableChildNodes = Boolean.valueOf(ntdElement.getAttribute(HASORDERABLECHILDNODES_ATTRIBUTE)).booleanValue();
+            orderableChildNodes = Boolean.valueOf(ntdElement.getAttribute(HASORDERABLECHILDNODES_ATTRIBUTE));
-            isAbstract = Boolean.valueOf(ntdElement.getAttribute(ISABSTRACT_ATTRIBUTE)).booleanValue();
+            isAbstract = Boolean.valueOf(ntdElement.getAttribute(ISABSTRACT_ATTRIBUTE));
-            isQueryable = Boolean.valueOf(ntdElement.getAttribute(ISQUERYABLE_ATTRIBUTE)).booleanValue();
+            isQueryable = Boolean.valueOf(ntdElement.getAttribute(ISQUERYABLE_ATTRIBUTE));
-        List itemDefs = new ArrayList();
+        List<QNodeDefinition> nds = new ArrayList<QNodeDefinition>();
-            itemDefs.add(new QNodeDefinitionImpl(name, it.nextElement(), resolver));
+            nds.add(new QNodeDefinitionImpl(name, it.nextElement(), resolver));
-        nodeDefs = (QNodeDefinition[]) itemDefs.toArray(new QNodeDefinition[itemDefs.size()]);
+        nodeDefs = nds.toArray(new QNodeDefinition[nds.size()]);
-        itemDefs = new ArrayList();
+        List<QPropertyDefinition> pds = new ArrayList<QPropertyDefinition>();
-            itemDefs.add(new QPropertyDefinitionImpl(name, it.nextElement(), resolver, qValueFactory));
+            pds.add(new QPropertyDefinitionImpl(name, it.nextElement(), resolver, qValueFactory));
-        propDefs = (QPropertyDefinition[]) itemDefs.toArray(new QPropertyDefinition[itemDefs.size()]);
+        propDefs = pds.toArray(new QPropertyDefinition[pds.size()]);
-    public Collection getDependencies() {
+    public Collection<Name> getDependencies() {
-            dependencies = new HashSet();
+            dependencies = new HashSet<Name>();
-            for (int i = 0; i < supertypes.length; i++) {
-                dependencies.add(supertypes[i]);
+            for (Name supertype : supertypes) {
+                dependencies.add(supertype);
-            for (int i = 0; i < nodeDefs.length; i++) {
+            for (QNodeDefinition nodeDef : nodeDefs) {
-                Name ntName = nodeDefs[i].getDefaultPrimaryType();
+                Name ntName = nodeDef.getDefaultPrimaryType();
-                Name[] ntNames = nodeDefs[i].getRequiredPrimaryTypes();
-                for (int j = 0; j < ntNames.length; j++) {
-                    if (ntNames[j] != null && !name.equals(ntNames[j])) {
-                        dependencies.add(ntNames[j]);
+                for (Name rpt : nodeDef.getRequiredPrimaryTypes()) {
+                    if (rpt != null && !name.equals(rpt)) {
+                        dependencies.add(rpt);
-            for (int i = 0; i < propDefs.length; i++) {
+            for (QPropertyDefinition propDef : propDefs) {
-                if (propDefs[i].getRequiredType() == PropertyType.REFERENCE
-                        || propDefs[i].getRequiredType() == PropertyType.WEAKREFERENCE) {
-                    QValueConstraint[] ca = propDefs[i].getValueConstraints();
+                if (propDef.getRequiredType() == PropertyType.REFERENCE
+                        || propDef.getRequiredType() == PropertyType.WEAKREFERENCE) {
+                    QValueConstraint[] ca = propDef.getValueConstraints();
-                        for (int j = 0; j < ca.length; j++) {
+                        for (QValueConstraint vc : ca) {
-                            Name ntName = NameFactoryImpl.getInstance().create(ca[j].getString());
+                            Name ntName = NameFactoryImpl.getInstance().create(vc.getString());
+    @Override
+    @Override
