reworked transaction support, contributed by dominique

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151380 13f79535-47bb-0310-9956-ffa450edef68

-        if (!refs.getTargetId().equals(NodeId.valueOf(refsElement.getAttributeValue(TARGETID_ATTRIBUTE)))) {
+        if (!refs.getTargetId().equals(NodeReferencesId.valueOf(refsElement.getAttributeValue(TARGETID_ATTRIBUTE)))) {
-    public synchronized NodeState load(String uuid)
+    public synchronized NodeState load(NodeId id)
-        String nodeFilePath = buildNodeFilePath(uuid);
+        String nodeFilePath = buildNodeFilePath(id.getUUID());
-                throw new NoSuchItemStateException(uuid);
+                throw new NoSuchItemStateException(id.toString());
-                NodeState state = createNew(uuid, null, null);
+                NodeState state = createNew(id);
-        String msg = "failed to read node state: " + uuid;
+        String msg = "failed to read node state: " + id;
-    public synchronized PropertyState load(QName name, String parentUUID)
+    public synchronized PropertyState load(PropertyId id)
-        String propFilePath = buildPropFilePath(parentUUID, name);
+        String propFilePath = buildPropFilePath(id.getParentUUID(), id.getName());
-                throw new NoSuchItemStateException(parentUUID + "/" + name);
+                throw new NoSuchItemStateException(id.toString());
-                PropertyState state = createNew(name, parentUUID);
+                PropertyState state = createNew(id);
-        String msg = "failed to read property state: " + parentUUID + "/" + name;
+        String msg = "failed to read property state: " + id.toString();
-    public synchronized NodeReferences load(NodeId targetId)
+    public synchronized NodeReferences load(NodeReferencesId id)
-        String uuid = targetId.getUUID();
+        String uuid = id.getUUID();
-                NodeReferences refs = new NodeReferences(targetId);
+                NodeReferences refs = new NodeReferences(id);
-        String uuid = refs.getTargetId().getUUID();
+        String uuid = refs.getUUID();
-        String uuid = refs.getTargetId().getUUID();
+        String uuid = refs.getUUID();
-     * @see PersistenceManager#exists(ItemId id)
+     * @see PersistenceManager#exists(NodeId)
-    public synchronized boolean exists(ItemId id) throws ItemStateException {
+    public synchronized boolean exists(NodeId id) throws ItemStateException {
-            if (id.denotesNode()) {
-                NodeId nodeId = (NodeId) id;
-                String nodeFilePath = buildNodeFilePath(nodeId.getUUID());
-                FileSystemResource nodeFile = new FileSystemResource(itemStateStore, nodeFilePath);
-                return nodeFile.exists();
-            } else {
-                PropertyId propId = (PropertyId) id;
-                String propFilePath = buildPropFilePath(propId.getParentUUID(), propId.getName());
-                FileSystemResource propFile = new FileSystemResource(itemStateStore, propFilePath);
-                return propFile.exists();
-            }
+            NodeId nodeId = (NodeId) id;
+            String nodeFilePath = buildNodeFilePath(nodeId.getUUID());
+            FileSystemResource nodeFile = new FileSystemResource(itemStateStore, nodeFilePath);
+            return nodeFile.exists();
-     * @see PersistenceManager#referencesExist(NodeId targetId)
+     * @see PersistenceManager#exists(PropertyId)
-    public synchronized boolean referencesExist(NodeId targetId) throws ItemStateException {
+    public synchronized boolean exists(PropertyId id) throws ItemStateException {
-            String uuid = targetId.getUUID();
+            String propFilePath = buildPropFilePath(id.getParentUUID(), id.getName());
+            FileSystemResource propFile = new FileSystemResource(itemStateStore, propFilePath);
+            return propFile.exists();
+        } catch (FileSystemException fse) {
+            String msg = "failed to check existence of item state: " + id;
+            log.error(msg, fse);
+            throw new ItemStateException(msg, fse);
+        }
+    }
+
+    /**
+     * @see PersistenceManager#exists(NodeReferencesId id)
+     */
+    public synchronized boolean exists(NodeReferencesId id)
+            throws ItemStateException {
+
+        if (!initialized) {
+            throw new IllegalStateException("not initialized");
+        }
+
+        try {
+            String uuid = id.getUUID();
-            String msg = "failed to check existence of references: " + targetId;
+            String msg = "failed to check existence of references: " + id;
