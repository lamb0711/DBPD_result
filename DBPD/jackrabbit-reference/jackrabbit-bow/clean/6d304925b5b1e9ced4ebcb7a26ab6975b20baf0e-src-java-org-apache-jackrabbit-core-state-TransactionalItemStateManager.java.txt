Transaction patch submitted by Dominique.
Moved test classes out of api.xa package because the UserTransactionImpl class uses the implementation specifc XASessionImpl class.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155314 13f79535-47bb-0310-9956-ffa450edef68

-public class TransactionalItemStateManager extends LocalItemStateManager
-        implements TransactionListener {
+public class TransactionalItemStateManager extends LocalItemStateManager {
-     * Currently associated transaction
+     * Current transactional change log
-    private transient TransactionContext tx;
-
-    /**
-     * Current change log
-     */
-    private transient ChangeLog changeLog;
+    private transient ChangeLog txLog;
+        txLog = null;
+
-            changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-            if (changeLog == null) {
-                changeLog = new ChangeLog();
-                tx.setAttribute(ATTRIBUTE_CHANGE_LOG, changeLog);
-                tx.addListener(this);
+            txLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
+            if (txLog == null) {
+                txLog = new ChangeLog();
+                tx.setAttribute(ATTRIBUTE_CHANGE_LOG, txLog);
-        this.tx = tx;
+    }
+
+    /**
+     * Commit changes made within a transaction
+     * @param tx transaction context
+     * @throws TransactionException if an error occurs
+     */
+    public void commit(TransactionContext tx) throws TransactionException {
+        ChangeLog changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
+        if (changeLog != null) {
+            try {
+                super.update(changeLog);
+            } catch (ItemStateException e) {
+                changeLog.undo(sharedStateMgr);
+                throw new TransactionException("Unable to end update.", e);
+            }
+            changeLog.reset();
+            tx.notifyCommitted();
+        }
+    }
+
+    /**
+     * Rollback changes made within a transaction
+     * @param tx transaction context
+     */
+    public void rollback(TransactionContext tx) {
+        ChangeLog changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
+        if (changeLog != null) {
+            changeLog.undo(sharedStateMgr);
+        }
+        tx.notifyRolledBack();
-        if (tx != null) {
+        if (txLog != null) {
-            ItemState state = changeLog.get(id);
+            ItemState state = txLog.get(id);
-        if (tx != null) {
+        if (txLog != null) {
-                ItemState state = changeLog.get(id);
+                ItemState state = txLog.get(id);
-        if (tx != null) {
+        if (txLog != null) {
-            NodeReferences refs = changeLog.get(id);
+            NodeReferences refs = txLog.get(id);
-        if (tx != null) {
-            this.changeLog.merge(changeLog);
+        if (txLog != null) {
+            txLog.merge(changeLog);
-
-
-    //--------------------------------------------------< TransactionListener >
-
-    /**
-     * @see TransactionListener#transactionCommitted
-     */
-    public void transactionCommitted(TransactionContext tx)
-            throws TransactionException {
-
-        ChangeLog changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-        if (changeLog != null) {
-            try {
-                super.update(changeLog);
-                changeLog.reset();
-            } catch (ItemStateException e) {
-                throw new TransactionException("Unable to end update.", e);
-            }
-        }
-    }
-
-    /**
-     * @see TransactionListener#transactionRolledBack
-     */
-    public void transactionRolledBack(TransactionContext tx) {
-        ChangeLog changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-        if (changeLog != null) {
-            changeLog.undo(sharedStateMgr);
-        }
-    }
