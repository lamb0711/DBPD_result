JCR-2120: java.lang.Iterable support for RangeIterators

Use a NodeIterable adapter on the result of the NodeIterator return value. This way potential RepositoryExceptions are thrown directly and don't need to be encapsulated in RuntimeExceptions. And the code is cleaner!

The only downside is that the returned Iterable always returns the same Iterator from the iterator() method, but that "feature" has been documented in the NodeIterable javadoc.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776681 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NodeIterator;
+import org.apache.jackrabbit.commons.iterator.NodeIterable;
+
-     * Returns the nodes in the shared set of the given node as an
-     * {@link Iterable} for use in a Java 5 for-each loop. The return value
-     * encapsulates the {@link Node#getSharedSet()} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getSharedSet()} on the given node and returns
+     * the resulting {@link NodeIterator} as an {@link Iterable<Node>} instance
+     * for use in a Java 5 for-each loop.
+     * @see NodeIterable
+     * @throws RepositoryException if the {@link Node#getSharedSet()} call fails
-    public static Iterable<Node> getSharedSet(final Node node) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getSharedSet();
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getSharedSet(Node node)
+            throws RepositoryException {
+        return new NodeIterable(node.getSharedSet());
-     * Returns the child nodes of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getNodes()} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getNodes()} on the given node and returns the
+     * resulting {@link NodeIterator} as an {@link Iterable<Node>} instance
+     * for use in a Java 5 for-each loop.
+     * @see NodeIterable
+     * @throws RepositoryException if the {@link Node#getNodes()} call fails
-    public static Iterable<Node> getChildNodes(final Node node) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getNodes();
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getChildNodes(Node node)
+            throws RepositoryException {
+        return new NodeIterable(node.getNodes());
-     * Returns matching child nodes of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getNodes(String)} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getNodes(String)} on the given node with the given
+     * name pattern and returns the resulting {@link NodeIterator} as an
+     * {@link Iterable<Node>} instance for use in a Java 5 for-each loop.
+     * @see NodeIterable
+     * @throws RepositoryException
+     *         if the {@link Node#getNodes(String)} call fails
-    public static Iterable<Node> getChildNodes(
-            final Node node, final String pattern) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getNodes(pattern);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getChildNodes(Node node, String pattern)
+            throws RepositoryException {
+        return new NodeIterable(node.getNodes(pattern));
-     * Returns matching child nodes of the given node as an {@link Iterable}
-     * for use in a Java 5 for-each loop. The return value encapsulates
-     * the {@link Node#getNodes(String[])} method call. Potential
-     * {@link RepositoryException}s are converted to {@link RuntimeException}s.
+     * Calls {@link Node#getNodes(String[])} on the given node with the given
+     * name globs and returns the resulting {@link NodeIterator} as an
+     * {@link Iterable<Node>} instance for use in a Java 5 for-each loop.
+     * @see NodeIterable
-     * @param globs node name globs
+     * @param pattern node name pattern
+     * @throws RepositoryException
+     *         if the {@link Node#getNodes(String[])} call fails
-    public static Iterable<Node> getChildNodes(
-            final Node node, final String[] globs) {
-        return new Iterable<Node>() {
-            @SuppressWarnings("unchecked")
-            public Iterator<Node> iterator() {
-                try {
-                    return node.getNodes(globs);
-                } catch (RepositoryException e) {
-                    throw new RuntimeException(
-                            "Unable to access child nodes of " + node, e);
-                }
-            }
-        };
+    public static Iterable<Node> getChildNodes(Node node, String[] globs)
+            throws RepositoryException {
+        return new NodeIterable(node.getNodes(globs));
