simplify by using foreach

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915835 13f79535-47bb-0310-9956-ffa450edef68

-        for (int i = 0; i < ntNames.length; i++) {
-            list.add(getNodeType(ntNames[i]));
+        for (Name ntName : ntNames) {
+            list.add(getNodeType(ntName));
-        for (int i = 0; i < ntNames.length; i++) {
-            NodeType nt = getNodeType(ntNames[i]);
+        for (Name ntName : ntNames) {
+            NodeType nt = getNodeType(ntName);
-        for (int i = 0; i < ntNames.length; i++) {
-            NodeType nt = getNodeType(ntNames[i]);
+        for (Name ntName : ntNames) {
+            NodeType nt = getNodeType(ntName);
-        for (Iterator<QNodeTypeDefinition> it = defs.iterator(); it.hasNext();) {
-            nts.add(getNodeType(it.next().getName()));
+        for (QNodeTypeDefinition def : defs) {
+            nts.add(getNodeType(def.getName()));
-                NodeType[] supertypes = nt.getSupertypes();
-                for (int i = 0; i < supertypes.length; i++) {
-                    ps.println("\t\t" + supertypes[i].getName());
+                for (NodeType supertype : nt.getSupertypes()) {
+                    ps.println("\t\t" + supertype.getName());
-                PropertyDefinition[] pd = nt.getPropertyDefinitions();
-                for (int i = 0; i < pd.length; i++) {
+                for (PropertyDefinition aPd : nt.getPropertyDefinitions()) {
-                    ps.println(" (declared in " + pd[i].getDeclaringNodeType().getName() + ") ");
-                    ps.println("\t\tName\t\t" + (pd[i].getName()));
-                    String type = pd[i].getRequiredType() == 0 ? "null" : PropertyType.nameFromValue(pd[i].getRequiredType());
+                    ps.println(" (declared in " + aPd.getDeclaringNodeType().getName() + ") ");
+                    ps.println("\t\tName\t\t" + (aPd.getName()));
+                    String type = aPd.getRequiredType() == 0 ? "null" : PropertyType.nameFromValue(aPd.getRequiredType());
-                    String[] vca = pd[i].getValueConstraints();
+                    String[] vca = aPd.getValueConstraints();
-                        for (int n = 0; n < vca.length; n++) {
+                        for (String aVca : vca) {
-                            constraints.append(vca[n]);
+                            constraints.append(aVca);
-                    Value[] defVals = pd[i].getDefaultValues();
+                    Value[] defVals = aPd.getDefaultValues();
-                        for (int n = 0; n < defVals.length; n++) {
+                        for (Value defVal : defVals) {
-                            defaultValues.append(defVals[n].getString());
+                            defaultValues.append(defVal.getString());
-                    ps.println("\t\tAutoCreated\t" + pd[i].isAutoCreated());
-                    ps.println("\t\tMandatory\t" + pd[i].isMandatory());
-                    ps.println("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(pd[i].getOnParentVersion()));
-                    ps.println("\t\tProtected\t" + pd[i].isProtected());
-                    ps.println("\t\tMultiple\t" + pd[i].isMultiple());
+                    ps.println("\t\tAutoCreated\t" + aPd.isAutoCreated());
+                    ps.println("\t\tMandatory\t" + aPd.isMandatory());
+                    ps.println("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(aPd.getOnParentVersion()));
+                    ps.println("\t\tProtected\t" + aPd.isProtected());
+                    ps.println("\t\tMultiple\t" + aPd.isMultiple());
-                NodeDefinition[] nd = nt.getChildNodeDefinitions();
-                for (int i = 0; i < nd.length; i++) {
+                for (NodeDefinition aNd : nt.getChildNodeDefinitions()) {
-                    ps.println(" (declared in " + nd[i].getDeclaringNodeType() + ") ");
-                    ps.println("\t\tName\t\t" + nd[i].getName());
-                    NodeType[] reqPrimaryTypes = nd[i].getRequiredPrimaryTypes();
+                    ps.println(" (declared in " + aNd.getDeclaringNodeType() + ") ");
+                    ps.println("\t\tName\t\t" + aNd.getName());
+                    NodeType[] reqPrimaryTypes = aNd.getRequiredPrimaryTypes();
-                        for (int n = 0; n < reqPrimaryTypes.length; n++) {
-                            ps.print("\t\tRequiredPrimaryType\t" + reqPrimaryTypes[n].getName());
+                        for (NodeType reqPrimaryType : reqPrimaryTypes) {
+                            ps.print("\t\tRequiredPrimaryType\t" + reqPrimaryType.getName());
-                    NodeType defPrimaryType = nd[i].getDefaultPrimaryType();
+                    NodeType defPrimaryType = aNd.getDefaultPrimaryType();
-                    ps.println("\n\t\tAutoCreated\t" + nd[i].isAutoCreated());
-                    ps.println("\t\tMandatory\t" + nd[i].isMandatory());
-                    ps.println("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(nd[i].getOnParentVersion()));
-                    ps.println("\t\tProtected\t" + nd[i].isProtected());
-                    ps.println("\t\tAllowsSameNameSiblings\t" + nd[i].allowsSameNameSiblings());
+                    ps.println("\n\t\tAutoCreated\t" + aNd.isAutoCreated());
+                    ps.println("\t\tMandatory\t" + aNd.isMandatory());
+                    ps.println("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(aNd.getOnParentVersion()));
+                    ps.println("\t\tProtected\t" + aNd.isProtected());
+                    ps.println("\t\tAllowsSameNameSiblings\t" + aNd.allowsSameNameSiblings());
