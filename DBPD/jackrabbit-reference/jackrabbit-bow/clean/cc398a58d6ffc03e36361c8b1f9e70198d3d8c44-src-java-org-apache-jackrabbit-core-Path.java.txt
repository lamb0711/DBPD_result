Path & QName: avoid unneccessary object creation 
SharedItemStateManager: added debug output in store() method

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@178643 13f79535-47bb-0310-9956-ffa450edef68

-        Pattern.compile("(\\.)|"
-                + "(\\.\\.)|"
-                + "(([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?):)?"
-                + "([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?)"
-                + "(\\[([1-9]\\d*)\\])?");
+            Pattern.compile("(\\.)|"
+            + "(\\.\\.)|"
+            + "(([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?):)?"
+            + "([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?)"
+            + "(\\[([1-9]\\d*)\\])?");
-                            throw new MalformedPathException(
-                                    "'" + jcrPath + "' is not a valid path: '"
+                            throw new MalformedPathException("'" + jcrPath + "' is not a valid path: '"
-                        throw new MalformedPathException(
-                                "'" + jcrPath + "' is not a valid path: '"
+                        throw new MalformedPathException("'" + jcrPath + "' is not a valid path: '"
-                throw new MalformedPathException(
-                        "'" + jcrPath + "' is not a valid path: '"
+                throw new MalformedPathException("'" + jcrPath + "' is not a valid path: '"
-            return new Path(
-                    (PathElement[]) list.toArray(new PathElement[list.size()]),
+            return new Path((PathElement[]) list.toArray(new PathElement[list.size()]),
-     * @param resolver
-     * @return
-     * @throws NoPrefixDeclaredException
+     * Returns a string representation of this <code>Path</code> in the
+     * JCR path format.
+     *
+     * @param resolver namespace resolver
+     * @return JCR path
+     * @throws NoPrefixDeclaredException if a namespace can not be resolved
-    public String toJCRPath(NamespaceResolver resolver) throws NoPrefixDeclaredException {
+    public String toJCRPath(NamespaceResolver resolver)
+            throws NoPrefixDeclaredException {
-            sb.append(element.toJCRName(resolver));
+            element.toJCRName(resolver, sb);
-     * <p>
+     * <p/>
-        /** Qualified name of the path element. */
+        /**
+         * Qualified name of the path element.
+         */
-         * @param localName local name
+         * @param localName    local name
-         * @param localName local name
-         * @param index index
+         * @param localName    local name
+         * @param index        index
-         * @param name qualified name
+         * @param name  qualified name
-        public String toJCRName(NamespaceResolver resolver) throws NoPrefixDeclaredException {
+        public String toJCRName(NamespaceResolver resolver)
+                throws NoPrefixDeclaredException {
+            toJCRName(resolver, sb);
+            return sb.toString();
+        }
+
+        /**
+         * Appends the JCR name representation of this path element to the
+         * given string buffer.
+         *
+         * @param resolver namespace resolver
+         * @param buf      string buffer where the JCR name representation
+         *                 should be appended to
+         * @throws NoPrefixDeclaredException if the namespace of the path
+         *                                   element name can not be resolved
+         * @see #toJCRName(NamespaceResolver)
+         */
+        public void toJCRName(NamespaceResolver resolver, StringBuffer buf)
+                throws NoPrefixDeclaredException {
-            sb.append(name.toJCRName(resolver));
+            name.toJCRName(resolver, buf);
-                sb.append('[');
-                sb.append(index);
-                sb.append(']');
+                buf.append('[');
+                buf.append(index);
+                buf.append(']');
-            return sb.toString();
