use virtual workspace file system to persist locks rather than physical file system

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@348201 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.ItemId;
-import org.apache.jackrabbit.core.ItemId;
+import org.apache.jackrabbit.core.fs.FileSystem;
+import org.apache.jackrabbit.core.fs.FileSystemException;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.ItemNotFoundException;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.AccessDeniedException;
-import java.io.File;
-import java.io.FileReader;
-import java.io.FileWriter;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+     * Name of the lock file
+     */
+    private static final String LOCKS_FILE = "locks";
+
+    /**
-    private final File locksFile;
+    private final FileSystemResource locksFile;
+     *
-     * @param locksFile file locks file to use
+     * @param fs      file system for persisting locks
-    public LockManagerImpl(SessionImpl session, File locksFile)
+    public LockManagerImpl(SessionImpl session, FileSystem fs)
-        this.locksFile = locksFile;
+        this.locksFile = new FileSystemResource(fs, FileSystem.SEPARATOR + LOCKS_FILE);
-        if (locksFile.exists()) {
-            try {
+        try {
+            if (locksFile.exists()) {
-            } catch (IOException e) {
-                throw new RepositoryException(
-                        "I/O error while reading locks from '"
-                        + locksFile.getPath() + "'", e);
+        } catch (FileSystemException e) {
+            throw new RepositoryException("I/O error while reading locks from '"
+                    + locksFile.getPath() + "'", e);
-    private void load() throws IOException {
+    private void load() throws FileSystemException {
-            reader = new BufferedReader(new FileReader(locksFile));
+            reader = new BufferedReader(
+                    new InputStreamReader(locksFile.getInputStream()));
+        } catch (IOException e) {
+            throw new FileSystemException("error while reading locks file", e);
+     *
-            writer = new BufferedWriter(new FileWriter(locksFile));
+            writer = new BufferedWriter(
+                    new OutputStreamWriter(locksFile.getOutputStream()));
-        } catch (IOException e) {
+        } catch (FileSystemException fse) {
-                    + locksFile.getPath() + "': " + e.getMessage());
-            log.debug("Root cause: ", e);
+                    + locksFile.getPath() + "': " + fse.getMessage());
+            log.debug("Root cause: ", fse);
+        } catch (IOException ioe) {
+            log.warn("I/O error while saving locks to '"
+                    + locksFile.getPath() + "': " + ioe.getMessage());
+            log.debug("Root cause: ", ioe);
+     *
-     * @throws LockException if the node is already locked
-     * @throws RepositoryException if another error occurs
+     * @throws LockException       if the node is already locked
+     * @throws RepositoryException if another error occurs
-            throws LockException,  RepositoryException {
+            throws LockException, RepositoryException {
+     *
-                NodeImpl node = (NodeImpl) session.getItemManager().getItem(
-                        new NodeId(info.getUUID()));
+                NodeImpl node = (NodeImpl) session.getItemManager().getItem(new NodeId(info.getUUID()));
-                Node lockHolder = (Node) session.getItemManager().getItem(
-                        new NodeId(info.getUUID()));
+                Node lockHolder = (Node) session.getItemManager().getItem(new NodeId(info.getUUID()));
-     *
+     * <p/>
-                   RepositoryException {
+            RepositoryException {
+         *
+         *
+         *
+         *
+         *
+     *
+     *
+     *
