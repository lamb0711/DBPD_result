JCR-2116: JSR 283: Built-In Node Types (OPV changes)
JCR-2058: JSR 283: VersionManager and new versioning methods (slightly different checkin/restore behavior)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@797662 13f79535-47bb-0310-9956-ffa450edef68

-     * checkin modes
-     */
-    private static enum Mode {
-        /**
-         * checkin mode version.
-         */
-        VERSION,
-        /**
-         * checkin mode copy. specifies, that the items are always copied.
-         */
-        COPY,
-
-        /**
-         * mode flag specifies, that the mode should be recursed. otherwise i
-         * will be redetermined by the opv.
-         */
-        COPY_RECURSE
-    }
-
-    /**
-     * the frozen child nodes
-     */
-    private InternalFreeze[] frozenNodes = null;
-
-    /**
-    public synchronized InternalFreeze[] getFrozenChildNodes()
+    public List<ChildNodeEntry> getFrozenChildNodes()
-        if (frozenNodes == null) {
-            try {
-                // maybe add iterator?
-                List<ChildNodeEntry> entries =
-                    node.getState().getChildNodeEntries();
-                frozenNodes = new InternalFreeze[entries.size()];
-                int i = 0;
-                for (ChildNodeEntry entry : entries) {
-                    frozenNodes[i++] = (InternalFreeze) vMgr.getItem(entry.getId());
-                }
-            } catch (RepositoryException e) {
-                throw new VersionException("Unable to retrieve frozen child nodes", e);
-            }
-        }
-        return frozenNodes;
+        return node.getState().getChildNodeEntries();
-    public boolean hasFrozenHistory(NodeId id) {
-        try {
-            InternalFreeze[] frozen = getFrozenChildNodes();
-            for (InternalFreeze aFrozen : frozen) {
-                if (aFrozen instanceof InternalFrozenVersionHistory
-                        && ((InternalFrozenVersionHistory) aFrozen)
-                        .getVersionHistoryId().equals(id)) {
-                    return true;
-                }
-            }
-        } catch (RepositoryException e) {
-            // ignore
-        }
-        return false;
+    public boolean hasFrozenChildNode(Name name, int idx) {
+        return node.getState().hasChildNodeEntry(name, idx);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public InternalFreeze getFrozenChildNode(Name name, int idx) 
+            throws RepositoryException {
+        ChildNodeEntry e = node.getState().getChildNodeEntry(name, idx);
+        return e == null
+                ? null
+                : (InternalFreeze) vMgr.getItem(e.getId());
-            return checkin(parent, name, src, Mode.VERSION);
+            return checkin(parent, name, src, false);
-     * @param mode checkin mode
+     * @param forceCopy if <code>true</code> the OPV is ignored and a COPY is performed
-                                       NodeStateEx src, Mode mode)
+                                       NodeStateEx src, boolean forceCopy)
-            if (mode != Mode.VERSION) {
+            if (forceCopy) {
-                throw new VersionException("Checkin aborted due to OPV in " + propName);
+                throw new VersionException("Checkin aborted due to OPV abort in " + propName);
+        boolean isFull = src.getEffectiveNodeType().includesNodeType(NameConstants.MIX_VERSIONABLE);
-            if (mode == Mode.COPY_RECURSE) {
+            if (forceCopy) {
-                if (child.getEffectiveNodeType().includesNodeType(NameConstants.MIX_VERSIONABLE)) {
+                if (isFull && child.getEffectiveNodeType().includesNodeType(NameConstants.MIX_VERSIONABLE)) {
-                    // else copy but do not recurse
-                    checkin(node, child.getName(), child, Mode.COPY);
+                    // else copy
+                    checkin(node, child.getName(), child, true);
-                checkin(node, child.getName(), child, Mode.COPY_RECURSE);
+                checkin(node, child.getName(), child, true);
