more eol-style fixes


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47405 13f79535-47bb-0310-9956-ffa450edef68

-/* Generated By:JJTree&JavaCC: Do not edit this line. JCRQLParserTokenManager.java */
-/*
- * Copyright 2004 The Apache Software Foundation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.jackrabbit.core.search.jcrql;
-import org.apache.jackrabbit.core.search.Constants;
-
-public class JCRQLParserTokenManager implements JCRQLParserConstants
-{
-  public  java.io.PrintStream debugStream = System.out;
-  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
-private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
-{
-   switch (pos)
-   {
-      case 0:
-         if ((active0 & 0x134bd0L) != 0L)
-         {
-            jjmatchedKind = 49;
-            return 48;
-         }
-         if ((active0 & 0x20b420L) != 0L)
-         {
-            jjmatchedKind = 49;
-            return 6;
-         }
-         return -1;
-      case 1:
-         if ((active0 & 0x12d9f0L) != 0L)
-         {
-            if (jjmatchedPos != 1)
-            {
-               jjmatchedKind = 49;
-               jjmatchedPos = 1;
-            }
-            return 48;
-         }
-         if ((active0 & 0x10600L) != 0L)
-            return 48;
-         if ((active0 & 0x202000L) != 0L)
-         {
-            if (jjmatchedPos != 1)
-            {
-               jjmatchedKind = 49;
-               jjmatchedPos = 1;
-            }
-            return 7;
-         }
-         return -1;
-      case 2:
-         if ((active0 & 0x28000L) != 0L)
-            return 48;
-         if ((active0 & 0x307bf0L) != 0L)
-         {
-            jjmatchedKind = 49;
-            jjmatchedPos = 2;
-            return 48;
-         }
-         return -1;
-      case 3:
-         if ((active0 & 0x104020L) != 0L)
-            return 48;
-         if ((active0 & 0x203bd0L) != 0L)
-         {
-            jjmatchedKind = 49;
-            jjmatchedPos = 3;
-            return 48;
-         }
-         return -1;
-      case 4:
-         if ((active0 & 0x3150L) != 0L)
-         {
-            jjmatchedKind = 49;
-            jjmatchedPos = 4;
-            return 48;
-         }
-         if ((active0 & 0x200a80L) != 0L)
-            return 48;
-         return -1;
-      case 5:
-         if ((active0 & 0x10L) != 0L)
-            return 48;
-         if ((active0 & 0x3140L) != 0L)
-         {
-            jjmatchedKind = 49;
-            jjmatchedPos = 5;
-            return 48;
-         }
-         return -1;
-      case 6:
-         if ((active0 & 0x3140L) != 0L)
-         {
-            jjmatchedKind = 49;
-            jjmatchedPos = 6;
-            return 48;
-         }
-         return -1;
-      case 7:
-         if ((active0 & 0x40L) != 0L)
-            return 48;
-         if ((active0 & 0x3100L) != 0L)
-         {
-            jjmatchedKind = 49;
-            jjmatchedPos = 7;
-            return 48;
-         }
-         return -1;
-      case 8:
-         if ((active0 & 0x1000L) != 0L)
-            return 48;
-         if ((active0 & 0x2100L) != 0L)
-         {
-            jjmatchedKind = 49;
-            jjmatchedPos = 8;
-            return 48;
-         }
-         return -1;
-      default :
-         return -1;
-   }
-}
-private final int jjStartNfa_0(int pos, long active0, long active1)
-{
-   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
-}
-private final int jjStopAtPos(int pos, int kind)
-{
-   jjmatchedKind = kind;
-   jjmatchedPos = pos;
-   return pos + 1;
-}
-private final int jjStartNfaWithStates_0(int pos, int kind, int state)
-{
-   jjmatchedKind = kind;
-   jjmatchedPos = pos;
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) { return pos + 1; }
-   return jjMoveNfa_0(state, pos + 1);
-}
-private final int jjMoveStringLiteralDfa0_0()
-{
-   switch(curChar)
-   {
-      case 40:
-         return jjStopAtPos(0, 65);
-      case 41:
-         return jjStopAtPos(0, 66);
-      case 42:
-         return jjStopAtPos(0, 57);
-      case 44:
-         return jjStopAtPos(0, 58);
-      case 47:
-         jjmatchedKind = 62;
-         return jjMoveStringLiteralDfa1_0(0x3000000000000000L);
-      case 58:
-         return jjStopAtPos(0, 59);
-      case 60:
-         jjmatchedKind = 45;
-         return jjMoveStringLiteralDfa1_0(0x1400000000000L);
-      case 61:
-         return jjStopAtPos(0, 43);
-      case 62:
-         jjmatchedKind = 44;
-         return jjMoveStringLiteralDfa1_0(0x800000000000L);
-      case 65:
-         return jjMoveStringLiteralDfa1_0(0x9000L);
-      case 66:
-         return jjMoveStringLiteralDfa1_0(0x400L);
-      case 68:
-         return jjMoveStringLiteralDfa1_0(0x2000L);
-      case 70:
-         return jjMoveStringLiteralDfa1_0(0x20L);
-      case 76:
-         return jjMoveStringLiteralDfa1_0(0x4040L);
-      case 78:
-         return jjMoveStringLiteralDfa1_0(0x20000L);
-      case 79:
-         return jjMoveStringLiteralDfa1_0(0x10200L);
-      case 83:
-         return jjMoveStringLiteralDfa1_0(0x810L);
-      case 84:
-         return jjMoveStringLiteralDfa1_0(0x100L);
-      case 87:
-         return jjMoveStringLiteralDfa1_0(0x80L);
-      case 91:
-         return jjStopAtPos(0, 63);
-      case 93:
-         return jjStopAtPos(0, 64);
-      case 102:
-         return jjMoveStringLiteralDfa1_0(0x200000L);
-      case 116:
-         return jjMoveStringLiteralDfa1_0(0x100000L);
-      default :
-         return jjMoveNfa_0(0, 0);
-   }
-}
-private final int jjMoveStringLiteralDfa1_0(long active0)
-{
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(0, active0, 0L);
-      return 1;
-   }
-   switch(curChar)
-   {
-      case 42:
-         if ((active0 & 0x1000000000000000L) != 0L)
-            return jjStopAtPos(1, 60);
-         break;
-      case 47:
-         if ((active0 & 0x2000000000000000L) != 0L)
-            return jjStopAtPos(1, 61);
-         break;
-      case 61:
-         if ((active0 & 0x400000000000L) != 0L)
-            return jjStopAtPos(1, 46);
-         else if ((active0 & 0x800000000000L) != 0L)
-            return jjStopAtPos(1, 47);
-         break;
-      case 62:
-         if ((active0 & 0x1000000000000L) != 0L)
-            return jjStopAtPos(1, 48);
-         break;
-      case 67:
-         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
-      case 69:
-         return jjMoveStringLiteralDfa2_0(active0, 0x2110L);
-      case 72:
-         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
-      case 73:
-         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
-      case 78:
-         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
-      case 79:
-         return jjMoveStringLiteralDfa2_0(active0, 0x20040L);
-      case 82:
-         if ((active0 & 0x10000L) != 0L)
-         {
-            jjmatchedKind = 16;
-            jjmatchedPos = 1;
-         }
-         return jjMoveStringLiteralDfa2_0(active0, 0x220L);
-      case 83:
-         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
-      case 89:
-         if ((active0 & 0x400L) != 0L)
-            return jjStartNfaWithStates_0(1, 10, 48);
-         break;
-      case 97:
-         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
-      case 114:
-         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
-      default :
-         break;
-   }
-   return jjStartNfa_0(0, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(0, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(1, active0, 0L);
-      return 2;
-   }
-   switch(curChar)
-   {
-      case 67:
-         return jjMoveStringLiteralDfa3_0(active0, 0x1040L);
-      case 68:
-         if ((active0 & 0x8000L) != 0L)
-            return jjStartNfaWithStates_0(2, 15, 48);
-         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
-      case 69:
-         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
-      case 75:
-         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
-      case 76:
-         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
-      case 79:
-         return jjMoveStringLiteralDfa3_0(active0, 0x820L);
-      case 83:
-         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
-      case 84:
-         if ((active0 & 0x20000L) != 0L)
-            return jjStartNfaWithStates_0(2, 17, 48);
-         break;
-      case 88:
-         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
-      case 108:
-         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
-      case 117:
-         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
-      default :
-         break;
-   }
-   return jjStartNfa_0(1, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(1, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(2, active0, 0L);
-      return 3;
-   }
-   switch(curChar)
-   {
-      case 65:
-         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
-      case 67:
-         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
-      case 69:
-         if ((active0 & 0x4000L) != 0L)
-            return jjStartNfaWithStates_0(3, 14, 48);
-         return jjMoveStringLiteralDfa4_0(active0, 0x1210L);
-      case 77:
-         if ((active0 & 0x20L) != 0L)
-            return jjStartNfaWithStates_0(3, 5, 48);
-         break;
-      case 82:
-         return jjMoveStringLiteralDfa4_0(active0, 0x880L);
-      case 84:
-         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
-      case 101:
-         if ((active0 & 0x100000L) != 0L)
-            return jjStartNfaWithStates_0(3, 20, 48);
-         break;
-      case 115:
-         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
-      default :
-         break;
-   }
-   return jjStartNfa_0(2, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(2, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(3, active0, 0L);
-      return 4;
-   }
-   switch(curChar)
-   {
-      case 67:
-         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
-      case 69:
-         if ((active0 & 0x80L) != 0L)
-            return jjStartNfaWithStates_0(4, 7, 48);
-         else if ((active0 & 0x800L) != 0L)
-            return jjStartNfaWithStates_0(4, 11, 48);
-         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
-      case 78:
-         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
-      case 82:
-         if ((active0 & 0x200L) != 0L)
-            return jjStartNfaWithStates_0(4, 9, 48);
-         break;
-      case 83:
-         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
-      case 84:
-         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
-      case 101:
-         if ((active0 & 0x200000L) != 0L)
-            return jjStartNfaWithStates_0(4, 21, 48);
-         break;
-      default :
-         break;
-   }
-   return jjStartNfa_0(3, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(3, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(4, active0, 0L);
-      return 5;
-   }
-   switch(curChar)
-   {
-      case 68:
-         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
-      case 69:
-         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
-      case 73:
-         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
-      case 78:
-         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
-      case 84:
-         if ((active0 & 0x10L) != 0L)
-            return jjStartNfaWithStates_0(5, 4, 48);
-         break;
-      default :
-         break;
-   }
-   return jjStartNfa_0(4, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(4, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(5, active0, 0L);
-      return 6;
-   }
-   switch(curChar)
-   {
-      case 65:
-         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
-      case 68:
-         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
-      case 73:
-         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
-      case 79:
-         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
-      default :
-         break;
-   }
-   return jjStartNfa_0(5, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(5, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(6, active0, 0L);
-      return 7;
-   }
-   switch(curChar)
-   {
-      case 73:
-         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
-      case 78:
-         if ((active0 & 0x40L) != 0L)
-            return jjStartNfaWithStates_0(7, 6, 48);
-         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
-      case 82:
-         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
-      default :
-         break;
-   }
-   return jjStartNfa_0(6, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(6, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(7, active0, 0L);
-      return 8;
-   }
-   switch(curChar)
-   {
-      case 67:
-         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
-      case 71:
-         if ((active0 & 0x1000L) != 0L)
-            return jjStartNfaWithStates_0(8, 12, 48);
-         break;
-      case 78:
-         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
-      default :
-         break;
-   }
-   return jjStartNfa_0(7, active0, 0L);
-}
-private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
-{
-   if (((active0 &= old0)) == 0L)
-      return jjStartNfa_0(7, old0, 0L);
-   try { curChar = input_stream.readChar(); }
-   catch(java.io.IOException e) {
-      jjStopStringLiteralDfa_0(8, active0, 0L);
-      return 9;
-   }
-   switch(curChar)
-   {
-      case 71:
-         if ((active0 & 0x2000L) != 0L)
-            return jjStartNfaWithStates_0(9, 13, 48);
-         break;
-      case 72:
-         if ((active0 & 0x100L) != 0L)
-            return jjStartNfaWithStates_0(9, 8, 48);
-         break;
-      default :
-         break;
-   }
-   return jjStartNfa_0(8, active0, 0L);
-}
-private final void jjCheckNAdd(int state)
-{
-   if (jjrounds[state] != jjround)
-   {
-      jjstateSet[jjnewStateCnt++] = state;
-      jjrounds[state] = jjround;
-   }
-}
-private final void jjAddStates(int start, int end)
-{
-   do {
-      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
-   } while (start++ != end);
-}
-private final void jjCheckNAddTwoStates(int state1, int state2)
-{
-   jjCheckNAdd(state1);
-   jjCheckNAdd(state2);
-}
-private final void jjCheckNAddStates(int start, int end)
-{
-   do {
-      jjCheckNAdd(jjnextStates[start]);
-   } while (start++ != end);
-}
-private final void jjCheckNAddStates(int start)
-{
-   jjCheckNAdd(jjnextStates[start]);
-   jjCheckNAdd(jjnextStates[start + 1]);
-}
-static final long[] jjbitVec0 = {
-   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
-};
-static final long[] jjbitVec2 = {
-   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
-};
-static final long[] jjbitVec3 = {
-   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
-};
-static final long[] jjbitVec4 = {
-   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
-};
-static final long[] jjbitVec5 = {
-   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
-};
-static final long[] jjbitVec6 = {
-   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
-};
-static final long[] jjbitVec7 = {
-   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
-};
-static final long[] jjbitVec8 = {
-   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
-};
-static final long[] jjbitVec9 = {
-   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
-};
-static final long[] jjbitVec10 = {
-   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
-};
-static final long[] jjbitVec11 = {
-   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
-};
-static final long[] jjbitVec12 = {
-   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
-};
-static final long[] jjbitVec13 = {
-   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
-};
-static final long[] jjbitVec14 = {
-   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
-};
-static final long[] jjbitVec15 = {
-   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
-};
-static final long[] jjbitVec16 = {
-   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
-};
-static final long[] jjbitVec17 = {
-   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
-};
-static final long[] jjbitVec18 = {
-   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
-};
-static final long[] jjbitVec19 = {
-   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
-};
-static final long[] jjbitVec20 = {
-   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
-};
-static final long[] jjbitVec21 = {
-   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
-};
-static final long[] jjbitVec22 = {
-   0x4c4000000000L, 0x0L, 0x7L, 0x0L
-};
-static final long[] jjbitVec23 = {
-   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
-};
-static final long[] jjbitVec24 = {
-   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
-};
-static final long[] jjbitVec25 = {
-   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
-};
-static final long[] jjbitVec26 = {
-   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
-};
-static final long[] jjbitVec27 = {
-   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
-};
-static final long[] jjbitVec28 = {
-   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
-};
-static final long[] jjbitVec29 = {
-   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
-};
-static final long[] jjbitVec30 = {
-   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
-};
-static final long[] jjbitVec31 = {
-   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
-};
-static final long[] jjbitVec32 = {
-   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
-};
-static final long[] jjbitVec33 = {
-   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
-};
-static final long[] jjbitVec34 = {
-   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
-};
-static final long[] jjbitVec35 = {
-   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
-};
-static final long[] jjbitVec36 = {
-   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
-};
-static final long[] jjbitVec37 = {
-   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
-};
-static final long[] jjbitVec38 = {
-   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
-};
-static final long[] jjbitVec39 = {
-   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
-};
-static final long[] jjbitVec40 = {
-   0x0L, 0x0L, 0x0L, 0x21fff0000L
-};
-static final long[] jjbitVec41 = {
-   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
-};
-private final int jjMoveNfa_0(int startState, int curPos)
-{
-   int[] nextStates;
-   int startsAt = 0;
-   jjnewStateCnt = 98;
-   int i = 1;
-   jjstateSet[0] = startState;
-   int j, kind = 0x7fffffff;
-   for (;;)
-   {
-      if (++jjround == 0x7fffffff)
-         ReInitRounds();
-      if (curChar < 64)
-      {
-         long l = 1L << curChar;
-         MatchLoop: do
-         {
-            switch(jjstateSet[--i])
-            {
-               case 0:
-                  if ((0x3ff000000000000L & l) != 0L)
-                  {
-                     if (kind > 19)
-                        kind = 19;
-                     jjCheckNAddStates(0, 11);
-                  }
-                  else if (curChar == 45)
-                     jjCheckNAddStates(12, 16);
-                  else if (curChar == 46)
-                     jjCheckNAdd(42);
-                  else if (curChar == 34)
-                     jjCheckNAddStates(17, 19);
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 6;
-                  break;
-               case 7:
-                  if ((0x3ff600000000000L & l) != 0L)
-                  {
-                     if (kind > 49)
-                        kind = 49;
-                     jjCheckNAdd(48);
-                  }
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 8;
-                  break;
-               case 6:
-                  if ((0x3ff600000000000L & l) != 0L)
-                  {
-                     if (kind > 49)
-                        kind = 49;
-                     jjCheckNAdd(48);
-                  }
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 7;
-                  break;
-               case 1:
-                  if ((0xfffffffbffffffffL & l) != 0L)
-                     jjCheckNAddStates(17, 19);
-                  break;
-               case 3:
-                  if ((0x8000042400000000L & l) != 0L)
-                     jjCheckNAddStates(17, 19);
-                  break;
-               case 4:
-                  if (curChar == 34 && kind > 18)
-                     kind = 18;
-                  break;
-               case 5:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 6;
-                  break;
-               case 8:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 9;
-                  break;
-               case 9:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 10;
-                  break;
-               case 10:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 11;
-                  break;
-               case 11:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 12;
-                  break;
-               case 12:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 13;
-                  break;
-               case 13:
-                  if (curChar == 45)
-                     jjstateSet[jjnewStateCnt++] = 14;
-                  break;
-               case 14:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 15;
-                  break;
-               case 15:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 16;
-                  break;
-               case 16:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 17;
-                  break;
-               case 17:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 18;
-                  break;
-               case 18:
-                  if (curChar == 45)
-                     jjstateSet[jjnewStateCnt++] = 19;
-                  break;
-               case 19:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 20;
-                  break;
-               case 20:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 21;
-                  break;
-               case 21:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 22;
-                  break;
-               case 22:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 23;
-                  break;
-               case 23:
-                  if (curChar == 45)
-                     jjstateSet[jjnewStateCnt++] = 24;
-                  break;
-               case 24:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 25;
-                  break;
-               case 25:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 26;
-                  break;
-               case 26:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 27;
-                  break;
-               case 27:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 28;
-                  break;
-               case 28:
-                  if (curChar == 45)
-                     jjstateSet[jjnewStateCnt++] = 29;
-                  break;
-               case 29:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 30;
-                  break;
-               case 30:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 31;
-                  break;
-               case 31:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 32;
-                  break;
-               case 32:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 33;
-                  break;
-               case 33:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 34;
-                  break;
-               case 34:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 35;
-                  break;
-               case 35:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 36;
-                  break;
-               case 36:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 37;
-                  break;
-               case 37:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 38;
-                  break;
-               case 38:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 39;
-                  break;
-               case 39:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 40;
-                  break;
-               case 40:
-                  if ((0x3ff000000000000L & l) != 0L && kind > 22)
-                     kind = 22;
-                  break;
-               case 41:
-                  if (curChar == 46)
-                     jjCheckNAdd(42);
-                  break;
-               case 42:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 38)
-                     kind = 38;
-                  jjCheckNAddStates(20, 22);
-                  break;
-               case 44:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(45);
-                  break;
-               case 45:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 38)
-                     kind = 38;
-                  jjCheckNAddTwoStates(45, 46);
-                  break;
-               case 48:
-                  if ((0x3ff600000000000L & l) == 0L)
-                     break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAdd(48);
-                  break;
-               case 49:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 19)
-                     kind = 19;
-                  jjCheckNAddStates(0, 11);
-                  break;
-               case 50:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 51;
-                  break;
-               case 51:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 52;
-                  break;
-               case 52:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 53;
-                  break;
-               case 53:
-                  if (curChar == 45)
-                     jjstateSet[jjnewStateCnt++] = 54;
-                  break;
-               case 54:
-                  if ((0x3000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 55;
-                  break;
-               case 55:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 56;
-                  break;
-               case 56:
-                  if (curChar == 45)
-                     jjstateSet[jjnewStateCnt++] = 57;
-                  break;
-               case 57:
-                  if ((0xf000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 58;
-                  break;
-               case 58:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 59;
-                  break;
-               case 60:
-                  if ((0x7000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 61;
-                  break;
-               case 61:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 62;
-                  break;
-               case 62:
-                  if (curChar == 58)
-                     jjstateSet[jjnewStateCnt++] = 63;
-                  break;
-               case 63:
-                  if ((0x3f000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 64;
-                  break;
-               case 64:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 65;
-                  break;
-               case 65:
-                  if (curChar == 58)
-                     jjstateSet[jjnewStateCnt++] = 66;
-                  break;
-               case 66:
-                  if ((0x3f000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 67;
-                  break;
-               case 67:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 68;
-                  break;
-               case 68:
-                  if (curChar == 46)
-                     jjstateSet[jjnewStateCnt++] = 69;
-                  break;
-               case 69:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 70;
-                  break;
-               case 70:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 71;
-                  break;
-               case 71:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjAddStates(23, 24);
-                  break;
-               case 73:
-                  if ((0x280000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 74;
-                  break;
-               case 74:
-                  if ((0x7000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 75;
-                  break;
-               case 75:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 76;
-                  break;
-               case 76:
-                  if (curChar == 58)
-                     jjstateSet[jjnewStateCnt++] = 77;
-                  break;
-               case 77:
-                  if ((0x3f000000000000L & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 78;
-                  break;
-               case 78:
-                  if ((0x3ff000000000000L & l) != 0L && kind > 30)
-                     kind = 30;
-                  break;
-               case 79:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(79, 80);
-                  break;
-               case 80:
-                  if (curChar != 46)
-                     break;
-                  if (kind > 38)
-                     kind = 38;
-                  jjCheckNAddStates(25, 27);
-                  break;
-               case 81:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 38)
-                     kind = 38;
-                  jjCheckNAddStates(25, 27);
-                  break;
-               case 83:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(84);
-                  break;
-               case 84:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 38)
-                     kind = 38;
-                  jjCheckNAddTwoStates(84, 46);
-                  break;
-               case 85:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(85, 86);
-                  break;
-               case 87:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(88);
-                  break;
-               case 88:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 38)
-                     kind = 38;
-                  jjCheckNAddTwoStates(88, 46);
-                  break;
-               case 89:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddStates(28, 30);
-                  break;
-               case 91:
-                  if ((0x280000000000L & l) != 0L)
-                     jjCheckNAdd(92);
-                  break;
-               case 92:
-                  if ((0x3ff000000000000L & l) != 0L)
-                     jjCheckNAddTwoStates(92, 46);
-                  break;
-               case 93:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 41)
-                     kind = 41;
-                  jjCheckNAddTwoStates(93, 94);
-                  break;
-               case 95:
-                  if ((0x3ff000000000000L & l) == 0L)
-                     break;
-                  if (kind > 42)
-                     kind = 42;
-                  jjCheckNAddTwoStates(95, 96);
-                  break;
-               case 97:
-                  if (curChar == 45)
-                     jjCheckNAddStates(12, 16);
-                  break;
-               default : break;
-            }
-         } while(i != startsAt);
-      }
-      else if (curChar < 128)
-      {
-         long l = 1L << (curChar & 077);
-         MatchLoop: do
-         {
-            switch(jjstateSet[--i])
-            {
-               case 0:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 49)
-                        kind = 49;
-                     jjCheckNAdd(48);
-                  }
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 6;
-                  break;
-               case 7:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 49)
-                        kind = 49;
-                     jjCheckNAdd(48);
-                  }
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 8;
-                  break;
-               case 6:
-                  if ((0x7fffffe87fffffeL & l) != 0L)
-                  {
-                     if (kind > 49)
-                        kind = 49;
-                     jjCheckNAdd(48);
-                  }
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 7;
-                  break;
-               case 1:
-                  if ((0xffffffffefffffffL & l) != 0L)
-                     jjCheckNAddStates(17, 19);
-                  break;
-               case 2:
-                  if (curChar == 92)
-                     jjstateSet[jjnewStateCnt++] = 3;
-                  break;
-               case 3:
-                  if ((0x90000000L & l) != 0L)
-                     jjCheckNAddStates(17, 19);
-                  break;
-               case 5:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 6;
-                  break;
-               case 8:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 9;
-                  break;
-               case 9:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 10;
-                  break;
-               case 10:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 11;
-                  break;
-               case 11:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 12;
-                  break;
-               case 12:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 13;
-                  break;
-               case 14:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 15;
-                  break;
-               case 15:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 16;
-                  break;
-               case 16:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 17;
-                  break;
-               case 17:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 18;
-                  break;
-               case 19:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 20;
-                  break;
-               case 20:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 21;
-                  break;
-               case 21:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 22;
-                  break;
-               case 22:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 23;
-                  break;
-               case 24:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 25;
-                  break;
-               case 25:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 26;
-                  break;
-               case 26:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 27;
-                  break;
-               case 27:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 28;
-                  break;
-               case 29:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 30;
-                  break;
-               case 30:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 31;
-                  break;
-               case 31:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 32;
-                  break;
-               case 32:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 33;
-                  break;
-               case 33:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 34;
-                  break;
-               case 34:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 35;
-                  break;
-               case 35:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 36;
-                  break;
-               case 36:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 37;
-                  break;
-               case 37:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 38;
-                  break;
-               case 38:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 39;
-                  break;
-               case 39:
-                  if ((0x7e0000007eL & l) != 0L)
-                     jjstateSet[jjnewStateCnt++] = 40;
-                  break;
-               case 40:
-                  if ((0x7e0000007eL & l) != 0L && kind > 22)
-                     kind = 22;
-                  break;
-               case 43:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(31, 32);
-                  break;
-               case 46:
-                  if ((0x5000000050L & l) != 0L && kind > 38)
-                     kind = 38;
-                  break;
-               case 47:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAdd(48);
-                  break;
-               case 48:
-                  if ((0x7fffffe87fffffeL & l) == 0L)
-                     break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAdd(48);
-                  break;
-               case 59:
-                  if (curChar == 84)
-                     jjstateSet[jjnewStateCnt++] = 60;
-                  break;
-               case 72:
-                  if (curChar == 90 && kind > 30)
-                     kind = 30;
-                  break;
-               case 82:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(33, 34);
-                  break;
-               case 86:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(35, 36);
-                  break;
-               case 90:
-                  if ((0x2000000020L & l) != 0L)
-                     jjAddStates(37, 38);
-                  break;
-               case 94:
-                  if ((0x100000001000L & l) != 0L && kind > 41)
-                     kind = 41;
-                  break;
-               case 96:
-                  if ((0x100000001000L & l) != 0L && kind > 42)
-                     kind = 42;
-                  break;
-               default : break;
-            }
-         } while(i != startsAt);
-      }
-      else
-      {
-         int hiByte = (int)(curChar >> 8);
-         int i1 = hiByte >> 6;
-         long l1 = 1L << (hiByte & 077);
-         int i2 = (curChar & 0xff) >> 6;
-         long l2 = 1L << (curChar & 077);
-         MatchLoop: do
-         {
-            switch(jjstateSet[--i])
-            {
-               case 0:
-                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAdd(48);
-                  break;
-               case 7:
-               case 48:
-                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAdd(48);
-                  break;
-               case 6:
-                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
-                     break;
-                  if (kind > 49)
-                     kind = 49;
-                  jjCheckNAdd(48);
-                  break;
-               case 1:
-                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
-                     jjAddStates(17, 19);
-                  break;
-               default : break;
-            }
-         } while(i != startsAt);
-      }
-      if (kind != 0x7fffffff)
-      {
-         jjmatchedKind = kind;
-         jjmatchedPos = curPos;
-         kind = 0x7fffffff;
-      }
-      ++curPos;
-      if ((i = jjnewStateCnt) == (startsAt = 98 - (jjnewStateCnt = startsAt)))
-         return curPos;
-      try { curChar = input_stream.readChar(); }
-      catch(java.io.IOException e) { return curPos; }
-   }
-}
-static final int[] jjnextStates = {
-   50, 79, 80, 85, 86, 89, 90, 46, 93, 94, 95, 96, 79, 41, 85, 89, 
-   95, 1, 2, 4, 42, 43, 46, 72, 73, 81, 82, 46, 89, 90, 46, 44, 
-   45, 83, 84, 87, 88, 91, 92, 
-};
-private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
-{
-   switch(hiByte)
-   {
-      case 0:
-         return ((jjbitVec2[i2] & l2) != 0L);
-      default : 
-         if ((jjbitVec0[i1] & l1) != 0L)
-            return true;
-         return false;
-   }
-}
-private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
-{
-   switch(hiByte)
-   {
-      case 0:
-         return ((jjbitVec4[i2] & l2) != 0L);
-      case 1:
-         return ((jjbitVec5[i2] & l2) != 0L);
-      case 2:
-         return ((jjbitVec6[i2] & l2) != 0L);
-      case 3:
-         return ((jjbitVec7[i2] & l2) != 0L);
-      case 4:
-         return ((jjbitVec8[i2] & l2) != 0L);
-      case 5:
-         return ((jjbitVec9[i2] & l2) != 0L);
-      case 6:
-         return ((jjbitVec10[i2] & l2) != 0L);
-      case 9:
-         return ((jjbitVec11[i2] & l2) != 0L);
-      case 10:
-         return ((jjbitVec12[i2] & l2) != 0L);
-      case 11:
-         return ((jjbitVec13[i2] & l2) != 0L);
-      case 12:
-         return ((jjbitVec14[i2] & l2) != 0L);
-      case 13:
-         return ((jjbitVec15[i2] & l2) != 0L);
-      case 14:
-         return ((jjbitVec16[i2] & l2) != 0L);
-      case 15:
-         return ((jjbitVec17[i2] & l2) != 0L);
-      case 16:
-         return ((jjbitVec18[i2] & l2) != 0L);
-      case 17:
-         return ((jjbitVec19[i2] & l2) != 0L);
-      case 30:
-         return ((jjbitVec20[i2] & l2) != 0L);
-      case 31:
-         return ((jjbitVec21[i2] & l2) != 0L);
-      case 33:
-         return ((jjbitVec22[i2] & l2) != 0L);
-      case 48:
-         return ((jjbitVec23[i2] & l2) != 0L);
-      case 49:
-         return ((jjbitVec24[i2] & l2) != 0L);
-      case 159:
-         return ((jjbitVec25[i2] & l2) != 0L);
-      case 215:
-         return ((jjbitVec26[i2] & l2) != 0L);
-      default : 
-         if ((jjbitVec3[i1] & l1) != 0L)
-            return true;
-         return false;
-   }
-}
-private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
-{
-   switch(hiByte)
-   {
-      case 0:
-         return ((jjbitVec27[i2] & l2) != 0L);
-      case 1:
-         return ((jjbitVec5[i2] & l2) != 0L);
-      case 2:
-         return ((jjbitVec28[i2] & l2) != 0L);
-      case 3:
-         return ((jjbitVec29[i2] & l2) != 0L);
-      case 4:
-         return ((jjbitVec30[i2] & l2) != 0L);
-      case 5:
-         return ((jjbitVec31[i2] & l2) != 0L);
-      case 6:
-         return ((jjbitVec32[i2] & l2) != 0L);
-      case 9:
-         return ((jjbitVec33[i2] & l2) != 0L);
-      case 10:
-         return ((jjbitVec34[i2] & l2) != 0L);
-      case 11:
-         return ((jjbitVec35[i2] & l2) != 0L);
-      case 12:
-         return ((jjbitVec36[i2] & l2) != 0L);
-      case 13:
-         return ((jjbitVec37[i2] & l2) != 0L);
-      case 14:
-         return ((jjbitVec38[i2] & l2) != 0L);
-      case 15:
-         return ((jjbitVec39[i2] & l2) != 0L);
-      case 16:
-         return ((jjbitVec18[i2] & l2) != 0L);
-      case 17:
-         return ((jjbitVec19[i2] & l2) != 0L);
-      case 30:
-         return ((jjbitVec20[i2] & l2) != 0L);
-      case 31:
-         return ((jjbitVec21[i2] & l2) != 0L);
-      case 32:
-         return ((jjbitVec40[i2] & l2) != 0L);
-      case 33:
-         return ((jjbitVec22[i2] & l2) != 0L);
-      case 48:
-         return ((jjbitVec41[i2] & l2) != 0L);
-      case 49:
-         return ((jjbitVec24[i2] & l2) != 0L);
-      case 159:
-         return ((jjbitVec25[i2] & l2) != 0L);
-      case 215:
-         return ((jjbitVec26[i2] & l2) != 0L);
-      default : 
-         if ((jjbitVec3[i1] & l1) != 0L)
-            return true;
-         return false;
-   }
-}
-public static final String[] jjstrLiteralImages = {
-"", null, null, null, "\123\105\114\105\103\124", "\106\122\117\115", 
-"\114\117\103\101\124\111\117\116", "\127\110\105\122\105", "\124\105\130\124\123\105\101\122\103\110", 
-"\117\122\104\105\122", "\102\131", "\123\103\117\122\105", "\101\123\103\105\116\104\111\116\107", 
-"\104\105\123\103\105\116\104\111\116\107", "\114\111\113\105", "\101\116\104", "\117\122", "\116\117\124", null, null, 
-"\164\162\165\145", "\146\141\154\163\145", null, null, null, null, null, null, null, null, null, 
-null, null, null, null, null, null, null, null, null, null, null, null, "\75", 
-"\76", "\74", "\74\75", "\76\75", "\74\76", null, null, null, null, null, null, null, 
-null, "\52", "\54", "\72", "\57\52", "\57\57", "\57", "\133", "\135", "\50", "\51", };
-public static final String[] lexStateNames = {
-   "DEFAULT", 
-};
-static final long[] jjtoToken = {
-   0xfe03fe40407ffff1L, 0x7L, 
-};
-static final long[] jjtoSkip = {
-   0xeL, 0x0L, 
-};
-protected SimpleCharStream input_stream;
-private final int[] jjrounds = new int[98];
-private final int[] jjstateSet = new int[196];
-protected char curChar;
-public JCRQLParserTokenManager(SimpleCharStream stream)
-{
-   if (SimpleCharStream.staticFlag)
-      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
-   input_stream = stream;
-}
-public JCRQLParserTokenManager(SimpleCharStream stream, int lexState)
-{
-   this(stream);
-   SwitchTo(lexState);
-}
-public void ReInit(SimpleCharStream stream)
-{
-   jjmatchedPos = jjnewStateCnt = 0;
-   curLexState = defaultLexState;
-   input_stream = stream;
-   ReInitRounds();
-}
-private final void ReInitRounds()
-{
-   int i;
-   jjround = 0x80000001;
-   for (i = 98; i-- > 0;)
-      jjrounds[i] = 0x80000000;
-}
-public void ReInit(SimpleCharStream stream, int lexState)
-{
-   ReInit(stream);
-   SwitchTo(lexState);
-}
-public void SwitchTo(int lexState)
-{
-   if (lexState >= 1 || lexState < 0)
-      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
-   else
-      curLexState = lexState;
-}
-
-protected Token jjFillToken()
-{
-   Token t = Token.newToken(jjmatchedKind);
-   t.kind = jjmatchedKind;
-   String im = jjstrLiteralImages[jjmatchedKind];
-   t.image = (im == null) ? input_stream.GetImage() : im;
-   t.beginLine = input_stream.getBeginLine();
-   t.beginColumn = input_stream.getBeginColumn();
-   t.endLine = input_stream.getEndLine();
-   t.endColumn = input_stream.getEndColumn();
-   return t;
-}
-
-int curLexState = 0;
-int defaultLexState = 0;
-int jjnewStateCnt;
-int jjround;
-int jjmatchedPos;
-int jjmatchedKind;
-
-public Token getNextToken() 
-{
-  int kind;
-  Token specialToken = null;
-  Token matchedToken;
-  int curPos = 0;
-
-  EOFLoop :
-  for (;;)
-  {   
-   try   
-   {     
-      curChar = input_stream.BeginToken();
-   }     
-   catch(java.io.IOException e)
-   {        
-      jjmatchedKind = 0;
-      matchedToken = jjFillToken();
-      return matchedToken;
-   }
-
-   try { input_stream.backup(0);
-      while (curChar <= 32 && (0x100002400L & (1L << curChar)) != 0L)
-         curChar = input_stream.BeginToken();
-   }
-   catch (java.io.IOException e1) { continue EOFLoop; }
-   jjmatchedKind = 0x7fffffff;
-   jjmatchedPos = 0;
-   curPos = jjMoveStringLiteralDfa0_0();
-   if (jjmatchedKind != 0x7fffffff)
-   {
-      if (jjmatchedPos + 1 < curPos)
-         input_stream.backup(curPos - jjmatchedPos - 1);
-      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
-      {
-         matchedToken = jjFillToken();
-         return matchedToken;
-      }
-      else
-      {
-         continue EOFLoop;
-      }
-   }
-   int error_line = input_stream.getEndLine();
-   int error_column = input_stream.getEndColumn();
-   String error_after = null;
-   boolean EOFSeen = false;
-   try { input_stream.readChar(); input_stream.backup(1); }
-   catch (java.io.IOException e1) {
-      EOFSeen = true;
-      error_after = curPos <= 1 ? "" : input_stream.GetImage();
-      if (curChar == '\n' || curChar == '\r') {
-         error_line++;
-         error_column = 0;
-      }
-      else
-         error_column++;
-   }
-   if (!EOFSeen) {
-      input_stream.backup(1);
-      error_after = curPos <= 1 ? "" : input_stream.GetImage();
-   }
-   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
-  }
-}
-
-}
+/* Generated By:JJTree&JavaCC: Do not edit this line. JCRQLParserTokenManager.java */
+/*
+ * Copyright 2004 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.core.search.jcrql;
+import org.apache.jackrabbit.core.search.Constants;
+
+public class JCRQLParserTokenManager implements JCRQLParserConstants
+{
+  public  java.io.PrintStream debugStream = System.out;
+  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
+private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
+{
+   switch (pos)
+   {
+      case 0:
+         if ((active0 & 0x134bd0L) != 0L)
+         {
+            jjmatchedKind = 49;
+            return 48;
+         }
+         if ((active0 & 0x20b420L) != 0L)
+         {
+            jjmatchedKind = 49;
+            return 6;
+         }
+         return -1;
+      case 1:
+         if ((active0 & 0x12d9f0L) != 0L)
+         {
+            if (jjmatchedPos != 1)
+            {
+               jjmatchedKind = 49;
+               jjmatchedPos = 1;
+            }
+            return 48;
+         }
+         if ((active0 & 0x10600L) != 0L)
+            return 48;
+         if ((active0 & 0x202000L) != 0L)
+         {
+            if (jjmatchedPos != 1)
+            {
+               jjmatchedKind = 49;
+               jjmatchedPos = 1;
+            }
+            return 7;
+         }
+         return -1;
+      case 2:
+         if ((active0 & 0x28000L) != 0L)
+            return 48;
+         if ((active0 & 0x307bf0L) != 0L)
+         {
+            jjmatchedKind = 49;
+            jjmatchedPos = 2;
+            return 48;
+         }
+         return -1;
+      case 3:
+         if ((active0 & 0x104020L) != 0L)
+            return 48;
+         if ((active0 & 0x203bd0L) != 0L)
+         {
+            jjmatchedKind = 49;
+            jjmatchedPos = 3;
+            return 48;
+         }
+         return -1;
+      case 4:
+         if ((active0 & 0x3150L) != 0L)
+         {
+            jjmatchedKind = 49;
+            jjmatchedPos = 4;
+            return 48;
+         }
+         if ((active0 & 0x200a80L) != 0L)
+            return 48;
+         return -1;
+      case 5:
+         if ((active0 & 0x10L) != 0L)
+            return 48;
+         if ((active0 & 0x3140L) != 0L)
+         {
+            jjmatchedKind = 49;
+            jjmatchedPos = 5;
+            return 48;
+         }
+         return -1;
+      case 6:
+         if ((active0 & 0x3140L) != 0L)
+         {
+            jjmatchedKind = 49;
+            jjmatchedPos = 6;
+            return 48;
+         }
+         return -1;
+      case 7:
+         if ((active0 & 0x40L) != 0L)
+            return 48;
+         if ((active0 & 0x3100L) != 0L)
+         {
+            jjmatchedKind = 49;
+            jjmatchedPos = 7;
+            return 48;
+         }
+         return -1;
+      case 8:
+         if ((active0 & 0x1000L) != 0L)
+            return 48;
+         if ((active0 & 0x2100L) != 0L)
+         {
+            jjmatchedKind = 49;
+            jjmatchedPos = 8;
+            return 48;
+         }
+         return -1;
+      default :
+         return -1;
+   }
+}
+private final int jjStartNfa_0(int pos, long active0, long active1)
+{
+   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
+}
+private final int jjStopAtPos(int pos, int kind)
+{
+   jjmatchedKind = kind;
+   jjmatchedPos = pos;
+   return pos + 1;
+}
+private final int jjStartNfaWithStates_0(int pos, int kind, int state)
+{
+   jjmatchedKind = kind;
+   jjmatchedPos = pos;
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) { return pos + 1; }
+   return jjMoveNfa_0(state, pos + 1);
+}
+private final int jjMoveStringLiteralDfa0_0()
+{
+   switch(curChar)
+   {
+      case 40:
+         return jjStopAtPos(0, 65);
+      case 41:
+         return jjStopAtPos(0, 66);
+      case 42:
+         return jjStopAtPos(0, 57);
+      case 44:
+         return jjStopAtPos(0, 58);
+      case 47:
+         jjmatchedKind = 62;
+         return jjMoveStringLiteralDfa1_0(0x3000000000000000L);
+      case 58:
+         return jjStopAtPos(0, 59);
+      case 60:
+         jjmatchedKind = 45;
+         return jjMoveStringLiteralDfa1_0(0x1400000000000L);
+      case 61:
+         return jjStopAtPos(0, 43);
+      case 62:
+         jjmatchedKind = 44;
+         return jjMoveStringLiteralDfa1_0(0x800000000000L);
+      case 65:
+         return jjMoveStringLiteralDfa1_0(0x9000L);
+      case 66:
+         return jjMoveStringLiteralDfa1_0(0x400L);
+      case 68:
+         return jjMoveStringLiteralDfa1_0(0x2000L);
+      case 70:
+         return jjMoveStringLiteralDfa1_0(0x20L);
+      case 76:
+         return jjMoveStringLiteralDfa1_0(0x4040L);
+      case 78:
+         return jjMoveStringLiteralDfa1_0(0x20000L);
+      case 79:
+         return jjMoveStringLiteralDfa1_0(0x10200L);
+      case 83:
+         return jjMoveStringLiteralDfa1_0(0x810L);
+      case 84:
+         return jjMoveStringLiteralDfa1_0(0x100L);
+      case 87:
+         return jjMoveStringLiteralDfa1_0(0x80L);
+      case 91:
+         return jjStopAtPos(0, 63);
+      case 93:
+         return jjStopAtPos(0, 64);
+      case 102:
+         return jjMoveStringLiteralDfa1_0(0x200000L);
+      case 116:
+         return jjMoveStringLiteralDfa1_0(0x100000L);
+      default :
+         return jjMoveNfa_0(0, 0);
+   }
+}
+private final int jjMoveStringLiteralDfa1_0(long active0)
+{
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(0, active0, 0L);
+      return 1;
+   }
+   switch(curChar)
+   {
+      case 42:
+         if ((active0 & 0x1000000000000000L) != 0L)
+            return jjStopAtPos(1, 60);
+         break;
+      case 47:
+         if ((active0 & 0x2000000000000000L) != 0L)
+            return jjStopAtPos(1, 61);
+         break;
+      case 61:
+         if ((active0 & 0x400000000000L) != 0L)
+            return jjStopAtPos(1, 46);
+         else if ((active0 & 0x800000000000L) != 0L)
+            return jjStopAtPos(1, 47);
+         break;
+      case 62:
+         if ((active0 & 0x1000000000000L) != 0L)
+            return jjStopAtPos(1, 48);
+         break;
+      case 67:
+         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
+      case 69:
+         return jjMoveStringLiteralDfa2_0(active0, 0x2110L);
+      case 72:
+         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
+      case 73:
+         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
+      case 78:
+         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
+      case 79:
+         return jjMoveStringLiteralDfa2_0(active0, 0x20040L);
+      case 82:
+         if ((active0 & 0x10000L) != 0L)
+         {
+            jjmatchedKind = 16;
+            jjmatchedPos = 1;
+         }
+         return jjMoveStringLiteralDfa2_0(active0, 0x220L);
+      case 83:
+         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
+      case 89:
+         if ((active0 & 0x400L) != 0L)
+            return jjStartNfaWithStates_0(1, 10, 48);
+         break;
+      case 97:
+         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
+      case 114:
+         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
+      default :
+         break;
+   }
+   return jjStartNfa_0(0, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(0, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(1, active0, 0L);
+      return 2;
+   }
+   switch(curChar)
+   {
+      case 67:
+         return jjMoveStringLiteralDfa3_0(active0, 0x1040L);
+      case 68:
+         if ((active0 & 0x8000L) != 0L)
+            return jjStartNfaWithStates_0(2, 15, 48);
+         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
+      case 69:
+         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
+      case 75:
+         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
+      case 76:
+         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
+      case 79:
+         return jjMoveStringLiteralDfa3_0(active0, 0x820L);
+      case 83:
+         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
+      case 84:
+         if ((active0 & 0x20000L) != 0L)
+            return jjStartNfaWithStates_0(2, 17, 48);
+         break;
+      case 88:
+         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
+      case 108:
+         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
+      case 117:
+         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
+      default :
+         break;
+   }
+   return jjStartNfa_0(1, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(1, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(2, active0, 0L);
+      return 3;
+   }
+   switch(curChar)
+   {
+      case 65:
+         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
+      case 67:
+         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
+      case 69:
+         if ((active0 & 0x4000L) != 0L)
+            return jjStartNfaWithStates_0(3, 14, 48);
+         return jjMoveStringLiteralDfa4_0(active0, 0x1210L);
+      case 77:
+         if ((active0 & 0x20L) != 0L)
+            return jjStartNfaWithStates_0(3, 5, 48);
+         break;
+      case 82:
+         return jjMoveStringLiteralDfa4_0(active0, 0x880L);
+      case 84:
+         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
+      case 101:
+         if ((active0 & 0x100000L) != 0L)
+            return jjStartNfaWithStates_0(3, 20, 48);
+         break;
+      case 115:
+         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
+      default :
+         break;
+   }
+   return jjStartNfa_0(2, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(2, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(3, active0, 0L);
+      return 4;
+   }
+   switch(curChar)
+   {
+      case 67:
+         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
+      case 69:
+         if ((active0 & 0x80L) != 0L)
+            return jjStartNfaWithStates_0(4, 7, 48);
+         else if ((active0 & 0x800L) != 0L)
+            return jjStartNfaWithStates_0(4, 11, 48);
+         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
+      case 78:
+         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
+      case 82:
+         if ((active0 & 0x200L) != 0L)
+            return jjStartNfaWithStates_0(4, 9, 48);
+         break;
+      case 83:
+         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
+      case 84:
+         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
+      case 101:
+         if ((active0 & 0x200000L) != 0L)
+            return jjStartNfaWithStates_0(4, 21, 48);
+         break;
+      default :
+         break;
+   }
+   return jjStartNfa_0(3, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(3, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(4, active0, 0L);
+      return 5;
+   }
+   switch(curChar)
+   {
+      case 68:
+         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
+      case 69:
+         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
+      case 73:
+         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
+      case 78:
+         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
+      case 84:
+         if ((active0 & 0x10L) != 0L)
+            return jjStartNfaWithStates_0(5, 4, 48);
+         break;
+      default :
+         break;
+   }
+   return jjStartNfa_0(4, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(4, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(5, active0, 0L);
+      return 6;
+   }
+   switch(curChar)
+   {
+      case 65:
+         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
+      case 68:
+         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
+      case 73:
+         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
+      case 79:
+         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
+      default :
+         break;
+   }
+   return jjStartNfa_0(5, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(5, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(6, active0, 0L);
+      return 7;
+   }
+   switch(curChar)
+   {
+      case 73:
+         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
+      case 78:
+         if ((active0 & 0x40L) != 0L)
+            return jjStartNfaWithStates_0(7, 6, 48);
+         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
+      case 82:
+         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
+      default :
+         break;
+   }
+   return jjStartNfa_0(6, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(6, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(7, active0, 0L);
+      return 8;
+   }
+   switch(curChar)
+   {
+      case 67:
+         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
+      case 71:
+         if ((active0 & 0x1000L) != 0L)
+            return jjStartNfaWithStates_0(8, 12, 48);
+         break;
+      case 78:
+         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
+      default :
+         break;
+   }
+   return jjStartNfa_0(7, active0, 0L);
+}
+private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
+{
+   if (((active0 &= old0)) == 0L)
+      return jjStartNfa_0(7, old0, 0L);
+   try { curChar = input_stream.readChar(); }
+   catch(java.io.IOException e) {
+      jjStopStringLiteralDfa_0(8, active0, 0L);
+      return 9;
+   }
+   switch(curChar)
+   {
+      case 71:
+         if ((active0 & 0x2000L) != 0L)
+            return jjStartNfaWithStates_0(9, 13, 48);
+         break;
+      case 72:
+         if ((active0 & 0x100L) != 0L)
+            return jjStartNfaWithStates_0(9, 8, 48);
+         break;
+      default :
+         break;
+   }
+   return jjStartNfa_0(8, active0, 0L);
+}
+private final void jjCheckNAdd(int state)
+{
+   if (jjrounds[state] != jjround)
+   {
+      jjstateSet[jjnewStateCnt++] = state;
+      jjrounds[state] = jjround;
+   }
+}
+private final void jjAddStates(int start, int end)
+{
+   do {
+      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
+   } while (start++ != end);
+}
+private final void jjCheckNAddTwoStates(int state1, int state2)
+{
+   jjCheckNAdd(state1);
+   jjCheckNAdd(state2);
+}
+private final void jjCheckNAddStates(int start, int end)
+{
+   do {
+      jjCheckNAdd(jjnextStates[start]);
+   } while (start++ != end);
+}
+private final void jjCheckNAddStates(int start)
+{
+   jjCheckNAdd(jjnextStates[start]);
+   jjCheckNAdd(jjnextStates[start + 1]);
+}
+static final long[] jjbitVec0 = {
+   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
+};
+static final long[] jjbitVec2 = {
+   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
+};
+static final long[] jjbitVec3 = {
+   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
+};
+static final long[] jjbitVec4 = {
+   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
+};
+static final long[] jjbitVec5 = {
+   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
+};
+static final long[] jjbitVec6 = {
+   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
+};
+static final long[] jjbitVec7 = {
+   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
+};
+static final long[] jjbitVec8 = {
+   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
+};
+static final long[] jjbitVec9 = {
+   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
+};
+static final long[] jjbitVec10 = {
+   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
+};
+static final long[] jjbitVec11 = {
+   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
+};
+static final long[] jjbitVec12 = {
+   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
+};
+static final long[] jjbitVec13 = {
+   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
+};
+static final long[] jjbitVec14 = {
+   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
+};
+static final long[] jjbitVec15 = {
+   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
+};
+static final long[] jjbitVec16 = {
+   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
+};
+static final long[] jjbitVec17 = {
+   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
+};
+static final long[] jjbitVec18 = {
+   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
+};
+static final long[] jjbitVec19 = {
+   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
+};
+static final long[] jjbitVec20 = {
+   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
+};
+static final long[] jjbitVec21 = {
+   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
+};
+static final long[] jjbitVec22 = {
+   0x4c4000000000L, 0x0L, 0x7L, 0x0L
+};
+static final long[] jjbitVec23 = {
+   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
+};
+static final long[] jjbitVec24 = {
+   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
+};
+static final long[] jjbitVec25 = {
+   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
+};
+static final long[] jjbitVec26 = {
+   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
+};
+static final long[] jjbitVec27 = {
+   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
+};
+static final long[] jjbitVec28 = {
+   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
+};
+static final long[] jjbitVec29 = {
+   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
+};
+static final long[] jjbitVec30 = {
+   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
+};
+static final long[] jjbitVec31 = {
+   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
+};
+static final long[] jjbitVec32 = {
+   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
+};
+static final long[] jjbitVec33 = {
+   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
+};
+static final long[] jjbitVec34 = {
+   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
+};
+static final long[] jjbitVec35 = {
+   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
+};
+static final long[] jjbitVec36 = {
+   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
+};
+static final long[] jjbitVec37 = {
+   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
+};
+static final long[] jjbitVec38 = {
+   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
+};
+static final long[] jjbitVec39 = {
+   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
+};
+static final long[] jjbitVec40 = {
+   0x0L, 0x0L, 0x0L, 0x21fff0000L
+};
+static final long[] jjbitVec41 = {
+   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
+};
+private final int jjMoveNfa_0(int startState, int curPos)
+{
+   int[] nextStates;
+   int startsAt = 0;
+   jjnewStateCnt = 98;
+   int i = 1;
+   jjstateSet[0] = startState;
+   int j, kind = 0x7fffffff;
+   for (;;)
+   {
+      if (++jjround == 0x7fffffff)
+         ReInitRounds();
+      if (curChar < 64)
+      {
+         long l = 1L << curChar;
+         MatchLoop: do
+         {
+            switch(jjstateSet[--i])
+            {
+               case 0:
+                  if ((0x3ff000000000000L & l) != 0L)
+                  {
+                     if (kind > 19)
+                        kind = 19;
+                     jjCheckNAddStates(0, 11);
+                  }
+                  else if (curChar == 45)
+                     jjCheckNAddStates(12, 16);
+                  else if (curChar == 46)
+                     jjCheckNAdd(42);
+                  else if (curChar == 34)
+                     jjCheckNAddStates(17, 19);
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  break;
+               case 7:
+                  if ((0x3ff600000000000L & l) != 0L)
+                  {
+                     if (kind > 49)
+                        kind = 49;
+                     jjCheckNAdd(48);
+                  }
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 8;
+                  break;
+               case 6:
+                  if ((0x3ff600000000000L & l) != 0L)
+                  {
+                     if (kind > 49)
+                        kind = 49;
+                     jjCheckNAdd(48);
+                  }
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  break;
+               case 1:
+                  if ((0xfffffffbffffffffL & l) != 0L)
+                     jjCheckNAddStates(17, 19);
+                  break;
+               case 3:
+                  if ((0x8000042400000000L & l) != 0L)
+                     jjCheckNAddStates(17, 19);
+                  break;
+               case 4:
+                  if (curChar == 34 && kind > 18)
+                     kind = 18;
+                  break;
+               case 5:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  break;
+               case 8:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 9;
+                  break;
+               case 9:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 10;
+                  break;
+               case 10:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 11;
+                  break;
+               case 11:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 12;
+                  break;
+               case 12:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 13;
+                  break;
+               case 13:
+                  if (curChar == 45)
+                     jjstateSet[jjnewStateCnt++] = 14;
+                  break;
+               case 14:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 15;
+                  break;
+               case 15:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 16;
+                  break;
+               case 16:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 17;
+                  break;
+               case 17:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 18;
+                  break;
+               case 18:
+                  if (curChar == 45)
+                     jjstateSet[jjnewStateCnt++] = 19;
+                  break;
+               case 19:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 20;
+                  break;
+               case 20:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 21;
+                  break;
+               case 21:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 22;
+                  break;
+               case 22:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 23;
+                  break;
+               case 23:
+                  if (curChar == 45)
+                     jjstateSet[jjnewStateCnt++] = 24;
+                  break;
+               case 24:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 25;
+                  break;
+               case 25:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 26;
+                  break;
+               case 26:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 27;
+                  break;
+               case 27:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 28;
+                  break;
+               case 28:
+                  if (curChar == 45)
+                     jjstateSet[jjnewStateCnt++] = 29;
+                  break;
+               case 29:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 30;
+                  break;
+               case 30:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 31;
+                  break;
+               case 31:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 32;
+                  break;
+               case 32:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 33;
+                  break;
+               case 33:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 34;
+                  break;
+               case 34:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 35;
+                  break;
+               case 35:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 36;
+                  break;
+               case 36:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 37;
+                  break;
+               case 37:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 38;
+                  break;
+               case 38:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 39;
+                  break;
+               case 39:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 40;
+                  break;
+               case 40:
+                  if ((0x3ff000000000000L & l) != 0L && kind > 22)
+                     kind = 22;
+                  break;
+               case 41:
+                  if (curChar == 46)
+                     jjCheckNAdd(42);
+                  break;
+               case 42:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 38)
+                     kind = 38;
+                  jjCheckNAddStates(20, 22);
+                  break;
+               case 44:
+                  if ((0x280000000000L & l) != 0L)
+                     jjCheckNAdd(45);
+                  break;
+               case 45:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 38)
+                     kind = 38;
+                  jjCheckNAddTwoStates(45, 46);
+                  break;
+               case 48:
+                  if ((0x3ff600000000000L & l) == 0L)
+                     break;
+                  if (kind > 49)
+                     kind = 49;
+                  jjCheckNAdd(48);
+                  break;
+               case 49:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 19)
+                     kind = 19;
+                  jjCheckNAddStates(0, 11);
+                  break;
+               case 50:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 51;
+                  break;
+               case 51:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 52;
+                  break;
+               case 52:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 53;
+                  break;
+               case 53:
+                  if (curChar == 45)
+                     jjstateSet[jjnewStateCnt++] = 54;
+                  break;
+               case 54:
+                  if ((0x3000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 55;
+                  break;
+               case 55:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 56;
+                  break;
+               case 56:
+                  if (curChar == 45)
+                     jjstateSet[jjnewStateCnt++] = 57;
+                  break;
+               case 57:
+                  if ((0xf000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 58;
+                  break;
+               case 58:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 59;
+                  break;
+               case 60:
+                  if ((0x7000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 61;
+                  break;
+               case 61:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 62;
+                  break;
+               case 62:
+                  if (curChar == 58)
+                     jjstateSet[jjnewStateCnt++] = 63;
+                  break;
+               case 63:
+                  if ((0x3f000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 64;
+                  break;
+               case 64:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 65;
+                  break;
+               case 65:
+                  if (curChar == 58)
+                     jjstateSet[jjnewStateCnt++] = 66;
+                  break;
+               case 66:
+                  if ((0x3f000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 67;
+                  break;
+               case 67:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 68;
+                  break;
+               case 68:
+                  if (curChar == 46)
+                     jjstateSet[jjnewStateCnt++] = 69;
+                  break;
+               case 69:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 70;
+                  break;
+               case 70:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 71;
+                  break;
+               case 71:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjAddStates(23, 24);
+                  break;
+               case 73:
+                  if ((0x280000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 74;
+                  break;
+               case 74:
+                  if ((0x7000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 75;
+                  break;
+               case 75:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 76;
+                  break;
+               case 76:
+                  if (curChar == 58)
+                     jjstateSet[jjnewStateCnt++] = 77;
+                  break;
+               case 77:
+                  if ((0x3f000000000000L & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 78;
+                  break;
+               case 78:
+                  if ((0x3ff000000000000L & l) != 0L && kind > 30)
+                     kind = 30;
+                  break;
+               case 79:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(79, 80);
+                  break;
+               case 80:
+                  if (curChar != 46)
+                     break;
+                  if (kind > 38)
+                     kind = 38;
+                  jjCheckNAddStates(25, 27);
+                  break;
+               case 81:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 38)
+                     kind = 38;
+                  jjCheckNAddStates(25, 27);
+                  break;
+               case 83:
+                  if ((0x280000000000L & l) != 0L)
+                     jjCheckNAdd(84);
+                  break;
+               case 84:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 38)
+                     kind = 38;
+                  jjCheckNAddTwoStates(84, 46);
+                  break;
+               case 85:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(85, 86);
+                  break;
+               case 87:
+                  if ((0x280000000000L & l) != 0L)
+                     jjCheckNAdd(88);
+                  break;
+               case 88:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 38)
+                     kind = 38;
+                  jjCheckNAddTwoStates(88, 46);
+                  break;
+               case 89:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddStates(28, 30);
+                  break;
+               case 91:
+                  if ((0x280000000000L & l) != 0L)
+                     jjCheckNAdd(92);
+                  break;
+               case 92:
+                  if ((0x3ff000000000000L & l) != 0L)
+                     jjCheckNAddTwoStates(92, 46);
+                  break;
+               case 93:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 41)
+                     kind = 41;
+                  jjCheckNAddTwoStates(93, 94);
+                  break;
+               case 95:
+                  if ((0x3ff000000000000L & l) == 0L)
+                     break;
+                  if (kind > 42)
+                     kind = 42;
+                  jjCheckNAddTwoStates(95, 96);
+                  break;
+               case 97:
+                  if (curChar == 45)
+                     jjCheckNAddStates(12, 16);
+                  break;
+               default : break;
+            }
+         } while(i != startsAt);
+      }
+      else if (curChar < 128)
+      {
+         long l = 1L << (curChar & 077);
+         MatchLoop: do
+         {
+            switch(jjstateSet[--i])
+            {
+               case 0:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 49)
+                        kind = 49;
+                     jjCheckNAdd(48);
+                  }
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  break;
+               case 7:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 49)
+                        kind = 49;
+                     jjCheckNAdd(48);
+                  }
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 8;
+                  break;
+               case 6:
+                  if ((0x7fffffe87fffffeL & l) != 0L)
+                  {
+                     if (kind > 49)
+                        kind = 49;
+                     jjCheckNAdd(48);
+                  }
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 7;
+                  break;
+               case 1:
+                  if ((0xffffffffefffffffL & l) != 0L)
+                     jjCheckNAddStates(17, 19);
+                  break;
+               case 2:
+                  if (curChar == 92)
+                     jjstateSet[jjnewStateCnt++] = 3;
+                  break;
+               case 3:
+                  if ((0x90000000L & l) != 0L)
+                     jjCheckNAddStates(17, 19);
+                  break;
+               case 5:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 6;
+                  break;
+               case 8:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 9;
+                  break;
+               case 9:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 10;
+                  break;
+               case 10:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 11;
+                  break;
+               case 11:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 12;
+                  break;
+               case 12:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 13;
+                  break;
+               case 14:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 15;
+                  break;
+               case 15:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 16;
+                  break;
+               case 16:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 17;
+                  break;
+               case 17:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 18;
+                  break;
+               case 19:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 20;
+                  break;
+               case 20:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 21;
+                  break;
+               case 21:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 22;
+                  break;
+               case 22:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 23;
+                  break;
+               case 24:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 25;
+                  break;
+               case 25:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 26;
+                  break;
+               case 26:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 27;
+                  break;
+               case 27:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 28;
+                  break;
+               case 29:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 30;
+                  break;
+               case 30:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 31;
+                  break;
+               case 31:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 32;
+                  break;
+               case 32:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 33;
+                  break;
+               case 33:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 34;
+                  break;
+               case 34:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 35;
+                  break;
+               case 35:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 36;
+                  break;
+               case 36:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 37;
+                  break;
+               case 37:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 38;
+                  break;
+               case 38:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 39;
+                  break;
+               case 39:
+                  if ((0x7e0000007eL & l) != 0L)
+                     jjstateSet[jjnewStateCnt++] = 40;
+                  break;
+               case 40:
+                  if ((0x7e0000007eL & l) != 0L && kind > 22)
+                     kind = 22;
+                  break;
+               case 43:
+                  if ((0x2000000020L & l) != 0L)
+                     jjAddStates(31, 32);
+                  break;
+               case 46:
+                  if ((0x5000000050L & l) != 0L && kind > 38)
+                     kind = 38;
+                  break;
+               case 47:
+                  if ((0x7fffffe87fffffeL & l) == 0L)
+                     break;
+                  if (kind > 49)
+                     kind = 49;
+                  jjCheckNAdd(48);
+                  break;
+               case 48:
+                  if ((0x7fffffe87fffffeL & l) == 0L)
+                     break;
+                  if (kind > 49)
+                     kind = 49;
+                  jjCheckNAdd(48);
+                  break;
+               case 59:
+                  if (curChar == 84)
+                     jjstateSet[jjnewStateCnt++] = 60;
+                  break;
+               case 72:
+                  if (curChar == 90 && kind > 30)
+                     kind = 30;
+                  break;
+               case 82:
+                  if ((0x2000000020L & l) != 0L)
+                     jjAddStates(33, 34);
+                  break;
+               case 86:
+                  if ((0x2000000020L & l) != 0L)
+                     jjAddStates(35, 36);
+                  break;
+               case 90:
+                  if ((0x2000000020L & l) != 0L)
+                     jjAddStates(37, 38);
+                  break;
+               case 94:
+                  if ((0x100000001000L & l) != 0L && kind > 41)
+                     kind = 41;
+                  break;
+               case 96:
+                  if ((0x100000001000L & l) != 0L && kind > 42)
+                     kind = 42;
+                  break;
+               default : break;
+            }
+         } while(i != startsAt);
+      }
+      else
+      {
+         int hiByte = (int)(curChar >> 8);
+         int i1 = hiByte >> 6;
+         long l1 = 1L << (hiByte & 077);
+         int i2 = (curChar & 0xff) >> 6;
+         long l2 = 1L << (curChar & 077);
+         MatchLoop: do
+         {
+            switch(jjstateSet[--i])
+            {
+               case 0:
+                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
+                     break;
+                  if (kind > 49)
+                     kind = 49;
+                  jjCheckNAdd(48);
+                  break;
+               case 7:
+               case 48:
+                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
+                     break;
+                  if (kind > 49)
+                     kind = 49;
+                  jjCheckNAdd(48);
+                  break;
+               case 6:
+                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
+                     break;
+                  if (kind > 49)
+                     kind = 49;
+                  jjCheckNAdd(48);
+                  break;
+               case 1:
+                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
+                     jjAddStates(17, 19);
+                  break;
+               default : break;
+            }
+         } while(i != startsAt);
+      }
+      if (kind != 0x7fffffff)
+      {
+         jjmatchedKind = kind;
+         jjmatchedPos = curPos;
+         kind = 0x7fffffff;
+      }
+      ++curPos;
+      if ((i = jjnewStateCnt) == (startsAt = 98 - (jjnewStateCnt = startsAt)))
+         return curPos;
+      try { curChar = input_stream.readChar(); }
+      catch(java.io.IOException e) { return curPos; }
+   }
+}
+static final int[] jjnextStates = {
+   50, 79, 80, 85, 86, 89, 90, 46, 93, 94, 95, 96, 79, 41, 85, 89, 
+   95, 1, 2, 4, 42, 43, 46, 72, 73, 81, 82, 46, 89, 90, 46, 44, 
+   45, 83, 84, 87, 88, 91, 92, 
+};
+private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
+{
+   switch(hiByte)
+   {
+      case 0:
+         return ((jjbitVec2[i2] & l2) != 0L);
+      default : 
+         if ((jjbitVec0[i1] & l1) != 0L)
+            return true;
+         return false;
+   }
+}
+private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
+{
+   switch(hiByte)
+   {
+      case 0:
+         return ((jjbitVec4[i2] & l2) != 0L);
+      case 1:
+         return ((jjbitVec5[i2] & l2) != 0L);
+      case 2:
+         return ((jjbitVec6[i2] & l2) != 0L);
+      case 3:
+         return ((jjbitVec7[i2] & l2) != 0L);
+      case 4:
+         return ((jjbitVec8[i2] & l2) != 0L);
+      case 5:
+         return ((jjbitVec9[i2] & l2) != 0L);
+      case 6:
+         return ((jjbitVec10[i2] & l2) != 0L);
+      case 9:
+         return ((jjbitVec11[i2] & l2) != 0L);
+      case 10:
+         return ((jjbitVec12[i2] & l2) != 0L);
+      case 11:
+         return ((jjbitVec13[i2] & l2) != 0L);
+      case 12:
+         return ((jjbitVec14[i2] & l2) != 0L);
+      case 13:
+         return ((jjbitVec15[i2] & l2) != 0L);
+      case 14:
+         return ((jjbitVec16[i2] & l2) != 0L);
+      case 15:
+         return ((jjbitVec17[i2] & l2) != 0L);
+      case 16:
+         return ((jjbitVec18[i2] & l2) != 0L);
+      case 17:
+         return ((jjbitVec19[i2] & l2) != 0L);
+      case 30:
+         return ((jjbitVec20[i2] & l2) != 0L);
+      case 31:
+         return ((jjbitVec21[i2] & l2) != 0L);
+      case 33:
+         return ((jjbitVec22[i2] & l2) != 0L);
+      case 48:
+         return ((jjbitVec23[i2] & l2) != 0L);
+      case 49:
+         return ((jjbitVec24[i2] & l2) != 0L);
+      case 159:
+         return ((jjbitVec25[i2] & l2) != 0L);
+      case 215:
+         return ((jjbitVec26[i2] & l2) != 0L);
+      default : 
+         if ((jjbitVec3[i1] & l1) != 0L)
+            return true;
+         return false;
+   }
+}
+private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
+{
+   switch(hiByte)
+   {
+      case 0:
+         return ((jjbitVec27[i2] & l2) != 0L);
+      case 1:
+         return ((jjbitVec5[i2] & l2) != 0L);
+      case 2:
+         return ((jjbitVec28[i2] & l2) != 0L);
+      case 3:
+         return ((jjbitVec29[i2] & l2) != 0L);
+      case 4:
+         return ((jjbitVec30[i2] & l2) != 0L);
+      case 5:
+         return ((jjbitVec31[i2] & l2) != 0L);
+      case 6:
+         return ((jjbitVec32[i2] & l2) != 0L);
+      case 9:
+         return ((jjbitVec33[i2] & l2) != 0L);
+      case 10:
+         return ((jjbitVec34[i2] & l2) != 0L);
+      case 11:
+         return ((jjbitVec35[i2] & l2) != 0L);
+      case 12:
+         return ((jjbitVec36[i2] & l2) != 0L);
+      case 13:
+         return ((jjbitVec37[i2] & l2) != 0L);
+      case 14:
+         return ((jjbitVec38[i2] & l2) != 0L);
+      case 15:
+         return ((jjbitVec39[i2] & l2) != 0L);
+      case 16:
+         return ((jjbitVec18[i2] & l2) != 0L);
+      case 17:
+         return ((jjbitVec19[i2] & l2) != 0L);
+      case 30:
+         return ((jjbitVec20[i2] & l2) != 0L);
+      case 31:
+         return ((jjbitVec21[i2] & l2) != 0L);
+      case 32:
+         return ((jjbitVec40[i2] & l2) != 0L);
+      case 33:
+         return ((jjbitVec22[i2] & l2) != 0L);
+      case 48:
+         return ((jjbitVec41[i2] & l2) != 0L);
+      case 49:
+         return ((jjbitVec24[i2] & l2) != 0L);
+      case 159:
+         return ((jjbitVec25[i2] & l2) != 0L);
+      case 215:
+         return ((jjbitVec26[i2] & l2) != 0L);
+      default : 
+         if ((jjbitVec3[i1] & l1) != 0L)
+            return true;
+         return false;
+   }
+}
+public static final String[] jjstrLiteralImages = {
+"", null, null, null, "\123\105\114\105\103\124", "\106\122\117\115", 
+"\114\117\103\101\124\111\117\116", "\127\110\105\122\105", "\124\105\130\124\123\105\101\122\103\110", 
+"\117\122\104\105\122", "\102\131", "\123\103\117\122\105", "\101\123\103\105\116\104\111\116\107", 
+"\104\105\123\103\105\116\104\111\116\107", "\114\111\113\105", "\101\116\104", "\117\122", "\116\117\124", null, null, 
+"\164\162\165\145", "\146\141\154\163\145", null, null, null, null, null, null, null, null, null, 
+null, null, null, null, null, null, null, null, null, null, null, null, "\75", 
+"\76", "\74", "\74\75", "\76\75", "\74\76", null, null, null, null, null, null, null, 
+null, "\52", "\54", "\72", "\57\52", "\57\57", "\57", "\133", "\135", "\50", "\51", };
+public static final String[] lexStateNames = {
+   "DEFAULT", 
+};
+static final long[] jjtoToken = {
+   0xfe03fe40407ffff1L, 0x7L, 
+};
+static final long[] jjtoSkip = {
+   0xeL, 0x0L, 
+};
+protected SimpleCharStream input_stream;
+private final int[] jjrounds = new int[98];
+private final int[] jjstateSet = new int[196];
+protected char curChar;
+public JCRQLParserTokenManager(SimpleCharStream stream)
+{
+   if (SimpleCharStream.staticFlag)
+      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
+   input_stream = stream;
+}
+public JCRQLParserTokenManager(SimpleCharStream stream, int lexState)
+{
+   this(stream);
+   SwitchTo(lexState);
+}
+public void ReInit(SimpleCharStream stream)
+{
+   jjmatchedPos = jjnewStateCnt = 0;
+   curLexState = defaultLexState;
+   input_stream = stream;
+   ReInitRounds();
+}
+private final void ReInitRounds()
+{
+   int i;
+   jjround = 0x80000001;
+   for (i = 98; i-- > 0;)
+      jjrounds[i] = 0x80000000;
+}
+public void ReInit(SimpleCharStream stream, int lexState)
+{
+   ReInit(stream);
+   SwitchTo(lexState);
+}
+public void SwitchTo(int lexState)
+{
+   if (lexState >= 1 || lexState < 0)
+      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
+   else
+      curLexState = lexState;
+}
+
+protected Token jjFillToken()
+{
+   Token t = Token.newToken(jjmatchedKind);
+   t.kind = jjmatchedKind;
+   String im = jjstrLiteralImages[jjmatchedKind];
+   t.image = (im == null) ? input_stream.GetImage() : im;
+   t.beginLine = input_stream.getBeginLine();
+   t.beginColumn = input_stream.getBeginColumn();
+   t.endLine = input_stream.getEndLine();
+   t.endColumn = input_stream.getEndColumn();
+   return t;
+}
+
+int curLexState = 0;
+int defaultLexState = 0;
+int jjnewStateCnt;
+int jjround;
+int jjmatchedPos;
+int jjmatchedKind;
+
+public Token getNextToken() 
+{
+  int kind;
+  Token specialToken = null;
+  Token matchedToken;
+  int curPos = 0;
+
+  EOFLoop :
+  for (;;)
+  {   
+   try   
+   {     
+      curChar = input_stream.BeginToken();
+   }     
+   catch(java.io.IOException e)
+   {        
+      jjmatchedKind = 0;
+      matchedToken = jjFillToken();
+      return matchedToken;
+   }
+
+   try { input_stream.backup(0);
+      while (curChar <= 32 && (0x100002400L & (1L << curChar)) != 0L)
+         curChar = input_stream.BeginToken();
+   }
+   catch (java.io.IOException e1) { continue EOFLoop; }
+   jjmatchedKind = 0x7fffffff;
+   jjmatchedPos = 0;
+   curPos = jjMoveStringLiteralDfa0_0();
+   if (jjmatchedKind != 0x7fffffff)
+   {
+      if (jjmatchedPos + 1 < curPos)
+         input_stream.backup(curPos - jjmatchedPos - 1);
+      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
+      {
+         matchedToken = jjFillToken();
+         return matchedToken;
+      }
+      else
+      {
+         continue EOFLoop;
+      }
+   }
+   int error_line = input_stream.getEndLine();
+   int error_column = input_stream.getEndColumn();
+   String error_after = null;
+   boolean EOFSeen = false;
+   try { input_stream.readChar(); input_stream.backup(1); }
+   catch (java.io.IOException e1) {
+      EOFSeen = true;
+      error_after = curPos <= 1 ? "" : input_stream.GetImage();
+      if (curChar == '\n' || curChar == '\r') {
+         error_line++;
+         error_column = 0;
+      }
+      else
+         error_column++;
+   }
+   if (!EOFSeen) {
+      input_stream.backup(1);
+      error_after = curPos <= 1 ? "" : input_stream.GetImage();
+   }
+   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
+  }
+}
+
+}
