work in progress

- Restore: pass NodeState(s) and Path instead of NodeId(s)
- LockManager: make sure lockmanager only remembers workspace states
- LockManager: make sure operations are executed using workspace states
- LockManager: improve isLocked/getLock/checkIsLocked and respect locks that
have been accessed before.
- VersionManager: make sure operations are executed using workspace states
- VersionManager: add checkIsCheckedOut
- VersionManager: force manager to have a WorkspaceManager
- NodeReferences:
  > make interface package protected
  > clarify method naming
  > add implementation to WorkspaceItemStateFactory
  > add NodeReferences field to NodeState
  > TO_IMPROVE: references are currently always retrieve from the SPI.
- ItemStateManager + NodeReferences
  > rename interfaces methods
  > change method signature to take NodeState instead of NodeId
  > 'getReferences' returns the property states directly

- remove some JR DIFFs. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432234 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeId;
+
+import java.util.Collection;
-    // DIFF JR: NodeId param instead of NodeReferenceId
-     * Return a node references object, given its target id.
+     * Return a collection of <code>PropertyState</code>s referring to the
+     * Node identified by the given <code>NodeState</code>.
-     * @param id target id
-     * @return node references object
-     * @throws NoSuchItemStateException if the item does not exist
-     * @throws ItemStateException if an error occurs
+     * @param nodeState
+     * @return property states refering to the node identified by the given id.
+     * @throws ItemStateException if the <code>PropertyState</code>s could not
+     * be retrieved or if some other error occurs.
-    NodeReferences getNodeReferences(NodeId id)
-        throws NoSuchItemStateException, ItemStateException;
+    Collection getReferingStates(NodeState nodeState) throws ItemStateException;
-    // DIFF JR: NodeId param instead of NodeReferenceId
-     * Return a flag indicating whether a node references object
-     * for a given target id exists.
+     * Return a flag indicating whether any references to the <code>Node</code>
+     * identified by the given state exist. In case the <code>Node</code> is not
+     * referenceable this method will always return false.
-     * @param id target id
-     * @return <code>true</code> if a node reference object exists for the given
-     *         id, otherwise <code>false</code>.
+     * @param nodeState
+     * @return <code>true</code> if any references exist to the <code>Node</code>
+     * identified by the given node state.
-    boolean hasNodeReferences(NodeId id);
+    boolean hasReferingStates(NodeState nodeState);
