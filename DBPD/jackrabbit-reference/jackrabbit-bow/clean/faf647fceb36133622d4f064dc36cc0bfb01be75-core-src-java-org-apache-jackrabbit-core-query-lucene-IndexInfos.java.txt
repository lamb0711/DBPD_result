JCR-189: QueryHandler should use lucene Input-/OutputStream implementations

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@233174 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystem;
-import org.apache.jackrabbit.core.fs.FileSystemException;
-
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.FileOutputStream;
+import java.io.OutputStream;
+ * Stores a sequence of index names.
+     * Returns <code>true</code> if this index infos exists in
+     * <code>dir</code>.
+     *
+     * @param dir the directory where to look for the index infos.
+     * @return <code>true</code> if it exists; <code>false</code> otherwise.
+     */
+    boolean exists(File dir) {
+        return new File(dir, name).exists();
+    }
+
+    /**
-     * @param fs the base file system
-     * @throws FileSystemException if an error occurs.
+     *
+     * @param dir the directory from where to read the index infos.
-    void read(FileSystem fs) throws FileSystemException, IOException {
-        DataInputStream input = new DataInputStream(fs.getInputStream(name));
+    void read(File dir) throws IOException {
+        InputStream in = new FileInputStream(new File(dir, name));
-            counter = input.readInt();
-            for (int i = input.readInt(); i > 0; i--) {
-                indexes.add(input.readUTF());
+            DataInputStream di = new DataInputStream(in);
+            counter = di.readInt();
+            for (int i = di.readInt(); i > 0; i--) {
+                indexes.add(di.readUTF());
-            input.close();
+            in.close();
-     * @param fs the base file system
-     * @throws FileSystemException if an error occurs.
+     *
+     * @param dir the directory where to write the index infos.
-    void write(FileSystem fs) throws FileSystemException, IOException {
+    void write(File dir) throws IOException {
-        DataOutputStream output = new DataOutputStream(fs.getOutputStream(name + ".new"));
+        File nu = new File(dir, name + ".new");
+        OutputStream out = new FileOutputStream(nu);
-            output.writeInt(counter);
-            output.writeInt(indexes.size());
+            DataOutputStream dataOut = new DataOutputStream(out);
+            dataOut.writeInt(counter);
+            dataOut.writeInt(indexes.size());
-                output.writeUTF(getName(i));
+                dataOut.writeUTF(getName(i));
-            output.close();
+            out.close();
-        fs.move(name + ".new", name);
+        // delete old
+        File old = new File(dir, name);
+        if (old.exists() && !old.delete()) {
+            throw new IOException("Unable to delete file: " + old.getAbsolutePath());
+        }
+        if (!nu.renameTo(old)) {
+            throw new IOException("Unable to rename file: " + nu.getAbsolutePath());
+        }
