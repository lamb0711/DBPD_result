work in progress

- SPI: replace String/Stream for values by QValue interface
- SPI: add factory for QValue
  > adjust commons and add implementation
  > adjust usages of former QValue object with jcr2spi, spi2dav
- RepositoryService.getChildInfos returns Iterator instead of Collection
- spi2dav: add implementation for new query interfaces

- TODO: 
  improve conversion of jcr-value to q-value and vice-versa




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497885 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.InputStream;
-     * @param propertyType
-    public void addProperty(NodeId parentId, QName propertyName, String value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException;
+    public void addProperty(NodeId parentId, QName propertyName, QValue value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException;
-     * @param propertyType the property type
-    public void addProperty(NodeId parentId, QName propertyName, String[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException;
-
-    /**
-     *
-     * @param parentId
-     * @param propertyName Name of the property to be created
-     * @param value
-     * @param propertyType
-     * @throws ValueFormatException
-     * @throws VersionException
-     * @throws LockException
-     * @throws ConstraintViolationException
-     * @throws PathNotFoundException
-     * @throws ItemExistsException
-     * @throws AccessDeniedException
-     * @throws UnsupportedRepositoryOperationException
-     * @throws RepositoryException
-     * @see javax.jcr.Node#setProperty(String, javax.jcr.Value, int)
-     * @see javax.jcr.Node#setProperty(String, String, int)
-     * @see javax.jcr.Node#setProperty(String, java.io.InputStream)
-     * @see javax.jcr.Session#importXML(String, java.io.InputStream, int)
-     */
-    public void addProperty(NodeId parentId, QName propertyName, InputStream value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException;
-
-    /**
-     * @param parentId
-     * @param propertyName Name of the property to be created
-     * @param values
-     * @param propertyType the property type
-     * @throws javax.jcr.ValueFormatException
-     * @throws javax.jcr.version.VersionException
-     * @throws javax.jcr.lock.LockException
-     * @throws javax.jcr.nodetype.ConstraintViolationException
-     * @throws javax.jcr.PathNotFoundException
-     * @throws javax.jcr.ItemExistsException
-     * @throws javax.jcr.AccessDeniedException
-     * @throws javax.jcr.UnsupportedRepositoryOperationException
-     * @throws javax.jcr.RepositoryException
-     * @see javax.jcr.Node#setProperty(String, javax.jcr.Value[])
-     * @see javax.jcr.Node#setProperty(String, javax.jcr.Value[], int)
-     * @see javax.jcr.Node#setProperty(String, String[])
-     * @see javax.jcr.Node#setProperty(String, String[], int)
-     * @see javax.jcr.Session#importXML(String, java.io.InputStream, int)
-     */
-    public void addProperty(NodeId parentId, QName propertyName, InputStream[] values, int propertyType) throws RepositoryException;
+    public void addProperty(NodeId parentId, QName propertyName, QValue[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException;
-     * @param propertyType
-    public void setValue(PropertyId propertyId, String value, int propertyType) throws RepositoryException;
+    public void setValue(PropertyId propertyId, QValue value) throws RepositoryException;
-     * @param propertyType the type of the property
-    public void setValue(PropertyId propertyId, String[] values, int propertyType) throws RepositoryException;
-
-    /**
-     *
-     * @param propertyId
-     * @param value
-     * @param propertyType
-     * @throws ValueFormatException
-     * @throws VersionException
-     * @throws LockException
-     * @throws ConstraintViolationException
-     * @throws AccessDeniedException
-     * @throws UnsupportedRepositoryOperationException
-     * @throws RepositoryException
-     * @see javax.jcr.Property#setValue(javax.jcr.Value)
-     * @see javax.jcr.Property#setValue(java.io.InputStream)
-     */
-    public void setValue(PropertyId propertyId, InputStream value, int propertyType) throws RepositoryException;
-
-    /**
-     * @param propertyId
-     * @param values
-     * @param propertyType the type of the property
-     * @throws javax.jcr.ValueFormatException
-     * @throws javax.jcr.version.VersionException
-     * @throws javax.jcr.lock.LockException
-     * @throws javax.jcr.nodetype.ConstraintViolationException
-     * @throws javax.jcr.AccessDeniedException
-     * @throws javax.jcr.UnsupportedRepositoryOperationException
-     * @throws javax.jcr.RepositoryException
-     * @see javax.jcr.Property#setValue(javax.jcr.Value[])
-     */
-    public void setValue(PropertyId propertyId, InputStream[] values, int propertyType) throws RepositoryException;
+    public void setValue(PropertyId propertyId, QValue[] values) throws RepositoryException;
-}
+}
