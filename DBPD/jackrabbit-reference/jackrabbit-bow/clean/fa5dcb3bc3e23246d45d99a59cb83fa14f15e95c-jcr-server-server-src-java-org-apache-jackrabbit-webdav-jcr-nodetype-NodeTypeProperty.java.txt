JCR-347 - Jcr-server: Parsing NodeTypeProperty not compliant with definition

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385458 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-        this(name, new NodeType[] {nodeType}, isProtected);
+        this(name, new NodeType[]{nodeType}, isProtected);
+    public NodeTypeProperty(DavPropertyName name, String[] nodeTypeNames, boolean isProtected) {
+        super(name, isProtected);
+        for (int i = 0; i < nodeTypeNames.length; i++) {
+            if (nodeTypeNames[i] != null) {
+                nodetypeNames.add(nodeTypeNames[i]);
+            }
+        }
+    }
+
-     * @throws IllegalArgumentException if the content of the specified property
-     * contains elements other than {@link NodeTypeConstants#XML_NODETYPE}.
-    public NodeTypeProperty(DavProperty property) throws DavException {
+    public NodeTypeProperty(DavProperty property) {
-        Object propValue = property.getValue();
-        Iterator it;
-        if (propValue instanceof List) {
-            it = ((List)propValue).iterator();
-        } else if (propValue instanceof Element) {
-            List l = new ArrayList();
-            l.add(propValue);
-            it = l.iterator();
+        if (property instanceof NodeTypeProperty) {
+            nodetypeNames.addAll(((NodeTypeProperty)property).nodetypeNames);
-            log.warn("Cannot build NodeTypeProperty from the given property.");
-            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Cannot build NodeTypeProperty from the given property.");
+            // assume property has be built from xml
+            Object propValue = property.getValue();
+            if (propValue instanceof List) {
+                retrieveNodeTypeNames(((List)propValue));
+            } else if (propValue instanceof Element) {
+                List l = new ArrayList();
+                l.add(propValue);
+                retrieveNodeTypeNames(l);
+            } else {
+                log.debug("NodeTypeProperty '" + property.getName() + "' has no/unparsable value.");
+            }
+    }
-            while (it.hasNext()) {
-                Object content = it.next();
+    private void retrieveNodeTypeNames(List elementList) {
+        Iterator it = elementList.iterator();
+        while (it.hasNext()) {
+            Object content = it.next();
-                }
+            }
-                String nodetypeName = DomUtil.getText(el);
+                String nodetypeName = DomUtil.getChildText(el, XML_NODETYPENAME, NodeTypeConstants.NAMESPACE);
-            }
-	} else {
+                }
+            } else {
