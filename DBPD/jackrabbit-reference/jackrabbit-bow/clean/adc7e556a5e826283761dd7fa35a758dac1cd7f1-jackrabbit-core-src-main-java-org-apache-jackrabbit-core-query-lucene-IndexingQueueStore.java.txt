JCR-1745: Mark pending nodes in IndexingQueue directly in index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@697873 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.RandomAccessOutputStream;
-import java.io.OutputStreamWriter;
-import java.io.Writer;
-import java.io.BufferedOutputStream;
- * <code>IndexingQueueStore</code> implements the persistent store to keep
- * track of pending document in an indexing queue.
+ * <code>IndexingQueueStore</code> implements a store that keeps the uuids of
+ * nodes that are pending in the indexing queue. Until Jackrabbit 1.4 this store
+ * was also persisted to a {@link FileSystem}. Starting with 1.5 the pending
+ * nodes are marked directly in the index with a special field.
+ * See {@link FieldNames#REINDEXING_REQUIRED}.
-     * The file system where to write the pending document UUIDs.
+     * The file system from where to read pending document UUIDs.
-     * Non-null if we are currently writing to the file.
-     */
-    private Writer out;
-
-    /**
-     * @throws IOException if an error occurs while writing.
-    public void addUUID(String uuid) throws IOException {
-        writeEntry(ADD, uuid, getLog());
+    public void addUUID(String uuid) {
-     * @throws IOException if an error occurs while writing.
-    public void removeUUID(String uuid) throws IOException {
-        writeEntry(REMOVE, uuid, getLog());
+    public void removeUUID(String uuid) {
-     * Commits the pending changes to the file.
-     *
-     * @throws IOException if an error occurs while writing.
+     * Closes this queue store.
-    public void commit() throws IOException {
-        if (out != null) {
-            out.flush();
-            if (pending.size() == 0) {
-                out.close();
-                out = null;
-                // truncate log
-                try {
-                    fs.getOutputStream(fileName).close();
-                } catch (FileSystemException e) {
-                    // ignore
+    public void close() {
+        if (pending.isEmpty()) {
+            try {
+                if (fs.exists(fileName)) {
+                    fs.deleteFile(fileName);
+            } catch (FileSystemException e) {
+                log.warn("unable to delete " + fileName);
-    /**
-     * Flushes and closes this queue store.
-     *
-     * @throws IOException if an error occurs while writing.
-     */
-    public void close() throws IOException {
-        commit();
-        if (out != null) {
-            out.close();
-        }
-    }
-
-
-    /**
-     * Writes an entry to the log file.
-     *
-     * @param op     the operation. Either {@link #ADD} or {@link #REMOVE}.
-     * @param uuid   the uuid of the added or removed node.
-     * @param writer the writer where the entry is written to.
-     * @throws IOException if an error occurs when writing the entry.
-     */
-    private static void writeEntry(String op, String uuid, Writer writer) throws IOException {
-        StringBuffer buf = new StringBuffer(op);
-        buf.append(' ').append(uuid).append('\n');
-        writer.write(buf.toString());
-    }
-
-    /**
-     * Returns the writer to the log file.
-     *
-     * @return the writer to the log file.
-     * @throws IOException if an error occurs while opening the log file.
-     */
-    private Writer getLog() throws IOException {
-        if (out == null) {
-            // open file
-            try {
-                long len = 0;
-                if (fs.exists(fileName)) {
-                    len = fs.length(fileName);
-                }
-                RandomAccessOutputStream raos
-                        = fs.getRandomAccessOutputStream(fileName);
-                raos.seek(len);
-                // use buffering
-                out = new OutputStreamWriter(
-                        new BufferedOutputStream(raos, 1024),
-                        ENCODING);
-            } catch (FileSystemException e) {
-                if (out != null) {
-                    out.close();
-                    out = null;
-                }
-                throw Util.createIOException(e);
-            }
-        }
-        return out;
-    }
