JCR-2762: Optimize bundle serialization

Remove the direct reference from NodePropBundle to BundleBinding to make it easier to later refactor the BundleBinding class.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1002601 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import java.util.HashSet;
-     * the bundle binding that handles this bundle
-     */
-    private final BundleBinding binding;
-
-    /**
-     * @param binding the bundle binding
+     *
-    public NodePropBundle(BundleBinding binding, NodeId id) {
-        this.binding = binding;
+    public NodePropBundle(NodeId id) {
-     * @param binding the bundle binding
+     *
-    public NodePropBundle(BundleBinding binding, NodeState state) {
-        this(binding, (NodeId) state.getId());
+    public NodePropBundle(NodeState state) {
+        this(state.getNodeId());
+     *
+     * @param blobStore BLOB store from where to delete previous property value
-    public void addProperty(PropertyState state) {
-        PropertyEntry old = properties.put(state.getName(), new PropertyEntry(state));
+    @SuppressWarnings("deprecation")
+    public void addProperty(PropertyState state, BLOBStore blobStore) {
+        PropertyEntry old =
+            properties.put(state.getName(), new PropertyEntry(state));
-            old.destroy(binding.getBlobStore());
+            old.destroy(blobStore);
+     *
+     * @param blobStore BLOB store from where to delete property values
-    public void removeAllProperties() {
-        Iterator<Name> iter = properties.keySet().iterator();
-        while (iter.hasNext()) {
-            Name name = (Name) iter.next();
-            removeProperty(name);
-            iter = properties.keySet().iterator();
+    @SuppressWarnings("deprecation")
+    public void removeAllProperties(BLOBStore blobStore) {
+        for (Name name : new HashSet<Name>(properties.keySet())) {
+            removeProperty(name, blobStore);
+     *
+     * @param blobStore BLOB store from where to delete the property value
-    public void removeProperty(Name name) {
-        PropertyEntry pe = (PropertyEntry) properties.remove(name);
+    @SuppressWarnings("deprecation")
+    public void removeProperty(Name name, BLOBStore blobStore) {
+        PropertyEntry pe = properties.remove(name);
-            pe.destroy(binding.getBlobStore());
+            pe.destroy(blobStore);
+        @SuppressWarnings("deprecation")
-            if (blobIds != null) {
-                for (int i = 0; i < blobIds.length; i++) {
-                    if (blobIds[i] != null) {
-                        try {
-                            blobStore.remove(blobIds[i]);
-                            log.debug("removed blob {}", blobIds[i]);
-                        } catch (Exception e) {
-                            log.error("Ingoring error while removing blob {}", blobIds[i], e);
-                        }
+            for (int i = 0; blobIds != null && i < blobIds.length; i++) {
+                if (blobIds[i] != null) {
+                    try {
+                        blobStore.remove(blobIds[i]);
+                        log.debug("removed blob {}", blobIds[i]);
+                    } catch (Exception e) {
+                        log.error("Ignoring error while removing blob " + blobIds[i], e);
+
+
