JCR-3747: Implement JackrabbitObservationManager
Initial implementation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1577244 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.id.NodeId;
-import org.apache.jackrabbit.core.cluster.ClusterNode;
-import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
-import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
-import org.apache.jackrabbit.spi.Path;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import org.apache.jackrabbit.api.observation.JackrabbitEventFilter;
+import org.apache.jackrabbit.api.observation.JackrabbitObservationManager;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.cluster.ClusterNode;
+import org.apache.jackrabbit.core.id.NodeId;
+import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
-public class ObservationManagerImpl implements ObservationManager, EventStateCollectionFactory {
+public class ObservationManagerImpl implements EventStateCollectionFactory,
+        JackrabbitObservationManager {
-        EventFilter filter = createEventFilter(eventTypes, absPath,
-                isDeep, uuid, nodeTypeName, noLocal);
+        EventFilter filter = createEventFilter(eventTypes, Collections.singletonList(absPath),
+                isDeep, uuid, nodeTypeName, noLocal, false);
+    @Override
+    public void addEventListener(EventListener listener, JackrabbitEventFilter filter)
+            throws RepositoryException {
+
+        List<String> absPaths = new ArrayList<String>(Arrays.asList(filter.getAdditionalPaths()));
+        if (filter.getAbsPath() != null) {
+            absPaths.add(filter.getAbsPath());
+        }
+
+        EventFilter f = createEventFilter(filter.getEventTypes(), absPaths,
+                filter.getIsDeep(), filter.getIdentifiers(), filter.getNodeTypes(),
+                filter.getNoLocal(), filter.getNoExternal());
+
+        dispatcher.addConsumer(new EventConsumer(session, listener, f));
+    }
+
-     * @param absPath an absolute path.
+     * @param absPaths absolute paths.
+     * @param noExternal a <code>boolean</code>.
-                                         String absPath,
+                                         List<String> absPaths,
-                                         boolean noLocal)
+                                         boolean noLocal,
+                                         boolean noExternal)
-        Path path;
-        try {
-            path = session.getQPath(absPath).getNormalizedPath();
-        } catch (NameException e) {
-            String msg = "invalid path syntax: " + absPath;
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        }
-        if (!path.isAbsolute()) {
-            throw new RepositoryException("absPath must be absolute");
-        }
+        List<Path> paths = new ArrayList<Path>();
+        for (String absPath : absPaths) {
+            try {
+                Path normalizedPath = session.getQPath(absPath).getNormalizedPath();
+                if (!normalizedPath.isAbsolute()) {
+                    throw new RepositoryException("absPath must be absolute");
+                }
+                paths.add(normalizedPath);
+            } catch (NameException e) {
+                String msg = "invalid path syntax: " + absPath;
+                log.debug(msg);
+                throw new RepositoryException(msg, e);
+
+        }            }
-                session, eventTypes, path, isDeep, ids, nodeTypes, noLocal);
+                session, eventTypes, paths, isDeep, ids, nodeTypes, noLocal, noExternal);
-                eventTypes, absPath, isDeep, uuid, nodeTypeName, false);
+                eventTypes, Collections.singletonList(absPath), isDeep, uuid, nodeTypeName, false, false);
