- Introduce ItemStateLifeCycleListener to keep track of status changes of an ItemState.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@429622 13f79535-47bb-0310-9956-ffa450edef68

+        disconnect();
+        overlayedState = null;
+        setStatus(STATUS_UNDEFINED);
-        disconnect();
-        overlayedState = null;
-        status = STATUS_UNDEFINED;
+    /**
+     * Notify the life cycle listeners that this state has changed its status.
+     */
+    protected void notifyStatusChanged(int oldStatus) {
+        // copy listeners to array to avoid ConcurrentModificationException
+        ItemStateListener[] la;
+        synchronized (listeners) {
+            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
+        }
+        for (int i = 0; i < la.length; i++) {
+            if (la[i] instanceof ItemStateLifeCycleListener) {
+                ((ItemStateLifeCycleListener) la[i]).statusChanged(this, oldStatus);
+            }
+        }
+    }
+
+     * TODO: this method should be at least protected. the outside should not
+     * TODO: control the status of an item state
+        if (status == newStatus) {
+            return;
+        }
+        int oldStatus = status;
-                return;
+                break;
+        notifyStatusChanged(oldStatus);
-            status = STATUS_UNDEFINED;
+            setStatus(STATUS_UNDEFINED);
-        status = STATUS_EXISTING;
+        setStatus(STATUS_EXISTING); // TODO: shouldn't the status change happen after pull?
-            status = STATUS_STALE_DESTROYED;
+            setStatus(STATUS_STALE_DESTROYED);
-            status = STATUS_EXISTING_REMOVED;
+            setStatus(STATUS_EXISTING_REMOVED);
-            status = STATUS_STALE_MODIFIED;
+            setStatus(STATUS_STALE_MODIFIED);
