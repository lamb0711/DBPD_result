JCR-3026 - apply modified patch (original author: chad davis)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1151110 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
+    /**
+     * Key for the client map during repo creation (no sessionInfo present)
+     */
+    private static final String CLIENT_KEY = "repoCreation";
+
+    /**
+     * Default value for the maximum number of connections per host such as
+     * configured with {@link HttpConnectionManagerParams#setDefaultMaxConnectionsPerHost(int)}.
+     */
+    public static final int MAX_CONNECTIONS_DEFAULT = 20;
+
-    private final Map<SessionInfo, HttpClient> clients = new HashMap<SessionInfo, HttpClient>();
+    private final ConcurrentMap<Object, HttpClient> clients;
+    /**
+     * Same as {@link #RepositoryServiceImpl(String, IdFactory, NameFactory, PathFactory, QValueFactory, int, int)}
+     * using {@link ItemInfoCacheImpl#DEFAULT_CACHE_SIZE)} as size for the item
+     * cache and {@link #MAX_CONNECTIONS_DEFAULT} for the maximum number of
+     * connections on the client.
+     *
+     * @param uri The server uri.
+     * @param idFactory The id factory.
+     * @param nameFactory The name factory.
+     * @param pathFactory The path factory.
+     * @param qValueFactory The value factory.
+     * @throws RepositoryException If an error occurs.
+     */
-            NameFactory nameFactory,
-            PathFactory pathFactory,
-            QValueFactory qValueFactory) throws RepositoryException {
-
+                                 NameFactory nameFactory, PathFactory pathFactory,
+                                 QValueFactory qValueFactory) throws RepositoryException {
+    /**
+     * Same as {@link #RepositoryServiceImpl(String, IdFactory, NameFactory, PathFactory, QValueFactory, int, int)}
+     * using {@link #MAX_CONNECTIONS_DEFAULT} for the maximum number of
+     * connections on the client.
+     * 
+     * @param uri The server uri.
+     * @param idFactory The id factory.
+     * @param nameFactory The name factory.
+     * @param pathFactory The path factory.
+     * @param qValueFactory The value factory.
+     * @param itemInfoCacheSize The size of the item info cache.
+     * @throws RepositoryException If an error occurs.
+     */
-                                 NameFactory nameFactory,
-                                 PathFactory pathFactory,
-                                 QValueFactory qValueFactory,
-                                 int itemInfoCacheSize) throws RepositoryException {
+                                 NameFactory nameFactory, PathFactory pathFactory,
+                                 QValueFactory qValueFactory, int itemInfoCacheSize) throws RepositoryException {
+        this(uri, idFactory, nameFactory, pathFactory, qValueFactory, itemInfoCacheSize, MAX_CONNECTIONS_DEFAULT);
+    }
+
+    /**
+     * Creates a new instance of this repository service.
+     *
+     * @param uri The server uri.
+     * @param idFactory The id factory.
+     * @param nameFactory The name factory.
+     * @param pathFactory The path factory.
+     * @param qValueFactory The value factory.
+     * @param itemInfoCacheSize The size of the item info cache.
+     * @param maximumHttpConnections A int &gt;0 defining the maximum number of
+     * connections per host to be configured on
+     * {@link HttpConnectionManagerParams#setDefaultMaxConnectionsPerHost(int)}.
+     * @throws RepositoryException If an error occurs.
+     */
+    public RepositoryServiceImpl(String uri, IdFactory idFactory,
+                                 NameFactory nameFactory, PathFactory pathFactory,
+                                 QValueFactory qValueFactory, int itemInfoCacheSize,
+                                 int maximumHttpConnections ) throws RepositoryException {
+
+        if (maximumHttpConnections > 0) {
+            HttpConnectionManagerParams connectionParams = connectionManager.getParams();
+            connectionParams.setDefaultMaxConnectionsPerHost(maximumHttpConnections);
+        }
+
+        // This configuration of the clients cache assumes that the level of
+        // concurrency on this map will be equal to the default number of maximum
+        // connections allowed on the httpClient level.
+        // TODO: review again
+        int concurrencyLevel = MAX_CONNECTIONS_DEFAULT;
+        int initialCapacity = MAX_CONNECTIONS_DEFAULT;
+        if (maximumHttpConnections > 0) {
+            concurrencyLevel = maximumHttpConnections;
+            initialCapacity = maximumHttpConnections;
+        }
+        clients = new ConcurrentHashMap<Object, HttpClient>(concurrencyLevel, .75f, initialCapacity);
+    /**
+     * Returns a key for the httpClient hash. The key is either the specified
+     * SessionInfo or a marker if the session info is null (used during
+     * repository instantiation).
+     *
+     * @param sessionInfo
+     * @return Key for the client map.
+     */
+    private static Object getClientKey(SessionInfo sessionInfo) {
+        return (sessionInfo == null) ? CLIENT_KEY : sessionInfo;
+    }
+
-        HttpClient client = clients.get(sessionInfo);
+        Object clientKey = getClientKey(sessionInfo);
+        HttpClient client = clients.get(clientKey);
-            clients.put(sessionInfo, client);
+            clients.put(clientKey, client);
-        HttpClient cl = clients.remove(sessionInfo);
+        HttpClient cl = clients.remove(getClientKey(sessionInfo));
