improved handling of (potentially large) binary data on import

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@345037 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.version.VersionManager;
+import org.apache.jackrabbit.core.version.VersionManager;
+import org.apache.jackrabbit.util.TransientFileFactory;
-import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.Reader;
-/*
-                        // @todo decode to temp file and pass FileInputStream to InternalValue factory method
-                        File tmpFile = null;
-                            tmpFile = File.createTempFile("bin", null);
-                            FileOutputStream out = new FileOutputStream(tmpFile);
-                            Base64.decode(tv.reader(), out);
-                            out.close();
-                            iva[i] = InternalValue.create(new FileInputStream(tmpFile));
-                        } catch (IOException ioe) {
-                            String msg = "failed to decode binary value";
-                            log.debug(msg, ioe);
-                            throw new RepositoryException(msg, ioe);
-                        } finally {
-                            // the temp file can be deleted because
-                            // the InternalValue instance has spooled
-                            // its contents
-                            if (tmpFile != null) {
-                                tmpFile.delete();
+                            if (tv.length() < 0x10000) {
+                                // < 65kb: deserialize BINARY type in memory
+                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                                Base64.decode(tv.retrieve(), baos);
+                                // no need to close ByteArrayOutputStream
+                                //baos.close();
+                                iva[i] = InternalValue.create(baos.toByteArray());
+                            } else {
+                                // >= 65kb: deserialize BINARY type
+                                // using Reader and temporay file
+                                TransientFileFactory fileFactory = TransientFileFactory.getInstance();
+                                File tmpFile = fileFactory.createTransientFile("bin", null, null);
+                                FileOutputStream out = new FileOutputStream(tmpFile);
+                                Reader reader = tv.reader();
+                                try {
+                                    Base64.decode(reader, out);
+                                } finally {
+                                    reader.close();
+                                    out.close();
+                                }
+                                iva[i] = InternalValue.create(tmpFile);
-                        }
-*/
-                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-                        try {
-                            Base64.decode(tv.reader(), baos);
-                            // no need to close ByteArrayOutputStream
-                            //baos.close();
-                            iva[i] = InternalValue.create(new ByteArrayInputStream(baos.toByteArray()));
