Removed JDOM dependency from nodetype XML handling (JCR-54)
 - converted all JDOM references to the equivalent standard DOM code
 - Moved the rest of XML references out of the NodeTypeDefStore class
 - Added the NodeTypeFormatter facade class
 - Made a number of small changes and restructurings to better match the DOM API
 - Added a mostly complete test case in src/test/o.a.j/core/nodetype/xml
   (the tests in .../test/api/nodetype are more concerned with the nodetype
   API than the XML handling)
 - Added a simple ValueConstraint.equals() method to simplify the test cases
   (fixes a problem in NodeTypeDef.equals())


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157940 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.Vector;
-import org.jdom.Element;
+import org.w3c.dom.CharacterData;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.Text;
+    /** The wildcard qualified name. */
+    private static final QName WILDCARD_NAME =
+        new QName(Constants.NS_DEFAULT_URI, WILDCARD);
+
-     * Returns the formatted XML element.
-     *
-     * @return XML element
-     */
-    public Element getElement() {
-        return element;
-    }
-
-    /**
-     * namespace resolver.
+     * namespace resolver. The wildcard name are converted to the special
+     * wildcard qualified name.
-                return new QName(Constants.NS_DEFAULT_URI, WILDCARD);
+                return WILDCARD_NAME;
-        String value = element.getAttributeValue(name);
+        String value = element.getAttribute(name);
-                    + " in element " + element.getName());
+                    + " in element " + element.getNodeName());
-     * Returns the named child element of the XML element.
+     * Returns an iterator of all the named child elements of the XML element.
-     * @param name child element name
-     * @return child element
+     * @param childName child element name
+     * @return child element iterator
-    protected Element getChild(String name) {
-        return element.getChild(name);
+    protected Iterator getChildElements(String childName) {
+        Vector children = new Vector();
+
+        NodeList nodes = element.getChildNodes();
+        for (int i = 0; i < nodes.getLength(); i++) {
+            Node node = nodes.item(i);
+            if (node.getNodeType() == Node.ELEMENT_NODE
+                    && childName.equals(node.getNodeName())) {
+                children.add(node);
+            }
+        }
+
+        return children.iterator();
-     * Returns an iterator of all the named child elements of the XML element.
+     * Returns the text contents of all the named grand child elements
+     * of the XML element. Returns <code>null</code> if the named child
+     * element does not exist.
-     * @param name child element name
-     * @return child element iterator
+     * @param childName child element name
+     * @param grandChildName grand child element name
+     * @return grand child contents, or <code>null</code>
-    protected Iterator getChildIterator(String name) {
-        return element.getChildren(name).iterator();
+    protected Collection getGrandChildContents(
+            String childName, String grandChildName) {
+        NodeList children = element.getChildNodes();
+        for (int i = 0; i < children.getLength(); i++ ) {
+            Node child = children.item(i);
+            if (child.getNodeType() == Node.ELEMENT_NODE
+                    && childName.equals(child.getNodeName())) {
+                Vector contents = new Vector();
+
+                NodeList nodes = child.getChildNodes();
+                for (int j = 0; j < nodes.getLength(); j++) {
+                    Node node = nodes.item(j);
+                    if (node.getNodeType() == Node.ELEMENT_NODE
+                            && grandChildName.equals(node.getNodeName())) {
+                        contents.add(getContents(node));
+                    }
+                }
+
+                return contents;
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Utility method to get the text contents of an XML element.
+     *
+     * @param element XML element
+     * @return trimmed text contents of the element
+     */
+    private static String getContents(Node element) {
+        StringBuffer text = new StringBuffer();
+
+        NodeList nodes = element.getChildNodes();
+        for (int i = 0; i < nodes.getLength(); i++) {
+            Node node = nodes.item(i);
+            if (node.getNodeType() == Node.TEXT_NODE) {
+                text.append(((CharacterData) node).getData());
+            }
+        }
+
+        return text.toString().trim();
+    }
+
+    /**
+     * Adds the given collection of string values as a grand child
+     * element structure. Each value in the collection is added as
+     * a separate grand child element below the created child element.
+     *
+     * @param childName child element name
+     * @param grandChildName grand child element name
+     * @param contents string value collection
+     */
+    protected void setGrandChildContents(
+            String childName, String grandChildName, Collection contents) {
+        Element child = newElement(childName);
+
+        Iterator iterator = contents.iterator();
+        while (iterator.hasNext()) {
+            String value = (String) iterator.next();
+            child.appendChild(newElement(grandChildName, value));
+        }
+
+        addChild(child);
+    }
+
+    /**
+     * Creates a new XML element.
+     *
+     * @param name element name
+     * @return XML element
+     */
+    protected Element newElement(String name) {
+        return element.getOwnerDocument().createElement(name);
+    }
+
+    /**
+     * Creates a new XML element with the given text content.
+     *
+     * @param name element name
+     * @param content element content
+     * @return XML element
+     */
+    protected Element newElement(String name, String content) {
+        Element element = newElement(name);
+        Text text = element.getOwnerDocument().createTextNode(content);
+        element.appendChild(text);
+        return element;
-        element.addContent(child);
+        element.appendChild(child);
