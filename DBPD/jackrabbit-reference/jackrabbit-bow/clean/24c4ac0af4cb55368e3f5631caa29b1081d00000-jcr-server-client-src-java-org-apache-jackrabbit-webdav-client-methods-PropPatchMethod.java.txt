- DavMethod: common interface for webdav extension of HttpClient methods.
- minor improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@397929 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.property.DavPropertyName;
+import org.apache.jackrabbit.webdav.property.DavPropertyNameIterator;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.MultiStatus;
+import org.apache.jackrabbit.webdav.MultiStatusResponse;
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.Status;
-import org.apache.xml.serialize.OutputFormat;
-import org.apache.xml.serialize.XMLSerializer;
+import org.apache.commons.httpclient.HttpState;
+import org.apache.commons.httpclient.HttpConnection;
-import java.io.ByteArrayOutputStream;
+import java.util.List;
+import java.util.Iterator;
+    private final DavPropertyNameSet propertyNames = new DavPropertyNameSet();
+
+    private DavException responseException;
+
+    /**
+     *
+     * @param uri
+     * @param changeList list of DavProperty (for 'set') and DavPropertyName
+     * (for 'remove') entries.
+     * @throws IOException
+     */
+    public PropPatchMethod(String uri, List changeList) throws IOException {
+        super(uri);
+        if (changeList == null || changeList.isEmpty()) {
+            throw new IllegalArgumentException("PROPPATCH cannot be executed without properties to be set or removed.");
+        }
+        try {
+            Document document = BUILDER_FACTORY.newDocumentBuilder().newDocument();
+            Element propUpdateElement = DomUtil.addChildElement(document, XML_PROPERTYUPDATE, NAMESPACE);
+
+            Element propElement = null;
+            boolean isSet = false;
+            Iterator it = changeList.iterator();
+            while (it.hasNext()) {
+                Object entry = it.next();
+                if (entry instanceof DavPropertyName) {
+                    // DAV:remove
+                    DavPropertyName removeName = (DavPropertyName)entry;
+                    if (propElement == null || isSet) {
+                        isSet = false;
+                        propElement = getPropElement(propUpdateElement, isSet);
+                    }
+                    propElement.appendChild(removeName.toXml(document));
+                    propertyNames.add(removeName);
+                } else if (entry instanceof DavProperty) {
+                    // DAV:set
+                    DavProperty setProperty = (DavProperty)entry;
+                    if (propElement == null || !isSet) {
+                        isSet = true;
+                        propElement = getPropElement(propUpdateElement, isSet);
+                    }
+                    propElement.appendChild(setProperty.toXml(document));
+                    propertyNames.add(setProperty.getName());
+                } else {
+                    throw new IllegalArgumentException("ChangeList may only contain DavPropertyName and DavProperty elements.");
+                }
+            }
+            setRequestBody(document);
+        } catch (ParserConfigurationException e) {
+            throw new IOException(e.getMessage());
+        }
+    }
+
+        if (setProperties.isEmpty() && removeProperties.isEmpty()) {
+            throw new IllegalArgumentException("Either setProperties or removeProperties can be empty; not both of them.");
+        }
+
+        propertyNames.addAll(removeProperties);
+        DavPropertyName[] setNames = setProperties.getPropertyNames();
+        for (int i = 0; i < setNames.length; i++) {
+            propertyNames.add(setNames[i]);
+        }
-            Element propupdate = DomUtil.createElement(document, XML_PROPERTYUPDATE, NAMESPACE);
+            Element propupdate = DomUtil.addChildElement(document, XML_PROPERTYUPDATE, NAMESPACE);
-            Element set = DomUtil.createElement(document, XML_SET, NAMESPACE);
-            set.appendChild(setProperties.toXml(document));
+            if (!setProperties.isEmpty()) {
+                Element set = DomUtil.addChildElement(propupdate, XML_SET, NAMESPACE);
+                set.appendChild(setProperties.toXml(document));
+            }
-            Element remove = DomUtil.createElement(document, XML_REMOVE, NAMESPACE);
-            remove.appendChild(removeProperties.toXml(document));
-
-            propupdate.appendChild(set);
-            propupdate.appendChild(remove);
-            document.appendChild(propupdate);
-
-            ByteArrayOutputStream out = new ByteArrayOutputStream();
-            OutputFormat format = new OutputFormat("xml", "UTF-8", true);
-            XMLSerializer serializer = new XMLSerializer(out, format);
-            serializer.setNamespaces(true);
-            serializer.asDOMSerializer().serialize(document);
-            setRequestBody(out.toString());
+            if (!removeProperties.isEmpty()) {
+                Element remove = DomUtil.addChildElement(propupdate, XML_REMOVE, NAMESPACE);
+                remove.appendChild(removeProperties.toXml(document));
+            }
+            setRequestBody(document);
+    private Element getPropElement(Element propUpdate, boolean isSet) {
+        Element updateEntry = DomUtil.addChildElement(propUpdate, (isSet) ? XML_SET : XML_REMOVE , NAMESPACE);
+        return DomUtil.addChildElement(updateEntry, XML_PROP, NAMESPACE);
+    }
+
+    //---------------------------------------------------------< HttpMethod >---
+
+    //------------------------------------------------------< DavMethodBase >---
+    /**
+     *
+     * @param statusCode
+     * @return true if status code is {@link DavServletResponse#SC_MULTI_STATUS 207 (Multi-Status)}.
+     * For compliance reason {@link DavServletResponse#SC_OK 200 (OK)} is
+     * interpreted as successful response as well.
+     */
+    protected boolean isSuccess(int statusCode) {
+        return statusCode == DavServletResponse.SC_MULTI_STATUS || statusCode == DavServletResponse.SC_OK;
+    }
+
+    /**
+     * 
+     * @param multiStatus
+     * @param httpState
+     * @param httpConnection
+     */
+    protected void processMultiStatusBody(MultiStatus multiStatus, HttpState httpState, HttpConnection httpConnection) {
+        // check of OK response contains all set/remove properties
+        MultiStatusResponse[] resp = multiStatus.getResponses();
+        if (resp.length != 1) {
+            log.warn("Expected a single multi-status response in PROPPATCH.");
+        }
+        boolean success = true;
+        // only check the first ms-response
+        for (int i = 0; i < 1; i++) {
+            DavPropertyNameSet okSet = resp[i].getPropertyNames(DavServletResponse.SC_OK);
+            if (okSet.isEmpty()) {
+                log.debug("PROPPATCH failed: No 'OK' response found for resource " + resp[i].getHref());
+                success = false;
+            } else {
+                DavPropertyNameIterator it = propertyNames.iterator();
+                while (it.hasNext()) {
+                    DavPropertyName pn = it.nextPropertyName();
+                    success = okSet.remove(pn);
+                }
+            }
+            if (!okSet.isEmpty()) {
+                StringBuffer b = new StringBuffer("The following properties outside of the original request where set or removed: ");
+                DavPropertyNameIterator it = okSet.iterator();
+                while (it.hasNext()) {
+                    b.append(it.nextPropertyName().toString()).append("; ");
+                }
+                log.warn(b.toString());
+            }
+        }
+        // if  build the error message
+        if (!success) {
+            Status[] st = resp[0].getStatus();
+            // TODO: respect multiple error reasons (not only the first one)
+            for (int i = 0; i < st.length && responseException == null; i ++) {
+                switch (st[i].getStatusCode()) {
+                    case DavServletResponse.SC_FAILED_DEPENDENCY:
+                        // ignore
+                        break;
+                    default:
+                        responseException = new DavException(st[i].getStatusCode());
+                }
+            }
+        }
+    }
+
+    /**
+     *
+     * @return
+     * @throws IOException
+     * @see DavMethod#getResponseException() 
+     */
+    public DavException getResponseException() throws IOException {
+        checkUsed();
+        if (getSuccess()) {
+            String msg = "Cannot retrieve exception from successful response.";
+            log.warn(msg);
+            throw new IllegalStateException(msg);
+        }
+        if (responseException != null) {
+            return responseException;
+        } else {
+            return super.getResponseException();
+        }
+    }
