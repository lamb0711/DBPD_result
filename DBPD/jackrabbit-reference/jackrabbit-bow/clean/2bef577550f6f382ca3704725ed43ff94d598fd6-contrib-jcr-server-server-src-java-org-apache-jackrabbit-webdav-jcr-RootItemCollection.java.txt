JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.DavResource;
+import org.apache.jackrabbit.webdav.DavResourceFactory;
+import org.apache.jackrabbit.webdav.DavResourceLocator;
+import org.apache.jackrabbit.webdav.DavSession;
+import org.apache.jackrabbit.webdav.MultiStatusResponse;
+import org.apache.jackrabbit.webdav.jcr.property.NamespacesProperty;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.property.DavPropertyNameSet;
+import org.apache.jackrabbit.webdav.property.DavPropertySet;
-import org.apache.jackrabbit.webdav.*;
-import org.apache.jackrabbit.webdav.property.*;
-import org.jdom.Element;
+import javax.jcr.Item;
-import javax.jcr.Item;
-import java.util.*;
+import java.util.Iterator;
+import java.util.Properties;
-            Object v = property.getValue();
-            if (v instanceof List) {
-                Map changeMap = new HashMap();
-                // retrieve list of prefix/uri pairs that build the new values of
-                // the ns-registry
-                Iterator it = ((List)v).iterator();
-                while (it.hasNext()) {
-                    Object listEntry = it.next();
-                    if (listEntry instanceof Element) {
-                        Element e = (Element)listEntry;
-                        if (XML_NAMESPACE.equals(e.getName())) {
-                            String prefix = e.getChildText(XML_PREFIX, NAMESPACE);
-                            String uri = e.getChildText(XML_URI, NAMESPACE);
-                            changeMap.put(prefix, uri);
-                        }
-                    }
-                }
+            NamespacesProperty nsp = new NamespacesProperty(property);
+                Properties changes = nsp.getNamespaces();
-                        if (!changeMap.containsKey(prfx)) {
+                    if (!changes.containsKey(prfx)) {
-                        } else if (changeMap.get(prfx).equals(nsReg.getURI(prfx))) {
+                    } else if (changes.get(prfx).equals(nsReg.getURI(prfx))) {
-                            changeMap.remove(prfx);
+                        changes.remove(prfx);
-                    Iterator prefixIt = changeMap.keySet().iterator();
+                Iterator prefixIt = changes.keySet().iterator();
-                        String uri = (String)changeMap.get(prefix);
+                    String uri = (String)changes.get(prefix);
-                log.warn("Unexpected structure of dcr:namespace property.");
-                throw new DavException(DavServletResponse.SC_INTERNAL_SERVER_ERROR);
-            }
-        } else {
-            String[] prefixes = nsReg.getPrefixes();
-            Element[] nsElems = new Element[prefixes.length];
-            for (int i = 0; i < prefixes.length; i++) {
-                Element elem = new Element(XML_NAMESPACE, NAMESPACE);
-                elem.addContent(new Element(XML_PREFIX, NAMESPACE).setText(prefixes[i]));
-                elem.addContent(new Element(XML_URI, NAMESPACE)).setText(nsReg.getURI(prefixes[i]));
-                nsElems[i] = elem;
-            }
-            properties.add(new DefaultDavProperty(JCR_NAMESPACES, nsElems, false));
+            DavProperty namespacesProp = new NamespacesProperty(nsReg);
+            properties.add(namespacesProp);
