JCR-2715: Improved join query performance

Use the new join functionality for handling simple inner equi-joins.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1024283 13f79535-47bb-0310-9956-ffa450edef68

+import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_JOIN_TYPE_INNER;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.jcr.Value;
+import javax.jcr.query.QueryResult;
+import javax.jcr.query.qom.EquiJoinCondition;
+import javax.jcr.query.qom.Join;
+import javax.jcr.query.qom.QueryObjectModelConstants;
+import org.apache.jackrabbit.core.query.lucene.join.QueryEngine;
+import org.apache.jackrabbit.spi.Name;
+    private final Map<String, Value> variables = new HashMap<String, Value>();
+
+        for (Name name : query.getBindVariableNames()) {
+            variables.put(sessionContext.getJCRName(name), null);
+        }
+    @Override
+    public void bindValue(String varName, Value value)
+            throws IllegalArgumentException, RepositoryException {
+        super.bindValue(varName, value);
+        variables.put(varName, value);
+    }
+
+    public QueryResult execute() throws RepositoryException {
+        Source source = getSource();
+        if (source instanceof Join) {
+            Join join = (Join) source;
+            if (JCR_JOIN_TYPE_INNER.equals(join.getJoinType())
+                    && join.getJoinCondition() instanceof EquiJoinCondition) {
+                QueryEngine engine =
+                    new QueryEngine(sessionContext.getSessionImpl(), variables);
+                return engine.execute(
+                        getColumns(), getSource(), getConstraint(),
+                        getOrderings(), offset, limit);
+            }
+        }
+        return super.execute();
+    }
+
