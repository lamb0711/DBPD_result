- Use ItemStateLifeCycleListener instead of ItemStateListener in ItemImpl.
- Remove usage of ItemState.dispose() and the method itself.
- Remove method ItemStateListener.stateDiscarded() and all implementations of that method.
- Remove unused methods in ChangeLog: disconnect() and undo()
- Remove ItemState.discard() and related methods
- Rename ItemState.copy() to ItemState.copyFrom()
- Remove ItemState.STATUS_UNDEFINED. An ItemState always has a defined status!
- Rename TransientItemStateManager.disposeAllItemStates() to simply dispose().
- Introduce method ItemState.refresh() which is called instead of discard(). (Not yet implemented!)
- Clarify useage of WorkspaceManager.onEventReceived()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@433998 13f79535-47bb-0310-9956-ffa450edef68

-     * the status is undefined
-     */
-    public static final int STATUS_UNDEFINED = 0;
-    /**
-    protected int status = STATUS_UNDEFINED;
+    protected int status;
-    abstract void copy(ItemState state);
+    abstract void copyFrom(ItemState state);
-            copy(overlayedState);
+            copyFrom(overlayedState);
-            overlayedState.copy(this);
-        }
-    }
-
-    /**
-     * Called by <code>TransientItemStateManager</code> and
-     * <code>LocalItemStateManager</code> when this item state has been disposed.
-     */
-    void onDisposed() {
-        disconnect();
-        overlayedState = null;
-        setStatus(STATUS_UNDEFINED);
-        // prepare this instance so it can be gc'ed
-        synchronized (listeners) {
-            listeners.clear();
+            overlayedState.copyFrom(this);
-
-     * Discards this instance, i.e. renders it 'invalid'.
+     * Refreshes this item state
-    protected void discard() {
-        if (status != STATUS_UNDEFINED) {
-            // notify listeners
-            notifyStateDiscarded();
-            // reset status
-            setStatus(STATUS_UNDEFINED);
-        }
-    }
-
-    /**
-     * Notify the listeners that the persistent state this object is
-     * representing has been discarded.
-     */
-    protected void notifyStateDiscarded() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDiscarded(this);
-            }
-        }
+    protected void refresh() {
+        // TODO: how is this done? where is the new state retrieved from???
+        // TODO: pass in as argument?
-            case STATUS_UNDEFINED:
-            case STATUS_UNDEFINED:
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        // underlying persistent state has been discarded, discard this instance too
-        discard();
-    }
