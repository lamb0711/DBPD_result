JCR-1104: JSR 283 support

Add default implementations of some new Session methods in JCR 2.0

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@771687 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Property;
+    private String toRelativePath(String absPath) throws PathNotFoundException {
+        if (absPath.startsWith("/") && absPath.length() > 1) {
+            return absPath.substring(1);
+        } else {
+            throw new PathNotFoundException("Not an absolute path: " + absPath);
+        }
+    }
+
+     * @see Session#getItem(String)
-        if (!absPath.startsWith("/")) {
-            throw new PathNotFoundException("Not an absolute path: " + absPath);
-        }
-
-        String relPath = absPath.substring(1);
-        if (relPath.length() == 0) {
+        if (absPath.equals("/")) {
-        }
-
-        try {
-            return root.getNode(relPath);
-        } catch (PathNotFoundException e) {
-            return root.getProperty(relPath);
+        } else {
+            String relPath = toRelativePath(absPath);
+            if (root.hasNode(relPath)) {
+                return root.getNode(relPath);
+            } else {
+                return root.getProperty(relPath);
+            }
+     * @see Session#itemExists(String)
-        try {
-            getItem(absPath);
+        if (absPath.equals("/")) {
-        } catch (PathNotFoundException e) {
+        } else {
+            Node root = getRootNode();
+            String relPath = toRelativePath(absPath);
+            return root.hasNode(relPath) || root.hasProperty(relPath);
+        }
+    }
+
+    /**
+     * Removes the identified item. Implemented by calling
+     * {@link Item#remove()} on the item removed by {@link #getItem(String)}.
+     *
+     * @see Session#removeItem(String)
+     * @param absolute path of the item to be removed
+     * @throws RepositoryException if the item can not be removed
+     */
+    public void removeItem(String absPath) throws RepositoryException {
+        getItem(absPath).remove();
+    }
+
+    /**
+     * Returns the node with the given absolute path.
+     *
+     * @see Session#getNode(String)
+     * @param absPath absolute path
+     * @return node at the given path
+     * @throws RepositoryException if the node can not be accessed
+     */
+    public Node getNode(String absPath) throws RepositoryException {
+        Node root = getRootNode();
+        if (absPath.equals("/")) {
+            return root;
+        } else {
+            return root.getNode(toRelativePath(absPath));
+        }
+    }
+
+    /**
+     * Checks whether a node with the given absolute path exists.
+     *
+     * @see Session#nodeExists(String)
+     * @param absPath absolute path
+     * @return <code>true</code> if a node with the given path exists,
+     *         <code>false</code> otherwise
+     * @throws RepositoryException if the path is invalid
+     */
+    public boolean nodeExists(String absPath) throws RepositoryException {
+        if (absPath.equals("/")) {
+            return true;
+        } else {
+            return getRootNode().hasNode(toRelativePath(absPath));
+        }
+    }
+
+    /**
+     * Returns the property with the given absolute path.
+     *
+     * @see Session#getProperty(String)
+     * @param absPath absolute path
+     * @return node at the given path
+     * @throws RepositoryException if the property can not be accessed
+     */
+    public Property getProperty(String absPath) throws RepositoryException {
+        if (absPath.equals("/")) {
+            throw new RepositoryException("The root node is not a property");
+        } else {
+            return getRootNode().getProperty(toRelativePath(absPath));
+        }
+    }
+
+    /**
+     * Checks whether a property with the given absolute path exists.
+     *
+     * @see Session#propertyExists(String)
+     * @param absPath absolute path
+     * @return <code>true</code> if a property with the given path exists,
+     *         <code>false</code> otherwise
+     * @throws RepositoryException if the path is invalid
+     */
+    public boolean propertyExists(String absPath) throws RepositoryException {
+        if (absPath.equals("/")) {
+        } else {
+            return getRootNode().hasProperty(toRelativePath(absPath));
