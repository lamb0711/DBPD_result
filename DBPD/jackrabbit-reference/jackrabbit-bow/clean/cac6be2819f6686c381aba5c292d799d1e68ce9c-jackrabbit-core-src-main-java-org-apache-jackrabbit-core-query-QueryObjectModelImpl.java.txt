JCR-2085: test case (TCK) maintenance for JCR 2.0
- more query tests
- storing of JQOM and SQL2 as node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@786480 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.name.NameConstants;
- * <code>QueryObjectModelImpl</code>...
+ * <code>QueryObjectModelImpl</code> implements the query object model.
-     * @inheritDoc
+     * {@inheritDoc}
+     * @throws UnsupportedOperationException always.
-                     String language) throws InvalidQueryException {
-        checkNotInitialized();
-        this.session = session;
-        this.language = language;
-        this.handler = handler;
-        this.statement = statement;
-        this.query = handler.createExecutableQuery(session, itemMgr,
-                createQOMTree(statement, language));
-        setInitialized();
+                     String language,
+                     Node node) throws InvalidQueryException {
+        throw new UnsupportedOperationException();
-     * @inheritDoc
-     */
-    public void init(SessionImpl session,
-                     ItemManager itemMgr,
-                     QueryHandler handler,
-                     Node node) throws InvalidQueryException, RepositoryException {
-        checkNotInitialized();
-        this.session = session;
-        this.node = node;
-        this.handler = handler;
-
-        if (!node.isNodeType(session.getJCRName(NameConstants.NT_QUERY))) {
-            throw new InvalidQueryException("node is not of type nt:query");
-        }
-        this.statement = node.getProperty(session.getJCRName(NameConstants.JCR_STATEMENT)).getString();
-        this.language = node.getProperty(session.getJCRName(NameConstants.JCR_LANGUAGE)).getString();
-        this.query = handler.createExecutableQuery(session, itemMgr,
-                createQOMTree(statement, language));
-        setInitialized();
-    }
-
-    /**
-     * @inheritDoc
+     * Initializes a query instance from a query object model.
+     *
+     * @param session  the session of the user executing this query.
+     * @param itemMgr  the item manager of the session executing this query.
+     * @param handler  the query handler of the search index.
+     * @param qomTree  the query object model tree.
+     * @param language the original query syntax from where the JQOM was
+     *                 created.
+     * @param node     a nt:query node where the query was read from or
+     *                 <code>null</code> if it is not a stored query.
+     * @throws InvalidQueryException if the qom tree cannot be serialized
+     *                               according to the given language.
+     * @throws RepositoryException   if another error occurs
-                     String language)
+                     String language,
+                     Node node)
+        this.node = node;
-
-
-    //------------------------------< internal >--------------------------------
-
-    /**
-     * Creates a {@link QueryObjectModelTree} representation for the query
-     * <code>statement</code>.
-     *
-     * @param statement the query statement.
-     * @param language  the language of the query statement.
-     * @return the {@link QueryObjectModelTree} representation.
-     * @throws InvalidQueryException if the query statement is malformed.
-     */
-    private QueryObjectModelTree createQOMTree(String statement,
-                                               String language)
-            throws InvalidQueryException {
-        // TODO: implement
-        return null;
-    }
