Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.lock.LockDiscovery;
-import org.apache.jackrabbit.webdav.lock.Type;
-import org.apache.jackrabbit.webdav.lock.Scope;
-import javax.jcr.lock.LockException;
-import javax.jcr.RepositoryException;
-import java.util.List;
-import java.util.Iterator;
-
-    private ActiveLock activeLock;
+    private final ActiveLock activeLock;
+    private final NodeId nodeId;
-    public LockInfoImpl(LockDiscovery ld, NodeId nodeId) throws LockException, RepositoryException {
-        List activeLocks = (List) ld.getValue();
-        Iterator it = activeLocks.iterator();
-        while (it.hasNext()) {
-            ActiveLock l = (ActiveLock) it.next();
-            Scope sc = l.getScope();
-            if (l.getType() == Type.WRITE && (sc == Scope.EXCLUSIVE || sc == ItemResourceConstants.EXCLUSIVE_SESSION)) {
-                if (activeLock != null) {
-                    throw new RepositoryException("Node " + nodeId + " contains multiple exclusive write locks.");
-                } else {
-                    activeLock = l;
-                }
-            }
-        }
-
-        if (activeLock == null) {
-            throw new LockException("No lock present on node " + nodeId);
-        }
+    public LockInfoImpl(ActiveLock activeLock, NodeId nodeId) {
+        this.activeLock = activeLock;
+        this.nodeId = nodeId;
+
+    public NodeId getNodeId() {
+        return nodeId;
+    }
