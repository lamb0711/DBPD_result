JCR-3119 Improve aggregate node indexing code

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1185735 13f79535-47bb-0310-9956-ffa450edef68

-                        List<Fieldable> fulltextFields = new ArrayList<Fieldable>();
-                        fulltextFields.addAll(removeFields(doc, FieldNames.FULLTEXT));
-                        Collections.sort(fulltextFields, new Comparator<Fieldable>() {
-                            public int compare(Fieldable o1, Fieldable o2) {
-                                return Boolean.valueOf(o2.isStored()).compareTo(o1.isStored());
-                            }
-                        });
+                        Fieldable[] fulltextFields = doc
+                                .getFieldables(FieldNames.FULLTEXT);
+                        doc.removeFields(FieldNames.FULLTEXT);
+                        Arrays.sort(fulltextFields, FIELDS_COMPARATOR_STORED);
-    /**
-     * Removes the fields with the given <code>name</code> from the
-     * <code>document</code> and returns them in a collection.
-     *
-     * @param document the document.
-     * @param name     the name of the fields to remove.
-     * @return the removed fields.
-     */
-    protected final Collection<Fieldable> removeFields(Document document,
-                                                 String name) {
-        List<Fieldable> fields = new ArrayList<Fieldable>();
-        fields.addAll(Arrays.asList(document.getFieldables(name)));
-        document.removeFields(FieldNames.FULLTEXT);
-        return fields;
-    }
+    private static final Comparator<Fieldable> FIELDS_COMPARATOR_STORED = new Comparator<Fieldable>() {
+        public int compare(Fieldable o1, Fieldable o2) {
+            return Boolean.valueOf(o2.isStored()).compareTo(o1.isStored());
+        }
+    };
