JCR-2092: make spi query code compatible with JCR 2.0

Update jackrabbit-core to use JCR 2.0 interfaces instead of the SPI versions

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@770284 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.Value;
+import javax.jcr.Value;
+import javax.jcr.query.qom.QueryObjectModelConstants;
-import org.apache.jackrabbit.spi.commons.query.jsr283.qom.QueryObjectModelConstants;
-import org.apache.jackrabbit.spi.commons.query.qom.SelectorImpl;
-import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.query.qom.SelectorImpl;
-    private final int operator;
+    private final String operator;
-     * Creates a new comparision constraint.
+     * Creates a new comparison constraint.
-                                int operator,
+                                String operator,
-        switch (operator) {
-            case OPERATOR_EQUAL_TO:
-                return c == 0;
-            case OPERATOR_GREATER_THAN:
-                return c > 0;
-            case OPERATOR_GREATER_THAN_OR_EQUAL_TO:
-                return c >= 0;
-            case OPERATOR_LESS_THAN:
-                return c < 0;
-            case OPERATOR_LESS_THAN_OR_EQUAL_TO:
-                return c <= 0;
-            case OPERATOR_NOT_EQUAL_TO:
-                return c != 0;
-            default:
-                throw new IllegalStateException("unsupported operation: " + operator);
+        if (JCR_OPERATOR_EQUAL_TO.equals(operator)) {
+            return c == 0;
+        } else if (JCR_OPERATOR_GREATER_THAN.equals(operator)) {
+            return c > 0;
+        } else if (JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO.equals(operator)) {
+            return c >= 0;
+        } else if (JCR_OPERATOR_LESS_THAN.equals(operator)) {
+            return c < 0;
+        } else if (JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO.equals(operator)) {
+            return c <= 0;
+        } else if (JCR_OPERATOR_NOT_EQUAL_TO.equals(operator)) {
+            return c != 0;
+        } else {
+            throw new IllegalStateException("unsupported operation: " + operator);
