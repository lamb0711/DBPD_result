JCR-73: some javadoc improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@164228 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Iterator;
-     * The default logger.
+     * Logger instance for this class
-     * The underlying node type registry.
+     * The wrapped node type registry.
-     * Constructor.
+     * Creates a new <code>NodeTypeManagerImpl</code> instance.
+     *
+     * @param ntReg      node type registry
+     * @param nsResolver namespace resolver
-    public NodeTypeManagerImpl(NodeTypeRegistry ntReg, NamespaceResolver nsResolver) {
+    public NodeTypeManagerImpl(NodeTypeRegistry ntReg,
+                               NamespaceResolver nsResolver) {
-        // setup caches with soft references to node type & item definition instances
+        // setup caches with soft references to node type
+        // & item definition instances
-            NodeDefinitionImpl nd = (NodeDefinitionImpl) ndCache.get(id);
-            if (nd == null) {
-                NodeDef cnd = ntReg.getNodeDef(id);
-                if (cnd != null) {
-                    nd = new NodeDefinitionImpl(cnd, this, nsResolver);
-                    ndCache.put(id, nd);
+            NodeDefinitionImpl ndi = (NodeDefinitionImpl) ndCache.get(id);
+            if (ndi == null) {
+                NodeDef nd = ntReg.getNodeDef(id);
+                if (nd != null) {
+                    ndi = new NodeDefinitionImpl(nd, this, nsResolver);
+                    ndCache.put(id, ndi);
-            return nd;
+            return ndi;
-    //-------------------------------------------< NodeTypeRegistryListener >---
+    //---------------------------------------------< NodeTypeRegistryListener >
-        // ignore
+        // not interested, ignore
-        // flush cache
+        // flush all affected cache entries
-        // just clear all definitions from cache
-        // @todo do smart/selective flush of definition caches
-        pdCache.clear();
-        ndCache.clear();
+        synchronized(pdCache) {
+            Iterator iter = pdCache.values().iterator();
+            while (iter.hasNext()) {
+                PropDefImpl pd = (PropDefImpl) iter.next();
+                if (ntName.equals(pd.getDeclaringNodeType())) {
+                    iter.remove();
+                }
+            }
+        }
+        synchronized(ndCache) {
+            Iterator iter = ndCache.values().iterator();
+            while (iter.hasNext()) {
+                NodeDefImpl nd = (NodeDefImpl) iter.next();
+                if (ntName.equals(nd.getDeclaringNodeType())) {
+                    iter.remove();
+                }
+            }
+        }
-        // sync cache
+        // flush all affected cache entries
-        // just clear all definitions from cache
-        // @todo do smart/selective flush of definition caches
-        pdCache.clear();
-        ndCache.clear();
+        synchronized(pdCache) {
+            Iterator iter = pdCache.values().iterator();
+            while (iter.hasNext()) {
+                PropDefImpl pd = (PropDefImpl) iter.next();
+                if (ntName.equals(pd.getDeclaringNodeType())) {
+                    iter.remove();
+                }
+            }
+        }
+        synchronized(ndCache) {
+            Iterator iter = ndCache.values().iterator();
+            while (iter.hasNext()) {
+                NodeDefImpl nd = (NodeDefImpl) iter.next();
+                if (ntName.equals(nd.getDeclaringNodeType())) {
+                    iter.remove();
+                }
+            }
+        }
-    //----------------------------------------------------< NodeTypeManager >---
+    //------------------------------------------------------< NodeTypeManager >
-    public NodeType getNodeType(String nodeTypeName) throws NoSuchNodeTypeException {
+    public NodeType getNodeType(String nodeTypeName)
+            throws NoSuchNodeTypeException {
-    //--------------------------------------------------------< diagnostics >---
+    //----------------------------------------------------------< diagnostics >
-     * Dumps the state of this <code>NodeTypeManager</code> instance.
+     * Dumps the state of this <code>NodeTypeManagerImpl</code> instance.
-    //------------------------------------------------------< inner classes >---
+    //--------------------------------------------------------< inner classes >
