JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Element;
-import org.jdom.Namespace;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-import java.util.List;
-import java.util.ArrayList;
+import java.util.Set;
+import java.util.HashSet;
-    private List queryLanguages = new ArrayList();
+    private final Set queryGrammers = new HashSet();
-       this(null);
-    }
-
-    /**
-     * Create a new <code>QueryGrammerSet</code> from the given query languages
-     * string array. The default {@link SearchConstants#NAMESPACE} is assumed.
-     * @param qLanguages
-     */
-    public QueryGrammerSet(String[] qLanguages) {
-        if (qLanguages != null) {
-            for (int i = 0; i < qLanguages.length; i++) {
-                queryLanguages.add(new Element(qLanguages[i], SearchConstants.NAMESPACE));
-            }
-        }
-     * Add another query language to this set.
+     * Add another query queryGrammer to this set.
-     * @param qLanguage
+     * @param grammerName
-    public void addQueryLanguage(String qLanguage, Namespace namespace) {
-        if (namespace == null) {
-            namespace = SearchConstants.NAMESPACE;
-        }
-        queryLanguages.add(new Element(qLanguage, namespace));
+    public void addQueryLanguage(String grammerName, Namespace namespace) {
+        queryGrammers.add(new Grammer(grammerName, namespace));
-        int size = queryLanguages.size();
+        int size = queryGrammers.size();
-            Element[] elements = (Element[]) queryLanguages.toArray(new Element[size]);
-            for (int i = 0; i < elements.length; i++) {
-                qLangStr[i] = elements[i].getNamespaceURI() + elements[i].getName();
+            Grammer[] grammers = (Grammer[]) queryGrammers.toArray(new Grammer[size]);
+            for (int i = 0; i < grammers.length; i++) {
+                qLangStr[i] = grammers[i].namespace.getURI() + grammers[i].localName;
-     * @see org.apache.jackrabbit.webdav.property.DavProperty#toXml()
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
+     * @param document
-    public Element toXml() {
-        Element elem = getName().toXml();
-        Iterator qlIter = queryLanguages.iterator();
+    public Element toXml(Document document) {
+        Element elem = getName().toXml(document);
+        Iterator qlIter = queryGrammers.iterator();
-            Element grammer = new Element(XML_GRAMMER, SearchConstants.NAMESPACE).addContent((Element)qlIter.next());
-            Element sqg = new Element(XML_QUERY_GRAMMAR, SearchConstants.NAMESPACE).addContent(grammer);
-            elem.addContent(sqg);
+            Element sqg = DomUtil.addChildElement(elem, XML_QUERY_GRAMMAR, SearchConstants.NAMESPACE);
+            Element grammer = DomUtil.addChildElement(sqg, XML_GRAMMER, SearchConstants.NAMESPACE);
+            Grammer qGrammer = (Grammer)qlIter.next();
+            DomUtil.addChildElement(grammer, qGrammer.localName, qGrammer.namespace);
-     * Returns the list of supported query languages.
+     * Returns the set of supported query grammers.
-        return queryLanguages;
+        return queryGrammers;
+    }
+
+
+    private class Grammer {
+
+        private final String localName;
+        private final Namespace namespace;
+        private final int hashCode;
+
+        Grammer(String localName, Namespace namespace) {
+            this.localName = localName;
+            this.namespace = namespace;
+            hashCode = DomUtil.getQualifiedName(localName, namespace).hashCode();
+        }
+
+        public int hashCode() {
+            return hashCode;
+        }
+
+        public boolean equals(Object obj) {
+            if (obj == this) {
+                return true;
+            }
+            if (obj instanceof Grammer) {
+                return obj.hashCode() == hashCode();
+            }
+            return false;
+        }
