Use the standard exception root cause mechanism included in JDK 1.4.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@374383 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.PrintStream;
-import java.io.PrintWriter;
-
-     * Root failure cause
-     */
-    private final Throwable rootCause;
-
-    /**
-        rootCause = null;
-        rootCause = null;
-        super(message);
-        this.rootCause = rootCause;
+        super(message, rootCause);
-        super();
-        this.rootCause = rootCause;
+        super(rootCause);
-    /**
-     * Returns the detail message, including the message from the nested
-     * exception if there is one.
-     *
-     * @return the detail message (which may be <code>null</code>).
-     */
-    public String getMessage() {
-        String s = super.getMessage();
-        if (rootCause == null) {
-            return s;
-        } else if (s == null) {
-            return rootCause.getMessage();
-        } else {
-            return s + ": " + rootCause.getMessage();
-        }
-    }
-
-    /**
-     * Creates a localized description of this exception.
-     * Subclasses may override this method in order to produce a
-     * locale-specific message. For subclasses that do not override this
-     * method, the default implementation returns the same result as
-     * <code>getMessage()</code>.
-     *
-     * @return The localized description of this exception.
-     */
-    public String getLocalizedMessage() {
-        return getMessage();
-    }
-
-    /**
-     * Returns the cause of this exception or <code>null</code> if the
-     * cause is nonexistent or unknown. (The cause is the throwable that
-     * caused this exception to get thrown.)
-     *
-     * @return the cause of this exception or <code>null</code> if the
-     *         cause is nonexistent or unknown.
-     */
-    public Throwable getCause() {
-        return rootCause;
-    }
-
-    /**
-     * Prints this <code>RepositoryException</code> and its backtrace to the
-     * standard error stream.
-     */
-    public void printStackTrace() {
-        printStackTrace(System.err);
-    }
-
-    /**
-     * Prints this <code>RepositoryException</code> and its backtrace to the
-     * specified print stream.
-     *
-     * @param s <code>PrintStream</code> to use for output
-     */
-    public void printStackTrace(PrintStream s) {
-        synchronized (s) {
-            super.printStackTrace(s);
-            if (rootCause != null) {
-                rootCause.printStackTrace(s);
-            }
-        }
-    }
-
-    /**
-     * Prints this <code>RepositoryException</code> and its backtrace to
-     * the specified print writer.
-     *
-     * @param s <code>PrintWriter</code> to use for output
-     */
-    public void printStackTrace(PrintWriter s) {
-        synchronized (s) {
-            super.printStackTrace(s);
-            if (rootCause != null) {
-                rootCause.printStackTrace(s);
-            }
-        }
-    }
