JCR-97: Improve Checkstyle conformance
    - Various Checkstyle improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@615671 13f79535-47bb-0310-9956-ffa450edef68

-        for (int i=0; i<BPW; i++) {
+        for (int i = 0; i < BPW; i++) {
-                        Name[] newNames = new Name[names.length*2];
+                        Name[] newNames = new Name[names.length * 2];
-            bits = new long[maxBit/BPW+1];
+            bits = new long[maxBit / BPW + 1];
-            for (int i=0; i<names.length; i++) {
+            for (int i = 0; i < names.length; i++) {
-                bits[n/BPW] |= OR_MASK[n%BPW];
+                bits[n / BPW] |= OR_MASK[n % BPW];
-            int j=0;
+            int j = 0;
-                i = nextSetBit(i+1);
+                i = nextSetBit(i + 1);
-            for (int i=0; i<len; i++) {
+            for (int i = 0; i < len; i++) {
-            for (int i=0; i<len; i++) {
+            for (int i = 0; i < len; i++) {
-            int addr = fromIndex/BPW;
-            int off = fromIndex%BPW;
+            int addr = fromIndex / BPW;
+            int off = fromIndex % BPW;
-                    off=0;
+                    off = 0;
-             return ((int)(val) + (int)(val >>> 32)) & 0xff;
+             return ((int) (val) + (int) (val >>> 32)) & 0xff;
-                    long w1 = adr<bits.length ? bits[adr] : 0;
-                    long w2 = adr<o.bits.length ? o.bits[adr] : 0;
+                    long w1 = adr < bits.length ? bits[adr] : 0;
+                    long w2 = adr < o.bits.length ? o.bits[adr] : 0;
-                        return (int) (h2-h1);
+                        return (int) (h2 - h1);
-                    long w1 = adr<bits.length ? bits[adr] : 0;
-                    long w2 = adr<o.bits.length ? o.bits[adr] : 0;
+                    long w1 = adr < bits.length ? bits[adr] : 0;
+                    long w2 = adr < o.bits.length ? o.bits[adr] : 0;
-            int addr = bits.length -1;
-            while (addr >=0 && bits[addr] == 0) {
+            int addr = bits.length - 1;
+            while (addr >= 0 && bits[addr] == 0) {
-            while (addr >=0) {
+            while (addr >= 0) {
-            return (int)((h >> 32) ^ h);
+            return (int) ((h >> 32) ^ h);
-            while (i>=0) {
+            while (i >= 0) {
-                i = nextSetBit(i+1);
+                i = nextSetBit(i + 1);
