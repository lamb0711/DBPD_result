- adding versioning configuratuin
- adapting versioning to new persistence manager api

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126386 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.UpdateOperation;
-        InternalVersionImpl v = (InternalVersionImpl) getVersion(versionName);
-        if (v.equals(rootVersion)) {
-            String msg = "Removal of " + versionName + " not allowed.";
-            log.error(msg);
-            throw new VersionException(msg);
-        }
+        getVersionManager().removeVersion(this, versionName);
+    }
+
+    /**
+     * Removes the indicated version from this VersionHistory. If the specified
+     * vesion does not exist, if it specifies the root version or if it is
+     * referenced by any node e.g. as base version, a VersionException is thrown.
+     * <p/>
+     * all successors of the removed version become successors of the
+     * predecessors of the removed version and vice versa. then, the entire
+     * version node and all its subnodes are removed.
+     *
+     * @param versionName
+     * @throws VersionException
+     */
+    protected void removeVersion(UpdateOperation upd, QName versionName) throws VersionException {
+            InternalVersionImpl v = (InternalVersionImpl) getVersion(versionName);
+            if (v.equals(rootVersion)) {
+                String msg = "Removal of " + versionName + " not allowed.";
+                log.error(msg);
+                throw new VersionException(msg);
+            }
+
-            node.removeNode(versionName);
-            node.store();
+            node.removeNode(upd, v.getName());
-                labelNode.removeNode(name);
+                labelNode.removeNode(upd, name);
-
-            v.internalDetach();
+            v.internalDetach(upd);
+
+            // store changes
+            node.store(upd);
+        return getVersionManager().addVersionLabel(this, versionName, label, move);
+    }
+
+    /**
+     * @see InternalVersionHistory#addVersionLabel(org.apache.jackrabbit.core.QName, String, boolean)
+     */
+    protected InternalVersion addVersionLabel(UpdateOperation upd, QName versionName, String label, boolean move)
+            throws VersionException {
-            PersistentNode lNode = labelNode.addNode(name, NodeTypeRegistry.NT_UNSTRUCTURED);
-            lNode.setPropertyValue(NativePVM.PROPNAME_NAME, InternalValue.create(label));
-            lNode.setPropertyValue(NativePVM.PROPNAME_VERSION, InternalValue.create(version.getId()));
-            labelNode.store();
+            PersistentNode lNode = labelNode.addNode(upd, name, NodeTypeRegistry.NT_UNSTRUCTURED);
+            lNode.setPropertyValue(upd, NativePVM.PROPNAME_NAME, InternalValue.create(label));
+            lNode.setPropertyValue(upd, NativePVM.PROPNAME_VERSION, InternalValue.create(version.getId()));
+            labelNode.store(upd);
+        return getVersionManager().removeVersionLabel(this, label);
+    }
+
+    /**
+     * @see InternalVersionHistory#removeVersionLabel(String)
+     */
+    protected InternalVersion removeVersionLabel(UpdateOperation upd, String label) throws VersionException {
-            labelNode.removeNode(name);
-            labelNode.store();
+            labelNode.removeNode(upd, name);
+            labelNode.store(upd);
-    protected InternalVersionImpl checkin(QName name, NodeImpl src)
+    protected InternalVersionImpl checkin(UpdateOperation upd, QName name, NodeImpl src)
-        PersistentNode vNode = node.addNode(nodeName, NativePVM.NT_REP_VERSION);
-        vNode.setPropertyValue(NativePVM.PROPNAME_VERSION_ID, InternalValue.create(versionId));
-        vNode.setPropertyValue(NativePVM.PROPNAME_VERSION_NAME, InternalValue.create(name));
+        PersistentNode vNode = node.addNode(upd, nodeName, NativePVM.NT_REP_VERSION);
+        vNode.setPropertyValue(upd, NativePVM.PROPNAME_VERSION_ID, InternalValue.create(versionId));
+        vNode.setPropertyValue(upd, NativePVM.PROPNAME_VERSION_NAME, InternalValue.create(name));
-        vNode.setPropertyValue(VersionManager.PROPNAME_CREATED, InternalValue.create(Calendar.getInstance()));
-        vNode.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.STRING, predecessors);
+        vNode.setPropertyValue(upd, VersionManager.PROPNAME_CREATED, InternalValue.create(Calendar.getInstance()));
+        vNode.setPropertyValues(upd, VersionManager.PROPNAME_PREDECESSORS, PropertyType.STRING, predecessors);
-        InternalFrozenNodeImpl.checkin(vNode, VersionManager.NODENAME_FROZEN, src, false, false);
+        InternalFrozenNodeImpl.checkin(upd, vNode, VersionManager.NODENAME_FROZEN, src, false, false);
-        node.store();
+        node.store(upd);
-    protected static InternalVersionHistoryImpl create(PersistentVersionManager vMgr, PersistentNode parent, String historyId, QName name, NodeImpl src)
+    protected static InternalVersionHistoryImpl create(UpdateOperation upd, PersistentVersionManager vMgr, PersistentNode parent, String historyId, QName name, NodeImpl src)
-        PersistentNode pNode = parent.addNode(name, NativePVM.NT_REP_VERSION_HISTORY);
-        pNode.setPropertyValue(NativePVM.PROPNAME_HISTORY_ID, InternalValue.create(historyId));
+        PersistentNode pNode = parent.addNode(upd, name, NativePVM.NT_REP_VERSION_HISTORY);
+        pNode.setPropertyValue(upd, NativePVM.PROPNAME_HISTORY_ID, InternalValue.create(historyId));
-        pNode.addNode(NativePVM.NODENAME_VERSION_LABELS, NodeTypeRegistry.NT_UNSTRUCTURED);
+        pNode.addNode(upd, NativePVM.NODENAME_VERSION_LABELS, NodeTypeRegistry.NT_UNSTRUCTURED);
-        PersistentNode vNode = pNode.addNode(nodeName, NativePVM.NT_REP_VERSION);
-        vNode.setPropertyValue(NativePVM.PROPNAME_VERSION_ID, InternalValue.create(versionId));
-        vNode.setPropertyValue(NativePVM.PROPNAME_VERSION_NAME, InternalValue.create(VersionManager.NODENAME_ROOTVERSION));
+        PersistentNode vNode = pNode.addNode(upd, nodeName, NativePVM.NT_REP_VERSION);
+        vNode.setPropertyValue(upd, NativePVM.PROPNAME_VERSION_ID, InternalValue.create(versionId));
+        vNode.setPropertyValue(upd, NativePVM.PROPNAME_VERSION_NAME, InternalValue.create(VersionManager.NODENAME_ROOTVERSION));
-        vNode.setPropertyValue(VersionManager.PROPNAME_CREATED, InternalValue.create(Calendar.getInstance()));
-        vNode.setPropertyValues(VersionManager.PROPNAME_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
+        vNode.setPropertyValue(upd, VersionManager.PROPNAME_CREATED, InternalValue.create(Calendar.getInstance()));
+        vNode.setPropertyValues(upd, VersionManager.PROPNAME_PREDECESSORS, PropertyType.REFERENCE, new InternalValue[0]);
-        InternalFrozenNodeImpl.checkin(vNode, VersionManager.NODENAME_FROZEN, src, true, false);
+        InternalFrozenNodeImpl.checkin(upd, vNode, VersionManager.NODENAME_FROZEN, src, true, false);
-        parent.store();
+        parent.store(upd);
