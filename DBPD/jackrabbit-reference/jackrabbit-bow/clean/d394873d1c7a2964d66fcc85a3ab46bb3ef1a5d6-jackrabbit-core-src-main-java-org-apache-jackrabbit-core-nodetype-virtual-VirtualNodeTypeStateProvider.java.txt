JCR-2617: ItemStateMap warnings during node type changes

Make the "discard everyting" mechanism more generic to improve performance and to avoid duplicate code.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@950598 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.id.PropertyId;
-import org.apache.jackrabbit.core.state.ChildNodeEntry;
-import org.apache.jackrabbit.core.state.NodeState;
-    /**
-     * {@inheritDoc}
-     */
-    public void onNodeTypeAdded(Name ntName) throws RepositoryException {
-        try {
-            VirtualNodeState root = (VirtualNodeState) getRootState();
-            QNodeTypeDefinition ntDef = ntReg.getNodeTypeDef(ntName);
-            VirtualNodeState ntState = createNodeTypeState(root, ntDef);
-            root.addChildNodeEntry(ntName, ntState.getNodeId());
-
-            // add as hard reference
-            root.addStateReference(ntState);
-            root.notifyStateUpdated();
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+    public void onNodeTypeAdded(Name ntName) {
+        discardAll(); // TODO: More efficient reloading
-    /**
-     * {@inheritDoc}
-     */
-    public void onNodeTypeModified(Name ntName) throws RepositoryException {
-        // todo: do more efficient reloading
-        try {
-            discardTree(getRootState());
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
+    public void onNodeTypeModified(Name ntName) {
+        discardAll(); // TODO: More efficient reloading
-    /**
-     * {@inheritDoc}
-     */
-    public void onNodeTypesRemoved(Collection<Name> names)
-            throws RepositoryException {
-        // todo: do more efficient reloading
-        try {
-            discardTree(getRootState());
-        } catch (ItemStateException e) {
-            throw new RepositoryException(e);
-        }
-    }
-
-    /**
-     * Recursively discards all the properties and nodes in the subtree
-     * rooted at the given node state.
-     *
-     * @see <a href="https://issues.apache.org/jira/browse/JCR-2617">JCR-2617</a>
-     * @param state root of the subtree to be discarded
-     * @throws ItemStateException if items in the subtree can not be accessed
-     */
-    private void discardTree(NodeState state) throws ItemStateException {
-        for (Name name : state.getPropertyNames()) {
-            getItemState(new PropertyId(state.getNodeId(), name)).discard();
-        }
-        for (ChildNodeEntry entry : state.getChildNodeEntries()) {
-            discardTree((NodeState) getItemState(entry.getId()));
-        }
-        state.discard();
+    public void onNodeTypesRemoved(Collection<Name> names) {
+        discardAll(); // TODO: More efficient reloading
