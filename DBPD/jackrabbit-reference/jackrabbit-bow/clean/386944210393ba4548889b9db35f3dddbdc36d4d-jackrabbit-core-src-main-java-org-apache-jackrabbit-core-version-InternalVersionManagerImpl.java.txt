JCR-2140: Baselines


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@796899 13f79535-47bb-0310-9956-ffa450edef68

-    /**
-     * The path to the configurations storage: /jcr:system/jcr:versionStorage/jcr:configurations
-     */
-    private static final Path CONFIGURATIONS_PATH;
-
-            builder = new PathBuilder();
-            builder.addRoot();
-            builder.addLast(NameConstants.JCR_SYSTEM);
-            builder.addLast(NameConstants.JCR_VERSIONSTORAGE);
-            builder.addLast(NameConstants.JCR_CONFIGURATIONS);
-            CONFIGURATIONS_PATH = builder.getPath();
-     * @param configurationsId node if of the configurations storage (i.e. jcr:configurations)
-                              NodeId configurationsId,
-            // check for jcr:configurations
-            if (!pMgr.exists(configurationsId)) {
-                NodeState root = pMgr.createNew(configurationsId);
-                root.setParentId(storageId);
-                root.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_VERSIONSTORAGE).getApplicableChildNodeDef(
-                        NameConstants.JCR_CONFIGURATIONS, NameConstants.REP_CONFIGURATIONS, ntReg).getId());
-                root.setNodeTypeName(NameConstants.REP_CONFIGURATIONS);
-                PropertyState pt = pMgr.createNew(new PropertyId(activitiesId, NameConstants.JCR_PRIMARYTYPE));
-                pt.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_CONFIGURATIONS).getApplicablePropertyDef(
-                        NameConstants.JCR_PRIMARYTYPE, PropertyType.NAME, false).getId());
-                pt.setMultiValued(false);
-                pt.setType(PropertyType.NAME);
-                pt.setValues(new InternalValue[]{InternalValue.create(NameConstants.REP_CONFIGURATIONS)});
-                root.addPropertyName(pt.getName());
-
-                // add activities as child
-                NodeState historyState = pMgr.load(storageId);
-                historyState.addChildNodeEntry(NameConstants.JCR_CONFIGURATIONS, configurationsId);
-
-                ChangeLog cl = new ChangeLog();
-                cl.added(root);
-                cl.added(pt);
-                cl.modified(historyState);
-                pMgr.store(cl);
-            }
-
-            nodeState = (NodeState) stateMgr.getItemState(configurationsId);
-            configurationsRoot =  new NodeStateEx(stateMgr, ntReg, nodeState, NameConstants.JCR_CONFIGURATIONS);
-
-     */
-    public NodeId createConfiguration(Session session, final NodeId rootId)
-            throws RepositoryException {
-        NodeStateEx state = (NodeStateEx)
-                escFactory.doSourced((SessionImpl) session, new SourcedTarget() {
-            public Object run() throws RepositoryException {
-                return internalCreateConfiguration(rootId);
-            }
-        });
-        return state.getNodeId();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public InternalBaseline checkin(Session session,
-                                    final InternalConfiguration config,
-                                    final Set<NodeId> baseVersions)
-            throws RepositoryException {
-        return (InternalBaseline)
-                escFactory.doSourced((SessionImpl) session, new SourcedTarget() {
-            public Object run() throws RepositoryException {
-                return internalCheckin((InternalConfigurationImpl) config, baseVersions);
-            }
-        });
-    }
-
-    /**
-     * {@inheritDoc}
-    public InternalVersion checkin(final Session session, final NodeStateEx node)
+    public InternalVersion checkin(final Session session, final NodeStateEx node,
+                                   final Set<NodeId> baseVersions)
-                    return internalCheckin((InternalVersionHistoryImpl) vh, node, false);
+                    return internalCheckin((InternalVersionHistoryImpl) vh, node, false, baseVersions);
-                    return internalCheckin((InternalVersionHistoryImpl) vh, node, true);
+                    return internalCheckin((InternalVersionHistoryImpl) vh, node, true, baseVersions);
