JCR-623 - Clustering
+ Transmit namespace registrations
+ Transmit nodetype registrations


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@482707 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.nodetype.NodeTypeDef;
+import org.apache.jackrabbit.core.nodetype.compact.ParseException;
+import java.util.Collection;
-            if (workspace.equals("")) {
-                workspace = null;
-            }
-                    boolean isDeep = in.readBoolean();
-                    String owner = in.readString();
-
-                    processor.process(nodeId, isDeep, owner);
-                } else if (c == 'U') {
-                    NodeId nodeId = in.readNodeId();
-                    processor.process(nodeId);
+                    boolean isLock = in.readBoolean();
+                    if (isLock) {
+                        boolean isDeep = in.readBoolean();
+                        String owner = in.readString();
+                        processor.process(nodeId, isDeep, owner);
+                    } else {
+                        processor.process(nodeId);
+                    }
+                } else if (c == 'S') {
+                    String oldPrefix = in.readString();
+                    String newPrefix = in.readString();
+                    String uri = in.readString();
+                    processor.process(oldPrefix, newPrefix, uri);
+                } else if (c == 'T') {
+                    int size = in.readInt();
+                    HashSet ntDefs = new HashSet();
+                    for (int i = 0; i < size; i++) {
+                        ntDefs.add(in.readNodeTypeDef());
+                    }
+                    processor.process(ntDefs);
+        } catch (ParseException e) {
+            String msg = "Unable to read revision " + record.getRevision() +
+                    ": " + e.getMessage();
+            throw new JournalException(msg);
-            out.writeString(workspace != null ? workspace : "");
+            out.writeString(workspace);
-    public void log(NodeId nodeId, boolean isDeep, String owner) throws JournalException {
+    public void log(String oldPrefix, String newPrefix, String uri) throws JournalException {
-            out.writeChar('L');
-            out.writeNodeId(nodeId);
-            out.writeBoolean(isDeep);
-            out.writeString(owner);
+            out.writeChar('S');
+            out.writeString(oldPrefix);
+            out.writeString(newPrefix);
+            out.writeString(uri);
+    public void log(NodeId nodeId, boolean isDeep, String owner) throws JournalException {
+        log(nodeId, true, isDeep, owner);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+        log(nodeId, false, false, null);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void log(Collection ntDefs) throws JournalException {
-            out.writeChar('U');
-            out.writeNodeId(nodeId);
+            out.writeChar('T');
+            out.writeInt(ntDefs.size());
+
+            Iterator iter = ntDefs.iterator();
+            while (iter.hasNext()) {
+                out.writeNodeTypeDef((NodeTypeDef) iter.next());
+            }
+
+     * Log either a lock or an unlock operation.
+     *
+     * @param nodeId node id
+     * @param isLock <code>true</code> if this is a lock;
+     *               <code>false</code> if this is an unlock
+     * @param isDeep flag indicating whether lock is deep
+     * @param owner lock owner
+     */
+    protected void log(NodeId nodeId, boolean isLock, boolean isDeep, String owner)
+            throws JournalException {
+
+        try {
+            out.writeChar('L');
+            out.writeNodeId(nodeId);
+            out.writeBoolean(isLock);
+            if (isLock) {
+                out.writeBoolean(isDeep);
+                out.writeString(owner);
+            }
+        } catch (IOException e) {
+            String msg = "Unable to write to journal log " + tempLog + ": " + e.getMessage();
+            throw new JournalException(msg);
+        }
+    }
+
+    /**
