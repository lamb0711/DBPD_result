JCR-977: jcr:deref in xpath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@791737 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
+import org.apache.jackrabbit.spi.Path.Element;
-import org.apache.jackrabbit.spi.commons.name.PathBuilder;
-
-public class RelationQueryNode extends NAryQueryNode implements QueryConstants {
+public class RelationQueryNode extends NAryQueryNode<QueryNode> implements QueryConstants {
-    private Path relPath;
+    private PathQueryNode relPath;
+    private final QueryNodeFactory factory;
+
-     * @param parent the parent node for this query node.
+     * @param parent    the parent node for this query node.
+     * @param operation the operation.
+     * @param factory   the query node factory.
-    protected RelationQueryNode(QueryNode parent, int operation) {
+    protected RelationQueryNode(QueryNode parent,
+                                int operation,
+                                QueryNodeFactory factory) {
+        this.factory = factory;
+        this.relPath = factory.createPathQueryNode(this);
-     * Returns the name of the property in this relation query node. Please
-     * note that this method does not return the full relative path that
-     * reference the property to match, but only the name of the final name
-     * element of the path returned by {@link #getRelativePath()}.
-     *
-     * @return the name of the property in this relation query node.
-     * @deprecated Use {@link #getRelativePath()} instead.
-     */
-    public Name getProperty() {
-        return relPath == null ? null : relPath.getNameElement().getName();
-    }
-
-    /**
-     * Sets a new property name for this relation query node.
-     *
-     * @param name the new property name.
-     * @deprecated Use {@link #setRelativePath(Path)} instead.
-     */
-    public void setProperty(Name name) {
-        PathBuilder builder = new PathBuilder();
-        builder.addLast(name);
-        try {
-            this.relPath = builder.getPath();
-        } catch (MalformedPathException e) {
-            // path is always valid
-        }
-    }
-
-    /**
-    public Path getRelativePath() {
+    public PathQueryNode getRelativePath() {
-        if (relPath != null && relPath.isAbsolute()) {
+        if (relPath.isAbsolute()) {
-        this.relPath = relPath;
+        
+        Element[] elements = relPath.getElements();
+        for (Element element : elements) {
+            addPathElement(element);
+        }
-        PathBuilder builder = new PathBuilder();
-        if (relPath != null) {
-            builder.addAll(relPath.getElements());
-        }
-        builder.addLast(element);
-        try {
-            relPath = builder.getPath();
-        }
-        catch (MalformedPathException e) {
-            // path is always valid
-        }
-        // try to normalize the path
-        try {
-          relPath = relPath.getNormalizedPath();
-        } catch (RepositoryException e) {
-            // just keep the original in that case
-        }
+        LocationStepQueryNode step = factory.createLocationStepQueryNode(relPath);
+        step.setNameTest(element.getName());
+        relPath.addPathStep(step);
