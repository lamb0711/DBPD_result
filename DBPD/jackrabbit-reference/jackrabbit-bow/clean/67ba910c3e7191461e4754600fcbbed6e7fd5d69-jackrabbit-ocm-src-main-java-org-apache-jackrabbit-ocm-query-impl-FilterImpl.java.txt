Fix for JCR-1286. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@658855 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.ocm.mapper.model.FieldDescriptor;
+import org.apache.jackrabbit.ocm.reflection.ReflectionUtils;
-            + this.getStringValue(value1)
+            + this.getStringValue(fieldAttributeName, value1)
-            + this.getStringValue(value2) + ")";
+            + this.getStringValue(fieldAttributeName, value2) + ")";
-            + this.getStringValue(value);
+            + this.getStringValue(fieldAttributeName, value);
-            + this.getStringValue(value);
+            + this.getStringValue(fieldAttributeName, value);
-            + this.getStringValue(value);
+            + this.getStringValue(fieldAttributeName, value);
-            + this.getStringValue(value);
+            + this.getStringValue(fieldAttributeName, value);
-            + this.getStringValue(value);
+            + this.getStringValue(fieldAttributeName, value);
-            + this.getStringValue(value);
+            + this.getStringValue(fieldAttributeName, value);
-    		   jcrExpression =    ((FilterImpl) filter).getJcrExpression() ;    		
+    		   jcrExpression =    ((FilterImpl) filter).getJcrExpression() ;
-    		   jcrExpression =    ((FilterImpl) filter).getJcrExpression() ;    		
+    		   jcrExpression =    ((FilterImpl) filter).getJcrExpression() ;
-    private String getStringValue(Object value) {
-        AtomicTypeConverter atomicTypeConverter = (AtomicTypeConverter) atomicTypeConverters.get(
-                value.getClass());
+    private String getStringValue(String fieldName, Object value) {
+    	FieldDescriptor fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName);
+    	AtomicTypeConverter atomicTypeConverter = null ;
+    	// if the attribute is a simple field (primitive data type or wrapper class)
+    	if (fieldDescriptor != null)
+    	{
+	    	String fieldConverterName = fieldDescriptor.getConverter();
+	    	// if a field converter is set in the mapping, use this one
+	    	if ( fieldConverterName != null )
+	    	{
+	    		atomicTypeConverter = (AtomicTypeConverter) ReflectionUtils.newInstance(fieldConverterName);
+	    	}
+	    	// else use a default converter in function of the attribute type
+	    	else
+	    	{
+	    		atomicTypeConverter = (AtomicTypeConverter) atomicTypeConverters.get(value.getClass());
+	    	}
+    	}
+    	// else it could be a collection (for example, it is a multivalue property)
+    	else
+    	{
+    		atomicTypeConverter = (AtomicTypeConverter) atomicTypeConverters.get(value.getClass());
+    	}
