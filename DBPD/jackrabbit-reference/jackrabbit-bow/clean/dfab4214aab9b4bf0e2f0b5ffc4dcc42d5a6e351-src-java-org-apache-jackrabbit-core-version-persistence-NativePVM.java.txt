- rearranging structure of versioning (will corrupt versioned data)
- adding observation of version storage (work in progress)


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159366 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.PropertyId;
+import org.apache.jackrabbit.core.PropertyId;
-import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.state.PropertyState;
-    /**
-     * name of the 'jcr:historyId' property
-     */
-    public static final QName PROPNAME_HISTORY_ID = new QName(NS_JCR_URI, "historyId");
+
-    /**
-     * name of the 'jcr:versionId' property
-     */
-    public static final QName PROPNAME_VERSION_ID = new QName(NS_JCR_URI, "versionId");
-    /**
-     * name of the 'jcr:versionName' property
-     */
-    public static final QName PROPNAME_VERSION_NAME = new QName(NS_JCR_URI, "versionName");
+
-     * mapping from virtual uuids to persistent ids of the persistent nodes
-     * key=externalId, value=PersistentId
-     */
-    private HashMap idsByExternal = new HashMap();
-
-    /**
-     * mapping from virtual uuids to persistent ids of the persistent nodes
-     * key=internalId, value=PersistentId
-     */
-    private HashMap idsByInternal = new HashMap();
-
-    /**
-            long t1 = System.currentTimeMillis();
-            //this.stateMgr = new NativeItemStateManager(pMgr, PERSISTENT_ROOT_ID.getUUID(), ntReg);
-            // todo versioning is not attached to any workspace!! how do we trigger observation?
-            initVirtualIds(historyRoot.getState());
-            long t2 = System.currentTimeMillis();
-            log.info("loaded " + idsByExternal.size() + " virtual ids in " + (t2 - t1) + "ms.");
+            initVersionedUUIDs(nodeState);
+     * initiealies the map of versioned uuids
+     * @param state
+     * @throws ItemStateException
+     */
+    private void initVersionedUUIDs(NodeState state) throws ItemStateException {
+
+        if (state.getNodeTypeName().equals(NT_REP_VERSION_HISTORY)) {
+            PropertyState ps = (PropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), PROPNAME_VERSIONABLE_ID));
+            String vid = (String) ps.getValues()[0].internalValue();
+            versionedUUIDs.put(vid, state.getUUID());
+            return;
+        }
+        Iterator iter = state.getChildNodeEntries().iterator();
+        while (iter.hasNext()) {
+            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) iter.next();
+            initVersionedUUIDs((NodeState) stateMgr.getItemState(new NodeId(entry.getUUID())));
+        }
+    }
+
+    /**
-     * initializes the internal item ids
-     *
-     * @param parent
-     * @throws RepositoryException
-     * @throws ItemStateException
-     */
-    private void initVirtualIds(NodeState parent)
-            throws RepositoryException, ItemStateException {
-
-        Iterator iter = parent.getChildNodeEntries().iterator();
-        while (iter.hasNext()) {
-            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) iter.next();
-            String realUUID = entry.getName().getLocalName();
-            initVirtualIds(realUUID, (NodeState) stateMgr.getItemState(new NodeId(entry.getUUID())));
-        }
-    }
-
-    /**
-     * initializes the internal item ids
-     *
-     * @param realUUID
-     * @param state
-     * @throws ItemStateException
-     * @throws RepositoryException
-     */
-    private void initVirtualIds(String realUUID, NodeState state)
-            throws ItemStateException, RepositoryException {
-        PersistentId id = new PersistentId(realUUID, state);
-        if (id.type != PersistentId.TYPE_UNDEFINED) {
-            synchronized (idsByExternal) {
-                idsByExternal.put(id.externalId, id);
-                idsByInternal.put(id.internalId, id);
-            }
-            if (id.type == PersistentId.TYPE_HISTORY) {
-                // need to retrieve the versioned uuid in order to avoid collisions
-                PropertyState ps = (PropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), PROPNAME_VERSIONABLE_ID));
-                String vid = (String) ps.getValues()[0].internalValue();
-                versionedUUIDs.put(vid, id.externalId);
-            }
-        }
-        initVirtualIds(state);
-    }
-
-    /**
-     * returns the persistentid for a given external uuid
-     *
-     * @param uuid
-     * @return
-     */
-    private PersistentId getIdByExternal(String uuid) {
-        synchronized (idsByExternal) {
-            return (PersistentId) idsByExternal.get(uuid);
-        }
-    }
-
-    /**
-     * returns the persustentid for a given internal uuid
-     *
-     * @param uuid
-     * @return
-     */
-    private PersistentId getIdByInternal(String uuid) {
-        return (PersistentId) idsByInternal.get(uuid);
-    }
-
-    /**
-     * returns the persustentid for a give internal uuid and item type
-     *
-     * @param uuid
-     * @param type
-     * @return
-     */
-    private PersistentId getIdByExternal(String uuid, int type) {
-        synchronized (idsByExternal) {
-            PersistentId id = (PersistentId) idsByExternal.get(uuid);
-            return id != null && id.type == type ? id : null;
-        }
-    }
-
-    /**
-        String externalId = (String) versionedUUIDs.get(uuid);
-        return externalId == null ? null : (InternalVersionHistoryImpl) getVersionHistory(externalId);
+        String id = (String) versionedUUIDs.get(uuid);
+        return id == null ? null : (InternalVersionHistoryImpl) getVersionHistory(id);
-                    root.addNode(name, NT_UNSTRUCTURED);
+                    root.addNode(name, NT_UNSTRUCTURED, null);
-            initVirtualIds(hist.getId(), hist.getNode().getState());
+        versionedUUIDs.put(hist.getVersionableUUID(), hist.getId());
+        
-        PersistentId pid = getIdByExternal(histId, PersistentId.TYPE_HISTORY);
-        return pid == null ? null : (InternalVersionHistory) getItem(pid);
+        return (InternalVersionHistory) getItem(histId);
-        return getIdByExternal(histId, PersistentId.TYPE_HISTORY) != null;
+        return hasItem(histId);
-        PersistentId pid = getIdByExternal(versionId, PersistentId.TYPE_VERSION);
-        return pid == null ? null : (InternalVersion) getItem(pid);
+        return (InternalVersion) getItem(versionId);
-        return getIdByExternal(versionId, PersistentId.TYPE_VERSION) != null;
+        return hasItem(versionId);
-     * @param externalId
+     * @param uuid
-    public boolean hasItem(String externalId) {
-        return getIdByExternal(externalId) != null;
-    }
-
-    /**
-     * returns the item referred by the external id
-     *
-     * @param externalId
-     * @return
-     * @throws RepositoryException
-     */
-    public InternalVersionItem getItemByExternal(String externalId)
-            throws RepositoryException {
-        PersistentId pid = getIdByExternal(externalId);
-        return pid == null ? null : getItem(pid);
-    }
-
-    /**
-     * returns the item referred by the internal id
-     *
-     * @param internalId
-     * @return
-     * @throws RepositoryException
-     */
-    public InternalVersionItem getItemByInternal(String internalId)
-            throws RepositoryException {
-        PersistentId pid = getIdByInternal(internalId);
-        return pid == null ? null : getItem(pid);
+    public boolean hasItem(String uuid) {
+        NodeId id = new NodeId(uuid);
+        if (items.containsKey(id)) {
+            return true;
+        }
+        return stateMgr.hasItemState(id);
-     * @param pid
+     * @param uuid
-    private InternalVersionItem getItem(PersistentId pid)
-            throws RepositoryException {
-
-        InternalVersionItem item = (InternalVersionItem) items.get(pid);
+    public InternalVersionItem getItem(String uuid) throws RepositoryException {
+        NodeId id = new NodeId(uuid);
+        InternalVersionItem item = (InternalVersionItem) items.get(id);
-            PersistentNode pNode = historyRoot.getNodeByUUID(pid.internalId);
-            if (pNode != null) {
-                InternalVersionItem parent = getItemByInternal(pNode.getParentUUID());
-                if (pid.type == PersistentId.TYPE_FROZEN) {
-                    item = new InternalFrozenNodeImpl(this, pNode, pid.externalId, parent);
-                } else if (pid.type == PersistentId.TYPE_FROZEN_HISTORY) {
-                    item = new InternalFrozenVHImpl(this, pNode, pid.externalId, parent);
-                } else if (pid.type == PersistentId.TYPE_VERSION) {
-                    item = ((InternalVersionHistory) parent).getVersion(pid.externalId);
-                } else if (pid.type == PersistentId.TYPE_HISTORY) {
+            try {
+                NodeState state = (NodeState) stateMgr.getItemState(id);
+                PersistentNode pNode = new PersistentNode(stateMgr, state);
+                InternalVersionItem parent = pNode.getParentUUID() == null ? null : getItem(pNode.getParentUUID());
+                QName ntName = state.getNodeTypeName();
+                if (ntName.equals(NT_REP_FROZEN)) {
+                    item = new InternalFrozenNodeImpl(this, pNode, parent);
+                } else if (ntName.equals(NT_REP_FROZEN_HISTORY)) {
+                    item = new InternalFrozenVHImpl(this, pNode, parent);
+                } else if (ntName.equals(NT_REP_VERSION)) {
+                    item = ((InternalVersionHistory) parent).getVersion(uuid);
+                } else if (ntName.equals(NT_REP_VERSION_HISTORY)) {
-            }
-            if (item != null) {
-                items.put(pid, item);
+                if (item != null) {
+                    items.put(id, item);
+                }
+            } catch (ItemStateException e) {
+                // ignore
-            initVirtualIds(v.getId(), v.getNode().getState());
-
-            PersistentId id = getIdByExternal(item.getId());
-            NodeReferences refs = pMgr.load(new NodeReferencesId(id.internalId));
+            NodeReferences refs = pMgr.load(new NodeReferencesId(item.getId()));
-            PersistentId id = getIdByExternal(item.getId());
-            NodeReferences refs = new NodeReferences(new NodeReferencesId(id.internalId));
+            NodeReferences refs = new NodeReferences(new NodeReferencesId(item.getId()));
-    /**
-     * Helper class for persistent items
-     */
-    public static final class PersistentId {
-
-        private static final int TYPE_UNDEFINED = 0;
-        private static final int TYPE_HISTORY = 1;
-        private static final int TYPE_VERSION = 2;
-        private static final int TYPE_FROZEN = 3;
-        private static final int TYPE_FROZEN_HISTORY = 4;
-
-        /**
-         * the type of the persistent node
-         */
-        private final int type;
-
-        /**
-         * the persistent uuid of the node
-         */
-        private final String externalId;
-
-        /**
-         * the persistent uuid of the node
-         */
-        private final String internalId;
-
-        public PersistentId(int type, String external, String internal) {
-            this.type = type;
-            this.internalId = internal;
-            this.externalId = external;
-        }
-
-        public PersistentId(String external, NodeState state) {
-            this.internalId = state.getUUID();
-            if (state.getNodeTypeName().equals(NT_REP_VERSION)) {
-                this.externalId = external;
-                type = TYPE_VERSION;
-            } else if (state.getNodeTypeName().equals(NT_REP_VERSION_HISTORY)) {
-                this.externalId = external;
-                type = TYPE_HISTORY;
-            } else if (state.getNodeTypeName().equals(NT_REP_FROZEN)) {
-                // ignore given externalid, and generate new one
-                this.externalId = UUID.randomUUID().toString();
-                type = TYPE_FROZEN;
-            } else if (state.getNodeTypeName().equals(NT_REP_FROZEN_HISTORY)) {
-                // ignore given externalid, and generate new one
-                this.externalId = UUID.randomUUID().toString();
-                type = TYPE_FROZEN_HISTORY;
-            } else {
-                // ignore given externalid, and generate new one
-                this.externalId = UUID.randomUUID().toString();
-                type = TYPE_UNDEFINED;
-            }
-        }
-
-        public boolean isVersion() {
-            return type == TYPE_VERSION;
-        }
-
-        public boolean isHistory() {
-            return type == TYPE_HISTORY;
-        }
-
-        public boolean isFrozen() {
-            return type == TYPE_FROZEN;
-        }
-    }
