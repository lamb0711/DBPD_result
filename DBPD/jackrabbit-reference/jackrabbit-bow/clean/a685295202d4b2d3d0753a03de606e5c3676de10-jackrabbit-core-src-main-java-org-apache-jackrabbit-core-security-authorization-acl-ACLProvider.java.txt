security: work in progress

- change ACEditor to take jcr path
- extract common, abstract policy entry impl
- add more tests
- add JackrabbitAccessControlManager for policy editing
- various minor changes, fixes, improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@644215 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.api.JackrabbitSession;
-import javax.jcr.observation.ObservationManager;
-    /**
-     * the system session that accesses the workspace
-     */
-    private SessionImpl systemSession;
-
-    private ObservationManager obsMgr;
-
-    private String jcrRepPolicy;
+    private String policyNodeName;
-        if (initialized) {
-            throw new IllegalStateException("already initialized");
-        }
-        if (!(systemSession instanceof SessionImpl)) {
-            throw new RepositoryException("SessionImpl (system session) expected.");
-        }
+        super.init(systemSession, options);
-        SessionImpl sImpl = (SessionImpl) systemSession;
-        NodeImpl root = (NodeImpl) sImpl.getRootNode();
+        NodeImpl root = (NodeImpl) session.getRootNode();
-        jcrRepPolicy = "/" + sImpl.getJCRName(N_POLICY);
-        systemEditor = new ACLEditor(sImpl);
+        policyNodeName = resolver.getJCRName(N_POLICY);
+        systemEditor = new ACLEditor(systemSession);
-            initRootACL(sImpl, rootNodeId);
+            initRootACL(session, systemEditor);
-
-        this.systemSession = sImpl;
-        obsMgr = sImpl.getWorkspace().getObservationManager();
-        initialized = true;
-        NodeImpl node = systemSession.getNodeById(nodeId);
+        NodeImpl node = session.getNodeById(nodeId);
-            if (node.isNodeType(ACLEditor.NT_REP_ACL)) {
+            if (node.isNodeType(NT_REP_ACL)) {
-            NodeImpl aclNode = node.getNode(ACLEditor.N_POLICY);
+            NodeImpl aclNode = node.getNode(N_POLICY);
-    private void initRootACL(SessionImpl session, NodeId rootId) throws RepositoryException {
+    private static void initRootACL(JackrabbitSession session, AccessControlEditor editor) throws RepositoryException {
-            PolicyTemplate tmpl = systemEditor.editPolicyTemplate(rootId);
+            String rootPath = session.getRootNode().getPath();
+            PolicyTemplate tmpl = editor.editPolicyTemplate(rootPath);
-            systemEditor.setPolicyTemplate(rootId, tmpl);
+            editor.setPolicyTemplate(rootPath, tmpl);
-     * {@link ACLEditor#NT_REP_ACCESS_CONTROLLABLE "rep:AccessControllable"}
+     * {@link AccessControlConstants#NT_REP_ACCESS_CONTROLLABLE "rep:AccessControllable"}
-     * {@link ACLEditor#N_POLICY "rep:ACL"}.
+     * {@link AccessControlConstants#N_POLICY "rep:ACL"}.
-        return node.isNodeType(ACLEditor.NT_REP_ACCESS_CONTROLLABLE) && node.hasNode(ACLEditor.N_POLICY);
+        return node.isNodeType(NT_REP_ACCESS_CONTROLLABLE) && node.hasNode(N_POLICY);
-        return node.isNodeType(ACLEditor.NT_REP_ACL) || node.isNodeType(ACLEditor.NT_REP_ACE);
+        return node.isNodeType(NT_REP_ACL) || node.isNodeType(NT_REP_ACE);
-                    systemSession.getJCRName(NT_REP_ACE),
-                    systemSession.getJCRName(NT_REP_ACL)
+                    resolver.getJCRName(NT_REP_ACE),
+                    resolver.getJCRName(NT_REP_ACL)
-            obsMgr.addEventListener(this, events, systemSession.getRootNode().getPath(), true, null, ntNames, true);
+            observationMgr.addEventListener(this, events, session.getRootNode().getPath(), true, null, ntNames, true);
-                QueryManager qm = systemSession.getWorkspace().getQueryManager();
+                QueryManager qm = session.getWorkspace().getQueryManager();
-                stmt.append(systemSession.getJCRName(NT_REP_DENY_ACE));
+                stmt.append(resolver.getJCRName(NT_REP_DENY_ACE));
-                    String pName = systemSession.getJCRName(P_PRINCIPAL_NAME);
+                    String pName = resolver.getJCRName(P_PRINCIPAL_NAME);
-                String pName = systemSession.getJCRName(P_PRIVILEGES);
+                String pName = resolver.getJCRName(P_PRIVILEGES);
-            NodeId nid;
-            String jcrPath = systemSession.getJCRPath(absPath);
-            if (systemSession.nodeExists(jcrPath)) {
-                nid = systemSession.getHierarchyManager().resolveNodePath(absPath);
+            NodeId nid = null;
+            String jcrPath = resolver.getJCRPath(absPath);
+
+            if (session.nodeExists(jcrPath)) {
+                nid = session.getHierarchyManager().resolveNodePath(absPath);
-                nid = systemSession.getHierarchyManager().resolveNodePath(absPath.getAncestor(1));
+                // -> find the nearest persisted node
+                Path parentPath = absPath.getAncestor(1);
+                while (nid == null) {
+                    nid = session.getHierarchyManager().resolveNodePath(parentPath);
+                    if (parentPath.getDepth() == 1) {
+                        // root-node reached
+                        break;
+                    } else {
+                        parentPath = parentPath.getAncestor(1);
+                    }
+                }
+
-                throw new ItemNotFoundException("No item exists at " + absPath + " nor at its direct ancestor.");
+                // should never get here
+                throw new ItemNotFoundException("Item out of hierarchy.");
-            int privileges = (existingNode) ? acl.getPrivileges() : PrivilegeRegistry.NO_PRIVILEGE;
+            int privileges = acl.getPrivileges();
-            if (existingNode || systemSession.propertyExists(jcrPath)) {
-                permissions = acl.getPermissions(systemSession.getItem(jcrPath));
+            if (existingNode || session.propertyExists(jcrPath)) {
+                permissions = acl.getPermissions(session.getItem(jcrPath));
-                String name = systemSession.getJCRName(absPath.getNameElement().getName());
+                String name = resolver.getJCRName(absPath.getNameElement().getName());
-                obsMgr.removeEventListener(this);
+                observationMgr.removeEventListener(this);
-                    systemSession.getJCRPath(absPath).indexOf(jcrRepPolicy) == -1) {
+                    resolver.getJCRPath(absPath).indexOf(policyNodeName) == -1) {
-                            NodeImpl n = (NodeImpl) systemSession.getNode(path);
+                            NodeImpl n = (NodeImpl) session.getNode(path);
-                            PropertyImpl p = (PropertyImpl) systemSession.getProperty(path);
+                            PropertyImpl p = (PropertyImpl) session.getProperty(path);
