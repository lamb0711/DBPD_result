JCR-2415: Update Lucene to 3.0
- Merge all from JCR-2415-lucene-3.0 at 1064038 (reintegration)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1064058 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.lucene.SharedFieldComparatorSource.SimpleFieldComparator;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
+import org.apache.lucene.search.FieldComparator;
+import org.apache.lucene.search.FieldComparatorSource;
+
-import org.apache.lucene.search.SortComparatorSource;
-import org.apache.lucene.search.ScoreDocComparator;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.index.IndexReader;
-import org.apache.jackrabbit.spi.NameFactory;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
-
- * <code>LengthSortComparator</code> implements a sort comparator source that
+ * <code>LengthSortComparator</code> implements a <code>FieldComparator</code> which
-public class LengthSortComparator implements SortComparatorSource {
-
-    private static final long serialVersionUID = 2513564768671391632L;
+public class LengthSortComparator extends FieldComparatorSource {
-    /**
-     * Creates a new comparator.
-     *
-     * @param reader    the current index reader.
-     * @param fieldname the name of the property to sort on. This is the string
-     *                  representation of {@link org.apache.jackrabbit.spi.Name
-     *                  Name}.
-     * @return the score doc comparator.
-     * @throws IOException if an error occurs while reading from the index.
-     */
-    public ScoreDocComparator newComparator(IndexReader reader,
-                                            String fieldname)
-            throws IOException {
+    @Override
+    public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {
-            return new Comparator(reader,
-                    nsMappings.translateName(factory.create(fieldname)));
-        } catch (IllegalNameException e) {
+            return new SimpleFieldComparator(nsMappings.translateName(factory.create(fieldname)), FieldNames.PROPERTY_LENGTHS, numHits);
+        }
+        catch (IllegalNameException e) {
-    private final class Comparator extends AbstractScoreDocComparator {
-
-        /**
-         * The term look ups of the index segments.
-         */
-        protected final SharedFieldCache.ValueIndex[] indexes;
-
-        public Comparator(IndexReader reader,
-                          String propertyName) throws IOException {
-            super(reader);
-            this.indexes = new SharedFieldCache.ValueIndex[readers.size()];
-
-            String namedLength = FieldNames.createNamedValue(propertyName, "");
-            for (int i = 0; i < readers.size(); i++) {
-                IndexReader r = readers.get(i);
-                indexes[i] = SharedFieldCache.INSTANCE.getValueIndex(
-                        r, FieldNames.PROPERTY_LENGTHS,
-                        namedLength, LengthSortComparator.this);
-            }
-        }
-
-        public Comparable sortValue(ScoreDoc i) {
-            int idx = readerIndex(i.doc);
-            return indexes[idx].getValue(i.doc - starts[idx]);
-        }
-    }
