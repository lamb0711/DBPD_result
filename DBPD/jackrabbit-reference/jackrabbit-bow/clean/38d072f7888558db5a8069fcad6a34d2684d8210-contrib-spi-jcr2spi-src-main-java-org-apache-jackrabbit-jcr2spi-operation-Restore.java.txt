work in progress

- Restore: pass NodeState(s) and Path instead of NodeId(s)
- LockManager: make sure lockmanager only remembers workspace states
- LockManager: make sure operations are executed using workspace states
- LockManager: improve isLocked/getLock/checkIsLocked and respect locks that
have been accessed before.
- VersionManager: make sure operations are executed using workspace states
- VersionManager: add checkIsCheckedOut
- VersionManager: force manager to have a WorkspaceManager
- NodeReferences:
  > make interface package protected
  > clarify method naming
  > add implementation to WorkspaceItemStateFactory
  > add NodeReferences field to NodeState
  > TO_IMPROVE: references are currently always retrieve from the SPI.
- ItemStateManager + NodeReferences
  > rename interfaces methods
  > change method signature to take NodeState instead of NodeId
  > 'getReferences' returns the property states directly

- remove some JR DIFFs. 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432234 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.jcr2spi.state.NodeState;
+import org.apache.jackrabbit.name.Path;
+import javax.jcr.version.Version;
-    private final NodeId nodeId;
-    private final NodeId[] versionIds;
+    // TODO: since the restore target can point to a non-existing item -> use NodeId
+    // TODO: review this.
+    private final NodeState nodeState;
+    private final Path relQPath;
+    private final NodeState[] versionStates;
-    private Restore(NodeId nodeId, NodeId[] versionIds, boolean removeExisting) {
-        this.nodeId = nodeId;
-        this.versionIds = versionIds;
+    private Restore(NodeState nodeState, Path relQPath, NodeState[] versionStates, boolean removeExisting) {
+        this.nodeState = nodeState;
+        this.relQPath = relQPath;
+        this.versionStates = versionStates;
-    public NodeId getNodeId() {
-        return nodeId;
+
+    /**
+     * Returns state or the closest existing state of the restore target or
+     * <code>null</code> in case of a {@link javax.jcr.Workspace#restore(Version[], boolean)}
+     *
+     * @return
+     */
+    public NodeState getNodeState() {
+        return nodeState;
-    public NodeId[] getVersionIds() {
-        return versionIds;
+    /**
+     * Relative qualified path to the non-existing restore target or <code>null</code>
+     * if the state returned by {@link #getNodeState()} is the target.
+     *
+     * @return
+     * @see javax.jcr.Node#restore(Version, String, boolean) 
+     */
+    public Path getRelativePath() {
+        return relQPath;
+    }
+
+    public NodeState[] getVersionStates() {
+        return versionStates;
-     * @param nodeId
-     * @param versionId
+     * @param nodeState
+     * @param versionState
-    public static Operation create(NodeId nodeId, NodeId versionId, boolean removeExisting) {
-        if (nodeId == null || versionId == null) {
-            throw new IllegalArgumentException("Neither nodeId nor versionId must be null.");
+    public static Operation create(NodeState nodeState, Path relQPath, NodeState versionState, boolean removeExisting) {
+        if (nodeState == null || versionState == null) {
+            throw new IllegalArgumentException("Neither nodeId nor versionState must be null.");
-        Restore up = new Restore(nodeId, new NodeId[] {versionId}, removeExisting);
+        Restore up = new Restore(nodeState, relQPath, new NodeState[] {versionState}, removeExisting);
-     * @param versionIds
+     * @param versionStates
-    public static Operation create(NodeId[] versionIds, boolean removeExisting) {
-        if (versionIds == null) {
-            throw new IllegalArgumentException("Neither versionIds must not be null.");
+    public static Operation create(NodeState[] versionStates, boolean removeExisting) {
+        if (versionStates == null) {
+            throw new IllegalArgumentException("Version states must not be null.");
-        Restore up = new Restore(null, versionIds, removeExisting);
+        Restore up = new Restore(null, null, versionStates, removeExisting);
