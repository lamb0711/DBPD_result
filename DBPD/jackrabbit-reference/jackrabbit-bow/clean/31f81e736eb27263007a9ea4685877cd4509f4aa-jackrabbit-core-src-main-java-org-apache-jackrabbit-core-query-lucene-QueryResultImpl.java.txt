JCR-2076: JSR 283: Joins

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@768954 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.search.Query;
- * Implements the <code>javax.jcr.query.QueryResult</code> interface.
+ * Implements the <code>QueryResult</code> interface.
-public class QueryResultImpl implements QueryResult {
+public abstract class QueryResultImpl implements QueryResult {
-    private final SearchIndex index;
+    protected final SearchIndex index;
-    private final ItemManager itemMgr;
+    protected final ItemManager itemMgr;
-    private final AccessManager accessMgr;
+    protected final AccessManager accessMgr;
-     * The lucene query to execute.
-     */
-    protected final Query query;
-
-    /**
+     * The selector names associated with the score nodes. The selector names
+     * are set when the query is executed via {@link #getResults(long)}.
+     */
+    private Name[] selectorNames;
+
+    /**
-    private final boolean docOrder;
+    protected final boolean docOrder;
-     * Creates a new query result.
+     * Creates a new query result. The concrete sub class is responsible for
+     * calling {@link #getResults(long)} after this constructor had been called.
-     * @param query           the lucene query to execute on the index.
-                           Query query,
-        this.query = query;
-        // if document order is requested get all results right away
-        getResults(docOrder ? Integer.MAX_VALUE : index.getResultFetchSize());
-                excerptProvider = index.createExcerptProvider(query);
+                excerptProvider = createExcerptProvider();
-                queryImpl.getSelectorNames(), itemMgr,
+                selectorNames, itemMgr,
-    protected MultiColumnQueryHits executeQuery(long resultFetchHint) throws IOException {
-        return index.executeQuery(session, queryImpl,
-                query, orderProps, orderSpecs, resultFetchHint);
-    }
+    protected abstract MultiColumnQueryHits executeQuery(long resultFetchHint)
+            throws IOException;
+
+    /**
+     * Creates an excerpt provider for this result set.
+     *
+     * @return an excerpt provider.
+     * @throws IOException if an error occurs.
+     */
+    protected abstract ExcerptProvider createExcerptProvider()
+            throws IOException;
-    private void getResults(long size) throws RepositoryException {
+    protected void getResults(long size) throws RepositoryException {
+            // set selector names
+            selectorNames = result.getSelectorNames();
