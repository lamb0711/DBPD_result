- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.15 $, $Date: 2004/08/27 15:48:19 $
+     *
-	if (namespaceURI == null) {
-	    throw new IllegalArgumentException("invalid namespaceURI specified");
-	}
-	// an empty localName is valid though (e.g. the root node name)
-	if (localName == null) {
-	    throw new IllegalArgumentException("invalid localName specified");
-	}
-	this.namespaceURI = namespaceURI;
-	this.localName = localName;
-	hash = 0;
+        if (namespaceURI == null) {
+            throw new IllegalArgumentException("invalid namespaceURI specified");
+        }
+        // an empty localName is valid though (e.g. the root node name)
+        if (localName == null) {
+            throw new IllegalArgumentException("invalid localName specified");
+        }
+        this.namespaceURI = namespaceURI;
+        this.localName = localName;
+        hash = 0;
-	    throws IllegalNameException, UnknownPrefixException {
-	if (rawName == null || rawName.length() == 0) {
-	    throw new IllegalNameException("empty name");
-	}
+            throws IllegalNameException, UnknownPrefixException {
+        if (rawName == null || rawName.length() == 0) {
+            throw new IllegalNameException("empty name");
+        }
-	String prefix = null;
-	String localName = null;
+        String prefix = null;
+        String localName = null;
-	Matcher matcher = NAME_PATTERN.matcher(rawName);
-	if (matcher.matches()) {
-	    // check for prefix (group 1)
-	    if (matcher.group(1) != null) {
-		// prefix specified
-		// group 2 is namespace prefix excl. delimiter (colon)
-		prefix = matcher.group(2);
-	    } else {
-		// no prefix specified
-		prefix = "";
-	    }
+        Matcher matcher = NAME_PATTERN.matcher(rawName);
+        if (matcher.matches()) {
+            // check for prefix (group 1)
+            if (matcher.group(1) != null) {
+                // prefix specified
+                // group 2 is namespace prefix excl. delimiter (colon)
+                prefix = matcher.group(2);
+            } else {
+                // no prefix specified
+                prefix = "";
+            }
-	    // group 3 is localName
-	    localName = matcher.group(3);
-	} else {
-	    // illegal syntax for name
-	    throw new IllegalNameException("'" + rawName + "' is not a valid name");
-	}
+            // group 3 is localName
+            localName = matcher.group(3);
+        } else {
+            // illegal syntax for name
+            throw new IllegalNameException("'" + rawName + "' is not a valid name");
+        }
-	String uri;
-	try {
-	    uri = resolver.getURI(prefix);
-	} catch (NamespaceException nse) {
-	    throw new UnknownPrefixException(prefix);
-	}
+        String uri;
+        try {
+            uri = resolver.getURI(prefix);
+        } catch (NamespaceException nse) {
+            throw new UnknownPrefixException(prefix);
+        }
-	return new QName(uri, localName);
+        return new QName(uri, localName);
-	if ("".equals(s) || s == null) {
-	    throw new IllegalArgumentException("invalid QName literal");
-	}
+        if ("".equals(s) || s == null) {
+            throw new IllegalArgumentException("invalid QName literal");
+        }
-	if (s.charAt(0) == '{') {
-	    int i = s.indexOf('}');
+        if (s.charAt(0) == '{') {
+            int i = s.indexOf('}');
-	    if (i == -1) {
-		throw new IllegalArgumentException("invalid QName literal");
-	    }
+            if (i == -1) {
+                throw new IllegalArgumentException("invalid QName literal");
+            }
-	    if (i == s.length() - 1) {
-		throw new IllegalArgumentException("invalid QName literal");
-	    } else {
-		return new QName(s.substring(1, i), s.substring(i + 1));
-	    }
-	} else {
-	    throw new IllegalArgumentException("invalid QName literal");
-	}
+            if (i == s.length() - 1) {
+                throw new IllegalArgumentException("invalid QName literal");
+            } else {
+                return new QName(s.substring(1, i), s.substring(i + 1));
+            }
+        } else {
+            throw new IllegalArgumentException("invalid QName literal");
+        }
-     *                                JCR-style name.
+     *                              JCR-style name.
-	if (jcrName == null || jcrName.length() == 0) {
-	    throw new IllegalNameException("empty name");
-	}
+        if (jcrName == null || jcrName.length() == 0) {
+            throw new IllegalNameException("empty name");
+        }
-	Matcher matcher = NAME_PATTERN.matcher(jcrName);
-	if (!matcher.matches()) {
-	    // illegal syntax for name
-	    throw new IllegalNameException("'" + jcrName + "' is not a valid name");
-	}
+        Matcher matcher = NAME_PATTERN.matcher(jcrName);
+        if (!matcher.matches()) {
+            // illegal syntax for name
+            throw new IllegalNameException("'" + jcrName + "' is not a valid name");
+        }
-	return localName;
+        return localName;
-	return namespaceURI;
+        return namespaceURI;
-	StringBuffer sb = new StringBuffer();
-	// prefix
-	String prefix;
-	try {
-	    prefix = resolver.getPrefix(namespaceURI);
-	} catch (NamespaceException nse) {
-	    throw new NoPrefixDeclaredException("no prefix declared for URI: " + namespaceURI);
-	}
-	if (prefix.length() == 0) {
-	    // default prefix (empty string)
-	} else {
-	    sb.append(prefix);
-	    sb.append(':');
-	}
-	// name
-	sb.append(localName);
-	return sb.toString();
+        StringBuffer sb = new StringBuffer();
+        // prefix
+        String prefix;
+        try {
+            prefix = resolver.getPrefix(namespaceURI);
+        } catch (NamespaceException nse) {
+            throw new NoPrefixDeclaredException("no prefix declared for URI: " + namespaceURI);
+        }
+        if (prefix.length() == 0) {
+            // default prefix (empty string)
+        } else {
+            sb.append(prefix);
+            sb.append(':');
+        }
+        // name
+        sb.append(localName);
+        return sb.toString();
-	// QName is immutable, we can store the string representation
-	if (string == null) {
-	    string = '{' + namespaceURI + '}' + localName;
-	}
-	return string;
+        // QName is immutable, we can store the string representation
+        if (string == null) {
+            string = '{' + namespaceURI + '}' + localName;
+        }
+        return string;
-	if (this == obj) {
-	    return true;
-	}
-	if (obj instanceof QName) {
-	    QName other = (QName) obj;
-	    return namespaceURI.equals(other.namespaceURI)
-		    && localName.equals(other.localName);
-	}
-	return false;
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof QName) {
+            QName other = (QName) obj;
+            return namespaceURI.equals(other.namespaceURI)
+                    && localName.equals(other.localName);
+        }
+        return false;
-	// QName is immutable, we can store the computed hash code value
-	if (hash == 0) {
-	    hash = namespaceURI.hashCode() + 313 * localName.hashCode();
-	}
-	return hash;
+        // QName is immutable, we can store the computed hash code value
+        if (hash == 0) {
+            hash = namespaceURI.hashCode() + 313 * localName.hashCode();
+        }
+        return hash;
-	// QName is immutable, no special handling required
-	return super.clone();
+        // QName is immutable, no special handling required
+        return super.clone();
-	return toString().compareTo(((QName) o).toString());
+        return toString().compareTo(((QName) o).toString());
