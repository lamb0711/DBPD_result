(JCR-15) PersistentNode.store() ignores status when storing

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56666 13f79535-47bb-0310-9956-ffa450edef68

-                return (PersistentPropertyState) stateMgr.getItemState(propId);
+                PersistentPropertyState propState = (PersistentPropertyState) stateMgr.getItemState(propId);
+                // someone calling this method will always alter the property state, so set status to modified
+                propState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+                return propState;
+                nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+            nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
+        nodeState.setStatus(ItemState.STATUS_EXISTING_MODIFIED);
-        // first store all transient properties
-        List props = state.getPropertyEntries();
-        for (int i = 0; i < props.size(); i++) {
-            NodeState.PropertyEntry entry = (NodeState.PropertyEntry) props.get(i);
-            PersistentPropertyState pstate = (PersistentPropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
-            if (pstate.isTransient()) {
-                pstate.store();
-            }
-        }
-        // now store all child node entries
-        List nodes = state.getChildNodeEntries();
-        for (int i = 0; i < nodes.size(); i++) {
-            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) nodes.get(i);
-            PersistentNodeState nstate = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
-            store(nstate);
-        }
-        // and store itself
+            // first store all transient properties
+            List props = state.getPropertyEntries();
+            for (int i = 0; i < props.size(); i++) {
+                NodeState.PropertyEntry entry = (NodeState.PropertyEntry) props.get(i);
+                PersistentPropertyState pstate = (PersistentPropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
+                if (pstate.isTransient()) {
+                    pstate.store();
+                }
+            }
+            // now store all child node entries
+            List nodes = state.getChildNodeEntries();
+            for (int i = 0; i < nodes.size(); i++) {
+                NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) nodes.get(i);
+                PersistentNodeState nstate = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
+                store(nstate);
+            }
+            // and store itself
-        // first discard all all transient properties
-        List props = state.getPropertyEntries();
-        for (int i = 0; i < props.size(); i++) {
-            NodeState.PropertyEntry entry = (NodeState.PropertyEntry) props.get(i);
-            PersistentPropertyState pstate = (PersistentPropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
-            if (pstate.isTransient()) {
-                pstate.discard();
-            }
-        }
-        // now reload all child node entries
-        List nodes = state.getChildNodeEntries();
-        for (int i = 0; i < nodes.size(); i++) {
-            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) nodes.get(i);
-            PersistentNodeState nstate = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
-            reload(nstate);
-        }
-        // and reload itself
+            // first discard all all transient properties
+            List props = state.getPropertyEntries();
+            for (int i = 0; i < props.size(); i++) {
+                NodeState.PropertyEntry entry = (NodeState.PropertyEntry) props.get(i);
+                PersistentPropertyState pstate = (PersistentPropertyState) stateMgr.getItemState(new PropertyId(state.getUUID(), entry.getName()));
+                if (pstate.isTransient()) {
+                    pstate.discard();
+                }
+            }
+            // now reload all child node entries
+            List nodes = state.getChildNodeEntries();
+            for (int i = 0; i < nodes.size(); i++) {
+                NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) nodes.get(i);
+                PersistentNodeState nstate = (PersistentNodeState) stateMgr.getItemState(new NodeId(entry.getUUID()));
+                reload(nstate);
+            }
+            // and reload itself
