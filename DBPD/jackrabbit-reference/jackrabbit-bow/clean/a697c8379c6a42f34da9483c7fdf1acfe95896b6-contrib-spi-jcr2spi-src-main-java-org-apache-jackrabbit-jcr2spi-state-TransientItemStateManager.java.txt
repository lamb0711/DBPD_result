work in progress

- version always protected
- versionHistory always protected
- fix Node.getReferences && reference properties
- mixinTypes are 'active' upon save only (and not before). therefore
  cleanup after removeMixin is done only after save.
  adding new states defined by a new mixin are only added after the
  node has been saved.
- nodestates identified by a uuid only were created a second time upon
  ChildNodeEntry.resolve => fix needs to be improved
- Events/ChangeLog are processed by the save-target state
- ChangeLog.persisted not used any more

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@467956 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.value.QValue;
+import javax.jcr.RepositoryException;
+import javax.jcr.nodetype.ConstraintViolationException;
- * and {@link #createNewPropertyState(QName, NodeState, QPropertyDefinition)}.
+ * and {@link #createNewPropertyState(QName, NodeState, QPropertyDefinition, QValue[], int)}.
-        implements ItemStateLifeCycleListener {
+    implements ItemStateCreationListener {
-     * The parent item state manager, which return item states that are then
-     * overlayed by transient item states created by this TransientItemStateManager.
-     */
-    private final ItemStateManager parent;
-
-    /**
+    /**
+     *
+     * @param idFactory
+     * @param parent
+     */
-        this.parent = parent;
-        ((TransientISFactory) getTransientFactory()).setListener(this);
+        getTransientFactory().setListener(this);
-        parent.addChildNodeState(nodeState, uuid);
+        parent.addChildNodeState(nodeState);
-        nodeState.addListener(this);
-     *                             with the given name.
+     * with the given name.
+     * @throws ConstraintViolationException
+     * @throws RepositoryException
-    PropertyState createNewPropertyState(QName propName, NodeState parent, QPropertyDefinition definition)
-            throws ItemExistsException {
+    PropertyState createNewPropertyState(QName propName, NodeState parent,
+                                         QPropertyDefinition definition,
+                                         QValue[] values, int propertyType)
+        throws ItemExistsException, ConstraintViolationException, RepositoryException {
+        // NOTE: callers must make sure, the property type is not 'undefined'
+        propState.init(propertyType, values);
-        propState.addListener(this);
-            rootNodeState.addListener(this);
+        if (!Status.isValidStatusChange(previousStatus, state.getStatus(), false)) {
+            log.error("ItemState has invalid status: " + state.getStatus());
+            return;
+        }
+
-            case Status.NEW:
-                // new state has been created
-                changeLog.added(state);
-                break;
+
+    //-----------------------------------------< ItemStateCreationListener >---
+
+    /**
+     * @see ItemStateCreationListener#created(ItemState)
+     */
+    public void created(ItemState state) {
+        // new state has been created
+        if (state.getStatus() == Status.NEW) {
+            changeLog.added(state);
+        }
+    }
