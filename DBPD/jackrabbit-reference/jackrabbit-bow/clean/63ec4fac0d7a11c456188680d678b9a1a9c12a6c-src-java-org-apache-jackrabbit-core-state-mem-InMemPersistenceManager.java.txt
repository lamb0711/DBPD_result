redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-public class InMemPersistenceManager implements BLOBStore, PersistenceManager {
+public class InMemPersistenceManager extends AbstractPersistenceManager
+        implements BLOBStore {
-     * @see PersistenceManager#load(PersistentNodeState)
+     * @see PersistenceManager#load
-    public synchronized void load(PersistentNodeState state)
+    public synchronized NodeState load(String uuid)
+
-        byte[] data = (byte[]) stateStore.get(state.getId());
+        NodeId id = new NodeId(uuid);
+
+        byte[] data = (byte[]) stateStore.get(id);
-            throw new NoSuchItemStateException(state.getId().toString());
+            throw new NoSuchItemStateException(id.toString());
+            NodeState state = createNew(uuid, null, null);
-            // there's no need to close a ByteArrayInputStream
-            //in.close();
+            return state;
-            String msg = "failed to read node state: " + state.getId();
+            String msg = "failed to read node state: " + id;
-     * @see PersistenceManager#load(PersistentPropertyState)
+     * @see PersistenceManager#load
-    public synchronized void load(PersistentPropertyState state)
+    public synchronized PropertyState load(QName name, String parentUUID)
+
-        byte[] data = (byte[]) stateStore.get(state.getId());
+        PropertyId id = new PropertyId(parentUUID, name);
+
+        byte[] data = (byte[]) stateStore.get(id);
-            throw new NoSuchItemStateException(state.getId().toString());
+            throw new NoSuchItemStateException(id.toString());
+            PropertyState state = createNew(name, parentUUID);
-            // there's no need to close a ByteArrayInputStream
-            //in.close();
+            return state;
-            String msg = "failed to read property state: " + state.getId();
+            String msg = "failed to read property state: " + id;
-     * @see PersistenceManager#store
+     * @see AbstractPersistenceManager#store
-    public synchronized void store(PersistentNodeState state) throws ItemStateException {
+    protected void store(NodeState state) throws ItemStateException {
-     * @see PersistenceManager#store
+     * @see AbstractPersistenceManager#store
-    public synchronized void store(PersistentPropertyState state) throws ItemStateException {
+    protected void store(PropertyState state) throws ItemStateException {
-     * @see PersistenceManager#destroy
+     * @see AbstractPersistenceManager#destroy
-    public synchronized void destroy(PersistentNodeState state) throws ItemStateException {
+    protected void destroy(NodeState state) throws ItemStateException {
-     * @see PersistenceManager#destroy
+     * @see AbstractPersistenceManager#destroy
-    public synchronized void destroy(PersistentPropertyState state) throws ItemStateException {
+    protected void destroy(PropertyState state) throws ItemStateException {
-     * @see PersistenceManager#load(NodeReferences)
+     * @see PersistenceManager#load
-    public synchronized void load(NodeReferences refs)
+    public synchronized NodeReferences load(NodeId targetId)
+
-        byte[] data = (byte[]) refsStore.get(refs.getTargetId());
+        byte[] data = (byte[]) refsStore.get(targetId);
-            throw new NoSuchItemStateException(refs.getTargetId().toString());
+            throw new NoSuchItemStateException(targetId.toString());
+            NodeReferences refs = new NodeReferences(targetId);
-            // there's no need to close a ByteArrayInputStream
-            //in.close();
+            return refs;
-            String msg = "failed to load references: " + refs.getTargetId();
+            String msg = "failed to load references: " + targetId;
-     * @see PersistenceManager#store(NodeReferences)
+     * @see AbstractPersistenceManager#store
-    public synchronized void store(NodeReferences refs) throws ItemStateException {
+    protected void store(NodeReferences refs) throws ItemStateException {
-     * @see PersistenceManager#destroy(NodeReferences)
+     * @see AbstractPersistenceManager#destroy
-    public synchronized void destroy(NodeReferences refs) throws ItemStateException {
+    protected void destroy(NodeReferences refs) throws ItemStateException {
