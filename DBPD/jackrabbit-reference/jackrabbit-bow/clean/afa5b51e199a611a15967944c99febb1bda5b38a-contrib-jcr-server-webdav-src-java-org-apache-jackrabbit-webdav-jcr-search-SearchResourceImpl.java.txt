[JCR-000] Adjusting to spec 0.16.4 changes
[JCR-107] Typos in jcr-server io package javadocs
[JCR-104] Contrib/Jcr-Server: Improve package structure


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161660 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.webdav.spi.search;
+package org.apache.jackrabbit.webdav.jcr.search;
-import org.apache.jackrabbit.webdav.search.SearchRequest;
-import org.apache.jackrabbit.webdav.spi.JcrDavException;
-import org.apache.jackrabbit.webdav.spi.ItemResourceConstants;
+import org.apache.jackrabbit.webdav.search.SearchInfo;
+import org.apache.jackrabbit.webdav.jcr.JcrDavException;
+import org.apache.jackrabbit.JcrConstants;
+import org.jdom.Namespace;
-public class SearchResourceImpl implements SearchResource, ItemResourceConstants {
+public class SearchResourceImpl implements SearchResource {
-            qgs = new QueryGrammerSet(langs);
+            qgs = new QueryGrammerSet();
+            for (int i = 0; i < langs.length; i++) {
+                // todo: define proper namespace
+                qgs.addQueryLanguage(langs[i], Namespace.NO_NAMESPACE);
+            }
-     * Execute the query defined by the given <code>sRequest</code>.
+     * Execute the query defined by the given <code>sInfo</code>.
-     * @see SearchResource#search(org.apache.jackrabbit.webdav.search.SearchRequest)
+     * @see SearchResource#search(org.apache.jackrabbit.webdav.search.SearchInfo)
-    public MultiStatus search(SearchRequest sRequest) throws DavException {
+    public MultiStatus search(SearchInfo sInfo) throws DavException {
-            Query q = getQuery(sRequest);
+            Query q = getQuery(sInfo);
-     * Create a query from the information present in the <code>sRequest</code>
+     * Create a query from the information present in the <code>sInfo</code>
-     * specified query is persisted by calling {@link Query#save(String)}.</li>
+     * specified query is persisted by calling {@link Query#storeAsNode(String)}.</li>
-     * @param sRequest defining the query to be executed
+     * @param sInfo defining the query to be executed
-     * @throws InvalidQueryException if the query defined by <code>sRequest</code> is invalid
+     * @throws InvalidQueryException if the query defined by <code>sInfo</code> is invalid
-     * @throws DavException if <code>sRequest</code> is <code>null</code> and
+     * @throws DavException if <code>sInfo</code> is <code>null</code> and
-     * occurs when calling {@link Query#save(String)}/
+     * occurs when calling {@link Query#storeAsNode(String)}/
-    private Query getQuery(SearchRequest sRequest)
+    private Query getQuery(SearchInfo sInfo)
-                if (qNode.isNodeType("nt:query")) {
+                if (qNode.isNodeType(JcrConstants.NT_QUERY)) {
-        if (sRequest != null) {
-            q = qMgr.createQuery(sRequest.getQuery(), sRequest.getLanguageName());
+        if (sInfo != null) {
+            q = qMgr.createQuery(sInfo.getQuery(), sInfo.getLanguageName());
-                q.save(resourcePath);
+                q.storeAsNode(resourcePath);
-        String[] propertyNames = qResult.getPropertyNames();
+        String[] columnNames = qResult.getColumnNames();
-            String nodePath = values[0].getString();
-            // create a new ms-response for each row of the result set 
+            // get the jcr:path column indicating the node path
+            String nodePath = row.getValue(JcrConstants.JCR_PATH).getString();
+            // create a new ms-response for this row of the result set
-            // add a search-result-property for each value column
-            for (int i = 0; i < values.length; i++) {
-                resp.add(new SearchResultProperty(propertyNames[i], values[i]));
-            }
+            // build the s-r-property
+            SearchResultProperty srp = new SearchResultProperty(columnNames, values);
+            resp.add(srp);
