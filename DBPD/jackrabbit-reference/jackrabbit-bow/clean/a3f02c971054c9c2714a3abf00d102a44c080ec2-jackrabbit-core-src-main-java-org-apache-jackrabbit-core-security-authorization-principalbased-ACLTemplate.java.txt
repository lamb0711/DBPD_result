JCR-2700 : Allow for wildcard restriction in resource-based ACEs

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983906 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.security.authorization.GlobPattern;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
-    /**
-     * rep:glob property name used to restrict the number of child nodes
-     * or properties that are affected by the privileges applied at
-     * rep:nodePath
-     */
-    static final Name P_GLOB = NF.create(Name.NS_REP_URI, "glob");
+    private final NameResolver resolver;
+
+        this.resolver = resolver;
+
-                                   boolean allow, Map<String, Value> restrictions)
-            throws RepositoryException {
-        checkValidEntry(princ, privileges, allow, restrictions);
+                                   boolean allow, Map<String, Value> restrictions) throws RepositoryException {
+        // adjust restrictions if necessary
+        Map<String, Value> rest = adjustRestrictions(restrictions);
+        checkValidEntry(princ, privileges, allow, rest);
+        return new Entry(princ, privileges, allow, rest);
+    }
+    private Map<String, Value> adjustRestrictions(Map<String, Value> restrictions) throws RepositoryException {
-        if (v.getType() != PropertyType.PATH) {
+        if (v == null) {
+            v = restrictions.get(P_NODE_PATH.toString());
+        }
+        if (v != null && v.getType() != PropertyType.PATH) {
+        if (v == null) {
+            v = restrictions.get(P_GLOB.toString());
+        }
-        return new Entry(princ, privileges, allow, restrictions);
+
+        return restrictions;
-        if (!rNames.contains(jcrNodePathName)) {
+        if (!rNames.contains(jcrNodePathName) && !rNames.contains(P_NODE_PATH.toString())) {
-        if (jcrNodePathName.equals(restrictionName)) {
+        if (jcrNodePathName.equals(restrictionName) || P_NODE_PATH.toString().equals(restrictionName)) {
-        } else if (jcrGlobName.equals(restrictionName)) {
+        } else if (jcrGlobName.equals(restrictionName) || P_GLOB.toString().equals(restrictionName)) {
-            super(principal, privileges, allow, restrictions, valueFactory);
+            super(principal, privileges, allow, restrictions);
-            // TODO: review again
-            Value np = getRestriction(jcrNodePathName);
-            nodePath = getRestriction(jcrNodePathName).getString();
-            Value glob = getRestriction(jcrGlobName);
+            Map<Name, Value> rstr = getRestrictions();
+            nodePath = rstr.get(P_NODE_PATH).getString();
+            Value glob = rstr.get(P_GLOB);
-                StringBuffer b = new StringBuffer(nodePath);
-                b.append(glob.getString());
-                pattern = GlobPattern.create(b.toString());
+                pattern = GlobPattern.create(nodePath, glob.getString());
+
+        @Override
+        protected NameResolver getResolver() {
+            return resolver;
+        }
+
+        @Override
+        protected ValueFactory getValueFactory() {
+            return valueFactory;
+        }
