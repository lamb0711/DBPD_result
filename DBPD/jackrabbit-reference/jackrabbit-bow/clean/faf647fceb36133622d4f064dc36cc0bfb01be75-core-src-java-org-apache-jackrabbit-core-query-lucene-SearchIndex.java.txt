JCR-189: QueryHandler should use lucene Input-/OutputStream implementations

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@233174 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystemException;
+import java.io.File;
+     * The location of the search index.
+     * <p/>
+     * Note: This is a <b>mandatory</b> parameter!
+     */
+    private String path;
+
+    /**
-    private int minMergeDocs = 1000;
+    private int minMergeDocs = 100;
-     * Initializes this <code>QueryHandler</code>.
+     * Initializes this <code>QueryHandler</code>. This implementation requires
+     * that a path parameter is set in the configuration. If this condition
+     * is not met, a <code>IOException</code> is thrown.
+     *
-        try {
-            QueryHandlerContext context = getContext();
-            index = new MultiIndex(context.getFileSystem(), this,
-                    context.getItemStateManager(), context.getRootUUID());
-            if (index.getRedoLogApplied() || forceConsistencyCheck) {
-                log.info("Running consistency check...");
-                try {
-                    ConsistencyCheck check = ConsistencyCheck.run(index,
-                            context.getItemStateManager());
-                    if (autoRepair) {
-                        check.repair(true);
-                    } else {
-                        List errors = check.getErrors();
-                        if (errors.size() == 0) {
-                            log.info("No errors detected.");
-                        }
-                        for (Iterator it = errors.iterator(); it.hasNext(); ) {
-                            ConsistencyCheckError err = (ConsistencyCheckError) it.next();
-                            log.info(err.toString());
-                        }
+        QueryHandlerContext context = getContext();
+        if (path == null) {
+            throw new IOException("SearchIndex requires 'path' parameter in configuration!");
+        }
+        index = new MultiIndex(new File(path), this,
+                context.getItemStateManager(), context.getRootUUID());
+        if (index.getRedoLogApplied() || forceConsistencyCheck) {
+            log.info("Running consistency check...");
+            try {
+                ConsistencyCheck check = ConsistencyCheck.run(index,
+                        context.getItemStateManager());
+                if (autoRepair) {
+                    check.repair(true);
+                } else {
+                    List errors = check.getErrors();
+                    if (errors.size() == 0) {
+                        log.info("No errors detected.");
-                } catch (Exception e) {
-                    log.warn("Failed to run consistency check on index: " + e);
+                    for (Iterator it = errors.iterator(); it.hasNext(); ) {
+                        ConsistencyCheckError err = (ConsistencyCheckError) it.next();
+                        log.info(err.toString());
+                    }
+            } catch (Exception e) {
+                log.warn("Failed to run consistency check on index: " + e);
-        } catch (FileSystemException e) {
-            throw new IOException(e.getMessage());
+     * Sets the location of the search index.
+     *
+     * @param path the location of the search index.
+     */
+    public void setPath(String path) {
+        this.path = path;
+    }
+
+    /**
+     * Returns the location of the search index. Returns <code>null</code> if
+     * not set.
+     *
+     * @return the location of the search index.
+     */
+    public String getPath() {
+        return path;
+    }
+
+    /**
