- Changed name escaping. Underscore is only escaped if it is followed by xHHHH where H is a hex digit.
- Added more test cases.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159481 13f79535-47bb-0310-9956-ffa450edef68

- * todo change implementation to latest spec. only encode _x when followed by XXXX_
-    private static Pattern ENCODE_PATTERN = Pattern.compile("_x\\p{XDigit}{4}_");
+    private static final Pattern ENCODE_PATTERN = Pattern.compile("_x\\p{XDigit}{4}_");
-    private static char[] PADDING = new char[] {'0', '0', '0'};
+    private static final char[] PADDING = new char[] {'0', '0', '0'};
+
+    /** All the possible hex digits */
+    private static final String HEX_DIGITS = "0123456789abcdefABCDEF";
-                        if (name.charAt(i) == '_'
-                                && name.length() > (i + 1)
-                                && name.charAt(i + 1) == 'x') {
+                        if (needsEscaping(name, i)) {
-                    if (name.charAt(i) == '_'
-                            && name.length() > (i + 1)
-                            && name.charAt(i + 1) == 'x') {
+                    if (needsEscaping(name, i)) {
-     * <code>"_x" + hex value of c + "_"</code>. Where the hex value has always
-     * four digits with possibly leading zeros.
+     * <code>"_x" + hex value of c + "_"</code>. Where the hex value has
+     * four digits if the character with possibly leading zeros.
+    /**
+     * Returns true if <code>name.charAt(location)</code> is the underscore
+     * character and the following character sequence is 'xHHHH_' where H
+     * is a hex digit.
+     * @param name the name to check.
+     * @param location the location to look at.
+     * @throws ArrayIndexOutOfBoundsException if location > name.length()
+     */
+    private static boolean needsEscaping(String name, int location) {
+        if (name.charAt(location) == '_' && name.length() >= location + 6) {
+            if (name.charAt(location + 1) == 'x'
+                    && HEX_DIGITS.indexOf(name.charAt(location + 2)) != -1
+                    && HEX_DIGITS.indexOf(name.charAt(location + 3)) != -1
+                    && HEX_DIGITS.indexOf(name.charAt(location + 4)) != -1
+                    && HEX_DIGITS.indexOf(name.charAt(location + 5)) != -1) {
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    }
