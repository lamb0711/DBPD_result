JCR-473: Some enhancements to jackrabbit commons

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@420449 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.NamespaceException;
-
-import org.apache.jackrabbit.util.XMLChar;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+     * Extra QName for the root node
+     */
+    public static final QName ROOT = new QName(NS_DEFAULT_URI,"");
+
+    /**
-    /**
-     * The reqular expression pattern used to validate and parse
-     * qualified names.
-     * <p>
-     * The pattern contains the following groups:
-     * <ul>
-     * <li>group 1 is namespace prefix incl. delimiter (colon)
-     * <li>group 2 is namespace prefix excl. delimiter (colon)
-     * <li>group 3 is localName
-     * </ul>
-     */
-    private static final Pattern NAME_PATTERN = Pattern.compile(
-            "(([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?):)?"
-            + "([^ /:\\[\\]*'\"|](?:[^/:\\[\\]*'\"|]*[^ /:\\[\\]*'\"|])?)");
-
-    /**
-     * Matcher instance as thread-local.
-     */
-    private static final ThreadLocal NAME_MATCHER = new ThreadLocal() {
-        protected Object initialValue() {
-            return NAME_PATTERN.matcher("dummy");
-        }
-    };
-
-     * can be checked by calling {@link #checkFormat(String)}.
+     * can be checked by calling {@link NameFormat#checkFormat(String)}.
+     * @throws IllegalArgumentException if <code>localName</code> is invalid.
+     * @deprecated Use {@link NameFormat#parse(String, NamespaceResolver)} instead
-        if (resolver == null) {
-            throw new NullPointerException("resolver must not be null");
-        }
-
-        if (rawName == null || rawName.length() == 0) {
-            throw new IllegalNameException("empty name");
-        }
-
-        // parts[0]: prefix
-        // parts[1]: localName
-        String[] parts = parse(rawName);
-
-        String uri;
-        try {
-            uri = resolver.getURI(parts[0]);
-        } catch (NamespaceException nse) {
-            throw new UnknownPrefixException(parts[0]);
-        }
-
-        return new QName(uri, parts[1]);
+        return NameFormat.parse(rawName, resolver);
+     * @deprecated Use {@link NameFormat#parse(String)} instead.
-        if (jcrName == null || jcrName.length() == 0) {
-            throw new IllegalNameException("empty name");
-        }
-
-        if (".".equals(jcrName) || "..".equals(jcrName)) {
-            // illegal syntax for name
-            throw new IllegalNameException("'" + jcrName + "' is not a valid name");
-        }
-
-        String prefix;
-        String localName;
-
-
-        Matcher matcher = (Matcher) NAME_MATCHER.get();
-        matcher.reset(jcrName);
-        if (matcher.matches()) {
-            // check for prefix (group 1)
-            if (matcher.group(1) != null) {
-                // prefix specified
-                // group 2 is namespace prefix excl. delimiter (colon)
-                prefix = matcher.group(2);
-                // check if the prefix is a valid XML prefix
-                if (!XMLChar.isValidNCName(prefix)) {
-                    // illegal syntax for prefix
-                    throw new IllegalNameException("'" + jcrName
-                            + "' is not a valid name: illegal prefix");
-                }
-            } else {
-                // no prefix specified
-                prefix = "";
-            }
-
-            // group 3 is localName
-            localName = matcher.group(3);
-        } else {
-            // illegal syntax for name
-            throw new IllegalNameException("'" + jcrName + "' is not a valid name");
-        }
-
-        return new String[]{prefix, localName};
+        return NameFormat.parse(jcrName);
+     * @deprecated Use {@link NameFormat#format(QName, NamespaceResolver)}
+     * instead.
-        StringBuffer sb = new StringBuffer();
-        toJCRName(resolver, sb);
-        return sb.toString();
+        return NameFormat.format(this, resolver);
+     * @deprecated Use {@link NameFormat#format(QName, NamespaceResolver, StringBuffer)}
+     * instead.
-        // prefix
-        String prefix;
-        try {
-            prefix = resolver.getPrefix(namespaceURI);
-        } catch (NamespaceException nse) {
-            throw new NoPrefixDeclaredException("no prefix declared for URI: "
-                    + namespaceURI);
-        }
-        if (prefix.length() == 0) {
-            // default prefix (empty string)
-        } else {
-            buf.append(prefix);
-            buf.append(':');
-        }
-        // name
-        buf.append(localName);
+        NameFormat.format(this, resolver, buf);
+    //---------------------------------------------------------------< Object >
+     * @see Object#toString()
+    //------------------------------------------------------------< Cloneable >
+    //-----------------------------------------------------------< Comparable >
