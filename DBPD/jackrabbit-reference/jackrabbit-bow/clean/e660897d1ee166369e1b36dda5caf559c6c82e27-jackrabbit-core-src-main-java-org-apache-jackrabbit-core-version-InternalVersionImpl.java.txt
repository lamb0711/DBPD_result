JCR-1593 JSR 283: Simple versioning
JCR-2058 JSR 283: VersionManager and new versioning methods


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@765556 13f79535-47bb-0310-9956-ffa450edef68

-     * @param node
+     * @param vh containing version history
+     * @param node node state of this version
+     * @param name name of this version
+    public InternalVersion getLinearSuccessor(InternalVersion baseVersion) {
+        // walk up all predecessors of the base version until 'this' version
+        // is found.
+        InternalVersion pred = baseVersion.getLinearPredecessor();
+        while (pred != null && !pred.getId().equals(getId())) {
+            baseVersion = pred;
+            pred = baseVersion.getLinearPredecessor();
+        }
+        return pred == null ? null : baseVersion;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+     *
+     * Always return the left most predecessor
+     */
+    public InternalVersion getLinearPredecessor() {
+        InternalValue[] values = node.getPropertyValues(NameConstants.JCR_PREDECESSORS);
+        if (values != null && values.length > 0) {
+            NodeId vId = new NodeId(values[0].getUUID());
+            return versionHistory.getVersion(vId);
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * {@inheritDoc}
-     * @throws RepositoryException
+     * @param cessors list of versions to store
+     * @param propname property name to store
+     * @param store if <code>true</code> the node is stored
+     * @throws RepositoryException if a repository error occurs
-    private void storeXCessors(List cessors, Name propname, boolean store)
+    private void storeXCessors(List/*<InternalVersion>*/ cessors, Name propname, boolean store)
-     * @throws RepositoryException
+     * @throws RepositoryException if a repository error occurs
-        // detach cached successors from preds
+        // detach cached successors from predecessors
-     * @throws RepositoryException
+     * @throws RepositoryException if a repository error occurs
-     * @param succ
-     * @param store
-     * @throws RepositoryException
+     * @param succ successor
+     * @param store <code>true</code> if node is stored
+     * @throws RepositoryException if a repository error occurs
+     * @param store <code>true</code> if node is stored immediately
+     * @throws RepositoryException if a repository error occurs
-        // attach v's predecessors
+        // attach V's predecessors
+     * @param store <code>true</code> if node is stored immediately
+     * @throws RepositoryException if a repository error occurs
-        // attach v's successors
+        // attach V's successors
-     * @param label
+     * @param label label to add
-     * @param label
+     * @param label label to remove
-        if (labelCache == null) {
-            return false;
-        } else {
-            return labelCache.remove(label);
-        }
+        return labelCache != null && labelCache.remove(label);
-     * @param label
+     * @param label label to check
-        if (labelCache == null) {
-            return false;
-        } else {
-            return labelCache.contains(label);
-        }
+        return labelCache != null && labelCache.contains(label);
-     * @throws RepositoryException
+     * @throws RepositoryException if a repository error occurs
