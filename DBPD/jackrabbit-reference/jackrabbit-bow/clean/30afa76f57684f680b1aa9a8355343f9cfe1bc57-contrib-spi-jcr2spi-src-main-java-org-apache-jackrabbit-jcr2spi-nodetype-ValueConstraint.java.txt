work in progress

- javadoc
- remove some DIFF comments

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@432265 13f79535-47bb-0310-9956-ffa450edef68

-    final String qualifiedDefinition;
+    private final String qualifiedDefinition;
+     * In other words: subclasses, that need to make a conversion to JCR value
+     * must overwrite this and return a value that has all qualified names
+     * and path elements resolved.
-    // DIFF JACKRABBIT: added method
+     * By default the qualified definition is the same as the JCR definition.
+     *
-    //-------------------------------------------< java.lang.Object overrides >
+    //-----------------------------------------< java.lang.Object overrides >---
-    //--------------------------------------------------------------------------
-    // DIFF JACKRABBIT: method added
+    //-----------------------------------< static factory and check methods >---
-            throw new IllegalArgumentException("illegal definition (null)");
+            throw new IllegalArgumentException("Illegal definition (null) for ValueConstraint.");
-                throw new IllegalArgumentException("unknown/unsupported target type for constraint: "
-                        + PropertyType.nameFromValue(type));
+                throw new IllegalArgumentException("Unknown/unsupported target type for constraint: " + PropertyType.nameFromValue(type));
-    // DIFF JACKRABBIT: moved from EffectiveNodeType
+//---------------------------------------------< Subclass BooleanConstraint >---
-    private void check(boolean bool) throws ConstraintViolationException {
-        if (bool != reqBool) {
-            throw new ConstraintViolationException("'" + bool + "' does not satisfy the constraint '" + qualifiedDefinition + "'");
-        }
-    }
-
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '"  + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '"  + getQualifiedDefinition() + "'");
-                check(Boolean.valueOf(value.getString()).booleanValue());
+                boolean b = Boolean.valueOf(value.getString()).booleanValue();
+                if (b != reqBool) {
+                    throw new ConstraintViolationException("'" + b + "' does not satisfy the constraint '" + getQualifiedDefinition() + "'");
+                }
+//----------------------------------------------< Subclass StringConstraint >---
-    private void check(String text) throws ConstraintViolationException {
-        if (text == null) {
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
-        }
-        Matcher matcher = pattern.matcher(text);
-        if (!matcher.matches()) {
-            throw new ConstraintViolationException("'" + text  + "' does not satisfy the constraint '" + qualifiedDefinition + "'");
-        }
-    }
-
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                check(value.toString());
+                String text = value.toString();
+                Matcher matcher = pattern.matcher(text);
+                if (!matcher.matches()) {
+                    throw new ConstraintViolationException("'" + text  + "' does not satisfy the constraint '" + getQualifiedDefinition() + "'");
+                }
+//---------------------------------------------< Subclass NumericConstraint >---
-    private void check(Double number) throws ConstraintViolationException {
-        if (number == null) {
-            throw new ConstraintViolationException("null value does not satisfy the constraint '"
-                    + qualifiedDefinition + "'");
-        }
-        check(number.doubleValue());
-    }
-
-    private void check(Long number) throws ConstraintViolationException {
-        if (number == null) {
-            throw new ConstraintViolationException("null value does not satisfy the constraint '"
-                    + qualifiedDefinition + "'");
-        }
-        check(number.doubleValue());
-    }
-
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-                    + qualifiedDefinition + "'");
+                    + getQualifiedDefinition() + "'");
+//------------------------------------------------< Subclass DateConstraint >---
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
+//------------------------------------------------< Subclass PathConstraint >---
+    /**
+     * Uses {@link PathFormat#format(Path, NamespaceResolver)} to convert the
+     * qualified <code>Path</code> into a JCR path.
+     *
+     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     */
-            return qualifiedDefinition;
+            return getQualifiedDefinition();
+     * @see ValueConstraint#getQualifiedDefinition()
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                                + qualifiedDefinition + "'");
+                                + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+//------------------------------------------------< Subclass NameConstraint >---
-    final QName name;
+
+    private final QName name;
+    /**
+     * Uses {@link NameFormat#format(QName, NamespaceResolver)} to convert the
+     * qualified <code>QName</code> into a JCR name.
+     *
+     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     */
-            return qualifiedDefinition;
+            return getQualifiedDefinition();
+     * @see ValueConstraint#getQualifiedDefinition()
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                            + qualifiedDefinition + "'");
+                            + getQualifiedDefinition() + "'");
+//-------------------------------------------< Subclass ReferenceConstraint >---
-    final QName ntName;
+
+    private final QName ntName;
+    /**
+     * Uses {@link NameFormat#format(QName, NamespaceResolver)} to convert the
+     * qualified nodetype name into a JCR name.
+     *
+     * @see ValueConstraint#getDefinition(NamespaceResolver)
+     */
-            return qualifiedDefinition;
+            return getQualifiedDefinition();
+    /**
+     * @see ValueConstraint#check(QValue)
+     */
-            throw new ConstraintViolationException("null value does not satisfy the constraint '" + qualifiedDefinition + "'");
+            throw new ConstraintViolationException("Null value does not satisfy the constraint '" + getQualifiedDefinition() + "'");
-                // @todo check REFERENCE value constraint (requires a session)
+                // TODO check REFERENCE value constraint (requires a session)
