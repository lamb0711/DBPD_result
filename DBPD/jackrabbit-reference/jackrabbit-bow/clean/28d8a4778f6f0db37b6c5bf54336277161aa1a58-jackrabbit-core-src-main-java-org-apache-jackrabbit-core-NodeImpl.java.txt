JCR-2166: Provide query support for WEAKREFERENCE reverse lookup

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@787183 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.Collections;
+import org.apache.jackrabbit.core.query.QueryManagerImpl;
+import org.apache.jackrabbit.util.ISO9075;
-        return getWeakReferences(null);
+        // check state of this instance
+        sanityCheck();
+
+        Value ref = getSession().getValueFactory().createValue(this, true);
+        List<Property> props = new ArrayList<Property>();
+        QueryManagerImpl qm = (QueryManagerImpl) session.getWorkspace().getQueryManager();
+        for (Node n : qm.getWeaklyReferringNodes(this)) {
+            for (PropertyIterator it = n.getProperties(); it.hasNext(); ) {
+                Property p = it.nextProperty();
+                if (p.getType() == PropertyType.WEAKREFERENCE) {
+                    Collection<Value> refs;
+                    if (p.isMultiple()) {
+                        refs = Arrays.asList(p.getValues());
+                    } else {
+                        refs = Collections.singleton(p.getValue());
+                    }
+                    if (refs.contains(ref)) {
+                        props.add(p);
+                    }
+                }
+            }
+        }
+        return new PropertyIteratorAdapter(props);
+        if (name == null) {
+            return getWeakReferences();
+        }
+
-        // TODO tweak query implemention in order to support WEAKREFERENCE reverse lookup
+            StringBuilder stmt = new StringBuilder();
+            stmt.append("//*[@").append(ISO9075.encode(name));
+            stmt.append(" = '").append(data.getId()).append("']");
-                    "//*[jcr:contains(., '" + data.getId() + "')]",
-                    //"//*[@*='" + data.getId() + "']",
-                    Query.XPATH);
+                    stmt.toString(), Query.XPATH);
-                for (PropertyIterator pit = n.getProperties(); pit.hasNext();) {
-                    Property p = pit.nextProperty();
-                    if (name != null && !name.equals(p.getName())) {
-                        continue;
-                    }
-                    if (p.getType() == PropertyType.WEAKREFERENCE) {
-                        boolean containsId = false;
-                        if (p.isMultiple()) {
-                            // multi-valued
-                            Value[] v = p.getValues();
-                            for (int i = 0; i < v.length; i++) {
-                                if (getIdentifier().equals(v[i].getString())) {
-                                    containsId = true;
-                                    break;
-                                }
-                            }
-                        } else {
-                            // single-valued
-                            if (getIdentifier().equals(p.getString())) {
-                                containsId = true;
-                            }
-                        }
-                        if (containsId) {
-                            l.add(p);
-                        }
-                    }
-                }
+                l.add(n.getProperty(name));
