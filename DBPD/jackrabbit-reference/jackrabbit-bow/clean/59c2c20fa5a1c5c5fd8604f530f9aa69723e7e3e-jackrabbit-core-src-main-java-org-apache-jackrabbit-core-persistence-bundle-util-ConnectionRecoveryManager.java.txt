JCR-1138: Add AbstractBundlePersistenceManager.getAllNodeIds

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@577297 13f79535-47bb-0310-9956-ffa450edef68

-        try {
-            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(sql);
-            if (stmt == null) {
-                stmt = getConnection().prepareStatement(sql);
-                preparedStatements.put(sql, stmt);
-            }
-            return executeStmtInternal(params, stmt);
-        } catch (SQLException e) {
-            logException("could not execute statement", e);
-            close();
-            throw e;
-        }
-    }
+        return executeStmt(sql, params, false, 0);
+    }    
-     * @param autoGeneratedKeys the constant that tells the driver to make auto generated keys available
+     * @param returnGeneratedKeys if the statement should return auto generated keys
+     * @param maxRows the maximum number of rows to return (0 for all rows)
-    public synchronized Statement executeStmt(String sql, Object[] params, int autoGeneratedKeys) throws SQLException {
+    public synchronized Statement executeStmt(String sql, Object[] params, boolean returnGeneratedKeys, int maxRows) throws SQLException {
-            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(sql + "_" + autoGeneratedKeys);
-            if (stmt == null) {
-                stmt = getConnection().prepareStatement(sql, autoGeneratedKeys);
-                preparedStatements.put(sql + "_" + autoGeneratedKeys, stmt);
+            String key = sql;
+            if (returnGeneratedKeys) {
+                key += " RETURN_GENERATED_KEYS";
+            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(key);
+            if (stmt == null) {
+                if (returnGeneratedKeys) {
+                    stmt = getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
+                } else {
+                    stmt = getConnection().prepareStatement(sql);
+                }
+                preparedStatements.put(key, stmt);
+            }
+            stmt.setMaxRows(maxRows);
