JCR-2762: Optimize bundle serialization

Use a bit field to optimize for common mixin type, property, child node, and shared set counts.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022942 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-import java.util.Set;
-        writeNodeId(bundle.getParentId());
-
-        // mixin types
-        writeMixinTypes(bundle);
-
-        // properties
-        writeProperties(bundle);
-
-        // write uuid flag
-        out.writeBoolean(bundle.isReferenceable());
-
-        // child nodes (list of uuid/name pairs)
-        writeChildNodeEntries(bundle);
+        NodeId parentId = bundle.getParentId();
+        if (parentId == null) {
+            parentId = BundleBinding.NULL_PARENT_ID;
+        }
+        writeNodeId(parentId);
-        // write shared set
-        writeSharedSet(bundle);
+        Collection<Name> mixins = bundle.getMixinTypeNames();
+        Collection<PropertyEntry> properties = bundle.getPropertyEntries();
+        Collection<ChildNodeEntry> nodes = bundle.getChildNodeEntries();
+        Collection<NodeId> shared = bundle.getSharedSet();
-        // set size of bundle
-        bundle.setSize(out.size() - size);
-    }
+        int mn = mixins.size();
+        int pn = properties.size();
+        int nn = nodes.size();
+        int sn = shared.size();
+        int referenceable = 0;
+        if (bundle.isReferenceable()) {
+            referenceable = 1;
+        }
+        out.writeByte(
+                Math.min(mn, 1) << 7
+                | Math.min(pn, 7) << 4
+                | Math.min(nn, 3) << 2
+                | Math.min(sn, 1) << 1
+                | referenceable);
-    private void writeMixinTypes(NodePropBundle bundle) throws IOException {
-        Set<Name> mixins = bundle.getMixinTypeNames();
-        writeVarInt(mixins.size());
+        // mixin types
+        writeVarInt(mn, 1);
-    }
-    private void writeProperties(NodePropBundle bundle) throws IOException {
-        Collection<PropertyEntry> properties = bundle.getPropertyEntries();
-        writeVarInt(properties.size());
+        // properties
+        writeVarInt(pn, 7);
-    }
-    private void writeChildNodeEntries(NodePropBundle bundle)
-            throws IOException {
-        List<ChildNodeEntry> chilren = bundle.getChildNodeEntries();
-        writeVarInt(chilren.size());
-        for (ChildNodeEntry child : chilren) {
-            writeNodeId(child.getId());   // uuid
+        // child nodes (list of name/uuid pairs)
+        writeVarInt(nn, 3);
+        for (ChildNodeEntry child : nodes) {
+            writeNodeId(child.getId());   // uuid
-    }
-    private void writeSharedSet(NodePropBundle bundle) throws IOException {
-        Set<NodeId> sharedSet = bundle.getSharedSet();
-        writeVarInt(sharedSet.size());
-        for (NodeId nodeId: sharedSet) {
+        // write shared set
+        writeVarInt(sn, 1);
+        for (NodeId nodeId: shared) {
+
+        // set size of bundle
+        bundle.setSize(out.size() - size);
-        if (id == null) {
-            id = BundleBinding.NULL_NODE_ID;
-        }
+    private void writeVarInt(int value, int base) throws IOException {
+        if (value >= base) {
+            writeVarInt(value - base);
+        }
+    }
+
