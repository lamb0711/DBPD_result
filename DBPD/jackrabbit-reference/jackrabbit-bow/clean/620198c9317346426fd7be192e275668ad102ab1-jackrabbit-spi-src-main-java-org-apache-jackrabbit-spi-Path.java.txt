JCR-2744: Avoid element arrays in PathImpl

Start progress on deprecating the Element interface by adding relevant methods to Path

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@997201 13f79535-47bb-0310-9956-ffa450edef68

- * and is immutable.<p/>
- *
+ * and is immutable.
+ * <p>
+ * only occur as the first element in a path, or</li>
+ * <li>an {@link Element#denotesIdentifier() identifier} element, which can
- *
+ * <p>
- * <p/>
- *
+ * <p>
- * <p/>
- *
+ * <p>
- * <p/>
- *
+ * <p>
+ * <li>0 for a path consisting of an identifier element only,</li>
- * <li>1 for the path consisting of any other single element,</li>
+ * <li>1 for the path consisting of a single named element,</li>
- * The depth of a valid absolute path equals the length of its
- * normalization minus 1.
- * <p/>
- *
+ * <p>
+ * The depth of a normalized absolute path equals its length minus 1.
+ * <p>
- * element. A path is relative if it is not absolute.
+ * or an identifier element. A path is relative if it is not absolute.
- * <p/>
- *
+ * <p>
- * An absolute path it is normalized if it contains no current nor parent
- * element. The normalization of a path is unique.<br>
- * <p/>
- *
- * <strong>Equalivalence:</strong><br>
+ * An absolute path it is normalized if it is not identifier-based and
+ * contains no current or parent elements. The normalization of a path
+ * is unique.<br>
+ * <p>
+ * <strong>Equivalence:</strong><br>
- * <p/>
- *
+ * <p>
- * <p/>
- *
+ * <p>
- *
+ * <p>
-     * Tests whether this path represents the root path, i.e. "/".
+     * Returns the name of the last path element, or <code>null</code>
+     * for an identifier. The names of the special root, current and parent
+     * elements are "", "." and ".." in the default namespace.
-     * @return true if this path represents the root path; false otherwise.
+     * @return name of the last path element, or <code>null</code>
-    public boolean denotesRoot();
+    Name getName();
+
+    /**
+     * Returns the index of the last path element, or {@link #INDEX_UNDEFINED}
+     * if the index is not defined or not applicable. The index of an
+     * identifier or the special root, current or parent element is always
+     * undefined.
+     *
+     * @return index of the last path element, or {@link #INDEX_UNDEFINED}
+     */
+    int getIndex();
+
+    /**
+     * Returns the normalized index of the last path element. The normalized
+     * index of an element with an undefined index is {@link #INDEX_DEFAULT}.
+     *
+     * @return normalized index of the last path element
+     */
+    int getNormalizedIndex();
+
+    /**
+     * Tests whether this is the root path, i.e. "/".
+     *
+     * @return <code>true</code> if this is the root path,
+     *         <code>false</code> otherwise.
+     */
+    boolean denotesRoot();
+
+    /**
+     * Test if this path consists of a single identifier element.
+     *
+     * @return <code>true</code> if this path is an identifier
+     */
+    boolean denotesIdentifier();
+
+    /**
+     * Checks if the last path element is the parent element ("..").
+     *
+     * @return <code>true</code> if the last path element is the parent element,
+     *         <code>false</code> otherwise
+     */
+    boolean denotesParent();
+
+    /**
+     * Checks if the last path element is the current element (".").
+     *
+     * @return <code>true</code> if the last path element is the current element,
+     *         <code>false</code> otherwise
+     */
+    boolean denotesCurrent();
+
+    /**
+     * Checks if the last path element is a named and optionally indexed
+     * element.
+     *
+     * @return <code>true</code> if the last path element is a named element,
+     *         <code>false</code> otherwise
+     */
+    boolean denotesName();
-    public boolean denotesIdentifier();
+    boolean isIdentifierBased();
