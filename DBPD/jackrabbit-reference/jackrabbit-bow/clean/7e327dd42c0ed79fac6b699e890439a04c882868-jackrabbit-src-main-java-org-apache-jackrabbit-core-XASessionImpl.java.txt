Make locking part of XAResource's transaction support

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@354456 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.observation.EventStateCollection;
-import org.apache.jackrabbit.core.state.TransactionContext;
-import org.apache.jackrabbit.core.state.TransactionException;
-import org.apache.jackrabbit.core.state.TransactionListener;
+import org.apache.jackrabbit.core.lock.LockManager;
+import org.apache.jackrabbit.core.lock.TxLockManager;
+import org.apache.jackrabbit.core.lock.SharedLockManager;
+import org.apache.jackrabbit.core.state.ChangeLog;
+import org.apache.jackrabbit.core.state.TransactionalItemStateManager;
+     * Known attribute name.
+     */
+    private static final String ATTRIBUTE_CHANGE_LOG = "ChangeLog";
+
+    /**
+     * Known attribute name.
+     */
+    private static final String ATTRIBUTE_LOCK_MANAGER = "LockManager";
+
+    /**
-        return XA_OK;
+
+        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
+        stateMgr.setChangeLog(getChangeLog(tx), true);
+
+        try {
+            // 1. Prepare state manager
+            try {
+                stateMgr.prepare();
+            } catch (TransactionException e) {
+                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            }
+
+            // 2. Prepare lock manager
+            try {
+                TxLockManager lockMgr = getTxLockManager(tx);
+                if (lockMgr != null) {
+                    lockMgr.prepare();
+                }
+            } catch (TransactionException e) {
+                stateMgr.rollback();
+                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            }
+            return XA_OK;
+
+        } finally {
+            stateMgr.setChangeLog(null, true);
+        }
-        wsp.getItemStateManager().rollback(tx);
+
+        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
+        stateMgr.setChangeLog(getChangeLog(tx), true);
+
+        try {
+            // 1. Rollback changes on lock manager
+            TxLockManager lockMgr = getTxLockManager(tx);
+            if (lockMgr != null) {
+                lockMgr.rollback();
+            }
+
+            // 2. Rollback changes on state manager
+            stateMgr.rollback();
+
+        } finally {
+            stateMgr.setChangeLog(null, true);
+        }
+        TransactionalItemStateManager stateMgr = wsp.getItemStateManager();
+        stateMgr.setChangeLog(getChangeLog(tx), true);
+
+        TxLockManager lockMgr = getTxLockManager(tx);
+
-            wsp.getItemStateManager().commit(tx);
-        } catch (TransactionException e) {
-            throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            // 1. Commit changes on state manager
+            try {
+                stateMgr.commit();
+            } catch (TransactionException e) {
+                if (lockMgr != null) {
+                    lockMgr.rollback();
+                }
+                throw new ExtendedXAException(XAException.XA_RBOTHER, e);
+            }
+
+            // 2. Commit changes on lock manager
+            if (lockMgr != null) {
+                lockMgr.commit();
+            }
+        } finally {
+            stateMgr.setChangeLog(null, true);
-        wsp.getItemStateManager().setTransactionContext(tx);
+        ChangeLog txLog = getChangeLog(tx);
+        if (txLog == null) {
+            txLog = new ChangeLog();
+            tx.setAttribute(ATTRIBUTE_CHANGE_LOG, txLog);
+        }
+        wsp.getItemStateManager().setChangeLog(txLog, false);
-        wsp.getItemStateManager().setTransactionContext(null);
-    }
-
-    /**
-     * {@inheritDoc}
-     * <p/>
-     * If we are currently associated with a transaction, the dispatch operation
-     * will be postponed until commit.
-     */
-    protected void dispatch(EventStateCollection events) {
-        if (tx != null) {
-            tx.addListener(new EventDispatcher(events));
-            return;
-        }
-        super.dispatch(events);
-    }
-
-    /**
-     * Internal {@link TransactionListener} implementation that will dispatch
-     * events only when a transaction has actually been committed.
-     */
-    static class EventDispatcher implements TransactionListener {
-
-        /**
-         * Events to dispatch if transaction is committed
-         */
-        private final EventStateCollection events;
-
-        /**
-         * Create a new instance of this class.
-         *
-         * @param events events to dispatch on commit
-         */
-        public EventDispatcher(EventStateCollection events) {
-            this.events = events;
-        }
-
-        /**
-         * {@inheritDoc}
-         * <p/>
-         * Dispatch events.
-         */
-        public void transactionCommitted(TransactionContext tx) {
-            events.dispatch();
-        }
-
-        /**
-         * {@inheritDoc}
-         * <p/>
-         * Nothing to do.
-         */
-        public void transactionRolledBack(TransactionContext tx) {
-        }
+        wsp.getItemStateManager().setChangeLog(null, false);
+
+    //-------------------------------------------------------< locking support >
+
+    /**
+     * Return the lock manager for this session. In a transactional environment,
+     * this is a session-local object that records locking/unlocking operations
+     * until final commit.
+     *
+     * @return lock manager for this session
+     * @throws javax.jcr.RepositoryException if an error occurs
+     */
+    public LockManager getLockManager() throws RepositoryException {
+        if (tx != null) {
+            TxLockManager lockMgr = (TxLockManager) tx.getAttribute(ATTRIBUTE_LOCK_MANAGER);
+            if (lockMgr == null) {
+                lockMgr = new TxLockManager(
+                        (SharedLockManager) super.getLockManager());
+                tx.setAttribute(ATTRIBUTE_LOCK_MANAGER, lockMgr);
+            }
+            return lockMgr;
+        }
+        return super.getLockManager();
+    }
+
+    /**
+     * Return the transactional change log for this session.
+     *
+     * @param tx transactional context
+     * @return change log for this session, may be <code>null</code>
+     */
+    private static ChangeLog getChangeLog(TransactionContext tx) {
+        return (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
+    }
+
+    /**
+     * Return the transactional lock manager for this session. Returns
+     * <code>null</code> if no lock manager has been used yet.
+     *
+     * @return lock manager for this session
+     */
+    private static TxLockManager getTxLockManager(TransactionContext tx) {
+        return (TxLockManager) tx.getAttribute(ATTRIBUTE_LOCK_MANAGER);
+    }
