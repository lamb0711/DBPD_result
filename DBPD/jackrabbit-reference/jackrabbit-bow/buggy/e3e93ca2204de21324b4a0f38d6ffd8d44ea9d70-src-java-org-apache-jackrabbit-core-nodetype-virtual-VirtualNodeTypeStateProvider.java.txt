- adding indexing of nodetype 
- fixing indexing of versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159669 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistryListener;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.io.UnsupportedEncodingException;
-public class VirtualNodeTypeStateProvider extends AbstractVISProvider implements NodeTypeRegistryListener {
+public class VirtualNodeTypeStateProvider extends AbstractVISProvider {
-        ntReg.addListener(this);
-    public void nodeTypeRegistered(QName ntName) {
-        // todo: do more efficient reloading
+    public void onNodeTypeAdded(QName ntName) throws RepositoryException {
-            getRootState().discard();
+            VirtualNodeState root = (VirtualNodeState) getRootState();
+            NodeTypeDef ntDef = ntReg.getNodeTypeDef(ntName);
+            VirtualNodeState ntState = createNodeTypeState(root, ntDef);
+            root.addChildNodeEntry(ntName, ntState.getUUID());
+
+            // add as hard reference
+            root.addStateReference(ntState);
+            root.notifyStateUpdated();
-            // ignore
+            throw new RepositoryException(e);
-    public void nodeTypeReRegistered(QName ntName) {
+    public void onNodeTypeModified(QName ntName) throws RepositoryException {
-            // ignore
+            throw new RepositoryException(e);
-    public void nodeTypeUnregistered(QName ntName) {
+    public void onNodeTypeRemoved(QName ntName) throws RepositoryException {
-            // ignore
+            throw new RepositoryException(e);
-        VirtualNodeState ntState = createNodeState(parent, ntDef.getName(), null, NT_NODETYPE);
+        String uuid = calculateStableUUID(ntDef.getName().toString());
+        VirtualNodeState ntState = createNodeState(parent, ntDef.getName(), uuid, NT_NODETYPE);
-            VirtualNodeState pdState = createPropertyDefState(ntState, propDefs[i]);
+            VirtualNodeState pdState = createPropertyDefState(ntState, propDefs[i], ntDef, i);
-            VirtualNodeState cnState = createChildNodeDefState(ntState, cnDefs[i]);
+            VirtualNodeState cnState = createChildNodeDefState(ntState, cnDefs[i], ntDef, i);
-    private VirtualNodeState createPropertyDefState(VirtualNodeState parent, PropDef propDef) throws RepositoryException {
-        VirtualNodeState pState = createNodeState(parent, JCR_PROPERTYDEF, null, NT_PROPERTYDEF);
+    private VirtualNodeState createPropertyDefState(VirtualNodeState parent,
+                                                    PropDef propDef,
+                                                    NodeTypeDef ntDef, int n)
+            throws RepositoryException {
+        String uuid = calculateStableUUID(ntDef.getName().toString() + "/" + JCR_PROPERTYDEF.toString() + "/" + n);
+        VirtualNodeState pState = createNodeState(parent, JCR_PROPERTYDEF, uuid, NT_PROPERTYDEF);
-    private VirtualNodeState createChildNodeDefState(VirtualNodeState parent, ChildNodeDef cnDef) throws RepositoryException {
-        VirtualNodeState pState = createNodeState(parent, JCR_CHILDNODEDEF, null, NT_CHILDNODEDEF);
+    private VirtualNodeState createChildNodeDefState(VirtualNodeState parent,
+                                                     ChildNodeDef cnDef,
+                                                     NodeTypeDef ntDef, int n)
+            throws RepositoryException {
+        String uuid = calculateStableUUID(ntDef.getName().toString() + "/" + JCR_CHILDNODEDEF.toString() + "/" + n);
+        VirtualNodeState pState = createNodeState(parent, JCR_CHILDNODEDEF, uuid, NT_CHILDNODEDEF);
+    
+    /**
+     * Calclulates a stable uuid out of the given string. The alogrith does a
+     * MD5 digest from the string an converts it into the uuid format.
+     * 
+     * @param name
+     * @return
+     * @throws RepositoryException
+     */ 
+    private static String calculateStableUUID(String name) throws RepositoryException {
+        try {
+            MessageDigest md = MessageDigest.getInstance("MD5");
+            byte[] digest = md.digest(name.getBytes("utf-8"));
+            return new UUID(digest).toString();
+        } catch (NoSuchAlgorithmException e) {
+            throw new RepositoryException(e);
+        } catch (UnsupportedEncodingException e) {
+            throw new RepositoryException(e);
+        }
+    }
