JCR-331: RepositoryConfig instance can not be reused once it has been passed to RepositoryImpl constructor

committing patch

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@386078 13f79535-47bb-0310-9956-ffa450edef68

- * is used to create a configured file system object. The file system
- * is instantiated by the {@link #init() init()} method, and accessible
- * using the {@link #getFileSystem() getFileSystem()} method. Calling
- * {@link #dispose() dispose()} will close and dispose a file system instance
- * previously created by the {@link #init() init()} method.
- *
+ * is used to create a configured file system object.
-    /** The initialized file system implementation. */
-    private FileSystem fs;
-
-        fs = null;
+     * @return new initialized file system instance.
-     * @throws IllegalStateException if the file system has already been
-     *                               initialized
-    public void init() throws ConfigurationException, IllegalStateException {
-        if (fs == null) {
-            try {
-                fs = (FileSystem) newInstance();
-                fs.init();
-            } catch (ClassCastException e) {
-                throw new ConfigurationException(
-                        "Invalid file system implementation class "
-                        + getClassName() + ".", e);
-            } catch (FileSystemException e) {
-                throw new ConfigurationException(
-                        "File system initialization failure.", e);
-            }
-        } else {
-            throw new IllegalStateException(
-            "File system has already been initialized.");
-        }
-    }
-
-    /**
-     * Closes and disposes a file system instance previously created by the
-     * {@link #init() init()} method, i.e. resets this instance to the
-     * <i>uninitialized</i> state.
-     */
-    public void dispose() {
-        if (fs != null) {
-            try {
-                fs.close();
-            } catch (FileSystemException fse) {
-                // ignore...
-            }
-            fs = null;
-        } else {
-            throw new IllegalStateException("File system has not been initialized.");
-        }
-    }
-
-    /**
-     * Returns the configured file system. The {@link #init() init()} method
-     * must have been called before this method can be invoked.
-     *
-     * @return configured file system
-     * @throws IllegalStateException if the file system has not been initialized
-     */
-    public FileSystem getFileSystem() throws IllegalStateException {
-        if (fs != null) {
+    public FileSystem createFileSystem() throws ConfigurationException {
+        try {
+            FileSystem fs = (FileSystem) newInstance();
+            fs.init();
-        } else {
-            throw new IllegalStateException(
-                    "File system has not been initialized.");
+        } catch (ClassCastException e) {
+            throw new ConfigurationException(
+                    "Invalid file system implementation class "
+                    + getClassName() + ".", e);
+        } catch (FileSystemException e) {
+            throw new ConfigurationException(
+                    "File system initialization failure.", e);
