SPI
- NamespaceRegistryImpl now only relies on RepositoryService.getRegisteredNamespaces() for methods: getPrefixes() and getURIs().
- Added methods getPrefix() and getURI() to NamespaceStorage.
- Separated nsResolver in RepositoryServiceImpl into namespace cache and session info bound namespace resolver
- Added methods getNamespacePrefix() and getNamespaceURI() to RepositoryService.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@498558 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
+import org.apache.jackrabbit.name.AbstractNamespaceResolver;
-    private final NamespaceResolverImpl nsResolver;
+    private final NamespaceCache nsCache;
-            nsResolver = new NamespaceResolverImpl();
-            uriResolver = new URIResolverImpl(repositoryUri, this, nsResolver, domFactory);
+            nsCache = new NamespaceCache();
+            uriResolver = new URIResolverImpl(repositoryUri, this, nsCache, domFactory);
-            return parentUri + "/" + Text.escape(NameFormat.format(childName, nsResolver));
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            return parentUri + "/" + Text.escape(NameFormat.format(childName, resolver));
-    QName getQName(DavPropertySet propSet) throws RepositoryException {
+    QName getQName(DavPropertySet propSet, NamespaceResolver nsResolver) throws RepositoryException {
-
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+
-                        definition = new QNodeDefinitionImpl(null, idfElem, nsResolver);
+                        definition = new QNodeDefinitionImpl(null, idfElem, resolver);
-                        definition = new QPropertyDefinitionImpl(null, idfElem, nsResolver, getQValueFactory());
+                        definition = new QPropertyDefinitionImpl(null, idfElem, resolver, getQValueFactory());
-            NodeInfoImpl nInfo = new NodeInfoImpl(id, parentId, propSet, nsResolver);
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            NodeInfoImpl nInfo = new NodeInfoImpl(id, parentId, propSet, resolver);
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+
-                        QName qName = getQName(childProps);
+                        QName qName = getQName(childProps, resolver);
-            PropertyInfo pInfo = new PropertyInfoImpl(id, parentId, propSet, nsResolver, valueFactory, getQValueFactory());
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            PropertyInfo pInfo = new PropertyInfoImpl(id, parentId, propSet,
+                    resolver, valueFactory, getQValueFactory());
-         try {
+        try {
-            LabelMethod method = new LabelMethod(uri, NameFormat.format(label, nsResolver), (moveLabel) ? LabelInfo.TYPE_SET : LabelInfo.TYPE_ADD);
+            String strLabel = NameFormat.format(label, new NamespaceResolverImpl(sessionInfo));
+            LabelMethod method = new LabelMethod(uri, strLabel, (moveLabel) ? LabelInfo.TYPE_SET : LabelInfo.TYPE_ADD);
-            LabelMethod method = new LabelMethod(uri, NameFormat.format(label, nsResolver), LabelInfo.TYPE_REMOVE);
+            String strLabel = NameFormat.format(label, new NamespaceResolverImpl(sessionInfo));
+            LabelMethod method = new LabelMethod(uri, strLabel, LabelInfo.TYPE_REMOVE);
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
-                nsResolver, valueFactory, getQValueFactory());
+                resolver, valueFactory, getQValueFactory());
-                        nsResolver.add(prefix, uri);
+                        nsCache.add(prefix, uri);
+     * @see RepositoryService#getNamespaceURI(SessionInfo, String)
+     */
+    public String getNamespaceURI(SessionInfo sessionInfo, String prefix)
+            throws NamespaceException, RepositoryException {
+        try {
+            return nsCache.getURI(prefix);
+        } catch (NamespaceException e) {
+            // refresh namespaces and try again
+            getRegisteredNamespaces(sessionInfo);
+            return nsCache.getURI(prefix);
+        }
+    }
+
+    /**
+     * @see RepositoryService#getNamespacePrefix(SessionInfo, String)
+     */
+    public String getNamespacePrefix(SessionInfo sessionInfo, String uri)
+            throws NamespaceException, RepositoryException {
+        try {
+            return nsCache.getPrefix(uri);
+        } catch (NamespaceException e) {
+            // refresh namespaces and try again
+            getRegisteredNamespaces(sessionInfo);
+            return nsCache.getPrefix(uri);
+        }
+    }
+
+    /**
-        Map namespaces = new HashMap(nsResolver.getNamespaces());
+        // make sure we have them all
+        getRegisteredNamespaces(sessionInfo);
+
+        Map namespaces = new HashMap(nsCache.getNamespaces());
-        nsResolver.add(prefix, uri);
+        nsCache.add(prefix, uri);
-        String prefix = nsResolver.getPrefix(uri);
-        Map namespaces = new HashMap(nsResolver.getNamespaces());
+        // make sure we have them all
+        getRegisteredNamespaces(sessionInfo);
+
+        String prefix = nsCache.getPrefix(uri);
+        Map namespaces = new HashMap(nsCache.getNamespaces());
-        nsResolver.remove(prefix, uri);
+        nsCache.remove(prefix, uri);
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
-                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), nsResolver, getQValueFactory()));
+                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), resolver, getQValueFactory()));
+        private final NamespaceResolver nsResolver;
+            this.nsResolver = new NamespaceResolverImpl(sessionInfo);
+
+    //----------------------------------------------< NamespaceResolverImpl >---
+
+    /**
+     * Implements a namespace resolver based on a session info.
+     */
+    private class NamespaceResolverImpl implements NamespaceResolver {
+
+        private final SessionInfo sessionInfo;
+
+        /**
+         * Creates a new namespace resolver using the given session info.
+         *
+         * @param sessionInfo the session info to contact the repository.
+         */
+        NamespaceResolverImpl(SessionInfo sessionInfo) {
+            this.sessionInfo = sessionInfo;
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public String getURI(String prefix) throws NamespaceException {
+            try {
+                return getNamespaceURI(sessionInfo, prefix);
+            } catch (RepositoryException e) {
+                String msg = "Error retrieving namespace uri";
+                throw new NamespaceException(msg, e);
+            }
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public String getPrefix(String uri) throws NamespaceException {
+            try {
+                return getNamespacePrefix(sessionInfo, uri);
+            } catch (RepositoryException e) {
+                String msg = "Error retrieving namespace prefix";
+                throw new NamespaceException(msg, e);
+            }
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public QName getQName(String jcrName) throws IllegalNameException, UnknownPrefixException {
+            return NameFormat.parse(jcrName, this);
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public String getJCRName(QName qName) throws NoPrefixDeclaredException {
+            return NameFormat.format(qName, this);
+        }
+    }
+
+    private static class NamespaceCache extends AbstractNamespaceResolver {
+
+        private final HashMap prefixToURI = new HashMap();
+        private final HashMap uriToPrefix = new HashMap();
+
+        public Map getNamespaces() {
+            return new HashMap(prefixToURI);
+        }
+
+        public void add(String prefix, String uri) {
+            prefixToURI.put(prefix, uri);
+            uriToPrefix.put(uri, prefix);
+        }
+
+        public void remove(String prefix, String uri) {
+            prefixToURI.remove(prefix);
+            uriToPrefix.remove(uri);
+        }
+
+        //----------------------------------------------< NamespaceResolver >---
+
+        public String getURI(String prefix) throws NamespaceException {
+            String uri = (String) prefixToURI.get(prefix);
+            if (uri != null) {
+                return uri;
+            } else {
+                throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
+            }
+        }
+
+        public String getPrefix(String uri) throws NamespaceException {
+            String prefix = (String) uriToPrefix.get(uri);
+            if (prefix != null) {
+                return prefix;
+            } else {
+                throw new NamespaceException(uri + ": is not a registered namespace uri.");
+            }
+        }
+    }
