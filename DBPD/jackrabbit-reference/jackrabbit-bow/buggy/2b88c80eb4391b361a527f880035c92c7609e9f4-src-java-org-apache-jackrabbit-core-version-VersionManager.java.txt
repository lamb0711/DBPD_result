- enhancing versioning to work with all workspaces

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56758 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Workspace;
-     * the uuid of the system root node
-     */
-    private final String rootId;
-
-    /**
-     * @param rootId the uuid of the version history root
-    protected VersionManager(PersistentVersionManager vMgr, String rootId) {
+    protected VersionManager(PersistentVersionManager vMgr) {
-        this.rootId = rootId;
-    public VirtualItemStateProvider getVirtualItemStateProvider(ItemStateProvider base) {
+    public VirtualItemStateProvider getVirtualItemStateProvider(SessionImpl session, ItemStateProvider base) {
+                // check, if workspace of session has history root
+                NodeImpl systemRoot = ((RepositoryImpl) session.getRepository()).getSystemRootNode(session);
+                if (!systemRoot.hasNode(VersionManager.VERSION_HISTORY_ROOT_NAME)) {
+                    // if not exist, create
+                    systemRoot.addNode(VersionManager.VERSION_HISTORY_ROOT_NAME, NodeTypeRegistry.NT_UNSTRUCTURED);
+                }
+                systemRoot.save();
+                String rootId = systemRoot.getNode(VersionManager.VERSION_HISTORY_ROOT_NAME).internalGetUUID();
+
-        mapVersionHistory(history);
+            vMgr.onVersionHistoryModified(version.getVersionHistory());
+
-            mapVersion(vhNode, version);
+
+     * Called when a internal version history has changed its internal structure,
+     * and the structure has to be remapped to the content.
+     * @param vh
+     * @throws RepositoryException
+     */
+    protected void onVersionHistoryModified(InternalVersionHistory vh) throws RepositoryException {
+        mapVersionHistory(vh);
+    }
+
+    /**
-            VirtualNodeState vhNode = virtProvider.addNode(parent, historyNodeName, vh.getId(), NodeTypeRegistry.NT_VERSION_HISTORY, null);
+            VirtualNodeState vhNode;
+            if (parent.hasChildNodeEntry(historyNodeName)) {
+                vhNode = virtProvider.getNode(parent, historyNodeName, 1);
+            } else {
+                vhNode = virtProvider.addNode(parent, historyNodeName, vh.getId(), NodeTypeRegistry.NT_VERSION_HISTORY, null);
+            }
-            VirtualNodeState vNode = virtProvider.addNode(vhNode, version.getName(), version.getId(), NodeTypeRegistry.NT_VERSION, null);
+            VirtualNodeState vNode;
+            if (vhNode.hasChildNodeEntry(version.getName())) {
+                vNode = virtProvider.getNode(vhNode, version.getName(), 1);
+            } else {
+                vNode = virtProvider.addNode(vhNode, version.getName(), version.getId(), NodeTypeRegistry.NT_VERSION, null);
+                // initialize the version
+                virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_CREATED, InternalValue.create(version.getCreated()));
-            // initialize the version
-            virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_CREATED, InternalValue.create(version.getCreated()));
-
-            // initialize the primary properties
-            InternalFrozenNode fNode = version.getFrozenNode();
-            virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(fNode.getFrozenUUID()));
-            virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE, InternalValue.create(fNode.getFrozenPrimaryType()));
-            virtProvider.setPropertyValues(vNode, VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, InternalValue.create(fNode.getFrozenMixinTypes()));
+                // initialize the primary properties
+                InternalFrozenNode fNode = version.getFrozenNode();
+                virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_UUID, InternalValue.create(fNode.getFrozenUUID()));
+                virtProvider.setPropertyValue(vNode, VersionManager.PROPNAME_FROZEN_PRIMARY_TYPE, InternalValue.create(fNode.getFrozenPrimaryType()));
+                virtProvider.setPropertyValues(vNode, VersionManager.PROPNAME_FROZEN_MIXIN_TYPES, PropertyType.NAME, InternalValue.create(fNode.getFrozenMixinTypes()));
+                if (!version.isRootVersion()) {
+                    // don't map for root verion
+                    mapFrozenNode(vNode, PersistentVersionManager.NODENAME_FROZEN, fNode);
+                }
+            }
-            if (!version.isRootVersion()) {
-                // don't map for root verion
-                mapFrozenNode(vNode, PersistentVersionManager.NODENAME_FROZEN, fNode);
-            }
-
