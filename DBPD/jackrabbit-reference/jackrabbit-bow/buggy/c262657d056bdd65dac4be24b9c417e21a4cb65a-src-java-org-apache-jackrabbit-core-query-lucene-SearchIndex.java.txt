JCR-220: Make it possible to configure Lucene Analyzer for SearchIndex
missing getAnalyzer() method

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@330270 13f79535-47bb-0310-9956-ffa450edef68

-    Analyzer getAnalyzer() {
+    Analyzer getTextAnalyzer() {
-     * Sets the analyzer in use for indexing. The given analyzer class name
-     * must satisfy the following conditions:
-     * <ul>
-     *   <li>the class must exist in the class path</li>
-     *   <li>the class must have a public default constructor</li>
-     *   <li>the class must be a Lucene Analyzer</li> 
-     * </ul>
-     * <p>
-     * If the above conditions are met, then a new instance of the class is
-     * set as the analyzer. Otherwise a warning is logged and the current
-     * analyzer is not changed.
-     * <p>
-     * This property setter method is normally invoked by the Jackrabbit
-     * configuration mechanism if the "analyzer" parameter is set in the
-     * search configuration. 
-     *
-     * @param analyzerClassName the analyzer class name
-     */
-    public void setAnalyzer(String analyzerClassName) {
-        try {
-            Class analyzerClass = Class.forName(analyzerClassName);
-            analyzer = (Analyzer) analyzerClass.newInstance();
-        } catch (Exception e) {
-            log.warn("Invalid Analyzer class: " + analyzerClassName, e);
-        }
-    }
-
-    /**
+     * Sets the analyzer in use for indexing. The given analyzer class name
+     * must satisfy the following conditions:
+     * <ul>
+     *   <li>the class must exist in the class path</li>
+     *   <li>the class must have a public default constructor</li>
+     *   <li>the class must be a Lucene Analyzer</li>
+     * </ul>
+     * <p>
+     * If the above conditions are met, then a new instance of the class is
+     * set as the analyzer. Otherwise a warning is logged and the current
+     * analyzer is not changed.
+     * <p>
+     * This property setter method is normally invoked by the Jackrabbit
+     * configuration mechanism if the "analyzer" parameter is set in the
+     * search configuration.
+     *
+     * @param analyzerClassName the analyzer class name
+     */
+    public void setAnalyzer(String analyzerClassName) {
+        try {
+            Class analyzerClass = Class.forName(analyzerClassName);
+            analyzer = (Analyzer) analyzerClass.newInstance();
+        } catch (Exception e) {
+            log.warn("Invalid Analyzer class: " + analyzerClassName, e);
+        }
+    }
+
+    /**
+     * Returns the class name of the analyzer that is currently in use.
+     *
+     * @return class name of analyzer in use.
+     */
+    public String getAnalyzer() {
+        return analyzer.getClass().getName();
+    }
+
+    /**
