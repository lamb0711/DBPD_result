JCR-699: Clustering: re-registration of nodetypes is not synchronized


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@541585 13f79535-47bb-0310-9956-ffa450edef68

-    public synchronized void registerNodeTypes(Collection ntDefs)
+    public void registerNodeTypes(Collection ntDefs)
+
+        registerNodeTypes(ntDefs, false);
+    }
+
+    /**
+     * Internal implementation of {@link #registerNodeTypes(Collection)}
+     *
+     * @param ntDefs a collection of <code>NodeTypeDef<code> objects
+     * @param external whether this invocation should be considered external
+     * @throws InvalidNodeTypeDefException if the given node type definition is invalid.
+     * @throws RepositoryException if a repository error occurs.
+     */
+    private synchronized void registerNodeTypes(Collection ntDefs, boolean external)
+            throws InvalidNodeTypeDefException, RepositoryException {
+
-        // inform cluster
-        if (eventChannel != null) {
+        // inform cluster if this is not an external invocation
+        if (!external && eventChannel != null) {
-    public synchronized void unregisterNodeTypes(Collection ntNames)
+    public void unregisterNodeTypes(Collection ntNames)
+
+        unregisterNodeTypes(ntNames, false);
+    }
+
+    /**
+     * Internal implementation of {@link #unregisterNodeTypes(Collection)}
+     *
+     * @param ntNames a collection of <code>QName</code> objects denoting the
+     *                node types to be unregistered
+     * @param external whether this invocation should be considered external
+     * @throws NoSuchNodeTypeException if any of the specified names does not
+     *                                 denote a registered node type.
+     * @throws RepositoryException if another error occurs
+     */
+    private synchronized void unregisterNodeTypes(Collection ntNames, boolean external)
+            throws NoSuchNodeTypeException, RepositoryException {
+
+        // inform cluster if this is not an external invocation
+        if (!external && eventChannel != null) {
+            eventChannel.unregistered(ntNames);
+        }
+
-     * @param ntd
-     * @return
-     * @throws NoSuchNodeTypeException
-     * @throws InvalidNodeTypeDefException
-     * @throws RepositoryException
+     * Reregister a node type.
+     * @param ntd node type definition
+     * @return the new effective node type
+     * @throws NoSuchNodeTypeException if <code>ntd</code> refers to an
+     *                                 unknown node type
+     * @throws InvalidNodeTypeDefException if the node type definition
+     *                                     is invalid
+     * @throws RepositoryException if another error occurs
-    public synchronized EffectiveNodeType reregisterNodeType(NodeTypeDef ntd)
+    public EffectiveNodeType reregisterNodeType(NodeTypeDef ntd)
+
+        return reregisterNodeType(ntd, false);
+    }
+
+    /**
+     * Internal implementation of {@link #reregisterNodeType(NodeTypeDef)}.
+     *
+     * @param ntd node type definition
+     * @param external whether this invocation should be considered external
+     * @return the new effective node type
+     * @throws NoSuchNodeTypeException if <code>ntd</code> refers to an
+     *                                 unknown node type
+     * @throws InvalidNodeTypeDefException if the node type definition
+     *                                     is invalid
+     * @throws RepositoryException if another error occurs
+     */
+    private synchronized EffectiveNodeType reregisterNodeType(NodeTypeDef ntd,
+                                                              boolean external)
+            throws NoSuchNodeTypeException, InvalidNodeTypeDefException,
+            RepositoryException {
+
+            // inform cluster if this is not an external invocation
+            if (!external && eventChannel != null) {
+                eventChannel.reregistered(ntd);
+            }
+
-        // validate and register new node type definitions
-        internalRegister(ntDefs);
-        // persist new node type definitions
-        for (Iterator iter = ntDefs.iterator(); iter.hasNext();) {
-            NodeTypeDef ntDef = (NodeTypeDef) iter.next();
-            customNTDefs.add(ntDef);
-        }
-        persistCustomNodeTypeDefs(customNTDefs);
-        // notify listeners
-        for (Iterator iter = ntDefs.iterator(); iter.hasNext();) {
-            NodeTypeDef ntDef = (NodeTypeDef) iter.next();
-            notifyRegistered(ntDef.getName());
-        }
+        registerNodeTypes(ntDefs, true);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void externalReregistered(NodeTypeDef ntDef)
+            throws NoSuchNodeTypeException, InvalidNodeTypeDefException,
+            RepositoryException {
+
+        reregisterNodeType(ntDef, true);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void externalUnregistered(Collection ntNames)
+            throws RepositoryException, NoSuchNodeTypeException {
+
+        unregisterNodeTypes(ntNames, true);
