- remove cachebehaviour flag from ChangeLog.persisted
- minor improvement

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@521356 13f79535-47bb-0310-9956-ffa450edef68

-        ItemState state = internalGetItemState();
-        if (state != null) {
-            if (state.getStatus() == Status.NEW) {
-                state.setStatus(Status.REMOVED);
-            } else {
-                state.getWorkspaceState().setStatus(Status.REMOVED);
-            }
-        }
-        if (parent.childNodeEntries != null) {
+        removeEntry(this);
+        if (getStatus() != Status.STALE_DESTROYED && parent.childNodeEntries != null) {
-            state = ce.internalGetItemState();
-            if (state != null) {
-                if (state.getStatus() == Status.NEW) {
-                    state.setStatus(Status.REMOVED);
-                } else {
-                    state.getWorkspaceState().setStatus(Status.REMOVED);
-                }
-            }
+            removeEntry(ce);
-    public void collectStates(ChangeLog changeLog, boolean throwOnStale) throws InvalidItemStateException {
+    public synchronized void collectStates(ChangeLog changeLog, boolean throwOnStale) throws InvalidItemStateException {
-        ItemState state = internalGetItemState();
-        if (state != null && state.getStatus() == Status.EXISTING_MODIFIED) {
+        if (getStatus() == Status.EXISTING_MODIFIED) {
-        // TODO: check if correct, that check for existing prop can be omitted.
+        // TODO: check for existing prop.
+        return internalAddPropertyEntry(propName);
+    }
+
+    /**
+     * Internal method that adds a PropertyEntry without checking of that entry
+     * exists.
+     *
+     * @param propName
+     * @return
+     */
+    private PropertyEntry internalAddPropertyEntry(QName propName) {
-                pEntry.remove();
+                if (pEntry != null) {
+                    pEntry.remove();
+                }
-    public synchronized void refresh(Event childEvent) {
-        boolean modified = false; // TODO: see todo below
+    public void refresh(Event childEvent) {
-                    cne = internalAddNodeEntry(eventName, uniqueChildID, index, childNodeEntries());
-                    modified = true;
+                    internalAddNodeEntry(eventName, uniqueChildID, index, childNodeEntries());
-
-                if (!hasPropertyEntry(eventName)) {
-                    try {
-                        addPropertyEntry(eventName);
-                        modified = true;
-                    } catch (ItemExistsException e) {
-                        log.warn("Internal error", e);
-                        // TODO
-                    }
+                HierarchyEntry child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
+                if (child == null) {
+                    internalAddPropertyEntry(eventName);
-                    // TODO: TOBEFIXED deal with NEW entries
+                    child.reload(false, true);
-                HierarchyEntry child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
+                child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
-                    modified = true;
-                        modified = true;
-                    try {
-                        addPropertyEntry(eventName);
-                        modified = true;
-                    } catch (ItemExistsException e) {
-                        log.warn("Internal error", e);
-                        // TODO
-                    }
+                    internalAddPropertyEntry(eventName);
-
-        // TODO: check if status of THIS_state must be marked modified...
-    private static void buildPath(Path.PathBuilder builder, NodeEntryImpl nEntry, boolean wspPath) {
+    private static void buildPath(Path.PathBuilder builder, NodeEntryImpl nEntry, boolean wspPath) throws RepositoryException {
+        if (index == Path.INDEX_UNDEFINED) {
+            throw new RepositoryException("Invalid index " + index + " with nodeEntry " + nEntry);
+        }
+
+        // TODO: check again. special treatment for index 0 for consistency with PathFormat.parse
+        } catch (ItemNotFoundException e) {
+            log.debug("Property with name " + child.getQName() + " does not exist (anymore)");
-            log.error("Internal Error", e);
+            log.debug("Unable to access child property " + child.getQName(), e.getMessage());
