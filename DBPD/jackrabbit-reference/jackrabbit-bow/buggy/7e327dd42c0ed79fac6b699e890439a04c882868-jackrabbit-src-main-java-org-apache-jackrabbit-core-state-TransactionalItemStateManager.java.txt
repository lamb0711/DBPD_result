Make locking part of XAResource's transaction support

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@354456 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.TransactionContext;
+import org.apache.jackrabbit.core.TransactionException;
-     * Logger instance
+     * Logger instance.
-     * Known attribute name
+     * Known attribute name inside the {@link TransactionContext}.
-     * Current transactional change log
+     * Current instance-local change log
-    public TransactionalItemStateManager(SharedItemStateManager sharedStateMgr, WorkspaceImpl wspImpl) {
+    public TransactionalItemStateManager(SharedItemStateManager sharedStateMgr,
+                                         WorkspaceImpl wspImpl) {
-     * Set transaction context.
-     *
-     * @param tx transaction context.
+     * Set transactional change log to use.
+     * @param txLog change log, may be <code>null</code>.
+     * @param threadLocal if <code>true</code> set thread-local change log;
+     *                    otherwise set instance-local change log
-    public void setTransactionContext(TransactionContext tx) {
-        txLog = null;
-
-        if (tx != null) {
-            txLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-            if (txLog == null) {
-                txLog = new ChangeLog();
-                tx.setAttribute(ATTRIBUTE_CHANGE_LOG, txLog);
-            }
+    public void setChangeLog(ChangeLog txLog, boolean threadLocal) {
+        if (threadLocal) {
+            ((CommitLog) commitLog.get()).setChanges(txLog);
+        } else {
+            this.txLog = txLog;
-     * Prepare a transaction
-     *
-     * @param tx transaction context
+     * Prepare a transaction.
-    public void prepare(TransactionContext tx) throws TransactionException {
-        ChangeLog changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-        if (changeLog != null) {
+    public void prepare() throws TransactionException {
+        ChangeLog txLog = ((CommitLog) commitLog.get()).getChanges();
+        if (txLog != null) {
-                sharedStateMgr.checkReferentialIntegrity(changeLog);
+                sharedStateMgr.checkReferentialIntegrity(txLog);
-                changeLog.undo(sharedStateMgr);
+                txLog.undo(sharedStateMgr);
-                changeLog.undo(sharedStateMgr);
+                txLog.undo(sharedStateMgr);
-     *
-     * @param tx transaction context
-    public void commit(TransactionContext tx) throws TransactionException {
-        ChangeLog changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-        if (changeLog != null) {
+    public void commit() throws TransactionException {
+        ChangeLog txLog = ((CommitLog) commitLog.get()).getChanges();
+        if (txLog != null) {
-                // set changeLog in ThreadLocal
-                ((CommitLog) commitLog.get()).setChanges(changeLog);
-                super.update(changeLog);
+                super.update(txLog);
-                changeLog.undo(sharedStateMgr);
+                txLog.undo(sharedStateMgr);
-                changeLog.undo(sharedStateMgr);
+                txLog.undo(sharedStateMgr);
-            } finally {
-                ((CommitLog) commitLog.get()).setChanges(null);
-            changeLog.reset();
-            tx.notifyCommitted();
+            txLog.reset();
-     *
-     * @param tx transaction context
-    public void rollback(TransactionContext tx) {
-        ChangeLog changeLog = (ChangeLog) tx.getAttribute(ATTRIBUTE_CHANGE_LOG);
-        if (changeLog != null) {
-            changeLog.undo(sharedStateMgr);
+    public void rollback() {
+        ChangeLog txLog = ((CommitLog) commitLog.get()).getChanges();
+        if (txLog != null) {
+            txLog.undo(sharedStateMgr);
-        tx.notifyRolledBack();
