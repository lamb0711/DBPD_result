JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 1: jackrabbit-webdav]

in addition:
- fix indention
- minor improvements in comments
- use foreach loops where possible
- introduce PropEntry marker interface as common base for DavProperty and DavPropertyName
- add o.a.j.webdav.lock.Type.hashCode

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915333 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-public class HrefProperty extends AbstractDavProperty {
+public class HrefProperty extends AbstractDavProperty<String[]> {
-    public HrefProperty(DavProperty prop) {
+    public HrefProperty(DavProperty<?> prop) {
-            ArrayList hrefList = new ArrayList();
+            ArrayList<String> hrefList = new ArrayList<String>();
-                Iterator it = ((List)val).iterator();
-                while (it.hasNext()) {
-                    Object o = it.next();
-                    if (o instanceof Element && XML_HREF.equals(((Element)o).getLocalName())) {
-                        String href = DomUtil.getText((Element)o);
+                for (Object entry : ((List<?>) val)) {
+                    if (entry instanceof Element && XML_HREF.equals(((Element) entry).getLocalName())) {
+                        String href = DomUtil.getText((Element) entry);
-                            log.warn("Valid DAV:href element expected instead of " + o.toString());
+                            log.warn("Valid DAV:href element expected instead of " + entry.toString());
-            value = (String[]) hrefList.toArray(new String[hrefList.size()]);
+            value = hrefList.toArray(new String[hrefList.size()]);
+    @Override
-                String[] hrefs = (String[]) value;
-                for (int i = 0; i < hrefs.length; i++) {
-                    elem.appendChild(DomUtil.hrefToXml(hrefs[i], document));
+                for (String href : (String[]) value) {
+                    elem.appendChild(DomUtil.hrefToXml(href, document));
-    public Object getValue() {
+    public String[] getValue() {
-    public List getHrefs() {
-        return (value != null) ? Arrays.asList(value) : new ArrayList();
+    public List<String> getHrefs() {
+        return (value != null) ? Arrays.asList(value) : new ArrayList<String>();
