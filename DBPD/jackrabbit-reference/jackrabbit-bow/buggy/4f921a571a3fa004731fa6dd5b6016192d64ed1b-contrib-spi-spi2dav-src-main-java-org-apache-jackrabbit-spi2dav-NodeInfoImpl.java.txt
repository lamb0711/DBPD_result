work in progress

- move to commons-httpclient 3.0
- adjust to latest changes in jcr-server (JCR-544)
- simplify creation of info objects
- various minor improvements




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@448587 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.MultiStatusResponse;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.property.HrefProperty;
-import org.apache.jackrabbit.webdav.property.DavPropertyName;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.spi.SessionInfo;
+import org.apache.jackrabbit.spi.ItemId;
+    private final QName qName;
-    public NodeInfoImpl(MultiStatusResponse response, List childItemResponses, URIResolver uriResolver, SessionInfo sessionInfo) throws RepositoryException, DavException {
-        super(response, uriResolver, sessionInfo);
+    public NodeInfoImpl(NodeId id, NodeId parentId, DavPropertySet propSet,
+                        NamespaceResolver nsResolver) throws RepositoryException {
+        super(parentId);
-        id = uriResolver.getNodeId(getParentId(), response);
-        DavPropertySet propSet = response.getProperties(DavServletResponse.SC_OK);
+        // set id
+        this.id = id;
+
+        // retrieve name
+        if (id.getRelativePath() == null) {
+            DavProperty nameProp = propSet.get(ItemResourceConstants.JCR_NAME);
+            if (nameProp != null && nameProp.getValue() != null) {
+                // not root node
+                // jcrName is transported from jackrabbit-webdav -> convert
+                // note, that unescaping is not required.
+                String jcrName = nameProp.getValue().toString();
+                try {
+                    qName = NameFormat.parse(jcrName, nsResolver);
+                } catch (NameException e) {
+                    throw new RepositoryException("Unable to build ItemInfo object, invalid name found: " + jcrName);
+                }
+            } else {
+                // root
+                qName = QName.ROOT;
+            }
+        } else {
+            Path.PathElement el = id.getRelativePath().getNameElement();
+            qName = (Path.CURRENT_ELEMENT == el) ? QName.ROOT : el.getName();
+        }
+
+
+        // retrieve properties
-                    primaryNodeTypeName = NameFormat.parse(jcrName, uriResolver);
+                    primaryNodeTypeName = NameFormat.parse(jcrName, nsResolver);
-                    mixinNodeTypeNames[i] = NameFormat.parse(jcrName, uriResolver);
+                    mixinNodeTypeNames[i] = NameFormat.parse(jcrName, nsResolver);
-
-        if (propSet.contains(ItemResourceConstants.JCR_REFERENCES)) {
-            HrefProperty refProp = new HrefProperty(propSet.get(ItemResourceConstants.JCR_REFERENCES));
-            Iterator hrefIter = refProp.getHrefs().iterator();
-            while(hrefIter.hasNext()) {
-                String propertyHref = hrefIter.next().toString();
-                PropertyId propertyId = uriResolver.getPropertyId(propertyHref, sessionInfo);
-                references.add(propertyId);
-            }
-        }
-
-        // build the child-item entries
-        Iterator it = childItemResponses.iterator();
-        while (it.hasNext()) {
-            MultiStatusResponse resp = (MultiStatusResponse)it.next();
-            DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
-            if (childProps.contains(DavPropertyName.RESOURCETYPE) &&
-                childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
-                // any other resource type than default (empty) is represented by a node item
-                NodeId childId = uriResolver.getNodeId(id, resp);
-                nodeIds.add(childId);
-            } else {
-                PropertyId propertyId = uriResolver.getPropertyId(id, resp);
-                propertyIds.add(propertyId);
-            }
-        }
+    //-----------------------------------------------------------< ItemInfo >---
+    public QName getQName() {
+        return qName;
+    }
+
+    //-----------------------------------------------------------< NodeInfo >---
+
+    //--------------------------------------------------------------------------
+    void addReference(PropertyId referenceId) {
+        references.add(referenceId);
+    }
+
+    void addChildId(ItemId childId) {
+        if (childId.denotesNode()) {
+           nodeIds.add(childId);
+        } else {
+           propertyIds.add(childId);
+        }
+    }
