Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
+import org.apache.jackrabbit.jcr2spi.hierarchy.PropertyEntry;
+
+import java.util.Iterator;
-     * @param ism
+     * @param entry
-    public NodeState createRootState(ItemStateManager ism) throws ItemStateException;
+    public NodeState createRootState(NodeEntry entry) throws ItemStateException;
-     * @param ism    the item state manager to retrievev the parent of the
-     *               <code>NodeState</code> to create.
+     * @param entry the <code>HierarchyEntry</code> the new state should
+     * be attached to.
-     * @throws ItemStateException       if an error occurs while retrieving the
-     *                                  <code>NodeState</code>.
+     * @throws ItemStateException if an error occurs while retrieving the <code>NodeState</code>.
-    public NodeState createNodeState(NodeId nodeId, ItemStateManager ism)
-            throws NoSuchItemStateException, ItemStateException;
+    public NodeState createNodeState(NodeId nodeId, NodeEntry entry)
+        throws NoSuchItemStateException, ItemStateException;
+
-     * Creates the child <code>NodeState</code> with the given
-     * <code>nodeId</code>.
+     * Tries to retrieve the <code>NodeState</code> with the given <code>NodeId</code>
+     * and if the state exists, fills in the NodeEntries missing between the
+     * last known NodeEntry marked by <code>anyParent</code>.
-     * @param nodeId the id of the <code>NodeState</code> to create.
-     * @param parent the parent of the <code>NodeState</code> to create.
+     * @param nodeId
+     * @param anyParent
-     * @throws ItemStateException       if an error occurs while retrieving the
-     *                                  <code>NodeState</code>.
+     * @throws ItemStateException if an error occurs while retrieving the <code>NodeState</code>.
-    public NodeState createNodeState(NodeId nodeId, NodeState parent)
-            throws NoSuchItemStateException, ItemStateException;
+    public NodeState createDeepNodeState(NodeId nodeId, NodeEntry anyParent) throws NoSuchItemStateException, ItemStateException;
+
-     * @param parent the parent of the <code>PropertyState</code> to create.
+     * @param entry the <code>HierarchyEntry</code> the new state should
+     * be attached to.
-    public PropertyState createPropertyState(PropertyId propertyId,
-                                             NodeState parent)
-            throws NoSuchItemStateException, ItemStateException;
+    public PropertyState createPropertyState(PropertyId propertyId, PropertyEntry entry)
+        throws NoSuchItemStateException, ItemStateException;
+     * Tries to retrieve the <code>PropertyState</code> with the given <code>PropertyId</code>
+     * and if the state exists, fills in the HierarchyEntries missing between the
+     * last known NodeEntry marked by <code>anyParent</code>.
+     *
+     * @param propertyId
+     * @param anyParent
+     * @return
+     * @throws NoSuchItemStateException if there is no such <code>NodeState</code>.
+     * @throws ItemStateException if an error occurs while retrieving the <code>NodeState</code>.
+     */
+    public PropertyState createDeepPropertyState(PropertyId propertyId, NodeEntry anyParent) throws NoSuchItemStateException, ItemStateException;
+
+    /**
+     * Returns an Iterator over <code>ChildInfo</code>s for the given <code>NodeState</code>.
+     *
+     * @param nodeId
+     */
+    public Iterator getChildNodeInfos(NodeId nodeId) throws NoSuchItemStateException, ItemStateException;
+
+    /**
+     * Returns the NodeReferences for the NodeState with the given ID.
+     * @return NodeReferences
-    public ChildNodeEntries getChildNodeEntries(NodeState nodeState) throws NoSuchItemStateException, ItemStateException;
+    public NodeReferences getNodeReferences(NodeState nodeState);
-     * Set the cache used to retrieve item states that have already been
-     * built before.
+     * Adds the given <code>ItemStateCreationListener</code>.
-     * @param cache
+     * @param listener
-    public void setCache(ItemStateCache cache);
+    public void addCreationListener(ItemStateCreationListener listener);
+
+    /**
+     * Removes the given <code>ItemStateCreationListener</code>.
+     *
+     * @param listener
+     */
+    public void removeCreationListener(ItemStateCreationListener listener);
