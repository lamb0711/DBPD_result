JCR-2076: JSR 283: Joins
- columns

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@781369 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
+import java.util.Map;
+import java.util.LinkedHashMap;
+import javax.jcr.query.qom.QueryObjectModelFactory;
+import org.apache.jackrabbit.spi.commons.query.qom.ColumnImpl;
-                getSelectProperties(), orderProperties, ascSpecs,
+                getColumns(), orderProperties, ascSpecs,
-     * Returns the select properties for this query.
+     * Returns the columns for this query.
-     * @return array of select property names.
+     * @return array of columns.
-    protected Name[] getSelectProperties() throws RepositoryException {
-        // get select properties
-        List selectProps = new ArrayList();
-        selectProps.addAll(Arrays.asList(root.getSelectProperties()));
-        if (selectProps.size() == 0) {
+    protected ColumnImpl[] getColumns() throws RepositoryException {
+        QueryObjectModelFactory qomFactory = session.getWorkspace().getQueryManager().getQOMFactory();
+        // get columns
+        Map<Name, ColumnImpl> columns = new LinkedHashMap<Name, ColumnImpl>();
+        for (Name name : root.getSelectProperties()) {
+            String pn = session.getJCRName(name);
+            ColumnImpl col = (ColumnImpl) qomFactory.column(
+                    session.getJCRName(DEFAULT_SELECTOR_NAME), pn, pn);
+            columns.put(name, col);
+        }
+        if (columns.size() == 0) {
-            for (int i = 0; i < propDefs.length; i++) {
-                PropertyDefinitionImpl propDef = (PropertyDefinitionImpl) propDefs[i];
+            for (PropertyDefinition pd : propDefs) {
+                PropertyDefinitionImpl propDef = (PropertyDefinitionImpl) pd;
-                    selectProps.add(propDef.getQName());
+                    columns.put(propDef.getQName(), columnForName(propDef.getQName()));
-        if (!selectProps.contains(NameConstants.JCR_PATH)) {
-            selectProps.add(NameConstants.JCR_PATH);
+        if (!columns.containsKey(NameConstants.JCR_PATH)) {
+            columns.put(NameConstants.JCR_PATH, columnForName(NameConstants.JCR_PATH));
-        if (!selectProps.contains(NameConstants.JCR_SCORE)) {
-            selectProps.add(NameConstants.JCR_SCORE);
+        if (!columns.containsKey(NameConstants.JCR_SCORE)) {
+            columns.put(NameConstants.JCR_SCORE, columnForName(NameConstants.JCR_SCORE));
-        return (Name[]) selectProps.toArray(new Name[selectProps.size()]);
+        return columns.values().toArray(new ColumnImpl[columns.size()]);
+    /**
+     * Returns a column for the given property name and the default selector
+     * name.
+     *
+     * @param propertyName the name of the property as well as the column.
+     * @return a column.
+     * @throws RepositoryException if an error occurs while creating the column.
+     */
+    protected ColumnImpl columnForName(Name propertyName) throws RepositoryException {
+        QueryObjectModelFactory qomFactory = session.getWorkspace().getQueryManager().getQOMFactory();
+        String name = session.getJCRName(propertyName);
+        return (ColumnImpl) qomFactory.column(
+                session.getJCRName(DEFAULT_SELECTOR_NAME), name, name);
+    }
