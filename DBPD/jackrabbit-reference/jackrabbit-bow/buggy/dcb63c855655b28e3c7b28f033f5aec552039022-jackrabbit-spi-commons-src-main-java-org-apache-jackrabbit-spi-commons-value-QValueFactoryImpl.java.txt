JCR-2056: Binary interfaces



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@779642 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Binary;
+import java.io.RandomAccessFile;
+         * @see QValue#getBinary()
+         */
+        public Binary getBinary() throws RepositoryException {
+            // TODO FIXME consolidate Binary implementations
+            return new Binary() {
+                public InputStream getStream() throws RepositoryException {
+                    return QValueImpl.this.getStream();
+                }
+
+                public int read(byte[] b, long position) throws IOException, RepositoryException {
+                    InputStream in = getStream();
+                    in.skip(position);
+                    return in.read(b);
+                }
+
+                public long getSize() throws RepositoryException {
+                    return getLength();
+                }
+            };
+        }
+
+        /**
-    private static class BinaryQValue implements QValue, Serializable {
+    private static class BinaryQValue implements QValue, Binary, Serializable {
-            return Boolean.valueOf(getString()).booleanValue();
+            return Boolean.valueOf(getString());
+         * @see QValue#getBinary()
+         */
+        public Binary getBinary() throws RepositoryException {
+            return this;
+        }
+
+        /**
+        //-----------------------------< javx.jcr.Binary >----------------------
+        /**
+         * {@inheritDoc}
+         */
+        public int read(byte[] b, long position) throws IOException, RepositoryException {
+            if (file != null) {
+                // this instance is backed by a temp file
+                RandomAccessFile raf = new RandomAccessFile(file, "r");
+                raf.seek(position);
+                return raf.read(b);
+            } else {
+                // this instance is backed by an in-memory buffer
+                int length = Math.min(b.length, buffer.length - (int) position);
+                if (length > 0) {
+                    System.arraycopy(buffer, (int) position, b, 0, length);
+                    return length;
+                } else {
+                    return -1;
+                }
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public long getSize() throws RepositoryException {
+            return getLength();
+        }
+
