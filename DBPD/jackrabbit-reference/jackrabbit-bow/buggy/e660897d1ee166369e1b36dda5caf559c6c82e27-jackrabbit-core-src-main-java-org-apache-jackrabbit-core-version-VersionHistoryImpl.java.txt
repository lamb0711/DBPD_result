JCR-1593 JSR 283: Simple versioning
JCR-2058 JSR 283: VersionManager and new versioning methods


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@765556 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.jsr283.version.VersionHistory;
+import org.apache.jackrabbit.api.jsr283.version.Version;
+import javax.jcr.Node;
+import javax.jcr.AccessDeniedException;
-import javax.jcr.version.Version;
-import javax.jcr.version.VersionHistory;
-     * @param data
+     * @param data node data
-    public Version getRootVersion() throws RepositoryException {
+    public javax.jcr.version.Version getRootVersion() throws RepositoryException {
+     * @see VersionHistory#getAllFrozenNodes()
+     */
+    public NodeIterator getAllFrozenNodes() throws RepositoryException {
+        return new FrozenNodeIteratorAdapter(getAllVersions());
+    }
+
+    /**
+     * @see VersionHistory#getAllLinearVersions()
+     */
+    public VersionIterator getAllLinearVersions() throws RepositoryException {
+        // get base version. this can certainly be optimized
+        InternalVersionHistory vh = getInternalVersionHistory();
+        NodeId id = new NodeId(vh.getVersionableUUID());
+        Node vn = session.getNodeById(id);
+        InternalVersion base = ((VersionImpl) vn.getBaseVersion()).getInternalVersion();
+
+        return new VersionIteratorImpl(session, vh.getRootVersion(), base);
+    }
+
+    /**
+     * @see VersionHistory#getAllLinearFrozenNodes()
+     */
+    public NodeIterator getAllLinearFrozenNodes() throws RepositoryException {
+        return new FrozenNodeIteratorAdapter(getAllLinearVersions());
+    }
+
+    /**
-    public Version getVersion(String versionName)
+    public javax.jcr.version.Version getVersion(String versionName)
-    public Version getVersionByLabel(String label) throws RepositoryException {
+    public javax.jcr.version.Version getVersionByLabel(String label) throws RepositoryException {
-            Version existing = session.getVersionManager().setVersionLabel(this, null, session.getQName(label), true);
+            javax.jcr.version.Version existing = session.getVersionManager().setVersionLabel(this, null, session.getQName(label), true);
-    public String[] getVersionLabels(Version version)
+    public String[] getVersionLabels(javax.jcr.version.Version version)
-        checkOwnVersion(version);
+        checkOwnVersion((Version) version);
-    public boolean hasVersionLabel(Version version, String label)
+    public boolean hasVersionLabel(javax.jcr.version.Version version, String label)
-        checkOwnVersion(version);
+        checkOwnVersion((Version)version);
+        return getVersionableIdentifier();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public String getVersionableIdentifier() throws RepositoryException {
-     * 
-     * @return
-     * @throws RepositoryException
+     * Checks if the current session has version management permission
+     *
+     * @throws AccessDeniedException if version management is not allowed
+     * @throws RepositoryException if an error occurs
-     * @param version
-     * @throws javax.jcr.version.VersionException
-     * @throws javax.jcr.RepositoryException
+     * @param version the version
+     * @throws javax.jcr.version.VersionException if the specified version is
+     *         not part of this version history
+     * @throws javax.jcr.RepositoryException if a repository error occurs
