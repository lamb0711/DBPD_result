JCR-2113 : JSR 283 Access Control Management (patch provided by alfusainey jallow, commit with minor modifications and some TODOs (in particular testing).

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1646435 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.httpclient.methods.multipart.PartBase;
-import org.apache.jackrabbit.commons.webdav.JcrValueType;
+import org.apache.jackrabbit.spi.Tree;
-    private static final String DEFAULT_CHARSET = "UTF-8";
-
+    public Tree createTree(SessionInfo sessionInfo, Batch batch, Name nodeName, Name primaryTypeName, String uniqueId) throws RepositoryException {
+        return new JsonTree(nodeName, primaryTypeName, uniqueId, getNamePathResolver(sessionInfo));
+    }
+
+    @Override
-            addPart(PARAM_DIFF, buf.toString());
+            Utils.addPart(PARAM_DIFF, buf.toString(), parts);
-        /**
-         * @inheritDoc
-         */
+        @Override
-            wr.write(getJsonKey(JcrConstants.JCR_PRIMARYTYPE));
+            wr.write(Utils.getJsonKey(JcrConstants.JCR_PRIMARYTYPE));
-                wr.write(getJsonKey(JcrConstants.JCR_UUID));
+                wr.write(Utils.getJsonKey(JcrConstants.JCR_UUID));
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
-        /**
-         * @inheritDoc
-         */
+        @Override
+        @Override
+        public void setTree(NodeId parentId, Tree contentTree) throws RepositoryException {
+            assertMethod();
+            if (!(contentTree instanceof JsonTree)) {
+                throw new RepositoryException("Invalid Tree implementation : " + contentTree.getClass().getName());
+            }
+
+            Path normalizedPath = getPathFactory().create(getPath(parentId, sessionInfo), contentTree.getName(), true);
+            String jcrPath = getNamePathResolver(sessionInfo).getJCRPath(normalizedPath);
+            appendDiff(SYMBOL_ADD_NODE, jcrPath, ((JsonTree) contentTree).toJsonString(parts));
+        }
+
+        //----------------------------------------------------------------------
-            String strValue = getJsonString(value);
+            String strValue = Utils.getJsonString(value);
-                addPart(jcrPropPath, value, resolver);
+                Utils.addPart(jcrPropPath, value, resolver, parts);
-                String str = getJsonString(values[i]);
+                String str = Utils.getJsonString(values[i]);
-                    addPart(jcrPropPath, values[i], resolver);
+                    Utils.addPart(jcrPropPath, values[i], resolver, parts);
-                    removeParts(jcrPropPath);
+                    Utils.removeParts(jcrPropPath, parts);
-        /**
-         *
-         * @param paramName
-         * @param value
-         */
-        private void addPart(String paramName, String value) {
-            parts.add(new StringPart(paramName, value, DEFAULT_CHARSET));
-        }
-
-        /**
-         *
-         * @param paramName
-         * @param value
-         * @param resolver
-         * @throws RepositoryException
-         */
-        private void addPart(String paramName, QValue value, NamePathResolver resolver) throws RepositoryException {
-            Part part;
-            switch (value.getType()) {
-                case PropertyType.BINARY:
-                    part = new BinaryPart(paramName, new BinaryPartSource(value), JcrValueType.contentTypeFromType(PropertyType.BINARY), DEFAULT_CHARSET);
-                    break;
-                case PropertyType.NAME:
-                    part = new StringPart(paramName, resolver.getJCRName(value.getName()), DEFAULT_CHARSET);
-                    break;
-                case PropertyType.PATH:
-                    part = new StringPart(paramName, resolver.getJCRPath(value.getPath()), DEFAULT_CHARSET);
-                    break;
-                default:
-                    part = new StringPart(paramName, value.getString(), DEFAULT_CHARSET);
-            }
-            String ctype = JcrValueType.contentTypeFromType(value.getType());
-            ((PartBase) part).setContentType(ctype);
-
-            parts.add(part);
-        }
-
-        private void removeParts(String paramName) {
-            for (Iterator<Part> it = parts.iterator(); it.hasNext();) {
-                Part part = it.next();
-                if (part.getName().equals(paramName)) {
-                    it.remove();
-                }
-            }
-        }
-
-        private String getJsonKey(String str) {
-            return JsonUtil.getJsonString(str) + ":";
-        }
-
-        private String getJsonString(QValue value) throws RepositoryException {
-            String str;
-            switch (value.getType()) {
-                case PropertyType.STRING:
-                    str = JsonUtil.getJsonString(value.getString());
-                    break;
-                case PropertyType.BOOLEAN:
-                case PropertyType.LONG:
-                    str = value.getString();
-                    break;
-                case PropertyType.DOUBLE:
-                    double d = value.getDouble();
-                    if (Double.isNaN(d) || Double.isInfinite(d)) {
-                    // JSON cannot specifically handle this property type...
-                        str = null;
-                    } else {
-                        str = value.getString();
-                        if (str.indexOf('.') == -1) {
-                            str += ".0";
-                        }
-                    }
-                    break;
-                default:
-                    // JSON cannot specifically handle this property type...
-                    str = null;
-            }
-            return str;
-        }
-
