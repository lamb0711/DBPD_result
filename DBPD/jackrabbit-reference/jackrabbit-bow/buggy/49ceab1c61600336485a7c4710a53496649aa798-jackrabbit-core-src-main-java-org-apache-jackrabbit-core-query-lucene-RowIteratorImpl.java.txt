JCR-820: Add support for query result highlighting
- initial version

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@523251 13f79535-47bb-0310-9956-ffa450edef68

+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import java.io.IOException;
+     * The logger instance for this class.
+     */
+    private static final Logger log = LoggerFactory.getLogger(RowIteratorImpl.class);
+
+    /**
+     * The excerpt provider.
+     */
+    private final ExcerptProvider excerptProvider;
+
+    /**
+        this(nodes, properties, resolver, null);
+    }
+
+    /**
+     * Creates a new <code>RowIteratorImpl</code> that iterates over the result
+     * nodes.
+     *
+     * @param nodes      a <code>ScoreNodeIterator</code> that contains the
+     *                   nodes of the query result.
+     * @param properties <code>QName</code> of the select properties.
+     * @param resolver   <code>NamespaceResolver</code> of the user
+     *                   <code>Session</code>.
+     * @param exProvider the excerpt provider associated with the query result
+     *                   that created this row iterator.
+     */
+    RowIteratorImpl(ScoreNodeIterator nodes,
+                    QName[] properties,
+                    NamespaceResolver resolver,
+                    ExcerptProvider exProvider) {
+        this.excerptProvider = exProvider;
-
+    
-                        // property not set or jcr:path / jcr:score
+                        // property not set or jcr:path / jcr:score / jcr:highlight
-                            tmp[i] = new LongValue((int) (score * 1000f));
+                            tmp[i] = new LongValue(Math.round(score * 1000f));
+                        } else if (isExcerptFunction(properties[i])) {
+                            tmp[i] = getExcerpt();
-                        return new LongValue((int) (score * 1000f));
+                        return new LongValue(Math.round(score * 1000f));
+                    } else if (isExcerptFunction(prop)) {
+                        return getExcerpt();
+
+        /**
+         * @param name a QName.
+         * @return <code>true</code> if <code>name</code> is the rep:excerpt
+         *         function, <code>false</code> otherwise.
+         */
+        private boolean isExcerptFunction(QName name) {
+            return name.getNamespaceURI().equals(QName.NS_REP_URI) &&
+                    name.getLocalName().startsWith("excerpt(");
+        }
+
+        /**
+         * Returns an excerpt for the node associated with this row.
+         *
+         * @return a StringValue or <code>null</code> if the excerpt cannot be
+         *         created or an error occurs.
+         */
+        private Value getExcerpt() {
+            if (excerptProvider == null) {
+                return null;
+            }
+            try {
+                long time = System.currentTimeMillis();
+                String excerpt = excerptProvider.getExcerpt(node.getNodeId(), 3, 150);
+                time = System.currentTimeMillis() - time;
+                log.debug("Created excerpt in {} ms.", new Long(time));
+                if (excerpt != null) {
+                    return new StringValue(excerpt);
+                } else {
+                    return null;
+                }
+            } catch (IOException e) {
+                return null;
+            }
+        }
