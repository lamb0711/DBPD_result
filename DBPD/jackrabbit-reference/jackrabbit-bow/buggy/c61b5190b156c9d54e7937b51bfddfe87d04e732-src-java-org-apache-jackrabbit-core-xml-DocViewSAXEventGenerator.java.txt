- improved reusability of sax event generators
- some javadoc corrections 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@165316 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NoPrefixDeclaredException;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.PropertyImpl;
-import org.apache.jackrabbit.core.QName;
-import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.QName;
+import org.apache.jackrabbit.core.BaseException;
+import javax.jcr.Node;
+import javax.jcr.Property;
-     * @param session        the session to be used for resolving namespace
-     *                       mappings
+     * @throws RepositoryException if an error occurs
-    public DocViewSAXEventGenerator(NodeImpl node, boolean noRecurse,
+    public DocViewSAXEventGenerator(Node node, boolean noRecurse,
-                                    SessionImpl session,
-                                    ContentHandler contentHandler) {
-        super(node, noRecurse, skipBinary, session, contentHandler);
+                                    ContentHandler contentHandler)
+            throws RepositoryException {
+        super(node, noRecurse, skipBinary, contentHandler);
+    private QName getQName(String rawName) throws RepositoryException {
+        try {
+            return QName.fromJCRName(rawName, nsResolver);
+        } catch (BaseException e) {
+            // should never get here...
+            String msg = "internal error: failed to resolve namespace mappings";
+            log.error(msg, e);
+            throw new RepositoryException(msg, e);
+        }
+    }
+
-    protected void entering(NodeImpl node, int level)
+    protected void entering(Node node, int level)
-    protected void enteringProperties(NodeImpl node, int level)
+    protected void enteringProperties(Node node, int level)
-    protected void leavingProperties(NodeImpl node, int level)
+    protected void leavingProperties(Node node, int level)
-        QName name = node.getQName();
-        if (name.equals(JCR_XMLTEXT)) {
+        String name = node.getName();
+        if (name.equals(jcrXMLText)) {
-                PropertyImpl prop = (PropertyImpl) iter.next();
-                QName propName = prop.getQName();
-                if (propName.equals(JCR_XMLCHARACTERS)) {
+                Property prop = (Property) iter.next();
+                String propName = prop.getName();
+                if (propName.equals(jcrXMLCharacters)) {
-            // encode node name to make sure it's a valid xml name
-            name = ISO9075.encode(name);
-            try {
-                if (node.getDepth() == 0) {
-                    // root node needs a name
-                    elemName = JCR_ROOT.toJCRName(session.getNamespaceResolver());
-                } else {
-                    elemName = name.toJCRName(session.getNamespaceResolver());
-                }
-            } catch (NoPrefixDeclaredException npde) {
-                // should never get here...
-                String msg = "internal error: encountered unregistered namespace";
-                log.debug(msg);
-                throw new RepositoryException(msg, npde);
+            if (node.getDepth() == 0) {
+                // root node needs a name
+                elemName = jcrRoot;
+            } else {
+                // encode node name to make sure it's a valid xml name
+                elemName = ISO9075.encode(name);
-                PropertyImpl prop = (PropertyImpl) iter.next();
-                QName propName = prop.getQName();
-                // encode property name to make sure it's a valid xml name
-                propName = ISO9075.encode(propName);
-                // attribute name
-                String attrName;
-                try {
-                    attrName = propName.toJCRName(session.getNamespaceResolver());
-                } catch (NoPrefixDeclaredException npde) {
-                    // should never get here...
-                    String msg =
-                            "internal error: encountered unregistered namespace";
-                    log.debug(msg);
-                    throw new RepositoryException(msg, npde);
-                }
+                Property prop = (Property) iter.next();
+                String propName = prop.getName();
+                // attribute name (encode property name to make sure it's a valid xml name)
+                String attrName = ISO9075.encode(propName);
+                QName qName = getQName(attrName);
+
-                    attrs.addAttribute(propName.getNamespaceURI(),
-                            propName.getLocalName(), attrName, CDATA_TYPE, "");
+                    attrs.addAttribute(qName.getNamespaceURI(),
+                            qName.getLocalName(), attrName, CDATA_TYPE, "");
-                    attrs.addAttribute(propName.getNamespaceURI(),
-                            propName.getLocalName(), attrName, CDATA_TYPE,
+                    attrs.addAttribute(qName.getNamespaceURI(),
+                            qName.getLocalName(), attrName, CDATA_TYPE,
-            contentHandler.startElement(name.getNamespaceURI(),
-                    name.getLocalName(), elemName, attrs);
+            QName qName = getQName(elemName);
+            contentHandler.startElement(qName.getNamespaceURI(),
+                    qName.getLocalName(), elemName, attrs);
-    protected void leaving(NodeImpl node, int level)
+    protected void leaving(Node node, int level)
-        QName name = node.getQName();
-        if (name.equals(JCR_XMLTEXT)) {
+        String name = node.getName();
+        if (name.equals(jcrXMLText)) {
+        // encode node name to make sure it's a valid xml name
+        name = ISO9075.encode(name);
-        try {
-            if (node.getDepth() == 0) {
-                // root node needs a name
-                elemName = JCR_ROOT.toJCRName(session.getNamespaceResolver());
-            } else {
-                elemName = name.toJCRName(session.getNamespaceResolver());
-            }
-        } catch (NoPrefixDeclaredException npde) {
-            // should never get here...
-            String msg = "internal error: encountered unregistered namespace";
-            log.debug(msg);
-            throw new RepositoryException(msg, npde);
+        if (node.getDepth() == 0) {
+            // root node needs a name
+            elemName = jcrRoot;
+        } else {
+            // encode node name to make sure it's a valid xml name
+            elemName = ISO9075.encode(name);
-        contentHandler.endElement(name.getNamespaceURI(), name.getLocalName(),
+        QName qName = getQName(elemName);
+        contentHandler.endElement(qName.getNamespaceURI(), qName.getLocalName(),
-    protected void entering(PropertyImpl prop, int level)
+    protected void entering(Property prop, int level)
-    protected void leaving(PropertyImpl prop, int level)
+    protected void leaving(Property prop, int level)
