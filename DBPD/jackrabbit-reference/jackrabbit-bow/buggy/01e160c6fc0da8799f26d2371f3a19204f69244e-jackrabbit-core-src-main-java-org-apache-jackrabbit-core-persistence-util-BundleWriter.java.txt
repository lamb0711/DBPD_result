JCR-2762: Optimize bundle serialization

Avoid the extra byte in front of many names by writing out explicit counts before mixin types and properties.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022909 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import org.apache.jackrabbit.core.persistence.util.NodePropBundle.PropertyEntry;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-        for (Name name : bundle.getMixinTypeNames()) {
-            writeName(name);
-        }
-        writeName(null);
+        writeMixinTypes(bundle);
-        for (Name pName : bundle.getPropertyNames()) {
-            // skip redundant primaryType, mixinTypes and uuid properties
-            if (pName.equals(NameConstants.JCR_PRIMARYTYPE)
-                || pName.equals(NameConstants.JCR_MIXINTYPES)
-                || pName.equals(NameConstants.JCR_UUID)) {
-                continue;
-            }
-            NodePropBundle.PropertyEntry pState = bundle.getPropertyEntry(pName);
-            if (pState == null) {
-                log.error("PropertyState missing in bundle: " + pName);
-            } else {
-                writeName(pName);
-                writeState(pState);
-            }
-        }
-        writeName(null);
+        writeProperties(bundle);
+    private void writeMixinTypes(NodePropBundle bundle) throws IOException {
+        Set<Name> mixins = bundle.getMixinTypeNames();
+        writeVarInt(mixins.size());
+        for (Name name : mixins) {
+            writeName(name);
+        }
+    }
+
+    private void writeProperties(NodePropBundle bundle) throws IOException {
+        Collection<PropertyEntry> properties = bundle.getPropertyEntries();
+        writeVarInt(properties.size());
+        for (PropertyEntry property : properties) {
+            writeState(property);
+        }
+    }
+
-     * Serializes a property entry. The serialization begins with a single
-     * byte that encodes the type and multi-valuedness of the property:
+     * Serializes a property entry. The serialization begins with the
+     * property name followed by a single byte that encodes the type and
+     * multi-valuedness of the property:
+        writeName(state.getName());
+
