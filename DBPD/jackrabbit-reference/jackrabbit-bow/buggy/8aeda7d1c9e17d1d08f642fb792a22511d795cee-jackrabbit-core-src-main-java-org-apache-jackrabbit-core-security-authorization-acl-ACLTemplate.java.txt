JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]
JCR-2774 : Access control for repository level API operations


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1177668 13f79535-47bb-0310-9956-ffa450edef68

-        super((aclNode != null) ? aclNode.getParent().getPath() : null, (aclNode != null) ? aclNode.getSession().getValueFactory() : null);
+        this(aclNode, ((aclNode != null) ? aclNode.getParent().getPath() : null));
+    }
+
+    /**
+     * Create a {@link ACLTemplate} that is used to edit an existing ACL
+     * node.
+     *
+     * @param aclNode node
+     * @param path The path as exposed by "@link JackrabbitAccessControlList#getPath()}
+     * @throws RepositoryException if an error occurs
+     */
+    ACLTemplate(NodeImpl aclNode, String path) throws RepositoryException {
+        super(path, (aclNode != null) ? aclNode.getSession().getValueFactory() : null);
+
+        if (path == null && restrictions != null && !restrictions.isEmpty()) {
+            throw new AccessControlException("Repository level policy does not support restrictions.");
+        }
-        return new String[] {jcrRepGlob};
+        return (path == null) ? new String[0] : new String[] {jcrRepGlob};
-            Value glob = getRestrictions().get(P_GLOB);
-            if (glob != null) {
-                pattern = GlobPattern.create(path, glob.getString());
-            } else {
-                pattern = GlobPattern.create(path);
-            }
+            pattern = calculatePattern();
-            Value glob = getRestrictions().get(P_GLOB);
-            if (glob != null) {
-                pattern = GlobPattern.create(path, glob.getString());
+            pattern = calculatePattern();
+        }
+
+        private GlobPattern calculatePattern() throws RepositoryException {
+            if (path == null) {
+                return null; // no pattern for repo-level aces.
-                pattern = GlobPattern.create(path);
+                GlobPattern p;
+                Value glob = getRestrictions().get(P_GLOB);
+                if (glob != null) {
+                    p = GlobPattern.create(path, glob.getString());
+                } else {
+                    p = GlobPattern.create(path);
+                }
+                return p;
-            return pattern.matches(jcrPath);
+            return pattern != null && pattern.matches(jcrPath);
