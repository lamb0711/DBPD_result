JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.PathFormat;
-import org.apache.jackrabbit.name.NameFormat;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.name.NameConstants;
-    private QName primaryTypeName;
+    private Name primaryTypeName;
-        QName nodeTypeName = state.getNodeTypeName();
+        Name nodeTypeName = state.getNodeTypeName();
-            throw new IllegalArgumentException("Unknown nodetype " + LogUtil.saveGetJCRName(nodeTypeName, session.getNamespaceResolver()));
+            throw new IllegalArgumentException("Unknown nodetype " + LogUtil.saveGetJCRName(nodeTypeName, session.getNameResolver()));
-        QName qName = getQName();
-        try {
-            return NameFormat.format(getQName(), session.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException e) {
-            // should never get here...
-            String msg = "Internal error while resolving qualified name " + qName.toString();
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
-        }
+        Name qName = getQName();
+        return session.getNameResolver().getJCRName(getQName());
-                String msg = "Cannot add a node to property " + LogUtil.safeGetJCRPath(parentPath, session.getNamespaceResolver());
+                String msg = "Cannot add a node to property " + LogUtil.safeGetJCRPath(parentPath, session.getPathResolver());
-        QName nodeName = nodePath.getNameElement().getName();
-        QName ntName = (primaryNodeTypeName == null) ? null : getQName(primaryNodeTypeName);
+        Name nodeName = nodePath.getNameElement().getName();
+        Name ntName = (primaryNodeTypeName == null) ? null : getQName(primaryNodeTypeName);
-        Path.PathElement srcName = getReorderPath(srcChildRelPath).getNameElement();
-        Path.PathElement beforeName = (destChildRelPath == null) ? null : getReorderPath(destChildRelPath).getNameElement();
+        Path.Element srcName = getReorderPath(srcChildRelPath).getNameElement();
+        Path.Element beforeName = (destChildRelPath == null) ? null : getReorderPath(destChildRelPath).getNameElement();
-        QName propQName = getQName(name);
+        Name propName = getQName(name);
-        if (hasProperty(propQName)) {
+        if (hasProperty(propName)) {
-            prop = getProperty(propQName);
+            prop = getProperty(propName);
-                prop = createProperty(propQName, value, type);
+                prop = createProperty(propName, value, type);
-        QName propName = getQName(name);
+        Name propName = getQName(name);
-            PropertyImpl.checkValidReference(value, PropertyType.REFERENCE, session.getNamespaceResolver());
+            PropertyImpl.checkValidReference(value, PropertyType.REFERENCE, session.getNameResolver());
-        if (uuid == null || !isNodeType(QName.MIX_REFERENCEABLE)) {
+        if (uuid == null || !isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-    private boolean hasProperty(QName propertyName) {
+    private boolean hasProperty(Name propertyName) {
-        QName[] mixinNames = getNodeState().getMixinTypeNames();
+        Name[] mixinNames = getNodeState().getMixinTypeNames();
-        try {
-            if (NameFormat.format(primaryTypeName, session.getNamespaceResolver()).equals(nodeTypeName)) {
-                return true;
-            }
-        } catch (NoPrefixDeclaredException npde) {
-            throw new RepositoryException("Invalid node type name: " + nodeTypeName, npde);
+        if (session.getNameResolver().getJCRName(primaryTypeName).equals(nodeTypeName)) {
+            return true;
-        // parse to QName and check against effective nodetype
+        // parse to Name and check against effective nodetype
-        QName mixinQName = getQName(mixinName);
+        Name mixinQName = getQName(mixinName);
-            Operation op = SetMixin.create(getNodeState(), (QName[]) mixinValue.toArray(new QName[mixinValue.size()]));
+            Operation op = SetMixin.create(getNodeState(), (Name[]) mixinValue.toArray(new Name[mixinValue.size()]));
-        QName ntName = getQName(mixinName);
+        Name ntName = getQName(mixinName);
-        if (mixin.isNodeType(QName.MIX_REFERENCEABLE)) {
+        if (mixin.isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-            QName[] allRemaining = (QName[]) mixinValue.toArray(new QName[mixinValue.size() + 1]);
+            Name[] allRemaining = (Name[]) mixinValue.toArray(new Name[mixinValue.size() + 1]);
-            if (!entRemaining.includesNodeType(QName.MIX_REFERENCEABLE)) {
+            if (!entRemaining.includesNodeType(NameConstants.MIX_REFERENCEABLE)) {
-        QName[] mixins = (QName[]) mixinValue.toArray(new QName[mixinValue.size()]);
+        Name[] mixins = (Name[]) mixinValue.toArray(new Name[mixinValue.size()]);
-        QName[] mixinValue;
+        Name[] mixinValue;
-                PropertyEntry pe = getNodeEntry().getPropertyEntry(QName.JCR_MIXINTYPES);
+                PropertyEntry pe = getNodeEntry().getPropertyEntry(NameConstants.JCR_MIXINTYPES);
-                mixinValue = new QName[0];
+                mixinValue = new Name[0];
-        if (hasProperty(QName.JCR_MERGEFAILED)) {
-            Value[] vals = getProperty(QName.JCR_MERGEFAILED).getValues();
+        if (hasProperty(NameConstants.JCR_MERGEFAILED)) {
+            Value[] vals = getProperty(NameConstants.JCR_MERGEFAILED).getValues();
-                && !referenceableNode.isNodeType(QName.MIX_REFERENCEABLE)) {
+                && !referenceableNode.isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-                    String relPath = PathFormat.format(p, session.getNamespaceResolver());
+                    String relPath = session.getPathResolver().getJCRPath(p);
-        } catch (NameException e) {
-            // should never get here...
-            String msg = "Internal error: failed to determine relative path";
-            log.error(msg, e);
-            throw new RepositoryException(msg, e);
-                    try {
-                        Path relQPath = parentPath.computeRelativePath(nPath);
-                        NodeImpl parentNode = ((NodeImpl)parent);
-                        // call the restore
-                        restore(parentNode, relQPath, version, removeExisting);
-                    } catch (MalformedPathException e) {
-                        // should not occur
-                        throw new RepositoryException(e);
-                    }
+                    Path relQPath = parentPath.computeRelativePath(nPath);
+                    NodeImpl parentNode = ((NodeImpl)parent);
+                    // call the restore
+                    restore(parentNode, relQPath, version, removeExisting);
-                    + LogUtil.safeGetJCRPath(relQPath, session.getNamespaceResolver())
+                    + LogUtil.safeGetJCRPath(relQPath, session.getPathResolver())
-        return (VersionHistory) getProperty(QName.JCR_VERSIONHISTORY).getNode();
+        return (VersionHistory) getProperty(NameConstants.JCR_VERSIONHISTORY).getNode();
-        return (Version) getProperty(QName.JCR_BASEVERSION).getNode();
+        return (Version) getProperty(NameConstants.JCR_BASEVERSION).getNode();
-        if (isNew() || !isNodeType(QName.MIX_LOCKABLE)) {
+        if (isNew() || !isNodeType(NameConstants.MIX_LOCKABLE)) {
-    boolean isNodeType(QName qName) throws RepositoryException {
+    boolean isNodeType(Name qName) throws RepositoryException {
-        QName[] mixins = getNodeState().getMixinTypeNames();
+        Name[] mixins = getNodeState().getMixinTypeNames();
-     * @see ItemImpl#getQName()
+     * @see ItemImpl#getName()
-    QName getQName() throws RepositoryException {
+    Name getQName() throws RepositoryException {
-            return QName.ROOT;
+            return NameConstants.ROOT;
-        return getNodeState().getQName();
+        return getNodeState().getName();
-        if (!isNodeType(QName.MIX_LOCKABLE)) {
+        if (!isNodeType(NameConstants.MIX_LOCKABLE)) {
-        if (!isNodeType(QName.MIX_VERSIONABLE)) {
+        if (!isNodeType(NameConstants.MIX_VERSIONABLE)) {
-    private synchronized Node createNode(QName nodeName, QName nodeTypeName)
+    private synchronized Node createNode(Name nodeName, Name nodeTypeName)
-    protected Property getProperty(QName qName) throws PathNotFoundException, RepositoryException {
+    protected Property getProperty(Name qName) throws PathNotFoundException, RepositoryException {
-    private Property createProperty(QName qName, Value value, int type)
+    private Property createProperty(Name qName, Value value, int type)
-            qvs = ValueFormat.getQValue(value, session.getNamespaceResolver(), session.getQValueFactory());
+            qvs = ValueFormat.getQValue(value, session.getNamePathResolver(), session.getQValueFactory());
-            qvs = ValueFormat.getQValue(targetValue, session.getNamespaceResolver(), session.getQValueFactory());
+            qvs = ValueFormat.getQValue(targetValue, session.getNamePathResolver(), session.getQValueFactory());
-    private Property createProperty(QName qName, Value[] values, int type)
+    private Property createProperty(Name qName, Value[] values, int type)
-        QValue[] qvs = ValueFormat.getQValues(targetValues, session.getNamespaceResolver(), session.getQValueFactory());
+        QValue[] qvs = ValueFormat.getQValues(targetValues, session.getNamePathResolver(), session.getQValueFactory());
-    private Property createProperty(QName qName, int type, QPropertyDefinition def,
+    private Property createProperty(Name qName, int type, QPropertyDefinition def,
-    private QName getQName(String jcrName) throws RepositoryException {
-        QName qName;
+    private Name getQName(String jcrName) throws RepositoryException {
+        Name qName;
-            qName = NameFormat.parse(jcrName, session.getNamespaceResolver());
+            qName = session.getNameResolver().getQName(jcrName);
-    private boolean canAddMixin(QName mixinName) throws NoSuchNodeTypeException,
+    private boolean canAddMixin(Name mixinName) throws NoSuchNodeTypeException,
-        QName[] existingNts = getNodeState().getNodeTypeNames();
+        Name[] existingNts = getNodeState().getNodeTypeNames();
-        QName[] resultingNts = new QName[existingNts.length + 1];
+        Name[] resultingNts = new Name[existingNts.length + 1];
-            Path p = PathFormat.parse(relativePath, session.getNamespaceResolver());
+            Path p = session.getPathResolver().getQPath(relativePath);
-        } catch (MalformedPathException e) {
+        } catch (NameException e) {
-            Path p = PathFormat.parse(relativePath, session.getNamespaceResolver());
+            Path p = session.getPathResolver().getQPath(relativePath);
-        } catch (MalformedPathException e) {
+        } catch (NameException e) {
-        try {
-            // shortcut
-            if (relativePath.getLength() == 1 && relativePath.getNameElement() == Path.CURRENT_ELEMENT) {
-                return getQPath();
-            }
-            return Path.create(getQPath(), relativePath, true);
-        } catch (MalformedPathException e) {
-            String msg = "Invalid relative path: " + relativePath;
-            log.debug(msg);
-            throw new RepositoryException(msg, e);
+        // shortcut
+        if (relativePath.getLength() == 1 && relativePath.getNameElement() == session.getPathFactory().getCurrentElement()) {
+            return getQPath();
+        return session.getPathFactory().create(getQPath(), relativePath, true);
-            Path rp = PathFormat.parse(relPath, session.getNamespaceResolver());
+            Path rp = session.getPathResolver().getQPath(relPath);
-                Path.PathElement pe = rp.getNameElement();
-                if (pe == Path.CURRENT_ELEMENT) {
+                Path.Element pe = rp.getNameElement();
+                if (pe.denotesCurrent()) {
-                } else if (pe == Path.PARENT_ELEMENT) {
+                } else if (pe.denotesParent()) {
-        } catch (MalformedPathException e) {
+        } catch (org.apache.jackrabbit.conversion.NameException e) {
-            Path rp = PathFormat.parse(relPath, session.getNamespaceResolver());
+            Path rp = session.getPathResolver().getQPath(relPath);
-                QName propName = rp.getNameElement().getName();
+                Name propName = rp.getNameElement().getName();
-        } catch (MalformedPathException e) {
+        } catch (org.apache.jackrabbit.conversion.NameException e) {
-    private QPropertyDefinition getApplicablePropertyDefinition(QName propertyName,
+    private QPropertyDefinition getApplicablePropertyDefinition(Name propertyName,
