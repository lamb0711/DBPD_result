JCR-1553 - ClusterNode not properly shutdown when repository has shutdown


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@708206 13f79535-47bb-0310-9956-ffa450edef68

+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+     * Default read delay: none.
+     */
+    private static final long DEFAULT_READ_DELAY = 0;
+
+    /**
+     * Default write delay: none.
+     */
+    private static final long DEFAULT_WRITE_DELAY = 0;
+
+    /**
+     * Logger.
+     */
+    private static Logger log = LoggerFactory.getLogger(MemoryJournal.class);
+
+    /**
+     * Set the read delay, i.e. the time in ms to wait before returning
+     * a record.
+     */
+    private long readDelay = DEFAULT_READ_DELAY;
+
+    /**
+     * Set the write delay, i.e. the time in ms to wait before appending
+     * a record.
+     */
+    private long writeDelay = DEFAULT_WRITE_DELAY;
+
+    /**
+     * Flag indicating whether this journal is closed.
+     */
+    private boolean closed;
+
+    /**
-        // not implemented
+        checkState();
+        checkState();
+
+        try {
+            Thread.sleep(writeDelay);
+        } catch (InterruptedException e) {
+            throw new JournalException("Interrupted in append().");
+        }
-        // not implemented
+        try {
+            checkState();
+        } catch (JournalException e) {
+            log.warn("Journal already closed while unlocking.");
+        }
+        checkState();
+
+     * Return the read delay in milliseconds.
+     *
+     * @return read delay
+     */
+    public long getReadDelay() {
+        return readDelay;
+    }
+
+    /**
+     * Set the read delay in milliseconds.
+     *
+     * @param readDelay read delay
+     */
+    public void setReadDelay(long readDelay) {
+        this.readDelay = readDelay;
+    }
+
+    /**
+     * Return the write delay in milliseconds.
+     *
+     * @return write delay
+     */
+    public long getWriteDelay() {
+        return writeDelay;
+    }
+
+    /**
+     * Set the write delay in milliseconds.
+     *
+     * @param writeDelay write delay
+     */
+    public void setWriteDelay(long writeDelay) {
+        this.writeDelay = writeDelay;
+    }
+
+    /**
-        // nothing to be done here
+        closed = true;
+    /**
+     * Check state of this journal.
+     */
+    private void checkState() throws JournalException {
+        if (closed) {
+            throw new JournalException("Journal closed.");
+        }
+    }
+            checkState();
+
+            try {
+                Thread.sleep(readDelay);
+            } catch (InterruptedException e) {
+                throw new JournalException("Interrupted in read().");
+            }
+
