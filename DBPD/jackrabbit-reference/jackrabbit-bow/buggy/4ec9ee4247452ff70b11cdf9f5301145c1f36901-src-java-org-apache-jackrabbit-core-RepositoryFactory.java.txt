- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.22 $, $Date: 2004/08/24 12:57:01 $
-	    "Repository.factory.config";
+            "Repository.factory.config";
-	configId = is.getSystemId() == null ? "[???]" : is.getSystemId();
-	this.factoryHomeDir = factoryHomeDir;
-	init(is);
+        configId = is.getSystemId() == null ? "[???]" : is.getSystemId();
+        this.factoryHomeDir = factoryHomeDir;
+        init(is);
-	try {
-	    SAXBuilder parser = new SAXBuilder();
-	    config = parser.build(is);
-	} catch (Exception e) {
-	    String msg = "error while parsing config file " + is.getSystemId();
-	    log.error(msg, e);
-	    throw new RepositoryException(msg, e);
-	}
+        try {
+            SAXBuilder parser = new SAXBuilder();
+            config = parser.build(is);
+        } catch (Exception e) {
+            String msg = "error while parsing config file " + is.getSystemId();
+            log.error(msg, e);
+            throw new RepositoryException(msg, e);
+        }
-	// no factory home dir specified, use cwd
-	String factoryHomeDir = System.getProperty("user.dir");
+        // no factory home dir specified, use cwd
+        String factoryHomeDir = System.getProperty("user.dir");
-	String configPath = System.getProperty(REPOSITORY_CONFIG_SYSTEM_PROPERTY);
-	if (configPath == null) {
-	    configPath = factoryHomeDir + File.separator + DEFAULT_CONFIG_FILE;
-	}
+        String configPath = System.getProperty(REPOSITORY_CONFIG_SYSTEM_PROPERTY);
+        if (configPath == null) {
+            configPath = factoryHomeDir + File.separator + DEFAULT_CONFIG_FILE;
+        }
-	return create(configPath, factoryHomeDir);
+        return create(configPath, factoryHomeDir);
-	// no factory home dir specified, use cwd
-	String factoryHomeDir = System.getProperty("user.dir");
-	return create(configFilePath, factoryHomeDir);
+        // no factory home dir specified, use cwd
+        String factoryHomeDir = System.getProperty("user.dir");
+        return create(configFilePath, factoryHomeDir);
-	try {
-	    File config = new File(configFilePath);
-	    InputSource is = new InputSource(new FileReader(config));
-	    is.setSystemId(config.toURI().toString());
-	    return new RepositoryFactory(is, factoryHomeDir);
-	} catch (IOException ioe) {
-	    String msg = "error while reading config file " + configFilePath;
-	    log.error(msg, ioe);
-	    throw new RepositoryException(msg, ioe);
-	}
+        try {
+            File config = new File(configFilePath);
+            InputSource is = new InputSource(new FileReader(config));
+            is.setSystemId(config.toURI().toString());
+            return new RepositoryFactory(is, factoryHomeDir);
+        } catch (IOException ioe) {
+            String msg = "error while reading config file " + configFilePath;
+            log.error(msg, ioe);
+            throw new RepositoryException(msg, ioe);
+        }
-	// no factory home dir specified, use cwd
-	String factoryHomeDir = System.getProperty("user.dir");
-	return new RepositoryFactory(is, factoryHomeDir);
+        // no factory home dir specified, use cwd
+        String factoryHomeDir = System.getProperty("user.dir");
+        return new RepositoryFactory(is, factoryHomeDir);
-	return new RepositoryFactory(is, factoryHomeDir);
+        return new RepositoryFactory(is, factoryHomeDir);
-	if (reps.containsKey(name)) {
-	    return (Repository) reps.get(name);
-	}
-	Element repConfig = getRepositoryConfig(name);
+        if (reps.containsKey(name)) {
+            return (Repository) reps.get(name);
+        }
+        Element repConfig = getRepositoryConfig(name);
-	// read repository store config
-	// (we know this element must exist since the XML has been checked
-	// against the DTD)
-	Element fsConfig = repConfig.getChild(REPOSITORY_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
-	FileSystem fsRepStore = createFileSystem(fsConfig);
+        // read repository store config
+        // (we know this element must exist since the XML has been checked
+        // against the DTD)
+        Element fsConfig = repConfig.getChild(REPOSITORY_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
+        FileSystem fsRepStore = createFileSystem(fsConfig);
-	// read definitions of stable workspaces
-	List wspList = repConfig.getChildren(STABLE_WORKSPACE_ELEMENT);
-	Iterator iter = wspList.iterator();
-	ArrayList list = new ArrayList();
-	while (iter.hasNext()) {
-	    Element wspConfig = (Element) iter.next();
-	    StableWorkspaceDef wspDef = createStableWspDef(wspConfig);
-	    list.add(wspDef);
-	}
-	StableWorkspaceDef[] wspDefs = (StableWorkspaceDef[]) list.toArray(new StableWorkspaceDef[list.size()]);
+        // read definitions of stable workspaces
+        List wspList = repConfig.getChildren(STABLE_WORKSPACE_ELEMENT);
+        Iterator iter = wspList.iterator();
+        ArrayList list = new ArrayList();
+        while (iter.hasNext()) {
+            Element wspConfig = (Element) iter.next();
+            StableWorkspaceDef wspDef = createStableWspDef(wspConfig);
+            list.add(wspDef);
+        }
+        StableWorkspaceDef[] wspDefs = (StableWorkspaceDef[]) list.toArray(new StableWorkspaceDef[list.size()]);
-	Repository rep = new RepositoryImpl(fsRepStore, wspDefs);
-	reps.put(name, rep);
-	return rep;
+        Repository rep = new RepositoryImpl(fsRepStore, wspDefs);
+        reps.put(name, rep);
+        return rep;
-	List repList = config.getRootElement().getChildren(REPOSITORY_ELEMENT);
-	Element repConfig = null;
-	Iterator iter = repList.iterator();
-	while (iter.hasNext()) {
-	    repConfig = (Element) iter.next();
-	    String n = repConfig.getAttributeValue(NAME_ATTRIB);
-	    if (n.equals(name)) {
-		return repConfig;
-	    }
-	}
-	String msg = "The repository " + name + " was not found in the config file " + configId;
-	log.error(msg);
-	throw new RepositoryException(msg);
+        List repList = config.getRootElement().getChildren(REPOSITORY_ELEMENT);
+        Element repConfig = null;
+        Iterator iter = repList.iterator();
+        while (iter.hasNext()) {
+            repConfig = (Element) iter.next();
+            String n = repConfig.getAttributeValue(NAME_ATTRIB);
+            if (n.equals(name)) {
+                return repConfig;
+            }
+        }
+        String msg = "The repository " + name + " was not found in the config file " + configId;
+        log.error(msg);
+        throw new RepositoryException(msg);
-	String name = stableWspConfig.getAttributeValue(NAME_ATTRIB);
-	// we know this element must exist since the XML has been checked
-	// against the DTD
+        String name = stableWspConfig.getAttributeValue(NAME_ATTRIB);
+        // we know this element must exist since the XML has been checked
+        // against the DTD
-	// FQN of class implementing PersistenceManager interface
-	String persistenceManagerClassName = stableWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getAttributeValue(CLASS_ATTRIB);
+        // FQN of class implementing PersistenceManager interface
+        String persistenceManagerClassName = stableWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getAttributeValue(CLASS_ATTRIB);
-	// read the PersistenceManager properties from the
-	// param elements in the config
-	HashMap persistenceManagerParams = new HashMap();
-	List paramList = stableWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getChildren(PARAM_ELEMENT);
-	for (Iterator i = paramList.iterator(); i.hasNext();) {
-	    Element param = (Element) i.next();
-	    String paramName = param.getAttributeValue(NAME_ATTRIB);
-	    String paramValue = param.getAttributeValue(VALUE_ATTRIB);
-	    persistenceManagerParams.put(paramName, paramValue);
-	}
+        // read the PersistenceManager properties from the
+        // param elements in the config
+        HashMap persistenceManagerParams = new HashMap();
+        List paramList = stableWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getChildren(PARAM_ELEMENT);
+        for (Iterator i = paramList.iterator(); i.hasNext();) {
+            Element param = (Element) i.next();
+            String paramName = param.getAttributeValue(NAME_ATTRIB);
+            String paramValue = param.getAttributeValue(VALUE_ATTRIB);
+            persistenceManagerParams.put(paramName, paramValue);
+        }
-	// main workspace store (mandatory)
-	Element fsConfig = stableWspConfig.getChild(WORKSPACE_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
-	FileSystem wspStore = createFileSystem(fsConfig);
+        // main workspace store (mandatory)
+        Element fsConfig = stableWspConfig.getChild(WORKSPACE_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
+        FileSystem wspStore = createFileSystem(fsConfig);
-	// blob store is optional
-	FileSystem blobStore = null;
-	if (stableWspConfig.getChild(BLOB_STORE_ELEMENT) != null) {
-	    fsConfig = stableWspConfig.getChild(BLOB_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
-	    blobStore = createFileSystem(fsConfig);
-	}
+        // blob store is optional
+        FileSystem blobStore = null;
+        if (stableWspConfig.getChild(BLOB_STORE_ELEMENT) != null) {
+            fsConfig = stableWspConfig.getChild(BLOB_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
+            blobStore = createFileSystem(fsConfig);
+        }
-	// read config of dynamic workspaces
-	List wspList = stableWspConfig.getChildren(DYNAMIC_WORKSPACE_ELEMENT);
-	Iterator iter = wspList.iterator();
-	ArrayList list = new ArrayList();
-	while (iter.hasNext()) {
-	    Element wspConfig = (Element) iter.next();
-	    DynamicWorkspaceDef wspDef = createDynWspDef(wspConfig, name);
-	    list.add(wspDef);
-	}
-	DynamicWorkspaceDef[] wspDefs = (DynamicWorkspaceDef[]) list.toArray(new DynamicWorkspaceDef[list.size()]);
+        // read config of dynamic workspaces
+        List wspList = stableWspConfig.getChildren(DYNAMIC_WORKSPACE_ELEMENT);
+        Iterator iter = wspList.iterator();
+        ArrayList list = new ArrayList();
+        while (iter.hasNext()) {
+            Element wspConfig = (Element) iter.next();
+            DynamicWorkspaceDef wspDef = createDynWspDef(wspConfig, name);
+            list.add(wspDef);
+        }
+        DynamicWorkspaceDef[] wspDefs = (DynamicWorkspaceDef[]) list.toArray(new DynamicWorkspaceDef[list.size()]);
-	// read config of search index (optional)
-	String searchIndexPath = null;
-	if (stableWspConfig.getChild(SEARCH_INDEX_ELEMENT) != null) {
-	    searchIndexPath = stableWspConfig.getChild(SEARCH_INDEX_ELEMENT).getAttributeValue(PATH_ATTRIB);
-	    searchIndexPath = searchIndexPath.replaceAll("\\$\\{factory\\.home\\}", factoryHomeDir.replace('\\', '/'));
-	}
+        // read config of search index (optional)
+        String searchIndexPath = null;
+        if (stableWspConfig.getChild(SEARCH_INDEX_ELEMENT) != null) {
+            searchIndexPath = stableWspConfig.getChild(SEARCH_INDEX_ELEMENT).getAttributeValue(PATH_ATTRIB);
+            searchIndexPath = searchIndexPath.replaceAll("\\$\\{factory\\.home\\}", factoryHomeDir.replace('\\', '/'));
+        }
-	return new StableWorkspaceDef(name, wspStore, blobStore,
-		persistenceManagerClassName, persistenceManagerParams, wspDefs,
-		searchIndexPath);
+        return new StableWorkspaceDef(name, wspStore, blobStore,
+                persistenceManagerClassName, persistenceManagerParams, wspDefs,
+                searchIndexPath);
-	String name = dynWspConfig.getAttributeValue(NAME_ATTRIB);
-	// we know this element must exist since the XML has been checked
-	// against the DTD
+        String name = dynWspConfig.getAttributeValue(NAME_ATTRIB);
+        // we know this element must exist since the XML has been checked
+        // against the DTD
-	// FQN of class implementing PersistenceManager interface
-	String persistenceManagerClassName = dynWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getAttributeValue(CLASS_ATTRIB);
+        // FQN of class implementing PersistenceManager interface
+        String persistenceManagerClassName = dynWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getAttributeValue(CLASS_ATTRIB);
-	// read the PersistenceManager properties from the
-	// param elements in the config
-	HashMap persistenceManagerParams = new HashMap();
-	List paramList = dynWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getChildren(PARAM_ELEMENT);
-	for (Iterator i = paramList.iterator(); i.hasNext();) {
-	    Element param = (Element) i.next();
-	    String paramName = param.getAttributeValue(NAME_ATTRIB);
-	    String paramValue = param.getAttributeValue(VALUE_ATTRIB);
-	    persistenceManagerParams.put(paramName, paramValue);
-	}
+        // read the PersistenceManager properties from the
+        // param elements in the config
+        HashMap persistenceManagerParams = new HashMap();
+        List paramList = dynWspConfig.getChild(PERSISTENCE_MANAGER_ELEMENT).getChildren(PARAM_ELEMENT);
+        for (Iterator i = paramList.iterator(); i.hasNext();) {
+            Element param = (Element) i.next();
+            String paramName = param.getAttributeValue(NAME_ATTRIB);
+            String paramValue = param.getAttributeValue(VALUE_ATTRIB);
+            persistenceManagerParams.put(paramName, paramValue);
+        }
-	// main workspace store (mandatory)
-	Element fsConfig = dynWspConfig.getChild(WORKSPACE_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
-	FileSystem wspStore = createFileSystem(fsConfig);
+        // main workspace store (mandatory)
+        Element fsConfig = dynWspConfig.getChild(WORKSPACE_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
+        FileSystem wspStore = createFileSystem(fsConfig);
-	// blob store is optional
-	FileSystem blobStore = null;
-	if (dynWspConfig.getChild(BLOB_STORE_ELEMENT) != null) {
-	    fsConfig = dynWspConfig.getChild(BLOB_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
-	    blobStore = createFileSystem(fsConfig);
-	}
+        // blob store is optional
+        FileSystem blobStore = null;
+        if (dynWspConfig.getChild(BLOB_STORE_ELEMENT) != null) {
+            fsConfig = dynWspConfig.getChild(BLOB_STORE_ELEMENT).getChild(FILE_SYSTEM_ELEMENT);
+            blobStore = createFileSystem(fsConfig);
+        }
-	return new DynamicWorkspaceDef(name, wspStore, blobStore,
-		persistenceManagerClassName, persistenceManagerParams, stableWspName);
+        return new DynamicWorkspaceDef(name, wspStore, blobStore,
+                persistenceManagerClassName, persistenceManagerParams, stableWspName);
-	FileSystem fs;
-	String className = "";
-	try {
-	    // Create the file system object
-	    className = fsConfig.getAttributeValue(CLASS_ATTRIB);
-	    Class c = Class.forName(className);
-	    fs = (FileSystem) c.newInstance();
+        FileSystem fs;
+        String className = "";
+        try {
+            // Create the file system object
+            className = fsConfig.getAttributeValue(CLASS_ATTRIB);
+            Class c = Class.forName(className);
+            fs = (FileSystem) c.newInstance();
-	    // Set the properties of the file system object from the
-	    // param elements in the config
-	    BeanMap bm = new BeanMap(fs);
-	    List paramList = fsConfig.getChildren(PARAM_ELEMENT);
-	    for (Iterator i = paramList.iterator(); i.hasNext();) {
-		Element param = (Element) i.next();
-		String paramName = param.getAttributeValue(NAME_ATTRIB);
-		String paramValue = param.getAttributeValue(VALUE_ATTRIB);
-		// @todo FIXME need a cleaner way to specify/configure root of abstract file system
-		int pos;
-		int lastPos = 0;
-		StringBuffer sb = new StringBuffer(paramValue.length());
-		while ((pos = paramValue.indexOf(FACTORY_HOME_VARIABLE, lastPos)) != -1) {
-		    sb.append(paramValue.substring(lastPos, pos));
-		    sb.append(factoryHomeDir);
-		    lastPos = pos + FACTORY_HOME_VARIABLE.length();
-		}
-		if (lastPos < paramValue.length()) {
-		    sb.append(paramValue.substring(lastPos));
-		}
-		bm.put(paramName, sb.toString());
-	    }
-	    fs.init();
-	} catch (Exception e) {
-	    String msg = "Cannot instantiate implementing class " + className;
-	    log.error(msg, e);
-	    throw new RepositoryException(msg, e);
-	}
-	return fs;
+            // Set the properties of the file system object from the
+            // param elements in the config
+            BeanMap bm = new BeanMap(fs);
+            List paramList = fsConfig.getChildren(PARAM_ELEMENT);
+            for (Iterator i = paramList.iterator(); i.hasNext();) {
+                Element param = (Element) i.next();
+                String paramName = param.getAttributeValue(NAME_ATTRIB);
+                String paramValue = param.getAttributeValue(VALUE_ATTRIB);
+                // @todo FIXME need a cleaner way to specify/configure root of abstract file system
+                int pos;
+                int lastPos = 0;
+                StringBuffer sb = new StringBuffer(paramValue.length());
+                while ((pos = paramValue.indexOf(FACTORY_HOME_VARIABLE, lastPos)) != -1) {
+                    sb.append(paramValue.substring(lastPos, pos));
+                    sb.append(factoryHomeDir);
+                    lastPos = pos + FACTORY_HOME_VARIABLE.length();
+                }
+                if (lastPos < paramValue.length()) {
+                    sb.append(paramValue.substring(lastPos));
+                }
+                bm.put(paramName, sb.toString());
+            }
+            fs.init();
+        } catch (Exception e) {
+            String msg = "Cannot instantiate implementing class " + className;
+            log.error(msg, e);
+            throw new RepositoryException(msg, e);
+        }
+        return fs;
-	Iterator iter = reps.keySet().iterator();
-	while (iter.hasNext()) {
-	    String name = (String) iter.next();
-	    RepositoryImpl rep = (RepositoryImpl) reps.get(name);
-	    log.info("Shutting down: " + name);
-	    rep.shutdown();
-	}
-	reps.clear();
+        Iterator iter = reps.keySet().iterator();
+        while (iter.hasNext()) {
+            String name = (String) iter.next();
+            RepositoryImpl rep = (RepositoryImpl) reps.get(name);
+            log.info("Shutting down: " + name);
+            rep.shutdown();
+        }
+        reps.clear();
