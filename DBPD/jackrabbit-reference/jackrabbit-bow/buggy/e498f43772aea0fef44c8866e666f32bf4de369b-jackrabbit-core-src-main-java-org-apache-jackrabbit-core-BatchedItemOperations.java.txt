JCR-2116 JSR 283: Built-In Node Types
- adding autocreated to mix:created and mix:lastModified
- adding more test cases


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@798847 13f79535-47bb-0310-9956-ffa450edef68

-        InternalValue[] genValues =
-                computeSystemGeneratedPropertyValues(parent, def);
+        InternalValue[] genValues = session.getNodeTypeInstanceHandler()
+                .computeSystemGeneratedPropertyValues(parent, def);
-    /**
-     * Computes the values of well-known system (i.e. protected) properties.
-     * todo: duplicate code in NodeImpl: consolidate and delegate to NodeTypeInstanceHandler
-     *
-     * @param parent
-     * @param def
-     * @return the computed values
-     */
-    public static InternalValue[] computeSystemGeneratedPropertyValues(NodeState parent,
-                                                                 PropDef def) {
-        InternalValue[] genValues = null;
-
-        /**
-         * todo: need to come up with some callback mechanism for applying system generated values
-         * (e.g. using a NodeTypeInstanceHandler interface)
-         */
-
-        // compute system generated values
-        Name declaringNT = def.getDeclaringNodeType();
-        Name name = def.getName();
-        // TODO JCR-2116: Built-In Node Types; => adapt to JCR 2.0 built-in node types (mix:created, etc)
-        if (NameConstants.MIX_REFERENCEABLE.equals(declaringNT)) {
-            // mix:referenceable node type
-            if (NameConstants.JCR_UUID.equals(name)) {
-                // jcr:uuid property
-                genValues = new InternalValue[]{InternalValue.create(
-                        parent.getNodeId().toString())};
-            }
-        } else if (NameConstants.NT_BASE.equals(declaringNT)) {
-            // nt:base node type
-            if (NameConstants.JCR_PRIMARYTYPE.equals(name)) {
-                // jcr:primaryType property
-                genValues = new InternalValue[]{InternalValue.create(parent.getNodeTypeName())};
-            } else if (NameConstants.JCR_MIXINTYPES.equals(name)) {
-                // jcr:mixinTypes property
-                Set<Name> mixins = parent.getMixinTypeNames();
-                ArrayList<InternalValue> values = new ArrayList<InternalValue>(mixins.size());
-                for (Name n : mixins) {
-                    values.add(InternalValue.create(n));
-                }
-                genValues = values.toArray(new InternalValue[values.size()]);
-            }
-        } else if (NameConstants.NT_HIERARCHYNODE.equals(declaringNT)
-                || NameConstants.MIX_CREATED.equals(declaringNT)) {
-            // nt:hierarchyNode node type
-            if (NameConstants.JCR_CREATED.equals(name)) {
-                // jcr:created property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        } else if (NameConstants.NT_RESOURCE.equals(declaringNT)) {
-            // nt:resource node type
-            if (NameConstants.JCR_LASTMODIFIED.equals(name)) {
-                // jcr:lastModified property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        } else if (NameConstants.NT_VERSION.equals(declaringNT)) {
-            // nt:version node type
-            if (NameConstants.JCR_CREATED.equals(name)) {
-                // jcr:created property
-                genValues = new InternalValue[]{InternalValue.create(Calendar.getInstance())};
-            }
-        }
-
-        return genValues;
-    }
