- invalidating a NodeEntry must also invalidate the ChildNodeEntries collection in order to get informed about reordering of the entries.

- comparing ItemInfo.getPath to HierarchyEntry.getPath must use the 'workspace' path of the latter and not the current path present in the transient space, which differs in case of a moved item.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@518930 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.MalformedPathException;
-            state = doResolve();
-            target = new WeakReference(state);
+            try {
+                state = doResolve();
+                target = new WeakReference(state);
+            } catch (NoSuchItemStateException e) {
+                remove();
+                throw e;
+            }
+     * Build the Path of this entry
+     *
+     * @param workspacePath
+     * @return
+     * @throws RepositoryException
+     */
+    abstract Path buildPath(boolean workspacePath) throws RepositoryException;
+
+    /**
-        // shortcut for root state
-        if (parent == null) {
-            return Path.ROOT;
-        }
-
-        // build path otherwise
-        try {
-            Path.PathBuilder builder = new Path.PathBuilder();
-            buildPath(builder, this);
-            return builder.getPath();
-        } catch (MalformedPathException e) {
-            String msg = "Failed to build path of " + this;
-            throw new RepositoryException(msg, e);
-        }
+        return buildPath(false);
-     * Adds the path element of an item id to the path currently being built.
-     * On exit, <code>builder</code> contains the path of <code>state</code>.
-     *
-     * @param builder builder currently being used
-     * @param hEntry HierarchyEntry of the state the path should be built for.
+     * @inheritDoc
+     * @see HierarchyEntry#getWorkspacePath()
-    private void buildPath(Path.PathBuilder builder, HierarchyEntry hEntry) {
-        NodeEntry parentEntry = hEntry.getParent();
-        // shortcut for root state
-        if (parentEntry == null) {
-            builder.addRoot();
-            return;
-        }
-
-        // recursively build path of parent
-        buildPath(builder, parentEntry);
-
-        QName name = hEntry.getQName();
-        if (hEntry.denotesNode()) {
-            int index = ((NodeEntry) hEntry).getIndex();
-            // add to path
-            if (index == Path.INDEX_DEFAULT) {
-                builder.addLast(name);
-            } else {
-                builder.addLast(name, index);
-            }
-        } else {
-            // property-state: add to path
-            builder.addLast(name);
-        }
+    public Path getWorkspacePath() throws RepositoryException {
+        return buildPath(true);
