[JCR-317] replace UUID strings by UUID classes in NodeId, etc..

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@378221 13f79535-47bb-0310-9956-ffa450edef68

+import EDU.oswego.cs.dl.util.concurrent.ReentrantLock;
-import org.apache.jackrabbit.core.*;
+import org.apache.jackrabbit.core.ItemId;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.PathMap;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.SessionListener;
+import javax.jcr.ItemNotFoundException;
-import javax.jcr.ItemNotFoundException;
-import EDU.oswego.cs.dl.util.concurrent.ReentrantLock;
-
-            NodeId id = new NodeId(lockToken.uuid);
-
-            NodeImpl node = (NodeImpl) session.getItemManager().getItem(id);
-            Path path = getPath(node.getId());
+            NodeImpl node = (NodeImpl) session.getItemManager().getItem(lockToken.id);
+            Path path = getPath(lockToken.id);
-        LockInfo info = new LockInfo(new LockToken(node.internalGetUUID()),
+        LockInfo info = new LockInfo(new LockToken(node.getNodeId()),
-    public AbstractLockInfo getLockInfo(String uuid) throws RepositoryException {
+    public AbstractLockInfo getLockInfo(NodeId id) throws RepositoryException {
-            Path path = getPath(new NodeId(uuid));
+            Path path = getPath(id);
-                Node lockHolder = (Node) session.getItemManager().getItem(
-                        new NodeId(info.getUUID()));
+                Node lockHolder = (Node) session.getItemManager().getItem(info.getId());
-                    getItem(new NodeId(lockToken.uuid));
+                    getItem(lockToken.id);
-                    getItem(new NodeId(lockToken.uuid));
+                    getItem(lockToken.id);
-            } catch (InterruptedException e) {}
+            } catch (InterruptedException e) {
+                // ignore
+            }
-         * UUID recorded in event
+         * ID recorded in event
-        public final String uuid;
+        public final NodeId id;
-         * @param uuid uuid
+         * @param id id
-        public HierarchyEvent(String uuid, Path path, int type) {
-            this.uuid = uuid;
+        public HierarchyEvent(NodeId id, Path path, int type) {
+            this.id = id;
-                he = new HierarchyEvent(event.getChildUUID(),
+                he = new HierarchyEvent(event.getChildId(),
-            HierarchyEvent heExisting = (HierarchyEvent) eventMap.get(he.uuid);
+            HierarchyEvent heExisting = (HierarchyEvent) eventMap.get(he.id);
-                eventMap.put(he.uuid, he);
+                eventMap.put(he.id, he);
-                NodeImpl node = (NodeImpl) session.getItemManager().getItem(
-                        new NodeId(info.getUUID()));
+                NodeImpl node = (NodeImpl) session.getItemManager().
+                        getItem(info.getId());
-            return;
-            return;
-            return;
-                        NodeImpl node = (NodeImpl) session.getItemManager().getItem(
-                                new NodeId(getUUID()));
+                        NodeImpl node = (NodeImpl) session.getItemManager().getItem(getId());
