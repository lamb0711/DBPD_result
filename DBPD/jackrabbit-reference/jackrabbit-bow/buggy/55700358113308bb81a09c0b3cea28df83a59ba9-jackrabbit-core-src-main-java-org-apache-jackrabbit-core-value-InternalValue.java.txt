JCR-2238: Binary throws NullPointerException

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@802676 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.IOUtils;
-                InternalValue result;
-                    blob = getBLOBFileValue(store, value.getBinary().getStream(), true);
+                    Binary b = value.getBinary();
+                    boolean dispose = false;
+                    try {
+                        if (b instanceof BLOBFileValue) {
+                            // use as is
+                            blob = (BLOBFileValue) b;
+                        } else {
+                            // create a copy from the stream
+                            dispose = true;
+                            blob = getBLOBFileValue(store, b.getStream(), true);
+                        }
+                    } finally {
+                        if (dispose) {
+                            b.dispose();
+                        }
+                    }
-                result = new InternalValue(blob);
-                return result;
+                return new InternalValue(blob);
-        return new InternalValue(getBLOBFileValue(null, value, false));
+        return create(value, null);
-        BLOBFileValue v = (BLOBFileValue) val;
-        if (v.isImmutable()) {
-            return this;
-        }
-        // return a copy since the wrapped BLOBFileValue instance is mutable
-        InputStream stream = v.getStream();
-        try {
-            return createTemporary(stream);
-        } finally {
-            try {
-                stream.close();
-            } catch (IOException e) {
-                // ignore
-            }
-        }
+        // return a copy of the wrapped BLOBFileValue
+        return new InternalValue(((BLOBFileValue) val).copy());
-            return ((BLOBFileValue) val).getSize();
+            return ((Binary) val).getSize();
-            return ((BLOBFileValue) val).getString();
+            InputStream stream = getStream();
+            try {
+                return IOUtils.toString(stream, "UTF-8");
+            } catch (IOException e) {
+                throw new RepositoryException("conversion from stream to string failed", e);
+            } finally {
+                IOUtils.closeQuietly(stream);
+            }
-            return ((BLOBFileValue) val).getStream();
+            return ((Binary) val).getStream();
-            return (BLOBFileValue) val;
+            // return an independent copy that can be disposed without
+            // affecting this value
+            return ((BLOBFileValue) val).copy();
-            bfv.discard();
+            bfv.dispose();
