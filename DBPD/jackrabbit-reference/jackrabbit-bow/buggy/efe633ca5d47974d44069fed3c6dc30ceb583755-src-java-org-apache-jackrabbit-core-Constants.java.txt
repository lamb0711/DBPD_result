JCR-72 Session.impersonate non-functional: 'impersonate' is now delegated to LoginModule; added dummy 'impersonator' handling to SimpleLoginModule

- also fixed Session.getAccessibleWorkspaceNames()


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158069 13f79535-47bb-0310-9956-ffa450edef68

-    // reserved namespaces that must not be used or redefined
+    // reserved namespaces that must not be redefined and should not be used
-    /** jcr:system */
+    /**
+     * jcr:system
+     */
-    /** jcr:nodeTypes */
+    /**
+     * jcr:nodeTypes
+     */
-    /** jcr:uuid */
+    /**
+     * jcr:uuid
+     */
-    /** jcr:primaryType */
+    /**
+     * jcr:primaryType
+     */
-    /** jcr:mixinTypes */
+    /**
+     * jcr:mixinTypes
+     */
-    /** jcr:created */
+    /**
+     * jcr:created
+     */
-    /** jcr:lastModified */
+    /**
+     * jcr:lastModified
+     */
-    /** jcr:root (dummy name for root node used in XML serialization) */
+    /**
+     * jcr:root (dummy name for root node used in XML serialization)
+     */
-    /** jcr:xmltext */
+    /**
+     * jcr:xmltext
+     */
-    /** jcr:xmlcharacters */
+    /**
+     * jcr:xmlcharacters
+     */
-    /** jcr:lockOwner */
+    /**
+     * jcr:lockOwner
+     */
-    /** jcr:lockIsDeep */
+    /**
+     * jcr:lockIsDeep
+     */
-    /** jcr:versionStorage */
+    /**
+     * jcr:versionStorage
+     */
-    /** jcr:mergeFailed */
+    /**
+     * jcr:mergeFailed
+     */
-    /** jcr:frozenNode */
+    /**
+     * jcr:frozenNode
+     */
-    /** jcr:frozenUuid */
+    /**
+     * jcr:frozenUuid
+     */
-    /** jcr:frozenPrimaryType */
+    /**
+     * jcr:frozenPrimaryType
+     */
-    /** jcr:frozenMixinTypes  */
+    /**
+     * jcr:frozenMixinTypes
+     */
-    /** jcr:predecessors */
+    /**
+     * jcr:predecessors
+     */
-    /** jcr:versionLabels */
+    /**
+     * jcr:versionLabels
+     */
-    /** jcr:successors */
+    /**
+     * jcr:successors
+     */
-    /** jcr:isCheckedOut */
+    /**
+     * jcr:isCheckedOut
+     */
-    /** jcr:versionHistory */
+    /**
+     * jcr:versionHistory
+     */
-    /** jcr:baseVersion */
+    /**
+     * jcr:baseVersion
+     */
-    /** jcr:child */
+    /**
+     * jcr:child
+     */
-    /** jcr:rootVersion */
+    /**
+     * jcr:rootVersion
+     */
-    //---------------------------------------< nodetype item name constants >---
+    //--------------------------------------< node type item name constants >---
-    /** jcr:nodeTypeName */
-    public static final QName JCR_NODETYPENAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "nodeTypeName");
+    /**
+     * jcr:nodeTypeName
+     */
+    public static final QName JCR_NODETYPENAME = new QName(NS_JCR_URI, "nodeTypeName");
-    /** jcr:hasOrderableChildNodes */
-    public static final QName JCR_HASORDERABLECHILDNODES = new QName(NamespaceRegistryImpl.NS_JCR_URI, "hasOrderableChildNodes");
+    /**
+     * jcr:hasOrderableChildNodes
+     */
+    public static final QName JCR_HASORDERABLECHILDNODES = new QName(NS_JCR_URI, "hasOrderableChildNodes");
-    /** jcr:isMixin */
-    public static final QName JCR_ISMIXIN = new QName(NamespaceRegistryImpl.NS_JCR_URI, "isMixin");
+    /**
+     * jcr:isMixin
+     */
+    public static final QName JCR_ISMIXIN = new QName(NS_JCR_URI, "isMixin");
-    /** jcr:supertypes */
-    public static final QName JCR_SUPERTYPES = new QName(NamespaceRegistryImpl.NS_JCR_URI, "supertypes");
+    /**
+     * jcr:supertypes
+     */
+    public static final QName JCR_SUPERTYPES = new QName(NS_JCR_URI, "supertypes");
-    /** jcr:propertyDef */
-    public static final QName JCR_PROPERTYDEF = new QName(NamespaceRegistryImpl.NS_JCR_URI, "propertyDef");
+    /**
+     * jcr:propertyDef
+     */
+    public static final QName JCR_PROPERTYDEF = new QName(NS_JCR_URI, "propertyDef");
-    /** jcr:name */
-    public static final QName JCR_NAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "name");
+    /**
+     * jcr:name
+     */
+    public static final QName JCR_NAME = new QName(NS_JCR_URI, "name");
-    /** jcr:mandatory */
-    public static final QName JCR_MANDATORY = new QName(NamespaceRegistryImpl.NS_JCR_URI, "mandatory");
+    /**
+     * jcr:mandatory
+     */
+    public static final QName JCR_MANDATORY = new QName(NS_JCR_URI, "mandatory");
-    /** jcr:protected */
-    public static final QName JCR_PROTECTED = new QName(NamespaceRegistryImpl.NS_JCR_URI, "protected");
+    /**
+     * jcr:protected
+     */
+    public static final QName JCR_PROTECTED = new QName(NS_JCR_URI, "protected");
-    /** jcr:requiredType */
-    public static final QName JCR_REQUIREDTYPE = new QName(NamespaceRegistryImpl.NS_JCR_URI, "requiredType");
+    /**
+     * jcr:requiredType
+     */
+    public static final QName JCR_REQUIREDTYPE = new QName(NS_JCR_URI, "requiredType");
-    /** jcr:onParentVersion */
-    public static final QName JCR_ONPARENTVERSION = new QName(NamespaceRegistryImpl.NS_JCR_URI, "onParentVersion");
+    /**
+     * jcr:onParentVersion
+     */
+    public static final QName JCR_ONPARENTVERSION = new QName(NS_JCR_URI, "onParentVersion");
-    /** jcr:primaryItemName */
-    public static final QName JCR_PRIMARYITEMNAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "primaryItemName");
+    /**
+     * jcr:primaryItemName
+     */
+    public static final QName JCR_PRIMARYITEMNAME = new QName(NS_JCR_URI, "primaryItemName");
-    /** jcr:multiple */
-    public static final QName JCR_MULTIPLE = new QName(NamespaceRegistryImpl.NS_JCR_URI, "multiple");
+    /**
+     * jcr:multiple
+     */
+    public static final QName JCR_MULTIPLE = new QName(NS_JCR_URI, "multiple");
-    /** jcr:valueConstraints */
-    public static final QName JCR_VALUECONSTRAINTS = new QName(NamespaceRegistryImpl.NS_JCR_URI, "valueConstraints");
+    /**
+     * jcr:valueConstraints
+     */
+    public static final QName JCR_VALUECONSTRAINTS = new QName(NS_JCR_URI, "valueConstraints");
-    /** jcr:defaultValues */
-    public static final QName JCR_DEFAULTVALUES = new QName(NamespaceRegistryImpl.NS_JCR_URI, "defaultValues");
+    /**
+     * jcr:defaultValues
+     */
+    public static final QName JCR_DEFAULTVALUES = new QName(NS_JCR_URI, "defaultValues");
-    /** jcr:autoCreate */
-    public static final QName JCR_AUTOCREATE = new QName(NamespaceRegistryImpl.NS_JCR_URI, "autoCreate");
+    /**
+     * jcr:autoCreate
+     */
+    public static final QName JCR_AUTOCREATE = new QName(NS_JCR_URI, "autoCreate");
-    /** jcr:childNodeDef */
-    public static final QName JCR_CHILDNODEDEF = new QName(NamespaceRegistryImpl.NS_JCR_URI, "childNodeDef");
+    /**
+     * jcr:childNodeDef
+     */
+    public static final QName JCR_CHILDNODEDEF = new QName(NS_JCR_URI, "childNodeDef");
-    /** jcr:sameNameSibs */
-    public static final QName JCR_SAMENAMESIBS = new QName(NamespaceRegistryImpl.NS_JCR_URI, "sameNameSibs");
+    /**
+     * jcr:sameNameSibs
+     */
+    public static final QName JCR_SAMENAMESIBS = new QName(NS_JCR_URI, "sameNameSibs");
-    /** jcr:defaultPrimaryType */
-    public static final QName JCR_DEFAULTPRIMARYTYPE = new QName(NamespaceRegistryImpl.NS_JCR_URI, "defaultPrimaryType");
+    /**
+     * jcr:defaultPrimaryType
+     */
+    public static final QName JCR_DEFAULTPRIMARYTYPE = new QName(NS_JCR_URI, "defaultPrimaryType");
-    /** jcr:requiredPrimaryTypes */
-    public static final QName JCR_REQUIREDPRIMARYTYPES = new QName(NamespaceRegistryImpl.NS_JCR_URI, "requiredPrimaryTypes");
+    /**
+     * jcr:requiredPrimaryTypes
+     */
+    public static final QName JCR_REQUIREDPRIMARYTYPES = new QName(NS_JCR_URI, "requiredPrimaryTypes");
-    /** rep:root */
+    /**
+     * rep:root
+     */
-    /** rep:system */
+    /**
+     * rep:system
+     */
-    /** rep:versionStorage */
+    /**
+     * rep:versionStorage
+     */
-    /** rep:versionStorage */
+    /**
+     * rep:versionStorage
+     */
-    /** nt:unstructured */
+    /**
+     * nt:unstructured
+     */
-    /** nt:base */
+    /**
+     * nt:base
+     */
-    /** nt:hierarchyNode */
+    /**
+     * nt:hierarchyNode
+     */
-    /** nt:resource */
+    /**
+     * nt:resource
+     */
-    /** nt:query */
+    /**
+     * nt:query
+     */
-    /** mix:referenceable */
+    /**
+     * mix:referenceable
+     */
-    /** mix:referenceable */
+    /**
+     * mix:referenceable
+     */
-    /** mix:versionable */
+    /**
+     * mix:versionable
+     */
-    /** nt:versionHistory */
+    /**
+     * nt:versionHistory
+     */
-    /** nt:version */
+    /**
+     * nt:version
+     */
-    /** nt:versionLabels */
+    /**
+     * nt:versionLabels
+     */
-    /** nt:versionedChild */
+    /**
+     * nt:versionedChild
+     */
-    /** nt:frozenNode */
+    /**
+     * nt:frozenNode
+     */
-    /** nt:nodeType */
-    public static final QName NT_NODETYPE= new QName(NS_NT_URI, "nodeType");
+    /**
+     * nt:nodeType
+     */
+    public static final QName NT_NODETYPE = new QName(NS_NT_URI, "nodeType");
-    /** nt:propertyDef */
+    /**
+     * nt:propertyDef
+     */
-    /** nt:childNodeDef */
+    /**
+     * nt:childNodeDef
+     */
+
+    //-------------------------------------------< security related constants >
+    /**
+     * Name of the internal <code>SimpleCredentials</code> attribute where
+     * the <code>Subject</code> of the <i>impersonating</i> <code>Session</code>
+     * is stored.
+     *
+     * @see javax.jcr.Session#impersonate(javax.jcr.Credentials)
+     */
+    public static final String IMPERSONATOR_ATTRIBUTE =
+            "org.apache.jackrabbit.core.security.impersonator";
