- fixing latest locking issues
- fixing version items refresh

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157083 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.log4j.Logger;
+import javax.jcr.RepositoryException;
+import javax.jcr.lock.LockException;
+     * Logger
+     */
+    private static final Logger log = Logger.getLogger(LockInfo.class);
+
+    /**
+     * Lock manager
+     */
+    private final LockManagerImpl lockMgr;
+
+    /**
+     * @param lockMgr lock manager
-    public LockInfo(LockToken lockToken, boolean sessionScoped,
-                    boolean deep, String lockOwner) {
+    public LockInfo(LockManagerImpl lockMgr, LockToken lockToken,
+                    boolean sessionScoped, boolean deep, String lockOwner) {
+        this.lockMgr = lockMgr;
-        this.live = true;
-        if (live && session.equals(lockHolder)) {
+        if (session.equals(lockHolder)) {
+    /**
+     * Refresh a lock. Will try to re-insert this lock info into the lock
+     * manager's path map, provided the node is not already locked.
+     * @param node node to lock again
+     * @throws LockException if the node is already locked
+     * @throws RepositoryException if some other error occurs
+     * @see javax.jcr.Node#refresh
+     */
+    public void refresh(NodeImpl node) throws LockException, RepositoryException {
+        lockMgr.lock(node, this);
+    }
+
+     *
+     * When the owning session is logging out, we should unlock the node on
+     * behalf of the user currently holding it.
-    public void loggedOut(SessionImpl session) {
-        live = false;
+    public void loggingOut(SessionImpl session) {
+        if (live) {
+            lockMgr.unlock(this);
+        }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void loggedOut(SessionImpl session) {}
