JCR-1397: Allow query results with unknown size

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@629145 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-     * The name and path resolver of the session executing the query
+     * The session executing the query
-    protected final NamePathResolver resolver;
+    protected final SessionImpl session;
-     * restrictions. This value is set when the query is executed the first
-     * time.
+     * restrictions. This value is set whenever hits are obtained.
-     * @param resolver        the namespace resolver of the session executing
-     *                        the query.
+     * @param session         the session executing the query.
-                           NamePathResolver resolver,
+                           SessionImpl session,
-        this.resolver = resolver;
+        this.session = session;
-                propNames[i] = resolver.getJCRName(selectProps[i]);
+                propNames[i] = session.getJCRName(selectProps[i]);
-                resolver, excerptProvider, spellSuggestion);
+                session, excerptProvider, spellSuggestion);
-        return index.executeQuery(queryImpl, query, orderProps, orderSpecs);
+        return index.executeQuery(session, queryImpl,
+                query, orderProps, orderSpecs);
-            log.debug("getResults(" + size + ")");
+            log.debug("getResults({}) limit={}", new Long(size), new Long(limit));
+            long time = System.currentTimeMillis();
-
-            // set num results with the first query execution
-            if (numResults == -1) {
-                numResults = result.length();
-            }
+            log.debug("query executed in {} ms",
+                    new Long(System.currentTimeMillis() - time));
-            int max = Math.min(result.length(), numResults);
-            for (int i = start; i < max && resultNodes.size() < maxResultSize; i++) {
-                NodeId id = NodeId.valueOf(result.doc(i).get(FieldNames.UUID));
+            time = System.currentTimeMillis();
+            result.skip(start);
+            for (ScoreNode sn = result.nextScoreNode();
+                 sn != null && resultNodes.size() < maxResultSize;
+                 sn = result.nextScoreNode()) {
-                    if (accessMgr.isGranted(id, AccessManager.READ)) {
-                        resultNodes.add(new ScoreNode(id, result.score(i)));
+                    if (accessMgr.isGranted(sn.getNodeId(), AccessManager.READ)) {
+                        resultNodes.add(sn);
+            log.debug("retrieved ScoreNodes in {} ms",
+                    new Long(System.currentTimeMillis() - time));
+
+            // update numResults
+            numResults = result.getSize();
-     * current session has no permission to access.
+     * current session has no permission to access. This method may return
+     * <code>-1</code> if the total size is unknown.
-        return numResults - invalid;
+        if (numResults == -1) {
+            return -1;
+        } else {
+            return numResults - invalid;
+        }
-            if ((position + invalid + skipNum) > numResults) {
-                throw new NoSuchElementException();
-            }
-            long size = getTotalSize() - offset;
+            int total = getTotalSize();
+            if (total == -1) {
+                return -1;
+            }
+            long size = total - offset;
-            while (next == null && (nextPos + invalid) < numResults) {
+            while (next == null) {
+                    // quick check if there are more results at all
+                    // this check is only possible if we have numResults
+                    if (numResults != -1 && (nextPos + invalid) >= numResults) {
+                        break;
+                    }
+
-                        return;
+                        break;
