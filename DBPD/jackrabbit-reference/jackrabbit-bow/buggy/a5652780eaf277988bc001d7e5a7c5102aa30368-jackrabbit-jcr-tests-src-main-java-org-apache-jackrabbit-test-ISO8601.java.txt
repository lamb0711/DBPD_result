JCR-2515: ISO8601 uses default DecimalFormat constructor using locale specific digits

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915772 13f79535-47bb-0310-9956-ffa450edef68

-import java.text.DecimalFormat;
- * <p>
+ * <p/>
-     * misc. numeric formats used in formatting
-     */
-    private static final DecimalFormat XX_FORMAT = new DecimalFormat("00");
-    private static final DecimalFormat XXX_FORMAT = new DecimalFormat("000");
-    private static final DecimalFormat XXXX_FORMAT = new DecimalFormat("0000");
-
-    /**
+            /**
+             * in addition check the validity of the year
+             */
+            getYear(cal);
+     * or the calendar cannot be represented as defined by ISO 8601 (i.e. year
+     * with more than four digits).
-    public static String format(Calendar cal) {
+    public static String format(Calendar cal) throws IllegalArgumentException {
-        // determine era and adjust year if necessary
-        int year = cal.get(Calendar.YEAR);
-        if (cal.isSet(Calendar.ERA)
-                && cal.get(Calendar.ERA) == GregorianCalendar.BC) {
-            /**
-             * calculate year using astronomical system:
-             * year n BCE => astronomical year -n + 1
-             */
-            year = 0 - year + 1;
-        }
-
-        buf.append(XXXX_FORMAT.format(year));
+        appendZeroPaddedInt(buf, getYear(cal), 4);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.MONTH) + 1));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MONTH) + 1, 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.DAY_OF_MONTH)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.DAY_OF_MONTH), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.HOUR_OF_DAY)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.HOUR_OF_DAY), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.MINUTE)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MINUTE), 2);
-        buf.append(XX_FORMAT.format(cal.get(Calendar.SECOND)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.SECOND), 2);
-        buf.append(XXX_FORMAT.format(cal.get(Calendar.MILLISECOND)));
+        appendZeroPaddedInt(buf, cal.get(Calendar.MILLISECOND), 3);
-            buf.append(XX_FORMAT.format(hours));
+            appendZeroPaddedInt(buf, hours, 2);
-            buf.append(XX_FORMAT.format(minutes));
+            appendZeroPaddedInt(buf, minutes, 2);
+
+    /**
+     * Returns the astronomical year of the given calendar.
+     *
+     * @param cal a calendar instance.
+     * @return the astronomical year.
+     * @throws IllegalArgumentException if calendar cannot be represented as
+     *                                  defined by ISO 8601 (i.e. year with more
+     *                                  than four digits).
+     */
+    public static int getYear(Calendar cal) throws IllegalArgumentException {
+        // determine era and adjust year if necessary
+        int year = cal.get(Calendar.YEAR);
+        if (cal.isSet(Calendar.ERA)
+                && cal.get(Calendar.ERA) == GregorianCalendar.BC) {
+            /**
+             * calculate year using astronomical system:
+             * year n BCE => astronomical year -n + 1
+             */
+            year = 0 - year + 1;
+        }
+
+        if (year > 9999 || year < -9999) {
+            throw new IllegalArgumentException("Calendar has more than four " +
+                    "year digits, cannot be formatted as ISO8601: " + year);
+        }
+        return year;
+    }
+
+    /**
+     * Appends a zero-padded number to the given string buffer.
+     * <p/>
+     * This is an internal helper method which doesn't perform any
+     * validation on the given arguments.
+     *
+     * @param buf String buffer to append to
+     * @param n number to append
+     * @param precision number of digits to append
+     */
+    private static void appendZeroPaddedInt(StringBuffer buf, int n, int precision) {
+        if (n < 0) {
+            buf.append('-');
+            n = -n;
+        }
+
+        int exp = 1;
+        while (exp < precision) {
+            if (n < Math.pow(10, exp)) {
+                buf.append('0');
+            }
+            exp++;
+        }
+        buf.append(n);
+    }
