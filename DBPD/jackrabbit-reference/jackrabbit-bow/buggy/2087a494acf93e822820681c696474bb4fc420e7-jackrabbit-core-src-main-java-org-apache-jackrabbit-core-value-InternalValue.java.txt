JCR-2064 Add new JSR283 features to CND reader/writer
JCR-2153 Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()
JCR-2158 Consolidate CND related classes from SPI and Core


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785777 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.data.DataIdentifier;
-import org.apache.jackrabbit.core.data.DataStore;
-import org.apache.jackrabbit.core.data.DataStoreException;
-import org.apache.jackrabbit.core.fs.FileSystemResource;
-import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.util.ISO8601;
-import org.apache.jackrabbit.uuid.UUID;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.jackrabbit.spi.commons.value.AbstractQValue;
-import org.apache.jackrabbit.spi.commons.value.QValueValue;
-
-import javax.jcr.PropertyType;
-import javax.jcr.RepositoryException;
-import javax.jcr.Value;
-import javax.jcr.ValueFormatException;
-import javax.jcr.Binary;
-
-import java.util.Calendar;
+import java.math.BigDecimal;
-import java.math.BigDecimal;
+import java.util.Calendar;
+
+import javax.jcr.Binary;
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
+import javax.jcr.ValueFormatException;
+
+import org.apache.jackrabbit.core.data.DataIdentifier;
+import org.apache.jackrabbit.core.data.DataStore;
+import org.apache.jackrabbit.core.data.DataStoreException;
+import org.apache.jackrabbit.core.fs.FileSystemResource;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
+import org.apache.jackrabbit.spi.commons.conversion.NameException;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
+import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
+import org.apache.jackrabbit.spi.commons.value.AbstractQValue;
+import org.apache.jackrabbit.spi.commons.value.AbstractQValueFactory;
+import org.apache.jackrabbit.spi.commons.value.QValueValue;
+import org.apache.jackrabbit.util.ISO8601;
+import org.apache.jackrabbit.uuid.UUID;
+     * @throws RepositoryException
+     * @throws ValueFormatException
+     * @throws RepositoryException
+     * @throws ValueFormatException
+    public static InternalValue create(QValue value)
+            throws RepositoryException {
+        switch (value.getType()) {
+            case PropertyType.BINARY:
+                try {
+                    return create(value.getString().getBytes(AbstractQValueFactory.DEFAULT_ENCODING));
+                } catch (UnsupportedEncodingException e) {
+                    throw new InternalError(AbstractQValueFactory.DEFAULT_ENCODING + " not supported");
+                }
+            case PropertyType.BOOLEAN:
+                return new InternalValue(value.getBoolean());
+            case PropertyType.DATE:
+                return new InternalValue(value.getCalendar());
+            case PropertyType.DOUBLE:
+                return new InternalValue(value.getDouble());
+            case PropertyType.DECIMAL:
+                return new InternalValue(value.getDecimal());
+            case PropertyType.LONG:
+                return new InternalValue(value.getLong());
+            case PropertyType.REFERENCE:
+                return create(new UUID(value.getString()));
+            case PropertyType.WEAKREFERENCE:
+                return create(new UUID(value.getString()), true);
+            case PropertyType.URI:
+                return new InternalValue(value.getURI());
+            case PropertyType.NAME:
+                return new InternalValue(value.getName());
+            case PropertyType.PATH:
+                return new InternalValue(value.getPath());
+            case PropertyType.STRING:
+                return new InternalValue(value.getString());
+            default:
+                throw new IllegalArgumentException("illegal value");
+        }
+    }
+
+     * @throws RepositoryException
+     * @param store
+     * @throws RepositoryException
+     * @throws RepositoryException
-                return create(Boolean.valueOf(s).booleanValue());
+                return create(Boolean.valueOf(s));
-        super(Long.valueOf(value));
+        super(value);
-        super(Double.valueOf(value));
+        super(value);
-        super(Boolean.valueOf(value));
+        super(value);
+     * @throws RepositoryException
