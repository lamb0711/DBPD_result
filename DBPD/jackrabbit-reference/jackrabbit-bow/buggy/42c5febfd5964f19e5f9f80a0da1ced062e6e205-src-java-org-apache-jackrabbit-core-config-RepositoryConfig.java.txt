Refactoring step 4 (JCR-53)
 - Moved repository.xml parsing to ConfigurationParser
 - Moved workspace creation code to ConfigurationParser (TODO find a better place)
 - Removed AbstractConfig as it is no longer needed
 - Added the ConfigurationEntityResolver utility class
 - Fixed broken unit tests (need to call FileSystem.init()!)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156082 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystem;
-import org.apache.log4j.Logger;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.output.Format;
-import org.jdom.output.XMLOutputter;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Properties;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Properties;
+
+import org.apache.jackrabbit.core.fs.FileSystem;
+import org.jdom.Document;
-public class RepositoryConfig extends AbstractConfig {
-    private static Logger log = Logger.getLogger(RepositoryConfig.class);
-
-    /**
-     * name of repository configuration file
-     */
-    public static final String CONFIG_FILE_NAME = "repository.xml";
-
-    /**
-     * public id
-     */
-    public static final String PUBLIC_ID = "-//The Apache Software Foundation//DTD Repository//EN";
-
-    private static final String SECURITY_ELEMENT = "Security";
-    private static final String APP_NAME_ATTRIB = "appName";
-    private static final String ACCESS_MANAGER_ELEMENT = "AccessManager";
-
-    private static final String WORKSPACES_ELEMENT = "Workspaces";
-    private static final String ROOT_PATH_ATTRIB = "rootPath";
-    private static final String DEFAULT_WORKSPACE_ATTRIB = "defaultWorkspace";
-
-    private static final String WORKSPACE_ELEMENT = "Workspace";
-
-    private static final String VERSIONING_ELEMENT = "Versioning";
-
-    /**
-     * wellknown variables (will be replaced with their respective values
-     * whereever they occur within the configuration)
-     */
-    public static final String REPOSITORY_HOME_VARIABLE = "${rep.home}";
-
-    /**
-     * map of variable names and their respective values
-     */
-    private final Properties vars;
+public class RepositoryConfig {
+    
+    public static RepositoryConfig create(String file, String home)
+            throws RepositoryException {
+        ConfigurationParser parser = new ConfigurationParser(new Properties());
+        return parser.parseRepositoryConfig(file, home);
+    }
+    
+    private Document config;
+    private ConfigurationParser parser;
-    private final HashMap wspConfigs;
+    private final Map wspConfigs;
+    public RepositoryConfig(
+            Document config, ConfigurationParser parser,
+            String home, String name, Map wspConfigs,
+            FileSystem fs, String root, String defaultWspName,
+            BeanConfig amc, VersioningConfig vc) {
+        this.config = config;
+        this.parser = parser;
+        this.repHomeDir = home;
+        this.appName = name;
+        this.wspConfigs = wspConfigs;
+        this.repFS = fs;
+        this.wspConfigRootDir = root;
+        this.defaultWspName = defaultWspName;
+        this.amConfig = amc;
+        this.vConfig = vc;
+    }
+    
-     * private constructor.
+     * Creates a new workspace configuration with the specified name.
-     * @param is
-     * @param repHomeDir
-     * @throws RepositoryException
+     * @param name workspace name
+     * @return a new <code>WorkspaceConfig</code> object.
+     * @throws RepositoryException if the specified name already exists or
+     *                             if an error occured during the creation.
-    private RepositoryConfig(InputSource is, String repHomeDir)
+    public synchronized WorkspaceConfig createWorkspaceConfig(String name)
-        super(is);
-        this.repHomeDir = repHomeDir;
-        wspConfigs = new HashMap();
-        // initialize variables
-        vars = new Properties();
-        vars.put(REPOSITORY_HOME_VARIABLE, repHomeDir);
-        // read config
-        init(config);
-    }
-
-    /**
-     * Initializes this <code>RepositoryConfig</code> object.
-     *
-     * @param config
-     * @throws RepositoryException
-     */
-    protected void init(Document config) throws RepositoryException {
-        try {
-            Element root = config.getRootElement();
-            ConfigurationParser parser = new ConfigurationParser(vars);
-
-            // file system
-            BeanConfig fsc = parser.parseBeanConfig(root, FILE_SYSTEM_ELEMENT);
-            repFS = (FileSystem) fsc.newInstance();
-
-            // security & access manager config
-            Element secEleme = root.getChild(SECURITY_ELEMENT);
-            appName = secEleme.getAttributeValue(APP_NAME_ATTRIB);
-            amConfig = parser.parseBeanConfig(secEleme, ACCESS_MANAGER_ELEMENT);
-
-            // workspaces
-            Element wspsElem = root.getChild(WORKSPACES_ELEMENT);
-            wspConfigRootDir = parser.replaceVariables(wspsElem.getAttributeValue(ROOT_PATH_ATTRIB));
-            defaultWspName = parser.replaceVariables(wspsElem.getAttributeValue(DEFAULT_WORKSPACE_ATTRIB));
-
-            // load wsp configs
-            File wspRoot = new File(wspConfigRootDir);
-            if (!wspRoot.exists()) {
-                wspRoot.mkdir();
-            }
-            File[] files = wspRoot.listFiles();
-            if (files == null) {
-                String msg = "invalid repsitory home directory";
-                log.debug(msg);
-                throw new RepositoryException(msg);
-            }
-            for (int i = 0; i < files.length; i++) {
-                // check if <subfolder>/workspace.xml exists
-                File configFile = new File(files[i], "workspace.xml");
-                if (configFile.isFile()) {
-                    // create workspace config
-                    WorkspaceConfig wspConfig =
-                        ConfigurationParser.parseWorkspaceConfig(
-                                configFile.getPath(), configFile.getParent());
-                    String wspName = wspConfig.getName();
-                    if (wspConfigs.containsKey(wspName)) {
-                        String msg = "duplicate workspace name: " + wspName;
-                        log.debug(msg);
-                        throw new RepositoryException(msg);
-                    }
-                    wspConfigs.put(wspName, wspConfig);
-                }
-            }
-            if (wspConfigs.isEmpty()) {
-                // create initial default workspace
-                createWorkspaceConfig(defaultWspName);
-            } else {
-                if (!wspConfigs.containsKey(defaultWspName)) {
-                    String msg = "no configuration found for default workspace: " + defaultWspName;
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
-                }
-            }
-
-            // load versioning config
-            Element vElement = config.getRootElement().getChild(VERSIONING_ELEMENT);
-            vConfig = parser.parseVersioningConfig(vElement);
-        } catch (ClassNotFoundException ex) {
-            throw new RepositoryException(ex);
-        } catch (InstantiationException ex) {
-            throw new RepositoryException(ex);
-        } catch (IllegalAccessException ex) {
-            throw new RepositoryException(ex);
-        } catch (ClassCastException ex) {
-            throw new RepositoryException(ex);
+        if (wspConfigs.containsKey(name)) {
+            String msg = "A workspace with the specified name alreay exists";
+            throw new RepositoryException(msg);
-    }
-
-    /**
-     * Creates a new <code>RepositoryFactory</code> instance. The configuration
-     * is read from the specified configuration file.
-     *
-     * @param configFilePath path to the configuration file
-     * @param repHomeDir     repository home directory
-     * @return a new <code>RepositoryConfig</code> instance
-     * @throws RepositoryException If an error occurs
-     */
-    public static RepositoryConfig create(String configFilePath, String repHomeDir) throws RepositoryException {
-        try {
-            File config = new File(configFilePath);
-            InputSource is = new InputSource(new FileReader(config));
-            is.setSystemId(config.toURI().toString());
-            return new RepositoryConfig(is, repHomeDir);
-        } catch (IOException ioe) {
-            String msg = "error while reading config file " + configFilePath;
-            log.debug(msg);
-            throw new RepositoryException(msg, ioe);
-        }
-    }
-
-    /**
-     * Creates a new <code>RepositoryConfig</code> instance. The configuration
-     * is read from the specified input source.
-     *
-     * @param is         <code>InputSource</code> where the configuration is read from
-     * @param repHomeDir repository home directory
-     * @return a new <code>RepositoryConfig</code> instance
-     * @throws RepositoryException If an error occurs
-     */
-    public static RepositoryConfig create(InputSource is, String repHomeDir) throws RepositoryException {
-        return new RepositoryConfig(is, repHomeDir);
+        WorkspaceConfig wspConfig =
+            parser.createWorkspaceConfig(config, wspConfigRootDir, name);
+        wspConfigs.put(name, wspConfig);
+        return wspConfig;
-    /**
-     * Creates a new workspace configuration with the specified name.
-     *
-     * @param name workspace name
-     * @return a new <code>WorkspaceConfig</code> object.
-     * @throws RepositoryException if the specified name already exists or
-     *                             if an error occured during the creation.
-     */
-    public synchronized WorkspaceConfig createWorkspaceConfig(String name) throws RepositoryException {
-        if (wspConfigs.containsKey(name)) {
-            String msg = "A workspace with the specified name alreay exists";
-            log.debug(msg);
-            throw new RepositoryException(msg);
-        }
-        // create the workspace folder (i.e. the workspace home directory)
-        File wspFolder = new File(wspConfigRootDir, name);
-        if (!wspFolder.mkdir()) {
-            String msg = "Failed to create the workspace home directory: " + wspFolder.getPath();
-            log.debug(msg);
-            throw new RepositoryException(msg);
-        }
-        // clone the workspace definition template
-        Element wspCongigElem = (Element) config.getRootElement().getChild(WORKSPACE_ELEMENT).clone();
-        wspCongigElem.setAttribute(NAME_ATTRIB, name);
-
-        // create workspace.xml file
-/*
-        DocType docType = new DocType(WORKSPACE_ELEMENT, null, WorkspaceConfig.PUBLIC_ID);
-        Document doc = new Document(wspCongigElem, docType);
-*/
-        Document doc = new Document(wspCongigElem);
-        XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
-        File configFile = new File(wspFolder, "workspace.xml");
-        FileOutputStream fos = null;
-        try {
-            fos = new FileOutputStream(configFile);
-            out.output(doc, fos);
-        } catch (IOException ioe) {
-            String msg = "Failed to create workspace configuration file: " + configFile.getPath();
-            log.debug(msg);
-            throw new RepositoryException(msg, ioe);
-        } finally {
-            if (fos != null) {
-                try {
-                    fos.close();
-                } catch (IOException e) {
-                    // ignore
-                }
-            }
-        }
-
-        // create workspace config object
-        WorkspaceConfig wspConfig =
-            ConfigurationParser.parseWorkspaceConfig(
-                    configFile.getPath(), configFile.getParent());
-        wspConfigs.put(name, wspConfig);
-        return wspConfig;
-    }
-
