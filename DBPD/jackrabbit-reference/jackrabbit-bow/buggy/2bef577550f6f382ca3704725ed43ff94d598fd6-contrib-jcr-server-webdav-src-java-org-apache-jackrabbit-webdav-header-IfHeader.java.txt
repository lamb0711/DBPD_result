JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Iterator;
-import java.io.StringReader;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
-     Coded-URL = "<" absoluteURI ">"
+     Coded-URL = "&lt;" absoluteURI "&gt;"
-     Tagged = { "<" Word ">" Untagged } .
+     Tagged = { "&lt;" Word "&gt;" Untagged } .
-     IfList = { [ "Not" ] ( ("<" Word ">" ) | ( "[" Word "]" ) ) } .
+     IfList = { [ "Not" ] ( ("&lt;" Word "&gt;" ) | ( "[" Word "]" ) ) } .
-public class IfHeader {
+public class IfHeader implements Header {
+     * The string representation of the header value
+     */
+    private final String headerValue;
+
+    /**
-     * The list of all tokens present in the If header.
+     * The list of all positive tokens present in the If header.
+    /**
+     * The list of all NOT tokens present in the If header.
+     */
+    private List allNotTokens = new ArrayList();
+
+    /**
+     * Create a Untagged <code>IfHeader</code> if the given lock tokens.
+     *
+     * @param tokens
+     */
+    public IfHeader(String[] tokens) {
+        allTokens.addAll(Arrays.asList(tokens));
+        StringBuffer b = new StringBuffer();
+        for (int i = 0; i < tokens.length; i++) {
+            b.append("(").append("<");
+            b.append(tokens[i]);
+            b.append(">").append(")");
+        }
+        headerValue = b.toString();
+        ifHeader = parse();
+    }
-
-	String ifHeaderValue = req.getHeader(DavConstants.HEADER_IF);
-        if (ifHeaderValue != null && ifHeaderValue.length() > 0) {
-
-            StringReader reader = null;
-            int firstChar = 0;
-
-            try {
-                reader = new StringReader(ifHeaderValue);
-
-                // get the first character to decide - expect '(' or '<'
-                try {
-                    reader.mark(1);
-                    firstChar = readWhiteSpace(reader);
-                    reader.reset();
-                } catch (IOException ignore) {
-                    // may be thrown according to API but is only thrown by the
-                    // StringReader class if the reader is already closed.
-                }
-
-                if (firstChar == '(') {
-                    ifHeader = parseUntagged(reader);
-                } else if (firstChar == '<') {
-                    ifHeader = parseTagged(reader);
-                } else {
-                    logIllegalState("If", firstChar, "(<", null);
-                    ifHeader = null;
-                }
-
-            } finally  {
-                if (reader != null) {
-                    reader.close();
-                }
-            }
-
-        } else {
-            log.debug("IfHeader: No If header in request");
-            ifHeader = null;
-        }
+	headerValue = req.getHeader(DavConstants.HEADER_IF);
+        ifHeader = parse();
+     * Return the String representation of the If header present on
+     * the given request or <code>null</code>.
+     *
+     * @return If header value as String or <code>null</code>.
+     */
+    public String getHeaderValue() {
+        return headerValue;
+    }
+
+    /**
-     * 
-     * @return
+     * @return an interator over all tokens present in the if header, that were
+     * not denied by a leading NOT statement.
+    /**
+     * @return an interator over all NOT tokens present in the if header, that
+     * were explicitely denied.
+     */
+    public Iterator getAllNotTokens() {
+        return allNotTokens.iterator();
+    }
+
+    /**
+     * Parse the original header value and build th internal IfHeaderInterface
+     * object that is easy to query.
+     */
+    private IfHeaderInterface parse() {
+        IfHeaderInterface ifHeader;
+        if (headerValue != null && headerValue.length() > 0) {
+            StringReader reader = null;
+            int firstChar = 0;
+
+            try {
+                reader = new StringReader(headerValue);
+                // get the first character to decide - expect '(' or '<'
+                try {
+                    reader.mark(1);
+                    firstChar = readWhiteSpace(reader);
+                    reader.reset();
+                } catch (IOException ignore) {
+                    // may be thrown according to API but is only thrown by the
+                    // StringReader class if the reader is already closed.
+                }
+
+                if (firstChar == '(') {
+                    ifHeader = parseUntagged(reader);
+                } else if (firstChar == '<') {
+                    ifHeader = parseTagged(reader);
+                } else {
+                    logIllegalState("If", firstChar, "(<", null);
+                    ifHeader = null;
+                }
+
+            } finally  {
+                if (reader != null) {
+                    reader.close();
+                }
+            }
+
+        } else {
+            log.debug("IfHeader: No If header in request");
+            ifHeader = null;
+        }
+        return ifHeader;
+    }
+
+                        if (positive) {
+                        } else {
+                            allNotTokens.add(word);
+                        }
