Added SQL and XPath query implementation. The implementation is not complete yet. Only basic operations are supported.
Also added postGoals to the maven.xml to generate the parser classes for SQL XPath.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@123135 13f79535-47bb-0310-9956-ffa450edef68

-     * Flag indicating whether nodes are ordered ascending or descending
+     * Array of flag indicating whether a node is ordered ascending or descending
-    private boolean ascending;
+    private boolean[] orderSpecs;
-     * @param asc        if <code>true</code> result nodes are orderd ascending;
+     * @param orderSpecs if <code>true</code> a result node is orderd ascending;
-    public OrderQueryNode(QueryNode parent, String[] properties, boolean asc) {
+    public OrderQueryNode(QueryNode parent, String[] properties, boolean[] orderSpecs) {
+        if (properties.length != orderSpecs.length)
-        this.ascending = asc;
+        this.orderSpecs = orderSpecs;
-     * Returns <code>true</code> if result nodes should be orderd ascending.
-     * If <code>false</code> result nodes are ordered descending.
+     * Returns <code>true</code> if the property <code>i</code> should be orderd
+     * ascending. If <code>false</code> the property is ordered descending.
+     * @param i index of the property
-     * @return the value of the ascending property.
+     * @return the order spec for the property <code>i</code>.
+     *
+     * @exception ArrayIndexOutOfBoundsException if there is no property with
+     * index <code>i</code>.
-    public boolean isAscending() {
-        return ascending;
+    public boolean isAscending(int i) {
+        return orderSpecs[i];
+     * Returns a boolean array that contains the sort order specification
+     * for each property returned by {@link #getOrderByProperties()}.
+     * @return the sort specification.
+     */
+    public boolean[] getOrderBySpecs() {
+        return orderSpecs;
+    }
+
+    /**
+                if (isAscending(i)) {
+                    // FIXME really default to descending?
+                    sb.append(" ASCENDING");
+                }
-        if (ascending) {
-            // FIXME really default to descending?
-            sb.append(" ASCENDING");
+        return sb.toString();
+    }
+
+    /**
+     * Returns a JCR SQL representation for this query node.
+     *
+     * @return a JCR SQL representation for this query node.
+     */
+    public String toJCRSQLString() {
+        StringBuffer sb = new StringBuffer("ORDER BY");
+        if (properties.length > 0) {
+            String comma = "";
+            for (int i = 0; i < properties.length; i++) {
+                sb.append(comma).append(" \"");
+                sb.append(properties[i]).append("\"");
+                if (!isAscending(i)) {
+                    sb.append(" DESC");
+                }
+                comma = ",";
+            }
+        } else {
+            sb.append(" SCORE");
