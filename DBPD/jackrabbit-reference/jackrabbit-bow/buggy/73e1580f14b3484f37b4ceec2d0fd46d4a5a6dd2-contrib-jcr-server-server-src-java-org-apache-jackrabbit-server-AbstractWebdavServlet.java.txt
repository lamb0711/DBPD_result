applying patch from angela, fixing:

[JCR-122] cannot PUT changes to a resource in the simple webdav server
[JCR-123] Webdav: Error when accessing Simple-Server
[JCR-126] Jcr-Server Module: Remove Dependency from Jackrabbit-Core


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@180346 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
-import org.apache.jackrabbit.webdav.*;
-import org.apache.jackrabbit.webdav.observation.ObservationResource;
-import org.apache.jackrabbit.webdav.observation.SubscriptionInfo;
-import org.apache.jackrabbit.webdav.observation.Subscription;
-import org.apache.jackrabbit.webdav.observation.EventDiscovery;
-import org.apache.jackrabbit.webdav.ordering.OrderingResource;
-import org.apache.jackrabbit.webdav.ordering.OrderPatch;
-import org.apache.jackrabbit.webdav.transaction.TransactionInfo;
-import org.apache.jackrabbit.webdav.transaction.TransactionResource;
-import org.apache.jackrabbit.webdav.lock.LockInfo;
+import org.apache.jackrabbit.webdav.DavConstants;
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.DavLocatorFactory;
+import org.apache.jackrabbit.webdav.DavMethods;
+import org.apache.jackrabbit.webdav.DavResource;
+import org.apache.jackrabbit.webdav.DavResourceFactory;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.DavSessionProvider;
+import org.apache.jackrabbit.webdav.MultiStatus;
+import org.apache.jackrabbit.webdav.WebdavRequest;
+import org.apache.jackrabbit.webdav.WebdavRequestImpl;
+import org.apache.jackrabbit.webdav.WebdavResponse;
+import org.apache.jackrabbit.webdav.WebdavResponseImpl;
-import org.apache.jackrabbit.webdav.version.*;
-import org.apache.jackrabbit.webdav.version.report.ReportInfo;
-import org.apache.jackrabbit.webdav.version.report.Report;
-import org.apache.jackrabbit.webdav.property.*;
-import org.apache.jackrabbit.webdav.search.SearchResource;
+import org.apache.jackrabbit.webdav.lock.LockInfo;
+import org.apache.jackrabbit.webdav.observation.EventDiscovery;
+import org.apache.jackrabbit.webdav.observation.ObservationResource;
+import org.apache.jackrabbit.webdav.observation.Subscription;
+import org.apache.jackrabbit.webdav.observation.SubscriptionInfo;
+import org.apache.jackrabbit.webdav.ordering.OrderPatch;
+import org.apache.jackrabbit.webdav.ordering.OrderingResource;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.property.DavPropertyIterator;
+import org.apache.jackrabbit.webdav.property.DavPropertyName;
+import org.apache.jackrabbit.webdav.property.DavPropertyNameSet;
+import org.apache.jackrabbit.webdav.property.DavPropertySet;
-
+import org.apache.jackrabbit.webdav.search.SearchResource;
+import org.apache.jackrabbit.webdav.transaction.TransactionInfo;
+import org.apache.jackrabbit.webdav.transaction.TransactionResource;
+import org.apache.jackrabbit.webdav.version.DeltaVConstants;
+import org.apache.jackrabbit.webdav.version.DeltaVResource;
+import org.apache.jackrabbit.webdav.version.LabelInfo;
+import org.apache.jackrabbit.webdav.version.MergeInfo;
+import org.apache.jackrabbit.webdav.version.OptionsInfo;
+import org.apache.jackrabbit.webdav.version.OptionsResponse;
+import org.apache.jackrabbit.webdav.version.UpdateInfo;
+import org.apache.jackrabbit.webdav.version.VersionControlledResource;
+import org.apache.jackrabbit.webdav.version.VersionResource;
+import org.apache.jackrabbit.webdav.version.VersionableResource;
+import org.apache.jackrabbit.webdav.version.report.Report;
+import org.apache.jackrabbit.webdav.version.report.ReportInfo;
+import org.apache.log4j.Logger;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
-import java.util.List;
+import java.util.List;
- *
- * todo respect Position header 
+ * <p/>
+ * todo respect Position header
-    /** default logger */
+    /**
+     * default logger
+     */
-     * Create a new <code>DavResource</code>
+     * Default value for the 'WWW-Authenticate' header, that is set, if request
+     * results in a {@link DavServletResponse#SC_UNAUTHORIZED 401 (Unauthorized)}
+     * error.
-     * @param locator
+     * @see #getAuthenticateHeaderValue()
+     */
+    public static final String DEFAULT_AUTHENTICATE_HEADER = "Basic Realm=Jackrabbit Webdav Server";
+
+    /**
+     * Checks if the precondition for this request and resource is valid.
+     *
+     * @param request
+     * @param resource
+     * @return
+     */
+    abstract protected boolean isPreconditionValid(WebdavRequest request, DavResource resource);
+
+    /**
+     * Returns the <code>DavSessionProvider</code>.
+     *
+     * @return the session provider
+     */
+    abstract public DavSessionProvider getSessionProvider();
+
+    /**
+     * Returns the <code>DavLocatorFactory</code>.
+     *
+     * @return the locator factory
+     */
+    abstract public DavLocatorFactory getLocatorFactory();
+
+    /**
+     * Returns the <code>DavResourceFactory</code>.
+     *
+     * @return the resource factory
+     */
+    abstract public DavResourceFactory getResourceFactory();
+
+    /**
+     * Returns the value of the 'WWW-Authenticate' header, that is returned in
+     * case of 401 error.
+     *
+     * @return value of the 'WWW-Authenticate' header
+     */
+    abstract public String getAuthenticateHeaderValue();
+
+    /**
+     * Service the given request.
+     *
-     * @return resource for the given locator
+     * @throws ServletException
+     * @throws IOException
+     */
+    protected void service(HttpServletRequest request, HttpServletResponse response)
+            throws ServletException, IOException {
+
+        WebdavRequest webdavRequest = new WebdavRequestImpl(request, getLocatorFactory());
+        WebdavResponse webdavResponse = new WebdavResponseImpl(response);
+        try {
+            // make sure there is a authenticated user
+            if (!getSessionProvider().attachSession(webdavRequest)) {
+                return;
+            }
+
+            // check matching if=header for lock-token relevant operations
+            DavResource resource = getResourceFactory().createResource(webdavRequest.getRequestLocator(), webdavRequest, webdavResponse);
+            if (!isPreconditionValid(webdavRequest, resource)) {
+                webdavResponse.sendError(DavServletResponse.SC_PRECONDITION_FAILED);
+                return;
+            }
+
+            int methodCode = DavMethods.getMethodCode(webdavRequest.getMethod());
+            if (!execute(webdavRequest, webdavResponse, methodCode, resource)) {
+                super.service(request, response);
+            }
+
+        } catch (DavException e) {
+            if (e.getErrorCode() == HttpServletResponse.SC_UNAUTHORIZED) {
+                webdavResponse.setHeader("WWW-Authenticate", getAuthenticateHeaderValue());
+                webdavResponse.sendError(e.getErrorCode(), e.getStatusPhrase());
+            } else {
+                webdavResponse.sendErrorResponse(e);
+            }
+        } finally {
+            getSessionProvider().releaseSession(webdavRequest);
+        }
+    }
+
+    /**
+     * Executes the respective method in the given webdav context
+     *
+     * @param request
+     * @param response
+     * @param method
+     * @param resource
+     * @throws ServletException
+     * @throws IOException
-    abstract protected DavResource createResource(DavResourceLocator locator,
-                                                  WebdavRequest request,
-                                                  WebdavResponse response) throws DavException;
+    protected boolean execute(WebdavRequest request, WebdavResponse response,
+                              int method, DavResource resource)
+            throws ServletException, IOException, DavException {
+
+        switch (method) {
+            case DavMethods.DAV_GET:
+                doGet(request, response, resource);
+                break;
+            case DavMethods.DAV_HEAD:
+                doHead(request, response, resource);
+                break;
+            case DavMethods.DAV_PROPFIND:
+                doPropFind(request, response, resource);
+                break;
+            case DavMethods.DAV_PROPPATCH:
+                doPropPatch(request, response, resource);
+                break;
+            case DavMethods.DAV_POST:
+                doPost(request, response, resource);
+                break;
+            case DavMethods.DAV_PUT:
+                doPut(request, response, resource);
+                break;
+            case DavMethods.DAV_DELETE:
+                doDelete(request, response, resource);
+                break;
+            case DavMethods.DAV_COPY:
+                doCopy(request, response, resource);
+                break;
+            case DavMethods.DAV_MOVE:
+                doMove(request, response, resource);
+                break;
+            case DavMethods.DAV_MKCOL:
+                doMkCol(request, response, resource);
+                break;
+            case DavMethods.DAV_OPTIONS:
+                doOptions(request, response, resource);
+                break;
+            case DavMethods.DAV_LOCK:
+                doLock(request, response, resource);
+                break;
+            case DavMethods.DAV_UNLOCK:
+                doUnlock(request, response, resource);
+                break;
+            case DavMethods.DAV_ORDERPATCH:
+                doOrderPatch(request, response, resource);
+                break;
+            case DavMethods.DAV_SUBSCRIBE:
+                doSubscribe(request, response, resource);
+                break;
+            case DavMethods.DAV_UNSUBSCRIBE:
+                doUnsubscribe(request, response, resource);
+                break;
+            case DavMethods.DAV_POLL:
+                doPoll(request, response, resource);
+                break;
+            case DavMethods.DAV_SEARCH:
+                doSearch(request, response, resource);
+                break;
+            case DavMethods.DAV_VERSION_CONTROL:
+                doVersionControl(request, response, resource);
+                break;
+            case DavMethods.DAV_LABEL:
+                doLabel(request, response, resource);
+                break;
+            case DavMethods.DAV_REPORT:
+                doReport(request, response, resource);
+                break;
+            case DavMethods.DAV_CHECKIN:
+                doCheckin(request, response, resource);
+                break;
+            case DavMethods.DAV_CHECKOUT:
+                doCheckout(request, response, resource);
+                break;
+            case DavMethods.DAV_UNCHECKOUT:
+                doUncheckout(request, response, resource);
+                break;
+            case DavMethods.DAV_MERGE:
+                doMerge(request, response, resource);
+                break;
+            case DavMethods.DAV_UPDATE:
+                doUpdate(request, response, resource);
+                break;
+            case DavMethods.DAV_MKWORKSPACE:
+                doMkWorkspace(request, response, resource);
+                break;
+            default:
+                // any other method
+                return false;
+        }
+        return true;
+    }
-            String[] langs = ((SearchResource)resource).getQueryGrammerSet().getQueryLanguages();
+            String[] langs = ((SearchResource) resource).getQueryGrammerSet().getQueryLanguages();
-            oR = ((DeltaVResource)resource).getOptionResponse(oInfo);
+            oR = ((DeltaVResource) resource).getOptionResponse(oInfo);
-                int length = Integer.parseInt(contentLength.getValue()+"");
+                int length = Integer.parseInt(contentLength.getValue() + "");
-        if (sendContent) {
-            InputStream in = resource.getStream();
-            if (in != null) {
-                OutputStream out = response.getOutputStream();
-                byte[] buffer = new byte[8192];
-                int read;
-                while ((read = in.read(buffer)) >= 0 ) {
-                    out.write(buffer, 0, read);
+        InputStream in = resource.getStream();
+        try {
+            if (sendContent) {
+                if (in != null) {
+                    OutputStream out = response.getOutputStream();
+                    byte[] buffer = new byte[8192];
+                    int read;
+                    while ((read = in.read(buffer)) >= 0) {
+                        out.write(buffer, 0, read);
+                    }
-                in.close();
+            }
+        } finally {
+            // also close stream if not sending content
+            if (in != null) {
+                try {
+                    in.close();
+                } catch (IOException e) {
+                    // ignore
+                }
-            ((VersionControlledResource)resource).resolveMergeConflict(setProperties, removeProperties);
+            ((VersionControlledResource) resource).resolveMergeConflict(setProperties, removeProperties);
+     * The POST method. Delegate to PUT
+     *
+     * @param request
+     * @param response
+     * @param resource
+     * @throws IOException
+     * @throws DavException
+     */
+    protected void doPost(WebdavRequest request, WebdavResponse response,
+                          DavResource resource) throws IOException, DavException {
+        doPut(request, response, resource);
+    }
+
+    /**
-        if (resource.exists()){
+        if (resource.exists()) {
-        DavResource destResource = createResource(request.getDestinationLocator(), request, response);
+        DavResource destResource = getResourceFactory().createResource(request.getDestinationLocator(), request, response);
-        DavResource destResource = createResource(request.getDestinationLocator(), request, response);
+        DavResource destResource = getResourceFactory().createResource(request.getDestinationLocator(), request, response);
-    
+
-        throws DavException {
+            throws DavException {
-        if (destHeader == null || "".equals(destHeader)){
+        if (destHeader == null || "".equals(destHeader)) {
-                    destResource.getCollection().removeMember(destResource);                    
+                    destResource.getCollection().removeMember(destResource);
-            ((TransactionResource)resource).unlock(lockToken, tInfo);
+            ((TransactionResource) resource).unlock(lockToken, tInfo);
-        ((OrderingResource)resource).orderMembers(op);
+        ((OrderingResource) resource).orderMembers(op);
-        Subscription subs = ((ObservationResource)resource).subscribe(info, request.getSubscriptionId());
+        Subscription subs = ((ObservationResource) resource).subscribe(info, request.getSubscriptionId());
-        ((ObservationResource)resource).unsubscribe(request.getSubscriptionId());
+        ((ObservationResource) resource).unsubscribe(request.getSubscriptionId());
-        EventDiscovery ed = ((ObservationResource)resource).poll(request.getSubscriptionId());
+        EventDiscovery ed = ((ObservationResource) resource).poll(request.getSubscriptionId());
-        ((VersionableResource)resource).addVersionControl();
+        ((VersionableResource) resource).addVersionControl();
-           ((VersionResource)resource).label(labelInfo);
+            ((VersionResource) resource).label(labelInfo);
-           ((VersionControlledResource)resource).label(labelInfo);
+            ((VersionControlledResource) resource).label(labelInfo);
-        Report report = ((DeltaVResource)resource).getReport(info);
+        Report report = ((DeltaVResource) resource).getReport(info);
-        String versionHref = ((VersionControlledResource)resource).checkin();
+        String versionHref = ((VersionControlledResource) resource).checkin();
-        ((VersionControlledResource)resource).checkout();
+        ((VersionControlledResource) resource).checkout();
-                              DavResource resource)
+                                DavResource resource)
-        ((VersionControlledResource)resource).uncheckout();
+        ((VersionControlledResource) resource).uncheckout();
-         if (!(resource instanceof VersionControlledResource)) {
+        if (!(resource instanceof VersionControlledResource)) {
-        MultiStatus ms = ((VersionControlledResource)resource).merge(info);
+        MultiStatus ms = ((VersionControlledResource) resource).merge(info);
-        MultiStatus ms = ((VersionControlledResource)resource).update(info);
+        MultiStatus ms = ((VersionControlledResource) resource).update(info);
-                               DavResource resource) throws DavException, IOException {
+                                 DavResource resource) throws DavException, IOException {
-        ((DeltaVResource)parentResource).addWorkspace(resource);
+        ((DeltaVResource) parentResource).addWorkspace(resource);
-     * 
+     *
-                response.sendMultiStatusResponse(((SearchResource)resource).search(sR));
+                response.sendMultiStatusResponse(((SearchResource) resource).search(sR));
-                response.sendMultiStatusResponse(((SearchResource)resource).search(null));
+                response.sendMultiStatusResponse(((SearchResource) resource).search(null));
