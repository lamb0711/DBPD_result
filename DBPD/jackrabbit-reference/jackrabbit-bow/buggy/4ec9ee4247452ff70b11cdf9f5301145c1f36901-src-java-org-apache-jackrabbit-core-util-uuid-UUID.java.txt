- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
+ * <p/>
- *
+ * <p/>
- *
- * @author Commons-Id Team
- * @version $Revision: 1.2 $ $Date: 2004/07/26 17:10:46 $
- *
-    /** byte array to store 128-bits composing this UUID */
+    /**
+     * byte array to store 128-bits composing this UUID
+     */
-    /** Holds node identifier for this UUID */
+    /**
+     * Holds node identifier for this UUID
+     */
-    /** Holds timestamp for this UUID */
+    /**
+     * Holds timestamp for this UUID
+     */
-    /** Holds the clock sequence field */
+    /**
+     * Holds the clock sequence field
+     */
-    /** Holds the version field of this UUID */
+    /**
+     * Holds the version field of this UUID
+     */
-    /** Holds the variant field of this UUID */
+    /**
+     * Holds the variant field of this UUID
+     */
-    /** Holds the internal string value of the UUID */
+    /**
+     * Holds the internal string value of the UUID
+     */
-    /** XXX begin modification by stefan@apache.org */
+    /**
+     * XXX begin modification by stefan@apache.org
+     */
-    /** Constructs a nil UUID */
+    /**
+     * Constructs a nil UUID
+     */
-   /* protected UUID(BigInteger bigIntValue) throws IllegalArgumentException {
-        super();
-        if (bigIntValue.bitLength() > UUID.UUID_BIT_LENGTH) {
-            throw new IllegalArgumentException("UUID must be contructed using a 128 bit BigInteger");
-        }
-        numberValue = bigIntValue;
-    } */
+    /* protected UUID(BigInteger bigIntValue) throws IllegalArgumentException {
+         super();
+         if (bigIntValue.bitLength() > UUID.UUID_BIT_LENGTH) {
+             throw new IllegalArgumentException("UUID must be contructed using a 128 bit BigInteger");
+         }
+         numberValue = bigIntValue;
+     } */
-     *  @param byteArray the 16 byte array to construct this UUID from.
-     *  @throws IllegalArgumentException argument must be 16 bytes
+     * @param byteArray the 16 byte array to construct this UUID from.
+     * @throws IllegalArgumentException argument must be 16 bytes
-     *  @param input the datainput with 16 bytes to read in from.
-     *  @throws IOException exception if there is an IO problem also argument must contain 16 bytes.
+     * @param input the datainput with 16 bytes to read in from.
+     * @throws IOException exception if there is an IO problem also argument must contain 16 bytes.
-     * @param mostSignificant - the most significant 8 bytes of the uuid to be constructed.
+     * @param mostSignificant  - the most significant 8 bytes of the uuid to be constructed.
-       rawBytes = Bytes.append(Bytes.toBytes(mostSignificant), Bytes.toBytes(leastSignificant));
+        rawBytes = Bytes.append(Bytes.toBytes(mostSignificant), Bytes.toBytes(leastSignificant));
-     *  @param uuidString the String representing a UUID to construct this UUID
-     *  @throws UUIDFormatException String must be a properly formatted UUID string
+     * @param uuidString the String representing a UUID to construct this UUID
+     * @throws UUIDFormatException String must be a properly formatted UUID string
-     *  <p>Parses a string for a UUID.</p>
+     * <p>Parses a string for a UUID.</p>
-     *  @param uuidString the UUID formatted String to parse.
-     * XXX begin modification by stefan@apache.org
-     *  @throws UUIDFormatException the String must be a properly formatted UUID String.
-     * XXX end modification by stefan@apache.org
-     *  @return Returns a UUID or null if the formatted string could not be parsed.
+     * @param uuidString the UUID formatted String to parse.
+     *                   XXX begin modification by stefan@apache.org
+     * @return Returns a UUID or null if the formatted string could not be parsed.
+     * @throws UUIDFormatException the String must be a properly formatted UUID String.
+     *                             XXX end modification by stefan@apache.org
-	    throw new IllegalArgumentException();
+            throw new IllegalArgumentException();
-        if ( tok.countTokens() != TOKENS_IN_UUID ) {
-	    //throw new UUIDFormatException();
-	    throw new IllegalArgumentException();
+        if (tok.countTokens() != TOKENS_IN_UUID) {
+            //throw new UUIDFormatException();
+            throw new IllegalArgumentException();
-		//throw new UUIDFormatException();
-		throw new IllegalArgumentException();
+                //throw new UUIDFormatException();
+                throw new IllegalArgumentException();
-	/** XXX begin modification by stefan@apache.org */
+        /** XXX begin modification by stefan@apache.org */
-	String s = buf.toString();
-	byte[] bytes = new byte[UUID_BYTE_LENGTH];
-	for (int i = 0, j = 0; i < (UUID_BYTE_LENGTH * 2); i += 2) {
-	    bytes[j++] = (byte) Integer.parseInt(s.substring(i, i + 2), 16);
-	}
-	tmpUUID = new UUID(bytes);
-	/** XXX end modification by stefan@apache.org */
+        String s = buf.toString();
+        byte[] bytes = new byte[UUID_BYTE_LENGTH];
+        for (int i = 0, j = 0; i < (UUID_BYTE_LENGTH * 2); i += 2) {
+            bytes[j++] = (byte) Integer.parseInt(s.substring(i, i + 2), 16);
+        }
+        tmpUUID = new UUID(bytes);
+        /** XXX end modification by stefan@apache.org */
-	    /** XXX begin modification by stefan@apache.org */
+            /** XXX begin modification by stefan@apache.org */
-	    char[] chars = new char[UUID_FORMATTED_LENGTH];
-	    for (int i = 0, j = 0; i < 16; i++) {
-		chars[j++] = hexDigits[(rawBytes[i] >> 4) & 0x0f];
-		chars[j++] = hexDigits[rawBytes[i] & 0x0f];
-		if (i == 3 || i == 5 || i == 7 || i == 9) {
-		    chars[j++] = '-';
-		}
-	    }
-	    stringValue = new String(chars);
-	    /** XXX end modification by stefan@apache.org */
+            char[] chars = new char[UUID_FORMATTED_LENGTH];
+            for (int i = 0, j = 0; i < 16; i++) {
+                chars[j++] = hexDigits[(rawBytes[i] >> 4) & 0x0f];
+                chars[j++] = hexDigits[rawBytes[i] & 0x0f];
+                if (i == 3 || i == 5 || i == 7 || i == 9) {
+                    chars[j++] = '-';
+                }
+            }
+            stringValue = new String(chars);
+            /** XXX end modification by stefan@apache.org */
-        return Bytes.areEqual( ((UUID) obj).getRawBytes(), rawBytes);
+        return Bytes.areEqual(((UUID) obj).getRawBytes(), rawBytes);
-       return iTotal;
+        return iTotal;
-     *   <li>VERSION_ONE - The time-based version</li>
-     *   <li>VERSION_TWO - DCE Security version, with embedded POSIX UIDs.</li>
-     *   <li>VERSION_THREE - Name based UUID.</li>
-     *   <li>VERSION_FOUR - Random based UUID.</li>
+     * <li>VERSION_ONE - The time-based version</li>
+     * <li>VERSION_TWO - DCE Security version, with embedded POSIX UIDs.</li>
+     * <li>VERSION_THREE - Name based UUID.</li>
+     * <li>VERSION_FOUR - Random based UUID.</li>
+     *
-    long getLeastSignificantBits()  {
+    long getLeastSignificantBits() {
-    long getMostSignificantBits()  {
+    long getMostSignificantBits() {
-    /** XXX begin modification by stefan@apache.org */
+    /**
+     * XXX begin modification by stefan@apache.org
+     */
-	return (UUID) versionFourGenereator.nextIdentifier();
+        return (UUID) versionFourGenereator.nextIdentifier();
