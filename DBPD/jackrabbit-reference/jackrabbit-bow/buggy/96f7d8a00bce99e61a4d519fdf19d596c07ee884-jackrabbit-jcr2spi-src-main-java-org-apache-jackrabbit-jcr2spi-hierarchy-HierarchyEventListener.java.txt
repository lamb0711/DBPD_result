JCR-2108: JSR 283 Observation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@790826 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ItemId;
-    private final Collection eventFilter;
+    private final Collection<EventFilter> eventFilter;
-            this.eventFilter = (filter == null) ? Collections.EMPTY_LIST : Collections.singletonList(filter);
+            if (filter == null) {
+                this.eventFilter = Collections.emptyList();
+            } else {
+                this.eventFilter = Collections.singletonList(filter);
+            }
-            this.eventFilter = Collections.EMPTY_LIST;
+            this.eventFilter = Collections.emptyList();
-    public Collection getEventFilters() {
+    public Collection<EventFilter> getEventFilters() {
-     * @param eventBundle
+     * @param eventBundle the events.
-     * @param events
+     * @param events the events to process.
-    private void pushEvents(Collection events) {
+    private void pushEvents(Collection<Event> events) {
-        Set removedEvents = new HashSet();
+        Set<ItemId> removedEvents = new HashSet<ItemId>();
-        Set addEvents = new HashSet();
+        Set<Event> addEvents = new HashSet<Event>();
-        for (Iterator it = events.iterator(); it.hasNext(); ) {
-            Event event = (Event) it.next();
+        for (Event event : events) {
-    private static Collection getEventCollection(EventBundle eventBundle) {
-        List evs = new ArrayList();
-        for (Iterator it = eventBundle.getEvents(); it.hasNext();) {
+    private static Collection<Event> getEventCollection(EventBundle eventBundle) {
+        List<Event> evs = new ArrayList<Event>();
+        for (Iterator<Event> it = eventBundle.getEvents(); it.hasNext();) {
