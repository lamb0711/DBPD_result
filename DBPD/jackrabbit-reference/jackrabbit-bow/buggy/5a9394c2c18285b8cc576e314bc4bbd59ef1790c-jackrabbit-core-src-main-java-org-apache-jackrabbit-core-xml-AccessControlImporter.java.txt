JCR-2313 - Improvements to user management (2) [work in progress] 
-> see issue for details

JCR-2333 - ItemImpl#validateTransientItems: Incomplete validation of mandatory child item
-> patch2

JCR-2195 - Provide possibility to import protected items using Session/Workspace import functionality
-> deal with reference properties
-> make import handlers configurable
-> add userimporter

JCR-171 - Make the extraction of Session UserIDs from Subjects configurable
-> extend SecurityManagerConfig and retrieve uid from principal name if configured
     class is present in the subject

JCR-2351 - Make Authorizable.setProperty more noisy in case of failure

JCR-2331 - Configurable DefaultPolicy replacing Initialization within the ACProvider
-> initial steps. remove code that relies on the default-init
-> add TODOs

JCR-2291 - Issues with compiled permissions of ACL provider
-> remove code searching for DENY-read entries in case of default initialization of ac entries

and here and there minor improvement, usage of generics etc....

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@828791 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.ReferenceChangeTracker;
-    private final AccessControlManager acMgr;
-
+    
+    private AccessControlManager acMgr;
+    private boolean initialized = false;
+
-    public AccessControlImporter(JackrabbitSession session, NamePathResolver resolver,
-                                 boolean isWorkspaceImport, int uuidBehavior) throws RepositoryException {
-        super(session, resolver, isWorkspaceImport, uuidBehavior);
-
-        acMgr = session.getAccessControlManager();
+    @Override
+    public boolean init(JackrabbitSession session, NamePathResolver resolver,
+                        boolean isWorkspaceImport, int uuidBehavior,
+                        ReferenceChangeTracker referenceTracker) {
+        if (super.init(session, resolver, isWorkspaceImport, uuidBehavior, referenceTracker)) {
+            if (initialized) {
+                throw new IllegalStateException("Already initialized");
+            }
+            try {
+                acMgr = session.getAccessControlManager();
+                initialized = true;
+            } catch (RepositoryException e) {
+                // initialization failed. ac-import not possible
+            }
+        }
+        return initialized;
+    @Override
+        if (!initialized) {
+            throw new IllegalStateException("Not initialized");
+        }
-                log.warn("AccessControlImporter cannot be started: no ACL for {}.", parent.getParent().getPath());
+                log.warn("AccessControlImporter cannot be started: no ACL for {}.", protectedParent.getParent().getPath());
+    @Override
+    @Override
-            checkStatus(STATUS_ACL, "");
+            checkStatus(STATUS_ACL, "STATUS_ACL expected.");
-            checkStatus(STATUS_AC_FOLDER, "");
+            checkStatus(STATUS_AC_FOLDER, "STATUS_AC_FOLDER expected.");
+    @Override
+    @Override
-    /**
-     * @throws javax.jcr.RepositoryException
-     */
+    @Override
-
