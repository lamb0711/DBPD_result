JCR-638: Support lower-/upper-case functions

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@475677 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.PropertyFunctionQueryNode;
+import org.apache.jackrabbit.core.query.DefaultQueryNodeVisitor;
+        // get property transformation
+        final int[] transform = new int[]{TransformConstants.TRANSFORM_NONE};
+        node.acceptOperands(new DefaultQueryNodeVisitor() {
+            public Object visit(PropertyFunctionQueryNode node, Object data) {
+                if (node.getFunctionName().equals(PropertyFunctionQueryNode.LOWER_CASE)) {
+                    transform[0] = TransformConstants.TRANSFORM_LOWER_CASE;
+                } else if (node.getFunctionName().equals(PropertyFunctionQueryNode.UPPER_CASE)) {
+                    transform[0] = TransformConstants.TRANSFORM_UPPER_CASE;
+                }
+                return data;
+            }
+        }, null);
+
-                    or.add(new TermQuery(new Term(FieldNames.PROPERTIES,
-                            FieldNames.createNamedValue(field, stringValues[i]))), false, false);
+                    Term t = new Term(FieldNames.PROPERTIES,
+                                FieldNames.createNamedValue(field, stringValues[i]));
+                    Query q;
+                    if (transform[0] == TransformConstants.TRANSFORM_UPPER_CASE) {
+                        q = new CaseTermQuery.Upper(t);
+                    } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        q = new CaseTermQuery.Lower(t);
+                    } else {
+                        q = new TermQuery(t);
+                    }
+                    or.add(q, false, false);
-                    or.add(new RangeQuery(lower, upper, true), false, false);
+                    or.add(new RangeQuery(lower, upper, true, transform[0]), false, false);
-                    or.add(new RangeQuery(lower, upper, false), false, false);
+                    or.add(new RangeQuery(lower, upper, false, transform[0]), false, false);
-                    or.add(new RangeQuery(lower, upper, true), false, false);
+                    or.add(new RangeQuery(lower, upper, true, transform[0]), false, false);
-                    query = new WildcardQuery(FieldNames.PROPERTIES, field, stringValues[0]);
+                    query = new WildcardQuery(FieldNames.PROPERTIES, field, stringValues[0], transform[0]);
-                    or.add(new RangeQuery(lower, upper, false), false, false);
+                    or.add(new RangeQuery(lower, upper, false, transform[0]), false, false);
-                    notQuery.add(new TermQuery(t), false, true);
+                    Query q;
+                    if (transform[0] == TransformConstants.TRANSFORM_UPPER_CASE) {
+                        q = new CaseTermQuery.Upper(t);
+                    } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        q = new CaseTermQuery.Lower(t);
+                    } else {
+                        q = new TermQuery(t);
+                    }
+                    notQuery.add(q, false, true);
-                    and.add(new TermQuery(t), true, false);
+                    Query q;
+                    if (transform[0] == TransformConstants.TRANSFORM_UPPER_CASE) {
+                        q = new CaseTermQuery.Upper(t);
+                    } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        q = new CaseTermQuery.Lower(t);
+                    } else {
+                        q = new TermQuery(t);
+                    }
+                    and.add(q, true, false);
+    public Object visit(PropertyFunctionQueryNode node, Object data) {
+        return data;
+    }
+
