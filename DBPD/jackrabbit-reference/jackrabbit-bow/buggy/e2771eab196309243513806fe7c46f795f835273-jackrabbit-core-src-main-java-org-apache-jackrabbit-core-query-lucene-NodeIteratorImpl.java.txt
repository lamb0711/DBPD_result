JCR-890: concurrent read-only access to a session

Turn Query.execute() and related methods into SessionOperations

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983909 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.session.SessionContext;
+import org.apache.jackrabbit.core.session.SessionOperation;
+    /**
+     * Component context of the current session
+     */
+    protected final SessionContext sessionContext;
+
-    /** The index for the default selector withing {@link #scoreNodes} */
+    /** The index for the default selector within {@link #scoreNodes} */
-    /** ItemManager to turn UUIDs into Node instances */
-    protected final ItemManager itemMgr;
-
-     * @param itemMgr       the <code>ItemManager</code> to turn UUIDs into
-     *                      <code>Node</code> instances.
+     * @param sessionContext component context of the current session
-    NodeIteratorImpl(ItemManager itemMgr,
-                     ScoreNodeIterator scoreNodes,
-                     int selectorIndex) {
-        this.itemMgr = itemMgr;
+    NodeIteratorImpl(
+            SessionContext sessionContext, ScoreNodeIterator scoreNodes,
+            int selectorIndex) {
+        this.sessionContext = sessionContext;
-        // reset
-        next = null;
-        while (next == null && scoreNodes.hasNext()) {
-            ScoreNode[] sn = scoreNodes.nextScoreNodes();
-            try {
-                next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
-            } catch (RepositoryException e) {
-                log.warn("Exception retrieving Node with UUID: "
-                        + sn[selectorIndex].getNodeId() + ": " + e.toString());
-                // try next
-                invalid++;
-            }
+        try {
+            sessionContext.getSessionState().perform(new FetchNext());
+        } catch (RepositoryException e) {
+            log.warn("Failed to fetch next node", e);
+    private class FetchNext implements SessionOperation<Object> {
+
+        public Object perform(SessionContext context) {
+            next = null; // reset
+
+            ItemManager itemMgr = context.getItemManager();
+            while (next == null && scoreNodes.hasNext()) {
+                ScoreNode[] sn = scoreNodes.nextScoreNodes();
+                try {
+                    next = (NodeImpl) itemMgr.getItem(
+                            sn[selectorIndex].getNodeId());
+                } catch (RepositoryException e) {
+                    log.warn("Failed to retrieve query result node "
+                            + sn[selectorIndex].getNodeId(), e);
+                    // try next
+                    invalid++;
+                }
+            }
+
+            return this;
+        }
+
+    }
+
