JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeInfo;
+import org.apache.jackrabbit.spi.NodeInfo;
+     * @see RepositoryService#getItemInfos(SessionInfo, NodeId)
+     */
+    public Iterator getItemInfos(SessionInfo sessionInfo, NodeId nodeId) throws ItemNotFoundException, RepositoryException {
+        // set of properties to be retrieved
+        DavPropertyNameSet nameSet = new DavPropertyNameSet();
+        nameSet.add(ItemResourceConstants.JCR_NAME);
+        nameSet.add(ItemResourceConstants.JCR_INDEX);
+        nameSet.add(ItemResourceConstants.JCR_PARENT);
+        nameSet.add(ItemResourceConstants.JCR_PRIMARYNODETYPE);
+        nameSet.add(ItemResourceConstants.JCR_MIXINNODETYPES);
+        nameSet.add(ItemResourceConstants.JCR_REFERENCES);
+        nameSet.add(ItemResourceConstants.JCR_UUID);
+        nameSet.add(ItemResourceConstants.JCR_PATH);
+        nameSet.add(DavPropertyName.RESOURCETYPE);
+
+        DavMethodBase method = null;
+        try {
+            String uri = getItemUri(nodeId, sessionInfo);
+            method = new PropFindMethod(uri, nameSet, DEPTH_1);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length < 1) {
+                throw new ItemNotFoundException("Unable to retrieve the node with id " + nodeId);
+            }
+
+            MultiStatusResponse nodeResponse = null;
+            List childResponses = new ArrayList();
+            for (int i = 0; i < responses.length; i++) {
+                if (isSameResource(uri, responses[i])) {
+                    nodeResponse = responses[i];
+                } else {
+                    childResponses.add(responses[i]);
+                }
+            }
+
+            if (nodeResponse == null) {
+                throw new ItemNotFoundException("Unable to retrieve the node " + nodeId);
+            }
+
+            DavPropertySet propSet = nodeResponse.getProperties(DavServletResponse.SC_OK);
+            Object type = propSet.get(DavPropertyName.RESOURCETYPE).getValue();
+            if (type == null) {
+                // the given id points to a Property instead of a Node
+                throw new ItemNotFoundException("No node for id " + nodeId);
+            }
+
+            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+
+            NodeId parentId = getParentId(propSet, sessionInfo);
+            NodeId id = uriResolver.buildNodeId(parentId, nodeResponse, sessionInfo.getWorkspaceName());
+            NodeInfoImpl nInfo = new NodeInfoImpl(id, parentId, propSet, resolver);
+            if (propSet.contains(ItemResourceConstants.JCR_REFERENCES)) {
+                HrefProperty refProp = new HrefProperty(propSet.get(ItemResourceConstants.JCR_REFERENCES));
+                Iterator hrefIter = refProp.getHrefs().iterator();
+                while(hrefIter.hasNext()) {
+                    String propertyHref = hrefIter.next().toString();
+                    PropertyId propertyId = uriResolver.getPropertyId(propertyHref, sessionInfo);
+                    nInfo.addReference(propertyId);
+                }
+            }
+
+            List infos = new ArrayList(responses.length);
+            infos.add(nInfo);
+
+            for (Iterator it = childResponses.iterator(); it.hasNext();) {
+                MultiStatusResponse resp = (MultiStatusResponse) it.next();
+                DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
+                if (childProps.contains(DavPropertyName.RESOURCETYPE) &&
+                    childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
+                    // any other resource type than default (empty) is represented by a node item
+                    parentId = getParentId(childProps, sessionInfo);
+                    id = uriResolver.buildNodeId(parentId, resp, sessionInfo.getWorkspaceName());
+                    nInfo = new NodeInfoImpl(id, parentId, childProps, resolver);
+                    if (childProps.contains(ItemResourceConstants.JCR_REFERENCES)) {
+                        HrefProperty refProp = new HrefProperty(childProps.get(ItemResourceConstants.JCR_REFERENCES));
+                        Iterator hrefIter = refProp.getHrefs().iterator();
+                        while(hrefIter.hasNext()) {
+                            String propertyHref = hrefIter.next().toString();
+                            PropertyId propertyId = uriResolver.getPropertyId(propertyHref, sessionInfo);
+                            nInfo.addReference(propertyId);
+                        }
+                    }
+                    infos.add(nInfo);
+                } else {
+                    PropertyId childId = uriResolver.buildPropertyId(nInfo.getId(), resp, sessionInfo.getWorkspaceName());
+                    nInfo.addPropertyId(childId);
+                    // TODO: due to missing 'value/values' property PropertyInfo cannot be built
+                }
+            }
+            return infos.iterator();
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } catch (MalformedPathException e) {
+            throw new RepositoryException(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
+    }
+
+    /**
