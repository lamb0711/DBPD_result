- invalidating a NodeEntry must also invalidate the ChildNodeEntries collection in order to get informed about reordering of the entries.

- comparing ItemInfo.getPath to HierarchyEntry.getPath must use the 'workspace' path of the latter and not the current path present in the transient space, which differs in case of a moved item.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@518930 13f79535-47bb-0310-9956-ffa450edef68

-            throw new NoSuchItemStateException(e.getMessage(), e);
+            throw new NoSuchItemStateException(e.getMessage());
-            throw new NoSuchItemStateException(e.getMessage(), e);
+            throw new NoSuchItemStateException(e.getMessage());
-            throw new ItemStateException(e.getMessage(), e);
+            throw new ItemStateException(e.getMessage());
-            throw new NoSuchItemStateException(e.getMessage(), e);
+            throw new NoSuchItemStateException(e.getMessage());
-            throw new NoSuchItemStateException(e.getMessage(), e);
+            throw new NoSuchItemStateException(e.getMessage());
-            throw new ItemStateException(e.getMessage(), e);
+            throw new ItemStateException(e.getMessage());
-            throw new ItemStateException(e.getMessage(), e);
+            throw new ItemStateException(e.getMessage());
-            throw new NoSuchItemStateException(e.getMessage(), e);
+            throw new NoSuchItemStateException(e.getMessage());
-            throw new NoSuchItemStateException(e.getMessage(), e);
+            throw new NoSuchItemStateException(e.getMessage());
-            throw new ItemStateException(e.getMessage(), e);
+            throw new ItemStateException(e.getMessage());
-        } else if (parent.isAvailable() && parent.getStatus() != Status.INVALIDATED) {
+        } else if (parent.isAvailable() && parent.getStatus() == Status.EXISTING) {
-                log.warn("Internal error", e);
+                log.warn("Internal error", e.getMessage());
-                log.warn("Internal error", e);
+                log.warn("Internal error", e.getMessage());
-               log.warn("Internal error", e);
+               log.warn("Internal error", e.getMessage());
-        if (entry.getParent().isAvailable() && entry.getStatus() != Status.INVALIDATED) {
-            NodeState parentState = null;
+        NodeEntry parent = entry.getParent();
+        if (parent.isAvailable() && parent.getStatus() == Status.EXISTING) {
-                parentState = entry.getParent().getNodeState();
+                NodeState parentState = parent.getNodeState();
-                }
-                else {
+                } else {
-                log.warn("Internal error", e);
+                log.warn("Internal error", e.getMessage());
-                log.warn("Internal error", e);
+                log.warn("Internal error", e.getMessage());
-                log.warn("Internal error", e);
+                log.warn("Internal error", e.getMessage());
-        if (!info.getPath().equals(entry.getPath())) {
+        if (!info.getPath().equals(entry.getWorkspacePath())) {
-}
+}
