JCR-RMI: Applying patch sent by Felix:
"I have some more adaptions for the JCR-RMI value implementation:
 StatefullValueAdapter needs read/writeObject as does BinaryValue.
 On the other hand SerialValue does not need it."

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@170807 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+ * <p>
+ * This class implements {@link #readObject(ObjectInputStream)} and
+ * {@link #writeObject(ObjectOutputStream)} methods to (de-)serialize the
+ * data.
-    private final InputStream stream;
+    private InputStream stream;
-}
+
+    /**
+     * Writes the contents of the underlying stream to the
+     * <code>ObjectOutputStream</code> by first copying to an internal byte
+     * array.
+     *
+     * @param out The <code>ObjectOutputStream</code> to where the binary
+     *      data is copied.
+     *
+     * @throws IOException If an error occurrs writing the binary data.
+     * @throws OutOfMemoryError If not enouhg memory is available to store the
+     *      binary data in the internal byte array.
+     */
+    private void writeObject(ObjectOutputStream out) throws IOException {
+        // read the input into a byte array - limited by memory available !!
+        ByteArrayOutputStream bos = 
+            new ByteArrayOutputStream(stream.available());
+        byte[] buf = new byte[2048];
+        int rd = 0;
+        while ((rd = stream.read(buf)) >= 0) {
+            bos.write(buf, 0, rd);
+        }
+        
+        // stream the data to the object output
+        out.writeInt(bos.size());
+        out.write(bos.toByteArray());
+    }
+    
+    /**
+     * Reads the binary data from the <code>ObjectInputStream</code> into an
+     * internal byte array, which is then provided through a
+     * <code>ByteArrayInputStream</code>.
+     *
+     * @param in The <code>ObjectInputStream</code> from where to get the
+     *      binary data.
+     *
+     * @throws IOException If an error occurrs reading the binary data.
+     * @throws OutOfMemoryError If not enouhg memory is available to store the
+     *      binary data in the internal byte array.
+     */
+    private void readObject(ObjectInputStream in) throws IOException {
+        int size = in.readInt();
+        byte[] buf = new byte[size];
+        in.readFully(buf);
+        stream = new ByteArrayInputStream(buf);
+    }
+
+}
