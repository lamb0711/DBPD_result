JCR-1538: [patch] add toString for NodeImpl and PropertyImpl

Type-specific toString() on all ItemImpl descendants

Use the toString() method instead of safeGetPath() in diagnostics.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@698402 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Property;
+import javax.jcr.nodetype.ItemDefinition;
-import javax.jcr.nodetype.PropertyDefinition;
-                String msg;
-                        msg = transientState.getId()
-                            + ": the item cannot be saved because it has been modified externally.";
-                        log.debug(msg);
-                        throw new InvalidItemStateException(msg);
+                        throw new InvalidItemStateException(
+                                "Item cannot be saved because it has been"
+                                + "modified externally: " + this);
-                        msg = transientState.getId()
-                            + ": the item cannot be saved because it has been deleted externally.";
-                        log.debug(msg);
-                        throw new InvalidItemStateException(msg);
+                        throw new InvalidItemStateException(
+                                "Item cannot be saved because it has been"
+                                + "deleted externally: " + this);
-                        msg = safeGetJCRPath()
-                            + ": the item cannot be saved; it seems to have been removed externally.";
-                        log.debug(msg);
-                        throw new InvalidItemStateException(msg);
+                        throw new InvalidItemStateException(
+                                "Item cannot be saved; it seems to have been"
+                                + "removed externally: " + this);
-                        log.debug("unexpected state status (" + transientState.getStatus() + ")");
+                        log.warn("Unexpected item state status: "
+                                + transientState.getStatus() + " of " + this);
-                    msg = safeGetJCRPath() + ": cannot save a new item.";
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
+                    throw new RepositoryException(
+                            "Cannot save a new item: " + this);
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved because it has been modified externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
+                    throw new InvalidItemStateException(
+                            "Item cannot be saved because it has been"
+                            + " modified externally: " + this);
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved because it has been deleted externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
+                    throw new InvalidItemStateException(
+                            "Item cannot be saved because it has been"
+                            + " deleted externally:" + this);
-                    msg = safeGetJCRPath()
-                        + ": the item cannot be saved; it seems to have been removed externally.";
-                    log.debug(msg);
-                    throw new InvalidItemStateException(msg);
+                    throw new InvalidItemStateException(
+                            "Item cannot be saved; it seems to have been"
+                            + " removed externally: " + this);
-                    log.debug("unexpected state status (" + state.getStatus() + ")");
+                    log.warn("Unexpected item state status:"
+                            + state.getStatus() + " of " + this);
-        Path.Element thisName = getPrimaryPath().getNameElement();
-
-        // check if protected
-        if (isNode()) {
-            NodeImpl node = (NodeImpl) this;
-            // check if this is the root node
-            if (node.getDepth() == 0) {
-                String msg = safeGetJCRPath() + ": cannot remove root node";
-                log.debug(msg);
-                throw new RepositoryException(msg);
-            }
-
-            NodeDefinition def = node.getDefinition();
-            // check protected flag
-            if (!noChecks && def.isProtected()) {
-                String msg = safeGetJCRPath() + ": cannot remove a protected node";
-                log.debug(msg);
-                throw new ConstraintViolationException(msg);
-            }
-        } else {
-            PropertyImpl prop = (PropertyImpl) this;
-            PropertyDefinition def = prop.getDefinition();
-            // check protected flag
-            if (!noChecks && def.isProtected()) {
-                String msg = safeGetJCRPath() + ": cannot remove a protected property";
-                log.debug(msg);
-                throw new ConstraintViolationException(msg);
-            }
+        // check if this is the root node
+        if (getDepth() == 0) {
+            throw new RepositoryException("Cannot remove the root node");
-        // verify that parent node is checked-out
-        if (!noChecks && !parentNode.internalIsCheckedOut()) {
-            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag of parent node
-        if (!noChecks && parentNode.getDefinition().isProtected()) {
-            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
+            // check if protected
+            ItemDefinition definition;
+            if (isNode()) {
+                definition = ((Node) this).getDefinition();
+            } else {
+                definition = ((Property) this).getDefinition();
+            }
+            if (definition.isProtected()) {
+                throw new ConstraintViolationException(
+                        "Cannot remove a protected item: " + this);
+            }
+
+            // verify that parent node is checked-out and not protected
+            if (!parentNode.internalIsCheckedOut()) {
+                throw new VersionException(
+                        "Cannot remove a child of a checked-in node: " + this);
+            }
+            if (parentNode.getDefinition().isProtected()) {
+                throw new ConstraintViolationException(
+                        "Cannot remove a child of a protected node: " + this);
+            }
+
+            // check lock status
+        Path.Element thisName = getPrimaryPath().getNameElement();
-                String msg = safeGetJCRPath() + ": unable to update item.";
-                log.debug(msg);
-                throw new RepositoryException(msg, e);
+                throw new RepositoryException(
+                        "Unable to update item: " + this, e);
-                    String msg = safeGetJCRPath() + ": cannot refresh a new item.";
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
+                    throw new RepositoryException(
+                            "Cannot refresh a new item: " + this);
-                    log.debug("unexpected state status (" + transientState.getStatus() + ")");
+                    log.warn("Unexpected item state status:"
+                            + transientState.getStatus() + " of " + this);
-     * Returns a string with the type and ({@link #safeGetJCRPath() safe}) path
-     * of this item for use in diagnostic output.
+     * Returns the({@link #safeGetJCRPath() safe}) path of this item for use
+     * in diagnostic output.
-     * @return item path
+     * @return "/path/to/item"
-        if (isNode()) {
-            return "node " + safeGetJCRPath();
-        } else {
-            return "property " + safeGetJCRPath();
-        }
+        return safeGetJCRPath();
