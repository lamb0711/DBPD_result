JCR-106: Minimize use of fields in lucene index

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161425 13f79535-47bb-0310-9956-ffa450edef68

-                if (propState.isMultiValued()) {
-                    // multi valued
-                    if (values.length == 1) {
-                        // also index as if single value property
-                        addValue(doc, values[0], propState.getName(), false);
-                    }
-                    for (int i = 0; i < values.length; i++) {
-                        addValue(doc, values[i], propState.getName(), true);
-                    }
-                } else {
-                    // single value
-                    // do we have a value at all?
-                    if (values.length == 1) {
-                        addValue(doc, values[0], propState.getName(), false);
-                    }
+                for (int i = 0; i < values.length; i++) {
+                    addValue(doc, values[i], propState.getName());
+                }
+                if (values.length > 1) {
+                    // real multi-valued
+                    addMVPName(doc, propState.getName());
+     * Adds a {@link FieldNames#MVP} field to <code>doc</code> with the resolved
+     * <code>name</code> using the internal search index namespace mapping.
+     * @param doc the lucene document.
+     * @param name the name of the multi-value property.
+     */
+    private void addMVPName(Document doc, QName name) {
+        try {
+            String propName = name.toJCRName(mappings);
+            doc.add(new Field(FieldNames.MVP, propName, false, true, false));
+        } catch (NoPrefixDeclaredException e) {
+            // will never happen, prefixes are created dynamically
+        }
+    }
+
+    /**
-     * @param multiValued if <code>true</code> the value is treated as a
-     *   multivalued.
-    private void addValue(Document doc, InternalValue value, QName name, boolean multiValued) {
+    private void addValue(Document doc, InternalValue value, QName name) {
-            StringBuffer tmp = new StringBuffer();
-            tmp.append(mappings.getPrefix(name.getNamespaceURI()));
-            tmp.append(':');
-            if (multiValued) {
-                tmp.append(FieldNames.MVP_PREFIX);
-            }
-            tmp.append(name.getLocalName());
-            fieldName = tmp.toString();
-        } catch (NamespaceException e) {
+            fieldName = name.toJCRName(mappings);
+        } catch (NoPrefixDeclaredException e) {
-        doc.add(new Field(fieldName,
-            internalValue.toString(),
+        doc.add(new Field(FieldNames.PROPERTIES,
+            FieldNames.createNamedValue(fieldName, internalValue.toString()),
-        doc.add(new Field(fieldName,
-                DateField.timeToString(millis),
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, DateField.timeToString(millis)),
-        doc.add(new Field(fieldName,
-                DoubleField.doubleToString(doubleVal),
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, DoubleField.doubleToString(doubleVal)),
-        doc.add(new Field(fieldName,
-                LongField.longToString(longVal),
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, LongField.longToString(longVal)),
-        doc.add(new Field(fieldName,
-                uuid,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, uuid),
-        doc.add(new Field(fieldName,
-                pathString,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, pathString),
-        doc.add(new Field(fieldName,
-                stringValue,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, stringValue),
-        doc.add(new Field(fieldName,
-                normValue,
+        doc.add(new Field(FieldNames.PROPERTIES,
+                FieldNames.createNamedValue(fieldName, normValue),
