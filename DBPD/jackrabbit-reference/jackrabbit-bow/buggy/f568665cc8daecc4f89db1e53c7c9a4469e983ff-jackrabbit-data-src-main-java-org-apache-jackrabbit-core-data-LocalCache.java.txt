JCR-3805 - LocalCache doesn't build up properly in JDK 7
Patch from Shashank Gupta.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1621933 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
-import javax.jcr.RepositoryException;
-
-     * @throws IOException
-     * @throws java.lang.ClassNotFoundException
-            double cachePurgeResizeFactor, AsyncUploadCache asyncUploadCache) throws IOException,
-            ClassNotFoundException {
+            double cachePurgeResizeFactor, AsyncUploadCache asyncUploadCache) {
-            "cachePurgeTrigFactor =[{}], cachePurgeResizeFactor =[{}],  cachePurgeTrigFactorSize =[{}], cachePurgeResizeFactorSize =[{}]",
+            "cachePurgeTrigFactor =[{}], cachePurgeResizeFactor =[{}],  " +
+            "cachePurgeTrigFactorSize =[{}], cachePurgeResizeFactorSize =[{}]",
-                (cachePurgeTrigFactor * maxSizeInBytes), (cachePurgeResizeFactor * maxSizeInBytes) });
+                (cachePurgeTrigFactor * maxSizeInBytes), 
+                (cachePurgeResizeFactor * maxSizeInBytes) });
-
-        new Thread(new CacheBuildJob()).start();
+        long startTime = System.currentTimeMillis();
+        ArrayList<File> allFiles = new ArrayList<File>();
+        Iterator<File> it = FileUtils.iterateFiles(directory, null, true);
+        while (it.hasNext()) {
+            File f = it.next();
+            allFiles.add(f);
+        }
+        long t1 = System.currentTimeMillis();
+        LOG.debug("Time taken to recursive [{}] took [{}] sec",
+            allFiles.size(), ((t1 - startTime) / 1000));
+        Collections.sort(allFiles, new Comparator<File>() {
+            public int compare(File o1, File o2) {
+                long l1 = o1.lastModified(), l2 = o2.lastModified();
+                return l1 < l2 ? -1 : l1 > l2 ? 1 : 0;
+            }
+        });
+        long t2 = System.currentTimeMillis();
+        LOG.debug("Time taken to sort [{}] took [{}] sec",
+            allFiles.size(), ((t2 - t1) / 1000));
+        new Thread(new CacheBuildJob(allFiles)).start();
+
+        List<File> allFiles ;
+        
+        private CacheBuildJob(List<File> allFiles) {
+            this.allFiles = allFiles;
+        }
-            ArrayList<File> allFiles = new ArrayList<File>();
-            Iterator<File> it = FileUtils.iterateFiles(directory, null, true);
-            while (it.hasNext()) {
-                File f = it.next();
-                allFiles.add(f);
-            }
-            long t1 = System.currentTimeMillis();
-            LOG.debug("Time taken to recursive [{}] took [{}] sec",
-                allFiles.size(), ((t1 - startTime) / 1000));
-            Collections.sort(allFiles, new Comparator<File>() {
-                public int compare(File o1, File o2) {
-                    long l1 = o1.lastModified(), l2 = o2.lastModified();
-                    return l1 < l2 ? -1 : l1 > l2 ? 1 : 0;
-                }
-            });
-            long t2 = System.currentTimeMillis();
-            LOG.debug("Time taken to sort [{}] took [{}] sec",
-                allFiles.size(), ((t2 - t1) / 1000));
+            LOG.info("directoryPath = " + dataStorePath);
+            dataStorePath = dataStorePath.replace("\\", "/");
