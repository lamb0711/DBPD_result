- ImportHandler & specialized friends now rely on default SAX2 Namespace support
- Doc/SysViewImportHandler are now processing ignorableWhitespace events

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160189 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.BaseException;
-        String elemName;
-        String nsURI;
-        if (namespaceURI != null && !"".equals(namespaceURI)) {
-            nsURI = namespaceURI;
-            elemName = localName;
-        } else {
-            try {
-                nsURI = QName.fromJCRName(qName, nsContext).getNamespaceURI();
-                elemName = QName.fromJCRName(qName, nsContext).getLocalName();
-            } catch (BaseException e) {
-                // should never happen...
-                String msg = "internal error: failed to parse/resolve element name " + qName;
-                log.debug(msg);
-                throw new SAXException(msg, e);
-            }
-        }
-        if (!NS_SV_URI.equals(nsURI)) {
-            throw new SAXException(new InvalidSerializedDataException("invalid namespace for element in system view xml document: " + nsURI));
+        if (!NS_SV_URI.equals(namespaceURI)) {
+            throw new SAXException(new InvalidSerializedDataException("invalid namespace for element in system view xml document: "
+                    + namespaceURI));
-        if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
+        if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(localName)) {
-                throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attributeof element sv:node"));
+                throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attribute of element sv:node"));
-        } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
+        } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(localName)) {
-                throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attributeof element sv:property"));
+                throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:name attribute of element sv:property"));
-                throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:type attributeof element sv:property"));
+                throw new SAXException(new InvalidSerializedDataException("missing mandatory sv:type attribute of element sv:property"));
-        } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
+        } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(localName)) {
-                    throw new SAXException("error while processing property value",
-                            ioe);
+                    String msg = "error while processing property value "
+                            + currentPropName;
+                    log.debug(msg, ioe);
+                    throw new SAXException(msg, ioe);
-            throw new SAXException(new InvalidSerializedDataException("unexpected element found in system view xml document: " + elemName));
+            throw new SAXException(new InvalidSerializedDataException("unexpected element found in system view xml document: "
+                    + localName));
-    public void endElement(String namespaceURI, String localName, String qName)
+    public void ignorableWhitespace(char ch[], int start, int length)
-        String elemName;
-        if (localName != null && !"".equals(localName)) {
-            elemName = localName;
-        } else {
+        if (currentPropValue != null) {
+            // property value
+
+            // data reported by the ignorableWhitespace event within
+            // sv:value tags is considered part of the value
-                elemName = QName.fromJCRName(qName, nsContext).getLocalName();
-            } catch (BaseException e) {
-                // should never happen...
-                String msg = "internal error: failed to parse/resolve element name " + qName;
-                log.debug(msg);
-                throw new SAXException(msg, e);
+                currentPropValue.append(ch, start, length);
+            } catch (IOException ioe) {
+                throw new SAXException("error while processing property value",
+                        ioe);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void endElement(String namespaceURI, String localName, String qName)
+            throws SAXException {
-        if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
+        if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(localName)) {
-        } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
+        } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(localName)) {
-                    AppendableValue val = (AppendableValue) currentPropValues.get(0);
+                    AppendableValue val =
+                            (AppendableValue) currentPropValues.get(0);
-        } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
+        } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(localName)) {
-            throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + elemName));
+            throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + localName));
