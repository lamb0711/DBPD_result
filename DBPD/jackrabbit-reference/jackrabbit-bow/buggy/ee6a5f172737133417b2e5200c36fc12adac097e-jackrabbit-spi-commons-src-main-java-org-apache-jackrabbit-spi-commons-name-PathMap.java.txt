JCR-2087: Upgrade to Java 5 as the base platform

Generify PathMap (as preparation for work on LockManagerImpl).

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803119 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
-public class PathMap {
+public class PathMap<T> {
-    private final Element root = new Element(PATH_FACTORY.getRootPath().getNameElement());
+    private final Element<T> root =
+        new Element<T>(PATH_FACTORY.getRootPath().getNameElement());
-    public Element map(Path path, boolean exact) {
+    public Element<T> map(Path path, boolean exact) {
-        Element current = root;
+        Element<T> current = root;
-            Element next = current.getChild(elements[i]);
+            Element<T> next = current.getChild(elements[i]);
-    public Element put(Path path, Object obj) {
-        Element element = put(path);
+    public Element<T> put(Path path, T obj) {
+        Element<T> element = put(path);
-    public void put(Path path, Element element) {
+    public void put(Path path, Element<T> element) {
-        Element current = root;
+        Element<T> current = root;
-            Element next = current.getChild(elements[i]);
+            Element<T> next = current.getChild(elements[i]);
-    public Element put(Path path) {
+    public Element<T> put(Path path) {
-        Element current = root;
+        Element<T> current = root;
-            Element next = current.getChild(elements[i]);
+            Element<T> next = current.getChild(elements[i]);
-    public void traverse(ElementVisitor visitor, boolean includeEmpty) {
+    public void traverse(ElementVisitor<T> visitor, boolean includeEmpty) {
-    public final static class Element {
+    public final static class Element<T> {
-        private Element parent;
+        private Element<T> parent;
-        private Map children;
+        private Map<Name, List<Element<T>>> children;
-        private Object obj;
+        private T obj;
-        private Element createChild(Path.Element nameIndex) {
-            Element element = new Element(nameIndex);
+        private Element<T> createChild(Path.Element nameIndex) {
+            Element<T> element = new Element<T>(nameIndex);
-                ArrayList list = (ArrayList) children.get(nameIndex.getName());
+                List<Element<T>> list = children.get(nameIndex.getName());
-                        Element element = (Element) list.get(i);
+                        Element<T> element = list.get(i);
-        private Element getChild(Path.Element nameIndex) {
+        private Element<T> getChild(Path.Element nameIndex) {
-            Element element = null;
+            Element<T> element = null;
-                ArrayList list = (ArrayList) children.get(nameIndex.getName());
+                List<Element<T>> list = children.get(nameIndex.getName());
-                    element = (Element) list.get(index);
+                    element = list.get(index);
-        public void put(Path.Element nameIndex, Element element) {
+        public void put(Path.Element nameIndex, Element<T> element) {
-                children = new HashMap();
+                children = new HashMap<Name, List<Element<T>>>();
-            ArrayList list = (ArrayList) children.get(nameIndex.getName());
+            List<Element<T>> list = children.get(nameIndex.getName());
-                list = new ArrayList();
+                list = new ArrayList<Element<T>>();
-        public Element remove(Path.Element nameIndex) {
+        public Element<T> remove(Path.Element nameIndex) {
-        private Element remove(Path.Element nameIndex, boolean shift,
+        private Element<T> remove(Path.Element nameIndex, boolean shift,
-            ArrayList list = (ArrayList) children.get(nameIndex.getName());
+            List<Element<T>> list = children.get(nameIndex.getName());
-            Element element = (Element) list.set(index, null);
+            Element<T> element = list.set(index, null);
-                    Element sibling = (Element) list.get(i);
+                    Element<T> sibling = list.get(i);
-        public void setChildren(Map children) {
+        public void setChildren(Map<Path.Element, Element<T>> children) {
-            Iterator entries = children.entrySet().iterator();
-            while (entries.hasNext()) {
-                Map.Entry entry = (Map.Entry) entries.next();
-
-                Path.Element nameIndex = (Path.Element) entry.getKey();
-                Element element = (Element) entry.getValue();
-                put(nameIndex, element);
+            for (Map.Entry<Path.Element, Element<T>> entry : children.entrySet()) {
+                put(entry.getKey(), entry.getValue());
-        public Object get() {
+        public T get() {
-        public void set(Object obj) {
+        public void set(T obj) {
-        public void traverse(ElementVisitor visitor, boolean includeEmpty) {
+        public void traverse(ElementVisitor<T> visitor, boolean includeEmpty) {
-                Iterator iter = children.values().iterator();
-                while (iter.hasNext()) {
-                    ArrayList list = (ArrayList) iter.next();
-                    for (int i = 0; i < list.size(); i++) {
-                        Element element = (Element) list.get(i);
+                for (List<Element<T>>list : children.values()) {
+                    for (Element<T> element : list) {
-        public boolean isAncestorOf(Element other) {
-            Element parent = other.parent;
+        public boolean isAncestorOf(Element<T> other) {
+            Element<T> parent = other.parent;
-        public Element getParent() {
+        public Element<T> getParent() {
-        public Iterator getChildren() {
-            ArrayList result = new ArrayList();
-
+        public Iterator<Element<T>> getChildren() {
+            ArrayList<Element<T>> result = new ArrayList<Element<T>>();
-                Iterator iter = children.values().iterator();
-                while (iter.hasNext()) {
-                    ArrayList list = (ArrayList) iter.next();
-                    for (int i = 0; i < list.size(); i++) {
-                        Element element = (Element) list.get(i);
+                for (List<Element<T>> list : children.values()) {
+                    for (Element<T> element : list) {
-        public Element getDescendant(Path relPath, boolean exact) {
+        public Element<T> getDescendant(Path relPath, boolean exact) {
-            Element current = this;
+            Element<T> current = this;
-                Element next = current.getChild(elements[i]);
+                Element<T> next = current.getChild(elements[i]);
-    public interface ElementVisitor {
+    public interface ElementVisitor<T> {
-        void elementVisited(Element element);
+        void elementVisited(Element<T> element);
