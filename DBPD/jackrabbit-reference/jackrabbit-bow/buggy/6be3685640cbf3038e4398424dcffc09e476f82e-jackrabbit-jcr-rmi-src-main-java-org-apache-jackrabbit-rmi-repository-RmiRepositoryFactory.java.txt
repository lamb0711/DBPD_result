JCR-2459: Improved error reporting from JcrUtils.getRepository

Report some more details when failing to access repositories

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@901228 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.rmi.NotBoundException;
+import java.rmi.RemoteException;
+import javax.naming.NamingException;
-            Object parameter = parameters.get(REPOSITORY_URI);
+            URI uri;
-                URI uri = new URI(parameter.toString().trim());
-                String scheme = uri.getScheme();
-                if ("rmi".equalsIgnoreCase(scheme)) {
-                    return getRepository((RemoteRepository) Naming.lookup(
-                            uri.getSchemeSpecificPart()));
-                } else if ("jndi".equalsIgnoreCase(scheme)) {
-                    Hashtable environment = new Hashtable(parameters);
-                    environment.remove(REPOSITORY_URI);
-                    Object value = new InitialContext(environment).lookup(
-                            uri.getSchemeSpecificPart());
-                    if (value instanceof RemoteRepository) {
-                        return getRepository((RemoteRepository) value);
-                    } else {
-                        return null;
-                    }
-                } else {
-                    InputStream stream = uri.toURL().openStream();
-                    try {
-                        Object remote =
-                            new ObjectInputStream(stream).readObject();
-                        if (remote instanceof RemoteRepository) {
-                            return getRepository((RemoteRepository) remote);
-                        } else {
-                            return null;
-                        }
-                    } finally {
-                        stream.close();
-                    }
-                }
-            } catch (Exception e) {
+                uri = new URI(parameters.get(REPOSITORY_URI).toString().trim());
+            } catch (URISyntaxException e) {
+
+            String scheme = uri.getScheme();
+            if ("rmi".equalsIgnoreCase(scheme)) {
+                return getRmiRepository(uri.getSchemeSpecificPart());
+            } else if ("jndi".equalsIgnoreCase(scheme)) {
+                Hashtable environment = new Hashtable(parameters);
+                environment.remove(REPOSITORY_URI);
+                return getJndiRepository(
+                        uri.getSchemeSpecificPart(), environment);
+            } else {
+                try {
+                    return getUrlRepository(uri.toURL());
+                } catch (MalformedURLException e) {
+                    return null;
+                }
+            }
+    private Repository getUrlRepository(URL url) throws RepositoryException {
+        try {
+            InputStream stream = url.openStream();
+            try {
+                Object remote = new ObjectInputStream(stream).readObject();
+                if (remote instanceof RemoteRepository) {
+                    return getRepository((RemoteRepository) remote);
+                } else {
+                    throw new RepositoryException(
+                            "The resource at URL " + url
+                            + " is not a remote repository stub: "
+                            + remote);
+                }
+            } finally {
+                stream.close();
+            }
+        } catch (ClassNotFoundException e) {
+            throw new RepositoryException(
+                    "The resource at URL " + url
+                    + " requires a class that is not available", e);
+        } catch (IOException e) {
+            throw new RepositoryException(
+                    "Failed to read the resource at URL " + url, e);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private Repository getJndiRepository(String name, Hashtable environment)
+            throws RepositoryException {
+        try {
+            Object value = new InitialContext(environment).lookup(name);
+            if (value instanceof RemoteRepository) {
+                return getRepository((RemoteRepository) value);
+            } else {
+                throw new RepositoryException(
+                        "The JNDI resource " + name
+                        + " is not a remote repository stub: " + value);
+            }
+        } catch (NamingException e) {
+            throw new RepositoryException(
+                    "Failed to look up the JNDI resource " + name, e);
+        }
+    }
+
+    private Repository getRmiRepository(String name)
+            throws RepositoryException {
+        try {
+            Object value = Naming.lookup(name);
+            if (value instanceof RemoteRepository) {
+                return getRepository((RemoteRepository) value);
+            } else {
+                throw new RepositoryException(
+                        "The RMI resource " + name
+                        + " is not a remote repository stub: " + value);
+            }
+        } catch (NotBoundException e) {
+            throw new RepositoryException(
+                    "RMI resource " + name + " not found", e);
+        } catch (MalformedURLException e) {
+            throw new RepositoryException(
+                    "Invalid RMI name: " + name, e);
+        } catch (RemoteException e) {
+            throw new RepositoryException(
+                    "Failed to look up the RMI resource " + name, e);
+        }
+    }
+
