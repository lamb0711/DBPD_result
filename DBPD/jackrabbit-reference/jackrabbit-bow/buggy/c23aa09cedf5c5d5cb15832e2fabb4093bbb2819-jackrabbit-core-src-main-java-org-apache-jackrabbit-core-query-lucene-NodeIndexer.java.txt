JCR-202: Add configuration options for search manager

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@530696 13f79535-47bb-0310-9956-ffa450edef68

+     * The default boost for a lucene field: 1.0f.
+     */
+    protected static final float DEFAULT_BOOST = 1.0f;
+
+    /**
+     * The indexing configuration or <code>null</code> if none is available.
+     */
+    protected IndexingConfiguration indexingConfig;
+
+    /**
-                          ItemStateManager stateProvider,
-                          NamespaceMappings mappings,
-                          TextExtractor extractor) {
+                       ItemStateManager stateProvider,
+                       NamespaceMappings mappings,
+                       TextExtractor extractor) {
+     * Sets the indexing configuration for this node indexer.
+     *
+     * @param config the indexing configuration.
+     */
+    public void setIndexingConfiguration(IndexingConfiguration config) {
+        this.indexingConfig = config;
+    }
+
+    /**
+        doc.setBoost(getNodeBoost());
+
-                addBinaryValue(doc, fieldName, internalValue);
+                if (isIndexed(name)) {
+                    addBinaryValue(doc, fieldName, internalValue);
+                }
-                addBooleanValue(doc, fieldName, internalValue);
+                if (isIndexed(name)) {
+                    addBooleanValue(doc, fieldName, internalValue);
+                }
-                addCalendarValue(doc, fieldName, internalValue);
+                if (isIndexed(name)) {
+                    addCalendarValue(doc, fieldName, internalValue);
+                }
-                addDoubleValue(doc, fieldName, internalValue);
+                if (isIndexed(name)) {
+                    addDoubleValue(doc, fieldName, internalValue);
+                }
-                addLongValue(doc, fieldName, internalValue);
+                if (isIndexed(name)) {
+                    addLongValue(doc, fieldName, internalValue);
+                }
-                addReferenceValue(doc, fieldName, internalValue);
+                if (isIndexed(name)) {
+                    addReferenceValue(doc, fieldName, internalValue);
+                }
-                addPathValue(doc, fieldName, internalValue);
+                if (isIndexed(name)) {
+                    addPathValue(doc, fieldName, internalValue);
+                }
-                // do not fulltext index jcr:uuid String
-                boolean tokenize = !name.equals(QName.JCR_UUID);
-                addStringValue(doc, fieldName, internalValue, tokenize);
+                if (isIndexed(name)) {
+                    // never fulltext index jcr:uuid String
+                    if (name.equals(QName.JCR_UUID)) {
+                        addStringValue(doc, fieldName, internalValue,
+                                false, false, DEFAULT_BOOST);
+                    } else {
+                        addStringValue(doc, fieldName, internalValue,
+                                true, isIncludedInNodeIndex(name),
+                                getPropertyBoost(name));
+                    }
+                }
-                addNameValue(doc, fieldName, internalValue);
+                // jcr:primaryType and jcr:mixinTypes are required for correct
+                // node type resolution in queries
+                if (isIndexed(name) ||
+                        name.equals(QName.JCR_PRIMARYTYPE) ||
+                        name.equals(QName.JCR_MIXINTYPES)) {
+                    addNameValue(doc, fieldName, internalValue);
+                }
-        addStringValue(doc, fieldName, internalValue, true);
+        addStringValue(doc, fieldName, internalValue, true, true, DEFAULT_BOOST);
-    protected void addStringValue(Document doc, String fieldName, Object internalValue, boolean tokenized) {
+    protected void addStringValue(Document doc, String fieldName,
+                                  Object internalValue, boolean tokenized) {
+        addStringValue(doc, fieldName, internalValue, tokenized, true, DEFAULT_BOOST);
+    }
+
+    /**
+     * Adds the string value to the document both as the named field and
+     * optionally for full text indexing if <code>tokenized</code> is
+     * <code>true</code>.
+     *
+     * @param doc                The document to which to add the field
+     * @param fieldName          The name of the field to add
+     * @param internalValue      The value for the field to add to the
+     *                           document.
+     * @param tokenized          If <code>true</code> the string is also
+     *                           tokenized and fulltext indexed.
+     * @param includeInNodeIndex If <code>true</code> the string is also
+     *                           tokenized and added to the node scope fulltext
+     *                           index.
+     * @param boost              the boost value for this string field.
+     */
+    protected void addStringValue(Document doc, String fieldName,
+                                  Object internalValue, boolean tokenized,
+                                  boolean includeInNodeIndex, float boost) {
-            // also create fulltext index of this value
-            doc.add(createFulltextField(stringValue));
-            doc.add(new Field(fieldName, stringValue,
+            Field f = new Field(fieldName, stringValue,
-                    Field.TermVector.NO));
+                    Field.TermVector.NO);
+            f.setBoost(boost);
+            doc.add(f);
+
+            if (includeInNodeIndex) {
+                // also create fulltext index of this value
+                doc.add(createFulltextField(stringValue));
+            }
+
+    /**
+     * Returns <code>true</code> if the property with the given name should be
+     * indexed.
+     *
+     * @param propertyName name of a property.
+     * @return <code>true</code> if the property should be fulltext indexed;
+     *         <code>false</code> otherwise.
+     */
+    protected boolean isIndexed(QName propertyName) {
+        if (indexingConfig == null) {
+            return true;
+        } else {
+            return indexingConfig.isIndexed(node, propertyName);
+        }
+    }
+
+    /**
+     * Returns <code>true</code> if the property with the given name should also
+     * be added to the node scope index.
+     *
+     * @param propertyName the name of a property.
+     * @return <code>true</code> if it should be added to the node scope index;
+     *         <code>false</code> otherwise.
+     */
+    protected boolean isIncludedInNodeIndex(QName propertyName) {
+        if (indexingConfig == null) {
+            return true;
+        } else {
+            return indexingConfig.isIncludedInNodeScopeIndex(node, propertyName);
+        }
+    }
+
+    /**
+     * Returns the boost value for the given property name.
+     *
+     * @param propertyName the name of a property.
+     * @return the boost value for the given property name.
+     */
+    protected float getPropertyBoost(QName propertyName) {
+        if (indexingConfig == null) {
+            return DEFAULT_BOOST;
+        } else {
+            return indexingConfig.getPropertyBoost(node, propertyName);
+        }
+    }
+
+    /**
+     * @return the boost value for this {@link #node} state.
+     */
+    protected float getNodeBoost() {
+        if (indexingConfig == null) {
+            return DEFAULT_BOOST;
+        } else {
+            return indexingConfig.getNodeBoost(node);
+        }
+    }
