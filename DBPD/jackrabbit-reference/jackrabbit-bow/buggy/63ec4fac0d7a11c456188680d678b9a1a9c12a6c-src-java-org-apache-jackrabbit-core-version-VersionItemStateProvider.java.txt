redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.ReferenceMap;
-import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.jackrabbit.core.virtual.*;
+import org.apache.jackrabbit.core.util.uuid.UUID;
+import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider;
+import org.apache.jackrabbit.core.virtual.VirtualNodeState;
+import org.apache.jackrabbit.core.virtual.VirtualPropertyState;
-import org.apache.commons.collections.ReferenceMap;
-import javax.jcr.RepositoryException;
-import javax.jcr.nodetype.ConstraintViolationException;
-import java.util.Map;
+import javax.jcr.RepositoryException;
+import java.util.Map;
+     *
-    public VersionItemStateProvider(VersionManager vMgr, NodeTypeManagerImpl ntMgr, String rootId, String parentId)  throws RepositoryException {
+    public VersionItemStateProvider(VersionManager vMgr, NodeTypeManagerImpl ntMgr, String rootId, String parentId) throws RepositoryException {
-    //--------------------------------------------------< ItemStateProvider >---
-
+    //-----------------------------------------------------< ItemStateManager >
-     * @see ItemStateProvider#hasItemState(org.apache.jackrabbit.core.ItemId)
+     * @see ItemStateManager#hasItemState(org.apache.jackrabbit.core.ItemId)
-     * @see ItemStateProvider#getItemState(org.apache.jackrabbit.core.ItemId)
+     * @see ItemStateManager#getItemState(ItemId)
-     * virtual item state provider do not have attics.
-     *
-     * @throws NoSuchItemStateException always
+     * @see ItemStateManager#getNodeReferences(NodeId)
-    public ItemState getItemStateInAttic(ItemId id) throws NoSuchItemStateException {
-        // never has states in attic
-        throw new NoSuchItemStateException(id.toString());
+    public NodeReferences getNodeReferences(NodeId targetId)
+            throws NoSuchItemStateException, ItemStateException {
+
+        //@todo return node references
+        throw new NoSuchItemStateException(targetId.getUUID());
-     * virtual item state provider do not have attics.
-     *
-     * @return <code>false</code>
+     * @see ItemStateManager#beginUpdate
-    public boolean hasItemStateInAttic(ItemId id) {
-        // never has states in attic
-        return false;
+    public UpdateOperation beginUpdate() throws ItemStateException {
+        throw new ItemStateException("Update not available");
-
-     * @see VirtualItemStateProvider#isVirtualRoot(org.apache.jackrabbit.core.ItemId)
+     * @see VirtualItemStateProvider#isVirtualRoot(ItemId)
-     * @see org.apache.jackrabbit.core.virtual.VirtualItemStateProvider#getVirtualRootId()
+     * @see VirtualItemStateProvider#getVirtualRootId()
-     * @see VirtualItemStateProvider#getNodeState(org.apache.jackrabbit.core.NodeId)
+     * @see VirtualItemStateProvider#getNodeState(NodeId)
-        if (state==null) {
+        if (state == null) {
-                    state = createNodeState(
-                            parent,
+                    state = createNodeState(parent,
-                    state = createNodeState(
-                            parent,
+                    state = createNodeState(parent,
-     * @see VirtualItemStateProvider#hasPropertyState(org.apache.jackrabbit.core.PropertyId)
+     * @see VirtualItemStateProvider#hasPropertyState(PropertyId)
-     * @see VirtualItemStateProvider#getPropertyState(org.apache.jackrabbit.core.PropertyId)
+     * @see VirtualItemStateProvider#getPropertyState(PropertyId)
-     * @see VirtualItemStateProvider#createPropertyState(org.apache.jackrabbit.core.virtual.VirtualNodeState, org.apache.jackrabbit.core.QName, int, boolean)
+     * @see VirtualItemStateProvider#createPropertyState(VirtualNodeState, QName, int, boolean)
-     * @see VirtualItemStateProvider#createNodeState(org.apache.jackrabbit.core.virtual.VirtualNodeState, org.apache.jackrabbit.core.QName, String, org.apache.jackrabbit.core.QName)
+     * @see VirtualItemStateProvider#createNodeState(VirtualNodeState, QName, String, QName)
+     *
-     * mapps a frozen node
+     * maps a frozen node
+     *
-        if (node.getFrozenUUID()!=null) {
+        if (node.getFrozenUUID() != null) {
-        for (int i=0; i<props.length; i++) {
+        for (int i = 0; i < props.length; i++) {
-        for (int i=0; i<nodes.length; i++) {
+        for (int i = 0; i < nodes.length; i++) {
