JCR-1104 : JSR 283 support (security work in progress)

- user API: add distinction between declared and indirect group membership
- user Impl: move group membership to authorizable node type
- javadoc
- minor fixes/improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@651624 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Value;
- * The access control policy defined by this provider has the following
+ * <p/>
+ * This provider creates upon initialization the following 2 groups:
+ * <ul>
+ * <li>User administrator</li>
+ * <li>Group administrator</li>
+ * </ul>
+ *
+ * The default access control policy defined by this provider has the following
- * TODO describe policy.
+ * <ul>
+ * <li>everybody has READ permission to all items,</li>
+ *
+ * <li>every known user is allowed to modify it's own properties except for
+ * her/his group membership,</li>
+ *
+ * <li>members of the 'User administrator' group are allowed to create, modify
+ * and remove those users whose node representation is within the subtree
+ * defined by the node representation of the editing user,</li>
+ *
+ * <li>members of the 'Group administrator' group are allowed to create, modify
+ * and remove groups,</li>
+ *
+ * <li>group membership can only be edited by members of the 'Group administrator'
+ * and the 'User administrator' group. The range of users that can be added
+ * as member to any Group is limited to those that are editable according to
+ * the restrictions described above for the 'User administrator'.</li>
+ * </ul>
+ *
+ * TODO: allow for editing of additional ac that extends the default permission evaluted by this provided.
-        private final boolean isUserAdmin;
-        private final boolean isGroupAdmin;
+
+        private boolean isUserAdmin;
+        private boolean isGroupAdmin;
-
-            observationMgr.addEventListener(this, events, GROUPS_PATH, true, null, null, false);
+            observationMgr.addEventListener(this, events, USERS_PATH, true, null, null, false);
+            //
+                /*
+                 below the user-tree
+                 - determine position of target relative to the node of the editing user
+                 - determine if the editing user is user/group-admin
+                 - special treatment for rep:groups property
+                 */
+                    boolean isGroupProp = P_GROUPS.equals(path.getNameElement().getName());
+                    // only user-admin is allowed to modify users.
+                    // for group membership (rep:groups) group-admin is required
+                    // in addition.
+                    boolean requiredGroups = isUserAdmin;
+                    if (requiredGroups && isGroupProp) {
+                        requiredGroups = isGroupAdmin;
+                    }
-                            authN is same node as userNode. 2 cases to distinguish
+                            authN is same node as userNode. 3 cases to distinguish
+                            3) special treatment for rep:group property which can
+                               only be modified by group-administrators
-                            if (isUserAdmin) {
-                                // principals contain 'user-admin' -> user can modify
-                                // any item below the user-node.
+                            if (requiredGroups) {
+                                // principals contain 'user-admin'
+                                // -> user can modify items below the user-node except rep:group.
+                                // principals contains 'user-admin' + 'group-admin'
+                                // -> user can modify rep:group property as well.
+                                    // grant WRITE privilege
+                                    // note: ac-read/modification is not included
-                            } else if (userNode.isSame(node)) {
+                            } else if (userNode.isSame(node) && (!isGroupProp || isGroupAdmin)) {
+                                // except for the rep:group property.
-                            In either case user-admin group is required to have write
-                            permission.
+                            In either case user-admin group-membership is
+                            required in order to get write permission.
+                            group-admin group-membership is required in addition
+                            if rep:groups is the target item.
-                            if (isUserAdmin) {
+                            if (requiredGroups) {
+                                    // grant WRITE privilege
+                                    // note: ac-read/modification is not included
-                - in addition the following special condition must be checked:
-
-                if the target id is 'rep:members' the user MUST be member of that
-                the containing group in order to have WRITE privilege.
-                this required in order to make sure the group-admin cannot
-                modify the members of some other groups e.g. administrators.
-                    if (P_MEMBERS.equals(path.getNameElement().getName())) {
-                        if (isMember(userNode, path)) {
-                            perms |= (Permission.SET_PROPERTY | Permission.REMOVE_PROPERTY);
-                        }
-                    } else {
-                        perms = Permission.ALL;
-                        if (calcPrivs) {
-                            privs |= PrivilegeRegistry.WRITE;
-                        }
+                    perms = Permission.ALL;
+                    if (calcPrivs) {
+                        privs |= PrivilegeRegistry.WRITE;
-
-                    if ("rep:members".equals(Text.getName(evPath))) {
-                        // TODO: add better evaluation.
+                    String repGroups = session.getJCRName(UserConstants.P_GROUPS);
+                    // TODO: add better evaluation.
+                    if (repGroups.equals(Text.getName(evPath)) &&
+                            userNode.getPath().equals(Text.getRelativeParent(evPath, 1))) {
+                        // recalculate the is...Admin flags
+                        switch (ev.getType()) {
+                            case Event.PROPERTY_REMOVED:
+                                isUserAdmin = false;
+                                isGroupAdmin = false;
+                                break;
+                            case Event.PROPERTY_ADDED:
+                            case Event.PROPERTY_CHANGED:
+                                // TODO: improve
+                                Value[] vs = session.getProperty(evPath).getValues();
+                                String princName = session.getJCRName(P_PRINCIPAL_NAME);
+                                for (int i = 0; i < vs.length; i++) {
+                                    Node groupNode = session.getNodeByUUID(vs[i].getString());
+                                    String pName = groupNode.getProperty(princName).getString();
+                                    if (userAdminGroup.equals(pName)) {
+                                        isUserAdmin = true;
+                                    } else if (groupAdminGroup.equals(pName)) {
+                                        isGroupAdmin = true;
+                                    }
+                                }
+                                break;
+                            // default: other events are not relevant.
+                        }
+                        // invalidate the cached results
