re-implemented handling of values on import to allow import of large binary properties 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160072 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.io.Reader;
-            InternalValue[] iva = pi.getValues();
+            TextValue[] tva = pi.getValues();
-            if (iva.length == 1) {
+            if (tva.length == 1) {
-            // convert InternalValue objects to Value objects using this
-            // session's namespace mappings
-            Value[] va = new Value[iva.length];
-            // check whether type conversion is required
-            if (def.getRequiredType() != PropertyType.UNDEFINED
-                    && def.getRequiredType() != type) {
-                // type doesn't match required type,
-                // type conversion required
-                // FIXME: awkward code
-                for (int i = 0; i < iva.length; i++) {
-                    // convert InternalValue to Value of required type
-                    Value v =
-                            ValueHelper.convert(iva[i].toJCRValue(nsContext),
-                                    def.getRequiredType());
-                    // convert Value to InternalValue using
+            // convert serialized values to Value objects
+            Value[] va = new Value[tva.length];
+            int targetType = def.getRequiredType();
+            if (targetType == PropertyType.UNDEFINED) {
+                if (type == PropertyType.UNDEFINED) {
+                    targetType = PropertyType.STRING;
+                } else {
+                    targetType = type;
+                }
+            }
+            for (int i = 0; i < tva.length; i++) {
+                TextValue tv = tva[i];
+
+                if (targetType == PropertyType.NAME ||
+                        targetType == PropertyType.PATH) {
+                    // NAME and PATH require special treatment because
+                    // they depend on the current namespace context
+                    // of the xml document
+
+                    // retrieve serialized value
+                    String serValue;
+                    try {
+                        serValue = tv.retrieve();
+                    } catch (IOException ioe) {
+                        String msg = "failed to retrieve serialized value";
+                        log.debug(msg, ioe);
+                        throw new RepositoryException(msg, ioe);
+                    }
+
+                    // convert serialized value to InternalValue using
-                    InternalValue ival = InternalValue.create(v, nsContext);
-                    // convert InternalValue back to Value using this
+                    InternalValue ival =
+                            InternalValue.create(serValue, targetType, nsContext);
+                    // convert InternalValue to Value using this
-                }
-            } else {
-                // no type conversion required:
-                // convert InternalValue to Value using this
-                // session's namespace mappings
-                for (int i = 0; i < iva.length; i++) {
-                    va[i] = iva[i].toJCRValue(session.getNamespaceResolver());
+                } else if (targetType == PropertyType.BINARY) {
+                    // deserialize BINARY type using Reader
+                    try {
+                        Reader reader = tv.reader();
+                        va[i] = ValueHelper.deserialize(reader, targetType, false);
+                    } catch (IOException ioe) {
+                        String msg = "failed to deserialize binary value";
+                        log.debug(msg, ioe);
+                        throw new RepositoryException(msg, ioe);
+                    }
+                } else {
+                    // all other types
+
+                    // retrieve serialized value
+                    String serValue;
+                    try {
+                        serValue = tv.retrieve();
+                    } catch (IOException ioe) {
+                        String msg = "failed to retrieve serialized value";
+                        log.debug(msg, ioe);
+                        throw new RepositoryException(msg, ioe);
+                    }
+
+                    va[i] = ValueHelper.deserialize(serValue, targetType, true);
