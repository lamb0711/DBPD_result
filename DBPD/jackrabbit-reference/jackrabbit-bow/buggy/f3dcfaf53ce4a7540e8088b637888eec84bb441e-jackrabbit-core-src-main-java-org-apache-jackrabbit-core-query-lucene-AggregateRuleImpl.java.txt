JCR-1169 Distribution of commons classes (adjust jackrabbit-core)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@590014 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.IllegalNameException;
-import org.apache.jackrabbit.name.UnknownPrefixException;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.PathBuilder;
+import org.apache.jackrabbit.conversion.IllegalNameException;
+import org.apache.jackrabbit.conversion.MalformedPathException;
+import org.apache.jackrabbit.conversion.NameResolver;
+import javax.jcr.NamespaceException;
-     * A namespace resolver for parsing QNames in the configuration.
+     * A name resolver for parsing QNames in the configuration.
-    private final NamespaceResolver nsResolver;
+    private final NameResolver resolver;
-    private final QName nodeTypeName;
+    private final Name nodeTypeName;
-     * @param nsResolver the namespace resolver for parsing QNames within the
-     *                   config.
+     * @param resolver   the name resolver for parsing Names within the config.
-     * @throws UnknownPrefixException if a node type contains an unknown
+     * @throws NamespaceException if a node type contains an unknown
-                      NamespaceResolver nsResolver,
+                      NameResolver resolver,
-            throws MalformedPathException, IllegalNameException, UnknownPrefixException {
-        this.nsResolver = nsResolver;
+            throws MalformedPathException, IllegalNameException, NamespaceException {
+        this.resolver = resolver;
-     * @throws UnknownPrefixException if the node type contains an unknown
+     * @throws NamespaceException if the node type contains an unknown
-    private QName getNodeTypeName(Node config)
-            throws IllegalNameException, UnknownPrefixException {
+    private Name getNodeTypeName(Node config)
+            throws IllegalNameException, NamespaceException {
-        return NameFormat.parse(ntString, nsResolver);
+        return resolver.getQName(ntString);
-     * @throws UnknownPrefixException if the node type contains an unknown
+     * @throws NamespaceException if the node type contains an unknown
-            throws MalformedPathException, IllegalNameException, UnknownPrefixException {
+            throws MalformedPathException, IllegalNameException, NamespaceException {
-                QName ntName = null;
+                Name ntName = null;
-                    ntName = NameFormat.parse(ntAttr.getNodeValue(), nsResolver);
+                    ntName = resolver.getQName(ntAttr.getNodeValue());
-                Path.PathBuilder builder = new Path.PathBuilder();
+                PathBuilder builder = new PathBuilder();
-                        builder.addLast(new QName("", "*"));
+                        builder.addLast(NameConstants.ANY_NAME);
-                        builder.addLast(NameFormat.parse(elements[j], nsResolver));
+                        builder.addLast(resolver.getQName(elements[j]));
-        private final QName nodeTypeName;
+        private final Name nodeTypeName;
-        private Rule(Path pattern, QName nodeTypeName) {
+        private Rule(Path pattern, Name nodeTypeName) {
-                Path.PathElement[] elements = pattern.getElements();
+                Path.Element[] elements = pattern.getElements();
-                        QName name = hmgr.getName(nodeState.getId());
+                        Name name = hmgr.getName(nodeState.getId());
-            QName currentName = pattern.getElement(offset).getName();
+            Name currentName = pattern.getElements()[offset].getName();
