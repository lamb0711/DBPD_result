JCR-1169 Distribution of commons classes (adjust jackrabbit-core)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@590014 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.conversion.MalformedPathException;
+import org.apache.jackrabbit.conversion.NameResolver;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.name.NameFactoryImpl;
+import org.apache.jackrabbit.name.PathBuilder;
+import org.apache.jackrabbit.name.PathFactoryImpl;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.PathFactory;
+import javax.jcr.RepositoryException;
+import javax.jcr.NamespaceException;
+    private static final NameFactory NAME_FACTORY = NameFactoryImpl.getInstance();
+    private static final PathFactory PATH_FACTORY = PathFactoryImpl.getInstance();
+
-     * QName for 'fn:not'
+     * Name for 'fn:not'
-    static final QName FN_NOT = new QName(NS_FN_URI, "not");
+    static final Name FN_NOT = NAME_FACTORY.create(NS_FN_URI, "not");
-     * QName for 'fn:lower-case'
+     * Name for 'fn:lower-case'
-    static final QName FN_LOWER_CASE = new QName(NS_FN_URI, "lower-case");
+    static final Name FN_LOWER_CASE = NAME_FACTORY.create(NS_FN_URI, "lower-case");
-     * QName for 'fn:upper-case'
+     * Name for 'fn:upper-case'
-    static final QName FN_UPPER_CASE = new QName(NS_FN_URI, "upper-case");
+    static final Name FN_UPPER_CASE = NAME_FACTORY.create(NS_FN_URI, "upper-case");
-     * QName for 'not' as defined in XPath 1.0 (no prefix)
+     * Name for 'not' as defined in XPath 1.0 (no prefix)
-    static final QName FN_NOT_10 = new QName("", "not");
+    static final Name FN_NOT_10 = NAME_FACTORY.create("", "not");
-     * QName for true function.
+     * Name for true function.
-    static final QName FN_TRUE = new QName("", "true");
+    static final Name FN_TRUE = NAME_FACTORY.create("", "true");
-     * QName for false function.
+     * Name for false function.
-    static final QName FN_FALSE = new QName("", "false");
+    static final Name FN_FALSE = NAME_FACTORY.create("", "false");
-     * QName for position function.
+     * Name for position function.
-    static final QName FN_POSITION = new QName("", "position");
+    static final Name FN_POSITION = NAME_FACTORY.create("", "position");
-     * QName for element function.
+     * Name for element function.
-    static final QName FN_ELEMENT = new QName("", "element");
+    static final Name FN_ELEMENT = NAME_FACTORY.create("", "element");
-     * QName for the full position function including bracket
+     * Name for the full position function including bracket
-    static final QName FN_POSITION_FULL = new QName("", "position()");
+    static final Name FN_POSITION_FULL = NAME_FACTORY.create("", "position()");
-     * QName for jcr:xmltext
+     * Name for jcr:xmltext
-    static final QName JCR_XMLTEXT = new QName(QName.NS_JCR_URI, "xmltext");
+    static final Name JCR_XMLTEXT = NAME_FACTORY.create(Name.NS_JCR_URI, "xmltext");
-     * QName for last function.
+     * Name for last function.
-    static final QName FN_LAST = new QName("", "last");
+    static final Name FN_LAST = NAME_FACTORY.create("", "last");
-     * QName for first function.
+     * Name for first function.
-    static final QName FN_FIRST = new QName("", "first");
+    static final Name FN_FIRST = NAME_FACTORY.create("", "first");
-     * QName for xs:dateTime
+     * Name for xs:dateTime
-    static final QName XS_DATETIME = new QName("http://www.w3.org/2001/XMLSchema", "dateTime");
+    static final Name XS_DATETIME = NAME_FACTORY.create("http://www.w3.org/2001/XMLSchema", "dateTime");
-     * QName for jcr:like
+     * Name for jcr:like
-    static final QName JCR_LIKE = new QName(QName.NS_JCR_URI, "like");
+    static final Name JCR_LIKE = NAME_FACTORY.create(Name.NS_JCR_URI, "like");
-     * QName for jcr:deref
+     * Name for jcr:deref
-    static final QName JCR_DEREF = new QName(QName.NS_JCR_URI, "deref");
+    static final Name JCR_DEREF = NAME_FACTORY.create(Name.NS_JCR_URI, "deref");
-     * QName for jcr:contains
+     * Name for jcr:contains
-    static final QName JCR_CONTAINS = new QName(QName.NS_JCR_URI, "contains");
+    static final Name JCR_CONTAINS = NAME_FACTORY.create(Name.NS_JCR_URI, "contains");
-     * QName for jcr:root
+     * Name for jcr:root
-    static final QName JCR_ROOT = new QName(QName.NS_JCR_URI, "root");
+    static final Name JCR_ROOT = NAME_FACTORY.create(Name.NS_JCR_URI, "root");
-     * QName for jcr:score
+     * Name for jcr:score
-    static final QName JCR_SCORE = new QName(QName.NS_JCR_URI, "score");
+    static final Name JCR_SCORE = NAME_FACTORY.create(Name.NS_JCR_URI, "score");
-     * QName for rep:similar
+     * Name for rep:similar
-    static final QName REP_SIMILAR = new QName(QName.NS_REP_URI, "similar");
+    static final Name REP_SIMILAR = NAME_FACTORY.create(Name.NS_REP_URI, "similar");
-     * QName for rep:spellcheck
+     * Name for rep:spellcheck
-    static final QName REP_SPELLCHECK = new QName(QName.NS_REP_URI, "spellcheck");
+    static final Name REP_SPELLCHECK = NAME_FACTORY.create(Name.NS_REP_URI, "spellcheck");
-     * The {@link NamespaceResolver} in use
+     * The {@link NameResolver} in use
-    private final NamespaceResolver resolver;
+    private final NameResolver resolver;
-    private Path.PathBuilder tmpRelPath;
+    private PathBuilder tmpRelPath;
-     * @param resolver  the namespace resolver to use.
+     * @param resolver  the name resolver to use.
-                              NamespaceResolver resolver,
+                              NameResolver resolver,
-     * @param resolver  the namespace resolver to use.
+     * @param resolver  the name resolver to use.
-                                            NamespaceResolver resolver,
+                                            NameResolver resolver,
-     * @param resolver to resolve QNames.
+     * @param resolver to resolve <code>Name</code>s.
-    public static String toString(QueryRootNode root, NamespaceResolver resolver)
+    public static String toString(QueryRootNode root, NameResolver resolver)
-                            tmpRelPath = new Path.PathBuilder();
+                            tmpRelPath = new PathBuilder();
-                        QName nt = NameFormat.parse(ntName, resolver);
+                        Name nt = resolver.getQName(ntName);
+                    } catch (NamespaceException e) {
+                        exceptions.add(new InvalidQueryException("Not a valid name: " + ntName));
-                    node.addPathElement(relPath.getElement(i));
+                    node.addPathElement(relPath.getElements()[i]);
-     * Assigns a QName to one of the follwing QueryNodes:
+     * Assigns a Name to one of the follwing QueryNodes:
-                    QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
+                    Name name = decode(resolver.getQName(child.getValue()));
-                        Path.PathElement element = Path.PathElement.create(name);
+                        Path.Element element = PATH_FACTORY.createElement(name);
-                        ts.addPathElement(Path.PathElement.create(name));
+                        ts.addPathElement(PATH_FACTORY.createElement(name));
-                } catch (NameException e) {
+                } catch (RepositoryException e) {
-                            Path.PathElement.create(RelationQueryNode.STAR_NAME_TEST));
+                            PATH_FACTORY.createElement(RelationQueryNode.STAR_NAME_TEST));
-                            Path.PathElement.create(RelationQueryNode.STAR_NAME_TEST));
+                            PATH_FACTORY.createElement(RelationQueryNode.STAR_NAME_TEST));
-            if (NameFormat.format(FN_NOT, resolver).equals(fName)
-                    || NameFormat.format(FN_NOT_10, resolver).equals(fName)) {
+            if (resolver.getJCRName(FN_NOT).equals(fName)
+                    || resolver.getJCRName(FN_NOT_10).equals(fName)) {
-            } else if (NameFormat.format(XS_DATETIME, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(XS_DATETIME).equals(fName)) {
-            } else if (NameFormat.format(JCR_CONTAINS, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(JCR_CONTAINS).equals(fName)) {
-            } else if (NameFormat.format(JCR_LIKE, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(JCR_LIKE).equals(fName)) {
-            } else if (NameFormat.format(FN_TRUE, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(FN_TRUE).equals(fName)) {
-            } else if (NameFormat.format(FN_FALSE, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(FN_FALSE).equals(fName)) {
-            } else if (NameFormat.format(FN_POSITION, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(FN_POSITION).equals(fName)) {
-                        rel.addPathElement(Path.PathElement.create(FN_POSITION_FULL));
+                        rel.addPathElement(PATH_FACTORY.createElement(FN_POSITION_FULL));
-            } else if (NameFormat.format(FN_FIRST, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(FN_FIRST).equals(fName)) {
-            } else if (NameFormat.format(FN_LAST, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(FN_LAST).equals(fName)) {
-            } else if (NameFormat.format(JCR_DEREF, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(JCR_DEREF).equals(fName)) {
-                                QName name = null;
+                                Name name = null;
-                                    name = ISO9075.decode(NameFormat.parse(value, resolver));
+                                    name = decode(resolver.getQName(value));
-            } else if (NameFormat.format(JCR_SCORE, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(JCR_SCORE).equals(fName)) {
-            } else if (NameFormat.format(FN_LOWER_CASE, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(FN_LOWER_CASE).equals(fName)) {
-            } else if (NameFormat.format(FN_UPPER_CASE, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(FN_UPPER_CASE).equals(fName)) {
-            } else if (NameFormat.format(REP_SIMILAR, resolver).equals(fName)) {
+            } else if (resolver.getJCRName(REP_SIMILAR).equals(fName)) {
-            } else if (NameFormat.format(REP_SPELLCHECK, resolver).equals(fName)
+            } else if (resolver.getJCRName(REP_SPELLCHECK).equals(fName)
-                        rel.addPathElement(Path.PathElement.create(QName.JCR_PRIMARYTYPE));
+                        rel.addPathElement(PATH_FACTORY.createElement(NameConstants.JCR_PRIMARYTYPE));
-                    QName name = NameFormat.parse(fName + "()", resolver);
-                    Path.PathElement element = Path.PathElement.create(name);
+                    Name name = resolver.getQName(fName + "()");
+                    Path.Element element = PATH_FACTORY.createElement(name);
-                    QName name = NameFormat.parse(fName + "()", resolver);
+                    Name name = resolver.getQName(fName + "()");
-        } catch (NoPrefixDeclaredException e) {
+        } catch (NamespaceException e) {
-            QName name = ISO9075.decode(NameFormat.parse(propName, resolver));
+            Name name = decode(resolver.getQName(propName));
+        } catch (NamespaceException e) {
+            exceptions.add(new InvalidQueryException("Illegal name: " + child.getValue()));
-     *             QName foo
+     *             Name foo
+
+    private static Name decode(Name name) {
+        String decodedLN = ISO9075.decode(name.getLocalName());
+        if (decodedLN.equals(name.getLocalName())) {
+            return name;
+        } else {
+            return NAME_FACTORY.create(name.getNamespaceURI(), decodedLN);
+        }
+    }
