JCR-1576  Remove RepositoryService exists()  
JCR-1577  Remove RepositoryService.getRootId()  
JCR-1405  SPI: Introduce NodeInfo.getChildInfos()  

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@654826 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.NodeInfo;
-import org.apache.jackrabbit.spi.NodeId;
-import org.apache.jackrabbit.spi.PropertyId;
+import org.apache.jackrabbit.spi.ChildInfo;
+import org.apache.jackrabbit.spi.NodeId;
+import org.apache.jackrabbit.spi.NodeInfo;
+import org.apache.jackrabbit.spi.PropertyId;
-import java.util.List;
+import java.io.Serializable;
-import java.io.Serializable;
+import java.util.List;
+     * The list of {@link ChildInfo}s of this node info.
+     */
+    private final List childInfos;
+
+    /**
+            final Iterator childInfos = nodeInfo.getChildInfos();
-                    });
+                    },
+                    ((childInfos == null) ? null :
+                    new Iterator() {
+                        public boolean hasNext() {
+                            return childInfos.hasNext();
+                        }
+                        public Object next() {
+                            ChildInfo cInfo = (ChildInfo) childInfos.next();
+                            if (cInfo instanceof Serializable) {
+                                return cInfo;
+                            } else {
+                                return new ChildInfoImpl(cInfo.getName(), cInfo.getUniqueID(), cInfo.getIndex());
+                            }
+                        }
+                        public void remove() {
+                            throw new UnsupportedOperationException();
+                        }
+                    })
+            );
+     * @param childInfos      the child infos of this node or <code>null</code>.
-                        Iterator references, Iterator propertyIds) {
-         this(path, id, index, primaryTypeName, mixinNames, references, propertyIds);
+                        Iterator references, Iterator propertyIds,
+                        Iterator childInfos) {
+         this(path, id, index, primaryTypeName, mixinNames, references, propertyIds, childInfos);
-                        Name[] mixinNames, Iterator references, Iterator propertyIds) {
+                        Name[] mixinNames, Iterator references, Iterator propertyIds,
+                        Iterator childInfos) {
+        if (childInfos == null) {
+            this.childInfos = null;
+        } else {
+            this.childInfos = new ArrayList();
+            while (childInfos.hasNext()) {
+                this.childInfos.add(childInfos.next());
+            }
+        }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Iterator getChildInfos() {
+        return (childInfos == null) ? null : childInfos.iterator();
+    }
