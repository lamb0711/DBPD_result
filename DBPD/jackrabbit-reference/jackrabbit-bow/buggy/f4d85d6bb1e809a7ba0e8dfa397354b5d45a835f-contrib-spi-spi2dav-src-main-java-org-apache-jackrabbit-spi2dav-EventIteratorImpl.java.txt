work in progress

- ChangeLog: add target (item to be saved)
- TransientItemStateManager: changing itemstate from new to existing => needs to connect to overlayed state
- TransientISFactory move out of TransientISM
- RepositoryServiceImpl: simplify execution of wsp-operations
- Initial draft for observation
- WorkspaceManager: seperate notification of events resulting from transient modifications.
- WorkspaceManager: don't report events from wsp-operations as external mods.
- IteratorHelper; add EMPTY constant
- Event: add constant for ALL events

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@451313 13f79535-47bb-0310-9956-ffa450edef68

-    private final ElementIterator eventElementIterator;
+    private ElementIterator bundleIterator;
+    private ElementIterator eventElementIterator;
-    public EventIteratorImpl(Element eventBundleElement, URIResolver uriResolver, SessionInfo sessionInfo) {
-        if (!DomUtil.matches(eventBundleElement, ObservationConstants.XML_EVENTBUNDLE, ObservationConstants.NAMESPACE)) {
-            throw new IllegalArgumentException("eventbundle element expected.");
-        }
+    public EventIteratorImpl(Element eventDiscoveryElem, URIResolver uriResolver, SessionInfo sessionInfo) {
-        eventElementIterator = DomUtil.getChildren(eventBundleElement, ObservationConstants.XML_EVENT, ObservationConstants.NAMESPACE);
-        retrieveNext();
+        bundleIterator = DomUtil.getChildren(eventDiscoveryElem, ObservationConstants.XML_EVENTBUNDLE, ObservationConstants.NAMESPACE);;
+        retrieveNextEventIterator();
+        retrieveNextEvent();
-        retrieveNext();
+        retrieveNextEvent();
-            next();
+            nextEvent();
-        eventElementIterator.remove();
+        throw new UnsupportedOperationException("Remove not implemented.");
-        return eventElementIterator.hasNext();
+        return next != null;
-    /**
-     *
-     */
-    private void retrieveNext() {
+    private void retrieveNextEvent() {
-        while (next == null && eventElementIterator.hasNext()) {
-            Element evElem = eventElementIterator.nextElement();
-            try {
-                next = new EventImpl(evElem, uriResolver, sessionInfo);
-            } catch (RepositoryException e) {
-                log.error("Unexpected error while creating event.", e);
-            } catch (DavException e) {
-                log.error("Unexpected error while creating event.", e);
+        if (eventElementIterator != null) {
+            while (next == null && eventElementIterator.hasNext()) {
+                Element evElem = eventElementIterator.nextElement();
+                try {
+                    next = new EventImpl(evElem, uriResolver, sessionInfo);
+                } catch (RepositoryException e) {
+                    log.error("Unexpected error while creating event.", e);
+                } catch (DavException e) {
+                    log.error("Unexpected error while creating event.", e);
+                }
+
+            if (!eventElementIterator.hasNext()) {
+                retrieveNextEventIterator();
+            }
+        }
+    }
+
+    private void retrieveNextEventIterator() {
+        eventElementIterator = null;
+        if (bundleIterator.hasNext()) {
+            Element bundleElem = bundleIterator.nextElement();
+            eventElementIterator =  DomUtil.getChildren(bundleElem, ObservationConstants.XML_EVENT, ObservationConstants.NAMESPACE);
