- working on JCR-1339 : better support for Map. It is important to define an ID field in the class used for the Map elements. This ID will be used as a key in the map. 
- Rename ManagedHashMap into ManageableHashMap in ordrer to follow the same naming convention.
- Now, it is not necessary to define the ElementClassName if the Collection or the Map are parametrized like List<MyClass>

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@646938 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.impl.ManageableHashMap;
- * Utility class used to instantiate {@link ManageableCollection}
+ * Utility class used to instantiate {@link ManageableObjects}
+ * A ManageableObjects is a Collection or a Map
-public class ManageableCollectionUtil {
+public class ManageableObjectsUtil {
-     * Instantiate a new {@link ManageableCollection}
-     * @param manageableCollectionClassName The manageable collection class name
-     * @return an emtpy created {@link ManageableCollection}
+     * Instantiate a new {@link ManageableObjects}
+     * @param manageableObjectsClassName The manageable objects class name
+     * @return an emtpy created {@link ManageableObjects}
-    public static ManageableCollection getManageableCollection(String manageableCollectionClassName) {
+    public static ManageableObjects getManageableObjects(String manageableObjectsClassName) {
-            return (ManageableCollection) ReflectionUtils.newInstance(manageableCollectionClassName);
+            return (ManageableObjects) ReflectionUtils.newInstance(manageableObjectsClassName);
-                                           + manageableCollectionClassName,
+                                           + manageableObjectsClassName,
-     * Instantiate a new {@link ManageableCollection}
-     * @param collectionClass the collection class name
+     * Instantiate a new {@link ManageableObjects}
+     * @param manageableObjectsClass the collection class name
-    public static ManageableCollection getManageableCollection(Class collectionClass) {
+    public static ManageableObjects getManageableObjects(Class manageableObjectsClass) {
-            if (collectionClass.equals(ArrayList.class)) {
+            if (manageableObjectsClass.equals(ArrayList.class)) {
-            if (collectionClass.equals(Vector.class)) {
+            if (manageableObjectsClass.equals(Vector.class)) {
-            if (collectionClass.equals(HashSet.class)) {
+            if (manageableObjectsClass.equals(HashSet.class)) {
-            if (collectionClass.equals(Collection.class) || collectionClass.equals(List.class)) {
+            if (manageableObjectsClass.equals(Collection.class) || manageableObjectsClass.equals(List.class)) {
-            if (collectionClass.equals(Set.class)) {
+            if (manageableObjectsClass.equals(Set.class)) {
-            Object collection = collectionClass.newInstance();
-            if (!(collection instanceof ManageableCollection)) {
+            if (manageableObjectsClass.equals(Map.class) || manageableObjectsClass.equals(HashMap.class)) {
+            	return new ManageableHashMap();
+            }
+
+            Object manageableObjects = manageableObjectsClass.newInstance();
+            if (!(manageableObjects instanceof ManageableObjects)) {
-                                               + collectionClass.getName());
+                                               + manageableObjectsClass.getName());
-                return (ManageableCollection) collection;
+                return (ManageableObjects) manageableObjects;
-            throw new JcrMappingException("Cannot create manageable collection", e);
+            throw new JcrMappingException("Cannot create manageable objects (Collection or Map)", e);
-     * Convert a java Collection object into a {@link ManageableCollection}.
-     * Until now, only the following class are supported :
-     * Collection, List, ArrayList, Vector
+     * Convert a java Collection or a Map into a {@link ManageableObjects}.
-     * If you need a Map, you have to write your own {@link ManageableCollection}.
-     * @param object the java collection or Map
-     * @return The converted {@link ManageableCollection}
+     * The elements of a Map should have an ID field (see the field descriptor definition).
+     * @param object the collection or the Map objet
+     * @return The converted {@link ManageableObjects}
-    public static ManageableCollection getManageableCollection(Object object) {
+    public static ManageableObjects getManageableObjects(Object object) {
-            if (object instanceof ManageableCollection) {
-                return (ManageableCollection) object;
+            if (object instanceof ManageableObjects) {
+                return (ManageableObjects) object;
+
+            if (object.getClass().equals(Map.class)
+            	|| object.getClass().equals(HashMap.class)	){
+                return new ManageableHashMap((Map)object);
+            }
+
