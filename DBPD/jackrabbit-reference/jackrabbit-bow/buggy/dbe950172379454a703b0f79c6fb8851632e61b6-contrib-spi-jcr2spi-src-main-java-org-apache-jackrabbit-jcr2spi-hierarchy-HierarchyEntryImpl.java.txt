remove ItemStateException (and subclasses) and replace their usage with RepositoryException and subclasses respectively

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520315 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ItemStateException;
-import org.apache.jackrabbit.jcr2spi.state.NoSuchItemStateException;
-import org.apache.jackrabbit.jcr2spi.state.StaleItemStateException;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.ItemNotFoundException;
-     * @throws NoSuchItemStateException if the referenced <code>ItemState</code>
-     *                                  does not exist.
-     * @throws ItemStateException       if an error occurs.
+     * @throws ItemNotFoundException if the referenced <code>ItemState</code>
+     * does not exist.
+     * @throws RepositoryException if an error occurs.
-    ItemState resolve() throws NoSuchItemStateException, ItemStateException {
+    ItemState resolve() throws ItemNotFoundException, RepositoryException {
-            } catch (NoSuchItemStateException e) {
+            } catch (ItemNotFoundException e) {
+            } catch (RepositoryException e) {
+                e.printStackTrace();
-     * @throws NoSuchItemStateException if the referenced <code>ItemState</code>
-     *                                  does not exist.
-     * @throws ItemStateException       if an error occurs.
+     * @throws ItemNotFoundException if the referenced <code>ItemState</code>
+     * does not exist.
+     * @throws RepositoryException if another error occurs.
-    abstract ItemState doResolve() throws NoSuchItemStateException, ItemStateException;
+    abstract ItemState doResolve() throws ItemNotFoundException, RepositoryException;
-    public ItemState getItemState() throws NoSuchItemStateException, ItemStateException {
+    public ItemState getItemState() throws ItemNotFoundException, RepositoryException {
-    public void revert() throws ItemStateException {
+    public void revert() throws RepositoryException {
-            } catch (NoSuchItemStateException e) {
+            } catch (ItemNotFoundException e) {
-            } catch (ItemStateException e) {
+            } catch (RepositoryException e) {
-    public void transientRemove() throws ItemStateException {
+    public void transientRemove() throws RepositoryException {
-                throw new ItemStateException("Cannot transiently remove an ItemState with status " + Status.getName(state.getStatus()));
+                throw new RepositoryException("Cannot transiently remove an ItemState with status " + Status.getName(state.getStatus()));
-    public void collectStates(ChangeLog changeLog, boolean throwOnStale) throws StaleItemStateException {
+    public void collectStates(ChangeLog changeLog, boolean throwOnStale) throws InvalidItemStateException {
-            throw new StaleItemStateException(msg);
+            throw new InvalidItemStateException(msg);
