JCR-2108: JSR 283 Observation   (work in progress)

- adjust jcr-server


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@781295 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.xml.Namespace;
+import java.util.Map;
+    /**
+     * Element representing the 'nodemoved' event type.
+     * @see javax.jcr.observation.Event#NODE_MOVED
+     */
+    private static final String EVENT_NODEMOVED = "nodemoved";
+
+    /**
+     * Element representing the 'persist' event type.
+     * @see javax.jcr.observation.Event#PERSIST
+     */
+    private static final String EVENT_PERSIST = "persist";
+
+     * <li>{@link Event#NODE_MOVED}</li>
+     * <li>{@link Event#PERSIST}</li>
+            case Event.NODE_MOVED:
+                localName = EVENT_NODEMOVED;
+                break;
+            case Event.PERSIST:
+                localName = EVENT_PERSIST;
+                break;
+     * <li>{@link Event#NODE_MOVED}</li>
+     * <li>{@link Event#PERSIST}</li>
+        } else if (EVENT_NODEMOVED.equals(eventName)) {
+            eType = Event.NODE_MOVED;
+        } else if (EVENT_PERSIST.equals(eventName)) {
+            eType = Event.PERSIST;
+
+                // Additional JCR 2.0 event information
+                // userdata
+                try {
+                    DomUtil.addChildElement(eventElem, XML_EVENTUSERDATA, NAMESPACE, event.getUserData());
+                } catch (RepositoryException e) {
+                    log.error("Internal error while retrieving event user data.", e.getMessage());
+                }
+                // timestamp
+                try {
+                    DomUtil.addChildElement(eventElem, XML_EVENTDATE, NAMESPACE, String.valueOf(event.getDate()));
+                } catch (RepositoryException e) {
+                    log.error("Internal error while retrieving event date.", e.getMessage());
+                }
+                // identifier
+                try {
+                    DomUtil.addChildElement(eventElem, XML_EVENTIDENTIFIER, NAMESPACE, event.getIdentifier());
+                } catch (RepositoryException e) {
+                    log.error("Internal error while retrieving event identifier.", e.getMessage());
+                }
+                // info
+                Element info = DomUtil.addChildElement(eventElem, XML_EVENTINFO, NAMESPACE);
+                try {
+                    Map m = event.getInfo();
+                    for (Iterator it = m.keySet().iterator(); it.hasNext();) {
+                        String key = it.next().toString();
+                        Object value = m.get(key);
+                        if (value != null) {
+                            DomUtil.addChildElement(info, key, Namespace.EMPTY_NAMESPACE, value.toString());
+                        } else {
+                            DomUtil.addChildElement(info, key, Namespace.EMPTY_NAMESPACE);
+                        }
+                    }
+                } catch (RepositoryException e) {
+                    log.error("Internal error while retrieving event info.", e.getMessage());
+                }
