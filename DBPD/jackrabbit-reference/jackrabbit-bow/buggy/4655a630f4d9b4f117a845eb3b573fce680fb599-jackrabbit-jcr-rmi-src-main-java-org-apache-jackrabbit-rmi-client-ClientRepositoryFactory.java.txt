JCR-622: Added a "safe" client repository adapter that automatically reloads broken remote repository reference.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@527797 13f79535-47bb-0310-9956-ffa450edef68

-import javax.naming.NamingException;
- * @author Jukka Zitting
-     * repository is looked up from the RMI registry using the given URL and
-     * wrapped into a {@link ClientRepository ClientRepository} adapter.
+     * repository is looked up from the RMI registry using the given URL by
+     * the returned {@link SafeClientRepository} instance.
-     * @throws ClassCastException    if the URL points to an unknown object
-     * @throws MalformedURLException if the URL is malformed
-     * @throws NotBoundException     if the URL points to nowhere
-     * @throws RemoteException       on RMI errors
-    public synchronized Repository getRepository(String url) throws
-            ClassCastException, MalformedURLException,
-            NotBoundException, RemoteException {
-        RemoteRepository remote = (RemoteRepository) Naming.lookup(url);
-        return factory.getRepository(remote);
+    public Repository getRepository(final String url) {
+        return new SafeClientRepository(factory) {
+
+            protected RemoteRepository getRemoteRepository()
+                    throws RemoteException {
+                try {
+                    return (RemoteRepository) Naming.lookup(url);
+                } catch (MalformedURLException e) {
+                    throw new RemoteException("Malformed URL: " + url, e);
+                } catch (NotBoundException e) {
+                    throw new RemoteException("No target found: " + url, e);
+                } catch (ClassCastException e) {
+                    throw new RemoteException("Unknown target: " + url, e);
+                }
+            }
+            
+        };
-     * Utility method for looking up the URL within the given RefAddr object.
-     * Feeds the content of the RefAddr object to
-     * {@link #getRepository(String) getRepository(String)} and wraps all
-     * errors to {@link NamingException NamingExceptions}.
-     * <p>
-     * Used by {@link #getObjectInstance(Object, Name, Context, Hashtable) getObjectInstance()}.
-     *
-     * @param url the URL reference
-     * @return repository client
-     * @throws NamingException on all errors
-     */
-    private Repository getRepository(RefAddr url) throws NamingException {
-        try {
-            return getRepository((String) url.getContent());
-        } catch (Exception ex) {
-            throw new NamingException(ex.getMessage());
-        }
-    }
-
-    /**
-     * JNDI factory method for creating JCR-RMI clients. Looks up a
-     * remote repository using the reference parameter "url" as the RMI URL
-     * and returns a client wrapper for the remote repository.
+     * JNDI factory method for creating JCR-RMI clients. Creates a lazy
+     * client repository instance that uses the reference parameter "url"
+     * as the RMI URL where the remote repository is looked up when accessed.
-     * @throws NamingException on all errors
-            Object object, Name name, Context context, Hashtable environment)
-            throws NamingException {
+            Object object, Name name, Context context, Hashtable environment) {
-            if (Repository.class.getName().equals(reference.getClassName())) {
-                RefAddr url = reference.get(URL_PARAMETER);
-                if (url != null) {
-                    return getRepository(url);
-                }
+            RefAddr url = reference.get(URL_PARAMETER);
+            if (url != null && url.getContent() != null) {
+                return getRepository(url.getContent().toString());
