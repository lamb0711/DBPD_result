JCR-2113 : JSR 283 Access Control Management (contribution by Alfusainey Jallow)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1656464 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
+    private final Map<Name, Iterable<QValue>> mvRestrictions;
+    private int hashCode = -1;
+    private int privsHashCode = -1;
+
-                           Map<String, QValue> restrictions, NamePathResolver resolver,
-                           QValueFactory qvf)
-                                    throws RepositoryException {
+                           Map<Name, QValue> restrictions, Map<Name, Iterable<QValue>> mvRestrictions,
+                           NamePathResolver resolver, QValueFactory qvf) throws RepositoryException {
-        if (restrictions == null || (restrictions.size() == 0)) {
+        if (restrictions == null) {
-            this.restrictions = new HashMap<Name, QValue>(restrictions.size());
-            for (String restName : restrictions.keySet()) {
-                this.restrictions.put(resolver.getQName(restName), restrictions.get(restName));
-            }
+            this.restrictions = restrictions;
+        }
+        if (mvRestrictions == null) {
+            this.mvRestrictions = Collections.emptyMap();
+        } else {
+            this.mvRestrictions = mvRestrictions;
-    
+
+    //-------------------------------------------------------------< Object >---
+    @Override
+    public int hashCode() {
+        if (hashCode == -1) {
+            hashCode = buildHashCode();
+        }
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (obj == this) {
+            return true;
+        }
+        if (obj instanceof AccessControlEntryImpl) {
+            AccessControlEntryImpl other = (AccessControlEntryImpl) obj;
+            return principal.getName().equals(other.principal.getName()) &&
+                    isAllow == other.isAllow &&
+                    restrictions.equals(other.restrictions) &&
+                    mvRestrictions.equals(other.mvRestrictions) &&
+                    getPrivilegesHashCode() == other.getPrivilegesHashCode();
+        }
+        return false;
+    }
+
+    private int buildHashCode() {
+        int h = 17;
+        h = 37 * h + principal.getName().hashCode();
+        h = 37 * h + getPrivilegesHashCode();
+        h = 37 * h + Boolean.valueOf(isAllow).hashCode();
+        h = 37 * h + restrictions.hashCode();
+        h = 37 * h + mvRestrictions.hashCode();
+        return h;
+    }
+
+    private int getPrivilegesHashCode() {
+        if (privsHashCode == -1) {
+            Set<Privilege> prvs = new HashSet<Privilege>(Arrays.asList(privileges));
+            for (Privilege p : privileges) {
+                if (p.isAggregate()) {
+                    prvs.addAll(Arrays.asList(p.getAggregatePrivileges()));
+                }
+            }
+            privsHashCode = prvs.hashCode();
+        }
+        return privsHashCode;
+    }
+
