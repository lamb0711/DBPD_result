JCR-2192: Handling of expanded-form jcr names by node type *Template classes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@797410 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.jcr.NamespaceException;
+import javax.jcr.nodetype.ConstraintViolationException;
+    private static final Logger log = LoggerFactory.getLogger(NodeDefinitionTemplateImpl.class);
+
-    private String[] requiredPrimaryTypeNames;
-    private String defaultPrimaryTypeName;
+    private Name[] requiredPrimaryTypeNames;
+    private Name defaultPrimaryTypeName;
-     * @param ntBase
+     * @param resolver
-    NodeDefinitionTemplateImpl(NodeType ntBase) throws RepositoryException {
-        requiredPrimaryTypes = new NodeType[] {ntBase};
-        requiredPrimaryTypeNames = new String[] {requiredPrimaryTypes[0].getName()};
+    NodeDefinitionTemplateImpl(NamePathResolver resolver) throws RepositoryException {
+        super(resolver);
+        requiredPrimaryTypes = null;
+        requiredPrimaryTypeNames = null;
+     * @param resolver
+     * @throws javax.jcr.nodetype.ConstraintViolationException
-    NodeDefinitionTemplateImpl(NodeDefinition def) {
-        super(def);
+    NodeDefinitionTemplateImpl(NodeDefinition def, NamePathResolver resolver) throws ConstraintViolationException {
+        super(def, resolver);
-        // FIXME temporary workaround until JSR 283 has been finalized
-        requiredPrimaryTypeNames = new String[requiredPrimaryTypes.length];
-        for (int i = 0; i < requiredPrimaryTypes.length; i++) {
-            requiredPrimaryTypeNames[i] = requiredPrimaryTypes[i].getName();
-        }
-        defaultPrimaryTypeName =
-                def.getDefaultPrimaryType() == null ? null : def.getDefaultPrimaryType().getName();
+
+        if (def instanceof NodeDefinitionImpl) {
+            QNodeDefinition qDef = (QNodeDefinition) ((NodeDefinitionImpl) def).itemDef;
+            requiredPrimaryTypeNames = qDef.getRequiredPrimaryTypes();
+            defaultPrimaryTypeName = qDef.getDefaultPrimaryType();
+        } else {
+            setRequiredPrimaryTypeNames(def.getRequiredPrimaryTypeNames());
+            setDefaultPrimaryTypeName(def.getDefaultPrimaryTypeName());
+        }        
-    public void setRequiredPrimaryTypeNames(String[] requiredPrimaryTypeNames) {
-        this.requiredPrimaryTypeNames = requiredPrimaryTypeNames;
+    public void setRequiredPrimaryTypeNames(String[] requiredPrimaryTypeNames) throws ConstraintViolationException {
+        if (requiredPrimaryTypeNames == null) {
+            throw new ConstraintViolationException("null isn't a valid array of JCR names.");
+        } else {
+            this.requiredPrimaryTypeNames = new Name[requiredPrimaryTypeNames.length];
+            for (int i = 0; i < requiredPrimaryTypeNames.length; i++) {
+                try {
+                    this.requiredPrimaryTypeNames[i] = resolver.getQName(requiredPrimaryTypeNames[i]);
+                } catch (RepositoryException e) {
+                    throw new ConstraintViolationException(e);
+                }
+            }
+        }
-    public void setDefaultPrimaryTypeName(String defaultPrimaryType) {
-        this.defaultPrimaryTypeName = defaultPrimaryType;
+    public void setDefaultPrimaryTypeName(String defaultPrimaryType) throws ConstraintViolationException {
+        try {
+            this.defaultPrimaryTypeName = resolver.getQName(defaultPrimaryType);
+        } catch (RepositoryException e) {
+            throw new ConstraintViolationException(e);
+        }
-        return requiredPrimaryTypeNames;
+        if (requiredPrimaryTypeNames == null) {
+            return null;
+        } else {
+            String[] rptNames = new String[requiredPrimaryTypeNames.length];
+            for (int i = 0; i < requiredPrimaryTypeNames.length; i++) {
+                try {
+                    rptNames[i] = resolver.getJCRName(requiredPrimaryTypeNames[i]);
+                } catch (NamespaceException e) {
+                    // should never get here
+                    log.error("invalid node type name: " + requiredPrimaryTypeNames[i], e);
+                    rptNames[i] = requiredPrimaryTypeNames[i].toString();
+                }
+            }
+            return rptNames;
+        }
-        return defaultPrimaryTypeName;
+        if (defaultPrimaryTypeName == null) {
+            return null;
+        } else {
+            try {
+                return resolver.getJCRName(defaultPrimaryTypeName);
+            } catch (NamespaceException e) {
+                // should never get here
+                log.error("encountered unregistered namespace in default primary type name", e);
+                return defaultPrimaryTypeName.toString();
+            }
+        }
