work in progress

jcr2spi
- HierarchyManager: fixing methods with ItemId param
- HierarchyManagerImpl(s): removing unused methods
- ItemManagerImpl: replacing NodeId as cacheKey
- ItemImpl: remove ISM field

jcr2spi/xml
- ImporterImpl renamed to SessionImporter (used for s-import only)
- xml import: Use UUID String instead of creating NodeIds
- ReferenceChangeTracker: remove usage of spi NodeId

jcr2spi/state
- SessionItemStateManager: ValueFactory not needed since QPropertyDefinition returns qualified values.

jcr2spi/util
- LogUtil: add 'saveGetJCRName' utility method

jcr2spi/locking
- locking: LockManager to use NodeState instead of NodeId
- locking: removing locktoken from Session checks if Session is lock holder

jcr2spi/query
- NodeIteratorImpl: fix commented code, that allows to retrieve
  search results from IdIterator returned from QueryInfo
- minor reformatting, javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430791 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.PropertyType;
+import java.io.IOException;
-    
+
-        QValue[] defVals = QValue.create(((QPropertyDefinition) itemDef).getDefaultValues());
-        if (defVals == null) {
-            return null;
+        QPropertyDefinition pDef = ((QPropertyDefinition) itemDef);
+        QValue[] defVals;
+        if (pDef.getRequiredType() == PropertyType.BINARY) {
+            try {
+                defVals = QValue.create(pDef.getDefaultValuesAsStream(), pDef.getRequiredType());
+            } catch (IOException e) {
+                String propName = (getName() == null) ? "[null]" : getName();
+                log.error("Illegal default value specified for property " + propName + " in node type " + getDeclaringNodeType(), e);
+                return null;
+            }
+        } else {
+            defVals = QValue.create(pDef.getDefaultValues(), pDef.getRequiredType());
+
-            } catch (RepositoryException re) {
+            } catch (RepositoryException e) {
-                log.error("illegal default value specified for property "
-                        + propName + " in node type " + getDeclaringNodeType(),
-                        re);
+                log.error("illegal default value specified for property " + propName + " in node type " + getDeclaringNodeType(), e);
