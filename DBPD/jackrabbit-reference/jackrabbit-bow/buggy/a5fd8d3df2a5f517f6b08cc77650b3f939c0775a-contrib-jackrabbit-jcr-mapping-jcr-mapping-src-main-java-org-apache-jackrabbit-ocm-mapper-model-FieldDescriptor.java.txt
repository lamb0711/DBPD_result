* Remove fieldType. this attribute is not used in the object mapping. 
* Review one constructor in ObjectContentManagerImpl.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@563252 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.ocm.exception.JcrMappingException;
-import org.apache.jackrabbit.ocm.reflection.ReflectionUtils;
-    private String fieldName;
-    private String fieldType;
-    private Class fieldTypeClass;
+    private String fieldName;    
-    /**
-     * @return the primitive or fully qualified class of the field
-     * or <tt>null</tt> if not specified in the mapping
-     */
-    public String getFieldType() {
-        return this.fieldType;
-    }
-
-    /**
-     * Sets the type of the field. It supports primitive types, specified as
-     * int, long, etc or fully qualified class names.
-     *
-     * @param fieldType the type of the field
-     */
-    public void setFieldType(String fieldType) {
-        this.fieldType = fieldType;
-    }
-
-    /**
-     * @return the field class of the field
-     * or <tt>null</tt> if not specified in the mapping
-     * or if the class was not found
-     */
-    public Class getFieldTypeClass() {
-        if (this.fieldType == null) {
-            return null;
-        }
-        if (this.fieldTypeClass == null) {
-            this.fieldTypeClass = loadFieldTypeClass();
-        }
-
-        return this.fieldTypeClass;
-    }
-
-	/**
-     * Initialize the fieldTypeClass.
-     *
-     * @return the primitive class or the class accordign to fieldType
-     */
-    private Class loadFieldTypeClass() {
-        if (this.fieldType == null) {
-            return null;
-        }
-        if ("byte".equals(this.fieldType)) {
-            return byte.class;
-        }
-        else if ("short".equals(this.fieldType)) {
-            return short.class;
-        }
-        else if ("int".equals(this.fieldType)) {
-            return int.class;
-        }
-        else if ("long".equals(this.fieldType)) {
-            return long.class;
-        }
-        else if ("float".equals(this.fieldType)) {
-            return float.class;
-        }
-        else if ("double".equals(this.fieldType)) {
-            return double.class;
-        }
-        else if ("char".equals(this.fieldType)) {
-            return char.class;
-        }
-        else if ("boolean".equals(this.fieldType)) {
-            return boolean.class;
-        }
-        else {
-            try {
-                return ReflectionUtils.forName(this.fieldType);
-            }
-            catch (JcrMappingException jme) {
-                ; // nothing to do; it will be dynamically determined
-            }
-        }
-
-        return null;
+	
+    public void setJcrValueConstraints(String jcrValueConstraints) {                
+    	if (jcrValueConstraints != null && ! jcrValueConstraints.equals(""))
+    	{
+    		this.jcrValueConstraints = jcrValueConstraints.split(" *, *");
+    	}
+
