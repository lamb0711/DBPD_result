Implement jcrfn:deref() function for XPath. Level 1 test cases for jcrfn:deref()

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157120 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.search.DerefQueryNode;
+        QueryNode queryNode = (QueryNode) data;
-                data = createPathQueryNode(node);
+                queryNode = createPathQueryNode(node);
-                ((PathQueryNode) data).setAbsolute(true);
+                ((PathQueryNode) queryNode).setAbsolute(true);
-                    if (data instanceof RelationQueryNode
-                            || data instanceof OrderQueryNode
-                            || data instanceof PathQueryNode) {
+                    if (queryNode.getType() == QueryNode.TYPE_RELATION
+                            || queryNode.getType() == QueryNode.TYPE_DEREF
+                            || queryNode.getType() == QueryNode.TYPE_ORDER
+                            || queryNode.getType() == QueryNode.TYPE_PATH) {
-                        node.childrenAccept(this, data);
-                    } else if (data instanceof NotQueryNode) {
+                        node.childrenAccept(this, queryNode);
+                    } else if (queryNode.getType() == QueryNode.TYPE_NOT) {
-                                = new RelationQueryNode((QueryNode) data,
+                                = new RelationQueryNode(queryNode,
-                        NotQueryNode notNode = (NotQueryNode) data;
+                        NotQueryNode notNode = (NotQueryNode) queryNode;
-                                = new RelationQueryNode((QueryNode) data,
+                                = new RelationQueryNode(queryNode,
-                        ((NAryQueryNode) data).addOperand(notNull);
+                        ((NAryQueryNode) queryNode).addOperand(notNull);
-                    if (data instanceof PathQueryNode) {
-                        data = createLocationStep(node, (PathQueryNode) data);
+                    if (queryNode.getType() == QueryNode.TYPE_PATH) {
+                        queryNode = createLocationStep(node, (PathQueryNode) queryNode);
-                if (data instanceof LocationStepQueryNode
-                        || data instanceof RelationQueryNode
-                        || data instanceof PathQueryNode) {
-                    createNameTest(node, (QueryNode) data);
-                } else if (data instanceof OrderQueryNode) {
-                    data = createOrderSpec(node, (OrderQueryNode) data);
+                if (queryNode.getType() == QueryNode.TYPE_LOCATION
+                        || queryNode.getType() == QueryNode.TYPE_DEREF
+                        || queryNode.getType() == QueryNode.TYPE_RELATION
+                        || queryNode.getType() == QueryNode.TYPE_PATH) {
+                    createNodeTest(node, queryNode);
+                } else if (queryNode.getType() == QueryNode.TYPE_ORDER) {
+                    createOrderSpec(node, (OrderQueryNode) queryNode);
-                    node.childrenAccept(this, data);
+                    node.childrenAccept(this, queryNode);
-                NAryQueryNode parent = (NAryQueryNode) data;
-                data = new OrQueryNode(parent);
-                parent.addOperand((QueryNode) data);
+                NAryQueryNode parent = (NAryQueryNode) queryNode;
+                queryNode = new OrQueryNode(parent);
+                parent.addOperand(queryNode);
-                node.childrenAccept(this, data);
+                node.childrenAccept(this, queryNode);
-                parent = (NAryQueryNode) data;
-                data = new AndQueryNode(parent);
-                parent.addOperand((QueryNode) data);
+                parent = (NAryQueryNode) queryNode;
+                queryNode = new AndQueryNode(parent);
+                parent.addOperand(queryNode);
-                node.childrenAccept(this, data);
+                node.childrenAccept(this, queryNode);
-                createExpression(node, (NAryQueryNode) data);
+                createExpression(node, (NAryQueryNode) queryNode);
-                if (data instanceof RelationQueryNode) {
-                    assignValue(node, (RelationQueryNode) data);
-                } else if (data instanceof LocationStepQueryNode) {
+                if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    assignValue(node, (RelationQueryNode) queryNode);
+                } else if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
-                        ((LocationStepQueryNode) data).setIndex(index);
+                        ((LocationStepQueryNode) queryNode).setIndex(index);
-                data = createFunction(node, (QueryNode) data);
+                queryNode = createFunction(node, queryNode);
-                data = root.getOrderNode();
-                node.childrenAccept(this, data);
+                queryNode = root.getOrderNode();
+                node.childrenAccept(this, queryNode);
-                    OrderQueryNode.OrderSpec[] specs = ((OrderQueryNode) data).getOrderSpecs();
+                    OrderQueryNode.OrderSpec[] specs = ((OrderQueryNode) queryNode).getOrderSpecs();
-                node.childrenAccept(this, data);
+                node.childrenAccept(this, queryNode);
-        return data;
+        return queryNode;
-     * Creates a name test either for a <code>LocationStepQueryNode</code> or
-     * for a <code>RelationQueryNode</code>.
+     * Assigns a QName to one of the follwing QueryNodes:
+     * {@link RelationQueryNode}, {@link DerefQueryNode}, {@link RelationQueryNode},
+     * {@link PathQueryNode}, {@link OrderQueryNode}.
-     * @param queryNode either a <code>LocationStepQueryNode</code> or a
-     *                  <code>RelationQueryNode</code>.
+     * @param queryNode the query node.
-    private void createNameTest(SimpleNode node, QueryNode queryNode) {
+    private void createNodeTest(SimpleNode node, QueryNode queryNode) {
-                    if (queryNode instanceof LocationStepQueryNode) {
+                    if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
-                    } else if (queryNode instanceof RelationQueryNode) {
+                    } else if (queryNode.getType() == QueryNode.TYPE_DEREF) {
+                        QName name = ISO9075.decode(QName.fromJCRName(child.getValue(), resolver));
+                        ((DerefQueryNode) queryNode).setRefProperty(name);
+                    } else if (queryNode.getType() == QueryNode.TYPE_RELATION) {
-                    } else if (queryNode instanceof PathQueryNode) {
+                    } else if (queryNode.getType() == QueryNode.TYPE_PATH) {
-                    } else if (queryNode instanceof OrderQueryNode) {
+                    } else if (queryNode.getType() == QueryNode.TYPE_ORDER) {
-                if (queryNode instanceof LocationStepQueryNode) {
+                if (queryNode.getType() == QueryNode.TYPE_LOCATION) {
-                exceptions.add(new InvalidQueryException("Unsupported function: " + fName));
+                // check number of arguments
+                if (node.jjtGetNumChildren() == 3) {
+                    if (queryNode.getType() == QueryNode.TYPE_PATH) {
+                        PathQueryNode pathNode = (PathQueryNode) queryNode;
+                        DerefQueryNode derefNode = new DerefQueryNode(pathNode, null, false);
+
+                        // assign property name
+                        node.jjtGetChild(1).jjtAccept(this, derefNode);
+                        // check property name
+                        if (derefNode.getRefProperty() == null) {
+                            exceptions.add(new InvalidQueryException("Wrong first argument type for jcrfn:deref"));
+                        }
+
+                        SimpleNode literal = (SimpleNode) node.jjtGetChild(2).jjtGetChild(0);
+                        if (literal.getId() == JJTSTRINGLITERAL) {
+                            String value = literal.getValue();
+                            // strip quotes
+                            value = value.substring(1, value.length() - 1);
+                            if (!value.equals("*")) {
+                                QName name = null;
+                                try {
+                                    name = ISO9075.decode(QName.fromJCRName(value, resolver));
+                                } catch (IllegalNameException e) {
+                                    exceptions.add(new InvalidQueryException("Illegal name: " + value));
+                                } catch (UnknownPrefixException e) {
+                                    exceptions.add(new InvalidQueryException("Unknown prefix: " + value));
+                                }
+                                derefNode.setNameTest(name);
+                            }
+                        } else {
+                            exceptions.add(new InvalidQueryException("Wrong second argument type for jcrfn:like"));
+                        }
+                        pathNode.addPathStep(derefNode);
+                    } else {
+                        exceptions.add(new InvalidQueryException("Unsupported location for jcrfn:deref()"));
+                    }
+                }
