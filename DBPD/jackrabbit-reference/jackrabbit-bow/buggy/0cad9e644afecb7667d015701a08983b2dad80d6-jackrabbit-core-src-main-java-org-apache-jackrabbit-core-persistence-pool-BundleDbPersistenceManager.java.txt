JCR-2762: Optimize bundle serialization

Remove duplicate code by merging the checkBundle() and readBundle() functionality

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1004239 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
-                NodePropBundle child = loadBundle(entry.getId(), true);
+                NodePropBundle child = loadBundle(entry.getId());
-
-                        // checkBundle will log any problems itself
-                        if (binding.checkBundle(new ByteArrayInputStream(data))) {
-                            NodePropBundle bundle = binding.readBundle(
-                                    new ByteArrayInputStream(data), id);
-                            checkBundleConsistency(id, bundle, fix, modifications);
-                        } else {
-                            log.error("invalid bundle '" + id + "', see previous BundleBinding error log entry");
-                        }
-                    } catch (Exception e) {
-                        log.error("Error in bundle " + id + ": " + e);
+                        NodePropBundle bundle = binding.readBundle(
+                                new ByteArrayInputStream(data), id);
+                        checkBundleConsistency(id, bundle, fix, modifications);
+                    } catch (IOException e) {
+                        log.error("Unable to parse bundle " + id
+                                + ": " + Arrays.toString(data), e);
-                    NodePropBundle bundle = loadBundle(id, true);
+                    NodePropBundle bundle = loadBundle(id);
-        return loadBundle(id, false);
+        ResultSet rs = null;
+        try {
+            rs = conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
+            if (!rs.next()) {
+                return null;
+            }
+            byte[] bytes = getBytes(rs.getBlob(1));
+
+            try {
+                NodePropBundle bundle =
+                    binding.readBundle(new ByteArrayInputStream(bytes), id);
+                bundle.setSize(bytes.length);
+                return bundle;
+            } catch (IOException e) {
+                log.error("Unable to parse serialization of bundle " + id
+                        + ": " + Arrays.toString(bytes), e);
+                throw e;
+            }
+        } catch (Exception e) {
+            String msg = "failed to read bundle: " + id + ": " + e;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        } finally {
+            DbUtility.close(rs);
+        }
-     * Loads a bundle from the underlying system and optionally performs
-     * a check on the bundle first.
-     *
-     * @param id the node id of the bundle
-     * @param checkBeforeLoading check the bundle before loading it and log
-     *                           detailed information about it (slower)
-     * @return the loaded bundle or <code>null</code> if the bundle does not
-     *         exist.
-     * @throws ItemStateException if an error while loading occurs.
-     */
-    protected NodePropBundle loadBundle(NodeId id, boolean checkBeforeLoading)
-            throws ItemStateException {
-        ResultSet rs = null;
-        
-        try {
-            rs = conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
-            if (!rs.next()) {
-                return null;
-            }
-            Blob b = rs.getBlob(1);
-            byte[] bytes = getBytes(b);
-
-            if (checkBeforeLoading) {
-                if (!binding.checkBundle(new ByteArrayInputStream(bytes))) {
-                    // gets wrapped as proper ItemStateException below
-                    throw new Exception("invalid bundle, see previous BundleBinding error log entry");
-                }
-            }
-
-            NodePropBundle bundle =
-                binding.readBundle(new ByteArrayInputStream(bytes), id);
-            bundle.setSize(bytes.length);
-            return bundle;
-        } catch (Exception e) {
-            String msg = "failed to read bundle: " + id + ": " + e;
-            log.error(msg);
-            throw new ItemStateException(msg, e);
-        } finally {
-            DbUtility.close(rs);
-        }
-    }
-
-    /**
