Move preparation of events out of write lock to prevent possible deadlock situations.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@239609 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.ItemState;
-import java.util.HashMap;
+import java.util.WeakHashMap;
-     * A map of <code>Set</code> objects that hold references to denied
-     * <code>EventState</code>s. The map uses the <code>EventStateCollection</code>
-     * as the key to reference a deny Set.
+     * A map of <code>Set</code> objects that hold references to
+     * <code>ItemId</code>s of denied <code>ItemState</code>s. The map uses the
+     * <code>EventStateCollection</code> as the key to reference a deny Set.
-    private final Map accessDenied = Collections.synchronizedMap(new HashMap());
+    private final Map accessDenied = Collections.synchronizedMap(new WeakHashMap());
-                    denied.add(state);
+                    denied.add(state.getId());
+     * Checks for which deleted <code>ItemStates</code> this
+     * <code>EventConsumer</code> has enough access rights to see the event.
+     *
+     * @param events       the collection of {@link EventState}s.
+     * @param deletedItems Iterator of deleted <code>ItemState</code>s.
+     */
+    void prepareDeleted(EventStateCollection events, Iterator deletedItems) {
+        Set denied = null;
+        while (deletedItems.hasNext()) {
+            ItemState item = (ItemState) deletedItems.next();
+            // check read permission
+            boolean granted = false;
+            try {
+                granted = session.getAccessManager().isGranted(item.getId(), AccessManager.READ);
+            } catch (RepositoryException e) {
+                log.warn("Unable to check access rights for item: " + item.getId());
+            }
+            if (!granted) {
+                if (denied == null) {
+                    denied = new HashSet();
+                }
+                denied.add(item.getId());
+            }
+        }
+        if (denied != null) {
+            accessDenied.put(events, denied);
+        }
+    }
+
+    /**
+        // Set of ItemIds of denied ItemStates
-                    denied.add(state);
+                    denied.add(state.getId());
