JCR-1588: 283 Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@689499 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
-import org.apache.jackrabbit.api.security.principal.PrincipalManager;
+import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
+import org.apache.jackrabbit.api.jsr283.security.AccessControlPolicy;
+import org.apache.jackrabbit.api.jsr283.security.AccessControlList;
-import org.apache.jackrabbit.core.security.authorization.PolicyEntry;
-import org.apache.jackrabbit.core.security.authorization.PolicyTemplate;
+import org.apache.jackrabbit.core.security.authorization.AccessControlUtils;
+import org.apache.jackrabbit.core.security.authorization.JackrabbitAccessControlEntry;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-    private static final String DEFAULT_PERMISSION_NAME = "permission";
+    private static final String DEFAULT_ACE_NAME = "ace";
+    /**
+     * the editing session
+     */
+    private final SessionImpl session;
+    private final PrivilegeRegistry privilegeRegistry;
+    private final AccessControlUtils utils;
-    protected final SessionImpl session;
-    private final PrincipalManager principalManager;
-
-    protected ACLEditor(Session editingSession) throws RepositoryException {
+    ACLEditor(Session editingSession, AccessControlUtils utils) {
-            principalManager = ((SessionImpl) editingSession).getPrincipalManager();
+            // TODO: review and find better solution
+            privilegeRegistry = new PrivilegeRegistry(session);
+        this.utils = utils;
+    }
+
+    /**
+     *
+     * @param aclNode
+     * @return
+     * @throws RepositoryException
+     */
+    AccessControlList getACL(NodeImpl aclNode) throws RepositoryException {
+        return new ACLTemplate(aclNode, privilegeRegistry);
-     * @see AccessControlEditor#getPolicyTemplate(String)
+     * @see AccessControlEditor#getPolicies(String)
-    public PolicyTemplate getPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
+    public AccessControlPolicy[] getPolicies(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
-        PolicyTemplate tmpl = null;
-        NodeImpl aclNode = getAclNode(nodePath);
-        if (aclNode != null) {
-            tmpl = new ACLTemplate(aclNode, Collections.EMPTY_SET);
-        }
-        return tmpl;
-    }
-
-    /**
-     * @see AccessControlEditor#editPolicyTemplate(String)
-     * @param nodePath
-     */
-    public PolicyTemplate editPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
-        checkProtectsNode(nodePath);
-
-        PolicyTemplate tmpl;
-            tmpl = new ACLTemplate(nodePath);
+            return new AccessControlPolicy[0];
-            tmpl = new ACLTemplate(aclNode, Collections.EMPTY_SET);
+            return new AccessControlPolicy[] {getACL(aclNode)};
-        return tmpl;
-     * @see AccessControlEditor#editPolicyTemplate(Principal)
+     * @see AccessControlEditor#editAccessControlPolicies(String)
+     * @param nodePath
-    public PolicyTemplate editPolicyTemplate(Principal principal) throws AccessDeniedException, AccessControlException, RepositoryException {
-        throw new AccessControlException("Unable to edit policy for principal " + principal.getName());
-    }
-
-    /**
-     * @see AccessControlEditor#setPolicyTemplate(String,PolicyTemplate)
-     */
-    public void setPolicyTemplate(String nodePath, PolicyTemplate template) throws RepositoryException {
+    public AccessControlPolicy[] editAccessControlPolicies(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
+        AccessControlPolicy acl;
+        NodeImpl aclNode = getAclNode(nodePath);
+        if (aclNode == null) {
+            // create an empty acl
+            acl = new ACLTemplate(nodePath, session.getPrincipalManager(), privilegeRegistry);
+        } else {
+            acl = getACL(aclNode);
+        }
+        return new AccessControlPolicy[] {acl};
+    }
+
+    /**
+     * @see AccessControlEditor#editAccessControlPolicies(Principal)
+     */
+    public AccessControlPolicy[] editAccessControlPolicies(Principal principal) throws AccessDeniedException, AccessControlException, RepositoryException {
+        if (!session.getPrincipalManager().hasPrincipal(principal.getName())) {
+            throw new AccessControlException("Unknown principal.");
+        }
+        // TODO: impl. missing
+        return new AccessControlPolicy[0];
+    }
+
+    /**
+     * @see AccessControlEditor#setPolicy(String,AccessControlPolicy)
+     */
+    public void setPolicy(String nodePath, AccessControlPolicy policy) throws RepositoryException {
+        checkProtectsNode(nodePath);
+        checkValidPolicy(nodePath, policy);
+
-        PolicyEntry[] entries = template.getEntries();
+        AccessControlEntry[] entries = ((ACLTemplate) policy).getAccessControlEntries();
-            ACEImpl ace = (ACEImpl) entries[i];
-            // TODO: improve
+            JackrabbitAccessControlEntry ace = (JackrabbitAccessControlEntry) entries[i];
+
+            // create the ACE node
+
+
-     * @see AccessControlEditor#removePolicyTemplate(String)
+     * @see AccessControlEditor#removePolicy(String,AccessControlPolicy)
-    public PolicyTemplate removePolicyTemplate(String nodePath) throws AccessControlException, RepositoryException {
+    public synchronized void removePolicy(String nodePath, AccessControlPolicy policy) throws AccessControlException, RepositoryException {
+        checkValidPolicy(nodePath, policy);
-        PolicyTemplate tmpl = null;
-            // need to build the template in order to have a return value.
-            tmpl = new ACLTemplate(aclNode, Collections.EMPTY_SET);
-        }
-        return tmpl;
-    }
-
-    /**
-     * @see AccessControlEditor#getAccessControlEntries(String)
-     */
-    public AccessControlEntry[] getAccessControlEntries(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
-        PolicyTemplate pt = getPolicyTemplate(nodePath);
-        if (pt == null) {
-            return new AccessControlEntry[0];
-            PolicyEntry[] entries = pt.getEntries();
-            List l = new ArrayList();
-            for (int i = 0; i < entries.length; i++) {
-                if (entries[i].isAllow()) {
-                    l.add(entries[i]);
-                }
-            }
-            return (AccessControlEntry[]) l.toArray(new AccessControlEntry[l.size()]);
+            throw new AccessControlException("No policy to remove at " + nodePath);
-    /**
-     * @see AccessControlEditor#addAccessControlEntry(String,Principal,Privilege[])
-     */
-    public AccessControlEntry addAccessControlEntry(String nodePath, Principal principal, Privilege[] privileges) throws AccessControlException, PathNotFoundException, RepositoryException {
-        // JSR 283 requires that the principal is known TODO: check again.
-        if (!principalManager.hasPrincipal(principal.getName())) {
-            throw new AccessControlException("Principal " + principal.getName() + " does not exist.");
-        }
-
-        ACLTemplate pt = (ACLTemplate) editPolicyTemplate(nodePath);
-        // TODO: check again. maybe these 'grant-ACE' should be stored/evaluated separated
-        int privs = PrivilegeRegistry.getBits(privileges);
-        /*
-        since added access control entry may never remove privileges that are
-        granted by the policy -> retrieve existing allow entries and add
-        the new privileges to be granted.
-        Reason: PolicyTemplate#setEntry does in fact overwrite (which is fine
-        when editing the policy itself, but wrong when adding ACEs over the JCR-API.
-        */
-        ACEImpl[] existing = pt.getEntries(principal);
-        for (int i = 0; i < existing.length; i++) {
-            if (existing[i].isAllow()) {
-                privs |= existing[i].getPrivilegeBits();
-            }
-        }
-
-        pt.setEntry(new ACEImpl(principal, privs, true));
-        setPolicyTemplate(nodePath, pt);
-        ACEImpl[] tmpls = pt.getEntries(principal);
-        for (int i = 0; i < tmpls.length; i++) {
-            if (tmpls[i].isAllow()) {
-                return tmpls[i];
-            }
-        }
-        // should never get here
-        throw new AccessControlException("Internal error: No access control entry added.");
-    }
-
-
-    /**
-     * @see AccessControlEditor#removeAccessControlEntry(String,AccessControlEntry)
-     */
-    public boolean removeAccessControlEntry(String nodePath, AccessControlEntry entry) throws AccessControlException, PathNotFoundException, RepositoryException {
-        if (!(entry instanceof ACEImpl)) {
-            throw new AccessControlException("Unknown AccessControlEntry implementation.");
-        }
-        // TODO: check again. maybe these 'grant-ACE' should be removed separated
-        PolicyTemplate pt = editPolicyTemplate(nodePath);
-        boolean removed = pt.removeEntry((ACEImpl) entry);
-        if (removed) {
-            setPolicyTemplate(nodePath, pt);
-        }
-        return removed;
-    }
-
-     * Test if the Node identified by <code>id</code> is itself part of ACL
+     * Check if the Node identified by <code>nodePath</code> is itself part of ACL
-     * @throws AccessControlException If the given id identifies a Node that
+     * @throws AccessControlException If the given nodePath identifies a Node that
-        if (ACLProvider.protectsNode(node)) {
+        if (utils.isAcItem(node)) {
+     * Check if the specified policy can be set/removed from this editor.
+     *
+     * @param nodePath
+     * @param policy
+     * @throws AccessControlException
+     */
+    private static void checkValidPolicy(String nodePath, AccessControlPolicy policy) throws AccessControlException {
+        if (policy == null || !(policy instanceof ACLTemplate)) {
+            throw new AccessControlException("Attempt to set/remove invalid policy " + policy);
+        }
+        ACLTemplate acl = (ACLTemplate) policy;
+        if (!nodePath.equals(acl.getPath())) {
+            throw new AccessControlException("Policy " + policy + " cannot be applied/removed from the node at " + nodePath);
+        }
+    }
+
+    /**
-     * @param name if missing the {@link #DEFAULT_PERMISSION_NAME} is taken
+     * @param name if missing the {@link #DEFAULT_ACE_NAME} is taken
-            name = DEFAULT_PERMISSION_NAME;
+            name = DEFAULT_ACE_NAME;
-                name = DEFAULT_PERMISSION_NAME;
+                name = DEFAULT_ACE_NAME;
