JCR-773 - Under heavy load, database journal may contain empty update records.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@513340 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.FileOutputStream;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+     * Default size for in-memory records.
+     */
+    private static final int DEFAULT_IN_MEMORY_SIZE = 1024;
+
+    /**
+     * Maximum size for in-memory records.
+     */
+    private static final int MAXIMUM_IN_MEMORY_SIZE = 65536;
+
+    /**
+     * Underlying data output.
+     */
+    private DataOutputStream dataOut;
+
+    /**
+     * Underlying byte output.
+     */
+    private ByteArrayOutputStream byteOut;
+
+    /**
-     * Underlying data output.
+     * Underlying file output.
-    private DataOutputStream dataOut;
+    private FileOutputStream fileOut;
+
+    /**
+     * Flag indicating whether the output is closed.
+     */
+    private boolean outputClosed;
+
+        byteOut = new ByteArrayOutputStream(DEFAULT_IN_MEMORY_SIZE);
+        dataOut = new DataOutputStream(byteOut);
-        open();
+        checkOutput();
-        open();
+        checkOutput();
-        open();
+        checkOutput();
-        open();
+        checkOutput();
-        open();
+        checkOutput();
-        open();
+        checkOutput();
-            close();
-            revision = journal.append(producerId, file);
-            succeeded = true;
+            int length = dataOut.size();
+            closeOutput();
+
+            InputStream in = openInput();
+
+            try {
+                revision = journal.append(producerId, in, length);
+                succeeded = true;
+            } finally {
+                try {
+                    in.close();
+                } catch (IOException e) {
+                    String msg = "I/O error while closing stream.";
+                    log.warn(msg, e);
+                }
+            }
-        if (dataOut != null) {
+        if (!outputClosed) {
-            
+
-     * Create temporary file and open data output on it.
+     * Open input on record written.
+     */
+    private InputStream openInput() throws JournalException {
+        if (file != null) {
+            try {
+                return new FileInputStream(file);
+            } catch (IOException e) {
+                String msg = "Unable to open file input on: " + file.getPath();
+                throw new JournalException(msg, e);
+            }
+        } else {
+            return new ByteArrayInputStream(byteOut.toByteArray());
+        }
+    }
+
+    /**
+     * Check output size and eventually switch to file output.
-    private void open() throws JournalException {
-        if (file == null) {
+    private void checkOutput() throws JournalException {
+        if (outputClosed) {
+            throw new IllegalStateException("Output closed.");
+        }
+        if (fileOut == null && byteOut.size() >= MAXIMUM_IN_MEMORY_SIZE) {
-                dataOut = new DataOutputStream(new FileOutputStream(file));
+            try {
+                fileOut = new FileOutputStream(file);
+            } catch (FileNotFoundException e) {
+                String msg = "Unable to open output stream on: " + file.getPath();
+                throw new JournalException(msg, e);
+            }
+            dataOut = new DataOutputStream(fileOut);
+
+            try {
+                dataOut.write(byteOut.toByteArray());
+            } catch (IOException e) {
+                String msg = "Unable to write in-memory record to file.";
+                throw new JournalException(msg, e);
+            }
-     * Close this record, keeping the underlying file.
+     * Close output, keeping the underlying file.
-    private void close() throws JournalException {
-        if (dataOut != null) {
+    private void closeOutput() throws JournalException {
+        if (!outputClosed) {
-                dataOut.close();
+                if (fileOut != null) {
+                    dataOut.flush();
+                    fileOut.getFD().sync();
+                    dataOut.close();
+                }
-                dataOut = null;
+                outputClosed = true;
-        if (dataOut != null) {
+        if (!outputClosed) {
-                dataOut = null;
+                outputClosed = true;
