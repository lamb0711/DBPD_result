Fix for JCR-1325 and review support for Collection & Map. 
The mapping definition can be simplified with parameterized collections and maps. In this case the ElementClass setting is not necessary.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@650283 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.SortedMap;
+import java.util.TreeMap;
+    // key = interface class, value =  default implementation for the interface
+    // TODO : inject this map when the object content manager is initialized
+    private static HashMap<Class, Class> defaultImplementation;
+
+    static {
+    	defaultImplementation = new HashMap<Class, Class>();
+    	defaultImplementation.put(Collection.class, ArrayList.class);
+    	defaultImplementation.put(List.class, ArrayList.class);
+    	defaultImplementation.put(Map.class, HashMap.class);
+    	defaultImplementation.put(SortedMap.class, TreeMap.class);
+
+    }
-    {    	        	
-         return Enhancer.isEnhanced(beanClass);	
+    {
+         return Enhancer.isEnhanced(beanClass);
+
+    /**
+     * Check if an class is implementing an specific interface.
+     *
+     * @param clazz
+     * @param interfaceClass
+     * @return true if the class is implementing the interface otherwise false
+     */
+	public static boolean implementsInterface( Class clazz, Class interfaceClass ) {
+
+		// Try to find the interface class in the interfaces list
+		if (clazz.getInterfaces() != null  )
+		{
+		   for ( Class foundInterface : clazz.getInterfaces() ) {
+			   if ( foundInterface == interfaceClass ) {
+				  return true;
+			   }
+			   return implementsInterface(foundInterface, interfaceClass) ;
+		   }
+		}
+		// Try to find from the ancestors
+		if (clazz.getSuperclass() != null)
+		{
+		    return implementsInterface(clazz.getSuperclass(), interfaceClass);
+		}
+
+		return false;
+	}
+
+	/**
+	 * Get the default implementation for an interface
+	 * @param clazz The interface clazz
+	 * @return The class matching to the interface default interface
+	 */
+	public static Class getDefaultImplementation(Class clazz)
+	{
+		if (! clazz.isInterface())
+			throw new JcrMappingException(clazz + " is not an interface");
+
+		return defaultImplementation.get(clazz);
+	}
+
+
