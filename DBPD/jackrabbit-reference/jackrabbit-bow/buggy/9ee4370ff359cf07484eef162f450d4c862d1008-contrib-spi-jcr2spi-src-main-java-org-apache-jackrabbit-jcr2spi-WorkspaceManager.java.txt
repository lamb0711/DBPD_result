SPI
- replace ChildNodeEntryImpl with new implementations
- CachingItemStateManager now uses ItemStateFactory
- WorkspaceManager implements ItemStateFactory
- Retrieving an ItemState now forces loading all ancestors by design
- NodeState does not maintain indexes of child node entries anymore. They are calculated on demand.
- ItemStateFactory methods do not require parent NodeState anymore. The parent NodeState is retrieved using an ItemStateManager. Which in turn may lead to recursive retrieval of ancestors if necessary.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@426536 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.ItemStateFactory;
-public class WorkspaceManager implements UpdatableItemStateManager, NamespaceStorage, NodeTypeStorage, AccessManager {
+public class WorkspaceManager implements UpdatableItemStateManager,
+        ItemStateFactory, NamespaceStorage, NodeTypeStorage, AccessManager {
-        cache = new CachingItemStateManager(new WorkspaceItemStateManager());
+        cache = new CachingItemStateManager(this, service.getIdFactory());
-    //--------------------------------------------------------------------------
+    //---------------------------------------------------< ItemStateFactory >---
-     * Called when local or external events occured. This method is called after
-     * changes have been applied to the repository.
+     * Creates the node with information retrieved from the
+     * <code>RepositoryService</code>.
-     * @param changeLog
-     * @param events the events.
-     * @param isLocal <code>true</code> if changes were local.
+     * @inheritDoc
+     * @see ItemStateFactory#createNodeState(NodeId, ItemStateManager)
-    private void onEventReceived(ChangeLog changeLog, EventIterator events, boolean isLocal) {
-        if (changeLog != null) {
-            // use current change log for notification
-            changeLog.persisted();
-        }
-
-        // notify listener
-        // need to copy events into a list because we notify multiple listeners
-        List eventList = new ArrayList();
-        while (events.hasNext()) {
-            Event e = events.nextEvent();
-            eventList.add(e);
-        }
-
-        InternalEventListener[] lstnrs = (InternalEventListener[]) listeners.toArray(new InternalEventListener[listeners.size()]);
-        for (int i = 0; i < lstnrs.length; i++) {
-           lstnrs[i].onEvent(new EventIteratorImpl(eventList), isLocal);
-        }
-    }
-
-    /**
-     * Build a new <code>NodeState</code> from the information retrieved
-     * from the <code>RepositoryService</code>.
-     *
-     * @param id node id
-     * @return node state
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
-     */
-    private NodeState getNodeState(NodeId id)
+    public NodeState createNodeState(NodeId nodeId, ItemStateManager ism)
-            NodeInfo info = service.getNodeInfo(sessionInfo, id);
+            NodeInfo info = service.getNodeInfo(sessionInfo, nodeId);
+            // get parent
+            NodeState parent = (parentId != null) ? (NodeState) ism.getItemState(parentId) : null;
+            // TODO pass parent in constructor of NodeState
+
-            // references to child items
+            // references to child items
-                NodeInfo childInfo = service.getNodeInfo(sessionInfo, (org.apache.jackrabbit.spi.NodeId)it.nextId());
+                NodeInfo childInfo = service.getNodeInfo(sessionInfo, (NodeId) it.nextId());
+            // references to properties
-     * Build a new <code>PropertyState</code> from the information retrieved
-     * from the <code>RepositoryService</code>.
+     * Creates the property with information retrieved from the
+     * <code>RepositoryService</code>.
-     * @param id property id
-     * @return property state
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
+     * @inheritDoc
+     * @see ItemStateFactory#createPropertyState(PropertyId, ItemStateManager)
-    private PropertyState getPropertyState(PropertyId id)
+    public PropertyState createPropertyState(PropertyId propertyId,
+                                             ItemStateManager ism)
-            PropertyInfo info = service.getPropertyInfo(sessionInfo, id);
+            PropertyInfo info = service.getPropertyInfo(sessionInfo, propertyId);
+
+            // get parent
+            NodeState parent = (NodeState) ism.getItemState(info.getParentId());
+            // TODO: pass parent in constructor of PropertyState
+    //--------------------------------------------------------------------------
+
+    /**
+     * Called when local or external events occured. This method is called after
+     * changes have been applied to the repository.
+     *
+     * @param changeLog
+     * @param events the events.
+     * @param isLocal <code>true</code> if changes were local.
+     */
+    private void onEventReceived(ChangeLog changeLog, EventIterator events, boolean isLocal) {
+        if (changeLog != null) {
+            // use current change log for notification
+            changeLog.persisted();
+        }
+
+        // notify listener
+        // need to copy events into a list because we notify multiple listeners
+        List eventList = new ArrayList();
+        while (events.hasNext()) {
+            Event e = events.nextEvent();
+            eventList.add(e);
+        }
+
+        InternalEventListener[] lstnrs = (InternalEventListener[]) listeners.toArray(new InternalEventListener[listeners.size()]);
+        for (int i = 0; i < lstnrs.length; i++) {
+           lstnrs[i].onEvent(new EventIteratorImpl(eventList), isLocal);
+        }
+    }
+
-                PropertyState mergeFailedState = getPropertyState(getIdFactory().createPropertyId(nId, QName.JCR_MERGEFAILED));
+                PropertyState mergeFailedState = (PropertyState) cache.getItemState(
+                        getIdFactory().createPropertyId(nId, QName.JCR_MERGEFAILED));
+
-                PropertyState predecessorState = getPropertyState(getIdFactory().createPropertyId(nId, QName.JCR_PREDECESSORS));
+                PropertyState predecessorState = (PropertyState) cache.getItemState(
+                        getIdFactory().createPropertyId(nId, QName.JCR_PREDECESSORS));
+
-    public class WorkspaceItemStateManager implements ItemStateManager {
-
-        public ItemState getItemState(ItemId id) throws NoSuchItemStateException, ItemStateException {
-            ItemState state;
-            if (id.denotesNode()) {
-                state = getNodeState((NodeId) id);
-            } else {
-                state = getPropertyState((PropertyId) id);
-            }
-            return state;
-        }
-
-        public boolean hasItemState(ItemId id) {
-            try {
-                return service.exists(sessionInfo, id);
-            } catch (RepositoryException e) {
-                log.error(e.getMessage());
-                return false;
-            }
-        }
-
-        public NodeReferences getNodeReferences(NodeId id)
-                throws NoSuchItemStateException, ItemStateException {
-            try {
-                NodeReferencesImpl nrefs = new NodeReferencesImpl(id);
-                NodeInfo info = service.getNodeInfo(sessionInfo, id);
-                PropertyId[] refs = info.getReferences();
-                for (int i = 0; i < refs.length; i++) {
-                    PropertyInfo pInfo = service.getPropertyInfo(sessionInfo, refs[i]);
-                    nrefs.addReference(pInfo.getId());
-                }
-                return nrefs;
-            } catch (PathNotFoundException e) {
-                log.error(e.getMessage());
-                throw new NoSuchItemStateException(e.getMessage(), e);
-            } catch (RepositoryException e) {
-                throw new ItemStateException(e.getMessage(), e);
-            }
-        }
-
-        public boolean hasNodeReferences(NodeId id) {
-            try {
-                NodeInfo info = service.getNodeInfo(sessionInfo, id);
-                return info.getReferences().length > 0;
-            } catch (PathNotFoundException e) {
-                log.error(e.getMessage());
-            } catch (RepositoryException e) {
-                log.error(e.getMessage());
-            }
-            return false;
-        }
-    }
