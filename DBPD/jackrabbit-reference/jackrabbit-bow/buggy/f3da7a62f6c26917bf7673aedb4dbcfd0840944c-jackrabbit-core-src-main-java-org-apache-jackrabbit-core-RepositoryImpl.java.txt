JCR-1061 Allow extendability of RepositoryImpl.WorkspaceInfo


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@566140 13f79535-47bb-0310-9956-ffa450edef68

-        long getIdleTimestamp() {
+        final long getIdleTimestamp() {
-        void setIdleTimestamp(long ts) {
+        final void setIdleTimestamp(long ts) {
-        protected boolean isInitialized() {
+        protected final boolean isInitialized() {
-        FileSystem getFileSystem() {
+        protected FileSystem getFileSystem() {
-        PersistenceManager getPersistenceManager()
+        protected PersistenceManager getPersistenceManager()
-        SharedItemStateManager getItemStateProvider()
+        protected SharedItemStateManager getItemStateProvider()
-        ObservationDispatcher getObservationDispatcher() {
+        protected ObservationDispatcher getObservationDispatcher() {
-        SearchManager getSearchManager() throws RepositoryException {
+        protected SearchManager getSearchManager() throws RepositoryException {
-        LockManager getLockManager() throws RepositoryException {
+        protected LockManager getLockManager() throws RepositoryException {
-        boolean initialize() throws RepositoryException {
+        final boolean initialize() throws RepositoryException {
-
-
-                FileSystemConfig fsConfig = config.getFileSystemConfig();
-                fs = fsConfig.createFileSystem();
-
-                persistMgr = createPersistenceManager(new File(config.getHomeDir()),
-                        fs,
-                        config.getPersistenceManagerConfig(),
-                        rootNodeId,
-                        nsReg,
-                        ntReg);
-
-                // create item state manager
-                try {
-                    itemStateMgr = createItemStateManager(persistMgr, rootNodeId, ntReg, true, cacheFactory);
-                    try {
-                        itemStateMgr.addVirtualItemStateProvider(
-                                vMgr.getVirtualItemStateProvider());
-                        itemStateMgr.addVirtualItemStateProvider(
-                                virtNTMgr.getVirtualItemStateProvider());
-                    } catch (Exception e) {
-                        log.error("Unable to add vmgr: " + e.toString(), e);
-                    }
-                    if (clusterNode != null && config.isClustered()) {
-                        updateChannel = clusterNode.createUpdateChannel(getName());
-                        itemStateMgr.setEventChannel(updateChannel);
-                        updateChannel.setListener(this);
-                    }
-                } catch (ItemStateException ise) {
-                    String msg = "failed to instantiate shared item state manager";
-                    log.debug(msg);
-                    throw new RepositoryException(msg, ise);
-                }
-
-                dispatcher = new ObservationDispatcher();
-
-                // register the observation factory of that workspace
-                delegatingDispatcher.addDispatcher(dispatcher);
-
+                doInitialize();
-
+         * Does the actual initialization work. assumes holding write lock.
+         * @throws RepositoryException if an error occurs.
+         */
+        protected void doInitialize() throws RepositoryException {
+            FileSystemConfig fsConfig = config.getFileSystemConfig();
+            fs = fsConfig.createFileSystem();
+
+            persistMgr = createPersistenceManager(new File(config.getHomeDir()),
+                    fs,
+                    config.getPersistenceManagerConfig(),
+                    rootNodeId,
+                    nsReg,
+                    ntReg);
+
+            // create item state manager
+            try {
+                itemStateMgr = createItemStateManager(persistMgr, rootNodeId, ntReg, true, cacheFactory);
+                try {
+                    itemStateMgr.addVirtualItemStateProvider(
+                            vMgr.getVirtualItemStateProvider());
+                    itemStateMgr.addVirtualItemStateProvider(
+                            virtNTMgr.getVirtualItemStateProvider());
+                } catch (Exception e) {
+                    log.error("Unable to add vmgr: " + e.toString(), e);
+                }
+                if (clusterNode != null && config.isClustered()) {
+                    updateChannel = clusterNode.createUpdateChannel(getName());
+                    itemStateMgr.setEventChannel(updateChannel);
+                    updateChannel.setListener(this);
+                }
+            } catch (ItemStateException ise) {
+                String msg = "failed to instantiate shared item state manager";
+                log.debug(msg);
+                throw new RepositoryException(msg, ise);
+            }
+
+            dispatcher = new ObservationDispatcher();
+
+            // register the observation factory of that workspace
+            delegatingDispatcher.addDispatcher(dispatcher);
+        }
+
+        /**
-        void disposeIfIdle(long maxIdleTime) {
+        final void disposeIfIdle(long maxIdleTime) {
-        protected void dispose() {
+        final void dispose() {
-
-
-                // inform cluster node about disposal
-                if (updateChannel != null) {
-                    updateChannel.setListener(null);
-                }
-                if (lockChannel != null) {
-                    lockChannel.setListener(null);
-                }
-
-                // deregister the observation factory of that workspace
-                delegatingDispatcher.removeDispatcher(dispatcher);
-
-                // dispose observation manager factory
-                dispatcher.dispose();
-                dispatcher = null;
-
-                // shutdown search managers
-                if (searchMgr != null) {
-                    searchMgr.close();
-                    searchMgr = null;
-                }
-
-                // close system session
-                if (systemSession != null) {
-                    systemSession.removeListener(RepositoryImpl.this);
-                    systemSession.logout();
-                    systemSession = null;
-                }
-
-                // dispose shared item state manager
-                itemStateMgr.dispose();
-                itemStateMgr = null;
-
-                // close persistence manager
-                try {
-                    persistMgr.close();
-                } catch (Exception e) {
-                    log.error("error while closing persistence manager of workspace "
-                            + config.getName(), e);
-                }
-                persistMgr = null;
-
-                // close lock manager
-                if (lockMgr != null) {
-                    lockMgr.close();
-                    lockMgr = null;
-                }
-
-                // close workspace file system
-                try {
-                    fs.close();
-                } catch (FileSystemException fse) {
-                    log.error("error while closing file system of workspace "
-                            + config.getName(), fse);
-                }
-                fs = null;
-
+                doDispose();
-
+         * Does the actual disposal. assumes holding write lock.
+         */
+        protected void doDispose() {
+            // inform cluster node about disposal
+            if (updateChannel != null) {
+                updateChannel.setListener(null);
+            }
+            if (lockChannel != null) {
+                lockChannel.setListener(null);
+            }
+
+            // deregister the observation factory of that workspace
+            delegatingDispatcher.removeDispatcher(dispatcher);
+
+            // dispose observation manager factory
+            dispatcher.dispose();
+            dispatcher = null;
+
+            // shutdown search managers
+            if (searchMgr != null) {
+                searchMgr.close();
+                searchMgr = null;
+            }
+
+            // close system session
+            if (systemSession != null) {
+                systemSession.removeListener(RepositoryImpl.this);
+                systemSession.logout();
+                systemSession = null;
+            }
+
+            // dispose shared item state manager
+            itemStateMgr.dispose();
+            itemStateMgr = null;
+
+            // close persistence manager
+            try {
+                persistMgr.close();
+            } catch (Exception e) {
+                log.error("error while closing persistence manager of workspace "
+                        + config.getName(), e);
+            }
+            persistMgr = null;
+
+            // close lock manager
+            if (lockMgr != null) {
+                lockMgr.close();
+                lockMgr = null;
+            }
+
+            // close workspace file system
+            try {
+                fs.close();
+            } catch (FileSystemException fse) {
+                log.error("error while closing file system of workspace "
+                        + config.getName(), fse);
+            }
+            fs = null;
+        }
+
+        /**
