minor improvement with private methods

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@651188 13f79535-47bb-0310-9956-ffa450edef68

-            // check if state exists for the given item
+            // shortcut: check if state exists for the given item
-
-            ItemData data = getItemData(itemId, path);
-            return data != null;
-        } catch (ItemNotFoundException infe) {
-            return false;
+            ItemData data = getItemData(itemId, path, true);
+            return true;
-        ItemData data = getItemData(itemId, path);
-        if (data == null) {
-            throw new AccessDeniedException("cannot read item " + itemId);
-        }
+        boolean permissionCheck = true;
+        ItemData data = getItemData(itemId, path, permissionCheck);
-     * @param path The path of the item to retrieve the data for or
-     * <code>null</code>. In the latter case the id (instead of the path) is
-     * used to test if READ permission is granted.
-    private ItemData getItemData(ItemId itemId, Path path)
+    private ItemData getItemData(ItemId itemId)
+            throws ItemNotFoundException, AccessDeniedException,
+            RepositoryException {
+        return getItemData(itemId, null, true);
+    }
+
+    /**
+     * Retrieves the data of the item with given <code>id</code>. If the
+     * specified item doesn't exist an <code>ItemNotFoundException</code> will
+     * be thrown.
+     * If <code>permissionCheck</code> is <code>true</code> and the item exists
+     * but the current session is not granted read access an
+     * <code>AccessDeniedException</code> will be thrown.
+     *
+     * @param itemId id of item to be retrieved
+     * @param path The path of the item to retrieve the data for or
+     * <code>null</code>. In the latter case the id (instead of the path) is
+     * used to test if READ permission is granted.
+     * @param permissionCheck
+     * @return the ItemData for the item identified by the given itemId.
+     * @throws ItemNotFoundException if no item with given <code>id</code> exists
+     * @throws AccessDeniedException if the current session is not allowed to
+     *                               read the said item
+     * @throws RepositoryException   if another error occurs
+     */
+    private ItemData getItemData(ItemId itemId, Path path, boolean permissionCheck)
-            data = createItemData(state, path);
+            data = createItemData(state, path, permissionCheck);
-            // already cached: check if read-permission is granted in order
-            // to have a consistent behaviour to 'itemExists' above.
-            if (!canRead(data, path)) {
+            // already cached: if 'permissionCheck' is true, make sure read
+            // permission is granted.
+            if (permissionCheck && !canRead(data, path)) {
-                return null;
+                throw new AccessDeniedException("cannot read item " + data.getId());
-            data = (AbstractNodeData) getItemData(id, null);
+            data = (AbstractNodeData) getItemData(id);
-        ItemData data = getItemData(parentId, null);
+        ItemData data = getItemData(parentId);
-        ItemData data = getItemData(parentId, null);
+        ItemData data = getItemData(parentId);
-        ItemData data = getItemData(parentId, null);
+        ItemData data = getItemData(parentId);
-        ItemData data = getItemData(parentId, null);
+        ItemData data = getItemData(parentId);
-     * Same as {@link #createItemData(ItemState, Path, boolean)} where the
-     * permissionCheck flag is 'true'. This method will throw
-     * <code>AccessDeniedException</code> if reading the item data is not
-     * allowed.
-     *
-     * @param state
-     * @return
-     * @throws RepositoryException
-     */
-    private ItemData createItemData(ItemState state, Path path) throws RepositoryException {
-        return createItemData(state, path, true);
-    }
-
-    /**
-     * cache. In order to benefit from the cache {@link #getItemData(ItemId, Path)}
-     * should be called
+     * cache. In order to benefit from the cache
+     * {@link #getItemData(ItemId, Path, boolean)} should be called.
