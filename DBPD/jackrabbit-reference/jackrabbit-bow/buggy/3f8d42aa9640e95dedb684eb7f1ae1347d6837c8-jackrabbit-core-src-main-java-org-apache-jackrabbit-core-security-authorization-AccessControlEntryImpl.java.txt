JCR-2268 Generify Security API


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@806534 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry;
-import org.apache.jackrabbit.value.StringValue;
-import org.apache.jackrabbit.value.ValueHelper;
+import java.security.Principal;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
-import java.security.Principal;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
+
+import org.apache.jackrabbit.api.security.JackrabbitAccessControlEntry;
+import org.apache.jackrabbit.value.ValueHelper;
-    private final Map restrictions;
+    private final Map<String, Value> restrictions;
-                                     boolean isAllow, Map restrictions, ValueFactory valueFactory)
+                                     boolean isAllow, Map<String, Value> restrictions,
+                                     ValueFactory valueFactory)
-        for (int i = 0; i < privileges.length; i++) {
-            if (privileges[i].isAbstract()) {
-                throw new AccessControlException("Privilege " + privileges[i] + " is abstract.");
+        for (Privilege privilege : privileges) {
+            if (privilege.isAbstract()) {
+                throw new AccessControlException("Privilege " + privilege + " is abstract.");
-            this.restrictions = Collections.EMPTY_MAP;
+            this.restrictions = Collections.emptyMap();
-            this.restrictions = new HashMap(restrictions.size());
+            this.restrictions = new HashMap<String, Value>(restrictions.size());
-            for (Iterator it = restrictions.keySet().iterator(); it.hasNext();) {
-                Object key = it.next();
-                Object v = restrictions.get(key);
-                Value value;
-                if (v instanceof Value) {
-                    // create copy of the value
-                    value = ValueHelper.copy((Value) v, valueFactory);
-                } else {
-                    // fallback
-                    value = new StringValue(v.toString());
-                }
-                this.restrictions.put(key.toString(), value);
+            for (String key : restrictions.keySet()) {
+                Value value = restrictions.get(key);
+                value = ValueHelper.copy(value, valueFactory);
+                this.restrictions.put(key, value);
-        return (String[]) restrictions.keySet().toArray(new String[restrictions.size()]);
+        return restrictions.keySet().toArray(new String[restrictions.size()]);
-            return ValueHelper.copy((Value) restrictions.get(restrictionName), valueFactory);
+            return ValueHelper.copy(restrictions.get(restrictionName), valueFactory);
