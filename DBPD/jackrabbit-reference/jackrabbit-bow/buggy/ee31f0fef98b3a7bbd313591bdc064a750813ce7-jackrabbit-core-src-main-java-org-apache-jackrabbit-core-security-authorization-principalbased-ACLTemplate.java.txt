JCR-1588 JSR 283: Access Control

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@748247 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.NamespaceException;
-import java.util.Arrays;
+import java.util.Set;
-                    Entry entry = new Entry(principal, privileges, isAllow, restrictions);
+                    AccessControlEntry entry = createEntry(principal, privileges, isAllow, restrictions);
+    AccessControlEntry createEntry(Principal princ, Privilege[] privileges, boolean allow, Map restrictions) throws RepositoryException {
+        if (!principal.equals(princ)) {
+            throw new AccessControlException("Invalid principal. Expected: " + principal);
+        }
+        if (!allow && principal instanceof Group) {
+            throw new AccessControlException("For group principals permissions can only be added but not denied.");
+        }
+
+        Set rNames = restrictions.keySet();
+        if (!rNames.contains(jcrNodePathName)) {
+            throw new AccessControlException("Missing mandatory restriction: " + jcrNodePathName);
+        }
+
+        // make sure the nodePath restriction is of type PATH
+        Value v = (Value) restrictions.get(jcrNodePathName);
+        if (v.getType() != PropertyType.PATH) {
+            v = V_FACTORY.createValue(v.getString(), PropertyType.PATH);
+            restrictions.put(jcrNodePathName, v);
+        }
+        // ... and glob is of type STRING.
+        v = (Value) restrictions.get(jcrGlobName);
+        if (v != null && v.getType() != PropertyType.STRING) {
+            v = V_FACTORY.createValue(v.getString(), PropertyType.STRING);
+            restrictions.put(jcrGlobName, v);
+        }
+        return new Entry(princ, privileges, allow, restrictions);
+    }
+
+     * @see JackrabbitAccessControlList#getRestrictionNames()
+     */
+    public String[] getRestrictionNames() {
+        return new String[] {jcrNodePathName, jcrGlobName};
+    }
+
+    /**
+     * @see JackrabbitAccessControlList#getRestrictionType(String)
+     */
+    public int getRestrictionType(String restrictionName) {
+        if (jcrNodePathName.equals(restrictionName)) {
+            return PropertyType.PATH;
+        } else if (jcrGlobName.equals(restrictionName)) {
+            return PropertyType.STRING;
+        } else {
+            return PropertyType.UNDEFINED;
+        }
+    }
+
+    /**
-        Entry entry = new Entry(principal, privileges, isAllow, restrictions);
+        AccessControlEntry entry = createEntry(principal, privileges, isAllow, restrictions);
-        return (Entry[]) entries.toArray(new Entry[entries.size()]);
+        return (AccessControlEntry[]) entries.toArray(new AccessControlEntry[entries.size()]);
-        Entry(Principal principal, Privilege[] privileges, boolean allow, Map restrictions)
+        private Entry(Principal principal, Privilege[] privileges, boolean allow, Map restrictions)
-            checkValidEntry();
+            Value np = getRestriction(jcrNodePathName);
-        private void checkValidEntry() throws AccessControlException, NamespaceException {
-            if (!principal.equals(getPrincipal())) {
-                throw new AccessControlException("Invalid principal. Expected: " + principal);
-            }
-            if (!isAllow() && getPrincipal() instanceof Group) {
-                throw new AccessControlException("For group principals permissions can only be added but not denied.");
-            }
-
-            String[] rNames = getRestrictionNames();
-            if (!Arrays.asList(rNames).contains(jcrNodePathName)) {
-                throw new AccessControlException("Missing mandatory restriction: " + jcrNodePathName);
-            }
-        }
-
