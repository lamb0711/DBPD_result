JCR-234 - VersionTest.testGetUUID() fails
JCR-232 - jcr:baseVersion is not updated when the base version is removed from the version history


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293286 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.ItemId;
-import org.apache.jackrabbit.core.state.ItemState;
-    private ReferenceMap items = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
+    //private ReferenceMap items = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK);
-        // need to recalc successor prop
-        InternalVersion[] preds = version.getPredecessors();
-        for (int i=0; i<preds.length; i++) {
-            ItemState state = (ItemState) items.remove(new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS));
-            if (state != null) {
-                state.discard();
-            }
-        }
-        invalidateItem(new NodeId(version.getVersionHistory().getId()), true);
+
+
+
+        // invalidate predecessors successor property
+        InternalVersion[] preds = version.getPredecessors();
+        for (int i=0; i<preds.length; i++) {
+            PropertyId propId = new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS);
+            versProvider.onPropertyChanged(propId);
+        }
-        invalidateItem(new NodeId(vh.getId()), true);
+        // invalidate predecessors successor properties
+        InternalVersion preds[] = version.getInternalVersion().getPredecessors();
+        for (int i=0; i<preds.length; i++) {
+            PropertyId propId = new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS);
+            versProvider.onPropertyChanged(propId);
+        }
-        invalidateItem(new NodeId(labelNode.internalGetUUID()), true);
+    public boolean setNodeReferences(NodeReferences refs) {
+        try {
+            InternalVersionItem item = getItem(refs.getTargetId().getUUID());
+            setItemReferences(item, refs.getReferences());
+            return true;
+        } catch (RepositoryException e) {
+            log.error("Error while setting references: " + e.toString());
+            return false;
+        }
+    }
+
-     * invalidates the item
-     *
-     * @param id
-     */
-    private void invalidateItem(ItemId id, boolean recursive) {
-        ItemState state = (ItemState) items.get(id);
-        if (state != null) {
-            if (recursive && state instanceof NodeState) {
-                NodeState nState = (NodeState) state;
-                Iterator iter = nState.getPropertyNames().iterator();
-                while (iter.hasNext()) {
-                    QName propName = (QName) iter.next();
-                    invalidateItem(new PropertyId(nState.getUUID(), propName), false);
-                }
-                iter = nState.getChildNodeEntries().iterator();
-                while (iter.hasNext()) {
-                    NodeState.ChildNodeEntry pe = (NodeState.ChildNodeEntry) iter.next();
-                    invalidateItem(new NodeId(pe.getUUID()), true);
-                }
-            }
-            state.notifyStateUpdated();
-        }
-    }
-
-
-    /**
