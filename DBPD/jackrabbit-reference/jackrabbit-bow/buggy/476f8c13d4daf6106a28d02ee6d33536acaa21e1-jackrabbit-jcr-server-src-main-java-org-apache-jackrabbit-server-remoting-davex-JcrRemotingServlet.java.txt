JCR-2018 Jcr-Remoting: PathNotFoundException if item name ends with .json

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@752480 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.DavResourceFactory;
+import org.apache.jackrabbit.webdav.observation.SubscriptionManager;
+import org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl;
+import javax.jcr.PathNotFoundException;
+
+    public DavResourceFactory getResourceFactory() {
+        return new ResourceFactoryImpl(txMgr, subscriptionMgr);
+    }
+
-                    
+
-                    int depth = ((WrappingLocator) davResource.getLocator()).depth;
+                    int depth = ((WrappingLocator) davResource.getLocator()).getDepth();
-                return davResource.exists() && ((WrappingLocator) locator).isJson;
+                return davResource.exists() && (locator instanceof WrappingLocator)
+                        && ((WrappingLocator) locator).isJsonRequest;
-     * TODO: TOBEFIXED will not behave properly if resource path (i.e. item name)
-     * TODO            ends with .json extension and/or contains a depth-selector pattern.
+     * Locator factory that specially deals with hrefs having a .json extension.
-        public DavResourceLocator createResourceLocator(String string, String string1) {
-            return new WrappingLocator(super.createResourceLocator(string, string1), isJson(string1), getDepth(string1));
-        }
-
-        public DavResourceLocator createResourceLocator(String string, String string1, String string2) {
-            return super.createResourceLocator(string, string1, string2);
-        }
-
-        public DavResourceLocator createResourceLocator(String string, String string1, String string2, boolean b) {
-            return super.createResourceLocator(string, string1, string2, b);
-        }
-
-        protected String getRepositoryPath(String resourcePath, String wspPath) {
-            if (resourcePath == null) {
-                return null;
+        public DavResourceLocator createResourceLocator(String prefix, String href) {
+            DavResourceLocator loc = super.createResourceLocator(prefix, href);
+            if (endsWithJson(href)) {
+                loc = new WrappingLocator(super.createResourceLocator(prefix, href));
-            String rp = resourcePath;
-            if (isJson(rp)) {
-                rp = resourcePath.substring(0, resourcePath.lastIndexOf('.'));
-                int pos = rp.lastIndexOf(".");
-                if (pos > -1) {
-                    String depthStr = rp.substring(pos + 1);
-                    try {
-                        Integer.parseInt(depthStr);
-                        rp = rp.substring(0, pos);
-                    } catch (NumberFormatException e) {
-                        // ignore return rp
-                    }
-                }
-            }
-            return super.getRepositoryPath(rp, wspPath);
+            return loc;
-        private static boolean isJson(String s) {
+        public DavResourceLocator createResourceLocator(String prefix, String workspacePath, String path, boolean isResourcePath) {
+            DavResourceLocator loc = super.createResourceLocator(prefix, workspacePath, path, isResourcePath);
+            if (isResourcePath && endsWithJson(path)) {
+                loc = new WrappingLocator(loc);
+            }
+            return loc;
+        }
+
+        private static boolean endsWithJson(String s) {
-
-        private static int getDepth(String s) {
-            int depth = Integer.MIN_VALUE;
-            if (isJson(s)) {
-                String tmp = s.substring(0, s.lastIndexOf('.'));
-                int pos = tmp.lastIndexOf(".");
-                if (pos > -1) {
-                    String depthStr = tmp.substring(pos + 1);
-                    try {
-                        depth = Integer.parseInt(depthStr);
-                    } catch (NumberFormatException e) {
-                        // missing depth
-                    }
-                }
-            }
-            return depth;
-        }
+    /**
+     * Resource locator that removes trailing .json extensions and depth
+     * selector that do not form part of the repository path.
+     * As the locator and it's factory do not have access to a JCR session
+     * the <code>extraJson</code> flag may be reset later on.
+     *
+     * @see ResourceFactoryImpl#getItem(org.apache.jackrabbit.webdav.jcr.JcrDavSession, org.apache.jackrabbit.webdav.DavResourceLocator)  
+     */
-        private final boolean isJson;
-        private final int depth;
+        private boolean isJsonRequest = true;
+        private int depth = Integer.MIN_VALUE;
+        private String repositoryPath;
-        private WrappingLocator(DavResourceLocator loc, boolean isJson, int depth) {
+        private WrappingLocator(DavResourceLocator loc) {
-            this.isJson = isJson;
-            this.depth = depth;
+
+        private void extract() {
+            String rp = loc.getRepositoryPath();
+            rp = rp.substring(0, rp.lastIndexOf('.'));
+            int pos = rp.lastIndexOf(".");
+            if (pos > -1) {
+                String depthStr = rp.substring(pos + 1);
+                try {
+                    depth = Integer.parseInt(depthStr);
+                    rp = rp.substring(0, pos);
+                } catch (NumberFormatException e) {
+                    // apparently no depth-info -> ignore
+                }
+            }
+            repositoryPath = rp;
+        }
+
+        private int getDepth() {
+            if (isJsonRequest) {
+                if (repositoryPath == null) {
+                    extract();
+                }
+                return depth;
+            } else {
+                return Integer.MIN_VALUE;
+            }
+        }
+
-            return loc.getRepositoryPath();
+            if (isJsonRequest) {
+                if (repositoryPath == null) {
+                    extract();
+                }
+                return repositoryPath;
+            } else {
+                return loc.getRepositoryPath();
+            }
+        }
+    }
+
+    /**
+     * Resource factory used to make sure that the .json extension was properly
+     * interpreted.
+     */
+    private static class ResourceFactoryImpl extends org.apache.jackrabbit.webdav.jcr.DavResourceFactoryImpl {
+
+        /**
+         * Create a new <code>DavResourceFactoryImpl</code>.
+         *
+         * @param txMgr
+         * @param subsMgr
+         */
+        public ResourceFactoryImpl(TxLockManagerImpl txMgr, SubscriptionManager subsMgr) {
+            super(txMgr, subsMgr);
+        }
+
+        protected Item getItem(JcrDavSession sessionImpl, DavResourceLocator locator) throws PathNotFoundException, RepositoryException {
+            if (locator instanceof WrappingLocator && ((WrappingLocator)locator).isJsonRequest) {
+                // check if the .json extension has been correctly interpreted.
+                Session s = sessionImpl.getRepositorySession();
+                if (s.itemExists(((WrappingLocator)locator).loc.getRepositoryPath())) {
+                    // an item exists with the original calculated repo-path
+                    // -> assume that the repository item path ends with .json
+                    // or .depth.json. i.e. .json wasn't an extra extension
+                    // appended to request the json-serialization of the node.
+                    // -> change the flag in the WrappingLocator correspondingly.
+                    ((WrappingLocator) locator).isJsonRequest = false;
+                }
+            }
+            return super.getItem(sessionImpl, locator);
