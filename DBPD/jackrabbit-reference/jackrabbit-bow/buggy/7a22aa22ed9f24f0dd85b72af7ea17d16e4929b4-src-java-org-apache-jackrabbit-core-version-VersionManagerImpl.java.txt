Removed o.a.j.Constants and moved all name constants to o.a.j.name.QName in order to simplify package dependencies. Also added two new constants: QName.EMPTY and QName.WILDCARD.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293034 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.Constants;
-public class VersionManagerImpl implements VersionManager, Constants {
+public class VersionManagerImpl implements VersionManager {
-                root.setDefinitionId(ntReg.getEffectiveNodeType(REP_SYSTEM).getApplicableChildNodeDef(
-                        JCR_VERSIONSTORAGE, REP_VERSIONSTORAGE).getId());
-                root.setNodeTypeName(REP_VERSIONSTORAGE);
-                PropertyState pt = pMgr.createNew(new PropertyId(rootUUID, JCR_PRIMARYTYPE));
-                pt.setDefinitionId(ntReg.getEffectiveNodeType(REP_SYSTEM).getApplicablePropertyDef(
-                        JCR_PRIMARYTYPE, PropertyType.NAME, false).getId());
+                root.setDefinitionId(ntReg.getEffectiveNodeType(QName.REP_SYSTEM).getApplicableChildNodeDef(
+                        QName.JCR_VERSIONSTORAGE, QName.REP_VERSIONSTORAGE).getId());
+                root.setNodeTypeName(QName.REP_VERSIONSTORAGE);
+                PropertyState pt = pMgr.createNew(new PropertyId(rootUUID, QName.JCR_PRIMARYTYPE));
+                pt.setDefinitionId(ntReg.getEffectiveNodeType(QName.REP_SYSTEM).getApplicablePropertyDef(
+                        QName.JCR_PRIMARYTYPE, PropertyType.NAME, false).getId());
-                pt.setValues(new InternalValue[]{InternalValue.create(REP_VERSIONSTORAGE)});
+                pt.setValues(new InternalValue[]{InternalValue.create(QName.REP_VERSIONSTORAGE)});
-            historyRoot = new NodeStateEx(stateMgr, ntReg, nodeState, JCR_VERSIONSTORAGE);
+            historyRoot = new NodeStateEx(stateMgr, ntReg, nodeState, QName.JCR_VERSIONSTORAGE);
-                QName name = new QName(NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
+                QName name = new QName(QName.NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
-                    NodeStateEx n = root.addNode(name, REP_VERSIONSTORAGE, null, false);
+                    NodeStateEx n = root.addNode(name, QName.REP_VERSIONSTORAGE, null, false);
-            QName historyNodeName = new QName(NS_DEFAULT_URI, uuid);
+            QName historyNodeName = new QName(QName.NS_DEFAULT_URI, uuid);
-            QName name = new QName(NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
+            QName name = new QName(QName.NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
-        QName historyNodeName = new QName(NS_DEFAULT_URI, uuid);
+        QName historyNodeName = new QName(QName.NS_DEFAULT_URI, uuid);
-                    if (ntName.equals(NT_FROZENNODE)) {
+                    if (ntName.equals(QName.NT_FROZENNODE)) {
-                    } else if (ntName.equals(NT_VERSIONEDCHILD)) {
+                    } else if (ntName.equals(QName.NT_VERSIONEDCHILD)) {
-                    } else if (ntName.equals(NT_VERSION)) {
+                    } else if (ntName.equals(QName.NT_VERSION)) {
-                    } else if (ntName.equals(NT_VERSIONHISTORY)) {
+                    } else if (ntName.equals(QName.NT_VERSIONHISTORY)) {
-            ItemState state = (ItemState) items.remove(new PropertyId(preds[i].getId(), JCR_SUCCESSORS));
+            ItemState state = (ItemState) items.remove(new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS));
-        String histUUID = node.getProperty(Constants.JCR_VERSIONHISTORY).getString();
+        String histUUID = node.getProperty(QName.JCR_VERSIONHISTORY).getString();
-        Value[] values = node.getProperty(Constants.JCR_PREDECESSORS).getValues();
+        Value[] values = node.getProperty(QName.JCR_PREDECESSORS).getValues();
-        NodeImpl labelNode = ((VersionHistoryImpl) history).getNode(JCR_VERSIONLABELS);
+        NodeImpl labelNode = ((VersionHistoryImpl) history).getNode(QName.JCR_VERSIONLABELS);
