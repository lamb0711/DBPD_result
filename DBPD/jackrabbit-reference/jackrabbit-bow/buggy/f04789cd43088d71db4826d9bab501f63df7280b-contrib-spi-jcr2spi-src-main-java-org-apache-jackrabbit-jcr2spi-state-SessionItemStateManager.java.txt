work in progress

jcr2spi
- HierarchyManager: fixing methods with ItemId param
- HierarchyManagerImpl(s): removing unused methods
- ItemManagerImpl: replacing NodeId as cacheKey
- ItemImpl: remove ISM field

jcr2spi/xml
- ImporterImpl renamed to SessionImporter (used for s-import only)
- xml import: Use UUID String instead of creating NodeIds
- ReferenceChangeTracker: remove usage of spi NodeId

jcr2spi/state
- SessionItemStateManager: ValueFactory not needed since QPropertyDefinition returns qualified values.

jcr2spi/util
- LogUtil: add 'saveGetJCRName' utility method

jcr2spi/locking
- locking: LockManager to use NodeState instead of NodeId
- locking: removing locktoken from Session checks if Session is lock holder

jcr2spi/query
- NodeIteratorImpl: fix commented code, that allows to retrieve
  search results from IdIterator returned from QueryInfo
- minor reformatting, javadoc

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@430791 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.value.ValueHelper;
-import org.apache.jackrabbit.value.ValueFormat;
-import javax.jcr.Value;
-import javax.jcr.ValueFactory;
+import java.io.IOException;
-    private final ValueFactory valueFactory;
-                                   ValueFactory valueFactory,
-        // DIFF JR: valueFactory added
-        this.valueFactory = valueFactory;
-            NodeId nodeId = ((NodeState)state).getNodeId();
+            NodeState nodeState = (NodeState)state;
-            Iterator iter = getDescendantTransientItemStates(nodeId);
+            Iterator iter = getDescendantTransientItemStates(nodeState);
-            Iterator atticIter = getDescendantTransientItemStatesInAttic(nodeId);
+            Iterator atticIter = getDescendantTransientItemStatesInAttic(nodeState);
-     * @param parentId the id of the common parent of the transient item state
-     *                 instances to be returned.
+     * @param parent the common parent state of the transient item state
+     * instances to be returned.
-    private Iterator getDescendantTransientItemStates(NodeId parentId) {
+    private Iterator getDescendantTransientItemStates(NodeState parent) {
-                    depth = getHierarchyManager().getRelativeDepth(parentId, state.getId());
+                    depth = getHierarchyManager().getRelativeDepth(parent, state);
-     * Same as <code>{@link #getDescendantTransientItemStates(NodeId)}</code>
+     * Same as <code>{@link #getDescendantTransientItemStates(NodeState)}</code>
-     * @param parentId the id of the common parent of the transient item state
-     *                 instances to be returned.
+     * @param parent the common parent of the transient item state
+     * instances to be returned.
-    private Iterator getDescendantTransientItemStatesInAttic(NodeId parentId) {
+    private Iterator getDescendantTransientItemStatesInAttic(NodeState parent) {
-                int depth = zombieHierMgr.getRelativeDepth(parentId, state.getId());
+                int depth = zombieHierMgr.getRelativeDepth(parent, state);
-            Iterator iter = getDescendantTransientItemStatesInAttic((NodeId) root.getId());
+            Iterator iter = getDescendantTransientItemStatesInAttic((NodeState)root);
-            Iterator iter = getDescendantTransientItemStates((NodeId) state.getId());
+            Iterator iter = getDescendantTransientItemStates((NodeState) state);
-            int propOptions = 0; // nothing to check
-            // execute 'addProperty' without adding operation.
-            addPropertyState(nodeState, pd.getQName(), pd.getRequiredType(), autoValue, pd, propOptions);
+            if (autoValue != null) {
+                int propOptions = 0; // nothing to check
+                // execute 'addProperty' without adding operation.
+                addPropertyState(nodeState, pd.getQName(), pd.getRequiredType(), autoValue, pd, propOptions);
+            }
-                                                          QPropertyDefinition def)
-        throws RepositoryException {
+                                                          QPropertyDefinition def) {
-        String[] defaultValues = def.getDefaultValues();
-        if (defaultValues != null && defaultValues.length > 0) {
-            Value[] vs = ValueHelper.convert(defaultValues, def.getRequiredType(), valueFactory);
-            genValues = ValueFormat.getQValues(vs, nsResolver);
+        String[] qDefaultValues = def.getDefaultValues();
+        if (qDefaultValues != null && qDefaultValues.length > 0) {
+            if (def.getRequiredType() == PropertyType.BINARY) {
+                try {
+                    genValues = QValue.create(def.getDefaultValuesAsStream(), def.getRequiredType());
+                } catch (IOException e) {
+                    log.error("Internal error while build QValue from property definition: ", e.getMessage());
+                    return null;
+                }
+            } else {
+               genValues = QValue.create(qDefaultValues, def.getRequiredType());
+            }
