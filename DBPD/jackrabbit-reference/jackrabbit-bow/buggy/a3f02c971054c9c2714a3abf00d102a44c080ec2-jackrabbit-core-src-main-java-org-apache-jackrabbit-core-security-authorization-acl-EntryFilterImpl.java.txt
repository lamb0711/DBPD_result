JCR-2700 : Allow for wildcard restriction in resource-based ACEs

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983906 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.commons.conversion.PathResolver;
+import javax.jcr.NamespaceException;
+    private final Path path;
+    private final PathResolver resolver;
-    EntryFilterImpl(Collection<String> principalNames) {
+    private String itemPath;
+
+    EntryFilterImpl(Collection<String> principalNames, Path path, PathResolver resolver) {
+        this.path = path;
+        this.resolver = resolver;
-                if (principalNames == null || principalNames.contains(ace.getPrincipal().getName())) {
+                if (matches(ace)) {
+
+    private boolean matches(AccessControlEntry ace) {
+        if (principalNames == null || principalNames.contains(ace.getPrincipal().getName())) {
+            if (((ACLTemplate.Entry) ace).getRestrictions().isEmpty()) {
+                // short cut: there is no glob-restriction -> the entry matches
+                // because it is either defined on the node or inherited.
+                return true;
+            } else {
+                // there is a glob-restriction: check if the target path matches
+                // this entry.
+                try {
+                    return ((ACLTemplate.Entry) ace).matches(getPath());
+                } catch (NamespaceException e) {
+                    log.error("Cannot determine ACE match.", e);
+                }
+            }
+        }
+
+        // doesn't match this filter -> ignore
+        return false;
+    }
+
+    String getPath() throws NamespaceException {
+        if (itemPath == null) {
+            itemPath = resolver.getJCRPath(path);
+        }
+        return itemPath;
+    }
