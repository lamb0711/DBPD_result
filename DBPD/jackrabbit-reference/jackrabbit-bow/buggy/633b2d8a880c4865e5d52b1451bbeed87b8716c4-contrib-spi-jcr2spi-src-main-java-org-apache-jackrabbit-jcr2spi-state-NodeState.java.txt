fixed: move, reorder (work in progress)
fixed: locktoken transfer
fixed: recursive transient removal of invalidated tree fails (restoreTests)
improve: simplify usage of workspace operations
fixed: store original itemId with transient operations in order to properly reflect the changelog upon batch creation
fixed: workspace import doesn't invalidate
fixed: session import uuid handling




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@513279 13f79535-47bb-0310-9956-ffa450edef68

-    private NodeEntry hierarchyEntry;
+    private final NodeEntry hierarchyEntry;
-            if (hierarchyEntry != nState.hierarchyEntry) {
-                hierarchyEntry = nState.hierarchyEntry;
-                modified = true;
-            }
-        return getNodeEntry().getId();
+        if (isWorkspaceState()) {
+            return getNodeEntry().getWorkspaceId();
+        } else {
+            return getNodeEntry().getId();
+        }
-            definition = getEffectiveNodeType().getApplicableNodeDefinition(getQName(), getNodeTypeName(), getNodeTypeRegistry());
+            definition = getEffectiveParentNodeType().getApplicableNodeDefinition(getQName(), getNodeTypeName(), getNodeTypeRegistry());
-                    // move overlayed state as well by setting NodeEntry and
-                    // definition according to session-state
+                    // set definition of overlayed according to session-state
-                    overlayed.hierarchyEntry = ((NodeState) modState).hierarchyEntry;
+        
-    synchronized void moveChildNodeEntry(NodeState newParent, NodeState childState, QName newName, QNodeDefinition newDefinition)
+    synchronized void moveChildNodeEntry(NodeState newParent, NodeState childState,
+                                         QName newName, QNodeDefinition newDefinition)
-        NodeEntry newEntry = getNodeEntry().moveNodeEntry(childState, newName, newParent.getNodeEntry());
-
-        // set new NodeEntry on child state, that differs from the HE of the workspaceState
-        // TODO: check again
-        childState.hierarchyEntry = newEntry;
+        childState.getNodeEntry().move(newName, newParent.getNodeEntry(), true);
-        childState.markModified();
+        childState.markModified();
