- adjusting proper startup order for VersionManager
- adding shutdown to persistence manager of versions

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153192 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
-import javax.jcr.PropertyType;
+     * The root node UUID for the version storage
+     */
+    private final String VERSION_STORAGE_NODE_UUID;
+
+    /**
-    public VersionManagerImpl(PersistentVersionManager vMgr) {
+    public VersionManagerImpl(PersistentVersionManager vMgr, String rootUUID) {
+        this.VERSION_STORAGE_NODE_UUID = rootUUID;
-                ntMgr.getNodeType(NodeTypeRegistry.NT_BASE).getApplicablePropertyDef(ItemImpl.PROPNAME_PRIMARYTYPE, PropertyType.NAME, false).unwrap();
-                // check, if workspace of session has history root
-                NodeImpl systemRoot = ((RepositoryImpl) session.getRepository()).getSystemRootNode(session);
-                if (!systemRoot.hasNode(VersionManager.NODENAME_HISTORY_ROOT)) {
-                    // if not exist, create
-                    //systemRoot.addNode(VersionManager.NODENAME_HISTORY_ROOT, NodeTypeRegistry.NT_UNSTRUCTURED);
-                    //systemRoot.save();
-
-                    // maybe we will create a virtual for every workspace. currently,
-                    // all workspaces share the same
-                    throw new IllegalArgumentException("Workspace has no version storage");
-                }
-                String rootId = systemRoot.getNode(VersionManager.NODENAME_HISTORY_ROOT).internalGetUUID();
-
-                NodeState virtRootState = (NodeState) base.getItemState(new NodeId(rootId));
-                virtProvider = new VersionItemStateProvider(this, ntMgr, rootId, virtRootState.getParentUUID());
+                NodeState virtRootState = (NodeState) base.getItemState(new NodeId(VERSION_STORAGE_NODE_UUID));
+                virtProvider = new VersionItemStateProvider(this, ntMgr, VERSION_STORAGE_NODE_UUID, virtRootState.getParentUUID());
+     * Close this version manager. After having closed a persistence
+     * manager, further operations on this object are treated as illegal
+     * and throw
+     * @throws Exception if an error occurs
+     */
+    public void close() throws Exception {
+    }
+
+    /**
