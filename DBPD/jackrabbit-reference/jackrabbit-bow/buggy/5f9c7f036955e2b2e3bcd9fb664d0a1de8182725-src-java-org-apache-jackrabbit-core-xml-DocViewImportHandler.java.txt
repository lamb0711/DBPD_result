re-implemented handling of values on import to allow import of large binary properties 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160072 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.Constants;
-import org.apache.jackrabbit.core.InternalValue;
-import org.xml.sax.helpers.DefaultHandler;
-class DocViewImportHandler extends DefaultHandler implements Constants {
+class DocViewImportHandler extends TargetImportHandler {
-    private final Importer importer;
-    private final NamespaceResolver nsContext;
-
-    private final StringBuffer text = new StringBuffer();
+    private StringBufferValue textHandler = new StringBufferValue();
+    /**
+     * Constructs a new <code>DocViewImportHandler</code>.
+     *
+     * @param importer
+     * @param nsContext
+     */
-        this.importer = importer;
-        this.nsContext = nsContext;
+        super(importer, nsContext);
-    private void onTextNode(String text)
+    private void onTextNode(StringBufferValue text)
-        if (text.trim().length() == 0) {
+        String s = textHandler.retrieve();
+        if (s.trim().length() == 0) {
-            log.debug("ignoring withespace character data: " + text);
+            log.debug("ignoring withespace character data: " + s);
-        if (text.length() > 0) {
-            try {
-                Importer.NodeInfo node =
-                        new Importer.NodeInfo(JCR_XMLTEXT, null, null, null);
-                InternalValue[] values = new InternalValue[1];
-                values[0] = InternalValue.create(text.toString());
-                ArrayList props = new ArrayList();
-                Importer.PropInfo prop =
-                        new Importer.PropInfo(JCR_XMLCHARACTERS,
-                                PropertyType.STRING, values);
-                props.add(prop);
-                // call Importer
-                importer.startNode(node, props, nsContext);
-                importer.endNode(node);
-            } catch (RepositoryException re) {
-                throw new SAXException(re);
-            }
+        try {
+            Importer.NodeInfo node =
+                    new Importer.NodeInfo(JCR_XMLTEXT, null, null, null);
+            Importer.TextValue[] values = new Importer.TextValue[]{text};
+            ArrayList props = new ArrayList();
+            Importer.PropInfo prop =
+                    new Importer.PropInfo(JCR_XMLCHARACTERS,
+                            PropertyType.STRING, values);
+            props.add(prop);
+            // call Importer
+            importer.startNode(node, props, nsContext);
+            importer.endNode(node);
+        } catch (RepositoryException re) {
+            throw new SAXException(re);
-        if (text.length() > 0) {
+        if (textHandler != null && textHandler.length() > 0) {
-            onTextNode(text.toString());
-            // reset buffer
-            text.setLength(0);
+            onTextNode(textHandler);
+            // reset handler
+            textHandler.dispose();
+            textHandler = null;
-                InternalValue[] propValues;
+                Importer.TextValue[] propValues;
-                    propValues = new InternalValue[1];
-                    propValues[0] = InternalValue.create(atts.getValue(i));
+                    propValues = new Importer.TextValue[1];
+                    propValues[0] = new StringValue(atts.getValue(i));
-            Importer.NodeInfo nodeInfo =
+            Importer.NodeInfo node =
-            importer.startNode(nodeInfo, props, nsContext);
+            importer.startNode(node, props, nsContext);
-            stack.push(nodeInfo);
+            stack.push(node);
-    public void characters(char[] ch, int start, int length) throws SAXException {
+    public void characters(char[] ch, int start, int length)
+            throws SAXException {
-        text.append(ch, start, length);
+        if (textHandler == null) {
+            textHandler = new StringBufferValue();
+        }
+        textHandler.append(ch, start, length);
-    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
-        if (text.length() > 0) {
+    public void endElement(String namespaceURI, String localName, String qName)
+            throws SAXException {
+        if (textHandler != null && textHandler.length() > 0) {
-            onTextNode(text.toString());
-            // reset buffer
-            text.setLength(0);
+            onTextNode(textHandler);
+            // reset handler
+            textHandler.dispose();
+            textHandler = null;
