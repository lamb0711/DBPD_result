JCR-2087: parametrize generic types

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816695 13f79535-47bb-0310-9956-ffa450edef68

-     ChildNodeEntriesImpl(NodeEntry parent, EntryFactory factory, Iterator childNodeInfos) {
+     ChildNodeEntriesImpl(NodeEntry parent, EntryFactory factory, Iterator<ChildInfo> childNodeInfos) {
-                 ChildInfo ci = (ChildInfo) childNodeInfos.next();
+                 ChildInfo ci = childNodeInfos.next();
-        Iterator childNodeInfos = factory.getItemStateFactory().getChildNodeInfos(id);
+        Iterator<ChildInfo> childNodeInfos = factory.getItemStateFactory().getChildNodeInfos(id);
-    synchronized void update(Iterator childNodeInfos) {
+    synchronized void update(Iterator<ChildInfo> childNodeInfos) {
-            ChildInfo ci = (ChildInfo) childNodeInfos.next();
+            ChildInfo ci = childNodeInfos.next();
-    public Iterator iterator() {
-        List l = new ArrayList(entries.size());
-        for (Iterator it = entries.linkNodeIterator(); it.hasNext();) {
-            l.add(((LinkedEntries.LinkNode)it.next()).getNodeEntry());
+    public Iterator<NodeEntry> iterator() {
+        List<NodeEntry> l = new ArrayList<NodeEntry>(entries.size());
+        for (Iterator<LinkedEntries.LinkNode> it = entries.linkNodeIterator(); it.hasNext();) {
+            l.add(it.next().getNodeEntry());
-    public List get(Name nodeName) {
+    public List<NodeEntry> get(Name nodeName) {
-        Iterator cneIter = get(nodeName).iterator();
-        while (cneIter.hasNext()) {
-            NodeEntry cne = (NodeEntry) cneIter.next();
+        for (NodeEntry cne : get(nodeName)) {
-                for (Iterator it = entries.linkNodeIterator(); it.hasNext(); ) {
-                    LinkedEntries.LinkNode ln = (LinkedEntries.LinkNode) it.next();
+                for (Iterator<LinkedEntries.LinkNode> it = entries.linkNodeIterator(); it.hasNext(); ) {
+                    LinkedEntries.LinkNode ln = it.next();
-                    for (Iterator it = entries.linkNodeIterator(); it.hasNext(); ) {
-                        LinkedEntries.LinkNode ln = (LinkedEntries.LinkNode) it.next();
+                    for (Iterator<LinkedEntries.LinkNode> it = entries.linkNodeIterator(); it.hasNext(); ) {
+                        LinkedEntries.LinkNode ln = it.next();
-            for (Iterator it = linkNodeIterator(); it.hasNext();) {
-                LinkedEntries.LinkNode ln = (LinkedEntries.LinkNode) it.next();
+            for (Iterator<LinkedEntries.LinkNode> it = linkNodeIterator(); it.hasNext();) {
+                LinkedEntries.LinkNode ln = it.next();
-        private Iterator linkNodeIterator() {
+        private Iterator<LinkedEntries.LinkNode> linkNodeIterator() {
-                    super.setValue(new SoftReference(ne));
+                    super.setValue(new SoftReference<NodeEntry>(ne));
-        private class LinkNodeIterator implements Iterator {
+        private class LinkNodeIterator implements Iterator<LinkedEntries.LinkNode> {
-            public Object next() {
+            public LinkedEntries.LinkNode next() {
-        private final Map snsMap = new HashMap();
-        private final Map nameMap = new HashMap();
+        private final Map<Name, List> snsMap = new HashMap<Name, List>();
+        private final Map<Name, LinkedEntries.LinkNode> nameMap = new HashMap<Name, LinkedEntries.LinkNode>();
-                List l = (List) snsMap.get(qName);
+                List l = snsMap.get(qName);
-                    List nodeEntries = new ArrayList(l.size());
+                    List<NodeEntry> nodeEntries = new ArrayList<NodeEntry>(l.size());
-        public List getList(Name name) {
+        public List<NodeEntry> getList(Name name) {
-                return Collections.EMPTY_LIST;
+                return Collections.emptyList();
-                List l = new ArrayList((List)obj);
+                List<NodeEntry> l = new ArrayList<NodeEntry>((List)obj);
-                return Collections.singletonList(obj);
+                return Collections.singletonList((NodeEntry)obj);
-            LinkedEntries.LinkNode val = (LinkedEntries.LinkNode) nameMap.get(name);
+            LinkedEntries.LinkNode val = nameMap.get(name);
-                List l = (List) snsMap.get(name);
+                List l = snsMap.get(name);
-                LinkedEntries.LinkNode val = (LinkedEntries.LinkNode) nameMap.get(name);
+                LinkedEntries.LinkNode val = nameMap.get(name);
-                    List l = (List) snsMap.get(name);
+                    List l = snsMap.get(name);
-            LinkedEntries.LinkNode single = (LinkedEntries.LinkNode) nameMap.remove(name);
-            List l;
+            LinkedEntries.LinkNode single = nameMap.remove(name);
+            List<LinkedEntries.LinkNode> l;
-                l = new ArrayList();
+                l = new ArrayList<LinkedEntries.LinkNode>();
-                l = (List) snsMap.get(name);
+                l = snsMap.get(name);
-            Object rm = nameMap.remove(name);
+            LinkedEntries.LinkNode rm = nameMap.remove(name);
-                List l = (List) snsMap.get(name);
+                List l = snsMap.get(name);
-            return ((LinkedEntries.LinkNode) rm);
+            return rm;
-            List sns = (List) snsMap.get(name);
+            List sns = snsMap.get(name);
-        private static NodeEntry findMatchingEntry(List siblings, int index) {
+        private static NodeEntry findMatchingEntry(List<NodeEntry> siblings, int index) {
-                return (NodeEntry) siblings.get(index - 1);
+                return siblings.get(index - 1);
