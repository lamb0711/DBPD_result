JCR-2620 -  Authorizable#getProperty and #setProperty should deal with relativePath

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@987435 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.Node;
-            if (isAuthorizableProperty(prop)) {
+            if (isAuthorizableProperty(prop, false)) {
+     * @see Authorizable#getPropertyNames(String)
+     */
+    public Iterator<String> getPropertyNames(String relPath) throws RepositoryException {
+        Node n = node.getNode(relPath);
+        if (n.isSame(node)) {
+            // same as #getPropertyNames()
+            return getPropertyNames();
+        } else if (Text.isDescendant(node.getPath(), n.getPath())) {
+            List<String> l = new ArrayList<String>();
+            for (PropertyIterator it = n.getProperties(); it.hasNext();) {
+                Property prop = it.nextProperty();
+                if (isAuthorizableProperty(prop, false)) {
+                    l.add(prop.getName());
+                }
+            }
+            return l.iterator();
+        } else {
+            throw new IllegalArgumentException("Relative path " + relPath + " refers to items outside of scope of authorizable " + getID());
+        }
+    }
+
+    /**
-    public boolean hasProperty(String name) throws RepositoryException {
-        return node.hasProperty(name) && isAuthorizableProperty(node.getProperty(name));
+    public boolean hasProperty(String relPath) throws RepositoryException {
+        return node.hasProperty(relPath) && isAuthorizableProperty(node.getProperty(relPath), true);
-    public Value[] getProperty(String name) throws RepositoryException {
-        if (hasProperty(name)) {
-            Property prop = node.getProperty(name);
-            if (isAuthorizableProperty(prop)) {
+    public Value[] getProperty(String relPath) throws RepositoryException {
+        if (node.hasProperty(relPath)) {
+            Property prop = node.getProperty(relPath);
+            if (isAuthorizableProperty(prop, true)) {
-     * @param name The property name.
+     * @param relPath The relative path to the property or the property name.
-    public synchronized void setProperty(String name, Value value) throws RepositoryException {
+    public synchronized void setProperty(String relPath, Value value) throws RepositoryException {
+        String name = Text.getName(relPath);
+        String intermediate = (relPath.equals(name)) ? null : Text.getRelativeParent(relPath, 1);
+            Node n = getOrCreateTargetNode(intermediate);
-            if (node.hasProperty(name)) {
-                Property p = node.getProperty(name);
+            if (n.hasProperty(name)) {
+                Property p = n.getProperty(name);
-            node.setProperty(name, value);
+            n.setProperty(name, value);
-     * @param name The property name.
+     * @param relPath The relative path to the property or the property name.
-    public synchronized void setProperty(String name, Value[] values) throws RepositoryException {
+    public synchronized void setProperty(String relPath, Value[] values) throws RepositoryException {
+        String name = Text.getName(relPath);
+        String intermediate = (relPath.equals(name)) ? null : Text.getRelativeParent(relPath, 1);
+            Node n = getOrCreateTargetNode(intermediate);
-            if (node.hasProperty(name)) {
-                Property p = node.getProperty(name);
+            if (n.hasProperty(name)) {
+                Property p = n.getProperty(name);
-            node.setProperty(name, values);
+            n.setProperty(name, values);
-    public synchronized boolean removeProperty(String name) throws RepositoryException {
+    public synchronized boolean removeProperty(String relPath) throws RepositoryException {
+        String name = Text.getName(relPath);        
-            if (node.hasProperty(name)) {
-                // 'node' is protected -> use setValue instead of Property.remove()
-                Property p = node.getProperty(name);
-                if (p.isMultiple()) {
-                    p.setValue((Value[]) null);
-                } else {
-                    p.setValue((Value) null);
+            if (node.hasProperty(relPath)) {
+                Property p = node.getProperty(relPath);
+                if (isAuthorizableProperty(p, true)) {
+                    p.remove();
+                    if (userManager.isAutoSave()) {
+                        node.save();
+                    }
+                    return true;
-                if (userManager.isAutoSave()) {
-                    node.save();
-                }
-                return true;
-            } else {
-                return false;
+            // no such property or wasn't a property of this authorizable.
+            return false;
-            log.warn("Failed to remove Property " + name + " from " + this, e);
+            log.warn("Failed to remove Property " + relPath + " from " + this, e);
-     * non-protected properties defined by the rep:authorizable.
+     * non-protected properties defined by the rep:Authorizable node type or a
+     * some other descendant of the authorizable node.
+     * @param verifyAncestor If true the property is tested to be a descendant
+     * of the node of this authorizable; otherwise it is expected that this
+     * test has been executed by the caller.
-    private static boolean isAuthorizableProperty(Property prop) throws RepositoryException {
+    private boolean isAuthorizableProperty(Property prop, boolean verifyAncestor) throws RepositoryException {
+        if (verifyAncestor && !Text.isDescendant(node.getPath(), prop.getPath())) {
+            log.debug("Attempt to access property outside of authorizable scope.");
+            return false;
+        }
+
-        } else {
+        } else if (node.isSame(prop.getParent())) {
+        } else {
+            // another non-protected property somewhere in the subtree of this
+            // authorizable node -> is a property that can be set using #setProperty.
+            return true;
+    /**
+     * 
+     * @param relPath
+     * @return
+     * @throws RepositoryException
+     */
+    private Node getOrCreateTargetNode(String relPath) throws RepositoryException {
+        Node n;
+        if (relPath != null) {
+            if (node.hasNode(relPath)) {
+                n = node.getNode(relPath);
+            } else {
+                n = node;
+                for (String segment : Text.explode(relPath, '/')) {
+                    if (n.hasNode(segment)) {
+                        n = n.getNode(segment);
+                    } else {
+                        n = n.addNode(segment);
+                    }
+                }
+            }
+            if (!Text.isDescendantOrEqual(node.getPath(), n.getPath())) {
+                node.refresh(false);
+                throw new RepositoryException("Relative path " + relPath + " outside of scope of " + this);
+            }
+        } else {
+            n = node;
+        }
+        return n;
+    }
+
