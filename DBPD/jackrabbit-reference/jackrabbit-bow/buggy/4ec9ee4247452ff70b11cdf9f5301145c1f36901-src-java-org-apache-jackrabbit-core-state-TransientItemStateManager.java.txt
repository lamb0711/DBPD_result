- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.19 $, $Date: 2004/08/06 21:05:33 $
-	// we're keeping hard references in the cache
-	super(ReferenceMap.HARD, ReferenceMap.HARD);
-	attic = new Attic();
+        // we're keeping hard references in the cache
+        super(ReferenceMap.HARD, ReferenceMap.HARD);
+        attic = new Attic();
-	ps.println("TransientItemStateManager (" + this + ")");
-	ps.println();
-	ps.println("entries in cache:");
-	ps.println();
-	Iterator iter = keys();
-	while (iter.hasNext()) {
-	    ItemId id = (ItemId) iter.next();
-	    ItemState state = retrieve(id);
-	    dumpItemState(id, state, ps);
-	}
+        ps.println("TransientItemStateManager (" + this + ")");
+        ps.println();
+        ps.println("entries in cache:");
+        ps.println();
+        Iterator iter = keys();
+        while (iter.hasNext()) {
+            ItemId id = (ItemId) iter.next();
+            ItemState state = retrieve(id);
+            dumpItemState(id, state, ps);
+        }
-	ps.println();
-	ps.println("entries in attic:");
-	ps.println();
-	iter = attic.keys();
-	while (iter.hasNext()) {
-	    ItemId id = (ItemId) iter.next();
-	    ItemState state = attic.retrieve(id);
-	    dumpItemState(id, state, ps);
-	}
+        ps.println();
+        ps.println("entries in attic:");
+        ps.println();
+        iter = attic.keys();
+        while (iter.hasNext()) {
+            ItemId id = (ItemId) iter.next();
+            ItemState state = attic.retrieve(id);
+            dumpItemState(id, state, ps);
+        }
-	ps.print(state.isNode() ? "Node: " : "Prop: ");
-	switch (state.getStatus()) {
-	    case ItemState.STATUS_EXISTING:
-		ps.print("[existing]           ");
-		break;
-	    case ItemState.STATUS_EXISTING_MODIFIED:
-		ps.print("[existing, modified] ");
-		break;
-	    case ItemState.STATUS_EXISTING_REMOVED:
-		ps.print("[existing, removed]  ");
-		break;
-	    case ItemState.STATUS_NEW:
-		ps.print("[new]                ");
-		break;
-	    case ItemState.STATUS_STALE_DESTROYED:
-		ps.print("[stale, destroyed]   ");
-		break;
-	    case ItemState.STATUS_STALE_MODIFIED:
-		ps.print("[stale, modified]    ");
-		break;
-	    case ItemState.STATUS_UNDEFINED:
-		ps.print("[undefined]          ");
-		break;
-	}
-	ps.println(id + " (" + state + ")");
+        ps.print(state.isNode() ? "Node: " : "Prop: ");
+        switch (state.getStatus()) {
+            case ItemState.STATUS_EXISTING:
+                ps.print("[existing]           ");
+                break;
+            case ItemState.STATUS_EXISTING_MODIFIED:
+                ps.print("[existing, modified] ");
+                break;
+            case ItemState.STATUS_EXISTING_REMOVED:
+                ps.print("[existing, removed]  ");
+                break;
+            case ItemState.STATUS_NEW:
+                ps.print("[new]                ");
+                break;
+            case ItemState.STATUS_STALE_DESTROYED:
+                ps.print("[stale, destroyed]   ");
+                break;
+            case ItemState.STATUS_STALE_MODIFIED:
+                ps.print("[stale, modified]    ");
+                break;
+            case ItemState.STATUS_UNDEFINED:
+                ps.print("[undefined]          ");
+                break;
+        }
+        ps.println(id + " (" + state + ")");
-	    throws NoSuchItemStateException, ItemStateException {
-	ItemState state = retrieve(id);
-	if (state != null) {
-	    return state;
-	} else {
-	    throw new NoSuchItemStateException(id.toString());
-	}
+            throws NoSuchItemStateException, ItemStateException {
+        ItemState state = retrieve(id);
+        if (state != null) {
+            return state;
+        } else {
+            throw new NoSuchItemStateException(id.toString());
+        }
-	try {
-	    getItemState(id);
-	    return true;
-	} catch (ItemStateException ise) {
-	    return false;
-	}
+        try {
+            getItemState(id);
+            return true;
+        } catch (ItemStateException ise) {
+            return false;
+        }
-	    throws NoSuchItemStateException, ItemStateException {
-	ItemState state = attic.retrieve(id);
-	if (state != null) {
-	    return state;
-	} else {
-	    throw new NoSuchItemStateException(id.toString());
-	}
+            throws NoSuchItemStateException, ItemStateException {
+        ItemState state = attic.retrieve(id);
+        if (state != null) {
+            return state;
+        } else {
+            throw new NoSuchItemStateException(id.toString());
+        }
-	try {
-	    getItemStateInAttic(id);
-	    return true;
-	} catch (ItemStateException ise) {
-	    return false;
-	}
+        try {
+            getItemStateInAttic(id);
+            return true;
+        } catch (ItemStateException ise) {
+            return false;
+        }
-	return !isEmpty();
+        return !isEmpty();
-	return !attic.isEmpty();
+        return !attic.isEmpty();
-	return size();
+        return size();
-	return attic.size();
+        return attic.size();
-     *
-	return entries();
+        return entries();
-     *
-     */ 
+     */
-	return attic.entries();
+        return attic.entries();
-	    throws ItemStateException {
-	NodeId id = new NodeId(uuid);
-	// check cache
-	if (isCached(id)) {
-	    String msg = "there's already a node state instance with id " + id;
-	    log.error(msg);
-	    throw new ItemStateException(msg);
-	}
+            throws ItemStateException {
+        NodeId id = new NodeId(uuid);
+        // check cache
+        if (isCached(id)) {
+            String msg = "there's already a node state instance with id " + id;
+            log.error(msg);
+            throw new ItemStateException(msg);
+        }
-	NodeState state = new NodeState(uuid, nodeTypeName, parentUUID, initialStatus);
-	// put it in cache
-	cache(state);
-	return state;
+        NodeState state = new NodeState(uuid, nodeTypeName, parentUUID, initialStatus);
+        // put it in cache
+        cache(state);
+        return state;
-	    throws ItemStateException {
-	ItemId id = overlayedState.getId();
-	// check cache
-	if (isCached(id)) {
-	    String msg = "there's already a node state instance with id " + id;
-	    log.error(msg);
-	    throw new ItemStateException(msg);
-	}
+            throws ItemStateException {
+        ItemId id = overlayedState.getId();
+        // check cache
+        if (isCached(id)) {
+            String msg = "there's already a node state instance with id " + id;
+            log.error(msg);
+            throw new ItemStateException(msg);
+        }
-	NodeState state = new NodeState(overlayedState, initialStatus);
-	// put it in cache
-	cache(state);
-	return state;
+        NodeState state = new NodeState(overlayedState, initialStatus);
+        // put it in cache
+        cache(state);
+        return state;
-	    throws ItemStateException {
-	PropertyId id = new PropertyId(parentUUID, propName);
-	// check cache
-	if (isCached(id)) {
-	    String msg = "there's already a property state instance with id " + id;
-	    log.error(msg);
-	    throw new ItemStateException(msg);
-	}
+            throws ItemStateException {
+        PropertyId id = new PropertyId(parentUUID, propName);
+        // check cache
+        if (isCached(id)) {
+            String msg = "there's already a property state instance with id " + id;
+            log.error(msg);
+            throw new ItemStateException(msg);
+        }
-	PropertyState state = new PropertyState(propName, parentUUID, initialStatus);
-	// put it in cache
-	cache(state);
-	return state;
+        PropertyState state = new PropertyState(propName, parentUUID, initialStatus);
+        // put it in cache
+        cache(state);
+        return state;
-	    throws ItemStateException {
-	PropertyId id = new PropertyId(overlayedState.getParentUUID(), overlayedState.getName());
-	// check cache
-	if (isCached(id)) {
-	    String msg = "there's already a property state instance with id " + id;
-	    log.error(msg);
-	    throw new ItemStateException(msg);
-	}
+            throws ItemStateException {
+        PropertyId id = new PropertyId(overlayedState.getParentUUID(), overlayedState.getName());
+        // check cache
+        if (isCached(id)) {
+            String msg = "there's already a property state instance with id " + id;
+            log.error(msg);
+            throw new ItemStateException(msg);
+        }
-	PropertyState state = new PropertyState(overlayedState, initialStatus);
-	// put it in cache
-	cache(state);
-	return state;
+        PropertyState state = new PropertyState(overlayedState, initialStatus);
+        // put it in cache
+        cache(state);
+        return state;
-	// discard item state, this will invalidate the wrapping Item
-	// instance of the transient state
-	state.discard();
-	// remove from cache
-	evict(state.getId());
-	// give the instance a chance to prepare to get gc'ed
-	state.onDisposed();
+        // discard item state, this will invalidate the wrapping Item
+        // instance of the transient state
+        state.discard();
+        // remove from cache
+        evict(state.getId());
+        // give the instance a chance to prepare to get gc'ed
+        state.onDisposed();
-	// remove from cache
-	evict(state.getId());
-	// add to attic
-	attic.cache(state);
+        // remove from cache
+        evict(state.getId());
+        // add to attic
+        attic.cache(state);
-	// discard item state, this will invalidate the wrapping Item
-	// instance of the transient state
-	state.discard();
-	// remove from attic
-	attic.evict(state.getId());
-	// give the instance a chance to prepare to get gc'ed
-	state.onDisposed();
+        // discard item state, this will invalidate the wrapping Item
+        // instance of the transient state
+        state.discard();
+        // remove from attic
+        attic.evict(state.getId());
+        // give the instance a chance to prepare to get gc'ed
+        state.onDisposed();
-	// dispose item states in cache
-	Iterator iter = entries();
-	while (iter.hasNext()) {
-	    ItemState state = (ItemState) iter.next();
-	    disposeItemState(state);
-	}
-	// dispose item states in attic
-	iter = attic.entries();
-	while (iter.hasNext()) {
-	    ItemState state = (ItemState) iter.next();
-	    disposeItemStateInAttic(state);
-	}
+        // dispose item states in cache
+        Iterator iter = entries();
+        while (iter.hasNext()) {
+            ItemState state = (ItemState) iter.next();
+            disposeItemState(state);
+        }
+        // dispose item states in attic
+        iter = attic.entries();
+        while (iter.hasNext()) {
+            ItemState state = (ItemState) iter.next();
+            disposeItemStateInAttic(state);
+        }
-	Attic() {
-	    super(ReferenceMap.HARD, ReferenceMap.HARD);
-	}
+        Attic() {
+            super(ReferenceMap.HARD, ReferenceMap.HARD);
+        }
