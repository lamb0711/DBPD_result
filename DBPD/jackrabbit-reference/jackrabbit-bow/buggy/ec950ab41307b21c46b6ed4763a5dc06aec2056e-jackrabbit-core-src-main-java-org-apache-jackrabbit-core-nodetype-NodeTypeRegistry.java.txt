JCR-2763: Drop the Dumpable interface

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1004622 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.PrintStream;
-import org.apache.jackrabbit.core.util.Dumpable;
-public class NodeTypeRegistry implements Dumpable, NodeTypeEventListener {
+public class NodeTypeRegistry implements NodeTypeEventListener {
+    @SuppressWarnings("unchecked")
-    //-------------------------------------------------------------< Dumpable >
+    //--------------------------------------------------------------< Object >
+
-    public void dump(PrintStream ps) {
-        ps.println("NodeTypeRegistry (" + this + ")");
-        ps.println();
-        ps.println("Registered NodeTypes:");
-        ps.println();
+    public String toString() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("NodeTypeRegistry (" + this + ")\n");
+        builder.append("Registered NodeTypes:\n");
-            ps.println(ntd.getName());
-            Name[] supertypes = ntd.getSupertypes();
-            ps.println("\tSupertypes");
-            for (Name supertype : supertypes) {
-                ps.println("\t\t" + supertype);
-            }
-            ps.println("\tMixin\t" + ntd.isMixin());
-            ps.println("\tOrderableChildNodes\t" + ntd.hasOrderableChildNodes());
-            ps.println("\tPrimaryItemName\t" + (ntd.getPrimaryItemName() == null ? "<null>" : ntd.getPrimaryItemName().toString()));
+            builder.append(ntd.getName());
+            builder.append("\n");
+            builder.append(
+                    "\tSupertypes: "
+                    + Arrays.toString(ntd.getSupertypes()) + "\n");
+            builder.append("\tMixin\t" + ntd.isMixin() + "\n");
+            builder.append("\tOrderableChildNodes\t" + ntd.hasOrderableChildNodes() + "\n");
+            builder.append("\tPrimaryItemName\t" + (ntd.getPrimaryItemName() == null ? "<null>" : ntd.getPrimaryItemName().toString()) + "\n");
-                ps.print("\tPropertyDefinition");
-                ps.println(" (declared in " + aPd.getDeclaringNodeType() + ")");
-                ps.println("\t\tName\t\t" + (aPd.definesResidual() ? "*" : aPd.getName().toString()));
+                builder.append("\tPropertyDefinition\n");
+                builder.append(" (declared in " + aPd.getDeclaringNodeType() + ")\n");
+                builder.append("\t\tName\t\t" + (aPd.definesResidual() ? "*" : aPd.getName().toString()) + "\n");
-                ps.println("\t\tRequiredType\t" + type);
+                builder.append("\t\tRequiredType\t" + type + "\n");
-                ps.println("\t\tValueConstraints\t" + constraints.toString());
+                builder.append("\t\tValueConstraints\t" + constraints + "\n");
-                ps.println("\t\tDefaultValue\t" + defaultValues.toString());
-                ps.println("\t\tAutoCreated\t" + aPd.isAutoCreated());
-                ps.println("\t\tMandatory\t" + aPd.isMandatory());
-                ps.println("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(aPd.getOnParentVersion()));
-                ps.println("\t\tProtected\t" + aPd.isProtected());
-                ps.println("\t\tMultiple\t" + aPd.isMultiple());
+                builder.append("\t\tDefaultValue\t" + defaultValues + "\n");
+                builder.append("\t\tAutoCreated\t" + aPd.isAutoCreated() + "\n");
+                builder.append("\t\tMandatory\t" + aPd.isMandatory() + "\n");
+                builder.append("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(aPd.getOnParentVersion()) + "\n");
+                builder.append("\t\tProtected\t" + aPd.isProtected() + "\n");
+                builder.append("\t\tMultiple\t" + aPd.isMultiple() + "\n");
-                ps.print("\tNodeDefinition");
-                ps.println(" (declared in " + aNd.getDeclaringNodeType() + ")");
-                ps.println("\t\tName\t\t" + (aNd.definesResidual() ? "*" : aNd.getName().toString()));
+                builder.append("\tNodeDefinition\\n");
+                builder.append(" (declared in " + aNd.getDeclaringNodeType() + ")\\n");
+                builder.append("\t\tName\t\t" + (aNd.definesResidual() ? "*" : aNd.getName().toString()) + "\n");
-                        ps.print("\t\tRequiredPrimaryType\t" + reqPrimaryType);
+                        builder.append("\t\tRequiredPrimaryType\t" + reqPrimaryType + "\n");
-                    ps.print("\n\t\tDefaultPrimaryType\t" + defPrimaryType);
+                    builder.append("\n\t\tDefaultPrimaryType\t" + defPrimaryType + "\n");
-                ps.println("\n\t\tAutoCreated\t" + aNd.isAutoCreated());
-                ps.println("\t\tMandatory\t" + aNd.isMandatory());
-                ps.println("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(aNd.getOnParentVersion()));
-                ps.println("\t\tProtected\t" + aNd.isProtected());
-                ps.println("\t\tAllowsSameNameSiblings\t" + aNd.allowsSameNameSiblings());
+                builder.append("\n\t\tAutoCreated\t" + aNd.isAutoCreated() + "\n");
+                builder.append("\t\tMandatory\t" + aNd.isMandatory() + "\n");
+                builder.append("\t\tOnVersion\t" + OnParentVersionAction.nameFromValue(aNd.getOnParentVersion()) + "\n");
+                builder.append("\t\tProtected\t" + aNd.isProtected() + "\n");
+                builder.append("\t\tAllowsSameNameSiblings\t" + aNd.allowsSameNameSiblings() + "\n");
-        ps.println();
-
-        entCache.dump(ps);
+        builder.append(entCache);
+        return builder.toString();
