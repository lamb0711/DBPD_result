Implement 'order by' syntax for XPath and SQL. Actual ordering on the query result is not yet done.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126598 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.List;
+import java.util.ArrayList;
+
-     * The name of the properties to order
+     * The order spects
-    private QName[] properties;
-
-    /**
-     * Array of flag indicating whether a node is ordered ascending or descending
-     */
-    private boolean[] orderSpecs;
+    private List specs = new ArrayList();
-     * @param properties the names of the properties to sort the result nodes.
-     * @param orderSpecs if <code>true</code> a result node is orderd ascending;
-     *                   otherwise descending.
-    public OrderQueryNode(QueryNode parent, QName[] properties, boolean[] orderSpecs) {
+    public OrderQueryNode(QueryNode parent) {
-        if (properties.length != orderSpecs.length) {
-            throw new IllegalArgumentException("Number of propertes and orderSpecs must be the same");
-        }
-        this.properties = properties;
-        this.orderSpecs = orderSpecs;
+    /**
+     * Adds an order specification to this query node.
+     * @param property the name of the property.
+     * @param ascending if <code>true</code> values of this properties are
+     *   ordered ascending; descending if <code>false</code>.
+     */
+    public void addOrderSpec(QName property, boolean ascending) {
+        specs.add(new OrderSpec(property, ascending));
+    }
+
+    /**
+     * Adds an order specification to this query node.
+     * @param spec the order spec.
+     */
+    public void addOrderSpec(OrderSpec spec) {
+        specs.add(spec);
+    }
-     * @exception ArrayIndexOutOfBoundsException if there is no property with
+     * @exception IndexOutOfBoundsException if there is no property with
-        return orderSpecs[i];
+        return ((OrderSpec) specs.get(i)).ascending;
-     * Returns a <code>QName</code> array that contains the name of the properties
-     * to sort the result nodes.
+     * Returns a <code>OrderSpec</code> array that contains order by
+     * specifications.
-     * @return names of order properties.
+     * @return order by specs.
-    public QName[] getOrderByProperties() {
-        return properties;
+    public OrderSpec[] getOrderSpecs() {
+        return (OrderSpec[]) specs.toArray(new OrderSpec[specs.size()]);
+    //------------------< OrderSpec class >-------------------------------------
+
-     * Returns a boolean array that contains the sort order specification
-     * for each property returned by {@link #getOrderByProperties()}.
-     * @return the sort specification.
+     * Implements a single order specification. Contains a property name
+     * and whether it is ordered ascending or descending.
-    public boolean[] getOrderBySpecs() {
-        return orderSpecs;
-    }
+    public static final class OrderSpec {
+        /** The name of the property */
+        private QName property;
+
+        /** If <code>true</code> this property is orderd ascending */
+        private boolean ascending;
+
+        /**
+         * Creates a new <code>OrderSpec</code> for <code>property</code>.
+         * @param property the name of the property.
+         * @param ascending if <code>true</code> the property is ordered
+         * ascending, otherwise descending.
+         */
+        public OrderSpec(QName property, boolean ascending) {
+            this.property = property;
+            this.ascending = ascending;
+        }
+
+        /**
+         * Returns the name of the property.
+         * @return the name of the property.
+         */
+        public QName getProperty() {
+            return property;
+        }
+
+        /**
+         * If <code>true</code> the property is ordered ascending, otherwise
+         * descending.
+         * @return <code>true</code> for ascending; <code>false</code> for
+         * descending.
+         */
+        public boolean isAscending() {
+            return ascending;
+        }
+
+        /**
+         * Sets the new value for the ascending property.
+         * @param ascending <code>true</code> for ascending; <code>false</code>
+         * for descending.
+         */
+        public void setAscending(boolean ascending) {
+            this.ascending = ascending;
+        }
+    }
