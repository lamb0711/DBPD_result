- fixed Serializable support of ItemId, ItemState and derived classes
- new internal utility interface util.Dumpable providing diagnostic
  output
- added Dumpable support to several internal components
- extracted ItemStateStore interface from ItemStateMap concrete class


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@230483 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.Dumpable;
- * An <code>ItemStateMap</code> stores <code>ItemState</code> instances using
- * their <code>ItemId</code>s as key.
+ * A {@link java.util.Map} based <code>ItemStateStore</code> implementation.
-public class ItemStateMap {
+public class ItemStateMap implements ItemStateStore, Dumpable {
-     * the map backing this <code>ItemStateMap</code> instance
+     * the map backing this <code>ItemStateStore</code> implementation
-     * Creates a new HashMap-backed <code>ItemStateMap</code> instance.
+     * Creates a new HashMap-backed <code>ItemStateStore</code> implementation.
-    //-------------------------------------------------------< public methods >
+    //-------------------------------------------------------< ItemStateStore >
-     * Returns <code>true</code> if this map contains an <code>ItemState</code>
-     * object with the specified <code>id</code>.
-     *
-     * @param id id of <code>ItemState</code> object whose presence should be
-     *           tested.
-     * @return <code>true</code> if there's a corresponding map entry,
-     *         otherwise <code>false</code>.
+     * {@inheritDoc}
-     * Returns the <code>ItemState</code> object with the specified
-     * <code>id</code> if it is present or <code>null</code> if no entry exists
-     * with that <code>id</code>.
-     *
-     * @param id the id of the <code>ItemState</code> object to be returned.
-     * @return the <code>ItemState</code> object with the specified
-     *         <code>id</code> or or <code>null</code> if no entry exists
-     *         with that <code>id</code>
+     * {@inheritDoc}
-     * Stores the specified <code>ItemState</code> object in the map
-     * using its <code>ItemId</code> as the key.
-     *
-     * @param state the <code>ItemState</code> object to store
+     * {@inheritDoc}
-     * Removes the <code>ItemState</code> object with the specified id from
-     * this map if it is present.
-     *
-     * @param id the id of the <code>ItemState</code> object which should be
-     *           removed from this map.
+     * {@inheritDoc}
-     * Removes all entries from this map.
+     * {@inheritDoc}
-     * Returns <code>true</code> if the map contains no entries.
-     *
-     * @return <code>true</code> if the map contains no entries.
+     * {@inheritDoc}
-     * Returns the number of entries in the map.
-     *
-     * @return number of entries in the map.
+     * {@inheritDoc}
-     * Returns an unmodifiable set view of the keys (i.e. <code>ItemId</code>
-     * objects) contained in this map.
-     *
-     * @return a set view of the keys contained in this map.
+     * {@inheritDoc}
-     * Returns an unmodifiable collection view of the values (i.e.
-     * <code>ItemState</code> objects) contained in this map.
-     *
-     * @return a collection view of the values contained in this map.
+     * {@inheritDoc}
-    //-------------------------------------------------------< implementation >
+    //-------------------------------------------------------------< Dumpable >
-     * Dumps the state of this <code>ItemStateMap</code> instance
-     * (used for diagnostic purposes).
-     *
-     * @param ps
+     * {@inheritDoc}
-    protected void dump(PrintStream ps) {
+    public void dump(PrintStream ps) {
