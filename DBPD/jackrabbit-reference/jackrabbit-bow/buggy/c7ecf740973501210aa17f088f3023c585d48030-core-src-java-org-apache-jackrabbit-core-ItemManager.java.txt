- fixed Serializable support of ItemId, ItemState and derived classes
- new internal utility interface util.Dumpable providing diagnostic
  output
- added Dumpable support to several internal components
- extracted ItemStateStore interface from ItemStateMap concrete class


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@230483 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.Dumpable;
-public class ItemManager implements ItemLifeCycleListener, Constants {
+public class ItemManager implements ItemLifeCycleListener, Dumpable, Constants {
-     * Dumps the state of this <code>ItemManager</code> instance
-     * (used for diagnostic purposes).
-     *
-     * @param ps
-     * @throws RepositoryException
-     */
-    void dump(PrintStream ps) throws RepositoryException {
-        ps.println("ItemManager (" + this + ")");
-        ps.println();
-        ps.println("Items in cache:");
-        ps.println();
-        Iterator iter = itemCache.keySet().iterator();
-        while (iter.hasNext()) {
-            ItemId id = (ItemId) iter.next();
-            ItemImpl item = (ItemImpl) itemCache.get(id);
-            if (item.isNode()) {
-                ps.print("Node: ");
-            } else {
-                ps.print("Property: ");
-            }
-            if (item.isTransient()) {
-                ps.print("transient ");
-            } else {
-                ps.print("          ");
-            }
-            ps.println(id + "\t" + item.getPath() + " (" + item + ")");
-        }
-    }
-
-    /**
+
+    //-------------------------------------------------------------< Dumpable >
+    /**
+     * {@inheritDoc}
+     */
+    public void dump(PrintStream ps) {
+        ps.println("ItemManager (" + this + ")");
+        ps.println();
+        ps.println("Items in cache:");
+        ps.println();
+        Iterator iter = itemCache.keySet().iterator();
+        while (iter.hasNext()) {
+            ItemId id = (ItemId) iter.next();
+            ItemImpl item = (ItemImpl) itemCache.get(id);
+            if (item.isNode()) {
+                ps.print("Node: ");
+            } else {
+                ps.print("Property: ");
+            }
+            if (item.isTransient()) {
+                ps.print("transient ");
+            } else {
+                ps.print("          ");
+            }
+            ps.println(id + "\t" + item.safeGetJCRPath() + " (" + item + ")");
+        }
+    }
