

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@314827 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.name.AbstractNamespaceResolver;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+import org.apache.jackrabbit.name.CachingNamespaceResolver;
-public class NamespaceRegistryImpl implements NamespaceRegistry,
-        NamespaceResolver {
+public class NamespaceRegistryImpl extends AbstractNamespaceResolver
+        implements NamespaceRegistry {
+    private final CachingNamespaceResolver resolver;
+
-    protected NamespaceRegistryImpl(FileSystem nsRegStore) throws RepositoryException {
+    protected NamespaceRegistryImpl(FileSystem nsRegStore)
+            throws RepositoryException {
+        super(true); // enable listener support
+        resolver = new CachingNamespaceResolver(this, 1000);
-        FileSystemResource propFile = new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
+        FileSystemResource propFile =
+                new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
-        FileSystemResource propFile = new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
+        FileSystemResource propFile =
+                new FileSystemResource(nsRegStore, NS_REG_RESOURCE);
-                    + prefix + " -> " + uri + ": remapping existing prefixes is not supported.");
+                    + prefix + " -> " + uri
+                    + ": remapping existing prefixes is not supported.");
+
+        // notify listeners
+        notifyPrefixRemapped(prefix, uri);
-        if (!prefixToURI.containsKey(prefix)) {
-            throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
+        String uri = (String) prefixToURI.get(prefix);
+        if (uri == null) {
+            throw new NamespaceException(prefix
+                    + ": is not a registered namespace prefix.");
-        return (String) prefixToURI.get(prefix);
+        return uri;
-        if (!uriToPrefix.containsKey(uri)) {
-            throw new NamespaceException(uri + ": is not a registered namespace uri.");
+        String prefix = (String) uriToPrefix.get(uri);
+        if (prefix == null) {
+            throw new NamespaceException(uri
+                    + ": is not a registered namespace uri.");
-        return (String) uriToPrefix.get(uri);
+        return prefix;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public QName getQName(String name)
+            throws IllegalNameException, UnknownPrefixException {
+        return resolver.getQName(name);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public String getJCRName(QName name) throws NoPrefixDeclaredException {
+        return resolver.getJCRName(name);
