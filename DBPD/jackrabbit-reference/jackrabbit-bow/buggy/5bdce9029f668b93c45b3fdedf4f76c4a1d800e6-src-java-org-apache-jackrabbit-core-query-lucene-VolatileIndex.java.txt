JCR-204: Improve recoverability


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@289211 13f79535-47bb-0310-9956-ffa450edef68

- * Implements an in-memory index with a redo log.
+ * Implements an in-memory index with a pending buffer.
-    /** The redo log */
-    private final RedoLog redoLog;
-
-    /** Map of pending documents to add to the index */
+    /**
+     * Map of pending documents to add to the index
+     */
-     * Creates a new <code>VolatileIndex</code> using an <code>analyzer</code>
-     * and a redo <code>log</code>.
+     * The number of documents in this index.
+     */
+    private int numDocs = 0;
+
+    /**
+     * Creates a new <code>VolatileIndex</code> using an <code>analyzer</code>.
+     *
-     * @param log the redo log.
-    VolatileIndex(Analyzer analyzer, RedoLog log) throws IOException {
+    VolatileIndex(Analyzer analyzer) throws IOException {
-        redoLog = log;
-     * Returns the redo log of this volatile index.
-     * @return the redo log of this volatile index.
-     */
-    RedoLog getRedoLog() {
-        return redoLog;
-    }
-
-    /**
-     * Overwrites the default implementation by writing an entry to the
-     * redo log and then adds it to the pending list.
+     * Overwrites the default implementation by adding the document to a pending
+     * list and commits the pending list if needed.
+     *
-     * @throws IOException if an error occurs while writing to the redo log
-     * or the index.
+     * @throws IOException if an error occurs while writing to the index.
-        redoLog.nodeAdded(doc.get(FieldNames.UUID));
-        redoLog.flush();
-
+        numDocs++;
-     * Overwrites the default implementation by writing an entry to the redo
-     * log and then calling the <code>super.removeDocument()</code> method or
-     * if the document is in the pending list, removes it from there.
+     * Overwrites the default implementation to remove the document from the
+     * pending list if it is present or simply calls <code>super.removeDocument()</code>.
-     * @throws IOException if an error occurs while writing to the redo log
-     * or the index.
+     * @throws IOException if an error occurs while removing the document from
+     *                     the index.
-        redoLog.nodeRemoved(idTerm.text());
-        redoLog.flush();
-
+        int num;
-            return 1;
+            num = 1;
-            return super.getIndexReader().delete(idTerm);
-            }
+            num = super.getIndexReader().delete(idTerm);
+        numDocs -= num;
+        return num;
+    }
+
+    /**
+     * Returns the number of valid documents in this index.
+     *
+     * @return the number of valid documents in this index.
+     */
+    int getNumDocuments() throws IOException {
+        return numDocs;
+    }
