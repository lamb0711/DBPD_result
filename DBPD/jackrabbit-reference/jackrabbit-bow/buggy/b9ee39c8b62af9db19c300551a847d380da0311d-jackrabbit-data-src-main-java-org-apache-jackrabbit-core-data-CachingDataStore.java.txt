JCR-3864 CachingDatastore -cache file sizes to save remote call to remote datastore( S3DS)

Enabled LRU cache of defaut size 200 ( 28KB memory footprint) of IDs Vs length. 
getRecored/getRecordIfStored optimized to use this recordLength cache.
Fixed closing inputstream in TestLocalCache.java

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1671041 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedHashMap;
+ *     &lt;param name="{@link #setRecLengthCacheSize(int) recLengthCacheSize}" value="200"/>
+    /**
+     * In memory cache to hold {@link DataRecord#getLength()} against
+     * {@link DataIdentifier}
+     */
+    protected Map<DataIdentifier, Long> recLenCache = null;
+
+    
+    /**
+     * Size of {@link #recLenCache}. Each entry consumes of approx 140 bytes.
+     * Default total memory consumption of {@link #recLenCache} 28KB.
+     */
+    private int recLengthCacheSize = 200;
+            /*
+             * Initialize LRU cache of size {@link #recLengthCacheSize}
+             */
+            recLenCache = Collections.synchronizedMap(new LinkedHashMap<DataIdentifier, Long>(
+                recLengthCacheSize, 0.75f, true) {
+
+                private static final long serialVersionUID = -8752749075395630485L;
+
+                @Override
+                protected boolean removeEldestEntry(
+                                Map.Entry<DataIdentifier, Long> eldest) {
+                    if (size() > recLengthCacheSize) {
+                        LOG.trace("evicted from recLengthCache [{}]",
+                            eldest.getKey());
+                        return true;
+                    }
+                    return false;
+                }
+            });
-            throws DataStoreException {
+                    throws DataStoreException {
-        boolean existsAtBackend = false;
-                LOG.debug("[{}] record retrieved from asyncUploadmap",
+                LOG.debug("getRecord: [{}]  retrieved from asyncUploadmap",
-            } else if (cache.getFileIfStored(fileName) != null
-                || (existsAtBackend = backend.exists(identifier))) {
-                if (existsAtBackend) {
-                    LOG.debug("[{}] record retrieved from backend", identifier);
-                    asyncDownload(identifier);
-                } else {
-                    LOG.debug("[{}] record retrieved from local cache",
-                        identifier);
-                }
+            } else if (getLength(identifier) > -1) {
+                LOG.debug("getRecord: [{}]  retrieved using getLength",
+                    identifier);
-            throws DataStoreException {
+                    throws DataStoreException {
-                LOG.debug("[{}] record retrieved from asyncuploadmap",
+                LOG.debug(
+                    "getRecordIfStored: [{}]  retrieved from asyncuploadmap",
-            } else if (backend.exists(identifier)) {
-                LOG.debug("[{}] record retrieved from backend", identifier);
+            } else if (recLenCache.containsKey(identifier)) {
+                LOG.debug(
+                    "getRecordIfStored: [{}]  retrieved using recLenCache",
+                    identifier);
+            } else {
+                try {
+                    long length = backend.getLength(identifier);
+                    LOG.debug(
+                        "getRecordIfStored :[{}]  retrieved from backend",
+                        identifier);
+                    recLenCache.put(identifier, length);
+                    touchInternal(identifier);
+                    usesIdentifier(identifier);
+                    return new CachingDataRecord(this, identifier);
+                } catch (DataStoreException ignore) {
+                    LOG.warn(" getRecordIfStored: [{}]  not found", identifier);
+                }
+
+                recLenCache.remove(identifier);
+        
+            recLenCache.remove(identifier);
-            throws DataStoreException {
+                    throws DataStoreException {
-        Long length = cache.getFileLength(fileName);
+
+        Long length = recLenCache.get(identifier);
-            return length.longValue();
+            LOG.debug(" identifier [{}] length fetched from recLengthCache",
+                identifier);
+            return length;
+        } else if ((length = cache.getFileLength(fileName)) != null) {
+            LOG.debug(" identifier [{}] length fetched from local cache",
+                identifier);
+            recLenCache.put(identifier, length);
+            return length;
+            LOG.debug(" identifier [{}] length fetched from backend",
+                identifier);
+            recLenCache.put(identifier, length);
+    
+    public void deleteFromCache(DataIdentifier identifier)
+                    throws DataStoreException {
+        try {
+            // order is important here
+            recLenCache.remove(identifier);
+            String fileName = getFileName(identifier);
+            asyncWriteCache.delete(fileName);
+            cache.delete(fileName);
+        } catch (IOException ioe) {
+            throw new DataStoreException(ioe);
+        }
+    }
+    
+    
+    public void setRecLengthCacheSize(int recLengthCacheSize) {
+        this.recLengthCacheSize = recLengthCacheSize;
+    }
