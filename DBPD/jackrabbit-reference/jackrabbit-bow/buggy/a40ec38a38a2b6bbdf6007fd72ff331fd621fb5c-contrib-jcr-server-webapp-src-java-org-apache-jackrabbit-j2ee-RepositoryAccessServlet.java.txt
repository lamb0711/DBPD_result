- adjusting to jackrabbit/commons changes
- removing static variables from servlets

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@215952 13f79535-47bb-0310-9956-ffa450edef68

+import javax.servlet.ServletContext;
-    /** the configured repository name */
-    private static String repositoryName;
+    private static final String CTX_ATTR_REPOSITORY = "jcr.repository";
-    private static String rmiURI;
-
-    private static InitialContext jndiContext;
-
-    private static Repository repository;
-
-    private static String missingAuthMapping;
+    private String repositoryName;
-	initJNDI();
-	initRMI();
-	initRepository();
-        missingAuthMapping = getServletConfig().getInitParameter(INIT_PARAM_MISSING_AUTH_MAPPING);
-        log.info("  " + INIT_PARAM_MISSING_AUTH_MAPPING + " = " + missingAuthMapping);
+        repositoryName = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_NAME);
+        if (repositoryName==null) {
+            repositoryName="default";
+        }
+        Repository repository = null;
+
+        // try to retrieve via rmi
+        if (repository == null) {
+            String rmiURI = getRMIUri();
+            if (rmiURI != null) {
+                repository = getRepositoryByRMI(rmiURI);
+            }
+        }
+        // try to retrieve via jndi
+        if (repository == null) {
+            InitialContext context = getInitialContext();
+            if (context != null) {
+                repository = getRepositoryByJNDI(context);
+            }
+        }
+        // error
+        if (repository == null) {
+            log.error("Unable to retrieve repository");
+            throw new ServletException("Unable to retrieve repository");
+        }
+        getServletContext().setAttribute(CTX_ATTR_REPOSITORY, repository);
+        log.info(repository.getDescriptor(Repository.REP_NAME_DESC) + " v" + repository.getDescriptor(Repository.REP_VERSION_DESC));
-    private void initJNDI() throws ServletException {
-	// setup repository name
-	repositoryName = getServletConfig().getInitParameter(INIT_PARAM_REPOSITORY_NAME);
-	if (repositoryName==null) {
-	    repositoryName="default";
-	}
-	log.info("  repository-name = " + repositoryName);
-
+    private InitialContext getInitialContext() throws ServletException {
-	    jndiContext = new InitialContext(env);
+	    return new InitialContext(env);
-    private void initRMI() {
+    private String getRMIUri() {
-	rmiURI = getServletConfig().getInitParameter(INIT_PARAM_RMI_URI);
-	if (rmiURI != null) {
-	    log.info("  rmi-uri = " + rmiURI);
-	}
-    }
-
-    /**
-     * tries to retrieve the repository
-     */
-    private void initRepository() throws ServletException {
-	getRepositoryByRMI();
-	if (repository == null) {
-	    getRepositoryByJNDI();
-	}
-	if (repository == null) {
-	    log.error("Unable to retrieve repository");
-	    throw new ServletException("Unable to retrieve repository");
-	}
-	log.info(repository.getDescriptor(Repository.REP_NAME_DESC) + " v" + repository.getDescriptor(Repository.REP_VERSION_DESC));
+	return getServletConfig().getInitParameter(INIT_PARAM_RMI_URI);
-    private void getRepositoryByJNDI() {
-	if (jndiContext != null) {
-	    // acquire via JNDI
-	    try {
-		repository = (Repository) jndiContext.lookup(repositoryName);
-	    } catch (NamingException e) {
-		log.error("Error while retrieving repository using JNDI: " + e);
-		return;
-	    }
-	    log.info("Acquired repository via JNDI.");
-	}
+    private Repository getRepositoryByJNDI(InitialContext jndiContext) {
+        // acquire via JNDI
+        try {
+            Repository r = (Repository) jndiContext.lookup(repositoryName);
+            log.info("Acquired repository via JNDI.");
+            return r;
+        } catch (NamingException e) {
+            log.error("Error while retrieving repository using JNDI (name=" + repositoryName +"): " + e);
+            return null;
+        }
-    private void getRepositoryByRMI() {
-	if (rmiURI != null) {
-	    // acquire via RMI
-	    ClientFactoryDelegater cfd = null;
-	    try {
-		Class clazz = Class.forName("org.apache.jackrabbit.j2ee.RMIClientFactoryDelegater");
-		cfd = (ClientFactoryDelegater) clazz.newInstance();
-	    } catch (NoClassDefFoundError e) {
-		log.error("Unable to locate RMI ClientRepositoryFactory. jcr-rmi.jar missing? " + e.toString());
-		return;
-	    } catch (Exception e) {
-		log.error("Unable to locate RMI ClientRepositoryFactory. jcr-rmi.jar missing?" + e.toString());
-		return;
-	    }
+    private Repository getRepositoryByRMI(String rmiURI) {
+        // acquire via RMI
+        log.info("  trying to retrieve repository using rmi. uri=" + rmiURI);
+        ClientFactoryDelegater cfd = null;
+        try {
+            Class clazz = Class.forName("org.apache.jackrabbit.j2ee.RMIClientFactoryDelegater");
+            cfd = (ClientFactoryDelegater) clazz.newInstance();
+        } catch (NoClassDefFoundError e) {
+            log.error("Unable to locate RMI ClientRepositoryFactory. jcr-rmi.jar missing? " + e.toString());
+            return null;
+        } catch (Exception e) {
+            log.error("Unable to locate RMI ClientRepositoryFactory. jcr-rmi.jar missing?" + e.toString());
+            return null;
+        }
-	    try {
-		repository = cfd.getRepository(rmiURI);
-	    } catch (Exception e) {
-		log.error("Error while retrieving repository using RMI: " + e);
-		return;
-	    }
-	    log.info("Acquired repository via RMI.");
-	}
+        try {
+            Repository r = cfd.getRepository(rmiURI);
+            log.info("Acquired repository via RMI.");
+            return r;
+        } catch (Exception e) {
+            log.error("Error while retrieving repository using RMI: " + e);
+            return null;
+        }
-    public static Repository getRepository() {
-	return repository;
+    public static Repository getRepository(ServletContext ctx) {
+	return (Repository) ctx.getAttribute(CTX_ATTR_REPOSITORY);
-     * @see #getRepository()
-     * @see #login(HttpServletRequest)
+     * @see #getRepository(ServletContext)
-    public static Credentials getCredentialsFromHeader(String authHeader)
+    public static Credentials getCredentialsFromHeader(ServletContext ctx,
+                                                       String authHeader)
+            String missingAuthMapping = ctx.getInitParameter(INIT_PARAM_MISSING_AUTH_MAPPING);
-     * also {@link #getRepository()}).
+     * also {@link #getRepository(ServletContext)}).
-     * @see #getRepository() in order to be able to login to a specific workspace.
-     * @see #getCredentialsFromHeader(String) for a utility method to retrieve
+     * @see #getRepository(ServletContext) in order to be able to login to a specific workspace.
+     * @see #getCredentialsFromHeader(ServletContext, String) for a utility method to retrieve
-    public static Session login(HttpServletRequest request)
+    public static Session login(ServletContext ctx, HttpServletRequest request)
-	    return repository.login(getCredentialsFromHeader(authHeader));
+            Repository rep = getRepository(ctx);
+	    return rep.login(getCredentialsFromHeader(ctx, authHeader));
