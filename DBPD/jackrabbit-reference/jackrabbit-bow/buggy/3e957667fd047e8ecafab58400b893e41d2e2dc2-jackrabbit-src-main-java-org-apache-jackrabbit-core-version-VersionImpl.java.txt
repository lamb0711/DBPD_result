Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.log4j.Logger;
-import javax.jcr.Item;
-import javax.jcr.RepositoryException;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.NodeIterator;
-import javax.jcr.nodetype.ConstraintViolationException;
-import javax.jcr.version.Version;
-import javax.jcr.version.VersionHistory;
-import java.util.Calendar;
-public class VersionImpl extends NodeImpl implements Version {
-
-    /**
-     * the default logger.
-     */
-    private static Logger log = Logger.getLogger(VersionImpl.class);
+public class VersionImpl extends AbstractVersion {
-    protected final InternalVersion version;
+    private final InternalVersion version;
+
-     * {@inheritDoc}
-     */
-    public Calendar getCreated() throws RepositoryException {
-        return version.getCreated();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Version[] getSuccessors() throws RepositoryException {
-        // need to wrap it around proper node
-        InternalVersion[] suc = version.getSuccessors();
-        Version[] ret = new Version[suc.length];
-        for (int i = 0; i < suc.length; i++) {
-            ret[i] = (Version) session.getNodeByUUID(suc[i].getId());
-        }
-        return ret;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Version[] getPredecessors() throws RepositoryException {
-        // need to wrap it around proper node
-        InternalVersion[] pred = version.getPredecessors();
-        Version[] ret = new Version[pred.length];
-        for (int i = 0; i < pred.length; i++) {
-            ret[i] = (Version) session.getNodeByUUID(pred[i].getId());
-        }
-        return ret;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public String getUUID() throws UnsupportedRepositoryOperationException, RepositoryException {
-        return version.getId();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public VersionHistory getContainingHistory() throws RepositoryException {
-        return (VersionHistory) getParent();
-    }
-
-    /**
-    public InternalVersion getInternalVersion() {
+    protected InternalVersion getInternalVersion() {
-
-    /**
-     * Returns the frozen node of this version
-     *
-     * @return
-     * @throws RepositoryException
-     */
-    public InternalFrozenNode getFrozenNode() throws RepositoryException {
-        return version.getFrozenNode();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean isSame(Item otherItem) {
-        if (otherItem instanceof VersionImpl) {
-            // since all versions live in the same workspace, we can compare the uuids
-            return ((VersionImpl) otherItem).version.getId().equals(version.getId());
-        } else {
-            return false;
-        }
-    }
-
-    //--------------------------------------< Overwrite "protected" methods >---
-
-
-    /**
-     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
-     * is protected.
-     *
-     * @throws javax.jcr.nodetype.ConstraintViolationException
-     */
-    public void update(String srcWorkspaceName) throws ConstraintViolationException {
-        String msg = "update operation not allowed on a version node: " + safeGetJCRPath();
-        log.debug(msg);
-        throw new ConstraintViolationException(msg);
-    }
-
-    /**
-     * Always throws a {@link javax.jcr.nodetype.ConstraintViolationException} since this node
-     * is protected.
-     *
-     * @throws javax.jcr.nodetype.ConstraintViolationException
-     */
-    public NodeIterator merge(String srcWorkspace, boolean bestEffort)
-            throws ConstraintViolationException {
-        String msg = "merge operation not allowed on a version node: " + safeGetJCRPath();
-        log.debug(msg);
-        throw new ConstraintViolationException(msg);
-    }
-
