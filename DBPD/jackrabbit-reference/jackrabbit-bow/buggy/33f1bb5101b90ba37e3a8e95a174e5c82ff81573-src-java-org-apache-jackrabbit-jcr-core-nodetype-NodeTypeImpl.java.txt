differentiated handling of single vs. multi-valued properties:
multi-valued property can only be set with value array and vice versa


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@46941 13f79535-47bb-0310-9956-ffa450edef68

+     * @param multiValued
-    public PropertyDefImpl getApplicablePropertyDef(QName propertyName, int type)
+    public PropertyDefImpl getApplicablePropertyDef(QName propertyName, int type,
+						    boolean multiValued)
-	return new PropertyDefImpl(ent.getApplicablePropertyDef(propertyName, type),
+	return new PropertyDefImpl(ent.getApplicablePropertyDef(propertyName, type, multiValued),
+	if (value == null) {
+	    // setting a property to null is equivalent of removing it
+	    return canRemoveItem(propertyName);
+	}
-	    PropertyDefImpl def = getApplicablePropertyDef(name, value == null ? PropertyType.UNDEFINED : value.getType());
+	    int type = (value == null) ? PropertyType.UNDEFINED : value.getType();
+	    PropertyDefImpl def = getApplicablePropertyDef(name, type, false);
+	    if (def.isMultiple()) {
+		return false;
+	    }
+     * @see NodeType#canSetProperty(String, Value[])
+     */
+    public boolean canSetProperty(String propertyName, Value values[]) {
+	if (values == null) {
+	    // setting a property to null is equivalent of removing it
+	    return canRemoveItem(propertyName);
+	}
+	try {
+	    QName name = QName.fromJCRName(propertyName, nsResolver);
+	    int type = (values == null || values.length == 0) ? PropertyType.UNDEFINED : values[0].getType();
+	    PropertyDefImpl def = getApplicablePropertyDef(name, type, true);
+	    if (def.isProtected()) {
+		return false;
+	    }
+	    if (!def.isMultiple()) {
+		return false;
+	    }
+	    ArrayList list = new ArrayList();
+	    // convert values and compact array (purge null entries)
+	    for (int i = 0; i < values.length; i++) {
+		if (values[i] != null) {
+		    InternalValue internalValue = InternalValue.create(values[i], nsResolver);
+		    list.add(internalValue);
+		}
+	    }
+	    InternalValue[] internalValues = (InternalValue[]) list.toArray(new InternalValue[list.size()]);
+	    checkSetPropertyValueConstraints(def, internalValues);
+	    return true;
+	} catch (BaseException be) {
+	    // implementation specific exception, fall through
+	} catch (RepositoryException re) {
+	    // fall through
+	}
+	return false;
+    }
+
+    /**
