JCR-329: NodeReferencesId.equals() is not symmetric
plus some cleanups/consolidations (mostly cosmetical) of recent changes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@382075 13f79535-47bb-0310-9956-ffa450edef68

+     * Retrieves the referenceable node with the given <code>UUID</code>.
+     *
+     * @param uuid uuid of the node to be retrieved
+     * @return referenceable node with the given uuid
+     * @throws ItemNotFoundException if no node exists with the given uuid or
+     * if the existing node is not referenceable.
+     * @throws RepositoryException if another error occurs.
+     * @see #getNodeByUUID(String)
+     * @see #getNodeById(NodeId)
+     */
+    public Node getNodeByUUID(UUID uuid) throws ItemNotFoundException, RepositoryException {
+        NodeImpl node = getNodeById(new NodeId(uuid));
+        if (node.isNodeType(QName.MIX_REFERENCEABLE)) {
+            return node;
+        } else {
+            // there is a node with that uuid but the node does not expose it
+            throw new ItemNotFoundException(uuid.toString());
+        }
+    }
+
+    /**
+     * Retrieves the <code>Node</code> with the given id.
+     *
+     * @param id id of node to be retrieved
+     * @return node with the given <code>NodeId</code>.
+     * @throws ItemNotFoundException if no such node exists or if this
+     * <code>Session</code> does not have permission to access the node.
+     * @throws RepositoryException if another error occurs.
+     */
+    public NodeImpl getNodeById(NodeId id) throws ItemNotFoundException, RepositoryException {
+        // check sanity of this session
+        sanityCheck();
+
+        try {
+            return (NodeImpl) getItemManager().getItem(id);
+        } catch (AccessDeniedException ade) {
+            throw new ItemNotFoundException(id.toString());
+        }
+    }
+
+    /**
-     * Retrieve the referenceable node with the given <code>UUID</code>.
-     *
-     * @param uuid
-     * @return referenceable node with the given uuid
-     * @throws ItemNotFoundException if no node exists with the given uuid or
-     * if the existing node is not referenceable.
-     * @throws RepositoryException
-     * @see #getNodeByUUID(String)
-     * @see #getNodeById(NodeId)
-     */
-    public Node getNodeByUUID(UUID uuid) throws ItemNotFoundException, RepositoryException {
-        NodeImpl node = getNodeById(new NodeId(uuid));
-        if (node.isNodeType(QName.MIX_REFERENCEABLE)) {
-            return node;
-        } else {
-            // there is a node with that uuid but the node does not expose it
-            throw new ItemNotFoundException(uuid.toString());
-        }
-    }
-
-    /**
-     * Retrieve the <code>Node</code> with the given id.
-     *
-     * @param id
-     * @return node with the given <code>NodeId</code>.
-     * @throws ItemNotFoundException if no such node exists or if this
-     * <code>Session</code> does not have permission to access the node.
-     * @throws RepositoryException
-     */
-    public NodeImpl getNodeById(NodeId id) throws ItemNotFoundException, RepositoryException {
-        // check sanity of this session
-        sanityCheck();
-
-        try {
-            return (NodeImpl) getItemManager().getItem(id);
-        } catch (AccessDeniedException ade) {
-            throw new ItemNotFoundException(id.toString());
-        }
-    }
-
-    /**
