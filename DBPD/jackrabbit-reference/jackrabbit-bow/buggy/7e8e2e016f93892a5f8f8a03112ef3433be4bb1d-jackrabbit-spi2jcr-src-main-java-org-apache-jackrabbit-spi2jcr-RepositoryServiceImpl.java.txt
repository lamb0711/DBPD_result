JCR-1204: Redesign SPI observation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@592356 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Subscription;
-import java.util.IdentityHashMap;
+import java.util.Collection;
-     * Maps session info instances to {@link EventSubscription}s.
-     */
-    private final Map subscriptions = Collections.synchronizedMap(new IdentityHashMap());
-
-    /**
-        synchronized (sessionInfo) {
-            subscriptions.remove(sessionInfo);
-            getSessionInfoImpl(sessionInfo).getSession().logout();
+        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        for (Iterator it = sInfo.getSubscriptions().iterator(); it.hasNext(); ) {
+            EventSubscription s = (EventSubscription) it.next();
+            s.dispose();
+        sInfo.getSession().logout();
-        // make sure there is an event subscription for this session info
-        getSubscription(sessionInfo);
-
-    public EventBundle[] getEvents(SessionInfo sessionInfo,
-                                   long timeout,
-                                   EventFilter[] filters)
+    public Subscription createSubscription(SessionInfo sessionInfo,
+                                           EventFilter[] filters)
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        return getSessionInfoImpl(sessionInfo).createSubscription(idFactory, filters);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public EventBundle[] getEvents(Subscription subscription, long timeout)
-        return getSubscription(sessionInfo).getEventBundles(filters, timeout);
+        if (subscription instanceof EventSubscription) {
+            return ((EventSubscription) subscription).getEventBundles(timeout);
+        } else {
+            throw new RepositoryException("Unknown subscription implementation: "
+                    + subscription.getClass().getName());
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void updateEventFilters(Subscription subscription,
+                                   EventFilter[] filters)
+            throws RepositoryException {
+        getEventSubscription(subscription).setFilters(filters);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void dispose(Subscription subscription) throws RepositoryException {
+        getEventSubscription(subscription).dispose();
-    private EventSubscription getSubscription(SessionInfo sessionInfo)
-            throws RepositoryException {
-        SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
-        EventSubscription subscr;
-        synchronized (sInfo) {
-            subscr = (EventSubscription) subscriptions.get(sInfo);
-            if (subscr == null) {
-                subscr = new EventSubscription(idFactory, sInfo);
-                if (sInfo.getSession().isLive()) {
-                    ObservationManager obsMgr = sInfo.getSession().getWorkspace().getObservationManager();
-                    obsMgr.addEventListener(subscr, EventSubscription.ALL_EVENTS,
-                            "/", true, null, null, true);
-                }
-                subscriptions.put(sInfo, subscr);
-            }
-        }
-        return subscr;
-    }
-
+    private EventSubscription getEventSubscription(Subscription subscription)
+            throws RepositoryException {
+        if (subscription instanceof EventSubscription) {
+            return (EventSubscription) subscription;
+        } else {
+            throw new RepositoryException("Unknown Subscription implementation: "
+                    + subscription.getClass().getName());
+        }
+    }
+
-            EventSubscription subscr = (EventSubscription) subscriptions.get(sInfo);
-            if (subscr != null) {
+            Collection subscr = sInfo.getSubscriptions();
+            if (subscr.size() != 0) {
-                EventListener listener = subscr.getLocalEventListener();
-                obsMgr.addEventListener(listener, EventSubscription.ALL_EVENTS,
-                        "/", true, null, null, false);
+                List listeners = new ArrayList(subscr.size());
+                    for (Iterator it = subscr.iterator(); it.hasNext(); ) {
+                        EventSubscription s = (EventSubscription) it.next();
+                        EventListener listener = s.getLocalEventListener();
+                        listeners.add(listener);
+                        obsMgr.addEventListener(listener, EventSubscription.ALL_EVENTS,
+                                "/", true, null, null, false);
+                    }
-                    obsMgr.removeEventListener(listener);
+                    for (Iterator it = listeners.iterator(); it.hasNext(); ) {
+                        try {
+                            obsMgr.removeEventListener((EventListener) it.next());
+                        } catch (RepositoryException e) {
+                            // ignore and remove next
+                        }
+                    }
