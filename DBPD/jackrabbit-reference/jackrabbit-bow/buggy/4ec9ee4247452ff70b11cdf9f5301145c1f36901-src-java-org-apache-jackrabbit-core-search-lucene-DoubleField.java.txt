- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Marcel Reutegger
- * @version $Revision:  $, $Date:  $
-	    = Long.toString(Long.MAX_VALUE, Character.MAX_RADIX).length() + 1;
+            = Long.toString(Long.MAX_VALUE, Character.MAX_RADIX).length() + 1;
-	long longValue = Double.doubleToLongBits(value);
-	StringBuffer sb = new StringBuffer(STRING_DOUBLE_LEN);
+        long longValue = Double.doubleToLongBits(value);
+        StringBuffer sb = new StringBuffer(STRING_DOUBLE_LEN);
-	if ((longValue & SIGN_MASK) == 0) {
-	    // positive
-	    String s = Long.toString(longValue, Character.MAX_RADIX);
-	    // add sign character
-	    sb.append('1');
-	    while ((sb.length() + s.length()) < STRING_DOUBLE_LEN) {
-		sb.append('0');
-	    }
-	    sb.append(s);
-	} else {
-	    // negative
-	    // fold value by reversing sign
-	    longValue = -longValue;
-	    String s = Long.toString(longValue, Character.MAX_RADIX);
-	    // pad with leading zeros
-	    while ((sb.length() + s.length()) < STRING_DOUBLE_LEN) {
-		sb.append('0');
-	    }
-	    sb.append(s);
-	}
-	return sb.toString();
+        if ((longValue & SIGN_MASK) == 0) {
+            // positive
+            String s = Long.toString(longValue, Character.MAX_RADIX);
+            // add sign character
+            sb.append('1');
+            while ((sb.length() + s.length()) < STRING_DOUBLE_LEN) {
+                sb.append('0');
+            }
+            sb.append(s);
+        } else {
+            // negative
+            // fold value by reversing sign
+            longValue = -longValue;
+            String s = Long.toString(longValue, Character.MAX_RADIX);
+            // pad with leading zeros
+            while ((sb.length() + s.length()) < STRING_DOUBLE_LEN) {
+                sb.append('0');
+            }
+            sb.append(s);
+        }
+        return sb.toString();
-	if (value.charAt(0) == '1') {
-	    // positive
-	    long longValue = Long.parseLong(value.substring(1), Character.MAX_RADIX);
-	    return Double.longBitsToDouble(longValue);
-	} else if (value.charAt(0) == '0') {
-	    // negative
-	    long longValue = Long.parseLong(value, Character.MAX_RADIX);
-	    // switch sign
-	    longValue = -longValue;
-	    return Double.longBitsToDouble(longValue);
-	} else {
-	    throw new IllegalArgumentException("not a valid string representation of a double: " + value);
-	}
+        if (value.charAt(0) == '1') {
+            // positive
+            long longValue = Long.parseLong(value.substring(1), Character.MAX_RADIX);
+            return Double.longBitsToDouble(longValue);
+        } else if (value.charAt(0) == '0') {
+            // negative
+            long longValue = Long.parseLong(value, Character.MAX_RADIX);
+            // switch sign
+            longValue = -longValue;
+            return Double.longBitsToDouble(longValue);
+        } else {
+            throw new IllegalArgumentException("not a valid string representation of a double: " + value);
+        }
