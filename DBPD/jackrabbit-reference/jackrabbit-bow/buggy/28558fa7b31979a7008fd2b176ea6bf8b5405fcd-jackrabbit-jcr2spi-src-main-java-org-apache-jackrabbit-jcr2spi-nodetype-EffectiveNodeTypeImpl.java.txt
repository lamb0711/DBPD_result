JCR-1591: JSR 283 NodeType Management 
JCR-2105: JSR 283 NodeType Management 

- Node.addNode must check for nt being mixin or abstract
   core: moved to internalAddNode in order to have the check upon
   Node.addNode as well as upon SessionImport
   jcr2spi: delegated to effective node type 
- Node.canAddMixin should be symmetric to Node.addMixin
- NodeType.canAddNode should check for nt being mixin or abstract
   both in core and jcr2spi the check is delegated to the effective node
   type.
   jcr2spi in addition called by all every add-node incl;
   core: in addition called by workspace operations only)

- added and fixed TCK tests


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@780989 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QNodeTypeDefinition;
-     * @see EffectiveNodeType#checkAddNodeConstraints(Name, ItemDefinitionProvider)
+     * @see EffectiveNodeType#checkAddNodeConstraints(org.apache.jackrabbit.spi.Name,QNodeTypeDefinition, ItemDefinitionProvider)
-    public void checkAddNodeConstraints(Name name, Name nodeTypeName, ItemDefinitionProvider definitionProvider)
+    public void checkAddNodeConstraints(Name name, QNodeTypeDefinition nodeTypeDefinition, ItemDefinitionProvider definitionProvider)
-        QNodeDefinition nd = definitionProvider.getQNodeDefinition(this, name, nodeTypeName);
+        if (nodeTypeDefinition.isAbstract()) {
+            throw new ConstraintViolationException(name + " is abstract  be used as primary node type.");
+        }
+        if (nodeTypeDefinition.isMixin()) {
+            throw new ConstraintViolationException(name + " is abstract and cannot be used as primary node type.");
+        }
+        QNodeDefinition nd = definitionProvider.getQNodeDefinition(this, name, nodeTypeDefinition.getName());
-            throw new ConstraintViolationException(name + " is protected");
+            throw new ConstraintViolationException(name + " is protected.");
