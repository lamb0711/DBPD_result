work in progress

- SPI: replace String/Stream for values by QValue interface
- SPI: add factory for QValue
  > adjust commons and add implementation
  > adjust usages of former QValue object with jcr2spi, spi2dav
- RepositoryService.getChildInfos returns Iterator instead of Collection
- spi2dav: add implementation for new query interfaces

- TODO: 
  improve conversion of jcr-value to q-value and vice-versa




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497885 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.httpclient.HttpConnectionManager;
+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.value.QValue;
+import org.apache.jackrabbit.value.QValueFactoryImpl;
-        if (clients.containsKey(sessionInfo)) {
-            return (HttpClient) clients.get(sessionInfo);
-        } else {
-            HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
+        HttpClient client = (HttpClient) clients.get(sessionInfo);
+        if (client == null) {
+            HttpConnectionManager connMgr = new MultiThreadedHttpConnectionManager();
+            client = new HttpClient(connMgr);
-
-            return client;
+            log.debug("Created Client " + client + " for SessionInfo " + sessionInfo);
+        return client;
+    }
+
+    private void removeClient(SessionInfo sessionInfo) {
+        HttpClient cl = (HttpClient) clients.remove(sessionInfo);
+        if (cl != null) {
+            ((MultiThreadedHttpConnectionManager) cl.getHttpConnectionManager()).shutdown();
+        }
+        log.debug("Removed Client " + cl + " for SessionInfo " + sessionInfo);
+    public QValueFactory getQValueFactory() {
+        return QValueFactoryImpl.getInstance();
+    }
+
+        removeClient(sessionInfo);
-                        definition = new QPropertyDefinitionImpl(null, idfElem, nsResolver);
+                        definition = new QPropertyDefinitionImpl(null, idfElem, nsResolver, getQValueFactory());
-    public Collection getChildInfos(SessionInfo sessionInfo, NodeId parentId) throws ItemNotFoundException, RepositoryException {
+    public Iterator getChildInfos(SessionInfo sessionInfo, NodeId parentId) throws ItemNotFoundException, RepositoryException {
-                return Collections.EMPTY_LIST;
+                return Collections.EMPTY_LIST.iterator();
-            Set childEntries = new HashSet();
+            List childEntries = new ArrayList();
-            return childEntries;
+            return childEntries.iterator();
-            PropertyInfo pInfo = new PropertyInfoImpl(id, parentId, propSet, nsResolver, valueFactory);
+            PropertyInfo pInfo = new PropertyInfoImpl(id, parentId, propSet, nsResolver, valueFactory, getQValueFactory());
-                nsResolver, valueFactory);
+                nsResolver, valueFactory, getQValueFactory());
-                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), nsResolver));
+                ntDefs.add(new QNodeTypeDefinitionImpl(it.nextElement(), nsResolver, getQValueFactory()));
-         * @see Batch#addProperty(NodeId, QName, String, int)
+         * @see Batch#addProperty(NodeId, QName, QValue)
-        public void addProperty(NodeId parentId, QName propertyName, String value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void addProperty(NodeId parentId, QName propertyName, QValue value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            QValue qV = QValue.create(value, propertyType);
-            Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
+            Value jcrValue = ValueFormat.getJCRValue(value, nsResolver, valueFactory);
-         * @see Batch#addProperty(NodeId, QName, String[], int)
+         * @see Batch#addProperty(NodeId, QName, QValue[])
-        public void addProperty(NodeId parentId, QName propertyName, String[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void addProperty(NodeId parentId, QName propertyName, QValue[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                QValue v = QValue.create(values[i], propertyType);
-                jcrValues[i] = ValueFormat.getJCRValue(v, nsResolver, valueFactory);
+                jcrValues[i] = ValueFormat.getJCRValue(values[i], nsResolver, valueFactory);
-        /**
-         * @see Batch#addProperty(NodeId, QName, InputStream, int)
-         */
-        public void addProperty(NodeId parentId, QName propertyName, InputStream value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                QValue qV = QValue.create(value, propertyType);
-                Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                ValuesProperty vp = new ValuesProperty(jcrValue);
-                internalAddProperty(parentId, propertyName, vp);
-            } catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-        /**
-         * @see Batch#addProperty(NodeId, QName, InputStream[], int)
-         */
-        public void addProperty(NodeId parentId, QName propertyName, InputStream[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                Value[] jcrValues = new Value[values.length];
-                for (int i = 0; i < values.length; i++) {
-                    QValue qV = QValue.create(values[i], propertyType);
-                    jcrValues[i] = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                }
-                ValuesProperty vp = new ValuesProperty(jcrValues);
-                internalAddProperty(parentId, propertyName, vp);
-            } catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-         * @see Batch#setValue(PropertyId, String, int)
+         * @see Batch#setValue(PropertyId, QValue)
-        public void setValue(PropertyId propertyId, String value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void setValue(PropertyId propertyId, QValue value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                QValue qV = QValue.create(value, propertyType);
-                Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
+                Value jcrValue = ValueFormat.getJCRValue(value, nsResolver, valueFactory);
-         * @see Batch#setValue(PropertyId, String[], int)
+         * @see Batch#setValue(PropertyId, QValue[])
-        public void setValue(PropertyId propertyId, String[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void setValue(PropertyId propertyId, QValue[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                    QValue qV = QValue.create(values[i], propertyType);
-                    jcrValues[i] = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
+                    jcrValues[i] = ValueFormat.getJCRValue(values[i], nsResolver, valueFactory);
-         * @see Batch#setValue(PropertyId, InputStream, int)
-         */
-        public void setValue(PropertyId propertyId, InputStream value, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                DavPropertySet setProperties = new DavPropertySet();
-                if (value == null) {
-                    // setting property value to 'null' is identical to a removal
-                    remove(propertyId);
-                } else {
-                    // qualified value must be converted to jcr value
-                    QValue qV = QValue.create(value, propertyType);
-                    Value jcrValue = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                    ValuesProperty vp = new ValuesProperty(jcrValue);
-                    setProperties.add(vp);
-                }
-                internalSetValue(propertyId, setProperties);
-            } catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-        /**
-         * @see Batch#setValue(PropertyId, InputStream[], int)
-         */
-        public void setValue(PropertyId propertyId, InputStream[] values, int propertyType) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            checkConsumed();
-            try {
-                DavPropertySet setProperties = new DavPropertySet();
-                if (values == null) {
-                    // setting property value to 'null' is identical to a removal
-                    remove(propertyId);
-                } else {
-                    // qualified values must be converted to jcr values
-                    Value[] jcrValues = new Value[values.length];
-                    for (int i = 0; i < values.length; i++) {
-                        QValue qV = QValue.create(values[i], propertyType);
-                        jcrValues[i] = ValueFormat.getJCRValue(qV, nsResolver, valueFactory);
-                    }
-                    setProperties.add(new ValuesProperty(jcrValues));
-                }
-                internalSetValue(propertyId, setProperties);
-            }   catch (IOException e) {
-                throw new ValueFormatException(e);
-            }
-        }
-
-        /**
