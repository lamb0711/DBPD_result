- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.11 $
-	if (parentUUID == null) {
-	    throw new IllegalArgumentException("parentUUID can not be null");
-	}
-	if (propName == null) {
-	    throw new IllegalArgumentException("propName can not be null");
-	}
-	this.parentUUID = parentUUID;
-	this.propName = propName;
+        if (parentUUID == null) {
+            throw new IllegalArgumentException("parentUUID can not be null");
+        }
+        if (propName == null) {
+            throw new IllegalArgumentException("propName can not be null");
+        }
+        this.parentUUID = parentUUID;
+        this.propName = propName;
-	return false;
+        return false;
-	return parentUUID;
+        return parentUUID;
-	return propName;
+        return propName;
-	if (this == obj) {
-	    return true;
-	}
-	if (obj instanceof PropertyId) {
-	    PropertyId other = (PropertyId) obj;
-	    return parentUUID.equals(other.parentUUID)
-		    && propName.equals(other.propName);
-	}
-	return false;
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof PropertyId) {
+            PropertyId other = (PropertyId) obj;
+            return parentUUID.equals(other.parentUUID)
+                    && propName.equals(other.propName);
+        }
+        return false;
-	if (s == null) {
-	    throw new IllegalArgumentException("invalid PropertyId literal");
-	}
-	int i = s.indexOf('/');
-	if (i == -1) {
-	    throw new IllegalArgumentException("invalid PropertyId literal");
-	}
-	String uuid = s.substring(0, i);
-	QName name = QName.valueOf(s.substring(i + 1));
+        if (s == null) {
+            throw new IllegalArgumentException("invalid PropertyId literal");
+        }
+        int i = s.indexOf('/');
+        if (i == -1) {
+            throw new IllegalArgumentException("invalid PropertyId literal");
+        }
+        String uuid = s.substring(0, i);
+        QName name = QName.valueOf(s.substring(i + 1));
-	return new PropertyId(uuid, name);
+        return new PropertyId(uuid, name);
-	return parentUUID + "/" + propName.toString();
+        return parentUUID + "/" + propName.toString();
-	// PropertyId is immutable, we can store the computed hash code value
-	if (hash == 0) {
-	    hash = 577 * parentUUID.hashCode() + 43 * propName.hashCode();
-	}
-	return hash;
+        // PropertyId is immutable, we can store the computed hash code value
+        if (hash == 0) {
+            hash = 577 * parentUUID.hashCode() + 43 * propName.hashCode();
+        }
+        return hash;
