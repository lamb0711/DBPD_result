JCR-2010: Retrieve row path via hierarchy manager instead of node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@758193 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NodeIterator;
+
-class NodeIteratorImpl implements ScoreNodeIterator {
+class NodeIteratorImpl implements NodeIterator {
-    protected final ScoreNode[][] scoreNodes;
+    protected final ScoreNodeIterator scoreNodes;
-    /** Current position in the UUID array */
-    protected int pos = -1;
-
+     * Whether this iterator had been initialized.
+     */
+    private boolean initialized;
+
+    /**
-     * @param scoreNodes    the node ids of the matching nodes.
+     * @param scoreNodes    iterator over score nodes.
-                     ScoreNode[][] scoreNodes,
+                     ScoreNodeIterator scoreNodes,
-        fetchNext();
-        return nextNodeImpl();
-    }
-
-    /**
-     * Returns the next <code>Node</code> in the result set.
-     * @return the next <code>Node</code> in the result set.
-     * @throws NoSuchElementException if iteration has no more
-     *   <code>Node</code>s.
-     */
-    public Object next() throws NoSuchElementException {
-        return nextNode();
-    }
-
-    /**
-     * Returns the next <code>Node</code> in the result set.
-     *
-     * @return the next <code>Node</code> in the result set.
-     * @throws NoSuchElementException if iteration has no more <code>Node</code>s.
-     */
-    public NodeImpl nextNodeImpl() throws NoSuchElementException {
+        initialize();
+     * Returns the next <code>Node</code> in the result set.
+     * @return the next <code>Node</code> in the result set.
+     * @throws NoSuchElementException if iteration has no more
+     *   <code>Node</code>s.
+     */
+    public Object next() throws NoSuchElementException {
+        initialize();
+        return nextNode();
+    }
+
+    /**
-        if (skipNum < 0) {
-            throw new IllegalArgumentException("skipNum must not be negative");
-        }
-        if ((pos + skipNum) > scoreNodes.length) {
-            throw new NoSuchElementException();
-        }
-        if (skipNum == 0) {
-            // do nothing
-        } else {
-            pos += skipNum - 1;
+        initialize();
+        if (skipNum > 0) {
+            scoreNodes.skip(skipNum - 1);
-        return scoreNodes.length - invalid;
+        long size = scoreNodes.getSize();
+        if (size == -1) {
+            return size;
+        } else {
+            return size - invalid;
+        }
-        return pos - invalid;
+        initialize();
+        long position = scoreNodes.getPosition() - invalid;
+        // scoreNode.getPosition() is one ahead
+        // if there is a prefetched node
+        if (next != null) {
+            position--;
+        }
+        return position;
+        initialize();
-     * Returns the score of the node returned by {@link #nextNode()}. In other
-     * words, this method returns the score value of the next <code>Node</code>.
-     * @return the score of the node returned by {@link #nextNode()}.
-     * @throws NoSuchElementException if there is no next node.
-     */
-    public float getScore() throws NoSuchElementException {
-        if (!hasNext()) {
-            throw new NoSuchElementException();
-        }
-        return scoreNodes[pos][selectorIndex].getScore();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public ScoreNode[] getScoreNodes() {
-        return scoreNodes[pos];
-    }
-
-    /**
-        while (next == null && (pos + 1) < scoreNodes.length) {
+        while (next == null && scoreNodes.hasNext()) {
+            ScoreNode[] sn = scoreNodes.nextScoreNodes();
-                next = (NodeImpl) itemMgr.getItem(scoreNodes[pos + 1][selectorIndex].getNodeId());
+                next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
-                        + scoreNodes[pos + 1][selectorIndex].getNodeId() + ": " + e.toString());
+                        + sn[selectorIndex].getNodeId() + ": " + e.toString());
-                pos++;
-        pos++;
+    }
+
+    protected void initialize() {
+        if (!initialized) {
+            fetchNext();
+            initialized = true;
+        }
