JCR-2699: Improve read/write concurrency

Remove wrapper classes that add no extra functionality to the underlying map implementations.
This simplifies the code and helps identify opportunities for improved data structures.

Also removed an obsolete NodeTypeRegistry reference from SessionItemStateManager.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1002168 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.Map;
-import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
-import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
-import org.apache.jackrabbit.spi.QNodeDefinition;
-    private final ItemStateStore atticStore;
+    private final Map<ItemId, ItemState> atticStore =
+        new HashMap<ItemId, ItemState>();
-    private final ItemStateStore transientStore;
+    private final Map<ItemId, ItemState> transientStore =
+        new HashMap<ItemId, ItemState>();
-     * Node Type Registry
-     */
-    private final NodeTypeRegistry ntReg;
-
-    /**
-     * @param ntReg node type registry
-    public SessionItemStateManager(NodeId rootNodeId,
-                                   LocalItemStateManager stateMgr,
-                                   NodeTypeRegistry ntReg) {
-        transientStore = new ItemStateMap();
-        atticStore = new ItemStateMap();
-
+    public SessionItemStateManager(
+            NodeId rootNodeId, LocalItemStateManager stateMgr) {
-
-        this.ntReg = ntReg;
-        if (atticStore.contains(id)) {
+        if (atticStore.containsKey(id)) {
-        if (transientStore.contains(id)) {
+        if (transientStore.containsKey(id)) {
-        if (atticStore.contains(id)) {
+        if (atticStore.containsKey(id)) {
-            return transientStore.contains(id);
+            return transientStore.containsKey(id);
-        if (transientStore.contains(id)) {
+        if (transientStore.containsKey(id)) {
-        return transientStore.contains(id);
+        return transientStore.containsKey(id);
-        return atticStore.contains(id);
+        return atticStore.containsKey(id);
-            ItemId id, ItemStateStore store, HierarchyManager hierarchyManager)
-            throws RepositoryException {
+            ItemId id, Map<ItemId, ItemState> store,
+            HierarchyManager hierarchyManager) throws RepositoryException {
-        if (transientStore.contains(hierMgr.getRootNodeId())) {
+        if (transientStore.containsKey(hierMgr.getRootNodeId())) {
-        return atticStore.contains(id);
+        return atticStore.containsKey(id);
-            if (transientStore.contains(id)) {
+            if (transientStore.containsKey(id)) {
-            transientStore.put(state);
+            transientStore.put(state.getId(), state);
-            if (transientStore.contains(id)) {
+            if (transientStore.containsKey(id)) {
-            transientStore.put(state);
+            transientStore.put(id, state);
-            if (transientStore.contains(id)) {
+            if (transientStore.containsKey(id)) {
-            transientStore.put(state);
+            transientStore.put(id, state);
-            if (transientStore.contains(id)) {
+            if (transientStore.containsKey(id)) {
-            transientStore.put(state);
+            transientStore.put(id, state);
-        atticStore.put(state);
+        atticStore.put(state.getId(), state);
-        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
+        if (state.getContainer() == this
+                || !transientStore.containsKey(state.getId())) {
-        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
+        if (state.getContainer() == this
+                || !transientStore.containsKey(state.getId())) {
-        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
+        if (state.getContainer() == this
+                || !transientStore.containsKey(state.getId())) {
-        if (state.getContainer() == this || !transientStore.contains(state.getId())) {
+        if (state.getContainer() == this
+                || !transientStore.containsKey(state.getId())) {
-            return atticStore.contains(id);
+            return atticStore.containsKey(id);
