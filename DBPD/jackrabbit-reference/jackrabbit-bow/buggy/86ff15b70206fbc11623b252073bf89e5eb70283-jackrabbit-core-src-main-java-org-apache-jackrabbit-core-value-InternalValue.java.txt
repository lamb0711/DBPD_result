JCR-926: BLOBFileValue and InternalValue refactoring, improved garbage collector for the global data store

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@570336 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.data.DataStore;
-    public static final InternalValue BOOLEAN_TRUE = create(true);
+    private static final InternalValue BOOLEAN_TRUE = new InternalValue(true);
-    public static final InternalValue BOOLEAN_FALSE = create(false);
+    private static final InternalValue BOOLEAN_FALSE = new InternalValue(false);
+    
+    /**
+     * If set to 'true', the new global data store will be used, otherwise the old blob store implementation
+     */
+    public static final boolean USE_DATA_STORE = Boolean.valueOf(System.getProperty("org.jackrabbit.useDataStore", "false")).booleanValue();
+    public static InternalValue create(Value value, NamespaceResolver nsResolver, DataStore store)
+            throws ValueFormatException, RepositoryException {
+        return create(value, nsResolver);
+    }
+
+    /**
+     * @param value
+     * @param nsResolver
+     * @return
+     * @throws ValueFormatException
+     * @throws RepositoryException
+     */
-                            return new InternalValue(new BLOBFileValue(stream));
+                            return createTemporary(stream);
-        return new InternalValue(value);
+        return value ? BOOLEAN_TRUE : BOOLEAN_FALSE;
-    public static InternalValue create(InputStream value) throws IOException {
-        return new InternalValue(new BLOBFileValue(value));
-    }
+    public static InternalValue createTemporary(InputStream value) throws IOException {
+        return new InternalValue(new BLOBFileValue(value, true));
+    }    
-    public static InternalValue create(InputStream value, boolean temp) throws IOException {
-        return new InternalValue(new BLOBFileValue(value, temp));
+    public static InternalValue create(InputStream value) throws IOException {
+        return new InternalValue(new BLOBFileValue(value, false));
-     * @param values
-     * @return the created value
-     */
-    public static InternalValue[] create(String[] values) {
-        InternalValue[] ret = new InternalValue[values.length];
-        for (int i = 0; i < values.length; i++) {
-            ret[i] = new InternalValue(values[i]);
-        }
-        return ret;
-    }
-
-    /**
-     * @param values
-     * @return the created value
-     */
-    public static InternalValue[] create(Calendar[] values) {
-        InternalValue[] ret = new InternalValue[values.length];
-        for (int i = 0; i < values.length; i++) {
-            ret[i] = new InternalValue(values[i]);
-        }
-        return ret;
-    }
-
-    /**
-                    return new InternalValue(new BLOBFileValue(stream));
+                    return createTemporary(stream);
-                return new InternalValue(Boolean.valueOf(s).booleanValue());
+                return create(Boolean.valueOf(s).booleanValue());
-                throw new IllegalArgumentException("illegal type");
+                throw new IllegalArgumentException("illegal type: " + type);
