JCR-2640: Internal repository context

Decouple SessionImpl from the details of workspace and data store handling in RepositoryImpl.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@948851 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.management.RepositoryManager;
+import org.apache.jackrabbit.core.data.GarbageCollector;
+import org.apache.jackrabbit.core.persistence.IterablePersistenceManager;
+            context.setWorkspaceManager(new WorkspaceManager(this));
+
+    /**
+     * Creates a data store garbage collector for this repository.
+     * <p>
+     * Note that you should use the {@link RepositoryManager} interface
+     * to access this functionality. This RepositoryImpl method may be
+     * removed in future Jackrabbit versions. 
+     */
+    public GarbageCollector createDataStoreGarbageCollector()
+            throws RepositoryException {
+        ArrayList<PersistenceManager> pmList = new ArrayList<PersistenceManager>();
+        InternalVersionManagerImpl vm = context.getInternalVersionManager();
+        PersistenceManager pm = vm.getPersistenceManager();
+        pmList.add(pm);
+        String[] wspNames = getWorkspaceNames();
+        Session[] sessions = new Session[wspNames.length];
+        for (int i = 0; i < wspNames.length; i++) {
+            String wspName = wspNames[i];
+            WorkspaceInfo wspInfo = getWorkspaceInfo(wspName);
+            // this will initialize the workspace if required
+            SessionImpl systemSession =
+                SystemSession.create(context, wspInfo.getConfig());
+            // mark this session as 'active' so the workspace does not get disposed
+            // by the workspace-janitor until the garbage collector is done
+            onSessionCreated(systemSession);
+            // the workspace could be disposed again, so re-initialize if required
+            // afterwards it will not be disposed because a session is registered
+            wspInfo.initialize();
+            sessions[i] = systemSession;
+            pm = wspInfo.getPersistenceManager();
+            pmList.add(pm);
+        }
+        IterablePersistenceManager[] ipmList =
+            new IterablePersistenceManager[pmList.size()];
+        for (int i = 0; i < pmList.size(); i++) {
+            pm = pmList.get(i);
+            if (!(pm instanceof IterablePersistenceManager)) {
+                ipmList = null;
+                break;
+            }
+            ipmList[i] = (IterablePersistenceManager) pm;
+        }
+        return new GarbageCollector(context.getDataStore(), ipmList, sessions);
+    }
+
+
