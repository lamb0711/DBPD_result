JCR-2087: Upgrade to Java 5 as the base platform

Use Iterables and the foreach loop construct to simplify code that accesses a ChangeLog.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@793238 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import org.apache.jackrabbit.core.version.VersionItemStateManager;
+     * Removes the references entry with the given target node id.
+     * This method is called by {@link VersionItemStateManager} to drop
+     * references to virtual nodes.
+     *
+     * @param targetId target node id
+     */
+    public void removeReferencesEntry(NodeReferencesId targetId) {
+        modifiedRefs.remove(targetId);
+    }
+
+    /**
-     * Return an iterator over all added states.
+     * Return the added states in this change log.
-     * @return iterator over all added states.
+     * @return added states
-    public Iterator<ItemState> addedStates() {
-        return addedStates.values().iterator();
+    public Iterable<ItemState> addedStates() {
+        return addedStates.values();
-     * Return an iterator over all modified states.
+     * Return the modified states in this change log.
+     * <p>
+     * Note that this change log must not be modified while iterating
+     * through the returned states.
-     * @return iterator over all modified states.
+     * @return modified states
-    public Iterator<ItemState> modifiedStates() {
-        return modifiedStates.values().iterator();
+    public Iterable<ItemState> modifiedStates() {
+        return modifiedStates.values();
-     * Return an iterator over all deleted states.
+     * Return the deleted states in this change log.
+     * <p>
+     * Note that this change log must not be modified while iterating
+     * through the returned states.
-     * @return iterator over all deleted states.
+     * @return deleted states
-    public Iterator<ItemState> deletedStates() {
-        return deletedStates.values().iterator();
+    public Iterable<ItemState> deletedStates() {
+        return deletedStates.values();
-     * Return an iterator over all modified references.
+     * Return the modified references in this change log.
+     * <p>
+     * Note that this change log must not be modified while iterating
+     * through the returned states.
-     * @return iterator over all modified references.
+     * @return modified references
-    public Iterator<NodeReferences> modifiedRefs() {
-        return modifiedRefs.values().iterator();
+    public Iterable<NodeReferences> modifiedRefs() {
+        return modifiedRefs.values();
-        Iterator<ItemState> iter = other.deletedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : other.deletedStates()) {
-        iter = other.modifiedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : other.modifiedStates()) {
-        iter = other.addedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : other.addedStates()) {
-        Iterator<ItemState> iter = modifiedStates();
-        while (iter.hasNext()) {
-            iter.next().push();
+        for (ItemState state : modifiedStates()) {
+            state.push();
-        iter = deletedStates();
-        while (iter.hasNext()) {
-            iter.next().push();
+        for (ItemState state : deletedStates()) {
+            state.push();
-        iter = addedStates();
-        while (iter.hasNext()) {
-            iter.next().push();
+        for (ItemState state : addedStates()) {
+            state.push();
-        Iterator<ItemState> iter = modifiedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : modifiedStates()) {
-        iter = deletedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : deletedStates()) {
-        iter = addedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : addedStates()) {
-        Iterator<ItemState> iter = modifiedStates();
-        while (iter.hasNext()) {
-            iter.next().disconnect();
+        for (ItemState state : modifiedStates()) {
+            state.disconnect();
-        iter = deletedStates();
-        while (iter.hasNext()) {
-            iter.next().disconnect();
+        for (ItemState state : deletedStates()) {
+            state.disconnect();
-        iter = addedStates();
-        while (iter.hasNext()) {
-            iter.next().disconnect();
+        for (ItemState state : addedStates()) {
+            state.disconnect();
-        Iterator<ItemState> iter = modifiedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : modifiedStates()) {
-        iter = deletedStates();
-        while (iter.hasNext()) {
-            ItemState state = iter.next();
+        for (ItemState state : deletedStates()) {
-        iter = addedStates();
-        while (iter.hasNext()) {
-            iter.next().discard();
+        for (ItemState state : addedStates()) {
+            state.discard();
