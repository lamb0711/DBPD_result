JCR-327: Mixins as supertypes do not appear to be queryable
- query builder did not take primary types into account that have mixin type in question as supertype.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@380766 13f79535-47bb-0310-9956-ffa450edef68

-     * QName for jcr:primaryType
-     */
-    private static QName primaryType = QName.JCR_PRIMARYTYPE;
-
-    /**
-     * QName for jcr:mixinTypes
-     */
-    private static QName mixinTypes = QName.JCR_MIXINTYPES;
-
-    /**
-        String field = "";
-        List values = new ArrayList();
+
+        List terms = new ArrayList();
-            values.add(node.getValue().toJCRName(nsMappings));
+            String mixinTypesField = QName.JCR_MIXINTYPES.toJCRName(nsMappings);
+            String primaryTypeField = QName.JCR_PRIMARYTYPE.toJCRName(nsMappings);
+
+
-                field = mixinTypes.toJCRName(nsMappings);
+                // search for nodes where jcr:mixinTypes is set to this mixin
+                Term t = new Term(FieldNames.PROPERTIES,
+                        FieldNames.createNamedValue(mixinTypesField,
+                                node.getValue().toJCRName(nsMappings)));
+                terms.add(t);
-                field = primaryType.toJCRName(nsMappings);
+                // search for nodes where jcr:primaryType is set to this type
+                Term t = new Term(FieldNames.PROPERTIES,
+                        FieldNames.createNamedValue(primaryTypeField,
+                                node.getValue().toJCRName(nsMappings)));
+                terms.add(t);
+
+            // now search for all node types that are derived from base
+                // only interested in types that can be used to create nodes
+                if (nt.isMixin()) {
+                    continue;
+                }
-                    values.add(nsMappings.translatePropertyName(nt.getName(),
-                            session.getNamespaceResolver()));
+                    String ntName = nsMappings.translatePropertyName(nt.getName(),
+                            session.getNamespaceResolver());
+                    Term t = new Term(FieldNames.PROPERTIES,
+                            FieldNames.createNamedValue(primaryTypeField, ntName));
+                    terms.add(t);
-        if (values.size() == 0) {
+        if (terms.size() == 0) {
-        } else if (values.size() == 1) {
-            Term t = new Term(FieldNames.PROPERTIES,
-                    FieldNames.createNamedValue(field, (String) values.get(0)));
-            return new TermQuery(t);
+        } else if (terms.size() == 1) {
+            return new TermQuery((Term) terms.get(0));
-            for (Iterator it = values.iterator(); it.hasNext();) {
-                Term t = new Term(FieldNames.PROPERTIES,
-                        FieldNames.createNamedValue(field, (String) it.next()));
-                b.add(new TermQuery(t), false, false);
+            for (Iterator it = terms.iterator(); it.hasNext();) {
+                b.add(new TermQuery((Term) it.next()), false, false);
-                        subQuery = new MatchAllQuery(primaryType.toJCRName(nsMappings));
+                        subQuery = new MatchAllQuery(QName.JCR_PRIMARYTYPE.toJCRName(nsMappings));
