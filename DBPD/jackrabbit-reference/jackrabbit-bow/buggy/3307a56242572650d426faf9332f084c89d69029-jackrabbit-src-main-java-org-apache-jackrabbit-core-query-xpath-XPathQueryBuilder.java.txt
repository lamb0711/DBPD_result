JCR-247: Child axis support for XPath predicates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@477599 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.Path;
-                    } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH) {
-                        // ignore
-                    } else {
-                        exceptions.add(new InvalidQueryException("Only attribute axis is allowed in predicate"));
+                    } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH
+                            || queryNode.getType() == QueryNode.TYPE_RELATION) {
+                        node.childrenAccept(this, queryNode);
+                    QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        ((RelationQueryNode) queryNode).setProperty(name);
+                        Path.PathElement element = Path.PathElement.create(name);
+                        ((RelationQueryNode) queryNode).addPathElement(element);
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        QName name = ISO9075.decode(NameFormat.parse(child.getValue(), resolver));
-                        ((TextsearchQueryNode) queryNode).setPropertyName(name);
+                        TextsearchQueryNode ts = (TextsearchQueryNode) queryNode;
+                        ts.addPathElement(Path.PathElement.create(name));
+                        if (isAttributeNameTest(node)) {
+                            ts.setReferencesProperty(true);
+                        }
+                } else if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                    ((RelationQueryNode) queryNode).addPathElement(
+                            Path.PathElement.create(RelationQueryNode.STAR_NAME_TEST));
+                } else if (queryNode.getType() == QueryNode.TYPE_TEXTSEARCH) {
+                    ((TextsearchQueryNode) queryNode).addPathElement(
+                            Path.PathElement.create(RelationQueryNode.STAR_NAME_TEST));
-                        if (like.getProperty() == null) {
+                        if (like.getRelativePath() == null) {
-                        rel.setProperty(FN_POSITION_FULL);
+                        rel.addPathElement(Path.PathElement.create(FN_POSITION_FULL));
-     * @param node a node with type {@link org.apache.jackrabbit.core.query.xpath.XPathTreeConstants#JJTSTEPEXPR}.
+     * @param node a node with type {@link #JJTSTEPEXPR}.
+     * Returns <code>true</code> if the NodeTest <code>node</code> is an
+     * attribute name test.
+     * Example:
+     * <pre>
+     * StepExpr
+     *     At @
+     *     NodeTest
+     *         NameTest
+     *             QName foo
+     * </pre>
+     * @param node a node with type {@link #JJTNAMETEST}.
+     * @return <code>true</code> if the name test <code>node</code> is on the
+     * attribute axis.
+     */
+    private boolean isAttributeNameTest(SimpleNode node) {
+        SimpleNode stepExpr = (SimpleNode) node.jjtGetParent().jjtGetParent();
+        if (stepExpr.getId() == JJTSTEPEXPR) {
+            return ((SimpleNode) stepExpr.jjtGetChild(0)).getId() == JJTAT;
+        }
+        return false;
+    }
+
+    /**
