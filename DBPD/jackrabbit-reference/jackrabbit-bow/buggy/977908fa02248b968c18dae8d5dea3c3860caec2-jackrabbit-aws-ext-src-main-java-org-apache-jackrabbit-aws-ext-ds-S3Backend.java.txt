JCR-3754 - [jackrabbit-aws-ext] Add retry logic to S3 asynchronous failed upload

Applying patch from Shashank Gupta

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1585461 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.data.AsyncUploadResult;
+import com.amazonaws.AmazonClientException;
+    
+    private ThreadPoolExecutor asyncWriteExecuter;
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("init");
-            }
+            LOG.debug("init");
-                LOG.info("Created bucket: " + bucket + " in " + region);
+                LOG.info("Created bucket [{}] in [{}] ", bucket, region);
-                LOG.info("Using bucket: " + bucket);
+                LOG.info("Using bucket [{}]", bucket);
-            LOG.info("S3 service endpoint: " + endpoint);
+            LOG.info("S3 service endpoint [{}] ", endpoint);
-            LOG.info("Using thread pool of [" + writeThreads
-                + "] threads in S3 transfer manager");
+            LOG.info("Using thread pool of [{}] threads in S3 transfer manager.", writeThreads);
+            
+            int asyncWritePoolSize = 10;
+            String maxConnsStr = prop.getProperty(S3Constants.S3_MAX_CONNS);
+            if (maxConnsStr != null) {
+                asyncWritePoolSize = Integer.parseInt(maxConnsStr)
+                    - writeThreads;
+            }
+            
+            asyncWriteExecuter = (ThreadPoolExecutor) Executors.newFixedThreadPool(
+                asyncWritePoolSize, new NamedThreadFactory("s3-write-worker"));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("S3 Backend initialized in ["
-                    + (System.currentTimeMillis() - startTime.getTime())
-                    + "] ms");
-            }
+            LOG.debug("S3 Backend initialized in [{}] ms",
+                +(System.currentTimeMillis() - startTime.getTime()));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("  error ", e);
-            }
+            LOG.debug("  error ", e);
-        Thread th = new Thread(new AsyncUploadJob(identifier, file, callback));
-        th.start();
+        asyncWriteExecuter.execute(new AsyncUploadJob(identifier, file,
+            callback));
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("exists [" + identifier + "]: [true] took ["
-                        + (System.currentTimeMillis() - start) + "] ms");
-                }
+                LOG.debug("exists [{}]: [true] took [{}] ms.",
+                    identifier, (System.currentTimeMillis() - start) );
-                LOG.info("exists [" + identifier + "]: [false] took ["
-                    + (System.currentTimeMillis() - start) + "] ms");
+                LOG.debug("exists [{}]: [false] took [{}] ms.",
+                    identifier, (System.currentTimeMillis() - start) );
-                    if (LOG.isDebugEnabled()) {
-                        LOG.debug("[ " + identifier.toString()
-                            + "] touched took ["
-                            + (System.currentTimeMillis() - start) + "] ms");
-                    }
+                    LOG.debug("[{}] touched took [{}] ms. ", identifier,
+                        (System.currentTimeMillis() - start));
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("exists [" + identifier + "]: [" + retVal + "] took ["
-                + (System.currentTimeMillis() - start) + "] ms");
-        }
+        LOG.debug("exists [{}]: [{}] took [{}] ms.", new Object[] { identifier,
+            retVal, (System.currentTimeMillis() - start) });
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("[ " + identifier.toString() + "] read took ["
-                    + (System.currentTimeMillis() - start) + "] ms");
-            }
+            LOG.debug("[{}] read took [{}]ms", identifier,
+                (System.currentTimeMillis() - start));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("getAllIdentifiers returned size [ " + ids.size()
-                    + "] took [" + (System.currentTimeMillis() - start)
-                    + "] ms");
-            }
+            LOG.debug("getAllIdentifiers returned size [{}] took [{}] ms.",
+                ids.size(), (System.currentTimeMillis() - start));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Identifier [" + identifier.toString()
-                    + "] 's lastModified = [" + lastModified + "] took ["
-                    + (System.currentTimeMillis() - start) + "] ms");
-            }
+            LOG.debug(
+                "Identifier [{}]'s lastModified = [{}] took [{}]ms.",
+                new Object[] { identifier, lastModified,
+                    (System.currentTimeMillis() - start) });
-                LOG.info("getLastModified:Identifier [" + identifier.toString()
-                    + "] not found. Took ["
-                    + (System.currentTimeMillis() - start) + "]ms");
+                LOG.info(
+                    "getLastModified:Identifier [{}] not found. Took [{}] ms.",
+                    identifier, (System.currentTimeMillis() - start));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Identifier [" + identifier.toString()
-                    + "] 's length = [" + length + "] took ["
-                    + (System.currentTimeMillis() - start) + "] ms");
-            }
+            LOG.debug("Identifier [{}]'s length = [{}] took [{}]ms.",
+                new Object[] { identifier, length,
+                    (System.currentTimeMillis() - start) });
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Identifier [" + identifier.toString()
-                    + "] 's deleted. It took ["
-                    + (System.currentTimeMillis() - start) + "] ms");
-            }
+            LOG.debug("Identifier [{}] deleted. It took [{}]ms.", new Object[] {
+                identifier, (System.currentTimeMillis() - start) });
-                    if (LOG.isDebugEnabled()) {
-                        LOG.debug("id [" + identifier + "], lastModified ["
-                            + lastModified + "]");
-                    }
+                    LOG.debug("Identifier [{}]'s lastModified = [{}]", identifier, lastModified);
-                        if (LOG.isDebugEnabled()) {
-                            LOG.debug("add id :" + s3ObjSumm.getKey()
-                                + " to delete lists");
-                        }
+                        LOG.debug("add id [{}] to delete lists",  s3ObjSumm.getKey());
-                        if (LOG.isDebugEnabled()) {
-                            LOG.debug(deleteList
-                                + " records deleted from datastore");
-                        }
+                        LOG.debug("[{}] records deleted from datastore",
+                            deleteList);
-        LOG.info("deleteAllOlderThan: min=[" + min + "] exit. Deleted ["
-            + deleteIdSet + "] records. Number of records deleted ["
-            + deleteIdSet.size() + "] took ["
-            + (System.currentTimeMillis() - start) + "] ms");
+        LOG.info(
+            "deleteAllOlderThan: min=[{}] exit. Deleted[{}] records. Number of records deleted [{}] took [{}]ms",
+            new Object[] { min, deleteIdSet, deleteIdSet.size(),
+                (System.currentTimeMillis() - start) });
+        asyncWriteExecuter.shutdownNow();
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug(key + "   exists, lastmodified ="
-                        + objectMetaData.getLastModified().getTime());
-                }
+                LOG.debug("[{}]'s exists, lastmodified = [{}]", key,
+                    objectMetaData.getLastModified().getTime());
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("lastModified of " + identifier.toString()
-                        + " updated successfully");
-                }
+                LOG.debug("lastModified of [{}] updated successfully.", identifier);
-                    callback.call(identifier, file,
-                        AsyncUploadCallback.RESULT.SUCCESS);
+                    callback.onSuccess(new AsyncUploadResult(identifier, file));
-                        up.addProgressListener(new S3UploadProgressListener(
+                        up.addProgressListener(new S3UploadProgressListener(up,
-                        if (LOG.isDebugEnabled()) {
-                            LOG.debug("added upload progress listener to identifier ["
-                                + identifier + "]");
-                        }
+                        LOG.debug(
+                            "added upload progress listener to identifier [{}]",
+                            identifier);
-                        if (LOG.isDebugEnabled()) {
-                            LOG.debug("synchronous upload to identifier ["
-                                + identifier + "] completed.");
-                        }
+                        LOG.debug("synchronous upload to identifier [{}] completed.", identifier); 
-                            callback.call(identifier, file,
-                                AsyncUploadCallback.RESULT.SUCCESS);
+                            callback.onSuccess(new AsyncUploadResult(
+                                identifier, file));
-                        callback.call(identifier, file,
-                            AsyncUploadCallback.RESULT.ABORTED);
+                        callback.onAbort(new AsyncUploadResult(identifier, file));
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("write [" + identifier + "] length [" + file.length()
-                + "], in async mode [" + asyncUpload + "] in ["
-                + (System.currentTimeMillis() - start) + "] ms.");
-        }
+        LOG.debug(
+            "write of [{}], length=[{}], in async mode [{}], in [{}]ms",
+            new Object[] { identifier, file.length(), asyncUpload,
+                (System.currentTimeMillis() - start) });
-            LOG.info("Renamed [" + count + "] keys, time taken ["
-                + ((System.currentTimeMillis() - startTime) / 1000) + "] sec");
+            LOG.info("Renamed [{}] keys, time taken [{}]sec", count,
+                ((System.currentTimeMillis() - startTime) / 1000));
-                    LOG.info("Records[" + dobjs.getDeletedObjects().size()
-                        + "] deleted in datastore from index [" + startIndex
-                        + "] to [" + (endIndex - 1) + "]");
+                    LOG.info(
+                        "Records[{}] deleted in datastore from index [{}] to [{}]",
+                        new Object[] { dobjs.getDeletedObjects().size(),
+                            startIndex, (endIndex - 1) });
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug(oldKey + " renamed to " + newS3Key);
-                }
+                LOG.debug("[{}] renamed to [{}] ", oldKey, newS3Key);
+        
+        private Upload upload;
-        public S3UploadProgressListener(DataIdentifier identifier, File file,
+        public S3UploadProgressListener(Upload upload, DataIdentifier identifier, File file,
+            this.upload = upload;
-                    callback.call(identifier, file,
-                        AsyncUploadCallback.RESULT.SUCCESS);
+                    callback.onSuccess(new AsyncUploadResult(identifier, file));
-                    callback.call(identifier, file,
-                        AsyncUploadCallback.RESULT.FAILED);
+                    AsyncUploadResult result = new AsyncUploadResult(
+                        identifier, file);
+                    try {
+                        AmazonClientException e = upload.waitForException();
+                        if (e != null) {
+                            result.setException(e);
+                        }
+                    } catch (InterruptedException e) {
+                        Thread.currentThread().interrupt();
+                    }
+                    callback.onFailure(result);
