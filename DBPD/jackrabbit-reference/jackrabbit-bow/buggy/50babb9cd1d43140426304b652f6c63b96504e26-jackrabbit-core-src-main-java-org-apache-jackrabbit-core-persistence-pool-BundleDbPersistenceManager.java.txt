JCR-2821: Consistency check/fix doesn't work with PSQL persistence manager

Unify bundle loading to automatically choose .getBlob().getBinaryStream() or .getBinaryStream() depending on the type of the result set.
Move bundle size tracking inside BundleReader.

Fix based on a patch by Omid Milani

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1039408 13f79535-47bb-0310-9956-ffa450edef68

+import java.sql.Types;
-import java.util.Arrays;
+import org.apache.jackrabbit.core.persistence.util.BLOBStore;
-import org.apache.jackrabbit.core.persistence.util.NodePropBundle;
-import org.apache.jackrabbit.core.persistence.util.BLOBStore;
+import org.apache.jackrabbit.core.persistence.util.NodePropBundle;
-                    byte[] data = null;
-                        Blob blob = bRs.getBlob(1);
-                        data = getBytes(blob);
+                        // parse and check bundle
+                        NodePropBundle bundle = readBundle(id, bRs, 1);
+                        checkBundleConsistency(id, bundle, fix, modifications);
+                    } catch (SQLException e) {
+                        log.error("Unable to parse bundle " + id, e);
-                    try {
-                        // parse and check bundle
-                        NodePropBundle bundle = binding.readBundle(
-                                new ByteArrayInputStream(data), id);
-                        checkBundleConsistency(id, bundle, fix, modifications);
-                    } catch (IOException e) {
-                        log.error("Unable to parse bundle " + id
-                                + ": " + Arrays.toString(data), e);
-                    }
+    @Override
-        ResultSet rs = null;
-            rs = conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
-            if (!rs.next()) {
-                return null;
-            }
-            byte[] bytes = getBytes(rs.getBlob(1));
-
+            ResultSet rs =
+                conHelper.exec(bundleSelectSQL, getKey(id), false, 0);
-                NodePropBundle bundle =
-                    binding.readBundle(new ByteArrayInputStream(bytes), id);
-                bundle.setSize(bytes.length);
-                return bundle;
-            } catch (IOException e) {
-                log.error("Unable to parse serialization of bundle " + id
-                        + ": " + Arrays.toString(bytes), e);
-                throw e;
+                if (rs.next()) {
+                    return readBundle(id, rs, 1);
+                } else {
+                    return null;
+                }
+            } finally {
+                rs.close();
-        } catch (Exception e) {
+        } catch (SQLException e) {
-        } finally {
-            DbUtility.close(rs);
-     * Reads the blob's bytes and returns it. this is a helper method to
-     * circumvent issue JCR-1039 and JCR-1474
-     * @param blob blob to read
-     * @return bytes of the blob
-     * @throws SQLException if an SQL error occurs
-     * @throws IOException if an I/O error occurs
+     * Reads and parses a bundle from the BLOB in the given column of the
+     * current row of the given result set. This is a helper method to
+     * circumvent issues JCR-1039 and JCR-1474.
+     *
+     * @param id bundle identifier
+     * @param rs result set
+     * @param column BLOB column
+     * @return parsed bundle
+     * @throws SQLException if the bundle can not be read or parsed
-    private byte[] getBytes(Blob blob) throws SQLException, IOException {
-        InputStream in = null;
+    private NodePropBundle readBundle(NodeId id, ResultSet rs, int column)
+            throws SQLException {
-            long length = blob.length();
-            byte[] bytes = new byte[(int) length];
-            in = blob.getBinaryStream();
-            int read, pos = 0;
-            while ((read = in.read(bytes, pos, bytes.length - pos)) > 0) {
-                pos += read;
+            InputStream in;
+            if (rs.getMetaData().getColumnType(column) == Types.BLOB) {
+                in = rs.getBlob(column).getBinaryStream();
+            } else {
+                in = rs.getBinaryStream(column);
-            return bytes;
-        } finally {
-            IOUtils.closeQuietly(in);
+            try {
+                return binding.readBundle(in, id);
+            } finally {
+                in.close();
+            }
+        } catch (IOException e) {
+            SQLException exception =
+                new SQLException("Failed to parse bundle " + id);
+            exception.initCause(e);
+            throw exception;
