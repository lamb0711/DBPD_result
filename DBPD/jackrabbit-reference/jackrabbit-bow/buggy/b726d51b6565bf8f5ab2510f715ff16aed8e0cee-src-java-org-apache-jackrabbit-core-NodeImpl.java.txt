reimplementing Session.importXML & friends due to spec changes 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@154700 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.*;
-import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.nodetype.ChildNodeDef;
+import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
+import org.apache.jackrabbit.core.nodetype.NodeDefId;
+import org.apache.jackrabbit.core.nodetype.NodeDefImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
+import org.apache.jackrabbit.core.nodetype.PropDef;
+import org.apache.jackrabbit.core.nodetype.PropDefId;
+import org.apache.jackrabbit.core.nodetype.PropertyDefImpl;
+import org.apache.jackrabbit.core.state.ItemState;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.NodeReferences;
+import org.apache.jackrabbit.core.state.NodeReferencesId;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.PropertyState;
-import org.apache.jackrabbit.core.version.*;
+import org.apache.jackrabbit.core.version.GenericVersionSelector;
+import org.apache.jackrabbit.core.version.InternalFreeze;
+import org.apache.jackrabbit.core.version.InternalFrozenNode;
+import org.apache.jackrabbit.core.version.InternalFrozenVersionHistory;
+import org.apache.jackrabbit.core.version.InternalVersion;
+import org.apache.jackrabbit.core.version.VersionHistoryImpl;
+import org.apache.jackrabbit.core.version.VersionImpl;
+import org.apache.jackrabbit.core.version.VersionSelector;
-import javax.jcr.*;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.Item;
+import javax.jcr.ItemExistsException;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.ItemVisitor;
+import javax.jcr.MergeException;
+import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.Node;
+import javax.jcr.NodeIterator;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.Property;
+import javax.jcr.PropertyIterator;
+import javax.jcr.PropertyType;
+import javax.jcr.ReferenceValue;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.Value;
+import javax.jcr.ValueFormatException;
-import javax.jcr.nodetype.*;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.nodetype.NoSuchNodeTypeException;
+import javax.jcr.nodetype.NodeDef;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.PropertyDef;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Calendar;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
-        PropertyState propState = null;
+        PropertyState propState;
-        NodeState nodeState = null;
+        NodeState nodeState;
-        PropertyImpl prop = null;
+        PropertyImpl prop;
+     * Same as {@link Node#addMixin(String)}, but takes a <code>QName</code>
+     * instad of a <code>String</code>.
+     *
+     * @see Node#addMixin(String)
+     */
+    public void addMixin(QName mixinName)
+            throws NoSuchNodeTypeException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
+        // check state of this instance
+        sanityCheck();
+
+        // make sure this node is checked-out
+        if (!internalIsCheckedOut()) {
+            String msg = safeGetJCRPath() + ": cannot add a mixin node type to a checked-in node";
+            log.debug(msg);
+            throw new VersionException(msg);
+        }
+
+        // check protected flag
+        if (definition.isProtected()) {
+            String msg = safeGetJCRPath() + ": cannot add a mixin node type to a protected node";
+            log.debug(msg);
+            throw new ConstraintViolationException(msg);
+        }
+
+        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
+        NodeTypeImpl mixin = ntMgr.getNodeType(mixinName);
+        if (!mixin.isMixin()) {
+            throw new RepositoryException(mixinName + ": not a mixin node type");
+        }
+        if (nodeType.isDerivedFrom(mixinName)) {
+            throw new RepositoryException(mixinName + ": already contained in primary node type");
+        }
+
+        // build effective node type of mixin's & primary type in order to detect conflicts
+        NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
+        EffectiveNodeType entExisting;
+        try {
+            // existing mixin's
+            HashSet set = new HashSet(((NodeState) state).getMixinTypeNames());
+            // primary type
+            set.add(nodeType.getQName());
+            // build effective node type representing primary type including existing mixin's
+            entExisting = ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+            if (entExisting.includesNodeType(mixinName)) {
+                throw new RepositoryException(mixinName + ": already contained in mixin types");
+            }
+            // add new mixin
+            set.add(mixinName);
+            // try to build new effective node type (will throw in case of conflicts)
+            ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+        } catch (NodeTypeConflictException ntce) {
+            throw new ConstraintViolationException(ntce.getMessage());
+        }
+
+        // do the actual modifications implied by the new mixin;
+        // try to revert the changes in case an excpetion occurs
+        try {
+            // modify the state of this node
+            NodeState thisState = (NodeState) getOrCreateTransientItemState();
+            // add mixin name
+            Set mixins = new HashSet(thisState.getMixinTypeNames());
+            mixins.add(mixinName);
+            thisState.setMixinTypeNames(mixins);
+
+            // set jcr:mixinTypes property
+            setMixinTypesProperty(mixins);
+
+            // add 'auto-create' properties defined in mixin type
+            PropertyDef[] pda = mixin.getAutoCreatePropertyDefs();
+            for (int i = 0; i < pda.length; i++) {
+                PropertyDefImpl pd = (PropertyDefImpl) pda[i];
+                // make sure that the property is not already defined by primary type
+                // or existing mixin's
+                NodeTypeImpl declaringNT = (NodeTypeImpl) pd.getDeclaringNodeType();
+                if (!entExisting.includesNodeType(declaringNT.getQName())) {
+                    createChildProperty(pd.getQName(), pd.getRequiredType(), pd);
+                }
+            }
+
+            // recursively add 'auto-create' child nodes defined in mixin type
+            NodeDef[] nda = mixin.getAutoCreateNodeDefs();
+            for (int i = 0; i < nda.length; i++) {
+                NodeDefImpl nd = (NodeDefImpl) nda[i];
+                // make sure that the child node is not already defined by primary type
+                // or existing mixin's
+                NodeTypeImpl declaringNT = (NodeTypeImpl) nd.getDeclaringNodeType();
+                if (!entExisting.includesNodeType(declaringNT.getQName())) {
+                    createChildNode(nd.getQName(), nd, (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
+                }
+            }
+        } catch (RepositoryException re) {
+            // try to undo the modifications by removing the mixin
+            try {
+                removeMixin(mixinName);
+            } catch (RepositoryException re1) {
+                // silently ignore & fall through
+            }
+            throw re;
+        }
+    }
+
+    /**
+     * Same as {@link Node#removeMixin(String)}, but takes a <code>QName</code>
+     * instad of a <code>String</code>.
+     *
+     * @see Node#removeMixin(String)
+     */
+    public void removeMixin(QName mixinName)
+            throws NoSuchNodeTypeException, VersionException,
+            ConstraintViolationException, LockException, RepositoryException {
+        // check state of this instance
+        sanityCheck();
+
+        // make sure this node is checked-out
+        if (!internalIsCheckedOut()) {
+            String msg = safeGetJCRPath() + ": cannot remove a mixin node type from a checked-in node";
+            log.debug(msg);
+            throw new VersionException(msg);
+        }
+
+        // check protected flag
+        if (definition.isProtected()) {
+            String msg = safeGetJCRPath() + ": cannot remove a mixin node type from a protected node";
+            log.debug(msg);
+            throw new ConstraintViolationException(msg);
+        }
+
+        // check if mixin is assigned
+        if (!((NodeState) state).getMixinTypeNames().contains(mixinName)) {
+            throw new NoSuchNodeTypeException();
+        }
+
+        if (MIX_REFERENCEABLE.equals(mixinName)) {
+            /**
+             * mix:referenceable needs special handling because it has
+             * special semantics:
+             * it can only be removed if there no more references to this node
+             */
+            PropertyIterator iter = getReferences();
+            if (iter.hasNext()) {
+                throw new ConstraintViolationException(mixinName + " can not be removed: the node is being referenced through at least one property of type REFERENCE");
+            }
+        }
+
+        // modify the state of this node
+        NodeState thisState = (NodeState) getOrCreateTransientItemState();
+        // remove mixin name
+        Set mixins = new HashSet(thisState.getMixinTypeNames());
+        mixins.remove(mixinName);
+        thisState.setMixinTypeNames(mixins);
+
+        // set jcr:mixinTypes property
+        setMixinTypesProperty(mixins);
+
+        // build effective node type of remaining mixin's & primary type
+        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
+        NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
+        EffectiveNodeType entRemaining;
+        try {
+            // remaining mixin's
+            HashSet set = new HashSet(mixins);
+            // primary type
+            set.add(nodeType.getQName());
+            // build effective node type representing primary type including remaining mixin's
+            entRemaining = ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
+        } catch (NodeTypeConflictException ntce) {
+            throw new ConstraintViolationException(ntce.getMessage());
+        }
+
+        NodeTypeImpl mixin = session.getNodeTypeManager().getNodeType(mixinName);
+
+        // shortcut
+        if (mixin.getChildNodeDefs().length == 0
+                && mixin.getPropertyDefs().length == 0) {
+            // the node type has neither property nor child node definitions,
+            // i.e. we're done
+            return;
+        }
+
+        // walk through properties and child nodes and remove those that have been
+        // defined by the specified mixin type
+
+        // use temp array to avoid ConcurrentModificationException
+        ArrayList tmp = new ArrayList(thisState.getPropertyEntries());
+        Iterator iter = tmp.iterator();
+        while (iter.hasNext()) {
+            NodeState.PropertyEntry entry = (NodeState.PropertyEntry) iter.next();
+            PropertyImpl prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getUUID(), entry.getName()));
+            // check if property has been defined by mixin type (or one of its supertypes)
+            NodeTypeImpl declaringNT = (NodeTypeImpl) prop.getDefinition().getDeclaringNodeType();
+            if (!entRemaining.includesNodeType(declaringNT.getQName())) {
+                // the remaining effective node type doesn't include the
+                // node type that declared this property, it is thus safe
+                // to remove it
+                removeChildProperty(entry.getName());
+            }
+        }
+        // use temp array to avoid ConcurrentModificationException
+        tmp = new ArrayList(thisState.getChildNodeEntries());
+        iter = tmp.iterator();
+        while (iter.hasNext()) {
+            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) iter.next();
+            NodeImpl node = (NodeImpl) itemMgr.getItem(new NodeId(entry.getUUID()));
+            // check if node has been defined by mixin type (or one of its supertypes)
+            NodeTypeImpl declaringNT = (NodeTypeImpl) node.getDefinition().getDeclaringNodeType();
+            if (!entRemaining.includesNodeType(declaringNT.getQName())) {
+                // the remaining effective node type doesn't include the
+                // node type that declared this child node, it is thus safe
+                // to remove it
+                removeChildNode(entry.getName(), entry.getIndex());
+            }
+        }
+    }
+
+    /**
-     * Same as <code>{@link Node#addNode(String)}</code> except that
-     * this method takes a <code>QName</code> name argument instead of a
-     * <code>String</code>.
-     *
-     * @param nodeName
-     * @return
-     * @throws ItemExistsException
-     * @throws VersionException
-     * @throws ConstraintViolationException
-     * @throws LockException
-     * @throws RepositoryException
-     */
-    public synchronized NodeImpl addNode(QName nodeName)
-            throws ItemExistsException, VersionException,
-            ConstraintViolationException, LockException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = safeGetJCRPath() + ": cannot add node to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        return internalAddChildNode(nodeName, null);
-    }
-
-    /**
-     * this method takes a <code>QName</code> arguments instead of a
-     * <code>String</code>s.
+     * this method takes <code>QName</code> arguments instead of
+     * <code>String</code>s and has an additional <code>uuid</code> argument.
+     * <p/>
+     * <b>Important Notice:</b> This method is for internal use only! Passing
+     * already assigned uuid's might lead to unexpected results and
+     * data corruption in the worst case.
-     * @param nodeName
-     * @param nodeTypeName
-     * @return
+     * @param nodeName     name of the new node
+     * @param nodeTypeName name of the new node's node type or <code>null</code>
+     *                     if it should be determined automatically
+     * @param uuid         uuid of the new node or <code>null</code> if a new
+     *                     uuid should be assigned
+     * @return the newly added node
-    public synchronized NodeImpl addNode(QName nodeName, QName nodeTypeName)
+    public synchronized NodeImpl addNode(QName nodeName, QName nodeTypeName,
+                                         String uuid)
-        NodeTypeImpl nt = session.getNodeTypeManager().getNodeType(nodeTypeName);
-        return internalAddChildNode(nodeName, nt);
+        NodeTypeImpl nt = (nodeTypeName == null) ?
+                null : session.getNodeTypeManager().getNodeType(nodeTypeName);
+        return internalAddChildNode(nodeName, nt, uuid);
+        int type;
+        if (values == null || values.length == 0) {
+            type = PropertyType.UNDEFINED;
+        } else {
+            type = values[0].getType();
+        }
+        return setProperty(name, values, type);
+    }
+
+    /**
+     * Same as <code>{@link Node#setProperty(String, Value[], int)}</code> except
+     * that this method takes a <code>QName</code> name argument instead of a
+     * <code>String</code>.
+     *
+     * @param name
+     * @param values
+     * @param type
+     * @return
+     * @throws ValueFormatException
+     * @throws VersionException
+     * @throws LockException
+     * @throws RepositoryException
+     */
+    public PropertyImpl setProperty(QName name, Value[] values, int type)
+            throws ValueFormatException, VersionException, LockException,
+            RepositoryException {
-        int type;
-        if (values == null || values.length == 0) {
-            type = PropertyType.UNDEFINED;
-        } else {
-            type = values[0].getType();
-        }
-        // check state of this instance
-        sanityCheck();
-
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = safeGetJCRPath() + ": cannot add a mixin node type to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            String msg = safeGetJCRPath() + ": cannot add a mixin node type to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
-        NodeTypeImpl mixin = ntMgr.getNodeType(ntName);
-        if (!mixin.isMixin()) {
-            throw new RepositoryException(mixinName + ": not a mixin node type");
-        }
-        if (nodeType.isDerivedFrom(ntName)) {
-            throw new RepositoryException(mixinName + ": already contained in primary node type");
-        }
-
-        // build effective node type of mixin's & primary type in order to detect conflicts
-        NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
-        EffectiveNodeType entExisting;
-        try {
-            // existing mixin's
-            HashSet set = new HashSet(((NodeState) state).getMixinTypeNames());
-            // primary type
-            set.add(nodeType.getQName());
-            // build effective node type representing primary type including existing mixin's
-            entExisting = ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
-            if (entExisting.includesNodeType(ntName)) {
-                throw new RepositoryException(mixinName + ": already contained in mixin types");
-            }
-            // add new mixin
-            set.add(ntName);
-            // try to build new effective node type (will throw in case of conflicts)
-            ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
-        } catch (NodeTypeConflictException ntce) {
-            throw new ConstraintViolationException(ntce.getMessage());
-        }
-
-        // do the actual modifications implied by the new mixin;
-        // try to revert the changes in case an excpetion occurs
-        try {
-            // modify the state of this node
-            NodeState thisState = (NodeState) getOrCreateTransientItemState();
-            // add mixin name
-            Set mixins = new HashSet(thisState.getMixinTypeNames());
-            mixins.add(ntName);
-            thisState.setMixinTypeNames(mixins);
-
-            // set jcr:mixinTypes property
-            setMixinTypesProperty(mixins);
-
-            // add 'auto-create' properties defined in mixin type
-            PropertyDef[] pda = mixin.getAutoCreatePropertyDefs();
-            for (int i = 0; i < pda.length; i++) {
-                PropertyDefImpl pd = (PropertyDefImpl) pda[i];
-                // make sure that the property is not already defined by primary type
-                // or existing mixin's
-                NodeTypeImpl declaringNT = (NodeTypeImpl) pd.getDeclaringNodeType();
-                if (!entExisting.includesNodeType(declaringNT.getQName())) {
-                    createChildProperty(pd.getQName(), pd.getRequiredType(), pd);
-                }
-            }
-
-            // recursively add 'auto-create' child nodes defined in mixin type
-            NodeDef[] nda = mixin.getAutoCreateNodeDefs();
-            for (int i = 0; i < nda.length; i++) {
-                NodeDefImpl nd = (NodeDefImpl) nda[i];
-                // make sure that the child node is not already defined by primary type
-                // or existing mixin's
-                NodeTypeImpl declaringNT = (NodeTypeImpl) nd.getDeclaringNodeType();
-                if (!entExisting.includesNodeType(declaringNT.getQName())) {
-                    createChildNode(nd.getQName(), nd, (NodeTypeImpl) nd.getDefaultPrimaryType(), null);
-                }
-            }
-        } catch (RepositoryException re) {
-            // try to undo the modifications by removing the mixin
-            try {
-                removeMixin(mixinName);
-            } catch (RepositoryException re1) {
-                // silently ignore & fall through
-            }
-            throw re;
-        }
+        addMixin(ntName);
-        // check state of this instance
-        sanityCheck();
-
-        // make sure this node is checked-out
-        if (!internalIsCheckedOut()) {
-            String msg = safeGetJCRPath() + ": cannot remove a mixin node type from a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            String msg = safeGetJCRPath() + ": cannot remove a mixin node type from a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check if mixin is assigned
-        if (!((NodeState) state).getMixinTypeNames().contains(ntName)) {
-            throw new NoSuchNodeTypeException(mixinName);
-        }
-
-        if (MIX_REFERENCEABLE.equals(ntName)) {
-            /**
-             * mix:referenceable needs special handling because it has
-             * special semantics:
-             * it can only be removed if there no more references to this node
-             */
-            PropertyIterator iter = getReferences();
-            if (iter.hasNext()) {
-                throw new ConstraintViolationException(mixinName + " can not be removed: the node is being referenced through at least one property of type REFERENCE");
-            }
-        }
-
-        // modify the state of this node
-        NodeState thisState = (NodeState) getOrCreateTransientItemState();
-        // remove mixin name
-        Set mixins = new HashSet(thisState.getMixinTypeNames());
-        mixins.remove(ntName);
-        thisState.setMixinTypeNames(mixins);
-
-        // set jcr:mixinTypes property
-        setMixinTypesProperty(mixins);
-
-        // build effective node type of remaining mixin's & primary type
-        NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
-        NodeTypeRegistry ntReg = ntMgr.getNodeTypeRegistry();
-        EffectiveNodeType entRemaining;
-        try {
-            // remaining mixin's
-            HashSet set = new HashSet(mixins);
-            // primary type
-            set.add(nodeType.getQName());
-            // build effective node type representing primary type including remaining mixin's
-            entRemaining = ntReg.getEffectiveNodeType((QName[]) set.toArray(new QName[set.size()]));
-        } catch (NodeTypeConflictException ntce) {
-            throw new ConstraintViolationException(ntce.getMessage());
-        }
-
-        NodeTypeImpl mixin = session.getNodeTypeManager().getNodeType(ntName);
-
-        // shortcut
-        if (mixin.getChildNodeDefs().length == 0
-                && mixin.getPropertyDefs().length == 0) {
-            // the node type has neither property nor child node definitions,
-            // i.e. we're done
-            return;
-        }
-
-        // walk through properties and child nodes and remove those that have been
-        // defined by the specified mixin type
-
-        // use temp array to avoid ConcurrentModificationException
-        ArrayList tmp = new ArrayList(thisState.getPropertyEntries());
-        Iterator iter = tmp.iterator();
-        while (iter.hasNext()) {
-            NodeState.PropertyEntry entry = (NodeState.PropertyEntry) iter.next();
-            PropertyImpl prop = (PropertyImpl) itemMgr.getItem(new PropertyId(thisState.getUUID(), entry.getName()));
-            // check if property has been defined by mixin type (or one of its supertypes)
-            NodeTypeImpl declaringNT = (NodeTypeImpl) prop.getDefinition().getDeclaringNodeType();
-            if (!entRemaining.includesNodeType(declaringNT.getQName())) {
-                // the remaining effective node type doesn't include the
-                // node type that declared this property, it is thus safe
-                // to remove it
-                removeChildProperty(entry.getName());
-            }
-        }
-        // use temp array to avoid ConcurrentModificationException
-        tmp = new ArrayList(thisState.getChildNodeEntries());
-        iter = tmp.iterator();
-        while (iter.hasNext()) {
-            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) iter.next();
-            NodeImpl node = (NodeImpl) itemMgr.getItem(new NodeId(entry.getUUID()));
-            // check if node has been defined by mixin type (or one of its supertypes)
-            NodeTypeImpl declaringNT = (NodeTypeImpl) node.getDefinition().getDeclaringNodeType();
-            if (!entRemaining.includesNodeType(declaringNT.getQName())) {
-                // the remaining effective node type doesn't include the
-                // node type that declared this child node, it is thus safe
-                // to remove it
-                removeChildNode(entry.getName(), entry.getIndex());
-            }
-        }
+        removeMixin(ntName);
-            try {
-                node.addMixin(mxNames[i].toJCRName(session.getNamespaceResolver()));
-            } catch (NoPrefixDeclaredException e) {
-                throw new NoSuchNodeTypeException("Unable to resolve mixin: " + e.toString());
-            }
+            node.addMixin(mxNames[i]);
-            try {
-                node.addMixin(mxNames[i].toJCRName(session.getNamespaceResolver()));
-            } catch (NoPrefixDeclaredException e) {
-                throw new NoSuchNodeTypeException("Unable to resolve mixin: " + e.toString());
-            }
+            node.addMixin(mxNames[i]);
-                try {
-                    addMixin(values[i].toJCRName(session.getNamespaceResolver()));
-                } catch (NoPrefixDeclaredException e) {
-                    String msg = "Unable to add mixin for restored node: " + e.getMessage();
-                    log.debug(msg);
-                    throw new RepositoryException(msg);
-                }
+                addMixin(values[i]);
