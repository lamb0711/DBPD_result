added some low-level hooks to NodeTypeRegistry & RepositoryImpl to improve re-usability of certain components

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161889 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.observation.ObservationManagerFactory;
+import org.apache.jackrabbit.core.observation.ObservationManagerFactory;
+import java.security.AccessControlContext;
+import java.security.AccessController;
-import java.security.AccessControlContext;
-import java.security.AccessController;
-    private final RepositoryConfig repConfig;
+    protected final RepositoryConfig repConfig;
-    /** the delegating observation dispatcher for all workspaces */
+    /**
+     * the delegating observation dispatcher for all workspaces
+     */
-    private RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {
+    protected RepositoryImpl(RepositoryConfig repConfig) throws RepositoryException {
-        nsReg = new NamespaceRegistryImpl(new BasedFileSystem(repStore, "/namespaces"));
+        nsReg = createNamespaceRegistry(new BasedFileSystem(repStore, "/namespaces"));
-        ntReg = NodeTypeRegistry.create(nsReg, new BasedFileSystem(repStore, "/nodetypes"));
+        ntReg = createNodeTypeRegistry(nsReg, new BasedFileSystem(repStore, "/nodetypes"));
+     * Creates the <code>NamespaceRegistry</code> instance.
+     *
+     * @param fs
+     * @return
+     * @throws RepositoryException
+     */
+    protected NamespaceRegistryImpl createNamespaceRegistry(FileSystem fs)
+            throws RepositoryException {
+        return new NamespaceRegistryImpl(fs);
+    }
+
+    /**
+     * Creates the <code>NodeTypeRegistry</code> instance.
+     *
+     * @param fs
+     * @return
+     * @throws RepositoryException
+     */
+    protected NodeTypeRegistry createNodeTypeRegistry(NamespaceRegistry nsReg,
+                                                      FileSystem fs)
+            throws RepositoryException {
+        return NodeTypeRegistry.create(nsReg, fs);
+    }
+
+    /**
+    /**
+     * Performs a sanity check on this repository instance.
+     *
+     * @throws IllegalStateException if this repository has been rendered
+     *                               invalid for some reason (e.g. if it has
+     *                               been shut down)
+     */
+    protected void sanityCheck() throws IllegalStateException {
+        // check repository status
+        if (disposed) {
+            throw new IllegalStateException("repository instance has been shut down");
+        }
+    }
+
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
+     * Returns the {@link WorkspaceInfo} for the named workspace.
+     *
+     * @param workspaceName The name of the workspace whose {@link WorkspaceInfo}
+     *                      is to be returned. This must not be <code>null</code>.
+     * @return The {@link WorkspaceInfo} for the named workspace. This will
+     *         never be <code>null</code>.
+     * @throws IllegalStateException    If this repository has already been
+     *                                  shut down.
+     * @throws NoSuchWorkspaceException If the named workspace does not exist.
+     */
+    protected WorkspaceInfo getWorkspaceInfo(String workspaceName)
+            throws NoSuchWorkspaceException {
+        // check sanity of this instance
+        sanityCheck();
+
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
+
+        return wspInfo;
+    }
+
+    /**
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getItemStateProvider();
+        return getWorkspaceInfo(workspaceName).getItemStateProvider();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getObservationManagerFactory();
+        return getWorkspaceInfo(workspaceName).getObservationManagerFactory();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getSearchManager();
+        return getWorkspaceInfo(workspaceName).getSearchManager();
+        // check sanity of this instance
+        sanityCheck();
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
-
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getLockManager();
+        return getWorkspaceInfo(workspaceName).getLockManager();
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        return wspInfo.getSystemSession();
+        return getWorkspaceInfo(workspaceName).getSystemSession();
-
-    SessionImpl createSession(LoginContext loginContext, String workspaceName)
+    SessionImpl createSession(LoginContext loginContext,
+                              String workspaceName)
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        XASessionImpl ses = new XASessionImpl(this, loginContext, wspInfo.getConfig());
+        WorkspaceInfo wspInfo = getWorkspaceInfo(workspaceName);
+        SessionImpl ses = createSessionInstance(loginContext, wspInfo.getConfig());
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-        XASessionImpl ses = new XASessionImpl(this, subject, wspInfo.getConfig());
+        WorkspaceInfo wspInfo = getWorkspaceInfo(workspaceName);
+        SessionImpl ses = createSessionInstance(subject, wspInfo.getConfig());
-        // check state
+        // check status of this instance
+    /**
+     * Returns an <code>InputStream</code> on a <code>Properties</code> resource
+     * which contains the default properties for the repository. This method is
+     * only called once during repository initialization.
+     * <p/>
+     * The <code>InputStream</code> returned is closed by the caller.
+     * <p/>
+     * This method returns an <code>InputStream</code> on the
+     * <code>org/apache/jackrabbit/core/repository.properties</code> resource
+     * found in the class path.
+     *
+     * @return <code>InputStream</code> on a <code>Properties</code> resource
+     *         or <code>null</code> if the resource does not exist.
+     */
+    protected InputStream getDefaultRepositoryProperties() {
+        return RepositoryImpl.class.getResourceAsStream("repository.properties");
+    }
+
-                InputStream in = RepositoryImpl.class.getResourceAsStream("repository.properties");
-                repProps.load(in);
-                in.close();
+                InputStream in = getDefaultRepositoryProperties();
+                if (in != null) {
+                    try {
+                        repProps.load(in);
+                    } finally {
+                        in.close();
+                    }
+                }
-    private static PersistenceManager createPersistenceManager(
-            File homeDir, FileSystem fs, PersistenceManagerConfig pmConfig,
-            String rootNodeUUID, NamespaceRegistry nsReg, NodeTypeRegistry ntReg)
+    private static PersistenceManager createPersistenceManager(File homeDir, FileSystem fs, PersistenceManagerConfig pmConfig,
+                                                               String rootNodeUUID, NamespaceRegistry nsReg, NodeTypeRegistry ntReg)
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
+        // check sanity of this instance
+        sanityCheck();
-        if (!wspInfos.containsKey(workspaceName)) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
+        // check if workspace exists (will throw NoSuchWorkspaceException if not)
+        getWorkspaceInfo(workspaceName);
-        // check state
+        // check status of this instance
+    //-----------------------------------------< overrideable factory methods >
+    /**
+     * Creates an instance of the {@link SessionImpl} class representing a
+     * user authenticated by the <code>loginContext</code> instance attached
+     * to the workspace configured by the <code>wspConfig</code>.
+     *
+     * @throws AccessDeniedException when ??
+     * @throws RepositoryException   If any other error occurrs creating the
+     *                               session.
+     */
+    protected SessionImpl createSessionInstance(LoginContext loginContext,
+                                                WorkspaceConfig wspConfig)
+            throws AccessDeniedException, RepositoryException {
+
+        return new XASessionImpl(this, loginContext, wspConfig);
+    }
+
+    /**
+     * Creates an instance of the {@link SessionImpl} class representing a
+     * user represented by the <code>subject</code> instance attached
+     * to the workspace configured by the <code>wspConfig</code>.
+     *
+     * @throws AccessDeniedException when ??
+     * @throws RepositoryException   If any other error occurrs creating the
+     *                               session.
+     */
+    protected SessionImpl createSessionInstance(Subject subject,
+                                                WorkspaceConfig wspConfig)
+            throws AccessDeniedException, RepositoryException {
+
+        return new XASessionImpl(this, subject, wspConfig);
+    }
+
-         *  if no <code>SearchManager</code>
+         *         if no <code>SearchManager</code>
