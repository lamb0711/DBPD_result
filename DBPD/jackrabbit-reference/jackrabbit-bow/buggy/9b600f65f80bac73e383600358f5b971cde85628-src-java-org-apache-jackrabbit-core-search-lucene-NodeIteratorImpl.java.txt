Implemented RowIterator and Row interfaces. Adapted test queries to latest jcr version. jcr:score and jcr:path as select properties are not yet implemented!

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@149237 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeImpl;
+ * Implements a {@link javax.jcr.NodeIterator} returned by
+ * {@link javax.jcr.query.QueryResult#getNodes()}.
+    /** Logger instance for this class */
+    /** The UUIDs of the nodes in the result set */
+    /** ItemManager to turn UUIDs into Node instances */
+    /** Current position in the UUID array */
+    /**
+     * Creates a new <code>NodeIteratorImpl</code> instance.
+     * @param itemMgr the <code>ItemManager</code> to turn UUIDs into
+     *   <code>Node</code> instances.
+     * @param uuids the UUIDs of the result nodes.
+     */
+    /**
+     * Returns the next <code>Node</code> in the result set.
+     * @return the next <code>Node</code> in the result set.
+     * @throws java.util.NoSuchElementException if iteration has no more
+     *   <code>Node</code>s.
+     */
-        if (pos >= uuids.length) {
-            throw new NoSuchElementException();
-        }
-        try {
-            return (Node) itemMgr.getItem(new NodeId(uuids[pos++]));
-        } catch (RepositoryException e) {
-            log.error("Exception retrieving Node with UUID: "
-                    + uuids[pos] + ": " + e.toString());
-            // FIXME this is bad error handling!
-            throw new NoSuchElementException();
-        }
+        return nextNodeImpl();
+    /**
+     * Returns the next <code>Node</code> in the result set.
+     * @return the next <code>Node</code> in the result set.
+     * @throws java.util.NoSuchElementException if iteration has no more
+     *   <code>Node</code>s.
+     */
+    /**
+     * Skip a number of <code>Node</code>s in this iterator.
+     * @param skipNum the non-negative number of <code>Node</code>s to skip
+     * @throws java.util.NoSuchElementException
+     *          if skipped past the last <code>Node</code> in this iterator.
+     */
+        if (skipNum < 0) {
+            throw new IllegalArgumentException("skipNum must not be negative");
+        }
+    /**
+     * Returns the number of <code>Node</code>s in this
+     * <code>NodeIterator</code>.
+     * @return the number of <code>Node</code>s in this
+     *   <code>NodeIterator</code>.
+     */
+    /**
+     * Returns the current position in this <code>NodeIterator</code>.
+     * @return the current position in this <code>NodeIterator</code>.
+     */
+    /**
+     * Returns <code>true</code> if there is another <code>Node</code>
+     * available; <code>false</code> otherwise.
+     * @return <code>true</code> if there is another <code>Node</code>
+     *  available; <code>false</code> otherwise.
+     */
+    /**
+     * @throws UnsupportedOperationException always.
+     */
+    /**
+     * Returns the next <code>Node</code> in the result set.
+     * @return the next <code>Node</code> in the result set.
+     * @throws java.util.NoSuchElementException if iteration has no more
+     *   <code>Node</code>s.
+     */
+    NodeImpl nextNodeImpl() {
+        if (pos >= uuids.length) {
+            throw new NoSuchElementException();
+        }
+        try {
+            return (NodeImpl) itemMgr.getItem(new NodeId(uuids[pos++]));
+        } catch (RepositoryException e) {
+            log.error("Exception retrieving Node with UUID: "
+                    + uuids[pos] + ": " + e.toString());
+            throw new NoSuchElementException();
+        }
+    }
