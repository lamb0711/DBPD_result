JCR-2710: Add support for large number of users in a group 
work in progress

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@984740 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.security.principal.ItemBasedPrincipal;
-import org.apache.jackrabbit.api.security.principal.ItemBasedPrincipal;
-import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
-import org.apache.jackrabbit.core.security.SystemPrincipal;
+import org.apache.jackrabbit.core.security.SystemPrincipal;
+import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
+import javax.jcr.ItemNotFoundException;
-import javax.jcr.Value;
-import javax.jcr.ItemNotFoundException;
+import javax.jcr.Value;
+
+import java.io.UnsupportedEncodingException;
-import java.util.Set;
+import java.util.Set;
-import java.io.UnsupportedEncodingException;
- * 
+ *
+    /**
+     * If this parameter is present group memberships are collected in a node
+     * structure below {@link UserConstants#N_MEMBERS} instead of the default
+     * multi valued property {@link UserConstants#P_MEMBERS}. Its value determines
+     * the maximum number of member properties until additional intermediate nodes
+     * are inserted. Valid values are integers > 4.
+     */
+    public static final String PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE = "groupMembershipSplitSize";
+
+    /**
+     * Maximum number of properties on the group membership node structure under
+     * {@link UserConstants#N_MEMBERS} until additional intermediate nodes are inserted.
+     * If 0 (default), {@link UserConstants#P_MEMBERS} is used to record group
+     * memberships.
+     */
+    private final int groupMembershipSplitSize;
+
+     * <li>{@link #PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE}. The default is 0 which means use
+     * {@link UserConstants#P_MEMBERS}.</li>
+        param = (config != null) ? config.get(PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE) : null;
+        groupMembershipSplitSize = parseMembershipSplitSize(param);
+
-            membershipCache = new MembershipCache(session, groupsPath);
+            membershipCache = new MembershipCache(session, groupsPath, groupMembershipSplitSize > 0);
-         * 
+         *
-        isSystemUserManager = "org.apache.jackrabbit.core.SystemSession".equals(session.getClass().getName()) && 
+        isSystemUserManager = "org.apache.jackrabbit.core.SystemSession".equals(session.getClass().getName()) &&
-    
+
-            String name = principal.getName();           
+            String name = principal.getName();
-     * Non-existant elements of the Path will be created as nodes
+     * Non-existent elements of the Path will be created as nodes
+    /**
+     * Maximum number of properties on the group membership node structure under
+     * {@link UserConstants#N_MEMBERS} until additional intermediate nodes are inserted.
+     * If 0 (default), {@link UserConstants#P_MEMBERS} is used to record group
+     * memberships.
+     *
+     * @return
+     */
+    public int getGroupMembershipSplitSize() {
+        return groupMembershipSplitSize;
+    }
+
+    NodeImpl addProtectedNode(NodeImpl parent, Name name, Name ntName) throws RepositoryException {
+        NodeImpl n = addNode(parent, name, ntName);
+        if (isAutoSave()) {
+            parent.save();
+        }
+        return n;
+    }
+
-     * @return A group 
+     * @return A group
-            log.info("Resolved conflict and (re)created admin user with id \'" + adminId + "\' and default pw.");          
+            log.info("Resolved conflict and (re)created admin user with id \'" + adminId + "\' and default pw.");
-    
+
+    private static int parseMembershipSplitSize(Object param) {
+        int n = 0;
+        if (param != null) {
+            try {
+                n = Integer.parseInt(param.toString());
+                if (n < 4) {
+                    n = 0;
+                }
+            }
+            catch (NumberFormatException e) {
+                n = 0;
+            }
+            if (n == 0) {
+                log.warn("Invalid value {} for {}. Expected integer >= 4",
+                        param.toString(), PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE);
+            }
+        }
+
+        return n;
+    }
+
-        private NodeIterator authNodeIter;
+        private final NodeIterator authNodeIter;
-        
+
-            
+
-            
+
+
+
