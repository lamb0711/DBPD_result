JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.DavConstants;
-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
-import java.util.List;
-public class DavPropertyNameSet extends HashSet {
+public class DavPropertyNameSet extends PropContainer {
+    private final HashSet set = new HashSet();
-     * @see HashSet()
-        super();
-     * Create a new set from the given collection.
-     * @param c
-     * @see HashSet(Collection)
+     * Create a new <code>DavPropertyNameSet</code> with the given initial values.
+     *
+     * @param initialSet
-    public DavPropertyNameSet(Collection c) {
-        super(c);
+    public DavPropertyNameSet(DavPropertyNameSet initialSet) {
+        addAll(initialSet);
-        super();
-        if (propElement == null || !propElement.getName().equals(DavConstants.XML_PROP)) {
+        if (!DomUtil.matches(propElement, XML_PROP, NAMESPACE)) {
-        List props = propElement.getChildren();
-        for (int j = 0; j < props.size(); j++) {
-            Element prop = (Element) props.get(j);
-            String propName = prop.getName();
-            if (propName != null && !"".equals(propName)) {
-                add(DavPropertyName.create(propName, prop.getNamespace()));
-            }
+        ElementIterator it = DomUtil.getChildren(propElement);
+        while (it.hasNext()) {
+            add(DavPropertyName.createFromXml(it.nextElement()));
-        return super.add(propertyName);
+        return set.add(propertyName);
-     * Add the given object to this set. In case the object is not a {@link DavPropertyName}
-     * this method returns false.
+     * Add the property names contained in the specified set to this set.
-     * @param o
-     * @return true if adding the object was successful.
-     * @see #add(DavPropertyName)
+     * @param propertyNames
+     * @return true if the set has been modified by this call.
-    public boolean add(Object o) {
-        if (o instanceof DavPropertyName) {
-            return add((DavPropertyName) o);
-        } else {
+    public boolean addAll(DavPropertyNameSet propertyNames) {
+        return set.addAll(propertyNames.getContent());
+    }
+
+    /**
+     * Removes the specified {@link DavPropertyName} object from this set.
+     *
+     * @param propertyName
+     * @return true if the given property name could be removed.
+     * @see HashSet#remove(Object)
+     */
+    public boolean remove(DavPropertyName propertyName) {
+        return set.remove(propertyName);
+    }
+
+    /**
+     * @return Iterator over all <code>DavPropertyName</code>s contained in this
+     * set.
+     */
+    public DavPropertyNameIterator iterator() {
+        return new PropertyNameIterator();
+    }
+
+    //------------------------------------------------------< PropContainer >---
+    /**
+     * @see PropContainer#contains(DavPropertyName)
+     */
+    public boolean contains(DavPropertyName name) {
+        return set.contains(name);
+    }
+
+    /**
+     * @param contentEntry NOTE that an instance of <code>DavPropertyName</code>
+     * in order to successfully add the given entry.
+     * @return true if contentEntry is an instance of <code>DavPropertyName</code>
+     * that could be added to this set. False otherwise.
+     * @see PropContainer#addContent(Object)
+     */
+    public boolean addContent(Object contentEntry) {
+        if (contentEntry instanceof DavPropertyName) {
+            return add((DavPropertyName)contentEntry);
+        }
+
+    /**
+     * @see PropContainer#isEmpty()
+     */
+    public boolean isEmpty() {
+        return set.isEmpty();
-     * Returns the xml representation of this property name set with the
-     * following format:
-     * <pre>
-     * &lt;!ELEMENT prop (ANY) &gt;
-     * where ANY consists of a list of elements each reflecting the xml
-     * representation of an entry in this set.
-     * </pre>
-     *
-     * @return xml representation
+     * @see PropContainer#getContentSize()
-    public Element toXml() {
-        Element prop = new Element(DavConstants.XML_PROP, DavConstants.NAMESPACE);
-        Iterator it = super.iterator();
-        while (it.hasNext()) {
-            prop.addContent(((DavPropertyName)it.next()).toXml());
+    public int getContentSize() {
+        return set.size();
+    }
+
+    /**
+     * @see PropContainer#getContent()
+     */
+    public Collection getContent() {
+        return set;
+    }
+
+    //--------------------------------------------------------< inner class >---
+    private class PropertyNameIterator implements DavPropertyNameIterator {
+
+        private Iterator iter;
+
+        private PropertyNameIterator() {
+            this.iter = set.iterator();
-        return prop;
+
+        public DavPropertyName nextPropertyName() {
+            return (DavPropertyName)iter.next();
+        }
+
+        public void remove() {
+            iter.remove();
+        }
+
+        public boolean hasNext() {
+            return iter.hasNext();
+        }
+
+        public Object next() {
+            return iter.next();
+        }
