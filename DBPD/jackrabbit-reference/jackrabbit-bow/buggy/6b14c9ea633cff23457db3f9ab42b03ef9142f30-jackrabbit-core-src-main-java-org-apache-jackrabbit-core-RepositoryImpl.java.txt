JCR-1104 : JSR 283 support
JCR-1171 : Contribute Pluggable Permission and User Management to Jackrabbit

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@638834 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.config.LoginModuleConfig;
+import org.apache.jackrabbit.core.config.SecurityManagerConfig;
-import org.apache.jackrabbit.core.security.AuthContext;
+import org.apache.jackrabbit.core.security.JackrabbitSecurityManager;
+import org.apache.jackrabbit.core.security.authentication.AuthContext;
+import org.apache.jackrabbit.core.state.ISMLocking;
-import org.apache.jackrabbit.core.state.ISMLocking;
-import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
+import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
+import javax.jcr.AccessDeniedException;
+import javax.jcr.Credentials;
+import javax.jcr.LoginException;
+import javax.jcr.NamespaceRegistry;
+import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.observation.Event;
+import javax.jcr.observation.EventIterator;
+import javax.jcr.observation.EventListener;
+import javax.jcr.observation.ObservationManager;
+import javax.security.auth.Subject;
-import javax.jcr.AccessDeniedException;
-import javax.jcr.Credentials;
-import javax.jcr.LoginException;
-import javax.jcr.NamespaceRegistry;
-import javax.jcr.NoSuchWorkspaceException;
-import javax.jcr.RepositoryException;
-import javax.jcr.Session;
-import javax.jcr.observation.Event;
-import javax.jcr.observation.EventIterator;
-import javax.jcr.observation.EventListener;
-import javax.jcr.observation.ObservationManager;
-import javax.security.auth.Subject;
-
+     * Security manager
+     */
+    private JackrabbitSecurityManager securityMgr;
+
+    /**
+     * Returns the {@link org.apache.jackrabbit.core.security.JackrabbitSecurityManager SecurityManager}
+     * of this <code>Repository</code>
+     *
+     * @return the security manager
+     * @throws RepositoryException if an error occurs.
+     */
+    protected synchronized JackrabbitSecurityManager getSecurityManager()
+            throws RepositoryException {
+
+        if (securityMgr == null) {
+            SecurityManagerConfig smc = getConfig().getSecurityConfig().getSecurityManagerConfig();
+
+            String workspaceName = smc.getWorkspaceName();
+            if (workspaceName == null) {
+                workspaceName = getConfig().getDefaultWorkspaceName();
+            }
+            SystemSession securitySession = getSystemSession(workspaceName);
+            // mark system session as 'active' for that the system workspace does
+            // not get disposed by workspace-janitor
+            onSessionCreated(securitySession);
+
+            securityMgr = (JackrabbitSecurityManager) smc.newInstance();
+            securityMgr.init(this, securitySession);
+
+            log.info("SecurityManager = " + securityMgr.getClass());
+        }
+        return securityMgr;
+    }
+
+    /**
+        String secWspName = repConfig.getSecurityConfig().getSecurityManagerConfig().getWorkspaceName();
+            if(secWspName != null && !wspInfos.containsKey(secWspName)) {
+                createWorkspace(secWspName);
+                log.info("created system workspace: {}", secWspName);
+            }
-         * - the should be one 'System' workspace per repository
+         * - there should be one 'System' workspace per repository
+    /**
+     * Tries to add Principals to a given subject:
+     * First Access the Subject from the current AccessControlContext,
+     * If Subject is found the LoginContext is evoked for it, in order
+     * to possibly allow for extension of preauthenticated Subject.<br>
+     * In contrast to a login with Credentials, a Session is created, even if the
+     * Authentication failed.<br>
+     * If the {@link Subject} is marked to be unmodificable or if the
+     * authentication of the the Subject failed Session is build for unchanged
+     * Subject.
+     *
+     * @param workspaceName must not be null
+     * @return if a Subject is exsting null else
+     * @throws RepositoryException
+     * @throws AccessDeniedException
+     */
+    private Session extendAuthentication(String workspaceName)
+            throws RepositoryException, AccessDeniedException {
+
+        Subject subject = null;
+        try {
+            AccessControlContext acc = AccessController.getContext();
+            subject = Subject.getSubject(acc);
+        } catch (SecurityException e) {
+            log.warn("Can't check for preauthentication. Reason:", e.getMessage());
+        }
+        if (subject == null) {
+            log.debug("No preauthenticated subject found -> return null.");
+            return null;
+        }
+
+        Session s;
+        if (subject.isReadOnly()) {
+            log.debug("Preauthenticated Subject is read-only -> create Session");
+            s = createSession(subject, workspaceName);
+        } else {
+            log.debug("Found preauthenticated Subject, try to extend authentication");
+            // login either using JAAS or custom LoginModule
+            AuthContext authCtx = getSecurityManager().getAuthContext(null, subject);
+            try {
+                authCtx.login();
+                s = createSession(authCtx, workspaceName);
+            } catch (javax.security.auth.login.LoginException e) {
+                // subject could not be extended
+                log.debug("Preauthentication could not be extended");
+                s = createSession(subject, workspaceName);
+            }
+        }
+        return s;
+    }
+
+        if (securityMgr != null) {
+            securityMgr.close();
+        }
+
-                // null credentials, obtain the identity of the already-authenticated
+                // try to obtain the identity of the already authenticated
-                AccessControlContext acc = AccessController.getContext();
-                Subject subject = Subject.getSubject(acc);
-                if (subject != null) {
-                    return createSession(subject, workspaceName);
+                Session session = extendAuthentication(workspaceName);
+                if (session != null) {
+                    // sucessful extended authentication
+                    return session;
+                } else {
+                    log.debug("Attempt to login without Credentials and Subject -> try login with null credentials.");
-            // login either using JAAS or our own LoginModule
-            AuthContext authCtx;
-            LoginModuleConfig lmc = repConfig.getLoginModuleConfig();
-            if (lmc == null) {
-                authCtx = new AuthContext.JAAS(repConfig.getAppName(), credentials);
-            } else {
-                authCtx = new AuthContext.Local(
-                        lmc.getLoginModule(), lmc.getParameters(), credentials);
-            }
+            // not preauthenticated -> try login with credentials
+            AuthContext authCtx = getSecurityManager().getAuthContext(credentials, new Subject());
-
+
-            throw new LoginException(
-                    "Unable to access authentication information", se);
+            throw new LoginException("Unable to access authentication information", se);
+            // deregister
+            if (securityMgr != null) {
+                securityMgr.dispose(getName());
+            }
+
+
