- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.17 $, $Date: 2004/08/25 16:44:53 $
-	return rootPath;
+        return rootPath;
-	rootPath = osPath(path);
+        rootPath = osPath(path);
-	if (File.separator.equals(SEPARATOR)) {
-	    return genericPath;
-	}
-	return genericPath.replace(SEPARATOR_CHAR, File.separatorChar);
+        if (File.separator.equals(SEPARATOR)) {
+            return genericPath;
+        }
+        return genericPath.replace(SEPARATOR_CHAR, File.separatorChar);
-	if (this == obj) {
-	    return true;
-	}
-	if (obj instanceof LocalFileSystem) {
-	    LocalFileSystem other = (LocalFileSystem) obj;
-	    return (root == null ? other.root == null : root.equals(other.root))
-		    && (rootPath == null ? other.rootPath == null : rootPath.equals(other.rootPath));
-	}
-	return false;
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof LocalFileSystem) {
+            LocalFileSystem other = (LocalFileSystem) obj;
+            return (root == null ? other.root == null : root.equals(other.root))
+                    && (rootPath == null ? other.rootPath == null : rootPath.equals(other.rootPath));
+        }
+        return false;
-	if (rootPath == null) {
-	    String msg = "path not set";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	root = new File(rootPath);
+        if (rootPath == null) {
+            String msg = "path not set";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        root = new File(rootPath);
-	if (root.exists()) {
-	    if (!root.isDirectory()) {
-		String msg = "path does not denote a folder";
-		log.error(msg);
-		throw new FileSystemException(msg);
-	    }
-	} else {
-	    if (!root.mkdirs()) {
-		String msg = "failed to create root";
-		log.error(msg);
-		throw new FileSystemException(msg);
-	    }
-	}
+        if (root.exists()) {
+            if (!root.isDirectory()) {
+                String msg = "path does not denote a folder";
+                log.error(msg);
+                throw new FileSystemException(msg);
+            }
+        } else {
+            if (!root.mkdirs()) {
+                String msg = "failed to create root";
+                log.error(msg);
+                throw new FileSystemException(msg);
+            }
+        }
-	root = null;
+        root = null;
-	File src = new File(root, osPath(srcPath));
-	File dest = new File(root, osPath(destPath));
-	try {
-	    FileUtil.copy(src, dest);
-	} catch (IOException ioe) {
-	    String msg = "copying " + src.getPath() + " to " + dest.getPath() + " failed";
-	    log.error(msg, ioe);
-	    throw new FileSystemException(msg, ioe);
-	}
+        File src = new File(root, osPath(srcPath));
+        File dest = new File(root, osPath(destPath));
+        try {
+            FileUtil.copy(src, dest);
+        } catch (IOException ioe) {
+            String msg = "copying " + src.getPath() + " to " + dest.getPath() + " failed";
+            log.error(msg, ioe);
+            throw new FileSystemException(msg, ioe);
+        }
-	File f = new File(root, osPath(folderPath));
-	if (f.exists()) {
-	    String msg = f.getPath() + " already exists";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	if (!f.mkdirs()) {
-	    String msg = "failed to create folder " + f.getPath();
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
+        File f = new File(root, osPath(folderPath));
+        if (f.exists()) {
+            String msg = f.getPath() + " already exists";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        if (!f.mkdirs()) {
+            String msg = "failed to create folder " + f.getPath();
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
-	File f = new File(root, osPath(filePath));
-	if (!f.isFile()) {
-	    String msg = f.getPath() + " does not denote an existing file";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	try {
-	    FileUtil.delete(f);
-	} catch (IOException ioe) {
-	    String msg = "failed to delete " + f.getPath();
-	    log.error(msg, ioe);
-	    throw new FileSystemException(msg, ioe);
-	}
+        File f = new File(root, osPath(filePath));
+        if (!f.isFile()) {
+            String msg = f.getPath() + " does not denote an existing file";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        try {
+            FileUtil.delete(f);
+        } catch (IOException ioe) {
+            String msg = "failed to delete " + f.getPath();
+            log.error(msg, ioe);
+            throw new FileSystemException(msg, ioe);
+        }
-	File f = new File(root, osPath(folderPath));
-	if (!f.isDirectory()) {
-	    String msg = f.getPath() + " does not denote an existing folder";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	try {
-	    FileUtil.delete(f);
-	} catch (IOException ioe) {
-	    String msg = "failed to delete " + f.getPath();
-	    log.error(msg, ioe);
-	    throw new FileSystemException(msg, ioe);
-	}
+        File f = new File(root, osPath(folderPath));
+        if (!f.isDirectory()) {
+            String msg = f.getPath() + " does not denote an existing folder";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        try {
+            FileUtil.delete(f);
+        } catch (IOException ioe) {
+            String msg = "failed to delete " + f.getPath();
+            log.error(msg, ioe);
+            throw new FileSystemException(msg, ioe);
+        }
-	File f = new File(root, osPath(path));
-	return f.exists();
+        File f = new File(root, osPath(path));
+        return f.exists();
-	File f = new File(root, osPath(filePath));
-	try {
-	    return new FileInputStream(f);
-	} catch (FileNotFoundException fnfe) {
-	    String msg = f.getPath() + " does not denote an existing file";
-	    log.error(msg, fnfe);
-	    throw new FileSystemException(msg, fnfe);
-	}
+        File f = new File(root, osPath(filePath));
+        try {
+            return new FileInputStream(f);
+        } catch (FileNotFoundException fnfe) {
+            String msg = f.getPath() + " does not denote an existing file";
+            log.error(msg, fnfe);
+            throw new FileSystemException(msg, fnfe);
+        }
-	File f = new File(root, osPath(filePath));
-	try {
-	    return new FileOutputStream(f);
-	} catch (FileNotFoundException fnfe) {
-	    String msg = "failed to get output stream for " + f.getPath();
-	    log.error(msg, fnfe);
-	    throw new FileSystemException(msg, fnfe);
-	}
+        File f = new File(root, osPath(filePath));
+        try {
+            return new FileOutputStream(f);
+        } catch (FileNotFoundException fnfe) {
+            String msg = "failed to get output stream for " + f.getPath();
+            log.error(msg, fnfe);
+            throw new FileSystemException(msg, fnfe);
+        }
-	File f = new File(root, osPath(path));
-	if (!f.exists()) {
-	    String msg = f.getPath() + " does not exist";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	if (f.isFile()) {
-	    return false;
-	}
-	return (f.list().length > 0);
+        File f = new File(root, osPath(path));
+        if (!f.exists()) {
+            String msg = f.getPath() + " does not exist";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        if (f.isFile()) {
+            return false;
+        }
+        return (f.list().length > 0);
-	File f = new File(root, osPath(path));
-	return f.isFile();
+        File f = new File(root, osPath(path));
+        return f.isFile();
-	File f = new File(root, osPath(path));
-	return f.isDirectory();
+        File f = new File(root, osPath(path));
+        return f.isDirectory();
-	File f = new File(root, osPath(path));
-	return f.lastModified();
+        File f = new File(root, osPath(path));
+        return f.lastModified();
-	File f = new File(root, osPath(filePath));
-	if (!f.exists()) {
-	    return -1;
-	}
-	return f.length();
+        File f = new File(root, osPath(filePath));
+        if (!f.exists()) {
+            return -1;
+        }
+        return f.length();
-	File f = new File(root, osPath(filePath));
-	f.setLastModified(System.currentTimeMillis());
+        File f = new File(root, osPath(filePath));
+        f.setLastModified(System.currentTimeMillis());
-	File f = new File(root, osPath(folderPath));
-	String[] entries = f.list();
-	if (entries == null) {
-	    String msg = folderPath + " does not denote a folder";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	return entries;
+        File f = new File(root, osPath(folderPath));
+        String[] entries = f.list();
+        if (entries == null) {
+            String msg = folderPath + " does not denote a folder";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        return entries;
-	File folder = new File(root, osPath(folderPath));
-	File[] files = folder.listFiles(new FileFilter() {
-	    public boolean accept(File f) {
-		return f.isFile();
-	    }
-	});
-	if (files == null) {
-	    String msg = folderPath + " does not denote a folder";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	String[] entries = new String[files.length];
-	for (int i = 0; i < files.length; i++) {
-	    entries[i] = files[i].getName();
-	}
-	return entries;
+        File folder = new File(root, osPath(folderPath));
+        File[] files = folder.listFiles(new FileFilter() {
+            public boolean accept(File f) {
+                return f.isFile();
+            }
+        });
+        if (files == null) {
+            String msg = folderPath + " does not denote a folder";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        String[] entries = new String[files.length];
+        for (int i = 0; i < files.length; i++) {
+            entries[i] = files[i].getName();
+        }
+        return entries;
-	File file = new File(root, osPath(folderPath));
-	File[] folders = file.listFiles(new FileFilter() {
-	    public boolean accept(File f) {
-		return f.isDirectory();
-	    }
-	});
-	if (folders == null) {
-	    String msg = folderPath + " does not denote a folder";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
-	String[] entries = new String[folders.length];
-	for (int i = 0; i < folders.length; i++) {
-	    entries[i] = folders[i].getName();
-	}
-	return entries;
+        File file = new File(root, osPath(folderPath));
+        File[] folders = file.listFiles(new FileFilter() {
+            public boolean accept(File f) {
+                return f.isDirectory();
+            }
+        });
+        if (folders == null) {
+            String msg = folderPath + " does not denote a folder";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
+        String[] entries = new String[folders.length];
+        for (int i = 0; i < folders.length; i++) {
+            entries[i] = folders[i].getName();
+        }
+        return entries;
-	File src = new File(root, osPath(srcPath));
-	File dest = new File(root, osPath(destPath));
+        File src = new File(root, osPath(srcPath));
+        File dest = new File(root, osPath(destPath));
-	if (dest.exists()) {
-	    // we need to move the existing file/folder out of the way first
-	    try {
-		FileUtil.delete(dest);
-	    } catch (IOException ioe) {
-		String msg = "moving " + src.getPath() + " to " + dest.getPath() + " failed";
-		log.error(msg, ioe);
-		throw new FileSystemException(msg, ioe);
-	    }
-	}
-	File destParent = dest.getParentFile();
-	if (!destParent.exists()) {
-	    // create destination parent folder first
-	    if (!destParent.mkdirs()) {
-		String msg = "moving " + src.getPath() + " to " + dest.getPath() + " failed";
-		log.error(msg);
-		throw new FileSystemException(msg);
-	    }
-	}
+        if (dest.exists()) {
+            // we need to move the existing file/folder out of the way first
+            try {
+                FileUtil.delete(dest);
+            } catch (IOException ioe) {
+                String msg = "moving " + src.getPath() + " to " + dest.getPath() + " failed";
+                log.error(msg, ioe);
+                throw new FileSystemException(msg, ioe);
+            }
+        }
+        File destParent = dest.getParentFile();
+        if (!destParent.exists()) {
+            // create destination parent folder first
+            if (!destParent.mkdirs()) {
+                String msg = "moving " + src.getPath() + " to " + dest.getPath() + " failed";
+                log.error(msg);
+                throw new FileSystemException(msg);
+            }
+        }
-	// now we're ready to move/rename the file/folder
-	if (!src.renameTo(dest)) {
-	    String msg = "moving " + src.getPath() + " to " + dest.getPath() + " failed";
-	    log.error(msg);
-	    throw new FileSystemException(msg);
-	}
+        // now we're ready to move/rename the file/folder
+        if (!src.renameTo(dest)) {
+            String msg = "moving " + src.getPath() + " to " + dest.getPath() + " failed";
+            log.error(msg);
+            throw new FileSystemException(msg);
+        }
