fixed creation of workspaces through api

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@124504 13f79535-47bb-0310-9956-ffa450edef68

-        /**
-         * todo implement 'System' workspace
-         * - the system workspace should have the /jcr:system node
-         * - versions, version history and node types should be reflected in
-         *   this system workspace as content under /jcr:system
-         * - all other workspaces should be dynamic workspaces based on
-         *   this 'read-only' system workspace
-         */
-
-        // check system root node of system workspace
-        // (for now, we just create a system root node in all workspaces)
-        Iterator wspNames = wspInfos.keySet().iterator();
-        while (wspNames.hasNext()) {
-            String wspName = (String) wspNames.next();
-            NodeImpl rootNode = (NodeImpl) getSystemSession(wspName).getRootNode();
-            if (!rootNode.hasNode(SYSTEM_ROOT_NAME)) {
-                rootNode.addNode(SYSTEM_ROOT_NAME, NodeTypeRegistry.REP_SYSTEM);
-                rootNode.save();
-            }
+        // initialize workspaces
+        iter = wspInfos.keySet().iterator();
+        while (iter.hasNext()) {
+            String wspName = (String) iter.next();
+            initWorkspace(wspName);
-        // get the system session for every defined workspace and
-        // register as an event listener
-        iter = wspInfos.values().iterator();
-        while (iter.hasNext()) {
-            String wspName = ((WorkspaceInfo) iter.next()).getName();
-            Session s = getSystemSession(wspName);
-            s.getWorkspace().getObservationManager().addEventListener(this,
-                    Event.NODE_ADDED | Event.NODE_REMOVED
-                    | Event.PROPERTY_ADDED | Event.PROPERTY_REMOVED,
-                    "/", true, null, null, false);
-
-            // register SearchManager as EventListener
-            SearchManager searchMgr = getSearchManager(wspName);
-
-            if (searchMgr != null) {
-                s.getWorkspace().getObservationManager().addEventListener(searchMgr,
-                        Event.NODE_ADDED | Event.NODE_REMOVED |
-                        Event.PROPERTY_ADDED | Event.PROPERTY_REMOVED |
-                        Event.PROPERTY_CHANGED,
-                        "/", true, null, null, false);
-            }
-        }
-
+    private void initWorkspace(String wspName) throws RepositoryException {
+        // get system session and Workspace instance
+        SessionImpl sysSession = getSystemSession(wspName);
+        WorkspaceImpl wsp = (WorkspaceImpl) sysSession.getWorkspace();
+
+        /**
+         * todo implement 'System' workspace
+         * FIXME
+         * - the should be one 'System' workspace per repositoy
+         * - the 'System' workspace should have the /jcr:system node
+         * - versions, version history and node types should be reflected in
+         *   this system workspace as content under /jcr:system
+         * - all other workspaces should be dynamic workspaces based on
+         *   this 'read-only' system workspace
+         *
+         * for now, we just create a /jcr:system node in every workspace
+         */
+        NodeImpl rootNode = (NodeImpl) sysSession.getRootNode();
+        if (!rootNode.hasNode(SYSTEM_ROOT_NAME)) {
+            rootNode.addNode(SYSTEM_ROOT_NAME, NodeTypeRegistry.REP_SYSTEM);
+            rootNode.save();
+        }
+
+        // register the repository as event listener for keeping repository statistics
+        wsp.getObservationManager().addEventListener(this,
+                Event.NODE_ADDED | Event.NODE_REMOVED
+                | Event.PROPERTY_ADDED | Event.PROPERTY_REMOVED,
+                "/", true, null, null, false);
+
+        // register SearchManager as event listener
+        SearchManager searchMgr = getSearchManager(wspName);
+        if (searchMgr != null) {
+            wsp.getObservationManager().addEventListener(searchMgr,
+                    Event.NODE_ADDED | Event.NODE_REMOVED |
+                    Event.PROPERTY_ADDED | Event.PROPERTY_REMOVED |
+                    Event.PROPERTY_CHANGED,
+                    "/", true, null, null, false);
+        }
+    }
+
+     * @see SessionImpl#getWorkspaceNames
-    protected String[] getWorkspaceNames() {
+    String[] getWorkspaceNames() {
+     * @see SessionImpl#createWorkspace(String)
-    public void createWorkspace(String workspaceName) throws RepositoryException {
+     synchronized void createWorkspace(String workspaceName) throws RepositoryException {
+
+        // setup/initialize new workspace
+        initWorkspace(workspaceName);
