JCR-2715: Improved join query performance

First working join evaluation. Work in progress...

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1023728 13f79535-47bb-0310-9956-ffa450edef68

+import static javax.jcr.PropertyType.NAME;
+import java.util.HashMap;
-import javax.jcr.PropertyType;
+import javax.jcr.query.qom.QueryObjectModelConstants;
+    public QueryEngine(Session session) throws RepositoryException {
+        this(session, new HashMap<String, Value>());
+    }
+
-        Set<String> leftSelectors = getSelectorNames(left).keySet();
+        Map<String, NodeType> leftSelectors = getSelectorNames(left);
-        Set<String> rightSelectors = getSelectorNames(right).keySet();
+        Map<String, NodeType> rightSelectors = getSelectorNames(right);
+
+        Constraint leftConstraint =
+            mapConstraintToSelectors(constraint, leftSelectors.keySet());
+        System.out.println("FROM " + left + " WHERE " + leftConstraint);
+        QueryResult leftResult = execute(null, left, leftConstraint, null);
-        QueryResult leftResult =
-            execute(null, left, mapConstraintToSelectors(constraint, leftSelectors), null);
+            System.out.println(row);
-        QueryResult rightResult =
-            execute(null, right, mapConstraintToSelectors(constraint, rightSelectors), null);
+        Constraint joinConstraint = getJoinConstraint(
+                join.getJoinCondition(), leftSelectors.keySet(), leftRows);
+        Constraint rightConstraint = Constraints.and(
+                qomFactory, joinConstraint,
+                mapConstraintToSelectors(constraint, rightSelectors.keySet()));
+        System.out.println("FROM " + right + " WHERE " + rightConstraint);
+        QueryResult rightResult = execute(null, right, rightConstraint, null);
-        return null;
+        List<Row> rightRows = new ArrayList<Row>();
+        for (Row row : JcrUtils.getRows(rightResult)) {
+            System.out.println(row);
+            rightRows.add(row);
+        }
+
+        Map<String, NodeType> selectors = new LinkedHashMap<String, NodeType>();
+        selectors.putAll(leftSelectors);
+        selectors.putAll(rightSelectors);
+        String[] selectorNames =
+            selectors.keySet().toArray(new String[selectors.size()]);
+
+        Map<String, PropertyValue> columnMap = getColumnMap(columns, selectors);
+        String[] columnNames =
+            columnMap.keySet().toArray(new String[columnMap.size()]);
+        PropertyValue[] operands =
+            columnMap.values().toArray(new PropertyValue[columnMap.size()]);
+
+        double[] scores = new double[selectorNames.length];
+        for (int i = 0; i < scores.length; i++) {
+            scores[i] = 1.0;
+        }
+
+        Predicate predicate = Predicates.and(
+                getPredicate(join.getJoinCondition()),
+                getPredicate(constraint));
+
+        List<Row> joinRows = new ArrayList<Row>();
+        for (Row leftRow : leftRows) {
+            for (Row rightRow : rightRows) {
+                Node[] nodes = new Node[selectorNames.length];
+                for (int i = 0; i < selectorNames.length; i++) {
+                    String selector = selectorNames[i];
+                    if (leftSelectors.containsKey(selector)) {
+                        nodes[i] = leftRow.getNode(selector);
+                    } else {
+                        nodes[i] = rightRow.getNode(selector);
+                    }
+                }
+                Value[] values = new Value[operands.length];
+                Row row = new SimpleRow(
+                        columnNames, values, selectorNames, nodes, scores);
+                for (int i = 0; i < operands.length; i++) {
+                    values[i] = combine(getPropertyValues(operands[i], row));
+                }
+                if (predicate.evaluate(row)) {
+                    joinRows.add(row);
+                }
+            }
+        }
+
+        return new SimpleQueryResult(
+                columnNames, selectorNames, new RowIteratorAdapter(joinRows));
-    protected Constraint narrow(
-            Constraint constraint, Set<String> selectors,
-            JoinCondition condition, List<Row> rows)
+    private Predicate getPredicate(JoinCondition condition)
-        Constraint joinConstraint = Constraints.TRUE;
-            joinConstraint = getJoinConstraint(
+            return getEquiJoinPredicate((EquiJoinCondition) condition);
+        } else if (condition instanceof SameNodeJoinCondition) {
+            return Predicate.TRUE; // FIXME
+        } else if (condition instanceof ChildNodeJoinCondition) {
+            return Predicate.TRUE; // FIXME
+        } else if (condition instanceof DescendantNodeJoinCondition) {
+            return Predicate.TRUE; // FIXME
+        } else {
+            return Predicate.TRUE; // FIXME
+        }
+    }
+
+    private Predicate getEquiJoinPredicate(final EquiJoinCondition condition)
+            throws RepositoryException {
+        final Operand operand1 = qomFactory.propertyValue(
+                condition.getSelector1Name(),
+                condition.getProperty1Name());
+        final Operand operand2 = qomFactory.propertyValue(
+                condition.getSelector2Name(),
+                condition.getProperty2Name());
+        return new RowPredicate() {
+            @Override
+            protected boolean evaluate(Row row) throws RepositoryException {
+                return new ValueComparator().evaluate(
+                        QueryObjectModelConstants.JCR_OPERATOR_EQUAL_TO,
+                        getValues(operand1, row), getValues(operand2, row));
+            }
+        };
+    }
+
+    protected Constraint getJoinConstraint(
+            JoinCondition condition, Set<String> selectors, List<Row> rows)
+            throws RepositoryException {
+        if (condition instanceof EquiJoinCondition) {
+            return getJoinConstraint(
-            joinConstraint = getJoinConstraint(
+            return getJoinConstraint(
-            joinConstraint = getJoinConstraint(
+            return getJoinConstraint(
-            joinConstraint = getJoinConstraint(
+            return getJoinConstraint(
+        } else {
+            return Constraints.TRUE;
-        return Constraints.and(
-                qomFactory, joinConstraint, mapConstraintToSelectors(constraint, selectors));
-            values.add(getValue(left, row));
+            for (Value value : getPropertyValues(left, row)) {
+                values.add(value);
+            }
-                        values[i] =
-                            getValue(columnMap.get(columnNames[i]), row);
+                        values[i] = combine(getPropertyValues(
+                                columnMap.get(columnNames[i]), row));
+    private Value combine(Value[] values) throws RepositoryException {
+        if (values.length == 1) {
+            return values[0];
+        } else {
+            StringBuilder builder = new StringBuilder();
+            for (int i = 0; i < values.length; i++) {
+                if (i > 0) {
+                    builder.append('\n');
+                }
+                builder.append(values[i].getString());
+            }
+            return valueFactory.createValue(builder.toString());
+        }
+    }
+
-            String name = selector.getSelectorName();
-            return Collections.singletonMap(name, ntManager.getNodeType(name));
+            return Collections.singletonMap(
+                    selector.getSelectorName(),
+                    ntManager.getNodeType(selector.getNodeTypeName()));
+                        ValueComparator comparator = new ValueComparator();
-                            Value va = getValue(operand, a);
-                            Value vb = getValue(operand, b);
-                            int order = new ValueComparator().compare(va, vb);
-                            if (JCR_ORDER_DESCENDING.equals(ordering.getOrder())) {
-                                order = -order;
-                            }
-                            if (order != 0) {
-                                return order;
+                            Value[] va = getValues(operand, a);
+                            Value[] vb = getValues(operand, b);
+                            if (va.length == 1 && vb.length == 1) {
+                                int order = comparator.compare(va[0], vb[0]);
+                                if (JCR_ORDER_DESCENDING.equals(ordering.getOrder())) {
+                                    order = -order;
+                                }
+                                if (order != 0) {
+                                    return order;
+                                }
-                            getValue(c.getOperand1(), row),
-                            getValue(c.getOperand2(), row));
+                            getValues(c.getOperand1(), row),
+                            getValues(c.getOperand2(), row));
-    public Value getValue(Operand operand, Row row)
+    public Value[] getValues(Operand operand, Row row)
-            return getValue((BindVariableValue) operand, row);
+            return getBindVariableValues((BindVariableValue) operand);
-            return getValue((FullTextSearchScore) operand, row);
+            return getFullTextSearchScoreValues(
+                    (FullTextSearchScore) operand, row);
-            return getValue((Length) operand, row);
+            return getLengthValues((Length) operand, row);
-            return getValue((Literal) operand, row);
+            return getLiteralValues((Literal) operand);
-            return getValue((LowerCase) operand, row);
+            return getLowerCaseValues((LowerCase) operand, row);
-            return getValue((NodeLocalName) operand, row);
+            return getNodeLocalNameValues((NodeLocalName) operand, row);
-            return getValue((NodeName) operand, row);
+            return getNodeNameValues((NodeName) operand, row);
-            return getValue((PropertyValue) operand, row);
+            return getPropertyValues((PropertyValue) operand, row);
-            return getValue((UpperCase) operand, row);
+            return getUpperCaseValues((UpperCase) operand, row);
-     * Subclasses can override this method to customise the evaluation.
-     * @param row row
-     * @throws RepositoryException if the operand can't be evaluated
-    protected Value getValue(BindVariableValue operand, Row row)
-            throws RepositoryException {
-        String name = operand.getBindVariableName();
-        Value value = variables.get(name);
+    private Value[] getBindVariableValues(BindVariableValue operand) {
+        Value value = variables.get(operand.getBindVariableName());
-            return value;
+            return new Value[] { value };
-            throw new RepositoryException("Unknown bind variable: $" + name);
+            return new Value[0];
-     * Subclasses can override this method to customise the evaluation.
-    protected Value getValue(FullTextSearchScore operand, Row row)
-            throws RepositoryException {
-        return valueFactory.createValue(row.getScore(operand.getSelectorName()));
+    private Value[] getFullTextSearchScoreValues(
+            FullTextSearchScore operand, Row row) throws RepositoryException {
+        double score = row.getScore(operand.getSelectorName());
+        return new Value[] { valueFactory.createValue(score) };
-     * Returns the value of the given value length operand at the given row.
-     * Subclasses can override this method to customise the evaluation.
+     * Returns the values of the given value length operand at the given row.
-     * @return value of the operand at the given row
+     * @return values of the operand at the given row
-    protected Value getValue(Length operand, Row row)
+    private Value[] getLengthValues(Length operand, Row row)
-        return valueFactory.createValue(property.getLength());
+        if (property == null) {
+            return new Value[0];
+        } else if (property.isMultiple()) {
+            long[] lengths = property.getLengths();
+            Value[] values = new Value[lengths.length];
+            for (int i = 0; i < lengths.length; i++) {
+                values[i] = valueFactory.createValue(lengths[i]);
+            }
+            return values;
+        } else {
+            long length = property.getLength();
+            return new Value[] { valueFactory.createValue(length) };
+        }
-     * Returns the value of the given literal value operand at the given row.
-     * Subclasses can override this method to customise the evaluation.
+     * Returns the value of the given literal value operand.
-     * @param row row
-     * @return value of the operand at the given row
-     * @throws RepositoryException if the operand can't be evaluated
+     * @return value of the operand
-    protected Value getValue(Literal operand, Row row) {
-        return operand.getLiteralValue();
+    protected Value[] getLiteralValues(Literal operand) {
+        return new Value[] { operand.getLiteralValue() };
-     * Returns the value of the given lower case operand at the given row.
-     * Subclasses can override this method to customise the evaluation.
+     * Returns the values of the given lower case operand at the given row.
-     * @return value of the operand at the given row
+     * @return values of the operand at the given row
-    protected Value getValue(LowerCase operand, Row row)
+    private Value[] getLowerCaseValues(LowerCase operand, Row row)
-        Value value = getValue(operand.getOperand(), row);
-        return valueFactory.createValue(value.getString().toLowerCase(ENGLISH));
+        Value[] values = getValues(operand.getOperand(), row);
+        for (int i = 0; i < values.length; i++) {
+            String value = values[i].getString();
+            String lower = value.toLowerCase(ENGLISH);
+            if (!value.equals(lower)) {
+                values[i] = valueFactory.createValue(lower);
+            }
+        }
+        return values;
-     * Subclasses can override this method to customise the evaluation.
-    protected Value getValue(NodeLocalName operand, Row row)
+    private Value[] getNodeLocalNameValues(NodeLocalName operand, Row row)
-        return valueFactory.createValue(name, PropertyType.NAME);
+        return new Value[] { valueFactory.createValue(name, NAME) };
-     * Subclasses can override this method to customise the evaluation.
-    protected Value getValue(NodeName operand, Row row)
+    private Value[] getNodeNameValues(NodeName operand, Row row)
-        return valueFactory.createValue(node.getName(), PropertyType.NAME);
+        return new Value[] { valueFactory.createValue(node.getName(), NAME) };
-     * Returns the value of the given property value operand at the given row.
-     * Subclasses can override this method to customise the evaluation.
+     * Returns the values of the given property value operand at the given row.
-     * @return value of the operand at the given row
+     * @return values of the operand at the given row
-    protected Value getValue(PropertyValue operand, Row row)
+    private Value[] getPropertyValues(PropertyValue operand, Row row)
-        return getProperty(operand, row).getValue();
+        Property property = getProperty(operand, row);
+        if (property == null) {
+            return new Value[0];
+        } else if (property.isMultiple()) {
+            return property.getValues();
+        } else {
+            return new Value[] { property.getValue() };
+        }
-     * Returns the value of the given upper case operand at the given row.
-     * Subclasses can override this method to customise the evaluation.
+     * Returns the values of the given upper case operand at the given row.
-     * @return value of the operand at the given row
+     * @return values of the operand at the given row
-    protected Value getValue(UpperCase operand, Row row)
+    private Value[] getUpperCaseValues(UpperCase operand, Row row)
-        Value value = getValue(operand.getOperand(), row);
-        return valueFactory.createValue(value.getString().toUpperCase(ENGLISH));
+        Value[] values = getValues(operand.getOperand(), row);
+        for (int i = 0; i < values.length; i++) {
+            String value = values[i].getString();
+            String upper = value.toLowerCase(ENGLISH);
+            if (!value.equals(upper)) {
+                values[i] = valueFactory.createValue(upper);
+            }
+        }
+        return values;
-     * @return the identified property
+     * @return the identified property, or <code>null</code>
-        String selector = operand.getSelectorName();
-        String property = operand.getPropertyName();
-        return row.getNode(selector).getProperty(property);
+        try {
+            String selector = operand.getSelectorName();
+            String property = operand.getPropertyName();
+            return row.getNode(selector).getProperty(property);
+        } catch (PathNotFoundException e) {
+            return null;
+        }
