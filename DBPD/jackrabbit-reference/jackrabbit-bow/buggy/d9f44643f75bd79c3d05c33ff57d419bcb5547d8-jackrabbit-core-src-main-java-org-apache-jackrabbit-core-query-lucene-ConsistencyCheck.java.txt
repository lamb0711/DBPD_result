JCR-3516 also report and fix wrong parent relation in the index

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1444501 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.persistence.check.ConsistencyChecker;
+import org.apache.jackrabbit.core.state.ItemState;
-                String parentUUIDString = d.get(FieldNames.PARENT);
-                NodeId parentId = null;
-                if (parentUUIDString.length() > 0) {
-                    parentId = new NodeId(parentUUIDString);
-                }
-
-                boolean parentExists = parentId != null && nodeIds.containsKey(parentId);
-                boolean parentIndexed = parentExists && nodeIds.get(parentId);
-                if (parentId == null || parentIndexed) {
+                String parent = d.get(FieldNames.PARENT);
+                NodeId parentId;
+                if (parent != null && !parent.isEmpty()) {
+                    parentId = new NodeId(parent);
+                } else {
-                // parent is missing
+                boolean parentExists = nodeIds.containsKey(parentId);
+                boolean parentIndexed = parentExists && nodeIds.get(parentId);
+                if (parentIndexed) {
+                    continue;
+                }
+
+                // parent is missing from index
-                    errors.add(new UnknownParent(id, parentId));
+                    try {
+                        final ItemState itemState = stateMgr.getItemState(id);
+                        if (parentId.equals(itemState.getParentId())) {
+                            // orphaned node
+                            errors.add(new UnknownParent(id, parentId));
+                        } else {
+                            errors.add(new WrongParent(id, parentId, itemState.getParentId()));
+                        }
+                    } catch (ItemStateException ignored) {
+                    }
-                    log.info("Reparing missing node " + getPath(n) + " (" + ancestorId + ")");
+                    log.info("Repairing missing node " + getPath(n) + " (" + ancestorId + ")");
-     * The parent of a node is not available through the ItemStateManager.
+     * The parent of a node is not in the repository
+     * The parent as indexed does not correspond with the actual parent in the repository
+     */
+    private class WrongParent extends ConsistencyCheckError {
+
+        private WrongParent(NodeId id, NodeId indexedParentId, NodeId actualParentId) {
+            super("Node " + id + " has wrong parent: " + indexedParentId + ", should be : " + actualParentId, id);
+        }
+
+        @Override
+        public boolean repairable() {
+            return true;
+        }
+
+        /**
+         * Reindex node.
+         */
+        @Override
+        void repair() throws IOException {
+            index.removeAllDocuments(id);
+            try {
+                NodeState node = (NodeState) stateMgr.getItemState(id);
+                log.info("Re-indexing node with wrong parent in index: " + getPath(node));
+                Document d = index.createDocument(node);
+                index.addDocument(d);
+                nodeIds.put(node.getNodeId(), Boolean.TRUE);
+            } catch (NoSuchItemStateException e) {
+                log.info("Not re-indexing node with wrong parent because node no longer exists");
+            } catch (ItemStateException e) {
+                throw new IOException(e.toString());
+            } catch (RepositoryException e) {
+                throw new IOException(e.toString());
+            }
+        }
+
+    }
+
+    /**
+            } catch (NoSuchItemStateException e) {
+                log.info("Not re-indexing node with multiple occurrences because node no longer exists");
+                log.info("Adding missing node to index: " + getPath(nodeState));
+            } catch (NoSuchItemStateException e) {
+                log.info("Not adding missing node because node no longer exists");
