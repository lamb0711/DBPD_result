JCR-444 Error while restoring OPV=Version childnodes (Restore of root version not allowed)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@410311 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.version.GenericVersionSelector;
+import org.apache.jackrabbit.core.version.LabelVersionSelector;
+import org.apache.jackrabbit.core.version.DateVersionSelector;
+import javax.jcr.version.VersionIterator;
-        GenericVersionSelector gvs = new GenericVersionSelector();
-        gvs.setName(versionName);
-        internalRestore(getVersionHistory().getVersion(versionName), gvs, removeExisting);
+        Version v = getVersionHistory().getVersion(versionName);
+        DateVersionSelector gvs = new DateVersionSelector(v.getCreated());
+        internalRestore(v, gvs, removeExisting);
-        internalRestore(version, new GenericVersionSelector(version.getCreated()), removeExisting);
+        internalRestore(version, new DateVersionSelector(version.getCreated()), removeExisting);
-            node.internalRestore(version, new GenericVersionSelector(version.getCreated()), removeExisting);
+            node.internalRestore(version, new DateVersionSelector(version.getCreated()), removeExisting);
-        internalRestore(v, new GenericVersionSelector(versionLabel), removeExisting);
+        internalRestore(v, new LabelVersionSelector(versionLabel), removeExisting);
+                String oldVersion = "jcr:dummy";
-                        session.move(n.getPath(), getPath() + "/" + n.getName());
+                        String dstPath = getPath() + "/" + n.getName();
+                        if (!n.getPath().equals(dstPath)) {
+                            session.move(n.getPath(), dstPath);
+                        }
+                        oldVersion = n.getBaseVersion().getName();
+                // get desired version from version selector
+                AbstractVersion v = (AbstractVersion) vsel.select(history);
+
+                // check existing version of item exists
+                NodeImpl node;
-                    // get desired version from version selector
-                    AbstractVersion v = (AbstractVersion) vsel.select(history);
-                    NodeImpl node = addNode(child.getName(), v.getFrozenNode());
-                    node.internalRestore(v, vsel, removeExisting);
+                    if (v == null) {
+                        // if version selector was unable to select version,
+                        // choose the initial one
+                        Version[] vs = history.getRootVersion().getSuccessors();
+                        if (vs.length == 0) {
+                            String msg = "Unable to select appropariate version for " +
+                                    child.getName() + " using " + vsel;
+                            log.error(msg);
+                            throw new VersionException(msg);
+                        }
+                        v = (AbstractVersion) vs[0];
+                    }
+                    node = addNode(child.getName(), v.getFrozenNode());
+                } else {
+                    node = session.getNodeById(nodeId);
+                    if (v == null || oldVersion == null || v.getName().equals(oldVersion)) {
+                        v = null;
+                    }
+                }
+                if (v != null) {
+                    try {
+                        node.internalRestore(v, vsel, removeExisting);
+                    } catch (RepositoryException e) {
+                        log.error("Error while restoring node: " + e.toString());
+                        log.error("  child path: " + node.safeGetJCRPath());
+                        log.error("  selected version: " + v.getName());
+                        StringBuffer avail = new StringBuffer();
+                        VersionIterator vi = history.getAllVersions();
+                        while (vi.hasNext()) {
+                            avail.append(vi.nextVersion().getName());
+                            if (vi.hasNext()) {
+                                avail.append(", ");
+                            }
+                        }
+                        log.error("  available versions: " + avail);
+                        log.error("  versionselector: " + vsel);
+                        throw e;
+                    }
