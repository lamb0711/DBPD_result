JCR-2087 Upgrade to Java 5 as the base platform

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785116 13f79535-47bb-0310-9956-ffa450edef68

-        Iterator iter = stateMgr.getDescendantTransientItemStates((NodeId) id);
+        Iterator<ItemState> iter = stateMgr.getDescendantTransientItemStates((NodeId) id);
-                Set mixins = thisState.getMixinTypeNames();
-                ArrayList values = new ArrayList(mixins.size());
-                Iterator iter = mixins.iterator();
-                while (iter.hasNext()) {
-                    values.add(InternalValue.create((Name) iter.next()));
+                Set<Name> mixins = thisState.getMixinTypeNames();
+                ArrayList<InternalValue> values = new ArrayList<InternalValue>(mixins.size());
+                for (Name n : mixins) {
+                    values.add(InternalValue.create(n));
-                genValues = (InternalValue[]) values.toArray(new InternalValue[values.size()]);
+                genValues = values.toArray(new InternalValue[values.size()]);
-            ArrayList tmp = new ArrayList(thisState.getChildNodeEntries());
+            ArrayList<ChildNodeEntry> tmp = new ArrayList<ChildNodeEntry>(thisState.getChildNodeEntries());
-                        (ChildNodeEntry) tmp.get(i);
+                        tmp.get(i);
-        HashSet tmp = new HashSet(thisState.getPropertyNames());
-        for (Iterator iter = tmp.iterator(); iter.hasNext();) {
-            Name propName = (Name) iter.next();
+        HashSet<Name> tmp = new HashSet<Name>(thisState.getPropertyNames());
+        for (Name propName : tmp) {
-        int options = ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD |
-                ItemValidator.CHECK_RETENTION;
+        int options = ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD
+                | ItemValidator.CHECK_RETENTION;
-        Iterator iter = mixinNames.iterator();
+        Iterator<Name> iter = mixinNames.iterator();
-            vals[cnt++] = InternalValue.create((Name) iter.next());
+            vals[cnt++] = InternalValue.create(iter.next());
-    public Set getMixinTypeNames() {
+    public Set<Name> getMixinTypeNames() {
-        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
-                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING
+                | ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
-            Set mixins = new HashSet(data.getNodeState().getMixinTypeNames());
+            Set<Name> mixins = new HashSet<Name>(data.getNodeState().getMixinTypeNames());
-            Set mixins = new HashSet(thisState.getMixinTypeNames());
+            Set<Name> mixins = new HashSet<Name>(thisState.getMixinTypeNames());
-        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
-                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING
+                | ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
-        Set remainingMixins = new HashSet<Name>(state.getMixinTypeNames());
+        Set<Name> remainingMixins = new HashSet<Name>(state.getMixinTypeNames());
-            HashSet set = new HashSet<Name>(thisState.getPropertyNames());
-            for (Iterator iter = set.iterator(); iter.hasNext();) {
-                Name propName = (Name) iter.next();
+            HashSet<Name> set = new HashSet<Name>(thisState.getPropertyNames());
+            for (Name propName : set) {
-            ArrayList list = new ArrayList<ChildNodeEntry>(thisState.getChildNodeEntries());
+            ArrayList<ChildNodeEntry> list = new ArrayList<ChildNodeEntry>(thisState.getChildNodeEntries());
-                ChildNodeEntry entry = (ChildNodeEntry) list.get(i);
+                ChildNodeEntry entry = list.get(i);
-        Set mixins = data.getNodeState().getMixinTypeNames();
+        Set<Name> mixins = data.getNodeState().getMixinTypeNames();
-        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
-                ItemValidator.CHECK_CONSTRAINTS;
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING
+                | ItemValidator.CHECK_CONSTRAINTS;
-        ArrayList list = new ArrayList(data.getNodeState().getChildNodeEntries());
+        ArrayList<ChildNodeEntry> list = new ArrayList<ChildNodeEntry>(data.getNodeState().getChildNodeEntries());
-            ChildNodeEntry entry = (ChildNodeEntry) list.get(i);
+            ChildNodeEntry entry = list.get(i);
-        List cneList = new ArrayList(state.getChildNodeEntries());
+        List<ChildNodeEntry> cneList = new ArrayList<ChildNodeEntry>(state.getChildNodeEntries());
-            for (Iterator iter = cneList.iterator(); iter.hasNext();) {
-                ChildNodeEntry cne = (ChildNodeEntry) iter.next();
+            for (ChildNodeEntry cne : cneList) {
-        Set mixinNames = data.getNodeState().getMixinTypeNames();
+        Set<Name> mixinNames = data.getNodeState().getMixinTypeNames();
-        Iterator iter = mixinNames.iterator();
+        Iterator<Name> iter = mixinNames.iterator();
-            nta[i++] = session.getNodeTypeManager().getNodeType((Name) iter.next());
+            nta[i++] = session.getNodeTypeManager().getNodeType(iter.next());
-        
-        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
-                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING
+                | ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
-            Set mixins = new HashSet(data.getNodeState().getMixinTypeNames());
+            Set<Name> mixins = new HashSet<Name>(data.getNodeState().getMixinTypeNames());
-        ArrayList list = new ArrayList();
+        ArrayList<NodeImpl> list = new ArrayList<NodeImpl>();
-            Iterator iter = state.getSharedSet().iterator();
-            while (iter.hasNext()) {
-                NodeId parentId = (NodeId) iter.next();
+            for (NodeId parentId : state.getSharedSet()) {
-        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK| ItemValidator.CHECK_HOLD;
+        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD;
-        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK| ItemValidator.CHECK_HOLD;
+        int options = ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD;
-    private NodeImpl doMergeTest(SessionImpl srcSession, List failedIds, boolean bestEffort)
+    private NodeImpl doMergeTest(SessionImpl srcSession, List<ItemId> failedIds, boolean bestEffort)
-                Set set = internalGetMergeFailed();
+                Set<String> set = internalGetMergeFailed();
-        Set failed = internalGetMergeFailed();
+        Set<String> failed = internalGetMergeFailed();
-    private Set internalGetMergeFailed() throws RepositoryException {
-        HashSet set = new HashSet();
+    private Set<String> internalGetMergeFailed() throws RepositoryException {
+        HashSet<String> set = new HashSet<String>();
-    private void internalSetMergeFailed(Set set) throws RepositoryException {
+    private void internalSetMergeFailed(Set<String> set) throws RepositoryException {
-            Iterator iter = set.iterator();
+            Iterator<String> iter = set.iterator();
-                String uuid = (String) iter.next();
+                String uuid = iter.next();
-                               List failedIds, boolean bestEffort,
+                               List<ItemId> failedIds, boolean bestEffort,
-    private void internalMerge(SessionImpl srcSession, List failedIds,
+    private void internalMerge(SessionImpl srcSession, List<ItemId> failedIds,
-    public void restoreFrozenState(InternalFrozenNode freeze, VersionSelector vsel, 
+    public void restoreFrozenState(InternalFrozenNode freeze, VersionSelector vsel,
-                List idList = refs.getReferences();
+                List<PropertyId> idList = refs.getReferences();
-                    ArrayList filteredList = new ArrayList(idList.size());
-                    for (Iterator iter = idList.iterator(); iter.hasNext();) {
-                        PropertyId propId = (PropertyId) iter.next();
+                    ArrayList<PropertyId> filteredList = new ArrayList<PropertyId>(idList.size());
+                    for (PropertyId propId : filteredList) {
-        // TODO tweak query implemention in order to support WEAKREFERENCE reverse lookup 
+        // TODO tweak query implemention in order to support WEAKREFERENCE reverse lookup
-            ArrayList l = new ArrayList<Property>();
-            for (NodeIterator nit = result.getNodes(); nit.hasNext(); ) {
+            ArrayList<Property> l = new ArrayList<Property>();
+            for (NodeIterator nit = result.getNodes(); nit.hasNext();) {
-                for (PropertyIterator pit = n.getProperties(); pit.hasNext(); ) {
+                for (PropertyIterator pit = n.getProperties(); pit.hasNext();) {
-        int options = ItemValidator.CHECK_VERSIONING | ItemValidator.CHECK_LOCK |
-                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
+        int options = ItemValidator.CHECK_VERSIONING | ItemValidator.CHECK_LOCK
+                | ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD;
-        Set oldDefs = new HashSet(Arrays.asList(entOld.getAllItemDefs()));
-        Set newDefs = new HashSet(Arrays.asList(entNew.getAllItemDefs()));
-        Set allDefs = new HashSet(Arrays.asList(entAll.getAllItemDefs()));
+        Set<ItemDef> oldDefs = new HashSet<ItemDef>(Arrays.asList(entOld.getAllItemDefs()));
+        Set<ItemDef> newDefs = new HashSet<ItemDef>(Arrays.asList(entNew.getAllItemDefs()));
+        Set<ItemDef> allDefs = new HashSet<ItemDef>(Arrays.asList(entAll.getAllItemDefs()));
-        Set addedDefs = new HashSet(newDefs);
+        Set<ItemDef> addedDefs = new HashSet<ItemDef>(newDefs);
-        HashSet set = new HashSet(thisState.getPropertyNames());
-        for (Iterator iter = set.iterator(); iter.hasNext();) {
-            Name propName = (Name) iter.next();
+        HashSet<Name> set = new HashSet<Name>(thisState.getPropertyNames());
+        for (Name propName : set) {
-        ArrayList list = new ArrayList(thisState.getChildNodeEntries());
+        ArrayList<ChildNodeEntry> list = new ArrayList<ChildNodeEntry>(thisState.getChildNodeEntries());
-            ChildNodeEntry entry = (ChildNodeEntry) list.get(i);
+            ChildNodeEntry entry = list.get(i);
-        for (Iterator iter = addedDefs.iterator(); iter.hasNext();) {
-            ItemDef def = (ItemDef) iter.next();
+        for (Iterator<ItemDef> iter = addedDefs.iterator(); iter.hasNext();) {
+            ItemDef def = iter.next();
