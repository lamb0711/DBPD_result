JCR-2087: Upgrade to Java 5 as the base platform

Various cleanups here and there.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@793283 13f79535-47bb-0310-9956-ffa450edef68

-    private Map nameMap;
+    private Map<Name, Object> nameMap;
-        if (obj instanceof ArrayList) {
+        if (obj instanceof ArrayList<?>) {
-        if (obj instanceof ArrayList) {
+        if (obj instanceof ArrayList<?>) {
-            ArrayList siblings = (ArrayList) obj;
+            ArrayList<ChildNodeEntry> siblings = (ArrayList<ChildNodeEntry>) obj;
-                return (ChildNodeEntry) siblings.get(index - 1);
+                return siblings.get(index - 1);
-        List siblings = null;
+        List<Object> siblings = null;
-            if (obj instanceof ArrayList) {
+            if (obj instanceof ArrayList<?>) {
-                siblings = (ArrayList) obj;
+                siblings = (ArrayList<Object>) obj;
-                siblings = new ArrayList();
+                siblings = new ArrayList<Object>();
-    void addAll(List entriesList) {
-        Iterator iter = entriesList.iterator();
-        while (iter.hasNext()) {
-            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+    void addAll(List<ChildNodeEntry> entriesList) {
+        for (ChildNodeEntry entry : entriesList) {
-        List siblings = (ArrayList) obj;
+        List<ChildNodeEntry> siblings = (ArrayList<ChildNodeEntry>) obj;
-        ChildNodeEntry removedEntry = (ChildNodeEntry) siblings.remove(index - 1);
+        ChildNodeEntry removedEntry = siblings.remove(index - 1);
-            ChildNodeEntry oldEntry = (ChildNodeEntry) siblings.get(i);
+            ChildNodeEntry oldEntry = siblings.get(i);
-        List result = new ArrayList();
-        Iterator iter = iterator();
-        while (iter.hasNext()) {
-            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+        List<ChildNodeEntry> result = new ArrayList<ChildNodeEntry>();
+        for (ChildNodeEntry entry : this) {
-
-        List result = new ArrayList();
-        Iterator iter = iterator();
-        while (iter.hasNext()) {
-            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+        List<ChildNodeEntry> result = new ArrayList<ChildNodeEntry>();
+        for (ChildNodeEntry entry : this) {
-
-    public ListIterator listIterator() {
+    public ListIterator<ChildNodeEntry> listIterator() {
-    public ListIterator listIterator(int index) {
+    public ListIterator<ChildNodeEntry> listIterator(int index) {
-        ListIterator iter = new EntriesIterator();
+        ListIterator<ChildNodeEntry> iter = new EntriesIterator();
-    public List subList(int fromIndex, int toIndex) {
+    public List<ChildNodeEntry> subList(int fromIndex, int toIndex) {
-        return Collections.unmodifiableList(new ArrayList(this).subList(fromIndex, toIndex));
+        return Collections.unmodifiableList(new ArrayList<ChildNodeEntry>(this).subList(fromIndex, toIndex));
-            nameMap = new HashMap();
+            nameMap = new HashMap<Name, Object>();
-            nameMap = (Map) ((HashMap) nameMap).clone();
+            nameMap = (Map<Name, Object>) ((HashMap<Name, Object>) nameMap).clone();
-    class EntriesIterator implements ListIterator {
+    class EntriesIterator implements ListIterator<ChildNodeEntry> {
-        public Object next() {
+        public ChildNodeEntry next() {
-            return mapIter.getValue();
+            return (ChildNodeEntry) mapIter.getValue();
-        public Object previous() {
+        public ChildNodeEntry previous() {
-            return mapIter.getValue();
+            return (ChildNodeEntry) mapIter.getValue();
-        public void add(Object o) {
+        public void add(ChildNodeEntry o) {
-        public void set(Object o) {
+        public void set(ChildNodeEntry o) {
