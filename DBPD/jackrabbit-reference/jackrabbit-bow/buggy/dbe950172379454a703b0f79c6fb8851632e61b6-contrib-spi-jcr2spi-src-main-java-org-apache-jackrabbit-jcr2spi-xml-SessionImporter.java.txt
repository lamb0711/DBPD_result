remove ItemStateException (and subclasses) and replace their usage with RepositoryException and subclasses respectively

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520315 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ItemStateException;
-import org.apache.jackrabbit.jcr2spi.state.NoSuchItemStateException;
-        } catch (ItemNotFoundException infe) {
+        } catch (ItemNotFoundException e) {
-           } catch (NoSuchItemStateException e) {
+           } catch (ItemNotFoundException e) {
-           } catch (ItemStateException e) {
-               // undefined internal error
-               String msg = "Internal error. Failed to retrieve existing nodeState.";
-               log.debug(msg);
-               throw new RepositoryException(msg, e);
-               } catch (NoSuchItemStateException e) {
+               } catch (ItemNotFoundException e) {
-               } catch (ItemStateException e) {
-                   String msg = "Internal error: failed to retrieve conflicting node state";
-                   log.debug(msg);
-                   throw new RepositoryException(msg, e);
-                                  NodeInfo nodeInfo)
-        throws ItemExistsException, RepositoryException, ItemStateException {
+                                  NodeInfo nodeInfo) throws ItemExistsException, RepositoryException {
-                Operation op = Remove.create(conflicting.getNodeState());
-                stateMgr.execute(op);
+                try {
+                    Operation op = Remove.create(conflicting.getNodeState());
+                    stateMgr.execute(op);
+                } catch (ItemNotFoundException e) {
+                    // conflicting does not exist any more. no need for a removal
+                }
-                op = Remove.create(conflicting.getNodeState());
+                Operation op = Remove.create(conflicting.getNodeState());
-            } catch (ItemStateException e) {
+            } catch (RepositoryException e) {
-            try {
-                List cne = parent.getNodeEntry().getNodeEntries(nodeInfo.getName());
-                if (def.allowsSameNameSiblings()) {
-                    // TODO TOBEFIXED find proper solution. problem with same-name-siblings
-                    childState = ((NodeEntry)cne.get(cne.size()-1)).getNodeState();
-                } else {
-                    childState = ((NodeEntry)cne.get(0)).getNodeState();
-                }
-            } catch (ItemStateException e) {
-                // should not occur, since nodestate is retrieved from cne-list
-                throw new RepositoryException(e);
+            List cne = parent.getNodeEntry().getNodeEntries(nodeInfo.getName());
+            if (def.allowsSameNameSiblings()) {
+                // TODO TOBEFIXED find proper solution. problem with same-name-siblings
+                childState = ((NodeEntry)cne.get(cne.size()-1)).getNodeState();
+            } else {
+                childState = ((NodeEntry)cne.get(0)).getNodeState();
-        QPropertyDefinition def;
+        QPropertyDefinition def = null;
-            } catch (ItemStateException e) {
-                // should not occur. existance has been checked before
-                throw new RepositoryException(e);
-            }
-        } else {
-            // there's no property with that name, find applicable definition
-            if (tva.length == 1) {
-                // could be single- or multi-valued (n == 1)
-                def = session.getValidator().getApplicablePropertyDefinition(propName, infoType, parentState);
-            } else {
-                // can only be multi-valued (n == 0 || n > 1)
-                def = session.getValidator().getApplicablePropertyDefinition(propName, infoType, true, parentState);
-            }
-            if (def.isProtected()) {
-                // skip protected property
-                log.debug("skipping protected property " + propName);
-                return;
+            } catch (ItemNotFoundException e) {
+                // property apperently doesn't exist any more
+                // -> ignore
+       if (def == null) {
+           // there's no property with that name, find applicable definition
+           if (tva.length == 1) {
+               // could be single- or multi-valued (n == 1)
+               def = session.getValidator().getApplicablePropertyDefinition(propName, infoType, parentState);
+           } else {
+               // can only be multi-valued (n == 0 || n > 1)
+               def = session.getValidator().getApplicablePropertyDefinition(propName, infoType, true, parentState);
+           }
+           if (def.isProtected()) {
+               // skip protected property
+               log.debug("skipping protected property " + propName);
+               return;
+           }
+       }
+
-            try {
-                propState = parentEntry.getPropertyEntry(propName).getPropertyState();
-            } catch (ItemStateException e) {
-                // should not occur since prop-state has been created before
-                throw new RepositoryException(e);
-            }
+            propState = parentEntry.getPropertyEntry(propName).getPropertyState();
