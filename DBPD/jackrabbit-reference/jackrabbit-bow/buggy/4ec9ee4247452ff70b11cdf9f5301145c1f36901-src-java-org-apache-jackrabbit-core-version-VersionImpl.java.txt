- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

- *
- * @author Tobias Strasser
- * @version $Revision: 1.12 $, $Date: 2004/09/14 12:49:00 $
-		       NodeState state, NodeDef definition,
-		       ItemLifeCycleListener[] listeners)
-	    throws RepositoryException {
-	super(itemMgr, session, id, state, definition, listeners);
+                       NodeState state, NodeDef definition,
+                       ItemLifeCycleListener[] listeners)
+            throws RepositoryException {
+        super(itemMgr, session, id, state, definition, listeners);
-	// no check for NULL needed since its mandatory
-	return getProperty(PROPNAME_CREATED).getDate();
+        // no check for NULL needed since its mandatory
+        return getProperty(PROPNAME_CREATED).getDate();
-	initLabelCache();
-	return (String[]) cachedVersionLabels.toArray(new String[cachedVersionLabels.size()]);
+        initLabelCache();
+        return (String[]) cachedVersionLabels.toArray(new String[cachedVersionLabels.size()]);
-	initLabelCache();
-	return cachedVersionLabels.contains(label);
+        initLabelCache();
+        return cachedVersionLabels.contains(label);
-	// delegate to version history (will probably change in spec)
-	getHistory().addVersionLabel(this, label);
+        // delegate to version history (will probably change in spec)
+        getHistory().addVersionLabel(this, label);
-	// delegate to version history (will probably change in spec)
-	getHistory().removeVersionLabel(label);
+        // delegate to version history (will probably change in spec)
+        getHistory().removeVersionLabel(label);
-	if (hasProperty(PROPNAME_SUCCESSORS)) {
-	    Value[] values = getProperty(PROPNAME_SUCCESSORS).getValues();
-	    Version[] preds = new Version[values.length];
-	    for (int i = 0; i < values.length; i++) {
-		preds[i] = (Version) session.getNodeByUUID(values[i].getString());
-	    }
-	    return preds;
-	}
-	return new Version[0];
+        if (hasProperty(PROPNAME_SUCCESSORS)) {
+            Value[] values = getProperty(PROPNAME_SUCCESSORS).getValues();
+            Version[] preds = new Version[values.length];
+            for (int i = 0; i < values.length; i++) {
+                preds[i] = (Version) session.getNodeByUUID(values[i].getString());
+            }
+            return preds;
+        }
+        return new Version[0];
-	Version[] successors = getSuccessors();
-	InternalValue[] values = new InternalValue[successors.length + 1];
-	for (int i = 0; i < successors.length; i++) {
-	    values[i] = InternalValue.create(new UUID(successors[i].getUUID()));
-	}
-	values[successors.length] = InternalValue.create(new UUID(succ.getUUID()));
-	internalSetProperty(PROPNAME_SUCCESSORS, values);
+        Version[] successors = getSuccessors();
+        InternalValue[] values = new InternalValue[successors.length + 1];
+        for (int i = 0; i < successors.length; i++) {
+            values[i] = InternalValue.create(new UUID(successors[i].getUUID()));
+        }
+        values[successors.length] = InternalValue.create(new UUID(succ.getUUID()));
+        internalSetProperty(PROPNAME_SUCCESSORS, values);
-	// detach this from all successors
-	VersionImpl[] succ = (VersionImpl[]) getSuccessors();
-	for (int i = 0; i < succ.length; i++) {
-	    succ[i].internalDetachPredecessor(this);
-	}
-	// detach this from all predecessors
-	VersionImpl[] pred = (VersionImpl[]) getPredecessors();
-	for (int i = 0; i < pred.length; i++) {
-	    pred[i].internalDetachSuccessor(this);
-	}
-	// clear properties
-	internalSetProperty(PROPNAME_PREDECESSORS, new InternalValue[0]);
-	internalSetProperty(PROPNAME_SUCCESSORS, new InternalValue[0]);
+        // detach this from all successors
+        VersionImpl[] succ = (VersionImpl[]) getSuccessors();
+        for (int i = 0; i < succ.length; i++) {
+            succ[i].internalDetachPredecessor(this);
+        }
+        // detach this from all predecessors
+        VersionImpl[] pred = (VersionImpl[]) getPredecessors();
+        for (int i = 0; i < pred.length; i++) {
+            pred[i].internalDetachSuccessor(this);
+        }
+        // clear properties
+        internalSetProperty(PROPNAME_PREDECESSORS, new InternalValue[0]);
+        internalSetProperty(PROPNAME_SUCCESSORS, new InternalValue[0]);
-	Version[] vsucc = v.getSuccessors();
-	Version[] successors = getSuccessors();
-	InternalValue[] values = new InternalValue[successors.length - 1 + vsucc.length];
-	int idx = 0;
-	// copy successors but ignore 'v'
-	for (int i = 0; i < successors.length; i++) {
-	    if (!successors[i].isSame(v)) {
-		values[idx++] = InternalValue.create(new UUID(successors[i].getUUID()));
-	    }
-	}
-	// attach v's successors
-	for (int i = 0; i < vsucc.length; i++) {
-	    values[idx++] = InternalValue.create(new UUID(vsucc[i].getUUID()));
-	}
-	internalSetProperty(PROPNAME_SUCCESSORS, values);
+        Version[] vsucc = v.getSuccessors();
+        Version[] successors = getSuccessors();
+        InternalValue[] values = new InternalValue[successors.length - 1 + vsucc.length];
+        int idx = 0;
+        // copy successors but ignore 'v'
+        for (int i = 0; i < successors.length; i++) {
+            if (!successors[i].isSame(v)) {
+                values[idx++] = InternalValue.create(new UUID(successors[i].getUUID()));
+            }
+        }
+        // attach v's successors
+        for (int i = 0; i < vsucc.length; i++) {
+            values[idx++] = InternalValue.create(new UUID(vsucc[i].getUUID()));
+        }
+        internalSetProperty(PROPNAME_SUCCESSORS, values);
-	Version[] vpred = v.getPredecessors();
-	Version[] tpred = getPredecessors();
-	InternalValue[] values = new InternalValue[tpred.length - 1 + vpred.length];
-	int idx = 0;
-	// copy predecessors but ignore 'v'
-	for (int i = 0; i < tpred.length; i++) {
-	    if (!tpred[i].isSame(v)) {
-		values[idx++] = InternalValue.create(new UUID(tpred[i].getUUID()));
-	    }
-	}
-	// attach v's predecessors
-	for (int i = 0; i < vpred.length; i++) {
-	    values[idx++] = InternalValue.create(new UUID(vpred[i].getUUID()));
-	}
-	internalSetProperty(PROPNAME_PREDECESSORS, values);
+        Version[] vpred = v.getPredecessors();
+        Version[] tpred = getPredecessors();
+        InternalValue[] values = new InternalValue[tpred.length - 1 + vpred.length];
+        int idx = 0;
+        // copy predecessors but ignore 'v'
+        for (int i = 0; i < tpred.length; i++) {
+            if (!tpred[i].isSame(v)) {
+                values[idx++] = InternalValue.create(new UUID(tpred[i].getUUID()));
+            }
+        }
+        // attach v's predecessors
+        for (int i = 0; i < vpred.length; i++) {
+            values[idx++] = InternalValue.create(new UUID(vpred[i].getUUID()));
+        }
+        internalSetProperty(PROPNAME_PREDECESSORS, values);
-					InternalValue value)
-	    throws ValueFormatException, RepositoryException {
-	return super.internalSetProperty(name, value);
+                                        InternalValue value)
+            throws ValueFormatException, RepositoryException {
+        return super.internalSetProperty(name, value);
-					   InternalValue[] value)
-	    throws ValueFormatException, RepositoryException {
-	return super.internalSetProperty(name, value);
+                                           InternalValue[] value)
+            throws ValueFormatException, RepositoryException {
+        return super.internalSetProperty(name, value);
-	initLabelCache();
-	cachedVersionLabels.add(label);
-	saveLabelCache();
+        initLabelCache();
+        cachedVersionLabels.add(label);
+        saveLabelCache();
-	initLabelCache();
-	cachedVersionLabels.remove(label);
-	saveLabelCache();
+        initLabelCache();
+        cachedVersionLabels.remove(label);
+        saveLabelCache();
-	if (cachedVersionLabels == null) {
-	    cachedVersionLabels = new HashSet();
-	    if (hasProperty(PROPNAME_VERSION_LABELS)) {
-		Value[] values = getProperty(PROPNAME_VERSION_LABELS).getValues();
-		for (int i = 0; i < values.length; i++) {
-		    cachedVersionLabels.add(values[i].getString());
-		}
-	    }
-	}
+        if (cachedVersionLabels == null) {
+            cachedVersionLabels = new HashSet();
+            if (hasProperty(PROPNAME_VERSION_LABELS)) {
+                Value[] values = getProperty(PROPNAME_VERSION_LABELS).getValues();
+                for (int i = 0; i < values.length; i++) {
+                    cachedVersionLabels.add(values[i].getString());
+                }
+            }
+        }
-	InternalValue[] newValues = new InternalValue[cachedVersionLabels.size()];
-	Iterator iter = cachedVersionLabels.iterator();
-	for (int i = 0; i < newValues.length; i++) {
-	    newValues[i] = InternalValue.create((String) iter.next());
-	}
-	internalSetProperty(PROPNAME_VERSION_LABELS, newValues);
-	save();
+        InternalValue[] newValues = new InternalValue[cachedVersionLabels.size()];
+        Iterator iter = cachedVersionLabels.iterator();
+        for (int i = 0; i < newValues.length; i++) {
+            newValues[i] = InternalValue.create((String) iter.next());
+        }
+        internalSetProperty(PROPNAME_VERSION_LABELS, newValues);
+        save();
-	return (VersionHistoryImpl) getParent();
+        return (VersionHistoryImpl) getParent();
-	VersionIteratorImpl iter = new VersionIteratorImpl(v);
-	while (iter.hasNext()) {
-	    if (iter.nextVersion().isSame(this)) {
-		return true;
-	    }
-	}
-	return false;
+        VersionIteratorImpl iter = new VersionIteratorImpl(v);
+        while (iter.hasNext()) {
+            if (iter.nextVersion().isSame(this)) {
+                return true;
+            }
+        }
+        return false;
