JCR-2087: Upgrade to Java 5 as the base platform

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@801565 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-    private final List exceptions = new ArrayList();
+    private final List<Exception> exceptions = new ArrayList<Exception>();
-            for (Iterator it = builder.exceptions.iterator(); it.hasNext();) {
-                msg.append(it.next().toString()).append('\n');
+            for (Exception exception : builder.exceptions) {
+                msg.append(exception.toString()).append('\n');
-     * @throws RepositoryException
+     * @throws RepositoryException if an error occurs while building the lucene
+     *                             query.
-        for (int i = 0; i < result.length; i++) {
-            Query operand = (Query) result[i];
+        for (Object aResult : result) {
+            Query operand = (Query) aResult;
-        for (int i = 0; i < result.length; i++) {
-            Query operand = (Query) result[i];
+        for (Object aResult : result) {
+            Query operand = (Query) aResult;
-        for (int i = 0; i < result.length; i++) {
-            b.add((Query) result[i], Occur.SHOULD);
+        for (Object aResult : result) {
+            b.add((Query) aResult, Occur.SHOULD);
-        List terms = new ArrayList();
+        List<Term> terms = new ArrayList<Term>();
-            return new JackrabbitTermQuery((Term) terms.get(0));
+            return new JackrabbitTermQuery(terms.get(0));
-            for (Iterator it = terms.iterator(); it.hasNext();) {
-                b.add(new JackrabbitTermQuery((Term) it.next()), Occur.SHOULD);
+            for (Term term : terms) {
+                b.add(new JackrabbitTermQuery(term), Occur.SHOULD);
-        for (int i = 0; i < steps.length; i++) {
-            context = (Query) steps[i].accept(this, context);
+        for (LocationStepQueryNode step : steps) {
+            context = (Query) step.accept(this, context);
-        for (int i = 0; i < predicates.length; i++) {
-            andQuery.add((Query) predicates[i], Occur.MUST);
+        for (Object predicate : predicates) {
+            andQuery.add((Query) predicate, Occur.MUST);
-        for (int i = 0; i < pred.length; i++) {
-            if (pred[i].getType() == QueryNode.TYPE_RELATION) {
-                RelationQueryNode pos = (RelationQueryNode) pred[i];
+        for (QueryNode aPred : pred) {
+            if (aPred.getType() == QueryNode.TYPE_RELATION) {
+                RelationQueryNode pos = (RelationQueryNode) aPred;
-                for (int i = 0; i < predicates.length; i++) {
-                    andQuery.add((Query) predicates[i], Occur.MUST);
+                for (Object predicate : predicates) {
+                    andQuery.add((Query) predicate, Occur.MUST);
-                    for (int i = 0; i < stringValues.length; i++) {
+                    for (String value : stringValues) {
-                                    FieldNames.createNamedValue(field, stringValues[i]));
+                                FieldNames.createNamedValue(field, value));
-                        } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        } else
+                        if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
-                    for (int i = 0; i < stringValues.length; i++) {
-                        Term lower = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, stringValues[i]));
+                    for (String value : stringValues) {
+                        Term lower = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, value));
-                    for (int i = 0; i < stringValues.length; i++) {
-                        Term lower = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, stringValues[i]));
+                    for (String value : stringValues) {
+                        Term lower = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, value));
-                    for (int i = 0; i < stringValues.length; i++) {
+                    for (String value : stringValues) {
-                        Term upper = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, stringValues[i]));
+                        Term upper = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, value));
-                    for (int i = 0; i < stringValues.length; i++) {
+                    for (String value : stringValues) {
-                        Term upper = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, stringValues[i]));
+                        Term upper = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, value));
-                    for (int i = 0; i < stringValues.length; i++) {
-                        Term t = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, stringValues[i]));
+                    for (String value : stringValues) {
+                        Term t = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, value));
-                        } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        } else
+                        if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
-                    for (int i = 0; i < stringValues.length; i++) {
+                    for (String value : stringValues) {
-                        Term t = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, stringValues[i]));
+                        Term t = new Term(FieldNames.PROPERTIES, FieldNames.createNamedValue(field, value));
-                        } else if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
+                        } else
+                        if (transform[0] == TransformConstants.TRANSFORM_LOWER_CASE) {
-                for (int i = 0; i < predicates.length; i++) {
-                    andQuery.add((Query) predicates[i], Occur.MUST);
+                for (Object predicate : predicates) {
+                    andQuery.add((Query) predicate, Occur.MUST);
-        List values = new ArrayList();
-        for (int i = 0; i < types.length; i++) {
-            switch (types[i].type) {
+        List<String> values = new ArrayList<String>();
+        for (PropertyTypeRegistry.TypeMapping type : types) {
+            switch (type.type) {
-        return (String[]) values.toArray(new String[values.size()]);
+        return values.toArray(new String[values.size()]);
