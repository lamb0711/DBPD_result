JCR-1588 - JSR 283: Access Control (work in progress)
JCR-1590 - JSR 283: Locking
JCR-1915 - Node.setPrimaryNodeType should only redefine child-definitions that are not covered by the new effective nt
JCR-1875 - Failing Node.unlock() might leave inconsistent transient state
JCR-538 - Failing Node.checkin() or Node.checkout() might leave inconsistent transient state

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@732693 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.jsr283.security.Privilege;
-                return new CompiledPermissionsImpl(principals, userNode);
+                return new CompiledPermissionsImpl(principals, userNode.getPath());
+    private int getPrivilegeBits(String privName) throws RepositoryException {
+        Privilege[] privs = new Privilege[] {session.getAccessControlManager().privilegeFromName(privName)};
+        return PrivilegeRegistry.getBits(privs);
+    }
+
-        private final NodeImpl userNode;
+        private final String userNodePath;
-        protected CompiledPermissionsImpl(Set principals, NodeImpl userNode) throws RepositoryException {
-            this.userNode = userNode;
+        protected CompiledPermissionsImpl(Set principals, String userNodePath) throws RepositoryException {
+            this.userNodePath = userNodePath;
+            NodeImpl userNode = null;
+            try {
+                if (session.nodeExists(userNodePath)) {
+                    userNode = (NodeImpl) session.getNode(userNodePath);
+                }
+            } catch (RepositoryException e) {
+                // ignore
+            }
+
+            if (userNode == null) {
+                // no Node corresponding to user for which the permissions are
+                // calculated -> no permissions/priviles.
+                log.debug("No node at " + userNodePath);
+                return new Result(Permission.NONE, Permission.NONE, PrivilegeRegistry.NO_PRIVILEGE, PrivilegeRegistry.NO_PRIVILEGE);
+            }
+
-                privs = PrivilegeRegistry.READ;
+                privs = getPrivilegeBits(Privilege.JCR_READ);
+                            Path aPath = session.getQPath(authN.getPath());
-                                allows = Permission.ALL;
+                                if (path.equals(aPath)) {
+                                    allows |= (Permission.ADD_NODE | Permission.REMOVE_PROPERTY | Permission.SET_PROPERTY);
+                                } else {
+                                    allows |= Permission.ALL;
+                                }
-                                    privs |= PrivilegeRegistry.WRITE;
+                                    //       remove_node is not included
+                                    privs |= getPrivilegeBits(PrivilegeRegistry.REP_WRITE);
+                                    if (!path.equals(aPath)) {
+                                       privs |= getPrivilegeBits(Privilege.JCR_REMOVE_NODE);
+                                    }
-                                    privs |= PrivilegeRegistry.MODIFY_PROPERTIES;
+                                    privs |= getPrivilegeBits(Privilege.JCR_MODIFY_PROPERTIES);
-                                    privs |= PrivilegeRegistry.WRITE;
+                                    privs |= getPrivilegeBits(PrivilegeRegistry.REP_WRITE);
-                        privs |= PrivilegeRegistry.WRITE;
+                        privs |= getPrivilegeBits(PrivilegeRegistry.REP_WRITE);
-                            userNode.getPath().equals(Text.getRelativeParent(evPath, 1))) {
+                            userNodePath.equals(Text.getRelativeParent(evPath, 1))) {
-                                Value[] vs = session.getProperty(evPath).getValues();
-                                String princName = session.getJCRName(P_PRINCIPAL_NAME);
-                                for (int i = 0; i < vs.length; i++) {
-                                    Node groupNode = session.getNodeByUUID(vs[i].getString());
-                                    String pName = groupNode.getProperty(princName).getString();
-                                    if (userAdminGroup.equals(pName)) {
-                                        isUserAdmin = true;
-                                    } else if (groupAdminGroup.equals(pName)) {
-                                        isGroupAdmin = true;
+                                if (session.propertyExists(evPath)) {
+                                    Value[] vs = session.getProperty(evPath).getValues();
+                                    String princName = session.getJCRName(P_PRINCIPAL_NAME);
+                                    for (int i = 0; i < vs.length; i++) {
+                                        Node groupNode = session.getNodeByUUID(vs[i].getString());
+                                        String pName = groupNode.getProperty(princName).getString();
+                                        if (userAdminGroup.equals(pName)) {
+                                            isUserAdmin = true;
+                                        } else if (groupAdminGroup.equals(pName)) {
+                                            isGroupAdmin = true;
+                                        }
-}
+}
