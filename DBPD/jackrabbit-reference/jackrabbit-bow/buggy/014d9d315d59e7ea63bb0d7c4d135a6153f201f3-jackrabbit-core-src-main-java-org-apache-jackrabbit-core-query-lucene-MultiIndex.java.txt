#0000 - JCR-1232: Merge UUID to NodeId

Replace UUID references with NodeId alternatives from o.a.j.core.query.lucene.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@793015 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.uuid.UUID;
-     * @param remove collection of <code>UUID</code>s that identify documents to
+     * @param remove collection of <code>id</code>s that identify documents to
-            Collection<UUID> remove, Collection<Document> add)
+            Collection<NodeId> remove, Collection<Document> add)
-            for (UUID uuid : remove) {
-                executeAndLog(new DeleteNode(transactionId, uuid));
+            for (NodeId id : remove) {
+                executeAndLog(new DeleteNode(transactionId, id));
-        Collection<UUID> empty = Collections.emptyList();
+        Collection<NodeId> empty = Collections.emptyList();
-     * Deletes the first document that matches the <code>uuid</code>.
+     * Deletes the first document that matches the <code>id</code>.
-     * @param uuid document that match this <code>uuid</code> will be deleted.
+     * @param id document that match this <code>id</code> will be deleted.
-    void removeDocument(UUID uuid) throws IOException {
+    void removeDocument(NodeId id) throws IOException {
-        update(Collections.singleton(uuid), empty);
+        update(Collections.singleton(id), empty);
-     * Deletes all documents that match the <code>uuid</code>.
+     * Deletes all documents that match the <code>id</code>.
-     * @param uuid documents that match this <code>uuid</code> will be deleted.
+     * @param id documents that match this <code>id</code> will be deleted.
-    synchronized int removeAllDocuments(UUID uuid) throws IOException {
+    synchronized int removeAllDocuments(NodeId id) throws IOException {
-            Term idTerm = new Term(FieldNames.UUID, uuid.toString());
+            Term idTerm = new Term(FieldNames.UUID, id.toString());
-                redoLog.append(new DeleteNode(getTransactionId(), uuid));
+                redoLog.append(new DeleteNode(getTransactionId(), id));
-                        redoLog.append(new DeleteNode(getTransactionId(), uuid));
+                        redoLog.append(new DeleteNode(getTransactionId(), id));
-        executeAndLog(new AddNode(getTransactionId(), id.getUUID()));
+        executeAndLog(new AddNode(getTransactionId(), id));
-        Map<UUID, Document> finished = new HashMap<UUID, Document>();
+        Map<NodeId, Document> finished = new HashMap<NodeId, Document>();
-            UUID uuid = UUID.fromString(document.get(FieldNames.UUID));
-            finished.put(uuid, document);
+            NodeId id = new NodeId(document.get(FieldNames.UUID));
+            finished.put(id, document);
-            for (UUID uuid : finished.keySet()) {
-                indexingQueue.removeDocument(uuid.toString());
+            for (NodeId id : finished.keySet()) {
+                indexingQueue.removeDocument(id.toString());
-                    for (UUID uuid : finished.keySet()) {
-                        executeAndLog(new DeleteNode(getTransactionId(), uuid));
+                    for (NodeId id : finished.keySet()) {
+                        executeAndLog(new DeleteNode(getTransactionId(), id));
-         * The uuid of the node to add.
+         * The id of the node to add.
-        private final UUID uuid;
+        private final NodeId id;
-         * @param uuid the uuid of the node to add.
+         * @param id the id of the node to add.
-        AddNode(long transactionId, UUID uuid) {
+        AddNode(long transactionId, NodeId id) {
-            this.uuid = uuid;
+            this.id = id;
-            this(transactionId, UUID.fromString(doc.get(FieldNames.UUID)));
+            this(transactionId, new NodeId(doc.get(FieldNames.UUID)));
-         * @param arguments     the arguments to this action. The uuid of the node
-         *                      to add
+         * @param arguments     The UUID of the node to add
-            return new AddNode(transactionId, UUID.fromString(arguments));
+            return new AddNode(transactionId, new NodeId(arguments));
-                    doc = index.createDocument(new NodeId(uuid));
+                    doc = index.createDocument(id);
-            logLine.append(uuid);
+            logLine.append(id);
-         * The uuid of the node to remove.
+         * The id of the node to remove.
-        private final UUID uuid;
+        private final NodeId id;
-         * @param uuid the uuid of the node to delete.
+         * @param id the id of the node to delete.
-        DeleteNode(long transactionId, UUID uuid) {
+        DeleteNode(long transactionId, NodeId id) {
-            this.uuid = uuid;
+            this.id = id;
-         * @param arguments     the uuid of the node to delete.
+         * @param arguments     the UUID of the node to delete.
-            return new DeleteNode(transactionId, UUID.fromString(arguments));
+            return new DeleteNode(transactionId, new NodeId(arguments));
-            String uuidString = uuid.toString();
+            String uuidString = id.toString();
-            logLine.append(uuid);
+            logLine.append(id);
