- adding versioning configuratuin
- adapting versioning to new persistence manager api

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126386 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.config.VersioningConfig;
+
+
-    // sub file system where the repository stores versions
-    private final FileSystem versionStore;
-        fsRootPath = "/versions";
-        try {
-            if (!repStore.exists(fsRootPath) || !repStore.isFolder(fsRootPath)) {
-                repStore.createFolder(fsRootPath);
-            }
-        } catch (FileSystemException fse) {
-            String msg = "failed to create folder for repository version store";
-            log.error(msg, fse);
-            throw new RepositoryException(msg, fse);
-        }
-        versionStore = new BasedFileSystem(repStore, fsRootPath);
-
-        // todo: as soon as dynamic workspaces are available, base on system ws
-        SessionImpl verSession = getSystemSession(repConfig.getDefaultWorkspaceName());
-        pvMgr = new NativePVM(verSession);
+        VersioningConfig vConfig = repConfig.getVersioningConfig();
+        PersistenceManager pm = createPersistenceManager(
+            vConfig.getHomeDir(),
+            vConfig.getFileSystem(),
+            vConfig.getPersistenceManagerConfig(),
+            rootNodeUUID,
+            nsReg,
+            ntReg);
+        pvMgr = new NativePVM(pm, getNodeTypeRegistry());
+    /**
+     * Returns the workspace persistence manager
+     *
+     * @return the workspace persistence manager
+     * @throws RepositoryException if the persistence manager could not be instantiated/initialized
+     */
+    public static PersistenceManager createPersistenceManager(File homeDir, 
+                                                              FileSystem fs, 
+                                                              PersistenceManagerConfig pmConfig,
+                                                              String rootNodeUUID,
+                                                              NamespaceRegistry nsReg,
+                                                              NodeTypeRegistry ntReg)
+            throws RepositoryException {
+        String className = pmConfig.getClassName();
+        Map params = pmConfig.getParameters();
+        try {
+            Class c = Class.forName(className);
+            PersistenceManager persistMgr = (PersistenceManager) c.newInstance();
+            /**
+             * set the properties of the persistence manager object
+             * from the param map
+             */
+            BeanMap bm = new BeanMap(persistMgr);
+            Iterator iter = params.keySet().iterator();
+            while (iter.hasNext()) {
+                Object name = iter.next();
+                Object value = params.get(name);
+                bm.put(name, value);
+            }
+            PMContext ctx = new PMContext(homeDir, fs, rootNodeUUID, nsReg, ntReg);
+            persistMgr.init(ctx);
+            return persistMgr;
+        } catch (Exception e) {
+            log.error("Cannot instantiate implementing class " + className, e);
+            throw new RepositoryException("Cannot instantiate implementing class " + className, e);
+        }
+    }
+
+
-        synchronized PersistenceManager getPersistenceManager() throws RepositoryException {
+        synchronized PersistenceManager getPersistenceManager(PersistenceManagerConfig pmConfig) 
+                throws RepositoryException {
-                PersistenceManagerConfig pmConfig = config.getPersistenceManagerConfig();
-                String className = pmConfig.getClassName();
-                Map params = pmConfig.getParameters();
-                try {
-                    Class c = Class.forName(className);
-                    persistMgr = (PersistenceManager) c.newInstance();
-                    /**
-                     * set the properties of the persistence manager object
-                     * from the param map
-                     */
-                    BeanMap bm = new BeanMap(persistMgr);
-                    Iterator iter = params.keySet().iterator();
-                    while (iter.hasNext()) {
-                        Object name = iter.next();
-                        Object value = params.get(name);
-                        bm.put(name, value);
-                    }
-                    PMContext ctx = new PMContext(config, rootNodeUUID, nsReg, ntReg);
-                    persistMgr.init(ctx);
-                } catch (Exception e) {
-                    persistMgr = null;
-                    log.error("Cannot instantiate implementing class " + className, e);
-                    throw new RepositoryException("Cannot instantiate implementing class " + className, e);
-                }
+                persistMgr = RepositoryImpl.createPersistenceManager(
+                        new File(config.getHomeDir()),
+                        config.getFileSystem(),
+                        pmConfig,
+                        rootNodeUUID,
+                        nsReg,
+                        ntReg);
-                    itemStateMgr = new SharedItemStateManager(getPersistenceManager(), rootNodeUUID, ntReg);
+                    itemStateMgr = new SharedItemStateManager(getPersistenceManager(config.getPersistenceManagerConfig()), rootNodeUUID, ntReg);
