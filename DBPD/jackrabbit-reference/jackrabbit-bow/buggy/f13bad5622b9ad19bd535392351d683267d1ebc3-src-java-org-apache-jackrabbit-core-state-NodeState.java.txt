more NodeState optimizations: 
- changed get/setPropertyNames from List to Set since the spec does not
  mandate that properties have to maintain order


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@202166 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.MapIterator;
+import org.apache.commons.collections.map.LinkedMap;
+import org.apache.commons.collections.map.ReferenceMap;
-import org.apache.commons.collections.map.ReferenceMap;
-import org.apache.commons.collections.map.LinkedMap;
-import org.apache.commons.collections.MapIterator;
-import org.apache.commons.collections.set.ListOrderedSet;
+import java.util.Collection;
-import java.util.Set;
-import java.util.Map;
-import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
-    static final long serialVersionUID = 2387880829766640392L;
+    static final long serialVersionUID = -1755253053645185279L;
-    /** insertion-ordered set of property names (QName objects) */
-    protected ListOrderedSet propertyNames = new ListOrderedSet();
+    /** set of property names (QName objects) */
+    protected Set propertyNames = new HashSet();
-     * Returns the names of this node's properties as a list of
+     * Returns the names of this node's properties as a set of
-     * @return list of <code>QNames</code> objects
+     * @return set of <code>QNames</code> objects
-    public synchronized List getPropertyNames() {
-        return propertyNames.asList();
+    public synchronized Set getPropertyNames() {
+        return Collections.unmodifiableSet(propertyNames);
-     * Sets the list of <code>QName</code> objects denoting the
+     * Sets the set of <code>QName</code> objects denoting the
-    public synchronized void setPropertyNames(List propNames) {
+    public synchronized void setPropertyNames(Set propNames) {
-     * Returns a list of <code>QName</code>s denoting those properties that
+     * Returns a set of <code>QName</code>s denoting those properties that
-     * @return list of <code>QName</code>s denoting the properties that have
+     * @return set of <code>QName</code>s denoting the properties that have
-    public synchronized List getAddedPropertyNames() {
+    public synchronized Set getAddedPropertyNames() {
-            return propertyNames.asList();
+            return Collections.unmodifiableSet(propertyNames);
-        ArrayList list = new ArrayList(propertyNames);
-        list.removeAll(other.propertyNames);
-        return list;
+        HashSet set = new HashSet(propertyNames);
+        set.removeAll(other.propertyNames);
+        return set;
-     * Returns a list of <code>QName</code>s denoting those properties that
+     * Returns a set of <code>QName</code>s denoting those properties that
-     * @return list of <code>QName</code>s denoting the properties that have
+     * @return set of <code>QName</code>s denoting the properties that have
-    public synchronized List getRemovedPropertyNames() {
+    public synchronized Set getRemovedPropertyNames() {
-            return Collections.EMPTY_LIST;
+            return Collections.EMPTY_SET;
-        ArrayList list = new ArrayList(other.propertyNames);
-        list.removeAll(propertyNames);
-        return list;
+        HashSet set = new HashSet(other.propertyNames);
+        set.removeAll(propertyNames);
+        return set;
-        // map used for lookup by name (key=uuid, value=1st same-name sibling entry)
+        // map used for lookup by name (key=name, value=1st same-name sibling entry)
