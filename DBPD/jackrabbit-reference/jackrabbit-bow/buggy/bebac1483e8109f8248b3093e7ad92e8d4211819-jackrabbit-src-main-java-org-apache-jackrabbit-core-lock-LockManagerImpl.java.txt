JCR-623 Clustering


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@471760 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.cluster.LockEventChannel;
+import org.apache.jackrabbit.core.cluster.LockEventListener;
-
-public class LockManagerImpl implements LockManager, SynchronousEventListener {
+public class LockManagerImpl implements LockManager, SynchronousEventListener, LockEventListener {
+     * Lock event channel.
+     */
+    private LockEventChannel eventChannel;
+
+    /**
+                if (eventChannel != null) {
+                    eventChannel.locked(node.getNodeId(), isDeep, session.getUserID());
+                }
+                if (eventChannel != null) {
+                    eventChannel.unlocked(node.getNodeId());
+                }
+
+
+    //----------------------------------------------------< LockEventListener >
+
+    /**
+     * Set a lock event channel
+     *
+     * @param eventChannel lock event channel
+     */
+    public void setEventChannel(LockEventChannel eventChannel) {
+        this.eventChannel = eventChannel;
+        eventChannel.setListener(this);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void externalLock(NodeId nodeId, boolean isDeep, String userId) throws RepositoryException {
+        acquire();
+
+        try {
+            Path path = getPath(nodeId);
+
+            // create lock token
+            LockInfo info = new LockInfo(new LockToken(nodeId), false, isDeep, userId);
+            info.setLive(true);
+            lockMap.put(path, info);
+
+            save();
+        } finally {
+            release();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void externalUnlock(NodeId nodeId) throws RepositoryException {
+        acquire();
+
+        try {
+            Path path = getPath(nodeId);
+            PathMap.Element element = lockMap.map(path, true);
+            if (element == null) {
+                throw new LockException("Node not locked: " + path.toString());
+            }
+            AbstractLockInfo info = (AbstractLockInfo) element.get();
+            if (info == null) {
+                throw new LockException("Node not locked: " + path.toString());
+            }
+            element.set(null);
+            info.setLive(false);
+
+            save();
+
+        } finally {
+            release();
+        }
+    }
