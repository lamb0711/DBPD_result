consolidated Value de-/serialization code in static methods of ValueHelper class

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159686 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.util.Base64;
+import org.apache.jackrabbit.core.util.ValueHelper;
-import java.io.InputStream;
-            if (prop.getType() == PropertyType.BINARY) {
-                // binary data, base64 encoding required
-                InputStream in = val.getStream();
-                Writer writer = new Writer() {
-                    public void close() /*throws IOException*/ {
-                    }
+            Writer writer = new Writer() {
+                public void close() /*throws IOException*/ {
+                }
-                    public void flush() /*throws IOException*/ {
-                    }
+                public void flush() /*throws IOException*/ {
+                }
-                    public void write(char[] cbuf, int off, int len) throws IOException {
-                        try {
-                            contentHandler.characters(cbuf, off, len);
-                        } catch (SAXException se) {
-                            throw new IOException(se.toString());
-                        }
-                    }
-                };
-                try {
-                    Base64.encode(in, writer);
-                    // no need to close our Writer implementation
-                    //writer.close();
-                } catch (IOException ioe) {
-                    // check if the exception wraps a SAXException
-                    Throwable t = ioe.getCause();
-                    if (t != null && t instanceof SAXException) {
-                        throw (SAXException) t;
-                    } else {
-                        throw new SAXException(ioe);
-                    }
-                } finally {
+                public void write(char[] cbuf, int off, int len) throws IOException {
-                        in.close();
-                    } catch (IOException e) {
-                        // ignore
+                        contentHandler.characters(cbuf, off, len);
+                    } catch (SAXException se) {
+                        throw new IOException(se.toString());
-            } else {
-                char[] chars = val.getString().toCharArray();
-                contentHandler.characters(chars, 0, chars.length);
+            };
+            try {
+                ValueHelper.serialize(val, false, writer);
+                // no need to close our Writer implementation
+                //writer.close();
+            } catch (IOException ioe) {
+                // check if the exception wraps a SAXException
+                // (see Writer.write(char[], int, int) above)
+                Throwable t = ioe.getCause();
+                if (t != null && t instanceof SAXException) {
+                    throw (SAXException) t;
+                } else {
+                    throw new SAXException(ioe);
+                }
+
