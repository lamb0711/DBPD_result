work in progress

JCR2SPI
--------------------------------------------------------------

- reorder ItemState/NodeState/PropertyState in order to group
  methods by state types (overlayed workspace state vs. session/transient states)
- add utility methods that allow to determine and validate the
  type of ItemState.
- move childitementry classes to separate package and force usage
  of interface methods
- add checks for state type to ItemManager implementation
- add checks for state type to LockManager
- fix Node.getMixinTypes()
- rename ItemState.pull to 'reset'. remove todo asking for a careful
  merging of wsp-State and introduce a new method 'merge'.

SPI
--------------------------------------------------------------------

- rename login as suggested by julian
- add method dispose(SessionInfo) 
- rename ItemId.getRelativePath to getPath

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@454423 13f79535-47bb-0310-9956-ffa450edef68

-     * @see RepositoryService#login(Credentials, String)
+     *
+     * @see RepositoryService#obtain(Credentials, String)
-    public SessionInfo login(Credentials credentials, String workspaceName)
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
+    public SessionInfo obtain(Credentials credentials, String workspaceName) throws LoginException, NoSuchWorkspaceException, RepositoryException {
+    public void dispose(SessionInfo sessionInfo) throws RepositoryException {
+        checkSessionInfo(sessionInfo);
+        SubscriptionManager sMgr = ((SessionInfoImpl)sessionInfo).getSubscriptionManager();
+        sMgr.dispose();
+    }
+
+            initMethod(method, sessionInfo, true);
+
-            LockMethod method = new LockMethod(uri, Scope.EXCLUSIVE, Type.WRITE, null, DavConstants.INFINITE_TIMEOUT, true);
+            LockMethod method = new LockMethod(uri, Scope.EXCLUSIVE, Type.WRITE,
+                sessionInfo.getUserID(), DavConstants.INFINITE_TIMEOUT, deep);
+        public void dispose() {
+            synchronized (subscriptionsLock) {
+                if (!subscriptions.isEmpty()) {
+                    subscriptions.clear();
+                    currentSubscriptions = null;
+                    stopPolling();
+                }
+            }
+        }
+
