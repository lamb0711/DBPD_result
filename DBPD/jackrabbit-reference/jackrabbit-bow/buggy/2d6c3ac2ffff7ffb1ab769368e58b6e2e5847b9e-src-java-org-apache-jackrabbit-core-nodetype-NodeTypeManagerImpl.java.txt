- PropDef and NodeDef adaptions
- adjusting to 0.16.4

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161308 13f79535-47bb-0310-9956-ffa450edef68

- * A <code>NodeTypeManagerImpl</code> ...
+ * A <code>NodeTypeManagerImpl</code> implements a session dependant
+ * NodeTypeManager.
+    /**
+     * the default logger
+     */
+    /**
+     * the underlaying node type registry
+     */
-    // namespace resolver used to translate qualified names to JCR names
+    /**
+     * namespace resolver used to translate qualified names to JCR names
+     */
+     * A cache for <code>PropertyDef</code> instances created by this <code>NodeTypeManager</code>
+     */
+    private final Map pdCache;
+
+    /**
+     * A cache for <code>NodeDef</code> instances created by this <code>NodeTypeManager</code>
+     */
+    private final Map ndCache;
+
+    /**
+        pdCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
+        ndCache = new ReferenceMap(ReferenceMap.HARD, ReferenceMap.SOFT);
+        ndCache.put(rootNodeDef.unwrap().getId(), rootNodeDef);
-        NodeDef cnd = ntReg.getNodeDef(id);
-        if (cnd == null) {
-            return null;
+        synchronized (ndCache) {
+            NodeDefinitionImpl nd = (NodeDefinitionImpl) ndCache.get(id);
+            if (nd == null) {
+                NodeDef cnd = ntReg.getNodeDef(id);
+                if (cnd != null) {
+                    nd = new NodeDefinitionImpl(cnd, this, nsResolver);
+                    ndCache.put(id, nd);
+                }
+            }
+            return nd;
-        return new NodeDefinitionImpl(cnd, this, nsResolver);
-        PropDef pd = ntReg.getPropDef(id);
-        if (pd == null) {
-            return null;
+        synchronized (pdCache) {
+            PropertyDefinitionImpl pdi = (PropertyDefinitionImpl) pdCache.get(id);
+            if (pdi == null) {
+                PropDef pd = ntReg.getPropDef(id);
+                if (pd != null) {
+                    pdi = new PropertyDefinitionImpl(pd, this, nsResolver);
+                    pdCache.put(id, pdi);
+                }
+            }
+            return pdi;
-        return new PropertyDefinitionImpl(pd, this, nsResolver);
-    public synchronized NodeTypeImpl getNodeType(QName name)
-            throws NoSuchNodeTypeException {
-        NodeTypeImpl nt = (NodeTypeImpl) ntCache.get(name);
-        if (nt != null) {
+    public NodeTypeImpl getNodeType(QName name) throws NoSuchNodeTypeException {
+        synchronized (ntCache) {
+            NodeTypeImpl nt = (NodeTypeImpl) ntCache.get(name);
+            if (nt == null) {
+                EffectiveNodeType ent = ntReg.getEffectiveNodeType(name);
+                NodeTypeDef def = ntReg.getNodeTypeDef(name);
+                nt = new NodeTypeImpl(ent, def, this, nsResolver);
+                ntCache.put(name, nt);
+            }
-
-        EffectiveNodeType ent = ntReg.getEffectiveNodeType(name);
-        NodeTypeDef def = ntReg.getNodeTypeDef(name);
-        nt = new NodeTypeImpl(ent, def, this, nsResolver);
-        ntCache.put(name, nt);
-
-        return nt;
+        // just clear all definitions from cache
+        pdCache.clear();
+        ndCache.clear();
+        // just clear all definitions from cache
+        pdCache.clear();
+        ndCache.clear();
