- adapted versioning again to spec 0.15
- added VirtualItemStateManager for reflecting virtual content


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55615 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.NodeState;
-import javax.jcr.Session;
+import javax.jcr.nodetype.NodeDef;
-public class VersionHistoryImpl extends NodeWrapper implements VersionHistory {
+public class VersionHistoryImpl extends NodeImpl implements VersionHistory {
-     * creates a new version history implementation for the given session and
-     * internal version history
-     *
+     * creates a new version history node.
+     * @param itemMgr
+     * @param id
+     * @param state
+     * @param definition
+     * @param listeners
-    protected VersionHistoryImpl(Session session, InternalVersionHistory history)
-            throws RepositoryException {
-        super((NodeImpl) session.getNodeByUUID(history.getUUID()));
+    protected VersionHistoryImpl(ItemManager itemMgr, SessionImpl session, NodeId id,
+                              NodeState state, NodeDef definition,
+                              ItemLifeCycleListener[] listeners,
+                              InternalVersionHistory history) throws RepositoryException {
+        super(itemMgr, session, id, state, definition, listeners);
-        return new VersionImpl(unwrap().getSession(), history.getRootVersion());
+        return (Version) session.getNodeByUUID(history.getRootVersion().getId());
-        return new VersionIteratorImpl(unwrap().getSession(), history.getRootVersion());
+        return new VersionIteratorImpl(session, history.getRootVersion());
-            QName name = QName.fromJCRName(versionName, ((SessionImpl) unwrap().getSession()).getNamespaceResolver());
+            QName name = QName.fromJCRName(versionName, session.getNamespaceResolver());
-            return v == null ? null : new VersionImpl(unwrap().getSession(), v);
+            return v == null ? null : (Version) session.getNodeByUUID(v.getId());
-        return v == null ? null : new VersionImpl(unwrap().getSession(), v);
+        return v == null ? null : (Version) session.getNodeByUUID(v.getId());
-    public void addVersionLabel(String versionName, String label) throws VersionException, RepositoryException {
-        InternalVersion v;
+    public void addVersionLabel(String version, String label) throws VersionException, RepositoryException {
+        addVersionLabel(version, label, false);
+    }
+
+    /**
+     * @see VersionHistory#addVersionLabel(String, String, boolean)
+     */
+    public void addVersionLabel(String version, String label, boolean move)
+            throws VersionException, RepositoryException {
-            QName name = QName.fromJCRName(versionName, ((SessionImpl) unwrap().getSession()).getNamespaceResolver());
-            v = history.getVersion(name);
+            QName name = QName.fromJCRName(version, session.getNamespaceResolver());
+            InternalVersion v = history.getVersion(name);
+            if (v==null) {
+                throw new VersionException("Version " + version + " does not exist in this version history.");
+            }
+            history.addVersionLabel(v, label, move);
-        if (v == null) {
-            throw new VersionException("specified version does not exist");
-        }
-        history.addVersionLabel(v, label, false);
-    public void removeVersionLabel(String label) throws VersionException, RepositoryException {
+    public void removeVersionLabel(String label) throws RepositoryException {
+
-        return history.getUUID();
+        return history.getId();
-            return ((VersionHistoryImpl) otherItem).history.getUUID().equals(history.getUUID());
+            return ((VersionHistoryImpl) otherItem).history.getId().equals(history.getId());
