JCR-2710 Add support for large number of users in a group
UserImporter copes with node structure for group membership now

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@987181 13f79535-47bb-0310-9956-ffa450edef68

-    private final List<ProtectedNodeImporter> pnImporters = new ArrayList();
-    /**
-     * Available importers for protected properties.
-     */
-    private final List<ProtectedPropertyImporter> ppImporters = new ArrayList();
+    private final List<ProtectedItemImporter> pItemImporters = new ArrayList();
-            List<ProtectedNodeImporter> ln = config.getProtectedNodeImporters();
-            for (ProtectedNodeImporter pni : ln) {
-                if (pni.init(session, session, false, uuidBehavior, refTracker)) {
-                    pnImporters.add(pni);
-                }
-            }
-            List<ProtectedPropertyImporter> lp = config.getProtectedPropertyImporters();
-            for (ProtectedPropertyImporter ppi : lp) {
-                if (ppi.init(session, session, false, uuidBehavior, refTracker)) {
-                    ppImporters.add(ppi);
+            List<ProtectedItemImporter> iList = (List<ProtectedItemImporter>) config.getProtectedItemImporters();
+            for (ProtectedItemImporter importer : iList) {
+                if (importer.init(session, session, false, uuidBehavior, refTracker)) {
+                    pItemImporters.add(importer);
-        if (pnImporters.isEmpty()) {
-            ProtectedNodeImporter def = new DefaultProtectedNodeImporter();
+        if (pItemImporters.isEmpty()) {
+            ProtectedItemImporter def = new DefaultProtectedItemImporter();
-                pnImporters.add(def);
-            }
-        }
-        if (ppImporters.isEmpty()) {
-            DefaultProtectedPropertyImporter def = new DefaultProtectedPropertyImporter();
-            if (def.init(session, session, false, uuidBehavior, refTracker)) {
-                ppImporters.add(def);
+                pItemImporters.add(def);
-            // Notify the ProtectedNodeImporter about the start of a item
-            // tree that is protected by this parent. If it potentially is
-            // able to deal with it, notify it about the child node.
-            for (ProtectedNodeImporter pni : pnImporters) {
-                if (pni.start(parent)) {
-                    log.debug("Protected node -> delegated to ProtectedNodeImporter");
-                    pnImporter = pni;
-                    pnImporter.startChildInfo(nodeInfo, propInfos);
-                    break;
-                } /* else: p-i-Importer isn't able to deal with the protected tree.
+            if (pnImporter != null) {
+                // pnImporter was already started (current nodeInfo is a sibling)
+                // notify it about this child node.
+                pnImporter.startChildInfo(nodeInfo, propInfos);
+            } else {
+                // no importer defined yet:
+                // test if there is a ProtectedNodeImporter among the configured
+                // importers that can handle this.
+                // if there is one, notify the ProtectedNodeImporter about the
+                // start of a item tree that is protected by this parent. If it
+                // potentially is able to deal with it, notify it about the child node.
+                for (ProtectedItemImporter pni : pItemImporters) {
+                    if (pni instanceof ProtectedNodeImporter && ((ProtectedNodeImporter) pni).start(parent)) {
+                        log.debug("Protected node -> delegated to ProtectedNodeImporter");
+                        pnImporter = (ProtectedNodeImporter) pni;
+                        pnImporter.startChildInfo(nodeInfo, propInfos);
+                        break;
+                    } /* else: p-i-Importer isn't able to deal with the protected tree.
+                }
-                for (ProtectedPropertyImporter ppi : ppImporters) {
-                    if (ppi.handlePropInfo(node, pi, def)) {
+                for (ProtectedItemImporter ppi : pItemImporters) {
+                    if (ppi instanceof ProtectedPropertyImporter && ((ProtectedPropertyImporter) ppi).handlePropInfo(node, pi, def)) {
-        for (ProtectedPropertyImporter ppi : ppImporters) {
+        for (ProtectedItemImporter ppi : pItemImporters) {
-        for (ProtectedNodeImporter pni : pnImporters) {
-            pni.processReferences();
-        }
