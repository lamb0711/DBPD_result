Initial checkin of QueryManager with support for JCRQL (search implementation is not complete, some features are missing: searching for distinct same name sibling, sorting not yet implemented, indexing contains potential for optimizing)

Changed observation to support SynchronousEventListeners. The search registers itself as synchronous event listener. Also changed access checking on events sent out, because checking access on removed nodes need to be performed before they actually get removed.

Extended config.xml, which allows now to specify an index location for the QueryManager.

Added jar files needed for search.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47399 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.ItemStateException;
-import org.apache.jackrabbit.core.state.PersistenceManager;
-import org.apache.jackrabbit.core.state.PersistentItemStateManager;
-import org.apache.jackrabbit.core.state.ReferenceManager;
+import org.apache.jackrabbit.core.state.*;
+    // map of search managers
+    private final HashMap wspSearchMgrs = new HashMap();
+
-	    Session s = getSystemSession(((WorkspaceDef) iter.next()).getName());
+	    String wspName = ((WorkspaceDef) iter.next()).getName();
+	    Session s = getSystemSession(wspName);
+
+	    // register SearchManager as EventListener
+	    SearchManager searchMgr = getSearchManager(wspName);
+
+	    if (searchMgr != null) {
+		s.getWorkspace().getObservationManager().addEventListener(searchMgr,
+			EventType.CHILD_NODE_ADDED | EventType.CHILD_NODE_REMOVED |
+			EventType.PROPERTY_ADDED | EventType.PROPERTY_REMOVED |
+			EventType.PROPERTY_CHANGED,
+			"/", true, null, null, false);
+	    }
+    /**
+     * Returns the {@link SearchManager} for the workspace with name
+     * <code>workspaceName</code>.
+     *
+     * @param workspaceName the name of the workspace.
+     * @return the <code>SearchManager</code> for the workspace, or
+     *         <code>null</code> if the workspace does not have a
+     *         <code>SearchManager</code> configured.
+     *
+     * @throws NoSuchWorkspaceException if there is no workspace with name
+     *                                  <code>workspaceName</code>.
+     * @throws RepositoryException      if an error occurs while opening the
+     *                                  search index.
+     */
+    synchronized SearchManager getSearchManager(String workspaceName)
+	    throws NoSuchWorkspaceException, RepositoryException {
+	SearchManager searchMgr
+		= (SearchManager) wspSearchMgrs.get(workspaceName);
+	if (searchMgr == null) {
+	    try {
+		StableWorkspaceDef wspDef = (StableWorkspaceDef)wspDefs.get(workspaceName);
+                if (wspDef.getSearchIndexPath() == null) {
+		    // no search index location configured
+		    return null;
+		}
+		ItemStateProvider stateProvider = getWorkspaceStateManager(workspaceName);
+		SystemSession s = getSystemSession(workspaceName);
+		searchMgr = new SearchManager(stateProvider, s.hierMgr, s, wspDef.getSearchIndexPath());
+	    } catch (IOException e) {
+		throw new RepositoryException("Exception opening search index.", e);
+	    }
+	    wspSearchMgrs.put(workspaceName, searchMgr);
+	}
+	return searchMgr;
+    }
+
+
+	// shutdown search managers
+	for (Iterator it = wspSearchMgrs.values().iterator(); it.hasNext(); ) {
+	    SearchManager searchMgr = (SearchManager)it.next();
+	    searchMgr.close();
+	}
