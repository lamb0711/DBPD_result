JCR-623 - Clustering
+ Transmit namespace registrations
+ Transmit nodetype registrations


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@482707 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.nodetype.NodeTypeDef;
+import org.apache.jackrabbit.core.nodetype.InvalidNodeTypeDefException;
+import java.util.Collection;
-public class ClusterNode implements Runnable, UpdateEventChannel  {
+public class ClusterNode implements Runnable, UpdateEventChannel,
+        NamespaceEventChannel, NodeTypeEventChannel  {
+     * Namespace listener.
+     */
+    private NamespaceEventListener namespaceListener;
+
+    /**
+     * Node type listener.
+     */
+    private NodeTypeEventListener nodeTypeListener;
+
+    /**
-     * Create an {@link UpdateEventChannel} for versioning operations.
-     *
-     * @return update event channel
-     */
-    public UpdateEventChannel createUpdateChannel() {
-        return this;
-    }
-
-    /**
+    //-----------------------------------------------< NamespaceEventListener >
+
+    /**
+     * {@inheritDoc}
+     */
+    public void remapped(String oldPrefix, String newPrefix, String uri) {
+        try {
+            journal.begin(null);
+            journal.log(oldPrefix, newPrefix, uri);
+            journal.prepare();
+            journal.commit();
+        } catch (JournalException e) {
+            String msg = "Unable to create log entry: " + e.getMessage();
+            log.error(msg);
+        } catch (Throwable e) {
+            String msg = "Unexpected error while creating log entry.";
+            log.error(msg, e);
+        }
+    }
+
+    public void setListener(NamespaceEventListener listener) {
+        namespaceListener = listener;
+    }
+
+    //------------------------------------------------< NodeTypeEventListener >
+
+    /**
+     * {@inheritDoc}
+     */
+    public void registered(Collection ntDefs) {
+        try {
+            journal.begin(null);
+            journal.log(ntDefs);
+            journal.prepare();
+            journal.commit();
+        } catch (JournalException e) {
+            String msg = "Unable to create log entry: " + e.getMessage();
+            log.error(msg);
+        } catch (Throwable e) {
+            String msg = "Unexpected error while creating log entry.";
+            log.error(msg, e);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public void setListener(NodeTypeEventListener listener) {
+        nodeTypeListener = listener;
+    }
+
+
-            //todo should be aggregated
-            //todo should be aggregated
-                    String msg = "Error making lock listener for workspace " +
+                    String msg = "Unable to make lock listener for workspace " +
-                    String msg = "Lock listener unavailable for workspace: " + workspace;
+                    String msg = "Lock channel unavailable for workspace: " + workspace;
-                String msg = "Unable to deliver unlock event: " + e.getMessage();
+                String msg = "Unable to deliver lock event: " + e.getMessage();
+                log.error(msg);
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void process(String oldPrefix, String newPrefix, String uri) {
+            if (namespaceListener == null) {
+                String msg = "Namespace listener unavailable.";
+                log.error(msg);
+                return;
+            }
+            try {
+                namespaceListener.externalRemap(oldPrefix, newPrefix, uri);
+            } catch (RepositoryException e) {
+                String msg = "Unable to deliver namespace operation: " + e.getMessage();
+                log.error(msg);
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void process(Collection ntDefs) {
+            if (nodeTypeListener == null) {
+                String msg = "NodeType listener unavailable.";
+                log.error(msg);
+                return;
+            }
+            try {
+                nodeTypeListener.externalRegistered(ntDefs);
+            } catch (InvalidNodeTypeDefException e) {
+                String msg = "Unable to deliver node type operation: " + e.getMessage();
+                log.error(msg);
+            } catch (RepositoryException e) {
+                String msg = "Unable to deliver node type operation: " + e.getMessage();
+                    return;
