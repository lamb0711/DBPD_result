JCR-257: Use separate index for jcr:system tree

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@357961 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.AbstractNamespaceResolver;
+import org.apache.jackrabbit.name.NamespaceResolver;
+import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+     * Namespace resolver that is based on the namespace registry itself.
+     */
+    private final NamespaceResolver nsResolver;
+
+    /**
+     * Path that will be excluded from indexing.
+     */
+    private Path excludePath;
+
+    /**
-     * @param session the system session.
-     * @param config the search configuration.
-     * @param ntReg the node type registry.
-     * @param itemMgr the shared item state manager.
-     * @throws RepositoryException
+     *
+     * @param config           the search configuration.
+     * @param nsReg            the namespace registry.
+     * @param ntReg            the node type registry.
+     * @param itemMgr          the shared item state manager.
+     * @param rootNodeUUID     the uuid of the root node.
+     * @param parentMgr        the parent search manager or <code>null</code> if
+     *                         there is no parent search manager.
+     * @param excludedNodeUUID uuid of the node that should be excluded from
+     *                         indexing. Any descendant of that node will also
+     *                         be excluded from indexing.
+     * @throws RepositoryException if the search manager cannot be initialized
-    public SearchManager(SessionImpl session,
-                         SearchConfig config,
+    public SearchManager(SearchConfig config,
+                         final NamespaceRegistry nsReg,
-                         ItemStateManager itemMgr) throws RepositoryException {
+                         ItemStateManager itemMgr,
+                         String rootNodeUUID,
+                         SearchManager parentMgr,
+                         String excludedNodeUUID) throws RepositoryException {
+        this.nsResolver = new AbstractNamespaceResolver() {
+            public String getURI(String prefix) throws NamespaceException {
+                try {
+                    return nsReg.getURI(prefix);
+                } catch (RepositoryException e) {
+                    throw new NamespaceException(e.getMessage());
+                }
+            }
+
+            public String getPrefix(String uri) throws NamespaceException {
+                try {
+                    return nsReg.getPrefix(uri);
+                } catch (RepositoryException e) {
+                    throw new NamespaceException(e.getMessage());
+                }
+            }
+        };
-        NamespaceRegistry nsReg = session.getWorkspace().getNamespaceRegistry();
+        QueryHandler parentHandler = null;
+        if (parentMgr != null) {
+            parentHandler = parentMgr.handler;
+        }
+
+        if (excludedNodeUUID != null) {
+            HierarchyManagerImpl hmgr = new HierarchyManagerImpl(rootNodeUUID, itemMgr, nsResolver);
+            excludePath = hmgr.getPath(new NodeId(excludedNodeUUID));
+        }
+
-            NodeId rootId = (NodeId) session.getHierarchyManager().resolvePath(Path.ROOT);
-                    = new QueryHandlerContext(fs, itemMgr, rootId.getUUID(), ntReg);
+                    = new QueryHandlerContext(fs, itemMgr, rootNodeUUID, ntReg,
+                            parentHandler, excludedNodeUUID);
+        String exclude = "";
+        if (excludePath != null) {
+            try {
+                exclude = excludePath.toJCRPath(nsResolver);
+            } catch (NoPrefixDeclaredException e) {
+                log.error("Error filtering events.", e);
+            }
+        }
+
+            try {
+                if (excludePath != null && e.getPath().startsWith(exclude)) {
+                    continue;
+                }
+            } catch (RepositoryException ex) {
+                log.error("Error filtering events.", ex);
+            }
