JCR-618 Replace WeakIdentityCollection in StateChangeDispacher


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@470747 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.util.WeakIdentityCollection;
-import org.apache.jackrabbit.name.QName;
+import EDU.oswego.cs.dl.util.concurrent.CopyOnWriteArrayList;
+import org.apache.jackrabbit.name.QName;
+import java.util.Iterator;
-    private final transient Collection listeners = new WeakIdentityCollection(5);
+    private final Collection listeners = new CopyOnWriteArrayList();
-    private final transient Collection nsListeners = new WeakIdentityCollection(5);
+    private final transient Collection nsListeners = new CopyOnWriteArrayList();
-        synchronized (listeners) {
-            assert (!listeners.contains(listener));
-            listeners.add(listener);
-        }
+        assert (!listeners.contains(listener));
+        listeners.add(listener);
+
-            synchronized (nsListeners) {
-                assert (!nsListeners.contains(listener));
-                nsListeners.add(listener);
-            }
+            assert (!nsListeners.contains(listener));
+            nsListeners.add(listener);
-            synchronized (nsListeners) {
-                nsListeners.remove(listener);
-            }
+            nsListeners.remove(listener);
-        synchronized (listeners) {
-            listeners.remove(listener);
-        }
+        listeners.remove(listener);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateCreated(created);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateCreated(created);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateModified(modified);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateModified(modified);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDestroyed(destroyed);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateDestroyed(destroyed);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDiscarded(discarded);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateDiscarded(discarded);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodeAdded(state, name, index, id);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodeAdded(state, name, index, id);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodesReplaced(state);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodesReplaced(state);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodeModified(state);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodeModified(state);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodeRemoved(state, name, index, id);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodeRemoved(state, name, index, id);
