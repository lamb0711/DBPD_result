minor change: changed access modifiers on selecr methods to improve reusability/extensibility

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@234479 13f79535-47bb-0310-9956-ffa450edef68

-    RepositoryConfig getConfig() {
-        // check sanity of this instance
-        sanityCheck();
-
-        return repConfig;
-    }
-
-    synchronized void createWorkspace(String workspaceName) throws RepositoryException {
+    protected synchronized void createWorkspace(String workspaceName)
+            throws RepositoryException {
-            throw new RepositoryException("workspace '" + workspaceName + "' already exists.");
+            throw new RepositoryException("workspace '"
+                    + workspaceName + "' already exists.");
-     * Creates a new session on the specified workspace for the
-     * authenticated subject of the given login context.
+     * Creates a new repository session on the specified workspace for the
+     * <b><i>authenticated</i></b> subject of the given login context and
+     * adds it to the <i>active</i> sessions.
+     * <p/>
+     * Calls {@link #createSessionInstance(AuthContext, WorkspaceConfig)} to
+     * create the actual <code>SessionImpl</code> instance.
-     * @param loginContext  login context with authenticated subject
+    * @param loginContext  login context with authenticated subject
-    SessionImpl createSession(AuthContext loginContext,
+    protected final SessionImpl createSession(AuthContext loginContext,
-     * Creates a new session on the specified workspace for the given
-     * authenticated subject.
+     * Creates a new repository session on the specified workspace for the given
+     * <b><i>authenticated</i></b> subject and adds it to the <i>active</i>
+     * sessions.
+     * <p/>
+     * Calls {@link #createSessionInstance(Subject, WorkspaceConfig)} to
+     * create the actual <code>SessionImpl</code> instance.
-    SessionImpl createSession(Subject subject, String workspaceName)
+    protected final SessionImpl createSession(Subject subject,
+                                              String workspaceName)
-        /**
-         * todo further cleanup tasks, free resources, etc.
-         */
+     * Returns the configuration of this repository.
+     * @return repository configuration
+     */
+    public RepositoryConfig getConfig() {
+        return repConfig;
+    }
+
+    /**
-            LoginModuleConfig lmc = this.repConfig.getLoginModuleConfig();
+            LoginModuleConfig lmc = repConfig.getLoginModuleConfig();
-    class WorkspaceInfo {
+    protected class WorkspaceInfo {
-        WorkspaceConfig getConfig() {
+        public WorkspaceConfig getConfig() {
-         * @throws RepositoryException if the workspace item state provider could not be created
+         * @throws RepositoryException if the workspace item state provider
+         *                             could not be created
-                    log.error("error while closing persistence manager of workspace " + config.getName(), e);
+                    log.error("error while closing persistence manager of workspace "
+                            + config.getName(), e);
-                log.error("error while closing filesystem of workspace " + config.getName(), e);
+                log.error("error while closing filesystem of workspace "
+                        + config.getName(), e);
