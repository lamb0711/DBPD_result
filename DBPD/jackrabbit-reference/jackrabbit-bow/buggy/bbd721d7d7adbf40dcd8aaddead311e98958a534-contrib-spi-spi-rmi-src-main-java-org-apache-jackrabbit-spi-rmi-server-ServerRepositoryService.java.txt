JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ItemInfo;
-            return createSerializableNodeId(
+            return idFactory.createSerializableNodeId(
-            if (nInfo instanceof Serializable) {
-                return nInfo;
+            return NodeInfoImpl.createSerializableNodeInfo(nInfo, idFactory);
+        } catch (RepositoryException e) {
+            throw getRepositoryException(e);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public RemoteIterator getItemInfos(RemoteSessionInfo sessionInfo, NodeId nodeId)
+            throws RepositoryException, RemoteException {
+        try {
+            Iterator it = service.getItemInfos(getSessionInfo(sessionInfo), nodeId);
+            if (it instanceof RemoteIterator) {
+                return (RemoteIterator) it;
-                PropertyId[] refs = nInfo.getReferences();
-                PropertyId[] serRefs = new PropertyId[refs.length];
-                for (int i = 0; i < serRefs.length; i++) {
-                    serRefs[i] = createSerializablePropertyId(refs[i]);
+                List serializables = new ArrayList();
+                while (it.hasNext()) {
+                    ItemInfo info = (ItemInfo) it.next();
+                    if (info instanceof Serializable) {
+                        serializables.add(info);
+                    } else {
+                        if (info.denotesNode()) {
+                            serializables.add(NodeInfoImpl.createSerializableNodeInfo((NodeInfo) info, idFactory));
+                        } else {
+                            serializables.add(PropertyInfoImpl.createSerializablePropertyInfo((PropertyInfo) info, idFactory));
+                        }
+                    }
-                NodeId parentId = null;
-                if (nInfo.getParentId() != null) {
-                    parentId = createSerializableNodeId(nInfo.getParentId());
-                }
-                return new NodeInfoImpl(parentId, nInfo.getQName(),
-                        nInfo.getPath(),
-                        createSerializableNodeId(nInfo.getId()),
-                        nInfo.getIndex(), nInfo.getNodetype(),
-                        nInfo.getMixins(), serRefs,
-                        new IteratorHelper(nInfo.getPropertyIds()) {
-                            public ItemId nextId() {
-                                return createSerializablePropertyId(
-                                        (PropertyId) super.nextId());
-                            }
-                        });
+                return new ServerIterator(serializables.iterator(), DEFAULT_BUFFER_SIZE);
-            Iterator childInfos = service.getChildInfos(
-                    getSessionInfo(sessionInfo), parentId);
+            Iterator childInfos = service.getChildInfos(getSessionInfo(sessionInfo), parentId);
-            PropertyInfo propInfo = service.getPropertyInfo(
-                    getSessionInfo(sessionInfo), propertyId);
-            return new PropertyInfoImpl(
-                    createSerializableNodeId(propInfo.getParentId()),
-                    propInfo.getQName(), propInfo.getPath(),
-                    createSerializablePropertyId(propInfo.getId()),
-                    propInfo.getType(), propInfo.isMultiValued(),
-                    propInfo.getValues());
+            PropertyInfo propInfo = service.getPropertyInfo(getSessionInfo(sessionInfo), propertyId);
+            return PropertyInfoImpl.createSerializablePropertyInfo(propInfo, idFactory);
-                        createSerializableNodeId(lockInfo.getNodeId()));
+                        idFactory.createSerializableNodeId(lockInfo.getNodeId()));
-                        createSerializableNodeId(lockInfo.getNodeId()));
+                        idFactory.createSerializableNodeId(lockInfo.getNodeId()));
-                        id = createSerializableNodeId((NodeId) e.getItemId());
+                        id = idFactory.createSerializableNodeId((NodeId) e.getItemId());
-                        id = createSerializablePropertyId((PropertyId) e.getItemId());
+                        id = idFactory.createSerializablePropertyId((PropertyId) e.getItemId());
-                            createSerializableNodeId(e.getParentId()),
+                            idFactory.createSerializableNodeId(e.getParentId()),
-     * Checks if the passed <code>nodeId</code> is serializable and if it is not
-     * creates a serializable version for the given <code>nodeId</code>.
-     *
-     * @param nodeId the node id to check.
-     * @return a serializable version of <code>nodeId</code> or the passed
-     *         nodeId itself it is already serializable.
-     */
-    private NodeId createSerializableNodeId(NodeId nodeId) {
-        if (nodeId instanceof Serializable) {
-            return nodeId;
-        } else {
-            return idFactory.createNodeId(nodeId.getUniqueID(), nodeId.getPath());
-        }
-    }
-
-    /**
-     * Checks if the passed <code>propId</code> is serializable and if it is not
-     * creates a serializable version for the given <code>propId</code>.
-     *
-     * @param propId the property id to check.
-     * @return a serializable version of <code>propId</code> or the passed
-     *         propId itself it is already serializable.
-     */
-    private PropertyId createSerializablePropertyId(PropertyId propId) {
-        if (propId instanceof Serializable) {
-            return propId;
-        } else {
-            return idFactory.createPropertyId(
-                    createSerializableNodeId(propId.getParentId()),
-                    propId.getQName());
-        }
-    }
-
-    /**
