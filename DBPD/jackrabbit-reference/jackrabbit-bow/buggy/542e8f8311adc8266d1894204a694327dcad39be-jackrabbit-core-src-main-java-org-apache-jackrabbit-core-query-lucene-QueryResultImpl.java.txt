JCR-2010: Retrieve row path via hierarchy manager instead of node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@758193 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeImpl;
-import javax.jcr.Node;
+     * @throws RepositoryException if an error occurs while reading from the
+     *                             repository.
-        return getNodeIterator();
+        return new NodeIteratorImpl(itemMgr, getScoreNodes(), 0);
-        return new RowIteratorImpl(getNodeIterator(), selectProps,
-                queryImpl.getSelectorNames(), itemMgr, session,
+        return new RowIteratorImpl(getScoreNodes(), selectProps,
+                queryImpl.getSelectorNames(), itemMgr,
+                index.getContext().getHierarchyManager(), session,
-     * Creates a node iterator over the result nodes.
+     * Creates a {@link ScoreNodeIterator} over the query result.
-     * @return a node iterator over the result nodes.
+     * @return a {@link ScoreNodeIterator} over the query result.
-    private ScoreNodeIterator getNodeIterator() {
+    private ScoreNodeIterator getScoreNodes() {
-            return new DocOrderNodeIteratorImpl(itemMgr, resultNodes, 0);
+            return new DocOrderScoreNodeIterator(itemMgr, resultNodes, 0);
-            return new LazyScoreNodeIterator(0);
+            return new LazyScoreNodeIteratorImpl();
+     *
+     * @return the total number of hits.
-    private final class LazyScoreNodeIterator implements ScoreNodeIterator {
+    private final class LazyScoreNodeIteratorImpl implements ScoreNodeIterator {
-        private NodeImpl next;
+        private ScoreNode[] next;
-        private final int selectorIndex;
-
-        private LazyScoreNodeIterator(int selectorIndex) {
-            this.selectorIndex = selectorIndex;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public float getScore() {
-            initialize();
-            if (!hasNext()) {
-                throw new NoSuchElementException();
-            }
-            return ((ScoreNode[]) resultNodes.get(position))[selectorIndex].getScore();
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public ScoreNode[] getScoreNodes() {
-            initialize();
-            if (!hasNext()) {
-                throw new NoSuchElementException();
-            }
-            return (ScoreNode[]) resultNodes.get(position);
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public NodeImpl nextNodeImpl() {
+        public ScoreNode[] nextScoreNodes() {
-            NodeImpl n = next;
+            ScoreNode[] sn = next;
-            return n;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        public Node nextNode() {
-            return nextNodeImpl();
+            return sn;
-            return nextNodeImpl();
+            return nextScoreNodes();
-                ScoreNode[] sn = (ScoreNode[]) resultNodes.get(nextPos);
-                try {
-                    next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
-                } catch (RepositoryException e) {
-                    log.warn("Exception retrieving Node with UUID: "
-                            + sn[selectorIndex].getNodeId() + ": " + e.toString());
-                    // remove score node and try next
-                    resultNodes.remove(nextPos);
-                    invalid++;
-                }
+                next = (ScoreNode[]) resultNodes.get(nextPos);
