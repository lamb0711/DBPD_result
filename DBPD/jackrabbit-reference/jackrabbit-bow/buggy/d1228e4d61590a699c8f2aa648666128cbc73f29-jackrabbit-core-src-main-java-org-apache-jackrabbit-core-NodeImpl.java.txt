JCR-1276: A Property and a Node Can Have the Same Name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605622 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.iterator.NodeIteratorAdapter;
+import org.apache.jackrabbit.commons.iterator.PropertyIteratorAdapter;
+import org.apache.jackrabbit.core.lock.LockManager;
+import org.apache.jackrabbit.core.nodetype.ItemDef;
-import org.apache.jackrabbit.core.nodetype.ItemDef;
-import org.apache.jackrabbit.core.version.LabelVersionSelector;
+import org.apache.jackrabbit.core.version.DateVersionSelector;
-import org.apache.jackrabbit.core.version.VersionSelector;
-import org.apache.jackrabbit.core.version.DateVersionSelector;
+import org.apache.jackrabbit.core.version.LabelVersionSelector;
-import org.apache.jackrabbit.core.lock.LockManager;
-import org.apache.jackrabbit.commons.iterator.NodeIteratorAdapter;
-import org.apache.jackrabbit.commons.iterator.PropertyIteratorAdapter;
+import org.apache.jackrabbit.core.version.VersionSelector;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.commons.name.PathBuilder;
+import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
-import org.apache.jackrabbit.spi.commons.name.PathBuilder;
-            Path p =
-                PathFactoryImpl.getInstance().create(getPrimaryPath(), session.getQPath(relPath), false)
-                .getCanonicalPath();
-            ItemId id = session.getHierarchyManager().resolvePath(p);
-            if (id == null) {
-                // path not found
-                return null;
-            }
-            if (!id.denotesNode()) {
-                return (PropertyId) id;
-            } else {
-                // not a property
-                return null;
-            }
+            Path p = PathFactoryImpl.getInstance().create(
+                    getPrimaryPath(), session.getQPath(relPath), true);
+            return session.getHierarchyManager().resolvePropertyPath(p);
-            ItemId id = session.getHierarchyManager().resolvePath(p);
-            if (id == null) {
-                // path not found
-                return null;
-            }
-            if (id.denotesNode()) {
-                return (NodeId) id;
-            } else {
-                // not a node
-                return null;
-            }
+            return session.getHierarchyManager().resolveNodePath(p);
-        // check for name collisions with existing child nodes
-        if (((NodeState) state).hasChildNodeEntry(name)) {
-            String msg = "there's already a child node with name " + name;
-            log.debug(msg);
-            throw new RepositoryException(msg);
-        }
-        if (thisState.hasPropertyName(nodeName)) {
-            // there's already a property with that name
-            throw new ItemExistsException(itemMgr.safeGetJCRPath(nodePath));
-        }
-        boolean hasPendingChanges = session.hasPendingChanges();
-
-        Property[] props = new Property[2];
-        props[0] = internalSetProperty(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(true));
-        props[1] = internalSetProperty(NameConstants.JCR_PREDECESSORS,
+        Property prop = internalSetProperty(NameConstants.JCR_ISCHECKEDOUT, InternalValue.create(true));
+        prop.save();
+        prop = internalSetProperty(NameConstants.JCR_PREDECESSORS,
-        if (hasPendingChanges) {
-            for (int i = 0; i < props.length; i++) {
-                props[i].save();
-            }
-        } else {
-            try {
-                session.save();
-            } catch (RepositoryException e) {
-                session.refresh(false);
-                throw e;
-            }
-        }
+        prop.save();
