JCR-820: Add support for query result highlighting
- initial version

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@523251 13f79535-47bb-0310-9956-ffa450edef68

-			// since lucene 2.0 setMaxBuffereDocs is equivalent to previous minMergeDocs attribute
-			indexWriter.setMaxBufferedDocs(minMergeDocs);
+            // since lucene 2.0 setMaxBuffereDocs is equivalent to previous minMergeDocs attribute
+            indexWriter.setMaxBufferedDocs(minMergeDocs);
-                Field.TermVector tv;
-                if (f.isTermVectorStored()) {
-                    tv = Field.TermVector.YES;
-                } else {
-                    tv = Field.TermVector.NO;
-                }
-                Field.Store stored;
-                if (f.isStored()) {
-                    stored = Field.Store.YES;
-                } else {
-                    stored = Field.Store.NO;
-                }
-                Field.Index indexed;
-                if (!f.isIndexed()) {
-                    indexed = Field.Index.NO;
-                } else if (f.isTokenized()) {
-                    indexed = Field.Index.TOKENIZED;
-                } else {
-                    indexed = Field.Index.UN_TOKENIZED;
-                }
+                Field.TermVector tv = getTermVectorParameter(f);
+                Field.Store stored = getStoreParameter(f);
+                Field.Index indexed = getIndexParameter(f);
+                    field.setOmitNorms(f.getOmitNorms());
-			// since lucene 2.0 setMaxBuffereDocs is equivalent to previous minMergeDocs attribute
-			indexWriter.setMaxBufferedDocs(minMergeDocs);
+            // since lucene 2.0 setMaxBuffereDocs is equivalent to previous minMergeDocs attribute
+            indexWriter.setMaxBufferedDocs(minMergeDocs);
+    //------------------------------< internal >--------------------------------
+
+    /**
+     * Returns the index parameter set on <code>f</code>.
+     *
+     * @param f a lucene field.
+     * @return the index parameter on <code>f</code>.
+     */
+    private Field.Index getIndexParameter(Field f) {
+        if (!f.isIndexed()) {
+            return Field.Index.NO;
+        } else if (f.isTokenized()) {
+            return Field.Index.TOKENIZED;
+        } else {
+            return Field.Index.UN_TOKENIZED;
+        }
+    }
+
+    /**
+     * Returns the store parameter set on <code>f</code>.
+     *
+     * @param f a lucene field.
+     * @return the store parameter on <code>f</code>.
+     */
+    private Field.Store getStoreParameter(Field f) {
+        if (f.isCompressed()) {
+            return Field.Store.COMPRESS;
+        } else if (f.isStored()) {
+            return Field.Store.YES;
+        } else {
+            return Field.Store.NO;
+        }
+    }
+
+    /**
+     * Returns the term vector parameter set on <code>f</code>.
+     *
+     * @param f a lucene field.
+     * @return the term vector parameter on <code>f</code>.
+     */
+    private Field.TermVector getTermVectorParameter(Field f) {
+        if (f.isStorePositionWithTermVector() && f.isStoreOffsetWithTermVector()) {
+            return Field.TermVector.WITH_POSITIONS_OFFSETS;
+        } else if (f.isStorePositionWithTermVector()) {
+            return Field.TermVector.WITH_POSITIONS;
+        } else if (f.isStoreOffsetWithTermVector()) {
+            return Field.TermVector.WITH_OFFSETS;
+        } else if (f.isTermVectorStored()) {
+            return Field.TermVector.YES;
+        } else {
+            return Field.TermVector.NO;
+        }
+    }
+
