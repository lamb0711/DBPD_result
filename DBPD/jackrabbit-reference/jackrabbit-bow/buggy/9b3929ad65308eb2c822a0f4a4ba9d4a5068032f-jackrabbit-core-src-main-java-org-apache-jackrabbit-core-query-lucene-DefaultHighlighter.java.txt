JCR-1717: Configure occurrence of property value in excerpt

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@684732 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+import java.util.Collections;
-            for (int ii = 0; ii < termoffsets.length; ii++) {
-                list.add(termoffsets[ii]);
-            }
+            list.addAll(Arrays.asList(termoffsets));
-            java.util.Arrays.sort(offsets, new TermVectorOffsetInfoSorter());
+            Arrays.sort(offsets, new TermVectorOffsetInfoSorter());
-                                    int surround)
-            throws IOException {
-        StringReader reader = new StringReader(text);
+                                    int surround) throws IOException {
-            StringBuffer excerpt = new StringBuffer(excerptStart);
-            excerpt.append(fragmentStart);
-            int min = excerpt.length();
-            char[] buf = new char[surround * 2];
-            int len = reader.read(buf);
-            excerpt.append(buf, 0, len);
-            if (len == buf.length) {
-                for (int i = excerpt.length() - 1; i > min; i--) {
-                    if (Character.isWhitespace(excerpt.charAt(i))) {
-                        excerpt.delete(i, excerpt.length());
-                        excerpt.append(" ...");
-                        break;
-                    }
-                }
-            }
-            excerpt.append(fragmentEnd).append(excerptEnd);
-            return excerpt.toString();
+            return createDefaultExcerpt(text, excerptStart, excerptEnd,
+                    fragmentStart, fragmentEnd, surround * 2);
-        FragmentInfo fi = new FragmentInfo(offsets[0], surround * 2);
-        for (int i = 1; i < lastOffset; i++) {
-            if (fi.add(offsets[i])) {
-                continue;
+        if (offsets[0].getEndOffset() <= text.length()) {
+            FragmentInfo fi = new FragmentInfo(offsets[0], surround * 2);
+            for (int i = 1; i < lastOffset; i++) {
+                if (offsets[i].getEndOffset() > text.length()) {
+                    break;
+                }
+                if (fi.add(offsets[i])) {
+                    continue;
+                }
+                fragmentInfoList.add(fi);
+                fi = new FragmentInfo(offsets[i], surround * 2);
-            fi = new FragmentInfo(offsets[i], surround * 2);
-        fragmentInfoList.add(fi);
+
+        if (fragmentInfoList.isEmpty()) {
+            // nothing to highlight
+            return createDefaultExcerpt(text, excerptStart, excerptEnd,
+                    fragmentStart, fragmentEnd, surround * 2);
+        }
-        java.util.Collections.sort(fragmentInfoList, new FragmentInfoScoreSorter());
+        Collections.sort(fragmentInfoList, new FragmentInfoScoreSorter());
-        java.util.Collections.sort(bestFragmentsList, new FragmentInfoPositionSorter());
+        Collections.sort(bestFragmentsList, new FragmentInfoPositionSorter());
+        StringReader reader = new StringReader(text);
-            fi = (FragmentInfo) bestFragmentsList.get(i);
+            FragmentInfo fi = (FragmentInfo) bestFragmentsList.get(i);
+    /**
+     * Creates a default excerpt with the given text.
+     *
+     * @param text the text.
+     * @param excerptStart the excerpt start.
+     * @param excerptEnd the excerpt end.
+     * @param fragmentStart the fragement start.
+     * @param fragmentEnd the fragment end.
+     * @param maxLength the maximum length of the fragment.
+     * @return a default excerpt.
+     * @throws IOException if an error occurs while reading from the text.
+     */
+    protected String createDefaultExcerpt(String text,
+                                          String excerptStart,
+                                          String excerptEnd,
+                                          String fragmentStart,
+                                          String fragmentEnd,
+                                          int maxLength) throws IOException {
+        StringReader reader = new StringReader(text);
+        StringBuffer excerpt = new StringBuffer(excerptStart);
+        excerpt.append(fragmentStart);
+        int min = excerpt.length();
+        char[] buf = new char[maxLength];
+        int len = reader.read(buf);
+        excerpt.append(buf, 0, len);
+        if (len == buf.length) {
+            for (int i = excerpt.length() - 1; i > min; i--) {
+                if (Character.isWhitespace(excerpt.charAt(i))) {
+                    excerpt.delete(i, excerpt.length());
+                    excerpt.append(" ...");
+                    break;
+                }
+            }
+        }
+        excerpt.append(fragmentEnd).append(excerptEnd);
+        return excerpt.toString();
+    }
+
