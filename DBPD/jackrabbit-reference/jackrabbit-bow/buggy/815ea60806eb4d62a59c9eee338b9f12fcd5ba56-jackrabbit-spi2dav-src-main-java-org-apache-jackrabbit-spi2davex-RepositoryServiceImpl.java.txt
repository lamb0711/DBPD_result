JCR-4066: spi2dav: use HttpClient4 based WebDAV API in remoting code

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1774468 13f79535-47bb-0310-9956-ffa450edef68

+import java.nio.charset.Charset;
+import java.util.Collections;
+
-import org.apache.commons.httpclient.HttpClient;
-import org.apache.commons.httpclient.HttpException;
-import org.apache.commons.httpclient.HttpMethod;
-import org.apache.commons.httpclient.methods.RequestEntity;
-import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
-import org.apache.commons.httpclient.methods.multipart.Part;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.entity.ContentType;
+import org.apache.http.entity.mime.FormBodyPart;
+import org.apache.http.entity.mime.MultipartEntityBuilder;
+import org.apache.http.message.BasicNameValuePair;
-import org.apache.jackrabbit.webdav.client.methods.PropFindMethod;
+import org.apache.jackrabbit.webdav.client.methods.HttpPropfind;
-            ValueLoader loader = new ValueLoader(getClient(sessionInfo));
+            ValueLoader loader = new ValueLoader(getClient(sessionInfo), getContext(sessionInfo));
-            GetMethod method = new GetMethod(uri + "." + depth + ".json");
+            HttpGet request = new HttpGet(uri + "." + depth + ".json");
+            HttpResponse response = null;
-                int statusCode = getClient(sessionInfo).executeMethod(method);
+                response = executeRequest(sessionInfo, request);
+                int statusCode = response.getStatusLine().getStatusCode();
-                    if (method.getResponseContentLength() == 0) {
+                    HttpEntity entity = response.getEntity();
+                    if (entity.getContentLength() == 0) {
-                    ps.parse(method.getResponseBodyAsStream(), method.getResponseCharSet());
+                    ps.parse(entity.getContent(), ContentType.get(entity).getCharset().name());
-                    throw ExceptionConverter.generate(new DavException(statusCode, "Unable to retrieve NodeInfo for " + uri), method);
+                    throw ExceptionConverter.generate(new DavException(statusCode, "Unable to retrieve NodeInfo for " + uri), request);
-            } catch (HttpException e) {
-                throw ExceptionConverter.generate(new DavException(method.getStatusCode(), "Unable to retrieve NodeInfo for " + uri));
-                method.releaseConnection();
+                request.releaseConnection();
-        PropFindMethod method = null;
+        HttpPropfind request = null;
-            method = new PropFindMethod(uri, LAZY_PROPERTY_NAME_SET, DavConstants.DEPTH_0);
-            getClient(sessionInfo).executeMethod(method);
-            method.checkSuccess();
+            request = new HttpPropfind(uri, LAZY_PROPERTY_NAME_SET, DavConstants.DEPTH_0);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length != 1) {
+            MultiStatusResponse[] mresponses = request.getResponseBodyAsMultiStatus(response).getResponses();
+            if (mresponses.length != 1) {
-            MultiStatusResponse response = responses[0];
-            DavPropertySet props = response.getProperties(DavServletResponse.SC_OK);
+            MultiStatusResponse mresponse = mresponses[0];
+            DavPropertySet props = mresponse.getProperties(DavServletResponse.SC_OK);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PostMethod method = null;
+        HttpPost request = null;
-            method = new PostMethod(getWorkspaceURI(sessionInfo));
+            request = new HttpPost(getWorkspaceURI(sessionInfo));
+            request.setHeader("Referer", request.getURI().toASCIIString());
+            addIfHeader(sessionInfo, request);
+
-
-            method.addParameter(PARAM_COPY, args.toString());
-            addIfHeader(sessionInfo, method);
-            getClient(sessionInfo).executeMethod(method);
-
-            method.checkSuccess();
+            List<BasicNameValuePair> nvps = Collections.singletonList(new BasicNameValuePair(PARAM_COPY, args.toString()));
+            HttpEntity entity = new UrlEncodedFormEntity(nvps, Charset.forName("UTF-8"));
+            request.setEntity(entity);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            throw ExceptionConverter.generate(e, method);
+            throw ExceptionConverter.generate(e, request);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-        PostMethod method = null;
+        HttpPost request = null;
-            method = new PostMethod(getWorkspaceURI(sessionInfo));
+            request = new HttpPost(getWorkspaceURI(sessionInfo));
+            request.setHeader("Referer", request.getURI().toASCIIString());
+            addIfHeader(sessionInfo, request);
-
-            method.addParameter(PARAM_CLONE, args.toString());
-            addIfHeader(sessionInfo, method);
-            getClient(sessionInfo).executeMethod(method);
-
-            method.checkSuccess();
+            List<BasicNameValuePair> nvps = Collections.singletonList(new BasicNameValuePair(PARAM_CLONE, args.toString()));
+            HttpEntity entity = new UrlEncodedFormEntity(nvps, Charset.forName("UTF-8"));
+            request.setEntity(entity);
+            HttpResponse response = executeRequest(sessionInfo, request);
+            request.checkSuccess(response);
-            throw ExceptionConverter.generate(e, method);
+            throw ExceptionConverter.generate(e, request);
-            if (method != null) {
-                method.releaseConnection();
+            if (request != null) {
+                request.releaseConnection();
-    private static void addIfHeader(SessionInfo sInfo, HttpMethod method) {
+    private static void addIfHeader(SessionInfo sInfo, HttpUriRequest request) {
-            initMethod(method, sInfo, true);
+            initMethod(request, sInfo, true);
-        private final List<Part> parts;
+        private final List<FormBodyPart> parts;
+        private final List<QValue> binaries;
-        private PostMethod method; // TODO: use PATCH request instead.
+        private HttpPost request; // TODO: use PATCH request instead.
-            parts = new ArrayList<Part>();
-            diff = new ArrayList<String>();
+            this.parts = new ArrayList<FormBodyPart>();
+            this.binaries = new ArrayList<QValue>();
+            this.diff = new ArrayList<String>();
+            request.setHeader("Referer", request.getURI().toASCIIString());
+
-            addIfHeader(sessionInfo, method);
+            addIfHeader(sessionInfo, request);
-            Part[] partArr = parts.toArray(new Part[parts.size()]);
-            RequestEntity entity = new MultipartRequestEntity(partArr, method.getParams());
-            method.setRequestEntity(entity);
-            HttpClient client = getClient(sessionInfo);
+            MultipartEntityBuilder b = MultipartEntityBuilder.create();
+            for (FormBodyPart p : parts) {
+                b.addPart(p.getName(), p.getBody());
+            }
+            request.setEntity(b.build());
+
+            org.apache.http.client.HttpClient client = getClient(sessionInfo);
-                client.executeMethod(method);
-                method.checkSuccess();
+                HttpResponse response = client.execute(request, getContext(sessionInfo));
+                request.checkSuccess(response);
-                throw ExceptionConverter.generate(e, method);
+                throw ExceptionConverter.generate(e, request);
-                method.releaseConnection();
+                request.releaseConnection();
-            method = null;
+            request = null;
-            for (Part part : parts) {
-                if (part instanceof BinaryPart) {
-                    ((BinaryPart) part).dispose();
+            for (QValue bin : binaries) {
+                if (bin instanceof ValueLoader.Target) {
+                    ((ValueLoader.Target) bin).reset();
-            return method == null;
+            return request == null;
-            if (method == null) {
+            if (request == null) {
-                method = new PostMethod(uri);
+                request = new HttpPost(uri);
-                    method.setRequestHeader(ifH.getHeaderName(), ifH.getHeaderValue());
+                    request.setHeader(ifH.getHeaderName(), ifH.getHeaderValue());
-            appendDiff(SYMBOL_ADD_NODE, jcrPath, ((JsonTree) contentTree).toJsonString(parts));
+            appendDiff(SYMBOL_ADD_NODE, jcrPath, ((JsonTree) contentTree).toJsonString(parts, binaries));
-                Utils.addPart(jcrPropPath, value, resolver, parts);
+                Utils.addPart(jcrPropPath, value, resolver, parts, binaries);
-                    Utils.addPart(jcrPropPath, values[i], resolver, parts);
+                    Utils.addPart(jcrPropPath, values[i], resolver, parts, binaries);
-        private final List<Part> parts = new ArrayList<Part>();
+        private final List<FormBodyPart> parts = new ArrayList<FormBodyPart>();
+        private final List<QValue> binaries = new ArrayList<QValue>();
-                Utils.addPart(jcrPropPath, value, getResolver(), parts);
+                Utils.addPart(jcrPropPath, value, getResolver(), parts, binaries);
-                    Utils.addPart(jcrPropPath, value, getResolver(), parts);
+                    Utils.addPart(jcrPropPath, value, getResolver(), parts, binaries);
-        String toJsonString(List<Part> batchParts) throws RepositoryException {
+        String toJsonString(List<FormBodyPart> batchParts, List<QValue> bins) throws RepositoryException {
+            bins.addAll(this.binaries);
+                bins.addAll(((JsonTree) child).getBinaries());
-        private List<Part> getParts() {
+        private List<FormBodyPart> getParts() {
-    }
+
+        private List<QValue> getBinaries() {
+            return binaries;
+        }
+}
