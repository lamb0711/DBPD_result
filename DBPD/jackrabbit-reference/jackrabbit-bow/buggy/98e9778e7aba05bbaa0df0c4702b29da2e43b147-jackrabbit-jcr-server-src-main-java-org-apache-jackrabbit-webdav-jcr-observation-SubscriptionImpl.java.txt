JCR-2542: spi2dav: EventFilters not respected

- spi.commons extension interface for Session extension
- noLocal flag support
- client sends session identifier (in Link header field) on write operations so that POLL can compute the flag
- SUBSCRIBE returns flags indicating extension features 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1203173 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.webdav.JcrRemotingConstants;
+import org.apache.jackrabbit.server.SessionProviderImpl;
+import org.apache.jackrabbit.spi.commons.SessionExtensions;
+import com.sun.org.apache.xalan.internal.xsltc.dom.ExtendedSAX;
+
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.Value;
+    private final Session session;
-        Session s = JcrDavSession.getRepositorySession(resource.getSession());
+        session = JcrDavSession.getRepositorySession(resource.getSession());
-            obsMgr = s.getWorkspace().getObservationManager();
+            obsMgr = session.getWorkspace().getObservationManager();
+    public boolean eventsProvideNodeTypeInformation() {
+        String t = session.getRepository().getDescriptor("org.apache.jackrabbit.spi.commons.AdditionalEventInfo");
+        return t == null ? false : Boolean.parseBoolean(t);
+    }
+
+    public boolean eventsProvideNoLocalFlag() {
+        return session instanceof SessionExtensions;
+    }
+
+
+        DomUtil.addChildElement(subscr, XML_EVENTSWITHTYPES, NAMESPACE,
+                Boolean.toString(eventsProvideNodeTypeInformation()));
+        DomUtil.addChildElement(subscr, XML_EVENTSWITHLOCALFLAG, NAMESPACE,
+                Boolean.toString(eventsProvideNoLocalFlag()));
+
+            // TODO: this appears to be unused now
+
+            boolean localFlagSet = false;
+
+
+                if (!localFlagSet) {
+                    // obtain remote session identifier
+                    localFlagSet = true;
+                    String forSessionId = (String) session
+                            .getAttribute(SessionProviderImpl.ATTRIBUTE_SESSION_ID);
+                    // calculate "local" flags
+                    if (forSessionId != null
+                            && event instanceof AdditionalEventInfo) {
+                        try {
+                            String eventforSessionId = (String) ((AdditionalEventInfo) event)
+                                    .getSessionAttribute(SessionProviderImpl.ATTRIBUTE_SESSION_ID);
+                            boolean isLocal = forSessionId
+                                    .equals(eventforSessionId);
+                            DomUtil.setAttribute(bundle, XML_EVENT_LOCAL,
+                                    NAMESPACE, Boolean.toString(isLocal));
+                        } catch (UnsupportedRepositoryOperationException ex) {
+                            // optional feature
+                        }
+                    }
+                }
+
+                // try to compute nodetype information
-                    DomUtil.addChildElement(eventElem, "primarynodetype", NAMESPACE,
-                            ((AdditionalEventInfo)event).getPrimaryNodeTypeName().toString());
-                    for (Name mixin : ((AdditionalEventInfo)event).getMixinTypeNames()) {
-                        DomUtil.addChildElement(eventElem, "mixinnodetype", NAMESPACE,
-                                mixin.toString());
+                    try {
+                        DomUtil.addChildElement(eventElem,
+                                XML_EVENTPRIMARNODETYPE, NAMESPACE,
+                                ((AdditionalEventInfo) event)
+                                        .getPrimaryNodeTypeName().toString());
+                        for (Name mixin : ((AdditionalEventInfo) event)
+                                .getMixinTypeNames()) {
+                            DomUtil.addChildElement(eventElem,
+                                    XML_EVENTPRIMARNODETYPE, NAMESPACE,
+                                    mixin.toString());
+                        }
+                    } catch (UnsupportedRepositoryOperationException ex) {
+                        // optional
