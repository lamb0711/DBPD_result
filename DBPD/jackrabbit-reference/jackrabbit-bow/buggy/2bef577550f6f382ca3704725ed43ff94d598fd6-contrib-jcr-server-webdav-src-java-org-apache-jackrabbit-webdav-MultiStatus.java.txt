JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Document;
-import org.jdom.Element;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.HashMap;
-public class MultiStatus implements DavConstants {
+public class MultiStatus implements DavConstants, XmlSerializable {
-    private ArrayList responses = new ArrayList();
+    /**
+     * Map collecting the responses for this multistatus, where every href must
+     * only occure one single time.
+     */
+    private HashMap responses = new HashMap();
+
+    /**
+     * A general response description at the multistatus top level is used to
+     * provide a general message describing the overarching nature of the response.
+     * If this value is available an application may use it instead of
+     * presenting the individual response descriptions contained within the
+     * responses.
+     */
-	responses.add(response);
+	responses.put(response.getHref(), response);
-	return (MultiStatusResponse[]) responses.toArray(new MultiStatusResponse[responses.size()]);
+	return (MultiStatusResponse[]) responses.values().toArray(new MultiStatusResponse[responses.size()]);
+     * @param document
-    public Document toXml() {
-	Element multistatus = new Element(XML_MULTISTATUS, NAMESPACE);
-        Iterator it = responses.iterator();
+    public Element toXml(Document document) {
+	Element multistatus = DomUtil.createElement(document, XML_MULTISTATUS, NAMESPACE);
+        Iterator it = responses.values().iterator();
-	    multistatus.addContent(((MultiStatusResponse)it.next()).toXml());
+	    multistatus.appendChild(((MultiStatusResponse)it.next()).toXml(document));
-            multistatus.addContent(new Element(XML_RESPONSEDESCRIPTION, NAMESPACE).setText(responseDescription));
+            Element respDesc = DomUtil.createElement(document, XML_RESPONSEDESCRIPTION, NAMESPACE, responseDescription);
+            multistatus.appendChild(respDesc);
-	return new Document(multistatus);
+	return multistatus;
-     * Build a <code>MultiStatus</code> from the specified xml document.
+     * Build a <code>MultiStatus</code> from the specified xml element.
-     * @param multistatusDocument
+     * @param multistatusElement
-    public static MultiStatus createFromXml(Document multistatusDocument) {
-        if (multistatusDocument == null) {
-	    throw new IllegalArgumentException("Cannot create a MultiStatus object from a null xml document.");
-	}
-
-	Element msElem = multistatusDocument.getRootElement();
-	if (!(XML_MULTISTATUS.equals(msElem.getName()) && NAMESPACE.equals(msElem.getNamespace()))) {
+    public static MultiStatus createFromXml(Element multistatusElement) {
+	if (!DomUtil.matches(multistatusElement, XML_MULTISTATUS, NAMESPACE)) {
-	List respList = msElem.getChildren(XML_RESPONSE, NAMESPACE);
-	Iterator it = respList.iterator();
+        ElementIterator it = DomUtil.getChildren(multistatusElement, XML_RESPONSE, NAMESPACE);
-            MultiStatusResponse response = MultiStatusResponse.createFromXml((Element)it.next());
+            Element respElem = it.nextElement();
+            MultiStatusResponse response = MultiStatusResponse.createFromXml(respElem);
-	multistatus.setResponseDescription(msElem.getChildText(XML_RESPONSEDESCRIPTION, NAMESPACE));
+	multistatus.setResponseDescription(DomUtil.getChildText(multistatusElement, XML_RESPONSEDESCRIPTION, NAMESPACE));
