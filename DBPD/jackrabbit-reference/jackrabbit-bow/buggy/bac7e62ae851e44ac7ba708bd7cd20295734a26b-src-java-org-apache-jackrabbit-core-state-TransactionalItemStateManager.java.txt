- Redesigned observation to also include workspace modifications
- Extended observation tests and moved them into the api.observation package

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155583 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.WorkspaceImpl;
+     * ThreadLocal that holds the ChangeLog while this item state manager
+     * is in commit().
+     */
+    private static ThreadLocal commitLog = new ThreadLocal() {
+        protected synchronized Object initialValue() {
+            return new CommitLog();
+        }
+    };
+
+    /**
-    public TransactionalItemStateManager(SharedItemStateManager sharedStateMgr) {
-        super(sharedStateMgr);
+    public TransactionalItemStateManager(SharedItemStateManager sharedStateMgr, WorkspaceImpl wspImpl) {
+        super(sharedStateMgr, wspImpl);
+                // set changeLog in ThreadLocal
+                ((CommitLog) commitLog.get()).setChanges(changeLog);
+                log.error(e);
+            } finally {
+                ((CommitLog) commitLog.get()).setChanges(null);
-     * If associated to a transaction, check our transactional
-     * change log first.
+     * If this state manager is committing changes, this method first checks
+     * the commitLog ThreadLocal. Else if associated to a transaction check
+     * the transactional change log. Fallback is always the call to the base
+     * class.
-        if (txLog != null) {
+        ChangeLog changeLog = ((CommitLog) commitLog.get()).getChanges();
+        if (changeLog != null) {
+            // check items in commit log
+            ItemState state = changeLog.get(id);
+            if (state != null) {
+                return state;
+            }
+        } else if (txLog != null) {
-     * If associated to a transaction, check our transactional
-     * change log first.
+     * If this state manager is committing changes, this method first checks
+     * the commitLog ThreadLocal. Else if associated to a transaction check
+     * the transactional change log. Fallback is always the call to the base
+     * class.
-        if (txLog != null) {
+        ChangeLog changeLog = ((CommitLog) commitLog.get()).getChanges();
+        if (changeLog != null) {
+            // check items in commit log
+            try {
+                ItemState state = changeLog.get(id);
+                if (state != null) {
+                    return true;
+                }
+            } catch (NoSuchItemStateException e) {
+                return false;
+            }
+        } else if (txLog != null) {
-     * If associated to a transaction, check our transactional
-     * change log first.
+     * If this state manager is committing changes, this method first
+     * checks the commitLog ThreadLocal. Else if associated to a transaction
+     * check the transactional change log. Fallback is always the call to
+     * the base class.
-        if (txLog != null) {
+        ChangeLog changeLog = ((CommitLog) commitLog.get()).getChanges();
+        if (changeLog != null) {
+            // check commit log
+            NodeReferences refs = changeLog.get(id);
+            if (refs != null) {
+                return refs;
+            }
+        } else if (txLog != null) {
+
+    //--------------------------< inner classes >-------------------------------
+
+    /**
+     * Helper class that serves as a container for a ChangeLog in a ThreadLocal.
+     * The <code>CommitLog</code> is associated with a <code>ChangeLog</code>
+     * while the <code>TransactionalItemStateManager</code> is in the commit
+     * method.
+     */
+    private static class CommitLog {
+
+        /** The changes that are about to be committed */
+        private ChangeLog changes;
+
+        /**
+         * Sets changes that are about to be committed.
+         * @param changes that are about to be committed, or <code>null</code>
+         * if changes have been committed and the commit log should be reset.
+         */
+        private void setChanges(ChangeLog changes) {
+            this.changes = changes;
+        }
+
+        /**
+         * The changes that are about to be committed, or <code>null</code> if
+         * the <code>TransactionalItemStateManager</code> is currently not
+         * committing any changes.
+         * @return the changes about to be committed.
+         */
+        private ChangeLog getChanges() {
+            return changes;
+        }
+    }
