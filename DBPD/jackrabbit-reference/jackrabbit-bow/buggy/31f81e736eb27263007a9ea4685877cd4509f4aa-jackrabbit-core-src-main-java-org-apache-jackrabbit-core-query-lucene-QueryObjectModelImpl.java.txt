JCR-2076: JSR 283: Joins

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@768954 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.lucene.constraint.ConstraintBuilder;
+import org.apache.jackrabbit.core.query.lucene.constraint.Constraint;
-import org.apache.jackrabbit.spi.commons.query.qom.SelectorImpl;
-import org.apache.lucene.search.Query;
-    /**
-     * {@inheritDoc}
-     */ 
-    public Name[] getSelectorNames() {
-        SelectorImpl[] selectors = qomTree.getSource().getSelectors();
-        Name[] names = new Name[selectors.length];
-        for (int i = 0; i < names.length; i++) {
-            names[i] = selectors[i].getSelectorQName();
-        }
-        return names;
-    }
-
-     * Executes this query and returns a <code>{@link javax.jcr.query.QueryResult}</code>.
+     * Executes this query and returns a <code>{@link QueryResult}</code>.
-        Query query = JQOM2LuceneQueryBuilder.createQuery(qomTree, session,
-                index.getContext().getItemStateManager(),
+
+        LuceneQueryFactory factory = new LuceneQueryFactoryImpl(session,
+                index.getSortComparatorSource(),
+                index.getContext().getHierarchyManager(),
-                propReg, index.getSynonymProvider(), getBindVariableValues(),
-                index.getIndexFormatVersion());
+                index.getSynonymProvider(), index.getIndexFormatVersion());
+
+        MultiColumnQuery query = factory.create(qomTree.getSource());
+
+        if (qomTree.getConstraint() != null) {
+            Constraint c = ConstraintBuilder.create(qomTree.getConstraint(),
+                    getBindVariableValues(), qomTree.getSource().getSelectors(),
+                    factory, session.getValueFactory());
+            query = new FilterMultiColumnQuery(query, c);
+        }
+
-        return new QueryResultImpl(index, itemMgr,
+        return new MultiColumnQueryResult(index, itemMgr,
