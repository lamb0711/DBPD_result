JCR-688: Apply the new Resolver interfaces in jackrabbit-core.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@496140 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.NamespaceException;
-                QName propName = NameFormat.parse(relPath, session.getNamespaceResolver());
+                QName propName = session.getQName(relPath);
-            Path p = PathFormat.parse(getPrimaryPath(), relPath,
-                    session.getNamespaceResolver()).getCanonicalPath();
+            Path p =
+                Path.create(getPrimaryPath(), session.getQPath(relPath), false)
+                .getCanonicalPath();
-            Path p = PathFormat.parse(relPath, session.getNamespaceResolver());
+            Path p = session.getQPath(relPath);
-        } catch (MalformedPathException e) {
+        } catch (NameException e) {
-        QName qName;
-            qName = NameFormat.parse(name, session.getNamespaceResolver());
+            return getOrCreateProperty(
+                    session.getQName(name), type,
+                    multiValued, exactTypeMatch, status);
-        return getOrCreateProperty(qName, type, multiValued, exactTypeMatch, status);
-        QName qName;
-            qName = NameFormat.parse(propName, session.getNamespaceResolver());
+            removeChildProperty(session.getQName(propName));
-        removeChildProperty(qName);
-                    PathFormat.parse(getPrimaryPath(), relPath,
-                            session.getNamespaceResolver()).getCanonicalPath();
+                Path.create(getPrimaryPath(), session.getQPath(relPath), false)
+                .getCanonicalPath();
-        } catch (MalformedPathException e) {
+        } catch (NameException e) {
-                name = srcName.toJCRName(session.getNamespaceResolver());
-            } catch (NoPrefixDeclaredException npde) {
+                Path.PathElement[] path = new Path.PathElement[] { srcName };
+                name = session.getJCRPath(new Path.PathBuilder(path).getPath());
+            } catch (NameException e) {
+                name = srcName.toString();
+            } catch (NamespaceException e) {
-                name = dstName.toJCRName(session.getNamespaceResolver());
-            } catch (NoPrefixDeclaredException npde) {
+                Path.PathElement[] path = new Path.PathElement[] { dstName };
+                name = session.getJCRPath(new Path.PathBuilder(path).getPath());
+            } catch (NameException e) {
+                name = dstName.toString();
+            } catch (NamespaceException e) {
-        QName name = session.getHierarchyManager().getName(id);
-        try {
-            return NameFormat.format(name, session.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException npde) {
-            // should never get here...
-            String msg = "internal error: encountered unregistered namespace "
-                    + name.getNamespaceURI();
-            log.debug(msg);
-            throw new RepositoryException(msg, npde);
-        }
+        return session.getJCRName(session.getHierarchyManager().getName(id));
-            Path p = PathFormat.parse(srcName, session.getNamespaceResolver());
+            Path p = session.getQPath(srcName);
-        } catch (MalformedPathException e) {
+        } catch (NameException e) {
-                Path p = PathFormat.parse(destName, session.getNamespaceResolver());
+                Path p = session.getQPath(destName);
-            } catch (MalformedPathException e) {
+            } catch (NameException e) {
-
-        // try shortcut first (avoids parsing of name)...
-            if (NameFormat.format(primaryTypeName, session.getNamespaceResolver())
-                    .equals(nodeTypeName)) {
-                return true;
-            }
-        } catch (NoPrefixDeclaredException npde) {
-            throw new RepositoryException("invalid node type name: " + nodeTypeName, npde);
-        }
-
-        QName ntName;
-        try {
-            ntName = NameFormat.parse(nodeTypeName, session.getNamespaceResolver());
+            return isNodeType(session.getQName(nodeTypeName));
-        return isNodeType(ntName);
-        QName ntName;
-            ntName = NameFormat.parse(mixinName, session.getNamespaceResolver());
+            addMixin(session.getQName(mixinName));
-
-        addMixin(ntName);
-        QName ntName;
-            ntName = NameFormat.parse(mixinName, session.getNamespaceResolver());
+            removeMixin(session.getQName(mixinName));
-
-        removeMixin(ntName);
-            ntName = NameFormat.parse(mixinName, session.getNamespaceResolver());
+            ntName = session.getQName(mixinName);
-                relPath = PathFormat.format(p, srcSession.getNamespaceResolver());
+                relPath = session.getJCRPath(p);
-                        Path dstPath = PathFormat.parse(getPrimaryPath(),
-                                relPath, session.getNamespaceResolver()).getCanonicalPath();
+                        Path relative = session.getQPath(relPath);
+                        Path dstPath =
+                            Path.create(getPrimaryPath(), relative, false)
+                            .getCanonicalPath();
-                        session.move(node.getPath(), PathFormat.format(dstPath, session.getNamespaceResolver()));
+                        session.move(node.getPath(), session.getJCRPath(dstPath));
-                    } catch (MalformedPathException e) {
+                    } catch (NameException e) {
-                    } catch (NoPrefixDeclaredException e) {
-                        throw new RepositoryException("InternalError.", e);
-                relPath = PathFormat.format(p, srcSession.getNamespaceResolver());
+                relPath = session.getJCRPath(p);
