JCR-337 - Remove jcr dependency from dav-library
JCR-343 - Report#init limits the Report interface to DeltaV compliant resources
JCR-340 - ValuesProperty missing property type information
JCR-342 - DavResource#getDavSession() missing
JCR-344 - DeltaVResource lists MKWORKSPACE in the method constant.
JCR-345 - DavException does not allow to specify an exception cause

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385540 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.xml.DomUtil;
+    private Element errorCondition;
+     * @see DavException#DavException(int, String, Throwable, Element)
-        super(message);
-        this.errorCode = errorCode;
-        log.debug("DavException: (" + errorCode + ") " + message);
+        this(errorCode, message, null, null);
+     * @param cause Cause of this DavException
+     * @see DavException#DavException(int, String, Throwable, Element)
+     */
+    public DavException(int errorCode, Throwable cause) {
+        this(errorCode, null, cause, null);
+    }
+
+    /**
+     * Create a new <code>DavException</code>.
+     *
+     * @param errorCode integer specifying any of the status codes defined by
+     * {@link DavServletResponse}.
+     * @see DavException#DavException(int, String, Throwable, Element)
-        this(errorCode, statusPhrases.getProperty(String.valueOf(errorCode)));
+        this(errorCode, statusPhrases.getProperty(String.valueOf(errorCode)), null, null);
+    }
+
+    /**
+     * Create a new <code>DavException</code>.
+     *
+     * @param errorCode integer specifying any of the status codes defined by
+     * {@link DavServletResponse}.
+     * @param message Human readable error message.
+     * @param cause Cause of this <code>DavException</code>.
+     * @param errorCondition Xml element providing detailled information about
+     * the error. If the condition is not <code>null</code>, {@link #toXml(Document)}
+     */
+    public DavException(int errorCode, String message, Throwable cause, Element errorCondition) {
+        super(message, cause);
+        this.errorCode = errorCode;
+        this.errorCondition = errorCondition;
+        log.debug("DavException: (" + errorCode + ") " + message);
-     * @return Always false
+     * @return true if a error condition has been specified, false otherwise.
-        return false;
+        return errorCondition != null;
-     * Returns <code>null</code>
+     * Returns a DAV:error element containing the error condition or
+     * <code>null</code> if no specific condition is available. See
+     * <a href="http://www.ietf.org/rfc/rfc3253.txt">RFC 3253</a>
+     * Section 1.6 "Method Preconditions and Postconditions" for additional
+     * information.
-     * @return <code>null</code>
+     * @return A DAV:error element indicating the error cause or <code>null</code>.
-        return null;
+        if (hasErrorCondition()) {
+            Element error = DomUtil.createElement(document, XML_ERROR, DavConstants.NAMESPACE);
+            error.appendChild(document.importNode(errorCondition, true));
+            return error;
+        } else {
+            return null;
+        }
-
