JCR-2087: Upgrade to Java 5 as the base platform

Generify PathMap (as preparation for work on LockManagerImpl).

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@803119 13f79535-47bb-0310-9956-ffa450edef68

-    private final PathMap retentionMap  = new PathMap();
-    private final PathMap holdMap = new PathMap();
+    private final PathMap<RetentionPolicyImpl> retentionMap =
+        new PathMap<RetentionPolicyImpl>();
+
+    private final PathMap<List<HoldImpl>> holdMap = new PathMap<List<HoldImpl>>();
-        final Set nodeIds = new HashSet();
+        final Set<NodeId> nodeIds = new HashSet<NodeId>();
-        holdMap.traverse(new PathMap.ElementVisitor() {
-            public void elementVisited(PathMap.Element element) {
-                List holds = (List) element.get();
+        holdMap.traverse(new PathMap.ElementVisitor<List<HoldImpl>>() {
+            public void elementVisited(PathMap.Element<List<HoldImpl>> element) {
+                List<HoldImpl> holds = element.get();
-                    nodeIds.add(((HoldImpl) holds.get(0)).getNodeId());
+                    nodeIds.add(holds.get(0).getNodeId());
-        retentionMap.traverse(new PathMap.ElementVisitor() {
-            public void elementVisited(PathMap.Element element) {
-                RetentionPolicyImpl rp  = (RetentionPolicyImpl) element.get();
-                nodeIds.add(rp.getNodeId());
+        retentionMap.traverse(new PathMap.ElementVisitor<RetentionPolicyImpl>() {
+            public void elementVisited(PathMap.Element<RetentionPolicyImpl> element) {
+                nodeIds.add(element.get().getNodeId());
-                for (Iterator it = nodeIds.iterator(); it.hasNext();) {
+                for (Iterator<NodeId> it = nodeIds.iterator(); it.hasNext();) {
-            Hold[] holds = HoldImpl.createFromProperty(p, ((PropertyId) p.getId()).getParentId());
+            HoldImpl[] holds = HoldImpl.createFromProperty(p, ((PropertyId) p.getId()).getParentId());
-            PathMap.Element el = holdMap.map(nodePath, true);
+            PathMap.Element<List<HoldImpl>> el = holdMap.map(nodePath, true);
-            RetentionPolicy rp = new RetentionPolicyImpl(p.getString(), ((PropertyId) p.getId()).getParentId(), session);
+            RetentionPolicyImpl rp = new RetentionPolicyImpl(
+                    p.getString(), ((PropertyId) p.getId()).getParentId(), session);
-            PathMap.Element el = retentionMap.map(nodePath, true);
+            PathMap.Element<RetentionPolicyImpl> el =
+                retentionMap.map(nodePath, true);
-        PathMap.Element element = holdMap.map(nodePath, false);
-        List holds = (List) element.get();
+        PathMap.Element<List<HoldImpl>> element = holdMap.map(nodePath, false);
+        List<HoldImpl> holds = element.get();
-                for (Iterator it = holds.iterator(); it.hasNext();) {
-                    Hold h = (Hold) it.next();
-                    if (h.isDeep()) {
+                for (Hold hold : holds) {
+                    if (hold.isDeep()) {
-        PathMap.Element element = retentionMap.map(nodePath, true);
+        PathMap.Element<RetentionPolicyImpl> element = retentionMap.map(nodePath, true);
-            rp = (RetentionPolicy) element.get();
+            rp = element.get();
-                rp = (RetentionPolicy) element.get();
+                rp = element.get();
