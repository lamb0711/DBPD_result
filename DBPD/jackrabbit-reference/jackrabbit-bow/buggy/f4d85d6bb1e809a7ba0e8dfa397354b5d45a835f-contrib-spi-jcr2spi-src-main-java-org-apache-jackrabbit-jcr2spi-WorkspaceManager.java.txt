work in progress

- ChangeLog: add target (item to be saved)
- TransientItemStateManager: changing itemstate from new to existing => needs to connect to overlayed state
- TransientISFactory move out of TransientISM
- RepositoryServiceImpl: simplify execution of wsp-operations
- Initial draft for observation
- WorkspaceManager: seperate notification of events resulting from transient modifications.
- WorkspaceManager: don't report events from wsp-operations as external mods.
- IteratorHelper; add EMPTY constant
- Event: add constant for ALL events

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@451313 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Batch;
-    private final WorkspaceItemStateManager cache;
+    private final ItemStateManager cache;
-        ItemStateFactory isf = new WorkspaceItemStateFactory(service, sessionInfo, this);
-        cache = new WorkspaceItemStateManager(isf, service.getIdFactory());
-        addEventListener(cache);
+        cache = createItemStateManager();
+    private ItemStateManager createItemStateManager() {
+        ItemStateFactory isf = new WorkspaceItemStateFactory(service, sessionInfo, this);
+        WorkspaceItemStateManager ism = new WorkspaceItemStateManager(isf, service.getIdFactory());
+        addEventListener(ism);
+        return ism;
+    }
+
-        if (Boolean.getBoolean(desc)) {
+        if (Boolean.valueOf(desc).booleanValue()) {
-                    onEventReceived(null, events);
+                    onEventReceived(events, false, null);
-            int allTypes = Event.NODE_ADDED | Event.NODE_REMOVED |
-                Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED;
-            // register for all events
+            // register for all non-local events
-                l, allTypes, true, null, null);
+                l, Event.ALL_TYPES, true, null, null);
-     * Creates a new <code>Batch</code> from the single workspace operation and
-     * executes it.
+     * Creates a new batch from the single workspace operation and executes it.
-        new Batch(sessionInfo).execute(operation);
+        new OperationVisitorImpl(sessionInfo).execute(operation);
-     * Creates a new <code>Batch</code> from the given <code>Batch</code> and
-     * executes it.
+     * Creates a new batch from the given <code>ChangeLog</code> and executes it.
-        new Batch(sessionInfo).execute(changes);
+        new OperationVisitorImpl(sessionInfo).execute(changes);
+     * @param events    the events generated by the repository service as a
-     * @param events    the events generated by the repository service as a
-     *                  response to the changes.
-    private void onEventReceived(ChangeLog changeLog, EventIterator events) {
-        if (changeLog != null) {
-            // now we need to apply the transient changes in changeLog to
-            // the ItemStates in the workspace layer
-            changeLog.push();
-            changeLog.persisted();
-        }
-
+    private void onEventReceived(EventIterator events, boolean isLocal, ChangeLog changeLog) {
+        if (eventList.isEmpty()) {
+            return;
+        }
-        for (int i = 0; i < lstnrs.length; i++) {
-           lstnrs[i].onEvent(new EventIteratorImpl(eventList), changeLog != null);
+        if (changeLog == null) {
+            for (int i = 0; i < lstnrs.length; i++) {
+                lstnrs[i].onEvent(new EventIteratorImpl(eventList), isLocal);
+            }
+        } else {
+            for (int i = 0; i < lstnrs.length; i++) {
+                lstnrs[i].onEvent(new EventIteratorImpl(eventList), changeLog);
+            }
-    private final class Batch implements OperationVisitor {
+    private final class OperationVisitorImpl implements OperationVisitor {
-        private org.apache.jackrabbit.spi.Batch batch;
+        private Batch batch;
-        private Batch(SessionInfo sessionInfo) {
+        private OperationVisitorImpl(SessionInfo sessionInfo) {
-                batch = service.createBatch(sessionInfo);
+                ItemState target = changeLog.getTarget().getOverlayedState();
+                batch = service.createBatch(target.getId(), sessionInfo);
-                    EventIterator events = service.submit(batch);
-                    onEventReceived(changeLog, events);
+                    events = service.submit(batch);
+                    onEventReceived(events, true, changeLog);
-                    // a workspace operation is like an external change
-                    onEventReceived(null, events);
+                    // a workspace operation is like an external change: there
+                    // is no changelog to persist. but still the events must
+                    // be reported as local changes.
+                    onEventReceived(events, true, null);
