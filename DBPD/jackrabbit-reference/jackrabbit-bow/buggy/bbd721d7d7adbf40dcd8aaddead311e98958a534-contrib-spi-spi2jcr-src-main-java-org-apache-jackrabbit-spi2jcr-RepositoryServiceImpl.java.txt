JCR-999  SPI: provide batch read functionality
JCR-1000 JCR2SPI: remove duplicate item states

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@552873 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.NameException;
+import org.apache.jackrabbit.JcrConstants;
+import javax.jcr.ItemVisitor;
+import javax.jcr.util.TraversingItemVisitor;
+     * The configuration map used to determine the maximal depth of child
+     * items to be accessed upon a call to {@link getNodeInfo(SessionInfo, NodeId)}.
+     */
+    private final BatchReadConfig batchReadConfig;
+
+    /**
+     * @param batchReadConfig
+     * {@link #getNodeInfo(SessionInfo, NodeId)}.
-    public RepositoryServiceImpl(Repository repository) {
+    public RepositoryServiceImpl(Repository repository, BatchReadConfig batchReadConfig) {
+        this.batchReadConfig = batchReadConfig;
-        return new NodeInfoImpl(getNode(nodeId, sInfo),
-                idFactory, sInfo.getNamespaceResolver());
+        Node node = getNode(nodeId, sInfo);
+        NodeInfo info = new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver());
+        return info;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Iterator getItemInfos(SessionInfo sessionInfo, NodeId nodeId)
+            throws ItemNotFoundException, RepositoryException {
+        final SessionInfoImpl sInfo = getSessionInfoImpl(sessionInfo);
+        Node node = getNode(nodeId, sInfo);
+        QName ntName = null;
+        try {
+            ntName = NameFormat.parse(node.getProperty(JcrConstants.JCR_PRIMARYTYPE).getString(), sInfo.getNamespaceResolver());
+        } catch (NameException e) {
+            // ignore. should never occur
+        }
+        int depth = batchReadConfig.getDepth(ntName);
+        if (depth == BatchReadConfig.DEPTH_DEFAULT) {
+            NodeInfo info = new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver());
+            return Collections.singletonList(info).iterator();
+        } else {
+            final List itemInfos = new ArrayList();
+            ItemVisitor visitor = new TraversingItemVisitor(false, depth) {
+                protected void entering(Property property, int i) throws RepositoryException {
+                    itemInfos.add(new PropertyInfoImpl(property, idFactory, sInfo.getNamespaceResolver(), getQValueFactory()));
+                }
+                protected void entering(Node node, int i) throws RepositoryException {
+                    itemInfos.add(new NodeInfoImpl(node, idFactory, sInfo.getNamespaceResolver()));
+                }
+                protected void leaving(Property property, int i) {
+                    // nothing to do
+                }
+                protected void leaving(Node node, int i) {
+                    // nothing to do
+                }
+            };
+            visitor.visit(node);
+            return itemInfos.iterator();
+        }
