- moved virtual nodestate providers down to shared states (part of solving JCR-45)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156034 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.virtual.VirtualItemStateProvider;
+     * Virtual item state providers
+     */
+    private VirtualItemStateProvider[] virtualProviders = new VirtualItemStateProvider[0];
+
+    /**
+    /**
+     * Adds a new virtual item state provider
+     *
+     * @param prov
+     */
+    public synchronized void addVirtualItemStateProvider(VirtualItemStateProvider prov) {
+        VirtualItemStateProvider[] provs = new VirtualItemStateProvider[virtualProviders.length + 1];
+        System.arraycopy(virtualProviders, 0, provs, 0, virtualProviders.length);
+        provs[virtualProviders.length] = prov;
+        virtualProviders = provs;
+    }
+
-    protected NodeState getNodeState(NodeId id)
+    private NodeState getNodeState(NodeId id)
-    protected PropertyState getPropertyState(PropertyId id)
+    private PropertyState getPropertyState(PropertyId id)
+        // check the virtual root ids (needed for overlay)
+        for (int i = 0; i < virtualProviders.length; i++) {
+            if (virtualProviders[i].isVirtualRoot(id)) {
+                return virtualProviders[i].getItemState(id);
+            }
+        }
+        // check internal first
+        if (hasNonVirtualItemState(id)) {
+            return getNonVirtualItemState(id);
+        }
+        // check if there is a virtual state for the specified item
+        for (int i = 0; i < virtualProviders.length; i++) {
+            if (virtualProviders[i].hasItemState(id)) {
+                return virtualProviders[i].getItemState(id);
+            }
+        }
+        throw new NoSuchItemStateException(id.toString());
+    }
+    /**
+     * returns the item state for the given id without considering virtual
+     * item state providers.
+     */
+    private ItemState getNonVirtualItemState(ItemId id)
+            throws NoSuchItemStateException, ItemStateException {
+        // check the virtual root ids (needed for overlay)
+        for (int i = 0; i < virtualProviders.length; i++) {
+            if (virtualProviders[i].isVirtualRoot(id)) {
+                return true;
+            }
+        }
+        // check if this manager has the item state
+        if (hasNonVirtualItemState(id)) {
+            return true;
+        }
+        // otherwise check virtual ones
+        for (int i = 0; i < virtualProviders.length; i++) {
+            if (virtualProviders[i].hasItemState(id)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Checks if this itemstate manager has the given item state without
+     * considering the virtual item state managers.
+     */
+    private boolean hasNonVirtualItemState(ItemId id) {
+        if (isCached(id)) {
+            return true;
+        }
-        NodeReferences refs;
+        // todo: add caching
+        // check persistence manager
-            refs = persistMgr.load(id);
-        } catch (NoSuchItemStateException nsise) {
-            refs = new NodeReferences(id);
+            return persistMgr.load(id);
+        } catch (NoSuchItemStateException e) {
+            // ignore
-
-        return refs;
+        // check virtual providers
+        for (int i = 0; i < virtualProviders.length; i++) {
+            try {
+                return virtualProviders[i].getNodeReferences(id);
+            } catch (NoSuchItemStateException e) {
+                // ignore
+            }
+        }
+        // create new one
+        return new NodeReferences(id);
