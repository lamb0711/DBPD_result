JCR-2000: Deadlock on concurrent commits

Use DefaultISMLocking as the versioning lock to get the same JCR-1334 support for versioning as was already implemented for default workspace locking.

Make all transactions acquire the versioning lock regardless of whether versioning changes are included in the transaction. This prevents potential deadlocks as even a non-versioning commit will access the version store for reference checks.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@750011 13f79535-47bb-0310-9956-ffa450edef68

-import EDU.oswego.cs.dl.util.concurrent.ReadWriteLock;
-import EDU.oswego.cs.dl.util.concurrent.ReentrantWriterPreferenceReadWriteLock;
+import org.apache.jackrabbit.core.state.DefaultISMLocking;
+import org.apache.jackrabbit.core.state.ISMLocking.ReadLock;
+import org.apache.jackrabbit.core.state.ISMLocking.WriteLock;
-    private final ReadWriteLock rwLock =
-            new ReentrantWriterPreferenceReadWriteLock() {
-                /**
-                 * Allow reader when there is no active writer, or current
-                 * thread owns the write lock (reentrant).
-                 */
-                protected boolean allowReader() {
-                    return activeWriter_ == null
-                        || activeWriter_ == Thread.currentThread();
-                }
-            };
+    private final DefaultISMLocking rwLock = new DefaultISMLocking();
-     * aquires the write lock on this version manager.
+     * Acquires the write lock on this version manager.
-    protected void acquireWriteLock() {
+    protected WriteLock acquireWriteLock() {
-                rwLock.writeLock().acquire();
-                return;
+                return rwLock.acquireWriteLock(null);
-     * releases the write lock on this version manager.
+     * acquires the read lock on this version manager.
-    protected void releaseWriteLock() {
-        rwLock.writeLock().release();
-    }
-
-    /**
-     * aquires the read lock on this version manager.
-     */
-    protected void acquireReadLock() {
+    protected ReadLock acquireReadLock() {
-                rwLock.readLock().acquire();
-                return;
+                return rwLock.acquireReadLock(null);
-     * releases the read lock on this version manager.
-     */
-    protected void releaseReadLock() {
-        rwLock.readLock().release();
-    }
-
-    /**
+        private final WriteLock lock;
+
+        public WriteOperation(WriteLock lock) {
+            this.lock = lock;
+        }
+
-                releaseWriteLock();
+                lock.release();
-        acquireWriteLock();
+        WriteLock lock = acquireWriteLock();
-            return new WriteOperation();
+            return new WriteOperation(lock);
-                releaseWriteLock();
+                lock.release();
-        acquireReadLock();
+        ReadLock lock = acquireReadLock();
-            releaseReadLock();
+            lock.release();
