JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.IllegalNameException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.UnknownPrefixException;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.namespace.NamespaceResolver;
+import javax.jcr.NamespaceException;
-     * @param nsResolver namespace resolver
+     * @param mgrProvider
+    private NamePathResolver resolver() {
+        return mgrProvider.getNamePathResolver();
+    }
+
-    private QPropertyDefinition getApplicablePropDef(QName propertyName, int type, boolean multiValued)
+    private QPropertyDefinition getApplicablePropDef(Name propertyName, int type, boolean multiValued)
-    public boolean isNodeType(QName nodeTypeName) {
-        return getQName().equals(nodeTypeName) ||  ent.includesNodeType(nodeTypeName);
+    public boolean isNodeType(Name nodeTypeName) {
+        return getName().equals(nodeTypeName) ||  ent.includesNodeType(nodeTypeName);
-    private QName getQName() {
-        return ntd.getQName();
+    private Name getQName() {
+        return ntd.getName();
-            return NameFormat.format(ntd.getQName(), nsResolver());
-        } catch (NoPrefixDeclaredException npde) {
+            return resolver().getJCRName(ntd.getName());
+        } catch (NamespaceException e) {
-            log.error("encountered unregistered namespace in node type name", npde);
-            return ntd.getQName().toString();
+            log.error("encountered unregistered namespace in node type name", e);
+            return ntd.getName().toString();
-            QName piName = ntd.getPrimaryItemName();
+            Name piName = ntd.getPrimaryItemName();
-                return NameFormat.format(piName, nsResolver());
+                return resolver().getJCRName(piName);
-        } catch (NoPrefixDeclaredException npde) {
+        } catch (NamespaceException e) {
-            log.error("encountered unregistered namespace in name of primary item", npde);
-            return ntd.getQName().toString();
+            log.error("encountered unregistered namespace in name of primary item", e);
+            return ntd.getName().toString();
-        QName ntName;
+        Name ntName;
-            ntName = NameFormat.parse(nodeTypeName, nsResolver());
-        } catch (IllegalNameException ine) {
-            log.warn("invalid node type name: " + nodeTypeName, ine);
+            ntName = resolver().getQName(nodeTypeName);
+        } catch (NamespaceException e) {
+            log.warn("invalid node type name: " + nodeTypeName, e);
-        } catch (UnknownPrefixException upe) {
-            log.warn("invalid node type name: " + nodeTypeName, upe);
+        } catch (NameException e) {
+            log.warn("invalid node type name: " + nodeTypeName, e);
-        QName[] ntNames = ent.getInheritedNodeTypes();
+        Name[] ntNames = ent.getInheritedNodeTypes();
-        QName[] ntNames = ntd.getSupertypes();
+        Name[] ntNames = ntd.getSupertypes();
-            QName name = NameFormat.parse(propertyName, nsResolver());
+            Name name = resolver().getQName(propertyName);
-            QValue qValue = ValueFormat.getQValue(v, nsResolver(), qValueFactory());
+            QValue qValue = ValueFormat.getQValue(v, resolver(), qValueFactory());
-        } catch (NameException be) {
-            // implementation specific exception, fall through
-        } catch (RepositoryException re) {
+        } catch (NameException re) {
+            // fall through
+        } catch (RepositoryException e) {
-            QName name = NameFormat.parse(propertyName, nsResolver());
+            Name name = resolver().getQName(propertyName);
-                    QValue qValue = ValueFormat.getQValue(v, nsResolver(), qValueFactory());
+                    QValue qValue = ValueFormat.getQValue(v, resolver(), qValueFactory());
-            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver()), definitionProvider());
+            ent.checkAddNodeConstraints(resolver().getQName(childNodeName), definitionProvider());
-            ent.checkAddNodeConstraints(NameFormat.parse(childNodeName, nsResolver()),
-                NameFormat.parse(nodeTypeName, nsResolver()), definitionProvider());
+            ent.checkAddNodeConstraints(resolver().getQName(childNodeName),
+                resolver().getQName(nodeTypeName), definitionProvider());
-            ent.checkRemoveItemConstraints(NameFormat.parse(itemName, nsResolver()));
+            ent.checkRemoveItemConstraints(resolver().getQName(itemName));
