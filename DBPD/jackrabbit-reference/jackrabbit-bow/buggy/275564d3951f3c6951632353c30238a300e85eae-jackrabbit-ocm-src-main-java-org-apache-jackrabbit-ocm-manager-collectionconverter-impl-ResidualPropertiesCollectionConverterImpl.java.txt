- working on JCR-1339 : better support for Map. It is important to define an ID field in the class used for the Map elements. This ID will be used as a key in the map. 
- Rename ManagedHashMap into ManageableHashMap in ordrer to follow the same naming convention.
- Now, it is not necessary to define the ElementClassName if the Collection or the Map are parametrized like List<MyClass>

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@646938 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableCollectionUtil;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjectsUtil;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableMap;
+import org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableObjects;
-        ManageableCollection collection) throws RepositoryException {
+        ManageableObjects objects) throws RepositoryException {
-            collection, false);
+            objects, false);
-        ManageableCollection collection) throws RepositoryException {
+        ManageableObjects objects) throws RepositoryException {
-            collection, true);
+            objects, true);
-    protected ManageableCollection doGetCollection(Session session,
+    protected ManageableObjects doGetCollection(Session session,
-            ManageableCollection collection = ManageableCollectionUtil.getManageableCollection(collectionFieldClass);
+            ManageableObjects objects = ManageableObjectsUtil.getManageableObjects(collectionFieldClass);
-                if (collection instanceof Map) {
+                if (objects instanceof Map) {
-                    ((Map) collection).put(name, value);
+                    ((Map) objects).put(name, value);
-                    collection.addObject(value);
+                	if (objects instanceof ManageableCollection)
+                         ((ManageableCollection)objects).addObject(value);
+                	else
+                	{
+                		String name = prop.getName();
+                		((ManageableMap)objects).addObject(name, value);
+                	}
-            return collection;
+            return objects;
-        ManageableCollection collection, boolean removeExisting)
+        ManageableObjects objects, boolean removeExisting)
-        if (!(collection instanceof Map)) {
+        if (!(objects instanceof Map)) {
-            Map map = (Map) collection;
+            Map map = (Map) objects;
