JCR-1104: JSR 283 support (work in progress)
- NodeLocalName

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647798 13f79535-47bb-0310-9956-ffa450edef68

-    public Object visit(NodeLocalNameImpl node, Object data) {
-        // TODO: implement
-        throw new UnsupportedOperationException("not yet implemented");
+    public Object visit(NodeLocalNameImpl node, Object data) throws Exception {
+        if (version.getVersion() < IndexFormatVersion.V3.getVersion()) {
+            throw new InvalidQueryException("NodeLocalName operand is only " +
+                    "available with index version >= 3. Please re-index " +
+                    "repository and execute query again.");
+        }
+        if (data instanceof ComparisonImpl) {
+            ComparisonImpl comp = ((ComparisonImpl) data);
+            int operator = comp.getOperator();
+            Value v = (Value) ((StaticOperandImpl) comp.getOperand2()).accept(this, data);
+            String value = v.getString();
+
+            switch (operator) {
+                case OPERATOR_EQUAL_TO:
+                    return new TermQuery(new Term(FieldNames.LOCAL_NAME, value));
+                case OPERATOR_GREATER_THAN:
+                    return new LocalNameRangeQuery(value, null, false);
+                case OPERATOR_GREATER_THAN_OR_EQUAL_TO:
+                    return new LocalNameRangeQuery(value, null, true);
+                case OPERATOR_LESS_THAN:
+                    return new LocalNameRangeQuery(null, value, false);
+                case OPERATOR_LESS_THAN_OR_EQUAL_TO:
+                    return new LocalNameRangeQuery(null, value, true);
+                case OPERATOR_LIKE:
+                    if (value.equals("%")) {
+                        return new MatchAllDocsQuery();
+                    } else {
+                        return new WildcardQuery(FieldNames.LOCAL_NAME, null, value);
+                    }
+                case OPERATOR_NOT_EQUAL_TO:
+                    MatchAllDocsQuery all = new MatchAllDocsQuery();
+                    BooleanQuery b = new BooleanQuery();
+                    b.add(all, BooleanClause.Occur.SHOULD);
+                    b.add(new TermQuery(new Term(FieldNames.LOCAL_NAME, value)),
+                            BooleanClause.Occur.MUST_NOT);
+                    return b;
+                default:
+                    throw new InvalidQueryException(
+                            "Unknown operator " + operator);
+            }
+        } else {
+            // TODO
+            throw new InvalidQueryException("not yet implemented");
+        }
-            String stringValue = npResolver.getJCRName(value);
-            // the prefix including colon
-            String prefix = stringValue.substring(0, stringValue.indexOf(':') + 1);
-                    return new TermQuery(new Term(FieldNames.LABEL, stringValue));
+                    return new NameQuery(value, version, nsMappings);
-                    Term lower = new Term(FieldNames.LABEL, stringValue);
-                    Term upper = new Term(FieldNames.LABEL,
-                            prefix + "\uFFFF");
-                    return new RangeQuery(lower, upper, false);
+                    return new NameRangeQuery(value, null, false, version, nsMappings);
-                    lower = new Term(FieldNames.LABEL, stringValue);
-                    upper = new Term(FieldNames.LABEL,
-                            prefix + "\uFFFF");
-                    return new RangeQuery(lower, upper, true);
+                    return new NameRangeQuery(value, null, true, version, nsMappings);
-                    lower = new Term(FieldNames.LABEL, prefix);
-                    upper = new Term(FieldNames.LABEL, stringValue);
-                    return new RangeQuery(lower, upper, false);
+                    return new NameRangeQuery(null, value, false, version, nsMappings);
-                    lower = new Term(FieldNames.LABEL, prefix);
-                    upper = new Term(FieldNames.LABEL, stringValue);
-                    return new RangeQuery(lower, upper, true);
+                    return new NameRangeQuery(null, value, true, version, nsMappings);
-                    if (stringValue.equals("%")) {
-                        return new MatchAllDocsQuery();
-                    } else {
-                        return new WildcardQuery(FieldNames.LABEL,
-                                null, stringValue);
-                    }
+                    throw new InvalidQueryException("Operator LIKE is not supported with NAME operands");
-                    b.add(new TermQuery(new Term(FieldNames.LABEL, stringValue)),
+                    b.add(new NameQuery(value, version, nsMappings),
