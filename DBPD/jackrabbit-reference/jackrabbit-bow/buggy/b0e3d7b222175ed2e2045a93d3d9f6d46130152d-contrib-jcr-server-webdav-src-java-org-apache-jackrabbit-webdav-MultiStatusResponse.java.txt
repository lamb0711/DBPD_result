JCR-193, JCR-216, JCR-203, JCR 184 + various minor fixes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293331 13f79535-47bb-0310-9956-ffa450edef68

-// todo: the propstat element may also contain a responsedescription (currently ignored)
-     * @param resource The resource to retrieve the property from
-     * @param propNameSet The property name set as obtained from the request body.
+     * @param resource     The resource to retrieve the property from
+     * @param propNameSet  The property name set as obtained from the request body.
-     * {@link #PROPFIND_BY_PROPERTY}, {@link #PROPFIND_PROPERTY_NAMES}
+     *                     {@link #PROPFIND_BY_PROPERTY}, {@link #PROPFIND_PROPERTY_NAMES}
-			       int propFindType) {
+                               int propFindType) {
-	// only property names requested
-	if (propFindType == PROPFIND_PROPERTY_NAMES) {
-	    DavPropertyName[] propNames = resource.getPropertyNames();
-	    for (int i = 0; i < propNames.length; i++) {
-		status200.addContent(propNames[i].toXml());
-	    }
-	// all or a specified set of property and their values requested.
-	} else {
-	    // clone set of property, since several resources could use this again
-	    propNameSet = new DavPropertyNameSet(propNameSet);
-	    // Add requested properties or all non-protected properties
-	    DavPropertyIterator iter = resource.getProperties().iterator();
-	    while (iter.hasNext()) {
-		DavProperty wdp = iter.nextProperty();
-		if ((propFindType == PROPFIND_ALL_PROP && !wdp.isProtected()) || propNameSet.remove(wdp.getName())) {
-		    status200.addContent(wdp.toXml());
-		}
-	    }
+        // only property names requested
+        if (propFindType == PROPFIND_PROPERTY_NAMES) {
+            DavPropertyName[] propNames = resource.getPropertyNames();
+            for (int i = 0; i < propNames.length; i++) {
+                status200.addContent(propNames[i].toXml());
+            }
+            // all or a specified set of property and their values requested.
+        } else {
+            // clone set of property, since several resources could use this again
+            propNameSet = new DavPropertyNameSet(propNameSet);
+            // Add requested properties or all non-protected properties
+            DavPropertyIterator iter = resource.getProperties().iterator();
+            while (iter.hasNext()) {
+                DavProperty wdp = iter.nextProperty();
+                if ((propFindType == PROPFIND_ALL_PROP && !wdp.isProtected()) || propNameSet.remove(wdp.getName())) {
+                    status200.addContent(wdp.toXml());
+                }
+            }
-	    if (propFindType != PROPFIND_ALL_PROP) {
-		Iterator iter1 = propNameSet.iterator();
-		while (iter1.hasNext()) {
-		    DavPropertyName propName = (DavPropertyName) iter1.next();
-		    status404.addContent(propName.toXml());
-		}
-	    }
-	}
+            if (propFindType != PROPFIND_ALL_PROP) {
+                Iterator iter1 = propNameSet.iterator();
+                while (iter1.hasNext()) {
+                    DavPropertyName propName = (DavPropertyName) iter1.next();
+                    status404.addContent(propName.toXml());
+                }
+            }
+        }
-   /**
-    * Constructs an WebDAV multistatus response for a given resource. This
-    * would be used by COPY, MOVE, DELETE, LOCK, UNLOCK that require a multistatus
-    * in case of failure.
-    */
+    /**
+     * Constructs an WebDAV multistatus response for a given resource. This
+     * would be used by COPY, MOVE, DELETE, LOCK that require a multistatus
+     * in case of error with a resource other than the resource identified in the
+     * Request-URI.
+     */
-        statusMap.put(new Integer(status), new Element(null));
+        statusMap.put(new Integer(status), null);
-     * @param propertyElem the property to add
-     * @param status the status of the response set to select
+     * @param propElem the property to add
+     * @param status   the status of the response set to select
-    private void add(Element propertyElem, int status) {
+    private void add(Element propElem, int status) {
-        Element propsContainer = (Element) statusMap.get(statusKey);
+        Object propsContainer = statusMap.get(statusKey);
-        propsContainer.addContent(propertyElem.detach());
+        ((Element) propsContainer).addContent(propElem.detach());
-     * @param status the status of the response set to select
+     * @param status   the status of the response set to select
-     * @param status the status of the response set to select
+     * @param status       the status of the response set to select
+     *
-            Element propElem = (Element) statusMap.get(key);
-            if (propElem != null) {
+            Object mapEntry = statusMap.get(key);
+            if (mapEntry != null) {
+                Element propElem = (Element) mapEntry;
-            Element propElem = (Element) statusMap.get(key);
-            if (propElem != null) {
+            Object mapEntry = statusMap.get(key);
+            if (mapEntry != null) {
+                Element propElem = (Element) mapEntry;
-	return responseDescription;
+        return responseDescription;
-        Element response= new Element(XML_RESPONSE, NAMESPACE);
+        Element response = new Element(XML_RESPONSE, NAMESPACE);
-	    Element prop = (Element) statusMap.get(statusKey);
-            if (prop != null) {
-                Status status = new Status(statusKey.intValue());
+            Object mapEntry = statusMap.get(statusKey);
+            Status status = new Status(statusKey.intValue());
+            if (mapEntry != null) {
+                Element prop = (Element) mapEntry;
-	    }
+            } else {
+                response.addContent(status.toXml());
+            }
-     * @throws  IllegalArgumentException if the specified element is <code>null</code>
+     * @throws IllegalArgumentException if the specified element is <code>null</code>
-	    throw new IllegalArgumentException("The response element must not be null.");
-	}
-        String href = responseElement.getChildText(XML_HREF, NAMESPACE);
+            throw new IllegalArgumentException("The response element must not be null.");
+        }
+        String href = XmlUtil.hrefFromXml(responseElement.getChild(XML_HREF, NAMESPACE));
-	while (it.hasNext()) {
-	    Element propstat = (Element)it.next();
+        while (it.hasNext()) {
+            Element propstat = (Element) it.next();
-            // todo: propstat may also contain a responsedescription
-	}
+        // TODO: propstat may also contain a responsedescription
+        }
-                    log.warn("Unable to parse HTTP-Version from the status line: '"+ statusLine + "'");
+                    log.warn("Unable to parse HTTP-Version from the status line: '" + statusLine + "'");
-                    throw new IllegalArgumentException("Unable to parse status code from status line: '"+ statusLine + "'");
+                    throw new IllegalArgumentException("Unable to parse status code from status line: '" + statusLine + "'");
