work in progress

- NodeInfo does not load information about child-node-entries
  -> add separate SPI call
  -> add initial draft ChildInfo interface
  -> ChildNodeEntries are not built upon creation of the NodeState
  -> ItemStateFactory: add method to retrieve ChildNodeEntries

- respect CacheBehaviour while persisting transient modifications

- LockInfo.getNodeId() -> not used so far -> remove

- SessionItemStateManager: getHierarchyManager() only used by SessionImpl -> moved

- Improve TODO comments
- Javadoc


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@482657 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ChildInfo;
-// TODO: cache info objects
+
-                throw new ItemNotFoundException("Unable to retrieve the node with id " + nodeId);
+                throw new ItemNotFoundException("Unable to retrieve the node " + nodeId);
-
-            for (Iterator it = childResponses.iterator(); it.hasNext();) {
-                MultiStatusResponse resp = (MultiStatusResponse) it.next();
-                DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
-                if (childProps.contains(DavPropertyName.RESOURCETYPE) &&
-                    childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
-                    // any other resource type than default (empty) is represented by a node item
-                    NodeId childId = uriResolver.buildNodeId(id, resp, sessionInfo.getWorkspaceName());
-                    nInfo.addChildId(childId);
-                } else {
-                    PropertyId childId = uriResolver.buildPropertyId(id, resp, sessionInfo.getWorkspaceName());
-                    nInfo.addChildId(childId);
-                }
-            }
-
-
+            for (Iterator it = childResponses.iterator(); it.hasNext();) {
+                MultiStatusResponse resp = (MultiStatusResponse) it.next();
+                DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
+                if (childProps.contains(DavPropertyName.RESOURCETYPE) &&
+                    childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
+                    // any other resource type than default (empty) is represented by a node item
+                    // --> ignore
+                } else {
+                    PropertyId childId = uriResolver.buildPropertyId(nInfo.getId(), resp, sessionInfo.getWorkspaceName());
+                    nInfo.addPropertyId(childId);
+                }
+            }
+     * @see RepositoryService#getChildInfos(SessionInfo, NodeId)
+     */
+    public Collection getChildInfos(SessionInfo sessionInfo, NodeId parentId) throws ItemNotFoundException, RepositoryException {
+        // set of properties to be retrieved
+        DavPropertyNameSet nameSet = new DavPropertyNameSet();
+        nameSet.add(ItemResourceConstants.JCR_NAME);
+        nameSet.add(ItemResourceConstants.JCR_INDEX);
+        nameSet.add(ItemResourceConstants.JCR_PARENT);
+        nameSet.add(ItemResourceConstants.JCR_PRIMARYNODETYPE);
+        nameSet.add(ItemResourceConstants.JCR_MIXINNODETYPES);
+        nameSet.add(ItemResourceConstants.JCR_REFERENCES);
+        nameSet.add(ItemResourceConstants.JCR_UUID);
+        nameSet.add(DavPropertyName.RESOURCETYPE);
+
+        DavMethodBase method = null;
+        try {
+            String uri = getItemUri(parentId, sessionInfo);
+            method = new PropFindMethod(uri, nameSet, DEPTH_1);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length < 1) {
+                throw new ItemNotFoundException("Unable to retrieve the node with id " + parentId);
+            } else if (responses.length == 1) {
+                // no child nodes nor properties
+                return Collections.EMPTY_LIST;
+            }
+
+            Set childEntries = new HashSet();
+            for (int i = 0; i < responses.length; i++) {
+                if (!isSameResource(uri, responses[i])) {
+                    MultiStatusResponse resp = responses[i];
+                    DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
+                    if (childProps.contains(DavPropertyName.RESOURCETYPE) &&
+                        childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
+
+                        QName qName = uriResolver.getQName(childProps);
+                        int index = uriResolver.getIndex(childProps);
+                        String uuid = uriResolver.getUUID(childProps);
+
+                        ChildInfo childInfo = new ChildInfoImpl(qName, index, uuid);
+                        childEntries.add(childInfo);
+                    } // else: property -> ignore
+                } // else: ignore the response related to the parent
+            }
+            return childEntries;
+        } catch (IOException e) {
+            throw new RepositoryException(e);
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
+    }
+
+    /**
