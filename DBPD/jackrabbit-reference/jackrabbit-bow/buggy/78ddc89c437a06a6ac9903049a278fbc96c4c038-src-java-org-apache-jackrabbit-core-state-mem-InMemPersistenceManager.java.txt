- cleaned up persistence manager code in core
- improved space efficiency of simple serialization format as
  used by ObjectPersistenceManager, InMemPersistenceManager
  and SimpleDbPersistenceManager
- added configuration option to SimpleDbPersistenceManager
  whether BLOBs should be stored externally in the file system
  (default) or if they should be stored inline in the db
- prepared persistence managers for coming data model change 
  (new ItemState#modCount field)

see http://thread.gmane.org/gmane.comp.apache.jackrabbit.devel/4137

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@329224 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.state.obj.BLOBStore;
-import org.apache.jackrabbit.core.state.obj.ObjectPersistenceManager;
+import org.apache.jackrabbit.core.state.util.BLOBStore;
+import org.apache.jackrabbit.core.state.util.FileSystemBLOBStore;
+import org.apache.jackrabbit.core.state.util.Serializer;
-import java.io.InputStream;
-import java.io.OutputStream;
- * serialization format.
+ * binary serialization format (see {@link Serializer}).
-public class InMemPersistenceManager extends AbstractPersistenceManager
-        implements BLOBStore {
+public class InMemPersistenceManager extends AbstractPersistenceManager {
+    // BLOBStore that manages BLOB data in the file system
+    protected BLOBStore blobStore;
-                    // entry type: node
+                    // entry type: property
-                    id = NodeId.valueOf(s);
+                    id = PropertyId.valueOf(s);
-    //------------------------------------------------------------< BLOBStore >
-    /**
-     * {@inheritDoc}
-     */
-    public FileSystemResource get(String blobId) throws Exception {
-        return new FileSystemResource(blobFS, blobId);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public String put(PropertyId id, int index, InputStream in, long size) throws Exception {
-        String path = buildBlobFilePath(id.getParentUUID(), id.getName(), index);
-        OutputStream out = null;
-        FileSystemResource internalBlobFile = new FileSystemResource(blobFS, path);
-        internalBlobFile.makeParentDirs();
-        try {
-            out = new BufferedOutputStream(internalBlobFile.getOutputStream());
-            byte[] buffer = new byte[8192];
-            int read;
-            while ((read = in.read(buffer)) > 0) {
-                out.write(buffer, 0, read);
-            }
-        } finally {
-            out.close();
-        }
-        return path;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean remove(String blobId) throws Exception {
-        FileSystemResource res = new FileSystemResource(blobFS, blobId);
-        if (!res.exists()) {
-            return false;
-        }
-        // delete resource and prune empty parent folders
-        res.delete(true);
-        return true;
-    }
-
-         * store blob's in local file system in a sub directory
+         * store BLOB data in local file system in a sub directory
+        blobStore = new FileSystemBLOBStore(blobFS);
-                // clean out blob store
+                // clear out blob store
-            // close blob store
+            // close BLOB file system
+            blobStore = null;
-            ObjectPersistenceManager.deserialize(state, in);
+            Serializer.deserialize(state, in);
-            ObjectPersistenceManager.deserialize(state, in, this);
+            Serializer.deserialize(state, in, blobStore);
-            ByteArrayOutputStream out = new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
+            ByteArrayOutputStream out =
+                    new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
-            ObjectPersistenceManager.serialize(state, out);
+            Serializer.serialize(state, out);
-            ByteArrayOutputStream out = new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
+            ByteArrayOutputStream out =
+                    new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
-            ObjectPersistenceManager.serialize(state, out, this);
+            Serializer.serialize(state, out, blobStore);
-            ObjectPersistenceManager.deserialize(refs, in);
+            Serializer.deserialize(refs, in);
-            ByteArrayOutputStream out = new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
+            ByteArrayOutputStream out =
+                    new ByteArrayOutputStream(INITIAL_BUFFER_SIZE);
-            ObjectPersistenceManager.serialize(refs, out);
+            Serializer.serialize(refs, out);
