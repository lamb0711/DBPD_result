JCR-1334 Deadlock due different Thread access in same Transaction

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@734400 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.TimeBomb;
+    private boolean distributedThreadAccess = false;
+    
+        this(session, false);
+    }
+
+    /**
+     * Create a new instance of this class. Takes a session as parameter.
+     * @param session session. If session is not of type
+     * {@link XASession}, an <code>IllegalArgumentException</code>
+     * is thrown
+     */
+    public UserTransactionImpl(Session session, boolean distributedThreadAccess) {
+            this.distributedThreadAccess = distributedThreadAccess; 
-            xares.commit(xid, false);
+            if (distributedThreadAccess) {
+                try {
+                    final Thread t = Thread.currentThread();
+                    final TimeBomb tb = new TimeBomb(100) {
+                        public void explode() {
+                            t.interrupt();
+                        }
+                    };
+                    tb.arm();
+                    Thread distributedThread = new Thread() {
+                        public void run() {
+                            try {
+                                xares.commit(xid, false);
+                                tb.disarm();                
+                            } catch (Exception e) {
+                                throw new RuntimeException(e.getMessage());
+                            }
+                        }
+                    };
+                    distributedThread.start();
+                    Thread.sleep(200);
+                } catch (InterruptedException e) {
+                    throw new SystemException("commit from different thread but same XID must not block");
+                }
+            } else {
+                xares.commit(xid, false);
+            }
+            
-    public void setTransactionTimeout(int seconds) throws SystemException {}
+    public void setTransactionTimeout(int seconds) throws SystemException {
+        try {
+            xares.setTransactionTimeout(seconds);
+        } catch (XAException e) {
+            SystemException se = new SystemException(
+                    "Unable to set the TransactionTiomeout: XA_ERR=" + e.errorCode);
+            se.initCause(e.getCause());
+            throw se;
+        }
+    }
