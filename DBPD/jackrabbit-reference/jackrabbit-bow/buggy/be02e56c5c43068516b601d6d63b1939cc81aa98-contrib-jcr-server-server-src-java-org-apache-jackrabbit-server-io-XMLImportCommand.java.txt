- [JCR-134] extensibility patch for DavResourceImpl
- moving JcrConstants.java to commons
- fixing minor import issues
- readding lost stuff
- adding proper shutdown to RepositoryStartupServlet.java

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@190721 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.log4j.Logger;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileInputStream;
-public class XMLImportCommand extends AbstractImportCommand {
+public class XMLImportCommand extends AbstractCommand {
+
+    /**
+     * the default logger
+     */
+    private static Logger log = Logger.getLogger(XMLImportCommand.class);
+     * the nodetype for the node
+     */
+    private String nodeType = "nt:file";
+
+    /**
+     * Executes this command by calling {@link #importResource} if
+     * the given context is of the correct class.
+     *
+     * @param context the (import) context.
+     * @return the return value of the delegated method or false;
+     * @throws Exception in an error occurrs
+     */
+    public boolean execute(AbstractContext context) throws Exception {
+        if (context instanceof ImportContext) {
+            return execute((ImportContext) context);
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * Executes this command. It checks if this command can handle the content
+     * type and delegates it to {@link #importResource}. If the import is
+     * successfull, the input stream of the importcontext is cleared.
+     *
+     * @param context the import context
+     * @return false
+     * @throws Exception if an error occurrs
+     */
+    public boolean execute(ImportContext context) throws Exception {
+        Node parentNode = context.getNode();
+        InputStream in = context.getInputStream();
+        if (in == null) {
+            // assume already consumed
+            return false;
+        }
+        if (!canHandle(context.getContentType())) {
+            // ignore imports
+            return false;
+        }
+
+        // we need a tmp file, since the import could fail
+        File tmpFile = File.createTempFile("__xmlimport", "xml");
+        FileOutputStream out = new FileOutputStream(tmpFile);
+        byte[] buffer = new byte[8192];
+        boolean first = true;
+        boolean isSysView = false;
+        int read;
+        while ((read=in.read(buffer))>0) {
+            out.write(buffer, 0, read);
+            if (first) {
+                first = false;
+                // could be too less information. is a bit a lazy test
+                isSysView = new String(buffer, 0, read).indexOf("<sv:node") >= 0;
+            }
+        }
+        out.close();
+        in.close();
+        in = new FileInputStream(tmpFile);
+        context.setInputStream(in);
+
+        if (isSysView) {
+            // just import sys view
+            try {
+                parentNode.getSession().importXML(parentNode.getPath(), in,
+                        ImportUUIDBehavior.IMPORT_UUID_COLLISION_REMOVE_EXISTING);
+                context.setInputStream(null);
+                // no further processing
+                return true;
+            } catch (RepositoryException e) {
+                // if error occurrs, reset input stream
+                context.setInputStream(new FileInputStream(tmpFile));
+                log.error("Unable to import sysview. will store as normal file: " + e.toString());
+                parentNode.refresh(false);
+            } finally {
+                in.close();
+            }
+        } else {
+            // check 'file' node
+            Node fileNode = parentNode.hasNode(context.getSystemId())
+                    ? parentNode.getNode(context.getSystemId())
+                    : parentNode.addNode(context.getSystemId(), nodeType);
+            if (importResource(context, fileNode, in)) {
+                context.setInputStream(null);
+                // set current node
+                context.setNode(fileNode);
+            } else {
+                context.setInputStream(new FileInputStream(tmpFile));
+            }
+        }
+        return false;
+    }
+
+    /**
+
-        parentNode.getSession().importXML(content.getPath(), in, ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW);
+        try {
+            parentNode.getSession().importXML(content.getPath(), in, ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW);
+        } catch (RepositoryException e) {
+            // if this fails, we ignore import and pass to next command
+            if (content.isNew()) {
+                content.remove();
+            }
+            return false;
+        } finally {
+            in.close();
+        }
+
+    /**
+     * Sets the node type
+     * @param nodeType
+     */
+    public void setNodeType(String nodeType) {
+        this.nodeType = nodeType;
+    }
+
