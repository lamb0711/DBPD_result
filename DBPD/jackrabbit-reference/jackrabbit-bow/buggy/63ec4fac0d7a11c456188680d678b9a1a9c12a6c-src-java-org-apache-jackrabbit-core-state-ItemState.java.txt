redesigned transaction support & PersistenceManager

orginal code contributed by dominique pfister, required a lot of tweaking to make it run & work; not thoroughly tested

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@126221 13f79535-47bb-0310-9956-ffa450edef68

-    protected String baseVersionID;
+     * Flag indicating whether this state is transient
+     */
+    private final boolean isTransient;
+
+    /**
+     * @param isTransient   flag indicating whether this state is transient or not
-    protected ItemState(String parentUUID, ItemId id, int initialStatus) {
+    protected ItemState(String parentUUID, ItemId id, int initialStatus,
+                        boolean isTransient) {
-        baseVersionID = "v0.0";
+        this.isTransient = isTransient;
+     * @param isTransient   flag indicating whether this state is transient or not
-    protected ItemState(ItemState overlayedState, int initialStatus) {
+    protected ItemState(ItemState overlayedState, int initialStatus,
+                        boolean isTransient) {
-        // add this transient state as a listener on the overlayed state
+        this.isTransient = isTransient;
-     * Copy state from another state. Copies over all state variables from
-     * another state.
-     *
-     * @param state state to copy
+     * Copy state information from a state into this state
+     * @param state source state information
-        parentUUID = state.parentUUID;
-        baseVersionID = state.getBaseVersionID();
+        parentUUID = state.getParentUUID();
+     * Pull state information from overlayed state.
+     */
+    void pull() {
+        if (overlayedState != null) {
+            copy(overlayedState);
+        }
+    }
+
+    /**
+     * Push state information into overlayed state.
+     */
+    void push() {
+        if (overlayedState != null) {
+            overlayedState.copy(this);
+        }
+    }
+
+    /**
+     * Connect this state to some underlying overlayed state.
+     */
+    protected void connect(ItemState overlayedState) {
+        if (this.overlayedState != null) {
+            throw new IllegalStateException("Item state already connected: " + this);
+        }
+        this.overlayedState = overlayedState;
+        this.overlayedState.addListener(this);
+    }
+
+    /**
-        return status != STATUS_EXISTING;
+        return isTransient;
-            case ItemState.STATUS_NEW:
-            case ItemState.STATUS_EXISTING:
-            case ItemState.STATUS_EXISTING_REMOVED:
-            case ItemState.STATUS_EXISTING_MODIFIED:
-            case ItemState.STATUS_STALE_MODIFIED:
-            case ItemState.STATUS_STALE_DESTROYED:
-            case ItemState.STATUS_UNDEFINED:
+            case STATUS_NEW:
+            case STATUS_EXISTING:
+            case STATUS_EXISTING_REMOVED:
+            case STATUS_EXISTING_MODIFIED:
+            case STATUS_STALE_MODIFIED:
+            case STATUS_STALE_DESTROYED:
+            case STATUS_UNDEFINED:
-     * Returns the id of the version this item state is based on.
-     *
-     * @return the id of the version this item state is based on.
-     */
-    public String getBaseVersionID() {
-        return baseVersionID;
-    }
-
-    /**
+        // underlying state has been permanently created
+        status = STATUS_EXISTING;
-        // underlying persistent state has been permanently destroyed
-        status = STATUS_STALE_DESTROYED;
+        // underlying state has been permanently destroyed
+        if (isTransient || status != STATUS_EXISTING) {
+            status = STATUS_STALE_DESTROYED;
+        } else {
+            status = STATUS_EXISTING_REMOVED;
+        }
+        // @todo propagate event to our listeners too?
-        status = STATUS_STALE_MODIFIED;
+        if (isTransient || status != STATUS_EXISTING) {
+            status = STATUS_STALE_MODIFIED;
+        } else {
+            // this instance represents existing state, update it
+            pull();
+        }
+        // @todo propagate event to our listeners too?
+        // underlying persistent state has been discarded, discard this instance too
+        discard();
