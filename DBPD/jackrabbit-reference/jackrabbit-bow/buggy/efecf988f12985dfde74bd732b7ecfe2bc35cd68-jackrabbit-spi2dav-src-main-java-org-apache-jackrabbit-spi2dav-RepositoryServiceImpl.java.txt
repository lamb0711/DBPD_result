JCR-2541: spi2dav : EventJournal not implemented

Add Atom Feed based Event Journal implementation.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1213890 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.webdav.AtomFeedConstants;
-import org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery;
-    public EventBundle getEvents(SessionInfo sessionInfo, EventFilter filter,
-                                   long after) throws
-            RepositoryException, UnsupportedRepositoryOperationException {
-        // TODO
-        throw new UnsupportedRepositoryOperationException("Not implemented -> JCR-2541");
+    public EventBundle getEvents(SessionInfo sessionInfo, EventFilter filter, long after) throws RepositoryException,
+            UnsupportedRepositoryOperationException {
+        // TODO: use filters remotely (JCR-3179)
+
+        GetMethod method = null;
+        String rootUri = uriResolver.getWorkspaceUri(sessionInfo.getWorkspaceName());
+        rootUri += "?type=journal"; // TODO should have a way to discover URI template
+
+        try {
+            method = new GetMethod(rootUri);
+            method.addRequestHeader("If-None-Match", "\"" + Long.toHexString(after) + "\""); // TODO
+            initMethod(method, sessionInfo);
+
+            getClient(sessionInfo).executeMethod(method);
+            assert method.getStatusCode() == 200;
+
+            InputStream in = method.getResponseBodyAsStream();
+            Document doc = null;
+            if (in != null) {
+                // read response and try to build a xml document
+                try {
+                    doc = DomUtil.parseDocument(in);
+                } catch (ParserConfigurationException e) {
+                    IOException exception = new IOException("XML parser configuration error");
+                    exception.initCause(e);
+                    throw exception;
+                } catch (SAXException e) {
+                    IOException exception = new IOException("XML parsing error");
+                    exception.initCause(e);
+                    throw exception;
+                } finally {
+                    in.close();
+                }
+            }
+
+            List<Event> events = new ArrayList<Event>();
+
+            ElementIterator entries = DomUtil.getChildren(doc.getDocumentElement(), AtomFeedConstants.N_ENTRY);
+            while (entries.hasNext()) {
+                Element entryElem = entries.next();
+
+                Element contentElem = DomUtil.getChildElement(entryElem, AtomFeedConstants.N_CONTENT);
+                if (contentElem != null
+                        && "application/vnd.apache.jackrabbit.event+xml".equals(contentElem.getAttribute("type"))) {
+                    List<Event> el = buildEventList(contentElem, (SessionInfoImpl) sessionInfo);
+                    for (Event e : el) {
+                        if (e.getDate() > after && (filter == null || filter.accept(e, false))) {
+                            events.add(e);
+                        }
+                    }
+                }
+            }
+
+            return new EventBundleImpl(events, false);
+        } catch (Exception ex) {
+            log.error("extracting events from journal feed", ex);
+            throw new RepositoryException(ex);
+        }
+
+        String userId = null;
+
+        // get user id from enclosing Atom entry element in case this was a feed
+        if (DomUtil.matches(bundleElement, AtomFeedConstants.N_ENTRY)) {
+            Element authorEl = DomUtil.getChildElement(bundleElement, AtomFeedConstants.N_AUTHOR);
+            Element nameEl = authorEl != null ? DomUtil.getChildElement(authorEl, AtomFeedConstants.N_NAME) : null;
+            if (nameEl != null) {
+                userId = DomUtil.getTextTrim(nameEl);
+            }
+        }
+
-            Path eventPath;
-            try {
-                eventPath = uriResolver.getQPath(href, sessionInfo);
-            } catch (RepositoryException e) {
-                // should not occur
-                log.error("Internal error while building Event", e.getMessage());
-                continue;
-            }
-
-            boolean isForNode = (type == Event.NODE_ADDED
-                    || type == Event.NODE_REMOVED || type == Event.NODE_MOVED);
-            
+            Path eventPath = null;
-            try {
-                if (isForNode) {
-                    eventId = uriResolver.getNodeIdAfterEvent(href,
-                            sessionInfo, type == Event.NODE_REMOVED);
-                } else {
-                    eventId = uriResolver.getPropertyId(href, sessionInfo);
+            NodeId parentId = null;
+
+            if (href != null) {
+                try {
+                    eventPath = uriResolver.getQPath(href, sessionInfo);
+                } catch (RepositoryException e) {
+                    // should not occur
+                    log.error("Internal error while building Event", e.getMessage());
+                    continue;
-            } catch (RepositoryException e) {
-                if (isForNode) {
-                    eventId = idFactory.createNodeId((String) null, eventPath);
-                } else {
-                    try {
-                        eventId = idFactory.createPropertyId(
-                                idFactory.createNodeId((String) null,
-                                        eventPath.getAncestor(1)),
-                                eventPath.getName());
-                    } catch (RepositoryException e1) {
-                        log.warn("Unable to build event itemId: ",
-                                e.getMessage());
+
+                boolean isForNode = (type == Event.NODE_ADDED
+                        || type == Event.NODE_REMOVED || type == Event.NODE_MOVED);
+                
+                try {
+                    if (isForNode) {
+                        eventId = uriResolver.getNodeIdAfterEvent(href,
+                                sessionInfo, type == Event.NODE_REMOVED);
+                    } else {
+                        eventId = uriResolver.getPropertyId(href, sessionInfo);
+                    }
+                } catch (RepositoryException e) {
+                    if (isForNode) {
+                        eventId = idFactory.createNodeId((String) null, eventPath);
+                    } else {
+                        try {
+                            eventId = idFactory.createPropertyId(
+                                    idFactory.createNodeId((String) null,
+                                            eventPath.getAncestor(1)),
+                                    eventPath.getName());
+                        } catch (RepositoryException e1) {
+                            log.warn("Unable to build event itemId: ",
+                                    e.getMessage());
+                        }
-            }
-            String parentHref = Text.getRelativeParent(href, 1, true);
-            NodeId parentId = null;
-            try {
-                parentId = uriResolver.getNodeId(parentHref, sessionInfo);
-            } catch (RepositoryException e) {
-                log.warn("Unable to build event parentId: ", e.getMessage());
+
+                String parentHref = Text.getRelativeParent(href, 1, true);
+                try {
+                    parentId = uriResolver.getNodeId(parentHref, sessionInfo);
+                } catch (RepositoryException e) {
+                    log.warn("Unable to build event parentId: ", e.getMessage());
+                }
+                
+            if (userId == null) {
+                // user id not retrieved from container
+                userId = DomUtil.getChildTextTrim(evElem, ObservationConstants.XML_EVENTUSERID, ObservationConstants.NAMESPACE);
+            }
-            events.add(new EventImpl(eventId, eventPath, parentId, type, evElem, getNamePathResolver(sessionInfo), getQValueFactory()));
+            events.add(new EventImpl(eventId, eventPath, parentId, type, userId, evElem,
+                    getNamePathResolver(sessionInfo), getQValueFactory()));
