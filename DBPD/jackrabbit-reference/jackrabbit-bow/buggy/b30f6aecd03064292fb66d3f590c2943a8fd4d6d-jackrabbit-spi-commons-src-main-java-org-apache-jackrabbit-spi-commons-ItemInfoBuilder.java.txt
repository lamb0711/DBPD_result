JCR-2698: Consolidate type safe wrappers for commons-collection classes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@982181 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.math.BigDecimal;
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Iterator;
-import java.util.List;
+import static org.apache.jackrabbit.commons.iterator.Iterators.filterIterator;
+import static org.apache.jackrabbit.commons.iterator.Iterators.transformIterator;
-import javax.jcr.PropertyType;
-import javax.jcr.RepositoryException;
-
-import org.apache.commons.collections.Transformer;
-import org.apache.commons.collections.iterators.EmptyIterator;
-import org.apache.commons.collections.iterators.FilterIterator;
-import org.apache.commons.collections.iterators.TransformIterator;
+import org.apache.jackrabbit.commons.iterator.Iterators;
+import org.apache.jackrabbit.commons.iterator.Predicate;
+import org.apache.jackrabbit.commons.iterator.Transformer;
+import org.apache.jackrabbit.spi.commons.ItemInfoBuilder.NodeInfoBuilder;
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.math.BigDecimal;
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Iterator;
+import java.util.List;
+
-                        mixins.toArray(new Name[mixins.size()]), EmptyIterator.INSTANCE,
+                        mixins.toArray(new Name[mixins.size()]), Iterators.<PropertyId>empty(),
-            return map(itemInfos.iterator(),
-                    new Function<ItemInfo, ChildInfo>(){
-                        public ChildInfo apply(ItemInfo info) {
+            return transformIterator(itemInfos.iterator(),
+                    new Transformer<ItemInfo, ChildInfo>(){
+                        public ChildInfo transform(ItemInfo info) {
-            return map(filter(itemInfos.iterator(),
+            return transformIterator(filterIterator(itemInfos.iterator(),
-                    new Function<ItemInfo, PropertyId>(){
-                        public PropertyId apply(ItemInfo info) {
+                    new Transformer<ItemInfo, PropertyId>(){
+                        public PropertyId transform(ItemInfo info) {
-    // -----------------------------------------------------< private >---
-
-    private interface Predicate<T> {
-        public boolean evaluate(T value);
-    }
-
-    private interface Function<S, T> {
-        public T apply(S s);
-    }
-
-    @SuppressWarnings("unchecked")
-    private static <S, T> Iterator<T> map(Iterator<S> source, final Function<S, T> f) {
-        return new TransformIterator(source, new Transformer() {
-            public Object transform(Object o) {
-                return f.apply((S) o);
-            }
-        });
-    }
-
-    @SuppressWarnings("unchecked")
-    private static <T> Iterator<T> filter(Iterator<T> source, final Predicate<T> predicate) {
-        return new FilterIterator(source, new org.apache.commons.collections.Predicate() {
-            public boolean evaluate(Object object) {
-                return predicate.evaluate((T) object);
-            }
-        });
-    }
-
