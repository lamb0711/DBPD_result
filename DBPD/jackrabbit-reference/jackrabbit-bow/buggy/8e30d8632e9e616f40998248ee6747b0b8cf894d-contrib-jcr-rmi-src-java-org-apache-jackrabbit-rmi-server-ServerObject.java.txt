JCR-94: Versioning support for JCR-RMI, contributed by Felix Meschberger.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159670 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.version.Version;
+import javax.jcr.version.VersionHistory;
+import javax.jcr.version.VersionIterator;
+import org.apache.jackrabbit.rmi.remote.RemoteVersion;
+     * <p>
+     * If the <code>item</code>, this method calls the
+     * {@link #getRemoteNode(Node)} to return the correct remote type.
-            return factory.getRemoteNode((Node) item);
+            return getRemoteNode((Node) item);
+     * Utility method for creating a remote reference for a local node.
+     * Unlike the factory method for creating remote node references, this
+     * method introspects the type of the local node and returns the
+     * corresponding node, version, or version history remote reference using
+     * the remote adapter factory.
+     *
+     * @param item local node, property, or item
+     * @return remote node, property, or item reference
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteNode getRemoteNode(Node node) throws RemoteException {
+        if (node instanceof Version) {
+            return factory.getRemoteVersion((Version) node);
+        } else if (node instanceof VersionHistory) {
+            return factory.getRemoteVersionHistory((VersionHistory) node);
+        } else {
+            return factory.getRemoteNode(node);
+        }
+    }
+
+    /**
-                remotes[i] = factory.getRemoteNode(iterator.nextNode());
+                remotes[i] = getRemoteNode(iterator.nextNode());
+     * local versions. The remote references are created using the
+     * remote adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty array.
+     *
+     * @param versions local version array
+     * @return remote version array
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteVersion[] getRemoteVersionArray(Version[] versions)
+            throws RemoteException {
+        if (versions != null) {
+            RemoteVersion[] remotes = new RemoteVersion[versions.length];
+            for (int i = 0; i < remotes.length; i++) {
+                remotes[i] = factory.getRemoteVersion(versions[i]);
+            }
+            return remotes;
+        } else {
+            return new RemoteVersion[0]; // for safety
+        }
+    }
+
+    /**
+     * Utility method for creating an array of remote references for
+     * local versions. The remote references are created using the
+     * remote adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty iterator.
+     *
+     * @param iterator local version iterator
+     * @return remote version array
+     * @throws RemoteException on RMI errors
+     */
+    protected RemoteVersion[] getRemoteVersionArray(VersionIterator iterator)
+            throws RemoteException {
+        if (iterator != null) {
+            RemoteVersion[] remotes = new RemoteVersion[(int) iterator.getSize()];
+            for (int i = 0; iterator.hasNext(); i++) {
+                remotes[i] = factory.getRemoteVersion(iterator.nextVersion());
+            }
+            return remotes;
+        } else {
+            return new RemoteVersion[0]; // for safety
+        }
+    }
+
+    /**
+     * Utility method for creating an array of remote references for
