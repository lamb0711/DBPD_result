JCR-2402 Observation: avoid running out of memory

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@884154 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.atomic.AtomicInteger;
+     * The maximum number of queued asynchronous events. To avoid of of memory
+     * problems, the default value is 200'000. To change the default, set the
+     * system property jackrabbit.maxQueuedEvents to the required value. If more
+     * events are in the queue, the current thread waits, unless the current thread is
+     * the observation dispatcher itself (in which case only a warning is logged
+     * - usually observation listeners shouldn't cause new events).
+     */
+    private static final int MAX_QUEUED_EVENTS = Integer.parseInt(System.getProperty("jackrabbit.maxQueuedEvents", "200000"));
+
+    /**
+    private AtomicInteger eventQueueSize = new AtomicInteger();
+
+    private long lastError;
+
+            eventQueueSize.getAndAdd(-action.getEventStates().size());
+        int size = eventQueueSize.addAndGet(events.size());
+        if (size > MAX_QUEUED_EVENTS) {
+            boolean logWarning = false;
+            long now = System.currentTimeMillis();
+            // log a warning at most every 5 seconds (to avoid filling the log file)
+            if (lastError == 0 || now > lastError + 5000) {
+                logWarning = true;
+                log.warn("More than " + MAX_QUEUED_EVENTS + " events in the queue", new Exception("Stack Trace"));
+                lastError = now;
+            }
+            if (Thread.currentThread() == notificationThread) {
+                if (logWarning) {
+                    log.warn("Recursive notification?");
+                }
+            } else {
+                if (logWarning) {
+                    log.warn("Waiting");
+                }
+                while (eventQueueSize.get() > MAX_QUEUED_EVENTS) {
+                    try {
+                        Thread.sleep(100);
+                    } catch (InterruptedException e) {
+                        // ignore
+                    }
+                }
+            }
+        }
