check REMOVE permission on save

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156035 13f79535-47bb-0310-9956-ffa450edef68

-    private void validateTransientItems(Iterator iter)
+    private void validateTransientItems(Iterator dirtyIter, Iterator removerIter)
-        // walk through list of transient items and validate each
-        while (iter.hasNext()) {
-            ItemState itemState = (ItemState) iter.next();
+        // walk through list of dirty transient items and validate each
+        while (dirtyIter.hasNext()) {
+            ItemState itemState = (ItemState) dirtyIter.next();
-                if (!accessMgr.isGranted(itemState.getId(), AccessManager.WRITE)) {
-                    String msg = itemMgr.safeGetJCRPath(id) + ": not allowed modify item";
+                if (!accessMgr.isGranted(id, AccessManager.WRITE)) {
+                    String msg = itemMgr.safeGetJCRPath(id) + ": not allowed to modify item";
-                            log.warn(msg);
+                            log.debug(msg);
-                        log.warn(msg);
+                        log.debug(msg);
-                        log.warn(msg);
+                        log.debug(msg);
-                            log.warn(msg);
+                            log.debug(msg);
-                                    log.warn(msg);
+                                    log.debug(msg);
-                 * no need to check the protected flag* as this is checked
+                 * no need to check the protected flag as this is checked
+
+        // walk through list of removed transient items and check REMOVE permission
+        while (removerIter.hasNext()) {
+            ItemState itemState = (ItemState) removerIter.next();
+            ItemId id = itemState.getId();
+            // check WRITE permission
+            if (!accessMgr.isGranted(id, AccessManager.REMOVE)) {
+                String msg = itemMgr.safeGetJCRPath(id) + ": not allowed to remove item";
+                log.debug(msg);
+                throw new AccessDeniedException(msg);
+            }
+        }
-                 * validate access and node type constraints
-                 * (this will also validate child removals)
-                 */
-                validateTransientItems(dirty.iterator());
-
-                /**
+                 * validate access and node type constraints
+                 * (this will also validate child removals)
+                 */
+                validateTransientItems(dirty.iterator(), removed.iterator());
+
+                /**
