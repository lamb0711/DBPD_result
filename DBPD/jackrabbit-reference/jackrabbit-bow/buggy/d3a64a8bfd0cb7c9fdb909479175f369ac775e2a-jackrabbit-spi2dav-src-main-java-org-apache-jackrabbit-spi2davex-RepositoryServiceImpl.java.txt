JCR-3093 : Inconsistency between Session.getProperty and Node.getProperty for binary values

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1182419 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
-import javax.jcr.Credentials;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.PropertyType;
-import javax.jcr.RepositoryException;
-
+import org.apache.jackrabbit.commons.webdav.ValueUtil;
+import org.apache.jackrabbit.spi.commons.value.ValueFormat;
+import org.apache.jackrabbit.spi2dav.ItemResourceConstants;
+import org.apache.jackrabbit.webdav.DavConstants;
+import org.apache.jackrabbit.webdav.MultiStatusResponse;
+import org.apache.jackrabbit.webdav.client.methods.PropFindMethod;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.property.DavPropertyName;
+import org.apache.jackrabbit.webdav.property.DavPropertyNameSet;
+import org.apache.jackrabbit.webdav.property.DavPropertySet;
+import javax.jcr.Credentials;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+    private static final DavPropertyName JCR_TYPE =
+            DavPropertyName.create(ItemResourceConstants.JCR_TYPE_LN, ItemResourceConstants.NAMESPACE);
+
+    private static final DavPropertyName JCR_LENGTH =
+            DavPropertyName.create(ItemResourceConstants.JCR_LENGTH_LN, ItemResourceConstants.NAMESPACE);
+
+    private static final DavPropertyName JCR_LENGTHS =
+            DavPropertyName.create(ItemResourceConstants.JCR_LENGTHS_LN, ItemResourceConstants.NAMESPACE);
+
+    private static final DavPropertyName JCR_GET_STRING =
+            DavPropertyName.create(ItemResourceConstants.JCR_GET_STRING_LN, ItemResourceConstants.NAMESPACE);
+
+    private static final DavPropertyNameSet LAZY_PROPERTY_NAME_SET = new DavPropertyNameSet(){{
+        add(JCR_TYPE);
+        add(JCR_LENGTH);
+        add(JCR_LENGTHS);
+        add(JCR_GET_STRING);
+    }};
+
-        StringBuffer sb = new StringBuffer(getRootURI(sessionInfo));
+        StringBuilder sb = new StringBuilder(getRootURI(sessionInfo));
-        StringBuffer sb = new StringBuffer(getWorkspaceURI(sessionInfo));
+        StringBuilder sb = new StringBuilder(getWorkspaceURI(sessionInfo));
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
-            PropertyInfo propertyInfo = super.getPropertyInfo(sessionInfo, (PropertyId) itemId);
+            PropertyInfo propertyInfo = getPropertyInfo(sessionInfo, (PropertyId) itemId);
+    /**
+     * @see RepositoryService#getPropertyInfo(SessionInfo, PropertyId)
+     */
+    @Override
+    public PropertyInfo getPropertyInfo(SessionInfo sessionInfo, PropertyId propertyId) throws RepositoryException {
+        Path p = getPath(propertyId, sessionInfo);
+        String uri = getURI(p, sessionInfo);
+        PropFindMethod method = null;
+        try {
+            method = new PropFindMethod(uri, LAZY_PROPERTY_NAME_SET, DavConstants.DEPTH_0);
+            getClient(sessionInfo).executeMethod(method);
+            method.checkSuccess();
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length != 1) {
+                throw new ItemNotFoundException("Unable to retrieve the PropertyInfo. No such property " + uri);
+            }
+
+            MultiStatusResponse response = responses[0];
+            DavPropertySet props = response.getProperties(DavServletResponse.SC_OK);
+            int propertyType = PropertyType.valueFromName(props.get(JCR_TYPE).getValue().toString());
+
+            if (propertyType == PropertyType.BINARY) {
+                DavProperty<?> lengthsProp = props.get(JCR_LENGTHS);
+                if (lengthsProp != null) {
+                    // multivalued binary property
+                    long[] lengths = ValueUtil.lengthsFromXml(lengthsProp.getValue());
+                    QValue[] qValues = new QValue[lengths.length];
+                    for (int i = 0 ; i < lengths.length ; i ++) {
+                        qValues[i] = getQValueFactory(sessionInfo).create(lengths[i], uri, i);
+                    }
+                    return new PropertyInfoImpl(propertyId, p, propertyType, qValues);
+                } else {
+                    // single valued binary property
+                    long length = Long.parseLong(props.get(JCR_LENGTH).getValue().toString());
+                    QValue qValue = getQValueFactory(sessionInfo).create(length, uri, 0) ;
+                    return new PropertyInfoImpl(propertyId, p, propertyType, qValue);
+                }
+            } else if (props.contains(JCR_GET_STRING)) {
+                // single valued non-binary property
+                String str = props.get(JCR_GET_STRING).getValue().toString();
+                QValue qValue = ValueFormat.getQValue(str, propertyType, getNamePathResolver(sessionInfo), getQValueFactory(sessionInfo));
+                return new PropertyInfoImpl(propertyId, p, propertyType, qValue);
+            } else {
+                // multivalued non-binary property or some other property that
+                // didn't expose the JCR_GET_STRING dav property.
+                return super.getPropertyInfo(sessionInfo, propertyId);
+            }
+        } catch (IOException e) {
+            log.error("Internal error while retrieving ItemInfo.",e);
+            throw new RepositoryException(e.getMessage());
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
+    }
+
-            StringBuffer args = new StringBuffer();
+            StringBuilder args = new StringBuilder();
-            StringBuffer args = new StringBuffer();
+            StringBuilder args = new StringBuilder();
-            StringBuffer buf = new StringBuffer();
+            StringBuilder buf = new StringBuilder();
-            StringBuffer val = new StringBuffer();
+            StringBuilder val = new StringBuilder();
-            StringBuffer bf = new StringBuffer();
+            StringBuilder bf = new StringBuilder();
-            StringBuffer strVal = new StringBuffer("[");
+            StringBuilder strVal = new StringBuilder("[");
