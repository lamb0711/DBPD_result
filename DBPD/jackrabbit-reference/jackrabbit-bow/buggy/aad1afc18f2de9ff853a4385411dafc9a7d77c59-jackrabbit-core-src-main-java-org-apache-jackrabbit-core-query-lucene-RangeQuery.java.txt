JCR-1855: Update to Lucene 2.4.1

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@756444 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.ConstantScoreRangeQuery;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
- * Implements a variant of the lucene class {@link org.apache.lucene.search.RangeQuery}.
- * This class does not rewrite to basic {@link org.apache.lucene.search.TermQuery}
- * but will calculate the matching documents itself. That way a
- * <code>TooManyClauses</code> can be avoided.
+ * Implements a lucene range query.
-     * Logger instance for this class.
-     */
-    private static final Logger log = LoggerFactory.getLogger(RangeQuery.class);
-
-    /**
-     * The rewritten range query or <code>null</code> if the range spans more
-     * than {@link org.apache.lucene.search.BooleanQuery#maxClauseCount} terms.
-     */
-    private Query stdRangeQuery;
-
-    /**
-     * Tries to rewrite this query into a standard lucene RangeQuery.
-     * This rewrite might fail with a TooManyClauses exception. If that
-     * happens, we use our own implementation.
+     * Rewrites this query into a {@link ConstantScoreRangeQuery} if
+     * {@link #transform} is {@link #TRANSFORM_NONE}.
-            Query stdRangeQueryImpl
-                    = new org.apache.lucene.search.RangeQuery(lowerTerm, upperTerm, inclusive);
-            try {
-                stdRangeQuery = stdRangeQueryImpl.rewrite(reader);
-                return stdRangeQuery;
-            } catch (BooleanQuery.TooManyClauses e) {
-                log.debug("Too many terms to enumerate, using custom RangeQuery");
-                // failed, use own implementation
-                return this;
-            }
+            return new ConstantScoreRangeQuery(lowerTerm.field(),
+                    lowerTerm.text(), upperTerm.text(), inclusive,
+                    inclusive).rewrite(reader);
-        if (stdRangeQuery != null) {
-            stdRangeQuery.extractTerms(terms);
-        }
+        // cannot extract terms
