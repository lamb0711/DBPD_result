JCR-3840 limit the number of null child node definitions to match with to the number of slots available

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1644665 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.concurrent.atomic.AtomicInteger;
-                    diffs.add(new ChildNodeDefDiff(def1, null));
+                    for (int i = 0; i < defs1.size() - defs2.size(); i++) {
+                        diffs.add(new ChildNodeDefDiff(def1, null));
+                    }
-                    diffs.add(new ChildNodeDefDiff(null, def2));
+                    for (int i = 0; i < defs2.size() - defs1.size(); i++) {
+                        diffs.add(new ChildNodeDefDiff(null, def2));
+                    }
+            AtomicInteger allowedNewNull = new AtomicInteger(defs1.size() - defs2.size());
+            AtomicInteger allowedOldNull = new AtomicInteger(defs2.size() - defs1.size());
-                if (!alreadyMatched(results, diff.getNewDef(), diff.getOldDef())) {
+                if (!alreadyMatched(results, diff.getNewDef(), diff.getOldDef(), allowedNewNull, allowedOldNull)) {
+                    if (diff.getNewDef() == null) {
+                        allowedNewNull.decrementAndGet();
+                    }
+                    if (diff.getOldDef() == null) {
+                        allowedOldNull.decrementAndGet();
+                    }
-        private boolean alreadyMatched(final List<ChildNodeDefDiff> result, final QNodeDefinition newDef, final QNodeDefinition oldDef) {
+        private boolean alreadyMatched(final List<ChildNodeDefDiff> result, final QNodeDefinition newDef, final QNodeDefinition oldDef, final AtomicInteger allowedNewNull, final AtomicInteger allowedOldNull) {
+                    break;
+                    break;
+            if (oldDef == null) {
+                if (allowedOldNull.get() < 1) {
+                    containsOldDef = true;
+                }
+            }
+            if (newDef == null) {
+                if (allowedNewNull.get() < 1) {
+                    containsNewDef = true;
+                }
+            }
+
+
