JCR-890: concurrent read-only access to a session

Use the SessionContext and SessionOperations in search

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@983708 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.ItemManager;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.security.AccessManager;
+import org.apache.jackrabbit.core.session.SessionContext;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
-     * The item manager of the session executing the query
+     * Component context of the current session
-    protected final ItemManager itemMgr;
-
-    /**
-     * The session executing the query
-     */
-    protected final SessionImpl session;
-
-    /**
-     * The access manager of the session that executes the query.
-     */
-    protected final AccessManager accessMgr;
+    protected final SessionContext sessionContext;
-     * @param itemMgr         the item manager of the session executing the
-     *                        query.
-     * @param session         the session executing the query.
-     * @param accessMgr       the access manager of the session executiong the
-     *                        query.
+     * @param sessionContext component context of the current session
-    public QueryResultImpl(SearchIndex index,
-                           ItemManager itemMgr,
-                           SessionImpl session,
-                           AccessManager accessMgr,
-                           AbstractQueryImpl queryImpl,
-                           SpellSuggestion spellSuggestion,
-                           ColumnImpl[] columns,
-                           boolean documentOrder,
-                           long offset,
-                           long limit) throws RepositoryException {
+    public QueryResultImpl(
+            SearchIndex index, SessionContext sessionContext,
+            AbstractQueryImpl queryImpl, SpellSuggestion spellSuggestion,
+            ColumnImpl[] columns, boolean documentOrder,
+            long offset, long limit) throws RepositoryException {
-        this.itemMgr = itemMgr;
-        this.session = session;
-        this.accessMgr = accessMgr;
+        this.sessionContext = sessionContext;
+        NameResolver resolver = sessionContext.getSessionImpl();
-            names[i] = session.getJCRName(selectorNames[i]);
+            names[i] = resolver.getJCRName(selectorNames[i]);
-        return new NodeIteratorImpl(itemMgr, getScoreNodes(), 0);
+        return new NodeIteratorImpl(
+                sessionContext.getItemManager(), getScoreNodes(), 0);
-        return new RowIteratorImpl(getScoreNodes(), columns,
-                selectorNames, itemMgr,
-                index.getContext().getHierarchyManager(), session, session.getValueFactory(),
+        return new RowIteratorImpl(
+                getScoreNodes(), columns,
+                selectorNames, sessionContext.getItemManager(),
+                index.getContext().getHierarchyManager(),
+                sessionContext.getSessionImpl(), 
+                sessionContext.getSessionImpl().getValueFactory(),
-            return new DocOrderScoreNodeIterator(itemMgr, resultNodes, 0);
+            return new DocOrderScoreNodeIterator(
+                    sessionContext.getItemManager(), resultNodes, 0);
-                if (node != null && !accessMgr.canRead(null, node.getNodeId())) {
+                if (node != null && !sessionContext.getAccessManager().canRead(
+                        null, node.getNodeId())) {
