JCR-1607: Add a NamespaceHelper in jcr-commons
    - Use NamespaceHelper in core

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@657037 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.NamespaceHelper;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
-import org.apache.jackrabbit.core.NamespaceRegistryImpl;
+import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
-     * The persistent namespace registry where any new namespaces are
-     * automatically registered when new node type definition files are
-     * read.
+     * Current session.
-    private final NamespaceRegistryImpl nsReg;
+    private final SessionImpl session;
-     * The namespace resolver
-     */
-    private final NamespaceResolver nsResolver;
-
-    /**
-     * The resolver used to translate qualified names to JCR names.
-     */
-    private final NamePathResolver resolver;
-
-    /**
-     * @param nsReg      namespace registry
-     * @param resolver
+     * @param session    current session
-            NodeTypeRegistry ntReg, NamespaceRegistryImpl nsReg,
-            NamespaceResolver nsResolver, NamePathResolver resolver, DataStore store) {
-        this.nsResolver = nsResolver;
-        this.resolver = resolver;
+            NodeTypeRegistry ntReg, SessionImpl session, DataStore store) {
-        this.nsReg = nsReg;
+        this.session = session;
-        rootNodeDef = new NodeDefinitionImpl(ntReg.getRootNodeDef(), this,
-                resolver);
+        rootNodeDef =
+            new NodeDefinitionImpl(ntReg.getRootNodeDef(), this, session);
-                    ndi = new NodeDefinitionImpl(nd, this, resolver);
+                    ndi = new NodeDefinitionImpl(nd, this, session);
-                    pdi = new PropertyDefinitionImpl(pd, this, resolver);
+                    pdi = new PropertyDefinitionImpl(pd, this, session);
-                nt = new NodeTypeImpl(ent, def, this, resolver, store);
+                nt = new NodeTypeImpl(ent, def, this, session, store);
-                    NamespaceMapping mapping = new NamespaceMapping(nsResolver);
+                    NamespaceMapping mapping = new NamespaceMapping(session);
-            Iterator iterator = namespaceMap.entrySet().iterator();
-            while (iterator.hasNext()) {
-                Map.Entry entry = (Map.Entry) iterator.next();
-                nsReg.safeRegisterNamespace((String) entry.getKey(),
-                        (String) entry.getValue());
-            }
+            new NamespaceHelper(session).registerNamespaces(namespaceMap);
-            return getNodeType(resolver.getQName(nodeTypeName));
+            return getNodeType(session.getQName(nodeTypeName));
-            Name qname = resolver.getQName(name);
+            Name qname = session.getQName(name);
-                ntNames.add(resolver.getQName(names[i]));
+                ntNames.add(session.getQName(names[i]));
-            def.setName(resolver.getQName(name));
+            def.setName(session.getQName(name));
-                qnames[i] = resolver.getQName(names[i]);
+                qnames[i] = session.getQName(names[i]);
-                def.setPrimaryItemName(resolver.getQName(name));
+                def.setPrimaryItemName(session.getQName(name));
-                            qndef.setName(resolver.getQName(name));
+                            qndef.setName(session.getQName(name));
-                        qndef.setDefaultPrimaryType(resolver.getQName(name));
+                        qndef.setDefaultPrimaryType(session.getQName(name));
-                        qnames[i] = resolver.getQName(names[i]);
+                        qnames[i] = session.getQName(names[i]);
-                            qpdef.setName(resolver.getQName(name));
+                            qpdef.setName(session.getQName(name));
-                            qconstraints[j] = ValueConstraint.create(type, constraints[i], resolver);
+                            qconstraints[j] = ValueConstraint.create(type, constraints[i], session);
-                            qvalues[j] = InternalValue.create(values[i], resolver);
+                            qvalues[j] = InternalValue.create(values[i], session);
