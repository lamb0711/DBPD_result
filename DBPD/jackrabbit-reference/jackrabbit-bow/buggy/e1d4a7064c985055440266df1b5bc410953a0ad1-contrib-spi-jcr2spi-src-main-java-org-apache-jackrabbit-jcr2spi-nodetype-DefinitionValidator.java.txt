JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.nodetype.InvalidNodeTypeDefException;
+import org.apache.jackrabbit.nodetype.NodeTypeConflictException;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.NameFactoryImpl;
-            tmpMap.put(ntd.getQName(), ntd);
+            tmpMap.put(ntd.getName(), ntd);
-                msg.append(((QNodeTypeDefinition) iterator.next()).getQName());
+                msg.append(((QNodeTypeDefinition) iterator.next()).getName());
-        QName name = ntDef.getQName();
+        Name name = ntDef.getName();
-        QName[] supertypes = ntDef.getSupertypes();
+        Name[] supertypes = ntDef.getSupertypes();
-                if (!ntDef.isMixin() && !QName.NT_BASE.equals(ntDef.getQName())
-                        && !est.includesNodeType(QName.NT_BASE)) {
+                if (!ntDef.isMixin() && !NameConstants.NT_BASE.equals(ntDef.getName())
+                        && !est.includesNodeType(NameConstants.NT_BASE)) {
-            if (!ntDef.isMixin() && !QName.NT_BASE.equals(ntDef.getQName())) {
+            if (!ntDef.isMixin() && !NameConstants.NT_BASE.equals(ntDef.getName())) {
-                String msg = "[" + name + "#" + pd.getQName() + "] invalid declaring node type specified";
+                String msg = "[" + name + "#" + pd.getName() + "] invalid declaring node type specified";
-            checkNamespace(pd.getQName());
+            checkNamespace(pd.getName());
-                String msg = "[" + name + "#" + pd.getQName() + "] auto-created properties must specify a name";
+                String msg = "[" + name + "#" + pd.getName() + "] auto-created properties must specify a name";
-                String msg = "[" + name + "#" + pd.getQName() + "] auto-created properties must specify a type";
+                String msg = "[" + name + "#" + pd.getName() + "] auto-created properties must specify a type";
-                        QName ntName = QName.valueOf(constraints[j]);
+                        // TODO improve. don't rely on a specific factory impl
+                        Name ntName = NameFactoryImpl.getInstance().create(constraints[j]);
-                            String msg = "[" + name + "#" + pd.getQName()
+                            String msg = "[" + name + "#" + pd.getName()
-                String msg = "[" + name + "#" + cnd.getQName()
+                String msg = "[" + name + "#" + cnd.getName()
-            checkNamespace(cnd.getQName());
+            checkNamespace(cnd.getName());
-                String msg = "[" + name + "#" + cnd.getQName()
+                String msg = "[" + name + "#" + cnd.getName()
-                String msg = "[" + name + "#" + cnd.getQName()
+                String msg = "[" + name + "#" + cnd.getName()
-            QName dpt = cnd.getDefaultPrimaryType();
+            Name dpt = cnd.getDefaultPrimaryType();
-                    String msg = "[" + name + "#" + cnd.getQName()
+                    String msg = "[" + name + "#" + cnd.getName()
-                        defaultENT = entProvider.getEffectiveNodeType(new QName[] {dpt}, validatedDefs);
+                        defaultENT = entProvider.getEffectiveNodeType(new Name[] {dpt}, validatedDefs);
-                    String msg = "[" + name + "#" + cnd.getQName()
+                    String msg = "[" + name + "#" + cnd.getName()
-                    String msg = "[" + name + "#" + cnd.getQName()
+                    String msg = "[" + name + "#" + cnd.getName()
-            QName[] reqTypes = cnd.getRequiredPrimaryTypes();
+            Name[] reqTypes = cnd.getRequiredPrimaryTypes();
-                    QName rpt = reqTypes[n];
+                    Name rpt = reqTypes[n];
-                        String msg = "[" + name + "#" + cnd.getQName()
+                        String msg = "[" + name + "#" + cnd.getName()
-                        String msg = "[" + name + "#" + cnd.getQName()
+                        String msg = "[" + name + "#" + cnd.getName()
-                            entProvider.getEffectiveNodeType(new QName[] {rpt}, validatedDefs);
+                            entProvider.getEffectiveNodeType(new Name[] {rpt}, validatedDefs);
-                        String msg = "[" + name + "#" + cnd.getQName()
+                        String msg = "[" + name + "#" + cnd.getName()
-                        String msg = "[" + name + "#" + cnd.getQName()
+                        String msg = "[" + name + "#" + cnd.getName()
-    private void checkForCircularInheritance(QName[] supertypes, Stack inheritanceChain, Map ntdMap)
+    private void checkForCircularInheritance(Name[] supertypes, Stack inheritanceChain, Map ntdMap)
-            QName stName = supertypes[i];
+            Name stName = supertypes[i];
-                QName[] sta = ((QNodeTypeDefinition)ntdMap.get(stName)).getSupertypes();
+                Name[] sta = ((QNodeTypeDefinition)ntdMap.get(stName)).getSupertypes();
-        QName[] childNodeNTs = childNodeENT.getAllNodeTypes();
+        Name[] childNodeNTs = childNodeENT.getAllNodeTypes();
-            QName nt = childNodeNTs[i];
+            Name nt = childNodeNTs[i];
-            QName dnt = nodeDefs[i].getDefaultPrimaryType();
-            QName definingNT = nodeDefs[i].getDeclaringNodeType();
+            Name dnt = nodeDefs[i].getDefaultPrimaryType();
+            Name definingNT = nodeDefs[i].getDeclaringNodeType();
-                    EffectiveNodeType ent = entProvider.getEffectiveNodeType(new QName[] {dnt}, ntdMap);
+                    EffectiveNodeType ent = entProvider.getEffectiveNodeType(new Name[] {dnt}, ntdMap);
-                String msg = definingNT + " defines invalid default node type for child node " + nodeDefs[i].getQName();
+                String msg = definingNT + " defines invalid default node type for child node " + nodeDefs[i].getName();
-                String msg = definingNT + " defines invalid default node type for child node " + nodeDefs[i].getQName();
+                String msg = definingNT + " defines invalid default node type for child node " + nodeDefs[i].getName();
-     * Utility method for verifying that the namespace of a <code>QName</code>
+     * Utility method for verifying that the namespace of a <code>Name</code>
-    private void checkNamespace(QName name) throws RepositoryException {
+    private void checkNamespace(Name name) throws RepositoryException {
