re-implementing Workspace methods clone, copy, importXML [work in progress...]
plus various minor fixes and cosmetical changes



git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158927 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.InternalValue;
+import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
+import org.apache.jackrabbit.core.nodetype.PropDef;
+import org.apache.jackrabbit.core.util.ValueHelper;
-import javax.jcr.nodetype.PropertyDef;
-import java.util.ArrayList;
-import java.util.HashMap;
-        node = (NodeImpl) parent.addNode(nodeName, nodeTypeName, uuid);
+        node = parent.addNode(nodeName, nodeTypeName, uuid);
-            Value[] vals = pi.getValues();
+            InternalValue[] iva = pi.getValues();
-            if (node.hasProperty(propName)) {
-                PropertyDef def = node.getProperty(propName).getDefinition();
-                if (def.isProtected()) {
-                    // skip protected property
-                    log.debug("skipping protected property " + propName);
-                    continue;
-                }
-            }
+
+            // find applicable definition
+            EffectiveNodeType ent = node.getEffectiveNodeType();
+            PropDef def;
-            if (vals.length == 1) {
+            if (iva.length == 1) {
-                    // try setting single-value
-                    node.setProperty(propName, vals[0]);
-                } catch (ValueFormatException vfe) {
-                    // try setting value array
-                    node.setProperty(propName, vals, type);
-                } catch (ConstraintViolationException vfe) {
-                    // try setting value array
-                    node.setProperty(propName, vals, type);
+                    // try single-valued
+                    def = ent.getApplicablePropertyDef(propName, type, false);
+                } catch (ConstraintViolationException cve) {
+                    // try multi-valued
+                    def = ent.getApplicablePropertyDef(propName, type, true);
-                node.setProperty(propName, vals, type);
+                def = ent.getApplicablePropertyDef(propName, type, true);
+            }
+
+            if (def.isProtected()) {
+                // skip protected property
+                log.debug("skipping protected property " + propName);
+                continue;
+            }
+
+            // convert InternalValue objects to Value objects using this
+            // session's namespace mappings
+            Value[] va = new Value[iva.length];
+            // check whether type conversion is required
+            if (def.getRequiredType() != PropertyType.UNDEFINED
+                    && def.getRequiredType() != type) {
+                // type doesn't match required type,
+                // type conversion required
+                // FIXME: awkward code
+                for (int i = 0; i < iva.length; i++) {
+                    // convert InternalValue to Value of required type
+                    Value v =
+                            ValueHelper.convert(iva[i].toJCRValue(nsContext),
+                                    def.getRequiredType());
+                    // convert Value to InternalValue using
+                    // current namespace context of xml document
+                    InternalValue ival = InternalValue.create(v, nsContext);
+                    // convert InternalValue back to Value using this
+                    // session's namespace mappings
+                    va[i] = ival.toJCRValue(session.getNamespaceResolver());
+                }
+            } else {
+                // no type conversion required:
+                // convert InternalValue to Value using this
+                // session's namespace mappings
+                for (int i = 0; i < iva.length; i++) {
+                    va[i] = iva[i].toJCRValue(session.getNamespaceResolver());
+                }
+            }
+
+            // multi- or single-valued property?
+            if (va.length == 1) {
+                // could be single- or multi-valued (n == 1)
+                try {
+                    // try setting single-value
+                    node.setProperty(propName, va[0]);
+                } catch (ValueFormatException vfe) {
+                    // try setting value array
+                    node.setProperty(propName, va, type);
+                } catch (ConstraintViolationException cve) {
+                    // try setting value array
+                    node.setProperty(propName, va, type);
+                }
+            } else {
+                // can only be multi-valued (n == 0 || n > 1)
+                node.setProperty(propName, va, type);
