JCR-337 - Remove jcr dependency from dav-library
JCR-343 - Report#init limits the Report interface to DeltaV compliant resources
JCR-340 - ValuesProperty missing property type information
JCR-342 - DavResource#getDavSession() missing
JCR-344 - DeltaVResource lists MKWORKSPACE in the method constant.
JCR-345 - DavException does not allow to specify an exception cause

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@385540 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.version.DeltaVResource;
-import org.apache.jackrabbit.webdav.DavSession;
+import org.apache.jackrabbit.webdav.DavResource;
-public class LocateCorrespondingNodeReport implements Report {
+public class LocateCorrespondingNodeReport extends AbstractJcrReport {
-     * @see Report#init(org.apache.jackrabbit.webdav.version.DeltaVResource, org.apache.jackrabbit.webdav.version.report.ReportInfo)
+     * @see Report#init(DavResource, ReportInfo)
-    public void init(DeltaVResource resource, ReportInfo info) throws DavException {
-        if (resource == null) {
-            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "Resource must not be null.");
-        }
-        DavSession davSession = resource.getSession();
-        if (davSession == null || davSession.getRepositorySession() == null) {
-            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "The resource must provide a non-null session object in order to create the dcr:locate-corresponding-node report.");
-        }
-        if (!getType().isRequestedReportType(info)) {
-            throw new DavException(DavServletResponse.SC_BAD_REQUEST, "dcr:locate-corresponding-node expected.");
-    }
-
+    public void init(DavResource resource, ReportInfo info) throws DavException {
+        // general validation checks
+        super.init(resource, info);
+        // specific for this report: a workspace href must be provided
+        // retrieve href of the corresponding resource in the other workspace
-            this.correspHref = getCorrespondingResourceHref(resource, workspaceHref);
+            this.correspHref = getCorrespondingResourceHref(resource, getRepositorySession(), workspaceHref);
-        }
+    }
-    private static String getCorrespondingResourceHref(DeltaVResource resource, String workspaceHref) throws RepositoryException {
-            DavResourceLocator rLoc = resource.getLocator();
-            String itemPath = rLoc.getJcrPath();
-            Session s = resource.getSession().getRepositorySession();
-            Item item = s.getItem(itemPath);
-            if (item.isNode()) {
-                String workspaceName = rLoc.getFactory().createResourceLocator(rLoc.getPrefix(), workspaceHref).getWorkspaceName();
-                String corrPath = ((Node)item).getCorrespondingNodePath(workspaceName);
-                DavResourceLocator corrLoc = rLoc.getFactory().createResourceLocator(rLoc.getPrefix(), "/" + workspaceName, corrPath, false);
+    /**
+     * Retrieve the href of the corresponding resource in the indicated workspace.
+     *
+     * @param resource
+     * @param session Session object used to access the {@link Node} object
+     * represented by the given resource.
+     * @param workspaceHref
+     * @return
+     * @throws RepositoryException
+     */
+    private static String getCorrespondingResourceHref(DavResource resource, Session session, String workspaceHref) throws RepositoryException {
+        DavResourceLocator rLoc = resource.getLocator();
+        String itemPath = rLoc.getRepositoryPath();
+        Item item = session.getItem(itemPath);
+        if (item.isNode()) {
+            String workspaceName = rLoc.getFactory().createResourceLocator(rLoc.getPrefix(), workspaceHref).getWorkspaceName();
+            String corrPath = ((Node)item).getCorrespondingNodePath(workspaceName);
+            DavResourceLocator corrLoc = rLoc.getFactory().createResourceLocator(rLoc.getPrefix(), "/" + workspaceName, corrPath, false);
-            } else {
+        } else {
