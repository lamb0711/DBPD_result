JCR-1664: JNDI Referencable Issues

Avoid issues with the ordering of the JNDI configuration options by
including the entire Reference instance within BindableRepository.

Also, streamlined the JNDI classes a bit by using the AbstractRepository base class and the JackrabbitRepository interface, and by inlining many of the static methods that weren't being used outside the jndi package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@681031 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.JackrabbitRepository;
+import org.apache.jackrabbit.commons.AbstractRepository;
-import org.apache.jackrabbit.core.config.ConfigurationException;
-import java.io.ObjectOutputStream;
-import javax.jcr.Repository;
-import javax.naming.StringRefAddr;
-public class BindableRepository implements Repository, Referenceable, Serializable {
+public class BindableRepository extends AbstractRepository
+        implements JackrabbitRepository, Referenceable, Serializable {
-    static final long serialVersionUID = -2298220550793843166L;
+    private static final long serialVersionUID = 8864716577016297651L;
-     * The repository configuration file path.
-     */
-    private final String configFilePath;
-
-    /**
-     * The repository home directory path.
-     */
-    private final String repHomeDir;
-
-    /**
-     * type of <code>configFilePath</code> reference address (@see <code>{@link Reference#get(String)}</code>
+     * type of <code>configFilePath</code> reference address
+     * @see Reference#get(String)
+
-     * type of <code>repHomeDir</code> reference address (@see <code>{@link Reference#get(String)}</code>
+     * type of <code>repHomeDir</code> reference address
+     * @see Reference#get(String)
+     * The repository reference
+     */
+    private final Reference reference;
+
+    /**
-    protected transient Repository delegatee;
+    private transient JackrabbitRepository delegatee;
-    protected BindableRepository(String configFilePath, String repHomeDir) {
-        this.configFilePath = configFilePath;
-        this.repHomeDir = repHomeDir;
-        delegatee = null;
-    }
-
-    /**
-     * Creates an initialized BindableRepository instance using the given
-     * configuration information.
-     *
-     * @param configFilePath repository configuration file path
-     * @param repHomeDir     repository home directory path
-     * @return initialized repository instance
-     * @throws RepositoryException if the repository cannot be created
-     */
-    static BindableRepository create(String configFilePath, String repHomeDir)
-            throws RepositoryException {
-        BindableRepository rep = new BindableRepository(configFilePath, repHomeDir);
-        rep.init();
-        return rep;
+    public BindableRepository(Reference reference) throws RepositoryException {
+        this.reference = reference;
+        init();
-        RepositoryConfig config = createRepositoryConfig(configFilePath, repHomeDir);
-        delegatee = createRepository(config);
+        delegatee = getRepository(reference);
-
-     * Creates a repository configuration from a path to the repository.xml file
-     * and the repository home directory.
+     * Creates a repository instance based on the given reference. Can be
+     * overridden by subclasses to return different repositories. The default
+     * implementation returns a {@link RepositoryImpl} instance.
-     * @param configFilePath path to the repository.xml file.
-     * @param repHomeDir     the repository home directory.
-     * @return the repository configuration.
-     * @throws ConfigurationException on configuration error.
+     * @param reference repository reference
+     * @return repository instance
+     * @throws RepositoryException if the repository could not be created
-    protected RepositoryConfig createRepositoryConfig(String configFilePath,
-                                                      String repHomeDir)
-            throws ConfigurationException {
-        return RepositoryConfig.create(configFilePath, repHomeDir);
-    }
-
-    /**
-     * Creates a plain repository instance from a repository
-     * <code>config</code>.
-     *
-     * @param config the repository configuration.
-     * @return the repository instance.
-     * @throws RepositoryException if an error occurs while creating the
-     *                             repository instance.
-     */
-    protected Repository createRepository(RepositoryConfig config)
+    protected JackrabbitRepository getRepository(Reference reference)
+        RepositoryConfig config = RepositoryConfig.create(
+                reference.get(CONFIGFILEPATH_ADDRTYPE).getContent().toString(),
+                reference.get(REPHOMEDIR_ADDRTYPE).getContent().toString());
-    public Session login(String workspaceName)
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
-        return delegatee.login(workspaceName);
-    }
-
-    /**
-     * Delegated to the underlying repository instance.
-     * {@inheritDoc}
-     */
-    public Session login() throws LoginException, RepositoryException {
-        return delegatee.login();
-    }
-
-    /**
-     * Delegated to the underlying repository instance.
-     * {@inheritDoc}
-     */
-    public Session login(Credentials credentials)
-            throws LoginException, RepositoryException {
-        return delegatee.login(credentials);
-    }
-
-    /**
-     * Delegated to the underlying repository instance.
-     * {@inheritDoc}
-     */
-     * Creates a JNDI reference for this content repository. The returned
+     * Returns the JNDI reference for this content repository. The returned
-     * @return the created JNDI reference
+     * @return the JNDI reference
-        Reference ref = new Reference(BindableRepository.class.getName(),
-                BindableRepositoryFactory.class.getName(),
-                null); // no classpath defined
-        ref.add(new StringRefAddr(CONFIGFILEPATH_ADDRTYPE, configFilePath));
-        ref.add(new StringRefAddr(REPHOMEDIR_ADDRTYPE, repHomeDir));
-        return ref;
+        return reference;
-     * Serializes the repository configuration. The default serialization
-     * mechanism is used, as the underlying delegate repository is referenced
-     * using a transient variable.
-     *
-     * @param out the serialization stream
-     * @throws IOException on IO errors
-     * @see Serializable
-     */
-    private void writeObject(ObjectOutputStream out) throws IOException {
-        // delegate to default implementation
-        out.defaultWriteObject();
-    }
-
-    /**
-        } catch (RepositoryException re) {
+        } catch (RepositoryException e) {
-            throw new IOException(re.getMessage());
+            IOException exception = new IOException(e.getMessage());
+            exception.initCause(e);
+            throw exception;
-    void shutdown() {
-        ((RepositoryImpl) delegatee).shutdown();
+    public void shutdown() {
+        delegatee.shutdown();
+
