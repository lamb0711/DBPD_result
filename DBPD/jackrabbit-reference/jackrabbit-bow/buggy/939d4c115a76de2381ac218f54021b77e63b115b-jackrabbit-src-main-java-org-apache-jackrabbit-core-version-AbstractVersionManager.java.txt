JCR-546: Introduced the WriteOperation helper class to hide the handling of the StateManager and the write lock.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@478644 13f79535-47bb-0310-9956-ffa450edef68

+     * Helper for managing write operations.
+     */
+    private class WriteOperation {
+
+        /**
+         * Flag for successful completion of the write operation.
+         */
+        private boolean success = false;
+
+        /**
+         * Saves the pending operations in the {@link StateManager}.
+         *
+         * @throws ItemStateException if the pending state is invalid
+         * @throws RepositoryException if the pending state could not be persisted
+         */
+        public void save() throws ItemStateException, RepositoryException {
+            stateMgr.update();
+            success = true;
+        }
+
+        /**
+         * Closes the write operation. The pending operations are cancelled
+         * if they could not be properly saved. Finally the write lock is
+         * released.
+         */
+        public void close() {
+            try {
+                if (!success) {
+                    // update operation failed, cancel all modifications
+                    stateMgr.cancel();
+                }
+            } finally {
+                releaseWriteLock();
+            }
+        }
+    }
+
+    /**
+     * Starts a write operation by acquiring the write lock and setting the
+     * item state manager to the "edit" state. If something goes wrong, the
+     * write lock is released and an exception is thrown.
+     * <p>
+     * The pattern for using this method and the returned helper instance is:
+     * <pre>
+     *     WriteOperation operation = startWriteOperation();
+     *     try {
+     *         ...
+     *         operation.save(); // if everything is OK
+     *         ...
+     *     } catch (...) {
+     *         ...
+     *     } finally {
+     *         operation.close();
+     *     }
+     * </pre>
+     *
+     * @return write operation helper
+     * @throws RepositoryException if the write operation could not be started
+     */
+    private WriteOperation startWriteOperation() throws RepositoryException {
+        boolean success = false;
+        acquireWriteLock();
+        try {
+            stateMgr.edit();
+            success = true;
+            return new WriteOperation();
+        } catch (IllegalStateException e) {
+            throw new RepositoryException("Unable to start edit operation.", e);
+        } finally {
+            if (!success) {
+                releaseWriteLock();
+            }
+        }
+    }
+
+    /**
-
-        acquireWriteLock();
-        try {
-            stateMgr.edit();
-        } catch (IllegalStateException e) {
-            releaseWriteLock();
-            throw new RepositoryException("Unable to start edit operation", e);
-        }
-
-        boolean succeeded = false;
-
+        WriteOperation operation = startWriteOperation();
-            stateMgr.update();
-            succeeded = true;
+            operation.save();
-            if (!succeeded) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
-            }
-            releaseWriteLock();
+            operation.close();
-
-        acquireWriteLock();
-        try {
-            stateMgr.edit();
-        } catch (IllegalStateException e) {
-            releaseWriteLock();
-            throw new VersionException("Unable to start edit operation", e);
-        }
-        boolean succeeded = false;
+        WriteOperation operation = startWriteOperation();
-            stateMgr.update();
-            succeeded = true;
+            operation.save();
-            if (!succeeded) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
-            }
-            releaseWriteLock();
+            operation.close();
-
-        acquireWriteLock();
+        WriteOperation operation = startWriteOperation();
-            stateMgr.edit();
-        } catch (IllegalStateException e) {
-            releaseWriteLock();
-            throw new VersionException("Unable to start edit operation", e);
-        }
-        InternalVersion v = null;
-        boolean success = false;
-        try {
-            v = history.setVersionLabel(version, label, move);
-            stateMgr.update();
-            success = true;
+            InternalVersion v = history.setVersionLabel(version, label, move);
+            operation.save();
+            return v;
+            return null;
-            if (!success) {
-                // update operation failed, cancel all modifications
-                stateMgr.cancel();
-            }
-            releaseWriteLock();
+            operation.close();
-        return v;
