JCR-1276: A Property and a Node Can Have the Same Name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605622 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.NodeId;
-import org.apache.jackrabbit.core.NodeId;
-import org.apache.jackrabbit.value.ReferenceValue;
-import org.apache.jackrabbit.uuid.UUID;
-import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
+import org.apache.jackrabbit.uuid.UUID;
+import org.apache.jackrabbit.value.ReferenceValue;
-
-        if (parent.hasProperty(nodeName)) {
-            /**
-             * a property with the same name already exists; if this property
-             * has been imported as well (e.g. through document view import
-             * where an element can have the same name as one of the attributes
-             * of its parent element) we have to rename the onflicting property;
-             *
-             * see http://issues.apache.org/jira/browse/JCR-61
-             */
-            Property conflicting = parent.getProperty(nodeName);
-            if (conflicting.isNew()) {
-                // assume this property has been imported as well;
-                // rename conflicting property
-                // @todo use better reversible escaping scheme to create unique name
-                Name newName = NameFactoryImpl.getInstance().create(nodeName.getNamespaceURI(), nodeName.getLocalName() + "_");
-                if (parent.hasProperty(newName)) {
-                    newName = NameFactoryImpl.getInstance().create(newName.getNamespaceURI(), newName.getLocalName() + "_");
-                }
-
-                if (conflicting.getDefinition().isMultiple()) {
-                    parent.setProperty(newName, conflicting.getValues());
-                } else {
-                    parent.setProperty(newName, conflicting.getValue());
-                }
-                conflicting.remove();
-            }
-        }
-
