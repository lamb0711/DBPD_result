JCR-3184: consistency check -- add the ability to adopt orphaned nodes to a caller-specified "lost+found" node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1221789 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+    private static final NameFactory NF = NameFactoryImpl.getInstance();
+    
-    public ConsistencyReport check(String[] uuids, boolean recursive, boolean fix) throws RepositoryException {
+    public ConsistencyReport check(String[] uuids, boolean recursive, boolean fix, String lostNFoundId)
+            throws RepositoryException {
-        int total = internalCheckConsistency(uuids, recursive, fix, reports);
+        int total = internalCheckConsistency(uuids, recursive, fix, reports, lostNFoundId);
-    private int internalCheckConsistency(String[] uuids, boolean recursive, boolean fix, Set<ReportItem> reports) throws RepositoryException {
+    private int internalCheckConsistency(String[] uuids, boolean recursive, boolean fix, Set<ReportItem> reports,
+            String lostNFoundId) throws RepositoryException {
-        Collection<NodePropBundle> modifications = new ArrayList<NodePropBundle>();        
+        Collection<NodePropBundle> modifications = new ArrayList<NodePropBundle>();
+        Set<NodeId> orphaned = new HashSet<NodeId>();
+
+        NodeId lostNFound = null;
+        if (fix && lostNFoundId != null) {
+            // do we have a "lost+found" node?
+            try {
+                NodeId tmpid = new NodeId(lostNFoundId);
+                NodePropBundle lfBundle = pm.loadBundle(tmpid);
+                if (lfBundle == null) {
+                    log.error("specified 'lost+found' node does not exist");
+                } else if (!NameConstants.NT_UNSTRUCTURED.equals(lfBundle.getNodeTypeName())) {
+                    log.error("specified 'lost+found' node is not of type nt:unstructered");
+                } else {
+                    lostNFound = lfBundle.getId();
+                }
+            } catch (Exception ex) {
+                log.error("finding 'lost+found' folder", ex);
+            }
+        }
-                            checkBundleConsistency(id, bundle, fix, modifications, reports);
+                            checkBundleConsistency(id, bundle, fix, modifications, lostNFound, orphaned, reports);
-                        checkBundleConsistency(id, bundle, fix, modifications, reports);
+                        checkBundleConsistency(id, bundle, fix, modifications, lostNFound, orphaned, reports);
+        if (fix && lostNFoundId != null && !orphaned.isEmpty()) {
+            // do we have things to add to "lost+found"?
+            try {
+                NodePropBundle lfBundle = pm.loadBundle(lostNFound);
+                if (lfBundle == null) {
+                    log.error("specified 'lost+found' node does not exist");
+                } else if (!NameConstants.NT_UNSTRUCTURED.equals(lfBundle.getNodeTypeName())) {
+                    log.error("specified 'lost+found' node is not of type nt:unstructered");
+                } else {
+                    lfBundle.markOld();
+                    for (NodeId orphan : orphaned) {
+                        String nodeName = orphan + "-" + System.currentTimeMillis();
+                        lfBundle.addChildNodeEntry(NF.create("", nodeName), orphan);
+                    }
+                    pm.storeBundle(lfBundle);
+                    pm.evictBundle(lfBundle.getId());
+                }
+            } catch (Exception ex) {
+                log.error("trying orphan adoption", ex);
+            }
+        }
+
-                                          Set<ReportItem> reports) {
+                                          NodeId lostNFoundId, Set<NodeId> orphaned, Set<ReportItem> reports) {
+                    orphaned.add(id);
+                    if (lostNFoundId != null) {
+                        bundle.setParentId(lostNFoundId);
+                        modifications.add(bundle);
+                    }
-                        parentBundle.addChildNodeEntry(NameFactoryImpl
-                                .getInstance().create("{}" + nodeName), id);
+                        parentBundle.addChildNodeEntry(NF.create("{}" + nodeName), id);
