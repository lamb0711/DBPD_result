reworked transaction support, contributed by dominique

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151380 13f79535-47bb-0310-9956-ffa450edef68

-public class SessionItemStateManager implements ItemStateManager {
+public class SessionItemStateManager implements UpdatableItemStateManager {
-    private final ItemStateManager persistentStateMgr;
+    private final UpdatableItemStateManager persistentStateMgr;
-                                   ItemStateManager persistentStateMgr,
+                                   UpdatableItemStateManager persistentStateMgr,
-    public NodeReferences getNodeReferences(NodeId targetId)
+    public NodeReferences getNodeReferences(NodeReferencesId id)
-        return persistentStateMgr.getNodeReferences(targetId);
+        return persistentStateMgr.getNodeReferences(id);
-     * @see ItemStateManager#beginUpdate
+     * @see UpdatableItemStateManager#edit
-    public UpdateOperation beginUpdate() throws ItemStateException {
-        return persistentStateMgr.beginUpdate();
+    public void edit() throws ItemStateException {
+        persistentStateMgr.edit();
+    }
+
+    /**
+     * @see UpdatableItemStateManager#createNew
+     */
+    public NodeState createNew(String uuid, QName nodeTypeName, String parentUUID) {
+        return persistentStateMgr.createNew(uuid, nodeTypeName, parentUUID);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#createNew
+     */
+    public PropertyState createNew(QName propName, String parentUUID) {
+        return persistentStateMgr.createNew(propName, parentUUID);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#store
+     */
+    public void store(ItemState state) {
+        persistentStateMgr.store(state);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#store
+     */
+    public void store(NodeReferences refs) {
+        persistentStateMgr.store(refs);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#destroy
+     */
+    public void destroy(ItemState state) {
+        persistentStateMgr.destroy(state);
+    }
+
+    /**
+     * @see UpdatableItemStateManager#cancel
+     */
+    public void cancel() {
+        persistentStateMgr.cancel();
+    }
+
+    /**
+     * @see UpdatableItemStateManager#update
+     */
+    public void update() throws ItemStateException {
+        persistentStateMgr.update();
