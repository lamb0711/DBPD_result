[JCR-127] Speedup Startup
          Removing one layer in versioning, thus mapping virtual items
          directly from the peristence layer.


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@191172 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.core.version.persistence;
+package org.apache.jackrabbit.core.version;
-import org.apache.jackrabbit.core.version.InternalFrozenNode;
-import org.apache.jackrabbit.core.version.InternalVersion;
-import org.apache.jackrabbit.core.version.InternalVersionHistory;
-import org.apache.jackrabbit.core.version.InternalVersionItem;
- *
+ * Implements a <code>InternalVersion</code>
-class InternalVersionImpl extends InternalVersionItemImpl
+public class InternalVersionImpl extends InternalVersionItemImpl
-    private PersistentNode node;
+    private NodeStateEx node;
-    InternalVersionImpl(InternalVersionHistoryImpl vh, PersistentNode node, QName name) {
+    public InternalVersionImpl(InternalVersionHistoryImpl vh, NodeStateEx node, QName name) {
+    /**
+     * {@inheritDoc}
+     */
+    /**
+     * {@inheritDoc}
+     */
-     * Returns the name of this version
-     *
-     * @return
+     * {@inheritDoc}
-    protected PersistentNode getNode() {
-        return node;
-    }
-
-     * Returns the frozen node
-     *
-     * @return
+     * {@inheritDoc}
-     * adds a successor version to the internal cache
-     *
-     * @param successor
-     */
-    private void addSuccessor(InternalVersion successor) {
-        successors.add(successor);
-    }
-
-    /**
-     * resolves the predecessors property and indirectly adds it self to their
-     * successor list.
-     */
-    void resolvePredecessors() {
-        InternalValue[] values = node.getPropertyValues(JCR_PREDECESSORS);
-        if (values != null) {
-            for (int i = 0; i < values.length; i++) {
-                InternalVersionImpl v = (InternalVersionImpl) versionHistory.getVersion(values[i].internalValue().toString());
-                predecessors.add(v);
-                v.addSuccessor(this);
-            }
-        }
-    }
-
-    /**
+     * {@inheritDoc}
+     */
+    public boolean isMoreRecent(InternalVersion v) {
+        for (int i = 0; i < predecessors.size(); i++) {
+            InternalVersion pred = (InternalVersion) predecessors.get(i);
+            if (pred.equals(v) || pred.isMoreRecent(v)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public InternalVersionHistory getVersionHistory() {
+        return versionHistory;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean hasLabel(QName label) {
+        return internalHasLabel(label);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public QName[] getLabels() {
+        return internalGetLabels();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public boolean isRootVersion() {
+        return isRoot;
+    }
+
+    /**
+     * resolves the predecessors property and indirectly adds it self to their
+     * successor list.
+     */
+    void resolvePredecessors() {
+        InternalValue[] values = node.getPropertyValues(JCR_PREDECESSORS);
+        if (values != null) {
+            for (int i = 0; i < values.length; i++) {
+                InternalVersionImpl v = (InternalVersionImpl) versionHistory.getVersion(values[i].internalValue().toString());
+                predecessors.add(v);
+                v.addSuccessor(this);
+            }
+        }
+    }
+
+    /**
+     * adds a successor version to the internal cache
+     *
+     * @param successor
+     */
+    private void addSuccessor(InternalVersion successor) {
+        successors.add(successor);
+    }
+
+    /**
-     * Checks if this version is more recent than the given version <code>v</code>.
-     * A version is more recent if and only if it is a successor (or a successor
-     * of a successor, etc., to any degree of separation) of the compared one.
-     *
-     * @param v the version to check
-     * @return <code>true</code> if the version is more recent;
-     *         <code>false</code> otherwise.
-     */
-    public boolean isMoreRecent(InternalVersion v) {
-        for (int i = 0; i < predecessors.size(); i++) {
-            InternalVersion pred = (InternalVersion) predecessors.get(i);
-            if (pred.equals(v) || pred.isMoreRecent(v)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * returns the internal version history of this version
-     *
-     * @return
-     */
-    public InternalVersionHistory getVersionHistory() {
-        return versionHistory;
-    }
-
-    /**
-    protected boolean internalAddLabel(QName label) {
+    boolean internalAddLabel(QName label) {
-    protected boolean internalRemoveLabel(QName label) {
+    boolean internalRemoveLabel(QName label) {
-    protected boolean internalHasLabel(QName label) {
+    boolean internalHasLabel(QName label) {
-     * {@inheritDoc}
-     */
-    public boolean hasLabel(QName label) {
-        return internalHasLabel(label);
-    }
-
-    /**
-    protected QName[] internalGetLabels() {
+    QName[] internalGetLabels() {
-
-    /**
-     * {@inheritDoc}
-     */
-    public QName[] getLabels() {
-        return internalGetLabels();
-    }
-
-    /**
-     * checks if this is the root version.
-     *
-     * @return <code>true</code> if this version is the root version;
-     *         <code>false</code> otherwise.
-     */
-    public boolean isRootVersion() {
-        return isRoot;
-    }
-
