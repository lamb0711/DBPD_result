JCR-RMI: Added ObservationManager implementation contributed by Felix Meschberger.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@191722 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.List;
+import javax.jcr.RepositoryException;
-import javax.jcr.nodetype.NodeType;
-import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.observation.Event;
+import javax.jcr.observation.EventIterator;
+import javax.jcr.observation.ObservationManager;
+import org.apache.jackrabbit.rmi.remote.RemoteEventCollection;
+import org.apache.jackrabbit.rmi.remote.RemoteObservationManager;
+     * Creates a {@link ServerObservationManager ServerObservationManager}
+     * instance.
+     * {@inheritDoc}
+     */
+    public RemoteObservationManager getRemoteObservationManager(
+        ObservationManager observationManager) throws RemoteException {
+        return new ServerObservationManager(observationManager, this);
+    }
+    
+    /**
+    /**
+     * Creates a {@link ServerEventCollection ServerEventCollection} instances.
+     * {@inheritDoc}
+     */
+    public RemoteEventCollection getRemoteEvent(long listenerId, EventIterator events)
+            throws RemoteException {
+        RemoteEventCollection.RemoteEvent[] remoteEvents;
+        if (events != null) {
+            List eventList = new ArrayList();
+            for (int i=0; events.hasNext(); i++) {
+                Event event = events.nextEvent();
+                try {
+                    eventList.add(new ServerEventCollection.ServerEvent(event.getType(),
+                        event.getPath(), event.getUserID()));
+                } catch (RepositoryException re) {
+                    throw new RemoteException(re.getMessage(), re);
+                }
+            }
+            remoteEvents = new RemoteEventCollection.RemoteEvent[eventList.size()];
+            eventList.toArray(remoteEvents);
+            
+        } else {
+            remoteEvents = new RemoteEventCollection.RemoteEvent[0]; // for safety
+        }
+        
+        return new ServerEventCollection(listenerId, remoteEvents);
+    }
