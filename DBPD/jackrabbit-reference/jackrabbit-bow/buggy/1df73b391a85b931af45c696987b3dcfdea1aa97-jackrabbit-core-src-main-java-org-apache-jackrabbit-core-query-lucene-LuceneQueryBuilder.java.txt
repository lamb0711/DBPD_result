JCR-901: Support synonym searches

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@536246 13f79535-47bb-0310-9956-ffa450edef68

+     * The synonym provider or <code>null</code> if none is configured.
+     */
+    private SynonymProvider synonymProvider;
+
+    /**
-     * @param root          the root node of the abstract query tree.
-     * @param session       of the user executing this query.
-     * @param sharedItemMgr the shared item state manager of the workspace.
-     * @param nsMappings    namespace resolver for internal prefixes.
-     * @param analyzer      for parsing the query statement of the contains function.
-     * @param propReg       the property type registry.
+     * @param root            the root node of the abstract query tree.
+     * @param session         of the user executing this query.
+     * @param sharedItemMgr   the shared item state manager of the workspace.
+     * @param nsMappings      namespace resolver for internal prefixes.
+     * @param analyzer        for parsing the query statement of the contains
+     *                        function.
+     * @param propReg         the property type registry.
+     * @param synonymProvider the synonym provider or <code>null</code> if node
+     *                        is configured.
-                               PropertyTypeRegistry propReg) {
+                               PropertyTypeRegistry propReg,
+                               SynonymProvider synonymProvider) {
+        this.synonymProvider = synonymProvider;
-     * @param analyzer      for parsing the query statement of the contains function.
-     * @param propReg       the property type registry to lookup type information.
+     * @param analyzer      for parsing the query statement of the contains
+     *                      function.
+     * @param propReg       the property type registry to lookup type
+     *                      information.
+        return createQuery(root, session, sharedItemMgr, 
+                nsMappings, analyzer, propReg, null);
+    }
+
+    /**
+     * Creates a lucene {@link org.apache.lucene.search.Query} tree from an
+     * abstract query tree.
+     *
+     * @param root            the root node of the abstract query tree.
+     * @param session         of the user executing the query.
+     * @param sharedItemMgr   the shared item state manager of the workspace.
+     * @param nsMappings      namespace resolver for internal prefixes.
+     * @param analyzer        for parsing the query statement of the contains
+     *                        function.
+     * @param propReg         the property type registry to lookup type
+     *                        information.
+     * @param synonymProvider the synonym provider or <code>null</code> if node
+     *                        is configured.
+     * @return the lucene query tree.
+     * @throws RepositoryException if an error occurs during the translation.
+     */
+    public static Query createQuery(QueryRootNode root,
+                                    SessionImpl session,
+                                    ItemStateManager sharedItemMgr,
+                                    NamespaceMappings nsMappings,
+                                    Analyzer analyzer,
+                                    PropertyTypeRegistry propReg,
+                                    SynonymProvider synonymProvider)
+            throws RepositoryException {
-                sharedItemMgr, nsMappings, analyzer, propReg);
+                sharedItemMgr, nsMappings, analyzer, propReg, synonymProvider);
-            QueryParser parser = new QueryParser(fieldname, analyzer);
+            QueryParser parser = new QueryParser(
+                    fieldname, analyzer, synonymProvider);
