- new interface EffectiveNodeTypeProvider
- new interface ItemDefinitionProvider
- limit access to NodeTypeRegistry and simplify the NodeTypeRegistry
  interface.
- avoid duplicate code dealing with logic of EffectiveNodeType
  and retrieval of QItemDefinitions.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520408 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.nodetype.ItemDefinitionProvider;
+import org.apache.jackrabbit.jcr2spi.nodetype.EffectiveNodeTypeProvider;
-        ntManager = new NodeTypeManagerImpl(workspace.getNodeTypeRegistry(), getNamespaceResolver(), internalGetValueFactory(), getQValueFactory());
-        validator = new ItemStateValidator(workspace.getNodeTypeRegistry(), this);
+        ntManager = new NodeTypeManagerImpl(workspace.getNodeTypeRegistry(), this, getJcrValueFactory(), getQValueFactory());
+        validator = new ItemStateValidator(this);
-        return internalGetValueFactory();
-    }
-
-    /**
-     * Same as {@link #getValueFactory()} but omits the check, if this repository
-     * is really level 2 compliant. Therefore, this method may be used for
-     * internal functionality only, that require creation and conversion of
-     * JCR values.
-     *
-     * @return
-     * @throws RepositoryException
-     */
-    ValueFactory internalGetValueFactory() throws RepositoryException {
-        return config.getValueFactory();
+        return getJcrValueFactory();
-        return new SessionItemStateManager(workspaceStateManager, getValidator(), getQValueFactory(), isf);
+        return new SessionItemStateManager(workspaceStateManager, getValidator(), getQValueFactory(), isf, this);
-     * Returns the <code>AccessManager</code> associated with this session.
-     *
-     * @return the <code>AccessManager</code> associated with this session
-     * Returns the <code>VersionManager</code> associated with this session.
-     *
-     * @return the <code>VersionManager</code> associated with this session
+    /**
+     * @see ManagerProvider#getItemDefinitionProvider()
+     */
+    public ItemDefinitionProvider getItemDefinitionProvider() {
+        return workspace.getItemDefinitionProvider();
+    }
+
+    /**
+     * @see ManagerProvider#getEffectiveNodeTypeProvider()
+     */
+    public EffectiveNodeTypeProvider getEffectiveNodeTypeProvider() {
+        return workspace.getEffectiveNodeTypeProvider();
+    }
+
+    /**
+     * @see ManagerProvider#getQValueFactory()
+     */
+    public QValueFactory getQValueFactory() throws RepositoryException {
+        return config.getRepositoryService().getQValueFactory();
+    }
+
+    /**
+     * @see ManagerProvider#getJcrValueFactory()
+     */
+    public ValueFactory getJcrValueFactory() throws RepositoryException {
+        return config.getValueFactory();
+    }
+
-    public QValueFactory getQValueFactory() throws RepositoryException {
-        return config.getRepositoryService().getQValueFactory();
-    }
-
