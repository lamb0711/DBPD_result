JCR-131: simplifying internal data model (NodeState) by limiting a node to *one* parent



git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@191499 13f79535-47bb-0310-9956-ffa450edef68

-    static final long serialVersionUID = -1785389681811057946L;
-
-    /**
-     * List of parent UUIDs: there's <i>one</i> entry for every parent although
-     * a parent might have more than one child entries refering to <i>this</i>
-     * node state.
-     * <p/>
-     * Furthermore:
-     * <p/>
-     * <code>parentUUIDs.contains(super.parentUUID) == true</code>
-     */
-    protected List parentUUIDs = new ArrayList();
+    static final long serialVersionUID = -3210487938753054604L;
-        if (parentUUID != null) {
-            parentUUIDs.add(parentUUID);
-        }
-        parentUUIDs.clear();
-        parentUUIDs.addAll(nodeState.getParentUUIDs());
-     * Returns the UUIDs of the parent <code>NodeState</code>s or <code>null</code>
-     * if either this item state represents the root node or this item state is
-     * 'free floating', i.e. not attached to the repository's hierarchy.
-     *
-     * @return the UUIDs of the parent <code>NodeState</code>s
-     * @see #addParentUUID
-     * @see #removeParentUUID
-     */
-    public synchronized List getParentUUIDs() {
-        return Collections.unmodifiableList(parentUUIDs);
-    }
-
-    /**
-     * Adds the specified UUID to the list of parent UUIDs of this node state.
-     *
-     * @param uuid the UUID of the parent node
-     * @see #getParentUUIDs
-     * @see #removeParentUUID
-     */
-    public synchronized void addParentUUID(String uuid) {
-        if (parentUUIDs.isEmpty()) {
-            parentUUID = uuid;
-        }
-        parentUUIDs.add(uuid);
-    }
-
-    /**
-     * Removes the specified UUID from the list of parent UUIDs of this node state.
-     *
-     * @param uuid the UUID of the parent node
-     * @return <code>true</code> if the specified UUID was contained in the set
-     *         of parent UUIDs and could be removed.
-     * @see #getParentUUIDs
-     * @see #addParentUUID
-     */
-    public synchronized boolean removeParentUUID(String uuid) {
-        if (parentUUID.equals(uuid)) {
-            parentUUID = null;
-        }
-        boolean removed = parentUUIDs.remove(uuid);
-        if (parentUUID == null) {
-            // change primary parent
-            if (!parentUUIDs.isEmpty()) {
-                parentUUID = (String) parentUUIDs.iterator().next();
-            }
-        }
-        return removed;
-    }
-
-    /**
-     * Removes all parent UUIDs of this node state.
-     */
-    public synchronized void removeAllParentUUIDs() {
-        parentUUIDs.clear();
-        parentUUID = null;
-    }
-
-    /**
-     * Sets the UUIDs of the parent <code>NodeState</code>s.
-     */
-    public synchronized void setParentUUIDs(List uuids) {
-        parentUUIDs.clear();
-        parentUUIDs.addAll(uuids);
-        if (!parentUUIDs.isEmpty()) {
-            parentUUID = (String) parentUUIDs.iterator().next();
-        } else {
-            parentUUID = null;
-        }
-    }
-
-    /**
+     * Returns the <code>ChildNodeEntry</code> with the specified uuid or
+     * <code>null</code> if there's no such entry.
+     *
+     * @param uuid UUID of a child node state.
+     * @return the <code>ChildNodeEntry</code> with the specified uuid or
+     *         <code>null</code> if there's no such entry.
+     * @see #addChildNodeEntry
+     * @see #removeChildNodeEntry
+     */
+    public synchronized ChildNodeEntry getChildNodeEntry(String uuid) {
+        return childNodeEntries.get(uuid);
+    }
+
+    /**
-     * Returns a list of <code>ChildNodeEntry</code> objects denoting the
-     * child nodes of this node that refer to the specified UUID.
-     *
-     * @param uuid UUID of a child node state.
-     * @return list of <code>ChildNodeEntry</code> objects
-     * @see #addChildNodeEntry
-     * @see #removeChildNodeEntry
-     */
-    public synchronized List getChildNodeEntries(String uuid) {
-        return childNodeEntries.get(uuid);
-    }
-
-    /**
-     * Adds a new <code>ChildNodeEntry<code>.
+     * Adds a new <code>ChildNodeEntry</code>.
-     * @param nodeName <code>QName<code> object specifying the name of the new entry.
+     * @param nodeName <code>QName</code> object specifying the name of the new entry.
-     * @return the newly added <code>ChildNodeEntry<code>
+     * @return the newly added <code>ChildNodeEntry</code>
-    public synchronized ChildNodeEntry addChildNodeEntry(QName nodeName, String uuid) {
+    public synchronized ChildNodeEntry addChildNodeEntry(QName nodeName,
+                                                         String uuid) {
-     * Renames a new <code>ChildNodeEntry<code>.
+     * Renames a new <code>ChildNodeEntry</code>.
-     * @param oldName <code>QName<code> object specifying the entry's old name
+     * @param oldName <code>QName</code> object specifying the entry's old name
-     * @param newName <code>QName<code> object specifying the entry's new name
+     * @param newName <code>QName</code> object specifying the entry's new name
-            ChildNodeEntry newEntry = addChildNodeEntry(newName, oldEntry.getUUID());
+            ChildNodeEntry newEntry =
+                    addChildNodeEntry(newName, oldEntry.getUUID());
-     * Removes all <code>ChildNodeEntry<code>s.
+     * Removes a <code>ChildNodeEntry</code>.
+     *
+     * @param uuid UUID of the entry to be removed
+     * @return <code>true</code> if the specified child node entry was found
+     *         in the list of child node entries and could be removed.
+     */
+    public synchronized boolean removeChildNodeEntry(String uuid) {
+        ChildNodeEntry entry = childNodeEntries.remove(uuid);
+        if (entry != null) {
+            notifyNodeRemoved(entry);
+        }
+        return entry != null;
+    }
+
+    /**
+     * Removes all <code>ChildNodeEntry</code>s.
-        childNodeEntries.removeAll();
+        Iterator iter = childNodeEntries.entries().iterator();
+        while (iter.hasNext()) {
+            ChildNodeEntry entry = (ChildNodeEntry) iter.next();
+            removeChildNodeEntry(entry.getUUID());
+        }
-     * Adds a <code>PropertyEntry<code>.
+     * Adds a <code>PropertyEntry</code>.
-     * @param propName <code>QName<code> object specifying the property name
+     * @param propName <code>QName</code> object specifying the property name
-     * Removes a <code>PropertyEntry<code>.
+     * Removes a <code>PropertyEntry</code>.
-     * @param propName <code>QName<code> object specifying the property name
+     * @param propName <code>QName</code> object specifying the property name
-     * Removes all <code>PropertyEntry<code>s.
+     * Removes all <code>PropertyEntry</code>s.
-     * Returns a list of parent UUID's, that do not exist in the overlayed node
-     * state but have been added to <i>this</i> node state.
-     *
-     * @return list of added parent UUID's
-     */
-    public synchronized List getAddedParentUUIDs() {
-        if (!hasOverlayedState()) {
-            return Collections.EMPTY_LIST;
-        }
-
-        NodeState other = (NodeState) getOverlayedState();
-        ArrayList list = new ArrayList(parentUUIDs);
-        list.removeAll(other.parentUUIDs);
-        return list;
-    }
-
-    /**
-     * Returns a list of parent UUID's, that exist in the overlayed node state
-     * but have been removed from <i>this</i> node state.
-     *
-     * @return list of removed parent UUID's
-     */
-    public synchronized List getRemovedParentUUIDs() {
-        if (!hasOverlayedState()) {
-            return Collections.EMPTY_LIST;
-        }
-
-        NodeState other = (NodeState) getOverlayedState();
-        ArrayList list = new ArrayList(other.parentUUIDs);
-        list.removeAll(parentUUIDs);
-        return list;
-    }
-
-    /**
-     * Returns a list of child node entries, that exist both in <i>this</i> node
+     * Returns a list of child node entries that exist both in <i>this</i> node
-     * Sets the UUID of the parent <code>NodeState</code>.
-     *
-     * @param parentUUID the parent <code>NodeState</code>'s UUID or
-     *                   <code>null</code> if either this item state should
-     *                   represent the root node or this item state should
-     *                   be 'free floating', i.e. detached from the repository's
-     *                   hierarchy.
-     */
-    public synchronized void setParentUUID(String parentUUID) {
-        if (parentUUID != null && !parentUUIDs.contains(parentUUID)) {
-            parentUUIDs.add(parentUUID);
-        }
-        this.parentUUID = parentUUID;
-    }
-
-    /**
-     * @see ItemState#addListener
+     * {@inheritDoc}
-     * @see ItemState#removeListener
+     * {@inheritDoc}
+    //-------------------------------------------------< misc. helper methods >
-        public boolean remove(ChildNodeEntry entry) {
-            return remove(entry.getName(), entry.getIndex()) != null;
+        public ChildNodeEntry remove(ChildNodeEntry entry) {
+            return remove(entry.getName(), entry.getIndex());
-        boolean remove(QName nodeName, String uuid) {
-            List siblings = (List) names.get(nodeName);
-            if (siblings == null || siblings.isEmpty()) {
-                return false;
-            }
-
-            Iterator iter = siblings.iterator();
+        ChildNodeEntry remove(String uuid) {
+            Iterator iter = entries.iterator();
-            return false;
+            return null;
-        List get(String uuid) {
-            if (entries.isEmpty()) {
-                return Collections.EMPTY_LIST;
-            }
-            ArrayList list = new ArrayList();
+        ChildNodeEntry get(String uuid) {
-                    list.add(entry);
+                    return entry;
-            return Collections.unmodifiableList(list);
+            return null;
