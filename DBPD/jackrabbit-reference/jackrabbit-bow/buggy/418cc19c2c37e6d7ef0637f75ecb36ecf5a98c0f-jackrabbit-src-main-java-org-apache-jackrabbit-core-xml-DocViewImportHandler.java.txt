JCR-325: docview roundtripping does not work with multivalue non-string properties

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@384197 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.Text;
+     * <p/>
+     * See also {@link DocViewSAXEventGenerator#leaving(javax.jcr.Node, int)}
+     * regarding special handling of multi-valued properties on export.
-/*
-                // @todo should attribute value be interpreted as LIST type (i.e. multi-valued property)?
-                String[] strings = Text.explode(attrValue, ' ', true);
-                propValues = new Value[strings.length];
-                for (int j = 0; j < strings.length; j++) {
-                    // decode encoded blanks in value
-                    strings[j] = Text.replace(strings[j], "_x0020_", " ");
-                    propValues[j] = InternalValue.create(strings[j]);
+
+                if (attrValue.startsWith("\n")) {
+                    // assume multi-valued property:
+                    // a leading line-feed (a valid whitespace NMTOKENS delimiter)
+                    // is interpreted as a hint that this attribute value is of
+                    // type NMTOKENS.
+                    // see DocViewSAXEventGenerator#leaving(Node, int)
+                    attrValue = attrValue.substring(1);
+                    String[] strings = Text.explode(attrValue, ' ', true);
+                    propValues = new Importer.TextValue[strings.length];
+                    for (int j = 0; j < strings.length; j++) {
+                        // decode encoded blanks in value
+                        strings[j] = Text.replace(strings[j], "_x0020_", " ");
+                        propValues[j] = new StringValue(strings[j]);
+                    }
+                } else {
+                    // assume single-valued property
+                    propValues = new Importer.TextValue[1];
+                    propValues[0] = new StringValue(attrValue);
-*/
+
-                        } catch (NameException be) {
+                        } catch (NameException ne) {
-                                    + attrValue, be);
+                                    + attrValue, ne);
-                    if (attrValue.length() > 0) {
-                        try {
-                            mixinTypes =
-                                    new QName[]{QName.fromJCRName(attrValue, nsContext)};
-                        } catch (NameException be) {
-                            throw new SAXException("illegal jcr:mixinTypes value: "
-                                    + attrValue, be);
+                    if (propValues.length > 0) {
+                        mixinTypes = new QName[propValues.length];
+                        for (int j = 0; j < propValues.length; j++) {
+                            String val = ((StringValue) propValues[j]).retrieve();
+                            try {
+                                mixinTypes[j] = QName.fromJCRName(val, nsContext);
+                            } catch (NameException ne) {
+                                throw new SAXException("illegal jcr:mixinTypes value: "
+                                        + val, ne);
+                            }
-                    propValues = new Importer.TextValue[1];
-                    propValues[0] = new StringValue(atts.getValue(i));
