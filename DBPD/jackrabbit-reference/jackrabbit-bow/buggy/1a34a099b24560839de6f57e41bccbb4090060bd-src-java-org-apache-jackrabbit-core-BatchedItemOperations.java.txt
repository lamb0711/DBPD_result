JCR-238 workspace.copy causes 2 nodes in the same workspace to have the same version history

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@314862 13f79535-47bb-0310-9956-ffa450edef68

- *                     as applicable.
+  *                     as applicable.
+import org.apache.jackrabbit.core.version.VersionManager;
+import javax.jcr.version.VersionHistory;
+            boolean versionable = ent.includesNodeType(QName.MIX_VERSIONABLE);
+
+                if (versionable && flag == COPY) {
+                    /**
+                     * a versionable node is being copied:
+                     * copied properties declared by mix:versionable need to be
+                     * adjusted accordingly.
+                     */
+                    // jcr:versionHistory
+                    if (!propName.equals(QName.JCR_VERSIONHISTORY)) {
+                        VersionHistory vh = getOrCreateVersionHistory(newState);
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(new UUID(vh.getUUID()))});
+                    }
+
+                    // jcr:baseVersion
+                    if (!propName.equals(QName.JCR_BASEVERSION)) {
+                        VersionHistory vh = getOrCreateVersionHistory(newState);
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(new UUID(vh.getRootVersion().getUUID()))});
+                    }
+
+                    // jcr:predecessors
+                    if (!propName.equals(QName.JCR_PREDECESSORS)) {
+                        VersionHistory vh = getOrCreateVersionHistory(newState);
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(new UUID(vh.getRootVersion().getUUID()))});
+                    }
+
+                    // jcr:isCheckedOut
+                    if (!propName.equals(QName.JCR_ISCHECKEDOUT)) {
+                        newChildState.setValues(new InternalValue[]{InternalValue.create(true)});
+                    }
+                }
+
+
+    /**
+     * Returns the version history of the given node state. A new
+     * version history will be created if doesn't exist yet.
+     *
+     * @param node node state
+     * @return the version history of the target node state
+     * @throws RepositoryException if an error occurs
+     */
+    private VersionHistory getOrCreateVersionHistory(NodeState node)
+            throws RepositoryException {
+        VersionManager vMgr = session.getVersionManager();
+        VersionHistory vh = vMgr.getVersionHistory(session, node);
+        if (vh == null) {
+            // create a new version history
+            vh = vMgr.createVersionHistory(session, node);
+        }
+        return vh;
+    }
