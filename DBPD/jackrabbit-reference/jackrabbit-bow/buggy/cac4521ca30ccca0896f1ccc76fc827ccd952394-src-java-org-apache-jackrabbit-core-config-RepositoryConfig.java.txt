JCR-248: Added convenience methods for configuration URIs and InputStreams
JCR-73: Improved RepositoryConfig javadocs.
Added RepositoryConfig.create unit tests.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@312816 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystem;
-import org.w3c.dom.Element;
-import org.xml.sax.InputSource;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.InputStream;
+import java.net.URI;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Properties;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Properties;
+
+import org.apache.jackrabbit.core.fs.FileSystem;
+import org.w3c.dom.Element;
+import org.xml.sax.InputSource;
-     * Parses the given repository configuration file and returns the parsed
-     * repository configuration. The given repository home directory path
-     * will be used as the ${rep.home} parser variable.
+     * Convenience method that wraps the configuration file name into an
+     * {@link InputSource} and invokes the
+     * {@link #create(InputSource, String)} method.
-     * @param file repository configuration file
+     * @param file repository configuration file name
+     * @see #create(InputSource, String)
-        try {
-            File config = new File(file);
+        URI uri = new File(file).toURI();
+        return create(new InputSource(uri.toString()), home);
+    }
-            InputSource xml = new InputSource(new FileReader(config));
-            xml.setSystemId(config.toURI().toString());
+    /**
+     * Convenience method that wraps the configuration URI into an
+     * {@link InputSource} and invokes the
+     * {@link #create(InputSource, String)} method.
+     *
+     * @param uri repository configuration URI
+     * @param home repository home directory
+     * @return repository configuration
+     * @throws ConfigurationException on configuration errors
+     * @see #create(InputSource, String)
+     */
+    public static RepositoryConfig create(URI uri, String home)
+            throws ConfigurationException {
+        return create(new InputSource(uri.toString()), home);
+    }
-            return create(xml, home);
-        } catch (FileNotFoundException e) {
-            throw new ConfigurationException(
-                    "The repository configuration file " + file
-                    + " could not be found.", e);
-        }
+    /**
+     * Convenience method that wraps the configuration input stream into an
+     * {@link InputSource} and invokes the
+     * {@link #create(InputSource, String)} method.
+     *
+     * @param input repository configuration input stream
+     * @param home repository home directory
+     * @return repository configuration
+     * @throws ConfigurationException on configuration errors
+     * @see #create(InputSource, String)
+     */
+    public static RepositoryConfig create(InputStream input, String home)
+            throws ConfigurationException {
+        return create(new InputSource(input), home);
-     * parsed repository configuration. The given repository home directory
-     * path will be used as the ${rep.home} parser variable.
+     * parsed and initialized repository configuration. The given repository
+     * home directory path will be used as the ${rep.home} parser variable.
+     * <p>
+     * Note that in addition to parsing the repository configuration, this
+     * method also initializes the configuration (creates the configured
+     * directories, etc.). The {@link ConfigurationParser} class should be
+     * used directly to just parse the configuration.
