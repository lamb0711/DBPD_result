JCR-329: NodeReferencesId.equals() is not symmetric
plus some cleanups/consolidations (mostly cosmetical) of recent changes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@382075 13f79535-47bb-0310-9956-ffa450edef68

-    static final long serialVersionUID = -4116945555530446652L;
+    static final long serialVersionUID = 4392375681805781770L;
-     * the id of this node state.
+     * the id of this node.
-     * the id of the parent node or <code>null</code> if this is the root node
+     * the id of the parent node or <code>null</code> if this instance
+     * represents the root node
-     * Constructs a new node state this is not connected.
+     * Constructs a new node state that is not connected.
-     * @param id            the Id of the this node
+     * @param id            id of this node
-     * @param parentId      the Id of the parent node
+     * @param parentId      id of the parent node
-    //-----------------------------------------------------< public methods >---
+    //-------------------------------------------------------< public methods >
-     * Determines if this item state represents a node.
+     * {@inheritDoc}
-     * @see ItemState#isNode
-     * Returns the id of this node state.
-     * @return the id of this node state.
+     * Returns the identifier of this node.
+     *
+     * @return the id of this node.
-     * Sets the Id of the parent <code>NodeState</code>.
+     * Sets the id of this node's parent.
-     * @param parentId the parent <code>NodeState</code>'s Id or <code>null</code>
+     * @param parentId the parent node's id or <code>null</code>
-     * state should be 'free floating', i.e. detached from the repository's
+     * state should be 'free floating', i.e. detached from the workspace's
-     * or <code>null</code> if there's no such entry.
+     * or <code>null</code> if there's no matching entry.
-     *         or <code>null</code> if there's no such entry.
+     *         or <code>null</code> if there's no matching entry.
-     * <code>null</code> if there's no such entry.
+     * <code>null</code> if there's no matching entry.
-     *         <code>null</code> if there's no such entry.
+     *         <code>null</code> if there's no matching entry.
-     * @param id The id the new entry is refering to.
+     * @param id the id the new entry is refering to.
-     * @param id the Id of the entry to be removed
+     * @param id the id of the entry to be removed
-            if (entry == other || entry.id.equals(other.id)) {
+            if (entry == other || entry.getId().equals(other.getId())) {
-                    if (entry.id.equals(((ChildNodeEntry) others.get(i + 1)).id)) {
+                    if (entry.getId().equals(((ChildNodeEntry) others.get(i + 1)).getId())) {
-                            if (((ChildNodeEntry) ours.get(j)).id.equals(other.id)) {
+                            if (((ChildNodeEntry) ours.get(j)).getId().equals(other.getId())) {
-                    if (((ChildNodeEntry) ours.get(j)).id.equals(entry.id)) {
+                    if (((ChildNodeEntry) ours.get(j)).getId().equals(entry.getId())) {
-                    if (((ChildNodeEntry) others.get(j)).id.equals(entry.id)) {
+                    if (((ChildNodeEntry) others.get(j)).getId().equals(entry.getId())) {
-         * Removes the child node entry with the given id
-         * @param id
-         * @return the removed entry or <code>null</code>
+         * Removes the child node entry refering to the node with the given id.
+         *
+         * @param id id of node whose entry is to be removed.
+         * @return the removed entry or <code>null</code> if there is no such entry.
-         * Removes the child node entry
-         * @param entry
-         * @return the removed entry or <code>null</code>
+         * Removes the given child node entry.
+         *
+         * @param entry entry to be removed.
+         * @return the removed entry or <code>null</code> if there is no such entry.
-                ChildNodeEntry otherEntry = other.get(entry.id);
+                ChildNodeEntry otherEntry = other.get(entry.getId());
-                ChildNodeEntry otherEntry = other.get(entry.id);
+                ChildNodeEntry otherEntry = other.get(entry.getId());
-                return entries.containsKey(((ChildNodeEntry) o).id);
+                return entries.containsKey(((ChildNodeEntry) o).getId());
-                return entries.indexOf(((ChildNodeEntry) o).id);
+                return entries.indexOf(((ChildNodeEntry) o).getId());
-                out.writeUTF(entry.getId().toString());  // uuid
+                out.writeUTF(entry.getId().toString());  // id
-                String s = in.readUTF();   // nodeid
+                String s = in.readUTF();   // id
