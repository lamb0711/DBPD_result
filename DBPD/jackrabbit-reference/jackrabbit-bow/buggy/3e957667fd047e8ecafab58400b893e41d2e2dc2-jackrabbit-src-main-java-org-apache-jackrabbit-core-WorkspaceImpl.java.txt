Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.observation.EventStateCollectionFactory;
+import org.apache.jackrabbit.core.observation.EventStateCollection;
-import org.apache.jackrabbit.core.version.InternalVersion;
-import org.apache.jackrabbit.core.version.VersionImpl;
+import org.apache.jackrabbit.core.version.AbstractVersion;
-public class WorkspaceImpl implements Workspace {
+public class WorkspaceImpl implements Workspace, EventStateCollectionFactory {
-                  SharedItemStateManager stateMgr,
-                  RepositoryImpl rep,
-                  SessionImpl session) {
+                            SharedItemStateManager stateMgr, RepositoryImpl rep,
+                            SessionImpl session) {
-            VersionImpl v = (VersionImpl) versions[i];
+            AbstractVersion v = (AbstractVersion) versions[i];
-                InternalVersion[] restored = null;
+                Version[] restored = null;
-                    VersionImpl v = (VersionImpl) iter.next();
+                    AbstractVersion v = (AbstractVersion) iter.next();
-                        restored = node.internalRestore(v.getInternalVersion(), vsel, removeExisting);
+                        restored = node.internalRestore(v, vsel, removeExisting);
-                            toRestore.remove(restored[i].getVersionHistory().getId());
+                            toRestore.remove(restored[i].getContainingHistory().getUUID());
+
+    //------------------------------------------< EventStateCollectionFactory >
+
+    /**
+     * {@inheritDoc}
+     * <p/>
+     * Implemented in this object and forwarded rather than {@link #obsMgr}
+     * since creation of the latter is lazy.
+     */
+    public EventStateCollection createEventStateCollection()
+            throws RepositoryException {
+
+        return ((ObservationManagerImpl) getObservationManager()).createEventStateCollection();
+    }
