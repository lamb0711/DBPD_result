- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.2 $, $Date: 2004/08/30 11:13:47 $
-	    new QName(NamespaceRegistryImpl.NS_JCR_URI, "xmltext");
+            new QName(NamespaceRegistryImpl.NS_JCR_URI, "xmltext");
-	    new QName(NamespaceRegistryImpl.NS_JCR_URI, "xmlcharacters");
+            new QName(NamespaceRegistryImpl.NS_JCR_URI, "xmlcharacters");
-				    boolean noRecurse, boolean binaryAsLink,
-				    ItemStateProvider stateProvider,
-				    NamespaceRegistryImpl nsReg,
-				    AccessManagerImpl accessMgr,
-				    HierarchyManager hierMgr,
-				    ContentHandler contentHandler) {
-	super(nodeState, nodeName, noRecurse, binaryAsLink,
-		stateProvider, nsReg, accessMgr, contentHandler);
-	this.hierMgr = hierMgr;
+                                    boolean noRecurse, boolean binaryAsLink,
+                                    ItemStateProvider stateProvider,
+                                    NamespaceRegistryImpl nsReg,
+                                    AccessManagerImpl accessMgr,
+                                    HierarchyManager hierMgr,
+                                    ContentHandler contentHandler) {
+        super(nodeState, nodeName, noRecurse, binaryAsLink,
+                stateProvider, nsReg, accessMgr, contentHandler);
+        this.hierMgr = hierMgr;
-	props = new ArrayList();
+        props = new ArrayList();
-	    throws RepositoryException, SAXException {
-	// nop
+            throws RepositoryException, SAXException {
+        // nop
-	    throws RepositoryException, SAXException {
-	// reset list of properties
-	props.clear();
+            throws RepositoryException, SAXException {
+        // reset list of properties
+        props.clear();
-	    throws RepositoryException, SAXException {
-	if (name.equals(NODENAME_XMLTEXT)) {
-	    // the node represents xml character data
-	    Iterator iter = props.iterator();
-	    while (iter.hasNext()) {
-		PropertyState propState = (PropertyState) iter.next();
-		QName propName = propState.getName();
-		if (propName.equals(PROPNAME_XMLCHARACTERS)) {
-		    InternalValue val = propState.getValues()[0];
-		    char[] chars = val.toJCRValue(nsReg).getString().toCharArray();
-		    contentHandler.characters(chars, 0, chars.length);
-		}
-	    }
-	} else {
-	    // regalur node
+            throws RepositoryException, SAXException {
+        if (name.equals(NODENAME_XMLTEXT)) {
+            // the node represents xml character data
+            Iterator iter = props.iterator();
+            while (iter.hasNext()) {
+                PropertyState propState = (PropertyState) iter.next();
+                QName propName = propState.getName();
+                if (propName.equals(PROPNAME_XMLCHARACTERS)) {
+                    InternalValue val = propState.getValues()[0];
+                    char[] chars = val.toJCRValue(nsReg).getString().toCharArray();
+                    contentHandler.characters(chars, 0, chars.length);
+                }
+            }
+        } else {
+            // regalur node
-	    // element name
-	    String elemName;
-	    try {
-		if (state.getParentUUIDs().size() == 0) {
-		    // root node needs a name
-		    elemName = NODENAME_ROOT.toJCRName(nsReg);
-		} else {
-		    elemName = name.toJCRName(nsReg);
-		}
-	    } catch (NoPrefixDeclaredException npde) {
-		// should never get here...
-		String msg = "internal error: encountered unregistered namespace";
-		log.error(msg, npde);
-		throw new RepositoryException(msg, npde);
-	    }
-	    if (!XMLChar.isValidName(elemName)) {
-		throw new InvalidSerializedDataException("the node name is not a valid xml element name: " + elemName);
-	    }
+            // element name
+            String elemName;
+            try {
+                if (state.getParentUUIDs().size() == 0) {
+                    // root node needs a name
+                    elemName = NODENAME_ROOT.toJCRName(nsReg);
+                } else {
+                    elemName = name.toJCRName(nsReg);
+                }
+            } catch (NoPrefixDeclaredException npde) {
+                // should never get here...
+                String msg = "internal error: encountered unregistered namespace";
+                log.error(msg, npde);
+                throw new RepositoryException(msg, npde);
+            }
+            if (!XMLChar.isValidName(elemName)) {
+                throw new InvalidSerializedDataException("the node name is not a valid xml element name: " + elemName);
+            }
-	    // attributes (properties)
-	    AttributesImpl attrs = new AttributesImpl();
-	    Iterator iter = props.iterator();
-	    while (iter.hasNext()) {
-		PropertyState propState = (PropertyState) iter.next();
-		QName propName = propState.getName();
-		// attribute name
-		String attrName;
-		try {
-		    attrName = propName.toJCRName(nsReg);
-		} catch (NoPrefixDeclaredException npde) {
-		    // should never get here...
-		    String msg = "internal error: encountered unregistered namespace";
-		    log.error(msg, npde);
-		    throw new RepositoryException(msg, npde);
-		}
-		if (!XMLChar.isValidName(attrName)) {
-		    throw new InvalidSerializedDataException("the property name is not a valid xml attribute name: " + attrName);
-		}
-		// attribute value
-		String attrValue;
-		int type = propState.getType();
-		// process property value (guaranteed to be single-valued and non-null)
-		InternalValue val = propState.getValues()[0];
-		if (type == PropertyType.BINARY) {
-		    if (binaryAsLink) {
-			try {
-			    attrValue = hierMgr.getPath(new PropertyId(propState.getParentUUID(), propState.getName())).toJCRPath(nsReg);
-			} catch (NoPrefixDeclaredException npde) {
-			    // should never get here...
-			    String msg = "internal error: encountered unregistered namespace";
-			    log.error(msg, npde);
-			    throw new RepositoryException(msg, npde);
-			}
-		    } else {
-			// binary data, base64 encoding required
-			BLOBFileValue blob = (BLOBFileValue) val.internalValue();
-			InputStream in = blob.getStream();
-			StringWriter writer = new StringWriter();
-			try {
-			    Base64.encode(in, writer);
-			    in.close();
-			    writer.close();
-			} catch (IOException ioe) {
-			    // check if the exception wraps a SAXException
-			    Throwable t = ioe.getCause();
-			    if (t != null && t instanceof SAXException) {
-				throw (SAXException) t;
-			    } else {
-				throw new SAXException(ioe);
-			    }
-			}
-			attrValue = writer.toString();
-		    }
-		} else {
-		    attrValue = val.toJCRValue(nsReg).getString();
-		}
-		attrs.addAttribute(propName.getNamespaceURI(), propName.getLocalName(), attrName, CDATA_TYPE, attrValue);
-	    }
-	    // start element (node)
-	    contentHandler.startElement(name.getNamespaceURI(), name.getLocalName(), elemName, attrs);
-	}
+            // attributes (properties)
+            AttributesImpl attrs = new AttributesImpl();
+            Iterator iter = props.iterator();
+            while (iter.hasNext()) {
+                PropertyState propState = (PropertyState) iter.next();
+                QName propName = propState.getName();
+                // attribute name
+                String attrName;
+                try {
+                    attrName = propName.toJCRName(nsReg);
+                } catch (NoPrefixDeclaredException npde) {
+                    // should never get here...
+                    String msg = "internal error: encountered unregistered namespace";
+                    log.error(msg, npde);
+                    throw new RepositoryException(msg, npde);
+                }
+                if (!XMLChar.isValidName(attrName)) {
+                    throw new InvalidSerializedDataException("the property name is not a valid xml attribute name: " + attrName);
+                }
+                // attribute value
+                String attrValue;
+                int type = propState.getType();
+                // process property value (guaranteed to be single-valued and non-null)
+                InternalValue val = propState.getValues()[0];
+                if (type == PropertyType.BINARY) {
+                    if (binaryAsLink) {
+                        try {
+                            attrValue = hierMgr.getPath(new PropertyId(propState.getParentUUID(), propState.getName())).toJCRPath(nsReg);
+                        } catch (NoPrefixDeclaredException npde) {
+                            // should never get here...
+                            String msg = "internal error: encountered unregistered namespace";
+                            log.error(msg, npde);
+                            throw new RepositoryException(msg, npde);
+                        }
+                    } else {
+                        // binary data, base64 encoding required
+                        BLOBFileValue blob = (BLOBFileValue) val.internalValue();
+                        InputStream in = blob.getStream();
+                        StringWriter writer = new StringWriter();
+                        try {
+                            Base64.encode(in, writer);
+                            in.close();
+                            writer.close();
+                        } catch (IOException ioe) {
+                            // check if the exception wraps a SAXException
+                            Throwable t = ioe.getCause();
+                            if (t != null && t instanceof SAXException) {
+                                throw (SAXException) t;
+                            } else {
+                                throw new SAXException(ioe);
+                            }
+                        }
+                        attrValue = writer.toString();
+                    }
+                } else {
+                    attrValue = val.toJCRValue(nsReg).getString();
+                }
+                attrs.addAttribute(propName.getNamespaceURI(), propName.getLocalName(), attrName, CDATA_TYPE, attrValue);
+            }
+            // start element (node)
+            contentHandler.startElement(name.getNamespaceURI(), name.getLocalName(), elemName, attrs);
+        }
-	    throws RepositoryException, SAXException {
-	if (name.equals(NODENAME_XMLTEXT)) {
-	    // the node represents xml character data
-	    // (already processed in leavingProperties(NodeState, QName, int)
-	    return;
-	}
-	// element name
-	String elemName;
-	try {
-	    if (state.getParentUUIDs().size() == 0) {
-		// root node needs a name
-		elemName = NODENAME_ROOT.toJCRName(nsReg);
-	    } else {
-		elemName = name.toJCRName(nsReg);
-	    }
-	} catch (NoPrefixDeclaredException npde) {
-	    // should never get here...
-	    String msg = "internal error: encountered unregistered namespace";
-	    log.error(msg, npde);
-	    throw new RepositoryException(msg, npde);
-	}
+            throws RepositoryException, SAXException {
+        if (name.equals(NODENAME_XMLTEXT)) {
+            // the node represents xml character data
+            // (already processed in leavingProperties(NodeState, QName, int)
+            return;
+        }
+        // element name
+        String elemName;
+        try {
+            if (state.getParentUUIDs().size() == 0) {
+                // root node needs a name
+                elemName = NODENAME_ROOT.toJCRName(nsReg);
+            } else {
+                elemName = name.toJCRName(nsReg);
+            }
+        } catch (NoPrefixDeclaredException npde) {
+            // should never get here...
+            String msg = "internal error: encountered unregistered namespace";
+            log.error(msg, npde);
+            throw new RepositoryException(msg, npde);
+        }
-	// end element (node)
-	contentHandler.endElement(name.getNamespaceURI(), name.getLocalName(), elemName);
+        // end element (node)
+        contentHandler.endElement(name.getNamespaceURI(), name.getLocalName(), elemName);
-	    throws RepositoryException, SAXException {
-	// @todo should properties declared in the 'jcr:' namespace be skipped in the document view export?
+            throws RepositoryException, SAXException {
+        // @todo should properties declared in the 'jcr:' namespace be skipped in the document view export?
-	// collect property state in temporary list (will be processed in leavingProperties(NodeState, QName, int)
-	InternalValue[] values = state.getValues();
-	if (values != null && values.length > 0) {
-	    if (values.length != 1) {
-		throw new InvalidSerializedDataException("unable to serialize multi-valued property in document view: " + state.getName().getLocalName());
-	    }
-	    if (values[0] != null) {
-		props.add(state);
-	    }
-	}
+        // collect property state in temporary list (will be processed in leavingProperties(NodeState, QName, int)
+        InternalValue[] values = state.getValues();
+        if (values != null && values.length > 0) {
+            if (values.length != 1) {
+                throw new InvalidSerializedDataException("unable to serialize multi-valued property in document view: " + state.getName().getLocalName());
+            }
+            if (values[0] != null) {
+                props.add(state);
+            }
+        }
-	    throws RepositoryException, SAXException {
-	// nop
+            throws RepositoryException, SAXException {
+        // nop
