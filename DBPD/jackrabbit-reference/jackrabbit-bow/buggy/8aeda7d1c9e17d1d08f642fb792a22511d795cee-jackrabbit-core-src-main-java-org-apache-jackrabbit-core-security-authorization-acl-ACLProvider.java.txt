JCR-2887 : Split PrivilegeRegistry in a per-session manager instance and a repository level registry [work in progress]
JCR-2774 : Access control for repository level API operations


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1177668 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.security.AccessControlEntry;
-        NodeImpl targetNode = (NodeImpl) session.getNode(session.getJCRPath(absPath));
-        NodeImpl node = getNode(targetNode, isAcItem(targetNode));
+        NodeImpl targetNode;
+        if (absPath == null) {
+            targetNode = (NodeImpl) session.getRootNode();
+            if (isRepoAccessControlled(targetNode)) {
+                if (permissions.grants(targetNode.getPrimaryPath(), Permission.READ_AC)) {
+                    // retrieve the entries for the access controlled node
+                    List<AccessControlEntry> entries = entryCollector.collectEntries(null, new EntryFilterImpl(null, (NodeId) null, session));
+                    acls.add(new UnmodifiableAccessControlList(entries));
+                } else {
+                    throw new AccessDeniedException("Access denied at " + targetNode.getPath());
+                }
+            }
+        } else {
+            targetNode = (NodeImpl) session.getNode(session.getJCRPath(absPath));
+            NodeImpl node = getNode(targetNode, isAcItem(targetNode));
-        // collect all ACLs effective at node
-        collectAcls(node, permissions, acls);
+            // collect all ACLs effective at node
+            collectAcls(node, permissions, acls);
+        }
+
-     * {@link AccessControlConstants#N_POLICY "rep:ACL"}.
+     * {@link AccessControlConstants#N_POLICY}.
+
+    /**
+     * Test if the given node is access controlled. The node is access
+     * controlled if it is of node type
+     * {@link AccessControlConstants#NT_REP_REPO_ACCESS_CONTROLLABLE "rep:RepoAccessControllable"}
+     * and if it has a child node named
+     * {@link AccessControlConstants#N_REPO_POLICY}.
+     *
+     * @param node the node to be tested
+     * @return <code>true</code> if the node is access controlled and has a
+     * rep:policy child; <code>false</code> otherwise.
+     * @throws RepositoryException if an error occurs
+     */
+    static boolean isRepoAccessControlled(NodeImpl node) throws RepositoryException {
+        return node.hasNode(N_REPO_POLICY) && node.isNodeType(NT_REP_REPO_ACCESS_CONTROLLABLE);
+    }
+
