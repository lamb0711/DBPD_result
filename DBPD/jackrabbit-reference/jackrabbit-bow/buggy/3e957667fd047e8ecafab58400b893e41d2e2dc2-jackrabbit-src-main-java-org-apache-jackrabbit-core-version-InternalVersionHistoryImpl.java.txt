Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

-public class InternalVersionHistoryImpl extends InternalVersionItemImpl
+class InternalVersionHistoryImpl extends InternalVersionItemImpl
+     * Temporary version cache, used on a refresh.
+     */
+    private HashMap tempVersionCache = new HashMap();
+
+    /**
-    public InternalVersionHistoryImpl(VersionManagerImpl vMgr, NodeStateEx node)
+    public InternalVersionHistoryImpl(AbstractVersionManager vMgr, NodeStateEx node)
-            InternalVersionImpl v = new InternalVersionImpl(this, child, child.getName());
+            InternalVersionImpl v = createVersionInstance(child);
+            vMgr.versionCreated(v);
+     * Reload this object and all its dependent version objects.
+     */
+    void reload() throws RepositoryException {
+        tempVersionCache.putAll(versionCache);
+
+        init();
+
+        // invalidate all versions that are not referenced any more
+        Iterator iter = tempVersionCache.values().iterator();
+        while (iter.hasNext()) {
+            InternalVersionImpl v = (InternalVersionImpl) iter.next();
+            v.invalidate();
+        }
+        tempVersionCache.clear();
+    }
+
+    /**
+     * Create a version instance. May resurrect versions temporarily swapped
+     * out when refreshing this history.
+     */
+    InternalVersionImpl createVersionInstance(NodeStateEx child) {
+        InternalVersionImpl v = (InternalVersionImpl) tempVersionCache.remove(child.getUUID());
+        if (v != null) {
+            v.clear();
+        }
+        if (v == null) {
+            v = new InternalVersionImpl(this, child, child.getName());
+        }
+        return v;
+    }
+
+    /**
-        List refs = getVersionManager().getItemReferences(v);
+        List refs = vMgr.getItemReferences(v);
+        vMgr.versionDestroyed(v);
+        vMgr.versionCreated(version);
-    static InternalVersionHistoryImpl create(VersionManagerImpl vMgr,
+    static InternalVersionHistoryImpl create(AbstractVersionManager vMgr,
-                                             NodeState nodeState,
-                                             List created)
+                                             NodeState nodeState)
-        created.add(pNode.getUUID());
-        NodeStateEx lNode = pNode.addNode(QName.JCR_VERSIONLABELS, QName.NT_VERSIONLABELS, null, false);
-        created.add(lNode.getUUID());
+        pNode.addNode(QName.JCR_VERSIONLABELS, QName.NT_VERSIONLABELS, null, false);
-        created.add(vNode.getUUID());
-        created.add(node.getUUID());
-        
+
