Adding consistency fix option that allows fixing of "magically" disapeared childnode entries.


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@517645 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.ArrayList;
+ * <li>&lt;param name="{@link #setConsistencyFix(String) consistencyFix}" value="false"/>
+    /** flag indicating if the consistency check should attempt to fix issues */
+    protected boolean consistencyFix = false;
+
+     * Checks if consistency fix is enabled.
+     * @return <code>true</code> if consistency fix is enabled.
+     */
+    public String getConsistencyFix() {
+        return Boolean.toString(consistencyFix);
+    }
+
+    /**
+     * Defines if the consistency check should attempt to fix issues that
+     * it finds.
+     *
+     * @param consistencyFix the consistency fix flag.
+     */
+    public void setConsistencyFix(String consistencyFix) {
+        this.consistencyFix = Boolean.valueOf(consistencyFix).booleanValue();
+    }
+
+    /**
+        Collection modifications = new ArrayList();
-                UUID uuid;
+                NodeId id;
-                    uuid = new UUID(rs.getBytes(1));
+                    id = new NodeId(new UUID(rs.getBytes(1)));
-                    uuid = new UUID(rs.getLong(1), rs.getLong(2));
+                    id = new NodeId(new UUID(rs.getLong(1), rs.getLong(2)));
-                NodeId id = new NodeId(uuid);
-                TrackingInputStream cin =
-                    new TrackingInputStream(blob.getBinaryStream());
-                din = new DataInputStream(cin);
+                din = new DataInputStream(blob.getBinaryStream());
-                    bundle.setSize(cin.getPosition());
+                    Collection missingChildren = new ArrayList();
+                        if (entry.getId().toString().endsWith("babecafebabe")) {
+                            continue;
+                        }
+                        if (id.toString().endsWith("babecafebabe")) {
+                            continue;
+                        }
+                                missingChildren.add(entry);
-
+                    if (consistencyFix && !missingChildren.isEmpty()) {
+                        Iterator iterator = missingChildren.iterator();
+                        while (iterator.hasNext()) {
+                            bundle.getChildNodeEntries().remove(iterator.next());
+                        }
+                        modifications.add(bundle);
+                    }
+
-                    log.error("Error in bundle " + uuid + ": " + e);
+                    log.error("Error in bundle " + id + ": " + e);
+        if (consistencyFix && !modifications.isEmpty()) {
+            log.info(name + ": Fixing " + modifications.size() + " inconsistent bundle(s)...");
+            Iterator iterator = modifications.iterator();
+            while (iterator.hasNext()) {
+                NodePropBundle bundle = (NodePropBundle) iterator.next();
+                try {
+                    log.info(name + ": Fixing bundle " + bundle.getId());
+                    bundle.markOld(); // use UPDATE instead of INSERT
+                    storeBundle(bundle);
+                } catch (ItemStateException e) {
+                    log.error(name + ": Error storing fixed bundle: " + e);
+                }
+            }
+        }
+
+
