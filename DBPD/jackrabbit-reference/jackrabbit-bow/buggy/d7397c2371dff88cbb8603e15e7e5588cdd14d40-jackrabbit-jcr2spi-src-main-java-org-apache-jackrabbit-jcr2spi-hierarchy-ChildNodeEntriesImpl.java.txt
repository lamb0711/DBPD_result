JCR-1819 : Add specific deep loading of Nodes and Properties
JCR-1843 : wrong status change upon conflicting removal (CacheBehaviour.OBSERVATION)
JCR-1293 : ReorderReferenceableSNSTest failure
JCR-1811 : ExportSysViewTest#testExportSysView_handler_session_saveBinary_occasionally failing


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@709211 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.ref.WeakReference;
+import java.lang.ref.WeakReference;
+     * @param childEntry
+     * @return The node entry that directly preceeds the given <code>childEntry</code>
+     * or <code>null</code> if the given <code>childEntry</code> is the first
+     * or was not found in this <code>ChildNodeEntries</code>.
+     */
+    NodeEntry getPrevious(NodeEntry childEntry) {
+        LinkedEntries.LinkNode ln = entries.getLinkNode(childEntry);
+        LinkedEntries.LinkNode prevLn = (ln == null) ? null : ln.getPreviousLinkNode();
+        return (prevLn == null) ? null : prevLn.getNodeEntry();
+    }
+
+    /**
-    
+
+     * @see ChildNodeEntries#reorderAfter(NodeEntry, NodeEntry)
+     */
+    public void reorderAfter(NodeEntry insertEntry, NodeEntry afterEntry) {
+        // the link node to move
+        LinkedEntries.LinkNode insertLN = entries.getLinkNode(insertEntry);
+        if (insertLN == null) {
+            throw new NoSuchElementException();
+        }
+        // the link node where insertLN is ordered before
+        LinkedEntries.LinkNode afterLN = (afterEntry != null) ? entries.getLinkNode(afterEntry) : null;
+        if (afterEntry != null && afterLN == null) {
+            throw new NoSuchElementException();
+        }
+
+        LinkedEntries.LinkNode previousLN = insertLN.getPreviousLinkNode();
+        if (previousLN != afterLN) {
+            reorderAfter(insertLN, afterLN);
+        } // else: already in correct position. nothing to do
+    }
+
+    /**
+
+            /**
+             * @return the next LinkNode.
+             */
+            public LinkedEntries.LinkNode getPreviousLinkNode() {
+                return (LinkedEntries.LinkNode) super.getPreviousNode();
+            }
