JCR-249, JCR-253

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@331281 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.io.InputContext;
+import org.apache.jackrabbit.server.io.IOUtil;
+import org.apache.jackrabbit.server.io.IOManager;
+import org.apache.jackrabbit.server.io.ExportContext;
+import org.apache.jackrabbit.webdav.io.InputContext;
+import org.apache.jackrabbit.webdav.io.OutputContext;
-import org.apache.jackrabbit.server.io.ImportResourceChain;
-import org.apache.jackrabbit.server.io.ImportCollectionChain;
+import org.apache.jackrabbit.server.io.ExportContextImpl;
+import org.apache.jackrabbit.server.io.ImportContextImpl;
+import org.apache.jackrabbit.server.io.AbstractExportContext;
- * DavResourceImpl imeplements a DavResource.
+ * DavResourceImpl implements a DavResource.
+    private boolean inited = false;
-
-    /**
-     * is created on initProperties
-     */
-    private NodeResource nodeResource;
+    private long modificationTime = IOUtil.UNDEFINED_TIME;
+    private IOManager ioManager;
-                           DavSession session, ResourceConfig config)
-            throws RepositoryException, DavException {
+                           DavSession session, ResourceConfig config) throws RepositoryException {
+        this.ioManager = config.getIOManager();
-                    if (isFilteredNode(node)) {
-                        log.debug("Cannot to access resource based on a filtered repository item: " + locator.getResourcePath());
-                        throw new DavException(DavServletResponse.SC_FORBIDDEN);
-                    }
-                    // define what is a resource in webdav
+                    // define what is a collection in webdav
-     * Note that this must not correspond to the name of the underlaying
+     * Note that this must not correspond to the name of the underlying
-        return nodeResource == null ? 0 : nodeResource.getModificationTime();
+        return modificationTime;
-     * @see org.apache.jackrabbit.webdav.DavResource#getStream()
+     * If this resource exists and the specified context is not <code>null</code>
+     * this implementation build a new {@link ExportContext} based on the specified
+     * context and forwards the export to its <code>IOManager</code>. If the
+     * {@link IOManager#exportContent(ExportContext, DavResource)} fails,
+     * an <code>IOException</code> is thrown.
+     *
+     * @see DavResource#spool(OutputContext)
+     * @see ResourceConfig#getIOManager()
+     * @throws IOException if the export fails.
-    public InputStream getStream() {
-        initProperties();
-        return nodeResource == null ? null : nodeResource.getStream();
+    public void spool(OutputContext outputContext) throws IOException {
+        if (exists() && outputContext != null) {
+            ExportContext exportCtx = getExportContext(outputContext);
+            if (!ioManager.exportContent(exportCtx, this)) {
+                throw new IOException("Unexpected Error while spooling resource.");
+            }
+        }
-        if (!exists() || nodeResource != null) {
+        if (!exists() || inited) {
-            nodeResource = new NodeResource(this, node);
-            properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLENGTH, nodeResource.getContentLength() + ""));
-            properties.add(new DefaultDavProperty(DavPropertyName.CREATIONDATE, nodeResource.getCreationDate()));
-            properties.add(new DefaultDavProperty(DavPropertyName.GETLASTMODIFIED, nodeResource.getLastModified()));
-            setContentType(nodeResource.getContentType());
-            setContentLanguage(nodeResource.getContentLanguage());
-            properties.add(new DefaultDavProperty(DavPropertyName.GETETAG, nodeResource.getETag()));
-        } catch (RepositoryException e) {
+            ioManager.exportContent(new PropertyExportCtx(), this);
+        } catch (IOException e) {
-        // non-protected JCR properties defined on the underlaying jcr node
+        // non-protected JCR properties defined on the underlying jcr node
+
+        inited = true;
-     * Set the content type.
-     *
-     * @param contentType
-     */
-    private void setContentType(String contentType) {
-        if (contentType != null) {
-            properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, contentType));
-        }
-    }
-
-    /**
-     * Set the content language.
-     *
-     * @param contentLanguage
-     */
-    private void setContentLanguage(String contentLanguage) {
-        if (contentLanguage != null) {
-            properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLANGUAGE, contentLanguage));
-        }
-    }
-
-    /**
-     * @see DavResource#addMember(DavResource, InputContext)
+     * @see DavResource#addMember(DavResource, org.apache.jackrabbit.webdav.io.InputContext)
-    public void addMember(DavResource member, InputContext inputCxt) throws DavException {
+    public void addMember(DavResource member, InputContext inputContext) throws DavException {
-            ImportContext ctx = new ImportContext(node);
-            String sysId = Text.getName(member.getLocator().getJcrPath());
-            ctx.setSystemId(sysId);
-            boolean hasContent = inputCxt != null && inputCxt.getInputStream() != null;
-            if (hasContent) {
-                ctx.setInputStream(inputCxt.getInputStream());
-                ctx.setContentType(inputCxt.getContentType());
-                ctx.setContentLanguage(inputCxt.getContentLanguage());
-            }
-            if (member.isCollection()) {
-                ImportCollectionChain.getChain().execute(ctx);
-            } else {
-                ImportResourceChain.getChain().execute(ctx);
-            }
-            // if an input stream was present and was not consumed during the
-            // import the request must fail.
-            if (hasContent && ctx.getInputStream() != null) {
+            ImportContext ctx = getImportContext(inputContext, Text.getName(member.getLocator().getJcrPath()));
+            if (!ioManager.importContent(ctx, member)) {
+
-        } catch (ItemExistsException e) {
-            // should only be thrown by the ImportCollectionChain
-            log.error("Error while executing import chain: " + e.toString());
-            throw new DavException(DavServletResponse.SC_METHOD_NOT_ALLOWED);
-            log.error("Error while executing import chain: " + e.toString());
+            log.error("Error while importing resource: " + e.toString());
-        } catch (DavException e) {
-            // TODO: hack needed in order not to fall into the general Exception
-            throw e;
-        } catch (Exception e) {
-            // TODO: remove this! why do the commands throw an unspecific exception?
-            log.error("Error while executing import chain: " + e.toString());
+        } catch (IOException e) {
+            log.error("Error while importing resource: " + e.toString());
-     * Creates a new member of this resource.
-     *
-     * @see DavResource#addMember(DavResource)
-     */
-    public void addMember(DavResource member) throws DavException {
-        addMember(member, null);
-    }
-
-    /**
-     * Returns true, if the underlaying node is nodetype jcr:lockable,
+     * Returns a new <code>ImportContext</code>
+     *
+     * @param inputCtx
+     * @param systemId
+     * @return
+     * @throws IOException
+     */
+    protected ImportContext getImportContext(InputContext inputCtx, String systemId) throws IOException {
+        return new ImportContextImpl(node, systemId, inputCtx);
+    }
+
+    /**
+     * Returns a new <code>ExportContext</code>
+     *
+     * @param outputCtx
+     * @return
+     * @throws IOException
+     */
+    protected ExportContext getExportContext(OutputContext outputCtx) throws IOException {
+        return new ExportContextImpl(node, outputCtx);
+    }
+
+    /**
+     * Returns true, if the underlying node is nodetype jcr:lockable,
+
+    //--------------------------------------------------------< inner class >---
+    /**
+     * ExportContext that writes the properties of this <code>DavResource</code>
+     * and provides not stream.
+     */
+    private class PropertyExportCtx extends AbstractExportContext {
+
+        private PropertyExportCtx() {
+            super(node, false, null);
+            // set defaults:
+            setCreationTime(IOUtil.UNDEFINED_TIME);
+            setModificationTime(IOUtil.UNDEFINED_TIME);
+        }
+
+        public OutputStream getOutputStream() {
+            return null;
+        }
+
+        public void setContentLanguage(String contentLanguage) {
+            if (contentLanguage != null) {
+                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLANGUAGE, contentLanguage));
+            }
+        }
+
+        public void setContentLength(long contentLength) {
+            if (contentLength > IOUtil.UNDEFINED_LENGTH) {
+                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTLENGTH, contentLength + ""));
+            }
+        }
+
+        public void setContentType(String mimeType, String encoding) {
+            String contentType = IOUtil.buildContentType(mimeType, encoding);
+            if (contentType != null) {
+                properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, contentType));
+            }
+        }
+
+        public void setCreationTime(long creationTime) {
+            String created = IOUtil.getCreated(creationTime);
+            properties.add(new DefaultDavProperty(DavPropertyName.CREATIONDATE, created));
+        }
+
+        public void setModificationTime(long modTime) {
+            if (modificationTime <= IOUtil.UNDEFINED_TIME) {
+                modificationTime = new Date().getTime();
+            } else {
+                modificationTime = modTime;
+            }
+            String lastModified = IOUtil.getLastModified(modificationTime);
+            properties.add(new DefaultDavProperty(DavPropertyName.GETLASTMODIFIED, lastModified));
+        }
+
+        public void setETag(String etag) {
+            if (etag != null) {
+                properties.add(new DefaultDavProperty(DavPropertyName.GETETAG, etag));
+            }
+        }
+
+        public void setProperty(Object propertyName, Object propertyValue) {
+            if (propertyName instanceof DavPropertyName) {
+                DavPropertyName pName = (DavPropertyName)propertyName;
+                properties.add(new DefaultDavProperty(pName, propertyValue));
+            }
+        }
+    }
