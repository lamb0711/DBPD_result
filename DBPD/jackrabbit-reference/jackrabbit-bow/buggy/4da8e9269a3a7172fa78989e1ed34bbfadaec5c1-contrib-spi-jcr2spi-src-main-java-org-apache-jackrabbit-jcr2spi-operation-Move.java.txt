work in progress

- operations: rename getAffectedIds to getAffectedStates
- operations: return ItemState params instead of ids whereever possible and
  let OperationVisitor deal with all kind of issues arising with SPI ids.
- AddNode/AddProperty operations: don't list state to be created as affected. Not required since operations are collected upon refresh/save, in which case a 'new' item can never be the starting point.
- transient move: let parent NodeState handle the move/renaming of child states
- transient reorder: let parent NodeState handle the reorder logic
- NodeState: remove unused methods and mark setParent private
- NodeImpl: protected getNodeId() no more used by subclasses in version package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431887 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.NodeState;
-import org.apache.jackrabbit.spi.NodeId;
-    private final NodeId srcId;
-    private final NodeId srcParentId;
-    private final NodeId destParentId;
+    private final NodeState srcState;
+    private final NodeState srcParentState;
+    private final NodeState destParentState;
-    private Move(NodeId srcNodeId, NodeId srcParentId, NodeId destParentId, QName destName) {
-        srcId = srcNodeId;
-        this.srcParentId = srcParentId;
-        this.destParentId = destParentId;
+    private Move(NodeState srcNodeState, NodeState srcParentState, NodeState destParentState, QName destName) {
+        this.srcState = srcNodeState;
+        this.srcParentState = srcParentState;
+        this.destParentState = destParentState;
-        addAffectedItemId(srcNodeId);
-        addAffectedItemId(srcParentId);
-        addAffectedItemId(destParentId);
+        
+        addAffectedItemState(srcNodeState);
+        addAffectedItemState(srcParentState);
+        addAffectedItemState(destParentState);
-    public NodeId getNodeId() {
-        return srcId;
+    public NodeState getNodeState() {
+        return srcState;
-    public NodeId getSourceParentId() {
-        return srcParentId;
+    public NodeState getSourceParentState() {
+        return srcParentState;
-    public NodeId getDestinationParentId() {
-        return destParentId;
+    public NodeState getDestinationParentState() {
+        return destParentState;
-        NodeId srcId = getNodeId(srcPath, hierMgr, nsResolver);
-        NodeId srcParentId = getNodeId(srcPath.getAncestor(1), hierMgr, nsResolver);
-        NodeId destParentId = getNodeId(destPath.getAncestor(1), hierMgr, nsResolver);
-        Move move = new Move(srcId, srcParentId, destParentId, destElement.getName());
+        NodeState srcState = getNodeState(srcPath, hierMgr, nsResolver);
+        NodeState srcParentState = getNodeState(srcPath.getAncestor(1), hierMgr, nsResolver);
+        NodeState destParentState = getNodeState(destPath.getAncestor(1), hierMgr, nsResolver);
+        Move move = new Move(srcState, srcParentState, destParentState, destElement.getName());
