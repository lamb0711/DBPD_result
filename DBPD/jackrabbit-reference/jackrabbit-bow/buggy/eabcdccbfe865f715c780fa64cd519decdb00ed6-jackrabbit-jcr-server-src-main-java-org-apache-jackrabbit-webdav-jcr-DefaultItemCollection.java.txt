JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 2: jackrabbit-jcr-server]

in addition:
- minor improvements in comments, typos
- use foreach loops where possible
- remove redundant Tika imports in server/io package
- remove redundant casts
- add missing index increment in SubscriptionManagerImpl.SubscriptionMap

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915339 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
+import javax.jcr.version.VersionIterator;
+import javax.jcr.version.Version;
+import org.apache.jackrabbit.webdav.property.PropEntry;
+    @Override
+    @Override
+    @Override
-    public void setProperty(DavProperty property) throws DavException {
+    @Override
+    public void setProperty(DavProperty<?> property) throws DavException {
-    private void internalSetProperty(DavProperty property) throws DavException {
+    private void internalSetProperty(DavProperty<?> property) throws DavException {
-                NodeType[] existingMixin = n.getMixinNodeTypes();
-                Set mixins = mix.getNodeTypeNames();
+                Set<String> mixins = mix.getNodeTypeNames();
-                for (int i = 0; i < existingMixin.length; i++) {
-                    String name = existingMixin[i].getName();
+                for (NodeType existingMixin : n.getMixinNodeTypes()) {
+                    String name = existingMixin.getName();
-                Iterator it = mixins.iterator();
-                while (it.hasNext()) {
-                    n.addMixin((String)it.next());
+                for (String mixin : mixins) {
+                    n.addMixin(mixin);
-                Set names = ntProp.getNodeTypeNames();
+                Set<String> names = ntProp.getNodeTypeNames();
-                    String ntName = names.iterator().next().toString();
+                    String ntName = names.iterator().next();
-            // all props except for mixinnodetypes and primaryType are read-only
+            // all props except for mixin node types and primaryType are read-only
+    @Override
-                NodeType[] mixins = n.getMixinNodeTypes();
-                for (int i = 0; i < mixins.length; i++) {
-                    n.removeMixin(mixins[i].getName());
+                for (NodeType mixin : n.getMixinNodeTypes()) {
+                    n.removeMixin(mixin.getName());
-            // all props except for mixinnodetypes are read-only
+            // all props except for mixin node types are read-only
-    public MultiStatusResponse alterProperties(List changeList) throws DavException {
-        Iterator it = changeList.iterator();
-        while (it.hasNext()) {
-            Object propEntry = it.next();
+    @Override
+    public MultiStatusResponse alterProperties(List<? extends PropEntry> changeList) throws DavException {
+        for (PropEntry propEntry : changeList) {
-                DavProperty prop = (DavProperty) propEntry;
+                DavProperty<?> prop = (DavProperty<?>) propEntry;
-        // success: save all changes together if no error occured
+        // success: save all changes together if no error occurred
-                        // if not part of a transaction directely import on workspace
-                        // since changes would be explicitely saved in the
+                        // if not part of a transaction directly import on workspace
+                        // since changes would be explicitly saved in the
-        ArrayList memberList = new ArrayList();
+        ArrayList<DavResource> memberList = new ArrayList<DavResource>();
+    @Override
+    @Override
+    @Override
+    @Override
+    @Override
-        OrderPatch.Member[] instructions = orderPatch.getOrderInstructions();
-            for (int i = 0; i < instructions.length; i++) {
-                String srcRelPath = Text.unescape(instructions[i].getMemberHandle());
-                Position pos = instructions[i].getPosition();
+            for (OrderPatch.Member instruction : orderPatch.getOrderInstructions()) {
+                String srcRelPath = Text.unescape(instruction.getMemberHandle());
+                Position pos = instruction.getPosition();
-            // one incidated by the 'afterRelPath'.
+            // one indicated by the 'afterRelPath'.
-            // before or last. in the latter case the segmet is 'null'
+            // before or last. in the latter case the segment is 'null'
+    @Override
+    @Override
+    @Override
-            properties.add(new DefaultDavProperty(DavPropertyName.GETCONTENTTYPE, "text/xml"));
+            properties.add(new DefaultDavProperty<String>(DavPropertyName.GETCONTENTTYPE, "text/xml"));
-                    properties.add(new DefaultDavProperty(DavPropertyName.CREATIONDATE,
+                    properties.add(new DefaultDavProperty<String>(DavPropertyName.CREATIONDATE,
-                properties.add(new DefaultDavProperty(JCR_INDEX, new Integer(n.getIndex()), true));
+                properties.add(new DefaultDavProperty<Integer>(JCR_INDEX, n.getIndex(), true));
-                    properties.add(new DefaultDavProperty(JCR_UUID, n.getUUID(), true));
+                    properties.add(new DefaultDavProperty<String>(JCR_UUID, n.getUUID(), true));
-     * all items present in the specifed iterator are referenced in the
+     * all properties present in the specifed iterator are referenced in the
-    protected void addHrefProperty(DavPropertyName name, Iterator itemIterator,
+    protected void addHrefProperty(DavPropertyName name, PropertyIterator itemIterator,
-        ArrayList l = new ArrayList();
+        ArrayList<Property> l = new ArrayList<Property>();
-            l.add(itemIterator.next());
+            l.add(itemIterator.nextProperty());
-        addHrefProperty(name, (Item[]) l.toArray(new Item[l.size()]), isProtected);
+        addHrefProperty(name, l.toArray(new Property[l.size()]), isProtected);
+    }
+
+    /**
+     * Add a new {@link HrefProperty href property} to the property set, where
+     * all versions present in the specifed iterator are referenced in the
+     * resulting property.
+     *
+     * @param name
+     * @param itemIterator
+     * @param isProtected
+     */
+    protected void addHrefProperty(DavPropertyName name, VersionIterator itemIterator,
+                                   boolean isProtected) {
+        ArrayList<Version> l = new ArrayList<Version>();
+        while (itemIterator.hasNext()) {
+            l.add(itemIterator.nextVersion());
+        }
+        addHrefProperty(name, l.toArray(new Version[l.size()]), isProtected);
-            DavProperty defaultProp = DefaultDavProperty.createFromXml(reqBody.getDocumentElement());
+            DavProperty<?> defaultProp = DefaultDavProperty.createFromXml(reqBody.getDocumentElement());
