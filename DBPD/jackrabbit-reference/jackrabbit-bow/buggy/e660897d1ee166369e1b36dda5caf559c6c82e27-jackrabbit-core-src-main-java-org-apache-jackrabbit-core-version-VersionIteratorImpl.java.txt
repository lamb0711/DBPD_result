JCR-1593 JSR 283: Simple versioning
JCR-2058 JSR 283: VersionManager and new versioning methods


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@765556 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Arrays;
+ * <p/>
+ * If this iterator is initialized with a base version, it will only iterate
+ * on the versions of a single line of decent from the given root version to the
+ * base version.
-    private LinkedList versions = new LinkedList();
+    private LinkedList/*<NodeId>*/ versions = new LinkedList/*<NodeId>*/();
-     * @param rootVersion
+     * @param session repository session
+     * @param rootVersion the root version
-        this.session = (SessionImpl) session;
+        this(session, rootVersion, null);
+    }
-        addVersion(rootVersion);
+    /**
+     * Creates a new VersionIterator that iterates over a single line of decent
+     * of all versions starting at the root version and ending at the given
+     * base version
+     *
+     * @param session repository session
+     * @param rootVersion the root version
+     * @param baseVersion the ending base version
+     */
+    public VersionIteratorImpl(Session session, InternalVersion rootVersion, InternalVersion baseVersion) {
+        this.session = (SessionImpl) session;
+        if (baseVersion == null) {
+            initVersions(rootVersion);
+        } else {
+            initVersions(rootVersion, baseVersion);
+        }
-     * Adds the version 'v' to the list of versions to return and then iterates
-     * over the hierarchy of successors of 'v'.
+     * Adds the version subtree starting at <code>root</code> to the internal
+     * set of versions.
-     * @param v
+     * @param root the root version
-    private synchronized void addVersion(InternalVersion v) {
+    private synchronized void initVersions(InternalVersion root) {
-        workQueue.add(v);
+        workQueue.add(root);
-                for (int i = 0; i < successors.length; i++) {
-                    workQueue.add(successors[i]);
-                }
+                workQueue.addAll(Arrays.asList(successors));
+
+    /**
+     * Adds all versions of a single line of decent starting from <code>root</code>
+     * and ending at <code>base</code>.
+     *
+     * @param root the root version
+     * @param base the base version
+     */
+    private synchronized void initVersions(InternalVersion root, InternalVersion base) {
+        NodeId rootId = root == null ? null : root.getId();
+        while (base != null && !base.getId().equals(rootId)) {
+            versions.addFirst(base.getId());
+            InternalVersion[] preds = base.getPredecessors();
+            if (preds.length == 0) {
+                base = null;
+            } else {
+                base = preds[0];
+            }
+        }
+    }
