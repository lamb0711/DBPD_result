JCR-1104 - JSR 283 support
- shareble nodes (work in progress)
- prepare for returning stable paths on shareable nodes or their descendants

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647767 13f79535-47bb-0310-9956-ffa450edef68

-    private final PropertyDefinition definition;
+    /** property data (avoids casting <code>ItemImpl.data</code>) */
+    private final PropertyData data;
-    PropertyImpl(ItemManager itemMgr, SessionImpl session, PropertyId id,
-                 PropertyState state, PropertyDefinition definition,
-                 ItemLifeCycleListener[] listeners) {
-        super(itemMgr, session, id, state, listeners);
-        this.definition = definition;
+    PropertyImpl(ItemManager itemMgr, SessionImpl session, PropertyData data) {
+        super(itemMgr, session, data);
+        this.data = data;
-        if (!isTransient()) {
-            // make transient (copy-on-write)
-            try {
-                PropertyState transientState =
-                        stateMgr.createTransientPropertyState((PropertyState) state, ItemState.STATUS_EXISTING_MODIFIED);
-                // swap persistent with transient state
-                state = transientState;
-            } catch (ItemStateException ise) {
-                String msg = "failed to create transient state";
-                log.debug(msg);
-                throw new RepositoryException(msg, ise);
+
+        synchronized (data) {
+            if (!isTransient()) {
+                // make transient (copy-on-write)
+                try {
+                    PropertyState transientState =
+                            stateMgr.createTransientPropertyState(
+                                    data.getPropertyState(), ItemState.STATUS_EXISTING_MODIFIED);
+                    // swap persistent with transient state
+                    data.setState(transientState);
+                } catch (ItemStateException ise) {
+                    String msg = "failed to create transient state";
+                    log.debug(msg);
+                    throw new RepositoryException(msg, ise);
+                }
+            return getItemState();
-        return state;
-        PropertyState transientState = (PropertyState) state;
+        PropertyState transientState = data.getPropertyState();
-        state = persistentState;
+        data.setState(persistentState);
-        status = STATUS_NORMAL;
+        data.setStatus(STATUS_NORMAL);
+        PropertyDefinition definition = data.getPropertyDefinition();
+        final PropertyDefinition definition = data.getPropertyDefinition();
+        final PropertyDefinition definition = data.getPropertyDefinition();
+        final PropertyDefinition definition = data.getPropertyDefinition();
+        final PropertyDefinition definition = data.getPropertyDefinition();
+        final PropertyDefinition definition = data.getPropertyDefinition();
+        final PropertyDefinition definition = data.getPropertyDefinition();
-        return definition;
+        return data.getPropertyDefinition();
