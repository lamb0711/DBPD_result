[JCR-175] Contrib JCR-Server: enable PROPPATCH for simple-davresource
[JCR-174] Contrib JCR-Server: improve handing of strong etags

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@230679 13f79535-47bb-0310-9956-ffa450edef68

+import org.jdom.Namespace;
+    private ResourceFilter filter;
+
-                           DavSession session)
-        throws RepositoryException {
+                           DavSession session, ResourceFilter filter)
+        throws RepositoryException, DavException {
+        this.filter = filter;
-    private void init(Item repositoryItem) throws RepositoryException {
+    private void init(Item repositoryItem) throws RepositoryException, DavException {
-
+        if (isFilteredNode(node)) {
+            log.debug("Cannot to access resource based on a filtered repository item: " + locator.getResourcePath());
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+
+            // JCR properties defined on the underlaying jcr node
+            try {
+                // todo: should filter be respected for properties as well?
+                PropertyIterator it = node.getProperties();
+                while (it.hasNext()) {
+                    Property p = it.nextProperty();
+                    String pName = p.getName();
+                    String prefix = Text.getNamespacePrefix(pName);
+                    String uri = node.getSession().getNamespaceURI(prefix);
+                    Namespace namespace = Namespace.getNamespace(prefix, uri);
+                    DavPropertyName name = DavPropertyName.create(Text.getLocalName(pName), namespace);
+                    if (p.getDefinition().isMultiple()) {
+                        log.debug("Multivalued property '" + pName + "' not added to webdav property set.");
+                    } else {
+                        String value = p.getValue().getString();
+                        properties.add(new DefaultDavProperty(name, value));
+                    }
+                }
+            } catch (RepositoryException e) {
+                log.error("Unexpected error while retrieving properties: " + e.getMessage());
+            }
-        throw new DavException(DavServletResponse.SC_METHOD_NOT_ALLOWED);
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+        try {
+            setJcrProperty(property);
+            node.save();
+        } catch (RepositoryException e) {
+            // revert any changes made so far an throw exception
+            try {
+                node.refresh(false);
+            } catch (RepositoryException re) {
+                throw new JcrDavException(e);
+            }
+            throw new JcrDavException(e);
+        }
-        throw new DavException(DavServletResponse.SC_METHOD_NOT_ALLOWED);
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+        try {
+            removeJcrProperty(propertyName);
+            node.save();
+        } catch (RepositoryException e) {
+            throw new JcrDavException(e);
+        }
+    public void alterProperties(DavPropertySet setProperties,
+                                DavPropertyNameSet removePropertyNames)
+        throws DavException {
+        if (isLocked(this)) {
+            throw new DavException(DavServletResponse.SC_LOCKED);
+        }
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
+        }
+        try {
+            DavPropertyIterator setIter = setProperties.iterator();
+            while (setIter.hasNext()) {
+                DavProperty prop = setIter.nextProperty();
+                setJcrProperty(prop);
+            }
+            Iterator remNameIter = removePropertyNames.iterator();
+            while (remNameIter.hasNext()) {
+                DavPropertyName propName = (DavPropertyName) remNameIter.next();
+                removeJcrProperty(propName);
+            }
+            // save all changes together (reverted in case this fails)
+            node.save();
+        } catch (RepositoryException e) {
+            // revert any changes made so far an throw exception
+            try {
+                node.refresh(false);
+            } catch (RepositoryException re) {
+                throw new JcrDavException(e);
+            }
+            throw new JcrDavException(e);
+        }
+    }
+
+
-                    list.add(buildResourceFromItem(it.nextNode()));
+                    Node n = it.nextNode();
+                    if (!isFilteredNode(n)) {
+                        list.add(buildResourceFromItem(n));
+                    } else {
+                        log.debug("Filtered resource '" + n.getName() + "'.");
+                    }
+            // don't allow creation of nodes, that would be filtered out
+            if (isFilteredResource(member)) {
+                log.debug("Avoid creation of filtered resource: " + fileName);
+                throw new DavException(DavServletResponse.SC_FORBIDDEN);
+            }
+
+
+        // don't allow creation of nodes, that would be filtered out
+        if (isFilteredResource(member)) {
+            log.debug("Avoid creation of filtered resource: " + member.getDisplayName());
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+
+        // don't allow removal of nodes, that would be filtered out
+        if (isFilteredResource(member)) {
+            log.debug("Avoid removal of filtered resource: " + member.getDisplayName());
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+
+        if (isFilteredResource(destination)) {
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
+        if (isFilteredResource(destination)) {
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+        }
-        return new ActiveLock[] {getLock(Type.WRITE, Scope.EXCLUSIVE)};
+        ActiveLock writeLock = getLock(Type.WRITE, Scope.EXCLUSIVE);
+        return (writeLock != null) ? new ActiveLock[] {writeLock} : new ActiveLock[0];
-                lockable =  node.isNodeType("mix:lockable");
+                lockable =  node.isNodeType(MIX_LOCKABLE);
+
+    /**
+     * Build jcr property name from dav property name
+     *
+     * @param propName
+     * @return jcr name
+     * @throws RepositoryException
+     */
+    private String getJcrName(DavPropertyName propName) throws RepositoryException {
+        String pName = propName.getName();
+        String uri = propName.getNamespace().getURI();
+        String prefix = node.getSession().getNamespacePrefix(uri);
+        if (prefix != null && !"".equals(prefix)) {
+            pName = prefix + ":" + pName;
+        }
+        return pName;
+    }
+
+
+    private void setJcrProperty(DavProperty property) throws RepositoryException {
+        // retrieve value
+        String value = property.getValue().toString();
+        // set value; since multivalued-properties are not listed in the set
+        // of available properties, this extra validation-check is omitted.
+        node.setProperty(getJcrName(property.getName()), value);
+    }
+
+    private void removeJcrProperty(DavPropertyName propertyName) throws RepositoryException {
+        node.getProperty(getJcrName(propertyName)).remove();
+    }
+
+    private boolean isFilteredResource(DavResource resource) {
+        // todo: filtered nodetypes should be checked as well in order to prevent problems.
+        return filter != null && filter.isFilteredResource(resource.getDisplayName(), session.getRepositorySession());
+    }
+
+    private boolean isFilteredNode(Node n) {
+        return filter != null && filter.isFilteredItem(n);
+    }
