- add commons-codec dependency to client project.xml
- add concurrent dependency to jcr2spi project.xml
- remove events again from operation methods on RepositoryService.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@472888 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.state.ChangeLog;
+import org.apache.jackrabbit.jcr2spi.WorkspaceManager;
+import org.apache.jackrabbit.spi.EventFilter;
+import java.util.List;
+import java.util.ArrayList;
+     * The workspace manager.
+     */
+    private final WorkspaceManager wspManager;
+
+    /**
+     * @param wspManager the WorkspaceManager.
-    public ObservationManagerImpl(NamespaceResolver nsResolver, NodeTypeRegistry ntRegistry) {
+    public ObservationManagerImpl(WorkspaceManager wspManager, NamespaceResolver nsResolver, NodeTypeRegistry ntRegistry) {
+        this.wspManager = wspManager;
+        this.wspManager.addEventListener(this);
-                                 String[] uuid,
-                                 String[] nodeTypeName,
+                                 String[] uuids,
+                                 String[] nodeTypeNames,
-        QName[] nodeTypeNames;
-        if (nodeTypeName == null) {
-            nodeTypeNames = null;
+        QName[] nodeTypeQNames;
+        if (nodeTypeNames == null) {
+            nodeTypeQNames = null;
-                nodeTypeNames = new QName[nodeTypeName.length];
-                for (int i = 0; i < nodeTypeName.length; i++) {
-                    QName ntName = NameFormat.parse(nodeTypeName[i], nsResolver);
+                nodeTypeQNames = new QName[nodeTypeNames.length];
+                for (int i = 0; i < nodeTypeNames.length; i++) {
+                    QName ntName = NameFormat.parse(nodeTypeNames[i], nsResolver);
-                        throw new RepositoryException("unknown node type: " + nodeTypeName[i]);
+                        throw new RepositoryException("unknown node type: " + nodeTypeNames[i]);
-                    nodeTypeNames[i] = ntName;
+                    nodeTypeQNames[i] = ntName;
-            EventFilter filter = new EventFilter(nsResolver, ntRegistry,
-                    eventTypes, path, isDeep, uuid, nodeTypeNames, noLocal);
+            EventFilter filter = wspManager.createEventFilter(eventTypes, path, isDeep, uuids, nodeTypeQNames, noLocal);
+    public Collection getEventFilters() {
+        List filters = new ArrayList();
+        synchronized (subscriptions) {
+            ensureReadOnlyMap();
+            filters.addAll(readOnlySubscriptions.values());
+        }
+        return filters;
+    }
+
-            FilteredEventIterator eventIter = new FilteredEventIterator(eventBundle, filter);
+            FilteredEventIterator eventIter = new FilteredEventIterator(eventBundle, filter, nsResolver);
-    /**
-     * Same as {@link #onEvent(EventBundle)} but only used for local changes
-     * with a <code>ChangeLog</code>.
-     * 
-     * @param eventBundle
-     * @param changeLog
-     */
-    public void onEvent(EventBundle eventBundle, ChangeLog changeLog) {
-        onEvent(eventBundle);
-    }
-
