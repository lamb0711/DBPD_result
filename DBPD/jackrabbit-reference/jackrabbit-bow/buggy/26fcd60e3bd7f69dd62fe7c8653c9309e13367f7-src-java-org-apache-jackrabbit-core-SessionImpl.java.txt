AccessManager implementation configurable in repository.xml

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155930 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.BeanMap;
+import org.apache.jackrabbit.core.config.AccessManagerConfig;
-import org.apache.jackrabbit.core.security.AccessManager;
-import org.apache.jackrabbit.core.security.SimpleAccessManager;
+import org.apache.jackrabbit.core.security.AMContext;
+import org.apache.jackrabbit.core.security.AccessManager;
+import java.io.File;
+     * @throws RepositoryException if an error occurs
-                                                HierarchyManager hierMgr) {
-        return new SimpleAccessManager(subject, hierMgr);
+                                                HierarchyManager hierMgr)
+            throws RepositoryException {
+        AccessManagerConfig amConfig = rep.getConfig().getAccessManagerConfig();
+        String className = amConfig.getClassName();
+        Map params = amConfig.getParameters();
+        try {
+            Class c = Class.forName(className);
+            AccessManager accessMgr = (AccessManager) c.newInstance();
+            /**
+             * set the properties of the access manager object
+             * from the param map
+             */
+            BeanMap bm = new BeanMap(accessMgr);
+            Iterator iter = params.keySet().iterator();
+            while (iter.hasNext()) {
+                Object name = iter.next();
+                Object value = params.get(name);
+                bm.put(name, value);
+            }
+            AMContext ctx = new AMContext(new File(rep.getConfig().getHomeDir()),
+                    rep.getConfig().getFileSystem(),
+                    subject,
+                    hierMgr);
+            accessMgr.init(ctx);
+            return accessMgr;
+        } catch (Exception e) {
+            String msg = "failed to instantiate AccessManager implementation: " + className;
+            log.error(msg, e);
+            throw new RepositoryException(msg, e);
+        }
-            String msg = "failed to check READ permission on " + absPath;
+            String msg = "failed to check permissions on " + absPath;
-            throw new AccessControlException(READ_ACTION);
+            throw new AccessControlException(actions);
-         * requires WRITE permission on parent item
+         * requires REMOVE permission on target item
-                if (parentPath == null) {
-                    parentPath = targetPath.getAncestor(1);
+                if (targetId == null) {
+                    targetId = hierMgr.resolvePath(targetPath);
-                if (parentId == null) {
-                    parentId = hierMgr.resolvePath(parentPath);
-                }
-                accessMgr.checkPermission(parentId, AccessManager.WRITE);
+                accessMgr.checkPermission(targetId, AccessManager.REMOVE);
-                String msg = "failed to check WRITE permission on parent of " + absPath;
+                String msg = "failed to check REMOVE permission on " + absPath;
+
+        try {
+            accessMgr.close();
+        } catch (Exception e) {
+            log.warn("error while closing AccessManager", e);
+        }
+
