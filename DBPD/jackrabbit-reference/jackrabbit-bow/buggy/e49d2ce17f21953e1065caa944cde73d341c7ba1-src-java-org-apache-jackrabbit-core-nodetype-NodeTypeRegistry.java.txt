porting to v0.16.4 of the jsr170 specification

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@161260 13f79535-47bb-0310-9956-ffa450edef68

-    private final ChildNodeDef rootNodeDef;
+    private final NodeDef rootNodeDef;
-        customNodeTypesResource = new FileSystemResource(this.ntStore, CUSTOM_NODETYPES_RESOURCE_NAME);
+        customNodeTypesResource =
+                new FileSystemResource(this.ntStore, CUSTOM_NODETYPES_RESOURCE_NAME);
-            String error = "internal error: invalid resource: " + customNodeTypesResource.getPath();
+            String error = "internal error: invalid resource: "
+                    + customNodeTypesResource.getPath();
-            in = getClass().getClassLoader().getResourceAsStream(BUILTIN_NODETYPES_RESOURCE_PATH);
+            in = getClass().getClassLoader().getResourceAsStream(
+                    BUILTIN_NODETYPES_RESOURCE_PATH);
-            String error = "internal error: failed to read built-in node type definitions stored in " + BUILTIN_NODETYPES_RESOURCE_PATH;
+            String error =
+                    "internal error: failed to read built-in node type definitions stored in "
+                    + BUILTIN_NODETYPES_RESOURCE_PATH;
-            String error = "internal error: invalid built-in node type definition stored in " + BUILTIN_NODETYPES_RESOURCE_PATH;
+            String error =
+                    "internal error: invalid built-in node type definition stored in "
+                    + BUILTIN_NODETYPES_RESOURCE_PATH;
-            String error = "internal error: failed to access custom node type definitions stored in " + customNodeTypesResource.getPath();
+            String error =
+                    "internal error: failed to access custom node type definitions stored in "
+                    + customNodeTypesResource.getPath();
-                String error = "internal error: failed to read custom node type definitions stored in " + customNodeTypesResource.getPath();
+                String error =
+                        "internal error: failed to read custom node type definitions stored in "
+                        + customNodeTypesResource.getPath();
-                String error = "internal error: invalid custom node type definition stored in " + customNodeTypesResource.getPath();
+                String error =
+                        "internal error: invalid custom node type definition stored in "
+                        + customNodeTypesResource.getPath();
-    private static ChildNodeDef createRootNodeDef() {
-        ChildNodeDef def = new ChildNodeDef();
+    private static NodeDef createRootNodeDef() {
+        NodeDef def = new NodeDef();
-        def.setAllowSameNameSibs(false);
-        def.setAutoCreate(true);
+        def.setAllowsSameNameSiblings(false);
+        def.setAutoCreated(true);
-        ChildNodeDef[] nda = ntd.getChildNodeDefs();
+        NodeDef[] nda = ntd.getChildNodeDefs();
-            ChildNodeDef def = nda[i];
+            NodeDef def = nda[i];
-            throw new RepositoryException(name.toString() + ": can't unregister built-in node type.");
+            throw new RepositoryException(name.toString()
+                    + ": can't unregister built-in node type.");
-        ChildNodeDef[] nda = ntd.getChildNodeDefs();
+        NodeDef[] nda = ntd.getChildNodeDefs();
-            String error = "internal error: failed to persist custom node type definitions to " + customNodeTypesResource.getPath();
+            String error =
+                    "internal error: failed to persist custom node type definitions to "
+                    + customNodeTypesResource.getPath();
-            String error = "internal error: failed to persist custom node type definitions to " + customNodeTypesResource.getPath();
+            String error =
+                    "internal error: failed to persist custom node type definitions to "
+                    + customNodeTypesResource.getPath();
-        NodeTypeRegistryListener[] la = new NodeTypeRegistryListener[listeners.size()];
+        NodeTypeRegistryListener[] la =
+                new NodeTypeRegistryListener[listeners.size()];
-        NodeTypeRegistryListener[] la = new NodeTypeRegistryListener[listeners.size()];
+        NodeTypeRegistryListener[] la =
+                new NodeTypeRegistryListener[listeners.size()];
-        NodeTypeRegistryListener[] la = new NodeTypeRegistryListener[listeners.size()];
+        NodeTypeRegistryListener[] la =
+                new NodeTypeRegistryListener[listeners.size()];
-                    String msg = "[" + name + "] invalid supertype: " + supertypes[i];
+                    String msg = "[" + name + "] invalid supertype: "
+                            + supertypes[i];
-            if (pd.definesResidual() && pd.isAutoCreate()) {
+            if (pd.definesResidual() && pd.isAutoCreated()) {
-                    && pd.isAutoCreate()) {
+                    && pd.isAutoCreated()) {
-                    if (pd.isAutoCreate()) {
+                    if (pd.isAutoCreated()) {
-        ChildNodeDef[] cnda = ntd.getChildNodeDefs();
+        NodeDef[] cnda = ntd.getChildNodeDefs();
-            ChildNodeDef cnd = cnda[i];
+            NodeDef cnd = cnda[i];
-            if (cnd.definesResidual() && cnd.isAutoCreate()) {
+            if (cnd.definesResidual() && cnd.isAutoCreated()) {
-                    && cnd.isAutoCreate()) {
+                    && cnd.isAutoCreated()) {
-                    if (cnd.isAutoCreate()) {
+                    if (cnd.isAutoCreated()) {
-    public ChildNodeDef getRootNodeDef() {
+    public NodeDef getRootNodeDef() {
-    void checkForCircularNodeAutoCreation(EffectiveNodeType childNodeENT, Stack definingParentNTs)
+    void checkForCircularNodeAutoCreation(EffectiveNodeType childNodeENT,
+                                          Stack definingParentNTs)
-                throw new InvalidNodeTypeDefException("circular node auto-creation detected: " + buf.toString());
+                throw new InvalidNodeTypeDefException("circular node auto-creation detected: "
+                        + buf.toString());
-        ChildNodeDef[] nodeDefs = childNodeENT.getAutoCreateNodeDefs();
+        NodeDef[] nodeDefs = childNodeENT.getAutoCreateNodeDefs();
-                    checkForCircularNodeAutoCreation(getEffectiveNodeType(dnt), definingParentNTs);
+                    checkForCircularNodeAutoCreation(getEffectiveNodeType(dnt),
+                            definingParentNTs);
-                String msg = definingNT + " defines invalid default node type for child node " + nodeDefs[i].getName();
+                String msg = definingNT
+                        + " defines invalid default node type for child node " + nodeDefs[i].getName();
-            throw new RepositoryException(name.toString() + ": can't unregister built-in node type.");
+            throw new RepositoryException(name.toString()
+                    + ": can't unregister built-in node type.");
-            msg.append(name + " could not be removed because the following node types are referencing it: ");
+            msg.append(name
+                    + " could not be removed because the following node types are referencing it: ");
-            throw new RepositoryException(name.toString() + ": can't reregister built-in node type.");
+            throw new RepositoryException(name.toString()
+                    + ": can't reregister built-in node type.");
-    public synchronized NodeTypeDef getNodeTypeDef(QName nodeTypeName) throws NoSuchNodeTypeException {
+    public synchronized NodeTypeDef getNodeTypeDef(QName nodeTypeName)
+            throws NoSuchNodeTypeException {
-    public ChildNodeDef getNodeDef(NodeDefId id) {
-        ChildNodeDef def = (ChildNodeDef) nodeDefs.get(id);
+    public NodeDef getNodeDef(NodeDefId id) {
+        NodeDef def = (NodeDef) nodeDefs.get(id);
-            return (ChildNodeDef) def.clone();
+            return (NodeDef) def.clone();
-     * Dumps the state of this <code>NodeTypeManager</code> instance.
+     * Dumps the state of this <code>NodeTypeRegistry</code> instance.
-        ps.println("NodeTypeManager (" + this + ")");
+        ps.println("NodeTypeRegistry (" + this + ")");
-                ps.print("\tPropertyDef");
+                ps.print("\tPropertyDefinition");
-                ps.println("\t\tAutoCreate\t" + pd[i].isAutoCreate());
+                ps.println("\t\tAutoCreated\t" + pd[i].isAutoCreated());
-            ChildNodeDef[] nd = ntd.getChildNodeDefs();
+            NodeDef[] nd = ntd.getChildNodeDefs();
-                ps.print("\tNodeDef");
+                ps.print("\tNodeDefinition");
-                ps.println("\n\t\tAutoCreate\t" + nd[i].isAutoCreate());
+                ps.println("\n\t\tAutoCreated\t" + nd[i].isAutoCreated());
-                ps.println("\t\tAllowSameNameSibs\t" + nd[i].allowSameNameSibs());
+                ps.println("\t\tAllowsSameNameSiblings\t" + nd[i].allowsSameNameSiblings());
