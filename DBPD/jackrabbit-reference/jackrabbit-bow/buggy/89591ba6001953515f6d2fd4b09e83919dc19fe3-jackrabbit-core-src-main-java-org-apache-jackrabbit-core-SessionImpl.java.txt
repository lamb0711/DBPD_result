JCR-1589: JSR 283 Retention & Hold Management (work in progress)
JCR-1957: Move common validation checks to a single place

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@738422 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.retention.RetentionRegistry;
+     * Internal helper class for common validation checks (lock status, checkout
+     * status, protection etc. etc.)
+     */
+    private ItemValidator validator;
+
+    /**
+     * @return ItemValidator instance for this session.
+     * @throws RepositoryException If an error occurs.
+     */
+    public synchronized ItemValidator getValidator() throws RepositoryException {
+        if (validator == null) {
+            validator = new ItemValidator(rep.getNodeTypeRegistry(), getHierarchyManager(), this);
+        }
+        return validator;
+    }
+
+    /**
+
+    /**
+     * Returns the internal retention manager used for evaluation of effective
+     * retention policies and holds.
+     * 
+     * @return internal retention manager
+     * @throws RepositoryException
+     */
+    protected RetentionRegistry getRetentionRegistry() throws RepositoryException {
+        return wsp.getRetentionRegistry();
+    }
+
-     * Determines if there are pending unsaved changes either on the passed
-     * item or on any item in it's subtree.
-     *
-     * @param item Item start of the subtree to be tested for pending changes.
-     * @return <code>true</code> if there are pending unsaved changes,
-     *         <code>false</code> otherwise.
-     * @throws RepositoryException if an error occurred
-     */
-    public boolean hasPendingChanges(Item item) throws RepositoryException {
-        if (!(item instanceof ItemImpl) || ((ItemImpl) item).session != this) {
-            throw new IllegalArgumentException();
-        }
-        sanityCheck();
-        ItemImpl itemImpl = (ItemImpl) item;
-        if (itemImpl.isTransient()) {
-            return true;
-        } else {
-            return item.isNode() && ((NodeImpl) item).hasPendingChanges();
-        }
-    }
-
-    /**
-        // verify that both source and destination parent nodes are checked-out
-        if (!srcParentNode.internalIsCheckedOut()) {
-            String msg = srcAbsPath + ": cannot move a child of a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-        if (!destParentNode.internalIsCheckedOut()) {
-            String msg = destAbsPath + ": cannot move a target to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-
-        // check constraints
+        // verify for both source and destination parent nodes that
+        // - they are checked-out
+        // - are not protected neither by node type constraints nor by retention/hold
+        int options = ItemValidator.CHECK_VERSIONING | ItemValidator.CHECK_LOCK |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD | ItemValidator.CHECK_RETENTION;
+        getValidator().checkRemove(srcParentNode, options, Permission.NONE);
+        getValidator().checkModify(destParentNode, options, Permission.NONE);
+        // check constraints
-        // check protected flag of old & new parent
-        if (destParentNode.getDefinition().isProtected()) {
-            String msg = destAbsPath + ": cannot add a child node to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-        if (srcParentNode.getDefinition().isProtected()) {
-            String msg = srcAbsPath + ": cannot remove a child node from a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
-        srcParentNode.checkLock();
-        destParentNode.checkLock();
-
-        // verify that parent node is checked-out
-        if (!parent.internalIsCheckedOut()) {
-            String msg = parentAbsPath + ": cannot add a child to a checked-in node";
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag of parent node
-        if (parent.getDefinition().isProtected()) {
-            String msg = parentAbsPath + ": cannot add a child to a protected node";
-            log.debug(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // check lock status
-        parent.checkLock();
+        // verify that parent node is checked-out, not locked and not protected
+        // by either node type constraints nor by some retention or hold.
+        int options = ItemValidator.CHECK_LOCK | ItemValidator.CHECK_VERSIONING |
+                ItemValidator.CHECK_CONSTRAINTS | ItemValidator.CHECK_HOLD | ItemValidator.CHECK_RETENTION;
+        getValidator().checkModify(parent, options, Permission.NONE);
-    public synchronized RetentionManager getRetentionManager()
+    public RetentionManager getRetentionManager()
+        // check sanity of this session
+        sanityCheck();
+            // make sure the internal retention manager exists.
+            getRetentionRegistry();
+            // create the api level retention manager.
