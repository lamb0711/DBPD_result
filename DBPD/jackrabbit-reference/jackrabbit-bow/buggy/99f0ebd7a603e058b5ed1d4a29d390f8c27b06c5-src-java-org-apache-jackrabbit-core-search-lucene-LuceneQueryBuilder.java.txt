Enhanced workspace configuration to support independent FileSystem for SearchIndex

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56683 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.IllegalNameException;
+import org.apache.jackrabbit.core.UnknownPrefixException;
-import javax.jcr.NamespaceException;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.NodeTypeIterator;
+import java.util.Arrays;
-            } catch (MalformedPathException e) {
+            } catch (IllegalNameException e) {
+                exceptions.add(e);
+            } catch (UnknownPrefixException e) {
-        } catch (MalformedPathException e) {
+        } catch (IllegalNameException e) {
+            exceptions.add(e);
+        } catch (UnknownPrefixException e) {
-        String value = node.getValue();
+        List values = new ArrayList();
-            value = nsMappings.translatePropertyName(node.getValue(),
-                    session.getNamespaceResolver());
-        } catch (NamespaceException e) {
-            // will never happen
-            log.error(e.toString());
-        } catch (MalformedPathException e) {
+
+            values.add(nsMappings.translatePropertyName(node.getValue(),
+                    session.getNamespaceResolver()));
+            NodeTypeManager ntMgr = session.getWorkspace().getNodeTypeManager();
+            NodeType base = ntMgr.getNodeType(node.getValue());
+            NodeTypeIterator allTypes = ntMgr.getAllNodeTypes();
+            while (allTypes.hasNext()) {
+                NodeType nt = allTypes.nextNodeType();
+                NodeType[] superTypes = nt.getSupertypes();
+                if (Arrays.asList(superTypes).contains(base)) {
+                    values.add(nsMappings.translatePropertyName(nt.getName(),
+                            session.getNamespaceResolver()));
+                }
+            }
+        } catch (IllegalNameException e) {
+            exceptions.add(e);
+        } catch (UnknownPrefixException e) {
+            exceptions.add(e);
+        } catch (RepositoryException e) {
-        return new TermQuery(new Term(field, value));
+        if (values.size() == 0) {
+            // exception occured
+            return new BooleanQuery();
+        } else if (values.size() == 1) {
+            return new TermQuery(new Term(field, (String) values.get(0)));
+        } else {
+            BooleanQuery b = new BooleanQuery();
+            for (Iterator it = values.iterator(); it.hasNext();) {
+                b.add(new TermQuery(new Term(field, (String)it.next())), false, false);
+            }
+            return b;
+        }
-        } catch (MalformedPathException e) {
+        } catch (IllegalNameException e) {
+            exceptions.add(e);
+        } catch (UnknownPrefixException e) {
