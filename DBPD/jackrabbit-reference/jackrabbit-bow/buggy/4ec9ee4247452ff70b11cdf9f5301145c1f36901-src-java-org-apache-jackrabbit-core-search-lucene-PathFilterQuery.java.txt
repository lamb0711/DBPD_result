- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.Weight;
-import org.apache.lucene.search.Searcher;
-import org.apache.lucene.search.Explanation;
-import org.apache.lucene.search.Scorer;
+import org.apache.lucene.search.*;
- *
- * @version $Revision: 1.3 $, $Date: 2004/01/23 15:55:40 $
- * @author Marcel Reutegger
-    /** The lucene <code>Query</code> object, containing the real query */
+    /**
+     * The lucene <code>Query</code> object, containing the real query
+     */
-    /** The {@link PackageFilter} used for filtering */
+    /**
+     * The {@link PackageFilter} used for filtering
+     */
-     * @param filter the <code>PackageFilter</code> for filtering the result.
+     * @param filter    the <code>PackageFilter</code> for filtering the result.
-	this.delegatee = delegatee;
-	this.filter = filter;
+        this.delegatee = delegatee;
+        this.filter = filter;
+     *
-	return delegatee;
+        return delegatee;
+     *
-     *   representaion.
+     *              representaion.
-	return delegatee.toString(field);
+        return delegatee.toString(field);
+     *
-     *   <code>Weight</code> object.
+     *                 <code>Weight</code> object.
-     *   <code>Weight</code>.
+     *                     <code>Weight</code>.
-	    throws IOException {
-	return new FilteredWeight(searcher);
+            throws IOException {
+        return new FilteredWeight(searcher);
-	PathFilterQuery clone = (PathFilterQuery) super.clone();
-	clone.delegatee = (Query) this.delegatee.clone();
-	return clone;
+        PathFilterQuery clone = (PathFilterQuery) super.clone();
+        clone.delegatee = (Query) this.delegatee.clone();
+        return clone;
+     *
-     *   <code>Weight</code> object.
+     *                 <code>Weight</code> object.
-	return new FilteredWeight(searcher);
+        return new FilteredWeight(searcher);
-	delegatee = delegatee.rewrite(reader);
-	return this;
+        delegatee = delegatee.rewrite(reader);
+        return this;
-	/** the <code>Searcher</code> to create a <code>Weight</code> object */
-	private Searcher searcher;
+        /**
+         * the <code>Searcher</code> to create a <code>Weight</code> object
+         */
+        private Searcher searcher;
-	/** The <code>Weight</code> created by the real query */
-	private Weight weight;
+        /**
+         * The <code>Weight</code> created by the real query
+         */
+        private Weight weight;
-	/**
-	 * Creates a <code>FilteredWeight</code> with a given
-	 * <code>Searcher</code>.
-	 * @param searcher the <code>Search</code> to create the
-	 *   real <code>Weight</code>.
-	 */
-	FilteredWeight(Searcher searcher) {
-	    this.searcher = searcher;
-	}
+        /**
+         * Creates a <code>FilteredWeight</code> with a given
+         * <code>Searcher</code>.
+         *
+         * @param searcher the <code>Search</code> to create the
+         *                 real <code>Weight</code>.
+         */
+        FilteredWeight(Searcher searcher) {
+            this.searcher = searcher;
+        }
-	/**
-	 * @see Weight#explain
-	 */
-	public Explanation explain(IndexReader reader, int doc) throws IOException {
-	    if (weight == null) {
-		weight = delegatee.weight(searcher);
-	    }
-	    return weight.explain(reader, doc);
-	}
+        /**
+         * @see Weight#explain
+         */
+        public Explanation explain(IndexReader reader, int doc) throws IOException {
+            if (weight == null) {
+                weight = delegatee.weight(searcher);
+            }
+            return weight.explain(reader, doc);
+        }
-	/**
-	 * @see Weight#getQuery
-	 */
-	public Query getQuery() {
-	    return PathFilterQuery.this;
-	}
+        /**
+         * @see Weight#getQuery
+         */
+        public Query getQuery() {
+            return PathFilterQuery.this;
+        }
-	/**
-	 * @see Weight#getValue
-	 */
-	public float getValue() {
-	    return weight.getValue();
-	}
+        /**
+         * @see Weight#getValue
+         */
+        public float getValue() {
+            return weight.getValue();
+        }
-	/**
-	 * @see Weight#normalize
-	 */
-	public void normalize(float norm) {
-	    weight.normalize(norm);
-	}
+        /**
+         * @see Weight#normalize
+         */
+        public void normalize(float norm) {
+            weight.normalize(norm);
+        }
-	/**
-	 * Returns a {@link FilteredScorer} instance, which only
-	 * scores hits that are not filtered by the {@link org.apache.jackrabbit.core.search.lucene.PackageFilter}.
-	 * @param reader <code>IndexReader</code> for reading from the search
-	 *   index.
-	 * @return a {@link org.apache.jackrabbit.core.search.lucene.FilteredScorer} instance.
-	 * @throws IOException if an error occurs while reading from the
-	 *   search index.
-	 */
-	public Scorer scorer(IndexReader reader) throws IOException {
-	    if (weight == null) {
-		weight = delegatee.weight(searcher);
-	    }
-	    return new FilteredScorer(weight.scorer(reader), filter, reader);
-	}
+        /**
+         * Returns a {@link FilteredScorer} instance, which only
+         * scores hits that are not filtered by the {@link org.apache.jackrabbit.core.search.lucene.PackageFilter}.
+         *
+         * @param reader <code>IndexReader</code> for reading from the search
+         *               index.
+         * @return a {@link org.apache.jackrabbit.core.search.lucene.FilteredScorer} instance.
+         * @throws IOException if an error occurs while reading from the
+         *                     search index.
+         */
+        public Scorer scorer(IndexReader reader) throws IOException {
+            if (weight == null) {
+                weight = delegatee.weight(searcher);
+            }
+            return new FilteredScorer(weight.scorer(reader), filter, reader);
+        }
-	/**
-	 * @see Weight#sumOfSquaredWeights
-	 */
-	public float sumOfSquaredWeights() throws IOException {
-	    if (weight == null) {
-		weight = delegatee.weight(searcher);
-	    }
-	    return weight.sumOfSquaredWeights();
-	}
+        /**
+         * @see Weight#sumOfSquaredWeights
+         */
+        public float sumOfSquaredWeights() throws IOException {
+            if (weight == null) {
+                weight = delegatee.weight(searcher);
+            }
+            return weight.sumOfSquaredWeights();
+        }
