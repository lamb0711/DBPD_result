JCR-2144 InternalValue refactoring

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@783786 13f79535-47bb-0310-9956-ffa450edef68

-                        blob = getBLOBFileValue(store, value.getStream(), true);
+                        blob = getBLOBFileValue(store, value.getBinary().getStream(), true);
-                    InputStream stream = value.getStream();
+                    InputStream stream = value.getBinary().getStream();
-    
+
-     * Create an internal value that is backed by a temporary file
-     * (if data store usage is disabled or the store is null)
-     * or in the data store if it is not null and enabled.
-     *
-     * @param value the stream
-     * @param store the data store or null to use a temporary file
-     * @return the internal value
-     */
-    public static InternalValue createTemporary(InputStream value, DataStore store) throws RepositoryException {
-        if (USE_DATA_STORE) {
-            return new InternalValue(getBLOBFileValue(store, value, true));
-        }
-        try {
-            return new InternalValue(new BLOBValue(value, true));
-        } catch (IOException e) {
-            throw new RepositoryException("Error creating temporary file", e);
-        }
-    }
-
-    /**
-     * 
+     *
-    public static InternalValue create(InputStream value, DataStore store) throws RepositoryException {
+    static InternalValue create(InputStream value, DataStore store) throws RepositoryException {
-    /**
-     * @deprecated
-     * @return the internal object
-     */
-    public Object internalValue() {
-        return val;
-    }
-
-    public Name getQName() {
-        assert val != null && type == PropertyType.NAME;
-        return (Name) val;
-    }
-
