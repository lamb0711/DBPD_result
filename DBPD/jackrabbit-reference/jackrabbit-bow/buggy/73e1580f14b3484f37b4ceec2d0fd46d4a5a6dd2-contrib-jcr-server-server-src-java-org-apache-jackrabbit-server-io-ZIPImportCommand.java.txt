applying patch from angela, fixing:

[JCR-122] cannot PUT changes to a resource in the simple webdav server
[JCR-123] Webdav: Error when accessing Simple-Server
[JCR-126] Jcr-Server Module: Remove Dependency from Jackrabbit-Core


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@180346 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.webdav.util.Text;
-import org.apache.jackrabbit.JcrConstants;
-import org.apache.commons.chain.Context;
-import org.apache.commons.chain.Command;
+import org.apache.jackrabbit.util.Text;
-import javax.jcr.RepositoryException;
-public class ZIPImportCommand implements Command, JcrConstants {
+public class ZIPImportCommand extends AbstractCommand {
+     * flag, indicating if zip should be extracted recusively
+     */
+    private boolean recursive = false;
+            
+    /**
-    public boolean execute(Context context) throws Exception {
+    public boolean execute(AbstractContext context) throws Exception {
-     * Executes this command. It checks if this command can handle the content
-     * type and delegates it to {@link #importResource}. If the import is
-     * successfull, the input stream of the importcontext is cleared.
-     *
-     * @param context the import context
-     * @return false
-     * @throws Exception if an error occurrs
+     * Override default behaviour and abort chain if input is processed.
+     * @param context
+     * @return
+     * @throws Exception
+        if (!canHandle(context.getContentType())) {
+            // ignore imports
+            return false;
+        }
+        // disable this command for further subcommands if recursive is false
+        context.enableCommand(getId(), recursive);
+
-        if (!canHandle(context.getContentType())) {
-            // ignore imports
-            return false;
+        if (importResource(context, parentNode, in)) {
+            context.setInputStream(null);
+            return true;
-        importResource(parentNode, in);
-        context.setInputStream(null);
-        return true;
+        return false;
-    private void importResource(Node parentNode, InputStream in)
+
+    public boolean importResource(ImportContext context, Node parentNode, InputStream in)
-                mkDirs(parentNode, Text.makeValidJCRPath(entry.getName()));
+                AbstractImportCommand.mkDirs(context, parentNode, Text.makeValidJCRPath(entry.getName()));
-                Node parent = mkDirs(parentNode, Text.getRelativeParent(path, 1));
+                Node parent = AbstractImportCommand.mkDirs(context, parentNode, Text.getRelativeParent(path, 1));
-                ImportContext subctx = new ImportContext(parent);
+                ImportContext subctx = context.createSubContext(parent);
-    }
-
-    /**
-     * Creates collection recursively.
-     *
-     * @param root
-     * @param relPath
-     * @return
-     * @throws RepositoryException
-     */
-    private Node mkDirs(Node root, String relPath) throws RepositoryException {
-        String[] seg = Text.explode(relPath, '/');
-        for (int i=0; i< seg.length; i++) {
-            if (!root.hasNode(seg[i])) {
-                // not quite correct
-                ImportContext subctx = new ImportContext(root);
-                subctx.setSystemId(seg[i]);
-                try {
-                    ImportCollectionChain.getChain().execute(subctx);
-                } catch (Exception e) {
-                    throw new RepositoryException(e);
-                }
-            }
-            root = root.getNode(seg[i]);
-        }
-        return root;
+        return true;
+
+    /**
+     * Sets if the zips should be extracted again
+     * @param recursive
+     */
+    public void setRecursive(boolean recursive) {
+        this.recursive = recursive;
+    }
