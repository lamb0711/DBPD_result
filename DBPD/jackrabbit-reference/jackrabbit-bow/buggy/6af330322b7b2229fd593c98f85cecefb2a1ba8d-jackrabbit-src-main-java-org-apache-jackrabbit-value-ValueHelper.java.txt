JCR-473: Some enhancements to jackrabbit commons

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@420449 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ValueFactory;
+     * Same as {@link #convert(String, int, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+     *
-     * @see #convert(Value, int)
+     * @deprecated Use {@link #convert(String, int, ValueFactory)} instead.
+     * @see #convert(Value, int, ValueFactory)
+        return convert(srcValue, targetType, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * @param srcValue
+     * @param targetType
+     * @param factory
+     * @return
+     * @throws ValueFormatException
+     * @throws IllegalArgumentException
+     * @see #convert(Value, int, ValueFactory)
+     */
+    public static Value convert(String srcValue, int targetType, ValueFactory factory)
+        throws ValueFormatException, IllegalArgumentException {
-            return convert(new StringValue(srcValue), targetType);
+            return factory.createValue(srcValue, targetType);
+     * Same as {@link #convert(InputStream, int, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+     *
+     * @param srcValue
+     * @param targetType
+     * @return
+     * @throws ValueFormatException
+     * @throws IllegalArgumentException
+     * @deprecated Use {@link #convert(InputStream, int, ValueFactory)} instead.
+     */
+    public static Value convert(InputStream srcValue, int targetType)
+            throws ValueFormatException, IllegalArgumentException {
+        return convert(srcValue, targetType, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * @param srcValue
+     * @param targetType
+     * @param factory
+     * @return
+     * @throws ValueFormatException
+     * @throws IllegalArgumentException
+     */
+    public static Value convert(InputStream srcValue, int targetType, ValueFactory factory)
+        throws ValueFormatException, IllegalArgumentException {
+        if (srcValue == null) {
+            return null;
+        } else {
+            return convert(factory.createValue(srcValue), targetType, factory);
+        }
+    }
+
+    /**
+     * Same as {@link #convert(String[], int, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+     *
-     * @see #convert(Value, int)
+     * @deprecated Use {@link #convert(String[], int, ValueFactory)} instead.
+     * @see #convert(Value, int, ValueFactory)
+        return convert(srcValues, targetType, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * Same as {@link #convert(String[], int, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+     *
+     * @param srcValues
+     * @param targetType
+     * @return
+     * @throws ValueFormatException
+     * @throws IllegalArgumentException
+     * @see #convert(Value, int, ValueFactory)
+     */
+    public static Value[] convert(String[] srcValues, int targetType, ValueFactory factory)
+            throws ValueFormatException, IllegalArgumentException {
-            newValues[i] = convert(srcValues[i], targetType);
+            newValues[i] = convert(srcValues[i], targetType, factory);
-     * @see #convert(Value, int)
+     * @see #convert(Value, int, ValueFactory)
+     */
+    public static Value[] convert(InputStream[] srcValues, int targetType,
+                                  ValueFactory factory)
+            throws ValueFormatException, IllegalArgumentException {
+        if (srcValues == null) {
+            return null;
+        }
+        Value[] newValues = new Value[srcValues.length];
+        for (int i = 0; i < srcValues.length; i++) {
+            newValues[i] = convert(srcValues[i], targetType, factory);
+        }
+        return newValues;
+    }
+
+    /**
+     * Same as {@link #convert(Value[], int, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+     *
+     * @param srcValues
+     * @param targetType
+     * @return
+     * @throws ValueFormatException
+     * @throws IllegalArgumentException
+     * @deprecated Use {@link #convert(Value[], int, ValueFactory)} instead.
+     * @see #convert(Value, int, ValueFactory)
+        throws ValueFormatException, IllegalArgumentException {
+        return convert(srcValues, targetType, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * @param srcValues
+     * @param targetType
+     * @param factory
+     * @return
+     * @throws ValueFormatException
+     * @throws IllegalArgumentException
+     * @see #convert(Value, int, ValueFactory)
+     */
+    public static Value[] convert(Value[] srcValues, int targetType,
+                                  ValueFactory factory)
-            newValues[i] = convert(srcValues[i], targetType);
+            newValues[i] = convert(srcValues[i], targetType, factory);
+     * Same as {@link #convert(Value, int, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+
+     * @param srcValue
+     * @param targetType
+     * @return
+     * @throws ValueFormatException
+     * @throws IllegalStateException
+     * @throws IllegalArgumentException
+     * @deprecated Use {@link #convert(Value, int, ValueFactory)} instead.
+     * @see #convert(Value, int, ValueFactory)
+     */
+    public static Value convert(Value srcValue, int targetType)
+        throws ValueFormatException, IllegalStateException,
+        IllegalArgumentException {
+        return convert(srcValue, targetType, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * @param factory
-    public static Value convert(Value srcValue, int targetType)
+    public static Value convert(Value srcValue, int targetType, ValueFactory factory)
-                    val = new StringValue(srcValue.getString());
+                    val = factory.createValue(srcValue.getString());
-                    val = new BinaryValue(srcValue.getStream());
+                    val = factory.createValue(srcValue.getStream());
-                    val = new BooleanValue(srcValue.getBoolean());
+                    val = factory.createValue(srcValue.getBoolean());
-                    val = new DateValue(srcValue.getDate());
+                    val = factory.createValue(srcValue.getDate());
-                    val = new DoubleValue(srcValue.getDouble());
+                    val = factory.createValue(srcValue.getDouble());
-                    val = new LongValue(srcValue.getLong());
+                    val = factory.createValue(srcValue.getLong());
-                        val = PathValue.valueOf(path);
+                        val = factory.createValue(path, targetType);
-                        val = NameValue.valueOf(name);
+                        val = factory.createValue(name, targetType);
-                            throw new ValueFormatException("failed to convert source value to REFERENCE value",
-                                    re);
+                            throw new ValueFormatException("failed to convert source value to REFERENCE value", re);
-                        val = ReferenceValue.valueOf(uuid);
+                        val = factory.createValue(uuid, targetType);
+     * Same as {@link #copy(Value, ValueFactory)} using <code>ValueFactoryImpl</code>.
+     *
+     * @deprecated Use {@link #copy(Value, ValueFactory)} instead.
+        return copy(srcValue, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     *
+     * @param srcValue
+     * @param factory
+     * @return
+     * @throws IllegalStateException
+     */
+    public static Value copy(Value srcValue, ValueFactory factory)
+        throws IllegalStateException {
-                    newVal = new BinaryValue(srcValue.getStream());
+                    newVal = factory.createValue(srcValue.getStream());
-                    newVal = new BooleanValue(srcValue.getBoolean());
+                    newVal = factory.createValue(srcValue.getBoolean());
-                    newVal = new DateValue(srcValue.getDate());
+                    newVal = factory.createValue(srcValue.getDate());
-                    newVal = new DoubleValue(srcValue.getDouble());
+                    newVal = factory.createValue(srcValue.getDouble());
-                    newVal = new LongValue(srcValue.getLong());
+                    newVal = factory.createValue(srcValue.getLong());
-                    newVal = PathValue.valueOf(srcValue.getString());
-                    break;
-
-                    newVal = NameValue.valueOf(srcValue.getString());
-                    break;
-
-                    newVal = ReferenceValue.valueOf(srcValue.getString());
+                    newVal = factory.createValue(srcValue.getString(), srcValue.getType());
-                    newVal = new StringValue(srcValue.getString());
+                    newVal = factory.createValue(srcValue.getString());
+     * Same as {@link #copy(Value[], ValueFactory)} using <code>ValueFactoryImpl</code>.
+     *
+     * @deprecated Use {@link #copy(Value[], ValueFactory)} instead.
+        return copy(srcValues, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * @param srcValues
+     * @param factory
+     * @return
+     * @throws IllegalStateException
+     */
+    public static Value[] copy(Value[] srcValues, ValueFactory factory)
+        throws IllegalStateException {
-            newValues[i] = copy(srcValues[i]);
+            newValues[i] = copy(srcValues[i], factory);
+     * Same as {@link #deserialize(String, int, boolean, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+     * @deprecated Use {@link #deserialize(String, int, boolean, ValueFactory)}
+     * instead.
+        return deserialize(value, type, decodeBlanks, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * Deserializes the given string to a <code>Value</code> of the given type.
+     *
+     * @param value        string to be deserialized
+     * @param type         type of value
+     * @param decodeBlanks if <code>true</code> <code>"_x0020_"</code>
+     *                     character sequences will be decoded to single space
+     *                     characters each.
+     * @param factory      ValueFactory used to build the <code>Value</code> object.
+     * @return the deserialized <code>Value</code>
+     * @throws ValueFormatException if the string data is not of the required
+     *                              format
+     * @throws RepositoryException  if an error occured during the
+     *                              deserialization.
+     */
+    public static Value deserialize(String value, int type, boolean decodeBlanks,
+                                    ValueFactory factory)
+            throws ValueFormatException, RepositoryException {
+            // NOTE: for performance reasons the BinaryValue is created directly
+            // from the byte-array. This is inconsistent with the other calls,
+            // that delegate the value creation to the ValueFactory.
-            return convert(value, type);
+            return convert(value, type, factory);
-     * <code>Value</code> of the given type.
+     * <code>Value</code> of the given type. Same as
+     * {@link #deserialize(Reader, int, boolean, ValueFactory)} using
+     * <code>ValueFactoryImpl</code>.
+     * @deprecated Use {@link #deserialize(Reader, int, boolean, ValueFactory)}
+     * instead.
+        return deserialize(reader, type, decodeBlanks, ValueFactoryImpl.getInstance());
+    }
+
+    /**
+     * Deserializes the string data read from the given reader to a
+     * <code>Value</code> of the given type.
+     *
+     * @param reader       reader for the string data to be deserialized
+     * @param type         type of value
+     * @param decodeBlanks if <code>true</code> <code>"_x0020_"</code>
+     *                     character sequences will be decoded to single space
+     *                     characters each.
+     * @param factory      ValueFactory used to build the <code>Value</code> object.
+     * @return the deserialized <code>Value</code>
+     * @throws IOException          if an i/o error occured during the
+     *                              serialization
+     * @throws ValueFormatException if the string data is not of the required
+     *                              format
+     * @throws RepositoryException  if an error occured during the
+     *                              deserialization.
+     */
+    public static Value deserialize(Reader reader, int type,
+                                    boolean decodeBlanks, ValueFactory factory)
+            throws IOException, ValueFormatException, RepositoryException {
-            // pass InputStream wrapper to BinaryValue constructor
-            return new BinaryValue(new FilterInputStream(new FileInputStream(tmpFile)) {
+            // pass InputStream wrapper to ValueFactory, that creates a BinaryValue.
+            return factory.createValue(new FilterInputStream(new FileInputStream(tmpFile)) {
-            return convert(value, type);
+            return convert(value, type, factory);
