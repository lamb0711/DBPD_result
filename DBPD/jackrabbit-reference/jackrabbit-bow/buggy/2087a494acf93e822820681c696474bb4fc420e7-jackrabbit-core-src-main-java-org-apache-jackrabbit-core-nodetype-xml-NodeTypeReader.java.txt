JCR-2064 Add new JSR283 features to CND reader/writer
JCR-2153 Introduce QValueConstraint and change return type of QPropertyDefinition.getValueConstraints()
JCR-2158 Consolidate CND related classes from SPI and Core


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@785777 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.InvalidConstraintException;
-import org.apache.jackrabbit.core.nodetype.ValueConstraint;
+import org.apache.jackrabbit.spi.commons.nodetype.constraint.ValueConstraint;
+import org.apache.jackrabbit.spi.commons.nodetype.InvalidConstraintException;
+import org.apache.jackrabbit.spi.QValueConstraint;
+     * @return the namespaces
+     * @throws NamespaceException if a namespace is not defined
-        List defs = new ArrayList();
+        List<NodeTypeDef> defs = new ArrayList<NodeTypeDef>();
-        return (NodeTypeDef[]) defs.toArray(new NodeTypeDef[defs.size()]);
+        return defs.toArray(new NodeTypeDef[defs.size()]);
+     * @throws NamespaceException if a namespace is not defined
-                walker.getAttribute(Constants.ISMIXIN_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISMIXIN_ATTRIBUTE)));
-                walker.getAttribute(Constants.HASORDERABLECHILDNODES_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.HASORDERABLECHILDNODES_ATTRIBUTE)));
-                walker.getAttribute(Constants.ISABSTRACT_ATTRIBUTE))
-                .booleanValue());
-        type.setQueryable(Boolean.valueOf(
-                walker.getAttribute(Constants.ISQUERYABLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISABSTRACT_ATTRIBUTE)));
+        if (walker.getAttribute(Constants.ISQUERYABLE_ATTRIBUTE) != null) {
+            type.setQueryable(Boolean.valueOf(
+                    walker.getAttribute(Constants.ISQUERYABLE_ATTRIBUTE)));
+        }
-            List supertypes = new ArrayList();
+            List<Name> supertypes = new ArrayList<Name>();
-            type.setSupertypes((Name[])
-                    supertypes.toArray(new Name[supertypes.size()]));
+            type.setSupertypes(supertypes.toArray(new Name[supertypes.size()]));
-        List properties = new ArrayList();
+        List<PropDef> properties = new ArrayList<PropDef>();
-        type.setPropertyDefs((PropDef[])
-                properties.toArray(new PropDef[properties.size()]));
+        type.setPropertyDefs(properties.toArray(new PropDef[properties.size()]));
-        List nodes = new ArrayList();
+        List<NodeDef> nodes = new ArrayList<NodeDef>();
-        type.setChildNodeDefs((NodeDef[])
-                nodes.toArray(new NodeDef[nodes.size()]));
+        type.setChildNodeDefs(nodes.toArray(new NodeDef[nodes.size()]));
+     * @throws NamespaceException if a namespace is not defined
-                walker.getAttribute(Constants.MULTIPLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.MULTIPLE_ATTRIBUTE)));
-                walker.getAttribute(Constants.ISFULLTEXTSEARCHABLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISFULLTEXTSEARCHABLE_ATTRIBUTE)));
-                walker.getAttribute(Constants.ISQUERYORDERABLE_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.ISQUERYORDERABLE_ATTRIBUTE)));
-            List queryOps = new ArrayList();
-            for (int i = 0; i < ops.length; i++) {
-                String op = ops[i].trim();
+            List<String> queryOps = new ArrayList<String>();
+            for (String op1 : ops) {
+                String op = op1.trim();
-            def.setAvailableQueryOperators((String[]) queryOps.toArray(new String[queryOps.size()]));
+            def.setAvailableQueryOperators(queryOps.toArray(new String[queryOps.size()]));
-            List constraints = new ArrayList();
+            List<QValueConstraint> constraints = new ArrayList<QValueConstraint>();
-            def.setValueConstraints((ValueConstraint[]) constraints.toArray(
-                    new ValueConstraint[constraints.size()]));
+            def.setValueConstraints(constraints.toArray(
+                    new QValueConstraint[constraints.size()]));
-            List<InternalValue> values = new ArrayList();
+            List<InternalValue> values = new ArrayList<InternalValue>();
-            def.setDefaultValues((InternalValue[])
-                    values.toArray(new InternalValue[values.size()]));
+            def.setDefaultValues(values.toArray(new InternalValue[values.size()]));
+     * @throws NamespaceException if a namespace is not defined
-                walker.getAttribute(Constants.SAMENAMESIBLINGS_ATTRIBUTE))
-                .booleanValue());
+                walker.getAttribute(Constants.SAMENAMESIBLINGS_ATTRIBUTE)));
-            List types = new ArrayList();
+            List<Name> types = new ArrayList<Name>();
-            def.setRequiredPrimaryTypes(
-                    (Name[]) types.toArray(new Name[types.size()]));
+            def.setRequiredPrimaryTypes(types.toArray(new Name[types.size()]));
