- improved extensibility of repository
- fixing potential deadlock in version manager

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@369016 13f79535-47bb-0310-9956-ffa450edef68

+     * workaround for potential deadlock
+     */
+    private final Object eventSourceLock = new Object();
+
+    /**
-     * This method needs to be synchronized since it sets the event source
-     * to be used when creating the events to be dispatched later on.
+     * This method must not be synchronized since it could cause deadlocks with
+     * item-reading listeners in the observation thread.
-    public synchronized VersionHistory createVersionHistory(Session session,
-                                                            NodeState node)
+    public VersionHistory createVersionHistory(Session session, NodeState node)
-        eventSource = (SessionImpl) session;
+        InternalVersionHistory history;
+        synchronized (eventSourceLock) {
+            // This needs to be synchronized since it sets the event source
+            // to be used when creating the events to be dispatched later on.
+            eventSource = (SessionImpl) session;
-        InternalVersionHistory history = createVersionHistory(node);
+            history = createVersionHistory(node);
+        }
+
-     * This method needs to be synchronized since it sets the event source
-     * to be used when creating the events to be dispatched later on.
+     * This method must not be synchronized since it could cause deadlocks with
+     * item-reading listeners in the observation thread.
-    public synchronized Version checkin(NodeImpl node) throws RepositoryException {
-        eventSource = (SessionImpl) node.getSession();
+    public Version checkin(NodeImpl node) throws RepositoryException {
+        InternalVersion version;
-        String histUUID = node.getProperty(QName.JCR_VERSIONHISTORY).getString();
-        InternalVersion version = checkin(
-                (InternalVersionHistoryImpl) getVersionHistory(histUUID), node);
+        synchronized (eventSourceLock) {
+            // This  needs to be synchronized since it sets the event source
+            // to be used when creating the events to be dispatched later on.
+            eventSource = (SessionImpl) node.getSession();
-        AbstractVersion v = (AbstractVersion) eventSource.getNodeByUUID(version.getId());
+            String histUUID = node.getProperty(QName.JCR_VERSIONHISTORY).getString();
+            version = checkin(
+                    (InternalVersionHistoryImpl) getVersionHistory(histUUID), node);
-        // invalidate predecessors successor properties
-        InternalVersion[] preds = version.getPredecessors();
-        for (int i = 0; i < preds.length; i++) {
-            PropertyId propId = new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS);
-            versProvider.onPropertyChanged(propId);
+            // invalidate predecessors successor properties
+            InternalVersion[] preds = version.getPredecessors();
+            for (int i = 0; i < preds.length; i++) {
+                PropertyId propId = new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS);
+                versProvider.onPropertyChanged(propId);
+            }
-        return v;
+        return (AbstractVersion) eventSource.getNodeByUUID(version.getId());
-     * This method needs to be synchronized since it sets the event source
-     * to be used when creating the events to be dispatched later on.
+     * This method must not be synchronized since it could cause deadlocks with
+     * item-reading listeners in the observation thread.
-    public synchronized void removeVersion(VersionHistory history, QName name)
+    public void removeVersion(VersionHistory history, QName name)
-        eventSource = (SessionImpl) history.getSession();
-        // save away predecessors before removing version
-        AbstractVersion version = (AbstractVersion) historyImpl.getNode(name);
-        InternalVersion preds[] = version.getInternalVersion().getPredecessors();
+        synchronized (eventSourceLock) {
+            // This needs to be synchronized since it sets the event source
+            // to be used when creating the events to be dispatched later on.
+            eventSource = (SessionImpl) history.getSession();
-        InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl)
-                historyImpl.getInternalVersionHistory();
-        removeVersion(vh, name);
+            // save away predecessors before removing version
+            AbstractVersion version = (AbstractVersion) historyImpl.getNode(name);
+            InternalVersion preds[] = version.getInternalVersion().getPredecessors();
-        // invalidate predecessors successor properties
-        for (int i = 0; i < preds.length; i++) {
-            PropertyId propId = new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS);
-            versProvider.onPropertyChanged(propId);
+            InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl)
+                    historyImpl.getInternalVersionHistory();
+            removeVersion(vh, name);
+
+            // invalidate predecessors successor properties
+            for (int i = 0; i < preds.length; i++) {
+                PropertyId propId = new PropertyId(preds[i].getId(), QName.JCR_SUCCESSORS);
+                versProvider.onPropertyChanged(propId);
+            }
-     * This method needs to be synchronized since it sets the event source
-     * to be used when creating the events to be dispatched later on.
+     * This method must not be synchronized since it could cause deadlocks with
+     * item-reading listeners in the observation thread.
-    public synchronized Version setVersionLabel(VersionHistory history,
+    public Version setVersionLabel(VersionHistory history,
-        eventSource = (SessionImpl) history.getSession();
+        InternalVersion v;
+        synchronized (eventSourceLock) {
+            // This  needs to be synchronized since it sets the event source
+            // to be used when creating the events to be dispatched later on.
+            eventSource = (SessionImpl) history.getSession();
-        InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl)
-                historyImpl.getInternalVersionHistory();
-        InternalVersion v = setVersionLabel(vh, version, label, move);
+            InternalVersionHistoryImpl vh = (InternalVersionHistoryImpl)
+                    historyImpl.getInternalVersionHistory();
+            v = setVersionLabel(vh, version, label, move);
+        }
