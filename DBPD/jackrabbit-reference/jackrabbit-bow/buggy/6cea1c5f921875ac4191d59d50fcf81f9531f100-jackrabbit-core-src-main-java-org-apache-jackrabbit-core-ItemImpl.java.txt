JCR-1104 - JSR 283 support
- shareble nodes (work in progress)
- prepare for returning stable paths on shareable nodes or their descendants

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647767 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.map.ReferenceMap;
-import java.util.Collections;
-import java.util.Map;
-    protected int status;
+    //protected int status;
-     * <code>ItemState</code> associated with this <code>Item</code>
+     * Item data associated with this item.
-    protected ItemState state;
+    protected final ItemData data;
-     * Listeners (weak references)
-     */
-    protected final Map listeners =
-            Collections.synchronizedMap(new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK));
-
-    /**
-    ItemImpl(ItemManager itemMgr, SessionImpl session, ItemId id, ItemState state,
-             ItemLifeCycleListener[] listeners) {
+    ItemImpl(ItemManager itemMgr, SessionImpl session, ItemData data) {
-        this.id = id;
+        this.id = data.getId();
-        this.state = state;
-        status = STATUS_NORMAL;
-
-        if (listeners != null) {
-            for (int i = 0; i < listeners.length; i++) {
-                addLifeCycleListener(listeners[i]);
-            }
-        }
+        this.data = data;
+        data.setStatus(STATUS_NORMAL);
+        final int status = data.getStatus();
-        return state.isTransient();
+        return getItemState().isTransient();
+        final int status = data.getStatus();
-            status = STATUS_INVALIDATED;
-            // notify the listeners that this instance has been
+            data.setStatus(STATUS_INVALIDATED);
+            // notify the manager that this instance has been
-            notifyInvalidated();
+            itemMgr.itemInvalidated(id, data);
-        return state;
-    }
-
-    /**
-     * Notify the listeners that this instance has been created.
-     */
-    protected void notifyCreated() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemLifeCycleListener[] la =
-                (ItemLifeCycleListener[]) listeners.values().toArray(
-                        new ItemLifeCycleListener[listeners.size()]);
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].itemCreated(this);
-            }
-        }
-    }
-
-    /**
-     * Notify the listeners that this instance has been invalidated
-     * (i.e. it has been temporarily rendered 'invalid').
-     */
-    protected void notifyInvalidated() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemLifeCycleListener[] la =
-                (ItemLifeCycleListener[]) listeners.values().toArray(
-                        new ItemLifeCycleListener[listeners.size()]);
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].itemInvalidated(id, this);
-            }
-        }
-    }
-
-    /**
-     * Notify the listeners that this instance has been destroyed
-     * (i.e. it has been permanently rendered 'invalid').
-     */
-    protected void notifyDestroyed() {
-        // copy listeners to array to avoid ConcurrentModificationException
-        ItemLifeCycleListener[] la =
-                (ItemLifeCycleListener[]) listeners.values().toArray(
-                        new ItemLifeCycleListener[listeners.size()]);
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].itemDestroyed(id, this);
-            }
-        }
-    }
-
-    /**
-     * Add an <code>ItemLifeCycleListener</code>
-     *
-     * @param listener the new listener to be informed on life cycle changes
-     */
-    void addLifeCycleListener(ItemLifeCycleListener listener) {
-        if (!listeners.containsKey(listener)) {
-            listeners.put(listener, listener);
-        }
-    }
-
-    /**
-     * Remove an <code>ItemLifeCycleListener</code>
-     *
-     * @param listener an existing listener
-     */
-    void removeLifeCycleListener(ItemLifeCycleListener listener) {
-        listeners.remove(listener);
+        return data.getState();
+            final ItemState state = getItemState();
-            ItemState itemState = (ItemState) iter.next();
-            ItemImpl item = itemMgr.getItem(itemState);
+            ItemState state = (ItemState) iter.next();
+            ItemImpl item = itemMgr.getItem(state.getId(),
+                    state.getStatus() == ItemState.STATUS_NEW);
-
-                    if (itemState.isNode()) {
-                        item = itemMgr.createNodeInstance((NodeState) itemState);
-                    } else {
-                        item = itemMgr.createPropertyInstance((PropertyState) itemState);
-                    }
+                    item = itemMgr.createItemInstance(itemState);
-                        if (itemState.isNode()) {
-                            item = itemMgr.createNodeInstance((NodeState) itemState);
-                        } else {
-                            item = itemMgr.createPropertyInstance((PropertyState) itemState);
-                        }
+                        item = itemMgr.createItemInstance(itemState);
-    //----------------------------------------------------< ItemStateListener >
-    /**
-     * {@inheritDoc}
-     */
-    public void stateCreated(ItemState created) {
-        status = STATUS_NORMAL;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDestroyed(ItemState destroyed) {
-        if (state == destroyed) {
-            // set state of this instance to 'destroyed'
-            status = STATUS_DESTROYED;
-            // dispose state
-            if (state == destroyed) {
-                state = null;
-            }
-            /**
-             * notify the listeners that this instance has been
-             * permanently invalidated
-             */
-            notifyDestroyed();
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateModified(ItemState modified) {
-        if (state == modified) {
-            status = STATUS_MODIFIED;
-        }
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void stateDiscarded(ItemState discarded) {
-        if (state == discarded) {
-            /**
-             * the state of this item has been discarded, probably as a result
-             * of calling Item.refresh(false) or ItemImpl.setRemoved()
-             */
-            if (isTransient()) {
-                switch (state.getStatus()) {
-                    /**
-                     * persistent item that has been transiently removed
-                     */
-                    case ItemState.STATUS_EXISTING_REMOVED:
-                        /**
-                         * persistent item that has been transiently modified
-                         */
-                    case ItemState.STATUS_EXISTING_MODIFIED:
-                        /**
-                         * persistent item that has been transiently modified or removed
-                         * and the underlying persistent state has been externally
-                         * modified since the transient modification/removal.
-                         */
-                    case ItemState.STATUS_STALE_MODIFIED:
-                        ItemState persistentState = state.getOverlayedState();
-                        /**
-                         * the state is a transient wrapper for the underlying
-                         * persistent state, therefore restore the
-                         * persistent state and resurrect this item instance
-                         * if necessary
-                         */
-                        stateMgr.disconnectTransientItemState(state);
-                        state = persistentState;
-
-                        return;
-
-                        /**
-                         * persistent item that has been transiently modified or removed
-                         * and the underlying persistent state has been externally
-                         * destroyed since the transient modification/removal.
-                         */
-                    case ItemState.STATUS_STALE_DESTROYED:
-                        /**
-                         * first notify the listeners that this instance has been
-                         * permanently invalidated
-                         */
-                        notifyDestroyed();
-                        // now set state of this instance to 'destroyed'
-                        status = STATUS_DESTROYED;
-                        state = null;
-                        return;
-
-                        /**
-                         * new item that has been transiently added
-                         */
-                    case ItemState.STATUS_NEW:
-                        /**
-                         * first notify the listeners that this instance has been
-                         * permanently invalidated
-                         */
-                        notifyDestroyed();
-                        // now set state of this instance to 'destroyed'
-                        status = STATUS_DESTROYED;
-                        // finally dispose state
-                        state = null;
-                        return;
-                }
-            }
-
-            /**
-             * first notify the listeners that this instance has been
-             * invalidated
-             */
-            notifyInvalidated();
-            // now render this instance 'invalid'
-            status = STATUS_INVALIDATED;
-        }
-    }
-
+
+        final ItemState state = getItemState();
+        final ItemState state = getItemState();
+        final ItemState state = getItemState();
-            transientState = state;
+            transientState = getItemState();
+        final ItemState state = getItemState();
