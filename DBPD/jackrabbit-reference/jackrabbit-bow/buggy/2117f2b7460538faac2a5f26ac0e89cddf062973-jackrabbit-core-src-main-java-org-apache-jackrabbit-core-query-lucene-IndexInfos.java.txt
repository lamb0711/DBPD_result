JCR-2216: Append-only index updates

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@801253 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Set;
-import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+import java.util.Map;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
- * Stores a sequence of index names.
+ * Stores a sequence of index names and their current generation.
-class IndexInfos {
+class IndexInfos implements Cloneable {
+
+    /**
+     * Logger instance for this class
+     */
+    private static final Logger log = LoggerFactory.getLogger(IndexInfos.class);
+
+    /**
+     * IndexInfos version for Jackrabbit 1.0 to 1.5.x
+     */
+    private static final int NAMES_ONLY = 0;
+
+    /**
+     * IndexInfos version for Jackrabbit 2.0
+     */
+    private static final int WITH_GENERATION = 1;
-     * Flag that indicates if index infos needs to be written to disk.
+     * Map of {@link IndexInfo}s. Key=name
-    private boolean dirty = false;
+    private LinkedHashMap<String, IndexInfo> indexes = new LinkedHashMap<String, IndexInfo>();
-     * List of index names
+     * The directory where the index infos are stored.
-    private List indexes = new ArrayList();
+    private final Directory directory;
-     * Set of names for quick lookup.
-     */
-    private Set names = new HashSet();
-
-    /**
-     * Name of the file where the infos are stored.
+     * Base name of the file where the infos are stored.
-     * Creates a new IndexInfos using <code>fileName</code>.
-     *
-     * @param fileName the name of the file where infos are stored.
+     * The generation for this index infos.
-    IndexInfos(String fileName) {
-        this.name = fileName;
+    private long generation = 0;
+
+    /**
+     * When this index infos were last modified.
+     */
+    private long lastModified;
+
+    /**
+     * Creates a new IndexInfos using <code>baseName</code> and reads the
+     * current generation.
+     *
+     * @param dir the directory where the index infos are stored.
+     * @param baseName the name of the file where infos are stored.
+     * @throws IOException if an error occurs while reading the index infos
+     * file.
+     */
+    IndexInfos(Directory dir, String baseName) throws IOException {
+        this.directory = dir;
+        this.name = baseName;
+        long gen = getCurrentGeneration(getFileNames(dir, baseName), baseName);
+        if (gen == -1) {
+            // write initial infos
+            write();
+        } else {
+            this.generation = gen;
+            read();
+        }
-     * Returns <code>true</code> if this index infos exists in
-     * <code>dir</code>.
+     * Creates a new IndexInfos using <code>fileName</code> and reads the given
+     * <code>generation</code> of the index infos.
-     * @param dir the directory where to look for the index infos.
-     * @return <code>true</code> if it exists; <code>false</code> otherwise.
-     * @throws IOException if an error occurs while reading from the directory.
+     * @param dir the directory where the index infos are stored.
+     * @param baseName the name of the file where infos are stored.
+     * @param generation the generation to read.
+     * @throws IOException if an error occurs while reading the index infos
+     * file.
-    boolean exists(Directory dir) throws IOException {
-        return dir.fileExists(name);
+    IndexInfos(Directory dir, String baseName, long generation) throws IOException {
+        if (generation < 0) {
+            throw new IllegalArgumentException();
+        }
+        this.directory = dir;
+        this.name = baseName;
+        this.generation = generation;
+        read();
-     * Returns the name of the file where infos are stored.
+     * Returns the name of the file with the most current version where infos
+     * are stored.
-        return name;
+        return getFileName(generation);
-     * Reads the index infos.
+     * Writes the index infos to disk.
-     * @param dir the directory from where to read the index infos.
-    void read(Directory dir) throws IOException {
-        InputStream in = new IndexInputStream(dir.openInput(name));
+    void write() throws IOException {
+        // increment generation
+        generation++;
+        String newName = getFileName();
+        boolean success = false;
-            DataInputStream di = new DataInputStream(in);
-            counter = di.readInt();
-            for (int i = di.readInt(); i > 0; i--) {
-                String indexName = di.readUTF();
-                indexes.add(indexName);
-                names.add(indexName);
+            OutputStream out = new IndexOutputStream(
+                    directory.createOutput(newName));
+            try {
+                log.debug("Writing IndexInfos {}", newName);
+                DataOutputStream dataOut = new DataOutputStream(out);
+                dataOut.writeInt(WITH_GENERATION);
+                dataOut.writeInt(counter);
+                dataOut.writeInt(indexes.size());
+                for (Iterator it = iterator(); it.hasNext(); ) {
+                    IndexInfo info = (IndexInfo) it.next();
+                    dataOut.writeUTF(info.getName());
+                    dataOut.writeLong(info.getGeneration());
+                    log.debug("  + {}:{}", info.getName(), info.getGeneration());
+                }
+            } finally {
+                out.close();
+            lastModified = System.currentTimeMillis();
+            success = true;
-            in.close();
+            if (!success) {
+                // try to delete the file and decrement generation
+                try {
+                    directory.deleteFile(newName);
+                } catch (IOException e) {
+                    log.warn("Unable to delete file: " + directory + "/" + newName);
+                }
+                generation--;
+            }
-     * Writes the index infos to disk if they are dirty.
-     *
-     * @param dir the directory where to write the index infos.
-     * @throws IOException if an error occurs.
+     * @return an iterator over the {@link IndexInfo}s contained in this index
+     *          infos.
-    void write(Directory dir) throws IOException {
-        // do not write if not dirty
-        if (!dirty) {
-            return;
-        }
-
-        OutputStream out = new IndexOutputStream(dir.createOutput(name + ".new"));
-        try {
-            DataOutputStream dataOut = new DataOutputStream(out);
-            dataOut.writeInt(counter);
-            dataOut.writeInt(indexes.size());
-            for (int i = 0; i < indexes.size(); i++) {
-                dataOut.writeUTF(getName(i));
-            }
-        } finally {
-            out.close();
-        }
-        // delete old
-        if (dir.fileExists(name)) {
-            dir.deleteFile(name);
-        }
-        dir.renameFile(name + ".new", name);
-        dirty = false;
+    Iterator iterator() {
+        return indexes.values().iterator();
-    /**
-     * Returns the index name at position <code>i</code>.
-     * @param i the position.
-     * @return the index name.
-     */
-    String getName(int i) {
-        return (String) indexes.get(i);
-    }
-     * Adds a name to the index infos.
-     * @param name the name to add.
+     * @return the time when this index infos where last modified.
-    void addName(String name) {
-        if (names.contains(name)) {
+    long getLastModified() {
+        return lastModified;
+    }
+
+    /**
+     * Adds a name to the index infos.
+     *
+     * @param name the name to add.
+     * @param generation the current generation of the index.
+     */
+    void addName(String name, long generation) {
+        if (indexes.containsKey(name)) {
-        indexes.add(name);
-        names.add(name);
-        dirty = true;
+        indexes.put(name, new IndexInfo(name, generation));
+    }
+
+    void updateGeneration(String name, long generation) {
+        IndexInfo info = indexes.get(name);
+        if (info == null) {
+            throw new NoSuchElementException(name);
+        }
+        if (info.getGeneration() != generation) {
+            info.setGeneration(generation);
+        }
-        names.remove(name);
-        dirty = true;
-    }
-
-    /**
-     * Removes the name from the index infos.
-     * @param i the position.
-     */
-    void removeName(int i) {
-        Object name = indexes.remove(i);
-        names.remove(name);
-        dirty = true;
-        return names.contains(name);
+        return indexes.containsKey(name);
+    }
+
+    /**
+     * @return the generation of this index infos.
+     */
+    long getGeneration() {
+        return generation;
-        dirty = true;
+
+    /**
+     * Clones this index infos.
+     *
+     * @return a clone of this index infos.
+     */
+    public IndexInfos clone() {
+        try {
+            IndexInfos clone = (IndexInfos) super.clone();
+            clone.indexes = (LinkedHashMap) indexes.clone();
+            for (Map.Entry<String, IndexInfo> entry : clone.indexes.entrySet()) {
+                entry.setValue(entry.getValue().clone());
+            }
+            return clone;
+        } catch (CloneNotSupportedException e) {
+            // never happens, this class is cloneable
+            throw new RuntimeException();
+        }
+    }
+
+    //----------------------------------< internal >----------------------------
+
+    /**
+     * Reads the index infos with the currently set {@link #generation}.
+     *
+     * @throws IOException if an error occurs.
+     */
+    private void read() throws IOException {
+        String fileName = getFileName(generation);
+        InputStream in = new IndexInputStream(directory.openInput(fileName));
+        try {
+            LinkedHashMap<String, IndexInfo> indexes = new LinkedHashMap<String, IndexInfo>();
+            DataInputStream di = new DataInputStream(in);
+            int version;
+            if (generation == 0) {
+                version = NAMES_ONLY;
+            } else {
+                version = di.readInt();
+            }
+            int counter = di.readInt();
+            for (int i = di.readInt(); i > 0; i--) {
+                String indexName = di.readUTF();
+                long gen = 0;
+                if (version >= WITH_GENERATION) {
+                    gen = di.readLong();
+                }
+                indexes.put(indexName, new IndexInfo(indexName, gen));
+            }
+            // when successfully read set values
+            this.lastModified = directory.fileModified(fileName);
+            this.indexes = indexes;
+            this.counter = counter;
+        } finally {
+            in.close();
+        }
+    }
+
+    /**
+     * Returns the name of the file with the given generation where infos
+     * are stored.
+     *
+     * @param gen the generation of the file.
+     * @return the name of the file where infos are stored.
+     */
+    private String getFileName(long gen) {
+        if (gen == 0) {
+            return name;
+        } else {
+            return name + "_" + Long.toString(gen, Character.MAX_RADIX);
+        }
+    }
+
+    /**
+     * Returns all generations of this index infos.
+     *
+     * @param directory the directory where the index infos are stored.
+     * @param base the base name for the index infos.
+     * @return names of all generation files of this index infos.
+     */
+    private static String[] getFileNames(Directory directory, final String base) {
+        String[] names = new String[0];
+        try {
+            names = directory.list();
+        } catch (IOException e) {
+            // TODO: log warning? or throw?
+        }
+        List<String> nameList = new ArrayList<String>(names.length);
+        for (String n : names) {
+            if (n.startsWith(base)) {
+                nameList.add(n);
+            }
+        }
+        return nameList.toArray(new String[nameList.size()]);
+    }
+
+    /**
+     * Parse the generation off the file name and return it.
+     *
+     * @param fileName the generation file that contains index infos.
+     * @param base the base name.
+     * @return the generation of the given file.
+     */
+    private static long generationFromFileName(String fileName, String base) {
+        if (fileName.equals(base)) {
+            return 0;
+        } else {
+            return Long.parseLong(fileName.substring(base.length() + 1),
+                    Character.MAX_RADIX);
+        }
+    }
+
+    /**
+     * Returns the most current generation of the given files.
+     *
+     * @param fileNames the file names from where to obtain the generation.
+     * @param base the base name.
+     * @return the most current generation.
+     */
+    private static long getCurrentGeneration(String[] fileNames, String base) {
+        long max = -1;
+        int i = 0;
+        while (i < fileNames.length) {
+            long gen = generationFromFileName(fileNames[i], base);
+            if (gen > max) {
+                max = gen;
+            }
+            i++;
+        }
+        return max;
+    }
