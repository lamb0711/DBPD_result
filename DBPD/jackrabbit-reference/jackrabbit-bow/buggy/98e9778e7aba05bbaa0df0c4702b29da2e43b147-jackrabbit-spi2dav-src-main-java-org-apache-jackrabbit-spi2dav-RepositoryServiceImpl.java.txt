JCR-2542: spi2dav: EventFilters not respected

- spi.commons extension interface for Session extension
- noLocal flag support
- client sends session identifier (in Link header field) on write operations so that POLL can compute the flag
- SUBSCRIBE returns flags indicating extension features 

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1203173 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.webdav.observation.SubscriptionDiscovery;
+    /** Observation features. */
+    private boolean remoteServerProvidesNodeTypes = false;
+    private boolean remoteServerProvidesNoLocalFlag = false;
+
+        
+        initMethod(method, sessionInfo);
+    }
-        if (sessionInfo instanceof SessionInfoImpl) {
+    // set of HTTP methods that will not change the remote state
+    private static final Set<String> readMethods;
+    static {
+        Set<String> tmp = new HashSet<String>();
+        tmp.add("GET");
+        tmp.add("HEAD");
+        tmp.add("PROPFIND");
+        tmp.add("POLL");
+        tmp.add("REPORT");
+        tmp.add("SEARCH");
+        readMethods = Collections.unmodifiableSet(tmp);
+    }
+
+    // set headers for user data and session identification
+    protected static void initMethod(HttpMethod method, SessionInfo sessionInfo) throws RepositoryException {
+
+        boolean isReadAccess = readMethods.contains(method.getName());
+        boolean needsSessionId = !isReadAccess || "POLL".equals(method.getName());
+
+        if (sessionInfo instanceof SessionInfoImpl && needsSessionId) {
+            StringBuilder linkHeaderField = new StringBuilder();
+
+            String sessionIdentifier = ((SessionInfoImpl) sessionInfo)
+                    .getSessionIdentifier();
+            linkHeaderField.append("<" + sessionIdentifier + ">; rel=\""
+                    + JcrRemotingConstants.RELATION_REMOTE_SESSION_ID + "\"");
+
-            if (userdata != null) {
+            if (userdata != null && ! isReadAccess) {
-                method.addRequestHeader("Link", "<data:," + escaped
-                        + ">; rel=\"" + JcrRemotingConstants.RELATION_USER_DATA
-                        + "\"");
+                linkHeaderField.append((", <data:," + escaped + ">; rel=\""
+                        + JcrRemotingConstants.RELATION_USER_DATA + "\""));
+
+            method.addRequestHeader("Link", linkHeaderField.toString());
-        // add batchId as separate header
+        // add batchId as separate header, TODO: could probably re-use session id Link relation
-                type = (values.length > 0) ? values[0].getType() : loadType(uri, client, propertyId, resolver);
+                type = (values.length > 0) ? values[0].getType() : loadType(uri, client, propertyId, sessionInfo, resolver);
-    private int loadType(String propertyURI, HttpClient client, PropertyId propertyId, NamePathResolver resolver) throws IOException, DavException, RepositoryException {
+    private int loadType(String propertyURI, HttpClient client, PropertyId propertyId, SessionInfo sessionInfo, NamePathResolver resolver) throws IOException, DavException, RepositoryException {
-        checkEventFilterSupport(filters);
+
+
+        try {
+            checkEventFilterSupport(filters);
+        }
+        catch (UnsupportedRepositoryOperationException ex) {
+            unsubscribe(rootUri, subscriptionId, sessionInfo);
+            throw (ex);
+        }
-    private void checkEventFilterSupport(EventFilter[] filters) throws UnsupportedRepositoryOperationException {
+    private void checkEventFilterSupport(EventFilter[] filters)
+            throws UnsupportedRepositoryOperationException {
-                EventFilterImpl efi = (EventFilterImpl)ef;
-                // TODO: add code that verifies that the remote server can send node type information
-                if (efi.getNoLocal()) {
-                    throw new UnsupportedRepositoryOperationException("This SPI implementation does not support filtering using the 'noLocal' flag (see issue JCR-2542)");
+                EventFilterImpl efi = (EventFilterImpl) ef;
+                if (efi.getNodeTypeNames() != null
+                        && !remoteServerProvidesNodeTypes) {
+                    throw new UnsupportedRepositoryOperationException(
+                            "Remote server does not provide node type information in events");
+                }
+                if (efi.getNoLocal() && !remoteServerProvidesNoLocalFlag) {
+                    throw new UnsupportedRepositoryOperationException(
+                            "Remote server does not provide local flag in events");
+            initMethod(method, sessionInfo);
+
+            org.apache.jackrabbit.webdav.observation.Subscription[] subs = method.getResponseAsSubscriptionDiscovery().getValue();
+            if (subs.length == 1) {
+                this.remoteServerProvidesNodeTypes = subs[0].eventsProvideNodeTypeInformation();
+                this.remoteServerProvidesNoLocalFlag = subs[0].eventsProvideNoLocalFlag();
+            }
+
+            initMethod(method, sessionInfo);
-                            ObservationConstants.XML_EVENT_TRANSACTION_ID,
+                            ObservationConstants.XML_EVENT_LOCAL,
-                        isLocal = value.equals(sessionInfo.getLastBatchId());
+                        isLocal = Boolean.parseBoolean(value);
