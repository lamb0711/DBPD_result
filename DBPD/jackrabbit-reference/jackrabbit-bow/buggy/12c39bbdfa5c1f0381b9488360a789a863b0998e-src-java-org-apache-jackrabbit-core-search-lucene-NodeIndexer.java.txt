Redesigned query manager to support pluggable implementation for search index.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@124906 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.*;
-import org.apache.jackrabbit.core.search.NamespaceMappings;
-import org.apache.jackrabbit.core.state.*;
+import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.ItemStateProvider;
+import org.apache.jackrabbit.core.state.NoSuchItemStateException;
+import org.apache.jackrabbit.core.state.ItemStateException;
+import org.apache.jackrabbit.core.state.PropertyState;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.NoPrefixDeclaredException;
+import org.apache.jackrabbit.core.PropertyId;
+import org.apache.jackrabbit.core.InternalValue;
+import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.QName;
-import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+ * Creates a lucene <code>Document</code> object from a {@link javax.jcr.Node}.
+ * @todo add support for indexing of nt:resource. e.g. when mime type is text/*
-public class NodeIndexer {
+class NodeIndexer {
+    /** The <code>NodeState</code> of the node to index */
+
+    /** The persistent item state provider */
-    private final Path path;
+
+    /**
+     * Namespace mappings to use for indexing. This is the internal
+     * namespace mapping.
+     */
+    /**
+     * Creates a new node indexer.
+     * @param node the node state to index.
+     * @param stateProvider the persistent item state manager to retrieve properties.
+     * @param mappings internal namespace mappings.
+     */
-                        ItemStateProvider stateMgr,
-                        Path path,
+                        ItemStateProvider stateProvider,
-        this.stateProvider = stateMgr;
-        this.path = path;
+        this.stateProvider = stateProvider;
+    /**
+     * Creates a lucene Document from a node.
+     * @param node the node state to index.
+     * @param stateProvider the state provider to retrieve property values.
+     * @param mappings internal namespace mappings.
+     * @return the lucene Document.
+     * @throws RepositoryException if an error occurs while reading property
+     *   values from the <code>ItemStateProvider</code>.
+     */
-                                          ItemStateProvider stateMgr,
-                                          Path path,
-                                          NamespaceMappings mappings) {
-        NodeIndexer indexer = new NodeIndexer(node, stateMgr, path, mappings);
+                                          ItemStateProvider stateProvider,
+                                          NamespaceMappings mappings)
+            throws RepositoryException {
+        NodeIndexer indexer = new NodeIndexer(node, stateProvider, mappings);
-    private Document createDoc() {
+    /**
+     * Creates a lucene Document.
+     * @return the lucene Document with the index layout.
+     * @throws RepositoryException if an error occurs while reading property
+     *   values from the <code>ItemStateProvider</code>.
+     */
+    private Document createDoc() throws RepositoryException {
-            if (path.denotesRoot()) {
+            if (node.getParentUUID() == null) {
+                // root node
+                doc.add(new Field(FieldNames.LABEL, "", false, true, false));
+                NodeState parent = (NodeState) stateProvider.getItemState(
+                        new NodeId(node.getParentUUID()));
+                List entries = parent.getChildNodeEntries(node.getUUID());
+                for (Iterator it = entries.iterator(); it.hasNext();) {
+                    NodeState.ChildNodeEntry child = (NodeState.ChildNodeEntry) it.next();
+                    String name = child.getName().toJCRName(mappings);
+                    doc.add(new Field(FieldNames.LABEL, name, false, true, false));
+                }
-            // Label
-            doc.add(new Field(FieldNames.LABEL, path.getNameElement().toJCRName(mappings),
-                    false, true, false));
+        } catch (NoSuchItemStateException e) {
+            throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
+        } catch (ItemStateException e) {
+            throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
-                // FIXME do logging? throw?
+                throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
-                // FIXME do logging? throw?
+                throw new RepositoryException("Error while indexing node: " + node.getUUID(), e);
+    /**
+     * Adds a value to the lucene Document.
+     * @param doc the document.
+     * @param value the internal jackrabbit value.
+     * @param name the name of the property.
+     */
