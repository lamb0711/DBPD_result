JCR-1104: JSR 283 support (work in progress)
- NodeLocalName

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@647798 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermDocs;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.core.query.lucene.hits.ScorerHits;
+import org.apache.jackrabbit.core.query.lucene.hits.Hits;
-    private final String nameTest;
+    private final Name nameTest;
+
+    /**
+     * The index format version.
+     */
+    private final IndexFormatVersion version;
+
+    /**
+     * The internal namespace mappings.
+     */
+    private final NamespaceMappings nsMappings;
+     * @param version the index format version.
+     * @param nsMappings the internal namespace mappings.
-    ParentAxisQuery(Query context, String nameTest) {
+    ParentAxisQuery(Query context, Name nameTest,
+                   IndexFormatVersion version, NamespaceMappings nsMappings) {
+        this.version = version;
+        this.nsMappings = nsMappings;
-            return new ParentAxisQuery(cQuery, nameTest);
+            return new ParentAxisQuery(cQuery, nameTest, version, nsMappings);
-            return new ParentAxisScorer(searcher.getSimilarity(), reader, resolver);
+            return new ParentAxisScorer(searcher.getSimilarity(),
+                    reader, searcher, resolver);
+         * The searcher instance.
+         */
+        private final Searcher searcher;
+
+        /**
+         * @param searcher   the index searcher.
+         * @param resolver   the hierarchy resolver.
-        protected ParentAxisScorer(Similarity similarity, IndexReader reader, HierarchyResolver resolver) {
+        protected ParentAxisScorer(Similarity similarity,
+                                   IndexReader reader,
+                                   Searcher searcher,
+                                   HierarchyResolver resolver) {
+            this.searcher = searcher;
-                    TermDocs tDocs = reader.termDocs(new Term(FieldNames.LABEL, nameTest));
-                    try {
-                        for (int i = hits.nextSetBit(0); i >= 0; i = hits.nextSetBit(i + 1)) {
-                            if (!tDocs.skipTo(i)) {
-                                // no more name tests, clear remaining
-                                hits.clear(i, hits.length());
-                            } else {
-                                // assert doc >= i
-                                int doc = tDocs.doc();
-                                if (doc > i) {
-                                    // clear hits
-                                    hits.clear(i, doc);
-                                    i = doc;
-                                }
+                    Query nameQuery = new NameQuery(nameTest, version, nsMappings);
+                    Hits nameHits = new ScorerHits(nameQuery.weight(searcher).scorer(reader));
+                    for (int i = hits.nextSetBit(0); i >= 0; i = hits.nextSetBit(i + 1)) {
+                        int doc = nameHits.skipTo(i);
+                        if (doc == -1) {
+                            // no more name tests, clear remaining
+                            hits.clear(i, hits.length());
+                        } else {
+                            // assert doc >= i
+                            if (doc > i) {
+                                // clear hits
+                                hits.clear(i, doc);
+                                i = doc;
-                    } finally {
-                        tDocs.close();
