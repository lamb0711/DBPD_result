JCR-978: Remove circular dependency between VersionManagerImpl and VersionItemStateProvider

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@550466 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.ReferentialIntegrityException;
-     * the shared state manager for the version storage
+     * the version state manager for the version storage
-    private SharedItemStateManager sharedStateMgr;
+    private VersionItemStateManager sharedStateMgr;
-            sharedStateMgr = createSharedStateManager(pMgr, rootId, ntReg, cacheFactory);
+            sharedStateMgr = createItemStateManager(pMgr, rootId, ntReg, cacheFactory);
-            versProvider = new VersionItemStateProvider(this, sharedStateMgr);
+            versProvider = new VersionItemStateProvider(
+                    getHistoryRootId(), sharedStateMgr);
-     * Sets and stored the node references from external nodes.
-     * @param references
-     * @return <code>true</code> if the references could be set.
-     */
-    public boolean setNodeReferences(NodeReferences references) {
-        acquireWriteLock();
-        try {
-            // filter out version storage intern ones
-            NodeReferences refs = new NodeReferences(references.getId());
-            Iterator iter = references.getReferences().iterator();
-            while (iter.hasNext()) {
-                PropertyId id = (PropertyId) iter.next();
-                if (!hasItem(id.getParentId())) {
-                    refs.addReference(id);
-                }
-            }
-
-            ChangeLog log = new ChangeLog();
-            log.modified(refs);
-            pMgr.store(log);
-            return true;
-        } catch (ItemStateException e) {
-            log.error("Error while setting references: " + e.toString());
-            return false;
-        } finally {
-            releaseWriteLock();
-        }
-    }
-
-    /**
-        acquireReadLock();
-            NodeReferences refs = pMgr.load(new NodeReferencesId(item.getId()));
+            NodeReferences refs = stateMgr.getNodeReferences(
+                    new NodeReferencesId(item.getId()));
-        } finally {
-            releaseReadLock();
-     * Creates a <code>SharedItemStateManager</code> or derivative.
+     * Creates a <code>VersionItemStateManager</code> or derivative.
-    protected SharedItemStateManager createSharedStateManager(PersistenceManager pMgr,
-                                                              NodeId rootId,
-                                                              NodeTypeRegistry ntReg,
-                                                              ItemStateCacheFactory cacheFactory)
+    protected VersionItemStateManager createItemStateManager(PersistenceManager pMgr,
+                                                             NodeId rootId,
+                                                             NodeTypeRegistry ntReg,
+                                                             ItemStateCacheFactory cacheFactory)
-
-    /**
-     * Spezialized SharedItemStateManager that filters out NodeReferences to
-     * non-versioning states.
-     */
-    protected class VersionItemStateManager extends SharedItemStateManager {
-
-        public VersionItemStateManager(PersistenceManager persistMgr,
-                                       NodeId rootNodeId,
-                                       NodeTypeRegistry ntReg,
-                                       ItemStateCacheFactory cacheFactory)
-                throws ItemStateException {
-            super(persistMgr, rootNodeId, ntReg, false, cacheFactory);
-        }
-
-        protected void checkReferentialIntegrity(ChangeLog changes)
-                throws ReferentialIntegrityException, ItemStateException {
-            // only store VV-type references and NV-type references
-
-            // check whether targets of modified node references exist
-            for (Iterator iter = changes.modifiedRefs(); iter.hasNext();) {
-                NodeReferences refs = (NodeReferences) iter.next();
-                NodeId id = refs.getTargetId();
-                // no need to check existence of target if there are no references
-                if (refs.hasReferences()) {
-                    if (!changes.has(id) && !hasItemState(id)) {
-                        // remove references
-                        iter.remove();
-                    }
-                }
-            }
-        }
-
-    }
