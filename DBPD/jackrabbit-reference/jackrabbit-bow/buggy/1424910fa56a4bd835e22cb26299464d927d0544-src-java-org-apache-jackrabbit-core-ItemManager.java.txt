- added lazy-loading item iterator
- optimized Node.has/getNodes(), Node.has/getProperties()

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@56953 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.util.IteratorHelper;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.*;
-    synchronized NodeIterator getChildNodes(NodeId parentId)
+    synchronized boolean hasChildNodes(NodeId parentId)
-        ArrayList children = new ArrayList();
-
-            try {
-                Item item = getItem(new NodeId(entry.getUUID()));
-                children.add(item);
-            } catch (AccessDeniedException ade) {
-                // ignore
-                continue;
+            NodeId id = new NodeId(entry.getUUID());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                return true;
-
-        return new IteratorHelper(Collections.unmodifiableList(children));
+        return false;
-    synchronized PropertyIterator getChildProperties(NodeId parentId)
+    synchronized NodeIterator getChildNodes(NodeId parentId)
+            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+        // check privileges
+        if (!session.getAccessManager().isGranted(parentId, AccessManager.READ)) {
+            // clear cache
+            ItemImpl item = retrieveItem(parentId);
+            if (item != null) {
+                evictItem(parentId);
+            }
+            throw new AccessDeniedException("cannot read item " + parentId);
+        }
+
+        ArrayList childIds = new ArrayList();
+
+        ItemState state = null;
+        try {
+            state = itemStateProvider.getItemState(parentId);
+        } catch (NoSuchItemStateException nsise) {
+            String msg = "no such item: " + parentId;
+            log.error(msg);
+            throw new ItemNotFoundException(msg);
+        } catch (ItemStateException ise) {
+            String msg = "failed to retrieve item state of node " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+
+        if (!state.isNode()) {
+            String msg = "can't list child nodes of property " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+        NodeState nodeState = (NodeState) state;
+        Iterator iter = nodeState.getChildNodeEntries().iterator();
+
+        while (iter.hasNext()) {
+            NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) iter.next();
+            NodeId id = new NodeId(entry.getUUID());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                childIds.add(id);
+            }
+        }
+
+        return new LazyItemIterator(this, childIds);
+    }
+
+    /**
+     * @param parentId
+     * @return
+     * @throws ItemNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    synchronized boolean hasChildProperties(NodeId parentId)
-        ArrayList children = new ArrayList();
-
-            try {
-                Item item = getItem(new PropertyId(parentId.getUUID(), entry.getName()));
-                children.add(item);
-            } catch (AccessDeniedException ade) {
-                // ignore
-                continue;
+
+            PropertyId id = new PropertyId(parentId.getUUID(), entry.getName());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                return true;
-        // not need to add virtual properties
+        return false;
+    }
-        return new IteratorHelper(Collections.unmodifiableList(children));
+    /**
+     * @param parentId
+     * @return
+     * @throws ItemNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    synchronized PropertyIterator getChildProperties(NodeId parentId)
+            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+        // check privileges
+        if (!session.getAccessManager().isGranted(parentId, AccessManager.READ)) {
+            ItemImpl item = retrieveItem(parentId);
+            if (item != null) {
+                evictItem(parentId);
+            }
+            throw new AccessDeniedException("cannot read item " + parentId);
+        }
+
+        ArrayList childIds = new ArrayList();
+
+        ItemState state = null;
+        try {
+            state = itemStateProvider.getItemState(parentId);
+        } catch (NoSuchItemStateException nsise) {
+            String msg = "no such item: " + parentId;
+            log.error(msg);
+            throw new ItemNotFoundException(msg);
+        } catch (ItemStateException ise) {
+            String msg = "failed to retrieve item state of node " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+
+        if (!state.isNode()) {
+            String msg = "can't list child properties of property " + parentId;
+            log.error(msg);
+            throw new RepositoryException(msg);
+        }
+        NodeState nodeState = (NodeState) state;
+        Iterator iter = nodeState.getPropertyEntries().iterator();
+
+        while (iter.hasNext()) {
+            NodeState.PropertyEntry entry = (NodeState.PropertyEntry) iter.next();
+            PropertyId id = new PropertyId(parentId.getUUID(), entry.getName());
+            // check read access
+            if (session.getAccessManager().isGranted(id, AccessManager.READ)) {
+                childIds.add(id);
+            }
+        }
+
+        return new LazyItemIterator(this, childIds);
