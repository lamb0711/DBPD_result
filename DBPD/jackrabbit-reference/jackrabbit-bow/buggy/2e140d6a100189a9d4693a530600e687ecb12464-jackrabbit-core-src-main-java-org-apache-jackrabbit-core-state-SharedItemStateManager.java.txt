JCR-2087: Upgrade to Java 5 as the base platform

Use Iterables and the foreach loop construct to simplify code that accesses a ChangeLog.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@793238 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-                for (Iterator<ItemState> iter = local.modifiedStates(); iter.hasNext();) {
-                    ItemState state = iter.next();
+                for (ItemState state : local.modifiedStates()) {
-                for (Iterator<ItemState> iter = local.deletedStates(); iter.hasNext();) {
-                    ItemState state = iter.next();
+                for (ItemState state : local.deletedStates()) {
-                for (Iterator<ItemState> iter = local.addedStates(); iter.hasNext();) {
-                    ItemState state = iter.next();
+                for (ItemState state : local.addedStates()) {
-                for (Iterator<NodeReferences> iter = local.modifiedRefs(); iter.hasNext();) {
-                    NodeReferences refs = iter.next();
+                for (NodeReferences refs : local.modifiedRefs()) {
-                for (Iterator<ItemState> iter = shared.modifiedStates(); iter.hasNext();) {
-                    ItemState state = iter.next();
+                for (ItemState state : shared.modifiedStates()) {
-                for (Iterator<ItemState> iter = shared.deletedStates(); iter.hasNext();) {
-                    ItemState state = iter.next();
+                for (ItemState state : shared.deletedStates()) {
-                for (Iterator<ItemState> iter = shared.addedStates(); iter.hasNext();) {
-                    ItemState state = iter.next();
+                for (ItemState state : shared.addedStates()) {
-            for (Iterator<ItemState> i = local.addedStates(); i.hasNext();) {
-                ItemState state = i.next();
+            for (ItemState state : local.addedStates()) {
-            for (Iterator<ItemState> i = local.modifiedStates(); i.hasNext();) {
-                ItemState state = i.next();
+            for (ItemState state : local.modifiedStates()) {
-            for (Iterator<ItemState> i = local.deletedStates(); i.hasNext();) {
-                removeReferences(i.next());
+            for (ItemState state : local.deletedStates()) {
+                removeReferences(state);
-            for (Iterator<ItemState> iter = local.deletedStates(); iter.hasNext();) {
-                ItemState state = iter.next();
+            for (ItemState state : local.deletedStates()) {
-            for (Iterator<NodeReferences> iter = local.modifiedRefs(); iter.hasNext();) {
-                NodeReferences refs = iter.next();
-                NodeId id = refs.getTargetId();
+            for (NodeReferences refs : local.modifiedRefs()) {
+                    NodeId id = refs.getTargetId();
-        Iterator<ItemState> modifiedStates = external.modifiedStates();
-        while (modifiedStates.hasNext()) {
-            ItemState state = modifiedStates.next();
+        for (ItemState state : external.modifiedStates()) {
-        Iterator<ItemState> deletedStates = external.deletedStates();
-        while (deletedStates.hasNext()) {
-            ItemState state = deletedStates.next();
+        for (ItemState state : external.deletedStates()) {
