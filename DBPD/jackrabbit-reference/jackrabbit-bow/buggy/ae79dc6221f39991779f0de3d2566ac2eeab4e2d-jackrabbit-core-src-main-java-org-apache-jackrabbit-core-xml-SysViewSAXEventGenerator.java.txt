JCR-762: Removed the hardcoded sv: prefix in favor of properly namespaced system view name constants.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@510908 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.NameResolver;
+import org.apache.jackrabbit.name.ParsingNameResolver;
+import org.xml.sax.Attributes;
+import javax.jcr.NamespaceException;
-    /**
-     * The XML elements and attributes used in serialization
-     */
-    public static final String NODE_ELEMENT = "node";
-    public static final String PREFIXED_NODE_ELEMENT =
-        QName.NS_SV_PREFIX + ":" + NODE_ELEMENT;
-
-    public static final String PROPERTY_ELEMENT = "property";
-    public static final String PREFIXED_PROPERTY_ELEMENT =
-        QName.NS_SV_PREFIX + ":" + PROPERTY_ELEMENT;;
-
-    public static final String VALUE_ELEMENT = "value";
-    public static final String PREFIXED_VALUE_ELEMENT =
-        QName.NS_SV_PREFIX + ":" + VALUE_ELEMENT;;
-
-    public static final String NAME_ATTRIBUTE = "name";
-    public static final String PREFIXED_NAME_ATTRIBUTE =
-        QName.NS_SV_PREFIX + ":" + NAME_ATTRIBUTE;
-
-    public static final String TYPE_ATTRIBUTE = "type";
-    public static final String PREFIXED_TYPE_ATTRIBUTE =
-        QName.NS_SV_PREFIX + ":" + TYPE_ATTRIBUTE;
-
+     * Name resolver for producing qualified XML names.
+     */
+    private final NameResolver resolver;
+
+    /**
+        resolver = new ParsingNameResolver(nsResolver);
-        attrs.addAttribute(QName.NS_SV_URI, NAME_ATTRIBUTE, PREFIXED_NAME_ATTRIBUTE,
-                CDATA_TYPE, nodeName);
+        addAttribute(attrs, QName.SV_NAME, CDATA_TYPE, nodeName);
-        contentHandler.startElement(QName.NS_SV_URI, NODE_ELEMENT,
-                PREFIXED_NODE_ELEMENT, attrs);
+        startElement(QName.SV_NODE, attrs);
-        contentHandler.endElement(QName.NS_SV_URI, NODE_ELEMENT, PREFIXED_NODE_ELEMENT);
+        endElement(QName.SV_NODE);
-        String propName = prop.getName();
-        attrs.addAttribute(QName.NS_SV_URI, NAME_ATTRIBUTE, PREFIXED_NAME_ATTRIBUTE,
-                CDATA_TYPE, propName);
+        addAttribute(attrs, QName.SV_NAME, CDATA_TYPE, prop.getName());
-        int type = prop.getType();
-        String typeName;
-            typeName = PropertyType.nameFromValue(type);
-        } catch (IllegalArgumentException iae) {
+            String typeName = PropertyType.nameFromValue(prop.getType());
+            addAttribute(attrs, QName.SV_TYPE, ENUMERATION_TYPE, typeName);
+        } catch (IllegalArgumentException e) {
-            throw new RepositoryException("unexpected property-type ordinal: "
-                    + type, iae);
+            throw new RepositoryException(
+                    "unexpected property-type ordinal: " + prop.getType(), e);
-        attrs.addAttribute(QName.NS_SV_URI, TYPE_ATTRIBUTE, PREFIXED_TYPE_ATTRIBUTE,
-                ENUMERATION_TYPE, typeName);
-        contentHandler.startElement(QName.NS_SV_URI, PROPERTY_ELEMENT,
-                PREFIXED_PROPERTY_ELEMENT, attrs);
+        startElement(QName.SV_PROPERTY, attrs);
-            contentHandler.startElement(QName.NS_SV_URI, VALUE_ELEMENT,
-                    PREFIXED_VALUE_ELEMENT, new AttributesImpl());
-            contentHandler.endElement(QName.NS_SV_URI, VALUE_ELEMENT,
-                    PREFIXED_VALUE_ELEMENT);
+            startElement(QName.SV_VALUE, new AttributesImpl());
+            endElement(QName.SV_VALUE);
-                contentHandler.startElement(QName.NS_SV_URI, VALUE_ELEMENT,
-                        PREFIXED_VALUE_ELEMENT, new AttributesImpl());
+                startElement(QName.SV_VALUE, new AttributesImpl());
-                contentHandler.endElement(QName.NS_SV_URI, VALUE_ELEMENT,
-                        PREFIXED_VALUE_ELEMENT);
+                endElement(QName.SV_VALUE);
-        contentHandler.endElement(QName.NS_SV_URI, PROPERTY_ELEMENT,
-                PREFIXED_PROPERTY_ELEMENT);
+        endElement(QName.SV_PROPERTY);
+
+    //-------------------------------------------------------------< private >
+
+    /**
+     * Adds an attribute to the given XML attribute set. The local part of
+     * the given {@link QName} is assumed to be a valid XML NCName, i.e. it
+     * won't be encoded.
+     *
+     * @param attributes the XML attribute set
+     * @param name name of the attribute
+     * @param type XML type of the attribute
+     * @param value value of the attribute
+     * @throws NamespaceException if the namespace of the attribute is not found
+     */
+    private void addAttribute(
+            AttributesImpl attributes, QName name, String type, String value)
+            throws NamespaceException {
+        attributes.addAttribute(
+                name.getNamespaceURI(), name.getLocalName(),
+                resolver.getJCRName(name), type, value);
+    }
+
+    /**
+     * Starts an XML element. The local part of the given {@link QName} is
+     * assumed to be a valid XML NCName, i.e. it won't be encoded.
+     *
+     * @param name name of the element
+     * @param attributes XML attributes
+     * @throws NamespaceException if the namespace of the element is not found
+     */
+    private void startElement(QName name, Attributes attributes)
+            throws NamespaceException, SAXException {
+        contentHandler.startElement(
+                name.getNamespaceURI(), name.getLocalName(),
+                resolver.getJCRName(name), attributes);
+    }
+
+    /**
+     * Ends an XML element. The local part of the given {@link QName} is
+     * assumed to be a valid XML NCName, i.e. it won't be encoded.
+     *
+     * @param name name of the element
+     * @throws NamespaceException if the namespace of the element is not found
+     */
+    private void endElement(QName name)
+            throws NamespaceException, SAXException {
+        contentHandler.endElement(
+                name.getNamespaceURI(), name.getLocalName(),
+                resolver.getJCRName(name));
+    }
+
