JCR-1104: JSR 283 support
- multiple selectors (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633843 13f79535-47bb-0310-9956-ffa450edef68

+     * <p/>
+     * The exact type is: <code>List&lt;ScoreNode[]></code>
-                session, excerptProvider, spellSuggestion);
+                queryImpl.getSelectorNames(), itemMgr, session,
+                excerptProvider, spellSuggestion);
-    protected QueryHits executeQuery() throws IOException {
+    protected MultiColumnQueryHits executeQuery() throws IOException {
-            return new DocOrderNodeIteratorImpl(itemMgr, resultNodes);
+            return new DocOrderNodeIteratorImpl(itemMgr, resultNodes, 0);
-            return new LazyScoreNodeIterator();
+            return new LazyScoreNodeIterator(0);
-        QueryHits result = null;
+        MultiColumnQueryHits result = null;
-            for (ScoreNode sn = result.nextScoreNode();
+            for (ScoreNode[] sn = result.nextScoreNodes();
-                 sn = result.nextScoreNode()) {
+                 sn = result.nextScoreNodes()) {
-                    if (accessMgr.isGranted(sn.getNodeId(), AccessManager.READ)) {
+                    if (isAccessGranted(sn)) {
+     * Checks if access is granted to all <code>nodes</code>.
+     *
+     * @param nodes the nodes to check.
+     * @return <code>true</code> if read access is granted to all
+     *         <code>nodes</code>.
+     * @throws ItemNotFoundException if one of the <code>nodes</code> is not
+     *                               found.
+     * @throws RepositoryException   if an error occurs while checking access
+     *                               rights.
+     */
+    private boolean isAccessGranted(ScoreNode[] nodes)
+            throws ItemNotFoundException, RepositoryException {
+        for (int i = 0; i < nodes.length; i++) {
+            if (nodes[i] != null && !accessMgr.isGranted(
+                    nodes[i].getNodeId(), AccessManager.READ)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    /**
+        private final int selectorIndex;
+
+        private LazyScoreNodeIterator(int selectorIndex) {
+            this.selectorIndex = selectorIndex;
+        }
+
-            return ((ScoreNode) resultNodes.get(position)).getScore();
+            return ((ScoreNode[]) resultNodes.get(position))[selectorIndex].getScore();
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public ScoreNode[] getScoreNodes() {
+            initialize();
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            return (ScoreNode[]) resultNodes.get(position);
-                ScoreNode sn = (ScoreNode) resultNodes.get(nextPos);
+                ScoreNode[] sn = (ScoreNode[]) resultNodes.get(nextPos);
-                    next = (NodeImpl) itemMgr.getItem(sn.getNodeId());
+                    next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
-                            + sn.getNodeId() + ": " + e.toString());
+                            + sn[selectorIndex].getNodeId() + ": " + e.toString());
