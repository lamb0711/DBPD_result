- cleaned up XMLPersistenceManager
- ItemState#modCount is now persisted

see http://thread.gmane.org/gmane.comp.apache.jackrabbit.devel/4137


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@329841 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.fs.FileSystemPathUtil;
+import org.apache.jackrabbit.core.state.util.BLOBStore;
+import org.apache.jackrabbit.core.state.util.FileSystemBLOBStore;
+import org.apache.jackrabbit.core.state.util.ResourceBasedBLOBStore;
-    private FileSystem itemStateStore;
+    private FileSystem itemStateFS;
-    private FileSystem blobStore;
+    private FileSystem blobFS;
+    // BLOBStore that manages BLOB data in the file system
+    private BLOBStore blobStore;
-    private String buildBlobFilePath(String parentUUID, QName propName, int i) {
-        return buildNodeFolderPath(parentUUID) + "/"
-                + FileSystemPathUtil.escapeName(propName.toString()) + "." + i + ".bin";
-    }
-
-            String msg = "invalid serialization format (unexpected element: " + walker.getName() + ")";
+            String msg = "invalid serialization format (unexpected element: "
+                    + walker.getName() + ")";
-        // @todo set modCount
-        //state.setModCount(Integer.parseInt(modCount));
+        state.setModCount(Short.parseShort(modCount));
-            String msg = "invalid serialization format (unexpected element: " + walker.getName() + ")";
+            String msg = "invalid serialization format (unexpected element: "
+                    + walker.getName() + ")";
-        // @todo set modCount
-        //state.setModCount(Integer.parseInt(modCount));
+        state.setModCount(Short.parseShort(modCount));
-                        // special handling required for binary value:
-                        // the value stores the path to the actual binary file
-                        // in the blob store
-                            values.add(InternalValue.create(
-                                    new FileSystemResource(blobStore, content)));
-                        } catch (IOException ioe) {
+                            // special handling required for binary value:
+                            // the value stores the id of the BLOB data
+                            // in the BLOB store
+                            if (blobStore instanceof ResourceBasedBLOBStore) {
+                                // optimization: if the BLOB store is resource-based
+                                // retrieve the resource directly rather than having
+                                // to read the BLOB from an input stream
+                                FileSystemResource fsRes =
+                                        ((ResourceBasedBLOBStore) blobStore).getResource(content);
+                                values.add(InternalValue.create(fsRes));
+                            } else {
+                                values.add(InternalValue.create(blobStore.get(content)));
+                            }
+                        } catch (Exception e) {
-                            throw new ItemStateException(msg, ioe);
+                            throw new ItemStateException(msg, e);
+                        // non-empty non-STRING non-BINARY value
-        itemStateStore = new BasedFileSystem(context.getFileSystem(), "/data");
+        itemStateFS = new BasedFileSystem(context.getFileSystem(), "/data");
-        //blobStore = new BasedFileSystem(wspFS, "/blobs");
-         * store blob's in local file system in a sub directory
+         * store BLOB data in local file system in a sub directory
-         * todo make blob store configurable
-        blobStore = blobFS;
+        this.blobFS = blobFS;
+        blobStore = new FileSystemBLOBStore(blobFS);
-            // close blob store
-            blobStore.close();
+            // close BLOB file system
+            blobFS.close();
+            blobFS = null;
-            if (!itemStateStore.isFile(nodeFilePath)) {
+            if (!itemStateFS.isFile(nodeFilePath)) {
-            InputStream in = itemStateStore.getInputStream(nodeFilePath);
+            InputStream in = itemStateFS.getInputStream(nodeFilePath);
-            if (!itemStateStore.isFile(propFilePath)) {
+            if (!itemStateFS.isFile(propFilePath)) {
-            InputStream in = itemStateStore.getInputStream(propFilePath);
+            InputStream in = itemStateFS.getInputStream(propFilePath);
-        FileSystemResource nodeFile = new FileSystemResource(itemStateStore, nodeFilePath);
+        FileSystemResource nodeFile = new FileSystemResource(itemStateFS, nodeFilePath);
-                        // @todo store real modCount
-                        + MODCOUNT_ATTRIBUTE + "=\"" + /*state.getModCount()*/ 0 + "\" "
+                        + MODCOUNT_ATTRIBUTE + "=\"" + state.getModCount() + "\" "
-        FileSystemResource propFile = new FileSystemResource(itemStateStore, propFilePath);
+        FileSystemResource propFile = new FileSystemResource(itemStateFS, propFilePath);
-                        // @todo store real modCount
-                        + MODCOUNT_ATTRIBUTE + "=\"" + /*state.getModCount()*/ 0 + "\" "
+                        + MODCOUNT_ATTRIBUTE + "=\"" + state.getModCount() + "\" "
-                                // spool binary value to file in blob store
+                                // put binary value in BLOB store
-                                String binPath = buildBlobFilePath(state.getParentUUID(), state.getName(), i);
-                                OutputStream binOut = null;
-                                FileSystemResource internalBlobFile = new FileSystemResource(blobStore, binPath);
-                                internalBlobFile.makeParentDirs();
+                                InputStream in = blobVal.getStream();
+                                String blobId = blobStore.createId((PropertyId) state.getId(), i);
-                                    binOut = internalBlobFile.getOutputStream();
-                                    blobVal.spool(binOut);
+                                    blobStore.put(blobId, in, blobVal.getLength());
-                                        if (binOut != null) {
-                                            binOut.close();
-                                        }
-                                    } catch (IOException ioe) {
+                                        in.close();
+                                    } catch (IOException e) {
+                                        // ignore
-                                // store path to binary file as property value
-                                writer.write(binPath);
-                                // FIXME: hack!
-                                // replace value instance with value
-                                // backed by internal file and delete temp file
-                                values[i] = InternalValue.create(internalBlobFile);
+                                // store id of BLOB as property value
+                                writer.write(blobId);
+                                // replace value instance with value backed by resource
+                                // in BLOB store and discard old value instance (e.g. temp file)
+                                values[i] = InternalValue.create(blobStore.get(blobId));
-                                blobVal = null; // gc hint
-        FileSystemResource nodeFile = new FileSystemResource(itemStateStore, nodeFilePath);
+        FileSystemResource nodeFile = new FileSystemResource(itemStateFS, nodeFilePath);
-        FileSystemResource propFile = new FileSystemResource(itemStateStore, propFilePath);
+        FileSystemResource propFile = new FileSystemResource(itemStateFS, propFilePath);
-            if (!itemStateStore.isFile(refsFilePath)) {
+            if (!itemStateFS.isFile(refsFilePath)) {
-            InputStream in = itemStateStore.getInputStream(refsFilePath);
+            InputStream in = itemStateFS.getInputStream(refsFilePath);
-        FileSystemResource refsFile = new FileSystemResource(itemStateStore, refsFilePath);
+        FileSystemResource refsFile = new FileSystemResource(itemStateFS, refsFilePath);
-        FileSystemResource refsFile = new FileSystemResource(itemStateStore, refsFilePath);
+        FileSystemResource refsFile = new FileSystemResource(itemStateFS, refsFilePath);
-            FileSystemResource nodeFile = new FileSystemResource(itemStateStore, nodeFilePath);
+            FileSystemResource nodeFile = new FileSystemResource(itemStateFS, nodeFilePath);
-            FileSystemResource propFile = new FileSystemResource(itemStateStore, propFilePath);
+            FileSystemResource propFile = new FileSystemResource(itemStateFS, propFilePath);
-            FileSystemResource refsFile = new FileSystemResource(itemStateStore, refsFilePath);
+            FileSystemResource refsFile = new FileSystemResource(itemStateFS, refsFilePath);
