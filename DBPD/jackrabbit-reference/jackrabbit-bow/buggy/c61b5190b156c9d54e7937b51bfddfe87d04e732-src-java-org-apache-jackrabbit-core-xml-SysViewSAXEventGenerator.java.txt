- improved reusability of sax event generators
- some javadoc corrections 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@165316 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NoPrefixDeclaredException;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.PropertyImpl;
-import org.apache.jackrabbit.core.QName;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.log4j.Logger;
+import javax.jcr.Node;
+import javax.jcr.Property;
-    private static Logger log = Logger.getLogger(SysViewSAXEventGenerator.class);
-
-     * @param session        the session to be used for resolving namespace mappings
+     * @throws RepositoryException if an error occurs
-    public SysViewSAXEventGenerator(NodeImpl node, boolean noRecurse,
+    public SysViewSAXEventGenerator(Node node, boolean noRecurse,
-                                    SessionImpl session,
-                                    ContentHandler contentHandler) {
-        super(node, noRecurse, skipBinary, session, contentHandler);
+                                    ContentHandler contentHandler)
+            throws RepositoryException {
+        super(node, noRecurse, skipBinary, contentHandler);
-    protected void entering(NodeImpl node, int level)
+    protected void entering(Node node, int level)
-        QName name = node.getQName();
-
-        try {
-            if (node.getDepth() == 0) {
-                // root node needs a name
-                nodeName = JCR_ROOT.toJCRName(session.getNamespaceResolver());
-            } else {
-                nodeName = name.toJCRName(session.getNamespaceResolver());
-            }
-        } catch (NoPrefixDeclaredException npde) {
-            // should never get here...
-            String msg = "internal error: encountered unregistered namespace";
-            log.debug(msg);
-            throw new RepositoryException(msg, npde);
+        if (node.getDepth() == 0) {
+            // root node needs a name
+            nodeName = jcrRoot;
+        } else {
+            // encode node name to make sure it's a valid xml name
+            nodeName = node.getName();
-    protected void enteringProperties(NodeImpl node, int level)
+    protected void enteringProperties(Node node, int level)
-    protected void leavingProperties(NodeImpl node, int level)
+    protected void leavingProperties(Node node, int level)
-    protected void leaving(NodeImpl node, int level)
+    protected void leaving(Node node, int level)
-    protected void entering(PropertyImpl prop, int level)
+    protected void entering(Property prop, int level)
-        QName name = prop.getQName();
-        String propName;
-        try {
-            propName = name.toJCRName(session.getNamespaceResolver());
-        } catch (NoPrefixDeclaredException npde) {
-            // should never get here...
-            String msg = "internal error: encountered unregistered namespace";
-            log.debug(msg);
-            throw new RepositoryException(msg, npde);
-        }
+        String propName = prop.getName();
-            throw new RepositoryException("unexpected property-type ordinal: " + type, iae);
+            throw new RepositoryException("unexpected property-type ordinal: "
+                    + type, iae);
-    protected void leaving(PropertyImpl prop, int level)
+    protected void leaving(Property prop, int level)
