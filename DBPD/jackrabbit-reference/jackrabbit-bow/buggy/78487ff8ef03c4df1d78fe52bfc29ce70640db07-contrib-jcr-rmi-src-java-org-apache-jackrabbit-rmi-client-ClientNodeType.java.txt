JCR-RMI: Use remote iterators instead of arrays to avoid memory and network problems with large result sets.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@365458 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.rmi.remote.RemotePropertyDefinition;
+    /**
+     * Utility method for creating an array of local node definition
+     * adapters for an array of remote node definitions. The node
+     * definition adapters are created using the local adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty array.
+     *
+     * @param remotes remote node definitions
+     * @return local node definition array
+     */
+    private NodeDefinition[] getNodeDefArray(RemoteNodeDefinition[] remotes) {
+        if (remotes != null) {
+            NodeDefinition[] defs = new NodeDefinition[remotes.length];
+            for (int i = 0; i < remotes.length; i++) {
+                defs[i] = getFactory().getNodeDef(remotes[i]);
+            }
+            return defs;
+        } else {
+            return new NodeDefinition[0]; // for safety
+        }
+    }
+
+    /**
+     * Utility method for creating an array of local property definition
+     * adapters for an array of remote property definitions. The property
+     * definition adapters are created using the local adapter factory.
+     * <p>
+     * A <code>null</code> input is treated as an empty array.
+     *
+     * @param remotes remote property definitions
+     * @return local property definition array
+     */
+    protected PropertyDefinition[] getPropertyDefArray(
+            RemotePropertyDefinition[] remotes) {
+        if (remotes != null) {
+            PropertyDefinition[] defs = new PropertyDefinition[remotes.length];
+            for (int i = 0; i < remotes.length; i++) {
+                defs[i] = getFactory().getPropertyDef(remotes[i]);
+            }
+            return defs;
+        } else {
+            return new PropertyDefinition[0]; // for safety
+        }
+    }
+
-            RemoteNodeDefinition[] defs = remote.getChildNodeDefs();
-            return getNodeDefArray(defs);
+            return getNodeDefArray(remote.getChildNodeDefs());
-            RemoteNodeDefinition[] defs = remote.getDeclaredChildNodeDefs();
-            return getNodeDefArray(defs);
+            return getNodeDefArray(remote.getDeclaredChildNodeDefs());
