JCR-193, JCR-216, JCR-203, JCR 184 + various minor fixes

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@293331 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.util.Text;
-     * the path of the repository item from a given <code>DavResourceLocator</code>.
+     *                   the path of the repository item from a given <code>DavResourceLocator</code>.
-	this.pathPrefix = pathPrefix;
+        this.pathPrefix = pathPrefix;
-     * @param requestHandle
+     * @param href
-    public DavResourceLocator createResourceLocator(String prefix, String requestHandle) {
-	if (requestHandle == null) {
-	    throw new IllegalArgumentException("Request handle must not be null.");
-	}
+    public DavResourceLocator createResourceLocator(String prefix, String href) {
+        if (href == null) {
+            throw new IllegalArgumentException("Request handle must not be null.");
+        }
-	StringBuffer b = new StringBuffer("");
-	if (prefix != null) {
-	    b.append(prefix);
-	    if (pathPrefix != null && !prefix.endsWith(pathPrefix)) {
-		b.append(pathPrefix);
-	    }
-	}
-	String rlPrefix = b.toString();
+        StringBuffer b = new StringBuffer("");
+        if (prefix != null) {
+            b.append(prefix);
+            if (pathPrefix != null && !prefix.endsWith(pathPrefix)) {
+                b.append(pathPrefix);
+            }
+        }
+        String rlPrefix = b.toString();
-	// remove path-prefix defined with the servlet that may preceed the
-	// the requestHandle
-	if (pathPrefix != null && requestHandle.startsWith(pathPrefix)) {
-	    requestHandle = requestHandle.substring(pathPrefix.length());
-	}
+        // remove any prefix that may still be present with the given href
+        if (pathPrefix != null && href.startsWith(pathPrefix)) {
+            href = href.substring(pathPrefix.length());
+        } else if (!"".equals(rlPrefix) && href.startsWith(rlPrefix)) {
+            href = href.substring(rlPrefix.length());
+        }
-	// remove trailing "/" that is present with collections
-	if (requestHandle.endsWith("/")) {
-	    requestHandle = requestHandle.substring(0, requestHandle.length()-1);
-	}
+        // remove trailing "/" that is present with collections
+        if (href.endsWith("/")) {
+            href = href.substring(0, href.length() - 1);
+        }
-	String resourcePath;
-	String workspacePath;
+        String resourcePath;
+        String workspacePath;
-	// an empty requestHandle (after removal of the "/") signifies a request
-	// to the root that does not represent a repository item.
-	if ("".equals(requestHandle)) {
-	    resourcePath = null;
-	    workspacePath = null;
-	} else {
-	    // look for the first slash ignoring the leading one
-	    int pos = requestHandle.indexOf('/', 1);
-	    if (pos == -1) {
-		// request to a 'workspace' resource that in the same time
-		// represent the root node of the repository.
-		workspacePath = requestHandle;
-		resourcePath = ItemResourceConstants.ROOT_ITEM_PATH;
-	    } else {
-		// separate the workspace name from the path of the repository
-		// item.
-		workspacePath = requestHandle.substring(0, pos);
-		resourcePath = requestHandle.substring(pos);
-	    }
-	}
+        // an empty requestHandle (after removal of the "/") signifies a request
+        // to the root that does not represent a repository item.
+        if ("".equals(href)) {
+            resourcePath = null;
+            workspacePath = null;
+        } else {
+            // look for the first slash ignoring the leading one
+            int pos = href.indexOf('/', 1);
+            if (pos == -1) {
+                // request to a 'workspace' resource that in the same time
+                // represent the root node of the repository.
+                workspacePath = href;
+                resourcePath = ItemResourceConstants.ROOT_ITEM_PATH;
+            } else {
+                // separate the workspace name from the path of the repository
+                // item.
+                workspacePath = href.substring(0, pos);
+                resourcePath = Text.unescape(href.substring(pos));
+            }
+        }
-	return new DavResourceLocatorImpl(rlPrefix, workspacePath, resourcePath, this);
+        return new DavResourceLocatorImpl(rlPrefix, workspacePath, resourcePath, this);
-	return new DavResourceLocatorImpl(prefix, workspacePath, resourcePath, this);
+        return createResourceLocator(prefix, workspacePath, resourcePath, true);
+    }
+
+    /**
+     *
+     * @param prefix
+     * @param workspacePath
+     * @param path
+     * @param isResourcePath
+     * @return
+     * @see DavLocatorFactory#createResourceLocator(String, String, String, boolean)
+     */
+    public DavResourceLocator createResourceLocator(String prefix, String workspacePath, String path, boolean isResourcePath) {
+        return new DavResourceLocatorImpl(prefix, workspacePath, path, this);
-	private final String prefix;
-	private final String workspacePath;
-	private final String resourcePath;
-	private final DavLocatorFactory factory;
+        private final String prefix;
+        private final String workspacePath;
+        private final String resourcePath;
+        private final DavLocatorFactory factory;
-	/**
-	 * Create a new <code>DavResourceLocatorImpl</code>.
-	 *
-	 * @param prefix
-	 * @param workspacePath
-	 * @param resourcePath
-	 */
-	DavResourceLocatorImpl(String prefix, String workspacePath, String resourcePath, DavLocatorFactory factory) {
-	    this.prefix = prefix;
-	    this.workspacePath = workspacePath;
-	    this.resourcePath = resourcePath;
-	    this.factory = factory;
-	}
+        private final String href;
-	/**
-	 * Return the prefix used to build the href String. This includes the initial
-	 * hrefPrefix as well a the path prefix.
-	 *
-	 * @return prefix String used to build the href.
-	 */
-	public String getPrefix() {
-	    return prefix;
-	}
+        /**
+         * Create a new <code>DavResourceLocatorImpl</code>.
+         *
+         * @param prefix
+         * @param workspacePath
+         * @param resourcePath
+         */
+        DavResourceLocatorImpl(String prefix, String workspacePath, String resourcePath, DavLocatorFactory factory) {
+            this.prefix = prefix;
+            this.workspacePath = workspacePath;
+            this.resourcePath = resourcePath;
+            this.factory = factory;
-	/**
-	 * Return the resource path of <code>null</code> if this locator object
-	 * represents the '/' request handle. To a request handle specifying a
-	 * workspace name only the '/' resource path is assigned, which represents
-	 * the root node of the repository.
-	 *
-	 * @return resource path or <code>null</code>
-	 * @see org.apache.jackrabbit.webdav.DavResourceLocator#getResourcePath()
-	 */
-	public String getResourcePath() {
-	    return resourcePath;
-	}
+            StringBuffer buf = new StringBuffer(prefix);
+            if (workspacePath != null) {
+                buf.append(workspacePath);
+            }
+            if (resourcePath != null) {
+                buf.append(Text.escapePath(resourcePath));
+            }
+            if (buf.charAt(buf.length() - 1) != '/') {
+                buf.append("/");
+            }
+            href = buf.toString();
+        }
-	/**
-	 * Return the workspace path or <code>null</code> if this locator object
-	 * represents the '/' request handle.
-	 *
-	 * @return workspace path or <code>null</code>
-	 * @see org.apache.jackrabbit.webdav.DavResourceLocator#getWorkspacePath()
-	 */
-	public String getWorkspacePath() {
-	    return workspacePath;
-	}
+        /**
+         * Return the prefix used to build the href String. This includes the initial
+         * hrefPrefix as well a the path prefix.
+         *
+         * @return prefix String used to build the href.
+         */
+        public String getPrefix() {
+            return prefix;
+        }
-	/**
-	 * Return the workspace name or <code>null</code> if this locator object
-	 * represents the '/' request handle.
-	 *
-	 * @return workspace name or <code>null</code>
-	 * @see org.apache.jackrabbit.webdav.DavResourceLocator#getWorkspaceName()
-	 */
-	public String getWorkspaceName() {
-	    if (workspacePath != null) {
-		return workspacePath.substring(1);
-	    }
-	    return null;
-	}
+        /**
+         * Return the resource path of <code>null</code> if this locator object
+         * represents the '/' request handle. To a request handle specifying a
+         * workspace name only the '/' resource path is assigned, which represents
+         * the root node of the repository.
+         *
+         * @return resource path or <code>null</code>
+         * @see org.apache.jackrabbit.webdav.DavResourceLocator#getResourcePath()
+         */
+        public String getResourcePath() {
+            return resourcePath;
+        }
-	/**
-	 * Returns true if the specified locator object refers to a resource within
-	 * the same workspace.
-	 *
-	 * @param locator
-	 * @return true if the workspace name is equal to this workspace name.
-	 * @see DavResourceLocator#isSameWorkspace(org.apache.jackrabbit.webdav.DavResourceLocator)
-	 */
-	public boolean isSameWorkspace(DavResourceLocator locator) {
-	    return (locator == null) ? false : isSameWorkspace(locator.getWorkspaceName());
-	}
+        /**
+         * Return the workspace path or <code>null</code> if this locator object
+         * represents the '/' request handle.
+         *
+         * @return workspace path or <code>null</code>
+         * @see org.apache.jackrabbit.webdav.DavResourceLocator#getWorkspacePath()
+         */
+        public String getWorkspacePath() {
+            return workspacePath;
+        }
-	/**
-	 * Returns true if the specified string equals to this workspace name or
-	 * if this workspace name is null.
-	 *
-	 * @param workspaceName
-	 * @return true if the workspace name is equal to this workspace name.
-	 * @see DavResourceLocator#isSameWorkspace(String)
-	 */
-	public boolean isSameWorkspace(String workspaceName) {
-	    if (getWorkspaceName() == null) {
-		return true;
-	    } else {
-		return getWorkspaceName().equals(workspaceName);
-	    }
-	}
+        /**
+         * Return the workspace name or <code>null</code> if this locator object
+         * represents the '/' request handle.
+         *
+         * @return workspace name or <code>null</code>
+         * @see org.apache.jackrabbit.webdav.DavResourceLocator#getWorkspaceName()
+         */
+        public String getWorkspaceName() {
+            if (workspacePath != null) {
+                return workspacePath.substring(1);
+            }
+            return null;
+        }
-	/**
-	 * Builds the 'href' from the prefix, the workspace name and the
-	 * resource path present and assures a trailing '/' in case the href
-	 * is used for collection.
-	 *
-	 * @param isCollection
-	 * @return href String representing the text of the href element
-	 * @see org.apache.jackrabbit.webdav.DavConstants#XML_HREF
-	 * @see DavResourceLocator#getHref(boolean)
-	 */
-	public String getHref(boolean isCollection) {
-	    StringBuffer href = new StringBuffer(prefix);
-	    if (workspacePath != null) {
-		href.append(workspacePath);
-	    }
-	    if (resourcePath != null) {
-		href.append(resourcePath);
-	    }
-	    if (isCollection && href.charAt(href.length()-1) != '/') {
-		href.append("/");
-	    }
-	    return href.toString();
-	}
+        /**
+         * Returns true if the specified locator object refers to a resource within
+         * the same workspace.
+         *
+         * @param locator
+         * @return true if the workspace name is equal to this workspace name.
+         * @see DavResourceLocator#isSameWorkspace(org.apache.jackrabbit.webdav.DavResourceLocator)
+         */
+        public boolean isSameWorkspace(DavResourceLocator locator) {
+            return (locator == null) ? false : isSameWorkspace(locator.getWorkspaceName());
+        }
-	/**
-	 * Returns true if the 'workspaceName' field is <code>null</code>.
-	 *
-	 * @return true if the 'workspaceName' field is <code>null</code>.
-	 * @see org.apache.jackrabbit.webdav.DavResourceLocator#isRootLocation()
-	 */
-	public boolean isRootLocation() {
-	    return workspacePath == null;
-	}
+        /**
+         * Returns true if the specified string equals to this workspace name or
+         * if this workspace name is null.
+         *
+         * @param workspaceName
+         * @return true if the workspace name is equal to this workspace name.
+         * @see DavResourceLocator#isSameWorkspace(String)
+         */
+        public boolean isSameWorkspace(String workspaceName) {
+            if (getWorkspaceName() == null) {
+                return true;
+            } else {
+                return getWorkspaceName().equals(workspaceName);
+            }
+        }
-	/**
-	 * Return the factory that created this locator.
-	 *
-	 * @return factory
-	 * @see org.apache.jackrabbit.webdav.DavResourceLocator#getFactory()
-	 */
-	public DavLocatorFactory getFactory() {
-	    return factory;
-	}
+        /**
+         * Builds the 'href' from the prefix, the workspace name and the
+         * resource path present and assures a trailing '/' in case the href
+         * is used for collection. Note, that the resource path is
+         * {@link Text#escapePath(String) escaped}.
+         *
+         * @param isCollection
+         * @return href String representing the text of the href element
+         * @see org.apache.jackrabbit.webdav.DavConstants#XML_HREF
+         * @see DavResourceLocator#getHref(boolean)
+         */
+        public String getHref(boolean isCollection) {
+            return (isCollection) ? href : href.substring(0, href.length() - 1);
+        }
-	/**
-	 * Computes the hash code using the prefix, the workspace name and the
-	 * resource path.
-	 *
-	 * @return the hash code
-	 */
-	public int hashCode() {
-	    int hashCode = prefix.hashCode();
-	    if (workspacePath != null) {
-		hashCode += workspacePath.hashCode();
-	    }
-	    if (resourcePath != null) {
-		hashCode += resourcePath.hashCode();
-	    }
-	    return hashCode % Integer.MAX_VALUE;
-	}
+        /**
+         * Returns true if the 'workspaceName' field is <code>null</code>.
+         *
+         * @return true if the 'workspaceName' field is <code>null</code>.
+         * @see org.apache.jackrabbit.webdav.DavResourceLocator#isRootLocation()
+         */
+        public boolean isRootLocation() {
+            return workspacePath == null;
+        }
-	/**
-	 * Equality of locators is achieved if prefix and resource path
-	 * are equal.
-	 *
-	 * @param obj the object to compare to
-	 * @return <code>true</code> if the 2 objects are equal;
-	 *         <code>false</code> otherwise
-	 */
-	public boolean equals(Object obj) {
-	    if (obj instanceof DavResourceLocatorImpl) {
-		DavResourceLocatorImpl locator = (DavResourceLocatorImpl) obj;
-		boolean equalWsName = (workspacePath == null) ? locator.workspacePath == null : workspacePath.equals(locator.workspacePath);
-		boolean equalRPath = (resourcePath == null) ? locator.resourcePath == null : resourcePath.equals(locator.resourcePath);
+        /**
+         * Return the factory that created this locator.
+         *
+         * @return factory
+         * @see org.apache.jackrabbit.webdav.DavResourceLocator#getFactory()
+         */
+        public DavLocatorFactory getFactory() {
+            return factory;
+        }
-		return prefix.equals(locator.prefix) && equalWsName && equalRPath;
-	    }
-	    return false;
-	}
+        /**
+         * Returns the same as {@link #getResourcePath()}. No encoding is performed
+         * at all.
+         * @see DavResourceLocator#getJcrPath()
+         */
+        public String getJcrPath() {
+            return getResourcePath();
+        }
+
+        /**
+         * Computes the hash code from the href, that is built from the prefix,
+         * the workspace name and the resource path all of them representing
+         * final instance fields.
+         *
+         * @return the hash code
+         */
+        public int hashCode() {
+            return href.hashCode();
+        }
+
+        /**
+         * Returns true, if the given object is a <code>DavResourceLocator</code>
+         * with the same hash code.
+         *
+         * @param obj the object to compare to
+         * @return <code>true</code> if the 2 objects are equal;
+         *         <code>false</code> otherwise
+         */
+        public boolean equals(Object obj) {
+            if (obj instanceof DavResourceLocator) {
+                DavResourceLocator other = (DavResourceLocator) obj;
+                return hashCode() == other.hashCode();
+            }
+            return false;
+        }
