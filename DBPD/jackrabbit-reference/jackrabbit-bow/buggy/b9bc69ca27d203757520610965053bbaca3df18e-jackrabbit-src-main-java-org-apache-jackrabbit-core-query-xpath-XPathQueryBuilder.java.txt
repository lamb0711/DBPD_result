JCR-638: Support lower-/upper-case functions

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@475677 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.query.PropertyFunctionQueryNode;
+import org.apache.jackrabbit.core.query.DefaultQueryNodeVisitor;
+     * Namespace uri for xpath functions. See also class SearchManager
+     */
+    static final String NS_FN_URI = "http://www.w3.org/2004/10/xpath-functions";
+
+    /**
-    static final QName FN_NOT = new QName("http://www.w3.org/2004/10/xpath-functions", "not");
+    static final QName FN_NOT = new QName(NS_FN_URI, "not");
+
+    /**
+     * QName for 'fn:lower-case'
+     */
+    static final QName FN_LOWER_CASE = new QName(NS_FN_URI, "lower-case");
+
+    /**
+     * QName for 'fn:upper-case'
+     */
+    static final QName FN_UPPER_CASE = new QName(NS_FN_URI, "upper-case");
-        RelationQueryNode rqn = new RelationQueryNode(queryNode, type);
+        final RelationQueryNode rqn = new RelationQueryNode(queryNode, type);
+        // check if string transformation is valid
+        rqn.acceptOperands(new DefaultQueryNodeVisitor() {
+            public Object visit(PropertyFunctionQueryNode node, Object data) {
+                String functionName = node.getFunctionName();
+                if ((functionName.equals(PropertyFunctionQueryNode.LOWER_CASE)
+                        || functionName.equals(PropertyFunctionQueryNode.UPPER_CASE))
+                            && rqn.getValueType() != QueryConstants.TYPE_STRING) {
+                    String msg = "Upper and lower case function are only supported with String literals";
+                    exceptions.add(new InvalidQueryException(msg));
+                }
+                return data;
+            }
+        }, null);
+
+            } else if (NameFormat.format(FN_LOWER_CASE, resolver).equals(fName)) {
+                if (node.jjtGetNumChildren() == 2) {
+                    if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                        RelationQueryNode relNode = (RelationQueryNode) queryNode;
+                        relNode.addOperand(new PropertyFunctionQueryNode(relNode, PropertyFunctionQueryNode.LOWER_CASE));
+                        // get property name
+                        node.jjtGetChild(1).jjtAccept(this, relNode);
+                    } else {
+                        exceptions.add(new InvalidQueryException("Unsupported location for fn:lower-case()"));
+                    }
+                } else {
+                    exceptions.add(new InvalidQueryException("Wrong number of argument for fn:lower-case()"));
+                }
+            } else if (NameFormat.format(FN_UPPER_CASE, resolver).equals(fName)) {
+                if (node.jjtGetNumChildren() == 2) {
+                    if (queryNode.getType() == QueryNode.TYPE_RELATION) {
+                        RelationQueryNode relNode = (RelationQueryNode) queryNode;
+                        relNode.addOperand(new PropertyFunctionQueryNode(relNode, PropertyFunctionQueryNode.UPPER_CASE));
+                        // get property name
+                        node.jjtGetChild(1).jjtAccept(this, relNode);
+                    } else {
+                        exceptions.add(new InvalidQueryException("Unsupported location for fn:upper-case()"));
+                    }
+                } else {
+                    exceptions.add(new InvalidQueryException("Unsupported location for fn:upper-case()"));
+                }
