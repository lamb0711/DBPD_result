JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 2: jackrabbit-jcr-server]

in addition:
- minor improvements in comments, typos
- use foreach loops where possible
- remove redundant Tika imports in server/io package
- remove redundant casts
- add missing index increment in SubscriptionManagerImpl.SubscriptionMap

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915339 13f79535-47bb-0310-9956-ffa450edef68

-   which explicitely requires any transaction present on a servlet to be completed before
+   which explicitly requires any transaction present on a servlet to be completed before
-    private TransactionMap map = new TransactionMap();
+    private final TransactionMap map = new TransactionMap();
-    private Map listeners = new IdentityHashMap();
+    private final Map<TransactionListener, TransactionListener> listeners = new IdentityHashMap<TransactionListener, TransactionListener>();
-                    txListeners = (TransactionListener[]) listeners.values().toArray(new TransactionListener[0]);
+                    txListeners = listeners.values().toArray(new TransactionListener[listeners.values().size()]);
-                for (int i = 0; i < txListeners.length; i++) {
-                    txListeners[i].beforeCommit(resource, lockToken);
+                for (TransactionListener txListener : txListeners) {
+                    txListener.beforeCommit(resource, lockToken);
-                for (int i = 0; i < txListeners.length; i++) {
-                    txListeners[i].afterCommit(resource, lockToken, ex == null);
+                for (TransactionListener txListener : txListeners) {
+                    txListener.afterCommit(resource, lockToken, ex == null);
-            Iterator it = m.values().iterator();
+            Iterator<Transaction> it = m.values().iterator();
-                Transaction txMap = (Transaction) it.next();
+                Transaction txMap = it.next();
-                    m = ((TransactionMap) txMap);
+                    m = (TransactionMap) txMap;
-                                      TransactionResource resource) throws DavException {
+                                      TransactionResource resource) {
+
+        //----------------------------------------------------< Transaction >---
-     *
+     * Local transaction
+        //----------------------------------------------------< Transaction >---        
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#isLocal() 
+         */
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#start(TransactionResource)
+         */
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#commit(TransactionResource) 
+         */
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#rollback(TransactionResource)
+         */
+        //-------------------------------------------------< TransactionMap >---
+        /**
+         * Always throws <code>DavException</code>.
+         * 
+         * @see TransactionMap#putTransaction(String, org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction) 
+         */
+        @Override
+        public Transaction putTransaction(String key, Transaction value) throws DavException {
+            throw new DavException(WebdavResponse.SC_PRECONDITION_FAILED, "Attempt to nest a new transaction into a local one.");
+        }
+
+        //--------------------------------------------------------< private >---
+        /**
+         * Retrieve the repository item from the given transaction resource.
+         *
+         * @param resource
+         * @return
+         * @throws PathNotFoundException
+         * @throws RepositoryException
+         * @throws DavException
+         */
-
-        public Transaction put(String key, Transaction value) throws DavException {
-            throw new DavException(WebdavResponse.SC_PRECONDITION_FAILED, "Attempt to nest a new transaction into a local one.");
-        }
-     *
+     * Global transaction
+        //----------------------------------------------------< Transaction >---
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#isLocal()
+         */
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#start(TransactionResource)
+         */
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#commit(TransactionResource)
+         */
+        /**
+         * @see org.apache.jackrabbit.webdav.jcr.transaction.TxLockManagerImpl.Transaction#rollback(TransactionResource)
+         */
+        //-------------------------------------------------< TransactionMap >---
+        @Override
+        public Transaction putTransaction(String key, Transaction value) throws DavException {
+            if (!(value instanceof LocalTransaction)) {
+                throw new DavException(WebdavResponse.SC_PRECONDITION_FAILED, "Attempt to nest global transaction into a global one.");
+            }
+            return super.put(key, value);
+        }
+
+        //--------------------------------------------------------< private >---
-            // commented, since server should be jackrabbit independant
-	    Session session = resource.getSession().getRepositorySession();
-	    if (session instanceof XASession) {
-		return ((XASession)session).getXAResource();
-	    } else {
-		throw new DavException(DavServletResponse.SC_FORBIDDEN);
-	    }
+            // commented, since server should be jackrabbit independent
+            Session session = resource.getSession().getRepositorySession();
+            if (session instanceof XASession) {
+            return ((XASession)session).getXAResource();
+            } else {
+            throw new DavException(DavServletResponse.SC_FORBIDDEN);
+            }
-            Iterator it = values().iterator();
-            while (it.hasNext()) {
-                Transaction tx = (Transaction) it.next();
+            for (Object o : values()) {
+                Transaction tx = (Transaction) o;
-
-        public Transaction put(String key, Transaction value) throws DavException {
-            if (!(value instanceof LocalTransaction)) {
-                throw new DavException(WebdavResponse.SC_PRECONDITION_FAILED, "Attempt to nest global transaction into a global one.");
-            }
-            return (Transaction) super.put(key, value);
-        }
-    private static class TransactionMap extends HashMap {
+    private static class TransactionMap extends HashMap<String, Transaction> {
-                tx = (Transaction) super.get(key);
+                tx = super.get(key);
-        public Transaction put(String key, Transaction value) throws DavException {
-            // any global an local transactions allowed.
-            return (Transaction) super.put(key, value);
+        public Transaction putTransaction(String key, Transaction value) throws DavException {
+            // any global and local transactions allowed.
+            return super.put(key, value);
