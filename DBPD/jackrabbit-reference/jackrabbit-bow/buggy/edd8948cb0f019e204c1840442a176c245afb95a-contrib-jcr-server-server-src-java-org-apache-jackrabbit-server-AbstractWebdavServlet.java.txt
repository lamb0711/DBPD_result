JCR-249, JCR-253

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@331281 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.server.io.IOUtil;
+import org.apache.jackrabbit.webdav.io.InputContextImpl;
+import org.apache.jackrabbit.webdav.io.OutputContextImpl;
+import org.apache.jackrabbit.webdav.io.OutputContext;
-import java.io.InputStream;
+import java.io.InputStream;
+        long modSince = request.getDateHeader("If-Modified-Since");
+        if (modSince > IOUtil.UNDEFINED_TIME) {
+            // test if resource has been modified
-        if (modTime != DavResource.UNDEFINED_MODIFICATIONTIME && modTime <= request.getDateHeader("If-Modified-Since")) {
+            if (modTime != IOUtil.UNDEFINED_TIME && modTime <= modSince) {
-
-        DavProperty lastMod = resource.getProperty(DavPropertyName.GETLASTMODIFIED);
-        if (lastMod != null) {
-            response.setHeader(HEADER_LAST_MODIFIED, String.valueOf(lastMod.getValue()));
-        DavProperty etag = resource.getProperty(DavPropertyName.GETETAG);
-        if (etag != null) {
-            response.setHeader(HEADER_ETAG, String.valueOf(etag.getValue()));
-        }
-
-        DavProperty contentType = resource.getProperty(DavPropertyName.GETCONTENTTYPE);
-        if (contentType != null) {
-            response.setHeader(HEADER_CONTENT_TYPE, String.valueOf(contentType.getValue()));
-        }
-
-        DavProperty contentLength = resource.getProperty(DavPropertyName.GETCONTENTLENGTH);
-        if (contentLength != null) {
-            try {
-                int length = Integer.parseInt(contentLength.getValue() + "");
-                if (length > 0) {
-                    response.setIntHeader(HEADER_CONTENT_LENGTH, length);
-                }
-            } catch (NumberFormatException e) {
-                log.error("Could not build content length from property value '" + contentLength.getValue() + "'");
-            }
-        }
-
-        DavProperty contentLanguage = resource.getProperty(DavPropertyName.GETCONTENTLANGUAGE);
-        if (contentLanguage != null) {
-            response.setHeader(HEADER_CONTENT_LANGUAGE, contentLanguage.getValue().toString());
-        }
-
-        // spool content in case of 'GET' request
-        InputStream in = resource.getStream();
-        try {
-            if (sendContent) {
-                if (in != null) {
-                    OutputStream out = response.getOutputStream();
-                    byte[] buffer = new byte[8192];
-                    int read;
-                    while ((read = in.read(buffer)) >= 0) {
-                        out.write(buffer, 0, read);
-                    }
-                }
-            }
-        } finally {
-            // also close stream if not sending content
-            if (in != null) {
-                try {
-                    in.close();
-                } catch (IOException e) {
-                    // ignore
-                }
-            }
-        }
+        // spool resource properties and ev. resource content.
+        OutputStream out = (sendContent) ? response.getOutputStream() : null;
+        resource.spool(getOutputContext(response, out));
-        parentResource.addMember(resource, getInputContext(request));
+        parentResource.addMember(resource, getInputContext(request, request.getInputStream()));
-            parentResource.addMember(resource, getInputContext(request));
+            parentResource.addMember(resource, getInputContext(request, request.getInputStream()));
-            parentResource.addMember(resource);
+            parentResource.addMember(resource, getInputContext(request, null));
-     * Build an InputContext for the given request
-     *
-     * @param request
-     * @return
-     * @throws IOException
-     */
-    protected InputContext getInputContext(WebdavRequest request) throws IOException {
-        InputContext cxt = new InputContext();
-        cxt.setContentType(request.getHeader(DavConstants.HEADER_CONTENT_TYPE));
-        cxt.setContentLanguage(request.getHeader(DavConstants.HEADER_CONTENT_LANGUAGE));
-        cxt.setInputStream(request.getInputStream());
-        return cxt;
-    }
-
-    /**
+
+    /**
+     * Return a new <code>InputContext</code> used for adding resource members
+     *
+     * @param request
+     * @param in
+     * @return
+     * @see #spoolResource(WebdavRequest, WebdavResponse, DavResource, boolean)
+     */
+    protected InputContext getInputContext(DavServletRequest request, InputStream in) {
+        return new InputContextImpl(request, in);
+    }
+
+    /**
+     * Return a new <code>OutputContext</code> used for spooling resource properties and
+     * the resource content
+     *
+     * @param response
+     * @param out
+     * @return
+     * @see #doPut(WebdavRequest, WebdavResponse, DavResource)
+     * @see #doPost(WebdavRequest, WebdavResponse, DavResource)
+     * @see #doMkCol(WebdavRequest, WebdavResponse, DavResource)
+     */
+    protected OutputContext getOutputContext(DavServletResponse response, OutputStream out) {
+        return new OutputContextImpl(response, out);
+    }
