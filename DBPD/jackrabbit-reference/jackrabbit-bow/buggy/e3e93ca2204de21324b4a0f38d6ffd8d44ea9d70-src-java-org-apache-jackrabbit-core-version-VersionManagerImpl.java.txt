- adding indexing of nodetype 
- fixing indexing of versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159669 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.QName;
+import org.apache.jackrabbit.core.Path;
+import org.apache.jackrabbit.core.NodeId;
-import org.apache.jackrabbit.core.state.ItemStateException;
+import javax.jcr.Session;
-public class VersionManagerImpl implements VersionManager, Constants, InternalVersionItemListener {
+public class VersionManagerImpl implements VersionManager, Constants {
-        history.addListener(this);
-        onVersionStorageChanged();
+        virtProvider.invalidateItem(new NodeId(VERSION_STORAGE_NODE_UUID));
-        // now generate observation events
+        // generate observation events
-        InternalVersionHistory hist = vMgr.getVersionHistory(id);
-        if (hist != null) {
-            hist.addListener(this);
-        }
-        return hist;
+        return vMgr.getVersionHistory(id);
-        InternalVersion vers = vMgr.getVersion(id);
-        if (vers != null) {
-            vers.addListener(this);
-        }
-        return vers;
+        return vMgr.getVersion(id);
-        InternalVersionItem item = vMgr.getItem(id);
-        if (item != null) {
-            item.addListener(this);
-        }
-        return item;
+        return vMgr.getItem(id);
-        version.addListener(this);
+        virtProvider.invalidateItem(new NodeId(version.getVersionHistory().getId()));
-        // now generate observation events
+        // generate observation events
+     * Removes the specified version from the history
+     * @param history
+     * @param name
+     */
+    public void removeVersion(VersionHistory history, QName name)
+            throws RepositoryException {
+        // generate observation events
+        VersionImpl version = (VersionImpl) ((VersionHistoryImpl) history).getNode(name);
+        List events = new ArrayList();
+        recursiveRemove(events, (NodeImpl) history, version);
+
+        InternalVersionHistory vh = ((VersionHistoryImpl) history).getInternalVersionHistory();
+        vh.removeVersion(name);
+
+        virtProvider.invalidateItem(new NodeId(vh.getId()));
+        obsMgr.dispatch(events, (SessionImpl) history.getSession());
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Version setVersionLabel(VersionHistory history, QName version,
+                                   QName label, boolean move)
+            throws RepositoryException {
+        Session session = history.getSession();
+
+        InternalVersionHistory vh = ((VersionHistoryImpl) history).getInternalVersionHistory();
+        NodeImpl labelNode = ((VersionHistoryImpl) history).getNode(JCR_VERSIONLABELS);
+        InternalVersion v = vh.setVersionLabel(version, label, move);
+
+        // collect observation events
+        List events = new ArrayList();
+        if (version == null && v != null) {
+            // label removed
+            events.add(EventState.propertyRemoved(
+                    labelNode.internalGetUUID(),
+                    labelNode.getPrimaryPath(),
+                    Path.PathElement.fromString(label.toString()),
+                    (NodeTypeImpl) labelNode.getPrimaryNodeType(),
+                    labelNode.getSession()
+            ));
+        } else if (v == null) {
+            // label added
+            events.add(EventState.propertyAdded(
+                    labelNode.internalGetUUID(),
+                    labelNode.getPrimaryPath(),
+                    Path.PathElement.fromString(label.toString()),
+                    (NodeTypeImpl) labelNode.getPrimaryNodeType(),
+                    labelNode.getSession()
+            ));
+        } else {
+            // label modified
+            events.add(EventState.propertyChanged(
+                    labelNode.internalGetUUID(),
+                    labelNode.getPrimaryPath(),
+                    Path.PathElement.fromString(label.toString()),
+                    (NodeTypeImpl) labelNode.getPrimaryNodeType(),
+                    labelNode.getSession()
+            ));
+        }
+        virtProvider.invalidateItem(new NodeId(vh.getId()));
+        obsMgr.dispatch(events, (SessionImpl) history.getSession());
+        return v == null ? null : (VersionImpl) session.getNodeByUUID(v.getId());
+    }
+
+    /**
+     * Adds a subtree of itemstates as 'removed' to a list of events
+     *
+     * @param events
+     * @param parent
+     * @param node
+     * @throws RepositoryException
+     */
+    private void recursiveRemove(List events, NodeImpl parent, NodeImpl node)
+            throws RepositoryException {
+
+        events.add(EventState.childNodeRemoved(
+                parent.internalGetUUID(),
+                parent.getPrimaryPath(),
+                node.internalGetUUID(),
+                node.getPrimaryPath().getNameElement(),
+                (NodeTypeImpl) parent.getPrimaryNodeType(),
+                node.getSession()
+        ));
+        NodeIterator niter = node.getNodes();
+        while (niter.hasNext()) {
+            NodeImpl n = (NodeImpl) niter.nextNode();
+            recursiveRemove(events, node, n);
+        }
+    }
+
+    /**
-
-    /**
-     * {@inheritDoc}
-     */
-    public void itemModifed(InternalVersionItem item) {
-        try {
-            NodeId id = new NodeId(item.getId());
-            if (virtProvider.hasItemState(id)) {
-                virtProvider.getItemState(id).discard();
-            }
-        } catch (ItemStateException e) {
-            log.error("Error while refreshing virtual item.", e);
-        }
-    }
-
-    /**
-     * Flushes the virtual node state information of the version storage
-     */
-    public void onVersionStorageChanged() {
-        try {
-            NodeId id = new NodeId(VERSION_STORAGE_NODE_UUID);
-            if (virtProvider.hasItemState(id)) {
-                virtProvider.getItemState(id).discard();
-            }
-        } catch (ItemStateException e) {
-            log.error("Error while refreshing virtual version storage.", e);
-        }
-    }
