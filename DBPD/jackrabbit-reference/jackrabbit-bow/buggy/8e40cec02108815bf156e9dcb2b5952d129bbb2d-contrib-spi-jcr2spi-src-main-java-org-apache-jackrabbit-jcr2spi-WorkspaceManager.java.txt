div

- get rid of rootId stored with ISM, HierarchyManagers etc.
- remove corresponding method with WorkspaceManager and WorkspaceImpl

jcr2spi/state/ItemState

- move parent field from Node/PropertyState to ItemState
- move idFactory field from NodeState to ItemState
- let PropertyState build its id instead of calling parentstate method.
- minor reordering of status related methods
- remove modCount and its usage

jcr2spi/state/ItemStateManager

- add method getRootNode()

jcr2spi/security/AccessManager

- replace ItemId by ItemState

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431352 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.jcr2spi.state.NodeState;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateManager;
+import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.Path;
-    // TODO: TO-BE-FIXED. With SPI_ItemId rootId must not be stored separately
-    private final NodeId rootNodeId;
-
-            rootNodeId = createRootNodeId();
-    public NodeId getRootNodeId() {
-        return rootNodeId;
-    }
-
-    private NodeId createRootNodeId() throws RepositoryException {
-        return service.getRootId(sessionInfo);
-    }
-
+     * @see ItemStateManager#getRootState()
+     */
+    public NodeState getRootState() throws ItemStateException {
+        // retrieve through cache
+        synchronized (cache) {
+            return cache.getRootState();
+        }
+    }
+
+    /**
+     * @inheritDoc
+     * @see ItemStateManager#getItemState(ItemId)
+     * @see ItemStateManager#hasItemState(ItemId)
+     * @see ItemStateManager#getNodeReferences(NodeId)
+     * @see ItemStateManager#hasNodeReferences(NodeId)
-                service.removeEventListener(sessionInfo, rootNodeId, externalChangeListener);
+                service.removeEventListener(sessionInfo, service.getRootId(sessionInfo), externalChangeListener);
-    // TODO: method can be removed, if jcr2spi uses spi-ids as well
-    public boolean isGranted(NodeId parentId, Path relPath, String[] actions) throws ItemNotFoundException, RepositoryException {
+    /**
+     * @see AccessManager#isGranted(NodeState, Path, String[])
+     */
+    public boolean isGranted(NodeState parentState, Path relPath, String[] actions) throws ItemNotFoundException, RepositoryException {
-        ItemId id = getIdFactory().createNodeId(parentId, relPath);
-        return isGranted(id, actions);
-    }
-
-    public boolean isGranted(ItemId id, String[] actions) throws ItemNotFoundException, RepositoryException {
+        ItemId id = getIdFactory().createNodeId(parentState.getNodeId(), relPath);
-    public boolean canRead(ItemId id) throws ItemNotFoundException, RepositoryException {
-        return service.isGranted(sessionInfo, id, AccessManager.READ);
+    /**
+     * @see AccessManager#isGranted(ItemState, String[])
+     */
+    public boolean isGranted(ItemState itemState, String[] actions) throws ItemNotFoundException, RepositoryException {
+        return service.isGranted(sessionInfo, itemState.getId(), actions);
-    public boolean canRemove(ItemId id) throws ItemNotFoundException, RepositoryException {
-        return service.isGranted(sessionInfo, id, AccessManager.REMOVE);
+    /**
+     * @see AccessManager#canRead(ItemState)
+     */
+    public boolean canRead(ItemState itemState) throws ItemNotFoundException, RepositoryException {
+        return service.isGranted(sessionInfo, itemState.getId(), AccessManager.READ);
+    /**
+     * @see AccessManager#canRemove(ItemState)
+     */
+    public boolean canRemove(ItemState itemState) throws ItemNotFoundException, RepositoryException {
+        return service.isGranted(sessionInfo, itemState.getId(), AccessManager.REMOVE);
+    }
+
+    /**
+     * @see AccessManager#canAccess(String)
+     */
