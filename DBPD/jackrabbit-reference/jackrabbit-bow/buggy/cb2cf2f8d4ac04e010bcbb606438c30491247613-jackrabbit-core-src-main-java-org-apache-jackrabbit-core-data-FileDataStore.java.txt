JCR-2781 FileDataStore performance improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022094 13f79535-47bb-0310-9956-ffa450edef68

+        return getRecord(identifier, true);
+    }
+
+    /**
+     * Get a data record for the given identifier.
+     * This method only checks if the file exists if the verify flag is set.
+     * If the verify flag is set and the file doesn't exist, the method returns null.
+     *
+     * @param identifier the identifier
+     * @param verify whether to check if the file exists
+     * @return the data record or null
+     */
+    private DataRecord getRecord(DataIdentifier identifier, boolean verify) throws DataStoreException {
-            if (!file.exists()) {
+            if (verify && !file.exists()) {
-            if (minModifiedDate != 0 && file.canWrite()) {
+            if (minModifiedDate != 0) {
+                // only check when running garbage collection
-                } 
+                }
-                	    // The current GC approach depends on this call succeeding
-                    if (!file.setLastModified(System.currentTimeMillis() + ACCESS_TIME_RESOLUTION)) {
-                        throw new DataStoreException("Failed to update record modified date: " + identifier);
+                    // in most cases we can write to the file system, that's why we
+                    // don't call File.canWrite earlier (to save a system call)
+                    if (file.canWrite()) {
+                	        // The current GC approach depends on this call succeeding
+                        if (!file.setLastModified(System.currentTimeMillis() + ACCESS_TIME_RESOLUTION)) {
+                            throw new DataStoreException("Failed to update record modified date: " + identifier);
+                        }
-        DataRecord record = getRecordIfStored(identifier);
-        if (record == null) {
-            throw new DataStoreException("Record not found: " + identifier);
-        }
-        return record;
+        return getRecord(identifier, false);
-                File parent = file.getParentFile();
-                if (!parent.isDirectory()) {
-                    parent.mkdirs();
-                }
-                    temporary.renameTo(file);
-                    if (!file.exists()) {
+                    File parent = file.getParentFile();
+                    parent.mkdirs();
+                    if (temporary.renameTo(file)) {
+                        // no longer need to delete the temporary file
+                        temporary = null;
+                    } else {
-                // Sanity checks on the record file. These should never fail,
-                // but better safe than sorry...
-                if (!file.isFile()) {
-                    throw new IOException("Not a file: " + file);
-                }
+                    // Sanity checks on the record file. These should never fail,
+                    // but better safe than sorry...
+                    if (!file.isFile()) {
+                        throw new IOException("Not a file: " + file);
+                    }
-        if (!directory.isDirectory()) {
-            directory.mkdirs();
-        }
+        // the directory is already created in the init method
