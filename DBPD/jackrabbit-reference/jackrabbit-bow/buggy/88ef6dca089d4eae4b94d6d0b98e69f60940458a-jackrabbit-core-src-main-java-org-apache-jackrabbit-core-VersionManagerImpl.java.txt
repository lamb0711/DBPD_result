JCR-2085 test case (TCK) maintenance for JCR 2.0 (adding MergeActivityTest)
JCR-2058 JSR 283: VersionManager and new versioning methods (adapting to latest spec changes)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@801413 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.version.InternalBaseline;
+import org.apache.jackrabbit.core.version.InternalBaseline;
-            // normal restore
-            NodeStateEx state = getNodeState(absPath,
-                    ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD,
-                    Permission.NONE);
-            restore(state, version, removeExisting);
+            String msg = "VersionManager.restore(String, Version, boolean) not " +
+                    "allowed on existing nodes. " +
+                    "use VersionManager.restore(Version, boolean) instead: " + absPath;
+            log.error(msg);
+            throw new VersionException(msg);
-            restore(state, name, version, removeExisting);
+
+            // check if given version is a baseline
+            InternalVersion v = getVersion(version);
+            if (v instanceof InternalBaseline) {
+                restore(state, name, (InternalBaseline) v);
+            } else {
+                restore(state, name, v, removeExisting);
+            }
+     * Same as {@link #restore(String, String, boolean)} but to ensure
+     * backward compatibility for Node.restore(Version, boolean).
+     *
+     * @param node the node to restore
+     * @param version the version to restore
+     * @param removeExisting the remove existing flag
+     * @throws RepositoryException if an error occurs
+     */
+    protected void restore(NodeImpl node, Version version, boolean removeExisting)
+            throws RepositoryException {
+        NodeStateEx state = getNodeState(node.getPath(),
+                ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD,
+                Permission.NONE);
+        InternalVersion v = getVersion(version);
+        restore(state, v, removeExisting);
+    }
+
+    /**
+        if (baseline != null) {
+            throw new UnsupportedRepositoryOperationException("createConfiguration(String, Version) with baseline is no longer supported.");
+        }
+        return createConfiguration(absPath);
+    }
+    
+    /**
+     * {@inheritDoc}
+     */
+    public Node createConfiguration(String absPath) throws RepositoryException {
-            // refuse to create a configuration if a baseline is specified.
-            if (baseline != null) {
-                String msg = "Create configuration to existing nodes only allowed without specifying a basline: " + absPath;
-                log.error(msg);
-                throw new UnsupportedRepositoryOperationException(msg);
-            }
-            // check if supplied baseline is valid
-            if (baseline == null) {
-                String msg = "CreateConfiguration on non-existing path must supply a baseline: " + absPath;
-                log.error(msg);
-                throw new UnsupportedRepositoryOperationException(msg);
-            }
-            VersionImpl v = (VersionImpl) baseline;
-            InternalBaseline bl = vMgr.getBaseline(v.getNodeId());
-            if (bl == null) {
-                String msg = "Supplied version is not a baseline: " + v.safeGetJCRPath();
-                log.error(msg);
-                throw new UnsupportedRepositoryOperationException(msg);
-            }
-
-            // parent has to exist
-            Path path = session.getQPath(absPath);
-            Path parentPath = path.getAncestor(1);
-            Name name = path.getNameElement().getName();
-            NodeImpl parent = session.getItemManager().getNode(parentPath);
-
-            NodeStateEx state = getNodeState(parent,
-                    ItemValidator.CHECK_PENDING_CHANGES | ItemValidator.CHECK_LOCK | ItemValidator.CHECK_HOLD,
-                    Permission.NONE);
-            NodeId configId = restore(state, name, bl);
-            return session.getNodeById(configId);
+            String msg = "Create configuration node must exist: " + absPath;
+            log.error(msg);
+            throw new UnsupportedRepositoryOperationException(msg);
