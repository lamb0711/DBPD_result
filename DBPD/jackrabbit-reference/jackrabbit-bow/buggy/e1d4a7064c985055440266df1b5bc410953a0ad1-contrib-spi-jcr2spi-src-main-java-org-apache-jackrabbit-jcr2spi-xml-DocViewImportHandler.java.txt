JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.conversion.NameResolver;
+import org.apache.jackrabbit.namespace.NamespaceResolver;
+import javax.jcr.NamespaceException;
+    private final NameFactory nameFactory;
-    DocViewImportHandler(Importer importer, NamespaceResolver nsContext) {
-        super(importer, nsContext);
+    DocViewImportHandler(Importer importer, NamespaceResolver nsContext,
+                         NameResolver nameResolver, NameFactory nameFactory) {
+        super(importer, nsContext, nameResolver);
+        this.nameFactory = nameFactory;
-                        new Importer.NodeInfo(QName.JCR_XMLTEXT, null, null, null);
+                        new Importer.NodeInfo(NameConstants.JCR_XMLTEXT, null, null, null);
-                        new Importer.PropInfo(QName.JCR_XMLCHARACTERS, PropertyType.STRING, values);
+                        new Importer.PropInfo(NameConstants.JCR_XMLCHARACTERS, PropertyType.STRING, values);
-            QName nodeName = new QName(namespaceURI, localName);
-            // decode node name
-            nodeName = ISO9075.decode(nodeName);
+            String dcdLocalName = ISO9075.decode(localName);
+            Name nodeName = nameFactory.create(namespaceURI, dcdLocalName);
-            QName nodeTypeName = null;
-            QName[] mixinTypes = null;
+            Name nodeTypeName = null;
+            Name[] mixinTypes = null;
-                if (atts.getURI(i).equals(QName.NS_XMLNS_URI)) {
+                if (atts.getURI(i).equals(Name.NS_XMLNS_URI)) {
-                QName propName = new QName(atts.getURI(i), atts.getLocalName(i));
-                // decode property name
-                propName = ISO9075.decode(propName);
+
+                dcdLocalName = ISO9075.decode(atts.getLocalName(i));
+                Name propName = nameFactory.create(atts.getURI(i), dcdLocalName);
-                if (propName.equals(QName.JCR_PRIMARYTYPE)) {
+                if (propName.equals(NameConstants.JCR_PRIMARYTYPE)) {
-                            nodeTypeName = NameFormat.parse(attrValue, nsContext);
-                        } catch (NameException ne) {
+                            nodeTypeName = nameResolver.getQName(attrValue);
+                        } catch (org.apache.jackrabbit.conversion.NameException ne) {
-                } else if (propName.equals(QName.JCR_MIXINTYPES)) {
+                } else if (propName.equals(NameConstants.JCR_MIXINTYPES)) {
-                } else if (propName.equals(QName.JCR_UUID)) {
+                } else if (propName.equals(NameConstants.JCR_UUID)) {
-     * used to convert the prefixed name strings to QNames.
+     * used to convert the prefixed name strings to Names.
-    private QName[] parseNames(String value) throws SAXException {
+    private Name[] parseNames(String value) throws SAXException {
-        QName[] qnames = new QName[names.length];
+        Name[] qnames = new Name[names.length];
-                qnames[i] = NameFormat.parse(names[i], nsContext);
-            } catch (NameException ne) {
+                qnames[i] = nameResolver.getQName(names[i]);
+            } catch (org.apache.jackrabbit.conversion.NameException ne) {
+            } catch (NamespaceException e) {
+                throw new SAXException("Invalid name: " + names[i], e);
