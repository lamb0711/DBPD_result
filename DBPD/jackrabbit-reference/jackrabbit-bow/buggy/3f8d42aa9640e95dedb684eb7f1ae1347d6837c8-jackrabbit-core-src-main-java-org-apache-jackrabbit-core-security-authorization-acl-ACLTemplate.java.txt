JCR-2268 Generify Security API


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@806534 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.commons.collections.map.ListOrderedMap;
-import org.apache.jackrabbit.api.security.JackrabbitAccessControlList;
-import org.apache.jackrabbit.api.security.principal.NoSuchPrincipalException;
-import org.apache.jackrabbit.api.security.principal.PrincipalManager;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
-import org.apache.jackrabbit.core.security.authorization.AccessControlEntryImpl;
-import org.apache.jackrabbit.core.security.authorization.Permission;
-import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
-import org.apache.jackrabbit.core.security.authorization.AbstractACLTemplate;
-import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import java.security.Principal;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
-import java.security.Principal;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+
+import org.apache.jackrabbit.api.security.JackrabbitAccessControlList;
+import org.apache.jackrabbit.api.security.principal.NoSuchPrincipalException;
+import org.apache.jackrabbit.api.security.principal.PrincipalManager;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.security.authorization.AbstractACLTemplate;
+import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
+import org.apache.jackrabbit.core.security.authorization.AccessControlEntryImpl;
+import org.apache.jackrabbit.core.security.authorization.Permission;
+import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
+import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
-    private final Map entries = new ListOrderedMap();
+    private final Map<String, List<Entry>> entries = new LinkedHashMap<String, List<Entry>>();
-     * @param path
-     * @param privilegeRegistry
-     * @param principalMgr
+     * @param path path
+     * @param privilegeRegistry registry
+     * @param valueFactory value factory
+     * @param principalMgr manager
-
-     * @param aclNode
-     * @param privilegeRegistry
-     * @throws RepositoryException
+     * @param aclNode node
+     * @param privilegeRegistry registry
+     * @throws RepositoryException if an error occurs
-     * @param aclNode
+     * @param aclNode acl node
-     * @throws RepositoryException
+     * @throws RepositoryException if an error occurs
-    static void collectEntries(NodeImpl aclNode, Map princToEntries)
+    static void collectEntries(NodeImpl aclNode, Map<String, List<AccessControlEntry>> princToEntries)
-                ((List) princToEntries.get(principalName)).add(ace);
+                princToEntries.get(principalName).add(ace);
-    private List internalGetEntries() {
-        List l = new ArrayList();
-        for (Iterator it = entries.values().iterator(); it.hasNext();) {
-            l.addAll((List) it.next());
+    private List<? extends AccessControlEntry> internalGetEntries() {
+        List<Entry> l = new ArrayList<Entry>();
+        for (List<Entry> o : entries.values()) {
+            l.addAll(o);
-    private List internalGetEntries(Principal principal) {
+    private List<Entry> internalGetEntries(Principal principal) {
-            return (List) entries.get(principalName);
+            return entries.get(principalName);
-            return new ArrayList(2);
+            return new ArrayList<Entry>(2);
-        List l = internalGetEntries(principal);
+        List<Entry> l = internalGetEntries(principal);
-            // ev. need to adjust existing entries
+            // check if need to adjust existing entries
-            Entry[] entries = (Entry[]) l.toArray(new Entry[l.size()]);
+            Entry[] entries = l.toArray(new Entry[l.size()]);
-                    // both the new privileges and the existing onces.
+                    // both the new privileges and the existing ones.
-            // grant/deny the same privileges -> remove privs that are now
+            // grant/deny the same privileges -> remove privileges that are now
-        List l = internalGetEntries();
-        return (AccessControlEntry[]) l.toArray(new AccessControlEntry[l.size()]);
+        List<? extends AccessControlEntry> l = internalGetEntries();
+        return l.toArray(new AccessControlEntry[l.size()]);
-        Entry(Principal principal, Privilege[] privileges, boolean allow, ValueFactory valueFactory) throws AccessControlException {
-            super(principal, privileges, allow, Collections.EMPTY_MAP, valueFactory);
+        Entry(Principal principal, Privilege[] privileges, boolean allow, ValueFactory valueFactory)
+                throws AccessControlException {
+            super(principal, privileges, allow, Collections.<String, Value>emptyMap(), valueFactory);
