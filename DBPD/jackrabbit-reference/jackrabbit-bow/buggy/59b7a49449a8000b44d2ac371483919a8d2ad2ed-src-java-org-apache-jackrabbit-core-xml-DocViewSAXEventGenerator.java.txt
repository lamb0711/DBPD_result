consolidated Value de-/serialization code in static methods of ValueHelper class

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159686 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.util.Base64;
-import org.apache.jackrabbit.core.util.Text;
+import org.apache.jackrabbit.core.util.ValueHelper;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.StringWriter;
-     * @param noRecurse      if true, only <code>node</code> and its properties will
-     *                       be serialized; otherwise the entire hierarchy starting with
-     *                       <code>node</code> will be serialized.
-     * @param skipBinary     flag governing whether binary properties are to be serialized.
-     * @param session        the session to be used for resolving namespace mappings
+     * @param noRecurse      if true, only <code>node</code> and its properties
+     *                       will be serialized; otherwise the entire hierarchy
+     *                       starting with <code>node</code> will be serialized.
+     * @param skipBinary     flag governing whether binary properties are to be
+     *                       serialized.
+     * @param session        the session to be used for resolving namespace
+     *                       mappings
-                    String msg = "internal error: encountered unregistered namespace";
+                    String msg =
+                            "internal error: encountered unregistered namespace";
-                    Value val = vals[i];
-                    String textVal;
-                    if (prop.getType() == PropertyType.BINARY) {
-                        // binary data, base64 encoding required
-                        InputStream in = val.getStream();
-                        StringWriter writer = new StringWriter();
-                        try {
-                            Base64.encode(in, writer);
-                            // no need to close StringWriter
-                            //writer.close();
-                        } catch (IOException ioe) {
-                            // check if the exception wraps a SAXException
-                            Throwable t = ioe.getCause();
-                            if (t != null && t instanceof SAXException) {
-                                throw (SAXException) t;
-                            } else {
-                                throw new SAXException(ioe);
-                            }
-                        } finally {
-                            try {
-                                in.close();
-                            } catch (IOException e) {
-                                // ignore
-                            }
-                        }
-                        textVal = writer.toString();
-                    } else {
-                        textVal = val.getString();
-                    }
-                    // enocde blanks in value
-                    textVal = Text.replace(textVal, " ", "_x0020_");
-                    attrValue.append(textVal);
+                    attrValue.append(ValueHelper.serialize(vals[i], true));
-                attrs.addAttribute(propName.getNamespaceURI(), propName.getLocalName(), attrName, CDATA_TYPE, attrValue.toString());
+                attrs.addAttribute(propName.getNamespaceURI(),
+                        propName.getLocalName(), attrName, CDATA_TYPE,
+                        attrValue.toString());
-            contentHandler.startElement(name.getNamespaceURI(), name.getLocalName(), elemName, attrs);
+            contentHandler.startElement(name.getNamespaceURI(),
+                    name.getLocalName(), elemName, attrs);
-        contentHandler.endElement(name.getNamespaceURI(), name.getLocalName(), elemName);
+        contentHandler.endElement(name.getNamespaceURI(), name.getLocalName(),
+                elemName);
