JCR-3318 BLOB not stored and no exception thrown

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1349185 13f79535-47bb-0310-9956-ffa450edef68

-        new RetryManager<Void>() {
+        new RetryManager<Void>(params) {
-        return new RetryManager<Integer>() {
+        return new RetryManager<Integer>(params) {
-        return new RetryManager<ResultSet>() {
+        return new RetryManager<ResultSet>(params) {
-                return reallyExec(sql, params, returnGeneratedKeys, maxRows);
+            	return reallyExec(sql, params, returnGeneratedKeys, maxRows);
-            // FIXME: what about already consumed input streams when in a retry?
-        stmt.execute();
+        try {
+        	stmt.execute();
+        } catch (SQLException e) {
+        	//Reset Stream for retry ...
+            for (int i = 0; params != null && i < params.length; i++) {
+                Object p = params[i];
+                if (p instanceof StreamWrapper) {
+                    StreamWrapper wrapper = (StreamWrapper) p;
+                    if(!wrapper.resetStream()) {
+                    	wrapper.cleanupResources();
+                    	throw new RuntimeException("Unable to reset the Stream.");
+                    }
+                }
+            }
+        	throw e;
+        }
+     * The RetryManager must cleanup the Params it will get.
+    	private Object[] params;
+    	
+    	public RetryManager(Object[] params) {
+    		this.params = params;
+    	}
+    	
-                        return call();
+                    	T object = call(); 
+                        cleanupParamResources();
+                        return object;
+                cleanupParamResources();
+
+		/**
+		 * Cleans up the Parameter resources that are not automatically closed or deleted.
+		 *
+		 * @param params
+		 */
+		protected void cleanupParamResources() {
+		    for (int i = 0; params != null && i < params.length; i++) {
+		        Object p = params[i];
+		        if (p instanceof StreamWrapper) {
+		            StreamWrapper wrapper = (StreamWrapper) p;
+		            wrapper.cleanupResources();
+		        }
+		    }
+		}
