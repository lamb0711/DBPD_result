- removed @author and @version (i.e. $Revision & $Id) tags
- removed tab characters from java source code

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@47648 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
+import org.apache.log4j.Logger;
- *
- * @author Stefan Guggisberg
- * @version $Revision: 1.23 $, $Date: 2004/08/25 17:32:18 $
-	implements ItemStateProvider, ItemStateListener {
+        implements ItemStateProvider, ItemStateListener {
-				      String rootNodeUUID,
-				      NodeTypeRegistry ntReg)
-	    throws ItemStateException {
-	this.persistMgr = persistMgr;
+                                      String rootNodeUUID,
+                                      NodeTypeRegistry ntReg)
+            throws ItemStateException {
+        this.persistMgr = persistMgr;
-	try {
-	    root = getNodeState(new NodeId(rootNodeUUID));
-	} catch (NoSuchItemStateException e) {
-	    // create root node
-	    root = createPersistentRootNodeState(rootNodeUUID, ntReg);
-	}
+        try {
+            root = getNodeState(new NodeId(rootNodeUUID));
+        } catch (NoSuchItemStateException e) {
+            // create root node
+            root = createPersistentRootNodeState(rootNodeUUID, ntReg);
+        }
-							      NodeTypeRegistry ntReg)
-	    throws ItemStateException {
-	PersistentNodeState rootState = createNodeState(rootNodeUUID, NodeTypeRegistry.NT_UNSTRUCTURED, null);
+                                                              NodeTypeRegistry ntReg)
+            throws ItemStateException {
+        PersistentNodeState rootState = createNodeState(rootNodeUUID, NodeTypeRegistry.NT_UNSTRUCTURED, null);
-	// @todo FIXME need to manually setup root node by creating mandatory jcr:primaryType property
-	NodeDefId nodeDefId = null;
-	PropDefId propDefId = null;
+        // @todo FIXME need to manually setup root node by creating mandatory jcr:primaryType property
+        NodeDefId nodeDefId = null;
+        PropDefId propDefId = null;
-	try {
-	    // FIXME relies on definition of nt:unstructured and nt:base:
-	    // first (and only) child node definition in nt:unstructured is applied to root node
-	    nodeDefId = new NodeDefId(ntReg.getNodeTypeDef(NodeTypeRegistry.NT_UNSTRUCTURED).getChildNodeDefs()[0]);
-	    // first property definition in nt:base is jcr:primaryType
-	    propDefId = new PropDefId(ntReg.getNodeTypeDef(NodeTypeRegistry.NT_BASE).getPropertyDefs()[0]);
-	} catch (NoSuchNodeTypeException nsnte) {
-	    String msg = "failed to create root node";
-	    log.error(msg, nsnte);
-	    throw new ItemStateException(msg, nsnte);
-	}
-	rootState.setDefinitionId(nodeDefId);
+        try {
+            // FIXME relies on definition of nt:unstructured and nt:base:
+            // first (and only) child node definition in nt:unstructured is applied to root node
+            nodeDefId = new NodeDefId(ntReg.getNodeTypeDef(NodeTypeRegistry.NT_UNSTRUCTURED).getChildNodeDefs()[0]);
+            // first property definition in nt:base is jcr:primaryType
+            propDefId = new PropDefId(ntReg.getNodeTypeDef(NodeTypeRegistry.NT_BASE).getPropertyDefs()[0]);
+        } catch (NoSuchNodeTypeException nsnte) {
+            String msg = "failed to create root node";
+            log.error(msg, nsnte);
+            throw new ItemStateException(msg, nsnte);
+        }
+        rootState.setDefinitionId(nodeDefId);
-	QName propName = new QName(NamespaceRegistryImpl.NS_JCR_URI, "primaryType");
-	rootState.addPropertyEntry(propName);
+        QName propName = new QName(NamespaceRegistryImpl.NS_JCR_URI, "primaryType");
+        rootState.addPropertyEntry(propName);
-	PersistentPropertyState prop = createPropertyState(rootNodeUUID, propName);
-	prop.setValues(new InternalValue[]{InternalValue.create(NodeTypeRegistry.NT_UNSTRUCTURED)});
-	prop.setType(PropertyType.NAME);
-	prop.setDefinitionId(propDefId);
+        PersistentPropertyState prop = createPropertyState(rootNodeUUID, propName);
+        prop.setValues(new InternalValue[]{InternalValue.create(NodeTypeRegistry.NT_UNSTRUCTURED)});
+        prop.setType(PropertyType.NAME);
+        prop.setDefinitionId(propDefId);
-	rootState.store();
-	prop.store();
+        rootState.store();
+        prop.store();
-	return rootState;
+        return rootState;
-	ps.println("PersistentItemStateManager (" + this + ")");
-	ps.println();
-	ps.println("entries in cache:");
-	ps.println();
-	Iterator iter = keys();
-	while (iter.hasNext()) {
-	    ItemId id = (ItemId) iter.next();
-	    ItemState state = retrieve(id);
-	    dumpItemState(id, state, ps);
-	}
+        ps.println("PersistentItemStateManager (" + this + ")");
+        ps.println();
+        ps.println("entries in cache:");
+        ps.println();
+        Iterator iter = keys();
+        while (iter.hasNext()) {
+            ItemId id = (ItemId) iter.next();
+            ItemState state = retrieve(id);
+            dumpItemState(id, state, ps);
+        }
-	ps.print(state.isNode() ? "Node: " : "Prop: ");
-	switch (state.getStatus()) {
-	    case ItemState.STATUS_EXISTING:
-		ps.print("[existing]           ");
-		break;
-	    case ItemState.STATUS_EXISTING_MODIFIED:
-		ps.print("[existing, modified] ");
-		break;
-	    case ItemState.STATUS_EXISTING_REMOVED:
-		ps.print("[existing, removed]  ");
-		break;
-	    case ItemState.STATUS_NEW:
-		ps.print("[new]                ");
-		break;
-	    case ItemState.STATUS_STALE_DESTROYED:
-		ps.print("[stale, destroyed]   ");
-		break;
-	    case ItemState.STATUS_STALE_MODIFIED:
-		ps.print("[stale, modified]    ");
-		break;
-	    case ItemState.STATUS_UNDEFINED:
-		ps.print("[undefined]          ");
-		break;
-	}
-	ps.println(id + " (" + state + ")");
+        ps.print(state.isNode() ? "Node: " : "Prop: ");
+        switch (state.getStatus()) {
+            case ItemState.STATUS_EXISTING:
+                ps.print("[existing]           ");
+                break;
+            case ItemState.STATUS_EXISTING_MODIFIED:
+                ps.print("[existing, modified] ");
+                break;
+            case ItemState.STATUS_EXISTING_REMOVED:
+                ps.print("[existing, removed]  ");
+                break;
+            case ItemState.STATUS_NEW:
+                ps.print("[new]                ");
+                break;
+            case ItemState.STATUS_STALE_DESTROYED:
+                ps.print("[stale, destroyed]   ");
+                break;
+            case ItemState.STATUS_STALE_MODIFIED:
+                ps.print("[stale, modified]    ");
+                break;
+            case ItemState.STATUS_UNDEFINED:
+                ps.print("[undefined]          ");
+                break;
+        }
+        ps.println(id + " (" + state + ")");
-	    throws NoSuchItemStateException, ItemStateException {
-	if (id.denotesNode()) {
-	    return getNodeState((NodeId) id);
-	} else {
-	    return getPropertyState((PropertyId) id);
-	}
+            throws NoSuchItemStateException, ItemStateException {
+        if (id.denotesNode()) {
+            return getNodeState((NodeId) id);
+        } else {
+            return getPropertyState((PropertyId) id);
+        }
-	try {
-	    getItemState(id);
-	    return true;
-	} catch (ItemStateException ise) {
-	    return false;
-	}
+        try {
+            getItemState(id);
+            return true;
+        } catch (ItemStateException ise) {
+            return false;
+        }
-	    throws NoSuchItemStateException, ItemStateException {
-	// n/a
-	throw new NoSuchItemStateException(id.toString());
+            throws NoSuchItemStateException, ItemStateException {
+        // n/a
+        throw new NoSuchItemStateException(id.toString());
-	// n/a
-	return false;
+        // n/a
+        return false;
-	    throws NoSuchItemStateException, ItemStateException {
-	// check cache
-	if (isCached(id)) {
-	    return (PersistentNodeState) retrieve(id);
-	}
-	// load from persisted state
-	PersistentNodeState state = persistMgr.loadNodeState(id.getUUID());
-	state.setStatus(ItemState.STATUS_EXISTING);
-	// put it in cache
-	cache(state);
-	// register as listener
-	state.addListener(this);
-	return state;
+            throws NoSuchItemStateException, ItemStateException {
+        // check cache
+        if (isCached(id)) {
+            return (PersistentNodeState) retrieve(id);
+        }
+        // load from persisted state
+        PersistentNodeState state = persistMgr.loadNodeState(id.getUUID());
+        state.setStatus(ItemState.STATUS_EXISTING);
+        // put it in cache
+        cache(state);
+        // register as listener
+        state.addListener(this);
+        return state;
-	    throws NoSuchItemStateException, ItemStateException {
-	// check cache
-	if (isCached(id)) {
-	    return (PersistentPropertyState) retrieve(id);
-	}
-	// load from persisted state
-	PersistentPropertyState state = persistMgr.loadPropertyState(id.getParentUUID(), id.getName());
-	state.setStatus(ItemState.STATUS_EXISTING);
-	// put it in cache
-	cache(state);
-	// register as listener
-	state.addListener(this);
-	return state;
+            throws NoSuchItemStateException, ItemStateException {
+        // check cache
+        if (isCached(id)) {
+            return (PersistentPropertyState) retrieve(id);
+        }
+        // load from persisted state
+        PersistentPropertyState state = persistMgr.loadPropertyState(id.getParentUUID(), id.getName());
+        state.setStatus(ItemState.STATUS_EXISTING);
+        // put it in cache
+        cache(state);
+        // register as listener
+        state.addListener(this);
+        return state;
-	    throws ItemStateException {
-	NodeId id = new NodeId(uuid);
-	// check cache
-	if (isCached(id)) {
-	    String msg = "there's already a node state instance with id " + id;
-	    log.error(msg);
-	    throw new ItemStateException(msg);
-	}
+            throws ItemStateException {
+        NodeId id = new NodeId(uuid);
+        // check cache
+        if (isCached(id)) {
+            String msg = "there's already a node state instance with id " + id;
+            log.error(msg);
+            throw new ItemStateException(msg);
+        }
-	PersistentNodeState state = persistMgr.createNodeStateInstance(uuid, nodeTypeName);
-	state.setParentUUID(parentUUID);
-	// put it in cache
-	cache(state);
-	// register as listener
-	state.addListener(this);
-	return state;
+        PersistentNodeState state = persistMgr.createNodeStateInstance(uuid, nodeTypeName);
+        state.setParentUUID(parentUUID);
+        // put it in cache
+        cache(state);
+        // register as listener
+        state.addListener(this);
+        return state;
-	    throws ItemStateException {
-	PropertyId id = new PropertyId(parentUUID, propName);
-	// check cache
-	if (isCached(id)) {
-	    String msg = "there's already a property state instance with id " + id;
-	    log.error(msg);
-	    throw new ItemStateException(msg);
-	}
+            throws ItemStateException {
+        PropertyId id = new PropertyId(parentUUID, propName);
+        // check cache
+        if (isCached(id)) {
+            String msg = "there's already a property state instance with id " + id;
+            log.error(msg);
+            throw new ItemStateException(msg);
+        }
-	PersistentPropertyState state = persistMgr.createPropertyStateInstance(propName, parentUUID);
-	// put it in cache
-	cache(state);
-	// register as listener
-	state.addListener(this);
-	return state;
+        PersistentPropertyState state = persistMgr.createPropertyStateInstance(propName, parentUUID);
+        // put it in cache
+        cache(state);
+        // register as listener
+        state.addListener(this);
+        return state;
-	// not interested
+        // not interested
-	// not interested
+        // not interested
-	destroyed.removeListener(this);
-	evict(destroyed.getId());
+        destroyed.removeListener(this);
+        evict(destroyed.getId());
-	discarded.removeListener(this);
-	evict(discarded.getId());
+        discarded.removeListener(this);
+        evict(discarded.getId());
