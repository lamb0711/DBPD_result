fixed bug that occured when calling Node.setProperty, specifying a non-existing property and an illegal value: 

exception was thrown but property had nevertheless been created with null value

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@106099 13f79535-47bb-0310-9956-ffa450edef68

+    // flag set in status passed to getOrCreateProperty if property was created
+    protected static final short CREATED = 0;
+
-    protected PropertyImpl getOrCreateProperty(String name, int type, boolean multiValued)
+    protected PropertyImpl getOrCreateProperty(String name, int type,
+                                               boolean multiValued,
+                                               BitSet status)
-        try {
-            return (PropertyImpl) getProperty(name);
-        } catch (PathNotFoundException pnfe) {
-            // fall through
-        }
-
-        // property does not exist yet...
-        // find definition for the specified property and create property
-        PropertyDefImpl def = getApplicablePropertyDef(qName, type, multiValued);
-        return createChildProperty(qName, type, def);
+        return getOrCreateProperty(qName, type, multiValued, status);
-    protected PropertyImpl getOrCreateProperty(QName name, int type, boolean multiValued)
+    protected synchronized PropertyImpl getOrCreateProperty(QName name, int type,
+                                                            boolean multiValued,
+                                                            BitSet status)
-        try {
-            return (PropertyImpl) getProperty(name);
-        } catch (ItemNotFoundException e) {
-            // does not exist yet:
-            // find definition for the specified property and create property
-            PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
-            return createChildProperty(name, type, def);
+        status.clear();
+
+        PropertyId propId = new PropertyId(((NodeState) state).getUUID(), name);
+        if (itemMgr.itemExists(propId)) {
+            return getProperty(name);
+        // does not exist yet:
+        // find definition for the specified property and create property
+        PropertyDefImpl def = getApplicablePropertyDef(name, type, multiValued);
+        PropertyImpl prop = createChildProperty(name, type, def);
+        status.set(CREATED);
+        return prop;
+
+    protected void removeChildProperty(String propName) throws RepositoryException {
+        QName qName;
+        try {
+            qName = QName.fromJCRName(propName, session.getNamespaceResolver());
+        } catch (IllegalNameException ine) {
+            throw new RepositoryException("invalid property name: " + propName, ine);
+        } catch (UnknownPrefixException upe) {
+            throw new RepositoryException("invalid property name: " + propName, upe);
+        }
+        removeChildProperty(qName);
+    }
+
-        PropertyImpl prop = getOrCreateProperty(name, type, false);
-        if (value == null) {
-            prop.internalSetValue((InternalValue[]) null, type);
-        } else {
-            prop.internalSetValue(new InternalValue[]{value}, type);
+
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, type, false, status);
+        try {
+            if (value == null) {
+                prop.internalSetValue((InternalValue[]) null, type);
+            } else {
+                prop.internalSetValue(new InternalValue[]{value}, type);
+            }
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
-        PropertyImpl prop = getOrCreateProperty(name, type, true);
-        prop.internalSetValue(values, type);
+
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, type, true, status);
+        try {
+            prop.internalSetValue(values, type);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, true);
-        prop.setValue(values);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.NAME, true, status);
+        try {
+            prop.setValue(values);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, type, true);
-        prop.setValue(values);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, type, true, status);
+        try {
+            prop.setValue(values);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, type, false);
-        prop.setValue(value);
+
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, type, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, type, true);
-        prop.setValue(values);
+
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, type, true, status);
+        try {
+            prop.setValue(values);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING, true);
-        prop.setValue(values);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING, true, status);
+        try {
+            prop.setValue(values);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.STRING, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, type, false);
-        prop.setValue(value);
+
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, type, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.BINARY, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.BINARY, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.BOOLEAN, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.BOOLEAN, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.DOUBLE, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.DOUBLE, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.LONG, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.LONG, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.DATE, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.DATE, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
-        PropertyImpl prop = getOrCreateProperty(name, PropertyType.REFERENCE, false);
-        prop.setValue(value);
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(name, PropertyType.REFERENCE, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
