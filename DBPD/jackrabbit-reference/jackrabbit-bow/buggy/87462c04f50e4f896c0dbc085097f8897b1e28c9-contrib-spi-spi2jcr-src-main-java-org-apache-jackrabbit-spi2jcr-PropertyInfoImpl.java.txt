JCR-1007: Move common implementations of SPI interfaces to spi-commons module

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@553507 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.PropertyInfo;
-import org.apache.jackrabbit.spi.PropertyId;
+import org.apache.jackrabbit.name.NameFormat;
+import org.apache.jackrabbit.name.PathFormat;
+import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.name.IllegalNameException;
+import org.apache.jackrabbit.name.UnknownPrefixException;
-class PropertyInfoImpl extends ItemInfoImpl implements PropertyInfo {
-
-    /**
-     * The property info of the underlying property.
-     */
-    private final PropertyId propertyId;
-
-    /**
-     * The type of the property.
-     */
-    private final int type;
-
-    /**
-     * The multiValued flag.
-     */
-    private final boolean isMultiValued;
-
-    /**
-     * The values of this property info.
-     */
-    private final QValue[] values;
+class PropertyInfoImpl
+        extends org.apache.jackrabbit.spi.commons.PropertyInfoImpl {
-                            QValueFactory qValueFactory) throws RepositoryException {
-        super(property, idFactory, nsResolver);
-        this.propertyId = idFactory.createPropertyId(property, nsResolver);
-        // TODO: build QValues upon (first) usage only.
-        this.type = property.getType();
-        this.isMultiValued = property.getDefinition().isMultiple();
+                            QValueFactory qValueFactory)
+            throws RepositoryException, MalformedPathException, IllegalNameException, UnknownPrefixException {
+        super(idFactory.createNodeId(property.getParent(), nsResolver),
+                NameFormat.parse(property.getName(), nsResolver),
+                PathFormat.parse(property.getPath(), nsResolver),
+                idFactory.createPropertyId(property, nsResolver),
+                property.getType(), property.getDefinition().isMultiple(),
+                getValues(property, nsResolver, qValueFactory)); // TODO: build QValues upon (first) usage only.
+    }
+
+    /**
+     * Returns the QValues for the <code>property</code>.
+     *
+     * @param property   the property.
+     * @param nsResolver the namespace resolver.
+     * @param factory    the value factory.
+     * @return the values of the property.
+     * @throws RepositoryException if an error occurs while reading the values.
+     */
+    private static QValue[] getValues(Property property,
+                                      NamespaceResolver nsResolver,
+                                      QValueFactory factory)
+            throws RepositoryException {
+        boolean isMultiValued = property.getDefinition().isMultiple();
+        QValue[] values;
-            this.values = new QValue[jcrValues.length];
+            values = new QValue[jcrValues.length];
-                this.values[i] = ValueFormat.getQValue(jcrValues[i],
-                        nsResolver, qValueFactory);
+                values[i] = ValueFormat.getQValue(jcrValues[i],
+                        nsResolver, factory);
-            this.values = new QValue[]{
-                ValueFormat.getQValue(property.getValue(), nsResolver, qValueFactory)};
+            values = new QValue[]{
+                ValueFormat.getQValue(property.getValue(), nsResolver, factory)};
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public PropertyId getId() {
-        return propertyId;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public int getType() {
-        return type;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean isMultiValued() {
-        return isMultiValued;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public QValue[] getValues() {
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean denotesNode() {
-        return false;
-    }
