JCR-1222: Index nodes in parallel

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@596654 13f79535-47bb-0310-9956-ffa450edef68

+    /** Executor with a pool size equal to the number of available processors */
+    private static final DynamicPooledExecutor EXECUTOR = new DynamicPooledExecutor();
+
-     * Adds a document to this index and invalidates the shared reader.
+     * Adds documents to this index and invalidates the shared reader.
-     * @param doc the document to add.
+     * @param docs the documents to add.
-    void addDocument(Document doc) throws IOException {
-        // check if text extractor completed its work
-        doc = getFinishedDocument(doc);
-        getIndexWriter().addDocument(doc);
+    void addDocuments(Document[] docs) throws IOException {
+        final IndexWriter writer = getIndexWriter();
+        DynamicPooledExecutor.Command commands[] =
+                new DynamicPooledExecutor.Command[docs.length];
+        for (int i = 0; i < docs.length; i++) {
+            // check if text extractor completed its work
+            final Document doc = getFinishedDocument(docs[i]);
+            // create a command for inverting the document
+            commands[i] = new DynamicPooledExecutor.Command() {
+                public Object call() throws Exception {
+                    long time = System.currentTimeMillis();
+                    writer.addDocument(doc);
+                    return new Long(System.currentTimeMillis() - time);
+                }
+            };
+        }
+        DynamicPooledExecutor.Result results[] = EXECUTOR.executeAndWait(commands);
+        IOException ex = null;
+        for (int i = 0; i < results.length; i++) {
+            if (results[i].getException() != null) {
+                Throwable cause = results[i].getException().getCause();
+                if (ex == null) {
+                    // only throw the first exception
+                    if (cause instanceof IOException) {
+                        ex = (IOException) cause;
+                    } else {
+                        IOException e = new IOException();
+                        e.initCause(cause);
+                        ex = e;
+                    }
+                } else {
+                    // all others are logged
+                    log.warn("Exception while inverting document", cause);
+                }
+            } else {
+                log.debug("Inverted document in {} ms", results[i].get());
+            }
+        }
+        if (ex != null) {
+            throw ex;
+        }
