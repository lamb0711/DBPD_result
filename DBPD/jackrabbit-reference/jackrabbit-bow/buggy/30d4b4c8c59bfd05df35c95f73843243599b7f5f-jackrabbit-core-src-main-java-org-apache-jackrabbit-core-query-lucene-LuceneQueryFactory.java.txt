Poor performance of ISDESCENDANTNODE on SQL 2 queries
- Use of DescendantSelfAxisQuery implementation for isdescendantnode constraint
- Changed visibility of some methods from private to protected since it makes testing optimizations with sub-classes a lot easier.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1050346 13f79535-47bb-0310-9956-ffa450edef68

+
+            QueryPair qp = new QueryPair(query);
+
-                filter = mapConstraintToQueryAndFilter(
-                        query, constraint, Collections.singletonMap(name, type),
+                filter = mapConstraintToQueryAndFilter(qp,
+                        constraint, Collections.singletonMap(name, type),
-            QueryHits hits = searcher.evaluate(query);
+            QueryHits hits = searcher.evaluate(qp.mainQuery);
-    private Term createNodeTypeTerm(NodeType type) throws RepositoryException {
+    protected Term createNodeTypeTerm(NodeType type) throws RepositoryException {
-    private Predicate mapConstraintToQueryAndFilter(
-            BooleanQuery query, Constraint constraint,
+    protected Predicate mapConstraintToQueryAndFilter(
+            QueryPair query, Constraint constraint,
-                query.add(cq, MUST);
+                query.subQuery.add(cq, MUST);
+        } else if (constraint instanceof DescendantNode) {
+            final DescendantNode descendantNode = (DescendantNode) constraint;
+            Query context = getNodeIdQuery(UUID, descendantNode.getAncestorPath());
+            query.mainQuery = new DescendantSelfAxisQuery(context, query.subQuery, false);
-            query.add(create(constraint, selectorMap, searcher), MUST);
+            query.subQuery.add(create(constraint, selectorMap, searcher), MUST);
-    private Query create(
+
+    protected Query create(
-    private Query getDescendantNodeQuery(
+    protected Query getDescendantNodeQuery(
-    private Query getFullTextSearchQuery(FullTextSearch fts)
+    protected Query getFullTextSearchQuery(FullTextSearch fts)
-    private BooleanQuery getAndQuery(
+    protected BooleanQuery getAndQuery(
-    private BooleanQuery getOrQuery(
+    protected BooleanQuery getOrQuery(
-    private void addBooleanConstraint(
+    protected void addBooleanConstraint(
-    private NotQuery getNotQuery(
+    protected NotQuery getNotQuery(
-    private Query getPropertyExistenceQuery(PropertyExistence property)
+    protected Query getPropertyExistenceQuery(PropertyExistence property)
-    private static class Transform {
+    protected static class Transform {
-    private Query getComparisonQuery(
+    protected Query getComparisonQuery(
-    private Query getNodeNameQuery(
+    protected Query getNodeNameQuery(
-    private Query getNodeLocalNameQuery(
+    protected Query getNodeLocalNameQuery(
-    private Query getNodeIdQuery(String field, String path)
+    protected Query getNodeIdQuery(String field, String path)
-    private Query getPropertyValueQuery(
+    protected Query getPropertyValueQuery(
-    private Term getTerm(String field, String value) {
+    protected Term getTerm(String field, String value) {
-    private String getValueString(Value value, int type)
+    protected String getValueString(Value value, int type)
+    protected class QueryPair {
+        Query mainQuery;
+        BooleanQuery subQuery;
+
+        QueryPair(BooleanQuery mainQuery) {
+            this.mainQuery = mainQuery;
+            this.subQuery = mainQuery;
+        }
+    }
+
