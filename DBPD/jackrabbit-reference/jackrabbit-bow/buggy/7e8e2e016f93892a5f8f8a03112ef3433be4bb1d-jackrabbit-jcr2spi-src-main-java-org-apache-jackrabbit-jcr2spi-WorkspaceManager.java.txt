JCR-1204: Redesign SPI observation

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@592356 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.Subscription;
+import java.util.Collection;
+    private final NameFactory nameFactory;
+    private final PathFactory pathFactory;
+    /**
+     * The current subscription for change events if there are listeners.
+     */
+    private Subscription subscription;
+
+        this.nameFactory = service.getNameFactory();
+        this.pathFactory = service.getPathFactory();
-        return service.getNameFactory();
+        return nameFactory;
-        return service.getPathFactory();
+        return pathFactory;
+     * @throws RepositoryException if the listener cannot be registered.
-    public void addEventListener(InternalEventListener listener) {
+    public void addEventListener(InternalEventListener listener)
+            throws RepositoryException {
+            EventFilter[] filters = getEventFilters(listeners);
+            if (listeners.size() == 1) {
+                subscription = service.createSubscription(sessionInfo, filters);
+            } else {
+                service.updateEventFilters(subscription, filters);
+            }
+     * Updates the event filters on the subscription. The filters are retrieved
+     * from the current list of internal event listeners.
+     *
+     * @throws RepositoryException
+     */
+    public void updateEventFilters() throws RepositoryException {
+        synchronized (listeners) {
+            service.updateEventFilters(subscription, getEventFilters(listeners));
+        }
+    }
+
+    /**
-    public void removeEventListener(InternalEventListener listener) {
+    public void removeEventListener(InternalEventListener listener)
+            throws RepositoryException {
+            if (listeners.isEmpty()) {
+                service.dispose(subscription);
+                subscription = null;
+            } else {
+                service.updateEventFilters(subscription, getEventFilters(listeners));
+            }
+
+    /**
+     * Gets the event filters from the passed listener list.
+     *
+     * @param listeners the internal event listeners.
+     */
+    private static EventFilter[] getEventFilters(Collection listeners) {
+        List filters = new ArrayList();
+        for (Iterator it = listeners.iterator(); it.hasNext(); ) {
+            InternalEventListener listener = (InternalEventListener) it.next();
+            filters.addAll(listener.getEventFilters());
+        }
+        return (EventFilter[]) filters.toArray(new EventFilter[filters.size()]);
+    }
+
+            if (subscription != null) {
+                service.dispose(subscription);
+            }
-                    // get filters from listeners
-                    List filters = new ArrayList();
+                    Subscription subscr;
+                        subscr = subscription;
-                    for (int i = 0; i < iel.length; i++) {
-                        filters.addAll(iel[i].getEventFilters());
-                    }
-                    EventFilter[] filtArr = (EventFilter[]) filters.toArray(new EventFilter[filters.size()]);
-                    EventBundle[] bundles = service.getEvents(sessionInfo, pollTimeout, filtArr);
+                    EventBundle[] bundles = service.getEvents(subscr, pollTimeout);
