grouped frequently used constants scattered around in various source files into Constants interface

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153503 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.nodetype.*;
+import org.apache.jackrabbit.core.nodetype.NodeDefImpl;
+import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
+import org.apache.jackrabbit.core.nodetype.PropertyDefImpl;
-import org.apache.jackrabbit.core.version.VersionManager;
-public abstract class ItemImpl implements Item, ItemStateListener {
+public abstract class ItemImpl implements Item, ItemStateListener, Constants {
-    // some constants used in derived classes
-    // system properties (values are system generated)
-    // jcr:uuid
-    public static final QName PROPNAME_UUID =
-            new QName(NamespaceRegistryImpl.NS_JCR_URI, "uuid");
-    // jcr:primaryType
-    public static final QName PROPNAME_PRIMARYTYPE =
-            new QName(NamespaceRegistryImpl.NS_JCR_URI, "primaryType");
-    // jcr:mixinTypes
-    public static final QName PROPNAME_MIXINTYPES =
-            new QName(NamespaceRegistryImpl.NS_JCR_URI, "mixinTypes");
-    // jcr:created
-    public static final QName PROPNAME_CREATED =
-            new QName(NamespaceRegistryImpl.NS_JCR_URI, "created");
-    // jcr:lastModified
-    public static final QName PROPNAME_LAST_MODIFIED =
-            new QName(NamespaceRegistryImpl.NS_JCR_URI, "lastModified");
-    // jcr:mergeFailed
-    public static final QName PROPNAME_MERGE_FAILED =
-            new QName(NamespaceRegistryImpl.NS_JCR_URI, "mergeFailed");
-
-                if (node.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
-                    if (!node.hasProperty(VersionManager.PROPNAME_VERSION_HISTORY)) {
-                        VersionHistory hist = session.versionMgr.createVersionHistory(node);
-                        node.internalSetProperty(VersionManager.PROPNAME_VERSION_HISTORY, InternalValue.create(new UUID(hist.getUUID())));
-                        node.internalSetProperty(VersionManager.PROPNAME_BASE_VERSION, InternalValue.create(new UUID(hist.getRootVersion().getUUID())));
-                        node.internalSetProperty(VersionManager.PROPNAME_IS_CHECKED_OUT, InternalValue.create(true));
-                        node.internalSetProperty(VersionManager.PROPNAME_PREDECESSORS, new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))});
+                if (node.isNodeType(MIX_VERSIONABLE)) {
+                    if (!node.hasProperty(JCR_VERSIONHISTORY)) {
+                        VersionHistory hist = session.getVersionManager().createVersionHistory(node);
+                        node.internalSetProperty(JCR_VERSIONHISTORY, InternalValue.create(new UUID(hist.getUUID())));
+                        node.internalSetProperty(JCR_BASEVERSION, InternalValue.create(new UUID(hist.getRootVersion().getUUID())));
+                        node.internalSetProperty(JCR_ISCHECKEDOUT, InternalValue.create(true));
+                        node.internalSetProperty(JCR_PREDECESSORS, new InternalValue[]{InternalValue.create(new UUID(hist.getRootVersion().getUUID()))});
-                /**
-                 * persistent item that has been transiently modified
-                 */
+                    /**
+                     * persistent item that has been transiently modified
+                     */
-                /**
-                 * persistent item that has been transiently modified or removed
-                 * and the underlying persistent state has been externally
-                 * modified since the transient modification/removal.
-                 */
+                    /**
+                     * persistent item that has been transiently modified or removed
+                     * and the underlying persistent state has been externally
+                     * modified since the transient modification/removal.
+                     */
-                /**
-                 * persistent item that has been transiently modified or removed
-                 * and the underlying persistent state has been externally
-                 * destroyed since the transient modification/removal.
-                 */
+                    /**
+                     * persistent item that has been transiently modified or removed
+                     * and the underlying persistent state has been externally
+                     * destroyed since the transient modification/removal.
+                     */
-                /**
-                 * new item that has been transiently added
-                 */
+                    /**
+                     * new item that has been transiently added
+                     */
-        synchronized(session) {
+        synchronized (session) {
