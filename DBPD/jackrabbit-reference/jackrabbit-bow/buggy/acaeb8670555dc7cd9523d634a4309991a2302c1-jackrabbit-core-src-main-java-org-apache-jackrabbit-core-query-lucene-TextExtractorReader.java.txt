JCR-2219: Improved background text extraction

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@799610 13f79535-47bb-0310-9956-ffa450edef68

-import EDU.oswego.cs.dl.util.concurrent.Executor;
-import EDU.oswego.cs.dl.util.concurrent.DirectExecutor;
-
-     * A direct executor in case text extraction is requested for immediate use.
-     */
-    private static final Executor DIRECT_EXECUTOR = new DirectExecutor();
-
-    /**
-     * The pooled executor.
-     */
-    private final Executor executor;
-
-    /**
-     * Set to <code>true</code> when the text extractor job has been started
-     * and is running.
-     */
-    private boolean jobStarted = false;
-
-    /**
-     * @param executor the executor to use when text extraction is requested.
-    TextExtractorReader(TextExtractorJob job, Executor executor, long timeout) {
+    TextExtractorReader(TextExtractorJob job, long timeout) {
-        this.executor = executor;
-        if (jobStarted) {
-            job.discard();
-        }
-            // no reader present
-            // check if job is started already
-            if (jobStarted) {
-                // wait until available
-                extractedText = job.getReader(Long.MAX_VALUE);
-            } else {
-                // execute with current thread
-                try {
-                    DIRECT_EXECUTOR.execute(job);
-                } catch (InterruptedException e) {
-                    // current thread is in interrupted state
-                    // -> ignore (job will not return a reader, which is fine)
-                }
-                extractedText = job.getReader(0);
+            String text = job.getExtractedText(timeout);
+            if (text == null) {
+                text = "";
-
-            if (extractedText == null) {
-                // exception occurred
-                extractedText = new StringReader("");
-            }
+            extractedText = new StringReader(text);
-        if (!jobStarted) {
-            try {
-                executor.execute(job);
-                jobStarted = true;
-            } catch (InterruptedException e) {
-                // this thread is in interrupted state
-                return false;
-            }
-            extractedText = job.getReader(timeout);
-        } else {
-            // job is already running, check for immediate result
-            extractedText = job.getReader(0);
-        }
-
-        if (extractedText == null && job.getException() != null) {
-            // exception occurred
-            extractedText = new StringReader("");
-        }
-
-        return extractedText != null;
+        return job.hasExtractedText();
