JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.PathFormat;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
+import org.apache.jackrabbit.namespace.NamespaceResolver;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.conversion.NamePathResolver;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.conversion.PathResolver;
+import org.apache.jackrabbit.conversion.NameResolver;
+import org.apache.jackrabbit.conversion.DefaultNamePathResolver;
+    private final NamePathResolver npResolver;
+        npResolver = new DefaultNamePathResolver(nsMappings, true);
-        validator = new ItemStateValidator(this);
+        validator = new ItemStateValidator(this, getPathFactory());
-        if (node instanceof NodeImpl && ((NodeImpl)node).isNodeType(QName.MIX_REFERENCEABLE)) {
+        if (node instanceof NodeImpl && ((NodeImpl)node).isNodeType(NameConstants.MIX_REFERENCEABLE)) {
-            try {
-                String mixReferenceable = NameFormat.format(QName.MIX_REFERENCEABLE, getNamespaceResolver());
-                if (node.isNodeType(mixReferenceable)) {
-                    return node;
-                }
-            } catch (NoPrefixDeclaredException e) {
-                // should not occur.
-                throw new RepositoryException(e);
+            String mixReferenceable = getNameResolver().getJCRName(NameConstants.MIX_REFERENCEABLE);
+            if (node.isNodeType(mixReferenceable)) {
+                return node;
-        } catch (MalformedPathException e) {
-            throw new RepositoryException(e);
-        try {
-            Path qPath = getQPath(absPath);
-            return getItemManager().itemExists(qPath.getNormalizedPath());
-        } catch (MalformedPathException e) {
-            throw new RepositoryException(e);
-        }
+        Path qPath = getQPath(absPath);
+        return getItemManager().itemExists(qPath.getNormalizedPath());
-        Operation op = Move.create(srcPath, destPath, getHierarchyManager(), getNamespaceResolver(), true);
+        Operation op = Move.create(srcPath, destPath, getHierarchyManager(), getPathResolver(), true);
-            try {
-                Path relPath = parentPath.computeRelativePath(targetPath);
-                isGranted = getAccessManager().isGranted(parentState, relPath, actionsArr);
-            } catch (MalformedPathException e) {
-                // should not occurs
-                throw new RepositoryException(e);
-            }
+            Path relPath = parentPath.computeRelativePath(targetPath);
+            isGranted = getAccessManager().isGranted(parentState, relPath, actionsArr);
-        return new ImportHandler(importer, getNamespaceResolver(), workspace.getNamespaceRegistry());
+        return new ImportHandler(importer, getNamespaceResolver(), workspace.getNamespaceRegistry(), getNameFactory());
+
+    public NamePathResolver getNamePathResolver() {
+        return npResolver;
+    }
+
+    /**
+     * @see ManagerProvider#getNameResolver()
+     */
+    public NameResolver getNameResolver() {
+        return npResolver;
+    }
+
+    /**
+     * @see ManagerProvider#getPathResolver()
+     */
+    public PathResolver getPathResolver() {
+        return npResolver;
+    }
+
-    public IdFactory getIdFactory() {
+    public IdFactory getIdFactory() throws RepositoryException {
+    public NameFactory getNameFactory() throws RepositoryException {
+        return workspace.getNameFactory();
+    }
+
+    PathFactory getPathFactory() throws RepositoryException {
+        return workspace.getPathFactory();
+    }
+
-            Path p = PathFormat.parse(absPath, getNamespaceResolver());
+            Path p = getPathResolver().getQPath(absPath);
-        } catch (MalformedPathException mpe) {
+        } catch (NameException mpe) {
-     * @param node
+     * @param version
