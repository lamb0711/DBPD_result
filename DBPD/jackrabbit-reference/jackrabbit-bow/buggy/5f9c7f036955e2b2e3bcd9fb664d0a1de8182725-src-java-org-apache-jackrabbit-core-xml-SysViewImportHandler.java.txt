re-implemented handling of values on import to allow import of large binary properties 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@160072 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.Constants;
-import org.apache.jackrabbit.core.InternalValue;
-import org.apache.jackrabbit.core.util.ValueHelper;
-import org.xml.sax.helpers.DefaultHandler;
+import java.io.IOException;
+import java.util.Iterator;
-class SysViewImportHandler extends DefaultHandler implements Constants {
+class SysViewImportHandler extends TargetImportHandler {
-    private final Importer importer;
-    private final NamespaceResolver nsContext;
-
+    // list of AppendableValue objects
-    private StringBuffer currentPropValue;
+    private AppendableValue currentPropValue;
+    /**
+     * Constructs a new <code>SysViewImportHandler</code>.
+     *
+     * @param importer
+     * @param nsContext
+     */
-        this.importer = importer;
-        this.nsContext = nsContext;
+        super(importer, nsContext);
+                // dispose temporary property values
+                for (Iterator iter = state.props.iterator(); iter.hasNext();) {
+                    Importer.PropInfo pi = (Importer.PropInfo) iter.next();
+                    disposePropertyValues(pi);
+                }
+
-            String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            if (name == null) {
-                // try qualified name
-                name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            }
+            String name = atts.getValue(SysViewSAXEventGenerator.PREFIXED_NAME_ATTRIBUTE);
-            String name = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            if (name == null) {
-                // try qualified name
-                name = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.NAME_ATTRIBUTE);
-            }
+            String name = atts.getValue(SysViewSAXEventGenerator.PREFIXED_NAME_ATTRIBUTE);
-            String type = atts.getValue(SysViewSAXEventGenerator.NS_SV_URI, SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
-            if (type == null) {
-                // try qualified name
-                type = atts.getValue(SysViewSAXEventGenerator.NS_SV_PREFIX + ":" + SysViewSAXEventGenerator.TYPE_ATTRIBUTE);
-            }
+            String type = atts.getValue(SysViewSAXEventGenerator.PREFIXED_TYPE_ATTRIBUTE);
-            currentPropValue = new StringBuffer();
+            if (currentPropType == PropertyType.BINARY) {
+                // binary value; use temp-file backed value appender
+                try {
+                    currentPropValue = new CLOBValue();
+                } catch (IOException ioe) {
+                    throw new SAXException("error while processing property value",
+                            ioe);
+                }
+            } else {
+                // 'normal' value; use StringBuffer-backed value appender
+                currentPropValue = new StringBufferValue();
+            }
-    public void characters(char[] ch, int start, int length) throws SAXException {
+    public void characters(char[] ch, int start, int length)
+            throws SAXException {
-            currentPropValue.append(ch, start, length);
+            try {
+                currentPropValue.append(ch, start, length);
+            } catch (IOException ioe) {
+                throw new SAXException("error while processing property value",
+                        ioe);
+            }
-    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
-        try {
-            String elemName;
-            if (localName != null && !"".equals(localName)) {
-                elemName = localName;
+    public void endElement(String namespaceURI, String localName, String qName)
+            throws SAXException {
+        String elemName;
+        if (localName != null && !"".equals(localName)) {
+            elemName = localName;
+        } else {
+            try {
+                elemName = QName.fromJCRName(qName, nsContext).getLocalName();
+            } catch (BaseException e) {
+                // should never happen...
+                String msg = "internal error: failed to parse/resolve element name " + qName;
+                log.debug(msg);
+                throw new SAXException(msg, e);
+            }
+        }
+        // check element name
+        ImportState state = (ImportState) stack.peek();
+        if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
+            // sv:node element
+            if (!state.started) {
+                // need to start & end current node
+                processNode(state, true, true);
+                state.started = true;
+                // need to end current node
+                processNode(state, false, true);
+            }
+            // pop current state from stack
+            stack.pop();
+        } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
+            // sv:property element
+
+            // check if all system properties (jcr:primaryType, jcr:uuid etc.)
+            // have been collected and create node as necessary
+            if (currentPropName.equals(JCR_PRIMARYTYPE)) {
+                AppendableValue val = (AppendableValue) currentPropValues.get(0);
+                String s = null;
-                    elemName = QName.fromJCRName(qName, nsContext).getLocalName();
-                } catch (BaseException e) {
-                    // should never happen...
-                    String msg = "internal error: failed to parse/resolve element name " + qName;
-                    log.debug(msg);
-                    throw new SAXException(msg, e);
+                    s = val.retrieve();
+                    state.nodeTypeName = QName.fromJCRName(s, nsContext);
+                } catch (IOException ioe) {
+                    throw new SAXException("error while retrieving value", ioe);
+                } catch (IllegalNameException ine) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + s, ine));
+                } catch (UnknownPrefixException upe) {
+                    throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + s, upe));
-            }
-            // check element name
-            ImportState state = (ImportState) stack.peek();
-            if (SysViewSAXEventGenerator.NODE_ELEMENT.equals(elemName)) {
-                // sv:node element
-                if (!state.started) {
-                    // need to start & end current node
-                    processNode(state, true, true);
-                    state.started = true;
-                } else {
-                    // need to end current node
-                    processNode(state, false, true);
+            } else if (currentPropName.equals(JCR_MIXINTYPES)) {
+                if (state.mixinNames == null) {
+                    state.mixinNames = new ArrayList(currentPropValues.size());
-                // pop current state from stack
-                stack.pop();
-            } else if (SysViewSAXEventGenerator.PROPERTY_ELEMENT.equals(elemName)) {
-                // sv:property element
-
-                // check if all system properties (jcr:primaryType, jcr:uuid etc.)
-                // have been collected and create node as necessary
-                if (currentPropName.equals(JCR_PRIMARYTYPE)) {
+                for (int i = 0; i < currentPropValues.size(); i++) {
+                    AppendableValue val = (AppendableValue) currentPropValues.get(0);
+                    String s = null;
-                        state.nodeTypeName = QName.fromJCRName((String) currentPropValues.get(0), nsContext);
+                        s = val.retrieve();
+                        QName mixin = QName.fromJCRName(s, nsContext);
+                        state.mixinNames.add(mixin);
+                    } catch (IOException ioe) {
+                        throw new SAXException("error while retrieving value", ioe);
-                        throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), ine));
+                        throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + s, ine));
-                        throw new SAXException(new InvalidSerializedDataException("illegal node type name: " + currentPropValues.get(0), upe));
+                        throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + s, upe));
-                } else if (currentPropName.equals(JCR_MIXINTYPES)) {
-                    if (state.mixinNames == null) {
-                        state.mixinNames = new ArrayList(currentPropValues.size());
-                    }
-                    for (int i = 0; i < currentPropValues.size(); i++) {
-                        try {
-                            QName mixin = QName.fromJCRName((String) currentPropValues.get(i), nsContext);
-                            state.mixinNames.add(mixin);
-                        } catch (IllegalNameException ine) {
-                            throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), ine));
-                        } catch (UnknownPrefixException upe) {
-                            throw new SAXException(new InvalidSerializedDataException("illegal mixin type name: " + currentPropValues.get(i), upe));
-                        }
-                    }
-                } else if (currentPropName.equals(JCR_UUID)) {
-                    state.uuid = (String) currentPropValues.get(0);
-                } else {
-                    // convert values to native type
-                    InternalValue[] vals = new InternalValue[currentPropValues.size()];
-                    for (int i = 0; i < currentPropValues.size(); i++) {
-                        String value = (String) currentPropValues.get(i);
-                        vals[i] = InternalValue.create(
-                                ValueHelper.deserialize(value, currentPropType,
-                                        false), nsContext);
-                    }
-                    Importer.PropInfo prop = new Importer.PropInfo();
-                    prop.setName(currentPropName);
-                    prop.setType(currentPropType);
-                    prop.setValues(vals);
-
-                    state.props.add(prop);
-
-                // reset temp fields
-                currentPropValues.clear();
-            } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
-                // sv:value element
-                currentPropValues.add(currentPropValue.toString());
-                // reset temp fields
-                currentPropValue = null;
+            } else if (currentPropName.equals(JCR_UUID)) {
+                AppendableValue val = (AppendableValue) currentPropValues.get(0);
+                try {
+                    state.uuid = val.retrieve();
+                } catch (IOException ioe) {
+                    throw new SAXException("error while retrieving value", ioe);
+                }
-                throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + elemName));
+                Importer.PropInfo prop = new Importer.PropInfo();
+                prop.setName(currentPropName);
+                prop.setType(currentPropType);
+                prop.setValues((Importer.TextValue[])
+                        currentPropValues.toArray(new Importer.TextValue[currentPropValues.size()]));
+                state.props.add(prop);
-        } catch (RepositoryException re) {
-            throw new SAXException(re);
+            // reset temp fields
+            currentPropValues.clear();
+        } else if (SysViewSAXEventGenerator.VALUE_ELEMENT.equals(elemName)) {
+            // sv:value element
+            currentPropValues.add(currentPropValue);
+            // reset temp fields
+            currentPropValue = null;
+        } else {
+            throw new SAXException(new InvalidSerializedDataException("invalid element in system view xml document: " + elemName));
