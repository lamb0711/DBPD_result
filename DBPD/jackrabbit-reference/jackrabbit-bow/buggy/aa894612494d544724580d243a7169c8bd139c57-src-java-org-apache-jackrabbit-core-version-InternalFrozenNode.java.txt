- adapted versioning again to spec 0.15
- added VirtualItemStateManager for reflecting virtual content


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55615 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.util.uuid.UUID;
-    protected InternalFrozenNode(PersistentNode node) throws RepositoryException {
+    protected InternalFrozenNode(InternalFreeze parent, PersistentNode node) throws RepositoryException {
+        super(parent);
-                frozenChildNodes[i] = new InternalFrozenNode(childNodes[i]);
+                frozenChildNodes[i] = new InternalFrozenNode(this, childNodes[i]);
-                frozenChildNodes[i] = new InternalFrozenVersionHistory(childNodes[i]);
+                frozenChildNodes[i] = new InternalFrozenVersionHistory(this, childNodes[i]);
-    protected static InternalFrozenNode checkin(PersistentNode parent, QName name, NodeImpl src)
+    protected static PersistentNode checkin(PersistentNode parent, QName name, NodeImpl src, boolean initOnly)
-        // add the properties
-        PropertyIterator piter = src.getProperties();
-        while (piter.hasNext()) {
-            PropertyImpl prop = (PropertyImpl) piter.nextProperty();
-// ignore some properties that not have a OPV=Ignore yet
-            if (prop.getQName().equals(VersionManager.PROPNAME_VERSION_HISTORY)) {
-                continue;
+        if (!initOnly) {
+            // add the properties
+            PropertyIterator piter = src.getProperties();
+            while (piter.hasNext()) {
+                PropertyImpl prop = (PropertyImpl) piter.nextProperty();
+    // ignore some properties that not have a OPV=Ignore yet
+                if (prop.getQName().equals(VersionManager.PROPNAME_VERSION_HISTORY)) {
+                    continue;
+                }
+                if (prop.getQName().equals(VersionManager.PROPNAME_PREDECESSORS)) {
+                    continue;
+                }
+                switch (prop.getDefinition().getOnParentVersion()) {
+                    case OnParentVersionAction.ABORT:
+                        parent.reload();
+                        throw new RepositoryException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
+                    case OnParentVersionAction.COMPUTE:
+                    case OnParentVersionAction.IGNORE:
+                    case OnParentVersionAction.INITIALIZE:
+                        break;
+                    case OnParentVersionAction.VERSION:
+                    case OnParentVersionAction.COPY:
+                        node.copyFrom(prop);
+                        break;
+                }
-            if (prop.getQName().equals(VersionManager.PROPNAME_PREDECESSORS)) {
-                continue;
-            }
-            switch (prop.getDefinition().getOnParentVersion()) {
-                case OnParentVersionAction.ABORT:
-                    parent.reload();
-                    throw new RepositoryException("Checkin aborted due to OPV in " + prop.safeGetJCRPath());
-                case OnParentVersionAction.COMPUTE:
-                case OnParentVersionAction.IGNORE:
-                case OnParentVersionAction.INITIALIZE:
-                    break;
-                case OnParentVersionAction.VERSION:
-                case OnParentVersionAction.COPY:
-                    node.copyFrom(prop);
-                    break;
-            }
-        }
-        // add the frozen children and vistories
-        NodeIterator niter = src.getNodes();
-        while (niter.hasNext()) {
-            NodeImpl child = (NodeImpl) niter.nextNode();
-            switch (child.getDefinition().getOnParentVersion()) {
-                case OnParentVersionAction.ABORT:
-                    throw new RepositoryException("Checkin aborted due to OPV in " + child.safeGetJCRPath());
-                case OnParentVersionAction.COMPUTE:
-                case OnParentVersionAction.IGNORE:
-                case OnParentVersionAction.INITIALIZE:
-                    break;
-                case OnParentVersionAction.VERSION:
-                    if (child.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
-// create frozen versionable child
-                        PersistentNode newChild = node.addNode(child.getQName(), NodeTypeRegistry.NT_UNSTRUCTURED);
-                        newChild.setPropertyValue(VersionManager.PROPNAME_VERSION_HISTORY,
-                                InternalValue.create(new UUID(child.getVersionHistory().getUUID())));
-                        newChild.setPropertyValue(VersionManager.PROPNAME_BASE_VERSION,
-                                InternalValue.create(new UUID(child.getBaseVersion().getUUID())));
-                    }
-                    // else ignore
-                    break;
-                case OnParentVersionAction.COPY:
-                    checkin(node, child.getQName(), child);
-                    break;
+            // add the frozen children and vistories
+            NodeIterator niter = src.getNodes();
+            while (niter.hasNext()) {
+                NodeImpl child = (NodeImpl) niter.nextNode();
+                switch (child.getDefinition().getOnParentVersion()) {
+                    case OnParentVersionAction.ABORT:
+                        throw new RepositoryException("Checkin aborted due to OPV in " + child.safeGetJCRPath());
+                    case OnParentVersionAction.COMPUTE:
+                    case OnParentVersionAction.IGNORE:
+                    case OnParentVersionAction.INITIALIZE:
+                        break;
+                    case OnParentVersionAction.VERSION:
+                        if (child.isNodeType(NodeTypeRegistry.MIX_VERSIONABLE)) {
+                            // create frozen versionable child
+                            PersistentNode newChild = node.addNode(child.getQName(), NodeTypeRegistry.NT_UNSTRUCTURED);
+                            newChild.setPropertyValue(VersionManager.PROPNAME_VERSION_HISTORY,
+                                    InternalValue.create(child.getVersionHistory().getUUID()));
+                            newChild.setPropertyValue(VersionManager.PROPNAME_BASE_VERSION,
+                                    InternalValue.create(child.getBaseVersion().getUUID()));
+                        }
+                        // else ignore
+                        break;
+                    case OnParentVersionAction.COPY:
+                        checkin(node, child.getQName(), child, false);
+                        break;
+                }
-        return new InternalFrozenNode(node);
+        return node;
