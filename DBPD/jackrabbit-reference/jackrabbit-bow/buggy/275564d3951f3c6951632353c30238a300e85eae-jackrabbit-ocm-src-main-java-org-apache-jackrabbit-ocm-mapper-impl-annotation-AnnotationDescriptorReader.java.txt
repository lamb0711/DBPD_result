- working on JCR-1339 : better support for Map. It is important to define an ID field in the class used for the Map elements. This ID will be used as a key in the map. 
- Rename ManagedHashMap into ManageableHashMap in ordrer to follow the same naming convention.
- Now, it is not necessary to define the ElementClassName if the Collection or the Map are parametrized like List<MyClass>

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@646938 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import org.apache.jackrabbit.ocm.reflection.ReflectionUtils;
-	
+
-		MappingDescriptor mappingDescriptor = new MappingDescriptor();	
+		MappingDescriptor mappingDescriptor = new MappingDescriptor();
-			
+
-		
+
-	
+
-		
+
-			classDescriptor = createClassDescriptor(clazz, nodeAnnotation);	
+			classDescriptor = createClassDescriptor(clazz, nodeAnnotation);
-	
-		
-		
+
+
+
-		
+
-		{		
+		{
-		
+
-		
+
-	
+
-		
+
-	
+
-	
+
+
+
-			
+
-			
+
-				addCollectionDescriptor(mappingDescriptor, classDescriptor, fields[index].getName(),
-						                fields[index].getName(), collectionAnnotation);
+				addCollectionDescriptor(mappingDescriptor, classDescriptor, fields[index], collectionAnnotation);
-					
-		   	
+
+
-		
+
-		} catch (IntrospectionException e) {
-			throw new RuntimeException(e);
-		}
-		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
-		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
+			PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
+			for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
-			// Check if there is an Field annotation
-			Field fieldAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Field.class);
-			if (fieldAnnotation != null) {
-				addFieldDescriptor(classDescriptor, propertyDescriptor.getName(), fieldAnnotation);
+				// Check if there is an Field annotation
+				Field fieldAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Field.class);
+				if (fieldAnnotation != null) {
+					addFieldDescriptor(classDescriptor, propertyDescriptor.getName(), fieldAnnotation);
+				}
+
+				// Check if there is an Bean annotation
+				Bean beanAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Bean.class);
+				if (beanAnnotation != null) {
+					addBeanDescriptor(classDescriptor, propertyDescriptor.getName(), beanAnnotation);
+				}
+
+				// Check if there is an Collection annotation
+				Collection collectionAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Collection.class);
+				if (collectionAnnotation != null) {
+
+					addCollectionDescriptor(mappingDescriptor, classDescriptor,
+							                propertyDescriptor.getPropertyType().getDeclaredField(propertyDescriptor.getName()),
+							                collectionAnnotation);
+				}
-			
-			// Check if there is an Bean annotation
-			Bean beanAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Bean.class);
-			if (beanAnnotation != null) {
-				addBeanDescriptor(classDescriptor, propertyDescriptor.getName(), beanAnnotation);
-			}
-			
-			// Check if there is an Collection annotation
-			Collection collectionAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Collection.class);
-			if (collectionAnnotation != null) {
-				addCollectionDescriptor(mappingDescriptor, classDescriptor, propertyDescriptor.getName(),
-						                propertyDescriptor.getReadMethod().getReturnType().getName(), collectionAnnotation);
-			}
+		} catch (Exception e) {
+			throw new InitMapperException("Impossible to read the mapping descriptor from the getter", e);
+
-			                             String fieldName, String collectionClassName, Collection collectionAnnotation) {
-		
+			                             java.lang.reflect.Field field, Collection collectionAnnotation) {
+
-		CollectionDescriptor collectionDescriptor = new CollectionDescriptor();	
-		
-		collectionDescriptor.setFieldName(fieldName);
-		
+		CollectionDescriptor collectionDescriptor = new CollectionDescriptor();
+
+		collectionDescriptor.setFieldName(field.getName());
+
-		   collectionDescriptor.setJcrName(fieldName);
+		   collectionDescriptor.setJcrName(field.getName());
-		
+
-		
+
-		collectionDescriptor.setCollectionClassName(collectionClassName);
+		collectionDescriptor.setCollectionClassName(field.getName());
-		    collectionDescriptor.setElementClassName(targetClass.getName());
+
+//		    collectionDescriptor.setElementClassName(targetClass.getName());
+			Type type = field.getGenericType();
+			if (type instanceof ParameterizedType)
+			{
+				Type[] paramType = ((ParameterizedType) type).getActualTypeArguments();
+				//TODO : change this condition. No sure if it will be all the time true.
+				// If only one type argument, the attribute is certainly a collection
+				if (paramType.length == 1)
+				{
+					collectionDescriptor.setElementClassName(paramType[0].toString().replace("class ", ""));
+				}
+				// either, it is certainly a map
+				else
+				{
+					collectionDescriptor.setElementClassName(paramType[1].toString().replace("class ", ""));
+				}
+
+			}
+
-		
+
-		
+
-	
+
-		
-		beanDescriptor.setProxy(beanAnnotation.proxy());				
+
+		beanDescriptor.setProxy(beanAnnotation.proxy());
-		beanDescriptor.setJcrProtected(beanAnnotation.jcrProtected());			
-		beanDescriptor.setJcrSameNameSiblings(beanAnnotation.jcrSameNameSiblings());				
+		beanDescriptor.setJcrProtected(beanAnnotation.jcrProtected());
+		beanDescriptor.setJcrSameNameSiblings(beanAnnotation.jcrSameNameSiblings());
-				
-		FieldDescriptor fieldDescriptor = new FieldDescriptor();				
+
+		FieldDescriptor fieldDescriptor = new FieldDescriptor();
-			fieldDescriptor.setJcrName(fieldAnnotation.jcrName());	
+			fieldDescriptor.setJcrName(fieldAnnotation.jcrName());
-			fieldDescriptor.setJcrName(fieldName);	
+			fieldDescriptor.setJcrName(fieldName);
-		fieldDescriptor.setId(fieldAnnotation.id());				
+		fieldDescriptor.setId(fieldAnnotation.id());
-		
+
-		
+
-		
+
-		{	
+		{
-		
+
-		
+
-		
+
