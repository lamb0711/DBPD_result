JCR-3452: Modified property and child node definition are rejected

trivial modifications:
- adding/removing nt:base as requiredPrimaryType constraint
- making a single-valued property multi-valued
- changing a property's requiredType constraint to UNDEFINED

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1415685 13f79535-47bb-0310-9956-ffa450edef68

-                    List<Name> l1 = Arrays.asList(getOldDef().getRequiredPrimaryTypes());
-                    List<Name> l2 = Arrays.asList(getNewDef().getRequiredPrimaryTypes());
-                    if (!l1.equals(l2)) {
+                    Set<Name> s1 = new HashSet<Name>(Arrays.asList(getOldDef().getRequiredPrimaryTypes()));
+                    Set<Name> s2 = new HashSet<Name>(Arrays.asList(getNewDef().getRequiredPrimaryTypes()));
+                    // normalize sets by removing nt:base (adding/removing nt:base is irrelevant for the diff)
+                    s1.remove(NameConstants.NT_BASE);
+                    s2.remove(NameConstants.NT_BASE);
+                    if (!s1.equals(s2)) {
-                        if (l1.containsAll(l2)) {
+                        if (s1.containsAll(s2)) {
-        int requiredType;
-        boolean isMultiple;
-            requiredType = def.getRequiredType();
-            isMultiple = def.isMultiple();
-                        && requiredType == other.requiredType
-                        && definesResidual == other.definesResidual
-                        && isMultiple == other.isMultiple;
+                        && definesResidual == other.definesResidual;
-            h = 37 * h + (isMultiple ? 11 : 43);
-            h = 37 * h + requiredType;
-        Name[] requiredPrimaryTypes;
-            requiredPrimaryTypes = def.getRequiredPrimaryTypes();
-            if (requiredPrimaryTypes == null || requiredPrimaryTypes.length == 0) {
-                requiredPrimaryTypes = new Name[]{NameConstants.NT_BASE};
-            }
-            Arrays.sort(requiredPrimaryTypes);
-                        && name.equals(other.name)
-                        && Arrays.equals(requiredPrimaryTypes, other.requiredPrimaryTypes);
+                        && name.equals(other.name);
-            for (int i = 0; i < requiredPrimaryTypes.length; i++) {
-                h = 37 * h + requiredPrimaryTypes[i].hashCode();
-            }
