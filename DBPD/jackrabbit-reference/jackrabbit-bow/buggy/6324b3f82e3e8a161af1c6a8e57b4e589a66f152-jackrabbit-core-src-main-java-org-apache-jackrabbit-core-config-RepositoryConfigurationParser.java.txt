JCR-1438: Replace Config classes with factories

Replace JournalConfig with a JournalFactory.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@816237 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.io.FileUtils;
+import org.apache.jackrabbit.core.cluster.ClusterNode;
+import org.apache.jackrabbit.core.journal.AbstractJournal;
+import org.apache.jackrabbit.core.journal.Journal;
+import org.apache.jackrabbit.core.journal.JournalException;
+import org.apache.jackrabbit.core.journal.JournalFactory;
+import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
+import java.io.IOException;
+import java.util.UUID;
+     * Name of the cluster node id file.
+     */
+    private static final String CLUSTER_NODE_ID_FILE = "cluster_node.id";
+
+    /**
-        ClusterConfig cc = parseClusterConfig(root);
+        ClusterConfig cc = parseClusterConfig(root, new File(home));
+     * @param home repository home directory
-    protected ClusterConfig parseClusterConfig(Element parent)
+    protected ClusterConfig parseClusterConfig(Element parent, File home)
-                String id = null;
-
+                // Find the cluster node id
+                String id =
+                    System.getProperty(ClusterNode.SYSTEM_PROPERTY_NODE_ID);
+                } else if (id == null) {
+                    File file = new File(home, CLUSTER_NODE_ID_FILE);
+                    try {
+                        if (file.exists() && file.canRead()) {
+                            id = FileUtils.readFileToString(file);
+                        } else {
+                            id = UUID.randomUUID().toString();
+                            FileUtils.writeStringToFile(file, id);
+                        }
+                    } catch (IOException e) {
+                        throw new ConfigurationException(
+                                "Failed to access cluster node id: " + file, e);
+                    }
-                value = getAttribute(element, SYNC_DELAY_ATTRIBUTE, DEFAULT_SYNC_DELAY);
-                long syncDelay = Long.parseLong(replaceVariables(value));
-                JournalConfig jc = parseJournalConfig(element);
-                return new ClusterConfig(id, syncDelay, jc);
+                long syncDelay = Long.parseLong(replaceVariables(getAttribute(
+                        element, SYNC_DELAY_ATTRIBUTE, DEFAULT_SYNC_DELAY)));
+
+                JournalFactory jf = getJournalFactory(element, home, id);
+                return new ClusterConfig(id, syncDelay, jf);
-     * @return journal configuration, or <code>null</code>
+     * @param home repository home directory
+     * @param id cluster node id
+     * @return journal factory
-    protected JournalConfig parseJournalConfig(Element cluster)
+    protected JournalFactory getJournalFactory(
+            final Element cluster, final File home, final String id)
-
-        return new JournalConfig(
-                parseBeanConfig(cluster, JOURNAL_ELEMENT));
+        return new JournalFactory() {
+            public Journal getJournal(NamespaceResolver resolver)
+                    throws RepositoryException {
+                BeanConfig config = parseBeanConfig(cluster, JOURNAL_ELEMENT);
+                Object object = config.newInstance();
+                if (object instanceof Journal) {
+                    Journal journal = (Journal) object;
+                    if (journal instanceof AbstractJournal) {
+                        ((AbstractJournal) journal).setRepositoryHome(home);
+                    }
+                    try {
+                        journal.init(id, resolver);
+                    } catch (JournalException e) {
+                        // TODO: Should JournalException extend RepositoryException?
+                        throw new RepositoryException(
+                                "Journal initialization failed: " + journal, e);
+                    }
+                    return journal;
+                } else {
+                    throw new RepositoryException(
+                            "Invalid Journal implementation class: "
+                            + config.getClassName());
+                }
+            }
+        };
