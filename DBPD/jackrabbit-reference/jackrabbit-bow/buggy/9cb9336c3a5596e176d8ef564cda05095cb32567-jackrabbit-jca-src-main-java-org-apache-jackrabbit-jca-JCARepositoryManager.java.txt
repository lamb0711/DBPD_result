JCR-2555: Improved reusability of the JCA package

Replace direct jackrabbit-core references with the JCR 2.0 RepositoryFactory mechanism

Also did some Java 5 cleanups

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@923206 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.RepositoryImpl;
-import org.apache.jackrabbit.core.config.RepositoryConfig;
-
+import javax.jcr.Repository;
+import org.apache.commons.io.IOUtils;
+import org.apache.jackrabbit.api.JackrabbitRepository;
+import org.apache.jackrabbit.commons.JcrUtils;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.OutputStream;
-    private final Map references;
+    private final Map<Reference, Reference> references;
-        this.references = new HashMap();
+        this.references = new HashMap<Reference, Reference>();
-    public RepositoryImpl createRepository(String homeDir, String configFile)
+    public Repository createRepository(String homeDir, String configFile)
-        Collection references = this.references.values();
-        Iterator iter = references.iterator();
+        Collection<Reference> references = this.references.values();
+        Iterator<Reference> iter = references.iterator();
-            Reference ref = (Reference) iter.next();
+            Reference ref = iter.next();
-        Reference other = (Reference) references.get(ref);
+        Reference other = references.get(ref);
-        private RepositoryImpl repository;
+        private Repository repository;
-        public RepositoryImpl create()
-                throws RepositoryException {
+        public Repository create() throws RepositoryException {
-                RepositoryConfig config = null;
+                Map<String, String> parameters = new HashMap<String, String>();
+
+                parameters.put("org.apache.jackrabbit.repository.home", homeDir);
-                    ClassLoader cl = Thread.currentThread().getContextClassLoader();
-                    if (cl == null) {
-                        cl = this.getClass().getClassLoader();
-                    }
-
-                    InputStream configInputStream = cl.getResourceAsStream(
-                        configFile.substring(CLASSPATH_CONFIG_PREFIX.length()));
-                    try {
-                        config = RepositoryConfig.create(configInputStream, homeDir);
-                    } finally {
-                        if (configInputStream != null) {
-                            try {
-                                configInputStream.close();
-                            } catch (IOException e) {
-                                // ignore
-                            }
-                        }
-                    }
+                    String source =
+                        configFile.substring(CLASSPATH_CONFIG_PREFIX.length());
+                    File target = new File(homeDir, "repository.xml");
+                    copyConfigFile(source, target);
+                    parameters.put(
+                            "org.apache.jackrabbit.repository.conf",
+                            target.getPath());
-                    config = RepositoryConfig.create(configFile, homeDir);
+                    parameters.put(
+                            "org.apache.jackrabbit.repository.conf",
+                            configFile);
-                repository = RepositoryImpl.create(config);
+
+                repository = JcrUtils.getRepository(parameters);
+        private void copyConfigFile(String source, File target)
+                throws RepositoryException {
+            ClassLoader cl = Thread.currentThread().getContextClassLoader();
+            if (cl == null) {
+                cl = this.getClass().getClassLoader();
+            }
+
+            InputStream input = cl.getResourceAsStream(source);
+            if (input != null) {
+                try {
+                    try {
+                        OutputStream output = new FileOutputStream(target);
+                        try {
+                            IOUtils.copy(input, output);
+                        } finally {
+                            output.close();
+                        }
+                    } finally {
+                        input.close();
+                    }
+                } catch (IOException e) {
+                    throw new RepositoryException(
+                            "Failed to copy configuration to " + target, e);
+                }
+            } else {
+                throw new RepositoryException(
+                        "Repository configuration not found: " + source);
+            }
+        }
+
-            if (repository != null) {
-                repository.shutdown();
+            if (repository instanceof JackrabbitRepository) {
+                ((JackrabbitRepository) repository).shutdown();
-
-
