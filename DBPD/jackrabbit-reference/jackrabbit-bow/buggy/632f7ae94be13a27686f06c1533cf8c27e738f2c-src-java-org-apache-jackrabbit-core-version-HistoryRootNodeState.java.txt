- improved versioning

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@122838 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.version.VersionManager;
+import org.apache.jackrabbit.core.version.InternalVersionHistory;
-import java.util.Iterator;
+import java.util.Iterator;
- * This Class implements...
+ * The history root node state represents the root node of all version histories.
+ * the version histories are dynamically exposed. since there could be very many,
+ * it does not return all the child nodes by the {@link #getChildNodeEntries()}}
+ * method. this implies, that the version storage is not browsable, but the
+ * nodes are nevertheless correctly exposed (this behaviour can be changed, by
+ * modifying the compile-time constant {@link #LIST_ALL_HISTORIES}.
-    private VersionManager vm;
+    /**
+     * flag for listing all histories
+     */
+    private static final boolean LIST_ALL_HISTORIES = true;
-    public HistoryRootNodeState(VersionItemStateProvider vm, String uuid, String parentUUID) {
-        super(vm, uuid, NodeTypeRegistry.NT_UNSTRUCTURED, parentUUID);
-        this.vm = vm.getVersionManager();
+    /**
+     * the version manager
+     */
+    private final VersionManager vm;
-        setDefinitionId(vm.getNodeDefId(VersionManager.NODENAME_HISTORY_ROOT));
+    /**
+     * creates a new history root state
+     * @param stateMgr
+     * @param parentUUID
+     * @param uuid
+     * @throws RepositoryException
+     */
+    protected HistoryRootNodeState(VersionItemStateProvider stateMgr,
+                                   VersionManager vm,
+                                String parentUUID,
+                                String uuid) throws RepositoryException {
+        super(stateMgr, parentUUID, uuid, NodeTypeRegistry.NT_UNSTRUCTURED, new QName[0]);
+        this.vm = vm;
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#hasChildNodeEntry(org.apache.jackrabbit.core.QName)
+     */
-        return vm.hasVersionHistory(name);
+        return vm.hasVersionHistory(name.getLocalName());
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#hasChildNodeEntry(org.apache.jackrabbit.core.QName, int)
+     */
-        return index <= 1 ? vm.hasVersionHistory(name) : false;
+        return index <= 1 ? vm.hasVersionHistory(name.getLocalName()) : false;
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntry(org.apache.jackrabbit.core.QName, int)
+     */
-                InternalVersionHistory hist = vm.getVersionHistory(nodeName);
+                InternalVersionHistory hist = vm.getVersionHistory(nodeName.getLocalName());
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntries()
+     */
-        try {
-            ArrayList list = new ArrayList(vm.getNumVersionHistories());
-            Iterator iter = vm.getVersionHistories();
-            while (iter.hasNext()) {
-                InternalVersionHistory vh = (InternalVersionHistory) iter.next();
-                QName name = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, vh.getId());
-                list.add(new ChildNodeEntry(name, vh.getId(), 1));
+        if (LIST_ALL_HISTORIES) {
+            try {
+                ArrayList list = new ArrayList(vm.getNumVersionHistories());
+                Iterator iter = vm.getVersionHistoryIds();
+                while (iter.hasNext()) {
+                    String id = (String) iter.next();
+                    QName name = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, id);
+                    list.add(new ChildNodeEntry(name, id, 1));
+                }
+                return list;
+            } catch (RepositoryException e) {
+                // ignore
-            return list;
-        } catch (RepositoryException e) {
-            // ignore
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntries(String)
+     */
+    /**
+     * @see org.apache.jackrabbit.core.state.NodeState#getChildNodeEntries(org.apache.jackrabbit.core.QName)
+     */
-
-
