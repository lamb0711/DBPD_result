JCR-97: Improve Checkstyle conformance
    - Various Checkstyle improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@615680 13f79535-47bb-0310-9956-ffa450edef68

-     * @see QueryHandler#createExecutablePreparedQuery(org.apache.jackrabbit.core.SessionImpl, org.apache.jackrabbit.core.ItemManager, org.apache.jackrabbit.core.query.qom.QueryObjectModelTree)
+     * @see QueryHandler#createExecutablePreparedQuery(SessionImpl, ItemManager, QueryObjectModelTree)
-            log.warn("Exception initializing indexing configuration from: " +
-                    indexingConfigPath, e);
+            log.warn("Exception initializing indexing configuration from: "
+                    + indexingConfigPath, e);
-                log.warn("Exception initializing synonym provider: " +
-                        synonymProviderClass, e);
+                log.warn("Exception initializing synonym provider: "
+                        + synonymProviderClass, e);
-                        "Invalid synonymProviderConfigPath: " +
-                        synonymProviderConfigPath);
+                        "Invalid synonymProviderConfigPath: "
+                        + synonymProviderConfigPath);
-                log.warn("Exception initializing spell checker: " +
-                        spellCheckerClass, e);
+                log.warn("Exception initializing spell checker: "
+                        + spellCheckerClass, e);
-            AggregateRule aggregateRules[] = indexingConfig.getAggregateRules();
+            AggregateRule[] aggregateRules = indexingConfig.getAggregateRules();
-                log.warn("Exception while building indexing aggregate for " +
-                        "node with UUID: " + state.getNodeId().getUUID(), e);
+                log.warn("Exception while building indexing aggregate for"
+                        + " node with UUID: " + state.getNodeId().getUUID(), e);
-            AggregateRule aggregateRules[] = indexingConfig.getAggregateRules();
+            AggregateRule[] aggregateRules = indexingConfig.getAggregateRules();
-                log.warn("Unable to get aggregate root for " +
-                        state.getNodeId().getUUID(), e);
+                log.warn("Unable to get aggregate root for "
+                        + state.getNodeId().getUUID(), e);
-        final private CachingMultiIndexReader[] subReaders;
+        private final CachingMultiIndexReader[] subReaders;
-            IndexReader readers[] = new IndexReader[subReaders.length];
+            IndexReader[] readers = new IndexReader[subReaders.length];
-                log.warn("Invalid value for excerptProviderClass, {} does " +
-                        "not implement ExcerptProvider interface.", className);
+                log.warn("Invalid value for excerptProviderClass, {} does "
+                        + "not implement ExcerptProvider interface.", className);
-            log.warn("Invalid value for excerptProviderClass, class {} not " +
-                    "found.", className);
+            log.warn("Invalid value for excerptProviderClass, class {} not found.",
+                    className);
-                log.warn("Invalid value for indexingConfigurationClass, {} " +
-                        "does not implement IndexingConfiguration interface.",
+                log.warn("Invalid value for indexingConfigurationClass, {} "
+                        + "does not implement IndexingConfiguration interface.",
-            log.warn("Invalid value for indexingConfigurationClass, class {} " +
-                    "not found.", className);
+            log.warn("Invalid value for indexingConfigurationClass, class {} not found.",
+                    className);
-                log.warn("Invalid value for synonymProviderClass, {} " +
-                        "does not implement SynonymProvider interface.",
+                log.warn("Invalid value for synonymProviderClass, {} "
+                        + "does not implement SynonymProvider interface.",
-            log.warn("Invalid value for synonymProviderClass, class {} " +
-                    "not found.", className);
+            log.warn("Invalid value for synonymProviderClass, class {} not found.",
+                    className);
-        return synonymProviderClass != null ?
-                synonymProviderClass.getName() : null;
+        if (synonymProviderClass != null) {
+            return synonymProviderClass.getName();
+        } else {
+            return null;
+        }
-                log.warn("Invalid value for spellCheckerClass, {} " +
-                        "does not implement SpellChecker interface.",
+                log.warn("Invalid value for spellCheckerClass, {} "
+                        + "does not implement SpellChecker interface.",
-            log.warn("Invalid value for spellCheckerClass, class {} " +
-                    "not found.", className);
+            log.warn("Invalid value for spellCheckerClass,"
+                    + " class {} not found.", className);
-        return spellCheckerClass != null ?
-                spellCheckerClass.getName() : null;
+        if (spellCheckerClass != null) {
+            return spellCheckerClass.getName();
+        } else {
+            return null;
+        }
