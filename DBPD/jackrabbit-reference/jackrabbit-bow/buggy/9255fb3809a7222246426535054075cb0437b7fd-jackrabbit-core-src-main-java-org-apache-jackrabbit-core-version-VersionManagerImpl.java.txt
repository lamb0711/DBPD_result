JCR-2140: Configurations and Baselines


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@795842 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.version.ActivityViolationException;
-import javax.jcr.version.ActivityViolationException;
-import org.apache.jackrabbit.core.id.ItemId;
-import org.apache.jackrabbit.core.id.NodeId;
-import org.apache.jackrabbit.core.id.PropertyId;
+import org.apache.jackrabbit.core.id.ItemId;
+import org.apache.jackrabbit.core.id.NodeId;
+import org.apache.jackrabbit.core.id.PropertyId;
+import org.apache.jackrabbit.core.state.NodeReferences;
-import org.apache.jackrabbit.core.state.NodeReferences;
+    /**
+     * The path to the configurations storage: /jcr:system/jcr:versionStorage/jcr:configurations
+     */
+    private static final Path CONFIGURATIONS_PATH;
+
+
+            builder = new PathBuilder();
+            builder.addRoot();
+            builder.addLast(NameConstants.JCR_SYSTEM);
+            builder.addLast(NameConstants.JCR_VERSIONSTORAGE);
+            builder.addLast(NameConstants.JCR_CONFIGURATIONS);
+            CONFIGURATIONS_PATH = builder.getPath();
+    @SuppressWarnings("unchecked")
-     * Creates a new version manager
+     * Creates a new internal version manager
+     * @param pMgr underlying persistence manager
+     * @param fs workspace file system
+     * @param ntReg node type registry
+     * @param obsMgr observation manager
+     * @param rootParentId node id of the version storage parent (i.e. jcr:system)
+     * @param storageId node id of the version storage (i.e. jcr:versionStorage)
+     * @param activitiesId node id of the activities storage (i.e. jcr:activities)
+     * @param configurationsId node if of the configurations storage (i.e. jcr:configurations)
+     * @param cacheFactory item state cache factory
+     * @param ismLocking workspace item state locking
+     * @throws RepositoryException if an error occurs
+                              NodeId configurationsId,
+            // check for jcr:configurations
+            if (!pMgr.exists(configurationsId)) {
+                NodeState root = pMgr.createNew(configurationsId);
+                root.setParentId(storageId);
+                root.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_VERSIONSTORAGE).getApplicableChildNodeDef(
+                        NameConstants.JCR_CONFIGURATIONS, NameConstants.REP_CONFIGURATIONS, ntReg).getId());
+                root.setNodeTypeName(NameConstants.REP_CONFIGURATIONS);
+                PropertyState pt = pMgr.createNew(new PropertyId(activitiesId, NameConstants.JCR_PRIMARYTYPE));
+                pt.setDefinitionId(ntReg.getEffectiveNodeType(NameConstants.REP_CONFIGURATIONS).getApplicablePropertyDef(
+                        NameConstants.JCR_PRIMARYTYPE, PropertyType.NAME, false).getId());
+                pt.setMultiValued(false);
+                pt.setType(PropertyType.NAME);
+                pt.setValues(new InternalValue[]{InternalValue.create(NameConstants.REP_CONFIGURATIONS)});
+                root.addPropertyName(pt.getName());
+
+                // add activities as child
+                NodeState historyState = pMgr.load(storageId);
+                historyState.addChildNodeEntry(NameConstants.JCR_CONFIGURATIONS, configurationsId);
+
+                ChangeLog cl = new ChangeLog();
+                cl.added(root);
+                cl.added(pt);
+                cl.modified(historyState);
+                pMgr.store(cl);
+            }
+
+            nodeState = (NodeState) stateMgr.getItemState(configurationsId);
+            configurationsRoot =  new NodeStateEx(stateMgr, ntReg, nodeState, NameConstants.JCR_CONFIGURATIONS);
+
+     */
+    public InternalConfiguration createConfiguration(Session session,
+                                                     final NodeId rootId,
+                                                     final InternalBaseline baseline)
+            throws RepositoryException {
+        NodeStateEx state = (NodeStateEx)
+                escFactory.doSourced((SessionImpl) session, new SourcedTarget() {
+            public Object run() throws RepositoryException {
+                return internalCreateConfiguration(rootId, baseline);
+            }
+        });
+        return new InternalConfigurationImpl(this, state);
+    }
+
+    /**
+     * {@inheritDoc}
