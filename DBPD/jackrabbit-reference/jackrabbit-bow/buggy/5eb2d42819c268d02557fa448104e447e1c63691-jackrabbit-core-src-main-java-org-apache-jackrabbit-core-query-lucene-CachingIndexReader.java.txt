JSR 283: Shareable nodes support in query

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@763188 13f79535-47bb-0310-9956-ffa450edef68

+     * BitSet where bits that correspond to document numbers are set for
+     * shareable nodes.
+     */
+    private final BitSet shareableNodes;
+
+    /**
+        this.shareableNodes = new BitSet();
+        TermDocs tDocs = delegatee.termDocs(
+                new Term(FieldNames.SHAREABLE_NODE, ""));
+        try {
+            while (tDocs.next()) {
+                shareableNodes.set(tDocs.doc());
+            }
+        } finally {
+            tDocs.close();
+        }
-            String parentUUID = doc.get(FieldNames.PARENT);
-            if (parentUUID == null || parentUUID.length() == 0) {
+            String[] parentUUIDs = doc.getValues(FieldNames.PARENT);
+            if (parentUUIDs.length == 0 || parentUUIDs[0].length() == 0) {
+                // root node
-                // only create a DocId from document number if there is no
-                // existing DocId
-                if (!existing) {
-                    Term id = new Term(FieldNames.UUID, parentUUID);
-                    TermDocs docs = termDocs(id);
-                    try {
-                        while (docs.next()) {
-                            if (!deleted.get(docs.doc())) {
-                                parent = DocId.create(docs.doc());
-                                break;
+                if (shareableNodes.get(n)) {
+                    parent = DocId.create(parentUUIDs);
+                } else {
+                    if (!existing) {
+                        Term id = new Term(FieldNames.UUID, parentUUIDs[0]);
+                        TermDocs docs = termDocs(id);
+                        try {
+                            while (docs.next()) {
+                                if (!deleted.get(docs.doc())) {
+                                    parent = DocId.create(docs.doc());
+                                    break;
+                                }
+                        } finally {
+                            docs.close();
-                    } finally {
-                        docs.close();
-                }
-
-                // if still null, then parent is not in this index, or existing
-                // DocId was invalid. thus, only allowed to create DocId from uuid
-                if (parent == null) {
-                    parent = DocId.create(parentUUID);
+                    // if still null, then parent is not in this index, or existing
+                    // DocId was invalid. thus, only allowed to create DocId from uuid
+                    if (parent == null) {
+                        parent = DocId.create(parentUUIDs[0]);
+                    }
-                        NodeInfo info = new NodeInfo(tDocs.doc(), uuid);
-                        docs.put(new Integer(info.docId), info);
+                        int doc = tDocs.doc();
+                        // skip shareable nodes
+                        if (!shareableNodes.get(doc)) {
+                            NodeInfo info = new NodeInfo(doc, uuid);
+                            docs.put(new Integer(doc), info);
+                        }
-                        info.parent = uuid;
-                        docs.remove(docId);
-                        docs.put(info.uuid, info);
+                        if (info == null) {
+                            // shareable node, see above
+                        } else {
+                            info.parent = uuid;
+                            docs.remove(docId);
+                            docs.put(info.uuid, info);
+                        }
+                } else if (shareableNodes.get(info.docId)) {
+                    Document doc = reader.document(info.docId, FieldSelectors.UUID_AND_PARENT);
+                    parents[info.docId] = DocId.create(doc.getValues(FieldNames.PARENT));
-    private static class NodeInfo {
+    private final static class NodeInfo {
