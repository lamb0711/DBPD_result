JCR-2790: jcr:like on node name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1030038 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.Query;
+import org.apache.lucene.search.*;
+     * Name constant for fn:name()
+     */
+    private static final Name FN_NAME = NameFactoryImpl.getInstance().create(SearchManager.NS_FN_URI, "name()");
+
+    /**
-        if (propertyName.getNamespaceURI().equals(SearchManager.NS_FN_URI)
-                && propertyName.getLocalName().equals("name()")) {
+        if (propertyName.equals(FN_NAME)) {
-            if (node.getOperation() != QueryConstants.OPERATION_EQ_VALUE
-                    && node.getOperation() != QueryConstants.OPERATION_EQ_GENERAL) {
-                exceptions.add(new InvalidQueryException("Name function can "
-                        + "only be used in conjunction with an equals operator"));
-                return data;
-            }
-            // check if string literal is a valid XML Name
-            if (XMLChar.isValidName(node.getStringValue())) {
-                // parse string literal as JCR Name
-                try {
-                    Name n = session.getQName(ISO9075.decode(node.getStringValue()));
-                    query = new NameQuery(n, indexFormatVersion, nsMappings);
-                } catch (NameException e) {
-                    exceptions.add(e);
-                    return data;
-                } catch (NamespaceException e) {
-                    exceptions.add(e);
-                    return data;
+            if (node.getOperation() == QueryConstants.OPERATION_EQ_VALUE
+                    || node.getOperation() == QueryConstants.OPERATION_EQ_GENERAL) {
+                // check if string literal is a valid XML Name
+                if (XMLChar.isValidName(node.getStringValue())) {
+                    // parse string literal as JCR Name
+                    try {
+                        Name n = session.getQName(ISO9075.decode(node.getStringValue()));
+                        query = new NameQuery(n, indexFormatVersion, nsMappings);
+                    } catch (NameException e) {
+                        exceptions.add(e);
+                        return data;
+                    } catch (NamespaceException e) {
+                        exceptions.add(e);
+                        return data;
+                    }
+                } else {
+                    // will never match -> create dummy query
+                    query = new BooleanQuery();
+                }
+            } else if (node.getOperation() == QueryConstants.OPERATION_LIKE) {
+                // the like operation always has one string value.
+                // no coercing, see above
+                if (stringValues[0].equals("%")) {
+                    query = new org.apache.lucene.search.MatchAllDocsQuery();
+                } else {
+                    query = new WildcardNameQuery(stringValues[0], 
+                            transform[0], session, nsMappings);
-                // will never match -> create dummy query
-                query = new BooleanQuery();
+                exceptions.add(new InvalidQueryException("Name function can "
+                        + "only be used in conjunction with the following operators: equals, like"));
+                return data;
