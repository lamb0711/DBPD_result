work in progress

- move to commons-httpclient 3.0
- adjust to latest changes in jcr-server (JCR-544)
- simplify creation of info objects
- various minor improvements




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@448587 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.httpclient.auth.AuthScope;
+import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
+import org.apache.commons.collections.map.LRUMap;
-import org.apache.jackrabbit.webdav.jcr.version.report.LocateByUuidReport;
-import org.apache.jackrabbit.name.AbstractNamespaceResolver;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.MalformedPathException;
-import org.apache.jackrabbit.name.PathFormat;
-import org.apache.jackrabbit.BaseException;
-import java.util.HashMap;
+import java.util.Collections;
-public class RepositoryServiceImpl extends AbstractNamespaceResolver implements URIResolver, RepositoryService, DavConstants {
+// TODO: improve handling of HttpClient
+// TODO: TO-BE-FIXED. caches don't get adjusted upon removal/move of items
+public class RepositoryServiceImpl implements RepositoryService, DavConstants {
-    private final Document domFactory;
-
-    private final HostConfiguration hostConfig;
-    private final URI repositoryUri;
-
-    // URI/ID resolution
-    private final Map uriCache = new HashMap();
-    private final Map idCache = new HashMap();
-
-    // namespace resolver
-    private Properties prefixToURI = new Properties();
-    private Properties uriToPrefix = new Properties();
+    private final Document domFactory;
+    private final NamespaceResolverImpl nsResolver;
+    private final URIResolverImpl uriResolver;
+
+    private final HostConfiguration hostConfig;
+    // remember most frequently used http clients
+    private final Map clientCache = Collections.synchronizedMap(new LRUMap());
-            throw new RepositoryException("Invalid repository uri.");
+            throw new RepositoryException("Invalid repository uri '" + uri + "'.");
-        if (idFactory == null) {
-            throw new RepositoryException("IdFactory must not be null.");
+        if (idFactory == null || valueFactory == null) {
+            throw new RepositoryException("IdFactory and ValueFactory may not be null.");
+            URI repositoryUri = new URI((uri.endsWith("/")) ? uri : uri+"/", true);
-            if (!uri.endsWith("/")) {
-                uri += "/";
-            }
-            repositoryUri = new URI(uri);
+
+            nsResolver = new NamespaceResolverImpl();
+            uriResolver = new URIResolverImpl(repositoryUri, this, nsResolver, domFactory);
+
-        HttpClient client = new HttpClient();
-        client.setHostConfiguration(hostConfig);
-        UsernamePasswordCredentials creds;
-        if (credentials == null) {
-            creds = new UsernamePasswordCredentials(null, null);
-        } else if (credentials instanceof SimpleCredentials) {
-            SimpleCredentials sCred = (SimpleCredentials) credentials;
-            creds = new UsernamePasswordCredentials(sCred.getUserID(), 
-                    String.valueOf(sCred.getPassword()));
+        if (clientCache.containsKey(credentials)) {
+            return (HttpClient) clientCache.get(credentials);
-            // TODO properly build http client credentials
-            creds = new UsernamePasswordCredentials(credentials.toString());
+            HttpClient client = new HttpClient();
+            client.setHostConfiguration(hostConfig);
+            UsernamePasswordCredentials creds;
+            if (credentials == null) {
+                // NOTE: null credentials only work if 'missing-auth-mapping' param is set on the server
+                creds = null;
+            } else if (credentials instanceof SimpleCredentials) {
+                SimpleCredentials sCred = (SimpleCredentials) credentials;
+                creds = new UsernamePasswordCredentials(sCred.getUserID(),
+                    String.valueOf(sCred.getPassword()));
+            } else {
+                creds = new UsernamePasswordCredentials(credentials.toString());
+            }
+            HttpState httpState = client.getState();
+
+            // set authentication scope and credentials
+            AuthScope authscope = new AuthScope(hostConfig.getHost(), hostConfig.getPort());
+            httpState.setCredentials(authscope, creds);
+
+            // always send authentication not waiting for 401
+            client.getParams().setAuthenticationPreemptive(true);
+
+            clientCache.put(credentials, client);
+            return client;
-        HttpState httpState = client.getState();
-        httpState.setCredentials(null, hostConfig.getHost(), creds);
-        return client;
-    private HttpClient getClient(SessionInfo sessionInfo) {
+    HttpClient getClient(SessionInfo sessionInfo) {
+        } else {
+            log.warn("Unexpected SessionInfo implementation. Using 'null' credentials for connection.");
-    private String getRepositoryUri() {
-        return repositoryUri.getEscapedURI();
-    }
-
-    private String getWorkspaceUri(String workspaceName) {
-        String workspaceUri = getRepositoryUri();
-        if (workspaceName != null) {
-            workspaceUri += Text.escape(workspaceName);
-        }
-        return workspaceUri;
-    }
-
-    private String getRootItemUri(SessionInfo sessionInfo) {
-        String rootUri = getWorkspaceUri(sessionInfo.getWorkspaceName()) + "/";
-        return rootUri;
-    }
-
-    private String getItemUri(String workspaceName, ItemId itemId, SessionInfo sessionInfo) throws RepositoryException {
-        String uri = getWorkspaceUri(workspaceName);
-        String uuid = itemId.getUUID();
-        if (uuid != null) {
-            if (uriCache.containsKey(uuid)) {
-                uri = (String) uriCache.get(uuid);
-            } else {
-                // retrieve info related to uuid using the locate-by-uuid report
-                ReportInfo rInfo = new ReportInfo(LocateByUuidReport.LOCATE_BY_UUID_REPORT);
-                rInfo.setContentElement(DomUtil.hrefToXml(uuid, domFactory));
-                try {
-                    ReportMethod rm = new ReportMethod(uri, rInfo);
-                    getClient(sessionInfo).executeMethod(rm);
-                    MultiStatus ms = rm.getResponseBodyAsMultiStatus();
-                    uri = ms.getResponses()[0].getHref();
-                    uriCache.put(uuid, uri);
-                } catch (IOException e) {
-                    throw new RepositoryException(e.getMessage());
-                } catch (DavException e) {
-                    throw ExceptionConverter.generate(e);
-                }
-            }
-        }
-        Path relativePath = itemId.getRelativePath();
-        if (relativePath != null) {
-            try {
-                String jcrPath = PathFormat.format(relativePath, this);
-                uri += Text.escapePath(jcrPath);
-            } catch (NoPrefixDeclaredException e) {
-                throw new RepositoryException(e);
-            }
-        }
-        if (itemId.denotesNode() && !uri.endsWith("/")) {
-            uri += "/";
-        }
-        return uri;
-    }
-
-    private String getItemUri(ItemId itemId, SessionInfo sessionInfo) throws RepositoryException {
-        return getItemUri(sessionInfo.getWorkspaceName(), itemId, sessionInfo);
-    }
-
-    private String getItemUri(NodeId parentId, QName childName, SessionInfo sessionInfo) throws RepositoryException {
-        String parentUri = getItemUri(parentId, sessionInfo);
-        try {
-            return parentUri + NameFormat.format(childName, getNamespaceResolver());
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e);
-        }
-    }
-
+    private URIResolver getURIResolver() {
+        return uriResolver;
+    }
+
+    private NamespaceResolver getNamespaceResolver() {
+        return nsResolver;
+    }
+
+    private String getRepositoryUri() {
+        return uriResolver.getRepositoryUri();
+    }
+
+    private String getWorkspaceUri(String workspaceName) {
+        return uriResolver.getWorkspaceUri(workspaceName);
+    }
+
+    private String getRootItemUri(String workspaceName) {
+        return uriResolver.getRootItemUri(workspaceName);
+    }
+
+    private String getItemUri(ItemId itemId, SessionInfo sessionInfo) throws RepositoryException {
+        return uriResolver.getItemUri(itemId, sessionInfo.getWorkspaceName(), sessionInfo);
+    }
+
+    private String getItemUri(ItemId itemId, String workspaceName, SessionInfo sessionInfo) throws RepositoryException {
+        return uriResolver.getItemUri(itemId, workspaceName, sessionInfo);
+    }
+
+    private String getItemUri(NodeId parentId, QName childName, SessionInfo sessionInfo) throws RepositoryException {
+        String parentUri = uriResolver.getItemUri(parentId, sessionInfo.getWorkspaceName(), sessionInfo);
+        try {
+            return parentUri + NameFormat.format(childName, getNamespaceResolver());
+        } catch (NoPrefixDeclaredException e) {
+            throw new RepositoryException(e);
+        }
+    }
+
+    private NodeId getParentId(DavPropertySet propSet, SessionInfo sessionInfo)
+        throws RepositoryException {
+        NodeId parentId = null;
+        if (propSet.contains(ItemResourceConstants.JCR_PARENT)) {
+            HrefProperty parentProp = new HrefProperty(propSet.get(ItemResourceConstants.JCR_PARENT));
+            String parentHref = parentProp.getHrefs().get(0).toString();
+            if (parentHref != null && parentHref.length() > 0) {
+                parentId = getURIResolver().getNodeId(parentHref, sessionInfo);
+            }
+        }
+        return parentId;
+    }
+
-            method = new ReportMethod(repositoryUri.getEscapedPath(), info);
+            method = new ReportMethod(getRepositoryUri(), info);
+
-                        log.error("Invalid descriptor key / descriptor pair: " + key + " -> " + descriptor);
+                        log.error("Invalid descriptor key / value pair: " + key + " -> " + descriptor);
-        String rootUri = getRootItemUri(sessionInfo);
-        if (idCache.containsKey(rootUri)) {
-            return (NodeId) idCache.get(rootUri);
-        } else {
-            NodeId rootId = retrieveNodeId(rootUri, null, sessionInfo);
-            return rootId;
-        }
+        String rootUri = getRootItemUri(sessionInfo.getWorkspaceName());
+        return getURIResolver().getNodeId(rootUri, sessionInfo);
-
-            NodeInfo nInfo = new NodeInfoImpl(nodeResponse, childResponses, getURIResolver(), sessionInfo);
+
+            DavPropertySet propSet = nodeResponse.getProperties(DavServletResponse.SC_OK);
+            NodeId parentId = getParentId(propSet, sessionInfo);
+            NodeId id = uriResolver.buildNodeId(parentId, nodeResponse, sessionInfo.getWorkspaceName());
+
+            NodeInfoImpl nInfo = new NodeInfoImpl(id, parentId, propSet, getNamespaceResolver());
+
+            for (Iterator it = childResponses.iterator(); it.hasNext();) {
+                MultiStatusResponse resp = (MultiStatusResponse) it.next();
+                DavPropertySet childProps = resp.getProperties(DavServletResponse.SC_OK);
+                if (childProps.contains(DavPropertyName.RESOURCETYPE) &&
+                    childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
+                    // any other resource type than default (empty) is represented by a node item
+                    NodeId childId = uriResolver.buildNodeId(id, resp, sessionInfo.getWorkspaceName());
+                    nInfo.addChildId(childId);
+                } else {
+                    PropertyId childId = uriResolver.buildPropertyId(id, resp, sessionInfo.getWorkspaceName());
+                    nInfo.addChildId(childId);
+                }
+            }
+
+            if (propSet.contains(ItemResourceConstants.JCR_REFERENCES)) {
+                HrefProperty refProp = new HrefProperty(propSet.get(ItemResourceConstants.JCR_REFERENCES));
+                Iterator hrefIter = refProp.getHrefs().iterator();
+                while(hrefIter.hasNext()) {
+                    String propertyHref = hrefIter.next().toString();
+                    PropertyId propertyId = getURIResolver().getPropertyId(propertyHref, sessionInfo);
+                    nInfo.addReference(propertyId);
+                }
+            }
+
-                method.releaseConnection();
+                //method.releaseConnection();
-            PropertyInfo pInfo = new PropertyInfoImpl(responses[0],
-                getURIResolver(), getNamespaceResolver(), sessionInfo, valueFactory);
+
+            DavPropertySet propSet = responses[0].getProperties(DavServletResponse.SC_OK);
+            NodeId parentId = getParentId(propSet, sessionInfo);
+            PropertyId id = uriResolver.buildPropertyId(parentId, responses[0], sessionInfo.getWorkspaceName());
+
+            PropertyInfo pInfo = new PropertyInfoImpl(id, parentId, propSet, getNamespaceResolver(), valueFactory);
-            method.setRequestBody(xmlStream);
+            method.setRequestEntity(new InputStreamRequestEntity(xmlStream, "text/xml"));
-            String uri = getItemUri(srcWorkspaceName, srcNodeId, sessionInfo);
+            String uri = getItemUri(srcNodeId, srcWorkspaceName, sessionInfo);
-                        prefixToURI.setProperty(prefix, uri);
-                        uriToPrefix.setProperty(uri, prefix);
+                        nsResolver.add(prefix, uri);
-        Properties namespaces = new Properties();
-        namespaces.putAll(prefixToURI);
+        Properties namespaces = nsResolver.getNamespaces();
+        // add new pair that needs to be registered.
+
-        prefixToURI.setProperty(prefix, uri);
-        uriToPrefix.setProperty(uri, prefix);
+        nsResolver.add(prefix, uri);
-        String prefix = uriToPrefix.getProperty(uri);
-        Properties namespaces = new Properties();
-        namespaces.putAll(prefixToURI);
+        String prefix = nsResolver.getPrefix(uri);
+        Properties namespaces = nsResolver.getNamespaces();
+        // remove pair that needs to be unregistered
+
-        prefixToURI.remove(prefix);
-        uriToPrefix.remove(uri);
+        nsResolver.remove(prefix, uri);
-    //--------------------------------------------------< NamespaceResolver >---
-    private NamespaceResolver getNamespaceResolver() {
-        return this;
-    }
-
-    public String getURI(String prefix) throws NamespaceException {
-        String uri = (String) prefixToURI.get(prefix);
-        if (uri == null) {
-            throw new NamespaceException(prefix + ": is not a registered namespace prefix.");
-        }
-        return uri;
-    }
-
-    public String getPrefix(String uri) throws NamespaceException {
-        String prefix = (String) uriToPrefix.get(uri);
-        if (prefix == null) {
-            throw new NamespaceException(uri
-                + ": is not a registered namespace uri.");
-        }
-        return prefix;
-    }
-
-    //-------------------------------------------------------< URI resolver >---
-
-    private URIResolver getURIResolver() {
-        return this;
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public Path getQPath(String uri, SessionInfo sessionInfo) throws RepositoryException {
-        String repoUri = getRepositoryUri();
-        String wspUri = getWorkspaceUri(sessionInfo.getWorkspaceName());
-        String jcrPath;
-        if (uri.startsWith(wspUri)) {
-            jcrPath = uri.substring(wspUri.length());
-        } else if (uri.startsWith(repoUri)) {
-            jcrPath = uri.substring(repoUri.length());
-            // then cut workspace name
-            jcrPath = jcrPath.substring(jcrPath.indexOf('/', 1));
-        } else {
-            // todo: probably rather an error?
-            jcrPath = uri;
-        }
-        try {
-            return PathFormat.parse(jcrPath, this);
-        } catch (MalformedPathException e) {
-            throw new RepositoryException();
-        }
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public NodeId getNodeId(NodeId parentId, MultiStatusResponse response) throws RepositoryException {
-        // build the id
-        NodeId nodeId;
-        DavPropertySet propSet = response.getProperties(DavServletResponse.SC_OK);
-        String nodeURI = response.getHref();
-        if (propSet.contains(ItemResourceConstants.JCR_UUID)) {
-            String uuid = propSet.get(ItemResourceConstants.JCR_UUID).getValue().toString();
-            // make sure the mapping uuid -> uri is cached
-            uriCache.put(uuid, nodeURI);
-            nodeId = idFactory.createNodeId(uuid);
-        } else {
-            DavProperty nameProp = propSet.get(ItemResourceConstants.JCR_NAME);
-            if (nameProp != null && nameProp.getValue() != null) {
-                // not root node. Note that 'unespacing' is not required since
-                // the jcr:name property does not provide the value in escaped form.
-                String jcrName = nameProp.getValue().toString();
-                int index = org.apache.jackrabbit.name.Path.INDEX_UNDEFINED;
-                DavProperty indexProp = propSet.get(ItemResourceConstants.JCR_INDEX);
-                if (indexProp != null && indexProp.getValue() != null) {
-                    index = Integer.parseInt(indexProp.getValue().toString());
-                }
-                try {
-                    QName qName = NameFormat.parse(jcrName, getNamespaceResolver());
-                    nodeId = idFactory.createNodeId(parentId, Path.create(qName, index));
-                } catch (NameException e) {
-                    throw new RepositoryException(e);
-                }
-            } else {
-                // special case: root node
-                nodeId = idFactory.createNodeId((String)null, Path.ROOT);
-            }
-        }
-
-        // mapping href to nodeId
-        idCache.put(nodeURI, nodeId);
-        return nodeId;
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public NodeId getNodeId(String uri, SessionInfo sessionInfo) throws RepositoryException {
-        if (idCache.containsKey(uri)) {
-            // id has been accessed before and
-            return (NodeId) idCache.get(uri);
-        } else {
-            // retrieve parentId from cache or by recursive calls
-            NodeId parentId;
-            if (getRootItemUri(sessionInfo).equals(uri)) {
-                parentId = null;
-            } else {
-                String parentUri = Text.getRelativeParent(uri, 1, true);
-                if (!parentUri.endsWith("/")) {
-                    parentUri += "/";
-                }
-                parentId = getNodeId(parentUri, sessionInfo);
-            }
-            NodeId id = retrieveNodeId(uri, parentId, sessionInfo);
-            idCache.put(uri, id);
-            return id;
-        }
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public PropertyId getPropertyId(NodeId parentId, MultiStatusResponse response) throws RepositoryException {
-        try {
-            DavPropertySet propSet = response.getProperties(DavServletResponse.SC_OK);
-            QName name = NameFormat.parse(propSet.get(ItemResourceConstants.JCR_NAME).getValue().toString(), getNamespaceResolver());
-            PropertyId propertyId = idFactory.createPropertyId(parentId, name);
-            return propertyId;
-        } catch (BaseException e) {
-            throw new RepositoryException(e);
-        }
-    }
-
-    /**
-     * @inheritDoc
-     */
-    public PropertyId getPropertyId(String uri, SessionInfo sessionInfo) throws RepositoryException {
-        String propertyUri = uri;
-        // separate parent uri and property JCRName
-        String parentUri = Text.getRelativeParent(propertyUri, 1, true);
-        // make sure propName is unescaped
-        String propName = Text.unescape(Text.getName(propertyUri));
-        // retrieve parent node id
-        NodeId parentId = getNodeId(parentUri, sessionInfo);
-        // build property id
-        try {
-            PropertyId propertyId = idFactory.createPropertyId(parentId, NameFormat.parse(propName, getNamespaceResolver()));
-            return propertyId;
-        } catch (NameException e) {
-            throw new RepositoryException(e);
-        }
-    }
-
-    private NodeId retrieveNodeId(String uri, NodeId parentId, SessionInfo sessionInfo) throws RepositoryException {
-        DavPropertyNameSet nameSet = new DavPropertyNameSet();
-        nameSet.add(ItemResourceConstants.JCR_UUID);
-        nameSet.add(ItemResourceConstants.JCR_NAME);
-        nameSet.add(ItemResourceConstants.JCR_INDEX);
-        DavMethodBase method = null;
-        try {
-            method = new PropFindMethod(uri, nameSet, DEPTH_0);
-            initMethod(method, sessionInfo, false);
-            getClient(sessionInfo).executeMethod(method);
-            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
-            if (responses.length != 1) {
-                throw new ItemNotFoundException("Unable to retrieve the node with id " + uri);
-            }
-            return getNodeId(parentId, responses[0]);
-        } catch (IOException e) {
-            throw new RepositoryException(e);
-        } catch (DavException e) {
-            throw ExceptionConverter.generate(e);
-        } finally {
-            if (method != null) {
-                method.releaseConnection();
-            }
-        }
-    }
-
-                String uri = getRootItemUri(sessionInfo);
+                String uri = getRootItemUri(sessionInfo.getWorkspaceName());
-                String uri = getRootItemUri(sessionInfo);
+                String uri = getRootItemUri(sessionInfo.getWorkspaceName());
