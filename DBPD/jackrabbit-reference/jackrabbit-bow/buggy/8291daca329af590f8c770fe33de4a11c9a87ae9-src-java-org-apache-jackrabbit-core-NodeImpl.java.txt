re-implementing Workspace methods clone, copy, importXML [work in progress...]
plus various minor fixes and cosmetical changes



git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158927 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * Computes the values of well-known system (i.e. protected) properties.
+     * todo: duplicate code in WorkspaceImporter: consolidate and delegate to NodeTypeInstanceHandler
+     *
+     * @param name
+     * @param def
+     * @return
+     * @throws RepositoryException
+     */
-        // compute/apply system generated values
+        // compute system generated values
-                genValues = new InternalValue[]{InternalValue.create(((NodeState) state).getUUID())};
+                genValues = new InternalValue[]{InternalValue.create(thisState.getUUID())};
-	todo consolidate version history creation code (currently in NodeImpl.addMixin & ItemImpl.initVersionHistories
+	todo consolidate version history creation code (currently in ItemImpl.initVersionHistories)
-            // nt:mimeResource node type
+            // nt:resource node type
-            // nt:hierarchyNode node type
+            // nt:version node type
-            InternalValue[] genValues = computeSystemGeneratedPropertyValues(name, def);
+            InternalValue[] genValues =
+                    computeSystemGeneratedPropertyValues(name, def);
+            InternalValue[] defValues = def.unwrap().getDefaultValues();
-            } else if (def.getDefaultValues() != null) {
-                Value[] vals = def.getDefaultValues();
-                if (vals.length > 0) {
-                    int length = (def.isMultiple() ? vals.length : 1);
-                    InternalValue[] defVals = new InternalValue[length];
-                    for (int i = 0; i < length; i++) {
-                        defVals[i] = InternalValue.create(vals[i], session.getNamespaceResolver());
-                    }
-                    propState.setValues(defVals);
-                }
+            } else if (defValues != null) {
+                propState.setValues(defValues);
-    protected EffectiveNodeType getEffectiveNodeType() throws RepositoryException {
+    public EffectiveNodeType getEffectiveNodeType() throws RepositoryException {
-     * this method also filters out the references that appear to non-existent
+     * this method also filters out the references that appear to be non-existent
