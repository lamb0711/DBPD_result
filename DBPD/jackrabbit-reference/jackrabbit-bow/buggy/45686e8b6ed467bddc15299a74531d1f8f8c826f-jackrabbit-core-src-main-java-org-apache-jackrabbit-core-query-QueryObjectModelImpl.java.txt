JCR-2715: Improved join query performance

Fix all remaining TCK test failures with the new QOM/SQL2 implementation
and enable it for all QOM/SQL2 queries

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1039888 13f79535-47bb-0310-9956-ffa450edef68

-import static javax.jcr.query.qom.QueryObjectModelConstants.JCR_JOIN_TYPE_INNER;
-
-import javax.jcr.query.qom.EquiJoinCondition;
-import javax.jcr.query.qom.Join;
-import javax.jcr.query.qom.QueryObjectModelConstants;
+import org.apache.jackrabbit.core.query.lucene.LuceneQueryFactory;
+import org.apache.jackrabbit.core.query.lucene.SearchIndex;
-import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.query.qom.BindVariableValueImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.DefaultTraversingQOMTreeVisitor;
+    /** Bind variables */
+    private final Map<String, Value> variables = new HashMap<String, Value>();
+
+    private LuceneQueryFactory lqf;
+
-        this.query = handler.createExecutableQuery(sessionContext, qomTree);
+
+        try {
+            qomTree.accept(new DefaultTraversingQOMTreeVisitor() {
+                @Override
+                public Object visit(BindVariableValueImpl node, Object data) {
+                    variables.put(node.getBindVariableName(), null);
+                    return data;
+                }
+            }, null);
+        } catch (Exception ignore) {
+        }
+        this.lqf = new LuceneQueryFactory(
+                sessionContext.getSessionImpl(), (SearchIndex) handler,
+                variables);
-        Source source = getSource();
-        if (source instanceof Join) {
-            Join join = (Join) source;
-            if (JCR_JOIN_TYPE_INNER.equals(join.getJoinType())
-                    && join.getJoinCondition() instanceof EquiJoinCondition) {
-                QueryEngine engine =
-                    new QueryEngine(sessionContext.getSessionImpl(), query.getBindVariables());
-                return engine.execute(
-                        getColumns(), getSource(), getConstraint(),
-                        getOrderings(), offset, limit);
-            }
+        QueryEngine engine = new QueryEngine(
+                sessionContext.getSessionImpl(), lqf, variables);
+        return engine.execute(
+                getColumns(), getSource(), getConstraint(),
+                getOrderings(), offset, limit);
+    }
+
+
+    @Override
+    public String[] getBindVariableNames() {
+        return variables.keySet().toArray(new String[variables.size()]);
+    }
+
+    @Override
+    public void bindValue(String varName, Value value)
+            throws IllegalArgumentException {
+        if (variables.containsKey(varName)) {
+            variables.put(varName, value);
+        } else {
+            throw new IllegalArgumentException(
+                    "No such bind variable: " + varName);
-        return super.execute();
