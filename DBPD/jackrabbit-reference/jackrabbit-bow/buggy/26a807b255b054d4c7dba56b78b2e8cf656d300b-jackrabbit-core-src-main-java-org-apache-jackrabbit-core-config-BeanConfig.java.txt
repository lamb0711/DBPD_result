JCR-1438: Replace Config classes with factories

Marcel pointed out some potential caching issues with the Introspector, so let's avoid using directly.

The code now uses a direct Class.getMethods() call to look up all available property setters (public setSomething() methods that take a single argument and return nothing).

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@830499 13f79535-47bb-0310-9956-ffa450edef68

-import java.beans.BeanInfo;
-import java.beans.IntrospectionException;
-import java.beans.Introspector;
-import java.beans.PropertyDescriptor;
+import java.lang.reflect.Modifier;
+import java.util.Enumeration;
-import java.util.List;
-            List<?> names = Collections.list(properties.propertyNames());
-            BeanInfo info = Introspector.getBeanInfo(objectClass, Object.class);
-            for (PropertyDescriptor property : info.getPropertyDescriptors()) {
-                String value = properties.getProperty(property.getName());
-                if (value != null) {
-                    setProperty(instance, property, value);
-                    names.remove(property.getName());
+            Map<String, Method> setters = getSetters(objectClass);
+            Enumeration<?> enumeration = properties.propertyNames();
+            while (enumeration.hasMoreElements()) {
+                String name = enumeration.nextElement().toString();
+                Method setter = setters.get(name);
+                if (setter != null) {
+                    String value = properties.getProperty(name);
+                    setProperty(instance, name, setter, value);
+                } else if (validate) {
+                    throw new ConfigurationException(
+                            "Configured class " + getClassName()
+                            + " does not contain a property named " + name);
-            // Check that no invalid property names were configured
-            if (validate && !names.isEmpty()) {
-                throw new ConfigurationException(
-                        "Configured class " + getClassName()
-                        + " does not contain the properties " + names);
-            }
-
-        } catch (IntrospectionException e) {
-            throw new ConfigurationException(
-                    "Configured bean implementation class " + getClassName()
-                    + " can not be introspected", e);
+    private Map<String, Method> getSetters(Class<?> klass) {
+        Map<String, Method> methods = new HashMap<String, Method>();
+        for (Method method : klass.getMethods()) {
+            String name = method.getName();
+            if (name.startsWith("set") && name.length() > 3
+                    && Modifier.isPublic(method.getModifiers())
+                    && Void.TYPE.equals(method.getReturnType())
+                    && method.getParameterTypes().length == 1) {
+                methods.put(
+                        name.substring(3, 4).toLowerCase() + name.substring(4),
+                        method);
+            }
+        }
+        return methods;
+    }
+
-            Object instance, PropertyDescriptor property, String value)
+            Object instance, String name, Method setter, String value)
-        Method method = property.getWriteMethod();
-        if (method == null) {
-            throw new ConfigurationException(
-                    "Property " + property.getName() + " of class "
-                    + getClassName() + " can not be written"); 
-        }
-
-        Class<?>[] types = method.getParameterTypes();
-        if (types.length != 1) {
-            throw new ConfigurationException(
-                    "Property " + property.getName() + " of class "
-                    + getClassName() + " has an invalid setter");
-        }
-
-        Class<?> type = types[0];
+        Class<?> type = setter.getParameterTypes()[0];
-            if (types[0].isAssignableFrom(String.class)
-                || types[0].isAssignableFrom(Object.class)) {
-                method.invoke(instance, value);
-            } else if (types[0].isAssignableFrom(Boolean.TYPE)
-                    || types[0].isAssignableFrom(Boolean.class)) {
-                method.invoke(instance, Boolean.valueOf(value));
-            } else if (types[0].isAssignableFrom(Integer.TYPE)
-                    || types[0].isAssignableFrom(Integer.class)) {
-                method.invoke(instance, Integer.valueOf(value));
-            } else if (types[0].isAssignableFrom(Long.TYPE)
-                    || types[0].isAssignableFrom(Long.class)) {
-                method.invoke(instance, Long.valueOf(value));
-            } else if (types[0].isAssignableFrom(Double.TYPE)
-                    || types[0].isAssignableFrom(Double.class)) {
-                method.invoke(instance, Double.valueOf(value));
+            if (type.isAssignableFrom(String.class)
+                || type.isAssignableFrom(Object.class)) {
+                setter.invoke(instance, value);
+            } else if (type.isAssignableFrom(Boolean.TYPE)
+                    || type.isAssignableFrom(Boolean.class)) {
+                setter.invoke(instance, Boolean.valueOf(value));
+            } else if (type.isAssignableFrom(Integer.TYPE)
+                    || type.isAssignableFrom(Integer.class)) {
+                setter.invoke(instance, Integer.valueOf(value));
+            } else if (type.isAssignableFrom(Long.TYPE)
+                    || type.isAssignableFrom(Long.class)) {
+                setter.invoke(instance, Long.valueOf(value));
+            } else if (type.isAssignableFrom(Double.TYPE)
+                    || type.isAssignableFrom(Double.class)) {
+                setter.invoke(instance, Double.valueOf(value));
-                        + ") of property " + property.getName() + " of class "
+                        + ") of property " + name + " of class "
-                    + property.getName() + " of class " + getClassName(), e);
+                    + name + " of class " + getClassName(), e);
-                    "Property " + property.getName() + " of class "
+                    "Property " + name + " of class "
-                    "The setter of property " + property.getName()
+                    "The setter of property " + name
-                    + property.getName() + " of class " + getClassName(), e);
+                    + name + " of class " + getClassName(), e);
