JCR-1104 : JSR 283 support (security work in progress)

- user API: add distinction between declared and indirect group membership
- user Impl: move group membership to authorizable node type
- javadoc
- minor fixes/improvements

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@651624 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.util.Text;
+    private final String pGroupName;
+
-        // listen to any modifications for users and groups
+        // listen to modifications of group-membership
+        String[] ntNames = new String[1];
+        if (securitySession instanceof SessionImpl) {
+            NameResolver resolver = (SessionImpl) securitySession;
+            ntNames[0] = resolver.getJCRName(UserManagerImpl.NT_REP_USER);
+            pGroupName = resolver.getJCRName(UserManagerImpl.P_GROUPS);
+        } else {
+            ntNames[0] = "rep:User";
+            pGroupName = "rep:groups";
+        }
-                Event.NODE_ADDED | Event.NODE_REMOVED | Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED,
+                Event.NODE_REMOVED | Event.PROPERTY_ADDED | Event.PROPERTY_CHANGED | Event.PROPERTY_REMOVED,
-                null,
+                ntNames,
-        // simple rule: flush all cached
+        // superclass: flush all cached
-        synchronized (membershipCache) {
-            membershipCache.clear();
+
+        // membership cache:
+        while (eventIterator.hasNext()) {
+            Event ev = eventIterator.nextEvent();
+            int type = ev.getType();
+            if (type == Event.PROPERTY_ADDED || type == Event.PROPERTY_CHANGED
+                    || type == Event.PROPERTY_REMOVED) {
+                try {
+                    if (pGroupName.equals(Text.getName(ev.getPath()))) {
+                        synchronized (membershipCache) {
+                            membershipCache.clear();
+                        }
+                        break;
+                    }
+                } catch (RepositoryException e) {
+                    // should never get here
+                    log.warn(e.getMessage());
+                }
+            }
-                    Principal groupPrinc = group.getPrincipal();
-                    if (membership.add(groupPrinc)) {
-                        membership.addAll(collectGroupMembership(groupPrinc, membership));
-                    } else {
-                        String msg = "Cyclic group membership detected with Group " + groupPrinc.getName();
-                        log.error(msg);
-                    }
+                    membership.add(group.getPrincipal());
