JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.NoPrefixDeclaredException;
-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.NameFormat;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.NameException;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.IllegalNameException;
-import org.apache.jackrabbit.name.UnknownPrefixException;
-import org.apache.jackrabbit.name.AbstractNamespaceResolver;
-import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.namespace.NamespaceResolver;
+import org.apache.jackrabbit.namespace.AbstractNamespaceResolver;
+import org.apache.jackrabbit.conversion.NamePathResolver;
+import org.apache.jackrabbit.conversion.NameException;
+import org.apache.jackrabbit.conversion.ParsingNameResolver;
+import org.apache.jackrabbit.conversion.NameResolver;
+import org.apache.jackrabbit.conversion.PathResolver;
+import org.apache.jackrabbit.conversion.ParsingPathResolver;
+import org.apache.jackrabbit.conversion.IllegalNameException;
+import org.apache.jackrabbit.conversion.MalformedPathException;
+import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.spi.NameFactory;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+    private final NameFactory nameFactory;
+    private final PathFactory pathFactory;
-    public RepositoryServiceImpl(String uri, IdFactory idFactory, ValueFactory valueFactory) throws RepositoryException {
+    public RepositoryServiceImpl(String uri, IdFactory idFactory,
+                                 NameFactory nameFactory,
+                                 PathFactory pathFactory,
+                                 ValueFactory valueFactory) throws RepositoryException {
+        this.nameFactory = nameFactory;
+        this.pathFactory = pathFactory;
-            uriResolver = new URIResolverImpl(repositoryUri, this, nsCache, domFactory);
+            uriResolver = new URIResolverImpl(repositoryUri, this, new NamePathResolverImpl(nsCache), domFactory);
-    private String getItemUri(NodeId parentId, QName childName, SessionInfo sessionInfo) throws RepositoryException {
+    private String getItemUri(NodeId parentId, Name childName, SessionInfo sessionInfo) throws RepositoryException {
-        try {
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
-            return parentUri + "/" + Text.escape(NameFormat.format(childName, resolver));
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e);
-        }
+        NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
+        return parentUri + "/" + Text.escape(resolver.getJCRName(childName));
-    QName getQName(DavPropertySet propSet, NamespaceResolver nsResolver) throws RepositoryException {
+    Name getQName(DavPropertySet propSet, NamePathResolver resolver) throws RepositoryException {
-                return NameFormat.parse(jcrName, nsResolver);
-            } catch (NameException e) {
+                return resolver.getQName(jcrName);
+            } catch (org.apache.jackrabbit.conversion.NameException e) {
-            return QName.ROOT;
+            return NameConstants.ROOT;
+    /**
+     * @see RepositoryService#getNameFactory()
+     */
+    public NameFactory getNameFactory() {
+        return nameFactory;
+    }
+
+    /**
+     * @see RepositoryService#getPathFactory()
+     */
+    public PathFactory getPathFactory() {
+        return pathFactory;
+    }
+
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
-        } catch (MalformedPathException e) {
+        } catch (NameException e) {
-                                       NamespaceResolver resolver) throws MalformedPathException, RepositoryException {
+                                       NamePathResolver resolver) throws NameException, RepositoryException {
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
-                        QName qName = getQName(childProps, resolver);
+                        Name qName = getQName(childProps, resolver);
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
-        } catch (MalformedPathException e) {
+        } catch (NameException e) {
-        QName nodeName = new QName(QName.NS_DEFAULT_URI, UUID.randomUUID().toString());
+        Name nodeName = getNameFactory().create(Name.NS_DEFAULT_URI, UUID.randomUUID().toString());
-     * @see RepositoryService#move(SessionInfo, NodeId, NodeId, QName)
+     * @see RepositoryService#move(SessionInfo, NodeId, NodeId, Name)
-    public void move(SessionInfo sessionInfo, NodeId srcNodeId, NodeId destParentNodeId, QName destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+    public void move(SessionInfo sessionInfo, NodeId srcNodeId, NodeId destParentNodeId, Name destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-     * @see RepositoryService#copy(SessionInfo, String, NodeId, NodeId, QName)
+     * @see RepositoryService#copy(SessionInfo, String, NodeId, NodeId, Name)
-    public void copy(SessionInfo sessionInfo, String srcWorkspaceName, NodeId srcNodeId, NodeId destParentNodeId, QName destName) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
+    public void copy(SessionInfo sessionInfo, String srcWorkspaceName, NodeId srcNodeId, NodeId destParentNodeId, Name destName) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
-     * @see RepositoryService#clone(SessionInfo, String, NodeId, NodeId, QName, boolean)
+     * @see RepositoryService#clone(SessionInfo, String, NodeId, NodeId, Name, boolean)
-    public void clone(SessionInfo sessionInfo, String srcWorkspaceName, NodeId srcNodeId, NodeId destParentNodeId, QName destName, boolean removeExisting) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
+    public void clone(SessionInfo sessionInfo, String srcWorkspaceName, NodeId srcNodeId, NodeId destParentNodeId, Name destName, boolean removeExisting) throws NoSuchWorkspaceException, ConstraintViolationException, VersionException, AccessDeniedException, PathNotFoundException, ItemExistsException, LockException, UnsupportedRepositoryOperationException, RepositoryException {
-     * @see RepositoryService#addVersionLabel(SessionInfo,NodeId,NodeId,QName,boolean)
+     * @see RepositoryService#addVersionLabel(SessionInfo,NodeId,NodeId,Name,boolean)
-    public void addVersionLabel(SessionInfo sessionInfo, NodeId versionHistoryId, NodeId versionId, QName label, boolean moveLabel) throws VersionException, RepositoryException {
+    public void addVersionLabel(SessionInfo sessionInfo, NodeId versionHistoryId, NodeId versionId, Name label, boolean moveLabel) throws VersionException, RepositoryException {
-            String strLabel = NameFormat.format(label, new NamespaceResolverImpl(sessionInfo));
+            String strLabel = new NamePathResolverImpl(sessionInfo).getJCRName(label);
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e);
-     * @see RepositoryService#removeVersionLabel(SessionInfo,NodeId,NodeId,QName)
+     * @see RepositoryService#removeVersionLabel(SessionInfo,NodeId,NodeId,Name)
-    public void removeVersionLabel(SessionInfo sessionInfo, NodeId versionHistoryId, NodeId versionId, QName label) throws VersionException, RepositoryException {
+    public void removeVersionLabel(SessionInfo sessionInfo, NodeId versionHistoryId, NodeId versionId, Name label) throws VersionException, RepositoryException {
-            String strLabel = NameFormat.format(label, new NamespaceResolverImpl(sessionInfo));
+            String strLabel = new NamePathResolverImpl(sessionInfo).getJCRName(label);
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e);
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
-            return new QueryInfoImpl(ms, sessionInfo, uriResolver,
-                resolver, valueFactory, getQValueFactory());
+            NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
+            return new QueryInfoImpl(ms, sessionInfo, uriResolver, resolver, valueFactory, getQValueFactory());
-     * @see RepositoryService#createEventFilter(SessionInfo, int, org.apache.jackrabbit.name.Path, boolean, String[], org.apache.jackrabbit.name.QName[], boolean)
+     * @see RepositoryService#createEventFilter(SessionInfo, int, Path, boolean, String[], Name[], boolean)
-                                         QName[] nodeTypeNames,
+                                         Name[] nodeTypeNames,
-    private void resolveNodeType(Set resolved, QName ntName) {
+    private void resolveNodeType(Set resolved, Name ntName) {
-            QName[] supertypes = def.getSupertypes();
+            Name[] supertypes = def.getSupertypes();
-    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo, QName[] nodetypeNames) throws RepositoryException {
+    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo, Name[] nodetypeNames) throws RepositoryException {
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
-                String jcrName = NameFormat.format(nodetypeNames[i], resolver);
+                String jcrName = resolver.getJCRName(nodetypeNames[i]);
-        } catch (NoPrefixDeclaredException e) {
-            throw new RepositoryException(e);
-            NamespaceResolver resolver = new NamespaceResolverImpl(sessionInfo);
+            NamePathResolver resolver = new NamePathResolverImpl(sessionInfo);
-                    nodeTypeDefinitions.put(def.getQName(), def);
+                    nodeTypeDefinitions.put(def.getName(), def);
-    private static final Namespace SV_NAMESPACE = Namespace.getNamespace(QName.NS_SV_PREFIX, QName.NS_SV_URI);
+    private static final Namespace SV_NAMESPACE = Namespace.getNamespace(Name.NS_SV_PREFIX, Name.NS_SV_URI);
-        private final NamespaceResolver nsResolver;
+        private final NamePathResolver resolver;
-            this.nsResolver = new NamespaceResolverImpl(sessionInfo);
+            this.resolver = new NamePathResolverImpl(sessionInfo);
-         * @see Batch#addNode(NodeId, QName, QName, String)
+         * @see Batch#addNode(NodeId, Name, Name, String)
-        public void addNode(NodeId parentId, QName nodeName, QName nodetypeName, String uuid) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, NoSuchNodeTypeException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void addNode(NodeId parentId, Name nodeName, Name nodetypeName, String uuid) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, NoSuchNodeTypeException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                QName fakeName = new QName(QName.NS_DEFAULT_URI, UUID.randomUUID().toString());
+                Name fakeName = getNameFactory().create(Name.NS_DEFAULT_URI, UUID.randomUUID().toString());
-                String nameAttr = NameFormat.format(nodeName, nsResolver);
+                String nameAttr = resolver.getJCRName(nodeName);
-                DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, NameFormat.format(QName.JCR_PRIMARYTYPE, nsResolver));
+                String name = resolver.getJCRName(NameConstants.JCR_PRIMARYTYPE);
+                DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, name);
-                DomUtil.addChildElement(propElement, VALUE_ELEMENT, SV_NAMESPACE, NameFormat.format(nodetypeName, nsResolver));
+                name = resolver.getJCRName(nodetypeName);
+                DomUtil.addChildElement(propElement, VALUE_ELEMENT, SV_NAMESPACE, name);
-                    DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, NameFormat.format(QName.JCR_UUID, nsResolver));
+                    name = resolver.getJCRName(NameConstants.JCR_UUID);
+                    DomUtil.setAttribute(propElement, NAME_ATTRIBUTE, SV_NAMESPACE, name);
-            } catch (NoPrefixDeclaredException e) {
-                throw new RepositoryException(e);
-         * @see Batch#addProperty(NodeId, QName, QValue)
+         * @see Batch#addProperty(NodeId, Name, QValue)
-        public void addProperty(NodeId parentId, QName propertyName, QValue value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void addProperty(NodeId parentId, Name propertyName, QValue value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-            Value jcrValue = ValueFormat.getJCRValue(value, nsResolver, valueFactory);
+            Value jcrValue = ValueFormat.getJCRValue(value, resolver, valueFactory);
-         * @see Batch#addProperty(NodeId, QName, QValue[])
+         * @see Batch#addProperty(NodeId, Name, QValue[])
-        public void addProperty(NodeId parentId, QName propertyName, QValue[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void addProperty(NodeId parentId, Name propertyName, QValue[] values) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                jcrValues[i] = ValueFormat.getJCRValue(values[i], nsResolver, valueFactory);
+                jcrValues[i] = ValueFormat.getJCRValue(values[i], resolver, valueFactory);
-        private void internalAddProperty(NodeId parentId, QName propertyName, ValuesProperty vp) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        private void internalAddProperty(NodeId parentId, Name propertyName, ValuesProperty vp) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, PathNotFoundException, ItemExistsException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                Value jcrValue = ValueFormat.getJCRValue(value, nsResolver, valueFactory);
+                Value jcrValue = ValueFormat.getJCRValue(value, resolver, valueFactory);
-                    jcrValues[i] = ValueFormat.getJCRValue(values[i], nsResolver, valueFactory);
+                    jcrValues[i] = ValueFormat.getJCRValue(values[i], resolver, valueFactory);
-         * @see Batch#setMixins(NodeId, QName[])
+         * @see Batch#setMixins(NodeId, Name[])
-        public void setMixins(NodeId nodeId, QName[] mixinNodeTypeIds) throws NoSuchNodeTypeException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void setMixins(NodeId nodeId, Name[] mixinNodeTypeIds) throws NoSuchNodeTypeException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-                        ntNames[i] = NameFormat.format(mixinNodeTypeIds[i], nsResolver);
+                        ntNames[i] = resolver.getJCRName(mixinNodeTypeIds[i]);
-            } catch (NoPrefixDeclaredException e) {
-                // should not occur.
-                throw new RepositoryException(e);
-         * @see Batch#move(NodeId, NodeId, QName)
+         * @see Batch#move(NodeId, NodeId, Name)
-        public void move(NodeId srcNodeId, NodeId destParentNodeId, QName destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
+        public void move(NodeId srcNodeId, NodeId destParentNodeId, Name destName) throws ItemExistsException, PathNotFoundException, VersionException, ConstraintViolationException, LockException, AccessDeniedException, UnsupportedRepositoryOperationException, RepositoryException {
-    //----------------------------------------------< NamespaceResolverImpl >---
-    /**
-     * Implements a namespace resolver based on a session info.
-     */
-        NamespaceResolverImpl(SessionInfo sessionInfo) {
+        private NamespaceResolverImpl(SessionInfo sessionInfo) {
+    }
-        /**
-         * @inheritDoc
-         */
-        public QName getQName(String jcrName) throws IllegalNameException, UnknownPrefixException {
-            return NameFormat.parse(jcrName, this);
+    //-----------------------------------------------< NamePathResolverImpl >---
+    /**
+     * Implements a namespace resolver based on a session info.
+     */
+    private class NamePathResolverImpl implements NamePathResolver {
+
+        private final NameResolver nResolver;
+        private final PathResolver pResolver;
+
+        private NamePathResolverImpl(SessionInfo sessionInfo) {
+            NamespaceResolver nsResolver = new NamespaceResolverImpl(sessionInfo);
+            this.nResolver = new ParsingNameResolver(getNameFactory(), nsResolver);
+            this.pResolver = new ParsingPathResolver(getPathFactory(), nResolver);
+        }
+
+        private NamePathResolverImpl(NamespaceResolver nsResolver) {
+            this.nResolver = new ParsingNameResolver(getNameFactory(), nsResolver);
+            this.pResolver = new ParsingPathResolver(getPathFactory(), nResolver);
-        public String getJCRName(QName qName) throws NoPrefixDeclaredException {
-            return NameFormat.format(qName, this);
+        public Name getQName(String jcrName) throws IllegalNameException, NamespaceException {
+            return nResolver.getQName(jcrName);
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public String getJCRName(Name qName) throws NamespaceException {
+            return nResolver.getJCRName(qName);
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public Path getQPath(String path) throws MalformedPathException, IllegalNameException, NamespaceException {
+            return pResolver.getQPath(path);
+        }
+
+        /**
+         * @inheritDoc
+         */
+        public String getJCRPath(Path path) throws NamespaceException {
+            return pResolver.getJCRPath(path);
