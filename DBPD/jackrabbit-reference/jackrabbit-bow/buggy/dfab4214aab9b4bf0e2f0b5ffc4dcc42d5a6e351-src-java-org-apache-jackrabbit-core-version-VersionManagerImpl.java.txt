- rearranging structure of versioning (will corrupt versioned data)
- adding observation of version storage (work in progress)


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@159366 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.PropertyImpl;
+import org.apache.jackrabbit.core.observation.DelegatingObservationDispatcher;
+import org.apache.jackrabbit.core.observation.EventState;
+import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
+import javax.jcr.PropertyIterator;
+import javax.jcr.NodeIterator;
+
+
+    /**
+     * the observation manager
+     */
+    private DelegatingObservationDispatcher obsMgr;
-                              String rootUUID, String rootParentUUID) {
+                              DelegatingObservationDispatcher obsMgr, String rootUUID,
+                              String rootParentUUID) {
+        this.obsMgr = obsMgr;
-        return (VersionHistory) node.getSession().getNodeByUUID(history.getId());
+        VersionHistoryImpl vh = (VersionHistoryImpl) node.getSession().getNodeByUUID(history.getId());
+
+        // now generate observation events
+        List events = new ArrayList();
+        recursiveAdd(events, (NodeImpl) vh.getParent(), vh);
+        obsMgr.dispatch(events, (SessionImpl) node.getSession());
+
+        return vh;
-        InternalVersionItem item = vMgr.getItemByExternal(id);
+        InternalVersionItem item = vMgr.getItem(id);
+        SessionImpl session = (SessionImpl) node.getSession();
-        return (Version) node.getSession().getNodeByUUID(version.getId());
+        VersionImpl v = (VersionImpl) session.getNodeByUUID(version.getId());
+
+        // now generate observation events
+        List events = new ArrayList();
+        recursiveAdd(events, (NodeImpl) v.getParent(), v);
+        obsMgr.dispatch(events, session);
+
+        return v;
+    }
+
+    /**
+     * Adds a subtree of itemstates as 'added' to a list of events
+     *
+     * @param events
+     * @param parent
+     * @param node
+     * @throws RepositoryException
+     */
+    private void recursiveAdd(List events, NodeImpl parent, NodeImpl node)
+            throws RepositoryException {
+
+        events.add(EventState.childNodeAdded(
+                parent.internalGetUUID(),
+                parent.getPrimaryPath(),
+                node.internalGetUUID(),
+                node.getPrimaryPath().getNameElement(),
+                (NodeTypeImpl) parent.getPrimaryNodeType(),
+                node.getSession()
+        ));
+
+        PropertyIterator iter = node.getProperties();
+        while (iter.hasNext()) {
+            PropertyImpl prop = (PropertyImpl) iter.nextProperty();
+            events.add(EventState.propertyAdded(
+                    node.internalGetUUID(),
+                    node.getPrimaryPath(),
+                    prop.getPrimaryPath().getNameElement(),
+                    (NodeTypeImpl) node.getPrimaryNodeType(),
+                    node.getSession()
+            ));
+        }
+        NodeIterator niter = node.getNodes();
+        while (niter.hasNext()) {
+            NodeImpl n = (NodeImpl) niter.nextNode();
+            recursiveAdd(events, node, n);
+        }
-            virtProvider.getItemState(new NodeId(item.getId())).discard();
+            NodeId id = new NodeId(item.getId());
+            if (virtProvider.hasItemState(id)) {
+                virtProvider.getItemState(id).discard();
+            }
-            virtProvider.getItemState(new NodeId(VERSION_STORAGE_NODE_UUID)).discard();
+            NodeId id = new NodeId(VERSION_STORAGE_NODE_UUID);
+            if (virtProvider.hasItemState(id)) {
+                virtProvider.getItemState(id).discard();
+            }
