JCR-552 Move listeners from item state to item state managers


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@438851 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.util.WeakIdentityCollection;
-     * Listeners (weak references)
+     * Listener.
-    private final transient Collection listeners = new WeakIdentityCollection(3);
+    private transient NodeStateListener listener;
-    /**
-     * {@inheritDoc}
-     * <p/>
-     * If the listener passed is at the same time a <code>NodeStateListener</code>
-     * we add it to our list of specialized listeners.
-     */
-    public void addListener(ItemStateListener listener) {
-        if (listener instanceof NodeStateListener) {
-            synchronized (listeners) {
-                if (listeners.contains(listener)) {
-                    log.debug("listener already registered: " + listener);
-                    // no need to add to call ItemState.addListener()
-                    return;
-                } else {
-                    listeners.add(listener);
-                }
-            }
-        }
-        super.addListener(listener);
-    }
-     * we remove it from our list of specialized listeners.
+     * we remember it as well.
-    public void removeListener(ItemStateListener listener) {
+    public void setContainer(ItemStateListener listener) {
-            synchronized (listeners) {
-                listeners.remove(listener);
+            if (this.listener != null) {
+                throw new IllegalStateException("State already connected to a listener: " + this.listener);
+            this.listener = (NodeStateListener) listener;
-        super.removeListener(listener);
+        super.setContainer(listener);
-        synchronized (listeners) {
-            Iterator iter = listeners.iterator();
-            while (iter.hasNext()) {
-                NodeStateListener l = (NodeStateListener) iter.next();
-                if (l != null) {
-                    l.nodeAdded(this, added.getName(),
-                            added.getIndex(), added.getId());
-                }
-            }
+        if (listener != null) {
+            listener.nodeAdded(this, added.getName(), added.getIndex(), added.getId());
-        synchronized (listeners) {
-            Iterator iter = listeners.iterator();
-            while (iter.hasNext()) {
-                NodeStateListener l = (NodeStateListener) iter.next();
-                if (l != null) {
-                    l.nodesReplaced(this);
-                }
-            }
+        if (listener != null) {
+            listener.nodesReplaced(this);
-        synchronized (listeners) {
-            Iterator iter = listeners.iterator();
-            while (iter.hasNext()) {
-                NodeStateListener l = (NodeStateListener) iter.next();
-                if (l != null) {
-                    l.nodeRemoved(this, removed.getName(),
-                            removed.getIndex(), removed.getId());
-                }
-            }
+        if (listener != null) {
+            listener.nodeRemoved(this, removed.getName(), removed.getIndex(), removed.getId());
