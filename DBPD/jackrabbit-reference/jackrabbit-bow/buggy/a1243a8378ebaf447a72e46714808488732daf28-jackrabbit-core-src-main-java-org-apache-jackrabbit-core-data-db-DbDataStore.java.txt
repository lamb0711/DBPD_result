JCR-1825 DbDataStore doesn't support concurrent reads

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@708598 13f79535-47bb-0310-9956-ffa450edef68

- *     &lt;param name="{@link #setCopyWhenReading(int) copyWhenReading}" value="true"/>
+ *     &lt;param name="{@link #setCopyWhenReading(boolean) copyWhenReading}" value="true"/>
-     * The digest algorithm used to uniquely identify records.
-     */
-    protected static final String DIGEST = "SHA-1";
-
-    /**
-     * Logger instance
-     */
-    private static Logger log = LoggerFactory.getLogger(DbDataStore.class);
-
-    /**
+    
+    /**
+     * Write to a temporary file to get the length (slow, but always works).
+     * This is the default setting.
+     */
+    public static final String STORE_TEMP_FILE = "tempFile";
+
+    /**
+     * Call PreparedStatement.setBinaryStream(..., -1)
+     */
+    public static final String STORE_SIZE_MINUS_ONE = "-1";
+
+    /**
+     * Call PreparedStatement.setBinaryStream(..., Integer.MAX_VALUE)
+     */
+    public static final String STORE_SIZE_MAX = "max";
+    
+    /**
+     * The digest algorithm used to uniquely identify records.
+     */
+    protected static final String DIGEST = "SHA-1";
+    
+    /**
+     * The prefix used for temporary objects.
+     */
+    protected static final String TEMP_PREFIX = "TEMP_";
+
+    /**
+     * Logger instance
+     */
+    private static Logger log = LoggerFactory.getLogger(DbDataStore.class);
-     * The prefix used for temporary objects.
-     */
-    protected static final String TEMP_PREFIX = "TEMP_";
-
-    /**
-     * Write to a temporary file to get the length (slow, but always works).
-     * This is the default setting.
-     */
-    public static final String STORE_TEMP_FILE = "tempFile";
-
-    /**
-     * Call PreparedStatement.setBinaryStream(..., -1)
-     */
-    public static final String STORE_SIZE_MINUS_ONE = "-1";
-
-    /**
-     * Call PreparedStatement.setBinaryStream(..., Integer.MAX_VALUE)
-     */
-    public static final String STORE_SIZE_MAX = "max";
-
-    /**
-    private boolean copyWhenReading = true;
+    protected boolean copyWhenReading = true;
-            conn.closeSilently(rs);
+            DatabaseHelper.closeSilently(rs);
-            conn.closeSilently(rs);
+            DatabaseHelper.closeSilently(rs);
-            conn.closeSilently(rs);
+            DatabaseHelper.closeSilently(rs);
-            InputStream result = null;
+            DbResources dbResource = null;
-                result = new ByteArrayInputStream(new byte[0]);
+                stream = new ByteArrayInputStream(new byte[0]);
+                dbResource = new DbResources(stream);
+                DatabaseHelper.closeSilently(rs);
+                putBack(conn);
+            } else if (copyWhenReading) {
+                // If we copy while reading, create a temp file and close the stream
+                File temp = moveToTempFile(stream);
+                stream = new TempFileInputStream(temp);
+                dbResource = new DbResources(stream);
-                result = new BufferedInputStream(stream);
-                if (copyWhenReading) {
-                    File temp = moveToTempFile(result);
-                    result = new TempFileInputStream(temp);
-                }
+                stream = new BufferedInputStream(stream);
+                dbResource = new DbResources(conn, rs, stream, this);
-
-            DbResources dbResources = new DbResources(conn, rs, prep, result, this);
-            return dbResources;
+            return dbResource;
