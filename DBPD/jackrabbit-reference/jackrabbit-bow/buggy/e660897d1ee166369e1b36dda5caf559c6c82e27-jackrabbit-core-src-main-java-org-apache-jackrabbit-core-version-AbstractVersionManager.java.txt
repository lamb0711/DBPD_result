JCR-1593 JSR 283: Simple versioning
JCR-2058 JSR 283: VersionManager and new versioning methods


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@765556 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ItemNotFoundException;
+    /**
+     * {@inheritDoc}
+     */
+    public InternalVersionHistory getVersionHistoryOfNode(NodeId id)
+            throws RepositoryException {
+        ReadLock lock = acquireReadLock();
+        try {
+            String uuid = id.getUUID().toString();
+            Name name = getName(uuid);
+
+            NodeStateEx parent = getParentNode(uuid, false);
+            if (parent != null && parent.hasNode(name)) {
+                NodeStateEx history = parent.getNode(name, 1);
+                return getVersionHistory(history.getNodeId());
+            } else {
+                throw new ItemNotFoundException("Version history of node " + id + " not found.");
+            }
+        } finally {
+            lock.release();
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * Assumes that all versions are stored chronologically below the version
+     * history and just returns the last one. i.e. currently only works for
+     * simple versioning.
+     */
+    public InternalVersion getHeadVersionOfNode(NodeId id) throws RepositoryException {
+        InternalVersionHistory vh = getVersionHistoryOfNode(id);
+        Name[] names = vh.getVersionNames();
+        InternalVersion last = vh.getVersion(names[names.length - 1]);
+        return getVersion(last.getId());
+    }
+
-
+     * @param simple flag indicates simple versioning
-    protected InternalVersion checkin(InternalVersionHistoryImpl history, NodeImpl node)
+    protected InternalVersion checkin(InternalVersionHistoryImpl history,
+                                      NodeImpl node, boolean simple)
-            String versionName = calculateCheckinVersionName(history, node);
+            String versionName = calculateCheckinVersionName(history, node, simple);
+     * @param simple if <code>true</code> indicates simple versioning
-                                                 NodeImpl node)
+                                                 NodeImpl node, boolean simple)
-        // 1. search a predecessor, suitable for generating the new name
-        Value[] values = node.getProperty(NameConstants.JCR_PREDECESSORS).getValues();
-        for (int i = 0; i < values.length; i++) {
-            InternalVersion pred = history.getVersion(NodeId.valueOf(values[i].getString()));
-            if (best == null
-                    || pred.getName().getLocalName().length() < best.getName().getLocalName().length()) {
-                best = pred;
+        if (simple) {
+            // 1. in simple versioning just take the 'head' version
+            Name[] names = history.getVersionNames();
+            best = history.getVersion(names[names.length - 1]);
+        } else {
+            // 1. search a predecessor, suitable for generating the new name
+            Value[] values = node.getProperty(NameConstants.JCR_PREDECESSORS).getValues();
+            for (int i = 0; i < values.length; i++) {
+                InternalVersion pred = history.getVersion(NodeId.valueOf(values[i].getString()));
+                if (best == null
+                        || pred.getName().getLocalName().length() < best.getName().getLocalName().length()) {
+                    best = pred;
+                }
