div

- get rid of rootId stored with ISM, HierarchyManagers etc.
- remove corresponding method with WorkspaceManager and WorkspaceImpl

jcr2spi/state/ItemState

- move parent field from Node/PropertyState to ItemState
- move idFactory field from NodeState to ItemState
- let PropertyState build its id instead of calling parentstate method.
- minor reordering of status related methods
- remove modCount and its usage

jcr2spi/state/ItemStateManager

- add method getRootNode()

jcr2spi/security/AccessManager

- replace ItemId by ItemState

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@431352 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.ItemId;
-            if (!mgrProvider.getAccessManager().canRead(parentState.getNodeId())) {
+            if (!mgrProvider.getAccessManager().canRead(parentState)) {
-            if (!mgrProvider.getAccessManager().isGranted(parentState.getNodeId(), relPath, new String[] {AccessManager.SET_PROPERTY_ACTION})) {
+            if (!mgrProvider.getAccessManager().isGranted(parentState, relPath, new String[] {AccessManager.SET_PROPERTY_ACTION})) {
-            if (!mgrProvider.getAccessManager().isGranted(parentState.getNodeId(), relPath, new String[] {AccessManager.ADD_NODE_ACTION})) {
+            if (!mgrProvider.getAccessManager().isGranted(parentState, relPath, new String[] {AccessManager.ADD_NODE_ACTION})) {
-
-        ItemId targetId = targetState.getId();
-            // root or orphaned node
-            throw new ConstraintViolationException("Cannot remove root node");
+            // root node
+            throw new ConstraintViolationException("Cannot remove root node.");
-
-                if (!mgrProvider.getAccessManager().canRead(targetId)) {
+                if (!mgrProvider.getAccessManager().canRead(targetState)) {
-                if (!mgrProvider.getAccessManager().canRemove(targetId)) {
+                if (!mgrProvider.getAccessManager().canRemove(targetState)) {
-        // for properties.
-        NodeState nodeState = (itemState.isNode())
-            ? ((NodeState)itemState)
-            : itemState.getParent();
+        // in case the state represents a PropertyState).
+        NodeState nodeState = (itemState.isNode()) ? ((NodeState)itemState) : itemState.getParent();
