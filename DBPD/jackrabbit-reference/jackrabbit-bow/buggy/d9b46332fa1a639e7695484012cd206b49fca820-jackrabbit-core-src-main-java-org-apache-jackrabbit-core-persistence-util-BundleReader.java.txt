JCR-2762: Optimize bundle serialization

Use a variable-length encoding for internal counts and lengths that are never negative and almost always small.

Optimize the property state header from 12 to 2 bytes in most cases.

Drop serialization of definition identifiers as they are no longer used in Jackrabbit.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1022487 13f79535-47bb-0310-9956-ffa450edef68

- * Bundle deserializater.
+ * Bundle deserializater. See the {@link BundleWriter} class for details of
+ * the serialization format.
-        // definitionId
-        in.readUTF();
+        if (version < BundleBinding.VERSION_3) {
+            // definitionId
+            in.readUTF();
+        }
-        if (version >= BundleBinding.VERSION_1) {
+        if (version >= BundleBinding.VERSION_3) {
+            bundle.setModCount((short) readInt());
+        } else if (version >= BundleBinding.VERSION_1) {
-        // type and modcount
-        int type = in.readInt();
-        entry.setModCount((short) ((type >> 16) & 0x0ffff));
-        type &= 0x0ffff;
-        entry.setType(type);
-        // multiValued
-        entry.setMultiValued(in.readBoolean());
-        // definitionId
-        in.readUTF();
+        int count = 1;
+        if (version >= BundleBinding.VERSION_3) {
+            int b = in.readUnsignedByte();
+
+            entry.setType(b & 0x0f);
+
+            int len = b >>> 4;
+            if (len != 0) {
+                entry.setMultiValued(true);
+                if (len == 0x0f) {
+                    count = readInt() + 0x0f - 1;
+                } else {
+                    count = len - 1;
+                }
+            }
+
+            entry.setModCount((short) readInt());
+        } else {
+            // type and modcount
+            int type = in.readInt();
+            entry.setModCount((short) ((type >> 16) & 0x0ffff));
+            type &= 0x0ffff;
+            entry.setType(type);
+
+            // multiValued
+            entry.setMultiValued(in.readBoolean());
+
+            // definitionId
+            in.readUTF();
+
+            // count
+            count = in.readInt();
+        }
+
-        int count = in.readInt();   // count
-            switch (type) {
+            switch (entry.getType()) {
-                    int len = in.readInt();
+                    int len;
+                    if (version >= BundleBinding.VERSION_3) {
+                        len = readInt();
+                    } else {
+                        len = in.readInt();
+                    }
-                    val = InternalValue.valueOf(new String(bytes, "UTF-8"), type);
+                    val = InternalValue.valueOf(
+                            new String(bytes, "UTF-8"), entry.getType());
-     * See the {@link BundleWriter} class for details of the serialization
-     * format.
+    /**
+     * Deserializes a variable-length integer written using bundle
+     * serialization version 3.
+     *
+     * @return deserialized name
+     * @throws IOException if an I/O error occurs
+     */
+    private int readInt() throws IOException {
+        int b = in.readUnsignedByte();
+        if ((b & 0x80) == 0) {
+            return b;
+        } else {
+            return readInt() << 7 | b & 0x7f;
+        }
+    }
+
