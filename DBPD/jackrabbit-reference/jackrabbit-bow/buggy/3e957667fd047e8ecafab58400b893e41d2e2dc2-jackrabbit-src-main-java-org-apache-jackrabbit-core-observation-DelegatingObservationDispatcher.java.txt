Make versioning transactional
- Added specialized XAVersion and XAVersionHistory objects that refresh their internal state when needed
- Defined new observation interface in order to have VersionManagerImpl use standard event dispatching
  instead of writing its own
- Added test cases verifying isolation of versioning operations in transactions


git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368026 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.ChangeLog;
-import javax.jcr.RepositoryException;
-public class DelegatingObservationDispatcher {
+public class DelegatingObservationDispatcher extends EventDispatcher {
+     * Creates an <code>EventStateCollection</code> tied to the session
+     * given as argument.
+     *
+     * @param session event source
+     * @return new <code>EventStateCollection</code> instance
+     */
+    public EventStateCollection createEventStateCollection(SessionImpl session) {
+        return new EventStateCollection(this, session);
+    }
+
+    //------------------------------------------------------< EventDispatcher >
+
+    /**
+     * {@inheritDoc}
+     */
+    void prepareEvents(EventStateCollection events) {
+        // events will get prepared on dispatch
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    void prepareDeleted(EventStateCollection events, ChangeLog changes) {
+        // events will get prepared on dispatch
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    void dispatchEvents(EventStateCollection events) {
+        dispatch(events.getEvents(), events.getSession());
+    }
+
+    /**
-     * @throws RepositoryException
-    public void dispatch(List eventList, SessionImpl session) throws RepositoryException {
+    public void dispatch(List eventList, SessionImpl session) {
