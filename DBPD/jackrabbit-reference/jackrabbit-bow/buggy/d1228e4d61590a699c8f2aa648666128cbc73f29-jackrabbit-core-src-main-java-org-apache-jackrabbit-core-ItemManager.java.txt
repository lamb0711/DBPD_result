JCR-1276: A Property and a Node Can Have the Same Name

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@605622 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.state.ItemStateListener;
-import org.apache.jackrabbit.core.state.ItemStateListener;
-import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Path;
-     * Checks if the item with the given path exists.
+     * Checks whether an item exists at the specified path.
+     *
+     * @deprecated As of JSR 283, a <code>Path</code> doesn't anymore uniquely
+     * identify an <code>Item</code>, therefore {@link #nodeExists(Path)} and
+     * {@link #propertyExists(Path)} should be used instead.
-            if (id == null) {
-                return false;
-            }
-
-            // check if state exists for the given item
-            if (!itemStateProvider.hasItemState(id)) {
-                return false;
-            }
-
-            // check privileges
-            if (!session.getAccessManager().isGranted(id, AccessManager.READ)) {
-                // clear cache
-                evictItem(id);
-                // item exists but the session has not been granted read access
-                return false;
-            }
-            return true;
-        } catch (ItemNotFoundException infe) {
+            return (id != null) && itemExists(id);
+        } catch (RepositoryException re) {
+        }
+    }
+
+    /**
+     * Checks whether a node exists at the specified path.
+     *
+     * @param path path to the node to be checked
+     * @return true if a node exists at the specified path
+     */
+    public boolean nodeExists(Path path) {
+        try {
+            // check sanity of session
+            session.sanityCheck();
+
+            NodeId id = hierMgr.resolveNodePath(path);
+            return (id != null) && itemExists(id);
+        } catch (RepositoryException re) {
+            return false;
+        }
+    }
+
+    /**
+     * Checks whether a property exists at the specified path.
+     *
+     * @param path path to the property to be checked
+     * @return true if a property exists at the specified path
+     */
+    public boolean propertyExists(Path path) {
+        try {
+            // check sanity of session
+            session.sanityCheck();
+
+            PropertyId id = hierMgr.resolvePropertyPath(path);
+            return (id != null) && itemExists(id);
+     * Returns the node at the specified absolute path in the workspace.
+     * If no such node exists, then it returns the property at the specified path.
+     * If no such property exists a <code>PathNotFoundException</code> is thrown.
+     * 
+     * @deprecated As of JSR 283, a <code>Path</code> doesn't anymore uniquely
+     * identify an <code>Item</code>, therefore {@link #getNode(Path)} and
+     * {@link #getProperty(Path)} should be used instead.
+     * @param path
+     * @return
+     * @throws PathNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    public NodeImpl getNode(Path path)
+            throws PathNotFoundException, AccessDeniedException, RepositoryException {
+        NodeId id = hierMgr.resolveNodePath(path);
+        if (id == null) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+        try {
+            return (NodeImpl) getItem(id);
+        } catch (ItemNotFoundException infe) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+    }
+
+    /**
+     * @param path
+     * @return
+     * @throws PathNotFoundException
+     * @throws AccessDeniedException
+     * @throws RepositoryException
+     */
+    public PropertyImpl getProperty(Path path)
+            throws PathNotFoundException, AccessDeniedException, RepositoryException {
+        PropertyId id = hierMgr.resolvePropertyPath(path);
+        if (id == null) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+        try {
+            return (PropertyImpl) getItem(id);
+        } catch (ItemNotFoundException infe) {
+            throw new PathNotFoundException(safeGetJCRPath(path));
+        }
+    }
+
+    /**
