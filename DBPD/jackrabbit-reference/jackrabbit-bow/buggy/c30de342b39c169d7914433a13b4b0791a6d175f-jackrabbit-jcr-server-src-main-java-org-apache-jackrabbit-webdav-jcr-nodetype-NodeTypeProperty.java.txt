JCR-2453 - Break the spi2dav dependency to jcr-server

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1002639 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.commons.webdav.NodeTypeConstants;
+import org.apache.jackrabbit.commons.webdav.NodeTypeUtil;
-import org.apache.jackrabbit.webdav.xml.DomUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import java.util.List;
-    private static Logger log = LoggerFactory.getLogger(NodeTypeProperty.class);
-
-            // assume property has be built from xml
-            Object propValue = property.getValue();
-            if (propValue instanceof List) {
-                retrieveNodeTypeNames(((List<?>)propValue));
-            } else if (propValue instanceof Element) {
-                List<Element> l = Collections.singletonList((Element) propValue);
-                retrieveNodeTypeNames(l);
-            } else {
-                log.debug("NodeTypeProperty '" + property.getName() + "' has no/unparsable value.");
-            }
-        }
-    }
-
-    private void retrieveNodeTypeNames(List<?> elementList) {
-        for (Object content : elementList) {
-            if (!(content instanceof Element)) {
-                continue;
-            }
-            Element el = (Element) content;
-            if (XML_NODETYPE.equals(el.getLocalName()) && NodeTypeConstants.NAMESPACE.isSame(el.getNamespaceURI())) {
-                String nodetypeName = DomUtil.getChildText(el, XML_NODETYPENAME, NodeTypeConstants.NAMESPACE);
-                if (nodetypeName != null && !"".equals(nodetypeName)) {
-                    nodetypeNames.add(nodetypeName);
-                }
-            } else {
-                log.debug("'dcr:nodetype' element expected -> ignoring element '" + ((Element) content).getNodeName() + "'");
-            }
+            nodetypeNames.addAll(NodeTypeUtil.ntNamesFromXml(property.getValue()));
-     * Return a set of nodetype names present in this property.
+     * Return a set of node type names present in this property.
-     * @return set of nodetype names
+     * @return set of node type names
-        return nodetypeNames;
+        return Collections.unmodifiableSet(nodetypeNames);
-        return nodetypeNames;
+        return Collections.unmodifiableSet(nodetypeNames);
-            Element ntElem = DomUtil.addChildElement(elem, XML_NODETYPE, NodeTypeConstants.NAMESPACE);
-            DomUtil.addChildElement(ntElem, XML_NODETYPENAME, NodeTypeConstants.NAMESPACE, name);
+            elem.appendChild(NodeTypeUtil.ntNameToXml(name, document));
