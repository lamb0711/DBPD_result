migrating to v0.15 of the jsr 170 spec

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@55516 13f79535-47bb-0310-9956-ffa450edef68

-import javax.jcr.access.AccessDeniedException;
-     * @see Node#remove(String)
-     */
-    public synchronized void remove(String relPath)
-            throws PathNotFoundException, RepositoryException {
-        // check state of this instance
-        checkItemState();
-
-        Path targetPath;
-        Path.PathElement targetName;
-        Path parentPath;
-        try {
-            targetPath = Path.create(getPrimaryPath(), relPath, session.getNamespaceResolver(), true);
-            targetName = targetPath.getNameElement();
-            parentPath = targetPath.getAncestor(1);
-        } catch (MalformedPathException e) {
-            String msg = "failed to resolve path " + relPath + " relative to " + safeGetJCRPath();
-            log.error(msg, e);
-            throw new RepositoryException(msg, e);
-        }
-
-        // check if the specified item exists and if it is protected
-        ItemImpl targetItem;
-        try {
-            targetItem = itemMgr.getItem(targetPath);
-            if (targetItem.isNode()) {
-                NodeImpl node = (NodeImpl) targetItem;
-                NodeDef def = node.getDefinition();
-                // check protected flag
-                if (def.isProtected()) {
-                    String msg = targetItem.safeGetJCRPath() + ": cannot remove a protected node";
-                    log.error(msg);
-                    throw new ConstraintViolationException(msg);
-                }
-            } else {
-                PropertyImpl prop = (PropertyImpl) targetItem;
-                PropertyDef def = prop.getDefinition();
-                // check protected flag
-                if (def.isProtected()) {
-                    String msg = targetItem.safeGetJCRPath() + ": cannot remove a protected property";
-                    log.error(msg);
-                    throw new ConstraintViolationException(msg);
-                }
-            }
-        } catch (AccessDeniedException ade) {
-            throw new PathNotFoundException(relPath);
-        }
-
-        NodeImpl parentNode;
-        try {
-            ItemImpl parent = itemMgr.getItem(parentPath);
-            if (!parent.isNode()) {
-                // should never get here
-                String msg = "cannot remove an item from a property " + parent.safeGetJCRPath();
-                log.error(msg);
-                throw new RepositoryException(msg);
-            }
-            parentNode = (NodeImpl) parent;
-        } catch (AccessDeniedException ade) {
-            // should never get here because we already checked
-            // the existence of the child...
-            throw new PathNotFoundException(relPath);
-        }
-
-        // check if versioning allows write
-        if (!parentNode.safeIsCheckedOut()) {
-            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a checked-in node";
-            log.error(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag of parent node
-        if (parentNode.getDefinition().isProtected()) {
-            String msg = parentNode.safeGetJCRPath() + ": cannot remove a child of a protected node";
-            log.error(msg);
-            throw new ConstraintViolationException(msg);
-        }
-
-        // delegate the removal of the child item to the parent node
-        if (targetItem.isNode()) {
-            parentNode.removeChildNode(targetName.getName(), targetName.getIndex());
-        } else {
-            parentNode.removeChildProperty(targetName.getName());
-        }
-    }
-
-    /**
-            throws UnsupportedRepositoryOperationException, RepositoryException {
+            throws VersionException, UnsupportedRepositoryOperationException,
+            RepositoryException {
-                // so delete here aswell?
+                // so delete here as well?
-                    remove(n.getName());
+                    n.remove();
-                    getNode(f.getName()).remove(".");
+                    getNode(f.getName()).remove();
