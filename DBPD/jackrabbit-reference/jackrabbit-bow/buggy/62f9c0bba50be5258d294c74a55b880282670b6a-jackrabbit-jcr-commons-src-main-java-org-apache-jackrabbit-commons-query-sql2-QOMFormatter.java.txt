JCR-2561 SQL2 query - supplying column selector fails with NPE on getColumnName()

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@921890 13f79535-47bb-0310-9956-ffa450edef68

-     * @throws RepositoryException if an error occurs while formatting the qom. 
+     * @throws RepositoryException if an error occurs while formatting the qom.
-        sb.append("SELECT");
-        ws();
-        format(qom.getColumns());
-        ws();
-        sb.append("FROM");
-        ws();
-        format(qom.getSource());
+        append("SELECT ");
+        append(qom.getColumns());
+        append(" FROM ");
+        append(qom.getSource());
-            ws();
-            sb.append("WHERE");
-            ws();
-            format(c);
+            append(" WHERE ");
+            append(c);
-            ws();
-            sb.append("ORDER BY");
-            ws();
-            format(orderings);
+            append(" ORDER BY ");
+            append(orderings);
-    private void format(Ordering[] orderings) {
+    private void append(Ordering[] orderings) {
-            sb.append(comma);
+            append(comma);
-            format(ordering.getOperand());
+            append(ordering.getOperand());
-                ws();
-                sb.append("DESC");
+                append(" DESC");
-    private void format(Constraint c)
+    private void append(Constraint c)
-            format((And) c);
+            append((And) c);
-            format((ChildNode) c);
+            append((ChildNode) c);
-            format((Comparison) c);
+            append((Comparison) c);
-            format((DescendantNode) c);
+            append((DescendantNode) c);
-            format((FullTextSearch) c);
+            append((FullTextSearch) c);
-            format((Not) c);
+            append((Not) c);
-            format((Or) c);
+            append((Or) c);
-            format((PropertyExistence) c);
+            append((PropertyExistence) c);
-            format((SameNode) c);
+            append((SameNode) c);
-    private void format(And constraint)
+    private void append(And constraint)
-            sb.append(and);
+            append(and);
-                sb.append("(");
+                append("(");
-            format(c);
+            append(c);
-                sb.append(")");
+                append(")");
-    private void format(ChildNode constraint) {
-        sb.append("ISCHILDNODE(");
-        formatName(constraint.getSelectorName());
-        sb.append(",");
-        ws();
-        formatPath(constraint.getParentPath());
-        sb.append(")");
+    private void append(ChildNode constraint) {
+        append("ISCHILDNODE(");
+        appendName(constraint.getSelectorName());
+        append(", ");
+        appendPath(constraint.getParentPath());
+        append(")");
-    private void format(Comparison constraint)
+    private void append(Comparison constraint)
-        format(constraint.getOperand1());
-        ws();
-        formatOperator(constraint.getOperator());
-        ws();
-        format(constraint.getOperand2());
+        append(constraint.getOperand1());
+        append(" ");
+        appendOperator(constraint.getOperator());
+        append(" ");
+        append(constraint.getOperand2());
-    private void format(StaticOperand operand)
+    private void append(StaticOperand operand)
-            format((BindVariableValue) operand);
+            append((BindVariableValue) operand);
-            format((Literal) operand);
+            append((Literal) operand);
-    private void format(BindVariableValue value) {
-        sb.append("$");
-        sb.append(value.getBindVariableName());
+    private void append(BindVariableValue value) {
+        append("$");
+        append(value.getBindVariableName());
-    private void format(Literal value)
+    private void append(Literal value)
-                formatCastLiteral(v.getString(), "BINARY");
+                appendCastLiteral(v.getString(), "BINARY");
-                sb.append(v.getString());
+                append(v.getString());
-                formatCastLiteral(v.getString(), "DATE");
+                appendCastLiteral(v.getString(), "DATE");
-                sb.append(v.getString());
+                append(v.getString());
-                sb.append(v.getString());
+                append(v.getString());
-                sb.append(v.getString());
+                append(v.getString());
-                formatCastLiteral(v.getString(), "NAME");
+                appendCastLiteral(v.getString(), "NAME");
-                formatCastLiteral(v.getString(), "PATH");
+                appendCastLiteral(v.getString(), "PATH");
-                formatCastLiteral(v.getString(), "REFERENCE");
+                appendCastLiteral(v.getString(), "REFERENCE");
-                formatStringLiteral(v.getString());
+                appendStringLiteral(v.getString());
-                formatCastLiteral(v.getString(), "URI");
+                appendCastLiteral(v.getString(), "URI");
-                formatCastLiteral(v.getString(), "WEAKREFERENCE");
+                appendCastLiteral(v.getString(), "WEAKREFERENCE");
-    private void formatCastLiteral(String value, String propertyType) {
-        sb.append("CAST(");
-        formatStringLiteral(value);
-        ws();
-        sb.append("AS");
-        ws();
-        sb.append(propertyType);
-        sb.append(")");
+    private void appendCastLiteral(String value, String propertyType) {
+        append("CAST(");
+        appendStringLiteral(value);
+        append(" AS ");
+        append(propertyType);
+        append(")");
-    private void formatStringLiteral(String value) {
-        sb.append("'");
-        sb.append(value.replaceAll("'", "''"));
-        sb.append("'");
+    private void appendStringLiteral(String value) {
+        append("'");
+        append(value.replaceAll("'", "''"));
+        append("'");
-    private void formatOperator(String operator) {
+    private void appendOperator(String operator) {
-            sb.append("=");
+            append("=");
-            sb.append(">");
+            append(">");
-            sb.append(">=");
+            append(">=");
-            sb.append("<");
+            append("<");
-            sb.append("<=");
+            append("<=");
-            sb.append("LIKE");
+            append("LIKE");
-            sb.append("<>");
+            append("<>");
-    private void format(DynamicOperand operand) {
+    private void append(DynamicOperand operand) {
-            format((FullTextSearchScore) operand);
+            append((FullTextSearchScore) operand);
-            format((Length) operand);
+            append((Length) operand);
-            format((LowerCase) operand);
+            append((LowerCase) operand);
-            format((NodeLocalName) operand);
+            append((NodeLocalName) operand);
-            format((NodeName) operand);
+            append((NodeName) operand);
-            format((PropertyValue) operand);
+            append((PropertyValue) operand);
-            format((UpperCase) operand);
+            append((UpperCase) operand);
-    private void format(FullTextSearchScore operand) {
-        sb.append("SCORE(");
-        formatName(operand.getSelectorName());
-        sb.append(")");
+    private void append(FullTextSearchScore operand) {
+        append("SCORE(");
+        appendName(operand.getSelectorName());
+        append(")");
-    private void format(Length operand) {
-        sb.append("LENGTH(");
-        format(operand.getPropertyValue());
-        sb.append(")");
+    private void append(Length operand) {
+        append("LENGTH(");
+        append(operand.getPropertyValue());
+        append(")");
-    private void format(LowerCase operand) {
-        sb.append("LOWER(");
-        format(operand.getOperand());
-        sb.append(")");
+    private void append(LowerCase operand) {
+        append("LOWER(");
+        append(operand.getOperand());
+        append(")");
-    private void format(NodeLocalName operand) {
-        sb.append("LOCALNAME(");
-        formatName(operand.getSelectorName());
-        sb.append(")");
+    private void append(NodeLocalName operand) {
+        append("LOCALNAME(");
+        appendName(operand.getSelectorName());
+        append(")");
-    private void format(NodeName operand) {
-        sb.append("NAME(");
-        formatName(operand.getSelectorName());
-        sb.append(")");
+    private void append(NodeName operand) {
+        append("NAME(");
+        appendName(operand.getSelectorName());
+        append(")");
-    private void format(PropertyValue operand) {
-        formatName(operand.getSelectorName());
-        sb.append(".");
-        formatName(operand.getPropertyName());
+    private void append(PropertyValue operand) {
+        appendName(operand.getSelectorName());
+        append(".");
+        appendName(operand.getPropertyName());
-    private void format(UpperCase operand) {
-        sb.append("UPPER(");
-        format(operand.getOperand());
-        sb.append(")");
+    private void append(UpperCase operand) {
+        append("UPPER(");
+        append(operand.getOperand());
+        append(")");
-    private void format(DescendantNode constraint) {
-        sb.append("ISDESCENDANTNODE(");
-        formatName(constraint.getSelectorName());
-        sb.append(",");
-        ws();
-        formatPath(constraint.getAncestorPath());
-        sb.append(")");
+    private void append(DescendantNode constraint) {
+        append("ISDESCENDANTNODE(");
+        appendName(constraint.getSelectorName());
+        append(", ");
+        appendPath(constraint.getAncestorPath());
+        append(")");
-    private void format(FullTextSearch constraint)
-            throws RepositoryException {
-        sb.append("CONTAINS(");
-        formatName(constraint.getSelectorName());
-        sb.append(".");
+    private void append(FullTextSearch constraint) throws RepositoryException {
+        append("CONTAINS(");
+        appendName(constraint.getSelectorName());
+        append(".");
-            sb.append("*");
+            append("*");
-            formatName(propName);
+            appendName(propName);
-        sb.append(",");
-        ws();
-        format(constraint.getFullTextSearchExpression());
-        sb.append(")");
+        append(", ");
+        append(constraint.getFullTextSearchExpression());
+        append(")");
-    private void format(Not constraint)
-            throws RepositoryException {
-        sb.append("NOT");
-        ws();
+    private void append(Not constraint) throws RepositoryException {
+        append("NOT ");
-            sb.append("(");
+            append("(");
-        format(c);
+        append(c);
-            sb.append(")");
+            append(")");
-    private void format(Or constraint)
-            throws RepositoryException {
-        format(constraint.getConstraint1());
-        ws();
-        sb.append("OR");
-        ws();
-        format(constraint.getConstraint2());
+    private void append(Or constraint) throws RepositoryException {
+        append(constraint.getConstraint1());
+        append(" OR ");
+        append(constraint.getConstraint2());
-    private void format(PropertyExistence constraint) {
-        formatName(constraint.getSelectorName());
-        sb.append(".");
-        formatName(constraint.getPropertyName());
-        ws();
-        sb.append("IS NOT NULL");
+    private void append(PropertyExistence constraint) {
+        appendName(constraint.getSelectorName());
+        append(".");
+        appendName(constraint.getPropertyName());
+        append(" IS NOT NULL");
-    private void format(SameNode constraint) {
-        sb.append("ISSAMENODE(");
-        formatName(constraint.getSelectorName());
-        sb.append(",");
-        ws();
-        formatPath(constraint.getPath());
-        sb.append(")");
+    private void append(SameNode constraint) {
+        append("ISSAMENODE(");
+        appendName(constraint.getSelectorName());
+        append(", ");
+        appendPath(constraint.getPath());
+        append(")");
-    private void format(Column[] columns) {
+    private void append(Column[] columns) {
-            sb.append("*");
+            append("*");
-                sb.append(comma);
+                append(comma);
-                formatName(c.getSelectorName());
-                sb.append(".");
+                appendName(c.getSelectorName());
+                append(".");
-                    formatName(propName);
-                    ws();
-                    sb.append("AS");
-                    ws();
-                    formatName(c.getColumnName());
+                    appendName(propName);
+                    if (c.getColumnName() != null) {
+                        append(" AS ");
+                        appendName(c.getColumnName());
+                    }
-                    sb.append("*");
+                    append("*");
-    private void format(Source source) {
+    private void append(Source source) {
-            format((Join) source);
+            append((Join) source);
-            format((Selector) source);
+            append((Selector) source);
-    private void format(Join join) {
-        format(join.getLeft());
-        ws();
-        formatJoinType(join.getJoinType());
-        ws();
-        sb.append("JOIN");
-        ws();
-        format(join.getRight());
-        ws();
-        sb.append("ON");
-        ws();
-        format(join.getJoinCondition());
+    private void append(Join join) {
+        append(join.getLeft());
+        append(" ");
+        appendJoinType(join.getJoinType());
+        append(" JOIN ");
+        append(join.getRight());
+        append(" ON ");
+        append(join.getJoinCondition());
-    private void format(JoinCondition joinCondition) {
+    private void append(JoinCondition joinCondition) {
-            format((EquiJoinCondition) joinCondition);
+            append((EquiJoinCondition) joinCondition);
-            format((ChildNodeJoinCondition) joinCondition);
+            append((ChildNodeJoinCondition) joinCondition);
-            format((DescendantNodeJoinCondition) joinCondition);
+            append((DescendantNodeJoinCondition) joinCondition);
-            format((SameNodeJoinCondition) joinCondition);
+            append((SameNodeJoinCondition) joinCondition);
-    private void format(EquiJoinCondition condition) {
-        formatName(condition.getSelector1Name());
-        sb.append(".");
-        formatName(condition.getProperty1Name());
-        ws();
-        sb.append("=");
-        ws();
-        formatName(condition.getSelector2Name());
-        sb.append(".");
-        formatName(condition.getProperty2Name());
+    private void append(EquiJoinCondition condition) {
+        appendName(condition.getSelector1Name());
+        append(".");
+        appendName(condition.getProperty1Name());
+        append(" = ");
+        appendName(condition.getSelector2Name());
+        append(".");
+        appendName(condition.getProperty2Name());
-    private void format(ChildNodeJoinCondition condition) {
-        sb.append("ISCHILDNODE(");
-        formatName(condition.getChildSelectorName());
-        sb.append(",");
-        ws();
-        formatName(condition.getParentSelectorName());
-        sb.append(")");
+    private void append(ChildNodeJoinCondition condition) {
+        append("ISCHILDNODE(");
+        appendName(condition.getChildSelectorName());
+        append(", ");
+        appendName(condition.getParentSelectorName());
+        append(")");
-    private void format(DescendantNodeJoinCondition condition) {
-        sb.append("ISDESCENDANTNODE(");
-        formatName(condition.getDescendantSelectorName());
-        sb.append(",");
-        ws();
-        formatName(condition.getAncestorSelectorName());
-        sb.append(")");
+    private void append(DescendantNodeJoinCondition condition) {
+        append("ISDESCENDANTNODE(");
+        appendName(condition.getDescendantSelectorName());
+        append(", ");
+        appendName(condition.getAncestorSelectorName());
+        append(")");
-    private void format(SameNodeJoinCondition condition) {
-        sb.append("ISSAMENODE(");
-        formatName(condition.getSelector1Name());
-        sb.append(",");
-        ws();
-        formatName(condition.getSelector2Name());
+    private void append(SameNodeJoinCondition condition) {
+        append("ISSAMENODE(");
+        appendName(condition.getSelector1Name());
+        append(", ");
+        appendName(condition.getSelector2Name());
-            sb.append(",");
-            ws();
-            formatPath(condition.getSelector2Path());
+            append(", ");
+            appendPath(condition.getSelector2Path());
-        sb.append(")");
+        append(")");
-    private void formatPath(String path) {
+    private void appendPath(String path) {
-            sb.append(path);
+            append(path);
-            sb.append("[");
-            sb.append(path);
-            sb.append("]");
+            append("[");
+            append(path);
+            append("]");
-    private void formatJoinType(String joinType) {
+    private void appendJoinType(String joinType) {
-            sb.append("INNER");
+            append("INNER");
-            sb.append("LEFT OUTER");
+            append("LEFT OUTER");
-            sb.append("RIGHT OUTER");
+            append("RIGHT OUTER");
-    private void format(Selector selector) {
-        formatName(selector.getNodeTypeName());
-        ws();
-        sb.append("AS");
-        ws();
-        formatName(selector.getSelectorName());
+    private void append(Selector selector) {
+        appendName(selector.getNodeTypeName());
+        if (!selector.getSelectorName().equals(selector.getNodeTypeName())) {
+            append(" AS ");
+            appendName(selector.getSelectorName());
+        }
-    private void formatName(String name) {
+    private void appendName(String name) {
-            sb.append(name);
+            append(name);
-            sb.append("[");
-            sb.append(name);
-            sb.append("]");
+            append("[");
+            append(name);
+            append("]");
-    private void ws() {
-        sb.append(" ");
+    private void append(String s) {
+        sb.append(s);
+
