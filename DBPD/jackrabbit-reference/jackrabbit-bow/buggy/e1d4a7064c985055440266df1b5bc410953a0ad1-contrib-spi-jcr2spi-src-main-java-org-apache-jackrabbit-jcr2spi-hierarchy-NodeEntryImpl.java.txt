JCR-996 Name and Path interfaces in SPI
JCR-1169 Distribution of commons classes


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@586065 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.name.QName;
-import org.apache.jackrabbit.name.Path;
-import org.apache.jackrabbit.name.MalformedPathException;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.name.NameConstants;
+import org.apache.jackrabbit.name.PathBuilder;
-     * Key = {@link QName} of property,<br>
+     * Key = {@link Name} of property,<br>
-    private NodeEntryImpl(NodeEntryImpl parent, QName name, String uniqueID, EntryFactory factory) {
+    private NodeEntryImpl(NodeEntryImpl parent, Name name, String uniqueID, EntryFactory factory) {
-        return new NodeEntryImpl(null, QName.ROOT, null, factory);
+        return new NodeEntryImpl(null, NameConstants.ROOT, null, factory);
-    static NodeEntry createNodeEntry(NodeEntryImpl parent, QName name, String uniqueId, EntryFactory factory) {
+    static NodeEntry createNodeEntry(NodeEntryImpl parent, Name name, String uniqueId, EntryFactory factory) {
+            PathFactory pf = factory.getPathFactory();
-                return idFactory.createNodeId((String) null, Path.ROOT);
+                return idFactory.createNodeId((String) null, pf.getRootPath());
-                return idFactory.createNodeId(parent.getId(), Path.create(getQName(), getIndex()));
+                Path p = pf.create(getName(), getIndex());
+                return idFactory.createNodeId(parent.getId(), p);
+            PathFactory pf = factory.getPathFactory();
-            return idFactory.createNodeId(parentId, Path.create(getWorkspaceQName(), getWorkspaceIndex()));
+            return idFactory.createNodeId(parentId, pf.create(getWorkspaceName(), getWorkspaceIndex()));
-        Path.PathElement[] elems = path.getElements();
+        Path.Element[] elems = path.getElements();
-            Path.PathElement elem = elems[i];
+            Path.Element elem = (Path.Element) elems[i];
-            QName name = elem.getName();
+            Name name = elem.getName();
-                Path remainingPath;
-                try {
-                    Path.PathBuilder pb = new Path.PathBuilder();
-                    for (int j = i; j < elems.length; j++) {
-                        pb.addLast(elems[j]);
-                    }
-                    remainingPath = pb.getPath();
-                } catch (MalformedPathException e) {
-                    // should not get here
-                    throw new RepositoryException("Invalid path");
+                PathBuilder pb = new PathBuilder(factory.getPathFactory());
+                for (int j = i; j < elems.length; j++) {
+                    pb.addLast(elems[j]);
+                Path remainingPath = pb.getPath();
-                IdFactory idFactory = entry.factory.getIdFactory();
+                IdFactory idFactory = factory.getIdFactory();
-            Path.PathElement elem = workspacePath.getElement(i);
+            Path.Element elem = workspacePath.getElements()[i];
-            QName childName = elem.getName();
+            Name childName = elem.getName();
-     * @see NodeEntry#hasNodeEntry(QName)
+     * @see NodeEntry#hasNodeEntry(Name)
-    public synchronized boolean hasNodeEntry(QName nodeName) {
+    public synchronized boolean hasNodeEntry(Name nodeName) {
-     * @see NodeEntry#hasNodeEntry(QName, int)
+     * @see NodeEntry#hasNodeEntry(Name, int)
-    public synchronized boolean hasNodeEntry(QName nodeName, int index) {
+    public synchronized boolean hasNodeEntry(Name nodeName, int index) {
-     * @see NodeEntry#getNodeEntry(QName, int)
+     * @see NodeEntry#getNodeEntry(Name, int)
-    public synchronized NodeEntry getNodeEntry(QName nodeName, int index) throws RepositoryException {
+    public synchronized NodeEntry getNodeEntry(Name nodeName, int index) throws RepositoryException {
-     * @see NodeEntry#getNodeEntry(QName, int, boolean)
+     * @see NodeEntry#getNodeEntry(Name, int, boolean)
-    public NodeEntry getNodeEntry(QName nodeName, int index, boolean loadIfNotFound) throws RepositoryException {
+    public NodeEntry getNodeEntry(Name nodeName, int index, boolean loadIfNotFound) throws RepositoryException {
-                && !containsAtticChild(entries, nodeName, index) 
+                && !containsAtticChild(entries, nodeName, index)
-            NodeId cId = factory.getIdFactory().createNodeId(getId(), Path.create(nodeName, index));
+
+            PathFactory pf = factory.getPathFactory();
+            NodeId cId = factory.getIdFactory().createNodeId(getId(), pf.create(nodeName, index));
-     * @see NodeEntry#getNodeEntries(QName)
+     * @see NodeEntry#getNodeEntries(Name)
-    public synchronized List getNodeEntries(QName nodeName) throws RepositoryException {
+    public synchronized List getNodeEntries(Name nodeName) throws RepositoryException {
-     * @see NodeEntry#addNodeEntry(QName, String, int)
+     * @see NodeEntry#addNodeEntry(Name, String, int)
-    public NodeEntry addNodeEntry(QName nodeName, String uniqueID, int index) throws RepositoryException {
+    public NodeEntry addNodeEntry(Name nodeName, String uniqueID, int index) throws RepositoryException {
-     * @see NodeEntry#addNewNodeEntry(QName, String, QName, QNodeDefinition)
+     * @see NodeEntry#addNewNodeEntry(Name, String, Name, QNodeDefinition)
-    public NodeState addNewNodeEntry(QName nodeName, String uniqueID,
-                                     QName primaryNodeType, QNodeDefinition definition) throws RepositoryException {
+    public NodeState addNewNodeEntry(Name nodeName, String uniqueID,
+                                     Name primaryNodeType, QNodeDefinition definition) throws RepositoryException {
-    private NodeEntry internalAddNodeEntry(QName nodeName, String uniqueID,
-                                               int index, ChildNodeEntries childEntries) {
+    private NodeEntry internalAddNodeEntry(Name nodeName, String uniqueID,
+                                           int index, ChildNodeEntries childEntries) {
-     * @see NodeEntry#hasPropertyEntry(QName)
+     * @see NodeEntry#hasPropertyEntry(Name)
-    public synchronized boolean hasPropertyEntry(QName propName) {
+    public synchronized boolean hasPropertyEntry(Name propName) {
-     * @see NodeEntry#getPropertyEntry(QName)
+     * @see NodeEntry#getPropertyEntry(Name)
-    public synchronized PropertyEntry getPropertyEntry(QName propName) {
+    public synchronized PropertyEntry getPropertyEntry(Name propName) {
-     * @see NodeEntry#getPropertyEntry(QName, boolean)
+     * @see NodeEntry#getPropertyEntry(Name, boolean)
-    public PropertyEntry getPropertyEntry(QName propName, boolean loadIfNotFound) throws RepositoryException {
+    public PropertyEntry getPropertyEntry(Name propName, boolean loadIfNotFound) throws RepositoryException {
-     * @see NodeEntry#addPropertyEntry(QName)
+     * @see NodeEntry#addPropertyEntry(Name)
-    public PropertyEntry addPropertyEntry(QName propName) throws ItemExistsException {
+    public PropertyEntry addPropertyEntry(Name propName) throws ItemExistsException {
-    private PropertyEntry internalAddPropertyEntry(QName propName) {
+    private PropertyEntry internalAddPropertyEntry(Name propName) {
-            QName propName = (QName) it.next();
+            Name propName = (Name) it.next();
-                QName propName = (QName) it.next();
+                Name propName = (Name) it.next();
-     * @see NodeEntry#addNewPropertyEntry(QName, QPropertyDefinition)
+     * @see NodeEntry#addNewPropertyEntry(Name, QPropertyDefinition)
-    public PropertyState addNewPropertyEntry(QName propName, QPropertyDefinition definition)
+    public PropertyState addNewPropertyEntry(Name propName, QPropertyDefinition definition)
-    void internalRemovePropertyEntry(QName propName) {
+    void internalRemovePropertyEntry(Name propName) {
-    * @see NodeEntry#move(QName, NodeEntry, boolean)
+    * @see NodeEntry#move(Name, NodeEntry, boolean)
-   public NodeEntry move(QName newName, NodeEntry newParent, boolean transientMove) throws RepositoryException {
+   public NodeEntry move(Name newName, NodeEntry newParent, boolean transientMove) throws RepositoryException {
-           String msg = "Internal error. Attempt to move NodeEntry (" + getQName() + ") which is not connected to its parent.";
+           String msg = "Internal error. Attempt to move NodeEntry (" + getName() + ") which is not connected to its parent.";
-        QName eventName = childEvent.getQPath().getNameElement().getName();
+        Name eventName = childEvent.getPath().getNameElement().getName();
-                int index = childEvent.getQPath().getNameElement().getNormalizedIndex();
+                int index = childEvent.getPath().getNameElement().getNormalizedIndex();
-                HierarchyEntry child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
+                HierarchyEntry child = lookupEntry(childEvent.getItemId(), childEvent.getPath());
-                child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
+                child = lookupEntry(childEvent.getItemId(), childEvent.getPath());
-                child = lookupEntry(childEvent.getItemId(), childEvent.getQPath());
+                child = lookupEntry(childEvent.getItemId(), childEvent.getPath());
+        PathFactory pf = factory.getPathFactory();
-            return Path.ROOT;
+            return pf.getRootPath();
-        try {
-            Path.PathBuilder builder = new Path.PathBuilder();
-            buildPath(builder, this, wspPath);
-            return builder.getPath();
-        } catch (MalformedPathException e) {
-            String msg = "Failed to build path of " + this;
-            throw new RepositoryException(msg, e);
-        }
+        PathBuilder builder = new PathBuilder(pf);
+        buildPath(builder, this, wspPath);
+        return builder.getPath();
-     * @param builder builder currently being used
-     * @param hEntry HierarchyEntry of the state the path should be built for.
+     * @param builder
+     * @param nEntry NodeEntryImpl of the state the path should be built for.
+     * @param wspPath true if the workspace path should be built
-    private static void buildPath(Path.PathBuilder builder, NodeEntryImpl nEntry, boolean wspPath) throws RepositoryException {
+    private static void buildPath(PathBuilder builder, NodeEntryImpl nEntry, boolean wspPath) throws RepositoryException {
-        QName name = (wspPath) ? nEntry.getWorkspaceQName() : nEntry.getQName();
+        Name name = (wspPath) ? nEntry.getWorkspaceName() : nEntry.getName();
-        if (index == Path.INDEX_DEFAULT) {
-            builder.addLast(name);
-        } else {
-            builder.addLast(name, index);
-        }
+        builder.addLast(name, index);
-        QName propName = propertyEntry.getQName();
+        Name propName = propertyEntry.getName();
-    boolean matches(QName oldName, int oldIndex) {
-        return getWorkspaceQName().equals(oldName) && getWorkspaceIndex() == oldIndex;
+    boolean matches(Name oldName, int oldIndex) {
+        return getWorkspaceName().equals(oldName) && getWorkspaceIndex() == oldIndex;
-    boolean matches(QName oldName) {
-        return getWorkspaceQName().equals(oldName);
+    boolean matches(Name oldName) {
+        return getWorkspaceName().equals(oldName);
-    private QName getWorkspaceQName() {
+    private Name getWorkspaceName() {
-            return getQName();
+            return getName();
-        QName childName = eventPath.getNameElement().getName();
+        Name childName = eventPath.getNameElement().getName();
-    private NodeEntry lookupNodeEntry(String uniqueChildId, QName childName, int index) {
+    private NodeEntry lookupNodeEntry(String uniqueChildId, Name childName, int index) {
-    private PropertyEntry lookupPropertyEntry(QName childName) {
+    private PropertyEntry lookupPropertyEntry(Name childName) {
-     * See {@link #notifyUUIDorMIXINRemoved(QName)}
+     * See {@link #notifyUUIDorMIXINRemoved(Name)}
-            if (QName.JCR_UUID.equals(child.getQName())) {
+            if (NameConstants.JCR_UUID.equals(child.getName())) {
-            } else if (QName.JCR_MIXINTYPES.equals(child.getQName())) {
+            } else if (NameConstants.JCR_MIXINTYPES.equals(child.getName())) {
-            log.debug("Property with name " + child.getQName() + " does not exist (anymore)");
+            log.debug("Property with name " + child.getName() + " does not exist (anymore)");
-            log.debug("Unable to access child property " + child.getQName(), e.getMessage());
+            log.debug("Unable to access child property " + child.getName(), e.getMessage());
-    private void notifyUUIDorMIXINRemoved(QName propName) {
-        if (QName.JCR_UUID.equals(propName)) {
+    private void notifyUUIDorMIXINRemoved(Name propName) {
+        if (NameConstants.JCR_UUID.equals(propName)) {
-        } else if (QName.JCR_MIXINTYPES.equals(propName)) {
+        } else if (NameConstants.JCR_MIXINTYPES.equals(propName)) {
-                state.setMixinTypeNames(QName.EMPTY_ARRAY);
+                state.setMixinTypeNames(Name.EMPTY_ARRAY);
-     * @param createNewList if true, both properties and childNodeEntries are
-     * copied to new list, since recursive calls may call this node state to
-     * inform the removal of a child entry.
-        List sns = childNodeEntries().get(cne.getQName());
+        List sns = childNodeEntries().get(cne.getName());
-    private boolean containsAtticChild(List siblings, QName childName, int childIndex) {
+    private boolean containsAtticChild(List siblings, Name childName, int childIndex) {
-        private QName oldName;
+        private Name oldName;
-        private RevertInfo(NodeEntryImpl oldParent, QName oldName, int oldIndex) {
+        private RevertInfo(NodeEntryImpl oldParent, Name oldName, int oldIndex) {
-                    List sns = childNodeEntries.get(ne.getQName());
+                    List sns = childNodeEntries.get(ne.getName());
-            return oldParent != getParent() || !getQName().equals(oldName);
+            return oldParent != getParent() || !getName().equals(oldName);
