JCR-1456: Database connection pooling

Merge back all changes from the JCR-1456 sandbox branch.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@886191 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.util.db.ConnectionFactory;
+    /** Name of the data source configuration element. */
+    public static final String DATASOURCES_ELEMENT = "DataSources";
+
+    /** Name of the data source configuration element. */
+    public static final String DATASOURCE_ELEMENT = "DataSource";
+
+     * The repositories {@link ConnectionFactory}. 
+     */
+    private final ConnectionFactory connectionFactory;
+
+    /**
-    public RepositoryConfigurationParser(Properties variables) {
+    public RepositoryConfigurationParser(Properties variables, ConnectionFactory connectionFactory) {
+        this.connectionFactory = connectionFactory;
+        // Optional data source configuration
+        DataSourceConfig dsc = parseDataSourceConfig(root);
+
-                maxIdleTime, template, vc, qhf, cc, dsf, rlf, this);
+                maxIdleTime, template, vc, qhf, cc, dsf, rlf, dsc, connectionFactory, this);
+    }
+
+    
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    protected BeanConfig parseBeanConfig(Element parent, String name) throws ConfigurationException {
+        BeanConfig cfg = super.parseBeanConfig(parent, name);
+        cfg.setConnectionFactory(connectionFactory);
+        return cfg;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    protected BeanConfig parseBeanConfig(Element element) throws ConfigurationException {
+        BeanConfig cfg = super.parseBeanConfig(element);
+        cfg.setConnectionFactory(connectionFactory);
+        return cfg;
+     * TODO
+     * 
+     * @param parent
+     * @return
+     * @throws ConfigurationException
+     */
+    protected DataSourceConfig parseDataSourceConfig(Element parent)
+            throws ConfigurationException {
+        DataSourceConfig dsc = new DataSourceConfig();
+        NodeList children = parent.getChildNodes();
+        for (int i = 0; i < children.getLength(); i++) {
+            Node child = children.item(i);
+            if (child.getNodeType() == Node.ELEMENT_NODE
+                    && DATASOURCES_ELEMENT.equals(child.getNodeName())) {
+                Element element = (Element) child;
+                NodeList children2 = element.getChildNodes();
+                // Process the DataSource entries:
+                for (int j = 0; j < children2.getLength(); j++) {
+                    Node child2 = children2.item(j);
+                    if (child2.getNodeType() == Node.ELEMENT_NODE
+                            && DATASOURCE_ELEMENT.equals(child2.getNodeName())) {
+                        Element dsdef = (Element) child2;
+                        Properties props = parseParameters(dsdef);
+                        dsc.addDataSourceDefinition(props);
+                    }
+                }
+            }
+        }
+        return dsc;
+    }
+
+    /**
-     * variables.
+     * variables and the same connection factory as this parser.
-        return new RepositoryConfigurationParser(props);
+        return new RepositoryConfigurationParser(props, connectionFactory);
