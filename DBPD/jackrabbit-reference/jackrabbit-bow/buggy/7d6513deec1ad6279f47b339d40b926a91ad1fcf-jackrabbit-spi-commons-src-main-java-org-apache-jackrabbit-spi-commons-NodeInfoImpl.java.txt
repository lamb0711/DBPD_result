- add missing @Override annotation
- parametrize generic types
- remove unnecessary unboxing


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915837 13f79535-47bb-0310-9956-ffa450edef68

-    private final List references;
+    private final List<PropertyId> references;
-    private final List propertyIds;
+    private final List<PropertyId> propertyIds;
-    private final List childInfos;
+    private final List<ChildInfo> childInfos;
-            PropertyId[] refs = nodeInfo.getReferences();
-            List serRefs = new ArrayList();
-            for (int i = 0; i < refs.length; i++) {
-                NodeId parentId = refs[i].getParentId();
+            List<PropertyId> serRefs = new ArrayList<PropertyId>();
+            for (PropertyId ref : nodeInfo.getReferences()) {
+                NodeId parentId = ref.getParentId();
-                serRefs.add(idFactory.createPropertyId(parentId, refs[i].getName()));
+                serRefs.add(idFactory.createPropertyId(parentId, ref.getName()));
-            final Iterator propIds = nodeInfo.getPropertyIds();
-            final Iterator childInfos = nodeInfo.getChildInfos();
+            final Iterator<PropertyId> propIds = nodeInfo.getPropertyIds();
+            final Iterator<ChildInfo> childInfos = nodeInfo.getChildInfos();
-                    new Iterator() {
+                    new Iterator<PropertyId>() {
-                        public Object next() {
-                            PropertyId propId = (PropertyId) propIds.next();
+                        public PropertyId next() {
+                            PropertyId propId = propIds.next();
-                    new Iterator() {
+                    new Iterator<ChildInfo>() {
-                        public Object next() {
-                            ChildInfo cInfo = (ChildInfo) childInfos.next();
+                        public ChildInfo next() {
+                            ChildInfo cInfo = childInfos.next();
-     * @deprecated Use {@link #NodeInfoImpl(Name, Path, NodeId, int, Name, Name[], Iterator, Iterator)}
+     * @deprecated Use {@link #NodeInfoImpl(Path, NodeId, int, Name, Name[], Iterator, Iterator, Iterator)}
-                        Iterator references, Iterator propertyIds,
-                        Iterator childInfos) {
+                        Iterator<PropertyId> references, Iterator<PropertyId> propertyIds,
+                        Iterator<ChildInfo> childInfos) {
-                        Name[] mixinNames, Iterator references, Iterator propertyIds,
-                        Iterator childInfos) {
+                        Name[] mixinNames, Iterator<PropertyId> references,
+                        Iterator<PropertyId> propertyIds,
+                        Iterator<ChildInfo> childInfos) {
-        this.references = new ArrayList();
+        this.references = new ArrayList<PropertyId>();
-        this.propertyIds = new ArrayList();
+        this.propertyIds = new ArrayList<PropertyId>();
-            this.childInfos = new ArrayList();
+            this.childInfos = new ArrayList<ChildInfo>();
-        return (PropertyId[]) references.toArray(new PropertyId[references.size()]);
+        return references.toArray(new PropertyId[references.size()]);
-    public Iterator getPropertyIds() {
+    public Iterator<PropertyId> getPropertyIds() {
-    public Iterator getChildInfos() {
+    public Iterator<ChildInfo> getChildInfos() {
