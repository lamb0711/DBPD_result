JCR-2885: Move tika-parsers dependency to deployment packages

Drop the JackrabbitParser backwards compatibility layer in favor of
a new tikaConfigPath configuration option.

Use the Tika autoloading feature to automatically load a blocking
parser class for test cases that measure index queue functionality.
We no longer need to pollute src/main/java with this test functionality.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1072006 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.tika.config.TikaConfig;
+import org.apache.tika.parser.AutoDetectParser;
+import java.net.MalformedURLException;
+import java.net.URL;
-     * The parser for extracting text content from binary properties.
+     * Path of the Tika configuration file used for text extraction.
-    private final JackrabbitParser parser = new JackrabbitParser();
+    private String tikaConfigPath = null;
+
+    /**
+     * The Tika parser for extracting text content from binary properties.
+     * Initialized by the {@link #getParser()} method during first access.
+     */
+    private Parser parser = null;
+     * Returns the path of the Tika configuration used for text extraction.
+     *
+     * @return path of the Tika configuration file
+     */
+    public String getTikaConfigPath() {
+        return tikaConfigPath;
+    }
+
+    /**
+     * Sets the path of the Tika configuration used for text extraction.
+     * The path can be either a file system or a class resource path.
+     * The default setting is the tika-config.xml class resource relative
+     * to org.apache.core.query.lucene.
+     *
+     * @param tikaConfigPath path of the Tika configuration file
+     */
+    public void setTikaConfigPath(String tikaConfigPath) {
+        this.tikaConfigPath = tikaConfigPath;
+    }
+
+    /**
-    public Parser getParser() {
+    public synchronized Parser getParser() {
+        if (parser == null) {
+            URL url = null;
+            if (tikaConfigPath != null) {
+                File file = new File(tikaConfigPath);
+                if (file.exists()) {
+                    try {
+                        url = file.toURI().toURL();
+                    } catch (MalformedURLException e) {
+                        log.warn("Invalid Tika configuration path: " + file, e);
+                    }
+                } else {
+                    ClassLoader loader = SearchIndex.class.getClassLoader();
+                    url = loader.getResource(tikaConfigPath);
+                }
+            }
+            if (url == null) {
+                url = SearchIndex.class.getResource("tika-config.xml");
+            }
+
+            TikaConfig config = null;
+            if (url != null) {
+                try {
+                    config = new TikaConfig(url);
+                } catch (Exception e) {
+                    log.warn("Tika configuration not available: " + url, e);
+                }
+            }
+            if (config == null) {
+                config = TikaConfig.getDefaultConfig();
+            }
+
+            parser = new AutoDetectParser(config);
+        }
-                getContext().getExecutor(), parser);
+                getContext().getExecutor(), getParser());
-        parser.setTextFilterClasses(filterClasses);
+        log.warn("The textFilterClasses configuration parameter has"
+                + " been deprecated, and the configured value will"
+                + " be ignored: {}", filterClasses);
