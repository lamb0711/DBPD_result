JCR-2028: JSR 283 JCR Path

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@772659 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.value.ValueFactoryImpl;
+import org.apache.jackrabbit.spi.commons.conversion.IdentifierResolver;
-import org.apache.jackrabbit.value.ValueFactoryImpl;
-        implements javax.jcr.Session, JackrabbitSession, NamespaceResolver, NamePathResolver, Dumpable {
+        implements javax.jcr.Session, JackrabbitSession, NamespaceResolver, NamePathResolver, IdentifierResolver, Dumpable {
-        namePathResolver = new DefaultNamePathResolver(this, true);
+        namePathResolver = new DefaultNamePathResolver(this, this, true);
+    public Path getQPath(String path, boolean normalizeIdentifier) throws MalformedPathException, IllegalNameException, NamespaceException {
+        return namePathResolver.getQPath(path, normalizeIdentifier);
+    }
+
+    //---------------------------------------------------< IdentifierResolver >
+    /**
+     * @see IdentifierResolver#getPath(String)
+     */
+    public Path getPath(String identifier) throws MalformedPathException {
+        try {
+            return getHierarchyManager().getPath(NodeId.valueOf(identifier));
+        } catch (RepositoryException e) {
+            throw new MalformedPathException("Identifier '" + identifier + "' cannot be resolved.");
+        }
+    }
+
+    /**
+     * @see IdentifierResolver#checkFormat(String)
+     */
+    public void checkFormat(String identifier) throws MalformedPathException {
+        try {
+            NodeId.valueOf(identifier);
+        } catch (IllegalArgumentException e) {
+            throw new MalformedPathException("Invalid identifier: " + identifier);
+        }
+    }
+
-            valueFactory = ValueFactoryImpl.getInstance();
+            valueFactory = new ValueFactoryImpl(this);
-
