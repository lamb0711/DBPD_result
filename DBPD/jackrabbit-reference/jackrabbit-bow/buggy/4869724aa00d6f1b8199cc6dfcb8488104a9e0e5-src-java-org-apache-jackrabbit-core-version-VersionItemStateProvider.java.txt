- moved virtual nodestate providers down to shared states (part of solving JCR-45)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@156034 13f79535-47bb-0310-9956-ffa450edef68

-    private final HistoryRootNodeState root;
+    private HistoryRootNodeState root;
-    private final NodeTypeManagerImpl ntMgr;
+    private final NodeTypeRegistry ntReg;
+
+    /** the parent id */
+    private final String parentId;
+
+    /** the root node id */
+    private final String rootNodeId;
+
-    public VersionItemStateProvider(VersionManager vMgr, NodeTypeManagerImpl ntMgr, String rootId, String parentId) throws RepositoryException {
+    public VersionItemStateProvider(VersionManager vMgr, NodeTypeRegistry ntReg, String rootId, String parentId) throws RepositoryException {
-        this.ntMgr = ntMgr;
-        NDEF_VERSION = new NodeDefId(getNodeTypeManager().getNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSION).unwrap());
-        NDEF_VERSION_HISTORY = new NodeDefId(getNodeTypeManager().getNodeType(NT_UNSTRUCTURED).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSIONHISTORY).unwrap());
-        NDEF_VERSION_HISTORY_ROOT = new NodeDefId(getNodeTypeManager().getNodeType(REP_SYSTEM).getApplicableChildNodeDef(JCR_VERSIONSTORAGE, REP_VERSIONSTORAGE).unwrap());
-        NDEF_VERSION_LABELS = new NodeDefId(getNodeTypeManager().getNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_VERSIONLABELS, NT_VERSIONLABELS).unwrap());
+        this.ntReg = ntReg;
+        this.rootNodeId = rootId;
+        this.parentId = parentId;
+        NDEF_VERSION = new NodeDefId(ntReg.getEffectiveNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSION));
+        NDEF_VERSION_HISTORY = new NodeDefId(ntReg.getEffectiveNodeType(NT_UNSTRUCTURED).getApplicableChildNodeDef(JCR_ROOTVERSION, NT_VERSIONHISTORY));
+        NDEF_VERSION_HISTORY_ROOT = new NodeDefId(ntReg.getEffectiveNodeType(REP_SYSTEM).getApplicableChildNodeDef(JCR_VERSIONSTORAGE, REP_VERSIONSTORAGE));
+        NDEF_VERSION_LABELS = new NodeDefId(ntReg.getEffectiveNodeType(NT_VERSIONHISTORY).getApplicableChildNodeDef(JCR_VERSIONLABELS, NT_VERSIONLABELS));
-        this.root = new HistoryRootNodeState(this, vMgr, parentId, rootId);
-        this.root.setDefinitionId(NDEF_VERSION_HISTORY_ROOT);
+        createRootNodeState();
+    }
+
+    /**
+     * Creates a new root node state
+     * @throws RepositoryException
+     */
+    private void createRootNodeState() throws RepositoryException {
+        root = new HistoryRootNodeState(this, vMgr, parentId, rootNodeId);
+        root.setDefinitionId(NDEF_VERSION_HISTORY_ROOT);
-        PropertyDefImpl def = getApplicablePropertyDef(parent, name, type, multiValued);
+        PropDef def = getApplicablePropertyDef(parent, name, type, multiValued);
-        prop.setDefinitionId(new PropDefId(def.unwrap()));
+        prop.setDefinitionId(new PropDefId(def));
-        NodeTypeImpl nodeType = getNodeTypeManager().getNodeType(nodeTypeName);
-        NodeDefImpl def;
+        NodeDefId def;
-            def = getApplicableChildNodeDef(parent, name, nodeType == null ? null : nodeType.getQName());
+            def = new NodeDefId(getApplicableChildNodeDef(parent, name, nodeTypeName));
-            NodeTypeRegistry ntReg = getNodeTypeManager().getNodeTypeRegistry();
+            NodeTypeRegistry ntReg = getNodeTypeRegistry();
-            def = getNodeTypeManager().getNodeDef(new NodeDefId(cnd));
-        }
-        if (nodeType == null) {
-            // use default node type
-            nodeType = (NodeTypeImpl) def.getDefaultPrimaryType();
+            ntReg.getNodeDef(new NodeDefId(cnd));
+            def = new NodeDefId(cnd);
-        state.setDefinitionId(new NodeDefId(def.unwrap()));
+        state.setDefinitionId(def);
-    private NodeTypeManagerImpl getNodeTypeManager() {
-        return ntMgr;
+    private NodeTypeRegistry getNodeTypeRegistry() {
+        return ntReg;
-    protected PropertyDefImpl getApplicablePropertyDef(NodeState parent, QName propertyName,
-                                                       int type, boolean multiValued)
+    protected PropDef getApplicablePropertyDef(NodeState parent, QName propertyName,
+                                               int type, boolean multiValued)
-        PropDef pd = getEffectiveNodeType(parent).getApplicablePropertyDef(propertyName, type, multiValued);
-        return getNodeTypeManager().getPropDef(new PropDefId(pd));
+        return getEffectiveNodeType(parent).getApplicablePropertyDef(propertyName, type, multiValued);
-    protected NodeDefImpl getApplicableChildNodeDef(NodeState parent, QName nodeName, QName nodeTypeName)
+    protected ChildNodeDef getApplicableChildNodeDef(NodeState parent, QName nodeName, QName nodeTypeName)
-        ChildNodeDef cnd = getEffectiveNodeType(parent).getApplicableChildNodeDef(nodeName, nodeTypeName);
-        return getNodeTypeManager().getNodeDef(new NodeDefId(cnd));
+        return getEffectiveNodeType(parent).getApplicableChildNodeDef(nodeName, nodeTypeName);
-        NodeTypeRegistry ntReg = getNodeTypeManager().getNodeTypeRegistry();
+        NodeTypeRegistry ntReg = getNodeTypeRegistry();
+
+    /**
+     * @see ItemStateListener#stateCreated
+     */
+    public void stateCreated(ItemState created) {
+    }
+
+    /**
+     * @see ItemStateListener#stateModified
+     */
+    public void stateModified(ItemState modified) {
+    }
+
+    /**
+     * @see ItemStateListener#stateDestroyed
+     */
+    public void stateDestroyed(ItemState destroyed) {
+        destroyed.removeListener(this);
+        if (destroyed.isNode() && ((NodeState) destroyed).getUUID().equals(rootNodeId)) {
+            try {
+                createRootNodeState();
+            } catch (RepositoryException e) {
+                // ignore
+            }
+        }
+        nodes.remove(destroyed.getId());
+    }
+
+    /**
+     * @see ItemStateListener#stateDiscarded
+     */
+    public void stateDiscarded(ItemState discarded) {
+        discarded.removeListener(this);
+        if (discarded.isNode() && ((NodeState) discarded).getUUID().equals(rootNodeId)) {
+            try {
+                createRootNodeState();
+            } catch (RepositoryException e) {
+                // ignore
+            }
+        }
+        nodes.remove(discarded.getId());
+    }
