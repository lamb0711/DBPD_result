core.state: 
replaced abstract ItemStateCache with interface of same name and added ItemStateMap, ItemStateReferenceMap, ItemStateReferenceCache & LRUItemStateCache which provide cleaner semantics and improved memory usage behaviour

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@227042 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.PrintStream;
-public class LocalItemStateManager extends ItemStateCache
+public class LocalItemStateManager
+     * cache of weak references to ItemState objects issued by this
+     * ItemStateManager
+     */
+    private final ItemStateReferenceCache cache;
+
+    /**
-    public LocalItemStateManager(SharedItemStateManager sharedStateMgr, WorkspaceImpl wspImpl) {
+    public LocalItemStateManager(SharedItemStateManager sharedStateMgr,
+                                 WorkspaceImpl wspImpl) {
+        cache = new ItemStateReferenceCache();
-        evictAll();
+        cache.evictAll();
-        cache(state);
+        cache.cache(state);
-        cache(state);
+        cache.cache(state);
-    /**
-     * Dumps the state of this <code>LocalItemStateManager</code> instance
-     * (used for diagnostic purposes).
-     *
-     * @param ps
-     */
-    public void dump(PrintStream ps) {
-        ps.println("LocalItemStateManager (" + this + ")");
-        ps.println();
-        super.dump(ps);
-    }
-
-        synchronized (cacheMonitor) {
-            state = retrieve(id);
+        synchronized (cache) {
+            state = cache.retrieve(id);
-        if (isCached(id)) {
+        if (cache.isCached(id)) {
-        evict(destroyed.getId());
+        cache.evict(destroyed.getId());
-        evict(discarded.getId());
+        cache.evict(discarded.getId());
