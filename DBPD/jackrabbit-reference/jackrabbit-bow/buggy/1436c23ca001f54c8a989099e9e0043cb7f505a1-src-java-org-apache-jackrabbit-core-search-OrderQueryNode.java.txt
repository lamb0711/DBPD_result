- Removed JCRQL implementation
- Added proper QName support to search
- redesigned parsing and formating of queries (better separation of abstract query tree and concrete syntax)
- Some improvements in SQL: colon is now supported in identifier without having to use double quotes, LIKE now supports escaping

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@125778 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.QName;
+
-    private String[] properties;
+    private QName[] properties;
-    public OrderQueryNode(QueryNode parent, String[] properties, boolean[] orderSpecs) {
+    public OrderQueryNode(QueryNode parent, QName[] properties, boolean[] orderSpecs) {
-        if (properties.length != orderSpecs.length)
+        if (properties.length != orderSpecs.length) {
+            throw new IllegalArgumentException("Number of propertes and orderSpecs must be the same");
+        }
-     * Returns a String array that contains the name of the properties
+     * Returns a <code>QName</code> array that contains the name of the properties
-    public String[] getOrderByProperties() {
+    public QName[] getOrderByProperties() {
-    /**
-     * Returns a JCRQL representation for this query node.
-     *
-     * @return a JCRQL representation for this query node.
-     */
-    public String toJCRQLString() {
-        StringBuffer sb = new StringBuffer("ORDER BY");
-        if (properties.length > 0) {
-            String comma = "";
-            for (int i = 0; i < properties.length; i++) {
-                sb.append(comma).append(" ");
-                sb.append(properties[i]);
-                if (isAscending(i)) {
-                    // FIXME really default to descending?
-                    sb.append(" ASCENDING");
-                }
-                comma = ",";
-            }
-        } else {
-            sb.append(" SCORE");
-        }
-        return sb.toString();
-    }
-
-    /**
-     * Returns a JCR SQL representation for this query node.
-     *
-     * @return a JCR SQL representation for this query node.
-     */
-    public String toJCRSQLString() {
-        StringBuffer sb = new StringBuffer("ORDER BY");
-        if (properties.length > 0) {
-            String comma = "";
-            for (int i = 0; i < properties.length; i++) {
-                sb.append(comma).append(" \"");
-                sb.append(properties[i]).append("\"");
-                if (!isAscending(i)) {
-                    sb.append(" DESC");
-                }
-                comma = ",";
-            }
-        } else {
-            sb.append(" SCORE");
-        }
-        return sb.toString();
-    }
-
-    /**
-     * Returns an XPath representation for this query node.
-     *
-     * @return an XPath representation for this query node.
-     */
-    public String toXPathString() {
-        return "";
-    }
