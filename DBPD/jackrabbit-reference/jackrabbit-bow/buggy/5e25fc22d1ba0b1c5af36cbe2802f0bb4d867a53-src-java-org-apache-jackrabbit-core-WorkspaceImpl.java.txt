porting jackrabbit to v0.16.2 of jsr170 spec 
(work in progress...)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@148894 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.xml.DocViewSAXEventGenerator;
-import org.apache.jackrabbit.core.xml.SysViewSAXEventGenerator;
+import org.apache.jackrabbit.core.xml.ImportHandler;
-import org.apache.xml.serialize.OutputFormat;
-import org.apache.xml.serialize.XMLSerializer;
+import org.xml.sax.XMLReader;
+import org.xml.sax.InputSource;
+import org.xml.sax.helpers.XMLReaderFactory;
+import javax.jcr.lock.LockException;
-import java.io.OutputStream;
+import java.io.InputStream;
+     *
-     * for some reason
+     *                             for some reason
+    /**
+     * Creates a workspace with the given name.
+     *
+     * @param workspaceName name of the new workspace
+     * @throws AccessDeniedException if the current session is not allowed to
+     *                               create the workspace
+     * @throws RepositoryException if a workspace with the given name
+     *                             already exists or if another error occurs
+     * @see #getAccessibleWorkspaceNames()
+     */
+    public void createWorkspace(String workspaceName)
+            throws AccessDeniedException, RepositoryException {
+        // check state of this instance
+        sanityCheck();
+
+        session.createWorkspace(workspaceName);
+    }
+
+        // check state of this instance
+        sanityCheck();
+
+        // check state of this instance
+        sanityCheck();
+
-     * @see Workspace#clone(String, String, String)
+     * @see Workspace#clone(String, String, String, boolean)
-    public void clone(String srcWorkspace, String srcAbsPath, String destAbsPath)
+    public void clone(String srcWorkspace, String srcAbsPath,
+                      String destAbsPath, boolean removeExisting)
-            AccessDeniedException, PathNotFoundException,
-            ItemExistsException, RepositoryException {
+            VersionException, AccessDeniedException, PathNotFoundException,
+            ItemExistsException, LockException, RepositoryException {
+
+        // check state of this instance
+        sanityCheck();
+
+        // @todo reimplement Workspace#clone according to new spec
+        // @todo check ckecked-out status
+        // @todo check locked-status status
+
-        HierarchyManagerImpl srcHierMgr = new HierarchyManagerImpl(rep.getRootNodeUUID(), srcStateMgr, session.getNamespaceResolver());
+        HierarchyManagerImpl srcHierMgr =
+                new HierarchyManagerImpl(rep.getRootNodeUUID(), srcStateMgr, session.getNamespaceResolver());
-            throws ConstraintViolationException, AccessDeniedException,
-            PathNotFoundException, ItemExistsException, RepositoryException {
+            throws ConstraintViolationException, VersionException,
+            AccessDeniedException, PathNotFoundException, ItemExistsException,
+            LockException, RepositoryException {
+
+        // check state of this instance
+        sanityCheck();
+
+        // @todo reimplement Workspace#copy according to new spec
+        // @todo check ckecked-out status
+        // @todo check locked-status status
+
-            AccessDeniedException, PathNotFoundException, ItemExistsException,
-            RepositoryException {
+            VersionException, AccessDeniedException, PathNotFoundException,
+            ItemExistsException, LockException, RepositoryException {
+
+        // check state of this instance
+        sanityCheck();
+
+        // @todo reimplement Workspace#copy according to new spec
+        // @todo check ckecked-out status
+        // @todo check locked-status status
+
-            throws ConstraintViolationException, AccessDeniedException,
-            PathNotFoundException, ItemExistsException, RepositoryException {
+            throws ConstraintViolationException, VersionException,
+            AccessDeniedException, PathNotFoundException, ItemExistsException,
+            LockException, RepositoryException {
+
+        // check state of this instance
+        sanityCheck();
+
+        // @todo reimplement Workspace#move according to new spec
+        // @todo check ckecked-out status
+        // @todo check locked-status status
+
+        // check state of this instance
+        sanityCheck();
+
+
+        // check state of this instance
+        sanityCheck();
+
-     * @see Workspace#restore(Version[])
+     * @see Workspace#restore(Version[], boolean)
-    public void restore(Version[] versions) throws UnsupportedRepositoryOperationException, VersionException, RepositoryException {
-        // @todo implement versioning support
+    public void restore(Version[] versions, boolean removeExisting)
+            throws ItemExistsException, UnsupportedRepositoryOperationException,
+            VersionException, LockException, InvalidItemStateException,
+            RepositoryException {
+
+        // check state of this instance
+        sanityCheck();
+
+        // @todo implement Workspace#restore
-     * @see Workspace#exportDocView(String, ContentHandler, boolean, boolean)
+     * @see Workspace#getAccessibleWorkspaceNames
-    public void exportDocView(String absPath, ContentHandler contentHandler, boolean binaryAsLink, boolean noRecurse)
-            throws InvalidSerializedDataException, PathNotFoundException, SAXException, RepositoryException {
-        // check path & retrieve state
-        Path path;
-        Path.PathElement name;
-        NodeState state;
-        try {
-            path = Path.create(absPath, session.getNamespaceResolver(), true);
-            name = path.getNameElement();
-            state = getNodeState(path, hierMgr, stateMgr);
-        } catch (MalformedPathException mpe) {
-            String msg = "invalid path: " + absPath;
-            log.error(msg, mpe);
-            throw new RepositoryException(msg, mpe);
-        }
+    public String[] getAccessibleWorkspaceNames() throws RepositoryException {
+        // check state of this instance
+        sanityCheck();
-        // check read access
-        if (!session.getAccessManager().isGranted(state.getId(), AccessManager.READ)) {
-            throw new PathNotFoundException(absPath);
-        }
-
-        new DocViewSAXEventGenerator(state, name.getName(), noRecurse, binaryAsLink,
-                stateMgr, rep.getNamespaceRegistry(),
-                session.getAccessManager(), hierMgr, contentHandler).serialize();
+        return session.getWorkspaceNames();
-     * @see Workspace#exportDocView(String, OutputStream, boolean, boolean)
+     * @see Workspace#getImportContentHandler(String, int)
-    public void exportDocView(String absPath, OutputStream out, boolean binaryAsLink, boolean noRecurse)
-            throws InvalidSerializedDataException, IOException, PathNotFoundException, RepositoryException {
-        OutputFormat format = new OutputFormat("xml", "UTF-8", true);
-        XMLSerializer serializer = new XMLSerializer(out, format);
+    public ContentHandler getImportContentHandler(String parentAbsPath,
+                                                  int uuidBehavior)
+            throws PathNotFoundException, ConstraintViolationException,
+            VersionException, LockException, RepositoryException {
+
+        // check state of this instance
+        sanityCheck();
+
+        // @todo implement Workspace#getImportContentHandler
+        throw new RepositoryException("not yet implemented");
+    }
+
+    /**
+     * @see Workspace#importXML(String, InputStream, int)
+     */
+    public void importXML(String parentAbsPath, InputStream in,
+                          int uuidBehavior)
+            throws IOException, PathNotFoundException, ItemExistsException,
+            ConstraintViolationException, InvalidSerializedDataException,
+            LockException, RepositoryException {
+
+        ImportHandler handler =
+                (ImportHandler) getImportContentHandler(parentAbsPath, uuidBehavior);
-            exportDocView(absPath, serializer.asContentHandler(), binaryAsLink, noRecurse);
+            XMLReader parser =
+                    XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser");
+            parser.setContentHandler(handler);
+            parser.setErrorHandler(handler);
+            parser.parse(new InputSource(in));
-            throw new RepositoryException(se);
-        }
-    }
-
-    /**
-     * @see Workspace#exportSysView(String, ContentHandler, boolean, boolean)
-     */
-    public void exportSysView(String absPath, ContentHandler contentHandler, boolean binaryAsLink, boolean noRecurse)
-            throws PathNotFoundException, SAXException, RepositoryException {
-        // check path & retrieve state
-        Path path;
-        Path.PathElement name;
-        NodeState state;
-        try {
-            path = Path.create(absPath, session.getNamespaceResolver(), true);
-            name = path.getNameElement();
-            state = getNodeState(path, hierMgr, stateMgr);
-        } catch (MalformedPathException mpe) {
-            String msg = "invalid path: " + absPath;
-            log.error(msg, mpe);
-            throw new RepositoryException(msg, mpe);
-        }
-
-        // check read access
-        if (!session.getAccessManager().isGranted(state.getId(), AccessManager.READ)) {
-            throw new PathNotFoundException(absPath);
-        }
-
-        new SysViewSAXEventGenerator(state, name.getName(), noRecurse, binaryAsLink,
-                stateMgr, rep.getNamespaceRegistry(),
-                session.getAccessManager(), hierMgr, contentHandler).serialize();
-    }
-
-    /**
-     * @see Workspace#exportSysView(String, OutputStream, boolean, boolean)
-     */
-    public void exportSysView(String absPath, OutputStream out, boolean binaryAsLink, boolean noRecurse) throws IOException, PathNotFoundException, RepositoryException {
-        OutputFormat format = new OutputFormat("xml", "UTF-8", true);
-        XMLSerializer serializer = new XMLSerializer(out, format);
-        try {
-            exportSysView(absPath, serializer.asContentHandler(), binaryAsLink, noRecurse);
-        } catch (SAXException se) {
-            throw new RepositoryException(se);
+            // check for wrapped repository exception
+            Exception e = se.getException();
+            if (e != null && e instanceof RepositoryException) {
+                throw (RepositoryException) e;
+            } else {
+                String msg = "failed to parse XML stream";
+                log.error(msg, se);
+                throw new InvalidSerializedDataException(msg, se);
+            }
