JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Element;
-import org.jdom.Namespace;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.apache.jackrabbit.webdav.xml.Namespace;
+import org.apache.jackrabbit.webdav.xml.XmlSerializable;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
-public class Type {
+public class Type implements XmlSerializable {
-    private final String name;
+    private final String localName;
-        this.name = name;
+        this.localName = name;
+     * @see org.apache.jackrabbit.webdav.xml.XmlSerializable#toXml(Document)
-    public Element toXml() {
-        return new Element(name, namespace);
-    }
-
-    /**
-     * Create a <code>Type</code> object from the given Xml element.
-     *
-     * @param lockType
-     * @return <code>Type</code> object.
-     */
-    public static Type create(Element lockType) {
-        if (lockType == null) {
-            throw new IllegalArgumentException("'null' is not valid lock type entry.");
-        }
-        return create(lockType.getName(), lockType.getNamespace());
-    }
-
-    /**
-     * Create a <code>Type</code> object from the given name and namespace.
-     *
-     * @param name
-     * @param namespace
-     * @return <code>Type</code> object.
-     */
-    public static Type create(String name, Namespace namespace) {
-	String key = "{" + namespace.getURI() + "}" + name;
-        if (types.containsKey(key)) {
-            return (Type) types.get(key);
-        } else {
-            Type type = new Type(name, namespace);
-            types.put(key, type);
-            return type;
-        }
+    public Element toXml(Document document) {
+        Element lockType = DomUtil.createElement(document, DavConstants.XML_LOCKTYPE, DavConstants.NAMESPACE);
+        DomUtil.addChildElement(lockType, localName, namespace);
+        return lockType;
-	    return name.equals(other.name) && namespace.equals(other.namespace);
+	    return localName.equals(other.localName) && namespace.equals(other.namespace);
+
+    /**
+     * Create a <code>Type</code> object from the given Xml element.
+     *
+     * @param lockType
+     * @return <code>Type</code> object.
+     */
+    public static Type createFromXml(Element lockType) {
+        if (lockType != null && DavConstants.XML_LOCKTYPE.equals(lockType.getLocalName())) {
+            // we have the parent element and must retrieve the type first
+            lockType = DomUtil.getFirstChildElement(lockType);
+        }
+        if (lockType == null) {
+            throw new IllegalArgumentException("'null' is not valid lock type entry.");
+        }
+        Namespace namespace = Namespace.getNamespace(lockType.getPrefix(), lockType.getNamespaceURI());
+        return create(lockType.getLocalName(), namespace);
+    }
+
+    /**
+     * Create a <code>Type</code> object from the given localName and namespace.
+     *
+     * @param localName
+     * @param namespace
+     * @return <code>Type</code> object.
+     */
+    public static Type create(String localName, Namespace namespace) {
+        String key = DomUtil.getQualifiedName(localName, namespace);
+        if (types.containsKey(key)) {
+            return (Type) types.get(key);
+        } else {
+            Type type = new Type(localName, namespace);
+            types.put(key, type);
+            return type;
+        }
+    }
