JCR-445 - repository is locked by WorkspaceJanitor when another workspace is reindexing

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@410482 13f79535-47bb-0310-9956-ffa450edef68

+import EDU.oswego.cs.dl.util.concurrent.ReadWriteLock;
+import EDU.oswego.cs.dl.util.concurrent.ReentrantWriterPreferenceReadWriteLock;
-    /**
-     * workspace janitor thread that is responsible for temporarily
-     * shutting down workspaces that have been idle for a specific
-     * amount of time
-     */
-    private Thread wspJanitor;
-
-            wspJanitor = new WorkspaceJanitor(maxIdleTime * 1000);
+            Thread wspJanitor = new Thread(new WorkspaceJanitor(maxIdleTime * 1000));
+            wspJanitor.setName("WorkspaceJanitor");
+            wspJanitor.setPriority(Thread.MIN_PRIORITY);
+            wspJanitor.setDaemon(true);
-        wspInfo.initialize();
+        if (!wspInfo.initialize()) {
+            return;
+        }
+
-        return (String[]) wspInfos.keySet().toArray(new String[wspInfos.keySet().size()]);
+        synchronized (wspInfos) {
+            return (String[]) wspInfos.keySet().toArray(new String[wspInfos.keySet().size()]);
+        }
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
-            throw new NoSuchWorkspaceException(workspaceName);
-        }
-
-        synchronized (wspInfo) {
-            if (!wspInfo.isInitialized()) {
-                try {
-                    initWorkspace(wspInfo);
-                } catch (RepositoryException e) {
-                    log.error("Unable to initialize workspace '" + workspaceName + "'", e);
-                    throw new NoSuchWorkspaceException(workspaceName);
-                }
+        WorkspaceInfo wspInfo;
+        synchronized (wspInfos) {
+            wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+            if (wspInfo == null) {
+                throw new NoSuchWorkspaceException(workspaceName);
+
+        try {
+            initWorkspace(wspInfo);
+        } catch (RepositoryException e) {
+            log.error("Unable to initialize workspace '" + workspaceName + "'", e);
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
+        // reset idle timestamp
+        wspInfo.setIdleTimestamp(0);
-    protected synchronized void createWorkspace(String workspaceName)
+    protected void createWorkspace(String workspaceName)
-        if (wspInfos.containsKey(workspaceName)) {
-            throw new RepositoryException("workspace '"
-                    + workspaceName + "' already exists.");
-        }
+        synchronized (wspInfos) {
+            if (wspInfos.containsKey(workspaceName)) {
+                throw new RepositoryException("workspace '"
+                        + workspaceName + "' already exists.");
+            }
-        // create the workspace configuration
-        WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName);
-        WorkspaceInfo info = createWorkspaceInfo(config);
-        wspInfos.put(workspaceName, info);
+            // create the workspace configuration
+            WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName);
+            WorkspaceInfo info = createWorkspaceInfo(config);
+            wspInfos.put(workspaceName, info);
+        }
-    protected synchronized void createWorkspace(String workspaceName,
+    protected void createWorkspace(String workspaceName,
-        if (wspInfos.containsKey(workspaceName)) {
-            throw new RepositoryException("workspace '"
-                    + workspaceName + "' already exists.");
-        }
+        synchronized (wspInfos) {
+            if (wspInfos.containsKey(workspaceName)) {
+                throw new RepositoryException("workspace '"
+                        + workspaceName + "' already exists.");
+            }
-        // create the workspace configuration
-        WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName, configTemplate);
-        WorkspaceInfo info = createWorkspaceInfo(config);
-        wspInfos.put(workspaceName, info);
+            // create the workspace configuration
+            WorkspaceConfig config = repConfig.createWorkspaceConfig(workspaceName, configTemplate);
+            WorkspaceInfo info = createWorkspaceInfo(config);
+            wspInfos.put(workspaceName, info);
+        }
-    protected final synchronized SessionImpl createSession(AuthContext loginContext,
+    protected final SessionImpl createSession(AuthContext loginContext,
-        ses.addListener(this);
-        activeSessions.put(ses, ses);
-        // reset idle timestamp
-        wspInfo.setIdleTimestamp(0);
+        markActive(ses);
-    protected final synchronized SessionImpl createSession(Subject subject,
+    protected final SessionImpl createSession(Subject subject,
-        ses.addListener(this);
-        activeSessions.put(ses, ses);
-        // reset idle timestamp
-        wspInfo.setIdleTimestamp(0);
+        markActive(ses);
+    /**
+     * Puts the given session to the list of active sessions and registers this
+     * repository as listener.
+     *
+     * @param session
+     */
+    protected void markActive(SessionImpl session) {
+        synchronized (activeSessions) {
+            session.addListener(this);
+            activeSessions.put(session, session);
+        }
+    }
+
-        int cnt = 0;
-        SessionImpl[] sa = new SessionImpl[activeSessions.size()];
-        for (Iterator it = activeSessions.values().iterator(); it.hasNext(); cnt++) {
-            sa[cnt] = (SessionImpl) it.next();
+        SessionImpl[] sa;
+        synchronized (activeSessions) {
+            int cnt = 0;
+            sa = new SessionImpl[activeSessions.size()];
+            for (Iterator it = activeSessions.values().iterator(); it.hasNext(); cnt++) {
+                sa[cnt] = (SessionImpl) it.next();
+            }
-        for (Iterator it = wspInfos.values().iterator(); it.hasNext();) {
-            WorkspaceInfo wspInfo = (WorkspaceInfo) it.next();
-            synchronized (wspInfo) {
-                if (wspInfo.isInitialized()) {
-                    wspInfo.dispose();
-                }
+        synchronized (wspInfos) {
+            for (Iterator it = wspInfos.values().iterator(); it.hasNext();) {
+                WorkspaceInfo wspInfo = (WorkspaceInfo) it.next();
+                wspInfo.dispose();
-
-        if (wspJanitor != null) {
-            wspJanitor.interrupt();
-            wspJanitor = null;
-        }
+        // wakeup eventual waiters
+        notifyAll();
-     * <code>org/apache/jackrabbit/core/repository.properties</code> resource
+     * <code>com/day/crx/core/repository.properties</code> resource
-    public synchronized void loggedOut(SessionImpl session) {
-        // remove session from active sessions
-        activeSessions.remove(session);
+    public void loggedOut(SessionImpl session) {
+        synchronized (activeSessions) {
+            // remove session from active sessions
+            activeSessions.remove(session);
+        }
+         * lock that guards the init sequence
+         */
+        private final ReadWriteLock initLock =
+                new ReentrantWriterPreferenceReadWriteLock();
+
+        /**
-        synchronized boolean isInitialized() {
-            return initialized;
+        boolean isInitialized() {
+            try {
+                initLock.readLock().attempt(0);
+            } catch (InterruptedException e) {
+                return false;
+            }
+            // can't use 'finally' pattern here
+            boolean ret = initialized;
+            initLock.readLock().release();
+            return ret;
-        synchronized FileSystem getFileSystem() {
-            if (!initialized) {
+        FileSystem getFileSystem() {
+            if (!isInitialized()) {
-        synchronized PersistenceManager getPersistenceManager()
+        PersistenceManager getPersistenceManager()
-            if (!initialized) {
+            if (!isInitialized()) {
-        synchronized SharedItemStateManager getItemStateProvider()
+        SharedItemStateManager getItemStateProvider()
-            if (!initialized) {
+            if (!isInitialized()) {
-        synchronized ObservationManagerFactory getObservationManagerFactory() {
-            if (!initialized) {
+        ObservationManagerFactory getObservationManagerFactory() {
+            if (!isInitialized()) {
-        synchronized SearchManager getSearchManager() throws RepositoryException {
-            if (!initialized) {
+        SearchManager getSearchManager() throws RepositoryException {
+            if (!isInitialized()) {
-            if (searchMgr == null) {
-                if (config.getSearchConfig() == null) {
-                    // no search index configured
-                    return null;
+            synchronized (this) {
+                if (searchMgr == null) {
+                    if (config.getSearchConfig() == null) {
+                        // no search index configured
+                        return null;
+                    }
+                    // search manager is lazily instantiated in order to avoid
+                    // 'chicken & egg' bootstrap problems
+                    searchMgr = new SearchManager(config.getSearchConfig(),
+                            nsReg,
+                            ntReg,
+                            itemStateMgr,
+                            rootNodeId,
+                            getSystemSearchManager(getName()),
+                            SYSTEM_ROOT_NODE_ID);
-                // search manager is lazily instantiated in order to avoid
-                // 'chicken & egg' bootstrap problems
-                searchMgr = new SearchManager(config.getSearchConfig(),
-                        nsReg,
-                        ntReg,
-                        itemStateMgr,
-                        rootNodeId,
-                        getSystemSearchManager(getName()),
-                        SYSTEM_ROOT_NODE_ID);
+                return searchMgr;
-            return searchMgr;
-        synchronized LockManager getLockManager() throws RepositoryException {
-            if (!initialized) {
+        LockManager getLockManager() throws RepositoryException {
+            if (!isInitialized()) {
-            // lock manager is lazily instantiated in order to avoid
-            // 'chicken & egg' bootstrap problems
-            if (lockMgr == null) {
-                lockMgr = new LockManagerImpl(getSystemSession(), fs);
+            synchronized (this) {
+                // lock manager is lazily instantiated in order to avoid
+                // 'chicken & egg' bootstrap problems
+                if (lockMgr == null) {
+                    lockMgr = new LockManagerImpl(getSystemSession(), fs);
+                }
+                return lockMgr;
-            return lockMgr;
-        synchronized SystemSession getSystemSession() throws RepositoryException {
-            if (!initialized) {
+        SystemSession getSystemSession() throws RepositoryException {
+            if (!isInitialized()) {
-            // system session is lazily instantiated in order to avoid
-            // 'chicken & egg' bootstrap problems
-            if (systemSession == null) {
-                systemSession = SystemSession.create(RepositoryImpl.this, config);
+            synchronized (this) {
+                // system session is lazily instantiated in order to avoid
+                // 'chicken & egg' bootstrap problems
+                if (systemSession == null) {
+                    systemSession = SystemSession.create(RepositoryImpl.this, config);
+                }
+                return systemSession;
-            return systemSession;
+         * @return <code>true</code> if this info was initialized.
-        synchronized void initialize() throws RepositoryException {
-            if (initialized) {
-                throw new IllegalStateException("already initialized");
-            }
-
-            log.info("initializing workspace '" + getName() + "'...");
-
-            FileSystemConfig fsConfig = config.getFileSystemConfig();
-            fs = fsConfig.createFileSystem();
-
-            persistMgr = createPersistenceManager(new File(config.getHomeDir()),
-                    fs,
-                    config.getPersistenceManagerConfig(),
-                    rootNodeId,
-                    nsReg,
-                    ntReg);
-
-            // create item state manager
+        boolean initialize() throws RepositoryException {
-                itemStateMgr =
-                        new SharedItemStateManager(persistMgr, rootNodeId, ntReg, true);
-                try {
-                    itemStateMgr.addVirtualItemStateProvider(
-                            vMgr.getVirtualItemStateProvider());
-                    itemStateMgr.addVirtualItemStateProvider(
-                            virtNTMgr.getVirtualItemStateProvider());
-                } catch (Exception e) {
-                    log.error("Unable to add vmgr: " + e.toString(), e);
-                }
-            } catch (ItemStateException ise) {
-                String msg = "failed to instantiate shared item state manager";
-                log.debug(msg);
-                throw new RepositoryException(msg, ise);
+                initLock.writeLock().acquire();
+            } catch (InterruptedException e) {
+                throw new RepositoryException("Unable to aquire write lock.", e);
+            try {
+                if (initialized) {
+                    return false;
+                }
-            obsMgrFactory = new ObservationManagerFactory();
+                log.info("initializing workspace '" + getName() + "'...");
-            // register the observation factory of that workspace
-            delegatingDispatcher.addDispatcher(obsMgrFactory);
+                FileSystemConfig fsConfig = config.getFileSystemConfig();
+                fs = fsConfig.createFileSystem();
-            initialized = true;
+                persistMgr = createPersistenceManager(new File(config.getHomeDir()),
+                        fs,
+                        config.getPersistenceManagerConfig(),
+                        rootNodeId,
+                        nsReg,
+                        ntReg);
-            log.info("workspace '" + getName() + "' initialized");
+                // create item state manager
+                try {
+                    itemStateMgr =
+                            new SharedItemStateManager(persistMgr, rootNodeId, ntReg, true);
+                    try {
+                        itemStateMgr.addVirtualItemStateProvider(
+                                vMgr.getVirtualItemStateProvider());
+                        itemStateMgr.addVirtualItemStateProvider(
+                                virtNTMgr.getVirtualItemStateProvider());
+                    } catch (Exception e) {
+                        log.error("Unable to add vmgr: " + e.toString(), e);
+                    }
+                } catch (ItemStateException ise) {
+                    String msg = "failed to instantiate shared item state manager";
+                    log.debug(msg);
+                    throw new RepositoryException(msg, ise);
+                }
+
+                obsMgrFactory = new ObservationManagerFactory();
+
+                // register the observation factory of that workspace
+                delegatingDispatcher.addDispatcher(obsMgrFactory);
+
+                idleTimestamp = 0;
+                initialized = true;
+
+                log.info("workspace '" + getName() + "' initialized");
+                return true;
+            } finally {
+                initLock.writeLock().release();
+            }
+        }
+
+        /**
+         * disposes this workspaceinfo if it has been idle for more than
+         * <code>maxIdleTime</code> milliseconds.
+         *
+         * @param maxIdleTime
+         */
+        void disposeIfIdle(long maxIdleTime) {
+            try {
+                initLock.readLock().acquire();
+            } catch (InterruptedException e) {
+                return;
+            }
+            try {
+                if (!initialized) {
+                    return;
+                }
+                long currentTS = System.currentTimeMillis();
+                if (getIdleTimestamp() == 0) {
+                    // set idle timestamp
+                    idleTimestamp = currentTS;
+                } else {
+                    if ((currentTS - getIdleTimestamp()) > maxIdleTime) {
+                        // temporarily shutdown workspace
+                        log.info("disposing workspace '" + getName() + "' that is idle for " + (currentTS - idleTimestamp));
+                        dispose();
+                    }
+                }
+            } finally {
+                initLock.readLock().release();
+            }
-        synchronized void dispose() {
-            if (!initialized) {
-                throw new IllegalStateException("not initialized");
-            }
-
-            log.info("shutting down workspace '" + getName() + "'...");
-
-            // deregister the observation factory of that workspace
-            delegatingDispatcher.removeDispatcher(obsMgrFactory);
-
-            // dispose observation manager factory
-            obsMgrFactory.dispose();
-            obsMgrFactory = null;
-
-            // shutdown search managers
-            if (searchMgr != null) {
-                searchMgr.close();
-                searchMgr = null;
-            }
-
-            // close system session
-            if (systemSession != null) {
-                systemSession.removeListener(RepositoryImpl.this);
-                systemSession.logout();
-                systemSession = null;
-            }
-
-            // dispose shared item state manager
-            itemStateMgr.dispose();
-            itemStateMgr = null;
-
-            // close persistence manager
+        void dispose() {
-                persistMgr.close();
-            } catch (Exception e) {
-                log.error("error while closing persistence manager of workspace "
-                        + config.getName(), e);
-            }
-            persistMgr = null;
-
-            // close lock manager
-            if (lockMgr != null) {
-                lockMgr.close();
-                lockMgr = null;
+                initLock.writeLock().acquire();
+            } catch (InterruptedException e) {
+                throw new IllegalStateException("Unable to aquire write lock.");
-            // close workspace file system
-                fs.close();
-            } catch (FileSystemException fse) {
-                log.error("error while closing file system of workspace "
-                        + config.getName(), fse);
+                if (!initialized) {
+                    return;
+                }
+
+                log.info("shutting down workspace '" + getName() + "'...");
+
+                // deregister the observation factory of that workspace
+                delegatingDispatcher.removeDispatcher(obsMgrFactory);
+
+                // dispose observation manager factory
+                obsMgrFactory.dispose();
+                obsMgrFactory = null;
+
+                // shutdown search managers
+                if (searchMgr != null) {
+                    searchMgr.close();
+                    searchMgr = null;
+                }
+
+                // close system session
+                if (systemSession != null) {
+                    systemSession.removeListener(RepositoryImpl.this);
+                    systemSession.logout();
+                    systemSession = null;
+                }
+
+                // dispose shared item state manager
+                itemStateMgr.dispose();
+                itemStateMgr = null;
+
+                // close persistence manager
+                try {
+                    persistMgr.close();
+                } catch (Exception e) {
+                    log.error("error while closing persistence manager of workspace "
+                            + config.getName(), e);
+                }
+                persistMgr = null;
+
+                // close lock manager
+                if (lockMgr != null) {
+                    lockMgr.close();
+                    lockMgr = null;
+                }
+
+                // close workspace file system
+                try {
+                    fs.close();
+                } catch (FileSystemException fse) {
+                    log.error("error while closing file system of workspace "
+                            + config.getName(), fse);
+                }
+                fs = null;
+
+                // reset idle timestamp
+                idleTimestamp = 0;
+                initialized = false;
+
+                log.info("workspace '" + getName() + "' has been shutdown");
+            } finally {
+                initLock.writeLock().release();
-            fs = null;
-
-            // reset idle timestamp
-            idleTimestamp = 0;
-
-            initialized = false;
-
-            log.info("workspace '" + getName() + "' has been shutdown");
-    private class WorkspaceJanitor extends Thread {
+    private class WorkspaceJanitor implements Runnable {
+
-            super("WorkspaceJanitor");
-            setPriority(Thread.MIN_PRIORITY);
-            setDaemon(true);
-            while (!disposed) {
-                try {
-                    Thread.sleep(checkInterval);
-                } catch (InterruptedException e) {
-                    /* ignore */
-                }
-
+            while (true) {
+                    try {
+                        RepositoryImpl.this.wait(checkInterval);
+                    } catch (InterruptedException e) {
+                        // ignore
+                    }
-                    // get names of workspaces
-                    Set wspNames = new HashSet(wspInfos.keySet());
-                    // remove default workspace (will never be shutdown when idle)
-                    wspNames.remove(repConfig.getDefaultWorkspaceName());
+                }
+                // get names of workspaces
+                Set wspNames;
+                synchronized (wspInfos) {
+                    wspNames = new HashSet(wspInfos.keySet());
+                }
+                // remove default workspace (will never be shutdown when idle)
+                wspNames.remove(repConfig.getDefaultWorkspaceName());
+
+                synchronized (activeSessions) {
-                    // remove uninitialized workspaces
-                    for (Iterator it = wspInfos.values().iterator(); it.hasNext();) {
-                        WorkspaceInfo wspInfo = (WorkspaceInfo) it.next();
-                        if (!wspInfo.isInitialized()) {
-                            wspNames.remove(wspInfo.getName());
-                        }
-                    }
+                }
-                    // remaining names denote workspaces which are currently idle
-                    for (Iterator it = wspNames.iterator(); it.hasNext();) {
-                        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(it.next());
-                        long currentTS = System.currentTimeMillis();
-                        long idleTS = wspInfo.getIdleTimestamp();
-                        if (idleTS == 0) {
-                            // set idle timestamp
-                            wspInfo.setIdleTimestamp(currentTS);
-                        } else {
-                            if ((currentTS - idleTS) > maxIdleTime) {
-                                // temporarily shutdown workspace
-                                wspInfo.dispose();
-                            }
-                        }
+                // remaining names denote workspaces which currently have not
+                // active sessions
+                for (Iterator it = wspNames.iterator(); it.hasNext();) {
+                    WorkspaceInfo wspInfo;
+                    synchronized (wspInfos) {
+                        wspInfo = (WorkspaceInfo) wspInfos.get(it.next());
+                    wspInfo.disposeIfIdle(maxIdleTime);
