JCR-331: RepositoryConfig instance can not be reused once it has been passed to RepositoryImpl constructor

committing patch

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@386078 13f79535-47bb-0310-9956-ffa450edef68

- * of the repository, the access manager, file system, versioning
+ * of the repository, the access manager, file system and versioning
-        this.workspaces = new HashMap();
+        workspaces = new HashMap();
-     * Initializes the repository configuration. This method first initializes
-     * the repository file system and versioning configurations and then
-     * loads and initializes the configurations for all available workspaces.
+     * Initializes the repository configuration. This method loads the
+     * configurations for all available workspaces.
+     * @throws IllegalStateException if the repository configuration has already
+     *                               been initialized
-    protected void init() throws ConfigurationException {
-        fsc.init();
-        vc.init();
-        if (sc != null) {
-            sc.init();
+    public void init() throws ConfigurationException, IllegalStateException {
+        if (!workspaces.isEmpty()) {
+            throw new IllegalStateException(
+                    "Repository configuration has already been initialized.");
-            FileSystem fs = fsc.getFileSystem();
+            FileSystem fs = fsc.createFileSystem();
-                            wc.init();
+            } finally {
+                try {
+                    fs.close();
+                } catch (FileSystemException ignore) {}
-                    wc.init();
-        Writer configWriter;
-
-        // get a writer for the workspace configuration file
+        FileSystem virtualFS;
-            // a configuration directoy had been specified; create workspace
-            // configuration in virtual repository file system rather than
-            // on disk
-            FileSystem fs = fsc.getFileSystem();
-            String configDir = workspaceConfigDirectory
-                    + FileSystem.SEPARATOR + name;
-            String configFile = configDir + FileSystem.SEPARATOR + WORKSPACE_XML;
-            try {
-                // Create the directory
-                fs.createFolder(configDir);
-                configWriter = new OutputStreamWriter(
-                        fs.getOutputStream(configFile));
-            } catch (FileSystemException e) {
-                throw new ConfigurationException(
-                        "failed to create workspace configuration at path "
-                        + configFile, e);
-            }
+            // a configuration directoy had been specified;
+            // workspace configurations are maintained in
+            // virtual repository file system
+            virtualFS = fsc.createFileSystem();
-            File file = new File(directory, WORKSPACE_XML);
-            try {
-                configWriter = new FileWriter(file);
-            } catch (IOException e) {
-                throw new ConfigurationException(
-                        "failed to create workspace configuration at path "
-                        + file.getPath(), e);
-            }
+            // workspace configurations are maintained on disk
+            virtualFS = null;
-
-        // Create the workspace.xml file using the configuration template and
-        // the configuration writer.
-            template.setAttribute("name", name);
+            Writer configWriter;
-            TransformerFactory factory = TransformerFactory.newInstance();
-            Transformer transformer = factory.newTransformer();
-            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-            transformer.transform(
-                    new DOMSource(template), new StreamResult(configWriter));
-        } catch (TransformerConfigurationException e) {
-            throw new ConfigurationException(
-                    "Cannot create a workspace configuration writer", e);
-        } catch (TransformerException e) {
-            throw new ConfigurationException(
-                    "Cannot create a workspace configuration file", e);
+            // get a writer for the workspace configuration file
+            if (virtualFS != null) {
+                // a configuration directoy had been specified; create workspace
+                // configuration in virtual repository file system rather than
+                // on disk
+                String configDir = workspaceConfigDirectory
+                        + FileSystem.SEPARATOR + name;
+                String configFile = configDir + FileSystem.SEPARATOR + WORKSPACE_XML;
+                try {
+                    // Create the directory
+                    virtualFS.createFolder(configDir);
+                    configWriter = new OutputStreamWriter(
+                            virtualFS.getOutputStream(configFile));
+                } catch (FileSystemException e) {
+                    throw new ConfigurationException(
+                            "failed to create workspace configuration at path "
+                            + configFile, e);
+                }
+            } else {
+                File file = new File(directory, WORKSPACE_XML);
+                try {
+                    configWriter = new FileWriter(file);
+                } catch (IOException e) {
+                    throw new ConfigurationException(
+                            "failed to create workspace configuration at path "
+                            + file.getPath(), e);
+                }
+            }
+
+            // Create the workspace.xml file using the configuration template and
+            // the configuration writer.
+            try {
+                template.setAttribute("name", name);
+
+                TransformerFactory factory = TransformerFactory.newInstance();
+                Transformer transformer = factory.newTransformer();
+                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+                transformer.transform(
+                        new DOMSource(template), new StreamResult(configWriter));
+            } catch (TransformerConfigurationException e) {
+                throw new ConfigurationException(
+                        "Cannot create a workspace configuration writer", e);
+            } catch (TransformerException e) {
+                throw new ConfigurationException(
+                        "Cannot create a workspace configuration file", e);
+            } finally {
+                try {
+                    configWriter.close();
+                } catch (IOException ignore) {}
+            }
+
+            // Load the created workspace configuration.
+            WorkspaceConfig wc;
+            if (virtualFS != null) {
+                String configDir = workspaceConfigDirectory
+                        + FileSystem.SEPARATOR + name;
+                wc = loadWorkspaceConfig(virtualFS, configDir);
+            } else {
+                wc = loadWorkspaceConfig(directory);
+            }
+            if (wc != null) {
+                addWorkspaceConfig(wc);
+                return wc;
+            } else {
+                throw new ConfigurationException(
+                        "Failed to load the created configuration for workspace "
+                        + name + ".");
+            }
-                configWriter.close();
-            } catch (IOException ignore) {}
-        }
-
-        // Load the created workspace configuration.
-        WorkspaceConfig wc;
-        if (workspaceConfigDirectory != null) {
-            FileSystem fs = fsc.getFileSystem();
-            String configDir = workspaceConfigDirectory
-                    + FileSystem.SEPARATOR + name;
-            wc = loadWorkspaceConfig(fs, configDir);
-        } else {
-            wc = loadWorkspaceConfig(directory);
-        }
-        if (wc != null) {
-            wc.init();
-            addWorkspaceConfig(wc);
-            return wc;
-        } else {
-            throw new ConfigurationException(
-                    "Failed to load the created configuration for workspace "
-                    + name + ".");
+                if (virtualFS != null) {
+                    virtualFS.close();
+                }
+            } catch (FileSystemException ignore) {}
-
-     * Returns the repository file system implementation.
+     * Returns the repository file system configuration.
-     * @return file system implementation
+     * @return file system configuration
-    public FileSystem getFileSystem() {
-        return fsc.getFileSystem();
+    public FileSystemConfig getFileSystemConfig() {
+        return fsc;
