JCR-1104: JSR 283 support
- multiple selectors (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@633843 13f79535-47bb-0310-9956-ffa450edef68

-    /** Unordered list of {@link ScoreNode}s. */
+    /** Unordered list of {@link ScoreNode}[]s. */
+     * Apply document order on the score nodes with this selectorIndex.
+     */
+    private final int selectorIndex;
+
+    /**
-     * @param itemMgr    the item manager of the session executing the query.
-     * @param scoreNodes the ids of the matching nodes with their score value.
+     * @param itemMgr       the item manager of the session executing the
+     *                      query.
+     * @param scoreNodes    the ids of the matching nodes with their score
+     *                      value. <code>List&lt;ScoreNode[]></code>
+     * @param selectorIndex apply document order on the score nodes with this
+     *                      selectorIndex.
-    DocOrderNodeIteratorImpl(final ItemManager itemMgr, List scoreNodes) {
+    DocOrderNodeIteratorImpl(ItemManager itemMgr,
+                             List scoreNodes,
+                             int selectorIndex) {
+        this.selectorIndex = selectorIndex;
+    /**
+     * {@inheritDoc}
+     */
+    public ScoreNode[] getScoreNodes() {
+        initOrderedIterator();
+        return orderedNodes.getScoreNodes();
+    }
+
-        ScoreNode[] nodes = (ScoreNode[]) scoreNodes.toArray(new ScoreNode[scoreNodes.size()]);
+        ScoreNode[][] nodes = (ScoreNode[][]) scoreNodes.toArray(new ScoreNode[scoreNodes.size()][]);
-                    if (!invalidIDs.contains(nodes[i].getNodeId())) {
+                    if (!invalidIDs.contains(nodes[i][selectorIndex].getNodeId())) {
-                nodes = (ScoreNode[]) tmp.toArray(new ScoreNode[tmp.size()]);
+                nodes = (ScoreNode[][]) tmp.toArray(new ScoreNode[tmp.size()][]);
-                        ScoreNode n1 = (ScoreNode) o1;
-                        ScoreNode n2 = (ScoreNode) o2;
+                        ScoreNode n1 = ((ScoreNode[]) o1)[selectorIndex];
+                        ScoreNode n2 = ((ScoreNode[]) o2)[selectorIndex];
+                        // handle null values
+                        // null is considered less than any value
+                        if (n1 == n2) {
+                            return 0;
+                        } else if (n1 == null) {
+                            return -1;
+                        } else if (n2 == null) {
+                            return 1;
+                        }
-        orderedNodes = new NodeIteratorImpl(itemMgr, nodes);
+        orderedNodes = new NodeIteratorImpl(itemMgr, nodes, selectorIndex);
