JCR-623 - Clustering
+ Synchronize journal before updating
+ Leave journal in valid state, when error occurs


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@486054 13f79535-47bb-0310-9956-ffa450edef68

+        boolean succeeded = false;
+
+            succeeded = true;
+        } finally {
+            if (!succeeded) {
+                journal.cancel();
+            }
+        boolean succeeded = false;
+
+            succeeded = true;
+        } finally {
+            if (!succeeded) {
+                journal.cancel();
+            }
-     * <p/>
-     * Invoked when an update has been created inside versioning. Delegate
-     * to common method with <code>null</code> workspace.
-    public void updateCreated(ChangeLog changes, EventStateCollection esc) {
-        updateCreated(null, changes, esc);
-    }
-
-    /**
-     * Called when an a update operation has been created.
-     *
-     * @param workspace workspace to use when writing journal entry
-     * @param changes changes
-     * @param esc events as they will be delivered on success
-     */
-    private void updateCreated(String workspace, ChangeLog changes, EventStateCollection esc) {
+    public void updateCreated() {
-            journal.begin(workspace);
-            journal.log(changes, esc);
-        } catch (JournalException e) {
-            String msg = "Unable to create log entry: " + e.getMessage();
+            sync();
+        } catch (ClusterException e) {
+            String msg = "Unable to sync with journal: " + e.getMessage();
+     * <p/>
+     * Invoked when an update has been prepared inside versioning. Delegate
+     * to common method with <code>null</code> workspace.
-    public void updatePrepared() {
+    public void updatePrepared(ChangeLog changes, EventStateCollection esc) {
+        updatePrepared(null, changes, esc);
+    }
+
+    /**
+     * Called when an a update operation has been prepared.
+     *
+     * @param workspace workspace to use when writing journal entry
+     * @param changes changes
+     * @param esc events as they will be delivered on success
+     */
+    private void updatePrepared(String workspace, ChangeLog changes, EventStateCollection esc) {
+        boolean succeeded = false;
+
+            journal.begin(workspace);
+            journal.log(changes, esc);
+            succeeded = true;
+        } finally {
+            if (!succeeded) {
+                journal.cancel();
+            }
-        try {
-            journal.cancel();
-        } catch (JournalException e) {
-            String msg = "Unable to create log entry: " + e.getMessage();
-            log.error(msg);
-        } catch (Throwable e) {
-            String msg = "Unexpected error while cancelling log entry.";
-            log.error(msg, e);
-        }
+        journal.cancel();
+        boolean succeeded = false;
+
+            succeeded = true;
+        } finally {
+            if (!succeeded) {
+                journal.cancel();
+            }
+        boolean succeeded = false;
+
+            succeeded = true;
+        } finally {
+            if (!succeeded) {
+                journal.cancel();
+            }
-        public void updateCreated(ChangeLog changes, EventStateCollection esc) {
-            ClusterNode.this.updateCreated(workspace, changes, esc);
+        public void updateCreated() {
+            ClusterNode.this.updateCreated();
-        public void updatePrepared() {
-            ClusterNode.this.updatePrepared();
+        public void updatePrepared(ChangeLog changes, EventStateCollection esc) {
+            ClusterNode.this.updatePrepared(workspace, changes, esc);
