JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 3: jackrabbit-spi2dav]

in addition:
- minor improvements in comments, typos
- use foreach loops where possible
- remove redundant casts
- remove unused field in NodeInfoImp
- remove unused method in ReadTest
- add WeakReference test to BatchTest

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915358 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ItemInfo;
-    private final HashMap clients = new HashMap();
+    private final Map<SessionInfo, HttpClient> clients = new HashMap<SessionInfo, HttpClient>();
-    private final Map nodeTypeDefinitions = new HashMap();
+    private final Map<Name, QNodeTypeDefinition> nodeTypeDefinitions = new HashMap<Name, QNodeTypeDefinition>();
-        HttpClient client = (HttpClient) clients.get(sessionInfo);
+        HttpClient client = clients.get(sessionInfo);
-        HttpClient cl = (HttpClient) clients.remove(sessionInfo);
+        HttpClient cl = clients.remove(sessionInfo);
-            String parentHref = parentProp.getHrefs().get(0).toString();
+            String parentHref = parentProp.getHrefs().get(0);
-        DavProperty nameProp = propSet.get(ItemResourceConstants.JCR_NAME);
+        DavProperty<?> nameProp = propSet.get(ItemResourceConstants.JCR_NAME);
-        DavProperty indexProp = propSet.get(ItemResourceConstants.JCR_INDEX);
+        DavProperty<?> indexProp = propSet.get(ItemResourceConstants.JCR_INDEX);
-                descriptors = new HashMap();
+                descriptors = new HashMap<String, QValue[]>();
-                        List<QValue> vs = new ArrayList();
+                        List<QValue> vs = new ArrayList<QValue>();
-                String wspHref = new HrefProperty(props.get(DeltaVConstants.WORKSPACE)).getHrefs().get(0).toString();
+                String wspHref = new HrefProperty(props.get(DeltaVConstants.WORKSPACE)).getHrefs().get(0);
-            Set wspNames = new HashSet();
-            for (int i = 0; i < responses.length; i++) {
-                DavPropertySet props = responses[i].getProperties(DavServletResponse.SC_OK);
+            Set<String> wspNames = new HashSet<String>();
+            for (MultiStatusResponse response : responses) {
+                DavPropertySet props = response.getProperties(DavServletResponse.SC_OK);
-                    String wspHref = hp.getHrefs().get(0).toString();
+                    String wspHref = hp.getHrefs().get(0);
-            return (String[]) wspNames.toArray(new String[wspNames.size()]);
+            return wspNames.toArray(new String[wspNames.size()]);
-            DavProperty p = responses[0].getProperties(DavServletResponse.SC_OK).get(SecurityConstants.CURRENT_USER_PRIVILEGE_SET);
+            DavProperty<?> p = responses[0].getProperties(DavServletResponse.SC_OK).get(SecurityConstants.CURRENT_USER_PRIVILEGE_SET);
-            Set requiredPrivileges = new HashSet();
-            for (int i = 0; i < actions.length; i++) {
-               requiredPrivileges.add(Privilege.getPrivilege(actions[i], ItemResourceConstants.NAMESPACE));
+            Set<Privilege> requiredPrivileges = new HashSet<Privilege>();
+            for (String action : actions) {
+                requiredPrivileges.add(Privilege.getPrivilege(action, ItemResourceConstants.NAMESPACE));
-            Collection privileges = (Collection) privSet.getValue();
+            Collection<Privilege> privileges = privSet.getValue();
-            DavProperty rType = propertySet.get(DavPropertyName.RESOURCETYPE);
+            DavProperty<?> rType = propertySet.get(DavPropertyName.RESOURCETYPE);
-                DavProperty prop = propertySet.get(ItemResourceConstants.JCR_DEFINITION);
+                DavProperty<?> prop = propertySet.get(ItemResourceConstants.JCR_DEFINITION);
-            List childResponses = new ArrayList();
-            for (int i = 0; i < responses.length; i++) {
-                if (isSameResource(uri, responses[i])) {
-                    nodeResponse = responses[i];
+            List<MultiStatusResponse> childResponses = new ArrayList<MultiStatusResponse>();
+            for (MultiStatusResponse response : responses) {
+                if (isSameResource(uri, response)) {
+                    nodeResponse = response;
-                    childResponses.add(responses[i]);
+                    childResponses.add(response);
-            for (Iterator it = childResponses.iterator(); it.hasNext();) {
-                MultiStatusResponse resp = (MultiStatusResponse) it.next();
+            for (MultiStatusResponse resp : childResponses) {
-                    childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
+                        childProps.get(DavPropertyName.RESOURCETYPE).getValue() != null) {
-    public Iterator getItemInfos(SessionInfo sessionInfo, NodeId nodeId) throws RepositoryException {
+    public Iterator<? extends ItemInfo> getItemInfos(SessionInfo sessionInfo, NodeId nodeId) throws RepositoryException {
-        List l = new ArrayList();
+        List<ItemInfo> l = new ArrayList<ItemInfo>();
-            Iterator hrefIter = refProp.getHrefs().iterator();
-            while(hrefIter.hasNext()) {
-                String propertyHref = hrefIter.next().toString();
+            for (String propertyHref : refProp.getHrefs()) {
-    private List buildPropertyInfos(NodeInfo nInfo) throws RepositoryException {
-        List l = new ArrayList(3);
+    private List<PropertyInfo> buildPropertyInfos(NodeInfo nInfo) throws RepositoryException {
+        List<PropertyInfo> l = new ArrayList<PropertyInfo>(3);
-    public Iterator getChildInfos(SessionInfo sessionInfo, NodeId parentId) throws RepositoryException {
+    public Iterator<ChildInfo> getChildInfos(SessionInfo sessionInfo, NodeId parentId) throws RepositoryException {
+            List<ChildInfo> childEntries;
-                return Collections.EMPTY_LIST.iterator();
+                childEntries = Collections.emptyList();
+                return childEntries.iterator();
-            List childEntries = new ArrayList();
-            for (int i = 0; i < responses.length; i++) {
-                if (!isSameResource(uri, responses[i])) {
-                    MultiStatusResponse resp = responses[i];
+            childEntries = new ArrayList<ChildInfo>();
+            for (MultiStatusResponse resp : responses) {
+                if (!isSameResource(uri, resp)) {
-            List<PropertyId> refIds = new ArrayList<PropertyId>();
-            for (int i = 0; i < responses.length; i++) {
-                if (isSameResource(uri, responses[i])) {
-                    MultiStatusResponse resp = responses[i];
+            List<PropertyId> refIds = Collections.emptyList();
+            for (MultiStatusResponse resp : responses) {
+                if (isSameResource(uri, resp)) {
-                    DavProperty p;
+                    DavProperty<?> p;
-                    if (p == null) {
-                        return Collections.EMPTY_LIST.iterator();
-                    } else {
+                    if (p != null) {
+                        refIds = new ArrayList<PropertyId>();
-                        for (Iterator it = hp.getHrefs().iterator(); it.hasNext();) {
-                            String propHref = it.next().toString();
+                        for (String propHref : hp.getHrefs()) {
-                DavProperty p = DefaultDavProperty.createFromXml(prop);
+                DavProperty<?> p = DefaultDavProperty.createFromXml(prop);
-                DavProperty type = props.get(ItemResourceConstants.JCR_TYPE);
+                DavProperty<?> type = props.get(ItemResourceConstants.JCR_TYPE);
-            method.releaseConnection();
+            if (method != null) {
+                method.releaseConnection();
+            }
-                Iterator it = batchImpl.methods();
+                Iterator<DavMethod> it = batchImpl.methods();
-                    method = (DavMethod) it.next();
+                    method = it.next();
-        method.addRequestHeader(ItemResourceConstants.IMPORT_UUID_BEHAVIOR, new Integer(uuidBehaviour).toString());
+        method.addRequestHeader(ItemResourceConstants.IMPORT_UUID_BEHAVIOR, Integer.toString(uuidBehaviour));
-                DavProperty p = ps.get(DavPropertyName.LOCKDISCOVERY);
+                DavProperty<?> p = ps.get(DavPropertyName.LOCKDISCOVERY);
-        List activeLocks = (List) lockDiscovery.getValue();
-        Iterator it = activeLocks.iterator();
+        List<ActiveLock> activeLocks = lockDiscovery.getValue();
-        while (it.hasNext()) {
-            ActiveLock l = (ActiveLock) it.next();
+        for (ActiveLock l : activeLocks) {
-    public Iterator merge(SessionInfo sessionInfo, NodeId nodeId, String srcWorkspaceName, boolean bestEffort) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException {
+    public Iterator<NodeId> merge(SessionInfo sessionInfo, NodeId nodeId, String srcWorkspaceName, boolean bestEffort) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException {
-    public Iterator merge(SessionInfo sessionInfo, NodeId nodeId, String srcWorkspaceName, boolean bestEffort, boolean isShallow) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException {
+    public Iterator<NodeId> merge(SessionInfo sessionInfo, NodeId nodeId, String srcWorkspaceName, boolean bestEffort, boolean isShallow) throws NoSuchWorkspaceException, AccessDeniedException, MergeException, LockException, InvalidItemStateException, RepositoryException {
-                List failedIds = new ArrayList(resps.length);
-                for (int i = 0; i < resps.length; i++) {
-                    String href = resps[i].getHref();
+                List<NodeId> failedIds = new ArrayList<NodeId>(resps.length);
+                for (MultiStatusResponse resp : resps) {
+                    String href = resp.getHref();
-            List changeList = new ArrayList();
+            List<HrefProperty> changeList = new ArrayList<HrefProperty>();
-    public Iterator mergeActivity(SessionInfo sessionInfo, NodeId activityId) throws UnsupportedRepositoryOperationException, RepositoryException {
+    public Iterator<NodeId> mergeActivity(SessionInfo sessionInfo, NodeId activityId) throws UnsupportedRepositoryOperationException, RepositoryException {
-                                    Map namespaces)
+                                    Map<String, String> namespaces)
-        Set resolvedTypeNames = null;
+        Set<Name> resolvedTypeNames = null;
-            resolvedTypeNames = new HashSet();
+            resolvedTypeNames = new HashSet<Name>();
-                for (int i = 0; i < nodeTypeNames.length; i++) {
-                    resolveNodeType(resolvedTypeNames, nodeTypeNames[i]);
+                for (Name nodeTypeName : nodeTypeNames) {
+                    resolveNodeType(resolvedTypeNames, nodeTypeName);
-    private void resolveNodeType(Set resolved, Name ntName) {
+    private void resolveNodeType(Set<Name> resolved, Name ntName) {
-        QNodeTypeDefinition def = (QNodeTypeDefinition) nodeTypeDefinitions.get(ntName);
+        QNodeTypeDefinition def = nodeTypeDefinitions.get(ntName);
-            Name[] supertypes = def.getSupertypes();
-            for (int i = 0; i < supertypes.length; i++) {
-                resolveNodeType(resolved, supertypes[i]);
+            for (Name supertype : def.getSupertypes()) {
+                resolveNodeType(resolved, supertype);
-                List bundles = new ArrayList();
+                List<EventBundle> bundles = new ArrayList<EventBundle>();
-                events = (EventBundle[]) bundles.toArray(new EventBundle[bundles.size()]);
+                events = bundles.toArray(new EventBundle[bundles.size()]);
-    private List buildEventList(Element bundleElement, SessionInfoImpl sessionInfo) {
-        List events = new ArrayList();
+    private List<Event> buildEventList(Element bundleElement, SessionInfoImpl sessionInfo) {
+        List<Event> events = new ArrayList<Event>();
-    public Map getRegisteredNamespaces(SessionInfo sessionInfo) throws RepositoryException {
+    public Map<String, String> getRegisteredNamespaces(SessionInfo sessionInfo) throws RepositoryException {
-            Map namespaces = new HashMap();
+            Map<String, String> namespaces = new HashMap<String, String>();
-        Map namespaces = new HashMap(nsCache.getNamespaces());
+        Map<String, String> namespaces = new HashMap<String, String>(nsCache.getNamespaces());
-        Map namespaces = new HashMap(nsCache.getNamespaces());
+        Map<String, String> namespaces = new HashMap<String, String>(nsCache.getNamespaces());
-    private void internalSetNamespaces(SessionInfo sessionInfo, Map namespaces) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {
+    private void internalSetNamespaces(SessionInfo sessionInfo, Map<String, String> namespaces) throws NamespaceException, UnsupportedRepositoryOperationException, AccessDeniedException, RepositoryException {
-    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo) throws RepositoryException {
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(SessionInfo sessionInfo) throws RepositoryException {
-    public Iterator getQNodeTypeDefinitions(SessionInfo sessionInfo, Name[] nodetypeNames) throws RepositoryException {
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(SessionInfo sessionInfo, Name[] nodetypeNames) throws RepositoryException {
-    private Iterator retrieveQNodeTypeDefinitions(SessionInfo sessionInfo, Document reportDoc) throws RepositoryException {
+    private Iterator<QNodeTypeDefinition> retrieveQNodeTypeDefinitions(SessionInfo sessionInfo, Document reportDoc) throws RepositoryException {
-            List ntDefs = new ArrayList();
+            List<QNodeTypeDefinition> ntDefs = new ArrayList<QNodeTypeDefinition>();
-                for (Iterator defIt = ntDefs.iterator(); defIt.hasNext(); ) {
-                    QNodeTypeDefinition def = (QNodeTypeDefinition) defIt.next();
+                for (Object ntDef : ntDefs) {
+                    QNodeTypeDefinition def = (QNodeTypeDefinition) ntDef;
-        private final List methods = new ArrayList();
+        private final List<DavMethod> methods = new ArrayList<DavMethod>();
-        private Iterator methods() {
+        private Iterator<DavMethod> methods() {
-        private final HashMap prefixToURI = new HashMap();
-        private final HashMap uriToPrefix = new HashMap();
+        private final HashMap<String, String> prefixToURI = new HashMap<String, String>();
+        private final HashMap<String, String> uriToPrefix = new HashMap<String, String>();
-        public Map getNamespaces() {
-            return new HashMap(prefixToURI);
+        public Map<String, String> getNamespaces() {
+            return new HashMap<String, String>(prefixToURI);
-            String uri = (String) prefixToURI.get(prefix);
+            String uri = prefixToURI.get(prefix);
-            String prefix = (String) uriToPrefix.get(uri);
+            String prefix = uriToPrefix.get(uri);
