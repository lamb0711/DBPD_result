

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@76003 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.commons.collections.ReferenceMap;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.*;
+     * flag indicating whether this session is alive
+     */
+    protected boolean alive;
+
+    /**
+
+     * Listeners (weak references)
+     */
+    protected final Map listeners = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);
+
+    /**
+        alive = true;
+        alive = true;
+     * Performs a sanity check on this session.
+     *
+     * @throws RepositoryException if this session has been rendered invalid
+     *                             for some reason (e.g. if this session has
+     *                             been closed explicitly or if it has expired)
+     */
+    protected void sanityCheck() throws RepositoryException {
+        // check session status
+        if (!alive) {
+            throw new RepositoryException("this session has been closed");
+        }
+    }
+
+    /**
+    /**
+     * Notify the listeners that this session has been closed.
+     */
+    protected void notifyLoggedOut() {
+        // copy listeners to array to avoid ConcurrentModificationException
+        SessionListener[] la = new SessionListener[listeners.size()];
+        Iterator iter = listeners.values().iterator();
+        int cnt = 0;
+        while (iter.hasNext()) {
+            la[cnt++] = (SessionListener) iter.next();
+        }
+        for (int i = 0; i < la.length; i++) {
+            if (la[i] != null) {
+                la[i].loggedOut(this);
+            }
+        }
+    }
+
+    /**
+     * Add a <code>SessionListener</code>
+     *
+     * @param listener the new listener to be informed on modifications
+     */
+    public void addListener(SessionListener listener) {
+        if (!listeners.containsKey(listener)) {
+            listeners.put(listener, listener);
+        }
+    }
+
+    /**
+     * Remove a <code>SessionListener</code>
+     *
+     * @param listener an existing listener
+     */
+    public void removeListener(SessionListener listener) {
+        listeners.remove(listener);
+    }
+
+        // check sanity of this session
+        try {
+            sanityCheck();
+        } catch (RepositoryException re) {
+            String msg = "failed to check READ permission on " + absPath;
+            log.warn(msg, re);
+            throw new AccessControlException(READ_ACTION);
+        }
+
+        // check sanity of this session
+        sanityCheck();
+
+        // check sanity of this session
+        sanityCheck();
+
+        // check sanity of this session
+        sanityCheck();
+
+        // check sanity of this session
+        sanityCheck();
+
+            // check sanity of this session
+            sanityCheck();
+
+        // check sanity of this session
+        sanityCheck();
+
+        // check sanity of this session
+        sanityCheck();
+
-            getItemStateManager().disposeAllTransientItemStates();
+            itemStateMgr.disposeAllTransientItemStates();
-        return getItemStateManager().hasAnyTransientItemStates();
+        // check sanity of this session
+        sanityCheck();
+
+        return itemStateMgr.hasAnyTransientItemStates();
+        // check sanity of this session
+        sanityCheck();
+        // check sanity of this session
+        sanityCheck();
+
+        // check sanity of this session
+        sanityCheck();
+
-/*
-	    parser.setFeature("http://xml.org/sax/features/validation", true);
-	    parser.setFeature("http://apache.org/xml/features/validation/schema", true);
-	    parser.setFeature("http://apache.org/xml/features/validation/schema-full-checking", true);
-*/
-/*
-	    // validate against system view schema
-	    URL urlSchema = this.class.getClassLoader().getResource("javax/jcr/systemview.xsd");
-	    parser.setProperty("http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation", urlSchema.toString());
-	    parser.setProperty("http://apache.org/xml/properties/schema/external-schemaLocation",
-		    urlSchema.toString() + " " + "http://www.jcp.org/jcr/sv/1.0");
-*/
-    public void logout() {
+    public synchronized void logout() {
+        if (!alive) {
+            // ignore
+            return;
+        }
+
-        getItemStateManager().disposeAllTransientItemStates();
-
-        // @todo invalidate session, release session-scoped locks, free resources, prepare to get gc'ed etc.
-
-        log.debug("disposing workspace...");
+        itemStateMgr.disposeAllTransientItemStates();
+        // dispose item manager
+        itemMgr.dispose();
+        // dispose workspace
+
+        // @todo release session-scoped locks, free resources, prepare to get gc'ed etc.
+
+        // invalidate session
+        alive = false;
+
+        // finally notify listeners that session has been closed
+        notifyLoggedOut();
