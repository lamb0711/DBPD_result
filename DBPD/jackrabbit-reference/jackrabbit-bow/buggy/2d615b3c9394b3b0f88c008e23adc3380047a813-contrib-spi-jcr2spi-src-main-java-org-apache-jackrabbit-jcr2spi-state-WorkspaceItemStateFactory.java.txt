work in progress

- NodeInfo does not load information about child-node-entries
  -> add separate SPI call
  -> add initial draft ChildInfo interface
  -> ChildNodeEntries are not built upon creation of the NodeState
  -> ItemStateFactory: add method to retrieve ChildNodeEntries

- respect CacheBehaviour while persisting transient modifications

- LockInfo.getNodeId() -> not used so far -> remove

- SessionItemStateManager: getHierarchyManager() only used by SessionImpl -> moved

- Improve TODO comments
- Javadoc


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@482657 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.ChildInfo;
-import org.apache.jackrabbit.jcr2spi.state.entry.ChildNodeEntry;
-import org.apache.jackrabbit.name.QName;
+import java.util.Collection;
-            // child node entries
-            Set childNodeEntries = new HashSet();
-            for (IdIterator it = info.getNodeIds(); it.hasNext(); ) {
-                NodeInfo childInfo = service.getNodeInfo(sessionInfo, (NodeId) it.nextId());
-                String childUUID = null;
-                if (childInfo.getId().getPath() == null) {
-                    childUUID = childInfo.getId().getUUID();
-                }
-                childNodeEntries.add(new CNE(childInfo.getQName(), childInfo.getIndex(), childUUID));
-            }
-
-            state.init(info.getMixins(), childNodeEntries, propNames, nodeRefs);
+            state.init(info.getMixins(), propNames, nodeRefs);
-        } catch (PathNotFoundException e) {
-            throw new NoSuchItemStateException(e.getMessage(), e);
+    public ChildNodeEntries getChildNodeEntries(NodeState nodeState)
+        throws NoSuchItemStateException, ItemStateException {
+        try {
+            ChildNodeEntries entries = new ChildNodeEntries(nodeState);
+            Collection childInfos = service.getChildNodeInfos(sessionInfo, nodeState.getNodeId());
+            for (Iterator it = childInfos.iterator(); it.hasNext();) {
+                ChildInfo ci = (ChildInfo) it.next();
+                entries.add(ci.getName(), ci.getUUID(), ci.getIndex());
+            }
+            return entries;
+        } catch (PathNotFoundException e) {
+            throw new NoSuchItemStateException(e.getMessage(), e);
+        } catch (RepositoryException e) {
+            throw new ItemStateException(e.getMessage(), e);
+        }
+    }
+
-    //-----------------------------------------------------< ChildNodeEntry >---
-    private class CNE implements ChildNodeEntry {
-
-        private final QName name;
-        private final int index;
-        private final String uuid;
-
-        private CNE(QName name, int index, String uuid) {
-            this.name = name;
-            this.index = index;
-            this.uuid = uuid;
-        }
-
-        public NodeId getId() {
-            throw new UnsupportedOperationException();
-        }
-
-        public boolean denotesNode() {
-            return true;
-        }
-
-        public QName getName() {
-            return name;
-        }
-
-        public String getUUID() {
-            return uuid;
-        }
-
-        public int getIndex() {
-            return index;
-        }
-
-        public NodeState getNodeState() throws NoSuchItemStateException, ItemStateException {
-            throw new UnsupportedOperationException();
-        }
-
-        public boolean isAvailable() {
-            throw new UnsupportedOperationException();
-        }
-
-        public ItemState getItemState() throws NoSuchItemStateException, ItemStateException {
-            throw new UnsupportedOperationException();
-        }
-    }
-
+    //-----------------------------------------------------< NodeReferences >---
-            // TODO: modify in order to make usage of the references returned
+            // TODO: improve. make usage of the references returned
