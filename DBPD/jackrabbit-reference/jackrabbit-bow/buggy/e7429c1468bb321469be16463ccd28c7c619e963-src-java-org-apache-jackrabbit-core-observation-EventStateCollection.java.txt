- implemented observation events for Node.orderBefore()
- added test cases for Node.orderBefore()

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@158604 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.QName;
+import org.apache.jackrabbit.core.ItemId;
+import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.NodeTypeManager;
+                // 6) node reordered
+                // in case 6) only one node state changes. the state of the
+                // parent node.
-                    NodeTypeImpl nodeType = null;
-                    try {
-                        nodeType = session.getNodeTypeManager().getNodeType(n.getNodeTypeName());
-                    } catch (NoSuchNodeTypeException e) {
-                        // should never happen actually
-                        String msg = "Item " + state.getId() + " has unknown node type: " + n.getNodeTypeName();
-                        log.error(msg);
-                        throw new ItemStateException(msg, e);
-                    }
-                    // FIXME find more efficient way
-                    Path newPath = null;
-                    Path[] allPaths = null;
-                    try {
-                        newPath = hmgr.getPath(n.getId());
-                        allPaths = hmgr.getAllPaths(n.getId(), true);
-                    } catch (RepositoryException e) {
-                        // should never happen actually
-                        String msg = "Unable to resolve path for item: " + n.getId();
-                        log.error(msg);
-                        throw new ItemStateException(msg, e);
-                    }
+                    NodeState oldParent = (NodeState) changes.get(new NodeId(oldParentUUID));
+                    NodeTypeImpl oldParentNodeType = getNodeType(oldParent, session);
+                    Path newPath = getPath(n.getId(), hmgr);
+                    Path[] allPaths = getAllPaths(n.getId(), hmgr);
-                        Path parentPath = null;
-                        try {
-                            parentPath = removedPath.getAncestor(1);
-                        } catch (PathNotFoundException e) {
-                            // should never happen actually, root node cannot
-                            // be removed, thus path has always a parent
-                            String msg = "Path " + removedPath + " has no parent";
-                            log.error(msg);
-                            throw new ItemStateException(msg, e);
-                        }
-                                parentPath,
+                                getParent(removedPath),
-                                nodeType,
+                                oldParentNodeType,
-                        try {
-                            parentPath = newPath.getAncestor(1);
-                        } catch (PathNotFoundException e) {
-                            // should never happen actually, root node cannot
-                            // be 'added', thus path has always a parent
-                            String msg = "Path " + removedPath + " has no parent";
-                            log.error(msg);
-                            throw new ItemStateException(msg, e);
-                        }
+                        NodeState newParent = (NodeState) changes.get(new NodeId(newParentUUID));
+                        NodeTypeImpl newParentNodeType = getNodeType(newParent, session);
-                                parentPath,
+                                getParent(newPath),
-                                nodeType,
+                                newParentNodeType,
-                            NodeTypeImpl nodeType = null;
-                            try {
-                                nodeType = session.getNodeTypeManager().getNodeType(n.getNodeTypeName());
-                            } catch (NoSuchNodeTypeException e) {
-                                // should never happen actually
-                                String msg = "Item " + state.getId() + " has unknown node type: " + n.getNodeTypeName();
-                                log.error(msg);
-                                throw new ItemStateException(msg, e);
-                            }
-                            Path newPath = null;
-                            Path parentPath = null;
+                            NodeTypeImpl nodeType = getNodeType(parent, session);
+                            Path newPath = getPath(state.getId(), hmgr);
+                            Path parentPath = getParent(newPath);
-                                newPath = hmgr.getPath(state.getId());
-                                parentPath = newPath.getAncestor(1);
-                            } catch (RepositoryException e) {
-                                // should never happen actually
-                                String msg = "Unable to resolve path for item: " + state.getId();
-                                log.error(msg);
-                                throw new ItemStateException(msg, e);
+                // check if child nodes of modified node state have been reordered
+                List reordered = n.getReorderedChildNodeEntries();
+                NodeTypeImpl nodeType = getNodeType(n, session);
+                if (reordered.size() > 0) {
+                    // create a node removed and a node added event for every
+                    // reorder
+                    for (Iterator ro = reordered.iterator(); ro.hasNext();) {
+                        NodeState.ChildNodeEntry child = (NodeState.ChildNodeEntry) ro.next();
+                        QName name = child.getName();
+                        int index = (child.getIndex() != 1) ? child.getIndex() : 0;
+                        Path parentPath = getPath(n.getId(), hmgr);
+                        Path.PathElement addedElem = Path.create(name, index).getNameElement();
+                        // get removed index
+                        NodeState overlayed = (NodeState) n.getOverlayedState();
+                        List removedChild = overlayed.getChildNodeEntries(child.getUUID());
+                        if (removedChild.size() == 0) {
+                            throw new ItemStateException("Unable to retrieve old child index for item: " + child.getUUID());
+                        }
+                        NodeState.ChildNodeEntry entry = (NodeState.ChildNodeEntry) removedChild.get(0);
+                        int oldIndex = (entry.getIndex() != 1) ? entry.getIndex() : 0;
+                        Path.PathElement removedElem = Path.create(name, oldIndex).getNameElement();
+
+                        events.add(EventState.childNodeRemoved(n.getUUID(),
+                                parentPath,
+                                child.getUUID(),
+                                removedElem,
+                                nodeType,
+                                session));
+
+                        events.add(EventState.childNodeAdded(n.getUUID(),
+                                parentPath,
+                                child.getUUID(),
+                                addedElem,
+                                nodeType,
+                                session));
+                    }
+                }
-                Path path = null;
-                Path parentPath = null;
-                try {
-                    path = hmgr.getPath(state.getId());
-                    parentPath = path.getAncestor(1);
-                } catch (RepositoryException e) {
-                    // should never happen actually
-                    String msg = "Unable to resolve path for item: " + state.getId();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
-                }
+                Path path = getPath(state.getId(), hmgr);
-                NodeTypeImpl nodeType = null;
-                try {
-                    nodeType = session.getNodeTypeManager().getNodeType(parent.getNodeTypeName());
-                } catch (NoSuchNodeTypeException e) {
-                    // should never happen actually
-                    String msg = "Item " + parent.getId() + " has unknown node type: " + parent.getNodeTypeName();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
-                }
+                NodeTypeImpl nodeType = getNodeType(parent, session);
-                        parentPath,
+                        getParent(path),
-                NodeTypeImpl nodeType = null;
-                try {
-                    nodeType = session.getNodeTypeManager().getNodeType(n.getNodeTypeName());
-                } catch (NoSuchNodeTypeException e) {
-                    // should never happen actually
-                    String msg = "Item " + state.getId() + " has unknown node type: " + n.getNodeTypeName();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
+                NodeId parentId = new NodeId(n.getParentUUID());
+                NodeState parent = null;
+                // unknown if parent node is also new
+                if (provider.hasItemState(parentId)) {
+                    parent = (NodeState) provider.getItemState(parentId);
+                } else {
+                    parent = (NodeState) changes.get(parentId);
-                Path path = null;
-                Path parentPath = null;
-                try {
-                    path = hmgr.getPath(n.getId());
-                    parentPath = path.getAncestor(1);
-                } catch (RepositoryException e) {
-                    // should never happen actually
-                    String msg = "Unable to resolve path for item: " + n.getId();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
-                }
+                NodeTypeImpl nodeType = getNodeType(parent, session);
+                Path path = getPath(n.getId(), hmgr);
-                        parentPath,
+                        getParent(path),
-                NodeTypeImpl nodeType = null;
-                try {
-                    nodeType = session.getNodeTypeManager().getNodeType(n.getNodeTypeName());
-                } catch (NoSuchNodeTypeException e) {
-                    // should never happen actually
-                    String msg = "Item " + state.getId() + " has unknown node type: " + n.getNodeTypeName();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
-                }
-                Path path = null;
-                Path parentPath = null;
-                try {
-                    path = hmgr.getPath(state.getId());
-                    parentPath = path.getAncestor(1);
-                } catch (RepositoryException e) {
-                    // should never happen actually
-                    String msg = "Unable to resolve path for item: " + n.getId();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
-                }
+                NodeTypeImpl nodeType = getNodeType(n, session);
+                Path path = getPath(state.getId(), hmgr);
-                        parentPath,
+                        getParent(path),
-                NodeTypeImpl nodeType = null;
-                try {
-                    nodeType = session.getNodeTypeManager().getNodeType(n.getNodeTypeName());
-                } catch (NoSuchNodeTypeException e) {
-                    // should never happen actually
-                    String msg = "Item " + state.getId() + " has unknown node type: " + n.getNodeTypeName();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
-                }
-                try {
-                    Path[] paths = hmgr.getAllPaths(state.getId(), true);
-                    for (int i = 0; i < paths.length; i++) {
-                        Path parentPath = paths[i].getAncestor(1);
-                        events.add(EventState.childNodeRemoved(n.getParentUUID(),
-                                parentPath,
-                                n.getUUID(),
-                                paths[i].getNameElement(),
-                                nodeType,
-                                session));
-                    }
-                } catch (RepositoryException e) {
-                    // should never happen actually
-                    String msg = "Unable to resolve path for item: " + n.getId();
-                    log.error(msg);
-                    throw new ItemStateException(msg, e);
+                NodeState parent = (NodeState) provider.getItemState(new NodeId(n.getParentUUID()));
+                NodeTypeImpl nodeType = getNodeType(parent, session);
+                Path[] paths = getAllPaths(state.getId(), hmgr);
+                for (int i = 0; i < paths.length; i++) {
+                    events.add(EventState.childNodeRemoved(n.getParentUUID(),
+                            getParent(paths[i]),
+                            n.getUUID(),
+                            paths[i].getNameElement(),
+                            nodeType,
+                            session));
-                    NodeTypeImpl nodeType = null;
-                    try {
-                        nodeType = session.getNodeTypeManager().getNodeType(n.getNodeTypeName());
-                    } catch (NoSuchNodeTypeException e) {
-                        // should never happen actually
-                        String msg = "Item " + state.getId() + " has unknown node type: " + n.getNodeTypeName();
-                        log.error(msg);
-                        throw new ItemStateException(msg, e);
-                    }
-                    Path paths[] = null;
-                    try {
-                        paths = hmgr.getAllPaths(state.getId(), true);
-                        for (int i = 0; i < paths.length; i++) {
-                            Path parentPath = paths[i].getAncestor(1);
-                            events.add(EventState.propertyRemoved(state.getParentUUID(),
-                                    parentPath,
-                                    paths[i].getNameElement(),
-                                    nodeType,
-                                    session));
-                        }
-                    } catch (RepositoryException e) {
-                        // should never happen actually
-                        String msg = "Unable to resolve path for item: " + n.getId();
-                        log.error(msg);
-                        throw new ItemStateException(msg, e);
+                    NodeTypeImpl nodeType = getNodeType(n, session);
+                    Path paths[] = getAllPaths(state.getId(), hmgr);
+                    for (int i = 0; i < paths.length; i++) {
+                        events.add(EventState.propertyRemoved(state.getParentUUID(),
+                                getParent(paths[i]),
+                                paths[i].getNameElement(),
+                                nodeType,
+                                session));
+
+    /**
+     * Resolves the node type name in <code>node</code> into a {@link NodeType}
+     * object using the {@link NodeTypeManager} of <code>session</code>.
+     * @param node the node.
+     * @param session the session.
+     * @return the {@link NodeType} of <code>node</code>.
+     * @throws ItemStateException if the nodetype cannot be resolved.
+     */
+    private NodeTypeImpl getNodeType(NodeState node, SessionImpl session)
+            throws ItemStateException {
+        try {
+            return session.getNodeTypeManager().getNodeType(node.getNodeTypeName());
+        } catch (NoSuchNodeTypeException e) {
+            // should never happen actually
+            String msg = "Item " + node.getId() + " has unknown node type: " + node.getNodeTypeName();
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        }
+    }
+
+    /**
+     * Returns the path of the parent node of node at <code>path</code>..
+     * @param p the path.
+     * @return the parent path.
+     * @throws ItemStateException if <code>p</code> does not have a parent
+     * path. E.g. <code>p</code> designates root.
+     */
+    private Path getParent(Path p) throws ItemStateException {
+        try {
+            return p.getAncestor(1);
+        } catch (PathNotFoundException e) {
+            // should never happen actually
+            String msg = "Unable to resolve parent for path: " + p;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        }
+    }
+
+    /**
+     * Resolves the path of the Item with id <code>itemId</code>.
+     * @param itemId the id of the item.
+     * @return the path of the item.
+     * @throws ItemStateException if the path cannot be resolved.
+     */
+    private Path getPath(ItemId itemId, HierarchyManager hmgr)
+            throws ItemStateException {
+        try {
+            return hmgr.getPath(itemId);
+        } catch (RepositoryException e) {
+            // should never happen actually
+            String msg = "Unable to resolve path for item: " + itemId;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        }
+    }
+
+    /**
+     * Resolves all paths of the Item with id <code>itemId</code> including
+     * the zombie paths.
+     * @param itemId the id of the item.
+     * @return the paths of the item.
+     * @throws ItemStateException if the paths cannot be resolved.
+     */
+    private Path[] getAllPaths(ItemId itemId, HierarchyManager hmgr)
+            throws ItemStateException {
+        try {
+            return hmgr.getAllPaths(itemId, true);
+        } catch (RepositoryException e) {
+            // should never happen actually
+            String msg = "Unable to resolve paths for item: " + itemId;
+            log.error(msg);
+            throw new ItemStateException(msg, e);
+        }
+    }
