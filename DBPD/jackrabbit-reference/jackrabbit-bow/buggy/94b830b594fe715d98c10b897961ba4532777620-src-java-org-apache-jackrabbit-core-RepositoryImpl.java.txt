- added RepositoryImpl.createSession 
- working on Workspace methods (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157258 13f79535-47bb-0310-9956-ffa450edef68

+    /**
+     * @param workspaceName
+     * @return
+     * @throws NoSuchWorkspaceException
+     * @throws RepositoryException
+     */
+
+    /**
+     * Creates a new session on the specified workspace for the
+     * authenticated subject of the given login context.
+     *
+     * @param loginContext  login context with authenticated subject
+     * @param workspaceName workspace name
+     * @return a new session
+     * @throws NoSuchWorkspaceException if the specified workspace does not exist
+     * @throws AccessDeniedException    if the subject of the given login context
+     *                                  is not granted access to the specified
+     *                                  workspace
+     * @throws RepositoryException      if another error occurs
+     */
+    SessionImpl createSession(LoginContext loginContext, String workspaceName)
+            throws NoSuchWorkspaceException, AccessDeniedException,
+            RepositoryException {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
+        XASessionImpl ses = new XASessionImpl(this, loginContext, wspInfo.getConfig());
+        activeSessions.put(ses, ses);
+        return ses;
+    }
+
+    /**
+     * Creates a new session on the specified workspace for the given
+     * authenticated subject.
+     *
+     * @param subject       authenticated subject
+     * @param workspaceName workspace name
+     * @return a new session
+     * @throws NoSuchWorkspaceException if the specified workspace does not exist
+     * @throws AccessDeniedException    if the subject of the given login context
+     *                                  is not granted access to the specified
+     *                                  workspace
+     * @throws RepositoryException      if another error occurs
+     */
+    SessionImpl createSession(Subject subject, String workspaceName)
+            throws NoSuchWorkspaceException, AccessDeniedException,
+            RepositoryException {
+        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
+        if (wspInfo == null) {
+            throw new NoSuchWorkspaceException(workspaceName);
+        }
+        XASessionImpl ses = new XASessionImpl(this, subject, wspInfo.getConfig());
+        activeSessions.put(ses, ses);
+        return ses;
+    }
+
-     * Returns the system root node (i.e. /jcr:system)
-     *
-     * @param session
-     * @return
-     * @throws RepositoryException
-     */
-    public NodeImpl getSystemRootNode(SessionImpl session) throws RepositoryException {
-        // check state
-        if (disposed) {
-            throw new IllegalStateException("repository instance has been shut down");
-        }
-
-        return ((NodeImpl) session.getRootNode()).getNode(JCR_SYSTEM);
-    }
-
-    /**
-        WorkspaceInfo wspInfo = (WorkspaceInfo) wspInfos.get(workspaceName);
-        if (wspInfo == null) {
+        if (!wspInfos.containsKey(workspaceName)) {
-            // user from access control context
+            // subject from access control context
-            Session ses;
+            // create session
-                ses = new XASessionImpl(this, subject, wspInfo.getConfig());
+                return createSession(subject, workspaceName);
-            activeSessions.put(ses, ses);
-            return ses;
+        // login through JAAS login context
-        Session ses;
+        // create session
-            ses = new XASessionImpl(this, lc, wspInfo.getConfig());
+            return createSession(lc, workspaceName);
-        activeSessions.put(ses, ses);
-        return ses;
-    public void loggingOut(SessionImpl session) {}
+    public void loggingOut(SessionImpl session) {
+    }
