Changed XPath queries to reflect changes in latest spec: relative path uses root node as context node. absolute path must select /jcr:root to match anything at all.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@151355 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.InvalidQueryException;
+        LocationStepQueryNode[] steps = node.getPathSteps();
+        if (steps.length > 0) {
+            if (node.isAbsolute() && !steps[0].getIncludeDescendants()) {
+                // eat up first step
+                QName nameTest = steps[0].getNameTest();
+                if (nameTest == null) {
+                    // this is equivalent to the root node
+                    context = new TermQuery(new Term(FieldNames.PARENT, ""));
+                } else if (nameTest.getLocalName().length() == 0) {
+                    // root node
+                    context = new TermQuery(new Term(FieldNames.PARENT, ""));
+                } else {
+                    // then this is a node != the root node
+                    // will never match anything!
+                    String name = "";
+                    try {
+                        name = nameTest.toJCRName(nsMappings);
+                    } catch (NoPrefixDeclaredException e) {
+                        exceptions.add(e);
+                    }
+                    BooleanQuery and = new BooleanQuery();
+                    and.add(new TermQuery(new Term(FieldNames.PARENT, "")), true, false);
+                    and.add(new TermQuery(new Term(FieldNames.LABEL, name)), true, false);
+                    context = and;
+                }
+                LocationStepQueryNode[] tmp = new LocationStepQueryNode[steps.length - 1];
+                System.arraycopy(steps, 1, tmp, 0, steps.length - 1);
+                steps = tmp;
+            } else {
+                // path is 1) relative or 2) descendant-or-self
+                // use root node as context
+                context = new TermQuery(new Term(FieldNames.PARENT, ""));
+            }
+        } else {
+            exceptions.add(new InvalidQueryException("Number of location steps must be > 0"));
+        }
-        QueryNode[] steps = node.getPathSteps();
-        if (node.getNameTest() != null && node.getNameTest().getLocalName().length() == 0) {
-            // select root node
-            return new TermQuery(new Term(FieldNames.PARENT, ""));
-        }
-
-
+
