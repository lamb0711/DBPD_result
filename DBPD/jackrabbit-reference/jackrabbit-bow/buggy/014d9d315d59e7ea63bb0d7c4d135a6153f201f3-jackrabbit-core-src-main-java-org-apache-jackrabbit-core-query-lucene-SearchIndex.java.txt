#0000 - JCR-1232: Merge UUID to NodeId

Replace UUID references with NodeId alternatives from o.a.j.core.query.lucene.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@793015 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.uuid.UUID;
-     * The uuid resolver cache size.
+     * The id resolver cache size.
-     * Removes the node with <code>uuid</code> from the search index.
+     * Removes the node with <code>id</code> from the search index.
-     * @param remove uuids of nodes to remove.
+     * @param remove ids of nodes to remove.
-        Map<UUID, NodeState> aggregateRoots = new HashMap<UUID, NodeState>();
-        Set<UUID> removedUUIDs = new HashSet<UUID>();
-        Set<UUID> addedUUIDs = new HashSet<UUID>();
+        Map<NodeId, NodeState> aggregateRoots = new HashMap<NodeId, NodeState>();
+        Set<NodeId> removedIds = new HashSet<NodeId>();
+        Set<NodeId> addedIds = new HashSet<NodeId>();
-        Collection<UUID> removeCollection = new ArrayList<UUID>();
+        Collection<NodeId> removeCollection = new ArrayList<NodeId>();
-            UUID uuid = remove.next().getUUID();
-            removeCollection.add(uuid);
-            removedUUIDs.add(uuid);
+            NodeId id = remove.next();
+            removeCollection.add(id);
+            removedIds.add(id);
-                UUID uuid = state.getNodeId().getUUID();
-                addedUUIDs.add(uuid);
-                removedUUIDs.remove(uuid);
+                NodeId id = state.getNodeId();
+                addedIds.add(id);
+                removedIds.remove(id);
-        aggregateRoots.keySet().removeAll(addedUUIDs);
+        aggregateRoots.keySet().removeAll(addedIds);
-        // based on removed UUIDs get affected aggregate root nodes
-        retrieveAggregateRoot(removedUUIDs, aggregateRoots);
+        // based on removed ids get affected aggregate root nodes
+        retrieveAggregateRoot(removedIds, aggregateRoots);
-                UUID uuid = UUID.fromString(d.get(FieldNames.UUID));
-                ids.add(new NodeId(uuid));
+                ids.add(new NodeId(d.get(FieldNames.UUID)));
-                                doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, aggregate.getNodeId().getUUID().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
+                                doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, aggregate.getNodeId().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
-                                    doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, parent.getNodeId().getUUID().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
+                                    doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, parent.getNodeId().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
-                        + " node with UUID: " + state.getNodeId().getUUID(), e);
+                        + " node with id: " + state.getNodeId(), e);
-     * @param map   aggregate roots are collected in this map. Key=UUID,
-     *              value=NodeState.
+     * @param map   aggregate roots are collected in this map.
-            NodeState state, Map<UUID, NodeState> map) {
+            NodeState state, Map<NodeId, NodeState> map) {
-                        map.put(root.getNodeId().getUUID(), root);
+                        map.put(root.getNodeId(), root);
-                        + state.getNodeId().getUUID(), e);
+                        + state.getNodeId(), e);
-     * Retrieves the root of the indexing aggregate for <code>removedUUIDs</code>
+     * Retrieves the root of the indexing aggregate for <code>removedIds</code>
-     * @param removedUUIDs   the UUIDs of removed nodes.
+     * @param removedIds     the ids of removed nodes.
-            Set<UUID> removedUUIDs, Map<UUID, NodeState> map) {
+            Set<NodeId> removedIds, Map<NodeId, NodeState> map) {
-                    Term aggregateUUIDs =
+                    Term aggregateIds =
-                        for (UUID uuid : removedUUIDs) {
-                            aggregateUUIDs =
-                                aggregateUUIDs.createTerm(uuid.toString());
-                            tDocs.seek(aggregateUUIDs);
+                        for (NodeId id : removedIds) {
+                            aggregateIds =
+                                aggregateIds.createTerm(id.toString());
+                            tDocs.seek(aggregateIds);
-                                NodeId nId = new NodeId(
-                                        UUID.fromString(doc.get(FieldNames.UUID)));
-                                map.put(nId.getUUID(), (NodeState) ism.getItemState(nId));
+                                NodeId nId = new NodeId(doc.get(FieldNames.UUID));
+                                map.put(nId, (NodeState) ism.getItemState(nId));
-        public ForeignSegmentDocId createDocId(UUID uuid) throws IOException {
+        public ForeignSegmentDocId createDocId(NodeId id) throws IOException {
-                ForeignSegmentDocId doc = subReader.createDocId(uuid);
+                ForeignSegmentDocId doc = subReader.createDocId(id);
