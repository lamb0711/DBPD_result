JCR-3129 It should be possible to create a non-transient Repository inside the JCARepositoryManager

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1205295 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.RepositoryImpl;
+import org.apache.jackrabbit.core.config.RepositoryConfig;
+import java.io.InputStream;
-            repository =  JcrUtils.getRepository(parameters);
+        	if (parameters.containsKey(JcrUtils.REPOSITORY_URI)) {
+	            repository = JcrUtils.getRepository(parameters);
+        	} else {
+	            repository = createNonTransientRepository(parameters);
+        	}
+     * Creates a non transient Repository
+     * 
+     * @param parameters
+     * @return Repository
+     * @throws RepositoryException
+     */
+    private Repository createNonTransientRepository(
+			Map<String, String> parameters) throws RepositoryException {
+        RepositoryConfig config = null;
+
+        String configFile = parameters.get(JCAManagedConnectionFactory.CONFIGFILE_KEY);
+        String homeDir = parameters.get(JCAManagedConnectionFactory.HOMEDIR_KEY);
+        
+        if (configFile != null && configFile.startsWith(CLASSPATH_CONFIG_PREFIX)) {
+            ClassLoader cl = Thread.currentThread().getContextClassLoader();
+            if (cl == null) {
+                cl = this.getClass().getClassLoader();
+            }
+
+            InputStream configInputStream = cl.getResourceAsStream(
+                configFile.substring(CLASSPATH_CONFIG_PREFIX.length()));
+            config = RepositoryConfig.create(configInputStream, homeDir);
+        } else {
+            config = RepositoryConfig.create(configFile, homeDir);
+        }
+        return RepositoryImpl.create(config);
+	}
+
+	/**
