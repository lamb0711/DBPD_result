JAAS support 

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@155344 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.security.AccessManager;
+import org.apache.jackrabbit.core.security.SimpleAccessManager;
-import org.apache.jackrabbit.core.xml.SysViewSAXEventGenerator;
-import org.apache.jackrabbit.core.xml.SessionImporter;
+import org.apache.jackrabbit.core.xml.SessionImporter;
+import org.apache.jackrabbit.core.xml.SysViewSAXEventGenerator;
-import javax.jcr.SimpleCredentials;
+import javax.security.auth.Subject;
+import javax.security.auth.login.LoginContext;
+import java.security.Principal;
+import java.util.Set;
+     * the LoginContext of this session (can be null if this
+     * session was not instantiated through a login process)
+     */
+    protected LoginContext loginContext;
+
+    /**
-    protected AccessManagerImpl accessMgr;
+    protected AccessManager accessMgr;
-     * @param credentials
+     * @param loginContext
-    protected SessionImpl(RepositoryImpl rep, Credentials credentials,
+    protected SessionImpl(RepositoryImpl rep, LoginContext loginContext,
-        alive = true;
-        this.rep = rep;
-        if (credentials instanceof SimpleCredentials) {
-            SimpleCredentials sc = (SimpleCredentials) credentials;
-            // clear password for security reasons
-            char[] pwd = sc.getPassword();
-            if (pwd != null) {
-                for (int i = 0; i < pwd.length; i++) {
-                    pwd[i] = 0;
-                }
-            }
-            userId = sc.getUserId();
-            String[] names = sc.getAttributeNames();
-            for (int i = 0; i < names.length; i++) {
-                attributes.put(names[i], sc.getAttribute(names[i]));
-            }
-        } else {
-            userId = null;
-        }
-        nsMappings = new LocalNamespaceMappings(rep.getNamespaceRegistry());
-        ntMgr = new NodeTypeManagerImpl(rep.getNodeTypeRegistry(), getNamespaceResolver());
-        String wspName = wspConfig.getName();
-        wsp = new WorkspaceImpl(wspConfig, rep.getWorkspaceStateManager(wspName),
-                rep, this);
-        itemStateMgr = createSessionItemStateManager(wsp.getItemStateManager());
-        hierMgr = itemStateMgr.getHierarchyMgr();
-        itemMgr = createItemManager(itemStateMgr, hierMgr);
-        accessMgr = createAccessManager(credentials, hierMgr);
-        versionMgr = rep.getVersionManager();
-
-        // add virtual item managers only for normal sessions
-        if (!(this instanceof SystemSession)) {
-            try {
-                itemStateMgr.addVirtualItemStateProvider(versionMgr.getVirtualItemStateProvider(this, itemStateMgr));
-            } catch (Exception e) {
-                log.error("Unable to add vmgr: " + e.toString(), e);
-            }
-        }
+        this(rep, loginContext.getSubject(), wspConfig);
+        this.loginContext = loginContext;
-     * @param userId
+     * @param subject
-    protected SessionImpl(RepositoryImpl rep, String userId, WorkspaceConfig wspConfig)
+    protected SessionImpl(RepositoryImpl rep, Subject subject,
+                          WorkspaceConfig wspConfig)
-        this.userId = userId;
+        Set principals = subject.getPrincipals();
+        if (principals.isEmpty()) {
+            String msg = "unable to instantiate Session: no principals found";
+            log.error(msg);
+            throw new RepositoryException(msg);
+        } else {
+            // use 1st principal in case there are more that one
+            Principal principal = (Principal) principals.iterator().next();
+            userId = principal.getName();
+        }
+        accessMgr = createAccessManager(subject, hierMgr);
-        // add virtual item managers only for normal sessions
+        // add virtual item managers (only for non-system sessions)
-
-    protected AccessManagerImpl createAccessManager(Credentials credentials,
-                                                    HierarchyManager hierMgr) {
-        return new AccessManagerImpl(credentials, hierMgr);
+    protected AccessManager createAccessManager(Subject subject,
+                                                HierarchyManager hierMgr) {
+        return new SimpleAccessManager(subject, hierMgr);
-    public AccessManagerImpl getAccessManager() {
+    public AccessManager getAccessManager() {
+        // logout jaas subject
+        if (loginContext != null) {
+            try {
+                loginContext.logout();
+            } catch (javax.security.auth.login.LoginException le) {
+                log.warn("failed to logout current subject: " + le.getMessage());
+            }
+            loginContext = null;
+        }
