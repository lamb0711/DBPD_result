some cleaning up in NodeImpl & PropertyImpl as suggested by angela (JCR-114)

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@164488 13f79535-47bb-0310-9956-ffa450edef68

+     * Checks various pre-conditions that are common to all
+     * <code>setValue()</code> methods. The checks performed are:
+     * <ul>
+     * <li>parent node must be checked-out</li>
+     * <li>property must not be protected</li>
+     * <li>parent node must not be locked by somebody else</li>
+     * <li>property must be multi-valued when set to an array of values
+     * (and vice versa)</li>
+     * </ul>
+     *
+     * @param multipleValues flag indicating whether the property is about to
+     *                       be set to an array of values
+     * @throws ValueFormatException if a single-valued property is set to an
+     *                              array of values (and vice versa)
+     * @throws VersionException if the parent node is not checked-out
+     * @throws LockException if the parent node is locked by somebody else
+     * @throws ConstraintViolationException if the property is protected
+     * @throws RepositoryException if another error occurs
+     *
+     * @see javax.jcr.Property#setValue
+     */
+    protected void checkSetValue(boolean multipleValues)
+            throws ValueFormatException, VersionException,
+            LockException, ConstraintViolationException,
+            RepositoryException {
+        // verify that parent node is checked-out
+        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
+            throw new VersionException(
+                    "cannot set the value of a property of a checked-in node "
+                    + safeGetJCRPath());
+        }
+
+        // check protected flag
+        if (definition.isProtected()) {
+            throw new ConstraintViolationException(
+                    "cannot set the value of a protected property "
+                    + safeGetJCRPath());
+        }
+
+        // check multi-value flag
+        if (multipleValues) {
+            if (!definition.isMultiple()) {
+                throw new ValueFormatException(safeGetJCRPath()
+                        + " is not multi-valued");
+            }
+        } else {
+            if (definition.isMultiple()) {
+                throw new ValueFormatException(safeGetJCRPath()
+                        + " is multi-valued and can therefore only be set to an array of values");
+            }
+        }
+
+        // check lock status
+        ((NodeImpl) getParent()).checkLock();
+    }
+
+    /**
+     * @throws VersionException
+     * @throws LockException
+     * @throws ConstraintViolationException
-    public void setValue(QName name) throws ValueFormatException, RepositoryException {
+    public void setValue(QName name)
+            throws ValueFormatException, VersionException,
+            LockException, ConstraintViolationException,
+            RepositoryException {
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
+        // check pre-conditions for setting property value
+        checkSetValue(false);
+     * @throws VersionException
+     * @throws LockException
+     * @throws ConstraintViolationException
-    public void setValue(QName[] names) throws ValueFormatException, RepositoryException {
+    public void setValue(QName[] names)
+            throws ValueFormatException, VersionException,
+            LockException, ConstraintViolationException,
+            RepositoryException {
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (!definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is not multi-valued");
-        }
+        // check pre-conditions for setting property value
+        checkSetValue(true);
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is not multi-valued");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is not multi-valued");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be retrieved as an array of values");
+            throw new ValueFormatException(safeGetJCRPath()
+                    + " is multi-valued and can therefore only be retrieved as an array of values");
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (!definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is not multi-valued");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(true);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            String msg = "cannot set the value of a property of a checked-in node " + safeGetJCRPath();
-            log.debug(msg);
-            throw new VersionException(msg);
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is multi-valued and can therefore only be set to an array of values");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(false);
-        // verify that parent node is checked-out
-        if (!((NodeImpl) getParent()).internalIsCheckedOut()) {
-            throw new VersionException("cannot set the value of a property of a checked-in node " + safeGetJCRPath());
-        }
-
-        // check protected flag
-        if (definition.isProtected()) {
-            throw new ConstraintViolationException("cannot set the value of a protected property " + safeGetJCRPath());
-        }
-
-        // check multi-value flag
-        if (!definition.isMultiple()) {
-            throw new ValueFormatException(safeGetJCRPath() + " is not multi-valued");
-        }
-
-        // check lock status
-        ((NodeImpl) getParent()).checkLock();
+        // check pre-conditions for setting property value
+        checkSetValue(true);
