Refactoring

- separate hierarchy from ItemStates
- remove ItemStateManager
- move all hierarchy related classes to a separate package ('hierarchy')
- allow loading of deep Item without loading ancestors
- consequently item definition is only built upon usage, since parent is needed.
- minor fixes with adding/removing mixin-nodetypes

Consequences for SPI interfaces:

- SPI impl must be able to deal with both proper itemID and path, since jcr2spi
  might not be aware of a uniqueID defined with a parent node.

- ItemInfo.getPath added, in order to be able to built the missing hierarchy
  entries if a deep Item identified by uniqueID (plus ev. path) is loaded

- LockInfo.getNodeId added, in order to be able to determine the lock-holding node.




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@506927 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.spi.QPropertyDefinition;
+import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
+import org.apache.jackrabbit.jcr2spi.hierarchy.PropertyEntry;
+import org.apache.jackrabbit.spi.QPropertyDefinition;
-     * @param name the name of the <code>NodeState</code> to create.
-     * @param uniqueID the unique ID of the <code>NodeState</code> to create or
-     * <code>null</code> if the created <code>NodeState</code> cannot be
-     * identified by a unique ID.
-     * @param parent the parent of the <code>NodeState</code> to create.
-     * @param nodeTypeName name of the primary nodetype
-     * @param definition the definition for this new NodeState
-     * @return the created <code>NodeState</code>.
+     * @param entry
+     * @param nodeTypeName
+     * @param definition
+     * @return the created <code>NodeState</code>
-    public NodeState createNewNodeState(QName name, String uniqueID,
-                                        NodeState parent, QName nodeTypeName,
+    public NodeState createNewNodeState(NodeEntry entry,
+                                        QName nodeTypeName,
-     * Creates a transient <code>PropertyState</code> with the given
-     * <code>name</code>.
+     * Creates a transient <code>PropertyState</code>.
-     * @param name   the name of the <code>PropertyState</code> to create.
-     * @param parent the parent of the <code>PropertyState</code> to create.
-     * @param definition definition for this new property state.
+     * @param entry
+     * @param definition
-    public PropertyState createNewPropertyState(QName name,
-                                                NodeState parent,
+    public PropertyState createNewPropertyState(PropertyEntry entry,
-
-    /**
-     * Set the listener that gets informed about NEW states.
-     *
-     * @param listener
-     */
-    public void setListener(ItemStateCreationListener listener);
