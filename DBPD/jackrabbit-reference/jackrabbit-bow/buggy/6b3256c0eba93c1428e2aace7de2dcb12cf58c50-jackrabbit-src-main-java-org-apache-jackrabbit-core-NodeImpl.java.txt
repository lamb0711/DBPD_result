Locking and XA
- Introduce internal XA resources
- Add rollback thread that runs when transaction timeout has expired
- Make lock's live attribute transaction-aware
- Make NodeImpl's internalSetProperty protected again 



git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@365558 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.jackrabbit.core;
+package org.apache.jackrabbit.core
+import org.apache.jackrabbit.core.lock.LockManager;
-     * <p/>
-     * <strong>Important:</strong> This method is public in order to make it
-     * accessible from internal code located in subpackages, i.e. it should
-     * never be called from an application directly!!!
-     *
-    public Property internalSetProperty(QName name, InternalValue value)
+    protected Property internalSetProperty(QName name, InternalValue value)
-        /**
-         * todo FIXME internalSetProperty being public is a potential security risk
-         * the following code snippet is a workaround that verifies that the
-         * caller is located in the same package (i.e. 'core') or a subpackage
-         * thereof; it is tested with jackrabbit being run standalone; however
-         * i commented it out as i am not sure whether there are potential
-         * problems/side effects with other setups/environments.
-         */
-/*
-        CallContext ctx = new CallContext();
-        String calledFromPackage = ctx.getCaller().getPackage().getName();
-        String thisPackage = NodeImpl.class.getPackage().getName();
-        // check if we're called from current package (i.e. 'core')
-        // or a subpackage thereof
-        if (!calledFromPackage.startsWith(thisPackage)) {
-            throw new SecurityException("illegal method invokation");
-        }
-*/
-        return session.getLockManager().lock(this, isDeep, isSessionScoped);
+        LockManager lockMgr = session.getLockManager();
+        synchronized (lockMgr) {
+            Lock lock = lockMgr.lock(this, isDeep, isSessionScoped);
+
+            // add properties to content
+            internalSetProperty(QName.JCR_LOCKOWNER,
+                    InternalValue.create(getSession().getUserID()));
+            internalSetProperty(QName.JCR_LOCKISDEEP,
+                    InternalValue.create(isDeep));
+            save();
+            return lock;
+        }
-        session.getLockManager().unlock(this);
+
+        LockManager lockMgr = session.getLockManager();
+        synchronized (lockMgr) {
+            lockMgr.unlock(this);
+
+            // remove properties in content
+            internalSetProperty(QName.JCR_LOCKOWNER, (InternalValue) null);
+            internalSetProperty(QName.JCR_LOCKISDEEP, (InternalValue) null);
+            save();
+        }
