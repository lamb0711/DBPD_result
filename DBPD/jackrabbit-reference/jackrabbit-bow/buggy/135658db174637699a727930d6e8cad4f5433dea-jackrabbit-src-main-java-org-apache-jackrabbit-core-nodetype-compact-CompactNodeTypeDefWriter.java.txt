- adding more standard implementation for cnd writer that allows write(NodeTypeDef) calls.

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@383856 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.name.QName;
+import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.NamespaceResolver;
-import org.apache.jackrabbit.name.QName;
-import javax.jcr.NamespaceException;
+import javax.jcr.NamespaceException;
+import java.io.StringWriter;
-import java.util.*;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Iterator;
-     * The list of NodeTypeDefs to write
-     */
-    private final List nodeTypeDefList;
-
-    /**
-    private final Writer out;
+    private Writer out;
-     * The namespaces to be written out.
+     * special writer used for namespaces
-    private final Map namespaceMap = new HashMap();
+    private Writer nsWriter;
+     * namespaces(prefixes) that are used
+     */
+    private HashSet usedNamespaces = new HashSet();
+
+    /**
+     * Creates a new nodetype writer
+     *
+     * @param out the underlying writer
+     * @param r the namespace resolver
+     */
+    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r) {
+        this(out, r, false);
+    }
+
+    /**
+     * Creates a new nodetype writer
+     *
+     * @param out the underlaying writer
+     * @param r the naespace resolver
+     * @param includeNS if <code>true</code> all used namespace decl. are also
+     *        written.
+     */
+    public CompactNodeTypeDefWriter(Writer out, NamespaceResolver r, boolean includeNS) {
+        this.resolver = r;
+        if (includeNS) {
+            this.out = new StringWriter();
+            this.nsWriter = out;
+        } else {
+            this.out = out;
+            this.nsWriter = null;
+        }
+    }
+
+    /**
+     * Writes the given list of NodeTypeDefs to the output writer including the
+     * used namespaces.
-     * @param w
-     */
-    public CompactNodeTypeDefWriter(List l, NamespaceResolver r, Writer w) throws NamespaceException {
-        nodeTypeDefList = l;
-        out = w;
-        resolver = r;
-        buildNamespaceMap();
-    }
-
-    /**
-     *
+     * @param out
-    public void write() throws IOException, NamespaceException {
-        for (Iterator i = namespaceMap.entrySet().iterator(); i.hasNext();){
-            Map.Entry e = (Map.Entry)i.next();
-            String prefix = (String)e.getKey();
-            String uri = (String)e.getValue();
-            out.write("<");
-            out.write(prefix);
-            out.write(" = \"");
-            out.write(uri);
-            out.write("\">\n");
+    public static void write(List l, NamespaceResolver r, Writer out)
+            throws IOException {
+        CompactNodeTypeDefWriter w = new CompactNodeTypeDefWriter(out, r, true);
+        Iterator iter = l.iterator();
+        while (iter.hasNext()) {
+            NodeTypeDef def = (NodeTypeDef) iter.next();
+            w.write(def);
-        for (Iterator i = nodeTypeDefList.iterator(); i.hasNext();){
-            NodeTypeDef ntd = (NodeTypeDef)i.next();
-            writeName(ntd);
-            writeSupertypes(ntd);
-            writeOptions(ntd);
-            writePropDefs(ntd);
-            writeChildNodeDefs(ntd);
-        }
+        w.close();
-     * closes this writer but not the underlying stream
+     * Write one NodeTypeDef to this writer
+     *
+     * @param d
+     * @throws IOException
+     */
+    public void write(NodeTypeDef d) throws IOException {
+        writeName(d);
+        writeSupertypes(d);
+        writeOptions(d);
+        writePropDefs(d);
+        writeNodeDefs(d);
+        out.write("\n\n");
+    }
+
+    /**
+     * Flushes all pending write operations and Closes this writer. please note,
+     * that the underlying writer remains open.
+        if (nsWriter != null) {
+            nsWriter.write("\n");
+            out.close();
+            nsWriter.write(((StringWriter) out).getBuffer().toString());
+            out = nsWriter;
+            nsWriter = null;
+        }
+        out = null;
-     * buildNamespaceMap
+     * write name
-    private void buildNamespaceMap() throws NamespaceException {
-        for (Iterator i = nodeTypeDefList.iterator(); i.hasNext();){
-            NodeTypeDef ntd = (NodeTypeDef)i.next();
-            addNamespace(ntd.getName());
-            addNamespace(ntd.getSupertypes());
-            PropDef[] pda = ntd.getPropertyDefs();
-            for (int j = 0; j < pda.length; j++){
-                PropDef pd = pda[j];
-                addNamespace(pd.getName());
-            }
-
-            NodeDef[] nda = ntd.getChildNodeDefs();
-            for (int j = 0; j < nda.length; j++){
-                NodeDef nd = nda[j];
-                addNamespace(nd.getName());
-                addNamespace(nd.getRequiredPrimaryTypes());
-                addNamespace(nd.getDefaultPrimaryType());
-            }
-        }
-    }
-
-    private void addNamespace(QName qn) throws NamespaceException {
-        String uri = qn.getNamespaceURI();
-        String prefix = resolver.getPrefix(uri);
-        namespaceMap.put(prefix, uri);
-    }
-
-    private void addNamespace(QName[] qna) throws NamespaceException {
-        for(int i = 0; i < qna.length; i++){
-            QName qn = qna[i];
-            addNamespace(qn);
-        }
-    }
-
-    /**
-     * writeName
-     */
-    private void writeName(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writeName(NodeTypeDef ntd) throws IOException {
-     * writeSupertypes
+     * write supertypes
-    private void writeSupertypes(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writeSupertypes(NodeTypeDef ntd) throws IOException {
-                delim = ", ";
+                delim=", ";
-     * writeOptions
+     * write options
-     * writePropDefs
+     * write prop defs
-    private void writePropDefs(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writePropDefs(NodeTypeDef ntd) throws IOException {
-     * writeNodeDefs
+     * write node defs
-    private void writeChildNodeDefs(NodeTypeDef ntd) throws IOException, NamespaceException {
+    private void writeNodeDefs(NodeTypeDef ntd) throws IOException {
-     * writePropDef
+     * write prop def
-    private void writePropDef(NodeTypeDef ntd, PropDef pd) throws IOException, NamespaceException {
+    private void writePropDef(NodeTypeDef ntd, PropDef pd) throws IOException {
-     * writeDefaultValues
+     * write default values
-     * writeValueConstraints
+     * write value constraints
-        out.write(" < '");
+        out.write("\n" + INDENT + INDENT + "< '");
-     * writeNodeDef
+     * write node def
-    private void writeNodeDef(NodeTypeDef ntd, NodeDef nd) throws IOException, NamespaceException {
+    private void writeNodeDef(NodeTypeDef ntd, NodeDef nd) throws IOException {
-    private void writeItemDefName(QName name) throws IOException, NamespaceException {
+    /**
+     * Write item def name
+     * @param name
+     * @throws IOException
+     */
+    private void writeItemDefName(QName name) throws IOException {
-     * putRequiredTypes
+     * write required types
-    private void writeRequiredTypes(QName[] reqTypes) throws IOException, NamespaceException {
+    private void writeRequiredTypes(QName[] reqTypes) throws IOException {
-     * putDefaultType
+     * write default types
-    private void writeDefaultType(QName defType) throws IOException, NamespaceException {
+    private void writeDefaultType(QName defType) throws IOException {
-    private String resolve(QName qname) throws NamespaceException {
+    private String resolve(QName qname) throws IOException {
-        String prefix = resolver.getPrefix(qname.getNamespaceURI());
-        if (prefix != null && !prefix.equals(QName.NS_EMPTY_PREFIX)) {
-            prefix += ":";
+        try {
+            String prefix = resolver.getPrefix(qname.getNamespaceURI());
+            if (prefix != null && !prefix.equals(QName.NS_EMPTY_PREFIX)) {
+                // check for writing namespaces
+                if (nsWriter != null) {
+                    if (!usedNamespaces.contains(prefix)) {
+                        usedNamespaces.add(prefix);
+                        nsWriter.write('<');
+                        nsWriter.write(prefix);
+                        nsWriter.write("='");
+                        nsWriter.write(escape(qname.getNamespaceURI()));
+                        nsWriter.write("'>\n");
+                    }
+                }
+                prefix += ":";
+            }
+            return prefix + qname.getLocalName();
+        } catch (NamespaceException e) {
+            return qname.toString();
-        return prefix + qname.getLocalName();
