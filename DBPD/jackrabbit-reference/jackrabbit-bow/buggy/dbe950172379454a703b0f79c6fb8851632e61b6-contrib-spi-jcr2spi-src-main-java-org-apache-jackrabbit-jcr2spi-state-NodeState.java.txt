remove ItemStateException (and subclasses) and replace their usage with RepositoryException and subclasses respectively

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@520315 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.ItemNotFoundException;
-     * @throws NoSuchItemStateException
-     * @throws ItemStateException
+     * @throws ItemNotFoundException
+     * @throws RepositoryException
-    public NodeState getChildNodeState(QName nodeName, int index) throws NoSuchItemStateException, ItemStateException {
+    public NodeState getChildNodeState(QName nodeName, int index) throws ItemNotFoundException, RepositoryException {
-            throw new NoSuchItemStateException("Child node "+ nodeName +" with index " + index + " does not exist.");
+            throw new ItemNotFoundException("Child node "+ nodeName +" with index " + index + " does not exist.");
-     * @throws NoSuchItemStateException If there is no (valid) property state
+     * @throws ItemNotFoundException If there is no (valid) property state
-     * @throws ItemStateException If an error occurs while retrieving the
+     * @throws RepositoryException If an error occurs while retrieving the
-    public PropertyState getPropertyState(QName propertyName) throws NoSuchItemStateException, ItemStateException {
+    public PropertyState getPropertyState(QName propertyName) throws ItemNotFoundException, RepositoryException {
-            throw new NoSuchItemStateException("Child Property with name " + propertyName + " does not exist.");
+            throw new ItemNotFoundException("Child Property with name " + propertyName + " does not exist.");
-    void persisted(ChangeLog changeLog, CacheBehaviour cacheBehaviour)
-        throws IllegalStateException {
+    void persisted(ChangeLog changeLog, CacheBehaviour cacheBehaviour) throws IllegalStateException {
-            try {
-                NodeState parent = delState.getParent();
-                if (!changeLog.containsDeletedState(parent)) {
-                    modifiedParent(parent, delState, modParents);
+            if (delState.getHierarchyEntry().getParent().isAvailable()) {
+                try {
+                    NodeState parent = delState.getParent();
+                    if (!changeLog.containsDeletedState(parent)) {
+                        modifiedParent(parent, delState, modParents);
+                    }
+                } catch (RepositoryException e) {
+                    // ignore. if parent state cannot be retrieved for whatever
+                    // reason, it doesn't need to be adjusted
-            } catch (ItemStateException e) {
-                // ignore. if parent state does not exist it doesn't need to be adjusted
-            } catch (ItemStateException e) {
+            } catch (RepositoryException e) {
-                    } catch (ItemStateException e) {
+                    } catch (RepositoryException e) {
-                        log.error("Internal error:", e.getMessage());
+                        log.warn("Internal error:", e.getMessage());
-     * @throws NoSuchItemStateException if <code>insertNode</code> or
+     * @throws ItemNotFoundException if <code>insertNode</code> or
-        throws NoSuchItemStateException {
+        throws ItemNotFoundException {
-                        } catch (ItemStateException e) {
+                        } catch (RepositoryException e) {
-                } catch (ItemStateException e) {
+                } catch (RepositoryException e) {
