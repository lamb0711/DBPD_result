 JCR-1588: JSR 283: Access Control

- align principalbased ac editing with latest changes made to JSR 283
   -> getApplicablePolicies(Principal) only returns policies that have not yet been set
   -> getPolicies(Principal) added -> used to modify policies that have been set before

- WorkspaceAccessManagerImpl.grants throws NoSuchWorkspaceException if an invalid
   wspName gets passed... TCK tests would fail if not executed with admin user that
   is covered by shortcut.

- Various improvements to AccessControlProvider handling
   > prevent closure of used provider
   > add AccessControlProvider#isLive that allows to rebuild the provider if it was closed before

- Simplify WriteTest and add test for changes made to principal-based ACLEditor

JCR-2087 Upgrade to Java 5 as the base platform
- use generics in security code (work in progress)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@788450 13f79535-47bb-0310-9956-ffa450edef68

-            // controlled -> build a default policy.
+            // controlled.
-            acls.add(new UnmodifiableAccessControlList(Collections.EMPTY_LIST));
-            ACLTemplate acl = (ACLTemplate) acls[0];
+            if (acls.length > 0) {
+                ACLTemplate acl = (ACLTemplate) acls[0];
+                
+                PrincipalManager pMgr = session.getPrincipalManager();
+                AccessControlManager acMgr = session.getAccessControlManager();
-            PrincipalManager pMgr = session.getPrincipalManager();
-            AccessControlManager acMgr = session.getAccessControlManager();
+                log.debug("... Privilege.ALL for administrators.");
+                Principal administrators;
+                String pName = SecurityConstants.ADMINISTRATORS_NAME;
+                if (pMgr.hasPrincipal(pName)) {
+                    administrators = pMgr.getPrincipal(pName);
+                } else {
+                    log.warn("Administrators principal group is missing.");
+                    administrators = new PrincipalImpl(pName);
+                }
+                Privilege[] privs = new Privilege[]{acMgr.privilegeFromName(Privilege.JCR_ALL)};
+                acl.addAccessControlEntry(administrators, privs);
-            log.debug("... Privilege.ALL for administrators.");
-            Principal administrators;
-            String pName = SecurityConstants.ADMINISTRATORS_NAME;
-            if (pMgr.hasPrincipal(pName)) {
-                administrators = pMgr.getPrincipal(pName);
+                Principal everyone = pMgr.getEveryone();
+                log.debug("... Privilege.READ for everyone.");
+                privs = new Privilege[]{acMgr.privilegeFromName(Privilege.JCR_READ)};
+                acl.addAccessControlEntry(everyone, privs);
+
+                editor.setPolicy(rootPath, acl);
+                session.save();
-                log.warn("Administrators principal group is missing.");
-                administrators = new PrincipalImpl(pName);
+                log.warn("No applicable ACL available for the root node -> skip initialization of the root node's ACL.");
-            Privilege[] privs = new Privilege[]{acMgr.privilegeFromName(Privilege.JCR_ALL)};
-            acl.addAccessControlEntry(administrators, privs);
-
-            Principal everyone = pMgr.getEveryone();
-            log.debug("... Privilege.READ for everyone.");
-            privs = new Privilege[]{acMgr.privilegeFromName(Privilege.JCR_READ)};
-            acl.addAccessControlEntry(everyone, privs);
-
-            editor.setPolicy(rootPath, acl);
-            session.save();
-
