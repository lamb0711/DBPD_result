JCR-1819 : Add specific deep loading of Nodes and Properties
JCR-1843 : wrong status change upon conflicting removal (CacheBehaviour.OBSERVATION)
JCR-1293 : ReorderReferenceableSNSTest failure
JCR-1811 : ExportSysViewTest#testExportSysView_handler_session_saveBinary_occasionally failing


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@709211 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManager;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManager;
+import org.apache.jackrabbit.jcr2spi.state.ItemStateCreationListener;
-import org.apache.jackrabbit.jcr2spi.state.ItemStateCreationListener;
+import org.apache.jackrabbit.jcr2spi.state.Status;
-import org.slf4j.LoggerFactory;
+import org.slf4j.LoggerFactory;
-import javax.jcr.AccessDeniedException;
+import javax.jcr.Item;
+import javax.jcr.Node;
+import javax.jcr.Property;
-import javax.jcr.Item;
-     * @see ItemManager#itemExists(Path)
+     * @see ItemManager#nodeExists(Path)
-    public boolean itemExists(Path path) {
+    public boolean nodeExists(Path path) {
-            ItemState itemState = hierMgr.getItemState(path);
-            return itemExists(itemState);
+            NodeState nodeState = hierMgr.getNodeState(path);
+            return itemExists(nodeState);
+        } catch (PathNotFoundException pnfe) {
+            return false;
+        } catch (ItemNotFoundException infe) {
+            return false;
+        } catch (RepositoryException re) {
+            return false;
+        }
+    }
+
+    /**
+     * @see ItemManager#propertyExists(Path)
+     */
+    public boolean propertyExists(Path path) {
+        try {
+            // session-sanity & permissions are checked upon itemExists(ItemState)
+            PropertyState propState = hierMgr.getPropertyState(path);
+            return itemExists(propState);
-     * @see ItemManager#getItem(Path)
+     * @see ItemManager#getNode(Path)
-    public synchronized Item getItem(Path path)
-            throws PathNotFoundException, AccessDeniedException, RepositoryException {
-        HierarchyEntry itemEntry = hierMgr.getHierarchyEntry(path);
+    public synchronized Node getNode(Path path) throws PathNotFoundException, RepositoryException {
+        NodeEntry nodeEntry = hierMgr.getNodeEntry(path);
-            return getItem(itemEntry);
+            return (Node) getItem(nodeEntry);
+        } catch (ItemNotFoundException infe) {
+            throw new PathNotFoundException(LogUtil.safeGetJCRPath(path, session.getPathResolver()));
+        }
+    }
+
+    /**
+     * @see ItemManager#getProperty(Path)
+     */
+    public synchronized Property getProperty(Path path) throws PathNotFoundException, RepositoryException {
+        PropertyEntry propertyEntry = hierMgr.getPropertyEntry(path);
+        try {
+            return (Property) getItem(propertyEntry);
-    public Item getItem(HierarchyEntry hierarchyEntry) throws ItemNotFoundException, AccessDeniedException, RepositoryException {
-        ItemState itemState = hierarchyEntry.getItemState();
-        return getItem(itemState);
-    }
-
-    /**
-     *
-     * @param itemState
-     * @return
-     * @throws ItemNotFoundException
-     * @throws AccessDeniedException
-     * @throws RepositoryException
-     */
-    private Item getItem(ItemState itemState) throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+    public Item getItem(HierarchyEntry hierarchyEntry) throws ItemNotFoundException, RepositoryException {
-        if (!itemState.isValid()) {
+        ItemState state = hierarchyEntry.getItemState();
+        if (!state.isValid()) {
-        Item item = itemCache.getItem(itemState);
+        Item item = itemCache.getItem(state);
-            if (itemState.isNode()) {
-                item = createNodeInstance((NodeState) itemState);
+            if (hierarchyEntry.denotesNode()) {
+                item = createNodeInstance((NodeState) state);
-                item = createPropertyInstance((PropertyState) itemState);
+                item = createPropertyInstance((PropertyState) state);
-            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+            throws ItemNotFoundException, RepositoryException {
-            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+            throws ItemNotFoundException, RepositoryException {
-            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+            throws ItemNotFoundException, RepositoryException {
-            throws ItemNotFoundException, AccessDeniedException, RepositoryException {
+            throws ItemNotFoundException, RepositoryException {
-            return new VersionImpl(this, session, state, listeners);
+            return new VersionImpl(session, state, listeners);
-            return new VersionHistoryImpl(this, session, state, listeners);
+            return new VersionHistoryImpl(session, state, listeners);
-            return new NodeImpl(this, session, state, listeners);
+            return new NodeImpl(session, state, listeners);
-        PropertyImpl prop = new PropertyImpl(this, session, state, listeners);
+        PropertyImpl prop = new PropertyImpl(session, state, listeners);
-        // nothing to do -> Item is listening to status changes and forces
-        // cleanup of cache entries through it's own status changes.
+        // stop listening if an state reached Status.REMOVED.
+        if (Status.REMOVED == state.getStatus()) {
+            state.removeListener(this);
+        }
+        // otherwise: nothing to do -> Item is listening to status changes and
+        // forces cleanup of cache entries through it's own status changes.
