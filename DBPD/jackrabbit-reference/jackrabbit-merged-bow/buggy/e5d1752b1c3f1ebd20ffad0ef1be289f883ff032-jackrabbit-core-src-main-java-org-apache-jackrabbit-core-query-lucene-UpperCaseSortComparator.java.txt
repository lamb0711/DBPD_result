JCR-2415: Update Lucene to 3.0
- Merge all from JCR-2415-lucene-3.0 at 1064038 (reintegration)

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1064058 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.lucene.search.FieldComparator;
+import org.apache.lucene.search.FieldComparatorSource;
+
-import org.apache.lucene.search.ScoreDocComparator;
-import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.SortField;
-import org.apache.lucene.search.SortComparatorSource;
-import org.apache.lucene.index.IndexReader;
-
- * <code>UpperCaseSortComparator</code> implements a sort comparator that
+ * <code>UpperCaseSortComparator</code> implements a <code>FieldComparator</code> which
-public class UpperCaseSortComparator implements SortComparatorSource {
-
-    private static final long serialVersionUID = 2562371983498948119L;
+public class UpperCaseSortComparator extends FieldComparatorSource {
-    private final SortComparatorSource base;
+    private final FieldComparatorSource base;
-    public UpperCaseSortComparator(SortComparatorSource base) {
+    public UpperCaseSortComparator(FieldComparatorSource base) {
-    /**
-     * {@inheritDoc}
-     */
-    public ScoreDocComparator newComparator(IndexReader reader,
-                                            String fieldname)
-            throws IOException {
-        return new Comparator(base.newComparator(reader, fieldname));
-    }
+    @Override
+    public FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed) throws IOException {
+        FieldComparator comparator = base.newComparator(fieldname, numHits, sortPos, reversed);
+        assert comparator instanceof FieldComparatorBase;
-    private static final class Comparator implements ScoreDocComparator {
-
-        private ScoreDocComparator base;
-
-        private Comparator(ScoreDocComparator base) {
-            this.base = base;
-        }
-
-        /**
-         * @see Util#compare(Comparable, Comparable)
-         */
-        public int compare(ScoreDoc i, ScoreDoc j) {
-            return Util.compare(sortValue(i), sortValue(j));
-        }
-
-        public Comparable sortValue(ScoreDoc i) {
-            Comparable c = base.sortValue(i);
-            if (c != null) {
-                return c.toString().toUpperCase();
-            } else {
-                return null;
+        return new FieldComparatorDecorator((FieldComparatorBase) comparator) {
+            @Override
+            protected Comparable sortValue(int doc) {
+                Comparable c = super.sortValue(doc);
+                return c == null ? null : c.toString().toUpperCase();
-        }
-
-        public int sortType() {
-            return SortField.CUSTOM;
-        }
+        };
-}
+
+}

MOV26 UPD40 UPD40 UPD43 INS31 UPD42 UPD43 INS78 MOV83 UPD43 MOV43 MOV42 MOV44 MOV44 INS44 INS44 MOV43 INS8 UPD66 UPD42 UPD43 INS42 UPD42 INS39 INS42 INS39 INS42 INS39 INS42 INS60 INS6 INS41 UPD42 INS43 INS59 INS62 INS14 UPD42 MOV42 INS42 INS32 INS42 INS43 INS43 INS11 INS1 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS31 UPD42 MOV42 INS78 UPD83 MOV83 MOV43 MOV42 INS44 MOV8 INS42 INS39 INS42 INS60 MOV43 INS59 INS16 INS42 INS48 INS27 INS33 MOV32 INS42 INS42 INS42 INS33 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL43 DEL42 DEL65 DEL65 DEL29 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL69 DEL43 DEL69 DEL68 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL40 DEL41 DEL8 DEL31 DEL55