work in progress

- SPI: replace String/Stream for values by QValue interface
- SPI: add factory for QValue
  > adjust commons and add implementation
  > adjust usages of former QValue object with jcr2spi, spi2dav
- RepositoryService.getChildInfos returns Iterator instead of Collection
- spi2dav: add implementation for new query interfaces

- TODO: 
  improve conversion of jcr-value to q-value and vice-versa




git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@497885 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueFactory;
-import java.io.InputStream;
-import java.io.ByteArrayInputStream;
-import java.io.UnsupportedEncodingException;
+import java.io.IOException;
-    private Object[] values;
+    private QValue[] values;
-                            NamespaceResolver nsResolver, ValueFactory valueFactory)
-        throws RepositoryException, DavException {
+                            NamespaceResolver nsResolver, ValueFactory valueFactory,
+                            QValueFactory qValueFactory)
+        throws RepositoryException, DavException, IOException {
+        // values from jcr-server must be converted to qualified values.
-            // TODO: jcr-server sends jcr values not qualified
-            if (type == PropertyType.BINARY) {
-                values = (jcrValue == null) ?  new InputStream[0] : new InputStream[] {jcrValue.getStream()};
+            if (jcrValue == null) {
+                // TODO: should never occur. since 'null' single values are not allowed. rather throw?
+                values = QValue.EMPTY_ARRAY;
-                String vStr = (jcrValue == null) ? "" : ValueFormat.getQValue(jcrValue, nsResolver).getString();
-                values = new String[] {vStr};
+                QValue qv;
+                if (type == PropertyType.BINARY) {
+                    qv = qValueFactory.create(jcrValue.getStream());
+                } else {
+                    qv = ValueFormat.getQValue(jcrValue, nsResolver, qValueFactory);
+                }
+                values = new QValue[] {qv};
-            if (type == PropertyType.BINARY) {
-                values = new InputStream[jcrValues.length];
-                for (int i = 0; i < jcrValues.length; i++) {
-                    values[i] = jcrValues[i].getStream();
-                }
-            } else {
-                values = new String[jcrValues.length];
-                for (int i = 0; i < jcrValues.length; i++) {
-                    values[i] = ValueFormat.getQValue(jcrValues[i], nsResolver).getString();
+            values = new QValue[jcrValues.length];
+            for (int i = 0; i < jcrValues.length; i++) {
+                if (type == PropertyType.BINARY) {
+                    values[i] = qValueFactory.create(jcrValues[i].getStream());
+                } else {
+                    values[i] = ValueFormat.getQValue(jcrValues[i], nsResolver, qValueFactory);
-    public String[] getValues() {
-        if (values instanceof InputStream[]) {
-            // TODO
-            throw new UnsupportedOperationException("use getValueAsStream");
-        } else {
-            return (String[])values;
-        }
+    public QValue[] getValues() {
+        return values;
-
-    public InputStream[] getValuesAsStream() {
-        if (values instanceof InputStream[]) {
-            return (InputStream[]) values;
-        } else {
-            InputStream[] ins = new InputStream[values.length];
-            for (int i = 0; i < values.length; i++) {
-                String v = (String)values[i];
-                try {
-                    ins[i] = (v != null) ? new ByteArrayInputStream(v.getBytes("UTF-8")) : null;
-                } catch (UnsupportedEncodingException e) {
-                    log.error("Error while converting values", e);
-                }
-            }
-            return ins;
-        }
-    }
-}
+}

MOV26 MOV26 UPD40 UPD40 UPD40 UPD5 INS44 INS43 UPD5 INS8 UPD43 INS43 INS42 INS42 UPD43 MOV41 UPD42 INS42 UPD42 INS42 MOV21 MOV24 MOV27 INS8 INS60 INS25 INS25 UPD43 MOV43 INS59 MOV27 INS8 INS8 UPD5 MOV27 MOV8 INS8 INS40 UPD42 UPD42 MOV42 INS21 INS21 UPD43 INS21 INS7 INS7 UPD5 UPD42 INS7 INS42 INS32 INS42 INS32 UPD43 UPD42 INS32 MOV2 INS32 INS42 INS42 MOV32 MOV42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 MOV32 INS42 INS42 MOV2 INS42 INS42 DEL36 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL16 DEL42 DEL33 DEL27 DEL36 DEL45 DEL32 DEL32 DEL16 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL7 DEL21 DEL8 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL11 DEL42 DEL42 DEL43 DEL85 DEL5 DEL62 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL8 DEL25 DEL8 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL62 DEL42 DEL43 DEL85 DEL5 DEL42 DEL11 DEL41 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL11 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL33 DEL27 DEL36 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL14 DEL33 DEL16 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31