JCR-1990: Optimize queries with relative path in order by clause

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@746946 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.lucene.index.TermDocs;
+import org.apache.lucene.index.TermPositions;
+import org.apache.lucene.index.TermDocs;
+import javax.jcr.PropertyType;
+
-    public static class StringIndex {
+    public static class ValueIndex {
-         * Terms indexed by document id.
+         * Values indexed by document id.
-        private final String[] terms;
+        private final Comparable[] values;
-         * Terms map indexed by document id.
+         * Values (Comparable) map indexed by document id.
-        public final Map termsMap;
+        public final Map valuesMap;
-         * Boolean indicating whether the hashMap impl has to be used
+         * Boolean indicating whether the {@link #valuesMap} impl has to be used
-        public StringIndex(String[] terms, int setValues) {
-            if (isSparse(terms, setValues)) {
+        public ValueIndex(Comparable[] values, int setValues) {
+            if (isSparse(values, setValues)) {
-                this.terms = null;
+                this.values = null;
-                    this.termsMap = null;
+                    this.valuesMap = null;
-                    this.termsMap = getTermsMap(terms, setValues);
+                    this.valuesMap = getValuesMap(values, setValues);
-                this.terms = terms;
-                this.termsMap = null;
+                this.values = values;
+                this.valuesMap = null;
-        public String getTerm(int i) {
+        public Comparable getValue(int i) {
-                return termsMap == null ? null : (String) termsMap.get(new Integer(i));
+                return valuesMap == null ? null : (Comparable) valuesMap.get(new Integer(i));
-                return terms[i];
+                return values[i];
-        private Map getTermsMap(String[] terms, int setValues) {
+        private Map getValuesMap(Comparable[] values, int setValues) {
-            for (int i = 0; i < terms.length && setValues > 0; i++) {
-                if (terms[i] != null) {
-                    map.put(new Integer(i), terms[i]);
+            for (int i = 0; i < values.length && setValues > 0; i++) {
+                if (values[i] != null) {
+                    map.put(new Integer(i), values[i]);
-        private boolean isSparse(String[] terms, int setValues) {
+        private boolean isSparse(Comparable[] values, int setValues) {
-            if (setValues * SPARSE_FACTOR < terms.length) {
+            if (setValues * SPARSE_FACTOR < values.length) {
-     * Creates a <code>StringIndex</code> for a <code>field</code> and a term
+     * Creates a <code>ValueIndex</code> for a <code>field</code> and a term
-     * The returned string index will <b>not</b> have a term lookup array!
-     * See {@link SharedFieldSortComparator} for more info.
-     * @return a StringIndex that contains the field values and order
+     * @return a ValueIndex that contains the field values and order
-    public SharedFieldCache.StringIndex getStringIndex(IndexReader reader,
-                                                 String field,
-                                                 String prefix,
-                                                 SortComparator comparator)
+    public ValueIndex getValueIndex(IndexReader reader,
+                                    String field,
+                                    String prefix,
+                                    SortComparator comparator)
-        SharedFieldCache.StringIndex ret = lookup(reader, field, prefix, comparator);
+        ValueIndex ret = lookup(reader, field, prefix, comparator);
-            final String[] retArray = new String[reader.maxDoc()];
+            Comparable[] retArray = new Comparable[reader.maxDoc()];
-                TermDocs termDocs = reader.termDocs();
+                IndexFormatVersion version = IndexFormatVersion.getVersion(reader);
+                boolean hasPayloads = version.isAtLeast(IndexFormatVersion.V3);
+                TermDocs termDocs;
+                byte[] payload = null;
+                int type;
+                if (hasPayloads) {
+                    termDocs = reader.termPositions();
+                    payload = new byte[1];
+                } else {
+                    termDocs = reader.termDocs();
+                }
+                            type = PropertyType.UNDEFINED;
+                            if (hasPayloads) {
+                                TermPositions termPos = (TermPositions) termDocs;
+                                termPos.nextPosition();
+                                if (termPos.isPayloadAvailable()) {
+                                    payload = termPos.getPayload(payload, 0);
+                                    type = PropertyMetaData.fromByteArray(payload).getPropertyType();
+                                }
+                            }
-                            retArray[termDocs.doc()] = value;
+                            retArray[termDocs.doc()] = getValue(value, type);
-            SharedFieldCache.StringIndex value = new SharedFieldCache.StringIndex(retArray, setValues);
+            ValueIndex value = new ValueIndex(retArray, setValues);
-     * See if a <code>StringIndex</code> object is in the cache.
+     * See if a <code>ValueIndex</code> object is in the cache.
-    SharedFieldCache.StringIndex lookup(IndexReader reader, String field,
+    ValueIndex lookup(IndexReader reader, String field,
-            return (SharedFieldCache.StringIndex) readerCache.get(key);
+            return (ValueIndex) readerCache.get(key);
-     * Put a <code>StringIndex</code> <code>value</code> to cache.
+     * Put a <code>ValueIndex</code> <code>value</code> to cache.
-                 SortComparator comparer, SharedFieldCache.StringIndex value) {
+                 SortComparator comparer, ValueIndex value) {
+     * Returns a comparable for the given <code>value</code> that is read from
+     * the index.
+     *
+     * @param value the value as read from the index.
+     * @param type the property type.
+     * @return a comparable for the <code>value</code>.
+     */
+    private Comparable getValue(String value, int type) {
+        switch (type) {
+            case PropertyType.BOOLEAN:
+                return ComparableBoolean.valueOf(Boolean.valueOf(value).booleanValue());
+            case PropertyType.DATE:
+                return new Long(DateField.stringToTime(value));
+            case PropertyType.LONG:
+                return new Long(LongField.stringToLong(value));
+            case PropertyType.DOUBLE:
+                return new Double(DoubleField.stringToDouble(value));
+            default:
+                return value;
+        }
+    }
+
+    /**
-         * Creates <code>Key</code> for StringIndex lookup.
+         * Creates <code>Key</code> for ValueIndex lookup.

MOV26 INS26 INS26 INS40 INS40 INS31 UPD42 UPD43 UPD42 UPD43 INS29 INS83 INS43 INS42 INS44 INS44 INS8 UPD5 UPD42 UPD43 UPD42 UPD42 INS42 INS42 UPD43 INS65 INS65 INS65 INS65 INS42 MOV43 INS42 INS39 INS42 INS50 UPD43 UPD42 UPD42 UPD5 UPD42 UPD42 UPD5 UPD42 UPD5 UPD42 UPD66 UPD66 UPD43 UPD66 UPD66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 UPD66 UPD42 UPD66 UPD66 INS65 INS66 UPD43 UPD43 UPD43 INS42 INS40 INS32 INS40 INS14 INS40 INS14 INS40 INS14 INS42 UPD66 INS67 UPD42 UPD42 UPD42 UPD42 UPD40 UPD5 UPD43 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS43 INS32 INS42 UPD40 UPD43 INS60 INS60 INS60 INS60 INS25 INS42 UPD43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD5 INS43 INS59 INS39 INS59 INS5 INS59 INS39 INS59 INS42 INS8 INS8 UPD43 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 INS43 INS42 INS42 INS32 INS42 INS32 INS39 INS85 INS42 INS33 INS42 INS21 INS21 INS21 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS7 INS7 INS7 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS3 INS42 MOV32 INS42 INS42 INS5 INS34 INS8 INS39 INS85 INS21 INS25 MOV21 MOV21 INS7 INS42 INS8 INS42 INS40 INS60 INS21 INS25 INS32 INS43 INS59 INS32 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS21 INS21 INS43 INS42 INS7 INS7 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 DEL66 DEL66 DEL42 DEL65 DEL66 DEL40 DEL40 DEL83 DEL42 DEL8 DEL40 DEL40 DEL40 DEL40 DEL40