grouped frequently used constants scattered around in various source files into Constants interface

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@153503 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.log4j.Logger;
-import org.apache.jackrabbit.core.version.*;
+import org.apache.commons.collections.ReferenceMap;
-import org.apache.jackrabbit.core.util.uuid.UUID;
-import org.apache.commons.collections.ReferenceMap;
+import org.apache.jackrabbit.core.util.uuid.UUID;
+import org.apache.jackrabbit.core.version.InternalVersion;
+import org.apache.jackrabbit.core.version.InternalVersionHistory;
+import org.apache.jackrabbit.core.version.InternalVersionItem;
+import org.apache.jackrabbit.core.version.PersistentVersionManager;
+import org.apache.log4j.Logger;
-import java.util.Map;
+import java.util.Map;
- * <p>
+ * <p/>
- * <p>
+ * <p/>
- * <p>
+ * <p/>
-public class NativePVM implements PersistentVersionManager {
+public class NativePVM implements PersistentVersionManager, Constants {
-    private static Logger log = Logger.getLogger(PersistentVersionManager.class);
+    private static Logger log = Logger.getLogger(NativePVM.class);
-    public static final QName VERSION_HISTORY_ROOT_NAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "persistentVersionStorage");
+    public static final QName VERSION_HISTORY_ROOT_NAME = new QName(NS_JCR_URI, "persistentVersionStorage");
-    public static final QName PROPNAME_HISTORY_ID = new QName(NamespaceRegistryImpl.NS_JCR_URI, "historyId");
+    public static final QName PROPNAME_HISTORY_ID = new QName(NS_JCR_URI, "historyId");
-    public static final QName PROPNAME_VERSIONABLE_ID = new QName(NamespaceRegistryImpl.NS_JCR_URI, "versionableId");
+    public static final QName PROPNAME_VERSIONABLE_ID = new QName(NS_JCR_URI, "versionableId");
-    public static final QName PROPNAME_VERSION_ID = new QName(NamespaceRegistryImpl.NS_JCR_URI, "versionId");
+    public static final QName PROPNAME_VERSION_ID = new QName(NS_JCR_URI, "versionId");
-    public static final QName PROPNAME_VERSION_NAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "versionName");
+    public static final QName PROPNAME_VERSION_NAME = new QName(NS_JCR_URI, "versionName");
-    public static final QName NODENAME_VERSION_LABELS = new QName(NamespaceRegistryImpl.NS_JCR_URI, "versionLabels");
+    public static final QName NODENAME_VERSION_LABELS = new QName(NS_JCR_URI, "versionLabels");
-    public static final QName PROPNAME_NAME = new QName(NamespaceRegistryImpl.NS_JCR_URI, "name");
+    public static final QName PROPNAME_NAME = new QName(NS_JCR_URI, "name");
-    public static final QName PROPNAME_VERSION = new QName(NamespaceRegistryImpl.NS_JCR_URI, "version");
+    public static final QName PROPNAME_VERSION = new QName(NS_JCR_URI, "version");
-    protected static final QName NT_REP_VERSION = new QName(NamespaceRegistryImpl.NS_REP_URI, "version");
+    protected static final QName NT_REP_VERSION = new QName(NS_REP_URI, "version");
-    protected static final QName NT_REP_VERSION_HISTORY = new QName(NamespaceRegistryImpl.NS_REP_URI, "versionHistory");
+    protected static final QName NT_REP_VERSION_HISTORY = new QName(NS_REP_URI, "versionHistory");
-    protected static final QName NT_REP_FROZEN = new QName(NamespaceRegistryImpl.NS_REP_URI, "frozen");
+    protected static final QName NT_REP_FROZEN = new QName(NS_REP_URI, "frozen");
-    protected static final QName NT_REP_FROZEN_HISTORY = new QName(NamespaceRegistryImpl.NS_REP_URI, "frozenVersionHistory");
+    protected static final QName NT_REP_FROZEN_HISTORY = new QName(NS_REP_URI, "frozenVersionHistory");
-    private HashMap idsByInternal= new HashMap();
+    private HashMap idsByInternal = new HashMap();
-     * Creates a new PersistentVersionManager.
+     * Creates a new NativePVM.
-            log.info("loaded " + idsByExternal.size() + " virtual ids in " + (t2-t1) + "ms.");
+            log.info("loaded " + idsByExternal.size() + " virtual ids in " + (t2 - t1) + "ms.");
+     *
+     *
+     *
-            synchronized(idsByExternal) {
+            synchronized (idsByExternal) {
+     *
-        synchronized(idsByExternal) {
+        synchronized (idsByExternal) {
+     *
+     *
-        synchronized(idsByExternal) {
+        synchronized (idsByExternal) {
+     *
-        if (hist!=null) {
+        if (hist != null) {
-            for (int i=0; i<3; i++) {
-                QName name = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, uuid.substring(i*2, i*2+2));
+            for (int i = 0; i < 3; i++) {
+                QName name = new QName(NS_DEFAULT_URI, uuid.substring(i * 2, i * 2 + 2));
-                    root.addNode(name, NodeTypeRegistry.NT_UNSTRUCTURED);
+                    root.addNode(name, NT_UNSTRUCTURED);
-            QName historyNodeName = new QName(NamespaceRegistryImpl.NS_DEFAULT_URI, uuid);
+            QName historyNodeName = new QName(NS_DEFAULT_URI, uuid);
-        log.info("Created new version history " + hist.getId()+ " for " + node.safeGetJCRPath() + ". NumHistories=" + versionedUUIDs.size());
+        log.info("Created new version history " + hist.getId() + " for " + node.safeGetJCRPath() + ". NumHistories=" + versionedUUIDs.size());
-        return pid==null ? null : (InternalVersionHistory) getItem(pid);
+        return pid == null ? null : (InternalVersionHistory) getItem(pid);
-        return pid==null ? null : (InternalVersion) getItem(pid);
+        return pid == null ? null : (InternalVersion) getItem(pid);
+     *
+     *
-        return pid==null ? null : getItem(pid);
+        return pid == null ? null : getItem(pid);
+     *
-        return pid==null ? null : getItem(pid);
+        return pid == null ? null : getItem(pid);
+     *
-        InternalVersionItem item =(InternalVersionItem) items.get(pid);
-        if (item==null) {
+        InternalVersionItem item = (InternalVersionItem) items.get(pid);
+        if (item == null) {
-            if (pNode!=null) {
+            if (pNode != null) {
-            if (item!=null) {
+            if (item != null) {
-        String histUUID = node.getProperty(VersionManager.PROPNAME_VERSION_HISTORY).getString();
+        String histUUID = node.getProperty(Constants.JCR_VERSIONHISTORY).getString();
-        Value[] values = node.getProperty(VersionManager.PROPNAME_PREDECESSORS).getValues();
+        Value[] values = node.getProperty(Constants.JCR_PREDECESSORS).getValues();
-        /** the type of the persistent node */
+        /**
+         * the type of the persistent node
+         */
-        /** the persistent uuid of the node */
+        /**
+         * the persistent uuid of the node
+         */
-        /** the persistent uuid of the node */
+        /**
+         * the persistent uuid of the node
+         */

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS43 INS42 UPD66 UPD66 UPD66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD66 UPD43 UPD66 UPD66 UPD66 UPD42 MOV43 UPD40 UPD40 MOV43 INS42 INS42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40