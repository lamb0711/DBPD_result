JCR-1609:  new Property Types (WIP...)
JCR-2061: References and Dereferencing of Property Values (WIP...)



git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@776687 13f79535-47bb-0310-9956-ffa450edef68

+import javax.jcr.query.Query;
+import javax.jcr.query.QueryResult;
-    public Property setProperty(String name, BigDecimal value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException {
-        // TODO
-        throw new RuntimeException("Not implemented yet, see JCR-1609");
-    }
-
-    public Property setProperty(String name, Binary value) throws ValueFormatException, VersionException, LockException, ConstraintViolationException, RepositoryException {
-        // TODO
-        throw new RuntimeException("Not implemented yet, see JCR-1609");
-    }
-
-     * @see javax.jcr.Node#getIdentifier()
-     * @since JCR 2.0
+     * {@inheritDoc}
-     * @see javax.jcr.Node#getReferences(String)
-     * @since JCR 2.0
+     * {@inheritDoc}
-     * @see javax.jcr.Node#getWeakReferences()
-     * @since JCR 2.0
+     * {@inheritDoc}
-        // TODO
-        throw new RuntimeException("Not implemented yet, see JCR-2061");
+        return getWeakReferences(null);
-     * @see javax.jcr.Node#getWeakReferences(String)
-     * @since JCR 2.0
+     * {@inheritDoc}
-        // TODO
-        throw new RuntimeException("Not implemented yet, see JCR-2061");
+        // check state of this instance
+        sanityCheck();
+
+        try {
+            Query q = session.getWorkspace().getQueryManager().createQuery(
+                    "//*[jcr:contains[., '" + data.getId() + "']",
+                    Query.XPATH);
+            QueryResult result = q.execute();
+            ArrayList l = new ArrayList<Property>();
+            for (NodeIterator nit = result.getNodes(); nit.hasNext(); ) {
+                Node n = nit.nextNode();
+                for (PropertyIterator pit = n.getProperties(); pit.hasNext(); ) {
+                    Property p = pit.nextProperty();
+                    if (p.getType() == PropertyType.WEAKREFERENCE
+                            && p.getString().equals(getIdentifier())) {
+                        if (name != null) {
+                            if (name.equals(p.getName())) {
+                                l.add(p);
+                            }
+                        } else {
+                            l.add(p);
+                        }
+                    }
+                }
+            }
+            if (l.isEmpty()) {
+                return PropertyIteratorAdapter.EMPTY;
+            } else {
+                return new PropertyIteratorAdapter(l);
+            }
+        } catch (RepositoryException e) {
+            String msg = "Unable to retrieve WEAKREFERENCE properties that refer to " + id;
+            log.debug(msg);
+            throw new RepositoryException(msg, e);
+        }
-     * @see javax.jcr.Node#getNodes(String[])
-     * @since JCR 2.0
+     * {@inheritDoc}
-     * @see javax.jcr.Node#getProperties(String[])
-     * @since JCR 2.0
+     * {@inheritDoc}
-     * @see javax.jcr.Node#setPrimaryType(String) 
-     * @since JCR 2.0
+     * {@inheritDoc}
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, BigDecimal value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        // check state of this instance
+        sanityCheck();
+
+        // check pre-conditions for setting property
+        checkSetProperty();
+
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(
+                name, PropertyType.DECIMAL, false, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
+        return prop;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, Binary value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        // check state of this instance
+        sanityCheck();
+
+        // check pre-conditions for setting property
+        checkSetProperty();
+
+        BitSet status = new BitSet();
+        PropertyImpl prop = getOrCreateProperty(
+                name, PropertyType.BINARY, false, false, status);
+        try {
+            prop.setValue(value);
+        } catch (RepositoryException re) {
+            if (status.get(CREATED)) {
+                // setting value failed, get rid of newly created property
+                removeChildProperty(name);
+            }
+            // rethrow
+            throw re;
+        }
+        return prop;
+    }
+

INS26 INS26 MOV31 MOV31 INS40 INS40 INS31 INS31 INS29 MOV43 UPD42 MOV43 INS29 MOV43 INS42 MOV44 MOV43 INS8 MOV29 MOV83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 INS29 MOV83 MOV43 UPD42 MOV42 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV8 INS65 INS65 INS65 INS41 INS65 INS21 INS54 INS65 INS65 INS65 INS65 INS21 INS21 INS60 INS60 INS54 INS41 INS65 INS21 INS21 INS60 INS60 INS54 INS41 INS65 INS65 INS65 INS32 INS65 INS32 INS8 INS12 INS65 INS65 INS65 INS65 INS32 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS65 INS32 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS42 INS33 INS42 INS60 INS60 INS60 INS24 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS21 INS44 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS58 INS32 INS8 INS32 INS8 INS8 INS43 INS42 INS60 INS21 MOV53 UPD43 MOV43 INS42 INS42 INS40 INS9 INS9 INS42 INS32 INS43 INS42 INS25 INS53 INS43 INS42 INS42 INS40 INS9 INS9 INS42 INS32 INS43 INS42 INS25 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS59 INS42 INS42 INS60 INS24 INS42 INS42 INS41 INS41 INS42 MOV43 INS59 INS32 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS8 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS8 INS42 INS32 INS42 INS27 INS40 INS42 INS42 INS74 INS42 INS42 INS32 INS43 INS59 INS58 INS32 INS8 INS40 INS14 INS42 INS27 INS42 INS42 INS42 UPD43 INS42 INS42 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS21 INS32 INS42 INS45 INS32 INS45 INS43 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS42 INS42 INS60 INS25 INS43 INS42 INS45 INS42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS32 INS25 INS42 INS42 INS32 INS40 INS32 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS25 INS21 INS32 INS8 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL40 DEL42 DEL68 DEL65 DEL66 DEL65 DEL40 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL42 DEL43 DEL45 DEL14 DEL53 DEL45 DEL42 DEL8 DEL42 DEL45 DEL14 DEL53 DEL8 DEL31 DEL40 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL31 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL69 DEL68 DEL65 DEL66 DEL65 DEL40 DEL42 DEL85 DEL5 DEL69 DEL68 DEL65 DEL66 DEL65 DEL40 DEL42 DEL42 DEL43 DEL69 DEL68 DEL66 DEL65 DEL66 DEL65 DEL40 DEL42 DEL68 DEL65 DEL66 DEL65 DEL43 DEL45 DEL14 DEL53