JCR-258 - remove JDOM dependency from jcr-server contribution
JCR-295 - usage of Cache-Control header 
JCR-297 - log output while parsing xml
minor consistency issues and improvements

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@368683 13f79535-47bb-0310-9956-ffa450edef68

-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.JDOMException;
-import org.jdom.input.SAXBuilder;
+import org.apache.jackrabbit.webdav.xml.ElementIterator;
+import org.apache.jackrabbit.webdav.xml.DomUtil;
+import org.w3c.dom.Element;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.ParserConfigurationException;
-import java.util.Iterator;
+import java.util.ArrayList;
+import java.io.InputStream;
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        factory.setNamespaceAware(true);
-            Document doc = new SAXBuilder().build(configURL);
-            Element root = doc.getRootElement();
+            InputStream in = configURL.openStream();
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document document = builder.parse(in);
+            Element config = document.getDocumentElement();
-            Element ioElem = root.getChild("iomanager");
-            if (ioElem != null) {
-                Object inst = buildClassFromConfig(ioElem.getChild("class"));
+            if (config == null) {
+                log.error("Resource configuration: mandatory 'iomanager' element is missing.");
+                return;
+            }
+
+            Element el = DomUtil.getChildElement(config, "iomanager", null);
+            if (el != null) {
+                Object inst = buildClassFromConfig(el);
-            Element collection = root.getChild("collection");
-            Element noncollection = root.getChild("noncollection");
-            if (collection != null && noncollection != null) {
-                log.warn("Resource configuration may only contain a collection OR a noncollection element -> entries are ignored");
-            } else {
-                if (collection != null) {
-                    Element nts = collection.getChild("nodetypes");
-                    nodetypeNames = parseNodeTypesEntry(nts);
+            el = DomUtil.getChildElement(config, "collection", null);
+            if (el != null) {
+                nodetypeNames = parseNodeTypesEntry(el);
-                } else if (noncollection != null) {
-                    Element nts = noncollection.getChild("nodetypes");
-                    nodetypeNames = parseNodeTypesEntry(nts);
+            } else if ((el = DomUtil.getChildElement(config, "noncollection", null)) != null) {
+                nodetypeNames = parseNodeTypesEntry(el);
-            }
+            // todo: should check if both 'noncollection' and 'collection' are present and write a warning
-            Element filter = root.getChild("filter");
-            if (filter != null) {
-                Object inst = buildClassFromConfig(filter.getChild("class"));
+            el = DomUtil.getChildElement(config, "filter", null);
+            if (el != null) {
+                Object inst = buildClassFromConfig(el);
-                    Element nts = filter.getChild("nodetypes");
-                    itemFilter.setFilteredNodetypes(parseNodeTypesEntry(nts));
-                    parseNamespacesEntry(filter.getChild("namespaces"), itemFilter);
+                    itemFilter.setFilteredNodetypes(parseNodeTypesEntry(el));
+                    parseNamespacesEntry(el);
-            log.error("Invalid resource configuration: " + e.getMessage());
-        } catch (JDOMException e) {
-            log.error("Invalid resource configuration: " + e.getMessage());
+            log.debug("Invalid resource configuration: " + e.getMessage());
+        } catch (ParserConfigurationException e) {
+            log.warn("Failed to parse resource configuration: " + e.getMessage());
+        } catch (SAXException e) {
+            log.warn("Failed to parse resource configuration: " + e.getMessage());
-    private Object buildClassFromConfig(Element classElement) {
+    private Object buildClassFromConfig(Element parent) {
-        if (classElement == null) {
-            return instance;
-        }
+        Element classElem = DomUtil.getChildElement(parent, "class", null);
+        if (classElem != null) {
+            // contains a 'class' child node
-            String className = classElement.getAttributeValue("name");
+                String className = DomUtil.getAttribute(classElem, "name", null);
+        }
-    private void parseNamespacesEntry(Element child, ItemFilter filter) {
-        if (child == null) {
-            return;
+    private void parseNamespacesEntry(Element parent) {
+        Element namespaces = DomUtil.getChildElement(parent, "namespaces", null);
+        if (namespaces != null) {
+            List l = new ArrayList();
+            // retrieve prefix child elements
+            ElementIterator it = DomUtil.getChildren(namespaces, "prefix", null);
+            while (it.hasNext()) {
+                Element e = it.nextElement();
+                l.add(DomUtil.getText(e));
+            }
+            String[] prefixes = (String[])l.toArray(new String[l.size()]);
+            l.clear();
+            // retrieve uri child elements
+            it = DomUtil.getChildren(namespaces, "uri", null);
+            while (it.hasNext()) {
+                Element e = it.nextElement();
+                l.add(DomUtil.getText(e));
+            }
+            String[] uris = (String[])l.toArray(new String[l.size()]);
+            itemFilter.setFilteredPrefixes(prefixes);
+            itemFilter.setFilteredURIs(uris);
-        List l = child.getChildren("prefix");
-        Iterator it = l.iterator();
-        String[] prefixes = new String[l.size()];
-        int i = 0;
-        while(it.hasNext()) {
-            prefixes[i++] = ((Element) it.next()).getText();
-        }
-
-        l = child.getChildren("uri");
-        it = l.iterator();
-        String[] uris = new String[l.size()];
-        i = 0;
-        while(it.hasNext()) {
-            uris[i++] = ((Element) it.next()).getText();
-        }
-
-        filter.setFilteredPrefixes(prefixes);
-        filter.setFilteredURIs(uris);
-    private String[] parseNodeTypesEntry(Element child) {
-        if (child == null) {
-            return new String[0];
+    private String[] parseNodeTypesEntry(Element parent) {
+        String[] ntNames;
+        Element nodetypes = DomUtil.getChildElement(parent, "nodetypes", null);
+        if (nodetypes != null) {
+            List l = new ArrayList();
+            ElementIterator it = DomUtil.getChildren(nodetypes, "nodetype", null);
+            while (it.hasNext()) {
+                Element e = it.nextElement();
+                l.add(DomUtil.getText(e));
-        List l = child.getChildren("nodetype");
-        Iterator it = l.iterator();
-        String[] ntNames = new String[l.size()];
-        int i = 0;
-        while(it.hasNext()) {
-            ntNames[i++] = ((Element) it.next()).getText();
+            ntNames = (String[])l.toArray(new String[l.size()]);
+        } else {
+            ntNames = new String[0];

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 UPD40 INS40 UPD40 INS40 UPD40 INS40 INS8 INS8 INS60 INS21 UPD42 MOV60 INS60 INS25 MOV41 UPD42 INS60 INS25 UPD42 INS60 INS25 INS43 INS59 INS32 MOV25 INS12 MOV43 INS59 INS27 MOV8 MOV43 INS59 UPD27 MOV27 INS8 MOV5 INS59 MOV43 INS27 INS8 MOV8 INS42 INS42 INS32 INS42 INS42 INS9 INS25 MOV60 MOV21 INS25 INS21 INS44 INS8 INS42 INS32 INS42 INS33 INS42 INS32 UPD42 MOV60 MOV60 INS61 MOV60 MOV21 MOV21 MOV61 MOV60 MOV21 MOV21 INS42 UPD42 INS42 INS33 INS60 MOV60 INS61 MOV21 INS21 INS42 INS42 UPD43 UPD43 MOV43 INS27 MOV8 MOV43 MOV27 INS8 INS25 INS7 INS43 INS42 INS21 UPD43 INS42 INS42 INS42 INS45 INS33 INS42 INS42 INS42 INS45 INS33 UPD43 MOV32 INS8 MOV5 INS32 INS5 UPD42 UPD42 INS42 UPD45 INS33 MOV43 INS59 UPD43 MOV32 INS8 INS7 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV33 INS41 UPD42 UPD42 UPD42 UPD42 INS21 MOV21 INS27 INS8 INS42 INS32 UPD42 INS42 INS32 UPD42 INS14 UPD42 MOV60 MOV21 UPD42 INS11 INS42 UPD42 MOV42 INS60 INS21 INS43 INS85 UPD42 INS11 UPD42 UPD42 INS42 INS14 UPD42 MOV60 INS21 INS42 INS11 INS42 MOV3 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 UPD45 INS33 UPD42 UPD42 INS42 INS45 INS33 INS7 INS36 INS33 MOV21 MOV21 UPD42 MOV42 UPD42 MOV42 INS42 MOV45 INS33 UPD42 INS42 INS42 INS27 UPD42 INS43 UPD42 UPD42 INS42 INS45 INS33 MOV43 INS32 MOV5 INS32 UPD42 UPD42 INS42 INS45 INS33 MOV43 INS59 INS32 INS42 INS5 INS32 INS43 UPD42 UPD42 INS42 INS45 INS33 MOV43 INS32 INS5 MOV32 UPD42 UPD45 INS42 INS32 INS7 INS45 INS32 UPD45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV3 INS42 INS32 INS42 INS42 INS32 INS43 INS85 INS42 INS42 MOV3 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS85 UPD42 UPD42 MOV3 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS42 INS33 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD45 MOV45 INS33 UPD42 UPD42 MOV42 UPD42 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL45 DEL45 DEL42 DEL43 DEL42 DEL45 DEL32 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL8 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL25 DEL8 DEL25 DEL42 DEL32 DEL59 DEL60 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL45 DEL32 DEL42 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL39 DEL42 DEL34 DEL42 DEL42 DEL37 DEL2 DEL32 DEL11 DEL36 DEL32 DEL7 DEL42 DEL42 DEL45 DEL32 DEL7 DEL42 DEL42 DEL37 DEL2 DEL32 DEL11 DEL36 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL8 DEL61 DEL42 DEL34 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL25 DEL39 DEL42 DEL34 DEL42 DEL42 DEL37 DEL2 DEL11 DEL36 DEL42 DEL32 DEL41 DEL8 DEL61