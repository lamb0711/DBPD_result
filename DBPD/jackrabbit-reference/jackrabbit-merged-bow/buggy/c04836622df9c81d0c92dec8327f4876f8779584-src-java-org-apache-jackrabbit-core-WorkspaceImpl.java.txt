- fixed restore bugs
- implemented Workspace.restore() [not tested yet]

git-svn-id: https://svn.apache.org/repos/asf/incubator/jackrabbit/trunk@157553 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.version.VersionSelector;
+import org.apache.jackrabbit.core.version.VersionImpl;
+import org.apache.jackrabbit.core.version.GenericVersionSelector;
+import org.apache.jackrabbit.core.version.InternalVersion;
+import javax.jcr.version.VersionHistory;
+import java.util.HashMap;
+        // todo: perform restore operations direct on the node states
+
-        // @todo implement Workspace#restore
-        throw new UnsupportedRepositoryOperationException();
+        // add all versions to map of versions to restore
+        final HashMap toRestore = new HashMap();
+        for (int i=0; i<versions.length; i++) {
+            VersionImpl v = (VersionImpl) versions[i];
+            VersionHistory vh = v.getContainingVersionHistory();
+            // check for collision
+            if (toRestore.containsKey(vh.getUUID())) {
+                throw new VersionException("Unable to restore. Two ore more versions have same version history.");
+            }
+            toRestore.put(vh.getUUID(), v);
+        }
+
+        // create a version selector to the set of versions
+        VersionSelector vsel = new VersionSelector() {
+            public Version select(VersionHistory versionHistory) throws RepositoryException {
+                // try to select version as specified
+                Version v = (Version) toRestore.get(versionHistory.getUUID());
+                if (v == null) {
+                    // select latest one
+                    v = GenericVersionSelector.selectByDate(versionHistory, null);
+                }
+                return v;
+            }
+        };
+
+        // check for pending changes
+        if (session.hasPendingChanges()) {
+            String msg = "Unable to restore version. Session has pending changes.";
+            log.debug(msg);
+            throw new InvalidItemStateException(msg);
+        }
+
+        try {
+            // now restore all versions that have a node in the ws
+            int numRestored = 0;
+            while (toRestore.size()>0) {
+                InternalVersion[] restored = null;
+                Iterator iter = toRestore.values().iterator();
+                while (iter.hasNext()) {
+                    VersionImpl v = (VersionImpl) iter.next();
+                    try {
+                        NodeImpl node = (NodeImpl) session.getNodeByUUID(v.getFrozenNode().getFrozenUUID());
+                        restored = node.internalRestore(v.getInternalVersion(), vsel, removeExisting);
+                        // remove restored versions from set
+                        for (int i=0; i<restored.length; i++) {
+                            toRestore.remove(restored[i].getVersionHistory().getId());
+                        }
+                        numRestored += restored.length;
+                        break;
+                    } catch (ItemNotFoundException e) {
+                        // ignore
+                    }
+                }
+                if (restored == null) {
+                    if (numRestored == 0) {
+                        throw new VersionException("Unable to restore. At least one version needs existing versionable node in workspace.");
+                    } else {
+                        throw new VersionException("Unable to restore. All versions with non existing versionable nodes need parent.");
+                    }
+                }
+            }
+        } catch (RepositoryException e) {
+            // revert session
+            try {
+                log.error("reverting changes applied during restore...");
+                session.refresh(false);
+            } catch (RepositoryException e1) {
+                // ignore this
+            }
+            throw e;
+        }
+        session.save();

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS8 MOV21 INS60 INS24 INS60 INS25 INS54 INS21 INS83 INS43 INS59 INS58 INS27 INS37 INS8 INS43 INS59 INS32 INS8 INS8 INS12 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS60 INS60 INS25 INS21 INS42 INS42 INS14 INS42 INS42 INS60 INS21 INS53 INS60 INS61 INS44 INS8 INS42 INS42 INS43 INS42 INS34 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS43 INS1 INS43 INS59 INS32 INS14 INS39 INS59 INS27 INS8 INS43 INS42 INS54 INS53 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 MOV53 INS42 INS42 INS32 INS42 INS42 INS31 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS42 INS34 INS32 INS34 INS60 INS60 INS61 INS25 INS42 INS8 INS12 INS42 INS43 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS42 INS42 INS5 INS59 INS43 INS59 INS32 INS8 INS27 INS8 INS21 INS21 INS44 INS8 INS42 INS42 INS42 UPD43 INS45 INS42 INS43 INS42 INS42 INS60 INS25 INS41 INS43 INS85 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS60 INS54 INS42 INS33 INS25 INS32 INS32 INS43 INS42 UPD42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS43 INS59 INS8 INS12 INS27 INS8 INS8 INS42 INS42 INS45 INS42 INS42 INS9 INS42 INS42 INS42 INS11 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS11 INS60 INS21 INS24 INS21 INS10 INS44 INS8 INS42 INS34 INS53 INS53 INS43 INS32 INS7 INS43 INS32 INS43 INS59 INS7 INS58 INS27 INS37 INS8 INS7 INS43 INS42 INS14 INS14 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS40 INS42 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS42 DEL8