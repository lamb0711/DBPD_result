JCR-2010: Retrieve row path via hierarchy manager instead of node

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@758193 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.HierarchyManager;
+import org.apache.jackrabbit.spi.QValueFactory;
+import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.value.ValueFactoryImpl;
+import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
+import org.apache.jackrabbit.spi.commons.value.ValueFactoryQImpl;
-import javax.jcr.ValueFactory;
-     * The value factory.
+     * The QValue factory.
-    private static final ValueFactory VALUE_FACTORY = ValueFactoryImpl.getInstance();
+    private static final QValueFactory QVALUE_FACTORY = QValueFactoryImpl.getInstance();
-    private final ScoreNodeIterator nodes;
+    private final ScoreNodeIterator scoreNodes;
+     * Set of select property <code>Name</code>s.
+     */
+    private Set propertySet;
+
+    /**
+     * The hierarchy manager of the workspace.
+     */
+    private final HierarchyManager hmgr;
+
+    /**
+     * A value factory for the session that executes the query.
+     */
+    private final ValueFactoryQImpl valueFactory;
+
+    /**
-     * @param nodes           a <code>ScoreNodeIterator</code> that contains the
+     * @param scoreNodes      a <code>ScoreNodeIterator</code> that contains the
+     * @param hmgr            the hierarchy manager of the workspace.
-    RowIteratorImpl(ScoreNodeIterator nodes,
+    RowIteratorImpl(ScoreNodeIterator scoreNodes,
+                    HierarchyManager hmgr,
-        this.nodes = nodes;
+        this.scoreNodes = scoreNodes;
+        this.hmgr = hmgr;
+        this.valueFactory = new ValueFactoryQImpl(QVALUE_FACTORY, resolver);
-        return new RowImpl(nodes.getScore(),
-                nodes.getScoreNodes(), nodes.nextNodeImpl());
+        return new RowImpl(scoreNodes.nextScoreNodes());
-        nodes.skip(skipNum);
+        scoreNodes.skip(skipNum);
-        return nodes.getSize();
+        return scoreNodes.getSize();
-        return nodes.getPosition();
+        return scoreNodes.getPosition();
-        return nodes.hasNext();
+        return scoreNodes.hasNext();
-        private final NodeImpl node;
+        private NodeImpl node;
-         * Set of select property <code>Name</code>s.
-         */
-        private Set propertySet;
-
-        /**
-         * @param score the score value for this result row
-         * @param node  the underlying <code>Node</code> for this <code>Row</code>.
-        RowImpl(float score, ScoreNode[] sn, NodeImpl node) {
-            this.score = score;
+        RowImpl(ScoreNode[] sn) {
-            this.node = node;
+            this.score = sn[0].getScore();
-                    if (node.hasProperty(properties[i])) {
-                        PropertyImpl prop = node.getProperty(properties[i]);
+                    if (getNodeImpl().hasProperty(properties[i])) {
+                        PropertyImpl prop = getNodeImpl().getProperty(properties[i]);
-                                tmp[i] = VALUE_FACTORY.createValue(prop.getString());
+                                tmp[i] = valueFactory.createValue(prop.getString());
-                            tmp[i] = VALUE_FACTORY.createValue(node.getPath(), PropertyType.PATH);
+                            tmp[i] = valueFactory.createValue(getNodeImpl().getPath(), PropertyType.PATH);
-                            tmp[i] = VALUE_FACTORY.createValue(Math.round(score * 1000f));
+                            tmp[i] = valueFactory.createValue(Math.round(score * 1000f));
-                if (node.hasProperty(prop)) {
-                    Property p = node.getProperty(prop);
+                if (NameConstants.JCR_PATH.equals(prop)) {
+                    QValue p = QVALUE_FACTORY.create(hmgr.getPath(sn[0].getNodeId()));
+                    return valueFactory.createValue(p);
+                } else if (getNodeImpl().hasProperty(prop)) {
+                    Property p = getNodeImpl().getProperty(prop);
-                        return VALUE_FACTORY.createValue(p.getString());
+                        return valueFactory.createValue(p.getString());
-                    // either jcr:score, jcr:path, rep:excerpt,
+                    // either jcr:score, rep:excerpt,
-                    if (NameConstants.JCR_PATH.equals(prop)) {
-                        return VALUE_FACTORY.createValue(node.getPath(), PropertyType.PATH);
-                    } else if (NameConstants.JCR_SCORE.equals(prop)) {
-                        return VALUE_FACTORY.createValue(Math.round(score * 1000f));
+                    if (NameConstants.JCR_SCORE.equals(prop)) {
+                        return valueFactory.createValue(Math.round(score * 1000f));
-            return node;
+            return getNodeImpl();
-            return node.getPath();
+            return resolver.getJCRPath(hmgr.getPath(sn[0].getNodeId()));
+         * Returns the node corresponding to this row.
+         *
+         * @return the node.
+         * @throws RepositoryException if an error occurs while retrieving the
+         *                             node. e.g. node does not exist anymore.
+         */
+        private NodeImpl getNodeImpl() throws RepositoryException {
+            if (node == null) {
+                node = (NodeImpl) itemMgr.getItem(sn[0].getNodeId());
+            }
+            return node;
+        }
+
+        /**
-            return createExcerpt(node.getNodeId());
+            return createExcerpt(sn[0].getNodeId());
-                NodeImpl n = (NodeImpl) node.getNode(decodedPath);
+                NodeImpl n = (NodeImpl) getNodeImpl().getNode(decodedPath);
-                    Property p = node.getProperty(decodedPath);
+                    Property p = getNode().getProperty(decodedPath);
-                    return VALUE_FACTORY.createValue(excerpt);
+                    return valueFactory.createValue(excerpt);
-                return VALUE_FACTORY.createValue(text);
+                return valueFactory.createValue(text);
-                return VALUE_FACTORY.createValue(v);
+                return valueFactory.createValue(v);

MOV26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 UPD40 MOV23 INS23 INS23 UPD43 INS29 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS43 INS59 INS44 INS31 UPD42 UPD42 UPD42 INS65 INS42 INS42 INS65 INS42 INS42 INS65 UPD42 INS43 INS42 INS21 INS21 MOV21 MOV8 INS29 INS83 INS43 INS42 INS43 INS8 UPD66 UPD42 INS66 INS66 UPD42 UPD66 INS42 INS66 INS42 INS7 INS7 MOV25 INS54 INS41 INS65 INS65 INS65 INS42 INS42 INS25 MOV41 UPD42 INS22 INS42 INS22 INS14 UPD42 UPD42 UPD42 UPD42 MOV8 MOV12 INS32 INS32 INS66 INS66 INS42 INS66 INS66 INS27 INS8 UPD42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 UPD42 UPD42 INS32 MOV60 MOV25 INS25 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS2 INS42 MOV32 INS8 MOV25 UPD42 MOV42 MOV42 INS32 INS7 INS2 MOV43 INS42 INS34 INS60 INS41 INS32 MOV8 INS8 INS2 INS42 INS42 INS11 INS42 INS34 UPD42 UPD42 MOV32 INS43 INS59 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV25 UPD42 MOV42 INS42 INS34 MOV43 INS32 MOV43 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS32 UPD42 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS2 INS42 UPD42 MOV42 MOV32 INS42 INS42 INS32 INS32 INS42 INS34 INS32 INS32 UPD42 INS2 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV2 INS42 INS34 UPD42 MOV2 INS32 UPD42 UPD42 UPD42 MOV42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL40 DEL32 DEL41 DEL8 DEL32 DEL54 DEL8 DEL32 DEL42