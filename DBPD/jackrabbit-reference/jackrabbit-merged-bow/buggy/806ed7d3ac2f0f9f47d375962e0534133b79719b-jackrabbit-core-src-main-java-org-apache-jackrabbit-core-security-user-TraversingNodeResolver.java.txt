JCR-1588: JSR 283 Access Control (work in progress)

- fixing TraversingNodeResolver and adding tests


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@656595 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.core.SessionImpl;
+import javax.jcr.Property;
+import javax.jcr.Value;
-        Node root = (Node) getSession().getItem(getSearchRoot(ntName));
-        return collectNode(nodeName, ntName, root.getNodes());
+        String sr = getSearchRoot(ntName);
+        // TODO: remove cast once 283 is released
+        SessionImpl sImpl = (SessionImpl) getSession();
+        if (sImpl.nodeExists(sr)) {
+            try {
+                Node root = sImpl.getNode(sr);
+                return collectNode(nodeName, ntName, root.getNodes());
+            } catch (PathNotFoundException e) {
+                // should not get here
+                log.warn("Error while retrieving node " + sr);
+            }
+        } // else: searchRoot does not exist yet -> omit the search
+        return null;
-        try {
-            Node root = (Node) getSession().getItem(getSearchRoot(ntName));
-            NodeIterator nodes = collectNodes(value, Collections.singleton(propertyName), ntName,
-                    root.getNodes(), true, 1);
-            if (nodes.hasNext()) {
-                return nodes.nextNode();
+        String sr = getSearchRoot(ntName);
+        // TODO: remove cast once 283 is released
+        SessionImpl sImpl = (SessionImpl) getSession();
+        if (sImpl.nodeExists(sr)) {
+            try {
+                Node root = sImpl.getNode(sr);
+                NodeIterator nodes = collectNodes(value,
+                        Collections.singleton(propertyName), ntName,
+                        root.getNodes(), true, 1);
+                if (nodes.hasNext()) {
+                    return nodes.nextNode();
+                }
+            } catch (PathNotFoundException e) {
+                // should not get here
+                log.warn("Error while retrieving node " + sr);
-        } catch (PathNotFoundException e) {
-            log.warn("Error while searching for node having a property " + propertyName + " with value " + value);
-        }
-
+        } // else: searchRoot does not exist yet -> omit the search
-
-        NodeImpl root = (NodeImpl) getSession().getItem(getSearchRoot(ntName));
-        return collectNodes(value, propertyNames, ntName, root.getNodes(), exact, maxSize);
+        String sr = getSearchRoot(ntName);
+        // TODO: remove cast once 283 is released
+        SessionImpl sImpl = (SessionImpl) getSession();
+        if (sImpl.nodeExists(sr)) {
+            try {
+                Node root = sImpl.getNode(sr);
+                return collectNodes(value, propertyNames, ntName, root.getNodes(), exact, maxSize);
+            } catch (PathNotFoundException e) {
+                // should not get here
+                log.warn("Error while retrieving node " + sr);
+            }
+        } // else: searchRoot does not exist yet -> omit the search
+        return NodeIteratorAdapter.EMPTY;
-
+    /**
+     *
+     * @param nodeName
+     * @param ntName
+     * @param nodes
+     * @return The first matching node or <code>null</code>.
+     */
-        while (nodes.hasNext()) {
+        Node match = null;
+        while (match == null && nodes.hasNext()) {
-                    return node;
-                }
-                if (node.hasNodes()) {
-                    return collectNode(nodeName, ntName, node.getNodes());
+                    match = node;
+                } else if (node.hasNodes()) {
+                    match = collectNode(nodeName, ntName, node.getNodes());
-        log.debug("Could not find a node matching name '" + nodeName + " and nodetype " + ntName);
-        return null;
+        return match;
-        Set matches = new HashSet();
-        collectNodes(value, props, ntName, nodes, matches, exact, maxSize);
-        return new NodeIteratorAdapter(matches);
+        Set matchSet = new HashSet();
+        collectNodes(value, props, ntName, nodes, matchSet, exact, maxSize);
+        return new NodeIteratorAdapter(matchSet);
-     * @param matches       Set of found matches to append results
+     * @param matchSet      Set of found matches to append results
-                              Set matches, boolean exact, long maxSize) {
+                              Set matchSet, boolean exact, long maxSize) {
-                    matches.add(node);
+                    matchSet.add(node);
-                            node.getNodes(), matches, exact, maxSize);
+                            node.getNodes(), matchSet, exact, maxSize);
-    private boolean matches(NodeImpl node, Name nodeTypeName,
+    private static boolean matches(NodeImpl node, Name nodeTypeName,
-                            String toMatch = node.getProperty(propertyName).getString();
-                            match = (exact) ?
-                                    toMatch.equals(value) :
-                                    toMatch.matches(".*"+value+".*");
+                            Property prop = node.getProperty(propertyName);
+                            if (prop.getDefinition().isMultiple()) {
+                                Value[] values = prop.getValues();
+                                for (int i = 0; i < values.length && !match; i++) {
+                                    match = matches(value, values[i].getString(), exact);
+                                }
+                            } else {
+                                match = matches(value, prop.getString(), exact);
+                            }
+
+    private static boolean matches(String value, String toMatch, boolean exact) {
+        return (exact) ? toMatch.equals(value) : toMatch.matches(".*"+value+".*");
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS8 INS8 INS8 INS29 INS83 INS83 INS83 INS39 INS42 INS44 INS44 INS44 MOV8 INS60 INS60 INS25 MOV41 INS60 INS60 INS25 MOV41 INS60 INS60 INS25 INS41 INS65 INS65 INS65 INS65 INS60 INS41 UPD42 INS43 INS42 MOV43 INS42 INS39 INS42 INS41 INS43 INS59 INS43 INS59 INS32 INS8 INS43 INS59 INS43 INS59 INS32 MOV8 INS43 INS59 INS43 INS59 INS32 INS8 INS40 INS42 INS42 INS42 INS66 MOV43 INS59 INS27 INS42 UPD42 UPD66 INS42 MOV16 INS42 INS42 MOV32 INS42 INS42 INS11 INS42 INS42 INS42 INS54 INS42 INS42 MOV32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS42 INS11 INS42 INS42 INS42 INS54 INS42 INS33 INS27 MOV32 UPD42 UPD42 UPD42 INS43 MOV32 INS8 INS12 INS43 MOV32 INS43 MOV32 MOV8 INS12 INS42 INS33 INS42 MOV60 MOV41 INS44 INS8 INS42 INS42 INS42 INS44 INS8 MOV43 INS43 INS42 INS21 MOV43 MOV43 INS43 INS42 INS21 INS8 INS25 INS32 INS42 INS32 INS32 INS32 INS42 INS32 INS21 MOV32 MOV8 INS42 UPD42 MOV42 INS42 INS42 INS42 INS27 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS27 INS7 INS21 INS8 INS45 INS42 UPD45 UPD42 INS45 INS42 INS42 INS42 INS7 UPD42 UPD42 MOV60 INS25 INS42 MOV32 MOV32 INS8 MOV60 MOV25 INS43 INS32 INS8 INS8 INS42 UPD42 MOV32 INS32 INS42 INS60 INS24 INS21 INS42 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS43 INS85 INS42 INS32 INS39 INS59 INS27 INS38 INS42 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS42 INS40 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 DEL32 DEL11 DEL8 DEL32 DEL11 DEL45 DEL42 DEL42 DEL43 DEL42 DEL43 DEL32 DEL11 DEL42 DEL41 DEL41 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL32 DEL8 DEL42 DEL7 DEL21