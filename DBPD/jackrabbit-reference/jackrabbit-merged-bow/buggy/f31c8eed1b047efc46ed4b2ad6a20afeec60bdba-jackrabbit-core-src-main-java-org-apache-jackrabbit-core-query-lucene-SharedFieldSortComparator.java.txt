JCR-974: Manage Lucene FieldCaches per index segment

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@550429 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.jackrabbit.core.query.lucene.SharedFieldCache.StringIndex;
-import org.apache.lucene.search.FieldCache;
-import java.io.IOException;
-
+     * @throws IOException 
-    public ScoreDocComparator newComparator(final IndexReader reader, String propertyName)
-            throws IOException {
-        // get the StringIndex for propertyName
-        final FieldCache.StringIndex index
-                = SharedFieldCache.INSTANCE.getStringIndex(reader, field,
-                        FieldNames.createNamedValue(propertyName, ""),
-                        SharedFieldSortComparator.this,
-                        createComparatorValues);
+    public ScoreDocComparator newComparator(final IndexReader reader, final String propertyName) throws IOException {
+
+        final List readers = new ArrayList();
+        getIndexReaders(readers, reader);
+
+        final SharedFieldCache.StringIndex[] indexes = new SharedFieldCache.StringIndex[readers.size()];
+
+        int maxDoc = 0;
+        final int[] starts = new int[readers.size() + 1];
+
+        for (int i = 0; i < readers.size(); i++) {
+            IndexReader r = (IndexReader) readers.get(i);
+            starts[i] = maxDoc;
+            maxDoc += r.maxDoc();
+            indexes[i] = SharedFieldCache.INSTANCE.getStringIndex(r, field,
+                    FieldNames.createNamedValue(propertyName, ""),
+                    SharedFieldSortComparator.this, createComparatorValues);
+        }
+        starts[readers.size()] = maxDoc; 
+
-                final int fi = index.order[i.doc];
-                final int fj = index.order[j.doc];
-                if (fi < fj) {
-                    return -1;
-                } else if (fi > fj) {
-                    return 1;
-                } else {
-                    return 0;
-                }
+                int idx1 = readerIndex(i.doc);
+                int idx2 = readerIndex(j.doc);             	
+
+                String iTerm = indexes[idx1].terms[i.doc - starts[idx1]];
+                String jTerm = indexes[idx2].terms[j.doc - starts[idx2]];
+
+                if (iTerm == jTerm) return 0;
+                if (iTerm == null) return -1;
+                if (jTerm == null) return 1;
+
+                return iTerm.compareTo(jTerm);
-             * Returns an empty if no lookup table is available otherwise
-             * the index term for the score doc <code>i</code>.
-             *
-             * @param i the score doc.
+             * Returns an empty if no lookup table is available otherwise the
+             * index term for the score doc <code>i</code>.
+             * 
+             * @param i
+             *            the score doc.
-                if (index.lookup != null) {
-                    return index.lookup[index.order[i.doc]];
+                if (createComparatorValues) {
+                    StringIndex index = indexes[readerIndex(i.doc)];
+                    return index.terms[i.doc];
+
+            /**
+             * Returns the reader index for document <code>n</code>.
+             *
+             * @param n document number.
+             * @return the reader index.
+             */
+            private int readerIndex(int n) {
+                int lo = 0;
+                int hi = readers.size() - 1;
+
+                while (hi >= lo) {
+                    int mid = (lo + hi) >> 1;
+                    int midValue = starts[mid];
+                    if (n < midValue) {
+                        hi = mid - 1;
+                    } else if (n > midValue) {
+                        lo = mid + 1;
+                    } else {
+                        while (mid + 1 < readers.size() && starts[mid + 1] == midValue) {
+                            mid++;
+                        }
+                        return mid;
+                    }
+                }
+                return hi;
+            }             
+
+
+    /**
+     * Checks if <code>reader</code> is of type {@link MultiIndexReader} and if
+     * that's the case calls this method recursively for each reader within the
+     * multi index reader; otherwise the reader is simply added to the list.
+     *
+     * @param readers the list of index readers.
+     * @param reader  the reader to check.
+     */
+    private void getIndexReaders(List readers, IndexReader reader) {
+        if (reader instanceof MultiIndexReader) {
+            IndexReader[] r = ((MultiIndexReader) reader).getIndexReaders();
+            for (int i = 0; i < r.length; i++) {
+                getIndexReaders(readers, r[i]);
+            }
+        } else {
+            readers.add(reader);
+        }
+    }

MOV26 MOV26 INS26 INS26 INS40 INS40 UPD40 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS83 INS43 INS60 INS21 INS60 INS60 INS24 INS21 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS25 INS42 INS66 INS42 INS83 INS43 INS59 INS32 INS5 INS39 INS59 INS83 INS5 INS59 INS58 INS27 INS37 INS8 INS7 INS66 INS65 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS62 INS8 INS8 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS85 UPD42 INS3 INS42 INS34 INS39 INS85 INS42 INS3 INS39 INS59 INS42 INS32 INS42 INS60 INS21 INS21 INS21 INS2 INS42 INS42 INS42 INS43 INS60 INS24 INS21 INS43 UPD40 MOV40 INS5 INS32 INS5 INS27 INS42 INS34 INS42 INS42 INS43 INS59 INS7 INS7 INS7 INS42 INS32 INS31 INS42 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS42 INS43 INS85 INS42 INS42 INS39 INS85 INS32 INS34 INS42 INS42 INS11 INS2 INS42 INS42 INS32 INS2 MOV32 INS42 INS42 INS29 INS83 INS39 INS42 INS44 INS8 INS43 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS42 INS40 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS60 INS60 INS25 INS25 INS25 INS41 INS65 INS65 INS65 INS39 INS42 INS60 INS60 INS61 INS41 INS42 INS36 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 MOV43 INS59 INS43 INS59 UPD27 MOV27 MOV41 INS27 MOV41 INS27 MOV41 INS32 UPD66 UPD66 UPD66 INS42 INS8 INS66 INS42 INS66 INS66 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS11 INS42 INS42 INS2 UPD42 INS32 UPD42 INS32 INS42 INS2 INS42 INS42 INS2 UPD42 UPD42 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS60 MOV41 INS42 INS34 INS42 INS27 INS42 INS42 INS60 INS60 INS25 INS43 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS22 INS27 INS22 INS27 INS43 INS59 INS2 INS32 INS34 INS39 INS59 INS39 INS59 INS27 INS8 INS25 INS42 INS2 INS42 INS40 INS2 INS2 INS42 INS40 INS2 INS42 INS42 INS2 UPD40 MOV40 MOV40 INS42 INS42 INS42 INS27 INS42 INS2 INS42 INS42 INS21 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS36 INS34 INS42 INS42 INS7 INS42 INS42 INS21 INS61 INS41 INS42 INS40 INS27 INS42 INS27 INS7 INS27 INS8 INS42 INS42 INS42 INS42 INS34 INS42 INS27 INS27 INS27 INS21 INS42 INS34 INS27 INS32 INS2 INS42 INS37 INS42 INS34 INS42 INS42 INS42 INS27 INS42 INS42 INS34 DEL43 DEL83 DEL40 DEL40 DEL2 DEL83 DEL40 DEL40 DEL2 DEL42 DEL42 DEL27 DEL8 DEL8 DEL8 DEL25 DEL25 DEL40 DEL2 DEL2 DEL40 DEL33 DEL27 DEL8