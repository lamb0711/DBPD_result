JCR-2116: JSR 283: Built-In Node Types (OPV changes)
JCR-2058: JSR 283: VersionManager and new versioning methods (slightly different checkin/restore behavior)


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@797662 13f79535-47bb-0310-9956-ffa450edef68

-     * checkin modes
-     */
-    private static enum Mode {
-        /**
-         * checkin mode version.
-         */
-        VERSION,
-        /**
-         * checkin mode copy. specifies, that the items are always copied.
-         */
-        COPY,
-
-        /**
-         * mode flag specifies, that the mode should be recursed. otherwise i
-         * will be redetermined by the opv.
-         */
-        COPY_RECURSE
-    }
-
-    /**
-     * the frozen child nodes
-     */
-    private InternalFreeze[] frozenNodes = null;
-
-    /**
-    public synchronized InternalFreeze[] getFrozenChildNodes()
+    public List<ChildNodeEntry> getFrozenChildNodes()
-        if (frozenNodes == null) {
-            try {
-                // maybe add iterator?
-                List<ChildNodeEntry> entries =
-                    node.getState().getChildNodeEntries();
-                frozenNodes = new InternalFreeze[entries.size()];
-                int i = 0;
-                for (ChildNodeEntry entry : entries) {
-                    frozenNodes[i++] = (InternalFreeze) vMgr.getItem(entry.getId());
-                }
-            } catch (RepositoryException e) {
-                throw new VersionException("Unable to retrieve frozen child nodes", e);
-            }
-        }
-        return frozenNodes;
+        return node.getState().getChildNodeEntries();
-    public boolean hasFrozenHistory(NodeId id) {
-        try {
-            InternalFreeze[] frozen = getFrozenChildNodes();
-            for (InternalFreeze aFrozen : frozen) {
-                if (aFrozen instanceof InternalFrozenVersionHistory
-                        && ((InternalFrozenVersionHistory) aFrozen)
-                        .getVersionHistoryId().equals(id)) {
-                    return true;
-                }
-            }
-        } catch (RepositoryException e) {
-            // ignore
-        }
-        return false;
+    public boolean hasFrozenChildNode(Name name, int idx) {
+        return node.getState().hasChildNodeEntry(name, idx);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public InternalFreeze getFrozenChildNode(Name name, int idx) 
+            throws RepositoryException {
+        ChildNodeEntry e = node.getState().getChildNodeEntry(name, idx);
+        return e == null
+                ? null
+                : (InternalFreeze) vMgr.getItem(e.getId());
-            return checkin(parent, name, src, Mode.VERSION);
+            return checkin(parent, name, src, false);
-     * @param mode checkin mode
+     * @param forceCopy if <code>true</code> the OPV is ignored and a COPY is performed
-                                       NodeStateEx src, Mode mode)
+                                       NodeStateEx src, boolean forceCopy)
-            if (mode != Mode.VERSION) {
+            if (forceCopy) {
-                throw new VersionException("Checkin aborted due to OPV in " + propName);
+                throw new VersionException("Checkin aborted due to OPV abort in " + propName);
+        boolean isFull = src.getEffectiveNodeType().includesNodeType(NameConstants.MIX_VERSIONABLE);
-            if (mode == Mode.COPY_RECURSE) {
+            if (forceCopy) {
-                if (child.getEffectiveNodeType().includesNodeType(NameConstants.MIX_VERSIONABLE)) {
+                if (isFull && child.getEffectiveNodeType().includesNodeType(NameConstants.MIX_VERSIONABLE)) {
-                    // else copy but do not recurse
-                    checkin(node, child.getName(), child, Mode.COPY);
+                    // else copy
+                    checkin(node, child.getName(), child, true);
-                checkin(node, child.getName(), child, Mode.COPY_RECURSE);
+                checkin(node, child.getName(), child, true);

INS31 INS31 MOV29 INS83 MOV74 INS42 MOV43 INS8 INS29 MOV83 INS39 UPD42 MOV42 INS44 INS44 INS8 MOV43 UPD42 INS44 MOV43 INS8 INS41 INS65 INS43 INS42 INS39 INS42 INS41 UPD43 UPD42 INS39 INS42 INS60 INS41 INS39 INS42 INS60 MOV32 INS65 INS42 INS32 UPD42 MOV43 INS59 INS16 UPD42 UPD66 INS39 INS59 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS27 INS33 INS11 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS33 MOV43 INS32 INS42 INS32 INS42 INS40 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS32 INS9 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS27 UPD45 INS42 MOV32 MOV32 MOV42 INS9 MOV32 INS42 INS9 MOV42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL66 DEL65 DEL29 DEL42 DEL72 DEL66 DEL65 DEL29 DEL42 DEL72 DEL66 DEL66 DEL65 DEL29 DEL42 DEL72 DEL71 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL23 DEL83 DEL85 DEL5 DEL42 DEL33 DEL27 DEL42 DEL59 DEL60 DEL42 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL37 DEL2 DEL42 DEL43 DEL32 DEL32 DEL11 DEL7 DEL21 DEL8 DEL70 DEL8 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL39 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL32 DEL27 DEL9 DEL41 DEL8 DEL25 DEL8 DEL70 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL9 DEL41 DEL8 DEL40 DEL42 DEL43 DEL42 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL40 DEL42 DEL40