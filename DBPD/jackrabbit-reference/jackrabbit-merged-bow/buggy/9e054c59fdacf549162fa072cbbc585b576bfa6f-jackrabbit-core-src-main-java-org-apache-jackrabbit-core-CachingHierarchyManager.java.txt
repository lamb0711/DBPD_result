JCR-1082 - cache getting out of sync with transientstore causes pathnotfoundexception


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@570736 13f79535-47bb-0310-9956-ffa450edef68

-     * Generate subsequent add and remove notifications for every replacement. This method
-     * currently assumes that the reordering is detectable by comparing the state's child
-     * node entries to the overlayed state's child node entries. It is not able to handle
-     * a transient reordering and will therefore evict its cached entry if such a situation
-     * is detected.
+     * Iterate over all cached children of this state and verify each
+     * child's position.
-        List entries = state.getReorderedChildNodeEntries();
-        if (entries.size() == 0) {
-            synchronized (cacheMonitor) {
-                if (idCache.containsKey(state.getNodeId())) {
-                    evict(state.getNodeId());
+        synchronized (cacheMonitor) {
+            LRUEntry entry = (LRUEntry) idCache.get(state.getNodeId());
+            if (entry != null) {
+                PathMap.Element element = entry.getElement();
+                Iterator iter = element.getChildren();
+                while (iter.hasNext()) {
+                    PathMap.Element child = (PathMap.Element) iter.next();
+                    LRUEntry childEntry = (LRUEntry) child.get();
+                    if (childEntry == null) {
+                        /**
+                         * Child has no associated UUID information: we're
+                         * therefore unable to determine if this child's
+                         * position is still accurate and have to assume
+                         * the worst and remove it.
+                         */
+                        child.remove(false);
+                        remove(child);
+                        continue;
+                    }
+                    NodeId childId = childEntry.getId();
+                    NodeState.ChildNodeEntry cne = state.getChildNodeEntry(childId);
+                    if (cne == null) {
+                        /* Child no longer in parent node state, so remove it */
+                        child.remove(false);
+                        remove(child);
+                        continue;
+                    }
+                    if (!cne.getName().equals(child.getName()) ||
+                            cne.getIndex() != child.getNormalizedIndex()) {
+                        /* Child still exists but at a different position */
+                        element.move(child.getPathElement(),
+                                Path.PathElement.create(cne.getName(), cne.getIndex()));
+                        continue;
+                    }
+                    /* At this point the child's position is still valid */
-            return;
-        }
-        Iterator iter = entries.iterator();
-        while (iter.hasNext()) {
-            NodeState.ChildNodeEntry now = (NodeState.ChildNodeEntry) iter.next();
-            NodeState.ChildNodeEntry old =
-                    ((NodeState) state.getOverlayedState()).getChildNodeEntry(now.getId());
-
-            if (old == null) {
-                log.warn("Reordered child node not found in old list.");
-                continue;
-            }
-
-            nodeAdded(state, now.getName(), now.getIndex(), now.getId());
-            nodeRemoved(state, old.getName(), old.getIndex(), old.getId());
-            /**
-             * Do not cache paths to elements if the parent is transient, since
-             * children may be reordered multiple times (see JCR-993). If a
-             * child's position is cached at some intermediate stage but the
-             * total reordering effectively leaves the child at its initial
-             * position, the child's bad position is hardly detectable.
-             */
-            try {
-                NodeId parentId = state.getParentId();
-                if (parentId != null && provider.getItemState(parentId).isTransient()) {
-                    return;
-                }
-            } catch (ItemStateException e) {
-                String msg = "Unable to retrieve parent state of: " + id;
-                log.warn(msg, e);
-            }
-

INS8 INS51 UPD66 UPD66 INS42 INS8 MOV60 INS25 UPD43 UPD27 MOV27 INS8 UPD42 UPD42 INS11 INS42 INS33 INS60 MOV60 MOV61 INS43 MOV32 INS43 INS59 INS42 UPD42 INS40 INS42 INS32 INS60 INS25 INS60 INS60 INS25 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD43 INS43 INS59 INS27 INS8 MOV43 INS59 MOV43 INS59 INS27 INS8 UPD40 UPD42 INS42 INS42 INS11 INS42 INS33 INS21 INS21 INS18 INS42 INS32 INS42 INS32 UPD42 INS21 INS38 INS27 MOV21 INS18 UPD43 UPD43 MOV43 MOV32 INS32 INS32 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 UPD40 UPD42 UPD42 UPD42 INS42 INS42 INS9 INS42 INS42 UPD42 UPD42 INS9 INS42 INS42 INS32 INS42 MOV32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 INS40 INS42 MOV32 MOV32 UPD42 UPD42 UPD42 UPD42 DEL66 DEL66 DEL66 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL59 DEL60 DEL45 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL41 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54