JCR-3754 [jackrabbit-aws-ext] Add retry logic to S3 asynchronous failed upload

Applying patch from Shashank.
-- Using parameterized logging stmts. No logic changes

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@1585460 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.core.data.LazyFileInputStream;
-        LOG.info("cachePurgeTrigFactor = " + cachePurgeTrigFactor + ", cachePurgeResizeFactor = " + cachePurgeResizeFactor
-            + ", cachePurgeTrigFactorSize = " + (cachePurgeTrigFactor * size) + ", cachePurgeResizeFactor = "
-            + (cachePurgeResizeFactor * size));
+        LOG.info(
+            "cachePurgeTrigFactor =[{}], cachePurgeResizeFactor =[{}],  cachePurgeTrigFactorSize =[{}], cachePurgeResizeFactorSize =[{}]",
+            new Object[] { cachePurgeTrigFactor, cachePurgeResizeFactor,
+                (cachePurgeTrigFactor * size), (cachePurgeResizeFactor * size) });
-                        LOG.info("tmp file = " + transFile.getAbsolutePath()
-                            + " not deleted successfully");
+                        LOG.info("tmp file [{}] not deleted successfully", transFile.getAbsolutePath());
-                    if (LOG.isDebugEnabled()) {
-                        LOG.debug("file [" + fileName + "] added to local cache.");
-                    }
+                    LOG.debug("file [{}] added to local cache.", fileName);
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("file [" + fileName + "] added to local cache.");
-            }
+            LOG.debug("file [{}] added to local cache.", fileName);
-            log("purgeMode true or file doesn't exists: getFileIfStored returned");
+            LOG.debug(
+                "getFileIfStored returned: purgeMode=[{}], file=[{}] exists=[{}]",
+                new Object[] { isInPurgeMode(), fileName, f.exists() });
-            log("purgeMode true :delete returned");
+            LOG.debug("purgeMode true :delete returned");
-        log("close");
+        LOG.debug("close");
-            log("cannot admit file of length=" + length + " and currentSizeInBytes=" + cache.currentSizeInBytes);
+            LOG.debug("cannot admit file of length=[{}] and currentSizeInBytes=[{}] ",
+                length, cache.currentSizeInBytes);
-        LOG.info("deleted [" + count + "]/[" + initialSize + "] files");
+        LOG.info("deleted [{}]/[{}] files.", count, initialSize);
-        log("cache delete " + fileName);
+        LOG.debug("try deleting file [{}]", fileName);
-            log(fileName + "  deleted successfully");
+            LOG.debug("File [{}]  deleted successfully", fileName);
-            LOG.info("not able to delete file = " + f.getAbsolutePath());
+            LOG.info("not able to delete file [{}]", f.getAbsolutePath());
-    static void log(final String s) {
-        LOG.debug(s);
-    }
-
-                    LOG.info("AsyncUploadCache upload contains file [" + fileName
-                        + "]. Not removing it from LocalCache.");
+                    LOG.info(
+                        "AsyncUploadCache upload contains file [{}]. Not removing it from LocalCache.",
+                        fileName);
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("error: ", e);
-                }
+                LOG.debug("error: ", e);
-                    log("cache entry { " + fileName + "} with size {" + flength + "} removed.");
+                    LOG.debug("cache entry [{}], with size [{}] removed.",
+                        fileName, flength);
-                    log(" file not exists. cache entry { " + fileName + "} with size {" + flength + "} removed.");
+                    LOG.debug(
+                        "file not exists. cache entry [{}], with size [{}] removed.",
+                        fileName, flength);
-                LOG.info("currentSizeInBytes[" + cache.currentSizeInBytes + "] exceeds (cachePurgeTrigSize)[" + cache.cachePurgeTrigSize
-                    + "]");
+                LOG.info(
+                    "currentSizeInBytes=[{}]  exceeds cachePurgeTrigSize=[{}]",
+                    cache.currentSizeInBytes, cache.cachePurgeTrigSize);
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("currentSizeInBytes[" + cache.currentSizeInBytes + "] and  (cachePurgeTrigSize)[" + cache.cachePurgeTrigSize
-                        + "], isInPurgeMode =[" + isInPurgeMode() + "]");
-                }
+                LOG.debug(
+                    "currentSizeInBytes=[{}],cachePurgeTrigSize=[{}], isInPurgeMode =[{}]",
+                    new Object[] { cache.currentSizeInBytes,
+                        cache.cachePurgeTrigSize, isInPurgeMode() });
-                    LOG.info(" cache purge job completed: cleaned ["
-                        + (initialSize - cache.size())
-                        + "] files and currentSizeInBytes = [ "
-                        + cache.currentSizeInBytes + "]");
+                    LOG.info(
+                        " cache purge job completed: cleaned [{}] files and currentSizeInBytes = [{}]",
+                        (initialSize - cache.size()), cache.currentSizeInBytes);
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Time taken to recursive [" + allFiles.size() + "] took [" + ((t1 - startTime) / 1000) + "]sec");
-            }
+            LOG.debug("Time taken to recursive [{}] took [{}] sec",
+                allFiles.size(), ((t1 - startTime) / 1000));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Time taken to sort [" + allFiles.size() + "] took [" + ((t2 - t1) / 1000) + "]sec");
-            }
+            LOG.debug("Time taken to sort [{}] took [{}] sec",
+                allFiles.size(), ((t2 - t1) / 1000));
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Processed {" + count + "}/{" + allFiles.size() + "} , currentSizeInBytes = " + cache.currentSizeInBytes
-                    + ",  maxSizeInBytes = " + cache.maxSizeInBytes + ",  cache.filecount = " + cache.size());
-            }
+            LOG.debug(
+                "Processed [{}]/[{}], currentSizeInBytes = [{}], maxSizeInBytes = [{}], cache.filecount = [{}]",
+                new Object[] { count, allFiles.size(),
+                    cache.currentSizeInBytes, cache.maxSizeInBytes,
+                    cache.size() });
-            LOG.info("Time to build cache of  [" + allFiles.size() + "] took [" + ((t3 - startTime) / 1000) + "]sec");
+            LOG.info("Time to build cache of  [{}] files took [{}] sec",
+                allFiles.size(), ((t3 - startTime) / 1000));

MOV25 MOV21 MOV21 MOV21 INS45 INS3 MOV21 INS42 UPD42 INS45 INS42 INS42 INS42 UPD42 INS45 INS42 MOV32 INS25 MOV8 INS5 INS4 MOV8 MOV38 MOV8 INS45 MOV32 MOV36 INS45 MOV32 MOV36 INS45 INS3 INS45 MOV32 MOV36 INS43 INS85 INS42 INS42 MOV36 MOV36 INS45 INS42 INS42 UPD42 UPD45 INS3 INS42 UPD42 INS42 UPD42 INS45 INS42 INS40 UPD42 INS42 INS45 INS42 MOV41 INS5 INS4 INS42 INS5 INS4 INS45 MOV32 INS45 INS40 INS40 INS45 INS3 INS43 INS85 INS42 MOV32 INS40 INS40 MOV32 MOV21 INS43 INS85 INS32 INS42 INS32 INS5 INS4 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 UPD42 INS45 INS42 INS42 INS43 INS85 INS40 INS40 MOV32 INS45 MOV36 INS40 INS45 INS42 INS42 UPD42 INS45 INS42 INS42 INS42 INS45 MOV32 DEL40 DEL26 DEL45 DEL42 DEL45 DEL42 DEL45 DEL45 DEL27 DEL45 DEL45 DEL27 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL40 DEL27 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL27 DEL42 DEL45 DEL27 DEL45 DEL27 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL45 DEL42 DEL45 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL25 DEL45 DEL40 DEL45 DEL40 DEL45 DEL27 DEL45 DEL40 DEL45 DEL40 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL45 DEL45 DEL40 DEL45 DEL27 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL42 DEL45 DEL45 DEL40 DEL45 DEL40 DEL45 DEL27 DEL42 DEL42 DEL32 DEL8 DEL25 DEL45 DEL45 DEL45 DEL27