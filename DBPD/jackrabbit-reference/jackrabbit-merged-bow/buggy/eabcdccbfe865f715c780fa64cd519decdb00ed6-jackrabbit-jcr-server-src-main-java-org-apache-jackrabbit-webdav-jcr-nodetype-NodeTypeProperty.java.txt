JCR-2509 : Reduce number of compiler warning by adding @Override and generics where appropriate [step 2: jackrabbit-jcr-server]

in addition:
- minor improvements in comments, typos
- use foreach loops where possible
- remove redundant Tika imports in server/io package
- remove redundant casts
- add missing index increment in SubscriptionManagerImpl.SubscriptionMap

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@915339 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
+import java.util.Collections;
-import java.util.Iterator;
-public class NodeTypeProperty extends AbstractDavProperty implements NodeTypeConstants {
+public class NodeTypeProperty extends AbstractDavProperty<Set<String>> implements NodeTypeConstants {
-    private final Set nodetypeNames = new HashSet();
+    private final Set<String> nodetypeNames = new HashSet<String>();
-        for (int i = 0; i < nodeTypes.length; i++) {
-            NodeType nt = nodeTypes[i];
+        for (NodeType nt : nodeTypes) {
-                nodetypeNames.add(nodeTypes[i].getName());
+                nodetypeNames.add(nt.getName());
-        for (int i = 0; i < nodeTypeNames.length; i++) {
-            if (nodeTypeNames[i] != null) {
-                nodetypeNames.add(nodeTypeNames[i]);
+        for (String nodeTypeName : nodeTypeNames) {
+            if (nodeTypeName != null) {
+                nodetypeNames.add(nodeTypeName);
-    public NodeTypeProperty(DavProperty property) {
+    public NodeTypeProperty(DavProperty<?> property) {
-            nodetypeNames.addAll(((NodeTypeProperty)property).nodetypeNames);
+            nodetypeNames.addAll(((NodeTypeProperty) property).nodetypeNames);
-                retrieveNodeTypeNames(((List)propValue));
+                retrieveNodeTypeNames(((List<?>)propValue));
-                List l = new ArrayList();
-                l.add(propValue);
+                List<Element> l = Collections.singletonList((Element) propValue);
-    private void retrieveNodeTypeNames(List elementList) {
-        Iterator it = elementList.iterator();
-        while (it.hasNext()) {
-            Object content = it.next();
+    private void retrieveNodeTypeNames(List<?> elementList) {
+        for (Object content : elementList) {
-            Element el = (Element)content;
+            Element el = (Element) content;
-                log.debug("'dcr:nodetype' element expected -> ignoring element '" + ((Element)content).getNodeName() + "'");
+                log.debug("'dcr:nodetype' element expected -> ignoring element '" + ((Element) content).getNodeName() + "'");
-    public Set getNodeTypeNames() {
+    public Set<String> getNodeTypeNames() {
-    public Object getValue() {
+    public Set<String> getValue() {
+    @Override
-        Iterator it = getNodeTypeNames().iterator();
-        while (it.hasNext()) {
-            String name = it.next().toString();
+        for (String name : getNodeTypeNames()) {
-}
+}

MOV26 UPD40 INS74 MOV43 INS74 INS74 INS8 INS74 INS74 INS78 INS43 INS43 MOV43 INS43 MOV46 INS70 INS70 INS74 INS74 INS70 INS43 INS43 MOV43 INS43 INS42 INS70 INS42 INS42 INS42 INS74 INS44 INS42 INS8 INS44 INS42 INS8 MOV43 INS76 MOV43 INS76 INS44 INS42 MOV8 INS42 INS42 UPD42 MOV42 INS44 MOV32 MOV8 MOV43 INS43 MOV43 INS42 MOV25 INS43 INS42 MOV25 MOV43 INS42 MOV43 INS42 INS42 INS42 INS42 INS60 INS42 INS74 INS59 INS42 MOV43 INS43 INS42 INS32 INS74 UPD42 MOV42 UPD42 MOV42 INS42 INS11 MOV43 INS76 INS43 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL8 DEL24 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61