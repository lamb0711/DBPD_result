JCR-2336: Automatic type conversion no longer works

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@820908 13f79535-47bb-0310-9956-ffa450edef68

-            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
-            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+    /**
+     * Creates a new property with the given name and <code>type</code> hint and
+     * property definition. If the given property definition is not of type
+     * <code>UNDEFINED</code>, then it takes precendence over the
+     * <code>type</code> hint.
+     *
+     * @param name the name of the property to create.
+     * @param type the type hint.
+     * @param def  the associated property definition.
+     * @return the property instance.
+     * @throws RepositoryException if the property cannot be created.
+     */
-                                                            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def)
+                                                            PropertyDefinitionImpl def)
+            if (def.getRequiredType() != PropertyType.UNDEFINED) {
+                type = def.getRequiredType();
+            }
-        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl newDef =
+        NodeDefinitionImpl newDef =
-            org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl def = getApplicablePropertyDefinition(
+            PropertyDefinitionImpl def = getApplicablePropertyDefinition(
-    protected org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl getApplicableChildNodeDefinition(Name nodeName,
+    protected NodeDefinitionImpl getApplicableChildNodeDefinition(Name nodeName,
-    protected org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl getApplicablePropertyDefinition(Name propertyName,
+    protected PropertyDefinitionImpl getApplicablePropertyDefinition(Name propertyName,
-                        org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
+                        PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
-                        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
+                        NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
-        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl def;
+        NodeDefinitionImpl def;
-
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        int type;
-        if (values == null || values.length == 0
-                || values[0] == null) {
-            type = PropertyType.UNDEFINED;
-        } else {
-            type = values[0].getType();
-        }
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, true, false, status);
-        try {
-            prop.setValue(values);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
+        int type = PropertyType.UNDEFINED;
+        if (values != null) {
+            for (Value v : values) {
+                // use the type of the first value
+                if (v != null) {
+                    type = v.getType();
+                    break;
+                }
-            // rethrow
-            throw re;
-        return prop;
+
+        return setProperty(name, values, type, false);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, true, true, status);
-        try {
-            if (prop.getDefinition().getRequiredType() == PropertyType.UNDEFINED
-                    && type != PropertyType.UNDEFINED) {
-                prop.setValue(ValueHelper.convert(values, type, session.getValueFactory()));
-            } else {
-                prop.setValue(values);
-            }
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
+        return setProperty(name, values, type, true);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        int type = PropertyType.UNDEFINED;
-        if (value != null) {
-            type = value.getType();
-        }
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, false, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
+        return setProperty(name, value, false);
-        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl def;
+        NodeDefinitionImpl def;
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        int type;
-        if (values == null || values.length == 0
-                || values[0] == null) {
-            type = PropertyType.UNDEFINED;
-        } else {
-            type = values[0].getType();
-        }
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, true, false, status);
-        try {
-            if (prop.getDefinition().getRequiredType() == PropertyType.UNDEFINED
-                    && type != PropertyType.UNDEFINED) {
-                prop.setValue(ValueHelper.convert(values, type, session.getValueFactory()));
-            } else {
-                prop.setValue(values);
-            }
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
+        return setProperty(session.getQName(name), values);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, true, true, status);
-        try {
-            prop.setValue(values, type);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
+        return setProperty(session.getQName(name), values, type);
-        /**
-         * if the target property is not of type STRING then a
-         * best-effort conversion is attempted
-         */
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.STRING, true, false, status);
-        try {
-            prop.setValue(values);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
+        Value[] v = null;
+        if (values != null) {
+            v = ValueHelper.convert(values, PropertyType.STRING, session.getValueFactory());
-        return prop;
+        return setProperty(name, v);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, true, true, status);
-        try {
-            if (prop.getDefinition().getRequiredType() == PropertyType.UNDEFINED
-                    && type != PropertyType.UNDEFINED) {
-                prop.setValue(ValueHelper.convert(values, type, session.getValueFactory()));
-            } else {
-                prop.setValue(values);
-            }
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
+        Value[] v = null;
+        if (values != null) {
+            v = ValueHelper.convert(values, type, session.getValueFactory());
-        return prop;
+        return setProperty(session.getQName(name), v, type, true);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.STRING, false, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
+        Value v = null;
+        if (value != null) {
+            v = session.getValueFactory().createValue(value);
-        return prop;
+        return setProperty(name, v);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, false, true, status);
-        try {
-            if (prop.getDefinition().getRequiredType() == PropertyType.UNDEFINED
-                    && type != PropertyType.UNDEFINED) {
-                prop.setValue(ValueHelper.convert(value, type, session.getValueFactory()));
-            } else {
-                prop.setValue(value);
-            }
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
+        Value v = null;
+        if (value != null) {
+            v = session.getValueFactory().createValue(value, type);
-        return prop;
+        return setProperty(session.getQName(name), v, true);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(name, type, false, true, status);
-        try {
-            if (prop.getDefinition().getRequiredType() == PropertyType.UNDEFINED
-                    && type != PropertyType.UNDEFINED) {
-                prop.setValue(ValueHelper.convert(value, type, session.getValueFactory()));
-            } else {
-                prop.setValue(value);
-            }
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
+        if (value != null) {
+            value = ValueHelper.convert(value, type, session.getValueFactory());
-        return prop;
+        return setProperty(session.getQName(name), value, true);
+        return setProperty(session.getQName(name), value);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, InputStream value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        Value v = null;
+        if (value != null) {
+            v = session.getValueFactory().createValue(value);
+        }
+        return setProperty(name, v);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, boolean value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        Value v = session.getValueFactory().createValue(value);
+        return setProperty(name, v);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, double value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        Value v = session.getValueFactory().createValue(value);
+        return setProperty(name, v);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, long value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        Value v = session.getValueFactory().createValue(value);
+        return setProperty(name, v);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, Calendar value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        Value v = null;
+        if (value != null) {
+            try {
+                v = session.getValueFactory().createValue(value);
+            } catch (IllegalArgumentException e) {
+                // thrown if calendar cannot be formatted as ISO8601
+                throw new ValueFormatException(e.getMessage());
+            }
+        }
+        return setProperty(name, v);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    public Property setProperty(String name, Node value)
+            throws ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
+        Value v = null;
+        if (value != null) {
+            try {
+                v = session.getValueFactory().createValue(value);
+            } catch (UnsupportedRepositoryOperationException e) {
+                // happens when node is not referenceable
+                throw new ValueFormatException("node is not of type mix:referenceable");
+            }
+        }
+        return setProperty(name, v);
+    }
+
+    /**
+     * Implementation for <code>setProperty()</code> using a single {@link
+     * Value}. The type of the returned property is enforced based on the
+     * <code>enforceType</code> flag. If set to <code>true</code>, the returned
+     * property is of the passed type if it didn't exist before. If set to
+     * <code>false</code>, then the returned property may be of some other type,
+     * but still must be based on an existing property definition for the given
+     * name and single-valued flag. The resulting type is taken from that
+     * definition and the implementation tries to convert the passed value to
+     * that type. If that fails, then a {@link ValueFormatException} is thrown.
+     *
+     * @param name        the name of the property to set.
+     * @param value       the value to set. If <code>null</code> the property is
+     *                    removed.
+     * @param enforceType if the type of <code>value</code> is enforced.
+     * @return the <code>Property</code> object set, or <code>null</code> if
+     *         this method was used to remove a property (by setting its value
+     *         to <code>null</code>).
+     * @throws ValueFormatException         if <code>value</code> cannot be
+     *                                      converted to the specified type or
+     *                                      if the property already exists and
+     *                                      is multi-valued.
+     * @throws VersionException             if this node is read-only due to a
+     *                                      checked-in node and this implementation
+     *                                      performs this validation immediately.
+     * @throws LockException                if a lock prevents the setting of
+     *                                      the property and this implementation
+     *                                      performs this validation immediately.
+     * @throws ConstraintViolationException if the change would violate a
+     *                                      node-type or other constraint and
+     *                                      this implementation performs this
+     *                                      validation immediately.
+     * @throws RepositoryException          if another error occurs.
+     */
+    protected PropertyImpl setProperty(Name name,
+                                       Value value,
+                                       boolean enforceType) throws
+            ValueFormatException, VersionException, LockException,
+            ConstraintViolationException, RepositoryException {
-        PropertyImpl prop = getOrCreateProperty(name, type, false, false, status);
-        try {
-            if (prop.getDefinition().getRequiredType() == PropertyType.UNDEFINED
-                    && type != PropertyType.UNDEFINED) {
-                prop.setValue(ValueHelper.convert(value, type, session.getValueFactory()));
-            } else {
-                prop.setValue(value);
-            }
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Property setProperty(String name, InputStream value)
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.BINARY, false, false, status);
+        PropertyImpl prop = getOrCreateProperty(name, type, false, enforceType, status);
-     * {@inheritDoc}
+     * Implementation for <code>setProperty()</code> using a {@link Value}
+     * array. The type of the returned property is enforced based on the
+     * <code>enforceType</code> flag. If set to <code>true</code>, the returned
+     * property is of the passed type if it didn't exist before. If set to
+     * <code>false</code>, then the returned property may be of some other type,
+     * but still must be based on an existing property definition for the given
+     * name and multi-valued flag. The resulting type is taken from that
+     * definition and the implementation tries to convert the passed values to
+     * that type. If that fails, then a {@link ValueFormatException} is thrown.
+     *
+     * @param name        the name of the property to set.
+     * @param values      the values to set. If <code>null</code> the property
+     *                    is removed.
+     * @param type        the target type of the values to set.
+     * @param enforceType if the target type is enforced.
+     * @return the <code>Property</code> object set, or <code>null</code> if
+     *         this method was used to remove a property (by setting its value
+     *         to <code>null</code>).
+     * @throws ValueFormatException         if a value cannot be converted to
+     *                                      the specified type or if the
+     *                                      property already exists and is not
+     *                                      multi-valued.
+     * @throws VersionException             if this node is read-only due to a
+     *                                      checked-in node and this implementation
+     *                                      performs this validation immediately.
+     * @throws LockException                if a lock prevents the setting of
+     *                                      the property and this implementation
+     *                                      performs this validation immediately.
+     * @throws ConstraintViolationException if the change would violate a
+     *                                      node-type or other constraint and
+     *                                      this implementation performs this
+     *                                      validation immediately.
+     * @throws RepositoryException          if another error occurs.
-    public Property setProperty(String name, boolean value)
-            throws ValueFormatException, VersionException, LockException,
+    protected PropertyImpl setProperty(Name name,
+                                       Value[] values,
+                                       int type,
+                                       boolean enforceType) throws
+            ValueFormatException, VersionException, LockException,
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.BOOLEAN, false, false, status);
+        PropertyImpl prop = getOrCreateProperty(name, type, true, enforceType, status);
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Property setProperty(String name, double value)
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.DOUBLE, false, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Property setProperty(String name, long value)
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.LONG, false, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Property setProperty(String name, Calendar value)
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.DATE, false, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
-        }
-        return prop;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public Property setProperty(String name, Node value)
-            throws ValueFormatException, VersionException, LockException,
-            ConstraintViolationException, RepositoryException {
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.REFERENCE, false, true, status);
-        try {
-            prop.setValue(value);
+            prop.setValue(values, type);
-                        org.apache.jackrabbit.spi.commons.nodetype.PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
+                        PropertyDefinitionImpl pdi = getApplicablePropertyDefinition(
-                        org.apache.jackrabbit.spi.commons.nodetype.NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
+                        NodeDefinitionImpl ndi = getApplicableChildNodeDefinition(
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.DECIMAL, false, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
+        Value v = null;
+        if (value != null) {
+            v = session.getValueFactory().createValue(value);
-        return prop;
+        return setProperty(name, v);
-        // check state of this instance
-        sanityCheck();
-
-        // check pre-conditions for setting property
-        checkSetProperty();
-
-        BitSet status = new BitSet();
-        PropertyImpl prop = getOrCreateProperty(
-                name, PropertyType.BINARY, false, false, status);
-        try {
-            prop.setValue(value);
-        } catch (RepositoryException re) {
-            if (status.get(CREATED)) {
-                // setting value failed, get rid of newly created property
-                removeChildProperty(name);
-            }
-            // rethrow
-            throw re;
+        Value v = null;
+        if (value != null) {
+            v = session.getValueFactory().createValue(value);
-        return prop;
+        return setProperty(name, v);

MOV31 INS31 INS31 INS31 INS31 INS29 UPD43 UPD43 MOV29 MOV43 MOV44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 MOV43 MOV44 MOV44 INS44 INS43 INS43 INS43 INS43 MOV43 INS8 MOV29 MOV43 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV29 MOV43 MOV44 MOV44 MOV44 INS43 INS43 INS43 INS43 MOV43 INS8 MOV29 MOV43 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV29 MOV43 MOV44 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV29 MOV83 MOV43 MOV42 MOV44 INS44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 MOV83 MOV43 MOV42 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 INS83 MOV43 INS42 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 MOV29 MOV43 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 MOV29 MOV43 MOV44 MOV44 MOV43 MOV43 MOV43 MOV43 MOV43 INS29 INS83 MOV43 INS42 INS44 MOV44 INS44 MOV43 MOV43 MOV43 MOV43 MOV43 INS8 INS29 UPD83 MOV43 INS44 INS44 INS65 INS65 INS65 INS65 INS65 INS65 UPD43 INS42 INS42 INS41 INS41 INS41 INS5 INS42 INS41 INS39 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS41 MOV25 INS41 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV60 INS25 INS41 MOV25 INS41 MOV25 INS41 INS43 INS42 INS25 INS41 INS41 INS25 INS41 INS60 INS41 MOV60 INS41 INS60 INS41 INS25 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD43 MOV43 UPD42 MOV42 INS39 INS42 MOV21 MOV21 MOV60 MOV25 MOV60 INS60 MOV54 MOV41 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS39 INS42 INS25 INS41 INS25 INS41 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 UPD43 UPD43 MOV59 INS27 INS8 INS32 INS32 INS32 UPD43 INS43 INS85 INS32 INS32 INS5 INS27 INS32 INS5 INS27 MOV8 INS32 UPD43 INS27 INS32 UPD43 INS27 INS32 UPD42 MOV42 INS27 MOV8 INS32 INS32 UPD43 INS27 INS8 INS32 UPD43 MOV43 INS59 INS32 UPD43 INS32 INS43 INS59 INS32 UPD43 INS27 INS8 INS32 UPD43 INS27 INS8 INS32 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 UPD42 MOV43 INS59 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS66 INS42 UPD43 INS27 INS8 INS32 UPD43 INS27 INS8 INS32 INS25 INS42 INS42 MOV42 MOV42 MOV33 INS70 UPD42 MOV42 MOV42 INS42 MOV42 MOV9 UPD42 MOV42 MOV42 INS42 MOV42 MOV9 UPD42 MOV42 MOV42 UPD42 MOV42 MOV9 INS42 INS42 INS42 INS32 MOV42 INS42 INS32 MOV42 INS42 INS43 INS85 UPD42 INS33 UPD42 MOV42 INS33 UPD42 MOV42 MOV42 INS42 INS43 INS85 UPD42 INS33 INS42 INS33 INS42 INS32 UPD42 MOV42 INS42 INS9 UPD42 UPD42 INS33 UPD42 MOV42 INS33 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 INS33 UPD42 MOV42 INS33 INS42 INS32 UPD42 MOV42 INS9 UPD42 MOV42 INS33 UPD42 MOV42 INS32 MOV42 INS9 UPD42 MOV42 INS32 INS42 UPD42 UPD42 INS33 INS42 INS33 MOV21 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 MOV42 INS32 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 INS33 INS42 INS33 MOV54 INS42 INS42 INS42 UPD42 UPD42 INS33 INS42 INS33 MOV54 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 UPD42 INS33 INS42 INS33 MOV21 UPD42 MOV42 MOV42 INS42 UPD42 UPD42 INS33 INS42 INS33 MOV21 UPD42 MOV42 MOV42 INS42 UPD43 INS27 INS8 UPD43 INS44 INS42 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 MOV42 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS7 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 INS7 INS32 UPD42 MOV42 MOV42 INS32 UPD42 UPD42 INS32 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 INS42 INS9 INS42 INS42 INS42 INS7 INS7 INS42 UPD43 INS32 INS40 INS21 INS42 INS43 INS42 INS25 INS42 INS32 INS42 MOV32 INS42 INS32 INS42 INS32 INS42 MOV32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS7 INS42 INS27 MOV8 MOV42 MOV42 MOV42 INS40 MOV32 INS32 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 MOV42 MOV42 INS32 UPD42 MOV42 MOV42 INS7 UPD43 UPD42 INS53 INS7 UPD43 UPD42 INS32 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 MOV42 INS42 INS32 INS42 MOV33 INS10 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 UPD42 INS14 INS42 INS32 UPD42 INS14 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV42 INS43 INS32 INS32 UPD42 MOV42 MOV42 INS43 INS45 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD43 UPD43 INS42 UPD43 UPD43 INS42 INS42 INS42 INS42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL34 DEL2 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL34 DEL2 DEL27 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL40 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL39 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL34 DEL2 DEL33 DEL27 DEL27 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL43 DEL42 DEL40 DEL9 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL43 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL43 DEL42 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL40 DEL27 DEL27 DEL32 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL32 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL40 DEL9 DEL9 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL83 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL9 DEL40 DEL40 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL14 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL42 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41