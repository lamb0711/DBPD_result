JCR-1664: JNDI Referencable Issues

Avoid issues with the ordering of the JNDI configuration options by
including the entire Reference instance within BindableRepository.

Also, streamlined the JNDI classes a bit by using the AbstractRepository base class and the JackrabbitRepository interface, and by inlining many of the static methods that weren't being used outside the jndi package.

git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@681031 13f79535-47bb-0310-9956-ffa450edef68

+import org.apache.jackrabbit.api.JackrabbitRepository;
+import org.apache.jackrabbit.commons.AbstractRepository;
-import org.apache.jackrabbit.core.config.ConfigurationException;
-import java.io.ObjectOutputStream;
-import javax.jcr.Repository;
-import javax.naming.StringRefAddr;
-public class BindableRepository implements Repository, Referenceable, Serializable {
+public class BindableRepository extends AbstractRepository
+        implements JackrabbitRepository, Referenceable, Serializable {
-    static final long serialVersionUID = -2298220550793843166L;
+    private static final long serialVersionUID = 8864716577016297651L;
-     * The repository configuration file path.
-     */
-    private final String configFilePath;
-
-    /**
-     * The repository home directory path.
-     */
-    private final String repHomeDir;
-
-    /**
-     * type of <code>configFilePath</code> reference address (@see <code>{@link Reference#get(String)}</code>
+     * type of <code>configFilePath</code> reference address
+     * @see Reference#get(String)
+
-     * type of <code>repHomeDir</code> reference address (@see <code>{@link Reference#get(String)}</code>
+     * type of <code>repHomeDir</code> reference address
+     * @see Reference#get(String)
+     * The repository reference
+     */
+    private final Reference reference;
+
+    /**
-    protected transient Repository delegatee;
+    private transient JackrabbitRepository delegatee;
-    protected BindableRepository(String configFilePath, String repHomeDir) {
-        this.configFilePath = configFilePath;
-        this.repHomeDir = repHomeDir;
-        delegatee = null;
-    }
-
-    /**
-     * Creates an initialized BindableRepository instance using the given
-     * configuration information.
-     *
-     * @param configFilePath repository configuration file path
-     * @param repHomeDir     repository home directory path
-     * @return initialized repository instance
-     * @throws RepositoryException if the repository cannot be created
-     */
-    static BindableRepository create(String configFilePath, String repHomeDir)
-            throws RepositoryException {
-        BindableRepository rep = new BindableRepository(configFilePath, repHomeDir);
-        rep.init();
-        return rep;
+    public BindableRepository(Reference reference) throws RepositoryException {
+        this.reference = reference;
+        init();
-        RepositoryConfig config = createRepositoryConfig(configFilePath, repHomeDir);
-        delegatee = createRepository(config);
+        delegatee = getRepository(reference);
-
-     * Creates a repository configuration from a path to the repository.xml file
-     * and the repository home directory.
+     * Creates a repository instance based on the given reference. Can be
+     * overridden by subclasses to return different repositories. The default
+     * implementation returns a {@link RepositoryImpl} instance.
-     * @param configFilePath path to the repository.xml file.
-     * @param repHomeDir     the repository home directory.
-     * @return the repository configuration.
-     * @throws ConfigurationException on configuration error.
+     * @param reference repository reference
+     * @return repository instance
+     * @throws RepositoryException if the repository could not be created
-    protected RepositoryConfig createRepositoryConfig(String configFilePath,
-                                                      String repHomeDir)
-            throws ConfigurationException {
-        return RepositoryConfig.create(configFilePath, repHomeDir);
-    }
-
-    /**
-     * Creates a plain repository instance from a repository
-     * <code>config</code>.
-     *
-     * @param config the repository configuration.
-     * @return the repository instance.
-     * @throws RepositoryException if an error occurs while creating the
-     *                             repository instance.
-     */
-    protected Repository createRepository(RepositoryConfig config)
+    protected JackrabbitRepository getRepository(Reference reference)
+        RepositoryConfig config = RepositoryConfig.create(
+                reference.get(CONFIGFILEPATH_ADDRTYPE).getContent().toString(),
+                reference.get(REPHOMEDIR_ADDRTYPE).getContent().toString());
-    public Session login(String workspaceName)
-            throws LoginException, NoSuchWorkspaceException, RepositoryException {
-        return delegatee.login(workspaceName);
-    }
-
-    /**
-     * Delegated to the underlying repository instance.
-     * {@inheritDoc}
-     */
-    public Session login() throws LoginException, RepositoryException {
-        return delegatee.login();
-    }
-
-    /**
-     * Delegated to the underlying repository instance.
-     * {@inheritDoc}
-     */
-    public Session login(Credentials credentials)
-            throws LoginException, RepositoryException {
-        return delegatee.login(credentials);
-    }
-
-    /**
-     * Delegated to the underlying repository instance.
-     * {@inheritDoc}
-     */
-     * Creates a JNDI reference for this content repository. The returned
+     * Returns the JNDI reference for this content repository. The returned
-     * @return the created JNDI reference
+     * @return the JNDI reference
-        Reference ref = new Reference(BindableRepository.class.getName(),
-                BindableRepositoryFactory.class.getName(),
-                null); // no classpath defined
-        ref.add(new StringRefAddr(CONFIGFILEPATH_ADDRTYPE, configFilePath));
-        ref.add(new StringRefAddr(REPHOMEDIR_ADDRTYPE, repHomeDir));
-        return ref;
+        return reference;
-     * Serializes the repository configuration. The default serialization
-     * mechanism is used, as the underlying delegate repository is referenced
-     * using a transient variable.
-     *
-     * @param out the serialization stream
-     * @throws IOException on IO errors
-     * @see Serializable
-     */
-    private void writeObject(ObjectOutputStream out) throws IOException {
-        // delegate to default implementation
-        out.defaultWriteObject();
-    }
-
-    /**
-        } catch (RepositoryException re) {
+        } catch (RepositoryException e) {
-            throw new IOException(re.getMessage());
+            IOException exception = new IOException(e.getMessage());
+            exception.initCause(e);
+            throw exception;
-    void shutdown() {
-        ((RepositoryImpl) delegatee).shutdown();
+    public void shutdown() {
+        delegatee.shutdown();
+

MOV26 MOV26 MOV23 MOV23 UPD40 UPD40 UPD43 INS43 INS31 UPD42 INS42 INS83 MOV43 MOV59 MOV43 MOV59 UPD43 UPD83 UPD43 UPD83 MOV43 MOV29 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 MOV43 INS8 INS83 INS34 UPD65 MOV65 UPD65 MOV65 UPD42 UPD42 UPD42 MOV43 UPD42 INS65 UPD42 MOV43 UPD42 INS60 MOV41 UPD66 UPD66 UPD66 INS32 UPD66 MOV66 INS66 UPD66 MOV66 INS65 INS66 UPD42 UPD66 UPD66 UPD66 MOV43 INS59 UPD66 UPD66 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS32 INS42 UPD42 UPD42 UPD42 MOV42 MOV42 INS32 INS32 UPD42 INS60 INS21 INS53 INS32 INS42 INS32 INS42 MOV43 INS59 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL34 DEL38 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL66 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL33 DEL7 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL65 DEL66 DEL65 DEL42 DEL43 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL42 DEL32 DEL33 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL21 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL14 DEL53 DEL42 DEL43 DEL42 DEL11 DEL36