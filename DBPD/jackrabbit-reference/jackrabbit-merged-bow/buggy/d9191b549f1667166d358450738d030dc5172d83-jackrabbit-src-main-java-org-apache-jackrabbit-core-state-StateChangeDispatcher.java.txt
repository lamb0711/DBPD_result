JCR-618 Replace WeakIdentityCollection in StateChangeDispacher


git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk@470747 13f79535-47bb-0310-9956-ffa450edef68

-import org.apache.jackrabbit.util.WeakIdentityCollection;
-import org.apache.jackrabbit.name.QName;
+import EDU.oswego.cs.dl.util.concurrent.CopyOnWriteArrayList;
+import org.apache.jackrabbit.name.QName;
+import java.util.Iterator;
-    private final transient Collection listeners = new WeakIdentityCollection(5);
+    private final Collection listeners = new CopyOnWriteArrayList();
-    private final transient Collection nsListeners = new WeakIdentityCollection(5);
+    private final transient Collection nsListeners = new CopyOnWriteArrayList();
-        synchronized (listeners) {
-            assert (!listeners.contains(listener));
-            listeners.add(listener);
-        }
+        assert (!listeners.contains(listener));
+        listeners.add(listener);
+
-            synchronized (nsListeners) {
-                assert (!nsListeners.contains(listener));
-                nsListeners.add(listener);
-            }
+            assert (!nsListeners.contains(listener));
+            nsListeners.add(listener);
-            synchronized (nsListeners) {
-                nsListeners.remove(listener);
-            }
+            nsListeners.remove(listener);
-        synchronized (listeners) {
-            listeners.remove(listener);
-        }
+        listeners.remove(listener);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateCreated(created);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateCreated(created);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateModified(modified);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateModified(modified);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDestroyed(destroyed);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateDestroyed(destroyed);
-        ItemStateListener[] la;
-        synchronized (listeners) {
-            la = (ItemStateListener[]) listeners.toArray(new ItemStateListener[listeners.size()]);
-        }
-        for (int i = 0; i < la.length; i++) {
-            if (la[i] != null) {
-                la[i].stateDiscarded(discarded);
-            }
+        Iterator iter = listeners.iterator();
+        while (iter.hasNext()) {
+            ((ItemStateListener) iter.next()).stateDiscarded(discarded);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodeAdded(state, name, index, id);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodeAdded(state, name, index, id);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodesReplaced(state);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodesReplaced(state);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodeModified(state);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodeModified(state);
-        // small optimization as there are only a few clients interested in node state modifications
-        if (!nsListeners.isEmpty()) {
-            NodeStateListener[] la;
-            synchronized (nsListeners) {
-                la = (NodeStateListener[]) nsListeners.toArray(new NodeStateListener[nsListeners.size()]);
-            }
-            for (int i = 0; i < la.length; i++) {
-                if (la[i] != null) {
-                    la[i].nodeRemoved(state, name, index, id);
-                }
-            }
+        Iterator iter = nsListeners.iterator();
+        while (iter.hasNext()) {
+            ((NodeStateListener) iter.next()).nodeRemoved(state, name, index, id);

MOV26 MOV26 INS26 INS40 UPD40 MOV8 MOV8 MOV29 MOV44 MOV44 MOV44 MOV44 MOV29 MOV44 INS8 MOV29 MOV44 INS8 MOV29 MOV44 MOV44 MOV44 MOV44 INS8 INS25 INS25 MOV21 INS60 INS61 INS60 INS61 INS60 INS61 INS60 INS61 INS60 INS61 INS60 INS61 INS60 INS61 INS60 INS61 UPD43 UPD43 MOV62 MOV8 MOV62 MOV8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 INS43 INS59 INS32 INS8 UPD42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV21 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV21 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV21 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV21 INS42 INS42 INS32 INS42 INS42 MOV21 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV21 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV21 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV21 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 MOV42 INS42 INS36 INS36 INS36 INS36 INS36 INS36 INS36 INS36 INS11 INS11 INS11 INS11 INS11 INS11 INS11 INS11 MOV43 INS32 MOV43 INS32 MOV43 INS32 MOV43 INS32 MOV43 INS32 MOV43 INS32 MOV43 INS32 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL34 DEL34 DEL42 DEL51 DEL42 DEL51 DEL8 DEL25 DEL8 DEL42 DEL51 DEL25 DEL42 DEL8 DEL51 DEL8 DEL42 DEL42 DEL2 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL85 DEL5 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL2 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL2 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL2 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL38 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL85 DEL5 DEL42 DEL42 DEL85 DEL5 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL38 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL38 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL38 DEL43 DEL85 DEL5 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL11 DEL7 DEL21 DEL8 DEL51 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL8